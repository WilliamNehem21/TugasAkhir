Available online at www.sciencedirect.com


Electronic Notes in Theoretical Computer Science 312 (2015) 107–124
www.elsevier.com/locate/entcs

Yet Another Bijection Between Sequent Calculus and Natural Deduction 1
Cecilia Englander2
Departmento de Inform´atica PUC-Rio
Rio de Janeiro, Brazil
Gilles Dowek3
Inria Paris, France
Edward Hermann Haeusler4
Departmento de Inform´atica PUC-Rio
Rio de Janeiro, Brazil

Abstract
This work shows a bijection between sequent calculus and natural deduction for intuitionistic propositional logic so far as normal and cut-free derivations are concerned.
Keywords: Correspondence, Natural Deduction, Sequent Calculus, Intuitionistic propositional logic, Proof Theory

Introduction
Equivalences between natural deduction and sequent calculus have been discussed since their definition by Gentzen [2]. By equivalence between the systems we mean that every derivation in one system can be transformed into a derivation in the other. Such equivalence being established, the search for a stronger equivalence starts. Some examples are Zucker [13], who shows a correspondence between normalization

1 The authors are grateful to CAPES and CNPq for their financial support.
2 Email: cenglander@inf.puc-rio.br
3 Email: gilles.dowek@inria.fr
4 Email: hermann@inf.puc-rio.br

http://dx.doi.org/10.1016/j.entcs.2015.04.007 1571-0661/© 2015 Published by Elsevier B.V.
This is an open access article under the CC BY-NC-ND license (http://creativecommons.org/licenses/by-nc-nd/4.0/).

and cut-elimination for the fragment {∧, →, ∀, ⊥}, followed by Pottinger [11], who improved Zucker’s method by simplifying it and extending it to the full intuitionistic propositional logic. Danos, Joinet and Schellinx [1] have an isomorphism between Sequent Calculus and Natural Deduction passing through Linear Logic. Nigam and Miller [10] showed that different proof systems, including Natural Deduction and Sequent Calculus, have the same provable sets of formulas by encoding the systems into a Focused Linear Logic. In [4], Henriksen showed that Linear Logic is not needed and showed a similar result from that of [10] by encoding the systems into a focused intuitionistic system. Negri and von Plato [9] showed the relation between structural rules in sequent calculus and discharge of formulas in natural deduction. Due to the structural rules, the correspondence shown in [9] is not one-to-one. For example, a derivation of the implication A → (B → (B → (A → B))) in Sequent Calculus has three applications of the weakening rule and these applications can appear in the beginning of the derivation (in different orders) or in different levels of the derivations. Two possible derivations for this implication, with the notation used in [9], are:


  B ⇒ B	
Wk 
A, B ⇒ B
  B ⇒ B	
Wk 
A, B ⇒ B

Wk 
A, A, B ⇒ B
R ⊃
B ⇒ A ⊃ B

Wk 
A, A, B, B ⇒ B
R ⊃
A, B, B ⇒ A ⊃ B
R ⊃
R ⊃
⇒ B ⊃ (A ⊃ B)
Wk 
B ⇒ B ⊃ (A ⊃ B)
R ⊃

A, B ⇒ B ⊃ (A ⊃ B)
R ⊃
A ⇒ B ⊃ (B ⊃ (A ⊃ B))
R ⊃
⇒ B ⊃ (B ⊃ (A ⊃ B))
Wk 
A ⇒ B ⊃ (B ⊃ (A ⊃ B))
R ⊃

⇒ A ⊃ (B ⊃ (B ⊃ (A ⊃ B)))	⇒ A ⊃ (B ⊃ (B ⊃ (A ⊃ B)))

The derivation on the left side has no correspondent in Natural Deduction and the derivation on the right side corresponds to the derivation


2.
[B]


I ⊃, 1.

 	
I ⊃, 2.
B → (A ⊃ B)

B ⊃ (B → (A ⊃ B))
I ⊃, 3.
I ⊃, 4.

A ⊃ (B ⊃ (B → (A ⊃ B)))
in Natural Deduction, where 1., 3., and 4., are “ghost” labels that correspond to vacuous discharge. In the systems we are going to work with there is only one possible (normal/cut-free) derivation of A → (B → (B → (A → B))) in Sequent Calculus and in Natural Deduction.
There are more proofs of a proposition in sequent calculus than in natural de- duction. For instance, there are two possible cut-free derivations for the proposition (A ∧ B) → (A ∨ C) in the sequent calculus system defined in [3]:

	A ▶ A	 R1∨
	A ▶ A ∨ C	 L1∧
	A ∧ B ▶ A ∨ C	 R⇒ 
▶ (A ∧ B) → (A ∨ C)
	A ▶ A	 L1∧
	A ∧ B ▶ A	 R1∨
	A ∧ B ▶ A ∨ C	 R⇒ 
▶ (A ∧ B) → (A ∨ C)

and only one in the natural deduction system defined in [12]:
(1)
 A&B 
	A	
	A ∨ C	 (1)
(A&B) → (A ∨ C)
Thus, to define an isomorphism, we need to choose a more restrictive sequent calculus and/or a more liberal natural deduction system.
Our goal is to show that the relation between cut-free and normal derivations are stronger than what is shown in [11,9,7].

Sequent Calculus
LJT is the implicational fragment of LKT which was first introduced in Joinet’s thesis [7]. In fact, the system introduced by Joinet is a slight different version of LJT, called ILU to stress that this fragment of LKT could also be seen as the intuitionistic fragment of Girard’s LU.
In [5], Herbelin defined an extension of the usual λ-calculus called λ-calculus. However, for a λ-term that corresponds to a λ-term of the form (... (x[u1]) ... [uk]), the LJT image is a proof with cuts. This term is a λ image of the normal term (... (x u1) ... un) 5 , but in λ it is not normal due to the use of explicit substitution in λ. Thus, [5] reports a mapping between λ and LJT that takes normal terms as those shown in λ into derivations in LJT with cuts. In our proposed isomorphism, we avoid this by using a notion of proof equivalence and different versions of sequent calculus and natural deduction. The paper [5] only deals with the implicational fragment of intuitionistic logic, but in his thesis [6], Herbelin extends the result to the full propositional fragment of intuitionistic logic.
In table 1 we present LJT for the full intuitionistic propositional fragment
{∧, ∨, →, ¬, ⊥}, where negation (¬) can be seen as a particular case of implica- tion in which the consequence is always a falsity.
A sequent in LJT is of the form Γ; Δ ▶ γ, where Γ is a set of formulas (possibly empty), γ is a formula and Δ is a set of at most one formula. The place occupied by Δ is called stoup and the formula in the stoup (if any) is called head-formula. In a derivation, the stoup of the bottomost sequent must be empty.
Herbelin’s version of LJT is a slightly different version of the intuitionistic frag- ment of LKT which was first introduced in Joinet’s PhD thesis [7]. The differences are: (1) the formulas that form the disjunction in ∨▶ are outside the stoup, (2) to apply the right rules the stoup must be empty and (3) the rule D keeps a copy of

5 (... (x u1) ... un) is normal in λ whenever ui is normal.




(→▶)
Γ; ▶ α	Γ; β ▶ γ


Γ; α → β ▶ γ

(▶→)
Γ, α; ▶ β


Γ; ▶ α → β




(∧ ▶)
Γ; β ▶ γ
Γ; α ∧ β ▶ γ
Γ; α ▶ γ
Γ; α ∧ β ▶ γ

(▶ ∧)
Γ; ▶ α	Γ; ▶ β
Γ; ▶ α ∧ β




(∨ ▶)
Γ, α; ▶ γ	Γ, β; ▶ γ


Γ; α ∨ β ▶ γ

(▶ ∨)
Γ; ▶ α


Γ; ▶ α ∨ β
Γ; ▶ β


Γ; ▶ α ∨ β




(⊥ ▶)
Γ; α ▶ γ
Γ; ⊥▶ γ




Ax
Γ; α ▶ α
Γ, α; α ▶ γ
D
Γ, α; ▶ γ
Table 1 LJT rules


the formula that passed to the stoup (4) the left rules for conjunction, which are three:

Γ, α; β ▶ γ
Γ; α ∧ β ▶ γ
Γ, β; α ▶ γ
Γ; α ∧ β ▶ γ
Γ, β, α; ▶ γ
Γ; α ∧ β ▶ γ

The version of LJT presented here is Herbelin’s version, except for the rules of left conjunction, which are like in Joinet’s thesis.
An inference rule can be read from the conclusion to its premises. Note that we can only apply right rules when the stoup is empty and that we can bring a formula to the stoup with the rule D but we cannot take a formula from the stoup. LJT has additive contexts, i.e., the same set Γ of assumptions in the premises of each rule, and even though we need D as a rule in the system.
LJT forces a focusing in the derivation. When there is a formula in the stoup, we are “forced” to apply left rules, breaking the named formula until either an atomic formula is in the stoup, in which case we have an initial sequent (that is, the topmost sequent in a derivation), or until we apply ∨ ▶, in which case the stoup is empty, and we can choose between applying a right rule and the rule D, in which case the focus is back to the head-formula. When the bottommost rule applied in a cut-free derivation is a D-rule, we can identify the trunk of applications of left rules forced by the stoup with a positive trunk in focused proofs 6 .
Due to the stoup, the system admits two cuts, a head-cut (CH ) which cuts the formula in the stoup and a middle-cut (CM ) which cuts a formula outside the stoup:

Γ; Δ ▶ A	Γ; A ▶ B
CH
Γ; Δ ▶ B
Γ; ▶ A	Γ, A;Δ ▶ B
CM

Γ; Δ ▶ B



6 This terminology is according to [8]

Definition 1.1 [Cut-free derivation] We say that a derivation Π is cut-free in LJT when there is neither applications of CH nor applications of CM in Π.
The stoup, that is, the use of focusing, reduces the amount of derivations that we usually have in sequent calculus. For instance, instead of the two possible cut-free sequent calculus derivations of (A ∧ B) → (A ∨ C) we showed in last section, we only have one in LJT (see figure 1).

Ax
A ∧ B; A ▶ A
∧ ▶ 
A ∧ B; A ∧ B ▶ A
D
A ∧ B; ▶ A
▶ ∨ 
A ∧ B; ▶ A ∨ C
▶→
; ▶ (A ∧ B) → (A ∨ C)
Fig. 1. Example of a derivation in LJT


Natural Deduction
If we decide to use Gentzen’s natural deduction system NJ , there would be no way to distinguish derivations with more premises than needed. For instance, derivations of A ∧ B from A ∧ B and of A ∧ B from A ∧ B, C in LJT would be translated to the same derivation in NJ .
In order to have a faithful comparison, we decided to represent natural deduction in a sequent calculus style. The system ND is presented in table 2 and the rules can also be read bottom-up.



(E→)
Γ ▶ α → β	Γ ▶ α
Γ ▶ β

(I→)
Γ,α ▶ β
Γ ▶ α → β




(E∧)
Γ ▶ α ∧ β


Γ ▶ α
Γ ▶ α ∧ β


Γ ▶ β

(I∧)
Γ ▶ α	Γ ▶ β


Γ ▶ α ∧ β




(E∨)
Γ ▶ α ∨ β	Γ,α ▶ γ	Γ,β ▶ γ
Γ ▶ γ

(I∨)
Γ ▶ α

Γ ▶ α ∨ β
Γ ▶ β
Γ ▶ α ∨ β



(E⊥)  Γ ▶⊥ 
Γ ▶ γ

Ax
Γ,α ▶ α
Table 2 ND rules


Definition 1.2 [Major premise] The premises Γ ▶ α → β, Γ ▶ α ∧ β, Γ ▶ α ∨ β and Γ ▶ ⊥ are the major premises of the rules E→, E∧, E∨ and E⊥, respectively. The other premises are called minor premises.

A cut rule in sequent calculus is usually mapped into a derivation with a max- imal sequent in natural deduction, that is, a sequent which is the conclusion of an introduction rule and major premise of an elimination rule. But LJT has two cuts: if one is translated to a derivation with a maximal sequent, what would the other cut represent in natural deduction? We add to our system the following admissible rule known as substitution rule:
Γ ▶ α	Γ,α ▶ β
E
Γ ▶ β
Definition 1.3 [Normal derivation] A derivation Π is normal in ND when there is neither a maximal sequent nor applications of substitution rules in Π. Besides that, no major premise of Π is the conclusion of an application of EV.
This restriction is due to the fact that an application of EV might “hide” a maximal sequent. For instance, take the derivation in figure 2.


Π2
Π1	Γ,C ▶ A
Π3
Γ,C ▶ B	Π4
I∧

Γ ▶ C ∨ D
Γ,C ▶ A ∧ B
 Γ ▶ A ∧ B  E∧
Γ ▶ A
Γ,D ▶ A ∧ B
E∨

Fig. 2. Example of a derivation in ND

Such a derivation should not be considered as normal and it should be reduced first by commuting the elimination rule of the disjunction with that of the conjunc- tion, which makes the maximal sequent Γ,C ▶ A ∧ B evident.
Bijection
As we are, for now, restricting the work to normal and cut-free derivations, we are going to use the term “bijection” instead of “isomorphism”. We say that ND and LJT are bijective when there exists transformations t1 from ND to LJT and t2 from LJT to ND, such that, if Π is a cut-free derivation in LJT, then t1(t2(Π)) = Π and, if Π is a normal derivations in ND, then t2(t1(Π)) = Π. The size of a derivation Π (either in ND or in LJT) is the number of rules in Π.
The translations between ND and LJT are defined by induction on the size of derivations. One of the cases we need to take into account is when the last rule applied in a derivation is D:
Σj
Γ, B; B ▶ C
Q
Γ, B; ▶ C
As was mentioned, the conclusions of the derivations in LJT have empty stoup, which means that Σj is not a derivation. Hence, to define translations between derivations, we need to define translations between pseudo-derivations. Our trans- lations are based on a pair (p, q) of functions where p is a map between pseudo-

derivations and q is a map between derivations and when we define q, we may use
p, and in some cases of the definition of p we use q.
Definition 2.1 [Left sequence] A sequence Γ1; B1 ▶ A1, . .., Γn; Bn ▶ An, Γn+1; Δ ▶ An+1 of sequents of a cut-free derivation Π in LJT such that
Γi—1; Bi—1 ▶ Ai—1, 1 < i ≤ n is premiss of the left-rule of which Γi; Bi ▶ Ai is the conclusion and
Γn; Bn ▶ An is premiss of the rule 7 of which Γn+1;Δ ▶ An+1 is the conclusion
is called a left sequence. If Γ1; B1 ▶ A1 is an initial sequent and Γn+1; ▶ An+1 is the conclusion of Π, then the sequence is called major sequence and Π is called a pure left derivation.
In other words, a pure left derivation is a derivation without occurrences of right-rules in its main branch. The derivation of figure 4 is a pure left derivation with the sequents Γ; C ▶ C, Γ; B → C ▶ C, Γ; A → (B → C) ▶ C, Γ; ▶ C forming its major sequence.
Definition 2.2 [Pseudo-derivation - LJT] Let Π be a pure left derivation in LJT and let Γs; As ▶ Bs be a sequent of the major sequence of Π. A pseudo-derivation Σ of Π is the tree obtained from Π by removing every sequent occurrence below Γs; As ▶ Bs.
A pseudo-derivation can be seen as a pure left derivation where the bottom part is missing.

Ax
Γ; A ▶ A
Q
Γ; ▶ A


Ax
Γ; B ▶ B

As an example,
Γ; A → B ▶ B
Q
Γ; ▶ B
→▶
Γ; C ▶ C
and
Ax
→▶
Ax
Γ; C ▶ C

Γ; B → C ▶ C
are pseudo-derivations of the derivation of figure 4. As the derivation of figure 1 is
not a pure left derivation, there is no pseudo-derivation associated to it.
Definition 2.3 [Elimination sequence] A sequence Γ1 ▶ A1,..., Γn ▶ An of a nor- mal derivation Π in ND such that Γi ▶ Ai, 1 ≤ i < n is major premiss of the elimination rule of which Γi+1 ▶ Ai+1 is the conclusion is called an elimination sequence. If Γ1 ▶ A1 is an initial sequent and Γn ▶ An is the conclusion of Π, then the elimination sequence is called major sequence and Π is called a pure elimination derivation.
The derivation of figure 3 is a pure elimination derivation with the sequents Γ ▶ A → (B → C), Γ ▶ B → C, Γ ▶ C forming its major sequence.
Definition 2.4 [Pseudo-derivation - ND] Let Π be a pure elimination derivation in ND and let Γ ▶ B be a sequent in the major sequence of Π. A pseudo-derivation

7 If Δ = $, then it is a Q-rule; if Δ /= $, then it is a left rule.

Σ of Π is the tree obtained from Π by removing every sequent occurrence above Γ ▶ B.
A pseudo-derivation can be seen as an “unfinished” pure elimination derivation.
Ax	Ax

As an example,
	
 Γ ▶ A	Γ ▶ A → B  E→
 Γ ▶ B	Γ ▶ B → C  E→
Γ ▶ C
and Γ ▶ C are

pseudo-derivations of the derivation of figure 3. As the derivation of figure 2 is not
a pure elimination derivation, there is no pseudo-derivation associated to it.
Notation: we usually use Π to represent derivations and Σ to represent pseudo- derivations.
Lemma 2.5 Let Π be a normal derivation in ND. If the bottommost rule applied in Π is an elimination rule, then Π is a pure elimination derivation.
Proof. If Π were not a pure elimination derivation, then there would be a major premiss in Π that is also the conclusion of an introduction rule, that is, Π would not be normal.	2
From the previous lemma we infer that, as Π is a pure elimination derivation, its uppermost rule is also an elimination rule.
Now we define translations from LJT to ND. We are going to relate elimination rules with left rules. Note that the active formulas in the elimination rules are on the right side of an upper sequent while the active formulas in the left rules are on the left side of the bottom sequent (see figures 3 and 4). Additionally, left rules demand one formula more than elimination rules, that is, to define the elimination of implication, for instance, we used a set of formulas Γ and the formulas α → β, α and β. Besides these, in the left rule for implication we have a formula γ.
In a derivation, if we take the elimination sequence that contains a sequent Γ ▶ α → β, this formula γ appears in the last sequent, which will have the form Γj ▶ γ. If we take the elimination sequence that contains the sequent Γ; α → β ▶ γ, this formula γ will appear in the right side of every sequent of this sequence.
As an example, compare the derivations of C from Γ = {A, A → B, A → (B → C)} in ND (figure 3) and in LJT (figure 4), where the bold formulas are the active formulas of the major sequence of the derivations.

Ax	Ax
Ax
Γ ▶ A
Ax
Γ ▶ A → (B → C)

	
 Γ ▶ A	Γ ▶ A → B  E→	E→
 Γ ▶ B	Γ ▶ B → C  E→
Γ ▶ C
Fig. 3. Example of a pure elimination derivation in ND

From LJT to ND
In this section, we define translations from LJT to ND.
Definition 2.6 Let Σ be a pseudo-derivation of a derivation Π in LJT. If g is a translation from cut-free derivations in LJT to normal derivations in ND, then the



Ax
Γ; A ▶ A
Q
Γ; ▶ A


Ax
Γ; B ▶ B
→▶

Ax
Γ; A ▶ A
Q
Γ; A → B ▶ B
Q
Γ; ▶ B
Ax
Γ; C ▶ C
→▶

Γ; ▶ A
Γ; B → C ▶ C
→▶
Γ; A → (B → C) ▶ C
Q
Γ; ▶ C


Fig. 4. Example of a pure elimination derivation in LJT

translation f of pseudo-derivations in LJT to pseudo-derivations in ND is defined recursively as follows:

If Σ =
Γ; C ▶ C

Πj
Ax , then f (Σ) = Γ ▶ C.

Σj


g(Πj)

If Σ =
Γ; ▶ A
Γ; B ▶ C
, then f (Σ) =
 Γ ▶ A	Γ ▶ A → B  E→




If Σ =
Γ; A → B ▶ C
Σj
Γ; B ▶ C
→▶



, then f (Σ) =

 Γ ▶ A ∧ B 
Γ ▶ B
Γ ▶ B
f (Σj)
E∧



If Σ =
Γ; A ∧ B ▶ C
Σj
Γ; A ▶ C
Γ; A ∧ B ▶ C
Π1
Λ ▶ 


, then f (Σ) =
Λ ▶ 

Π2
f (Σj)
 Γ ▶ A ∧ B  E∧
Γ ▶ A
f (Σj)

If Σ =
Γ, A; ▶ C
Γ, B; ▶ C	,
V ▶ 

Γ; A ∨ B ▶ C
then f (Σ) =	Γ ▶ A ∨ B
g(Π1) Γ,A ▶ C
Γ ▶ C
g(Π2) Γ,B ▶ C
E∨


If Σ =
Σj
Γ; A ▶ C
Γ; ⊥▶ C

, then f (Σ) =
⊥ ▶ 
 Γ ▶⊥  E∧
Γ ▶ A
f (Σj)

Note the role that the formula C plays on the translation. All the major sequents of the elimination sequence of Σ have conclusion C, but C “disappears” in the translation. It is so because the active formula of the major sequents in LJT are in the left side of the sequent while the active formulas in the major sequents of ND are on the right side of the sequent. The conclusion C only appears in the conclusion of the derivation which contains f (Σ).
Lemma 2.7 If g is a translation from cut-free derivations in LJT to normal deriva- tions in ND, then, if Σ is a pseudo-derivation of a derivation in LJT, then f (Σ) is a pseudo-derivation of a derivation in ND.

Proof. The proof is by induction on the size of Σ and follows straight from the definition of f (definition 2.6). We show one case as an example:

Let Σ=
Π1	Π2
Γ, A; ▶ C	Γ, B; ▶ C
. By definition 2.6, f (Σ) =
V ▶ 

Γ; A ∨ B ▶ C
g(Π1)
g(Π2)

Γ ▶ A ∨ B
Γ,A ▶ C
Γ ▶ C
Γ,B ▶ C	.
E∨

By hypothesis, both g(Π1) and g(Π2) are derivations in ND. Hence, f (Σ) is a pseudo-derivation of a derivation in ND.	2
Definition 2.8 Let Π be a cut-free derivation in LJT. The translation g from cut- free derivations in LJT to normal derivations in ND can be defined recursively as follows:

If Π =
Ax
Γ, A; A ▶ A
Q
Γ, A; ▶ A
Π1
, then g(Π) =
Πn
Ax
Γ,A ▶ A

If Π =
 Γ1; ▶ B1	.. .	Γn; ▶ Bn 	,
▶ ⊙ 
Γ; ▶ B

g(Π1)	g(Πn)

then g(Π) =
 Γ1 ▶ B1	.. .	Γn ▶ Bn 
I⊙
Γ ▶ B
, ⊙∈ {→, ∧, ∨}

Σj		 Ax

If Π =
Γ, A; A ▶ B
Γ, A; ▶ B
, then g(Π) =
Q
Γ,A ▶ A
f (Σj)

Theorem 2.9 If Π is a cut-free derivation in LJT, then g(Π) is a normal derivation in ND.
Proof. The proof is by induction on the size of Σ and it follows straight from the definition 2.8 and lemma 2.7. We show one case as example:

Let Π =
Σj
Γ, A; A ▶ B
Γ, A; ▶ B
. By definition 2.8, g(Π) =
Q
Ax
Γ,A ▶ A	.
f (Σj)

As every sub-derivation of Σj is smaller than Π, by induction hypothesis and
by lemma 2.7, f (Σj) is a pseudo-derivation of a derivation in ND. Hence, g(Π) is a derivation in ND.	2

From ND to LJT
In this section, we define translations from ND to LJT.
Definition 2.10 Let Σ be a pseudo-derivation of a pure elimination derivation Π in ND. If t is a translation from cut-free derivations in LJT to normal derivations in ND, then the translation s of pseudo-derivations in ND to pseudo-derivations in LJT is defined recursively as follows, where Γ ▶ C is the conclusion of Π:

If Σ = Γ ▶ C, then s(Σ) =
Ax
Γ; C ▶ C




If Σ =


If Σ =
 Γ ▶ A ∧ B  E∧
Γ ▶ A
Σj
 Γ ▶ B ∧ A E∧
Γ ▶ A
Σj

, then s(Σ) =


, then s(Σ) =
s(Σj) Γ; A ▶ C
Λ ▶ 
Γ; A ∧ B ▶ C
s(Σj) Γ; A ▶ C

Λ ▶ 
Γ; B ∧ A ▶ C


If Σ =
Πj
 Γ ▶ A		Γ ▶ A → B  E→ , then s(Σ) = Γ ▶ B
t(Πj) Γ; ▶ A
s(Σj) Γ; B ▶ C
→▶

Σj If Σ =	Γ ▶ A ∨ B

Π1
Γ,A ▶ D
Γ ▶ D
t(Π1)

Π2
Γ,B ▶ D	,
E∨

t(Π2)
Γ; A → B ▶ C

then s(Σ) =
Γ, A; ▶ D
Γ, B; ▶ D
V ▶ 



If Σ =

 Γ ▶⊥  E
Γ ▶ A
Σj
Γ; A ∨ B ▶ D

, then t(Σ) =

s(Σj) Γ; A ▶ C
Λ ▶ 
Γ; ⊥▶ C

Lemma 2.11 If t is a translation from normal derivations in ND to cut-free de- rivations of LJT, then, if Σ is a pseudo-derivation of ND, then s(Σ) is a pseudo- derivation in LJT.
Proof. The proof is by induction on the size of Σ and it follows straight from the definition of s (definition 2.10). We show one case as an example:

Let Σ =	Γ ▶ A ∨ B
Π1
Γ,A ▶ D
Γ ▶ D
Π2
Γ,B ▶ D
. By the definition 2.10, s(Σ) =
E∨

t(Π1)
Γ, A; ▶ D
t(Π2)
Γ, B; ▶ D
V ▶ 

Γ; A ∨ B ▶ D
By hypothesis, both t(Π1) and t(Π2) are derivations in LJT. Hence, s(Σ) is a pseudo-derivation of a derivation in ND.	2
Definition 2.12 Let Π be a normal derivations in ND. The translation t from normal derivations in ND to cut-free derivations in LJT can be defined recursively as follows:

If Π =
Γ ▶ A
Ax , then t(Π) =
Ax
Γ; A ▶ A
Q
Γ; ▶ A

Π1	Πn

If Π =
 Γ1 ▶ C1	.. .	Γn ▶ Cn 	,
I⊙
Γ ▶ C

t(Π1)	t(Πn)

then t(Π) =
 Γ1; ▶ C1	.. .	Γn; ▶ Cn 
Γ; ▶ C
, ⊙∈ {→, ∧, ∨}
⊙ ▶ 

The cases where the bottommost rule is an elimination rule can be easily derived from definition 2.10, but instead of looking to the bottommost rule, we refer to the lemma 2.5 and look at the uppermost rule applied in Π. We show one case as an example:


If Π =
 Γ ▶ A ∧ B  Ax
Γ ▶ A	E∧ , then s(Π) =
s(Σj)
	Γ; A ▶ C	
Γ; A ∧ B ▶ C


Λ ▶ ,

Σj		 Q
Γ; ▶ C
where Γ ▶ C is the conclusion of Π and A ∧ B ∈ Γ.
Theorem 2.13 If Π is a normal derivation in ND, then t(Π) is a cut-free derivation in LJT.
Proof. The proof is by induction on the size of Π and it follows straight from definition 2.12 and lemma 2.11. We show one case as an example:


Let Π =
Πj		
 	Ax
E→ . By def. 2.12, t(Π) =
t(Πj)
Γ; ▶ A
s(Σj)
Γ; B ▶ C →▶ ,

Γ ▶ B
Σj
where Γ ▶ C is the conclusion of Π and A → B ∈ Γ.
Γ; A → B ▶ C
Q
Γ; ▶ C

As every sub-derivation of Σj is smaller than Π, by lemma 2.11 s(Σj) is a pseudo- derivation of a derivation in LJT and by induction hypothesis, t(Πj) is a cut-free derivation in LJT. Hence, t(Π) is a derivation in LJT.	2

The bijection
With the results from sections 2.1 and 2.2, we prove:
Lemma 2.14 If g(t(Π)) = Π for every normal derivation Π then, for every pseudo- derivation Σ of ND, f (s(Σ)) = Σ.
Proof. The proof is by induction on the size of Σ and follows from the previous definitions and lemmas. We only show the case in which the last rule applied in Σ is EV.

If Σ = Γ ▶ A ∨ B
Π1
Γ,A ▶ C
Γ ▶ C
Π2
Γ,B ▶ C
E∨, then f (s (Σ)) =

⎛	t(Π1)
t(Π2)	⎞
g(t(Π1))
g(t(Π2))

f ⎝ Γ, A; ▶ C
Γ, B; ▶ C
⎠ =	Γ ▶ A ∨ B
Γ,A ▶ C


Γ,B ▶ C
E

By hypothesis, g(t(Π1)) = Π1 and g(t(Π2)) = Π2. Hence, f (s(Σ)) = Σ.	2

Theorem 2.15 For every normal derivation Π of ND, g(t(Π)) = Π.
Proof. The proof is by induction on the size of Π and it follows from lemma 2.14. We only show the case in which the top-most rule applied in Π is E→.
Π1
 Γ ▶ A	Γ ▶ A → B  Ax
If Π =	Γ ▶ B	E→, then
Σ1

⎛ t(Π1)
s(Σ1)	⎞	g(t(Π1))	Ax

g (t (Π)) = g ⎜⎝
Γ; B ▶ C
→▶⎠


Γ ▶ A
Γ ▶ A → B E→

By IH, g(t(Π1)) = Π1 and by lemma 2.14 and IH, f (s(Σ1)) = Σ1. Hence,
g(t(Π)) = Π.	2
Lemma 2.16 If t(g(Π)) = Π for every cut-free derivation Π then, for every pseudo- derivation Σ of LJT, s(f (Σ)) = Σ
Proof. The proof is by induction on the size of Σ and it follows from the previous definitions and lemmas. We only show the case in which the last rule applied in Σ is D preceded by ∨ ▶.

If Σ =
Π1
Γ, A; ▶ C
Π2
Γ, B; ▶ C
V ▶, then s (f (Σ)) =

Γ; A ∨ B ▶ C
⎛	g(Π1)
g(Π2)	⎞	t(g(Π1))
t(g(Π2))

s ⎝ Γ ▶ A ∨ B	Γ,A ▶ C


Γ,B ▶ C V ▶⎠ =
Γ, A; ▶ C
Γ, B; ▶ C
V ▶ 

By hypothesis, t(g(Π1)) = Π1 and t(g(Π2)) = Π2. Hence, s(f (Σ)) = Σ.	2
Now, we proceed to prove that the translations are inverse to each other.
Theorem 2.17 For every cut-free derivation Π of LJT, t(g(Π)) = Π.
Proof. The proof is by induction on the size of Π and it follows from lemma 2.14. We only show the case in which the last rule applied in Π is D preceded by →▶.
Πj	Σj
Γ; ▶ A	Γ; B ▶ C

If Π is of the form
Γ; A → B ▶ C
Γ; ▶ C
→▶ , then t (g (Π))
Q

⎛ g(Πj)

⎞	t(g(Πj))	s(f (Σj))
	



Γ ▶ B
f (Σj)
Γ; A → B ▶ C
Q
Γ; ▶ C

By induction hypothesis, t(g(Πj)) = Πj and by lemma 2.16, s(f (Σj)) = Σj.	2

From theorems 2.15 and 2.17, we have that the translations defined between ND and LJT are bijective.
Considering non-normal derivations
In this section we extend the mappings shown in the previous section to deal with non-normal ND derivations and LJT with cuts. Due to lack of space, the presenta- tion omits the proofs. We hope its reading is enough to make the reader understand how the isomorphism we obtained between LJT and ND works.
First, we extend the definitions by allowing the sequents in left/elimination sequences to be premises of cut/substitution rules. This automatically changes the definition of pseudo-derivations allowing them to have occurrences of cut/substitu- tion rules.
Second, we define conversion steps for both pseudo-derivations and derivations and show the normalization property for both LJT and ND. The conversions will either eliminate the cut/substitution rule, bring it one level up in the derivation or decrease the number of connectives in the cut-formula. Some examples of conver- sions are:

Π21
Π1	Γ, A; ▶ P
Π22
Γ, A; ▶ Q
Π1 Γ; ▶ A
Π21 Γ, A; ▶ P
Π1 Γ; ▶ A
Π22
Γ, A; ▶ Q

In LJT:
Γ; ▶ A
Γ, A; ▶ P Λ Q
Γ; ▶ P Λ Q
Ψ3
▶ Λ Q
CM
Γ; ▶ P
CM

Γ; ▶ P Λ Q
Ψ3
CM
Γ; ▶ Q
▶ Λ 

Π21
Π1	Γ, A; ▶ P
Π22
Γ, A; Q ▶ B
Π1 Γ; ▶ A
Π21 Γ, A; ▶ P
Π1 Γ; ▶ A
Π22
Γ, A; Q ▶ B

Γ; ▶ A
Γ, A; P → Q ▶ B
Γ; P → Q ▶ B
Ψ3
Ψ2
→▶ Q
CM
Γ; ▶ P
CM

Γ; P → Q ▶ B
Ψ3
CM
Γ; Q ▶ B
→▶

In ND:
Γ,A ▶ A  Ax
Γ,A ▶ B
S Q
Ψ2
Γ,A ▶ B

Γ,A ▶ B
Ψ3
Ψ21



Ψ22
Ψ3
Ψ1	Ψ21


Ψ1	Ψ22

Ψ1	Γ,A ▶ P
Γ,A ▶ Q
Γ ▶ A
Γ,A ▶ P
S
Γ ▶ A
Γ,A ▶ Q
S

Γ ▶ A
Γ,A ▶ P Λ Q
Γ ▶ P Λ Q	S
Ψ3
I∧ Q
Γ ▶ P

Γ ▶ P Λ Q
Ψ3
Γ ▶ Q
I∧

The proof of the normalization is by induction on the complexity of the cut/subs- titution formula and by the size of the (pseudo-)derivation and it uses similar lemmas regarding pseudo-derivations.. Thus, the following theorems hold:
Theorem 3.1 Every derivation Π in LJT can be transformed into a cut-free deriva- tion.
Theorem 3.2 Every derivation in ND can be transformed into a normal deriva- tion.
We define maps fj and sj between pseudo-derivations and gj and tj between

derivations and show that these maps are indeed translations. When the last rule applied in Σ/Π is not a cut/substitution rule, then the definition of fj, gj, sj and tj are similar to those of f, g, s and t, the only difference being that Σ and Π need not be cut-free nor normal.
We give some examples for when the last rule applied in Σ/Π is a cut/substitu- tion rule:
Definition 3.3 Let Σ be a pseudo-derivation of a derivation Π in LJT. If gj is a translation from derivations in LJT to derivations in ND then the translation fj from pseudo-derivations of derivations in LJT to pseudo-derivations of derivations in ND is defined recursively as follows:
′	′
1	1	Σ2	r2
f′ ⎜  Γ; Q ▶ A	 r1 	Σ2	 r2 ⎟ = f′ ⎜ Γ; Q ▶ A	Γ; A ▶ B  C ⎟

⎝ Γ; P Λ Q ▶ A
Γ; A ▶ B
C
Γ; Q ▶ B	r1	⎠

Γ; P Λ Q ▶ B
⎛
H

⎞	g′(Π1)

Γ; P Λ Q ▶ B

f′ ⎝ Γ; ▶ A	Γ, A; C ▶ B
⎠ = 	 S, ⊙ ∈ {Λ, V, →, ⊥}

CM
Γ; C ▶ B
 Γ ▶ C  E⊙ f′(Σ2)

Definition 3.4 Let Π be a derivation in LJT. The transformation gj from deriva- tions in LJT to derivations in ND is defined recursively as follows:

  Π1	
′
	Σ2		⎞
▶ ⊙	⊙ ▶
g′(Π1)
I⊙

g ⎝ Γ; ▶ C
Γ; C ▶ B	=
CH
Γ; ▶ B

Γ ▶ C  E⊙, ⊙ ∈ {Λ, V, →, ⊥}
f′(Σ2)

2	⎛  Π1	r	2	⎞
g′ ⎜  Π1	 r1  Γ, A; C ▶ B  Q ⎟ = g′ ⎜ Γ; ▶ A	Γ, A; C ▶ B  C  ⎟

⎝ Γ; ▶ A
Γ, A; ▶ B
CM
Γ; ▶ B
Γ; C ▶ B
Γ; ▶ B	Q

Definition 3.5 Let Σ be a pseudo-derivation of a derivation Π in ND. If tj is a translation from derivations in ND to derivations in LJT then the translation sj from pseudo-derivations of derivations in ND to pseudo-derivations of derivation in LJT is defined recursively as follows:

j ⎛⎜
Π1
Γ ▶ A	Γ,A ▶ C	⎟
tj(Π1)
sj(ΣA)

s ⎜⎝
Γ ▶ C
S⎟⎠ =
Γ; ▶ A
Γ, A; C ▶ B
, where Γ ▶ B is the conclu-
CM

Σ3	Γ; C ▶ B
sion of the derivation to whom sj is applied. Remember that, from the definition of
pseudo-derivation, both Γ,A ▶ C and Γ ▶ C are major premises.
Definition 3.6 Let Π be a derivation in ND. The transformation tj from derivations in LJT to derivations in ND is defined recursively as follows:

Π =
  Π1	
 Γ ▶ C  I⊙

and tj(Π) =
tj(Π1) Γ; ▶ C
sj(Σ2)
▶ ⊙ 
Γ; C ▶ E

⊙ ▶ .

E⊙	CH
Σ2	Γ; ▶ E


tj
Π1	Π2
Γ ▶ A	Γ,A ▶ B
tj(Π1)	tj(Π2)
= Γ; ▶ A	Γ, A; ▶ B

E
Γ ▶ B
CM
Γ; ▶ B

From these definitions, we prove results by induction on the length of Σ/Π and on the rank of the cut-formulas of Σ/Π (if any). The rank of a rule r in a (pseudo-)derivation Σ/Π is the number of rules applied in Σ/Π above r up to the top-formula. We only show the proof for the cases shown in the definitions above.
Lemma 3.7 If gj is a translation from derivations in LJT to derivations in ND, then, if Σ is a pseudo-derivation of a derivation in LJT, then fj(Σ) is a pseudo- derivation of a derivation in ND.
Proof. Given the two items shown in definition 3.3, we have that:
the rank of the last occurrence of CH is smaller on the derivation on the right side of the equality sign. Hence, by induction hypothesis, it can be translated into a derivation in ND.
from the hypothesis, gj(Π1) is a derivation in ND and by the induction hypothe- sis, fj(Σ2) is a pseudo-derivation of a derivation in ND. Hence, the derivation on the right side of the equality sign is a derivation in ND.
2
Theorem 3.8 If Π is a derivation in LJT, then gj(Π) is a derivation in ND.
Proof. Given the two items shown in definition 3.4, we have that:
by induction hypothesis, gj(Π1) is a derivation in ND and by lemma 3.7, fj(Σ2) is a pseudo-derivation of a derivation in ND. Hence, the derivation on the right side of the equality sign is a derivation in ND.
the rank of the last occurrence of CM is smaller on the derivation on the right side of the equality sign. Hence, by induction hypothesis, it can be translated into a derivation in ND.
2
Lemma 3.9 If tj is a translation from derivations in ND to derivations in LJT, then, if Σ is a pseudo-derivation of a derivation in ND, then sj(Σ) is a pseudo- derivation of a derivation in LJT.
Proof. Given the example shown in definition 3.5, we have that, by hypothesis, tj(Π1) is a derivation in LJT and, by induction hypothesis, sj(ΣA) 8 is a pseudo- derivation of a derivation in LJT. Hence, the pseudo-derivation is a pseudo-deriva- tion of a derivation in LJT.	2
Theorem 3.10 If Π is a derivation in ND, then tj(Π) is a derivation in LJT.
Proof. Given the two items shown in definition 3.6, we have that:
8 ΣA is the result of adding the formula A in the premises of all sequents in Σ3.

By induction hypothesis, tj(Π1) is a derivation in LJT and by lemma 3.9, sj(Σ2) is a pseudo-derivation of a derivation in LJT. Hence, tj(Πj) is a derivation in LJT.
By induction hypothesis, both tj(Π1) and tj(Π2) are derivations in LJT. Hence, the derivations of item (ii) are derivations in LJT.
2
To define an isomorphism between ND and LJT, we use the following notion of equivalence:
Definition 3.11 We say that two (pseudo-)derivations Π and Πj are equivalent if Π and Πj reduce to a same normal/cut-free (pseudo-)derivation.
By induction on the size of derivations and using similar lemmas regarding pseudo-derivations, we can prove the following results:
Theorem 3.12 For every derivation Π in LJT, tj(gj(Π)) ≈ Π.
Theorem 3.13 For every derivation Π in ND, gj(tj(Π)) ≈ Π.
From these results we conclude that the translations gj and tj form an isomor- phism (modulo ≈) between LJT and ND.
Conclusion
We achieved a bijection between normal and cut-free derivations. In order to com- plete the proof-theoretical isomorphism between Natural Deduction and Sequent Calculus, the translations (f, g) and (s, t) were extended to translate any deriva- tion, and not just normal and cut-free ones. Finally, we showed that the extended translations are bijective.
As future work, we suggest the development of the bijection by showing transla- tion between the λ-calculus and a term notation for LJT (as, for example, Herbelin’s syntax in [5]).

References
Vincent Danos, Jean-Baptiste Joinet, and Harold Schellinx. Lkq and lkt: Sequent calculi for second order logic based upon dual linear decompositions of classical implication.
G. Gentzen. Investigations into logical deduction. In M. E. Szabo, editor, The collected papers of Gerhard Gentzen. North Holland, 1969.
J.Y. Girard, P. Taylor, and Y. Lafont. Proofs and Types. Cambridge Tracts in Theoretical Computer Science 7. Cambridge University Press, 1989.
Anders Starcke Henriksen. Using ljf as a framework for proof systems. Technical report, 2010.
Hugo Herbelin. A lambda-calculus structure isomorphic to gentzen-style sequent calculus structure. In Selected Papers from the 8th International Workshop on Computer Science Logic, CSL ’94, pages 61–75, London, UK, UK, 1995. Springer-Verlag.
Hugo Herbelin. S´equents qu’on calcule: de l’interpr´etation du calcul des s´equents comme calcul de
λ-termes et comme calcul de strat´egies gagnantes. Ph.D. thesis, University Paris 7, January 1995.

J-.B. Joinet. E´tude de la Normalisation du Calcul des S´equents Classique `a Travers la Logique Lin´eaire. PhD thesis, University of Paris VII, 1993.
Dale Miller and Alexis Saurin. From proofs to focused proofs: A modular proof of focalization in linear logic. In CSL, pages 405–419, 2007.
S. Negri, J. von Plato, and A. Ranta. Structural Proof Theory. Cambridge University Press, 2008.
Vivek Nigam and Dale Miller. A framework for proof systems. J. Autom. Reasoning, 45(2):157–188, 2010.
Garrel Pottinger. Normalization as a homomorphic image of cut-elimination. Annals of Mathematical Logic, 12:323–357, 1977.
D. Prawitz. Natural deduction: a proof-theoretical study. PhD thesis, 1965.
J. Zucker. The correspondence between cut-elimination and normalization I. 7(1):1–112, 1974.
