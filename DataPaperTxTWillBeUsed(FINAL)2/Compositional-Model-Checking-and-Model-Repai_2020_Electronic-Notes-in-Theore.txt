Available online at www.sciencedirect.com


Electronic Notes in Theoretical Computer Science 353 (2020) 129–148
www.elsevier.com/locate/entcs

Compositional Model Checking and Model Repair for a Class of Product Form Models
Amin Soltanieh1
Department of Computer Science Bundeswehr University Munich Munich, Germany
Markus Siegle2
Department of Computer Science Bundeswehr University Munich Munich, Germany

Abstract
In the area of Markovian quantitative modelling, compositional model specification techniques such as Stochastic Process Algebra are widely used. However, exploiting a model’s compositional structure for efficient analysis is still a difficult problem and mostly limited to special cases. This paper addresses some important issues in the area of compositional model checking of Markovian models for models with Boucherie-type product form. It closes a long-standing gap concerning the question whether compositional model checking of so-called global time-unbounded Until formulas is possible. The answer to this turns out to be negative. The paper then turns to the area of model repair, i.e. the question of how to fix a model in case it violates a given requirement. Here another general result and a useful proposition for compositional model repair are provided.
Keywords: Markov Chain, Product Form, Compositional Analysis, Probabilistic Model Checking, Continuous Stochastic Logic (CSL), Model Repair


Introduction
Markovian modelling and analysis is a versatile tool for quantitative system analy- sis, such as performance and dependability analysis, including probabilistic model checking. However, when applying Markovian techniques to large real-world case studies, users are often faced with the notorious problem of state space explosion, which can make practical application of the techniqes intractable. In order to over- come or at least alleviate these difficulties, various strategies have been developed,

1 Email: amin.soltanieh@unibw.de
2 Email: markus.siegle@unibw.de

https://doi.org/10.1016/j.entcs.2020.09.021
1571-0661/© 2020 The Author(s). Published by Elsevier B.V.
This is an open access article under the CC BY-NC-ND license (http://creativecommons.org/licenses/by-nc-nd/4.0/).

such as Kronecker-based approaches [4], aggregation/disaggregation [18,5], abstrac- tion [16], approximation [25], symbolic approaches [12], and, of course, combinations thereof. One particularly attractive approach is known as compositional analysis. Here the general idea is not to analyse the model as a whole, but to analyse parts (components) of the model individually and then in some way combine the partial results in order to obtain the desired overall result.
For special types of Markovian models, such as the well-known class of Product Form (PF) models, compositional computation of the system’s steady-state prob- abilities is possible. It suffices to compute the steady-state probabilities of all the components in isolation and then combine them by multiplication, possibly with the need to calculate a normalising constant (in case some states of the product space are unreachable). Such an exploitation of a model’s product form can lead to huge savings in runtime and memory used during analysis. For more complex types of analysis, such as probabilistic model checking, where the central problem is the computation of path-based probabilities, it is difficult to exploit a model’s product form. Some results exist in the literature, but so far the open problems prevail.
The first contribution of this paper is to prove an impossibility result about the compositional model checking of so-called global time-unbounded CSL Until formulas. (CSL refers to the widely used Continuous Stochastic Logic [1], and the Until operator and its derivatives such as Eventually and Generally are the most important operators of this logic.) It is shown that this impossibility result holds not only for general compositional Markov models, but also for models with product form.
From model checking we then slightly change perspective and move to the prob- lem of model repair, which is the problem of how to modify a model in case it violates a given requirement. We follow the idea of [22,23,10] to perform model repair by means of rate adaptation, and for this scenario we study the question whether model repair can be carried out in a compositional fashion. As our second contribution, we show with the help of a counterexample that in general this is not the case. However, as the third substantial contribution of the paper we show that for some important special type of Until operator, compositional model repair is indeed possible.
The further content of this paper is as follows: In Section 2, we introduce the Markovian modelling framework with a focus on product-form models, in particular models of Boucherie type. We also recapitulate the state-of-the-art of compositional model checking for such models and point out their current limitations (which are severe). In Section 3, we show that it is in general not possible to perform com- positional model checking for the CSL Until operator, if the subformulas refer to state properties of more than one component of the overall model, even for the time-unbounded case, and even for models of Boucherie product form. Section 4 is devoted to the problem of model repair by rate adaptation, which is closely related to model checking. Here we provide another impossibility result, but also state a proposition which allows compositional model repair for quite a general class of CSL global Until formulas. Section 5 concludes the paper with a short summary of its

main findings and a discussion of possible future work.

Modelling Framework and State-of-the-Art
This paper works with models which are Continuous-Time Markov Chains (CTMC), labelled with state and/or transition labels. A CTMC with state labels is referred to as a State-labelled Markov Chain (SMC). Each transition carries a transition rate, there are no immediate transitions, which means that our models are fully probabilistic. We consider a rather general compositional setting in which complex models are constructed from smaller components. The precise nature of composition may vary, depending on the concrete modelling formalism used. For instance, if we work with a Stochastic Process Algebra (SPA) such as PEPA [13] or CASPA [17], components are specified as sequential processes which cooperate through action synchronisation. If one works with Stochastic Petri Nets (SPN) [6,11] or Stochastic Activity Networks (SAN) [19], interaction of components may be realised by shared transitions and/or superposition of places. If one considers Boucherie’s framework for compositional Markov chains, which is of particular interest for this paper since its models are of product form (see Sec. 2.2), the interaction between components is realised indirectly via shared resources.

Product Form Models
At the outset, product form was discovered in queueing networks like Jackson’s theorem [15] which uses the product of equilibrium distributions of separate queues in order to calculate the joint distribution. Since then, there has been a lot of research towards product form solution for Stochastic Process Algebra(SPA) [20], stochastic Petri nets [7] and different types of Markovian models.
Boucherie [3] introduced a framework for the product process of a collection of Markov chains, to model the competition over resources by the exclusion of a part of the state space and blocking conditions. In this paper we mainly focus on the Boucherie framework regarding model checking and model repair (see section 2.2). There are some papers building on Boucherie’s framework: Hillston and Thomas
[14] characterised the class of competing Markov processes identified by Boucherie using Performance Evaluation Process Algebra (PEPA). Their models are slightly different from Boucherie’s, while not really extending the Boucherie framework, but thanks to PEPA, the results are easier to understand and the components of the system and resources are explicitly represented in the model. Sereno [20] also used PEPA to define the product form equilibrium distribution for a certain class of SPA models satisfying some conditions. In [20] the components can be synchronised over some actions, whereas in [14] components must be independent and mutually exclusive and also resources must be independent: (P1||P2 .. .) da (R1||R2 .. .), where
S
Pi is a component, Ri is a resource and S is the set of synchronising actions. Finding
an efficient way to calculate the normalizing constant is challenging in both [14] and [20].

Fourneau, Plateau and Stewart [9] assume a synchronisation-free system but with functional rates. So transitions of one component may depend on states of other components. Since the rates are functional, there is a set of transition matrices (instead of a single matrix) and using the kernel of these matrices and under certain conditions, it is proved that product form holds. By using functional rates, [9] generalises some previously published papers and it is proved that the Boucherie framework of competing Markov chains is one of them, where the rate function is an indicator function.
Later Fourneau [8] considered a discrete-time generalisation of Boucherie’s strong blocking model [3] based on the generalised tensor (or Kronecker) product, and obtained product form steady-state solutions for DTMCs described as a gen- eralised product of functional matrices. The paper [8] extends Boucherie’s theory and is one of the few papers about discrete-time networks of queues with product form steady-state solutions.
Thomas and Harrison [24] have used functional rates, system reversed model and minimal cycles in order to find a semi-product solution for the equilibrium state probabilities, while the functions satisfiy specific forms. It is semi-product form because product form holds when some necessary conditions are satisfied.

Boucherie’s framework
In [3], Boucherie introduced a framework for compositional Markov chains, named “competing Markov chains”, which we summarise in this section. The model con- sists of a collection of independent processes competing over some resources, and for this collection the product process is introduced. In each transition of the product process, only one of the underlying Markov chains changes its state. Another con- dition characterizing this framework is that resources are mutually exclusive and there is so-called strong blocking. This means that while one component is using a resource, other components who compete over this resource are completely blocked and cannot move at all. Therefore, the competition is modelled as an exclusion of a part of the product state space and removal of some transitions.
Assume that C is a compositional CTMC with state space S, consisting of K finite CTMCs, Ck, 1 ≤ k ≤ K, with state space Sk. Let Cki be the CTMCs which compete with component k over resource i, and Aki ⊆ Sk denote those states of Sk where component k uses resource i. The state space of the product process is a subset of the Cartesian product of the state space of all components i.e. S1×.. .×SK, excluding the states which violate the Boucherie condition of strong blocking:

K	K

S = Y Sk \ Y Y Y
Aki × Aji

k=1
k=1 i∈I j∈Cki


Combined states are thus vectors of compontents’ states s = (s1,..., sK). The transition rates of the product process, considering the strong blocking condition, are defined as:

q(s, sj)= Σ
k=1
⎛	j
⎝qk(sk, sk) ·
Y
r=1,r/=k
j	⎞
1(sr = sr ) · 1(∀i : (sr ∈ Ari → k ∈/ Cri))⎠

Here, qk(sk, sj ) is the local transition rate in the k’th component, 1(·) is the
indicator function and s, sj ∈ S and sk, sj ∈ Sk. The term 1(sr = sj ) expresses
that in each transition exactly one component changes its state, and the term 1(∀i : (sr ∈ Ari → k ∈/ Cri)) guarantees that if resource i is being used by component r then all other components competing over resource i with component r are blocked until component r stops using resource i. This is referred to as the strong blocking property of Boucherie product form models.
Under the above mentioned conditions of the Boucherie framework, it is proved that the steady state probability of a state s = (s1,..., sK) of the process C is of product form:
π(s)= B Y πk(sk),s ∈ S
k=1
where B is the normalizing constant and πk(sk) denotes the steady state probability of state sk in component k when that component is analysed in isolation.
Example 2.1 As an example, in Fig. 1, we consider K = 2 components, named C1 and C2, each having three states. The Greek letters denote the transition rates. In this example we extend the Boucherie framework by assigning atomic propositions to each state which are true in this state. The set of all atomic propositions is
AP =  K	APk, where APk is the set of atomic propositions used in component k.
In this example AP1 = {p, q, r}, AP2 = {s, t, u}, and thus AP = {p, q, r, s, t, u}. We will use atomic propositions for the purpose of model checking later in this paper.

Fig. 1: CTMCs C1 and C2 with one resource

There is only one resource in this system (not modelled explicitly) and its use is highlighted in Fig. 1 by the bold circles. So, if component C1 is in state 2, component C2 is blocked and if component C2 is in state 3, component C1 is blocked. Therefore A11 = {2} and A21 = {3}. Similarly, A10 = {1, 3} and A20 = {1, 2}, which define the states in S1 resp. S2 with no resource. C11 = {2} and C21 = {1} represent the set of components which are competing over the resource with the first resp. second component.
The flat model of this system is provided in Fig. 2. This is the result of the parallel composition of the two components C1 and C2 by considering the effect of Boucherie conditions. Remember that in the Boucherie framework, there is no synchronisation between components, they are just related with each other by the means of resources.
Fig. 2: Parallel composition of C1 and C2 and the effect of Boucherie’s strong blocking condition
According to equation 2.2, states in A11 ×A21 = {(2, 3)} must be excluded from the state space, so in Fig. 2, state (2, 3) and all the dashed transitions are removed and excluded due to the strong blocking condition. State (2, 3) is not reachable because the resource cannot be used by two components at the same time. Also, we see that in states (2, 1) and (2, 2), where the resource is occupied by component C1, the other component C2 is blocked, so the corresponding transitions, depicted by dashed arcs in the figure, are removed. Likewise, in states (1, 3) and (3, 3) the resource is occupied by component C2, so component C1 is blocked.
It can easily be shown that product form holds for this example. For instance, we obtain the steady state distribution of state (1, 1) of the flat model compositionally by
π(1, 1) = B · π1(1) · π2(1)
where π1(1) is the steady state probability for state 1 in component C1 and π2(1) is the steady state probability for state 1 in component C2. Considering each component in isolation we find that:
δγ	ϵμ + ϵν
π1(1) = αβ + αγ + δγ	,	π2(1) = ϵλ + ϵμ + ϵν + λν

The normalizing constant B is determined by the flat model and in this example:


B = [π (1) + π (3)] Σ3
1
π (i)+ π (2) Σ2

π (i)

Compositional Model Checking
Compositional approaches to model checking are very valuable, since they can help to deal with the problem of state space explosion. “Compositional” in this con- text means that the behaviour of a composed system relies on the behaviour of its components. Ideally, in a concurrent system composed of K components, one would like to model check a given overall requirement Φ by verifying some derived subrequirements Φk (k = 1,..., K), one for each component, and then combining their results in order to obtain the overall result. However, it is known that this ideal is very difficult to realise. Up to now, no generally applicable compositional model checking techniques for probabilistic systems have been found, all published approaches are only applicable to special cases.
In [2], Ballarini and Horvath present techniques for compositional model check- ing of Boucherie-type models against requirements specified by the popular logic CSL (Continuous Stochastic Logic [1]). They offer solutions for model checking the time-bounded and time-unbounded Next operator and the single component time-unbounded Until operator in a compositional fashion. In that context, “single component” means that both subformulas Φj and Φjj which are part of the Until formula Pr~b(ΦjU Φjj) (where ~ is a comparison operator and b is a probability bound) refer to state properties of only one single component of the model, which of course is a severe limitation. Conversely, a “global” formula would refer to state properties of more than one (possibly all) components.
For instance, consider the time-bounded global Next formula Pr~b(XI Φ), where I = [a, b] ⊆ R is a real time interval. It is shown in [2] that if the model is of Boucherie type and if Φ is of a special form, then compositional model checking of such a Next formula is possible. To be precise, Φ must be written in disjunctive normal form as Φ = i  j aij, where aij is an atomic proposition referring to some component k (i.e. aij ∈ APk for some k). Given a system of K components Ck,k ∈ {1,..., K} and a state s = (s1,..., sK) to be checked, a state-dependent formula ξk(s) is defined for every component:


ξk(s)= ,⎨tt
,,,

if Ei 6j aij ∈ APl,l /= k Λ sl ▶ aij aij	otherwise


The probability of this formula can then be composed as follows [2]:

I	Σ	k

  1  I

Pr(s, X
Φ) =

k∈/B(s)
p (s)P rk(sk,X pk (s)
ξk(s1,..., sK))

where B(s) is the set of components which are blocked in state s, pk(s) is the probability that in state s component k is the first component to make a transition, and the probabilities Prk(.) can be obtained from model checking the individual submodels (note the stretched time intervals which reflect the fact that component k was the winner of the race among components in state s).
The paper [2] also addresses the question of compositional model checking of time-unbounded global Until formulas, but this part remains very vague and does not lead to a solution. As we will show in the next section, there is a good reason for this, and it is exactly at this point where we come in with the present paper and make our contributions. It actually turns out to be impossible to perform compositional model checking of global Until formulas, even in a Boucherie product form setting.

Compositional model checking for Boucherie product form
In this section we focus on global time-unbounded CSL Until formulas for a Boucherie-type model and prove by counterexample that, in general, compositional model checking for this specific type of formula is not possible. We start with a state classification inspired by [22,23].
Definition 3.1 (Partitioning of SMC) When an SMC M and the CSL requirement P~b(ϕ), where ϕ is an time-unbounded Until formula and (~∈ {<, ≤, >, ≥}) are given, then for each state s ∈ M :
If Pr(s, ϕ) = 0 then state s is placed in class Impossible.
If 0 < Pr(s, ϕ) < 1 then state s is placed in class Gobothways.
If Pr(s, ϕ) = 1 then state s is placed into class Certain.
Theorem 3.2 Compositional model checking of global time-unbounded CSL Until formula is in general not possible, even for Boucherie product form models.
Proof. We prove theorem 3.2 by providing a counterexample. Take the example in Fig. 1 and consider the CSL global time-unbounded formula P≥b(s0, ϕ) where:
ϕ = (q ∨ (r Λ t)) U ((p Λ s) ∨ (r Λ u))
This is a global formula since it refers to state properties of more than one component, i.e. both components. Model checking a state s0 = (x, y) of the com- bined process means computing the probability Pr((x, y), ϕ) and comparing it to the probability bound b. This path probability can be computed on the combined model, which is shown in Fig. 2, by applying the standard CSL model checking algorithm for time-unbounded Until.
The resulting satisfaction probabilities are given in Table 1 and the partitioned state space is shown in Fig. 3. As we see in Fig. 3, from now on, we draw Gobothways state in blue colour, Impossible states in red and Certain states in green.


	


Fig. 3: Flat model with partitioned states
Table 1: Satisfaction probabilities for the combined pro- cess

However, since this is a product form model, one would wish to compute Pr((x, y), ϕ) compositionally, i.e. by checking some sub-property on state x of pro- cess C1, checking another sub-property on state y of process C2, and then combining the results. It is clear that such sub-properties would also have to be Until-type formulas, since any path satisfying ϕ could potentially make several steps both in the C1- and in the C2-dimension of the combined model. For this purpose, let us consider the “projections” of ϕ on C1 and C2:
ϕ1 = (q ∨ (rΛ?)) U ((pΛ?) ∨ (rΛ?))	(1)

ϕ2 = (? ∨ (? Λ t)) U ((? Λ s) ∨ (? Λ u))	(2)
where the “?” stand for any unknown state formula that cannot be decided locally. How could one possibly evaluate ϕ1 on process C1 in isolation? One would have to make assumptions on the truth values of the three “?”, corresponding to the atomic propositions t,s,u of process C2. There are 23 = 8 possible combinations of those truth values, all of which we should consider. But we can make our life a bit easier by having a look at process C2 (this is cheating a bit, since we actually want to analyse process C1 in isolation, but this cheating helps us to discard irrelevant cases). We see that in each state of C2 exactly one of t,s,u is true, so it is enough to consider the three combinations shown in Table 2, where s1 is the state of component C1:

Table 2: Satisfaction probabilities for ϕ1 on process C1

It is actually possible to derive the probability Pr((2, 1), ϕ) from this table, in the following way: In state (2, 1), atomic proposition s (from C2) is true, so we look at the second row of Table 2. There we find the result for state 2 of C1: It is  δ  , as we had already established in Table 1. The reason why this probability for the combined process can be obtained by only evaluating ϕ1 on process C1 is that from state (2, 1), all paths that satisfy formula ϕ (there is actually only a single such path) move only along the C1-dimension of the global state space.
Since this partial result could strengthen our hope that compositional model checking is indeed possible, let’s try to find the similar argument for state (2, 2). In state (2, 2) atomic proposition t of process C2 is satisfied, so we have to look at the first row of Table 2. For state 2 we find the probability 0. That means that from state (2, 2) there is no path satisfying ϕ that moves only along the C1-dimension of the combined model. So if there is any satisfying path originating in (2, 2), such a path would have to include also moves along the C1-dimension. Maybe we can combine the result we just found with a complementary result for process C2 in order to obtain the satisfaction probability for (2, 2)?
Therefore, let us now focus our attention on process C2 and try to evaluate ϕ2 in isolation. Again, we have to make assumptions about the four “?”, corresponding to atomic propositions p,q,r of process C1. Again, using the extra bit information that in process C1 those atomic propositions are mutually exclusive, it is enough to consider three combinations as shown in Table 3 where s2 is the state of C2:

Table 3: Satisfaction probabilities for ϕ2 on process C2
We are interested in state (2, 2). Here the state of C1 is 2 where q holds, so we look at the second row of Table 3. For state 2 we read the result 0. Now obviously, there is no way we can combine the two partial results we obtained (0 and 0) in order to obtain the true satisfaction probability of (2, 2) which is: 	νβ	 ! The reason is that all paths originating in (2, 2) and satisfying ϕ, consist of moves along both the C1- and C2-dimensions. There are actually infinitely many such paths (since the loop (2, 2) « (3, 2) may be taken infinitely often) and the partial results from Tables 2 and 3 are not able to capture this behaviour. If we are interested in state (3, 2) of the composed model, we would find similar reasons why Pr((3, 2), ϕ) cannot be composed from two results gained on process C1 and C2 in isolation.
For this model it is thus not possible to compute the probability ϕ from proba- bilities of sub-properties evaluated on the constituent processes C1 and C2. This is a counterexample from which we can conclude that compositional model checking

of time-unbounded Until formula is in general not possible for composed models, even if they are of Boucherie product form.	2

Compositional model repair for product form
The model checking problem consists in verifying whether a model M satisfies a given user requirement φ, i.e. whether s |= φ for some state s ∈ S of the model M (or possibly for all states of M ). If the requirement is violated by the model, one can attempt to modify the model, with the goal that the modified model Mj should indeed satisfy the given requirement. This process is referred to as “model repair”. Tati et al. [22,23] introduced a model repair solution using rate reduction. In this method, controllable states are defined as those states where the modification of some well-defined subset of transition rates will improve the behaviour of the SMC without contradicting to the goal of the model repair problem. In their work, the states of M are partitioned according to Definition 3.1 into the three classes Certain, Impossible and Gobothways, and model repair is performed by reducing some specific transition rates of the model. They showed that as a result of this, all states of class Gobothways will eventually satisfy the requirement.
The algorithms presented in Tati’s work all work at the level of the flat, low- level Markov chain, which has the advantage that the approach can be used for many different types of models. On the negative side, this means that even if the model has been specified in a compositional way, that structural information is not used at all during model repair. Even worse, once suitable rate modification factors have been found during model repair, it is difficult or even impossible to lift those factors from the flat Markov chain to the compositional high-level model. This is clearly a disadvantage, since users wish to know how they should modify their model specification, in order to get the requirements satisfied. We show this limitation using a simple example, and in the following subsection, we will address the problem whether and under which circumstances truly compositional model repair is possible.
Example 4.1 In Fig. 4, inspired by a simpler example in [21], on the left there are two SMCs A and B which are composed, synchronising over actions a and d. Note that this is not a Boucherie model, but a model as it would typically be specified with an SPA. The resultant flat model is drawn in Fig. 4 on the right, where the three diagonal transitions represent the synchronisations. Assume that the property that needs to be verified is Φ = Prob≥b(((t Λ чp) ∨ (r Λ s)) U p). It is clear that state (2, 1) is of type Impossible, states (2, 2), (3, 1) and (3, 2) are Gobothways and states (1, 1) and (1, 2) are Certain, as colour-coded in the figure. If property Φ is violated for state (2, 2), the flat model can be repaired using Tati’s model repair algorithm. In this example, the heuristics from [23] suggests to reduce the rate of transition (2, 2) → (2, 1) by some reduction factor, which makes the desired transition (2, 2) → (1, 2) more likely. But now the problem is that this transition stems from model component B under action e. By changing the rate of action e in component B, apart from transition (2, 2) → (2, 1), transition rates (1, 2) → (1, 1)


   
Fig. 4: Processes A and B and the resultant flat model
and (3, 2) → (3, 1) will change as well. While reducing the rate (1, 2) → (1, 1) is only an unnecessary side-effect, reducing (3, 2) → (3, 1) is a very negative side-effect, since this will make the undesired transition from (3, 2) to (2, 1) more likely, thereby lowering the satisfaction probability of state (3, 2). Therefore, this example shows that the model repair solution obtained for the flat model cannot, in general, be lifted to the compositional high-level model.
Impossibility of compositional model repair even for product form
Having seen that even for a simple compositional model, compositional model check- ing and compositional model repair are not possible, we now address the interesting question whether models of Boucherie product form can be repaired in a composi- tional fashion. Unfortunately it turns out that this is not the case.
Theorem 4.2 Compositional model repair (by transition rate modiﬁcation) for global time-unbounded CSL Until formulas is in general not possible, even for Boucherie product form models.
Proof. We prove Theorem 4.2 by counterexample. We consider the same Boucherie-type model as in Fig. 1, now with the following requirement:
φ = P≥b(ϕ)= P≥b(q U ((p Λ s) ∨ (r Λ t)))
Fig. 5 shows the state space where the colours now indicate the partitioning for this path formula ϕ. Model checking this requirement on the composed model yields the results in Table 4.


	


Fig. 5: Flat model with partitioned state space
Table 4: Satisfaction probabilities for the combined process

The only interesting states are (2, 1) and (2, 2), since the other states trivially

satisfy or violate the requirement. Suppose that both  δ 
 β  β+δ
are less than

the requested probability bound b, i.e. those two states violate the requirement.
We therefore wish to repair the model by adjusting its rates. So we could increase the probability Pr((2, 1), ϕ)=  δ  , by either increasing δ or decreasing β (or both at the same time). On the other hand, in order to repair state (2, 2) and increase the probability Pr((2, 2), ϕ) =  β  , we would have to decrease δ or increase β, which means that the repair strategies for these two states are exactly against each other! Looking at the flat model, we could solve this dilemma by distinguishing between the two δ-transitions (and between the two β-transitions), and adapt those rates individually. However, in the composed model, both δ-transitions (and both β-transitions) stem from the same transition in process C1, so we can only adjust them together in the same direction. So we see that compositional repair is not possible for this example.	2
Model Repair For Boucherie Framework
In the previous section, we have shown that, in general, compositional model repair is not possible, even for models of Boucherie product form. In this section, we provide a positive result, that under some conditions, compositional model repair of Boucherie-type models for specific CSL property types is possible.
Proposition 4.3 (a) Given a Boucherie-type product form model with compo- nents C1,..., CK (and some passive resources which are redundant within the state vector) whose combined reachable state space is denoted as S. Consider an time-unbounded CSL Until requirement of the form
Φ= P≥b(ϕ)= P≥b((p1 Λ· · · Λ pK) U (q1 Λ	Λ qK))
where pk and qk are state formulas which refer only to component Ck, such that the following conditions hold:
6k ∈ {1,.	, K} : qk → pk
For every reachable state s = (s1,..., sK) ∈ S it is required that if sk |= qk
then Ck in state sk does not possess a shared resource.

For Ck, let the path formula ϕk be deﬁned as ϕk = pk U qk. Each Ck, with respect to ϕk, should have states of type Gobothways (unless qk = tt).
We deﬁne the following three types of repair measures (relating to ϕk):
Incrk(m, n): in Ck, increase the rate from Gobothways-state m to Certain- state n by a factor of ik(m, n) ≥ 1.
Decrk(m, n):  in Ck, decrease the rate from Gobothways-state m to
Impossible-state n by a factor of 0 < dk(m, n) ≤ 1.
Holdk(m): in Ck, for m ∈ Sk such that m |= qk, decrease the rate from m
to any other state in Sk by a factor of 0 < hk(m) ≤ 1.
Let V = {s ∈ S | 0 < Pr(s, ϕ) < b}, i.e. the subset of states which non- trivially violate Φ. Then one can perform compositional model repair for the states of V (i.e. one can increase the probabilities by which these states satisfy the Until formula ϕ to the desired probability bound b) by a combination of the repair measures Incrk(m, n), Decrk(m, n) and Holdk(m) (k = 1,...,K and m, n ∈ Sk) with appropriately chosen factors ik(m, n), dk(m, n) and hk(m).
(b) For a Boucherie product form model that violates the non-blocking condition
(ii) or a model that is not of product form, compositional model repair as in
(a) is in general not possible.
Note 1 The cases pk = tt and qk = tt are covered by the Proposition 4.3. In particular, if qk = tt, component Ck remains unchanged during model repair. Fur- thermore, the often used Eventually-operator (tt U . . . ) is covered by setting all pk to tt, which shows that the conditions imposed by the Proposition are not too restrictive for practical application.
Note 2 The Proposition (part (a)) provides an existence result, but it does not specify which combination of repair factors’ values will be successful.
Note 3 If the requirement at hand is of the form P≤b(ϕ), then during model repair one may wish to decrease the satisfaction probabilities (instead of increasing them). For this case, one can formulate a dual statement.
Proof. Part (a): In a Boucherie-type PF model, a component is either free to move as if it was fully independent, or it is completely blocked (i.e. cannot move at all). So the embedded Markov chain of component Ck (the probabilistic decision to which state the component should move next) remains the same, whether the component is in isolation or in the context of the other components and resources. For a state s ∈ V , since Pr(s, ϕ) > 0, there exist satisfying paths, but their combined probability mass is too low. The rate adjustments as suggested in the Proposition do not alter the set of satisfying paths (i.e. no new satisfying path is added and no satisfying path is removed), but they increase the probability mass of the set of satisfying paths. In particular, when adjusting the rates in the components by applying Incrk(m, n) and/or Decrk(m, n), the likelihood of Ck moving via pk- states towards qk-states is increased, which means that for the composed model the probability of the combination of those paths, which is simply an interleaving of the components’ paths, is increased. (One can prove this last statement formally by an inductive argument, assuming that several repair measures of type Incr and / or

Decr are applied one after the other, and showing that each one of them increases the probability mass of the desired set of paths.)
The Holdk(m) repair measure has the effect that a component Ck, once it has reachad a qk-state (where because of condition (i) pk also still holds), will stay in this state longer. Thereby the probability is increased that, while Ck remains in this qk-state, the other components Cj /= Ck will reach their qj-states before component Ck moves on.
Condition (i), i.e. the fact that qk → pk, means that it is not possible for a component Ck to move to one of its qk-states too early (and thereby not satisfying the (p1 Λ· · · Λ pK)-condition any more), since even if the other components j /= k have not yet reached their qj-states, pk is still satisfied in any qk-state.
Condition (ii) is important, since it guarantees that if Ck is in state sk that satisfies qk then none of the other processes is blocked by Ck, i.e. the other processes j /= k can still move along the j-dimension of the state space towards their qj-states.
A further important point in the proof of the Proposition concerns the special form of the path formula, which is
ϕ = ((p1 Λ· · · Λ pK) U (q1 Λ· · · Λ qK))
Let us, without loss of generality, assume that all states of Ck which satisfy pk have adjacent indices and all states which satisfy qk also have adjacent indices (this can always be achieved by a suitable state reordering). Then the special form of ϕ implies that the set of states P = {s ∈ S | s |= p1 Λ · · · Λ pK} will form a K- dimensional rectangle in S (possibly with some holes, in case there are unreachable states due to resource conflicts). Likewise, the set of states Q = {s ∈ S | s |= q1 Λ ··· Λ qK} is also a K-dimensional rectangle, which is completely contained in the first rectangle due to condition (i). An instance of this situation is depicted in Fig. 6 for the two-dimensional case. In the figure, only two possible repair measures as suggested by the Proposition are indicated. Model repair by the three repair measures specified in the Proposition then means that the probability for moving from the the set P \ Q to Q, without visiting any other states in between, can be made sufficiently high.










Fig. 6: The (q1 Λ q2)-rectangle is a subset of the (p1 Λ p2)-rectangle

Part (b): Example 4.1 is a non-Boucherie model where we saw that compositional model repair is not possible, which is a counterexample that proves the second statement of part (b). The first statement of part (b) (concerning the non-blocking condition (ii)) can also be shown by counterexample, but we do not provide such an example in this paper.	2
Example 4.4 a) Now we provide an example of how to use Proposition 4.3 for compositional model repair. In Fig. 7, C1 and C2 are two CTMCs forming a Boucherie product form model. Their states are labelled by atomic propositions from the set AP = {p1, p2, q1, q2}. All transition rates are assumed to have the value 1. There is one resource in this system and its use is highlighted in Fig. 7 by the bold circles (state 5 in C1 and state 3 in C2). The CSL property which









Fig. 7: Components C1 and C2
needs to be checked is:
P≥b(ϕ)= P≥b((p1 Λ p2) U (q1 Λ q2))
Thus, ϕ is a global time-unbounded Until formula of the type as in Proposi- tion 4.3. Assume that the state of interest is s0 = (1, 1) and that the probabil- ity Pr((1, 1), ϕ) is less than the desired probability bound b, so model repair is needed.
The flat model of this system is shown in Fig. 8. Condition (i) of Propo- sition 4.3 indicates that if there is a state which satisfies qk, it must satisfy pk as well and it is clear that this condition is satisfied in this example. In Fig. 8, the small rectangle which is the set of all (q1 Λ q2)-states is a subset of the big rectangle which is the set of all (p1 Λ p2)-states. This issue is a direct consequence of condition (i) in Proposition 4.3. We can extract ϕ1 and ϕ2 out of ϕ:
ϕ1 = p1 U q1;	ϕ2 = p2 U q2
According to ϕ1 and considering C1 in isolation (Fig. 9), states 1 and 4 are Gobothways states, state 5 is Impossible and states 2 and 3 are Certain. Simi- larly, considering ϕ2 and C2 in isolation, we see that in C2, state 3 is Impossible, state 2 is Certain and state 1 is Gobothways. Based on Proposition 4.3, we can obtain repair measures in order to use them in model repair. Table 5 shows the three types of repair measures in C1 and C2 as suggested in the Proposition,



Fig. 8: Flat combined model of C1 and C2
and Fig. 9 shows the partitioned states in C1 and C2 with only important rates for model repair.




Fig. 9: Partitioned state sets in C1 and
C2
Table 5:	Repair mea- sures in Example 4.4

According to Proposition 4.3, there always exists a solution for model repair using a combination of the repair measures specified in Table 5. By applying a combination of Incri, Decri and Holdi, we can increase the probability Pr((1, 1), ϕ) to any desired level. In this example, it is not possible to increase the probability more than a specific limit by using only a single one of the repair measures. For instance, by forming and solving a set of equations, we can show that by increasing only rate b1 and holding all other rates equal to one, it is only possible to reach Pr((1, 1), ϕ)= 0.75:
b1(3b2 + 28b1 + 66)

Pr((1, 1), ϕ)= 
1
4b3 + 44b2 + 146b1 + 126

1	1
However, in order to achieve a higher satisfaction probability, we can use com- binations of repair measures.  One possible solution is to increase rates a1

and b1 simultaneously. Fig. 10 shows the satisfaction probability depending on transition rates a1 and b1 (all other rates are fixed at the value 1). The black plane marks the original satisfaction probability (when also both a1 and b1 are equal 1), which is 97/320. We have also verified that the satisfaction probability can be increased even further than shown in the plot, i.e. any given probability bound b < 1 can be topped.

Fig. 10: Satisfaction probability Pr((1, 1), (p1 Λ p2) U (q1 Λ q2)) depending on tran- sition rates a1 and b1

Note 4 Proposition 4.3 states that we can always ﬁnd a successful combination of the speciﬁed three types of repair measures. However, this does not exclude the existence of other rate adaptations which also might have a positive effect on the satisfaction probabilities. For instance, in Example 4.4 it is possible to increase the probability of ϕ by decreasing transition rate a2 in C1 (which is a transition within the set of p1-states).

Conclusion
In this paper, we have studied compositional model checking and model repair for CSL global time-unbounded Until formulas for Boucherie product form models, where we consider model repair by rate adaptation. Using counterexamples, it is proved that, in general, compositional model checking and model repair is not possible for such CSL formulas, even for product form models. We have also proved a proposition which – in the Boucherie framework – makes compositional model repair possible for a specific, but still quite general type of CSL Until formula. Although not every time-unbounded Until formula can be written in this form, it is very useful since such formulas often appear in practice. In particular, the widely used Eventually operator is an instance of the case covered by the proposition.
As future work, we intend to generalise Proposition 4.3, since we think that condition (ii) could be omitted if the Holdk(m) repair measure was refined to Holdk(m, n) (which means that the reduction factor could be different, depending on the target state of the particular transition to be reduced). This generalisation,

however, would make the proof more difficult. Furthermore, since the proposition provides only an existential result, we intend to develop from it a constructive al- gorithm which identifies successful combinations of repair measures and determines concrete rate adaptation factors.

References
C. Baier, B. Haverkort, H. Hermanns, and J. Katoen. Model-checking algorithms for continuous-time Markov chains. IEEE Transactions on Software Engineering, 29(6):524–541, June 2003.
P. Ballarini and A. Horvath. Compositional Model Checking of product-form CTMCs. Electronic Notes in Theoretical Computer Science, 250(1):21 – 37, 2009. Proceedings of the Seventh International Workshop on Automated Verification of Critical Systems (AVoCS 2007).
R. J. Boucherie. A characterization of independence for competing Markov chains with applications to stochastic Petri nets. IEEE Transactions on Software Engineering, 20(7):536–544, July 1994.
P. Buchholz. Structured analysis approaches for large Markov chains. Applied Numerical Mathematics, 31(4):375 – 404, 1999.
P. Buchholz and J. Kriege. Approximate aggregation of Markovian models using alternating least squares. Perform. Eval., 73:73–90, 2014.
S. Donatelli and G. Franceschinis. The PSR methodology: Integrating hardware and software models. In Application and Theory of Petri Nets 1996, pages 133–152. Springer Berlin Heidelberg, 1996.
S. Donatelli and M. Sereno. On the product form solution for Stochastic Petri Nets. In K. Jensen, editor, Application and Theory of Petri Nets 1992, pages 154–172, Berlin, Heidelberg, 1992. Springer Berlin Heidelberg.
J. Fourneau. Collaboration of discrete-time Markov chains: Tensor and product form. Performance Evaluation, 67:779796, 09 2010.
J. Fourneau, B. Plateau, and W. Stewart. An algebraic condition for product form in stochastic automata networks without synchronizations. Perform. Eval., 65:854–868, 11 2008.
A. Gouberman, M. Siegle, and B. Tati. Markov chains with perturbed rates to absorption: Theory and application to model repair. Performance Evaluation, 130:32 – 50, 2019.
H. Hermanns, U. Herzog, V. Mertsiotakis, and M. Rettelbach. Exploiting stochastic process algebra achievements for generalized stochastic Petri nets. Proceedings of the Seventh International Workshop on Petri Nets and Performance Models, pages 183–192, 1997.
H. Hermanns, M. Kwiatkowska, G. Norman, D. Parker, and M. Siegle. On the use of MTBDDs for performability analysis and verification of stochastic systems. The Journal of Logic and Algebraic Programming, 56(1):23 – 67, 2003. Probabilistic Techniques for the Design and Analysis of Systems.
J. Hillston. A Compositional Approach to Performance Modelling. Cambridge University Press, New York, NY, USA, 1996.
J. Hillston and N. Thomas. Product Form Solution for a Class of PEPA Models. Perform. Eval., 35(3-4):171–192, May 1999.
J. R. Jackson. Jobshop-Like Queueing Systems. Manage. Sci., 50(12 Supplement):1796–1802, December 2004.
J.-P. Katoen, D. Klink, and M. R. Neuh¨außer. Compositional Abstraction for Stochastic Systems. In Ouaknine J. and F. Vaandrager, editors, Formal Modeling and Analysis of Timed Systems, pages 195–211. Springer Berlin Heidelberg, 2009.
M. Kuntz, M. Siegle, and E. Werner. Symbolic Performance and Dependability Evaluation with the Tool CASPA. In M. Nunez, Z. Maamar, and F.L. Pelayo, editors, Applying Formal Methods: Testing, Performance and M/E Commerce: FORTE 2004 Workshops, European Performance Engineering Workshop, pages 293–307. Springer, LNCS 3236, 2004.
D. Milios and S. Gilmore. Compositional Approximate Markov Chain Aggregation for PEPA Models. In M. Tribastone and S. Gilmore, editors, Computer Performance Engineering, pages 96–110, Berlin, Heidelberg, 2013. Springer Berlin Heidelberg.


W. H. Sanders and J. F. Meyer. Stochastic Activity Networks: Formal Definitions and Concepts. In E. Brinksma, H. Hermanns, and J. Katoen, editors, Lectures on Formal Methods and PerformanceAnalysis: First EEF/Euro Summer School on Trends in Computer Science, Revised Lectures, pages 315–343. Springer Berlin Heidelberg, 2001.
M. Sereno. Towards a Product Form Solution for Stochastic Process Algebras. The Computer Journal, 38(7):622–632, 01 1995.
B. Tati. Quantitative Model Repair of Stochastic Systems. PhD thesis, Bundeswehr University Munich, Department of Computer Science, 2018.
B. Tati and M. Siegle. Parameter and Controller Synthesis for Markov Chains with Actions and State Labels. In E´. Andr´e and G. Frehse, editors, 2nd International Workshop on Synthesis of Complex Parameters (SynCoP’15), volume 44 of OpenAccess Series in Informatics (OASIcs), pages 63–76, Dagstuhl, Germany, 2015.
B. Tati and M. Siegle. Rate Reduction for State-labelled Markov Chains with Upper Time-bounded CSL Requirements. In Proceedings Cassting Workshop on Games for the Synthesis of Complex Systems and 3rd International Workshop on Synthesis of Complex Parameters, Cassting/SynCoP 2016, Eindhoven, The Netherlands, April 2-3, 2016., pages 77–89, 2016.
N. Thomas and P. G. Harrison. Semi-Product-Form Solution for PEPA Models with Functional Rates. In A. Dudin and K. De Turck, editors, Analytical and Stochastic Modeling Techniques and Applications, pages 416–430, Berlin, Heidelberg, 2013. Springer Berlin Heidelberg.
M. Wan, G. Ciardo, and A. S. Miner. Approximate Steady-state Analysis of Large Markov Models Based on the Structure of their Decision Diagram Encoding. Perform. Eval., 68(5):463–486, May 2011.
