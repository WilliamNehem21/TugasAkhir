Electronic Notes in Theoretical Computer Science 180 (2007) 3–14	
www.elsevier.com/locate/entcs

Semantics of Biological Regulatory Networks
Gilles Bernotb Franck Casseza Jean-Paul Cometb Franck Delaplaceb C´eline Mu¨llerb Olivier Rouxa
a IRCCyN, UMR CNRS 6597,
BP 92101 1 rue de la No¨e, 44321 Nantes Cedex 3, France
b LaMI-genopole, UMR CNRS 8042, UEVE, 523 Place des Terrasses, 91025 Evry Cedex, France

Abstract
The aim of the paper is to revisit the model of Biological Regulatory Networks (BRN) which was proposed by Ren´e Thomas to model the interactions between a set of genes. We give a formal semantics for BRN in terms of transition systems which formalizes the evolution rules given by Ren´e Thomas. Then we show how to use this model to find interesting properties of a BRN like the set of stable states, cycles etc using tools for analyzing transition systems.
Keywords: Biological regulatory network, BRN, biological system

Introduction
Modeling of Biological Systems.
The arrival of massive amount of expression data puts the emphasis on com- putational methods to overcome the difficulties of interpretation of experimental data. Instead of providing a clear explanation of biological systems, data reveals the difficulty for analyzing them. The variety of components and their interacting capabilities lead to cope with their complexity. This opens a field of modeling to investigate computational biological systems.
Computational systems biology [10] tries to establish methods and tech- niques that enable us to understand the structure of the system, such as gene/metabolic/signal transduction networks. The modeling of the dynamics of such systems is a first step towards the control, the design and the modification of the systems in order to ensure some desired properties[4].

Formal Methods.
Formal methods have been used for a decade or more in the area of verification of safety critical systems. The techniques and tools that have emerged from this

1571-0661 © 2007 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2004.01.038

field to analyze the behaviors of such systems, makes it possible to model and verify complex concurrent systems (huge number of states) even with continuous information (dense time) or parameters. It is then natural to try and use such techniques to model and analyze biological systems especially when one wants to find properties about their behaviors.

Biological Regulatory Networks.
Biological Regulatory Networks (in the sequel BRN) modelize interactions be- tween biological entities (RNA or Proteins). Their regulations involve a lot of com- plex processes, but it is common to simplify the complexity of the regulations by taking into account only two actions: activation and inhibition. BRNs are statically represented by graphs: vertices abstract genes and edges represent their interactions (activation or inhibition). Moreover at a given time, a numerical value is associated to each vertex to describe the concentration level of the corresponding entity.
The Ren´e Thomas’ boolean approach has been justified as a discretization of the continuous differential equation system[5], it has been confronted to the more classi- cal analysis in terms of differential equations[3]. Then Thomas and Snoussi showed that all steady states can be found via the discrete approach[6]. More recently Thomas and Kaufman have shown that the discrete description provides a qualita- tive fit of the differential equations with a small number of possible combinations of values for the parameters[9].
Works of Ren´e Thomas and co-workers provide the basis to develop a formal computational framework for gene regulation and its analysis [1].

Our Contribution.
In this paper we propose a semantics for an extended gene regulatory model of
R. Thomas’ theory. In our extended model a gene can be activator at a certain level and inhibitor at another. This is to our knowledge the first time a formal semantics is proposed for BRN. This enables us to derive automatically a behavioral model of a BRN and use existing tools for analyzing finite state models (e.g. model-checking tools).

Outline of the Paper.
The paper is organized as follows: section 2 gives the basics of BRN. The core of the paper is in section 3 where we give a formal semantics for BRN. In section 4 we show on a small example how to use the tool HyTech [2] to analyze a BRN.

Biological Regulatory Networks
Notations
Given a finite set E, |E| denotes the cardinality of E. We denote 2E the set of subsets of E. If φ is a formula of propositional logic over a set X, [[φ ] denotes the set of values of the variables satisfying φ. By convention, if U = ∅, φ(x) are propositional formulas, x∈U φ(x)= true.

Biological examples often rely on intervals: an integer interval [a, b] stands for the set of values {x ∈ N,a ≤ x ≤ b}, and we denote [] the empty interval.
The original model of Biological Regulatory Networks [3] makes the assumption that the actual concentration of the products of the genes can be approximated by integer levels: the continuous concentration function is approximated by a piecewise constant function. Those constant levels give the expression levels of the genes. In our formal description of a Biological Regulatory Network, a set V of “variables” stands for the genes of the network. An oriented edge from a variable x to y indicates that x is a regulator (activator, inhibitor) of y.
Definition 2.1 [Biological Regulatory Networks.]  A Biological Regulatory Network (BRN) is a 3-uple R = (V, E, π) where:
V is a finite set of vertices,
E ⊆ V × V is a finite set of edges,
π = (π+, π−) with π : E '→ 2N × 2N are respectively the activation and inhibition
functions associated to an edge e ∈ E. Moreover, we assume: ∀e ∈ E,
π+(e) ∪ π−(e) /= []: an edge corresponds to a regulation.
π+(e) ∩ π−(e) = []: for a given level, a gene cannot be both activator and inhibitor.
Remark 2.2 For v ∈ V we will use v as well to denote the expression level of the gene v. π+(x, y) (resp. π−(x, y)) gives the interval inside which x activates (resp. inhibits) y. Note that π+(x, y)= [] (resp. π−(x, y) = []), means that x never activates (resp. inhibits) y. Note also that Def. 2.1 rules out edges (x, y) for which π+(x, y)= π−(x, y) = [] which would have no observable effect in the network.


 

([1,1], [2,2])



x
x	y


 

z

 



Exemple 1
Exemple 2


Fig. 1. Examples of BRNs

Example 2.3 Figure 1 gives two examples of BRN. In the first example, V  =
{x, y, z} and π(x, y) = ([1, 1], []): x activates y when x has the level 1; π(y, x) = 

([], [1, 1]): y inhibits x when y has the level 1; π(z, y) = ([1, 1], []): z activates y
when z has the level 1. The meaning of the second example is defined accordingly.
Definition 2.4 [Activators and Inhibitors.] Let R = (V, E, π) be a Biological Regulatory Network, we define the following sets:
∀x ∈ V, R+(x)= {y ∈ V, π+(y, x) /= []} is the set of activators of x,
∀x ∈ V, R−(x)= {y ∈ V, π−(y, x) /= []} is the set of inhibitors of x.
Example 2.5 For example 1 of Figure 1, R+(x)= ∅, R−(x)= {y}, R+(y)= {z, x}, R−(y)= ∅ and R+(z)= ∅, R−(z)= ∅. In example 2 R+(x)= ∅, R−(x)= {y} and R+(y)= {x}, R−(y)= {x}.

Formal Semantics of Biological Regulatory Networks
In Ren´e Thomas’ theory, the evolution of the expression levels of the genes is de- scribed by an original notion of “attractor”. Informally, it represents an upper or a lower bound which is attained if no change occurs in the rest of the BRN. Hence, the computation of the evolution of concentrations is based on the attractors. They are defined by a set of parameters. The evolution of the BRN highly depends on the choice of those parameters.
In this section, we formalize the evolution of the states of a BRN by a transition system. This semantics also involves some evolution parameters as defined in [3].

State Space of a BRN
Definition 3.1 [State Space of a BRN.] Let R = (V, E, π) be a BRN. The state space Sx of a variable x ∈ V is defined by Sx = [0, maxy∈V π+(x, y) ∪ π−(x, y)]. The state space of R is defined by S(R) = ×x∈V Sx. A state of the network R is a mapping ν : V → N such that ∀x ∈ V, ν(x) ∈ Sx.
The previous definition of the set Sx requires that 0 belong to the state space.
Example 3.2 For the example 2 of Figure 1, Sx = [0, 2], Sy = [0, 1].

Parameters of a BRN
As already mentioned in the beginning of this section, the behavior of a BRN depends on some parameters. Those parameters play the role of attractors and give the expression levels towards which a gene is attracted, depending on which genes activate or inhibit it.
Definition 3.3 [Parameters of a BRN.] Let R = (V, E, π) be a BRN. The set
Para(R) of parameters of R is defined by
Para(R)= {Kx,A,B|A ⊆ R+(x),B ⊆ R−(x)}

A valuation of the parameters Para(R) is a mapping κ : Para(R) → N such that
∀x ∈ V, A ⊆ R+(x),B ⊆ R−(x), κ(Kx,A,B) ∈ Sx. In the sequel we use Kx,U,V
instead of κ(Kx,U,V ) when the meaning is clear from the context.
Definition 3.4 [Activity Assumption.] Let R = (V, E, π) be a BRN and κ a valuation for Para(R). κ satisfies the activity assumption iff ∀x ∈ V :
∀y ∈ R+(x), ∃X+ ⊆ R+(x), ∃X− ⊆ R−(x), κ(Kx,X+ ∪{y},X− ) > κ(Kx,X+ ,X− )
∀y ∈ R−(x), ∃X+ ⊆ R+(x), ∃X− ⊆ R−(x), κ(Kx,X+ ,X−∪{y}) < κ(Kx,X+ ,X− )
Definition 3.5 [Monotonicity Assumption.] Let R = (V, E, π) be a BRN and
κ be a valuation for Para(R). κ satisfies the monotonicity assumption iff: ∀X+ ⊆

R+(x), ∀X− ⊆ R−(x), ∀X' ⊆ R+(x), ∀X' ⊆ R−(x), X+ ⊆ X' ,X'
⊆ X− ⇒

+	−	+	−
κ(Kx,X+ ,X− ) ≤ κ(Kx,X' ,X' ).
+  −
The activity assumption stands for the observability of the action of a gene on another. Without this assumption it is possible that any combination of activators of a gene does not have any observable effect on the target gene because its level of expression would remain the same. It seems then quite obvious that any valuation of the parameters should satisfy this property. The monotonicity property is is a biological experimental fact, already pointed out by Ren´e Thomas. Anyway our framework does not rely on these assumptions motivated by biology.
Example 3.6 In the example 2 of Figure 1, a possible valuation of the parameters is: Kx,∅,∅ = 0, Kx,∅,y = 1 and Ky,∅,∅ = 0, Ky,x,∅ = 0, Ky,z,∅ = 0, Ky,xz,∅ = 1 and
Kz,∅,∅ = 0. Notice that this valuation does not satisfy the activity property as
Kx,∅,∅ ≥ Kx,∅,y . If we take Kx,∅,∅ = 1, Kx,∅,y = 0 this property is satisfied.
Transition System of a BRN
Let us consider a BRN R = (V, E, π). Following [8,7] the evolution of the state of the network depends (i) on the expression level of the genes (ii) on a set of parameters (see Def. 3.3). The expression level of a gene x may either decrease or increase according to which other genes of the network activate or inhibit it. If X+ and X− are respectively the set of genes that currently activate x and the set
that currently inhibit x, then the value of x evolves towards the value defined by
the parameter Kx,X+ ,X− . Which genes are currently activating or inhibiting x is defined according to the levels given in the network (e.g. for example 2 of Figure 1, x activates y when its expression level is 1, inhibits y when its expression level is 2, and has no effect on y when it is 0.) We formally define the different configurations of a network according to the activators and inhibitors of a gene x in Def. 3.7.
Definition 3.7 [State constraints of a BRN.] For x ∈ V , X+ ⊆ R+(x), X− ⊆
R−(x), we define Ax,X+ , Ix,X− and Cx,X+,X− by:
Ax,X+ =   y∈X+ (y ∈ π+(y, x))  ∧   y∈R+(x)\X+ (y ∈/ π+(y, x)) 
Ix,X− =   y∈X− (y ∈ π−(y, x))  ∧   y∈R−(x)\X− (y ∈/ π−(y, x)) 

Cx,X+,X− = Ax,X+ Λ Ix,X−
Cx,X+,X− is true iff the values of the genes in X+ are in the intervals in which they activate x and the values of the genes in X− are in the intervals in which they inhibit x.
Example 3.8 For example 2 of Fig. 1 the activation and inhibition functions are: π+(x, y)= [1, 1], π−(x, y)= [2, 2] and π+(y, x)= ∅, π−(y, x)= [1, 1]. The activators and inhibitors sets are given by R+(y)= x, R−(y)= x and R+(y)= ∅, R−(x)= y. The set of constraints are given by: Cx,∅,∅ = y ∈/ [1, 1], Cy,x,∅ = x ∈ [1, 1] Λ x ∈/ [2, 2] and Cy,∅,x = x ∈/ [1, 1] Λ x ∈ [2, 2].
Another feature of the evolution of the state of a network is that the expression level of a gene x evolves step-by-step i.e. it cannot go from 1 to 3 in a single step, it must evolve by one unit from 1 to 2 and if some conditions are met 1 will go from 2 to 3. This is captured in the definition of an evolution operator :
Definition 3.9 [Evolution Operator F.] Let x ∈ N and k ∈ N. The evolution operator F is defined by:
⎧ x — 1 iff x > k 
x F k =	x +1 iff x < k 
⎪⎪⎩ x	otherwise
Notice that in the case x = k the next value of x will remain equal to k. We can now define a transition system giving the semantics of a BRN.
Definition 3.10 [Transition System of a BRN.] Let Y = (V, E, π) be a BRN and κ a valuation of the parameters in Para(Y). The semantics of Y with valuation κ is the labeled transition system SR(κ)= (S(Y), V, →) with →⊆ S(Y) × V × S(Y) such that:
⎧⎪	EA ⊆ R+(x), EB ⊆ R−(x),ν ∈ [[Cx,A,B]]
x ν' ⇐⇒ ⎪⎨ Λ ν(x) /= Kx,A,B
Λ ν'(x)= x F Kx,A,B
⎪⎪⎩ Λ 6y /= x, ν'(y)= ν(y)
Remark 3.11 Note that according to Def. 3.7, there is a unique ν' such that
ν x	'
→ ν . The transition system SR(κ) is (partially) deterministic in the sense it
is deterministic for each x-transition.
Nevertheless, there may be another y-transition from the state ν and thus SR(κ) is not deterministic. The nondeterminism models the fact that the expression levels of the genes evolve asynchronously. Note also that there is an x-transition only when x has not reached the value it tends to get closer to (i.e. Kx,A,B for the right

1 it could be that from level 2 it is impossible to reach level 3.

A and B). This will enable us to define the stable states of a network as those states that have no outgoing transitions (the deadlock states).
Definition 3.12 [Stable State of a BRN.] Let Y = (V, E, π) be a BRN and κ
a valuation of the parameters in Para(Y) and SR(κ)= (S(Y), V, →) its semantics.
A state ν ∈ S(Y) is non stable iff Eν' ∈ S(Y),x ∈ V such that ν x ν'. A state ν is
a stable state if it is not a non stable state (i.e. a stable state is a deadlock state).
Simple Case-Study
We consider in this section the example 1 of Fig. 1. We use the verification tool Hytech [2] to automatically compute the results. Of course we could have chosen any model-checker to analyze our models but Hytech enables us to compute some constraints on the parameters such that certain properties are satisfied (we will not cover this in this paper.) The Hytech input files and results are given in appendix A. The set of activators and inhibitors are given in Example 2.5, page 4. The state space is Sx = [0, 1], Sy = [0, 1] and Sz = [0, 1]. The parameters are Kx,∅,∅, Kx,∅,y
(for x); Ky,∅,∅, Ky,x,∅, Ky,z,∅, Ky,{x,z},∅ (for y) and Kz,∅,∅ (for z).
Example with Regular Stabilization
Let us fix the following values for the parameters:


Kx,∅,∅ = 1 
Kx,∅,y = 0 
Ky,∅,∅	= 0 Kz,∅,∅ = 0 
Ky,x,∅	= 0 
Ky,z,∅	= 0 
Ky,{x,z},∅ = 1 

The monotonicity and activity assumptions are satisfied by these parameters.
For this example we obtain the transition system given in Fig. A.1 in the ap- pendix A. The Hytech input file is given in appendix A. We can easily compute the set of stable states and non stable states as given in the output file Figure A.3, appendix A, 12. Note that the cycle reveals indeed an equilibrium state which is not stable.
Example without Regular Stabilization
Let us now fix the parameters to:


Kx,∅,∅ = 1 
Kx,∅,y = 0 
Ky,∅,∅  = 0 Kz,∅,∅ = 0 
Ky,x,∅ = 1 
Ky,z,∅  = 1 
Ky,xz,∅ = 1 

The transition system obtained in this case is given in Fig. A.1 on the right, ap- pendix A. Again the results (Figure A.3 right hand side, appendix A, page 12) ob- tained with Hytech show that there is no regular stable state in this case. Note that the cycle is indeed a stable state, which is called singular in the R.Thomas’approach.

Conclusion and Future Work
In this paper we have given a formal semantics for Biological Regulatory Network. The main advantages of this work are (i) the formal semantics enables us to build automatically a (behavioral) model of a network (ii) this model can then be analyzed by verification tools exactly as safety critical programs can be (e.g. the formal semantics characterizes the stable and non stable states).
Our future work will consist in adding timing constraints in the network to build a more accurate model. Our semantics is ready to be extended with timing constraints: in this case we will derive a timed or hybrid automata model and use tools for analyzing this types of models to prove properties of the network.

Acknowledgement
The authors thank genopole-research in Evry (H. Pollard and P. Tambourin) for constant support. Comments from the anonymous referees have also been very constructive.

References
O. Cinquin and J. Demongeot. Roles of positive and negative feedback in biological system. C. R. Biol, 325(11):1085–1095, 2002.
Thomas A. Henzinger, Pei-Hsin Ho, and Howard Wong-Toi. HYTECH: A model checker for hybrid systems. International Journal on Software Tools for Technology Transfer, 1(1-2):110–122, 1997.
M. Kaufman and R. Thomas. Model analysis of the bases of multistationarity in the humoral immune response. J. Theor. Biol., 129(2):141–62, 1987.
H. Kitano. Looking beyond the details: a rise in system-oriented approaches in genetics and molecular biology. Curr. Genet., 41(1):1–10, 2002.
E.H Snoussi. Qualitative dynamics of a piecewise-linear differential equations : a discrete mapping approach. Dynamics and stability of Systems, 4:189–207, 1989.
E.H. Snoussi and R. Thomas. Logical identification of all steady states : the concept of feedback loop caracteristic states. Bull. Math. Biol., 55(5):973–991, 1993.
R. Thomas. Logical analysis of systems comprising feedback loops. J. Theor. Biol., 73(4):631–56, 1978.
R. Thomas, A.M. Gathoye, and L. Lambert. A complex control circuit. regulation of immunity in temperate bacteriophages. Eur. J. Biochem., 71(1):211–27, 1976.
R. Thomas and M. Kaufman. Multistationarity, the basis of cell differentiation and memory. I. & II.
Chaos, 11:170–195, 2001.
O. Wolkenhauer. Systems biology: the reincarnation of systems theory applied in biology? Brief Bioinform., 2(3):258–70, 2001.

A  Appendix
In the appendix, we show the use of Hytech in the context of the analysis of the Biological Regulatory Network. For the example of section 4, we use the input file of Fig. A.2 to model our network. The transition systems is given in Figure A.1. The result is given in Figure A.3.




(0,0,0)
x

(0,0,1)	(1,0,0)	(0,1,0)
(0,0,1)

x

z	y
(1,0,1)


x	y	z	y
x


(1,0,1)


y


y	z

(1,1,1)
x
(1,1,0)



z

(0,0,0)
x	x
 (1,0,0)	(1,1,1)



(1,1,0)
x

(0,1,1)


(0,1,1)	(0,1,0)
Fig. A.1 Two transition systems of the BRN of the Example 2.3, Fig. 1 with (left) and without (right) regular stabilization

-- hytech input file var
k_x_O_O,k_x_O_y,k_y_O_O,k_y_x_O, k_y_z_O,k_y_xz_0,k_z_O_O: parameter ; -- parameters x,y,z: discrete ;



endif ;
prints "The reachable states are:";
print hide k_x_O_O,k_x_O_y,k_y_O_O,k_y_x_O, k_y_z_O,k_y_xz_0,k_z_O_O,k in f_reachable endhide;


k: discrete ; -- k changes on every discrete transition k1,k2,k3: parameter ; -- used for detecting cycles

automaton rrb synclabs: ; initially Start ;

loc Start:
while x>=0 & y>=0 & z>=0 & x<=1 & y<=1 & z<=1 wait {}
-- C_x,O,O -> K_x_O_O
when y < 1 & x > k_x_O_O do {x’=x-1,k’=1-k} goto Start; when y < 1 & x < k_x_O_O do {x’=x+1,k’=1-k} goto Start;
-- C_x,O,y
when y >= 1 & x < k_x_O_y do {x’=x+1,k’=1-k} goto Start; when y >= 1 & x > k_x_O_y do {x’=x-1,k’=1-k} goto Start;
-- C_y,O,O -> k_y_O_O
when x<1 & z<1 & y < k_y_O_O do {y’=y+1,k’=1-k} goto Start; when x<1 & z<1 & y > k_y_O_O do {y’=y-1,k’=1-k} goto Start;
-- C_y,x,O -> k_y_x_O_0
when x>=1 & z<1 & y < k_y_x_O do {y’=y+1,k’=1-k} goto Start; when x>=1 & z<1 & y > k_y_x_O do {y’=y-1,k’=1-k} goto Start;
-- C_y,z,O
when x<1 & z>=1 & y < k_y_z_O do {y’=y+1,k’=1-k} goto Start; when x<1 & z>=1 & y > k_y_z_O do {y’=y-1,k’=1-k} goto Start;
-- C_y,xz,O
when x>=1 & z>=1 & y < k_y_xz_0 do {y’=y+1,k’=1-k} goto Start; when x>=1 & z>=1 & y > k_y_xz_0 do {y’=y-1,k’=1-k} goto Start;
-- C_z,O_O
when z < k_z_O_O do {z’=z+1,k’=1-k} goto Start; when z > k_z_O_O do {z’=z-1,k’=1-k} goto Start;

end

var init_reg, f_reachable, stable_states, non_stable_states, xy_f_reachable, cycle_states : region;


init_reg := loc[rrb]=Start & x>=0 & y>=0 & z>=0 & x<=1 & y<=1 & z<=1 & k_x_O_O=1 & k_x_O_y=0 & k_y_O_O=0 & k_y_x_O=1 & k_y_z_O=1 & k_y_xz_0=1 & k_z_O_O=0;

prints "initial values for the K_ parameters and x,y,z:" ; print omit rrb locations hide k,k1,k2,k3 in init_reg endhide ;

-- compute the reachable set of states ... must be finite
-- even if there is a cycle
f_reachable := reach forward from init_reg endreach; if empty(f_reachable)
then prints "No reachable states ..."; else
-- compute the projection on x,y of f_reachable xy_f_reachable := hide k_x_O_O,k_x_O_y,k_y_O_O,k_y_x_O,
k_y_z_O,k_y_xz_0,k_z_O_O,k in f_reachable endhide;

-- compute the set of non stable states i.e. reachable states
-- with a successor
-- define the strict predecessor operator
-- here is a trick to do this with Hytech (otherwise Hytech computes
-- the set of predecessor of a set including the set itself)
-- hide k in pre(A & k=0) & k=1 endhide gives the strict predecessor
-- of A
non_stable_states := f_reachable &
hide k in (pre(f_reachable & k=0) & k=1) endhide;

-- print the result
if empty(non_stable_states) then prints "No non stable states"; else
prints "the reachable non stable states are:"; print hide k_x_O_O,k_x_O_y,k_y_O_O,k_y_x_O,
k_y_z_O,k_y_xz_0,k_z_O_O,k in non_stable_states endhide;
endif ;

stable_states := f_reachable & ~non_stable_states ; if empty(stable_states)
then prints "No stable states ... !!!"; else
prints "The reachable stable states are:"; print hide k_x_O_O,k_x_O_y,k_y_O_O,k_y_x_O,
k_y_z_O,k_y_xz_0,k_z_O_O,k in stable_states endhide;
endif ;

-- now look for cycles ... easy in hytech with hide
-- (existential quantification)
-- first we define the strict sucessor function
-- it is a post where k changes followed by a reach

cycle_states := x=k1 & y=k2 & z=k3 & f_reachable & reach forward from hide k_x_O_O,k_x_O_y,
k_y_O_O,k_y_x_O,k_y_z_O,k_y_xz_0,k_z_O_O,k in (post(x=k1 & y=k2 & z=k3 & f_reachable & k=0) & k=1)
endhide endreach;

-- print the result if empty(cycle_states)
then prints "No infinite path in the system"; else prints "There is a cycle in the system ! ...
from any of these states:";
print hide k_x_O_O,k_x_O_y,k_y_O_O,k_y_x_O, k_y_z_O,k_y_xz_0,k_z_O_O,k,k1,k2,k3 in cycle_states endhide;
endif ;

Fig. A.2 Hytech Specification of the BRN of Example 2.3, Figure 1.




initial values for the K_ parameters and x,y,z: k_x_O_O = 1  & k_x_O_y = 0  & k_y_O_O = 0
& k_y_x_O = 0 & k_y_z_O = 0 & k_y_xz_0 = 1 & k_z_O_O = 0 & x <= 1 & y <= 1 & z >= 0 & x >= 0 & y >= 0 & z <= 1
.Number of iterations required for reachability: 1

The reachable states are:
Location: Start
x <= 1  & y >= 0  & z <= 1 
& x >= 0  & y <= 1  & z >= 0 the reachable non stable states are:
Location: Start
x = 0  & y < 1  & z >= 0  & y >= 0  & z <= 1 
|
y = 1  & x = 1  & z <= 1  & z >= 0 
|
y = 1  & z < 1  & x < 1  & z >= 0  & x >= 0
|
z = 1 & y >= 0 & x <= 1 & x >= 0 & y <= 1 The reachable stable states are:
Location: Start
y < 1  & 0 < x  & z < 1 & y >= 0 & x <= 1 & z >= 0
.......Number of iterations required for reachability: 7

There is a cycle in the system ! ... from any of these states:
Location: Start
z = 1  & y = 0  & x = 1 
|
z = 1  & y = 1  & x = 0 
|
z = 1  & y = 1  & x = 1 
|
z = 1  & y = 0  & x = 0 


=================================================================
Max memory used =	0 pages =	0 bytes =  0.00 MB
Time spent	=	57.24u +	6.24s =	63.48 sec total
=================================================================
initial values for the K_ parameters and x,y,z: k_x_O_O = 1 & k_x_O_y = 0 & k_y_O_O = 0 & k_y_x_O = 1 & k_y_z_O = 1 & k_y_xz_0 = 1 & k_z_O_O = 0 & x <= 1 & y <= 1 & z >= 0 & x >= 0 & y >= 0 & z <= 1
.Number of iterations required for reachability: 1

The reachable states are:
Location: Start
x <= 1  & y >= 0  & z <= 1  & x >= 0
& y <= 1  & z >= 0 
the reachable non stable states are:
Location: Start
x = 0  & y < 1  & z >= 0  & y >= 0  & z <= 1
|
y = 1  & x = 1  & z <= 1  & z >= 0
|
y = 1  & z < 1  & x < 1  & z >= 0  & x >= 0 
|
y = 0  & x = 1  & z < 1  & z >= 0 
|
z = 1 & y >= 0 & x <= 1 & x >= 0 & y <= 1 The reachable stable states are:
Location: Start
0 < y  & z < 1  & x <= 1  & 0 < x  & z >= 0  & y < 1 
|
y >= 0  & z < 1  & 0 < x  & x < 1  & z >= 0  & y < 1 
.......Number of iterations required for reachability: 7

There is a cycle in the system ! ... from any of these states:
Location: Start
x = 1  & y = 0  & z >= 0  & z < 1 
|
x = 0  & y = 1  & z >= 0  & z < 1 
|
x = 1  & y = 1  & z >= 0  & z < 1 
|
x = 0  & y = 0  & z >= 0  & z < 1 
=================================================================
Max memory used =	0 pages =	0 bytes =  0.00 MB
Time spent	=	73.04u +	8.10s =	81.14 sec total
=================================================================

Fig. A.3 Hytech results for example of Fig. A.2 (with(left) and without (rigth) regular stabilization)
