Electronic Notes in Theoretical Computer Science 169 (2007) 43–59	
www.elsevier.com/locate/entcs

Qualitative Uncertainty Orderings Revised
Andrea Capotorti1
Dipartimento di Matematica e Informatica, Universita` di Perugia
Andrea Formisano and Gianfranco Murador2
Dipartimento di Informatica, Universita` di L’Aquila

Abstract
In recent decades, qualitative approaches to probabilistic uncertainty have been receiving wider and wider attention. We propose a new characterization of some of the most adopted partial preference orders by providing an uniform axiomatic treatment of a variety of qualitative uncertainty notions. We prove a representation result that connects qualitative notions of partial uncertainty to their numerical counterparts. We also describe an executable specification, in the declarative framework of Answer Set Programming, that constitutes the core engine for the qualitative management of uncertainty. Some basic reasoning tasks are also identified.
Keywords: Uncertainty order relations, qualitative uncertainty frameworks, partial assessments, answer set programming.


Introduction
Where are all the numbers coming from?
—Peter Cheeseman [6]
Numerous formalisms for dealing with uncertainty have been studied during the last century. Most of the proposed probabilistic models of decision under uncer- tainty rely on numerical measures and representations. All of them originate from amendments of the well-known Probability measure [37], usually aimed at general- izing it to better fit different peculiarities of specific application fields. As a matter of fact, several authors criticized such use of the classical theory of probability, by emphasizing that common people, in expressing their intuitive judgments on the likelihood of events, often (deliberately) violate the postulate of such theory. It

1 Via Vanvitelli 1, Perugia. Italy. Email: capot@dipmat.unipg.it
2 Via Vetoio, L’Aquila. Italy. Email: formisano@di.univaq.it

1571-0661 © 2007 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2006.07.028

seems reasonable that the human mental process yielding a judgment is guided by a number of heuristics which unconsciously “act behind the scenes”. Subjective, psy- chological, and environmental factors may influence this process (cf., [22,23,27,40], among many). For instance, different description of the same event often give rise to substantially different judgments. Paradigmatic example of this phenomenon is the well-known Ellsberg Paradox [20,21]. A way of circumventing these problems consists in dropping some of the postulates characterizing probability measures. Most of the proposals in this direction weaken the additivity property of probabil- ity functions. This could be done in several manners, obtaining alternative notions of uncertainty measures. (For a survey the reader can refer to [29,33,45], among others.)
Actually, the numerical approach itself has been criticized in toto, because all of the proposed framework inevitably suffer from important drawbacks:
The hardness, for human beings, to elicit precise numerical values;
The difficulty of expressing a complete evaluation.
The former problem may originate from lack of adequate knowledge or expertise, or from incapability of people to correctly estimate numerical values and numerically grade their preferences. It seems, in fact, more plausible that assessments of uncer- tainty are based on comparative qualitative judgments [3,6,17,34,36,42]. Moreover, other aspects may make numerical elicitations not appropriate from a practical point of view. Indeed, studies concerning the sensibility of automated decision sys- tems with respect to the accuracy of the given numerical assessments (e.g., [35]) suggest that there exist fields of applications where there could be little advantage in forcing the user to express precise quantifications of preferences. Hence, rough assessments or even qualitative treatments could yield similar results with less com- plex modeling and, often, minor computational efforts. To obviate such weakness of numerical models, qualitative approaches have been proposed in the last decades and are receiving wider and wider attention, either as theoretical tools to deal di- rectly with belief management [2,10,14], or inside the more articulated framework of decision-making theory (see, for example, [15,16,19,25]). The central idea of such methodologies is to grade uncertainty about the truth of propositions, through comparisons expressing the judgment of “less or more believed to be true”. This operationally translates into the use of order relations in place of numerical grades. The notions of qualitative probabilities, qualitative plausibility, and so on, are then introduced. (Often, the terms comparative probabilities, comparative plausibility, etc., are used.)
Similar reasons originate the difficulty of expressing a complete evaluation. In the context of qualitative models (but the same argument applies to the numerical case) it is doubtful that a set of preferences expressed by a human being constitutes a complete (i.e., total) order of the domain of discernment. There could be several reasons that prevent the subject of the analysis from providing such complete in- formation. (S)he may be incapable or reluctant to describe a total order in very rich contexts, for instance, because of substantial difficulties in comparing every

possible event, or because (s)he is interested in reasoning about a restricted portion of the domain [3,26,28,30,43]. This problem can be circumvented by adapting to the qualitative framework the pioneering approach proposed by de Finetti in the context of Probability measures [11,12]. Namely, by introducing the so called partial models, i.e. qualitative assessments defined only on some of the situations at hand and intended to be restrictions of some complete model. (Then, we deal with par- tial capacities, partial probabilities, and so on.) This approach allows the analyst of the problem to focus his/her evaluation on the situations really judged relevant,
w.r.t. the problem at hand. This also leaves open the possibility to enlarge the model to other scenarios that could enter on the scene later. The next section we formally introduce these notions and provide an axiomatic view of the most studied uncertainty orders.

New axiomatizations for partial preference orders
Let us recall some notions on uncertainty orders. The domain of discernment is represented by a finite set of events E = {E1,... , En} (among them, φ and Ω de- note the impossible and the sure event, respectively). The events are seen as the relevant propositions on which the subject of the analysis expresses his/her opinion. As mentioned, E does not necessarily represent a full model, i.e. it does not com- prehend all elementary situations and all of their combinations. For this reason, a crucial component of partial assessments is the knowledge of the logical rela- tionships (incompatibilities, implications, combinations, equivalences, etc.) holding among events. Such relationships are usually expressed by stating a collection C of constraints on the events (as well as on conjunctions and disjunctions of events). By taking into account the constraints C, the family E spans a minimal Boolean algebra AE containing E itself. Note that AE is only implicitly defined via E and C and it is not a part of the assessment. Anyway, AE can be referenced as a supporting structure.
Definition 2.1 Let E be a set of events and C a collection of constraints on E. AE
is the minimal algebra (A, ∪, ∩, , φ, Ω) satisfying C and such that E ⊆ A.
Such an algebra induces a lattice structure on A. The atoms of AE are the minimal elements of the (sub-)lattice AE \ {φ}. Then, each event corresponds to a set of atoms and AE is (partially) ordered by set inclusion. 3
Definition 2.2 Let AE be an algebra of events. A binary relation “∗ over A is a
(total) preference order if it satisfies the following conditions:
(A1) “∗ is a pre-order, i.e. it is reflexive, transitive, and total; (A2) φ ≤∗ Ω and ¬(Ω ≤∗ φ)	(non-triviality );
(A3) for all events A, B, A ⊆ B → (A “∗ B)	(monotonicity ).

3 An useful piece of notation: in what follows, given any binary relation R, the writing ¬(ARB) means that the pair ⟨A, B⟩ does not belong to R.

If “∗ is a total preference order, ∼∗ is its symmetric factor, i.e. ∀E1, E2 (E1 ∼∗
E2 ↔ E1 “∗ E2 ∧ E2 “∗ E1). Moreover, ≺∗ is the asymmetric factor of “∗, i.e.
∀E1, E2 (E1 ≺∗ E2 ↔ E1 “∗ E2 ∧ ¬(E2 ∼∗ E1)).
Definition 2.3 Let “ and ≺ be binary relations over a set of events E, such that E1 ≺ E2 → E1 “ E2. The pair ⟨“, ≺⟩ is a weak preference structure for E (w.p.s., for short) if it exists a total preference order “∗ over AE such that: ∀E1, E2 ∈ E ((E1 “ E2 → E1 “∗ E2) ∧ (E1 ≺ E2 → E1 ≺∗ E2)).
Example 2.4 Consider the following situation, concerning a decision making prob- lem in gastroenterology. 4 Let us consider three possible diseases that a patient might suffer: peptic ulcer, gastric cancer, and biliar disease. The symptoms that might be associated to these diseases are jaundice, weight loss, and dark stools. Presence of jaundice indicates biliar disease, weight loss can be associated to gastric cancer, dark stools might indicate peptic ulcer or gastric cancer. From data pro- vided by the hospitals we know that the incidence of peptic ulcer is greater than the incidence of gastric cancer, while biliar disease affect the majority of the patients. Clearly, information useful to make a diagnosis are age and sex of the patient: pep- tic ulcer and gastric cancer are more frequent in men; biliar disease are more often complained by women. Moreover, in male population, incidence of ulcer is greater then the incidence of biliar disease. As regards age, we can reasonably affirm that older people are more subject to peptic ulcer or gastric cancer than young people. This scenario can be so represented:
GC ≡ The real state of suffering from gastric cancer	JA ≡ Jaundice symptoms
PU ≡ The real state of suffering from peptic ulcer	WL ≡ Weight loss symptoms
BD ≡ The real state of suffering from biliar disease	DS ≡ Dark stools
Let M (resp., W) denote the event The patient is male (resp., female), and OA
(resp., YA) denote the event The patient is old (resp., young ).
Finally, let us focus on the simplified situation in which any patient suffers from at most one disease. The knowledge about diseases and symptoms can be so described in terms of logical constraints:
JA ∩ GC = JA ∩ PU = WL ∩ PU = φ,  WL ∩ BD = DS ∩ BD = φ,  GC ∩ PU = GC ∩ BD = PU ∩ BD = φ,
GC ∪ PU ∪ BD = Ω,  OA ∩ YA = M ∩ W = φ,  OA ∪ YA = M ∪ W = Ω.
Moreover, due to events’ meaning, it seems reasonable to describe a w.p.s. as follows:
φ ≺ GC ≺ PU ≺ BD ≺ Ω, GC ∩ W ≺ GC ∩ M, PU ∩ W ≺ PU ∩ M, BD ∩ M ≺ BD ∩ W, BD ∩ M ≺ PU ∩ M, YA ∩ (GC ∪ PU) G OA ∩ (GC ∪ PU).
Notice that Definition 2.3 does not require either “ or ≺ to be total orders, nor
≺ to be the asymmetric factor of “. On the other hand, it is required that “∗
extends “, and that ≺∗ (the asymmetric factor of “∗) extends ≺.
For any w.p.s. ⟨“, ≺⟩ for E, the following properties hold:
(A1’) if there exist E1,... , En ∈ E such that E1 “ E2 “ ... “ En “ E1, then
¬(Ei ≺ Ej) for all i, j ∈ {1,... , n};

4 This example is hypothetical and for illustrative purpose only. It is not intended to express clinical competence.

(A2’) ¬(Ω “ φ);
(A3’) for all E1, E2 ∈ E, E1 ≺ E2 → E2 /⊆ E1.
Conditions (A1’)–(A3’) ensure the existence of a total preference order “∗ which enlarges ⟨“, ≺⟩. Considering numerical approaches to uncertainty, Capacities mea- sures constitute the most general framework, as they express “common sense” be- haviors. Any reasonable relation “ must be representable by a partial Capacity (i.e., a restriction of a Capacity measure to the set of events at hand). This cor- responds to the satisfaction of the conditions (A1’)–(A3’) (cf., [10]). Hence in the following we assume that the w.p.s. satisfy (A1’)–(A3’) and we add the innocuous assumption of closure under monotonicity, i.e. for all E1, E2 ∈ E with E1 ⊆ E2 we have E1 “ E2.
Further differentiations among uncertainty notions are done by considering the specific way of combining distinct pieces of information (e.g., as mentioned, for Probabilities additivity is adopted). Within the numerical context, this yields a taxonomy of numerical measures. By following [14,46,47], various qualitative pref- erence orders can be introduced according to their agreement with the numerical models. The correspondence between a qualitative uncertainty notion and a nu- merical measure is given in terms of a representability result.
Definition 2.5 Let E be a set of events. A total preference order “∗ over AE is said to be representable by a numerical measure f : AE → [0, 1] if for all E1, E2 ∈ AE it holds that E1 “∗ E2 ↔ f (E1) ≤ f (E2).
A w.p.s. ⟨“, ≺⟩ for E is said to be representable by a partial uncertainty measure g : E → [0, 1] if it admits an enlargement “∗ over AE which is representable by an uncertainty measure g∗ : AE → [0, 1] extension of g to AE .
We refer to any specific class of preference orders by the name of the corre- sponding numerical notion. The representability results we are going to present legitimate this choice. In what follows we focus our treatment on those uncer- tainty orders for which a solid formalization is known. In particular, we adopt the axiomatic characterizations of w.p.s. given in [5], although suitably tailored to our context. Proposition 2.6 states a necessary and sufficient condition for a w.p.s. to be representable by a belief function. Representability by other uncertainty measures are stated similarly (cf. Proposition 2.7).
Proposition 2.6 (Comparative belief) A w.p.s. ⟨“, ≺⟩ for E can be extended to a total preference order “∗ over AE representable by a belief function iff for all X, Y, Z, W ∈E s.t. X ⊂ Y , Z ⊂ W ⊂ Y , W \ Z ⊆ Y \ X it holds:
(B’)   X ∼ Y → ¬(Z ≺ W ).
Proof. (⇒). By hypothesis and by the characterization theorem for total compar- ative believes [47], there exists a total order “∗ extending ⟨“, ≺⟩ and satisfying the following condition (which characterizes complete believes):
(B)	∀A, B, C ∈ AE s.t. A ⊂ B, B ∩ C = φ, A ≺∗ B → A ∪ C ≺∗ B ∪ C.
Let us assume (B’) does not hold. Then there exist X, Y, Z, W ∈E ⊆ AE s.t. X ⊂ Y ,
Z ⊂ W ⊂ Y , and W \Z ⊆ Y \X with X ∼∗ Y and Z ≺∗ W . Hence, by monotonicity

and transitivity of “∗ we have
(1)	X ∼∗ X ∪ Z ∼∗ X ∪ W ∼∗ Y.

From W \ Z ⊆ Y \ X and Z ⊂ W , we easily obtain that (X \ Z) ∩ X \ W = X ∩ (W \ Z) = φ and that X \ Z ∩ (X \ W ) = X ∩ (Z \ W ) = φ. Then, since (X ∪ Z) \ Z = X \ Z and (X ∪ W ) \ W = X \ W , it follows that
(X ∪ Z) \ Z = (X ∪ W ) \ W
Since (X \ W ) ∩ W = φ and Z ≺∗ W , by (2) and (B) we obtain Z ∪ (X \ W ) = Z ∪ ((X ∪ W ) \ W )= Z ∪ ((X ∪ Z) \ Z)= X ∪ Z ≺∗ W ∪ (X \ W )= X ∪ W. This contradicts (1). Thus, (B’) must hold.
(⇐). W.l.o.g., we can assume that φ ≺ Ω, φ “ E for all E ∈ AE , and “ closed by monotonicity. This is always possible by virtue of (A2’) and (A3’). Let us describe a construction of the enlargement “∗. First, we construct an enlargement ⟨“', ≺'⟩ over AE closed under axioms (B) and (B’), i.e. such that
∀A, B, C ∈ AE ,A ⊂ B, B ∩ C = φ	A ≺' B → A ∪ C ≺' B ∪ C
∀X, Y, Z, W ∈ AE ,X ⊂ Y, Z ⊂ W ⊂ Y, W \ Z ⊆ Y \ X	X ∼' Y → Z ∼' W
Such an enlargement can be obtained by applying the following procedure.
Set ⟨G', ≺'⟩≡ ⟨G, ≺⟩ and E' ≡E 
Repeat as long as it is possible
(↑) If ∃A, B ∈ E' s.t. A ⊂ B, A ≺' B and ∃C ∈ AE \ {φ} s.t. B ∩ C = φ and
¬(A ∪ C ≺' B ∪ C) then
Add A ∪ C ≺' B ∪ C to ≺'
Set E' = E' ∪ {A ∪ C, B ∪ C}
(↓) If ∃X, Y ∈ E' s.t. X ⊂ Y, X ∼' Y and ∃C ∈ AE s.t. Y ∩ C /= φ and
¬(X ∩ C ∼' Y ∩ C) then
Add X ∩ C G' Y ∩ C and Y ∩ C G' X ∩ C to G'
Set E' = E' ∪ {X ∩ C, Y ∩ C}
At each iteration of the Repeat-loop, the step (↑) enlarges the relation ≺' without affecting “'. Similarly, each step (↓) enlarges the relation “' without influencing ≺'. Each execution of steps (↑) and (↓), preserve the validity of condition (B’) for the
w.p.s. ⟨“', ≺'⟩ over E', while (B) is not falsified. By construction, (B) is satisfied at the end of procedure. Moreover, we have that steps (↑) and (↓) do not conflict, i.e. it never happens that there exist a C ∈ AE \ {φ} and A, B, X, Y ∈ E', with A ⊂ B, B ∩ C = φ, X ⊂ Y , (B ∪ C) ⊂ Y , and B \ A ⊆ Y \ X, but s.t. A ≺' B and X ∼' Y . This because, otherwise, (B’) could be falsified in E' by putting Z ≡ (A ∪ C), W ≡ (B ∪ C) and X, Y as they are. Finally, by construction of E', after each iterations it holds that AE' ≡ AE . This fact, since AE is finite, guarantees the termination of the procedure. At this point, “' can be closed under monotonicity over AE preserving (B’). The w.p.s. ⟨“', ≺'⟩ so obtained can be enlarged to obtain
⟨“'', ≺''⟩ as follows: first add all “inverted” pairs (Ej, Ei) such that Ei “' Ej and such addition does not create intransitive cycles; then, impose a strict order for all the remaining pairs:
“'' =Def “' ∪ {Ej “'' Ei : Ei “' Ej and axiom (A1’) is preserved}
≺'' =Def ≺' ∪ {Ei ≺'' Ej : Ei “'' Ej and ¬(Ej “'' Ei)}
Note that, by (3) and (4), the w.p.s. ⟨“', ≺'⟩ already contains all the equivalences
X ∼' Y and all the strict preferences A ≺' B over AE that axioms (B) and (B’)

could involve, hence (B) is satisfied by the w.p.s. ⟨“'', ≺''⟩.
If we close ⟨“'', ≺''⟩ by transitivity, we obtain that (the closure of) “'' induces a partial order relation over the quotient set AE / ∼''. 5 The complete order “∗ can be obtained by this procedure:
Set A be AE / ∼'' and F be the lattice (A, G'')
Repeat until A /= φ
Set M to be the set of minimal elements of the lattice F
Set Ei ∼∗ Ej for all Ei, Ej ∈M 
Set Eh ≺∗ Ek for all Eh ∈M and Ek ∈A \ M
Set A≡ A \ M and F ≡ (A\ M, G''|A\M)
This procedure preserves (B). In fact, since “' was closed by monotonicity, the
w.p.s. ⟨“'', ≺''⟩ already predicates on all pairs of elements among A, B, A ∪ C, and B ∪ C (with A ⊂ B and B ∩ C = φ), while the construction of “∗ does not impose further constraints among them. Hence, by the characterization theorem for believes [47], “∗ is representable by a belief function.	 
Analogous properties can be stated for other notions of preference orders. Propo- sition 2.7 relates the qualitative notions to the corresponding quantitative measures. For each of the uncertainty notions, the proof proceeds along the lines of Propo- sition 2.6 but employing, in place of condition (B), a different characterizations of total preference orders (see [4]).
Proposition 2.7 Let ⟨“, ≺⟩ be a w.p.s. for E . The following properties hold: Comparative 0-monotonicity. ⟨“, ≺⟩ can be extended to a total preference order “∗ over AE representable by a 0-monotone function 6 iff for all X, Y, Z ∈E s.t. X ⊂ Y, Z ⊆ Y \ X it holds that
(0M’)	X ∼ Y → ¬(φ ≺ Z).
Comparative plausibility.  ⟨“, ≺⟩ can be extended to a total preference order
“∗ over AE representable by a plausibility function 7 iff for all X, Y, Z, W ∈ E
s.t. X ⊂ Y , Z ⊂ W ⊂ Y , W \ Z = Y \ X it holds that
(PL’)	X ≺ Y → ¬(Z ∼ W ).
Comparative 0-alternation. ⟨“, ≺⟩ can be extended to a total preference order “∗ over AE representable by an 0-alternating function 8 iff for all X, Y ∈E s.t. X ⊂ Y , it holds
(0A’)	X ∼ Y → ¬(X ∪ (Ω \ Y ) ≺ Ω).
To the best of our knowledge, there exists no purely qualitative characterization of comparative probability. This notion seems to have an intrinsically numerical character. The following is proposed in [8]:
Proposition 2.8 (Comparative probability) A w.p.s. ⟨“, ≺⟩ for E can be ex- tended to a total order “∗ over AE representable by a probability function iff

5 Here, for the sake of simplicity, let us use G'' also to denote such induced order over AE / ∼''. Moreover, let G''|S denote the restriction of G'' to the set S.
6 0-monotonicity is often referred to as super-additivity, cf. Appendix A.
7 Equivalently, by a n-alternating function, with n ≥ 2.
8 0-alternation is often referred to as sub-additivity, cf. Appendix A.

(CP) for any X1,... , Xn, Y1,... , Yn ∈ E, with Yi “ Xi, ∀i = 1,... , n, such that
for some r1,... , rn > 0 sup ( Σn	ri(ai − bi)) ≤ 0, implies that Xi ∼ Yi, for all
i = 1,... ,n (ai, bi are the indicator functions of Xi, Yi, resp.).
Axiom (CP) involves quantitative notions (e.g., indicator functions and sum- mations) and its verification requires numerical elaborations. Nevertheless, it is possible to (qualitatively) state a necessary, but not sufficient, condition for repre- sentability of an order through a probability function.
Proposition 2.9 (Weak comparative probability) If ⟨“, ≺⟩ can be extended to a total preference order “∗ over AE representable by a probability function then for all X, Y, Z ∈E s.t. X ∩ Z = Y ∩ Z = φ, it holds that
(WC)	X “ Y → ¬(Y ∪ Z ≺ X ∪ Z).
We mentioned that the introduction of different classes of orders is motivated by the presence of practical situations where a strictly probabilistic approach is not viable. Here is a simple example.
Example 2.10 Let A, B, and C be three companies, each of them potential buyer of a firm that some other company wants to sell. Even being distinct, both A and C belong to the same holding. Hence, the following uncertainty order about which company will be the buyer, could reflect specific information about the companies’ strategies (by abuse of notation, let A denote the event “the company A buys the firm”, and similarly for B and C):  φ ≺ A ≺ B ≺ B ∪ C ≺ A ∪ C ≺ Ω.  Since A, B and C are incompatible, it is immediate to see that the order relation is not representable by a probability because it violates axiom (WC), while it can be managed in line with belief functions behaviors because it agrees with axiom (B’).

Reasoning tasks for preference orders
Let us outline two of the reasoning tasks that exploit preference orders.
Qualitative framework detection. This is a classification task: Given a (partial) assessment (domain of discernment, constraints, and preferences), the goal consists in detecting which is the most stringent among all compatible uncertainty frameworks. Notice that, by proceeding in this way, we actually invert the usual attitude towards qualitative management of uncertainty. In fact, specific axioms are usually set in advance, so that only relations satisfying them are admitted. Here, on the contrary, given a fixed preference relation, the goal consists in ascertain which are the reasonable rules to work with.
Considering an assessment as the outcome of a reasoning process performed by an agent (human or not), detecting the correct uncertainty framework provides useful information about the cognitive schema of the agent. Selecting the most restrictive framework (among those appropriate) clearly corresponds to adopting a sort of “cautious approach” in interpreting agent’s thought. Such a process can be, for instance in a multi-agent system, of great help in constructing more informed representation of (other) agents’ models of reality. This translates in better strate-

gies in agent modeling, decision making, and plan recognition, i.e., the attempt of inferring the plans of other agents by communicating with them or by observing their behaviors.
Qualitative inference. An interesting task, strictly related to the previous one, consists in inferring new knowledge on the basis of a partial model. This ultimately amounts to finding an extension of a preference relation so as to take into account one or more further events extraneous to the initial assessment. Clearly, this should be achieved in a way that the extension retains the same character of the initial order (e.g., both should satisfy the same axioms). More precisely, let be given an initial (partial) assessment expressed as a w.p.s. ⟨“, ≺⟩ over set of known events E. Assume that ⟨“, ≺⟩ satisfies the axioms characterizing a specific class, say C, of orders. Consider a new event S (not in E), implicitly described by a collection C' of set-theoretical constraints involving the events of E. In the spirit of [8, Thm. 3], the problem can be formulated as: Determine which is the “minimal” extension ⟨“+, ≺⟩+ (over E ∪ {S}) of ⟨“, ≺⟩, induced by the new event, which still belongs to the class C. In other words, we are interested in ascertaining how the new event S must relate to the members of E in order that ⟨“+, ≺⟩+ still is in C. To this aim we want to determine the sub-collections LS, WLS, US, and WUS, of E so defined:
E ∈ LS iff no extension “∗ of “ can infer that S “∗ E E ∈ WLS iff no extension “∗ of “ can infer that S ≺∗ E E ∈ US iff no extension “∗ of “ can infer that E “∗ S
E ∈ WUS iff no extension “∗ of “ can infer that E ≺∗ S Consequently, in order to satisfy the axioms characterizing C, any weak preference structure ⟨“+, ≺+⟩ extending ⟨“, ≺⟩ must, at least, impose that:
E ≺+ S ∀E ∈ LS,	E “+ S ∀E ∈ WLS,
S ≺+ E ∀E ∈ US,	S “+ E ∀E ∈ WUS.
The availability of automated tools able to extend preference orders, whenever new knowledge is acquired, directly suggests applications in expert systems and decision-support tools. In automated diagnosis, planning, or problem solving, to mention some examples, one could easily imagine scenarios where knowledge is not entirely available from the beginning. We could outline how a rudimental inference process could develop, by identifying the basic steps an automated agent should perform:
Acquisition of an initial collection of observations about the object of the anal- ysis, together with a (qualitative) partial preference assessment;
	Detection of which is the most adequate (i.e., the most discriminant) uncertainty framework;
	Whenever new knowledge becomes available, refine agent’s description of the real world by performing order extension.
The results of step 2) could be then exploited to guide further investigations on the real world, in order to obtain new information. Then, the process will be repeated

until further pieces of knowledge are obtainable or an enough accurate degree of believe is achieved.
PreC : Working with preference orders
Apart from qualitative probabilities, all axioms in Sec. 2 are of direct declarative reading, as they involve only logical and preference relations. It is then rather imme- diate to provide an executable declarative specification of them. In fact, their declar- ative character supports a straightforward translation within the logical framework of Answer Set Programming (ASP, for short). Thus, we immediately obtain an ex- ecutable ASP-specification suitable to perform the tasks described in the previous section. More specifically, this is done by exploiting an ASP-solver (in our case SModels, cf. [48]).
The ASP-specification is obtained as follows. We start by defining in ASP the predicates prec(·,·), precneq(·,·), and equiv(·,·), to render the relators “, ≺, and
∼, resp. The characterization of potential legal answer sets is done by asserting properties of prec(·,·), precneq(·,·), and equiv(·,·): 9 For instance (A3’) is rendered by weeding out all answer sets where A ⊆ B ∧ B ≺ A holds for some events A and B:
:- event(A;B), subset(A,B), precneq(B,A).
As regards preference classification, let us consider one of the axioms of Sec. 2, say (B’). The following rule is of immediate reading:
failsB :- event(X;Y;Z;W), subset(X,Y), X!=Y, subset(Z,W), Z!=W, subset(W,Y),
W!=Y, subset(diffset(W,Z),diffset(Y,X)), equiv(X,Y), precneq(Z,W).
Namely, the fact failsB is true whenever there exist events falsifying (B’). All other axioms can be treated similarly. When an ASP-solver is fed with such program and a description of a preference relation (i.e., a set of facts of the forms prec(·,·), precneq(·,·), equiv(·,·)), different outcomes may be obtained:
	If no answer set is produced, then the input w.p.s. violates some basic require- ment, such as axioms (A1’)–(A3’).
Otherwise, if an answer set is generated, there exists a numerical (partial) model representing the input w.p.s. The presence in the answer set of a fact of the form failsC (say failsB), witnesses that the corresponding axiom ((B’) in the case) is violated. Consequently, the given order (as well as any of its extensions) is not compatible with the uncertainty framework ruled by C.
A similar treatment can be done to implement the order extension task. In this case, the input knowledge consists in a set of events together with a collection of logical constraints and preferences, a description of a the new event, and one or more axioms to be imposed. The handling of the imposed axioms is done by ASP- rules of the form:
:- holdsB, event(X;Y;Z;W), subset(X,Y), X!=Y, subset(Z,W), Z!=W,

9 Auxiliary predicates/functions set-theoretical constructs, such as event(·), subset(·,·), diffset(·,·), etc. are of immediate reading.



Fig. 1. Main window of the Preference C runcher




subset(W,Y), W!=Y, subset(diffset(W,Z),diffset(Y,X)), equiv(X,Y), precneq(Z,W).
Rules of this kind (i.e., with empty head) are called constraints [1]. By such rules we declare “undesirable” any extension for which an axiom is violated. Intuitively speaking, whenever the fact holdsB is true, in order to satisfy the above rule, at least one of the other facts must be false. (Notice that, these facts are all true exactly when (B’) is violated.) In order to activate this constraint (i.e. to impose axiom (B’)) it suffices to add the fact holdsB to the input of the solver.
The collections LS, WLS, US, and WUS can be obtained by computing the intersection Cn of all the answer sets. (Or, equivalently, by computing the set of logical consequences of the ASP-program. Notice that, in general, Cn needs not to be an answer set by itself.) This allows one to detect the minimal extension of the preference relation which is mandatory for each total order.
The executable specifications we briefly outlined in this section (together with the ASP-solver) constitute the core inference-engine of the prototypical tool PreC (Preference C runcher). This tool is aimed at assisting the user in interactively deal- ing with (partial) preference orders and qualitative uncertainty. Figure 1 depicts the main window of PreC, through which the user can describe, manage, and mod- ify his/her assessments. The visualization of preference orders in form of graphs (cf., Figure 2) allows the user to modify or extend the set of events, for instance in preparation of the execution of one of the inference tasks of Sec. 3.




Fig. 2. Visual management of preference orders (cf., Example 2.4)
References
C. Baral. Knowledge representation, reasoning and declarative problem solving. Cambridge University Press, 2003.
T. Bilgi¸c. Fusing interval preferences. In Proc. of EUROFUSE Workshop on Preference Modelling and Applications, pages 253–258, 2001.
R. I. Brafman and M. Tennenholtz. Modeling agents as qualitative decision makers. Artif. Intel., 94:217–268, 1997.
A. Capotorti, G. Coletti, and B. Vantaggi. Non additive ordinal relations representable by lower or upper probabilities. Kybernetika, 34(1):79–90, 1998.
A. Capotorti and B. Vantaggi.	Axiomatic characterization of partial ordinal relations.
Internat. J. Approx. Reason., 24:207–219, 2000.
P. Cheeseman. Discussion on the Paper by Lauritzen and Spiegelhalter. J. R. Statist. Soc. B, 50(2), 1988.
G. Choquet. Theory of capacities. Annales de l’institut Fourier, 5:131–295, 1954.
G. Coletti. Coherent qualitative probability. J. Math. Psych., 34:297–310, 1990.
E. Dantsin, T. Eiter, G. Gottlob, and A. Voronkov. Complexity and expressive power of logic programming. ACM Computing Surveys, 33(3):374–425, 2001.
G. de Cooman. Confidence relations and ordinal information. Inform. Sci., 104:241–278, 1997.
B. de Finetti. Sul significato soggettivo della probabilit`a. Fund. Math., 17:298–321, 1931. Engl. transl. in
P. Monari and D. Cocchi, eds., Induction and Probability, CLUEB, Bologna: 291–321, 1993.
B. de Finetti. Theory of Probability. Wiley, 1974. (Italian original Teoria della probabilita`, Einaudi, Torino, 1970).
A. Dovier, A. Formisano, and E. Pontelli. A comparison of CLP(FD) and ASP solutions to NP-complete problems. In Proc. of ICLP05, LNCS 3662, 2005.
D. Dubois. Belief structure, possibility theory and decomposable confidence measures on finite sets.
Comput. Artif. Intell., 5:403–416, 1986.
D. Dubois, H. Fargier, and H. Prade. Decision-making under ordinal preferences and uncertainty. In AAAI Spring Symposium on Qualitative Preferences in Deliberation and Practical Reasoning, pages 41–46, 1997.


D. Dubois, H. Fargier, and P. Perny. Qualitative decision theory with preference relations and comparative uncertainty: An axiomatic approach. Artif. Intel., 148:219–260, 2003.
D. Dubois, H. Fargier, H. Prade, and P. Perny. Qualitative decision theory: From Savage’s axioms to nonmonotonic reasoning. JACM, 49:455–495, 2002.
D. Dubois and H. Prade. Fuzzy sets and systems: theory and applications. Academic Press, New York, 1980.
D. Dubois, H. Prade, and R. Sabbadin. A possibilistic logic machinery for qualitative decision. In AAAI Spring Symposium on Qualitative Preferences in Deliberation and Practical Reasoning, pages 47–54, 1997.
D. Ellsberg. Risk, ambiguity, and the Savage axioms. Quart. J. Econ., 75:643–669, 1961.
P. Fishburn. The axioms of subjective probability. Statist. Sci., 1:335–358, 1986.
C. R. Fox. Strength of evidence, judged probability, and choice under uncertainty. Cognitive Psych., 38:167–189, 1999.
C. R. Fox and K. E. See. Belief and preference in decision under uncertainty. In D. Hardman and
L. Macchi, eds., Thinking: Psychological perspectives on reasoning, judgment and decision making, pages 273–314. Wiley, 2003.
M. Gelfond and V. Lifschitz. The stable model semantics for logic programming. In Proc. of 5th ILPS Conf., pages 1070–1080, 1988.
P. H. Giang and P. P. Shenoy. A comparison of axiomatic approaches to qualitative decision making
under possibility theory. In Proc. of 17th Conf. on Uncertainty in Artificial Intelligence UAI01, pages 162–170, 2001.
J. Y. Halpern. Defining relative likelihood in partially-ordered structures. J. of Artif. Intell. Res., 7:1–24, 1997.
D. Kahneman, P. Slovic, and A. Tversky. Judgement under uncertainty: Heuristics and biases. Cambridge University Press, 1982.
M. Kaplan and T. Fine. Joint orders in comparative probability. Annals of. Prob., 5:161–179, 1977.
G. J. Klir and T. A. Folger. Fuzzy sets, uncertainty, and information. Prentice-Hall, 1988.
D. Lehmann. Generalized qualitative probability: Savage revisited. In Proc. of 12th Conf. on Uncertainty in Artificial Intelligence UAI96, pages 381–388, 1996.
V. Lifschitz. Answer set planning. In D. De Schreye, ed., Proc. of ICLP’99, pages 23–37. The MIT Press, 1999.
W. Marek and M. Truszczyn´ski. Stable models and an alternative logic programming paradigm. In
The Logic Programming Paradigm: a 25-Year Perspective, pages 375–398. Springer, 1999.
H. T. Nguyen and E. A. Walker. A first course in fuzzy logic. CRC Press, 1997.
S. Parsons. Some qualitative approaches to applying the Dempster-Shafer theory. Inform. Decis. Tech., 19:321–337, 1994.
M. Pradhan, M. Henrion, G. Provan, B. del Favero, and K. Huang. The sensitivity of belief networks to imprecise probabilities: An experimental investigation. Artif. Intel., 85:363–397, 1996.
D. A. Redelmeier, D. J. Koehler, V. Liberman, and A. Tversky. Probability judgment in medicine: Discounting unspecified possibilities. Med. Decis. Mak., 15(3):227–230, 1995.
L. J. Savage. The foundations of statistics. Dover, 1972.
G. Shafer. A mathematical theory of evidence. Princeton University Press, 1976.
P. Simons. Extending and implementing the stable model semantics. PhD thesis, Helsinki University, Dept. of Computer Science and Engineering, July 2000. Report of Tech. Lab. for Computer Science, HUT-TCS-A58.
P. Suppes. The measurement of belief. J. R. Statist. Soc. B, 36, 1974.
T. Syrja¨nen. Lparse 1.0 user’s manual, 1999. Available at SModels’ site [48].
A. Tversky. Assessing Uncertainty. J. R. Statist. Soc. B, 36, 1974.

A. Tversky and I. Simonson. Context-dependent preferences. Manag. Sci., 39(10):1179–1189, 1993.
P. Walley. Statistical reasoning with imprecise probabilities. Chapman and Hall, 1991.
P. Walley. Measures of uncertainty in expert systems. Artif. Intel., 83:1–58, 1996.
P. Walley and T. Fine. Varieties of modal (classificatory) and comparative probability. Synthese, 41:321–374, 1979.
S. K. M. Wong, Y. Y. Yao, P. Bollmann, and H. C. Bu¨rger. Axiomatization of qualitative belief structure. IEEE Trans. Sys. Man. Cyber., 21:726–734, 1991.
Web sites of some ASP-solvers: DLV: www.dbai.tuwien.ac.at/proj/dlv , CModels: www.cs.utexas.edu/users/tag/cmodels ,
SModels: www.tcs.hut.fi/Software/smodels .
L. A. Zadeh. Fuzzy sets. Infor. and Control, 8:338–353, 1965.

Gentle introduction to uncertainty measures
In this appendix we briefly describe the various generalizations of Probability measures referred to in this paper. The following material is far from being an exhaustive and complete treatment. We give just a informal introduction to the subject. The interested reader can refer to the widely available literature. Introductory treatment of the relationships between Probability measures, Belief functions and Possibility measures, can be found in [29,33,45], to mention some among many.
We consider, as domain of interest, a set Ω of possibilities (Ω is often referred to as sample space). For our purposes it is sufficient to consider the case of a finite domain. An event is then defined as a subset of Ω. In order to introduce uncertainty measures, we consider any algebra A (on Ω), consisting of a set of subsets of Ω, such that Ω ∈ A, and closed under union and complementation.
All of the measures we are going to introduce are (normalized) monotone real-valued functions over an algebra. Such functions are usually called (Choquet ) Capacities [7], even if they are referred also as fuzzy measures or Sugeno measures.
Definition A.1 A real-valued function F on 2Ω is a Capacity if it holds that
F (φ)= 0,	F (Ω) = 1,	and for all A, B ⊆ Ω  A ⊆ B → F (A) ≤ F (B).
Let CAP (Ω) denotes the class of Capacities over Ω. The notion of Capacity is often considered to be too general to be of interest by itself. In fact, by adopting it, apart from monotonicity, there is no other relationship imposed between the uncertainty of a composed event, e.g. F (A ∪ B), and the uncertainty of its components F (A) and F (B). In order to reflect different rationales in managing the information, further constraints are imposed on the manner in which uncertainties of composed events are determined. In what
follows we describe some of the more interesting measures so obtained by refining Capacities.
The most adopted measure of uncertainty is characterized by the additivity property of combination of events: A Probability P over Ω is a Capacity which satisfies the following additivity requirement: For all A, B ⊆ Ω s.t. A ∩ B = φ it holds that P (A ∪ B) = P (A)+ P (B). The class of all Probabilities over Ω is denoted by PROB (Ω) and, clearly, PROB (Ω) ⊆ CAP (Ω).
Definition A.2 Let F1 and F2 be two functions on 2Ω. Then, F1 is the dual of F2 if for each A ⊆ Ω it holds that F1(A)= 1 − F2(Ω \ A).
Note that the dual of a Capacity is a Capacity too. Moreover, the dual of a Probability is the Probability itself.
Additivity, even being widely adopted in “measurement” processes, is usually thought to be a too strong requirement. Hence, several generalizations have been proposed. In particular, the following defini- tion characterizes those Capacities satisfying only one of the weak inequalities which, taken together, give additivity.
A natural way to weaken additivity is the following:
Definition A.3 An uncertainty measure f : AE → [0, 1] is said to be a 0-monotone (or super-additive) function iff ∀E1, E2 ∈E with E1 ∩ E2 = φ it holds that f (E1 ∪ E2) ≥ f (E1)+ f (E2).
The dual of a 0-monotone function is a 0-alternating function:
Definition A.4 An uncertainty measure g : AE → [0, 1] is said to be a 0-alternating (or sub-additive) function iff ∀E1, E2 ∈E with E1 ∩ E2 = φ it holds that g(E1 ∪ E2) ≤ g(E1)+ g(E2).
The class of 0-monotone (resp. 0-alternating) functions is denoted by 0MON (Ω) (resp. 0ALT (Ω)).
Let now introduce a pair of dual uncertainty measures that induce the slightly different notions of sub-additivity and super-additivity, respectively.
Definition A.5 Let Π and N be Capacities over Ω.
Π is a Possibility measure (over Ω) if it satisfies the following property: For all A, B ⊆ Ω Π(A ∪ B)= max {Π(A), Π(B)}.
N is a Necessity measure (over Ω) if it is the dual of a Possibility measure. It is immediate to verify that
any Possibility measure Π satisfies the sub-additivity property:
For all A, B ⊆ Ω Π(A ∪ B) ≤ Π(A)+ Π(B);
any Necessity measure N satisfies the super-additivity property:
For all A, B ⊆ Ω N (A ∪ B) ≥ N (A)+ N (B).
A Possibility measure Π is usually induced by a possibility distribution (i.e. a fuzzy set) π :Ω → [0, 1] (cf., [18,49]). The value π(x) expresses the possibility of a singleton x ∈ Ω to be representative of the concept being considered. Possibility is then defined by putting Π(A)= max{π(x) | x ∈ A} for any A ⊆ Ω. The classes of Possibilities and Necessities over Ω are denoted by POS (Ω) and NEC (Ω), respectively.
Our last definition regards Belief and Plausibility measures. By adopting the most general formulation, following [38], we have:

Definition A.6 A function Bel : 2Ω → [0, 1] is a Belief measure if it is a Capacity and it satisfies the following condition (known as ∞-monotonicity ).

For each n ≥ 1, Bel“ Sn
Ai” ≥ Pφ/=I⊆{1,...,n}
(−1)|I|+1Bel“ T

i∈I
Ai”

(where Ai ⊆ Ω for each i).
Intuitively speaking, a Belief function Bel is usually constructed through a basic assignment of un- certainty, not necessarily being a Capacity, μ : 2Ω → [0, 1] so that, for any proposition A ⊆ Ω, Bel(A) = 
B⊆A μ(B). Belief functions are also called Capacities monotone of infinite order. Capacities which sat-
isfy the above condition with the restriction n ≤ N are then said monotone of order N (or N -monotone). Dually, if the opposite inequality (≤) is considered, the measure is said to be an N-alternating Capacity. For N = 2 these properties reduce to usual super- and sub-additivity, respectively. The dual of a Belief mea- sure is called Plausibility measure. The class of Belief (resp. Plausibility ) measures is denoted by BEL(Ω) (resp. PL(Ω)).
The classes of Capacities seen so far are so related:
CAP (Ω) ⊃ 0MON (Ω) ⊃ BEL(Ω) ⊃ NEC (Ω) CAP (Ω) ⊃ 0ALT (Ω) ⊃ PL(Ω) ⊃ POS (Ω) BEL(Ω) ∩ PL(Ω) ⊃ PROB (Ω).

Answer set programming
Let us briefly recall the basics of an emerging alternative style of logic programming [31,32], known as Answer Set Programming (ASP, for short). In this logical framework, a problem can be encoded—by using a function-free logic language—as a set of properties and constraints which describe the (candidate) solutions. More specifically, an ASP-program is a collection of rules of the form
L1; .. . ; Lk; not Lk+1; .. . ; not LÆ ← LÆ+1,.. ., Lm, not Lm+1, ... , not Ln
where n ≥ m ≥ l ≥ k ≥ 0 and each Li is a literal, i.e., an atom A or a negation of an atom ¬A. The symbol ¬ denotes classical negation, while not stands for negation-as-failure (Notice that ',' and ';' stand for logical conjunction and disjunction, respectively.) The left-hand side and the right-hand side of the clause are said head and body, respectively. A rule with empty head is a constraint. (The literals in the body of a constraint cannot be all true, otherwise they would imply falsity.)
Semantics of ASP is expressed in terms of answer sets (or equivalently stable models, cf. [24]). Consider first the case of an ASP-program P which does not involve negation-as-failure (i.e., l = k and n = m). In this case, a set X of literals is said to be closed under P if for each rule in P , whenever {LÆ+1, ... , Lm}⊆ X, it holds that {L1,. .. , Lk}∩ X /= ∅. If X is inclusion-minimal among the sets closed under P , then it is said to be an answer set for P . Such a definition is extended to any program P containing negation-as-failure
by considering the reduct PX (of P ). PX is defined as the set of rules of the form
L1; ... ; Lk ← LÆ+1,. .. , Lm
for all rules of P such that X contains all the literals Lk+1,.. ., LÆ, but does not contain any of the literals
Lm+1,. .., Ln. Clearly, PX does not involve negation-as-failure. The set X is an answer set for P if it is an answer set for PX .
Once a problem is described as an ASP-program P , its solutions (if any) are represented by the answer sets of P . Notice that an ASP-program may have none, one, or several answer sets.
Let us consider the program P consisting of the two rules p; q ← and ¬r ← p. Such a program has two answer sets: {p, ¬r} and {q}. If we add the rule (actually, a constraint) ← q to P , then we rule- out the second of these answer sets, because it violates the new constraint. This simple example reveals the core of the usual approach followed in formalizing/solving a problem with ASP. Intuitively speaking, the programmer adopts a “generate-and-test” strategy: first (s)he provides a set of rules describing the collection of (all) potential solutions. Then, the addition of a group of constraints rules-out all those answer sets that are not desired real solutions. Expressive power of ASP, as well as, its computational complexity have been deeply investigated. The interested reader can refer to [9], among others.
To find the solutions of an ASP-program, an ASP-solver is used. Several solvers have became available (cf. [48], for instance), each of them being characterized by its own prominent valuable features.
Let us give a simple example of ASP-program. (see [1,13], among others, for a presentation of ASP as a tool for declarative problem-solving). In doing this, we will recall the syntax and the main features of lparse/smodels (one of the available ASP-solvers which we exploited in this paper, see [41] for a more details). The problem we want to formalize in ASP is the well-known n-queens problem: “Given a n × n chess board, place n queens in such a way that no two of them attack each other”. The two clauses below state that a candidate solution is any disposition of the queens, provided that each column of the board contains one and only one queen. (The fact that a queen is placed on the nth column and on the mth row
is encoded by the atom queen(n,m).) 10
pos(1..n).	1{queen(Col,Row) : pos(Col)}1 :- pos(Row).
The second rule is a particular form of constraint available in lparse’ language. The general form of such a kind of clauses is
k{⟨property def ⟩:⟨range def ⟩}m :-⟨search space⟩

10 In the syntax of lparse ‘:-’ denotes implication ←. The value of the constant n occurring in the first clause is a parameter of the program supplied to lparse at run-time.


where: the conditions ⟨search space⟩ in the body define the set of objects of the domain to be checked; the atom ⟨property def ⟩ in the head defines the property to be checked; the conjunction ⟨range def ⟩ defines the possible values that the property may take on the objects defined in the body, namely by providing a conjunction of unary predicates each of them defining a range for one of the variables that occur in
⟨property def ⟩ but not in ⟨search space⟩; k and m are the minimum and maximum number of distinct
values that the specified property may take on the specified objects. (Notice that this form of constraint, available in smodels, actually is syntactic sugar, since it can be translated into “proper” ASP-clauses thanks to negation, cf. [39,41].)
We now introduce two constraints, in order to rule out those placements where two queens control either the same row or the same diagonal of the board: 11
:- queen(C,R1), queen(C,R2), pos(C;R1;R2), R1<R2.
:- queen(C1,R1), queen(C2,R2), pos(C1;C2;R1;R2), R1<R2, abs(C1-C2)==abs(R1-R2).
Here is two of the answer sets produced by smodels, when fed with our program (in this case we put
n= 8):
Answer 1. queen(4,1) queen(6,2) queen(1,3) queen(5,4) queen(2,5) queen(8,6) queen(3,7) queen(7,8) ...
Answer 2. queen(4,1) queen(2,2) queen(8,3) queen(5,4) queen(7,5) queen(1,6) queen(3,7) queen(6,8) ...



























11 Here pos(C;R1;R2) is a shorthand notation for the three facts pos(C), pos(R1), pos(R2).
