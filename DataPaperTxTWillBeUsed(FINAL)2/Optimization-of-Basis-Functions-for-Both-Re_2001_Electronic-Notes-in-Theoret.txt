Electronic Notes in Theoretical Computer Science 46 (2001)
URL: http://www.elsevier.nl/locate/entcs/volume46.html 17 pages


Optimization of Basis Functions for Both Reconstruction and Visualization

Edgar Gardun˜o a,1,3 and Gabor T. Herman b,2,4
a Department of Bioengineering University of Pennsylvania Philadelphia, USA
b Center for Computer Science and Applied Mathematics Temple University
Philadelphia, USA



Abstract
Algebraic Reconstruction Techniques (ART ) for the reconstruction of distributions from projections have yielded improvements in diverse fields such as medical imag- ing and electron microscopy. An important property of these methods is that they allow the use of various basis functions. Recently spherically symmetric functions (blobs) have been introduced as efficacious basis functions for reconstruction. How- ever, basis functions whose parameters were found to be appropriate for use in reconstruction are not necessarily good for visualization. We propose a method of selecting blob parameters for both reconstruction and visualization.



Reconstruction from Projections
It is often desirable to acquire knowledge of the interior of an object or a body. Unfortunately in most cases it is difficult, or impossible, to directly observe the interior of objects. However,it is possible to get information regarding the structure inside an object from measurements resulting from the interaction of the object with some type of energy.
In this article the measurements are considered to be line integrals (of some spatially-varying physical parameter, related to the local interactions of the object with the energy) through the object from the source to the detector.

1 Supported by a Grant from Consejo Nacional de Ciencia y Tecnolog´ıa, M´exico
2 Supported by NIH Grant HL28438 and NSF Grant DMS96122077
3 Email:edgargar@seas.upenn.edu
4 Email:gaborherman@netscape.net
©2001 Published by Elsevier Science B. V. Open access under CC BY-NC-ND license.


In practice, a large number of measurements along different lines with differ- ent orientations around the object are taken. The aim is to reconstruct the distribution of the spatially-varying physical parameter from the measured data.
In general there are two families of techniques for reconstruction (recon- struction algorithms): transform and series expansion methods [8]. In this article we are interested in the latter and, particularly, in the so-called al- gebraic reconstruction techniques (ART ) because these have proved to be efficacious methods for a number of reconstruction tasks [8,9,11,14,15,17].
In these methods,it is assumed that an approximation of the distribution υ to be reconstructed can be given by a linear combination of known basis functions; that is,as

(1)
J
υ(r, φ1, φ2) ≈	cjbj(r, φ1, φ2),
j=1

where (r, φ1, φ2) are spherical coordinates, {cj}, j = 1...J , is the set of coef- ficients that has to be determined by the reconstruction algorithm, and	bj is the set of known basis functions. The choice of the set of basis functions bj	greatly influences the result of the reconstruction algorithm [12,13,19]. The basis functions most commonly used are those which have a unit value inside a cubic volume and zero outside (known as cubic voxels). However, the approximations resulting from using cubic voxels are piecewise constant functions that have undesirable artificial sharp edges; it appears to be more appropriate to use functions with a smooth transition from one to zero.
In the field of reconstruction from projections Lewitt [12,13] and Matej [19] have proposed the use of basis functions,called blobs,with spherical symmetry and a smooth transition from one to zero. Blobs are a generalization of a well- known class of window functions in digital signal processing called Kaiser- Bessel [12]. The general form of a single blob is:
 Im  α  1 −  r 2	  m

(2)
b(m, α, a; r)= 

a
Im(α)
r  2
1	a	,	if 0 ≤ r ≤ a,

0,	otherwise,
where r is the radial distance from the blob center, Im denotes the modified Bessel function of order m, a is the radius of the blob and α is a parameter controlling the blob shape. The three parameters m (a non-negative integer), a and α (non-negative real numbers) control the smoothness and shape of a blob and influence the results yielded by the reconstruction algorithm; therefore, the appropriate selection of them is highly important. In this paper we set m equal to 2,which makes the blobs to be twice differentiable.
Two justifications, besides the smooth transition from one to zero in a compact region of space, for the selection of blobs as basis functions are that there is a closed analytical formula for the three-dimensional Fourier transform



Fig. 1. The Fourier transform of a blob. We plot log ˆb(2.40,13.36,2;R)  as a function
of the frequency R.
of any blob defined by (2) (in case m = 2, it is the spherically symmetric function determined by
 I 7  √α2 − (2πaR)2 
 


(3)
b(2, α, a; R)= 
I2(α)
 J 7  √(2πaR)2 − α2 



2
 √(2πaR)2 − α2
7  , if 2πaR	α,
2

where J is the Bessel function), and that blobs are practically bandlimited
ˆb(2.40,13.36,2;R)
ˆb(2.40,13.36,2;0)
function of the frequency R. It is clear from this figure that ˆb (2.40, 13.36, 2; R) is less than a tenthousandth of its peak value if R  1 and it is less than a millionth of its peak value if R  2. For evidence that the use of blobs in series expansion methods produces superior results than those produced by transform methods, see [10,11,14,17].
The individual blob functions bj of (1) are shifted versions of the blob b defined in (2). We refer to the set of points pj to which the centers of the blobs are shifted in such a blob representation as a grid.
Incidentally, the linear combination of blob-like basis functions approach has also been proposed as a way to model three-dimensional objects in the computer graphics field [3,5,21]. Some examples of basis functions with smooth transition from their maximum to zero are the Gaussian function,used in [3], and multiscale wavelets,used in [21,22].
Blob Parameters and Grids
The choice of the spatial arrangement of the set of points pj is important for the quality of the final reconstruction. Three grids are of particular interest:



	 

(b)	(c)

Fig. 2. Points in the simple cubic (a), body-centered cubic (b), and face-centered cubic (c) grids in a 2  2  2 portion of space (assuming δsc = δbcc = δfcc = 1). The rest of the points can be obtained by filling in space by the most natural repetition of the indicated 2 × 2 × 2 portion.
The simple cubic grid (sc) is defined by

(4)
Gδsc = {(δscx1, δscx2, δscx3) | x1, x2, x3 ∈ Z} ,
where Z is the set of integers and δsc is a positive real number (the sampling distance).

The body-centered cubic grid (bcc) is defined by
(5)	Bδbcc = {(δbccx1, δbccx2, δbccx3)| x1, x2, x3 ∈ Z and x1 ≡ x2 ≡ x3 (mod 2)}, where δbcc is a positive real number.
The face-centered cubic grid (fcc) is defined by

(6)
Fδfcc = {(δfccx1, δfccx2, δfccx3) | x1, x2, x3 ∈ Z and
x1 + x2 + x3 ≡ 0 (mod 2)}, where δfcc is a positive real number.

In order to visualize these grids,we can use a small portion of them and take
advantage of their periodic repetition,see Fig.2.
To accommodate our discussion of parameter optimization, it is useful to

introduce some additional notation. Let IIIG , IIIB
, and IIIF
denote the

δsc
δbcc
δfcc

(generalized) functions that one obtains by placing (unit-strength) impulses
[4] at the grid points of Gδsc , Bδbcc ,and Fδfcc defined in equations (4),(5),and (6),respectively. It is easy to verify that
(7)	F IIIG  =	IIIG


and
δsc
  
δsc

(8)
F IIIB
 =	IIIF	,

where F denotes the three-dimensional Fourier transform.

The interest in the grids defined above is that the simple cubic grid is the most used and is the easiest to implement in current computers. It has been shown in [20,23] that the bcc grid is the most “efficient” sampling in three- dimensional Euclidean space when a function is bandlimited with a spectrum that is radially symmetric. To illuminate this statement,we consider a distri- bution υ whose Fourier transform υˆ has the property that υˆ (R, Φ1, Φ2)= 0, if R  0.5 (i.e., the bandwidth of υ is 1). Sampling υ at points of G1 (which is the same as multiplying by IIIG) results in a Fourier transform which is the convolution of υˆ with IIIG; see (7). Due to the assumed property of υˆ, this Fourier transform coincides with the Fourier transform of υ within a sphere of radius 0.5 centered at the origin (see Fig.2(a)),and so υ can be unambigu- ously recovered from the samples. However, the same cannot be guaranteed if sampling is done at points of Gδsc with δsc > 1, because of the resulting overlap of the repeated spheres of radius 0.5 in the Fourier transform of the sampled function (aliasing). On the other hand,sampling υ at points of Bδbcc results in the spheres repeating with their centers at the grid points F   1  ; see
2δbcc

(8). As can be seen from Fig.2(c),to avoid aliasing we may set δbcc to
1 (or
2

anything less). The number of points needed to cover a fixed portion of space

is lower when the points come from B 1 
2
than when they come from G1. This

is the sense in which the bcc grid is more efficient than the sc grid. The fcc
grid is more efficient than the simple cubic grid but is less efficient than the bcc grid. Interestingly the bcc and the fcc grids are reciprocals of each other in real space and Fourier space,as expressed in (8).
For reconstruction purposes, Matej and Lewitt [18] demonstrated that whenever a linear combination of blobs is employed to obtain an approxi- mation of υ,the grid used should be different from the simple cubic grid,and that the bcc grid is the most desirable. Therefore,we will consider the bcc grid for the set {pj where the centers of the blobs bj should be located; i.e.,the set is obtained by the intersection of some finite convex region of space with the Bδbcc of (5).
Having decided that we use m = 2 and the bcc grid, there are three pa- rameters to be chosen: α, a, and δbcc. Clearly, to be able to approximate arbitrary distributions using (1), the value of δbcc should be small. However, in a fixed volume of space, the number of grid points (and consequently the
cost of our reconstruction algorithm) is proportional to  1  and so practical
bcc
considerations do not allow us to choose δbcc very small. The cost of recon-
struction (in our implementation using footprints [13,19]) is also proportional to a2,we soon report on the influence of the size of a on reconstruction qual- ity. In our implementation, computational cost does not depend on α, and so this parameter may be chosen purely based on the quality of the resulting reconstructions.
One reasonable criterion for choosing our parameters is that a linear com- bination of blobs with cj = 1, for 1 ≤ j ≤ J , should be an approximation


δbcc calculated by (9)	δbcc = √1

(a)	(b)
Fig. 3. The root mean square (rms) error between a constant-valued function and its approximation by a linear combination of blobs using several values α and a

with (a) δbcc computed using (9) and (b) δbcc =
1 . The heavy line indicates the
2

locus of points where both these conditions are satisfied.
of a constant valued function. In such a case, the right hand side of (1) is a

convolution of the blob b in (2) with a truncated version of IIIB
, and so its

Fourier transform is approximately  ˆb  IIIF
. For this to best approximate

3
bcc
 1  2δbcc

the Fourier transform of a constant-valued function (which is an impulse at
the origin) it is useful to select b in such a way that ˆb (2, α, a; R) is zero-valued
  1 

at the locations of F   1 
2δbcc
which have the smallest
2δbcc positive distance from

the origin; i.e., at the distance R =
1
2δbcc
. Since I 7
2
is not zero-valued and

the smallest positive x for which J 7 (x) = 0 is x = 6.987932, it follows from
2
(3) and the discussion in this paragraph that, for any a and α, a reasonable
choice is

(9)
πa√2
δbcc = √α2 + 6.9879322 .
Following this approach we reduce the number of unknowns from three

to just two, i.e., a and α. In Fig.3 we report on some experiments based on those proposed in [19]. The plots represent the level sets (with indicated values) of the root mean square (rms) error between an appropriate constant and the right hand side of (1) (with {cj} = 1 for j = 1 ...J ) sampled at an appropriate subset of G1 for various choices of the blob parameters. Since we have three parameters a, α and δbcc (recall that m = 2), the level sets are surfaces in the three-dimensional space; in Fig.3 we show the intersection of these level sets with two surfaces: in (a) δbcc is calculated using (9) and in (b)

δbcc is set to
√1 . (Note that δbcc has the dimensionality of length,but so does

a and the drawings would not change if both δbcc and a were multiplied by the same constant, representing a change in the unit of length.) In both (a)

and (b) we indicate the locus of points for which (9) is satisfied and δbcc = √1 , this is the curve where the surfaces (a) and (b) intersect. As can be seen from

Fig.3(b) if we fix δbcc at
1 , then for any fixed value of the radius a the α
2

determined by (9) provides a low rms error. The rms error for this fixed δbcc
can be further decreased by using a higher value a,but this is at the expense of increased computational cost. Also this study ignores resolution, which is another important criterion. There is no particular reason to believe (and, in fact, one is likely to suspect the contrary) that the parameters which are good for representing very smooth objects will also results in reconstructions of high resolution. We return to this issue below.

Implicit Surfaces and Visualization
In computer graphics implicit surfaces have been used to represent objects of different topologies and geometries. An implicit surface S is mathematically defined as
(10)	S = {(r, φ1, φ2)| υ(r, φ1, φ2)= t}.
In many areas of science, (10) is used to visualize a reconstructed distri- bution described by (1). The assumption is that there is a fixed threshold t such that the object of interest consists of exactly those points at which the value of the distribution υ is greater than the threshold. If the total volume of the object of interest is known (as is the case in some applications, such as electron microscopy),then t is uniquely determined by the criterion that S should enclose exactly the known volume. For computerized visualization of the object of interest it is then sufficient to display its surface S, as defined by (10).
A suitable method to visualize the surface in (10) is raycasting. In one of its forms this technique consists of casting a finite number of rays perpendicular to a plane, typically the computer screen, towards S; this form of raycasting produces an orthogonal projection onto the plane. In order to produce a foreshortening effect in the final image (the farther the objects, the smaller they appear in it) it is possible to use a perspective projection in which all the rays cast from the plane intersect in a point called the center of projection [5,25]. Because we work with objects in which foreshortening is not important, we present images with orthogonal projection only.
For every ray we need to find the point q in S nearest to the plane and compute its distance and the normal to S at q (these are used to assign an intensity value on the computer screen [5,25]). In practice, finding the points q is computationally expensive. In general there is no prior estimate of how far q is from the plane. Based on an approach in [3], we designed the following methodology. We first do a preprocessing of the set {pj at the end of which, for every point on the plane from which we need to cast a ray, we have the list of those grid points (arranged in order of increasing

distance from the plane) whose associated coefficients can possibly influence the value of the distribution υ anywhere along the ray. (These grid points all lie within a cylinder of radius a whose central axis is the ray in question.) This preprocessing is easily done by identifying on the plane the shadows of the blobs centered at the grid points, one-by-one in an appropriate order. In locating q for a particular ray, we make use of the associated list of grid points. For all grid points in the list (recall that these are arranged in order of increasing distance from the plane), we evaluate υ at the projection of the grid point onto the ray (for this we need the blob coefficients for only a few grid points, all of which are at a similar position in the list), until we find (if ever) two consecutive projections qa and qb such that the value of υ is below the threshold at qa and is above it at qb. Then q is located by a binary search between qa and qb (for this we need the coefficients of only those blobs which were used for calculating υ at qa and at qb).
Assuming that the approximation in (1) is exact, we know that υ is a continuous function and that the gradient of υ,at any point,is given by
J

(11)
∇υ(r, φ1, φ2)=	cj∇bj(r, φ1, φ2).
j=1

The set {cj} is produced by the reconstruction algorithm and we have closed formulas to compute bj [12]. The representation obtained by (10) and ray- casting is therefore an accurate representation of the object of interest,limited only by the reconstruction and thresholding processes.

Selection of Blobs for Visualization
The principles described in Sections 1 and 2 have been applied in the field of Structural Analysis of Proteins by Transmission Electron Microscopy [2,14,15,16,24]. In particular, the authors of [2] obtained a set of coefficients
{cj} by applying ART to a set of projection images originating from a pro- tein (the macromolecular complex DnaB·DnaC) imaged by a transmission electron microscope, using parameters α, a and δbcc satisfying (9). When we used the resulting set cj to produce a visual representation of the surface of the macromolecular complex DnaB DnaC by the raycasting method explained above,we found,to our surprise,that the surface representation had artifacts that were not observable in the slice-by-slice presentation of the reconstructed distribution, see Fig.4. Clearly, the parameters which were considered ”opti- mal” for reconstruction are not particularly good for visualization.
Just as the approach of approximating functions by linear combinations of blobs, the representation of surfaces using linear combinations of blobs requires finding a “good” set of parameters for the blobs and for the grid of blob centers. In Fig.5 we illustrate the enormous influence of the values of a and α on the appearance of the resulting surface.
In order to study further the effect of blob parameters for visualization,


	

(a)	(b)

Fig. 4. (a) Surface representation of the macromolecular complex DnaB·DnaC with
blob parameters a = 1.25, α = 3.60 with grid separation δbcc = √1 [2]. (b) A central
slice from the reconstruction by ART of the macromolecular complex DnaB DnaC with the same parameters as for (a).
we used an approach similar to that in Section 2,but now we aimed at mini- mizing the error between a surface and its approximation,as measured by the difference between the surface normals. For this test we selected a distribution υs with a constant value 1 inside a sphere and 0 outside. We then simulated the random conical tilt scheme of data collection (a common scheme in elec- tron microscopy [6]) to generate the projections from υs. The projections were

(a)	(b)	(c)

Fig. 5. In all cases the distribution υ is defined by (1) using the grid B √1  with blob
coefficient 1 at the points (0 0 0), (√2 0 0) and (0 √2	2
all other points. The displayed surfaces are defined by (10) with t = 0.5. The values of a and α satisfy (9) in all cases; they are (a) 1.25 and 3.60 (same as for Fig.4(a)),
(b) 2.40 and 13.36 and (c) 3.20 and 18.85. (Throughout this paper we report on a and α to an accuracy of 0.01, however the values actually used by our programs were always calculated so that (9) is satisfied to the accuracy of our computations.)



		

(a)	(b)	(c)

Fig. 6. Visualizations of the implicit surface (t = 0.5) of reconstructions of a sphere. For the choices of the parameters in cases (a), (b) and (c), see the caption of Fig.5.

utilized to create reconstructions using ART with different values for α, a and δbcc. For each set	cj	produced by a reconstruction algorithm, raycasting was used to create a visualization of the implicit surface of the reconstructed sphere at threshold 0.5 (Three of the resulting surface displays, for the same choices of parameters as were made for Fig.5 are shown in Fig.6). For every ray we computed the angle between the normal to the true spherical surface and the normal to the implicit surface in the reconstructed distribution. We define the rms error to be the norm of the vector whose components are these angles (for all display points for which the casted ray crosses both surfaces).
The results are displayed in Fig.7 in a manner similar to the displays in
δbcc calculated by (9)	δbcc = √1

(a)	(b)
Fig. 7. (a) The rms error between analytic normals and normals to the implicit surface varying a, α and using (9) to compute the distance δbcc. (b) The rms error between analytic normals and normals to the implicit surface varying a, α and using a fixed δbcc = √1 .


		


Fig. 8. Profiles of blobs for different values of a and α matching those in Figs.5 and
6. The broken line is at r = 3 , which is the distance of a point in B 1  to the
2	√2
point nearest to it (see Fig.2(c)).

Fig.3. Just as in the case of Fig.3,we can see from Fig.6 that this kind of rms

error can also be reduced by increasing a (keeping δbcc =
1 and calculating
2

α so that (9) is satisfied). However, as we have already pointed out, this will
not only increase cost,but will also cause a loss of resolution. We can observe this loss of resolution in Fig.5. Also, in Fig.6(c) the implicit surface with the highest a is too big. In Fig.8 we plot the profiles of the three blob types used in Figs.5 and 6 and indicate for each the contribution that a blob centered

at a point of B 1 
2
nearest grid point.
makes to the value of the estimate of υ, using (1), at the

To find a compromise between these two conflicting aims (high a is desired for reducing the rms error plotted in Figs.3 and 7, but low a is desired to reduce cost and to improve resolution), we propose the following criterion: a should be chosen as small as possible consistent with achieving that if two


(a)	(b)	(c)

Fig. 9. Representations of the implicit surface at level t = 0.5 for the combination
of two blobs whose centers are immediate neighbors in the bcc grid B 1  and whose
2
coefficients are 1. The parameters of the blobs match those in Figs.5, 6, and 8.



	

(a)	(b)
Fig. 10. Detail of Fig.3 showing the position of the set of parameters a = 2.40,

α = 13.36 and δbcc = √1
indicated by the arrow.



	

(a)	(b)
Fig. 11. Detail of Fig.7 showing the position of the set of parameters a = 2.40,

α = 13.36 and δbcc = √1
indicated by the arrow.



blobs at nearest grid points in the bcc grid B 1 
2
are given coefficients 1 with

all other blobs given coefficients 0, then the implicit surface thresholded at
t = 0.5 should enclose a convex set. Such implicit surfaces (for the values of
a also used in Figs.5, 6, and 8 and with α determined by (9), assuming that

δbcc =
√1 ) are shown in Fig.9. Fixing δbcc to be
1 and using an α which is
2

determined by (9),we find that the smallest a which satisfies our new criterion
is 2.40 (this corresponds to (b) in Figs.5,6,8 and 9). The corresponding α is
13.36 and the location of this (a, α) pair is indicated by arrows in Figs.3 and 7 (and in greater detail in Figs.10 and 11).
We illustrate the performance of this choice of the parameters used in con- junction with the electron microscopic data from the macromolecular com- plex DnaB·DnaC. The resulting implicit surface is shown in Fig.12(b); it is

a great improvement over the previously shown surface of Fig.4(a), which is reproduced here as Fig.12(a). It is also worth noting that it is just about impossible to anticipate the radical differences between the surface displays in Fig.12 from the traditional slice-by-slice presentation of the reconstructed distributions,see Fig.13.
Comparison with Explicit Surface Visualization
While the implementation of raycasting to visualize implicit surfaces is straight- forward,such visualization is usually computationally demanding and slow be- cause of the constant search for the intersecting points q. Polygon-projection methods are an alternative because of their fast performance. These meth- ods explicitly approximate a surface by a collection of polygons [5,7,25]. Here we compare the performance of the raycasting method described in Section 3 with that the polygon-projection method implemented in the visualization software OpenDX— [1].
In order to apply OpenDX— to our reconstructions,we first need to evalu- ate the values at points of a simple cubic grid. For reasons already explained

in Section 2,if B 1 
2
was used for reconstruction,it is appropriate to estimate

the reconstructed values, using (1), at points of G1. Just like the raycasting
method, the polygon projection method of OpenDX— requires the specifica- tion of a threshold, based on which it automatically calculates the polygons which form the explicit surface to be displayed.
We applied this approach to the reconstructions of the macromolecular complex DnaB·DnaC whose central slices are reported in Fig.13. (By the way, these slices are displays of the estimated values at points of G1.) The calculation of the values at points of G1 took 3 min 18 s for the blobs with a = 1.25 and α = 3.60 and 3 min 50 s for the blobs with a = 2.40 and α = 13.36. (All times are for a Pentium III—based computer, 700 MHz, 394 Mbytes of RAM, under Linux©.) In both cases, the computation of the explicit surface took 5 sec. The display of the surface, once computed, is essentially instantaneous. These times are much better than what is needed for raycasting at the same resolution (512 512 pixels): 13 min 19 s for the blobs with a = 1.25 and α = 3.60 and 1 h 35 min 50 s for the blobs with a = 2.40 and α = 13.36. However,the reconstruction times (the calculation of the {cj by ART) are 32 h 15 min 36 s and 65 h 22 min 48 s,respectively,in these two cases and the time need for specimen preparation and the collection of electron microscopic data is measured in weeks. Hence the quality of the visualizations may very well be considered more important than the computer time needed to produce them.
The results produced by the polygon-projection method in OpenDX— are presented in Fig.14. All parameters (for the blobs,the grid,the threshold,the assumed orientation of the surface,etc.) were selected to be the same as those in the corresponding displays in Fig.12. With the computer graphic display


	

(a)	(b)

Fig. 12. Representation of the implicit surface for the macromolecular complex DnaB·DnaC. The reconstructions using ART and visual representations of the DnaB·DnaC were created with (a) parameters δbcc = √1 , a = 1.25 and α = 3.60 as
used in [2], and (b) parameters δbcc = √1 , a = 2.40 and α = 13.36.



(a)	(b)

Fig. 13.	Central section of the reconstructions of the macromolecular complex DnaB·DnaC by ART with (a) blob parameters a = 1.25, α = 3.60 and with grid

separation δbcc =
1 , and (b) blob parameters a = 2.40, α = 13.36 and grid
2

separation δbcc = √1 .

methodology embedded in OpenDX—, the explicit surface displays of Fig.14 appear to be smoother than the implicit surface displays of Fig.12, which is an advantage in case (a),but seems to be a disadvantage in case (b),which is the case that uses the blob parameters recommended by us in Section 4.
As stated at the end of Section 3, the accuracy of the visualization using raycasting is limited only by the quality of the reconstruction (the {cj}) and


 
(a)	(b)

Fig. 14. Representation of the implicit surface for the reconstruction of the macro- molecular complex DnaB·DnaC using OpenDX with a 128 × 128 × 128 voxelized distribution. Parameters used for reconstruction were: (a) δbcc = √1 , a = 1.25 and
α = 3.60 and (b) δbcc = √1 , a = 2.40 and α = 13.36. It is clear that for this example the general visualization software hides some important details; for a comparison with the corresponding output of the raycasting method, see Fig.12.
the accuracy of the threshold. The polygon-projection methods bring an addi- tional source of inaccuracy into the process: the approximation of the implicit surface by a collection of polygons. Thus, if the reconstruction parameters and the threshold have been well chosen, we can expect that raycasting will be the more reliable visualization tool. Whether or not this is worth the very considerable additional computing time (and the consequent loss of capability of real-time interactive examination of the resulting surfaces) is highly depen- dent on the application; it is impossible to know ahead of time whether or not the more reliable visualization will lead to increased scientific knowledge.
Acknowledgement
We thank Samuel Matej, Robert Lewitt, and Carlos Oscar Sa´nchez Sorzano for helpful advice regarding this manuscript. We appreciate the assistance of Montserrat B´arcena in providing us with data and information regarding the macromolecular complex DnaB·DnaC.

References
G. D. Abram and L. Treinish. An extended data flow architecture for data analysis and visualization. In Proceedings of the IEEE Computer Society Visualization ’95, pages 263–269. IEEE Computer Society, October 1995.
M. B´arcena, T. Ruiz, L. E. Donate, S. E. Brown, N. E. Dixon, M. Radermacher,


and J. M. Carazo.  The DnaB DnaC complex: A structure based on dimers assembled around an occluded channel. European Molecular Biology Organization Journal, 20:1462–1468, 2001.
J. F. Blinn. A generalization of algebraic surface drawing. ACM Transactions on Graphics, 1:235–256, 1982.
R. N. Bracewell. Two-Dimensional Imaging. Prentice-Hall, Inc., Englewood Cliffs, New Jersey, 1995.
J. D. Foley, A. V. Dam, S. K. Feiner, and J. F. Hughes. Computer Graphics: Principles and Practice. Addison-Wesley Co., New York, 2nd edition, 1996.
J. Frank. Three-Dimensional Electron Microscopy of Macromolecular Assemblies. Academic Press, New York, 1st edition, 1995.
E. Galin and S. Akkouche.  Incremental polygonization of implicit surfaces.
Graphical Models, 69:19–39, 2000.
G. T. Herman. Image Reconstruction from Projections: The Fundamentals of Computerized Tomography. New York, Academic Press, 1980.
G. T. Herman.  Algebraic reconstruction techniques in medical imaging.  In
C. T. Leondes, editor, Medical Imaging, Systems Techniques and Applications
- Computational Techniques, volume 6 of Gordon and Breach International Series in Engineering, Technology and Applied Science, pages 1–42. Gordon and Breach Science Publishers, Amsterdam, 1997.
F. Jacobs, S. Matej, R. M. Lewitt, and I. Lemahieu. A comparative study of 2D reconstruction algorithms using pixels and optimized blobs applied to Fourier rebinned 3D data. In Proceedings of the 1999 International Meeting on Fully Three-Dimensional Image Reconstruction in Radiology and Nuclear Medicine, pages 43–46. Egmond aan Zee, The Netherlands, 1999.
P. E. Kinahan, S. Matej, J. S. Karp, G. T. Herman, and R. M. Lewitt. A comparison of transform and iterative techniques for a volume-imaging PET scanner with a large acceptance angle. IEEE Transactions on Nuclear Science, 42:2281–2287, 1995.
R. M. Lewitt. Multidimensional digital image representations using generalized Kaiser–Bessel window functions. Journal of the Optical Society of America, Optics and Image Science, 7:1834–1846, 1990.
R. M. Lewitt. Alternatives to voxels for image representation in iterative reconstruction algorithms. Physics in Medicine and Biology, 37:705–716, 1992.
R. Marabini, G. T. Herman, and J. M. Carazo. 3D reconstruction in electron microscopy using ART with smooth spherically symmetric volume elements (blobs). Ultramicroscopy, 72:53–65, 1997.
R. Marabini, E. Rietzel, R. Schro¨eder, G. T. Herman, and J. M. Carazo. Three-dimensional reconstruction from reduced sets of very noisy images


acquired following a single-axis tilt schema: Application of a new three- dimensional reconstruction algorithm and objective comparison with weighted backprojection. Journal of Structural Biology, 120:363–371, 1997.
R. Marabini, M. C. San Martin, and J. M. Carazo. Electron tomography of biological specimens. In R. J. L. Coatrieux, editor, Contemporary Perspectives in Three-Dimensional Biomedical Imaging. IOS Press, 1997.
S. Matej, G. T. Herman, T. K. Narayan, S. S. Furuie, R. M. Lewitt, and P. E. Kinahan. Evaluation of task-oriented performance of several fully 3D PET reconstruction algorithms. Physics in Medicine and Biology, 39:355–367, 1994.
S. Matej and R. M. Lewitt. Efficient 3D grids for image-reconstruction using spherically-symmetrical volume elements. IEEE Transactions on Nuclear Science, 42:1361–1370, 1996.
S. Matej and R. M. Lewitt. Practical considerations for 3-D image reconstruction using spherically symmetric volume elements. IEEE Transactions on Medical Imaging, 15:68–78, 1996.
H. Miyakawa. Sampling theorem of stationary stochastic variables in multi- dimensional space. J. Inst. Elec. Commun. Engrs. (Japan), 42:421–427, 1959.
S. Muraki. Volumetric shape description of range data using ”Blobby Model”.
Computer Graphics, 25:227–235, 1991.
S. Muraki. Multiscale volume representation by a DoG wavelet. IEEE Transactions on Visualization and Computer Graphics, 1:109–116, 1995.
D. P. Petersen and D. Middleton. Sampling and reconstruction of wave-number- limited functions in N -dimensional Euclidean spaces. Information and Control, 5:279–323, 1962.
M. C. San Martin, C. Gruss, and J. M. Carazo. Six molecules of SV40 large T antigen assemble in a propeller-shaped particle around a channel. Journal of Structural Biology, 268:15–20, 1997.
A. H. Watt. 3D Computer Graphics. Addison-Wesley Pub. Co., Reading, Mass., 2nd edition, 1993.
