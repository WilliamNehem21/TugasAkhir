Electronic Notes in Theoretical Computer Science 44 No. 1 (2001)
URL: http://www.elsevier.nl/locate/entcs/volume44.html 18 pages


Algebras, Coalgebras, Monads and Comonads

Neil Ghani a,1 Christoph Lu¨th b,2 Federico de Marchi a,3,5 John Power c,4
a Department of Mathematics and Computer Science, University of Leicester
b FB 3 — Mathematik und Informatik, Universita¨t Bremen
c Laboratory for Foundations of Computer Science, University of Edinburgh


Abstract
Whilst the relationship between initial algebras and monads is well-understood, the relationship between final coalgebras and comonads is less well explored. This paper shows that the problem is more subtle and that final coalgebras can just as easily form monads as comonads and dually, that initial algebras form both monads and comonads.
In developing these theories we strive to provide them with an associated notion of syntax. In the case of initial algebras and monads this corresponds to the standard notion of algebraic theories consisting of signatures and equations: models of such algebraic theories are precisely the algebras of the representing monad. We attempt to emulate this result for the coalgebraic case by defining a notion cosignature and coequation and then proving the models of this syntax are precisely the coalgebras of the representing comonad.


Introduction
While the theory of coalgebras for an endofunctor is well-developed,less atten- tion has been given to comonads. We feel this is a pity since the corresponding theory of monads on Set explains the key concepts of universal algebra such as signature, variables, terms, substitution, equations etc. Moreover, applica- tions to base categories other than Set has proven fruitful in many situations,
e.g. the study of multi-sorted algebraic theories as monads over SetA, order- sorted theories as monads over Pos, the study of categories with structure

1 Email: ng13@mcs.le.ac.uk
2 Email: cxl@informatik.uni-bremen.de
3 Email: fdm2@mcs.le.ac.uk
4 Email: ajp@dcs.ed.ac.uk
5 Research supported by EPSRC grant GRM96230/01: Categorical Rewriting: Monads
and Modularity
◯c 2001 Published by Elsevier Science B. V. Open access under CC BY-NC-ND license.


using monads over Graph or Cat [8], the study of rewriting using monads over Pre or Cat [16,17] and the study of higher order abstract syntax using
F
monads over Set [9] (where F is the skeleton of the category of finite sets).
We aim for a similar framework,based upon the theory of comonads,explain- ing the relationship between the coalgebraic duals of the above concepts,and laying the ground for applications in categories apart from Set. This paper is a first step in this direction.
Traditionally,one begins with a signature Σ and then for each set of vari- ables X, defines the term algebra TΣ(X). Next one defines substitution and shows this associative with the variables acting as left and right units. Finally, given equations E,one also defines the quotient algebra TΣ,E(X). Generalising this treatment of universal algebra to cover not just sets with extra structure but also algebraic structure over other mathematical objects can be achieved using a categorical reformulation of these ideas. In this categorical framework
[14], one constructs from a signature Σ, an endofunctor FΣ (which can be thought of as sending an object X of variables to the terms of depth 1 with variables from X). The term algebra TΣ can then be characterised as the the free monad over FΣ. Being a monad gives TΣ a well behaved notion of substi- tution,while being free captures the inductive nature of the term algebra. By interpreting the equations of an algebraic theory as pairs of monad morphisms between two free monads, the quotient algebra induced by the equations is modelled as their coequaliser. Crucially,the models of an algebraic theory are isomorphic to the Eilenberg-Moore category of algebras of the monad repre- senting the algebraic theory.
Our aim is to dualise this categorical treatment of universal algebra and in particular derive coalgebraic duals of the key concepts described above. We therefore need to dualise firstly the construction of an endofunctor over a signature and secondly the free monad over an endofunctor. It turns out there is more than one possible dualisation and this is the subject matter of this paper. For example, given a finitary endofunctor F : A → A, one can consider the mapping sending an object X to the underlying object of the
initial X + F -algebra, the mapping sending X to underlying object of the final X + F -coalgebra, the mapping sending X to underlying object of the initial X × F -algebra and the mapping sending X to underlying object of the final X × F -coalgebra. Each of these four mappings form either a monad or a comonad as described in Table 1. Thus, there is perhaps not one dualisation at play, but two possible, and orthogonal, dualisations giving four concepts worthy of our attention.
We do not claim that this paper provides complete answers to the questions raised above. However we do feel that the questions we address will be of fundamental importance to the CMCS audience and that our approach is novel in being more abstract than most. In particular, we hope that our notions of cosignature, coequations and the categorical representation of this syntax via comonads will be of general interest and stimulate further research.


Table 1
Algebras and Coalgebras forming Monads and Comonads

The rest of this paper is structured as follows: Sect. 2 contains preliminary definitions. In Sect. 3, we briefly review the presentation of finitary monads which we seek to dualise in the rest of the paper (the upper left entry in Table 1). Sections 4 and 5 explore the different possibilities of dualisation, with Section 4 exploring the lower left of Table 1 and Section 5 containing our proposed coalgebraic syntax with associated representation and correctness results (the right side of Table 1).

Preliminary Definitions and Notation
We assume the reader is familiar with standard category theory as can be found in [18]. In order to abstract away from the category Set we have had to employ certain constructions which some readers may not be completely familiar with. We give a short definition of these here; more details can be found in [18,3].
Locally Presentable and Accessible Categories: Let κ be a regular cardinal. A diagram D is κ-filtered iff every subcategory with less than κ objects and morphisms has a compatible cocone in D. An object X of a category A is said to be κ-presentable iff the hom-functor A(X, ) preserves κ-filtered colimits. A category is locally κ-presentable (abbreviated as lκp) if it is cocomplete and has,up to isomorphism,a set Nκ of κ-presentable objects such that every object is a κ-filtered colimit of objects from Nκ. A category is κ-accessible providing it is lκp except that it only has κ-filtered colimits rather than all colimits. A functor is κ-accessible iff it preserves κ-filtered colimits; we also say it has rank κ. The discrete category on Nκ is denoted Nκ. The full subcategory of κ-presentable objects is denoted Aκ. The inclusion functors are denoted Jκ : Nκ → Aκ and Iκ : Aκ → A. When A = Set,the set Nℵ0 can be taken to be the natural numbers which we denote N.
Kan Extensions: Given a functor I : A → B and a category C, precom- position with F defines a functor ◦ I : [B, C] → [A, C]. The problem of left and right Kan extensions is the problem of finding left and right adjoints to
I. More concretely, given a functor F : A → C, the left and right Kan

extensions satisfy the natural isomorphisms
[У, C](LanIF, H) ~= [A, C](F, H ◦ I)   [У, C](H, RanIF ) ~= [A, C](H ◦ I, F ).

Kan extensions can be given pointwise using using colimits and limits,or more elegantly using ends and coends (see [18,Chapter X] for details).


Initial Algebras and Monads
We begin by recalling the well known equivalence between (finitary) monads on the category Set and universal algebra and the generalisation of this equiv- alence to locally presentable categories [14,21]. We illustrate these ideas with a specific example using Set as the base category — examples over other base categories can be found in [21,8].
A signature declares the operations from which the terms are constructed. Usually, a signature is given as a set of operations and a function assigning each operation an arity, but we can equivalently consider it as a function Σ : N → Set, assigning to each arity the set of operations of that arity. In order to abstract away from the category of Set, we need a notion of arity
appropriate for different categories. The key observation is that the usual arities in Set, i.e. the natural numbers N, represent the finitely presentable objects in Set. Hence a natural notion for arities in a lκp-category is the set Nκ. Hence, a signature is a function Σ : Nκ → |A|, which is equivalent to a functor Σ : Uκ → A:
Definition 3.1 (Signature) Let A be a lκp category. A signature is a func- tor Σ: Uκ → A, and the object of e-ary operations of Σ is Σe = Σ(e).
We now present two examples of such signatures,which we will later aug- ment by the appropriate equations.
Example 3.2 (Monoids) The signature ΣM : N → Set for the theory of monoids is defined as ΣM (0) = {e}, ΣM (2) = {m}, ΣM (n) = ∅ for all other n ∈ N. Thus ΣM declares one operation e of arity 0 (a constant) and one binary operation m.
Example 3.3 (Categories with T) Categories with a terminal object can be seen as algebraic over Cat. The signature ΣT must declare the terminal object and for each object X, the unique map !X : X → T. Since the terminal object does not depend upon any data, its arity is the empty category 0. Since the map !X depends upon an object, its arity is the one object category 1. Thus ΣT(0)= 1, ΣT(1)= (◦ → ◦) (i.e. the category with two objects and one arrow) while ΣT(c)= 0 for all other finitely presentable categories c.
We now turn to the construction of an endofunctor over a signature Σ.

Working over Set,e.g. see [23],one defines a functor
FΣ(X)=    Xn
f∈Σ(n)
which calculates the terms of depth 1 whose variables come from the set X. For example,given the signature of example 3.2,the associated endofunctor is FM (X)= 1 + X2. Such polynomial endofunctors (i.e. built from products and coproducts) are known to preserve all κ-filtered colimits — this is an impor- tant property which later will ensure the free monad can be easily calculated. Unfortunately, it is unclear how to generalise it to categories other than Set and hence we take an alternative approach. Recall that by definition,left Kan
extension is left adjoint to restriction LanJκ E ◦ Jκ : [Uκ, A] → [Aκ, A] and hence we define
FΣ(X) = (LanJκ Σ)X	(1)
The standard formula for left Kan extensions shows that,in the case A = Set, both definitions of FΣ agree,as in Example 3.2:
(LanJℵ0 ΣM )X =   Setℵ0(n, X) × ΣM (n)
n∈N
= Set(0, X) × 1+ Set(2, X) × 1
=1 + X2
Notice that the domain of FΣ is Aκ and not A, and hence FΣ is not an endofunctor. However, an endofunctor F : A → A is κ-accessible iff it is (isomorphic to) the left Kan extension of its restriction to Aκ; hence there is an equivalence (2) between κ-accessible endofunctors and functors Aκ → A and we can regard FΣ as a κ-accessible endofunctor.

Iκ	✲

[A, A]κ ✛	T	 [Aκ, A]	(2)
LanIκ
To recap, we have presented an abstract definition of signature Σ over an lκp-category and a construction of the associated endofunctor FΣ over the signature. In the case of Set, these definitions and constructions agree with the usual definitions. The associated term algebra TΣ : A → A is then the free monad over the endofunctor FΣ,constructed in a number of ways:
Lemma 3.4 Let F be a κ-accessible endofunctor over a lκp-category A. Then the free monad T over F satisfies
For every X in A, TX is the carrier of the initial X + F-algebra.
The forgetful functor U : F−Alg → A from the category of F-algebras to
A has a left adjoint L, and T ~= UL 


T is colimit colimi<κSi of the sequence Si where
S0 = J	Sn+1 = J + F ⬦ Sn	Sλ = colim Si	(3)
i<λ

and the composition of F, E : A → A is given as F ⬦ E =def (Lan F.E).
Proof. Most of the proofs are standard and can be found in [14,12]. However, note that in the last of the claims,to calculate the free monad we start forming the sequence of endofunctors Si and we do not need to go further than the κ-filtered colimit colimi<κSi because F is κ-filtered. Hence T is κ-accessible and thus shares the same rank as F .	✷
When we come to the dual of this construction in Sect. 5, a construction like the above will not be possible since one would be interested in the limit of co-chain, and there is no reason for an accessible endofunctor to preserve such limits. The effect is that the rank of the cofree comonad over an acces- sible endofunctor may increase. This change of rank underlies the technical difficulties which will arise in Sect. 5.
We obtain the two adjunctions in (4) which compose to give an adjunction
F −−| U between signatures and monads.
LanJκ	✲	H	✲
[U , A] ✛	⊥	 [Aκ, A] ✛	⊥	 Monκ(A)	(4)
Jκ	V
The sequence Si in (3) in Lemma 3.4 is called the free algebra sequence
[12] and can be seen as a uniform calculation of the initial X + F algebra. As an example of this construction, consider the signature ΣM . As we have seen LanJ ΣM (X) = 1 + X2. The free algebra sequence then specialises to S0X = X and
Sn+1(X)= X +   A(e, Sn(X)) × ΣM (e)= X +1+ Sn(X)2
e∈N
from which we can see Sn as defining the terms of depth at most n,e.g. S0(X) contains the variables X, and S1(X) contains the variables X, the canonical element of 1 representing the unit of the monoid and a pair of elements of S0(X) which can be thought of as the multiplication of these elements.
Within this framework, to give equations is to give another signature E and two natural transformations σ, τ : E → UFB. One should regard E as giving the shape of the equations and σ' and τ' as the actual equations.
Example 3.5 Given the monoids example, there are three equations we wish to assert: left unit, right unit (both unary) and associativity (ternary). Hence we set E(3) = {a}, E(1) = {l, r} and E(n)= ∅ for all other n.

σ and τ define the left, and the right hand side of equations, respectively:

For example 3.3, one equation is needed to force the uniqueness of !X :
X → T,i.e. !Y .f =!X for all f : X → Y (see [8] for details).
The advantage of this definition of equations is that it allows an elegant derivation of the representing monad for an algebraic theory: given such a theory σ, τ : E → UFB,under adjunction (4) we have two monad morphisms σ',τ' whose coequaliser is the representing monad T . This construction makes sense,because the category of models of the algebraic theory is isomorphic to the Eilenberg-Moore-category of the representing monad.
In (4), both adjunctions are monadic and their composition is of descent type, which means that each component of the counit εB : FUB ⇒ B is a coequaliser. This means that every κ-accessible monad T = (T, η, µ) on A is a coequaliser of two free monads over two signatures B, E : U → A in the category of κ-accessible monads over A,or every monad is represented by equations in this general sense.

Final Coalgebras and Monads
Given a signature Σ we have constructed an associated endofunctor FΣ,which can be thought of as calculating the closed terms of depth 1. By closing FΣ under composition, or more formally by considering the free monad over FΣ, we get the term algebra TΣ. Concretely TΣX is the carrier of the initial X +FΣ-

algebra. In this section we investigate the map T∞
sending an object X to

the carrier of the final X + FΣ-coalgebra, and apply our results to simplify some recent developments is the semantics of lazy datatypes in functional programming languages. A more general version of Lemma 4.2 appears in [1] and is implicit in [20].
In comparing µY.X + FY with νY.X + FY , the first observation [5] is that the final coalgebra of a Set-endofunctor can be regarded as a Cauchy completion of the initial algebra. Thus,if F arises from a signature and hence µY.X + FY is the usual term algebra,then νY.X + FY is the set of terms of finite and infinite depth. This result was extended to lfp categories in [2]. The goal of this section is to ascertain the structure possessed by the map sending X to the carrier of the final X + FΣ-coalgebra. Our answer is that this map also forms a monad. In proving this result we use the following result [2]:
Lemma 4.1 Assume that A is lfp, that the unique map !:0 → 1 is a strong monomorphism, that F preserves monos and ωop-chains and that there is a map p :1 → F 0. Then for each object X ∈ A, A(X, µF ) and A(X, νF ) are metric spaces with the latter being the Cauchy completion of the former.

We use this result to prove our main lemma:
Lemma 4.2 Let F be a polynomial endofunctor and A satisfy the premises of lemma 4.1. Then the map F∞ assigning an object X to the carrier of the final X + F-coalgebra carries the structure of a monad.
Proof. We actually prove the lemma for the case A = Set since the general case involves slightly clumsy reasoning with hom-sets but is entirely analogous. We prove that F∞ is a monad by constructing a Kleisli structure for it,namely by defining the following operations: i) for each object X,an arrow η∞ : X → F∞X; ii) for each pair of objects X, Y a function sX,Y : A(X, F∞Y ) → A(F∞X, F∞Y ) such that
∞	∞
sX,X(ηX )= 1T ∞X	sX,Z(sY,Zg ◦ f )= sY,Zg ◦ sX,Y f	sX,Y (f ) ◦ ηX = f
Firstly define η∞ = ϵX ◦ ηX where η is the unit of the free monad on F and ϵX is the unique comparison map between the initial X + F -algebra and the final X + F -coalgebra. 6 Next define sX,Y (f ) as follows

X	ηX	✲✲FX	ϵX	✲ T ∞X f
![f,h]
❄


where h : FF∞Y → F∞Y
T ∞Y
✛	
s(f ) =!∗

is the obvious map derived from the structure
map of F∞Y . Then [f, h] : X + FF∞Y → F∞Y endows F∞Y with an X + F -algebra structure and hence induces a unique map ![f,h] : FX → F∞Y from the initial X + F -algebra. Diagram chasing shows that ![f,h] is uniformly continuous with respect to the relevant metrics and hence by lemma 4.1 there
is an extension !∗	which can be taken to be sX,Y (f ). The first equation
follows since by uniqueness ![η∞,h] = ϵX and the extension of ϵX is the identity. The equation sX,Z(sY,Zg ◦ f ) = sY,Zg ◦ sX,Y f holds if their restrictions via ϵX are the same which in turn holds if they arise from the same algebra structure on F∞Z. This holds because the two algebra structures are both inherited from the map sY,Z(g) ◦ f : X → F∞Z. The last equation follows since sX,Y (f ) ◦ η∞ = sX,Y (f ) ◦ ϵX ◦ ηX =![f,h] ◦ ηX = f	✷
Unlike the monad F ,the monad F∞ has a larger rank than F :
Lemma 4.3 Let F be a polynomial endofunctor on Set. Then the monad
F∞ has rank ℵ1.
Proof. The lemma can be proven directly using an interchange law between limits and filtered colimits.	✷

6 Actually applying Lemma 4.1 requires that X + F 0 be non empty which is the case when X /= 0. Thus the maps η∞ and s0,Y and their properties must be established separately, but this all follows trivially from the initiality of 0


Notice that lemma 4.2 indicates that there is no need to develop a new syntax for the monad F∞ since the canonical syntax should be the finite and infinite depth terms of the associated monad FΣ. We finish this section with an application of this result to reasoning in functional programming.

The Generic Approximation Lemma
The generic approximation lemma [10] is a proof principle for reasoning about functions in a lazy functional programming language (such as Haskell). The approximation lemma itself pertains to lists and states that given a function
approx (n+1) []	= []
approx (n+1) (x:xs) = x:(approx n xs)
two lists xs and ys are equal iff ∀n.approx n xs = approx n ys. Note the lack of a base case: approx 0 x is ⊥ (i.e.,the denotation of undefined) in the denotational model, but because of non-strictness, approx n x (with n > 0) is defined. This principle can be applied to other datatypes such as trees:
data Tree a = Leaf a | Node Tree a Tree approx (n+1) (Leaf x) = Leaf x
approx (n+1) (Node l x r) = Node (approx n l) x (approx n r)
Two trees t1 and t2 are equal iff ∀n. approx n t1 = approx n t2. [10] proves the generic approximation lemma using the standard denotational se- mantics of functional programming languages,where types are interpreted as cpo’s,programs as continuous functions and recursive datatypes as least fixed points of functors. That is, the correctness of the proof principle depends upon the semantic category chosen; we have already seen the implicit use of
⊥ in the definition of approx.
We propose an alternative and, we believe, more natural derivation of the approximation lemma which is independent of the particular denotational model chosen. The definition of a polymorphic datatype is usually interpreted as the free monad FΣ over its signature Σ. However, this does not capture laziness, since FΣ consists of only finite terms. Instead, we model such a datatype by the monad F∞. Since F∞(X) is the final X + Σ-coalgebra and
Σ	Σ
since FΣ is a polynomial endofunctor, F∞(X) can be calculated as the limit
of the following ωop-chain 1 ← (X + F )1 ← (X + F )21 ← · · · . The universal property of the limit states that two elements x and y of this limit will be equal iff for each n, πn(x)= πn(y) where πn is the n-th projection. But these projections are precisely the approximation function for the datatype. Notice how the categorical argument replaces the semantic dependency on ⊥ with use of a co-chain beginning with 1. This establishes the correctness of the generic approximation lemma independently of any specific denotational model. More generally, a lazy functional language like Haskell combines aspects appropri- ately modelled by a monad (being finitely generated), while others are more appropriately captured by final semantics (laziness and non-termination).

Final Coalgebras and Comonads
We now turn to another possible dualisation of Sect. 3 based upon the idea of mapping an object X to the carrier of the final X × F -coalgebra for some κ-accessible functor F . The elegance of the monadic approach to algebraic theories suggests that we can apply these techniques to the development of coalgebraic syntax by dualising them apropriately.
Cosignatures and their Coalgebras
Recall that the heart of the categorical approach to universal algebra is ad- junction (4). The dualisation outlined in this section can be summed up as replacing the left adjoint to U with a right adjoint and the replacement of monads with comonads. As a result,the definition of a cosignature turns out to be formally the same as that of a signature.
Definition 5.1 (Cosignature) Let A be a lκp-category with arities Uκ. A
κ-cosignature is a functor B : Uκ → A.
Recall that in Section 3, we constructed a κ-accessible endofunctor from a signature by first taking a left Kan extension, and then used equivalence
(2) to get a κ-accessible endofunctor. Therefore, in this section we take the right Kan extension of a cosignature B to obtain a functor RanJκ B : Aκ → A, followed by the same equivalence to obtain a κ-accessible endofunctor on A.
The standard formula for the right Kan extension gives us
(RanJκ B)(X)=    A(X, c) M Bc
c∈Nκ

where U M B is the U -fold product of B, or more formally the representing object for the functor [U, A( , B)] : A → Set. When A = Set, then this operation is simply exponentiation,i.e. U M B = [U, B].
Thus, although signatures and cosignatures are formally the same, the endofunctors they generate are very different. For example, note that while the default value for signatures is 0, if there is a single arity c such that B(c) = 0, then (RanJκ B)(X) = 0. In fact, the default value for cosignatures is 1 since U M 1 = 1 and hence if c is an arity such that B(c) = 1, then this arity will contribute nothing to the right Kan extension. Here are two example cosignatures which we will explore further below:
Example 5.2 Define the cosignature Bp by Bp(2) = 2 and Bp(c)=1 for all other arities. Then RanJκ Bp(X)= [Set(X, 2), 2] = [[X, 2], 2].
Define the cosignature Bpω (2) = ω and Bpω (c) = 1 for all other arities.
Then (RanJκ Bpω )(X)= [Set(X, 2), ω]= [[X, 2], ω].
Recall that in order to turn a functor Aκ → A into a κ-accessible end- ofunctor, one takes its left Kan extension. Given a cosignature B, we can thus consider coalgebras of the endofunctor LanIκ RanJκ B. The following is

an important result from [11]:
Lemma 5.3 Let F : A → A be an accessible endofunctor on a locally pre- sentable category. Then F−coalg is locally presentable and the κ-presentable objects of F−coalg are simply those coalgebras whose underlying object is κ- presentable in A.
Proof. The proof uses the fact that the category of all (small) accessible categories has all weighted limits [19, Theorem 5.1.6]. Then the category F −coalg can be constructed as such a limit, namely the inserter [13] of
1
C	✲ C
F
The second part of the lemma follows from the fact that colimits in F−coalg are formed pointwise.	✷
This result allows us to consider κ-presentable LanIκ RanJκ B-coalgebras:
Lemma 5.4 Let B be a κ-cosignature. A κ-presentable LanIκ RanJκ B-coal- gebra consists of a κ presentable object X together with for every arity c, a function hc : A(X, c) → A(X, Bc).
Proof. Given any κ-accessible endofunctor F , and κ-presentable object X, LanIκ F (X)= F (X). Hence coalgebras of the form mentioned are

A(X, (RanJκ B)(X)) ~= A(X,  c∈N

A(X, c) M Bc)

~=  c∈N
A(X, A(X, c) M Bc) ~=  c∈N
[A(X, c), A(X, Bc)]

In the theory of monads, a crucial result states that the models of an algebraic presentation are isomorphic to the category of algebras of the theories representing monad. In order to emulate this result we require a notion of model (or co-model if you like) for a κ-cosignature B,and Lemma 5.4 suggests this be LanIκ RanJκ B-coalgebra.
Example 5.5 A model of the cosignature Bp is given by a finite set X together with a function Set(X, 2) → Set(X, 2). If we regard a map f : X → 2 as a subset of X, or a predicate over X, then such a model can be regarded as a map between predicates.
Similarly, a model for the cosignature Bpω consists of a finite set X and a function Set(X, 2) → Set(X, ω). This is clearly related to the previous example if we think of it as mapping binary partitions of X to ω-ary partitions.
The Representing Comonad of a Cosignature
Recall that in the algebraic case one starts with a signature, constructs an endofunctor, and then considers the free monad over the endofunctor. The second part of the dualisation is to consider the cofree comonad over an end- ofunctor. The following pair of results from [11] provides the framework for

this discussion:
Lemma 5.6 The following conditions on a functor F : A → A are equivalent:
There is a cofree comonad on F.
The forgetful functor F−coalg → A is comonadic.
The forgetful functor F−coalg → A has a right adjoint
(If A has products) For every object X, the functor X × F has a final coalgebra.
Similar to the monadic case, only accessible endofunctors have a cofree comonad. For example, there is no final coalgebra for the powerset functor P : Set → Set,as such a coalgebra would be an isomorphism X ~= PX. The important result from [19,11] is the following:
Lemma 5.7 If A is locally presentable and F is accessible, then F−coalg is locally presentable and there is a cofree comonad over F.
Proof. Recall from lemma 5.3 that F−coalg is accessible. Cocompleteness of F−coalg follows since the forgetful functor creates colimits and A is co- complete. Since the forgetful functor is a colimit-preserving functor between locally presentable categories,it follows from the Special Adjoint Functor The- orem [18, Theorem V.8.1] that the forgetful functor has a right adjoint. By lemma 5.6,there is a cofree comonad over F .	✷
Let Comκ(A) be the category of κ-accessible comonads on A, and fur- ther ACom(A) be the category of accessible comonads on A. For every κ, Comκ(A) is a full subcategory of ACom(A). Similarly,let [A, A]κ be the cat- egory of endofunctors with rank κ,and AEnd(A) be the category of accessible endofunctors. Piecing together the above results we have the following:
Lemma 5.8 The forgetful functor V : ACom(A) → AEnd(A) has a right adjoint R.
Proof. Given an accessible endofunctor F ,let the right adjoint of the forgetful functor UF : F−coalg → A be KF . Then choosing R(F ) to be UF KF we can deduce that R(F ) is accessible because UF is accessible (as a left adjoint, it preserves all colimits) and KF is accessible by [3,Proposition 1.66 on p. 52].
The action of the right adjoint on accessible endofunctors has already been given. Given a natural transformation α : F1 ⇒ F2, this induces a functor α∗ : F1−coalg → F2−coalg which commutes with the respective forgetful functors. Using the dual of [6,Theorem 3 on p. 128] and the comonadicity of these categories of coalgebras, this in turn induces a natural transformation R(α): R(F1) ⇒ R(F2). This defines the functor R : AEnd(A) → ACom(A). The fact that it is right adjoint to V is easily verified.	✷
As opposed to the monadic case,the cofree comonad RM on an endofunc- tor M : A → A of rank λ need not have rank λ; as a simple counterexample,
def
consider the endofunctor M : Set → Set defined as MX = A × X for a

fixed set A, which clearly is finitary (has rank ℵ0). We know that the value of RM for a set X is given by RM (X) = νY. X × MY = νY. X × A × Y which is the set of all infinite streams of elements of X × A. Now consider a countably infinite set Y , then RM (Y ) contains a sequence with infinitely many different elements from Y . This sequence can not be given from any of the finite subsets Y0 ⊆ Y ,which shows that RM has a rank larger than ℵ0. As we saw in Sect. 4,in general calculating coalgebras of accessible endofunctors invariably seems to increase their rank — see [24] for an investigation of this phenomenon.
Using the equivalence between [Aκ, A] and [A, A]κ,we now have the follow- ing functors,where ◦ Jκ is the precomposition with Jκ and V is the forgetful U for comonads of rank κ:
RanJκ	✲
[Uκ, A] ✛   T     [Aκ, A]    ~=    [A, A]κ ✛	 Comκ(A)

Jκ
∩	V

❄	R	✲
∩
(5)
❄

AEnd(A) ✛	T	 ACom(A)
V
We further define the composite functors
V  : Com (A) → [U , A]	V =def ( ◦ J ).V
R  : [U , A] → ACom(A)	R =def R.Ran
As we have seen,the rank of RκB may be greater than the rank of B,and hence the codomain of Rκ is not the domain of Vκ,but rather ACom(A). So although Rκ and Vκ can not be adjoint,there is the following isomorphism:
Lemma 5.9 For any κ-accessible comonad G and κ-cosignature B : Uκ → A
there is an isomorphism
[Uκ, A](VκG, B) ~= ACom(A)(G, RκB)	(6)
which is natural in G and B.
Proof. The isomorphism is shown by the following chain of natural isomor- phisms provided by the two adjunctions in (5) and the full and faithful em- bedding of [A, A]κ into AEnd(A):
[Uκ, A](VκG, B) ~= [Uκ, A]( ◦ JκV G, B)
~= [Aκ, A](V G, RanJκ B)
~= AEnd(A)(V G, RanJκ B)
~= ACom(A)(G, RRanJκ B)
~= ACom(A)(G, RκB)
✷


So given a κ-cosignature B we have constructed its representing comonad RκB. Note that by lemma 5.6, the category of coalgebras RκB−Coalg is isomorphic to the category LanIκ RanJκ B−coalg. Restricting ourselves to κ-presentable coalgebras, we have that the κ-presentable coalgebras of the representing comonad RκB are isomorphic to the κ-presentable models of the cosignature B as defined earlier. This is our partial dualisation of the result stating that the models of a signature are isomorphic to the Eilenberg-Moore category of the representing monad.
Coequational Presentations and their Representing Comonad
In this section,we continue the dualisation by defining coequational presenta- tions, deriving a representing comonad for such a coequational presentation, and relating the coalgebras of the representing comonad to the models of the presentation.	As we have seen above, equations are interpreted as a pair of monad morphisms between free monads; the representing monad for an equational presentation is then defined to be the coequaliser of these monad morphisms. Dualising this requires a coequational presentation to form a pair of comonad morphisms between cofree comonads and taking the represent- ing comonad for the coequational presentation to be the equaliser of these comonad morphisms.
Definition 5.10 (Coequational Presentations) A coequational presenta- tion is given by two cosignatures B : Uκ → A and E : Uλ → A (where RκB is λ-accessible), and two comonad morphisms σ, τ : RκB → RλE.
Under (6) the maps σ, τ : RκB → RλE are given by maps σ',τ' : VλRκB →
E, which in turn are families σ' ,τ' : RκBc → Ec of maps for c ∈ Uλ. So, as
c	c
opposed to the monadic case where an equation is given by a pair of terms,a
coequation consists of two partitionings of the coterms; for example,if E(n)= 
2,each of σ and τ partition RκB(n) into two subsets.
As mentioned above,given a coequational presentation,our intention is to define its representing comonad to be the equaliser of the comonad morphisms:


σ
G 	✲ RκB
τ

✲ Rλ
E	(7)

Proving that these equalisers exist is made easier by our abstract categorical setting which provides us with an alternative definition of the coalgebras of a comonad. Recall that such coalgebras are given by an object x ∈ A and a map α : x → Gx which commutes with the unit and counit of G. First, observe that an object x of A is given by a map X : 1 → A (where 1 is the one-object category). Further,the functor category [1, A] is isomorphic to A, and we have
A(x, Gx) ~= [1, A](X, G ◦ X) ~= [A, A](LanXX, G),	(8)


so to give a map x → Gx is equivalent to giving a natural transformation from LanXX ⇒ G. In fact. LanXX is a comonad:
Lemma 5.11 LanXX is a comonad. If X is κ-presentable, then LanXX is
κ-accessible.
Proof. Using the standard formula for left Kan extensions, LanXX(a) = A(X, a) ⊗ X (where ⊗ is the tensor ; e.g. in Set, it is given by the usual product). If X is κ-presentable,then A(X, −) preserves all κ-filtered colimits, as does −⊗ X; hence LanXX is κ-accessible.
To have a comonad structure,we need natural transformations LanXX ⇒ 1 and LanXX ⇒ LanXX ◦ LanXX which satisfy the comonad laws. The first of these is given by the image of the identity transformation on X under the isomorphism [1, A](X, X) ~= [A, A](LanXX, 1A). The second is given by the image under the isomorphism [1, A](X, LanXX ◦ LanXX ◦ X) ~= [A, A](LanXX, LanXX ◦ LanXX) of the transformation


X =⇒є
Lan X ◦ X LanXXє Lan X ◦ Lan
X ◦ X

X	=⇒	X	X
where ϵ is the canonical transformation X ⇒ LanXX ◦ X. That the counit and comultiplication obey the comonad laws is easily verified.	✷
The fact that LanXX is a comonad allows us to strengthen equation (8) to obtain the promised characterisation of the coalgebras of a comonad.
Proposition 5.12 A coalgebra for a comonad G is given by an object X of
A and a map LanXX ⇒ G in ACom(A).
Proof. We have already seen that the structure map of the coalgebra is pre- cisely a natural transformation between the two functors. It is then routine to verify that the properties of the structure map of a coalgebra correspond to the laws of a comonad morphism.	✷
With Proposition 5.12,we can show the existence of equalisers:
Lemma 5.13 The category of accessible comonads ACom(A) has all equalis- ers.
Proof. Consider two comonad morphisms M  σ ✲ E. We define the cate-
τ
gory (M, E)−Coalg to be given by coalgebras α : LanXX → M of M such that σ.α = τ .α. Recall from the proof of lemma 5.4 how we constructed the category of coalgebras as a weighted limit; using a similar diagram called an
equifier, we can construct (M, E)−Coalg as a weighted limit as well, making it accessible. With (M, E)−Coalg, M and E accessible, the forgetful functor from (M, E)−Coalg to A has a right adjoint; and post-composition of this right adjoint with the forgetful functor gives the equaliser of M and E.   ✷


We finish by relating the models of a coequational presentation to the coalgebras of its representing comonad. If G is the representing comonad of the coequational presentation σ, τ : RκB → RλE, then a G-coalgebra is a map α : LanXX → G which by the universal property of equalisers is a map
α' : LanXX → RκB such that σ.α = τ .α,or in other words a coalgebra for B
which equalises σ and τ . In this case, we say that the coalgebra LanXX → RκB satisfies the coequational presentation σ, τ : RκB → RλE. Following the calculations above, if X is κ-presentable the map α : LanXX → RκB, gives us two RλE-coalgebras, which by Lemma 5.4 are families σ'' : A(X, c) → A(X, Ec) and τ '' : A(X, c) → A(X, Ec) of maps for all c ∈ Uλ,which have to be equal if α : LanXX → RκB satisfies the presentation σ, τ : RκB → RλE.
Conclusions, Related and Further Work
This paper set out to analyse the essence of the categorical approach to uni- versal algebra based upon the theory of accessible monads and then derive their coalgebraic counterparts. While still only work in progress, we feel we have made a definite contribution which will be of interest to the general coalgebra community. In particular, the derivation of the infinitary monad corresponding to the collection of final X + F -coalgebras seems to have ready applications in lazy functional programming. In addition, the derivation of the cofree comonad representing a cosignature and the interpretation of a co- equational presentation as an equaliser of cofree comonads are dualisations of the corresponding results in the standard theory. We have also related the coalgebras of the representing comonad to the models of the coequational presentations.
The major technical challenge was caused by the increase in rank when passing from a cosignature to its representing comonad. For example, this meant that the characterisation of coalgebras only holds for coalgebras up to a certain rank. In addition,this increase in rank makes it unlikely that every accessible comonad can be given as a coequational presentation (i.e. as an equaliser of cofree comonads),as is possible for finitary monads.
Of course there remains much to be done. Our approach has been very abstract and perhaps the most important next step is to make precise the relationship between our approach and others pursued in the community.
For example, Cirstea [7] defines an abstract cosignature as a functor F : C → C where C has all finite limits and limits of ωop-chains, and F preserves pullbacks and such limits. Then,an observer is given by a functor K : C → C and a natural transformation c : U → K.U , and a coequation by two ob- servers (K, l) and (K, r). Thus, an observer is a family β : C → KC of maps for all F -coalgebras α : X → FX. This notion corresponds roughly with a comonad morphism RκB ⇒ RλE, since we always have the cofree coalgebra RκBX → RκBRκBX. However, the difference is the stronger assumption that the abstract cosignature F preserves limits of ωop,which allows the con-

struction of a final coalgebra, and reasoning about it; in our more abstract setting all we have is the existence of a right adjoint and the corresponding weaker properties.
We have not as yet developed the logical calculus underlying the categorical constructions of the comonadic semantics. It seems this underlying logic will have a modal flavour, and hence research in this area, e.g.	by Kurz [15], seems relevant. Finally the use of coequations in recent work on co-Birkhoff theorems [4,22] should be compared with our coequations.

References
P. Aczel, J. Adamek, and J. Velebil. Iteration monads. In U. Montanari, editor,
Proceedings CMCS’01, volume 44, 2001.
J. Adamek. On final coalgebras of continuous functors. To appear.
J. Adamek and J. Rosicky´. Locally Presentable and Accessible Categories. Number 189 in London Mathematical Society Lecture Note Series. Cambridge University Press, 1994.
S. Awodey and J. Hughes. The coalgebraic dual of birkhoffs variety theorem. http://www.contrib.andrew.cmu.edu/user/jesse/papers/CoBirkhoff.ps.gz, 2000.
M. Barr. Terminal algebras in well-founded set theory. Theoretical Computer Science, 114:299– 315, 1993.
M. Barr and C. Wells.	Toposes, Triples and Theories.	Number 278 in Grundlehren der mathematischen Wissenschaften. Springer Verlag, 1985.
C. Cirstea. An algebra-coalgebra framework for system specification. In Proceedings CMCS 2000, volume 33 of Electronic Notes in Theoretical Computer Science, 2000.
E. J. Dubuc and G. M. Kelly. A presentation of topoi as algebraic relative to categories or graphs. Journal for Algebra, 81:420–433, 1983.
M. Fiore, G. Plotkin, and D. Turi. Abstract syntax and variable binding. In
Proc. LICS’99, 1999.
G. Hutton and J. Gibbons. The generic approximation lemma. Information Processing Letters, 2001. To appear.
P. T. Johnstone, A. J. Power, T. Tsjujushita, H. Watanabe, and J. Worrell. The structure of categories of coalgebras, 1998.
G. M. Kelly. A unified treatment of transfinite constructions for free algebras, free monoids, colimits, associated sheaves and so on. Bulletins of the Australian Mathematical Society, 22:1– 83, 1980.


G. M. Kelly. Elementary observations on 2-categorical limits. Bulletins of the Australian Mathematical Society, 39:301–317, 1989.
G. M. Kelly and A. J. Power. Adjunctions whose counits are coequalizers, and presentations of finitary monads. Journal for Pure and Applied Algebra, 89:163– 179, 1993.
A. Kurz. Logics for Coalgebra and Applications to Computer Science. Dissertation, Ludwig-Maximilans-Universtit¨at Mu¨nchen, 2000.
C. Lu¨th. Compositional term rewriting: An algebraic proof of Toyama’s theorem. In H. Ganzinger, editor, Rewriting Techniques and Applications, 7th International Conference, number 1103 in LNCS, pages 261– 275. Springer Verlag, July 1996.
C. Lu¨th and N. Ghani. Monads and modular term rewriting. In Category Theory in Computer Science CTCS’97, number 1290 in LNCS, pages 69– 86. Springer Verlag, September 1997.
S. Mac Lane. Categories for the Working Mathematician, volume 5 of Graduate Texts in Mathematics. Springer Verlag, 1971.
M. Makkai and R. Par´e. Accessible Categories: The Foundations of Categorical Model Theory, volume 104 of Contemporary Mathematics. American Mathematical Society, 1989.
L. Moss. Coalgebraic logic. Annals of Pure and Applied Logic, 96:277–317, 1999.
E. Robinson. Variations on algebra: monadicity and generalisations of equational theories. Technical Report 6/94, Sussex Computer Science Technical Report, 1994.
G. Rosu. Equational axiomatisability for coalgebra. Theoretical Computer Science, 260(1), 2000.
D. Turi. Functorial Operational Semantics and its Denotational Dual. PhD thesis, Free University, Amsterdam, 1996.
J. Worrell. Terminal sequences for accessible endofunctors. In Electronic Notes in Theoretical Computer Science, volume 19, 1999. Proceedings CMCS ’99.
