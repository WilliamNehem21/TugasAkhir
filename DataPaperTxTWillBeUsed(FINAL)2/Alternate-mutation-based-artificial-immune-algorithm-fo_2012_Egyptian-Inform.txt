
ORIGINAL ARTICLE

Alternate mutation based artificial immune algorithm for step fixed charge transportation problem
Mahmoud Moustafa El-Sherbiny *

Operations Research Dept., Institute of Statistical Studies and Research (ISSR), Cairo University, Egypt

Received 21 February 2012; revised 8 May 2012; accepted 20 May 2012
Available online 4 July 2012

Abstract Step fixed charge transportation problem (SFCTP) is considered as a special version of the fixed-charge transportation problem (FCTP). In SFCTP, the fixed cost is incurred for every route that is used in the solution and is proportional to the amount shipped. This cost structure causes the value of the objective function to behave like a step function. Both FCTP and SFCTP are considered to be NP-hard problems. While a lot of research has been carried out concerning FCTP, not much has been done concerning SFCTP. This paper introduces an alternate Mutation based Artificial Immune (MAI) algorithm for solving SFCTPs. The proposed MAI algorithm solves both balanced and unbalanced SFCTP without introducing a dummy supplier or a dummy cus- tomer. In MAI algorithm a coding schema is designed and procedures are developed for decoding such schema and shipping units. MAI algorithm guarantees the feasibility of all the generated solu- tions. Due to the significant role of mutation function on the MAI algorithm’s quality, 16 mutation functions are presented and their performances are compared to select the best one. For this pur- pose, forty problems with different sizes have been generated at random and then a robust calibra- tion is applied using the relative percentage deviation (RPD) method. Through two illustrative problems of different sizes the performance of the MAI algorithm has been compared with most recent methods.
© 2012 Faculty of Computers and Information, Cairo University. Production and hosting by Elsevier B.V. All rights reserved.




* Tel.: +20 01284665997.
E-mail address: m_sherbiny@yahoo.com
1110-8665 © 2012 Faculty of Computers and Information, Cairo University. Production and hosting by Elsevier B.V. All rights reserved.
Peer review under responsibility of Faculty of Computers and Information, Cairo University. http://dx.doi.org/10.1016/j.eij.2012.05.003


Introduction

One of the versions of FCTP is the step fixed-charge transpor- tation problem (SFCTP) where the fixed cost is incurred for every route that is used in the solution. In SFCTP, the fixed cost is proportional to the amount shipped. This cost structure causes the value of the objective function to behave like a step function. Considerable work has been done in solving FCTP, such as, lagrangian relaxation method [1], heuristic approach [2], genetic algorithm [3], more-for-less algorithm [4], branching method [5], adaptive genetic algorithm [6] spanning tree-based



genetic algorithm [7], artificial immune and genetic algorithms based on the spanning tree and Pru¨fer number representation [8,9]. SFCTP was for the first time formulated in 2008 by Kowalski and Lev [10] and since then has not attracted the attention of researchers. Hence, not much research has been carried out in the area of SFCTP. Balinski in 1961 [11] has proposed heuristic method for solving FCTP. This method starts with constructing a coefficient matrix and finding the optimal solution based on it. In 1988 Sandrock [12] analyzed the source induced fixed-charge transportation problem. Since problems with fixed charge are usually NP-hard (Nondetermin- istic Polynomial-time), the computational time to obtain exact solutions increases in a polynomial fashion and very quickly be- comes extremely difficult and long as the size of the problem increases. In the case of the SFCTP due to the step function structure of the objective function Z (1), we are dealing with a ‘‘NP-super hard’’ problem with much ‘‘higher degree’’ of the polynomial complexity [13,14].
Kowalski and Lev [10] have followed the approach of Balinski [11] and have suggested simple heuristic technique based on other two formulae for converting SFCTP to a clas- sical transportation problem. But this heuristic technique is applicable for only small SFCTPs. Altassan et al. [15] have proposed three more formulae in addition to Balinski’s for- mula [11] and Kowalski and Lev’s formula [10] and compared its performance with them.
On the other hand, some special Artificial Immune Systems (AISs) are developed to solve complex optimization and NP- hard problems. One of them is aiNet [16,17] that is inspired by biological immune system. Opt-aiNet [16] is an application
Section 3 reviews the previous methods for solving SFCTPs. In Section 4, the main architecture of the proposed MAI algo- rithm and the proposed mutation functions are described, and in Section 5 parametric analysis for the proposed mutation functions (MFs) is carried out. Numerical experiments with proposed MAI algorithm are presented in Section 6. Finally, the conclusion and future work are reported in Section 7.
SFCTP description and formulation

Step fixed charge transportation problem (SFCTP) can be described as a distribution problem in which there are m sup- pliers (warehouses or factories) and n customers (destinations or demand points). Each of the m suppliers can ship to any of the n customers. Each supplier i= 1, 2,..., m has si units of supply and each customer j = 1, 2,.. . , n demands dj units. xij is the unknown quantity to be transported on the route (i, j) that from supplier i to customer j. The cost of shipping through route (i, j) consists of a variable cost equal to the sum- mation of the product of cost per unit cij (unit cost for shipping from supplier i to customer j) and the number of units shipped xij plus a fixed cost fij. The fixed cost fij for route (i, j) is propor- tional to the transported amount through its route. This con- sists of a fixed cost fij,1 for opening the route (i, j) and an additional cost fij,2 when the transported units exceeds a cer- tain amount Aij. The objective is to determine which routes are to be opened and the size of the shipment, so that the total cost of meeting demand, given the supply constraints, is mini- mized. The standard mathematical model of SFCTP can be represented as follows [15]:

of aiNet in function optimization. Opt-aiNet considers the	m  n

optimized objective function as antigen, and the candidate
solutions as antibodies. The candidate antibodies evolve according to the matching degree between antibodies and anti- gen that is fitness. The better the matching between them, is the less the mutation degree of candidate antibody. Due to AIS self organizing and learning capability, the AIS has been widely used in many real world complex applications such as job shop scheduling problems [18,19], multi-objective pro- gramming problems [20], a hybrid particle swarm [21] method with artificial immune learning for solving the FCTP [22], a novel artificial immune algorithm for solving FCTPs [23], solv-
Min Z =	(cijxij + bij;1 fij;1 + bij;2 fij;2)	(1)
i=1 j=1
m
s.t.	xij = dj for j = 1; ... ; n	(2)
i=1
n
xij = si for i = 1; ... ; m	(3)
j=1
xij P 0  ∀i; j

ing a capacitated FCTP by AI and genetic algorithms with a
Pru¨fer number representation [8] and student project assign-
ment problem [24]. Also, The AIS algorithms are more effi- cient than the classical heuristic scheduling algorithms such
bij;1
=	1  if xij > 0
0  otherwise
  1  if xij > Aij
∀i; j

as such as simulated annealing, tabu search, evolutionary algo-
rithms, and genetic algorithm [25]. While SFCTP is considered as a special version of the FCTP, AIS finds its application in
bij;2 =
m
0 otherwise
n
∀i; j

solving this complex problem. Therefore AIS is considered
Xsi = Xdj

one of the feasible approaches for dealing with SFCTPs.
This paper aims to introduce a Mutation based Artificial
i=1
j=1

Immune (MAI) algorithm for solving SFCTPs and presents
a set of mutation functions in order to improve the quality of the solution. Therefore a set of mutation functions is sug- gested and tested using forty different problems with different dimensions. In addition to that two problems with different sizes are solved to evaluate the performance of the MAI algo- rithm and to compare its performance with the recent five methods.
The rest of the paper is organized as follows: in Section 2, description and mathematical model of SFCTP are presented.
Review of methods for solving SFCTPs

As stated earlier, not much work has been done concerning solution of SFCTPs. The existing methods for dealing with SFCTPs are based on using a certain formula for converting the problem into a classical transportation problem and find- ing the solution thereafter.
Balinski [11] has provided a heuristic solution for FCTP by considering the unit transportation cost of shipping through



the route (i, j) as in (4). This method will be denoted as Bal in the remaining part of the paper.
Cij = fij,1/Mij + cij	(4)
where Mij = Min(Si, Dj).
Kowalski and Lev [10] have proposed two heuristic algo- rithms. In the first algorithm, the formula considered was as in (5) and in the second algorithm, the formula considered was as in (6).
Cij = (fij,1 + fij,2)/Mij + cij	(5)
Cij = fij,2/(Mij — Aij)+ cij	(6)
However, the formula (6) has a few drawbacks [15]. Hence
(5) will be considered as Kow in the remaining part of the paper.
Altassan et al. [15] have proposed three formulations for Cij as in (7)–(9) and these will be denoted by Alt1, Alt2 and Alt3 respectively in the remaining part of the paper.
code of the main steps for the proposed MAI algorithm for solving SFCTPs is presented as follows:

C =  fij,1 /Mij + cij	if Aij P Mij
∀i, j	(7)

Cij
=  f

ij,1
/Mij
+ cij
if Aij
P Mij
∀i, j	(8)

Cij
fij,2 /(Mij — Aij )+ cij  if Aij < Mij
=	fij,1 /Mij + cij	if Aij P Mij fij,2 /Aij + fij,1/(Mij — Aij )+ cij  if Aij < Mij
∀i, j


(9)
The details of the main steps are presented in the following subsections.

In order to improve the local solution of the classical transpor-
tation problem found from converting SFCTP Kowalski and Lev [19] have proposed a heuristic technique for improving such solution. But such heuristic algorithm can be used for solving only small SFCTPs. This paper introduces an alternate Mutation based Artificial Immune (MAI) algorithm for solv- ing SFCTPs. Further a comparison of the performance and quality of the proposed algorithm is undertaken with the ear- lier proposed methods Bal [11], Kow [10], Alt1, Alt2 and Alt3 [15].
The proposed MAI Algorithm

The proposed algorithm in this paper preserves the essential principles of Opt-aiNet [16] algorithm including the cloning, mutation, and clone selection. The implementation of the immune algorithm is often different for each problem handled. That is, the representation and creation of the solutions, the mutation, and the affinity functions should be tailored and implemented to fit the case at hand. In the present paper, the problem of solving the SFCTP has been considered. Altassan et al. [23] applied artificial immune algorithm (AIA) for solving FCTPs by adding two main procedures for adapting the AIA for solving FCTPs. The first one is the decoding procedure used for splitting the antibody into two orders, one of them to represent the customers’ order and the other to represent the suppliers’ order. The second is the allocating procedure that used for finding the corresponding feasible solution of these orders. In this paper Altassan algorithm [23] is adapted for solving SFCTPs by replacing the allocation procedure with the proposed shipping procedure which will be used for defin- ing the units xij shipped through each route (i, j). The pseudo
Antibody Structure and initialization

One of the most important issues when designing the AIS lies on its solution (antibody) representation. In order to construct a direct relationship between the problem domain and the MAI, the proposed coding scheme (antibody structure) con- sists of the set of all unrepeated integers in the interval [1, m + n] in any sequence; where the length of the scheme is equal to m + n. Therefore, the length of each antibody Ai is equal to the sum of the problem dimensions and the suppliers numbers represented by the integer numbers from 1 to m and the demands by integer numbers from m +1 to m + n. Fig. 1 depicts a sample antibody which is used to code a 4 · 5 FCTP. As shown in Fig. 1, the cell values are between 1 and 4 + 5. It can be realized that a number is not repeated.
The population is initialized randomly by performing the coding procedure l times to create l antibodies Ap (p =1 to l), where l represents the population size. The Pseudo code for the coding procedure is as follows:





























The proposed shipping procedure is used to allocate the transported units xij based on the orders (S and D) resulting from the decoding procedure. In other words, this procedure finds a feasible solution for SFCTP based on the outputs of the decoding procedure. This procedure guarantees the validity of both the first and the second constraints, denoted by (2) and (3) respectively. Also, this procedure can be used to solve both balanced and unbalanced transportation problems without introducing a dummy supplier or a dummy customer. The Pseudo code for the shipping proce- dure is as follows:


Input:
Ap
j=1
Output:
D	The customers' order

S	The Suppliers' order
Figure 2	Illustrative example of the decoding procedure.
The inputs of shipping procedure are the sequence of sup- pliers S and the sequence of customers D (the output of decod- ing procedure). Based on these orders, the shipping procedure allocates units xij (feasible solution) of FCTP. Fig. 3 exhibits the results of applying the shipping procedure on the result presented in Fig. 2.
Evaluation of the solutions

As mentioned above each antibody is decoded and the result is used as an input for shipping procedure. The solution resulted from shipping procedure is evaluated using objective function Z, as denoted in (1). The value of objective function is assigned to the antibody as its fitness.
Cloning and mutation

Each antibody is cloned CN number of times, where CN de- notes the Cloning Number. The clones are then mutated to get new antibodies that are different from their parents. In the proposed MAI algorithm, four basic Mutation Functions (MFs) together with other twelve hybrid MFs are proposed as explained below:



































The final allocation is:

Figure 3	An illustrative example of applying the shipping algorithm.


The first basic MF is the two point swap (2PointSwap) MF and it is based on generating two random numbers j and k
where j, k 2 [1, n + m], i.e. j and k = Int(Rand(1, n + m)) [21,22]. Therefore swap the two antibody digits corresponding
to these two random numbers. The 2PointSwap MF is pre- sented in Fig. 4.
The second basic MF is based on generating two random numbers j, k where j = Int(Rand(1, n)) and k = Rand(1, n + m) and inverse the order of the antibody’s digits between these two random numbers (j, k) [21,22]. The inverse swap


Ai
j	k
Muted Ai
Figure 5	Inversion swap mutation function InvSwap (j, k).

Ai

(InvSwap) MF is presented in Fig. 5.
Muted Ai
j	j+1

Ai
j	k
Muted Ai
Figure 4	Two point swap mutation 2PointSwap (j, k).
Figure 6	Neighbor swap mutation NeibSwap (j, j + 1).

The NeibSwap based on generating a random numbers j 2 The third basic MF is the Neighbor swap (NeibSwap) MF.

[1, n + m] and swap the positions j and j + 1. I.e. Generate
j = Int(Rand (1, n + m)) and swap the positions j and j + 1.
NS = MNS(1—(1—NF)u )	(13)

The neighbor swap MF is presented in Fig. 6.
The fourth basic MF is a uniform random number where a
NF =	Lowest Fitness — Fitness
Lowest Fitness — Highest Fitness
(14)

fixed number of swaps is setup for all antibodies during all iter-
ations. This fixed number is donated by MNS. The number of swaps (NS) for this MF is represented by (10), and is fixed dur- ing all iterations.
NS = MNS	(10)
The next three MFs are based on the 2PointSwap MF [24],
followed by two MFs each based on InvSwap MF, NeibSwap. The other five MFs proposed are functions of two parameters. The first parameter is the non-uniform factor based on which the number of swaps is determined. The second parameter is the degree of non-uniformity (u). These MFs are designed to
The 13th MF is designed to be inversely related with the ratio
(T) of the current iteration number (CIN) and the total number of iterations (TNI). That is, the more the search goes on; the less is the number of swaps. This is really intuitive as in con- trast to the first stages of the search where a real exploration of the search space through significant changes in the solutions are required, at the last stages of the search fine tuning with little changes of the supposed-to-be near-optimal solutions is more reasonable [23]. The number of swaps (NS) for this mutation is represented in (15) where u is the degree of non- uniformity.

be directly related with u.
The fifth MF is based on generating a random number
NS = MNS(1—Tu ),	where T = CIN
TNI
(15)

NS ∈ [1, n + m]. Therefore the 2PointSwap is performed NS
times. The number of swaps (NS) for this mutation is repre-
sented in (11)
NS = Int(Rand(1, n + m))	(11)
The sixth MF is based on a uniform random number located in
the range of 10–30% of the sum of problem dimensions (n + m). The number of swaps (NS) for this mutation is repre- sented by (12), where r is a random number in the interval [0.1, 0.3].
NS = Int(Rand(1, r(m + n)))	(12)
The seventh MF is based on time where more is the time
elapsed; less will be the number of swaps. First start with applying random number of two-points-swap till a pre-defined ratio of time is elapsed. After that the two points swap MF is applied for the remaining time. The time is represented by the ratio of current iteration to the total number of iterations.
swap times or InvSwap MFs. A random number r ∈ [0, 1] is The eighth MF is based on applying either non-uniform generated and if r > pre-defined value v, then the non-uniform
swap time will be applied; else InvSwap MF will be applied.
The ninth MF is based on the time where more is the time elapsed; less will be the number of swaps. First start with applying random number of swap till the time passes a pre-de- fined ratio. After that the InvSwap MF is applied for the remaining time.
r ∈ [1, (n + m)/2] and repeating NeibSwap r times for each The 10th MF is based on generating a random numbers antibody AP.
The 11th MF is based on the time where more is the time elapsed; less will be the number of swaps. First start with applying random number of NeibSwap MF till a pre-defined ratio of time elapsed. After that the NeibSwap MF is applied for the remaining time.
The twelfth MF is based on the fitness of the solution [24]. As the SFCTP is a minimization problem, the function is de- signed to be directly related with the Normalized Fitness (NF) of the solution. That is, solutions with normalized fitness closer to one, i.e. relatively bad solutions, will be subject to more number of swaps. This actually gives the chance for low affinity solutions to mutate more in order to improve their affinities. The NS for this MF is adopted as (13) and the nor- malized fitness of each antibody is calculated using (14).
The 14th MF is based on both the time and the normalized fit- ness of the solution. It basically uses the average of these two factors to decide the number of swaps. Basically, the MF is de- signed to be directly related with the fitness but inversely re- lated to the time [24]. The average of time (T) and normalized Fitness (TF) is calculated as represented in (16) and the number of swaps for this mutation is adopted as (17).
1
TF = 2 (NF + (1 — T))	(16)
NS = MNS(1—(1—TF)u )	(17)
In the 15th and the 16th MFs, a random factor (R) is included
so that the number of swaps is based on the non-uniform fac- tor, time and fitness respectively, but with some randomiza- tion. The random factor R takes values between zero and one [23]. The functions behave almost the same way as the ori- ginal ones when Rand is close to zero. The closer the R to one is; the closer is the number of swaps to the max swaps number. These two MFs allow the search to escape from local optima by occasionally increasing the number of swaps. The numbers of swaps for these mutations are adopted as in (18) and (19), respectively.
NS = MNS × R(1—NF)u	(18)
NS = MNS × R(Tu )	(19)
Affinity function

The calculations of the affinity AF (similarity) between each pair of antibodies are applied to prevent similar solutions with high evaluation from being copied to the next generation and hence dominating the search. The selection of the antibodies from one generation to the next depends on calculation of the affinity among all the antibodies of the current generation. This is tech- nically applied to reduce the chance of a premature convergence to local optima. The technique used to check the similarity be- tween every two antibodies in a population is through counting the number of similar digits in the two solutions. The basic idea is that the more the number of similar variables in the two anti- bodies is, the higher the similarity between them. Based on a spe- cific parameter, the algorithm eliminates those solutions that




have AF more than a specific parameter -Number of Similarities (NS). The affinity function of two antibodies Ap and Ak is repre- sented as in (20).
AF(A , A )= Xy
obtained best solution, respectively. After converting the objective values to RPDs, the mean RPD is calculated for each trial. Eight problems with different size are generated using a designed Microsoft Excel spreadsheet and used to discover




where y =
  1  if the ith gene of Ap
= the ith gene of Ak
characteristics of these problems are used in [23] as FCTPs
and adopted for presenting SFCTPs by adding additional costs

i	0  Otherwise
fij,2
and step values Aij. The characteristics of these problems



Parametric analysis
(20)
are presented in Table 1.
All the 40 problems considered were solved to find the total cost of the associated SFCTP and subsequently the corre- sponding RPDs for each of the proposed 16 MFs. The values of average RPDs, based on five illustrative examples for each

Due to the important affect of the mutation functions in the performance of the artificial immune algorithm, in this section a calibration of the proposed MAI algorithm through discov- ering the best MF from the implemented 16 functions is pre- sented. Because the scale of the objective functions in each problem is different, they could not be compared directly. Therefore, the Relative Percentage Deviation (RPD) is used for each combination [26]. RPD is calculated by using (21).
RPD = Algsol — Minsol × 100	(21)
Minsol
where Algsol and Minsol are the obtained objective values for each replication of trial in a given combination and the
of the eight dimensions considered using the six methods and the overall mean RPD for each of the methods are presented in Table 2.
Based on the results presented in Table 2 and Fig. 7, the overall mean RPD of the proposed AMIA algorithm with the 13th MF is providing the least value as compared to other mutation functions. This is followed by the 11th and sixth MFs. Further, the overall mean RPD of the proposed AMIA algorithm with the first, 10th, third and fourth MFs is provid- ing the largest values in that order while it is providing a mod- erate values with remaining MFs. The ranking based on the performance for all MFs is illustrated in Table 2. Hence, it can be concluded that the proposed MAI algorithm with the








Figure 7	Fitted mean plot for RPD at each MF.

13th MF is superior and can be used as the best alternative for finding a local solution for SFCTPs as compared to other MFs.
In addition to the above, in order to statistically test the significance of effectiveness of the results using different meth- ods, the paired sample t-tests were used to determine the signif- icant differences in the RPD values obtained using the 16 MFs, for each of the pairs. For the purpose of comparisons the RPD values obtained using all the 40 problems were used. The results of the tests are summarized in Table 3.
As illustrated in Table 3, it can be concluded at 0.01 level of significance the quality of the results using the 11th MF is very close to the 13th one and both are superior to the others. But the 13th MF is most superior. This corroborates the results obtained based on the RPD analysis. Therefore, in the next section, the 13th MF will be used with the MAI algorithm in comparing with the Bal [11], Kow [10], Alt1, Alt2 and Alt3
[15] methods for solving SFCTPs.
Numerical experiments

In order to prove the superiority of the proposed MAI algo- rithm, in the following subsections, two illustrative examples
are presented in order to bring out the differences between the proposed MAI algorithm with the erstwhile result of using 13th MF and the above mentioned methods.
Illustrative problems

To illustrate the performance of the proposed MAI algorithm, two problems with different sizes, previously addressed by Altassan et al. [15] are solved and compared with the solutions provided by Balinski [11], Kowalski and Lev [10] and Altassan et al. [15], for solving SFCTPs. The sizes of the problems are 4 · 5 and 5 · 10 respectively. The coefficient matrix of each problem is generated using each method and this matrix is solved by using the classical transportation module in the QM package for Windows Version 2.1 (QM is a package for quantitative methods, operations research and management science) for finding the corresponding local solution of each method. Subsequently, the corresponding costs of each local solution are calculated using designed Microsoft Excel spread- sheets for this purpose. The data, the parameters, the gener- ated coefficient matrix, the local solution, and the cost items for each problem using each method are presented in the fol- lowing paragraphs, in addition to the results found by the proposed MAI algorithm.
Concerning the first problem, the problem size is considered to be 4 · 5 with variable costs, and the fixed costs for the prob- lem as given in Table 4. The coefficient matrices generated using the Bal, Kow, Alt1, Alt2 and Alt3 methods and their cor- responding local solutions using QM are presented in Tables 5 and 6 respectively. While the coefficient matrices of the Alt1 and Alt2 are different as illustrated in Table 5 their local opti- mal distribution are the same as illustrated in Table 6. The corresponding local solution using the proposed MAI algo- rithm is presented in Table 7.
While the step values Aij for all i and j are equal to 20 as illus- trated in Table 4, the optimal distributions have exceed such values in different cells (xij units) as illustrated in bold font in Table 6. As per the SFCTP model, only when the shipped units xij exceeds Aij, the additional opening cost fij,2 is applied. It can be observed that the optimal distributions using the Bal, Kow, Alt1, Alt2, and Alt3 methods have exceeded the step value in 3,










4, 2, 2, and 2 cells respectively while MAI algorithm exceeds the step value in only one cell (Tables 6 and 7). This observation
	
MAI algorithm has the smallest total additional cost compared to other methods (see Table 8).
The comparative study of the total costs for the first prob- lem using the different methods is summarized in Table 8. It can be observed that the proposed MAI algorithm provides the best solution with least total cost among the all methods, while Alt1 and Alt2 methods have the second best solution fol- lowed by Alt3.
Concerning the second problem, the problem size is consid- ered to be 5 · 10 with variable costs, and the fixed costs for the problem as given in Table 9. The coefficient matrices generated using the designed Excel spreadsheet based on the Bal, Kow, Alt1, Alt2 and Alt3 methods and presented in Table 10. The cor- responding coefficient matrices are solved using QM package and presented in Table 11. The corresponding local solution using the proposed MAI algorithm is presented in Table 12.
As illustrated in the SFCTP model, fij,2 is applied only when the shipped units xij exceeds Aij . Hence in Table 4 the optimal

distributions (xij
units) have exceeded Aij
in different cells as





shown in bold font in Table 11. It can be observed that the opti- mal distributions using Bal, Kow, Alt1, Alt2, and Alt3 methods have exceeded the step value in 3, 4, 1, 2, and 1 cells (xij units) respectively while MAI algorithm did not exceed it in any cell (see Tables 11 and 12). This illustrates the reason for total of
m	n
,
ods and while the same equal to zero for MAI (see Table 13). In addition to that, the comparative study of the total costs for the second problem using different methods is summarized in Table 13. It can be observed that the proposed MAI algo- rithm provides the best solution with least total cost among
all methods, while Alt1 method has the second best solution followed by Alt3.
From the above two illustrated problems and based on the results summarized in Tables 8 and 13, it can be observed that the proposed MAI algorithm provides the best solution as compared to the earlier proposed methods. Therefore, it can be concluded that the solution quality of the proposed MAI algorithm is superior to the rest.
In order to further explore the effectiveness of the proposed MAI algorithm, the results based on different problems with eight dimensions ranging from 3 · 3 to 20 · 20 and with















different Aij were analyzed. The details of analysis and the re- sults are presented in the next section.
Comparative study

The aim of this section is to prove whether the solutions pro- vided by the proposed MAI algorithm are significantly better than solutions provided by other methods. This is accom- plished by using RPDs for ranking the methods and statisti- cally comparing the significance of results using the paired sample t-tests. The characteristics of the forty problems with eight different dimensions, as illustrated in Table 1 are used. All the 40 problems considered were solved to find the total cost of the associated SFCTP and subsequently the corre- sponding RPDs for each of the earlier proposed methods (Bal, Bow, Alt1, Alt2, and Alt3) and the proposed MAI algo- rithm. The values of average RPDs, based on five illustrative examples for each of the eight dimensions considered using
the six methods and the overall mean RPD for each of the methods are presented in Table 14.
Based on the results presented in Table 14, the overall mean RPD of the proposed MAI algorithm is providing the least value as compared to the other methods. This is followed by the Alt1 method. Hence, it can be concluded that the proposed MAI algorithm is superior and can be used as the best alterna- tive for finding a local solution for SFCTPs as compared to the earlier used methods.
In addition to the above, in order to statistically test the sig- nificance of effectiveness of the results using different methods, the paired sample t-tests were used to determine the significant differences in the RPD values obtained using the six methods, for each of the pairs. For the purpose of comparisons the RPD values obtained using all the 40 problems were used. The re- sults of the paired sample t-tests are summarized in Table 15.
As illustrated in Table 15, it can be concluded at 0.01 level of significance the quality of the results using the proposed MAI algorithm is the best, followed by the Alt1 method [15] considering the total cost which is significantly lower than those provided by the rest of the methods. Hence, the pro- posed MAI algorithm can be considered as the best alternative as compared to the other methods (Bal, Kow, Alt1, Alt2 and Alt3) provided by Balinski [11], Kowalski and Lev [10] and Altassan et al. [15] for solving SFCTPs respectively.













Conclusion

This paper has proposed an alternate Mutation based Artifi- cial Immune (MAI) algorithm for solving SFCTPs. The MAI algorithm solves both balanced and unbalanced SFCTP without introducing a dummy supplier or a dummy customer. Although MAI algorithm with population-based search is characterized as an evolutionary-like algorithm, the major contributions are the coding schema and the decoding proce- dure that avoid infeasibility of any candidate solutions. All the generated antibodies are feasible solutions for SFCTP. Be- sides, due to the significant role of mutation function on the MAI algorithm’s quality, 16 different mutation functions are implemented and its performances are compared using RPD for selecting the best one. Also, the comparative study of the MAI algorithm with the method proposed by Balinski [11], Kowalski and Lev [10] and Altassan et al. [15] for solving SFCTPs showed that the MAI algorithm is superior to the others. The performance of MAI algorithm and the solution quality prove that MAI algorithm is highly competitive and can be considered as a viable alternative to solve SFCTPs.
Future work includes Investigating using other metaheuris- tic techniques combined with the proposed decoding and ship- ping algorithms for solving other problems such as capacitated FCTP, Multi-Step FCTP. In addition, it is proposed to carry out further experimentation with parameters of the MAI algo- rithm and testing the proposed MAI algorithm on other real life problems.

References

Wright D, Haehling von Lanzenauer C. Solving the fixed charge problem with lagrangian relaxation and cost allocation heuristics. Eur J Oper Res 1989;42:304–12.
Wright D, Haehling von Lanzenauer C. COLE: a new heuristic approach for solving the fixed charge problem Computational results. Eur J Oper Res 1991;52:235–46.
Su S, Zhan DC. New genetic algorithm for the fixed charge transportation problem. In: Proceedings of the 6th world congress on, intelligent control and automation; 2006. p. 7039–43.
Adlakha V, Kowalski K, Vemuganti R R, Lev Benjamin. More- for-less algorithm for fixed-charge transportation problems, OMEGA. Int J Manage Sci 2007;35(1):116–27.
Adlakha V, Kowalski K, Lev Benjamin. A branching method for the fixed charged transportation problem, OMEGA. Int J Manage Sci 2010;38(5):393–7.
Othman Zalinda, Delavar Mohammad-Reza Rostamian, Behnam Sarah, Lessanibahri Sina. Adaptive genetic algorithm for fixed- charge transportation problem. In: International multi conference
of engineers & computer sciences (IMECS), March; 2011. p. 16– 18.
Hajiaghaei, Keshteli M, Molla-Alizadeh-Zavardehi S, Tavakkoli- Moghaddam R. Addressing a nonlinear fixed-charge transporta- tion problem using a spanning tree-based genetic algorithm. Comput Ind Eng 2010;59:259–71.
Molla-Alizadeh-Zavardehi S, Hajiaghaei-Keshteli M, Tavakkoli- moghaddam R. Solving a capacitated fixed-charge transportation problem by artificial immune and genetic algorithms with a Pru¨fer number representation. Expert Syst Appl 2011;38:10462–74.
El-Sherbiny Mahmoud M. Comments on ‘‘Solving a capacitated fixed-charge transportation problem by artificial immune and genetic algorithms with a Pru¨fer number representation’’ by Molla-Alizadeh-Zavardehi, S. et al. Expert Systems with Appli- cations (2011). Expert Syst Appl 2012;39:11321–22.
Kowalski K, Lev Benjamin. On step fixed-charge transportation problem OMEGA. Int J Manage Sci 2008;36(5):913–7.
Balinski ML. Fixed cost transportation problem. Naval Res Log Quart 1961;8:41–54.
Sandrock K. A simple algorithm for solving small, fixed-charge transportation problem. J Oper Res Soc 1988;39(5):467–75.
Kowalski K, Lev Benjamin. New approach to fixed charges problems (FCP). Int J Manage Sci Eng Manage 2007;2(1):75–80.
Lev Benjamin, Kowalski K. Modeling fixed-charge problems with polynomials OMEGA. Int J Manage Sci 2011;39(6):725–9.
Altassan Khaled M. El-Sherbiny Mahmoud M, Bokkasam S. In: Handling the step fixed charge transportation problem (ICDeM2012), Kedah, Malaysia, March 15–18, 2012.
Timmis J, Knight T, Catro Hart LN. An overview of artificial immune systems. Computation in cells and tissues: perspectives and tools thought. Nat Comput Ser. Springer-Verlag; 2004, p. 51– 86.
De Castro LN, Timmis J. An artificial immune network for multimodal function optimization. In: Proc. of IEEE congress on, evolutionary computation, vol. 1; 2002. p. 699–704.
Engin Orhan, Do¨yen Alper. A new approach to solve hybrid flow shop scheduling problems by artificial immune system. Future Gener Comput Syst 2004;20:1083–95.
Tsai JT, Ho WH, Liu TK, Chou JH. Improved immune algorithm for global numerical optimization and job shop scheduling problems. Appl Math Comput 2007;194:406–24.
Abd El-Wahed Waiel F, Zaki Elsayed M, El-Refaey Adel M. Artificial immune system based neural networks for solving multi- objective programming problems. Egypt Inform J 2010; 11(2):59–65.
El-Sherbiny Mahmoud M. Particle swarm inspired optimization algorithm without velocity equation. Egypt Inform J 2011; 12(1):1–8.
El-Sherbiny M. Mahmoud, Alhamali M. Rachid. A hybrid particle swarm method with artificial immune learning for solving the fixed charge transportation problem. Comput Ind Eng 1: 1–2, submitted for publication.
Altassan Khalid M, El-Sherbiny Mahmoud M, Abid Ahmed D. A novel artificial immune algorithm for solving fixed charge trans- portation problems. In: International conference on innovation and information management (ICIIM2012), Chengdu, China, January 7–8, 2012.
El-Sherbiny Mahmoud M, Ibrahim Yasser M. An artificial immune algorithm with alternative mutation methods: applied to the student project assignment problem. In: International conference on innovation and information management (ICI- IM2012), Chengdu, China, January 7–8, 2012.
Hart E, Ross P. Immune system approach to scheduling in changing environments. In: Proceedings of the genetic and evolutionary computation conference 1999 (GECCO’99), Florida, USA, July 13–17, 1999. p. 1559–66.
Taguchi G. Introduction to quality engineering. White Plains: Asian Productivity Organization/UNIPUB; 1986.
