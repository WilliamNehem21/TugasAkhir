

Electronic Notes in Theoretical Computer Science 223 (2008) 239–264
www.elsevier.com/locate/entcs
Reachability in Petri Nets with Inhibitor Arcs
Klaus Reinhardt1
Wilhelm-Schickhard Institut fu¨r Informatik Universit¨at Tu¨bingen
Sand 13, D-72076 Tu¨bingen, Gemany

Abstract
We define 2 operators on relations over natural numbers such that they generalize the operators ’+’ and ’*’ and show that the membership and emptiness problem of relations constructed from finite relations with these operators and ∪ is decidable. This generalizes Presburger arithmetics and allows to decide the reachability problem for those Petri nets where inhibitor arcs occur only in some restricted way. Especially the reachability problem is decidable for Petri nets with only one inhibitor arc, which solves an open problem in [11]. Furthermore we describe the corresponding automaton having a decidable emptiness problem.
Keywords: Petri nets, inhibitor arcs, reachability, monotone transitive closure, counter automata


Introduction
The decidability of the reachability problem in Petri nets without inhibitor arcs is proved in [14] and later in [12] and [13]. On the other hand, the reachability problem is undecidable for Petri nets with two inhibitor arcs which follows from [15]. An open problem in [11] was the reachability problem for Petri nets with one inhibitor arc.
An important method is the use of semilinear sets which are defined using the operators +, ∗, ∪ over finite sets of vectors (multisets). Semilinear sets are the solutions of Presburger formula, where Presburger arithmetic is the first order logic over the natural numbers and the addition. Presburger arithmetic is decidable and semilinear sets are closed under ∩ and complement [8],[5].
But a reachability relation for a Petri net is in general not semilinear. For that reason the basic idea of this paper is to replace + and ∗ by suitable operations ◦Q and ∗Q which are able to express a reachability relation as the sequence of relations
(like the transitive closure used in [9] to characterize NL with first order logic or more generally in [1]).

1 Email: reinhard@informatik.uni-tuebingen.de

1571-0661 © 2008 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2008.12.042

But the transitive closure over first order logic over natural numbers with the addition immediately becomes undecidable. For that reason the important principle of monotonicity in the reachability relation of Petri nets is combined with the idea of the transitive closure. That means the operator ∗Q is a monotone transitive closure (see Corollary 3.6). We consider the following three steps:
One application of ∗Q already allows us to express the reachability problem in a Petri net without inhibitor arcs (Lemma 2.1).
A second application of ∗Q (containing the first one in a nested way) allows us to express the reachability problem in a Petri net with one inhibitor arc (Lemma 2.4).
Arbitrary nested applications of ∗Q allow us to express the reachability problem in a Petri net for which there exists an ordering of the places such that a place has an inhibitor arc to all those transitions which have an inhibitor arc from a preceding place (Theorem 5.1).
In Section 3 we use expressions consisting of the operators ∪, ◦Q and ∗Q on sets of multisets in a special form (Lemmata 3.1 and 3.5 show that we can bring every such expression in this form), which models the idea of a nested Petri net: The firing behavior of a complex (nested) transition is linked to firing sequences in inner Petri nets by a semilinear relation (unlike in the structured nets in [2]). The connection between these inner Petri nets corresponds to the chain of vector addition systems used in [12] and it is described by the same semilinear relation. The main difference to the structure of the proofs in [12] and [13] is that states are not anymore necessary since their function is instead fulfilled (Section 4.4) by the nestedness of expressions (like regular expressions replace a finite automaton).
Furthermore we define a condition (normal form T corresponding to the property Θ in [12]), which allows to check the emptiness of the expressed set of multisets, we define a size of the expressions leading to a Noetherian order and construct an algorithm in Section 4 which finds an equivalent expression fulfilling condition T . Each step of the algorithm constructs an equivalent expression which is smaller with respect to the defined size. Some kind of pumping property (Lemma 4.3) ensures the existence of arbitrary high firing sequences if condition T is fulfilled.
The most general result (see Step 3 above) is described in Section 5 This allows to decide the expressed reachability problem. Sections 6 and 7 describe the conclusions for emptiness problems for automata.
The contents of this paper mainly corresponds to Chapter 5 in the habilitation- thesis [17], which also contains the proofs which had to be left out here.


Multisets
For the sake of a flexible description, we use multi-sets instead of vectors. A multi- set over B is a function in NB.
We might write a multiset f ∈ NB as a set {b '→ f (b) | b ∈ B}, as a table




b1 ,  b2

, ...,  bn
0 f (b1)1
or as an n-ary vector B	C.  For the latter, we have to

f (b1) f (b2)
f (bn)
.
.
f (bn)

assume an ordering on B = {b1, b2, ..., bn} (without relevance to the contents), and
in the first two descriptions, we only need to write those b’s with f (b) > 0. Although we do not a priori limit the size of B, we only use multisets for a finite B in this paper. For multisets, we use the variables c, d, e, f , g, h, m, n, r, s, x, y, and for sets of multisets, we use the capitals E, L, M, N, R and Id (the latter will denote the
identity for the operator ◦Q to be defined).
For A ⊆ B, we regard functions in NA ⊆ NB as extended to zero for undefined values. This allows us to add any two multisets f ∈ NA and g ∈ NB and obtain a multiset in (f + g) ∈ NA∪B with (f + g)(x) = f (x) + g(x) in the same way as we would add the corresponding vectors assuming an ordering on A ∪ B. The neutral element for addition is ∅ with ∅(x) = 0 for all x. It holds NA ∩ NB = NA∩B.
The restriction f |A of a multi-set f ∈ NB to A is
f |A (b) := f (b) if b ∈ A else f |A (b) := 0.
This means f |A:= {b '→ f (b) | b ∈ A} . The complement operator is	f |A:= {b '→
f (b) | b /∈ A} , thus f = f |A +f |A.
For a finite set M = {m1, ..., mk}⊆ NA of multi-sets,
M∗ := { a1m1 + ... + akmk| ∀i ≤ k ai ∈ N}
is the set of all linear combinations generated by M. More generally, by M0 := {∅}
and Mi+1 := Mi + M, we can define M∗ :=  i Mi.
New operator on multisets
For an unambiguous 2 and injective binary relation Q, we define the operator ◦Q
on two sets of Multisets M and N as
N◦QM :=	n |π1(Q) +m |π2(Q)  n ∈ N, m ∈ M, ∀(a, b) ∈ Q n(a) = m(b)  .
This means if n and m “match” according to Q, then the values for an a ∈ π1(Q) = 
{a|(a, b) ∈ Q} in n and the values for a b ∈ π2(Q) = {b|(a, b) ∈ Q} in m are “used up against each other” and the rest is added. For example,

3	2
B@6CA, B@5CA
​{(b1,b2)}
8	7	5
B@3CA, B@2CA, B@2CA	=
8	7	5
B@6CA, B@5CA, B@5CA

1	2	1	2	3
or
4	5

  031 021	 081 071 051 
  11!  9! 

B@6CA, B@5CA

	
​{(b3,b3)}
B@3CA, B@2CA, B@2CA	=	9 ,  7

The latter example shows that the dimension is necessarily reduced (b3 is used up on both sides) if π1(Q)∩π2(Q) is not empty. We will later need ◦ˆA := ◦{(a,a)|a∈A}

2 A binary Q is unambiguous if Q−1 is injective.

to get N◦ˆAM =	n |A +m |A  n ∈ N, m ∈ M, ∀a ∈ A n(a) = m(a) . For example
{(b3,b3)} = ◦ˆ{b3}.
If π1(Q) and π2(Q) are disjoint, we define IdQ := {{a '→ 1,b '→ 1}| (a, b) ∈ Q}∗ which is the neutral element for ◦Q. Obviously, it holds N◦∅M = N + M which makes + with the neutral element Id∅ = {∅} a special case of the ◦Q operator.
Furthermore, for Q with π1(Q) and π2(Q) disjoint, we define ∗0 (M) := IdQ,
∗i+1(M) := ∗i (M)◦Q(M + IdQ) and ∗Q(M) :=  ∗i (M). Again, ∗∅(M) = M∗
is a special case. It is easy to see that ∗Q(M) is the closure of M ∪ IdQ under ◦Q
and the addition ◦∅:
If f , g ∈ ∗Q(M) then there are i, j ∈ N with f ∈ ∗i (M) and g ∈ ∗j (M) thus
Q	Q
{f }◦Q{g}⊆ ∗i (M)◦Q∗j (M) = ∗i+j (M) ⊆ ∗Q(M).
Q	Q	Q
Let f ' = f + {a '→ g(b),b '→ g(b) | (a, b) ∈ Q} ∈ f + IdQ and g' = g +

{a '→ f (a),b '→ f (a) | (a, b) ∈ Q} ∈ g + IdQ. Then f + g = f ' |
π2(Q)∈

{f '}◦Q{g'} ⊆ ∗i (M)◦Q∗j (M) = ∗i+j (M) ⊆ ∗Q(M) according to the definition
Q	Q	Q
of ◦Q. Clearly ∗Q(M) = ∗Q(M)+ IdQ.
For example, for i > 0 we have

∗	  021   =  0



2+ j 1 

0  leading to

∗i+1
B@5CA


= ∗i
B@5CA
{(b ,b )}
B@5+ k CA k ≥ 0



=	B@5+ 3i + j CA j ≥ 0
(by “matching” with k = 3i + j) and

∗	  021   =  0 j 1 0
2+ j 1	0 

{(b1,b2)}
B@5CA


B@ j CA, B@2+ 3i + j CA i, j ≥

	

Remark: Adding IdQ is a crucial point: It corresponds to the monotonicity in Petri nets. Without this, deciding emptiness for the expressions would become undecidable.


Properties of the new operators
Obviously, it holds N◦QM = M◦Q−1 N. Furthermore, we can express the inter- section of N, M ⊆ NA by N◦Q' L◦Q'' M = N ∩ M with Q' := {(a, a') | a ∈ A}, Q'' := {(a'', a) | a ∈ A} and L := {{a '→ 1, a' '→ 1, a'' '→ 1}| a ∈ A}∗.
Note here that, in general, N◦Q' L◦Q'' M can only be written without brackets because π1(Q'')∪({a | ∃ f ∈ M, f (a) > 0}\π2(Q'')) and π2(Q')∪({a | ∃ f ∈ N, f (a) > 0}\ π1(Q')) are disjoint. If, additionally, π2(Q'') and {a | ∃ f ∈ N, f (a) > 0} are disjoint and {a | ∃ f ∈ M, f (a) > 0} and π1(Q')) are disjoint, then N◦Q' L◦Q'' M = L◦Q'−1∪Q'' (M + N).

Semilinearity
The class of semilinear sets is the smallest class of sets of multisets containing all finite sets of multisets and being closed under ∪, + and ∗. The semilinear sets are also closed under ∩, as shown in [8] and [5]. As a normal form to express semilinear sets, we will use the union of linear sets of the form c + Γ∗ for a constant c ∈ NA and periods Γ ⊆ NA.
The operator ◦Q preserves semilinearity: Assume N and M are semilinear sets over A, then

N' := {f ' | ∃f ∈ N∀a ∈ π1(Q) f '(a') = f (a) ∧ f '(a) = 0 ∧ ∀a ∈/ π1(Q) f '(a) = f (a)},
M' := {f ' | ∃f ∈ M∀a ∈ π2(Q) f '(a') = f (a) ∧ f '(a) = 0 ∧ ∀a ∈/ π2(Q) f '(a) = f (a)},
' := {{a' '→ 1, b' '→ 1}, {c '→ 1}| (a, b) ∈ Q, c ∈ A}∗
= {f | ∀(a, b) ∈ Q f (a') = f (b')}

are as well semilinear sets over the set A ∪ π1(Q)' ∪ π1(Q)' which is extended by
new elements. Thus, N◦QM = ((N' + M') ∩ E' ) |	'	' is semilinear. Since
Q  π1(Q) ∪π1(Q)
the closure under ∩ is effective, this will allow a decision algorithm to continue with

the representation
l
Lj
j=1
by linear sets
Lj.

On the other hand, ∗Q does not preserve semilinearity:

011
001∗
  0a1 

Let M := B@0CA + B@1CA , then ∗{(b ,b )}(M) =	B@ bCA c ≤ b2a
is not semilinear.

3 2
0	2	c

The reachability relation for Petri nets
The reachability relation for Petri nets without inhibitor arcs
We describe a Petri net as the triple N = (P, T, W ) with the places P , the transitions T and the weight function W ∈ NP ×T ∪T ×P . A transition t ∈ T can fire from a marking m ∈ NP to a marking m' ∈ NP , denoted by m[t⟩m', if

m − W (., t) = m' − W (t, .) ∈ NP .

A ﬁring sequence w = t1...tn ∈ T∗ can fire from m0 to mn, denoted by m0[w⟩mn, if m1, ...mn−1 exist with m0[t1⟩m1[t2⟩...[tn⟩mn. The reachability problem is to decide for a given net N with start- and end markings m0, me ∈ NP , if there is a w ∈ T∗ with m0[w⟩me.
Let P + := {p+ | p ∈ P} and P− := {p− | p ∈ P} be copies of the places. For any multiset, m we define the corresponding copies m− := {p− '→ m(p) | p ∈ P} and m+ := {p+ '→ m(p) | p ∈ P}. Then, we can define the reachability relation for

a transition t as
R(t) :=  m− + m'+ m[t⟩m',
=  r ∈ NP +∪P− ∀p ∈ P r(p−) − W (p, t) = r(p+) − W (t, p) ∈ N,

and the reachability relation for a set of transitions T as R(T ) :=	R(t).
t∈T
The important property of monotonicity means that whenever m[w⟩m', then
also (m+n)[w⟩(m'+n) for any n ∈ NP . This corresponds to adding IdP := IdPˆ with Pˆ := {(p+, p−) | p ∈ P} and R(t) can be written as the linear set R(t) = ct + IdP using ct with ct(p−) := W (p, t) and ct(p+) := W (t, p) for all p ∈ P . The reachability relation for the concatenation of two firing sequences is described by R(w1w2) = 
R(w1)◦P R(w2) with ◦P := ◦Pˆ and the iteration is done by ∗P := ∗Pˆ. We define the reachability relation of the Petri net N as R(N ) := R(T∗) := ∗P (R(T )). The
reachability problem formulates as (m− + m+) ∈ R(N ).
0	e

Lemma 2.1 There is a ﬁring sequence w ∈ T∗ with m0[w⟩me in N if and only if
m+◦P R(N )◦P m− = (m− + m+)◦ˆP +∪P− R(N ) = {∅}.
0	e	0	e
(If there is no w ∈ T∗ with m0[w⟩me, we have (m− + m+)◦ˆP +∪P− R(N ) = ∅.)
0	e

Proof. There is a firing sequence t1...tn ∈ T∗ with m0[t1⟩m1[t2⟩...[tn⟩mn = me in
N if and only if (m−  + m+) ∈ R(ti) for all 1 ≤ i ≤ n if and only if (m− + m+) ∈
i−1	i	0	e
R(t1)◦P R(t2)...◦P R(tn) if and only if (m− + m+) ∈ R(T )◦P R(T )...◦P R(T ) = 
0	e
∗n (R(T )) if and only if (m− + m+) ∈ ∗P (R(T )) = R(N ) and only this multiset
P	ˆ0	e
can “match” according to P .	 


Example:
Consider the following Petri net N with
R(t1) = {p− '→ 1, p+ '→ 2} + IdP ,	,,
2	1	t1 	) p1
R(t2) = {p− '→ 3, p+ '→ 2} + IdP ,	2  J
1	 2 −	+	−	+ ,	^
	

0 = {p1 '→
and me = {p1 '→ 1, p2 '→ 2}.
, p2 '→ }
p2 (2 
 J

By concatenating, we get for example
R(t t ) = R(t )◦ R(t ) =  p− , p− , p+  + Id

and

R(t t t ) = p− , p+ , p+ + Id .	2	)
In this way we get (m− + m+) =  p− , p− , p+ , p+ 

∈ R(

t1t2t1t1t2
−	−	+	+
1	2	2
1	1	1	2
dP ⊆
R(N ).
t1 z	 
za		) )
1	2	3	p1

By further concatenating and iterating, we get
R((t t )∗) = p− , p+ + p− , p+ ∗ + Id ,
R(t t ) = R(t )◦ R(t ) =  p− , p+ , p+  + Id ,
R((t t )∗) = p− , p+ + p− , p+ ∗ + Id ,
R(t t t ) =  p− , p+  + Id ,
R((t t t )∗) = p− , p+ + p+ ∗ + Id ,
R((t t t )∗) = p− , p+ + p+ ∗ + Id ,
R((t t t )∗) = p− , p+ , p− , p+ + p+ ∗ + Id ,


...,
1 2 1
2	2	1	2	1
1	1	1	1	1

which finally yields R(N ) = R(T∗) = ∗
   p− , p+ , p− , p+ , =

1	2
1	2	3	2
  p− , p+ , p− , p+ ,∗ + Id	∪
  p− , p+ , p− , p+ , +  p− , p+ , p− , p+ , p− , p+ ,∗ + Id	∪
  p− , p+ , p− , p+ , p− , p+ , p− , p+ , p− , p+ , p− , p+ , p+ , p− , p− , p+ ,
 p− , p+ , +  p− , p+ , p− , p+ , p− , p+ , p+ , p+ ,∗ + Id

Petri nets with inhibitor arcs
An inhibitor arc from a place to a transition means that the transition can only fire if no token is on that place.  We describe such a Petri net as the 6-tuple (P, T, W, I, m0, me) with the places P , the transitions T , the weight function W ∈ NP ×T ∪T ×P , the inhibitor arcs I ⊆ P ×T and, the start and end markings m0, me ∈ NP . We will denote an inhibitor arc in the pictures by ————• .
A transition t ∈ T can fire from a marking m ∈ NP to a marking m' ∈ NP , denoted by m[t⟩m' if
m − W (., t) = m' − W (t, .) ∈ NP and ∀p ∈ P (p, t) ∈ I → m(p) = 0.
A firing sequence w = t1...tn ∈ T∗ can fire from m0 to mn, denoted by m0[w⟩mn, if there exist intermediate markings m1, ...mn−1 with m0[t1⟩m1[t2⟩...[tn⟩mn.
The reachability problem for a Petri net (P, T, W, I, m0, me) is to decide, whether there exists a w ∈ T∗ with m0[w⟩me.
In the following two lemmata, we restrict the cases for which we have to regard the reachability problem. (See the [17] for proofs).
Lemma 2.2 Each Petri net (P, T, W, I, m0, me) can be changed in such a way that the condition ∀p ∈ P, t ∈ T (p, t) ∈ I → W (t, p) = 0 holds without changing the inhibitor arcs or the reachability problem.

Lemma 2.3 Each Petri net (P, T, W, I, m0, me) can be changed in a way such that the condition ∀p ∈ P, t ∈ T (p, t) ∈ I → m0(p) = me(p) = 0 holds by changing neither the inhibitor arcs, the condition in Lemma 2.2 nor the reachability problem.
The reachability relation for Petri nets with one inhibitor arc
Let us consider a Petri-net N = (P, T, W, {(p1, tˆ)}, m0, me) having the property of lemmata 2.2 and 2.3. As in the case of no inhibitor arcs, we can describe by
R(N') = ∗P (R(T \ {tˆ})) for the Petri net N' = (P, T \ {tˆ},W |	ˆ	ˆ	) the
P×{t}∪{t}×P
reachability relation for firing sequences w ∈ (T \ {tˆ})∗. The restriction to those firing sequences starting and ending with markings without tokens on p1 can be described by R(tp (N')) := {r ∈ R(N') | r(p−) = r(p+) = 0}.  In R(N ) :=
1	1	1
∗P\{p }(R(tp (N')) ∪ R(tˆ)) with R(tˆ) = cˆ+ IdP\{p } we iterate these parts together
1	1	t	1
with the alternative of using tˆ. Generalizing Lemma 2.1 we get the following:
Lemma 2.4 Given a Petri-net N = (P, T, W, {(p1, tˆ)}, m0, me) with only one in- hibitor arc (p1, tˆ) having the property of lemmata 2.2 and 2.3, then there is a ﬁring sequence w ∈ T ∗ with m0[w⟩me if and only if

m+◦P\{p }R(N )◦P\{p }m− = (m− + m+)◦ˆ +	−
+  − R(N ) = {∅}.

0	1	1	e
0	e	P ∪P
\{p1 ,p1 }

(If there is no such w ∈ T∗, we have (m− + m+)◦ˆ +	−
+  − R(N ) = ∅.)

0	e	P  ∪P
\{p1 ,p1 }

Proof. Since m0(p) = me(p) = 0 according to Lemma 2.3, a firing sequence w ∈ T∗ can be decomposed in minimal firing sequences w1...wk = w having the property m0[w1⟩m1[w2⟩...[wk⟩mk with mk = me such that mi(p1) = 0 for all i ≤ k.
Each wi is either in (T \ {tˆ})∗ or equal to tˆ by Lemma 2.2 and minimality of wi. This holds since the occurrence of tˆ in a wi with |wi| > 1 would mean that, at that time during the firing of wi, there is no token on p1, and thus, wi would not be minimal.

If wi ∈ (T \ {tˆ})∗ then m−
+ m+ ∈ R(N').  Then from mi−1(p1) = 0 and

mi(p1) = 0 it follows that m−
+ m+ ∈ R(tp (N')). Otherwise, if wi = tˆ, we have

—
i−1
+ m+ in R(tˆ).
i−1	i	1

Concatenating all with the operator ∗P\{p } leads to m− + m+
is in R(N ),

1	0	e
which means (m− + m+)◦ˆP +∪P− R(N ) = {∅}.
0	e
The other direction follows simply by composing firing sequences.	 





Example:
Consider the Petri net N




,,
	)	)
3	2

 J
^

,,	•


,7,

p2 ( 5	
 J
tˆ ( 7	 p3
 J

with the start marking {p2 '→ 4, p3 '→ 2} and the end marking {p2 '→ 4, p3 '→ 3}. We have R(t7) = {p− '→ 1, p+ '→ 3} + IdP , R(t8) = {p− '→ 2, p+ '→ 1} + IdP and
2	1	1	3
R(tˆ) = {p− '→ 7, p+ '→ 5} + IdP\{p }. This yields
3	2	1

R(N
') = R((P, {t7, t8},W |

ˆ	ˆ	)) = ∗P
   p−
p+
,
— p+   =

P×{t}∪{t}×P
1	3	2	1

  p− , p+ , p− , p+ , p− , p+ , p+ , p− , p− , p+ , p− , p+ , p+ , p− , p+ ,∗ + Id

and R(t
(N')) = R(N')◦
{∅} =   p− , p+ ,∗ + Id	.

We can cut the firing sequences in (t7 + t8 + tˆ)∗ = ((t7 + t8)∗ + tˆ)∗ into parts in (t7 + t8)∗ and tˆ all starting and ending with no token on p1. This yields R(N ) :=
∗{p ,p }(R(tp (N')) ∪ R(tˆ))

2 3
p−  p+
1
p−  p+
p− p− p+
p− p− p+
p−  p+  p+
p−  p+  p+

2	3	3	2	2
2	3	7	5	2
3	2	2
4	5	4
3	2	3
1	5	7
2	3	3
3	3	7
2	3	, ...,

 p− , p− , p+ , p− , p− , p+ , p+ , p− , p+ , p+ , p− , p− , p+ , p+ ,∗ + Id	.

Nested Petri Nets as normal form for expressions
From now on we use the variables t, T, N as expressions describing transitions, sets of transitions and (sub-)nets. For an expression e, we will always define a carrier set C(e) ⊇ {a | ∃ f ∈ R(e), f (a) > 0}}. The function R was in the previous section giving the reachability relation R(e) ⊆ NC(e) for an e of the form t, N or T . Now, we use R as the evaluation function for an expression where the expression operators
∗P , ◦Q, ∪ and +, and the operator ∩ will always be defined on expressions such
that they commute with R.
Let the expression for an elementary transition have the form t = Lt, where Lt is an expression for the linear set Lt = R(Lt) = ct + Γ∗ described by a (constant) multiset ct and a finite set of (period-) multisets Γt. For example, in Sections 2.1 and 2.3, we have Γt = {{p− '→ 1, p+ '→ 1} | p ∈ P} leading to Γ∗ = IdP . We have
C(t) := C(Lt) := P− ∪ P + ∪ {a | ∃ f ∈ {ct}∪ Γt, f (a) > 0}.
Let the expression for sets of transitions be T = t1 ∪ t2... ∪ tl for expressions for transitions ti ∈ T for i ≤ l, and the expression for a sub-net with places PT and transitions T be N = ∗PT (T ). Let C(N ) := C(T ) :=  t∈T C(t).
Let the expression for a generalized transition have the form t = Lt◦ˆAt Kt, where
Lt again expresses a linear set, and Kt is a set of sub-nets and interpreted as
expression Kt =	Ni where the C(Ni) are pairwise disjoint and At := C(Kt) :=
Ni∈Kt
Ni∈Kt C(Ni).
We define C(t) := {a | ∃ f ∈ {ct} ∪ Γt, f (a) > 0} \ At.  This means that the

behavior of t is mainly described by the linear set ct + Γ∗ additionally controlled by the reachability in the sub-nets Ni.
⊆ NC(t)∪At  but it is

For example, the reachability question for a complete net in Lemma 2.1 and Lemma 2.4 is formulated as the control by a (sub-)net in t with R(t) = (m− +

m+)◦ˆP +∪P− R(N ) respectively R(t) = (m− + m+)◦ˆ +	−
+ − R(N ) in a way

e	0	e	P ∪P
\{p1 ,p1 }

that already has this normal form for expressions with ct = (m− + m+) and Γt = ∅.
0	e
However, the behavior on the outside is trivial (∅ or {∅}) because C(t) = ∅ in this

case. The same holds for (m− + m+)◦ˆ +	−	∗P
(Tg−1) in Theorem 5.1.

0	e	PTg−1 ∪PTg−1
Tg−1

The decision algorithm below will start with an expression of the form T = {t} by keeping in mind that, according to Lemma 2.4, R(T ) = R(t) = {∅} if there is a firing sequence w ∈ T∗ with m0[w⟩me. Otherwise R(T ) = R(t) = ∅ if there is not.
An example for the general case is R(tp (N')) := {r ∈ R(N') | r(p−) = r(p+) = 
1	1	1
0} form Section 2.3. Here we need Lemma 3.1 to construct the expression t{p }(N')
of the desired normal form with R(tp (N')) = R(t{p }(N')). Again, th in Theorem
1	1
5.1 has the normal form for expressions.


Lemma 3.1 Let N be an expression for a subnet. Then, we can construct an equivalent expression for a transition t(N ) with R(t(N )) = R(N ) and tP ' (N ) with R(tP ' (N )) = {m ∈ R(N ) | ∀p ∈ P ' m(p−) = m(p+) = 0}.


Proof. Define t(N ) by ct(N) := ct ' (N ) := ∅, Γt(N) := {{q '→ 1, qˆ '→ 1} | q ∈
C(N )} and Kt(N ) := {Nˆ} where Nˆ is the result of replacing all occurrences of some
q ∈ C(N ) in N by qˆ. This means that we make the C(Nˆ) disjoint to C(t(N )).
The restriction of places in P ' to 0 is done by Γt  (N) := {m ∈ Γt(N) | ∀p ∈
P ' m(p−) = m(p+) = 0}.	 




Example (continued):
We identify t7 = {pˆ− '→ 1, pˆ+ '→ 3} + Id{pˆ ,pˆ ,pˆ }, t8 = {pˆ− '→ 2, pˆ+

'→ 1} +

2	1	1 2 3	1	3

Id{pˆ ,pˆ ,pˆ } and tˆ = {p−
'→ 7, p+
'→ 5} + Id{p ,p }.  This yields the expressions

1 2 3	3	2	2 3
T1 = t7 ∪ t8 and N1 = ∗{pˆ1,pˆ2,pˆ3}(T1). On the next level, we get the generalized transition t2 = tp (N')
 ∅ +  p− , pˆ− , p− , pˆ− , p+ , pˆ+ , p+ , pˆ+ ,∗ ◦ˆ	N ,
which we visualize as	,		 
,,
	)	)
3	pˆ1	2

 J
=	^
,,
pˆ2
 J

,7,
pˆ3
 J

  		J
T2 = t2 ∪ tˆ and N2 = ∗{p ,p }(T2). On the top level, we get

2
T = t
3
= p− , p− , p+ , p+ ◦ˆ	N ,

which we visualize as follows:
,		 
z	,,
) p3
// /  \J
\3

/
7	\\€

\
/// / 



p2 (
/// 7  4
tˆ

  J5
  		J

The property T
In order to decide the emptiness problem for expressions, we want to establish a normal form T , which corresponds to the condition Θ in [12]:
Definition 3.2 An expression T has the property T if ∀t ∈ T, ∀Ni = ∗PT (Ti) ∈ Kt
the following conditions hold:
In recursive manner, Ti has
the property T , and
For all t' ∈ Ti it holds ∀g ∈ {ct' }∪ Γt' ∃wg ∈ C(t') g(wg) = 1,
∀g' ∈	{ct' }∪ Γt' \ {g} g'(wg) = 0.
t'∈Ti
This condition says that the number of times where g is used is exactly the number of occurrence of the witness (place) wg.

∀g ∈ {ct}∪ Γt, ∀p ∈ PTi
g(p−) − ind(g)(p−) = g(p+) − ind(g)(p+), where

ind(g) :=
t'∈Ti,g'∈{ct' }∪Γt'
g(wg' )g

describes the indirect effect of g using the property about the witness places in Condition 1 in the recursion for Ti. This property says that g(wg' ) is exactly the number of times that g' is used. Thus, ind(g) contains a quantitative information about the firing sequences which are allowed by g. The condition says that (disregarding the real control by the sub-net Ni) the quantitative information is consistent with the expected control.
∀w ∈ C(Ni) \ (P + ∪ P−)	Σ g(w) > 0. This condition says that each witness

Ti	Ti
g∈Γt

appears in a period and, thus, the use of each interior transition and period is unlimited.
There are multisets ∃m+, m− ∈ R(Ni) with ∀p ∈ PTi

m+ |
— ∈ (ct + Γ∗) | − ∧((∀g ∈ Γt g(p−) = 0) → m+(p+) > m+(p−))∧

PTi	t  PTi

m− |
+ ∈ (ct + Γ∗) | + ∧((∀g ∈ Γt g(p+) = 0) → m−(p−) > m−(p+)).

PTi	t  PTi
This condition says that there is a firing sequence in the sub-net Ni quantita-

tively described by m+. This firing sequence starts with a marking available by ct + Γ∗ and increases all those places which cannot be increased by Γt.
ct |C(t)∈ R(t). This condition says that transition t can fire without the use of one of its periods in Γt.

The size of an expression
To prove the termination of the algorithm in Section 4, we have to define an ordering on a size S which is Noetherian and decreasing in every step of the algorithm:
A list (tuple, respectively) is smaller than another if the first i elements are equal and the i + 1’th element is smaller (or not existing). A multiset m is smaller than a multiset m' if there is an e with m(e) < m'(e) and m(e') = m'(e') for all e' > e. (Thus multisets may as well be interpreted as a descending ordered list using lexicographic order.)
The smallest size is S(∅). Accordingly, if T = ∅ then T has the property T .
The size S(T ) =   {S(t) '→ 1} is a multiset of all sizes S(t) with t ∈ T . The
t∈T
size of t is S(t) := (S(Kt), b2, b5 + |Γt|). Here, bi = 0 if Condition T .i is fulfilled, and
bi = 1 otherwise. The size S(Kt) =	{S(Ni) '→ 1} of a set of nets is a multiset
Ni∈Kt
of the sizes S(Ni) of the nets Ni ∈ Kt. The size of a net is
S(Ni) := (sm + {|PTi | '→ 1}, S(Ti), b1b, |C(Ni)|)

with sm := max{s | ∃g, f, b2, b'
, e, s' s'((s, g, b'
,f )) > 0, S(Ti)((s', b2, e)) > 0}. In

other words, the first component is a multiset in NN which is obtained by taking the maximal of such multisets of all first components in the size of a subnet of one of the transitions in Ti (respectively ∅ if none exists) and adding the current number of places. The second component contains the recursion. The reason for this complicated construction comes from Section 4.4 where the recursion-depth increases but the size has to decrease. Furthermore, this causes S(Ni) to be greater than the size of its occurring subnets. This is also necessary in parts where the

Expression	Carrier set

T	T .1.b
c	Γ	z¬z
C(T ) =  ˆ
⎧⎪⎨ C(t) = P− ∪ P + ∪{ v  g	}


Ni ∈ Kt Ti
At =	C(Ni) =	C(Ti) = 
	T .1.b	 i	i	i	



'	c	Γ
z¬z
⎧⎪⎨ C(t') = P− ∪ P + ∪{ c v '	}

Fig. 1. An overview over the e⎩xprAests'i.o.n. s and their carrier sets.

algorithm works recursively since it follows that S(Kt' ) < S(Kt) for all t' contained one or more levels deeper in Kt.
Example (continued):
S(t7) = S(t8) = (∅, 0, 3), S(T1) = {(∅, 0, 3) '→ 2},
S(N1) = ({3 '→ 1}, {(∅, 0, 3) '→ 2}, 1, 6), S(t2) = ({S(N1) '→ 1}, 1, 4),
S(T2) = {S(t' ) '→ 1, (∅, 0, 2) '→ 1}, S(N2) = ({3 '→ 1, 2 '→ 1}, S(T2), 1, 4).
Lemma 3.3 The ordering on S deﬁned above is Noetherian
Proof. As shown in [4], the set of descending ordered lists of elements of a Noethe- rian ordered set is again Noetherian. The first components of the quadruples S(N ) are descending lists of natural numbers and, thus, Noetherian.
Assume by contradiction that x is the smallest first component such that there is an infinite descending sequence of quadruples
S(N ) = (x, y1, b' , n1), (x, y2, b' , n2), ....
1	2
In all quadruples appearing in all lists in all triples appearing in any yi, the first component must always be smaller than x and, therefore, their order must be Noetherian. Thus, the lists which are the first components of the triples are also ordered Noetherian. Since the other components are natural numbers, the triples and the yi’s are also ordered Noetherian. Since the first component x must re- main constant, and the third and forth components are natural numbers, we get a contradiction; thus, S(T ) is Noetherian.	 

Additional operators working on expressions
The following lemma is used to restrict the semilinear part in a transition t as it will be needed to establish the property T .2
Lemma 3.4 Let t = Lt◦ˆAt Kt be an expressions for a transition and L be (an expression for) a semi linear set. Then, we can construct an expression T ' = t|L (with R(T') = (R(Lt)∩R(L))◦ˆA R(Kt)) where the occurring sizes S(t') with t' ∈ T ' can increase relatively to S(t) only in the last position in the triple.
Proof. Using Presburger arithmetic [8],[5], we can calculate for every t ∈ T the semi-linear set
l
Lt ∩ L =:	Lj
j=1
resulting in finitely many linear sets Lj, and define T ' := t|L := {Lj◦ˆAt Kt | j ≤ l}. 
An Example is given in Subsection 4.2 where Lt ∩ L consists of only one linear set and thus T ' consists of only one transition.
The following Lemma 3.5 and Lemma 3.1 allow us to bring every expression into the normal form as nested Petri nets:
Lemma 3.5 Let T and T ' be expressions for sets of transitions, and Q be a relation. Then, we can construct an expression T '' := T◦QT' (with R(T'') = R(T )◦QR(T'))

where the occurring sizes S(t) can increase only in the last position in the triple and sum up in the ﬁrst position.


Proof. We may assume that   At, 


At and π1(Q) ∪π2(Q) are pairwise disjoint


T '' :=  Lj◦ˆA ∪A (Kt + Kt' )
t	t'

t ∈ T, t' ∈ T ',j ≤ r , Lt◦QLt' =:

r
Lj
j=1



holds R(T )◦QR(T') = 
t∈T,t'∈T '
R(t)◦QR(t') = 

((Lt◦ˆA (R(N1)+ ...))◦Q(Lt' ◦ˆA ' (R(N' )+ ...))) =

((R(N1)+ ...)◦ˆ −1 Lt◦QLt' ◦ˆA ' (R(N' )+ ...)) =
(Lt◦QLt' )◦ˆA ∪A ' (R(N1)+ ... + R(N' )+ ...) = R(T '')

since At, At' and π1(Q) ∪ π2(Q) are pairwise disjoint. (see Subsection 1.2.)	 

Examples are given in Subsections 4.3 and 4.4.
From this we can conclude some decidability result for the first order formulas with PLUS and the monotone transitive closure mTC defined as follows:
Given a formula φ(x1, ..., xk, x' , ..., x' ), then mTC(φ) denotes the smallest set
1	k
S ⊂ N2k containing all of the following:
(x1, ..., xk, x1, ..., xk) for (x1, ..., xk) ∈ Nk (this stands for the identity),
(x1, ..., xk, x' , ..., x' ) for φ(x1, ..., xk, x' , ..., x' ),
1	k	1	k
(x1, ..., xk, x'', ..., x'') for (x1, ..., xk, x' , ..., x' ), (x' , ..., x' , x'', ..., x'') ∈ S, and
1	k	1	k	1	k	1	k
(x1 + x'', ..., xk + x'', x' + x'', ..., x' + x'') for a (x1, ..., xk, x' , ..., x' ) ∈ S and
1	k	1	1	k	k	1	k
(x'', ..., x'') ∈ Nk.
1	k

Corollary 3.6 The emptiness and satisﬁability is decidable for formulas with an FO+PLUS-formula inside and ∧, ∨, ∃ and mTC operators outside.

Proof. We can express linear sets by a t and, thus, semilinear sets by a T . Now, observe that the operators work on expressions of the form T as follows: We can express ∧ corresponding to ∩ with ◦Q (see Section 1.2) and apply Lemma 3.5. For
∨ this follows simply from T being already a union. The existential quantifier is done by removing the element (thus, releasing the control from the outside) and the operator mTC is done by using Lemma 3.1. Then we construct T ' according to Theorem 4.1. According to Condition 5 of property T , R(T ) = R(T') is empty if and only if T ' = ∅.	 

The main algorithm
The idea of the algorithm is to reduce T if one of the conditions is not fulfilled. For Condition 2, Presburger arithmetics is used to transfer the implicit quantitative restriction by the witness places to the explicit restriction of the transitions. Condi- tion 3 ensures that all quantitative controls are unlimited. Condition 4 ensures that all places are unlimited. A covering graph construction deciding Condition 4 uses the algorithm recursively (like for Condition 1) for every step. Here, the current marking of a node is being included as a restriction to the semilinear set. Limited places are deleted at the cost of a larger structure. This larger structure, however, contains parts which are generated by restricting parts. This restriction might cause them to loose the property 7 reached by a previous recursive step. However, as we will see because of their smaller size, the property 7 can be established again and the whole algorithm will still terminate.
Theorem 4.1 For every expression T , we can effectively construct a T ' with
R(T ) = R(T') such that T ' has property 7 .
Proof. The expression T ' in the Theorem is computed by the following algorithm where the details are explained in the subsections:
function reacheq(T ):
begin
repeat
i:= 1
while i≤5 and 6t ∈ T, 6N ∈ Kt Condition 7 .i fulfilled
do i:=i+1 od
if i=6 then return T
else T :=T' for T ' according to subsection 4.i fi until i=6
end reacheq
in each step S(T ) decreases (S(reacheq(T )) < S(T ) if T /= reacheq(T )); due to Lemma 3.3 the algorithm terminates.	 
The following table shows how the size S(t) can change during the steps of Chapter 4:

Corollary 4.2 The reachability problem for a Petri net with one inhibitor arc is decidable.

Proof. According to Lemmata 2.4 and 3.1, we can construct an expression T where R(T ) = {∅} (and is not empty) if and only if there is a firing sequence w ∈ T∗ with m0[w⟩me. Then, we construct T ' according to Theorem 4.1. According to Condition 5 of property 7 , R(T ) = R(T') is empty if and only if T ' = ∅.	 

Remark: Alternatively, instead of using Lemma 2.4, we can construct T for a given net N = (P, T, W, {(p1, tˆ)}, m0, me) directly by connecting three sub-nets with a linear set in such a way that the first sub-net expresses firing sequences in (T \ {tˆ})∗ starting with m0 before the first firing of tˆ, the second contains only one transition which has a sub-net itself expressing firing sequences ∈ (tˆ(T \ {tˆ})∗)∗ ending with markings without tokens on p1 and the third sub-net expresses firing sequences in (T \ {tˆ})∗ ending with me.

Condition 1 Recursion and introducing witnesses
Let Condition 1 be not fulfilled by Ti; let T ' := reacheq(Ti), which terminates by

induction since S(Ti) < S(T ).
For all tj ∈ T ' let Gj be the set of all g ∈ {ct }∪ Γt

not having a witness. Add

i	j	j
witnesses{wg' | g ∈ Gj} to C(t' ) := C(tj) ∪ {wg' | g ∈ Gj} by replacing each g in
Gj by g' := g + {wg' '→ 1} in

⎨	tj ∈ T ', At'
= At , Kt'
= Kt ,	⎫⎬

T '' :=	t'
⎩	 
i	j	j	j	j	.
'	⎭




t	i	i	T	i
i
At' = At ∪ C(N'') and Γt' := Γt ∪ {{w '→ 1} | w ∈ C(N'') \ C(Ni)}, and let
i	i
T ' := T \ {t}∪ {t'}. Since R(Ti) = R(T '') |C(T ), we have R(Ni) = R(N'') |C(T );
i	i	i	i
thus, R(t) = R(t'); thus, R(T ) = R(T').
Since S(tj) = S(t' ) for all tj ∈ T ', the size S(T '') = S(T') remains unchanged.
j	i	i	i
The only increase was |C(N'')| ≥ |C(Ni)| but but we have either S(T '') = S(T') <
i	i	i
S(Ti), or in case T ' = Ti, we have now b1b = 0. From that follows that S(N'') <
i	i
S(Ni); thus, S(t') < S(t) and S(T') < S(T ).
Example (continued):
Since the expression T1 does not fulfill Condition 1, we add the two witnesses wc '
t7
and wc ' .  For simplicity, we omit the witnesses for the periods for IdP in the
t8
elementary transitions. So we replace t7 and t8 by t' = {pˆ− '→ 1, pˆ+ '→ 3, wc	'→
7	2	1	'
7

1} + Idpˆ ,pˆ ,pˆ
and t'
= {pˆ−
'→ 2, pˆ+
'→ 1, wc
'→ 1} + Idpˆ ,pˆ ,pˆ . This yields

1 2 3	8	1	3	'
8
1 2 3

the expressions T '' = t' ∪ t' and N'' = ∗{pˆ ,pˆ ,pˆ }(T ''). On the next level, we get
1	7	8	1	1 2 3	1
t' = (∅ + {{p− '→ 1, pˆ− '→ 1}, {p− '→ 1, pˆ− '→ 1}, {p+ '→ 1, pˆ+ '→ 1}, {p+ '→ 1, pˆ+ '→
2	2	2	3	3	2	2	3	3
1}, {wc ' '→ 1}, {wc ' '→ 1}}∗), ◦ˆ − − + + N'' for the generalized transition and

t7	t8
T ' = t' ∪ tˆ.
{pˆ2 ,pˆ3 ,pˆ2 ,pˆ3 } 1

2	2
The new sizes are now S(t' ) = S(t' ) = (∅, 0, 3) = S(t7),
7	8
S(T '') = {(∅, 0, 3) '→ 2} = S(T1),

S(N'') = ({3 '→ 1}, {(∅, 0, 3) '→ 2}, 0, 8) < S(N1),
S(t' ) = ({S(N'') '→ 1}, 1, 6) < S(t2),
2	1
S(T') = {S(t' ) '→ 1, (∅, 0, 2) '→ 1} < S(T2).
2	2

Condition 2 Quantitative consistency
Let Condition 2 be not fulfilled by Ti. The set L :=

 g ∈ NCL 6p ∈ 


Ni∈Kt

PTi
g(p−) − ind(g)(p−) = g(p+) − ind(g)(p+) ,

on the carrier set CL = C(t) ∪	C(Ni) is a Presburger set. Since R(t) ⊆
Ni∈Kt
L|C(t) follows from the definition of R(t) and the function ind, we can set T ' :=
T \ {t}∪ t|L using Lemma 3.4. In other words, we have cut something away which could not have been in R(T ) anyway.
Since b2 is now 0 for each tj ∈ t|L and S(Ktj ) remains the same as S(Kt), according to Lemma 3.4, it holds S(T') < S(T ).
Example (continued):
We see that t' does not fulfill Condition 2 when we look at the resulting equation
−	−	−	+	+	+
g(pˆ ) − g(wc ' )ct' (pˆ ) − g(wc ' )ct' (pˆ ) = g(pˆ ) − g(wc ' )ct' (pˆ ) − g(wc ' )ct' (pˆ )

t7	7
t8	8
t7	7
t8	8

for all p ∈ P characterizing L. This is equivalent to the following three equations:

2g(wc
) = 3g(wc ), g(pˆ−) − g(wc
) = g(pˆ+), g(pˆ−) = g(pˆ+) − g(wc
). Their

'	'	2
8	7
'	2	3	3	'
7	8

solutions are described by the linear set Lt'' = Lt' ∩ L =

  p−
pˆ−
p+ pˆ+ 
 p−
pˆ−
2
p+ pˆ+ 
2
 wc	wc
p− pˆ−
p− pˆ−  ∗

and yield t''
= t' |L = Lt'' ◦ˆ
− + −
+ N''
with S(t'') = ({S(N'') '→ 1}, 0, 3) <

2	2	2 {pˆ2 ,pˆ2 ,pˆ3 ,pˆ3 } 1	2	1
S(t' ). Since T '' = t'' ∪ tˆ fulfills the remaining properties, we can continue one level
2	2	2
higher.
Adding the witnesses leads to Lt''' =
+  p− , pˆ− , p+ , pˆ+ , w1 , p− , pˆ− , p+ , pˆ+ , w2 , wc ' , wc ' , p− , pˆ− , p− , pˆ− , w3 ,∗
(we omit the witness for ∅.) with S(t''') = S(t'') = ({S(N'') '→ 1}, 0, 3).
2	2	1

Defining T '''
= t''' ∪ tˆ' with S(T ''') = S(T '') and N'''
= ∗{pˆ ,pˆ ,pˆ }(T ''') with

2	2	2	2	2	1 2 3	2
S(N''') = ({3 '→ 1, 2 '→ 1}, S(T '''), 0, 8) < S(N'') = ({3 '→ 1, 2 '→ 1}, S(T '''), 1, 4)
2	2	2	2
we get

t' =  p− , p− , p+ , p+ +  w1 ! , w2 ! , w3 ! , wc ' ,∗ ◦
N'''.
  


Establishing Condition 2 leads to
t'' =  p− , p− , p+ , p+ , w3 , wc '  +  w1 ! , w2 !}∗ ◦




N'''.
  

Condition 3 Elimination of witnesses
Let Condition 3 be not fulfilled by witness w ∈ C(Ni) \ (P + ∪ P−). This means
Ti	Ti
that we can replace Ni by some expression Tˆ with R(Tˆ) = R(Ni)◦ˆ{w}ct|w since for
all m ∈ Lt, we have m(w) = ct(w). Then, we can set
T ' := T \ {t}∪ (Lt |	◦ˆA \C(N )(Kt \ {Ni}))◦ˆC(N )\{w}Tˆ
which repaces the transition t = Lt◦At Kt by all those sets of transitions which result from using Lemma 3.5 (because Tˆ is not a net). This means that Ni is removed
and the equivalent Tˆ is plugged in at the same range; thus, R(t) = R(Lt) |{w}
◦ˆA \{w}(R(Kt \ {Ni})+ R(Tˆ)).
To create Tˆ =	Tγ, we consider every possible combination γ (including the
γ

lγ
order of the summands) of ct(w) = 
m=1
gm(w) with gm ∈ ctm + {g ∈ Γtm | g(w) >

0}∗, gm(w) > 0 and tm ∈ Ti and build t'
with Lt'  = gm |{w} +{g ∈ Γtm | g(w) = 

0}∗ and Kt' := Kt . The expressions t'
m
describe the parts in which w was used.

In N' = ∗P ' (T ') with T ' :=
i	T	i	i
i
{t	| t  ∈ Ti, ct'' = ct''' , Kt''' = Kt'' , ct'' (w) = 0, Γt''' = {g ∈ Γt'' | g(w) = 0}},
we filter out everything which affects w; thus, C(N') = C(T') = C(Ti) \ {w} and
i	i
R(N') = {m ∈ R(Ni) | m(w) = 0}. Then, using Lemma 3.1, we construct t(N')
i	i
which has now the property R(t(N')) = {m ∈ R(Ni)|m(w) = 0}. Now, we define


Tγ := t(N')◦P
t' ◦P
t(N')◦P  t' ◦P
...◦P
t' ◦P  t(N')

i

again using Lemma 3.5.
T ' 1	T'
i	i
i	T' 2	t i
T ' lγ	T '	i
i	i

It holds S(Kt' ) < S(Kt) for every new t' in T ' because of S(N') < S(Ni). This
in turn follows from |C(T ')| = |C(Ti)|− 1 and S(N ) < S(Ni) for all N ∈ Kt , and
i	m
m ≤ lγ for all γ.
It holds S(T') < S(T ) since S(t') < S(t) for every t'.

Example: Consider t with c = w , p− , p+ , 6g ∈ Γ
g(w) = 0, K
= {∗
(v∪t )},

and c	= w , p− , p+ , q− , q+ , K	= {∗	(u)}.
,	,,, 
q
/  cc  zJza

//
 <6  
/J7

2	) ,,/L/	)
4	 J 5
  		J
Then t' is defined such that c	=  p− , p+ , q− , q+ , p− , p+ , q− , q+ , p− , p+ , fur-


thermore,

−	+	−
1	0	2
1	1	1
'	0	0	1	1
4	6	8	9


1	∈ Γt' and
1	1	2	2	2	2
7	6	8	9	7	5

Kt = {∗{p0}(v0), ∗{q1}(u1), ∗{p1}(v1), ∗{q2}(u2), ∗{p2}(v2)}, where pi, qi, vi and ui
are replacements caused by disjointness condition in Lemma 3.5.
, , , , , 
,, ,, ,, ,, ,,

p0 a
q1 a
p1 a
q2 a
p2 a

 J  J
  6+y
 J 7+ y	J

4	6+x	8	9	7+x	8	9	5
 J J J J J
The variables x and y illustrate the effect of the periods in Γt' which originate from the (omitted) periods of tj.

Condition 4 Elimination of bounded places
Condition 4 is decidable by two covering graph constructions for every i working as follows: Every node in the covering graph CG(i,+) (CG(i,−), respectively ) has a

marking from (N ∪ {ω})
—
Ti ((N ∪ {ω})
+
Ti , respectively ). The root of the covering

graph CG(i,+)
has the marking ct |P−
Ti
+ω{p−|∃g∈Γg(p−)>0}.

For a node in CG(i,+) marked with m, we construct T '
with R(T') = {g ∈

R(Ti) | g |
— ≤ m} using Lemma 3.4 as T ' := {t'|{g∈L
| g|
≤m} | t' ∈ Ti}. This

PTi
i	t'	P−
Ti

restricts the allowed multisets to those which are possible starting with the limited marking m. All Kt' with t' ∈ T ' appear in the subnet Ni in t (unchanged by Lemma 3.4). For all N' ∈ Kt' , we have S(N') < S(Ni) since the first component in S(Ni) is
{|PTi | '→ 1} plus the maximum of everything one level deeper. Therefore, we have
S(Kt' ) < S(Kt) for all t' ∈ T ' and, thus, S(T') < S(T ). This allows us to compute
i	i
T '' := reacheq(T') recursively.
i	i
For every t'' ∈ T '', (since we know from Condition 7 .5 that ct'' alone can fire),

we add a new node
'

−	+	+

m := m − ct'' |P− +{p
Ti
'→ (ct'' (p
)+ ω	Σ
g∈Γt''
g(p
)) | p ∈ PTi }

to the covering graph CG(i,+). According to Corollary 4.4, there is no limit for the number of appearances of the multi-sets in Γt'' in firing sequences. This allows us to label those places p− with ω where g(p+) > 0 for a g ∈ Γt'' .
If m' > m'' for an m'' on the path from the root to m, then we set m' := m' + ω(m' − m''). This is because we can lift the marking of those places p− with (m' − m'')(p−) > 0 by repeating the firing sequence corresponding to the path from m'' to m' arbitrarily many times.
If m' ≤ m'' ∈ Path(m'), then we need not calculate the successors of m' since we already had better chances at m''.
According to [3], there are only finite sets of incomparable multi-sets over a finite set P−. It, therefore, follows that every path must terminate.
i

If for all i a node marked with ω
P +
—
Ti is in CG(i,+) and, analogously, a node

marked with ω
Ti is in CG(i,−), then the Condition 4 is fulfilled. Otherwise, we can

calculate without loss of generality
k :=	min	max	min  max m(pσ)
σ∈{+,−} path⊆CG(i,σ) p∈PTi m∈path
This means that in every path in CG(i,+) or CG(i,−), there is a place p such that on this path there are never more than k tokens on p− or p+ respectively.
Now, we can replace in T ' := T \ {t}∪	U (p) the transition t by all those
p∈PTi
sets of transitions U (p), described in the following sub section, which are generated by restricting t in such a way that, in the subnet Ni, there can never be more than k tokens on p.
In order to show that S(T') < S(T ) we have to show that each S(t') < S(t) for every t' in every U (p).

4.4.1	Elimination of places
As in the construction of a regular expression from a finite automaton having the states 0, ...k, we define for all l, j, h ≤ k an expression T l−1 describing corresponding firing sequences with the following property: They start with a marking m0 with m0(p) = j, end with a marking m1 with m1(p) = h, and meanwhile the number tokens on p is always less than l. This allows us to remove the place p since its

information is no longer necessary. Therefore, we have P
l−1 = P' := PT
\ {p}).

Tj,h	Ti	i
For an inductive definition, we start with the case of an immediate success where there is no ’meanwhile’: This means
T−1 := Ti◦ˆ{p−,p+}{{p− '→ j, p+ '→ h}}
is constructed using Lemma 3.5. (We can write {{p− '→ j, p+ '→ h}} as {tj,h} with

ctj,h
= {p− '→ j, p+ '→ h} and Γt
= Ktj,h
= ∅.) Recursively, we define



T l := {t(Nl−1)} := {t(∗P'
(T l−1))}

l,l
l,l
Ti	l,l

using Lemma 3.1. Then with Lemma 3.5, we construct

T l := T l ◦P'
T l−1 for h /= l,

l,h
l,l
Ti  l,h

T l := T l−1◦P' T l
for j /= l, and

j,l
j,l
Ti  l,l

T l  := T l−1◦P'
T l ◦P'
T l−1 ∪ T l−1 for h /= l ∧ j /= l.


Now we define
j,h
j,l
Ti  l,l
Ti  l,h
j,h



U (p) = (Lt |
− + ◦ˆA \C(N )(Kt \ {Ni}))◦ˆC(N )\{p−,p+}T k −	+

{p ,p }	t	i
i	ct(p
),ct(p )



using Lemma 3.5. We have S(N') < S(Ni) for every N' ∈ Kt' with t' ∈ Tk

−),ct(p+)

because for the corresponding first components s' and si of the 4-tuples, we have
s'(|P ' |) = si(|P ' |)+ k + 1 but s'(|PT |) = si(|PT |) − 1 (It holds |P ' | = |PT |− 1).
Ti	Ti	i	i	Ti	i
Thus, S(t'') < S(t) for every t'' ∈ U (p).

Example: Let t = (c + Γ∗)◦ˆC(N )∗{p}∪P (Ni) with c(p−) = 1, Ni = v ∪ w ∪ tj,
C(Ni) = {p−, p+} ∪ P− ∪ P + and tj = (cj + Γ∗)◦ˆ{q−,q+}∪Q−∪Q+ ∗{q}∪Q(u) with
cj(p+) = 1, cj(q−) = 8 and cj(q+) = 9 look like
,,,, 
q
c c  zJza
/
/J

,,/L
	) p
  J
 

  		J
and k = 1. Furthermore, we assume no other occurrence of p in any other constant or period. This means that the firing sequences are restricted to the regular expression ((wv∗tj) + v)∗wv∗. This corresponds to T−1 and T−1 to consist only of a copy of
0,0	1,1
v, T−1 only of a copy of w and T−1 only of a copy of tj.
1,0	0,1
We get T 0  = t(∗P (T−1)), T 0  = T−1◦P T 0 ◦P T−1 ∪ T−1; in the end every

0,0
0,0
1,1
1,0
0,0
0,1
1,1

new transition t' in (c + Γ∗) | − +
◦ˆC(N )\{p−,p+}T 1
with T 1
= T 1
P T 0  =

{p ,p }	i
1,0
1,0
1,1
1,0

t(∗P (T 0
))◦P T−1◦P T 0
now looks like

1,1
1,0
0,0
,		 
, 	 
,,,,

c  q	za	,,

8  J9
u

−1
0,0

 J
  	J J


  		J

Condition 5 Making the constant ﬁring
If Condition 5 is not fulfilled for t then, according to Corollary 4.4, for f =	g,
g∈Γ
there exists a (smallest) k such that (c + kf ) |C(t)∈ R(t). So we decompose Lt such
that R(Lt) = R(Lt + kf ) ∪    R(ct + jg + (Γt \ {g})∗). Set

T ' := T \ {t} ∪ {t' | Kt' = Kt, Γ' = Γt ∧ ct' = ct + kf )}
∪ {t' | ∃j ≤ k, g ∈ Γ Γ' = Γt \ {g}) ∧ ct' = ct + jg)}.

Since Conditions 1 and 2 are not affected, b2 and S(Kt) do not change. The size

S(t') is smaller than S(t) since b5 is now zero respectively |Γ \ {g}| < |Γ|; thus, it holds S(T') < S(T ).
Lemma 4.3 If the conditions 1 - 4 hold for t, then it holds
6f ∈ Σ g + Γ∗6e ∈ (Γt ∪ −Γt)∗∃k ≥ 2  (ct + kf ) |C(t), (ct + kf + e) |C(t)} ⊆ R(t)
g∈Γt

The proof is in [17] where we show that we can build up firing sequences which compensate the ’odd’ firing sequences resulting from condition 4, from the constant, and from the ’odd’ indirect firing sequences in order to find a ct fulfilling condition 5 according to the following corollary:
Corollary 4.4 If the conditions 1 - 4 hold for t, then it holds
6f ∈ Σ g + Γ∗∃k ≥ 2 (ct + kf ) |C(t)∈ R(t)
g∈Γt

	The reachability relation for Petri nets with inhibitor arcs
Now, we generalize Lemma 2.4 by using the operators ∪, ◦Q and ∗Q over finite sets of multisets in a nested way. This allows us to express the reachability problem in a Petri net for which there exists an ordering of the places such that a place has an inhibitor arc to all those transitions which have an inhibitor arc from a preceding place:
Theorem 5.1 In a Petri-net (P, T, W, I, m0, me) with
∃g ∈ NP 6p, p' ∈ P g(p) ≤ g(p') → (6t ∈ T (p', t) ∈ I → (p, t) ∈ I),
we can construct an expression Tg such that there is a ﬁring sequence w ∈ T∗ with
m0[w⟩me if and only if R(Tg) is (= {∅} and) not empty.


Example: For the Petri net


2

,,
(	) p1

\‘\ 3
///
// J

,,/ ///
cc 
2	 / / μ,,

p4 y ccc
// // p2

  cJc    5 
/////	 J

,7c,
) t9
•//
5 \ •

p3 (	•	t
 J
with the start marking {p3 '→ 3, p4 '→ 2} and the end marking {p4 '→ 27} we can easily find the function g with g(p1) = 1, g(p2) = 2 and g(p3) = g(p4) = 3. The

construction gives us an expression which we visualise as
,		 

27//,	 
,/, ,,,		 

''
4
2 /’ J
'
2
 J
,,
	) p1

/	^5
75	 J

/	t8
72
,\‘\ 3
p4
, 7
(	 t7

^	,,	 cJcc  2

	'
3 ,,	3
,7c,
,7 ,

 ,J, p3	p2

''	'
3	4
 J  J

 J	 J 		J
  		J
  		J
with the innermost level

— p+	+
T1	4 ,  1 ,  3	,
— p−	+	+
2 ,  4
1	1	2	1
dP .




−	−	+	+ 
1	3	4	2


				
 p− , p+  ∈ R(T ) for t , we get the firing sequence w' = (w)(w)t (w)t (w)t (w)t
from  p3 , p4 ! to  p3 , p4 ! on the next level as  p− , p− , p+ , p+  ∈ R(∗	(T )) =
R(t ) ⊆ R(T ). Together with  p− , p+  ∈ R(T ) for t , this enables the firing se-
quence w'' = t (w')t5 from  p3 , p4 ! to  p4 ! on the following level as  p− , p− , p+  ∈
The general construction is in [17].
With Theorem 4.1 we derive the following:
Corollary 5.2 The reachability problem for a Petri net (P, T, W, I, m0, me) with
∃g ∈ NP 6p, p' ∈ P g(p) ≤ g(p') → (6t ∈ T (p', t) ∈ I → (p, t) ∈ I),
is decidable.
This is optimal since the non-existence of such an ordering would mean that there are two inhibitor arcs (p, t), (p', t') without (p, t') or (p', t) being an inhibitor arc, which would already mean undecidability of the reachability problem for such instances.

Priority-Multicounter-Automata
We define a priority-multicounter-automaton by a restrictive zero-test according to an order of the counters in the following way: the first counter can be tested for zero at any time; the second counter can only be tested for zero simultaneously with the

first counter; any further counter can only be tested for zero simultaneously with all preceding counters. Formally, this reads as follows:
A priority-multicounter-automaton is a one-way automaton described by the
6-tuple
A = (k, Z, Σ, δ, z0, E)
with the set of states Z, the input alphabet Σ, the transition relation
δ ⊆ (Z × (Σ ∪ {λ}) × {0 ... k}) × (Z × {−1, 0, 1}k),
initial state z0, the accepting states E ⊆ Z, the set of configurations CA = Z × Σ∗ ×
Nk, the initial configuration σA(x) = ⟨z0, x, 0, ..., 0⟩ and configuration transition


relation
`˛k¸x

⟨z, ax, n1, ..., nk⟩ |A  ⟨z', x, n1 + i1, ..., nk + ik⟩

if and only if z, z' ∈ Z, a ∈ Σ ∪ {λ}, ⟨(z, a, j), (z', i1, ...ik)⟩∈ δ, 6i ≤ j ni = 0.
The language recognized by an priority-multicounter-automaton A is L(A) = 
{w | ∃ze ∈ E ∃n1, ..., nk ∈ N ⟨z0, w, 0, ..., 0⟩ | ∗  ⟨ze, λ, n1, ..., nk⟩.	A priority-
multicounter-automaton can be changed in such a way that it has only one ac- cepting state ze and that all counters are empty while accepting. Thus, L(A) = 
{w | ⟨z0, w, 0, ..., 0⟩ | ∗  ⟨ze, λ, 0, ..., 0⟩}.
Using Theorem 5.1, we show that the emptiness problem of the accepted lan- guage is decidable for priority-multicounter-automata. The same holds for the halt- ing problem by constructing an automaton which contains its input in the states.
Theorem 6.1 The emptiness problem for priority-multicounter-automata is decid- able.
Proof. Given A we construct a Petri net (P, T, W, I, m0, m1) with the places P :=
{1...k}∪ Z, the transitions T = δ, the weights W with
W (z, ((z', a, j), (z'',V ))) := 1 if z = z' else := 0;
W (((z', a, j), (z'',V )), z) := 1 if z = z'' else := 0;
W (i, ((z', a, j), (z'',V ))) := 1 if V (i) = −1 else := 0; and
W (((z', a, j), (z'',V )), i) := 1 if V (i) = 1 else := 0;
the inhibitor arcs I := {(i, ((z', a, j), (z'',V ))) | i ≤ j}, the start marking m0 :=
{z0 '→ 1}, and the end marking m1 := {ze '→ 1} which is reachable from m0 if and only if L(A) /= ∅. According to Corollary 4.2 with g(i) = i for i ≤ k and g(z) = k +1 for z ∈ Z, this is decidable.	 
Consequences of this result for the decidability of the synchronizability and maximality of semi-trace languages are formulated in [16]. Further consequences are described in [6]: Every unary language is recursive if it is generated by a graph- controlled grammar with an arbitrary number of nonterminal symbols but only one of the nonterminal symbols being allowed to be used in the appearance checking mode. Theorem 6.1 implies the optimality the results in [6] proving the compu- tational completeness of graph-controlled grammars, programmed grammars, and

matrix grammars with a certain nonterminal complexity.
The classes k-PMC of languages accepted by a priority-multicounter-automaton with k > 0 counters (and also their union) are incomparable to the class LIN of linear languages and it holds (k-1)-PMC Ç k-PMC. This is because
{an1 ban2 ...bank+1 $ank+1 b...an2 ban1 | 6i ≤ k +1 ni ∈ N} /∈ k−PMC.
This can be shown by constructing T fulfilling property 7 and, then, by using Lemma 4.3 to find two different words in the language where the automaton has the same configuration reading $. With the same argument, this also holds for the classes k-BLIND and k-PBLIND in [7]. Furthermore, {(anb)m | n, m ∈ N} cannot be accepted by a priority-multicounter-automaton (Theorem 3.2 in [16]).

Restricted Priority- Multipushdown- Automata
We define a priority-multipushdown-automaton by a different treatment of one of the two pushdown symbols according to an order of the pushdown stores in the following way: let the pushdown alphabet be {0, 1}. A 0 can be pushed to and popped from every pushdown store independently, but a 1 can only be pushed to or popped from a pushdown store if all pushdown stores with a lower order are empty. Furthermore, the restriction requires that if a 1 is popped from a pushdown store, then a 1 cannot be pushed anymore to this store until it is empty.
Theorem 7.1 The emptiness problem for restricted priority-multipushdown-auto- mata is decidable.
This generalizes the result in [10] that LIN %D' ∗ (the class of languages gener- ated by linear grammar and deletion of semi Dyck words) is recursive. We conjecture that decidability still holds in the unrestricted case but, even in the special case of a pushdown automaton with additional weak counters (without zero-test), this is still an open problem.
Acknowledgement
I thank Klaus-Jo¨rn Lange and Andreas Krebs, for many helpful discussions on this version and also Volker Diekert and Henning Fernau for many helpful discussions on previous versions.

References
Arnon Avron. Transitive closure and the mechanization of mathematics. In F. Kamareddine, editor,
Thirty Five Years of Automating Mathematics, pages 149–171. Kluwer Academic Publishers, 2003.
L. A. Cherkasova and V. E. Kotov. Structured nets. In J. Gruska and M. Chytil, editors, Proceedings of the 6th MFCS, number 118 in LNCS, pages 242–251. Springer, 1986.
L. E. Dickson. Finiteness of the odd perfect and primitive abundant numbers with n distinct prime factors. Amer. J. Math., 35:413–422, 1913.
N. Dershowitz and Z. Manna. Proving Termination with Multiset Orderings. Comm. ACM, 22(8):465– 476, 1979.


S. Eilenberg and M. P. Schu¨tzenberger. Rational sets in commutative monoids. Journal of Algebra, 13:173–191, 1969.
H. Fernau, R. Freund, M. Oswald, and K. Reinhardt. Refining the nonterminal complexity of graph- controlled grammars. In Proceedings of the DCFS, pages 110–121, 2005.
S. Greibach. Remarks on blind and partially blind one-way multicounter machines. Theoret. Comput. Sci., 7:311–324, 1978.
S. Ginsburg and E. H. Spanier. Semigroups, Presburger formulas, and languages. Pacific J. Math., 16:285–296, 1965.
N. Immerman. Languages that capture complexity classes. SIAM J. of Computing, 16:4:760–778, 1987.
M. Jantzen, M. Kudlek, K.-J. Lange, and H. Petersen. Dyck1-reductions of context-free languages. In
Computers and Artificial Intelligence, volume 9, pages 228–236, 1990.
H. Kleine Bu¨ning, T. Lettmann, and E. W. Mayr. Projections of vector addition system reachability sets are semilinear. Theoret. Comput. Sci., 64:343–350, 1989.
S. R. Kosaraju. Decidability of reachability in vector addition systems. In Proceedings 14th Ann. ACM STOC, pages 267–281, 1984.
J.L Lambert. A structure to decide reachability in petri nets. Theoretical Computer Science, 99:79–104, 1992.
E. Mayr. An algorithm for the general Petri net reachability problem. Siam J. Comput., 13:441–459, 1984.
M. L. Minsky. Computation: Finite and Infinite Machines. Prentice-Hall, 1971.
K. Reinhardt. Priorit¨atsz¨ahlerautomaten und die Synchronisation von Halbspursprachen. Dissertation, Institut fu¨r Informatik, Universit¨at Stuttgart, 1994.
K. Reinhardt. Counting as Method, Model and Task in Theoretical Computer Science. habilitation- thesis, University of Tu¨bingen, 2005.
