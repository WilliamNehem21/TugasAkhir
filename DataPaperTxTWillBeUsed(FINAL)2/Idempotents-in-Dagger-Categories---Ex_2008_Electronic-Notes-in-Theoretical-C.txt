	Electronic Notes in Theoretical Computer Science 210 (2008) 107–122	
www.elsevier.com/locate/entcs

Idempotents in Dagger Categories
(Extended Abstract)
Peter Selinger1
Department of Mathematics and Statistics Dalhousie University, Halifax, Nova Scotia, Canada

Abstract
Dagger compact closed categories were studied by Abramsky and Coecke (under the name “strongly compact closed categories”) as an abstract presentation of the category of Hilbert spaces and linear maps, and as a framework in which to carry out the interpretation of quantum protocols. I subsequently showed that dagger compact closed categories can also describe mixed quantum computation, where the morphisms are
completely positive maps. I introduced the CPM construction as a way to pass from the pure to the mixed setting. One technical detail of the CPM(C) construction is that it does not preserve biproducts. Therefore, to obtain an interpretation of classical types such as bit = I  I, one must work in the free biproduct
completion CPM(C)⊕. In this paper, we show that there is another view of classical types, namely as splittings of self-adjoint idempotents on quantum types. We show that all the objects of CPM(C)⊕ arise as such splittings.
Keywords: Quantum computing, dagger categories, CPM construction, idempotents.


Introduction
Dagger compact closed categories are an abstract presentation of the category of Hilbert spaces and linear maps. They were recently introduced by Abramsky and Coecke under the name “strongly compact closed categories”, for the purpose of studying quantum protocols [1]. Abramsky and Coecke showed that, even without assuming a complex vector space structure, many important properties of quantum mechanics can be formalized in this setting, including the notions of scalars, vectors, inner products, unitary and self-adjoint operators, projections, and the Born rule. In [7], I showed that dagger compact closed categories can also describe mixed quantum computation, where the morphisms are completely positive maps. Com- pletely positive maps are the common generalization of unitary transformations and measurements, and thus they capture both reversible and irreversible computation.

1 Email: selinger@mathstat.dal.ca . Research supported by NSERC.

1571-0661 © 2008 Peter Selinger. Published by Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2008.04.021

They can also be understood as a combination of quantum amplitudes and classical probabilities. I introduced the CPM construction as a way to pass from any dag- ger compact closed category C describing pure quantum computation to a dagger compact closed category CPM(C) of mixed computations.
One of the interesting properties of the CPM(C) construction is that it does not preserve biproducts. Its objects correspond to the “simple” signatures of [6], i.e., to purely quantum data types. To be able to interpret classical types such as bit = I ⊕ I, or combined quantum/classical types such as bit ⊗ qbit ∼= qbit ⊕ qbit, biproducts are needed. The solution proposed in [7], and the one also implicitly followed in [6], was to work in the free biproduct completion CPM(C)⊕ of the category of completely positive maps.
Inspired by recent work of Coecke and Pavlovic [4], we show that there is another method of distilling classical types from their quantum counterparts. Unlike the free biproduct completion, which adds the classical types externally, the present construction is internal; the classical types are obtained by splitting certain self- adjoint idempotents on quantum types. Computationally, this means that classical data can be described as quantum data with additional properties (for example, the property of being a standard basis vector). Since idempotents are a special case of categorical limit, it also makes sense to speak of the “classical limit” of quantum mechanics in this setting.
The paper is organized as follows. In Section 2, we review the definitions of various classes of dagger categories that appeared in [7]. In Section 3, we discuss basic properties of idempotents and self-adjoint idempotents and their splittings. Section 4 recalls the CPM construction, and introduces the view of classical types as self-adjoint idempotents on quantum types. Finally, Section 5 delves into various technical properties of idempotents in dagger categories. We conclude with the, per- haps unexpected, observation that the category CPM(FdHilb) of Hilbert spaces and completely positive maps does not satisfy the square root axiom of positive operators.

Dagger structures
Dagger categories
Recall the definition of a dagger category.
Definition 2.1 (dagger category) A dagger structure on a category C is an involutive, identity-on-objects, contravariant functor † : C → C. A category that is equipped with a dagger structure is called a dagger category.
Concretely, this means that to every morphism f : A → B one associates a morphism f † : B → A, called the adjoint of f , such that for all f : A → B and g : B → C, one has id†A = idA, (g ◦ f )† = f † ◦ g†, and f †† = f .
The prime example of a dagger category is the category FdHilb of finite-
dimensional Hilbert spaces and linear maps, where the adjoint of f : A → B is given in the usual linear algebra way as the unique map f † satisfying ⟨f x|y⟩ = ⟨x|f †y⟩

for all x ∈ A, y ∈ B.
Remark 2.2 In the mathematical literature, it is common to write f ∗, and not f †, for the adjoint of a linear operator. However, the notation f ∗ is already used in compact closed categories for the transpose f ∗ : B∗ → A∗, which is distinct from the adjoint f † : B → A. This is in keeping with the convention, common in category, of using the same notation for the object part and the morphism part of a functor. We therefore follow physics notation in denoting the adjoint by f †. The same convention is used by Abramsky and Coecke [1].
The literature on C∗-algebras contains a notion of *-categories, which are similar to dagger categories (see e.g. [5]). However, most authors assume *-categories to have additional properties, such as enrichment in complex vector spaces, existence of square roots, etc., which we do not assume here.
Dagger categories are also sometimes called “categories with involution” in the literature, see e.g. [3]

Dagger compact closed categories
Definition 2.3 (dagger compact closed category) A dagger compact closed category is a compact closed category with a dagger structure, such that the functor
† : C  → C is a functor of compact closed categories.
Concretely, the requirement that † is a functor of compact closed categories means that the structural natural isomorphisms αA,B,C : A⊗(B⊗C) → (A⊗B)⊗C, λA : I ⊗ A → A, and σA,B : B ⊗ A → A ⊗ B are unitary, and that (f ⊗ g)† = f † ⊗ g† and ϵ†A = σA∗ ,A ◦ ηA : I → A ⊗ A∗.
The category FdHilb of finite dimensional Hilbert spaces is dagger compact
closed.
Remark 2.4 The importance of dagger compact closed categories for the purpose of studying quantum protocols was discovered by Abramsky and Coecke, who used the term “strongly compact closed categories” [1]. The concept of a strict dagger compact closed category itself is older; it appears in the work of Baez and Dolan [2], where it is the special case for n =1 and k =3 of a ”k-tuply monoidal n-categories with duals”.

†-Biproducts
Recall that a category has biproducts if there is a zero object 0, and if for any A1, A2, there is an object A1 ⊕ A2, with projections pi : A1 ⊕ A2 → Ai and injections qi : Ai → A1 ⊕ A2, for i = 1, 2, such that the pair p1, p2 forms a product cone, the pair q1, q2 forms a coproduct cone, and pi ◦ qj = δij. Here, δii = idAi , and δij =0 for i /= j (where 0 : Aj → Ai is the unique morphism that factors through 0).
Definition 2.5 (†-biproduct, biproduct dagger category) Let C be a cat- egory with biproducts and a dagger structure. We say that the biproducts are

†-biproducts if pi† = qi : Ai → A1 ⊕ A2, for all objects A1, A2 and i = 1, 2. A dag- ger category with †-biproducts is also called a biproduct dagger category. A dagger compact closed category with †-biproducts is also called a biproduct dagger compact closed category.
Remark 2.6 In any dagger category, products are automatically coproducts by duality. Indeed, if A1 ⊕ A2 is a product with projections pi : A1 ⊕ A2 → Ai, then A1 ⊕ A2 is a coproduct with injections defined as qi := pi†. However, this is not quite sufficient to imply that C has biproducts; the condition pi ◦ qj = δij is not redundant.

Idempotents in dagger categories
Idempotents
We briefly recall some standard properties of idempotents and their splittings.
Definition 3.1 (idempotent, splitting) A morphism e : A → A in a category is idempotent if e ◦ e = e. We say that e splits if there exists an object B and morphisms f : A → B, g : B → A, such that e = g ◦ f and idB = f ◦ g.
Lemma 3.2 If an idempotent e : A → A splits, then the splitting is uniquely determined up to isomorphism. More precisely, if f : A → B, g : B → A and f ' : A → B', g' : B' → A are two splittings of e, then there exists a unique isomorphism ϕ : B → B' such that:
B
A	ϕ	A B'
It is well-known that splittings of idempotents can be added freely to a category:
Definition 3.3 (Karoubi envelope) Let C be a category and I a class of idem- potents, containing all the identity morphism of C. The category SplitI (C) has objects (A, e), where A ∈ |C|, e : A → A, and e ∈ I. A morphism f : (A, e) → (B, d) is f : A → B where f = d ◦ f ◦ e. Note that the identity morphism at (A, e) is given by e. If I is the class of all idempotents of C, then SplitI (C) is called the Karoubi envelope of C, and is also written Split(C).
There is an obvious full embedding C ‹→ SplitI (C), defined by A '→ (A, idA). It is well-known that SplitI (C) is the category obtained from C by freely splitting the idempotents in I.
Remark 3.4 The splitting of an idempotent is a special case of a categorical limit and colimit. More precisely, if e : A → A is an idempotent, then f : A → B, g : B → A is a splitting of e if and only if f is a colimit and g is a limit of the diagram
A	e

Remark 3.5 (Idempotents as data types) It is well-known in computer science that idempotents represent properties of data, and their splittings correspond to implementations of new data types as subsets of existing ones. We briefly recall this in an example. In a programming language with a built-in type of (positive or negative) integers Z, one would typically implement the type of (non-negative) natural numbers as a subset of the integers. Programs on natural numbers are really programs on integers, but follow a special convention (namely, their possible inputs and outputs are restricted to the natural numbers). Note that the cooperation of the program is required to ensure that it follows the convention. One way to force the convention on an uncooperative program is to pre- and post-compose it with a special “type checker” function e : Z → Z that “coerces” illegal values to legal ones. One such possible function is e(n)= n if n ≥ 0, and e(n)=0 if n < 0. Note that e is idempotent. Now some given function f : Z → Z can be regarded as acting on natural numbers precisely if e ◦ f ◦ e = f . In other words, the data type of natural numbers arises as the splitting of the idempotent e, and moreover, the idempotent itself gives an operational meaning to the data type.

†-Idempotents
Definition 3.6 (†-idempotent, †-splitting) In a dagger category, a †-idempotent is a self-adjoint idempotent, i.e., a morphism satisfying e ◦ e = e and e = e†. We say that e †-splits if there exists an object B and morphisms f : A → B, g : B → A, such that e = g ◦ f , idB = f ◦ g, and g = f †.
Lemma 3.7 If e is any idempotent, and e †-splits, then e = f † ◦ f = e†, so e is
†-idempotent.
Example 3.8 In the dagger category FdHilb, the †-idempotents are precisely the
orthogonal projections onto some subspace.
Remark 3.9 By Lemma 3.2, splittings of idempotents are unique up to isomor- phism. However, not every splitting of a †-idempotent is a †-splitting. For example, let e : C2 → C2 be the projection given by e(x, y) = (x, 0). Then e †-splits as f (x, y)= x, g(x)= (x, 0). But e also has other, non-dagger splittings, for example, f '(x, y) = 2x, g'(x) = (x/2, 0). Also note that in this example, the unique map ϕ from Lemma 3.2 is ϕ(x)= 2x, which is an isomorphism, but not unitary.
Lemma 3.10 †-Splittings are uniquely determined up to unitary isomorphism. More precisely, let e = f † ◦ f = g† ◦ g : A → A, where f ◦ f † = idB and g ◦ g† = id'B, and let ϕ : B → B' be the unique isomorphism making the following diagram commute:
B
A	ϕ	A B'
Then ϕ is unitary.

Proof. We have ϕ = ϕ ◦ f ◦ f † = g ◦ f †, and similarly ϕ−1 = ϕ−1 ◦ g ◦ g† = f ◦ g†. Hence ϕ− = ϕ† as desired.
Remark 3.11 In general, the Karoubi envelope of a dagger category C is not a dagger category. Consider for example the category C whose objects are finite sets, and whose morphisms f : A → B are pairs of functions f1 : A → B and f2 : B → A. This has an obvious dagger structure via (f1, f2)† = (f2, f1). Let A = {0, 1} be a two-element set, and consider e : A → A given by e(x) = 0. Then X = (A, (e, idA)) and Y = (A, (idA, e)) are objects of Split(C). It is easy to check that the cardinalities of hom(X, Y ) and hom(Y, X) are 4 and 1, respectively, proving that Split(C) can have no dagger structure.
However, everything goes well if we restrict ourselves to †-idempotents.
Proposition 3.12 Let C be a dagger category, and let I be a class of †-idempotents, containing all the identity morphism of C. Then SplitI (C) possesses a natural dagger structure.
Proof. Given a morphism g : (A, e) → (B, d) of SplitI (C), define its adjoint as g† : B → A. Note that this is a well-defined morphism g† : (B, d) → (A, e), because e ◦ g† ◦ d = e† ◦ g† ◦ d† = (d ◦ g ◦ e)† = g†. Further, this assignment is involutive and functorial.
Note that the embedding C ‹→ SplitI (C) preserves the dagger structure. More- over, every e ∈ I †-splits in SplitI (C), and SplitI (C) is the free category with this property.
Definition 3.13 (†-Karoubi envelope) If I is the class of all †-idempotents of a dagger category C, then SplitI (C) is called the †-Karoubi envelope of C, and is also written Split (C).
Operations on †-idempotents
Lemma 3.14 (a) If e : A → A and d : B → B are †-idempotents in a dagger compact closed category, then so are e ⊗ d : A ⊗ B → A ⊗ B and e∗ : A∗ → A∗.
(b) If e : A → A and d : B → B are †-idempotents in a biproduct dagger category, then so is e ⊕ d : A ⊕ B → A ⊕ B.
Proof. Obvious.	 
The following lemma makes sense in a commutative-monoid enriched category. Recall that a category is enriched in commutative monoids if each hom-set is equipped with a commutative, associative addition operation with unit, such that composition is bilinear. In the case of a dagger category, we also require the enrich- ment to satisfy (f + g)† = f † + g† (and therefore, 0† = 0).
Lemma 3.15 Suppose C is a dagger category enriched in commutative monoids. Then 0: A → A is †-idempotent. Also, if e, d : A → A are †-idempotents such that e ◦ d = 0, then e + d : A → A is †-idempotent.

Proof. First, note that d ◦ e = d† ◦ e† = (e ◦ d)† = 0† = 0. Then (e + d) ◦ (e + d)= 
e ◦ e + e ◦ d + d ◦ e + d ◦ d = e +0+0 + d = e + d. Also, e + d is self-adjoint.	 


Structures preserved by the †-Karoubi envelope
The splitting of idempotents preserves all the structure that we are interested in, as the following proposition shows.
Proposition 3.16 Let C be a dagger category, and consider its -Karoubi envelope
Split†(C).
If C is enriched in commutative monoids (as a dagger category), then so is
Split†(C).
If C is dagger compact closed, then so is Split†(C).
If C has †-biproducts, then so does Split†(C).
Proof. (a) Consider objects A = (A, a), B = (B, b) of Split†(C), and morphisms f, g : A → B. Then b◦(f +g)◦a = (b◦f ◦a)+(b◦g ◦a)= f +g, hence f +g : A → B is well-defined. Also, clearly b ◦ 0 ◦ a = 0, so 0 : A → B.
Let A = (A, a), B = (B, b), and C = (C, c). Define A ⊗ B = (A ⊗ B, a ⊗ b), A = (A∗, a∗), and I = (I, id). These are well-defined objects by Lemma 3.14(a). For f : A → A' and g : B → B', we have f ⊗ g : A ⊗ B → A' ⊗ B'. The structural maps are given by:

αA,B,C = αA,B,C ◦ ((a ⊗ b) ⊗ c) : (A ⊗ B) ⊗ C → A ⊗ (B ⊗ C)
λA = λA ◦ (id ⊗ a)	: I ⊗ A → A
σA,B = σA,B ◦ (a ⊗ b)	: A ⊗ B → B ⊗ A
ηA = (a∗ ⊗ a) ◦ ηA	: I → A∗ ⊗ A
ϵA = ϵA ◦ (a ⊗ a∗)	: A ⊗ A∗ → I

It is then routine to check that these are indeed well-defined, natural, satisfy the coherence conditions, and respect the dagger structure.
For A1 = (A1, a1) and A2 = (A2, a2), define A1 ⊕ A2 = (A1 ⊕ A2, a1 ⊕ a2). This is a well-defined object by Lemma 3.14(b). The structural maps are given by:

pi = ai ◦ pi : A1 ⊕ A2 → Ai qi = qi ◦ ai : Ai → A1 ⊕ A2
The required properties are checked routinely.	 

Idempotents and the CPM-construction
Complete positivity
Let C be a dagger compact closed category. Recall from [7] that a morphism f : A∗ ⊗ A → B∗ ⊗ B is called completely positive if there exists an object C and a morphism h : A → C ⊗ B such that


f = A∗
⊗ A h∗⊗h  B∗
⊗ C∗
B∗ є ∗  B
⊗ C ⊗ B −−−−−−−→ B
⊗ I ⊗ B −→∼= B∗
⊗ B.


In the graphical language of [7], a completely positive map can be visualized as follows:
A	B
C
f	=
C
A	B

Definition 4.1 (CPM construction) Let C be a dagger compact closed category. Its category of completely positive maps, written CPM(C), is defined as follows: it has the same objects as C, and a morphism f : A → B in CPM(C) is a completely positive morphism f : A∗ ⊗ A → B∗ ⊗ B in C.
Theorem 4.2 ([7]) If C is dagger compact closed, then so is CPM(C).	 

The category CPM(FdHilb) appears in the interpretation of quantum pro- gramming languages as the category of “simple” signatures and completely positive maps, cf. [6, Sec. 6.1 and Rem. 6.9]. Concretely, this means that its objects represent purely quantum types such as qbit and qbit ⊗ qbit. However, in the semantics of quantum programming language, one also requires types with classical attributes. These appear as direct sums A1 ⊕ ... ⊕ An of quantum types. The interpretation of programming languages, as described in [6], thus takes place not in CPM(FdHilb), but in its free biproduct completion CPM(FdHilb)⊕.
Definition 4.3 (CPM construction with biproducts) Let C be a biproduct dagger compact closed category. Then CPM(C)⊕ is defined as the biproduct com- pletion of CPM(C). Concretely, the objects of CPM(C)⊕ are finite sequences (A1,... , An) of objects of C, and a morphism f : (Ai)i → (Bj)j is a matrix (fij)ij, where each fij : Ai → Bj is a morphism of CPM(C). Composition is defined in the usual way by matrix multiplication.
Note the difference between the object (A, B), which is the biproduct of A and
B in CPM(C)⊕, and the object A ⊕ B, which is the biproduct of A and B in
C. These objects are not isomorphic. The operation A ⊕ B is not a biproduct in
CPM(C); in fact, it is not even functorial there.

Classical types as idempotents
In the previous section, classical types were added to CPM(C) by taking its biprod- uct completion. We now show that there is an alternative method for completing CPM(C) with classical types, namely by splitting idempotents. In light of Re- mark 3.5, this gives an operational interpretation and an implementation of the type of classical bits in terms of quantum bits.
Example 4.4 In the category CPM(FdHilb)⊕, the type qbit of quantum bits corresponds to the object C2, and the type bit of classical bits corresponds to the object I ⊕ I = (C, C). The are related by completely positive maps new : bit → qbit (for creating a new quantum bit) and measure : qbit → bit (for measuring a quantum bit). In the notation of [6], these maps are defined as:
⎛ a 0 ⎞	⎛ a b ⎞

new(a, d)= 
0 d
⎠ ,	measure ⎝
= (a, d)
c d 


These two maps are each other’s adjoints: new† = measure. They are also one- sided inverses, and therefore form a splitting of a †-idempotent as follows:

bit
new
qbit measure bit

qbit measure

bit
new
qbit

Therefore, the type bit arises by splitting the †-idempotent e = new ◦ measure on the type qbit.
The following theorem shows that Example 4.4 generalizes from the type bit to arbitrary types.
Theorem 4.5 Let C be a biproduct dagger category, and consider its category of completely positive maps CPM(C). Then the †-Karoubi envelope Split†(CPM(C)) has ﬁnite †-biproducts.
Proof. The zero object 0 of C also acts as a zero object in CPM(C), and hence (0, id) is a zero object in Split†(CPM(C)). Therefore, we only have to show that Split†(CPM(C)) has binary biproducts. Consider two objects (A1, e1) and (A2, e2) of Split†(CPM(C)). Therefore ei : Ai∗ ⊗ Ai → Ai∗ ⊗ Ai is completely positive and †-idempotent in C, for i = 1, 2. Let D = A1 ⊕ A2 in C, and define di : D∗ ⊗ D → D∗ ⊗ D by:

∗	pi∗⊗pi	∗	ei	∗	qi∗⊗qi	∗

di = D
⊗ D −−−−→ Ai ⊗ Ai −→ Ai ⊗ Ai −−−−→ D
⊗ D.

Here, pi : A1 ⊕A2 → Ai and qi : Ai → A1 ⊕A2 are the projections and co-projections from the biproduct structure of C. Finally, let d = d1 + d2. We claim that (D, d) is the biproduct of (A1, e1) and (A2, e2) in Split†(CPM(C)).

First, it is immediate from the definitions that di is completely positive and
†-idempotent; moreover, d1 ◦ d2 = 0. Therefore, d = d1 + d2 is †-idempotent by Lemma 3.15, and completely positive by [7, Lemma 5.2]. Therefore, (D, d) is a well-defined object of Split†(CPM(C)).
To prove that it is the desired †-biproduct, we define the following morphisms in CPM(C), for i = 1, 2:


P = D∗ ⊗ D pi∗⊗pi
A∗ ⊗ A
ei
A ⊗ A ,

Q = A∗ ⊗ A
ei
A ⊗ A
qi∗⊗qi
D∗ ⊗ D.


Then ei ◦ Pi ◦ d = Pi and d ◦ Qi ◦ ei = Qi, hence Pi : (D, d) → (Ai, ei) and Qi : (Ai, ei) (D, d) are well-defined morphisms of Split (CPM(C)). Since Split†(CPM(C)) already possesses a commutative-monoid enrichment by Propo- sition 3.16(a), to show that these maps define a †-biproduct structure, it suffices to show that Pi = Qi , Pi ◦ Qi = id(Ai,ei) = ei, Pi ◦ Qj = 0 for i /= j, and (Q1 ◦ P1)+ (Q2 ◦ P2)= id(D,d) = d. All of these properties follow directly from the definitions.
Corollary 4.6 If C be a biproduct dagger compact closed category, then so is
Split†(CPM(C)).
Proof. From Proposition 3.16(b), Theorem 4.2, and Theorem 4.5.	 
Corollary 4.7 There is a canonical full embedding CPM(C)⊕ ‹→ Split†(CPM(C)).
Proof. By the fact that CPM(C) is fully embedded in Split†(CPM(C)), together with the universal property of CPM(C)⊕.	 
Remark 4.8 The last corollary means that every classical data type, and indeed every combined classical/quantum type, can be obtained by splitting an idempotent on a purely quantum type. In light of the fact that the splitting of an idempotent is a special case of a categorical limit (cf. Remark 3.4), this lends a new meaning to the phrase “classical objects arise as limits of quantum objects”.
Remark 4.9 In the case where C = FdHilb, it is an open problem whether the embedding of Corollary 4.7 is an equivalence of categories. Equivalently, it is not known whether the results of splitting †-idempotents in CPM(FdHilb) are pre- cisely the classical and quantum types, or whether there are additional objects in Split†(CPM(FdHilb)) that are neither classical nor quantum. The latter possi- bility seems highly unlikely for physical reasons, as there is no evidence in nature of a “third possibility” between classical and quantum phenomena. However, we do not currently have a proof of this.

More properties of †-idempotents
In this section, we explore some further technical properties of †-idempotents. For example, we address questions such as: is a †-idempotent uniquely determined by

its image? If a †-idempotent splits, then does it †-split? The reader who is not very interested in technical details is advised to skip this section.

Isometries as †-subobjects
Definition 5.1 (isometry) A morphism f : A → B in a dagger category is an
isometry if f † ◦ f = idA.
Note that an isometry f : A → B is necessarily monic; we can think of it as a special kind of subobject of B, namely, one that arises from splitting a †-idempotent f ◦f † on B. We also call f (and sometimes by abuse of terminology, A)a †-subobject of B.
Example 5.2 In the category FdHilb, the isometries are precisely the linear func- tions f : A → B that are one-to-one and preserve the inner product.
Lemma 5.3 A morphism f : A	B is unitary if and only if it is an isometry and an isomorphism.		 
Isometries share many of the common properties of monomorphisms, for example the following:
Lemma 5.4 Suppose f is an isometry and f ◦ g = h. Then h is an isometry if and only if g is an isometry.
Proof. Suppose h is an isometry. Then g† ◦ g = g† ◦ f † ◦ f ◦ g = h† ◦ h = id, so g is an isometry. Conversely, suppose g is an isometry. Then h† ◦ h = g† ◦ f † ◦ f ◦ g = g† ◦ g = id, so h is an isometry.	 
We may ask whether every subobject is isomorphic to a †-subobject. For exam- ple, this is true in FdHilb, because every monic in this category has a subspace as its image, and is isomorphic, as a subobject, to the subspace inclusion. However, this property is false in a general dagger category, as the following counterexample shows.
Example 5.5 Let Z be the dagger compact closed category consisting of a single object •, and where the morphisms are the integers n ∈ Z. Composition and tensor product of morphisms are defined by multiplication n ◦ m = n ⊗ m = nm, and n† = n. Note that all non-zero morphisms are monic, but the only isometries are
±1, which are also the only isomorphisms. So, for example, 2 : • → • is a subobject not isomorphic to a †-subobject.
Similar, but less degenerate examples are the dagger compact closed categories of free modules over the ring Z (or over the Gaussian integers Z + iZ, or over the rig N).
The following proposition characterizes exactly when a given subobject is iso- morphic to a †-subobject.
Proposition 5.6 Let f : A → B be monic. The following are equivalent:

f, as a subobject, is isomorphic to a †-subobject, i.e., there exists an isomor- phism ϕ : A → A' and an isometry g : A' → B such that f = g ◦ ϕ.
There exists an object A' and an isomorphism ϕ : A → A' such that f † ◦ f =
ϕ† ◦ ϕ.
Proof. First, assume (1). Since g is an isometry, we have g† ◦ g = idA' , hence
f † ◦ f = ϕ† ◦ g† ◦ g ◦ ϕ = ϕ† ◦ ϕ, therefore (2) holds. Conversely, assume (2) and let
g = f ◦ ϕ−1. Then g† ◦ g = ϕ−1† ◦ f † ◦ f ◦ ϕ−1 = ϕ−1† ◦ ϕ† ◦ ϕ ◦ ϕ−1 = idA' , therefore
g is an isometry and (1) holds.
The image of a †-idempotent
Every †-idempotent e : B → B induces a canonical subobject of (B, id) in Split†(C), namely e : (B, e) → (B, id). We call this subobject the image of e. An object [unitarily] isomorphic to the image already exists in C if and only if e [†-]splits in C.
Definition 5.7 (ordering of idempotents) Given two idempotents e, d : B → B, we write e ≤ d if the image of e is contained in the image of d as subobjects of (B, id). This is the case if and only if d ◦ e = e.
Proposition 5.8 †-Idempotents are uniquely determined by their image. Con- cretely, if e, d : B → B are †-idempotents such that d ≤ e and e ≤ d, then d = e. The corresponding property of (non-†) idempotents is not true.
Proof. Under the given hypotheses, d = d† = (e ◦ d)† = d† ◦ e† = d ◦ e = e. The corresponding property for (non-†) idempotents already fails in the category of sets; for example, there are two different idempotents e, d : {1, 2, 3} → {1, 2, 3} with image {1, 2}.	 
Corollary 5.9 The †-idempotents on a given object are partially ordered by ≤. 
The partial order ≤ is an abstract analogue to the usual Birkhoff-von Neumann lattice of projections on a Hilbert space. However, it need not in general be a lattice.
One may ask for the converse of Proposition 5.8: does every monomorphism f : A → B arise as the image of some †-idempotent. This is true, for example, in FdHilb, but fails in the categories from Example 5.5. The following proposition characterizes precisely which monics are the images of †-idempotents.
Proposition 5.10 Let f : A → B be a monic. The following are equivalent:
There exists some †-idempotent e : B → B (necessarily unique by Proposi- tion 5.8) such that (A, id) and (B, e) are isomorphic as subobjects of (B, id) in Split†(C).
f † ◦ f is invertible.
Proof. First, assume (1) holds. Let ϕ : (A, id) → (B, e) be the isomorphism, with inverse ψ : (B, e) → (A, id). Then by assumption, e ◦ ϕ = f . Also, since ϕ is a morphism of Split†(C), e ◦ ϕ = ϕ, therefore ϕ = f . The fact that f and ψ are

inverses in Split†(C) means that ψ ◦ f = idA and f ◦ ψ = e in C. Also, since e is self-adjoint, ψ† ◦f † = e† = e. Then f † ◦f ◦ψ ◦ψ† = f † ◦e◦ψ† = f † ◦ψ† ◦f † ◦ψ† = idA. Also ψ ◦ ψ† ◦ f † ◦ f = ψ ◦ e ◦ f = ψ ◦ f ◦ ψ ◦ f = idA. Therefore, f † ◦ f is invertible with inverse ψ ◦ ψ†, proving (2).
Conversely, assume (2), and let k = (f † ◦ f )−1. Define g = k ◦ f †. Then g ◦ f = idA, therefore f ◦ g : B → B is idempotent. Further, f ◦ g is self-adjoint. Let e = f ◦ g. Then the following diagram is well-defined and commutes in Split†(C), proving (2).
(B, e)	e
g	f	(B, id)
(A, id)	f


Splitting vs. †-splitting
Suppose that e : B → B is a †-idempotent, and also assume that e splits. Can one conclude that e †-splits? This is another example of a property that is true in FdHilb, but is false in general. For example, it fails in Hilbert spaces over the rational complex field, where all idempotents split, but for example the †-idempotent
⎛ 1/2 1/2 ⎞
⎝ 1/2 1/2 ⎠

does not †-split. It turns out that this question is closely related to the equivalent properties of Proposition 5.6. This is made precise in the following.
Proposition 5.11 Let e : B → B is a †-idempotent, and suppose that e splits via h : B → A, f : A → B. Then e †-splits if and only if f satisﬁes the equivalent conditions of Proposition 5.6.
Proof. First, suppose that e †-splits as e = g ◦ g†, where g† ◦ g = idC. Then g is an isometry. Also, by uniqueness of splittings (see Lemma 3.2), there exists an isomorphism ϕ : A → C such that f = g ◦ ϕ. Therefore, f satisfies condition (1). Conversely, suppose that f satisfies (1), so that f = g ◦ ϕ for some isometry g and isomorphism ϕ. We claim that g ◦ g† = e. Indeed, g† ◦ f = g† ◦ g ◦ ϕ = ϕ. Therefore h† ◦ ϕ† ◦ ϕ = h† ◦ f † ◦ g ◦ g† ◦ f = e† ◦ g ◦ g† ◦ f = e ◦ g ◦ g† ◦ g ◦ ϕ = e ◦ g ◦ ϕ = e ◦ f = f ◦ h ◦ f = f . Therefore g ◦ g† = f ◦ ϕ−1 ◦ ϕ−1† ◦ f † = h† ◦ ϕ† ◦ ϕ ◦ ϕ−1 ◦ ϕ−1† ◦ f † = h† ◦ ϕ† ◦ ϕ−1† ◦ f † = h† ◦ f † = e† = e. Therefore e †-splits.	 

The square root axiom
Recall that a morphism f : A → A in a dagger category is called positive if there exists some object B and some g : A → B such that f = g† ◦ g.
Lemma 5.12 Every †-idempotent is positive, because e = e ◦ e = e† ◦ e.

Definition 5.13 (square root axiom) We say that a dagger category satisfies the square root axiom if every positive f : A → A has some positive square root r : A → A, with f = r ◦ r. We say that the unique square root axiom is satisfied if r is unique.
The square root axioms does not hold in all dagger categories, but when it holds, it has some useful consequences, such as the following.
Proposition 5.14 Under the square root axiom, the conditions of Propositions 5.6 and 5.10 are equivalent.
Proof. Condition (2) of Proposition 5.6 trivially implies condition (2) of Propo- sition 5.10. The converse uses the square root axiom. Suppose that f † ◦ f is invertible. It is also positive, hence, by the square root axiom, there exists some positive r : A → A such that f † ◦ f = r ◦ r = r† ◦ r. Since r ◦ r is invertible, so is r (this holds in any category). Therefore condition (2) of Proposition 5.6 is satisfied with ϕ = r.	 
Proposition 5.15 In a dagger category satisfying the square root axiom, any two isomorphic objects are unitarily isomorphic.
Proof. Suppose f : A → B is an isomorphism. Then f † ◦ f : A → A is positive, there exists some positive r : A → A such that f † ◦ f = r ◦ r = r† ◦ r, and r is invertible. Let g = f ◦ r−1, then g : A → B is an isomorphism, and g ◦ g† = f ◦ r−1 ◦ r−1† ◦ f † = f ◦ (r† ◦ r)−1 ◦ f † = f ◦ (f † ◦ f )−1 ◦ f † = idB. Therefore, g is unitary.
CPM(FdHilb) does not satisfy the square root axiom
The unique square root axiom holds in FdHilb, and is the reason for many regular- ity properties of that category. It also has a physical interpretation: If the evolution of nature is broken into discrete time steps, then one can continually half the step size. Nature therefore evolves continuously.
It is perhaps surprising that the square root axiom actually fails in the category
CPM(FdHilb) of completely positive maps. Here is a counterexample.

⎛ a b ⎞
⎛ a + d	b	⎞

F	=
c d	c	a + d
is completely positive, therefore a morphism F : C2 → C2 in CPM(FdHilb). Under the forgetful functor CPM(FdHilb) → FdHilb, the unique positive square
root of F is

⎛ a b ⎞
⎛ √1 (a + d)	b	⎞

H	=	2
c d	c
.
1 (a + d)
2

However, the map H is not completely positive, and therefore it is not a morphism of CPM(FdHilb). It follows that F has no positive square root in CPM(FdHilb).

On the other hand, F is positive, because F = G† ◦ G, where

⎛ a b ⎞
⎛ a + d	c	b	⎞

⎝	⎠	⎜	⎟

G	= √3 ⎜⎝
a + d	c
b	a + d

It follows that CPM(FdHilb) does not satisfy the square root axiom. This fact is perhaps not surprising physically; it seems to suggest that time steps cannot always be halved when evolution proceeds via completely positive maps, and therefore, that time is not as continuous as it is in the unitary case.

Conclusion
The category CPM(FdHilb) continues to be an interesting object of study. It plays a fundamental role in finite dimensional quantum mechanics, and the basis of denotational semantics of quantum programming languages and protocols. The interplay between classical and quantum entities is particularly interesting, both at the level of morphisms (mixed vs. pure, completely positive vs. unitary) and at the level of objects (tensor vs. biproduct, simple vs. composite).
In this paper, we have made some progress towards understanding the internals of this category, by showing that classical data types can be identified with certain self-adjoint idempotents on purely quantum types. To this end, we have studied the theory of self-adjoint idempotents and their splittings in the setting of dagger categories. It turns out that many of the properties familiar from projections in Hilbert spaces are true in this more general setting. However, there are important differences; for example, properties that rely on the square root axiom will be true in FdHilb, but not necessarily in CPM(FdHilb), where the square root axiom has been demonstrated to fail.
As mentioned in the introduction, this work was partly inspired by the work of Coecke and Pavlovic [4], who have given another method of deriving classical types from quantum ones. In both approaches, classical types are described as quan- tum types equipped with additional structure; in the present work, this additional structure is given by an idempotent, whereas in the work of Coecke and Pavlovic, it is given by copying and deleting operations. The precise technical relationship between these approaches remains to be explored.

References
Abramsky, S. and B. Coecke, A categorical semantics of quantum protocols, in: Proceedings of the 19th Annual IEEE Symposium on Logic in Computer Science, LICS 2004, IEEE Computer Society Press, 2004, pp. 415–425.
Baez, J. C. and J. Dolan, Higher-dimensional algebra and topological quantum field theory, Jour. Math. Phys. 36 (1995), pp. 6073–6105, available from arXiv:q-alg/9503002.
Burgin, M., γ-categories and categories with involution, Russian Mathematical Surveys 24 (1969),
pp. 221–222.


Coecke, B. and D. Pavlovic, Quantum measurements without sums, in: G. Chen, L. Kauffman and S. J. Lomonaco, editors, Mathematics of Quantum Computing and Technology, Chapman & Hall, 2007, pp. 559–596.
Ghez, P., R. Lima and J. E. Roberts, W ∗-categories, Pacific Journal of Mathematics 120 (1985), pp. 79– 109.
Selinger, P., Towards a quantum programming language, Mathematical Structures in Computer Science
14 (2004), pp. 527–586.
Selinger, P., Dagger compact closed categories and completely positive maps, in: Proceedings of the 3rd International Workshop on Quantum Programming Languages, Electronic Notes in Theoretical Computer Science 170 (2007), pp. 139–163.
