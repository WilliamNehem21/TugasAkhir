

Electronic Notes in Theoretical Computer Science 270 (2) (2011) 263–272
www.elsevier.com/locate/entcs

An Algebra of Automata That Includes Both Classical and Quantum Entities
Luisa de Francesco Albasini1 ,2	N. Sabadini3	R.F.C. Walters4
Dipartimento di Informatica e Comunicazione Universit`a degli Studi dell’ Insubria
Como, Italy

Abstract
We describe an algebra for composing automata which includes both classical and quantum entities. We illustrate by describing in detail a quantum protocol.
Keywords: Monoidal category, Span, Quantum automaton, Classical automaton, Compact closed, Frobenius equations, Teleportation


Introduction

We propose in this paper a categorical algebra which gives meaning to diagrams like the following one, which represents a teleportation protocol [3] in terms of communicating automata (and is explained in more detail in section 4.1):

The idea is to extend the algebra of automata, Span(Graph) [12], an algebra introduced to describe concurrent systems in a compositional way, in order to per-

1 The authors gratefully acknowledge financial support from the Universit`a dell’Insubria
2 Email: luisa.dfa@libero.it
3 Email: nicoletta.sabadini@uninsubria.it
4 Email: robert.walters@uninsubria.it

1571-0661 © 2011 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2011.01.036

mit the inclusion of quantum components. This extension permits a compositional description of quantum protocols, in which quantum components interact with clas- sical finite state components. In our view, the inclusion of explicit components of finite state classical control adds conceptual clarity and precision to quantum pro- tocols.
The idea for this algebra came from an earlier extension [10] of Span(Graph) to probabilistic automata. An important thing to note is that in order to decompose the above system into parts, the algebra contains much more than just classical and quantum components - it is only in combination that the qubits form quantum components: perhaps the main question about our proposal is whether this wider context is an advantage or not.
We have mentioned that the algebra of [12] is the monoidal category of spans of graphs. Spans were introduced in [2] and are a generalization of relations. For example, in the category of sets a span R from A to B may be thought of as a A × B indexed family of sets Ra,b (a ∈ A, b ∈ B), or alternatively as a matrix of sets, whereas relations are matrices of boolean values. Span composition of R from A to B and S from B to C is given by pullback, or by the formula Σb∈BRa,b × Sb,c, (a ∈ A, c ∈ C) clearly reminiscent of the formula for composition of relations. The monoidal categories of spans, and of relations, have been intensively studied beginning in [5] where the Frobenius equation was discovered. Recent papers are [4], and [24]. The paper [12] in considering spans of graphs, in particular between one vertex graphs, introduced a new aspect. Such spans may be considered to be doubly indexed families of graphs; but a graph may be thought of as a square matrix of sets.
This paper introduces a natural extension of the algebra of spans of graphs, namely doubly indexed families ϕa,b (a ∈ A, b ∈ B) of operators on finite dimen- sional vector spaces, the main operation being Σb∈Bϕa,b ⊗ ψb,c, (a ∈ A, c ∈ C).
A mixed algebra of quantum and classical phenomena has already been intro- duced by Coecke and Pavlovic in [6], with further work in [7], following the cat- egorical twist on quantum logic introduced in [1]. The idea of those works is to describe data flow in quantum protocols, involving also classical measurements, as expressions in a symmetric monoidal category with extra structure. Such a formu- lation yields geometric pictures (following [19],[15]) of the flow in protocols, as well as pictorial equations which may be used to prove correctness. Another mixed alge- bra of quantum and classical phenomena was introduced by Selinger in [21], in the context of a functional programming language, which incorporates flow of data and flow of classical control. Neither of these approaches is an algebra of entities with states and actions, and their communication, and neither can explain the diagram we introduced in the first paragraph.
At the level of entities the importance of the distributive law of tensor product over direct sum in making classical choices becomes evident, a fact first observed for data by Selinger [21]. The situation is entirely analogous to classical Turing machines where an infinite state tape interacts with, and is controlled by, a finite state automaton (see the (non-compositional) description of Turing machines in

[23]; and also [20],[22] for relations with the Blum-Shub-Smale theory of computable functions).
Another point of interest is that Span(Graph) has been used for compositional model checking (in which non-determinism and the state explosion are considered the main problem) whereas here our extension is used for quantum computing (in which linearity and the expanded state space are the cited advantage).
Our automata are not to be confused with the quantum automata of [17] or [18], and hence we use the name C-automaton for the general notion and quantum or classical C-automaton for those which represent respectively quantum or classical components.
We define a C-automaton Q with a given set A of “signals on the left interface”, and set B of “signals on the right interface” to consist of a finite dimensional complex vector space V and a family of linear transformations ϕa,b : V → V (a ∈ A, b ∈ B). A quantum -automaton is one in which the space V has the extra structure of an hermitian inner product, and in which the linear transformations are unitary transformations or orthogonal projections. A classical C-automaton is one with the extra structure that the space V is of the form CX for a given finite set X and for which the matrices of the linear transformations are zero-one matrices induced by binary relations on X.
The idea of [12] was to introduce two-sided automata, in order to permit opera- tions analogous to the parallel, series and feedback of classical circuits, in particular in concurrency theory. We have more recently described a similar algebra for au- tomata with probability in [9],[10].
As an illustration of the algebra we will give details of the teleportation protocol of [3], proving its correctness with these tools.
C-automata

Definition 2.1 Consider two finite alphabets A and B. A C-automaton Q with left interface A and right interface B consists of a finite dimensional complex vector space V of states, and an A × B indexed family ϕ = ϕa,b(a∈A,b∈B) of linear transformations from V to V.
Definition 2.2 A C-automaton Q with the extra structure that the space V is en- dowed with an hermitian inner product < > and for which the linear transforma- tions are either unitary or orthogonal projections is called a quantum C-automaton. Definition 2.3 A C-automaton Q with the extra structure that the space V is CX for a given finite set X, and for which the linear transformations ϕa,b are of the form ϕa,b(ex, ey) = 0 or 1 (x ∈ X) (where ex (x ∈ X) is the standard basis of CX defined by ex(y) = 1 if y = x, and 0 otherwise) is called a classical (finite state)
-automaton. Note: we will often write just x instead of ex for a basis element.
The idea is that in a given state various transitions to other states are possible; the transitions that occur have effects, which we may think of a signals, on the two interfaces of the automaton, which signals are represented by letters in the

alphabets. It is fundamental not to think of the letters in A and B in general as inputs or outputs, but rather signals induced by transitions of the automaton on the interfaces. For examples see a later section.
Definition 2.4 Consider a C-automaton Q with interfaces A and B. A behaviour of length k of Q consists of a two words of length k, one w1 = a1a2 · · · ak in A∗ and the other w2 = b1b2 · · · bk in B∗ and a sequence of vectors
x0, x1 = ϕa1 ,b1 (x0), x2 = ϕa2 ,b2 (x1), · · · , xk = ϕak,bk (xk−1).
Graphical representation

Although the definitions above are mathematically straightforward, in practice a graphical notation is more intuitive. Given a chosen basis for the state space of an automaton (or, more generally, a decomposition of the state space as a direct sum) we may compress the description of an automaton with interfaces A and B, which requires A × B matrices of scalars (or, more generally, matrices of linear transfor- mations), into a single labelled graph, like the ones introduced in [12]. Further, expressions of automata in this algebra may be drawn as “tensor diagrams” also as in [12]. We indicate both of these matters by describing some examples.
Qubits

Qubit automata are a C-automata with state space C2 which singly, or combined, form quantum automata. We will describe three particular qubit automata which will need for our discussion of teleportation. One of the qubit automata is a quantum automaton; the others will be combined to form a 2 qubit quantum automaton.
Qubit Q1

Consider the alphabets A1 = {ε, c, h, m0, m1} and B1 = {ε, ¬}. Then Q1 is the au- tomaton with left interface A1 and right interface B1, state space  and transition matrices
 1 0 	 0 0 

ϕε,ε =
0 1
 , ϕc,¬ = 	

 1 0 	 1   1 1 

ϕc,ε =
0 0
 , ϕh,ε = √2 
1 −1 

 1 0 	 0 0 

ϕm0,ε =
0 0
, ϕm1 ,ε =	.
0 1

The other four transition matrices are zero matrices.
The intention behind these matrices is as follows: Q1 may do a transition labelled
ε, ε (idle transition); Q1 may receive a signal h and perform a transition determined

by the unitary Hadamard matrix; Q1 may receive a signal c (do Cnot) and if it is in state 1 pass on a signal ¬ with the intention to perform a not on another qubit; the signal m0 means that a measurement with result 0 has occurred on Q1; the signal m1 means that a measurement with result 1 has occurred on Q1. All this information may be put in the following diagram, noting that (i) the basis elements of C2 are called 0 and 1, and occur in the diagram as vertices, (ii) labels of transitions indicate which matrix is involved, (iii) the absence of an edge from i to j means that the i, jth element of the matrix is 0, (iv) we have in any case omitted loops labelled ε, ε, (v) we have included the value of the matrix element only when it is not 1.
Qubit Q2

Consider the alphabets A2 = {ε, ¬} × {ε, m0, m1} = A21 × A22 = B1 × A22 and B2 = ε . Then Q2 is the automaton with left interface A2 and right interface B2, state space C2 and transition matrices
 1 0 	 0 1 

ϕ(ε,ε),,ε =
0 1
 , ϕ(¬,ε),ε = 
1 0 

 1 0 	 0 0 
ϕ(ε,m0),ε =	, ϕ(ε,m1),ε =	.
0 0	0 1
The remaining matrices are zero.
The intention behind these matrices is as follows: Q2 may do a transition labelled ε, ε (idle transition); Q2 may receive a signal ¬ and perform a not transition; the signal m0 means that a measurement with result 0 has occurred on Q2; the signal m1 means that a measurement with result 1 has occurred on Q2.
Qubit Q3

Consider the alphabets A3 = {ε}, and B3 = {ε, 00, 01, 10, 11}. Then Q3 is the au- tomaton with left interface A3 and right interface B3, state space	and transition

matrices
 1 0 

ϕε,ε =	,
0 1
 1 0 	 1 0 

ϕε,00 =
0 1
 , ϕε,10 = 
,
0 −1

 0 1 
 0 −1 

ϕε,01 =
1 0
, ϕε,11 =	.
1 0

The intention behind these matrices is as follows: Q3 may do a transition labelled ε, ε (idle transition); Q3 may receive one of four signal 00, 01, 10, 11 and perform the given unitary transformations.
Alice and Bob

We now describe two classical C-automata Alice and Bob which represent, respec- tively, the sender and the receiver of teleportation.
Alice

Let X = {x1, x2, x3, x00, x01, x10, x11}. Then Alice is the classical C-automaton with state space CX with left interface AAlice = {ε} and right interface
BAlice = {ε, 00, 01, 10, 11} × {ε, c, h, m0, m1} × {ε, m0, m1}
= BAlice,1 × A1 × A22.
and transformations as indicated in the diagram
, 11
m1


where p′  = ε, (ε, m0, m0), q′  = ε, (ε, m0, m1), r′  = ε, (ε, m1, m0), s′  =
ε, (ε, m1, m1), p = ε, (00, ε, ε), q = ε, (01, ε, ε), r = ε, (10, ε, ε), s = ε, (11, ε, ε).
Bob
Let Y = {y1, y2}. Then Bob is the classical C-automaton with state space CY
with left interface ABob = {ε, 00, 01, 10, 11} × {ε, 00, 01, 10, 11} and right interface

BBob = {ε} and transformations relative to the standard basis ey1 , ey2 having the following non-zero elements:
ϕ(ε,ε),ε(ey1 ) = ey1 ,
ϕ(00,00),ε(ey1 ) = ey2 , ϕ(01,01),ε (ey1 ) = ey2 ,
ϕ(10,10),ε(ey1 ) = ey2 , ϕ(11,11),ε (ey1 ) = ey2 .
The algebra of C-automata

Now we define operations on C-automata analogous (in a precise sense) to those defined in [12].
Definition 4.1 Given a C-automata Q with left and right interfaces A and B, state space V , and family of transformations ϕ, and S with interfaces C and D, state space W , transformations ψ, the parallel composite Q ⊗ R is the C-automaton which has state space V ⊗ W , left interfaces A × C , right interface B × D, and transformations
(ϕ ⊗ ψ)(a,c),(b,d) = ϕa,b ⊗ ψc,d.

Definition 4.2 Given C-automata Q with left and right interfaces A and B, state space V , and family of transformations ϕ, and R with interfaces B and C, state space W , and family of transformations ψ the series (communicating parallel) com- posite of C-automata Q◦R has state space V ⊗ W , left interfaces A, right interface
C, and transition maps
(ϕ ◦ ψ)a,c = Σ φa,b ⊗ ψb,c.
b∈B
Notice that when the state spaces of the C-automata have direct sum decompo- sitions, and hence the operators have matrix representations, the tensor products in the above definitions may be calculated (via distributivity isomorphisms) using ten- sor products of matrices. This gives a way of calculating the operations analogous to the operations on automata in [12].
Definition 4.3 Given a relation ρ ⊂ A × B we define a C-automaton ρ as follows: it has state space C. The transition matrices ρa,b are 1×1 matrices, that is, complex numbers. Then ρa,b = 1 if ρ relates a and b, and ρa,b = 0 otherwise.
Some special cases, all described in [12], have particular importance:
the automaton corresponding to the identity function 1A, considered as a re- lation on A × A is called 1A;
the automaton corresponding to the diagonal function ∆ : A → A × A (consid- ered as a relation) is called ∆A; the automaton corresponding to the opposite relation of ∆ is called ∇A.
the automaton corresponding to the function twist : A × B → B × A is called
twistA,B.

the automaton corresponding to the relation η = {(∗, (a, a)); a ∈ A} ⊂ {∗} × (A× A) is called ηA; the automaton corresponding to the opposite of η is called ǫA.
The teleportation protocol
The protocol TP

Now the model of the teleportation protocol we consider is an expression in the algebra, involving also the automata Q1, Q2, Q3, Alice, and Bob. The protocol is
TP = Alice ◦ (1A3 ⊗ ((Q1 ⊗ 1A22 ) ◦ Q2)) ◦ (1A3 ⊗ Q3) ◦ Bob.
Notice that (Q1 ⊗ 1A22 ) ◦ Q2 and Q3 are quantum C-automata.
As explained in [12], we may represent this system by the following diagram:
BAlice,1







The behaviour of TP
Consider the following initial state of TP
1
x1 ⊗ (α0 + β1) ⊗ √2 (0 ⊗ 0 + 1 ⊗ 1) ⊗ y1;
that is that state of Q1 is arbitrary and Q2 and Q3 are in Bell state. Since the combined system TP is closed it consists of a single linear transformation θ acting on the state space CX ⊗ C2 ⊗ C2 ⊗ C2 ⊗ CY . A behaviour consists of a sequence of applications of θ to the initial state. However, in view of the construction of θ from parts, we may give a more explicit description of behaviours beginning in this initial state. In the following calculation it is critical that CX and CY break up into a direct sums C ⊕ C ⊕ · · · ⊕ C so that, using the distributive law of tensor over direct sum, Alice and Bob can do different actions on the qubits in different summands. This is entirely analogous to the use of sums and the distributive law in sequential programming, in particular in defining “if then else” [8],[23].
Simplifying the notation, writing for example 00 instead of 0 ⊗ 0, a four step

behaviour is:
1
x1 ⊗ (α0 + β1) ⊗ √2 (00 + 11) ⊗ y1
1
'→ x2 ⊗ √2 (α000 + α011 + β110 + β101) ⊗ y1
1

'→ 2 x3 ⊗ (α(0 + 1)00 + α(0 + 1)11 + β(0 − 1)10 + β(0 − 1)01) ⊗ y1
1
= 2 x3 ⊗ (α(000 + 100 + 011 + 111) + β(010 − 110 + 001 − 101)) ⊗ y1
1
'→ 2 (x00 ⊗ (α000 + β001) ⊗ y1 + x01 ⊗ (α011 + β010) ⊗ y1+
x10 ⊗ (α100 − β101) ⊗ y1 + x11 ⊗ (α111 − β110) ⊗ y1) 1
'→ 2 (x00 ⊗ (α000 + β001) ⊗ y2 + x01 ⊗ (α010 + β011) ⊗ y2+
x10 ⊗ (α100 + β101) ⊗ y2 + x11 ⊗ (α110 + β111) ⊗ y2) 1
= 2 (x00 ⊗ 00 + x01 ⊗ 01 + x10 ⊗ 10 + x11 ⊗ 11) ⊗ (α0 + β1) ⊗ y2.
The algebra of automata: further work

There is clearly much more to develop about the algebraic structure. We mention only that the constants ∆A, ∇A satisfy the Frobenius equations [5], namely that (∆A ⊗ 1A) ◦ (1A ⊗ ∇A) = ∇A ◦ ∆A.
Notice that relations on X also exist as closed classical automata with state space CX and there the Frobenius equations are also satisfied, which fact has been used in axiomatizing classical data in [7].
There is another sense in which the algebra is incomplete. We have not described the relation between our diagrammatic representation, which concern parallel op- erations, and those of Coecke, Selinger and others in which the diagrams represent flow of data, that is, involve sequential operations. We hope to apply the ideas of [13], [11] to study this relation.
References
Abramsky, S., and B. Coecke, A Categorical Semantics of Quantum Protocols, in Proceedings of the 19th Annual IEEE Symposium on Logic in Computer Science: LICS 2004, IEEE Computer Society, 415–425, 2004.
Benabou J., Introduction to bicategories, Springer Lecture Notes in Mathematics, 1967.
Bennett, C. H., G. Brassard, C. Cr´epeau, R. Jozsa, A. Peres, and W. K. Wootters, Teleporting an Unknown Quantum State via Dual Classical and Einstein-Podolsky-Rosen Channels, Phys. Rev. Lett. 70, 1895-1899, 1993.
A. Carboni, G.M. Kelly, R.F.C. Walters, R.J. Wood, Cartesian bicategories II, 2008.
A. Carboni, and R.F.C. Walters, Cartesian bicategories I, Journal of Pure and Applied Algebra, 49, 11–32, 1987.


Coecke Bob, and Dusko Pavlovic, Quantum measurements without sums, arxiv:quant-ph/0608072.v2, 2006.
Coecke Bob, Eric O. Paquette, and Dusko Pavlovic, Classical and Quantum Structures, Oxford University Computing Laboratory Report PRG-RR-08-02, 2008.
Elgot C.C., Monadic computation and iterative algebraic theories, Logic Colloquium 1973, Studies in Logic 80, North Holland, 175-230, 1975.
de Francesco Albasini L., N. Sabadini, and R.F.C. Walters: Cospan Span(Graphs): a compositional model for reconfigurable automata nets, Developments and New Tracks in Trace Theory, Cremona, Italy, 9-11 October 2008.
de Francesco Albasini L., N. Sabadini, and R.F.C. Walters: The compositional construction of Markov processes, arXiv:0901.2434, 2009.
de Francesco Albasini L., N. Sabadini, R.F.C. Walters, Cospans and spans of graphs: a categorical algebra for the sequential and parallel composition of discrete systems, arXiv:0909.4136, 2009.
Katis P., N. Sabadini, and R.F.C. Walters, Span(Graph): A categorical algebra of transition systems, Proc. AMAST ’97, SLNCS 1349, pp 307–321, Springer Verlag, 1997.
Katis P., N. Sabadini, and R.F.C. Walters, A formalisation of the IWIM Model, in: Proc. COORDINATION 2000, LNCS 1906, 267–283, Springer Verlag, 2000.
Katis P., N. Sabadini, and R.F.C. Walters, Feedback, trace and fixed-point semantics, Theoret. Informatics Appl. 36, pp 181–194, 2002.
Kelly G.M., and M.L. Laplaza, Coherence for compact closed categories, J. Pure Appl. Algebra 19, 193-213, 1980.
Kock J., “Frobenius algebras and 2D topological Quantum Field Theories”, Cambridge University Press, 2004.
Kondacs A., and J. Watrous, On the power of quantum finite state automata, Proceedings of the 38th Annual Symposium on Foundations of Computer Science, IEEE Computer Society, Los Alamitos, 66-75, 1997.
Moore C., and J. Crutchfield, Quantum automata and quantum grammars, Theoretical Computer Science, 237, 275–306, 2000.
Penrose R., Applications of negative dimensional tensors, In Combinatorial Mathematics and its Applications, Academic Press, 1971.
Sabadini Nicoletta, Sebastiano Vigna, and Robert F. C. Walters, A Note on Recursive Functions, Mathematical Structures in Computer Science 6(2): 127-139, 1996.
Selinger Peter, Towards a quantum programming language, Math. Struct. in Comp. Science, 14(4): 527-586, 2004.
Vigna Sebastiano, On the Relations between Distributive Computability and the BS, Model. Theor. Comput. Sci. 162(1): 5-21, 1996.
Walters R.F.C., “Categories and Computer Science, Cambridge University Press”, 1992.
Walters R.F.C., and R.J. Wood, Frobenius objects in cartesian bicategories, Theory and Applications of Categories, vol 20, 25-47, 2008.
