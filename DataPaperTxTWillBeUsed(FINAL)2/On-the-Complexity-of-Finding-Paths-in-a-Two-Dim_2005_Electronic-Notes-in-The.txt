Electronic Notes in Theoretical Computer Science 120 (2005) 45–57  
www.elsevier.com/locate/entcs


On the Complexity of Finding Paths in a Two-Dimensional Domain II: Piecewise Straight-Line Paths
Arthur W. Chou1
Department of Mathematics and Computer Science Clark University
Worcester, MA 01610, USA
Ker-I Ko2
Department of Computer Science
State University of New York at Stony Brook Stony Brook, NY 11794, USA

Abstract
The problem of finding a piecewise straight-line path, with a constant number of line segments, in a two-dimensional domain is studied in the Turing machine-based computational model and in the discrete complexity theory. It is proved that, for polynomial-time recognizable domains associated with polynomial-time computable distance functions, the complexity of this problem is equivalent
to a discrete problem which is complete for ΣP , the second level of the polynomial-time hierarchy.
Keywords: computational complexity, piecewise straight-line path, polynomial-time hierarchy, two-dimensional domain


Introduction
Finding a path in a two-dimensional region is an important problem in compu- tational complex analysis [7], computational geometry [5,6,12], and robotics

1 Email: achou@black.clarku.edu
2 Email: keriko@cs.sunysb.edu



1571-0661 © 2005 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2004.06.033


[8]. In Chou and Ko [2], we studied the computational complexity of find- ing the shortest path that connects two given points and lies entirely in a given two-dimensional domain. In this paper, we continue this investigation to study the computational complexity of finding a piecewise straight-line path that connects two given points with a constant number of straight-line seg- ments which lie entirely in a given domain (called the k-path problem if the number of line segments in the path is required to be at most k). This problem has been studied in the context of computational geometry [16], robotics [14], and VLSI layout theory [15,17].
As in Chou and Ko [2], we study the k-path problem in the context of computable analysis [13,18] and complexity theory of real functions of Ko and Friedman [11,9,10]. The basic framework for this study can be summarized as follows (for the technical details, see Section 2 and [2]):
The basic computational model for real-valued functions is the oracle Turing machine, to which the real number input is presented in the form of an oracle function mapping integers to dyadic rationals.
We consider only domains with polynomial-time representations. That is, we ask what the computational complexity of the k-path problem is, if the given domain S has a polynomial-time representation.
We consider two types of domains with polynomial-time representa- tions: (A) Bounded, simply connected domains with polynomial-time com- putable boundary curves; and (B) Polynomial-time recognizable domains with polynomial-time computable distance functions.
The oracle Turing machines that solve the k-path problem are allowed to make mistakes, with errors occur only when the target path is very close to the boundary of the given domain S.
In the following, we say that the k-path problem (or the shortest path problem) with respect to domain S is C-hard for some discrete complexity class C, if every problem B ∈ C can be solved in polynomial time relative to the solution of the k-path problem (or, respectively, the shortest path problem) of domain S. Based on this notion of hardness, we can summarize the main results of Chou and Ko [2] as follows:
If a domain S satisfies property (A) or property (B) defined above, then the corresponding shortest path problem is solvable by an oracle Turing machine in polynomial space.
There exists a domain S satisfying property (A) such that the corre- sponding shortest path problem is #P -hard.
There exists a domain S satisfying property (B) such that the corre- sponding shortest path problem is PSPACE-hard.


In addition to these results about the shortest path problem, Chou and Ko [2] also proved the following upper bound result about the 1-path problem (called the straight-line path problem in [2]):
If a domain S satisfies property (A) or property (B), then the cor-

responding 1-path problem is solvable by a ΠP
oracle Turing machine

(i.e., the complement of the 1-path problem is solvable by a polynomial- time nondeterministic oracle Turing machine).
Regarding the computational complexity of the k-path problem, we prove, in this paper, the following results:
There exists a domain S satisfying properties (A) and (B) such that the corresponding 1-path problem is ΠP -hard.
For any k ≥ 2, if a domain S satisfies property (A) or property (B),

then the corrsponding k-path problem is solvable by a ΣP
oracle Tur-

ing machine (i.e., it is solvable by a polynomial-time nondeterministic oracle Turing machine relative to an oracle set in NP ).
For any k ≥ 2, there exists a domain S satisfying property (B) such that the corresponding k-path problem is ΣP -hard.
Since the basic notations and computational models are similar to those used in [2], we will only present, in Section 2, the formal model for computing k-path problem. The reader is referred to [2] for the motivation and properties of this computational model. The main results (V)–(VII) are then presented in Sections 3 and 4. Section 5 discusses the open questions about the k-path problem.

Computational Model for the k-Path Problem
We will characterize the computational complexity of the k-path problems in terms of discrete complexity classes in the polynomial-time hierarchy. These
complexity classes include P , NP , ΠP (coN P ), ΣP .
Sets in the polynomial-time hierarchy have simple bounded-quantifier char- acterizations (see, e.g., Du and Ko [4]). In particular, a set A ∈ {0, 1}∗ is in
P if there exist a set B ∈ P and a polynomial function p such that, for any
w ∈ {0, 1}∗ of length n,
w ∈ A ⇐⇒ (∃u, |u| = p(n)) (∀v, |v| = p(n)) ⟨w, u, v⟩∈ B.
For the computational model of real functions, we follow the basic approach of the Turing machine-based complexity theory of real functions (see [9,10]). Let D denote the set of dyadic rationals; that is, D = {m/2n : m ∈ Z,n ∈ N}.


For any n ≥ 0, let Dn = {m/2n : m ∈ Z}. We say a function φ : N → D binary converges to a real number x, or represents a real number x, if (i) for all n ≥ 0, φ(n) ∈ Dn, and (ii) for all n ≥ 0, |x − φ(n)|≤ 2−n.
The basic model for the computation of real functions is the oracle Turing machine, which uses a function φ as an oracle and takes an integer n > 0 as the input. Intuitively, the oracle φ represents a real number x and the input n denotes the output precision.
Definition 2.1 (a) A function f : R → R is said to be computable if there is an oracle Turing machine M that, on an oracle function φ : N → D that binary converges to a real number x and an input n ∈ N, outputs a string d ∈ Dn such that |d − f (x)|≤ 2−n.
(b) A function f : [0, 1] → R is polynomial-time computable if it is com- putable by an oracle Turing machine M that operates in polynomial time (i.e., for any oracle function φ, the machine M always halts on input n in time p(n) for some polynomial function p).
The above definition can be extended to functions defined on two dimen- sional plane in a natural way. In particular, an oracle Turing machine com- puting a function f : R2 → R2 uses two oracles that represent a point z in R2, and it outputs a pair ⟨d, e⟩ of dyadic rationals as an approximation to the output point f (z) in R2.
We are interested in the following path-finding problem on the two dimen- sional plane R2:
Path Problem (k ≥ 1): Let S be a fixed domain in the two-dimensional plane R2. Given two points x, y in S, determine whether there is a path π from x to y which consists of at most k straight-line segments in domain S (such a path is called a k-segment path).
Following the approach of Chou and Ko [2], we will study this problem with respect to domains S which have the following types of polynomial-time representations:
We say S has Property (A) if S is bounded, simply connected (i.e., connected and having no holes), and its boundary ΓS is a polynomial- time computable Jordan curve (i.e., it is the image of a one-to-one, polynomial-time computable function f : [0, 1] → R2, except that f (0) = f (1)).
We say S has Property (B) if S is bounded, connected, polynomial-time recognizable, and the function δS(x) is polynomial-time computable.
In the above, the function δS(x) denotes the Euclidean distance between a point x ∈ R2 and the boundary ΓS of domain S; that is, δS(x) =defn


dist(x, ΓS) = min{|x − y| : y ∈ ΓS}. (In general, for two closed sets A, B, we define dist(A, B)= min{|x − y| : x ∈ A, y ∈ B}.) Also, a set S ⊆ R2 is called polynomial-time recognizable if there exist an oracle Turing machine M and a polynomial p such that Mφ,ψ(n) computes the characteristic function χS(z) of domain S in time p(n) whenever (φ, ψ) represents a point z in R2 whose distance to the boundary ΓS of S is greater than 2−n; i.e., the set
En(M )= {z ∈ R2 : (∃ (φ, ψ) representing z) [M φ,ψ(n) /= χS(z)]}
is a subset of {z ∈ R2 : δS(z) ≤ 2−n}. For more discussion about the notion of polynomial-time recognizable sets and the distance functions, see [1,2,3].
With respect to these notions of polynomial-time computability of a do- main, the question we are concerned with is the following: Suppose a domain S has property (A) or property (B). What is the complexity of the k-path problem of domain S?
Similar to the shortest path problem, if we regard the k-path problem of a domain S as the characteristic function fS of domain S, which maps a pair of points x, y ∈ R2 to {0, 1} (with 0 denoting no and 1 denoting yes), then fS is not a continuous function, and hence is not computable (as it is well known in computable analysis that a computable real-valued function must be continuous). Therefore, the natural model of computation is to allow the oracle Turing machine that computes the function fS to make mistakes. The following definition is similar to that about polynomial-time solvable shortest path problem given in [2].
Definition 2.2 Let k ≥ 1.
We say the k-path problem with respect to a domain S is computable if there exists an oracle Turing machine M , that uses four oracles φx1 , φx2 , φy1 , φy2 representing two points x, y ∈ S, and takes an integer n ∈ N as the input, such that the following conditions hold:
M always halts and outputs either 0 or 1.
If there is a k-segment path π in S between x and y such that dist(π, ΓS)
≥ 2−n, then M outputs 1.
If δS(x) ≥ 2−n, δS(y) ≥ 2−n, and there is no k-segment path π in S
between x and y, then M outputs 0.
We say the k-path problem with respect to a domain S is polynomial- time computable if it is computed by an oracle Turing machine M as described in (a) above, that satisfies the following extra condition:
(iv) There is a polynomial function p such that, for any oracles, M on input
n halts in p(n) steps.

Upper Bounds
We first consider the case of k = 1. The following lemma regarding the 1-path problem has been proven in [2]:
Lemma 3.1 Assume that S has property (A) or property (B). Then, there is a polynomial-time nondeterministic oracle Turing machine M such that, for any given oracles φ1, φ2, φ3, φ4 representing two points x, y ∈ S, respectively, and for any input n ∈ N, the following conditions hold:
If the line segment xy lies in S and has dist(xy, ΓS) ≥ 2−n, then M
rejects.
If the line segment xy does not lie in S,then M accepts.

This lemma implies the ΠP
upper bound for the 1-path problem.

Corollary 3.2 Assume that S has property (A) or property (B). Then, the 1-

path problem of domain S is solvable by a ΠP
oracle Turing machine (i.e., its

complement is solvable by a polynomial-time nondeterministic oracle Turing machine).
For k ≥ 2, we can prove the ΣP upper bound for the k-path problem. The idea of the proof is to nondeterministically guess k − 1 breakpoints between the source point x and the target point y, and then apply Lemma 3.1 to verify that each straight-line segment in the k-segment path formed by these points lies in the domain S. We omit the details of the proof.
Theorem 3.3 Assume that k ≥ 2 and S has property (A) or property (B). Then, there exist a polynomial-time nondeterministic oracle Turing machine M and a set A ∈ NP such that, for any oracles φ1, φ2, φ3, φ4 representing two points x, y ∈ S, respectively, and for any input n > 0, the following conditions hold:
If there exists a k-segment path π from x to y such that π lies in domain
S and dist(π, ΓS) ≥ 2−n, then MA,φ1 ,φ2,φ3,φ4 (n) accepts.
If there does not exist a k-segment path π from x to y that lies in domain S, then MA,φ1,φ2,φ3 ,φ4 (n) rejects.
The oracle Turing machine M in Theorem 3.3 can be modified into a Turing transducer M1 that outputs a k-segment path whenever M accepts.
Corollary 3.4 Assume that k ≥ 2 and S has property (A) or property (B). Then, there exist a polynomial-time nondeterministic oracle Turing transducer M1 and a set A ∈ NP such that, for any oracles φ1, φ2, φ3, φ4 representing two points x, y ∈ S, respectively, and for any input n > 0, the following conditions

hold:
If there exists a k-segment path π from x to y such that π lies in domain S and dist(π, ΓS) ≥ 2−n, then MA,φ1 ,φ2,φ3,φ4 (n) accepts and outputs k−1 dyadic points x1, x2,... , xk−1 in S such that the path consisting of xx1, x1x2,... , xk−2xk−1, and xk−1y is in S.
If there does not exist a k-segment path π from x to y that lies in domain S, then MA,φ1,φ2,φ3 ,φ4 (n) rejects.

Lower Bounds
We first consider the 1-path problem. The proof of the following theorem is similar to, but simpler than, the proof of Theorem 4.3 (for the case k ≥ 2). We omit the details.
Theorem 4.1 For any set A ∈ ΠP , there exists a domain S ⊆ [0, 1]2 satisfy- ing properties (A) and (B) such that A is polynomial-time computable relative to the solution of the 1-path problem of domain S.
Together with Corollary 3.2, we obtain the following characterization of the complexity of the 1-path problem.
Corollary 4.2 The following are equivalent:
P = NP .
For any domain S ⊆ [0, 1]2 satisfying property (A) or (B), the corre- sponding 1-path problem is polynomial-time computable.
Next, we consider the k-path problems for k ≥ 2. We show that, for each k ≥ 2, there exists a domain S satisfying property (B) such that the k-path problem of domain S is ΣP -hard.
Theorem 4.3 Let k ≥ 2. For any set A ∈ ΣP , there exists a domain S ⊆ [0, 1]2 satisfying property (B) such that A is polynomial-time computable relative to the solution of the k-path problem of domain S.
Proof. (Sketch). We first consider the case k = 3.

Recall that A ∈ ΣP
means that there exist a set B ∈ P and a polynomial

function p such that, for any w ∈ {0, 1}∗ of length n,
w ∈ A ⇐⇒ (∃u, |u| = p(n)) (∀v, |v| = p(n)) ⟨w, u, v⟩∈ B.

For any w ∈ {0, 1}∗ of length n > 0, we will define a domain Tw ⊆ [0, 1]2. For any k, 0 ≤ k ≤ 2p(n) − 1, we let uk be the kth string in {0, 1}n; that is,


uk is the p(n)-bit binary representation of the integer k, with possible leading zeroes. We also let ak = k · 2−p(n) for any 0 ≤ k ≤ 2p(n).
Now, for each w ∈ {0, 1}∗ and each j, 0 ≤ j ≤ 2p(n) − 1, where n =
|w|, we define a function fw,j that maps the unit interval [0, 1] to a curve in [0, 1]2. We divide the interval [0, 1] into 2p(n) subintervals [ak, ak+1], for k = 0, 1,... , 2p(n) − 1, and function fw,j maps each interval [ak, ak+1] to either a line segment or a curve consisting of two line segments. Namely, for each k, 0 ≤ k ≤ 2p(n) − 1,
fw,j maps [ak, ak+1] to the line segment whose two endpoints are ⟨1/4+ 
ak/2, aj⟩ and ⟨1/4+ ak+1/2, aj⟩, if ⟨w, uj, uk⟩ ∈ B; and
fw,j maps [ak, ak+1] toa 2-segment path from ⟨1/4+ ak/2, aj⟩ to ⟨1/4+ ak+1/2, aj⟩, with the middle breakpoint ⟨1/4+ ak/2+ 2−p(n)−2, aj + 2−p(n)−1⟩, if ⟨w, uj, uk⟩ /∈ B.
Let Γw,j denote the image of fw,j on [0, 1]. We show in Figure 1 the curve Γw,j, where p(|w|) = 3, j = 0, and ⟨w, uj, uk⟩ ∈ B for k = 0, 3, 4, 5, 7, and
⟨w, ujuk⟩ /∈ B for k = 1, 2, 6. (In Figure 1, a∗ denotes 1/4+ ak.)
.	.	.	.	.	.	.	.	.

(1/4, 0)
(a1*, 0)
(a2*, 0)
(a3*, 0)
Fig. 1. A curve Γw,j .
(a6*, 0)
(a7*, 0)	(3/4, 0)


Next, for each w ∈ {0, 1}∗ and each j, 0 ≤ j ≤ 2p(n), where n = |w|, we define a closed set Xw,j. First, let Rw,j,0 be the rectangle whose four corners are ⟨1/8, aj−1 + 2−p(n)−2⟩, ⟨1/4, aj−1 + 2−p(n)−2⟩, ⟨1/4, aj⟩ and ⟨1/8, aj⟩; and let Rw,j,1 be the rectangle whose four corners are ⟨3/4, aj−1 + 2−p(n)−2⟩,
⟨7/8, aj−1 + 2−p(n)−2⟩, ⟨7/8, aj⟩ and ⟨3/4, aj⟩. Now, set Xw,j can be defined as follows:
For j = 0, Xw,0 is the region enclosed between the line ⟨ 1 , 0⟩⟨ 3 , 0⟩ and
4	4
the curve Γw,0.
For 1 ≤ j ≤ 2p(n) − 1, Xw,j is the union of rectangles Rw,j,0, Rw,j,1
and the region enclosed between the line from ⟨1/4, aj − 2−p(n)−2⟩ to
⟨3/4, aj − 2−p(n)−2⟩ and Γw,j.
For j = 2p(n), Xw,j is the union of three rectangles: Rw,j,0, Rw,j,1, and the rectangle whose four corners are ⟨1/4, 1 − 2−p(n)−2⟩, ⟨3/4, 1 − 2−p(n)−2⟩, ⟨3/4, 1⟩ and ⟨1/4, 1⟩.
We also define Yw to be the union of two rectangles whose four corners are ⟨7/8, 1 − 3 · 2−p(n)−2⟩, ⟨15/16, 1 − 3 · 2−p(n)−2⟩, ⟨15/16, 1⟩, ⟨7/8, 1⟩ and, respectively, ⟨15/16, 2−p(n)−2⟩, ⟨1, 2−p(n)−2⟩, ⟨1, 1⟩, ⟨15/16, 1⟩. Fianlly, we let



Xw,0
Fig. 2. The domain Tw , where m = 2p(n).

T	= [0, 1]2 −  2p(n) X

w,j
— Yw
, and xw
= ⟨1/8 − 2−p(n)−2, 2−p(n)−1⟩, yw =

⟨7/8+ 2−p(n)−2, 2−p(n)−1⟩ (see Figure 2).
We observe that the domain Tw and points xw, yw satisfy the following properties:
If there exists an integer j,0 ≤ j ≤ 2p(n) −1 such that for all k,0 ≤ k ≤ 2p(n) − 1, ⟨w, uj, uk⟩∈ B, then there is a 3-segment path in Tw from xw to yw, whose middle two breakpoints are ⟨1/8 − 2−p(n)−2, aj + 2−p(n)−3⟩ and ⟨7/8+ 2−p(n)−2, aj + 2−p(n)−3⟩.
Otherwise, all 2p(n) possible pathways are blocked by some bumps of the functions fw,j, and so there is no 3-segment path in Tw from xw to yw.
Now, we can combine domains Tw into a single domain S. For each n > 0, let cn =1 − 2−(n−1). We define, for each w ∈ {0, 1}∗ of length n, domain Sw to be the image of domain Tw under the linear transformation
gw(⟨x1, x2⟩)= ⟨cn + x1 · 2−n, (kw + x2) · 2−n⟩,
where kw is the integer whose n-bi t binary representation (with possible lead-
ing zeroes) is exactly w. Let S =	w∈{0,1}+ Sw, (see Figure 3).
It is not hard to verify that S satisfies property (B). That is, for any given
point z ∈ [0, 1]2 and integer n > 0, if dist(z, ΓS) ≥ 2−n, then we can determine whether z ∈ S and find a dyadic rational d such that |d − dist(z, ΓS)|≤ 2−n. In addition, from the above observations (1) and (2) about Tw and xw, yw,



Fig. 3. The domain S.

Fig. 4. The domains Tw in the case of k = 8.
we see that w ∈ A if and only if there is a 3-segment path between gw(xw) and gw(yw). So, the question of whether w ∈ A can be solved in polynomial time by asking whether there is a 3-segment path in S from gw(xw) to gw(yw)). This completes the proof of the case k = 3.
For k > 3 and k = 2, we can modify the above construction to get the required domain S. We omit the details, and only show the domain Tw for the case of k =8 in Figure 4, and the domain Tw for the case k =2 in Figure
HH

Corollary 4.4 Let k ≥ 2. The following are equivalent:
ΣP = ΣP .
2	1
For any domain S ⊆ [0, 1]2 satisfying property (B), the corresponding
k-path problem is nondeterministic polynomial-time computable.
We remark that it is known in discrete complexity theory that P = NP



Fig. 5. The domains Tw in the case of k = 2.
implies ΣP = ΣP = P (see, e.g., Du and Ko [4]). Therefore, Corollary 4.2 also
2	1
holds for k-path problems with k ≥ 2.
Corollary 4.5 Let k ≥ 2. The following are equivalent:
P = NP .
For any domain S ⊆ [0, 1]2 satisfying property (B), the corresponding
k-path problem is polynomial-time computable.

Final Remarks
We observe that the domain S constructed in Theorem 4.3, though satisfying property (B), is not a simply connected domain. In fact, it contains an infinite number of holes. Whether this construction can be strengthened to make S a simply connected domain, or a multiply connected domain (i.e., a domain with a finite number of holes), is an interesting open question. We do know that the result of Theorem 4.1 also applies to the k-path problem for k > 1. So, we have the following weaker lower bound for simply connected domains S satisfying either property (A) or property (B).
Corollary 5.1 Let k ≥ 2. For any set A ∈ ΠP , there exists a simply con- nected domain S ⊆ [0, 1]2 satisfying properties (A) and (B) such that A is polynomial-time computable relative to the solution of the k-path problem of domain S.
In addition, we observe that the holes in domain S constructed in Theorem
4.3 can be eliminated if we consider three-dimensional domains.


Corollary 5.2 Let k ≥ 2. For any set A ∈ ΣP , there exists a simply con- nected three-dimensional domain S ⊆ [0, 1]3 satisfying properties (A) and (B), such that A is polynomial-time computable relative to the solution of the k-path problem of domain S.
Sketch of Proof. We describe the idea for the case k = 3. Consider the construction of domain Tw in Theorem 4.3. We can think of Tw as the unit square [0, 1]2 with a number of holes Xw,j, 0 ≤ j ≤ 2p(n), and Yw. Now, we start with the unit cube [0, 1]3, and for each j, 0 ≤ j ≤ 2p(n), we dig a hole (from top) of the shape Xw,j of depth 1/2, and a hole of the shape Yw of the same depth. Call the remaining region Uw (which contains the bottom half of the cube and so is simply connected). In addition, attach two bars Bw,1 = [0, 1/8] × [−1, 0] × [7/8, 1] and Bw,2 = [7/8, 1] × [−1, 0] × [7/8, 1] to Uw.

Let T '
be the interior of Uw ∪ Bw,1 ∪ Bw,2, and let x'
= ⟨1/16, −15/16, 15/16⟩

and yw = ⟨15/16, −15/16, 15/16⟩ (so that xw and yw are close to the end of the two bars Bw,1 and Bw,2, respectively). We note that any path from x'
to y' must contain first a line segment from Bw,1 to Uw, and at last a line
segment from Uw to Bw,2, and so the only possible 3-segment path from x' to
' must stay in the top half of the domain T ' , and so satisfies the conditions

(1) and (2) of the proof of Theorem 4.3.
With some care, we can combine domains T '

into a single domain S'

that is simply connected, and satisfies property (B). Actually, S' also satisfies property (A), since each hole Xw,j in the original domain Tw can be computed in polynomial time in |w|.	 

References
Chou, A. W. and Ko, K., Computational complexity of two-dimensional regions, SIAM
J. Comput. 24 (1995), 923–947.
Chou, A. W. and Ko, K., On the complexity of finding paths in a two-dimensional domain I: shortest paths, Math. Logic Quarterly, to appear; also in Proc. International Conference on Computability and Complexity in Analysis, 2003, Informatik Berichte 302- 8/2003, FernUniversita¨t in Hagen, Hagen, Germany.
Chou, A. W. and Ko, K., A note on the complexity of distance functions of two-dimensional domains, preprint.
Du, D.-Z. and Ko, K., Theory of Computational Complexity, John Wiley & Sons, New York, 2000.
Guibas, L., Hershberger, J., Leven, D., Sharir, M. and Tarjan, R., Linear time algorithms for visibility and shortest path problems inside simple polygons, Proceedings of the 2nd ACM Symposium on Computational Geometry, ACM, New York, 1986, pp. 1–13.
Guibas, L. and Hershberger, J., Optimal shortest path queries in a simple polygon, Proceedings of the 3rd ACM Symposium on Computational Geometry, ACM, New York, 1987, pp. 50–63.
Henrici, P., Applied and Computational Complex Analysis, Vol. 1–3. John Wiley & Sons, New York, 1974, 1977, 1986.


Hopcroft, J. E., Schwartz, J. T. and Sharir, M., Planning, Geometry, and Complexity of Robot Motion, Ablex, Norwood, NJ, 1987.
Ko, K., Complexity Theory of Real Functions, Birkha¨user, Boston, 1991.
Ko, K., Polynomial-time computability in analysis, in Handbook of Recursive Mathematics, Vol. 2: Recursive Algebra, Analysis and Combinatorics, Yu. L. Ershov et al., eds., Studies in Logic and the Foundations of Mathematics, Vol. 139, Elsevier, Amsterdam, 1998, pp. 1271– 1317.
Ko, K. and Friedman, H., Computational complexity of real functions, Theoret. Comput. Sci.
20 (1982), 323–352.
Mitchell, J. and Sharir, M., New results on shortest paths in three dimensions, Proc. 20th ACM Symposium on Computational Geometry, ACM, NY, 2004 (to appear).
Pour-El, M. and Richards, I., Computability in Analysis and Physics, Springer-Verlag, Berlin
, 1989.
Reif, J.H. and Storer, J.A., Minimizing turns for discrete movement in the interior of a polygon,
IEEE J. Robot. Autom., 3 (1987), 182–193.
Storer, J.A., On minimal node-cost planar embeddings, Networks 14 (1984), 181–212.
Suri, S., A linear time algorithm for minimum link path in a simple polygon, Comput. Vision, Graphics, Image Proc. 35 (1986), 99-110.
Tamassia, R., On embedding a graph in the grid with the minimum number of bends, SIAM
J. Comput. 16 (1987) 421–444.
Weihrauch, K., Computable Analysis, Springer-Verlag, Heidelberg, 2000.
