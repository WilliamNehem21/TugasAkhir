

Electronic Notes in Theoretical Computer Science 247 (2009) 19–37
www.elsevier.com/locate/entcs
Recursive Definitions and Fixed-Points
Francicleber Martins Ferreira1,2 Ana Teresa Martins3,4
Departamento de Computac¸˜ao Universidade Federal do Ceara´ Fortaleza-CE, Brazil

Abstract
An expression such as ∀x(P (x) ↔ φ(P )), where P occurs in φ(P ), does not always define P . When such expression implicitly defines P , in the sense of Beth [1] and Padoa [10], we call it a recursive definition. In the Least Fixed-Point Logic (LFP), we have theories where interesting relations can be recursively defined [4,9]. We will show that for some sorts of recursive definitions there are explicit definitions on sufficiently strong theories of LFP. It is known that LFP, restricted to finite models, does not have Beth’s Definability Theorem [6,7,3]. Beth’s Definability Theorem states that, if a relation is implicitly defined, then there is an explicit definition for it. We will also give a proof that Beth’s Definability Theorem fails for LFP without this finite model restriction. We intend to investigate fragments of LFP for which Beth’s Definability Theorem holds.
Keywords: recursive definitions, fixed-points, Beth’s Definability Theorem


Introduction
In the semantic definition of a logical system, models give interpretations to the symbols and sentences of the language according to rules which determine the logic. When a set of sentences, say Φ, in which a symbol P occurs, is such that the interpretation of P is unique if the interpretation of the other symbols is fixed, we say that Φ implicitly deﬁnes P . Without loss of generality, suppose P be a relation symbol. An expression like
(1)	∀x(P (x) ↔ ψ(x)),
where P does not occur in ψ(x) is an explicit deﬁnition for P .  We call P (x) the deﬁniendum (the symbol which is being defined) and ψ(x) the deﬁniens (the expression whose meaning is being assigned to the defined symbol). If an explicit

1 This research is partially supported by CNPq, FUNCAP, CAPES and CAPES(PROCAD).
2 Email: fran@lia.ufc.br
3 This research is partially supported by CNPq(PQ) and CAPES(PROCAD).
4 Email: ana@lia.ufc.br

1571-0661 © 2009 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2009.07.046

definition, say (1), is logically implied by Φ, we say that (1) is an explicit deﬁnition for the symbol P in the set of sentences Φ in the underlying logic.
An implicit definition axiomatizes a special class of models, namely, a P -defined class of models for some relation symbol P (see Definition 2.1). In the class of models of a theory which implicitly defines a symbol of the language, if two models on the same domain give the same interpretation to the other symbols, then they give the same interpretation to the defined symbol.
In [10], Padoa showed that when an explicit definition for a symbol is a logical consequence of a set of first-order sentences Φ, such symbol is implicitly defined by Φ. The so called Padoa’s Method is then used to show that an expression like
(1) cannot be proved from a theory Φ which does not implicitly define the relation symbol P . In [1], Beth proved that, in first-order logic, the converse also holds. That is, whenever a first-order theory implicitly defines a relation symbol, then there is a first-order explicit definition for the defined symbol. This result is called Beth’s Deﬁnability Theorem.
In Computability Theory and in Mathematics it is common to introduce func- tions or relations through recursive statements. A recursive statement is an expres- sion like
(2)	∀x(P (x) ↔ ψ(P, x)),
similar to (1), but where the symbol on the left-hand side of the biconditional ap- pears in the expression on the right-hand side. When a new symbol P is introduced in a theory, say Φ, through a recursive statement we say that Φ was extended by a recursive statement about P . If such recursive statement together with Φ implicitly defines P , we call such statement a recursive deﬁnition for P in Φ and say that Φ was extended by a recursive deﬁnition for P .
Sometimes, a recursive statement is not a recursive definition. Consider, for instance, the first-order theory ThFO(N) consisting of the first-order sentences which hold in the standard model N = (N, σN, 0N) of the natural numbers with zero (0N) and the successor function (σN). Let σ and 0 be the function and constant symbols which represent the successor function σN and the natural number 0N, respectively, in the language. If one aims to introduce a new function symbol, say +, in the theory ThFO(N) by adding the axioms 5
∀x(+(x, 0) = x),
(3)
∀x∀y(+(x, σ(y)) = σ(+(x, y))),
one can see that the symbol + will not be implicitly defined. This is due to the fact that the theory ThFO(N) has nonstandard models, that is, ThFO(N) has models not isomorphic to N. To see that, consider the strucure M = (M, σM, 0M) obtained

5 Note that the two sentences in (3) can be put in the form of a recursive statement as (2) if we use a ternary relation symbol +(x, z, w) instead of the binary function +(x, z). In this case, the sentences in (3) can be replaced with the following recursive statement:
∀x∀z∀w(+(x, z, w) ↔ (z =0 ∧ w = x) ∨ ∃y(z = σ(y) ∧ ∃u(+(x, y, u) ∧ w = σ(u)))).

from the disjoint union of N and a structure Z' = (  '	Z' 0Z' ) isomorphic to the
standard model Z = (Z, σZ, 0Z) of the integer numbers with zero element 0Z and the successor function σZ and such that Z' ∩ Z = ∅ 6 . The domain M of M is equal to N ∪ Z'. M ∩ N is called the standard part of M and an element in M ∩ N is a standard element of M, and M ∩ Z' is called the nonstandard part of M and element in M ∩ Z' is a nonstandard element of M. The constant 0M is equal to 0N. The successor function σM behaves exactly as σN on the elements of M ∩N and like
σZ' on M ∩ Z'. It is known that a structure like M is a model of Th	(N) 7 . Now,
FO 
consider two expansions M' = (M, +M' ) and M'' = (M, +M'' ) of M, where the two binary relations +M' and +M'' are defined as follows. First, let +N be the usual addition operation of the natural numbers and +Z' the usual addition operation of Z'. Let n denote the term
σ. . . σ 0,
`˛n¸ x
and nN and nZ' the elements assigned to n by N and Z', respectively. Let a, b ∈ M . We define +M' as:
+M' (a, b) = a +N b,	if a, b ∈ N, 
+M' (a, b) = a +Z' b,	if a, b ∈ Z',

(4)



and +M'' as:



(5)
+M' (a, b) = nZ' +Z' b, if a ∈ N , nN = a, and b ∈ Z',
+M' (a, b) = a +Z' nZ' , if a ∈ Z', b ∈ N and nN = b;


+M'' (a, b) = a +N b,	if a, b ∈ N, 
+M'' (a, b) = a +Z' b,	if a, b ∈ Z',
+M'' (a, b) = σZ' nZ' +Z' b, if a ∈ N , nN = a, and b ∈ Z',
+M'' (a, b) = a +Z' σZ' nZ' , if a ∈ Z', b ∈ N and nN = b.

The relations +M' and +M'' behave like the usual addition operations +N and
+Z' on the standard part and on the nonstandard part, respectively, of both M' and M''. The +M' maps a pair composed of a standard natural number a = nN— an element of N —and an integer number b—an element of Z'—as the sum of the integer number b and the integer number nZ' corresponding to a in Z'. The same applies for the case in which +M' maps a pair composed of an integer and a natural, mutatis mutandis. The last two clauses of (5) differ +M'' from +M' . The behavior of +M'' in these cases is similar to that of +M' , but differs by making a shift on the value of +M' (a, b) by one—or by σZ' , if one prefers—, that is, if either a or b is

6 We use a structure Z' isomorphic to Z with Z' ∩ Z = ∅ to avoid the fact that the set of natural numbers is a subset of the set of integer numbers.
7 In [5, Chapter XI, page 184], Ebbinghaus et al. give an axiomatization for T hFO(N) from which it can be easily checked that M is a model of T hFO(N).

nonstandard, then

+M'' (a, b) = σZ' +M' (a, b).

It is not difficult to see that M' and M'' satisfy (3).
As M' and M'' are expansions of M, both are models of ThFO(N). Also, M'
and M'' give the same interpretation to the symbols other than +, namely, σ and
0. But M' and M'' differ on the interpretation of the symbol + by definition. It follows that the sentences in (3), together with ThFO(N) do not implicitly define the relation symbol +.
Some logical systems more powerful than first-order logic can express the class of structures isomorphic to N, as, for instance, the second-order logic or the Least Fixed-Point Logic [4,9,2]. Since the standard model of the natural numbers N admits only one expansion to a model of (3)—this can be proved by a simple induction on the natural numbers—the recursive statement (3) is a recursive definition for + in the theory of N in these logical system.
The Least Fixed-Point Logic (LFP) has a syntactic construct which allows one to write expressions that are interpreted as the least fixed-point of some monotone operators obtained from positive formulas (see the next section). Beth’s Definability Theorem does not hold for LFP when we restrict its semantics to finite models only [6,7,3].
We are particularly interested in the problem of discovering fragments of LFP which have a form of Beth’s Definability Theorem, that is, for which implicitly de- fined symbols have explicit definitions. More specifically, we would like to determine under which conditions a recursive definition has an explicit definition in LFP. In Section 2, we introduce some notation and precisely state the basic concepts. In Section 3, we discuss the failure of Beth’s Definability Theorem for LFP with finite models semantics and show how the finite models restriction can be easily avoided. In Section 4, we prove the main result of this paper regarding the explicit definabil- ity of recursive definitions (see Definition 2.5): we show that some sorts of recursive definitions in the LFP theories of inductive structures have explicit definitions in LFP. In Section 5, we conclude with a review of our results.
Preliminaries
In this section, we briefly present the notation used throughout the text. Details can be found in [5].
A symbol set is a set containing constant, function and relation symbols. A mathematical structure on a symbol set S (or an S-structure) is a pair A = (A, ρ) where A is a set called the domain of A and ρ is a function that assigns to each symbol s in S its interpretation sA by A, that is, to each n-ary relation symbol P in S a subset P A ⊆ An, to each n-ary function symbol f in S an n-ary function f A : An → A and to each constant symbol c in S an element cA of A. We use Fraktur capital letters (A, B,.. .) to denote structures and the corresponding Roman capital letters (A, B, .. .) for their domains. A formula written with the symbols of a symbol set S is called an S-formula and the set of all S-formulas of a logic L is denoted by

LS . A literal is either an atomic formula or a negated atomic formula.
Let φ(X, x) be an S-formula for some symbol set S and with relation variables X = X1,..., Xn possibly occurring free in φ(X, x) and variables x = x1,..., xm possibly occurring free in φ(X, x). When we write φ(X, x), it does not mean that all the variables in x occur in φ(X, x), but they are important in the corresponding context. Let A be an S-structure. Let X = X1,..., Xn be a tuple of relations on A such that the arity of Xi is equal to the arity of the relation variable Xi, 1 ≤ i ≤ n.
Let a = a1,..., am be a tuple of elements of A. We write
tA[a]
to refer to the element which interprets the term t in A when a is assigned to the variables of t and we write

(A, X) |= φ(X, x)[a]

to say that the S-structure A satisfies the formula φ(X, x), if the values Xi and aj
are assigned to the free variables Xi and xj, 1 ≤ i ≤ n, 1 ≤ j ≤ m, respectively.
In order to introduce the Least Fixed-Point Logic, we will need the following definitions. Let A be a set and n be a natural number. An operator on An is a function Ψ : ℘(An) → ℘(An). A set X ⊆ An is a ﬁxed-point of Ψ iff Ψ(X) = X. An operator Ψ is said to be monotone iff, for each X ⊆ An and Y ⊆ An, if X ⊆ Y then Ψ(X) ⊆ Ψ(Y). The Knaster-Tarski Theorem [11] assures that any monotone operator Ψ : ℘(An) → ℘(An) has a least ﬁxed-point, that is, a fixed-point which is a subset of all fixed-points of Ψ. We write lfp(Ψ) to refer to the least fixed-point of a monotone operator Ψ. Given an S ∪ {X}-formula φ(X, x, y) of, for instance, first-order logic, such that X is an n-ary relation symbol and the free variables of φ(X, x, y) are among x = x1,..., xn and y = y1,..., ym, an S-structure A and a tuple b ∈ Am of elements in A, we can define an operator

(6)



Ψφ(X,x,y)(X) = {a ∈ An|(A, X) |= φ(X, x, y)[a, b]}.
b



If b is the empty sequence ∅, we eliminate the subscript in (6).
A formula φ(X, x) is positive on X iff any occurrence of the relational symbol X in φ(X, x) is within the scope of an even number of negations (considering only the connectives ∧, ∨, ¬ and the existential (∃) and universal (∀) quantifiers). If φ(X, x) is positive on X, the operator Ψφ(X,x) is monotone. The Least Fixed-Point Logic is the extension of first-order logic by adding the following rule to the calculus of formulas:


[lfp
φ(X, x)
X,x φ(X, x)](t)

where X is an n-ary relation variable, φ(X, x) is positive on X, x is an n-tuple of variables and t is an n-tuple of terms of the language. We call a formula of the form [lfpX,x φ(X, x)](t) an lfp-formula.  The relation variable X is bound in [lfpX,x φ(X, x)](t). The satisfiability relation |= between structures and lfp- formulas is defined as:

	
A |= [lfpX,x φ(X, x)](t)[b] iff tA[b] ∈ lfp(Ψφ(X,x)).

We will precisely state the definitions 8 of implicit definition, explicit definition and recursive definition below. First, let us introduce the definition of P-deﬁned class of structures.
Definition 2.1 (P -Defined Class of Structures) A class C of S∪{P}-structures is P-deﬁned iff, for each A ∈C and B ∈C with the same domain A = B and sA = sB for each s ∈ S, we have P A = P B.
We introduce the definition of implicit definition using the concept of P -defined class of structures.
Definition 2.2 (Implicit Definition) A set Φ of S ∪ {P}-sentences implicitly deﬁnes (or is an implicit deﬁnition for ) P iff the class Mod(Φ) of the S ∪ {P}- structures which satisfies every formula in Φ is P -defined.
The definitions of explicit definition, recursive statement and recursive definition are stated below.
Definition 2.3 (Explicit Definition) A sentence of the form
∀x(P (x) ↔ φ(x))
where P does not occur in φ(x) is an explicit deﬁnition for P .
Definition 2.4 (Recursive Statement) An S ∪ {P}-formula of the form
∀x(P (x) ↔ φ(P, x)) where P occurs in φ(x) is a recursive statement about P .
Definition 2.5 (Recursive Definition) Given a set Φ of S-sentences, a recursive statement ψ = ∀x(P (x) ↔ φ(P, x)) about P such that Φ ∪ {ψ} implicitly defines P is a recursive deﬁnition for P in Φ. We call the theory Φ ∪ {ψ} an extension of Φ by a recursive deﬁnition for P . If the recursive statement ψ implicitly defines P in the empty theory ∅, we just say that ψ is a recursive deﬁnition.
Beth showed the following theorem about first-order logic in [1], which is the converse of Padoa’s Theorem:
Theorem 2.6 (Beth’s Definability Theorem) If a set Φ of ﬁrst-order sen- tences implicitly deﬁnes a relation symbol P, then there is an explicit deﬁnition
∀x(P (x) ↔ ψ(x)) such that
Φ |= ∀x(P (x) ↔ ψ(x)).
In the following section, we discuss the failure of Beth’s Theorem in LFP.

8 In the same sense that, in Mathematical Logic, a theorem about a logical system is called a metatheorem, we call metadefinitions those definitions made in the metalanguage level in order to differ from the object- language definitions. We prefer, however, use the term definition here for both the metalanguage and object-language cases, for the sake of notational simplicity, whenever the context makes clear which one is the case.

The Failure of Beth’s Theorem in LFP
It is known that LFP, with finite models semantic, does not have Beth’s Definability Theorem [6,7,3]. Using a cardinality argument, we also can easily show that Beth’s Definability Theorem does not hold for LFP without this restriction to finite models.
Theorem 3.1 There is a set Φ of LFP sentences which implicitly deﬁnes a unary relation symbol P for which there is no explicit deﬁnition ∀x(P (x) ↔ φ(x)) such that Φ |= ∀x(P (x) ↔ φ(x)).
Proof. Let S = {0, σ} be a symbol set containing a constant symbol 0 and a unary function symbol σ. Let φ0,σ be the conjunction of the following sentences:
∀x(¬(σ(x) = 0))
∀x∀y(σ(x) = σ(y) → x = y)
∀x[lfpY,y (y = 0) ∨ ∃z(Y (z) ∧ y = σ(z))](x)
Sentence (8) states that 0 has no predecessor, (9) states that σ is injective and
says that any element in a model is either 0 or can be reached by finitely many applications of σ from 0. To see this, let α(Y, y) = (y = 0) ∨ ∃z(Y (z) ∧ y = σ(z)). Let A be a model of φ0,σ and Ψα(Y,y) be the monotone operator induced by α on
A. It is clear that any fixed-point of Ψα(Y,y) must contain 0A and be closed under
applications of the function σA. It can be easily shown, by induction on the natural numbers, that lfp(Ψα(Y,y)) is exactly the subset of A which contains 0A and the elements of A obtained from 0A by finitely many applications of the σA function. It follows that A is isomorphic to the structure N = (N, 0, σ) of the natural numbers with zero and the successor function. Hence, φ0,σ axiomatizes the class of models isomorphic to N. Now, let C ⊆ N . Let T (C) = {n = σ. . . σ 0|n ∈ C} be a set of

terms. Let
`˛n¸ x

Γ(C) = {φ0,σ}∪ {P (t)|t ∈ T (C)}∪ {¬P (t)|t /∈ T (C)}.

Since the models of φ0,σ are isomorphic to N, Γ(C) always implicitly defines P for any C ⊆ N . Suppose that C ⊆ N and C' ⊆ N and there are explicit definitions
∀x(P (x) ↔ ψ(x)) and ∀x(P (x) ↔ ψ'(x)) for C and C', respectively. As P does not occur in ψ or ψ', if ψ = ψ', then C = C'. As the symbol set S is finite, there
are only countably many formulas in the language LS	of the Least Fixed-Point
Logic with the symbol set S, that is |LS	| = |N|. It follows that there are at most
countably many different explicit definitions for P . As the cardinality of the power set ℘(N ) of N is strictly greater than the cardinality of N , there is at least one Γ(C)—actually, there are uncountably many—which implicitly defines P , but for which there is no explicit definition.	 
Theorem 3.1 uses the fact that many C ⊆ N are infinite. In fact, when C is finite, the following explicit definition is an explicit definition for P in Γ(C):
∀x(P (x) ↔   (x = n)).
n∈C

One could ask whether there is a finite set of LFP-sentences which implicitly defines a symbol P of the language for which there is no explicit definition. In [6], Gurevich and Shelah showed a class M of finite structures called odd multipedes in which no linear order, total on the domain of an odd multipede, can be expli-
citly defined by a formula in Lω  , the extension of first-order logic by allowing
countable conjunctions and disjunctions and a finite number of distinct variables in the formulas [4,7]. They also showed that M is the class of the finite models of a single first-order sentence μ [6]. Since for each LFP formula there is an Lω formula with the same finite models [4,7], no linear order can be explicitly defined in M by an LFP formula. An important feature of the multipedes is that there
is a proper subset of its domain, the spine, which is linearly ordered by a binary
relation ≺, and when the spine is finite the multipede is finite too [7]. In [3], Dawar et al. showed that a linear order can be implicitly defined in the class of the odd multipedes by a single first-order sentence. It follows that Beth’s Theorem does not
hold for Lω	restricted to finite models and, hence, it does not hold for LFP with
finite models either. In [7], Hodkinson showed that the finite model restriction can
be avoided for Lω  . Hodkinson showed that the example of Gurevich and Shelah
can also be used without the finite models semantics restriction by forcing such
condition through an Lω	sentence. Hodkinson uses the already mentioned facts
that, i) if the spine of a multipede is finite, then the multipede is finite too, and ii) that the spine is linearly ordered by a relation ≺. We can do the same for LFP. We will show that there is a sentence of LFP which forces the spine of a multipede to be finite.
Lemma 3.2 There is an LFP-sentence which states that the linear order ≺, which represents the spine of a multipede is ﬁnite, is ﬁnite and, hence, the whole multipede is ﬁnite.
Proof. Consider the following formulas of LFP where ≺ is intended to be a strict linear ordering of a subset of the domain of a model:
L(x) = ∀y(x ≺ y ∨ x = y)
G(x) = ∀y(y ≺ x ∨ x = y)
S(x, y) = ∀z(x ≺ z → (y ≺ z ∨ y = z))
TC(X, x) = L(x) ∨ (∃y(X(y) ∧ S(y, x)))
F (x) = ∃y(x ≺ y ∨ y ≺ x)
The formula L(x) says that x is the least element with respect to ≺, G(x) says that x is the greatest element with respect to ≺, S(x, y) says that y is the successor of x and TC(X, x) states that x is either the least element or is the successor of some element in X. The formula F (x) says that x belong to the domain or to the range of the spine of the multipede. And similar to (10), the sentence
λ' = ∀y(F (y) → [lfpX,xTC(X, x)](y))
says that an element a in the range or the domain of ≺ is either the least element of ≺ or there are finitely many elements between a and the least element of ≺. The

sentence
λ = ∃y(G(y)) ∧ λ'
says that ≺ has a greatest element and that there are only finitely many elements between the greatest and the least element of ≺. Let μ be the first-order sentence whose finite models are the finite odd multipedes (see [7,6]). Thus μ ∧ λ forces the spine of the multipede to be finite and, hence, the whole multipede is finite. 
We immediately get:
Theorem 3.3 There is a ﬁnite theory of LFP which implicitly deﬁnes a relation symbol for which there is no explicit deﬁnition.
Explicit Definability of Recursive Definitions
The following two questions arise in the study of recursive definability: i) in which cases has an implicitly defined symbol got a recursive definition? and ii) in which cases has a recursively defined symbol got an explicit definition?
As we saw in the last section, Beth’s Theorem does not hold for LFP. We could wonder whether we have explicit definitions for recursively defined relations. How- ever, we can see that recursive definitions do not impose too much restriction.
Lemma 4.1 Let P be an n-ary predicate symbol. Let Φ be a ﬁnite S ∪ {P}-theory of LFP (or ﬁrst-order logic) which implicitly deﬁnes a relation symbol P. Then Φ is equivalent to the recursive statement

Δ = ∀x P (x) ↔   Φ → P (x) ∧ ¬  Φ → ¬P (x)   .
Proof. Let A be an S ∪ {P}-structure. Let A be a model of Φ. Let a ∈ An. In this case, we have that



and


Hence, A |= Δ iff

 
A |= ¬  Φ → ¬P (x)[a]

A |=  Φ.

A |= P (x) ↔ P (x)[a]

for any a ∈ An, which is obviously true. Thus any model of Φ is a model of Δ. On the other hand, let A be an S ∪ {P }-structure which does not satisfy Φ and let a ∈ An. In this case we have that

A |=  Φ → P (x)[a]

and


Hence, A |= Δ iff

A |= ¬  Φ.

A |= P (x) ↔ ¬P (x)[a]

for any a ∈ An, which is obviously false. Thus any model of Δ is a model of Φ. It follows that Φ and Δ has the same models and, thus, are equivalent.	 
Lemma 4.1 shows that any finite implicit definition for a relation symbol can be put in the form of a recursive statement and, hence, is equivalent to a recursive definition. It follows that the problem of encountering a recursive definition, in the sense of Definition 2.5, is the same as encountering a finite implicit definition. Moreover, the problem of finding an explicit definition for a recursively defined symbol is the same as finding an explicit definition for a symbol which admits a finite implicit definition. It follows from the results shown in the last section that some recursively defined relation symbols do not have an explicit definition.
In face of the negative results regarding the existence of explicit definitions for symbols recursively defined by LFP recursive statemens, we investigate fragments of LFP for which the Beth’s Definability Theorem holds. Here, we are concerned with the problem of establishing when there is an explicit definition for a recursively defined relation symbol. The recursive definitions we will consider are those stated in the theory of structures which we call inductive structures.
Definition 4.2 (Inductive Structure) An S ∪ {<}-structure A where <A is a well-ordering (a strict linear order without an infinite descending chain) of the elements of the domain A of A is an S ∪ {<}-inductive structure or simply an inductive structure.
A well-ordered set is a pair (A, <) (or a <-structure) where A is a set and < is a well-founded strict linear order total on A. Sometimes we use “a ≤ c” as an abbreviation for “a < b or a = b.” The class of well-ordered sets can be axiomatized by a Least Fixed-Point sentence. Actually, the same sentence can be used to show that the class of S ∪ {<}-inductive structures can be axiomatized in LFP, since an S ∪ {<}-structure A is an inductive structure iff its {<}-reduct (A, <A) is a well-ordered set.
Lemma 4.3 The class of S ∪ {<}-inductive structures can be axiomatized by a sentence in LFP.
Proof. Consider the following first-order sentences:
LO = ∀x∀y∀z(x < y ∧ y < z → x < z) ∧
∀x∀y(x < y → ¬y < x) ∧ ∀x∀y(x < y ∨ y < x),
D = ∃x(L(x)) ∧ ∀x(¬G(x) → ∃y(S(x, y))),
UB(P, x) = ∀y(P (y) → y < x),
LUB(P, x) = ∀y(UB(P, y) → x < y ∨ x = y).
The sentence LO says that < is a strict linear order, L(x) is the formula (11), S(x, y) is the formula (13), D says that there is a least element and any element, except the greatest, has a successor—although it does not determine whether there is a greatest element,—UB(P, x) says that x is an upper bound for elements which belong to P and LUB(P, x) says that x is less than or equal to the least upper bound of the

elements in P , with respect to <. Consider the following LFP-sentence:
WO = LO ∧ D ∧ ∀y[lf pP,x LUB(P, x)](y).
The sentence WO says that < is a linear order with a least element and such that any element, except the greatest, has a successor. A linear order with these properties always has an initial segment which is isomorphic to a well-ordered set.
The relation defined by the expression
[lfpP,x LUB(P, x)](y)
comprises exactly the elements of such initial segment of <, and the sentence
∀y[lfpP,x LUB(P, x)](y)
says that any element belongs to that initial segment of < and, hence, < is a well- order. It follows that the domain of any model A of WO is well ordered by <A. Hence, an S ∪ {<}-model of WO is an inductive structure. Also, its clear that any well-ordered set is a model of WO.	 
Recursive definitions, as defined in Definition 2.5, does not have much structure. We will investigate the existence of explicit definitions for a sort of “well-behaved” recursive definitions. Before this, let us introduce the following definitions.
Definition 4.4 (Negation Normal Form for LFP) A formula φ in LFP is said to be in negation normal form, nnf for short, iff the only connectives in φ are ∧, ∨ and ¬, and ¬ occur only in front of atoms and lfp-formulas (see the Section 2 for the definition of lfp-formula).
It is well known that any formula in LFP can be put in negation normal form using De Morgan’s laws and the duality between existential and universal quanti- fiers.
Definition 4.5 (<-Relativized Recursive Statement) Let S∪{<} be a symbol set. Let P be an n + 1-ary relation symbol and ∀x(P (x) ↔ φ(P, x)) be a recursive statement about P such that no variable of the tuple x of variables occurs bound in φ(P, x) and φ(P, x) is in nnf. Let φ<(P, x) be obtained by replacing each occurrence of a literal l(t) ∈ {P (t), ¬P (t)} in φ(P, x) with (t1 < x1 ∧l(t)), where t = t1,..., tn+1 and x = x1,..., xn+1. We call ∀x(P (x) ↔ φ<(P, x)) a <-relativized recursive statement about P .
The following lemma about <-relativized recursive statement will be used in Theorem 4.7.
Lemma 4.6 Let the S∪{<, P}-formula ∀x(P (x) ↔ φ(P, x, y)) be a recursive state- ment about the n + 1-ary relation P such that φ(P, x, y) is in nnf and ∀x(P (x) ↔ φ<(P, x, y)) is the corresponding <-relativized recursive statement. The free vari- ables of ∀x(P (x) ↔ φ<(P, x, y)) are among y = y1,..., ym. Let A be an S ∪ {<}- structure and P A an n + 1-ary relation on A. Let P A be deﬁned for each a ∈ A
as
P A = {a ∈ PA|a = a1,..., an+1 and a1 < a}.

Let P A ⊇ P +A ⊇ P A and a = a, a1,..., an ∈ An+1. Then
a	a
(A,P A) |= φ<(P, x, y)[a, b] iff (A,P +A) |= φ<(P, x, y)[a, b]

for any possible m and b = b1,..., bm ∈ Am.
Proof. We proceed by induction on φ(P, x, y) in nnf. In order to treat the case of the lfp-operator in the Inductive Step, we must handle free relation variables. Let X = X1,..., Xl be a tuple of relation variables containig the relation variables which occur free or bound in φ(P, x, y). We will proof that, for any m and b = b1,..., bm ∈ Am and for any interpretation X = X1,..., Xl to X,
(A,P A, X) |= φ<(P, x, y)[a, b] iff (A,P +A, X) |= φ<(P, x, y)[a, b]
holds for any LFP-formula φ(P, x, y) written with the symbol set S ∪ {<, P} and relations variables in X. The base case is when φ(P, x, y) is a literal l(x, y). If P does not occur in l(x, y), the proof is obvious. Otherwise, φ<(P, x, y) = (t1 < x1 ∧ l(t)), where l(t) is either P (t) or ¬P (t) and t = t1,..., tn+1 is a tuple of terms. We have:

(A,P A, X) |= φ<(P, x, y)[a, b] iff (A,P A, X) |= (t1 < x1 ∧ l(t))[a, b]

iff tA[a, b] <A a and (A,P A, X) |= l(t)[a, b]
iff tA[a, b] <A a and (A,P +A, X) |= l(t)[a, b]
1	a




By Inductive Hypothesis suppose

	
iff (A,P +A, X) |= (t1 < x1 ∧ l(t))[a, b]

iff (A,P +A, X) |= φ<(P, x, y)[a, b].


and
(A,P A, X) |= α<(P, x, y)[a, b] iff (A,P +A, X) |= α<(P, x, y)[a, b]

(A,P A, X) |= β<(P, x, y)[a, b] iff (A,P +A, X) |= β<(P, x, y)[a, b]


		
for any m and b = b1,..., bm ∈ Am and any interpretation X = X1,..., Xl of X. In the Inductive Step, the cases of the connectives ∧ and ∨ and the quantifiers ∀ and
∃ are immediate, since (α∧β)< = (α<∧β<), (α∨β)< = (α<∨β<), ∃x(α)< = ∃x(α<) and ∀x(α)< = ∀x(α<). The difficult case is that of
φ(P, x, y) = [lfpX,y' α(P, X, x, y, y')](t'),
where X is an r-ary relation variable and y' = y' ,..., y' . In this case,
1	r
φ<(P, x, y) = [lfp	' α(P, X, x, y, y')](t')< = [lfp	' α<(P, X, x, y, y')](t').

Let X be the i-th element of X, that is X = X .	Let Ψα<(P,X,x,y,y')
and

i	(a,b)

α< (P,X,x,y,y')
(a,b)

	
be the operators induced by α<(P, X, x, y, y') in (A,P A, X) and


	
(A,P +A, X), respectively.  Let X' ⊆ Ar and let X' be obtained substituting X'
for Xi in X. We have by (6) that
Ψα<(P,X,x,y,y')(X') = {c ∈ Ar|(A,P A, X') |= α<(P, X, x, y, y')[a, b, c]}.
(a,b)

By Inductive Hypotheses, we have

{c ∈ Ar|(A,P A, X') |= α<(P, X, x, y, y')[a, b, c]}
=

{c ∈ Ar|(A,P +A, X') |= α<(P, X, x, y, y')[a, b, c]}.
And again by (6) we have
{c ∈ Ar|(A,P +A, X') |= α<(P, X, x, y, y')[a, b, c]} = Ψ^ α< (P,X,x,y,y')(X').

a
It follows that


α<(P,X,x,y,y')


α<(P,X,x,y,y')
(a,b)


and hence
Ψ(a,b)	= Ψ^ (a,b)


Thus


lfp(Ψα<(P,X,x,y,y')
(a,b)
) = lfp(Ψ^


α<(P,X,x,y,y')).
(a,b)

(A,P A, X) |= φ<(P, x, y)[a, b] iff (A,P +A, X) |= φ<(P, x, y)[a, b].
The case of negated lfp-formulas is analogous.	 
In the following theorem, we show that a <-relativized recursive statement about
P always implicitly defines P in the LFP theory of an inductive structure.
Theorem 4.7 Let the S ∪ {<}-structure A be an inductive structure. Let P be a new n + 1-ary relation symbol not in S ∪ {<}. Let ThLF P (A) be the set of LFP sentences satisﬁed by A. Let Δ = ∀x(P (x) ↔ φ<(P, x)) be some <-relativized recursive statement about P. If ThLF P (A)∪{Δ} is satisﬁable, then ThLF P (A)∪{Δ} is an extension of ThLF P (A) by a recursive deﬁnition for P.
Proof. It is sufficient to show that P is implicitly defined by
ThLF P (A) ∪ Δ.
Let the S ∪ {P, <}-structures B' = (B,P B' ) and B'' = (B,P B'' ) be models of ThLF P (A)∪Δ, where B is an S∪{<}-structure—that is, B' and B'' are S∪{<, P}- structures on the same domain B and which agree on the interpretation of the symbols in S ∪ {<}. We have to show that P B' = P B'' . By Lemma 4.3, B is an inductive structure, as well as its expansions B' and B''. We proceed by transfinite induction on the well-ordering <B. We will show for each b ∈ B that, if
b' = (b', b' ,..., b' ) ∈ P B' iff b' ∈ P B''
for each b' <B b and any b'1,..., b'n ∈ B, then
b = (b, b ,..., b ) ∈ P B' iff b ∈ P B''
for any b1,..., bn ∈ B. It follows by transfinite induction that, for all b ∈ B and
'	''
all b = (b, b1,..., bn) ∈ Bn+1, b ∈ P B iff b ∈ P B . For each b ∈ B, we define

P B' = {b ∈ P B' |b = b ,..., b
and b
<B b}

b
and
1	n+1	1

P B'' = {b ∈ P B'' |b = b ,..., b	and b
<B b}.

We will show that, if P B' = P B'' , then b ∈ P B' iff b ∈ P B'' for each b =
b, b1,..., bn ∈ Bn+1. Let b = b, b1,..., bn ∈ Bn+1:
b ∈ P B' iff B' |= P (x)[b]
iff B' |= φ<(P, x)	(as B' |= Δ)
iff (B,P B' ) |= φ<(P, x)
iff (B,P B' ) |= φ<(P, x) (by Lemma 4.6)
iff (B,P B'' ) |= φ<(P, x) (by the Inductive Hypothesis P B' = P B'' )
b	b	b
iff (B,P B'' ) |= φ<(P, x) (again by Lemma 4.6) iff B'' |= φ<(P, x)
iff B'' |= P (x)[b]	(as B'' |= Δ) iff b ∈ P B'' .
By transfinite induction, we have that P B = P A, hence P is implicitly defined, which means that ThLF P (A) ∪ Δ is an extension of ThLF P (A) by a recursive defi- nition for P .	 
A straightforward corollary of Theorem 4.7 is the following:
Corollary 4.8 Let A be an S ∪ {P, <}-inductive structure. Let Δ be some <-rela- tivized recursive deﬁnition about P. If ThLF P (A) |= Δ, then ThLF P (A) implicitly deﬁnes P.
We will show now that for any <-relativized recursive definitions for a relation symbol P on the theory ThLF P (A) of a inductive structure A there is an explicit definition for P in LFP.
We will introduce some useful definitions below.
Definition 4.9 (Stages Sequence) Given an operator Ψ : ℘(A) → ℘(A) the sequence
Ψ0 = ∅,
Ψβ+1 = Ψ(Ψβ),

​
Ψλ =   Ψμ for limit λ,
μ<λ

defined over the ordinals α < |℘(A)|, is called the stages sequence of the induction on Ψ and Ψα the α-th stage of the induction on Ψ.
Definition 4.10 (Height of an Element) Given an inductive structure A and an element a ∈ A which is the α-th element of the ordering <A (starting from the 0-th), we define the height h(a) of a to be h(a) = α.
Now, we will work in order to construct an explicit definition for a symbol recursively defined trhough a <-relativized recursive statement. First, we will show

an LFP formula which defines an inductive operator on the domain of any structure. Hereafter, we suppose there are two constant symbols 0 and 1 which denote different elements.
Definition 4.11 An operator Ψ : ℘(A) → ℘(A) is said to be inductive iff its stages sequence is non-decreasing, that is, Ψα ⊆ Ψβ for α ≤ β.
Let ∀x(P (x) ↔ φ(P, x)) be a recursive statement about P and ∀x(P (x) ↔ φ<(P, x)) the corresponding <-relativized recursive statement. Let φ∗(R, x) be obtained from φ<(P, x) by replacing each atomic formula P (t1,..., tn+1) with
∃y(R(y, 1, t1,..., tn+1)), where R is a new n + 3-ary relation variable. Let (A,P A)
be an S∪{P}-structure, RA a n+3-ary relation on A and RA ↓a	be the projection
of the n + 1 rightmost positions of each tuple in RA which has the element a in the
second position (from left to right), that is,

A  a
n+1
= {a ∈ An+1|exists a' ∈ A such that (a', a, a) ∈ RA}.

It is easy to see that:
Lemma 4.12 If RA ↓1

= P A, then, for each a ∈ An, (A,P A) |= φ<(P, x)[a] iff

(A, RA) |= φ∗(R, x)[a].
Let ∀x(P (x) ↔ φ(P, x)) be a recursive statement about P . Consider the formula
φ•(R, x', x'', x) = SUP (R1, x') ∧ ((x'' = 1 ∧ x1 ≤ x' ∧ φ∗) ∨ (x'' = 0 ∧ x = 0)), where


and
SUP (R1, x') = ∀y(UB(R1, y) → x' < y ∨ x' = y)

UB(R1, y) = ∀z(R(z, 0,..., 0) → z < y).



We will prove below that the operator Ψφ• (R,x',x'',x) definied by φ•(R, x', x'', x) on the domain of an inductive structure is inductive. The formulas SUP (R1, x') and UB(R1, y) are similar to those in (19) and (18). The formula UB(R1, y) define the set of elements which are strictly greater than any element a such that (a, 0,..., 0) belongs to the interpretation of R (the expression R1 is just a reference to the projection of the first position of the tuples in R). And SUP (R1, x') defines the set of elements less than or equal to the least element strictly greater than the elements which occurs in the first position of some tuple (a, 0,..., 0) in the interpretation of R, with respect to <, if any. The idea behind the formula φ•(R, x', x'', x) is that each step of the induction on Ψφ• (R,x',x'',x) correspond to a step through the well- ordering <. This will guarantee that any tuple which enters a stage of the induction enters each further stage and, hence, the operator Ψφ• (R,x',x'',x) is inductive. Beside this, in the tuples of the form (a', 1, a), a is an element of the relation recursively defined by ∀x(P (x) ↔ φ<(P, x)), as show in the following lemma. Let us write φ• instead of φ•(R, x', x'', x) for short.
Lemma 4.13 Let the inductive structure (A,P A) be a model of ∀x(P (x) ↔ φ<(P, x)). Let Ψφ• be the operator deﬁned by φ•(R, x', x'', x) on the domain A of A (note that P does not occur in φ•). Let Ψφ• be the α-th stage of the induction

on φ• and let Ψφ• ↓1
be the projection of the n + 1 rightmost positions of each

α	n+1
tuple in Ψφ• where the second element is 1. Then:
{(a, 0, a) ∈ Ψφ• } = {(a', 0, 0,..., 0) ∈ An+3|h(a') < α},

Ψφ• ↓1
= {(a', a') ∈ An+1|(a', a') ∈ P A and h(a') < α}.

α	n+1
Proof. Let us first prove i) by transfinite induction on α. If α = 0, then
{(a, 0, a) ∈ Ψφ• } = ∅ = {(a', 0, 0,..., 0) ∈ An+3|h(a') < α}.
Suppose the lemma holds for an ordinal α'. By Inductive Hypothesis, we have
{(a, 0, a) ∈ Ψφ• } = {(a', 0, 0,..., 0) ∈ An+3|h(a') < α'}.
Let α = α' + 1. By Definition 4.9, we have Ψφ• = Ψφ• (Ψφ• ). Let (a, 0, a) ∈ Ψφ• .
α	α'	α
By (6), we have that (A, Ψφ• ) |= φ•[a, 0, a].  Hence (A, Ψφ• ) |= SUP (R1, x')[a]
α'	α'
and (A, Ψφ• ) |= (x'' = 0 ∧ x = 0))[0, a].  But this means that a = 0 and a is
less than or equal to the least element strictly greater than any other element in
{a' ∈ A|(a', 0, 0) ∈ Ψφ• }, and hence h(a) is less than or equal to the least ordinal
greater than the height of any element in {a' ∈ A|(a', 0, 0) ∈ Ψφ• }, which implies,
by Inductive Hypothesis, that h(a) ≤ α'. Then, we have h(a) ≤ α' < α' +1 = α. It follows that
{(a, 0, a) ∈ Ψφ• }⊆ {(a', 0, 0,..., 0) ∈ An+3|h(a') < α}.
On the other hand, let a ∈ A be such that h(a) < α' + 1. In this case h(a) < α' or
h(a) = α'. Hence, by Inductive Hypothesis, (A, Ψφ• ) |= SUP (R1, x')[a]. It follows that (A, Ψφ• ) |= φ•[a, 0, 0,..., 0]. Thus (a, 0, 0,..., 0) ∈ Ψφ• . Hence
α'	α
{(a', 0, 0,..., 0) ∈ An+3|h(a') < α}⊆ {(a, 0, a) ∈ Ψφ• }.
If α is a limit ordinal the proof is straigthforward.
Now, let us prove ii) also by transfinite induction on α. If α = 0, then the proof is similar to the proof of i) for this case. Suppose the lemma holds for an ordinal α' and let α = α' + 1. By Inductive Hypothesis,

Ψφ• ↓1
= {(a', a') ∈ An+1|(a', a') ∈ P A and h(a') < α'}.

α'	n+1
Let a ∈ A. It follows from i) that (A, Ψφ• ) |= SUP (R1, x')[a] iff h(a) < α' or h(a) = 
α' iff h(a) < α. Hence (a, 1, a) ∈ Ψφ• iff, by Definition 4.9 and (6), (A, Ψφ• ) |=

φ•[a, 1, a] iff h(a) < α, a
≤ a and (A, Ψφ• ) |= φ∗[a], where a = a ,..., a
. By

1	α'
1	n+1

Lemma 4.12, (A, Ψφ• ) |= φ∗[a] iff (A, Ψφ• ↓1
) |= φ<[a]. Note that if h(a) < α 

α'	α'
n+1

and a1 ≤ a, then h(a1) ≤ α'.  Moreover, if h(a1) ≤ α' and (b, b) ∈ P A , then
h(b) < h(a1) ≤ α' and (b, b) ∈ P A. Hence, if h(a1) ≤ α', then

P A ⊆ {(a', a') ∈ An+1|(a', a') ∈ P A and h(a') < α'},
and by the Inductive Hypothesis
P A ⊆ Ψφ• ↓1	.
a1	α'	n+1
We have that h(a ) ≤ α' and (A, Ψφ• ↓1	) |= φ<[a] iff, by Lemma 4.6, h(a ) ≤ α'
1	α'	n+1	1
and (A,P A) |= φ<[a] iff h(a1) ≤ α' and (A,P A) |= P (x)[a] iff h(a1) ≤ α' and

a ∈ P A. It follows that (a, 1, a) ∈ Ψφ• iff h(a) < α, a
≤ a and a ∈ P A. Hence, we

get
α	1
(a, 1, a) ∈ Ψφ•

(23)	iff
h(a) < α, a1 ≤ a and a ∈ {(a', a') ∈ An+1|(a', a') ∈ P A and h(a') < α}.
Now, let (b, b) ∈ Ψφ• ↓1	. Then exists b' ∈ A such that (b', 1, b, b) ∈ Ψφ• . Then,
α	n+1				α
by (23), b' < α, b ≤ b' and (b, b) ∈ {(a', a') ∈ An+1|(a', a') ∈ P A and h(a') < α}.
Then

Ψφ• ↓1
⊆ {(a', a') ∈ An+1|(a', a') ∈ P A and h(a') < α}.

α	n+1
On the other hand, let (b, b) ∈ {(a', a') ∈ An+1|(a', a') ∈ P A and h(a') < α}. Then
h(b) < α and, of course, b ≤ b. Hence, again by (23), (b, 1, b, b) ∈ Ψφ• . It follows
that (b, b) ∈ Ψφ• ↓1	, and hence
α	n+1
{(a', a') ∈ An+1|(a', a') ∈ P A and h(a') < α}⊆ Ψφ• ↓1	.
α	n+1

Thus Ψφ•
1
n+1
= {(a', a') ∈ An+1|(a', a') ∈ P A and h(a') < α}.  If α is a limit

ordinal the proof is immediate.	 
As an immediate consequence of Lemma 4.13 we have:
Corollary 4.14 Ψφ• is inductive.
The stages sequence of an inductive operator Ψ reach a fixed-point Ψ∞ at some stage Ψα. Such fixed-point is called the inductive ﬁxed-point of Ψ. By Lemma 4.13 we have:
Corollary 4.15 Let the S ∪ {<}-structure A' be an inductive structure. Let P be a new relation symbol. Let ThLF P (A') be the set of LFP sentences satisﬁed by A'. Let Δ = ∀x(P (x) ↔ φ<(P, x)) be some <-relativized recursive deﬁnition for P. Let
•
(A,P A) be a model of ThLF P (A')∪Δ. Let Ψφ  be operator deﬁned by φ•(R, x', x'', x)

on A. It follows that P A = (Ψφ• )
1
n+1

The following definition is needed to introduce the Inflationary Fixed-Point Logic.
Definition 4.16 An operator Ψ : ℘(A) → ℘(A) is said to be inflationary iff, for any X ⊂ A, X ⊆ Ψ(X).
Inflationary operators are inductive. Hence, the stages sequence of inflationary operators reaches a fixed-point at some stage.
We introduce now the Inflationary Fixed-point Logic (IFP). In IFP, we have a syntactic construct where one can define expressions intended to be interpreted as the inductive fixed-point of an inflationary operator induced by a formula, in a similar way the lfp construct is used in LFP.
Any formula φ(X, x) gives rise to an inflationary operator, namely, Ψφ(X,x)∨X(x).

The Inflationary Fixed-Point Logic is the extension of first-order logic by adding the following rule to the calculus of formulas:
φ(X, x)
[ifpX,xφ(X, x)](t)
where X is an n-ary relation symbol, φ(X, x) is a formula, x is an n-tuple of variables and t is an n-tuple of terms of the language. The satisfiability relation |= between structures and lfp-formulas is defined as

A |= [ifpX,xφ(X, x)](t) iff tA ∈ (Ψ(φ(X,x)∨X(x)))∞.

If a formula φ(X, x) defines an inductive operator Ψφ(X,x), then the stages se- quence of Ψφ(X,x) is equal to the stages sequence of Ψ(φ(X,x)∨X(x)) and, hence, (Ψφ(X,x))∞ = (Ψ(φ(X,x)∨X(x)))∞. Beside this, monotone operators are inductive. Moreover, the least and inductive fixed-points of a monotome operator are the same [11]. It follows that, as is well known, Least Fixed-Point Logic is included in Inflationary Fixed-Point Logic. It suffices to substitute the ifp operator for the lfp in a formula of Least Fixed-Point Logic to obtain an equivalent in Inflationary Fixed-Point Logic. We obtain the following lemma:
Lemma 4.17 Let the S ∪ {<}-structure A be an inductive structure. Let P be a new relation symbol. Let ThLF P (A) be the set of LFP sentences satisﬁed by A. Let Δ = ∀x(P (x) ↔ φ<(P, x)) be some <-relativized recursive deﬁnition for P. There is an explicit deﬁnition for P in IFP.
Proof. By Corollary 4.15 the sentence
'	''
∀x(P (x) ↔ ∃z([if pR,y',y'',y φ (R, y ,y , y)](z, 1, x))).
is an explicit definition for P in IFP.	 
In [8], Kreutzer establishes the expressive equivalence between Least Fixed-Point Logic and Inflationary Fixed-Point Logic. That is, Kreutzer shows that for every IFP formula φ there is an LFP formula φ' with the same models. From Lemma 4.17 we immediately get:
Theorem 4.18 (Definability for <-Relative Recursive Statements) Let A be an S ∪ {<, P}-inductive structure. Let T hLF P (A) be the set of LFP sentences satisﬁed by A. Let Δ = ∀x(P (x) ↔ φ<(P, x)) be some <-relativized recursive statement for P such that ThLF P (A) implicitly deﬁnes P and ThLF P (A) |= Δ. Then there is an explicit deﬁnition for P in LFP.
Conclusions
In this work, we investigated definability results within Least Fixed-Point Logic. It is known that Beth’s Definability Theorem does not hold for LFP restricted to finite models. We also showed that Beth’s Definability Theorem does not hold for LFP without the finite models restriction. Our proof uses infinite theories of LFP. We also showed that there is a finite theory of LFP which implicitly defines a symbol for which there is no explicit definition in LFP, in a way similar to Hodkinson for Lω

as presented in [7]. We examined a fragment of LFP in which Beth’s Definability Theorems holds. We analyzed <-relativized recursive statements on theories of inductive structures. We showed that the extension of a theory by introducing <- relativized recursive statements for some new relation always implicitly defines that relation. We also showed that if there is a <-relativized recursive definition for a relation symbol P in the theory of an inductive structure, then there is an explicit definition for such relation symbol in that theory.

References
Beth, E. W., On Padoa’s method in the theory of definitions., Indagationes Mathematicae 15 (1953),
pp. 330–339.
Dawar, A. and Y. Gurevich, Fixed-point logics, Bulletin of Symbolic Logic 8 (2002), pp. 65–88.
Dawar, A., L. Hella and P. G. Kolaitis, Implicit definability and infinitary logic in finite model theory, in: ICALP ’95: Proceedings of the 22nd International Colloquium on Automata, Languages and Programming (1995), pp. 624–635.
Ebbinghaus, H.-D. and J. Flum, “Finite Model Theory,” Springer-Verlag, 1995.
Ebbinghaus, H.-D., J. Flum and W. Thomas, “Mathematical Logic,” Springer-Verlag, New York, NY, 1984.
Gurevich, Y. and S. Shelah, On finite rigid structures, Journal of Symbolic Logic 61 (1996), pp. 549–562.
Hodkinson, I. M., Finite variable logics, Bulletin of the EATCS 51 (1993), pp. 111–140.
Kreutzer, S., Expressive equivalence of least and inflationary fixed point logic, in: Proceedings of 17th IEEE Symp. on Logic in Computer Science LICS02, 2002, pp. 403–410.
Libkin, L., “Elements of Finite Model Theory,” Springer, 2004.
Padoa, A., Essai d’une th´eorie alg´ebrique des nombres entiers, preced´e d’une introduction logique a une th´eorie deductive quelconque, in: Biblioth`eque Du Congr`es International de Philosophie, 1900, pp. 118–123.
Tarski, A., A lattice-theoretical fixpoint theorem and its applications, Pacific Journal of Mathematics 5
(1955), pp. 285–309.
