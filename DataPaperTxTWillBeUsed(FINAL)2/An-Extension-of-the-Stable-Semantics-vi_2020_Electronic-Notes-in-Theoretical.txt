Available online at www.sciencedirect.com


Electronic Notes in Theoretical Computer Science 354 (2020) 141–155
www.elsevier.com/locate/entcs

An Extension of the Stable Semantics via Lukasiewicz Logic
Mauricio Osorio1
Universidad de las Am´ericas - Puebla Sta. Catarina M´artir, Cholula, Puebla, M´exico
Jos´e Luis Carballido Carranza2
Benem´erita Universidad Aut´onoma de Puebla Puebla, Puebla, M´exico

Abstract
Logic Programming and fuzzy logic are active areas of research, and their scopes in terms of applications are growing fast. Fuzzy logic is a branch of many-valued logic based on the paradigm of inference under vagueness. In this work we recall some of the interplay between three 3-valued logics that are relevant in these areas: The Lukasiewicz logic, the intermediate logic G3 and the paraconsistent logic G′ , and we present a contribution to the area of answer sets that consists in extending a definition of stable model based on proof theory in logic G3, to a more general definition that can be based on any of the more expressive logics G′ or Lukasiewicz. Finally we present and explore a new 4-valued logic that bears relation to G3 and to Lukasiewicz 4-valued logic.
Keywords: Knowledge representation, stable semantics, paraconsistency.


Introduction
The stable semantics allows us to handle problems with default knowledge and pro- duce non-monotonic reasoning using the concept of negation as failure. The p-stable semantics is an alternative semantics, except that in some cases offers models where the stable semantics has none. There are two popular software implementations to compute the stable models: dlv 3 and smodels 4 . The efficiency of such programs has increased the list of practical applications in the areas of planning, logical agents

1 Email: osoriomauri@gmail.com
2 Email: czepedac@gmail.com
3 http://www.dbai.tuwien.ac.at/proj/dlv/
4 http://www.tcs.hut.fi/Software/smodels/

https://doi.org/10.1016/j.entcs.2020.10.011
1571-0661/© 2020 The Author(s). Published by Elsevier B.V.
This is an open access article under the CC BY-NC-ND license (http://creativecommons.org/licenses/by-nc-nd/4.0/).

and artificial intelligence. On the other hand, there exist different approaches for knowledge representation based on the p-stable semantics, such as, updates [16], preferences [17], and argumentation [1]. Currently, in [18], a schema for the imple- mentation of the p-stable semantic using two well known open source tools: Lparse and Minisat is described. The authors also present a prototype 5 written in Java of a tool based on that schema.
The term fuzzy logic emerged in the development of the theory of fuzzy sets by Lotfi A. Zadeh (1965) [4]. It is generally agreed that an important point in the evolution of the modern concept of uncertainty was the publication of the seminal paper by Lotfi A. Zadeh in 1965 [23], where he introduced a theory whose objects, called fuzzy-sets, have boundaries that are not precise. The membership in a fuzzy- set is not a matter of affirmation or denial, but rather a matter of a degree. Although the concept of uncertainty had been studied by philosophers, the significance of Zadeh’s paper was that it challenged not only probability theory as the sole agent for uncertainty, but the very foundations upon which probability theory is based: Aristotelian two-valued logic. When A is a fuzzy-set and x is a relevant object, the proposition “x isa member of A” is not necessarily either true or false, as required by two-valued logic, but it may be true to some degree, the degree at which x is actually a member of A [5].
We can distinguish two main directions in fuzzy logic [4]. The first one corre- sponds to fuzzy logic in the broad sense, it serves mainly as apparatus for fuzzy control, analysis of vagueness in natural language and several other application do- mains. The second one corresponds to fuzzy logic in the narrow sense which is symbolic logic with a comparative notion of truth developed fully in the spirit of classical logic. So, this fuzzy logic has syntax, semantics, axiomatization, truth- preserving deduction, completeness, etc. It is a branch of many-valued logic based on the paradigm of inference under vagueness. This last direction in fuzzy logic is a relatively recent discipline, both serving as a foundation for the fuzzy logic in a broad sense and of independent logical interest, since it turns out that strictly log- ical investigation of this kind of logical calculi can go rather far (interested readers can see [3,10]). Currently it is possible to find strong formal systems of fuzzy logic, such as, L- ukasiewicz, G¨odel and product logic [4].
In particular, L- ukasiewicz and Post gave the first published systematic descrip-
tions of many-valued logical systems in the modern era [22]. L- ukasiewicz argued
that if statements about future events are already true or false, then the future is as much determined as the past and differs from the past only in so far as it has not yet come to pass. In order to avoid the situations in which further development is impossible, he proposed to reject the law of excluded middle, that is, the assump- tion that every proposition is true or false. Moreover, he proposed a logic system where a third truth-value is added, which is read as possible. The L- ukasiewicz logic
[22] is a non-classical, many-valued logic. It was originally defined as a three-valued logic, denoted by L- 3, and as we mentioned, it belongs to the classes of fuzzy logics. Afterwards, L- ukasiewicz generalized his three-valued logic to n values and also to

5 http://cxjepa.googlepages.com/home

an infinite-valued system [22]. In this paper, we consider the L- 3 logic in order to show a non-standard application of fuzzy logic. We show how L- ukasiewicz logic can be used for knowledge representation based on logic programming. Our results are based on the fact that the stable semantics and the p-stable semantics can be

expressed in terms of similar expressions involving the G3 logic and the Gj
logic

respectively, and the fact that the L- ukasiewicz logic can express these two logics.
Our paper is structured as follows. In section 2, we summarize some definitions, logics and semantics necessary to understand this work. In section 3, we show how to express the stable and the p-stable semantics of normal programs in terms
of L- ukasiewicz logic.  We present a definition of stable model for more general
programs in terms of the intermediate logic G3, and then we extend such definition, in a conservative way, in terms of the paraconsistent logic Gj . Then in section 4, we present L- ukasiewicz 4-valued logic along with the new 4-valued logic M 4 that bears relation to all of the logics previously presented. Finally, in section 5 we present some conclusions.

Background
In this section we summarize some basic concepts and definitions necessary to un- derstand this paper.

Logic programs
A signature L is a finite set of elements that we call atoms, or propositional symbols.
The language of a propositional logic has an alphabet consisting of

propositional symbols: p0, p1, ... ; connectives: Λ, V, →, ч; and auxiliary symbols: (, ),
where Λ, V, → are 2-place connectives and ч is a 1-place connective. Formulas are built up as usual in logic. A literal is either an atom a, called positive literal ; or the negation of an atom чa, called negative literal.
A normal clause is a clause of the form
a → b1 Λ ... Λ bn Λ чbn+1 Λ ... Λ чbn+m
where a and each of the bi are atoms for 1 ≤ i ≤ n + m. We define a normal program
P , as a finite set of normal clauses.
The body ofa normal clause could be empty, in which case the clause is known as a fact and can be denoted just by: a →.
We write LP , to denote the set of atoms that appear in the clauses of P . Given a set of atoms M and a signature L, we define чM˜ = {чa | a ∈L \ M}.


Table 1
Truth tables of connectives in L- 3.

Since we shall restrict our discussion to propositional programs, we take for granted that programs with predicate symbols are only an abbreviation of the ground program.

Logics
We review some logics that are relevant in this paper to characterize different se- mantics of normal and more general programs.
We present definitions in terms of true values as well as Hilbert style definitions for most of these logics. The logics considered here have the modus ponens as a unique inference rule.
L- ukasiewicz’s 3-valued logic
The polish logician and philosopher Jan L- ukasiewicz began to create systems of multivalued logics in 1920. He developed, in particular, a system with a third value to denote “possible” that could be used to express the modalities “it is necessary
that” and “it is possible that”. To construct this logic, denoted by L- 3, we first have
to modify the syntax of our formulas to allow, as primitive connectives, only: the 0-place connective ⊥ (failure) and the 2-place connective → (implication). These connectives operate over a domain D = {0, 1, 2}, with 2 as the unique designated value, and are defined as follows:
⊥ = 0,
x → y = min(2, 2 − x + y).
Other connectives in L- 3 are introduced in terms of ⊥ and → as follows:
чA := A →⊥	T := ч⊥
A V B := (A → B) → B	A Λ B := ч(чA V чB)
 A := ч(A → чA)	♦A := чA → A
The truth tables of most connectives are shown in Table 1, the conjunction and disjunction connectives (not shown) coincide with the min and max functions re- spectively. A syntactic characterization of the modal content of L- 3 is studied in [9], where the behavior of modal operators is checked against some of the relevant modal principles. Let us observe that, in logic L- 3, the formula (a Λ чa) → b is not a tautology, which implies a paraconsistent behavior.


Table 2
Truth tables of connectives in G′ .

Now we present an axiomatization of L- 3 [22]:
(p → q) → ((q → r) → (p → r))
(чp → чq) → (q → p)
((p → чp) → p) → p,
using the rules of substitution and modus ponens.
L- ukasiewicz generalized his three-valued logic to n values and also to an infinite- valued system [22]. The matrix for the infinite-valued system is defined on the rational numbers in the unit interval from 0 to 1. For x, y in the interval, we have: x → y = min(1, 1 − x + y), чx = 1 − x. If instead of the whole rational interval, a finite subset closed under the above functions is chosen, the result is a set of n−valued L- ukasiewicz connectives. For more general results in L- ukasiewicz logics, including the case where a different set of designated values is adopted in L- m, the reader is referred to [21].


Gj
logic

It is defined as a three-valued logic with truth values in the domain D = {0, 1, 2} where 2 is the designated value. The evaluation functions of the logic connectives are then defined as follows: x Λ y = min(x, y); x V y = max(x, y); and the ч and → connectives are defined according to the truth tables given in Table 2. An

axiomatization of Gj
is given in [12].


G3 logic
G¨odel defined, in fact, a family of many-valued logics Gi with truth values over the domain D = {0, 1,...,i − 1} and with i − 1 as the unique designated value. Logic connectives are defined as:
⊥ = 0, x Λ y = min(x, y), x V y = max(x, y), and
x → y = i − 1 if x ≤ y and y otherwise.

The only difference between the true tables of G3 and Gj
is the negation of the

value 1 that is 0 in G3.
A Hilbert style version of this logic G3 is obtained from intuitionistic logic [8] by adding the following axiom:(чb → a) → (((a → b) → a) → a). Therefore the set of theorems in this logic is the set of tautologies of Go¨del’s 3-valued logic G3.

From now on we will denote by ч the negation of Gj
and by ∼ the negation of

G3.
Classical logic
Classical logic, C, is obtained from intuitionistic logic [8] by adding the following axiom: (чa → a) → a. This axiom enables any sort of proofs by contradiction, and thus gives to the negation connective its full deduction power. Classical logic, of course, coincides with the well known standard ”truth table” logic of two values [7].
Semantics
From now on, we assume that the reader is familiar with the notion of classical minimal model [7].
We present the characterization of the stable semantics for normal programs in terms of the G3 logic. A similar characterization exists for p-stable semantics in terms of logic Gj .
We use the notation HX P to indicate that formula P is a theorem or a tautology in logic X depending on logic X. For a finite family of formulas Q = q1, q2, ..., qn and a set of atoms M , the expression Q HX M will mean that M is a classical model of Q and that HX q1 → (q2 → (...(qn → m)...) for each m in M
Stable semantics
From now on, we assume that the reader is familiar with the notion of classical minimal model [7].
The characterization of the stable semantics for normal programs in terms of logic G3 is given in the following definition.
Definition 2.1 [20] Given a normal program P , a set of atoms M ⊆ LP is a stable model of P if P∪∼ M˜ HG3 M .
Let us observe that, in particular, M is also a classical model of P as we men- tioned.
Example 2.2 Let P be the following normal program:
{a →∼ b, b →∼ a}
and let M1 = {a} and M2 = {b}, according to the definition of stable semantics, since P ∪ {∼ b} HG3 {a} and P ∪ {∼ a} HG3 {b}, then M1 and M2 are stable models of P as the reader can easily check.


Deﬁning G3 and Gj
via L- 3

One of our motivations to study L- ukasiewicz’s L- 3 logic is the fact that it is able to express the semantics of other logics such as G¨odel’s G3 and Gj .
This subsection presents some results from [14]. We first define, in Table 3, the

implication and negation connectives for G3 and Gj
via L- 3 (connectives that are not

subscripted correspond to L- 3). Table 4 shows the truth tables of these connectives

∼G3 x	:=  чx
x →G3 y	:= (x → y)Λ ∼G3 ∼G3 (∼G3 ∼G3 x → y)
ч ′ x	:= ч x
3
x →G′ y	:= x →G3 y
Table 3
Connectives of G3 and G′ in L- 3 .

Table 4
Truth tables: connectives in G3 and G′ .


for the G3 and Gj
logics. The reader can easily verify that the definitions here given

reproduce the values shown in the tables. Conjunction and disjunction are defined, just as in all other logics considered, as the min and max functions respectively.

Hence, these two connectives have the same semantics in L- 3, G3, and Gj
logics.


The X − or operator
An interesting property we try to express in terms of our logics, is a characterization of the X −or operator endowed with an encoding-decoding property. In its original form, this operator works as an exclusive disjunction in two variables: 0 (false) and 1 (true). When implementing this particular generalization to three true values we obtain the arrangement given in table 5.
Let us denote the new X − or operator by the symbol ⊙. We can characterize this operator by the following three properties in order to obtain the values we need. Observe that the last equation reflects the encoding-decoding property and also that the commutativity of the operator follows from the equations shown below.

x ⊙ 0= x x ⊙ x =0 
(x ⊙ y) ⊙ y = x
According to these properties we have from (1 ⊙ 1) ⊙ 1=1 and (2 ⊙ 2) ⊙ 2= 2, that 0 ⊙ x = x, furthermore from (1 ⊙ 2) ⊙ 2 = 1 it follows that 1 ⊙ 2 = 1. A similar argument shows that 2 ⊙ 1= 2.
Therefore we get the Table 5 for the X − or operator in three truth values.
What we want next is to express this truth table as a function of two variables,


Table 5
The X — or operator.

however this is not possible in logic G3, since as it is well known, any function f of two variables defined in this logic has the property that f (2, 2) = 2 whenever f (1, 2) = 1 [15], and according to the table f (2, 2) must be 0.
Let us remember that the symbol ч is the Gj -negation, the symbol ∼ is the

G3-negation, and that ∼ x = x → (чx Λ ччx), then in Gj
the X − or operator is

expressed by the following formula:
(x V y) Λ (чx V чy) Λ (xV∼ x) Λ ((ччxV∼ x) V (ччyV∼ y))
Expressing p-stable and stable semantics based on L- 3
Here, we show how to express stable semantics via L- 3 logic. This is possible due
to two facts: L- 3 logic is able to express the semantics of G3 logic, and the stable
semantics is defined in terms of this logic.
We first define a function that obtains the clause that results when we substitute the G3 connectives by the L- 3 connectives from a given clause.
Given a clause r expressed in terms of the G3 connectives, we define TradG3toL- 3 (r) as the clause that results when we substitute the G3 connectives for the L- 3 connectives according to Table 3. Given a normal program P , we define TradG3toL- 3 (P ) as the set {TradG3toL- 3 (r) | r ∈ P}.
Example 3.1 Let us consider the program P1 = P ∪ {∼ b} where P is the program of Example 2.2, namely the program

a →∼ b.
b →∼ a.
~ b.
We can see that L1 = TradG3toL- 3 (P1) is the following program:
( чb → a) Λ  ч ч( ч ч чb → a).
( чa → b) Λ  ч ч( ч ч чa → b).
 чb.
Now we present the definition of the stable semantics based on the definition of G3 via L- 3. Similar results are obtained for the p-stable semantics and logic Gj .

Theorem 3.2 [14] Given a normal program P,a set of atoms M ⊆ LP is a stable model of P if TradG3toL- 3 (P∪∼ M˜) HL- 3 M.
Proof. According to the relations between the L- 3 connectives and the G3 con- nectives, and our interpretation of the symbol HX , we have that the relation P∪∼ M˜ HG3 M is equivalent to TradG3toL- 3 (P∪∼ M˜) HL- 3 M .	2
Example 3.3 Let us consider the program P of Example 2.2. Let M1 = {a} and
M2 = {b}. Then we have that TradG3toL- 3 (P ∪ {∼ b}) HL- 3 {a} and TradG3toL- 3 (P ∪
{∼ a}) HL- 3 {b} where TradG3toL- 3 (P ∪ {∼ b}) corresponds to the program L1 of Example 3.1. Hence, M1 and M2 are stable models of P as we obtained in Example 2.2.
Next we take advantage of the fact that logic G3 can be expressed in terms

of paraconsistent logic Gj
to provide a definition, by way of paraconsistency, that

extends the concept of stable model to general programs. In order to do this, we state a general definition of stable model in terms of G3 logic, which in turn generalizes the definition we have for normal programs. It is important to observe that in the following formula we can use intuitionistic logic instead of G3 logic.
Definition 3.4 [13] Given a general logic program P , a set of atoms M ⊆ LP is a stable model of P if and only if P∪∼ M˜∪ ∼∼ M HG3 M .
As expected, this definition is a generalization of definition 2.1 for normal programs; it uses the fact that the double negation of the atoms in the set M are added as premises in the equation.
As it is well known, it is desirable that replacing equivalent formulas as parts of programs would leave the same stable models as in the original program. This property does not hold if we start with two programs that have the same stable models. For example, take the two programs P1 = {a →∼ b} and P2 = {a} with the same stable models, and now consider the two programs Q1 = {a →∼ b, b} and Q2 = {a, b} originated from the previous two programs after adding the same atom to both of them, these two programs are no longer equivalent according to the next definition.
Definition 3.5 Two programs P1 and P2 are equivalent if they have the same stable models.
In [6] the authors present the following convenient definition which is stronger than the previous one.
Definition 3.6 Two programs P1 and P2 are strongly equivalent if for every pro- gram P , P1 ∪ P and P2 ∪ P have the same stable models.
In order to present the generalization of the stable semantics in terms of paracon- sistency, we remind the reader that the symbol ∼ that appears in the next definition is the negation of G3 and the program P is expressed in terms of logic Gj .

Definition 3.7 Let P be a program defined in the language of Gj and M ⊆ LP
be a set of atoms. We say that M is an L-stable model of P if TradG′ toL- 3 (P∪ ∼ 
M˜∪ ∼∼ M ) HL- 3 M
We observe that this definition is a conservative extension of Definition 3.4 since
the language of logic G3 is fully expressed in terms of the paraconsistent logic Gj as
previously noted. Also observe that the Gj -negation appears only in the program
P .
As a consequence of this definition we have the following result for L-stable
models of programs expressed in the Gj -language.
Theorem 3.8 Let P and Q programs expressed in the language of logic Gj . If

P ≡ ′
3
Q, then they are strongly equivalent in the context of L-stable models.

Proof. The result follows from Definition 3.7 since TradG′ toL- 3 (P∪∼ M˜∪ ∼∼ M ) and TradG′ toL- 3 (Q∪∼ M˜∪ ∼∼ M ) are equivalent in L- 3.	2
As a natural consequence that follows from our definitions we have:
Theorem 3.9 Let P be a program expressed in the original language of the stable semantics, then Deﬁnitions 3.4 and 3.7 provide the same sets as stable and L-stable models respectively.
Proof. We only need to observe that a program in the original language of the answer set semantics can be interpreted as written in terms of the G3 language, then the conclusion follows from the relation that exists between G3 and L- 3.  2
Finally, as an example let us compute the L-stable models of the program given by the formula x ⊙ y. This program is expressed below in terms of its clauses
x V y чx V чy xV∼ x
(ччxV∼ x) V (ччyV∼ y)
The language of the program is {x, y}. According to Definition 3.7, a set of
atoms M is a L-stable model of P if TradG′ toL- 3 (P∪ ∼ M˜∪ ∼∼ M ) HL- 3 M . We
j	3
work with logic G3 whose language is more natural. Note also that the expression
Q HX M as defined in the background, is equivalent to (q1 Λ q2 Λ ...qn) → m for
each m in M when X is Gj or L- 3.
Let us propose M = {x}, then ∼ M˜ =∼ y and ∼∼ M =∼∼ x
The left hand side of this implication is a conjunction of the four rules that express x ⊙ y plus the two rules or facts: ∼ y and ∼∼ x
Let us assume that for certain valuation x takes the value 1, then the third rule
of the antecedent takes the value 1 and therefore the antecedent cannot take the value 2. Now if we assume that the atom x takes the value 0, then the last rule of

the antecedent takes the value 0 and so does the antecedent. We conclude that the

implication is a tautology in Gj
and the set M = {x} is a L-stable model.

Now, if we try M = {y}, then the last two rules of the implication we are working with, become: ∼ x and ∼∼ y.
Let us assume that for certain valuation y takes the value 1, then the first and fifth rules of the antecedent cannot be 2 at the same time. In the case the atom y takes the value 0 the last rule of the antecedent is 0 too. Therefore the implication is a tautology and the set {y} is a L-stable model too.
In a similar way we can see that the valuation x = 2,y = 1 shows that the set
M = {x, y} is not a L-stable model.
The Logic M4
Strong negation is a feature that can give more expressiveness to a logic, in particular the five-valued logic N 5 has been studied in order to extend the theory of ”Answer Set Programming” with the use of this type of negation [19,11]. In this section we explore possible ways of extending some of the concepts we have been working with in terms of a 4-valued logic, so that we can get more expressiveness and new directions in the theory involved.
Let us remember that L- ukasiewicz defined a family of logics for each integer n ≥ 2 in terms of many-valued semantics. In particular the member of this family that uses 4 values is defined as follows.
L- ukasiewicz 4-valued logic and logic M 4
L- ukasiewicz logic defined with 4 truth values, L- 4, has six connectives. The negation connective is defined by the formula чx =3 − x, the strong conjunction connective x&y = max(0,x + y − 3), the weak conjunction connective x Λ y = min(x, y). The implication is defined by x → y = min(3, 3 − x + y). The truth values table for the implication is shown in Table 6. There are also two disjunction connectives, the
strong disjunction V and the weak disjunction V, defined by the formulas: x V y = min(3,x + y) and x V y = max(x, y) These two disjunctions satisfy the two De Morgan laws when matched with the corresponding conjunction, namely:
ч(x V y) ≡ (чx&чy) ч(x&y) ≡ (чx V чy) ч(x V y) ≡ (чx Λ чy) ч(x Λ y) ≡ (чx V чy)
Here the connective ≡ has its standard meaning in terms of the implication connective.
As it is well known, the implication and the value 0 (or the negation instead) are enough to express the other connectives, as examples we provide the following formulas:


Table 6
Truth table of the implication in L- 4.


чx = x → 0
x V y = (x → y) → y)
x Λ y = ч((чx → чy) → чy)
For what follows and in order to avoid long expressions, it is very convenient to define some other non-native connectives in this logic:
x ⊕ y = чx → y
x ⊗ y = ч(чx ⊕ чy)
x x y = (x → y) Λ (y → x)
2x = (x ⊗ x) ⊗ x
id(x, y)= 2(x x y)
Δ(x)= ч2(x ⊕ y)
There is also a Hilbert-style definition for L- ukasiewicz many-valued logics that can be found in [2].
Next we introduce the following 4-valued logic, which we will call M 4. It has among its properties the particularity that when restricted to a particular set of three of its values it expresses logic G3. It counts with two negations, one of them is defined as L- ukasiewicz negation (in L- 4), which becomes the strong negation.
Logic M 4 has five connectives: conjunction and disjunction are binary connec- tives and are defined as the minimum and maximum of the two values respectively. The implication is a binary connective defined by Table 7. We define two negations, the weak negation is defined in terms of the implication by the formula чα = α → 0, and the strong negation which, as in L- ukasiewics logic is defined by the formula
~ α =3 — α. In M 4 value 3 is the only designated value.
The implication of M 4 can be expressed in terms of the connectives of L- 4 in terms of the following formula:
x →M4 y = (Δ(x) V y) V id(x, y)


Table 7
Truth table of the implication in M 4.

From this, it follows that all the connectives of M 4 can be expressed in terms of L- 4 and therefore any function expressed in terms of M 4 can be expressed also in terms of L- 4.
It is convenient to have a name for the 4-valued logic that results from M 4 when the strong negation is removed.
Definition 4.1 Logic M 4a is the 4-valued logic with four connectives that results from M 4 when removing the strong negation.
As mentioned before the first interesting property of M 4 logic that relates to our previous sections is the fact that logic G3 is expressed in terms of it.
Theorem 4.2 The restriction of logic M 4 to the three values 0, 2, 3 coincides with logic G3. In particular if |=M4 α then |=G3 α.
Proof. It is enough to observe that the connectives of G3 and those of M 4 when restricted to the values 0, 2, 3 are the same if we interpret the values 2 and 3 of M 4 as the values 1 and 2 of G3 respectively.	2
In fact, we have a converse for the second part of the previous result, according to which, we obtain equivalence between logics M 4 and G3 as established in next results.
Theorem 4.3 For any formula α if |=G3 α then |=M4 α
Proof. It is not difficult to check that each axiom that defines logic G3 is a tautology in M 4 and since G3 has Modus Ponens as unique inference rule, then it follows by using the fact that in M 4, x |=3 is 3 only if x = 3 that any theorem in G3 must be a tautology in M 4.	2
As a consequence of the previous two results we have that for any formula, it is a tautology in M 4 if and it is a tautology in G3 as stated in the next corollary.
Corollary 4.4 For any formula α we have |=G3 α if and only if |=M4 α.
Some other properties of logic M 4
As the previous result shows, logic M 4 has, as tautologies, all the axioms that define logic G3, that is: all axioms of Positive Logic, the two axioms that define

intuitionism, namely: (α → β) → ((α → чβ) → чα), чα → (α → β) and also the axiom that defines logic G3 from intuitionism, which is: (чβ → α) → (((α → β) → α) → α)
Besides M 4 possesses some other properties that are common in some other logics and are useful to enhance its richness, like for example the De Morgan laws. We establish some of these properties in the next result easy to check.
Theorem 4.5 The following formulas are tautologies in M 4
~~ α ≡ α
~ (α Λ β) ≡ (~ αV~ β)
~ (α V β) ≡ (~ αΛ~ β)
((α → β) ≡ (ччαΛ~ β)
чα ≡ ччα
α → чα

It is important to note that the converse to the last formula is not a tautology in M 4, so the negation ~ is stronger than but not equivalent to the negation ч.
Conclusions
We show that L- ukasiewicz logic can be used for knowledge representation based on logic programming. We review how two useful semantics to represent knowledge, stable and p-stable, are characterized via L- 3 logic. In particular we take advantage

of the fact that L- ukasiewicz’s logic L- 3 is able to express G3 and Gj
logics, which

characterize those two semantics for normal programs respectively. We also present the definition of stable model for general programs in terms of logic G3, then extend

it for programs in the languages of Gj
and L- 3 and study the concept of strong

equivalence in the new context of paraconsistency. Finally we present L- ukasiewicz’s logic L- 4 of 4 values along with a new logic that we call M 4. M 4 has also 4 truth values, it has G3 embedded into it, it can be expressed in terms of L- ukasiewicz’s logic L- 4, counts with two negations and has several interesting properties related to the other logics presented in the work which make it worth studying in future research.

References
J. L. Carballido, J. C. Nieves, and M. Osorio. Inferring Preferred Extensions by Pstable Semantics.
Revista Iberomericana de Inteligencia Artificial, 13(41):38–53, 2009.
M. Coniglio, F. Esteva, and L. Godod. On the set of intermediate logics between the truth and degree- preserving lukasiewicz logics. Logic Lournal of the IGPL, 2016.
P. Ha´jek. Metamathematics of fuzzy logic. Kluwer Academic Publisher, 1998.
P. Hajek. Fuzzy logic. Stanford Encyclopedia of Philoshophy. http://plato.stanford.edu/entries/logic- fuzzy/#4. Last consulted: November 15, 2009, 2006.
G. J. Klir and B. Yuan. Fuzzy Sets and Fuzzy Logic: Theory and Applications. Prentice Hall PTR, 1995.

V. Lifschitz, D. Pearce, and A. Valverde. Strongly equivalent logic programs. ACM Trans. Comput. Logic, 2(4):526–541, Oct. 2001.
J. W. Lloyd. Foundations of Logic Programming. Springer, Berlin, second edition, 1987.
E. Mendelson. Introduction to Mathematical Logic. Wadsworth, Belmont, CA, third edition, 1987.
P. Minari.	A note on L- ukasiewicz’s three-valued logic.	Annali del Dipartimento di Filosofia
dell’Universita` di Firenze, pages 163–190, 2003.
J. Moˇckoˇr, V. Nov´ak, and I. Perfilieva. Mathematical principles of fuzzy logic. Kluwer Academic Publisher, 2000.
M. Ortiz and M. Osorio. Strong negation and equivalence in the safe belief semantics. J. Log. Comput., 17(3):499–515, 2007.
M. Osorio and J. L. Carballido. Brief study of G’3 logic. Journal of Applied Non-Classical Logic, 18(4):475–499, 2008.
M. Osorio, J. A. Navarro, J. Arrazola, and V. Borja. Ground nonmonotonic modal logic S5: New results. Journal of Logic and Computation, 15(5):787–813, 2005.
M. Osorio, J. A. Navarro, J. Arrazola, and V. Borja. Logics with common weak completions. Journal of Logic and Computation, 16(6):867–890, 2006.
M. Osorio, J. A. N. P´erez, and J. Arrazola. Equivalence in answer set programming. pages 57–75, 2001.
M. Osorio and C. Zepeda. Update sequences based on minimal generalized pstable models. In MICAI, pages 283–293, 2007.
M. Osorio and C. Zepeda. Pstable theories and preferences. In Electronic Proceedings of the 18th International Conference on Electronics, Communications, and Computers (CONIELECOMP 2008), March, 2008.
S. Pascucci and A. Lopez. Implementing p-stable with simplification capabilities. Submmited to Inteligencia Artificial, Revista Iberoamericana de I.A., Spain, 2008.
D. Pearce. A New Logical Characterisation of Stable Models and Answer Sets. In Non-Monotonic Extensions of Logic Programming, pages 57–70, 1996.
D. Pearce. Stable Inference as Intuitionistic Validity. Logic Programming, 38:79–91, 1999.
J. Rosser and A. Turquette. Many-Valued Logics. Amsterdam: North-Holland Publishing Company, 1952.
A. Urquhart. Many-valued logic. Chapter in book: Handbook of Philosophical Logic, Vol. III. In Gabbay and Guenthner (eds.), D.Reidel Publishing Company, l984.
L. A. Zadeh. Fuzzy sets. Information and Control, 8:338–353, 1965.
