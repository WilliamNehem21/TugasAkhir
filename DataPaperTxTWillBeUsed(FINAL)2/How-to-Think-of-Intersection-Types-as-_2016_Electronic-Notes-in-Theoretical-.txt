Available online at www.sciencedirect.com


Electronic Notes in Theoretical Computer Science 325 (2016) 305–312
www.elsevier.com/locate/entcs

How to Think of Intersection Types as Cartesian Products
Rick Statman1
Mathematical Sciences Carnegie Mellon University Pittsburgh, PA
USA

Abstract
In their paper “Intersection types and lambda definability” [3] Bucciarelli, Piperno, and Salvo give a mapping of the strongly normalizable untyped terms into the simply typed terms via the assignment of intersection types. Here we shall both generalize their result and provide a converse. We shall do this by retracting untyped terms with surjective pairing onto untyped terms without pairing by using a special variant of Stovring’s notion [8] of a symmetric term. The symmetric ones which have simple types with Cartesian
products are precisely the ones which retract onto (eta expansions of) strongly normalizable untyped terms. The intersection types of the strongly normalizable terms are related to the simple types with products in that we just replace ∧ by Cartesian product and vice versa.
Keywords: lambda calculus, semigroups, representation


1	Introduction
In their paper “Intersection types and lambda definability” [3] Bucciarelli, Piperno, and Salvo give a mapping of the strongly normalizable untyped terms into the simply typed terms via the assignment of intersection types. Here we shall both generalize their result and provide a converse. We shall do this by retracting untyped terms with surjective pairing onto untyped terms without pairing by using a special variant of Stovring’s notion [8] of a symmetric term. The symmetric ones which have simple types with Cartesian products are precisely the ones which retract onto (eta expansions of) strongly normalizable untyped terms. The intersection types of the strongly normalizable terms are related to the simple types with products in that we just replace ∧ by Cartesian product and vice versa.


1 Email: statman@cs.cmu.edu

http://dx.doi.org/10.1016/j.entcs.2016.09.045
1571-0661/© 2016 The Author(s). Published by Elsevier B.V.
This is an open access article under the CC BY license (http://creativecommons.org/licenses/by/4.0/).

Definition 1.1 Atoms of the language:
the variables x, y, z, . . . are atoms, and
the constants P, L, R are atoms.
Definition 1.2 Terms of the language:
atoms are terms, and
if X, Y are terms then so are (XY ) and λxX. We shall adopt the customary conventions:
parens are deleted and restored by left association and the use of Church’s
infixed “dot” notation
parens are added around abstractions, and additional unary operations, for readability.
The axiom and rules of untyped lambda calculus are the following. The first 5 axioms correspond to the classical theory of untyped lambda calculus with surjective pairing SP.
(beta)  (λxX)Y	= [Y /x]X
(eta)  X	= λx. Xx   x not free in X
(L/Pa) L(PXY ) = X (R/Pa) R(PXY ) = Y (P/Dp) P (LX)(RX) = X
The next 6 axioms correspond to the extended theory of Stovring (FP) and Stat- man (PSP [7], in the combinator case), which enjoys the Church-Rosser property when formulated by reductions.
(P/Ap) PXY Z	= P (XZ)(Y Z)
(L/Ap) LXY	= L(XY )
(R/Ap) RXY	= R(XY )
(L/Ab) L(λxX)	= λx(LX)
(R/Ab) R(λxX)	= λx(RX) (P/Ab) P (λxX)(λxY ) = λx PXY There are certain useful derived rules:
(P/Dp) and (P/Ap) ⇒ (L/Ap) and (R/Ap)
L(XY )= L(P (LX)(RX)Y )= L(P (LXY )(RXY )) = LXY
and similarly for R.
(L/Ap) and (R/Ap) and (P/Dp) ⇒ (P/Ap)
L(PXY Z)= L(PXY )Z = XZ and R(PXY Z)= R(PXY )Z = YZ 
and therefore

PXY Z = P (L(PXY Z))(R(PXY Z))y = P (XZ)(Y Z).
(eta) and (P/Ap) ⇒ (P/Ab)
P (λxX)(λxY )= λy. P (λxX)(λxY )y
= λy. P ((λxX)y)((λxY )y)
= λx PXY.
(eta) and (L/Ap) ⇒ (L/Ab)
L(λxX)= λy. L(λxX)y = λy. L((λxX)y)= λx(LX) and similarly for R.
(eta) ⇒ LP = K and RP = K∗
L(PX)= λx. L(PX)x = λx. L(PXx)= λx. X,
and thus,
LP = λx. LPx = λx. L(P x)= λxy. x = K. Similarly
R(PX)= λx. R(PX)x = λx. R(PXx)= λx. x,
hence
RP = λyx.x = K∗.
The result of Klop is that the Church-Rosser property fails for the following classical reductions for SP :
(beta)	(λxX)Y → [Y /x]X
(eta)	λx.Xx → X	x not free in X
(L/Pa) L(PXY ) → X (R/Pa) R(PXY ) → Y (P/Dp) P (LX)(RX) → X
Nevertheless, this theory was proved conservative over beta-eta by de Vrijer [3]. Stovring and, later, Statman (for the combinator case) introduced new reductions for the first 5 and an additional one which enjoy Church-Rosser.
Stovring Reductions for FP with eta: (beta)  (λxX)Y → [Y /x]X
(etae)	X → λx. Xx   x not free in X
(L/Pa) L(PXY ) → X
(R/Pa) R(PXY ) → Y
(P/De)		X → P (LX)(RX) (P/Ap)	PXY Z → P (XZ)(Y Z)
Now, Church-Rosser is enough to obtain de Vrijer’s theorem and a co-de Vrijer theorem that beta-eta is conservative over pairing with FP. Stovring’s argument

uses the notion of symmetric term defined below.
Our basic theory of intersection types is Barendregt, Dekkers, and Ststman ([1], p. 580). There is a simpler theory consisting of → I, → E, ∧I, and ∧E. We shall call the later BPS since it is easy to see that is equivalent to the theory S of intersection types defined in [3]. Each intersection type A can be converted into a simple type Aj with products by replacing (B ∧ C) with (B∗C). The inverse of ‘ is ”.
Definition 1.3 Simple types with Cartesian products: Type atoms p, q, r,... are types.
If A and B are types then so are (A → B) and (A∗B)
We shall employ Curry’s substitution prefix both for terms and types. [B/p]A is the result of substituting B for p in A. We adopt Church typing for terms as follows, but it is convenient to adopt the Curry notation S ▶ X : A, where S (the base) is a set of declarations x : B for the Church typings . Here S will only contain declarations x : B provided x is indeed a typed variable of type B.
Definition 1.4 Typed terms:
xA, yB, zC,... are typed variables
▶ xA : A, ▶ yB : B, ▶ zC : C, . . .
We abbreviate by omitting superscripts.
▶ X : A, ▶ Y : B	⇒ ▶ PXY : (A∗B)
▶ X : (A∗B)	⇒ ▶ LX : A, ▶ RX : B
▶ X : B	⇒ ▶ λxAX : A → B
▶ X : A → B, ▶ Y : A	⇒ ▶ (XY ): B
▶ X : A → B, ▶ Y : A	⇒ ▶ ⟨XY ⟩ : B
▶ ⟨(LX)Y ⟩ : B, ▶ ⟨(RX)Y ⟩ : C ⇒ ▶ ⟨XY ⟩ : B∗C
Here ⟨⇒⟩ simply represents the pointwise action of a pair on an element in the common domain of the coordinates. We could define ⟨⇒⟩ as follows:
▶ X : A → B, ▶ Y : A	→ ⟨XY ⟩ := (XY )
▶ ⟨(LX)Y ⟩ : B, ▶ ⟨(RX)Y ⟩ : C → ⟨XY ⟩ := P⟨(LX)Y ⟩⟨(RX)Y ⟩
but we prefer to introduce ⟨⟩ as a primitive with reduction rules: (beta)(λx.XY )	→ [Y /x]X
(L/Pa) L(PXY )	→ X
(R/Pa) R(PXY )	→ Y
(P/Dp) P (LX)(RX) → X
(P/ <>) ⟨(PXY )Z⟩  → P⟨XZ⟩⟨Y Z⟩
(zeta) ⟨XY ⟩	→ (XY ) if ▶ X : A → B. ▶ Y : A
Facts:
subject reduction

weak diamond
strong normalization
Church-Rosser
Definition 1.5 Faces f (X) of an untyped term X: f (x)	= {x}
f (λx. X) = {λx. Z | Z : f (X)} f (PXY ) = f (X) ∪ f (Y ) f (LX)	= f (X)
f (RX)	= f (X)
f (XY )	= {ZjZ” |Zj : f (X) and Z”: F (Y )}
Definition 1.6 ∼ regular term for a binary relation ∼:
X is ∼ regular if for any subterm PY Z of X and U : f (Y ), V : f (Z) we have
U ∼ V
Examples of ∼:
Example 1.7 alpha conversion Example 1.8 eta conversion Example 1.9 beta-eta conversion
Stovring’s notion of symmetric is the same as beta-eta regular. Here we note that the condition U : f (X), V : f (X) ⇒ U ∼ V is not sufficient to ensure that X is ∼ regular already for ∼= eta.
Example 1.10
λy. Px((λz. x)y)
has only one face λz. x, modulo eta, but P x((λz. x)y) has two. The faces of a term typed with simple types and Cartesian products are obtained by erasing the typing, changing ⟨⟩ to ( ) and computing f of the result.
Lemma 1.11 If, in BCD, A ≤ B then there exist an eta regular xj such that in simple types with Cartesian products we have x : Aj ▶ xj : Bj and any face of xj eta reduces to x.
Proof. By induction on the length of a BCD derivation of A [ B. Basis:
Case 1: (refl.) We set xj := x


Case 2: (incL). We set xj := Lx
x : A ▶ x : A


x : A∗B ▶ x : A∗B x : A∗B ▶ Lx : A

Case 3: (incR). We set xj := Rx

x : A∗B ▶ x : A∗B x : A∗B ▶ Rx : B
Case 4: (→ ∧). We set xj := λy. ⟨xy⟩
x : (A → B)∗(A → C) ▶ x : (A → B)∗(A → C) x : (A → B)∗(A → C) ▶ Lx : A → B
x : (A → B)∗(A → C) ▶ Rx : A → C
y : A ▶ y : A
x : (A → B)∗(A → C),y : A ▶ ⟨Lxy⟩ : B
x : (A → B)∗(A → C),y : A ▶ ⟨Rxy⟩ : C
x : (A → B)∗(A → C),y : A ▶ ⟨xy⟩ : B∗C
x : (A → B)∗(A → C) ▶ λy. ⟨xy⟩ : A → (B∗C) Induction step:
Case 1: (glb) By induction hypothesis we may assume that we have x : Cj ▶ xj1: Aj and x : Cj ▶ xj2 : Bj in simple types with surjective pairing. Thus, we can set xj := P (xj1)(xj2).
Case 2: (trans) By induction hypothesis we may assume that we have y : Bj ▶ yj1: Cj and x : Aj ▶ xj2: Bj in simple types with surjective pairing. Thus we can set [xj2/y](yj1)
Case 3: (→) By induction hypothesis we may assume that we have y : Cj ▶ yj1: Aj and z : Bj ▶ zj2 : D in simple types with surjective pairing. Then we can set xj := λy. (x(yj1))j2 and we have
x : Aj → Bj,y : Cj ▶ x(yj1) : Bj x(yj1) : Bj ▶ (x(yj1))j2: Dj
x : Aj → Bj,y : Cj ▶ (x(yj1))j2: Dj
x : Aj → Bj ▶ λy. (x(yj1))j2: Cj → Dj	2
Theorem 1.12 If in BCD we have S ▶ X : A then there is eta regular Xj such that in simple types with Cartesian products Sj ▶ Xj : Aj and for any face U of Xj,U eta reduces to X.
Proof. By induction on the length of a BCD derivation of S ▶ X : A. Basis: (Ax) This case is trivial.
Induction step:
Case 1: The derivation ends in the [ rule. This is the content of Lemma 1.
Case 2: The derivation ends in ∧E, → I, or → E. This follows directly the induction hypothesis.
Case 3: The derivation ends in ∧I. So in BCD we have S ▶ X : A and S ▶ X : B. By induction hypothesis we have Sj ▶ Xj1 : Aj and Sj ▶ Xj2 : Bj. Thus Sj ▶ P (xj1)(xj2) : (A ∧ B)j and P (xj1)(xj2) is eta regular.	2

Theorem 1.13 If X is eta regular and in simple types with Cartesian products we have S ▶ X : A then for any face U of X there exists an eta reduct U ” such that we have in BCD S” ▶ U ”: A”.
Proof. By induction on the length of a typing derivation of X. Basis: X = x. Obvious.
Case 1: X = PY Z : A∗B. Y and Z are eta regular, and the induction hypothesis applies to them. Thus, for any U : f (Y ) and V : f (Z) there exist eta reducts U ” and V ” respectively such that in BCD, S” ▶ U ”: A” and S” ▶ V ”: B”. Now U ” ∼ V ” so by subject reduction and Church-Rosser for eta there exists W ” such that U ” eta reduces to W ” eta expands to V ” and S” ▶ W ”: A” ∧B” in BCD.
Case 2: X = LY or RY . By induction hypothesis and ∧E.
Case 3: X = λy. Y : A → B. Now the induction hypothesis applies to S ∪ {y :
A}▶ Y : B so S” ∪ {y : A”}▶ Y ”: B”. Hence S” ▶ λy. Y ”: (A → B)”.
Case 4: X = (Y Z) : B with S ▶ Y : A → B. As in Case 1 for any U : f (Y ) and V : f (Z) there exist eta reducts U ” and V ” respectively such that in BCD, S” ▶ U ”: A” → B” and S” ▶ V ”: A”. Thus S” ▶ U ”V ”: B”.
Case 5: X = ⟨Y Z⟩. As in Case 1 for any U : f (Y ) and V : f (Z) there exist eta reducts U ” and V ” respectively such that in BCD, S” ▶ U ”V ”: A, and other eta reducts U ” and V ” respectively such that in BCD, S” ▶ U ”V ” : B”. By Church-Rosser for eta and subject reductions there exists W such that UV eta reduces to U ”V ” eta reduces to W eta expands to U ”V ” eta expands to UV and S” ▶ W : A ∧ B.	2
Now Theorems 1 and 2 combine for a nice characterization of the case when X
is eta normal.
Corollary 1.14 If X is eta normal, then in BCD we have S ▶ X : A if and only if there is an eta regular Xj such that Sj ▶ Xj : A and X is an eta reduct of any face of Xj.
Remark 1.15 The eta reductions in Theorem 1 and 2 could be removed by the technique of [6]. There we extend the type structure to make → “almost” surjective. For each atom p we add new atoms pl, pr and the definitional equality p := pl → pr. Replacing an atom by its is referred to as “type expansion”. It is obvious that two distinct type expansions of a given type have a common type expansion. This was our original formulation of the result. However, here we prefer to state the outcome for the original BCD. With type expansions BPS becomes useful. We state without proof the useful lemmas.
Lemma 1.16 If in BPS, S ▶ X : A then for any eta expansion X# of X there exists type expansions S#, A# such that S# ▶ X#: A#.
Lemma 1.17 If in BCD, S ▶ X : A then there is an eta expansion X# of X and a type expansion S# of S and A# of A such that in BPS,
S# ▶ X#: A#.

References
Barendregt, H., Dekkers, W., Statman, R., Lambda Calculus with Types, CUP, (2013).
Brarendregt, H., M. Coppo and M. Dezani, A filter lambda model and the completeness of type assignment, Journal of Symbolic Logic 48 (1983), pp. 931–940.
Bucciarelli, A., Piperno, A., Salvo I., Intersection types and lambda definability, MSCS03, 13 (1), pp. 15-53, (2003).
Coppo, M., Dezani, M., A new type assignment for lambda terms, Archiv fur math. logik, 19 (l), pp. 139-156, (1978).
de Vrijer, R., Extending the lambda calculus with surjective pairing is conservative, LICS 4, pp. 204-215, (1989).
Statman, R., A local translation of untyped into simply typed lambda-calculus, CMU Research Report #91-134, (1991).
Statman, R., Surjective pairing revisited, in Liber Armicorum for Roel DeVrijer. Klop, van Oostrom, and van Raamsdonk, eds., University of Amsterdam, (2009).
Støvring, K., Extending the extensional lambda calculus with surjective pairing is conservative, LMCS
2, pp. 1-14.
