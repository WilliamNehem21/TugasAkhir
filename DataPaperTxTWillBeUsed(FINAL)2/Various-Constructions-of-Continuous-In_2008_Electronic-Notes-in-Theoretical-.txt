	Electronic Notes in Theoretical Computer Science 212 (2008) 299–311	
www.elsevier.com/locate/entcs

Various Constructions of Continuous Information Systems 1
Luoshan Xu2
Department of Mathematics Yangzhou University Yangzhou 225002, P.R. China
Xuxin Mao3
College of Science
Nanjing University of Aeronautics and Astronautics Nanjing 210016, P.R. China

Abstract
In this paper, some classical constructions for continuous information systems in a more general sense are established. Some non-classical constructions for continuous information systems such as weak systems, algebraic kernels and algebraic retracts are also introduced.

Keywords: continuous information system; construction; approximable mapping; subsystem; retract; algebraic kernel.


Introduction and Preliminaries
Dana Scott in 1982 introduced first in [11] (Scott) information systems with the in- tention to formalize the properties of computations. After that many authors have worked on this subject from different aspects. Some of them generalized Scott’s con- cept of information systems and gave different names for their concepts with their applications in representing domains. M. Mislove and F. Oles [10] gave some power constructions of domains (a generalization of Hoare power domains) via informa- tion systems. Larson and Winskel [8] was successful in using information systems to solve domain equations effectively. Winskel [15] in 1988 introduced event structures

1 Supported by NSFC (10371106, 60774073), Tianyuan Fund of Mathematics of NSFC (10726028) and Fund (S0667-082) from Nanjing University of Aeronautics and Astronautics
2 Email: luoshanxu@hotmail.com, luoshanxu@yahoo.com
3 Email: xuxinmao2000@yahoo.com.cn

1571-0661 © 2008 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2008.04.069

which is similar to Scott’s concept of information systems by dropping the condition that empty set be consistent. In 1989, Droste [3] gave a fairly general concept of event structures using only the first few of conditions that an information system normally requires. His event structures are corresponding to what he called event domains (algebraic domains with an essential property that any down set deter- mined by a compact element is finite). Droste and G¨obel [4] in 1990 introduced also non-deterministic information systems which can produce any dcpos. They were successful in giving topological characterizations for what they called information domains. In the invention of linear logic, Girard [6] introduced sequent calculus. And Zhang in his dissertation [19] posed sequent structures for the sequent calcu- lus. It turns out that sequent structures and non-deterministic information systems represent the same class of dcpo’s. Deterministic sequent structures can be taken as information systems in a minor generalized sense of Zhang [19]. In his subsequent papers [17,18], Zhang was successful in representing SFP domains, DI-domains with sequent structures in a non-standard way. With a new viewpoint of disjunctive logic, Zhang [20] also introduced disjunctive systems in representing algebraic L-domains. Disjunctive systems are similar to information systems or sequent structures, but they are rarely such kind of structures in usual sense. A more closely related work on information systems is Hoofman’s [7]. He introduced continuous information systems (cis, as he called) and qualitative information systems and obtained some pairs of equivalent categories. However, cis can only represent domains within the class of bc-domains (the continuous counterpart of Scott domains). In 1993, Vickers in [14] introduced his concept of information systems which are essentially general- izations of abstract bases. His work is indirectly related to information systems of others senses. In 2001, Bedregal [2] in an unofficially published extended abstract, gave another modified definition to Hoofman’s continuous information systems and declared some nice results on this subject. However, his definition of continuous information systems seems too weak to accomplish his results.
Spreen, Xu and Mao thus in 2007 introduced in [13] a new concept of continu-
ous information systems by modifying and adding some conditions of Scott’s and/or Hoofman’s approaches. As is shown in [13], these new continuous information sys- tems generate exactly all the continuous domains. To go further on this subject, elementary constructions of continuous information systems are normally needed. The present paper thus aims at giving various classical and non-classical construc- tions of these new continuous information systems [13].
We give first a preliminary section on continuous information systems. Standard notions and elementary facts about domains please refer to [1] or [5].

Information Systems and Approximable Mappings
In the sequel, Pfin(A) will denote the set of all finite subsets of A, F in(A) = Pfin(A) \ {∅}, and F ⊆fin A means that F ∈ Pfin(A). For a domain D, KD will denote the set of all compact elements of D.
Definition 2.1 (cf. [13]) Let A be a set, Con a collection of ﬁnite subsets of A

and ▶⊆ Con ×A. Then (A, Con, ▶) is called a continuous information system if the following six conditions hold for all sets X, Y ∈ Con, elements a ∈ A and nonempty ﬁnite subsets F of A:
{a} ∈ Con,
X ▶ a ⇒ X ∪ {a} ∈ Con,
(Y ⊇ X ∧ X ▶ a) ⇒ Y ▶ a,
X ▶ Y ∧ Y ▶ a ⇒ X ▶ a,
X ▶ a ⇒ (∃Z ∈ Con)(X ▶ Z ∧ Z ▶ a),
X ▶ F ⇒ (∃Z ∈ Con)(Z ⊇ F ∧ X ▶ Z), where X ▶ Y means that X ▶ b, for all b ∈ Y .
If in addition, the following condition
(∀a ∈ X ∈ Con)(X ▶ a)
holds, then A = (A, Con, ▶) is called an algebraic information system.
For a continuous information system (A, Con, ▶), the elements of A are usually called tokens, the sets in Con consistent and the relation ▶ entailment relation. Tokens should be thought of as atomic propositions giving information about data and consistent sets as representing consistent finite conjunctions of such proposi- tions. The entailment relation then tells us which propositions are derivable from what. A continuous information system generates a continuous domain consisting of the data (the states) that are uniquely described by certain sets of elementary propositions or tokens with respect to set inclusion.
Definition 2.2 (cf. [2,13]) Let A = (A, Con, ▶) be a continuous information sys- tem. A subset x of A is a state of (A, Con, ▶) if the next three conditions hold:
(For every ﬁnite subset F of x) (∃Y ∈ Con)(F ⊆ Y ∧ Y ⊆ x),
(∀X ∈ Con)(∀a ∈ A)(X ⊆ x ∧ X ▶ a ⇒ a ∈ x),
(∀a ∈ x)(∃X ∈ Con)(X ⊆ x ∧ X ▶ a).

It is easy to show that for all X ∈ Con, X = {a ∈ A|X ▶ a} is a state of A. With respect to set inclusion the states of A form a partially ordered set which turns out to be a domain (i.e., a continuous dcpo) and is denoted by |A|. It has been deduced in [13] that continuous information systems allow the generation of all domains. More precisely, starting from a domain, one can induce a continuous information system which in return generates the original domain.
Definition 2.3 For a domain D with a basis B, deﬁne S(D, B)= (B, ConD, ▶D)
such that
X ∈ ConD ⇔ X is a ﬁnite subset of B and sup X exists in D,
∀X ∈ ConD, ∀b ∈ B, X ▶D b ⇔ b  D sup X.
Then S(D, B) is a continuous information system, called the induced continuous information system by domain D.

Theorem 2.4 (1) For a domain D with a basis B, S(D, B) = (B, ConD, ▶D) is indeed a continuous information system. Furthermore, (|S(D, B)|, ⊆) ∼= D.
(2) Let D be an algebraic domain with KD the set of all compact elements. Then the induced continuous information system S(D) = (KD,ConD, ▶D) in the above sense is an algebraic information system.
Proof. Straightforward.	 
To think categorically, the appropriate morphisms between continuous informa- tion systems are some relations. They share essential properties with entailment relations.
Definition 2.5 An approximable mapping f : (A, ConA, ▶A) → (B, ConB, ▶B) between continuous information systems (A, ConA, ▶A) and (B, ConB, ▶B) is a re- lation f ⊆ ConA × B that satisﬁes the following four conditions:
((Xf Y ) with ∅ /= Y ⊆fin A) ⇒ (∃Z ∈ ConB)(Y ⊆ Z and Xf Z);
(Xf Y and Y ▶B b) ⇒ Xfb;  (X'fb and X ▶A X') ⇒ Xfb;
(X ⊆ X' ∈ ConA and Xfb ∈ B) ⇒ X'fb;
(Xfb) ⇒ (∃X' ∈ ConA and ∃Y ∈ ConB)(X ▶A X' and X'fY and Y ▶B b), where Xf Y means that Xfc, for all c ∈ Y .
The composition g ◦ f : (A, ConA, ▶A) → (A'',Con'', ▶'') of approximable map-
pings f : (A, Con, ▶) → (A',Con', ▶') and g : (A',Con', ▶') → (A'',Con'', ▶'') is deﬁned by
X(g ◦ f )c ⇔ (∃Y ∈ Con')(Xf Y and Y gc).
Continuous (algebraic) information systems and approximable mappings be- tween them with identities being entailments ▶ and compositions defined above form a category, denoted by CINF (AlgINF). Let CDOM (AlgDOM) be the category of (algebraic) domains and Scott continuous functions. It has been essen- tially proved in [13] that CINF (AlgINF) is equivalent to CDOM (AlgDOM).

Classical Constructions
It is well known that for domains, one has constructions of liftings, products and powers. In this section we give also such classical constructions for continuous information systems.
We begin with liftings and products. The following constructions are standard.

Definition 3.1 (1) Let S = (A, Con, ▶) be a continuous information system. Then the lifting of S, denoted by S⊥, is the triple (A⊥,Con⊥, ▶⊥), where A⊥ = A ∪ {⊥}, Con⊥ = Con ∪ {X ∪ {⊥} : X ∈ Con} ∪ {{⊥}}, and for all Y ∈ Con⊥ and a ∈ A⊥,
Y ▶⊥ a iff (a = ⊥ or (Y \{⊥}) ▶ a).
Let S = (A0,Con0, ▶0) and T = (A1,Con1, ▶1) be two continuous in- formation systems. And let πi : A0 × A1 → Ai be the canonical projections

(i = 0, 1). Then the product of S and T , denoted by S × T , is the triple (A0 × A1,Con×, ▶×), where Con× = {X ∈ Pfin(A0 × A1) : πi(X) ∈ Coni and i = 0, 1} and X ▶× (a0, a1) ⇔ πi(X) ▶i ai (i = 0, 1).
Let S = (A0,Con0, ▶0) and T = (A1,Con1, ▶1) be two continuous in- formation systems. Then the disjoint sum of S and T , denoted by S  T , is the triple (A0  A1,ConU, ▶U), where A0  A1 = {(i, x) : x ∈ Ai,i = 0, 1}, ConU = {{i}× X : X ∈ Coni,i = 0, 1}, {i}× X ▶U (i, x) ⇔ X ▶i a (i = 0, 1).
Let S = (A, ConS, ▶S) and T = (B, ConT , ▶T ) be two continuous informa-
tion systems. Then the separated sum of S and T , denoted by S + T , is deﬁned to
be (S  T )⊥ = ((A  B)⊥,ConU , ▶U ).
⊥	⊥
Proposition 3.2 Let S = (A, ConS, ▶S) and T = (B, ConT , ▶T ) be continuous information systems. Then
S , the lifting of S is a continuous information system.
S  T , the disjoint sum of S and T is a continuous information system.
S + T , the separated sum of S and T is a continuous information system.
Proof. (1): For all X, Y ∈ Con⊥ and a ∈ A⊥. We need to verify conditions of Definition 2.1. To show condition (1), if a = ⊥, then {a} = {⊥} ∈ Con⊥. If a ∈ A, then {a} ∈ ConS ⊆ Con⊥.
To show condition (2), let X ▶⊥ a. If a = ⊥, then by Definition 3.1 (1), it is clear that X ∪ {a} ∈ Con⊥. If a ∈ A, then by Definition 3.1 (1), we have X\{⊥} ▶ a. This implies that (X\{⊥}) ∪ {a} ∈ ConS and thus X ∪ {a} ∈ Con⊥.
To show condition (3), let X ⊆ Y and X ▶⊥ a. If a = ⊥, then trivially Y ▶⊥ a. If a ∈ A, then X\{⊥} ▶ a. Since X\{⊥} ⊆ Y \{⊥} and S is a continuous information system, we have Y \{⊥} ▶ a and thus Y ▶⊥ a.
To show condition (4), let X ▶⊥ Y ▶⊥ a. If a = ⊥, then trivially X ▶⊥ a. If a ∈ A, then Y \{⊥} ▶ a and X\{⊥} ▶ Y \{⊥}. This shows that X\{⊥} ▶ a and thus X ▶⊥ a.
To show condition (5), let X ▶⊥ a. If a = ⊥, then picking Z = {⊥} ∈ Con⊥ and we have X ▶⊥ Z ▶⊥ a. If a ∈ A, then X\{⊥} ▶ a. So, there exists Z∗ ∈ ConS such that X\{⊥} ▶ Z∗ ▶ a. Pick Z = Z∗ ∪ {⊥} ∈ Con⊥. Then X ▶⊥ Z ▶⊥ a.
To show condition (6), let X ▶⊥ F ∈ Pfin(A⊥). If F = {⊥}, then pick Z =
{⊥} ∈ Con⊥. So, X ▶⊥ Z ⊇ F . If F /= {⊥}, then X ▶⊥ F \{⊥}. This implies that X\{⊥} ▶ F \{⊥}. So, there exists Z∗ ∈ ConS such that X\{⊥} ▶ Z∗ ⊇ F \{⊥}. Pick Z = Z∗ ∪ {⊥} ∈ Con⊥. Then X ▶⊥ Z ⊇ F .
To sum up, S⊥ is a continuous information system.
: Straightforward.
: Apply (1) and (2) above.	 
Proposition 3.3 Let S = (A0,Con0, ▶0) and T = (A1,Con1, ▶1) be continuous information systems. Then the product S × T is a continuous information system.
Proof. For all X, Y ∈ Con× and (a0, a1) ∈ A0 × A1. We need to verify the conditions of Definition 2.1. To show condition (1), since for each i, {ai} ∈ Coni, by Definition 3.1 (2) we have {(a0, a1)} ∈ Con×.
To show condition (2), let X ▶× (a0, a1). Then for each i, πi(X) ▶i ai. This

implies that πi(X) ∪ {ai} ∈ Coni. So, X ∪ {(a0, a1)} ∈ Con×.
To show condition (3), let X ⊆ Y and X ▶× (a0, a1). Then for all i, πi(Y ) ⊇
πi(X) ▶i ai. This implies that πi(Y ) ▶i ai. So, Y ▶× (a0, a1).
To show condition (4), let X ▶× Y ▶× (a0, a1). Then it is clear that πi(X) ▶i
πi(Y ) ▶i ai for each i. This implies that πi(X) ▶i ai. So, X ▶× (a0, a1).
To show condition (5), let X ▶× (a0, a1). Then for each i, πi(X) ▶i ai. This implies that there exists Zi ∈ Coni such that πi(X) ▶i Zi ▶i ai. Pick Z = Z0 × Z1 ∈ Con×. It is clear that X ▶× Z ▶× (a0, a1).
To show condition (6), let X ▶× F ∈ Pfin(A0 × A1). Then πi(X) ▶i πi(F ) ∈ Pfin(Ai) for each i. This implies that there exists Zi ∈ Coni such that πi(X) ▶i Zi ⊇ πi(F ). Pick Z = Z0 ×Z1 ⊇ F . It is straightforward to show that X ▶× Z ⊇ F . To sum up, S × T is a continuous information system.	 
A substructure of domains needn’t be a domain. It is not practical to require a general substructure of a continuous information system to be again a continuous information system. However, every principal ideal of a domain is again a domain which motivates us to consider special substructure cases of continuous information systems determined by states.
Definition 3.4 Let S be a continuous information system and e ∈ |S|. Then Se = (e, Cone, ▶e) is a continuous information system, called the continuous information subsystem induced by e, where Cone = {F ∈ Con|F ⊆ e} and ▶e= {(F, a) ∈▶ |F ∈ Cone and F ▶ a}.
Proposition 3.5 The triple Se = (e, Cone, ▶e) deﬁned in Deﬁnition 3.4 is really a continuous information system and |Se| =↓|S| e, the principal ideal in |S|.
Proof. Firstly, we show that Se is a continuous information system by verifying all the conditions in Definition 2.1. It is easy to check condition (1)-(4). To check (5) of Definition 2.1, let X ▶e a. Then e ⊇ X ▶ a ∈ e. Applying (5) of Definition 2.1 for continuous information system S, we have some Z ∈ Con such that X ▶ Z ▶ a ∈ e. By Definition 2.2 (2), we have Z ⊆ e and Z ∈ Cone. Thus X ▶e Z ▶e a, showing
(5) of Definition 2.1. To check (6) of Definition 2.1, let X ▶e F ∈ Pfin(e). Then e ⊇ X ▶ F ∈ Pfin(A). Applying (6) of Definition 2.1 for S, we have some Z ∈ Con such that X ▶ Z ⊇ F . By Definition 2.2 (2), we have Z ⊆ e and Z ∈ Cone. Thus
X ▶e Z ⊇ F , showing (6) of Definition 2.1. So, Se is a continuous information system.
Secondly, we show that |Se| ⊆↓|S| e. Let x ∈ |Se|. What we need to show is that x is a state of S. It is easy to see that x satisfies condition (1) in Definition 2.2 for the relation ▶. To check (2) in Definition 2.2 for relation ▶ and x, let X ⊆ x and X ▶ a. Since e ∈ |S| and X ⊆ x ⊆ e, we have a ∈ e . Thus X ▶e a and a ∈ x. Condition (3) in Definition 2.2 for relation ▶ and x is trivially true by the assumption that x ∈ |Se|. To sum up, x is a state of S and thus |Se| ⊆↓|S| e.
Finally, we show that ↓|S| e ⊆ |Se|. Let y ∈↓|S| e. Then for all X ⊆fin y ⊆ e, since y ∈ |S|, there is F ∈ Con such that X ⊆ F ⊆ y and F ∈ Cone, showing (1) in Definition 2.2 for relation ▶e and y. Condition (2) in Definition 2.2 for relation ▶e and y is trivially checked. To check (3) in Definition 2.2 for relation ▶e and y, let

a ∈ y ⊆ e. Applying (3) in Definition 2.2 for relation ▶ and y, we have some X ⊆ y such that X ▶ a. Since X ∈ Con and X ⊆ y ⊆ e, we have X ∈ Cone and X ▶e a. So, y ∈ |Se| and ↓|S| e ⊆ |Se|.
To sum up, Se is a continuous information system and |Se| =↓|S| e.	 
Corollary 3.6 Let S be an algebraic information system with e ∈ |S|. Then Se = (e, Cone, ▶e) is an algebraic information system and |Se| =↓|S| e.
Proof. By Proposition 3.5, we need only to verify (7) of Definition 2.1. For all a ∈ X ∈ Cone, it follows from Definition 3.4 that a ∈ X ∈ Con. Since S is an algebraic information system, we have X ▶ a. By Definition 3.4 again, we have X ▶e a. This shows that (7) of Definition 2.1 is satisfied by Se, as desired. 

Example 3.7 Let D = {0, a, b, 1} be the diamond lattice with four points. Let S(D) be the induced algebraic information system by D. Then by Theorem 2.4, (|S(D)|, ⊆) ∼= D. Let L be the 5-element-domain showing by the following picture:
1 .   /.d
 /
a ./  .b
  .//
0
Construct S(♦) = (A, Con, ▶), where A = {0, a, b, 1}, Con = ℘(A) −
{{a, b}, {0, a, b}} and X ▶ t ⇔ X ∈ Con and t ≤ supD X = supL X. It is easy to see that S(♦) is the induced algebraic information subsystem by the state e =↓ 1 in S(L). And by Proposition 3.5, (|S(♦)|, ⊆) ∼= D ∼= (|S(D)|, ⊆).
Definition 3.8 Let S = (A, Con, ▶) be a continuous information system and F in(A) the collection of all non-empty ﬁnite subsets of A. For all F, G ∈ F in(A), we deﬁne relations
F ≤H G ⇔ ∀a ∈ F, ∃b ∈ G, {b} ▶ a,   F ≺H G ⇔ ∀a ∈ F, ∃b ∈ G, {b} ▶ a,
F ≤U G ⇔ ∀b ∈ G, ∃a ∈ F, {b} ▶ a,   F ≺U G ⇔ ∀b ∈ G, ∃a ∈ F, {b} ▶ a.
Clearly, the relations ≤H, ≤U , ≺H, ≺U are all pre-orders on F in(A).
Definition 3.9 Let S  = (A, Con, ▶) be a continuous information system and
F in(A) the collection of all non-empty ﬁnite subsets of A.
The Hoare Power of S is deﬁned by SH = (F in(A),ConH , ▶H) such that
X ∈ ConH ⇔ X ⊆fin F in(A) and sup X exists in (F in(A), ≤H );
∀X ∈ ConH, ∀F ∈ F in(A),X ▶H F ⇔ F ≺H sup X.
The Smyth Power of S is deﬁned by SU = (F in(A),ConU , ▶U ) such that
X ∈ ConU ⇔ X ⊆fin F in(A) and sup X exists in (F in(A), ≤U );
∀X ∈ ConU , ∀F ∈ F in(A),X ▶U F ⇔ F ≺U sup X.
Here we only give the general power constructions. It is not practical to re- quire a power of a continuous information system remain a continuous information system, for powers of domains are not always domains. What kinds of continuous information systems whose powers are again continuous information systems will be explored elsewhere.

Non-classical Constructions
In this section, we introduce some non classical constructions for continuous infor- mation systems, such as weak systems, algebraic kernels and (algebraic) retracts. We begin with a special construction in continuous information system, called the weak system construction which gives nearly a continuous information system.
Definition 4.1 Let S = (A, Con, ▶) be a continuous information system. Deﬁne
wS = (A, Con, |=) s.t. ∀a ∈ A, ∀X ∈ Con,
X |= a ⇔ (X ∪ {a} ∈ Con) and (∀b ∈ A, {a} ▶ b ⇒ X ▶ b).
Then wS is called the induced weak information system by S.
Remark 4.2 Generally speaking, the induced weak information system is not a continuous information system (see Example 4.3 below). However, if some induced weak information system happens to be a continuous information system, then it must be an algebraic one (see Proposition 4.4 below).
Example 4.3 Let S = (A, Con, ▶) with A = {1, 2, 3}, Con = ℘(A) \ {2, 3} and
▶= {(X, 1)|1 ∈ X}. Then it is easy to see that S = (A, Con, ▶) is a continuous information system and the weak information system wS is not a continuous infor- mation system. To see this, we ﬁrst note that ∅ |=2 and ∅ |= 3. Since ∅ ⊆ {2}, one should have {2} |= 3 by (3) in Deﬁnition 2.1. However, {2} |= 3 is not true, for
{2, 3} /∈ Con.
Proposition 4.4 Let S be a continuous information. Then we have
(X ∈ Con, a ∈ X) ⇒ X |= a,
X ▶ a ⇒ X |= a,
(X ▶ a and X ▶ b) ⇒ (∃Y ∈ Con)(X ▶ Y |= {a, b});
If S = (A, Con, ▶) is an algebraic information system, then ▶=|= and wS = S.
Proof. (1) Let X ∈ Con and a ∈ X. Then X ∪ {a} = X ∈ Con. And if b ∈ A
with X ⊇ {a} ▶ b, then by (3) of Definition 2.1, X ▶ b. So, X |= a.
If X ▶ a then X ∪ {a} ∈ Con. And by Definition 2.1(4), X ▶ {a} ▶ b ⇒ X ▶
b. So, X |= a.
If X ▶ a and X ▶ b, then by Definition 2.1(6), there is Y ∈ Con such that
X ▶ Y ⊇ {a, b}. By (1) above, Y |= a and Y |= b.
If X |= a then by the algebraicity of S and the definition of |=, we have
X ▶ a. combining this with (2) above, we have ▶=|= and wS = S.	 
Corollary 4.5 If wS = (A, Con, |=) is a continuous information system for some continuous information system S, then wS is an algebraic information system.
Proof. By (1) of Proposition 4.4, wS = (A, Con, |=) satisfies also the Condition (7) for algebraic information systems. So, wS = (A, Con, |=) is an algebraic information system whenever it is a continuous information system.	 

For a domain D, let A(D)= {d ∈ D|∃F ⊆ KD, F is directed and d = sup F }. It is not difficult to prove that A(D) in the induced order is an algebraic domain whenever A(D) is nonempty. This fact conducts us to introduce the following con- struction which always gives algebraic information systems from given continuous information systems.
Definition 4.6 Let S = (A, Con, ▶) be a continuous information system. Deﬁne a preorder ≤ on A s.t. a ≤ b ⇔ {a} ⊆ {b}, where {a} = {x : x ∈ A, {a} ▶ x} is a state (see the remark after Deﬁnition 2.2). Let Idl(A) be the set of all ideals in (A, ≤). Deﬁne stS = (A, Const, D) s.t. X ∈ Const ⇔ (X is ﬁnite and x := μy{X ⊆ y ∈ Idl(A)} exists) and X D a ⇔ a ∈ x, where μy means a smallest y fulﬁlling the indicated property. Then stS is an algebraic information system, called the algebraic kernel of S.
Proposition 4.7 The triple stS = (A, Const, D) deﬁned in Deﬁnition 4.6 is really an algebraic information system.
Proof. Conditions (1)-(5) and (7) in Definition 2.1 can be directly checked. To check (6) in Definition 2.1, let X D F ∈ Pfin(A). Then F ⊆ x = μy{X ⊆ y ∈ Idl(A)}. Take Z = X ∪ F ⊇ F . Then Z ∈ Const and X D Z ⊇ F , as desired. 
Pass to (algebraic) retracts. We note that retracts should be defined in terms of retractions which have to be approximating mappings. However, approximating mappings are defined only between continuous information systems. To define prop- erly retractions between (algebraic) continuous information systems, the following Proposition 4.8 and 4.13 are needed.
Proposition 4.8 Let (A, Con, ▶) be an algebraic information system and B ⊆ A. Let r : A → B be an idempotent map with r(A) = B and r(Con) ⊆ Con. Let (B, ConB, ▶B) be the triple with ConB = r(Con) and ▶B= {(F, b)|F ∈ ConB,b ∈ B and F ▶ b} (i.e., F ▶B b ⇔ F ▶ b, ∀F ∈ ConB, ∀b ∈ B). Let f ⊆ Con × B induced by r s.t. for all X ∈ Con and b ∈ B, Xfb ⇔ r(X) ▶B b. If f satisﬁes the four conditions in Deﬁnition 2.5, then (B, ConB, ▶B) is an algebraic information system.
Proof. Conditions (1)-(2) of Definition 2.1 can be trivially checked by the property of r and definitions of ConB and ▶B.
Condition (3) of Definition 2.1 follows from definitions of ▶B and the induced relation f , as well as the condition (3) of Definition 2.5 that f satisfies.
Condition (4) follows from the definition of ▶B and the condition (4) of Definition
2.1 that ▶ satisfies. This can also be deduced by Condition (2) of Definition 2.5.
To show Condition (5), let F ▶B b. Then F = r(F ) ▶B b and Ffb. It follows from Condition (4) of Definition 2.5 that there is X ∈ Con and Z ∈ ConB such that X ▶ F and Ff Z and Z ▶B b. Thus for this Z we have that r(F ) = F ▶B Z and Z ▶B b.
To show Condition (6), let F ▶B K ⊆fin B with K /= ∅. Then Ff K. By Condition (1) of Definition 2.5, there is Z ∈ ConB such that Ff Z and K ⊆ Z. Thus for this Z ∈ ConB, we have that r(F )= F ▶B Z and K ⊆ Z, as desired.
Condition (7) of Definition 2.1 is trivially true in this case.	 

Definition 4.9 The algebraic information system B = (B, ConB, ▶B) in Propo- sition 4.8 is called an algebraic retract of the algebraic information system A = (A, Con, ▶) and the relation f (which thus is now an approximable mapping) in- duced by the map r is called an approximable algebraic retraction from A to B.
Proposition 4.10 Let f as in Proposition 4.8 be an approximable algebraic re- traction induced by r. Deﬁne ▶s : (B, ConB, ▶B) → (A, Con, ▶) such that for all

F ∈ ConB, a ∈ A, F ▶s
a ⇔ a ∈ B and F ▶B a. Then ▶s
is an approximable

mapping. Furthermore, f ◦ ▶s = IdB =▶B.
Proof. It is straightforward to show that ▶s

is an approximable mapping. To show

that IdB =▶B⊆ f ◦ ▶s , let F ∈ ConB and b ∈ B and F ▶B b. Then Ffb holds and there is G ∈ ConB ⊆ Con such that Ff G and G ▶B b. This follows that
F ▶s G and Gf b. By the definition of composition, we have that F (f ◦ ▶s )b and
IdB =▶B⊆ f ◦ ▶s . To show the converse, let F ∈ ConB and b ∈ B and F (f ◦ ▶s )b.

B
Then by the definition of composition, there is G ∈ Con such that F ▶s
B
G and

Gf b. By the definition of ▶s , we see that G ∈ ConB and F ▶B G, G ▶B b. Hence,
F ▶B b, i.e. f ◦ ▶s ⊆▶B, as desired.	 
By Proposition 4.10, we immediately have
Corollary 4.11 Approximable algebraic retractions are retractions in the category of AlgINF.
Recall that an internal retraction r : A → B between domains A and B means that B ⊆ A and the map r is Scott continuous and idempotent.
Proposition 4.12 If r is an internal retraction between algebraic domains A and B ⊆ A with r(KA)= KB ⊆ KA, then the approximable mapping f induced by r is an approximable algebraic retraction. Conversely, if f is an approximable algebraic retraction between algebraic information systems A and B, then the map |f | : |A| →
|B|, deﬁned for all e ∈ |A|, |f |(e)= {x | ∃F ∈ ConA such that F ⊆ e and Ffx}, is a retraction from algebraic domains |A| to |B| with |f |(K|A|)= K|B| ⊆ K|A|.
Proof. Let r be an internal retraction between algebraic domains A and B with r(KA) = KB ⊆ KA. Let (KA,ConA, ▶A) and (KB,ConB, ▶B) be the induced algebraic information systems in the manner that F ∈ Con iff F is finite and has a largest element L(F ) and that F ▶ x iff x  L(F ). Then it is straightforward to verify that the induced algebraic information systems both from domains in the sense of Theorem 2.4 (2) and from the retraction r are the same. Furthermore, the induced relation f defined by Xfb ⇔ r(X) ▶B b is really an approximable algebraic mapping. Conversely, if f is an approximable algebraic retraction induced by r between algebraic information systems A and B, then the sets of compact elements of |A| and |B| are just {X|X ∈ ConA} and {r(X)∩B|X ∈ ConA} = {F |F ∈ ConB}. So, if k = X then |f |(k) = {b ∈ B|∃X' ⊆ X and X' ∈ Con, X'fb}. It is easy to show that |f |(k) is just r(X) ∩ B = r(X) in B, a compact element in |B|. If we identify r(X) ∩ B with r(X), then we have |f |(KA)= KB ⊆ KA, as desired. 
For continuous information systems, we have the following proposition.

Proposition 4.13 Let (A, Con, ▶) be a continuous information system and B ⊆ A. Let r : A → B be an idempotent map with r(A) = B and r(Con) ⊆ Con. Let (B, ConB, ▶B) be the triple with ConB = r(Con) and ▶B= {(F, b)|F ∈ ConB,b ∈ B and X ▶ b whenever X ∈ Con and F ⊆ r(X)} (i.e., F ▶B b ⇔ X ▶ b whenever X ∈ Con and F ⊆ r(X)}, ∀F ∈ ConB, ∀b ∈ B). Let f ⊆ Con × B such that for all X ∈ Con and b ∈ B, Xfb ⇔ r(X) ▶B b. If f satisﬁes the four conditions in Deﬁnition 2.5, then (B, ConB, ▶B) is a continuous information system.
Proof. Conditions (1)-(2) of Definition 2.1 can be trivially checked by the property of r and definitions of ConB and ▶B.
Condition 2.1(3) directly follows from definitions of ▶B.
To check Condition 2.1(4), let F ▶B G ▶B b. Then for all X ∈ Con with r(X) ⊇ F . And then we have r(X) ▶B G by Condition 2.1 (3) which has been checked. Thus by the definition of f we have that Xf G ▶ b. It follows from Condition (2) of Definition 2.5 that Xfb. This implies by the definition of f and
▶B that X ▶ b. By the arbitrariness of X ∈ Con with r(X) ⊇ F , we deduce that
F ▶B b.
To show Condition 2.1 (5), let F ▶B b. Then F = r(F ) and Ffb. It follows from Condition (2) and (4) of Definition 2.5 that there is Z ∈ ConB such that Ff Z and Z ▶B b. Thus for this Z we have that F = r(F ) ▶B Z and Z ▶B b.
To show Condition 2.1 (6), let F ▶B K ⊆fin B with K /= ∅. Then Ff K. By Condition (1) of Definition 2.5, there is Z ∈ ConB such that Ff Z and K ⊆ Z. Thus for this Z ∈ ConB, we have that F = r(F ) ▶B Z and K ⊆ Z, as desired. 
Definition 4.14 The continuous information system B = (B, ConB, ▶B) in Propo- sition 4.13 is called a retract of A = (A, Con, ▶) and the relation f (which thus is now an approximable mapping) induced by the map r is called an approximable retraction from A to B.
Definition 4.15 If an approximable retraction f induced by r satisﬁes that for all
X ∈ Con and b ∈ B,
r(X) ▶B b ⇒ X ▶ b,
then f is called an approximable kernel.
If f induced by r satisﬁes that for all X ∈ Con and b ∈ B,
X ▶ b ⇒ r(X) ▶B b,
then f is called an approximable closure.
Proposition 4.16 If A is an algebraic information system and f is an approx- imable closure, then the retract B of A is also an algebraic information system. Furthermore, f in this case is an approximable algebraic retraction.
Proof. This is straightforward.	 
Proposition 4.17 Let f as in Proposition 4.13 be an approximable retraction in- duced by r. Deﬁne ▶c : (B, ConB, ▶B) → (A, Con, ▶) s.t. for all F ∈ ConB, a ∈ A,

F ▶c
a ⇔ a ∈ B and F ▶B a. Then ▶s
is an approximable mapping. Furthermore,

f ◦ ▶s = IdB =▶B.
Proof. It is straightforward to show that ▶c

is an approximable mapping. To show

IdB =▶B⊆ f ◦ ▶c , let F ∈ ConB and b ∈ B and F ▶B b. Then Ffb and there is

G ∈ ConB ⊆ Con s.t. Ff G and G ▶B b. This follows that F ▶c
G and Gf b. By

the definition of composition, we have that F (f ◦ ▶c )b and IdB =▶B⊆ f ◦ ▶c . To
B	B
show the converse, let F ∈ ConB and b ∈ B and F (f ◦ ▶c )b. Then by the definition
of composition, there is G ∈ Con s.t. F ▶c G and Gf b. By the definition of ▶c ,
we see that G ⊆ B and G ∈ ConB and F ▶B G, G ▶B b. Hence, F ▶B b, i.e.
f ◦ ▶c ⊆▶B, as desired.	 

Concluding Remarks
In this paper, liftings, separated sums, and finite products of continuous informa- tion systems are established. They are shown to be continuous information systems. Substructures and powers are also introduced which needn’t be continuous infor- mation systems generally. But for some special kinds of continuous information systems, one may obtain certain continuous information systems by taking relevant substructures and powers. It would be interesting to find some special cases to provide new continuous information systems by taking substructures and powers. For substructures constructions, the case of being determined by states is of impor- tance. It is proved that in this case, one really gets continuous information systems which are corresponding to principal ideals of domains induced by given continuous information systems. There is some potential use of this construction in represent- ing L-domains and sL-domains appeared in [9,16].
Three kinds of non-classical constructions are also introduced. The weak system construction might give non-continuous information systems. But if a weak system is a continuous information system, then it must be an algebraic one. The alge-
braic kernel construction is a relatively strong construction, for it generates always algebraic information systems. This construction might have uses in representing algebraic domains. The (algebraic) retracts are somewhat complicated and closely related to approximable mappings. However, these constructions indeed give new (algebraic) continuous information systems.

References
Abramsky, S., and A. Jung, “ Domain theory”. In: S. Abramsky, et al. (editors), Handbook of Logic in Computer Science (Volume 3), Clarendon Press (1995), pp. 1-168.
Bedregal, B. R. C., Representing Some Categories of Domains as Information System Structures. Proceedings of Chengdu ISDT (2001), pp. 51-62.
Droste, M., Event Structures and Domains, Theoretical Computer Science 68 (1989), pp. 37-47.
Droste, M., and R. G¨obel, Non-deterministic Information Systems and Their Domains, Theoretical Computer Science 75 (1990), pp. 289-309.


Gierz, G., K. H. Hofmann, K. Keimel, J. D. Lawson, M. Mislove and D. S. Scott, “ Continuous Lattice and Domains”. Cambridge university Press, Cambridge, 2003.
Girard,J. Y., Y. Lafort and P. Taylor, “ Proof and Types”, Cambridge University Press, Cambridge, 1989.
Hoofman, R., Continuous Information Systems. Information and Computation 105(1) (1993), pp. 42-71.
Larsen, K. G., and G. Winskel, Using information systems to solve domain equations effectively, in: Semantics of Data Types (G. Kahn, D. B. MacQueen and G. Plotkin eds.), Lecture Notes in Computer Science 173, Springer-Verlag, Berlin (1984), pp.109-129.
Lawson, J. D., and Luoshan Xu, When does the class [A → B] consist of continuous domains?
Topology and its applications, 130 (2003), pp. 91-97.
Mislove, M. W., and Frank J. Oles, Adjunctions Between Categories of Domains, Fundamenta Informaticae, 22(1/2) (1995), pp. 93-116.
Scott, D., Domains for denotational semantics, in Proceedings ICALP 1982 (M. Nielsen and E. M. Schmidt eds.), Lecture Notes in Computer Science 140, Springer-Verlag, Berlin (1982), pp. 577-613.
Stolenberg-Hansen, V., I. Lindstr¨om and E. R. Griffor, “ Mathematical theory of domains”. Cambridge university Press, Cambridge, 1994.
Spreen, D., Luoshan Xu, Xuxin Mao, Information Systems Revisited: The General Continuous Case. Theoret. Comput. Sci. (in press)
Vickers, S. J., Information System for Continuous Posets. Theoretical Computer Science. 114 (1993),
pp. 201-229.
Winskel, G., An introdution to Event Structures, in: Lecture Notes in Computer Science 354 (1988),pp. 364-399
Luoshan Xu, External Characterizations of Continuous sL-domains, in: Domain Theory, Logic, and Computation, Kluwer Academic Publisher (2003), pp. 137-149.
G. Q. Zhang, DI-domains as prime information systems. Information and computation, 100(2) (1992),
pp. 151-177.
G. Q. Zhang, A representation of SFP, Information and computation, 110(1) (1994), pp. 233-263.
G. Q. Zhang, “ Logic of Domains”. Birkhauser, Boston-Basel-Berlin, 1991
G. Q. Zhang, Disjunctive systems and L-domains, in: W. Kuich (Ed.), Automata, Languages and Programming, Wien, 1992, Lecture Notes in Computer Science, Vol. 623, Springer, Berlin (1992), pp. 284–295.
