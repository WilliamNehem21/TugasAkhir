
ORIGINAL ARTICLE

Eﬃcient combined security system for wireless sensor network
N.S. Fayed *, E.M. Daydamoni, A. Atwan

Department of Information Technology, Faculty of Computers and Information, Mansoura University, Egypt

Received 11 April 2012; revised 11 September 2012; accepted 16 September 2012
Available online 22 October 2012

Abstract Wireless Sensor Networks (WSNs) need effective security mechanisms because these net- works deployed in hostel unattended environments. There are many parameters affect selecting the security mechanism as its speed and energy consumption. This paper presents a combined security system for WSN that enhance the speed of the network and it is energy consumption. This system combines two strong protocols, Lightweight Kerberos and Elliptic Curve Menezes–Qu–Vanstone (ECMQV). The simulation results demonstrate that the combined system can enlarge the life time for wireless sensor networks, enhance its security, and increase its speed.
© 2012 Faculty of Computers and Information, Cairo University. Production and hosting by Elsevier B.V. All rights reserved.



Introduction

Wireless Sensor Networks (WSNs) consist of many small devices each with sensing, processing, and communication capabilities to monitor the real-world environment. They are playing an important role in different areas ranging from crit- ical military surveillance applications to building security [1]. In these networks, a large number of sensor nodes are

* Corresponding author. Tel.: +20 01001378228.
E-mail addresses: nfayed@mans.edu.eg (N.S. Fayed), emane_ daydamoni@mans.edu.eg (E.M. Daydamoni), atwan@mans.edu.eg (A. Atwan).
Peer review under responsibility of Faculty of Computers and Information, Cairo University.
deployed to monitor a vast field in hostel unattended environ- ments. For that, they should be equipped with security mech- anisms to defend against attacks such as node capture, physical tampering, eavesdropping, denial of service, etc. Unfortunately, traditional security mechanisms with high overhead are not suitable for resource constrained sensor nodes due to their lack of processing power, limited memory and energy [2]. This requires to rethink about current effective solutions in terms of speed of calculation and energy consump- tion, to make wireless sensor networks secure without consum- ing their energies.
Key management and authentication are the basis for other security services such as encryption. Many key establishment protocols involve trusted third party to set up a shared key be- tween two entities. Examples of such protocols include the Needham–Schroeder protocol [3], the Kerberos key distribution protocol [4], and the SPINS node-to-node key establishment protocol [5]. In these protocols the entities share a pre- distributed long term key with the trusted party (T). The entities use T to prove their identity (authentication) or to generate and


1110-8665 © 2012 Faculty of Computers and Information, Cairo University. Production and hosting by Elsevier B.V. All rights reserved. http://dx.doi.org/10.1016/j.eij.2012.09.001

186	N.S. Fayed et al.


transmit a session key that allows two entities to securely com- municate with one another. Depending on the protocol, T either provides the session key by itself or makes a session key gener- ated by one entity available to the other by encrypting it with the long-term key [6]. Other protocols not relay on third party to establish the shared key. They allow two entity to establish the key through exchanging the message between them over an insecure communication channel. So, these protocols have the advantage to authenticate entities that not meet before or not have a key with a third party. Examples of these protocols are Diffie–Hellman protocol [7] and elliptic curve Menezes– Qu–Vanstone (ECMQV) [8]. Some papers talked about key establishment protocols for wireless sensor network [9,10]. In
[6] they show that key exchange protocols using elliptic curve systems are feasible for wireless sensor networks. Also, they found that, in large sensor networks, elliptic curve-based key exchange may actually require less energy than Kerberos key distribution which consumes less energy in smaller sensor networks.
This paper suggests a combined system that use the two protocols, Kerberos and ECMQV, to enhance the security of the network and improve the energy consumption in the net- work. Beside that it increases the network speed due to mini- mizing the number of communications and calculations. The remaining part of this paper is organized as follows. Section 2, the related work, describes Lightweight Kerberos protocol with short messages and ECMQV. Section 3, explains the Combined Security System and how it is effective for wireless sensor network. Section 4, the discussion of the results com- pared with the two mentioned protocols. Finally, the paper closes with a conclusion in Section 5.

Related work

In sensor networks key establishment, the nodes set up a shared secret key after deployment, either through key trans- port or key agreement (or key exchange) [11]. In key transport protocol, an entity creates or obtains a secret key and transfers it securely to the other entity(s). On other hand in key agree- ment, all participating entities contribute a random input to derive a shared secret key. The advantage of key agreement over key transport is that entities cannot predetermine the resulting key because it depends on the input of all participants.
Many key establishment protocols depend on a trusted third party (T) to set up a shared key between two entities. For examples, Needham–Schroeder protocol, the Kerberos key distribution protocol, and the SPINS node-to-node key establishment protocol. Each entity shares a long-term secret key with T. According to the protocol, T either provides the session key or makes a session key generated by one entity available to the other. These protocols can be implemented with secret-key primitives so, they do not require to perform intensive cryptographic computations that may cause battery draining. Key agreement protocols do not rely on a third party to set up a shared secret key. Instead, they allow two entities to directly establish a key by exchanging messages over an inse- cure communication channel, for example ECMQV. This sec- tion explains the participated key establishment protocols: Lightweight Kerberos protocol with short messages and ECMQV.



Figure 1	Simplified Kerberos protocol exchange (an expression of the form {X} k means that message X is encrypted using the key
k) [6].


Lightweight Kerberos protocol with short messages

Kerberos is a distributed authentication service that allows a client to prove its identity to a server without sending data across the network that might allow an attacker to subse- quently impersonate the client. The basic Kerberos authentica- tion protocol allows a client with knowledge of the user’s password to obtain a ticket and session key to prove its iden- tity to any sever registered with the authentication server [12].
Lightweight Kerberos protocol with short messages [6] can be described as ‘‘Basic Kerberos authentication protocol with- out ticket granting service.’’ To illustrate the idea of Light- weight Kerberos in authenticate two entities (Say A and B) to each other, Fig. 1 illustrates the message transfers between entity A and B and the trusted third party T (authentication server). Assume that A wishes to establish a session key with entity B and Both A and B share a long-term secret key with
T. The description of the communication messages is as the following:

The first message is the Authentication Server Request (AS_REQ) message, which is sent from A to T. This mes- sage contains A’s identity, B’s identity, and a random nonce nA that will be used to associate reply messages with the matching AS_REQ request and to detect replays.
After receipt of the AS_REQ message, T looks up entities A and B in its database, verifies that they are authorized to establish a session key, and fetches their long-term keys kAT and kBT. Then, T generates a new random session key kAB to be shared between A and B and embeds it into a ticket. The ticket also contains A’s identity, and the tick- et’s validity lifetime (expiration time tE and an optional starting time tS). The ticket is encrypted using kBT that only known by T and B. Next, T creates the AS_REP message, consisting of the ticket for A to present to B, kAB, tE, B’s identity, and nA from the AS_REQ message. All elements except the ticket are encrypted with kAT.
After receiving of the AS_REP response, A uses kAT to decrypt the non-ticket part of the message. Entity A verifies that the received nonce matches the nonce it supplied in the AS_REQ message and that the current time is within the lifetime of the session key. Also, entity A checks whether the ticket was created for B. In the third message, the

Efficient combined security system for wireless sensor network	187

AP_REQ (Application Request) message, entity A transfers the ticket together with an authenticator to B. The authen- ticator contains A’s own identity and a timestamp tA, both encrypted in kAB. The purpose of the authenticator is to prove that entity A knows kAB and to ensure that every AP_REQ message is unique.
After receiving of the AP_REQ message, B decrypts the ticket using kBT and extracts kAB, the identity of A, and
knows its own secret keys a, c, and the public keys S, T, U, and V. Also, B knows b, d, S, T, U, and V. The shared secret K is determined by entity A as in Algorithm 1. B also compute the same value of K by swapping (a, c, T, U, V) in Algorithm 1 with (b, d, S, V, U) [15].

tE. Then, B uses kAB to decrypt the authenticator and com-
pares the information in the ticket with that in the authen- ticator. If all checks pass, B considers A as authenticated. Mutual authentication requires that entity B proves its identity too by sending Application Reply (AP_REP) mes- sage, consists of the timestamp encrypted in the session key

kAB,
back to A. After A received and decrypted the

AP_REP message, A verifies that the timestamp is the same one it sent in the AP_REQ message. This ensures A that kAB successfully transmitted to B.


Most of protocols uses third parity, like Kerberos, are three-way communication since two entities wishing to set up a secret key do not only transmit messages to each other but also to the trusted authority. Thus, the communication energy cost of Kerberos-like protocols is much higher than the energy required for calculating cryptographic primitives [13].

Elliptic Curve Menezes–Qu–Vanstone (ECMQV) protocol

ECMQV protocol is based on Diffie–Hellman key agreement and modified to work in an arbitrary finite group and, in par- ticular, elliptic curve groups. It is an example of key exchange protocols with implicit authentication [8].
In the ECMQV protocol each entity has both a static (i.e. long-term) public/private key pair and an ephemeral (i.e. short-term) key pair. A shared secret is derived using the static keys and the ephemeral keys, which guarantees that each pro- tocol run between two entities A and B produces a different shared secret. Formally, an elliptic curve over a prime field
GF(p) can be defined by a Weierstraß Eq. (1), where a, b GF(p) and 4a3 + 27b2 „ 0 mod p [14].
y2 = x3 + ax + b	(1)
In what follows, let E be an elliptic curve group of order n, and G shall be a point on the curve. Assume that the order n is prime, which means that E is cyclic and G is a generator of E.
Also, assume the domain parameters p, a, b, n, and G are pub-
licly known to every entity of the network. Let A and B be two
entities wishing to establish a shared key. First, entity A chooses a random secret number a with 2 6 a 6 n — 2, calcu- lates S=a Æ G. Entity B also chooses a random secret number b in the range of [2, n — 2], calculates T = b Æ G. Entity A has the static key pair (a, S) which consists of a secret part (a) and a public part (S). Entity B has the static key pair (b, T) consist- ing of the secret key b and the public key T = b Æ G. The enti- ties first exchange the public part of their static keys. After that, entity A and B perform the following steps to agree on a shared secret: First, entity A generates the ephemeral key pair (c, U), whereby U = c Æ G, and entity B generates the ephemeral key pair (d, V) with V = d Æ G. They exchange the public parts of these ephemeral keys. After that, entity A

In order to derive the shared secret K, entity A and entity B have to accomplish an operation of the form k Æ P+l Æ Q (step 6 in Algorithm 1). This operation, which is called multiple point multiplication, has an impact on the overall computa- tional cost of the ECMQV key exchange. This operation can be performed much faster when the doublings are combined as shown in Algorithm 2.



Efficient combined security system

A wireless sensor network can be divided into several clus- ters. Each cluster has a number of sensors nodes and one of the nodes is elected as the coordinator (head). The head is responsible for the general mission and collecting the sensed data of other nodes and routing to the sink. For that, the head energy-consumption is higher than other nodes [16]. The energy analysis of the Kerberos protocol shown in [6] is based on the assumption that entity A can directly send/re- ceive messages to/from the third party T. This is reasonable for small sensor networks, but not for large networks where the sensor nodes may be located apart from the base station. The communication energy cost of Kerberos depends on the transmit power level and on the number of intermediary nodes between A and T. Multi-hop communication between A and T increases overall energy consumption since any intermediary node has to forward the message to its neighbor




188	N.S. Fayed et al.

















Figure 2	Hierarchical architecture for the combined system.


located on the route to the final destination. The Lightweight Kerberos protocol is more energy efficient than ECMQV when A can directly communicate with T or when at most one intermediary node lies between them. On the other hand, ECMQV requires less energy than Kerberos if there is more than one hop between A and T, which is always the case in large sensor networks. So, There is a need for system that compromise between the two protocol. That system is sup- posed to take the advantages of the two protocols and limits their shortening.
The suggested system in this paper combines the using of the protocols in the same network in the following way: the network is divided into three layers. The first layer is 1-hop layer, means the nodes in this layer can communicate directly with the base station, it contains the base station (the sink) and clusters heads. The second layer is 2-hop layer and the third one is 3-hop layer, these two layers contain the ordinary sen- sors that belong to clusters. The idea of this system is looking at the network as two networks: small network (contain layer 1) and large one (contain layer 2 and layer 3). Lightweight Kerberos protocol with short messages is applied on the small network and ECMQV protocol on the large one. When sen- sors in layer 2 want to communicate with layer 1 they will use the Lightweight Kerberos protocol with short messages. The architecture of the combined system will be as in Fig. 2.
The benefits of combining the two protocols in this system are as the following:

Benefits of using Lightweight Kerberos protocol with short messages on layer 1 and for communication between layer 1 and layer 2:
The Lightweight Kerberos protocol is more energy effi- cient when the node is within direct communication to T (in most cases the base station) which is the case in layer 1 or when at most one intermediary node lies be- tween them which is the case in layer 2.
Kerberos does not need extensive computation so, it s- ave the energy on the heads which is critical to these nodes because they are responsible for the general mis- sion, collecting the sensed data of other nodes and ro- uting to the sink.
The number of heads and their neighbors is relatively small, so the total number of Kerberos communication messages will be relatively small. So, conserving the total
energy of the network. For that, Kerberos is preferable in the small networks.

Benefits of using ECMQV protocol among sensor nodes in layers 2 and 3:
ECMQV requires less energy than Kerberos if the com- munication between the node and T passes through m- ore than one hop, which is the case in layer 3.
The sensor nodes do not do additional tasks as heads, so they have some energy to do the computation of EC- MQV protocol.
The number of nodes in the two layers is relatively large and ECMQV is reasonable for large networks.
The number of communication messages needed for this protocol is small so improve the power consumption of the network.

Using two strong protocols as Lightweight Kerberos and ECMQV will improve the network security.
Using the two protocols increase the speed of the network. This speed is drawn from:
Using Kerberos in layer 1 and for communication bet- ween layer 1 and layer 2 reduce the number of calcula- tion related to using ECMQV instead.
Using ECMQV among sensor nodes in layers 2 and 3 reduce the number of communication related to using Kerberos on this large number of sensor nodes.


All these benefits will be gained by using the combined sys- tem and the results in experimental results section support that. Unfortunately, switching between the two protocols in layer 2, using Kerberos for communication with layer 1 and ECMQV for communication among nodes in layer 2 and for communication between layer 2 and layer 3, cause some load in this layer. But comparing to the saving in the power and enhancing the security it can be used.

Experimental results

This section analyzes and compares the energy demands of Lightweight Kerberos key distribution, ECMQV and the com- bined system. The evaluation of the energy cost of crypto- graphic key establishment was conducted on a WINS sensor


Figure 3	Energy consumption of Lightweight Kerberos, ECMQV and combined system.


















node from Rockwell Scientific [17]. The motivation for using this specific sensor node is to use the same node as the authors of [6] so that can directly compare the results and also, ARM processors have a considerable market share in the embedded systems field.
The evaluation of key establishment protocols considers both the energy that the Strong ARM consumes during the execution of cryptographic algorithms and the energy cost of radio communication. The energy characteristics of the WINS node reported in [18] were used. The energy required for the calculation of cryptographic primitives is simply the product of the average power consumption and the execution time. The execution time of the cryptographic primitives was deter- mined through simulations with SimIt-ARM, a cycle-accurate instruction set simulator for the Strong ARM [19]. The com- munication energy depends on the distance between sending and receiving node and the time required for sending the mes- sage, which it is proportional to the message length and to the transmission rate. Also, the transmission of messages con- sumes energy on the sending and the receiving node.

Energy consumption of the combined system

The combined system, as described in Section 3, takes the advantages of the two protocols. The results show that the en- ergy consumption for combined system will be less than using one of the two protocols alone. Table 1 includes the energy consumption for one pair authentication. The energy con- sumption changes according to the layer of the two nodes, be- cause the applied protocol differs according to the layer. For example, if the two nodes in layer 1 the energy will be 39.6–
47.6 mJ (Kerberos energy consumption) and if they in layers 2, 3 or one node in layer 2 and the other in 3 the energy will
be 79.0–84.6 mJ. But if one node in layer 1 and other in 2 the energy will be 39.7–47.7 mJ, the applied protocol will be Kerberos but the energy increased because of switching be- tween the two protocols.
Table 2 compares the energy of the two protocols with the combined system. The results in this table show the efficiency of our combined system especially when the number of com- municating nodes increases. Column 1 is the number of the pattern, Column 2 is the number of communicating pairs, Col- umn 3 is layer where the nodes exist. At the last row, the sum- mation of the energy of all pairs, show that the energy consumption for combined system in the network is less than ECMQV and Light Kerberos.
Fig. 3 shows energy consumption of Lightweight Kerberos, ECMQV and combined system. As shown, better efficiency is achieved for the combined system. The x-axis represents the number of the pattern and the y-axis represents the energy consumption.

Conclusion

This paper presented combined security system combines Lightweight Kerberos and ECMQV Protocols. The combining system takes the benefits of the two protocols. One of system benefits is enhancing the energy consumption. Saving energy means decreasing number of communications and computa- tions, and this improve the speed of the network. Another ben- efit is, using two strong protocols as Lightweight Kerberos and ECMQV improves the network security. The experimental re- sults of the system compared with energy cost of Lightweight Kerberos and ECMQV Protocols showed that, the overall en- ergy cost of using the combined system is less that using of Lightweight Kerberos or ECMQV alone. These results are based on the energy characteristics of the WINS sensor node.

References

Akyildiz I, Su W, Sankarasubramaniam Y, Cayirci E. A survey on sensor networks. IEEE Commun Mag 2002;40(8):102–14.
Sen J. A survey on wireless sensor network security. Int J Commun Netw Inform Secur (IJCNIS) 2009;1(2).
Needham R, Schroeder M. Using encryption for authentication in large networks of computers. Commun ACM 1978;21(12):993–9.
Kohl J, Neuman B. The Kerberos network authentication service (Version 5). Internet Engineering Task Force, Networking Group, Internet Draft RFC 1510; September 1993.
Perrig A, Szewczyk R, Wen V, Culler D, Tygar J. SPINS: security protocols for sensor networks. In: Proceedings of the 7th annual

190	N.S. Fayed et al.


international conference on mobile computing and networking. ACM Press; 2001. p. 189–99.
Großsch J, Szekely A, Tillich S. The energy cost of cryptographic key establishment in wireless sensor networks. In: Proceedings of the 2nd ACM symposium on information, computer and communications security (ASIACCS 2007); 2007. p. 380–2.
Diffie W, Hellman M. New directions in cryptography. IEEE Trans Inform Theory 1976;22(6):644–54.
Law L, Menezes A, Qu M, Solinas J, Vanstone S. An efficient protocol for authenticated key agreement. Des, Codes Cryptogr 2003;28(2):119–34.
Raghavendra C, Sivalingam K, Znati T. Wireless sensor net- works. Kluwer Academic Publishers; 2004.
Singh K, Muthukkumarasamy V. Analysis of proposed key establishment protocols in multi-tiered sensor networks. J Netw 2008;3(6).
Menezes A, van Oorschot P, Vanstone S. Handbook of applied cryptography. CRC Press; 1996.
Neuman B, Theodore Ts’o. Kerberos: an authentication service for computer networks. <http://gost.isi.edu/publications/kerber- os-neuman-tso.html>; 30 March 2012.
Carman D, Kruus P, Matt B. Constraints and approaches for distributed sensor network security. Technical report #00-010, NAI Labs, Network Associates, Inc., Glenwood, MD, USA; September 2000.
Blake I, Seroussi G, Smart N. Elliptic curves in cryptography. Cambridge University Press; 1999.
Blake I, Seroussi G, Smart N. Advances in elliptic curve cryptography. Cambridge University Press; 2005.
Chen L, Lyu Z, Hong Z. An efficient cluster head selection strategy for wireless sensor network. In: Proceedings of the 5th international conference on genetic and evolutionary computing. IEEE; 2011.
Agre J, Clare L, Pottie G, Romanov N. Development platform for self-organizing wireless sensor networks. In: Unattended ground sensor technologies and applications of Proceedings of SPIE, vol. 3713. SPIE; 1999. p. 257–68.
Raghunathan V, Schurgers C, Park S, Srivastava M. Energy- aware wireless microsensor networks. IEEE Signal Process Mag 2002;19(2):40–50.
Qin W. SimIt-ARM (Release 3.0). <https://sourceforge.net/ projects/simit-arm/>; 30 March 2012.
