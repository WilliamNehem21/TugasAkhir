Available online at www.sciencedirect.com


Electronic Notes in Theoretical Computer Science 351 (2020) 143–165
www.elsevier.com/locate/entcs

A Fresh View of Linear Logic as a Logical Framework 1
Carlos Olarte2
ECT, Universidade Federal do Rio Grande do Norte

Elaine Pimentel3
DMAT, Universidade Federal do Rio Grande do Norte

Bruno Xavier4
DIMAp, Universidade Federal do Rio Grande do Norte


Abstract
One of the most fundamental properties of a proof system is analyticity, expressing the fact that a proof of a given formula F only uses subformulas of F . In sequent calculus, this property is usually proved by showing that the cut rule is admissible, i.e., the introduction of the auxiliary lemma A in the reasoning “if A follows from B and C follows from A, then C follows from B” can be eliminated. Mathematically, this means that we can inline the intermediate step A to have a direct proof of C from the hypothesis B. More importantly, the proof of cut-elimination shows that the proof of C follows directly from the axiomatic theory and B (and no external lemmas are needed). The proof of cut-elimination is usually a tedious process
through several proof transformations, thus requiring the assistance of (semi-)automatic procedures to avoid mistakes. In a previous work by Miller and Pimentel, linear logic (LL) was used as a logical framework for establishing sufficient conditions for cut-elimination of object logics (OL). The OL’s inference rules were encoded as an LL theory and an easy-to-verify criterion sufficed to establish the cut-elimination theorem for the OL at hand. Using such procedure, analyticity of logical systems such as LK (classical logic), LJ (intuitionistic logic) and substructural logics such as MALL (multiplicative additive LL) was proved within the framework. However, there are many logical systems that cannot be adequately encoded in LL, the most symptomatic cases being sequent systems for modal logics. In this paper we use a linear-nested sequent (LNS) presentation of SLL (a variant of linear logic with subexponentials) and show that it is possible to establish a cut-elimination criterion for a larger class of logical systems, including LNS proof systems for K, 4, KT, KD, S4 and the multi-conclusion LNS system for intuitionistic logic (mLJ). Impressively enough, the
sufficient conditions for cut-elimination presented here remain as simple as the one proposed by Miller and Pimentel. The key ingredient in our developments is the use of the right formalism: we adopt LNS based OL systems, instead of sequent ones. This not only provides a neat encoding procedure of OLs into SLL, but it also allows for the use of the meta-theory of SLL to establish fundamental meta-properties of the encoded OLs. We thus contribute with procedures for checking cut-elimination of several logical systems that are widely used in philosophy, mathematics and computer science.
Keywords: linear logic, cut elimination


https://doi.org/10.1016/j.entcs.2020.08.008
1571-0661/© 2020 The Author(s). Published by Elsevier B.V.
This is an open access article under the CC BY-NC-ND license (http://creativecommons.org/licenses/by-nc-nd/4.0/).

Introduction
Apart from formalizing reasoning, proof systems are important tools for analyzing structural properties of proofs, as well as their computational and meta-logical consequences. In particular, one of the main subjects of interest in proof theory is to determine when a proof system supports a notion of analytic proofs.
Analytic calculi consist solely of rules that compose the formulas to be proved in a stepwise manner. As a result, proofs from an analytic calculus satisfy the subformula property: every formula that appears (anywhere) in the proof must be a subformula of the formulas to be proved. This is a powerful restriction on the shape of proofs and can be exploited to prove important meta-logical properties of the logical system such as consistency, decidability and interpolation.
Since analyticity is a highly non-trivial and powerful property, it is natural to ask
how to construct an analytic calculus for a logic of interest; and
given a pre-existing proof system for a certain logic, how can we determine if it is analytic.
Regarding (i), the best known formalism for proposing analytic proof systems is Gentzen’s sequent calculus [7]. While its simplicity makes it an ideal tool for proving meta-logical properties, sequent systems are not expressive enough for constructing analytic calculi for many logics of interest. As a result, many new formalisms extending sequent systems have been proposed over the last 30 years, including hypersequent calculi [2], nested calculi [3, 26] and labeled calculi [28]. While such more expressive formalisms enable calculi for a broader class of logics, the greater bureaucracy makes it harder to prove meta-logical properties, such as analyticity itself. Hence the importance of answering (ii).
Since a specific logic gives rise to a specific set of rules in different calculi, it is important to determine whether there is a general methodology for determining/- analyzing meta-level properties as analyticity. This is the role of logical frameworks in proof theory, where proof systems are adequately embedded into a meta-level formal system so that object-level properties can be uniformly proven. Since logical frameworks often come with automated procedures, the meta-level machinery can be used for proving properties of the embedded systems automatically.
In sequent calculus systems, analyticity is often guaranteed by proving a prop- erty called cut-elimination, that is, the possibility of eliminating the cut rule below


Γ1 ▶ Δ1, A	A, Γ2 ▶ Δ2
Γ1, Γ2 ▶ Δ1, Δ2
cut

Intuitively, the cut rule expresses, in logic, the mathematical use of lemmas in

1 Olarte and Pimentel are funded by CNPq.
2 Email: carlos.olarte@gmail.com
3 Email: elaine.pimentel@gmail.com
4 Email: brunoxavier86@yahoo.com.br

proofs: if A follows from B and C follows from A, then C follows from B. That is, one can cut the intermediate lemma A. Cut-elimination implies that this deviation through A is not necessary. Mathematically, this means that proofs follow directly from the axiomatic theory. Computationally, it implies that systems do not have to guess lemmas. Logically, cut elimination often implies consistency.
Note that the cut rule has an inherent duality: the cut formula A is both a conclusion of a statement and a hypothesis of another. In analytic systems, this duality is often an invariant, being preserved throughout the cut-elimination pro- cess. Developing general methods for detecting such invariants enables the use of meta-level frameworks to uniformly reasoning about object-level properties.
One of such methods was developed in [17], where bipoles and the focusing proof strategy [1] in linear logic (LL) [8] were used in order to specify sequent systems and provide sufficient meta-level conditions for cut-elimination. These results were recently formalized in Coq [6]. The main idea is that, by interpreting object-level inference rules as meta-level bipoles, focusing forces a one-to-one correspondence between the application of rules and the derivation of formulas. This completely ties object-level (formulas, rules, derivations) to linear logic, thus showing that if the meta-level use of cuts in represented proofs can be eliminated then all instances of the object-level cut rule can be actually eliminated.
There are, at least, three minimum requirements for the success of logical frame- works to deal with analyticity in object-logics: (a) the spectrum of object-logics amenable for encoding should be representative; (b) an effective and uniform way of deciding the elimination of object-level cuts (based on the meta-level theory) should be stated; and (c) the encoding should be simple (if possible, even auto- matic). Otherwise, the method might be at risk of (a) not being representative; (b) simply bringing a case-by-case analysis to a more involved framework; or (c) being too complicated to be used or implemented. The main criticism of the work in [17] is (a). The reason for the lack of expressiveness is the fact that LL exponentials can only capture modal behaviors matching exactly their own. The fact that exponen- tials alone are not enough for separating different types of sequent contexts (sets, multisets or lists of formulas) is also problematic. In order to fix this last issue, in [21] the meta-logic was enhanced to support subexponentials (SELL [19]), which can be thought as linear multi-modalities organized as a poset. Intuitively, subex- ponentials separate the context into locations where encoded formulas are stored, and different order structures would give rise to different hierarchies between them. This for sure enhanced the power of the framework, but at a cost of making both the encoding and the reasoning quite intractable, thus failing (c).
But the meta-level logical system should not be the only one to blame: there are some sequent systems that simply are not adequate themselves for represent- ing a given logic. The case of modal logics is emblematic. Undoubtedly, there are sequent calculi for a number of modal logics exhibiting many good properties (such as analyticity) which can be used in complexity-optimal decision procedures. However, their construction often seems ad-hoc, they are usually not modular, and they mostly lack philosophically relevant properties such as separate left and right

introduction rules for the modalities. These problems are often connected to the fact that the modal rules in such calculi usually introduce more than one connective at a time, e.g. as in the standard presentation of the rule k for modal logic K:
  G1,..., Gn ▶ F	
2G1,..., 2Gn ▶ 2F k
This formulation is somehow dissatisfying since it modifies the context (by adding boxes to the hypothesis) and one loses the distinction between left and right rules for the modal connective box. One way of solving this problem is by considering extensions of the sequent framework that are expressive enough for capturing these modalities using separate left and right introduction rules. One of such extensions is linear nested systems (LNS) [11], where a single sequent is replaced with a list of sequents and successors of a sequent (linear nestings) are interpreted under a given modality. The modal rules of these calculi govern the transfer of (modal) formulas between the different sequents, and they are local, in the sense that it is sufficient to transfer only one formula at a time.
Interestingly enough, linear nested systems are amenable for being encoded in (plain-vanilla) LL [13,14]. The trick is to add labels to nestings and consider labeled formulas in the object-level. This has many interesting consequences, such as the possibility of building uniform linear logic based theorem provers. But still the meta- level characterization of cut-elimination invariants for LNS formalisms remains an open problem, since there is no easy way to reason about them. The bottom line is: there seems to be no simple, perfect solution for this problem.
With this in mind, in this paper we propose a hybrid approach: we will show how to combine the simplicity of LL encodings with the power of subexponentials, but in a different setting and in a very controlled way. We shall built on an LNS system for SLL, a variant of SELL where subexponentials can assume also modal axioms, other than only structural ones (see [12]). Hence the idea is not to change the meta-logic itself, but rather to change the formalism: object- and meta-logics are represented as linear nested systems (instead of sequent systems). This actually entails a smooth extension of the work in [17], since all the encodings in that work remain almost the same. And, more impressively, the (natural, simple, efficient) meta-level characterization of object-level cut-elimination in the op. cit. also remains unchanged. This provides a neater solution to the problem than the one reported in [21] (using sequent systems as formalism and subexponential LL as meta-logic), where the necessary conditions and the encodings are more involved and not all the modal logics considered here can be handled.
Organization and contributions. We start in Section 2 recalling linear nested systems and how they handle, in a modular way, different modal logical systems. Section 3 builds on [12] and propose an end-active focused system for SLL. Section 4 defines encodings for several (modal) object-logics, some of them not considered in [21] nor in [17]. The translation is natural and the proof of adequacy is immedi- ate due to the focusing discipline. The criteria for establishing cut-elimination for

object-logics are presented in Section 5. We show that such criteria can be easily checked. In this section we also present our main result showing how to eliminate the cut rule at the object-level. Section 6 concludes the paper.
Linear nested systems
In this section we present a friendly introduction to linear nested systems [11]. The main benefit of this framework is that it exhibits the essential structure to obtain modular calculi, while retaining a very close connection to the ordinary sequent framework [14].
Coming back to the rule k in the introduction, observe that it can also be seen as an infinite set of rules [29]

  G1,..., Gn ▶ F	 k
2G1,..., 2Gn ▶ 2F	n

| n ≥ 0 

each with a fixed number of principal formulas. This suggests that k could actually be replaced with two rules: one handling the right box and another dealing with the left boxes, one at a time. For being able to do that, we need a tighter control of formulas in the context, something that sequents do not provide. Hence the need for extending the notion of sequent systems.
Definition 2.1 The set LNS of linear nested sequents is given recursively by:
if Γ ▶ Δ is a sequent then Γ ▶ Δ ∈ LNS
if Γ ▶ Δ is a sequent and G ∈ LNS then Γ ▶ Δ / G ∈ LNS.
We call each sequent in a linear nested sequent a component and slightly abuse notation, abbreviating “linear nested sequent” to LNS. We shall denote by LNSL a linear nested sequent system for a logic L.	2
In words, a linear nested sequent is simply a finite list of sequents that matches exactly the history of a backwards proof search in an ordinary sequent calculus [11, 14]. We can now adequately represent the local behavior of modalities in the rule k:

G / Γ ▶ Δ / · ▶ F 2R
G / Γ ▶ Δ, 2F
G / Γ ▶ Δ / Γj,F ▶ Δj
G / Γ, 2F ▶ Δ / Γj ▶ Δj 2L

Reading bottom up, while in 2R a new nesting/component is created and F is moved
there, in 2L exactly one boxed formula moves into an existing nesting, losing its modality.
We will explore the local/linear structure of LNS in two ways: first, compo- nents have a tight connection to worlds in Kripke-like semantics, so that LNS is an adequate framework for describing the behavior of alethic modalities in certain logical systems; and second, on fragmenting information into components, rules act locally on formulas, hence often being context independent, so that the movement of formulas on derivations can be better predicted and controlled. This implies that both: we will be able to adequately specify a representative class of logical systems; and many techniques developed in [17] will remain valid in the proposed framework.



init	fL	tR
G / Γ,A ▶ A, Δ	G / Γ, f ▶ Δ	G / Γ ▶ t, Δ


G / Γ,F ▶ Δ  G / Γ,G ▶ Δ
∨L
G / Γ,F ∨ G ▶ Δ
G / Γ ▶ F, Δ


G / Γ ▶ F ∨ G, Δ

∨R1
G / Γ ▶ G, Δ


G / Γ ▶ F ∨ G, Δ

∨R2
G / Γ ▶ F, Δ G / Γ ▶ G, Δ
∧R
G / Γ ▶ F ∧ G, Δ

G / Γ,F ▶ Δ


G / Γ,F ∧ G ▶ Δ

∧L1
G / Γ,G ▶ Δ


G / Γ,F ∧ G ▶ Δ

∧L2
G / Γ1 ▶ F, Δ1  G / Γ2,G ▶ Δ2

L
G / Γ1, Γ2,F → G ▶ Δ1, Δ2
G / Γ,F ▶ G, Δ
R
G / Γ ▶ F → G, Δ



Fig. 1. Propositional rules of the system LNSG for classical logic. In the init rule, A is atomic.



G / Γ, F,F ▶ Δ
CL
G / Γ,F ▶ Δ
G / Γ ▶ F, F, Δ
CR
G / Γ ▶ F, Δ
G / Γ ▶ Δ
WL
G / Γ,F ▶ Δ
G / Γ ▶ Δ
WR
G / Γ ▶ F, Δ



Fig. 2. The structural rules of contraction and weakening.



Γ ▶ Δ / Σ,F ▶ Π Γ,F ▶ Δ / Σ ▶ Π

lift
Γ ▶ Δ//F ▶ G
⊃R
G / Γ ▶ F ⊃ G, Δ
G / Γ1 ▶ F, Δ1  G / Γ2,G ▶ Δ2
⊃L
G / Γ1, Γ2,F ⊃ G ▶ Δ1, Δ2



Fig. 3. Some rules of LNSI for propositional intuitionistic logic.

A further advantage of this framework is that it is often possible to restrict the list of sequents in a LNS to the last 2 components, that we call active.
Definition 2.2 An application of a linear nested sequent rule is end-active if the rightmost components of the premises are active and the only active components (in premise and conclusion) are the two rightmost ones. The end-active variant of a LNS calculus is the calculus with the rules restricted to end-active applications.
All the logical systems studied in [11, 12, 14] can be restricted to the end-active version. Figs. 1 and 2 present the end-active LNSG for the classical propositional connectives and the structural rules of weakening and contraction. Observe that, when restricted to classical logic, new components are never created (this reflects the fact that the Kripke structure for classical logic is flat). Hence the LNS collapses to the usual sequent system LK [7]. A more interesting case is the linear nested system for propositional intuitionistic logic. LNSI [11] is the system sharing with LNSG the axioms, structural rules and rules for conjunction and disjunction, but adding the rules for intuitionistic implication ⊃ shown in Fig. 3. Observe that, bottom-up, the rule for implication right creates a new component, adds the sequent F ▶ G there and erases the back history. The lift rule, on the other hand, moves left formulas into the next component. The consecutive application of these rules mimics, possibly in many steps, the behavior of the sequent right rule for implication in the multi- conclusion intuitionistic sequent system mLJ [16]


  Γ, F ▶ G	 ⊃R
Γ ▶ Δ,.F ⊃ G
. G
· ▶ Δ / Γ,F ▶ G
~	Γ ▶ Δ //F ▶ G lift
⊃R
G / Γ ▶ Δ,F ⊃ G

This also interprets, proof theoretically, the definition of satisfaction for intu-

Axioms:	K 2(F ⊃ G) ⊃ (2F ⊃ 2G)  D ¬(2F ∧2¬F ) T 2F ⊃ F  4 2F ⊃ 22F



Γ ▶ Δ / Σ,F ▶ Π
	 2L
Γ, 2F ▶ Δ / Σ ▶ Π
Γ ▶ Δ / ·▶ F
	 2R
G / Γ ▶ Δ, 2F
Γ ▶ Δ//F ▶· G / Γ, 2F ▶ Δ d
G / Γ,F ▶ Δ
t
G / Γ, 2F ▶ Δ
Γ ▶ Δ / Σ, 2F ▶ Π Γ, 2F ▶ Δ / Σ ▶ Π 4



Fig. 4. Some modal axioms and their linear nested sequent rules.

itionistic logic (see [24] for more details). Observe that, once all formulas in the left context are lifted, the only possible action is the application of rules in the last (right-most) component. Hence the right context Δ is forgotten. This shows an interesting dynamic in end-active systems: apply first rules that do not involve moving-between or creating-new components. After creating new components, ap- ply the lift-kind rules as much as possible. Then forget about past components and move forward, reasoning over the new components.
The possibility of having such a notion of “proof normalization” was studied in [25] in the nested systems framework. In that work, it was shown that end- active nested systems with very specific rules’ shape can be sequentialized. This implies that such nested systems correspond to well known sequent systems. In this work, we will use this result in a very pragmatic way. Namely, since some sequent systems are not adequate for specification and reasoning, we will consider the corresponding (end-active) LNS that: have the same meta-logical properties; can be easily specified; and entails easy meta-level conditions for cut-elimination.
In the present work, besides reasoning about intuitionistic and classical logics, we shall also reason about linear nested systems for some notable extensions of the normal modal logic K. Fig. 4 presents some modal axioms and the respective linear nested rules. The calculus LNSK contains the rules of LNSG together with the rules 2R and 2L. Extensions of the logic K are represented by KR, where R is the list of the respective axioms. As usual, we write S4 = KT4.

Linear logic and its variants
Linear logic (LL) [8] is a resource conscious logic, in the sense that formulas are consumed when used during proofs, unless they are marked with the exponential ? (whose dual is !). Formulas marked with ? behave classically, i.e., they can be con- tracted (duplicated) and weakened (erased) during proofs. LL connectives include the additive conjunction & and disjunction ⊕ and their multiplicative versions ⊗ and O, together with their units and the first-order quantifiers:

F, G,... ::=
|
|
|
|
|
|	|
|	|

Note that (·)⊥ (negation) has atomic scope. For an arbitrary formula F , F⊥
denotes the result of moving negation inward until it has atomic scope. We shall

refer to atomic (A) and negated atomic (A⊥) formulas as literals. The connectives in the first line denote the de Morgan dual of the connectives in the second line. Hence, for atoms A, B, the expression (⊥ & (A ⊗ (!B)))⊥ denotes 1 ⊕ (A⊥O(?B⊥)). The linear implication F —◦ G is a short hand for F⊥OG. The equivalence F ≡ G is defined as (F —◦ G)& (G —◦ F ).
The usual rules for the exponentials in LL in its one-sided sequent presentation

are

 ▶?G1, ·· · , ?Gn,F  
▶?G1, ··· , ?Gn, !F

▶ Γ,F 
!	▶ Γ, ?F

▶
▶ Γ, ?F ?W

▶ Γ, ?F, ?F
▶ Γ, ?F	?C

Note that, in order to introduce ! (this rule is usually called promotion) all the formulas must be marked with ?. Clearly, this rule is not context-independent (compare it with the rule k in the introduction). The other three rules correspond to dereliction, weakening and contraction.
In [9, 27], systems with partially local rules for LL were proposed. In [12], the end-active LNSLL system for LL was introduced, making the rule for ! local, in the sense that one does not need to check the sequent context in order to apply promotion:

▶ Γ/ ▶ F
s / ▶ Γ, !F !
▶ Γ/ ▶ Δ, ?F
▶ Γ, ?F// ▶ Δ ?

where s is an empty list of components. Note the similarities between the LNS rules
! and 2R; and ? and 4 in Fig. 4. Indeed, the work [12] exploits such similarities to propose extensions of LNSLL with subexponentials where the exponentials are decorated with labels allowing for different modal behaviors.
Since the proof of adequacy of the proposed encodings in Sec. 4 is greatly alle- viated if a focusing discipline is used, we introduce next the focused version of the LNS for linear logic with subexponentials.

Multi-modalities in linear logic and the focused system LNSFSLL
As exponentials (!, ?) in linear logic can be seen, roughly, as modalities in modal logic, subexponentials are nothing else than multi-modalities. Intuitively, this means that we can mark the exponentials with labels taken from a set £ organized in a pre-order ≤, obtaining (possibly infinitely-many) exponentials (!i, ?i for i ∈ £). Also like modal connectives, subexponentials are not canonical [4], in the sense that if i /= j then !iF /≡ !j F and ?iF /≡ ?j F . Moreover, the pre-order determines the provability relation: !bF implies !aF iff a ≤ b.
The main difference between multi-modalities and subexponentials is that the
last carries the possibility of having different structural behaviors, being unbounded (or classical) if weakening and contraction are allowed or bounded otherwise (thus having a linear behavior).
This opened a venue for proposing different multi-modal substructural logical systems, that encountered a number of different applications e.g. in the specification and verification of concurrent systems [20], biological systems [22], applications in



Negative rules:

▶ Θ; Γ ⇑ T,L T
▶ Θ; Γ ⇑ L
▶ Θ; Γ ⇑ ⊥,L ⊥
▶ Θ; Γ ⇑ F, G, L
O
▶ Θ; Γ ⇑ F OG, L
▶ Θ; Γ,S ⇑ L
▶ Θ; Γ ⇑ S, L store

▶ Θ; Γ ⇑ F, L  ▶ Θ; Γ ⇑ G, L
▶ Θ; Γ ⇑ F & G, L	&
▶ Θ; Γ ⇑ F [y/x],L 
▶ Θ; Γ ⇑ ∀x.F, L  ∀
▶ Θ,i : F ;Γ ⇑ L
storec
▶ Θ; Γ ⇑ ?iF, L



▶ Θ; Γ1 ⇓ F  ▶ Θ; Γ2 ⇓ G	▶ Θ; Γ ⇓ Fi
⊗	⊕


Positive rules:
▶ Θ; Γ1, Γ2 ⇓ F ⊗ G
▶ Θ; Γ ⇓ F [t/x]
▶ Θ; Γ ⇓ F1 ⊕ F2	i

▶ Θ; Γ ⇓ ∃x.F  ∃	▶ Θ; ·⇓ 1 1



Id, Decide and Release:
Il
▶ Θ; A ⇓ A⊥


▶ Θ,i : A; ·⇓ A⊥
Ic	▶ Θ; Γ ⇓ P  D
▶ Θ; Γ,P ⇑·  l
▶ Θ,i : Pa;Γ ⇓ Pa
▶ Θ,i : Pa;Γ ⇑·  Dc
▶ Θ; Γ ⇑ N
▶ Θ; Γ ⇓ N Rn





▶ Θ,j : F ; ·⇑· /i ▶ Υ; ·⇑ L, F


▶ Θ,j : F ; ·⇑· /i ▶ Υ; ·⇑ L
?ik (for i ≤ j)





Subexponentials:
▶ Θ,j : F ;Γ ⇑· /i ▶ Υ,j : F ; ·⇑ L


▶ Θ,j : F ;Γ ⇑· /i ▶ Υ; ·⇑ L

▶ Θ,i : F ; ·⇑ · /i ▶ ·; ·⇑ F

?i4 (for i ≤ j and 4 ∈ U (j))

▶ Θ,i : F ; ·⇑·	Dd (for D ∈ U (i))


▶ Θ; ·⇑ · /i ▶ ·; ·⇑ F
▶ Θ; ·⇓ !iF	!
▶ Θ; ·⇑ L
Rr
▶ Υ; ·⇑ ·/i ▶ Θ; ·⇑ L



Fig. 5. End-active focused system LNSFSLL. In Ic and Il, A is an atom. In ∀, y is fresh. In store, S is a literal or a positive formula. In Dc, Pa is not atomic and in Dl, P is a positive formula. In Rn, N is a negative formula. In Dc and Ic, T ∈ U (i).


linguistics [10], and the specification of systems with multiple contexts, which may be represented by sets or multisets of formulas [21].
In [12] we extended the concept of simply dependent multimodal logics [5] (SDML) to the substructural case, where subexponentials considered not only the structural axioms for contraction and weakening, but also axioms for modalities
{K, 4, D, T} (see Fig. 4) for the subexponentials. This means that ?i can behave classically or not, but also with exponential behaviors different from those in LL. Hence, by assigning different modal axioms one obtains, in a modular way, a class of different substructural modal logics. For instance, subexponentials assuming T allow for dereliction, those assuming 4 are persistent (while those assuming only K are not) and D forbids both persistency and dereliction – in fact, substructural KD can be seen as a fragment of light linear logic LLL [9].
We consider here only classical versions of SDML, that we call SLL, where subex- ponentials are unbounded. Although this is not a necessary restriction, it is enough for specifying the classical based systems considered in this paper, and it simplifies the notation of the resulting system.

Definition 3.1 The SLL subexponential signature is given by Σ = ⟨£, ≤, U(i)⟩, where £ is a set of unbounded labels, U(i) represent the set of axioms within
{K, 4, D, T} that the subexponential ?i ∈ £ assumes, and ≤ is a pre-order among the elements of £ that is upwardly closed with respect to U(i), i.e., if A ∈ U(i) and i ≤ j, then A ∈ U(j).

The proof system for SLL is constructed by adding all the rules for the linear logic connectives except for the exponentials. The rules for subexponentials are added according to the subexponential signature Σ. We will present next the focused variant of the linear nested system for SLL.
Focusing [1] is a discipline on proofs aiming at reducing non-determinism during proof search. Focusing in LL based systems is grounded on two kinds of separations:
(i) classical/linear behaving formulas and (ii) invertible/non invertible introduction rules.
For, (i), observe that it is possible to incorporate the structural rules of con- traction and weakening for formulas of the shape ?F into the LL introduction rules. This is reflected into the syntax in the so called dyadic sequents where the context is split into two: a classical (set of formulas Θ) and a linear (multiset of formulas Γ). The dyadic sequent ▶ Θ : Γ is then interpreted as the linear logic sequent
▶ ?Θ, Γ where ?Θ = {?F | F ∈ Θ}. This can be easily generalized to the case of the
subexponentials: the classical context is a partition Θ = {i : Θi | i ∈ £}, and the dyadic sequent ▶ (i : Θi)i∈S : Γ is interpreted as the (subexponential) linear logic sequent ▶ (?iΘi)i∈S , Γ.
For (ii), it turns out that proofs can be organized in two alternating phases: the
negative phase containing only invertible rules, and the positive phase contains only non-invertible rules. The connectives O, ⊥, &, T, ?i, ∀ have invertible introduction rules and are thus classified as negative. The remaining connectives ⊗, 1, ⊕, 0, !i, ∃ are positive. Formulas inherit their polarity according to their main connective, e.g., F ⊗ G is positive and F OG is negative. Although the bias assigned to atoms does not interfere with provability [18], here we follow Andreoli’s convention of classifying atomic formulas as negative, thus negated atoms as positive.
In the focused system LNSFSLL (Fig. 5), dyadic (linear nested) sequents are further refined, so to reflect not only the negative/positive proof phases described above, but also the behavior of the promotion rule:
▶ Θ; Γ ⇑ L belongs to the negative phase. During this phase, all negative formulas in the list L are introduced and all positive formulas and literals are moved to the linear context Γ.
▶ Θ; Γ ⇓ F belongs to the positive phase, where all positive connectives at the root of F are introduced.
G /i ▶ Θ; Γ ⇑ F belongs to the exponential phase. During this phase, only applications of the rules for ?i are allowed, ending with an application of Rr.
Reading the rules bottom-up, the ones belonging to the negative phase pick the first formula F on the list L. Negative formulas are eagerly decomposed, while literals and positive formulas are stored into the linear context, as shown in the left

derivation below.


▶ ·; A, F ⊕ !iA ⇑· 

⊥	▶ ·; ·⇑ A, F ⊕ !iA

2 × store

▶ Θ,i : B; Γ,F ⊗ G, A
⇑ L
store
i	i	i	Rr

c
▶ Θ; Γ,F ⊗ G, A⊥ ⇑ ?iB, L
▶ Θ,j : F ⊕ ! A; ·⇑ · / ▶ ·; ·⇑ A, F ⊕ ! A
i



▶ Θ; Γ ⇑ F ⊗ G, A⊥, ?iB, L


▶ Θ; Γ ⇑ (F ⊗ G)OA⊥, ?iB, L
2 × store
O
▶ Θ,j : F ⊕ !iA; ·⇑ · /i ▶ ·; ·⇑ A	? k
!i
▶ Θ,j : F ⊕ ! A; ·⇓ ! A
▶ Θ,j : F ⊕ !iA; ·⇓ F ⊕ !iA ⊕2
▶ Θ,j : F ⊕ !iA; ·⇑·	Dc
(1)

The negative phase ends when the list L is empty. Then the proof moves to an exponential phase by the application of the rule Dd, or a positive phase by focusing on a formula F via the deciding rules Dl and Dc (note that F can never be atomic). In Dl, F should be a positive formula taken from the linear context (and thus erased from it). In Dc, a copy of F is taken from the classical context, thus making an implicit contraction and a dereliction. Since we are considering only unbounded subexponentials, contraction is not a problem. However, in order to derelict ?iF , it should be the case that T ∈ U(i) – this is the side condition in the caption of Fig. 5. Once we focus on a formula, the proof follows by applying positive rules, where the focus persists on the decomposed subformulas until either: a negative formula is reached (and the positive phase ends with the application of Rn); or a banged formula is derived, which creates a new component and triggers an exponential phase execution. At this point, only the rules for ?i, moving formulas between components, are allowed. When this moving is over, the exponential phase (and the positive phase) ends with an application of the rule Rr, starting again a negative phase. See the right derivation in Equation (1), where we assume that A is atomic, T ∈ U(j) and i ≤ j.
The proof ends with applications of the initial axioms at the leaves. For an atom A, the proof of ▶ Θ; Γ ⇓ A⊥ must finish immediately with the rule Ic (and the atomic proposition A must be in a context i s.t. T ∈ U(i)) or the rule Il (and the linear context is the singleton {A}). This behavior will be fundamental to understanding the specifications described later. Note the implicit weakening of the (classical) context Θ on the leaves.
In our encodings, we shall consider the following set of labels:  £  =
{l, c, k, t, d, 4, td, t4, d4}. We assume that U(l) = {T}, K ∈ U(i) for all i /= l (hence the rule ?ik can be applied for all subexponentials but l), U(c)= {K, T, 4, D}, and all the other labels assume the axioms represented by the same letter, e.g. U(t4) = {K, T, 4}. Hence, for instance, !t4 has the same behavior as the box modal- ity in the modal logic S4. Not surprisingly, but interesting enough, t4 will also be used for the specification of the intuitionistic implication.
Finally, we will set the following subexponential order ≤ for £: l is not related to any other label, and i ≤ j iff U(i) ⊆ U(j). The idea is that l will be the local subexponential, that will allow for weakening and contraction within a component, that is, in a sequent only. The other subexponentials in £ allow moving information

between components, that is, in different sequents. This flow of information is then regulated using the order, where greater subexponentials can move formulas to smaller ones.
The following derivation shows that the axiom 4 is provable using the subexpo- nential 4.
▶ ·; A ⇓ A⊥ ll
▶ ·; A⊥,A ⇑ · Dl
▶ ·; · ⇑ ·/4 ▶ ·; · ⇑ A⊥,A Rr, store

▶ 4: A⊥; · ⇑ !4A
store, Dl, !4, ?4k

▶ 4: A⊥; · ⇑ ·/4 ▶ 4: A⊥; · ⇑ !4A Rr

▶ 4: A⊥; · ⇑ ·/4 ▶ ·; · ⇑ !4A
?44

▶ 4: A⊥; · ⇓ !4!4A	!
▶ 4: A⊥; !4!4A ⇑ · Dl
▶ ·; · ⇑ ?4A⊥, !4!4A storec, store
▶ ·; · ⇑ ?4A⊥O!4!4A O
The proof involves three components: the initial sequent and the other two created using the !4 rule. The information A⊥ is first passed from the 1st to the 2nd components through the classical contexts via rule ?44, then to the linear context into the 3rd component via rule ?4k. All the other axioms in Fig. 4 are proven similarly, using the correspondent subexponential.
Specifying LNS
In this section we shall encode the logical rules of LNS systems as SLL theories. We shall also prove that such specification is adequate in the sense that an object logic (OL) sequent S is provable iff the encoding of S together with the resulting theory of the OL’s rules is also provable in LNSSFLL. See [17, 19] for a further discussion about the level of adequacy that can be achieved with this kind of LL specifications. In [17], LL was used as a logical framework for specifying a number of logical systems. Here we shall proceed similarly but building on SLL. The idea is to use two predicates [·♩ and [·| for identifying objects that appear on the left or on the right side, respectively, of the sequents in the OL. Hence, for instance, object-level sequents of the form B1,..., Bn ▶ C1,..., Cm (where n, m ≥ 0) are specified as the multiset of atomic SLL formulas [B1♩,..., [Bn♩, [C1|,..., [Cm|. As a mnemonic, formulas on the (L)eft side of object-level sequents are encoded with the predicate starting with [. In the following, given a set of OL formulas Γ, we shall use [Γ♩ to
denote the set of SLL formulas {[F ♩ | F ∈ Γ}. Similarly for [Γ|.
Inference rules of the OL are specified as rewriting clauses that replace the active formula in the conclusion of the rule by the resulting formulas in the premises. The linear logic connectives indicate how these object-level formulas are connected: contexts are copied (&) or split (⊗), in different inference rules (⊕) or in the same sequent (O).  Such specification clauses will be members of a theory TL of the


Fig. 6. Encoding of propositional rules of the system LNSG for classical logic. In all the specification clauses, there is an implicit existential quantification on A and B.

specified rules in SLL of the logical system L. Theories will be stored with the subexponential c. Note that i ≤ c for any i ∈ £. Hence, the formulas in TL can be copied/moved to any component.
As an example, consider the rules ∧L1, ∧L2 and ∧R for conjunction in Fig. 1. Following the method shown in [17], these rules yield the following SLL clauses (present in Fig. 6)
∧L : ∃F, G.([F ∧ G♩⊥ ⊗ ([F ♩⊕ [G♩))	∧R : ∃F, G.([F ∧ G|⊥ ⊗ ([F | & [G|))
If we decide to focus on the clause ∧L from the theory TG, there is only one possible course of action, where I = Il or I = Ic, accordingly
▶ Θ,c : TG; Γ2, [F ♩ ⇑ · 

▶ Θ,c : T
;Γ ⇓ [F ♩  Rn, store

I
▶ Θ,c : TG; , Γ1 ⇓ [F ∧ G♩⊥
	G	2	 ⊕1
▶ Θ,c : TG; Γ2 ⇓ [F ♩⊕ [G♩

∃, ∃, ⊗
▶ Θ,c : T ;Γ , Γ ⇓ ∃F, G.([F ∧ G♩⊥ ⊗ ([F ♩⊕ [G♩))
	G	1	2	 D
▶ Θ,c : TG; Γ1, Γ2 ⇑ ·	c
with Γ1 = [F ∧ G♩, or Γ1 = ∅ and [F ∧ G♩ ∈ Θ. Bottom-up, the active formula F ∧ G is taken from the linear or the classical context and the whole positive phase (after the resulting negative phase) ends by storing the atom [F ♩ into the linear context. This derivation mimics exactly an application of the rule ∧L1 at the object level. Similarly, if instead of ⊕1 we apply ⊕2, the atom [G♩ is stored, thus reflecting the behavior of ∧L2.
If we do the same exercise with ∧R, the derivation ends up with two premises
corresponding exactly to the two premises of the rule ∧R


▶ Θ,c : T ;Γ ⇓ [F ∧ G|⊥ I
▶ Θ,c : TG; Γ2, [F |⇑·  ▶ Θ,c : TG; Γ2, [G|⇑· 
Rn, &, store
▶ Θ,c : T ;Γ ⇓ ([F | & [G|)

G  1	G 2
∃, ∃⊗

▶ Θ,c : TG; Γ1, Γ2 ⇓ ∃F, G.([F ∧ G|⊥ ⊗ ([F | & [G|))
▶ Θ,c : T ; Γ1, Γ2 ⇑·	Dc

Moreover, focusing on the initial clause (see Figure 6) implies finishing the proof (by showing that F is on the left and on the right of the OL sequent)


I
▶ Θ,c : TG; Γ1 ⇓ [F |⊥	▶ Θ,c : T
I
; Γ2 ⇓ [F ♩⊥

∃, ⊗
▶ Θ,c : T ;Γ , Γ ⇓ ∃F.[F ♩⊥ ⊗ [F |⊥
	G	1	2	 D
▶ Θ,c : TG; Γ1, Γ2 ⇑ ·	c



posi : [A♩⊥ ⊗ (?i[A♩)	negi : [A|⊥ ⊗ (?i[A|)

Fig. 7. Encoding of the structural rules.


Intuitionistic implication:	⊃L: [A ⊃ B♩⊥ ⊗ ([A|⊗ [B♩)	⊃R: [A ⊃ B|⊥ ⊗ !t4([A♩O[B|)

Modal rules:	2Li : [2A♩⊥ ⊗ ?i[A♩	2Ri : [2A|⊥ ⊗ !i[A|

Fig. 8. Encoding of intuitionistic implication rules and modal rules.
Regarding the structural rules of weakening and contraction, it may be the case that an OL admits some of them on the left, right or both sides of the sequent. We mimic those behaviors by adding the structural rules in Fig. 7 according to each case. For instance, if posi (weakening/contraction for the left context of the OL sequent) is in TL, we can prove the equivalence [F ♩ ≡ ?i[F ♩. Hence, under the presence of posi, we are free to do contraction on atoms of the form [F ♩. Similarly for negi and right formulas. Observe that posi and negi are parametric w.r.t. the subexponential label. Hence, for example, if i = l, then the use of such clauses is restricted to a component (recall that l ∈ £ is meant to be the local, one component, subexponential).
The adequacy of the specification of LNSG is the same as showed in [17], since this LNS system coincides with the usual sequent system LK.
Theorem 4.1 Let TG consist of the set of the speciﬁcation clauses in Figs. 6 to- gether with the structural rules posi and negi where T ∈ U(i). Then TG is adequate
w.r.t. LNSG.
Let us move our attention to the intuitionistic case. In [30] we mechanized such an adequacy result [17] for the specification of the sequent system LJ of propositional intuitionistic logic [7], and in [21] we considered the multi-conclusion intuitionistic system mLJ [16]. In the LNS case, observe that the inference rules of LNSI are the same as those of LNSG with the exception of the rules for implication, which are depicted in Fig. 8.
Theorem 4.2 Let TI contain post4, negl plus the introduction clauses of TG with the clauses for implication substituted by the clauses in Fig. 8. Then TI is adequate
w.r.t. LNSI.
Proof. Observe that post4 moves left formulas from the linear context to the context
t4

▶ Θ,c : T ; [G♩ ⇓ [G♩⊥ Il
▶ Θ,c : TI, t4: [G♩;Γ ⇑ · 
▶ Θ,c : T ;Γ ⇓ ?t4[G♩	Rn, storec

▶ Θ,c : T ; [G♩, Γ ⇓ ∃F.([F ♩⊥ ⊗ ?t4[F ♩)	∃, ⊗
	I	 Dc
▶ Θ,c : TI; [G♩, Γ ⇑ · 
Similarly, negl moves right formulas from the linear context to the (unbounded,

local) context l. Hence we may always assume that the linear context is empty when applying a decide rule. This fact is actually not needed, but it simplifies the present proof.
Now, regarding implication, consider the following derivation
▶ Θ(t4),c : TI; [A♩, [B|⇑· 
▶ Θ,c : T ; ·⇑ ·/t4 ▶ Θ(t4),c : T ; ·⇑ [A♩O[B| Rr , O, 2 × store
I	I
?t44

⊥ Ic
▶ Θ,c : TI; ·⇑ ·/t4 ▶ ·; ·⇑ [A♩O[B|

t4
!t4

▶ Θ,c : TI; ·⇓ [A ⊃ B|
▶ Θ,c : TI; ·⇓ !
([A♩O[B|)
∃, ∃, ⊗

▶ Θ,c : TI; ·⇓ ∃F, G.([F ⊃ G|⊥ ⊗ !t4([F ♩O[G|)
▶ Θ,c : T ; ·⇑·	Dc
Observe that Θ(l) contains all the right formulas (that will be “forgotten”) while Θ(t4) contains all the left formulas (that will be carried over the components). Hence this derivation is adequate w.r.t. the implication in LNSI. The other cases are similar to the case for LNSG. As a final remark, note that, since t4 ≤ c, the theory TI always move between components.	2
Let us now move to the modal case. The (parameterized) clauses specifying the rules for box are given in Fig. 8. The theory T2i for the modal logic resulting from extending K with the axioms in the list i is given by the clauses of TG (Fig. 6) plus the clauses negl and posl (Fig. 7 ) and the clauses 2Li and 2Ri (Fig. 8). For example, T2t4 = TG ∪ {negl, posl}∪ {2Lt4, 2Rt4}.
Theorem 4.3 T2i is adequate w.r.t. LNSKi.
Proof. The proof follows more or less the script from the intuitionistic case. Con- sider the following derivation.
▶ Θ(4),c : T2i; [A| ⇑ Θ(k)

▶ Θ,c : T
; · ⇑ ·/i ▶ Θ(4),c : T
Rr, store
; · ⇑ [A|, Θ(k)

	2i	2i	 ?i
▶ Θ,c : T2i; · ⇑ ·/i ▶ ·; · ⇑ [A|
4, ?ik

▶ Θ,c : T2i; · ⇓ [2A|
⊥ Ic
▶ Θ,c : T2i; · ⇓ !i[A|	!

▶ Θ,c : T2i
; · ⇓ ∃F.([2F |⊥ ⊗ !i[F |)	∃, ⊗
D

▶ Θ,c : T2i; · ⇑ ·	c
Observe that Θ(j | i /≤ j) contains all the right formulas, together with all the left formulas in contexts not related to i (that will be “forgotten”); Θ(4) contains all the formulas in Θ(j) s.t. 4 ∈ U(j) and Θ(k) contains the other formulas. Hence this derivation is adequate w.r.t. the 2 in LNSKi.	2
It is worth noticing the modularity of the encodings: all the modal systems have exactly the same encoding, only differing on the meta-level modality. This is a direct consequence of locality, granted by LNS. Therefore, we are able to spot the core characteristics of the logical systems, allowing punctual actions to be taken at the meta-level. We will profit from this widely in the next section.
We finish this section by observing that the adequacy does not reach its

strongest possible level, as it is the case for the rules in TG, where one focused step mimics exactly a rule application. The reason is that the search space in LNS systems is often greater than in sequent systems [14]. Hence, for example, there are no focused meta-level steps that correspond to the following valid derivation in LNSI
· ▶ G//F, C ▶ A
F ▶ G//C ▶ A lift
∨R1
F ▶ G//C ▶ (A ∨ B) ⊃
F ▶ G, C ⊃ (A ∨ B)	R
However, the sequentialization result in [25] implies that, restricted to LNS nor- mal proofs, the adequacy is achieved on its highest level. Since the results of the present paper do not depend on that, we will avoid such a discussion.

Cut-elimination for object logics
In this section we give a sufficient condition, cut-coherence, for an LNS logical system to have cut-elimination. For that, we rely on the meta-theory of SLL. Since test- ing cut-coherency is straightforward (see e.g., the proof of Theorem 5.5), LNSFSLL becomes a suitable logical framework for proving analyticity for a large class of sys- tems, including several well known modal logical systems. We start by setting some requirements that OL systems should comply in order to be amenable for the SLL specification.
Requirement 5.1 (OL Syntax) We assume that object logic’s formulas are built inductively from a set of atomic propositions A and a set of connectives C. We shall use |F | to denote the (size) number of connectives and atomic propositions in the formula F.
For instance, in the modal logic K, C = {t, f, ∧, ∨, →, 2} and |2A| =1 + |A|. Definition 5.1 (Canonical-bipoles) A SLL formula is a bipole [1] if no positive connective is in the scope of a negative one, bangs have negative scope while question
marks have atomic scope. A SLL formula F is a canonical-bipole if F is a bipole built from SLL connectives and atomic formulas of the shape [A|, [A♩ where A is an OL formula.
Observe that all the clauses introducing connectives in Figs. 6, 7, 8 have the shape
∃F.(H⊥ ⊗ B), where H is atomic and B a canonical-bipole, e.g. ∃A, B.([A ⊃ B|⊥ ⊗ !t4([A♩O[B|)) and ∃A.([2A♩⊥ ⊗ ?i[A♩).  As seen in Section 4, focusing on this kind of formulas produces specific and controlled shapes of derivations in LNSFSLL.
In the following, we require that clauses encoding OL introduction rules have exactly the shape mentioned above.
Requirement 5.2 (Canonical theories and encodings) Let C be the set of connectives of the object logic L. The encoding of L as an SLL theory is a pair of functions B[| · ♩| and B[| · || from C to SLL canonical-bipoles. The encoding of left and

right introduction rules for a given n-ary connective  ∈ C is deﬁned as, respectively
E[| ♩| = ∃F1, ..., Fn.([ (F1, ..., Fn)♩⊥⊗B[| ♩| )  E[| || = ∃F1, ..., Fn.([ (F1, ..., Fn)|⊥⊗B[| || )
The canonical theory for L is the least set TL s.t. (1) for each ∈ C, E[| ♩| , E[| || ∈ TL;
(2) posi, negj may belong to TL for some subexponentials i, j; and (3) init ∈ TL (see Fig 7).
In words, TL includes the encoding of left and right introduction rules as well as the initial rule, and it may include the encoding of the structural rules of weakening and contraction.
Encoded inference rules determine completely the shape of meta-level deriva- tions. In fact, focusing on R = ∃F.H⊥ ⊗ B necessarily produces an open derivation of the form
Π
▶ Θ; Γj ⇓ B
▶ Θ; Γ ⇓ R ∃, ⊗, I
where H ∈ Θ and Γ = Γj or Γ = H, Γj. Regarding Π:
(B1) it finishes with one of the rules T or 1 (with no additional premises); or
(B2) the positive phase ends with negative/exponential phases with leaves of the shape
▶ Θ, Υ1; Γj , Ψ1 ⇑ ·	· · ·	▶ Θ, Υn; Γj , Ψn ⇑ ·	· · ·

(B2-A)
	1	n	
▶ Θ; Γj ⇓ B





(B2-B)
... 
...	▶ Θ(4), Υ(4); ΓF , Θ(k), Υ(k) ⇑ · 
▶ Θ(4), Υ(4); · ⇑ F, Θ(k), Υ(k)

▶ Θ, Υ; · ⇑ ·/i ▶ ·; · ⇓ !F
▶ Θ; Γj ⇓ B

Fact 5.2 Contexts in the leaves of Π can only: shorten; and/or expand with atomic subformulas of B.
It is well known that bipoles are totally decomposed into its atomic components during a focused phase (please refer to, e.g., [17] or [21] for the proof). Hence, Ψi, Υi, Υ contain only atomic subformulas of B. In (B2-A), Γj is split (multiplicative case) or shared (additive case) on the premises (Γj). In (B2-B), Θ(4), Υ(4) contain all the formulas in Θ(j), Υ(j) s.t. 4 ∈ U(j), Θ(k), Υ(k) contain (atomic) formulas in Θ(j) s.t. i ≤ j and ΓF contains only atomic subformulas of F .
The case (B1) embodies, e.g., the encoding of falsity (f), while the case (B2-A)
reflects the encoding of the introduction rules for the connectives ∧, ∨ and → in Fig. 6. The case (B2-B) typifies rules like 2R and ⊃R in Fig. 8. The reader may compare the derivations in the previous section with the above cases. It is easy to see that the resulting bipoles in each of the presented encodings falls unequivocally on one of these cases.
Finally, in order to guarantee that the encoding actually reflects the specified OL, we need the following requirement. Such adequacy results were already proved

in Section 4 for the logics studied here.
Requirement 5.3 (Adequacy) Let TL be the canonical theory for the OL L. We assume that the OL sequent Γ ▶ Δ is provable in L iff the sequent ▶ c : TL; [Γ♩, [Δ| ⇑ 
· is provable in LNSFSLL.

Cut-coherence and cut-elimination
The OL cut-rule can be specified as the bipole cut = ∃F.([F ♩ ⊗ [F |). In fact, focusing on that formula mimics exactly the behavior of the cut-rule at the object level:


Γ1 ▶ Δ1, F	Γ2, F ▶ Δ2
Γ1, Γ2 ▶ Δ1, Δ2
cut	⇐⇒

▶ c : cut; [Γ1♩, [Δ1|, [F | ⇑ ·	▶ c : cut; [Γ2♩, [F ♩, [Δ2| ⇑ · 
▶ c : cut; [Γ ♩, [Γ ♩, [Δ |, [Δ | ⇓ cut	∃, ⊗, Rn, store
1	2	1	2	D
▶ c : cut; [Γ1♩, [Γ2♩, [Δ1|, [Δ2| ⇑ ·	c
We shall use cutn to denote the rule cut applied to (OL) formulas of size strictly smaller than n. For instance, if G = G1 G2, a valid application of cut|G| can instantiate the existentially quantifier variable F in cut with either G1 or G2 (but not with G).
Using the formulas cut and init, we can prove that [·♩ and [·| are duals .
Fact 5.3 ( [17]) The following sequent is provable in LNSFSLL: ▶ c : cut,c : init; ⇑ [F ♩ ≡ [F |⊥.
This duality can be tailored to the right and left bodies (see Requirement 5.2) of OL’s rules as well.
Definition 5.4 (Cut-coherence) Let TL be the canonical theory of the OL L. We say that TL is cut-coherent if, for each connective ∈ C, the sequent below is provable
▶ c : cut|F |; ⇑ ∀F1, ..., Fn.((B[| ♩| )⊥O(B[|  || )⊥)
Theorem 5.5 All the encodings in Section 4 are cut-coherent.
Proof. Let us show some cases. The following two derivations show the cut- coherence for ⊃ in the system LNSI and also for 2 in the logic K (see Fig. 8). In order to simplify the notation, we use cutA to denote the derivation resulting after focusing on the instance of cut = ∃F.([F ♩⊗ [F |) with the subformula A (thus using the rules for ∃, ⊗ and I).

▶ c : cut, t4: [A♩⊥ ⊗ [B|⊥; [A♩, [B|⇑· Dc, ⊗, Il
cutA, cutB

▶ c : cut, t4: [A♩⊥ ⊗ [B|⊥; [A|⊥, [B♩⊥ ⇑· 


▶ c : cut; ·⇑ [A|⊥O[B♩⊥, ?t4([A♩⊥ ⊗ [B|⊥)
O, ?


∀, O

▶ c : cut; ·⇑ ∀A, B.([A|⊗ [B♩)⊥O((!t4([A♩O[B|))⊥)


▶ c : cut; [A|⊥, [A|⇑· Dl, Il
cutA

▶ c : cut; [A♩⊥, [A|⊥ ⇑· 


▶ c : cut; ·⇑ [A♩⊥, [A|⊥
store

▶ c : cut,k : [A|⊥; ·⇑ ·/k ▶ c : cut; ·⇑ [A♩⊥, [A|⊥ Rr
?k, ?c
▶ c : cut,k : [A|⊥; ·⇑ ·/k ▶ ·; ·⇑ [A♩⊥

▶ c : cut,k : [A|⊥
; ·⇓ !k[A♩
⊥	!k

▶ c : cut,k : [A|⊥; !k[A♩⊥ ⇑· Dl
▶ c : cut; ·⇑ ∀A.(([2A♩⊥ ⊗ ?k[A♩)⊥O([2A|⊥ ⊗ !k[A|)⊥)
The cases for the other modal rules are similar (using the appropriate subexpo- nential). Note that in the case of constants/units, the rule cut cannot be used (since for a constant a, |a| = 1 and there are no OL formulas of size 0). This reflects the intuition that the cut-elimination procedure for constants cannot rely on induction on subformulas of that connective. Consider the unit f that only has a left rule (Fig. 6). Hence, the right rule is specified as [f♩⊥ ⊗ 0 (there is no introduction rule for 0 in LL). Note that T⊥ = 0 and then, the bodies of those rules are indeed cut-coherent (but cut is not needed in that proof).	2
Now we are ready to state the main result: given two cut-free proofs (from the object-level point of view, using only the theory TL) introducing the cut formula F , it is possible to prove the same sequent using the rule cut (at the object-level) with strict subformulas of F (cut|F |).
Theorem 5.6 Let TL be the theory of a given OL L and Γ, Δ, Ψ be multisets of atoms of the form [·| and [·♩. If the sequents ▶ c : TL, Γ; Δ ⇓ [F ♩ and ▶ c : TL, Γ; Ψ ⇓ [F | are both provable then the sequent ▶ c : TL,c : cut|F |, Γ; Δ, Ψ ⇑ · is also provable.
Proof. We know that both ▶ c : TL, Γ; Δ, [F ♩ ⇑ and ▶ c : TL, Γ; Ψ, [F | ⇑ are provable (since focusing is lost in both [F ♩ and [F |). Call these proofs [Σ] and [Π]. Since Γ, Δ, Ψ only contain atoms that cannot get focus, the proof of such sequents must start with an application of the decision rule on one of the formulas in TL. We proceed by induction on the height of the derivations [Σ] and [Π]. We have several cases.
Non-principal cases. If [Σ] starts with a right rule we have 3 cases. Note that [F ♩ (a left atom) cannot be the head of that rule. The case (B1) is trivial. The case (B2-A) follows by induction. Consider for instance a derivation with only two premises. Note that [F ♩ can go to one or both premises depending whether a multiplicative or an additive connective is used. Here we consider the multiplicative case. The reduction is:


[Ξ]
[Ξ′]
▶ c : TL, Γ; Ψ, Δ1 ⇑ ·  ▶ c : TL, Γ; Δ2 ⇑· 

▶ c : TL, Γ; Δ1, [F ♩⇑·  ▶ c : TL, Γ; Δ2 ⇑· ~

▶ c : TL
, Γ, cut

|F|
; Δ, Ψ ⇓ E[| ٨ ||

▶ TL, Γ; Δ, [F ♩⇓ E[| ٨ ||
▶ c : TL
, Γ, cut
|F|
; Δ, Ψ ⇑· 

Derivation [Ξj] results from induction on [Ξ] and [Π]. The case of a left premise on the presence of [F | is similar. Now consider the case (B2-B) and the following derivation
[?]
▶ c : TL, Γ; [F ♩ ⇑ ·/ ▶ c : TL, Γj; Γjj ⇑ · 
▶ c : TL, Γ; [F ♩ ⇓ B[| ||
Since rule Rr requires the linear context to be empty, this derivation cannot actually happen. Hence, [F ♩ cannot be principal if a creation rule is applied: it must be moved before the application of the rule to the classical context (using pos) to be later “erased” in the penultimate component.
There are also non-principal cases where a left rule is applied but [F ♩ is not principal (similar for right rules and [F |). The procedure is similar to the one described above.
Principal cases. Now consider the case where [F ♩ and [F | are principal in both premises thus using, respectively, the left and right introduction rules for the same connective. This case is solved by using weakening, cut-coherence and the cut-rule of linear logic:


▶ c : TL, Γ; Δ ⇓ B[| ٨ ♩|


if	▶ c : TL, Γ; Δ, [F ♩⇓ E[| ٨ ♩|
▶ c : TL, Γ; Δ, [F ♩⇑· 

and
▶ c : TL, Γ; Ψ ⇓ B[| ٨ ||


▶ c : TL, Γ; Ψ, [F |⇓ E[| ٨ ||
▶ c : TL, Γ; Ψ, [F |⇑· 

then



▶ c : TL
, Γ; Δ ⇓ B[| ٨ ♩|
▶ c : TL
, Γ,c : cut|F|
; ·⇑ (B[| ٨ || )⊥, (B[| ٨ ♩| )⊥ cut-coherence
FSLL − cut

▶ c : TL, Γ; Ψ ⇓ B[| ٨ ||
▶ c : TL, Γ,c : cut|F|;Δ ⇑ (B[| ٨ || )⊥

▶ c : TL
, Γ,c : cut
|F|
; Δ, Ψ ⇑·	FSLL − cut	2

Since for every OL formula F , |F | > 0, by induction we conclude the following.
Corollary 5.7 (OL cut-elimination) Let TL be the theory of a given OL L and Γ, Δ, Ψ be multisets of atoms of the form [·| and [·♩. The sequent ▶ c : TL,c : cut, Γ; Δ ⇑ · is provable iff ▶ c : TL, Γ; Δ ⇑ · is provable.
Finally, we observe that, as in [17], determining whether or not an OL encoding is cut-coherent is decidable, with the proof search in SLL bounded by the depth v +3 where v is the maximum number of premise atoms in the bodies of the introduction clauses.

Discussion and conclusion
In this paper, we have extended the sufficient criterion for cut-elimination of ob- ject logics given in [17]. For that, we moved from LL to a variant of SELL (linear logic with subexponentials), where different modal behaviors were embodied into the subexponential connectives (substructural simply dependent multimodal sys- tem SLL). This allowed to establish a simple yet powerful criterion –cut-coherence – for proving analyticity for a large class of sequent-based systems. What this cri-

terion reflects is the duality of rules. In fact, checking cut-coherence is equivalent to checking B[| ♩| ⊥ ≡ B[| || , and vice versa. And this is the spirit of cut-elimination. We start the discussion by exploring the differences between this work and the one in [21]. First of all, encoding modalities different from those in LL is really tricky (or even impossible) using SELL. For instance, the modal behavior for K itself cannot be captured in SELL, while the one for S4 can, with a very clever subexponential signature: ⟨{l, r, L, ⬦R, el, er, ∞}, {r ≺ ⬦R ≺ ∞,l ≺ L ≺ ∞, el ≺
⬦R, el ≺ L, er ≺ L}⟩, where el, er are dummy subexponentials. The complexity
of these encodings is transferred to the half-page cut-coherence criterion presented in [21]. If we classify the results according to: (1) meta-level expressivity; and (2) cut-elimination criteria then
SLL is strictly greater than SELL. In fact, although in this work we consider only unbounded subexponentials, the exact same reasoning can be done for the bounded case by simply adjusting some of the inference rules in SLL. Hence all SELL encodings shown in [21] can be transported to SLL.
The cut-elimination results in this work do not extend the ones in [21] (as we are focusing on a particular class of subexponentials), neither the opposite (due to (1) reflected, e.g., by the fact that K cannot be handled in [21]). What we have shown is that, for such a class, the simplicity of [17] is recovered while, at the same time, subexponentials are handled in a very natural way. This brought back to the spot the core of cut-elimination: the duality of inference rules.
The key feature for achieving all this is modularity. Everywhere. Starting from the choice of LNS, a generalization of sequent systems, as the base framework. This allows for the locality of rules, enabling the central behavior of connectives to be shared among several different logics and leaving to the subexponentials the work of separating modal behaviors. That is, modalities reflect modalities, while (vanilla) LL captures rules as rewriting clauses (as it should be). Second, structural rules are parametric w.r.t. subexponentials, allowing for a clear separation between modals and local structural behaviors. And last, but not least, since subexponentials in SLL also reflect Kripke models, logics having the same semantic behavior share the same modal characteristics. This is the case, e.g., for intuitionistic logic and S4.
Analyticity is attached to the logical system, not to the logic itself. So one could argue that we were, in fact, just changing the initial problem. This would be the case if we would have adopted, e.g., nested systems instead of LNS. Indeed, there are cut-free nested systems for modal logics B and S5 [3], for example, while there is no known simple cut-free sequent systems for such logics. However, in [25] a class of nested systems that can be sequentializable into sequent systems was determined, and LNS systems, being a special case of nested systems with trees replaced by lines, fall into this class. Hence the cut-elimination criterion for LNS presented here is transferred to the respective sequent framework.
Logical frameworks, based on type systems, have also been used for charac- terizing and proving cut-elimination theorems of object-logics (see e.g., [15, 23]).

Usually, the embedding of the OL into the logical framework is not simple/direct. The approach followed here is rather different: we provide easy-to-check conditions that guarantee that the property holds. In the near future, we plan to formalize our results in Coq, as done in [6]. Also, it would be interesting to analyze the case of non-normal modal logics [14]. Finally, it would be interesting to explore the failure cases: is it possible, at the meta-level, to identify the reasons for the lack of analyticity? This would push the line of investigation towards finding necessary conditions for cut-elimination.

References
Andreoli, J.-M., Logic programming with focusing proofs in linear logic, Journal of Logic and Computation 2 (1992), pp. 297–347.
Avron, A., The method of hypersequents in the proof theory of propositional non-classical logics, in:
Logic: from foundations to applications: European logic colloquium, Clarendon Press, 1996 pp. 1–32.
Bru¨nnler, K., Deep sequent systems for modal logic, Archive for Mathematical Logic 48 (2009), pp. 551– 577.
URL  http://link.springer.com/article/10.1007/s00153-009-0137-3

Danos, V., J.-B. Joinet and H. Schellinx, The structure of exponentials: Uncovering the dynamics of linear logic proofs, in: G. Gottlob, A. Leitsch and D. Mundici, editors, Kurt Godel Colloquium, LNCS 713 (1993), pp. 159–171.
Demri, S., Complexity of simple dependent bimodal logics, in: R. Dyckhoff, editor, TABLEAUX 2000, LNCS 1847, Springer, 2000 pp. 190–204.
Felty, A., C. Olarte and B. Xavier, A focused linear logical framework and its application to meta theory of object logics (2020), submitted to MSCS. https://github.com/meta-logic/coq-fll.
Gentzen, G., Investigations into logical deduction, in: M. E. Szabo, editor, The Collected Papers of Gerhard Gentzen, North-Holland, 1969 pp. 68–131.
Girard, J.-Y., Linear logic, Theoretical Computer Science 50 (1987), pp. 1–102.
Guerrini, S., S. Martini and A. Masini, An analysis of (linear) exponentials based on extended sequents, Logic Journal of the IGPL 6 (1998), pp. 735–753.
URL https://doi.org/10.1093/jigpal/6.5.735

Kanovich, M. I., S. Kuznetsov, V. Nigam and A. Scedrov, Subexponentials in non-commutative linear logic, Math. Struct. Comput. Sci. 29 (2019), pp. 1217–1249.
URL https://doi.org/10.1017/S0960129518000117

Lellmann, B., Linear nested sequents, 2-sequents and hypersequents, in: 24th TABLEAUX, 2015, pp. 135–150.
Lellmann, B., C. Olarte and E. Pimentel, A uniform framework for substructural logics with modalities, in: LPAR-21, 2017, pp. 435–455.
URL http://www.easychair.org/publications/paper/340350

Lellmann, B. and E. Pimentel, Proof search in nested sequent calculi, in: LPAR-20, 2015, pp. 558–574.
URL  http://dx.doi.org/10.1007/978-3-662-48899-7_39

Lellmann, B. and E. Pimentel, Modularisation of sequent calculi for normal and non-normal modalities, ACM Transactions on Computational Logic (TOCL) 20 (2019), p. 7.
Licata, D. R., M. Shulman and M. Riley, A fibrational framework for substructural and modal logics, in:
D. Miller, editor, 2nd International Conference on Formal Structures for Computation and Deduction, FSCD 2017, September 3-9, 2017, Oxford, UK, LIPIcs 84 (2017), pp. 25:1–25:22.
URL https://doi.org/10.4230/LIPIcs.FSCD.2017.25

Maehara, S., Eine darstellung der intuitionistischen logik in der klassischen, Nagoya Mathematical Journal (1954), pp. 45–64.

Miller, D. and E. Pimentel, A formal framework for specifying sequent calculus proof systems, Theoretical Computer Science 474 (2013), pp. 98–116.
URL http://dx.doi.org/10.1016/j.tcs.2012.12.008

Miller, D. and A. Saurin, From proofs to focused proofs: a modular proof of focalization in linear logic, in: CSL, LNCS 4646, 2007, pp. 405–419.
Nigam, V. and D. Miller, A framework for proof systems, J. of Automated Reasoning 45 (2010),
pp. 157–188.
URL http://springerlink.com/content/m12014474287n423/

Nigam, V., C. Olarte and E. Pimentel, On subexponentials, focusing and modalities in concurrent systems, Theor. Comput. Sci. 693 (2017), pp. 35–58.
URL https://doi.org/10.1016/j.tcs.2017.06.009

Nigam, V., E. Pimentel and G. Reis, An extended framework for specifying and reasoning about proof systems, Journal of Logic and Computation 26 (2016), pp. 539–576.
URL http://dx.doi.org/10.1093/logcom/exu029

Olarte, C., D. Chiarugi, M. Falaschi and D. Hermith, A proof theoretic view of spatial and temporal dependencies in biochemical systems, Theor. Comput. Sci. 641 (2016), pp. 25–42.
URL https://doi.org/10.1016/j.tcs.2016.03.029
Pfenning, F., Structural cut elimination: I. intuitionistic and classical logic, Inf. Comput. 157 (2000),
pp. 84–141.
URL https://doi.org/10.1006/inco.1999.2832

Pimentel, E., A semantical view of proof systems, in: Logic, Language, Information, and Computation - 25th International Workshop, WoLLIC 2018, Bogota, Colombia, July 24-27, 2018, Proceedings, 2018,
pp. 61–76.
URL  https://doi.org/10.1007/978-3-662-57669-4_3

Pimentel, E., R. Ramanayake and B. Lellmann, Sequentialising nested systems, in: TABLEAUX 2019, 2019, pp. 147–165.
URL  https://doi.org/10.1007/978-3-030-29026-9_9

Poggiolesi, F., The method of tree-hypersequents for modal propositional logic, in: Towards Mathematical Philosophy, Trends In Logic 28, Springer, 2009 pp. 31–51.
Straßburger, L., A local system for linear logic, in: Proceedings of LPAR 2002, number 2514 in LNCS, 2002, pp. 388–402.
Vigan`o, L., “Labelled non-classical logics,” Kluwer, 2000.
Wansing, H., Sequent systems for modal logics, in: D. M. Gabbay and F. Guenthner, editors, Handbook of Philosophical Logic, Vol.8, Springer-Verlag Berlin Heidelberg, 2002 .
URL  http://link.springer.com/chapter/10.1007%2F978-94-010-0387-2_2
Xavier, B., C. Olarte, G. Reis and V. Nigam, Mechanizing focused linear logic in coq, in: S. Alves and
R. Wasserman, editors, LSFA 2017, ENTCS 338 (2017), pp. 219–236. URL https://doi.org/10.1016/j.entcs.2018.10.014
