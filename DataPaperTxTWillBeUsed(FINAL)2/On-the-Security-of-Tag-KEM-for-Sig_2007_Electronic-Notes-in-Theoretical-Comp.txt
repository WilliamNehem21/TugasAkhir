Electronic Notes in Theoretical Computer Science 171 (2007) 83–91	
www.elsevier.com/locate/entcs

On the Security of Tag-KEM for Signcryption
Maki Yoshida 1
Graduate School of Information Science and Technology, Osaka University 1-5 Yamadaoka, Suita, Osaka 560-0871, Japan
Toru Fujiwara 2
Graduate School of Information Science and Technology, Osaka University 1-5 Yamadaoka, Suita, Osaka 560-0871, Japan

Abstract
Signcryption tag-KEM (Key Encapsulation Mechanism with a tag) is an authenticated tag-KEM for generic construction of hybrid signcryption. Signcryption tag-KEM allows the sender to encapsulate a symmetric key along with a tag so that the receiver can authenticate the sender, the key, and the tag. We present a definition for the security of signcryption tag-KEM which is suitable for a recent signcryption setting. We also present a proof of security for the previous generic construction of hybrid signcryption according to the given definition.
Keywords: key encapsulation, privacy, authentication, signcryption, signcryption tag-KEM


Introduction
Encryption and signature schemes are fundamental cryptographic tools for provid- ing privacy and authenticity, respectively, in the public-key setting. Both privacy and authenticity are simultaneously needed in many applications on ad-hoc network where anyone can freely join or leave the network. This issue seems to be easily solved by composing a signature and encryption. However, it was noticed by [2] that such multi-user setting opens a possibility for some subtle attacks, not presented in the settings of stand-alone signature and encryption. Thus, a simple composition does not necessarily yield desired properties.
A signcryption was introduced by Zheng [8] as a primitive which simultaneously provides both of privacy and authenticity. There are many works of signcryp- tion [2,7,6,3]. An et al. [2] addressed proper modelling of signcryption. Then, Dodis

1 Email: maki-yos@ist.osaka-u.ac.jp
2 Email: fujiwara@ist.osaka-u.ac.jp

1571-0661 © 2007 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2006.11.011

et al. [7,6] modified the definition for security more reasonably in the multi-user setting. Recently, Dent and Bjørstad [3] presented a tag-KEM/DEM framework for generic construction of hybrid signcryption. The original tag-KEM/DEM [1] was introduced for generic construction of hybrid encryption. The framework combines tag-KEM (Key Encapsulation Mechanism with a tag) and DEM (Data Encryption Mechanism). A tag-KEM uses asymmetric technique to encrypt a symmetric key along with a tag, while the DEM uses a symmetric cipher to encrypt the message payload using the key from the KEM.
Dent and Bjørstad [3] defined an authenticated tag-KEM for hybrid signcryp- tion, called signcryption tag-KEM, as a primitive which simultaneously satisfies chosen ciphertext security for privacy and strong existential unforgeability for au- thenticity. Moreover, they showed that adapting the tag-KEM/DEM construction of hybrid encryption [1] to signcryption yields simpler scheme descriptions and bet- ter generic security reductions than the previous works.
However, the security of signcryption tag-KEM is defined for the previous def- inition for security of signcryption [2] which restricts the adversary so that the adversary is allowed to access de-signcryption oracle (resp. signcryption oracle) for the attacked user but not signcryption oracle (resp. de-signcryption oracle) for the attacked user if the adversary attacks privacy (resp. authenticity). On the other hand, the modified definition [7,6] allows the adversary to access both oracles, irre- spective of whether the adversary is attacking privacy or authenticity (such attack is called simultaneous attack [6]). This means that the modified definition for se- curity of signcryption becomes stronger than the previous one and the security of signcryption tag-KEM in [3] is not enough strong for yielding the modified security of signcryption.
Our Contribution. We define security of signcryption tag-KEM for the modified definition of signcryption [7,6] which allows simultaneous attacks. Specifically, the adversary is allowed to access all oracles corresponding to signcryption oracle and de- signcryption oracle for the attacked user. When addressing security of signcryption, there are two formalizations. One assumes that the adversary is an outsider who only knows the public information. Such security is called Outsider security. The other, stronger notion, assumes that the adversary is a legal user of the system. Such security is called Insider security. In this paper, we consider the stronger notion, i.e., Insider security. Then, we prove that the new definition for security of signcryption tag-KEM also yields the modified definition for security of signcryption with the same security reductions as in [3] by using the tag-KEM/DEM construction of hybrid signcryption in [3].

Preliminaries
We review the definitions of signcryption in [7] and DEM in [1].
Signcryption
Syntax. A signcryption is defined as a three-tuple of polynomial-time algorithms:

SC.Gen(1k), a key generation algorithm, takes as input a security parameter 1k, and outputs a keypair (sk, pk) where sk is the user’s secret key and pk is the user’s public key. Without loss of generality, it is assumed that pk is determined from sk. The public key pk defines all relative spaces, i.e., space for messages denoted by M. Note, that in the signcryption setting all participating parties need to invoke SC.Gen. For a user P , denote its keys by skP and pkP .
SEnc(skS, pkR, m), a signcryption algorithm, takes as input the sender’s secret key skS, the receiver’s public key pkR, and a message m. It returns a signcryption SC.
V Dec(skR, pkS, SC), a de-signcryption algorithm, takes as input the receiver’s secret key skR, the sender’s public key pkS, and a signcryption SC. It outputs a message m or the unique error symbol ⊥ in case SC is “invalid.”
Completeness. For any sender S, any receiver R, and any message m ∈ M, if (skS, pkS) ← SC.Gen(1k), (skR, pkR) ← SC.Gen(1k), and C ← SEnc(skS,
pkR, m), then V Dec(skR, pkS,C)= m.
Insider security. Insider-secure signcryption protects a given user U even if his partner might be malicious. For privacy, if honest user S sent a signcryption to U and later exposed his key to the adversary, the adversary still cannot decrypt the signcryption. For authenticity, without U ’s secret key, the adversary cannot forge signcryption from U to another user R, even with R’s secret key.
When addressing the security, we deal with two issues: Security goal and at- tack model. In [7], for privacy and authenticity, a common type of security goal and attack model is considered, called indistinguishability (IND)/strong existential unforgeability (abbreviated as sUF, sEUF, or sEF) and chosen ciphertext attack (CCA2)/chosen message attack (CMA), respectively. We denote the resulting se- curity notion by IND-CCA2/sUF-CMA. The notation follows [2,7,3].
The security IND-CCA2 requires that any probabilistic polynomial time ad- versary should be unable to find any pair (m0, m1) for which he can distinguish SEnc(skS, pkU , m0) from SEnc(skS, pkU , m1), with adaptive access to the follow- ing two oracles for the attacked user U corresponding to each of SEnc and V Dec.
OSE,U , the signcryption oracle, takes as input any user’s (receiver’s) public key
pk and any message m. It returns SEnc(skU , pk, m),
OV D,U , the de-signcryption oracle, takes as input any user’s (sender’s) public key
pk and a signcryption SC. It returns V Dec(skU , pk, SC).
Allowing access to oracle OSE,U is a main difference from the previous definition [2]. To create “valid” signcryptions that the adversary must distinguish between, he outputs the secret key skS of the user S sending messages to U . This means that even when compromising S, the adversary is still unable to understand messages S sent to U . Let ASC,cca be a probabilistic polynomial time oracle machine that plays
the following game.
(skU , pkU ) ← SC.Gen(1k).

(m , m , sk , v) ← AOSE,U ,OV D,U (pk ).
b ← {0, 1}.
SC ← SEnc(skS, pkU , mb).

b'
OSE,U,OV D,U
← ASC,cca	(v, SC).

In Step (iv), ASC,cca is restricted not to ask (pkS, SC) to de-signcryption oracle OV D,U , but can still use, for example, (pkS' , SC) for pkS' /= pkS. Variable v is state information of the ad versary. ASC,c ca is considered successful only if b = b'. We

define AdvA
=  Pr[b = b'] − 1  and ϵSC,cca = maxA
(AdvA
) where

SC,cca	2
SC,cca
SC,cca

maximum is taken over all machines. We say that a signcryption is IND-CCA2-
secure if ϵSC,cca is negligible in k.
The security sUF-CMA requires that any probabilistic polynomial time adver- sary should not only be able to generate a “valid” signcryption SC of some message m from U to any user R, with adaptive access to the above two oracles. Allowing access to oracle OV D,U is a main difference from the previous definition [2]. In order to define “valid,” the adversary is allowed to come up with the presumed secret key skR as part of his forgery. Let ASC,cma be a probabilistic polynomial time oracle machine that plays the following game.
(skU , pkU ) ← SC.Gen(1k).
(SC, sk ) ← AOSE,U,OV D,U (pk ).
In Step (ii), ASC,cma is restricted not to obtain SC in response to any SEnc(skU , pkR, m) query, i.e., any OSE,U query on the public key pkR and some message
m. ASC,cma is considered successful only if V Dec(skR, pkU , SC) /= ⊥. We define AdvASC,cma as the probability it succeeds, and ϵSC,cma = maxASC,cma (AdvASC,cma ) where maximum is taken over all machines. We say that a signcryption is sUF- CMA-secure if ϵSC,cma is negligible in k.

DEM
Syntax. A DEM is defined as a tuple of two polynomial-time algorithms (Enc, Dec) associated to (symmetric) key-space KD defined by the security parameter k. We consider KD is {0, 1}k and message space is {0, 1}∗. Here we omit the detail descrip- tion of these algorithms except the minimum syntax description, Enc(dk, m) = C and Dec(dk, C)= m.
Completeness. For any symmetric key dk ∈ KD and any message m ∈ {0, 1}∗,
Dec(dk, Enc(dk, m)) = m.
Security. For the purposes of this paper, we only require passive security for DEM as [3]. Let AD be a probabilistic polynomial time machine that plays the following game.
(m0, m1, v) ← AD(1k)
K ← KD, ξ ← {0, 1}, C ← Enc(K, mξ).
ξ' ← AD(v, C).

We define AdvA  = Pr[ξ = ξ'] − 1 and ϵD = maxA (AdvA
) where maximum is

D	2	D	D
taken over all machines. We say that DEM is one-time secure if ϵD is negligible in
k.

New Definition for Insider Security
We now define the notion of Insider security for signcryption tag-KEM. In the previous model of signcryption tag-KEM in [3], the sender’s key and the receiver’s key are generated by different algorithms while in a general model of signcryption the keys are generated by the same algorithm. We follow the general model of signcryption.

Syntax of Signcryption Tag-KEMs
A signcryption tag-KEM is defined as a four-tuple of polynomial-time algorithms:
SCTK.Gen(1k), a key generation algorithm, takes as input a security parameter 1k, and outputs a pair of keys (sk, pk) where sk is the user’s secret key and pk the user’s public key. Without loss of generality, we assume that pk is determined from sk. The public key pk defines all relative spaces, i.e., spaces for tags and encapsulated keys denoted by T and KK , respectively.
Sym(skS, pkR), a symmetric key generation algorithm, takes as input the secret key of the sender skS and the public key of the receiver pkR. It outputs a sym- metric key K ∈ KD together with internal state information ω where KD is the key space of DEM.
SEncap(ω, τ ), a key encapsulation algorithm, takes as input the state information
ω and an arbitrary tag τ . It returns an encapsulation E.
V Decap(skR, pkS, E,τ ), a decapsulation algorithm, takes as input the receiver’s secret key skR, the sender’s public key pkS, an encapsulation E, and a tag τ . It outputs a symmetric key K or the unique error symbol ⊥ in case E is “invalid.”
Completeness. For any sender S, any receiver R, and any tag τ ∈T , if (skS, pkS) ← SCTK.Gen(1k), (skR, pkR) ← SCTK.Gen(1k), and (K, ω) ← Sym(skS, pkR), then V Decap(skR, pkS, SEncap(ω, τ ),τ )= K.

Insider Security of Signcryption tag-KEM
The definition for Insider security of signcryption and signcryption tag-KEM in [3] neither mention nor allow simultaneous attacks. Therefore, we define the notion of Insider security so that the adversary has access to all oracles associated with not only OSE,U but also OV D,U .
We consider IND/sUF and CCA2/CMA as security goal and attack model, re- spectively. We denote the resulting security notion by IND-CCA2/sUF-CMA.
The security IND-CCA2 requires that any probabilistic polynomial time adver- sary should be unable to distinguish whether a given K is the one embedded in an

encapsulation (E, τ ) or not, with adaptive access to three oracles for the attacked user U corresponding to each of Sym, SEncap, and V Decap.
0S,U , the symmetric key generation oracle, takes as input any user’s (receiver’s) public key pk, runs Sym(skU , pk), and obtains (K, ω). It then stores the value ω (hidden from the view of the adversary, and overwriting any previously stored values), and returns the symmetric key K.
0E,U , the key encapsulation oracle, takes as input an arbitrary tag τ , and checks whether there exists a stored value ω. If there is not, it returns ⊥ and terminates. Otherwise it erases the value from storage, and returns SEncap(ω, τ ).
0D,U , the key decapsulation oracle, takes as input any user’s (sender’s) public key pk, an encapsulation E, and a tag τ . It returns V Decap(skU , pk, E,τ ).
Note that oracles 0S,U and 0E,U correspond to 0SE,U , and oracle 0D,U corresponds to 0V D,U . Allowing access to oracles 0S,U and 0E,U is a main difference from the previous definition [3].
To create “valid” encapsulations that the adversary must distinguish between, he outputs the secret key skS of the user S embedding a key for U same as the adversary against signcryption in [7]. This means that even when compromising S, the adversary is still unable to understand keys S embedded for U . Let ASCT K,cca be a probabilistic polynomial time oracle machine that plays the following game.
(skU , pkU ) ← SCTK.Gen(1k).
OS,U ,OE,U ,OD,U
(skS, v1) ← ASCT K,cca	(pkU ).
(K1, ω) ← Sym(skS, pkU ), K0 ← KD, δ ← {0, 1}.
OS,U ,OE,U ,OD,U
(τ, v2) ← ASCT K,cca	(v1, Kδ ).
E ← Encap(ω, τ ).

δ'
OS,U ,OE,U ,OD,U
← ASCT K,cca	(v2, E).

In Step (vi), ASCT K,cca is restricted not to ask (pkS, E,τ ) to the decapsulation oracle 0D,U , but can still use, for example, (pkS' , E,τ ') for pkS' /= pkS or τ ' /= τ . Variables v1, v2 are state information of the adversary. ASCT K,cca is considered successful only if δ = δ'. We define IND-CCA2-security similarly with the definition

for AdvA
= Pr[δ = δ'] — 1  and ϵSCT K,cca = maxA
(AdvA	).

SCTK,cca	2
SCTK,cca
SCTK,cca

The security sUF-CMA requires that any probabilistic polynomial time adver-
sary should not be able to generate a “valid” encapsulation E from U to any user R, with adaptive access to the three oracles. Allowing access to oracle 0D,U is a main difference from the previous definition [3]. In order to define “valid,” we also allow the adversary to come up with the presumed secret key skR as part of his forgery same as the adversary against signcryption in [7]. Let ASCT K,cma be a probabilistic polynomial time oracle machine that plays the following game.
(skU , pkU ) ← SCTK.Gen(1k).
OS,U ,OE,U ,OD,U
(E, τ, skR) ← ASCT K,cma	(pkU ).
In Step (ii), ASCT K,cma is restricted not to obtain E in response to any SEncap(ω, τ )

query with (K, ω) ← Sym(skU , pkR), i.e., any 0E,U query on the tag τ and a value ω stored by an 0S,U query on the public key pkR. ASCT K,cma is considered successful only if V Decap(skR, pkU , E,τ ) /= ⊥. We define sUF-CMA-security similarly with the definition for AdvASCTK,cma , the probability ASCT K,cma succeeds, ϵSCT K,cma = maxASCTK,cma (AdvASCT K,cma ).
Generic Construction of Hybrid Signcryption and Its Security Proof
We review the generic construction of hybrid signcryption in [3], and prove that the new definition for security of signcryption tag-KEM yields the modified definition for security of signcryption in [7].
Generic Construction of Hybrid Signcryption
The construction is based on the same idea of the generic construction of hybrid asymmetric encryption proposed in [1].
SC.Gen(1k)
(sk, pk) ← SCTK.Gen(1k). Output (sk, pk).
SEnc(skS, pkR, m)
(K, ω) ← Sym(skS, pkR).
C ← Enc(K, m).
E ← SEncap(ω, C).
SC ← (E, C). Output SC.
V Dec(skR, pkS, SC)
SC ← (E, C).
If ⊥← V Decap(skR, pkS, E,C), output ⊥ and terminate.
Otherwise K ← V Decap(skR, pkS, E,C).
m ← Dec(K, C). Output m.
Proof of the Security
We now turn to proving security of the hybrid signcryption scheme.
Theorem 4.1 If signcryption tag-KEM is IND-CCA2 secure and DEM is one-time secure, then the hybrid signcryption scheme in Section 4.1 is IND-CCA2 secure where ϵSC,cca ≤ 2ϵSCT K,cca + ϵD. Moreover, if signcryption tag-KEM is sUF-CMA secure, then the hybrid signcryption scheme in Section 4.1 is sUF-CMA secure where ϵSC,cma ≤ ϵSCT K,cma.
The proof is almost the same as the one for the previous definition for security. We present here the proof for the IND-CCA2 security. The IND-CCA2 security of hybrid signcryption is proven in the same way as the IND-CCA2 security of hybrid encryption in [1].
Proof. Let Game 0 be the regular IND-CCA2 game for signcryption.

(skU , pkU ) ← Gen(1k).
OSE,U ,OV D,U
(m0, m1, skS, v) ← ASC,cca	(pkU ).
b ← {0, 1}.
(ω, K) ← Sym(skS, pkU ), C ← Enc(K, mb), E ← SEncap(ω, C), SC ← (E, C).

b'
OSE,U,OV D,U
← ASC,cca	(v, SC).

In the following game, the game is altered to use a random key when generating the challenge signcryption, rather than the real key output by Sym. We refer to the resulting game as Game 1.
(skU , pkU ) ← Gen(1k).
OSE,U ,OV D,U
(m0, m1, skS, v) ← ASC,cca	(pkU ).
b ← {0, 1}.
(ω, K) ← Sym(skS, pkU ), K' ← KD, C ← Enc(K', mb), E ← SEncap(ω, C), SC ← (E, C).

b'
← AOSE,U,OV D,U (v, SC).

Let X0 and X1 be the events that b = b' in Game 0 and Game 1, respectively. We can prove the theorem by showing that |Pr[X1] — Pr[X0]| ≤ 2ϵSCT K,cca and
|Pr[X1] — 1 | ≤ ϵD. The proof of both inequality are slightly different from the previous proof because of access to 0D,U . In the following, we prove the former inequality by constructing ASCT K,cca that attacks the underlying signcryption tag- KEM by using ASC,cca. First, ASCT K,cca is given public key pkU and passes it to ASC,cca. Given m0 and m1 from ASC,cca, ASCT K,cca requests a challenge Kδ of the game. ASCT K,cca then selects b ← {0, 1} and computes C = Enc(Kδ, mb). By sending oracle 0E,U C as a tag, ASCT K,cca receives E and sends signcryption (E, C) to ASC,cca. For every query from ASC,cca to oracle 0SE,U , ASCT K,cca sends oracle 0S,U the public key, and uses the returned key, Enc, and oracle 0E,U in the same way. Every query from ASC,cca to oracle 0V D,U is forwarded to oracle 0D,U . If ⊥ is returned, it is forwarded to ASC,cca. Otherwise, ASCT K,cca decrypts E by using the key given from 0D,U , and passes the resulting message to ASC,cca. When ASC,cca outputs b' = b, ASCT K,cca outputs δ' = 1 meaning that Kδ is the real key. Otherwise, ASCT K,cca outputs δ' = 0 meaning that Kδ is random. We can prove that the view of ASC,cca is identical to that in Game 0 when δ = 1, and that in Game 1 when δ = 0. Accordingly, Pr[b' = b|δ = 1] = Pr[X0] and Pr[b' = b|δ = 0]= Pr[X1]. Therefore, it holds

Pr[δ' = δ] — 1
2
= 1 (Pr[δ'
2
= 1|δ = 1] — Pr[δ'
= 1|δ = 0])

= 1 (Pr[b'
2
1
= b|δ = 1] — Pr[b'
= b|δ = 0])

= 2 (Pr[X0] — Pr[X1]).
Since |Pr[δ' = δ] — 1 |≤ ϵSCT K,cca, we have |Pr[X1] — Pr[X0]|≤ 2ϵSCT K,cca.	 

Conclusion
We have presented the security notion for signcryption tag-KEM and proven security of the previous construction of hybrid signcryption according to the given definition. One of the future works is to present a construction of optimal signcryption tag- KEM.

Acknowledgment
The authors would like to thank Dr. Alexander W. Dent for his helpful comments and suggestions.

References
Abe, M., R. Gennaro, K. Kurosawa, and V. Shoup, Tag-KEM/DEM: A New Framework for Hybrid Encryption and a New Analysis of Kurosawa-Desmedt KEM, EUROCRYPT 2005, LNCS 3494 (2005), 128–146.
An, J.H., Y. Dodis, and T. Rabin, On the Security of Joint Signature and Encryption, EUROCRYPT 2002, LNCS 2332 (2002), 83–107.
Bjørstad, T.E., and A.W. Dent, Building Better Signcryption Schemes with Tag-KEMs, URL:
http://eprint.iacr.org/2005/405.pdf .
Baek, J., R. Steinfeld and Y. Zheng, Formal Proofs for the Security of Signcryption, PKC 2002, LNCS
2274 (2002), 80–98.
Chevallier-Mames, B., An Efficient CDH-based Signature Schemes with a Tight Security Reduction, CRYPTO 2005, LNCS 3621 (2005), 511-526.
Dodis, Y., Signcryption (Short Survey), Encyclopedia of Cryptography and Security, Springer Verlag, 2005.
Dodis, Y., M.J. Freedman, S. Jarecki, and S. Walfish, Optimal Signcryption from Any Trapdoor Permutation, URL: http://eprint.iacr.org/2004/020.pdf .
Zheng, Y., Digital Signcryption or How to Achieve Cost(Signature & Encryption) << Cost(Signature)
+ Cost(Encryption), Crypto’97, LNCS 1294 (1997), 165–179.
