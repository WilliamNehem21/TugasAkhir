Available online at www.sciencedirect.com


Electronic Notes in Theoretical Computer Science 322 (2016) 103–118
www.elsevier.com/locate/entcs

Is Hyper-extensionality Preservable Under Deletions of Graph Elements? 1
Alberto Casagrande2
Dept. Mathematics and Geosciences University of Trieste
Trieste, Italy
Carla Piazza3 Alberto Policriti4
Dept. Mathematics and Computer Science University of Udine
Udine, Italy

Abstract
Any hereditarily finite set S can be represented as a finite pointed graph –dubbed membership graph– whose nodes denote elements of the transitive closure of {S} and whose edges model the membership relation. Membership graphs must be hyper-extensional, that is pairwise distinct nodes are not bisimilar and (uniquely) represent hereditarily finite sets.
We will see that the removal of even a single node or edge from a membership graph can cause “collapses” of different nodes and, therefore, the loss of hyper-extensionality of the graph itself. With the intent of gaining a deeper understanding on the class of hyper-extensional hereditarily finite sets, this paper investigates whether pointed hyper-extensional graphs always contain either a node or an edge whose removal does not disrupt the hyper-extensionality property.
Keywords: Set theory, Hereditarily finite sets, Non-well-foundedness, Hyper-extensionality.


Introduction
A set is hereditarily finite if it is finite and all its elements are hereditarily finite. Moreover, it is well-founded if any chain of membership relations starting from it is finite. In standard Set Theory the Extensionality axiom, establishing that two sets

1 This work has been partially supported by GNCS-INDAM project “Algoritmica per il model checking e la sintesi di sistemi safety-critical ” and by University of Trieste FRA project “Learning specifications and robustness in signal analysis (with a case study related to health care)”.
2 Email: acasagrande@units.it
3 Email: carla.piazza@uniud.it
4 Email: alberto.policriti@uniud.it

http://dx.doi.org/10.1016/j.entcs.2016.03.008
1571-0661/© 2016 The Authors. Published by Elsevier B.V.
This is an open access article under the CC BY license (http://creativecommons.org/licenses/by/4.0/).

are equal if and only if they have the same elements, guarantees that hereditarily finite well-founded sets can be inductively constructed starting from the empty set. When also cyclic chains of memberships are allowed sets are called non-well- founded and one of the possible principles for establishing equality is Aczel’s Anti-
Foundation axiom based on the notion of bisimulation [2].
A hereditarily finite set S can be canonically represented through a pointed finite graph G in which each node represents a different element of the transitive closure of {S} and the edges of G model the membership relation. Since the notion of bisimulation can be naturally defined also on graphs, this means that in the canonical representation of S there are not two different bisimilar nodes. Well- founded sets are represented by acyclic graphs, while non-well-founded sets are represented by cyclic ones (e.g., see [2] for more details).
Now a quite general question arises: is there a natural way to inductively rea- son on both well-founded and non-well-founded hereditarily finite sets represented through graphs? In other terms, is there a way to inductively construct/deconstruct graphs representing hereditarily finite sets? Such question has been previously for- malized and studied in [14] where the authors ask whether given the canonical representation of a set, it is always possible to find a node which can be removed producing the canonical representation of another set, i.e., without causing any bisimulation collapse. A definitive answer is not provided in [14]. In this paper we further investigate in that direction proving that there are cases in which it is not possible to remove any node without causing collapses. On the other hand, we provide positive evidence on the fact that there always exists an edge which can be safely removed. This result is achieved by introducing the notion of n-well-founded part of a non-well-founded graph and by applying Ackermann code on it.
The paper is organized as follows: Section 2 formalizes hereditarily finite sets. Section 3 relates hereditarily finite sets and pointed hyper-extensional graphs and defines keystones –elements whose removal disrupts the graph hyper-extensionality. Section 4 presents a pipeline to enumerate pointed hyper-extensional graphs. This pipeline is used in Section 5 to prove that there exist pointed hyper-extensional graphs whose nodes (edges) are all keystones. Section 6 introduces the notion of disposable element –an element whose removal does not produce collapses between nodes of the same connected components– and shows a pointed hyper-extensional graph that do not contain disposable nodes. In Section 7, we prove that pointed hyper-extensional graphs always have a disposable edge. Finally, in Section 8, we draw conclusions and suggest future works.

Hereditarily Finite Sets
Hereditarily ﬁnite sets are finite sets whose elements are hereditarily finite sets.
We write P (S) to denote the powerset of S i.e. P (S)= {Sj | Sj ⊆ S}
Definition 2.1 [Well-founded Hereditarily Finite Sets] Well-founded hereditarily

ﬁnite sets are the elements of HF
def
Si∈N
HFi
where the HFi’s are defined as

follows:


HFi
=def ⎧⎪⎨ ∅	if i =0 
⎪⎩ P (HFi—1) otherwise


(1)

Definition 2.2 [Non-Well-Founded Hereditarily Finite Sets] Non-well-founded hered- itarily ﬁnite sets are finite sets specified by finite systems of equations of the form:

⎧⎪⎪⎨ Y0

= {X
.

0,0

,..., X0,m0 }


(2)

⎪⎩ Yn = {Xn,0,..., Xn,mn }
where {Y0,..., Yn}≥ {X0,0,..., Xn,mn }.
We denote the set of all the non-well-founded hereditarily finite sets by HF1/2. Let us notice that HF ⊆ HF1/2.
From hereditarily finite sets to graphs
Definition 3.1 [Graph] A (directed) graph is a tuple (V, E) where V is a finite set of nodes and E ⊆ V × V is a set of edges.
If G = (V, E) is a graph, we write G \ e to indicate the graph G deprived of the edge e (i.e., G \ e = (V, E \ {e})) and G \ v to denote the graphs G deprived of the node v and of all its incident edges (i.e., G\ v = (V \ {v},E \ ({v}× V ∪ V × {v}))). If (v, w) ∈ E, then we say that v is a predecessor of w and w is a successor of v. A path from v0 to vn is a sequence of nodes v0 ... vn such that (vi—1, vi) ∈ E for all i ∈ [1, n]. If v0 ... vn is a path, then its length is n. If there exists a path from v0 to vn, then we say that vn is reachable from v0.
Definition 3.2 [Pointed Graph] A graph is pointed if all its nodes are reachable from one of its nodes, which is called root of the graph.
If we interpret the edges of a pointed graph G = (V, E) as a membership relation, i.e., (v, w) ∈ E as w ∈ v, G depicts an element of HF1/2. Whenever G is clear from the context, we may write v e w in place of (v, w) ∈ E. By writing v en w we mean that there exists a path, whose length is n, from v to w (i.e., v = w, if n = 0, or there exists a vj such that v e vj and vj en—1 w, if n > 0). If w is reachable from w (i.e., there exists a n ∈ N such that v en w), we can also write v e∗ w.
A cycle is a path, whose length is greater than 0, from a node v to v itself. A graph is acyclic if it does not contains cycles. If it is not acyclic, then it is cyclic.
Definition 3.3 [Well-founded node] Let G be a graph. A well-founded node v of G is a node whose transitive closure –the subgraph of the nodes w such that v e∗ w– is acyclic. A non-well-founded node is a node that is not well-founded.




Fig. 1.  This graph represents the hereditarily finite set X4  = {X3, X1} where X3  = {X2},
X2 = {X3, X1, X0}, X1 = {X0}, and X0 = $.

Two distinct pointed graphs can represent the same set. In order to map each hereditarily finite set in a single pointed graph, we need the notion of bisimulation.
Definition 3.4 [Bisimulation] Let G = (V, E) and Gj = (V j, Ej) be two graphs. A bisimulation from G to Gj is a relation R ⊆ V × V j such that (s, sj) ∈ R if and only if:
for all s e p there exists a sj e pj such that (p, pj) ∈ R;
for all sj e pj there exists a s e p such that (p, pj) ∈ R.
If there exists a bisimulation R from G to Gj such that (v, vj) ∈ R, then we say that v and vj are bisimilar and we write v G∼G′ vj. If G and Gj are the same graph, we may use the notation ∼ in place of G∼G′ . Whenever the graph G is clear from the context, we may also omit G from the notation v ∼G p by writing v ∼ p. The relation ∼ is a bisimulation and also an equivalence relation.
We say that two graphs G and Gj are bisimilar whenever there exists a bisim- ulation R such that for all nodes v of G there exists a node vj in Gj such that (v, vj) ∈ R and vice-versa. As we assumed the equality over hyper-set to be defined by bisimulation (Anti-Foundation Axiom [2]), two pointed graphs are bisimilar if and only if they represent the same hereditarily finite set.
Definition 3.5 [Collapsed Graph] Let G = (V, E) be a graph and let [v]~ be the set of nodes bisimilar to v in G, i.e., [v] =def {w ∈ V | w ∼G v}. The collapsed graph of G is the graph G~ = (V~, E~) where:
V =def {[v] | v ∈ V };
E =def {([v] , [w] ) | (v, w) ∈ E}.
If two graphs are bisimilar, then they share the same collapsed graph. Moreover, any graph is bisimilar to its collapsed graph. Thus, pointed collapsed graphs are a canonical form to represent hereditarily finite sets.
Definition 3.6 [Hyper-Extensional] A graph G is hyper-extensional, or HE, if the only bisimulation over it is the identity, i.e., v ∼ vj implies v = vj.
Since collapsed graphs are hyper-extensional, any hereditarily finite set corre- sponds to one pointed hyper-extensional graph (e.g., see [14]). Because of that, we sometime refer to pointed hyper-extensional graphs as membership graphs.

It is worth to underline that a membership graph may have many different roots and, thus, represent different sets. For instance, both the nodes v1 and v2 are valid roots for the graph depicted in Fig. 2.


Fig. 2. Since both the nodes v1 and v2 are valid roots of the graph, this graph can represent both the hereditarily finite sets X2 = {X1}, where X1 = {X2, X0} and X0 = $, and X4 = {X3, X5}, where X5 = {X4} and X3 = $.
.
It is easy to see that all the possible roots of a membership graph belong to the same strongly connected component.
Let us notice that nodes that share the same successors are bisimilar. Hence, if G = (V, E) is a hyper-extensional graph, two nodes are the same if and only if they have the same successors. Because of that we may denote the set of the successors of v ∈ V as v itself, i.e., v = {w|(v, w) ∈ E}; this is consistent with the notation e. Under the same conditions, if v = {v} and w = {w}, then v and w are bisimilar. It follows that any hyper-extensional graph has, at most, one node v such that v = {v} and we denote it by Ω. Analogously, any hyper-extensional graph has, at most, one node without successors and we write ∅ to indicate it.
Proposition 3.7 Let v be a node. It holds that v e∗ ∅ if and only if v /~ Ω.
Proof. Let v be such that v e∗ ∅ and v ~ Ω. By definition of e∗, there should exist a path v0 ... vm such that v0 = v and vm = ∅. Since Ω is the only successor of Ω and v ~ Ω, vi ~ Ω for all i ∈ [0, m]. It follows that vm = ∅ ~ Ω. However, ∅ has not successors and, thus, it is not bisimilar to Ω which has one successor. Thus, our assumptions were absurd and we proved the claim.	2
The following claim directly follows from Proposition 3.7.
Proposition 3.8 ([2]) Let G be a hyper-extensional pointed graph. Either G con- tains the node ∅ or G exclusively contains Ω.
Nodes or edges whose deletion causes a collapse (i.e., reduce the number of nodes of the collapsed graph) are called keystone.
Definition 3.9 [Keystone] Let G be a pointed hyper-extensional graph. A node n (or an edge e, respectively) of G is a keystone for G, if the graph G \ n (G \ e, respectively) is not hyper-extensional.
We are interested in establishing whether there are pointed hyper-extensional graphs in which all nodes (edges) are keystones or not. In the former case, we may identify some of them by enumerating pointed hyper-extensional graphs and testing whether all nodes (edges) are keystones.
In the following section we describe a pipeline for the enumeration of pointed hyper-extensional graphs. We used it to prove the results reported in the remaining parts of this paper.

Enumerating hereditarily finite sets
The enumeration of all the pointed hyper-extensional graphs up to a given order n –having n nodes– is inherently exponential with respect to n2/2. As a matter of fact, as n grows, the number of acyclic graphs having order n tends to 2(n)/Mσn, where M ≈ 0.57436 and σ ≈ 1.48807 [3,4]. Moreover, roughly 32.6% of these graphs are (hyper-)extensional [21]. It follows that enumerating acyclic (hyper-)extensional graphs having order n lays in the time complexity class Ω(2n2/2).
In order to produce all the pointed hyper-extensional graphs, we could both generate all the directed graphs and retain only those that are hyper-extensional and pointed 5 . Unfortunately, there are 2n2 directed graphs of order n –having n nodes– and the large part of them are not even connected.
A significative improvement for this strategy was obtained by observing that both the properties of being hyper-extensional and pointed are preserved under isomorphism. Thus, either all graphs in an isomorphic class –the class of all the graphs that are pairwise isomorphic– are hyper-extensional or they are all not hyper- extensional. This also holds for the property of being pointed.
The isomorphic classes of directed graphs has been extensively studies (e.g., see [17,5,10,7]). They still are super-exponential in number with respect to the
n2
order n of the investigated graphs, (in particular, they are at least 2  /n!), but
n2
their abundance grows significantly slower than 2 . For instance, for n = 6, 32,
and 64 each class of isomorphic graphs contains in average more than 44595, 1043, and 10108 elements, respectively (see [18]).
We implement a pipeline to enumerate all the pointed hyper-extensional graphs in SAGE [20]. A representative for each of the isomorphic classes is produced by using the SAGE command canaug traverse edge(...). The pipeline should retain a graph only if it is hyper-extensional and pointed. In order to reduce the average time required to test these properties, two preliminary heuristics are applied. Since pointed graphs have at most one source –node that has no incoming edges–, the first heuristic filters graphs that have more than one source. We also noticed that all hyper-extensional pointed graphs, but the one representing Ω, must include exactly one sink node –node with no outgoing edges–, i.e., ∅. Thus, among the graphs that have survived the first filter, the pipeline considers exclusively the ones that either have one sink or that have no sinks and one node; the latter case correspond to Ω. The next step is to identify pointed graphs. Given a graph G, the SAGE command strongly connected components digraph(G) produces a new graph Gj, analo- gous to it, in which each strong connected component of G has been collapsed to a distict node. The resulting graph is pointed if and only if the original one is pointed too. Moreover, as Gj does not contain non-trivial strongly connected components, if it is pointed, then it must have exactly one source. Hence, it is possible to decide whether G is pointed or not by both testing the existence of one single source in Gj
and, if this is the case, by performing a reachability computation from it.

5 Let us notice that this is not an enumeration for pointed hyper-extensional graphs since two bisimilar graphs which are not isomorphic can be retain.

Finally, the pipeline verifies hyper-extensionality of each of the remaining graphs by computing its maximum bisimulation [9,15]. If no pairs of nodes are bisimilar, the considered graph is pointed and hyper-extensional and, thus, it is kept.
Since all valid roots of a membership graph belong to the same strongly con- nected component, our pipeline is also able to compute the number of hereditarily finite sets that are represented by graphs of a given order. In particular, the hered- itarily finite sets that have each of the issued graphs G as membership graph are in number as many as the nodes of the strongly connected components that contains a root for G itself.
Table 1 lists, for each order up to 5, the number of isomorphic classes of directed graphs (with self-loops), the number of pointed hyper-extensional graphs, and the number of hereditarily finite sets as they are computed by our pipeline. The same table also details the number of well-founded hereditarily finite sets that is reported in [19].
Do non-keystone always exist?
In [14], it has been proved that if G is pointed hyper-extensional and acyclic (i.e., it represents a well-founded set), then not all the nodes of G are keystones. The more challenging case of cyclic graphs was left open.
Our pipeline, described in Section 4, can be used to produce all the pointed hyper-extensional graphs having up to 5 nodes. We test the existence of a non- keystone node in them by removing each of the nodes and by testing hyper-exten- sionality of the resulting graph. None of the considered graphs contains exclusively keystone nodes. Computing all the pointed hyper-extensional graphs of order 6 is too time consuming. However, by using the above method, we have discovered a graph in which all nodes are keystones and, as a consequence, we prove the following theorem.
Theorem 5.1 There exists a non-empty pointed hyper-extensional graph such that all of its nodes are keystones.
Proof.  Let us consider the graph G0 depicted in Fig. 3. All of its nodes, but v0,

Fig. 3. A pointed hyper-extensional graph whose nodes are all keystones.
belong to the same strongly connected component (i.e. there is a path from v to w

for all v /= v0 and w /= v0) and v0 is reachable from both v1 and v3. It follows that

G0 is pointed. Moreover, G0 is hyper-extensional. However, v1
G0\v0
~	v2, v0
G0\v1
~	v2,

G0\v2
v4	~	v5, v4
G0\v3
~	v5, v1
G0\v4
~	v3, and v1
G0\v5
~	v3. This proves the claim.	2

As far as keystone edges are concerned, we easily prove the following result.
Theorem 5.2 There exists a pointed hyper-extensional graph such that it has at least one edge and all of its edges are keystones.
Proof. Let us consider the graph G1 depicted in Fig. 4. It is possible to reach v0
from v1, thus, it is pointed. Moreover, since 0 does not reach any node, G1 is hyper-
G1\(v1$v0)
extensional. However, G1 \ (v1 e v0) contains no edges and, hence, v0	~	v1.
This proves the claim.	2

Fig. 4. A pointed hyper-extensional graph whose edges are all keystones.

Our pipeline highlights that, up to order 5, chains –connected graphs whose nodes, but ∅, have one single successor– are the only pointed hyper-extensional graphs whose edges are all keystones (see Table 1). This leads us to consider sep- arately each of connected components produced by the elimination of a graph ele- ment. In the following section, we investigate whether there always exists a graph element whose elimination generates connected components that, individually, are hyper-extensional.
Hyper-extensionality and connected components
As a first step, we need to formalize the notion of connectivity over directed graphs. Such a notion, called weak connectivity, coincides with the connectivity over the corresponding undirected graph.
Definition 6.1 [Weak connectivity] A graph (V, E) is weakly connected if, for any V j Ç V , there exists an edge e ∈ E such that either e ∈ V j × (V \ V j) or e ∈ (V \ V j) × V j.
Definition 6.2 [Disposable] Let G be a pointed hyper-extensional graph. A node n (or an edge e, respectively) of G is disposable whenever the weakly connected components of G \ n (or G \ e, respectively) are hyper-extensional graphs.
Proposition 6.3 If v is not disposable for G, then it is a keystone for it.
Proof. If v is not disposable, then there exists a weakly connected component of G \ v that is not hyper-extensional and there exists a bisimulation that is not the identity for it. By extending this bisimulation with the identity over the other weakly connected components, we obtain a bisimulation for G \ v that is not the identity. Thus, G \ v is not hyper-extensional and v is a keystone for G.	2

The graph depicted in Fig. 3 proves the following result.
Theorem 6.4 There exists a non-empty pointed hyper-extensional graph such that none of its nodes is disposable.
Proof. Let us consider the graph G0 = (V0, E0) depicted in Fig. 3. As already observed above it is hyper-extensional and pointed. Moreover, all of its nodes are keystones by Theorem 5.1 and G0 \ v is weakly connected for all v ∈ V0. It follows that none of its nodes is disposable.	2




Table 1
Number of pointed hyper-extensional graphs whose nodes/edges are all keystones and whose nodes/edges
are all disposable. The columns labelled as IC, HP, and HF1/2 report the number of isomorphic classes of directed graphs (with self-loops), of pointed hyper-extensional graphs, and of hereditarily finite sets (roots of the pointed hyper-extensional graphs), respectively. All the data concerning the well-founded domain
are reported in brackets. The number of well-founded hereditarily finite sets (pointed hyper-extensional acyclic graphs) is taken from [19]

In the next section, we prove that, whenever a pointed hyper-extensional graph contains at least one edge, it also has disposable edges.
Do disposable edges always exist?
At the begin of this section, we focus on the well-founded part of graphs and then we provide all the ingredients for the general case. First of all, we need to introduce the notion of rank.
Definition 7.1 [Rank [6]] Let G = (V, E) be an graph and let v be one of its well-founded nodes. The rank of v in G, rank(G, v), is defined as follows:
⎧ 0	if v is a sink
rank(G, v) =
1+ max (rank(G, u))	otherwise
(v,u)∈E
Notice that, whenever G is acyclic, all the paths from any node v to a sink are finite in length and rank(G, v) is well-defined.

It is easy to see that, if G is acyclic and pointed, then it has one single root and its rank is greater than those of the other nodes of G.
Lemma 7.2 If G = (V, E) is a pointed acyclic graph, then it has one single root p
and rank(G, p) > rank(G, q) for all q ∈ V \ {p}.
Proof. If G had two roots, p1 and p2, then, by definition of root, both p1 is reachable from p2 and p2 is reachable from p1. It follows that G is cyclic and this contradicts our hypothesis. Hence, G must have one root p.
Let us assume that there exists q /= p such that rank(G, p) ≤ rank(G, q). Since q is reachable from p, there exists a finite path p0, p1,..., ph in G such that p0 = q and ph = p. Since p /= q, h should be greater than 0. Moreover, by induction on i, we can prove that rank(G, pi) ≥ rank(G, q)+ i. It follows that rank(G, p) should be greater or equal to rank(G, q)+ h where h ∈ N \ {0}. However, this contradicts our hypothesis and, thus, it proves that all the nodes in V \ {p} must have a rank smaller than that of p.	2
The following lemmas show how bisimulations are affected by edge removals and relate the ranks of bisimilar nodes.
Lemma 7.3 Let G be a graph and let v be a well-founded node of G. Moreover, let Gj be the graph G \ (v e u). For every well-founded node w of G such that rank(G, w) < rank(G, v), w G′ ~Gw.
Proof. We prove the thesis by induction on the rank of w.
rank(G, w)= 0 If rank(G, w)= 0, then w is a sink in G. Hence, it is a sink also in Gj and w G′ ~Gw.
rank(G, w) > 0 Let us assume that q G′ ~Gq for all q in G such that rank(G, q) < rank(G, w). From the definition of rank, it follows that q G′ ~Gq for all w e q in G. Since rank(G, w) < rank(G, v), v /= w and v e u /= w e q for all edge w e q in G. Hence, by definition of bisimulation, w G′ ~Gw.
This concludes the proof.	2
Lemma 7.4 Let G and Gj be two graphs (possibly the same). Moreover, let v and vj be two well-founded nodes in G and Gj, respectively. If v G~G′ vj, then rank(G, v)= rank(Gj, vj).
Proof. We prove the thesis by induction on the rank of v.
rank(G, v)= 0 If rank(G, v)= 0, then ∅~ v G~G′ vj and rank(Gj, vj)= 0.
rank(G, v) > 0 Let us assume that, for all node w in G such that rank(G, w) < rank(G, v), if w G~G′ wj, then rank(G, w)= rank(Gj, wj). From the definition of bisimulation, if v G~G′ vj then for all v e w in G there exists vj e wj in Gj s.t. w G~G′ wj and vice versa. Furthermore, from the definition of rank, we known that rank(G, v) = 1 + maxv$w rank(G, w) and rank(Gj, vj) = 1 + maxv′$w′ rank(Gj, wj) in Gj. Thus, rank(G, v) = 1 + maxv$w rank(G, w) = 1+ maxv′$w′ rank(Gj, wj)= rank(Gj, vj).

This concludes the proof.	2
Lemma 7.3 implies that edge removal can collapse only nodes whose ranks are greater or equal to that of the edge source, while from Lemma 7.4 it follows that two nodes that have different ranks are not bisimilar. Since Lemma 7.2 proves that roots have maximum rank in pointed acyclic graphs, removing an edge outgoing from the roots avoids collapses in other nodes. Unfortunately, this result does not hold in general and there exist pointed hyper-extensional graphs such that none of the edges leaving their roots is disposable (e.g., see Fig. 5).

Fig. 5. This graph G is pointed and hyper-extensional and both v3 and v4 are valid roots for it. Intriguingly, none of the edges leaving the possible roots is disposable as $ ~ v4 in G \ (v4, v3), v3 ~ v4 in G \ (v3, v1), and v2 ~ v3 in G \ (v3, v4). The only disposable edge of G is v1 $ v2.

Definition 7.5 [n-bisimulation [13]] Let G = (V, E) be a graph. We define ~n by induction on n as follows:
~n =def ⎧⎪⎨ V × V	if n =0 
⎪⎩ {(v, w) | 6v e vjEw e wjs.t. vj n~—1 wj and vice versa}	otherwise

In the following part of the paper, we write v ~n w meaning (v, w) ∈~n .
Theorem 7.6 ([8]) Let G be a ﬁnite graph and let x, y be nodes of G. We have
v ~ w if and only if for each n ∈ N it holds that v ~n w.
Definition 7.7 [n-well-founded part] Let G be a graph, v be one of its nodes, and
n ∈ N. The n-well-founded part of v, wf n(v), is defined as follows:
wf n(v) =def ⎧⎪⎨ {w | v e w and w is well-founded}	if n =0 
⎪⎩ {wf n—1(w) | v e w and w is non-well-founded}	otherwise

Notice that wf n(v) can be represented as a graph. In particular, this can be computed taking the unravelling of G of order n starting from v and using only the non-well-founded nodes reachable from x. Then the well-founded trees are attached to the leaves.
Notice also that if v is well-founded, then wf 0(v) ~ v, while for each n > 0 it holds wf n(v)= ∅.
Example 7.8 Let us consider the graph depicted in Fig. 1. The succession of the
n-well-founded parts of its nodes for n up to 4 are reported in Table 2.

Table 2
The n-well-founded parts for n upto 4 of the graph of Fig. 1


Lemma 7.9 Let G be a graph. If wf n(v) ~ wf n(w) for each n ∈ N, then v ~m w for each m ∈ N.
m
Proof. By counter nominal we prove that if there exists m such that v /~ w, then
m
there exists n such that wf n(v) /~ wf n(w). Let m be the minimum such that v /~ w.

We proceed by induction on m. Since v ~0
greater or equal to 1.
w holds by definition of ~0 , m should be

Base: m = 1. If there existed v e vj and w e wj, then v ~1
w should hold because

vj ~0 wj by definition of ~0 . Hence, one between v and w should has no succes-
sors. We assume with no restriction that v e vj and w has no successors. If vj is well-founded, then wf 0(v) /= ∅, wf 0(w) = ∅ and wf 0(v) /~ wf 0(w) hold. If vj is non-well-founded, then wf 0(vj) ∈ wf 1(v). However, w has no successors and, hence, wf n(w)= ∅ for all n ∈ N. It follows that wf 1(v) /~ wf 1(w).
m
Inductive Step: m > 1. By hypothesis, v /~ w. Hence, we can safely assume that
m—1
there exists v e vj such that vj /~ wj for each w e wj. If vj is well-founded,
then vj ∈ wf 0(v) and for each wj ∈ wf 0(w) vj /~ wj. Hence wf 0(v) /~ wf 0(w). If vj is non-well-founded, then, by inductive hypothesis on m − 1, we have that there exists n such that wf n(vj) /~ wf n(wj) for each w e wj. Since wf n(vj) ∈ wf n+1(v), we conclude that wf n+1(v) /~ wf n+1(w).
2

Theorem 7.10 Let G be a graph and v and w be two of its nodes. Then wf n(v) ~
wf n(w) for all n ∈ N if and only if v ~ w.
Proof. We separately prove that if wf n(v) ~ wf n(w) for all n ∈ N, then v ~ w
(⇒) and that if v ~ w, then wf n(v) ~ wf n(w) for all n ∈ N (⇐).
⇒) By Lemma 7.9 we have that v ~m w holds for each m ∈ N. Hence, the thesis follows from Theorem 7.6.
⇐) Let £n = {(wf i(x), wf i(y)) | i ≤ n and x, y ∈ V are bisimilar}. By induction on
n we prove that £n is a bisimulation up-to ~.
Base: n = 0. Let (wf 0(x), wf 0(y)) ∈ £0 If wf 0(x) e xj, then xj is well-founded and x e xj is in G. Since x and y are bisimilar, there exists an edge y e yj such that xj ~ yj. This proves the claim for n = 0.
Inductive Step: n > 0. Let (wf j(x), wf j(y)) ∈ £n. If j < n, then £j is a bisimulation-up-to ~ by inductive hypothesis. Moreover, £j is included in
£n by definition of £n. This proves the thesis for j < n. If, otherwise, j = n and xj ∈ wf n(x), there exist x e xjj in G such that xj = wf n—1(xjj) and xjj non-well-founded. From x ~ y, it follows that there exists y e yj in G and xjj ~ yj. Since xjj is non-well-founded, yj has to be non-well-founded. Hence, wf n—1(yj) ∈ wf n(y) and (wf n—1(xjj), wf n—1(yj)) ∈ £n.
This concludes the proof.	2
The Ackermann code is a bijective function that maps well-founded hereditarily finite sets into Natural numbers [1]. Classically, it is defined as:
N (S) =def Σ 2NA(p).
p∈S
The following definition extends Ackermann code and provides an encoding for the well-founded nodes of any –possibly, neither hyper-extensional nor well-founded– graph.
Definition 7.11 [Ackermann code] Let G be a graph. The Ackermann code N (G, x) of any well-founded node x of G is defined as:

N (G, x) =def
Σ
k∈EN (G,x)
2k	(3)

where £N (G, x)= {N (G, xj) | x e xj in G}
It is easy to see that, if S is a well-founded hereditarily finite sets, pS is the corresponding node in the membership graph GS, and p is a node of a graph G such that p and pS are bisimilar, then N (GS, pS)= N (G, p)= NA(S).
Corollary 7.12 Let G be a graph. There exists n ∈ N such that N (G, wf n(x)) /= N (G, wf n(y)) if and only if x /~ y.
From now on we use the notation Nn(G, x) to denote N (G, wf n(x)).

Lemma 7.13 Let G be a graph and x ∈ G. It holds that

N 0(G, x)=	Σ
k∈E0 (G,x)
2k	(4)

where £0 (G, x)= {N (G, xj) | x e xj in G and xj is well-founded}. Moreover,

Nn(G, x)=	Σ
k∈En (G,x)
2k	(5)

where £n (G, x)= {Nn—1(G, xj) | x e xj in G and xj is non-well-founded}.
Proof. This is an immediate consequence of the definitions.	2
Lemma 7.14 Let G be a graph, let x, xj be two non-well-founded nodes such that
x e xj in G, and let Gj be G \ (x e xj). If x is non-well-founded even in Gj, then:
Nn(Gj, y) ≤ Nn(G, y) for each node y of G and for all n ∈ N;
either Nn(Gj, y) = Nn(G, y) for each node y of G and for all n ∈ N or, let m ∈ N be the minimum such that there exists z with Nm(Gj, z) < Nm(G, z), both z = x and Nm(Gj, y)= Nm(G, y) for all y /= x hold.
Proof. Item (a) can be proved by induction on n.
As far as item (b) is concerned, we first notice that, since x is non-well-founded in Gj, all the non-well-founded nodes in G remain non-well-founded in Gj Hence, since both x and xj are non-well-founded in G, N 0(Gj, z)= N 0(G, z) for all nodes z of G by the definition of N 0(G, ·). Let m ∈ N be the minimum such that there exists z with Nm(Gj, z) < Nm(G, z). By above considerations, m > 0.
By Lemma 7.13, we have that
Nm(Gj, y)=	Σ	2k
k∈Em(G′,y)
where £m(Gj, y)= {£m—1(Gj, yj) | y e yj and yj is non-well-founded} because m > 
N	N
0. Since Gj contains all the edges of G, but x e xj, every edge y e yj in G is
also an edge for Gj if y /= x. Thus, if y /= x and m is the minimum such that Nm(Gj, z) < Nm(G, z), we get that Nm—1(Gj, yj) = Nm—1(G, yj) for all yj in G and £m(Gj, y) = {Nm—1(G, yj) | y e yj and yj is non-well-founded} = £m(G, y).

N
Hence, if y /= x, then,

Nm(Gj, y)=	Σ
k∈Em(G,y)
N


2k = Nm(G, y),

and x is the only node of G such that Nm(Gj, x) < Nm(G, x).	2
Lemma 7.15 Let G be a hyper-extensional graph and let Gj be the graph G \
(x e xj). Either x e xj is a disposable edge or there exists y in Gj such that x G′ y.

Proof. Let us assume that x e xj is not disposable. We prove that if the maximum bisimulation £ over Gj is such that Id C £ (meaning that S and identity do not coincide) and the only pair including x in £ is (x, x), then £ is a bisimulation over
G. Let (y, z) ∈ £. If (y, z) = (x, x), then it is trivial to prove that the conditions required to a bisimulation hold. If (y, z) /= (x, x), then let y e yj in G. Since, y /= x we have y e yj in Gj. Hence, there exists zj such that z e zj in Gj and (yj, zj) ∈ £. Since z /= x, we get that z e zj belongs to G and (yj, zj) ∈ £.	2
Thanks to Lemmas 7.14 and 7.15, we are now ready to prove the following theorem.
Theorem 7.16 If G is a pointed hyper-extensional graph that has at least one edge, then G has a disposable edge v e w.
Proof. Sketch Let H = {x1,.  , xk} be the set of nodes of G such that N 0(G, x1)
is maximum in G for each i = 1,.  , k.
If there exists i such that xi is well-founded, then k = 1 and x1 is the root of G. In this case, it is easy to prove that there exists an edge x1 e y that is disposable. Let us consider the case in which all the elements of H are non-well-founded.
We can subsequently refine H into H1, H2, . . . by minimizing N 1(G, ·), N 2(G, ·),
.... By Corollary 7.12, there exists a minimum j such that Hj = {x}. Let x e y be an edge of G with y non-well-founded. By Lemmas 7.14 and 7.15 we can prove that x e y is disposable.	2
8  Conclusions and Future Work
In this paper we considered the problem of removing parts from an hereditarily finite set without causing bisimulation collapses. We exploited a SAGE pipeline that we implemented to prove that the problem has a negative answer if one is interested in removing a node. On the other hand, we gave a positive answer in the case of removal of one edge, provided that only nodes in the same weakly connected components are compared.
The results in [16] are based on a Markov chain Monte Carlo-based algorithm, initially proposed for generating acyclic digraphs [11,12]. The key fact needed in order to show that the Markov chain converges to the uniform distribution were the irreducibility, aperiodicity, and symmetry of the chain. The idea exploited in the construction of the Markov chain was to show that a pair of elementary operations on graphs (implemented as basic transition rules of the Markov chain, akin to the elimination of a node) could be used to transform any graph G into another graph G0 within the same family. A positive answer to the one-node elimination problem would have allowed to immediately extend such results to non-well-founded sets, getting a random generator for HF1/2.
The positive result we obtained on edges cannot be easily exploited in this direction and further investigations are required.

References
Ackermann, W., Die widerspruchsfreiheit der allgemeinen mengenlehre, Mathematische Annalen 114
(1937), pp. 305–315.
URL http://dx.doi.org/10.1007/BF01594179

Aczel, P., “Non-Well-Founded Sets,” Number 14 in Lecture Notes, Center for the Study of Language and Information, Stanford University, 1988.
Bender, E., L. Richmond, R. Robinson and N. Wormald, The asymptotic number of acyclic digraphs, I, Combinatorica 6 (1986), pp. 15–22.
Bender, E. A. and R. W. Robinson, The asymptotic number of acyclic digraphs, II, Journal of Combinatorial Theory, Series B 44 (1988), pp. 363 – 369.
David, R. L., The number of structures of finite relations, Proc. Amer. Math. Soc. 4 (1953), pp. 486–495.
Dovier, A., C. Piazza and A. Policriti, An efficient algorithm for computing bisimulation equivalence, Theor. Comput. Sci. 311 (2004), pp. 221–256.
Harary, F. and E. M. Palmer, “Graphical enumeration,” Addison-Wesley, 1973.
Hennessy, M. and R. Milner, Algebraic laws for nondeterminism and concurrency, J. ACM 32 (1985),
pp. 137–161.
URL http://doi.acm.org/10.1145/2455.2460

Kanellakis, P. C. and S. A. Smolka, CCS expressions, finite state processes, and three problems of equivalence, in: Proceedings of the Second Annual ACM SIGACT-SIGOPS Symposium on Principles of Distributed Computing, Montreal, Quebec, Canada, August 17-19, 1983 (1983), pp. 228–240.
McIlroy, M. D., Calculation of numbers of structures of relations on finite sets, in: Quarterly Progress Reports No. 17, MIT Research Laboratory of Electronics, 1955 .
Melan¸con, G., I. Dutour and M. Bousquet-M´elou, Random generation of directed acyclic graphs, in:
J. Nesetril, M. Noy and O. Serra, editors, Comb01, Euroconference on Combinatorics, Graph Theory and Applications, Electronic Notes in Discrete Mathematics 10, 2001, pp. 202–207.
Melan¸con, G. and F. Philippe, Generating connected acyclic digraphs uniformly at random, Information Processing Letters (2004), pp. 209–213.
Milner, R., “A Calculus of Communicating Systems,” Lecture Notes in Computer Science 92, Springer, 1980.
URL  http://dx.doi.org/10.1007/3-540-10235-3

Omodeo, E. G., C. Piazza, A. Policriti and A. I. Tomescu, Hyper-extensionality and one-node elimination on membership graphs, in: Proceedings of the 29th Italian Conference on Computational Logic (CILC 2014), CEUR Workshop Proceedings 1195 (2014), pp. 341–346.
Paige, R. and R. E. Tarjan, Three Partition Refinement Algorithms, SIAM J. Comput. 16 (1987),
pp. 973–989.
Policriti, A. and A. I. Tomescu, Markov chain algorithms for generating sets uniformly at random, Ars Mathematica Contemporanea 6 (2013), pp. 57–68.
Redfield, J., The theory of group-reduced distributions, American Journal of Mathematics 49 (1927),
pp. 433–455.
Sloane, N., The on-line encyclopedia of integer sequences, published electronically at http: // oeis. org , 2010, Sequence A000273.
Sloane, N., The on-line encyclopedia of integer sequences, published electronically at http: // oeis. org , 2010, Sequence A001192.
Stein, W. et al., “Sage Mathematics Software (Version 6.5),” The Sage Development Team (2015), http://www.sagemath.org.
Wagner, S., Asymptotic enumeration of extensional acyclic digraphs, Algorithmica 66 (2013), pp. 829– 847.
URL  http://dx.doi.org/10.1007/s00453-012-9725-4
