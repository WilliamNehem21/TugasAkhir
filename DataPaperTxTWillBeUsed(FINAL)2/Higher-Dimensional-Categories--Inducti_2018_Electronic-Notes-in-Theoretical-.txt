Available online at www.sciencedirect.com


Electronic Notes in Theoretical Computer Science 341 (2018) 73–90
www.elsevier.com/locate/entcs

Higher Dimensional Categories: Induction on Extensivity 1
Thomas Cottrell2,5
Department of Mathematical Sciences University of Bath
Bath, United Kingdom

Soichiro Fujii3,5,6
Department of Computer Science University of Tokyo
Tokyo, Japan

John Power4,5
Department of Computer Science University of Bath
Bath, United Kingdom



Abstract
In this paper, we explore, enrich, and otherwise mildly generalise a prominent definition of weak n-category by Batanin, as refined by Leinster, to give a definition of weak n-dimensional V -category, with a view to applications in programming semantics. We require V to be locally presentable and to be (infinitarily) extensive, a condition which ensures that coproducts are suitably well-behaved. Our leading example of such a V is the category ω-Cpo, ω-Cpo-enriched bicategories already having been used in denotational semantics.
We illuminate the implicit use of recursion in Leinster’s definition, generating the higher dimensions by a process of repeated enrichment. The key fact is that if V is a locally presentable and extensive category, then so are the categories of small V -graphs and small V -categories. Iterating, this produces categories of n- dimensional V -graphs and strict n-dimensional V -categories that are also locally presentable and extensive. We show that the free strict n-dimensional V -category monad on the category of n-dimensional V -graphs is cartesian. This, along with results due to Garner, allows us to follow Batanin and Leinster’s approach for defining weak n-categories. In the case that V = Set, the resulting definition of weak n-dimensional V -category agrees with Leinster’s definition.
Keywords: higher dimensional category, enriched category, extensive category, cartesian monad


https://doi.org/10.1016/j.entcs.2018.11.005
1571-0661/© 2018 The Author(s). Published by Elsevier B.V.
This is an open access article under the CC BY-NC-ND license (http://creativecommons.org/licenses/by-nc-nd/4.0/).

Introduction
Bicategories have been used for many years to model computational phenomena such as concurrency [6] and binders [18]. The collectivity, Bicat, of bicategories has the structure of a tricategory, which have occasionally appeared explicitly [17] and more often implicitly [6] in the programming semantics literature. But what is a weak n-category in general? Strict n-categories for arbitrary n have been used to model concurrency [19] and in connection with rewriting [12]. So it seems only a matter of time until weak n-categories for arbitrary n prove to be of value for programming semantics too. Here, we explore, enrich, and otherwise mildly generalise a prominent definition by Batanin [1], as refined by Leinster [16], together with the surrounding theory: they assumed knowledge of sophisticated mathematics, glossed over the inherent recursion, and did not consider the concerns of programming semantics.
Batanin and Leinster’s definition of weak n-category starts with the free strict n- category monad T (n), induced from the canonical adjunction between the category n-Gph of n-graphs and the category n-Cat of strict n-categories. The monad T (n) is cartesian (see Definition 3.1). For any cartesian monad T on any category C with finite limits, the slice category C/T 1 possesses a canonical monoidal structure (Proposition 5.1). A monoid in that monoidal category is called a T-operad [16] or sometimes a T -club [14] or a T-category [3]. If O = ((arO : O −→ T 1), m, e) is a T -operad, an O-algebra consists of an object X of C together with an action of O on
X. Leinster introduces the notion of contraction (Definition 6.1) on T (n)-operads, and defines a weak n-category to be an algebra for the initial T (n)-operad with contraction.
The heart of the induction implicit in Batanin and Leinster’s work is simpler than one might imagine. The key fact is that if V is an (infinitarily) extensive category with finite limits (see Definition 2.1), then so are the categories of small V-graphs (Definition 2.2) and of small V-categories. Iterating, this produces the categories V-Gph(n) (Definition 2.3, enriching n-Gph) and V-Cat(n) (Definition 2.4, enriching n-Cat) that are also extensive and have finite limits. Extensivity enables one to show that the forgetful functor from V-Cat(n) to V-Gph(n) admits a left adjoint, and that the induced monad T (n) is cartesian.
We adapt Garner’s conceptual formulation [10] of the notion of contraction to the enriched setting. A weak n-dimensional V-category is then defined as an algebra for the initial T (n)-operad with contraction. To ensure that the initial T (n)-operad with contraction actually exists, we impose a mild size condition on V, that of being locally presentable. This additional condition is harmless to our inductive process, since whenever V is locally presentable, so is V-Gph. Letting V be the category ω-Cpo allows the modelling of recursion, see for instance the use of ω-Cpo-enriched

1 No data were generated in association with this paper.
2 Email: T.P.Cottrell@bath.ac.uk
3 Email: soichi@is.s.u-tokyo.ac.jp
4 Email: A.J.Power@bath.ac.uk
5 Supported by Royal Society grant IE160402.
6 Supported by ERATO HASUO Metamathematics for Systems Design Project (No. JPMJER1603), JST.

bicategories in [18], axiomatising binders [9].
In Section 2, we recall and further develop the notion of infinitary extensivity that we studied broadly in this context in [8], extending the finitary extensivity con- dition of Lawvere as developed by Carboni, Lack and Walters in [5] and by Cockett in [7]. In Section 3, we use the extensivity condition to show that the forgetful functor from V-Cat to V-Gph generates a cartesian monad on V-Gph, and in Sec- tion 4, we extend that result to higher dimensions, yielding a cartesian monad T (n) on V-Gph(n). We then explain T -operads for any cartesian monad T in Section 5. In Section 6, following but adapting Garner’s homotopy theoretic ideas [10,11], we define contraction in the enriched setting. Then we show in Section 7 that for every V which is locally presentable and extensive, the V-enriched version of initial T (n)- operad with contraction exists, generalising Batanin and Leinster’s line of thought to complete a definition of weak n-dimensional V-category.
Extensivity, V-graphs and V-categories
Extensive categories were introduced by Lawvere and further developed in [5,7]. In their work, extensive categories meant categories with finite coproducts satisfying an additional condition. We need to extend that to a corresponding infinitary condition, cf [8].
For any category V with small coproducts, and for any set I and I-indexed family (Xi)i∈I of objects of V, consider the functor
a: Y(V/Xi) −→ V/(a Xi)	(1)

mapping (fi : Ai −→ Xi)i∈I to (  i∈I fi :  i∈I Ai −→  i∈I Xi).
Definition 2.1 A category V with small coproducts is extensive if for any set I and I-indexed family (Xi)i∈I of objects of V, the functor  in (1) is an equivalence of categories.
Our leading examples of extensive categories are Set and the category ω-Cpo of posets with sups of ω-chains, together with, for any extensive category V with finite limits, the categories V-Gph(n) and V-Cat(n), which are defined recursively. In order to define the former, we first need to define the category of V-graphs.
Definition 2.2 Let V be a category.
A small V-graph G consists of a set ob(G) together with, for each x, y ∈
ob(G), an object G(x, y) ∈ V.
A map of V-graphs from G to Gj is a function f : ob(G) −→ ob(Gj) together with, for each x, y ∈ ob(G), a map fx,y : G(x, y) −→ Gj(fx, fy) in V.
We denote the category of all small V-graphs and maps by V-Gph. The con- struction (−)-Gph routinely extends to an endo-2-functor on the 2-category of locally small categories.

Definition 2.3 For each natural number n and any category V, the category
Gph(n) is defined as follows:
V-Gph(0) = V;	V-Gph(n+1) = (V-Gph(n))-Gph.
Definition 2.4 For each natural number n and any category V with finite prod- ucts, the category V-Cat(n) is defined as follows (using the cartesian structure for enrichment):
V-Cat(0) = V;	V-Cat(n+1) = (V-Cat(n))-Cat.

When V = Set, we abbreviate V-Gph(n) by n-Gph, and we abbreviate V-Cat(n)
by n-Cat.
We now show that if V is an extensive category with finite limits, then so are V-Gph and V-Cat. Actually, to ensure that V-Gph and V-Cat are extensive, the much weaker requirement of V having a strict initial object suffices. Recall that an initial object 0 in a category is called strict if every morphism going into 0 is an isomorphism. Every extensive category has a strict initial object; consider the case I = ∅ in (1).
Proposition 2.5 If V is a category with a strict initial object 0, then V-Gph is extensive.
Proof. The coproduct of a set-indexed family (Gi)i∈I of V-graphs is given by ob( i∈I Gi)=  i∈I ob(Gi) and


a	j	j


 Gi(x, xj)	if i = ij,


It is easy to see that the functor	 :	(V-Gph/G ) −→ V-Gph/(	G ) (as in (1)) is full and faithful. For any object (f : H −→	G ) in V-Gph/(		G ), define an object (f : H −→ G )	∈		(V/G ) by the pullbacks of f along the coprojections σ : G −→	G ; note that these pullbacks always exist, and H are just the suitable “full sub” V-graphs of H. Since 0 is strict, (	f :	 H −→ i∈I Gi) is isomorphic to f . Hence		is also essentially surjective.		2
Proposition 2.6 If V is a category with a strict initial object and ﬁnite products, then V-Cat is extensive.
Proof. Similar to the above. See [8, Proposition 2.6] for details (note that in a category V with an initial object 0 and finite products, 0 is strict if and only if 0 × B ∼= 0 for every B ∈ V).	2
Finite limits in V-Gph or V-Cat are straightforward. We will treat pullbacks as an example, as they will play an important role in Sections 3 and 4.

Proposition 2.7 Let V have ﬁnite limits. A commutative square

k
P  B

h	g

A  X
f

in V-Gph or in V-Cat is a pullback if and only if the square as on the left of the following diagram is a pullback in Set, and for any pair p1, p2 ∈ ob(P ), writing ai = h(pi), bi = k(pi) and xi = f (ai)= g(bi) for i = 1, 2, the square as on the right is a pullback in V.


k
ob(P )
ob(B)
P (p1, p2)
kp1 ,p2
B(b1, b2)



h

ob(A)
f
g

ob(X)
hp1 ,p2

A(a1, a2)





fa1 ,a2
gb1 ,b2

X(x1, x2)


We need several results about extensivity in order to prove cartesianness of a monad in later sections, so we collect those results in the remainder of this section, extending work from [8].
Proposition 2.8 A category V with small coproducts is extensive if and only if for any set I, I-indexed family (Xi)i∈I of objects of V, morphism f : A −→  i∈I Xi in V, and I-indexed family of commutative squares

τi
Ai  A


fi


Xi	σi
f

`i∈I Xi
(2)


in V (in which σi is the i-th coprojection), each square (2) is a pullback square if and only if (τi)i∈I deﬁnes a coproduct (that is, A = i∈I Ai with τi the i-th coprojection).
Proof. See [8, Proposition 2.3].	2
Proposition 2.9 Let V be an extensive category. For any set I and I-indexed family of pullback squares in V as on the left of the following diagram, the square

as on the right is a pullback.
`	q

qi
Pi  Bi

`i∈I Pi
i∈I i
`i∈I Bi

pi	gi


Ai  Xi
fi
`i∈I pi

`i∈I Ai






i∈I fi
`i∈I gi

`i∈I Xi


Proof. By the definition of extensivity, the functor  :   (V/X ) −→ V/( i∈I Xi) is an equivalence of categories and, in particular, it preserves binary products.	2
Proposition 2.10 Let V be an extensive category with ﬁnite products. For any
B ∈ V, the functor (−) × B : V −→ V preserves small coproducts.
Proof. In any category, a square as on the left of the following diagram is always a pullback. Hence for any object B ∈ V, set I, and I-indexed family (Xi)i∈I of objects of V, for each i ∈ I the square as on the right is a pullback.


h × B
A × B  C × B
X × B σi × B (`
Xi) × B



π1	π1


A  C
h
π1


Xi	σi
π1

`i∈I Xi

Therefore by Proposition 2.8, (  i∈I Xi) × B ∼=  i∈I (Xi × B).	2
Proposition 2.11 Let V be an extensive category. For any object Y ∈ V, the slice category V/Y is again extensive.
Proof. Clearly V/Y has small coproducts given by   (f : X −→ Y ) = ([fi]i∈I :  i∈I Xi −→ Y ). Also note that for any object (f : X −→ Y ) of V/Y , the canonical functor (V/Y )/f −→ V/X which maps (h : (g : A −→ Y ) −→ f ) ∈ (V/Y )/f to (h : A −→ X) ∈ V/X is an isomorphism of categories. For any set I and I-indexed family (fi : Xi −→ Y )i∈I of objects of V/Y , the diagram

  i∈I ((V/Y )/fi)	(V/Y )/[fi]i∈I
∼=	∼=
`
  i∈I (V/Xi)	V/(`i∈I Xi)
(in which the vertical arrows are the canonical isomorphisms mentioned above) commutes. Since the lower  is an equivalence by the assumption, so is the upper one.	2

Corollary 2.12 Let V be an extensive category with pullbacks.
For any morphism g : B −→ X in V, set I, and I-indexed family of pullback squares in V as on the left of the following diagram, the square as on the right is a pullback.


qi
Pi  B

`i∈I Pi
[qi]i∈I
B

pi	g


Ai  X
fi
`i∈I pi

`i∈I Ai
g


X
[fi]i∈I


For any object X ∈ V, set I, I-indexed family of morphisms (fi : Ai −→ X)i∈I in V, set J, J-indexed family of morphisms (gj : Bj −→ X)j∈J in V, and (I × J )-indexed family of pullback squares in V as on the left of the following diagram, the square as on the right is a pullback.



Pi.j

qi,j
 Bj
`i∈I,j∈J

Pi,j

j∈J
([q
i,j ]i∈I )
`j∈J Bj








Proof.

pi,j	gj


Ai  X
fi
`i∈I ([pi,j ]j∈J )
`i∈I Ai






[fi]i∈I

[gj ]j∈J


X

By the assumption, the slice category V/X has finite products ×X (given by pullbacks in V), and is extensive (Proposition 2.11). Hence by Proposition 2.10, binary product by (g : B −→ X) ∈ V/X preserves small coproducts, that is, (   fi) ×X g ∼=   (fi ×X g).
Using (i) iteratively, we obtain (`i∈I fi) ×X (`j∈J gj) ∼= `i∈I,j∈J (fi ×X gj).

A cartesian monad on V-Gph
In this section, subject to conditions on V, we show that the monad on V-Gph induced by the forgetful functor U : V-Cat −→ V-Gph is cartesian, meaning the following.
Definition 3.1 (i) A natural transformation is called cartesian if all the natu- rality squares of it are pullbacks.
(ii) For any category C with pullbacks, a monad T = (T, μ, η) on C is cartesian if the functor T preserves pullbacks, and if μ and η are cartesian natural trans- formations.

Proposition 3.2 If V has ﬁnite products and small coproducts, and if for any B ∈V the functor (−) × B : V −→ V preserves small coproducts, then the forgetful functor U : V-Cat −→ V-Gph admits a left adjoint.
Proof. Given a V-graph G = (ob(G), (G(x, y))x,y∈ob(G)), the free V-category on G
is given by the V-graph
 ob(G),  a	a	G(wn—1, wn) ×· · · × G(w0, w1) 

n∈N w0,...,wn∈ob(G)
w0=x,wn=y
x,y∈ob(G)

with evident composition laws (defined using the assumption that (−) ×B preserves small coproducts) and identity elements.	2
Examples of categories V satisfying the assumptions of Proposition 3.2 include cartesian closed categories with small coproducts [20] and extensive categories with finite products (by Proposition 2.10).
Proposition 3.3 If V is an extensive category with ﬁnite limits, then the left ad- joint to the forgetful functor U : V-Cat −→ V-Gph determined by Proposition 3.2 preserves pullbacks.
Proof. This follows from Proposition 2.7, Proposition 2.9, and Corollary 2.12 (ii).2
Proposition 3.4 If V has a strict initial object 0 and ﬁnite products, then the categories V-Gph and V-Cat admit small coproducts and the forgetful functor U : V-Cat −→ V-Gph preserves small coproducts.
Proof. In both V-Gph and V-Cat, small coproducts are given by taking disjoint union of objects and setting the hom-objects between objects from different com- ponents to be 0 (cf. the proof of Proposition 2.5).	2
Proposition 3.5 If V is an extensive category with ﬁnite limits, then the unit
η : idU-Gph =⇒ UF of the adjunction F E U in Proposition 3.2 is cartesian.
Proof. This follows from Proposition 2.8.	2
Proposition 3.6 If V is an extensive category with ﬁnite limits, then for each natural number m, the natural transformation

(V-Gph)m
Fm	 
 (V-Cat)m  V-Cat
V-Gph
idV-Cat
V-Cat,

where ε is the counit of the adjunction F E U in Proposition 3.2 and	is the m-ary product functor, is cartesian.
Proof. Let (f (1),...,f (m)): (G(1),..., G(m)) −→ (Gj(1),..., Gj(m)) be a morphism

in (V-Gph)m. Our aim is to show that the square


FU (FG(1) ×· · · × F G(m))
εFG(1) ×···×FG(m)
FG(1) ×· · · × F G(m)



FU (Ff (1) × ··· × Ff (m))

FU (F Gj(1) ×· · · × F Gj(m))




εFG'(1) ×···×FG'(m)
Ff (1) × ··· × Ff (m)

F Gj(1) ×· · · × F Gj(m)

in V-Cat is a pullback. By Proposition 2.7 it suffices to show that for every pair of objects (x(1),..., x(m)), (y(1),..., y(m)) ∈ ob(FU (FG(1) ×· · · × F G(m))) = ob(G(1) ×· · · × G(m)), the square


FU  m
(FG(i))(x(i), y(i))	 m

(FG(i))(x(i), y(i))




FU  m

(FGj(i))(f (i)x(i),f (i)y(i))	 m

(FGj(i))(f (i)x(i),f (i)y(i))

in V is a pullback. This follows by appropriate applications of Proposition 2.10, Proposition 2.9 and Corollary 2.12 (ii).	2
Let T = (T, μ, η) be the monad on V-Gph induced by the adjunction F E
U : V-Cat −→ V-Gph.
Theorem 3.7 If V is an extensive category with ﬁnite limits, then the monad T
on V-Gph is cartesian.
Proof. This follows from Proposition 3.3, Proposition 3.5, and Proposition 3.6 (take m = 1).	2

A cartesian monad on V-Gph(n)
In this section we show that the forgetful functor from the category of strict n- dimensional V-categories to that of n-dimensional V-graphs has a left adjoint. We assume throughout that V is extensive and has finite limits. It follows that V-Gph and V-Cat are likewise (by Propositions 2.5, 2.6 and 2.7), and so, by induction, for each natural number n, the categories V-Gph(n) and V-Cat(n) are also extensive with finite limits.
Recall  that,  by  Propositions  2.10  and  3.2,  the  forgetful  functor
U : (V-Cat(n))-Cat −→ (V-Cat(n))-Gph admits a left adjoint F .
Definition 4.1 For each natural number n, we define an adjunction F (n) E
U (n) : V-Cat(n) −→ V-Gph(n) recursively as follows:
F (0) = U (0) = idU ;

F (n+1) E U (n+1) is the composite:


(u-Gph(n))-Gph
F (n)-Gph

U (n)-Gph
F
(u-Cat(n))-Gph
U

(u-Cat(n))-Cat.

Proposition 4.2 For each natural number n, F (n) : u-Gph(n) —→ u-Cat(n) pre- serves pullbacks.

Proof. For n = 0, the assertion is trivial. Proceeding inductively, if F (n) preserves pullbacks, so does F (n)-Gph by Proposition 2.7.  The functor F : (u-Cat(n))-Gph —→ (u-Cat(n))-Cat preserves pullbacks by Proposition 3.3. 2

Proposition 4.3 For each natural number n, U (n) : u-Cat(n) —→ u-Gph(n) pre- serves small coproducts.
Proof. For n = 0, the assertion is trivial. Proceeding inductively, if U (n) preserves small coproducts, it preserves initial objects, and so the functor U (n)-Gph pre- serves small coproducts. The functor U : (u-Cat(n))-Cat —→ (u-Cat(n))-Gph also preserves small coproducts by Proposition 3.4.	2
Proposition 4.4 For each natural number n, the unit η(n) : idU -Gph(n)  =⇒
U (n)F (n) of the adjunction F (n) E U (n) is cartesian.
Proof. Observe that adjunctions whose units are cartesian are closed under compo- sition. Proceeding inductively, if η(n) is cartesian, so is η(n)-Gph by Proposition 2.7. The unit of the adjunction F E U : (u-Cat(n))-Cat —→ (u-Cat(n))-Gph is carte- sian by Proposition 3.5.	2
Proposition 4.5 For each pair of natural numbers n and m, the natural transfor- mation

(F (n))m	 
U (n)
u-Gph(n)
F (n)

(u-Gph(n))m  (u-Cat(n))m  u-Cat(n)
idV-Cat(n)
u-Cat(n),


where ε(n) is the counit of the adjunction F (n) E U (n) and  is the m-ary product functor, is cartesian.
Proof. By induction on n.  Suppose the claim is true for n = k and for all
m. For brevity, we will write the adjunction F (k)-Gph E U (k)-Gph as Fj E Uj, and whose counit ε(k)-Gph as εj. We aim to show that for every mor- phism (f (1),...,f (m)): (G(1),..., G(m)) —→ (Gj(1),..., Gj(m)) in (u-Gph(k+1))m,

the outer rectangle in the diagram


Fε′ Q

' (i)

εQm

' (i)

FFjUjU ( m
FFjG(i))
U ( i=1 FF G
)
FU (
m i=1
FFjG(i))
i=1 FF G
m i=1
FFjG(i)



FF′U′U ( m

FF′f (i))
FU ( m

FF′f (i))

m i=1
FF′f (i)

FFjUjU ( m

FFjGj(i))	FU ( m

 

FFjGj(i))

  m  FFjGj(i)


in u-Cat(k+1) is a pullback. The right square is a pullback by Proposition 3.6, so we shall show that the left square is also a pullback. Since F preserves pullbacks by Proposition 3.3, it suffices to show that the square


FjUjU (  m

FFjG(i))
′
m i=1

FF' G(i))

m i=1

FFjG(i))



F′U′U ( m

FF′f (i))

m i=1
FF′f (i))

FjUjU (  m

FFjGj(i))	U ( m



FFjGj(i))


in (u-Cat(k))-Gph is a pullback. By Proposition 2.7, it suffices to show that for
every pair of objects (x(1),..., x(m)), (y(1),..., y(m)) ∈ ob(FjUjU (  m  FFjG(i))) =
ob(G(1) ×· · · × G(m)), the square


F (k)U (k)(  m
(FFjG(i))(x(i), y(i)))	 m

(FFjG(i))(x(i), y(i))




F (k)U (k)(  m  (FFjGj(i))(f (i)x(i),f (i)y(i)))   m  (FFjGj(i))(f (i)x(i),f (i)y(i))
in u-Cat(k) is a pullback. This follows from Proposition 2.10, Proposition 4.3 for n = k, that the left adjoint F (k) preserves small coproducts, Proposition 2.9, Corollary 2.12 (i), and the induction hypothesis.	2
For each natural number n, let T (n) = (T (n), μ(n), η(n)) be the monad on
u-Gph(n) induced by the adjunction F (n) E U (n) : u-Cat(n) —→ u-Gph(n).
Theorem 4.6 For each natural number n, the monad T (n) is cartesian.
Proof. This follows from Proposition 4.2, Proposition 4.4, and Proposition 4.5 (take m = 1).	2
This theorem will allow us to use the theory of T -operads, which we now explain.

T -operads
In this section we shall review T -operads and their algebras for a cartesian monad
T [16].
Proposition 5.1 If T is a cartesian monad on a category C with ﬁnite limits, with terminal object 1, the slice category C/T 1, with objects (p : P —→ T 1), has a monoidal structure as follows. The monoidal product is
(p : P —→ T 1) ⊗ (q : Q —→ T 1) = (q¯ ◦ π2 : (P, p) ∗ Q —→ T 1),
where (P, p) ∗ Q is deﬁned by the pullback below, and q¯ = μ1 ◦ Tq is the Kleisli extension of q:
π2	q¯
(P, p) ∗ Q  TQ  T 1

π1	T !
P	p	T 1
The unit is I = (η1 : 1 —→ T 1), and the coherence isomorphisms are determined by the universal property of pullbacks.
Definition 5.2 Let T be a cartesian monad on a category C with finite limits. A
T -operad is a monoid in the monoidal category (C/T 1, ⊗,I).
The idea is that a cartesian monad T determines a notion of algebraic theory in which T -operads are algebraic theories. In that notion of algebraic theory, the object of arities is given by T 1, and the underlying object (arO : O —→ T 1) ∈ C/T 1 of a T -operad O = ((arO : O —→ T 1), m, e) represents a family of operations indexed by arities.
We denote the category of T -operads, i.e., the category of monoids in (C/T 1, ⊗,I), by T -Opd. Note that we have a canonical forgetful functor
V : T -Opd —→ C/T 1.	(3)

The objective of an algebraic theory is to define a notion of algebra. In the case of T -operads, we define an algebra of a T -operad O to be an object C of C (the base category of the monad T ) equipped with an action of O. We start with a general definition of an action of a monoid in a monoidal category.
Let M = (M, ⊗,I) be a monoidal category and A a category. A pseudo action of M on A is a strong monoidal functor from M to the strict monoidal category ([A, A], ◦, idA) of endofunctors on A. We often transport the structure of a strong monoidal functor along the 2-adjunction (—) ×A E [A, —] and give a pseudo action in terms of a functor ∗ : M×A —→ A together with coherent natural isomorphisms
(X ⊗ Y ) ∗ A ∼= X ∗ (Y ∗ A),	I ∗ A ∼= A

where X, Y ∈M and A ∈ A.
Given a pseudo action ∗ of M on A, we can define an action of a monoid (M, m, e) in M on an object A of A to be a morphism
a : M ∗ A —→ A
in A satisfying the associativity and unit axioms of action.
Now we return to the setting of T -operad. We have a canonical pseudo ac- tion of the monoidal category (C/T 1, ⊗,I) on the category C given by the functor
∗ : (C/T 1) ×C —→ C which maps (p : P —→ T 1) ∈ C/T 1 and C ∈C to (P, p) ∗ C ∈C 
defined as a pullback
π2
(P, p) ∗ C  TC 

π1	T !
P	p	T 1.
An O-algebra for a T -operad O is then defined as an action of O.
Example 5.3 If we let C = Set and T be the free monoid monad, then T -operads coincide with non-symmetric operads. The arities are the natural numbers: T 1 ∼= N.
In more detail, the data of a T -operad in this case consist of a set O, and functions arO : O —→ N, m : (O, arO) ∗ O —→ O and e : 1 —→ O. Unravelling this, we obtain a family of sets (On)n∈N, a family of functions (mn,k1,...kn : On×Ok1 ×· · ·× Okn —→ Ok1+···+kn )n,k1,...,kn∈N, and an element e ∈ O1. We interpret On as the set of all (derived) operations of arity n, and mn,k1,...kn maps a tuple (φ, θ1,..., θn) of operations to their substitution φ(θ1,..., θn). Non-symmetric operads correspond to the subclass of equational theories called strongly regular equational theories [4], that is, theories in which the same variables appear in the same order, without repetition, on either side of any equation. Examples of strongly regular equational theories include the theories of monoids and of monoid actions, but not those of commutative monoids or of groups.
An O-algebra consists of a set C together with a function (O, arO) ∗ C —→ C satisfying the axioms of action. Since (O, arO) ∗C = n∈N On ×Cn, such a function corresponds to a family of functions [φ]] : Cn —→ C for each n ∈ N and φ ∈ On (the interpretation of φ).
Example 5.4 If we let C = n-Gph = Set-Gph(n) and T = T (n) be the free strict n-category monad, then T (n)-operads are known as n-globular operads [16, Section 9.3]. The arities form a n-graph T (n)1, whose element can be seen as a globular pasting scheme.
More precisely, define for any pair of natural numbers n and k ∈ {0,..., n}, a k-cell of an n-graph recursively on n as follows: a 0-cell of an n-graph G is an element of ob(G); a (k + 1)-cell of G is a triple (x, y, θ) where x, y ∈ ob(G) and θ is a k-cell of G(x, y). Then a k-cell of T (n)1 is a k-dimensional globular pasting

scheme. We draw the picture of a typical 2-dimensional globular pasting scheme:


•	•	•	•


The multiplication of an n-globular operad ((arO : O —→ T 1), m, e) composes a cell φ of the n-graph O and a family of cells of O aligned in the shape of the arity of φ. An O-algebra consists of an n-graph C together with a map of n-graphs (O, arO)∗
C —→ C. A k-cell of the n-graph (O, arO) ∗ C is a k-cell φ of O together with a family of cells in C aligned in the shape of the arity of φ. See [16] for more details.
Example 5.5 If we let C = u-Gph(n) for an extensive category u with finite limits and T = T (n) be the free strict n-dimensional u-category monad, then the T (n)- operads are an enriched version of n-globular operads. They are pretty much the same as n-globular operads, the only difference being that it no longer makes sense to talk about individual n-cells; they now form an object of u.

Contractions
In this section we describe the notion of contraction, introduced by Leinster [16], and generalise it to the enriched setting. We follow Garner [10] and define contraction as a choice of certain diagonal fillers. The following definition is an example of the construction described in [11, Proposition 3.8].
Definition 6.1 Let C be a category, J a set, and F = (fj : Aj —→ Bj)j∈J a J - indexed family of morphisms in C.
A contraction (with respect to F) on a morphism g : C —→ D in C is a J - indexed family of functions (κj)j∈J such that for each j ∈ J , κj assigns to every pair of morphisms (h, k) in u which makes the perimeter of (4) commute, a morphism κj(h, k) making the whole diagram (4) commute.

Aj	h	C


fj	g

Bj  D
k
(4)


A map of morphisms with contractions from (g : C —→ D, (κ)j∈J ) to (gj : Cj —→ Dj, (κj )j∈J ) is a map of morphisms (u : C —→ Cj,v : D —→ Dj) from g to gj which commutes with contractions: for each j ∈ J and (h, k) in

the domain of κj, u ◦ κj(h, k)= κj (u ◦ h, v ◦ k).

Aj	Cj


fj	g′

Bj	Dj

In other words, for each j ∈ J , κj is a section of the function ρj below, induced by the universality of pullback.


C(Bj, C)
C(Bj , g)
ρj

Pj	C(Bj, D)



C(fj ,C)

C(Aj, C)



C(Aj , g)
C(fj , D)

C(Aj, D)

As observed in [10], Leinster’s notion of contraction, for each natural number
n, is a special case of Definition 6.1 where C = n-Gph and F is a certain family
F(n) = (f (n),...,f (n) ) consisting of n + 2 morphisms in n-Gph. Before giving a
0	n+1
precise definition, we wish to give an intuitive idea of them by drawing a suggestive
picture. For example, when n = 2 the family can be drawn as

⎛⎜	 

 •	• 

 •  • 


 •  •  ⎞⎟

F(2) =	f (2) ,
⎜
(2)
1
(2)
2
(2)
3
⎟

⎜⎝  • 
 •	• 
 •	• 
 •	•  ⎟⎠


The idea is that an element of F(n) is “the inclusion of a sphere into a ball”, although

(n)
n+1
is no longer a monomorphism due to lack of cells of dimension greater than n.

To give a recursive definition of F(n) in the enriched setting, we start with auxil- iary definitions. For any category uj with an initial object 0, define the suspension functor Σ: uj —→ uj-Gph which maps X ∈ u to ΣX = ({s, t}, (ΣX(i, j))i,j∈{s,t}) given by ΣX(s, t) = X, ΣX(i, j) = 0 if (i, j) /= (s, t); cf. [16, Section 9.3]. Also define the discrete uj-graph functor D : Set —→ uj-Gph which maps a set I to DI = (I, (0)i,j∈I ). The functor D is the left adjoint of ob(—): uj-Gph —→ Set.
Definition 6.2 Let u be an extensive category with finite limits. For each natu- ral number n, define a family F(n) = (f (n),...,f (n) ) of morphisms in u-Gph(n)
0	n+1

recursively as follows.
f (0) : 0 —→ 1 and f (0) : 1 + 1 —→ 1 are the unique morphisms in u into the
0	1
terminal object 1.
f (n) : D∅ —→ D{∗}, where ∅ and {∗} are the empty set and a singleton respec- tively, is the unique morphism in u-Gph(n) out of the initial object D∅, and
for each i ∈ {1,...,n + 1}, f (n) = Σf (n—1).
i	i—1
For each object X ∈ u-Gph(n), we have the category Contr7 (n) (X) of mor- phisms into X with contractions (with respect to F(n)), whose objects are mor- phisms g with contractions as in Definition 6.1 (i) such that the codomain of g is X, and whose morphisms are maps of morphisms with contractions (u, v) as in Definition 6.1 (ii) such that v = idX . Note that we have the canonical forgetful functor
V j : Contr7 (n) (X) —→ u-Gph(n)/X.	(5)
We will in particular be concerned with the case where X = T (n)1.

Weak n-categories enriched over locally presentable and extensive categories
Following Leinster, for any extensive category u with finite limits (with additional condition; see below) and any natural number n, we define a weak n-dimensional u- category to be an algebra of the initial T (n)-operad with contraction. More precisely, define the category T (n)-OC of T (n)-operads with contraction to be the following pullback of categories:
T (n)-OC	Contr7 (n) (T (n)1)



T (n)-Opd
V
V ′


u-Gph(n)/T (n)1,


where the forgetful functors V and V j are the suitable instances of (3) and (5) respec- tively. If the category T (n)-OC has an initial object ((arL : L —→ T (n)1), m, e, κ), then by the initial T (n)-operad with contraction we mean its underlying T (n)-operad ((arL : L —→ T (n)1), m, e) (forgetting the contraction κ).
Our final task, therefore, is to prove that T (n)-OC actually has an initial object, perhaps under some additional condition on u. For this, we have the following theorem.
Theorem 7.1 If u is a locally presentable and extensive category, then for any natural number n the category T (n)-OC has an initial object.
Proof. We shall follow the argument in [16, Appendix G] (where u = Set and
n = ω) and show that u-Gph(n)/T (n) is locally presentable (hence is both complete

and cocomplete), and that V and V j are monadic and have ranks (i.e., preserve α- filtered colimits for some regular cardinal α). Then by [13, Theorem 27.1] it follows that the forgetful functor from T (n)-OC to u-Gph(n)/T (n)1 is also monadic, thus in particular T (n)-OC has an initial object, given by the free algebra over the initial object in u-Gph(n)/T (n)1.
If uj is locally presentable, then so is uj-Gph (see e.g., [15, Proposition 4.4]). Applying this iteratively, we see that u-Gph(n) is locally presentable. Hence so is u-Gph(n)/T (n)1, being its slice. The functor V is monadic because it is the forgetful functor from a category of monoids and admits a left adjoint G (which, incidentally, is of a particularly simple form GP = n∈N P⊗n thanks to Proposition 4.3). It is routine to show that V has a rank. That the functor V j is monadic and has a rank can be deduced easily from [2].	2
The condition of u being locally presentable and extensive is an axiomatic reason why Batanin and Leinster’s approach works. Of course the category Set satisfies this condition, but in their work this fact is used only implicitly, often in the form of concrete set-theoretic manipulation.
Definition 7.2 Let u be a locally presentable extensive category and n a natural number. A weak n-dimensional u-category is an algebra of the initial T (n)- operad with contraction, where T (n) is the free strict n-dimensional u-category monad on u-Gph(n).
We remark that when u(1, —) is not conservative, it might be more appropriate to replace (i) of Definition 6.2 by the family of morphisms 0 —→ X and X +X —→ X (codiagonal) where X ranges over a set of strong generators of u (exists if u is locally presentable). We thank an anonymous reviewer for pointing this out.
Example 7.3 If we let u = Set and n = 2, then weak 2-categories (weak 2- dimensional Set-categories) are equivalent to unbiased bicategories, which are a variant of bicategories equipped with for each natural number m, an m-ary hori- zontal composition operation. See [16, Section 9.4] for details.
Example 7.4 If we let u = ω-Cpo and n = 2, then weak 2-dimensional ω-Cpo- categories are the unbiased version of ω-Cpo-enriched bicategories as in [18].

References
Batanin, M. A., Monoidal globular categories as a natural environment for the theory of weakn- categories, Advances in Mathematics 136 (1998), pp. 39–103.
Bourke, J. and R. Garner, Algebraic weak factorisation systems I: accessible AWFS, Journal of Pure and Applied Algebra 220 (2016), pp. 108–147.
Burroni, A., T -cat´egories (cat´egories dans un triple), Cahiers Topologie G´eom. Diff´erentielle 12 (1971),
pp. 215–321.
Carboni, A. and P. Johnstone, Connected limits, familial representability and artin glueing, Mathematical Structures in Computer Science 5 (1995), pp. 441–459.
Carboni, A., S. Lack and R. F. Walters, Introduction to extensive and distributive categories, Journal of Pure and Applied Algebra 84 (1993), pp. 145–158.

Cattani, G. L. and G. Winskel, Profunctors, open maps and bisimulation, Mathematical Structures in Computer Science 15 (2005), pp. 553–614.
Cockett, J. R. B., Introduction to distributive categories, Mathematical Structures in Computer Science
3 (1993), pp. 277–307.
Cottrell, T., S. Fujii and J. Power, Enriched and internal categories: an extensive relationship, Tbilisi Mathematical Journal 10 (2017), pp. 239–254.
Fiore, M., G. Plotkin and D. Turi, Abstract syntax and variable binding, in: Logic in Computer Science, 1999. Proceedings. 14th Symposium on, IEEE, 1999, pp. 193–202.
Garner, R., A homotopy-theoretic universal property of Leinster’s operad for weak ω-categories,, 147, Cambridge University Press, 2009, pp. 615–628.
Garner, R., Understanding the small object argument, Applied categorical structures 17 (2009), pp. 247– 285.
Hermida, C., M. Makkai and J. Power, Higher dimensional multigraphs, in: Logic in Computer Science, 1998. Proceedings. Thirteenth Annual IEEE Symposium on, IEEE, 1998, pp. 199–206.
Kelly, G., A unified treatment of transfinite constructions for free algebras, free monoids, colimits, associated sheaves, and so on, Bulletin of the Australian Mathematical Society 22 (1980), pp. 1–83.
Kelly, G., On clubs and data-type constructors, Applications of Categories in Computer Science 177
(1992), pp. 163–190.
Kelly, G. and S. Lack, V-Cat is locally presentable or locally bounded if V is so, Theory Appl. Categ 8
(2001), pp. 555–575.
Leinster, T., “Higher operads, higher categories,” London Mathematical Society Lecture Note Series
298, Cambridge University Press, Cambridge, 2004, xiv+433 pp.
Power, J., Why tricategories?, Information and Computation 120 (1995), pp. 251–262.
Power, J. and M. Tanaka, Category theoretic semantics for typed binding signatures with recursion, Fundamenta Informaticae 84 (2008), pp. 221–240.
Pratt, V., Modeling concurrency with geometry, in: Proceedings of the 18th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, POPL ’91 (1991), pp. 311–322.
URL http://doi.acm.org/10.1145/99583.99625

Wolff, H., V-cat and V-graph, Journal of Pure and Applied Algebra 4 (1974), pp. 123–135. URL http://www.sciencedirect.com/science/article/pii/0022404974900188
