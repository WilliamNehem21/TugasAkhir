Available online at www.sciencedirect.com


Electronic Notes in Theoretical Computer Science 286 (2012) 351–365
www.elsevier.com/locate/entcs

Data Types with Symmetries and Polynomial Functors over Groupoids
Joachim Kock1,2
Departament de Matem`atiques Universitat Aut`onoma de Barcelona Spain

Abstract
Polynomial functors (over Set or other locally cartesian closed categories) are useful in the theory of data types, where they are often called containers. They are also useful in algebra, combinatorics, topology, and higher category theory, and in this broader perspective the polynomial aspect is often prominent and justifies the terminology. For example, Tambara’s theorem states that the category of finite polynomial functors is the Lawvere theory for commutative semirings [45], [18].
In this talk I will explain how an upgrade of the theory from sets to groupoids (or other locally cartesian closed 2-categories) is useful to deal with data types with symmetries, and provides a common generalisation of and a clean unifying framework for quotient containers (in the sense of Abbott et al.), species and analytic
functors (Joyal 1985), as well as the stuff types of Baez and Dolan. The multi-variate setting also includes relations and spans, multispans, and stuff operators. An attractive feature of this theory is that with the correct homotopical approach — homotopy slices, homotopy pullbacks, homotopy colimits, etc. — the groupoid case looks exactly like the set case.
After some standard examples, I will illustrate the notion of data-types-with-symmetries with examples from perturbative quantum field theory, where the symmetries of complicated tree structures of graphs play a crucial role, and can be handled elegantly using polynomial functors over groupoids. (These examples, although beyond species, are purely combinatorial and can be appreciated without background in quantum field theory.)
Locally cartesian closed 2-categories provide semantics for a 2-truncated version of Martin-L¨of intensional type theory. For a fullfledged type theory, locally cartesian closed ∞-categories seem to be needed. The
theory of these is being developed by David Gepner and the author as a setting for homotopical species,
and several of the results exposed in this talk are just truncations of ∞-results obtained in joint work with Gepner. Details will appear elsewhere.
Keywords: Polynomial functors, groupoids, data types, symmetries, species, trees.


Polynomial functors over Set and data types
Polynomial functors in one variable. In its simplest form, a polynomial
1 Email: kock@mat.uab.cat
2 The author has profited greatly from related collaborations with Andr´e Joyal, Nicola Gambino, An- ders Kock, Imma G´alvez, Andy Tonks, and notably David Gepner. Partial support from research grants MTM2009-10359 and MTM2010-20692 of Spain is gratefully acknowledged.

1571-0661 © 2013 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2013.01.001

functor is an endofunctor of Set of the form
X '→	XEb .	(1)
b∈B

Here the sum sign is disjoint union of sets, XEb denotes the hom set Hom(Eb, X), and (Eb | b ∈ B) is a B-indexed family of sets, encoded conveniently as a single map of sets
E → B.

Viewed as a data type constructor, E → B is often called a container [1,2,3,4,5,7]; then B is regarded as a set of shapes, and the fibre Eb is the set of positions in the shape corresponding to b. The data to be inserted into these positions can be of any type X: the polynomial functor receives a type X (a set) and returns the new more elaborate type  XEb . Polymorphic functions correspond to natural transformations of polynomial functors, and these can be handled in terms of the representing sets E → B alone, cf. [1], [18], and 2.6 below. A fundamental example is the list functor, X '→  n∈N Xn, which to a set X associates the set of lists of elements in X. Here n ∈ N is the shape, and n denotes the n-element set
{0, 1, . . . , n − 1} of positions in a length-n list.
There is another important use of polynomial functors in type theory: one then regards E → B as a signature generating an algebra, namely the initial algebra for the polynomial functor. Initial algebras for polynomial functors are inductive data types, corresponding to W-types in (extensional) Martin-L¨of type theory [42], [40]. Similarly, terminal coalgebras are coinductive data types (sometimes called M-types), often interpreted as programs or systems (see for example [43], [23]).
Species and analytic functors. A functor is finitary when it preserves ω- filtered colimits. For a polynomial functor this is equivalent to E → B having finite fibres. Let Bω denote the groupoid of finite sets and bijections. A species [26] is a functor F : Bω → Set, written S '→ F [S]; the set F [S] is to be thought of as the set of F -structures that can be put on the set S. The extension of F is the endofunctor
Set −→  Set	(2)

X −→

n∈N
Aut(n)

which is the left Kan extension of F along the (non-full) inclusion Bω ⊂ Set. A functor of this form is called analytic [27]. Joyal established an equivalence of categories between species and analytic functors, and characterised analytic functors as the finitary functors preserving cofiltered limits and weak pullbacks [27], see also [24] and [6]. Finitary polynomial functors are precisely the analytic functors which preserve pullbacks strictly. In terms of species they correspond to those for which the symmetric group actions are free.
Monoids in species (under the operation of substitution, which corresponds to composition of analytic functors) are precisely operads. Many important polyno- mial functors have the structure of monad. For example, the list functor has a

natural monad structure by concatenation of lists. Polynomial monads equipped with a cartesian monad map to the list monad are the same thing as non-symmetric operads [37]. More generally, finitary polynomial monads correspond to projective operads [32] (i.e. such that every epi to it splits).
Polynomial functors in many variables. Following [18], a polynomial is a diagram of sets
s	p	t
I →− E −→ B −→ J,	(3)
and the associated polynomial functor (or the extension of the polynomial) is given by the composite

Set/I −→

Set

Πp	Σ
/E −→ Set/B −→

Set/J
,	(4)

where ∆s is pullback along s, Πp is the right adjoint to pullback (called dependent product), and Σt is left adjoint to pullback (called dependent sum). For a map f : B → A we have the three explicit formulae
∆f (Xa | a ∈ A) = (Xf (b) | b ∈ B)	(5)
Σf (Yb | b ∈ B) = (  Yb | a ∈ A)	(6)
b∈Ba
Πf (Yb | b ∈ B) = (  Yb | a ∈ A) ,	(7)
b∈Ba
giving altogether the following formula for (4)
(Xi | i ∈ I) −→ ( Σ Y Xs(e) | j ∈ J ),
b∈Bj e∈Eb
which specialises to (1) when I = J = 1.
The multi-variate polynomial functors correspond to indexed containers [7], and their initial algebras are sometimes called general tree types [41, Ch. 16].
From the abstract description in terms of adjoints, it follows that the notion of polynomial functor (and most of the theory) makes sense in any locally cartesian closed category, and polynomial functors are the most natural class of functors between slices of such categories. They have been characterised intrinsically [31] as the local fibred right adjoints.
Incorporating symmetries. A container is a rigid data structure: it does not allow for data to be permuted in any way among the positions of a given shape. In many situations it is desirable to allow for permutation, so that certain posi- tions within a shape become indistinguishable. In quantum physics, the principle of indistinguishable particles imposes such symmetry at a fundamental level. A fundamental example is the multiset data type, whose extension is the functor
n
X '→	,	(8)
n∈N Aut(n)

which is analytic but not polynomial.
In order to account for such data types with symmetries, Abbott et al. [5] (see also Gylterud [22]) have extended the container formalism by adding the symmetries ‘by hand’: for each shape (element b in B) there is now associated a group of symmetries of the fibre Eb, and data inserted into the corresponding positions is quotiented out by this group action. It is not difficult to see (cf. also [6]) that in the finitary case, this is precisely the notion of species and analytic functors.
In fact it has been in the air for some time (see for example [14], and more re- cently [12], [47]) that species should be a good framework for data type theory. It is the contention of the present contribution that polynomial functors over groupoids provide a clean unifying framework: in the setting of groupoids, the essential dis- tinction between ‘analytic’ and ‘polynomial’ evaporates (3.7), and the functors can be represented by diagrams with combinatorial content (3) just as polynomials over sets, as we proceed to explain.
From the viewpoint of species, there are other reasons for this upgrade anyway. In fact, it was soon realised by combinatorists that the 1985 notion of analytic functors is not optimal for enumerative purposes: taking cardinality simply does not yield the exponential generating functions central to enumerative combinatorics! (It does so if the analytic functor is polynomial.) In fact, the Species Book [11] does not mention analytic functors at all.
The issue was sorted out by Baez and Dolan [9]: the problem is that dividing out by the group action in (2) is a bad quotient from the viewpoint of homotopy theory, and does not behave well with respect to cardinality. To get the correct cardinalities, it is necessary to use homotopy quotients, and the result is then no longer a set but a groupoid, and the cardinality has to be homotopy cardinality. So it is necessary to work from the beginning with groupoids instead of sets. Baez and Dolan introduced species in groupoids (3.6), dubbing them stuff types, showed that homotopy cardinality gives the correct generating functions, and illustrated the usefulness of the broader generality by showing how the types needed for a combinatorial description of the quantum harmonic oscillator are stuff types, not classical species [9].
Joint work with David Gepner closes the circle by observing that over groupoids, species/analytic functors are the same thing as discrete finitary polynomial func- tors (3.7); hence the neat formalism of polynomials provides a natural unifying framework for (quotient) containers and species.
Polynomial functors over groupoids

A groupoid is a category in which all arrows are invertible. A useful intuition for the present purposes is that groupoids are ‘sets fattened with symmetries’. From the correct homotopical viewpoint groupoids behave very much like sets. We are inter- ested in groupoids up to equivalence, and for this reason many familiar 1-categorical notions, such as pullback and fibre, are not appropriate, as they are not invariant un- der equivalence. The good notions are the corresponding homotopy notions, which

we briefly recall. They can all be deduced from the beautiful simplicial machinery developed by Joyal [28,29] to generalise the theory of categories to quasi-categories (called ∞-categories by Lurie [38]). Since the 2-category Grpd of groupoids has only invertible 2-cells, it is an example of a quasi-category. From now on when we say 2-category we shall mean ‘2-category with only invertible 2-cells’.
Slices. If I is a groupoid, the homotopy slice Grpd/I is the 2-category of projective cones with base I (cf. [28]): its objects are maps X → I; its arrows are triangles with a 2-cell

and 2-arrows are diagrams
X✻✻✻
✻✻✻⇒
˛c I
z, Y
✟✟✟
  ✟✟

X✻✻	⇑	¸s,5 Y
✻✻✻⇒⇒ ✟✟✟✟

✻c˛
I
  ✟✟

commuting with the structure triangles. More generally, if d : T → Grpd is any diagram, there is a 2-category Grpd/d of projective cones with base d.
A homotopy terminal object in a 2-category C is an object t such that for any other object x, the groupoid C (x, t) is contractible, i.e. equivalent to a point. More general homotopy limits are defined in the usual way using homotopy slices: the ho- motopy limit of a functor d : T → Grpd is by definition a homotopy terminal object in the homotopy slice Grpd/d. Homotopy limits are unique up to equivalence.
Pullbacks and fibres. Given a diagram of groupoids X, Y, S indicated by the solid arrows,
X ×✤ S ✤Y ❴ ❴ ❴,z Y
✤ ❴	g
✤, 	 ,
X	f	z, S


the homotopy pullback is the homotopy limit, i.e. given as a homotopy terminal object in a a certain slice 2-category of projective cones over the solid diagrams of the shape in question, and as such it is determined uniquely up to equivalence. A specific model is the groupoid X ×S Y whose objects are triples (x, y, φ) with x ∈ X, y ∈ Y and φ : fx → gy an arrow of S, and whose arrows are pairs (α, β) : (x, y, φ) → (x′, y′, φ′) consisting of α : x → x′ an arrow in X and β : y → y′ an arrow in Y such that the following diagram commutes in S
fx   φ	z, gy

f (α)
f x, ′
φ
g(β)
,z gy, ′.


(One should note that if f or g is a fibration then the na¨ıve set-theoretic pullback is equivalent to the homotopy pullback.)

The homotopy fibre Eb of a morphism p : E → B over an object b in B is the homotopy pullback of p along the inclusion map 1  pb’ ,z B :

Eb
❴
1, 





pb’
,z E
p
,z B , .

(Note that the homotopy fibre Eb is not in general a subgroupoid of E, although the map Eb → E is always faithful. But again, if p is a fibration then the set-theoretic fibre is equivalent to the homotopy fibre.)
Homotopy quotients. Whenever a group G acts on a set or a groupoid X, the homotopy quotient X/G is the groupoid obtained by gluing in a path (i.e. an arrow) between x and y for each g ∈ G such that gx = y. More formally it is the total space of the Grothendieck construction of the presheaf G → Grpd that the action constitutes; it is a special case of a homotopy colimit. (The notation X//G is often used [9].) If G acts on the point groupoid 1, then 1/G is the groupoid with one object and vertex group G.
If p : X → B is a morphism of groupoids, for b ∈ B the ‘inclusion’ of the homotopy fibre Xb → X is faithful but not full in general. But Aut(b) acts on Xb canonically, and the homotopy quotient Xb/ Aut(b) provides exactly the missing arrows, so as to make the natural map Xb/ Aut(b) → X fully faithful. Since every object x ∈ X must map to some connected component of B, we find the equivalence

X ≃
b∈π0B
Xb/ Aut(b) =:
∫ b∈B
Xb,	(9)

expressing X as the homotopy sum of the fibres, or equivalently as a family of groupoids (indexed by π0(B) and with a group action in each). Given morphisms
p	f

of groupoids Y
→ B → A, we have the following ‘Fubini formula’:
b∈B	a∈A	b∈Ba
Yb ≃	Yb

which is actually the formula for the ‘dependent-sum’ functor Σf : Grpd/B →
Grpd/A given by postcomposition. In family notation the formula reads
Σf (Yb | b ∈ B) = (∫ b∈Ba Yb | a ∈ A) ,
just as Formula (6) in the Set case.
Pullback along f : B → A, denoted ∆f , is right adjoint to Σf . This means of course homotopy adjoint, and amounts to a natural equivalence of mapping groupoids Grpd/A(Σf Y, X) ≃ Grpd/B (Y, ∆f X). The proof relies on the universal property of the pullback. One may note the following formula for pullback, in family notation:
∆f (Xa | a ∈ A) = (Xf (b) | b ∈ B),

again completely analogous to the Set case (Formula (5)).
The 2-category of groupoids is locally cartesian closed. This means that the pullback functor in turn has a right adjoint Πf : Grpd/B → Grpd/A. The general formula is an end formula; for Y → B, the fibre of Πf Y over a ∈ A can be described explicitly as the mapping groupoid
(Πf Y )a = Grpd/B (Ba, Y ).
(A more explicit formula will be derived in the discrete case below.)
Polynomial functors. A polynomial is a diagram of groupoids
s	p	t
I →− E −→ B −→ J.


The associated polynomial functor (or the extension of the polynomial) is given as the composite


Grpd/I
−∆→s
Grpd
Πp
/E −→ Grpd/B
−Σ→t
Grpd/J.


Beck–Chevalley, distributivity, and composition. Given a homotopy pullback square

ψ
· ❴✤
α
,z ·
β

· ,
ϕ     z, · ,

there are natural equivalences of functors
Σα ◦ ∆ψ →∼ ∆ϕ ◦ Σβ	and	∆β ◦ Πϕ →∼ Πψ ◦ ∆α,
usually called the Beck–Chevalley conditions. A more subtle feature of the theory is distributivity, which in this setting is an equivalence saying how to distribute dependent products over dependent sums (and which can be interpreted as a type- theoretic form of the axiom of choice [39]). We shall not need the details here. See [18] for the classical case, and Weber [46] for a deeper treatment. The Beck– Chevalley conditions and distributivity yield a formula for composing polynomial functors [18].
Natural transformations. Just as in the classical case [18], homotopy carte- sian natural transformations P ′ ⇒ P of polynomial functors (in one variable) cor- respond precisely to homotopy cartesian diagrams
E′	,z B′
❴


E ,
	,z B , .

This is an easy consequence of Beck–Chevalley. Showing more generally that arbi- trary natural transformations are given essentially uniquely by diagrams
E¸¸ ′ 	,z B′


· ❴✤
z, B′



E ,
 	z, B ,


is a bit more involved and depends on a homotopy version of the Yoneda lemma. (At the time of this writing, this result is not as precise as in the 1-dimensional case of [18].)
Spans and stuff operators. Spans of groupoids are the special case of groupoid polynomials where the middle map is the identity (or an equivalence). These constitute a categorification of matrix algebra, and were called stuff opera- tors by Baez and Dolan [9]; they have been used to give groupoid models for certain aspects of Hecke algebras and Hall algebras [10].
Exactness;  combinatorial  polynomial  functors
The following results from [21] are actually proved in the much richer setting of
∞-groupoids, but the proofs work also for 1-groupoids. We now suppress the clumsy ‘homotopy’ everywhere, although of course all limits and colimits mentioned refer to the homotopy notions.
Theorem 3.1 (Gepner-Kock [21].) A functor Grpd/I → Grpd/J is polynomial if and only if it is accessible and preserves conical limits.
By conical limit we mean limit over a diagram with a terminal vertex. Recall that a functor is accessible [38, Ch. 5] when it preserves κ-filtered colimits for some regular cardinal κ. The regular cardinal here is explicitly characterised:
p
Proposition 3.2 ([21]) A polynomial functor given by I → E → E → J preserves
κ-filtered colimits if and only if p has κ-compact fibres.

An important case is κ = ω. A groupoid is ω-compact when it has finitely many components (i.e. π0(X) is a finite set) and all vertex groups are finitely presented.
3.3 Discreteness. For many data types occurring in practice (including species and all the examples below), although they may have symmetries, the positions in each shape form a discrete groupoid, i.e. a groupoid equivalent to a set. In the polynomial formalism this amounts to the middle map p : E → B having discrete fibres. In this case, the dependent product formula simplifies to


(ΠpY )b =
e∈π0(Eb)
Ye,

in analogy with (7), and hence all the formulae look exactly like the Set case.
The corresponding exactness condition is preservation of sifted colimits. A κ- sifted colimit is a colimit over a diagram D whose diagonal D → DS is cofinal for every set S of cardinality < κ [38, Ch. 5].
p
Proposition 3.4 ([21]) A polynomial functor given by I → E → E → J preserves
κ-sifted colimits if and only if p has κ-compact discrete fibres.
3.5 Combinatorial polynomial functors. We call a polynomial functor I →
p
E → B → J combinatorial if the fibres of p are equivalent to finite sets (i.e. are
ω-compact discrete).
3.6 Species in groupoids (stuff types). A Baez-Dolan stuff type [9] is a map of groupoids F → Bω. We prefer the name species in groupoids. (A classical species is when the map has discrete fibres, or equivalently is faithful.) Its extension is the left homotopy Kan extension of n '→ Fn along Bω ⊂ Grpd:

Grpd −→ Grpd
X −→
n∈π0(Bω )=N

Fn × Xn
.
Aut(n)

(That’s a homotopy quotient of course.)
This functor is polynomial [21]: the representing groupoid map is the top row in the pullback

E ❴✤
z, F



B, ′
ω
	z, B, .

This map has finite discrete fibres since B′
→ Bω has. (Here B′
is the groupoid

of finite pointed sets.) Conversely, given a groupoid polynomial E → F with finite
discrete fibres, the ‘classifying map’ F → Bω (obtained since B′ → Bω classifies
finite discrete fibrations) yields a species in groupoids. One can check that the extension of the polynomial agrees with the extension of the species. In conclusion:
Proposition 3.7 ([21]) Combinatorial polynomial functors Grpd → Grpd are the same thing as analytic functors (in the sense of Baez-Dolan).
Combining these results we get a ‘Joyal theorem’:
Corollary 3.8 ([21]) A functor Grpd → Grpd is analytic (in the sense of Baez-
Dolan) if and only if it preserves ω-sifted colimits and conical limits.

3.9 Generalised species. The relationship between polynomial functors and the generalised species of [15] has been sketched by Gambino and the author (unpub- lished). A generalised species depends on two categories I and J , and has as ex- tension a generalised analytic functor PrSh(I) → PrSh(J ); this generalises the 1985 notion but not the Baez-Dolan notion. If I and J are groupoids, these gen- eralised analytic functors correspond to the ‘classical’ extension of combinatorial polynomials over groupoids, i.e. involving π0 on quotients.

3.10 Examples. Groupoid polynomials encode data types in groupoids. For ex-
ample, B′ → Bω encodes the multiset data type: the groupoid Bω of finite sets
and bijections is the groupoid of shapes — the shape of a multiset is really the set indexing its elements, not just its size. There are N-many isoclasses; the isomor- phisms should be interpreted as propositional equality. The fibre over S ∈ Bω is the discrete groupoid of positions in S, i.e. a uniform prescription of positions in
multisets indexed by S. Indeed, since B′ → Bω is a fibration, the fibre is canonically
identified with the set S itself — note its natural Aut(S)-action. The discreteness of the fibre means that propositional equality between positions can be regarded as definitional equality. The extension of this quotient container is naturally an endo- functor Grpd → Grpd. But one obtains an endofunctor Set → Set (in this case precisely (8)) by precomposing with the natural inclusion Set → Grpd and post- composing with π0 : Grpd → Set. The first is harmless. The second corresponds to collapsing all isomorphisms to identity, i.e. interpreting propositional equality as definitional equality. If the argument is a set, the only collapse is the passage from homotopy quotient to na¨ıve quotient (of actions on sets).
The data type of cyclic lists is groupoid polynomial, represented by C′ → Cω,

where Cω is the groupoid of finite cyclically ordered sets, and C′
is the groupoid

of pointed cyclically ordered finite sets. From 1.1, the list data type is represented by N′ → N, interpreted as the groupoids of linearly ordered finite sets and pointed ditto. The diagram of groupoids
N′	,z N
❴


C, ′
 	,z C ,

ω❴✤	ω


B, ′
ω
 	z, B ,


now represents the cartesian natural transformations, or polymorphic functions, from lists to cyclic lists to multisets.
Trees

W-types in Martin-L¨of type theory correspond to initial algebras of polynomial functors (cf. [40] and [17] for the extensional case, and [8] for the fully intensional case). The initial algebra for 1 + P can also be described as the set of operations for the free monad on P , which in turn is the set of P-trees. P -trees (for P a polynomial functor over Set or any lccc) are always rigid, i.e. have no symmetries. Abstract trees, on the other hand, admit symmetries, so they are not P -trees for any Set- polynomial functor P , and they are neither W-types nor containers in the classical sense. Instead, according to [32], abstract trees are themselves polynomial functors. It is convenient to take the following characterisation of trees as a definition:

Trees. ([32]) A (finite) tree is a diagram of finite sets
s	p	t
A →− M −→ N −→ A
satisfying the following three conditions:
t is injective
s is injective with singleton complement (called root and denoted 1).
With A = 1 + M , define the walk-to-the-root function σ : A → A by 1 '→ 1 and
e '→ t(p(e)) for e ∈ M .
∀x ∈ A : ∃k ∈ N : σk(x) = 1.
The elements of A are called edges. The elements of N are called nodes. For b ∈ N , the edge t(b) is called the output edge of the node. That t is injective is just to say that each edge is the output edge of at most one node. For b ∈ N , the elements of the fibre Mb are called input edges of b. Hence the whole set M =  b∈N Mb can be thought of as the set of nodes-with-a-marked-input-edge, i.e. pairs (b, e) where b is a node and e is an input edge of b. The map s returns the marked edge. Condition
(2) says that every edge is the input edge of a unique node, except the root edge. Condition (3) says that if you walk towards the root, in a finite number of steps you arrive there. The edges not in the image of t are called leaves.
Decorated trees: P -trees ([32]; see also [33,34,35]) An efficient way of encod- ing and manipulating decorations of trees is in terms of polynomial endofunctors.

Let P be a polynomial endofunctor given by I
diagram
d	q
→ E → B
c
→ I. A P-tree is a

A ,r
M	z, N 	z, A
❴
(10)

I ,  ,r
E, 
	z, B, 
	z, I, ,

where the top row is a tree. The squares are commutative up to isomorphism, and it is important that the 2-cells be specified as part of the structure. Unfolding the definition, we see that a P -tree is a tree whose edges are decorated in I, whose nodes are decorated in B, and with the additional structure of an equivalence Mn ≃ Eb for each node n ∈ N with decoration b ∈ B (this is essentially just a bijection, since the fibres are discrete), an iso in I between the decoration of an edge m ∈ Mn and the corresponding d(e), and finally an iso in I between the decoration of the output edge of n and c(b).
Examples of P -trees. Natural numbers are P -trees for the identity monad P (X) = X, and are also the set of operations of the list monad. Planar finite trees are P -trees for P the list monad, and are also the set of operations of the free-non-symmetric-operad monad [37]. These two examples are the first entries of a canonical sequence of inductive data types underlying several approaches to higher category theory, the opetopes: opetopes in dimension n are P -trees for P a Set-polynomial functor whose operations are (n − 1)-opetopes [35]; hence opetopes are higher-dimensional trees.
Abstract finite trees are P -trees for the multiset functor 1 → B′ → Bω → 1, but

cannot be realised as P -trees for any Set-polynomial P .
Trees  of  Feynman  graphs.   In the so-called BPHZ renormalisation of perturbative quantum field theories, one is concerned with nestings of 1-particle irreducible (1PI) Feynman graphs, i.e. graphs [30] for which no single edge removal disconnects. Kreimer [36] discovered that the BPHZ procedure is encoded in a Hopf algebra of (non-planar) rooted trees, expressing the nesting of graphs.

2 : 
3 : 

In the picture the combinatorial tree in the middle expresses the nesting of 1PI subgraphs on the left; such trees are sufficient in Kreimer’s Hopf-algebra approach to BPHZ, but do not capture the symmetries of the graph. To this end, further decoration is needed in the tree, as partially indicated on the right. First of all, each node in the tree should be decorated by the 1PI graph it corresponds to in the nesting, and second, the tree should have leaves (input slots) corresponding to the vertices of the graph. The decorated tree should be regarded as a recipe for reconstructing the graph by inserting the decorating graphs into the vertices of the graphs of parent nodes. The numbers on the edges indicate the type constraint of each substitution: the outer interface of a graph must match the local interface of the vertex it is substituted into. But the type constraints on the tree decoration are not enough to reconstruct the graph, because for example the small graph  decorating the left-hand node could be substituted into various different vertices of the graph .
The solution found in [34] is to consider P -trees, for P the polynomial endo-
s	p	t
functor given by I → E → B → I, where I is the groupoid of interaction labels for the theory (in this case the one-vertex graphs  and  ) and B is the groupoid of connected 1PI graphs of the theory, and E is the groupoid of such 1PI graphs with a marked vertex. The map s returns the one-vertex subgraph at the mark, p forgets the mark, and t returns the outer interface of the graph, i.e. the graph obtained by contracting everything to a point, but keeping the external lines. A P -tree is hence a diagram like (10) with specified 2-cells. These 2-cells carry much of the structure: for example the 2-cell on the right says that the 1PI graph decorating a given node must have the same outline as the decoration of the outgoing edge of the node — or more precisely, and more realistically: an isomorphism is specified (it’s a bijection between external lines of one-vertex graphs). Similarly, the left-hand 2-cell specifies for each node-with-a-marked-incoming-edge x′ ∈ M , an isomorphism between the one-vertex graph decorating that edge and the marked vertex of the graph decorat- ing the marked node x′. Hence the structure of a P -tree is a complete recipe not only for which graphs should be substituted into which vertices, but also how: spe-

cific bijections prescribe which external lines should be identified with which lines in the receiving graph. In fact, there is an equivalence of groupoids between nested graphs and P-trees [34]. This is exploited in [16] to establish algebraic identities concerning graphs by interpreting them as homotopy cardinalities of equivalences of groupoids of decorated trees.
Notice that the polynomial functor P is combinatorial, since each graph has a discrete finite set of vertices. It is not a species in the classical sense though: the classifying map B → Bω sends a graph to its set of vertices, and since a graph may have nontrivial automorphisms that fix every vertex, this map does not have discrete fibres.
Outlook

A 2-category is called locally cartesian closed when for every arrow f : B → A, we have the string of adjoint functors Σf ⊣ ∆f ⊣ Πf . This structure formally implies the Beck-Chevalley equivalences and distributivity, which are the minimal requirements for a reasonable theory of polynomial functors. The theory of strength can be copied almost verbatim from [18], and it seems that the representation theorem of [18] also carries over.
While locally cartesian closed categories provides semantics for an extensional version of Martin-L¨of type theory [44], [13], and locally cartesian closed 2-categories capture some 2-truncated version ([25], [19]), recent insight of Homotopy Type Theory strongly suggests that in the long run, the case of ∞-groupoids and other locally cartesian closed ∞-categories will be the real meat for type theory. Large parts of the ∞-theory of polynomial functors, as well as aspects of the theory of locally cartesian closed ∞-categories geared towards Homotopy Type Theory have already been worked out in joint work with David Gepner, and will appear elsewhere [21], [20]. Nevertheless the groupoid case is interesting in its own right, since it already covers important applications: in particular for many purposes of combinatorial nature, 1-groupoids are all that is needed in order to handle symmetry issues. Time will tell whether for purposes of program semantics the groupoid level is enough too — otherwise it is a good stepping stone into the ∞-world.
References
Abbott, M., “Categories of Containers,” Ph.D. thesis, University of Leicester, 2003. Available from
http://www.mcs.le.ac.uk/~ma139/docs/thesis.pdf.
Abbott, M., T. Altenkirch and N. Ghani, Categories of containers, in: Foundations of software science and computation structures, Lecture Notes in Comput. Sci. 2620 (2003), pp. 23–38.

Abbott, M., T. Altenkirch and N. Ghani, Containers: constructing strictly positive types, Theoret. Comput. Sci. 342 (2005), pp. 3–27.

Abbott, M., T. Altenkirch, N. Ghani and C. McBride, Derivatives of containers, in: Typed lambda calculi and applications (Valencia, 2003), Lecture Notes in Comput. Sci. 2701 (2003), pp. 16–30.

Abbott, M., T. Altenkirch, N. Ghani and C. McBride, Constructing polymorphic programs with quotient types, in: Mathematics of program construction, Lecture Notes in Comput. Sci. 3125 (2004), pp. 2–15.


Ad´amek, J. and J. Velebil, Analytic functors and weak pullbacks, Theory Appl. Categ. 21 (2008),
pp. 191–209.
Altenkirch, T. and P. Morris, Indexed containers, in: Proceedings of the Twenty-Fourth Annual IEEE Symposium on Logic in Computer Science (LICS 2009) (2009), pp. 277–285.
Awodey, S., N. Gambino and K. Sojakova, Inductive types in homotopy type theory,  preprint, ArXiv:1201.3898.
Baez, J. C. and J. Dolan, From finite sets to Feynman diagrams, in: B. Engquist and W. Schmid, editors, Mathematics unlimited—2001 and beyond (2001), pp. 29–50. ArXiv:math.QA/0004133.
Baez, J. C., A. E. Hoffnung and C. D. Walker, Higher dimensional algebra VII: groupoidification, Theory Appl. Categ. 24 (2010), pp. 489–553. ArXiv:0908.4305.

Bergeron, F., G. Labelle and P. Leroux, “Combinatorial species and tree-like structures,” Encyclopedia of Mathematics and its Applications 67, Cambridge University Press, Cambridge, 1998, xx+457 pp.
Carette, J. and G. Uszkay, Species: making analytic functors practical for functional programming
(2008), available from http://www.cas.mcmaster.ca/~carette/species/.
Clairambault, P. and P. Dybjer, The biequivalence of locally cartesian closed categories and Martin-L¨of type theories, preprint, ArXiv:1112.3456.
Fiore, M., Mathematical models of computational and combinatorial structures (invited address), in: Foundations of software science and computation structures, Lecture Notes in Comput. Sci. 3441 (2005), pp. 25–46.

Fiore, M., N. Gambino, M. Hyland and G. Winskel, The Cartesian closed bicategory of generalised species of structures, J. Lond. Math. Soc. (2) 77 (2008), pp. 203–220.

G´alvez-Carrillo, I., J. Kock and A. Tonks, Groupoids and Fa`a di Bruno formulae for Green functions in bialgebras of trees, preprint, ArXiv:1207.6404.
Gambino, N. and M. Hyland, Wellfounded trees and dependent polynomial functors, in: S. Berardi,
M. Coppo and F. Damiani, editors, TYPES 2003, Lecture Notes in Comput. Sci. 3085 (2004), pp. 210– 225.
Gambino, N. and J. Kock, Polynomial functors and polynomial monads, to appear in Math. Proc. Cambridge Philos. Soc., ArXiv:0906.4931.
Garner, R., Two-dimensional models of type theory, Math. Struct. Comput. Sci. 19 (2009), pp. 687–736. ArXiv:0808.2122.
Gepner, D. and J. Kock, Univalence in locally cartesian closed ∞-categories, preprint, ArXiv:1208.1749.
Gepner, D. and J. Kock, Polynomial functors over infinity categories, in preparation.
Gylterud, H., Symmetric Containers, Master’s thesis, University of Oslo, 2011. Available from
http://www.duo.uio.no/publ/matematikk/2011/144617/thesisgylterud.pdf.
Hancock, P. and A. Setzer, Interactive programs in dependent type theory, in: Computer science logic (Fischbachau, 2000), Lecture Notes in Comput. Sci. 1862 (2000), pp. 317–331,
Hasegawa, R., Two applications of analytic functors, Theoret. Comput. Sci. 272 (2002), pp. 113–175.

Hofmann, M. and T. Streicher, The groupoid interpretation of type theory, in: Twenty-five years of constructive type theory, Oxford Logic Guides 36, Oxford University Press, 1998, pp. 83–111.
Joyal, A., Une th´eorie combinatoire des s´eries formelles, Adv. Math. 42 (1981), pp. 1–82.
Joyal, A., Foncteurs analytiques et esp`eces de structures, in: Combinatoire ´enum´erative (Montr´eal/Qu´ebec, 1985), Lecture Notes in Mathematics 1234, Springer, 1986, pp. 126–159.
Joyal, A., Quasi-categories and Kan complexes, J. Pure Appl. Alg. 175 (2002), pp. 207–222.
Joyal, A., “The theory of quasi-categories,” Advanced Course on Simplicial Methods in Higher Categories, vol. II, Quaderns, nu´m. 45 (2008), pp. 147–497, CRM Barcelona. Available at http://mat.uab.cat/~kock/crm/hocat/advanced-course/Quadern45-2.pdf.
Joyal, A. and J. Kock, Feynman graphs, and nerve theorem for compact symmetric multicategories (extended abstract), in: Proceedings of the 6th International Workshop on Quantum Physics and Logic (Oxford 2009), Elec. Notes Theoret. Comput. Sci. 270 (2011), pp. 105–113. ArXiv:0908.2675.


Kock, A. and J. Kock, Local fibered right adjoints are polynomial, to appear in Math. Struct. Comput. Sci., ArXiv:1005.4236.
Kock, J., Polynomial functors and trees, Internat. Math. Res. Notices 2011 (2011), pp. 609–673. ArXiv:0807.2874.
Kock, J., Categorification of Hopf algebras of rooted trees,  to appear in Centr. Eur. J. Math., ArXiv:1109.5785.
Kock, J., Categorical formalisms for graphs and trees in quantum field theory (in preparation).
Kock, J., A. Joyal, M. Batanin and J.-F. Mascari, Polynomial functors and opetopes, Adv. Math. 224
(2010), pp. 2690–2737. ArXiv:0706.1033.
Kreimer, D., On the Hopf algebra structure of perturbative quantum field theories, Adv. Theor. Math. Phys. 2 (1998), pp. 303–334. ArXiv:q-alg/9707029.
Leinster, T., “Higher Operads, Higher Categories,” London Math. Soc. Lecture Note Series, Cambridge University Press, Cambridge, 2004, 448 pp. ArXiv:math.CT/0305049.
Lurie, J., “Higher topos theory,” Annals of Mathematics Studies 170, Princeton University Press, Princeton, NJ, 2009, xviii+925 pp. ArXiv:math/0608040.

Martin-L¨of, P., “Intuitionistic Type Theory,” Bibliopolis, Napoli, 1984, iv+91 pp.
Moerdijk, I. and E. Palmgren, Wellfounded trees in categories, Ann. Pure Appl. Logic 104 (2000),
pp. 189–218.

Nordstr¨om, B., K. Petersson and J. M. Smith, “Programming in Martin-L¨of’s type theory, an introduction.” International Series of Monographs on Computer Science 7, The Clarendon Press Oxford University Press, New York, 1990, x+221 pp.
Petersson, K. and D. Synek, A set constructor for inductive sets in Martin-L¨of type theory, in: Category Theoy and Computer Science (Manchester 1989), Lecture Notes in Comput. Sci. 389 (1989), pp. 128– 140.
Rutten, J. J. M. M., Universal coalgebra: a theory of systems, Theoret. Comput. Sci. 249 (2000),
pp. 3–80.
Seely, R. A. G., Locally cartesian closed categories and type theory, Math. Proc. Cambridge Phil. Soc.
95 (1984), pp. 33–48.
Tambara, D., On multiplicative transfer, Comm. Alg. 21 (1993), pp. 1393–1420.
Weber, M., Polynomials in categories with pullbacks, preprint, ArXiv:1106.1983.
Yorgey, B. A., Species and functors and types, oh my!, in: Proceedings of the third ACM Haskell symposium on Haskell, Haskell ’10 (2010), pp. 147–158, available from http://www.cis.upenn.edu/~byorgey/pub/species-pearl.pdf
