Electronic Notes in Theoretical Computer Science 104 (2004) 129–147 
www.elsevier.com/locate/entcs


Some Characterization Results for Permutation Algebras *
Fabio Gadduccia  Marino Miculanb  Ugo Montanaria
a Dipartimento di Informatica, Universita` di Pisa
via F. Buonarroti 2, 56127 Pisa, Italy. {gadducci, ugo}@di.unipi.it
b Dipartimento di Matematica e Informatica, Universit`a di Udine via delle Scienze 206, 33100 Udine, Italy. miculan@dimi.uniud.it

Abstract
In recent years, many general presentations (metamodels) for calculi with name-passing, either operational or denotational in flavour, have been proposed. In this paper, we investigate the connections among some of these proposals, namely permutation algebras, named sets and sheaf categories, with the aim of establishing a bridge between different approaches to the abstract specification of nominal calculi.
Keywords: Semantics of programming languages; name-passing calculi; categorical and algebraic metamodels of languages.


Introduction
Since the introduction of π-calculus, the notion of name has been recognized as central in models for concurrency, mobility, staged computation, metapro- gramming, memory region allocation, etc. In recent years, several approaches have been proposed as general frameworks (metamodels) for streamlining the development of these models featuring name passing and/or allocation.
One of the most common approaches is to consider categories of functors over the category I of finite sets and injective functions, such as presheaves SetI; see e.g. Moggi, Stark, Hofmann, Fiore and Turi, among others [13, 16,

 Research supported by Italian MIUR project COFIN 2001013518 CoMeta and by the EU-FET project IST 2001-33100 Profundis.


1571-0661 © 2004 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2004.08.022


8, 5]. Presheaves represent “staged computations”, indexed by the (finite) sets of names currently allocated. In these categories, the classical results for definining initial algebra/final coalgebra can be extended to deal with names, and thus are well suited for interpreting specifications given by polynomial functors.	A variation considers only a subcategory of sheaves, leading to models supporting classical logic; see e.g. Stark, Hofmann, and others [16,8,2]. An alternative approach, based on the Fraenkel-Mostowski permutation model of set theory with atoms (FM-sets), is proposed by Gabbay and Pitts [6]. A different theory of sets with permutations, named sets, has been introduced as a basis for an operational model of History Dependent automata [14]; while for the development of a structured coalgebraic theory in that formalism also permutation algebras, which are models of suitable algebraic specifications of
permutations, have been considered by Ferrari, Montanari, Pistore [4].
It comes as no surprise that there are so many approaches: despite all ultimately cope with the same issues, they are inspired by different aims and perspective, leading to different solutions and choices. It is therefore important to investigate the relationships between these metamodels. First, this will point out similarities and differences between metamodels. Possi- bly, apparently peculiar idiosyncrasies are either justified, or revealed to be inessential. Moreover, these interconnections allow for transferring properties, techniques and constructions among metamodels, thus cross-fertilizing each other. In fact, this formal comparison allows for highlighting weak points of some metamodel, and possibly for suggesting improvements.
However, these approaches are not always easily comparable, also because they dwell in different meta-logical settings (category theory, (non-standard) set theory, algebraic specifications, automata theory... ). So far we know that the model of FM-sets with finite support used in [6] is equivalent to the category of sheaves used in [8, 2], which, of course, is a full reflective subcategory of SetI used in [8, 5]. However, the big picture is still incomplete, since the connections with other approaches, and in particular with those rooted on permutation algebras, are still unclear.
This is indeed the aim of this work: we study the connections between per- mutation algebras, named sets and sheaf categories. Permutation algebras are algebras over permutation signatures. Usually we are interested in permuta- tion algebras whose elements are ﬁnitely supported —i.e., we rule out processes and terms with infinite free names at once. One of the results of this paper is that permutation algebras with finite support are equivalent to the category of pullback preserving functors I → Set, i.e., the so-called Schanuel topos. 1

1 A stronger result, stating the equivalence between the Schanuel topos and the category of permutation algebras over the signature containing only ﬁnite kernel premutations, has


On the other hand, named sets have been introduced as a building block of History Depended Automata, an operational model whose states are equipped with a set of names and name bijections. To some extent, named sets have been intended to be an implementation of permutation algebras. In this paper, we make this connection precise: It turns out that named sets form a category which is equivalent to the category of finite kernel algebras with finite support. These results confirm that permutation algebras with finite support (and named sets) are a good metamodel for formalisms dealing with names, as
much as Sh(Iop) and the FM-sets are.

Synopsis.
In Section 1 we recall the basic definitions about (finite kernel) permuta- tions, permutation algebras, and finite support. In Section 2 we show that permutation algebras can be seen as continuous G-sets, and therefore that per- mutation algebras with finite support ultimately correspond to the Schanuel topos. In Section 3 we consider named sets, and we show that they also form a category which is equivalent to the category of finite kernel permutation al- gebras with finite support. Finally, some conclusions are drawn in Section 4.

Permutation algebras
This section recalls the main definitions on permutation algebras: They are mostly drawn from [14], with some additional references to the literature.
Definition 1.1 (permutation group) Given a set A, a permutation on A is a bijective endofunction on A. The set of all such permutations is denoted by Aut(A), and it forms a group, called the permutation group of A, where the operation is function composition: For all π1, π2 ∈ Aut(A), π1π2  π1 ◦ π2.
On sets, permutations coincide with automorphisms (because there is no struc- ture to preserve), hence the notation denoting the permutation group. We stick however to permutations since now this is almost the standard usage in theoretical computer science, and it is the term used in our main references: See [14, Section 2.1] and the initial paragraphs of [6, Section 3].
Definition 1.2 (finite kernel permutations) Let π ∈ Aut(A) be a permu- tation on A. The kernel of π is deﬁned as ker(π)  {a ∈ A | π(a) /= a}. The set Autfk(A) of finite kernel permutations forms a subgroup of Aut(A).
Let us now fix A as ω = {0, 1, 2,.. .}, the set of natural numbers. In the paper we will restrict our attention to permutations on ω, i.e., belonging to

been omitted from this work due to lack of space; we refer then the reader to [7].


Aut(ω), even if our definitions and remarks could apply in full generality.
Definition 1.3 (permutation signature and algebras) The	permuta- tion signature Σπ is given by the set of unary operators {π | π ∈ Aut(ω)}, together with the pair of axioms schemata id(x)= x and π1(π2(x)) = π1π2(x). A permutation algebra A = (A, {πA}) is an algebra for Σπ. A permutation morphism σ : A → B is an algebra morphism, i.e., a function σ : A → B such that σ(πA(x)) = πB(σ(x)). Finally, Alg(Σπ) (often shortened as Algπ)
denotes the category of permutation algebras and their morphisms.
For example, the same set of permutations Aut(ω) forms the carrier of a permutation algebra. An interesting example is given by the permutation algebra for the π-calculus: The carrier contains all the processes, up-to struc- tural congruence, and the interpretation of a permutation is the associated name substitution (see also [14, Definition 15 and Section 3]).
We give now some additional definitions, concerning the ﬁnite kernel prop- erty, again drawn from [14, Section 2.1].
Definition 1.4 (algebras for finite kernel) The ﬁnite kernel permutation signature Σfk is obtained as the subsignature of Σπ restricted to those unary operators induced by ﬁnite kernel permutations.
The associated category of algebras is Alg(Σfk), shortened as Algfk.
π	π
Of course, finite kernel does not imply finite carrier, since each algebra
fk
in Algπ belongs also to Alg , thus the former is a subcategory of the latter.
However, Algfk has a countable set of operators and axioms, and thus it is
more amenable to the standard results out of the algebraic specification mold.
An example of algebra with finite kernel and infinite carrier is the per- mutation algebra for the π-calculus with bound parallelism, i.e., limited to those recursive processes whose unfolding can generate only a finite number of names (see [14, Definition 46]).
We provide now a final list of definitions, concerning the ﬁnite support property. They rephrase those definitions in [14, Section 2.1], according to [6, Definition 3.3], and to our needs in the following sections.
Definition 1.5 (finite support algebras) Let A be a permutation algebra, and let a ∈ A. We denote as f ixA(a) the set of permutations ﬁxing a in A, i.e., those permutations π such that πA(a)= a.
Moreover, let X ⊆ ω be a set. We denote as f ix(X) the set of permutations ﬁxing X (i.e., those permutations π such that π(k) = k for all k ∈ X), and we say that the set X supports the element a if all permutations ﬁxing X also ﬁx a in A (i.e., if f ix(X) ⊆ f ixA(a)).
An algebra A is finitely supported if for each element of its carrier there


exists a ﬁnite set supporting it. The category of all ﬁnitely supported algebras is denoted by FSAlg(Σπ), shortened as FSAlgπ.
It is important to remark that not all the algebras in Algπ are finitely sup- ported (hence, neither those in Algfk). For example, let us consider the algebra (A, {πˆ | π ∈ Autfk(ω)}), where A contains id and the following permutation
ρ(i)=	i − 1	if i = 2k +1 = (1, 0, 3, 2, 5, 4, 7, 6 ... )
i +1	if i = 2k
and it is closed under precomposition with finite kernel permutations. Let πˆ(ρ)  πρ: This algebra is in Algπ , but it is not finitely supported. Indeed, for any X ⊂ ω finite, we can choose π ∈ Autfk(ω) such that π(x) = x for all x ∈ X, but which swaps max(X)+1 and max(X)+ 2; then πˆ(ρ)= πρ /= ρ.
In general, an element of the carrier of an algebra may have different sets supporting it. The following proposition, mirroring [6, Proposition 3.4], ensures that a minimal support does exist.
Proposition 1.6 Let A be a permutation algebra, and let a ∈ A. If a is ﬁnitely supported, then there exists a least ﬁnite subset of ω supporting it.
Given an algebra A, and a finitely supported element a ∈ A, we call support of a the (necessarily unique) least subset supporting it, denoted by suppA(a). It is easy to see that f ixA(a) always forms a group. Furthermore, the permutations fixing an element have a strong link to its support. We tighten up this section with a technical lemma relating a simple result, which is needed
later on, concerning permutations preserving the support.
Lemma 1.7 (preserving supports) Let A be a permutation algebra, and let a ∈ A be a ﬁnitely supported element. Moreover, let spA(a) be the set of permutations preserving the support of a (i.e., spA(a) {π | π(suppA(a)) = suppA(a)}). Then, spA(a) is a group and f ixA(a) ⊆ spA(a).
Permutation algebras and continuous G-sets
In this section we show that the categories of algebras Algπ and Algfk consid- ered above are strictly related to a well-known notion of algebraic topology, namely that of (continuous) G-sets. This will allow for taking advantage of a large and well-established theory, which will be used in the next section.
Definition 2.1 (G-sets) Let G be a group. A G-set is a pair (X, ·X) where
X is a set and ·X : X × G → X is a right G-action, that is
x ·X id = x	(x ·X g1) ·X g2 = x ·X (g1g2)

A morphism f : (X, ·X) → (Y, ·Y ) between G-sets is a function f : X → Y
such that f (x ·X g)= f (x) ·Y g for all x ∈ X.
The G-sets and their morphisms form a category denoted by BGδ.
Let us consider the G-sets when G is either Aut(ω) or Autfk(ω). Clearly, every Aut(ω)-set is also a Autfk(ω)-set (just by restricting the action to the finite kernel permutations), mimicking the correspondence between Algπ and Algfk. In fact, a stronger equivalence holds between the formalisms, as it is put in evidence by the result proved below.

Proposition 2.2 Algπ
∼= BAut(ω)δ and Algfk ∼= BAutfk(ω)δ.

Proof. Let A a permutation algebra. We define a corresponding Aut(ω)-set

G(A)= (A, ·
G(A)
) where a ·
G(A)
π  πA
(a) for all a ∈ A. On the other hand, if


  x ·X π for π ∈ Aut(ω).
by taking π^X (x)
Let A, B be two permutation algebras. A function f : A → B is a mor- phism f : A → B in Algπ iff f (πA(a)) = πB(f (a)) for all permutations π and a ∈ A, which in turn holds iff f (a ·G(A) π)= f (a) ·G(B) π for all π and a, which equivalently states that f : (A, ·G(A)) → (B, ·G(B)) is a morphism in BAut(ω)δ. Clearly, this correspondence is full and faithful, hence the thesis.
Using the same argument, we have also that Algfk =∼ BAutfk(ω)δ. 
Also the subcategory of algebras with finite support (possibly over only finite kernel permutations) can be recasted in the more general setting of G- sets, but to this end we need to recall some notions from topology theory; see
e.g. [10] for a presentation of these concepts in the context of general topology, and [11, Section V.9] and [12, II] in the context of category and topos theory.
Definition 2.3 (topological spaces) A  topological  space  is  a  pair (X, O(X)) for X a set and O(X) ⊆ ℘(X) (the topology over X) is closed with respect to arbitrary union and ﬁnite intersection, and ∅,X ∈ O(X).
A function f : X → Y is a continuous map f : (X, O(X)) → (Y, O(Y )) if
f −1(U ) ∈ O(X) for all U ∈ O(Y ).
Topological spaces and continuous maps form a category, denoted top.
The elements of O(X) are referred to as the open sets of the topology.
Example 2.4 The smallest (i.e., coarsest) topology is O(X) = {∅,X}. On the other hand, the finest topology is the discrete topology, where O(X) = 
℘(X). It is easy to prove that a topology is discrete if and only if {x}∈ O(X) for all x ∈ X, i.e., if every point is separated from the others (hence the name). Clearly, every function is continuous with respect to the discrete topology.


Remark 2.5 (product of spaces) The category top is complete and co- complete [11, Section V.9]. In particular, given a family of topological spaces (Xi, O(Xi)) ∈ top, indexed by i ∈ I , the product  i∈I (Xi, O(Xi)) is the topo-
topology such that the projections πi : X → Xi are continuous. If I is ﬁnite,
then O(X)=  i∈I O(Xi). This property does not hold however for I inﬁnite.
We recall now a last standard definition, which generalizes Definition 2.1.
Definition 2.6 (topological groups and continuous G-sets) A group G is a topological group if its carrier is equipped with a topology, and its multi- plication and inverse are continuous with respect to this topology.
A G-set (X, ·X) is continuous if G is topological and the action ·X : X ×
G → G is continuous with respect to X equipped with the discrete topology.
A morphism f : (X, ·X) → (Y, ·Y ) between continuous G-sets is a function
f : X → Y which respects the actions.
For a given topological group G, continuous G-sets and their morphisms form a category, denoted by BG.
Notice that for any group G, the category of all G-sets is the category of continuous G-sets where G is taken with the discrete topology – hence the notation BGδ from [12] we have used in Definition 2.1.
Remark 2.7 (permutation groups as topological spaces) Let us con- sider the space N, given as the set ω of natural numbers equipped with the
discrete topology. The Baire space is the topological space  ∞ N = Nω,
equipped with the inﬁnite product topology. A base of this topology is given by
the sets of the form  ∞ Ai, where Ai /= ω only for finitely many indexes i.
Let us now consider the groups Aut(ω) and Autfk(ω). As described in [12, Section III.9] for Aut(ω), the carriers of these groups can be seen as subspaces of the Baire space, where each π corresponds to the inﬁnite list (π(0), π(1), π(2),... ). Now, both Aut(ω) and Autfk(ω) inherit a topology from Nω: Their open sets are of the form U ∩ Aut(ω) and U ∩ Autfk(ω), for U open set of Nω. We can therefore consider the categories BAut(ω) and BAutfk(ω) of continuous Aut(ω)-sets and continuous Autfk(ω)-sets, respectively.
We are now ready to prove our first main result, namely, the correspon- dence between continuous G-sets and permutation algebras with finite sup- port. We first state a technical lemma [12, I, Exercise 6].
Lemma 2.8 Let (X, ·X) be a G-set, and for each x ∈ X let Ix  {g ∈ G | x ·X g = x} be denoted the isotropy group of x. Then, (X, ·X ) is continuous iff all its isotropy groups are open sets in G.

Theorem 2.9 FSAlgπ
∼= BAut(ω) and FSAlgfk ∼= BAutfk(ω).



Proof. In order to prove FSAlgfk
=∼ BAutfk(ω), we show that the functor

G of Proposition 2.2 maps algebras with finite support and finite kernel to continuous Autfk(ω)-sets, and vice versa.
Let A = (A, {πˆA}) be an algebra in FSAlgfk; the corresponding Autfk(ω)- set is (A, ·G(A)), where a ·G(A) π  πˆA(a) for all a ∈ A. For Lemma 2.8, G(A) is continuous if and only if for all a ∈ A, Ia is open. Indeed:
∞
Ia =	{π(i)}
π∈Ia i=0

    ∞



π	∩ Autfk(ω)	where Aπ 
{π(i)}	if i ∈ supp(a) ω	otherwise

π∈Ia	i=0

∞
π i
π∈Ia i=0
∩ Autfk(ω)	(1)

which is open in Autfk(ω) because each  ∞ Aπ is open in Nω since supp (a) is
A
finite and thus only finitely many Aπ’s are different from ω (see Remark 2.7). 2
On the other hand, let (X, ·X) be a continuous Autfk(ω)-set; we prove
that X = (X, {π }) is in FSAlgfk. Clearly X is a finite kernel permutation
^X	π	fk
Ix = U ∩ Autfk(ω) for some U open set of Nω. More explicitly, Ix can be written as follows

Ix =
∞


i∈I j=0
Xij
∩ Autfk(ω)

for some family of indexes I, and where for each i ∈ I there exists a finite
Ji ⊂ ω such that Xij /= ω only for j ∈ Ji. Since id ∈ Ix (it is a group),
there exists i0 ∈ I such that id ∈  ∞ Xi j. We prove that the finite set
0
J  Ji supports x. Let π ∈ Autfk(ω) fixing J. For all j ∈ ω, if j ∈ J
then π(j) = j ∈ Xi0j , otherwise Xi0 j = ω. In both cases, π(j) ∈ Xi0 j . So

∞
j=0
Xi0j
, and therefore π ∈ Ix, i.e. πˆ(x)= x ·X
π = x, hence the thesis.

For proving FSAlg ∼= BAut(ω) we can reply the argument above, just replacing Autfk(ω) with Aut(ω).	 
Using this result, we can take advantage of a well-established theory about continuous G-sets for proving properties about categories of permutation al- gebras with finite support. In particular, we establish easily a connection with



2 We can prove the equivalence (1) also directly.  Obviously, Ia ⊆ 
  ∞ Aπ ∩

π∈Ia
∞
i=0 i

Autfk(ω). Let π ∈
π∈Ia
i=0
π  ∩ Autfk(ω); then, there exists ρ ∈ Ia such that for all

i ∈ suppA(a) : π(i) = ρ(i). Since ρ(a) = a, also π(a) = a, thus π ∈ Ia.


presheaf categories. Recall that the category of presheaves over a small cate- gory C is the category of functors SetCop , and natural transformations among them. Many authors used the category SetI, where I is the category of finite subsets of ω and injective maps, for modeling the computational notion of dy- namic allocation of names or locations; see e.g. [13, 16, 8, 5]. For our purposes, we consider a particular subcategory of SetI, namely the category of sheaves with respect to the atomic topology, denoted by Sh(Iop). This subcategory is conveniently characterized by the property below [9, Example 2.1.11(h)].
Proposition 2.10 Sh(Iop) is the full subcategory of SetI of pullback preserv- ing functors.
The category Sh(Iop) is often called the Schanuel topos. It features the same important properties of SetI above: It is a topos (and hence it is cartesian closed), the functor N = y(1) is a sheaf, and initial algebras and final coalge- bras of polynomial functors are pullback preserving. Therefore, Sh(Iop) can be used in place of SetI for giving the semantics of languages with dynamic name allocations, as in [16, 17, 8, 2] and ultimately also in [6] (being the Fraenkel- Mostowsky set theory essentially equivalent to Sh(Iop)). The main difference between SetI and Sh(Iop) is that the latter isa Boolean topos [12, Section III.8,
p. 150], while the former is not. Hence, Sh(Iop) is a model for classical logic, instead of the usual intuitionistic (extensional) higher order logic of topoi.
Now, for [12, Section III.9, Corollary 3], we know that BAut(ω) ∼= Sh(Iop). Thus, as an immediate corollary of Theorem 2.9 we have that the category of permutation algebras with finite support, is equivalent to the Schanuel topos.
Corollary 2.11 FSAlgπ ∼= Sh(Iop).
In other words, permutation algebras with finite support correspond to pullback-preserving functors I → Set, and thus they form a Boolean topos with enough structure for defining the semantics of languages with dynamic name allocation, such as π-calculus, mobile ambients, etc. 3
We summarize the relationships we have established among permutation algebras and G-sets in the diagram in Figure 1.
It is interesting to notice that the inclusion functors BAut(ω) ‹→ BAut(ω)δ and BAutfk(ω) ‹→ BAutfk(ω)δ have right adjoints; the latter is e.g. defined on the objects as follows
r : BAutfk(ω)δ → BAutfk(ω)	(X, ·X) '→ ({x ∈ X | Ix open for Autfk(ω)}, ·X)

3 Actually, we can prove also the stronger equivalence FSAlgfk ∼= Sh(Iop). The proof of this fact is quite technical and lengthy, so due to lack of space we refer the reader to [7].

Algπ,˛	 A lgfk

,,¸¸¸¸¸¸
¸¸∼=¸¸¸
¸¸¸z˛
,π,¸¸¸¸
¸¸∼=¸¸
¸¸¸z 

BAut(ω)δ,˛	 B Autfk(ω)δ



,r ,˛	
,,	,,

	  ,rfk

FSAlgπ¸¸	E
¸¸¸∼=¸
¸¸¸¸
FSAlgπ¸	E
¸¸∼=
¸¸¸

z,˛ J 
BAut(ω) = Sh(I
op),˛	
z,r J 
 B Autfk(ω)

Fig. 1. The Permutation Algebra Cube, first version.
and it is the restriction on morphisms. Therefore, r maps every BAutfk(ω)δ- set to the largest continuous BAutfk(ω)-set contained in it. Translating r to permutation algebras along the equivalences, this means that there exists


r' : Algfk → FSAlgfk
(A, {πˆA}) '→ (B, {πˆA|B})

π	π
where B  {a ∈ A | f ixA(a) open for Autfk(ω)}. Now, f ixA(a) is open if there exists a finite J ⊂ ω such that for f ix(J) ∩ Autfk(ω) ⊆ f ixA(a) (see the proof of Theorem 2.9). This corresponds exactly to say that a has finite support, hence we can define directly r'(A)= {a ∈ A | suppA(a) finite}.
Permutation algebras and named sets
Named sets are the building blocks of HD-automata, the implementation coun- terpart of permutation algebras. The definitions below are lifted from [4, Sec- tion 3.1], and simplified according to our needs.
Definition 3.1 (named sets) A named set N is a triple
N = ⟨QN ,  · N : QN → ω, GN :	q∈QN ℘(Aut(  q  N ))⟩
where QN is a set of states;  · N is the enumerating function; and for all q ∈ QN , the set GN (q) is a subgroup of Aut(  q  N ) (hence, closed with respect to inverse and identity), and it is called the permutation group of q.
In this definition, and also in the following, we adopt the usual “set-theoretic” convention of representing finite ordinals by natural numbers, thus 0 = ∅ and n = {0,...,n − 1}. Therefore, Aut(  q  N ) = Aut({0,... , q  N − 1}).
Intuitively, a state in QN represents a process, and thus the function  · N assigns to each state the number of variables possibly occurring free in it; in other words, it denotes a canonical choice of its free variables. Finally, GN


denotes for each state the group of renamings under which it is preserved, i.e., those permutations on names that do not interfere with its possible behavior. Note also that GN (q)= {id} if q  N = 0.
Definition 3.2 (category of named sets) Let N, M be named sets.  A
named function H : N → M is a pair
H = ⟨h : QN → QM , Λh :	q∈QN ℘(I(  h(q)  M , q  N ))⟩
for h a function and Λh(q) a set of injections from h(q)  M to q  N , satisfying the additional condition
GN (q) ◦ λ ⊆ Λh(q)= λ ◦ GM (h(q))	∀λ ∈ Λh(q)
Finally, NSet denotes the category of named sets and their morphisms.
So, a named function is a state function, equipped with a set of injective renamings for each q ∈ QN , which are somewhat compatible with the permu- tations in GN (q) and GM (h(q)) (and such that λh(q)= ∅ if h(q)  M = 0). In other words, “the whole set of Λh(q) must be generated by saturating any of its elements by the permutation group of h(q), and the result must be invari- ant with respect to the permutation group of q” [4, Section 3.1]. In particular, the identity on N is ⟨id, Aut(  ·  N )⟩, and composition is defined as expected.
Example 3.3 Let us consider a few simple examples. Since 1 = {0} is the

singleton set, both N1 = ⟨1, 0  = 1, Aut(1) = {id}⟩ and Np
= ⟨1, 0   =

2, Aut(2) = {id, (1, 0)}⟩ are named sets: same set of states, different enumer-
ating functions. Instead, Ni = ⟨1, 0  = 2, {id} ⊆ Aut(2)⟩ is a named set
with the same set of states and the same enumerating function of Np, but
with a different permutation group.
Notice that there is no named function from Np to N1, since any injection λ, when post-composed with Aut(2), generates the whole I(1, 2). Instead, de- noting by Ij, for j = 0, 1, the set containing the injection mapping 0 to j, then
⟨id, Ij⟩ is a named function from Ni to N1, while ⟨id, I0 ∪ I1 = I(1, 2)⟩ is not.
Similarly, there is no named function from Np to Ni, while ⟨id, Aut(2)⟩ :
2	2
Ni → Np (and it does not exist for any other choice of the set of injections
2	2
Λ(1) ⊆ Aut(2)). In fact, it is easy to see that, given named sets ⟨Q,  · , G1⟩
and ⟨Q,  ·  , G2⟩ (i.e., same state set and enumerating function, different per- mutation groups), with G1(q) a subgroup of G2(q) for all q ∈ Q, then ⟨id, G2⟩ is a well-defined named function from the former named set to the latter.
In the remaining of this section we relate FSAlgfk, the category of finitely supported, finite kernel permutation algebras and their morphisms, and NSet,


the category of named sets. We plan to sharpen and make more concise some of the results presented in [14, Section 6].
Summarizing, Proposition 3.4 and Proposition 3.7 (and the “canonical” version of the latter, Proposition 3.13: See later) prove the existence of suit- able functors between the underlying categories, generalizing the functions on objects presented as Definition 49 and Definition 50, respectively, in [14, Sec- tion 6]; while Theorem 3.14 extends to a categorical equivalence the corre- spondence on objects proved in Theorem 51 of the same paper.
From named sets to permutation algebras
The functor from named sets to permutation algebras is obtained by a free construction, (apparently) analogous to the standard correspondence between sets and algebras. We need to introduce some notation. For π ∈ Aut(n) and π' ∈ Autfk(ω), for n ∈ ω, let us denote by [π, π'] ∈ Autfk(ω) the completion of
π with π', defined as [π, π'](i)   π(i)	if i < n
π'(i − n)+ n	otherwise
Proposition 3.4 (from sets to algebras) Let FO be the function mapping each named set N to the ﬁnite kernel permutation algebra freely generated from the elements of QN (considered as new constants), modulo the equivalence
≡N induced by set of axioms associated to the permutations in GN , that is,
[^π, π']F (N )(q) ≡N q (i.e., a suitable completion of π) if π ∈ GN (q).
Moreover, given a named function H : N → M, for each q ∈ QN let us choose an injection λq ∈ Λh(q), and a permutation λq ∈ Aut(  q  N ) extending λq. Let us denote by Hλ : QN → QM the function Hλ(q) = [λq, id](h(q)) for all q ∈ Q. Then, let FA be the function associating to each named function H the free extension of the function Hλ.
The pair F = ⟨FO, FA⟩ deﬁnes a functor from NSet to FSAlgfk.
Proof. The carrier of FO(N ) is {π(q) | q ∈ QN ,π ∈ Autfk(ω)}/≡N . Thus, it is easy to see that the resulting algebra has finite support, proving that each element [π(q)]N is supported by the set π({0,..., q  N −1}). In order to prove this, we must show that each permutation π' fixing π({0,... , q  N − 1}) also fixes πˆF (N)(q). Then we have that
∀k' ∈ π(  q  N ): π'(k')= k' =⇒    ∀k <  q  N : π'(π(k)) = π(k)
=⇒ ∀k <  q  N : π−1(π'(π(k))) = k
=⇒	(π^−1π'π)F (N )(q) ≡N q
=⇒	π−1 (π'	(π	(q))) ≡	q
^F (N ) ^F (N ) ^F (N )	N
^F (N ) ^F (N )	N ^F (N )


Let us now consider a named set function H : N → M . The function Hλ can be lifted to an algebra homomorphism from the free algebra TΣfk (QN ) to the free algebra TΣfk (QM ). Moreover, it preserves the axioms on iden- tity and composition: We must then prove that this holds also for the addi- tional axioms arisen from the permutation group. This is equivalent to prove that Hλ([π, π']F (N)(q)) ≡M Hλ(q) for all π ∈ GN (q). By construction, we
have that Hλ([π, π']F (N)(q))  [π, π']F (M)([λa, id]F (M)(h(q))). Now, remem- ber that there exists a π ∈ GM (h(q)) such that π ◦ λa = λa ◦ π, and then that for a suitable π' we have [π, π'] ◦ [λa, id] = [λa, id] ◦ [π, π']: This implies that Hλ([π, π']F (N)(q)) coincides with [λa, id]F (M)([π, π']F (M)(h(q))), which is

The identities ⟨id, GN ⟩ are clearly preserved. Concerning composition, it is enough to show that the result of the functor is independent with respect to the choice of the injection, i.e, that given a named function H : N → M , then for any λ, λ' ∈ Λh(q) the equality [λ, id](h(q)) ≡M [λ', id](h(q)) holds. To prove the latter, note that the conditions on ΛH(q) ensure on the existence of a permutation π ∈ GM (h(q)) such that λ◦π = λ', hence the equality follows. 

From permutation algebras to named sets
We first define some additional structure on supports.
Definition 3.5 (on finite supports) Let A be a permutation algebra, and let a ∈ A be a ﬁnitely supported element. Then, normA(a) ∈ I(|suppA(a)|, ω) denotes the (necessarily unique) order-preserving injection covering the sup- port. Formally, normA(a)(i) < normA(a)(i + 1) for all i < |suppA(a)| and normA(a)({0,... , |suppA(a)|− 1})= suppA(a).
Now an easy technical lemma, relating the support of two algebras.
Lemma 3.6 (mapping supports) Let σ : A → B be an algebra homomor- phism, and let a ∈ A be ﬁnitely supported. Then, suppB(σ(a)) ⊆ suppA(a).
Proof. Let us prove that any K ⊆ ω supporting a ∈ A, supports also σ(a) ∈
B. Let π ∈ Aut(ω) such that for all i ∈ K : π(i) = i. Then, by hypothesis
πˆA(a)= a, and hence πˆB(σ(a)) = σ(πˆA(a)) = σ(a).	 
In other words, the lemma above implies that for each morphism σ the element σ(a) is finitely supported if a is; and it allows for defining a functor I from finite kernel permutation algebras to named sets.
Proposition 3.7 (from algebras to sets) Let IO be the function mapping each A ∈ FSAlgfk to the named set ⟨A, |suppA(·)|, GI(A)⟩, for GI(A)(a) the set

of permutations given by
{π ∈ Aut(|suppA(a)|) | ∃π' ∈ f ixA(a): normA(a) ◦ π = π' ◦ normA(a)}.
Let σ : A → B, and let inσ(a) : |suppB(σ(a))| → |suppA(a)| the uniquely induced arrow (thanks to Lemma 3.6) such that normA(a) ◦ inσ(a)= normB(σ(a)). Hence, let IA be the function associating to σ the named func- tion ⟨hσ, Λσ⟩ given by the obvious function from A to B and by the set of injections Λσ(a)= inσ(a) ◦ GI(B)(σ(a)) for all a ∈ A.
The pair I = ⟨IO, IA⟩ deﬁnes a functor from FSAlgfk to NSet.
Proof. It is easy to check that GI(A)(a) is a group, since f ixA(a) is so.
Concerning Λσ, it is clear that the condition λ ◦ GI(B)(σ(a)) = Λσ(a) holds for all λ ∈ Λσ(a), since λ is of the shape inA(a) ◦ π, for π ∈ GI(B)(σ(a)).
We must now prove that GI(A)(a) ◦ λ ⊆ Λσ(a) for all λ ∈ Λσ(a). This is equivalent to ask that for all π ∈ GI(A)(a) there exists a π ∈ GI(B)(σ(a)) such that π ◦ inσ(a)= inσ(a) ◦ π. By definition we have normA(a) ◦ inσ(a)= normB(σ(a)), so that for π' ∈ f ixA(a) corresponding to π, we have
normA(a) ◦ inσ(a)= normB(σ(a)) =⇒
=⇒ π' ◦ normA(a) ◦ inσ(a)= π' ◦ normB(σ(a))
=⇒ normA(a) ◦ π ◦ inσ(a)= π' ◦ normB(σ(a))
since f ixA(a) ⊆ f ixB(σ(a)) ⊆ spB(σ(a)), there exists π ∈ Aut(|suppB(σ(a))|)
=⇒ normA(a) ◦ π ◦ inσ(a)= normB(σ(a)) ◦ π
=⇒ normA(a) ◦ π ◦ inσ(a)= normA(a) ◦ inσ(a) ◦ π
and finally, since normA(a) is injective,
=⇒ π ◦ inσ(a)= inσ(a) ◦ π
The identities are clearly preserved. Concerning composition, note that the choice of arrow in is preserved by it, in the sense that inσ(a) ◦ inσ' (σ(a)) coincides with inσ;σ' (σ (σ(a))). Then, we have that
Λσ;σ' (a)=	inσ;σ' (a) ◦ GC(σ (σ(a))) = inσ(a) ◦ inσ' (σ(a)) ◦ GC(σ (σ(a)))
= inσ(a) ◦ GB(σ(a)) ◦ inσ' (σ(a)) ◦ GC(σ (σ(a))) = Λσ(a) ◦ Λσ' (σ(a)) and thus compositionality holds.	 


Adjunction between named sets and permutation algebras
We first give a look at the structure of the algebras obtained via functor F .
Lemma 3.8 Let N be a named set, and let q ∈ QN . Then, the equivalence class [q]≡N is ﬁnitely supported, and suppF (N)([q]≡N ) = {0,... , q  N − 1};
'	'	fk
furthermore, f ixF (N )([q]≡N )= {[π, π ] | π ∈ GN (q), π ∈ Aut (ω)}.
Proof. Clearly, each permutation π ∈ f ix({0,... , q  N − 1}) fixes [q]≡N , since it can be written as [id, π'] (see also the proof of Proposition 3.4). Now, let us assume a k < q  N such that k /∈ suppF (N)([q]N ), and let πk be the permutation exchanging k with  q  N + 1, and fixing the rest. Now, we have πk(q)= q in FO(N ), but the equivalence can not be obtained by ≡N , since the latter is generated by the permutations in GN (q). This proves the first half.
Now, let us consider π ∈ f ixF (N)([q]N ). Then, π ∈ spF (N)([q]N ), so that it is of the shape π = [πs, π'] for πs ∈ Aut(  q  N ). As for before, since GN (q) is a group, it follows that πs ∈ GN (q).	 
Let N be a named set. By Lemma 3.8, we have that |suppF (N)([q]≡N )| =  q  N and GI(F (N))([q]≡N ) = GN (q), so that the pair ηN = ⟨in≡N , GN (q)⟩ defines a named function from N to I(F (N )), for in≡N the obvious injection mapping q to [q]≡N . Such a morphism is a strong candidate for the unit of a possible adjunction. Unfortunately, this is not the case, as explained below.
Remark 3.9 Let A ∈ FSAlgπ, and let us suppose that F E I. Then, for each named function H : N → I(A) there exists a unique morphism σH : F (N ) → A such that ηN ; I(σH)= H (see [1, Deﬁnition 13.2.1]).
Such a morphism should behave as h on QN , meaning that (the equivalence class) [q]≡N has to be mapped into h(q): So, this fact does constrain the choice of σH to be the free extension of h. To prove its existence would now be enough to show that the axiomatization is preserved, i.e., that [π, π'](h(q)) = h(q) holds in A if [π, π'](q) ≡N q: The commutativity of the diagram follows, as well as the uniqueness of σH .
Let W = ⟨ω, {πW }⟩ be the algebra such that πW (i) = π(i) for all i ∈ ω. It is ﬁnitely supported, since clearly suppW (i) = {i} for all i ∈ ω. Then, by construction I(W)= ⟨ω, i  = 1, id⟩ (compare with the named sets in Exam- ple 3.3). Now, let us consider the identity on I(W): The obvious function σid : F (I(W)) →W is not an algebra morphism.
The problem lies on the “normalization” along the functor I, which blurs the identity of the elements of the support. We need to choose a “canonical” element for each set of elements with the same cardinality of the support.
Lemma 3.10 Let A ∈ Algπ and let a ∈ A. If a is ﬁnitely supported, then

suppA(π(a)) = π(suppA(a)) for all π ∈ Aut(ω).

Lemma 3.11 Let A ∈ Alg , let a ∈ A and let Hom [a, a']  {π | π
(a) = 

π	A
'	'	'	'
^A '

a }. Then, HomA[a, a ] ◦ f ixA(a)= HomA[a, a ]= f ixA(a ) ◦ HomA[a, a ].
We now introduce a last concept, the orbit of an element, consisting of the family of all the other elements of an algebra which can be reached from it via the application of an operator of the permutation signature.
Definition 3.12 (orbits) Let A ∈ Algπ and let a ∈ A. The orbit of a is the

set OrbA
(a) {πA
(a) | π ∈ Aut(ω)}.

Thus, the orbit of an element a collects all the other elements that are reached from a via the application of a permutation, i.e., an operator of the signature. It is obvious that orbits partition a permutation algebra. Moreover, let us assume the existence for each orbit OrbA(a) of a canonical representative aO. (We will come back on this later on.)

Proposition 3.13 (from algebras to sets, II) Let
I^O  be the function

π
for GIb(A)(aO) the set of permutations given by
I(A)

{π ∈ Aut(|suppA(a0)|) | ∃π' ∈ f ixA(a0): normA(aO) ◦ π = π' ◦ normA(aO)}.
Let σ : A → B, let inσ(aO) : |suppB(σ(aO))| → |suppA(aO)| be the uniquely induced arrow such that normA(aO) ◦ inσ(aO)= normB(σ(aO)), and let Ξ(σ(a)O, σ(aO)) ⊆ I(|suppA(σ(a)O)|, |suppA(σ(aO))|) be the set of permu- tations given by
{π | ∃π' ∈ HomB[σ(a)O, σ(aO)] : normB(σ(aO)) ◦ π = π' ◦ normB(σ(a)O)}.

Hence, let IA be the function associating to σ the named function ⟨hσ, Λσ⟩ such that hσ(aO) = σ(a)O and Λσ(aO) = inσ(aO) ◦ Ξ(σ(a)O, σ(aO)) ◦ GIb(B)(σ(a)O) for all aO ∈ A.
The pair I = ⟨IO, IA⟩ deﬁnes a functor from FSAlgfk to NSet.
Proof. The key remark for the correctness of Λσ is that HomB[σ(a)O, σ(a0)]◦
f ixB(σ(aO)) = f ixB(σ(a)O) ◦ HomB[σ(a)O, σ(aO)] (see Lemma 3.11 above),
and equality Ξ(σ(a)O, σ(aO)) ◦ GIb(A)(σ(a)O)= GI(A)(σ(aO)) ◦ Ξ(σ(a)O, σ(aO)) follows: Then, it is enough to mimic the proof for Proposition 3.7.	 
The proof goes along the same lines of the one for Proposition 3.7: Addi- tionally, now the “normalization” along I picks up a single representative for each orbit, which is mirrored by the introduction of the family ΞaO . Using


the previously defined functor, it is easy to realize that named sets are just a different presentation for finite kernel permutation algebras.
Theorem 3.14 NSet ∼= FSAlgfk.
Proof. Let N be a named set: It is easy to prove that it is isomorphic to
I^(F (N )). Thanks to Lemmata 3.8 and 3.11, the setof states of the latter
and its set of permutations GIb(F (N ))(([q]≡N )O) ⊆ Aut( q N ) satisfies
GIb(F (N ))(([q]≡N )O)◦Ξ(([q]≡N )O, [q]≡N )) = Ξ(([q]≡N )O, [q]≡N ))◦GI(F (N ))([q]≡N ).
Now, since GI(F (N ))([q]≡N )= GN (q), the corresponding isomorphism is given by ⟨([−]≡N )O, GIb(F (N ))(([q]≡N )O) ◦ Ξ(([q]≡N )O, [q]≡N ))⟩, which is also natural.
The element aO ∈ I^(A) generates the whole orbit of [aO]≡F (Ib(A)) , and the
algebra isomorphism σ maps the latter is to πA(aO), for π any permutation
extending normA(aO).	 
Remark 3.15 As a final note, we remark that the canonical representative aO of each orbit can be constructively defined. In fact, Aut(ω) can be naturally equipped with a total order, which is then lifted to sets of permutations. Hence, for each orbit an element ac can be chosen, such that |suppA(ac)| = suppA(ac), and which has the minimal permutation group associated to it. The definition is well-given, since it is easy to prove that f ixA(a)= f ixA(a') implies a = a' for all finitely supported a ∈ A and a' ∈ OrbA(a).

Conclusions
We investigated the connections between three different approaches to the treatment of nominal calculi, such as calculi for name passing or location gen- eration, comparing meta-models based on (pre)sheaf categories, on algebras over permutation signatures, and on sets enriched with names and permuta- tion groups. We proved that the category of named sets is equivalent to the category of permutation algebras with finite support on the signature with fi- nite kernel permutations; which in turn, when all permutations are considered, is equivalent to the category of sheaves over I, i.e., the Schanuel topos.
Our characterization results are summarized in Figure 2. They confirm that permutation algebras are well suited for modeling the semantics of nom- inal calculi. Moreover, we can import from the (pre)sheaf approach the initial algebra/final coalgebra machinery. Our next step will be to compare the mod-

Algπ,˛	 A lgfk

,,¸¸¸¸¸¸
¸¸∼=¸¸¸
¸¸¸z˛
,π,¸¸¸¸¸¸
¸¸∼=¸¸¸
¸¸¸z˛

BAut(ω)δ,˛	 B Autfk(ω)δ



,r ,˛	
,,

 	  
,,

fk ,r

FSAlgπ¸¸	E
¸¸¸∼=¸
¸¸¸¸
FSAlgπ
=~ N¸Set	E
¸¸¸¸¸¸∼=
¸¸¸¸¸¸

z,˛ J 
BAut(ω) = Sh(I
op),˛	
z˛,r J 
 B Autfk(ω)

Fig. 2. The Permutation Algebra Cube, strengthened version.
els obtained by bialgebras on named sets and permutation algebras (see [14, Section 4] and [3]), with the coalgebraic models over presheaves categories [5]. Beside this, it seems natural to develop further our research in terms of categorical logic. We would aim to define a suitable internal language for the three meta-models we analyzed so far. The connection with the Schanuel topos, and its correspondence with Fraenkel-Mostowski set theory, would lead
us to consider some variant (e.g., higher-order) of Pitts’ Nominal Logic [15].
Acknowledgments
We thank Andrea Corradini, Pietro Di Gianantonio, Marco Pistore, Ivan Scagnetto and Emilio Tuosto for many fruitful discussions.

References
Barr, M. and C. Wells, “Category Theory for Computing Science,” Les Publications CMR, 1999.
Bucalo, A., M. Hofmann, F. Honsell, M. Miculan and I. Scagnetto, Consistency of the theory of contexts (2001), submitted.
Buscemi, M. and U. Montanari, A ﬁrst order coalgebraic model of π-calculus early observational equivalence, in: P. Brim, L.and Janˇcar, M. Kˇret´ınsky´ and A. Kuˇcera, editors, Concurrency Theory, Lect. Notes in Comp. Sci. 2421 (2002), pp. 449–465.
Ferrari, G., U. Montanari and M. Pistore, Minimizing transition systems for name passing calculi: A co-algebraic formulation, in: M. Nielsen and U. Engberg, editors, Foundations of Software and Computer Science, Lect. Notes in Comp. Sci. 2303 (2002), pp. 129–143.
Fiore, M. and D. Turi, Semantics of name and value passing, in: H. Mairson, editor, Logic in Computer Science (2001), pp. 93–104.
Gabbay, M. J. and A. M. Pitts, A new approach to abstract syntax with variable binding, Formal Aspects of Computing 13 (2002), pp. 341–363.
Gadducci, F., M. Miculan and U. Montanari, About permutation algebras and sheaves (and named sets, too!), Technical Report UDMI/26/2003/RR, Dipartimento di Matematica e Informatica, Universita` di Udine (2003).


Hofmann, M., Semantical analysis of higher-order abstract syntax, in: G. Longo, editor, Logic in Computer Science (1999), pp. 204–213.
Johnstone, P., “Sketches of an Elephant, I,” Oxford University Press, 2002.
Kelley, J., “General Topology,” Springer, 1975.
Mac Lane, S., “Categories for the Working Mathematician,” Springer, 1971.
McLane, S. and I. Moerdijk, “Sheaves in Geometry and Logic: A First Introduction to Topos Theory,” Springer, 1994.
Moggi, E., Notions of computation and monads, Information and Computation 93 (1991),
pp. 55–92.
Montanari, U. and M. Pistore, Structured coalgebras and minimal HD-automata for the π- calculus, Theor. Comp. Sci. To appear.
Pitts, A. M., Nominal logic, a ﬁrst order theory of names and binding, Information and Computation 186 (2003), pp. 165–193.
Stark, I., “Names and Higher-Order Function,” Ph.D. thesis, University of Cambridge, Cambridge Computer Laboratory (1994).
Stark, I., A fully abstract domain model for the π-calculus, in: E. Clarke, editor, Logic in Computer Science (1996), pp. 36–42.
