

Electronic Notes in Theoretical Computer Science 221 (2008) 191–206
www.elsevier.com/locate/entcs
Jordan Areas and Grids
Norbert Th. Mu¨ller1,2
Abteilung Informatik, FB IV, Universita¨t Trier, D-54286 Trier, Germany
Xishun Zhao3,4
Institute of Logic and Cognition, Sun Yat-Sen University 510275 Guangzhou, P. R. China

Abstract
Jordan curves can be used to represent special subsets of the Euclidean plane, either the (open) interior of the curve or the (compact) union of the interior and the curve itself . We compare the latter with other representations of compact sets using grids of points and we are able to show that knowing the length of a rectifiable curve is sufficient to translate from the grid representation to the Jordan curve.
Keywords: representations of compact sets, Jordan curves, Jordan-Schoenflies theorem, TTE


1	Introduction
In computable analysis, several definitions of computability of subsets of Rn have been discussed in the near past, especially for bounded sets, e.g. [6,7,8], [13], [3], [16,17].
Many of theses definitions apply at the same time to a set S and its closure S, so we will restrict ourselves to compact (i.e. bounded and closed) sets. Here a representation using grids of points with a decreasing Hausdorff distance to the represented set is of interest.
For the special case of the Euclidean plane, another non-equivalent representa- tion of special compact sets can be based on Jordan curves, although the papers

1 Email: mueller@uni-trier.de
2 Research was partially supported by the DFG project 446 CHV 113/240/0-1
3 Email: hsszxs@mail.sysu.edu.cn
4 Research was partially supported by the NSFC projects under Grant No. 60573011, 10410638 and a MOE project under grant number 05JJD72040122

1571-0661 © 2008 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2008.12.017

by Chou, Ko and Yu [6],[7],[8],[13] rather use the curves to represent their open interior.
During the CCA conference 2007, two independent papers [14],[17] have been presented showing results that were quite similar although based on the non-equivalent approaches via grids or Jordan curves. In this paper we show that using the (finite) length of a Jordan curve as additional information allows the translation between the corresponding representations. This helps to explain the similarities. In con- trast to [6],[7],[8],[13] where the emphasis was on computational complexity, we concentrate on uniform solutions, i.e. on possible reductions between the different representations.
We will use the following notations and definitions to specify the computational model. Details have been omitted, as we don’t consider computational complexity.
The set B := {0, 1} will be used as basic alphabet for all strings.
Based on an encoding of the set {0, 1, #} by pairs of bits, with # acting as a delimiter, we will use naive bijections (B∗)n ↔ B∗ and (B∗)∗ ↔ B∗.
Natural numbers will be written in binary, i.e. as strings from B.
Dyadic numbers are defined as D = {z · 2−n | z ∈ Z,n ∈ N}, they are a dense subset of R. We let Dn = {z· 2−n | z ∈ Z}. Here we will use an encoding by words from {+, −} ◦ B∗ ◦ {•} ◦ B∗ (for sign, integer part, position of the fractional point, and the fractional part itself; so obviously denoting a dyadic number). These words again can easily be encoded using strings from B∗.
F (M ) denotes the finite subsets of a set M : We will especially use the notation
F (D2) for the finite sets of dyadic points in the plane and F (D2 ) for the finite
sets of dyadic points on a grid with width 2−n.
The Euclidean distance of points in Rn will be written as dist(x, y).
Open balls in Rn with center x ∈ Rn and radius ε ∈ R+ will be written as B(x; ε) := {y ∈ Rn | dist(x, y) < ε}. This includes the special cases of open discs in R2 and open intervals in R.
Let B(Dn) := {B(d; ε) | d ∈ Dn,ε ∈ D,ε > 0} be the set of basic open balls in
Rn. Again a naive encoding with a delimiter symbol is assumed.
As computational model we will use oracle Turing machines, with input alphabet and oracle alphabet B. Formally, oracles for and the functions computed by these machines are of type φ :⊆ B∗ → B∗. In general, we will implicitly use naive notations like above and directly work with functions like φ :⊆ N → D or even like φ :⊆ F (D2) → N × B(D, n).
For any set S ⊆ Rn , let ∂S denote the boundary of S, i.e., the set of all points z ∈ Rn such that any open ball B(z; ε) around z contains both points in S and points not in S. int(S) denotes the interior of S; ext(S) denotes its exterior.
Let S := ∂B((0, 0); 1) = {x ∈ R2 | dist(x, (0, 0)) = 1} be the unit circle in R2. Let σS : [0; 1] → S be defined as σS(t) = (sin(2πt), cos(2πt)).

The Hausdorff distance of sets is denoted by

distH ((X, Y ) = max{ sup inf dist(x, y), sup inf dist(x, y) }
x∈X y∈Y	y∈Y x∈X

We assume that the reader has some (basic) knowledge about TTE [16], nevertheless we repeat some definitions here:
A representation of a set M is a partial surjective function δ : ⊆(⊆B∗ → B∗) → M .
The pairing of words φ, ψ is denoted by ⟨φ, ψ⟩ Here φ and ψ may have finite or infinite lengths. We will extend this notion to the represented sets.
Q will be the representation of real numbers, where a name φ of x ∈ R consists of a list {φ(i) | i ∈ N} of open intervals Oi with dyadic endpoints, where x ∈ Oi and the diameter of Oi is ≤ 2−i. We will use a similar representation Qn for Rn, now consisting of open balls with dyadic center and dyadic diameter.

Q< is a representation of real numbers (including infinities) using approximations from the left: For x ∈ R = R ∪ {−∞, +∞} we let Q<(φ) = x ⇔ {φ(n) | n ∈ N} =
{d ∈ D | d < x}
Q> represents R is a similar way, but now using approximations from the right.
Computable translations between different representations ρ1, ρ2 will be expressed as reducibilities ‘ρ1 ≤ ρ2’; the equivalence ‘ρ1 ≡ ρ2’ expresses reducibility in both directions. ‘ρ1 ≤t ρ2’ denotes a topological reduction, i.e. the translation is only shown to be continuous, but not necessarily computable.

2  Jordan curves
Jordan curves are continuous functions γ, usually from [0; 1] to R2, that are closed (i.e. γ(0) = γ(1)) and furthermore one-to-one (with exception of the identity at the endpoints). They have been studied for about 200 years now (already Bolzano tried a proof of the Jordan curve theorem).
The topological properties of these curves (e.g. the Jordan-Scho¨nflies theorem, see below) suggest an additional approach: Instead of functions γ : [0; 1] → R2 we could use functions γ : S → R2 that additionally are one-to-one, i.e. the curves could also be viewed as images of the unit circle under a continuous injective function.
S is a compact and, moreover, recursive subset of R2. The same obviously holds for the closed interval [0; 1] ⊆ R. So, using the notation of [16](153ff), it is near at hand to use the following representations in connection with Jordan curves:
Definition 2.1
Let C(S, R2) := {f : ⊆R2 → R2 | f continuous and dom(f ) = S} be the set of all continuous partial functions from R2 to R2 with domain S. In the same way define C([0; 1], R2).
As representations for C(S, R2) or C([0; 1], R2) we will use δS  and δ[0;1], which
are standard representations of these functions spaces (from [16]).

Using these representations, a function is essentially encoded as a list of pairs of open balls (Oi, Ui) with certain convergence properties, for details see [16].
From time to time, it will be convenient to switch between C([0; 1], R2) (used e.g. in [12,14]) and C(S, R2). As we are only considering closed curves, this can be done using the simple transformation σS : [0; 1] → S defined by σS(t) = (sin(2πt), cos(2πt)). In the following, γ will always be from C(S, R2), while we use γ to denote a function from C([0; 1], R2).
Many proofs concerning Jordan domains rely on the Jordan curve theorem. For our purpose, we need to use a rather strong version of this theorem, namely the Jordan-Scho¨nflies theorem. A suitable formulation can e.g. be found in [15](Thm 40.15); a translation of this version reads as follows:
Theorem 2.2 (Jordan-Sch¨onflies) Each Jordan curve C partitions the plane into exactly two parts. Each homeomorphism from C onto the unit circle S can be extended to a homeomorphism of the plane onto itself, where the interior of C is mapped onto the interior of S and the exterior of C is mapped onto the exterior of S.
In our case, we do not use functions from C to S, but from S to C. As we are dealing with homeomorphisms, this is not really a problem, as they are bijective and continuous in both directions. So we may use the following property:
Corollary 2.3 For any Jordan curve γ : S → R2 an extension Γ : R2 → R2 of γ
exists which is a homeomorphism.
Of course, this homeomorphic extension is not uniquely determined. In this context, we want to mention the following papers treating Jordan curves from a constructive view:
Berg et.al. [2] consider a constructive version of the (plain) Jordan curve theorem, which unfortunately is not enough for our considerations: A point x outside of the curve and another point y inside of the curve can be constructed from the curve, and that additionally, for every point z not on the curve, there is a polygonal path not touching the curve that either connects x and z or y and z.
Hertling [10] shows an effective version of the Riemann open mapping theorem, a theorem that can be used to prove the Jordan curve theorem. This gives us a homeomorphism between the interior of the curve and the interior of S considered as sets, and doesn’t reflect the curve itself: If γ is not differentiable, for example, we will of course not be able to get a holomorphic extension to R2, which is a core property of that theorem.
However, below we need a homeomorphism valid on the whole plane; we do not know whether a constructive version of the above theorem has already been shown. Fortunately, we do not need such a constructive version here.
Later we want to compare different representations using Jordan curves, where we will use the length of a curve as important additional information. A suitable definition of this length is (see [Wikipedia], e.g.; we will only use the case X = R2):

Definition 2.4 If X is a metric space with metric ‘dist’, then the length of a curve
γ : [0, 1] → X is defined by


Length(γ) = sup

k

i=1

	
dist(γ(ti), γ(ti−1)) : k ∈ N and 0 = t0 < t1 < ··· < tk = 1 

A rectifiable curve is a curve with finite length.
In general, the length of a (computable) Jordan curve can be infinite. Even for rectifiable Jordan curves, the length might be non-recursive; this has already been shown in [5](9): The authors construct a computable curve with a non-recursive length. It is quite easy to see that the length of the constructed curve is left- computable but not right-computable. This leaves the question whether the length must always be left-computable. We are able to give a positive answer. Please note that this result holds for all curves; it is not necessary that they are Jordan curves. So for each computable Jordan curve γ, Length(γ) is left-computable.
Theorem 2.5 The length of curves is (δ[0;1], Q )-computable, but even restricted to
Jordan curves it is not (δ[0;1], Q )-continuous.
→	>
Please note that the construction in the proof below even works if we restrict the domain of the length operator to Jordan curves with finite length.
Proof. To show the computability, consider γ ∈ C([0; 1], R2). For any l < Length(γ), definition 2.4 implies that there are 0 = t0 < t1 < . . . < tk = 1 and m ∈ N such that

k
Length(γ) ≥	dist(γ(ti), γ(ti−1)) > l + 22−m
i=1
As γ is continuous, there are dyadic values di such that dist(γ(di) − γ(ti)) ≤
2−m/k for each i. So also Σk	dist(γ(di), γ(di−1)) > l + 21−m.
Now consider the following oracle machine M . Its oracle φ is interpreted as a curve γ using δ[0;1]. Internally, M will use a (computable) bijection π : N → D∗ × N.
Given any input n ∈ N, M first computes π(n) = ((d0,..., dk), m) and checks whether 0 = d0 < di < . . . < dk = 1. If not, M returns 0 ∈ D (as a valid lower bound for the curve length) and stops.
Otherwise, M uses the oracle φ to compute approximations gi to γ(di) with an error of ≤ 2−m−1/k for each i.
Finally M computes sn := −2−m + Σk	dist(gi, gi−1)(∈ D) and returns sn.
By construction, we have sn ≤ Length(γ). On the other hand, the discussion above shows that for any l < Length(γ) there is an input n such that l < sn.

So for any φ in the domain of δ[0;1] this algorithm computes a sequence (s
n)n∈N

[0;1]
with supn sn = Length(δ	(φ)), i.e. Length is left-computable.
Standard arguments can be used to show non-(δ[0;1], Q )-continuity of Length. 
→	>

3	Jordan domains/areas
As Jordan curves have a non-empty, open interior, they can be used to define regions in the Euclidean plane. In [6,12,14] a bounded open set S ⊆ R2 is called a Jordan domain if its boundary ∂S is a Jordan curve. The main focus of these papers was on Jordan domains computable in polynomial time, i.e. there had to be at least one polynomial time computable Jordan curve ц such that ц(S) = ∂S. Of course, due to the Jordan-Scho¨nflies theorem, the Jordan domains are topologically just homeomorphic images of the open unit disc.
On the other hand, in computable analysis several definitions of computability of subsets of Rn have been discussed in the near past, especially for bounded sets. Many of these definitions always apply at the same time to sets S and their closure S as well: [6,7,8,13], [3], [16,17]. So we should also consider the union of the domain and its boundary, i.e. the homeomorphic images of the closed unit disc. We will call them Jordan areas:
Definition 3.1 A bounded subset S ⊂ R2 is called a Jordan domain, iff it is a homeomorphic image of the open unit disc.  S is called a Jordan area, iff it is a homeomorphic image of the closed unit disc. Let Jo be the set of all Jordan domains and let Jc be the set of Jordan areas.
The first two of the following representations are immediate from the definition of Jordan domains in [6,12,14]. The third is essentially a restriction of a representation of compact sets using a grid of points from [16](143ff). Some properties of this approach (concerning computational complexity) can be found in own paper [17]. In [4] a comparison of several representation of compact sets can be found.
Definition 3.2 Representations for the set Jc of Jordan areas:
The ‘Jordan curve’ representation Q→ is defined by: Q→(φ) = S for a S ∈ Jc
iff
ц := δ[0;1](φ) is one-to-one on [0; 1), ц(0) = ц(1) and ц[0; 1] = ∂S
The ‘Jordan sphere’ representation Q  is defined by: Q (φ) = S for a S ∈ Jc
iff
ц := δS (φ) is one-to-one on S and ц(S) = ∂S
The ‘grid name’ representation Q# is defined by: Q#(φ) = S for a S ∈ Jc iff
φ : N → F (D2) satisfies (∀n ∈ N) (φ(n) ∈ F (D2 ) ∧ dH (S, φ(n)) ≤ 2−n)

Essentially, Q→ and Q are defined by combination of a restriction of the standard representations of function spaces (to [0; 1] or S) and an additional equivalence relation on the functions (where ƒ ≡ g iff ƒ [0; 1] = g[0; 1] or iff ƒ (S) = g(S) ).
So the same set is represented by many different functions: (1) we can choose any point on the boundary to be the ‘starting point’ of the Jordan curve, (2) the orientation of the curve might be clockwise or anticlockwise, and (3) the ‘speed’ of the curves can differ.

Obviously it is quite easy to translate between Q→ and Q , but the relations between Q and Q# will be the main topic of this paper.
Lemma 3.3 Q→ ≡ Q 
Proof. Omitted.	 
In the following we first want to show that we are able to translate Q to Q#. Using the Jordan curve theorem, we essentially have to determine whether a point is in the exterior of the curve ц, in its interior, or whether it lies on the curve itself (or more precisely: is near the curve). Neither the exterior nor the neighborhood of the curve place a problem; we only have to be sure when we look at the interior. Here the notion of the winding number (or index) of a curve is important; the basic idea has already be used in [2], in [5,6] Ko and Chou analyzed aspects of its complexity. The winding number for a closed curve ц and a point z0 may be defined via a complex integral (i.e. we identify R2 with C):


Ind

(z ) :=  1  

  dz 

γ  0	2πi
γ
z − z0

Constructive aspects of the winding number have been addressed already in [1], a fully computerized proof of some of its properties can be found in [9].
Please note that here we essentially have a path integral in the set of complex numbers. If z0 does not lie on the curve, then the value of the integral is well- defined, and must be an integer.  In case of Jordan curves, its value is either 0
(for points in the exterior of ц), +1 (for points in the interior of a curve ц that is positively oriented) or −1 (for points in the interior of a negatively oriented ц). As the value must be an integer, it is sufficient to approximate the integral with a
precision fixed to 2−1. So for any point not on the curve, we are able to determine
the value in finite time. The dependency of the computation time on the distance to curves, that are polynomial time computable, has already been studied in [6]. Here we present a uniform formulation of the result:
Lemma 3.4 The winding number Ind is ((δS , Q2), νN)-computable on the set
{(ц, z0) | ц ∈ C(S, R2), z0 /∈ ц(S)}

Proof. Omitted.	 
In the following we will use the computability of the winding number to translate between Q and Q#. In [12], Ko and Yu analyzed the complexity of a further algorithm for the membership problem for curves computable in polynomial time, which could also be used as (still non-uniform) step towards the reduction between Q and Q#.
Definition 3.5 Define the ‘boundary grid’ representation Q∂ of Jordan areas by:

Q∂⟨d0, φ⟩ = S for a S ∈ Jc iff d0 denotes a dyadic point in the interior of S and
φ determines the boundary of S as follows:
φ : N → F (D2) satisfies (6n ∈ N) (φ(n) ∈ F (D2 ) Λ dH (∂S, φ(n)) ≤ 2−n) Please note the difference: Q∂ uses just the boundary of S and an interior point,
while Q# uses the whole set S!
Lemma 3.6 Q  ≤ Q∂ ≤ Q#
Proof. Omitted.	 
It can easily be seen that at least one part of the inverse of the previous lemma is not true: There is no continuous translation from Q# to Q∂. Unfortunately, we do not know whether Q∂ /≤t Q→ or not.
Lemma 3.7 Q# /≤t Q∂, Q# /≤t Q→
Proof. To prove Q# /≤t Q∂, we can use a standard argument for non-continuity: Just consider the unit circle as a special Jordan area and the special Q#-name φ
with φ(n) = {d ∈ D2 | dist(d, (0, 0)) ≤ 1}. If there were a translation from Q# to
Q∂, there would be a n0 such that only φ(n) with n < n0 are used to determine a
dyadic d in the interior of the unit circle. But if we now remove an open strip from the unit circle that has a width of 2−n0 and contains d, then the resulting Jordan area would have a name ψ that coincides with φ for n < n0, but doesn’t contain d. So the translation would be wrong for ψ.
Q# /≤t Q→ then is a simple consequence of Q→ ≤ Q∂ and Q# /≤t Q∂.	 
In the following we want to find additional constraints that allow to translate from the grid name representation Q# to the Jordan curve representation Q∂. First, we have a closer look at the length of Jordan curves (i.e. at the length of the boundary of Jordan areas) again:
In the proof on the length of a Jordan curve in the previous chapter, it was very easy to find an ‘ordered’ set of values on the curve: We simply took ц(ti) for an increasing sequence (ti). Using the grid representation Q#, it is harder to ensure this ordering. The following two lemmata will give us the necessary tools. The first one is very technical and will ensure that we are able to find valid lower approximations for Length(ц); many of its preconditions are depicted in figure 1(a). The second lemma will be used to show the convergence of the approximations.
Lemma 3.8
Let S be a Jordan area and let ц be a Jordan curve with ∂S = ц(S).
Let θ : [0; 1] → R2 be a Jordan curve in the form of a square such that S lies in the interior of θ.
Let 0 < t1 < . . . < tk < 1 be given for a k > 1.
Let k pairwise disjoint curves θi : [0; 1] → R2 be given such that:
θi(0) = θ(ti), i.e. θi starts in θ(ti) on the square.

All the other points of θi are in the interior of θ and in the exterior of S.
Let ε ∈ R+ be given.
Deﬁne pi, si, Oi and Ci as follows for each i from 1,..., k:
si := θi(1) is the endpoint of θi, pi := θi(0) is its initial point.
Oi := B(si; ε) is an open disc around si with radius ε.
Ci := ∂Oi is the circle with center si with radius ε.
Suppose that Oi ∩ S /= ∅.
Suppose that the Ci are pairwise disjoint, lie in the interior of θ and that Ci
and θj are disjoint for i /= j.
Then the length of ц can be approximated as follows:
Length(ц) ≥ Length(s1s2 ... sks1) — 2k · ε

Proof. First we want to find a set X of points {xi | 1 ≤ i ≤ k} on the curve ц that are ‘connected’ to the curves θi: Let i be arbitrary between 1 and k. By conditions
and (vii) we know that Oi ∩ ц(S) /= ∅, so a part of ц(S) will be inside of Ci. As k > 1, there is a second index j with j /= i and Oj ∩ ц(S) /= ∅. So, by (viii), another part of ц(S) must be outside of Ci. As ц is continuous, ц(S) ∩ Ci /= ∅ follows.
As both Ci and θi are closed sets, their intersection must also be closed. So on
θi there is a ﬁrst point zi of intersection with Ci:
zi := min{θi(t) | 0 ≤ t ≤ 1 Λ θi(t) ∈ Ci}
t

With a similar argument, we can show that there is a first point xi on Ci, clockwise after zi, that lies on ц(S). The situation is depicted in figure 1(a).
p2

z2
x2


z1	zη
p1	x1
xη

γ

xν
θ	zν
pν

(a) Construction of xi from preconditions in Lemma 3.8	(b) Main argument for point order Fig. 1. Relations between Jordan curve γ and boundary curve θ
In the following we want to show that the points {xi | 1 ≤ i ≤ k} are already ordered on the curve ц according to the index i: Any pair of points xi and xj with i /= j partitions the Jordan curve ц into two disjoint sub-curves Pi,j (leading

clockwise from xi to xj) and Pj,i (leading clockwise from xj to xi, so consisting of the rest of the curve ц). These sub-curves Pi,j also define sets of indices Ii,j := {ν | xν lies on Pi,j,ν /= i, ν /= j} of the points from X on that sub-curve.
For simplicity, we will only consider the case i = 1 and the points x1, x2 in the following: The curves P1,2 and P2,1 divide the set {i | 3 ≤ i ≤ k} into disjoint sets I1,2 and I2,1.
With an indirect argument we will show that one of the two index sets is empty: Suppose both were non-empty, so there exist a ν ∈ I1,2 as well as an η ∈ I2,1. So P1,2 is the union of P1,ν and Pν,2, while P2,1 consists of P2,η and Pη,1. These four
curves are all disjoint with the obvious exception of the endpoints, while together they must again yield ц. The situation is homeomorphic to the figure 1(b).
ц may neither cross θ nor any θi (by conditions (ii) and (iv)) nor any of the arcs between zi and xi (by construction of the xi), with exception of the xi themselves. So obviously, two of the curves P1,ν, Pν,2 P2,η, Pη,1 must cross, which is a contradiction to ц being a Jordan curve. (A formal argument could be based e.g. on the Jordan curve composed by Pν,2, the line segments p2z2x2 and pνzνxν together with that part of θ connecting p2 and pν via p1 so that x1 lies in the interior and xη in its exterior.)
So either I1,2 or I2,1 is empty. Consider the case that I1,2 = ∅. As 1 ∈ I2,3 would imply 3 ∈ I1,2, we know 1 ∈ I3,2, so I3,2 /= ∅. Using the same argument as above, I2,3 must be empty. Inductively, the paths P1,2, P2,3,..., Pk−1,k, Pk,1 must be a disjoint (with exception of the endpoints) decomposition of ц. Here ц has the same orientation (positive or negative) as θ.
The same argument shows that in the case I2,1 = ∅ the curve ц is decomposed into Pk,k−1, Pk−1,k−2,..., P2,1, P1,k. Here ц and θ have different orientation.
In both cases the length of ц can be approximated from below by the length of the polygon given by the points x1x2 ... xkx1. As dist(xi, si) ≤ ε, we conclude
Length(ц) ≥ Length(x1x2 ... xkx1)
≥ Length(s1s2 ... sks1) — 2k · ε
So from the ‘approximating’ polygon s1s2 ... sks1 we are able to derive a valid lower bound for Length(ц).	 
Lemma 3.9 The boundary length is (Q#, Q<)-computable. So if a Jordan area S
has a computable Q#-name, then Length(∂S) is left-computable.
Proof. Suppose φ is a Q#-name for a Jordan area S, let ц be a Jordan curve with
ц([0; 1]) = ∂S.
To find a lower bound for Length(∂S), consider tuples (ε, k, θ, (θi)) of the fol- lowing objects: any ε ∈ D, k ∈ N, any square θ with center 0 and side length r ∈ D, any piecewise linear curves θi with dyadic vertices. Let pi and si be the dyadic end points of θi, as well as Oi := B(si; ε). An additional t ∈ N will act as a time bound. Then for at most t steps and using φ as an oracle for S, try to check whether this combination of values fulfills all properties from Lemma 3.8. If the time is sufficient and if the check gives a positive result, then return l := Length(s1s2 ... sks1) — 2kε.

Otherwise return l := 0 (as a lower bound for ∂S).
As the set of tuples (ε, k, θ, (θi), t) is countable, we can use a pairing function to encode each tuple into a natural number n; so this ‘algorithm’ defines a functional ƒ : (φ, n) '→ l. By Lemma 3.8, ƒ (φ, n) ≤ Length(∂S) must hold.
We still have to show that the sup ƒ (φ, n) = ∂S:  So consider an arbitrary
L < Length(∂S). By definition 2.4, there must be a ε > 0 and values 0 < t1 <
. . . < tk < 1 such that L < Length(y1y2 . .. yky1) — ε, where yi := ц(ti). We want to show now that there is an n such that L ≤ ƒ (φ, n).
Now instead of ц with ц([0; 1]) = ∂S consider ц with ц ◦σS = ц. This transforms the ti into points {ri | 1 ≤ i ≤ k} ordered clockwise on S such that ц(ri) := yi. Due to the Jordan-Scho¨nflies theorem, there is a homeomorphism Γ on R2 that extends ц, i.e. Γ(ri) = ц(ri) = yi. Define infinite curves ηi : {t | t ≥ 1} → R2 by ηi := ri · t. These curves start at the ri on the unit circle. Additionally, they are unbounded and pairwise disjoint. As Γ is homeomorphic, this must also hold for their images Γ(ηi). In consequence, any square θ containing S has a non-empty intersection with each of the Γ(ηi).


Fig. 2. Homeomorphism Γ and resulting θi

Just fix one ‘large’ square having a dyadic side length. Then let θi be the restriction of Γ(ηi) from the starting point yi to the first point intersection point pi with θ. Using a re-parameterization, we may as well assume θi : [0; 1] → R2, see figure 2. These curves θi must be pairwise disjoint, so there is a dyadic ε' > 0 smaller than the distance between any of these curves. We may assume ε' <  ε . The closed sets θi[0; 1] \ B(yi, ε') and ц(S) are also pairwise disjoint, so there is a dyadic δ with 0 < δ < ε' that is smaller than the distance between them.
Consider the open sets Si :=  z∈θ[0;1] B(z, δ): It is easy to see that each of these sets contains dyadic polygons θ' touching θ on the one end in a point p' , while the
i	i
other end point s' is closer to yi than ε', and additionally that the distance between
ц(S) and θ'[0; 1] is at least δ.
The tuples (ε', k, θ, (θ')) have all the properties necessary for Lemma 3.8. Be- cause of the lower bound δ we are able to check these properties in a finite amount
t of time, just using φ; so there is an n with ƒ (φ, n) = Length(s' s' ... s' s' ) — 2k · ε'.
1 2	k 1
On the other hand, each s' is closer to yi than ε, so Length(s' s' ... s' s' ) ≥
i		1 2	k 1
Length(y1y2 ... yky1) — 2kε'. Using ε' <  ε , this implies L < ƒ (φ, n).	 
To be more precise, we reformulate this result using representations.

Definition 3.10
Let Jc be the set of all Jordan areas with a boundary of finite length.

Let Q#
be a representation of Jc
such that Q#⟨φ, ψ⟩ = S iff Q#(φ) = S and

Q(ψ) = Length(∂S).

Let Q→
be a representation of Jc
such that Q→⟨φ, ψ⟩ = S iff Q→(φ) = S and

Q(ψ) = Length(∂S).
Let Q→ be a representation of Jc defined by restriction of Q→, i.e. Q→(φ) := Q→(φ)
r	f	r
iff Q→(φ) ∈ Jc.
Please note: As we already know that the boundary length must be computable from the left, it would be sufficient if we additionally are able to compute it from the right.
Now we are able to formulate the main result of this paper:
Theorem 3.11	The following reductions are valid:
Q# ≤ Q→
f	r
Q# ≡ Q→
f	f
Q→ /≤t Q→
r	f
So given the (ﬁnite!) length of the boundary of a Jordan area and a grid name of the area, we are able to ﬁnd a Jordan curve describing this boundary.
Proof. We only have to show Q# ≤ Q→ here. Then Q# ≡ Q→ is a trivial consequence
f	r	f	f
of Lemma 3.6, while Q→ /≤t Q→ follows from 2.5.
r	f
Let ⟨φ, ψ⟩ be a Q#-name for a Jordan domain and let S := Q#(φ) be the Jordan area given by φ, i.e. l := Q>(ψ) is the length of any of the (uncountably many) Jordan curves ц with ц[0; 1] = ∂S.
One part of the problem is to determine one ‘initial’ point α on the boundary
∂S; however, the location of this point will depend computably(!) on the name φ. Consider the special curve цα with:
clockwise orientation,
цα(0) = цα(1) = α and
Length(цα(  i )) = l ·  i .
n	n
Having fixed α, цα is uniquely determined by the properties above. In the following we will construct both α and the curve цα in parallel.
⟨φ, ψ⟩ will be used as the oracle for an oracle Turing machine. On input n ∈ N, this machine should return converging approximations to цα.

In the following we will just show instead that we are able to evaluate цα(t) to any precision for any argument t, which is equivalent to the approximation of цα.
Later in the proof we will need increasing sequences of natural numbers m to- gether with positive dyadic values εm and a second sequence of closed dyadic polyg-
onal paths smsm...smsm such that for any of these m there is a corresponding
1  2	m 1

path xmxm...xmxm of points from ∂S (in clockwise orientation) with xm ∈ Om :=
1  2	m 1	i	i
B(sm; εi). For any of the xm let tm be such that цα(tm) = xm. We may easily
i	i	i	i	i
ensure that always εm ≤ 2−m.
The construction of the sequences will be done iteratively (and independent from t, so the resulting point α will only depend on φ): We start with m = 1 and ε1 := 1/2. Then we use φ to find an arbitrary dyadic point s1 from ext(S) such
that B(s1; 1/2) ∩ S /= ∅, so there is a x1 ∈ O1.
1	1	1
m'
If εm' and s1	are already determined, we can use φ and the exhaustive con-
struction from the proof of 3.9 to find new values m > m', εm and smsm...smsm. We
1  2	m 1
only restrict this search as follows: We demand εm ≤ 2−m, a nondecreasing length
of the path smsm...smsm, and additionally sm ∈ Om ⊂ Om' . This will ensure that
1  2	m 1	1	1	1
the sequence Om converges to a single point α with α ∈ B(sm; εm) for any m. As

1
m'	m'
m' m' 1 ' m'	m'

x1  ∈ O1 , choosing y1y2 ... ymy1 as a refinement of x1 x2 xm' x1	with y1 = x1
in the proof of the convergence in 3.9 shows that even with this restriction we still
get paths smsm...smsm having length arbitrarily close to l.
1  2	m 1
As the xm are close to the sm, for any i < j we have

i	i

Length(цα([tm; tm]) ≥ Length(xmxm ... xm

xm)

(1)
i	j	i	i+1
j−1 j

≥ Length(smsm ... sm sm) — 2mεm
i  i+1	j−1 j
for the sub-curve цα([tm; tm]) between xm and xm.
i	j	i	j
Now let ϵ(m) := 2(m+1)εm. So using lm := Length(smsm ... smsm) — ϵ(m) we

<
get lm < Length(xmxm ... xmxm) ≤ l.
1  2	m 1

<	1  1	m 1
To get approximations lm converging to l from the right is much easier: We
only have to use ψ.
Now consider an arbitrary t ∈ [0; 1] for which we want to approximate цα(t). (For simplicity we will use t as a fixed, exact value, but the following could be formulated using approximating intervals as well, on the cost of the ease of reading.) The precision of the approximation shall be 2−n.
We start the approximation by searching a value m such that ϵ(m) < 2−n−4 and additionally lm — lm < 2−n−4. This search will stop after finite time, as both lm
>	<	>
and lm converge to l. We may assume that at the end also all lengths smsm	are
<	i  i+1
smaller than 2−n−3, as we can reduce the size of the sets Oi in the construction in
3.9 and then insert new points into the sequence if needed.
By definition of цα we have Length(цα[0; t]) = l · t. Let j be maximal such
that Length(smsm  ... smsm) ≥ (1 — t) · lm + ϵ(m) and i be minimal such that
j  j+1	m 1	>
Length(smsm ... sm) ≥ t · lm + ϵ(m). As the whole curve has a length close to lm,
1 2	i	>	>
we will assume 1 < j < i < m for simplicity in the following.
Then using equation (1) and α ∈ B(sm; εm), we have (for i) Length(цα([0; tm])) ≥
1	i
t · lm > t · l, and (for j) Length(цα([tm; 1]) ≥ (1 — t) · lm > (1 — t) · l, so together
>	j	>
we see that tm < t < tm, i.e. цα(t) is located somewhere on the sub-curve between
j	i
xm and xm.
j	i
Using the special choice of i and j and the density of the points si, we additionally
get Length(smsm ... sm) ≤ t·lm+ϵ(m)+2−n−3, implying Length(smsm  ... smsm) ≥
1  2	i	>	i  i+1	m 1

lm — t · lm — ϵ(m) — 2−n−3. So Length(цα([tm; 1])) ≥ lm — t · lm — ϵ(m) — 2−n−3.
<	>	i	<	>
In a similar manner we get Length(цα([0; tm])) ≥ lm — (1 — t) · lm — ϵ(m) — 2−n−3,
j	<	>
hence Length(цα([tm; tm])) ≤ l + lm — 2lm + 2ϵ(m)+ 2−n−2. This results in
j	i	>	<
Length(цα([tm; tm])) ≤ 2−n−1
j	i
This implies that also the distance between sm and цα(t) is at most 2−n.

So for any t we are able to approximate цα(t) with any desired precision. This is sufficient to show that we are able to compute цα from ⟨φ, ψ⟩.	 
[0;1]
If in the proof we just use the constructed Jordan curve ц0 (given via δ	) in-
stead of using the Jordan area (via the representation Q→), we see that we essentially
constructed a mapping from Jordan areas to their boundaries:
Corollary 3.12 There isa (Q#, δ[0;1])-computable multi-valued function Bƒ : Jc →
f	→	f
C([0; 1], R2) such that Bƒ (S) is a Jordan curve ц deﬁning the boundary of S.
As there are many Jordan curves defining the same Jordan area, this func- tion seems to be inherently multi-valued. There are three sources for this multi- valuedness, only two of which we could avoid in the proof of 3.11:
Orientation of the curves: In main part of the proof, we restricted the orientation to always be clockwise.
‘Speed’ of the curves: Because of the finite length, we were able to ‘normal- ize’ the speed, i.e. for a total length l any initial segment of the curve fulfills Length(ц[0; x]) = x · l.
Starting point of the curves: Here we were unable to find a computable single-
valued mapping S '→ α from Jc to R2 such that α is on the boundary of S.
Although we don’t believe that such a mapping exists, we cannot present a proof here.
4	Closing Remarks and Questions
Many open questions and problems arose during the preparation of the paper:
There should be a multivalued(?) continuous mapping ц → Γ, i.e. there should be a constructive version of the Jordan-Scho¨nflies theorem.
Can we say anything about the complexity of Γ? How large is its complexity for standard examples?
Does the length of a rectifiable curve also help to compute its measure? Compare this to [11], where a rectifiable curve with nonrecursive measure was constructed. That curve had a non-computable length.
While the representation Q→ is hard to generalize, it is straightforward to define a higher-dimensional analogue to Q and Q#:

Definition 4.1
For any dimension d ∈ N, d ≥ 2, the d-dimensional unit sphere Sd ⊆ Rd can be defined as Sd := {x ∈ Rd : |x| = 1}.
The d-dimensional Jordan areas Jc can be defined via the image of Sd under a
continuous injective function.
A representation Q  can be defined by Q (p) = S for a S ∈ Jc iff
d	d	d
ƒ := δSd (p) is one-to-one on Sd and ƒ (Sd) = ∂S
A representation Q# can defined by Q#(p) := S for a S ∈ Jc iff
d	d	d
φ : N → F (Dd) satisfies (6n ∈ N) (φ(n) ∈ F (Dd) Λ dH (S, φ(n)) ≤ 2−n)
For complexity, instead of using d-dimensional unit sphere the d-dimensional unit cube could be of interest: Here we have a grid of dyadic points on each face of the cube, which should enable us to simplify several constructions.
The idea of using the length of the boundary in order to compute the boundary itself is presumably not useful in higher dimensions: Here we would like to use the area of the surface, but there could be very thin ‘needles’ (i.e. with a very small surface) that destroy the locality of the boundary.
Unfortunately, the Jordan-Scho¨nflies theorem cannot be generalized to higher dimensions, with Alexanders horned sphere being a counterexample.

References
Errett Bishop and Douglas Bridges. Constructive Analysis. Springer-Verlag New York, Inc., Secaucus, NJ, USA, 1985.
G. Berg, W. Julian, B. Mines, and F. Richman. The constructive jordan curve theorem. Rocky Mountain J. Math, v5:225–234, 1975.
Mark Braverman. On the complexity of real functions. focs, 00:155–164, 2005. doi:10.1109/SFCS. 2005.58.
Mark Braverman. On the complexity of real functions. e-print, Feb., 2005. arXiv:cs/0502066v1.
Arthur W. Chou and Ker-I Ko. Some complexity issues on the simply connected regions of the two- dimensional plane. In STOC ’93: Proceedings of the twenty-fifth annual ACM symposium on Theory of computing, pages 1–10, New York, NY, USA, 1993. ACM Press. doi:10.1145/167088.167093.
Arthur W. Chou and Ker-I Ko. Computational complexity of two-dimensional regions. SIAM J. Comput., 24(5):923–947, 1995. doi:10.1137/S009753979325456X.
Arthur W. Chou and Ker-I Ko. On the complexity of finding paths in a two-dimensional domain i: Shortest paths. Math. Log. Q., 50(6):551–572, 2004. doi:10.1002/malq.200310120.
Arthur W. Chou and Ker-I Ko. On the complexity of finding paths in a two-dimensional domain ii: Piecewise straight-line paths. Electr. Notes Theor. Comput. Sci., 120:45–57, 2005. doi:10.1016/j. entcs.2004.06.033.
John Harrison. Formalizing basic complex analysis. In R. Matuszewski and A. Zalewska, editors, From Insight to Proof: Festschrift in Honour of Andrzej Trybulec, volume 10(23) of Studies in Logic, Grammar and Rhetoric, pages 151–165. University of Bia-lystok, 2007.
Peter Hertling. An effective riemann mapping theorem. Theoretical Computer Science, 219(1–2):225– 265, 1999. doi:10.1016/S0304-3975(98)00290-4.

Ker-I Ko. A polynomial-time computable curve whose interior has a nonrecursive measure. Theor. Comput. Sci., 145(1-2):241–270, 1995. doi:10.1016/0304-3975(94)00154-B.
Ker-I Ko and Fuxiang Yu. Jordan curves with polynomial inverse moduli of continuity. Electron. Notes Theor. Comput. Sci., 167:425–447, 2007. doi:10.1016/j.entcs.2006.08.022.
Ker-I Ko and Fuxiang Yu. On the complexity of computing the logarithm and square root functions on a complex domain. J. Complexity, 23(1):2–24, 2007. doi:10.1016/j.jco.2006.05.007.
Ker-I Ko and Fuxiang Yu. On the complexity of convex hulls of subsets of the two-dimensional plane.
ENTCS, 202:121–135, 2008. doi:10.1016/j.entcs.2008.03.012.
Willi Rinow. Lehrbuch der Topologie. VEB Deutscher Verlag der Wissenschaften, Berlin, 1975.
Klaus Weihrauch. Computable analysis: an introduction. Springer-Verlag New York, Inc., Secaucus, NJ, USA, 2000.
Xishun Zhao and Norbert Mu¨ller. Complexity of operators on compact sets. ENTCS, 202:101–119, 2008. doi:10.1016/j.entcs.2008.03.011.
