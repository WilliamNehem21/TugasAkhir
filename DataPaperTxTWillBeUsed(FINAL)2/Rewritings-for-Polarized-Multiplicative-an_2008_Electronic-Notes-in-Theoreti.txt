	Electronic Notes in Theoretical Computer Science 203 (2008) 109–121	
www.elsevier.com/locate/entcs

Rewritings for Polarized Multiplicative and Exponential Proof Structures
Christophe Fouqueréa,1 ,2	Virgile Mogbila,1 ,3
a LIPN-UMR7030
Université Paris 13, CNRS Villetaneuse, France

Abstract
We study conditions for a concurrent construction of proof-nets in the framework of linear logic following Andreoli’s works. We define specific correctness criteria for that purpose. We first study the multiplicative case and show how the correctness criterion given by Danos and decidable in linear time, may be extended to closed modules (i.e. validity of polarized proof structures). We then study the exponential case and give a correctness criterion by means of a contraction relation that helps to discover frontiers of exponential boxes.
Keywords: linear logic, proof-nets, logic programming, focalization.


Introduction
Girard gave in his seminal paper [9] a parallel syntax for multiplicative linear logic (MLL) as oriented graphs called proof-structures. Let us recall that a MLL formula is either an atomic formula A, a negation of an atomic formula A⊥, or built with a binary connective ⊗ or . In the original definition, a proof-structure for MLL is constructed by means of the following binary links:
A

⊗-link:
-link:
axiom-link:	
A	A⊥
B

where every occurrence of formula is a premise of at most one link and is a conclusion of exactly one link. A correctness criterion enables one to distinguish sequentializ- able proof-structures (the so called proof-nets) from "bad" structures (that do not correspond to proofs in the sequent calculus). After Girard’s long trip correctness

1 Partially supported by ACI NIM project Géométrie du Calcul (GEOCAL), France.
2 Email: cf@lipn.univ-paris13.fr
3 Email: vm@lipn.univ-paris13.fr

1571-0661 © 2008 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2008.03.037

criterion, numerous equivalent properties were found. In particular, Danos and Regnier [7] proved that switched proof-structures should be trees, where switching is done by deleting one of the premises of each -link. Danos [6] showed that it is the case iff the proof structure rewrites to • (• is called a contracted node):
(1)	−→	(2)	−→	(3)	−→	(4)	−→

While a lot of research has been done on finding efficient correctness criteria for MLL, it still remains to study correctness criteria in case of polarized proof-structures in MLL, and broaden it to the exponential case. First used by Andreoli in Logic Pro- gramming [1] and also considered in Girard’s works [10] and in Laurent’s works about Polarized Linear Logic [13], this concept of polarization allows to consider proofs built on clustered structures. Recently, polarized proof structures arose nat- urally in logic programming models [2,3,4]. The basic objects we consider are then proof structures with two strata that we call elementary bipolar modules. Elemen- tary bipolar modules may be combined into modules. We recall the multiplicative case in the following section (the reader may find in [8] extension to open modules). We define a correctness criterion that takes care of the parallel structure of mod- ules, extending the Danos criterion. In section 3, we analyze how modules may be generalized to take care of exponentials.

The multiplicative case
We consider in this section the extension MLLu of MLL with the unit of ⊗, 1. Formulae F of MLLu are given by the following grammar (we allow 1 either alone or as part of a tensor): F := 1 | G where
G := A | A⊥ | G ⊗ 1 | 1 ⊗ G | G ⊗ G | G  G
A binary sequent calculus for MLLu is given in Fig. 1. Let PS be the directed graphs where edges are labelled by formulae of MLLu and built with the following links (n ≥ 1):

⊗-link:
A1  An


A1 ⊗ ··· ⊗ An
-link:
A1  An


A1	An
axiom-link:
1-link: 1
A	A⊥	1

possibly with edges pending downwards. Elements of PS are still called proof struc- tures. Formulae labelling pending edges are the conclusions of the proof structure, nodes with pending edges are called conclusion nodes. A proof structure is sequen- tializable if the sequent defined with the conclusions of the proof structure is provable in MLLu. A sequentializable proof structure is called a proof-net. Labels on edges are omitted when clear from the context.
Proposition 2.1 Let π be a proof structure of PS, π is a proof-net (i.e. sequen- tializable) iﬀ π →∗ • where → is given by the following rules:





▶ A⊥,A 
(axiom)		 (1)
▶ 1
▶ Γ,A	▶ A⊥, Δ
▶ Γ, Δ	(cut)

▶ Γ, G1	▶ G2, Δ (⊗)	 ▶ G1, G2, Γ  ()
▶ Γ, G1 ⊗ G2, Δ	▶ G1  G2, Γ

Fig. 1. Binary sequent calculus for MLLu.

−→	(3)	−→

−→	(6)	−→ 

In case (2), the two nodes are distinct.
The proof of the proposition follows from the standard one on binary proof structures for MLL [6], and the following remarks: ⊗ and  are associative and commutative, the 1-ary  connective is by convention the identity, 1 is a unit for ⊗. We first give the definition of an elementary bipolar module (EBM) and give the correspondence with proof structures. We then define a module as the composition of EBMs. A module is correct if the corresponding proof structure is sequentializable.
Definition 2.2 [EBM] An EBM M is given by a finite set H(M ) of propositional variables (called hypotheses) hi and a non empty finite set C(M ) varying over k of finite sets Ck(M ) of propositional variables (called conclusions) cj . Variables are supposed pairwise distinct. 4 The set of propositional variables appearing in M is noted v(M ). An EBM is denoted as a directed graph with labelled pending edges and two kinds of nodes, one positive pole under a non-empty finite set of negative poles:
j1	jK
1	K

hi
The set of pending edges of an EBM M is called the border b(M ).
The proof structure corresponding to an EBM is given by the following transfor- mation on poles. The converse transformation requires the definition of BMs defined

later.

if Ck(M )= ∅:		→


, if Ck(M ) /= ∅:

jk k
	→
cjk⊥



4 This restriction is taken for simplicity. The framework can be generalized if we consider multisets (of hypotheses and conclusions) instead of sets, and add as required a renaming mechanism: the results in this paper are still true.



	→
hi
An EBM M may be equivalently defined as a (type) formula t(M ) in the language
of MLLu augmented by  (recall that A  B = A⊥  B) and using dual formulae:
t(M ) = (  i hi)   ( k(  jk c )), where we use the convention that	k Fk =
jk
  k Fk = F1 when the domain of k is of cardinal 1, and if the domain of i is empty,
The reader should care that this supposes a bilateral sequent calculus, although the
logical reading of an EBM (or of a proof structure) is unilateral. Three kinds of EBMs are of special interest: An EBM is initial (resp. final) if its set of hypotheses is empty (resp. its set of conclusions is empty). An EBM is transitory if it is neither initial nor final. Initial EBMs allow to declare available resources, although final EBMs stop part of a computation by withdrawing a whole set of resources. Transitory EBMs are called definite clauses in standard logic programming.
Definition 2.3 [BM] A bipolar module (BM) M is defined with hypotheses H(M ), conclusions C(M ), and type t(M ), inductively in the following way:
An EBM is a BM.
Let M be a BM, and N be an EBM, let I = C(M )∩H(N ), their composition w.r.t. the interface I, M ◦I N is a BM with the multiset of hypotheses H(M )∪(H(N )−I), the multiset of conclusions (C(M ) − I) ∪C(N ), the type t(M ) ⊗ t(N ) and variables v(M ) ∪ v(N ).
The interface will be omitted when it is clear from the context. Note that the interface may be empty. The translation from proof structures of PS to BMs is given by the following two rules, together with rules (not given here due to lack of space) that take care of the constant 1 and polarity: a unary tensor node (resp. Par) is added in between if (resp. a negation of) a propositional variable is a premise of a Par node (resp. tensor node).
α


 



p⊥	p
−→
α
⊗¸x`˛

where p is a fresh atomic for- mula



cj1 ⊥
cjK ⊥



j1	jK
1	K
−→


hi


Considering BMs in place of proof structures for MLLu has valuable consequences in terms of simplicity of correctness criteria as one can take care of the bipole structure of BMs more directly than it is the case with a binary structure.



α










δ





−→





α





β  δ





γ



α





−→


δ






δ


γ




Fig. 2. Big step reduction relation.
Definition 2.4 [Correctness (w.r.t. sequentialization)] Let M be a BM, M is cor- rect if the corresponding proof structure in PS is sequentializable.
Sequentialization means that there exists a formula C built with the connectives
⊗ and , and the variables C(M ) such that the sequent H(M ), t(M ) ▶ C is provable in Linear Logic.
A closed module is a BM without any pending edges, i.e. with the sets of hy- potheses and conclusions empty. Correctness of closed modules may be tested either in terms of provability in a sequent calculus or by means of correctness criteria for proof structures. In the following, we consider the correctness criteria of Danos [6] using a contraction relation and explained in the previous section, and also the one given by Danos and Regnier [7] that uses switchings: let π be a proof structure with binary links and S(π) the set of (switched) graphs obtained from π by remov- ing exactly one premise edge for each  link, π is a proof net iff each graph in S(π) is acyclic and connected. One generalizes this definition to n-ary connectives by introducing generalized switches: each n-ary  connective induces n switched graphs. One still can define switched proof-structures and a criterion generalizing Danos-Regnier correctness criterion on PS: a proof structure π is a proof net iff the graphs in S(π) are acyclic and connected. A closed module M is DR-correct if the proof structure M ∗ associated to M is a proof net w.r.t. the previous criterion. We abusively refer to the module M instead of the corresponding proof structure M ∗ in the following, speaking of for instance switched module instead of switched proof structure. We immediately have the following proposition as a corollary of the Danos and Regnier criterion theorem:
Proposition 2.5 Let M be a closed module, M is correct iﬀ M is DR-correct.
We give in Fig. 2 a (big step) reduction relation that takes care of the focalization property. Although a Danos-like relation would reduce one variable at each step, our formulation uses as a whole the structure of a module thanks to focalization. The focalization property states that a sequent is provable iff there exists a proof such that decomposition of the positive stratum of formulae is done in one step. Considering bipolar modules, it means that one may define a reduction relation such that each step reduces one pair built with a positive pole and a negative pole.
Proposition 2.6 (Stability) Let M and N be two closed modules such that M →
N, M is correct iﬀ N is correct (rules for → are given in Fig. 2).
Proof. One can define a function from the switched structures s of the module given

on the left hand side of the relation onto the switched structures s' associated to the module on the right hand side such that a switched structure s is acyclic (resp. connected) iff the corresponding switched structure s' is acyclic (resp. connected). 

Theorem 2.7 (correctness) A closed module M is correct iﬀ M →∗ o.
∪

Proof.
Suppose M →∗ o. As o is correct, by prop. 2.6, we deduce that M is correct.
⊥	⊥
∪	∪
Suppose M is correct. Let N be a normal form of M w.r.t. →, then by proposi-
tion 2.6, N is correct. Let us define a partial relation on negative poles of N : let m and n be two negative poles, m < n if ∃p positive pole such that m is linked to the bottom of p and n is linked to the top of p. We consider the transitive closure of this relation. We prove a contradiction if N is in normal form, correct and different from o:
∪
either there is no maximal negative pole. Let us suppose ∃m such that m < m. Then there exists one cycle containing m in the module alternating positive and negative poles. We can then define a switching function on the module (choosing the correct links for negative poles) such that the switched module has a cycle. Hence the contradiction with N being correct.
or let m be a maximal negative pole and p the corresponding positive pole.
If p has other negative poles, N is not in normal form as we can omit the maximal negative pole by neutrality.
If p has no other negative pole and no incoming link then N is either equal to
o or not connected hence not correct.
∪
If p has no other negative pole and each incoming negative pole has at least one link going to another positive pole, then one can define a switching function using for each of these negative poles one of the links that does not go to p: the switched module is not connected. Hence the contradiction with N being correct.
If p has no other negative poles and there exists one incoming negative pole with the whole set of links going to p, the first rule applies: N is not in normal form.

Note that this proof extensively uses the bipolar nature of modules. Moreover, the proof may have been given considering minimal poles in place of maximal poles, and for each proof only one of the two reduction rules is sufficient and necessary! Finally, the same technique as Guerrini [11] used for Danos criterion may be applied here to get a linear algorithm. We detailed in another paper the extension of the technique presented before to open modules as it is a necessary step towards the specification of a logic programming language based on bipolar modules [8].

Dealing with exponentials

Multiplicative exponential linear logic (MELL)

Adding exponentials to the language obviously increases its expressivity: it allows for representing reusable resources. In linear logic, the ’of course’ modality ! enjoys the main property: !A  A ⊗ ··· ⊗ A. Technically, three operations are required: contraction, dereliction and weakening. The first operation states that !A is duplica- ble. Dereliction allows to consider the classical formula !A as the linear one A. The last operation states that !A may be forgotten. The dual modality ’why not’ ? may be interpreted in the following way: ?A⊥ waits for the ’classical’ resource !A. This promotion operation is more complex than the other operations: in terms of proof nets, correctness is assured if a ’box’ in the proof net characterizes the context (and this context has to be correct by itself). Entries of such a box are given by one ! and a set of ?.

From MELLu to ?-EBMs.
The translation from formulae of MELL to modules is not as easy as it is without exponentials. We consider an extension MELLu of MELL with the neutral element 1 for ⊗, a formula F of MELLu is given by the following grammar: F := 1 | G where
G := A | A⊥ | G ⊗ 1 | 1 ⊗ G | G ⊗ G | G  G | ?G | !G
Converting formulae to modules requires the use of polarization and focaliza- tion. Focalization allows to consider n-ary connectives. Formulae are polarized neg- atively or positively according to their main connectives, considering conveniently that variables A, B,... are positive whereas their negations A⊥, B⊥,... are nega- tive. A precise study of the exponential connectives leads to the acknowledgment that exponential connectives change the polarity of formulae: if A is a positive for- mula, ?A is negative whereas !A⊥ is positive. Hence exponential connectives may be split into two parts: !A⊥ = ↓ A⊥ and ?A = ↑bA. The shift connectives ↓ and ↑ change the polarities. The introduction of shift connectives may be generalized also to the linear case whenever there is a change of polarity. The two modalities b and
 express exponentiality.
We consider a slightly different version of a polarized sequent calculus as it was designed by Boudes [5] or Laurent [13]: the system LLpol given by Laurent takes care of atomic formulae which are always exponentialized. Although his aim is to develop a polarized sequent calculus, the sequent calculus we give is a first step toward a polarized proof structure calculus. Following our motivations, our language nMELLpol is restricted to the multiplicative case for simplicity and atomic formulae may be linear or exponential. Finally we use n-ary connectives and the decomposition of exponentials is explicit. The grammar for nMELLpol is given in the following way where the set of formulae is explicitly split into positive (P ) and





▶ ; A⊥, A, bΞ
(axiom) 	 (1)
▶ 1, bΞ
▶ ; Γ, A, bΞ	▶ ; A⊥, Δ, bΞ
(cut)
▶ ; Γ, Δ, bΞ

...	▶ Ni ; Γi, bΞ	...	▶ ; Aj, Δj, bΞ	... 


i∈I
↓Ni N	Aj, Γ1,... , Γ
|I|, Δ1,... , Δ

|J |
, bΞ (⊗)

...	▶ Ni ; b(Ni∈I ↓Ni Nj∈J Aj ), Γi, bΞ	...	▶ ; b(Ni∈I ↓Ni Nj∈J Aj ), Aj, Δj, bΞ	... 

▶ ; b(N
↓N N	A ), Γ ,... , Γ
, Δ ,... , Δ
, bΞ	(b⊗)

i∈I
i	j∈J  j	1
|I|	1
|J |

▶ ; P1,... , P|I|, A⊥,... , A⊥ , Γ	▶ ; P1,... , P|I|, A⊥,... , A⊥ , bΓ

1	|J |
( )
1	|J |
( )

Fig. 3. n-ary sequent calculus for nMELLpol (0-ary tensor is 1).
negative (N ) formulae (A is a positive atomic formula):

⎧ P :=  i∈I ρi | b(  i∈I ρi)
⎩ ρ := A	| ↓N
⎧ N := k∈K νk |  (k∈K νk)
⎩ ν  := A⊥	| ↑P

We keep as convention that a 1-ary tensor is the identity and a 0-ary tensor is the tensor unit 1. Moreover, one can remark that defining 1 as ↓ T, where T is the neutral for the additive connective & , is coherent with our setting and may be useful when extending our framework to additives. Nevertheless, in the following, the standard rule for 1 is implicitly added to the calculi. One can define a n-ary focalized sequent calculus (A is an atomic formula) as in Fig. 3. Sequents con- tain a distinguished place between ▶ and ; , they are in one of the two following forms: ▶ ; Γ or ▶ N ; Γ where N is a negative non atomic formula and Γ is a multiset of positive formulae or atomic negative formulae. The sequent calculus is designed such that, beginning with the distinguished place empty, the proof search consists of repeating the decomposition of a positive formula followed by the decom- position of negative formulae (necessarily subformulae of the positive formula just decomposed), until applying axioms. The sequent calculus is not totally polarized since the negative atomic formulae are kept in the sequents. Note that exponential rules are integrated into linear rules to quotient the search space (e.g. the axiom rule includes weakening, (b⊗) manages dereliction and contraction). The following translation (−)− from MELLu to nMELLpol is such that if F is a MELLu formula,
▶MELLu F is provable iff ▶nMELL  F −; is provable:
1+ = 1	A+ = A	(F1 ⊗ F2)+ = F + ⊗ F + (!F )+ = ↓ F − F + = ↓F −otherwise
1	2
A⊥− = A⊥ (F1	F2)− = F −	F − (?F )− = ↑bF + F − = ↑F +otherwise
The final step consists of flattening nMELLpol formulae to get modules. Bipolar modules were previously obtained by adding atomic formulae between two strata

(say from negative to positive): let P1, P2 be positive formulae, N a negative formula,
▶ P1 ⊗ (N  P2) is provable iff ▶ P1 ⊗ (N  Z⊥),Z ⊗ P2 is provable, where Z is a fresh (positive) atomic formula. However this principle cannot be fully applied when exponentials occur: try to flatten the (provable) sequent ▶ A⊥  ↑b(B ⊗ C),A ⊗ ↓ (B⊥  C⊥). This can be overcome by adding for each atomic formula two exponential atomic formulae in the language. These exponential atomic formulae are noted with or b superscripts: let Z be an atomic formula, Z and Zb mean respectively ↓ ↑Z and ↑b ↓Z⊥. We then consider the translation (−)◦: let C be a non-empty context (negative or positive), Z is a fresh atomic formula
C[ ↑	i∈I ρi]◦  = C[Z⊥]◦, [Z	i∈I ρi]◦
C[ ↑b	i∈I ρi]◦ = C[Zb]◦, [b(Z	i∈I ρi)]◦
In case of an empty context, P ◦ = P, N ◦ = ↓N . If F is a MELLu formula, ▶MELLu F is provable iff ▶nMELL ; F ◦ still holds. We now consider drawings of the following kind, which we call ?-EBM:
AL,1 A'	AL,k A'




Bi
Positive and negative poles may now be labelled: a ?-EBM is reusable when b labels its positive part, labels a promoted variable, brackets mean optional. ∗ labels an exponential atomic negative conclusion of a ?-EBM and we refer to ∗-edge in that case. Roughly, the correspondence between places of exponentials in formulae and labelled elements is the following one:
Y
!(X   Y )	is drawn with the positive pole labelled b:
 ∗Y	X
X  !Y	is drawn with a ∗-edge:	
X	Y
X  ?Y	is drawn with the negative pole labelled :
X
The type of a ?-EBM generalizes the type given for an EBM (brackets mean

optional): C = [!]( 

i∈I
Bi  k∈K [?] ( 

L∈L
AL,k 

m∈M
 m,k
)) . Such a type

(clause in logic programming terminology) could be interpreted as: C is a reusable clause iff ! is explicit. The application of a clause is allowed if the Bi are available, then one of the conclusions is fired, a conclusion being a multiset of atomic formulae

AL,k or exponential, i.e. reusable, atomic formulae Z 
. If the ? modality is present,

the multiset of conclusions is required to be reusable as a whole: not only these
conclusions cannot be used with a linear clause but such a clause cannot use linear hypotheses. For example, consider the set of clauses {1   A ⊗ B, B   ?C, !(A ⊗


	

Fig. 4. ?-EBM and proof nets
C)  ⊥}. The corresponding module we get is drawn in Fig.4 on the left hand side. The figure on the right hand side is the corresponding proof-structure (see [9,12] for definitions of proof structures with boxes, extended here to n-ary connectives). The traversal of the box without the use of a b-node shows that the sequent is not provable (a dereliction should have been applied), i.e. the ?-EBM on the left is not correct.
From ?-EBMs to modules.
Definitions given in section 2, i.e. composition of ?-EBMs (still called modules) and correctness of modules, cannot be straightfully extended to the exponential case. Obviously, composition should satisfy identification of variables occurring on links, noticing that ∗-edges can only be linked to ∗-edges. However, contraction needs a special attention. For the following, we consider explicit contraction: ?-EBMs with positive nodes labelled b, and ∗-edges are duplicated if necessary, mimicking the property !A  !A ⊗ A, hence the degree of edges is always 1. The definition of composition given in section 2 is then adapted consequently for ?-EBMs labelled b and ∗-edges. For example, ∗-edges are duplicated as follows:

 Z
and Z	gives



It is then possible to define the type t(M ) of a module M as the formula given as the tensor of the types of ?-EBMs taking care of possible contractions. Moreover, it is possible to recover a proof-structure M ∗ (with, as usual, contraction, weakening and dereliction nodes) from a given module M . Finally, a module is correct if M ∗ is a proof net.
?-EBMs and corresponding correctness criteria
Extending the language with exponentials yields a major difficulty due to the pro- motion rule, as it is inherently contextual. Note that allowing b in the language (and

exclude ) is sufficient to embed the framework of the previous sections in a program- ming language: one can consider a program as a set of (exponential, reusable) EBMs along with a multiset of (linear, usable once) EBMs. This system already extends classical logic programming in a straightforward way and correctness of modules is tested with the same reduction relation given in previous section, after deleting
∗-edges (application of the weakening rule) and by considering that normal forms may contain ?-EBMs. We consider for the full language the reduction system given by the following two rules:
Label b is put on right
−→	hand side if option is present on left part



−→
Label b is put on right hand side if the two op- tions are present on left part

Propositions equivalent to the ones given for the multiplicative case may be proved. Obviously, if M is a closed correct module in this fragment then the module f orget(M ) built from M forgetting exponentials (omitting labels and replacing ∗- edges by normal edges) is a closed correct BM. We must also characterize normal forms. We add to the reduction system two rules corresponding to neutrality of 1 and weakening of b:


/
/=$
−→
and
/=$	−→	/=$


	
Proposition 3.1 (Stability) Let M and N be two closed modules such that M −→
N. The module M is correct iﬀ N is correct.
Proof. One can define a function from left switched module onto right switched module such that the relation and its inverse are stable w.r.t. acyclicity, connected- ness.	 
Theorem 3.2 A closed module M is correct iﬀ M −→∗o or M −→∗o.
⊥	⊥
∪	∪b
Proof. The proof used for the linear case is adapted here. As the reduction rules are stable w.r.t. correctness, it remains to prove that a correct non-terminal closed module M can always be reduced. We consider the same relation as in proof of Th.2.7. If maximal negative poles do not exist then there exists at least one cycle in module f orget(M ) alternating positive and negative poles. We can then define a switching function on this module (choosing the correct links for negative poles) such

that this switched module has a cycle. Hence a contradiction. So, let us consider one of the maximal negative poles, and the corresponding positive pole. We remark that such a negative pole has no outcoming link (the module is closed and the negative pole is maximal). If the positive pole has other negative poles, we can omit the maximal negative pole by neutrality. Otherwise, let us study the incoming negative poles: (1) If there is no such incoming link, then M is the terminal module. (2) If each incoming negative pole has at least one link a going to another positive pole as in the following figure:
then one can define a switching function using for each of these negative poles one of the link that does not go to the positive pole we considered first. Thus switched structures built from module f orget(M ) are not connected (there are no outgoing links). Hence a contradiction. (3) Else there exists at least one incoming negative pole α with the whole set of links associated to the positive pole: the reduction rules apply and we are finished or this positive pole is linearly linked with b toa negative pole β. Such β is not -marked otherwise it corresponds to a proof-structure with an exponential box with two principal ports, hence a contradiction. The reduction rules apply to β (and then to α) or there exists a link c from β to another positive pole as in the following figure:

β  		α

then one can define a switching function using the c link but not b: the corresponding switched proof-structure contains an unconnected component in the exponential box induced by the ( -marked) α negative. Hence contradiction. This holds because the α links are all linear or none are linear. (4) Finally, there exists at least one incoming negative pole α with the whole set of links associated to the positive pole itself not linearly linked: the reduction rules apply.	 
Corollary 3.3 If F is a provable formula then there exists a correct (closed) module
M such that t(M )= F.

Conclusion
We first adapt the classical rewriting criterion of Danos to the n-ary bipolar case for testing the correctness of closed modules. We show in particular that polarization greatly simplifies the rewriting procedure. We extend our results to the exponential case. In particular, we give a local criterion for testing correctness of modules in presence of exponentials. Note that current criteria presupposes that ’boxes’ are already given, although our reduction relation helps to discover it. These results may

be useful in designing concurrent logic programming languages, in the style suggested by Andreoli in recent papers, as it extends his works by removing constraints on programming objects.
References
Andreoli, J.-M., Logic programming with focusing proofs in linear logic., J. Log. Comput. 2 (1992),
pp. 297–347.
Andreoli, J.-M., Focussing and proof construction, Ann. Pure Appl. Logic 107 (2001), pp. 131–163.
Andreoli, J.-M., Focussing proof-net construction as a middleware paradigm, in: A. Voronkov, editor,
CADE, Lecture Notes in Computer Science 2392 (2002), pp. 501–516.
Andreoli, J.-M. and L. Mazaré, Concurrent construction of proof-nets, in: M. Baaz and J. A. Makowsky, editors, CSL, Lecture Notes in Computer Science 2803 (2003), pp. 29–42.
Boudes, P., Projecting games on hypercoherences., in: J. Díaz, J. Karhumäki, A. Lepistö and D. Sannella, editors, ICALP, Lecture Notes in Computer Science 3142 (2004), pp. 257–268.
Danos, V., “Une application de la logique linéaire à l’étude des processus de normalisation (principalement de λ-calcul),” Ph.D. thesis, Université Denis Diderot, Paris 7 (1990).
Danos, V. and L. Regnier, The structure of multiplicatives, Archive for Mathematical Logic 28 (1989),
pp. 181–203.
Fouqueré, C. and V. Mogbil, Rewritings in polarized (partial) proof structures, in: F. L. Paola Bruscoli and J. Stewart, editors, 1st Workshop on Structures and Deductions, Technical Report ISSN 1430- 211X (2005), pp. 95–109.
Girard, J.-Y., Linear logic, Theoretical Computer Science 50 (1987), pp. 1–102.
Girard, J.-Y., On the unity of logic., Ann. Pure Appl. Logic 59 (1993), pp. 201–217.
Guerrini, S., Correctness of multiplicative proof nets is linear, in: Logic in Computer Science, 1999, pp. 454–463.
Lafont, Y., From proof-nets to interaction nets, in: J.-Y. Girard, Y. Lafont and L. Regnier, editors, Advances in Linear Logic, London Mathematical Society Lecture Note 222, Cambridge University Press, 1995 pp. 225–247, proceedings of the Workshop on Linear Logic, Ithaca, NewYork, June 1993.
Laurent, O., Syntax vs. semantics: a polarized approach, Theoretical Computer Science 343 (2005),
pp. 177–206.
