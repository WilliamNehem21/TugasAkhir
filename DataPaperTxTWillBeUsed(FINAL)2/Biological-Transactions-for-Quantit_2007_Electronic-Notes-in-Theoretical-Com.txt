Electronic Notes in Theoretical Computer Science 171 (2007) 55–67	
www.elsevier.com/locate/entcs

Biological Transactions for Quantitative Models
Federica Ciocchettaa,1 and Corrado Priamib,2
a Dipartimento di Informatica e Telecomunicazioni University of Trento
Trento, Italy
b Dipartimento di Informatica e Telecomunicazioni University of Trento
the Microsoft Research-University of Trento Centre for Computational and Systems Biology Trento, Italy

Abstract
In this work an extension of stochastic π-calculus with biological transactions is presented. This permits to model multi-reactant multi-product reactions as atomic actions when quantitative information are given. First, the syntax and the semantics are defined, then some transaction properties are discussed. Finally, some examples are described.
Keywords: Systems Biology, stochastic π-calculus, biological transactions


Introduction
Systems Biology is a recent research field that aims at a system-level understanding of biological systems [14]. In the last years, as a response to the need of model- ing the dynamics of complex biological systems, there have been some successful applications of process calculi in this research area [17,7,11,18]. One of the most used process algebras in this field is the π-calculus [16], a formal language origi- nally developed for specifying concurrent computational systems. The biochemical stochastic π-calculus described in [17] has been applied to represent and analyze a great variety of biological models [10,3,19]. A critical point in the specification of biological systems is the translation of reactions with more than two reactants, as a reaction is modeled in π-calculus as a pairwise communication between two pro- cesses. Reactions with more than two reactants are rare in nature, but are often used

1 fedecioc@dit.unitn.it
2 priami@dit.unitn.it

1571-0661 © 2007 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2007.05.007

in biological models as abstractions of complex phenomena. A common way to deal with these reactions is to decompose them into a sequence of two-reactant reactions. Following this approach some problems arise. First of all, different combinations of

reactants are possible and there are n!
ways to decompose a reaction (where n is

the number of reactants). Moreover, it can happen that after the formation of an intermediate complex, the further needed reactant misses, leading to a deadlock. A further critical aspect regarding quantitative models is that only one rate is associ- ated to the reaction and from it the rates for each elementary reactions should be derived. Here a different approach is considered. Following the idea in [9], biologi- cal transactions are introduced to model complex reactions. Generally speaking, a transaction is a sequence of computational steps of a distributed system which must be executed as if it were a single atomic action. Recently, there have been some attempts to model transactions formally by using process algebras [5,15,4]. In [5] πt-calculus is presented: it is an extended version of asynchronous π-calculus to deal with long time transactions and offers failure handlers when process interruptions are met. Another extension of asynchronous π-calculus with long-time transactions, called web-π, is introduced in [15]. CSP is the process algebras adopted in [4] to model long-running transactions with traces. In all these works only qualitative aspects are considered.
The aim of this work is to extend the approach presented in [17] to define a variant of stochastic π-calculus with biological transactions. The biological trans- actions proposed in this work satisfy some simple properties that are suitable for modeling complex reactions. For instance, after a transaction has started, it exe- cutes in isolation and ends successfully. Besides, the result is visible only when the transaction ends. In the standard calculus, only simple reactions with at most two reactants are considered, as proposed in [13]. Since transactions involve more than two reactants, an extended version of Gillespie’s algorithm is necessary [8].
Other formalisms permit to represent multiple-reactant multiple-product reac- tions [12,1]. In [12] a core modeling language, called κ-calculus, is introduced. The complexation rule permits to represent reactions involving several reactants. Furthermore, an encoding of this calculus in the asynchronous π-calculus is given. However, this calculus offers only a qualitative description of the model. In [1], a stochastic version of Multiset Rewriting (SMSR) is used to model metabolic path- ways. Also in this case it is possible to encode the calculus in a given process alge- bra, at least in the qualitative case [2]. In the proposed work we decide to enrich the standard stochastic π-calculus directly, without considering other intermediate languages.
The rest of the paper is organized as follows. The next section introduces the cal- culus. After that, some properties are discussed in section 3 and then two examples are described in 4. The last section reports some final remarks.

The stochastic π-calculus with biological transactions
In this section we report the syntax and the semantics of the π-calculus with bio- logical transactions.

General ideas
We follow the approach proposed in [17], founded on Gillespie [13]. Accordingly to Gillespie, the actual rate or speed of a reaction R is the product of the basal rate rb (i.e. an empirical constant depending on the reaction) times the number of possible combinations of the reactants available in a given state. The dynamic evolution of the system is based on a race condition: all the different actions that are enabled in a state compete and the fastest one succeeds. The “standard” biochemical stochastic π-calculus considers only reactions with at most two reactants as a reaction is represented by a pairwise communication between two processes. Since transactions represent reactions with more than two reactants, an extended version of Gillespie approach is necessary (as proposed in [8]). Moreover, as the speed of a complex reaction is described by a unique rate, that rate is associated to the start prefix of the transaction and ∞ (i.e. the associate action is immediate) is assigned to all the other prefixes in the processes related to the transaction. The actual rate of the reaction depends on the rate in the start prefix and on the possible combinations of all the other processes used in the transaction.
Syntax
The action prefixes π and the processes P are defined in the stochastic π-calculus with biological transactions by the following syntax:
π ::= (x(z), r) | (x⟨z⟩, r) | (start(t), r)[P ] | (end(t), r)

m
P ::=	πi.Pi | νy P | P |P | A(y˜) | t[P ]
i=1
where we suppose a countable infinite set of channel names N (ranged over by lower-case letters x, y, z, ...) and a countable set of transaction names T (ranged over by lower-case letters t, t’, t”, ...), with T ∩ N = ∅. The processes generated by the grammar above differ from the ones of the stochastic π-calculus in the prefixes (start(t), r)[P ], (end(t),r) and in the process t[P]. All other processes have the same meaning as in standard π-calculus, [16,20]. As for the prefixes, following [17] each prefix is characterized by a rate r, indicating the single parameter of an exponential distribution that characterizes the stochastic behavior of the activity corresponding to the prefix π. The rate r is either a non-negative real number or ∞. The prefix start(t)[P ] is used to indicate the start of a transaction of name t. The process P inside the square brackets indicates an external process up to structural congruence necessary for the reaction to start. In the same way, the prefix end(t) indicates that the transaction t ends successfully. As for processes, note that the constant



Table 1
Laws for structural congruence.

definition A(y˜) (where y˜ denotes y1, y2, ..., yn) is considered instead of replication, as in [17]. The constant term is equipped with a unique defining equation of the form A(y˜) ::= P , where the free names of P are a subset of y˜. The nil process is obtained putting m = 0 in the summation. Summations are supposed to be in head normal form 3 .
Note that the standard definition of head normal processes must be extended to all the possible prefixes, since other prefixes beside the input and the output are present. The choice of head normal form is motivated by biological considerations, as each channel in the summation represents a different motif/site in the molecule. It is worth noting that differently from [17] here it is not considered a subset of names to describe homodimerization reactions (i.e. reactions between two reactants of the same kind). This point will be explained better when the reduction relation is given. The process t[P ] indicates the transaction of name t described by the internal process P. The other possible processes outside the transaction are called external
processes.
Semantics
An operational reduction semantics that makes use of both a structural congruence
and a reduction relation is given.
The structural congruence (indicated by ≡) is the smallest relations which sat- isfy the laws reported in table 1. In addition to the standard laws, there are the congruence laws for transactions and for the start action.
To better represent the semantics rules, a derived operator ⬦ is introduced. The multi process n ⬦ P , where n ∈ N is the multiplicity of the process P , represents the parallel composition of n processes congruent to P. A definition of ⬦-standard form follows:
n
Definition 2.1 A process P is in ⬦-standard form if P ≡ νx (	ni ⬦ Pi) where
i=1
Pinot ≡ Pj ∀i /= j

3  A process P is in extended head-normal form if either it is nil or P ≡ X πi.Pi and the following conditions
i=1
hold, 6i /= j: (1) if πi and πj are input or output, then sbj(πi) /= sbj(πj ), (2) if πi = (start(ti), r))[Pi] and πj = (start(tj ), r))[Pj ], then Pinot ≡ Pj and ti /= tj , (3) if πi = end(ti) and πj = end(tj ), then ti /= tj . sbj(πi) denotes the name of the channel and not≡ means “not structural congruent”.

m
Pi ≡ t[Q] or Pi ≡	πj.Qj with m ≥ 1, ∀i = 1, ..., n.
j=1

n
In the above definition, νx stays for νx1 νx2 ...νxn ,  Qi is the parallel composition
i=1
of n processes and not ≡ means “not structural congruent”. In particular, the
process inside the square brackets in the start prefix is supposed to be in ⬦-standard form. We claim the following result that is proved by structural induction over processes:
Proposition 2.2 Every process P is structural congruent to a ⬦-standard form.
An operator d 4 may be introduced to put a process P into a ⬦-standard form Q
s.t. P ≡ Q. In the following, some auxiliary functions and definitions are given.
Labels A set of labels Θ must be added to the rules in order to collect the quantita- tive information. The label θ is a 2-tuple of the form (l, ar). The first component (ranged over by l, l', ...) indicates the type of the action and belongs to the following set:
L = {comm(x),t : start, t : comm(x),t : end}

where x ∈ N and t ∈ T . The first label represents a communication between two processes outside a transaction along the channel x, while the others refer to actions involving a transaction of name t. They are the communication between two processes along x inside the transaction t, the start and the end of t. The second component ar is a real number representing the actual rate of the asso- ciate transition. This kind of label gives explicitly the speed of the transition. In addition to these labels, another kind of label ϑ ∈ Θ' are used in the reduction rules. They are defined as a 3-tuple of the form (l, r, nl). The first component is as defined above. The second element is the basal rate associated to the action. Finally, the element nl is a list, whose elements are couples (ni, κi). The com- ponent κi collects the multiplicity of a given reactant (stoichiometry coefficient ) in a reaction and ni is the number of such reactants in the system. The label ϑ contains all the information to calculate the actual rate. Indeed, given nl, the possible combinations of all the reactants are calculated by using the function

4 P d Q is defined as: (1)νx˜ P1 | P2 d nil = P2 d νx˜ (1 o P1), where P1 = t[P0] or P1 = X π'.Qs, (2)
i=1
n	n
νx˜ P1|P2 d νy˜ Y ni o Qi = if Ej s.t. νx˜ P1 ≡ νx˜ Qj then P2 d νz˜ Y n˜i o Qi with n˜j = (nj + 1) and

i=1
n
i=1
s

n˜i = ni 6i /= j else P2 d νz˜(Y ni o Qi|1 o P ') where P1 ≡ X π'.Pi or P1 ≡ t[P0] and P ' ≡ P1 (3)

1
i=1
i	1
i=1

nil d Q = Q It is supposed that P does not contain o. The names z˜ includes y˜ and x˜', where x˜' is obtained from x˜ after opportune conversions over processes.

h(nl), from the list nl to N:
n	n
h(nl)=	i
κ
i=1
where n ≥ 1 is the length of the list. The actual rate ar is calculated as ar = rb × h(nl), where rb is the basal rate of the reaction. We write θ[i] to select the component i, with i ∈ [1, 2], from the label θ. Similarly for ϑ.
Sequence of transitions The notation P0'−→σ Pn indicates a finite sequence of tran- sitions P '−θ→1 P '−θ→2 P ...'−θ→n P , where σ = θ θ ...θ .
Extension of Inx and Outx functions These two auxiliary functions count re- spectively the number of inputs and outputs on the channel x enabled ina process. The definition of Inx in [17] is extended with:
Inx(t[P ]) = Inx(P )	Inx(n ⬦ P )= n × Inx(P )
Inx(start(t)[P0].(P1)) = Inx(end(t).P1)=0 
The definition of Outx is obtained by replacing Inx with Outx.
Function to count processes (countT ). The auxiliary function countT is defined in P× P → N and it is introduced to count the number of instances of a summa- tion P in a process Q up to structural congruence.
m
Given a process P ≡ νx   πk.Pk the function countT s defined as:
k=1
countT (P, nil)= countT (P, νy˜(t[R])) = 0
s	s
countT (P, νy˜(Σ π'.Qi)) = mink{Σ f (νx˜(πk.Pk), νy˜(π'.Qi))}

countT (P, νy˜(Q1|Q2)) = countT (P, νy˜(Q1)) + countT (P, νy˜(Q2))
where f (R1, R2) = 1 if R1 ≡ R2, 0 otherwise. For simplicity, the operator ⬦ is not considered in the second process. Indeed, it may be replaced by using its definition in terms of the operator |.
Function countend(t) It is used to count the number of end(t) prefixes in a given process. Its definition is defined inductively on the processes similarly to Inx and Outx.
Function actT This function gives the set of transaction names that are active in a given process. The definition is as in [6]:
actT (P )= {t|t[Q] is a subterm of P}
In this work simple transactions are considered. It is supposed that after starting, transactions end with success and errors never occur. This allows us to avoid the definition of abort actions, of an abort axiom and of compensation mechanisms. To formalize these concepts, the definition of well-deﬁned internal processes is intro- duced:

Definition 2.3 An internal process P0 is well-deﬁned if t[P0] always reduces to the final process Pfin and contains only one end prefix that may end the transaction.
The hypothesis of only one end prefix that ends the transaction is added to simplify the semantics and has biological sense.
The reduction relation is the smallest relation over processes satisfying the rules and axioms given in table 2. The labeled transition system for the stochastic π- calculus with transactions is defined as LT ST  = (P, Θ, '−→) where the auxiliary
transition relation −→ ⊆ P × Θ' × P is used to define the transition relation '→− ⊆ P × Θ × P.
The rules comm is as in [17]. It describes bimolecular reactions (i.e. two distinct molecules interact). The same rate is used in the input and output. Differently from [17], here it is not necessary to consider a specific axiom to describe the homodimerization reactions. The purpose of this further axiom is to describe the reaction involving two identical molecules by using a communication between two processes, not in head normal form, and to count the number of processes in the desired way. Here, we specify homodimerization reactions by using transactions. For instance, a reaction of kind 2A → B may be translated as:
TR = (start(t), rb)[2 ⬦ ((x1(), ∞). nil + (x2(), ∞). nil)].P '
P ' = (x1⟨⟩, ∞). (x2⟨⟩, ∞). end(t).(PB |TR)
PA = (x1(), ∞). nil + (x2(), ∞). nil + Q
The axiom tstart describes the start of a transaction t. The internal process P1 is represented in the ⬦-standard form and the summation are in head normal form. The parameter κi is the stoichiometry of the reactant of kind i and the process Pij represents the process describing that reactant. A transaction describes a reaction with N = n κi reactants, among which n are distinct. As for the quantitative information contained in the labels, rb is the basal rate of the reaction and nl contains the number of processes of a given kind. The actual rate may be calculated by using the label information as rb × h(nl). The transaction starts only if a process P2 representing the reactants is present in the system. At this point a new transaction is defined, with a fresh name and an internal process described in terms of P0 and of the processes Pij. It is worth noting that the process describing the start is a sort of dummy process necessary to block the processes involved.
The axiom tend describes the end of a transaction. There is only one end prefix enabled inside the transaction with rate in ∞.
The rule par considers four different kinds of action. If l = comm(x) and l = (t : start), the hypothesis ActT (Q) = 0 is added to ensure that no transactions are present in the process Q. This condition guarantees that the actions inside the transaction have priority over the external ones and so that some desired properties are satisfied (see section 3). Each of the subcases is described as follows.
If l = comm(x), the communication among two different processes is described and we proceed as in the standard stochastic π-calculus.
If l = t : comm(x) a communication among two processes inside a transaction t





(comm)	(x(w),r ).P | (x⟨z⟩,r ).P ... (comm(x),rb,[(1,1),(1,1)]) P {z/w} | P ...



b	1	b
2 −−−−−−−−−−−−−−−−−−→ 1	2


(tstart)	P

| (start(t)[P ],r ).P + P

'
(t :start,rb,[(κ1 ,κ1 ),...(κn,κn )]) t'[P {t' } | P ']

2	0	b
n
1	3−−−−−−−−−−−−−−−−−−−−−−−→
κi
1  /t	0

where P0 ≡ νx˜ Y (κi o X πij.Pij) is in o standard form,

P2 ≡ νy˜ Y
i=1
'
k
j=1
P0 ≡ νy˜ Y '
X κi

k=1
(Pk + Q ), with
k=1
Pk, where N =
i=1

n  κi
and P ' ≡ νx˜ Y Y Pij , t’ is fresh
i=1 j=1
(t:end,∞,[(1,1)])
(tend)	t[(end(t), rb).P1|P2]−−−−−−−−−−−→P1	provided that countend(t)(P2)= 0

(l,rb,nl)	'
P −−−−−−→P
(par)		
(l,rb,nl )  '
P | Q−−−−−−→P | Q
CASE l=comm(x):  nl = [(n1, 1), (n2, 1)],  nl' = [(n1 + Inx(Q), 1), (n2 + Outx(Q), 1)],
provided that actT (Q)= ∅
CASE l=(t:comm(x)):  nl' = nl
CASE l=(t:start):  nl = [(n1, κ1), ..., (nn, κn)] and nl' = [(n' , κ1), ..., (n' , κn)]
1	n
κi
with n' = ni + countt(Ri, Q), where Ri ≡ νx˜ X πij .Pij, provided that actT (Q)= ∅

CASE l=(t:end(t)) :	nl' = nl
j=1


(comm(x),rb,nl)
P −−−−−−−−−−−−→P
(tred)			provided that rb = ∞
(t:comm(x),rb,nl)	'
t[P ]

(l,rb,nl)  '

P ≡ P '
P ' (l,rb,(n1 ,n2 )) P '

P ≡ P '

P −−−−−−→P
1	1	1−−−−−−−−−→ 2	2	2

(res)			(struct)		

(l,rb,nl)	'
νw P −−−−−−→νw P
(l,rb,(n1 ,n2 ))
P1−−−−−−−−−→P2

(l,rb,nl)	'
P −−−−−−→P
(ﬁn)	 	
(l,rb×h(nl))	'
P −−−−−−−−−→P


Table 2
Axioms and rules for the reduction relation for the stochastic π-calculus with biological transactions.

is given. The input/output prefixes outside the transaction are not considered, as the external actions are not enabled when a transaction is present. The rate is supposed to be ∞.
If l = (t : start) the start of a transaction is described. It is necessary to count the processes congruent to the ones involved in the reaction and the function countT is used at this purpose. The rate associate to the prefix coincides with the one of the whole reaction.

if l = (t : end), the end of a transaction is given. Only one end action is supposed to be inside a transaction and the external ones are not considered, so n1 = n2 = 1. Besides, the rate is always ∞.
The rule tred say that if a communication is possible between two processes along the channel x, the same communication is possible if the two processes are inside the transaction. The rate is supposed to be ∞. The rule res and struct extend the standard rule with the possibility to deal with transaction. A generic kind of action is considered in the label.
The last rule fin describes how the system finally reduces at each step. The premise collects the quantitative information in its label θ = (l, rb, nl). The con- clusion describes the same relation, but its label gives explicitly the speed of the transition. This is calculated by the information given in the label of the premise.

Some properties
Biological transactions are simple transactions that are introduced to model complex reactions as atomic actions. They must satisfy some properties suitable for modeling biological reactions. For instance, after having started they end successfully in a finite number of steps and return the product process. Besides, it would be desirable that the transaction executes in isolation from the other processes. These concepts may be formalized in terms of the properties of atomicity and serialiability. The former may be expressed by “all or nothing”: a transaction ends successfully or does nothing. Serializability says that it is the same if transactions are executed in parallel or one after the other. Indeed, these properties are general criteria for proving the correctness of the transactions. Some results about these properties are reported. First of all, following [6], a serialized transition processes is defined as:
Definition 3.1 The transaction sequence P '−→σ P ', with actT (P ) = actT (P ') = ∅, is serialized iff li = t : comm(x) or li = (t : start) implies li+1 = t : comm(x) or li+1 = (t : end) for i = 1, ...(n − 1), where li = θi[1].
A property about transition sequences is described in the following proposition:

Proposition 3.2 Given a process P such that actt(P )= ∅ and given the transac- tion sequence P '−θ→1 P1'−θ→2 P2...'−θ→n Pn with θ1[1] = start(t) and θn[1] = end(t) then actt(Pi)= {t} for i = 1, ...(n − 1) and actt(Pn)= ∅
This result follows directly from the semantics, in particular by the definition of the rule par. The next two propositions claim the atomicity and the serializability of the transactions:
Proposition 3.3 Given a process P0 = t[P ] with P well-deﬁned then there always exists a ﬁnite transaction sequence σ such that t[P0]|S'−→σ Pn|S, where S is the rest of the system and Pn is the ﬁnal process resulting from transaction. In the case P is univocally well deﬁned there exists and it is unique the sequence σ.

Proposition 3.4 Given P '−→σ P ' with actT (P )= actT (P ')= ∅ it is serialized.
When a transaction starts, only the internal actions are enabled and it is exe- cuted in a serialized way. The condition ActT (Q)= ∅ in the rule par is fundamental to guarantee the properties above. If a different transaction system is defined as the previous one but with the rule par without the condition ActT (Q) = ∅, the atom- icity is not always guaranteed. Indeed, in this case an action among two standard processes is possible even after a transaction has started and so external actions may interleave the transaction ones. As a consequence, it may happen that a transaction starts but does not end in a finite number of steps.

Examples about biological reactions
In this section, two simple examples about the application of transactions to model reactions are presented.

The three-reactant reaction R1 + R2 + R3 → P
A generic reaction with three distinct reactants and one product is described in the stochastic π-calculus with biological transactions by the system S = PT | P1 | P2 | P3, where:
PT = (start(t), rb)[1 ⬦ P1|1 ⬦ P2|1 ⬦ P3].P0
P0 = (x1⟨⟩, ∞). (x12⟨⟩, ∞). (x123⟨⟩, ∞). end(t).(PPr|PT )
P1 = (x1(), ∞). nil  P2 = (x12(), ∞). nil  P3 = (x123(), ∞). nil
The process PT describes the transaction, Pi is the process representing the reactant Ri for i = 1, 2, 3 and PPr the product P . In this case n = N = 3 and κ1 = κ2 = κ3 = 1. The rate rb represents the basal rate of the reaction and is associated to the start of the transaction. A possible reduction of the system S is:
(t':start,rb×h(nl'))	'	'
S  '−−−−−−−−−−−−→ t [(x1⟨⟩, ∞). P0 | (x1(), ∞). nil | P2 | P3] ≡ S1
(t':comm(x1),∞×1)	'	''
'−−−−−−−−−−−−→ t [(x12⟨⟩, ∞). P0 | nil | (x12(), ∞). nil | P3] ≡ S2
(t':comm(x12),∞×1)	'	'
'−−−−−−−−−−−−−→ t [(x123⟨⟩, ∞). end(t ).(PPr|PT ) | nil | nil | P3] ≡ S3
(t':comm(x123),∞×1)  '	'
'−−−−−−−−−−−−−→ t [end(t ).(PPr|PT ) | nil | nil | nil] ≡ S4

(t':end,∞×1)
−−−−−−−−→	PPr | PT | S
| nil | nil | nil ≡ PPr | PT | S'
≡ S5

where P ' and P '' stays for the remaining part of P0. In the first label, nl' stays for
0	0
[(1 + countT (P1, Q), 1), (1 + countT (P2, Q), 1), (1 + countT (P3, Q), 1)], where Q =
P1|P2|P3. The premises of the rule fin applied as last steps of the derivations are respectively:

(t':start,rb,nl')
(t':comm(x1),∞,[(1,1),(1,1)])
(t':comm(x12),∞,[(1,1),(1,1)])

S−−−−−−−−−→S1, S1−−−−−−−−−−−−−−−−−−→S2, S2−−−−−−−−−−−−−−−−−−→S3,
(t':comm(x123),∞,[(1,1),(1,1)])	(t':end,∞,[(1,1)])
S3−−−−−−−−−−−−−−−−−−−→S4, S4−−−−−−−−−−→S5

The Brussellator model
The Brusselator model is a well-known model of chemical reactions with oscillations [21]. Stochastic simulations of the model are presented in [13]. The reactions that compose the model are the following:


X −r→1
X + Y	Y −r→2
Y −r→3
2Y + Y −r→4
3Y1

where X, Z, Y1 and Y2 represent the species involved and r1, r2, r3, r4 are the basal rates of the corresponding reactions. This model is represented by the system S = PT |PY1 |PY1 |PX |PY2 |PE, where we have:
PT = (start(t), r4)[2 ⬦ (P1 + P2)|1 ⬦ PY2 ].P0
P0 = (x6⟨⟩, ∞). (x4⟨⟩, ∞). (x5⟨⟩, ∞).(end(t), ∞). (PY1 |PY1 |PY1 |PT )
PX = (x1⟨⟩, r1). (PX + PY1 )
PE = (x1(), r1). PE + (x2(), r2). PE + (x3(), r3). PE PY1 = (x2⟨⟩, r2). PY2 + (x3⟨⟩, r3). PZ + P1 + P2
P1 = (x4(), ∞). nil  P2 = (x5(), ∞). nil  PY2 = (x6(), ∞). nil
The process PT describes the transaction, PE is a dummy process introduced to model unimolecular reactions, PX , PY1 , PY2 and PZ represent the processes involved in it in the transaction. The transaction is characterized by N = 3, n = 2, κ1 =2 and κ2 = 1. A possible reduction of S is given by:
(t':start,r4×h(nl'))	'	'
S '−−−−−−−−−−−−→ t [(x6⟨⟩, ∞). P0 | (x6(), ∞). nil | P1 | P2] ≡ S1
(t':comm(x6),∞×1) '	''
'−−−−−−−−−−−−→ t [(x4⟨⟩, ∞).P0 | nil | (x4(), ∞). nil|P2] ≡ S2
(t':comm(x4),∞×1) '	'
'−−−−−−−−−−−−→ t [(x5⟨⟩, ∞).end(t ).(PY1 |PY1 |PY1 |PT ) | nil | (x5(), ∞). nil |
nil] ≡ S3
(t':comm(x5),∞×1) '	'
'−−−−−−−−−−−−→ t [end(t ).(PY1 |PY1 |PY1 |PT ) | nil | nil | nil] ≡ S4
(t':end,∞×1)
'−−−−−−−−→	(PY1 |PY1 |PY1 |PT ) ≡ S5
with nl' = [(n' , 2), (n' , 1)], n' = countT (P1 + P2, Q)+ 1, n' = countT (Py , Q)+ 1
1	2	1	2	2
and Q = PX |PY1 |PY1 |PY2 |PE. The premises of the rule fin applied as last steps of
the derivations are respectively:

(t':start,r4,nl')
(t':comm(x6),∞,[(1,1),(1,1)])
(t':comm(x4),∞,[(1,1),(1,1)])

S−−−−−−−−−→S1, S1−−−−−−−−−−−−−−−−−−→S2, S2 −−−−−−−−−−−−−−−−−−→S3
(t':comm(x5),∞,[(1,1),(1,1)])	(t':end,∞,(1,1))
S3−−−−−−−−−−−−−−−−−−→S4, S4−−−−−−−−−→S5

Conclusion
We enrich the stochastic π-calculus with biological transactions. This allows us to model multi-reactant multi-product reactions as atomic actions avoiding some problems that we meet if the stochastic π-calculus with binary communication is used. Other formalisms [12,1] permit the representation of these complex reactions

and there exist encoding of these languages into π-calculus or other process alge- bras. In this work we extend the stochastic version of π-calculus directly by adding transactions to represent n-way synchronization interactions. A crucial point in the definition of the semantics is the extension of the standard Gillespie approach to consider complex reactions with more than two reactants. The key axiom is the one describing the start of the transaction. The actual rate of the start action is given by the basal rate times the number of possible combinations of all the reactants in- volved in the reaction. The basal rate assigned to the start action is the rate of the reaction. All the other actions involved in the transaction follow as immediate ac- tions. A function countT has been defined in order to count the number of processes congruent to the the ones describing reactants. Finally, it must be observed that the simulation algorithm of the standard stochastic π-calculus has to be modified in order to consider transactions.

References
Bistarelli, S., I. Cervesato, G.Lenzini, R. Marangoni and F. Martinelli, On Representing Biological Systems through Multiset Rewriting, Proc. of Workshop on Computational Methods in Biomathematics (CMB’03), LNCS, Springer-Verlag, 2809 (2003).
Bistarelli, S., I. Cervesato, G. Lenzini and F. Martinelli,Relating Multiset Rewriting and Process Algebras for Security Protocol Analysis, Journal of Computer Security, 13 (2005).
Blossey, R., C. Kuttler and J. Niehren, Gene regulation in the π-calculus: simulating cooperativity at the lambda switch, Proc. of BioConcur 2004, 2004.
Butler, M., T. Hoare and C. Ferreira, A trace semantics for long-running transactions, Proc. of 25 year of CSP, LNCS, Springer-Verlag, 3525 (2005), 133–150.
Bocchi, L., C. Laneve and G. Zavattaro, A Calculus for Long-running Transactions, Proc. of the 6th IFIP International Conference on Formal Methods for Open Object-based Distributed Systems (FMOODS’03), LNCS, Springer-Verlag, 2884 (2003).
Busi, N. and G. Zavattaro, On the Serializability of Transactions in JavaSpaces, Proc. of CONCOORD’01, LNCS, Springer-Verlag, 54 (2001).
Cardelli, L., E. M. Panina, A. Regev, E. Shapiro and W. Silverman, BioAmbients: An Abstraction for Biological Compartments, Theoretical Computer Science, Elsevier, 235 (2004), 141–167.
Cho, K.H., W. Kolch, M. Ullah and O. Wolkenhauer, Modelling and Simulation of IntraCellular Dynamics: Choosing an Appropriate Framework, IEEE Transactions on NanoBioScience, 3 (2004), 200–207.
Ciocchetta, F. and C. Priami, “The stochastic π-calculus with biological transactions”, Technical Report TR-02-2006, The Microsoft Research-University of Trento Centre for Computational and Systems Biology, 2006.
Costantin, G, C. Laudanna, P. Lecca, C. Priami, P. Quaglia and B. Rossi, Language modeling and simulation of autoreactive lymphocytes recruitment in inflamed brain vessels. SIMULATION: Transactions of The Society for Modeling and Simulation International, 80 (2003), 273–288.
Danos, V. and J. Krivine, Formal molecular biology done in CCS-R, Proc. of Workshop on Concurrent Models in MolecularBiology (BioConcur ’03), 2003.
Danos, V. and C. Laneve, Core Formal Molecular Biology , Proc. of ESOP’03, LNCS, Springer-Verlag,
2618 (2003), 302–318.
Gillespie, D.T. Exact stochastic simulation of coupled chemical reactions, Journal of Physical Chemistry
81 (1977), 2340–2361.
Kitano, H., Systems Biology: A Brief Overview, Science, 295 (2002), 1662–1664.

Laneve, C. and G. Zavattaro, Foundations of web transactions, Proc. of Foundations of Software Science and Computation Structure (FOSSACS 2005), LNCS, Springer-Verlag, 3441 (2005), 282–298.
Milner, R., “Communicating and mobile systems: the π-calculus”, Cambridge University Press, 1999.
Priami, C., A. Regev, W. Silverman and E. Shapiro, Application of a stochastic name-passing calculus to representation and simulation of molecular processes, Information Processing Letters, 80 (2001), 25–31.
Priami, C. and P. Quaglia, Beta-binders for biological interactions, Proc. of Computational Methods in Systems Biology ’04 (CMSB04), 2004.
Regev, A., Representation and simulation of molecular pathways in the stochastic π-calculus, Proc. of the 2nd workshop on Computation of Biochemical Pathways and Genetic Networks, 2001.
Sangiorgi, D. and D. Walker, “The π-calculus: a Theory of Mobile Processes”, Cambridge University Press, 2001.
Tyson, J. Some Further Studies of Nonlinear Oscillators in Chemical Systems, J. Chem. Phys., 58
(1973), 3919–3930.
