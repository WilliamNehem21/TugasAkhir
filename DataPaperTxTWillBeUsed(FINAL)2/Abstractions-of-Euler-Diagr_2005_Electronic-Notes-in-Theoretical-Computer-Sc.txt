Electronic Notes in Theoretical Computer Science 134 (2005) 77–101 
www.elsevier.com/locate/entcs


Abstractions of Euler Diagrams

Andrew Fish1 ,2	Jean Flower1
Visual Modelling Group University of Brighton Brighton BN2 4GJ, UK

Abstract
Euler diagrams are a graphical means to represent information. Providing an abstraction captures the pertinent information precisely, ignoring irrelevant details (where relevancy is dependent upon the application domain). We present two new abstractions and show that these are equivalent to a standard existing (zone-based) representation. Examples illustrate the potential usefulness of different abstractions in various areas, such as: identifying properties like nestedness or drawability, expressing the semantics in a more readable manner, and in the layout of diagrams.
Keywords: Euler diagrams, Abstractions, Semantics, Layout.


Introduction
Euler diagrams have been used for many years and appear in applications in many areas, such as data storage and representation [1,2]. In order to formalize Euler diagrams it is useful to give them an abstract syntax which abstracts the essential diagram properties from non-essential concrete syntax details. The distinction between essential and non-essential depends upon the intended use of the diagram. A suitably chosen abstract syntax enables discussion of some diagram properties (such as nestedness, semantics, inference) without having to concern ourselves with irrelevant geometric and topological details (such as thickness of lines or the shape of contours).

1 This research was partially supported by UK EPSRC grant GR/R63516
2 Email: Andrew.Fish@brighton.ac.uk



1571-0661 © 2005 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2005.02.021


A concrete Euler diagram is a certain type of drawing in the plane. Given such a drawing, one can capture its essential properties in various ways. One such abstract syntax which has been widely used encompasses information about which zones [8] (or minimal regions [7,13,15]) are present in the dia- gram. In this paper we suggest alternative abstract syntax and consider their advantages and drawbacks in the areas of diagrammatic properties (such as nestedness and drawability), semantic interpretation of diagrams, and diagram layout.
The first new abstract syntax involves a pair of regions for each contour, which describe its placing relative to the other contours in the diagram (called containment conditions). The second new abstraction uses a sequence of con- tours and pairs of regions to describe an incremental development: a building sequence for the final diagram.
Section 2 contains a description of concrete Euler diagrams and the basic algebraic framework required to discuss the abstractions. The abstractions are introduced in section 3.
In section 4 we present a collection of simple examples, deriving the ab- stractions from concrete diagrams, and indicate potential for identifying prop- erties of diagrams (such as symmetries or nestedness) from these abstract descriptions alone.
Then, in section 5, we show that these abstractions are equivalent, in the sense that given any one of these abstract descriptions of a diagram one can construct any other abstract description. We do this by providing mappings between the different abstractions and showing that mapping from one ab- straction to another and back again is the identity.
The semantics of Euler diagrams given by these differing abstractions are given in section 6. The different statements for a diagram (corresponding to the different abstractions) will be logically equivalent but will differ in appearance. They can be used to judge the readability of the semantics, using the different abstractions.
Given an abstract diagram one can also try to draw a concrete diagram which represents it. The difficulties associated with doing this will depend upon the abstract syntax chosen (the properties used to describe the relevant information) as well as on the well-formedness conditions imposed (conditions such as “no concurrent lines”, which such a drawing must satisfy). Further- more, one may wish to draw a diagram which looks similar to another dia- gram. For example, in the area of logical reasoning with Euler diagrams, if one applies a reasoning rule such as “add contour” then the conclusion dia- gram should look like the premise, in order to facilitate understanding of the reasoning step. Such layout issues are briefly discussed in section 7. Different

abstractions are likely to be especially useful in this area.
Finally, in section 8, we present our conclusions, and indicate current and future work directions.

Concrete Euler diagrams and abstractions
A concrete Euler diagram consists of a collection of (labelled) simple closed curves in the plane, called contours. A concrete region in a concrete diagram is a set of points in the plane. It is defined inductively, starting with the basic region of the diagram (the set of points in the plane) and the basic region of each contour (the interior of each of the contours). Then the complement, union and intersection operations enable the generation of all of the regions of the diagram.
A concrete zone is a minimal region, in the sense that no other region is contained within it. The concrete diagram in fig. 1 has five zones.

A	B






Fig. 1. A simple Euler diagram

The abstract description of a contour is given by its label. Thus, there are three abstract contours A, B and C in an abstraction of the diagram in fig. 1. Concrete zones correspond to areas of the plane, which can be defined by the set P of contours which contain the area and the set Q of contours which exclude the area. Thus the pair (P, Q) where P and Q partition the set of
contour labels is an abstract zone.
The abstract version of the shaded zone in fig. 1 is (BC, A). Here we use a streamlined notation omitting set brackets and concatenating contour names for readability purposes - formally this zone is ({B, C}, {A}).
We use an “algebra of pairs” to construct abstract regions associated with a set of abstract contours. Any pair (R, S), where R and S are disjoint sets of abstract contours (i.e. contour labels) represents an abstract region, and any union of such pairs also represents an abstract region. For example, the pair (∅, A) is the abstract region which is an abstraction of the region outside A in a concrete diagram.
We use the symbol ∅ to denote the union of no pairs. We allow algebraic

manipulation of abstract regions using the split equivalence rules
(X, Y ) ≡se (X ∪ {c},Y ) ∪ (X, Y ∪ {c}) and (X, Y ) ∪ (X, Y ) ≡se (X, Y ),

where c is a contour label which does not appear in X or Y . An abstract region is an equivalence class under these rules. Given a contour set, any region can be expressed uniquely as a union of zones (P, Q), where P and Q partition the contour set. For example, (A, B) ∪ (B, ∅) ≡se (A, B) ∪ (AB, ∅) ∪ (B, A) ≡se (A, ∅) ∪ (B, A) are different representations of the same abstract region. The representation as a union of zones can be obtained by “splitting” up any pair which does not use all of the contour labels, using the first split equivalence rule and then tidying up using the second.
Define a relation ⊆se on abstract regions as follows: Given two abstract regions r1 and r2, say that r1 ⊆se r2 if the unique description of r1 as zones (using split equivalence) is contained within the description of r2 as zones.
However if we are in the context of a diagram (and so we have access to which zones are missing - those zones which are potentially present, using the same contours, but actually are not present) then we can define ⊆semz which uses both split equivalence and missing zones. That is, given two abstract regions r1 and r2, say that r1 ⊆semz r2 if the unique description of r1 as zones, after removal of the missing zones, is contained within the description of r2 as zones. For example, given the diagram in fig. 1, (C, A) ⊆semz (B, A), because (C, A) ≡se (BC, A)∪(C, AB) and since (C, AB) is missing we get (C, A) ≡semz (BC, A). Now (B, A) ≡se (BC, A) ∪ (B, AC) and so (C, A) ⊆semz (B, A).
Given a set of abstract contours, define the complement of an abstract region, r, to be the maximal region whose zone-wise description contains none of the zones present in r. Let U denote the complement of ∅.
See [10] for a similar algebraic framework relating to the equivalence of abstract regions.

Three abstractions of an Euler diagram
The following three subsections present alternative abstract syntax for Euler diagrams. These are alternative definitions of an (abstract) Euler diagram and, importantly, section 5 will show equivalence of the abstractions by presenting well-defined mappings to derive any abstraction from any other.
For each abstraction, we give an example of a concrete diagram and use the abstraction to describe the concrete diagram, and then we give an abstract definition and an example of a concrete diagram obtained from the abstract description.


The alternative abstractions we propose depend upon describing the (con- crete) contours’ placements instead of describing the (concrete) zones. A naive attempt at defining such an abstraction might be to specify, for each pair of contours c1, c2 which of the following conditions hold:
c1 is contained in c2 (so the region (c2, c1) is missing)
c2 is contained in c1 (so the region (c1, c2) is missing)
c1 disjoint from c2 (so the region (c1c2, ∅) is missing).
There is a serious drawback to this attempt at an abstraction, however, in that it fails to distinguish between the two diagrams shown in fig. 2.

A
B






Fig. 2. Two different Euler diagrams

When proposing alternative abstractions, a benchmark test for adequacy of the abstraction is to ask whether the zone-wise abstraction can be derived from the alternative. In this naive case, no such derivation exists.

The zone-wise abstraction
For the concrete Euler diagram in fig. 1, the (abstract) zone set is
{(A, BC), (AB, C), (B, AC), (BC, A), (∅, ABC)}.
Note that this includes the outside zone (∅, ABC).
Definition 3.1 An abstract zone-wise Euler diagram d is a set of contours C(d)= {c1, c2,... , cm} and a set of zones Z(d), which must contain the outside zone (∅, C(d)).
This zone-wise description of an Euler diagram is given explicitly in [8,10] and is a streamlined version of the abstraction used in [14,15]. Note that here we give a more general theory, not imposing conditions such as the existence of a zone inside each contour. The decision of imposing such conditions can then be deferred until the application domain is chosen.
An alternative way to view the zone-wise description is to order the set of contours and give a binary number (whose number of digits is the number of


contours) to represent a zone, taking1 if the zone is “inside” the corresponding contour and 0 if it is “outside”. For example, if we order the contours in the diagram in fig. 1 lexicographically, then the shaded zone (BC, A) corresponds to 011. In [2], the zones are called subfaces and each of the points in a zone (in a concrete diagram) has an associated bitmask which is effectively this binary representation.

Containment conditions for contours
We give an abstraction which, for each contour c, specifies its placement rela- tive to the other contours. This specification is done by giving a pair of regions Rsmall(c) and Rbig(c).
An abstract region r is minimal subject to a given condition, X, if there is no alternative region s, with s ⊆ r, which also satisfies X. Similarly, r is maximal subject to a given condition, X, if there is no alternative region s, with r ⊆ s, which also satisfies X.
Given a concrete diagram d containing a contour c, Rsmall(c) is the maximal region contained within c, describable without using c, and Rbig(c) is the minimal region containing c, describable without using c.
The diagram in fig. 1, has contour label set {A, B, C} and a set of con- tainment conditions is:
Rsmall(A)= ∅	Rbig(A)= (∅, C),
Rsmall(B)= (C, ∅)	Rbig(B)= U,
Rsmall(C)= ∅	Rbig(C)= (B, A).

The following definition allows us to work with containment condition abstractions even in the absence of a drawn diagram:
Definition 3.2 A containment condition Euler diagram is a set of contours C(d) = {c1, c2,... , cm} and, for each contour, ci ∈ C(d), a containment con- dition. A containment condition (for ci) is a pair of regions Rsmall(ci) and Rbig(ci), which are describable without using ci (i.e. there is a represen- tative only using cj’s where cj ∈ {c1,... , ci−1, ci+1,... , cm}). In addition, (∅, C(d)) /⊆se Rsmall(c), for any c ∈ C(d).
This last condition imposed on each Rsmall(c) corresponds to asserting the presence of the outside zone in a diagram. This correspondence is made ex- plicit when we map between zone-wise abstractions and contour containment abstractions in section 5.


Note that two containment condition abstract diagrams may use different representations of the regions. The following is an equivalent abstraction for the Euler diagram in fig. 1, using split-equivalence for Rbig(A):
Rsmall(A)= ∅	Rbig(A)= (∅, BC) ∪ (B, C) Rsmall(B)= (C, ∅)	Rbig(B)= U
Rsmall(C)= ∅	Rbig(C)= (B, A).


A

Fig. 3. Three disjoint contours

Abstract diagrams defined using the containment conditions may be equiv- alent under more than just the split equivalence rule (they may also use miss- ing zones). Consider the concrete diagram in fig. 3, for example. Contain- ment conditions for this diagram could include either Rbig(C) = (∅, AB) or Rbig(C) = (∅, AB) ∪ (AB, ∅). These are not equivalent regions, using split equivalence only, but are equivalent regions (and hence give rise to equivalent abstract diagrams) using missing zones as well.
Containment condition Euler diagrams will be said to be equivalent if they map to to same zone-wise Euler diagram under the map defined in section 5.

Building sequences


A




A	B





B




Fig. 4. A simple building sequence


Here, we give an abstraction which is based on the idea of building a diagram as an animation, by adding the contours one at a time. An example of such a diagram animation was explored in [17].
Given a concrete diagram and a total ordering of the contour set c1, c2,... , cm, a building sequence specifies the placement of each contour ci using a pair of

regions R∗
(ci), which will be maximal inside (ci, ∅), and R∗
(ci), which will

be minimal containing (ci, ∅), describable using only contours c1,... , ci−1.
For example, a building sequence abstraction for the diagram in fig. 4, is given by the contour sequence ⟨A, B, C⟩ and


∗
small
∗
small
∗
small
= ∅	R∗
= ∅	R∗
= ∅	R∗
= U
= U
= (B, A).



Definition 3.3 A building sequence Euler diagram is a sequence of distinct contours ⟨c1, c2,... , cm⟩ and, for each contour ci ∈ C(d) = {c1, c2,... , cm},

a pair of regions R∗
(ci) and R∗
(ci), which are describable without using

ci,... cm. In addition we impose the condition that (∅, C(d)) /⊆se R∗
(ci),

for any ci.

Examples
In this section we compare the abstractions of some concrete diagrams in specific examples. We remark on the potential use of the differing abstractions for identifying certain properties of a diagram.
A



A	B



Fig. 5. Building a Venn diagram


The zone-wise description of the Venn diagram on three contours, shown at the bottom of fig. 5, has contour set {A, B, C} and is given by:
{(ABC, ∅), (AB, C), (AC, B), (BC, A), (A, BC), (B, AC), (C, AB), (∅, ABC)}.

A containment condition abstraction, has contour set {A, B, C}, and condi- tions:
Rsmall(A)= ∅ Rbig(A)= U, Rsmall(B)= ∅ Rbig(B)= U, Rsmall(C)= ∅    Rbig(C)= U.
A building sequence abstraction, with contour sequence ⟨A, B, C⟩, is given by:


∗
small
∗
small
∗
small
= ∅	R∗
= ∅	R∗
= ∅	R∗
= U,
= U,
= U.


Notice that in both the containment condition and the building sequence cases, the regions’ descriptions involve no contours. Thus it is easy to identify if a diagram is actually a Venn diagram (it requires counting the number of zones for the zone-wise abstraction). This abstraction may also allow us to recognize if contours have “Venn-like” properties (meets every zone). This can be thought of as a kind of contour independence which can be generalized (similar to spider independence in [4,5]). Diagrams with contour independence may convey information that could equally be expressed using a conjunction of simpler diagrams. This has potential uses in either drawing or storing diagram information.
The zone-wise description of the diagram with three disjoint contours, as shown at the bottom of fig. 6, has contour set {A, B, C}, and is given by:
{(A, BC), (B, AC), (C, AB), (∅, ABC)}.

A containment condition abstraction has contour set {A, B, C}, and condi- tions:
Rsmall(A)= ∅	Rbig(A)= (∅, BC),
Rsmall(B)= ∅	Rbig(B)= (∅, AC),
Rsmall(C)= ∅	Rbig(C)= (∅, AB).



A




A




A

Fig. 6. Building a diagram of disjoint contours
A building sequence abstraction, with contour sequence ⟨A, B, C⟩, is given by:


∗
small
∗
small
∗
small
= ∅	R∗
= ∅	R∗
= ∅	R∗
= U,
= (∅, A),
= (∅, AB).

Symmetries in the containment conditions and the obvious pattern in the building sequence potentially gives ways to identify symmetries and disjoint- ness of contours.

A


B



Fig. 7. Adding outer concentric contours

The diagram in fig. 7 has been built by adding outer, containing contours in turn. The zone-wise description of the resulting diagram has contour set
{A, B, C}, and is given by:
{(ABC, ∅), (BC, A), (C, AB), (∅, ABC)}.
A containment condition abstraction, has contour set {A, B, C}, and condi-

tions:
Rsmall(A)= ∅	Rbig(A)= (B, ∅),
Rsmall(B)= (A, ∅)	Rbig(B)= (C, ∅),
Rsmall(C)= (B, ∅)	Rbig(C)= U.
A building sequence abstraction, with contour sequence ⟨A, B, C⟩, is given by:


∗
small
∗
small
∗
small
= ∅	R∗
= (A, ∅)	R∗
= (B, ∅)	R∗
= U,
= U,
= U.

One may be able to generalise these and other examples in order to identify nestedness (where nestedness can be thought of as being able to express one diagram as the image of an embedding of one diagram into a zone of another diagram).
The information conveyed by the diagram in fig. 7 can be separated and depicted as the conjunction of two diagrams, as shown in fig. 8. It appears that the building sequence expression is more likely to highlight opportunities to separate information into smaller pieces.

d1	d2 and d3

Fig. 8. A diagram equivalent to a conjunction: with nesting

The diagram d1 in fig. 9 can be separated into a conjunction of two di- agrams, even though there is no nesting in this example. Building sequence conditions, with contour sequence ⟨A, B, C, D⟩ can be given by:


∗
small
∗
small
∗
small
∗
small
= ∅	R∗
= ∅	R∗
= ∅	R∗
= ∅	R∗
= U,
= (∅, A),
= U,
= (∅, C).



d1	d2 and d3

Fig. 9. A diagram equivalent to a conjunction: without nesting

Equivalence of abstractions
We define mappings between the three abstractions described, define equiv- alence classes of containment abstractions and building sequences, and also show that the mappings give an equivalence between the three abstractions.
Let Ðz be the class of zone-wise Euler diagrams, Ðcc be the class of contain- ment condition Euler diagrams, and let Ðbs be the class of building sequence Euler diagrams.
First of all we will define maps from sets of zones to containment conditions and vice versa. Then we’ll investigate properties of these maps.

Zone-wise to containment conditions mapping
Definition 5.1 Let dz ∈ Ðz with contour set C(dz) and zone set Z = Z(dz). Define the map φ : Ðz → Ðcc by φ(dz) = dcc, where dcc has: contour set C(dcc)= C(dz) and for each contour c ∈ C(dcc),
Rsmall(c)=	{(P, Q): c /∈ P ∪ Q Λ (P ∪ {c}, Q) ∈ Z Λ (P, Q ∪ {c}) /∈ Z},
Rbig(c)=  {(P, Q): c /∈ P ∪ Q Λ (P ∪ {c}, Q) ∈ Z}.

A	C








Fig. 10. Understanding Rsmall(c) and Rbig (c)

Example 5.2 The diagram in fig. 10 highlights the region (B, AD) which is in both Rsmall(C) and Rbig(C) because (BC, AD) is present and (B, ACD) is absent from the zone set. Notice that (B, AD) ≡semz (BC, AD) in this case. Also highlighted is the region (A, BD) which is in Rbig(C) because (AC, BD)


is present, but is not in Rsmall(C) because (A, BCD) is also present. In this case (A, BD) ≡semz (AC, BD) ∪ (A, BCD).
Example 5.3 For the example in fig. 1, the zone set is
{(A, BC), (AB, C), (B, AC), (BC, A), (∅, ABC)}.

We build Rsmall(A) and Rbig(A) by considering each of the two zones which have A in their first component in turn:
for (A, BC), note that (∅, ABC) is also present,
for (AB, C), note that (B, AC) is also present.
Therefore, neither (∅, BC) nor (B, C) contribute to Rsmall(A) = ∅, but both contribute to Rbig(A) = (∅, BC) ∪ (B, C) ≡se (∅, C). On the other hand, consider the contour B, which contains zones (B, AC), (AB, C), (BC, A).
For (B, AC), note that (∅, ABC) is also present.
For (AB, C), note that (A, BC) is also present.
For (BC, A), note that (C, AB) is absent.
The third case provides a contribution to Rsmall(B) = (C, A), and all three cases contribute to Rbig(B)= (∅, AC) ∪ (A, C) ∪ (C, A).
The following theorem shows that φ is a well-defined map and also de- scribes properties of the containment conditions defined under this map.
Theorem 5.4 Let d ∈ Ðz be a zone-wise Euler diagram. Then, under φ, we have that, for each contour c ∈ C(d),
Rsmall(c) and Rbig(c) are unions of regions which do not reference c.
(∅, C(d)) /⊆se Rsmall(c).
Rsmall(c) ⊆semz ({c}, ∅) ⊆semz Rbig(c).
Rsmall(c) is maximal and Rbig(c) is minimal subject to the above condi- tions.
Proof.
The construction ensures that Rsmall(c) and Rbig(c) are unions of regions (P, Q) which do not reference c.
Rsmall(c) contains (∅, C(d) − {c}) only if
the zone (c, C(d) − {c}) is present in d and
the zone (∅, C(d)) is missing from d.


The second condition, along with presence of the outside zone, ensures that (∅, C(d)) is not in Rsmall(c).
To see that Rsmall(c) is contained in (c, ∅), we have
{(P, Q): (P ∪ {c}, Q) ∈ Z Λ (P, Q ∪ {c}) /∈ Z}
≡se	{(P ∪ {c}, Q) ∪ (P, Q ∪ {c}): (P ∪ {c}, Q) ∈ Z Λ (P, Q ∪ {c}) /∈ Z}
≡semz	{(P ∪ {c}, Q): (P ∪ {c}, Q) ∈ Z Λ (P, Q ∪ {c}) /∈ Z}
and each contribution (P ∪ {c}, Q) is in the region ({c}, ∅).
Similarly, to see that Rbig(c) contains (c, ∅), take each zone, (P ∪ {c}, Q) in (c, ∅) in turn. For each of these zones,


(P ∪ {c}, Q) ⊆semz (P, Q) ⊆
(R∪{c},S)∈Z
(R, S)= Rbig(c).


To show that Rsmall(c) is maximal, consider a region R with
R =	{(Ki, Li)} ⊆semz ({c}, ∅)
where there is no occurrence of c in any Ki or Li. Without loss of gen- erality (since we can always split them up using the split equivalence), we can assume that the regions (Ki, Li) use all labels except c, so Ki ∪ Li = C(d) − {c}. Since (Ki, Li) ≡se (Ki ∪ {c}, Li) ∪ (Ki, Li ∪ {c}), and each com-
ponent (Ki, Li) ⊆semz ({c}, ∅), we have (Ki, Li ∪ {c}) ⊆semz ({c}, ∅) which is impossible unless (Ki, Li ∪ {c}) is a missing zone. The fact that (Ki, Li ∪ {c}) is a missing zone ensures that either (Ki ∪ {c}, Li) is missing or (Ki, Li) con- tributes to Rsmall(c), so R ⊆semz Rsmall(c).
Similarly, to show that Rbig(c) is minimal, consider a region R with ({c}, ∅) ⊆semz  {(Ki, Li)} = R
where there is no occurrence of c in any Ki or Li. Without loss of generality, we can assume that the regions (Ki, Li) use all contour labels except c, so Ki ∪ Li = C(d) − {c}. Each zone (P ∪ {c}, Q) is in some (Ki, Li), so each (P, Q) in Rbig(c) is in some (Ki, Li) of R, and Rbig(c) ⊆semz R.	 

Containment conditions to zone-wise mapping
Definition 5.5 Let dcc ∈ Ðcc with contour set C(dcc) and containment condi- tions Rsmall(c) and Rbig(c) for each c ∈ C(dcc). Define the map ψ : Ðcc → Ðz


by ψ(dcc) = dz, where dz has contour set C(dz) = C(dcc) and zone set Z(dz) defined by: zone (P, Q) is present if
(P, Q) ⊆se Rbig(c) ∀c ∈ P , and
(P, Q) /⊆se Rsmall(c) ∀c ∈ Q.
Example 5.6 In our previous example, based on fig. 1, we found the set of containment conditions:
Rsmall(A)= ∅	Rbig(A)= (∅, C),
Rsmall(B)= (C, ∅)	Rbig(B)= U,
Rsmall(C)= ∅	Rbig(C)= (B, A).
Write these as a union of zones using split equivalence:
Rsmall(A)= ∅,
Rbig(A)= (AB, C) ∪ (A, BC) ∪ (B, AC) ∪ (B, AC),
Rsmall(B)= (ABC, ∅) ∪ (AC, B) ∪ (BC, A) ∪ (C, AB), Rbig(B)= U,
Rsmall(C)= ∅
Rbig(C)= (BC, A) ∪ (B, AC).
To test if (AB, C) is a zone under the map ψ, for example, note that
(AB, C) is in Rbig(A)= (AB, C) ∪ (A, BC) ∪ (B, AC) ∪ (B, AC),
(AB, C) is in Rbig(B)= U ,
(AB, C) is missing from Rsmall(C)= ∅.
Therefore, (AB, C) is included in the zone-wise description.
To see that (AC, B) is omitted from the zone-set, we notice that (AC, B) is missing from Rbig(A).
Theorem 5.7 This map ψ is well-deﬁned.
Proof. Let d be a containment condition Euler diagram, with contour set
C(d). We have to show that the outside zone is present in ψ(d). The outside zone (∅, C(d)) is included when mapping from containment conditions (under ψ), if
(∅, C(d)) ⊆se Rsmall(c)	∀c ∈ C(d)
This is exactly the condition for validity of the containment conditions.	 


Theorem 5.8 Let dz denote the zone-wise Euler diagram which is the image of a containment condition Euler diagram dcc under ψ. Then, in dz, the regions Rsmall(c) and Rbig(c) satisfy
Rsmall(c) ⊆semz (c, ∅) ⊆semz Rbig (c).

Proof. The first property of the definition of zones using ψ says that any present zone z = (P, Q) in dz with c ∈ P is in Rbig(c). Since every zone in (c, ∅), using split equivalence, satisfies this condition, we have that (c, ∅) ⊆semz Rbig(c). Similarly the second property says that any present zone z = (P, Q) in dz is not in Rsmall(c) for any c ∈ Q. Therefore, Rsmall(c) contains only present zones (P, Q) which have c ∈/ Q. Thus, since c must appear in any zone description (P, Q) and it is not in Q, we have c ∈ P and so Rsmall(c) ⊆semz (c, ∅).

This mapping allows us to define an equivalence of containment condition abstractions. Two containment condition Euler diagrams are equivalent if they map to the same zone-wise Euler diagram.
We check that the composite mapping from a zone-wise Euler diagram to a set of contour containments, and then back to a zone-wise Euler diagram is just the identity map. That is, mapping from a zone-wise abstraction to generate a set of containment conditions, and then using those containment conditions to generate a set of zones retrieves the same set of zones back again.
Theorem 5.9 Let dz be a zone-wise Euler diagram, with a non-empty set of contours C(dz) and zone set Z(dz). Then ψφ(dz)= dz.
Proof. We must show that
z ∈ Z(dz) implies that z ∈ Z(ψφ(dz)), and
z /∈ Z(dz) implies that z /∈ Z(ψφ(dz)).
Suppose that z = (P, Q) ∈ Z(dz). Applying φ to dz gives us that for each contour c,
Rsmall(c)=	{(K, L): c /∈ K ∪ L Λ (K ∪ {c}, L) ∈ Z(dz)
Λ (K, L ∪ {c}) /∈ Z(dz)} and
Rbig(c)=	{(K, L): c /∈ K ∪ L Λ (K ∪ {c}, L) ∈ Z(dz)}. Under ψ, we have that zone (P, Q) is present in ψφ(dz) if
(P, Q) ⊆se Rbig(p) ∀p ∈ P , and
(P, Q) /⊆se Rsmall(q) ∀q ∈ Q.
For each p ∈ P , (P −{p}, Q) ⊆se Rbig(p), using condition (b), because p /∈
(P −{p})∪Q and z = (P, Q) isa zone of dz. Therefore (P, Q) ⊆se Rbig(p).


Also, for each q ∈ Q, (P, Q — {q}) /⊆se Rsmall(q), using condition (a), be- cause if it was then (P, Q) = (P, Q — {q}∪ {q}) /∈ Z(dz), and we know that (P, Q) ∈ Z(dz). Since Rsmall(q) is expressible without reference to q, if (P, Q) ⊆se Rsmall(q) then we must have that (P, Q — {q}) ⊆se Rsmall(q) which is false. Therefore, (P, Q) /⊆se Rsmall(q) 6q ∈ Q. Hence z is also a zone in Z(ψφ(dz)).

Take a missing zone z = (P, Q) /∈ Z(dz). The outside zone is present in Z(dz) so P /= ∅. The zone (P, Q) is also missing from Z(ψ(φ(dz))) if following condition holds:
for some p ∈ P , (P, Q) /⊆se Rbig(p), or
for some q ∈ Q, (P, Q) ⊆se Rsmall(q).
Substituting, using the definitions of Rbig(p) and Rsmall(q), gives the con- dition:
for some p ∈ P , (P — p, Q) /⊆se Rbig(p), or
for some q ∈ Q, (P, Q — q) ⊆se Rsmall(q).
Since P is non-empty and (P, Q) /∈ Z(dz), we have that (P — p, Q) /⊆se
Rbig(p) as required.


Zone-wise to building sequence mapping
We define a map φ∗ : Ðz → Ðbs. Note that since φ∗ involves a choice of order- ing of contours we really have a family of these maps, one for each ordering, but we will not clutter the notation any more by adding subscripts to φ∗ for example.
Definition 5.10 Let dz ∈ Ðz with contour set C(dz)= {c1,... , cm} and zone set Z(dz). Let (dz; c1,... , ci) denote the the diagram dz if we only had contours c1,... , ci present (the zones in (dz; c1,... , ci) are zonal regions in the diagram dz). Define the map φ∗ : Ðz → Ðbs by φ∗(dz) = dbs, where dbs has: contour sequence ⟨c1,... , cm⟩, and for each contour ci,

∗
small
(ci)=	{(P, Q): ci ∈/ P ∪ Q Λ (P ∪ {ci}, Q) ∈ Z(dz; c1,... , ci)
Λ (P, Q ∪ {ci}) /∈ Z(dz; c1,... , ci)} and

(ii) R∗ (ci)=  {(P, Q): ci ∈/ P ∪ Q Λ (P ∪ {ci}, Q) ∈ Z(dz; c1,... , ci)}.
Theorem 5.11 Let dz ∈ Ðz be a zone-wise Euler diagram. Then, under φ∗, we have that, for each contour ci ∈ C(dz),

∗
small
(ci) and R∗
(ci) are unions of regions which don’t reference ci,... , cn.

(∅, C(d)) /⊆ φ∗(R∗	(ci)).



R∗
(ci) ⊆semz ({ci}, ∅) ⊆semz R∗
(ci) – using the missing zones in

(dz; c1,... , ci). Note that this is true in dz and not just in (dz; c1,... , ci).

∗
small
tions.
(ci) is maximal and R∗
(ci) is minimal subject to the above condi-

Proof. Follows from the containment condition case (see theorem 5.4) applied to the diagram (dz; c1,... , ci).	 
Example 5.12 For the diagram d in fig. 1, the zone set is:
Z(d)= {(A, BC), (AB, C), (B, AC), (BC, A), (∅, ABC)}.

Give the contours an ordering ⟨A, B, C⟩. The diagram (d; A) consists of just

the contour A and we have R∗
(A) = ∅ and R∗
(A) = U . The set of zones in

the diagram containing contours A and B (which can be obtained by deleting
C from the descriptions in Z(d) above) is:
Z(d; A, B)= {(A, B), (AB, ∅), (B, A), (∅, AB)}.


Then R∗
(B) is the union of regions which are obtained by deleting B from

those descriptions in Z(d; A, B) with B in the first coordinate. So R∗
(B) = 

(A, ∅) ∪ (∅, A) = U . Since (A, B) and (∅, AB) are also both present in

Z(d; A, B), R∗
(B) = ∅. Similarly R∗
(C) is the union of regions which can

be obtained by deleting C from the descriptions of the zones in Z(d) with C

in the first coordinate. Thus R∗
(C) = (B, A). Since (B, AC) is also present

in Z(d), the region (B, A) is not included in R∗
(C) and R∗
(C) = ∅.


Building sequence to zone-wise mapping
Definition 5.13 Let dbs ∈ Ðbs with contour sequence ⟨c1,... , cm⟩ and regions

∗
small
(ci) and R∗
(ci) for each contour ci. Let remj,...,m(P, Q), where P ∪ Q =

{c1,... , cm}, denote the pair (P — {cj,... , cm},Q — {cj,... , cm}). If (P, Q) is
a zone in diagram d, then remj,...,m(P, Q) is a zone in diagram (d; c1,... , cj−1). Define the map ψ∗ : Ðbs → Ðz by ψ∗(dbs) = dz, where dz has contour set
{c1,... , cm} and zone set Z(dz) defined by: zone (P, Q) is present if
remj,...,m(P, Q) ⊆se R∗ (cj) 6cj ∈ P , and
remj,...,m(P, Q) /⊆se R∗	(cj) 6cj ∈ Q.
small
Theorem 5.14 This map ψ∗ is well-deﬁned.
Proof. The proof is similar to that given for theorem 5.7.	 


The following properties of building sequences and the maps φ∗ and ψ∗ are similar to the containment conditions case. The proofs are similar and so they are omitted.
Theorem 5.15 Let dz denote the zone-wise Euler diagram which is the image of a building sequence Euler diagram dbs under ψ∗. Then, in dz, which has

contour set {c1,... , cm}, the regions R∗
and R∗
(c) have



∗
small
(ci) ⊆semz (ci, ∅) ⊆semz R∗
(ci).

Theorem 5.16 Let dz be a zone-wise Euler diagram, with a non-empty set of contours C(dz) and with zone set Z(dz). Then ψ∗φ∗(dz)= dz.

Semantics
We compare abstractions in the contexts of Euler diagram semantics and reasoning. For notational simplicity, we will identify contour labels (A, B,.. .) with the sets (A, B,.. .) that they represent.
For each abstraction, we can define the semantics of an Euler diagram. The zone-wise abstraction has been interpreted in the past [8] using a plane tiling condition. The plane tiling condition is

   c ∩   c  = U,

where c denotes the complement of c.
Effectively this asserts that the union of the zones present in a diagram rep- resents the universal set. Any zone which is absent from a diagram represents the empty set.
The semantic interpretation arising from a containment condition Euler diagram is given by:
(Rsmall(c) ⊆ c ⊆ Rbig(c)) .
c∈C
The semantic interpretation arising from a building sequence is given by:


∗
small
(c) ⊆ c ⊆ R∗
(c) .

c∈C
Both of these abstractions’ statements correspond to specifying where each contour c is in relation to other contours.

Example 6.1 For the example in fig. 1, the plane tiling condition is

(A ∩ B ∩ C) ∪ (A ∩ B ∩ C) ∪ (A ∩ B ∩ C) ∪ (A ∩ B ∩ C) ∪ (A ∩ B ∩ C)= U.
On the other hand, the containment conditions are easily interpreted as set containments. The second abstraction gives

(∅⊆ A ⊆ C) Λ (C ⊆ B ⊆ U ) Λ (∅⊆ C ⊆ B ∩ A).
The building sequence abstraction gives

(∅ ⊆ A ⊆ U ) Λ (∅ ⊆ B ⊆ U ) Λ (∅⊆ C ⊆ B ∩ A).
Example 6.2 In the case of the Venn diagram, shown in fig. 5, the plane tiling condition gives

(A ∩ B ∩ C) ∪ (A ∩ B ∩ C) ∪ (A ∩ B ∩ C) ∪ (A ∩ B ∩ C) ∪ (A ∩ B ∩ C)

∪(A ∩ B ∩ C) ∪ (A ∩ B ∩ C) ∪ (A ∩ B ∩ C)= U.
On the other hand, the containment conditions give
(∅⊆ A ⊆ U ) Λ (∅ ⊆ B ⊆ U ) Λ (∅ ⊆ C ⊆ U ), and the building sequence gives
(∅⊆ A ⊆ U ) Λ (∅ ⊆ B ⊆ U ) Λ (∅ ⊆ C ⊆ U ).
In this example, all of these semantic statements are tautologies because the Venn diagram with no annotation conveys no information about the sets.
In general, the containment condition and building sequence abstractions produces more compact semantic statements and arguably appear more read- able than the plane tiling condition statement.

A	C

Fig. 11. A constraint diagram
When interpreting extensions of Euler diagrams which include syntax for explicitly expressing universal and existential quantification, we may be unable


to always use a zone-wise description of contours. Constraint diagrams (see [4,5] for example) are such an extension which can be used to diagrammatically represent logical statements. They are especially appropriate in the context of object-oriented modelling [9]. The constraint diagram shown in fig. 11 can be interpreted as the sets A, B, C and D are pairwise disjoint and 6x ∈ A(x.f ⊆ C) Λ 6y ∈ B(y.g ⊆ D), where the dot notation is the usual object oriented navigational expression which denotes relational image. Note that these unlabelled (derived) contours have corresponding semantics x.f and y.g and represent collections of sets rather than single sets like the labelled (given) contours. The information of the containment conditions, ∅ ⊆ x.f ⊆ C and
∅ ⊆ y.g ⊆ D, for these unlabelled contours could not be re-expressed as part of a plane tiling condition because at no point in the sentence are both x and y in scope.
Assigning semantics to diagrams enables reasoning (see [3,11,14]). Given diagram d1, we can apply diagram transformations to create (or entail) d2, where d2 has equivalent or weaker semantics. Typical kinds of transformations for Euler diagrams are add/remove zone and add/remove contour. Examples of the transformations of adding a contour and of adding a zone are shown in fig. 12.


A

add Contour (C)
A

add Zone (B,AC)




C



Fig. 12. Transformations of Euler diagrams

It will be interesting to investigate how the provision of different diagram abstractions guides us towards different kinds of transformation rules. Certain rules will be easier to express, or analyse, using one abstraction rather than another. For example, the transformations add/remove contour are easy to describe given a suitable building sequence, whereas the add/remove zone transformations are likely to be more suited to the zone-wise abstraction.
For example, the zone-wise descriptions of the three diagrams in fig. 12 are given by:
{(AB, ∅), (A, B), (∅, AB)}.

{(ABC, ∅), (AB, C), (AC, B), (A, BC), (C, AB), (∅, ABC)}.

{(ABC, ∅), (AB, C), (AC, B), (A, BC), (C, AB), (∅, ABC), (B, AC)}.
Compare with a building sequence abstraction of the same diagrams, with contour sequence ⟨A, B, C⟩:

∗
small
∗
small
= ∅,	R∗
= ∅,	R∗
= U,
= (A, ∅).



∗
small
∗
small
∗
small
= ∅,	R∗
= ∅,	R∗
= ∅,	R∗
= U,
= (A, ∅),
= U.



(iii) R∗
∗
small
∗
small
= ∅,	R∗
= ∅,	R∗
= ∅,	R∗
= U,
= U,
= (AB, ∅) ∪ (A, B) ∪ (∅, AB).

Layout
Using the zone-wise abstraction, algorithms for drawing concrete diagrams given abstract ones have been investigated [6,12,16]. The difficulties in draw- ing will depend upon the well-formedness conditions imposed (not allowing concurrent lines or triple points for example). Using different abstractions may allow us to identify when a certain condition is essential is order to draw a diagram.
A	B

C
Fig. 13. Contour D requires concurrency
For example, the diagram in fig.13 is a concrete drawing of the following containment condition abstract Euler diagram with contour set {A, B, C, D} and conditions:
Rsmall(A)= ∅	Rbig(A)= U,
Rsmall(B)= ∅	Rbig(B)= U,
Rsmall(C)= ∅	Rbig(C)= U,
Rsmall(D)= (A, ∅) ∪ (B, ∅) ∪ (C, ∅)	Rbig(D)= (A, ∅) ∪ (B, ∅) ∪ (C, ∅).


It requires D to be drawn completely concurrently with other contours (D is drawn concurrently with the outside edges of Venn(3) in the diagram). In the semantics we would be asserting that the set D is equal to A ∪ B ∪ C by the conditions for D.
Furthermore, sometimes an application requires us to draw a diagram which looks similar to another diagram. For example, after an application of a reasoning rule (which are applied at the abstract level and can change the diagram) one would wish to present the user with a conclusion diagram which looks similar to the premise diagram. This is a difficult task for rules such as add/remove contour using the zone-wise abstraction, but may be much more tractable using the building sequence abstraction. See fig. 12 for example.
Work on identifying commonality between drawn diagrams, in a zone-wise setting, has been done in [12]. It is worth considering if we can use the building sequence abstraction to construct an iterative drawing algorithm. It is not immediately apparent how to do this, but since this abstraction specifies where to place a contour in relation to other contours it is a natural area to investigate.

Conclusion
We have presented two new abstractions for Euler diagrams, and shown that they are equivalent to an existing abstraction. We expect that using different abstractions will be useful in different contexts. Many examples and sugges- tions for further investigation of such uses in areas such as identifying diagram properties, semantics and layout have been given throughout the paper. For instance, the containment condition abstraction often gives more readable semantics than the zone-wise abstraction, and the building sequence descrip- tions are necessary for the semantics of certain extensions of Euler diagrams. Each of the abstractions is likely to have advantages in describing properties of a diagram; for instance, the building sequence abstraction appears to easily indicate a case when a contour must be drawn completely concurrently with other contours in the diagram.
Potential application areas for these new abstractions are numerous. Some of these future work suggestions, include:
Can we identify diagram properties like nestedness, symmetry or drawability
(the existence of a drawing subject to some well-formedness conditions)?
Can we use the building sequence abstraction to construct an iterative draw- ing algorithm?
When using a building sequence abstraction for the purpose of a nice se-

mantic interpretation, can we choose an optimal ordering of contours?
Can we view the zone-wise abstraction and the building sequence abstrac- tions as opposite extremes of a spectrum, with intermediate abstractions merging diagrams made up of multiple contours (overlaying one diagram with another)?
It is also possible to use these abstractions in conjunction. For instance, one could store information about which zones are present in a diagram (that is, use the zone-wise abstraction), and then describe diagrams created from this by giving the information of how another contour is added (using the building sequence description). This may enable existing tools to simply have extra features added which allows easy generation of diagrams which look similar to other diagrams.
These new abstractions present new ways of looking at and describing familiar diagrams. They have the potential to aid in many open questions about Euler diagrams.

References
R. De Chiara, U. Erra and V. Scarano. VennFS: a Venn Diagram ﬁle manager. In Proc. of Information Visualisation, pages 120–126, IEEE Computer Society, 2003.
R. De Chiara, U. Erra and V. Scarano. A system for Virtual Directories using Euler Diagrams.
To appear in Proc. of Euler Diagrams, ENTCS, 2005.
A. Fish and J. Flower. Investigating Reasoning with Constraint Diagrams. In Proc. of Visual Languages and Formal Methods 2004, pages 53–67, IEEE, 2004.
A. Fish, J. Flower and J. Howse. A reading algorithm for constraint diagrams. In Proc. of Human Centric Computing, Languages and Environments 2003, pages 161–168, IEEE, 2003.
A. Fish, J. Flower and J. Howse. The semantics of augmented constraint diagrams. To appear in Journal of Visual Languages & Computing, 2005.
J. Flower and J. Howse. Generating Euler diagrams. In Proc. of Diagrams 2002, pages 61–75, LNAI 2317, Springer-Verlag, 2002.
E. Hammer. Logic and Visual Information. CSLI Publications, 1995.
J. Howse, F. Molina, S-J. Shin and J. Taylor. On diagram tokens and types. In Proc. of Diagrams 2002, pages 76-90, LNAI 2317, Springer-Verlag, 2002.
J. Howse and S. Schumann. Precise Visual Modelling. To appear in Software & Systems Modelling, 2005.
J. Howse, G. Stapleton, J. Flower and J. Taylor. Corresponding regions in Euler diagrams. In Proc. of Diagrams 2002, pages 146–160, Springer-Verlag, 2002.
J. Flower and G. Stapleton. Automated Theorem Proving with Spider Diagrams. In CATS ’04, pages 116–132, ENTCS.
P. Rodgers, P. Mutton and J. Flower. Dynamic drawing of Euler diagrams. In IEEE Symp. on Visual languages and human-centric computing, pages 147-156, IEEE, 2004.


S.-J. Shin. The logical status of diagrams. CUP, 1994.
N. Swoboda and G. Allwein. Using DAG Transformations to Verify Euler/Venn Homogeneous and Euler/Venn FOL Heterogeneous Rules of Inference. Journal of Software & System Modeling, pages 136–149, number 2, volume 3, 2004.
N. Swoboda. Implementing Euler/Venn Reasoning Systems. Diagrammatic Representation and Reasoning, eds. M. Anderson, B. Meyer and P. Olivier, pages 371–386, Springer-Verlag 2002.
A. Verroust and M-L. Viaud. Ensuring the drawability of extended Euler diagrams for up to 8 sets. In Proc. of Diagrams 2004, pages 128–141, Springer-Verlag, 2004.
D. Winterstein, A. Bundy, C. Gurr and M. Jamnik. Using animation in diagrammatic theorem proving. In Proc. of Diagrams 2002, pages 46–60, LNAI 2317, Springer-Verlag, 2002.
