

Electronic Notes in Theoretical Computer Science 173 (2007) 121–137
www.elsevier.com/locate/entcs

Directed Bigraphs 
Davide Grohmanna,1	Marino Miculana,2
a Department of Mathematics and Computer Science, University of Udine, Italy

Abstract
We introduce directed bigraphs, a bigraphical meta-model for describing computational paradigms dealing with locations and resource communications. Directed bigraphs subsume and generalize both original Milner’s and Sassone-Sobocin´ski’s variants of bigraphs. The key novelty is that directed bigraphs take account of the “resource request flow” inside link graphs, from controls to edges (through names), by means of the new notion of directed link graph. We give RPO and IPO constructions for this model, generalizing and unifying the constructions independently given by Jensen-Milner and Sassone-Sobocin´ski in their respective variants. Moreover, the very same construction can be used for calculating RPBs as well, and hence also luxes (when these exist). Therefore, directed bigraphs can be used as a general theory for deriving labelled
transition systems (and congruence bisimulations) from (possibly open) reactive systems.
Keywords: Bigraphical models; Categorical models of concurrent, reactive, distributed, mobile systems.


Introduction
The fundamental importance of labelled transition systems (LTS) for defining the dynamics of a calculus is well known. In spite of this, defining a satisfactory LTS for a given calculus is not an easy task. Essentially, the problem boils down to identify correctly the observations, that is, the “labels” of the LTS, which must represent exactly (i.e., no more and no less) all possible interactions with any context which can surround a system. Traditionally, LTSs are crafted “by hand”, but the more complex is the calculus, the more difficult is to devise its LTS.
For this reason, often the semantics of a calculus is given by means of a reaction (or reduction) system. Reaction systems are easier to define, understand and justify than LTSs, but are not as useful in supporting tools and analytic techniques such as bisimulations and model checking. Thus, a natural question is whether, and how, is possible to construct a “good” labelled transitions system out of a reduction system.
In the last years much work has been spent in looking for general procedures for deriving LTSs from reduction systems. Sewell [13] argued that the labels c of transi-

٨ Work supported by Italian MIUR project 2005015824 Art.
1 Email: grohmann@dimi.uniud.it
2 Email: miculan@dimi.uniud.it



1571-0661 © 2007 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2007.02.031

tions of a term t are the contexts c[·] such that c[t] yields a reaction; remarkably, the bisimulation induced by a such LTS is always a congruence. However, we want to take as labels the contexts really relevant to t only, i.e., in c[t] the reaction has to in- volve (part of) t and not only the surrounding context c. To this end, a major break- through has been achieved by Leifer and Milner with the observation that a natural concept of “minimal context” is elegantly expressed by the categorical notions of relative pushout (RPO) and idem-relative pushout (IPO) [7,8]. The notion of RPO has been later generalized to groupoidal RPO for dealing with syntactic congruences [11], and dualized into (groupoidal) relative pullback (RPB) to take into account also open (i.e., non-ground) terms and reaction rules. Eventually, RPO and RPB have been merged into the single concept of locally universal hexagons (luxes) [5].
Now, given this general and elegant theory, we have to find the categories where the calculi and systems used in Concurrency can be conveniently represented, and RPOs, RPBs and luxes can be constructed.
To this end, an emerging meta-model are Milner’s bigraphs [9,10], for which a construction of RPOs has been given in [3]. A bigraph is composed by two orthogonal structures: a hierarchical place graph describing locations, and a link (hyper-)graph describing connections. These structures allow to represent many formalisms such as CCS, π-calculus, Ambients, and Petri nets among others. Thus, bigraphs can be seen as a promising meta-model for Concurrency.
On the other hand, Sassone and Sobocin´ski presented in [12] a general approach for constructing RPOs in a wide range of models, namely those which can be ex- pressed as input-linear cospans over adhesive categories [6]. Adhesive categories are quite common in Computer Science; e.g., presheaf categories (and hence Set and Graph) are adhesive. An input-linear cospan X > A ← Y represents a system A whose input and output interfaces are X and Y , respectively. However, despite its generality, this construction cannot be applied to Milner’s bigraphs, due to the input-linearity condition: bigraphs are actually output-linear (and not input-linear) cospans in an adhesive category of place-link graphs [12].
Summarizing, so far we have two kinds of bigraphs: “output-linear” (i.e. origi- nal Milner’s) bigraphs, with Jensen-Milner’s RPO construction; and “input-linear” bigraphs, with Sassone-Sobocin´ksi’s RPO construction. These two categories and constructions do not generalize each other, although they agree on the intersection (i.e., input- and output-linear bigraphs). A natural question then arises: is there a generalization of both kinds of bigraphs, with an RPO construction subsuming both Jensen-Milner’s and Sassone-Sobocin´ki’s constructions?
The answer is affirmative: in this paper we introduce directed bigraphs, which subsume and generalize both previous theories. A directed bigraph is composed by a place graph and a directed link graph, which is a natural generalization of input- linear link graphs and output-linear link graphs. In this model, we give a construc- tion of RPOs (and IPOs), generalizing and unifying the known constructions in the previous models (Actually, the IPO construction for input-linear bigraphs obtained in this way is the first one, up to our knowledge). Moreover, since the (pre)category of directed link graphs turns out to be self-dual, the RPO construction can be used

for calculating RPBs as well, and hence for the construction of luxes.
Intuitively, the basic idea of directed ling graphs is to notice that names are not resources on their own, but only a way for denoting (abstract) resources (here rep- resented by the edges). In a system, a name may be not denoting any resource (i.e., not associated to any edge); in this case, the name can be seen as a formal parameter of the system which is asking through it for a resource from outside itself. Thus, we can discern a “resource request flow” which starts from control ports, goes through names and terminates in edges. In output-linear link graphs, this request flow en- ters a system from its inner interface (i.e., the system offers its resources to inner modules) and exits through its outer interface (i.e., the system asks for resources to the outer environment); that is, the flow moves ascending the place graph hierarchy. The converse happens in input-linear link graphs, where the requests flow descends the place graph hierarchy. Therefore, we can generalize both situations by allowing resource requests to go in both directions: a module may ask for resources and offer resources on each interface at once. In order to avoid inconsistencies, however, we must take care of the “polarity” of names in interfaces, according as their meaning flows “upward” or “downward”—hence the adjective directed.
The rest of the paper is organized as follows. In Section 2 we present the precategories 'DLG and 'DBig of directed link graphs and directed bigraphs, and their basic properties. The constructions of RPOs and IPOs for directed link graphs are described in Section 3. As an application, in Section 4 we show how input-linear and output-linear link graphs are subsumed by directed link graphs. Due to lack of space, we cannot describe how directed link graphs can be conveniently used for representing specific calculi, even with binders (such as λ-calculus) without the need of further extensions; we refer the interested reader to [1]. Conclusions and directions for future work are in Section 5.
Directed link graphs and bigraphs
In this section we introduce directed link graphs, and present their main properties. In order to allow a direct comparison with traditional (i.e., output-linear, Milner’s) bigraphs, we work with precategories. We refer the reader to [4, §3] and [8] for an introduction to the theory of supported monoidal precategories.
Let K be a given signature of controls.
Definition 2.1 A polarized interface X is a pair of disjoint sets of names X = (X−,X+); the two components are called downward and upward faces, respectively.
A directed link graph A : X → Y is A = (V, E, ctrl, link) where X and Y are the inner and outer interfaces, V is the set of nodes, E is the set of edges, ctrl : V → K is the control map, and link : Pnt(A) → Lnk(A) is the link map, where the ports, the points and the links of A are deﬁned as follows:
Prt(A)    ar(ctrl(v))  Pnt(A)  X+  Y −  Prt(A)  Lnk(A)  X−  Y +  E
v∈V
The link map cannot connect downward and upward names of the same interface,



x	y	z




v1




v1
w	z



e


w	x	y	z	x	y

A : ({w}, ∅) → ({x, y, z}, ∅) (a)
B : (∅, {x, y, z}) → (∅, {w}) (b)
C : (∅, {x, y}) → ({z, w}, ∅) (c)

Fig. 1. Examples of directed link graphs.

i.e., the following condition must hold: (link(X+) ∩ X−) ∪ (link(Y −) ∩ Y +) = ∅. Directed link graphs are graphically depicted much like ordinary link graphs,
with the difference that edges are explicitly represented as vertices of the graph, and not as hyper-arcs connecting points and names; points and names are associated to edges (or other names) by (simple, non hyper) directed arcs. Some examples are given in Figure 1. This notation aims to make clear the “resource request flow”: ports and names in the interfaces can be associated either to internal or to external resources. In the first case, ports and names are connected to an edge; these names are “inward” because they declare to the context how to get to an internal resource. In the second case, the ports and names are connected to an outward name, which is waiting to be plugged by the context into a resource.
Notice that input-linear (output-linear, respectively) link graphs are just special cases of this definition: just restrict to empty upward (downward, respectively) interfaces (Figure 1.a and b). However, there are directed link graphs which are neither input-linear nor output-linear, nor any combination of these; e.g.  C (∅, {e}, ∅, {(x, e), (y, e), (z, e), (w, e)}) : {x, y}→ {z, w} in Figure 1.c.
Directed link graphs can be alternatively defined as the composition of an input linear link graph and an output linear link graph defined on the same support (as suggested by R. Milner). Notice that to this end, control ports must be partitioned in two subsets: those used in the input linear link graph and those used in the outer linear link graph. This corresponds to assign a precise direction (either upward or downward) to the connections. Notice in this way, the constraint that two names of the same interface cannot be linked together, is automatically ensured.
In the following, by “interface” and “link graphs” we will intend “polarized interface” and “directed link graphs” respectively, unless otherwise noted.
Definition 2.2 ('DLG) The precategory of directed link graphs has polarized in- terfaces as objects, and directed link graphs as morphisms.
Given two directed link graphs Ai = (Vi, Ei, ctrli, linki) : Xi → Xi+1 (i = 0, 1), the composition A1 ◦A0 : X0 → X2 is deﬁned when the two link graphs have disjoint nodes and edges. In this case, A1 ◦ A0  (V, E, ctrl, link), where V  V0  V1, ctrl  ctrl0  ctrl1, E   E0  E1 and link : X+  X−  P → E  X−  X+ is deﬁned
0	2	0	2

as follows (where P = Prt(A0)  Prt(A1)):

⎪⎨


link1 p
2	1	1	1	2

2	1
The identity link graph of X is idX  (∅, ∅, ∅K, IdX− X+ ) : X → X.



B
y
x	y

A
It is easy to check that composition is associative, and that given a link graph A : X → Y , the compositions A ◦ idX and idY ◦ A are defined and equal to A. Definition 2.1 forbids connections between names of the same interface in order to avoid undefined link maps after compositions. An example is shown aside, where the compo- sition of two apparently unproblematic directed link graphs A, B would yield a “loop” and hence not a directed link graph.

Proposition 2.3 The precategory 'DLG is self-dual, that is 'DLG ∼= 'DLGop.

Proof. We can define the functor ( ) : 'DLG → 'DLGop on objects as (X−,X+) (X+,X−), and on a morphism A = (V, E, ctrl, link) : X → Y as A itself but with swapped interfaces: A  A : (V, E, ctrl, link) : Y → X. It is easy to check that this
is a full and faithful functor, and that A = A.	 
Definition 2.4 The support of a link graph A = (V, E, ctrl, link) : X → Y is the set |A| = V ⊕ E.
Proposition 2.5 The precategory 'DLG is well supported.
Proof. A lengthy check that |A1 ◦ A2| = |A1| |A2|, and that all the properties about support translation are verified.	 
Definition 2.6 (idle, lean, open, closed, peer) Let A : X → Y be a link graph.
A link l ∈ Lnk(A) is idle if it is not in the image of the link map (i.e., l /∈
link(Pnt(A))). The link graph A is lean if there are no idle links.
A link l is open if it is an inner downward name or an outer upward name (i.e.,
l ∈ X− ∪ Y +); it is closed if it is an edge.
A point p is open if link(p) is an open link; otherwise it is closed. Two points
p1, p2 are peer if they are mapped to the same link, that is, link(p1) = link(p2).
Proposition 2.7 A link graph A : X → Y is epi iff there are no peer names in Y − and no idle names in Y +. Dually, A is mono iff there are no idle names in X− and no peer names in X+.
A is an isomorphism iff it has no nodes, no edges, and its link map can be decomposed in two bijections link+ : X+ → Y +, link− : Y − → X−.
Definition 2.8 The tensor product ⊗ in 'DLG is deﬁned as follows. Given two objects X, Y , if these are pairwise disjoint then X ⊗ Y  (X− Y −,X+ Y +). Given two link graphs Ai = (Vi, Ei, ctrli, linki) : Xi → Yi (i = 0, 1), if the tensor

products of the interfaces are deﬁned and the sets of nodes and edges are pairwise disjoint then the tensor product A0 ⊗A1 : X0 ⊗X1 → Y0 ⊗Y1 is deﬁned as A0 ⊗A1 (V0  V1, E0  E1, ctrl0  ctrl1, link0  link1).
It is not difficult to check |A1 ⊗ A2| = |A1| |A2| and the following proposition.
Proposition 2.9 'DLG is a well-supported monoidal precategory.
Finally, we can define the directed bigraphs as the composition of standard place graphs (see [4, §7] for definitions) and directed link graphs.
Definition 2.10 An interface is composed by a width (a ﬁnite ordinal) and by a pair of ﬁnite sets of names (from a global set X).
Let I = ⟨m, X⟩ and J = ⟨n, Y ⟩ be two interfaces. A directed bigraph G with signature K from I to J is G = (V, E, ctrl, prnt, link) : I → J, where I and J are its inner and outer interfaces, respectively. V and E are the sets of nodes and edges respectively, and prnt, ctrl and link are the parent, control and link maps, such that GP  (V, ctrl, prnt) : m → n is a place graph and GL  (V, E, ctrl, link) : X → Y is a directed link graph.
We denote G as combination of GP and GL by G = ⟨GP , GL⟩. In this notation, a place graph and a (directed) link graph can be put together iff they have the same sets of nodes and edges.
Definition 2.11 ('DBig) The precategory 'DBig of directed bigraph with signature K has interfaces I = ⟨m, X⟩ as objects and directed bigraphs G = ⟨GP , GL⟩ : I → J as morphisms. If H : J → K is another directed bigraph with sets of nodes and edges disjoint from V and E respectively, then their composition is deﬁned by composing their components, i.e.:
H ◦ G  ⟨HP ◦ GP ,HL ◦ GL⟩ : I → K.
The identity directed bigraph of I = ⟨m, X⟩ is ⟨idm, IdX− X+ ⟩ : I → I.
Proposition 2.12 A directed bigraph G in 'DBig is epi (respectively mono) iff its two components GP and GL are epi (respectively mono).
The isomorphisms in 'DBig are all the combinations ι = ⟨ιP , ιL⟩ of an isomor- phism in 'PLG and an isomorphism in 'DLG.
Definition 2.13 The tensor product ⊗ in 'DBig is deﬁned as follows. Given I =
⟨m, X⟩ and J = ⟨n, Y ⟩, where X and Y are pairwise disjoint, then ⟨m, X⟩⊗⟨n, Y ⟩ 
⟨m + n, (X− Y −,X+ Y +)⟩. The tensor product of two bigraphs Gi : Ii → Ji is deﬁned when the tensor products of the interfaces are deﬁned and the sets of nodes and edges are pairwise disjoint, then:
G0 ⊗ G1  ⟨GP ⊗ GP , GL ⊗ GL⟩ : I0 ⊗ I1 → J0 ⊗ J1.
0	1	0	1
Proposition 2.14 For every signature K, the precategory 'DBig is wide monoidal; the origin is ϵ = ⟨0, (∅, ∅)⟩ and the interface ⟨n, X⟩ has width n.
In virtue of this result, 'DBig can be used for applying the theory of wide reaction

systems and wide transition systems as developed by Jensen and Milner; see [4, §4,
§5] for details. To this end, we need to show that 'DBig has RPOs and IPOs. Since place graphs are the usual ones, it suffices to show that directed link graphs have RPOs and IPOs; this is the subject of the next section.

RPO and IPO for directed link graphs
Construction of relative pushouts and pullbacks
We first give an idea of how the construction works. Suppose D0 : X0 → Z, D1 : X1 → Z is a bound for a span A0 : W → X0, A1 : W → X1 and we wish to construct the RPO (B0, B1, B). In the following we will denote a pair (A0, A1) by A→

and the link map of A simply by A. To form the pair B→
we truncate D→
by removing

all the edges, nodes and ports not present in A→. Then in the outer interface of B→ ,
we create an outer name for each point unlinked by the truncation: the downward names connected to the same link (name or edge) must be “bound together”, i.e. we must consider all the possible ways to associate a downward name of A0 with
one of A1 and vice versa; further we must equate an upward name of A0 with one of
A1 only if they are both connected to a point shared between A0 and A1. Formally:
Construction 3.1 (RPOs in directed link graphs) A relative pushout (B→ :
X→ → Xˆ, B : Xˆ → Z), for a pair A→ : W → X→ of link graphs relative to a bound
D→ : X→ → Z, will be built in three stages. Since RPOs are preserved by isomor-
phisms, we can assume the components of X0 and X1 disjoint.
nodes and edges If Vi are the nodes of Ai (i = 0, 1), then the nodes of Di are VDi = (V¯i \ Vi) V2 for some V2. Define the nodes of Bi and B to be VBi V¯i\Vi (i = 0, 1) and VB  V2. Edges Ei and ports Pi of Ai are treated analogously.

interface Construct the shared codomain Xˆ = (Xˆ−, Xˆ+) of B→
as follows: first we

define the names in each Xi = (X−,X+), for i = 0, 1, that must be mapped into
Xˆ = (Xˆ−, Xˆ+):
X'−   {x ∈ X− | ∃y ∈ X− s.t. Ai(x) = A¯(y) or Ai(x) ∈ (Ei \ E¯)}
i	i	¯i	i	i
X'+   {x ∈ X+ | Di(x) ∈ (E2  Z+)} .
i	i
We define for each l ∈ (W−  (E0 ∩ E1)) the set of names in X'− linked to l:
X'−(l)   {x ∈ X'− | Ai(x) = l}	(i = 0, 1).
i	i
Now we must “bind together” names connected to the same link, so we create
all the possible pairs between a name in X'− and a name in X'−.  Further we
must add to Xˆ− all the names in X'− “not associable” to any name of X'−. Then

the set of downward names of B→
i	¯i
is:

Xˆ−	 
X'−(l) × X'−(l) ∪  Σ

X'−(e).


	

Next, on the disjoint sum X'+ ⊕X'+, define ∼= to be the smallest equivalence for
0	1
which (0, x0) ∼= (1, x1) iff there exists p ∈ (W +  (P0 ∩ P1)) such that A0(p) = x0 and A1(p) = x1. Then define:

Xˆ+  (X'+ ⊕ X'+)/∼=.
0	1

For each x ∈ X'+ we denote the equivalence class of (i, x) by i, x.
links Define the link maps of Bi as follows:



for

+ :	( )
 Di(x)	if x ∈ (X+ \ X'+)

x ∈ Xi	Bi x
i	i
i, x	if x ∈ X'+;
 Di(p)	if A¯(p) ∈/ X+

i^, x	if A¯i(p) = x ∈ X¯i ;


⎧x	if xˆ = (x, y) and i = 0 


i	xˆ
⎪
if xˆ ∈ (Xˆ−
∩ X−)

⎩A¯(xˆ)	if xˆ ∈ (Xˆ− ∩ X−).

Finally we define the link map of B:
ˆ+	+

for xˆ ∈ X
: B(xˆ)  Di(x) where xˆ = i, x and x ∈ Xi ;
Di(p)	if Di(p) ∈ (E2  Z+)
⎪⎨D¯i(p)	if Di(p) ∈ (E¯i \ Ei)

for p ∈ (P2  Z−) : B(p) 
Di(p)	if D¯i(p) ∈ (Ei \ E¯i)
(x, y)	if D0(p) = x ∈ X− and
⎪⎩	D1(p) = y ∈ X−.

Theorem 3.2 In 'DLG, whenever a pair A→ of link graphs has a bound D→ , there
exists an RPO (B→ , B) for A→ to D→ , and Construction 3.1 yields such an RPO.
Proof. The proof is in two parts. First we have to check that (B→ , B) is an RPO candidate; this is done by long and tedious calculations.
Next, for any other candidate (C→ , C), we have to construct the unique arrow
Cˆ such that the diagram aside commutes. This link graph Cˆ can be constructed
as follows: let be VC the nodes of C, for i = 0, 1 the set of nodes of Ci is VCi (V¯i \ Vi) V3, where V3 is such that V2 = V3 VC; edges ECi and ports PCi of Ci are defined analogously. Then Cˆ has V3, E3 and P3 as sets of nodes, edges and ports
respectively. Its link map is defined as follows:



for j^, x ∈ X
ˆ
Ci(p)	if Ci(p) ∈ (E3  Yˆ +)
⎪


C1 p	1	1
⎪
⎩(x, y)	if C0(p) = x ∈ X− and C1(p) = x ∈ X−.
As an immediate consequence, we can calculate RPBs as well.
Corollary 3.3 In 'DLG, whenever a pair D→ : X→ → W of link graphs has a co-
bound A→ : Z → X→ , there exists an RPB (B→ : Xˆ → X→ , B : Z → Xˆ) for A→ to D→ , and
Construction 3.1 can be used for calculating such an RPB.
Proof. Consider the p air D→ : W → X→ , which is in 'DLG for Proposition 2.3; this
pair has the bound A→ : X→ → Z, and hence, for Theorem 3.2, Construction 3.1 yields

a RPO (C→ : X→
→ Xˆ, C : Xˆ → Z). Then, take B→   C→
and B  C.	 

Finally, one may wonder whether this construction can be used for calculating locally universal hexagons (luxes). Actually 'DLG does not have all luxes, although it has RPOs and RPBs. In fact, it is easy to construct an hexagon such that its RPO and RPB do not commute; the result follows from [5, Theorem 1].
However, there are two subprecategories of 'DLG where luxes do exist:
Proposition 3.4 Let 'MDLG be the wide subprecategory of 'DLG of mono directed link graphs. Then, 'MDLG has luxes, which can be constructed using Construc- tion 3.1 twice.
Proof. Follows from [5, Corollary 3], and previous results.	 
Clearly, the result applies also to 'EDLG = 'MDLGop, the subprecategory of 'DLG of epi directed link graphs. Notice that, by Proposition 2.7, mono and epi link graphs are easy to recognize and single out.


Construction of idem-relative pushouts
We now proceed to characterise all the IPOs for a given pair A→ : W → X→
graphs. The first step is to establish consistency conditions.


of link

Definition 3.5 We deﬁne four consistency conditions on a pair A→ link graphs.
CDL0 ctrl0(v) = ctrl1(v) if v ∈ (V0 ∩ V1);
: W → X→ of

CDL1 if p ∈ (P0 ∩ P1) and Ai(p) ∈ ((E0 ∩ E1)  W−), then A¯i(p) = Ai(p);
CDL2 if p2 ∈ (P0 ∩P1) and Ai(p2) ∈ (Ei \E¯), then A¯(p2) = x¯ for some x¯ ∈ X+,

i	i	i
i	¯i

and further if A¯i(p) = A¯i(p2) then p ∈ (W +  (P0 ∩ P1)) and Ai(p) = Ai(p2), or
p ∈ (P¯i \ Pi) and exists xi ∈ X− such that Ai(xi) = Ai(p2);

CDL3 for each p ∈ (Pi \ P¯i) such that Ai(p) ∈ (W−  (E0 ∩ E1)), then exists
x¯ ∈ X− such that A¯(x¯) = Ai(p).
i	¯i	i	i
Informally, CDL1 says that if a shared point p in Ai is linked to a shared link l,
then in A¯i the shared point p must be linked to the same link l. CDL2 says that if the link of a shared point p2 in Ai is closed and unshared, then its link in A¯i must be an outer upward name, further any peer p of p2 in A¯i must also be its peer in Ai, or if p is not shared, then in Ai there exists an outer downward name linked to the unshared edge of p2. Finally, CDL3 says that if an unshared point in Ai is linked to
a shared link, then in A¯i there is an outer downward name linked to the shared link. Proposition 3.6 If a pair of link graphs A→ has a bound, then the consistency con- ditions hold.
Now, assuming the consistency conditions of Definition 3.5, we shall construct a non-empty family of IPOs for A→ denoted by IPO(A→).
Construction 3.7 (IPOs in directed link graphs) Assume that the consisten-

cy conditions 3.5 hold for the pair A→ : W → X→
an IPO for A→ as follows:
of link graphs. We define C→ : X→ → Y

nodes and edges Define the nodes of Ci to be VCi  V¯i \ Vi. Edges and ports of
Ci are defined analogously.
interface For i = 0, 1 choose any subset L+ of the names X+ such that all members
i	i
of L+ are idle. Define
P˜i  {p ∈ Pi \ P¯i | Ai(p) ∈ X+ and ∄p' ∈ (Pi ∩ P¯i)  W + s.t. Ai(p) = Ai(p')} and choose Q+ ⊆ Ai(P˜i) ∩ X+. Let K+  X+ \ (L+ ∪ Q+) and let K'+ ⊆ K+ be
i	i	i	i	i	i	i	i
the names to be mapped to the codomain Y +. We define (for i = 0, 1):

X'−   {x ∈ X− | ∃y ∈ X− s.t. Ai(x) = A¯(y) or Ai(x) ∈ (Ei \ E¯)}
i	i	¯i	i	i
K'+  {x ∈ K+ | ∀p ∈ (W +  (P0 ∩ P1)).Ai(p) = x ∈ X+ ⇒ A¯(p) ∈ X+} .
i	i	i	i	¯i
As in Construction 3.1, we define for each l ∈ (W−  (E0 ∩ E1)) the set X'−(l)
of names linked to l, and define:


Y −	 
X'−(l) × X'−(l) ∪  Σ

X'−(e).


	

Next, on the disjoint sum K'+ ⊕K'+, define  to be the smallest equivalence for
0	1
which (0, x0)  (1, x1) iff there exists p ∈ (W +  (P0 ∩ P1)) such that A0(p) = x0 and A1(p) = x1. Then define:

Y +  (K'+ ⊕ K'+)/  .
0	1
For each x ∈ K'+ we denote the equivalence class of (i, x) by i^, x.

links For i = 0, 1, choose three arbitrary functions:
ηi : L+ → E¯i \ Ei;
ξi : Q+ → {e ∈ Ei \ E¯i | ∃x ∈ X− s.t. Ai(x) = e};
i	i
and for each l ∈ (W− (E0 ∩E1)) for which there exists xi ∈ X− and p ∈ (P¯i \ Pi) such that Ai(xi) = l and A¯i(p) = l, choose an arbitrary function:
θl : {p ∈ (P¯i \ Pi) | A¯i(p) = l}→ X'−(l).
i	i
Then define the link maps Ci : Xi → Y as follows:
⎧⎪A¯i(p)	if x ∈ (K+ \ K'+), then

i	i	⎪ ^	i





for	(




) :	( )
ηi(x)	if x ∈ L+
ξi(x)	if x ∈ Q+;
⎧A¯i(p)	if A¯i(p) ∈ (E¯i \ Ei)
⎨¯i^, x	if A¯(p) = x ∈ X+ \ Q+

l	−
¯i	0	1
⎪⎩θe(p)	if p ∈ P˜¯ and e = ξ¯(A¯(p));
⎧x	if xˆ = (x, y) and i = 0 

i	y	if y ∈ (Y −
⎪
∩ X−)

⎩A¯(y)	if y ∈ (Y − ∩ X−).

are not exported in the IPO interface Y , but instead mapped into Ci.
The maps ξi are called inversion; this refers to the fact that in the bound C¯i of A¯i we can invert the direction of some link from upward to downward. In this way we can connect a port p of Pi \ P¯i to an edge e in E¯i \ Ei also when there is no shared port, connected to the same name of p, which is linked to e in A¯i.
The maps θl are called random link ; this refers to the fact that if a link has
more then one name linked to it, then in the bound it is indifferent to which name a point is linked to, because the effect of composition is the same.
There is a distinct IPO for each choice of L+, Q+, ηi, ξi and θl. When A→ are
i	i	i
both epi then there are no elisions of idle names and there not exists two different names in X− that are peers, then the IPO is unique and hence a pushout.

Theorem 3.8 A pair C→ : X→
→ Y is an IPO for A→ : W → X→
iff it is generated (up

to isomorphism) by Construction 3.7.

Proof. (⇒) B→
is an IPO for A→
iff it is the legs of an RPO w.r.t.  some bound

D→ . So we can assume w.l.g. that B→ is generated by Construction 3.1. Now apply



Construction 3.7 to create C→ coincides with B→ .
by choosing L→+, Q→+, →η, ξ→ and θ→l as in D→ . Then C→

(⇐) Consider any C→ generated by Construction 3.7. Now apply the Construc-
tion 3.1 to yield an RPO (B→ , B) for A→ to C→ . Then B→ coincides with C→ .	 

Embedding output-linear and input-linear link graphs in directed link graphs
In this section, we show how the previous theories of output-linear and input-linear bigraphs are related to directed link graphs.
Let us first recall the definition of bigraphs, as given by Milner [10]. For clarity, we add the adjective “output linear”.
Definition 4.1 An output-linear link graph is a tuple A = (V, E, ctrl, link) : X → Y , where V is the set of nodes, E is the set of edges, and X and Y are the sets of inner and outer names, respectively; ctrl : V → K is the control map, and ﬁnally link : P  X → E  Y is the link map, where P    v∈V ar(ctrl(v)) is the set of
ports of A. Inner names and ports are the points, while outer names and edges are
the links.
The support of the output-linear link graph A is the set |A|  V ⊕ E.
Then, we recall the definition of the category of output-linear link graphs (cf. [4, Def. 8.3], there called 'Lig):
Definition 4.2 ('OLG) The precategory of output-linear link graphs 'OLG has sets of names as objects, and output-linear link graphs as morphisms. Composition of two link graphs A0, A1 is deﬁned when their supports are disjoint; in this case, A1 ◦A0  (V0  V1, E0  E1, ctrl0  ctrl1, link), where link : P  X0 → E  X2 (where P = P0  P1) is deﬁned as follows:



link(p) 
link1(x)	if p ∈ X0  P0 and link0(p) = x ∈ X1
,,link1(p)	if p ∈ P1.


The identity link graph at X is idX  (∅, ∅, ∅K, IdX ) : X → X.
The precategory 'OLG is well-supported; actually it is a well-supported monoidal precategory. See [4] for details. Moreover, whenever a span A→ in 'OLG has a bound D→ , there exists an RPO for (A→, D→ ); see [4, Construction 8.8].
The precategory 'ILG of input-linear link graphs is defined much like 'OLG, just by swapping the input and output interfaces in the arity of the link functions (i.e., for A : X → Y , its link map is link : P  Y → E  X). The composition has to be changed accordingly: given two input-linear link graphs A0 : X0 → X1, A1 : X1 → X2 the composition A1 ◦A0 is defined when their supports are disjoint; in this case, A1 ◦ A0  (V0  V1, E0  E1, ctrl0  ctrl1, link), where link : P  X2 → E  X0

(where P = P0  P1) is defined as follows:



link(p) 
link0(x)	if p ∈ X2  P1 and link1(p) = x ∈ X1
,,link0(p)	if p ∈ P0.


It is immediate to see that an output-linear link graph (V, E, ctrl, link : P X → E Y ) : X → Y is also an input-linear link graph (V, E, ctrl, link : P  X → E Y ) : Y → X, and vice versa. Thus:
Proposition 4.3 'OLG ∼= 'ILGop.
Corollary 4.4 Let A→ be a span in 'OLG, with a bound D→ . A triple (B→ , B) is an
RPO for (A→, D→ ) in 'OLG iff (B→ op, Bop) is an RPB for (A→op, D→ op) in 'ILG.
As a consequence, the RPO construction in 'OLG can be used for constructing RPBs in 'ILG, but it does not work for constructing RPOs. On the converse, an RPOs construction in 'ILG would give an RPB construction in 'OLG for free.
Actually, an RPO construction in 'ILG can be recovered by noticing that input- linear link graphs correspond to input-linear cospans over a certain adhesive cate- gory LGraph of hypergraphs, as observed in [12]. Thus we can apply the general (G)RPO construction presented in loc. cit. (and fully detailed in [14]). In this pa- per, for a more direct comparison with the constructions in 'DLG and 'OLG (and in order to avoid to introduce 2-categorical machinery), we present a version of this construction tailored to the specific precategory 'ILG.
Construction 4.5 (RPOs in input-linear link graphs) An RPO in 'ILG is built as follows:
nodes and edges If Vi are the nodes of Ai (i = 0, 1); then the nodes of Di are VDi = (V¯i \ Vi) V2 for some V2. Define the nodes of Bi and B to be VBi V¯i\Vi (i = 0, 1) and VB  V2. Edges Ei and ports Pi of Ai are treated analogously.
interface Construct the shared codomain Xˆ of B→ as follows: first we define the
names in each Xi, for i = 0, 1, that must be mapped into Xˆ:
X'  {x ∈ Xi | ∃y ∈ X¯i s.t. Ai(x) = A¯i(y) or Ai(x) ∈ (Ei \ E¯i)} .
We define for each l ∈ (W  (E0 ∩ E1)) the set of names in X' linked to l:
X'(l)   {x ∈ X' | Ai(x) = l} (i = 0, 1).
i	i
Now we must “bind together” names connected to the same link, so we create
all the possible pairs between a name in X' and a name in X' . Further we must
add to Xˆ all the names of X' “not associable” to any name of X'. Then the set

of outer names of B→
i	¯i
is:

Xˆ	 
X' (l) × X' (l) ∪ Σ
X'(e).


	

links Define Bi as follows:
for p ∈ (P¯i \ Pi) : Bi(p)  Di(p);
,x	if xˆ = (x, y) and i = 0 
for xˆ ∈ Xˆ : B (xˆ)  ⎨y	if xˆ = (x, y) and i = 1 
i
,,	ˆ
A¯i(xˆ)	if xˆ ∈ (X ∩ X¯i).
Finally we define B:
,,Di(p)	if Di(p) ∈ E2


Di(p)	if D¯i(p) ∈ (Ei
,
\ E¯i)


Proposition 4.6 If a span A→
(x, y)	if D0(p) = x and D1(p) = y.
in 'ILG has a bound D→ , then there exists an RPO

for (A→, D→ ), which is constructed by Construction 4.5.
Actually, both constructions in 'ILG and 'OLG are special cases of Construction
3.1 in 'DLG, since the former precategories are embedded in the latter:
Proposition 4.7 'ILG and 'OLG are equivalent to two well-supported monoidal subprecategories of 'DLG.
Proof. The monoidal embeddings FI : 'ILG → 'DLG and FO : 'OLG → 'DLG are defined as obvious: on objects, FI (X) = (X, ∅) and FO(X) = (∅,X); on morphisms, simply as FI (A) = FO(A) = A. It is easy to check that these are two faithful functors, respecting supports and the monoidal operations.	 

Proposition 4.8 Given a span A→
with a bound D→
in 'ILG, a triple (B→ , B) is an

RPO for (A→, D→ ) iff (FI (B→ ), FI (B)) is an RPO for (FI (A→), FI (D→ )) in 'DLG.
Thus, in order to calculate an RPO for a square (A→, D→ ) in either 'ILG or 'OLG, we just embed the square in 'DLG, apply Construction 3.1, and drop the empty sets from the interfaces of the resulting RPO.
This result, in virtue of the self-duality of 'DLG, extends to RPB as well, thus we have an algorithm for calculating RPBs in 'ILG and 'OLG.

Proposition 4.9 Let A→
be a span with a bound D→
in 'ILG or 'OLG; then there

exists an RPB (B→ , B) for (A→, D→ ).

Proof. Consider the square (FI(D→ ), FI (A→)) in 'DLG. By applying Construction 3.1, we get an RPO (C→ , C) for it. Then, the RPB for (A→, D→ ) is obtained by taking (C→ , C), and cancelling the empty sets from the interfaces.	 

Luxes
Since 'OLG and 'ILG have RPOs and RPBs, one may wonder whether we can build luxes as well. The answer is the same of 'DLG: not always. In both categories

we can build hexagons which do not have luxes. However, if we restrict to either all epi or all mono link graphs, luxes do exist, and can be calculated by embedding an hexagon in 'DLG and applying Proposition 3.4.


IPOs
Also the consistency conditions and the construction of IPOs in 'OLG and 'ILG are subsumed by Definition 3.5 and Construction 3.7. Let us recall the consistency condition for output-linear graphs as in [4, Definition 8.10].

Definition 4.10 The three consistency conditions on a pair A→ : W → X→
linear link graphs are the following:
COL0 ctrl0(v) = ctrl1(v) if v ∈ (V0 ∩ V1);
of output-

COL1 if Ai(p) ∈ (E0 ∩ E1), then p ∈ (W  (P0 ∩ P1)) and A¯i(p) = Ai(p);
COL2 for p2 ∈ (P0 ∩ P1), if Ai(p2) ∈ (Ei \ E¯i) then A¯i(p2) ∈ X¯i, and if also
A¯i(p) = A¯i(p2) then p ∈ (W  (P0 ∩ P1)) and Ai(p) = Ai(p2).
On the other hand, the consistency conditions for input-linear graphs are quite different:

Definition 4.11 The three consistency conditions on a pair A→ : W → X→
linear link graphs are the following:
CIL0 ctrl0(v) = ctrl1(v) if v ∈ (V0 ∩ V1);
CIL1 if p ∈ (P0 ∩ P1), then A0(p) = A1(p);
of input-

CIL2 for p ∈ (Pi \ P¯i) such that Ai(p) ∈ (W  (E0 ∩ E1)), there exists x¯i ∈ X¯i such that A¯i(x¯i) = Ai(p).
In both precategories, if a bound satisfies the relevant consistency conditions, its IPOs can be calculated using Construction 3.7, in virtue of the following result:


Proposition 4.12 Let A→
a span in 'OLG. If A→
satisfy the conditions in Deﬁni-

tion 4.10 then IPO(A→) ∼= IPO(FO(A→)).

Let A→
a span in 'ILG.	If A→
satisfy the conditions in Deﬁnition 4.11 then

IPO(A→) ∼= IPO(FI (A→)).
Thus, we have automatically an algorithm for calculating IPOs for a span of input- linear link graphs A→: just apply Construction 3.7 to FI (A→) and drop the empty sets from the interfaces of the IPOs so obtained. As far as we know, these are the first consistency conditions and IPO construction for input-linear link graphs, which we give here for sake of completeness.
Construction 4.13 (IPOs in input-linear link graphs) Assume that the con-

sistency conditions 4.11 hold for the pair A→
: W → X→
of link graphs. We define

C→ : X→ → Y an IPO for A→ as follows:
nodes and edges Define the nodes of Ci to be VCi  V¯i \ Vi. Edges and ports of
Ci are defined analogously.

interface As in Construction 4.5, build the shared codomain Y of C→ as follows:
X'  {x ∈ Xi | ∃y ∈ X¯i s.t. Ai(x) = A¯i(y) or Ai(x) ∈ (Ei \ E¯i)}	(i = 0, 1)
X'(l)   {x ∈ X' | Ai(x) = l}	(i = 0, 1)
Y		X' (l) × X' (l) ∪ Σ	X'(e).

links For i = 0, 1 and for each l ∈ (W  E2) for which there exists xi ∈ Xi and
p ∈ (P¯i \ Pi) such that Ai(xi) = l and A¯i(p) = l, choose an arbitrary function:
θl : {p ∈ (P¯i \ Pi) | A¯i(p) = l}→ X'(l).
i	i

Then define the link maps Ci : Xi → Y as follows:
for p ∈ (P¯ \ P ) : C (p)   A¯i(p)	if A¯i(p) ∈ (E¯i \ Ei)
i	¯i	2
,x0	if y = (x0, x1) and i = 0 
y	if y ∈ (Y ∩ Xi)
,

5	Conclusions
,A¯i(y)	if y ∈ (Y ∩ X¯i).

In this paper, we have presented the directed bigraphs, whose connection graphs, called directed link graphs, generalize both output-linear (i.e., Milner’s) and input- linear (i.e., Sassone-Sobocin´ki’s) link graphs. We have given a constructions of RPOs generalizing and unifying the known constructions in the previous theories. Moreover, the RPO construction can be used for calculating RPBs as well, and, in suitable subcategories, also luxes. We have proposed new consistency conditions for the existence of IPOs, and a general construction of IPOs, in directed link graphs. These conditions and construction subsume those proposed for Milner’s bigraphs; moreover, these have been specialized to the input-linear case yielding the first consistency conditions and IPO construction for this variant.
Due to lack of space, we cannot present here the algebraic theory of directed bigraphs, and in particular the elementary constructors and a normal form for 'DBig. This theory will be useful for representing calculi in this framework; for instance, the λ-calculus (among others) can be conveniently represented in directed bigraphs without the need of further notions for dealing with binders (as it happens, instead, with Milner’s binding bigraphs). We refer the interested reader to [1,2].
Future work We plan to use directed bigraphs for representing some calculi of inter- est, in particular calculi with resources, locations, etc., which can be represented by edges. It will be interesting to see which kind of wide transition system we would obtain from our theory, in these cases.

Another future work is to move the theory of directed link graphs into the realm of groupoidal 2-categories. Actually, due to their intrinsic bi-directional linearity, representing directed link graphs simply as input-linear cospans in some adhesive G-category does not seem feasible. We suppose that a generalization of input-linear cospans, and the corresponding GRPO construction, will be required to this end.
Acknowledgements The authors wish to thank Robin Milner and the anonymous referees for their helpful comments.

References
Grohmann, D. and M. Miculan, Directed bigraphs: theory and applications, Technical Report UDMI/12/2006/RR, University of Udine (2006), at http://www.dimi.uniud.it/miculan/Papers/.
Grohmann, D. and M. Miculan, An algebra for directed bigraphs, in: I. Mackie and D. Plump, editors,
Pre-proceedings of TERMGRAPH 2007, ENTCS (2007), to appear.
Jensen, O. H. and R. Milner, Bigraphs and transitions, in: Proc. POPL, 2003, pp. 38–49.
Jensen, O. H. and R. Milner, Bigraphs and mobile processes (revised), Technical report UCAM-CL- TR-580, Computer Laboratory, University of Cambridge (2004).
Klin, B., V. Sassone and P. Sobocin´ski, Labels from reductions: Towards a general theory, in:
Proc. CALCO, Lecture Notes in Computer Science 3629 (2005), pp. 30–50.
Lack, S. and P. Sobocin´ski, Adhesive categories, in: I. Walukiewicz, editor, Proc. FoSSaCS, Lecture Notes in Computer Science 2987 (2004), pp. 273–288.
Leifer, J. J. and R. Milner, Deriving bisimulation congruences for reactive systems, in: C. Palamidessi, editor, Proc. CONCUR, Lecture Notes in Computer Science 1877 (2000), pp. 243–258.
Leifer, J. J. and R. Milner, Transition systems, link graphs and petri nets, Mathematical Structures in Computer Science 16 (2006), pp. 989–1047.
Milner, R., Bigraphical reactive systems, in: K. G. Larsen and M. Nielsen, editors, Proc. 12th CONCUR, Lecture Notes in Computer Science 2154 (2001), pp. 16–35.
Milner, R., Pure bigraphs: Structure and dynamics, Inf. Comput. 204 (2006), pp. 60–122.
Sassone, V. and P. Sobocin´ski, Deriving bisimulation congruences: A 2-categorical approach, in:
Proc. EXPRESS’02, Electr. Notes Theor. Comput. Sci. 68(2), 2002.
Sassone, V. and P. Sobocin´ski, Reactive systems over cospans, in: Proc. LICS (2005), pp. 311–320.
Sewell, P., From rewrite rules to bisimulation congruences, Theor. Comput. Sci. 274 (2002), 183–230.
Sobocin´ski, P., “Deriving process congruences from reaction rules,” Ph.D. thesis, BRICS, University of Aarhus (2004).
