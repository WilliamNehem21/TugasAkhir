	Electronic Notes in Theoretical Computer Science 91 (2004) 43–55	
www.elsevier.com/locate/entcs




Small Edge Dominating Sets of Regular Graphs
W. Duckworth1
Department of Computing Macquarie University Sydney NSW 2109 Australia

Abstract
An edge dominating set F of a graph G is a subset of E(G) such that every edge in E(G) \F is incident with at least one vertex that is an end-point of an edge in F. Edge dominating sets of small cardinality are of interest. We refer to the size of a smallest edge dominating set of a graph G as the edge domination number of G and denote this by β(G). In this paper we improve all current known upper bounds on β(G) when G is a random d-regular graph, d ≥ 3. This is achieved by analysing a simple greedy heuristic on random regular graphs using differential equations. Our results compare favourably with known lower bounds on β(G) when G is a random regular graph.
Keywords: random regular graph, edge dominating set, greedy algorithm


Preliminaries
Throughout this paper we consider connected graphs that are undirected, unweighted and contain no loops or multiple edges. A graph G is said to be d-regular if every vertex in V (G) has degree d (i.e. each vertex has precisely d incident edges). When discussing any graph G, we let n denote the cardinality of V (G) and for d-regular graphs on n vertices, we assume dn to be even to avoid parity problems. For other basic graph-theoretical definitions we refer the reader to Diestel [3].

1 billy@ics.mq.edu.au


1571-0661 © 2004 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2003.12.005

An edge dominating set F of a graph G is a subset of E(G) such that every edge in E(G) \ F is incident with at least one vertex that is an end-point of an edge in F. Edge dominating sets of small cardinality are of interest. We refer to the size of a smallest edge dominating set of a graph G as the edge domination number of G and denote this by β(G).
For an arbitrary graph G, the problem of determining β(G) was shown to be NP-hard by Yannakakis and Gavril [12]. In fact, Zito [13] showed that determining β(G) is NP-hard to solve within some constant factor of the op- timal solution even for cubic (i.e. 3-regular) graphs. Horton and Kilakos [7] showed that determining β(G) remains NP-hard for planar bipartite graphs. More recently, Zito [13] extended these NP-hardness results to include bi- partite (ks, 3s)-graphs for every integer s > 0 and for k ∈ {1, 2}. In [7] a polynomial time algorithm was given for determining β(G) in various classes of chordal graphs.
We consider random d-regular graphs that are generated uniformly at ran- dom (u.a.r.), and need some associated notation. We say that a property B = Bn of a random graph on n vertices holds asymptotically almost surely (a.a.s.) if the probability that B holds tends to 1 as n tends to infinity. When d-regular graphs are the objects of consideration, this is modified so that n is restricted to even numbers if d is odd. For other basic random graph theory definitions we refer the reader to Bollob´as [2] and to Janson et al. [8].
Zito [15] considered determining β(G) for random graphs and in [14] pre- sented upper and lower bounds on β(G) when G is a random d-regular graph. Explicit values for these bounds were given when 3 ≤ d ≤ 7. The lower bounds were calculated by means of a direct expectation argument whilst the upper bounds were calculated by using differential equations to analyse the performance of a randomised algorithm that is based on repeatedly choosing vertices of a particular degree and deleting edges.
In this paper we analyse the average-case performance of a simple heuristic, which is a random greedy algorithm, that gives upper bounds on β(G) when G is a random d-regular graph, d ≥ 3. This algorithm is an extension of that for d = 3 presented in [1] and improves all upper bounds presented in [14]. Note that the upper bound for d =3 in [14] is larger than the corresponding bound presented in [1].
In the following section we give a description of our algorithm and in Section 3 we outline the method used for its analysis. Our analysis uses a theorem of Wormald [11] which we restate in Section 3. The results of this paper are encompassed by the following theorem, the proof of which is given in Section 4.
Theorem 1.1 Let d ≥ 3 be fixed. Then for a random d-regular graph on n

vertices, the size of a minimum edge dominating set is asymptotically almost surely less than F dn, where the constant F d is given in Table 1.
u	u
The constant F d referred to in Theorem 1.1 arises from the solution of par- ticular sets of differential equations which are derived later in the paper. These constants enable us to give our upper bounds. In Table 1, corresponding lower bounds are also given by evaluating constants F d from the argument in [14] (the details of this standard expectation argument are restated in Section 5). These provide lower bounds as a comparison to our upper bounds.
Table 1
Bounds on β(G) when G is a random d-regular graph on n vertices.

l



























Prioritised algorithm
Consider the following algorithm that greedily finds an edge dominating set of a graph G. Repeatedly choose an edge e randomly to add to a set F. After each edge is chosen, remove e and all edges incident with its end-points from
G. Once no edges remain, the set F is an edge dominating set in G. It is not difficult to see that the set F is also an independent-edge dominating set of G which is also referred to as a maximal matching.
We modify this algorithm slightly by the way in which each subsequent edge of F is chosen. We assign a priority to vertices of minimum degree and add to F, not always an edge incident with such a vertex, but sometimes an edge incident with a neighbour of such a vertex. Our algorithm is presented

in Figure 1. It takes a d-regular n-vertex graph G as input and returns an edge dominating set F for G. We use the notation N (v) to denote the set of neighbours of a vertex v and deg(v) to denote the current degree of the vertex v in G. Also, we use Vi to denote the set of vertices of current degree i in G, 0 ≤ i ≤ d.

select u u.a.r. from V (G); select v u.a.r. from N (u);
F ← uv;
remove all edges incident with u from E(G); remove all edges incident with v from E(G);
while ( |E(G)| > 0) 
do
MIN
k ← v∈{V (G)\V0 } [deg(v)];
select w u.a.r. from Vk;
while ( deg(w) > 0) 
do
if ( deg(w)= 1 ∧ deg(N (w)) = 1 )
then



else
u ← w;
v ← N (w);
select u u.a.r. from N (w);
MAX
j ← v∈{N (u)\w} [deg(v)];
select v u.a.r. from {N (u) \ w}∩ Vj;

endif
F ← F ∪ uv;
remove all edges incident with u from E(G); remove all edges incident with v from E(G);
enddo enddo

Fig. 1. Edge dominating set algorithm
The algorithm proceeds in a series of operations. In each operation, one or more edges are sequentially added to F and each time an edge is added to F, all edges incident with the end-points of that edge are removed from

G. The first operation randomly selects the first edge of F and removes from G all edges incident with its end-points. All subsequent operations start by selecting a vertex of current degree strictly less than d. This is possible as the input graph is a d-regular graph and assumed to be connected (any induced subgraph of a connected d-regular simple graph may not be d-regular).
Each operation after the first starts by selecting a vertex w u.a.r. from those vertices of minimum positive current degree in G and the operation is split into a series of sub-steps. Each sub-step chooses a neighbour u of w u.a.r. If the degree of both w and u is 1, this edge is isolated from the rest of the edges in G and we simply add the edge uw to F, remove the edge from G and start a new operation.
In all other cases, a sub-step chooses a neighbour v of u (not w) u.a.r. from those vertices of current maximum degree amongst the set {N (u) \ w}. The edge uv is added to F and all edges incident with u and v are removed from
G. Sub-steps are then repeated until the degree of w becomes zero. Once this occurs, more operations are performed and this continues until no edges remain in G.
The algorithm above for finding a small edge dominating set of d-regular graphs is a modified and extended version of the algorithm in [1] that finds a small edge dominating set of cubic graphs. The algorithm in [1] is analysed as follows. Letting variables Yi (i = 0,... , 3) denote the number of vertices of current degree i, the expected values of Yi are estimated throughout the algorithm for each i using differential equations. It is shown that with high probability the variables are concentrated near their expected values. The analysis in [1] has major complications arising from the fact that priority is given to vertices of minimum current degree. We call such an algorithm prioritised.
The analysis of the prioritised algorithm presented in this section will be carried out using a technique introduced by Wormald [11]. This approach ap- proximates the performance of a prioritised algorithm by analysing associated deprioritised algorithms. These algorithms entirely avoid prioritising by us- ing a randomised mixture of operations. The particular mixture used for any sequence of operations is prescribed in advance but changes over the course of the algorithm in order to approximate the prioritised algorithm. One of the main objectives of using this new technique is to reduce the number of conditions that are required to be checked. Arguments in [1] involve branch- ing processes and large deviation inequalities and the justifications of those require checking complex conditions regarding derivatives.

Use of deprioritised algorithms

The operations and priorities described in the prioritised algorithm given in Section 2 may be analysed using [11, Theorem 1]. This provides us with a set of differential equations whose solution describes the state of a deprioritised version of the algorithm during its execution. From this, we deduce asymp- totically almost sure bounds on the size of the edge dominating set returned.
The standard model for random d-regular graphs is as follows. Take a set of dn points in n buckets labelled 1, 2,..., n, with d points in each bucket, and choose u.a.r. a pairing P = p1,... , pdn/2 of the points such that each pi is an unordered pair of points and each point is in precisely one pair pi. The resulting probability space of pairings is denoted by Pn,d. Form a d-regular pseudograph on n vertices by placing an edge between vertices i and j for each pair in P having one point in bucket i and one in bucket j. In order to prove that a property is a.a.s. true of a uniformly distributed random d-regular (simple) graph, it is enough to prove that it is a.a.s. true of the pseudograph corresponding to a random pairing (see Bollob´as [2] and Wormald [9]).
As in [10], we redefine this model slightly by specifying that the pairs are chosen sequentially. The first point in a random pair may be selected using any rule whatsoever, as long as the second point in that random pair is chosen
u.a.r. from all the remaining free (unpaired) points. This preserves the uniform distribution of the final pairing.
When a pair has been determined in the sequential process, we say that it has been exposed. By exposing pairs in the order which an algorithm requests their existence, the generation of the random pairing may be combined with the algorithm (as in [4,5,6]). In this way, the algorithm, such as the one in the previous section, which deletes edges, may be described in terms of operations incorporated into the pairing generation. The definition of the operations may be extended to do whatever other tasks the algorithm needs to carry out (such as exposing pairs based on the degrees of particular vertices).
The algorithm proper acts upon the final (pseudo)graph of the generation process. During the course of the generation process, the set of exposed pairs builds up this final graph and the generation process incorporates the algo- rithm. The order in which the edges are deleted from the final (pseudo)graph corresponds to the order in which the pairs were exposed by the generation process. For example, in the deletion algorithm, choosing a vertex of current minimum degree and selecting a neighbour of current maximum degree, would correspond to choosing a vertex of maximum degree in the evolving graph, ex- posing its remaining incident edges and choosing a vertex of minimum degree. The setting of [11, Theorem 1] requires a number of definitions, and may

be described as follows. It concerns a class of processes applied to the random pairing. As described above, this may be defined in terms of the generation algorithm which exposes pairs. The generation algorithm begins with the empty pairing G0. The pairing Gt+1 is obtained from Gt by applying an operation which may expose some of the pairs. The operation, opt, which is applied to Gt must be one of some prespecified set of operations, Opi, i = 1,... , d, where Opi consists of selecting a bucket u of degree d − i in Gt
u.a.r. (the degree of a bucket is the number of points it contains in exposed
pairs) and then applying some specified set of tasks, resulting in Gt+1. A subset F of E(G) is selected during the operations, with F0 = ∅ initially, and F = Ft for the pairing Gt.
For 1 ≤ i ≤ d, let Yi = Yi(t) denote the number of buckets of degree d − i in Gt, and let Yd+1 = Yd+1(t) denote cardinality of the set Ft. Put Y(t) = (Y1(t),... , Yd+1(t)) and let y denote (y1(x),... , yd+1(x)). We refer the reader to [11, Theorem 1] for the motivation of the following definitions and provide a little explanation below. Given functions fi,r (x, y), define



(1)

where
αk(x, y) = fd−k−1,d−k (x, y) ,

τk(x, y) = −fd−k−1,d−k−1 (x, y) ,



(2)
x =  t
and

y(x)= Y(t) .



(3)
We will consider the equations
dyi = F (x, y, i, k) dx

where
   τk   fi,d−k (x, y)+  αk   fi,d−k−1 (x, y) k ≤ d − 2

(4)
F (x, y, i, k)= 

τk +αk
τk +αk
fi,1 (x, y) k = d − 1

and work with the parameters of fi,l in the domain
Dє = {(x, y): 0 ≤ x ≤ d, 0 ≤ yi ≤ d for 1 ≤ i ≤ d + 1, yd ≥ ϵ}
for some pre-chosen value of ϵ > 0. The behaviour of the process will be described in terms of the function y˜ = y˜(x)= (y˜1(x),... , y˜d+1(x)) defined as

follows, with reference to an initial value x = x0 = t0/n of interest:
y˜i(x0) = Yi(t0)/n, i = 1,... ,d + 1, and inductively
for k ≥ 1, y˜ is the solution of (3) with initial condi-
tions y(xk−1)= y˜(xk−1), extending to all x ∈ [xk−1, xk],
where xk is defined as the infimum of those x > xk−1 for which at least one of the following holds: τk ≤ 0 and k < d − 1; τk + αk ≤ ϵ and k < d − 1; y˜d−k ≤ 0; or the solution is outside Dє or ceases to exist.
The interval [xk−1, xk] is called Phase k. This inductive definition of y˜ con- tinues for phases k = 1, 2,..., m, where
m denotes the smallest k for which either k = d − 1,
or any of the termination conditions for Phase k in (6) hold at xk apart from xk = inf{x ≥ xk−1 : τk ≤ 0}.
It turns out that the intervals called phases have nonempty interior pro-

vided


τk > 0 and τk + αk > ϵ at (xk−1, y˜(xk−1))	(1 ≤ k ≤ min{d − 2, m}),
fd−1,d−1 > 0 at (x0, y˜(x0)),





'
d−k,d−k
τk + fd−k,d−k−1f '

'
d−k,d−k


'
1,1
> 0 at (xk−1, y˜(xk−1))+
(1 < k ≤ min{d − 2, m}),
> 0 at (xk−1, y˜(xk−1))− (1 < k ≤ m),
> 0 at (xd−2, y˜(xd−2))+ (if m = d − 1),

with f ' denoting df(x,y˜(x)) and (x, y˜(x))+ and (x, y˜(x))− referring to the right- hand and left-hand limits as functions of x.
We may now restate [11, Theorem 1] which we will use in the following section in connection with the edge dominating set algorithm.
Theorem 3.1 ([11]) Let d ≥ 3. Assume that for some fixed ϵ > 0 the oper- ations Opr satisfy
E Yi(t + 1) − Yi(t) | Gt ∧ {opt = Opr }  = fi,r(t/n, Y1/n,... , Yd+1/n)
(within o(1)) for some fixed functions fi,r(x, y1(x),... , yd+1(x)) and for i = 1,...,d + 1, r = 1,..., d, with the convergence in o(1) uniform over all t and Gt for which Yr(t) > 0 and Yd(t) > ϵn. Assume furthermore that
there is an upper bound, depending only upon d, on the number of pairs

exposed, and on the number of elements added to F (i.e. |Ft+1| − |Ft|), during any one operation;
the functions fi,r are rational functions of x, y1,... , yd+1 with no pole in
Dє defined in (5);
there exist positive constants C1, C2 and C3 such that for 1 ≤ i < d, everywhere on Dє, fi,r ≥ C1yi+1 − C2yi when r /= i, and fi,r ≤ C3yi+1 for all r.
Define y˜ as in (6), set x0 = 0, define m as in (7), and assume that (8) and (9) both hold. Then there is a randomised algorithm on Pn,d for which a.a.s. there exists t such that |Ft| = ny˜d+1(xm)+ o(n) and Yi(t) = ny˜i(xm)+ o(n) for 1 ≤ i ≤ d. Also y˜i(x) ≡ 0 for xk−1 ≤ x ≤ xk, 1 ≤ i ≤ d − k − 1 (where 1 ≤ k ≤ m).




Some of these definitions may be easily explained. The algorithm in Sec- tion 2 works by deleting edges; the edges deleted are equivalent to pairs ex- posed in the corresponding pairing generation algorithm as described above. In particular, a vertex of degree i in the original algorithm corresponds to a bucket of degree d − i in the pairing version; we use vertex degree and bucket degree to distinguish these complementary measures. The algorithm gives higher priority to the buckets of highest degree (vertices of lowest degree). The phase is determined by the set of bucket degrees which are reasonably common (meaning, roughly, more than cn buckets have that degree for some c > 0). Phase k corresponds to a period in which the smallest such common vertex degree is d −k (i.e. largest common bucket degree is k). At such a time, vertices of degree d − k − 1, when created, will immediately be used up, by being chosen for w in the subsequent steps, until the minimum positive vertex degree returns to d −k. So Phase k basically consists of a mixture of two oper- ations: Opd−k and Opd−k−1. The functions α and τ represent respectively the
expected net increase in Yk+1 in an Opd−k , and the expected net decrease in
Yk+1 in an Opd−k−1. From these quantities, one may estimate the proportions of these operations being performed at any stage. The randomised algorithm
referred to in the theorem uses roughly the same mixture of operations. This in turn allows us to calculate the expected changes in the variables, and the result is (4), which leads to the differential equation (3) analogous to the equa- tions derived in [1]. In fact, for d = 3, the algorithm described above and the algorithm in [1] are identical.

Upper bounding the edge domination number
Consider the degree-greedy algorithm for finding a small edge dominating set as described in Section 2. Here, in the specification of Opr (which first selects a random vertex, w, of degree r), the set of randomised tasks consists of choosing a neighbour u of w u.a.r. and then (possibly) choosing a different neighbour of u u.a.r. from those vertices of current maximum degree in the set
{N (u) \ w}. An edge is then chosen to be added to F and edges are deleted. This sub-step is repeated until the degree of w reaches zero.
As random regular graphs a.a.s. contain few small cycles [8, Theorem 9.5] the structure of a random graph around a vertex up to a constant distance is a.a.s. a tree. Therefore, when an Opr is performed, r edges are chosen to be part of F. We may verify the hypotheses of Theorem 3.1. First we will show that (10) holds when Yd(t) > ϵn (for any ϵ > 0). From here onwards in this description, v-degree refers to vertex degree, so v-degree i means bucket degree d − i. Let yi denote Yi/n.
An Opr starts by selecting a vertex, w, u.a.r. from the vertices of v-degree r and chooses a neighbour u of w u.a.r. The probability that u has v-degree x, 1 ≤ x ≤ d, is Px where


P = jyj j	s
d
and	s =	iyi.
i=1

The probability that the neighbour v of u chosen has v-degree q is χ + o(1) which is given by
χ = (Sq )x−1 − (Sq−1)x−1

where Sb = Σb
1	1
Px.

The probability that u has b neighbours (other than w) of v-degree q, (assuming that q is the maximum current v-degree amongst the neighbours of u) is ν/χ + o(1) where
ν = (P )b x − 1 (Sq−1)x−b−1.

The expected number of neighbours of u (other than w) that have v-degree
j, 1 ≤ j ≤ q − 1 is γ/ν + o(1) where
γ = (P )b x − 1 (Sq−1)x−b−2(x − b − 1)P .

The o(1) terms in the statements above are due to the fact that the values of all these variables may change by a constant during an operation. Here

we assume s ≥ ϵn for some fixed ϵ > 0 which means that the error is in fact
O(1/n). Later we discuss operations where s < ϵn.
So we have that (10) holds with


(11)
fi,r = −δi=r − vPi + v Σd

d q=1
[χ((q − 1)ρi − δi=q)+] 

+ v Σd	Px Σx−1 ν(b − 1)Φq + Σq−1 γΦj 


where
x=2


Φj = δi=j−1 − δi=j,
b=1
i	j=1	i

(12)	ρi = Pi+1 − Pi,	1 ≤ i ≤ d − 1, ρd = −Pd
and for any statement Q, δQ = 1 if Q evaluates to TRUE and δQ = 0 if Q
evaluates to FALSE.
The first term in (11) denotes the change in v-degree of w from v to 0 and the second term denotes the change in the v-degrees of the v neighbours of w from i to 0 (one for each of the sub-steps). The remaining terms denote the expected change due to finding v edge dominating set edges and removing the edges incident with their end-points. The expected change in the size of F per operation is simply v.
We are now ready to verify the hypotheses of Theorem 3.1. Hypothesis
(i) of Theorem 3.1 is immediate since in any operation at most 2d2 pairs are exposed and at most v edges are added to F. The functions fi,r satisfy
(ii) because from (11) their (possible) singularities satisfy s = 0, which lies outside Dє since in Dє, s ≥ yd ≥ ϵ. Hypothesis (iii) follows from (11) again using s ≥ yd ≥ ϵ and the boundedness of the functions yi (which follows from the boundedness of Dє). Thus, defining y˜ as in (6) with t0 = 0, Yd(0) = n and Yi(0) = 0 for i /= d, we may solve (3) numerically to find m, verifying (8) and (9) at the appropriate points of the computation.
It turns out that these hold for each d in Table 1, and that in each case m = d − 1, for sufficiently small ϵ > 0. For such ϵ, the value of y˜d+1(xm) may be computed numerically (the result is shown as the constant F d in Table 1), and then by Theorem 3.1, this is the asymptotic value of the size of the edge dominating set F at the end of some randomised algorithm. So the conclusion is that a random d-regular graph a.a.s. has an edge dominating set of size at most ny˜d+1(xm)+ o(n). Note also that (by the theorem) y˜i(x) ≡ 0 in Phase k for 1 ≤ i ≤ d − k − 1, and by the nature of the differential equation, y˜i(x) will be strictly positive for i > d − k. So by (6) and (7), the end of the process

(for ϵ arbitrarily small) occurs in Phase d − 1 when y˜1 becomes 0.
Once s < ϵn, the change in variables per operation is bounded by a con- stant. Hence, letting ϵ tend to 0 sufficiently slowly, in o(n) operations the change in the random variables Yi and F is o(n).
The equations were solved using a Runge-Kutta method giving accuracy to at least five decimal places. This completes the proof of Theorem 1.1.

Lower bounding the edge domination number
Zito [14] gave lower bounds on the size of a minimum maximal matching (minimum independent-edge dominating set) for random d-regular graphs. Using a standard expectation argument, it was shown that for a random d- regular graph on n vertices, where d ≥ 3, the number of maximal matchings of size λ is at most
d2λ(2λ(d − 1))2λ(d−1)(d/2)d/22d(1−2λ)

λλ(1 − 2λ)1−2λ(λ(2d − 1))λ(2d−1)dd .
Finding the value of λ above which this expression is strictly greater than 1 gives lower bounds on β(G) when G is a random d-regular graph. Evaluating this function for various values of d gives the constants F d reported in Table 1.

Remarks
It is worth noting that the same line of research has already yielded results on other closely related abstract properties of random regular graphs (e.g. independent sets and induced matchings). Whereas, in the majority of other cases, such as that in [14,15], each operation adds one element to the set that is under construction, here we add up to d − 1 elements per operation. This and exploiting the well known structure of random regular graphs has allowed us to improve upon the known upper bounds for the problem under consideration.

References
Assiyatun H. and W. Duckworth, Small maximal matchings of random cubic graphs. Submitted.
Bolloba´s, B., Random graphs. Academic Press Incorporated, London, 1985.
Diestel, R., Graph theory. Springer-Verlag, New York, 2000.
Duckworth, W., Maximum 2-independent sets of random cubic graphs. The Australasian Journal of Combinatorics, 27:63-80, 2003.


Duckworth,W. and N. C. Wormald, Minimum independent dominating sets of random cubic graphs. Random Structures and Algorithms, 21(2):147–161, 2002.
Duckworth, W. and M. Zito. Large 2-independent sets of regular graphs. Electronic Notes in Theoretical Computer Science, 78:1-13(electronic), 2003.
Horton, J. D. and K. Kilakos, Minimum edge dominating sets. SIAM Journal on Discrete Mathematics, 6(3):375–387, 1993.
Janson, S., T. L- uczak and A. Rucinski, Random graphs. Wiley, New York, 2000.
Wormald, N. C., Models of random regular graphs. Surveys in Combinatorics, 1999 (Canterbury). London Mathematical Society Lecture Note Series, 267:239–298, Cambridge University Press, Cambridge, 1999.
Wormald, N. C., The differential equation method for random graph processes and greedy algorithms. Lectures on Approximation and Randomized Algorithms, 73–155, PWN, Warsaw, 1999. M. Karon´ski and H. Pr¨omel (editors).
Wormald, N. C., Analysing greedy algorithms on regular graphs. Electronic Notes in Discrete Mathematics, 10, (electronic), 2001. M.N.J. Nesetril and O. Serra (editors).
Yannakakis, M. and F. Gavril, Edge dominating sets in graphs. SIAM Journal on Applied Mathematics, 38(3), 364–372, 1980.
Zito, M., Randomised techniques in combinatorial Algorithmics. Doctoral Thesis, The University of Warwick, 1999.
Zito, M., Greedy algorithms for minimisation problems in random regular graphs. Lecture Notes in Computer Science, 2161:524–536, Springer-Verlag, Berlin, 2001. F.M. auf der Heide, (editor).
Zito, M., Small maximal matchings in random graphs. Theoretical Computer Science, 297(1- 3):487–507, 2003.
