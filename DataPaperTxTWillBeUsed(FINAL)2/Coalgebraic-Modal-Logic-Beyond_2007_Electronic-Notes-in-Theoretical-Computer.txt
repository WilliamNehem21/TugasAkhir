

Electronic Notes in Theoretical Computer Science 173 (2007) 177–201
www.elsevier.com/locate/entcs

Coalgebraic Modal Logic Beyond Sets
Bartek Klin1 ,2
Warsaw University, Edinburgh University

Abstract
Polyadic coalgebraic modal logic is studied in the setting of locally presentable categories. It is shown that under certain assumptions, accessible functors admit expressive logics for their coalgebras. Examples include typical functors used to describe systems with name binding, interpreted in nominal sets.
Keywords: coalgebra, modal logic, locally presentable category


Introduction
In recent years, coalgebra has received much attention as a unifying abstract ap- proach to transition systems [29,16]. Many kinds of systems considered in theoretical computer science, including labelled, probabilistic and timed ones, are modeled as coalgebras for certain functors (called behaviour functors in this context) on the category Set of sets and functions. Other categories have also been considered, for example presheaf categories [11] or the category Nom of nominal sets [10] to model process algebras with name binding. The coalgebraic approach provides an abstract view on notions of coinduction and bisimulation.
Properties of transition systems are normally specified with a modal logic. Var- ious logics have been developed to describe properties of different kinds of systems, e.g., Hennessy-Milner logic for labelled transition systems [14], probabilistic modal logic [17] for probabilistic systems, or logics for systems with name binding [24,8]. Importantly, such logics are expressive, i.e., they characterize their respective no- tions of bisimilarity. However, non-expressive fragments of these logics are also often used to characterize other notions of process equivalence, e.g., trace equivalence or testing equivalence [13]. A successful abstract theory of transition systems must provide a general perspective on modal logics and their properties.

1 Supported by EPSRC grant EP/D039045/1.
2 Email: bklin@inf.ed.ac.uk



1571-0661 © 2007 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2007.02.034

The first abstract approach to logics for coalgebras was coalgebraic logic of Moss [25], providing expressive logics for essentially all functors on Set. However general, coalgebraic logic is rather difficult to use in practice, as its syntax involve applications of the behaviour functor to formulas, and it does not provide simple and natural modalities like those known from Hennessy-Milner or similar logics. On the other hand, logics developed in [15,19,26,28] are close to their usual con- crete presentations, but their expressivity depends on some conditions imposed on the behaviour functor. For example, modalities in [26] are predicate liftings, which map predicates on X to predicates on BX, where B is the behaviour functor, and the resulting modal logic is expressive provided enough predicate liftings exist for
B. This approach was analyzed and generalized by Schro¨der [30], who noted that predicate liftings are equivalent to functions B2 → 2 and considered polyadic modal logic, where modalities of any arity, such as functions B(2n) → 2, are allowed. He then proved polyadic modal logics expressive for all accessible behaviour functors. All results mentioned above apply to functors on Set. In particular, Schro¨der’s expressivity proof is set-theoretic in nature and it is not immediately clear how to translate it to other base categories. It is the purpose of this paper to generalize the definition of polyadic modal logic, and the proof of its expressivity, to accessible
functors on locally presentable categories that satisfy some additional conditions.
Our approach is inspired by recent work by Kurz and Bonsangue [6,7,20,21], who use Stone dualities to obtain logics for coalgebras on arbitrary categories, and by that by Pavlovic, Mislove and Worrell [27], who exploit logical connections be- tween data and tests to develop an abstract theory of testing. In those works, as in the present paper, contravariant adjunctions provide the infrastructure for linking processes and formulas. In [6,7,20], the adjunctions are assumed to be categorical dualities. This easily implies the existence of expressive logics for all functors, and the main effort is directed towards the nontrivial task of finding concrete presenta- tions of those logics; to that end, in [21] adjunctions that are not dualities were used. In the present, more flexible approach, the duality assumption is not made. This often makes concrete presentations of expressive logics easier to find, and opens a possibility to treat various interesting, but non-expressive logics in a uniform fash- ion, but it comes for a price: the existence of expressive logics depends on certain conditions, as in [30]. On the other hand, in [27] the duality assumption is not made, and the adjunctions arise from certain cogenerators in the relevant categories. This does not apply to all examples of interest, and in the present paper we work with more general adjunctions. Also, in [27] the main focus is on non-expressive logics, and no expressivity results are provided there.
The paper is structured as follows. After §2 of technical preliminaries, §3 presents a categorical generalization of Schro¨der’s polyadic modal logic, which is proved expressive under some conditions in §4. In §5, a categorical notion of modality is suggested. Examples for functors on three different categories are studied in §6.
Acknowledgments. The author is grateful to Jiˇr´ı Ada´mek for pointing out the notion of strongly locally presentable category, to Gordon Plotkin and John Power for useful discussions, and to Alexander Kurz and Sam Staton for comments on a

previous draft of this paper.

Preliminaries
The reader is assumed to be acquainted with basic category theory; [2,22] are good references.
An epimorphism e : X → Y is strong if for every commutative square (i) with
m mono there exists a unique diagonal d : Y → U such that (ii) commutes.

X   e  Y	X   e  Y 
f	g	f	d	g
J,˛	 J	J,,˛ s  J 
U	m	Z	U	m	Z
(ii)
Y is then a strong quotient of X. One says that strong epis and monos form a factorization system in a category C if every morphism in C can be factorized as a strong epi followed by a mono.
A source { fi : X → Yi | i ∈ I } is jointly monic if for every g, h : Z → X, one has g = h if fi ◦ g = fi ◦ h for all i ∈ I. An object X in a category C is a cogenerator if for every object Y , the source of all morphisms from Y to X is jointly monic. For example, every set with at least two elements is a cogenerator in Set.
A category D is ﬁltered if (i) for every d, d' ∈D there exists a cospan d → d'' ← d' in D, and (ii) every parallel pair of morphisms in D has a coequalizer in D. A ﬁltered colimit is a colimit of a diagram whose domain category is nonempty and filtered; the dual notion is that of coﬁltered limit. An object X of a category C is ﬁnitely presentable if the functor hom(X, −) : C → Set preserves filtered colimits. For example, finitely presentable objects of Set are exactly finite sets, and in an equational class of algebras, an algebra is finitely presentable if and only if it can be presented by finitely many generators and finitely many equations. A category C is locally ﬁnitely presentable if it is cocomplete and has a set G of finitely presentable objects such that every object of C is a filtered colimit of objects in G. For C, D finitely presentable, a functor B : C → D is ﬁnitary if it preserves filtered colimits. In a locally presentable category, an object is ﬁnitely generated if it is a strong quotient of a finitely presentable object. In Set, finitely presentable and finitely generated objects coincide, and an algebra is finitely generated if and only if it is so in the sense of universal algebra.
The above notions can be generalized to κ-filtered colimits, locally κ-presentable categories and κ-accessible functors, for any regular cardinal κ. All definitions, results and proofs given in this paper work for the more general case with no change. For more information and intuition on locally presentable categories, see [3,23].
For an endofunctor L on a category C, an algebra is an object X (the carrier), with a map g : LX → X (the structure). An algebra morphism from g : LX → X to h : LY → Y is a map f : X → Y in C such that f ◦ g = h ◦ Lf . Dually, for an

endofunctor B, a coalgebra is an object X (the carrier), with a map g : X → BX (the structure). A coalgebra morphism from g : X → BX to h : Y → BY is a map f : X → Y in C such that h ◦ f = Bf ◦ g. For example, if B = Pω(A × −) on Set, where Pω is the finite powerset functor and A is a fixed set of labels, then B-coalgebras are finitely branching labelled transition systems (LTSs). For a coalgebra h : X → BX in Set, elements (called processes in this context) x, y ∈ X are behaviourally equivalent if they are identified by a coalgebra morphism from
h. For LTSs as coalgebras in Set, behavioural equivalence coincides with strong bisimilarity. More information and examples of coalgebras can be found in [29,16]. On finitely branching LTSs, bisimilarity is characterized by finitary Hennessy-
Milner logic [14], with syntax
φ ::= Т| ¬φ | φ1 ∧ φ2 | ⟨a⟩φ	(1) and with semantics defined, on a given LTS, by
x |= ⟨a⟩φ ⇐⇒ x −a→ y s.t. y |= φ
and the standard interpretation of propositional connectives. Fragments of Hennessy-Milner logic have also been considered (see [13] for a survey). For ex- ample, restricted to the grammar
φ ::= Т| ⟨a⟩φ,	(2)
the logic characterizes trace equivalence on LTSs.
Acquaintance with various known approaches aimed at generalizing Hennessy- Milner and other logics to other functors (on Set) is not strictly necessary to un- derstand the following technical developments. However, without any knowledge of those approaches it would be hard to put the present work in context. Due to lack of space that related work is not described here; [30] is a good reference, but
e.g. [15,19,25,26,28] are also worth reading.

Logical Connections
Our generalization of coalgebraic modal logic proceeds along lines similar to those of [27]. To gain momentum, we begin by considering the familiar setting of sets and functions. Typically, the semantics of a logic is some satisfaction relation |= ⊆ X ×Φ between the set Φ of tests (formulas) and the set X of tested entities (processes), or equivalently a function:
|=: X × Φ → 2
(here and in the following, 2 denotes the two-element set {tt, ff}). Its two trans- poses:
[[ ]] : Φ → 2X	[[ ]]b : X → 2Φ	(3)
defining the semantics of processes by sets of formulas that hold for them, and the semantics of formulas by sets of processes that satisfy them. In particular, two

processes in X are logically equivalent if they are equated by [ ]]b. This functional presentation is easily generalized to cover logics where another set is used for “truth values”; for example, in some probabilistic logics the continuous interval [0, 1] is used instead of 2.
Abstracting from the category of sets, consider any symmetric monoidal closed category (C, ⊗,  ) with a chosen object Ω. The contravariant internal hom-functor
—  Ω on C is self-adjoint, with the bijection
C(X, Φ   Ω) ∼= C(X ⊗ Φ, Ω) ∼= C(Φ ⊗ X, Ω) ∼= C(Φ,X   Ω)	(4)
obtained from the symmetric monoidal closed structure. 3 Even more generally, we assume any logical connection, i.e., any contravariant adjunction


F
C¸ı	⊥	z 

C(X, GΦ) ∼= D(Φ,F X)	(5)

,¸	¸ı D
t
(the contravariance of F and G is marked by the cross arrow tails), where X ∈ C, Φ ∈ D. Slightly abusing notation, we will denote both sides of the bijection in (5) by
−b. Objects of C are thought of as sets (or structures) of processes, and objects of D as sets (or structures) of formulas. The connection (5) provides the infrastructure for relating processes and formulas. It is clear that (4) is a special case of (5), and (3) is a special case of (4).
In any connection, the composite (covariant) functors GF and FG are monads on C and D, respectively. We denote the units and multiplications of these monads by ηtF , ηFt, μtF and μFt. The bijection (5) can be expressed in terms of these transformations:
f b = Ff ◦ ηFt	gb = Gg ◦ ηtF ,	(6)
for f : X → GΦ in C and g :Φ → FX in D. We will sometimes use the following property of adjunctions:
FηtF ◦ ηFtF = id.	(7)
The following is a central definition in our approach to logics for coalgebras.
Definition 3.1 In the situation of (5), for any endofunctor B on C, a polyadic coalgebraic modal logic (or shortly a logic) for B-coalgebras is a pair (L, ρ) where L (called the syntax) is an endofunctor on D, and ρ : LF =⇒ FB (called the semantics) connects L and B along the adjunction.
A connection ρ as above defines the adjoint connection ρ٨ : BG =⇒ GL by
ρ٨ = GLηFt ◦ GρG ◦ ηtF BG;	(8) in turn, ρ٨ determines ρ by ρ = (ρ٨)٨ = FBηtF ◦ F ρF ◦ ηFtLF .
3 In [27], the object Ω of truth values was assumed to be a cogenerator in C. Here no such assumption is made, and indeed in §6.2 the object of truth values is not a cogenerator. However, we later assume that Ω is an internal cogenerator, see Remark 4.6.

If L has an initial algebra a : LΦL → ΦL, then ΦL can be thought of as the object of L-formulas. Given any coalgebra h : X → BX, the semantic interpretation [ ]]h of ΦL in h is defined by L-induction in D:

LFX ¸L[[,]]h_ L_Φ_
ρX
J 

FBX	a
(9)

Fh 
J ¸,	J 
_ _Φ_ _ 
[[ ]]h

and its transpose [ ]]b : X → GΦL is a map that, intuitively, identifies logically
equivalent processes.

Example 3.2 To illustrate the framework described so far on a simple example, consider the logic for trace equivalence on labelled transition systems. To this end, take C = D = Set, F = G = 2− and B = P(A×−) for a fixed set A. The syntax (2) is modeled by the functor L = 1 + A ×− with an initial algebra ΦL = A∗. The connection ρ at X, i.e., a function ρX : L(2X ) → (BX → 2), is defined by cases:

ρX(Т)(β) = tt always
ρX (⟨a⟩φ)(β) = tt ⇐⇒ ∃ (a, y) ∈ β. φ(y)= tt,

where β ∈ BX and φ ∈ 2X . The similarity of this definition to the usual semantics of (2) is hopefully apparent. Indeed, it is straightforward to check that in any LTS
∗
h : X → BX, [x]]b ∈ 2A	is (the characteristic function of) the set of traces of

x ∈ X, and the kernel of [ ]]b
is trace equivalence on h.


We now proceed to formulate and prove that logics (L, ρ) respect behaviour, i.e., that behavioural equivalence implies logical equivalence. This property of logics is usually defined in terms of individual processes, however in the categorical setting a

more abstract approach is needed. Since [ ]]b
intuitively identifies logically equiva-

lent processes, and coalgebra maps identify behaviourally equivalent processes, the following theorem plausibly captures the right categorical notion:
Theorem 3.3 Any logic (L, ρ) respects behaviour, i.e., for any coalgebra h : X →

BX, the map [[ ]]b
factorizes through every coalgebra map from h.


Proof. Consider any other coalgebra g : Y → BY and a coalgebra map f : X → Y
from h to g. It is enough to show that [ ]]b = [[ ]]b ◦ f , or equivalently that [ ]]h =

Ff ◦ [[ ]]g. This is proved by induction from the definition (9), since in the diagram:


LFX ¸LF,ƒ
ρX
J  F Bƒ
FBX
Fh 
LFY ¸L[[,]]g
ρY
J 
FBY
Fg 
LΦL

a

J ¸,		J ¸,	 J 

FX	Fƒ 
FY	[[ ]]g	ΦL



the upper left part commutes by naturality of ρ, the right part by (9), and the lower left part since f is a coalgebra map.	 




Expressivity
Recall the intuition that for a given logic (L, ρ), with L admitting initial algebras,

the interpretation [ ]]b
in a coalgebra h : X → BX identifies logically equivalent

processes. Expressivity of a logic means that logical equivalence implies behavioural

equivalence, therefore one can say that a logic (L, ρ) is expressive if [ ]]b
is a coal-

gebra morphism from h. This, however, requires a B-coalgebra structure on GΦL, which intuitively is an unnecessary strong assumption: for expressivity, it should be
sufficient to provide a B-coalgebra on the image of [ ]]b in GΦL, and a morphism
from h to that coalgebra. This leads to the following definition:

Definition 4.1 A logic (L, ρ) for B-coalgebras is expressive if for every h : X →

BX, the map [[ ]]b
is a coalgebra morphism from h followed by a mono in C.


The following theorem gives simple conditions sufficient for logic expressivity.

Theorem 4.2 In the situation of (5), for any B : C → C, for any logic (L, ρ) for
B-coalgebras, if
L has an initial algebra,
C has a (StrEpi,Mono)-factorization system,
B preserves monos, and
ρ٨ : BG =⇒ GL is pointwise monic, then (L, ρ) is expressive.

Proof. The following diagram in C commutes:


BG F,˛zX
CF 
 Bt[[ ]]h  B GΦ
z

BηX 
 
 
s	ρs
FX	ΦL
J  tL[[ ]]h   J 

BX,¸,
¸¸
GLF,X,
G L,ΦL,

¸¸¸¸¸ tρX
CF BX
¸z 
h	GF B,X,	ta






X	CF
X
tF h

 G F X


 G Φ
t[[ ]]h

Indeed, the lower right part is (9) mapped along G, the upper right part is the naturality of ρ٨, the lower left part is the naturality of ηtF and the upper left part commutes by (8) and (7). The outer shape of this diagram is

[[ ]]b

BX,,


h
h B GΦ˛L
ρs
ΦL
J 
GL,ΦL,
ta

X	[[ ]]b
 G ΦL


(see (6)). Let m ◦ e by the strong epi-mono factorization of [ ]]b . Since B preserves

monos, Bm is a mono:
BX,  Be  B I,˛Bm B G˛Φ

,	,, 
 
 
h	 i
 
z
s
Φ
J 
GL,Φ,
ta

	  , ˛	 
X	e	I	m	GΦ
and a diagonal morphism i : I → BI as above exists since e is strong. This makes
e a coalgebra morphism from h, and m ◦ e satisfies Definition 4.1.	 
The first three conditions of Theorem 4.2 hold in most practical examples, and usually the key condition to check is the pointwise monicity of ρ٨. In Example 3.2, for any Φ ∈ D, the function
٨ : B(2Φ) → (LΦ → 2)

is defined by:
ρ٨ (β)(Т) = tt always
ρ٨ (β)(⟨a⟩φ) = tt ⇐⇒ ∃ (a, y) ∈ β. y(φ)= tt,

where β ∈ B(2Φ) = P(A × 2Φ) and φ ∈ Φ, and it is not always pointwise monic: for example, for Φ = {φ, ψ}, it is straightforward to check that
ρ٨ ({(a, {φ}) , (a, {ψ})})= ρ٨ ({(a, {φ, ψ})}).
Φ	Φ
Indeed, the logic for traces is not expressive for B-coalgebras. Note, however, that the conditions of Theorem 4.2 are not necessary for (L, ρ) to be expressive.
A natural question arises as to what conditions are sufficient for expressive logics to exist for a given B on C. Assuming D, F and G have been chosen, a promising choice is L = FBG, with the canonical
ρ = FBηtF : LF = FBGF =⇒ FB ρ٨ = ηtF BG : BG =⇒ GF BG = GL
and the monad unit ηtF is usually pointwise monic (see Remark 4.6). Unfortu- nately, FBG often fails to have initial algebras. For example, if C = D = Set and F = G = 2−, then even for finitary B, such as B = Pω, the functor FBG does not have initial algebras for cardinality reasons.
In search for a better candidate for L, note that finitary functors on locally finitely presentable categories have initial algebras [3]. Assuming D locally finitely presentable, a general technique to restrict any functor L on D to a finitary Lω that acts “almost as” L is via left Kan extensions: define
Lω = LanI(LI)
where I : PresωD → D is the inclusion functor of the full subcategory of finitely presentable objects. In more elementary terms, to calculate LωΦ, represent Φ as a filtered colimit of a diagram DΦ of finitely presentable objects, map DΦ along L, i.e., form the (filtered) diagram LDΦ, and take its colimit as LωΦ.
L Φ _ _ _γΦ_ _ _ LΦ 

ω,,,,¸¸,¸
,,,¸¸¸lk
¸,,,
Lci ıı ııı

,,,¸¸¸
ıı ı Lc

r~
,, ¸¸¸ıı ıı	k
(10)

l	r~,, ııı¸¸¸ııı	~ 

... 
ıı	k
LΦi
... 
¸
ıı LΦk

,¸	Φj
 , DΦ
,¸	LΦj
 , LDΦ

The unique mediating morphism γΦ extends to a natural transformation γ : Lω =⇒

L, and Lω coincides with L on PresωD. Moreover, Lω is finitary even if L is not [23, Prop. 2.4.3].
We may now define Lω = (FBG)ω with the canonical connections ρ : LωF =⇒
FB and ρ٨ : BG =⇒ GLω defined by:
ρ = FBηtF ◦ γF	ρ٨ = Gγ ◦ ηtF BG.	(11)
As before, it is natural to assume that ηtF is pointwise monic, but Gγ almost never is. However, under certain additional conditions their composition is pointwise monic. To spell out those conditions, one more important notion is needed:
Definition 4.3 [Ada´mek] A locally finitely presentable category is strongly locally ﬁnitely presentable if for every cofiltered limit cone {li : Y → Yi}i∈I, and for any mono f : X → Y with X finitely generated, there exists i ∈ I such that li ◦ f is a mono.
Y,j. .,. 
Y,i ııı ,Y¸k ,
li ıı ııı
ıııı lk

X,˛ƒ	 Y 
(12)

For example, Set and Pos are all strongly locally finitely presentable (and the locally countably presentable ωCpo is strongly so). The category Un of unary algebras is not strongly locally finitely presentable, even though it is locally finitely presentable (see [1]).
We are now ready to formulate sufficient conditions for ρ٨ in (11) to be pointwise monic.
Theorem 4.4 In the situation of (5), for a B on C, with Lω and ρ deﬁned as above, if
C is strongly locally ﬁnitely presentable,
D is locally ﬁnitely presentable,
B is ﬁnitary and preserves monos, and
ηtF is pointwise monic,
then ρ٨ = Gγ ◦ ηtF BG is pointwise monic.
Proof. For an object Φ in D, we shall prove that ρ٨ : BGΦ → GLωΦ is a mono.
Recall from (10) that LωΦ is a part of a cocone
{li : FBGΦi → LωΦ}i∈I
for the diagram FBGDΦ, where DΦ is a filtered diagram of finitely presentable

objects with Φ as the colimit. To show that ρ٨
is a mono it is enough to show that

the source

{Gli ◦ ρ٨

: BGΦ → GF BGΦi}i∈I	(13)

is jointly monic. Further, for any i ∈ I, one has


Gli ◦ ρ٨
tF
BtΦi
BGci ;

indeed, chase the diagram

	ρs

J˜ 	 
	 `\J 

BGΦ

ηCF
GF BG¸Φ¸
tγΦ
G LκΦ


Btci
BCΦ
¸¸¸¸
¸¸¸

tli

tF Btci  ¸¸¸¸
J 	 z J 

BGΦi

CF BCΦi
G F BGΦi


where the left square is the naturality of ηtF , and the triangle commutes by defini- tion of γ in (10). Since ηtF is pointwise monic, to prove the joint monicity of (13) it is enough to show that the source
{BGci : BGΦ → BGΦi}i∈I
is jointly monic.
To this end, consider an object X in C and maps f, g : X → BGΦ such that for each i ∈ I:


We must prove that f = g.
BGci ◦ f = BGci ◦ g. 

Since C is locally finitely presentable, finitely presentable objects generate it and without loss of generality we may assume that X is finitely presentable. Moreover, GΦ is a colimit of a filtered diagram E of finitely presentable objects. Denote the colimiting cocone by
{nj : Yj → GΦ}j∈J .
Since B is finitary, it preserves the colimit, and
{Bnj : BYj → BGΦ}j∈J

is a colimiting cocone of the filtered diagram BE. By finite presentability of X, there exists a j ∈ J and two maps f ', g' : X → BYj such that
f = Bnj ◦ f '	and	g = Bnj ◦ g' .

Since C is locally finitely presentable, strong epis and monos form a factorization system [3] and the map nj : Yj → GΦ factorizes into a strong epi e : Yj → Z followed by a mono m : Z → GΦ. By definition Z is finitely generated.
Recall that Φ is a colimit of a diagram DΦ and denote the colimiting cocone by
{ci : Φi → Φ}i∈I .

G, being a contravariant adjoint, maps the cocone to a limiting cone
{Gci : GΦ → GΦi}i∈I
of the cofiltered diagram GDΦ. Now, by strong local finite presentability of C, there exists an index i ∈ I such that Gci ◦ m is a mono. Since B preserves monos, also BGci ◦ Bm is a mono.
Note that f = Bm ◦ Be ◦ f ' and g = Bm ◦ Be ◦ g'. Moreover, by our assumption on f and g,
BGci ◦ Bm ◦ Be ◦ f ' = BGci ◦ Bm ◦ Be ◦ g'
By monicity of BGci ◦ Bm, one has Be ◦ f ' = Be ◦ g' and finally
f = Bm ◦ Be ◦ f ' = Bm ◦ Be ◦ g' = g. 


Corollary 4.5 In the situation of (5), if C is strongly locally ﬁnitely presentable, D is locally ﬁnitely presentable and ηtF is pointwise monic, then every ﬁnitary functor on C that preserves monos, admits an expressive logic.
Proof. Combine Theorems 4.2 and 4.4. The only non-trivial point to make is that in every locally presentable category, strong epis and monos form a factorization system [3, Prop. 1.61].	 
Remark 4.6 The meaning of the pointwise monicity of ηtF becomes clear when the above result is specialized to adjunctions arising from chosen objects in sym- metric monoidal closed categories, as in (4). An object Ω is an internal cogenerator if for any X, the map ηX : X → (X   Ω)   Ω is a mono. For example, for F = G = Ω− on Set, the pointwise monicity assumption means that the set Ω of logical values must have at least two elements. Corollary 4.5 specializes to:
Corollary 4.7 If a strongly locally ﬁnitely presentable, symmetric monoidal closed category C has an internal cogenerator, then every ﬁnitary functor on C that pre- serves monos, admits an expressive logic.

Polyadic Modalities
Results proved in §4 show how to guarantee an expressive logic for B-coalgebras to exist. However, it might not be clear how to present the syntax and semantics of the logic in concrete situations. Moreover, the development presented so far does not suggest any treatment of (possibly non-expressive) fragments of the canonical logic. For example, it would be useful to know whether every logic according to Definition 3.1 is a fragment of an expressive logic. This section addresses these questions. First, we analyze the structure of the canonical logic Lω and define a logic L+, with semantics essentially the same as that of Lω, but with syntax allowing

for a simpler presentation in concrete examples. The structure of L+
suggests a

general notion of polyadic modality. It is also showed that any logic with finitary

syntax is canonically represented in Lω. These results will considerably simplify the presentation of our main examples in §6.
By definition,
Lω Φ = colim(Ψ,Ψ→Φ)∈I/Φ FBGΨ (see (10)). Replacing the colimit with a coproduct, define
L+Φ=		FBGΨ=  D(Ψ, Φ) · FBGΨ	(14)
(Ψ,Ψ→Φ)∈I/Φ	Ψ
where the coproduct on the right side is indexed over a chosen generating set of finitely presentable objects, and · denotes copower. The evident mediating mor- phism δΦ : L+Φ → LωΦ extends to a natural transformation δ, and is epi. G, being a contravariant adjoint, maps epis to monos, hence the canonical adjoint connection
Gδ ◦ Gγ ◦ ηtF BG : BG =⇒ GL+
is pointwise monic if and only if the corresponding connection (11) for Lω is point- wise monic. Therefore L+ is expressive if and only if Lω is, provided that it is finitary and so admits initial algebras. In concrete cases, L+ is slightly easier to present syn- tactically than Lω. Its structure also suggests a general notion of polyadic modality: intuitively, in an obvious sense, a modality (or indeed any logical connective) of arity n is an operator mapping n-tuples of formulas to formulas. A finitely presentable object Ψ can be seen as an arity object, and a map Ψ → Φ as a tuple indexed by Ψ. This, together with the structure of (14), motivates the following definition:
Definition 5.1 For a finitely presentable object Ψ ∈ D, the object FBGΨ is the
object of B-modalities of arity Ψ.
Examples in §6 will confirm the plausibility of this definition.
We proceed to show that every logic (L, ρ) with finitary syntax can be seen as a fragment of Lω. We begin with a basic notion of logic morphism:
Definition 5.2 For any B on C, a logic (L, ρ) is represented in (L', ρ') by θ : L =⇒
L' if the equation

holds.
ρ = ρ' ◦ θF	(15)

Clearly θ preserves the semantics ρ. Moreover, for any L, and for a logic (L', ρ'), a transformation θ : L =⇒ L' defines a semantics for L by (15). In particular, the semantics of a logic L can be defined by showing how the syntax L is embedded in Lω. The following representation theorem shows that every logic with a finitary syntax can be defined this way.
Theorem 5.3 For any B on C, any logic (L, ρ) with L ﬁnitary is represented in
Lω,FBηtF ◦ γF  .
Proof. First, note that any (L, ρ) (with L not necessarily finitary) is canonically represented in FBG, FBηtF  by ιρ : L =⇒ FBG defined as the transpose of the

adjoint connection ρ٨, or more explicitly by ιρ = ρG ◦ LηFt. Indeed, a straight- forward calculation shows that (15) commutes for θ = ιρ.	If L is finitary, the

representation ιρ yields a transformation ιρ
: L =⇒ Lω
along the bijection

Nat(L, FBG) ∼= Nat(LI, FBGI)= Nat(LI, LωI) ∼= Nat(L, Lω)
where I : PresωD → D is the inclusion functor, the left and the right bijections hold since (by finitarity) L = LanI LI, and the middle equation holds since LωI = FBGI
by definition of Lω. Now, the transformation γ ◦ ιρ : L =⇒ FBG is also mapped to
ρ along the same series of bijections:
γ ◦ ιρ '→ (γ ◦ ιρ )I = γI ◦ ιρ I = ιρ I '→ ιρ
ω	ω	ω	ω	ω


hence, by bijectivity, ιρ = γ ◦ ιρ
and the equation (15)

ρ = ιρF ◦ FBηtF = ιρ F ◦ γF ◦ FBηtF
holds.	 
Together with observations on the structure on Lω made earlier in this section, the above theorem allows one to give more concrete presentations of expressive and non-expressive logics. Examples shown in the following section illustrate this point.

Examples
This section shows how Definitions 4.1 and 5.1 specialize to useful and natural no- tions in concrete settings, and how Theorems 4.2 and 4.4 can be used to find expres- sive logics (and to present their non-expressive fragments) for transition systems. In §6.1, the familiar setting of sets and functions is studied. Schr¨oder’s polyadic coalgebraic modal logic [30,18] is shown to be a special case of the present approach, hence all examples covered there are examples here a well. However, for complete- ness we describe the classical example of finitary Hennessy-Milner logic. In §6.2, the case of nominal sets and equivariant functions is studied, and it is shown how Milner-Parrow-Walker logic [24] for late bisimilarity on systems with name binding, is an expressive fragment of our Lω. Finally, §6.3 illustrates the importance of the technical assumption of strong local presentability in Theorem 4.4, on the example of unary algebras and homomorphisms.

Sets and Finitary Hennessy-Milner Logic
Let C = D = Set, F = G = 2−, and consider any finitary B on C. A finitely presentable set is (isomorphic) to a finite cardinal n ∈ N, a modality of arity n according to Definition 5.1 is a function
λ : B(2n) → 2,

and the syntax L+ can be described by the grammar:
φ ::= [λ](φ1,... , φn)
where n ∈ N and λ : B(2n) → 2. The logic Lω is additionally quotiented by a straightforward equivalence of modalities ensuring that a modality that ignores some of its arguments is equal to a modality of a smaller arity.
Given h : X → BX, the inductive definition (9) of [ ]]h : ΦL+ → 2X translates

to:
[[[λ](φ1,... , φn)]]h = 2h(ρX ([λ]([[φ1]]h,... , [[φn]]h))) =

= 2h(2BηCF
B2([[φ1]]h,...,[[φn]]h)

X  (2	(λ))) =
= λ ◦ B2([[φ1]]h,...,[[φn]]h) ◦ BηtF ◦ h =
= λ ◦ B([[φ1]]h,... , [[φn]]h)b ◦ h =
= w ◦ B ⟨[[φ1]]h,... , [[φn]]h⟩◦ h.
Note that ([[φ1]]h,... , [[φn]]h): n → 2X is a tuple of functions, and ⟨[[φ1]]h,... , [[φn]]h⟩ :
X → 2n is a function obtained by tupling.
The above syntax and semantics of Φ + both correspond exactly to the polyadic
ω
coalgebraic modal logic of [30,18], which is thus a special case of the present ap-
proach. Also the result on the existence of expressive polyadic modal logic in [30] immediately follows from Corollary 4.7. Indeed, Set is cartesian closed and strongly locally finitely presentable, and any set with at least two elements is an internal co- generator. Moreover, all functors on Set preserve monos with nonempty domains, and in [4] it was shown how to modify any functor on Set so that it preserve all monos, without a substantial change in its category of coalgebras.
For a specific application, consider B = Pω(A ×−) for a fixed set A of labels; B- coalgebras are finitely branching labelled transition systems. A B-modality accord- ing to Definition 5.1 is a function w : Pω(A × 2n) → 2 for n ∈ N. Any such function can be presented as an expression built of negations, finite conjunctions, diamond modalities and placeholders, with an interpretation as in Hennessy-Milner logic. For example, the expression ⟨a⟩(−∧ ¬−) ∧¬⟨b⟩− defines a function w : Pω(A × 23) → 2. It is straightforward to see that any modality w can be described with such an ex- pression. Formulas in L+ are built of such expressions, and the canonical connection ρ : L+2− =⇒ 2Pω (A×−) is derived from the interpretation of them, for example:


ρX (⟨a⟩(φ ∧ ¬ψ) ∧ ¬⟨b⟩σ) (β)= tt ⇐⇒
⎧⎨ ∃ (a, x) ∈ β. φ(x)= tt, ψ(x)= ff and
⎩ / ∃ (b, x) ∈ β. σ(x)= tt.


The syntax L+ obviously relates to finitary Hennessy-Milner logic (1). It is easy to see that given an LTS h : X → Pω(A × X), the map [ ]]h defined as in (9) is the usual semantics of that logic. Thus finitary Hennessy-Milner logic is a special case of the present approach, and its expressivity follows from Corollary 4.5.

Polyadic modalities used above are admittedly quite complicated, which makes L+ rather awkward, given that it is little more than finitary Hennessy-Milner logic. One can alleviate this problem by choosing a fragment of L+ and using Theorem 4.2 to show that it is still expressive. For example, consider a logic L defined by the
grammar

φ ::= ⟨a⟩ 
j=1..n
ψj	ψ ::= φ | чφ	(16)

that is, by the functor LΦ= A ×  n∈N (2 × Φ)n on Set. The obvious inclusion of L in L+ determines a connection ρ : L2− =⇒ 2Pω (A×−) as shown in §5; explicitly, the adjoint connection ρ٨ : Уω(A × 2−) =⇒ 2L− is defined by:


ρ٨ (β)(⟨a⟩(ψ1Λ·· ·Λψn)) = tt ⇐⇒ E(a, y) ∈ β.6i = 1..n.
,⎨ ψi = φi ⇒ y(φi)= tt
, ψi = чφi ⇒ y(φi)= ff


By Theorem 4.2, to prove L expressive it is enough to show that ρ٨ is pointwise monic. To this end, for any distinct β, γ ∈ B2Φ one needs to find a ∈ A, n ∈ N, φi ∈ Φ and ψi ∈ {φi, чφi} such that
ρ٨ (β)(⟨a⟩(ψ1 Λ ··· Λ ψn)) /= ρ٨ (γ)(⟨a⟩(ψ1 Λ ··· Λ ψn))
Φ	Φ
Without loss of generality assume β /⊆ γ and fix any (a, x) ∈ β such that (a, x) /∈ γ. Define δ ⊆ 2Φ by:
δ = {y : (a, y) ∈ γ}
Obviously, δ is finite. Pick n = |δ|. For any y ∈ δ we have y /= x, hence one can choose an element φy ∈ Φ such that x(φy) /= y(φy). Define φ ∈ LΦ by:
φ = ⟨a⟩  ψy
y∈δ

where ψi = φi iff x(φy)= tt and ψi = чφi otherwise. It is straightforward to check that
ρ٨ (β)(φ)= tt	and	ρ٨ (γ)(φ)= ff
Φ	Φ
therefore ρ٨ (β) /= ρ٨ (γ) and ρ٨ is pointwise monic.
Φ	Φ	Φ
Nominal Sets and Systems with Name Binding
We begin by recalling the basics of nominal sets. For more information, see e.g. [12]. Throughout this section, fix a countably infinite set U = {a, b, c,.. .} of names. An action of the symmetric group Sym(U ) (i.e., the group of permutations of U) on a set X is a function •X : Sym(U ) × X → X such that for any x ∈ X there is idN •X x = x and, for any π, σ ∈ Sym(U ), that (πσ) •X x = π •X (σ •X x). A set U0 ⊆ U supports an x ∈ X if for all π that fix U0 there is π •X x = x. A tuple (X, •X ), is a nominal set, denoted by X, if every element of X is supported by a finite set. In a nominal set every element x has the smallest supporting set, denoted supp(x), and a#x, read “a is fresh in x”, means a /∈ supp(x). Nom is the

category of nominal sets with equivariant maps, i.e., functions f : X → Y such that
f (π •X x)= π •Y f (x) for all x ∈ X and π ∈ Sym(U ).
The set U is nominal, with the action defined by π •N a = π(a). For any nominal set X, the nominal abstraction set [U]X has the carrier (U × X)/ ∼[N ]X, where (a, x) ∼[N ]X (b, y) if and only if for all c ∈ U such that c#x and c#y there is [a ↔ c] •X x = [b ↔ c] •X y. This construction extends to a functor [U] on Nom.
Nom has colimits and finite limits calculated as in Set. Also the covariant finite powerset functor extends to a functor Уω on Nom, with Sym(U )-action calculated pointwise. Nom is also cartesian closed, and the exponential XY is the set of (not necessarily equivariant) functions from Y to X with an action defined by
(π •XY  f )(y)= π •X (f (π−1 •Y y))
for all π ∈ Sym(U ) and y ∈ Y , restricted to functions that are finitely supported with respect to this action, i.e., those functions for which there exists a finite U0 ⊆U such that for all π that fix U0 there is f (π •Y y)= π •X f (y) for all y ∈ Y .
In the following two particular types of exponentials will be used. First, let 2 be the set {tt, ff} with the trivial action. For any X, a function f : X → 2 is supported by U0 if and only if f (π •X x) = f (x) for each x ∈ X and each π that fixes U0. The set 2X consists of functions satisfying this condition for a finite U0. It is straightforward to check that 2 is an internal cogenerator for the cartesian closed structure of Nom. Note that 2 is not a cogenerator in Nom.
Now consider the nominal set XN for a given set X. It is not difficult to check that a function f : U → X is supported by U0 ⊆U if and only if:
for all a ∈ U, U0 ∪ {a} supports f (a), and
for all a, b ∈U \ U0, (a, f (a)) ∼[N ]X (b, f (b)).
It follows that every function in XN is uniquely determined by a finite partial function f¯ : U →fin X together with an element fˆ ∈ [U]X. Indeed, given these data, the function f : U → X defined by:
,⎨ f¯(a) if a ∈ dom(f¯)

f (a)= 
, y ∈ X s.t. (a, y) ∈ fˆ, otherwise

(here y is uniquely determined) is finitely supported, and every finitely supported function can be obtained this way.
The free nominal set over a set Z is Sym(U ) × Z with the evident Sym(U )- action. A nominal set is finitely presentable in Nom if and only if it is isomorphic to the free nominal set over a finite set, quotiented by a finite set of equations. Nom is locally finitely presentable. A nominal set X is finitely generated if and only if there exists a finite Z ⊆ X that generates X, i.e., such that for all x ∈ X there exist z ∈ Z, π ∈ Sym(U ) such that x = π •X z.
Nom is strongly locally finitely presentable. The proof of this proceeds as follows:

In every ﬁnitely generated nominal set X, every ﬁnite U0 ⊆ U supports only ﬁnitely many elements. To prove this, let a finite Z generate X and show that for a fixed z ∈ Z there are only finitely many elements of the form π •X z supported by U0. To this end, consider any π ∈ Sym(U ) and observe that
if U0 supports π •X z then —→π (supp(z)) = supp(π •X z) ⊆ U0. Moreover, for
any σ ∈ Sym(U ), if π and σ agree on supp(z) then π−1σ fixes supp(z), hence π •X z = σ •X z. Altogether, π •X z /= σ •X z are both supported by U0 only if π and σ are different maps when restricted to supp(z), and if they both map supp(z) to subsets of U0. But there are only finitely many such maps.
For any X, Y ﬁnitely generated, there are only ﬁnitely many equivariant maps from X to Y . To prove this note that for any equivariant f : X → Y , for any x ∈ X there is supp(f (x)) ⊆ supp(x). This, together with (i) applied to Y , means that any fixed x ∈ X can be mapped to only finitely many elements of Y with an equivariant map. Since X is finitely generated, an equivariant map from X to Y is determined by how it acts on a finite subset of X, hence there are only finitely many such maps.
Sym(U ) as a nominal set, i.e., the free nominal set on one generator , is a generator (in the categorical sense of the word) in Nom. Indeed, take any equivariant f, g : X → Y . If f /= g, take any x ∈ X such that f (x) /= g(x) and take the equivariant h : Sym(U ) → X determined by h( ) = x. Then f ◦ h /= g ◦ h.
Nom is strongly locally ﬁnitely presentable. In the situation of (12), consider any f, g : Sym(U ) → X such that f /= g. Since limiting cones are jointly monic, and m is a mono, there is an iƒ,g ∈ I such that cif,g ◦m◦f /= cif,g ◦m◦g. By (ii), there are only finitely many choices of f and g. Since the diagram is cofiltered, take i to be a common bound of all iƒ,g. Then obviously ci ◦ m ◦ f /= ci ◦ m ◦ g for all f /= g. Now take any nominal set Z with two functions h, k : Z → X such that ci ◦ m ◦ h = ci ◦ m ◦ k. By the previous observation, for any map l : Sym(U ) → Z there must be h ◦ l = k ◦ l. But Sym(U ) is a generator by (iii), therefore h = k.
Consider the following functor on Nom:
BX = Уω(U × XN + U × U × X + U × [U]X + X).

This is the functor for late bisimulation on systems with name binding (see [11,10,9,5] for a comparison), i.e., observational equivalence coincides with late bisimilarity. B is finitary on Nom. To apply the framework of polyadic modal logic, choose C = Ð = Nom and F = G = 2−. As we have seen, all assumptions of Theorem 4.4 hold, therefore the canonical finitary logic L+ is expressive for late

bisimilarity. However, modalities used in L+
are quite complicated; we therefore

present a simpler logic L and use Theorem 4.2 to prove its expressivity, as in §6.1. Specifically, we choose
LΦ= U × Σn∈N(U × 2 × Φ)n + U × U × Φ¯ + U × [U]Φ¯ + Φ¯

where Φ¯ is shorthand for Σn∈N(2 × Φ)n. It is obvious how to present this functor
with the grammar:
φ ::= ⟨a⟩(⟨b1⟩ψ1 Λ ··· Λ ⟨bm⟩ψm)
| ⟨a¯b⟩(ψ1 Λ ··· Λ ψm)
| ⟨a¯(b)⟩(ψ1 Λ ··· Λ ψm)
| ⟨τ ⟩(ψ1 Λ ··· Λ ψm) ψ ::= φ | чφ
where a, b, bi ∈U and b binds in the ψi in the third production.
A connection ρ : L2− =⇒ 2B− is determined, at a nominal set X, by its transpose L2X × BX → 2, i.e. an equivariant relation |= ⊆ BX × L2X defined by cases as follows. Here for simplicity negations are ignored, but it is obvious how to extend the definition to the full grammar:

β |= ⟨a⟩(⟨b1⟩φ1 Λ ··· Λ ⟨bm⟩φm) ⇐⇒ Eι1(a, f ) ∈ β.6i = 1..m. φi(f (bi)) = tt
β |= ⟨a¯b⟩(φ1 Λ ··· Λ φm)	⇐⇒ Eι2(a, b, x) ∈ β.6i = 1..m. φi(x)= tt
β |= ⟨a¯(b)⟩(φ1 Λ ··· Λ φm)	⇐⇒ Eι3(a, [(b, x)][N ]X ) ∈ β.6i = 1..m. φi(x)= tt
β |= ⟨τ ⟩(φ1 Λ ··· Λ φm)	⇐⇒ Eι4(x) ∈ β.6i = 1..m. φi(x)= tt

where φi ∈ 2X, f ∈ XN , and the ιi are the coproduct inclusions in BX.
To prove L expressive, by Theorem 4.4, it is enough to show that ρ٨ is pointwise monic. The proof is much the same as in §6.1: for a nominal set Φ, and for any distinct β, γ ∈ B2Φ, without lost of generality assume β ¢ γ and pick any v ∈ β \ γ. Assume that v = ι1(a, f ) with f ∈ (2Φ)N = 2Φ×N . Define δ ⊆ 2Φ×N by:
δ = { g | ι1(a, g) ∈ γ } .
Obviously δ is finite. For any g ∈ δ we have g /= f , hence for some ag ∈ U and
φg ∈ Φ one has f (ag)(φg) /= g(ag)(φg). Define φ ∈ LΦ by:
φ = ⟨a⟩(  ⟨ag⟩ψg)
g∈δ

where ψg = φg if f (ag)(φg)= tt and ψg = чφg otherwise. It is straightforward to check that ρ٨ (β)(φ)= tt and ρ٨ (γ)(ψ)= ff, therefore ρ٨ (β) /= ρ٨ (γ).
Φ	Φ	Φ	Φ
On the other hand, assume v = ι3(a, [(b, x)][N ]2Φ ) and define δ ⊆ [U ]2Φ by:
δ = { g | ι3(a, g) ∈ γ } .
Again δ is finite. For any g ∈ δ we have g /= [(b, x)][N ]2Φ , hence one can choose some
c ∈ U, xg /= yg ∈ 2Φ such that for all g ∈ δ (b, x) ∼[N ]2Φ (c, xg) and (c, yg) ∈ g.

Further, one can choose a φg ∈ Φ such that xg(φg) /= yg(φg). Define φ ∈ LΦ by:

φ = ⟨a¯(c)⟩  ψg
g∈δ

where ψg = φg if xg(φg) = tt and ψg = чφg otherwise. It is straightforward to check that ρ٨ (β)(φ)= tt and ρ٨ (γ)(ψ)= ff, therefore ρ٨ (β) /= ρ٨ (γ). The other
Φ	Φ	Φ	Φ
two cases of v are easier and altogether show that ρ٨ is monic. Expressivity of L
follows from Theorem 4.2.
In fact, the logic L can be easily translated to the logic LM of [24], where it is proved to be expressive for late bisimilarity. The only nontrivial bit of the translation is

⟨a⟩(⟨b1⟩ψ1 Λ ··· Λ ⟨bm⟩ψm)	'→	⟨a(c)⟩L([c = b1]ψ1 Λ ··· Λ [c = bm]ψm)

where c is any variable fresh in ψ1,... , ψm. The image of the translation is a proper subset of of LM (for example, match operators can occur only directly under late input modalities), but by Theorem 4.2 it is an expressive subset. Indeed, a close inspection of the proof of Theorem 1 in [24] shows that only formulas of this form are needed for the expressivity of LM.

Unary Algebras and Distant Transition Systems
This example shows that the assumption of strong local presentability cannot be dropped from Theorem 4.4.
A unary algebra X is a set, also denoted X and called the carrier, with a function sX : X → X, called the successor function of the algebra. A homomorphism from X to Y is a function f between the respective carriers such that f ◦ sX = sY ◦ f . The category of unary algebras and their homomorphisms is denoted Un.
For a unary algebra X, and a subset Y ⊆ X, the subalgebra of X generated by Y is denoted and defined by Y = { sn (y) | y ∈ Y, n ∈ N } (we omit X in this notation as it will always be clear from the context.) A unary algebra X is finitely presentable if and only if is finitely generated, i.e., if there is a finite subset Y ⊆ X such that Y = X. Un is locally finitely presentable, but not strongly locally finitely presentable (see [1]).
Un is cartesian closed, with Y X an algebra of homomorphisms f : N × X → Y (here N is the unary algebra of natural numbers and incrementation), with the successor defined by sXY (f )(n, x) = f (n + 1, x). However, this closed symmetric monoidal structure is not convenient for our purposes; in particular, the algebra 2 = 1 + 1, an obvious candidate for the algebra of logical values, is not an internal cogenerator for this structure. We therefore choose another contravariant adjunction on Un, not based on any closed symmetric monoidal structure. Define P : Un →



Unop by:

PX = УX,
sPX(Φ) = { x ∈ X | sX(x) ∈ Φ } for Φ ⊆ X,
←—

Pf = f	for f : X → Y .
To check that Pf is a homomorphism, calculate for f : X → Y ,Φ ⊆ Y :
←—
sPX(Pf (Φ)) = sPX( f (Φ)) = { x ∈ X | f (sX(x)) ∈ Φ } =
←—
= { x ∈ X | sУ (f (x)) ∈ Φ } = f { y ∈ Y | sУ (y) ∈ Φ } = Pf (sPУ (Φ)).
P is a contravariant self-adjoint. Indeed, for any homomorphism f : X → PY , define f b : Y → PX by:
f b(y)= { x ∈ Y | y ∈ f (x) } .
To check that f b is a homomorphism, calculate:
f b(sУ (y)) = { x ∈ X | sУ (y) ∈ f (x) } = { x ∈ X | y ∈ sPУ (f (x)) } =
= { x ∈ X | y ∈ f (sX(x)) } = sPX { x ∈ X | y ∈ f (x) } = sPX(f b(y)).

The bijectivity of the construction f '→ f b follows from its bijectivity on sets. Maps in Un are monos if and only if they are injective on carriers, and pointwise monicity of the unit ηPP follows from its pointwise monicity on sets.
Let Уω : Un → Un be the “finitely covered powerset” functor, mapping an
algebra to the set of all subsets of finitely generated subalgebras:
УωX =  Z ⊆ X  Z ⊆ Y for some finite Y ⊆ X } sPω X(Y ) = { sX(y) | y ∈ Y }
—→
Уωf = f

The above is well defined since for any f : X → X' and Z ⊆ Y ⊆ X there is
—→  	—→

Уωf (Z) ⊆
f (Y )= f (Y ),

hence Уωf (Z) ∈ УωX'.	To check that Уωf is a homomorphism, calculate for
f : X → Z, Y ∈ УωX:
—→
Уωf (sPω X(Y )) = f { sX(y) | y ∈ Y } = { s7(f (y)) | y ∈ Y } = sPω 7 (Уωf (Y )).
To check that Уω is finitary on Un, consider any f : Y → УωX with Y finitely generated. For each y ∈ Y , let Gy ⊆ X be a finite set such that f (y) ⊆ Gy, and take G be the (finite) union of all Gy’s taken over a set of y’s generating Y . Let Z

be the subalgebra of X generated by G. Then for each y ∈ Y , f (y) ∈ УωZ and f
factorizes through the inclusion УωZ → УωX.
We will consider coalgebras h : X → BX = Уω(A × X) for a fixed unary algebra A of labels. Such a coalgebra can be seen a labelled transition system (X, A, —→) defined on the carriers of X and A, together with successor functions sX : X → X and sA : A → A such that:

6x, y ∈ X, a ∈ A. x —a→ y =⇒ sX
sA(a)
(x) —→ sX
(y),

6x, y ∈ X, a ∈ A. sX(x) —a→ y =⇒ Ez ∈ X, b ∈ A. y = sX(z),a = sA(b),x —→b	z
6x ∈ X. Efinite A' ⊆ A, X' ⊆ X. (6y ∈ X, a ∈ A. x —a→ y =⇒

'	'	'	'	n	'
n	'	a'	'

En ∈ N,a ∈ A ,y ∈ Y
. a = sA(a ),y = sX(y ),x —→ y ).

These transition systems are introduced here to show the technical importance of strong local presentability assumption, and are not expected to have any practical applications. However, to get some intuition, one might see the elements of X and A as processes and actions observed from some distance, with the action of sX and sA corresponding to taking a “step back”, which can make some processes or actions appear identical (if, for example, sA(a) = sA(b) for a /= b). This intuition explains conditions (i) and (ii) above, and condition (iii) is analogous to the finite branching condition of ordinary LTSs, with the additional possibility of a process moving “away” by a nondeterministically chosen distance with each action.
Note that B is finitary. For a finitely generated algebra Ψ, a B-modality of arity Ψ according to Definition 5.1 is a predicate λ ⊆ BPΨ, and the syntax L+ can be
described by the grammar:
φ ::= [λ](φ1,... , φn)
where λ is of arity Ψ, n is the number of generators of Ψ, and for φi ∈ Φ, the tuple (φ1,... , φn) : n → Φ represents its unique extension (φ1,... , φn) : Ψ → Φ, i.e., a tuple of arity Ψ. Moreover,
sL+ ([λ](φ1,... , φn)) = [sPBPΨ(λ)](φ1,... , φn).
As in §6.1, Lω is additionally quotiented by a straightforward equivalence of modalities. Given a coalgebra h : X → BX, the inductive definition (9) of [[ ]]h : ΦL+ → PX translates to:
x ∈ [[[λ](φ1,... , φn)]]h ⇐⇒ x ∈ Ph(ρX ([λ]([[φ1]]h,... , [[φn]]h))) ⇐⇒

⇐⇒  h(x) ∈ PBηPP(PBP([[φ1]]h,... , [[φn]]h)(λ)) ⇐⇒
⇐⇒  BP([[φ1]]h,... , [[φn]]h)(BηPP(h(x))) ∈ λ  ⇐⇒
b
⇐⇒ B([[φ1]]h,... , [[φn]]h) (h(x)) ∈ λ ⇐⇒
⇐⇒ βh ∈ λ
(17)

where βh ∈ BPΨ is defined by:
βh =  a,  sk (gi)  k ∈ N,y ∈ sk (φi) ,  (a, y) ∈ h(x) ,

where gi ∈ Ψ is the i’th generator of Ψ, i.e., (φ1,... , φn)(gi)= φi.
It turns out that all these complicated modalities do not ensure the expressivity of L+. For a counterexample, consider the following algebra A of labels:

...  b3 

 b2 

 b1 

 b0 
 a ,  s

(the action of sA is indicated with dotted arrows), and the coalgebra h : X → Уω(A × X) described by the graph:


y0 ¸¸
¸¸¸¸
 y1 
 y2 
 . . . 

c	¸c¸¸	c
···

	b1	
¸ b0
J  a
¸¸¸z	a
z	a

..._.
 x− 1	c
 x0 _.
 x1 _.
 x2 _.
 . . . 
  ˛xω 

,,	 ¸,	¸,	,,

c		c	··· 
                  



z0   
 z1 
 z2 
 . . . 

where transitions are indicated with solid arrows, and the transitions of y1, y2,... and z1, z2,.. ., determined by those of y0 and z0 by condition (i) and (ii) above, are omitted for clarity. Note that neither A nor X are finitely generated.
No coalgebra morphism from h identifies y0 and z0. To see this, note that no coalgebra morphism identifies xω with xn for any n ∈ N (this is easily proved by induction over n). Since z0 can do a c-labelled step to xω and y0 cannot, the two

processes are not behaviourally equivalent. However, no formula from L+
distin-

guishes them. The proof of this is similar to the classical proof of the inexpressivity of finitary HML with respect to infinitely branching LTSs, and it relies on the fact that every formula in φ ∈ ΦL+ is x-continuous, meaning that for some nφ ∈ N, for all m > nφ, xm ∈ [[φ]]h ⇐⇒ xω ∈ [[φ]]h. Indeed, is is straightforward to show that:
If φ is x-continuous than so is s(φ), using the fact that []]h is a homomorphism, and it is enough to take ns(φ) = nφ.
A set Ψ of formulas finitely generated by a set of x-continuous formulas is x- continuous; here take nΨ = max(nφ), with φ ranging over the set of generators.
Every formula is x-continuous. This is proved by induction using (17): for
φ = [λ](φ1,... , φn) with λ of arity Ψ, choose nφ = nΨ + 1 and show that

h xnφ
= βh.

For every formula φ, y0 ∈ [[φ]]h ⇐⇒ z0 ∈ [[φ]]h. This follows from (17), since
by (iii) one has βh = βh .
This means that L+ is not expressive for B-coalgebras, hence neither is Lω. This

shows that the assumption of strong local presentability cannot be dropped from Theorem 4.4.

References
J. Ad´amek. On final coalgebras of continuous functors. Theoretical Computer Science, 294:3–29, 2003.
J. Ad´amek, H. Herrlich, and G. E. Strecker. Abstract and Concrete Categories. Wiley-Interscience, 1990.
J. Ad´amek and J. Rosicky´. Locally Presentable and Accessible Categories. Cambridge University Press, 1994.
M. Barr. Terminal coalgebras in well-founded set theory. Theoretical Computer Science, 114:299–315, 1993.
M.  Bonsangue  and  A.  Kurz.	Pi-calculus  in  logical  form.	Draft available  from
http://www.cs.le.ac.uk/people/akurz/works.html.
M. Bonsangue and A. Kurz. Duality for logics of transition systems. In Proc. FOSSACS’05, volume 3441 of LNCS, pages 455–469, 2005.
M. Bonsangue and A. Kurz. Presenting functors by operations and equations. In Proc. FOSSACS’06, volume 3921 of LNCS, pages 172–186, 2006.
M. Dam. Proof systems for pi-calculus logics. In Logic for Concurrency and Synchronisation, R. de Queiroz (ed.), Trends in Logic, Studia Logica Library, pages 145–212. Kluwer, 2003.
M. Fiore and S. Staton. Comparing operational models of name-passing process calculi. Information and Computation, 204:524–560, 2006.
M. Fiore and S. Staton. A congruence rule format for name-passing process calculi from mathematical structural operational semantics. In Proc. LICS’06, pages 49–58. IEEE Computer Society Press, 2006.
M. P. Fiore and D. Turi. Semantics of name and value passing. In Proc. LICS’01, pages 93–104. IEEE Computer Society Press, 2001.
M. J. Gabbay and A. M. Pitts. A new approach to abstract syntax with variable binding. Formal Aspects of Computing, 13:341–363, 2001.
R. J. van Glabbeek. The linear time – branching time spectrum I. In J. A. Bergstra, A. Ponse, and
S. Smolka, editors, Handbook of Process Algebra. Elsevier, 1999.
M. Hennessy and R. Milner. Algebraic laws for nondeterminism and concurrency. Journal of the ACM, 32:137–161, 1985.
B. Jacobs. Towards a duality result in the modal logic for coalgebras. In Proc. CMCS 2000, volume 33 of ENTCS, pages 160–195. Elsevier, 2000.
B. Jacobs and J. J. M. M. Rutten. A tutorial on (co)algebras and (co)induction. Bulletin of the EATCS, 62, 1996.
B. Jonsson, W. Yi, and K. G. Larsen. Probabilistic extensions of process algebras. In J. A. Bergstra,
A. Ponse, and S. Smolka, editors, Handbook of Process Algebra, pages 685–710. Elsevier, 2002.
B. Klin. The least fibred lifting and the expressivity of coalgebraic modal logic. In Proc. CALCO 2005, volume 3629 of LNCS, pages 247–262, 2005.
A. Kurz. Specifying coalgebras with modal logic. Theoretical Computer Science, 260:119–138, 2001.
A. Kurz. Coalgebras and their logics. ACM SIGACT News, 37, 2006.
A. Kurz and J. Rosicky´. Strongly complete logics for coalgebras. To appear. Draft available from
http://www.cs.le.ac.uk/people/akurz/.
S. Mac Lane. Categories for the Working Mathematician. Springer, second edition, 1998.
M. Makkai and R. Par´e. Accessible Categories: The Foundations of Categorical Model Theory, volume 104 of Contemporary Mathematics. American Mathematical Society, 1989.
R. Milner, J. Parrow, and D. Walker. Modal logics for mobile processes. Theoretical Computer Science, 114(1):149–171, 1993.

L. Moss. Coalgebraic logic. Annals of Pure and Applied Logic, 96:177–317, 1999.
D. Pattinson. Semantical principles in the modal logic of coalgebras. In Proc. STACS 2001, volume 2010 of LNCS. Springer, 2001.
D. Pavlovic, M. Mislove, and J. B. Worrell. Testing semantics: connecting processes and process logics. In Proc. AMAST’05, volume 4019 of LNCS, pages 308–322. Springer, 2005.
M. R¨oßiger. Coalgebras and modal logic. In Proc. CMCS 2000, volume 33 of ENTCS. Elsevier, 2000.
J. J. M. M. Rutten. Universal coalgebra: a theory of systems. Theoretical Computer Science, 249:3–80, 2000.
L. Schr¨oder. Expressivity of coalgebraic modal logic: the limits and beyond. In Proc. FOSSACS’05, volume 3441 of LNCS, pages 470–484, 2005.
