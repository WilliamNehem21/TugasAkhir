

Electronic Notes in Theoretical Computer Science 203 (2008) 3–17
www.elsevier.com/locate/entcs

G-Reactive Systems as Coalgebras
Filippo Bonchi, Ugo Montanari 1
Department of Computer Science University of Pisa

Abstract
The semantics of process calculi has traditionally been specified by labelled transition systems (LTSs), but with the development of name calculi it turned out that definitions employing reduction semantics are sometimes more natural. Reactive Systems `a la Leifer and Milner allow to derive from a reduction semantics definition an LTS equipped with a bisimilarity relation which is a congruence. This theory has been extended to G-Reactive Systems by Sassone and Sobocinki in order to properly handle structural equivalence.
Universal Coalgebra provides a categorical framework where bisimilarity can be characterized as final se- mantics, i.e., each LTS can be mapped to a minimal realization identifying bisimilar states. Moreover, it is often possible to lift coalgebras to an algebraic setting (yielding bialgebras by Turi and Plotkin or, slightly more generally, structured coalgebras by Corradini, Heckel and Montanari) with the property that bisimilarity is compositional with respect to the lifted structure. The existence of minimal realizations is
of theoretical interest, but it is even more of practical interest whenever LTSs are employed for finite state verification.
In this paper we show that for every G-Reactive System we can build a coalgebra. Furthermore, if bisimi- larity is compositional in the Reactive System, then we can lift this coalgebra to a structured coalgebra.
Keywords: Process calculus, labelled transition system, reactive systems, G-reactve systems, universal coalgebra


Introduction
The operational semantics of process calculi is usually given in terms of transition systems labeled with actions, which, when visible, represent both observations and interactions with the external world. The abstract semantics is given in terms of behavioral equivalences, which depend on the action labels and on the amount of branching structure considered. Behavioral equivalences are often congruences with respect to the operations of the language, and this property, which depends on how actions are combined and transformed by the operations, expresses the compositionality of the abstract semantics.
A simpler approach, inspired by classical formalisms like λ-calculus, Petri nets, term and graph rewriting, and pioneered by the Chemical Abstract Machine [4],

1 Research partially supported by the IST 2004-16004 SEnSOria, and the MIUR PRIN 2005015824 ART.

1571-0661 © 2008 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2008.10.040

defines operational semantics by means of structural axioms and reduction rules. Process calculi representing complex systems, in particular those able to generate and communicate names, are often defined in this way, since structural axioms give a clear idea of the intended structure of the states while reaction rules, which are often non conditional, give a direct account of the possible steps. Transitions caused by reaction rules, however, are not labeled, since they represent evolutions of the system without interactions with the external world. Thus reduction semantics in itself is neither abstract nor compositional.
To enhance the expressiveness of reduction semantics, Leifer and Milner pro- posed in [14] the theory of Reactive Systems: a systematic method for deriving a labeled transition system from reduction rules. The main idea is the following: a process p can do a move with label C[−] and become p' iff C[p] ~ p'. Roughly a Reactive System is a syntactical category equipped with a set of rewriting rules. In the category, arrows represents terms and contexts while arrows composition mod- els the insertion of terms into contexts. Rewriting rules are pairs of terms, and the reduction relation ~ is defined by closing the rules under contexts composition.
Leifer and Milner introduced also the categorical notions of relative pushout (RPO) and idem relative pushout (IPO) in order to specify a/the minimal context that allows the state to react with a given rule. This construction leads to labelled transition systems (LTS) that use only contexts generated by IPOs, as labels. Bisim- ilarity, as well as trace and failure equivalence, on this LTS is a congruence whenever the syntactical category underlying the Reactive Systems has RPOs.
Sassone and Sobocin´ski have pointed out that usually syntactical categories quo- tiented w.r.t. structural axioms have not RPOs (Example 2.2.2 in [19]). Moreover considering terms up to structural equivalence usually makes to derive wrong la- beled transition system (Example 2.2.1 in [19]). Thus they extend the theory to G- Reactive Systems that are standard Reactive Systems, but defined on G-categories, i.e., categories where arrows are terms not quotiented w.r.t. structural axioms, and between structurally equivalent arrows there are 2-cells, that represent proofs of structural equivalence.
The concepts of RPO and IPO, previously defined by Leifer and Milner, corre- sponds in G-category to groupoidal relative pushout (GRPO) and to groupoidal idem pushout (GIPO). Instead of generating the LTS by IPOs, Sassone and Sobocin´ski use GIPOs and prove that bisimilarity is a congruence whenever the base G-category has GRPOs. In [18], the same authors have shown that the theory of G-Reactive Systems exactly subsumes Borrowed Contexts Rewriting [10].
The aim of this paper is to recast G-Reactive Systems as structured coalgebras. The use of coalgebras for the specification of dynamical systems with a hidden state space is receiving more and more attention in the last years, as a valid alternative to algebraic methods based on observational equivalences [15]. Given an endofunctor F on a category C, a coalgebra is an arrow f : X → F(X) of C and a coalgebra morphism from f to f ' is an arrow h : X → X' of C with h ; f ' = f ; F(h). Under certain conditions on C and F, a category of coalgebras admits a final object, which can be considered informally as the minimal realization of the union of all

the coalgebras in the category.
Ordinary labeled transition systems (with finite or countable branching) can be represented as coalgebras for a suitable functor on Set. Furthermore, the unique morphism to the final coalgebra induces an equivalence which turns out to be exactly bisimilarity. Thus a first (rather straightforward) result of this paper is to show that the labeled transition systems derived from Reactive Systems can be considered as coalgebras and that their bisimilarity can be characterizes as final semantics.
However, this representation forgets about the algebraic structure of Reactive Systems, i.e., the possibility of contexualizing a term. As a consequence, the prop- erty that bisimilarity is a congruence, which is essential for making abstract seman- tics compositional, is not reflected in the structure of the model.
The problem of integrating coalgebras and algebras obtaining a model equipped with both structures has been tackled in [20], and an alternative but equivalent ap- proach based on structured coalgebras is presented in [7,8]. Here, the endofunctor de- termining the coalgebraic structure is lifted from Set to the category of Γ-algebras, for some algebraic theory Γ. Morphisms between coalgebras in this category are both Γ-homomorphisms and coalgebra morphisms, and thus the unique morphism to the final coalgebra, which always exists, induces a (coarsest) bisimulation con- gruence on any coalgebra.
It turns out that the conditions that guarantee the compositionality of bisimi- larity in the theory of G-Reactive Systems (i.e., the existence of GIPOs) imply the existence of a structured coalgebras equivalent to the distilled LTS. Thus a second result of the paper is to provide a different understanding of why bisimilarity is a congruence in the derived LTS. Namely the derived transition system is functorial, i.e., it preserves arrows composition. Here the decomposition property of GIP O’s is pivotal and it remembers us the decomposition property of tile systems [11] that guarantees compositionality of tile bisimilarity.
In [6], we have provided a coalgebraic characterization of standard Reactive Systems `a la Leifer and Milner. Thus the present paper have to be understood as an extension of [6] to G-Reactive Systems. We will show that the extension is straightforward: instead of using the decomposition property of IPOs, we use the decomposition property of GIPOs.
The paper is structured as follow. In Section 2, we introduce some basic notions on 2-categories and G-categories that are fundamental in order to introduce G- Reactive Systems in Section 3. In Section 4 we introduce coalgebras and structured coalgebra. Section 5 defines a colagebra for the LTS derived from the Reactive Sys- tem and Section 6 proves that, if the base category has GRPOs, then the coalgebra previously defined is a structured coalgebra, i.e., bisimilarity is a congruence.

Basic facts on 2-categories
In this section we introduce the basic concepts of 2-categories and G-categories. This will be fundamental in order to introduce the theory of G-Reactive Systems in the next section. For a more detailed introduction on the topic, we refer the reader

to [13].
In the following we use C[X, Y ] to denote the homset X, Y , i.e., the collection of arrows of C from X to Y . Given two arrows f, g ∈ C[X, Y ], α : f ⇒ g is called a 2-cells with source f and target g.
A 2-category is a category where every homset is the class of objects of some category C[X, Y ] and whose composition functions C[X, Y ] × C[Y, Z] → C[X, Z] are functors associative and with identity. Explicitly, a 2-category is a category enriched with 2-cells, such that:
For every arrow f ∈ C[X, Y ] there is an identity 2-cell 1f : f ⇒ f .
For every pair of 2-cells α : f ⇒ g and β : g ⇒ h is defined α • β : f ⇒ h. Moreover • is associative and with identity.
For every pair of 2-cells α : f ⇒ f ' and β : g ⇒ g' such that f, f ' ∈ C[X, Y ] and g, g' ∈ C[Y, Z] is defined α ◦ β : f ; g ⇒ f '; g'. Moreover ◦ is associative and has as identity 1idX .
For every f : X → Y and g : Y → Z we have that 1f ◦ 1g = 1f;g.
For every f, f ',f '' ∈ C[X, Y ], g, g', g'' ∈ C[Y, Z], α : f ⇒ f ', α' : f ' ⇒ f '',
β : g ⇒ g' and β' : g' ⇒ g'', we have that (α • α') ◦ (β • β')= (α ◦ β) • (α' ◦ α).
The first two points just say that every homset is a category, i.e., there exists the identity arrows (that, in this case, are 2-cells) and there is a composition operation between arrows that is associative and with identity. This operation is called vertical composition and denoted by •.

f	f	f
zz	α cz z z	zz

X	1f
Y¸,X  g
Y¸,X
α•β
Y¸,

 cz
f	h
 cz
h

The last three points just correspond to say that the composition functions are functors. Here we denote by ; the composition between arrows (i.e., objects of the homsets) and by ◦ the horizontal composition of 2-cells.


f
z
X	α Y¸
g
zz
β  ¸,X
f ;g
zz
α β ¸,

 cz	 cz
 cz

f '	g'
' '
f ;g

The last point is called middle four interchange law. It states that in 2-categories the order of composition of 2-cells is not important. Indeed it can be shown that in any possible diagram, all the possible different ways to combine together vertical and horizontal composition, yield the same composite 2-cell. This primitive operation is called pasting.


f	g

α	β
X	f '  Y¸ ,g'  Z¸ ,

'
cα z
f ''
'
cz
g''

The canonical example of 2-category is Cat the category of categories, functors and natural transformations [12].
A G-Category is a 2-category where all the 2-cells are isomorphisms.
The Theory of G-Reactive Systems
Reactive System `a la Leifer and Milner [14] are defined on a (Lawvere like) cat- egory C that represents the syntax of some formalism. Arrows of C are terms and contexts, while objects are types. More precisely, every arrows represents a class of structurally equivalent terms (or contexts), i.e., all terms are considered up to structural equivalence (≡). The theory allows to derive from reduction rules a labeled transition system, and if C has a special colimit, called relative pushout (RPO), then bisimilarity is a congruence. Sassone and Sobocin´ski have shown that quotienting the syntax up to structural equivalence usually brings to a category where there are not RPOs (Example 2.2.2 in [19]). Moreover considering terms up to structural equivalence usually makes to derive wrong labeled transition system (Example 2.2.1 in [19]).
For these reasons Sassone and Sobocin´ski introduced G-Reactive Systems [17] that are Reactive Systems `a la Leifer and Milner but defined on a G-category. Here, every arrows is a single term (not up to ≡) and between two arrows representing structurally equivalent terms, there is a 2-cells that represents a proof of equivalence of the two terms.
As an example, suppose to have a set of constants N and a binary operator ⊗ that is associative and commutative. Let C be the Lawvere category where the operator is just associative. Arrows of C[0, 1] are strings on N . Thus the string a ⊗ a ⊗ b ≡ a ⊗ b ⊗ a, but they are two different arrows in the category C. However we can construct a G-category, where the 2-cells are permutations of constants on
N . For example there exist the 2-cells α, β : a ⊗ a ⊗ b ⇒ a ⊗ b ⊗ a as depicted below.


a	a
,,ss,ss
b
sss

z	sss,,, sss	z 

0
¸1 ,
0  	ss β
,ss,s,s,  
¸1 ,

 ss ts s ,tza 
a	b
The theory is centered on the concepts of term, context and reaction rules: contexts are arrows of a G-category, terms are arrows having as domain 0 (a special object that denotes no holes), and reaction rules are pairs of terms.
Definition 3.1 (G-Reactive System) A G-Reactive System R consists of:
a G-category C;
a distinguished object 0 ∈ |C|;


 ¸I4,,,, ¸

C[−] 
   
,,d
,,

p	q	I2 	α	 zI3 

,¸¸¸¸
¸¸¸¸
 ¸,
  

¸ 
0
(i)	(ii)
Fig. 1. (i) Reaction; (ii)Redex Square

a collection D of arrows of C called reactive contexts; this is closed under 2-cells and reflect composition;
a set of pairs R ⊆   I∈|C| C[0,I] × C[0,I] of reaction rules.
The reactive contexts are those in which a reaction can occur. By composition- reflecting we mean that d; d' ∈ D implies d, d' ∈ D, while the closure property means that given d ∈ D and α : d ⇒ d' then d' ∈ D. The latter corresponds to the natural requirement that the class of reactive contexts have to be closed under structural equivalence.
Note that the rules have to be ground, i.e., left-hand and right-hand sides have to be terms without holes and, moreover, with the same codomain.
From reaction rules one generates the reaction relation by closing them under all reactive contexts. Formally the reaction relation is defined by taking p ~ q if there is ⟨l, r⟩ ∈ R and d ∈ D such that there exist α : p ⇒ l; d and β : q ⇒ r; d. This is depicted in Fig. 1(i).
Thus the behaviour of a Reactive System is expressed as an unlabelled transition system. On the other hand many useful behavioural equivalences are only defined for LTSs. In order to obtain an LTS, we can plug a term p into some context C[−]
C[−]
and observe if a reaction occurs. In this case we have that p → . Categorically
speaking this means that there exists α : p; C[−] ⇒ l; d for some rule ⟨l, r⟩ ∈ R and some reactive context d. This situation is formally depicted by diagram (ii) in Figure 1: a commuting diagram like this is called a redex square.
Definition 3.2 (context  transition  system) The context transition system
(CTS for short) is defined as follows:
states: arrows p :0 → I in C, for arbitrary I;
C[−]
transitions: p  →  q iff C[p] ~ q.
Note that this labelled transition system is often infinite-branching since all contexts that allow reactions may occur as labels. Another problem of CTS is that it has redundant transitions. For example, consider the term a.0 of CCS. The observer can put this term into the context a.0 | − and observe a reaction. This corresponds

to the transition a.0
0|−
→	0|0. However we also have a.0
p|a.0|−
→	p | 0 | 0 as a 

transition, yet p does not contribute to the reaction. Hence we need a notion of



 ¸I4,,,, ¸
 ¸I4,,,,,, ¸
 ¸I6,,,,,, ¸
 ¸I4,,,

c 
 
,,d
,
c 
  ,,
,
  ,,
' 
  ,,
, '
  ,,
'
 ,,, ˛g ,

,
I	α	zI I
,	  ,
γ I ¸δ , I	I
,	  ,
φ I ¸ψ, I
 , ,τ ,
I	I

2 ,,, ¸
 ¸3, 2 ,,, ¸e
5	f ¸3, 2	e	5	f
3	6	h	5

,,,
,,, β	 z 

a  ,,
I1
  b
a  ,,
I1
  b

(i)	(ii)	(iii)	(iv)
Fig. 2. RPO

“minimal context that allows a reaction”. Leifer and Milner define idem pushouts (IPOs) to capture this notion. Here we introduce the corresponding G-categorical notion as defined by Sassone and Sobocin´ski.
Definition 3.3 (GRPO) Let the diagrams in Figure 2 be in some G-category C. Any tuple ⟨I5, e, f, g, β, γ, δ⟩ as illustrated in diagram (ii) such that (1a ◦ γ) • (β ◦ 1g) • (1b ◦ δ) = α is called a candidate for (i). In other words, the 2-cells β, γ, δ paste together to give α. A groupoidal relative pushout (GRPO) is the smallest such candidate. More formally, it satisfies the universal property that given any other candidate ⟨I6, e' : I2 → I6,f ' : I3 → I6, g' : I6 → I4, β' : a; e' ⇒ b; f ', γ' : c ⇒ e'; g', δ' : f '; g ⇒ d⟩, there exists a mediating morphism, i.e., a tuple ⟨h : I5 → I6,φ : e' ⇒ e; h, ψ : f ; h ⇒ f ',τ : h'; g' ⇒ g⟩ illustrated in diagram (iii) and (iv) such that:
γ = γ' • (φ ◦ 1g' ) • (1e ◦ τ );
δ = (idf ◦ τ −1) • (ψ ◦ idg' ) • δ';
β' = (ida ◦ φ) • (β ◦ 1h) • (idb ◦ ψ).
Moreover it must be essentially unique, i.e., for any other mediating morphism
⟨h', φ', ψ'τ '⟩ there must exist a unique 2-cell ϵ : h ⇒ h' which makes the two mediating morphisms compatible, i.e.:
φ' = φ • (ide ◦ ϵ);
ψ' = (idf ◦ ϵ−1) • ψ;
τ = (ϵ ◦ idg' ) • τ '.

Definition 3.4 (GIPO) A commuting square such as diagram (i) of Figure 2 is called idem pushout (GIPO) if ⟨I4, c, d, idI4 , α, 1c, 1d⟩ is its GRPO.
We say that a Reactive System has GRPOs if, in the underlying category, for each α : a; c ⇒ b; d there exists a GRPO, while we say that it has redex GRPOs, if for each redex square there exists a GRPO.
Definition 3.5 (GIPO LTS) The GIPO LTS (GLTS for short) is defined as fol- lows:
states: p :0 → I in C, for arbitrary I;

C[−]
transitions: p →G r; d iff there exist d ∈ D, ⟨l, r⟩∈ R and α : p; C[−] ⇒ l; d such
that diagram (ii) in Figure 1 is a GIPO.
In other words, if inserting p into the context C[−] matches l; d, and C[−] is the “smallest” such context (according to the GIPO condition), then p transforms to r; d with label C[−], where r is the reduct of l. The GLTS is called concrete LTS in [17], since they introduce also an abstract version, where states and labels are quotiented up to ≡. In this paper we provide a coalgebraic characterization only of the concrete LTS, since the abstract version is completely analogous.
Bisimilarity on GLTS is referred to as concrete bisimilarity (denoted by ∼G). Sassone and Sobocin´ski have shown that if the Reactive System has redex GRPOs, then it is a congruence (i.e., it is preserved under all contexts).
Proposition 3.6 Let R be a Reactive System having redex GRPOs, then ∼G is a congruence.

Coalgebras and Structured Coalgebras
In this section we first introduce the standard way to represent labeled transition systems as coalgebras for a suitable powerset functor [15], and then we discuss how this encoding can be lifted to a more structured framework, where the coalgebraic representation keeps the relevant algebraic structure of the states and transition of the encoded system. Let us start introducing the formal definition of coalgebra for a functor.
Definition 4.1 (coalgebras) Let B : C → C be an endofunctor on a category C. A coalgebra for B or B-coalgebra is a pair ⟨A, a⟩ where A is an object of C and a : A → B(A) is an arrow. A B-cohomomorphism f : ⟨A, a⟩ → ⟨A', a'⟩ is an arrow f : A → A' of C such that
f ; a' = a; B(f ).	(1)
The category of B-coalgebras and B-cohomomorphisms will be denoted by CoalgB. The underlying functor U : CoalgB → C maps an object ⟨A, a⟩ to A and an arrow f to itself.
Let PL : Set → Set be the functor defined as X '→ P(L × X) where L is a fixed set of labels and P denotes the powerset functor. Then coalgebras for this functor are one-to-one with labeled transition systems over L [15].
Definition 4.2 (labeled transition systems) Let L be a fixed set of labels. A (nondeterministic) labeled transition system (over L), briefly LTS, is a structure TS = ⟨S, −→TS⟩, where S is a set of states, and −→TS⊆ S × L × S is a labeled

transition relation. As usual, we write s −→l
TS s' for ⟨s, l, s'⟩ ∈−→TS.

A transition system morphism f : TS → TS' is a function f : S → S' which
l	l
“preserves” the transitions, i.e., such that s −→TS t implies f (s) −→TS' f (t). We
will denote by LTSL the category of finitely-branching LTS over L and correspond- ing morphisms.

Proposition 4.3 (labeled transition systems as coalgebras) Category CoalgPL is isomorphic to the sub-category of LTSL containing all its objects, and all the morphisms f : TS → TS' which also “reflect” transitions, i.e., such that if

f (s) −→l
' t then there is a state s' ∈ S such that s −→l
TS s' and f (s')= t.

It is instructive to spell out the correspondence just stated. For objects, a transition

system ⟨S, −→⟩ is mapped to the coalgebra ⟨S, σ⟩ where σ(s)= {⟨l, s'⟩ | s −→l
s'},

and, vice versa, a coalgebra ⟨S, σ : S → PL(S)⟩ is mapped to the system ⟨S, −→⟩,

with s −→l
PL, we get
s' if ⟨l, s'⟩ ∈ σ(s). For arrows, by spelling out condition (1) for functor


l	'	l	'
∀s ∈ S, {⟨l, t⟩| f (s) −→ t} = {⟨l, f (s )⟩| s −→ s },
and by splitting this set equality in the conjunction of the two inclusions, one can

easily see that inclusion “⊇” is equivalent to s −→l
s' ⇒ f (s) −→l
f (s'), showing

that f is a transition system morphism, while the left-to-right inclusion is equivalent

to f (s) −→l
t ⇒ ∃s' .s −→l
s' ∧ f (s')= t, meaning that f is a “zig-zag” morphism,

i.e., that it reflects transitions.
The property of “reflecting behaviors” enjoyed by cohomomorphisms is pivotal, for example, in the characterization of bisimulation relations as spans of cohomo- morphisms, in the relevance of final coalgebras, and in various other results of the theory of coalgebras [15]. Given two coalgebras ⟨A, a⟩ and ⟨A', a'⟩, a coalgebraic bisimulation on them is a relation R ⊆ A × A' such that ⟨R, r⟩ is a coalgebra and the projections π : R → A and π' : R → A' are cohomomorphisms. Interestingly, it is easy to check that two states of a labeled transition system S are bisimilar (in the standard sense) if and only if there is a coalgebraic bisimulation R ⊆ S × S (regarded as a PL-coalgebra) which relates them.
An even easier definition of categorical bisimilarity can be given if there exists a ﬁnal coalgebra. In this case, two elements of the carrier of a coalgebra are bisimilar iff they are mapped to the same element of the final coalgebra by the unique co- homomorphism. Unfortunately, due to cardinality reasons, the functor PL used for the coalgebraic representation of transition systems does not admit a final coalgebra [15]. One satisfactory, alternative solution consists of replacing the powerset functor P on Set by the countable powerset functor Pc, which maps a set to the family of its
countable subsets. Then defining the functor Pc : Set → Set by X '→ Pc(L × X)
one has that coalgebras for this endofunctor are in one-to-one correspondence with transition systems with countable degree, i.e., systems where for each state s ∈ S
'	l	'	c
the set {⟨s , l⟩ | s −→ s } is countable. Unlike functor PL, the functor PL admits
cofree and final coalgebras (Example 6.8 of [15]).
Proposition 4.4 (final and cofree Pc -coalgebras) The obvious underlying

functor U : CoalgPc
→ Set has a right adjoint R : Set → CoalgPc
associat-

ing with each set X a cofree coalgebra over X. As a consequence, the category
CoalgPc has a ﬁnal object, which is the cofree coalgebra R(1) over a ﬁnal set 1.
We shall stick to this functor throughout the rest of the paper, and since there is

no room for confusion the superscript c will be understood.
For Reactive Systems, as well as process algebra and tile rewrite systems, the coalgebraic representation using functor PL (for a suitable L) introduced in Propo- sition 4.3 is not completely satisfactory, because by definition the carrier is just a set and therefore the algebraic structure of states is lost. This calls for the introduction of structured coalgebras, i.e., coalgebras for an endofuctor on a category AlgΓ of algebras for a signature (or algebraic specification) Γ which is determined by the structure of states. Since it is natural to require that the structured coalgebraic representation of a system is compatible with the unstructured, set-based one, the following notion will be relevant.
Definition 4.5 (lifting) Given endofunctors B : C → C, B' : C' → C' and a functor V : C' → C, B' is called a lifting of B along V, if B'; V = V; B.

'  B'   '

V	V
J B  J 
C	C
In particular, if VΓ : AlgΓ → Set is the underlying set functor, one will consider typically a functor B' : AlgΓ → AlgΓ which is a lifting of PL along VΓ.
The structured coalgebraic representation of transition systems has been studied in [20] for the case of CCS and other process algebra whose operational semantics is given by SOS rules in the DeSimone format, and in [9] for tile systems. In the first case the lifting of PL is determined by the SOS rules, while in the second one it is defined by authors’hand. In both cases, as well as for the case of G-Reactive Systems addressed in the next sections, the following interesting fact applies [20,7].
Proposition 4.6 (bisimilarity is a congruence in structured coalgebras)
Let Γ be an algebraic speciﬁcation, and BΓ : AlgΓ → AlgΓ be a lifting of PL :
Set → Set. If ⟨S, σ⟩ is a BΓ-coalgebra and ⟨S, −→⟩ its corresponding structured LTS, then bisimilarity on ⟨S, −→⟩ is a congruence with respect to the operators in Γ.
The statement follows by the observation that the right adjoint R : Set → CoalgPL

of Proposition 4.4 lifts to a right adjoint RΓ : AlgΓ → CoalgBΓ
for the forgetful

functor UΓ, with VΓ; R = RΓ; VΓ
(see [20]), as shown in the following diagram.
Γ
B  

CoalgPL ¸   CoalgBΓ

,,	Γ
B
R	U
,.L
RΓ	UΓ

 r FΓ	z 



Now, since RΓ and V Γ
Set ¸¸	 AlgΓ
VΓ
are both right adjoints, Coalg Γ
L


inherits a final object

RΓ(1) from AlgΓ which is then preserved by V Γ. Hence, bisimilarity induced by
the final morphism to RΓ(1) in CoalgBΓ is determined by the underlying sets and

functions, that is, its definition does not use the algebraic structure of states and transitions. Since the final morphisms in Coalg Γ are Γ-homomorphisms, it follows
L
that bisimilarity is a congruence.
In other words, a transition system can be represented as a structured coalgebra only if bisimilarity is a congruence. This property certainly holds, for example, for specifications in GSOS format, which are considered in [20]. Certain structures are used there, called bialgebras, which combine aspects of algebras and coalgebras: bialgebras can be regarded as an alternative, equivalent presentation of structured coalgebras [7]. A specification in GSOS format is shown to satisfy a certain diagram called pentagonal law, which ensures the existence both of an algebra of transiton systems and of an algebraic structure on their states. The pentagonal law also makes sure that bisimilarity is a congruence, showing that GSOS specifications perfectly fit in the structured coalgebraic framework.

G-Reactive Systems as Coalgebras
In this section we give a coalgebraic characterization of GIPO Labeled Transition System of G-Reactive Systems through the theory outlined in the previous section. First of all, we have to define the universe of observations. Since the labels of the GLTS are arrows of the base G-category C (representing the contexts), we define the functor as parametric w.r.t. C, and ||C|| (i.e. the class of all arrows of C) is
the universe of labels.
Definition 5.1 Given a G-category C, the functor PC : Set|C| → Set|C| is defined for each |C|-indexed set S by PC(Sn)= Pc   m∈|C| C[n, m] × Sm .
The functor is defined analogously on arrows of Set|C|.
Note that PC is not an endofunctor on Set, as it is the case for the standard PL discussed in the previous section, but it is defined on Set|C|, i.e., the G-category of sets indexed by objects of C. The base G-category C induces C, an object of Set|C| where, for any sort n, the corresponding set is C[0, n]. Here we have implicitly assumed that C is locally small (i.e., the hom-class between two objects is always a set and not a proper class), otherwise C[0, n] could be a proper class. Moreover, in the following definition, we require that ||C|| is a countable set, otherwise the possible transitions of an element could be uncountable and then not belonging to PC. Note that this usually holds in those categories where arrows are syntactic contexts of a formalism.
Definition 5.2 Given a G-Reactive System R = ⟨C, 0, D, R⟩, the PC-coalgebra corresponding to its GLTS is ⟨C, αC ⟩ where
αC (p)= {(c, r; d) s.t. diagram (ii) in Fig. 1 is a GIPO and d ∈ D and ⟨l, r⟩∈ R}.
It is immediate to see that the LTS defined above exactly coincides with the GLTS
(Def. 3.5).

From the above definition immediately follows a characterization of ∼G as final semantics. Indeed the category CoalgPC has a final object 1CoalgPC , and thus there

is a unique morphism !R : ⟨C, αC ⟩ → 1CoalgP
assures that !R(p) =!R(q) if and only if p ∼G q.
. The whole theory of coalgebra

Lifting the Categorical Structure
The coalgebraic model defined in the previous section does not take into account the algebraic structure of the states, i.e., of the possibility of contextualizing a term. In order to have a richer model we lift that construction to a structured setting where the base category is not anymore Set|C|, but a category of algebras with contextualization operations. In the following we assume that the category C has strict distinguished object, i.e., that the only arrow with target 0 is id0. This is needed to distinguish between elements and operations of algebras.
specification Γ(R)= 
sorts
∀n ∈ |C| with n /=0 
operations
d : n → m	∀d ∈ C[n, m] with n /=0 

This specification defines AlgΓ(R) the category of Γ(R)-algebras and Γ(R)- homomorphisms. The base category C of a Reactive System induces C ∈ |AlgΓ(R)|. In C, for every sort m, the elements of this sort are the arrows of C[0, m]. Every operation c : m → n is defined for every element p of sort m as the composition of p; c in C. Note that we removed arrows with source 0 from the operations, otherwise all the elements of C must be considered as constants and not as elements.
Hereafter we will use cX to denote the operation c of the algebra X, and c to mean

both the operation cCb
and the arrow c ∈ ||C||. Moreover we will not specify the

sort of sets and operations, in order to make the whole presentation more readable.
Definition 6.1 The functor F : AlgΓ(R) → AlgΓ(R) is defined as follows. For each X = ⟨X, aX, bX,... ⟩∈ AlgΓ(R), F(X)= ⟨PC(X), aF(X), bF(X),... ⟩
where ∀a ∈ Γ(R), ∀A ∈ PC(X), aF(X)(A)= 
{(c, dX(x)) s.t. diagram (i) in Fig. 2 is a GIPO in C, d ∈ D and (b, x) ∈ A}.
On arrows of AlgΓ(R) is defined as PC.
Proposition 6.2 Let VΓ(R) : AlgΓ(R) → Set|C| be the forgetful functor that asso- ciates to each Γ(R)-algebra its carrier set. Then F is a lifting of PC along VΓ(R).
Proof. For any X ∈ |AlgΓ(R)| with carrier X, VΓ(R)(F(X)) = PC(X). Moreover
VΓ(R)(X)= X and then PC(VΓ(R)(X)) = PC(X).
For any h ∈ ||AlgΓ(R)||, VΓ(R)(F(h)) = PC(h)= PC(VΓ(R)(h)).	 

Trivially F is a lifting of PC. Then, by Prop. 4.6, CoalgF is a category of bialge- bras, it has final object 1CoalgF and bisimilarity abstracts away from the algebraic structure.
In [20], Turi and Plotkin show that every process algebra whose operational semantics is given by SOS rules in DeSimone format, defines a bialgebra. In that approach the carrier of the bialgebra is an initial algebra TΣ for a given algebraic signature Σ, and the SOS rules in DeSimone format specify how an endofunctor FΣ behaves with respect to the operations of the signature. Since there exists only one arrow ?Σ : TΣ → FΣ(TΣ), to give the SOS rules is enough for defining a bialgebra (i.e., ⟨TΣ, ?Σ⟩) and then for assuring compositionality of bisimilarity. Our construction slightly differs from this. Indeed, the carrier of our coalgebra is C, that is not the initial algebra of AlgΓ(R). Then there could exist several or no structured coalgebras with carrier C. In the following we prove that αC : C → F(C) is a Γ(R)- homomorphism. This automatically assures that ⟨C, αC ⟩ is a structured coalgebra and then bisimilarity is a congruence with respect to the operations of Γ(R).
Theorem 6.3 Let R = ⟨C, 0, D, R⟩ be a Reactive System with redex-RPOs. If ||C||
is countable and C has strict distinguished object, then ⟨C^ , αC ⟩ is a F-coalgebra.
Proof. In order to prove that ⟨C^ , αC ⟩ is a F-coalgebra, we have to prove that αC


 ¸,,,¸,

 ¸,,,¸,
F(C)	R	R	C
 ¸,,,¸,


a;e
,,,d;b
e	,,,b
e	,,,d;b

,,,
,
  
,, ¸,β
,,
 ¸,,,¸,
,,,
,

, ¸(1p,◦β)•(α◦1g )  z¸ ,,,,
c 
,,,d
, ¸(1p,◦β)•(α◦1g )  z¸ ,

,,,,

a  ,, 
,,	,,,,

p ,,
,, ¸,α
 z¸ , ,,

,,	 l
,,,
p;a  ,,
  l

, 
p  ,,  l
, 

(ii)	(iii)
Suppose that (e, p') ∈ a	b (αC (p)), then there exists two GIPOs as those of
F(C)	R
diagram (ii) above, such that p' = r; d; b for ⟨l, r⟩ ∈ R and d, b ∈ D. Since the
two inner squares are GIPOs, also the outer square, diagram (iii), is a GIPO (by
composition property of GIPOs, Lemma 2.2.20 of [19]) and then (e, p') ∈ αC (a b (p)).
R	C
Now suppose that (e, p') ∈ αC (a b (p)), then the diagram (iii) is a GIPO, d; b ∈ D,
R	C
⟨l, r⟩ ∈ R and p' = r; d; b. Since C has redex-GRPOs, then there exists the GRPO
of diagram (i). Let diagram (ii) be such GRPO, then the lower square is a GIPO. By decomposition property of GIPOs (Lemma 2.2.20 of [19]) also the upper square
of diagram (ii) is a GIPO. Thus (c, r; d) ∈ αC (p) and (e, p') ∈ c	b (αC (p)).	 
R	F(C)	R
Note that this proof is completely analogous to that of Theorem 1 of [6] that is the analogous theorem for Reactive System `a la Leifer and Milner. Here we use composition and decomposition of GIPOs, while there we we used composition and decomposition of IPOs. This makes evidence of the fact that it is not important what kind of construction we use, but it is important that the construction satisfies these two property. This is really evident in tile systems [11] where the theory prove

that decomposition property guarantees that bisimilarity is a congruence.
From the fact that ⟨C, αC ⟩ is a F-coalgebra immediately follows that ∼G is a congruence with respect to the operations of Γ(R).
Conclusions and Future Work
This paper extends [6] to G-Reactive Systems.
Here we have shown that given a G-Reactive System we can always construct a coalgebra equivalent to the distilled GIPO Labeled Transition Systems. In such a way we define a final semantics for Reactive Systems. Moreover if the Reactive Systems has GRPOs, then we can define a structured coalgebra equivalent to the distilled LTS, and then bisimilarity is compositional. This can be seen as a gen- eral, more abstract proof, of compositionality of bisimilarity for Reactive Systems. However this is not the only aim of the paper.
Indeed [6] coalgebraically characterizes also saturated bisimilarity [5], a coarser equivalence that take into account not only the minimal contexts but all the possible. Since all the possible contexts are usually infinite in number, we introduced Nor- malized Coalgebras that allow to forget about redundant transitions, i.e., transitions that are not meaningful in the bisimulation game. The relation between minimal contexts and redundant transitions is deeply studied in [6]. The resulting notion of bisimulation is asymmetric and recall us open bisimulation [16], asynchronous bisimulation [1] and large bisimulation [2].
The construction presented in this paper can be easily extended to normalized coalgebras in order to capture saturated bisimilarity of G-Reactive Systems.
This is particularly interesting in order to check saturated bisimilarity for Bor- rowed Contexts rewriting [10]. In our opinion, the standard bisimilarity on the (G)IPO LTS is usually too strict, while saturated seems more appropriate. This is the case of Logic Programming and Open π-calculus as shown in [5], and of Open Petri nets as shown in [6].
Another interesting point concerning Borrowed Contexts is the derivation of an SOS semantics as pointed out in [3]. Indeed reasoning on the derived LTS is usually hard, and it will be more useful having an SOS specification of it. This paper can be seen also as a first step in this direction. Indeed, as shown in [20], GSOS specifications can be seen as the lifting of the endofunctor to the algebraic setting.
The lifting that we have shown in Section 6 describes the following rule
p →bG q	diagram (i) in Fig. 2 is a GIPO
c	.
p; a →G q; d
References
Amadio, R. M., I. Castellani and D. Sangiorgi, On bisimulations for the asynchronous pi-calculus., in:
Proc. of CONCUR ’96, LNCS 1119 (1996), pp. 147–162.
Baldan, P., A. Bracciali and R. Bruni, Bisimulation by unification., in: Proc. of AMAST ’02, LNCS
2422 (2002), pp. 254–270.


Baldan, P., H. Ehrig and B. K¨onig, Composition and decomposition of dpo transformations with borrowed context., in: ICGT, LNCS 4178, 2006, pp. 153–167.
Berry, G. and G. Boudol, The chemical abstract machine, Theor. Comp. Sci. 96 (1992), pp. 217–248.
Bonchi, F., B. K¨onig and U. Montanari, Saturated semantics for reactive systems., in: Proc. of LICS
(2006), pp. 69–80.
Bonchi, F. and U. Montanri, Coalgebraic models for reactive systems, in: Proc. of CONCUR ’07, To appear in LNCS.
Corradini, A., M. Große-Rhode and R. Heckel, Structured transition systems as lax coalgebras., Electr. Notes in Theor. Comp. Sci. 11 (1998).
Corradini, A., R. Heckel and U. Montanari, From sos specifications to structured coalgebras: How to make bisimulation a congruence., Electr. Notes in Theor. Comp. Sci. 19 (1999).
Corradini, A., R. Heckel and U. Montanari, Tile transition systems as structured coalgebras., in: Proc. of FCT, 1999, pp. 13–38.
Ehrig, H. and B. K¨onig, Deriving bisimulation congruences in the DPO approach to graph rewriting., in: Proc. of FoSSaCS ’05, LNCS 2987 (2004), pp. 151–166.
Gadduci, F. and U. Montanari, “The tile model,” MIT Press, 1999 .
Godement, R., “Topologie Algbrique et Thorie des Faisceaux,” Hermann, 1958.
Lane, S. M., “Categories for the Working Mathematician,” Springer, 1972.
Leifer, J. J. and R. Milner, Deriving bisimulation congruences for reactive systems., in: Proc. of CONCUR ’00, LNCS 1877 (2000), pp. 243–258.
Rutten, J. J. M. M., Universal coalgebra: a theory of systems., Theor. Comp. Sci. 249 (2000), pp. 3–80.
Sangiorgi, D., A theory of bisimulation for the pi-calculus., Acta Inf. 33 (1996), pp. 69–97.
Sassone, V. and P. Sobocinski, Locating reaction with 2-categories., Theor. Comp. Sci. 333 (2005),
pp. 297–327.
Sassone, V. and P. Sobocin´ski, Reactive systems over cospans, in: Proc. of LICS (2005), pp. 311–320.
Sobocin´ski, P., “Deriving process congruences from reaction rules.” Ph.D. thesis (2004).
Turi, D. and G. D. Plotkin, Towards a mathematical operational semantics., in: Proc. of LICS (1997),
pp. 280–291.
