

Electronic Notes in Theoretical Computer Science 227 (2009) 179–193
www.elsevier.com/locate/entcs
Reachability Analysis in BioAmbients
Gianluigi Zavattaro1
Dipartimento di Scienze dell’Informazione, Universita` di Bologna, Mura Anteo Zamboni 7, I-40127 Bologna, Italy

Abstract
We rephrase results, previously proved by Busi and Zavattaro on Mobile Ambients, characterizing a fragment of BioAmbients –without restriction and merge– in which a generalized form of reachability turns out to be decidable.
Keywords: reachability analysis, target reachability, decidability, ambients


Introduction
BioAmbients [11] is a well known formalism for the description of biological systems that combines the communication mechanisms of the π-calculus [10] with the no- tion of ambient as formalized in Mobile Ambients [7]. This combination permits to represent biochemical reactions by means of process communication and to model biological compartments by means of ambients. A bioambient [P ] is a collection of active processes and nested sub-bioambients P . Active processes can perform com- munication actions with other processes or execute capabilities in order to modify the ambient nesting. Communication consists of the interaction between an output and an input action performed by processes located in the same ambient, in par- ent/child ambients, or in two parallel ambients. The capabilities allow processes to modify ambient nesting in three possible ways: one ambient can move inside a parallel ambient, one ambient can move outside from the parent ambient, or two parallel ambients can merge into one single ambient.
In this paper we discuss the reachability problem in BioAmbients exploiting techniques developed by Busi and Zavattaro for Mobile Ambients [4,5] and already partially applied to small fragments of BioAmbients by Delzanno and Montagna [8].

1 E-mail: zavattar@cs.unibo.it

1571-0661/© 2008 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2008.12.111

Reachability analysis consists in verifying, given two processes P and Q, whether there exists a computation that starts from P and leads to Q.
As an example of the kind of analysis that reachability supports, let us con- sider the following drug delivery scenario. A drug molecule, hosted into a specific transport molecule, is injected in the blood of a patient. The behavior of the host- ing molecule should be such that the drug molecule is delivered to muscular tissue and not to connective tissue. Such a system could be represented by the following BioAmbient process
[[Drug] | Transport] | [Blood | [Muscular] | [Connective]]
where the first ambient represents the drug molecule hosted inside the transport molecule, while the second ambient represents (an abstraction of) the patient in which the blood is the transport medium to reach the muscular and the connective tissues.
We can formalize the expected behavior of the system saying that we expect that the configuration
[Blood' | [T ransport'] | [Muscular' | [Drug]] | [Connective']]
should be reachable (where Blood', Transport', Muscular', and Connective' are some specific derivatives of the corresponding processes in the initial system config- uration) while the following configuration should not be reachable
[Blood'' | [T ransport''] | [Muscular''] | [Connective'' | [Drug]]]
(where Blood'', Transport'', Muscular'', and Connective'' are any possible deriva- tives of the corresponding processes in the initial system configuration).
Reachability is usually undecidable in Turing complete formalisms such as the π-calculus or Mobile Ambients. Nevertheless, at least for Mobile Ambients, very interesting fragments have been studied which are expressive enough to model all computable functions, but for which reachability turns out to be decidable. This holds for the fragment without restriction, without the open capability (used to dissolve an ambient boundary), and in which replication can be applied only to prefixed processes. In fact, this fragment was first proved to be Turing complete by Maffeis and Phillips [9], and then reachability was proved to be decidable for such
fragment by Busi and Zavattaro [4]. This result follows from a monotonicity prop- erty of the considered calculus: because of the absence of the open capability, the number of “active” ambients in a process cannot decrease during the computation.
In a related paper [5] Busi and Zavattaro extended their previous result about the decidability of reachability for Mobile Ambients in two directions. On the one hand, they introduced a more general notion of reachability called target reachability. This allows for the specification of a possibly infinite class of targets specified by showing the nesting structure of ambients, and indicating lower and upper bounds to the number of specific instances of processes hosted in each ambient. On the other hand, the decidability of target reachability was proved for an extended calculus including also the sophisticated communication mechanisms of Boxed Ambients [2].
In this paper we rephrase the results proved in [5] applying them to BioAmbi- ents. The main differences between the calculus considered in [5] and the fragment

of BioAmbients considered in this paper are: (i) monotonicity was obtained in [4,5] removing the open capability while it is obtained here for BioAmbients removing the merge capability; (ii) differently from Mobile Ambients (where a single process can execute its capability in order to move its hosting ambient), in BioAmbients two distinct processes located at different ambients must synchronize in order to allow their hosting ambients to change the nesting structure; (iii) communication in BioAmbients includes also communication between processes in sibling ambients while in Boxed Ambients communication is either local or parent-child; (iv) BioAm- bients include also a choice operator (guarded on either communication actions or capabilities) while in the calculus considered in [5] there is no choice operator.
The proof of the decidability of target reachability is as in [5] by reduction to Petri net marking reachability (a decidable property for Petri nets). The reduction is obtained in two steps: we first define target marking reachability for Petri nets and we prove that it can be reduced to marking reachability, then we show how to reduce target reachability in BioAmbients to target marking reachability in Petri nets. Due to space limitation and because the proof is a small variant of the previous proof for Boxed Ambients, the details are omitted and can be found in [5] and in the full version of the paper [4] available at [6].
It is worth mentioning that this is not the first paper that applies the techniques developed by Busi and Zavattaro to BioAmbients. In fact, the technique developed in [4] has been already exploited by Delzanno and Montagna [8] to prove the decid- ability of (spatial) reachability for a fragment of BioAmbients without restriction, merge and without communication. Spatial reachability is a restricted version of target reachability in which only lower bounds to the number of the occurrences of processes in the target ambients can be specified. In this paper we prove a result which is more general than the one in [8] for three main reasons: we prove the de- cidability of target reachability which is more general than spatial reachability, we consider also the rather rich set of communication primitives of BioAmbients, and we consider the standard semantics instead of replacing the structural congruence rule for replication !P ≡!P|P with the reduction step !P →!P|P (the price we pay to maintain the standard semantics is to limit the syntax avoiding the application of replication to ambients, i.e. ![P ] is not admitted in our calculus).
The paper is structured as follows. In Section 2 we report the syntax and semantics of BioAmb−, the fragment of BioAmbients that we consider, and we recall the definition of target reachability. In Section 3 we prove that target reachability is decidable in BioAmb−.

BioAmbients without Merge and Restriction
In this section we introduce a fragment of BioAmbients, called BioAmb−, for which we prove the decidability of reachability.
Definition 2.1 – BioAmb− – Let Name, ranged over by n, m, p, .. ., be a denumerable set of ambient names. The terms of BioAmbients are defined by the

following grammar:


π ::=	Actions
$n!{m}	Output action
$n?{m}	Input action

$	::=		Directions local	Intra-ambients s2s	Inter-siblings
p2c	Parent to child
c2p	Child to parent
M, N ::=		Capabilities enter n Synch entry accept n Synch accept exit n	Synch exit expel n Synch expel

P, Q ::=	Processes
P|Q	Composition
[P ]	Ambient (membrane)
G	Guarded process
!G	Replication
G, L  ::=	Guarded processes

i∈I i∈I
πi.Pi	Communication choice
Mi.Pi	Capability choice

We assume that in a process P the bound names, i.e., those names appearing as objects in input actions, are all pairwise distinct and disjoint from the free names. In this way, we can avoid to consider α-conversion.
We write π.P for single communication choice, π1.P + π2.Q for binary commu- nication choice, 0 for empty choice, and π.P + T to single out one communication option, and similarly for capability choice.
In the following we use   P to denote the parallel composition of k instances of

the process
Pi.
P , while 
k
i Pi denotes the parallel composition of the indexed processes

BioAmbients processes run inside ambients and performs communication actions

and capabilities to modify the ambient structure. Communication is based on the standard input and output action a` la π-calculus enriched with variants for allowing also processes running in different ambients to communicate. Namely, communica- tion between parent-child and siblings is admitted. Capabilities are used to allow a process to move its hosting ambient outside (resp. inside) an outer (resp. a sibling) ambient. Namely, exit and expel are used for outside movement, while enter and accept are for inside movement. In the full BioAmbients also the merge capability is considered that permits two sibling ambients to merge their processes into a unique ambient.
Infinite behaviours in BioAmbients are modeled using the replication operator. In BioAmb− we do not admit the application of replication to ambients, e.g., ![P ] is not a valid process. More precisely, the calculus BioAmb− corresponds to the fragment of BioAmbients [11] in which the restriction operator and the merge ca- pability are not considered and in which replication can be applied only to guarded processes.
The operational semantics is defined in terms of a structural congruence plus a reduction relation.
Definition 2.2 – Structural congruence – The structural congruence ≡ is the smallest congruence relation satisfying:
P | 0 ≡ P	P | Q ≡ Q | P P | (Q | R) ≡ (P | Q) | R	!P ≡ P | !P
Definition 2.3 – Reduction relation – The reduction relation is the smallest relation → satisfying the following axioms and rules:
[(T + enter n.P ) | Q] | [(T ' + accept n.R) | S] → [[P | Q] | R | S]
[[(T + exit n.P ) | Q] | (T ' + expel n.R) | S] → [P | Q] | [R | S]
(T + local n!{m}.P ) | (local n?{p}.Q + T ') → P | Q{m/p}
(T + p2c n!{m}.P ) | [(c2p n?{p}.Q + T ') | R → P | [Q{m/p} | R]
[R | (T + c2p n!{m}.P )] | (p2c n?{p}.Q + T ') → [R | P ] | Q{m/p}
[R | (T + s2s n!{m}.P )] | [(s2s n?{p}.Q + T ') | S] → [R | P ] | [Q{m/p} | S]
P → Q ⇒ [P ] → [Q]
P → Q ⇒ P|R → Q|S
P ≡ P ',P → Q, Q ≡ Q' ⇒ P ' → Q'
where Q{m/p} is the usual substitution of p for the free occurrences of m in Q.
The first two reduction rules handle ambient operations. The next four reduction rules handle communication within ambients (similar to the π-calculus) and between neighboring ambients. The remaining rules handle reductions in context and up to structural congruence.

In the following, we use →∗ to denote the reflexive and transitive closure of →.
If P →∗ Q we say that Q is a derivative of P .

Target Reachability
Classical reachability analysis consists in checking if P →∗ R for two given processes P and R. In this paper we consider a more general notion of reachability. The main novelty is that we permit a partial description of the target process. More precisely, it is possible to impose constraints on the number of occurrences of guarded pro- cesses inside an ambient. Such constraints are both lower bounds (e.g. there must be at least one instance of the guarded process M.P in a given ambient) and upper bounds (e.g. there can be at most two occurrences of the guarded process π.Q in a given ambient).
We need to introduce some additional notation to denote the partial description of target processes.
We introduce a notion of normal form for processes that forbids the presence of both the unreplicated and the replicated version of a guarded term in a parallel composition. Any process can be transformed in a structurally congruent process in normal form by using the monoidal axioms for parallel composition and by applying
the axiom for replication from right to left (i.e., M.P | !M.P is transformed in !M.P ).


Definition 2.4 – Normal form – A process P is in normal form if P = 
Gi |

  !  '	  [	] and the following conditions hold:	i
j Gj |	k Pk
Q is in normal form for all Q such that Gi = π.Q + R or Gi = M.Q + R or
G' = π.Q + R or G' = M.Q + R for some i, j, π, M, R;
j	j
Pk is in normal form for all k;
there exist no i, j such that Gi = G' .
Proposition 2.5 Let P be a process. Then there exists a process Q in normal form such that P ≡ Q.
Definition 2.6 – Target – The set of targets is defined by the following grammar:
T ::= 0 | any | q ≤ G ≤ q' | !G | T |T | [T ] where q ∈ IN and q' ∈ IN ∪ {∞}. 2
A target any requires the presence of zero or more occurrences of any process, while q ≤ G ≤ q' requires the presence of k occurrences of the guarded process G, with q ≤ k ≤ q' (if q' = ∞ there is no upper bound to the number of occurrences). A target !G requires the presence of one or more occurrences of process !G. As the behaviour of processes  !G is the same for any k ≥ 1, we prefer to require just the presence – or the absence – of a replicated process instead of providing upper

2 IN denotes the set of natural numbers and we assume that q ≤∞ for all q ∈ IN .

and lower bounds to the number of its occurrences. Targets can be composed in parallel, and can be nested in ambients.
As an example, consider the target [1 ≤ expel n.P ≤ 2 | [!G] | [any | 3 ≤ exit n.Q ≤ ∞]]. This target requires that an outer ambient contains one or two occurrences of process expel n.P , an ambient containing only occurrences of process
!G (at least one occurrence is required), and an ambient containing at least three occurrences of the process exit n.Q and any other process. Moreover, this target also requires that there is no process at top level.
We consider only a proper subset of well formed targets defined as follows.
Basically, a target is well formed if the upper and lower bounds on guarded terms are satisfiable (i.e., target 3 ≤ π.P ≤ 2 is not well formed) and if the presence of a replicated version of a guarded process prevents the occurrence of the nonreplicated version of the same process in a parallel composition (i.e., target π.P | !π.P is not well formed). We also require that at most one occurrence of a replicated process is present in a parallel composition (i.e., target !π.P | !π.P is not well formed).
Definition 2.7 – Well formed target – A target T is well formed if there exists
a target S =   qi ≤ Gi ≤ q' |   !G' |   [T ' ] such that the following conditions

i
hold:
processes Gi, G'
i	j	j	k  k

are in normal form for all i, j;

either T ≡ S or T ≡ S | any;
qi ≤ q' for all i;
there exist no i, j such that Gi = G' ;
if G' = G' ' then j = j';
j	j
T ' is well formed for all k.
We define the set of processes set(T ) that satisfy the constraints imposed by a target T . Basically, we require the presence of the required number of occurrences of a guarded process in each ambient; if the upper bound is ∞, then also the presence of a replicated version of the process satisfies the target (i.e., process [!G] satisfies the target [3 ≤ G ≤ ∞]). If the target any is present, then further (different) processes may be present. As already discussed, with a replicated process in the target we just require the presence of at least one occurrence of such a replicated process.
Definition 2.8 – set(T) – Let T be a well formed target.  A process P is in
set(T ) if P ≡   Lh |   !L' |   [P ' ] and there exists a target S =   qi ≤ Gi ≤

'	'	  h '
g	g	k	k	i

qi |
j !Gj |
k[Tk] such that the following conditions hold:

either T ≡ S or T ≡ S | any;
for all i, either qi ≤ |{h | Lh = Gi}| ≤ q' or q' = ∞ and there exists g such that
i	i
' = Gi;
for all j there exist g such that L' = G' ;
if T ≡ S then for any h there exists i such that either Lh = Gi or Lh = G'

and for any g there exists j such that L' = G' ;
for any k, P ' ∈ set(T ' ).
k	k
It is worth to note that set(T ) is compatible with the structural congruence relation as formalized by the following Proposition.
Proposition 2.9 Let T be a well formed target and P and Q two processes such that P ≡ Q. Then, P ∈ set(T ) if and only if Q ∈ set(T ).
We are now ready to formalize the notion of target reachability.
Definition 2.10 Let P be a process and T be a well formed target. We say that T is a target reachable from P (denoted by TReach(P, T )) if there exists a process Q such that P →∗ Q and Q ∈ set(T ).
Deciding target reachability in BioAmb−
The target reachability problem for BioAmb− processes consists in checking if, given a target T and a process P , the target T is reachable from P . In this Section we show that target reachability is decidable for BioAmb− processes. The proof is basically an adaptation of the proof of decidability of reachability for a fragment of Boxed Ambients considered in [5]. The main differences are due the presence of different kinds of communication mechanisms (e.g. sibling-to-sibling) and different capabilities (e.g. the pair expel, exit instead of the out capability). This decidability result is proved showing how to reduce target reachability on BioAmb− to marking reachability on Petri nets. This is obtained in two steps, we first recall the notion of target marking reachability for Petri nets defined in [5], then we reduce target reachability in BioAmb− into target marking reachability into Petri nets.
We start recalling some basic definitions on Petri nets, then we define target marking reachability and we provide a sketch of the reduction result.
P/T Nets
We recall Place/Transition nets with unweighted flow arcs (see, e.g., [12]). Here we provide a characterization of this model which is convenient for our aims.
Definition 3.1 Given a set S, a ﬁnite multiset over S is a function m : S → IN such that the set dom(m) = {s ∈ S | m(s) /= 0} is finite. The multiplicity of an element s in m is given by the natural number m(s). The set of all finite multisets over S, denoted by Mfin(S), is ranged over by m. A multiset m such that dom(m) = ∅ is called empty. The set of all finite sets over S is denoted by ℘fin(S).
Given the multiset m and m', we write m ⊆ m' if m(s) ≤ m'(s) for all s ∈ S while ⊕ denotes their multiset union: m ⊕ m'(s) = m(s)+ m'(s). The operator \ denotes multiset difference: (m \ m')(s) = if m(s) ≥ m'(s) then m(s) − m'(s) else
0. The scalar product, j · m, of a number j with m is (j · m)(s) = j · (m(s)).
To lighten the notation, we sometimes use the following abbreviation. If m is a multiset containing only one occurrence of an element s (i.e., dom(m) = {s} and

m(s) = 1) we denote m by only s. Multiset union is represented also by comma, i.e., m, m' = m ⊕ m'. Let m be a multiset over S and m' a multiset over S' ⊇ S, such that (m'(s') = 0) for each s' ∈ S' \ S; with abuse of notation, we sometimes use m in place of m', and vice versa.
Definition 3.2 A P/T net is a pair (S, T ) where S is the set of places and T ⊆ Mfin(S) × Mfin(S) is the set of transitions.
Finite multisets over the set S of places are called markings. Given a marking
m and a place s, we say that the place s contains m(s) tokens.
A P/T net is finite if both S and T are finite.
A P/T system is a triple N = (S, T, m0) where (S, T ) is a P/T net and m0 is the initial marking.
A transition t = (c, p) is usually written in the form c → p. The marking c, usually denoted by •t, is called the preset of t and represents the tokens to be consumed; the marking p, usually denoted by t•, is called the postset of t and represents the tokens to be produced.
A transition t is enabled at m if •t ⊆ m. The execution of a transition t enabled
at m produces the marking m' = (m \ •t) ⊕ t•. This is written as m →t  m' or
simply m → m' when the transition t is not relevant. We use σ, τ to range over sequences of transitions; the empty sequence is denoted by ε; let σ = t1,..., tn, we

write m →σ
m' to mean the ﬁring sequence m →t1
· · · →tn m'.

We say that m' is reachable from m if there exists σ such that m →σ
We say that m' covers m if m ⊆ m'.
Definition 3.3 Let N = (S, T, m0) be a P/T system.
m'.

The reachability problem for marking m consists of checking if m0 →∗ m.
The coverability problem for marking m consists of checking if there exists m'
such that m0 →∗ m' and m' covers m.

Target marking reachability on P/T nets
We introduce a generalization of both the notions of reachability and coverability on P/T nets. The idea essentially consists in providing a lower and an upper bound to the number of tokens in each place of the net, and in checking if it is possible to reach a marking that satisfies such constraints.
Definition 3.4 – target marking – Let N = (S, T ) be a P/T net. A target marking of N is a pair of functions (inf, sup) ∈ (S → IN ) × (S → IN ∪ ∞) such that, for all s ∈ S, inf (s) ≤ sup(s).
Definition 3.5 – target marking satisfiablity – Let N = (S, T ) be a P/T net. A marking m of N satisfies a target marking (inf, sup) of N if, for all s ∈ S, inf (s) ≤ m(s) ≤ sup(s).
Definition 3.6 – target marking reachability – Let N = (S, T, m0) be a P/T system. A target marking (inf, sup) is reachable if there exists a marking m such that m0 →∗ m and m satisfies (inf, sup).

We note that reachability and coverability are special cases of target marking reachability. Checking reachability of marking m is equivalent to check reachability of the target marking (m, m), while checking coverability of m is equivalent to reachability of the target marking (m, {(s, ∞) | s ∈ S}).
Now we reduce the target marking reachability problem for a system N and a tar- get marking (inf, sup) to standard reachability on the P/T system TMSys(N, (inf, sup)) defined below.
Definition 3.7 Let N = (S, T, m0) be a P/T system and (inf, sup) be a target marking of N . The P/T system TMSys(N, (inf, sup)) = (S',T', m' ) is defined as
follows. Let normal, ending /∈ S.
S' = S ∪ {normal, ending}
T ' = {(c ∪ normal, p ∪ normal) | (c, p) ∈ T}∪
{(normal, ending)}∪
{(s ∪ ending, ending) | sup(s) = ∞}
' = m0 ∪ normal
The set of markings TMMark(N, (inf, sup)) is defined as follows:
TMMark(N, (inf, sup)) = {m | ∀s ∈ S : (sup(s) = ∞⇒ m(s) = inf (s))∧
(sup(s) /= ∞⇒ inf (s) ≤ m(s) ≤ sup(s))}
Proposition 3.8 Let N = (S, T, m0) be a P/T system and (inf, sup) be a target marking of N. The set of markings TMMark(N, (inf, sup)) is ﬁnite.
Proposition 3.9 Let N = (S, T, m0) be a P/T system and (inf, sup) be a tar- get marking of N. The target marking (inf, sup) is reachable in N iff one of the markings in the set TMM ark(N, (inf, sup)) is reachable in TMSys(N, (inf, sup)).
As a consequence of the two propositions above and of the decidability of reach- ability on P/T systems, we get the following:
Corollary 3.10 Target marking reachability is decidable for P/T systems.

Reducing target reachability on processes to target marking reachability on P/T nets
Now we show that target reachability on processes can be reduced to target marking reachability on Petri nets; by decidability of target marking reachability on Petri nets, we get the following:
Theorem 3.11 Let P be a BioAmb− process and T be a target. The target reach- ability problem TReach(P, T ) is decidable.
Given a process P and a target R, we outline the construction of a (finite) Petri system SysP,R satisfying the following property: the check of TReach(P, T ) is

equivalent to check target marking reachability of a (finite set of) target markings on SysP,R. The technical details concerning the construction of the net are quite similar to the ones for deciding reachability in the fragment of Mobile Ambients and Boxed Ambients considered in [4,6,5], and thus omitted. Here we only recall the basic ideas.
The intuition behind this result relies on the monotonicity of BioAmb−: because of the absence of the merge capability, the number of “active” ambients in a process (i.e., ambients that are not guarded by any capability or communication) cannot decrease during the computation. Moreover, as the applicability of replication is restricted to guarded processes, the number of “active” ambients in a set of struc- turally equivalent processes is finite (while this is not the case in, e.g., the process
![G]). Thanks to the property explained above, in order to check target reachability it is sufficient to take into account a subset of the derivatives of P : namely, the P -derivatives whose number of active ambients is not greater than the number of active ambients in the target.
Unfortunately, this subset of P -derivatives is, in general, not finite, as the processes inside an ambient can grow unlimitedly.  Consider, e.g., the process P = [!local n!{m} | !local n?{p}.Q]: it is easy to see that, for any k, [!local n!{m} | 
!local n?{p}.Q |   Q{m/p}] is a derivative of P .
On the other hand, we note that the set of guarded and replicated terms that can occur as subprocesses of (the derivatives of) a process P (namely, the subterms of kind G or !G) is finite. The idea is to borrow a technique used to map (the fragment without restriction of) a process algebra on Petri nets. A process P is decomposed in the (finite) multiset of its guarded and replicated subprocesses that appear at top-level (i.e., occur unguarded in P ); this multiset is then considered as the marking of a Place/Transition Petri net. The execution of a computational step in a process will correspond to the firing (execution) of a transition in the corresponding net. Thus, we reduce the target reachability problem for BioAmb− processes to reachability of a finite set of target markings in a Place/Transition Petri net, which we have shown to be a decidable problem. However, differently from what happens in process algebras, where processes can be faithfully represented by a multiset of subprocesses, BioAmb− processes have a tree-like structure that hardly fits in a flat model such as a multiset.
The solution is to consider BioAmb− processes as composed of two kinds of com- ponents; the tree-like structure of ambients and the family of multisets of guarded and replicated subterms contained at top level in each ambient. As an example, consider the process
p2c n!{m}.P | [enter k.Q | G] | [accept k.0] | [c2p n?{p}.R | [0]]
having the tree-like structure [] | [] | [[]]. Moreover, there is a multiset corresponding to each “node” of the tree: the multiset {p2c n!{m}.P } is associated to the root,
{enter k.Q, G} is associated to the first son of the root, {accept k.0} is associated to the second son of the root, {c2p n?{p}.R} is associated to the third son of the root, and the empty multiset {} to the son of the third son of the root.

The Petri net we construct is composed of the following two parts: the first part is basically a finite state automaton, where the marked place represents the current tree-like structure of the process; the second part is a set of identical subnets: the marking of each subnet represents the multiset associated to a particular node of the tree. To keep the correspondence between the nodes of the tree and the multiset associated to that node, we make use of labels. A distinct label is associated to each subnet; this label will be used in the tree-like structure to label the node whose contents (i.e., the set of guarded and replicated subprocesses contained in the ambient corresponding to the node) is represented by the subnet.
The set of possible tree-like structures we need to consider is finite, because to verify target reachability we need to take into account only those processes whose number of active ambients is limited by the number of active ambients in the target. The upper bound on the number of nodes in the tree-like structures also provides an upper bound to the number of identical subnets (at most one for each active ambient). In general, the number of active ambients grows during the computation; hence, we need a mechanism to remember which subnets are currently in use and which ones are not used. When a new ambient is created, a correspondence between the node representing such a new ambient in the tree-like structure and a not yet used subnet is established, and the places of the “fresh” subnet are filled with the marking corresponding to the guarded and replicated subprocesses contained in the newly created ambient. To this aim, each subnet is equipped with a place called unused, that contains a token as long as the subnet does not correspond to any node in the tree-like structure.
For example, consider the process [accept n] | [enter n.[!expel k]]. The relevant part of the net is depicted in Figure 1: a subset of the places, representing the tree-like structure, is depicted in the left-hand part of the figure, while the subnets are depicted in the right-hand part. We only report the subnets labelled with l1, l2, and l3, and omit the subnet labelled with l0 with empty marking. The computation step [accept n] | [enter n.[!expel k]] → [[[!expel k]]] corresponds to the firing of the transition enabled in the depicted net.
Now we are ready to describe the net that will be used to decide reachability of a target T starting from a process P .
The set of places of the net is constructed as follows. The part of the net representing the tree-like structure contains a place for each tree of size not greater than the number of active ambients in T . Each of the subnets contains a place for each guarded and replicated subprocess of process P , and a place named “unused”, that remains filled as long as the subnet does not correspond to any node in the tree-like structure. Moreover, we associate a distinct label to each subnet, and all the places of the subnet will be decorated with such a label.
The net has three sets of transitions: the first set permits to model the execution of the capabilities, the second set is used deal with communication, and the third set to cope with replication.
We concentrate on the first set of transitions. A pair of capabilities, say, enter n
and accept n, can be executed when the following conditions are fulfilled: the tree-
















l0
l1	l2



l0
l1

l2
l3




Fig. 1. A portion of the net corresponding to process [accept n] | [enter n.[!expel k]].

like structure must have a specific structure with siblings li and lj, a place corre- sponding to a guarded subprocess enter n.P + T is marked in the subnet labeled li, and a place accept n.Q + T ' is marked in the subnet labeled lj. Moreover, the number of active ambients created by the execution of the capability, added to the number of currently active ambients, must not exceed the number of active am- bients in the target T . This condition is checked by requiring that there exist a sufficient number of “unused” places that are currently marked. The execution of the capability causes the following changes to the marking of the net: the place corresponding to the new tree-like structure is now filled and the marking of the subnets performing the enter n and accept n operations are updated (by adding the tokens in the places corresponding to the active guarded and replicated subprocesses in the continuations P and Q). Moreover, a number of subnets equal to the num- ber of active ambients in the continuations P and Q become active: their places will be filled with the tokens corresponding to the active guarded and replicated subprocesses contained in the corresponding ambient, and the tree-like structure is updated accordingly.
The second set of transitions deal with communication and are quite similar to the rules for capabilities. A local communication can be executed when two places, corresponding to the guarded processes local n!{m}.Q1 and local n!{p}.Q2,
are marked in a subnet, and the number of active ambients created by the execution of the communication, added to the number of currently active ambients, must not exceed the number of active ambients in the target T . The execution of the local

communication causes the following changes to the marking of the net: the place corresponding to the new tree-like structure is now filled and the marking of the subnet performing the communication is updated (by adding the tokens in the places corresponding to the active guarded and replicated subprocesses in the continuations Q1 and Q2). Moreover, a number of subnets equal to the number of active ambients in the continuations Q1 and Q2 become active. Nonlocal communication is more involved, because the two communicating processes reside in two different ambients and it is necessary to check that the two hosting ambients are located in the right places in the tree like structure.
The third set of transitions deals with replication. For all replicated processes !G occurring in P , we add to each subnet the transitions !G →!G, G and !G, G →!G and
!G, !G →!G, respectively permitting to spawn a new copy of a replicated process,
to absorb a process that also appears in a replicated form in the marking, and to remove multiple occurrences of a replicated process in a marking. These transitions are used to reduce target reachability on BioAmb− to target marking reachability on the net system. An instance of such transitions is depicted in the subnets of Figure 1.
The reachability of target T is reduced to reachability of a target marking (infT , supT ) constructed as follows. We require that a token is contained in a place corresponding to the tree-like structure of T (and that the places correspond- ing to the other tree-like structures are empty). Moreover, for any active ambient in T ,
for any target q ≤ G ≤ q' at top level in the active ambient, we require that infT (l : G) = q and supT (l : G) = q', where l is the label of the subnet corre- sponding to the active ambient;
for any target !G at top level in the active ambient, we require that infT (l :!G) = 
supT (l :!G) = 1;
for any guarded or replicated process Q not occurring at top level in the active ambient, we require that infT (l : Q) = 0; if the target any occurs at top level in the active ambient, then we require supT (l : Q) = ∞, otherwise we impose supT (l : Q) = 0.

Acknowledgements
Research partially supported by the University of Bologna Strategic Project Com- pReNDe: Compositional and Executable Representations of Nano Devices.
This paper was written in memory of Nadia Busi who passed away the 5th of September 2007, at the age of 39. This paper is an example of how her work in the area of the theory of concurrency represents a precious source of inspiration for proving new interesting results also in the more recent area of biologically inspired process calculi. These calculi attracted the interest of Nadia in her very active last few years of scientific activity: besides writing many valuable papers on the expressiveness of such calculi, she has been also the organizer of the first edition of the meeting MeCBIC dedicated to Membrane Computing and Biologically Inspired

Process Calculi.

References
I. Boneva and J.-M. Talbot. When Ambients Cannot be Opened. Theoretical Computer Science, 333(1-2):127–169, Elsevier, 2005.
M. Bugliesi, G. Castagna and S. Crafa Access Control for Mobile Agents: The Calculus of Boxed Ambients. ACM Transactions on Programming Languages and Systems, 26(1):57-124. ACM Press, 2004.
N. Busi and G. Zavattaro. On the Expressive Power of Movement and Restriction in Pure Mobile Ambients. Theoretical Computer Science, 322:477–515, Elsevier, 2004.
N. Busi and G. Zavattaro. Deciding Reachability in Mobile Ambients. In Proc. ESOP’05, volume 3444 of Lecture Notes in Computer Science, pages 248-262. Springer-Verlag, Berlin, 2005.
N. Busi and G. Zavattaro. Reachability Analysis in Boxed Ambients. In Proc. ICTCS’05, volume 3701 of Lecture Notes in Computer Science, pages 143–159. Springer-Verlag, Berlin, 2005.
N. Busi and G. Zavattaro, Deciding Reachability in Mobile Ambients - Extended version. Available at
http://www.cs.unibo.it/~busi/papers/MA05.pdf
L. Cardelli and A.D. Gordon. Mobile Ambients. Theoretical Computer Science, 240(1):177–213, 2000.
G. Delzanno and R. Montagna. On Reachability and Spatial Reachability in Fragments of BioAmbients, In Proc. MeCBIC’06, volume 171(2) of Electronic Notes in Theoretical Computer Science, pages 69–79. Elsevier, 2006.
S. Maffeis and I. Phillips. On the Computational Strength of Pure Ambient Calculi. Theoretical Computer Science, 330(3):501-551, Elsevier, 2005.
R. Milner, J. Parrow, D. Walker. A calculus of mobile processes. Journal of Information and Computation, 100:1–77. Academic Press, 1992.
A. Regev, E.M. Panina, W. Silverman, L. Cardelli, and E.Y. Shapiro. BioAmbients: an abstraction for biological compartments. Theoretical Computer Science, 325(1):141–167, Elsevier, 2004.
W. Reisig. Petri nets: An Introduction. EATCS Monographs in Computer Science, Springer, 1985.
