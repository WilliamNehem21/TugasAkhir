Available online at www.sciencedirect.com


Electronic Notes in Theoretical Computer Science 336 (2018) 281–297
www.elsevier.com/locate/entcs

Category-theoretic Structure for Independence and Conditional Independence
Alex Simpson1
Faculty of Mathematics and Physics University of Ljubljana, Slovenia

Abstract
Relations of independence and conditional independence arise in a variety of contexts. Stochastic in- dependence and conditional independence are fundamental relations in probability theory and statistics. Analogous non-stochastic relations arise in database theory; in the setting of nominal sets (a semantic framework for modelling data with names); and in the modelling of concepts such as region disjointness for heap memory. In this paper, we identify unifying category-theoretic structure that encompasses these
different forms of independence and conditional independence. The proposed structure supports the ex- pected reasoning principles for notions of independence and conditional independence. We further identify associated notions of independent and local independent product, in which (conditional) independence is represented via a (fibred) monoidal structure, which is present in many examples.
Keywords: Independence, conditional independence, probability theory, database theory, nominal sets, separation logic, category theory, fibrations.


Introduction
Relations of independence and conditional independence arise in multiple contexts. The aim of this paper is to provide axiomatic category-theoretic structure that, on the one hand, accounts for key constructions and reasoning principles associ- ated with relations of (conditional) independence in different contexts, and, on the other, includes a diversity of examples as instances of the structure. To emphasise the second point, the development is illustrated throughout by a series of running examples of notions of (conditional) independence that are of relevance to computer science. These examples concern three main flavours of independence.
Stochastic independence and conditional independence.

1 This research was carried out at the University of Edinburgh, supported by the John Templeton Foun- dation (grant no. 39465 “Randomness via Information Independence”), and at the University of Ljubljana, supported by the Air Force Office of Scientific Research, Air Force Materiel Command, USAF (Award No.
FA9550-14-1-0096) and by the Slovenian Research Agency (research core funding No. P1–0294).

https://doi.org/10.1016/j.entcs.2018.03.028 1571-0661/© 2018 Published by Elsevier B.V.
This is an open access article under the CC BY-NC-ND license (http://creativecommons.org/licenses/by-nc-nd/4.0/).

These are fundamental relations in probability theory, widely applied in statistics. They are also key relations in the theory of Bayesian networks, where the issue of inference based on conditional independence is paramount [12,10].
Logical independence and conditional independence.
These are relations of (conditional) independence that arise in the context of sets (or multisets) of tuples; i.e., in the context of database tables. The principal relation of this form is (conditional) variation independence [2], which is closely related to the notion of embedded multivalue dependency in database theory, cf. [25,28]. See [2], for other examples of logical independence relations.
Separatedness relations.
Separatedness relations constrain the access of a number of distinct entities to an available resource, in order to ensure there is no overlap of access. Examples include: asserting that data contains disjoint names/atoms/nonces/. . . , as expressed, for example, by separatedness assertions about nominal sets [22]; and the partioning of a heap into disjoint regions, as expressed by the separating conjunction of separation logic [21].
All the above examples manifest themselves as instances of categories with (con- ditional) independence structure, as defined in the present paper. Such structure validates standard reasoning principles for (conditional) independence.
Our category-theoretic approach may be viewed as a generalisation of algebraic models of conditional independence, as exemplified by graphoids [23] and sepa- roids [2]. In particular, separoids (with least element) arise as a special case of our category-theory structure (in dual form), with categories restricted to preorders. For lack of space, we leave the exposition of this correspondence to a longer ver- sion of the paper. In the present version, we instead focus on the richer category- theoretic framework, whose breadth of scope is illustrated by the range of examples we consider. The category-theoretic setting naturally gives rise to a notion of local independent product, generalising the conditional products of Dawid and Studeny´ [4]. (Our formulation differs from the category-theoretic approach to conditional prod- ucts proposed by Flori and Fritz [7].) It also allows us to define a notion of image tuple, which plays an important role in formulating properties of independence. In categories of probability spaces, image tuples axiomatise properties of measure spaces carrying joint probability distributions.
The present paper fits in with current interest in logics of dependence and independence [26,13], the original team semantics of which is based logical (in)dependence as in point (ii) above. Athough variations of team semantics based on stochastic independence have been considered [15], no systematic semantic frame- work has been developed for general logics of dependence and independence. Our category-theoretic structure provides one possible foundation for such a develop- ment. Fleshing this out is a task for future research.
In its probabilistic incarnation, this paper also contributes to a broad ongo- ing research programme of developing category-theoretic methods for probabilistic

concepts, of which examples include [9,27,17,14]. The notion of local independent product, developed in the present paper, has also been applied in recent work on modelling ground references in programming languages [18].

Independence structure
Let C be a category. A multispan in C is given by a pair

 X, n X	fi) Y ,


i∈I

	(1)

where X is an object of C (the domain) and { fi }i∈I is a family of morphisms indexed by a finite set I. Our usage of the prefix “multi” reflects the use of general finite index sets. Ordinary spans are simply multispans with 2-element index sets. We often write a multispan simply as { fi }i∈I . (Technically, the domain X needs to be specified separately only when I is empty.)
We say that a collection of multispans I is:
stable if, whenever {fj}j∈J ∈I and h : I → J is bijective, {fh(i)}i∈I ∈ I;
affine if, whenever {fj}j∈J ∈I and h : I → J is injective, {fh(i)}i∈I ∈I .
relevant if, whenever {fj}j∈J ∈I and h : I → J is surjective, {fh(i)}i∈I ∈I .
Clearly affine implies stable, as does relevant. Stability is a basic condition asserting that the family I treats multispans as multisets of morphisms. We henceforth ex- ploit this property by defining multispans using multiset operations, such as additive union , without directly specifying an index set.
A stable collection of multispans I is said to form a multicategory if:
every singleton identity {X idX) X} is in I; and

if {X	fi) Y }	∈I and {Y	gi)j
Zij}j∈Ji ∈I for all i ∈ I then it follows that

the composition {X	gij ◦ fi) Zij}i∈I, j∈Ji is also in I.
The above conditions specify that multispans in I are maps in a fat symmetric multicategory, in the sense of [19, Def. A.2.1], although we have replaced the multi- domain of loc. cit. with a multi-codomain. In this paper, we concern ourselves with multicategories of the above form only, with maps always given as multispans.
Definition 2.1 (Independence structure) Independence structure on a cate- gory C is given by an affine multicategory of multispans I that further satisfies:
every singleton family {X	f) Y } is in I .
We say that a multispan {fi}i∈I is independent if it belongs to the collection I. We use ⊥⊥ {fi}i∈I and ⊥i∈I fi as notation for expressing the independence of {fi}i∈I . We also write f ⊥ g to express that ⊥⊥{f, g}.
We present a sequence of examples of categories carrying independence structure.
The same categories will be used as running examples throughout the paper.

Example 2.1 (Finite probability distributions) The category FinProb of (positive) ﬁnite probability distributions has as objects pairs (X, pX ) where X is a finite (necessarily nonempty) set and pX : X → (0, 1] satisfyies  x∈X pX (x)= 1. Morphisms (X, pX ) to (Y, pY ) are (necessarily surjective) functions f : X → Y such

that p
(y) = Σ
fi)
p  (x). A family { (X, p  )	(Y ,p ) }
is independent


Σ	pX (x) =   pYi (yi) .
 	
This is the usual probabilistic notion of (mutual) independence of (fi)i∈I considered as a family of random variables over sample space X.
Example 2.2 (Probability spaces) Generalising the previous, we consider the category Prob of probability spaces. A measurable space is given by a set X together with a σ-algebra ΣX ⊆ P(X) (where P(X) is the powerset of X). A probability space is a triple (X, ΣX, PX ), where PX : ΣX → [0, 1] is a probability measure on ΣX . A morphism from (X, ΣX, PX ) to (Y, ΣY , PY ) is a measurable function f : X → Y (i.e., f−1B ∈ ΣX , for every B ∈ ΣY ) that is measure-preserving (i.e., PY (B) = 

P (f−1(B)), for every B ∈ Σ ). A family { (X, Σ ,P )	fi) (Y , Σ
,P  ) }	is

X	Y	X	X
i	Yi
Yi	i∈I

independent if, for all familes (Bi ∈ ΣYi )i∈I , it holds that

PX 


f−1(Bi)  =   PY (Bi) .


This is again the usual probabilistic notion of (mutual) independence of (fi)i∈I considered as random variables.
Example 2.3 (Surjective maps) The category FinSur has, as objects, finite nonempty sets X and, as morphisms from X to Y , surjective functions f : X → Y . A family { X  fi) Y }  is independent if, for all (y ∈ Y )  it holds that
  f−1(yi) /= ∅ .
i∈I
This notion of independence is called variation independence in [2]. It, and its conditional generalisation (see Example 5.3), are closely related to the notion of embedded multivalue dependency in database theory, cf. [25,28].
Example 2.4 (Nominal sets) We recall the notion of nominal set [11,22]. Let Perm(A) be the permutation group on a countably infinite set A. An element x, in a set X with Perm(A)-action (π, z) '→ π · z : Perm(A) × X → X, is supported by a subset S ⊆ A if, for every permutation π that fixes every element of S (i.e., π · a = a for every a ∈ S), it holds that π · x = x. A nominal set is a Perm(A)- action (X, ·) in which, for every x ∈ X, there exists a finite S that supports x. In a nominal set, every x ∈ X possesses a smallest supporting set, called the support of x, notation suppX (x). The category Nom of nominal sets (a.k.a. the Schanuel

topos) is the full subcategory of Perm(A)-actions with nominal sets as objects.

Define { (X, ·X
)	fi) (Y , ·
) }i∈I
to be independent if, for all x ∈ X and i, j ∈ I,

i /= j	=⇒ suppYi (fi(x)) ∩ suppYj (fj(x)) = ∅ .
The notion of independence in nominal sets is thus given by the notion of separat- edness in the sense of [22, §3.4].
Example 2.5 (Heaps) Let V be a set. A V-valued heap X is a pair (LocX, valX ) where LocX is a finite set (of locations) and valX is a function from LocX to V . A morphism f : X   ) Y is an injective function f : LocY → LocX such that valY = valX ◦ f . Such a morphism can be thought of exhibiting valY as a projection of valX onto LocY as a region of LocX renamed under f . We write Heap(V ) for the category of V-valued heaps. A multispan { X fi) Y } is defined to be independent if, for all i, j ∈ I,
i /= j	=⇒  fi(LocYi ) ∩ fj(LocYj )= ∅ ,
where fi(LocYi ) is the image of fi in LocX . Thus independence of a family over a heap asserts pairwise disjointness of the regions defining the projections.
In the last two examples (nominal sets and heaps), the property of mutual independence reduces to pairwise independence. That is, ⊥i∈I fi holds if and only if, for every pair i, j ∈ I with i /= j, we have fi ⊥ fj . This property does not hold for the first three examples. Nonetheless, in all examples, it turns out that there are more subtle senses in which general mutual independence is determined by binary independence. In fact, we shall see that this is true in two different ways.
Independent products
An I-indexed independent product i∈I Yi classifies I-indexed independent multi- spans via a bijection between independent multispans (1) and morphisms

X	(fi)i∈I)	Y .
i∈I
The definition makes use of the following useful auxiliary notion, which can be defined for any stable collection I of multispans on a category C.
Definition 3.1 (I-neutral) A multispan {Y	gj) Z }	is said to be I-neutral
if, for every multispan
{X	fi) Y }	 {X	f) Y }	(2)


for which the composition {X	fi) Y }	 {X gj ◦)f
the multispan (2) is also in I.
Zj}j∈J is in I, it holds that

Proposition 3.2 I-neutral multispans form a multicategory.

I-neutrality will play a prominent role in this paper. Accordingly, we identify useful collections of I-neutral multispans in our example categories. A multispan

{ X	fi) Y }
i∈I
is said to be jointly monic if, for every parallel pair of maps

g, h : Z   ) X, if fi ◦ g = fi ◦ h for all i ∈ I then g = h. In four of our example categories, FinProb, Prob, FinSur and Nom, the joint monicity of
{ X fi) Y } coincides with joint injectivity of the underlying functions (i.e., for all x, xj ∈ X, if fi(x)= fi(xj) for all i ∈ I then x = xj). In the case of Heap(V ), joint monicity coincides with joint surjectivity (i.e., for all x ∈ LocX , there exist i ∈ I and y ∈ LocYi such that fi(y)= x).
Proposition 3.3 In FinProb, FinSur, Nom and Heap(V ), every jointly monic multispan is I-neutral (where I is as in Examples 2.1 and 2.3–2.5 respectively).

Proposition 3.4 In Prob, a multispan { X	fi) Y

}i∈I
is I-neutral (for I as in

Example 2.2) if the family {f—1B | i ∈ I, B ∈ ΣY } generates the σ-algebra ΣX.
i	i
Definition 3.5 (Independent product) Let I be a finite set. We say that a category C with independence structure I has I-indexed independent products if, for every family {Yi}i∈I of objects, there exist an object  i∈I Yi and a multispan




satisfying:
{	Yi
i∈I
πi)
i
}i∈I
(3)

the multispan (3) is both independent and I-neutral; and
if ⊥⊥{X	fi) Y }	then there exists a unique morphism


X (fi)i∈)I
Yi
i∈I
,	(4)

in C, such that πi ◦ (fi)i∈I = fi, for all i ∈ I.
We say that C has independent products if it has I-indexed independent products for every finite set I.
To illustrate the role of I-neutrality, we expand the above definition in the case of nullary (i.e. ∅-indexed) independent products.
Definition 3.6 (Independent terminal object) An independent terminal ob- ject, in a category with independence structure, is a terminal object 1 that satisfies the implication: ⊥⊥{X fj) Yi}i∈I implies ⊥⊥{X fi) Yi}i∈I {X !) 1}.
Proposition 3.7 In a category with independence structure, nullary independent products coincide with independent terminal objects.
Proposition 3.8 A category with independence structure has independent products if and only if it has independent terminal object and binary independent products.
Proposition 3.8 provides a first reduction of mutual independence to iterated bi- nary independence. The mutual independence propery ⊥⊥{f1,..., fn} is equivalent

to the conjunction of a sequence of binary independence statements. For example,
⊥⊥{f1, f2, f3, f4} holds if and only if all of: f1 ⊥ f2; and (f1, f2) ⊥ f3, where (f1, f2) is the pairing of the binary independent product; and ((f1, f2), f3) ⊥ f4.
All our example categories have independent products. By Proposition 3.8, it suffices to exhibit independent terminal object and binary independent products. The former is trivial, so we just define the latter. We do not describe the projection maps, which are obvious. In each case, the independence of the multispan (3) of projections is immediate, and I-neutrality follows from Propositions 3.3 and 3.4.
Example 3.1 (Finite probability distributions) In FinProb, the indepen- dent product X ⊗Y has underlying set X ×Y endowed with the product probability distribution pX⊗Y (x, y)= pX (x) · pY (y).
Example 3.2 (Probability spaces) In Prob, the independent product X ⊗Y is the product measurable space (X × Y, ΣX×Y ) with the product measure PX ⊗ PY .
Example 3.3 (Surjective maps) In FinSur, the independent product X ⊗ Y is simply the set-theoretic product X × Y .
Example 3.4 (Nominal sets) In Nom, the independent product X ⊗ Y is
{(x, y) ∈ X × Y | suppX (x) ∩ suppY (y)= ∅}
with the Perm(A)-action inherited from the product. This is the separated product
defined in [22, §3.4].
Example 3.5 (Heaps) In Heap(V ), the independent product X⊗Y is defined by LocX⊗Y = LocX + LocY and valX⊗Y is the function [valX, valY ]: LocX + LocY → V defined by the universal property of the set-theoretic coproduct LocX + LocY .
We end this section with a characterisation of categories with independent prod- uct structure in more familiar category-theoretic terms. Recall that symmetric monoidal structure on a category C is provided by a functor ⊗ : C × C → C, an object I (the unit ), together with natural isomorphisms
(X ⊗ Y ) ⊗ Z	α) X ⊗ (Y ⊗ Z)	X ⊗ I	λ) X	X ⊗ Y	σ) Y ⊗ X
satisfying well-known coherence laws; see, e.g, [20, §XI.1].
A symmetric monoidal structure is said to have projections if the unit I is a terminal object [16]. Writing 1 for such a unit, define projection maps:
π = Y ⊗ Y  idY1 ⊗ !Y2) Y ⊗ 1 ∼=) Y   π = Y ⊗ Y  !Y1 ⊗ idY2) 1 ⊗ Y  ∼=) Y  .

We say the projections are jointly monic if {π1, π2} is a jointly monic span.
Theorem 3.9 The following are interderivable structures on a category C.
An independence structure with independent products.
A symmetric monoidal structure with jointly monic projections.

Tuple independence
Independent products provide a means of “pairing” maps Y (f	X	g) Z into a

single map X (f,g))
Y ⊗ Z, as long as f, g are independent. In reasoning about in-

dependence, however, it is useful to have a mechanism that allows non-independent maps to be paired. For example, it is useful to be able to assert that h is independent of a pair (f, g), in situations in which f is not independent of g.
In this section, we provide category-theoretic structure for defining “tuplings” of I-indexed multispans, whereby “pairings” are supplied by the case |I| = 2. A tupling comes with projection maps which extract its components. As in the case of independent products, these projections themselves form a multispan. In order to control the properties of tuplings, we require such projection multispans to belong to an assumed collection J , on which we impose suitable conditions.
Assume that J is a given multicategory of multispans, in a category C, satisfying the additional property that every multispan in J is itself J -neutral (Deﬁnition 3.1).
Definition 4.1 (J -factorisation) A J -factorisation  of  a  C  multispan
{X  fi) Y }  is a pair
 X	p) P , {P	qi) Y }		(5)
such that: the multispan {P	qi) Y }	is in J ; and q ◦ p = f , for every i ∈ I.

Definition 4.2 (J -image tuple) A J -image tuple of a multispan {X	f)i
in C is a pair
Yi}i∈I

 X  ⟨fi⟩i∈I) Img ⟨f ⟩
, {Img ⟨fi⟩i∈I
ρi) Y }


i∈I


that is initial among all J -factorisations of {X fi) Yi}i∈I ; i.e., given any J - factorisation (5), there existsa unique map Img ⟨fi⟩i∈I h) P such that h◦⟨fi⟩i∈I = p and qi ◦ h = ρi for all i ∈ I. We say that the J -image tuple is epimorphic if the map ⟨fi⟩i∈I is an epimorphism in C. (This will be used in Section 7.)
Definition 4.3 (Image tuple structure) (Nonempty) image tuple structure on a category C is given by a multicategory J of J -neutral multispans such that every (nonempty) multispan in C has a J -image tuple.
Proposition 4.4 Let J be a multicategory of J -neutral multispans in C. Then J provides image-tuple structure on C if and only if every multispan {X fi) Yi}i∈I with |I|≤ 2 has a J -image.
All our example categories carry image tuple structure. For simplicity, we de- scribe pairings only. Nullary and unary tuples are simpler. Higher-degree tuples can be derived via Proposition 4.4.
Example 4.1 (Finite probability distributions) Let J be the collection of jointly injective multispans in FinProb, cf. Proposition 3.3.  Given a span

Y (f  X  g ) Z, the object Img ⟨f, g⟩ is the set-theoretic image of the func- tion (f, g) : X → Y × Z with the induced (pushforward) probability distribution pImg ⟨f,g⟩ (y, z)=  x∈(f,g)−1(y,z) pX (x).
Example 4.2 (Probability spaces) Let  J  contain  all  multispans
{ X fi ) Y } that are both jointly injective and jointly generating, cf. Proposition 3.4. Given a span Y ( f  X  g ) Z, define Img ⟨f, g⟩ to be the set-theoretic image (f, g): X → Y × Z, with the induced Σ-algebra
ΣImg ⟨f,g⟩ = {B ∩ (f, g)(X) | B ∈ ΣY ×Z} ,
where ΣY ×Z is the product σ-algebra. The measure PImg ⟨f,g⟩ is defined by:
PImg ⟨f,g⟩ (A)= PX ((f, g)—1A)  ,	for A ∈ ΣImg ⟨f,g⟩ .
Example 4.3 (Surjective maps) Let J be the collection of jointly injective mul- tispans in FinSur. Given a span Y (f X g) Z, the object Img ⟨f, g⟩ is the set-theoretic image of (f, g): X → Y × Z.
Example 4.4 (Nominal sets) Let J be the collection of jointly injective mul- tispans in Nom. Given a span Y (f  X  g ) Z, the object Img ⟨f, g⟩ is the set-theoretic image of (f, g): X → Y × Z, with Perm(A)-action inherited from Z.
Example 4.5 (Heaps) Let J be the collection of jointly surjective multispans in Heap(V ), cf. Proposition 3.3. Given a span Y (f X g) Z, the object Img ⟨f, g⟩ is defined by: LocImg ⟨f,g⟩ = f (LocY ) ∪ g(LocZ), and valImg ⟨f,g⟩ (x)= valX (x).
Our motivation for introducing image tuple structure is to provide a mechanism for asserting independence properties between tuples of maps. To carry this out, we need to combine independence structure and image tuple structure.
Definition 4.5 (Tuple independence structure) Tuple independence struc- ture, on a category C, is given by a pair (I, J ) where I is independence structure, J is image tuple structure, and two properties connecting these structures hold.
(TI1) Every multispan in J is I-neutral.
(TI2) If ⊥i∈I X  fi) Yi then ⊥i∈I Img ⟨fi⟩i∈I  ρi) Yi.
In the presence of independent products, (TI2) follows from a simpler property.
Proposition 4.6 Let C be a category with independence structure I and image tuple structure J . Suppose also that C has independent products. Then a sufficient condition for (TI2) to hold is that J contains every multispan (3) of projections from an independent product.
Proposition 4.7 In our example categories, FinProb, Prob, FinSur, Nom and Heap(V ), the independence structure I from Examples 2.1–2.5, and the image tuple structure J from Examples 4.1–4.5, together provide tuple independence structure.

We use tuple independence structure to define an independence relation between

tuples. Consider multispans {X	fi) Y }m	and {X	gj) Z }n
. We write

i i=1	i j=1
⟨f1,..., fm⟩ ⊥⊥⟨g1,..., gn⟩	(6)
to express binary independence between the tuples generated by the respective multispans, i.e., to express that
⊥⊥{⟨fi⟩1≤i≤m , ⟨gj⟩1≤j≤n} .

Although use is made of binary independence only, the next result shows how re- lations of the form (6) can be used to express general mutual independence, thus giving a second way of deriving mutual independence from binary independence.
Proposition 4.8 ⊥⊥{f1,..., fn} if and only if, for every i with 2 ≤ i ≤ n, we have
⟨f1,..., fi—1⟩ ⊥⊥⟨fi⟩.
We next show that relations of the form (6) enjoy the expected reasoning princi- ples for relations of binary independence between tuples, cf. [12]. In the statement, we write ⟨f ⟩ ⊥⊥⟨g⟩ for ⟨f1,..., fm⟩ ⊥⊥⟨g1,..., gn⟩, and ⟨⟩ for the empty tuple. (All morphisms are assumed to have the same domain.)
Proposition 4.9
⟨f ⟩ ⊥⊥⟨g⟩ implies ⟨πf ⟩ ⊥⊥⟨πjg⟩, where π and πj are permutations of the vectors
f and g respectively.
⟨f ⟩ ⊥⊥⟨ ⟩.
⟨f ⟩ ⊥⊥⟨g⟩ implies ⟨g⟩ ⊥⊥⟨f ⟩.
⟨f ⟩ ⊥⊥⟨g, h⟩ implies ⟨f ⟩ ⊥⊥⟨g⟩.
⟨f ⟩ ⊥⊥⟨g, h⟩ and ⟨h⟩ ⊥⊥⟨g⟩ implies ⟨f , h⟩ ⊥⊥⟨g⟩.
Local independence structure
This section begins the second part of the paper, in which we address the notion of conditional independence. The main idea is to coherently impose independent structure on slice categories C/U . Informally, one thinks of an object u : X →U of C/U as presenting a U -indexed family {u—1(z)}z∈U , and of a morphism X f) Y from u to v : Y →U as presenting a family of maps
{f Tu−1(z): u—1(z)   ) v—1(z)}z∈U
between fibres. Under this intuition, independence of a multispan { X fi) Yi }i∈I , between objects u : X → U and {vi : Yi → U}i∈I of C/U , can be thought of as expressing, for every z ∈ U , the mutual independence of {fi Tu−1(z)}i∈I . This amounts to a statement of independence of maps conditional on z ∈ U .
The main definition of this section requires independence structure on every slice
C/U together with an axiom that relates the structure across different slices.

Definition 5.1 (Independent square) Suppose IU is independence structure on a slice category C/U . A commuting square in C

X	f	) Y

g	(7)
v	v
Z 	) U

is said to be an independent square if {f, g}∈ IU . We also write f ⊥U g for this.
Definition 5.2 (Local independence structure) Local independence structure on a category C is given by independence structure IU , on every slice category C/U , such that independent squares compose; i.e., given a commuting diagram in C

X	f	) Y	g	) Z


u	(A)	v
(B)	w
(8)

v	r	v	s	v
U	V	W

in which (A) and (B) are independent squares, then so is the outside rectangle (AB).
All our example categories carry local independence structure, generalising the previously identified independence structure. For each category C, we define when a multispan { X fi) Y }  , between objects u : X →U and {v : Y →U}  in the slice category C/U , is in IU .

Example 5.1 (Finite prob. distributions) A multispan { X	f)i
Yi }i∈I , in the

slice category FinProb/U , is defined to be in IU if, for every z ∈ U and family (yi ∈ v—1(z))i∈I , it holds that
Σ	pX (x) =   pYi (yi) .
 		

This equality asserts that {fi}i∈I , qua random variables, are mutually conditionally independent, conditioned on u qua random variable.
Example 5.2 (Probability spaces) A multispan { X fi) Yi }i∈I , in the slice category Prob/U , is defined to be in IU if {fi}i∈I , qua random variables, are mutually conditionally independent, conditioned on u qua random variable. Recall that, for general probability spaces, conditional independence is defined in terms of conditional probability in its formulation as a special case of conditional expectation.

This defines {fi}i∈I to be in IU if: for every family {Bi ∈ ΣYi }i∈I ,
P(   f—1Bi | u)=   P(f—1Bi | u)	almost surely (w.r.t. PX Tu−1(Σ


))).

i∈I	i∈I


Example 5.3 (Surjective maps) A multispan { X	fi) Y
}i∈I
, in FinSur/U ,

is defined to be in IU if, for every z ∈ U and family {yi ∈ v—1(z)}i∈I , we have:
  f—1(yi) /= ∅ .
i∈I

Example 5.4 (Nominal sets) In Nom, a multispan { X	fi) Y }	, in the slice category FinSur/U , is defined to be in IU if, for every x ∈ X and i, j ∈ I we have
i /= j =⇒ suppYi (fi(x)) ∩ suppYj (fj(x)) = suppU (u(x)) .
(It is equivalent to replace the above equality with an inclusion ⊆, because every morphism X	u) U in Nom satisfies supp (u(x)) ⊆ supp (x).)
Example 5.5 (Heaps) In Heap(V ), a multispan { X	fi) Y }	, in the slice category Heap(V )/U , is defined to be in IU if, for all i, j ∈ I,
i /= j	=⇒  fi(LocYi ) ∩ fj(LocYj )= u(LocU ) .
Thus independence of a family over a heap asserts pairwise disjointness of regions outside of a shared region specified by the conditioning morphism.

Local independent products
This section defines a local version of the independent products of Section 3. The definition needs to ensure the existence of independent products with respect to the local independence structure on every slice category, and also that this structure coheres in an appropriate way across slice categories.
Definition 6.1 (Independent product square) Given independence structure IU on a slice category C/U ,a commuting square (7) in C is said to be an independent product square if {X f) Y, X g) Z} is the span of projections from a binary independent product in C/U .
Definition 6.2 (Local independent products) A category C with local inde- pendence structure is said to have local independent products if the independence structure on each slice category C/U has independent products, and if every com- muting diagram (8) satisfies: if (B) is an independent product square and the outer rectangle (AB) is an independent square then (A) is also an independent square.
Given X	u) U and Y	v) U in C we use the following notation for the binary

independent product u ⊗U v of u and v as (tacitly understood) objects of C/U .
X ⊗  Y	π2 ) Y


π1	v
v	v
(9)

X 	) U
u
Note that X ⊗U Y is characterised as the apex of a universal independent square completing u and v.
We now exhibit binary local independent products in each of our example cate- gories (although restricting to a subcategory in the case of Prob). In each case we consider maps X  u) U and Y  v) U and define the object X ⊗ Y as above.
Example 6.1 (Finite probability distributions) In FinProb, the local inde- pendent product X ⊗U Y has the set-theoretic pullback X ×U Y as underlying set, endowed with the relative product probability distribution:



pX⊗U Y
(x, y)= pX (x) · pY (y) .
pU (u(x))

Example 6.2 (Polish probability spaces) Local independent products of prob- ability spaces amount to relative products in the sense of [8, §458L], which do not exist for arbitrary probability spaces. We therefore restrict Prob to a subcategory of well-behaved probability spaces. A Polish probability space is given by a Polish space X (i.e., a topological space whose topology arises from a complete separable metric) together with a probability measure PX on the σ-algebra ΣX of Borel sets. The category PolProb is the full subcategory of Prob on Polish probability spaces. The local independence structure of Example 5.2 restricts to PolProb. We now outline the construction of local independent products, which is somewhat involved. The object X ⊗U Y is given by the set-theoretic pullback X ×U Y , endowed with a topology as a Polish space that makes it a pullback in the category of Borel- measurable functions between analytic spaces. The Borel measure on Borel subsets of X ×U Y is defined by:
PX⊗U Y (C) = ∫z∈U (Pu−1(z) ⊗ Pv−1(z))(C) dPU ,
where (z, A) '→ Pu−1(z)(A) : U × ΣX → [0, 1] is a regular conditional probability for the function u : X → U , similarly (z, B) '→ Pv−1(z)(B) is a regular conditional probability for v, and ⊗ computes the product measure.
The above construction is known in ergodic theory, see, e.g., [6, Def. 6.15]; Similar constructions have been used in computer science in the theory of Markov processes [5,3]. I have not found the universal property, as a universal independent square, in the literature.

Example 6.3 (Nominal sets) In Nom, X ⊗U Y is the set
{(x, y) ∈ X ×U Y | suppX (x) ∩ suppY (y)= suppU (u(x))} with the Perm(A)-action inherited from the pullback.
Example 6.4 (Heaps) In Heap(V ), LocX⊗U Y  is defined to be the set-theoretic
pushout LocX +U LocY , and valX⊗Y is the function [valX, valY ]: LocX +U LocY → V
defined by the universal property of the pushout.
We end this section, by observing that local independent products give rise to fibred symmetric monoidal structure. For any C with local independent structure, define Cind to be the subcategory of the arrow category C→, containing every object of C→, whose morphisms are independent squares.
Theorem 6.3 If C has local independent products then:
The codomain functor cod : Cind →C is a ﬁbration.
A morphism in Cind is cartesian iff it is an independent product square.
The ﬁbre category over U is isomorphic to C/U.
For every morphism U	r) V in C, the reindexing functor r∗ : C/V → C/U
maps multispans in IV to multispans in IU .
Every reindexing functor r∗ : C/V → C/U is strong monoidal with respect to independent product in slice categories.
Conditional independence
In this section, we extend the tuple independence structure of Section 4 to a local version in slice categories. We call the resulting structure conditional independence structure since it supports reasoning principles about conditional independence.
Suppose J is a multicategory of J -neutral multispans in C. Define a collection
J /U of multispans in the slice category C/U by:
A multispan { X	fi) Yi }i∈I , between objects X	u) U and {Yi	vi) U}i∈I in
C/U , is defined to be in J /U if the C-multispan {fi}i∈I is in J .
Proposition 7.1 If J is a multicategory of J -neutral multispans in C then J /U
is a multicategory of J /U-neutral multispans in C/U.
Proposition 7.2 If J provides nonempty epimorphic image tuple structure on C
then J /U provides nonempty epimorphic image tuple structure on C/U .
Definition 7.3 (Conditional-independence structure) A pair ({IU }U∈|C|, J ) provides conditional-independence structure on a category C if: {IU }U∈|C| provides local independent structure, J provides nonempty epimorphic image-tuple struc- ture, property (CI) below holds, and the two local versions below of (TI1) and (TI2) from Definition 4.5 hold in every slice category C/U .
(CI) In every commuting diagram (8): if g◦f ⊥W u and {g, v}∈J then f ⊥V u.

(LTI1) Every multispan in J /U is IU -neutral.

(LTI2) If {X	fi) Y }

i∈I
∈ IU
is nonempty then the multispan of image-tuple

projections {Img ⟨f ⟩	ρi) Y }	is also in I .
The above can be also be given an alternative formulation that emphasises that it implies the existence of tuple independence structure on every slice category. How- ever, the chosen formulation is the one that is more convenient to work with, and to verify in examples. For example, one of its advantages is that it admits the following simplification in the presence of local independent products, cf. Proposition 4.6.
Proposition 7.4 Suppose C has local independent structure {IU }U∈|C| and nonempty epimorphic image-tuple structure J such that (CI) holds. Suppose fur- ther that C has terminal object and local independent products. Then (LTI1) holds if and only if (TI1) holds. Also, a sufficient condition for (LTI2) to hold is that J contains every span {π1, π2} of projections from a binary local independent product.
X (π1	X ⊗  Y	π2) Y
Proposition 7.5 For our main example categories, FinProb, Prob, FinSur, Nom and Heap(V ), the local independence structure {IU }U∈|C| deﬁned in Exam- ples 5.1–5.5 and the image tuple structure J deﬁned in Examples 4.1–4.5 together provide conditional independence structure.
Analogously to Section 4, we show that conditional independence structure val- idates standard reasoning principles for conditional independence. Henceforth, we assume that ({IU }U∈|C|, J ) is conditional independence structure on a category C.

Given {X	fi) Y }n
, {X	gj) Z }m
and {X	ek) W }l
, we write

i i=1
j j=1
k k=1

⟨f1,..., fn⟩ ⊥⊥⟨g1,..., gm⟩| ⟨e1,..., el⟩	(10) to express that the commuting diagram below is an independent square.
X	⟨e, f ⟩	) Img ⟨e, f ⟩


⟨e, g⟩
v
∼= ◦⟨ρ1,..., ρl⟩
v

Img ⟨e, g⟩
∼= ◦⟨ρ1,..., ρl⟩
) Img ⟨e⟩

Here, we write, e.g., Img ⟨e, f ⟩ for the image tuple Img ⟨e1,..., el, f1,..., fn⟩ and ρ1,..., ρl are the corresponding projections, see Definition 4.2. The codomain Img ⟨ρ1,... .ρl⟩ of each tuple⟨ρ1,..., ρl⟩ can be shown to be isomorphic to Img ⟨e⟩, thus providing the two unnamed isomorphisms in the diagram.
The independent square above can be understood as expressing binary con- ditional independence between the tuples ⟨f ⟩ and ⟨g⟩, with ⟨e⟩ acting as the conditioning tuple, as suggested by the notation (10).  The result below states

that the relation (10) indeed enjoys the expected laws of conditional independence, cf. [1,24,12,2].
Theorem 7.6
⟨f ⟩ ⊥⊥⟨g ⟩ | ⟨e ⟩ implies ⟨π(f )⟩ ⊥⊥⟨πj(g )⟩ | ⟨πjj(e )⟩, where π, πj and πjj are permutations of the vectors.
⟨f ⟩ ⊥⊥⟨e ⟩| ⟨e ⟩.
⟨f ⟩ ⊥⊥⟨g ⟩| ⟨e ⟩ implies ⟨g ⟩ ⊥⊥⟨f ⟩| ⟨e ⟩.
⟨f ⟩ ⊥⊥⟨g, h ⟩| ⟨e ⟩ implies ⟨f ⟩ ⊥⊥⟨g ⟩| ⟨e ⟩.
⟨f ⟩ ⊥⊥⟨g ⟩| ⟨e, h ⟩ and ⟨f ⟩ ⊥⊥⟨h ⟩| ⟨e ⟩ implies ⟨f ⟩ ⊥⊥⟨h, g ⟩| ⟨e ⟩
⟨f ⟩ ⊥⊥⟨h, g ⟩| ⟨e ⟩ implies ⟨f ⟩ ⊥⊥⟨g ⟩| ⟨e, h ⟩.
Acknowledgement
I thank Ohad Kammar, Tom Leinster and Sam Staton for discussions on the topic of this paper, and also the anonymous referees for their helpful comments.

References
A. P. Dawid. Conditional independence in statistical theory. Journal of the Royal Statistical Society, 41:1–31, 1979.
A. P. Dawid. Separoids: A mathematical framework for conditional independence and irrelevance.
Annals of Mathematics and Artificial Intellingence, 32:335–372, 2001.
E.-E. Doberkat. Semi-pullbacks for stochastic relations over analytic spaces. Mathematical Structures in Computer Science, 15:647–670, 2005.
A. P. Dawid and M. Studeny´.	Conditional products: An alternative approach to conditional independence. Artificial Intelligence and Statistics, 99:32–40, 1999.
A. Edalat. Semi-pullbacks and bisimulation in categories of Markov processes. Mathematical Structures in Computer Science, 9(5):523–543, 1999.
M. Einsiedler and T. Ward. Ergodic Theory with a view towards Number Theory. Springer, 2011.
C. Flori and T. Fritz. Compositories and gleaves. Theory and Applications of Categories, 3(33):928– 988, 2016.
D. H. Fremlin. Measure Theory, volume 4. Torres Fremlin, 2003.
M. Giry. A categorical approach to probability theory. In Categorical Aspects of Topology and Analysis, pages 68–85. Springer-Verlag, 1982.
D. Geiger and J. Pearl. Logical and algorithmic properties of conditional independence and graphical models. The Annals of Statistics, 21:2001–2021, 1993.
M. Gabbay and A. Pitts. A new approach to abstract syntax involving binders. In Fourteenth Annual IEEE Symposium on Logic in Computer Science, 1999.
D. Geiger, A. Paz, and J. Pearl.	Axioms and algorithms for inferences involving probabilistic independence. Information and Computation, 91:128–141, 1991.
E. Gr¨adel and J. V¨a¨an¨anen. Dependence and independence. Studia Logica, 101:389–410, 2013.
C. Heunen, O. Kammar, S. Staton, and H. Yang. A convenient category for higher-order probability theory. In Symposium on Logic in Computer Science, 2017.
T. Hyttinen, G. Paolini, and J. V¨a¨an¨anen. A logic for arguing about probabilities in measure teams.
Arch. Math. Logic, first published on-line, 2017.


B. Jacobs. Semantics of weakening and contraction. Annals of Pure and Applied Logic, 69(1):73–106, 1994.
B. Jacobs. New directions in categorical logic, for classical, probabilistic and quantum logic. Logical Methods in Computer Science, 11(3):1–76, 2015.
O. Kammar, P. B. Levy, S. Moss, and S. Staton. A monad for full ground reference cells. In Symposium on Logic in Computer Science, 2017.
T. Leinster. Higher Operads, Higher Categories. Cambridge University Press, 2004.
S. Mac Lane. Categories for the Working Mathematician. Springer, 2nd edition, 2000.
P.W. O’Hearn, J.C. Reynolds, and H. Yang. Local reasoning about programs that alter data structures. In Proceedings of the 15th International Workshop on Computer Science Logic, pages 1–19, 2001.
A. Pitts. Nominal Sets: Names and Symmetry in Computer Science. Cambridge University Press, 2013.
J. Pearl and A. Paz. Graphoids: a graph-based logic for reasoning about relevance relations. In Advances in Artificial Intelligence II, pages 357–363. North Holland, 1987.
W. Spohn. Stochastic independence, causal independence and shieldability. Journal of Philosophical Logic, 9:73–79, 1980.
Y. Sagiv and S.F. Walecka. Subset dependencies and a completeness result for a subclass of embedded multivalue dependencies. Journal of the Association for Computing Machinery, 29:103–117, 1982.
J. Va¨ananen. Dependence Logic. Cambridge University Press, 2007.
M. Wendt. The category of disintegrations. Cahiers Topologie G´eom. Diff´erentielle Cat´eg., 35(4):291– 308, 1994.
S.K.M. Wong. An extended relational data model for probabilistic reasoning. Journal of Intelligent Information Systems, 9:181–202, 1997.
