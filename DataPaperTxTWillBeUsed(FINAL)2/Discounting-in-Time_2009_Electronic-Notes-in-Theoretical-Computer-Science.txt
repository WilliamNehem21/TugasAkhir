

Electronic Notes in Theoretical Computer Science 253 (2009) 25–31
www.elsevier.com/locate/entcs
Discounting in Time
Uli Fahrenberg and Kim G. Larsen
Dept. of Computer Science Aalborg University Denmark
Email: {uli,kgl}@cs.aau.dk


Abstract
This paper deals with the issue of discounting in weighted timed transition systems. Discounting provides a way to model optimal-cost problems for infinite runs and has applications in optimal scheduling and other areas.
We show that when postulating a certain natural additivity property for the discounted weights of runs, there is essentially only one possible way to introduce a discounting semantics. Our proof relies on the fact that a certain functional equation essentially only has one solution, for which we provide an elementary proof.
Keywords: Timed transition systems, timed automata, weighted timed automata, priced timed automata, discounting

Introduction
Discounting is a well-known principle in economics and has for some time also been used in optimal control [10] and game theory [12]. To discount the future means to give more weight to events which are about to happen and less to events which only happen at a later time. Hence the contribution of an event with weight w to the overall behaviour is given by g(t)w, where g is a decreasing function and t is the time after which the event happens. It is standard to use exponential discount g(t) = λt for some λ ∈ ]0, 1[ (which in applications in economics is given by the actual or projected interest rate), but a priori other discount functions are possible.
In theoretical computer science, discounting has recently been introduced to probabilistic and general quantitative systems [7,8,9]. The point of view in these papers is the above-mentioned one that events at future time t are discounted by λt, and it is shown that the introduced discounted systems theory has good properties. For real-time systems, discounting has been used in [13,14], and in [11,17] to address issues of optimal scheduling. In these latter papers, weighted timed au- tomata are used to model systems with both weights and timing information, and
discounting is employed to measure accumulated weights of infinite paths.

1571-0661 © 2009 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2009.10.003

For the modeling and analysis of real-time systems such as timed automata [1], time Petri nets [15], timed CCS [16] and other, the notion of timed transition system serves as the basic semantic model. For the analysis of models with both weights and timing information [2,3], this role is played by weighted timed transition systems.
When using discounting with weighted timed transition systems, there are sev- eral choices available. One can discount by steps as e.g. in [14,17], or by elapsed time as e.g. in [11]. Under the former version, events are discounted by the number
of steps it takes to reach them; under the latter, by the time elapsed until their occurrence.
It is the purpose of this note to show that if one requires a certain natural additivity property for the discounted accumulated weights of runs, then there is essentially only one way to introduce discounting into the weighted timed transition systems formalism.
The first author wishes to express his gratuity to Arne Jensen and Martin Raussen from the mathematical sciences department at Aalborg University for in- teresting discussions on the subject of Section 3. Also, the authors acknowledge some useful comments by the anonymous referees.
Discounting in weighted timed transition systems
Definition 2.1 A weighted timed transition system (S, Ts, Td, w, r) consists of a set of states S, a set of switch transitions Ts ⊆ S × S, a set of delay transitions Td ⊆ S × ≥0 ×S, transition weights w : Ts → , and state weight rates r : S → . The delay transitions are subject to the following axioms:
(s, 0, s) ∈ Td for all s ∈ S,
for any (s1, x, s2) ∈ Td and (s2, y, s3) ∈ Td, also (s1,x + y, s3) ∈ Td,
for any (s1, x, s2) ∈ Td and y ≤ x, there exists s3 ∈ S such that (s1, y, s3) ∈ Td
and (s3,x − y, s2) ∈ Td, and
whenever (s, x, s1) ∈ Td and (s, x, s2) ∈ Td, then s1 = s2.
Transitions are usually written s → s' and s −→x  s' instead of (s, s') ∈ Ts respec-
tively (s, x, s') ∈ T ; a general (switch or delay) transition will be denoted −→  . The weight w(e) of a switch transition e = s → s' can be used to model an amount of resources required for, or (if negative) of resources gained by, taking this transition, and the weight rate r(s) of a state s to measure the amount of resources per time unit required to stay (or again, gained by staying) in that state.
We say that a weighted timed transition system is delay-enabled if there is s ∈ S
and x ∈ >0 such that (s, x, s') ∈ Td for some (necessarily unique) s' ∈ S. This is a natural property; weighted timed transition systems which are not delay-enabled are discrete.
Weighted timed transition systems arise naturally as the semantics of weighted timed automata, see [4,11]. The precise formulation of this shall be of little concern for us here; we only note that the weighted timed transition systems arising this way obey the following useful property:

If (S, Ts, Td, w, r) arises as the semantics of a weighted timed automaton A, then the states in S are pairs consisting of locations of A and valuations of its clocks. The weight rates depend on the locations only, and a delay only changes the valuation component of a state, hence if (s, x, s') ∈ Td, then r(s) = r(s'). When a weighted timed transition system obeys this last property, we shall say that is has delay-invariant weight rates.
A path in a weighted timed transition system T is a (finite or infinite) sequence
s0 −→ s1 −→ s2 −→ · · · of switch and delay transitions in T . The set of all finite

paths in T  is denoted P  , and if π   = s1 −→      s1 −→      ··· −→ s1 ,π   = s2 −→      s2 −→ 
··· −→

T	1	0	1	n	2	0	1
 	 	 
2 ∈ УT with s1 = s2, then π1 ◦ π2 = s1 −→ s1 −→ ··· −→  1 −→ s2 −→ ··· −→  2
denotes their concatenation.
When employing weighted timed transition systems for optimal scheduling, one uses the weight and rate functions to introduce an accumulated weight function W : PT → . When dealing with problems in reachability optimal scheduling as
e.g. in [2,3], this suffices, but for inﬁnite optimal scheduling one has to introduce
accumulated weights of infinite paths as a limit of the accumulated weights of their finite prefixes, cf. [4,11,14].
There are different ways to ensure that the above-mentioned limit exists for most paths, notably the quotient approach of [4] and the (different) discounting approaches of [11,14] and others. The technical definitions are of little importance here, as we shall be interested in a specific property of the accumulated weight function rather than in its precise formulation:
Definition 2.2 An accumulated weight function W : PT →  is said to be dis- counted in time if there exists a function g : ≥0 →  such that

W (e ◦ π) = W (e)+ g(x)W (π)
for all delay transitions e = s −→x  s' ∈ Td and compatible paths π.
Hence an accumulated weight function which is discounted in time has precisely the property alluded to in the introduction: After a delay of x time units, weights are discounted by a value g(x) according to a (usually decreasing) discount function g.
We shall show below that for weighted timed transition systems arising in prac- tice, this definition imposes severe restrictions as to how accumulated weight func- tions can be defined. Note that the definition also implies that an accumulated weight function which is discounted in time enjoys a useful recursive property which can be employed in computations.
We say that an accumulated weight function W : PT →  which is discounted in time, in a weighted timed transition system T with delay-invariant weight rates,
is natural if W (s −→x  s') only depends on s and x for all delay transitions s −→x  s', and
if both W and its associated discount function g are non-trivial, i.e. not identical
to zero.

Theorem 2.3 Let 7 be a delay-enabled weighted timed transition system with delay- invariant weight rates and W : УT →  a natural accumulated weight function which is discounted in time, with associated discount function g : ≥0 → . Then there exist λ ∈ >0 and α : S →  such that
x	'	∫ x  t	x
W (s —→ s ) = α(s)	λ dt	and	g(x) = λ
0

for all s ∈ S and all delay transitions s —→x
s'.

The above theorem implies that if one is interested in a recursive property as of Definition 2.2, then there is essentially only one possible definition of accumulated weight of delays. Incidentally, this is also the definition given in [11]. The proof of the theorem relies on the solution of a certain functional equation which is given below.

Proof
Theorem 2.3 will be an easy corollary of the below theorem on a certain functional equation.  The equation is a generalization of the well-known Cauchy equation f (x + y) = f (x) + f (y) for which a full solution was given in Cauchy’s [6], and the theorem shows that also its solution is a generalization of Cauchy’s. Moreover, the proof given uses only methods already available to Cauchy in 1821; the authors would be interested to see whether the equation can be solved more easily using some more modern methods.
Theorem 3.1 Continuous functions f, g : ≥0 →  satisfy the functional equation
f (x + y) = f (x)+ g(x)f (y)	(1)
if and only if one of the following properties holds:
f (x) ≡ 0,
f (x) ≡ k /= 0 and g(x) ≡ 0, or
f (x) = α ∫ x λtdt and g(x) = λx for some α, λ ∈  with α /= 0 and λ > 0.
Proof.
§1. The function f (x) ≡ 0 is a solution of Equation (1) for all functions g. If f (x) ≡ k /= 0, then k = k + g(x)k and hence g(x) = 0 for all x. On the other hand, if g(x0) = 0 for some x0, then f (x0 + y) = f (x0) for all y, hence f is constant. This gives the trivial solutions in the first two items of the theorem.
§2. The special case g(x) ≡ 1 is treated in [6]; for this, the functions f (x) = αx, for α ∈ , are the only solutions. We can assume from now on that f (x) /= 0 for some x, g(x) /= 1 for some x, and that g(x) /= 0 for all x.
§3. Let x0 be such that f (x0) = 0. Then f (x0+y) = g(x0)f (y) and f (y+x0) = f (y) for all y, hence g(x0) = 1 by the assumptions in §2.

On the other hand, assume x0 is such that g(x0) = 1. Then f (x0 + y) = f (x0)+ f (y) and f (y + x0) = f (y)+ g(y)f (x0) for all y, whence f (x0) = 0 by our assumptions.
§4. By substituting y = 0 in Equation (1), we get f (x) = f (x) + g(x)f (0) for all x, hence f (0) = 0 by the assumptions in §2. By §3, g(0) = 1. With our assumptions, this in turn implies that g(x) > 0 for all x — for if g(x) < 0 for some x, then by continuity also g(y) = 0 for some y, which we have precluded in §2.
§5. Let x > 0, then by induction on the equation f ((k + 1)x) = f (kx)+ g(kx)f (x) we get

f (kx) = f (x)
k−1

i=0
g(ix)
(2)

for all k ∈ +.	On the other hand, a similar induction on the equation
f ((k + 1)x) = f (x)+ g(x)f (kx) leads to





for all k ∈ +.

f (kx) = f (x)
k−1

i=0
(g(x))i

(3)

§6. Let x0 > 0 and assume that f (x0) = 0. Then by Equation (3), f (kx0) = 0 for all k ∈ +.
Now let n, k ∈ + and x1 = n x0, then


0 = f (kx1) = f (x1)
k−1

i=0
(g(x1))i

(4)

by Equation (3). Assume f (x1) /= 0, then g(x1) /= 1 by §3. Hence we can multiply Equation (4) by 1 — g(x1), to arrive at 1 — ((g(x1))k = 0. As g(x1) > 0 and g(x1) /= 1, this is impossible.
We have seen that f (x0) = 0 implies f ( n x0) = 0 for all n, k ∈ +, hence
f (αx0) = 0 for all α ∈ >0 by continuity. But then f (x) = 0 for all x > 0, which we have precluded in §2. We must thus have f (x) /= 0 for all x /= 0;
by §3, also g(x) /= 1 for all x /= 0.
§7. For x /= 0 and k ∈ +, we can combine Equation (2) and Equation (3) and divide by f (x) to get
k−1	k−1
Σ g(ix) = Σ(g(x))i
i=0	i=0
By induction this implies that for all k ∈ +,

g(kx) = (g(x))k	(5)

§8. Let λ = g(1). Setting x = 1 in Equation (5), we see that g(k) = λk for all k ∈

+. If x = n for n, k ∈ + in the same equation, then (g(x))k = g(kx) = λn,

hence g
 n 

= λk for all n, k ∈ +. By continuity, g(x) = λx
for all x ∈ ≥0.

§9. Let β = f (1). Setting x = 1 in Equation (3) gives



f (k) = β
k−1
λi
1 — λk
β 1

— λ
i=0
for all k ∈ +. If x = n for n, k ∈ + in the same equation, then





and thus
1 — λn β 1 — λ
k−1
= f (kx) = f (x)	(g(x))i
i=0

n

= f (x)
1 — λn


1 — λx

f n = β 1 — λk 

for all n, k ∈
 . By continuity, f (x) = β 1−λx
for all x ∈
>0, and setting

α = β ln λ gives the desired result.

Theorem 2.3 now follows easily:
Proof of Theorem 2.3. Let s ∈ S such that s —x→0




s' ∈ Td

 


for some x0 ∈ >0,

then for all x ≤ x0 there is s'' ∈ S such that s —→x s'' ∈ Td. Define fs : [0, x0] → 
by fs(x) = W (s —→x  s').  Then fs(x + y) = fs(x) + g(x)fs(y) for all x, y ∈ ≥0
with x + y ≤ x0, and an easy adaptation of the proof of Theorem 3.1 shows that this implies that we have λ ∈	>0 and αs ∈	such that g(x) = λx and fs(x) = 
αs ∫ x λtdt for all x ∈ [0, x0].
The only cases left to consider are states s ∈ S for which s —→x s' only for x = 0,
but for these the statement of the theorem is empty.	 

Conclusion and further work
We have shown that if one wants an accumulated weight function in a timed transi- tion system to satisfy a certain natural additivity property, as given in Definition 2.2, then there is only very little choice left as to how to define it. In particular, neither the quotient approach of [4] nor the step-based discounting in [14,17] give rise to accumulated weight functions which are discounted in time.
To be discounted in time is not only a natural property to require of an accu- mulated weight function, it also implies a recursive characterization of accumulated weight. Hence one can employ a fixed point computation for finding accumulated weights of (finite or infinite) paths, and also for finding paths which are optimal in some sense. This in turn is expected to have implications for the availability of zone-based algorithms for computing accumulated weights in weighted timed automata.

References
Alur, R. and D. Dill, A theory of timed automata, Theoretical Computer Science 126 (1994), pp. 183– 235.
Alur, R., S. L. Torre and G. J. Pappas, Optimal paths in weighted timed automata, Theoretical Computer Science 318 (2004), pp. 297–322.
Behrmann, G., A. Fehnker, T. Hune, K. G. Larsen, P. Pettersson, J. Romijn and F. Vaandrager, Minimum-cost reachability for priced timed automata, in: Proc. 4th Int. Work. on Hybrid Systems: Computation and Control (HSCC’01), Lecture Notes in Computer Science 2034 (2001), pp. 147–161.
Bouyer, P., E. Brinksma and K. G. Larsen, Staying alive as cheaply as possible, in: Proc. 7th Int. Work. on Hybrid Systems: Computation and Control (HSCC’04), Lecture Notes in Computer Science 2993 (2004), pp. 203–218.
Cassez, F. and C. Jard, editors, “Proc. 6th Int. Conf. on Formal Modeling and Analysis of Timed Systems (FORMATS’08),” Lecture Notes in Computer Science 5215, Springer, 2008.
Cauchy, A.-L., “Cours d’analyse de l’Ecole royale polytechnique. Premi`ere partie: Analyse alg´ebrique,” Editions Jacques Gabay, Paris, 1989, (Reprint of the 1821 edition).
de Alfaro, L., M. Faella, T. A. Henzinger, R. Majumdar and M. Stoelinga, Model checking discounted temporal properties, Theoretical Computer Science 345 (2005), pp. 139–170.
de Alfaro, L., M. Faella and M. Stoelinga, Linear and branching metrics for quantitative transition systems, in: J. D´ıaz, J. Karhum¨aki, A. Lepist¨o and D. Sannella, editors, Proc. 31st Int. Coll. Automata, Languages and Programming (ICALP 2004), Lecture Notes in Computer Science 3142 (2004), pp. 97– 109.
de Alfaro, L., T. A. Henzinger and R. Majumdar, Discounting the future in systems theory, in: J. C. M. Baeten, J. K. Lenstra, J. Parrow and G. J. Woeginger, editors, Proc. 30th Int. Coll. Automata, Languages and Programming (ICALP 2003), Lecture Notes in Computer Science 2719 (2003), pp. 1022–1037.
Derman, C., “Finite State Markovian Decision Processes,” Academic Press, 1970.
Fahrenberg, U. and K. G. Larsen, Discount-optimal infinite runs in priced timed automata, Electronic Notes in Theoretical Computer Science 239 (2009), pp. 179–191.
Filar, J. and K. Vrieze, “Competitive Markov decision processes,” Springer-Verlag, 1997.
Henzinger, T. A., R. Majumdar and V. S. Prabhu, Quantifying similarities between timed systems, in:
P. Pettersson and W. Yi, editors, Proc. 3rd Int. Conf. on Formal Modeling and Analysis of Timed Systems (FORMATS’05), Lecture Notes in Computer Science 3829 (2005), pp. 226–241.
Jurdzinski, M. and A. Trivedi, Concavely-priced timed automata, in: Cassez and Jard [5], pp. 48–62.
Merlin, P. M. and D. J. Faber, Recoverability of communication protocols: Implications of a theoretical study, IEEE Trans. Comm. COM-24 (1976), pp. 1036–1043.
Moller, F. and C. M. N. Tofts, A temporal calculus of communicating systems, in: J. C. M. Baeten and J. W. Klop, editors, Proc. 1st Int. Conf. on Concurrency Theory (CONCUR’90), Lecture Notes in Computer Science 458 (1990), pp. 401–415.
Thrane, C., U. Fahrenberg and K. G. Larsen, Quantitative analysis of weighted transition systems, Journal of Logic and Algebraic Programming (2009), to appear.
