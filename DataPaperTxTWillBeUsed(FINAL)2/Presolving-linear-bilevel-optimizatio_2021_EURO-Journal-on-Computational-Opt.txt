EURO Journal on Computational Optimization 9 (2021) 100020

		




Presolving linear bilevel optimization problems
Thomas Kleinerta,b, Julian Manns a, Martin Schmidtc,∗, Dieter Weninger a
a Friedrich-Alexander-Universität Erlangen-Nürnberg, Discrete Optimization, Cauerstr. 11, Erlangen 91058, Germany
b Energie Campus Nürnberg, Fürther Str. 250, Nürnberg 90429, Germany
c Trier University, Department of Mathematics, Universitätsring 15, Trier 54296, Germany


a r t i c l e	i n f o	a b s t r a c t

	

2010 MSC:
90-08
90C11
90C30
90C26
90C46

Keywords:
Linear bilevel optimization Presolve
Computational analysis
Linear bilevel optimization problems are known to be strongly NP-hard and the computational techniques to solve these problems are often motivated by techniques from single-level mixed-integer optimization. Thus, during the last years and decades many branch-and-bound methods, cutting planes, or heuristics have been proposed. On the other hand, there is almost no literature on presolving linear bilevel problems although presolve is a very important ingredient in state-of-the-art mixed-integer optimization solvers. In this paper, we carry over standard presolve techniques from single-level optimization to bilevel problems and show that this needs to be done with great caution since a naive application of well-known techniques does often not lead to correctly presolved bilevel models. Our numerical study shows that presolve can also be very beneficial for bilevel problems but also highlights that these methods have a more heterogeneous effect on the solution process compared to what is known from single-level optimization. As a side result, our numerical experiments reveal that there is an urgent need for better and more heterogeneous test instance libraries to further propel the field of computational bilevel optimization.





Introduction

In the last years and decades, bilevel optimization has received in- creasing attention. In particular, the progress of computational mixed- integer bilevel optimization has been significant. This progress resem- bles the development in mixed-integer single-level optimization for two reasons. First, many algorithms for (mixed-integer) linear bilevel prob- lems rely on highly-developed mixed-integer solvers as the working horse. Second, game-changing developments from mixed-integer opti- mization are also used in bilevel optimization such as tailored branch- and-bound methods (Bard and Moore, 1990; Moore and Bard 1990; DeNegre, 2011), cutting planes (Fischetti et al., 2018a; Tahernejad et al., 2020; Audet et al., 2007; Kleinert et al., 2021), and heuristics (DeNegre, 2011; Fischetti et al., 2018b; Kleinert and Schmidt, 2020)—to name only a few references for each of the fields. These developments allow to tackle bilevel problems of significant size today that have been far out of reach one or two decades ago. Nevertheless, one main driver of the success of mixed-integer solvers has hardly seen any attention in the bilevel literature so far: presolve.
As usual, presolve for bilevel problems should be applied, in general, to reduce the size of the problem in terms of variables and constraints as well as to obtain a tighter formulation of the problem. For bilevel problems, however, it is particularly important to reduce the number of
follower constraints since classic reformulations such as the one using the Karush–Kuhn–Tucker (KKT) conditions lead to harder problems if the number of follower constraints is large.
To the best of our knowledge, Fischetti et al. (2017) is the only work that computationally analyzes a general-purpose presolve method for bilevel problems. The authors show that applying duality fixing in the lower level of a mixed-integer bilevel problem can be very effective. We will later numerically confirm this result for linear bilevel problems as well. One reason for the sparse literature on bilevel presolve might be the inherent nonconvex structure of bilevel problems. This structure yields some surprising properties that render presolving bilevel prob- lems a very challenging task. In Macal and Hurter (1997), it is discussed that bilevel problems do not posses the independence of irrelevant con- straints (IIC) property known from single-level optimization. Essentially, the consequence is that adding inequalities to the lower-level problem of a bilevel problem that are inactive at the optimal bilevel solution may change the bilevel feasible set and, ultimately, the optimal solution as well. In Dempe and Lohse (2011), it is shown that under certain assump- tions on the bilevel problem, a global solution remains locally optimal when adding irrelevant constraints. The two results render cutting-plane algorithms, which subsequently develop the lower-level problem, infea- sible. This is in contrast to single-level optimization, where a solution of a relaxed problem (in which, e.g., some constraints are left out) that

∗ Corresponding author.
E-mail addresses: thomas.kleinert@fau.de (T. Kleinert), julian.manns@fau.de (J. Manns), martin.schmidt@uni-trier.de (M. Schmidt), dieter.weninger@fau.de (D. Weninger).
https://doi.org/10.1016/j.ejco.2021.100020 Received 19 July 2021; Accepted 7 November 2021
2192-4406/© 2021 The Author(s). Published by Elsevier Ltd on behalf of Association of European Operational Research Societies (EURO). This is an open access article under the CC BY-NC-ND license (http://creativecommons.org/licenses/by-nc-nd/4.0/)

where S(𝑥) denotes the set of optimal solutions or the rational reaction set of the so-called follower (or lower-level) problem

min
𝑦∈ℝ
𝑓 ⊤𝑦  s.t.  𝐷𝑦 ≥ 𝑏 − 𝐶𝑥, 𝑦𝐹 ≤ 𝑦 ≤ 𝑦̄𝐹 ,	(2)








Fig. 1. Feasible set and optimal solution without (left) and with (right) bound tightening applied. The dashed black line corresponds to the upper-level cou- pling constraint, the orange lines correspond to the lower-level constraints, the gray area is the joint feasible set w.r.t. the upper- and lower-level constraints, and the blue lines denote the bilevel feasible set with the dot marking the opti-
with 𝑐 ∈ ℝ𝑛, 𝑑, 𝑓 ∈ ℝ𝑚, 𝐴 ∈ ℝ𝑘×𝑛, 𝐵 ∈ ℝ𝑘×𝑚, 𝑎 ∈ ℝ𝑘, 𝐶 ∈ ℝ𝓁×𝑛, 𝐷 ∈ ℝ𝓁×𝑚, and 𝑏 ∈ ℝ𝓁 . Further, we denote variable bounds by 𝑥𝐿, 𝑥̄𝐿 ∈ ℝ𝑛 and 𝑦𝐿, 𝑦̄𝐿 ∈ ℝ𝑚 as well as 𝑦𝐹 , 𝑦̄𝐹 ∈ ℝ𝑚. Note that we explicitly distin- guish leader and follower bounds on the follower variables 𝑦. We exploit
these bounds later in various presolve techniques.
lution, i.e., in case the set of optimal follower solutions S(𝑥) is not a The formulation (1) establishes the optimistic (or cooperative) so- singleton, the reaction 𝑦 ∈ S(𝑥) is chosen in favor of the objective func-
tion of the so-called leader (or upper-level) problem (1); see, e.g., Dempe (2002). We denote the shared constraint set and its projection onto the decision space of the leader by
{

mal solution. (For interpretation of the references to color in this figure legend, the reader is referred to the web version of this article.)
is also feasible for the omitted constraints is the global optimum. Addi- tionally, the results also indicate that applying common mixed-integer presolve techniques such as, e.g., bound strengthening, to bilevel prob-
Ω ∶=

and
(𝑥, 𝑦) ∶ 𝐴𝑥 + 𝐵𝑦 ≥ 𝑎,
}
𝐶 𝑥 + 𝐷𝑦 ≥ 𝑏, 𝑥𝐿 ≤ 𝑥 ≤ 𝑥̄𝐿, 𝑦𝐿 ≤ 𝑦 ≤ 𝑦̄𝐿, 𝑦𝐹 ≤ 𝑦 ≤ 𝑦̄𝐹

lems may not be without obstacles. To shed some light on this, let us consider the linear bilevel problem
Ω  ∶= { ∶ ∃𝑦 with (𝑥, 𝑦)	}

min
𝑥,𝑦∈ℝ
𝑥 s.t. 𝑦 ≥ 0.5𝑥 + 1, 𝑥 ≥ 0, 𝑦 ∈ arg min {𝑦̄ ∶ 𝑦̄ ≥ 2𝑥 − 2, 𝑦̄ ≥ 0.5},
𝑦̄∈ℝ
respectively. Finally, the bilevel feasible set, often also called the in-
ducible region, is denoted by

with optimal solution (2,2); see Fig. 1 (left).
When strengthening the bound 𝑦̄ ≥ 0.5 in the lower-level problem
T ∶=
{	}
(𝑥, 𝑦) ∶ 𝐴𝑥 + 𝐵𝑦 ≥ 𝑎, 𝑥𝐿 ≤ 𝑥 ≤ 𝑥̄𝐿, 𝑦𝐿 ≤ 𝑦 ≤ 𝑦̄𝐿, 𝑦 ∈ S(𝑥) .

using the constraint 𝑦 ≥ 0.5𝑥 + 1 of the upper-level problem, one finds that the minimum value of 0.5𝑥 + 1 is 1 due to 𝑥 ≥ 0, which increases the bound of 𝑦̄ to 𝑦̄ ≥ 1. This yields the problem
It is well known that the set {(𝑥, 𝑦) ∶ 𝑥 ∈ ℝ𝑛, 𝑦 ∈ S(𝑥)} is nonconvex
as well as that the bilevel feasible set T is nonconvex and, in general,
disconnected; see, e.g., Bard (1998) or Dempe (2002). This is also il-

min
𝑥,𝑦∈ℝ
𝑥 s.t. 𝑦 ≥ 0.5𝑥 + 1, 𝑥 ≥ 0, 𝑦 ∈ arg min{𝑦̄ ∶ 𝑦̄ ≥ 2𝑥 − 2, 𝑦̄ ≥ 1},
𝑦̄∈ℝ
lustrated in Fig. 1 (right). Consequently, even linear bilevel problems are intrinsically nonconvex and nonsmooth. It is shown in Hansen et al.

having the optimal solution (0, 1) ≠ (2, 2); see Fig. 1 (right). See also the
thesis Manns (2020) for further examples. It can thus not be expected
that presolve techniques known from single-level mixed-integer linear optimization can be applied directly to bilevel problems.
In this paper we formally and computationally analyze presolve methods for the easiest variant of bilevel problems, i.e., problems with a linear upper and lower level. To this end, we mainly carry over classic presolve techniques from mixed-integer optimization to the bilevel set- ting, which has—to the best of our knowledge—not been done before
(1992) that linear bilevel problems are strongly NP-hard and, in Vicente et al. (1994), that even checking local optimality of a given point is NP- hard.
These unpleasant properties of linear bilevel problems are well known and it is thus clear that one faces different challenging aspects when solving bilevel problems. However, it is still surprising that ap- plying classic presolve techniques like, e.g., bound tightening, fails for bilevel problems; see Fig. 1. We highlight that it is in particular invalid to exploit the so-called high-point relaxation

in the literature with the only exception being a single technique dis- cussed in Fischetti et al. (2017). We introduce the relevant notation and
min
𝑥,𝑦
𝑐⊤𝑥 + 𝑑⊤𝑦  s.t.  (𝑥, 𝑦) ∈ Ω	(3)

theory in Section 2. We then introduce several presolve methods for lin- ear bilevel problems in Section 3 by carrying over classic presolve ideas from (single-level) linear and mixed-integer optimization to the field of bilevel problems. Afterward, we evaluate these methods in a computa- tional study in Section 4. These numerical experiments reveal two main insights. First, we observe that presolving linear bilevel problems can be very beneficial for some instances whereas it is rather harming for the solution process of other instances. Second, although we have a test set of more than 2500 instances, only very few of them are affected by some of the presolve methods discussed in this paper. We conclude, thus, that there is an urgent need for more realistic and more heterogeneous test instance libraries to further propel the field of computational bilevel optimization; see Section 5.
Notation and theoretical background

In this paper, we consider linear bilevel problems of the form
to presolve the original bilevel problem (1). As briefly discussed in the introduction, this is related to the independence of irrelevant constraints property. For single-level problems, this property states that adding any constraint that is satisfied at the global optimal solution does not change the global optimum. In Macal and Hurter (1997), the IIC property for linear bilevel problems of the form (1) is defined as follows.
Definition 1. Let Ω∗ be the set of optimal solutions of a linear bilevel problem 𝑃 of the form (1). Further, let 𝑃̃ ∶= 𝑃 (𝑢, 𝑣, 𝑤) be the modi- fied problem, in which the inequality 𝑢⊤𝑥 + 𝑣⊤𝑦 ≥ 𝑤 is added to the follower problem of 𝑃 and let Ω̃ ∗ be its set of optimal solutions. 𝑃 is called independent of irrelevant constraints, if for any (𝑢, 𝑣, 𝑤) ∈ ℝ𝑛+𝑚+1 with 𝑢⊤𝑥∗ + 𝑣⊤𝑦∗ ≥ 𝑤 it holds (𝑥∗, 𝑦∗) ∈ Ω̃ ∗ for every (𝑥∗, 𝑦∗) ∈ Ω∗.
It is shown in Macal and Hurter (1997) that bilevel problems can only possess the IIC property if the solution of the high-point relaxation (3) is also a solution of the bilevel problem (1). Consequently, most practical bilevel problems for which the objectives of the leader and the follower

min
𝑥∈ℝ𝑛 ,𝑦∈ℝ𝑚
𝑐⊤𝑥 + 𝑑⊤𝑦
are not aligned, lack the IIC property.

s.t.	𝐴𝑥 + 𝐵𝑦 ≥ 𝑎,
𝑥𝐿 ≤ 𝑥 ≤ 𝑥̄𝐿, 𝑦𝐿 ≤ 𝑦 ≤ 𝑦̄𝐿,
𝑦 ∈ S(𝑥),
(1)
On the other hand, Definition 1 of the IIC property for bilevel prob- lems is not entirely in line with the IIC property known for single-level problems. In order to see this, we consider the equivalent single-level


reformulation	this computation of tighter bounds is computationally costly. For more

min
𝑥,𝑦
𝑐⊤𝑥 + 𝑑⊤𝑦	(4a)
details on this approach applied to single-level problems we refer to Gleixner et al. (2017). In practice, there exist different approaches

s.t.	(𝑥, 𝑦) ∈ Ω,	(4b)
𝑓 ⊤𝑦 ≤ 𝜑(𝑥),	(4c)
of Problem (1), which makes use of the optimal-value function
to compute tight bounds eﬃciently for single-level optimization prob- lems and, usually, there is a trade-off between the tightness of the de- rived bounds and computation times. In the simplest case, one consid- ers each constraint separately and tries to derive tighter bounds for the

𝜑(𝑥) ∶= min
𝑦∈ℝ𝑚
{	}
𝑓 ⊤𝑦 ∶ 𝐷𝑦 ≥ 𝑏 − 𝐶𝑥, 𝑦𝐹 ≤ 𝑦 ≤ 𝑦̄𝐹
variables occurring in it, which is doable in linear time; see Achterberg et al. (2020) and Martin (2001). Approaches that consider more than one constraint simultaneously, see, e.g., Achterberg et al. (2014) and Chen

lem by (𝑥∗, 𝑦∗). It is clear that any inequality valid for (𝑥∗, 𝑦∗) can safely of the follower problem. We denote the optimal solution of this prob-
be added to Problem (4), i.e., the single-level problem (4) possesses the (single-level) IIC property. Adding such a constraint to Problem (4) how- ever corresponds to adding an irrelevant constraint to the leader prob- lem of the bilevel problem (1). On the contrary, adding a constraint that is valid for the bilevel optimal solution to the follower problem of
(1) may change the rational reaction set S(𝑥), respectively, the optimal-
value function 𝜑(𝑥). In the point of view of Problem (4), adding such
to the set Ω but may also change the right-hand side of the existing a constraint to the follower problem thus not only adds this constraint
Constraint (4c). In this case, the concept of the (single-level) IIC prop- erty is not applicable. Detecting such constraints that do not affect Con- straint (4c) is a delicate task and will play a crucial role in the presolve of linear bilevel problems.
In general, the goal of presolving optimization problems is to trans-
et al. (2020), usually yield better bounds than approaches that consider
only one constraint. However, an increased running time is to be ex- pected. Naturally, this procedure can be continued until all constraints are considered, which results in the best possible bounds. Obviously, the computational effort involved is also the largest. In this work, we focus on the analysis of the effectiveness of bound strengthening by using the best available bounds and, thus, we refrain from using other methods as to solve (5) to compute these bounds.
The strengthening of follower bounds 𝑦𝐹 and 𝑦̄𝐹 located in the fol-
lower problem is not that straightforward. We already illustrated in the
the shared constraint set Ω may result in wrong “solutions” of Prob- introduction that a naive strengthening of follower bounds that exploits
lem (1). The reason is that the shared constraint set also contains the leader constraints. This suggests to tighten follower bounds by disre- garding the leader constraints, i.e., by solving

form the given problem into an easier-to-solve problem that has the following properties:
min
𝑥,𝑦
and
𝑦𝑖  s.t.  𝐶𝑥 + 𝐷𝑦 ≥ 𝑏, 𝑦𝐹 ≤ 𝑦 ≤ 𝑦̄𝐹	(6)

It is infeasible (unbounded) if and only if the original problem is infeasible (unbounded).
max
𝑥,𝑦
𝑦𝑖
s.t.  𝐶𝑥 + 𝐷𝑦 ≥ 𝑏, 𝑦𝐹 ≤ 𝑦 ≤ 𝑦̄𝐹 ,	(7)

Every feasible solution of the presolved problem can be transformed into a feasible solution of the original problem.
The objective value of every optimal solution of the presolved prob- lem matches (at least after possibly required post-processing steps) the optimal objective value of the original problem.
This gives rise to two different presolve strategies. First, we can mod- ify Problem (1) in a way that leaves the bilevel feasible set T unchanged, i.e., we can apply a feasibility-based presolve; see, e.g., Belotti et al. (2010) and Belotti et al. (2012) for single-level problems. Second, we can apply an optimality-based presolve by modifying the bilevel feasi- ble set T in a way to ensure that at least one bilevel optimal solution remains feasible for the reduced problem; see, e.g., Ryoo and Sahinidis (1996) for single-level problems or the removal of dominated columns in mixed-integer programming (Gamrath et al. 2015). In the following section, we introduce several such presolve methods. We also evaluate these methods in a computational study in Section 4.

Presolve methods

In this section, we present presolve methods for linear bilevel prob-
for 𝑖 = 1, … , 𝑚. These problems can be further tightened by considering
ables 𝑥, i.e., leader constraints with 𝐵𝑖⋅ = 0 or leader bounds 𝑥𝐿 ≤ 𝑥 ≤ follower-independent leader constraints that only depend on leader vari-
𝑥̄𝐿. We show in the following theorem that follower-independent leader
constraints can be moved to the follower problem without changing the bilevel feasible set T .
Theorem 1. Consider a leader constraint 𝑢⊤𝑥 ≥ 𝑤 with 𝑢 ∈ ℝ𝑛 and 𝑤 ∈ ℝ
Problem (1) by moving the constraint 𝑢⊤𝑥 ≥ 𝑤 to the follower problem. We of the bilevel problem (1). Further, consider the bilevel problem obtained from denote the feasible set of the latter problem by T 𝑀 . Then, T = T 𝑀 holds.
Proof. The shared constraint set for both problems is given by
Ω̃ = Ω∩ {(𝑥, 𝑦) ∶ 𝑢⊤𝑥 ≥ 𝑤}.
the constraint is moved to the follower, by S 𝑀 . We then have Further, we denote the rational reaction set of Problem (1), for which
T 𝑀 = Ω̃ ∩ {(𝑥, 𝑦) ∶ 𝑥 ∈ ℝ𝑛, 𝑦 ∈ S 𝑀 (𝑥)}.
Thus, for any point (𝑥, 𝑦) in T 𝑀 it holds 𝑢⊤𝑥 ≥ 𝑤. Further, for 𝑥 ∈ ℝ𝑛 it
holds

lems.	{	⊤

Bound strengthening
S 𝑀 (𝑥) =
S(𝑥),  if 𝑢 𝑥 ≥ 𝑤,
∅,	if 𝑢⊤𝑥 < 𝑤.

A well-known presolve technique for single-level optimization is bound strengthening (Savelsbergh, 1994; Achterberg et al., 2020). This approach tries to strengthen variable bounds by domain propagation without changing the set of feasible solutions.
Type (1). Leader bounds 𝑥𝐿 and 𝑥̄𝐿 can be tightened by exploiting the We now consider bound strengthening for bilevel problems of shared constraint set Ω and, thus, by solving
min {	}	{	}
Consequently,
T 𝑀 = Ω̃ ∩ {(𝑥, 𝑦) ∶ 𝑥 ∈ ℝ𝑛, 𝑦 ∈ S 𝑀 (𝑥)}
= Ω̃ ∩ {(𝑥, 𝑦) ∶ 𝑥 ∈ ℝ𝑛, 𝑦 ∈ S(𝑥)} = T .	□
This theorem can be exploited to tighten the Problems (6) and (7).

to Problem (6) and (7). In particular, this includes the bounds 𝑥𝐿 ≤ 𝑥 ≤ Observation 1. We can add all follower-independent leader constraints
𝑥̄𝐿 on the leader variables.

𝑥𝑖 ∶ (𝑥, 𝑦) ∈ Ω	and  max 𝑥𝑖 ∶ (𝑥, 𝑦) ∈ Ω ,	(5)

respectively, for 𝑖 = 1, … , 𝑛. Tight follower bounds 𝑦𝐿 and 𝑦̄𝐿 located
in the leader problem can be derived analogously. We emphasize that
Let us also note that we can handle tightened bounds also slightly different. In practice, linear bilevel problems (1) are mostly solved by a



single-level reformulation that replaces the follower problem with its KKT conditions or with the strong-duality condition. In this view, it makes sense to move follower bounds to the leader instead of tightening them. This results in a smaller single-level reformulation. For instance, in the case that the KKT reformulation is used, moving bounds to the leader results in fewer KKT complementarity conditions. However, it is well known that moving constraints between the leader and the fol- lower problem is not without obstacles and, in general, it may change the optimal solution. Nevertheless, we make the following observation.
Observation 2. Consider a follower variable 𝑦 with a lower bound 𝑦𝐹
From now on, we consider the bilevel setting again. A straightfor- ward idea is to apply the approach stated above only to the parametric
follower problem (2). In other words, we have two follower variables 𝑦𝑖
and 𝑦𝑗 for some 𝑖 ≠ 𝑗, 𝑖, 𝑗 ∈ {1, … , 𝑚}, with parallel columns in the fol-
necessarily be parallel, i.e., we might have 𝐵⋅𝑖 ≠ 𝜇𝐵⋅𝑗 . In this setting, we lower problem. However, the corresponding leader columns need not
This removes the two variables 𝑦𝑖 and 𝑦𝑗 from the follower problem can crush the two variables in the follower problem according to (8).
such that they only appear in the leader problem. In order to still re- spect the (crushed) optimal follower solution in the leader problem, we

𝑖
that can be tightened, i.e., the objective value 𝑦∗
𝑖
𝑖
of Problem (6) is strictly
add the constraint 𝑦new = 𝑦𝑗 + 𝜇𝑦𝑖 to the leader problem. This leaves the
bilevel feasible set, after uncrushing, unchanged.

larger than 𝑦𝐹 . Instead of tightening the bound, we can move the origi-
𝑖
nal bound 𝑦𝐹 from the follower to the leader problem. Since the bound is
𝑖
tional reaction set S(𝑥) of the follower. The same holds for upper bounds. implied by the follower constraints anyway, this does not change the ra-
Note that this is in contrast to general lower-level constraints (i.e., constraints that are more involved than simple bounds for the lower- level variables), which can be added to the leader without problems but not moved from the follower to the leader without altering the bilevel- feasible set T . We finally note that one can also simply remove the (any-
way redundant) bound 𝑦𝐹 from the follower problem without adding
A similar approach can be applied if two follower columns are par- allel in both the leader and the follower problem, i.e.,
𝑑𝑖 = 𝜇𝑑𝑗 ,  𝑓𝑖 = 𝜇𝑓𝑗 ,  𝐵⋅𝑖 = 𝜇𝐵⋅𝑗 ,  𝐷⋅𝑖 = 𝜇𝐷⋅𝑗
for 𝑖 ≠ 𝑗, 𝑖, 𝑗 ∈ {1, … , 𝑚}, and some 𝜇 ≠ 0. We can now crush 𝑦𝑖 and 𝑦𝑗
into 𝑦new . For the follower, we proceed according to (8) and (9), For the
leader we apply
𝑑new = 𝑑𝑗 ,  𝐵⋅new = 𝐵⋅𝑗
and
{ 𝐿	𝐿	{

𝑖	∗
𝑦 + 𝜇𝑦
for 𝜇 > 0,
𝑦̄𝐿 + 𝜇𝑦̄𝐿
for 𝜇 > 0,

it to the leader problem, or one can add the updated bound 𝑦
to the
𝑦𝐿  =	𝑗	𝑖
𝑦̄𝐿  =	𝑗	𝑖

𝑖	new
𝑦𝐿 + 𝜇𝑦̄𝐿
for 𝜇 < 0,
new
𝑦̄𝐿 + 𝜇𝑦𝐿
for 𝜇 < 0.

leader problem. From single-level optimization it is known to be un-
𝑗	𝑖
𝑗	𝑖

clear, which strategy “helps” the solver and which one is rather harmful to the solution process. Thus, these different strategies need to be eval- uated numerically.

Parallel columns

We first briefly explain the presolve of parallel columns in the single-level context; see also, e.g., Andersen and Andersen (1995) and Achterberg et al. (2020). In Achterberg et al. (2020) it is both shown that parallel columns are common in public and commercial single-level problems and that their treatment helps for solving the instances more eﬃciently. To this end, consider the single-level follower problem (2) for
a fixed leader decision 𝑥 = 𝑥̄ as well as two follower variables 𝑦𝑖 and 𝑦𝑗
for some 𝑖 ≠ 𝑗, 𝑖, 𝑗 ∈ {1, … , 𝑚}. The two columns 𝐷⋅𝑖 and 𝐷⋅𝑗 are called
parallel if 𝐷⋅𝑖 = 𝜇𝐷⋅𝑗 holds for some 𝜇 ≠ 0. An algorithm for determin-
As above, we argue that an uncrushed solution is feasible for the follower problem (2) if and only if the crushed solution is feasible. Also, following the discussion for the single-level case above, the crushed and uncrushed solutions yield the same objective value for the follower problem. Fur- thermore, with the same arguments as for the follower-only case, the uncrushed solution is feasible for the leader if and only if the crushed solution is feasible for the leader. Consequently, the uncrushed solution is bilevel feasible if and only if the crushed solution is bilevel feasible. Finally, the crushed and uncrushed solution have the same leader objec- tive value, which means that the uncrushed solution is bilevel optimal if and only if the crushed solution is bilevel optimal.
We now consider two parallel leader columns in Problem (1), i.e.,
𝑐𝑖 = 𝜇𝑐𝑗 ,  𝐴⋅𝑖 = 𝜇𝐴⋅𝑗 ,  𝐶⋅𝑖 = 𝜇𝐶⋅𝑗
for 𝑖 ≠ 𝑗, 𝑖, 𝑗 ∈ {1, … , 𝑛}, and some 𝜇 ≠ 0. We can crush 𝑥𝑖 and 𝑥𝑗 into

ing parallel columns with runtime 𝑂(∑ 𝑙 log 𝑙 ), where 𝑙 represents the
𝑥	across all leader and follower constraints and the two objectives,

𝑖 𝑖	𝑖	𝑖
new

number of non-zeros in column 𝐷⋅𝑖 , is given in Bixby and Wagner (1987).
If, in addition, 𝑓𝑖 = 𝜇𝑓𝑗 holds, we can merge, or “crush”, the two
similarly to the parallel follower case. Now, let 𝑥∗ be part of an optimal
solution of the presolved, i.e., crushed, problem. We uncrush this solu-

variables 𝑦𝑖 and 𝑦𝑗 into a new variable 𝑦new by setting
tion by setting 𝑥∗  = 𝑥∗ + 𝜇𝑥∗. This does not affect the right-hand sides

new	𝑗	𝑖

𝑦new ∶= 𝑦𝑗 + 𝜇𝑦𝑖 .	(8)
ing the two original variables 𝑦𝑖 and 𝑦𝑗 and by instead adding the vari- Consequently, we obtain a presolved version of Problem (2) by remov- able 𝑦new with
𝑏 − 𝐶𝑥 of the follower constraints. In addition, the uncrushed solution
is feasible for the leader constraints if and only if the crushed solution
is feasible. Thus, the uncrushed solution is bilevel feasible if and only if the crushed solution is bilevel feasible for presolved bilevel problem.
Up to now, we only considered the case in which either both columns

𝑓new = 𝑓𝑗 ,  𝐷
⋅new
= 𝐷
⋅𝑗
are leader columns or both columns are follower columns. Unfortu- nately, we cannot presolve a leader column that is parallel to a follower

as well as bounds
{𝑦𝐹 + 𝜇𝑦𝐹
𝑦𝐹  =	𝑗	𝑖
for 𝜇 > 0,
{
𝑦̄𝐹 + 𝜇𝑦̄𝐹
𝑦̄	=	𝑗	𝑖
for 𝜇 > 0,
(9)
column, as the following example shows.
Example 1. Consider the linear bilevel problem

new
𝑦𝐹 + 𝜇𝑦̄𝐹
for 𝜇 < 0,
new
𝑦̄𝐹 + 𝜇𝑦𝐹
for 𝜇 < 0.	{	}

𝑗	𝑖
Now, let ∗
𝑗	𝑖
min
𝑥∈ℝ,𝑦∈ℝ2
𝑥 + 𝑦1 s.t. 0 ≤ 𝑥 ≤ 1, 𝑦 ∈ arg max
𝑦̄∈ℝ2
𝑦̄2 ∶ 𝑦̄2 ≤ 𝑥 + 𝑦̄1 , 0 ≤ 𝑦̄1 ≤ 1 ,

can post-process, or “uncrush”, the value 𝑦∗
into values 𝑦∗ and 𝑦∗ by
which has the unique optimal solution 𝑥∗ = 0, 𝑦∗ = 1, and 𝑦∗ = 1. Note

new
𝑖	𝑗
that the columns of 𝑥 and 𝑦
1	2
are parallel with  = 1

using Equation (8) and by paying attention to the bounds (9). It holds
1	𝜇
. If we crush them

𝐷	𝑦∗
= 𝐷 (𝑦∗ + 𝜇𝑦∗) = 𝐷 𝑦∗ + 𝜇𝐷 𝑦∗ = 𝐷 𝑦∗ + 𝐷 𝑦∗
into a leader variable, we obtain

new new
⋅𝑗  𝑗	𝑖
⋅𝑗 𝑗
⋅𝑗 𝑖
⋅𝑗 𝑗
⋅𝑖 𝑖
min
𝑥new ,𝑦2 ∈ℝ
𝑥new
s.t.  0 ≤ 𝑥
new
≤ 2, 𝑦2
∈ arg max {𝑦̄
∶ 𝑦̄2
≤ 𝑥
}
new ,

so that the uncrushed solution is feasible for the original problem (2) if
and only if 𝑦∗ is feasible for the presolved problem. In addition, we have
which has the unique optimal solution 𝑥∗
𝑦̄2 ∈ℝ
= 0 and 𝑦∗ = 0. By uncrush-

∗	∗	∗	∗
∗	∗	∗
ing 𝑥∗
= 𝑥∗ + 𝑦 , we obtain 𝑥∗ = 0
new	2
= 0

𝑓new 𝑦new = 𝑓𝑗 (𝑦𝑗 + 𝜇𝑦𝑖 ) = 𝑓𝑗 𝑦𝑗 + 𝜇𝑓𝑗 𝑦𝑖 = 𝑓𝑗 𝑦𝑗 + 𝑓𝑖 𝑦𝑖 .
new	1
and 𝑦1
. Contrary, if we crush

the two variables into a follower variable, we obtain

Thus, the uncrushed solution is optimal for Problem (2) if and only if
min	𝑦
s.t.  (𝑦
{
, 𝑦 ) ∈ arg max 𝑦̄
∶ 𝑦̄
≤ 𝑦̄
, 0 ≤ 𝑦̄	≤ 2}

∗ new
is optimal for the presolved problem.
𝑦new ,𝑦2 ∈ℝ
new
new  2
𝑦̄new ,𝑦̄2 ∈ℝ  2	2
new
new	,



Table 1
Implications of parallel rows depending on 𝜇 and the right-hand sides 𝑎̃𝑞 and 𝑎̃𝑟 .
3.4. Duality fixing

𝑎̃𝑞 < 𝜇𝑎̃𝑟
𝑎̃𝑞 = 𝜇𝑎̃𝑟
𝑎̃𝑞 > 𝜇𝑎̃𝑟
This well-known single-level presolve method tries to detect vari-
ables that can be fixed to certain values based on optimality conditions.

𝜇 > 0  inequality with index 𝑞	both inequalities  inequality with index 𝑟
is irrelevant	are equivalent	is irrelevant
𝜇 < 0  both inequalities are relevant	infeasible model



Duality fixing is often very eﬃcient in practice and can be applied to both continuous and integer variables. Details on this method are given in Martin (2001) and Achterberg et al. (2020).
In the following, we briefly describe duality fixing for single-level

which has the unique optimal solution 𝑦∗
= 2 and 𝑦∗ = 2. Uncrushing
problems by considering the follower problem (2) for a fixed leader de-

yields 𝑥∗ = 1 and 𝑦∗ = 1.
Parallel rows
new	2
cision 𝑥 = 𝑥̄. We now consider variables 𝑦𝑖 that fulfill one of the two
conditions:
𝑓𝑖 ≥ 0 and 𝐷𝑗𝑖 ≤ 0 for all 𝑗 ∈ {1, … , 𝓁},
𝑓𝑖 ≤ 0 and 𝐷𝑗𝑖 ≥ 0 for all 𝑗 ∈ {1, … , 𝓁}.

This presolve technique is also known from single-level optimization.
We briefly explain it based on the high-point relaxation (3) and use the notation
[ ]	[ ]	( )
𝐴̃ = 𝐴 ,  𝐵̃ = 𝐵 ,  𝑎̃ =  𝑎 .
𝐶	𝐷	𝑏
Assume that the index 𝑖 fulfills Condition (i) and that 𝑦𝐹 >	holds.
𝑖

Then we can fix 𝑦𝑖 = 𝑦𝐹 . For 𝑓𝑖 > 0, this variable fixing is given directly as a necessary optimality condition. For 𝑓𝑖 = 0, there exists at least one optimal solution that satisfies this variable fixing. If we assume 𝑦𝐹 = −∞
instead of 𝑦𝐹 > −∞, we have to distinguish two cases. For 𝑓𝑖 > 0, the

We call two inequalities with indices 𝑞, 𝑟 ∈ {1, … , 𝑘 + 𝓁} parallel, if	𝑖

𝐴̃
𝑞⋅
= 𝜇𝐴̃
𝑟⋅
and 𝐵̃
𝑞⋅
= 𝜇𝐵̃
𝑟⋅
hold for 𝜇 ≠ 0. The sign of 𝜇 and the right-
problem is infeasible or unbounded and for 𝑓𝑖 = 0, the variable 𝑦𝑖 and all
constraints, for which 𝑦𝑖 has a nonzero coeﬃcient, can be removed from

hand sides 𝑎̃𝑞 and 𝑎̃𝑟 can be used to determine infeasibility of the entire
problem or that one of the two constraints is redundant. More precisely,
we distinguish the cases shown in Table 1.
Detailed descriptions of this procedure for single-level optimiza- tion are given in Andersen and Andersen (1995), Martin (2001) and Achterberg et al. (2020). Although the occurrence of parallel rows can be seen as bad modeling, it is shown in Achterberg et al. (2020) that parallel rows occur rather frequently in real-world single-level instances and that their treatment contributes to a more eﬃcient solution process for these instances. Note that the same algorithm as in Bixby and Wag- ner (1987) to detect parallel columns can also be used to detect parallel rows.
We now turn to the linear bilevel problem (1). The two inequalities can now either be two leader inequalities, two follower inequalities, or one leader and one follower inequality. In the first two cases, we can directly apply the rules given in Table 1. The third case requires a more
detailed discussion. We assume w.l.o.g. that 𝑞 is an index of a leader
inequality and 𝑟 is an index of a follower inequality. In case 𝜇 < 0, the rules in Table 1 still apply, because for 𝑎̃𝑞 > 𝜇𝑎̃𝑟 the model is infeasible and for 𝑎̃𝑞 ≤ 𝜇𝑎̃𝑟 no deduction can be made. However, in case 𝜇 > 0, we
obtain different rules:
the problem. Condition (ii) can be tackled analogously. If 𝑦̄𝐹 < ∞, we fix
𝑦𝑖 = 𝑦̄𝐹 . For 𝑦̄𝐹 = ∞ we distinguish the same cases as for Condition (i).
As shown in Fischetti et al. (2017), this single-level duality fixing can
into    account    the    leader    decision    𝑥. be applied almost directly to the follower problem (2) without taking
Theorem 2 (Fischetti et al., 2017). For every follower variable 𝑦𝑖, 𝑖 ∈
{1, … , 𝑚}, the following fixing is correct:
If 𝑓𝑖 > 0 and 𝐷𝑗𝑖 ≤ 0 for all 𝑗 ∈ {1, … , 𝓁}, fix 𝑦𝑖 = 𝑦𝐹 ,
If 𝑓𝑖 < 0 and 𝐷𝑗𝑖 ≥ 0 for all 𝑗 ∈ {1, … , 𝓁}, fix 𝑦𝑖 = 𝑦̄𝐹 .
Note that in Theorem 2 the case 𝑓𝑖 = 0 is not taken into account. The reason might be that this case is somehow problematic. For 𝑓𝑖 = 0, the optimal choice of 𝑦𝑖 by the follower might be ambiguous. Under the
follower solutions the one that she prefers. Thus, fixing 𝑦𝑖 must preserve optimistic assumption, the leader is free to choose among the optimal this optimistic solution. Since the case 𝑓𝑖 = 0 does hardly appear in our
instance set that we use in the computational study in Section 4, we do
not further investigate this issue.
Until now, we have applied duality fixing to the follower problem. We now present an example that illustrates the occurring diﬃculties in

If 𝑎̃
< 𝜇𝑎̃ , then 𝐴̃ 𝑥 + 𝐵̃ 𝑦 ≥ 𝑎̃
is implied by 𝑦 ∈ S(𝑥) and the
the application of duality fixing to the leader problem or to the leader

𝑞	𝑟
𝑞	𝑞	𝑞
and follower problem simultaneously.

leader inequality with index 𝑞 is redundant.
If 𝑎̃𝑞 > 𝜇𝑎̃𝑟, then the follower constraint may only be active for a point (𝑥, 𝑦) that violates the leader constraint. Thus, remov-

Example 2. Consider the bilevel problem

ing this constraint only changes the rational reaction 𝑦 ∈ S(𝑥) for leader decisions 𝑥 ∉ Ω𝐿. Consequently, the follower inequality with index 𝑟 must be inactive for every bilevel feasible point and
min
𝑥,𝑦
𝑥 − 𝑦  s.t.  − 3𝑥 + 𝑦 ≥ −3, 𝑥 ≥ 0, 𝑦 ∈ arg min{𝑦̄ ∶ −2𝑥 + 𝑦̄ ≥ 0}.
𝑦̄
(10)

we can safely remove it.
If 𝑎̃𝑞 = 𝜇𝑎̃𝑟, then the inequalities are equivalent. For the follower inequality with index 𝑟, the argument of Case (ii) does not hold,
because it can be active at a bilevel feasible point. Thus, remov- ing the follower constraint might change the response of the fol- lower in a way that renders the follower response infeasible for the leader constraints. However, the leader inequality with in-
dex 𝑞 is redundant and we can remove it.
able 𝑥 is negative. In addition, the coeﬃcient in the upper-level objective For all leader and follower constraints, the coeﬃcient of the leader vari-
single-level optimization, we would fix 𝑥 to its lower bound, i.e., 𝑥 = 0. function is positive. If we naively apply duality fixing as we would do in
This yields the point (0,0) with objective function value 0.
However, for every leader decision 𝑥, the optimal solution of the follower is given by 𝑦 = 2𝑥. Thus, we can substitute 𝑦 with 2𝑥 in the
leader problem of Problem (10) to obtain

In summary, this means that we can detect parallel rows using the
min
𝑥
−𝑥  s.t.  − 𝑥 ≥ −3, 𝑥 ≥ 0.

shared constraint set Ω as long as we pay attention to Case (iii).
Until now, we only covered parallel inequalities. Equality constraints
can, in principle, be reformulated as two inequalities, such that we may apply the techniques above. From a practical point of view, however, it is often not a good idea to divide an equation into two inequalities. Keep- ing the equation results in further cases that have to be distinguished; see, e.g., Achterberg et al. (2020).
This reformulated problem has the optimal solution 𝑥 = 3, such that we
value −3. Hence, the point (0,0) we obtained by fixing 𝑥 = 0 is not an obtain the optimal solution (3,6) of Problem (10) with objective function
optimal solution of Problem (10).
The reason for the observation in the example is that we omit the optimality of the follower in the fixing step. In other words, we applied

Fig. 2. Moving follower constraints 𝑐1 , 𝑐2 , and 𝑐3
(left) that are inactive at the bilevel optimal solu-
tion (0,1) to the leader (right) changes the reaction of the follower (blue and orange) and the bilevel feasible set (blue), but retains the optimal solution. (For inter- pretation of the references to color in this figure leg- end, the reader is referred to the web version of this article.)







duality fixing to the high-point relaxation (3), which is not suﬃcient to guarantee correctness.

3.5. Optimality-based presolve

Up to now, we presented feasibility-based presolve methods that do not change the bilevel-feasible set T . In order to further simplify the solution of Problem (1), it might be desirable to tighten T in a way that retains at least one bilevel optimal solution. In particular, it would be beneficial to exclude bilevel-feasible points that can be proven to be not bilevel optimal. In general, this requires to respect bilevel optimality, i.e., to deal with the nonconvexity of the problem. One the one hand, optimality-based presolve can thus be expected to be a very diﬃcult task. On the other hand, one might be able to identify non-optimal fea- sible points without knowledge of the bilevel-optimal solution. In this section, we present a first step in this direction.
In Section 3.1, we discussed to move constraints to tighten the linear problems used for the bound strengthening. To be specific, we moved
follower-independent leader constraints to the follower problem. This is a feasible approach because in this special case, the bilevel feasible set T
remains unchanged. However, it is well-known that moving constraints between the two levels changes the bilevel feasible set in general. In the following paragraphs we propose a criterion that can be used to detect follower constraints that can be safely moved to the leader prob- lem without changing the set of bilevel-optimal points—although the bilevel-feasible set T might be changed. We illustrate this approach in Fig. 2, in which upper-level constraints correspond to dashed lines and lower-level constraints to solid lines. The specific problem can be found
constraint,  i.e.,  (𝑥, 𝑦)  ∈  T𝑀   implies  (𝑥, 𝑦)  ∈  T . (ii) we do not obtain additional bilevel feasible points by moving the
We first show (i). Since 𝐶𝑖⋅𝑥∗ + 𝐷𝑖⋅𝑦∗ > 𝑏𝑖 , the reaction 𝑦∗ of the fol- lower must still be optimal for the leader decision 𝑥∗ after removing the constraint from the follower problem. In addition, the point (𝑥∗, 𝑦∗) is
feasible for all original leader constraints as well as for the constraint
𝐶𝑖⋅𝑥 + 𝐷𝑖⋅𝑦 ≥ 𝑏𝑖 . Thus, (𝑥∗, 𝑦∗) ∈ T𝑀 holds.
We now turn to (ii). Let (𝑥̄, 𝑦̄) ∈ T𝑀 , i.e., 𝑦̄ is optimal for the relaxed follower problem (2) for fixed 𝑥 = 𝑥̄, in which the 𝑖th follower constraint is removed. Since (𝑥̄, 𝑦̄) ∈ T𝑀 , 𝐶𝑖⋅𝑥̄ + 𝐷𝑖⋅𝑦̄ ≥ 𝑏𝑖 holds and 𝑦̄ is also optimal for Problem (2) with fixed 𝑥 = 𝑥̄. Thus, (𝑥̄, 𝑦̄) ∈ T . □
In order to turn Theorem 3 into a presolve method, it is crucial to detect such inactive constraints. One approach might be to exploit the high-point relaxation in special cases. For example, in min-max prob- lems the objective functions of the leader and the follower point into opposite directions. Follower constraints that are binding for the solu- tion of the high-point relaxation are canonical candidates to be inactive at the bilevel-optimal solution—although, of course, easy examples can be constructed for which this does not hold. It remains an open question and subject of future research whether this technique can be carried out eﬃciently.

Computational experiments

In this section, we try to shed some light on the effectiveness of the proposed presolve techniques. To this end, we consider the following single-level reformulation

on Page 33 of Manns (2020).
In addition, the shared constraint set Ω is colored gray, the bilevel
feasible set is colored in blue, and the set of optimal follower solu-
min
𝑥,𝑦,𝜆,𝜆̄,𝜆
𝑐⊤𝑥 + 𝑑⊤𝑦	(11a)

tions lifted to the 𝑥–𝑦-space is the union of the blue and orange lines.
attained at the point (0,1). We see that the lower-level constraints 𝑐1, Fig. 2 (left) shows the original problem, in which the bilevel solution is
𝑐2, and 𝑐3 are not active in (0,1). In Fig. 2 (right), we moved these con-
straints to the leader. This changes the optimal reaction of the follower
and, thus, also changes the bilevel feasible set. However, the bilevel optimal solution (0,1) is retained. We formalize this in the following theorem.
Theorem 3. Let (𝑥∗, 𝑦∗) be an optimal solution of Problem (1) and consider a follower constraint with index 𝑖 ∈ {1, … , 𝓁} such that 𝐶𝑖⋅𝑥∗ + 𝐷𝑖⋅𝑦∗ > 𝑏𝑖 holds. Then, (𝑥∗, 𝑦∗) is also optimal for the problem that we obtain by moving
𝐶𝑖⋅𝑥 + 𝐷𝑖⋅𝑦 ≥ 𝑏𝑖 from the follower to the leader.
Proof. We denote the bilevel feasible set of Problem (1) by T and the bilevel feasible set after moving the constraint by T𝑀 . We prove the theorem by showing that
(i) the optimal solution (𝑥∗, 𝑦∗) remains bilevel feasible when moving the constraint, i.e., (𝑥∗, 𝑦∗) ∈ T𝑀 , and
s.t.	(𝑥, 𝑦) ∈ Ω,	(11b)
𝜆, 𝜆, 𝜆̄ ≥ 0,	(11c)
𝐷⊤𝜆 + 𝜆 − 𝜆̄ = 𝑓 ,	(11d)
𝜆⊤(𝐶𝑥 + 𝐷𝑦 − 𝑏) = 0,	(11e)
𝜆⊤(𝑦 − 𝑦𝐹 ) = 0,	(11f)
𝜆̄⊤(𝑦̄𝐹 − 𝑦) = 0.	(11g)
of Problem (1). This well-known reformulation has been proposed in Fortuny-Amat and McCarl (1981) and can be derived by replacing the lower-level problem (2) with its Karush–Kuhn–Tucker (KKT) condi- tions, i.e., primal feasibility that is contained in (11b), nonnegativity of the dual variables (11c), stationarity (11d), and complementarity (11e)– (11g). Due to the latter conditions, Problem (11) is a mathematical prob- lem with complementarity constraints (MPCC). The complementarity



constraints (11e) can be replaced using the mixed-integer reformula- tion
𝑢 ∈ {0, 1}𝓁 ,  𝜆 ≤ 𝑀𝑢,  𝐶𝑥 + 𝐷𝑦 − 𝑏 ≤ 𝑀 (1 − 𝑢);
see Fortuny-Amat and McCarl (1981) as well. The complementarity con-
requires additional binary variables 𝑢 and a suﬃciently large value 𝑀 . straints (11f) and (11g) can be treated in the same way. This formulation
without obstacles. Choosing 𝑀 too large may cause numerical insta- It is pointed out in Pineda and Morales (2019) that this approach is not
bilities and choosing it too small may result in suboptimal solutions of Problem (1). Further, in Kleinert et al. (2020), it is shown that verify-
ing the correctness of a given value 𝑀 is as hard as solving the orig-
inal bilevel problem. Still, this approach is by far the most frequently
used approach to solve linear bilevel problems in practice, which is why we test our presolve techniques for this approach.1 Throughout all
tests, we set 𝑀 = 106. Although this might exclude some bilevel-optimal
points from the feasible set of the bilevel problem’s reformulation (11),
it still allows for a proper computational evaluation of the speed-ups











Fig. 3. Speed-up factors 𝑠𝑖 for duality fixing.

The effect of the presolve method is measured by the speed-up factor

obtained by applying presolve techniques, which is what we do in the
{ wo  w
wo	w

following.
𝑠𝑖 =
𝑡𝑖 ∕𝑡𝑖 ,	if 𝑡𝑖  ≥ 𝑡𝑖 ,
−𝑡w∕𝑡wo,	else.

𝑖  𝑖

Computational setup and test sets
The big-𝑀 based single-level reformulation as well as all presolve techniques have been implemented in C++-11 and have been compiled with GCC 7.5.0. We solved all mixed-integer problems with Gurobi
9.0.2. The computational experiments have been executed on a compute cluster using compute nodes with Intel Xeon E3-1240 v6 CPUs with 4 cores, 3.7GHz, and 32GB RAM; see Regionales Rechenzentrum Erlangen (2020) for more details. Note the we limited the number of threads to 1 in all computations.
Our initial test set contains more than 2500 instances and mainly consists of the mixed-integer linear bilevel instances that are used in Kleinert and Schmidt (2020). This set consists of mixed-integer bilevel instances from the literature, for which the integrality conditions are re- laxed to obtain continuous bilevel problems. From this set, we removed all infeasible instances and all instances that we solve in less than 1s and that we thus consider as too easy. The resulting test set only con- tains roughly 600 instances, on which we test the proposed presolve methods in the following. Let us already comment that—although we started with a rather large instance set that contains (to the best of our knowledge) all available (mixed-integer) linear bilevel instances from the literature—most presolve methods can only be applied to a very small amount of instances. The reason is that not too many instances indeed have, e.g., parallel rows or columns. We will dis- cuss this test-library specific problem later on again in our conclusion in Section 5. Since the number of relevant instances is rather small, we specify the instances that we use for each presolve method along with a reference to its origin in the literature in each of the following sections.

Parallel rows

In Table 2, we compare the running times 𝑡wo for solving an instance 𝑖 We detected parallel rows in only 8 out of the roughly 600 instances. without presolve with the running time 𝑡w obtained if parallel-rows pre- solve is applied; see Section 3.3. In addition, we also specify the time 𝑡𝑝
that is needed for detecting and removing parallel rows. Note that 𝑡w
We see that removing parallel rows has a very significant effect on the neos-1109824 instance, which is solved almost 60 times faster if parallel-rows presolve is applied. The reason for this is an enormous reduction of constraints: around one third of all constraints can be re- moved; see the “# Rows” column in Table 2. On the other instances, pre- solving has mixed effects. On some instances (gmu-35-40, acc-tight5, and rocI-4-11), we observe a moderate reduction in running time and of the number of constraints. However, on other instances, removing parallel rows has none or a rather negative effect. The latter is hard to explain on the data basis we have—especially because different aspects seem to be the reason for the observed results. For example, the instance bab5 is solved by a root-node heuristic if no presolve is applied, which is not the case if presolve is applied, whereas the instance gmu-35- 50 requires less branch-and-bound nodes to be solved if parallel-rows presolve is not used.

Parallel columns

We detected parallel columns in 7 instances. The results are similar to the case of parallel-rows presolve; see Table 3.
Detecting parallel columns has a significantly positive effect on the instance tanglegram1, on which we observe a speed-up of over 8, which is due to 126 presolved columns. On all other instances, we ob- serve only moderate or no effects. This is surprising for some instances. For example, we remove more than 40% of the variables of the in- stance gmu-35-50. Still, the speed-up of 1.13 is rather small. More- over, we observed that the root node model after Gurobi’s own pre- solve is smaller if we apply our parallel-columns presolve beforehand. However, this is not reflected in significant speed-ups for the running time.

Duality fixing

We detected variables that can be fixed via duality fixing in 103 in- stances. Thus, duality fixing can be applied by far to the largest subset of instances of our test set. This is in line with the positive results reported

specifies the total running time including 𝑡𝑝.
𝑖	in Fischetti et al. (2017), in which duality fixing is applied as well. Due
to the large number of instances, we illustrate the speed-up factors 𝑠



1 Note that the presolve techniques evaluated in this section would also have a comparably beneficial effect on other solution approaches such as classic branch-and-bound for LP-LP bilevel problems (Bard, 1998) due to, e.g., a re- duced number of lower-level constraints.
𝑖
in a more condensed way in Fig. 3. For the sake of completeness, we
also denote running times and the number of variables in Table 6 in the appendix. We see that for the majority of instances, duality fixing is beneficial, and for many of them, the speed-up can be considered sig- nificant. For example, for 26 instances, we observe a speed-up of 1.5 or


Table 2
Running times for parallel row presolve. All times are given in seconds.

Running Time	# Rows


𝑖	𝑖
𝑖	𝑖





Table 3
Numerical results for parallel columns presolve. All times are given in seconds.

Running Time	# Columns


𝑖	𝑖
𝑖	𝑖




Table 4
Numerical results for bound strengthening. All times are given in seconds.

Running Time
𝑖	𝑖	𝑖	𝑖



Table 5
Numerical results for bound moving. All times are given in seconds.

Running Time
𝑖	𝑖	𝑖	𝑖



above, and for 55 instances, we observe a speed-up of 1.2 or above. In contrast, there are only very few instances, for which duality fixing has
a negative impact. Only 5 instances have a speed-up factor of −1.5 or
below.

Bound strengthening and bound moving

Finally, we consider bound strengthening (see Section 3.1) and bound moving (see Remark 2). These methods are applicable to 7 in- stances; see Table 4 and Table 5.
For both methods, the detection of implied tighter bounds is imple- mented in a computationally costly way by solving Problem (6) and (7). This could certainly be improved, e.g., by using internal solver infor-
mation that is not accessible when using commercial solvers. In or- der to measure the speed-up provided by the presolve method, we de-
note cleaned speed-up factors 𝑠̃𝑖 with respect to 𝑡̃w = 𝑡w − 𝑝𝑖 instead of
𝑡𝑖 , i.e., we disregard the presolve time when computing the speed-up
factors.
For bound strengthening, we observe positive effects for the majority of instances. Comparing the two tables, we see that bound strengthen- ing clearly outperforms bound moving. One reason for this might be that for bound strengthening we may compute implied bounds even for fol- lower variables that are initially unbounded. In contrast, bound moving only shifts existing redundant bounds from the follower to the leader. Thus, bound strengthening affects more bounds as indicated in the final column of the two tables.


Table 6
Numerical results for duality fixing. All times are given in seconds.

Running Time	# Variables


𝑖	𝑖
𝑖	𝑖



































(continued on next page)


Table 6 (continued)

Running Time	# Variables

Instance 𝑖	Ref.	𝑡wo	w
𝑝
𝑖	𝑖

w/o	w




Conclusion

In this paper, we systematically studied presolve methods for linear bilevel problems. Due to the fact that the IIC property does not hold for bilevel problems in general, this is a delicate task and the application of standard presolve methods from single-level optimization thus has to be done with great caution. Fortunately, we are able to carry over bound strengthening, the handling of parallel rows and columns, duality fixing, and a special type of an optimality-based presolve to the field of bilevel optimization.
Our numerical results indicate that the studied presolve methods can both be very beneficial for some instances but can also harm the solu- tion process for other problems of our test set. However, the number of instances to which, e.g., parallel-rows or parallel-columns, presolve could be applied in our numerical experiments is too small to discuss the general impact of presolve for linear bilevel problems. This, in particu- lar, reveals that there is an urgent need of better test instance libraries to further propel the field of computational bilevel optimization. The instance sets used in computational (mixed-integer) linear bilevel op- timization are mostly interdiction instances that (i) have a very special structure and that (ii) are too easy if their inherent integrality conditions are relaxed so that they can be used to test techniques to solve contin- uous bilevel problems. In particular, (i) is most likely the reason that all interdiction instances of our general test set do not play any role for the numerical experiments carried out in this paper. Moreover, there are almost no real-world test instances publicly available that usually possess much more structures such as parallel columns or rows. In our opinion—and we are rather convinced that the numerical study in this paper clearly reveals this aspect—the availability of better test instances is of crucial importance for the further development of the field. Finally, the field would also benefit from publicly available open-source solver frameworks for bilevel optimization so that one is not restricted to use commercial solvers as black-boxes.
Declaration of Competing Interest

The authors declare that there is no conflict of interest.

Acknowledgments

This research has been performed as part of the Energie Campus Nürnberg and is supported by funding of the Bavarian State Govern- ment. We also thank the Deutsche Forschungsgemeinschaft for their support within project A05, B08, and Z01 in the “Sonderforschungs- bereich/Transregio 154 Mathematical Modelling, Simulation and Opti- mization using the Example of Gas Networks”.

Appendix A. Detailed Results for Duality Fixing

In Table 6, we list detailed results for all of the 103 instances to which we applied duality fixing.
References

Achterberg, T., Bixby, R.E., Gu, Z., Rothberg, E., Weninger, D., 2014. Multi-row presolve reductions in mixed integer programming. In: Hosei University, T. (Ed.), Proceedings of the Twenty-Sixth RAMP Symposium (Tokyo), pp. 181–196. http://www.orsj.or.jp/ramp/2014/paper/4-4.pdf.
Achterberg, T., Bixby, R.E., Gu, Z., Rothberg, E., Weninger, D., 2020. Presolve reductions in mixed integer programming. INFORMS Journal on Computing 32 (2), 473–506. doi:10.1287/ijoc.2018.0857.
Andersen, E.D., Andersen, K.D., 1995. Presolving in linear programming. Mathematical Programming 71 (2), 221–245. doi:10.1007/BF01586000.
Audet, C., Savard, G., Zghal, W., 2007. New branch-and-cut algorithm for bilevel linear programming. Journal of Optimization Theory and Applications 134 (2), 353–370. doi:10.1007/s10957-007-9263-4.
Bard, J.F., 1998. Practical bilevel optimization: algorithms and applications, 30. Springer Science & Business Media. doi:10.1007/978-1-4757-2836-1.
Bard, J.F., Moore, J.T., 1990. A branch and bound algorithm for the bilevel program- ming problem. SIAM Journal on Scientific and Statistical Computing 11 (2), 281–292. doi:10.1137/0911017.



Belotti, P., Cafieri, S., Lee, J., Liberti, L., 2012. On feasibility based bounds tighten- ing. Tech. rep. Preprint. Optimization Online. http://www.optimization-online.org/ DB_HTML/2012/01/3325.html.
Belotti, P., Cafieri, S., Lee, J., Liberti, L., 2010. Feasibility-based bounds tightening via fixed points. In: Wu, W., Daescu. Berlin, O. (Eds.), Combinatorial optimization and applications. Springer Berlin Heidelberg, Heidelberg, pp. 65–76.
Bixby, R.E., Wagner, D.K., 1987. A note on detecting simple redundancies in linear sys- tems. Operations Research Letters 6 (1), 15–17. doi:10.1016/0167-6377(87)90004-6. Chen, W.-K., Gemander, P., Gleixner, A., Gottwald, L., Martin, A., Weninger, D., 2020. Two-row and two-column mixed-integer presolve using hashing-based pair-
ing methods. EURO Journal on Computational Optimization 8 (3), 205–240. doi:10.1007/s13675-020-00129-6.
Dempe, S., 2002. Foundations of bilevel programming. Springer. doi:10.1007/b101970. Dempe, S., Lohse, S., 2011. Dependence of bilevel programming on irrelevant data. Tech.
rep. Preprint. TU Bergakademie Freiberg.
DeNegre, S.T., 2011. Interdiction and discrete bilevel linear programming. PhD Thesis.
Lehigh University.
Fischetti, M., Ljubić, I., Monaci, M., Sinnl, M., 2017. A new general-purpose algorithm for mixed-integer bilevel linear programs. Operations Research 65 (6), 1615–1637. doi:10.1287/opre.2017.1650.
Fischetti, M., Ljubić, I., Monaci, M., Sinnl, M., 2018. On the use of intersec- tion cuts for bilevel optimization. Mathematical Programming 172 (1), 77–103. doi:10.1007/s10107-017-1189-5.
Fischetti, M., Monaci, M., Sinnl, M., 2018. A dynamic reformulation heuristic for general- ized interdiction problems. European Journal of Operational Research 267 (1), 40–51. doi:10.1016/j.ejor.2017.11.043.
Fortuny-Amat, J., McCarl, B., 1981. A Representation and economic interpretation of a two-level programming problem. The Journal of the Operational Research Society 32 (9), 783–792. doi:10.1057/jors.1981.156.
Gamrath, G., Koch, T., Martin, A., Miltenberger, M., Weninger, D., 2015. Progress in pre- solving for mixed integer programming. Mathematical Programming Computation 7, 367–398. doi:10.1007/s12532-015-0083-5.
Gleixner, A.M., Berthold, T., Müller, B., Weltge, S., 2017. Three enhancements for optimization-based bound tightening. Journal of Global Optimization 67 (4), 731– 757. doi:10.1007/s10898-016-0450-4.
Hansen, P., Jaumard, B., Savard, G., 1992. New branch-and-bound rules for linear bilevel programming. SIAM Journal on Scientific and Statistical Computing 13 (5), 1194– 1217. doi:10.1137/0913069.
Kleinert, T., Labbé, M., Plein, F., Schmidt, M., 2021. Closing the gap in linear bilevel op- timization: a new valid primal-dual inequality. Optimization Letters 15, 1027–1040. doi:10.1007/s11590-020-01660-6.
Kleinert, T., Labbé, M., Plein, F., Schmidt, M., 2020. Technical note—there’s no free lunch: on the hardness of choosing a correct big-M in bilevel optimization. Operations Re- search 68 (6), 1716–1721. doi:10.1287/opre.2019.1944.
Kleinert, T., Schmidt, M., 2020. Computing feasible points of bilevel problems with a penalty alternating direction method. INFORMS Journal on Computing doi:10.1287/ijoc.2019.0945.
Koch, T., Achterberg, T., Andersen, E., Bastert, O., Berthold, T., Bixby, R.E., Danna, E., Gamrath, G., Gleixner, A.M., Heinz, S., Lodi, A., Mittelmann, H., Ralphs, T., Sal- vagnin, D., Steffy, D.E., Wolter, K., 2011. MIPLIB 2010. Mathematical Programming Computation 3 (2), 103–163. doi:10.1007/s12532-011-0025-9, Online first.
Macal, C.M., Hurter, A.P., 1997. Dependence of bilevel mathematical programs on irrelevant constraints. Computers & Operations Research 24 (12), 1129–1140. doi:10.1016/S0305-0548(97)00025-7.
Manns, J., 2020. Presolve of linear bilevel programs. MA thesis. Friedrich-Alexander-Uni- versität Erlangen-Nürnberg.
Martin, A., 2001. General mixed integer programming: computational issues for branchand-cut algorithms. In: Naddef, D., Jünger, M. (Eds.), Computational combina- torial optmization, 2241. Springer, Berlin, pp. 1–25. doi:10.1007/3-540-45586-8_1.
MIPLIB 2017. http://miplib.zib.de/. Accessed: 2021-03-05. 2018.
Moore, J.T., Bard, J.F., 1990. The mixed integer linear bilevel programming problem.
Operations Research 38 (5), 911–921. doi:10.1287/opre.38.5.911.
Pineda, S., Morales, J.M., 2019. Solving linear bilevel problems using big-Ms: not all that glitters is gold. IEEE Transactions on Power Systems 34 (3), 2469–2471. doi:10.1109/TPWRS.2019.2892607.
Regionales Rechenzentrum Erlangen, 2020. Woodcrest Cluster. https://www.anleitungen. rrze.fau.de/hpc/woody-cluster/ (visited on 11/30/2020).
Ryoo, H.S., Sahinidis, N.V., 1996. A branch-and-reduce approach to global optimization.
Journal of Global Optimization 8 (2), 107–138. doi:10.1007/BF00138689.
Savelsbergh, M.W.P., 1994. Preprocessing and probing techniques for mixed integer pro- gramming problems. ORSA Journal on Computing 6, 445–454.
Tahernejad, S., Ralphs, T.K., DeNegre, S.T., 2020. A branch-and-cut algorithm for mixed integer bilevel linear optimization problems and its implementation. Mathematical Programming Computation 1–40. doi:10.1007/s12532-020-00183-6.
Vicente, L., Savard, G., Júdice, J., 1994. Descent approaches for quadratic bilevel programming. Journal of Optimization Theory and Applications 81 (2), 379–399. doi:10.1007/BF02191670.
Xu, P., Wang, L., 2014. An exact algorithm for the bilevel mixed integer linear program- ming problem under three simplifying assumptions. Computers & Operations Research 41, 309–318. doi:10.1016/j.cor.2013.07.016.
