Electronic Notes in Theoretical Computer Science 44 No. 1 (2001)
URL: http://www.elsevier.nl/locate/entcs/volume44.html 4 pages


Bialgebraic Semantics and Recursion (Extended Abstract)

Gordon Plotkin1,2
Division of Informatics, University of Edinburgh, King’s Buildings, Edinburgh EH9 3JZ, Scotland

In [9] a unifying framework was given for operational and denotational semantics. It uses bialgebras, which are combinations of algebras (used for syntax and denotational semantics) and coalgebras (used for operational se- mantics and solutions to domain equations). Here we report progress on the problem of adapting that framework to include recursion. A number of diffi- culties were encountered. An expected one was the need to treat orders in the general theory; much less expected was the need to give up defining bisimu- lations in terms of spans of functional bisimulations, and move to a relational view. Even so the outcome is not yet satisfactory because of well-known diffi- culties involved in prebisimulations. Our work can be compared to, e.g., that of [2]. The principal difference is that we aim, following [9], at a conceptual overview of the area using appropriate categorical tools.
The main idea of [9] is to represent rules for operational semantics by a natural transformation:
ρ : Σ(X × BX) → BTX
where Σ is the signature functor associated to an algebraic signature of the same name, B is a behaviour functor and T is the term monad associated to Σ. For suitable choices of these over the category of sets, image-finite sets of rules in GSOS format yield such natural transformations.
Models of such rules are bialgebras
ΣX →α X → BX
satisfying a suitable pentagonal condition. The category of these models has
an initial object consisting of the programming language ΣL ∼ι L and its op-
erational semantics L → BL. Every model gives an adequate compositional

1 Email:gdp@dcs.ed.ac.uk
2 This work has been done with the support of EPSRC grant GR/M56333: The Structure
of Programming Languages: Syntax and Semantics.
◯c 2001 Published by Elsevier Science B. V. Open access under CC BY-NC-ND license.


denotational semantics for the language L. Suppose now that the final coal-
σ
gebra M = BM exists; it can be thought of as the solution to the “domain
equation” X ∼= BX in the category at hand. Then it automatically gives a
final object which incorporates a semantic algebra ΣM →α M .
One can model bisimulation by spans of coalgebra maps (first done in [3]). With this, under mild conditions, one has that the semantics given by the final coalgebra is fully abstract and that there is a greatest bisimulation which is a congruence. These conditions are that kernel pairs exist and that weak kernel pairs are preserved by B.
Turning to recursion we need first to consider syntax. One way would be to add µ-terms µx.t to the usual algebraic terms over a given signature Σ, as in [2]. However, taken literally, we would then also have to incorporate an extension of the framework to handle binding operators, as in [5]. While that would be interesting, it would obscure the issues caused by recursion; we prefer to consider infinite terms, regarding the µ-terms as syntactic sugar for their unwinding.
We therefore consider the functor Σ : CPPO → CPPO over the category of cppos and strict continuous functions given by:
Σ(D)=   (Darity(f ))
f∈Σ
Its initial algebra is the free continuous algebra with signature Σ. A natural choice of behaviour functor is
B(D)= P(A⊥ ⊗ D⊥)
where A is a set of actions, and P(D) is the free continuous semilattice with a zero over D (on bifinite cppos this is the convexpowerdomain with a zero). The final coalgebra of B is the solution to Abramsky’s domain equation for bisimulation [1].
Every image finite set of GSOS rules again gives rise to a natural trans- formation as above, but now over CPPO, and we may attempt to apply the general theory. However weak pullbacks are not preserved (because of con- vexity phenomena) and full abstraction fails in the sense that there are not enough bisimulations to equate processes with the same final semantics.
One can instead develop a general theory for locally ordered categories (better: CPPO-enriched ones). One can define simulations (or ordered bisim- ulations) as spans of laxand and oplaxcoalgebra maps; it is shown in [4] that these include partial bisimulations [1] (also known as prebisimulations). There is then a new version of the general theory but now with the conditions that insertors exist and that weak insertors are preserved. Unfortunately, the weak preservation condition fails.
This motivates us to give up considering bisimulations as spans and, in- stead, to work directly with relations. One introduces a category of relations,

lifts the behaviour functor to the category and takes bisimulations to be coal- gebras in the category of relations—see, e.g., [8]. Thus one asks that the coalgebra map is “logical,” preserving the relation. One can argue this is less arbitrary than the span view where one has to turn the relation itself into a coalgebra, and there is not necessarily a canonical way to do this (and in our case there may be no way!).
A first attempt at a category for relations is CPPOa whose objects are pairs (D, R) of cppos and admissible relations on them, and whose morphisms are the strict continuous functions preserving the relations. The various func- tors involved have natural liftings to the category of relations: liftings of a functor F correspond to families FD of monotone actions on relations over D such that for any f : (D, Q) → (E, R),
FD(f−1(R)) ⊆ F (f )−1FE(R)
In the case of the powerdomain functor P there is a minimal such action which makes singleton, empty set and union logical. It is then natural to assume that ρ is logical, in the sense that it lives in CPPOa, and indeed this is the case when ρ arises from GSOS rules as above.
One can then show that full abstraction holds if a partial converse to the above condition on actions holds, viz that
F (h)−1FM (=M ) ⊆ FL(h−1(=M ))
where h is the unique coalgebra map from the operational semantics to the solution of the domain equation, and =M is the equality relation on M . How- ever, this is false and full abstraction again fails; intuitively this is because we are again trying to handle equality (bisimulation) when convexity phenomena are present.
Instead one should use simulations, which we take to be admissible rela- tions R such that:
≤ o R o ≤ ⊆ R
and move to the subcategory CPPOs whose objects are pairs of cpppos and simulations. The condition now needed is that:
F (h)−1FM (≤M ) ⊆ FL(h−1(≤M ))
where ≤M is the inequality relation on M . This holds under the condition that h preserves finiteness. Unfortunately that does not hold in general, though it does if the set of GSOS rules is compact in the sense of [2]. However we lack a conceptual proof of that assertion, and in any case we would prefer a general result. The essential difficulty is that an infinite process may be simulated by a set of processes rather than any single one. It may be possible to account for this by changing the kind of relations used, taking advantage of the scope of the fibrational approach to logical relations as discussed in, e.g., [7].

As regards possible further developments, one evident possibility for future work is to combine recursion and value-passing (e.g. as in the work of [6]). More immediately it would be good to treat other examples than GSOS. In particular probabilistic computation presents a challenge with its need for continuous domain theory.

References
S. Abramsky, A Domain Equation for Bisimulation, in Inf. and Comp.,, Vol. 92, pp. 161–218, 1991.
L. Aceto and A. Ing´olfsdo´ttir, CPO Models for GSOS Languages—Part I: Compact GSOS Languages, in Inf. and Comp., Vol. 129, No. 2, pp. 107–141, 1994.
P. Aczel and N. Mendler, A Final Coalgebra Theorem, in Proc. CTCS ’89 (eds. D. H. Pitt, D. E. Ryeheard, P. Dybjer, A. M. Pitts and A. Poign´e), LNCS Vol. 389, pp. 357–365, Berlin: Springer-Verlag, 1989.
M. P. Fiore, A Coinduction Principle for Recursive Data Types Based on Bisimulation, in Information and Computation, Vol. 127, No. 2, pp. 186–198, 1996.
	M. P. Fiore, G. D. Plotkin and D. Turi, Abstract Syntax and Variable Binding, in Proc. LICS ’99, pp. 193–202, Washington: IEEE Computer Society Press, 1999.
	M. P. Fiore and D. Turi Semantics of Name and Value Passing, to appear in Proc. LICS 2001.
C. Hermida, and B. Jacobs, Structural Induction and Coinduction in a Fibrational Setting, Inf. & Comp., Vol. 145, No. 2, pp. 107–152, 1998.
B. Jacobs, Mongruences and Cofree Coalgebras, in Algebraic Methodology and Software Technology (eds. V. S. Alagar and M. Nivat), LNCS Vol. 936, pp. 245–260, Berlin: Springer-Verlag, 1995.
D. Turi and G. D. Plotkin, Towards a Mathematical Operational Semantics, in Proc. LICS 97, pp. 268–279, Washington: IEEE Press, 1997.
