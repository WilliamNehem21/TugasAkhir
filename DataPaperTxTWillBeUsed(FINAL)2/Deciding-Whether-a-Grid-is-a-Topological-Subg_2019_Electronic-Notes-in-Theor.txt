Available online at www.sciencedirect.com


Electronic Notes in Theoretical Computer Science 346 (2019) 545–556
www.elsevier.com/locate/entcs

Deciding Whether a Grid is a Topological Subgraph of a Planar Graph is NP-Complete
Andrea Jim´enez
Instituto de Ingenier´ıa Matem´atica Facultad de Ingenier´ıa Universidad de Valpara´ıso Valpara´ıso, Chile
Tina Janne Schmidt
Institut fu¨r Mathematik TU Hamburg
Hamburg, Germany

Abstract
The Topological Subgraph Containment (TSC) Problem is to decide, for two given graphs G and H, whether H is a topological subgraph of G. It is known that the TSC Problem is NP-complete when H is part of the input, that it can be solved in polynomial time when H is fixed, and that it is fixed-parameter tractable by the order of H.
Motivated by the great significance of grids in graph theory and algorithms due to the Grid-Minor Theorem by Robertson and Seymour, we investigate the computational complexity of the Grid TSC Problem in planar graphs. More precisely, we study the following decision problem: given a positive integer k and a planar graph G, is the k × k grid a topological subgraph of G? We prove that this problem is NP-complete, even when restricted to planar graphs of maximum degree six, via a novel reduction from the Planar Monotone 3-SAT Problem.
Keywords: topological subgraph, subgraph homeomorphism, subdivision, grids, planar graph, NP-complete


Introduction
Given a graph G, the subdivision of an edge uv of G consists of its deletion and the addition of a new path of length two with ends u and v. For two graphs G and H, we say that H is a topological subgraph of G, or that G contains a subdivision of H, if G has a subgraph isomorphic to a graph obtained from H by repeatedly subdividing

1 The first author is supported by CONICYT/FONDECYT/INICIACION 11170931 and CONI- CYT/PCI/REDES 180151.

https://doi.org/10.1016/j.entcs.2019.08.048 1571-0661/© 2019 Published by Elsevier B.V.
This is an open access article under the CC BY-NC-ND license (http://creativecommons.org/licenses/by-nc-nd/4.0/).

edges. This notion appears for example in the classical characterization of planar graphs by Kuratowski.
Our work concerns the computational complexity of the Grid Topological Subgraph Containment (Grid TSC) Problem in planar graphs. The general question, known as the Topological Subgraph Containment (TSC) Prob-

lem or as the Subgraph
Homeomorphism
Problem, is to determine for two

given graphs G and H, whether H is a topological subgraph of G. To the best of our knowledge, investigations on this problem started with the work of LaPaugh and Rivest [6], who observed that, when H is part of the input, the TSC Prob- lem is NP-complete. Indeed, when G is a graph on n vertices and H is a cycle on n vertices, then solving the TSC Problem means to decide whether G contains

a Hamilton cycle. Since the Hamilton
Cycle
Problem remains NP-complete

when restricted to planar graphs [4], it also follows that the TSC Problem re-
stricted to planar graphs is NP-complete. This is different when the graph H is fixed. An algorithmic result within the famous Graph Minor Theorem of Robertson and Seymour [7] is that, when H is fixed, the TSC Problem can be solved in time polynomial in the order of the input graph G. However, the constants involved in their result are enormous, which implies that their algorithm for the Topologi- cal Subgraph Problem is not practical. More efficient algorithms are known for certain graphs H, including the complete bipartite graph K3,3 [1] and wheels with up to seven spokes [3,8,9]. More recently, Grohe et al. [5] showed that the TSC Problem is fixed-parameter tractable by the order of H. Their algorithm solves the TSC Problem in time proportional to f (nH ) · n3 , where nt and nH denote the number of vertices of the given graphs G and H, respectively, and f (nH ) does not depend on nt.
In this work, we prove that the TSC Problem remains NP-complete when G is a planar graph and H is a grid. More precisely, we study the Grid TSC Problem, which is to decide whether a given graph G contains the k×k grid as a topological subgraph, where k is part of the input. We show the following.

Theorem 1.1 The Grid TSC Problem in planar graphs is NP-complete, even
when restricted to planar graphs with maximum degree 6.

In other words, Theorem 1.1 says that finding largest topological grid minors in planar graphs with maximum degree 6 is NP-hard. Our proof of the previous theorem is a novel reduction, sketched in Section 1.4, from the Planar Monotone 3-SAT Problem, which is NP-complete [2].
A concept related to topological subgraphs is the concept of minors. A graph H is a minor of a graph G if a graph isomorphic to H can be obtained from G by a series of edge contractions, and vertex and edge deletions. If G contains H as a topological subgraph, then G also contains H as a minor, and the reverse holds when Δ(H) ≤ 3. Moreover, for every graph H, there is a finite list of graphs H1,..., Hl such that G contains H as a minor if and only if G contains one of the graphs H1,..., Hl as a topological subgraph.

Organization of the paper
In Sections 1.2 and 1.3, we introduce basic concepts and terminology. In Section 1.4, we sketch the main idea of the reduction for the proof of Theorem 1.1. In Section 2, we describe the gadgets of the reduction. In Section 3, these gadgets are used to construct the graph Gφ, which depends on a monotone rectilinear drawing of a 3-SAT formula φ. Finally, in Section 4 we present the reduction, i.e., we prove that Gφ contains a subdivision of a grid of certain size if and only if φ is satisfiable. Due to space limitations, along this work some definitions and technicalities are not formally established but are presented in a rather simplified and hopefully
intuitive manner.
The Planar Monotone 3-SAT Problem
Let U = {x1, x2,..., xn} be a set of boolean variables and C = {C1,..., Cm} be a set of clauses over U , where each clause Ci with i ∈ [m] is a disjunction of at most 3 literals, that is, variables from U or their negation. Then, φ = φ(U, C) = C1 ∧C2 ∧.. .∧Cm is a 3-SAT formula over U and is called satisﬁable if there exists an assignment of True and False to the variables in U such that φ evaluates to True. If a clause C contains only positive or only negative literals, then C is called positive or negative, respectively. A 3-SAT formula φ is called monotone if each clause in φ is either positive or negative, and it is called planar if the following bipartite graph G is planar: vertex set of G is {x1,..., xn}∪ {C1,..., Cm} and {x, C} is an edge of G if and only if the clause C uses x or its negation x¯.
Assume that φ = φ(U, C) is a monotone and planar 3-SAT formula. Consider an orthogonal coordinate system in the plane consisting of a horizontal and a vertical axis. A monotone rectilinear representation of φ is a drawing in the plane with the following properties, see Figure 1a):



C3 = (x¯1 ∨ x¯1 ∨ x¯1) C2 = (x2 ∨ x2 ∨ x3)
clause
decision	bifurcation	wire

a) A monotone rectilinear representation b) Plan for adding gadgets to the

of φ = V Ci.
grid G˜.
Fig. 1.

Variable in U and clauses in C are represented by pairwise disjoint rectangles in the plane, each of whose sides is parallel to the horizontal or the vertical axis.
The horizontal axis intersects each rectangle representing a variable in U and no rectangle representing a clause in C. Further, each rectangle representing

a positive clause in C is drawn above the horizontal axis and each rectangle representing a negative clause in C is drawn below the horizontal axis.
For each variable x ∈ U and for each clause C ∈ C such that C contains x or x¯ there is a vertical line segment that joins the rectangles representing x and C and that does neither intersect other vertical line segments nor other rectangles.
Given a monotone rectilinear representation of a 3-SAT formula φ, the Planar Monotone 3-SAT Problem is to decide whether φ is satisfiable. This problem is NP-complete [2].
Consider a planar monotone 3-SAT formula φ = φ(U, C). Throughout this paper, we make no distintion between variables and clauses of φ and their representations as rectangles in R. Furthermore, without loss of generality, we assume that each variable in U appears in at least one positive clause and at least one negative clause, i.e., φ uses both literals x and x¯ for each x ∈ U . Also, we assume that each clause contains exactly three literals and, in R, each clause is incident to exactly three vertical lines.
Basic deﬁnitions and terminology
Throughout this paper, we use the notation [n] := {1, 2,..., n} for n ∈ N. For each k ≥ 3, the k×k grid G˜ is the graph with vertex set {(i, j): i, j ∈ [k]} and edge
set
 {(i, j), (i×, j×)} : |i − i×| + |j − j×| = 1} .

The canonical embedding of G˜
refers to a drawing of G˜
in the plane, where the

vertex (i, j) for i ∈ [k] and j ∈ [k] is embedded at the point (i, j) in a coordinate system whose horizontal axis refers to the first coordinate and whose vertical axis refers to the second coordinate and each edge of G˜ is represented by a line segment. For k ≥ 3, the unique infinite face of the canonical embedding of G˜ is called the outer face of G˜ and each other face of G˜ is referred to as an inner face of G˜.
For i ∈ [k], the path that is induced in G˜ by the vertices in {(i, j): j ∈ [k]} is
called the ith vertical grid-path of G˜ and, for j ∈ [k], the path that is induced in G˜ by the vertices in {(i, j): i ∈ [k]} is called the jth horizontal grid-path of G˜. Edges of G˜ are called either vertical or horizontal, accordingly.

Reduction Idea
Consider an instance φ = φ(U, C) of the Planar Monotone 3-SAT Problem, i.e., a drawing R as in Figure 1a). To prove that the Grid TSC Problem in planar graphs is NP-hard (Theorem 1.1), we construct a planar graph Gφ and define an appropriate value k such that the k×k grid is a topological subgraph of Gφ if and only if φ is satisfiable.
The construction of Gφ starts with the k×k grid G˜. We present gadgets for
clauses and variables as well as wire gadgets that are used to connect variable gadgets to clause gadgets. Each variable gadget consists of one decision gadget and several bifurcation gadgets. The purpose of the decision gadget is to encode whether

a variable of φ is set to True or False and the purpose of the clause gadget is to ensure that at most two of the three literals of the clause are set to False. The bifurcation and wire gadgets duplicate and propagate the information through the
graph Gφ. Using the drawing R, these gadgets are placed into some inner faces of G˜, i.e., faces of G˜ that are bounded by a cycle of length 4, see Figure 1.
We show that, if Gφ contains a subdivision H of the k×k grid, then, roughly speaking, H is G˜ except for a few local differences. In the construction of Gφ, for each variable gadget, an edge of G˜ is deleted. Such deletion forces the corresponding grid-path of H to bend and, as a result, all grid-paths along some wire gadgets connecting that variable to positive or negative clauses have to bend. Here, a bend of a grid-path can be interpreted as a variable sending the value False towards a clause. The clause gadget, placed into an inner face f of G˜, is designed in such a way that at most two grid-paths can bend into the face f . As a consequence, if the three variables connected to the clause gadget in f are set to False, one of the grid-paths cannot bend into the face f and Gφ does not contain a subdivision of the k×k grid.


Gadgets
In this section, we consider the k×k grid G˜


along with its canonical embedding.

We refer to deleting an edge, subdividing an edge, adding a new vertex, and adding a new edge as modiﬁcations. Let G be a plane graph obtained from G˜ by modifi- cations. In order to construct the gadgets we apply modifications to certain inner faces of G˜. These modifications often split an inner face of G˜ into several faces, or simply change the boundary of an inner face. Throughout this work, for a graph G obtained from G˜ by modifications which create a gadget, we refer to an inner face of G as the inner face of G˜ with the updated boundary if necessary.
In the figures of the gadgets, new edges are drawn thicker than edges in G˜ and
edges arising from subdivisions.


Variable Gadgets
The variable gadget consists of one decision gadget and several bifurcation gadgets.
The decision gadget is the part of the variable gadgets that encodes the True
or False assignment to the variable. Then, the bifurcation gadget replicates the information encoded by the decision gadget as many times as needed.
The following definition is used throughout the construction of the gadgets.

Let f be an inner face of G˜
and let i, j ∈ [k] be such that f is bounded by the

cycle ((i, j), (i + 1, j), (i + 1,j + 1), (i, j + 1)). To add a left arrow in the face f means to replace the edge {(i, j), (i, j + 1)} by the path ((i, j), s1, s2, (i, j + 1)), where s1 and s2 are new vertices, and to add the edges {(i + 1, j), s1} and {(i + 1,j + 1), s2}. Similarly, we define right arrow, up arrow, and bottom arrow.

Decision gadget
Consider a vertical edge e of G˜. Denote by f + and f− the two inner faces of G˜ whose edge at the right is e and whose edge at the left is e, respectively. To add a decision gadget for x ∈ U means to add a left arrow in f +, to add a right arrow in f−, and to delete the edge ex = e, see Figure 2.



Decision gadget.
Positive bifurcation.
Negative bifurcation.

Fig. 2. Decision and bifurcation gadgets. In Part b) and c), the highlighted subgraph visualizes, how the bend in f0 is split into two bends in the connection faces f2 and f3.

Faces f + and f−, are called the positive and the negative face of the variable x, respectively and the new edges in f + and f− are called the positive and the negative edges of the variable x, respectively.
Bifurcation gadget
Roughly speaking, a positive bifurcation gadget consists of two left arrows, where one of them is slightly twisted, see Figure 2. More precisely, consider two inner faces f0 and f1 of G˜ such that f1 is directly at the left of f0. Denote by e1 the unique edge of G˜ that is on the boundary of f0 and f1. Let e2 and e3 be the edges at the left and at the right of f1, respectively. The following modifications are applied to add a positive bifurcation gadget in f0 and f1. Add a left arrow in f0. Subdivide e2 with two vertices s1 and s2 and subdivide e3 once, say with the vertex s3. Without loss of generality, assume that s2 and s3 have a common neighbor. Insert the new
edge {s2, s3} and a new edge joining s1 to the common vertex of the edges at the bottom and at the right of the face f1. Faces f1 and f0 are called bifurcation faces, and f0 is also called the right connection face of the positive bifurcation gadget. This finishes the description of the positive bifurcation gadget. We add some more
notation. Denote by f2 and f3 the inner faces of G˜ that are directly at the left and
at the top of f1, respectively. The faces f2 and f3 are called the left and the top connection faces of the positive bifurcation gadget; but they do not belong to the positive bifurcation gadget.
The negative bifurcation gadget is obtained by rotating the positive bifurcation gadget around 180 degrees, see Figure 2 and the terminology for the negative bifur- cation gadget is naturally adapted.
2.1.1  Assembling the Variable Gadget
In what follows, we consider an instance φ = φ(U, C) of the Planar Monotone 3-SAT. Consider a variable x ∈ U . We denote by deg+(x) (resp. deg−(x)) the number of appearances of x (resp. x¯) in clauses of C. A variable gadget for x consists of deg+(x) positive bifurcation gadgets, deg−(x) negative bifurcation gadgets, all

top and bottom connection faces of the bifurcation gadgets, a left connection face of a positive bifurcation gadget and a right connection face of a negative bifurcation gadget.  See Figure 3.  More precisely, let (f1, e2,..., ed, fd) be a face-sequence


top connection face
top connection face



Fig. 3. The variable gadget. In the highlighted subgraph, the edge ex bends into the positive face f +, which results in bends in all top connection faces.


with d := 2(deg+(x)+ deg−(x)) such that fh+1 is the face at the right of fh for all h ∈ [d−1]. For each h ∈ [deg+(x)], the faces f2h−1 and f2h are modified according to the positive bifurcation gadget, the edge e2 deg+(x)+1 is removed, and, for each integer h with deg+(x)+1 ≤ h ≤ deg+(x)+ deg−(x), the faces f2h−1 and f2h are modified according to the negative bifurcation gadget. Note that the faces f2 deg+(x) and f2 deg+(x)+1 are automatically modified according to a decision gadget, which we set as the decision gadget for x. Further, an up arrow is added to each top connection face anda down arrow is added to each bottom connection face, top and bottom connection faces of the bifurcation gadgets are now called top and bottom connection faces of the variable gadget for x. Finally, the following modifications are applied to the left connection face of the “first” positive bifurcation gadget and the right connection face of the “last” negative bifurcation gadget: a new vertex v0
is inserted in the left connection face, say f0, and two new edges are added so that v0
is incident to both ends of the right edge of f0, and a new vertex vd+1 is inserted in the right connection face fd+1 and two new edges are added so that vd+1 is incident to both ends of the left edge of fd+1. Naturally, those faces are now called the left and the right connection face of the variable gadget for x, respectively.

Clause Gadgets
Consider a positive clause C ∈ C. A positive clause gadget for C consists of one inner face f of G˜, called clause face, and faces fl, fb, fr, which are the faces directly at the left, below, and at the right of f , respectively, called connection faces. In Figure 4, the positive clause gadget is depicted.
The negative clause gadget is obtained from the positive clause gadget by rotating it around 180 degrees. Its clause face and its connection faces: faces directly at the left, above, and at the right of the clause face, are defined accordingly.




Fig. 4. A positive clause gadget. Define XC = {g1, g2, g3, g4}.
Wire Gadgets
The task of the wire gadgets is to transfer the information from the variable gadgets to the clause gadgets.
Let F = (f0, e1, f1,..., ed, fd) be a face-sequence for some integer d. Then, F is called straight if d ≤ 1 or, eh ∩ eh+1 = ∅ for all h ∈ [d − 1]. Moreover, for an integer h ∈ [d − 1], the face-sequence F is almost straight (and it turns at fh) if F is not straight but F× := (f0, e1,..., fh) and F ×× := (fh, eh+1,..., fd) are straight. Let F = (f0, e1, f1,..., ed, fd) be a face-sequence that is straight or almost straight. To add a wire gadget along F consists of the following modifications: add an arrow to each face of F in such a way that the arrows point along F , see Figure 5. If F turns at fh, then only one edge of the arrow is added to fh, as shown in Figure 5.


Fig. 5. Wire gadgets along the face-sequences F′ = (f′ , e′ ,f′ , e′ ,f′ , e′ ,f′ ), F ′′ = (f′′, e′′,f′′), and

0  1  1  2
2  3  3
0  1  1

F = (f0, e1, f1, e2, f2, e3, f3, e4, f4). The faces f′ , f′′, and f4 are faces of the clause gadget, which causes
3  1
the modifications in these faces. The highlighted subdivision bends along F ′′ and F .


Construction of Gφ
Consider an instance φ = φ(U, C) of the Planar Monotone 3-SAT Problem with its monotone rectilinear representation R. Define n := |U| and m := |C|. Set k := 8m + 2n + 5. Denote by G˜ the k×k grid and consider G˜ together with its canonical embedding. In the following, we describe the way that gadgets are added to G˜ in order to construct Gφ.

First, the variable gadgets for the variables in U are added one after an-
other in the middle row of G˜.	More precisely, let jv =  1 k  and let FU :=
(f1, e2, f2,..., fk−1) be the straight face-sequence, where f1 is the inner face of G˜
whose boundary contains the grid vertices (1, jv) and (1, jv + 1) and fk−1 is the inner face of G˜ whose boundary contains the grid vertices (k, jv) and (k, jv + 1). Let U = {x1,..., xn} and assume that x1,..., xn is the order in which the vari- ables appear in the drawing R. The variable gadgets for x1,..., xn are placed,
one after another, along FU so that the left connection face of the variable gad- get for x1 is fm+3 and the right connection face of the variable gadget for xn is f7m+2n+2. In order to see that this is possible let di = 2(deg+(xi)+ deg−(xi))
and note that Σx∈U 1 dh counts each vertical line of R once and each clause
in R touches exactly three vertical lines. Hence, d1 + ... + dn = 6m and thus, m +2+ 2n + d1 + ... + dn = 7m + 2n + 2. Denote by G1 the graph obtained from G˜ by adding the variable gadgets in the described way.
In the following, more faces of G˜ in G1 are chosen for placing clause and wire gadgets. Using the rectilinear drawing R, we can choose distinct inner faces fC of G˜ for each clause C ∈ C and a straight or almost straight face-sequence FL in G˜ for
each vertical line L in R such that the following two properties hold (see Figure 1).
If L is a vertical line in R that joins a variable x ∈U to a positive (resp. negative) clause C ∈ C, then the face-sequence FL = (f0, e1, f1 ..., fd) satisfies: face f0 is a top (resp. bottom) connection face of the variable gadget corresponding to x, face f1 is the face directly above (resp. below) f0, and face fd is the clause face fC. Face-sequences FL are disjoint, possibly except for the last face, which is always a clause face and, for each clause C ∈ C there are exactly three face-sequences with last face fC.
Each face in FL = (f0, ve1 , f1,..., fd) has boundary distance at least m + 2; the
boundary distance of an inner face f of G˜ is defined as the length of a short-
est v, w-path such that v is on the boundary of f and w is on the boundary of the outer face of G˜. If FL is an almost straight face-sequence, then FL turns at fh with h ≤ d − 2.
We now finalize the description of Gφ. Starting with the graph G1, for each face-sequence FL = (f0, e1,..., fd−1, ed, fd) where L is a vertical line in R, add a wire gadget along FL. Observe that, for each clause C ∈ C, the faces directly above, below, at the left and at the right of fC as well as fC itself have not been modified so far. Next, for each positive (negative resp.) clause C ∈ C, add a positive (negative resp.) clause gadget such that its clause face is fC. Due to the construction of each
gadget, the planarity of G1 and property (1), the graph Gφ is planar. Also, observe that, in each face f of G˜ at most a constant number of vertices and edges have been added to construct the graph Gφ. Consequently, Gφ has size polynomial in k and also polynomial in the size of φ.
Finally, let F+ be the set of all face-sequences FL for each vertical line L in R
that joins x to a positive clause in C. Analogously, define F−.

Reduction
Here, we argue that the graph Gφ constructed in Section 3 contains a subdivision of a k×k grid if and only if the formula φ is satisfiable.

If φ is Satisﬁable
Assume that φ is satisfiable. We prove that Gφ contains a subgraph H, which is isomorphic to a subdivision of the k×k grid. Fix a satisfying assignment T : U → 

{True, False} of φ. Let ex denote the unique edge of G˜
that was deleted due

to the decision part of the variable gadget of x and define EU = {ex : x ∈ U}. Moreover, for each e = {u, v} ∈ E(G˜) \ EU , let the path Pe denote the u,v-path of Gφ that replaces e in the construction of Gφ. Let G˜s be the graph obtained from G˜ by replacing each edge e ∈ E(G˜) \ EU by Pe. Clearly, G˜s is a subdivision of G˜ and it is a subgraph of Gφ + EU . We argue now that it is possible to remove each edge e ∈ EU from G˜s while maintaining a subdivision of a k×k grid by introducing some bends.
Let H be the subgraph of Gφ obtained from G˜s by the following modifications.
For each variable x ∈U with T (x)= False, the edge ex is replaced by the positive edges of x and the edge e˜ joining them in Gφ. In other words, instead of using ex, in H, the edge ex bends into the positive face of the variable gadget for x. Next, the grid-path of G˜s that uses the edge e˜ is repaired by bending the left edge of
the positive face into the face on its left side. We repeat the repairing process sequentially until all repaired grid-paths are vertex-disjoint paths of Gφ, as indicated by the subgraphs in Figure 3 and Figure 5. The final graph H bends along each face- sequence in F+ with T (x)= False. Similarly, for each variable x ∈U with T (x)= True, bend ex into the negative face of x and repair the grid-paths so that H bends along each face-sequence in F− with T (x)= True.



The edges el and eb bend into fl
and fb, respectively.
The edges el and er bend into fl
and fr, respectively.

Fig. 6. local grid subdivisions in a positive clause gadget.

To see that the construction of H is feasible, it suffices to check that, in H, the edges on the boundary of the clause faces can bend into the clause faces. Consider a positive clause C ∈ C; the following argument is easy to adjust for a negative clause. As in Section 2.2, denote by fl, fb, and fr the connection faces of the clause C and, for each h ∈ {l, b, r}, let eh be the unique edge on the boundary of fh that contains

no vertex on the boundary of the clause face fC. Due to the examples in Figure 6 and symmetry, it is easy to see that locally there are grid subdivisions where up to two edges eh with h ∈ {l, b, r} bend into fh simultaneously. Since T is a satisfying assignment, there is a variable x that is used by C and satisfies T (x) = True. Denote by L a line segment of R that joins x to C. Since the edge ex bends into the negative face of x in H, the construction of H does not require any modifications along FL. Consequently, there is an h ∈ {l, b, r} such that eh does not bend into fh in H and the construction of H is feasible.

If Gφ Contains a Subdivision of a k × k Grid
Now, assume that G contains a subdivision of a k×k grid. We argue that φ is satisfiable. The main part of the proof is the next lemma. Define Xφ = C∈C XC, where XC ⊂ V (Gφ) is defined in Figure 4, for each C ∈ C.
Lemma 4.1 If Gφ contains a subgraph H that is isomorphic to a subdivision of a k×k grid, then (i) the boundary of the outer face of G˜ is exactly the boundary of the outer face of H and (ii) all the vertices in V (G˜) \ Xφ are in V (H).
Sketch of Proof of Lemma 4.1
Note that few new vertices of degree at least 4 are created when constructing Gφ

from G˜
and these vertices are in the clause faces. Further, each clause face can

contain at most 5 vertices with degree 4 in H. Thus, most of the intersection vertices of H with degree 4 must be in V (G˜). Hence, there must be vertices of the outer face of H, which are vertices of the outer face of G˜, and no vertex of the outer face of H belongs to a clause face. The previous fact allows us to prove that each clause face in fact contains at most 4 vertices with degree 4 in H. We can conclude that the outer face of H coincides with the outer face of Gφ, i.e., (i) is satisfied. Moreover, a separation argument implies that (ii) is satisfied, which completes the proof of the lemma.
Lemma 4.1 is used to argue that φ is satisfiable. Assume that Gφ contains a subgraph H that is isomorphic to a subdivision of the k×k grid. In order to define a truth assignment T : U → {True, False} for φ, consider a variable x ∈ U . In H, the edge ex of x, bends into the positive or into the negative face of x. Set T (x)= True if and only if ex bends into the negative face of x. For a contradiction, assume that there is a positive clause C ∈ C that is not satisfied by the assignment T ; the following is easy to adjust for a negative clause. Let x be an arbitrary variable used in C and denote by L a line segment in R that joins x to C. Then T (x)= False and, hence, ex bends into the positive face of x. Then, H bends along FL. As, in R, there are exactly three line segments that touch the clause C, there are three distinct face-sequences FL ending in a connection face of C and H bends along each of these face-sequences. However, the last is not possible and, hence, C must be satisfied. Consequently, φ has a satisfying assignment.

References
T. Asano. An approach to the subgraph homeomorphism problem. Theoretical Computer Science, 38(1):249 – 267, 1985.
M. de Berg and A. Khosravi. Optimal binary space partitions in the plane. In My T. Thai and Sartaj Sahni, editors, Computing and Combinatorics: 16th Annual International Conference, COCOON 2010, Nha Trang, Vietnam, 2010. Proceedings, pages 216–225. Springer Berlin Heidelberg, 2010.
G. Farr. The subgraph homeomorphism problem for small wheels. Discrete Mathematics, 71(2):129 – 142, 1988.
M. Garey and D. Johnson. Computers and Intractability: A Guide to the Theory of NP-Completeness.
W. H. Freeman & Co., New York, NY, USA, 1979.
M. Grohe, K. Kawarabayashi, D. Marx, and P. Wollan. Finding topological subgraphs is fixed-parameter tractable, pages 479–488. 2011.
A. LaPaugh and R. Rivest. The subgraph homeomorphism problem. Journal of Computer and System Sciences, 20(2):133 – 149, 1980.
N. Robertson and P. Seymour. Graph minors. XIII. The disjoint paths problem. Journal of Combinatorial Theory, Series B, 63(1):65 – 110, 1995.
R. Robinson and G. Farr. Structure and recognition of graphs with no 6-wheel subdivision. Algorithmica, 55(4):703–728, 2009.
R. Robinson and G. Farr. Graphs with no 7-wheel subdivision. Discrete Mathematics, 327(1):9 – 28, 2014.
