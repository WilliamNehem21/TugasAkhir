

Electronic Notes in Theoretical Computer Science 265 (2010) 259–276
www.elsevier.com/locate/entcs
Binding in Nominal Equational Logic
Ranald Clouston1,2
Computer Laboratory, University of Cambridge, Cambridge CB3 0DF, United Kingdom

Abstract
Many formal systems, particularly in computer science, may be expressed through equations modulated by assertions regarding the ‘freshness of names’. It is the presence of binding operators that make such structure non-trivial. Clouston and Pitts’s Nominal Equational Logic presented a formalism for this style of reasoning in which support for name binding was implicit. This paper extends this logic to offer explicit support for binding and then demonstrates that such an extension does not in fact add expressivity.
Keywords: Equational logic, nominal sets, name binding, alpha-conversion, nominal signatures.


Introduction
Formal languages in logic and computer science frequently utilise names, and equa- tions that are modulated by side conditions concerning names, such as η-equivalence in the λ-calculus:
λa.f a =η  f	if a does not appear free in f .
In the language of this paper, this side condition requires that a is fresh for f .
Such freshness conditions are trivial without the presence of operators that bind names in their arguments. For example, the λ-operator above binds one name in its argument. Given such operators we will generally want to work modulo α- equivalence, identifying terms that only differ uniformly in their bound names.
A variety of approaches have been suggested to formalise these ideas, most notably higher order abstract syntax (HOAS) [16] and the nameless approach of de Bruijn [8]. These approaches have their advantages, but have been criticised [4,2] for departing too far from intuitive pen-and-paper reasoning, which often involves the explicit manipulation of bound variables.

1 The author gratefully acknowledges the supervision and advice of Andrew Pitts, the comments of the reviewers, and the financial and pastoral support of the Woolf Fisher Trust.
2 Email: ranald@cloustons.org

1571-0661 © 2010 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2010.08.016

The Gabbay-Pitts FM-sets model [13], and its subsequent refinement to the nominal sets model [17], consider names as first class syntactic entities that may be permuted. This notion of the permutation of names turns out to be sufficient to formalise freshness, binding and α-equivalence, while remaining close to intu- itive practice and allowing these ubiquitous concepts to be studied as mathematical objects in their own right. A variety of work has been done within this model, in- cluding Nominal Equational Logic (NEL) [7], a logic designed to express equations modulated by freshness conditions, as with (1).
One difference between NEL and other approaches to these problems, such as Nominal Algebra [12], is that NEL employs a very simple notion of signature that does not explicitly support binding structure. Examples were given in [7] to indicate that such structure could often be encoded through the axioms of a NEL-theory, but it is an original contribution of this paper that this can be done in general. This is of interest because it shows us that binding is not logically fundamental to reasoning with names, however practically important it may be, so we may do much basic work without having to worry about such structure. The simplicity of NEL’s signatures simplify the many proofs by induction on the structure of terms that are necessary in developing the metatheory of NEL, while their closeness to the signatures of standard equational logic make it easier to develop algebraic accounts of NEL by analogy with the standard development, as is done extensively in [6].
This paper proceeds by defining binding NEL, an extension of NEL with ex- plicit support for binding based on the binding signatures of [10]. Sec. 6 then defines a translation from binding NEL back to NEL, and the main result of this paper, Thm. 6.9, shows that this translation maintains expressivity with respect to semantic consequence. Sec. 7 then presents an analogous result where binding is represented through nominal signatures [20]. While these extensions of NEL of- fer no more expressivity, it may sometimes be desirable to have binding structure built in at the lowest level of the logic on grounds of efficiency or usability, so these definitions are of interest in their own rights.
Finally, having proved that NEL may express operators with binding structure, Sec. 8 shows that the related but stronger property of characterising the nominal sets that model binding structure is not possible, and briefly discusses how NEL could be extended with that expressivity.

This paper is based on Chap. 4 of the author’s thesis [6]. There, NEL is defined in a slightly more general setting where the sorts of a signature form a nominal set rather than a set, but this generalisation has no bearing on the results of this paper, so we will work with NEL as first defined in [7].

Nominal sets
Definition 2.1 We start by fixing a countably infinite set A of atoms, which will capture the notion of names in applications of NEL. We assume that A is parti- tioned into countably infinitely many different atom sorts, each countably infinite

themselves. Call this set of atom sorts ASort, with typical member ν, and write the set of all atoms of sort ν as Aν. Note that we will not always specify the sort of an atom where that is clear from context.
Definition 2.2 The set Perm of (finite, sort-respecting) permutations of atoms consists of all bijections π : A → A such that
{a ∈ A | π(a) /= a} is finite;
For each atom a, the atom π(a) has the same sort as a.
Perm is generated by transpositions (a a') that send a to a', a' to a and leave all other atoms unchanged. It is a group whose multiplication is functional composition, π'π(a) = π'(π(a)), and identity is the permutation ι, where ι(a) = a for all a.
As such we can define Perm-sets in the usual way, as a set X equipped with a Perm-action Perm × X → X mapping (π, x) '→ π · x so that ι · x = x and π' · (π · x) = π'π · x.
Definition 2.3 Given a Perm-set X, a set of atoms a ⊆ A is said to support x ∈ X if for all a, a' ∈/ a, (aa') · x = x. x is ﬁnitely supported if there exists a finite set a supporting x.
A Perm-set X is a nominal set if every x ∈ X is finitely supported.
Definition 2.4 In fact, given any Perm-set X and x ∈ X, if x is finitely supported then there is a least such finite support [13, Prop. 3.4]. Call this set the support of x and write it supp(x).
If a ∈/ supp(x) then we say that a is fresh for x and write a # x. If a # x for all a in some set of atoms a then we write a # x.
Example 2.5 The set of atoms A, and any subset Aν of a particular sort, are nominal sets under the action π · a , π(a); then supp(a) = {a}. Similarly Pfin(A), the set of finite sets of atoms, is a nominal set under the action π·a , {π(a) | a ∈ a}, so supp(a) = a.
Example 2.6 Given nominal sets X, Y the Cartesian product X × Y is a nominal set with the obvious Perm-action, π · (x, y) = (π · x, π · y), so that supp(x, y) = supp(x) ∪ supp(y). There is another notion of a tensor product of nominal sets however, that of the separated tensor
X ⊗ Y , {(x, y) ∈ X × Y | supp(x) ∩ supp(y) = ∅}
with Perm-action and support sets defined as for Cartesian product.
Example 2.7 Nominal sets of lists of atoms can be constructed via Exs. 2.5 and 2.6. Given a list of atom sorts →ν = (ν1,... νn), let A→ν be the set of all lists of atoms (a1 ..., an) such that ai ∈ Aνi for 1 ≤ i ≤ n. This is a nominal set given the pointwise Perm-action
π · (a1,..., an) , (π(a1),..., π(an)) .
Clearly supp(a1,..., an) = {a1,..., an}. The nominal set A(∗) is defined via the sep- arated tensor (2) as the subset of A→ν of lists of atoms whose members are mutually distinct, with Perm-action and support as above.

Given two lists →a = (a1,..., an), →a' = (a' ,..., a' ) in A→ν we define their gener-
1	n
alised transposition as
(→a →a') , (a1 a' ) ··· (an a' ) .
1	n
Definition 2.8 A ﬁnitely supported function is a function between nominal sets,
f : X → Y , that is finitely supported with respect to the Perm-action
(π · f )(x) , π · f (π−1 · x) .
We call a function that is emptily supported under this definition an equivariant function; that is, π · (f (x)) = f (π · x). The category Nom of nominal sets has equivariant functions as its morphisms. Equivariant functions also have the property that they do not increase the support of their arguments:
a # x ⇒ a # f (x) .
Atom Abstractions
The nominal sets model supports a well established notion to describe binding operators, that of atom abstraction [17, Sec. 7], generalising the equational rules for α-equivalence over λ-operators presented in [15, Chap. 2].
Definition 3.1 Given an atom sort ν and nominal set X we define a relation on
Aν × X, (a, x) ∼ (a', x'), by

(a, x) ∼ (a', x') ⇔ (a b) · x = (a' b) · x'

for some atom b # (a, a', x, x'). This clearly defines an equivalence relation on Aν × X; write the equivalence class containing (a, x) as ⟨a⟩x and call such a class the atom abstraction of a in x.
In fact this relation is not only an equivalence but also equivariant, in that
(a, x) ∼ (a', x') ⇒ (π(a),π · x) ∼ (π(a'),π · x') .
We may hence construct a new nominal set by taking the quotient over this relation:
Definition 3.2 Given an atom sort ν and nominal set X the nominal set of atom abstractions of sort ν on X is defined by

[Aν]X , {⟨a⟩x | a ∈ Aν ∧ x ∈ X}
with Perm-action π · (⟨a⟩x) , ⟨π(a)⟩(π · x), which is well-defined by (6).
Lemma 3.3 Take a nominal set X, element x ∈ X and atom a. Then
supp(⟨a⟩x) = supp(x) − {a} .
Proof. [17, Prop. 5].	2

It will be necessary to consider situations when a finite list of atoms, rather than a single atom, is abstracted:
Definition 3.4 Suppose we have a list of atom sorts →ν = (ν1,..., νn) and a list of atoms →a = (a1,..., an) ∈ A→ν. Then we will write
⟨a1⟩(··· (⟨an⟩x) ·· ·) ∈ [Aν1 ](··· ([Aνn ]X) ·· ·)
as ⟨→a⟩x ∈ [A→ν]X.
Lemma 3.5 Take ⟨→a⟩x, ⟨→a'⟩x' ∈ [A→ν]X as above. Then
⟨→a⟩x = ⟨→a'⟩x' ⇔ (→a →b) · x = (→a' →b) · x'
where →b ∈ A(∗) is a list of distinct atoms such that supp(→b) # (→a, →a', x, x') and
(→a →b), (→a' →b) are generalised transpositions as in (4).
Proof. By induction of the length of →a; see [6, Lem. 4.1.6] for details.	2
An immediate corollary of this is that for all →a ∈ A→ν,
(7)	⟨→a⟩x = ⟨→b⟩((→a →b) · x)
where →b ∈ A(∗) and supp(→b) # (→a, x).
Nominal Equational Logic
This section presents Nominal Equational Logic (NEL) [7]. We will postpone giving examples of theories of this logic until Sec. 6, after we have shown how binding may be encoded through the simple signatures of NEL.
Definition 4.1 A NEL-signature Σ is an ordinary algebraic signature whose oper- ation symbols form a nominal set and whose typing function is equivariant. Fixing our notation, Σ comprises of
a set SortΣ, whose elements are called the sorts of Σ;
a nominal set OpΣ, whose elements are called the operation symbols of Σ; and
an equivariant typing function that assigns to each op ∈ OpΣ a type consisting of a finite (possibly empty) list →s = [s1,..., sn] of sorts of Σ and a sort s of Σ. As usual, the list →s indicates the number and sort of arguments that op accepts and s indicates the sort of result it returns. We write
op : →s → s
to indicate this typing information.
Definition 4.2 Fixing a countably infinite set Var of variables, the grammar of terms over a NEL-signature Σ is given by terms
t	::=	πx | op t ··· t

where π ∈ Perm, x ∈ Var and op ∈ OpΣ. We call πx a suspension and op t1 ··· tn a
constructed term.
All occurrences of variables x in terms are preceded by a suspended permutation
π, but where π is the identity permutation ι we shall abbreviate ιx just to x.
Definition 4.3 A sorting environment over a NEL-signature Σ is a partial function Γ : Var ~ SortΣ with finite domain dom(Γ) ⊆ Var.
Definition 4.4 The sets Σs(Γ) of terms of sort s ∈ SortΣ in a sorting environment
Γ are inductively defined by:
if π ∈ Perm, x ∈ dom(Γ) and Γ(x) = s, then πx ∈ Σs(Γ);
if op ∈ OpΣ has type [s1,..., sn] → s and ti ∈ Σsi (Γ) for 1 ≤ i ≤ n, then
op t1 ··· tn ∈ Σs(Γ).
We wish to be able to modulate our equations by assertions regarding the fresh- ness of names for variables, so we need to define a richer notion of environment than the sorting environments of Def. 4.3 before we define our judgements and semantics. Note that from here on we will use the symbols “≈” and “≈” to refer to the notions of equality and freshness defined by NEL, and continue to use “=” and “#”
for the actual equality and “not-in-the-support-of” relations in Nom.
Definition 4.5 A freshness environment over a NEL-signature Σ is a partial func- tion ∇ : Var ~ SortΣ × Pfin(A) with finite domain, mapping each variable in dom(∇) to a sort of Σ and finite set of atoms.  If dom(∇) is {x1,..., xn}, and
∇(xi) = (si, ai) for 1 ≤ i ≤ n, then we write ∇ as
(8)	[a1 ≈ x1 : s1,..., an ≈ xn : sn] .
Given any freshness environment ∇ we can derive a sorting environment ∇: by taking the first projection.
Definition 4.6 We wish NEL to be expressive enough to reason about both equal- ity between terms and the freshness of atoms for terms. Rather than use separate judgements for equality and freshness, it is convenient to roll both into a single judgement form. So we define a NEL-judgement over a signature Σ to have the form
∇▶ a ≈ t ≈ t' : s
where ∇ is a freshness environment over Σ (Def. 4.5), a ∈ Pfin(A), s ∈ SortΣ and
t, t' ∈ Σs(∇:) (Def. 4.4), where ∇: is defined as above.
Although this single form of judgement combining equality and freshness is use- fully compact, in particular cases it is clearer to use the following abbreviations:
t ≈ t' : s means ∅ ≈ t ≈ t' : s and, in a freshness environment, x : s means
∅≈ x : s.
a ≈ t : s means a ≈ t ≈ t : s.
a ≈ t ≈ t' : s means {a}≈ t ≈ t' : s and a ≈ x : s means {a}≈ x : s.

Definition 4.7 A NEL-theory T consists of a NEL-signature Σ together with a set of NEL-judgements over Σ, which we call axioms.
Definition 4.8 Given a NEL-signature Σ, a Σ-structure M in the category Nom
is specified by
a nominal set M s) for each sort s of Σ;
an equivariant map from each operation symbol op ∈ OpΣ with type →s → s to a finitely supported function
M op) : M →s ) → M s)

where if →s = [s1,..., sn] then M →s ) , M s1) ×· · · × M sn).
Where the name of the structure is not important we will omit it, writing M s) as
 s) and so forth.
Definition 4.9 Take a a NEL-signature Σ, a sorting environment Γ for that sig- nature and some Σ-structure. Let the set Γ) of Γ-valuations be the functions ρ mapping each x ∈ dom(Γ) to elements ρ(x) of Γ(x)).
The intended meaning of a freshness environment (8) is to assert not only that each variable xi has sort si, but also that it stands for an element of the correspond- ing nominal set whose support is disjoint from ai. Therefore we define the set of
∇-valuations as
 ∇) , {ρ ∈ ∇:) | a1 # ρ(x1) ∧· · · ∧ an # ρ(xn)}
where # is the freshness relation on each si) and ∇: is the sorting environment associated with ∇ by Def. 4.5.
Definition 4.10 The value t)ρ of a well-sorted term t ∈ Σs(Γ) with respect to a valuation ρ ∈ Γ) is an element of s) defined by
 π x)ρ , π · ρ(x) ;
(9)
 op t1 ··· tn)ρ , op)( t1)ρ,..., tn)ρ) .
Definition 4.11 Let Σ be a NEL-signature. A Σ-structure satisﬁes a NEL- judgement ∇▶ a ≈ t ≈ t' : s if for all ρ ∈ ∇) it is the case both that a # t)ρ and that t)ρ = t')ρ in s).
Given a NEL-theory T over Σ, a T-algebra is a Σ-structure that satisfies the axioms of T. Given a judgement ∇ ▶ a ≈ t ≈ t' : s, the semantic consequence relation
∇ ▶T a ≈ t ≈ t' : s
is defined to hold if all T-algebras satisfy the judgement.
Sound and complete proof rules for NEL are provided in [7], but we will prove the results of this paper directly on the semantics.

NEL with binders
This section will extend the definitions of the previous section to deal with bind- ing operators, defining binding NEL. This presentation, inspired by the binding signatures of [10], will use the atom abstractions of Sec. 3.

Definition 5.1 A binding NEL-signature Σ is specified by a set of sorts SortΣ and nominal set of operation symbols OpΣ as in Def. 4.1. The equivariant typing function now assigns to each op ∈ OpΣ a type consisting of a finite (possibly empty) list of pairs (→νi, si), where →νi is a finite (possibly empty) list of atom sorts and si ∈ SortΣ, along with a result sort s. If op is assigned n arguments we write this
op : [→ν1. s1,..., →νn. sn] → s .
The intended meaning is that op binds a list of atoms of sort →νi in its i’th argument. We use the abbreviations s for (). s and ν. s for (ν). s.

Definition 5.2 Given a binding NEL-signature Σ, the sets Σs(Γ) of terms of sort
s ∈ SortΣ in a sorting environment Γ are inductively defined by:
if π ∈ Perm, x ∈ dom(Γ) and Γ(x) = s, then πx ∈ Σs(Γ);
if op ∈ OpΣ has type [→ν1. s1,..., →νn. sn] → s, ti ∈ Σsi (Γ), and →ai ∈ A→νi for 1 ≤ i ≤ n
then op →a1. t1 ··· →an. tn ∈ Σs(Γ). We use the abbreviations t for ().t and a. t for
(a). t.
Judgements and theories may then be defined for binding NEL as in the previous section.

Example 5.3 A binding NEL-signature for the untyped λ-calculus [1] may be de- fined as follows. Fix a single atom sort ν ∈ ASort and a single sort tm representing λ-terms. Then the operation symbols are

{Va | a ∈ Aν} ∪ {L} ∪ {A}

representing variables, λ-abstractions and application respectively. The Perm-action on these operation symbols is π · Va = Vπ(a) and the identity on L and A. The typing function is defined by

Va : [ ] → tm,	L : [ν. tm] → tm,	A : [tm, tm] → tm .


The binding NEL-theory for αβη-equivalence on the untyped λ-calculus can then

be defined, following [7, Fig. 4], as:

a ≈ x : tm, x' : tm ▶ A (L a. x) x' ≈ x : tm	(β–1)
x' : tm ▶ A (L a. Va) x' ≈ x' : tm	(β–2)
x : tm, a' ≈ x' : tm ▶ A (L a. (L a' x)) x' ≈ L a' (A (L a. x) x') : tm (β–3)
x1 : tm, x2 : tm, x' : tm ▶ A (L a. (A x1 x2)) x' ≈
A (A (L a. x1) x') (A (L a. x2) x') : tm	(β–4)
a' ≈ x : tm ▶ A (L a. x) Va' ≈ (a a') x : tm	(β–5)
a ≈ x : tm ▶ x ≈ L a. (A x Va) : tm	(η)

In [7, Fig. 4] we needed to define an additional axiom, for α-equivalence, as NEL does not offer explicit support for binding. With the binding NEL of this section we have gained the ability to specify binding structure through the typing of operation symbols such as L. Therefore equality in the empty theory over a binding NEL- signature will be interpreted as α-equivalence rather than the literal equality of terms.
Example 5.4 Nominal Substitution [11, Sec. 1.4] is a theory of name-for-name substitution. Fixing ν, tm as above, we have the operation symbols

{suba : [ν. tm] → tm | a ∈ Aν}

with Perm-action π · suba = subπ(a). The intended meaning of the term suba b. t is to map b to a in t. The theory of Nominal Substitution is then given by:

x : tm ▶ suba a. x ≈ x : tm	(Identity)
a ≈ x : tm ▶ subb a. x ≈ x : tm	(Weakening)
x : tm ▶ subc b. subb a. x ≈ subc b. subc a. x : tm (Contraction-1) x : tm ▶ suba b. subb a. x ≈ suba b. x : tm    (Contraction-2) x : tm ▶ subd b. subc a. x ≈ subc a. subd b. x : tm (Permutation-1) x : tm ▶ subc b. subc a. x ≈ subc a. subc b. x : tm (Permutation-2)
Definition 5.5 Given a binding NEL-signature Σ, a Σ-structure is specified by sending sorts s to nominal sets s) and operation symbols op to finitely supported functions op) as with Def. 4.8, except that if op has type (10) then

 op) : [A→ν1 ] s1) ×· · · × [A→νn ] sn) → s) .
Definition 5.6 The value  t)ρ of a well-sorted binding NEL term t ∈ Σs(Γ) with

respect to a valuation ρ ∈ Γ) is defined to be an element of s) by:

 π x)ρ , π · ρ(x)
 op →a1. t1 ··· →an. tn)ρ , op)(⟨→a1⟩( t1)ρ),..., ⟨→an⟩( tn)ρ)) .

where each ⟨→ai⟩( ti)ρ) is an atom abstraction (Def. 3.4).
Satisfaction and algebra may then be defined for binding NEL as in the previous section.

Binders do not add expressivity
We now define a translation T from the binding NEL defined in the previous sec- tion to the NEL of Sec. 4. We will show that this translation does not sacrifice expressivity.
Definition 6.1 Given a binding NEL-signature Σ, define the NEL-signature T (Σ) by
SortT (Σ) , SortΣ;
For OpT (Σ), replace each op : [→ν1. s1,..., →νn. sn] → s ∈ OpΣ with the set
{op→a1,...,→an | →ai ∈ A→νi for 1 ≤ i ≤ n} .
All operation symbols in this set have type [s1,..., sn] → s. Defining the Perm- action on OpT (Σ) as π · (op→a1,...,→an ) , (π · op)π·→a1,...,π·→an ensures that OpT (Σ) is a nominal set and that the typing function is equivariant.
Given a term t ∈ Σs(Γ), where Σ is a binding NEL-signature, define T (t) ∈ T (Σ)s(Γ) by
T (π x) , πx 
T (op →a1. t1 ··· →an. tn) , op→a1,...,→an T (t1) ··· T (tn) .
Given a Σ-structure M , where Σ is a binding NEL-signature, define the T (Σ)- structure T (M ) by
T (M ) s) , M s) for all s ∈ SortΣ = SortT (Σ);
Given op→a1,...,→an : [s1,..., sn] → s as in (11) and xi ∈ T (M ) si) = M si) for 1 ≤ i ≤ n,
T (M ) op→a1,...,→an )(x1,..., xn) , M op)(⟨→a1⟩x1,..., ⟨→an⟩xn) .
Lemma 6.2 Take a binding signature Σ, sorting environment Γ, term t ∈ Σs(Γ), Σ-structure M and valuation ρ ∈ M Γ) = T (M ) Γ). Then
T (M ) T (t))ρ = M t)ρ .
Proof. By induction on the structure of t.	2

Definition 6.3 Given a theory T over a binding signature Σ we define a theory T (T) over T (Σ) as follows. First we replace each axiom ∇▶ a ≈ t ≈ t' : s of T with the axiom
∇▶ a ≈ T (t) ≈ T (t') : s
Then we add a binding axiom for each op→a1,...,→an : [s1,..., sn] → s ∈ OpT (Σ), where
→ai ∈ A→νi for 1 ≤ i ≤ n, as follows. Take distinct lists of atoms →b1,... ,→bn, where
→bi ∈ A(∗) and supp(→bi) # (op, →ai). Then the binding axiom is



​
supp(→b1) ≈ x1 : s1,..., supp(→bn) ≈ xn : sn ▶

op→a1,...,→an x1 ··· xn ≈ op→b ,...,→b
(→a1 →b1) x1 ··· (→an →bn) xn : s .

(14) may look complicated, but that is largely because it is robust enough to handle any binding structure in the arguments of an operation symbol. In practice binding structures will tend to be simpler, as in the following examples.
Example 6.4 In Ex. 5.3 we defined a binding NEL-signature for the untyped λ-calculus, in particular representing λ-abstractions by the operation symbol L : [ν. tm] → tm. Applying the translation T gives us a nominal set of operation sym- bols {La | a ∈ Aν}, each having type [tm] → tm. The binding axiom for each La is, following (14),
b ≈ x : tm ▶ La x ≈ Lb (a b) x : tm
where b /= a. In fact by the equivariance of NEL [7, Thm. 8.1] we only need one copy of this axiom as all others could be reached by applying some permutation.
Further, (15) is in fact equivalent to
x : tm ▶ a ≈ La x : tm .

This is the axiom that was presented for α-equivalence in [7, Fig. 4].
Example 6.5 The operation symbols of Nominal Substitution (Ex. 5.4) under this translation will be
{suba,b : [tm] → tm | (a, b) ∈ Aν × Aν}
with the evident Perm-action, where suba,b t is understood as mapping b to a in t.
We have the binding axioms

c ≈ x : tm ▶ suba,b x ≈ suba,c (b c) x : tm ;
c ≈ x : tm ▶ suba,a x ≈ suba,c (a c) x : tm .

where a, b, c are disjoint. The first axiom is equivalent to x ▶ b ≈ suba,b x while the second turns out to be a consequence of this and the other axioms presented in Ex. 5.4, so may be omitted from the full theory.

Lemma 6.6 If T is a theory over a binding NEL-signature Σ and M is a T-algebra, then T (M ) is a T (T)-algebra.
Proof. If ∇ ▶ a ≈ t ≈ t' : s is an axiom of T then (13) is an axiom of T (T). Take ρ ∈ T (M ) ∇) = M ∇). a # M t)ρ = M t')ρ because M is a T-algebra, so by Lem. 6.2, a # T (M ) T (t))ρ = T (M ) T (t'))ρ.
We now turn to the binding axioms (14). Given an appropriate valuation ρ, the value of the left hand side is
T (M ) op→a1,...,→an )(ρ(x1),... ρ(xn)) = M op)(⟨→a1⟩ρ(x1),..., ⟨→an⟩ρ(xn)) by (9) and (12). The right hand side is
M op)(⟨→b1⟩((→a1 →b1) · ρ(x1)) ... ⟨→bn⟩((→an →bn) · ρ(xn))) .
These are equal by (7).	2
So that our translation T is sound and complete, we also need to be able to translate algebras in the other direction, from T (T)-algebras M to T-algebras U (M ):
Lemma 6.7 Suppose that Σ is a binding NEL-signature and that M is a T (Σ)- structure that satisﬁes all the binding axioms for the translation. Then we can deﬁne a Σ-structure U (M ) by
U (M ) s) , M s);
Given op : [→ν1. s1,..., →νn. sn] → s, xi ∈ U (M ) si) = M si) and →ai ∈ A→νi for
1 ≤ i ≤ n,
U (M ) op)(⟨→a1⟩x1,..., ⟨→an⟩xn) , M op→a1,...,→an )(x1,..., xn) .
Proof. The step that requires proof is that (16) defines a function; that is, if we

have →ai, →a' ∈ A→ν and xi, x' ∈ M si) such that ⟨→ai⟩xi = ⟨→a' ⟩x'
for 1 ≤ i ≤ n then

i	i	i	1	i

M op→a ,...,→a
)(x1,..., xn) = M op→a' ,...,→a' )(x' ,..., x' ). Taking suitably fresh and

1	n	1	n	1	n
distinct →bi ∈ A(∗),
M op→a1,...,→an )(x1,..., xn) = M op→b ,...,→b )((→a1 →b1) · x1,..., (→an →bn) · xn) because M satisfies the relevant binding axiom. This equals
M op→	→ )((→a' →b1) · x' ,..., (→a' →bn) · x' )
b1,...,bn	1	1	n	n
because (→ai →bi) · x = (→a' →bi) · x' for 1 ≤ i ≤ n by Lem. 3.5. This in turn equals
M op→a' ,...,→a' )(x' ,..., x' ) by satisfaction of another binding axiom.	2
1	n	1	n
Lemma 6.8 [ref. Lems. 6.2 and 6.6] Take a binding signature Σ. Then
Given a sorting environment Γ, term t ∈ Σs(Γ), T (Σ)-structure M and valua- tion ρ ∈ M Γ),
U (M ) t)ρ = M T (t))ρ .

If T is a theory for Σ and M is a T (T)-algebra then U (M ) is a T-algebra.
Proof. (i) follows by induction on the structure of t, while (ii) follows by (i) and the translated axioms (13).	2
The final theorem of this section shows that given any theory over a binding NEL-signature, the translation T to a standard NEL-signature maintains expres- sivity with respect to the semantic consequence relation of Def. 4.11.
Theorem 6.9 Given any theory T over a binding signature Σ and any NEL- judgement ∇▶ a ≈ t ≈ t' : s over Σ,
∇ ▶T a ≈ t ≈ t' : s ⇔ ∇ ▶T (T) a ≈ T (t) ≈ T (t') : s .
Proof. Right-to-left: Take any T-algebra M and ρ ∈ M ∇). T (M ) is a T (T)- algebra by Lem. 6.6, so a # T (M ) T (t))ρ = T (M ) T (t'))ρ, which gives our result by Lem. 6.2. The converse holds similarly, by Lem. 6.8.	2

Nominal Signatures
Any work that attempts to capture the notion of binding has to confront the fact that many different definitions of binding exist. Many of the more elaborate notions, such as the binding specifications of Cαml [19], seek to extend practical, rather than theoretical, expressivity so can be translated into NEL-signatures as in the previous section at the cost of a loss of elegance. However it is an interesting open question to what extent other elaborate binders can be accommodated; see [5] for discussion. For now we will restrict our attentions to a notion of binding structure that
has been extensively used in the nominal sets literature, that of nominal signatures
[20]. An analogous result to that of this section has been independently developed for Nominal Algebra using a variation of nominal signatures that is unsorted [12, Sec. 5.1]. As we will see, utilising a sorting system introduces new subtleties into the proof.
Nominal signatures encode binding through their sort structure and use explicit atom abstraction terms. The sorts of a nominal signature start with a set of base sorts with typical member b, and are defined by
s ::= b | 1 | s × s | ν | ν. s
for all ν ∈ ASort. A nominal signature specifies the base sorts and a set of operation symbols, each with type s → b, where s is as in (17). The terms then have the following form and sort:
Unit: () : 1;
Pair: (t1, t2) : s1 × s2 if t1 : s1 and t2 : s2;
Constructed term: op t : b if op : s → b and t : s;
Atom: a : ν for a ∈ Aν;
Atom abstraction: a. t : ν. s if a ∈ Aν and t : s;

Suspension: πx : s if π ∈ Perm and x has base sort or atom sort s according to some sorting environment.
Nominal signatures may include variables of atom sort, but while such variables may be convenient they do not add expressivity: a judgement whose freshness environment contains a ≈ x : ν can be replaced in a theory by judgements without that assertion in the freshness environment, applying the substitution {a/x} to the judgement’s terms for all a ∈ A − a. Therefore we will only consider variables of base sort b.
An algebra for such a nominal signature involves first assigning a nominal set
 b) to each base sort b, allowing us to define s) for each sort s:
 1) , {∗},	 s × s') , s) × s'),	 ν) , Aν,	 ν. s) , [Aν] s) .
Next we assign an equivariant function op) : s) → b) to each op : s → b. Given a valuation ρ of variables of sort b to members of b) we define the values of terms by

 ())ρ , ∗,	 (t1, t2))ρ , ( t1)ρ, t2)ρ),	 op t)ρ , op)( t)ρ),
 a. t)ρ , ⟨a⟩( t)ρ),	 π x)ρ , π · (ρ(x)) .

We may now follow Sec. 6 and define a translation T from this logic to NEL. Given a nominal signature Σ we define the NEL-signature T (Σ) as follows: set SortT (Σ) to be the sorts enumerated by (17) and OpT (Σ) to be the set of operation symbols of Σ along with the new symbols
unit : [ ] → 1;
pair : [s, s'] → s × s' for all sorts s, s';
{atma | a ∈ Aν} : [ ] → ν for all atom sorts ν;
{absa | a ∈ Aν} : [s] → ν. s for all sorts s and atom sorts ν
with the evident Perm-actions. Hence given any Σ-term t we produce the T (Σ)-term
T (t) by the obvious substitutions, replacing each () by unit and so forth.
Given an Σ-structure M for a nominal signature Σ we may define a T (Σ)- structure T (M ) by following (18) for each T (M ) s) and setting

T (M ) op) , M op),	T (M ) unit) , ∗,	T (M ) pair)(x1, x2) , (x1, x2), T (M ) atma) , a,	T (M ) absa)(x) , ⟨a⟩x .
Now given a Σ-theory T for a nominal signature Σ we define the T (Σ)-theory T (T) by replacing each axiom ∇ ▶ a ≈ t ≈ t' : s by ∇ ▶ a ≈ T (t) ≈ T (t') : s and adding the binding axioms
x : s ▶ a ≈ absa x : ν. s
for every sort s, atom sort ν and some a ∈ Aν. Analogues of Lems. 6.2 and 6.6 for this translation T follow.

Still following Sec. 6, we define a translation U from T (Σ)-structures M to Σ- structures by first setting U (M ) b) , M b). We then define a family of equivariant functions fs : U (M ) s) → M s) as s ranges over the sorts (17) as follows:
fb is the identity on U (M ) b) = M b);
f1(∗) = M unit);
fs1×s2 (x1, x2) = M pair)(fs1 (x1), fs2 (x2)) for all xi ∈ U (M ) si) and i = 1, 2;
fν(a) = M atma) for all a ∈ Aν;
fν. s(⟨a⟩x) = M absa)(fs(x)) for all x ∈ U (M ) s) and a ∈ Aν.
To see that fν. s is a well-defined function requires the binding axiom (19). Using all this we may now define the structure U (M ) on operation symbols by
U (M ) op) , M op) ◦ fs
for all op : s → b of Σ. We can then show by a routine induction that
M T (t))ρ = fs(U (M ) t)ρ)
where t has sort s according to some freshness environment and ρ is a valuation for that environment. In the case where s = b, fb is the identity, so M T (t))ρ = U (M ) t)ρ, following Lem. 6.8.  Therefore if M is a T (T)-algebra then U (M ) is a T-algebra so long as all the axioms of T have base sort. We can then prove a version of Thm. 6.9 provided again that the sorts of the axioms and the judgement in question are of base sort b.
This is reasonable restriction on the class of judgements over a nominal signature that we wish to consider, as it is in keeping with the restrictions made in [20] on the sorts that variables may take and the result sorts of operation symbols. The intuition justifying all these restrictions is that the base sorts represent the sorts that terms may take in some formal system that we are defining with our theory, while the other sorts are used only in constructing a term. Allowing theories to include axioms that use these non-base sorts is not in keeping with this intuition, and also allows the definition of inconsistent judgements like ▶ a ≈ a : ν. Therefore we may reasonably consider the translation T sound and complete.
Further work – Characterising atom abstractions
The previous sections have shown that NEL is expressive enough to encode the binding structure of operators. However, we might ask the related but stronger question of whether we can characterise atom abstractions with a NEL-theory, in the sense of the well known result that products may be characterised by an equational theory (see e.g. [9]). In fact this characterisation is not quite possible, and this section will discuss why this is, how close we can come to this result and how in future work we might extend NEL to have this expressivity.
Just as the equational theory for products requires operation symbols for prod- ucts and projection, we will need some way to deconstruct our atom abstractions.

The appropriate such notion is concretion [13, Def. 5.3]:
Definition 8.1 Concretion is an equivariant function [Aν]X ⊗ Aν → X whose action on (y, b) is written y @ b. In other words, by Ex. 2.6 and Lem. 3.3, ⟨a⟩x @ b is defined if either b = a or b # x. Concretion is defined by
⟨a⟩x @ b , (a b) · x .
In particular, in the case that b = a, ⟨a⟩x @ a = x.
Now suppose we wished to define a NEL-theory for atom-abstraction and concre- tion over some sort s. We would introduce new sorts ν. s for all ν ∈ ASort, along with operation symbols representing atom abstraction, absa : [s] → ν. s for all a ∈ Aν. To then define operation symbols for concretion likewise, cona : [ν. s] → s, would involve interpreting cona as a total function ν. s) → s), where in fact it should only be partial; we should only have the term cona x when we can guarantee that a # x. NEL, like standard equational logic, offers no support for such partiality.
However concretion can be extended to a total function for a surprisingly large range of nominal sets. For example, the nominal set A has such a ‘total concretion’ defined on it by


(20)
⟨b⟩b @ a , a ;
b /= c ⇒ ⟨b⟩c @ a , c .

The second equation includes the case that c = a, despite the fact that a ∈ supp(⟨b⟩a) = {a}. Similarly, concretion can be defined as a total function on any nominal set equipped with a restriction structure [18, Thm. 22] (this does not sub- sume (20) as A cannot have a restriction structure defined upon it).
If we restrict our attention to those nominal sets for which concretion can be defined as total we can indeed characterise atom abstraction with a NEL-theory:
x : s ▶ a ≈ absa x : ν. s


(21)
x : s ▶ cona absa x ≈ x : s
b ≈ x : s ▶ conb absa x ≈ (a b) x : s
a ≈ x : ν. s ▶ absa cona x ≈ x : ν. s

Note that the first axiom listed is this theory’s binding axiom (Def. 6.3).
However such total concretions cannot be defined on nominal sets in general.
Consider the nominal set A ⊗ A, and the pair that would be defined by
(22)	⟨a⟩(a, b) @ b
where a /= b by definition. ⟨a⟩(a, b) has support {b} by Lem. 3.3, so because concre- tion is equivariant, (22) must have support contained in {b} by (5). But all elements of A ⊗ A have two atoms in their support sets.
A number of ways present themselves to extend NEL so that (21) may char- acterise atom abstraction over any nominal set. For example, we could introduce

partiality directly [3], or we could carry around freshness information in the sort structure and only allow concretion to be defined where our sort guarantees the correct freshness. The latter approach would require the extension to NEL outlined in [6], where the collection of sorts may form a nominal set, along with an ordering on the sorts [14] so that if we have finite sets of atoms a, a' such that a ⊆ a' then a sort with a guaranteed to be fresh for it will be a subsort of that sort with a' guaranteed fresh.

References
Barendregt, H. P., “The Lambda Calculus: Its Syntax and Semantics,” North-Holland, Amsterdam, 1984.
Berghofer, S. and C. Urban, A head-to-head comparison of de Bruijn indices and names, Electronic Notes in Theoretical Computer Science 174 (2007), pp. 53–67.
Burmeister, P., Partial algebras – an introductory survey, in: I. Rosenberg and G. Sabidussi, editors, Algebras and Orders (Proc. of the Summer School at Montreal), Kluver Publ. Co, Dordrecht, 1992 pp. 1–70.
Cheney, J., Logic column 14; nominal logic and abstract syntax, SIGACT News 36 (2005), pp. 47–69.
Cheney, J., Towards a general theory of names, binding and scope, in: MERLIN (2005), pp. 33–40.
Clouston, R., “Equational logic for names and binders,” Ph.D. thesis, University of Cambridge (2009).
Clouston, R. A. and A. M. Pitts, Nominal equational logic, Electronic Notes in Theoretical Computer Science 172 (2007), pp. 223–257.
de Bruijn, N. G., Lambda calculus notation with nameless dummies, a tool for automatic formula manipulation, with application to the Church-Rosser theorem, Indagationes Mathematicae 34 (1972),
pp. 381–392.
de Vrijer, R. C., Extending the lambda calculus with surjective pairing is conservative, in: LICS, 1989,
pp. 204–215.
Fiore, M. P., G. D. Plotkin and D. Turi, Abstract syntax and variable binding, in: 14th Annual Symposium on Logic in Computer Science (1999), pp. 193–202.
Fiore, M. P. and S.Staton, A congruence rule format for name-passing process calculi from mathematical structural operational semantics, in: Proceedings of the 21st Annual IEEE Symposium on Logic in Computer Science (LICS’06) (2006), pp. 49–58.
Gabbay, M. J. and A. Mathijssen, Nominal (universal) algebra: equational logic with names and binding, Journal of Logic and Computation (2009), in press.
Gabbay, M. J. and A. M. Pitts, A new approach to abstract syntax with variable binding, Formal Aspects of Computing 13 (2002), pp. 341–363.
Goguen, J. and R. Diaconescu, An Oxford survey of order sorted algebra, in: Mathematical Structures in Computer Science, 1994, pp. 363–392.
Gunter, C. A., “Semantics of Programming Languages: Structures and Techniques,” Foundations of Computing, MIT Press, Cambridge, MA, 1992.
Pfenning, F. and C. Elliot, Higher-order abstract syntax, in: Proceedings of ACM-SIGPLAN Conference on Programming Language Design and Implementation (1988), pp. 199–208.
Pitts, A. M., Nominal logic: A first order theory of names and binding, in: N. Kobayashi and B. C. Pierce, editors, Theoretical Aspects of Computer Software, 4th International Symposium, TACS 2001, Sendai, Japan, October 29-31, 2001. Proceedings, Lecture Notes in Computer Science 2215 (2001), pp. 219–242.
Pitts, A. M., Nominal System T, in: Proceedings of the 37th ACM SIGACT-SIGPLAN Symposium on Principles of Programming Languages (POPL 2010), Madrid, Spain (2010), pp. 159–170.

Pottier, F., An overview of Cαml, in: ACM SIGPLAN Workshop on ML (ML 2005), Tallinn, Estonia, Electronic Notes in Theoretical Computer Science (2005), pp. 27–52.
Urban, C., A. M. Pitts and M. J. Gabbay, Nominal unification, in: M. Baaz, editor, Computer Science Logic and 8th Kurt Go¨del Colloquium (CSL’03 & KGC), Vienna, Austria. Proceedings, Lecture Notes in Computer Science 2803 (2003), pp. 513–527.
