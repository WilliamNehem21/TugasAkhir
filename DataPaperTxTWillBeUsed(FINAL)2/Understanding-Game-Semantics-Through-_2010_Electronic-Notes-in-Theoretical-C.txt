

Electronic Notes in Theoretical Computer Science 265 (2010) 231–244
www.elsevier.com/locate/entcs

Understanding Game Semantics Through Coherence Spaces
Ana C. Calderon1 ,2	Guy McCusker3
Department of Computer Science University of Bath
Bath, U.K.

Abstract
Game Semantics has successfully provided fully abstract models for a variety of programming languages not possible using other denotational approaches. Although it is a flexible and accurate way to give semantics to a language, its underlying mathematics is awkward. For example, the proofs that strategies compose associatively and maintain properties imposed on them such as innocence are intricate and require a lot of attention. This work aims at beginning to provide a more elegant and uniform mathematical ground for Game Semantics. Our quest is to find mathematical entities that will retain the properties that make games an accurate way to give semantics to programs, yet that are simple and familiar to work with. Our main result is a full, faithful strong monoidal embedding of a category of games into a category of coherence spaces, where composition is simple composition of relations.
Keywords: Game Semantics, Coherence Spaces, relations, strategies


Introduction
Although Game Semantics is a flexible and accurate way to model the semantics of programming languages (see for example [3], [9], [1]), there is a vast proliferation of different categories of games, and very often there are basic structural facts (associativity, validity of composition) which are proved over and over again, with subtle differences each time. It therefore makes sense to attempt a study of the fundamental building blocks of game semantics, aimed at making the field more mathematically mature, with the hope that in future, one can concentrate on what is new or different when proposing a new category of games.
Harmer, Hyland and Mellies’s work [8] can be seen as addressing a part of this question, focussing specifically on the exponentials and innocence of strategies. Our

1 This version of the paper incorporates comments from anonymous referees, to whom we are grateful.
2 Email: acma20@cs.bath.ac.uk
3 Email: G.A.McCusker@bath.ac.uk

1571-0661© 2010 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2010.08.014

work takes a different approach, with the goal of explaining game semantics through the more familiar category of coherence spaces [7]. Motivated by the work of Hyland and Schalk [10], which presents a faithful functor from the category of games and deterministic strategies to the category of sets and relations, we ask if it is possible to provide a more elegant and uniform mathematical ground for Game Semantics. In the category of games, a map σ : A ( B is given by a strategy on a game
A ( B, whose plays are interleavings of plays in A and in B. Hyland and Schalk’s
functor maps such a strategy to a relation between PA and PB (the set of plays of A and B) given by {(s TA,s TB)|s ∈ σ}. Faithfulness of this functor is somewhat surprising, because the functor eliminates the interleaving information, which seems to be the essence of a games model.
Though this functor is faithful, it is far from being full, and it does not preserve a lot of the structure of the category of games, for instance the monoidal structure. In this work we seek to improve on this situation by successively refining the codomain category. This is related to work by Hyland and Schalk [10] as discussed in further detail below.
The category of coherence spaces and linear maps (Coh) can be seen as a refine- ment of Rel by means of the coherence relation, whose purpose can be thought of as imposing determinacy on the naturally non-deterministic model of relations. We first show that Hyland and Schalk’s functor lifts to a faithful functor from Games to Coh.
We then refine Coh by imposing an order relation, intended to mimic the prefix ordering on plays. We call this refined category P coh and show that it posesses a monoidal structure akin to that of the category of Games. Our main result is that the Hyland-Schalk functor lifts to a fully faithful strong monoidal embedding into a certain subcategory of P coh.
Related Work
The work closest to ours is that of Hyland and Schalk [10], which provides a full and faithfully functor fromthe category of games and deterministic strategies to a category whose maps consists of relations, which may be seen as a generalised category of coherence spaces. However, the functor presented there is not strong monoidal, that is, the “interleaved parallel” monoidal operation characteristic of game semantics is lost. Our target category does possess such a monoidal structure, and we obtain a strong monoidal functor as a reult.
The work of [4,15,6] defines a “time-forgetting” operation on games which is not functorial but lax-functorial, and maps the game semantics of multiplicative- exponential linear logic onto its relational semantics. However, a somewhat different situation arises if one focuses on innocent strategies. Melli`es’s work [16,13,14] shows that innocent strategies are “relational”, that is, can be characterized as relations between positions. Thus his work gives rise to a strong monoidal functor from a category of games and innocent strategies to Rel, which is in essence the same as the time-forgetting map.
Our interest is in the full range of potentially non-innocent strategies, because of

their use in modelling imperative programming features. In this setting, the time- forgetting operation appears to correspond to the collapse from the game semantics of Idealized Algol [3] to Reddy’s object-space semantics of interference-controlled Algol [17]. A proper analysis of the situation and its relationship with Melli`es’s results must be left for further work.

From Games to Relations
Preliminaries
We first define the category of games on which our work is based, and review Hyland and Schalk’s faithful functor into Rel. We are not aware of a previously published proof of the faithfulness of this functor, so we provide one here.

Notation
Given sets X and Y , we denote by Alt(X, Y ) the set of sequences whose elements alternate between X and Y . Given a sequence s ∈ Alt(X, Y ) we write s TX for the subsequence of s consisting only of elements of X and similarly for s TY . We use X + Y to denote the disjoint union of X and Y and X∗ the set of sequences whose elements belong to X.
Given sequences s, t we write |s| to denote the length of s. We use “±” to denote the prefix order on sequences i.e. t ± s if and only if there exists some sequence u such that t · u = s. We write t ±even s if and only if t ± s and |t| is even and t ±odd s if and only if t ± s and |t| is odd.
Definition 2.1 A game, A = (MA, PA), consists of a set MA = MO + MP , called
A	A
its set of moves, and a non-empty, prefix closed subset, PA, of Alt(M O,MP ), called
A	A
its set of plays, such that the first element of a sequence s ∈ PA belongs to MO. We

call the elements of MO opponent moves and the elements of MP
player moves.

A	A
Remark 2.2 [Parity] Given a game A if s ∈ PA then, since the first element of s
belongs to MO and s ∈ Alt(M O,MP ), if s ends in an opponent move then |s| is
A	A	A
odd and if s ends in a player move then |s| is even. This will be crucial in the work
with coherence spaces.
Definition 2.3 A strategy σ on a game A consists of a non-empty set of even-length elements of PA such that if s ∈ σ and t ±even s then t ∈ σ.
Definition 2.4 Let E and F be coherence posets, define the coherence poset E (

F as (E ×
-
F, ×E(F
, “E(F
) where

-	∗	∗	-	∗	-	∗	- ∗	∗

(e, f ) ×E(F (e ,f ) iff e ×E e implies that f ×F f and if e × e and f “ f
e “ e∗.
then

and (e, f ) “E(F (e∗,f ∗) iff e “ e∗ and f “ f ∗
Definition 2.5 A deterministic strategy σ on a game A is given by a strategy that satisfies determinacy i.e. if sab, sac ∈ σ, |s| even, then b = c.
Definition 2.6 The game A ( B is defined as

MO	= MO + MP
A(B	B	A
MP	= MP + MO
A(B	B	A

PA(B ⊆ Alt(M O
P A(B
) consists of all sequences, s, such that s TA∈ PA

and s TB∈ PB.
Remark 2.7 Let s ∈ PA(B and suppose x is the last move of s. Then if x ∈ MO

or x ∈ MP
then |s| is even, and if x ∈ MP
or x ∈ MO then |s| is odd.

The category GAM has games as objects, and an arrow A → B is given by a deterministic strategy σ : A ( B. As usual, composition is given by parallel composition plus hiding and the identities given by copycat strategies (see, for example [12,9,2]).
Lemma 2.8 Let s ∈ PA(B.If |s| is odd then |s TA | is even and |s TB | is odd.
¿From this lemma one can deduce that the only protagonist allowed to switch between components A and B in A ( B is the player i.e. if scx ∈ PA(B and |s| is odd then if c ∈ MA (respectively MB) then x ∈ MA (respectively MB). This is called the switching condition [1].
Definition 2.9 Given games A and B, we define the game A ⊗ B as
MO	= MO + MO
A⊗B	B	A
MP	= MP + MP
A⊗B	B	A

PA⊗B ⊆ Alt(M O
P
A⊗B
) consists of all sequences s such that s TA∈ PA and

s TB∈ PB.
Define IGAM := (∅, {ϵ}). Let σ : A ( B, τ : C ( D be strategies and define
σ ⊗ τ := {s ∈ PA⊗C(B⊗D|s TA,B∈ σ and s TC,D∈ τ }
Proposition 2.10 ⊗ : GAM × GAM → GAM equips GAM with a monoidal structure.
Definition 2.11 The functor grel : GAM → Rel [10] is defined as follows:
Its action on objects maps a game, A, to its set of plays, PA; and, given games A and B, its action on morphisms maps a strategy σ : A ( B to a relation grel(σ) := {(s TA,s TB)|s ∈ σ}⊆ PA × PB.
Observe that at first glance, this functor seems to destroy the interleaving in- formation of plays. For example, consider a strategy σ : A ( B with the plays:
A	(	B	and	A	(	B

b1	b1
b2	a1
b3	a2
a1	b2
a2	b3
a3	a3

Both these plays get mapped to (a1a2a3, b1b2b3) ∈ grel(σ). However, prefix closure implies that b1a1, b1b2 ∈ σ which breaks determinacy. It turns out that determinacy and prefix closure are enough to recover the interleaving information of plays; this will be crucial in proving that the functor is faithful. The following lemma formalizes this discussion.
Lemma 2.12 Let σ : A ( B be a deterministic strategy, with p, p∗ ∈ σ player positions. If
p TA= p∗ TA and p TB= p∗ TB	(1)
then p = p∗.
Proof. Let p and p∗ be as above. By the definition of PA(B, from p TB= p∗ TB we know that p, p∗ have at least their initial moves in common, so we may take m to be the largest possible sequence of moves that p and p∗ have in common. If we assume, seeking a contradiction that p /= p∗, then (1) implies that |p| = |p∗| and it must be the case that there are sequences of moves s1 and s2 so that
p = ms1 and p∗ = ms2 where |s1| = |s2| /=0	(2)
We will show that the moves from m exhaust p and exhaust p∗. Suppose |m| is odd, then we can write it as m = m∗a with a an opponent move. Substituting into (1)

we have p = m∗ab1s∗
and p∗ = m∗ab2s∗
where b1s∗
= s1 and b2s∗
= s2 and b1 /= b2.

Because strategies are even-length prefix closed, it follows that mab1, mab2 ∈ σ with b1 /= b2 which contradicts determinacy. We conclude that m is of even length, and hence the first moves in s1 and s2 are done by opponent, by the switching condition they must be in the same component as a. By (1) b1 = b2. But by maximality of m, b1 /= b2, so s1 = s2 = ϵ contradicting (2). We thus conclude that p = p∗.   2
The following lemma is an easy consequence of determinacy.
Lemma 2.13 Let σ : A ( B be a deterministic strategy. Let p, p∗ ∈ σ, p /= p∗. If
p TA, p∗ TA ﬁrst differ at an opponent move (in A); then p, p∗ ﬁrst differ in B.
Proposition 2.14 grel : GAM → Rel is faithful
Proof. Let σ, τ : A ( B be deterministic strategies with grel(σ) = grel(τ ). Let
p ∈ σ then there exists p∗ ∈ τ with
p TA= p∗ TA  and p TB= p∗ TB	(3) We will show that for all t such that t ±even p, t ±even p∗:
Let t ±even p. If |t| = 0 then t = ϵ and t ±even p∗. For the inductive step, suppose |t| > 0. Then t = t∗mn for some t∗ ±even p; by induction, t∗ ±even p∗. Suppose p∗ = t∗m∗n∗; we will show that t∗mn = t∗m∗n∗.
Since |t| is even, by switching, m, m∗ lie in the same component. So, by (3) m = m∗. Suppose n /= n∗. Now, (3) forces n, n∗ to belong to different components; suppose n ∈ A and n∗ ∈ B (the case when n ∈ B and n∗ ∈ A is dealt with

symmetrically). Write s = tmn and s∗ = tmn∗. We know that (s TA,s TB), (s∗ TA
, s∗ TB) ∈ grel(σ) (since grel(σ)= grel(τ )).

Hence, there exists some s1, s∗
∈ σ with



s1 TA= s TA	s1 TB= s TB and s∗
TA= s∗ TA	s∗
TB= s∗ TB

Observe that n ∈ A is an opponent move in A (since it is a player move in A ( B).

Now, s1 TA, s∗
TA first differ at an opponent move and by lemma 2.13, s1, s∗
first

differ in B. Now, s1 TB, s∗ TB first differ at n∗ ∈ B which is a player move; but
this contradicts determinacy of σ.Hence, n = n∗ and we conclude that for every t ±even p, t ±even p∗ as required. From this it follows that p = p∗ and hence σ ⊆ τ . A symmetric argument shows that τ ⊆ σ and hence σ = τ as required.	2
Remark 2.15 The functor grel eliminates interleaving at the top-level only: the full detail of the plays in A and B is retained. This is in contrast with the “time- forgetting” operation studied in [4,15,6] which recursively removes interleavings in A and B.

From Games to Coherence Spaces
We move to the category Coh [7] which has as objects coherence spaces, and as morphisms relations subject to some constraints, and already we can see some game structure in this category. We establish that grel : GAM → Rel lifts to a faithful functor gcoh : GAM → Coh.
Definition 3.1
-
A coherence relation on a set E, denoted ×E, is a symmetric reflexive relation
×	-
on E. We write e1 - e2 if and only if e1 = e2 or e1 /× e2.
-	-
A coherence space, (E, ×E), consists of a set, E, and a coherence relation ×E.
-
A conﬁguration of a coherence space E is a subset F of E so that f1 × f2 for
every f1, f2 ∈ F .
Definition 3.2 We now describe a category, Coh. Its objects are given by coher- ence spaces. Given two coherence spaces E, F , an arrow E → F is given by a

relation Γ ⊆ E × F such that for every (e, f ), (e∗,f ∗) ∈
Γ if e ×E e∗
-
then f ×F
f ∗,

-	∗	∗	∗
and if e ×E e and f = f then e = e . Composition and identity are as in the
category of sets and relations, Rel.
Observe that the condition on the maps is equivalent to requiring that for all

(e, f ), (e∗,f ∗) ∈
Γ if e ×E e∗
-
then f ×F
f ∗ and if f
= f ∗ then e = e∗.

Definition 3.3 Let E and F be coherence spaces, we define the coherence space

E ( F as (E ×
-
E(F
-	∗	∗
E(F
-	e∗ ⇒

(f ×F f ∗
F, ×
and (f = f ∗
) where (e, f ) ×
⇒ e = e∗)).
(e ,f ) if and only if e ×E

Observe that arrows E → F in the category Coh are given by configurations of
E ( F .

Given a game, A with set of plays PA, we can build a coherence space by defining
-
s × t if and only if the largest common prefix of s and t has even length or s = t.
-
Then (PA, ×) is a coherence space, which we denote gcoh(A).
The following proposition shows that this notion of coherence precisely captures determinacy of strategies.
Proposition 3.4 Given games A and B; a strategy σ : A ( B is deterministic if and only if grel(σ): gcoh(A) → gcoh(B) is a a map in Coh.
Proof. Let A and B be games and suppose that σ : A ( B is a deterministic
strategy. Let (s1, s2), (t1, t2) ∈	1 - 1
s, t ∈ σ with (s TA,s TB)= (s1, s2) and (t TA,t TB)= (t1, t2) . If s = t; then clearly
-
t2 × s2 and t2 = s2 and t1 = s1.
Suppose that s /= t; then by determinacy their first point of difference, m ∈
MA(B, must be an opponent move in A ( B and hence either m ∈ A and it is
a player move or m ∈ B and it is an opponent move. If m ∈ A then s1 /- 1
× t , so
it must be that m ∈ B; note that m is also the first point of difference between
-
s2 and t2 and hence s2 × t2. Suppose s2 = t2; since we have just shown that s
and t necessarily first differ in B, we must have s1 = t1 and therefore grel(σ) is a configuration.
On the other hand, suppose that grel(σ) is a configuration. Let sab, sac ∈ σ where |s| is even and a, b, c ∈ MA(B. We claim that b = c. Observe that b, c are player moves in A ( B and hence each is either an opponent move in A or a player move in B.
b, c ∈ A then observe that sab TA= sa TA ·b  sac TA= sa TA ·c. If b /= c; then s, t
-
first differ at b (or c) which is an opponent move in A. Hence sab TA× sac TA.
Now, sab TB= sac TB so it must be, since grel(σ) is a configuration, that sab TA=
sac TA and so b = c.

b, c ∈ B. We have that sab TA= sa TA= sac TA
-
and hence sab T
-
A× sac T
A so

sab TB× sac TB. Since b, c are player moves it follows that |sa TB | is odd and it must be that b = c else sab TB/-
b, c lie in different components of A ( B; wlog b ∈ B, c ∈ A. Then we have
sab TA= sa TA and sac TA= sa TA ·c, c is an opponent move in A and so |sa TA |
-	-
is even and hence sab TA× sac TA; this implies that sab TB× sac TB. Now,
sab TB= sa TB ·b and sac TB= sa TB but b is a player move and so |sa TB | is odd
-
which contradicts sab TB× sac TB and hence this case does not happen.
2
Corollary 3.5 grel lifts to a faithful functor gcoh : GAM → Coh.
From Games to Coherence Posets
We now impose a little more game-like structure on Coh and get a new category which we call P coh, more specifically we impose an order relation, intended to mimic prefix ordering on games.

-
Definition 4.1 A coherence poset, (E, ×E, “E), consists of a partially ordered set

E with a least element ⊥∈ 
-
E and a coherence relation ×E on E that satisfies:

-
e × ⊥ for any e ∈ E.
-	-	-
e1 × e2, e1 ≺ e2, e2 × e3 , e2 ≺ e3 imply that e1 × e3, for any e1, e2, e3 ∈ E.
Definition 4.2 We now describe a category, P coh. Its objects are given by coher- ence posets. Given two coherence posets E and F , an arrow E → F is given by a
relation Γ ⊆ E × F such that (⊥, ⊥) ∈ Γ, and, for every (e, f ), (e∗,f ∗) ∈	-	∗

-	∗	-	∗	∗	∗
Γ if e ×E e

then f ×F f , and, if e ×E e and f “F f then e
“E e.

Composition is relational composition and, given a coherence poset E, the identity
idE : E → E is given by the identity relation.
Definition 4.3 Let E and F be coherence posets, define the coherence poset E (

F as (E ×
-
F, ×E(F
, “E(F
) where

-	∗	∗	-	∗	-	∗	- ∗	∗

(e, f ) ×E(F (e ,f ) iff e ×E e implies that f ×F f and if e × e and f “ f
e “ e∗.
then

and (e, f ) “E(F (e∗,f ∗) iff e “ e∗ and f “ f ∗
Observe that maps E → F in the category P coh are given by configurations of
the coherence poset E ( F .
-
Given a game A, we can build a coherence poset (PA, ×, “): PA is the set of
plays of A, with coherence relation as before, and “ is the prefix ordering. The functor gcoh : GAM → Coh lifts to a faithful functor gcoh : GAM → P coh. A game A gets mapped to a coherence poset as described above and a strategy σ gets mapped to a configuration gcoh(σ).
Remark 4.4 We write gcoh for both functors gcoh : GAM → Coh and gcoh : GAM → P coh; this should cause no confusion as it will be clear from the context what the codomain category is.
-
Let (F, ×, “) be a coherence poset; we write t ≺ s if t “ s and t /= s. And we
write t ≺max s whenever t is maximal in F such that t ≺ s.
Definition 4.5 Let E, F be coherence posets and suppose that Γ : E → F is a configuration. We call Γ a conﬁguration with memory if for every (e, f ) ∈ Γ if there

exists some f ∗ ∈
F such that f
-
× f and f
∗ ≺ f then there exists a unique e∗ such

∗	∗ -	∗	∗	∗	∗
that e “ e, e × e and (e ,f ) ∈ Γ. And, if there exists some e ∈ E with e = e
and e∗ ≺ e then there exists a unique f ∗ “ f such that f ∗ = f and (e∗,f ∗) ∈ Γ.
Lemma 4.6 There is a subcategory P cohm of P coh where the objects of P cohm
are those of P coh, and whose maps consist of conﬁgurations with memory.
Now, the functor gcoh : GAM → P cohm is such that we can recover prefix- closure of σ from gcoh(σ). However, it is still not full: there is nothing corresponding to the switching condition, so given (s, t) ∈ Γ : gcoh(A) → gcoh(B) we cannot always interleave them in an alternating fashion to recover a play of A ( B. Further, Γ may contain some odd-length sequences. The condition below addresses both of these problems.

Remark 4.7 We now only deal with objects, X, of P cohm that satisfy for every
s ∈ X, {s∗|s∗ ≺ s} is finite.
Definition 4.8 Let E, F be coherence posets. A configuration Γ : E ( F satisﬁes
switching if for every (e, f ) ∈ Γ, there exists some e∗ ∈ E with e∗ ≺max	- ∗

if and only if there exists some f ∗ ∈ F with f ∗ ≺max
f and f
-
× f .
e and e × e 

Corollary 4.9 We deﬁne a subcategory, P cohm,s, of P coh whose arrows are given by conﬁgurations with memory that satisfy switching.
Lemma 4.10 Suppose Γ : gcoh(A) ( gcoh(B) is a conﬁguration that satisﬁes switching. Let (s, t) ∈ Γ, then |s| is even if and only if |t| is even.
Proof. Follows from switching and the observation that whenever s, t ∈ gcoh(C)

for some C, s ≺max
-
t s × t implies that
|s| is even and |t| is odd, and s ≺max t s = t

implies that |s| is odd and |t| is even.	2
Theorem 4.11 gcoh : GAM → Coh lifts to a fully faithful functor gcohm :
GAM → P cohm,s
Proof. Faithfulness has already been established, we proceed to demonstrating that the functor is full.
Let A, B be games and suppose that Γ : gcoh(A) ( gcoh(B) is a configuration. We will now inductively define interleavings, u, of elements (s, t) ∈ Γ and show that u ∈ PA(B. We denote the collection of all such u as σ.
We map (s, t) ∈ Γ to u ∈ σ as follows: Map (ϵ, ϵ) ∈ Γ to ϵ ∈ σ.
First observe that (s, ϵ) /∈ Γ for any non-empty s ∈ PA. So the cases are: If (ϵ, b1b2) ∈ Γ, map (ϵ, b1b2) ∈ Γ to b1b2 ∈ σ.
If (a1, b1) ∈ Γ , map (a1, b1) ∈ Γ to b1a1 ∈ σ.
Then given (s∗, t∗) ∈ Γ with u ∈ σ already defined (u ∈ PA(B such that u TA= s∗ and u TB= t∗), search for all elements (s, t) ∈ Γ such that (s∗, t∗) ≺max (s, t), map (s, t) ∈ Γ to v ∈ σ as follows:
Observe that if |s∗|, |t∗| are both odd then s extends s∗ by at most two moves,

and t extends and t∗ by at most one move. For if t∗ · bi ≺ t, t∗ ·
-
b1 × t and memory

∗∗	∗∗ -
∗∗  ∗

imply that there exists a unique s
“ s s 
× s and (s ,t · b1) ∈ Γ. But then

(s∗, t∗) ≺ (s∗∗, t∗ · b1) ≺ (s, t) contradicts (s∗, t∗) ≺max (s, t). And if s > s∗ · aiai+1 then, since s∗ · aiai+1 = s it follows that (s∗ · aiai+1, t∗∗) ∈ Γ for a unique t∗∗ which again contradicts maximality.
If (s, t)= (s∗ · aiai+1, t∗) then v = u · aiai+1.
If (s, t)= (s∗ · ai, t∗ · bi) then v = u · aibi if the last move of u is the last move of
s∗ and v = u · biai if the last move of u is the last move of t∗.
If (s, t)= (s∗, t∗ · bi), or (s, t)= (s∗ · aiai+1, t∗ · bi), or (s, t)= (s∗ · ai, t∗) then this contradicts switching and hence these elements cannot exist in Γ.
If |s∗|, |t∗| are both even then similarly to above, s extends s∗ by at most one move and t extends t∗ by at most two moves.

Moreover, observe that (s, t) cannot be of the form (s∗ · ai, t∗ · bibi+1), (s∗, t∗ · b∗ )
or (s, t) /= (s∗ · ai, t∗) because Γ satisfies switching.
If (s, t)= (s∗, t∗ · bibi+1) then v = u · bibi+1.
If (s, t)= (s∗ · ai, t∗ · bi) then v = u · biai if the last move of u equals the last move of t∗, and v = u · aibi if the last move of u equals the last move of s∗.
To see that these sequences give plays in A ( B observe that the first element of a sequence defined as above is always an element of B. That the alternating condition is satisfied follows from switching, the fact that for any (s, t) ∈ Γ s and t are plays and therefore alternating and the way we constructed the sequences.
It can be shown that the collection σ of all such plays forms a strategy: prefix closure follow from the memory condition, and determinacy by an argument similar to Lemma 3.4.	2





Monoidal Structure

We now outline a monoidal structure on P coh. With this structure the functor
gcoh : GAM → P coh is strong monoidal.


Remark 4.12 We index our sequences starting at 1, so that the elements of a sequence s of length n are s1, s2,	, sn. By convention we let s0 denote ⊥.


Definition 4.13 Let E, F be coherence posets.  We define the coherence poset
E ⊗ F as follows; the set E ⊗ F is given by all s ∈ Alt(E\{⊥},F \{⊥}) that satisfy
si−2 ≺X si∀i ∈ {2,.	, |s|}X = E, F
-
si−2 ×X si∀i ∈ {2,... , |s|}X = E, F .
-	-
×E⊗F , “E⊗F are respectively defined as ([17]) s ×E⊗F t if and only if either s1
and t1 lie in different coherence posets, or for every n ≤ min{|s|, |t|} s1...sn = t1...tn
implies that sn+1 -	.
s “E⊗F t if and only if s ± t or s = s1 ... si+1, t = t1 ... ti+n, n ≥ 1 and s1 ... si =
t1 ... ti and si+1 “ ti+1.


The idea behind the definition of the tensor is to mimic what happens in games as the following example demostrates. Consider the game N , with MN := {q}∪ N, on the left is a play in N ⊗ N and on the right the equivalent sequence in gcoh(N ) ⊗ gcoh(N ).

N	⊗	N	gcoh(N ) ⊗ gcoh(N )


q
1	q7
q
2	q7q6
q
7
q
4
q
6
q1q2 q1q2q4

Observe that q1 q2 ≺gcoh(N )
q1 q2 q4, since |q1 q2| is even.
-
q1 q2 q4, since q1 q2 и q1 q2 q4 and q1 q2 ×gcoh(N )

And similarly, q7 ≺gcoh(N ) q7 q6 and q7 ≺gcoh(N ) q7 q6.
So s = (s1)(s2)(s3)(s4)= (q1 q2)(q7)(q1 q2 q4)(q7 q6) ∈ gcoh(N ) ⊗ gcoh(N ).
Lemma 4.14 We can extend ⊗ : P cohm,s × P cohm,s → P cohm,s to a bifunctor
The tensor unit is defined as I := ({⊥}, id, id).
Given configurations Γ : E → F and Δ : G → H, we define Γ ⊗ Δ as
{(s, t) ∈ E ⊗ G → F ⊗ H|∀i ≤ |s|∃j ≤ |t| s. t. if si ∈ E then tj ∈ F and (si, tj) ∈ Γ
if si ∈ G then tj ∈ H and (si, tj) ∈ Δ and
∀i∗ < i∃j∗ ≤ j such that
if si' ∈ E then uj' ∈ F and (si' , uj' ) ∈ Γ
if si' ∈ G then uj' ∈ H and (si' , uj' ) ∈ Δ and
∀j∗ < j∃i∗ ≤ i such that
if uj' ∈ F then si' ∈ E and (si' , uj' ) ∈ Γ if uj' ∈ Hthensi' ∈ G and (si' , uj' ) ∈ Δ
∀j ≤ |u|∃i ≤ |s| s. t.
if tj ∈ F then si ∈ E and (si, tj) ∈ Γ if tj ∈ H then si ∈ G and (si, tj) ∈ Δ and
∀i∗ < i∃j∗ ≤ j such that
if si' ∈ E then uj' ∈ F and (si' , uj' ) ∈ Γ
if si' ∈ G then uj' ∈ H and (si' , uj' ) ∈ Δ and
∀j∗ < j∃i∗ ≤ i such that
if uj' ∈ F then si' ∈ E and (si' , uj' ) ∈ Γ if uj' ∈ H then si' ∈ G and (si' , uj' ) ∈ Δ}

Th following lemma gives an alternative characterization of the tensor operation,

and assists in proving its functoriality.
Lemma 4.15 Let Γ : E → F and Δ : G → H be conﬁgurations. Then, (s, t) ∈ Γ ⊗ Δ if and only if there exists a unique function f : {0,... , |t|} → {0,... , |s|} which is order-preserving and surjective such that (sf (i), ti) ∈ Γ or (sf (i), ti) ∈ Δ for all i ≤ |t|.
Lemma 4.16 ⊗ : P cohm,s × P cohm,s → P cohm,s equips P cohm,s with a monoidal structure
The majority of the work is in showing that coherent associativity isomorphisms exist; we give the definition here. Given coherence posets E, F and G, the iso- morphism γ : (E ⊗ F ) ⊗ G → E ⊗ (F ⊗ G) is given by the composition of two isomorphisms α : (E ⊗ F ) ⊗ G → E ⊗ F ⊗ G and β : E ⊗ F ⊗ G → E ⊗ (F ⊗ G), where E ⊗ F ⊗ G ⊆ ((E + F + G)\⊥)∗ is the evident ternary version of the tensor. Given a sequence, s ∈ (E ⊗ F ) ⊗ G, for example s = (e1f1e2)g1(e1f1e2f2)g2 the isomorphism α eliminates all repetition in E ⊗ F arriving at a sequence s = e1f1e2g1f2g2.	The isomorphism β rebrackets this sequence, repeating el- ements where necessary to obtain a sequence t ∈ E ⊗ (F ⊗ G), in this case
t = e1(f1)e2(f1g1f2g2).
α has a straightforward inductive definition:
α(ϵ)= ϵ
α(s)= s if s = g, g ∈ G or s = s1 ... sn ∈ E ⊗ F .
α(s)= α(s1 ... si) · si+1 if |s| = i + 1, si+1 ∈ G.
α(s) = α(s1 ... si) · si+1\u if |s| = i +1 si+1 ∈ E ⊗ F where u is the largest common prefix of si+1 and si−1 if i > 1 and u = ϵ otherwise, and si+1\u denotes si+1 with the prefix u deleted.
In the definition of β, care must be taken because, given for example e1f1e2f2g1f3g2 we must be careful to produce a sequence e1(f1)e2(f2g1f3g2) and not the sequence e1(f1)e2(f1f2g1f3g2) /∈ E ⊗(F ⊗ G). For this purpose we define the operator where given sequences t, t∗, |t| = i, |t∗| = n

t t∗ = t1 ... ti · t∗ ... t∗ if ti /“ t∗
and

1	n	1
t t∗ = t1 ... ti−1 · t∗ ... t∗ if ti “ t∗ .
1	n	1
We define β : E ⊗ F ⊗ G → E ⊗ (F ⊗ G), as, given t ∈ E ⊗ F ⊗ G, t =
t1 ... titi+1 ... ti+n with ti+1 ... ti+n /∈ E, ti ∈ E, If n = 0, then β(t)= (β(t1 ... ti−1)) · ti, else:
if i =0 then β(t)= (t1 ... tn)
if i =1 then β(t)= t1(t2 ... tn+1)
if i > 1 then β(t) = β(t1 ... ti) · ( last(β(t1 ... ti−1)) ti+1 ... ti+n)) where last(β(t1 ... ti−1)) is the last element of β(t1 ... ti−1).
We will now define a natural isomorphism δ : gcoh(A) ⊗ gcoh(B) → gcoh(A ⊗ B). δ is given by:

δ(ϵ)= ϵ
δ(s)= s if |s| =1 
δ(s · si)= δ(s) · si\si−2.
We illustrate the definition by example.  Let A and B be games and let si, ti, i ∈ N be plays in A and B respectively The isomorphism δ : gcoh(A) ⊗ gcoh(B) → gcoh(A ⊗ B) maps a sequence
gcoh(A) ⊗ gcoh(B)	to a play	A	⊗	B


s1 s1s2 s1s2s3
s1	t1
s1
t1t2	t2
s2
t1t2t3	t3
s3

Straightforward verification that δ is a natural isomorphism satisfying appropri- ate coherence diagrams, together with Theorem 4.11, yields:
Theorem 4.17 gcoh : GAM → P cohm,s is a full and faithful strong monoidal functor.

Future Work
As an extension to the current work we will analyse more of the categorical structure of P coh, including an investigation of the sequoidal structure (in Laird’s terminol- ogy [11]) and the linear exponential comonad it induces on P coh. It would also be interesting to investigate those parts of P coh which lie outside the image of gcoh. Perhaps this category gives us access to “game-like” objects which cannot readily be expressed as games, and which are useful in modelling logics or programming languages. For example, can we have game-like structures that do not always have an assigned initial move, and if so what could we model with such structures.
As indicated earlier, the connection with the “time-forgetting” map of Baillot et al. [5] should be studied more closely, particularly in the light of Melli`es’s work on positionality and innocent strategies [16]. It is worth studying both how inno- cent strategies can be located in P coh, perhaps using the techniques of [8], and how Melli`es’s work can be extended to the full range of history-sensitive strategies. We believe that this will establish a deeper connection between games models and Reddy’s object-spaces model [17], but this remains to be seen.

References
Abramsky, S. and R. Jagadeesan, Games and full completeness for multiplicative linear logic, Foundations of Software Technology and Theoretical Computer Science (1992), pp. 291–301.

Abramsky, S., R. Jagadeesan and P. Malacaria, Full abstraction for PCF, Information and Computation
163 (2000), pp. 409–470.
Abramsky, S. and G. McCusker, Linearity, sharing and state: a fully abstract game semantics for Idealized Algol with active expressions (extended abstract), in: Proceedings of 1996 Workshop on Linear Logic, Electronic Notes in Theoretical Computer Science 3 (1996), pp. 2–14.
Baillot, P., V. Danos, T. Ehrhard and L. Regnier, Timeless games, in: Computer Science Logic: 11th International Workshop Proceedings, volume 1414 of Lecture Notes in Computer Science. EACSL (1998), pp. 56–77.
Baillot, P., V. Danos, T. Ehrhard and L. Regnierl, Believe it or not, ajm’s games model is a model of classical linear logic, in: Twelfth Annual Symposium on Logic in Computer Science (1997), pp. 68–75.
Boudes, P., Thick subtrees, games and experiments, in: Proceedings, TLCA 2009, number 5608 in Lecture Notes in Computer Science (2009), pp. 65–79.
Girard, J.-Y., Y. Lafont and P. Taylor, “Proofs and Types,” Cambridge University Press, 1989.
Harmer, R., M. Hyland and P.-A. Melli`es, Categorical combinatorics for innocent strategies, in:
Proceedings, 22nd IEEE Symposium on Logic in Computer Science (2007), pp. 379–388.
Hyland, M. and C.-H. L. Ong, On full abstraction for PCF: I, II and III, Information and Computation
163 (2000), pp. 285–408.
Hyland, M. and A. Schalk, Abstract games for linear logic extended abstract, Electronic Notes in Theoretical Computer Science 29 (1999), pp. 127–150.
Laird, J., A categorical semantics of higher order store, in: R. Blute and P. Selinger, editors, Proceedings, 9th Conference on Category Theory and Computer Science, CTCS 2002, Electronic Notes in Theoretical Computer Science (2003).
McCusker, G., Games and full abstraction for FPC, Information and Computation 160 (2000), pp. 1– 61.
Melli`es, P.-A., Asynchronous games 3: An innocent model of linear logic, Electron. Notes Theor. Comput. Sci. 122 (2005), pp. 171–192.
Mellies, P.-A., Asynchronous games 4: A fully complete model of propositional linear logic, in: LICS ’05: Proceedings of the 20th Annual IEEE Symposium on Logic in Computer Science (2005), pp. 386–395.
Melli`es, P.-A., Sequential algorithms and strongly stable functions, Theor. Comput. Sci. 343 (2005),
pp. 237–281.
Melli`es, P.-A., Asynchronous games 2: the true concurrency of innocence, Theor. Comput. Sci. 358
(2006), pp. 200–228.
Reddy, U. S., Global state considered unnecessary: Object-based semantics for interference-free imperative programs, Lisp and Symbolic Computation 9 (1996), pp. 7–76.
