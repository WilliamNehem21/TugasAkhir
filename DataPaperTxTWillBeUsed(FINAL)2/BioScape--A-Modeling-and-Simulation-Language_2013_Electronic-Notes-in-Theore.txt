Available online at www.sciencedirect.com


Electronic Notes in Theoretical Computer Science 293 (2013) 35–49
www.elsevier.com/locate/entcs

BioScape: A Modeling and Simulation Language for Bacteria-Materials Interactions
Adriana Compagnonia Vishakha Sharmaa Yifei Baoa Matthew Liberaa Svetlana Sukhishvilia Philippe Bidingerb Livio Bioglioc Eduardo Bonellid
a Stevens Institute of Technology
b VERIMAG
c Universit`a di Torino
d Universidad Nacional de Quilmes

Abstract
We design BioScape, a concurrent language for the stochastic simulation of biological and bio-materials processes in a reactive environment in 3D space. BioScape is based on the Stochastic Pi-Calculus, and it is motivated by the need for individual-based, continuous motion, and continuous space simulation in modeling complex bacteria-materials interactions. Our driving example is a bio-triggered drug delivery system for infection-resistant medical implants. Our models in BioScape will help in identifying biological targets and materials strategies to treat biomaterials associated bacterial infections.
The novel aspects of BioScape include syntactic primitives to declare the scope in space where species can move, diffusion rate, shape, and reaction distance, and an operational semantics that deals with the specifics of 3D locations, verifying reaction distance, and featuring random movement. We define a translation from BioScape to 3π and prove its soundness with respect to the operational semantics.
Keywords: Stochastic simulation, stochastic Pi-calculus, bacteria-materials interaction

Introduction
In contrast to the now deep and multidimensional understanding of how tissue cells interact with the surface of biomaterials, comparatively little is known about the influence of surface properties on interactions with bacteria. These interactions are clearly very important, however. Biomaterials-associated infection (BAI) is a major clinical problem [1,13,35]. Current strategies to mitigate BAI concentrate on engineering antimicrobial [16,18,20,22] or antifouling [9,14,19,33] coatings for specific biomedical devices.
While valuable clinically in the short-term, this approach ignores the fact that many devices, particularly those involving regenerative strategies, require surfaces that must controllably interact with both tissue cells and bacteria. Often, surfaces

1571-0661 © 2013 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2013.02.017

optimized to promote tissue-cell interactions also support undesirable bacterial col- onization (Fig. 1).
Concurrent Modeling of Bio- material Interactions
As an alternative to models built around sets of ordinary differential equations (ODEs), process algebras are formal languages where multiple objects with different behavioral at- tributes can interact with each other and dynamically influence overall sys- tem development. Process algebras are being used to model biological systems [30,6,2], where they are particularly at-

tractive, because of their ability to ac- commodate new objects and new be- havioral attributes as the complex bi- ological system becomes better under- stood.
Currently, however, modeling lan- guages based on concurrent synchro- nization either lack spatial attributes (SPiM [27], Kappa [12], Petri Nets [26]) or stochasticity (SpacePi [15], Shape Calculus [3]), or they offer only a lim- ited notion of space (BioAmbients [23], BioPepa [10]). As findings from biolog- ical experiments reveal, inter and intra- cellular dynamics and signaling path- ways depend on the location and move- ment of particles [17]. Recently, new spatial modeling languages allowing ex- plicit description of temporal spatial dynamics of biochemical processes have been proposed (SpacePi [15], DCA [36], LΠ [34], Stochsim [24]). Other agent- based platforms [21] include C-Immsim
Fig. 1Grit-blasted Ti6Al4V used in orthopedic im-
plants promotes osteoblast adhesion/spreading (fluo- rescence image) but also enhances staphylococcal col- onization (SEM inset). After Wu, Libera et al. [37]


Fig. 2 Concurrency models flexibly account for mul- tiple object types and copies. Each type has char- acteristic attributes. Expression of one attribute dy- namically influences other objects and what attribute each might next express.

[32,8] and PathSim visualizer [28]. However, few of them support individual based,
continuous motion, and continuous space stochastic simulation [4], which are im- portant features for modeling temporal spatial dynamics of biochemical processes accurately. To address this problem we design BioScape, a new language incorpo- rating both stochasticity and 3D spatial attributes.
Fig. 2 illustrates the elements of a simple instance of the model. It includes four objects: planktonic bacteria; adsorbed bacteria; gel-bound antibacterial agent

(AmA); and released AmA. Each has attributes, many of which are inter-related. Both bacteria, for example, can metabolize, albeit at different rates. Metabolism is particularly significant for bound AmA, since acidic products will lower the local pH, reduce the strength of electrostatic AmA-gel binding, and enable the pH-release of bound AmAs. Released AmA can then diffuse and/or flow, and potentially kill bound or planktonic bacteria, again with different efficiencies, because of the en- hanced microbial resistance of biofilm bacteria. The complexity of such a model can rapidly explode as more attributes are assigned to each object. Note that spatial coordinates and stochasticity are critical to understanding the interactions between different objects and with the substrate, because they all rely on proximity. So far, existing process-algebra modeling languages do not support this. Furthermore, while there are now a number of models being developed to explain the biofilm for- mation [31,38], none takes into account the controllable properties of the substrate and how this can influence bacterial adhesion, proliferation, and phenotypic change.



1.4

1.2

1.0

0.8

0.6

0.4

0.2

0.0


















0	5	10	15	20	25
Time, hours
8.0

7.5

7.0

6.5

6.0

5.5

5.0

4.5

4.0












pH change





Fig. 3 pH variation during S. epidermidis growth
Fig. 4 Bio-triggered release of antibacterial agents from pH-responsive layer-by-layer hydrogel thin film.

A number of experimentally measurable quantities can be used to calibrate ele- ments of the model. Among these are the bacterial proliferation rates, the biofilm morphology, the AmA minimum inhibitory (MIC) and bactericidal (MBC) concen- trations, gel capacities for AmA binding and pH-dependent properties, and com- ponent diffusivities, among others. For example, measurements by Sukhishvili’s group of the pH-dependent release of L5 antimicrobial peptide and its effect on S. epidermidis [25] have been used by Compagnoni and her group to develop a pro- totype implementation in BioScape (Fig. 3). This data corresponds to the schema described in Fig. 4. This model includes computational processes for planktonic bacterial motion, adhesion, and proliferation on an L5-loaded hydrogel surface as well as for the local metabolic pH decrease, triggered AmA release, and killing of bacteria (Figs. 5 C/D). Experimental images (Figs. 5 A/B) are in good agreement with our computational results.

Language Design
The 3D aspect of BioScape is inspired by 3π [7] and SpacePi [15]. In BioScape every process has an implicit affine map and a shape (Fig. 7). The shape is defined by a set of point coordinates that is local to a process’ system of coordinates. While the syntax of BioScape describes processes within its implicit local frame, its seman- tics places processes in a global 3D space (Fig. 8), by assign- ing an affine map to each pro- cess – a located process. The application of an affine map to the shape returns the shape lo- cated in the global frame. The

















Fig. 5 Optical micrographs of NJ 9709 S. epidermidis cul- tured on (A) as-synthesized and (B) L5-loaded (PMAA)10 gels. BioScape simulations with 40 bacteria and (C) an as-synthesized gel film and (D) an L5-loaded gel film. Live bacteria are green, dead bacteria are red, and L5 molecules are small blue dots.

affine map is what characterizes the position of the process. Movement is then mod-
eled by updating a process’ affine map. On the contrary, 3π is a low level language that gives absolute control of spatial attributes to the programmer. For example, the programmer can guard an interaction by checking whether two processes are close enough, and it can also assign affine maps to processes. For example, collision checks in 3π would have to be implemented by the programmer checking corre- sponding distances with every other entity in the system, and taking into account the shape of every process. In contrast, in BioScape, the programmer specifies species declaring a reaction radius, as in SpacePi, and the operational semantics enforces the proximity requirement. Therefore, affine maps are not available to the programmer in BioScape, unlike 3π. While 3π is a general calculus for processes in space, BioScape has been designed to program biological and biomaterial processes and their interactions.

New Features of BioScape
We introduce three new parameters for each process: movement space, movement step, and shape to be specified by the programmer when defining a process. We take the definition of bacteria as an example. The movement space restricts the space within which bacteria can move. In Fig. 5, bacteria can never penetrate the gel film. Thus we define the volume above the film as the movement space for bacteria. We assume that the scheduler will randomly place the initial con- centration of bacteria in that space. The movement step indicates the distance that bacteria can move in a time interval. The shape of bacteria represents the volume that each bacterium occupies in space. The shape is instrumental in avoiding collisions and overlaps.

Besides standard reaction operations send, receive and delay, BioScape has a geometric operation move, that can be generalized to any affine transformation. The difference is that while reaction operations have stochastic reaction rates, the operation move is always enabled. In order to avoid an unfair competition between reactions and geometric operations, we split the semantics into two reduction relations, and we consider a heterogeneous choice operator with probabilistic and non-deterministic branches. Intuitively, it is like having two choice operators.
The design decisions of having the scheduler assign initial affine maps to each process and of having the operational semantics enforcing proximity requirements significantly simplifies the models’ code.
BioScape is a collaboration tool that has helped us develop a long term multidis- ciplinary research program to study how surface properties affect interactions with bacteria.
Syntax
BioScape is based on the stochastic π-calculus [29] with primitives for processes in 3D space. We assume a set of names N ranged over by x, y,.. ., and a global three-di-
mensional   Euclidean   space.	The   syntax   of   BioScape
is defined in Fig. 6.  (νx@r,rad).P defines

channel name x with two parameters r and rad∈ R≥0 in process P ; r is the stochastic rate for communications through channel x and rad is the communication radius. The radius is the maximum distance between pro- cesses in order to communicate through chan-
P, Q ::= (νx@r,rad).P  | P | Q | X(x)
M ::= 0 | π.P + M
π ::= delay@r  | !x(x) | ?x(y) | mov
D ::= ∅  |  D, X(x)@ξ, ω, σ = M
E ::= ∅ | E, x@r, rad

Fig. 6 BioScape Syntax

nel x, and the reaction rate determines whether two processes that are close enough to react actually do. P | Q is parallel composition of processes. M is the hetero- geneous choice, where + is associative and commutative. M may have reaction branches and movement branches. The reaction branches are probabilistic, while the movement branches are non-deterministic, since reactions are subject to reac- tion rates, while movement is always enabled. 0 is the empty process. The prefix π denotes the action that the process π.P can perform. delay@r is a spontaneous and unilateral reaction of a single process, and r is the stochastic rate. !x is the output prefix and ?x is the input prefix. We add a new geometry prefix mov to translate a process. We use standard syntactic abbreviations such as π.P for π.P + 0 and π for π.0. X(x) is a definition call.
D is a global list of definitions. X(x)@ξ, ω, σ = M defines process X with argu- ment x, movement space ξ, step ω and shape σ. The movement space ξ is a set of point coordinates in the global coordinate system defining a volume. Intuitively, X can move within ξ. The step ω ∈ R≥0, is the distance X can move in a single step, and it corresponds to the diffusion rate of X; the shape of X is σ, an arbitrary vol- ume in space defined as a set of coordinates in the local coordinate system (Fig. 7). The movement space for the empty process 0 is everywhere, the global space, and



k	k
Fig. 7. Shapes (σ) in their local coordinate system (i,j,k) with origin o.
Fig. 8. Shapes in the global coordinate system (x,y,z) – (μ(σ)).




NR.Par
NR.Move
μ′ = translate(ω, μ, r) μ′(σ) ⊆ ξ  X(x)@ξ, ω, σ = mov.P + M ∈ D


E ▶ {X(y)}μ → {P [y/x]}μ'
SR.Delay

E ▶ A → B	trans(B) ∩ trans(C)= ∅


E ▶ A | C → B | C
SR.Com
X(x)@ξ, ω, σ = delay@r.P + M ∈ D


E ▶ {X(y)}μ →r {P [y/x]}μ

X(x)@ξ, ω, σ =!z(u).P + M ∈ D  Y (y)@ξ, ω, σ =?z(v).Q + N ∈ D  dis(μ, μ′) ≤ rad
E, z@r, rad ▶ {X(x′)}μ | {Y (y′)}μ' →r	{P [x′/x]}μ | {Q[y′/y][u/v]}μ'
Fig. 9. Stochastic (SR) and Non-Stochastic (NR) Reduction Relations (Sample rules)
its movement step is 0 by default. X can be defined by at most one equation in D. E is an environment of channel name declarations. x@r, rad declares channel name x with reaction rate r and reaction radius rad. A channel name x appears at
most once in E.
Consider the following simple example of a bacterium Bac, that can either move or divide into two daughter cells. A more complex example can be found in Section
5. Bac is defined with movement space movB, movement step stepB, and shape shapeB. Intuitively, bacteria can move within movB, with random steps of length stepB, and the shape shapeB is at all times contained within movB. The prefix mov represents a random movement of length stepB. delay@1.0.(Bac() | Bac()) represents mitosis, the division of a bacterium into two daughter cells: Bac() | Bac(), and the delay@1.0 prefix is used to model the fact that division is not an instantaneous reaction.
Bac()@movB, stepB, shapeB =  mov.Bac() + delay@1.0.(Bac() | Bac())


Operational Semantics
The operational semantics of BioScape is based on two reduction relations: a non- deterministic relation, E ▶D A → B, for geometric transformations, in our case move, and a stochastic relation, E ▶D A →r B, for reactions such as synchronization and delay. We often omit D to simplify the notation.
We use μ to represent an affine map; μ(s)= M × s + V , where M is a matrix

and V is a vector [7] (see Fig. 7). μ(σ) computes the location and orientation of a process in the global coordinate system. When a process is initialized, it is assigned a random μ within its movement space ξ in the global frame (μ(σ) ⊆ ξ).
We define conﬁgurations A, B, . . . as parallel compositions of located processes. A located process {P}μ,σ is a process P annotated with affine map μ and shape σ. A, B, ... ::= {P}μ,σ | A | B |  (νx@r,rad).A. For clarity, we often omit the shape σ.
Evaluation contexts are given as follows. We write C[A] for the context C in which the hole · has been substituted with A: C ::= ·  |  (νx@r,rad).C | A | C | C | A
We define trans, a function on configurations that returns the shapes of its processes located in the global frame (Fig. 8), such that trans({P}μ,σ) = μ(σ), trans((νx@r,rad).A)= trans(A) and trans(A | B)= trans(A) ∪ trans(B). We write dis(μ, μj) for the distance between the origin of μ and the origin of μj in the global frame (Fig. 8). We denote translate(ω,μ,r) the function that generates a new local affine map μj, using the movement step ω, the old map μ, and a random number r.

As usual, fn is a function that returns the set of free names of a process or a configu- ration, bn is a function
(S.Loc)	P ≡ Q implies {P}μ ≡ {Q}μ
(S.Loc.N u)	(νx@r,rad).{P}μ ≡ {(νx@r,rad).P}μ
(S.Loc.P ar)	μ1(shape(P )) d μ2(shape(Q)) = μ(shape(P | Q))
{P | Q}μ ≡ {P}μ1 | {Q}μ2
Fig. 10 Structural Equivalence (Sample Rules)

that returns the set of bound names of a process or a configuration, and =α equates two processes or configurations that differ only in their bound names.
We define the shape of processes inductively as follows:
shape(0)= ∅	shape(X(a)) = σ if X(x)@ξ, ω, σ = M ∈ D shape((νx@r,rad).P )= shape(P )	shape(P | Q)= shape(P ) d shape(Q)
where d gives a shape obtained by composing two shapes through juxtaposition.
For different applications we can choose suitable functions to realise d, we only require d to be a commutative and associative operator, i.e. σ1 d σ2 = σ2 d σ1 and (σ1 d σ2) d σ3 = σ1 d (σ2 d σ3). μ(shape(P )) computes the space occupied by a process P in the global coordinate system.
The structural equivalence, ≡, is the smallest equivalence relation that contains the rules in Fig. 10, and such that parallel composition is commutative, associative,

and has neutral element {0}μ for any μ. Rule
S.Loc
uses the standard struc-

tural equivalence on processes, Rule S.Loc.Nu allows a channel definition to move through located processes, and Rule S.Loc.Par permits to move from configura- tions to a single located process (and viceversa) through the creation of a new affine map derived from the old ones and the shape of the processes.
Sample rules for both the non-stochastic (E ▶ A → B) and stochastic (E ▶ A →r B) reduction relation of BioScape are given in Fig. 9. The condition μj(σ) ⊆ ξ of NR.Move ensures the new located process {P [y/x]}μ′ is within its movement space ξ. NR.Move can be easily generalized to any affine map application. The NR.Par condition trans(B) ∩ trans(C)= ∅ means that reduction does not cause collisions

or overlaps. Regarding the stochastic reduction relation, r in E ▶ A →r B is the rate for synchronization or delay. The condition dis(μ, μj) ≤ rad in SR.Com ensures that located processes {X(xj)}μ and {Y (yj)}μ′ are close enough to communicate through channel x. The remaining rules are standard.

Simulation
The simulation algorithm has two phases: reaction and movement. The reaction phase is based on Gillespie’s algorithm as implemented in SPiM, and instead of keeping only concentrations for each agent species, it also keeps 3D information – (x,y,z) – for each instance. Gillespie’s algorithm produces two outputs in each iter- ation: a reaction to be executed next, and a time interval to update the simulation time. If the selected reaction is an interaction between two agents (send/receive) then the algorithm uses 3D location information to identify two individual agents close enough to interact, and proceeds as described in the operational semantics (SR-Com). If there are no two such agents it proceeds to the movement phase. If the selected reaction is a first order reaction (delay), the algorithm propagates 3D information as described in the operational semantics (SR-Delay). The move- ment phase uses the time interval generated by Gillespie’s algorithm and moves each agent in a random direction a distance proportional to the diffusion rate (ω) in that period of time. The movement phase takes into account collision detection as described in the operational semantics (NR-Par).
Overcrowding is beyond the scope of this paper. However there could be several approaches to address it. Cells have external regulators that allow them to react to molecules on the outside of neighboring cells, and those external regulators emit a signal to inhibit mitosis in overcrowded conditions. Therefore, if it were relevant to the system being modeled, the most natural way to address overcrowding would be to program it into the model. Alternatively, the modeling language could address overcrowding in different ways. For instance, if enough movement steps fail within a given movement area in one iteration, reactions exacerbating overcrowding could be disabled. This choice would have the effect of modeling dormancy in cells such as bacteria in Maturation I or Maturation II stage of biofilm formation.

Example
In this section, we present the BioScape model for the bio-triggered drug delivery system from Figs. 4 and 5. We first define the communication channels release, kill and bind with reaction rate and reaction radius.
Channel release is for the communication between hydronium ions and em- bedded drug molecules, channel kill is for the communication between released drug molecules and bacteria, and channel bind is for the communication between bacteria in solution and binding sites on the hydrogel film substrate. BacF() rep- resents a free bacterium in solution. Free bacteria can move, bind to the hydrogel film, grow, acidify the environment by producing hydronium ions, and get killed by

drug molecules. BacB() represents a bacterium bound to the hydrogel film. Bound bacteria cannot move, but they can grow, acidify the environment by producing hydronium ions, and get killed by drug molecules. BindSite() represents a binding site on the hydrogel film. DeadBac() represents a dead bacterium. Dead bacteria can move and degrade. MolB() represents a drug molecule embedded in the hydrogel film. Drug molecules can be released as hydrogel ions are produced. MolF() repre- sents released drug molecules. They can move and kill bacteria. HIon() represents a hydronium ion, which determines the pH value of the environment. Hydrogen ions can move and release embedded drug molecules. resX, stepX and shapeX represent ξ, ω and σ for species X. The following is the BioScape code.
release@0.004, 2.0
kill@0.001, 0.5	HIon()@resIon, stepIon, shapeIon bind@3.0, 0.2		= mov.HIon() + !release.HIon()

BacF()@resBF, stepBF, shapeBF =	BindSite()@resBS, stepBS, shapeBS mov.BacF() +		= ?bind.BindSite()
!bind.BacB() +
delay@0.2.(BacF() | BacF()) +	DeadBac()@stepDB, stepDB, shapeDB delay@0.005.(BacF() | HIon()) +		= delay@0.1
?kill.DeadBac()
MolB()@resMB, stepMB, shapeMB
BacB()@resBB, stepBB, shapeBB =	= ?release.MolF() delay@0.1.(BacB() | BacF()) +
delay@0.005.(BacB() | HIon()) +	MolF()@resMF, stepMF, shapeMF
?kill.DeadBac()	= mov.MolF() + !kill
To simulate this model, the programmer decides on an initial concentration of free bacteria (BacF()) and bound molecules of AmA (MolB()). The simulation results of Fig. 5 C, show the controlled experiment of assuming only an initial concentration of free bacteria and no antibacterial agent. The results in Fig. 5 D, in contrast, show the effect of AmA molecules on the size and number of bacteria clusters. Figs. 5 A and B show the experimental images consistent with our results. We now consider an example illustrating the interleaving of stochastic and non- stochastic rules starting from one free bacterium, one hydronium ion and one bound molecule of AmA: {BacF()}μ1 | {HIon()}μ2 | {MolB()}μ3 , to showcase the inter- leaving of movement steps with reaction steps (communication or delay). To make
our example easier to follow, we unfold all three definitions as follows:
{mov.BacF() + !bind.BacB() + delay@1.5.(BacF() | BacF())
+delay@0.5.(BacF() | HIon()) + ?kill.DeadBac()}μ1
| {mov.HIon() + !release.HIon()}μ2
| {?release.MolF()}μ3
The process has movement steps and reactions available. We first reduce all move
steps. We start with mov.BacF(). Assume an affine map μj such that: 1) μj =
translate(stepBF, μ1, r), for some random number r; 2) the translated shape of the free bacterium shapeBF is within the movement space for free bacteria resBF:
μj (shapeBF) ⊆ resBF, and 3) the new shape of the free bacterium does not over- lap with the other shapes in space: trans({BacF()}μ′ ) ∩ trans({HIon()}μ2 |

{MolB()}
μ3
1
) = ∅. If there is no such μj , the configuration remains unchanged,

and the next movement step can be reduced.
Using the non-stochastic reduction rules, NR.Move and NR.Par, we have:

{mov.BacF() + !bind.BacB() + delay@1.5.(BacF()|BacF()) + delay@0.5.(BacF()|HIon())
+ ?kill.DeadBac()}μ1 | {mov.HIon() + !release.HIon()}μ2 | {?release.MolF()}μ3
→ {BacF()}μ'  | {mov.HIon() + !release.HIon()}μ2 | {?release.MolF()}μ3
We next reduce mov.HIon() using NR.Move and NR.Par:
{BacF()}μ' | {mov.HIon() + !release.HIon()}μ2 | {?release.MolF()}μ3
→ {BacF()}μ' | {HIon()}μ' | {?release.MolF()}μ3
1	2

Unfolding {BacF()} ′
1
and {HIon()} ′
2
for the sake of clarity:

{mov.BacF() + !bind.BacB() + delay@1.5.(BacF()|BacF()) + delay@0.5.(BacF()|HIon())
+?kill.DeadBac()}μ' | {mov.HIon() + !release.HIon()}μ' | {?release.MolF()}μ3
1	2
There are three available reactions, one communication on channel release and two delays. The next reaction will be determined using the corresponding reaction rates. Assume that the next reaction is the communication between HIon() and MolB() through channel release. Using the stochastic rules SR.Com and SR.Par, if the distance between the processes is within release’s reaction radius (dis(μj , μ3) ≤ 2.0) then the last process reduces to:
{mov.BacF() + !bind.BacB() + delay@1.5.(BacF()|BacF()) + delay@0.5.(BacF()|HIon())
+?kill.DeadBac()}μ' | {HIon()}μ' | {MolF()}μ3
1	2
Otherwise, the configuration remains unchanged. The next reduction is a movement step, where we reduce all available mov prefixes. This includes reducing mov.BacF(), mov.HIon(), and mov.MolF(), and subsequently interleaving stochastic (reaction) and non-stochastic (movement) reductions.

Translation from BioScape to 3π
We define a translation from BioScape into a variant of Cardelli-Gardner’s 3π with definitions instead of replication, and prove that it is sound with respect to the oper- ational semantics (Thm. 6.1). Since 3π does not include stochasticity, we translate only the spatial aspect of BioScape into 3π.
In an attempt to make this paper

self contained, we include in this sec- tion material from Processes in Space [7]. “3π is a proper extension of π- calculus with by-value communication of geometric data Δ, data comparisons Δ =σ Δ.P , and frame shifting μ[P ].
Δ ::= xc | ... | μ[Δ]
π ::= ?σx(x′) | !σx(Δ) | Δ =σ Δ
P ::= 0 | π.P | P + P′ | P|P′ | (νx)P | μ[P ]
D ::= ∅ | D, X(x)= P


(Red Comm) ΔA '→ є implies !σx(Δ).P + P′ |
?σx(y).Q + Q′A → P|Q{y/є}

The syntax of 3π is shown in Table 1.
(Red Cmp) ΔA
Δ′ implies Δ =σ Δ′.PA → P

Each data term and value has a sort σ ∈ {c, a, p, v, m}, denoting channels, scalars, points, vectors, and maps re- spectively. A geometric data can be a value or a variable, or a function on val-
(Red Par) PA → Q implies P | RA → Q | R
(Red Res) PA → Q implies (νx)PA → (νx)Q (Red ≡)	P′ ≡ P, PA → Q, Q ≡ Q′
imply P′A → Q′
Table 1 3π syntax and reduction

ues and variables, or a frame shift. An action term π can be an input ?σx(xj), an output !σx(Δ), or a data comparison Δ =σ Δ. The input and output actions are

analogous to π-calculus actions, while the data comparison evaluates to P if Δ and Δj evaluate to the same value. Actions are restricted by sorting constraints: chan- nels must have sort c; xj in input must have sort σ; Δ in output must have sort σ; Δ and Δj in data comparison must have sort σ.
Process terms are the standard π-calculus terms, plus the frame shift process μ[P ]: it means running the process P in the global frame A shifted by the affine map obtained by evaluating the map μ.
The reduction relation A '→, which relates two processes relative to the global frame
A, appears in Table 1.
Reduction rules are the rule of a by-value π-calculus with data terms Δ, but Red Comm and Red Cmp rules depend on an evaluation relation A '→, that evaluates a data Δ to value ϵ in a global frame A. Data comparison requires the data evaluation
ΔA Δj, meaning there is a data value ϵ such that ΔA '→ ϵ and ΔjA '→ ϵ.”
We define three functions  −SPA,  −PRO and  −DEF to translate spatial con-

figurations, processes and definitions, respectively. In A SPA
, A is a spatial

configuration, X is a triple containing the movement space, shape and step of the current definition, E is a set of channel declarations, D is a set of definitions, and r is a real number. We will abuse the notation and consider E and D sets or lists.
Similarly for P PRO	and D DEF	′  .
X;E;D;r	X;E;D ;r
[Process Translation]


(νx@r,rad).P PRO

PRO
X;<x@r,rad>,E;D;r

P.Res

PRO
X;E;D;r
PRO
X;E;D;r
PRO
X;E;D;r
P.Par

PRO
X;E;<X(x)@ξ,σ,ω=M>,D;r
PRO
X;E;D;r
=X(y)	P.Def
=0	P.Nil

PRO
X;E;D;r
PRO
X;E;D;r
PRO
X;E;D;r
P.Cho

delay@r.P PRO PRO
X;<x@r,rad>,E;D;r
=(νm)(!cm() |?cm().  P PRO
=?ccx(ok).?cok(pos).?ppos(p).
)  m /∈ fn(P )	P.Del






PRO
X;<x@r,rad>,E;D;r
abs(p − H) ≤ rad =a 1.!cok(y).  P PRO
cx, ok, pos,p ∈/ fn(P )	P.Out
=(νok, pos)(!ccx(ok).!cok(pos).



PRO
<ξ,σ,ω>;E;D;r
!ppos(H).?cok(z).  Q  PRO
=into(T(↑ (r, ω))[H], σ, ξ) =a 1.
) cx ∈/ fn(Q)	P.In

PRO
<ξ,σ,ω>;E;D;r
]	P.Mov




[Spatial Configuration Translation]


SPA
X;E;D;r

PRO
X;E;D;r
]	S.Loc

SPA
X;E;D;r
(νx@r,rad).A SPA
SPA
X;E;D;r
= A SPA
SPA
X;E;D;r
S.Par
S.Res

X;E;D;r	X;<x@r,rad>,E;D;r



[Definition Translation]

X(x)@ξ, σ, ω = M, D′ DEF



DEF
X;E;D;r


= ∅ D.Nil
=

X;E;<X(x)@ξ,σ,ω=M>,D;r
PRO
<ξ,σ,ω>;E;<X(x)@ξ,σ,ω=M>,D;r

′ DEF
X;E;D;r

D.Def

The translation of a BioScape choice process is the set of translations of its branches, because 3π does not allow reduction under its choice operator. Otherwise the reductions obtained from translating the branches would be blocked. Conse- quently, we extend naturally 3π’s reduction and congruence to sets (see Table 2), and we also define homomorphic extensions of parallel composition, frame shift, prefix and restriction over sets. The trickiest rules are the ones for translating communication, P.In for input and P.Out for output. First, the input sends to the output two private channels, ok and pos, and subsequently its position (H) via channel pos. The output calculates the distance between itself and the position sent by the input with the function abs(p − H), i.e. the absolute value of the difference between the positions of the processes. If this distance is less than the reaction radius (rad), then the output sends a communication on the channel of success and performs the process P : when the input receives a communication on the ok channel, it performs process Q.
For the translation of movement in Rule P.Mov, we assume a function into(p, sh, sp) that checks whether a shape s, centered at point p, is contained within space sp. T(v) is a translation map with vector v, and ↑ (r, ω) is a vector of length ω and direction r. The translation checks whether into(T(↑ (r, ω))[H], σ, ξ) corresponding to condition μj(σ) ⊆ ξ in NR.Move. Finally, since delay is not a prefix in 3π, it is translated as a communication over a channel.
Theorem 6.1 (Soundness) If E ▶D A → B or E ▶D A →r B then there exists

S such that A SPA
A →∗
S and S ≡ B SPA
for some number r.



In our translation, the global frame A is the identity. Although sound, this translation is not complete in the sense that not all reductions in the trans- lated code arise from corresponding re- ductions in the source code. Achiev- ing completeness is more complex and would require collision detection and a more refined mechanism for checking proximity.
Conclusions
Let S and T be sets
S | T = {(P | Q) | P ∈ S,Q ∈ T}
μ[{∅}]= ∅ and
μ[{P}∪ S]= {μ[P ]}∪ μ[S]
π.S = {π.P | P ∈ S}
(νm).S = {(νm).P | P ∈ S}

(Set.Par)	SA → S’ implies S | TA → S’ | T (Set.Red) PA → P′ imp. {P}∪ QA → {P′}∪ Q (S.Set.Par) S ≡ S’ imp. S | T ≡ S’ | T (S.Set.Red) P ≡ P′ imp. {P}∪ Q ≡ {P′}∪ Q
Table 2 Operations, Reduction and Congruence on Sets

We define BioScape for the modeling and simulation of complex bacteria-materials interactions. BioScape builds on 3π [7] and SpacePi [15] merging an affine space geometry, reaction radius 1 and reaction boundary. This combination of features is strictly motivated by the nature of the models we are capturing, as described in the introduction: stochasticity, movement, individual process location (in con- trast with homogeneously mixed reactants in a volume), interaction in proximity, and movement confinement. We formulate a reduction semantics for BioScape and

1 Although this concept may be derived in 3π, it is convenient in practice to have as primitive.

demonstrate it in an example of pH-triggered drug release in the presence of bacte- rial infection. Furthermore, we validate BioScape with a translation into Cardelli- Gardner’s 3π, and prove its soundness with respect to the operational semantics. Complete technical details can be found in the companion technical report [11].
The process calculus that most closely resembles BioScape is the Shape Calculus [3], a CCS-like timed calculus, with simulating tool BioShape [5]. These are some of the differences. BioScape is stochastic, but the Shape Calculus is not. The Shape Calculus does not allow dynamic creation of channels, but BioScape does. Agents in BioScape can be modified by affine transformations useful in modeling phenomena such as cell growth, but the Shape Calculus only allows movement specified with a velocity vector. The Shape Calculus has a time primitive for describing a delay, while BioScape has a stochastic delay. The specification of an agent in BioScape de- scribes an area where it is allowed to be, but the Shape Calculus does not. This area is instrumental in describing biomaterials such as antibacterial surfaces and prevent- ing bacteria from penetrating the surface while allowing antibacterial molecules to do so. On the other hand, such behavior would have to be programmed in the description of the agent in the Shape Calculus.
We develop an implementation of BioScape based on SPiM, and show prelim- inary simulation results in agreement with wet-lab experiments. We are currently working on a parallel simulation algorithm implemented in CUDA, and our proto- type implementation can handle one million agents in 3D space.
Our long-term modeling objective is to identify combinations of substrate vari- ables that most significantly inhibit bacterial colonization and promote tissue inte- gration.
Acknowledgement
We are grateful to: Mariangiola Dezani and Paola Giannini for comments on an earlier draft and for enlightening discussions; Andrew Phillips for making available the implementation of SPiM on which the implementation of BioScape is based; Svetlana V. Pavlukhina for providing the experimental data in Fig. 3; Justin Sousa for implementing the 3D rendering of Fig. 5 C and D, and the anonymous ref- erees for their suggestions. This research project has been supported in part by the National Science Foundation through grant #CBET-0708379 and the Stevens’ Research Enterprise fund.

References
C. R. Arciola. New concepts and new weapons in implant infections. International Journal of Artificial Organs, 32(9):533–536, 2009.
Y. Bao, A. B. Compagnoni, J. Glavy, and T. White. Computational modeling for the activation cycle of G-proteins by G-protein-coupled receptors. In Proceedings Fourth Workshop on Membrane Computing and Biologically Inspired Process Calculi 2010. (MeCBIC), number 40 in Electronic Proceedings in Theoretical Computer Science, pages 39–53, 2010.
E. Bartocci, F. Corradini, M. R. D. Berardini, E. Merelli, and L. Tesei. Shape calculus. a spatial mobile calculus for 3d shapes. Sci. Ann. Comp. Sci., 20:1–31, 2010.


A. T. Bittig and A. M. Uhrmacher. Spatial modeling in cell biology at multiple levels. In Winter Simulation Conference, pages 608–619, 2010.
F. Buti, D. Cacciagrano, F. Corradini, E. Merelli, and L. Tesei. Bioshape: a spatial shape-based scale- independent simulation environment for biological systems. Procedia Computer Science, 1(1):827 – 835, 2010.
L. Cardelli, E. Caron, P. Gardner, O. Kahramanogullari, and A. Phillips. A process model of rho gtp-binding proteins. Theor. Comput. Sci., 410(33-34):3166–3185, 2009.
L. Cardelli and P. Gardner. Processes in space. In CiE, pages 78–87, 2010.
F. Castiglione and M. Bernaschi. C-immsim: playing with the immune response. In Proceedings of the Sixteenth International Symposium on Mathematical Theory of Networks and Systems (MTNS2004), 2004.
R. G. Chapman, E. Ostuni, M. Liang, G. Meluleni, E. Kim, L. Yan, G. Pier, H. Warren, and G.M. Whitesides, polymeric thin films that resist the adsorption of proteins and the adhesion of bacteria. Langmuir, 17(4):1225–1233, 2001.
F. Ciocchetta and J. Hillston. Bio-pepa: A framework for the modelling and analysis of biological systems. Theoretical Computer Science, 410(33-34):3065–3084, 2009.
A. Compagnoni, V. Sharma, Y. Bao, P. Bidinger, L. Bioglio, E. Bonelli, M. Libera, and S. Sukhishvili. Bioscape: A modeling and simulation language for bacteria-materials interactions. Technical Report CS-1-2012, Stevens Institute of Technology, NJ, 2012.
V. Danos, J. Feret, W. Fontana, R. Harmer, and J. Krivine. Rule-based modelling of cellular signalling. In L. Caires and V. T. Vasconcelos, editors, CONCUR, volume 4703 of Lecture Notes in Computer Science, pages 17–41. Springer, 2007.
R. O. Darouiche. Treatment of infections associated with surgical implants. New England Journal of Medicine, 350(14):1422–1429, 2004.
N. P. Desai, S. Hossainy, and J. Hubbell. Surface-immobilized polyethylene oxide for bacterial repellence. Biomaterials, 13(7):417–420, 1992.
M. John, R. Ewald, and A. M. Uhrmacher. A spatial extension to the pi calculus. Electron. Notes Theor. Comput. Sci., 194:133–148, January 2008.
M. Kazemzadeh-Narbat, J. Kindrachuk, K. Duan, H. Jenssen, R. Hancock, and R. Wang. Antimicrobial peptides on calcium phosphate-coated titanium for the prevention of implant-associated infections. Biomaterials, 31(36):9519–9526, 2010.
B. N. Kholodenko. Cell-signalling dynamics in time and space. Nature Reviews Molecular Cell Biology, 7(3):165–176, 2006.
X. Khoo, G. O’Toole, S. Nair, B. Snyder, D. Kenan, and M. Grinstaff. Staphylococcus aureus resistance on titanium coated with multivalent pegylated-peptides. Biomaterials, 31(35):9285–9292, 2010.
P. Kingshott, J. Wei, D. Bagge-Ravn, N. Gadegaard, and L. Gram. Covalent attachment of poly(ethylene glycol) to surfaces, critical for reducing bacterial adhesion. Langmuir, 19(17), 2003.
M. C. Lawson, C. Bowman, and K. Anseth. Vancomycin derivative photopolymerized to titanium kills
s. epidermidis. Clinical Orthopaedics and Related Research, 461:96–105, 2007.
C. Macal and M. North. Tutorial on agent-based modelling and simulation. Journal of Simulation, 4(3):151–162, 2010.
J. S. Moskowitz, M. Blaisse, R. Samuel, H. Hsu, M. Harris, S. Martin, J. Lee, M. Spector, and
P. Hammond. The effectiveness of the controlled release of gentamicin from polyelectrolyte multilayers in the treatment of staphylococcus aureus infection in a rabbit bone model. Biomaterials, 31(23):6019– 6030, 2010.
V. Mugathan, A. Phillips, and M. Vigliotti. Bam: Bioambient machine. In Application of Concurrency to System Design, pages 45–49. IEEE Computer Society, June 2008.
N. L. Nov`ere and T. S. Shimuzu.  Stochsim: modelling of stochastic biomolecular processes.
BioInformatics, 17(6):575–576, 2001.
S. Pavlukhina, Y. Lu, A. Patimetha, M. Libera, and S. Sukhishvili. Polymer multilayers with ph- triggered release of antimicrobial agents. Langmuir, 11(12):3448–3456, 2007.

M. Peleg, D. Rubin, and R. B. Altman. Using Petri Net Tools to Study Properties and Dynamics of Biological Systems. Journal of the American Medical Informatics Association, 12(2):181–199, 2005.
A. Phillips and L. Cardelli. Efficient, correct simulation of biological processes in the stochastic pi-calculus. In Computational Methods in Systems Biology, volume 4695 of LNCS, pages 184–199. Springer, September 2007.
N. F. Polys, D. A. Bowman, C. North, R. Laubenbacher, and K. Duca. Pathsim visualizer: an information-rich virtual environment framework for systems biology. In Web3D 04: Proceedings of the ninth international conference on 3D Web technology, pages 7–14, New York, NY, USA, 2004. ACM, ACM.
C. Priami. Stochastic pi-calculus. Comput. J., 38(7):578–589, 1995.
C. Priami, A. Regev, E. Y. Shapiro, and W. Silverman. Application of a stochastic name-passing calculus to representation and simulation of molecular processes. Inf. Process. Lett., 80(1):25–31, 2001.
A. Radu, J. Vrouwenvelder, M. van Loosdrecht, and C. Picioreanu. Modeling the effect of biofilm formation on reverse osmosis performance: Flux, feed channel pressure drop and solute passage. Journal of Membrane Science, 365(1-2):1–15, 2010.
N. Rapin, O. Lund, and F. Castiglione. Immune system simulation online. Bioinformatics, 2011.
A. Roosjen, J. D. Vries, H. V. D. Mei, W. Norde, and H. Busscher. Stability and effectiveness against bacterial adhesion of poly(ethylene oxide) coatings in biological fluids. Journal of Biomedical Materials Research - Part B Applied Biomaterials, 20(25):347–354, 2005.
A. Stefanek, M. Vigliotti, and J. T. Bradley. Spatial extension of stochastic pi calculus. In 8th Workshop on Process Algebra and Stochastically Timed Activities, pages 109–117, 2009.
A. Trampuz and A. Widmer. Infections associated with orthopedic implants. Current Opinion in Infectious Diseases, 19(4):349–356, 2006.
D. S. Wishart, R. Yang, D. Arndt, P. Tang, and J. Cruz. Dynamic cellular automata: an alternative approach to cellular simulation. In Silico Biology, 5(2):139–161, 2005.
Y. Wu, J. Zitelli, K. TenHuisen, X. Yu, and M. Libera. Differential response of staphylococci and osteoblasts to varying titanium surface roughness. BioMaterials, 32(4):951–960, 2011.
J. B. Xavier, M. K. de Kreuk, C. Picioreanu, and M. C. M. van Loosdrecht. Multi-scale individual-based model of microbial and bioconversion dynamics in aerobic granular sludge. Environmental Science and Technology, 41(18):6410–6417, 2007.
