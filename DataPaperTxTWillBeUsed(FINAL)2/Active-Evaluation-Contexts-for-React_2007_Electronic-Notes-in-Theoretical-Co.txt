Electronic Notes in Theoretical Computer Science 175 (2007) 57–70	
www.elsevier.com/locate/entcs

Active Evaluation Contexts for Reaction Semantics
Henrik Pilegaard	Flemming Nielson	Hanne Riis Nielson
{hepi,nielson,riis}@imm.dtu.dk
Informatics and Mathematical Modelling The Technical University of Denmark

Abstract
In the context of process algebras it is customary to define semantics in the form of a reaction relation supported by a structural congruence relation. Recently process algebras have grown more expressive in order to meet the modelling demands of fields as diverse as business modelling and systems biology. This leads to combining various features, such as general choice and parallelism that were previously studied separately, and it often becomes difficult to define the reaction semantics. We present a general approach based on active evaluation contexts that allows the reaction semantics to be easily constructed.
Keywords: Structural Operational Semantics, Reaction Semantics, Process Algebra, General Choice, Calculus of Communicating Systems, BioAmbients.

Introduction
Since their proposal [7,11,1] process calculi have become the primary tool for re- searching paradigms of concurrent computation. In the three decades that have passed two types of semantics have emerged:
Structural operational semantics [15] describes how processes may interact with their immediate environment. As usual for structural operational semantics the immediate behaviour of a composite process is defined structurally in terms of the immediate behaviours of its component processes.
Behaviours are often expressed using labelled transition systems. The label languages have considerable potential, which ensures that the structural opera- tional semantics approach is viable for more expressive calculi also. As calculi do become more expressive, however, the required label languages tend to grow complicated and somewhat obscure the intuition of concurrency.
Reaction semantics in the style of the chemical abstract machine (CHAM) [2] clearly expresses an intuitive (chemical) understanding of concurrency. Every

1571-0661 © 2007 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2006.09.014

process term is perceived as the description of a solution of (syntactic) reactive entities. The usual structural congruence is a magical stirring mechanism that allows syntactic entities to float and mix as required. The reaction relation then simply states how reactions happen when ‘matching’ reactive entities come suffi- ciently close to each other.
While very intuitive this type of semantics has the drawback that the structural congruence is subject to conflicting requirements. On the one hand, we demand that the congruence sharply distinguishes between semantically different process expressions. On the other hand, we require it to be able to move potential redex constituents, which are syntactically located arbitrarily far apart, close enough together for a reaction rule to identify them. The usual decidability problems aside, these two requirements seem to clash as calculi grow in expressiveness.
Due to their different strengths it is usual for calculi to have both types of seman- tics. However, for the more elaborate calculi this is often difficult unless syntactic restrictions are imposed.
Milner’s Calculus of Communicating Systems (CCS) is a prime example. The more recent version [13], which we briefly describe in Section 2, restricts choice to guarded sum. This facilitates both types of semantics because a normal form
αj.Pj	(1)
j
can always be assumed for the constituents of redexes.
This may be contrasted to the original calculus [11] that has unrestricted choice.
For this reason the substantially more complex normal form
(... (((α.P + P ')|P '')+ P ''')|P '''' .. .)	(2)
needs to be assumed for the constituents of redexes. This normal form is hard to match syntactically and the structural congruence is of little help as it is semanti- cally meaningless to allow choice and parallel to distribute freely over one another. Thus, traditionally, only structural operational semantics is defined for derivatives of this calculus.
In this paper we show how reaction semantics can be defined even for very expressive calculi. One may ask why it is of interest to be able to deal with a binary unrestricted choice as opposed to an indexed guarded sum (over some arbitrary finite index set). In doing so we follow one of the design principles used by Gordon Plotkin when devising Structural Operational Semantics [15]: that one should always strive to use unary or binary syntactic constructors rather than general n-ary constructors because the former choice assists machine readable formal semantics and also gives a deeper semantic understanding of the programming construct at hand [16].
The proposed approach is based on a novel notion of active evaluation contexts. These contexts arise naturally when one allows standard evaluation contexts, orig- inally proposed by Felleisen [5], to evolve when reactions occur. In Section 3 we develop the active evaluation contexts and use them to define a reaction semantics for the recursion-free fragment of CCS with unrestricted choice. The main theoret-

P ::= 0 | α. P | Σ αi . Pi | P  P | (νa) P	α ::= τ | a | a
i∈I

Fig. 1. Syntax of finite core CCS with guarded sums (CCSgs).

ical result of this paper is that the resulting reaction semantics agrees with Milner’s original structural operational semantics for closed expressions.
In the case of more complicated calculi the notions of active evaluation contexts and structural congruence combine nicely to give the desired semantics. We illus- trate this in Section 4 where we define a reaction semantics for the full BioAmbients calculus extended with unrestricted choice.

CCS with Guarded Sums
In order to set the scene we start by considering CCS with guarded sums as defined by Milner [13]. In order to expose our contribution in Section 3 more clearly we shall focus on the finite fragment of the language; thus omitting recursion. This does not indicate a limitation in our framework - as we shall demonstrate later, in Section 4, recursion can easily be incorporated using a structural congruence.
Now, let N , ranged over by a, b, ··· , be a denumerable set of channel names and let the special symbol τ denote internal actions. The syntactical class of action prefixes, α ∈ Act, then contains all names a ∈ N , all corresponding co-names a ∈ N , and the special symbol τ . In this context the class of finite core CCS processes with guarded sums, to be denoted CCSgs, is described by the grammar
in Figure 1, where we assume the I in Σi∈I αi . Pi to be finite and write 0 when
|I| =0 and α.P when |I| = 1.
Because the choice construct Σi∈I αi . Pi is guarded it is possible to define a
traditional (CHAM style) reaction semantics. As always, due to the syntactical nature of the reaction semantics, the definition relies on a structural congruence relation. If we let ≡α denote ordinary α-equivalence, the structural congruence,
≡gs, is the least relation that satisfies the axioms and rules in Figure 2. Using the congruence the reaction relation, −→gs, defined by the axioms and rules of Figure 3 specifies the full reaction semantics of CCSgs. Note how this definition relies on the existence of the previously described normal forms of type (1).
Next we define a structural operational semantics specifying the process be- haviour in terms of labelled transition systems. We assume the same class α of action prefixes as before but use the abbreviation λ to denote action prefixes that are not internal (i.e. λ ∈ Act\{τ }); we shall write n(α) to denote the base name of any action prefix. The transition relation −α→uc defining the structural operational semantics is then the least relation satisfying the axioms and rules of Figure 4.
While these two formulations of the CCSgs semantics are often used for differ- ent purposes they are intended to express the same behaviour for closed process expressions. Thus the following result [13] is crucial:



Reordering of parallel processes:	Scope rules for name restrictions:
P  0 ≡gs P	(νa) 0 ≡gs 0
P  Q ≡gs Q  P	(νa) (νb) P ≡gs (νb) (νa) P

P (Q
R) ≡gs (P
Q) R	(νa) (P
Q) ≡gs P
(νa) Q	if a ∈/ fn(P )

Alpha equivalence:	Reordering of term in a summation:
P ≡α Q ⇒ P ≡gs Q	Summands can be freely reordered.
Equivalence:	Congruence:
P ≡gs P	P ≡gs Q ⇒ α.P + M ≡gs α.Q + M
P ≡gs Q ⇒ Q ≡gs P	P ≡gs Q ⇒ (νa) P ≡gs (νa) Q

P ≡gs Q ∧ Q ≡gs R ⇒ P ≡gs R	P ≡gs Q ⇒ P
P ≡gs Q ⇒ R
R ≡gs Q R P ≡gs R  Q





Fig. 2. Structural congruence of CCSgs.

P −→gs P '

P −→gs P '

TAU: τ . P + M −→gs P	RES:

(νa) P −→gs (νa) P '	PAR:
P ≡ Q  Q −→gs Q'  Q' ≡ P '

REACT:  (a. P + M ) (a. Q + N ) −→gs P  Q	STRUCT:	P −→gs P '


Fig. 3. Reaction relation of CCSgs.

P −→gs P ′

Q −→gs Q′

sumt
α
:	M + α. P + N −→gs
P	reactt :


l-part

:
α
P −→gs P
′


P −→gs P ′

r-part :
Q −→gs Q′

rest :
α
(νa) P −→gs
(νa) P ′	if n(α) /= a


Fig. 4. Structural operational semantics of CCSgs.

Theorem 2.1 (For CCSgs reaction agrees with τ -transition) For any CC- Sgs process P we have that P −τ→gs≡ P ' if and only if P −→gs P '.
Proof.  See Milner [13] Theorem 5.6	 

Active Evaluation Contexts for CCS
When the calculus is generalised to finite core CCS with unrestricted choice (CCSuc), as shown in Figure 5, the picture changes. Neither Milner nor other contributors have ever defined a classic (CHAM style) reaction semantics for a derivative of this language - and for good technical reasons. We believe that the technical means to deal with normal forms of type (2) have simply been lacking, and for this reason calculi descending from CCSuc are traditionally given only a structural operational

P ::= 0 | α. P | P + P | P  P | (νa) P

Fig. 5. Syntax of finite core CCS with unrestricted choice (CCSuc).

P  α	′	a	′

−→uc P
  P −→uc P	

PREt
α
:	α. P −→uc
P	L-PARt :
Q	′
L-SUMt :
a
P + Q −→uc P ′
′

R-PARt :
−→uc Q

R-SUMt :
Q −→uc Q

P + Q −→uc Q′


α	P  λ	′	λ	′

	P −→uc P	 if n(α) /= a
  −→uc P	Q −→uc Q

RESt :
α
(νa) P −→uc
(νa) P ′
REACTt :
τ
P  Q −→uc
P ′ Q′


Fig. 6. Structural operational semantics of FcCSSuc.

C ::= [ ] | (νa) C | C  P | P  C | C + P | P + C

Fig. 7. The active evaluation contexts of CCSuc.




EMPc :	[ ] −→ [ ]	NEWc :
C −→ C′
C −→ C′
(νa) C −→ (νa) C′ L-PARc :
C −→ C′
C −→ C′
C −→ C′

R-PARc :
L-SUMc :
C + P −→ C′	R-SUMc :
P + C −→ C′



Fig. 8. Context reduction for active evaluation contexts in CCSuc.

semantics similar to the one shown in Figure 6 [12].
We shall now propose a semantics for CCSuc that retains the intuition of reaction semantics, but avoids the difficulties of previous approaches. For this purpose we shall introduce a notion of active evaluation contexts as defined in Figure 7. As usual for process/evaluation contexts, active evaluation contexts are process expressions with exactly one hole [5,13,8]. Contrary to ordinary contexts, however, we shall allow active contexts to evolve when reactive sub-processes occupying their hole engage in reactions.
To facilitate this we define the context reduction relation described in Figure 8. It specifies exactly what happens to contexts when reactive sub-processes engage in reaction. The reduction ability of contexts enables the compact and elegant definition of the reaction relation, −→, shown in Figure 9. Here we use the auxiliary function masked(C) to determine the names and co-names that are restricted by a context C. The function is given by:
masked(C)= {λ | some (νλ) C' occurs in C}
In particular, masked((νa) C)= {a}∪ masked(C).



TAU: τ . P −→uc P
C1 −→ C′	C2 −→ C′

REACT:


CONT:
if n(λ) /∈ (masked(C1) ∪ masked(C2))
C −→ C′ P −→uc P ′
C[ P ] −→uc C′[ P ′ ]


Fig. 9. Reaction relation of CCSuc.



Correspondence of Semantics
It is evident that that the context reduction relation strongly resembles those rules of the structural operational semantics that encode the recursive descent into process terms. Consequently, structural congruence turns out to be unnecessary as was the case for the structural operational semantics.
In this favourable context the equivalence of the reaction semantics and the structural operational semantics for closed process expressions can be expressed simply as:
Theorem 3.1 (Reaction corresponds to τ transition) P −→uc P ' if and only if P −τ→uc P '.
The proof has two parts, but first we establish the following useful result, which shows how the notion of active contexts relates to the structural operational seman- tics:

Lemma 3.2 (Contexts respect behaviour)  If P
n(α) ∈/ masked(C) then C[ P ] −α→uc C'[ P ' ].
−α→uc P ', C −→ C', and


Proof. The proof proceeds by structural induction on C: Base case [ ]:	trivial.



From the premises we have P
masked(C).
−α→uc P ', C R −→ (C R)', and n(α) ∈/

By the shape of the inference of −→ we have (C R)' = C' R and C −→ C' as a necessary premise. From the induction hypothesis it is now clear that C[ P ] −α→uc C'[ P ' ].
A single application of the L-PARt rule now establishes the desired result:
C[ P ] R −α→uc C'[ P ' ] R

All similar.
Case (νa) C:

From the premises we have P
masked((νa) C).
−α→uc P ', (νa) C −→ ((νa) C)', and n(α) ∈/

By the shape of the inference of −→ we have ((νa) C)' = (νa) C' and
C −→ C' as a necessary premise and we know that n(α) ∈/ masked(C).
From the induction hypothesis it is now clear that C[ P ] −α→uc C'[ P ' ]. Given that n(α) ∈/ masked((νa) C) we have n(α) /= a and a single applica- tion of the RESt rule now establishes the desired result: (νa) C[ P ] −α→uc (νa) C'[ P ' ].	 
Given this lemma it is now easy to establish the ’if’ part of Theorem 3.1:
Lemma 3.3 If P −→uc P ' then P −τ→uc P '.
Proof. We proceed by induction on the inference of −→uc: Case TAU:
Given the process term τ.P rule PREt trivially instantiates to give us
τ.P −τ→uc P , just as desired.
Case REACT:

Rule PREt gives us a. P1
−a→uc P1 and a. P2
−a→uc P2, and from the

rule premises we have that C1 −→ C' , C2 −→ C' , n(a) ∈/ (masked(C1) ∪

1	2
masked(C2)).
Using Lemma 3.2 we can establish that C1[ a. P1 ]

−a→uc C' [ P1 ] and

C2[ a. P2 ] −a→uc C' [ P2 ]. By a single application of rule REACTt we can
2
τ	'	'
now conclude C1[ a. P1 ] C2[ a. P2 ] −→uc C1[ P1 ] C2[ P2 ], as required.
Case CONT:
From the premises we have C −→ C' and P −→uc P '. Using the induction
hypothesis on the latter we obtain P −τ→uc P ', where obviously n(τ ) ∈/
masked(C).
Lemma 3.2 now tells us that C[ P ] −τ→uc C'[ P ' ], as required.	 
We now turn to the ’only if’ part of Theorem 3.1, which is a straightforward corollary of the following lemma:
Lemma 3.4	If P −τ→uc Q then P −→uc Q and
if P −λ→uc Q then, for all contexts C, C' such that C −→ C' and n(λ) ∈/ masked(C), we have C[ P ] λ. R −→uc C'[ Q ] R and λ. R  C[ P ] −→uc R  C'[ Q ].
Proof. The proof proceeds by induction on the inference of −α→uc: Base case PREt :
If α is τ then P is τ.P ' and Q is P ' and the transition P −→uc Q follows from TAU.
Otherwise P is λ.P ' and Q is P ' and the required transitions both follow from REACT (taking one of C1 and C2 to be C and the other to be [ ]).
Case L-PARt :

If α is τ then P is P ' Q' and Q is P '' Q' and the transition P −→uc Q follows from the induction hypothesis and CONT where C is taken to be [] Q'.
Otherwise, P and Q are of a similar form, but the transitions have to
follow from REACT. From premises we know that P ' −λ→uc P '', and the induction hypothesis then tells us that C[ P ' ] λ. R −→uc C'[ P '' ] R for all suitable C, C' (i.e. C −→ C' with n(λ) ∈/ masked(C)). Given that C, C'

are suitable clearly C[[ ]
Q' ], C'[[ ]
Q' ] are also suitable, and then the

required transitions both follow from REACT.
Case R-PARt, LSUMt, and R-SUMt : All similar.
Case RESt :
If α is τ then P is (νa) P ' and Q is (νa) P '' and the transition P −→uc Q follows from the induction hypothesis and CONT where C is taken to be (νa)[ ].
Otherwise, P and Q are of a similar form, but the transitions have to follow from REACT. From the premise we know that P ' −λ→uc P '', and the induction hypothesis then tells us that C[ P ' ] λ. R −→uc C'[ P '' ] R for all suitable C, C' (i.e. C −→ C' with n(λ) ∈/ masked(C)). Given that C, C' are suitable clearly C[ (νa)[ ] ], C'[ (νa) [ ] ] are also suitable because we know from the side-condition that n(λ) /= a, which means that n(λ) ∈/ masked(C) ∪ {a}. The required transitions then both follow from REACT.
Case REACTt :

Here α is τ and P is P '
Q' and Q is P ''
Q''.	By the premises and

the induction hypothesis we have both C[ P ' ] λ. R −→uc C'[ P '' ] R and λ. R C[ P ' ] −→uc R C'[ P '' ]. As these reactions can only arise by the use of REACT we may assume that C[ P ' ] is of the form C[ Cdeep[ λ. Pdeep ] ],
where Cdeep −→ C'	and n(λ) ∈/ masked(Cdeep).
Similar arguments for Q' allows us to assume that C[ Q' ] is of the form

C[ Cdeep[ λ. Qdeep ] ], where Cdeep −→ C'
and n(λ) ∈/
masked(Cdeep).

From this we obtain the desired reaction by a single application of REACT.
 
Active Evaluation Contexts for BioAmbients
The use of process calculi as modelling languages for real-world domains, such as business modelling and systems biology, seems to be a current trend in language based technology. The trend combines many language features that were previously unstudied or only studied in isolation. This invariably leads to evermore expres- sive calculi that share the difficulties of CCSuc with respect to the definition of appropriate reaction semantics.
The BioAmbients calculus of Regev et al. [18,17,3] is a prime example. The language is a sibling of Mobile Ambients (Cardelli and Gordon [4]) designed to

model biological systems. It preserves the notion of ambients as bounded mobile sites of activity; contrary to Mobile Ambients, however, bio-ambients are cast as nameless entities. The ambients are used to model chemically active sub-systems (compartments) bound by biological barriers (membranes) in an intuitive manner. The calculus is quite extensive in terms of modelling primitives. Appropriate sets of capabilities and co-capabilities are devised for modelling a variety of biolog- ical reactions, such as movement and communication, that may happen between the sub-systems. Both communication and movement are facilitated by having capability/co-capability pairs react with each other as in [10,14]. As a consequence all reactions are synchronous in the sense that the process exposing the capability and the process exposing the corresponding co-capability must simultaneously agree on a reaction for it to happen. Such an agreement can be reached only if the two
entities share the same (channel) name.
The set of control structures for processes is slightly larger than what is tra- ditionally studied for Mobile Ambients. Besides the ambient construct it includes non-deterministic (external) choice as well as a general recursion construct in the manner of CCS [12] in order to facilitate the description of more faithful models of biological systems.
Following the tradition of ambient calculi BioAmbients is endowed by Regev with a (CHAM style) reaction semantics [18,17]. Arguably, this is a natural choice because it ensures a high degree of coherence between the inherently bio-chemical modelling domain and the operational model of the language. As for CCSgs, how- ever, external choice is limited to guarded sums and, again, we believe that this is so because the technical means to combine parallelism and unrestricted choice was lacking at the time of definition.
In the following we present a BioAmbients variant where choice is unrestricted. We trust this to be a conservative extension of the original calculus, but a formal proof is besides the point of the present paper. Rather, we shall focus on defining a reaction semantics using our active evaluation contexts.
Syntax
The full syntax of BioAmbients is defined in Figure 10. Note that we use the heavy brackets [ and ] to represent ambient boundaries; the ordinary brackets [ and ] are reserved for substitutions and holes of contexts. We use a, b, ··· ∈ N to denote channel names and M ∈ Cap for the notion of (co-) capabilities, which are based on names and generalise the notion of actions. As customary for BioAmbients we omit the notion of internal τ -actions. Also, since reactions are based on (co-)capabilities, we have no need for co-names.
In the following we shall write P [a/b] to denote the process that is as P except that all free occurrences of the name b are replaced by a. Similarly, we shall use P [Q/X] to identify the process that is as P except that all free occurrences of the process identifier X are replaced by the process expression Q. In both cases we take care to perform the necessary α-renamings to avoid capturing free names and process identifiers. Finally, we shall use fn(P ) to pick out the free names of a

P ::= 0	a terminal (stuck) process
|  (νa) P	restricting the scope of a to the process expression P
|  [ P ]	process P enclosed by ambient boundary
|  P  P ′	process P in parallel with process P ′
|  P + P ′	non-deterministic external choice between P and P ′
|  M . P	capability prefixed process
|  rec X. P	recursive process definition (X = P )
|  X	process identifier
M ::= enter a | accept a	enter movement
|  exit a | expel a	exit movement
|  merge– a | merge+ a merge movement
|  a!{b} | a?{c}	local communication binding the variable c
|  a !{b} | aˆ?{c}	parent to child communication binding the variable c
| aˆ!{b} | a ?{c}	child to parent communication binding the variable c
|  a#!{b} | a#?{c}	sibling communication binding the variable c

Fig. 10. Syntax of BioAmbients.

C ::= [ ] | C P | P  C | C + P | P + C

Fig. 11. The active evaluation contexts of BioAmbients.




EMPc :	[ ] −→ []	L-PARc :
C −→ C′
C −→ C′
C −→ C′

R-PARc :
C −→ C′

L-SUMc :
C + P −→ C′	R-SUMc :
P + C −→ C′



Fig. 12. Reduction of BioAmbients active evaluation contexts.
process P and write P ≡α Q to state that two processes P and Q are identical up to α-renaming of names.

Semantics
The active evaluation contexts of BioAmbients, shown in Figure 11 and Figure 12, are simpler than those of CCSuc. Their definition embodies three crucial choices, which we shall further substantiate below:
The active contexts are name restriction free.
The active contexts are ambient boundary free.
The active contexts are recursion free.
The choice (i) is necessary because both π-style name passing and ambient style movement may cause extrusion of scope. This happens when restricted names are communicated to recipients or moved to positions outside of their original bounding box. Defining the active contexts to be name restriction free allows us to deal

Scope rules for namebindings:
(νa) 0 ≡ 0		(νa) (P P ′) ≡ ((νa) P ) | P ′	if a ∈/ fn(P ′) (νa1) (νa2) P ≡ (νa2) (νa1) P	(νa) (P + P ′) ≡ ((νa) P )+ P ′ if a ∈/ fn(P ′)
(νa) ([ P ]) ≡ [ (νa) P ]
Unfolding of recursion:
rec X. P ≡ P [rec X. P/X]
α-renaming:	Congruence requirements:

P ≡α Q

P ≡ Q	P ≡ P
P ≡ Q


Q ≡ P
P ≡ Q Q ≡ R P ≡ R

P ≡ Q
C[ P ] ≡ C[ Q ]
P ≡ Q
P ≡ Q
(νa) P ≡ (νa) Q



Fig. 13. Structural congruence P ≡ Q for BioAmbients.

explicitly with all scope related issues in the usual way, i.e. using the structural congruence, shown in Figure 13, to migrate name restrictions in and out of redexes as required.
Contrary to the usual practice we allow constant introductions (νa) to migrate in and out of non-deterministic external choice constructs in much the same way as is customary for parallel composition. This is necessary because the rules of our reaction semantics are implicitly going to assume the normal form
(... ((([ (... (((M . Pi + P ′) P ′′)+ P ′′′) P ′′′′ .. .) ] + P ′) P ′′)+ P ′′′) P ′′′′ .. .)	(3)
i	i	i	i	o	o	o	o
for the constituents of redexes of movement actions, and
(... ((([(... (((M . Pi + P ′) P ′′)+ P ′′′) P ′′′′ .. .)] + P ′) P ′′)+ P ′′′) P ′′′′ .. .)	(4)
i	i	i	i	o	o	o	o

(where the grey symbols denote syntax that may, or may not, be present) for the constituents of redexes of communication actions. In each of these cases the con- gruence must be strong enough to migrate an obstructing name restriction out of the way, if appropriate.
The choice (ii) is required to ensure that rules of the reaction semantics, shown in Figure 14, recognise and alter redexes correctly. All redexes have two con- stituents, one exposing a capability prefix and another exposing the corresponding co-capability prefix. As mentioned, these constituents can always be assumed to be of one of the forms (3) or (4), which implies that there are some cases where exactly one boundary is demanded to enclose the exposed prefix, and other cases where no boundaries are allowed. Defining the active evaluation contexts to be ambient boundary free allows us to easily match each of these cases in the following manner:
If no ambient boundary is allowed, the constituent is simply a capability prefixed process expression enclosed in an active evaluation context, which we match by C[ M . P ].
If exactly one ambient boundary is demanded, the constituent is an expression of the form (I) enclosed in an ambient boundary construct and a further active evaluation context, which we match by C1[ C2[ M . P ] ].



Movement of ambients:
C1 −→ C'

C2 −→ C'

C3 −→ C'

C4 −→ C'



C1 −→ C'
C2 −→ C'
C3 −→ C'



C1 −→ C'
C2 −→ C'
C3 −→ C'
C4 −→ C'



Communication between ambients:
C1 −→ C'	C2 −→ C'


C1 −→ C'
C2 −→ C'
C3 −→ C'



C1 −→ C'
C2 −→ C'
C3 −→ C'



C1 −→ C'
C2 −→ C'
C3 −→ C'
C4 −→ C'



Execution in context:	Structural congruence:

C −→ C'  P −→ Q

C[ P ] −→ C'[ Q ]
P −→ Q


(νa) P −→ (νa) Q
P −→ Q
P ≡ Q Q −→ Q'  Q' ≡ P ' P −→ P '



Fig. 14. Reaction relation of BioAmbients.

As illustrated by Figure 14, where the active contexts are toned down, systematic application of these patterns allows us to focus entirely on the high level structure of redexes and contractums while the contexts conveniently hide the details of redex constituents as well as reactions.
Finally, the choice (iii) completely separates the notion of recursion from that of the active evaluation contexts. As a result recursion is easily handled in the usual manner, i.e. using the structural congruence to unfold recursive processes as required.

Related Work
Employing evaluation contexts to express semantics of process calculi is not a new idea.
Berry and Boudol [2] use program contexts to denote the arbitrary testing en- vironments that form the basis of semantic equivalence in CHAM. Later authors, such as Milner [13], use a similar (derived) notion of process contexts, primarily in order to extend equivalences to congruences. A few authors, such as Godskesen, Hildebrandt, and Sasone [6] for the Calculus of Mobile Resources, also use similar derived notions (path contexts, evaluation contexts, resource contexts etc.) to de- fine the actual reaction relation of their calculi. In all cases, however, the involved notions of context are (standard) static ones and none of the authors address the

issue of combining general choice with parallelism.
Sewell [20] makes a radically different use of contexts. He shows how to auto- matically derive labelled transition systems from a variety of rewrite semantics by simply using suitable contexts as transition labels whenever reaction occurs. This allows operational equivalences, as provided by the reaction semantics, to be inves- tigated in a (presumably) nicer labelled setting. The involved notion of context is not related to ours and calculi with choice are not considered at all.
Larsen [8] uses contexts equipped with structural operational semantics to define a notion of context dependent equivalence. Larsen and Xinxin [9] extends this into a notion of compositionality that allows Hennesy-Milner properties of composite systems to be decomposed into joint properties of the sub-components. This use of active contexts has subsequently been adopted back into the realm of functional languages by Sands [19]. In all cases the contexts are, in some sense, active, but the associated semantics is defined using exactly the complicated label languages that reaction semantics strive to avoid and, in purpose, the approach is unrelated to ours.




Conclusion
We have developed the notion of active evaluation contexts that allows reaction semantics in the style of the Chemical Abstract Machine [2] to be defined for a larger class of process algebras than has previously been considered.
In line with previous work on reaction semantics for CCS [13] we have compared our approach to the more classical approach of structural operational semantics [11] and proved that the two types of semantics coincide when closed process expressions are considered. This result indicates that the notion of active evaluation contexts constitutes a sound approach to reaction semantics.
In order to illustrate our approach on more expressive calculi, such as those that arise to meet the demands of domain specific modelling for complex domains, we have presented a full reaction semantics for an extension of Regev and Cardelli’s comprehensive BioAmbients calculus [18] that includes unrestricted choice. The resulting semantics has two properties that we find very encouraging. Firstly the process of actually defining it was highly systematic and, thus, easy. Secondly we find that it is comparable in elegance to Regev’s original semantics. This indicates that the notion of active evaluation contexts also constitutes a sensible approach to reaction semantics.
Thus, we believe that active evaluation contexts constitute a sound and sensible approach to defining reaction semantics in general. We can only fully substantiate this claim, however, by subjecting other advanced calculi, which combine various features in new ways, to the approach.

References
Bergstra, J. A. and J. W. Klop, Algebra of communicating processes, in: Proc. of CWI Symposium, Mathematics and Computer Science (1986), pp. 89–138.
Berry, G. and G. Boudol, The chemical abstract machine, in: POPL ’90: Proceedings of the 17th ACM SIGPLAN-SIGACT symposium on Principles of programming languages (1990), pp. 81–94.
Cardelli, L., Bioware languages, in: A. Herbert and K. S. Jones, editors, Computer Systems: Theory, Technology, and Applications - A Tribute to Roger Needham, Monographs in Computer Science, Springer, 2004 pp. 59–65.
Cardelli, L. and A. D. Gordon, Mobile Ambients, Theoretical Computer Science 240 (2000), pp. 177– 213.
Felleisen, M. and D. P. Friedman, Control operators, the SECD-machine, and the λ-calculus, in:
M. Wirsing, editor, Formal Descriptions of Programming Concepts III, North-Holland, 1986 pp. 193– 219.
Godskesen, J. C., T. Hildebrandt and V. Sassone, A calculus of mobile resources, in: L. Brim, P. Jancar,
M. ir Kretinsky and A. in Kucera, editors, CONCUR 13 – Concurrency Theory, LNCS 2421 (2002),
pp. 272–287.
URL citeseer.ist.psu.edu/article/godskesen02calculus.html
Hoare, C. A. R., Communicating sequential processes, Commun. ACM 21 (1978), pp. 666–677.
Larsen, K. G., A context dependent equivalence between processes, Theor. Comput. Sci. 49 (1987),
pp. 185–215.
Larsen, K. G. and L. Xinxin, Compositionality through an operational semantics of contexts, Journal of Logic and Computation 1 (1991), pp. 761–795.
Levi, F. and D. Sangiorgi, Controlling interference in ambients, in: Proc. of POPL’2000 (2000), pp. 352–364.
Milner, R., “A Calculus of Communicating Systems,” Lecture Notes in Computer Science Vol. 92, Springer-Verlag, 1980.
Milner, R., “Communication and Concurrency,” Prentice-Hall, Inc., Upper Saddle River, NJ, USA, 1989.
Milner, R., “Communicating and Mobile Systems: The π-Calculus,” Cambridge University Press, 1999.
Nielson, H. R., F. Nielson and M. Buchholtz, Security for mobility, in: FOSAD 2001/2002 Tutorial Lecture Notes, LNCS 2946, Springer, 2004 pp. 207–265.
Plotkin, G. D., A Structural Approach to Operational Semantics, Technical Report DAIMI FN-19, University of Aarhus (1981).
URL citeseer.csail.mit.edu/plotkin81structural.html
Plotkin, G. D., Personal communication to flemming nielson, Aarhus (1981).
Regev, A., “Computational Systems Biology: A Calculus for Biomolecular Knowledge,” Ph.D. thesis, Tel Aviv University (2003).
Regev, A., E. M, Pamina, W. Silverman, L. Cardelli and E. Shapiro, BioAmbients: An abstraction for biological compartments, Theoretical Computer Science 325 (2004), pp. 141–167.
Sands, D., Towards operational semantics of contexts in functional languages, in: Proceedings of the 6th Nordic Workshop on Programming Theory, 1994, pp. 378–385.
URL citeseer.ist.psu.edu/68354.html
Sewell, P., From rewrite rules to bisimulation congruences, Theoretical Computer Science 274 (2002),
pp. 183–230.
URL citeseer.ist.psu.edu/sewell98from.html
