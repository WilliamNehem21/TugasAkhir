Egyptian Informatics Journal 18 (2017) 221–232








Full length article
Incorporating a modified uniform crossover and 2-exchange neighborhood mechanism in a discrete bat algorithm to solve the quadratic assignment problem
Mohammed Essaid Riffi a, Yassine Saji a,⇑, Mohammed Barkatou b
a LAROSERI Laboratory, Department of Computer Science, Faculty of Science, Chouaïb Doukkali University, Route Ben Maachou, 24000 El Jadida, Morocco
b Department of Mathematics, Faculty of Science, Chouaïb Doukkali University, Route Ben Maachou, 24000 El Jadida, Morocco



a r t i c l e  i n f o 

Article history:
Received 21 January 2016
Revised 13 November 2016
Accepted 22 February 2017
Available online 7 March 2017

Keywords:
Bat algorithm
Quadratic assignment problem NP-hard problem
Combinatorial optimization problem
a b s t r a c t 

The bat algorithm is one of the recent nature-inspired algorithms, which has been emerged as a powerful search method for solving continuous as well as discrete problems. The quadratic assignment problem is a well-known NP-hard problem in combinatorial optimization. The goal of this problem is to assign n facilities to n locations in such a way as to minimize the assignment cost. For that purpose, this paper introduces a novel discrete variant of bat algorithm to deal with this combinatorial optimization problem. The proposed algorithm was evaluated on a set of benchmark instances from the QAPLIB library and the performance was compared to other algorithms. The empirical results of exhaustive experiments were promising and illustrated the efficacy of the suggested approach.
© 2017 Production and hosting by Elsevier B.V. on behalf of Faculty of Computers and Information, Cairo
University. This is an open access article under the CC BY-NC-ND license (http://creativecommons.org/
licenses/by-nc-nd/4.0/).





Introduction

Nowadays metaheuristics pose a great challenge for solving a numerous difficult combinatorial problems appearing in various industrial, economic, and scientific domains. Most of these prob- lems are Non-deterministic Polynomial-time hard NP-hard [1,2],
i.e. there is no polynomial time algorithm to solve them. Solving such combinatorial optimization problems require to involve the search for an optimal solution among a collection of solutions in finite search space. The nature has long been a rich source of inspi- ration for many scientists. Drawing their inspiration from the most successful process in nature, researchers develop a class of metaheuristics namely nature-inspired algorithms. The nature- inspired algorithms offer additional advantages over classical algorithms [3] and they also seek to find acceptable results within a reasonable time, rather than an ability to guarantee the optimal

* Corresponding author.
E-mail address: yassine.saji@gmail.com (Y. Saji).
Peer review under responsibility of Faculty of Computers and Information, Cairo University.
or sub-optimal solution. Moreover, the most metaheuristic algorithms are based on swarm intelligence, biological systems, physical and chemical systems [4]. In particular, the swarm- intelligence algorithms have shown their promising performance and they have been gaining much popularity in solving many engi- neering optimization problems; such as particle swarm optimiza- tion [5], spider monkey [6], cuckoo search [7], bee colony optimization [8], firefly algorithms [9] and in the last years the bat-inspired algorithm [10,11].
The Quadratic Assignment Problem (QAP) is proven to be among the hardest combinatorial optimization problems [12] and no polynomial time algorithm is expected to exactly solve the problem for large instances and sometime even small instances may require considerable computation time. In literature of combinatorial optimizations, researchers have applied different approaches ranging from heuristics or meta-heuristics until hybrid approaches, to find optimal or near optimal solutions for the QAP problem. The most widely used heuristic algorithms for QAP prob- lem are simulated annealing [13], tabu search [14], neural network [15], ant colonies [16], memetic algorithms [17], genetic algo- rithms [18], iterated local search [19], hybrid heuristics [20], very large-scale neighborhood search [21], particle swarm optimization [22], bat algorithm [23], and bees algorithm [24].
The Bat-inspired Algorithm (BA) is a population-based stochas- tic optimization technique, which has recently been applied in



http://dx.doi.org/10.1016/j.eij.2017.02.003
1110-8665/© 2017 Production and hosting by Elsevier B.V. on behalf of Faculty of Computers and Information, Cairo University. This is an open access article under the CC BY-NC-ND license (http://creativecommons.org/licenses/by-nc-nd/4.0/).



many applications. This algorithm was developed to deal with con- tinuous optimization and especially, BA has also been proven effec- tive in solving several discrete optimization problems. Owing to the complexness of the QAP for both exact and heuristic approaches, this problem is a suitable testing platform for novel optimization techniques. Therefore, the design of the improved methods for the QAP still poses a challenge to many researchers. This study investigates the applicability of BA to provide a very good compromise between solution quality and execution time. To that end, this work introduces a novel discrete version of BA named Discrete Bat Algorithm (DBA) by involving some modifica- tions of the original algorithm. Firstly, these modifications concern position representation and its update equation, and velocity rep- resentation and its update equation. Secondly, we incorporate a modified uniform crossover operator in the movement equation. This idea aims to enhance the search strategy of BA. Thirdly, we use the 2-exchange neighborhood mechanism to improve the local search of BA. Finally, we adjust some suitable parameters values to balance between intensification and diversification capabilities of BA. We compare the performance of our proposed approach to five algorithms from the current literature: Bees Algorithm (BeA) [24], Modified Bat Algorithm (MBA) [23], a genetic algorithm with Sequential Constructive Crossover (SCX) [25], Hybrid Ant colony System coupled with the QAP (HAS-QAP) [16] and Hierarchical Par- ticle Swarm Optimization (HPSO) [22].
The rest of this paper is organized as follows: the second section presents the literature review of BA. Section 3 introduces the orig- inal BA. Section 4 describes the quadratic assignment problem.
Section 5 discusses our discrete approach and details its main com- ponents. The results of computational experiments and discussions are presented in Section 6. Finally, the conclusions and some per- spectives of research are given in Section 7.

Related work

The BA is a swarm-intelligence algorithm based on the echolo- cation behaviour of microbats when searching their prey. Initially, this algorithm has been developed to optimize continuous non- linear functions [10,26]. Actually, the algorithm shows a good effi- ciency when it has been applied to solve various optimization problems [27]. In the current literature, many variants of BA have been introduced to enhance or to implement the original algorithm to solve different sorts of problems. Gandomi and Yang integrated chaos mechanism in BA to improve the global search mobility of the basic algorithm and to optimize effectively a set of benchmark problems [28]. Cai et al. introduced a Gaussian walk with BA to enhance the local search capability and they modified the velocity equation to assure a good exploitation of the search space [29]. Khan et al. introduced a fuzzy modification of BA for clustering of company workplaces [30]. Yılmaz and Küçüksille embedded two modifications in structure to enhance the local and global search and they also used both standard test functions and con- strained real-world problems to verify the effectiveness of pro- posed approach [11]. Nguyen et al. hybridized BA and artificial bee colony algorithm based on communication strategies in paral- lel processing for swarm intelligent algorithms with the aim to




Fig. 1. Illustrative example of quadratic assignment problem with the permutation p = (2; 4; 3; 1) corresponds to optimal solution.



improve the convergence and accuracy of both algorithms [31]. Fister et al. incorporated two mechanisms within the original BA algorithm in order to obtain the hybrid self-adaptive BA, the first one is self-adaptation of control parameters, and the second is the hybridization of the self-adaptive BA using four DE strategies as a local search heuristics [32]. Mirjalili et al. used the sigmoid function to propose a binary version of BA to solve unimodal, mul-
of their target where 0 denotes no pulses at all, and 1 denotes the maximum rate of pulse emission.
The loudness varies from a large (positive) A0 to a minimum constant value Amin.

The basic pseudo code of BA as presented in its original paper is summarized in Algorithm 1.

timodal, and composite functions [33]. Chen et al. employed the		

Doppler Effect to enhance the efficiency of BA in solving optimiza- tion problems [34]. Although BA was widely used to solve contin- uous problems, nevertheless, the application of the basic BA had not been exploited effectively to solve discrete problems before 2012. The first binary version proposed by Nakamura et al. [35] in 2012 to solve classifications and feature selection problems. They have maintained the same structure of the original algorithm, whilst they have transformed both global and local position update by using the sigmoid function. Recently, many studies have been focused on using BA to solve some discrete problems. For example, Xie et al. proposed a differential Lévy-flights BA to optimize the permutation flow shop problem [36]. Luo et al. integrated an inten- sive virtual population neighborhood search into proposed DBA for optimal permutation flow shop scheduling problem [37]. Sabba and Chikhi suggested a discrete binary BA based on sigmoid func- tion for solving the multidimensional knapsack problem [38]. Bü yüksaatçı used BA to solve the single row facility layout problem [39]. Fister et al. introduced a modified bat algorithm for planning the sports training sessions [40]. Dekhici and Belkadi hybridized a discrete version of BA with generalized evolutionary walk algo- rithm to solve the mono-processors two stages flexible flow shop [41]. Hasançebi and Carbas introduced a BA for structural opti- mization of steel frames designed for minimum weight, and they used three real-size large steel frames to validate the performance of their approach [42,43]. Eslam et al. used a discrete BA for finding community structure in social network [44]. Saji et al. introduced two discrete variants of BA to solve the Euclidean travelling sales- man problem [45,46], and so on. As we have mentioned previously, the BA has been applied to many discrete optimization problems, anyway, it has been rarely applied to any assignment problem [23]. In this paper, we propose a novel discrete version of BA to
Algorithm 1: Pseudo-code of bat algorithm


Objective function f(x), x = (x1, .. .,xd)T
Initialize the bat population xi (i = 1,2, .. .,n) and vi
Define pulse frequency fi at xi
Initialize pulse rates ri and the loudness Ai
while (t < Max number of iterations)
for i = 1 to m
Generate new solution by adjusting frequency,
and updating velocity and location/solution // Equa- tions (1), (2) and (3)
if (rand > ri)
Select a solution among the best solutions of current iteration
Generate a local solution around the selected best solution
end if
Generate a new solution by flying randomly
if (rand < Ai &f (xi) < f (x⁄)) // xi is current solution and x⁄
is global best solution
Accept the new solutions
Increase ri and reduce Ai // Equations (5) and (6)
end if
end for
Rank the bats and find the current global best x⁄
end while
Post process results and visualization



In the BA, at iteration t, an artificial bat xi is determined by a posi- tion vector xt, a velocity vector vt , a frequency vector fi a pulse rate
rt and a loudness At, which are updated during the research process

solve the quadratic assignment problem as NP-hard problem [12]	i	i

in combinatorial optimization.

Bat algorithm
to find the best solution as Eqs. (1)(3):
f i = f min + (f max — f min)b;	(1)
vt = vt—1 + (xt—1 — x*)f i;	(2)

Bat-inspired algorithm is a meta-heuristic search optimization	i	i	i

firstly proposed by Xin-She Yang in 2010 [10]. This algorithm is
xt = xt—1 + vt ;	(3)

derived by simulating the echolocation behaviours of micro-bats	i	i	i

when seeking their prey and discriminating different types of insects even at complete darkness by varying pulse rates of emis- sion and loudness. The echolocation guides the hunting strategies of bats as these last tend to decrease the loudness and increase the rate of emitted ultrasonic depending on the proximity of their
where b ∈ [0,1] is a random vector generated from uniform distri- bution and where x⁄ is the current global best solution which is located after comparing all the solutions among all the m bats.
For the local search, a new solution will be accepted around the current best solutions by using a random walk:

target.
Based on the echolocation behaviour of bats, Yang in [10]
xnew
= xold
+ eAt;	(4)

describes the basic steps of BA using the following three idealized rules:

All bats use echolocation to sense distance, and they also ‘know’ the difference between food/prey and background barriers.
Bats fly randomly with velocity vi at position xi with a fixed fre-
quency fmin, varying wavelength k and loudness A0 to search for
prey. They can automatically adjust the wavelength (or fre-
where e ∈ [—1, 1] is a random number while At = ⟨At⟩ is the average loudness of all the bats at current time step.
During the flying process, the loudness Ai and the pulse emis- sion rate ri will be updated, whenever a new best solution will be accepted. The loudness and the pulse emission rate are updated as follow:
At+1 = aAt;	(5)

i	i
quency) of their emitted pulses and adjust the rate of pulse

emission r in the range of [0,1], depending on the proximity
rt+1 = r0[1 — exp(—ct)];	(6)

i	i





















Fig. 2. Illustration of sort function.














Fig. 3. Example of modified uniform crossover (UX).


where a, c are two constants, generally a = c and the initial values
A0 and r0 are chosen randomly. The choice of these parameters
objective is to minimize cost allocation of facilities into locations, while taking into account the sum of distances multiplied by the

i	i

requires some experimenting and depends the problem tackled.

Quadratic assignment problem

The QAP is an important issue in combinatorial optimization problem. This problem was originally introduced by Koopmans and Beckmann in 1957 [47] and classified as a NP-hard problem [12]. The QAP is described as a problem to allocating a set of n facilities to a set of n locations in such a way that each location is designated to exactly one facility and vice versa. For each pair of facilities versus locations assignment costs are known. The
corresponding flows between all facilities.

Table 1
The parameters of the problem.

Parameter	Value
Population size: m	15
Emission rates ri	0.5, ri ∈ [0.0, 1.0]
Loudness Ai	0.5, Ai ∈ [0.0, 1.0]
Minimal frequency f min	1
Maximal frequency f max	2
Maximal number of iterations tmax	200



In a formal way, QAP can be stated as given n facilities, n loca- tions, and two matrices A = (aij)n×n and B = (bkl)n×n , where aij is the
flow between facilities i and j for all i, j ∈ {1, 2, ... , n} and bkl is the
distance between locations k and l for all k, l ∈ {1, 2, ... , n}. The
goal	of	this	problem	is	to	find	the	permutation
Q
0 0  2  1  3 1
B =	1  1  0  3  , B is the distance Matrix
3  2  3  0
Besides the facility location problem, QAP has a wide applicabil-

that minimizes cost function C:
such as design of type-writer keyboards, backboard wiring in elec- tronics, balancing turbine runners, layout design, data allocation,

n  n

C(p*)= min	aijbp(i)p(j)	(7)
p∈  i=1 j=1

Let us consider the problem of assigning four facilities to four locations and two matrices A and B. In Fig. 1, the dotted line between a pair of facilities indicates that there is required flow between the facilities, and to calculate the assignment cost of the permutation, the distances between locations are needed. One of possible assignment is to place facility 1 to location 3, facility 2 to location 4, and facility 3 to location 1, and facility 4 to location
2.  This  assignment  can  be  written  as  the permutation
p = (3, 4, 1, 2) but it is not necessarily the optimal one.
scheduling, and many others. The QAP can be transformed into many classic combinatorial optimization problems such as the travelling salesman [48], graph partitioning problems [48], maxi- mum clique [48], data allocation problem [49], weapon target assignment [50].

Discrete bat algorithm for QAP

Basically, the standard BA is a continuous optimization algo- rithm developed to optimize continuous non-linear functions [10,26]; however this algorithm cannot be used to solve discrete
problems directly. In this study, a DBA is designed based on origi-

0 0
A = B 2
0
0
1
C, A is the flow Matrix
0
nal BA with the aim to solve discrete combinatorial problems as QAP typical case. In order to apply DBA to QAP, there are some modifications of fundamental equations: the first modification concerns position and velocity representation; the second modification involves position-updating equation.




Fig. 4. The best solution found of char25a, nug30, tai20a, sko42, wil50 and sko81 when ri and Ai are varying between 0 and 1.




Fig. 5. The best solution found of chr25a, nug30, tai20a, sko42, wil50 and sko81 when ri and Ai are equal to 0.5.



In addition, for combinatorial problems, some neighborhood
search methods are always used to enhance the quality of the solution. In this paper, the 2-exchange neighborhood function
In the symmetric case, the formula (8) is simpler and can rewrite as follow:
n

is a suitable neighborhood search method for QAPs. The details of this function will be presented in the following
subsection.
Dc(p, i, j)=  X
k=1,k–i,j
' — a' )(bp(j)p(k) — bp(i)p(k))	(9)

where  A'= (a' )	/a' = aij + aji, i, j = 1, 2, .. . , n, i – j, a' = aii, i = 1,
ij n×n  ij	ii

The 2-exchange neighborhood

In the context of QAP, we recall that the aim is to find a permu- tation p of n elements that minimizes Eq. (7), where p ∈ P. The 2- exchange neighborhood p' is obtained by the set of permutations which can be reached by applying the following pairwise exchang-
ing neighborhood function N2 :  → 2Q that defines for each
p ∈  a set of neighboring solutions of p, N2(p)= {p'|p' ∈  ,
/(p, p') = 2} where /(p, p') is the Hamming distance between per- mutations p and p'. The neighboring permutation (solution) p' ∈ N2(p) is obtained from p by applying the swapping move v(p, i, j) :  ×N × N →  , between the ith and jth element in the
current  solution  p,  that  means  p'(i) = p(j),  p'(j) = p(i),
p'(k) = p(k), k = 1, 2 .. . , n, k – i, k – j, and we note p' = p⊕
v(p, i, j). The criterion to select a pair of exchanging elements from
all possible pairs equals n(n—1) is calculated by the following formula:
Dc (p, i, j) = (aii — ajj )(bp(j)p(j) — bp(i)p(j))+ (aij — aji)(bp(j)p(i) — bp(i)p(j))
n
2, ... n is the new symmetric flow matrix if A is asymmetric flow
matrix (for more details see [51]).
The outline of the local search algorithm used in this paper is shown in Algorithm 2.

Algorithm 2: Pseudo-code of local search algorithm


Procedure local_search
repeat
Generate a neighboring solution p' ∈ N2(p);
if (C(p') < C(p))
p = p';
end if
until (6p' ∈ N2(p), C(p') P C(p))
end Procedure



Position and velocity equations
In the basic BA developed by Yang [10], the movement of each virtual bat in n-dimensional search space (n is the size of problem)

+ X
k=1,k–i,j
(aik — ajk )(bp(j)p(k) — bp(i)p(k))
is characterized by two vectors; position and velocity. During the search process, the bats tend to fly towards the best position (solu-
tion) found since the first iteration by updating their velocities vt

+ (aki — akj )(bp(k)p(j) — bp(k)p(i))	(8)
where aii, bii = 0, i = 1, 2, .. ., n.
i
and positions xt at time step t. So, in the case of QAP, the solution of n-assignments found by the ith bat is represented by n-



dimensional vector xi = (xi1, xi2, .. . , xin). The velocity vi is viewed as a set of permutations pi = {p1, p2, ... , pn } that allows being close to the global best solution x* = (x*1, x*2, .. . , x*n). The standard position
update  and  velocity  equations  will  be  redefined  as follow:
vt+1 = w(xt, x*, f i)	(10)
In this case, the function w in Eq. (10) is a crossover func- tion with three arguments and returns a set of permutations pt. The frequency f i is an integer (between f min and f max) that denotes the size of segments copied from either x* or xt to the  offspring  (the  proposed  function  is  more  detailed  in
Fig. 3). The function r in Eq. (11) is used to sort the locations

i	i
assigning in xt
while respecting pt
and the template of this

xt+1 = r(xt, vt+1)	(11)	i	i

i	i	i
function is given in Fig. 2.



Table 2
Results of the DBA algorithm for some instances from QAPLIB [59].

The values shown in bold indicate that the optimal solution is reached for each instance.



The crossover operation

The crossover operation was firstly introduced in genetic algo- rithms to produce a new population. The idea behind the crossover is to benefit the best characteristics from each of the parents when producing the new generation. In the literature, there is a variety of crossover operators proposed to solve the quadratic assignment problem such as the ordered crossover (OX) [52], the cycle cross- over (CX) [17], the multiple parent crossover (MPX) [53], the swap path crossover (SPX) [54], the partially mapped crossover (PMX) [55], the cohesive crossover (COHX) [56], the one point crossover (OPX) [57], and the uniform crossover (UX) [58]. In order to increase the diversity of the population and to avoid the premature convergence toward undesirable regions in the search space, we propose some modification of the uniform crossover (UX) [58]. In this paper, the modified uniform crossover (UX) is used to enhance the search strategy of BA. Like the standard crossover (UX) process, the order of scanning each parent is from left to right, and all items assigned to the same position in both parent individuals are copied to this position in the offspring. The unassigned items are grouped
in segments of size f (frequency). The first segment is copied from one of parents to child; the remaining elements (second segment) are copied from the other parent if they are not yet included in the offspring. Otherwise, if there still any unassigned positions in the child, the missing items can be taken from either the first or second parent in such a way that it does not appear twice in the offspring. An example of this crossover process is illustrated in Fig. 3.

Discrete bat algorithm

In DBA, the controlling parameters are initialized as described in Table 1, expected the starting solution xi which is randomly gen- erated for each bat. During the search process, the bats use a mem- ory to communicate the best global solution x⁄ between them. To generate a new solution, every bat adjusts its frequency and updates its current velocity and position (Eqs. (1), (10) and (11)). Then, one solution is selected among the best solutions according to the pulse emission rate ri. Afterwards, the selected solution is locally changed by using Algorithm 2, in a manner that improves the current solution and the best global solution found so far. Then,





Table 3
Comparative results between BeA [24] and DBA for solving some instances from QAPLIB [59].

The values shown in bold indicate that the optimal solution is reached for each instance.




Table 4
Comparative results between MBA [23] and DBA for solving some instances from QAPLIB [59].

The values shown in bold indicate that the optimal solution is reached for each instance.



the fitness of the new solution is evaluated according to Eq. (7) and a random solution is generated. Basing on the acceptance rate cal- culated by the loudness value Ai, the last evaluated solution is accepted, if improves the best global solution. Eventually, the best global solution is communicated to the next generation and the search process is progressed until the maximal number of itera- tions is reached.
The whole DBA in pseudo-code for optimizing the QAP is sum- marized in Algorithm 3.
toward unsuccessful solutions. Based on Fig. 5, the experiments show that DBA can provide good results when the values of pulse emission rate and loudness are between 0.4 and 0.6. In order to fine-tune these two parameters and to achieve the desired perfor- mance, these values are fixed on 0.5.
Further, Table 2 summarizes the numerical results of DBA algo- rithm for 62 instances over 50 independent runs. The first column ‘‘Instance” shows the name of instance. The BKVs indicated in the column two present the best-known solution values reported from

		QAPLIB library and the values ‘‘Best” described in the third column

Algorithm 3: Pseudo-code of discrete bat algorithm
Objective function f(x), x = (x1, .. .,xd)T
Initialize the size of bat population.
Generate a random starting solution xi for each bat.
Initialize the emission rates ri ∈ [0.0, 1.0] and the loud- ness Ai ∈ [0.0, 1.0].
are the optimal values found by DBA over 50 runs. The column ‘‘Worst” denotes the worst solutions found by DBA. The column ‘‘SD” indicates the standard deviation. The remaining columns indicate respectively the following performance measures:

The percentage deviation of the best value found from the best-

Define Pulse frequency f
[1, 2].

min
and f

max
as integers in range
known value over 50 runs is calculated by the following
formula:

while (t < Max number of iterations)
for i = 1 to m
Generate new solution by adjusting frequency,

%dbest =
Cbest — C*
C*

× 100	(12)

and updating velocity and location/solution // Equa- tions (1), (10) and (11)
if (rand > ri)
Select a solution among the best solutions of current iteration
Generate a local solution around the selected best solu- tion by using the local search algorithm.
end if
Evaluate the new solution (fitnessi = C(xi)) according to Equation (7) // xi is current solution
Generate a new solution by flying randomly
if (rand < Ai & fitnessi < C(x⁄)) // x⁄ is global best solution
Accept the new solution
Increase ri and reduce Ai // Equations (5) and (6)
end if
end for
Rank the bats and find the current global best x⁄
end while
Post process results and visualization
where Cbest is the best objective value found over 50 runs and C*
is the best-known value taken from QAPLIB.
The percentage deviation of the average solutions found from the best-known solution value over 50 runs is calculated by the next formula:
%davg = Cavg — C* × 100	(13)
*
where Cavg is the average objective function value over 50 runs.
The last column ‘‘tavg (s)” is the average elapsed time in second during 50 runs.
Furthermore, Tables 3–6 report the results of the comparison between DBA and five other algorithms as extracted from their original papers. Besides the previous mentioned performance mea- sures, in Table 3, the columns ‘‘Ibest” indicate the number of itera- tions required to find the best solutions. The columns ‘‘t(ms)” present the computational time to reach the best solution expressed in milliseconds (ms). In Table 4, the columns ‘‘Average” denote the average cost of solutions found. In Table 6, the columns

		‘‘Mean” represent the mean of solution cost (expressed as the aver-
age percentage deviation, which is the percentage by which the cost exceeds the BKV). Table 7 shows the average rank of each over

Computational results and discussion

Results

The whole algorithmic approach was implemented in MATLAB R2010a and simulated with Intel(R) Core(TM) 2 Duo CPU T4300@
2.1GHZ 800 MHz and 2.00 GB of RAM. The test instances were taken from the standard QAPLIB [59]. The size of the tested instances ranges from 12 to 100 and it is mentioned in the name of instance. For example, in the instance named nug30, the number 30 represents the number of provided facilities. Table 1 summa- rizes the parameters values of DBA algorithm. The choice of these parameters values is based on preliminary experiments by using a subset of QAPLIB benchmarks.
Furthermore, the pulse emission rate and loudness are two important parameters of DBA as well as standard BA and adjusting suitable values have a crucial effect on the quality of solutions. Fig. 4 indicates the best solution found of chr25a, nug30, tai20a, sko42, wil50 and sko81 when ri and Ai are varying between 0 and 1. Fig. 5 presents the best solution found of chr25a, nug30, tai20a, sko42, wil50 and sko81 when ri and Ai are equal to 0.5. The pre-experiments in Fig. 4 show that a small loudness value likewise a large emission rate value gives rise to quick convergence
the common problem instances for each pairing (16 problem instances for DBA vs SCX, 18 problem instances for DBA vs MBA,
23 problem instances for DBA vs HAS-QAP and 44 problem instances for DBA vs HPSO).
To determine significant differences between DBA and other algorithms, we applied the Wilcoxon signed rank test [60] (at the a = 0.05 level) as a popular nonparametric statistical test. In this
comparison, we used DBA as the control method and we considered the Holm-Bonferroni step-down method [61] to control the family- wise error rate [62], at the a = 0.05 level. The Holm-Bonferroni step- down procedure is similar to the classical Bonferroni correction for
multiple hypothesis testing. To describe Holm-Bonferroni step- down procedure, let p1 6 p2 6 ... 6 pm be the ordered p values of the m individual tests and H1, H2, ... , Hm the corresponding ordered
hypotheses. Let k the smallest index that verifies
p >   a  	(14)
k  m + 1 — k
If no such k exists then reject all the null hypotheses, otherwise the null hypotheses H1, ... , Hk—1 are rejected and the null hypotheses Hk, ... , Hm are not rejected. This method retains control the family-
wise error rate at a [62]. These results are presented in Table 8 and
denote that there is a significant difference in all three cases.


Table 5
Comparative results between SCX [25], HAS-QAP [16] and DBA for solving some instances from QAPLIB [59].

The values shown in bold indicate that the optimal solution is reached for each instance.




Table 6
Comparative results between HPSO [22] and DBA for solving some instances from QAPLIB [59].

The values shown in bold indicate that the optimal solution is reached for each instance.


The p-values smaller than, or equal to, the corresponding Holm step-down threshold (last column) are statistically significant and interpreted accordingly. The statistical significance results are shown in boldface in ascending order according to p-value. These results reveal that the null hypothesis should be rejected in all three cases.

Discussion of results

As it can be observed from Table 2, the best-known solution has
been found about 70% from all tested instances and nearly 89% of the values %dbest are less than 0.5%. In addition, the average devia-
tion rate from best solutions of 0.00% value shows that the solu- tions found over 50 runs are similar to the best-known solutions. Therefore, we can discern from these experimental results that DBA is an efficient algorithm for solving easy instances likewise hard instances of QAP problem in a reasonable time.
For the compared instances in Table 3, DBA can reach the BKV for 14 out of the 16 cases with an average deviation of the best value found of 0.14; however, BeA only achieves the BKV for 8 instances over 16 tested instances with an average deviation of the best value found of 1.67. Another interesting result is that the number of iterations spend to find the best solution in BeA algorithm is significantly more than DBA, which increases the com-



Table 7
Comparison of average ranking and average computing time of five algorithms.

The lowest value is shown in boldface.




Table 8
Results of Wilcoxon signed-rank tests (at the a = 0.05 level), with the Holm Bonferroni step-down procedure used to control the family-wise error rate.




puting time for BeA. It is clear from comparison that the proposed DBA is superior to BeA in terms of solutions quality and computa- tional complexity. According to the results displayed in Table 4, we can observe that DBA achieves the optimal solution for all instances with higher success rate of 100%. From Table 7, we observe that DBA has an average rank of 0.00, whereas MBA has an average rank of 1.27. These results show the superiority of the proposed DBA in terms of the solution quality compared to MBA. From Tables 5, 7, and 8, we can make the following observations. For the first sixteen problems, DBA finds the best-known solu- tion for four instances with averages rank of 0.99 and computing time of 107.89 versus averages rank of 5.40 and computing time of 32 for SCX. Comparing the two algorithms, DBA statistically out- performs SCX (with p-value < 0.05) over 16 instances. Comparing DBA to HAS-QAP, we observe that HAS-QAP shows best results than both DBA, but it requires higher computing budgets. How- ever, the difference between the two methods is statistically signif- icant. From these results, it can be inferred that DBA offers a good compromise between the execution time and the solution quality
and it does remain very competitive with SCX and HAS-QAP.
From Tables 6, 7, we observe that DBA is able to attain the BKV for 17 out of 44 instances with an average rank of 0.71, whereas HPSO has an average rank of 1.18 with no BKV reached. In addition, Table 8 indicates that the difference between DBA and HPSO is sta- tistically significant. From these results, we find that DBA is most effective approaches to solve QAP. We conclude that DBA competes favorably with HPSO on the most instances.

Conclusions

In this paper, a swarm-intelligence algorithm, so-called Bat Algorithm (BA), was introduced to solve the Quadratic Assignment Problem (QAP). More specifically, a discrete version of BA was pro- posed, namely Discrete Bat Algorithm (DBA) for QAP. One of the main contributions of this paper was to introduce some new mod- ifications in the original version of BA. These modifications regards position representation and its update equation, and velocity rep- resentation and its update equation. Besides that, a modified uni- form crossover was incorporated with BA to enhance the search strategy and the 2-exchange neighborhood mechanism was used to improve local search capability. The proposed algorithm was applied on a set of benchmark instances taken from QAPLIB library. It has been shown that the effectiveness as well as performance of DBA has reached that of the other techniques such as BeA, MBA, SCX, HAS-QAP and HPSO in terms of the quality of solutions and
the computing time. Our future research will be mainly focused on the application of DBA algorithm in other combinatorial opti- mization problems such as scheduling models, logistic network models, vehicle routing models, etc. We will also try to enhance the current algorithm in order to obtain even better results by involving hybrid approaches and by using other discretization methods to switch between the continuous and the discrete search space.

References

Papadimitriou CH, Steiglitz K. Combinatorial optimization: algorithms and complexity. Courier Dover Publications; 1998.
Wong W. Matrix representation and gradient flows for NP-hard problems. J Optim Theory Appl 1995;87:197–220.
Koziel S, Yang X-S. Computational optimization, methods and algorithms. Springer; 2011.
Fister Jr. I, Yang X-S, Fister I, Brest J, Fister D. A brief review of nature-inspired algorithms for optimization, arXiv preprint arXiv:1307.4186; 2013.
Cagnina LC, Esquivel SC, Coello CAC. Solving engineering optimization problems with the simple constrained particle swarm optimizer. Informatica 2008;32.
Kumar S, Kumari R, Sharma VK. Fitness based position update in spider monkey optimization algorithm. Proc Comput Sci 2015;62:442–9.
Gandomi AH, Yang X-S, Alavi AH. Cuckoo search algorithm: a metaheuristic approach to solve structural optimization problems. Eng Comput 2013;29:17–35.
Lucˇic´ P, Teodorovic´ D. Computing with bees: attacking complex transportation engineering problems. Int J Artif Intell Tools 2003;12:375–94.
Huang M, Yuan J, Xiao J. An adapted firefly algorithm for product development project scheduling with fuzzy activity duration. Math Problems Eng 2015;2015.
Yang X-S. A new metaheuristic bat-inspired algorithm. In: Nature inspired cooperative strategies for optimization (NICSO 2010). Springer; 2010. p. 65–74.
Yılmaz S, Küçüksille EU. A new modification approach on bat algorithm for solving optimization problems. Appl Soft Comput 2015;28:259–75.
Sahni S, Gonzalez T. P-complete approximation problems. J ACM (JACM) 1976;23:555–65.
Wilhelm MR, Ward TL. Solving quadratic assignment problems by ‘simulated annealing’. IIE Trans 1987;19:107–19.
Taillard E. Robust taboo search for the quadratic assignment problem. Parallel Comput 1991;17:443–55.
Bousono-Calzon C, Manning M. The hopfield neural network applied to the quadratic assignment problem. Neural Comput Appl 1995;3:64–72.
Gambardella LM, Taillard E, Dorigo M. Ant colonies for the quadratic assignment problem. J Operational Res Soc 1999:167–76.
Merz P, Freisleben B. Fitness landscape analysis and memetic algorithms for the quadratic assignment problem. Evolutionary Comput, IEEE Trans 2000;4:337–52.
Misevicius A. An improved hybrid genetic algorithm: new results for the quadratic assignment problem. Knowl-Based Syst 2004;17:65–73.
Stützle T. Iterated local search for the quadratic assignment problem. Eur J Oper Res 2006;174:1519–39.
Tseng L-Y, Liang S-C. A hybrid metaheuristic for the quadratic assignment problem. Comput Optim Appl 2006;34:85–113.
Ahuja RK, Jha KC, Orlin JB, Sharma D. Very large-scale neighborhood search for the quadratic assignment problem. Informs J Comput 2007;19:646–57.
Helal AM, Abdelbar AM. Incorporating domain-specific heuristics in a particle swarm optimization approach to the quadratic assignment problem. Memetic Comput 2014;6:241–54.
Shukla A. A modified bat algorithm for the quadratic assignment problem. In: Evolutionary computation (CEC), 2015 IEEE congress on. IEEE; 2015. p. 486–90.
Chmiel W, Szwed P. Bees algorithm for the quadratic assignment problem on CUDA platform. Man-machine interactions, vol. 4. Springer; 2016. p. 615–25.
Ahmed Z. A simple genetic algorithm using sequential constructive crossover for the quadratic assignment problem. J Sci Ind Res 2014;73:763–6.
Yang X-S, Gandomi AH. Bat algorithm: a novel approach for global engineering optimization. Eng Comput 2012;29:464–83.
Yang X-S, He X. Bat algorithm: literature review and applications. Int J Bio- Inspired Comput 2013;5:141–9.
Gandomi AH, Yang X-S. Chaotic bat algorithm. J Comput Sci 2014;5:224–32.
Cai X, Wang L, Kang Q, Wu Q. Bat algorithm with Gaussian walk. Int J Bio- inspired Comput 2014;6:166–74.
Khan K, Nikov A, Sahai A. A fuzzy bat clustering method for ergonomic screening of office workplaces. In: Dicheva D, Markov Z, Stefanova E, editors. Third international conference on software, services and semantic technologies S3T 2011. Berlin Heidelberg: Springer; 2011. p. 59–66.
Nguyen T-T, Pan J-S, Dao T-K, Kuo M-Y, Horng M-F. Hybrid bat algorithm with artificial bee colony. In: Pan J-S, Snasel V, Corchado ES, Abraham A, Wang S-L, editors. Intelligent data analysis and its applications, vol. II. Springer International Publishing; 2014. p. 45–55.



Fister I, Fong S, Brest J, Fister I. A novel hybrid self-adaptive bat algorithm. Sci World J 2014;2014.
Mirjalili S, Mirjalili S, Yang X-S. Binary bat algorithm. Neural Comput Appl 2014;25:663–81.
Chen Y-T, Shieh C-S, Horng M-F, Liao B-Y, Pan J-S, Tsai M-T. A guidable bat algorithm based on doppler effect to improve solving efficiency for optimization problems. In: Hwang D, Jung J, Nguyen N-T, editors. Computational collective intelligence. Technologies and Applications, (Springer International Publishing; 2014. p. 373–83.
Nakamura RY, Pereira LA, Costa K, Rodrigues D, Papa JP, Yang X-S, BBA: a binary bat algorithm for feature selection, graphics, patterns and images (SIBGRAPI), 2012 25th SIBGRAPI conference on, (IEEE2012), p. 291–7.
Xie J, Zhou Y, Tang Z. Differential Lévy-flights bat algorithm for minimization makespan in permutation flow shops. In: Huang D-S, Jo K-H, Zhou Y-Q, Han K, editors. Intelligent computing theories and technology. Berlin Heidelberg: Springer; 2013. p. 179–88.
Luo Q, Zhou Y, Xie J, Ma M, Li L. Discrete bat algorithm for optimal problem of permutation flow shop scheduling. Sci World J 2014;2014.
Sabba S, Chikhi S. A discrete binary version of bat algorithm for multidimensional knapsack problem. Int J Bio-Inspired Comput 2014;6:140–52.
Büyüksaatçı S. Bat algorithm application for the single row facility layout problem. In: Yang X-S, editor. Recent advances in swarm intelligence and evolutionary computation. Springer International Publishing; 2015. p. 101–20.
Fister I, Rauter S, Yang X-S, Ljubicˇ K. Planning the sports training sessions with the bat algorithm. Neurocomputing 2015;149:993–1002.
Dekhici L, Belkadi K. A bat algorithm with generalized walk for the two-stage hybrid flow shop problem. Int J Decision Support Syst Technol (IJDSST) 2015;7:1–16.
Hasançebi O, Carbas S. Bat inspired algorithm for discrete size optimization of steel frames. Adv Eng Softw 2014;67:173–85.
Carbas S, Hasancebi O. Optimum design of steel space frames via bat inspired algorithm. In: 10th World congress on structural and multidisciplinary optimization; 2013. p. 1–10.
Hassan EA, Hafez AI, Hassanien AE, Fahmy AA. A discrete bat algorithm for the community  detection  problem.  In:  Hybrid  artificial  intelligent systems. Springer; 2015. p. 188–99.
Saji Y, Riffi ME, Ahiod B. Discrete bat-inspired algorithm for travelling salesman problem, Complex Systems (WCCS). In: 2014 second world conference on; 2014. p. 28–31.
Saji Y, Riffi M. A novel discrete bat algorithm for solving the travelling salesman problem. Neural Comput Appl 2015:1–14.
Koopmans TC, Beckmann M. Assignment problems and the location of economic activities. Econ: J Econ Soc 1957:53–76.
Pardalos PM, Wolkowicz H. Quadratic assignment and related problems: dimacs workshop. American Mathematical Soc.; 1994.
Tosun U, Dokeroglu T, Cosar A. Heuristic algorithms for fragment allocation in a distributed database system. In: Computer and information sciences
III. Springer; 2013. p. 401–8.
Chen J, Xin B, Peng Z, Dou L, Zhang J. Evolutionary decision-makings for the dynamic weapon-target assignment problem. Sci China Ser F: Inf Sci 2009;52:2006–18.
Misevicius A. An implementation of the iterated tabu search algorithm for the quadratic assignment problem. OR Spectrum 2012;34:665–90.
Vazquez M, Whitley LD. A hybrid genetic algorithm for the quadratic assignment problem, GECCO, (Citeseer 2000), p. 135–42.
Misevicˇius A, Rubliauskas D. Performance of hybrid genetic algorithm for the grey pattern problem. Inf Technol Control 2005;34:15–24.
Ahuja RK, Orlin JB, Tiwari A. A greedy genetic algorithm for the quadratic assignment problem. Comput Oper Res 2000;27:917–34.
Migkikh VV, Topchy AP, Kureichik VM, Tetelbaum AY, Combined genetic and local search algorithm for the quadratic assignment problem. In: Proceedings of IC on evolutionary computation and its applications, EvCA, vol. 96; 1996. p. 335–41.
Drezner Z. A new genetic algorithm for the quadratic assignment problem. INFORMS J Comput 2003;15:320–30.
Lim M, Yuan Y, Omatu S. Efficient genetic algorithms using simple genes exchange local search policy for the quadratic assignment problem. Comput Optim Appl 2000;15:249–68.
Tate DM, Smith AE. A genetic approach to the quadratic assignment problem. Comput Oper Res 1995;22:73–83.
Burkard RE, Karisch SE, Rendl F. QAPLIB – a quadratic assignment problem library. J Global Optim 1997;10:391–403.
Wilcoxon F. Individual comparisons by ranking methods. Biometrics Bull 1945;1:80–3.
Holm S. A simple sequentially rejective multiple test procedure. Scand J Stat 1979:65–70.
Derrac J, García S, Molina D, Herrera F. A practical tutorial on the use of nonparametric statistical tests as a methodology for comparing evolutionary and swarm intelligence algorithms. Swarm Evolutionary Comput 2011;1:3–18.
