Electronic Notes in Theoretical Computer Science 122 (2005) 211–228 
www.elsevier.com/locate/entcs


Weak Bisimulation for Action-Type Coalgebras
(Extended Abstract)

Ana Sokolova1 ,2
Department of Mathematics and Computer Science Eindhoven University of Technology, TU/e Eindhoven, The Netherlands

Erik de Vink3
Department of Mathematics and Computer Science Eindhoven University of Technology, TU/e
LIACS Leiden University Eindhoven, Leiden, The Netherlands

Harald Woracek4
Department of Analysis and Scientiﬁc Computing TU Vienna
Vienna, Austria

Abstract
We propose a coalgebraic definition of weak bisimulation for a class of coalgebras obtained from bifunctors over the category Set. Weak bisimilarity for a system is obtained as strong bisimilarity of a transformed system. The transformation consists of two steps: First, the behaviour on actions is expanded to behaviour on finite words. Second, the behaviour on finite words is taken modulo the hiding of invisible actions, yielding behaviour on equivalence classes of words closed under silent steps. The coalgebraic definition is justified by two correspondence results, one for the classical notion of weak bisimulation of Milner and another for the notion of weak bisimulation for generative probabilistic transition systems as advocated by Baier and Hermanns.
Keywords: coalgebra, bisimulation, weak bisimulation, labeled transition system, generative probabilistic transition system



1571-0661 © 2005 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2004.06.050

Introduction
In this paper we present a definition of weak bisimulation for action-type systems. A typical example of an action-type system is the familiar labelled transition system (LTS) (see, e.g., [20,18]), but also many types of probabilistic systems (see, e.g., [16,27,11,3,26]) fall into this class. In order to emphasize the role of the actions we view coalgebras as arising from bifunctors over the category Set.
In the verification of properties of a system, strong bisimilarity is often too strong an equivalence. Weak bisimilarity [17,18] is a looser equivalence on systems that abstracts away from invisible steps. It is well-known that, in the concrete case of weak bisimilarity for a labelled transition system S, amounts to strong bisimilarity on the ‘double-arrowed’ system S '' induced by S. We exploit this idea in formulating a general coalgebraic definition of weak bisimilation. Our approach, given a system S, consists of two stages:
First, we define a ‘∗-extension’ S' of S which is a system with the same state set as S, but with action set A∗, the set of all words over A. The system S' captures the behaviour of S on finite traces.
Next, we fix a set of invisible actions τ ⊆ A and transform S' into a ‘weak- τ -extension’ S'' which abstracts away from τ steps. Then we define weak bisimilarity on S as strong bisimilarity on the weak-τ -extension S ''.
In the context of concrete probabilistic transition systems, there have been several proposals for a notion of weak bisimulation, often relying on the par- ticular model under consideration. Segala [27,26] proposed four notions of weak relations for his model of simple probabilistic automata. Baier and Her- manns [3,2,4] have given a rather appealing definition of weak bisimulation for the case of generative probabilistic systems. Philippou, Lee and Sokolsky [21] studied weak bisimulation in the setting of the alternating model [14]. This work was extended to infinite systems by Desharnais, Gupta, Jagadeesan and Panangaden [9]. Desharnais et al. also provided a metric analogue of weak bisimulation [8].
Here, we work in a coalgebraic framework and use the general coalge- braic apparatus of bisimulation [1,15,25]. For weak bisimulation in this set- ting, there has been early work by Rutten on weak bisimulation for while programs [24] succeeded by a syntactic approach to weak bisimulation by Rothe [23]. In the latter paper, weak bisimulation for a particular class of

1 Research supported by the PROGRESS project ESS.5202, (a)MaPAoTS
2 Email: a.sokolova@tue.nl
3 Email: evink@win.tue.nl
4 Email: harald.woracek@tuwien.ac.at


coalgebras was obtained by transforming a coalgebra into an LTS and mak- ing use of Milner’s weak bisimulation there. This approach also allowed for a definition of weak homomorphisms and weak simulation relations. Later, in the work of Rothe and Maˇsulovi´c [22] a complex, but interesting coalgebraic theory was developed leading to a notion of weak bisimulation for functors that weakly preserve pullbacks. They also consider a chosen ‘observer’ and hidden parts of a functor. However, in the case of probabilistic and similar systems, the definition of weak bisimulation does not lead to intuitive results and can not be related to the concrete notions of weak bisimulation mentioned above. The so-called skip relations used in [22] seem to be the major obstacle, as it remains unclear how quantitative information can be incorporated their framework.
The two-phase approach of defining weak bisimilarity advocated in the present paper, amplifying Milner’s original idea, comes rather natural. In the category theoretical setting it has been suggested in the context of an open map treatment of weak bisimulation on presheaf models in [10]. However, the approach taken in this paper yields a rather basic and intuitive notion of weak bisimulation. Moreover, not only for the case of labelled transition systems, but also for probabilistic systems the present coalgebraic proposal corresponds to the concrete definitions. Despite the appeal of the coalgebraic definition for weak bisimulation, proofs of correspondence results may vary from straightfor- ward to technically involved. For example, the relevant theorem for labelled transition systems takes less than a page in full in the technical report [29], whereas proving the correspondence result for generative probabilistic systems takes around 20 pages (additional machinery included).
The paper is organized as follows: In Section 2 we provide the basic defini- tions and properties of the systems under consideration. Section 3 presents the coalgebraic definition of weak bisimulation. We show that our notion of weak bisimilarity leads to Milner’s weak bisimilarity for LTSs in Section 4. Section 5 is devoted to a correspondence result for the class of generative systems with respect to the definition of weak bisimilarity of Baier and Hermanns, on the one hand, and our coalgebraic definition, on the other hand. Finally, Section 6 wraps up with some concluding remarks.

Systems and bisimilarity
From a coalgebraic point of view [15,12,25], a system is a coalgebra of a given endofunctor, often on the category Set. However, for our approach to defining weak bisimilarity, it is essential to explicitly specify the set of executable actions. Therefore, we shall start from a bifunctor instead of an endofunctor

on Set, cf. [5].
A bifunctor is any functor F : Set × Set → Set. If F is a bifunctor and A
is a fixed set, then the Set endofunctor F A is defined by
F AS = F(A, S)	and	F Af = F⟨idA,f ⟩,	(1) for a set S and a mapping f : S → T .
For further reference we state the following simple property.
Proposition 2.1 Let F be a bifunctor, A1, A2 two sets and f : A1 → A2 a
mapping. Then f induces a natural transformation ηf : F A ⇒F A given by
2
ηf = F⟨f, idS⟩.	 
For a bifunctor F, sets S and A and a mapping α : S → F A(S), the triple
⟨S, A, α⟩ is called an F A coalgebra. A homomorphism between two FA coalge- bras ⟨S, A, α⟩ and ⟨T, A, β⟩ is a function h : S → T satisfying FAh ◦ α = β ◦ h. The FA coalgebras together with their homomorphisms form a category, which we denote by CoalgA.
Definition 2.2 Let ⟨S, A, α⟩ and ⟨T, A, β⟩ be two FA coalgebras. A bisimu- lation between ⟨S, A, α⟩ and ⟨T, A, β⟩ is a relation R ⊆ S × T , such that there exists a mapping γ : R → FAR making the projections π1 and π2 coalgebra homomorphisms between the respective coalgebras,

S ¸,π1
α
J 

R 
∃γ 
J 
π2	 T 
β
J 

FAS ¸,  FAR
A

FAπ2
 F T

i.e. making the two squares in the above diagram commute. Two states s ∈ S and t ∈ T are bisimilar, notation s ∼ t, if they are related by some bisimulation between ⟨S, A, α⟩ and ⟨T, A, β⟩.
Let FA and GA be two Set functors, and let η : F A ⇒ GA be a natural transfor- mation. The natural transformation η induces a functor T : CoalgA → CoalgA
F	G
given by
T (⟨S, A, α⟩)= ⟨S, A, ηS ◦ α⟩ and T (f )= f.	(2)
Functors induced by natural transformations preserve homomorphisms (cf. [25]) and thus preserve bisimulation relations and bisimilarity.
Next, we present two basic types of systems, labelled transition systems and generative systems, which will be the leading examples in the sequel. We give their concrete definitions first, as well as their corresponding concrete definitions of bisimulation relations, cf. [17,18,16,11].

A labelled transition system, or LTS for short, is a triple ⟨S, A, →⟩ where
S is the set of states, A is the set of actions and → ⊆ S × A × S is the
transition relation. As usual, we denote s →a s' whenever ⟨s, a, s'⟩∈ → .
Definition 2.3 Let ⟨S, A, →⟩ be an LTS. An equivalence relation R ⊆ S × S is a strong bisimulation on ⟨S, A, →⟩ if and only if, for every pair ⟨s, t⟩ ∈ R and all a ∈ A, it holds that


s →a
s' =⇒ ∃t' ∈ S : t →a
t' ∧ ⟨s', t'⟩∈ R.

Two states s and t are called bisimilar if and only if they are related by some bisimulation relation. Notation: s ∼l t.
When replacing the transition relation of an LTS by a ‘probabilistic transition relation’, the so-called generative probabilistic systems are obtained.
Definition 2.4 A generative probabilistic system is a triple ⟨S, A, P⟩ where S and A are sets and the mapping P: : S × A × S → [0, 1] has the property that, for all s ∈ S, it holds that

Σ

a∈A, s'∈S

P(s, a, s') ∈ {0, 1}.	(3)

Again, we refer to S as the set of states and to A as the set of actions of the system. P is called the probabilistic transition relation. Condition (3) states that, for all s ∈ S, P(s, , ) is either a probability distribution over A × S or P(s, , ) ≡ 0, i.e s is a terminating state. As usual, we write s a[p] s' whenever
P(s, a, s')= p, and s →a s' for P(s, a, s') > 0.
In order to clarify condition (3), let us recall that the sum of an arbitrary family {xi | i ∈ I} of non-negative real numbers is defined as
Σ xi = sup{ Σ xi | J ⊆ I, J finite }.
i∈I	i∈J
Note that, if	i∈I xi < ∞, then we also have that the set { xi | i ∈ I, xi /=0 } is finite or countably infinite.
Definition 2.5 Let ⟨S, A, P⟩ be a generative system. An equivalence relation
R ⊆ S × S is a (strong) bisimulation on ⟨S, A, P⟩ if and only if, for every pair
⟨s, t⟩∈ R, all a ∈ A and all equivalence classes C ∈ S/R, it holds that
P(s, a, C)= P(t, a, C).


Here we have put P(s, a, C)=  s'∈C P(s, a, s'). Two states s and t are bisim- ilar if and only if they are related by some bisimulation relation. Notation: s ∼g t.
Let us now switch to the coalgebraic perspective. It is well-known that the LTSs can be viewed as coalgebras corresponding to the bifunctor
L = P(Id × Id).

Namely, if ⟨S, A, →⟩ is an LTS, then ⟨S, A, α⟩, where α : S → LA(S) is given by

⟨a, s'⟩∈ α(s) ⇐⇒ s →a
s',

is an LA coalgebra, and vice-versa. Also, the generative systems can be con- sidered as coalgebras of the bifunctor
G = D(Id × Id)+ 1.


Here, D denotes the distribution functor on Set, that is,
DX = { µ : X → [0, 1] | Σ µ(x)= 1 } and (Df )(µ)(y)= Σ


µ(x)

x∈X	f (x)=y
for a set X and a mapping f : X → Y (and µ ∈ DX, y ∈ Y ).
If ⟨S, A, P ⟩ is a generative system, then ⟨S, A, α⟩ is a G A coalgebra where
α : S → GA(S) is given by
α(s)(a, s')= P (s, a, s'),
and vice-versa. Here, the singleton set 1 is interpreted as the set containing the zero-function on A × S. Note that α(s) is the zero-function if and only if s is a terminating state.
The concrete notion of bisimilarity for LTSs and generative systems and the respective coalgebraic definitions coincide. For the case of LTSs a direct proof can be found in [25], for example. For generative systems this fact goes back to [30] where Markov chains were considered, and was treated in [6] for generative systems with finite support.
Here, we describe a general procedure to obtain coincidence results of this kind. It applies to LTSs as well as to generative systems in their full generality. Additionally, we will apply the method for obtaining a concrete characteriza- tion, Lemma 2.12, of bisimilarity for a functor discussed in Section 5.


Definition 2.6 Let R ⊆ S × T be a relation, and F a Set functor. The relation ≡F,R ⊆ FS × FT , defined by
x ≡F,R y ⇐⇒ ∃z ∈ FR : F π1(z)= x, F π2(z)= y, for x ∈ S, y ∈ T , is called the lifting of R with respect to F. The following lemma is immediate from Definition 2.2.
Lemma 2.7 A relation R ⊆ S × T is a bisimulation for the F A systems
⟨S, A, α⟩ and ⟨T, A, β⟩ if and only if ⟨s, t⟩∈ R =⇒ α(s) ≡FA,R β(t).	 
Note that the right-hand side of the implication ⟨s, t⟩ ∈ R =⇒ α(s) ≡FA,R
β(t) is, in concrete cases, commonly referred to as transfer condition.
In the remainder of this section we gather some results related to the weak preservation of pullbacks. A functor is said to weakly preserve total pullbacks if it transforms any pullback diagram with epi legs into a weak pullback dia- gram. The restriction to pullbacks with epi legs, rather than arbitrary ones, is a novel technicality, that is needed below.
Lemma 2.8 If the functor F weakly preserves total pullbacks and R is an equivalence on S, then the lifting ≡F,R of R with respect to F is the pullback in Set of the cospan

FS  Fc F (S/R) ¸F c,  FS
(4)

where c : S → S/R is the canonical morphism that maps each element to its equivalence class.	 
Suppose that a functor F weakly preserves total pullbacks and assume that R is an equivalence bisimulation on S, i.e., R is both an equivalence relation and a bisimulation on S, such that ⟨s, t⟩∈ R. The pullback in Set of the cospan (4) is the set { ⟨x, y⟩ | Fc(x) = F c(y) }. By Lemma 2.8 this set coincides with the lifted relation ≡F,R. Thus x ≡F,R y ⇐⇒ Fc(x) = F c(y). Therefore, we obtain the transfer condition for the particular notion of bisimulation if we succeed in expressing concretely (Fc ◦ α)(s) = (Fc ◦ α)(t) in terms of the representation of α(s) and α(t).
For example, consider the LTS functor LA, which preserves weak pullbacks. For X ∈ LA(S), i.e. X ⊆ A × S, we have LA(c)(X) = P⟨idA, c⟩(X) =
⟨idA, c⟩(X) = {⟨a, c(s)⟩ | ⟨a, s⟩ ∈ X}. Using Lemma 2.7 we get that an equivalence R ⊆ S × S is a coalgebraic bisimulation for an LTS ⟨S, A, α⟩ if and only if
⟨s, t⟩∈ R =⇒ { ⟨a, c(s')⟩| ⟨a, s'⟩∈ α(s) } = { ⟨a, c(t')⟩| ⟨a, t'⟩∈ α(t) }



or equivalently,
⟨s, t⟩∈ R =⇒ ( s →a


s' =⇒ ∃t' ∈ S : t →a


t' ∧ ⟨s', t'⟩∈ R ).

Thus, we have obtained that an equivalence relation R is an coalgebraic bisim- ulation with respect to LA in the sense of Definition 2.2 if and only if it is a concrete bisimulation in the sense of Definition 2.3.
Often preservation of weak pullbacks is required for the functors to be ‘well- behaved’, for example, in order that bisimilarity is transivtive. It can easily be seen that the weaker condition of weakly preserving total pullbacks suffices for bisimilarity to be an equivalence already. We need to relax the condition of preservation of weak pullbacks, since we will need a characterization of bisimulation for a functor that weakly preserves total pullbacks, but does not preserve weak pullbacks.
Next, we focus on the weak pullback preservation of the functor GA. For the functor defining generative systems with finite support weak pullback preser- vation was proven by De Vink and Rutten [30], using the graph theoretical max-flow min-cut theorem, and by Moss [19], using an elementary matrix fill- in property. We follow the latter approach for arbitrary, infinite, matrices here.
Lemma 2.9 The functor D preserves weak pullbacks.	 
The proof of Lemma 2.9 relies on the following ‘fill-in’ property, the proof of which can be found in [29].
Lemma 2.10 Let C and D be sets and let φ : C → [0, 1] and ψ : D → [0, 1]
be such that
Σ φ(x)= Σ ψ(y) < ∞.	(5)
x∈C	y∈D
Then there exists a function µ : C × D → [0, 1] such that
Σ µ(x0, y)= φ(x0)	and	Σ µ(x, y0)= ψ(y0)	(6)
y∈D	x∈C
for any x0 ∈ C and any y0 ∈ D.	 
Using Lemma 2.8, it can be shown that an equivalence relation R on a set S is a coalgebraic bisimulation for the generative system ⟨S, A, α⟩ with respect to the functor GA if and only if it is a concrete bisimulation according to Definition 2.5.
For our treatment of weak probabilistic bisimulation, we need to consider

one more type of systems. Let G∗ be the bifunctor defined by
G∗(A, S)= P(A) × P(S) → [0, 1]


for sets S and A, and,

G∗f (ν)= ν ◦ ⟨f −1,f −1⟩.

1	2
for a morphism f = ⟨f1, f2⟩ : A × S → B × T (with ν ∈ G∗(A, S)). Consider
the Set functor G∗ corresponding to G∗. Then clearly, G∗ (S) = P(A) ×
P(S) → [0, 1] and for a mapping f : S → T , G∗ f (ν)= ν ◦ ⟨idA,f −1⟩. We seek to characterize equivalence bisimulations for this functor. In order to apply Lemma 2.8 we need the following property.

Lemma 2.11 The functor G∗
weakly preserves total pullbacks.	 

Remarkably, G∗
does not preserve weak pullbacks: Choose a set X with |X|≥ 

3. Fix x  ∈ X. Let Z = {1, 2, 3} and consider the cospan X   f  Z ¸,g	X
for the maps f, g : X → Z given by

f (x)= ⎧⎨ 2	x = x0
⎩ 1	otherwise
and	g(x)= ⎧⎨ 2	x = x0
⎩ 3	otherwise.


The Set pullback of this cospan is {⟨x0, x0⟩}, and it is not transformed into a weak pullback by G∗ .
Let R be an equivalence relation on a set S. A subset M ⊆ S is an R- saturated set if for all s ∈ M the whole equivalence class of s is contained in M . We use Sat(R) to denote the set of all R-saturated subsets of S. Actually, M is a saturated set if and only if M = ∪i∈ICi for a collection {Ci}i∈I in S/R. Hence, there is a one-to-one correspondence between R-saturated sets and elements of P(S/R).

∗	G∗ c ∗ 
G∗ c	∗

Now, consider the pullback P of the cospan GAS
We have
⟨µ, ν⟩∈ P ⇐⇒ G∗ c(µ)= G∗ c(ν)
G (S/R) ¸A ,  G
AS .

A	A
⇐⇒ µ ◦ ⟨idA, c−1⟩ = ν ◦ ⟨idA, c−1⟩
⇐⇒ ∀A' ⊆ A, ∀M ⊆ S/R : µ(A', c−1(M )) = ν(A', c−1(M ))
⇐⇒ ∀A' ⊆ A, ∀M ∈ Sat(R): µ(A',M )= ν(A',M )
since c−1 : P(S/R) → Sat(R) is a bijection. Hence, we have shown the follow- ing characterization.



Lemma 2.12 An equivalence relation R is a bisimulation for the G∗
system

⟨S, A, α⟩ if and only if ⟨s, t⟩∈ R =⇒ ∀A' ⊆ A, ∀M ∈ Sat(R): α(s)(A',M )= 
α(t)(A',M ).

A coalgebraic definition of weak bisimulation
In this section we present a general definition of weak bisimulation for action type systems. Our definition has been inspired by the definitions of weak bisimulation for concrete systems. Starting point is the idea that a weak bisimulation for a given system arises as strong bisimulation for a system obtained from the original one.
The definition of weak bisimulation consists of two phases. First we define a so-called ∗-extended system, that captures the behaviour of the original system for words in A∗ instead of actions from A only. The ∗-extension should emerge from the original system in a faithful way. The second phase considers invisibility. Given a subset τ ⊆ A of invisible actions, we restrict the ∗- extension to visible behaviour only, by defining a so-called weak-τ-extended system. In this system, labels are equivalence classes of words. Then a weak bisimulation relation on the original system is a bisimulation relation on the weak-τ -extension.
Definition 3.1 Let F and G be two bifunctors. Let Φ be a map assigning to every F A coalgebra ⟨S, A, α⟩, a GA∗ system ⟨S, A∗, α'⟩, with the same set of states, such that the following conditions are met:
Φ is injective, i.e. Φ(⟨S, A, α⟩)= Φ(⟨S, A, β⟩) ⇒ α = β;
Φ preserves and reflects bisimilarity, i.e. s ∼ t in the system ⟨S, A, α⟩ if and only if s ∼ t in the system Φ(⟨S, A, α⟩).

Then Φ is called a ∗-translation from F to G, notation Φ: F →∗
that Φ(⟨S, A, α⟩) is a ∗-extension of ⟨S, A, α⟩.
G, and we say

The conditions (i) and (ii) in Definition 3.1 guarantee that the original system is ‘embedded’ in its ∗-extension, cf. [6,28]. At first sight, it may seem counter- intuitive that the ∗-translation yields a system of another type, viz. of the bifunctor G rather than of the bifunctor F. However, this extra freedom is crucial in cases where the starting functor is not expressive enough to allow for a ∗-extension (cf. Section 5 on generative systems).
Previous work, [6, Theorem 3.9] provides a way of obtaining ∗-translations. Namely, if λ : F A ⇒ GA∗ is a natural transformation with injective components and the functor F A preserves weak pullbacks, then the induced functor is a
∗-translation (cf. equation (2)). However, considering ∗-translations emerging


from natural transformations only, is not enough. Actually, the ∗-translations in Section 4 and Section 5 are not emerging from natural transformations.
Next, we address how to deal with a subset τ ⊆ A of invisible actions. The hiding function hτ : A∗ → (A \ τ )∗ is the homomorphism such that hτ (a)= a if a /∈ τ and hτ (a)= ε for a ∈ τ (with ε denoting the empty word). Consider the set Aτ = (A \ τ )∗. According to Proposition 2.1, the hiding function hτ : A∗ → Aτ determines a natural transformation such that
η : GA∗ ⇒ GAτ and ηS = G⟨hτ , idS⟩.

Let the functor Ψ
: CoalgA∗ → CoalgAτ
be induced by the natural transfor-

τ	G	G
mation ητ , i.e. Ψτ (⟨S, A∗, α'⟩) = ⟨S, Aτ , α''⟩ where α'' = ητ ◦ α' and Ψτ f = f
(see equation (2)). The weak τ -translation Wτ for a ∗-translation Φ and set of invisible actions τ is then defined as the composition Wτ = Ψτ ◦ Φ.

Definition 3.2 Let F, G be two bifunctors, Φ: F →∗
G a ∗-translation and

τ ⊆ A. A relation R ⊆ S×T is a weak bisimulation for two F-systems ⟨S, A, α⟩
and ⟨T, A, β⟩ with respect to Φ and τ if and only if R is a bisimulation for the coalgebras Wτ (⟨S, A, α⟩) and Wτ (⟨T, A, β⟩). Two states s ∈ S and t ∈ T are weakly bisimilar with respect to Φ and τ , notation s ≈τ t, if they are related by some weak bisimulation with respect to Φ and τ .
The next proposition states that a weak bisimilarity relation ≈τ in the sense of Definition 3.2 satisfies the basic properties of a weak bisimilarity relation.

Proposition 3.3 Let F , G be two bifunctors, Φ: F →∗
G, ⟨S, A, α⟩ an FA

coalgebra, τ ⊆ A and let ≈τ denote the weak bisimilarity on ⟨S, A, α⟩ with respect to Φ and τ. Then the following hold:
∼ ⊆ ≈τ for any τ ⊆ A, i.e. strong bisimilarity implies weak.
∼ = ≈∅, i.e. strong bisimilarity is weak bisimilarity in absence of invisible actions.
τ1 ⊆ τ2 ⇒ ≈τ1 ⊆ ≈τ2 for any τ1, τ2 ⊆ A, i.e. when more actions are invisible the weak bisimilarity relation gets coarser.	 
It should be noted that in the proof of the above proposition presented in [29] all requirements introduced in Definition 3.1 have been exploited. Therefore, it seems that these requirements are the natural ones. Further justification for Definition 3.2 will be collected in the following two sections where the specific cases for coalgebraic weak bisimulation in labeled transition systems and generative probabilistic transitions systems are explored.


For further reference,  we introduce some more notation.   For any w ∈ Aτ = (A \ τ )∗, we denote Bw = h−1({w}) ⊆ A∗. We refer to the sets Bw as blocks. Note that Bw = τ ∗a1τ ∗ ··· τ ∗akτ ∗ for w = a1 ... ak ∈ (A \ τ )∗.
Traiditionally, the subset of invisible actions is just a singleton consisting of the silent step τ only. However, apart from the mathematical appeal of a general definition that can handle multiple invisible actions, such flexibility is also advantageous, e.g. when dealing with weak bisimulation for Segala-systems (cf. [27,26]).

Weak bisimulation for labelled transition systems
In this section we recast the standard definition of weak bisimulation of Mil- ner [17,18]. We provide a ∗-translation for which the coalgebraic formulation of weak bisimulation coincides with the concrete one.
Definition 4.1 Let ⟨S, A, →⟩ be an LTS. Assume τ ∈ A is an invisible ac- tion. An equivalence relation R ⊆ S × S is a weak bisimulation on ⟨S, A, →⟩ if and only if whenever ⟨s, t⟩∈ R then


s →a
s' =⇒ ∃t' ∈ S : t →τ
∗ ◦ →a
→τ
∗t' ∧ ⟨s', t'⟩∈ R,

for all a ∈ A \ {τ }, and


s →τ
s' =⇒ ∃t' ∈ S : t →τ
∗t' ∧ ⟨s', t'⟩∈ R.

Two states s and t are called weakly bisimilar if and only if they are related by some weak bisimulation relation, notation s ≈l t.
Let L, LA be the functors for LTSs with set of labels A, as introduced in Section 2. The ∗-translation Φ below captures the natural extension of the transition relations from actions to finite strings of actions.
Definition 4.2 Let Φ assign to any LTS, i.e. an LA coalgebra ⟨S, A, α⟩, the LA∗ coalgebra ⟨S, A∗, α'⟩ where, for w = a1 ... ak ∈ A∗, ⟨w, s'⟩ ∈ α'(s) if and only if there exist states s1,... , sk−1  ∈  S  such that

s −a→1
s −a→2
s2 ··· s
k−1
−a→k
s'.

We have the following correspondence result.
Theorem 4.3
The assignment Φ given by Deﬁnition 4.2 is a ∗-translation.


Let ⟨S, A, α⟩ be an LTS. Let τ ∈ A be an invisible action and s, t ∈ S any two states. Then s ≈{τ} t according to Deﬁnition 3.2 with respect to Φ and {τ } if and only if s ≈l t according to Deﬁnition 4.1.	 
The proof of Theorem 4.3 is straightforward and can be found in [29].
Weak bisimulation for generative systems
In this section we deal with generative probabilistic transition systems and their weak bisimilarity. Inspired by the work of Baier and Hermanns [3,2,4], we provide a ∗-translation on which we base a notion of weak bisimulation for generative probabilistic systems. We show that our definition coincides with the definition of Baier and Hermanns. Unlike in the case of LTSs, here the generality of our set-up is necessary as the ∗-translation really yields images outside of the class of generative systems.
Let ⟨S, A, P⟩, be a generative system. A finite path π of ⟨S, A, P⟩ is an

alternating sequence π ≡ s0
−a→1
s −a→2
s2 ··· s
k−1
−a→k
sk such that k ∈ N0,

si ∈ S, aj ∈ A and P(si, ai+1, si+1) > 0. We put length(π) = k, first(π) = 
s0, last(π) = sk, trace(π) = a1a2 ··· ak.	We use ε to denote the empty path starting in s. An infinite path π of ⟨S, A, P⟩ is an alternating sequence
π ≡ s −a→1 slong →a2 s ··· where for all i ≥ 1, P(s ,a	,s	) > 0. The first
1	2	i	i+1	i+1
element of an non-empty path is indicated by first(π). A complete path is
either an infinite path or a finite path ending in a terminating state.
The sets of all (finite or infinite) paths, of all finite paths and of all complete paths will be denoted by Paths, FPaths and CPaths, respectively. Moreover, for s ∈ S, we write
Paths(s)=  π ∈ Paths | first(π)= s}
and similarly, we use FPaths(s) and CPaths(s). The set Paths(s) is partially ordered by the prefix relation “. Note that ε “ π for all π ∈ Paths(s). We stress that for any state s ∈ S, the set FPaths(s) is at most countable. For a finite path π ∈ FPaths(s), we put
π ↑ = { ξ ∈ CPaths(s) | π “ ξ }.
We call π ↑ the cone of complete paths for π. Let
Γ= { π ↑| π ∈ FPaths(s) }
denote the set of all cones starting in s. Note that any two cones π1 ↑ and
π2↑ are either disjoint or one is a subset of the other or vice-versa. From this


and the fact that FPaths(s) is at most countable we see that Γ ∪ {∅} has the properties:
it contains the empty set,
it is closed with respect to intersection,
for any two elements X, Y ∈ Γ ∪ {∅} the difference X \ Y can be written as a countable union of elements of Γ ∪ {∅}.
We define a function Prob : Γ∪{∅} → R by putting Prob(∅) = 0, Prob(ε↑)= 1 and
Prob(π ↑)= P(s, a1, s1) · P(s1, a2, s2)	P(sk−1, ak, sk),

for π = s −a→1
s −a→2
s ··· s	−a→k
sk. Let us remark that the function Prob is

indeed well-defined. This function has the following properties:
Prob(∅)= 0,
Prob(X) ≤ Prob(Y ) whenever X ⊆ Y for X, Y ∈ Γ ∪ {∅},
If X ∈ Γ∪{∅} can be written as a at most countable disjoin union X = ∪nXn
of elements Xn ∈ Γ ∪ {∅} then Prob(X)=	n Prob(Xn).
It follows from [31] 5 that Prob can be uniquely extended to a measure on the σ-algebra generated by Γ ∪ {∅}. Since, by definition, Prob(ε↑) = 1, this is a probability measure.
If Π ⊆ FPaths(s), we denote by Π↑⊆ CPaths(s) the set
Π↑ =   π ↑.
π∈Π
Note that Π↑ belongs to the σ-algebra generated by Γ ∪ {∅}.
The induced measure yields a function Prob : P(FPaths(s)) → R by defin- ing Prob(Π) as the measure of the collection Π↑. This function is, in general, not additive; we only have Prob(Π) ≤ π∈Π Prob({π}). Nevertheless, for sets Π which are minimal in a certain sense, equality still holds. Here, we call
a set Π ⊆ FPaths(s) minimal, notation min(Π), if and only if for any two different π1, π2 ∈ Π we neither have π1 “ π2 nor π2 “ π1. If min(Π), then Prob(Π) =  π∈Π Prob(π ↑). Every set Π↑ can also be generated by a minimal set. For Π ⊆ FPaths(s), let
Π ↓= {π ∈ Π | ∀π' ∈ Π: π' /≺ π}

5 The point of referring to [31] rather than to a more popular texts such as Halmos [13], is that the version of the extension theorem in [31] applies to semi-rings where set differences can be represented as countable unions rather than finite unions of elements of the semi-ring.


then Π↑ = (Π ↓)↑. Finally, let s ∈ S, S' ⊆ S and W ⊆ A∗. We put
s →W S' = { π ∈ FPaths(s) | first(π)= s, last(π) ∈ S' ⊆ S, trace(π) ∈ W ⊆ A∗} ↓,
and write Prob(s, W, S')= Prob(s →W S').
We proceed by presenting the ∗-translation for generative probabilistic systems as caputered by the bifunctor G∗.
Definition 5.1 Let Φg assign to every generative system i.e., to any GA coal- gebra ⟨S, A, α⟩, the G∗ ∗ coalgebra ⟨S, A∗, α'⟩ where for W ⊆ A∗ and S' ⊆ S, α'(s)(W, S')= Prob(s, W, S').
Theorem 5.2 The assignment Φg is a ∗-translation.	 
The proof is provided in [29]. The main difficulty is the preservation of bisim- ulation. For this a detailed analysis is conducted of the collection of paths
of the form s →a1 C →a2 ··· →ak C  with C ,... ,C  equivalence classes of states
1	k	1	k
modulo a bisimulation relation.
In the context of Φg, the weak-τ -system is of the form
Ψτ ◦ Φg(⟨S, A, α⟩)= Ψτ (⟨S, A∗, α'⟩)= ⟨S, Aτ , α''⟩
where α''(s): P(Aτ ) × P(S) → [0, 1] is given by
α''(s)= ητ (α'(s)) = G∗⟨hτ , idS⟩(α'(s)) = α'(s) ◦ ⟨h−1, idS⟩.
S	τ
Hence for X ⊆ Aτ = (A \ τ )∗ and S' ⊆ S, we have that
α''(s)(X, S')= α'(s)(h−1(X), S')= α'(s)(   Bw, S')= Prob(s,   Bw, S').
w∈X	w∈X
Therefore, from Lemma 2.12 we get that an equivalence relation R is a weak- τ -bisimulation with respect to Φg and τ on the generative system ⟨S, A, α⟩ if and only if ⟨s, t⟩ ∈ R implies that, for any collection {Bi}i∈I of blocks and any collection {Cj}j∈J of classes, it holds that
Prob(s,  Bi,  Cj)= Prob(t,  Bi,  Cj).	(7)

i∈I
j∈J
i∈I
j∈J

Note that ∪i∈IBi is a ker(hτ )-saturated set and that ∪j∈J Cj is an R-saturated set.
Next we recall the original definition of weak bisimulation for generative sys- tems by Baier and Hermanns [3,2,4].


Definition 5.3 Let ⟨S, A, P ⟩ be a generative probabilistic system. Let τ ∈ A be an invisible action. An equivalence relation R ⊆ S × S is a weak bisimulation on ⟨S, A, P ⟩ if and only if, for every pair ⟨s, t⟩ ∈ R, all actions a ∈ A and for all equivalence classes C ∈ S/R, it holds that
Prob(s, τ ∗aˆτ ∗, C)= Prob(t, τ ∗aˆτ ∗, C),	(8) where aˆ = a for a ∈ A \ {τ } and τˆ = ε, the empty word. Two states s and t
are weakly bisimilar if and only if they are related by some weak bisimulation relation. Notation s ≈g t.
We have the following correspondence result.
Theorem 5.4 Let ⟨S, A, α⟩ be a generative system. Let τ ∈ A be an invisible action and s, t ∈ S any two states. Then s ≈{τ} t according to Deﬁnition 3.2 with respect to Φg and {τ } if and only if s ≈g t according to Deﬁnition 5.3.
The sufficiency part of the theorem holds trivially, having Definition 5.3 and Equation (7) in mind, since τ ∗ as well as τ ∗aτ ∗, for any a ∈ A \ {τ }, is a ker(h{τ})-saturated set. Additionally, each R-equivalence class is an R- saturated set. Hence ≈{τ} is at least as strong as ≈g is. The necessity proof is more involved. In [29] a series of lemmas shows that (8) implies (7). The difficulty is that the expression Prob(s, W, M ) is not additive in its second nor in its third argument. The proofs exploit combinatorial arguments requiring a detailed analysis of the geometry of paths. Note that this technical obstacle does not occur in the qualitative setting of LTSs.
Concluding remarks
In this paper we have proposed a coalgebraic definition of weak bisimulation for action-type systems. For its justification we have considered the cases of the familiar labelled transition systems and of generative probabilistic systems and have argued that the coalgebraic notion coincides with the concrete definitions. Additionally, the paper also comprises a few other, smaller contributions.
This paper builds on earlier work jointly with Falk Bartels [6,7]. In Sec- tion 2 we have discussed a general method for obtaining correspondence results for coalgebraic versus concrete bisimulations. Our presentation generalizes the direct approach with explicit proofs in the work mentioned. The main idea is to tie up the reformulation of coalgebraic bisimulation in terms of the lifted bisimulation relation ≡F,R and the pullback of a particular cospan (cf. Lemma 2.8). The method works for any functor that weakly preserves total pullbacks, i.e. pullbacks with epi legs, a condition weaker than weak pullback preservation.


Our handling of probabilistic distributions avoids restricting the cardinal- ity of the support set, a fact of some technical interest. The results hold for arbitrary discrete distributions captured by the functor D of Section 2. Although we do not impose cardinality restrictions on the state spaces con- sidered, generative probabilistic system are discrete in nature. The work of Baier and Hermanns treats finite systems only, also because of the algorith- mic considerations addressed in [3,4]. As we do not touch upon such matter here, the definitions, both concrete and coalgebraic, are given for systems of arbitrary size.
Acknowledgements We are indebted to Falk Bartels for various discussions on the correspondence of concrete and coalgebraic notions of bisimulation, that found their way into the present paper. We thank the anonymous referees for their valuable comments and suggestions.

References
Peter Aczel and Nax Mendler. A final coalgebra theorem. In D.H. Pitt, D.E. Rydeheard,
P. Dybjer, A.M. Pitts, and A. Poign´e, editors, Proc. 3rd CTCS, volume 389 of LNCS, pages 357–365. Springer, 1989.
C. Baier. On Algorithmic Veriﬁcation Methods for Probabilistic Systems. Habilitationsschrift, Universit¨at Mannheim, 1998.
C. Baier and H. Hermanns.	Weak bisimulation for fully probabilistic processes.	In
O. Grumberg, editor, Proc. CAV’97, pages 119–130. LNCS 1254, 1997.
C. Baier and H. Hermanns. Weak bisimulation for fully probabilistic processes. Technical Report TR–CTIT–12, Universiteit Twente, 1999.
F. Borceux. Handbook of Categorial Algebra. Cambridge University Press, 1994.
F. Bartels, A. Sokolova, and E.P. de Vink. A hierarchy of probabilistic system types. In H.P. Gumm, editor, Proc. CMCS 2003. ENTCS 82, 2003. 19pp.
F. Bartels, A. Sokolova, and E.P. de Vink.  A hierarchy of probabilistic system types.
Theoretical Computer Science, 2004. In press.
J. Desharnais, V. Gupta, R. Jagadeesan, and P. Panangaden. The metric analogue of weak bisimulation for probabilistic processes. In Proc. LICS 2002, pages 413–422. IEEE, 2002.
J. Desharnais, V. Gupta, R. Jagadeesan, and P. Panangaden. Weak bisimulation is sound and complete for PCTL. In L. Brim, P. Janar, M. Ket´ınsky´, and A. Kuera, editors, Proc. CONCUR 2002, pages 355–370. LNCS 2421, 2002.
M. Fiore, G.L. Cattani, and G. Winskel. Weak bisimulation and open maps. In Proc. LICS’99, pages 67–76. IEEE, 1999.
R.J. van Glabbeek, S.A. Smolka, and B. Steffen. Reactive, generative, and stratified models of probabilistic processes. Information and Computation, 121:59–80, 1995.
H.P. Gumm. Elements of the general theory of coalgebras. Technical Report LUATS’99, Rand Afrikaans University, 1999.
P.R. Halmos. Measure theory. Van Nostrand, 1950.


H. A. Hansson. Time and Probability in Formal Design of Distributed Systems. PhD thesis, Uppsala University, 1991.
B.P.F. Jacobs and J.J.M.M. Rutten. A tutorial on (co)algebras and (co)induction. Bulletin of the EATCS, 62:222–259, 1996.
K.G. Larsen and A. Skou. Bisimulation through probabilistic testing. Information and Computation, 94:1–28, 1991.
R. Milner. A Calculus of Communicating Systems. LCNS 92, 1980.
R. Milner. Operational and algebraic semantics of concurrent processes. In J. van Leeuwen, editor, Handbook of Theoretical Computer Science, pages 1201–1242. Elsevier and MIT Press, 1990.
L.S. Moss. Coalgebraic logic. Annals of Pure and Applied Logic, 96:277–317, 1999.
G.D. Plotkin. A structural approach to operational semantics. Technical Report DAIMI FN- 19, Computer Science Department, Aarhus University, 1981.
A. Philippou, I. Lee, and O. Sokolsky.  Weak bisimulation for probabilistic systems.  In
C. Palamidessi, editor, Proc. CONCUR 2000, pages 334–349. LNCS 1877, 2000.
J. Rothe and D. Maˇsulovi´c. Towards weak bisimulation for coalgebras. In A. Kurz, editor,
Proc. Categorical Methods for Concurrency, Intercation and Mobility. ENTCS 68, 2002. 15pp.
J. Rothe. A syntactical approach to weak (bi)-simulation for coalgebras. In Proc. CMCS 2002. ENTCS 65, 2002. 16pp.
J.J.M.M. Rutten. A note on coinduction and weak bisimilarity for while programs. Theoretical Informatics and Applications (RAIRO), 33:393–400, 1999.
J.J.M.M. Rutten. Universal coalgebra: A theory of systems. Theoretical Computer Science, 249:3–80, 2000.
R. Segala. Modeling and veriﬁcation of randomized distributed real-time systems. PhD thesis, MIT, 1995.
R. Segala and N.A. Lynch. Probabilistic simulations for probabilistic processes. In Proc. Concur’94, pages 481–496. LNCS 836, 1994.
A. Sokolova and E.P. de Vink. Probabilistic automata: system types, parallel composition and comparison. In C. Baier, B. Haverkort, H. Hermanns, J.-P. Katoen, and M. Siegle, editors, Validation of stochastic systems. LNCS 2925, 2004. In press.
A. Sokolova, E.P. de Vink, and H. Woracek. Weak bisimulation for action-type coalgebras. Technical Report CSR–04–16, Technische Universiteit Eindhoven, 2004.
E.P. de Vink and J.J.M.M. Rutten. Bisimulation for probabilistic transition systems: a coalgebraic approach. Theoretical Computer Science, 221:271–293, 1999.
A.C. Zaanen. An Introduction to the Theory of Integration. North-Holland, 1958.
