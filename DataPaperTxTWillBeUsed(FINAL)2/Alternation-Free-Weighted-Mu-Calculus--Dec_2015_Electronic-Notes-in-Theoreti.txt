Available online at www.sciencedirect.com


Electronic Notes in Theoretical Computer Science 319 (2015) 289–313
www.elsevier.com/locate/entcs

Alternation-Free Weighted Mu-Calculus: Decidability and Completeness
Kim G. Larsen	Radu Mardare	Bingtian Xue 1,2
Aalborg University, Denmark

Abstract
In this paper we introduce WMC, a weighted version of the alternation-free modal mu-calculus for weighted transition systems. WMC subsumes previously studied weighted extensions of CTL and resembles previously proposed time-extended versions of the modal mu-calculus. We develop, in addition, a symbolic semantics for WMC and demonstrate that the notion of satisfiability coincides with that of symbolic satisfiability. This central result allows us to prove two major meta-properties of WMC. The first is decidability of satisfiability for WMC. In contrast to the classical modal mu-calculus, WMC does not possess the finite model-property. Nevertheless, the finite model property holds for the symbolic semantics and decidability readily follows; and this contrasts to resembling logics for timed transitions systems for which satisfiability has been shown undecidable. As a second main contribution, we provide a complete axiomatization, which applies to both semantics. The completeness proof is non-standard, since the logic is non-compact, and it involves the notion of symbolic models.
Keywords: weighted modal Mu-Calculus, non-compact modal logics, weighted transition systems, satisfiability, complete axiomatization.


Introduction
For more than two decades, specification and modelling formalisms have been sought that address essential non-functional properties of embedded and cyber-physical sys- tems. In particular, timed automata [4] were used for expressing and analysing tim- ing constraints of systems with respect to timed logics such as TCTL [3], Tμ [17], Lν [23] and MTL [19]. However, equally important non-functional properties of embedded or cyber-physical systems are related to consumption of resources, in particular that of energy. This lead initially to weighted extensions of timed au- tomata [5, 6] and most recently to energy automata [9].  However, whereas the

1 This research is partially supported by the Sino-Danish Basic Research Center IDEA4CPS.
2 Email: kgl,mardare,bingt@cs.aau.dk

http://dx.doi.org/10.1016/j.entcs.2015.12.018
1571-0661/© 2015 The Authors. Published by Elsevier B.V.
This is an open access article under the CC BY-NC-ND license (http://creativecommons.org/licenses/by-nc-nd/4.0/).

problems of cost-optimal reachability and infinite runs have been shown to be effi- ciently computable, the general model checking problem with respect to a weighted extension of TCTL turns out to be undecidable [11].
In this paper, we consider the purely weighted setting, in which the quantitative information of systems is modelled as weighted transition systems (WTSs) with transitions being decorated with non-negative reals besides actions. We study the problems of satisfiability and axiomatization of weighted logics in the most gen- eral setting. We develop WMC, a weighted version of the alternation-free modal mu-calculus, that subsumes WCTL and resembles the previously studied timed ex- tension of the modal mu-calculus Tμ and Lν. WMC is a multi-modal logic with fixed-point operators, where modalities either constrain discrete transitions or the amount of resources in a given state. For the latter, WMC uses resource-variables, similar to the clock-variables used in timed logics, see e.g. [10].
Our first main contribution is to show decidability of satisfiability for WMC. In previous work [27], we proved decidability and finite model property for restriction of WMC with only one resource-variable for each resource and only maximal fixed points. This restriction bounds severely the expressiveness of the logic. In [25, 26], we studied two sub-logics of WMC with multiple resource-variables for each re- source and only maximal fixed points. These logics are shown decidable by using the filtration construction, but are significantly weaker than WMC in that resource- variables are restricted to be event-recording. In contrast to these fragments and to modal mu-calculus, WMC does not posses finite model property, thus decidabil- ity does not follow from classical arguments. As an alternative, we propose here notions of symbolic model and semantics for which the finite model property does hold. Fortunately – as demonstrated in the paper – the notion of satisfiability coin- cides with that of symbolic satisfiability, from which our decidability result follows. This should be contrasted to the resembling timed logics for which satisfiability is undecidable.
The fact that the two semantics have the same validities is a remarkable property and a powerful tool that allows us to transport meta-results between the two seman- tics, in particular computability and complexity results for satisfiability checking and completeness results for proof systems.
Our second main contribution is a complete axiomatization of WMC, allowing all valid properties to be derived as theorems. At the best of our knowledge, this is the first complete axiomatization for a fixed point weighted modal logic in the literature. The axiomatization is remarkably simple, combining modal axioms of non-recursive weighted logic with classic axioms of fixed points [20, 28, 30]. The finite model property provides the arguments to demonstrate that the axiomatization is complete for the symbolic semantics and hence, the completeness result can be extrapolated to the WTS-semantics.
Our third main contribution is the completeness proof itself, which is non-standard and novel in many aspects. Since the logic is non-compact, it requires infinitary

proof rules. To cope with this, we involve topological techniques for model theory, inspired by the work of Rasiowa and Sikorski [16, 29]. These techniques were previ- ously developed by the first two authors in colaboration with Kozen and Panangaden for proving the strong completeness for Markovian logics [21, 22]. Our completeness proof avoids the tableaux method used in [32] for the general Mu-Calculus and it is sufficiently robust to be reused in similar contexts. On the other hand, our proof is designed for alternation-free calculi and it is not clear whether it can be used in a general unrestricted context.

Alternation-Free Weighted Mu-Calculus

Definition 2.1 A weighted transition system is a tuple W = (M, K, Σ, θ) where M is a non-empty set of states, K = {e1,..., ek} is a ﬁnite set of resources, Σ a non-empty set of actions and θ : M × Σ × (K→ R≥0) → 2M is a labelled transition function.


Instead of mj ∈ θ(m, a, f ), we write m f
mj and we call f the weight function. For

simplicity, in what follows we assume that K is a singleton and we use the transition functions θ : M × (Σ × R≥0) → 2M . However, the work can be straightforwardly extended to include multiple resources and all the following results hold in the extended case.
Alternation-Free Weighted Mu-Calculus (WMC) encodes properties of WTSs and involves modal operators and resource-variables similar to the ones used in timed logics [1, 3, 17]:
transition modalities of type [a] for a ∈ Σ;
recursive-variables that range over the set X ; they are used to define simultane- ous recursive equations to express maximal and minimum fixed points, in the style of [12, 13, 24];
resource-variables ranging over the set V;
) state modalities of type xŒr for Œ ∈ {≤, ≥} and r ∈ Q≥0, which approximates the resource-variable x ∈ V;
reset operators of type x in for the resource-variable.
Notation: we use both Œ and o to range over the set {≤, ≥} such that {Œ, o} =
{≤, ≥}. Similarly, we use  and D to range over the set {<, >} such that { , D} =
{<, >}.
Definition 2.2 [Syntax] The formulas of WMC are deﬁned by the following gram- mar, for arbitrary r ∈ Q≥0, a ∈ Σ, x ∈ V, Œ ∈ {≤, ≥}, X ∈ X.
L :	φ := x Œ r | ¬φ | φ ∨ φ | [a]φ | x in φ | X . 

We also consider the De Morgan duals of x Œ r and [a], defined by
x  r = ¬(x o r)	and	⟨a⟩φ = ¬([a]¬φ) respectively.

Given φ, ψ1, ..., ψn ∈ L and X1, ..., Xn ∈ X , let φ{ψ1/X1, ..., ψn/Xn} be the for- mula obtained by substituting each occurrence of the variable Xi in φ with ψi for each i = 1..n. If ψ = (ψ1, ..., ψn) and X = (X1, ..., Xn), let φ{ψ/X} denote φ{ψ1/X1, ..., ψn/Xn}. Following [12, 13], we allow sets of the maximal or minimal blocks of mutually recursive equations in WMC.
Definition 2.3 [Equation Blocks] An equation block B  over the set XB  =
{X1,..., Xn} of pairwise distinct variables has one of two forms – min{E} or max{E}, where E is a system of (mutually recursive) equations such that for any i, j ∈ {1, ..., m}, φi is monotonic in Xj.
E :	⟨ X1 = φ1, ..., Xn = φn ⟩

If B = max{E} or B = min{E}, the elements of XB are called max-variables or min- variables respectively. Given the system E of equations in the previous definition, its dual is
E˜ :	⟨ X1 = ¬φ1{¬X1/X1,..., ¬Xn/Xn}, . . . , Xn = ¬φn{¬X1/X1,..., ¬Xn/Xn} ⟩ 
If B = max{E} or B = min{E}, then its dual is B˜ = min{E˜} or B˜ = max{E˜}
respectively.
Given a block B, a formula φ ∈L depends on B if it involves variables in XB. Given two blocks B and Bj such that XB ∩ XB′ = ∅, we say that B is dependent on Bj if the right hand side formulas of the equations of B depend on Bj.
Definition 2.4 [Alternation-Free Block Sequence] A sequence B = B1,..., Bm of m ≥ 1 pairwise-distinct equation blocks is an alternation-free block sequence given that
(i) XBi ∩ XBj = ∅ for i /= j;   (ii) if i < j, then Bi is not dependent on Bj.
A formula φ ∈L is dependent on B if it is dependent of each block in the sequence.
Example 2.5 Anticipating the semantics, the sequence of blocks in WMC can be used to encode, for instance, the formula A(φ1U[r,r′]φ2) of WCTL: let φ = X be dependent on the alternation-free sequence B = B1, B2 defined as follows

B1 = min{Y = (φ2 ∧ r ≤ x ≤ rj) ∨ (φ1 ∧ V
V
a∈Σ
[a]Y )}

B2 = max{X =
a∈Σ[a]X ∧ (φ1 → x in Y }

B1 is a minimal equation block and B2 is a maximal one. B2 is dependent on B1. 

Weighted Semantics for WMC
To provide a semantics for WMC in terms of WTSs, we define the notions of resource valuation, extended states and environments.
A resource valuation is a function l : V → R≥0 that assigns (non-negative) real numbers to the resource-variables in V. We denote by L the class of resource valuations. For l ∈ L, x ∈ V and s ∈ R≥0, let l[x '→ s] ∈ L be defined by

l[x '→ s](x) = s and l[x '→ s](y) = l(y) for y /= x; let l + s ∈ L be defined by (l + s)(x)= l(x)+ s.
Given a WTS W = (M, Σ, θ), m ∈ M and l ∈ L, the pair (m, l) is called an extended state of W. Transitions between extended states are defined by:
(m, l) −→a (mj, lj) iff m −→u a mj and lj = (l + u).
Given a WTS W = (M, Σ, θ), an environment is a function ρ : X → 2M×L that interpret the recursive-variables as sets of extended states. We use 0 as the empty environment that associates ∅ to all recursive-variables. Given an environment ρ and S ⊆ M × L, let ρ[X '→ S] be the environment that interprets X as S and all the other recursive-variables as ρ does. Similarly, for a pairwise-disjoint tuple
X = (X1, ..., Xn) ∈ Xn and S = (S1, ..., Sn) ⊆ (M × L)n, let ρ[X '→ S] be the environment that interprets Xi as Si for all i = 1..n and all the other variables as ρ does.
Given a WTS W = (M, Σ, θ) and an environment ρ, the WTS-semantics for L is defined, on top of the classic semantics for Boolean logic, as follows.
W, (m, l),ρ |= x Œ r iff l(x) Œ r;
W, (m, l),ρ |= [a]φ iff for any (mj, lj) ∈ M × L s.t.	(m, l) −→a  (mj, lj),
W, (mj, lj),ρ |= φ;
W, (m, l),ρ |= x in φ iff W, (m, l[x '→ 0]),ρ |= φ;
W, (m, l),ρ |= X iff (m, l) ∈ ρ(X).
Let Jφ)ρ = {(m, l) ∈ M × L | W, (m, l),ρ |= φ}.
Following [12, 13, 24], we extend now the semantics to include the restrictions im- posed by an alternation-free sequence of blocks and obtain the so-called block- semantics.

Given a set of equations E with variables X = (X1, ..., Xn), an environment ρ and Υ= (Υ1, ..., Υn) ⊆ (M ×L)n, let the function fρ : (2M×L)n −→ (2M×L)n be defined

as follows:
fρ (Υ) = ⟨Jφ1)

 ,..., Jφn)   ⟩.


E	ρ[X'→Υ]	ρ[X'→Υ]
Observe that (2M×L)n forms a complete lattice with the ordering, join and meet operations defined as the point-wise extensions of the set-theoretic inclusion, union

and intersection, respectively. Moreover, for any E and ρ, fρ
is monotonic with

respect to the order of the lattice and therefore, it has a greatest fixed point denoted
by νX.fρ and a least fixed point denoted by μX.fρ [12]. These can be characterized

E
as follows:
E

νX.fρ =  {Υ | Υ ⊆ fρ (Υ)},  μX.fρ =  {Υ | fρ (Υ) ⊆ Υ}.

E	E	E	E
The blocks max{E} and min{E} define environments that satisfy all the equations in E; max{E} is the greatest fixed point and min{E} is the least fixed point. The environment defined by the block B is denoted by JB)ρ.
Given an alternation-free block sequence B = B1,..., Bm and an environment ρ0, let ρ1,..., ρm be defined by ρi = JBi)ρi−1 for i = 1,..., m. The semantics of B is

then given by

JB)ρ0 = ρm.

Definition 3.1 [Block-Semantics] Given an alternation-free sequence B of blocks, the B-semantics of a formula φ ∈ L that depends on B is given for a WTS W = (M, Σ, θ) with m ∈ M , a resource valuation l ∈ L and an environment ρ, as follows W, (m, l),ρ |=B φ iff W, (m, l), JB)ρ |= φ.

We say that a formula φ is B-satisﬁable if there exists at least one WTS that satisfies it for the alternation-free block sequence B in one of its states under some resource valuation and some environment; φ is a B-validity, written |=B φ, if it is satisfied in all states of any WTS under any resource valuation and any environment.

Symbolic Semantics for WMC
Consider an weighted system that can perform three actions a, b and c, and suppose that we are interested in the following specifications of the system:
it can do an a-action followed by an infinite sequence of alternations of the actions b and c with non-zero cost;
after an a-transition, the overall behaviour costs less than one unit of resource. These requirements can be encoded in WMC, by using three resource-variables xa, xb and xc, as follows:
φ = ⟨a⟩(xa in X),
B = max{X = xa < 1 ∧⟨b⟩(xb in (Y ∧xc > 0)), Y = xa < 1 ∧⟨c⟩(xc in (X ∧xb >
0))}
We can see that there exists a WTS satisfying φ under the assumptions of B. But it cannot be satisfied by a finite WTS, since it must have at least one infinite trace of non-zero cost transitions with a bounded overall cost. However, all the WTSs that satisfy the requirements encoded by φ have something in common: the way the resource-variables behave under certain resource valuations and as a result of resetting.
This observation motivates the development of symbolic weighted transition sys- tems (SWSs), which are similar to the ones used with timed automata in [2, 4, 23]. These are abstractions of WTSs: a symbolic model is a labelled transition system representing an infinite set of WTSs by involving the concept of regions that ab- stracts the quantitative information. One can provide an SWS-semantics for WMC (symbolic semantics) and can prove that there exists a relation between WTSs and SWSs such that any systems in this relation satisfy the same WMC properties. Moreover, the relation is complete, in the sense that to each WTS corresponds an SWS and reverse. An important consequence of this fact is that the validities for WTS-semantics coincide with the validities for SWS-semantics.
For any s ∈ R≥0, let [s♩ = max{z ∈ N | z ≤ s}, {s} = s − [s♩ and [s| = min{z ∈
N | z ≥ s}.

Definition 4.1 Given N ∈ N, l, lj ∈ L are equivalent w.r.t. N, denoted by l =N lj
iff:
∀x ∈ V, l(x) > N iff lj(x) > N;
∀x ∈V s.t. 0 ≤ l(x) ≤ N, [l(x)♩ = [lj(x)♩ and {l(x)} =0 ⇔ {lj(x)} = 0;
∀x, y ∈V s.t. 0 ≤ l(x), l(y) ≤ N, {(l(x)}≤ {l(y)}⇔ {(lj(x)}≤ {lj(y)}.
The equivalence classes under =N are called N-regions. Let [l] be the region contain-

ing l and RU
be the set of all N -regions for the set V of resource-variables and the

constant N . For a given N ∈ N, RU
is finite whenever V is finite.

For δ ∈ RU , a successor region is the region δj s.t. for any l ∈ δ, there exists d ∈ R≥0 s.t. l + d ∈ δj, denoted by δ ~ δj. For δ ∈ RU , x ∈ V and n ∈ N, δ[x '→ n] denotes the region consisting of all the resource valuations l for which there exists lj ∈ δ s.t. l = lj[x '→ n].
Example 4.2 In Figure 1 are represented some regions for N = 1 and V =
{xa, xb, xc}.


xa


δ0 = [xa = xb = xc = 0]
δ2 = [xb = 0, 0 < xa = xc < 1]
δ4 = [xc = 0, 0 < xb < xa < 1]
δ6 = [xb = 0, 0 < xc < xa < 1]
δ1 = [0 < xa = xb = xc < 1] δ3 = [0 < xb < xa = xc < 1] δ5 = [0 < xc < xb < xa < 1]
δ7 = [0 < xb < xc < xa < 1]	xb
xc


Fig. 1. Regions
δ1 is a successor of δ0, δ2 = δ1[xb '→ 0] and δ3 is a successor of δ2. Similarly, δ5 is a successor of δ4 and δ7 is a successor of δ6. Moreover, δ2 = δ3[xb '→ 0], δ4 = δ3[xc '→ 0] = δ5[xc '→ 0] = δ7[xc '→ 0] and δ6 = δ5[xb '→ 0] = δ7[xb '→ 0]. 

In what follows, we consider an extension of the concept of region to also include the case when N = p/q with p, q ∈ N. We firstly construct the regions for p and then divide each of the resource-valuation in it by q – the resulting set will be a region for N = p/q. For instance, if we take N = 1/2 in Example 4.2, then δ1 = [0 < xa = xb = xc < 1/2] and δ2 = [xb = 0, 0 < xa = xc < 1/2] are regions in
1/2 .

Definition 4.3 [Symbolic Model] Given RU
and a non-empty set S, a symbolic

weighted transition system (SWS) is a tuple Ws = (Πs, Σs, θs) where Πs ⊆ S × RU is a non-empty set of symbolic states, Σs = {εx | x ∈ V} ∪ Σ a non-empty set of actions, and θs : Πs × Σs → 2Πs is a labeled transition function such that:
if (s, δ) −→a (sj, δj) for a ∈ Σ, then δ~δj;  2) if (s, δ) −→ε  (s, δj) then δj =
δ[x '→ 0].
Note that if (s, δ) −→εx (s, δ), then for any l ∈ δ, l(x)= 0.

For a given SWS Ws = (Πs, Σs, θs), a symbolic environment is a function ρs : X → 
2Πs which interprets the recursive-variables as sets of symbolic states.
The symbolic satisﬁability relation |=s is defined for the non-Boolean operators as follows.
Ws, π, ρs |=s x Œ r iff for any l ∈ δ, l(x) Œ r;
Ws, π, ρs |=s [a]φ iff for arbitrary πj ∈ Πs such that π −→a πj, we have Ws, πj, ρs |=s
φ;
Ws, π, ρs |=s x in φ iff there exists πj ∈ Πs such that π −→ε πj and Ws, πj, ρs |=s φ;
Ws, π, ρs |=s X iff π ∈ ρs(X).
Similarly as in Section 3, for a given alternation-free sequence of blocks B we can define the symbolic B-semantics based on the B-satisfiability relation |=s , as follows:
Ws, π,ρ |=s φ iff Ws, π, JB)ρ |=s φ.

The Equivalence of the Two Semantics
In this section we prove that the two semantics introduced for WMC are equivalent, in the sense that the set of the WTS-validities coincides with the set of the SWS- validities. This result has important consequences: (i) if the satisfiability problem is decidable for one semantics, then it is also decidable for the other; and (ii) an axiomatization that is sound and complete for one semantics is sound and complete also for the other semantics. To prove the equivalence, we show that for any formula φ ∈ L dependent on B, if φ has a WTS-model, then we can also construct an SWS-model for it; and reversely, if it has an SWS-model, then we can construct a WTS-model for it.
Construction A: Given a WTS W = (M, Σ, θ) and RU , we construct the SWS
WS = (Πs, Σs, θs), where Πs = M × RU , Σs = {εx | x ∈ V} ∪ Σ and θs is deﬁned
as follows:
(m, [l]) −→a (mj, [lj]) iff (m, l) −→a (mj, lj);
(m, [l]) −→ε  (m, [lj]) iff [lj]= [l][x '→ 0].
We call Ws the symbolic model of W w.r.t. RU , denoted by S(W, RU ).
N	N
Construction B: Given an SWS WS = (Πs, Σs, θs) on RU with Σs = {εx | x ∈
V} ∪ Σ, let W = (M, Σ, θ) be a WTS s.t.
the states are sets of type {(s, δ1, l1),..., (s, δk, lk)} where
(1) (s, δi) ∈ Πs and li ∈ δi; (2) for any i ∈ {1, ..., k} there exist j ∈ {1, ..., k} and x ⊆ V s.t. either δj = δi[x '→ 0] and lj = li[x '→ 0], or δi = δj[x '→ 0] and li = lj[x '→ 0].
θ is deﬁned for any m ,m ∈ M, m −→u	m iff there exist (s ,δ ,l ) ∈ m  and
1	2	1	a	2	1  1  1	1
(s2, δ2, l2) ∈ m2 s.t. (s1, δ1) −→a (s2, δ2) and l2 = (l1 + u).
We call W the concrete model of Ws on RU , denoted by C(Ws, RU ).
N	N
We prove that the constructions preserve the B-satisfiability of WMC properties, i.e., a formula φ is B-satisfiable in the WTS-semantics iff it is B-satisfiable in the

SWS-semantics.
Consider an arbitrary formula φ ∈L dependent on B.
Let V[φ, B] be the set of the resource-variables in φ and B. For any x ∈ V[φ, B], let Q[φ, B] ⊆ Q≥0 be the set of all r ∈ Q≥0 that occur in a construct of type x Œ r in φ or B.
Let g be the least common denominator of the elements of Q[φ, B].
Let R[φ, B] denote the set RU[φ,5] of p/q-regions, where p/g = max Q[φ, B].
Theorem 5.1 Let φ depending of the alternating-free sequence of blocks B =
B1,..., Bm.
If W, (m, l),ρ |=5 φ, then Ws, (m, [l]), ρs |=s φ, where Ws = S(W, R[φ, B]) and
ρs(X)= {(m, [l]) | (m, l) ∈ ρ(X)} for any X ∈ X.
If Ws, (s, δ), ρs |=s φ, then W, (m, l),ρ |=5 φ, where W = C(Ws, R[φ, B]), m ∈
M, (s, δ, l) ∈ m and for any X ∈ X, ρ(X)= {(m, l) | (s, δ) ∈ ρs(X), (s, δ, l) ∈ m}.
Consequently, the B-validities for WTC-semantics coincide with that of SWS- semantics.

Decidability and finite symbolic model property
In this section, we prove that WMC enjoys the finite model property against the SWS-semantics, by involving the region construction technique and adapting the classical tableau method. A consequence of this result is that the B-satisfiability problem for the SWS-semantics is decidable. In the light of Theorem 5.1, this means that B-satisfiability is decidable also for the WTS-semantics even if, as we have emphasized in Section 4, WMC does not enjoy the finite model property for the WTS-semantics.
Given φ ∈L that depends on an alternation-free sequence B, let Σ[φ, B] be the set of all actions a ∈ Σ that appears in some transition modality of type ⟨a⟩ or [a] in φ or B; let Q[φ] and R[φ] be defined as in Section 5. Observe that Σ[φ], Q[φ] and R[φ] are finite or empty.
We fix φ0 ∈ L dependent on B0. Let L[φ0, B0] be the set of the sub-formulas of φ0 or B0. Let Ω[φ0, B0] ⊆ 2L[φ0,50] × R[φ0, B0]. Since L[φ0, B0] and R[φ0, B0] are both finite, Ω[φ0, B0] is finite. We construct a tableau for φ0, which is similar to the standard construction with extra focus on the quantities.
The nodes of a tableau are pairs (Δ, δ) ∈ Ω[φ0, B0] and the tableau rules are listed in Table 1, where {φ, Δ} denotes {φ}∪ Δ.
Because of the quantitative requirements must also be satisfied, not any pair (Δ, δ) is a node in the tableau. A tableau T (φ, δ) derived from the previous rules must be region consistent, meaning that any node (Δ, δj) ∈T (φ, δ) must satisfy the following conditions:
for any x Œ r ∈ Δ and l ∈ δ, l(x) Œ r;



  ({φ1, φ2, Δ}, δ) 
(Λ)
({φ1 Λ φ2, Δ}, δ)
({φ, Δ}, δ′)
 ({φ1, Δ}, δ) ({φ2, Δ}, δ) 
(V)
({φ1 V φ2, Δ}, δ)
({φX , Δ}, δ)

(Res)
(Reg)
({x in φ, Δ}, δ)
({X, Δ}, δ)	X = φX ∈ 5 


(Mod)
({ψ}∪ {ψ′ | [a]ψ′ ∈ Δ}, δ′) for any ⟨a⟩ψ ∈ Δ (Δ, δ)
Table 1 Tableau System f φ

if ({x in φ, Δ}, δ) is the conclusion and ({φ, Δ}, δj) is the assumption of (Res), then δj = δ[x '→ 0];
if (Δ, δ) is the conclusion of (Mod), then δ ~ δj for any assumption (Δj, δj).
If (Mod) is applied for an action a at the node t, the node obtained is called an
⟨a⟩-son of t. The tableaux may be infinite. However, because Ω[φ0] is finite, the pairs from Ω[φ0] that appear in T (φ, δ) are finitely many.
As in the classic method for mu-calculus [20, 31, 32], we use max-trace, min-trace to capture the idea of a history of the regeneration of a formula and markings, consistent markings to characterize B-satisfiability of a formula in a state of an SWS (these classic definitions can be found in the appendix).
Lemma 6.1 φ0 is satisﬁed at state π0 = (s0, δ0) in an SWS Ws = (Πs, Σs, θs) if and only if there is a consistent marking of T (φ0, δ0) respect to Ws and π0.
The proof of Lemma 6.1 relies on notion of signature, similar to that considered by Streett and Emerson [31]. These notions come from the characterization of fixed point formulas by means of transfinite chains of approximations, which have been extended to the setting with fixed points defined with blocks in [12, 13]. Involving these, the previous lemma is proven similarly to the case of classic μ- calculus [20, 31, 32]. The correctness of the cases with weight is guaranteed by the region consistency.
This lemma allows us to prove the finite model property for SWS-semantics, by following the classic proof strategy of [20]; the only difference consists in managing the reset actions.
Theorem 6.2 (Finite Symbolic Model Property) Let φ0 ∈ L be a formula
that depends of B0. If φ0 is B0-satisﬁable, then there exists a ﬁnite SWS Ws =

(Πs , Σs , θs ) with πf ∈ Πs
and a symbolic environment ρs such that Ws, πf , ρs |=5

f	f	f	f
φ0.
f	f	f	0

According to Lemma 6.1 and Theorem 6.2, we can have an algorithm to decide the satisfiability of a given WMC formula. The following example shows how this works.
Example 6.3 Suppose that we want to verify the B-satisfiability of the property discussed at the beginning of Section 4.

φ = ⟨a⟩(xa in X),
B = max{X = xa < 1 ∧ ⟨b⟩(xb in (Y ∧ xc > 0)), Y = xa < 1 ∧ ⟨c⟩(xc in (X ∧ xb >
0))}.












δ0 = [xa = xb = xc = 0]
.	δ2 = [xb = 0, 0 < xa = xc < 1]

	.	 reg
t14 = ({(X, xb > 0)}, δ4)
δ4 = [xc = 0, 0 < xb < xa < 1]

t13 = ({xc in (X Λ xb > 0)}, δ7)
res, Λ
δ6 = [xb = 0, 0 < xc < xa < 1]

t12 = ({xa < 1, ⟨c⟩(xc
in (X Λ x
b > 0)), xc > 0}, δ6)
mod
reg, Λ
δ1 = [0 < xa = xb = xc < 1]
δ3 = [0 < xb < xa = xc < 1]

t11 = ({Y, xc > 0}, δ6)	res, Λ
	t10 = ({xb in (Y Λ xc > 0)}, δ5)	
mod
t9 = ({xa < 1, ⟨b⟩(xb in (Y Λ xc > 0)), xb > 0}, δ4)	reg, Λ
t8 = ({(X, xb > 0)}, δ4)
	 res, Λ
t7 = ({xc in (X Λ xb > 0)}, δ3)
δ5 = [0 < xc < xb < xa < 1]
δ7 = [0 < xb < xc < xa < 1]

t = ({x < 1, ⟨c⟩(x
in (X Λ x
> 0)),x > 0},δ )
mod

6	a	c
b	c	2
reg, Λ

t5 = ({Y, xc > 0}, δ2)	res, Λ
t4 = ({xb in (Y Λ xc > 0)}, δ1)
mod

t3 = ({xa < 1, ⟨b⟩(xb in (Y Λ xc > 0))}, δ0)
reg, Λ

t2 = ({X}, δ0)
t1 = ({xa in X}, δ0)
res

t0 = ({⟨a⟩(xa in X)}, δ0)
mod

Fig. 2. Tableau f (φ, B)	Fig. 3. SWS for φ dependent on B










In Figure 2 shows T (φ, δ0).   There is only one infinite trace – max-trace.   We  construct  Ws:   Σs   =  {a, b, c, εxa , εxb , εxc },  Πs   =
{(t0, δ0), (t3, δ0), (t6, δ1), (t6, δ2), (t9, δ3), (t9, δ4), (t12, δ5),
(t12, δ6), (t9, δ7)} and θs is defined as shown in Figure 3. From the symbolic model in Figure 3, one can generate a WTS, which in this case is infinite; φ is satisfied in some state of it. In Figure 4 it is shown part of this infinite model.

l0 = (0, 0, 0)
l1 = (0.3, 0.3, 0.3)	l2 = (0.3, 0, 0.3)
l3 =( π ,  π ,  π )	l4 =( π , 0,  π )
	
10 10 10	10	10
l5 = (0.1, 0.1, 0.1)	l6 = (0.1, 0, 0.1)
l7 = (0.5, 0.2, 0.5)	l8 = (0.5, 0.2, 0)
l9 = (0.3+  π ,  π , 0.3+  π ) l10 = (0.3+  π ,  π , 0)
10 10	10	10 10

l11 = (0.3, 0.2, 0.3)	l12 = (0.3, 0.2, 0)
l13 = (0.6, 0.3, 0.1)	l14 = (0.6, 0, 0.1)
l15 = (0.5, 0.4, 0.2)	l16 = (0.5, 0, 0.2)
l17 = (0.75, 0.15, 0.25)	l18 = (0.75, 0.15, 0)
l19 = (0.6, 0.1, 0.3)	l20 = (0.6, 0.1, 0)
...	... 
m0 = {(t0, δ0, l0)}	m1 = {(t3, δ0, l0)}
m2 = {(t6, δ1, l1), (t6, δ2, l2)}
m3 = {(t6, δ1, l3), (t6, δ2, l4)}
m4 = {(t6, δ1, l5), (t6, δ2, l6)}
m5 = {(t9, δ3, l7), (t9, δ4, l8)}
m6 = {(t9, δ3, l9), (t9, δ4, l10)}
m7 = {(t9, δ3, l11), (t9, δ4, l12)}
m8 = {(t12, δ5, l13), (t12, δ6, l14)}
m9 = {(t12, δ5, l15), (t12, δ6, l16)}
m10 = {(t9, δ7, l17), (t9, δ4, l18)}
m11 = {(t9, δ7, l19), (t9, δ4, l20)}
... 






.
.

... 

.


... 






... 

.

Fig. 4. Generalizing WTS from the symbolic model
It is not difficult to verify that it is a model for φ.	 
Theorem 6.4 (Decidability of B-Satisfiability) For any alternation-free block sequence B, the B-satisﬁability problem for WMC is decidable for both WTS- and SWS-semantics.

Axiomatization
In this section, we focus on developing a sound and complete axiomatization for the validities of WMC with respect to the two semantics. Recall that the two sets of validities coincide. In the light of Theorem 5.1, it is sufficient to find such an axiomatization for the SWS-semantics and it is then sound and complete also for the WTS-semantics.

Sound axiomatization
In order to state the axioms for WMC we need to establish some notations.
The modal preﬁxes are words w ∈ Mod∗ over the alphabet of modal operators of
L, Mod = {[a] | a ∈ Σ}∪ {x in | x ∈ V}. E.g., [a],x in [a][a], [a]x in ,ε ∈ Mod∗ .
A context C is a word formed by a modal prefix w ∈ Mod∗ concatenated with the metavariable X; e.g., [a]X, [a]x in [b]X,x in [a][a]X, [a]x in X are contexts. To emphasize the presence of the metavariable we will use the functional representation of type C[X] for contexts; this will allow us to instantiate the metavariable with

elements from L. E.g., if C[X] = [a]x in [b]X is a context, then C[(x ≥ r)] = [a]x in [b](x ≥ r) ∈ L. Also ε[X] is a context - the empty one - and for φ ∈ L, ε[φ]= φ.
The axiomatization of WMC is given in two phases. Firstly, we provide axioms for deriving the validities that do not depend on sequences of blocks; and secondly, we extend the axiomatization to recursive constructs.
The axioms and rules presented in Table 2 together with the axioms and the rules of propositional logic axiomatize a classic deducibility relation (see [16]) for the non- recursive validities of WMC denoted by ▶. The axioms and the rules are stated for arbitrary φ, ψ ∈ L, r, s ∈ Q≥0, a ∈ Σ, x, y ∈ V and arbitrary context C[X], where
{Œ, o} = {≤, ≥}.
(A1): ▶ x ≥ 0	(A8): ▶ x in x in φ → x in φ
(A2): ▶ (x ≥ r) ∨ (x ≤ r)	(A9): ▶ x in y in φ → y in x in φ
(A3): ▶ x ≤ r → ¬(x ≥ s), r < s	(A10): ▶ ¬(x in φ) ↔ x in ¬φ
(A4): ▶ x ≥ r → [a](x ≥ r)	(A11): ▶ x in φ → (x =0 → φ) (A5): ▶ x ≥ r ∧ y ≥ s → [a](x ≥ r + t → y ≥ s + t)		(R1): If ▶ φ, then ▶ oφ
(A6): ▶ o(φ → ψ) → (oφ → oψ)	(R2): {C[x Œ r] | r D s}▶ C[x Œ s]
(A7): ▶ x in ⊥→⊥	(R3): {C[x ≥ r] | r ∈ Q≥0}▶ C[⊥]
Table 2
Axiomatic System of WMC basic formulas
The axioms (A1)-(A3) state simple arithmetic facts. (A4) states that an action- transition has a positive cost. (A5) guarantees that all the resource-variables mea- sure the same resource. The axiom (A6) and the rule (R1) state that all the box-like operators of WMC are normal in the sense of modal logic [8]. The nature of the reset operation is depicted by (A7)-(A11).
The rules (R2) and (R3) are infinitary and encode the Archimedean properties of rational numbers. For instance, the formula {(≥ r) | r < s}▶ (≥ s) is an instance of (R2) stating that if the resources available in a state are at least r for each r < s, then they are at least s.
Similarly, the formula {(≥ r) | r ∈ Q}▶⊥ is an instance of (R3) guaranteeing that the resources in a state cannot be infinite (bigger that any rational).
The rules (R2) and (R3) are closed under arbitrary contexts. Due to them, WMC is non-compact: infinite sets of formulas such as {(≥ r) | r < s}∪ {¬(≥ s)} and
{(≥ r) | r ∈ Q} are inconsistent while any finite subset of them is consistent.
Theorem 7.1 (Soundness) The axiomatic system of ▶ is sound with respect to the WTS-semantics, i.e., for arbitrary φ ∈ L,
▶ φ implies |= φ.

Consequently, the axioms are also sound for SWS-semantics. Now we can proceed with the recursive constructs.
Given a maximal equation block B = max{X1 = φ1,..., Xn = φn} and an arbi-

trary clasical deducibility relation ▶∗, we define the deducibility relation ▶∗
as the

extension of ▶∗ given by the axioms and rules in Table 3, which are the equation- version of the fixed points axioms of Mu-calculus [20, 28, 30].  These are stated

for arbitrary φ ∈ L and Ψ = (ψ1, ..., ψn) ∈ Ln, where X = (X1, ..., Xn). Simi-

larly, we define a classical deducibility relation ▶∗
for a minimal equation block

B = min{X1 = φ1,..., Xn = φn} based on ▶∗ by using the axioms and rules in Table 4.
(max-R1): If ▶∗ φ, then ▶∗ φ	(min-R1): If ▶∗ φ, then ▶∗ φ

(max-A1): ▶∗
V
i=V1,...,n
B
(Xi →
φi)
(min-A1): ▶∗
V
i=V1,...,n
B
(φi →
Xi)

(max-R2): If ▶∗
∗ i=V1,...,n
(ψi → φi{Ψ/X}),
(min-R2): If ▶∗
∗ i=V1,...,n
(φi{Ψ/X} → ψi),

then ▶B
i=1,...,n(ψi → Xi)
then ▶B
i=1,...,n(Xi → ψi)

Table 3
Axiomatic System of Maximal Equation Blocks
Table 4
Axiomatic System of Minumum Equation Blocks

Given an alternation-free block sequence B = B1, ..., Bm, we define the classical deducibility relations ▶0, ▶1, ..., ▶m as follows: ▶0=▶, ▶i=▶i−1 for i = 1, ..m. Con-
sequently, ▶5=▶m.
As usual, we say that a formula φ (or a set Φ of formulas) is B-provable, denoted by ▶5 φ (respectively ▶ Φ), if it can be proven from the given axioms and rules of
▶5. We denote by
Ψ= {φ ∈L| Ψ ▶5 φ}.
An induction on the structure of the alternation-free blocks shows that all the theorems of ▶5 are sound in the WTS-semantics, hence also in the SWS-semantics.
Theorem 7.2 (Extended Soundness) The axiomatic system of ▶5 is sound with respect to the semantics based on WTSs, i.e., for arbitrary φ ∈ L,
▶5 φ implies |=5 φ.

Completeness
In the rest of this section we prove that the axiomatic system of ▶5 is not only sound, but also complete for the two semantics, meaning that all the B-validities can be proved, as theorems, from the proposed axioms and rules, i.e., for arbitrary φ ∈ L, |=5 φ implies ▶5 φ. To complete this proof it is sufficient to show that any B-consistent formula has a model.
For some set S ⊆ L, Φ is (S, B)-maximally consistent if it is B-consistent and no formula of S can be added to Φ without making it inconsistent. Φ is B-maximally- consistent if it is (L, B)-maximally-consistent.
In the following we fix a consistent formula φ0 depending on a fixed alternation-free sequence B0 and we construct a model. Let Θ be the set of B0-maximally consistent sets.
The model construction is not standard, in the sense that we will not use Θ as the set of states in the canonical WTS model. This is because any state in a given WTS corresponds to a function from the set of valuations L to Θ: each resource valuation identifies a B0-maximally-consistent set of formulas satisfied by that model under the given resource valuation. Consequently, to construct the canonical model we

will need to take as states not B0-maximally-consistent sets of formulas (as usual in modal logics), but some particular functions from L to B0-maximally-consistent sets, called coherent functions. Then, the construction will go as follows:
we construct a canonical model which takes coherent functions as states, similar to the construction made in [18] for timed logic;
we construct an SWS from the above model and prove the truth lemma, where the symbolic finite model property is used;
according to Theorem 5.1, there exists a WTS for any B0-consistent formula.
Lemma 7.3 For arbitrary Λ ∈ Θ and x ∈ V,
sup{r ∈ Q+ | x ≥ r ∈ Λ} = inf{r ∈ Q+ | x ≤ r ∈ Λ}∈ R≥0.

The previous lemma demonstrates that each B0-maximally-consistent set corre- sponds to a unique resource valuation of resource-variables, that we will identify using the function I :Θ −→ L defined for arbitrary Λ ∈ Θ and x ∈V by:
I (Λ)(x)= sup{r ∈ Q+ | x ≥ r ∈ Λ}∈ R≥0.
Since I (Λ) synthesizes only the information regarding the resource-variables, there exist distinct sets Λ1, Λ2 ∈ Θ s.t. I (Λ1) = I (Λ2); this defines an equivalence relation on Θ and the equivalence classes are in one to one correspondence with the resource valuation in L.
Observe that not just any function γ : L → Θ is a good candidate for becaming a state in the canonical model. To better understand this, we emphasize the essential role of resource valuations in the semantics of WMC. We start from analyzing how the formulas satisfied by a given WTS under a certain resource valuation change with the change of the valuation.
Let F(φ) be the set of the free resource-variables in φ ∈L (i.e., those that are not bounded by reset operator x in ) defined by: F(⊥)= F(X)= ∅, F(x Œ r)= {x}, F(φ ∨ ψ) = F(φ) ∪ F(ψ), F(¬φ) = F([a]φ) = F(φ), F(x in φ) = F(φ) \ {x}. Similarly, we denote the set of the free resource-variables in φ0 and B by F[φ0, B0].
For y ∈ V that does not appear in the syntax of φ and x ∈ F(φ), we denote by φ{y/x} the formula obtained by uniformly substituting all the occurrences of x in φ by y.
Definition 7.4 Let f−, f+: V → Q be two rational resource valuations. For any formula φ ∈ L, let φ + f−/f+ be deﬁned as follows, where x Œ t for t < 0 should be read as x ≥ 0:

df
⊥ + f−/f	⊥
df
(φ ∨ ψ)+ f−/f
f−/f
) ∨ (ψ + f−/f )

(x ≤ r)+ f−/f
df
≤ (r + f
(x))
df
(x ≥ r)+ f−/f
≥ (r + f
(x))

+ = x	+	+ = x	−

(¬φ)+ f−/f+
df
= ¬(φ +	/f− )
([a]φ)+ f−/f+
df
= [a](φ +
f−/f+ )

(x in φ)+ f−/f
df
+ = x in (φ +
f− [x '→ 0]/f+ [x '→ 0])
df
X + f−/f+	= X

Given a list of equations E = (X1 = φ1, .., Xn = φn), let E + f−/f+ = (X1 = φ1 + f−/f+, .., Xn = φn + f−/f+). Given an equation block B = max{E} or B = min{E}, we deﬁne B + f−/f+ to be max{E + f−/f+ } or min{E + f−/f+ } respectively. Given an

alternation-free block sequence B = B1,..., Bm, let B +f−/f+ = B1 +f−/f+,..., Bm +
f−/f+ .

Whenever f— = f+ = f , we write +f . For S ⊆L and δ : V → R, let
S ☒ δ = {φ + f−/f+ | φ ∈ S, f—, f+ : K→ Q s.t. f— < δ < f+}.
Definition 7.5 [Coherent function] A function γ : L → Θ is coherent, if for any
l, lj ∈ L,
1. (I ◦ γ)(l)= l;	2. γ(l) ☒ (lj − l) ⊆ γ(lj).

The first fundamental result is that any B0-maximally-consistent set Λ belongs to the image γ(L) of a coherent function γ. Eventually, we will construct a symbolic model from the WTS on the set of coherent functions, and this result will guarantee that any B0-maximally-consistent set is satisfied.
Lemma 7.6 For any Λ ∈ Θ, there exists a coherent function γ such that
γ(I (Λ)) = Λ.
Firstly, we define a WTS using the state space
Γ= {γ : L → Θ | γ is a coherent function} and the transitions defined by

γ −→u
a γj if [∀l ∈ L, [a]φ ∈ γ(l) ⇒ φ ∈ γj(l + u)].

Secondly, we apply Construction A from Section 5 and construct a SWS Ws = (Πs, Σs, θs) for the above WTS w.r.t φ0 that depends of B0, for a set of regions R[φ0, B0]. We get Πs =Γ × R[φ0, B0], Σs = Σ[φ0, B0] ∪ {εx | x ∈ V[φ0, B0]} and
1. (γ, [l]) −→a (γj, [lj]) iff γ −→a γj and lj = l + u;  2. (γ, [l]) −→ε  (γ, [lj]) iff [lj]= [l][x '→ 0].
Let L[φ0, B] be defined as:
L[φ0, B]= {φ ∈L| Σ[φ, B] ⊆ Σ[φ0, B], Qi[φ, B] ⊆ Qi[φ0, B]}.
Let ρs be the symbolic environment defined for any X ∈ X , by ρs(X)= {(γ, [l]) |
0	0
X ∈ γ(l)}.
Firstly, we prove the restricted truth lemma that does not consider recursive con- structs. Its proof is similar to the proof presented in [18] for timed modal logic.
Lemma 7.7 (Restricted Truth Lemma) For φ ∈ L[φ0, B0], l ∈ L and π = (γ, [l]) ∈ Πs,
Ws, π, ρs |= φ iff φ ∈ γ(l).

On the restricted truth lemma we can base the following two results that indicate how we can extend the results to include the recursive cases.
Lemma 7.8 Let B = max{X1 = φ1,..., Xn = φn} be an equation block in the sequence B0 and ρs a symbolic environment such that ρs(Xi)= {(γ, [l]) | Xi ∈ γ(l)}

for any i = 1, .., n. For any φ ∈ L[φ0, B0], l ∈ L and π = (γ, [l]) ∈ Πs,
if	[Ws, π, ρs |= φ iff φ ∈ γ(l)],	then	[Ws, π, JB)ρs |= φ iff φ ∈ γ(l)].

Proof. Induction on φ. We prove here the case of the recursive-variables Xi, i = 1, ..k.
(=⇒) Because WMC enjoys the finite symbolic model property, there exists a finite ordinal k0 s.t. for all i = 1,..., n, Ws, π, JB)ρs |= Xi iff Ws, π, JB)ρs |= φk0 , where
for all i = 1,..., n, φk are defined simultaneously by φ0 = ⊥ and φk+1 = φ {k },

i
k	k	k

i	i	i
Φ /X

where Φ = (φ1 , .., φn) and X = (X1, ..Xn).
It is clear that in φk there is no recursive-variable from {X1,..., Xn}.	For
any recursive-variable X other than X1,..., Xm, JB)ρs (X) = ρs(X).	Hence,
Ws, π, JB)ρs |= Xi implies Ws, π, ρs |= φk0 . Then, φk ∈ γ(l).
i	i
The finite symbolic model property also guarantees that for any πj ∈ Γ and any
i = 1,..., n,
Ws, πj, ρs |= φk → φ {k }.
i	i Φ /X

So, for any i = 1, ..n, φk → φ {k
} ∈ γj(lj) for any (γj, [lj]) ∈ Γ. This further

implies that ▶ V (φk → φ {
i Φ /X
k }), since V (φk → φ {k
}) is present in all the

i	i	i
Φ /X
i	i	i
Φ /X

maximal-consistent sets. Hence, using (max-R2), for any i, φk → Xi ∈ γj(lj) for

any (γj, [lj]) ∈ Γ.
As already proven above, Ws, π, JB)ρs  |= Xi implies φk

∈ γ(l). Together with

φk → Xi ∈ γj(lj) for any (γj, [lj]) ∈ Γ, provided by (max-A1), we get that Xi ∈ γ(l).
(⇐=) We prove that ρs is a post-fixed point of B as follows:
For any Xi, i = 1,..., n, suppose Ws, π, ρs |= Xi. Then Xi ∈ γ(l), which implies that φi ∈ γ(l) by (max-A1). So Ws, π, ρs |= φi. Since JB)ρs is the maximal fixed point of B, we have ρs ⊆ JB)ρs . Therefore, Ws, π, ρs |= φ implies Ws, π, JB)ρs |= φ.
 

Since the minimal blocks are dual of the maximal blocks, we have a similar lemma for minimal blocks.
Lemma 7.9 Let B = min{X1 = φ1,..., Xn = φn} be an equation block in the sequence B0 and ρs a symbolic environment such that ρs(Xi) = {(γ, [l]) | Xi ∈ γ(l)} for any i = 1, ..n. For any φ ∈ L[φ0, B0], l ∈ L and π = (γ, [l]) ∈ Πs, if	[Ws, π, ρs |= φ iff φ ∈ γ(l)],	then	[Ws, π, JB)ρs |= φ iff φ ∈ γ(l)].

These lemmas allow us to prove the stronger version of the truth lemma.
Theorem 7.10 (Extended Truth Lemma) For φ ∈ L[φ0, B0], l ∈ L and π = (γ, [l]) ∈ Πs,
Ws, π, ρs |=5 φ iff φ ∈ γ(l).

A direct consequence of Theorem 7.10 is the completeness 3 of the axiomatic system.
Theorem 7.11 (Completeness) The axiomatic system of ▶5 is complete with respect to the WTS-semantics, i.e., for arbitrary φ ∈ L,
|=5 φ implies ▶5 φ.

Conclusions
In this paper we have investigated the alternation-free weighted mu-calculus (WMC) for which we presented two semantics: one based on weighted transition systems (WTSs) and one based on the symbolic models (SWSs). We have demonstrated that the two semantics are equivalent in the sense that the WTS-validities coincide with the SWS-validities. This is a remarkable result that allows us to transport metaresults between the two semantics.
We firstly proved that even if WMC does not enjoy the finite model property for the WTS-semantics, it enjoys it for the SWS-semantics and thus we prove that satisfiability is decidable in both cases. To prove this we involve the tableau method. We suspect that a similar result can be extended to the entire weighted Mu-Calculus without the alternation-free restriction, but for now we have no evidence in this sense.
The finite model property is also used to prove that the axiomatization that com- bines modal axioms of weighted logic with the axioms of fixed points is complete for the SWS-semantics. Since the SWS-validities coincide with the WTS-validities, the completeness result can be extrapolated for the TWS-semantics.
The development of symbolic semantics that induces the same validities as the clas- sic semantics is a powerful tool with potential applications also in other contexts. We intend to further apprehend these results to understand if some general tech- nique can be proposed.

References
L. Aceto, A. Ing´olfsd´ottir, K. G. Larsen, and J. Srba. Reactive Systems: modelling, specification and verification. Cambridge University Press, 2007.
R. Alur, C. Courcoubetis, and D. L. Dill. Model-checking for real-time systems. In LICS, pages 414–425. IEEE Computer Society, 1990.
R. Alur, C. Courcoubetis, and D. L. Dill. Model-checking in dense real-time. Inf. Comput., 104(1):2–34, 1993.
R. Alur and D. L. Dill. Automata for modeling real-time systems. In Mike Paterson, editor, ICALP, volume 443 of Lecture Notes in Computer Science, pages 322–335. Springer, 1990.
R. Alur, S. La Torre, and G. J. Pappas. Optimal paths in weighted timed automata. In Benedetto and Sangiovanni-Vincentelli [7], pages 49–62.

3 In this context by completeness we mean the weak-completeness. Since WMC is not compact, the weak- and strong-completeness do not coincide.


G. Behrmann, A. Fehnker, T. Hune, K. G. Larsen, P. Pettersson, J. Romijn, and F. W. Vaandrager. Minimum-cost reachability for priced timed automata. In Benedetto and Sangiovanni-Vincentelli [7], pages 147–161.
Maria Domenica Di Benedetto and Alberto L. Sangiovanni-Vincentelli, editors. Hybrid Systems: Computation and Control, 4th International Workshop, HSCC 2001, Rome, Italy, March 28-30, 2001, Proceedings, volume 2034 of Lecture Notes in Computer Science. Springer, 2001.
P. Blackburn, J. van Benthem, and F. Wolter. Handbook of Modal Logic. Elsevier Science Inc., New York, NY, USA, 2006.
P. Bouyer, U. Fahrenberg, K. G. Larsen, N. Markey, and J. Srba. Infinite runs in weighted timed automata with energy constraints. In Franck Cassez and Claude Jard, editors, FORMATS 2008. Proceedings, volume 5215 of Lecture Notes in Computer Science, pages 33–47. Springer, 2008.
P. Bouyer, K. G. Larsen, and N. Markey. Model checking one-clock priced timed automata. Logical Methods in Computer Science, 4(2), 2008.
T. Brihaye, V. Bruy`ere, and J-F Raskin. Model-checking for weighted timed automata. In Yassine Lakhnech and Sergio Yovine, editors, FORMATS 2004 and FTRTFT 2004. Proceedings, volume 3253 of Lecture Notes in Computer Science, pages 277–292. Springer, 2004.
R. Cleaveland, M. Klein, and B. Steffen. Faster model checking for the modal mu-calculus. In Gregor von Bochmann and David K. Probst, editors, CAV, volume 663 of Lecture Notes in Computer Science, pages 410–422. Springer, 1992.
R. Cleaveland and B. Steffen. A linear-time model-checking algorithm for the alternation-free modal mu- calculus. Formal Methods in System Design, 2(2):121–147, 1993.
S. Givant and P. Halmos. Introduction to Boolean Algebras. Springer, 2009.
R. Goldblatt. On the role of the Baire category theorem in the foundations of logic. Journal of Symbolic logic, pages 412–422, 1985.
Robert Goldblatt. Topological proofs of some rasiowa-sikorski lemmas. Studia Logica, 100(1-2):175–191, 2012.
Thomas A. Henzinger, Xavier Nicollin, Joseph Sifakis, and Sergio Yovine. Symbolic model checking for real-time systems. In Proceedings of the Seventh Annual Symposium on Logic in Computer Science (LICS ’92), Santa Cruz, California, USA, June 22-25, 1992, pages 394–406. IEEE Computer Society, 1992.
S. Jaziri, K. G. Larsen, R. Mardare, and B. Xue. Adequacy and complete axiomatization for timed modal logic. Electr. Notes Theor. Comput. Sci., 308:183–210, 2014.
R. Koymans. Specifying real-time properties with metric temporal logic. Real-Time Systems, 2(4):255–299, 1990.
Dexter Kozen. Results on the propositional μ-calculus. In Mogens Nielsen and Erik Meineche Schmidt, editors, Automata, Languages and Programming, 9th Colloquium, Aarhus, Denmark, July 12-16, 1982, Proceedings, volume 140 of Lecture Notes in Computer Science, pages 348–359. Springer, 1982.
Dexter Kozen, Kim G. Larsen, Radu Mardare, and Prakash Panangaden. Stone duality for markov processes. In 28th Annual ACM/IEEE Symposium on Logic in Computer Science, LICS 2013, New Orleans, LA, USA, June 25-28, 2013, pages 321–330. IEEE Computer Society, 2013.
Dexter Kozen, Radu Mardare, and Prakash Panangaden. Strong completeness for markovian logics. In Krishnendu Chatterjee and Jiri Sgall, editors, Mathematical Foundations of Computer Science 2013 - 38th International Symposium, MFCS 2013, Klosterneuburg, Austria, August 26-30, 2013. Proceedings, volume 8087 of Lecture Notes in Computer Science, pages 655–666. Springer, 2013.
F. Laroussinie, K. G. Larsen, and C. Weise. From timed automata to logic - and back. In Jir´ı Wiedermann and Petr H´ajek, editors, MFCS, volume 969 of Lecture Notes in Computer Science, pages 529–539. Springer, 1995.
K. G. Larsen. Proof systems for satisfiability in Hennessy-Milner logic with recursion. Theor. Comput. Sci., 72(2&3):265–288, 1990.
K. G. Larsen, R. Mardare, and B. Xue. A decidable recursive logic for weighted transition systems. In Gabriel Ciobanu and Dominique M´ery, editors, (ICTAC2014). Proceedings, volume 8687 of Lecture Notes in Computer Science, pages 460–476. Springer, 2014.
K. G. Larsen, R. Mardare, and B. Xue. On decidability of recursive weighted logics. Soft Computing, under review, 2014.
Kim Guldstrand Larsen, Radu Mardare, and Bingtian Xue. Decidability and expressiveness of recursive weighted logic. In Andrei Voronkov and Irina Virbitskaite, editors, Perspectives of System Informatics - 9th International Ershov Informatics Conference, PSI 2014, St. Petersburg, Russia, June 24-27, 2014. Revised Selected Papers, volume 8974 of Lecture Notes in Computer Science, pages 216–231. Springer, 2014.


V. R. Pratt. A decidable mu-calculus: Preliminary report. In 22nd Annual Symposium on Foundations of Computer Science, Nashville, Tennessee, USA, 28-30 October 1981, pages 421–427. IEEE Computer Society, 1981.
H. Rasiowa and R. Sikorski. A proof of the completeness theorem of Go¨del. Fund. Math, 37:193–200, 1950.
D. Scott and J. de Bakker. A theory of programs. unpubilished notes, 1969.
R. S. Streett and E. A. Emerson. An automata theoretic decision procedure for the propositional mu- calculus. Inf. Comput., 81(3):249–264, 1989.
I. Walukiewicz. Completeness of Kozen’s axiomatisation of the propositional μ-calculus. Inf. Comput., 157(1-2):142–182, 2000.

Appendix
Related definitions for the tableau method
Definition 8.1 [Trace] Given a path P = t0t1 ... of a tableau T (φ, δ), a trace on P is a function T assigning a formula to every node t = (Δ, δ) in some initial segment of P (possibly to all of P), satisfying the following conditions:
if T(t) is defined, T(t) ∈ Δ;
if T(t) is defined and tj ∈P is a son of t; if a rule applied at t does not reduce the formula T(t) then T(tj) = T(t);if T(t) is reduced in t then T(tj) is one of the results of the reduction.
We say that there is a regeneration of a recursive-variable X on a trace T on some path of a tableau, if for t and its son tj on the path, T(t)= X and T(tj)= φ, where X = φ ∈ B.
Definition 8.2 [max-Trace and min-Trace] We call a trace a max-trace iff it is an infinite trace (defined for the whole path) on which the recursive-variable regener- ated infinitely often is a max-variable.
Similarly, a trace will be called a min-trace iff it is an infinite trace where the recursive-variable regenerated infinitely often is a min-variable.
Every infinite trace is either a max-trace or a min-trace; all the rules except (Reg) decrease the size of formulas; hence, every formula is eventually reduced.
Definition 8.3 [Marking] For a tableau T (φ, δ), we define its marking with respect to an SWS Ws = (Πs, Σs, θs) and state π0 ∈ Πs to be a relation M ⊆ Πs ×T (φ, δ) satisfying the following conditions:
(π0, t0) ∈ M, where t0 is the root of T (φ, δ);
if some pair (π, t) ∈ M and a rule other than (mod) was applied at t, then for some son tj of t, (π, tj) ∈ M;
if (π, t) ∈ M and rule (mod) was applied at t, then for every action a for which exists ⟨a⟩ψ ∈ Δ(t):
for every ⟨a⟩-son tj of t, there exists a state πj s.t. π −→a πj and (πj, tj) ∈ M,

and
for every state π s.t. π −→a πj, there exists a ⟨a⟩-son tj of t s.t. (πj, tj) ∈ M.

Definition 8.4 [Consistent Marking] A marking M of T (φ, δ) is consistent with respect to Ws = (Πs, Σs, θs) and π ∈ Πs if and only if M satisfies the following conditions:
local consistency : for any node t = (Δt, δt) ∈T (φ, δ) and state πj = (sj, δj) ∈ Πs,
if (πj, t) ∈ M then δt = δj and for any ψ ∈ Δ(t), Ws, πj |=s ψ;
global consistency : for every path P = t0, t1,... of T (φ, δ) s.t. there exist πi with
(πi, ti) ∈ M for i = 0, 1,.. ., there is no min-trace on P.
Detailed Proofs
Proof of Theorem 5.1 1. W, (m, l),ρ |=5 φ iff there exist ρ0, ρ1,..., ρm s.t.
ρ0 = ρ and for any i = 1,..., m, ρi = JBi)ρi−1 ;
W, (m, l), ρm |= φ.
Let ρs for any i = 0,...,m be defined as: ρs(X) = {(m, [l]) | (m, l) ∈ ρi(X)} for
i	i

any X ∈ V. It is not difficult to verify that ρs
= ρs and ρs
= JB ) s
i−1
for any

i = 1,..., m.
We can prove that for any i = 0,..., m, if W, (m, l), ρi |= φ, then Ws, (m, [l]), ρs |=s
φ by induction on φ. Moreover, Ws, (m, [l]), ρs |=s φ iff Ws, (m, [l]), JB)ρs |=s φ,
where JB)ρs = ρm. Hence, W, (m, l),ρ |=5 φ implies Ws, (m, [l]), ρs |=s φ.
s	5
Ws, (s, δ), ρs |=s φ iff there exist ρs, ρs,..., ρs s.t.
5	0	1	m
ρs = ρs and for any i = 1,..., m, ρs = JBi)ρs  ;

0
Ws, (s, δ), ρs
|=s φ.
i	i−1

Let ρi for any i = 0,...,m be defined as: ρi(X)= {(m, l) | (s, δ) ∈ ρs(X), (s, δ, l) ∈ m} for any X ∈ V. It is not difficult to verify that ρ0 = ρ and ρi = JBi)ρi−1 for any i = 1,..., m.
We can prove that for any i = 0,..., m, if Ws, (s, δ), ρs |=s φ, then W, (m, l), ρi |= φ by induction on φ. Moreover, W, (m, l),ρ |=5 φ iff W, (m, l), JB)ρ |= φ, where JB)ρ = ρm.
Hence, Ws, (s, δ),ρ |=s φ implies W, (m, l),ρ |=5 φ.	 
Proof of Theorem 6.2 Suppose φ0 = (π0, δ0) is satisfied at state π0 in WS under environment ρs. According to the above lemma, there is a consistent marking M of T (φ0, δ0) respect to Ws and π0. We construct a finite SWS Ws = (Πs , Σs , θs ),

with Σs = Σ[φ0] ∪ {εx | x ∈ V}.
f	f	f	f

Let A, B and C be the set of T (φ0, δ0) nodes that are leaves, where the (mod) rule is applied and where the (res) rule is applied respectively. For t ∈ A ∪ B ∪ C, let U (t) be the set of nodes of T (φ0, δ0) consisting of t and all ancestors on the path back up to, but not including, the most recent ancestor in A ∪ B ∪ C; or back up to and including the root if no ancestor of t is in A∪B ∪C. Similarly for t ∈ A∪B, let Uj(t) be the set of nodes of T (φ0, δ0) consisting of t and all ancestors on the path back up to, but not including, the most recent ancestor in A∪ B; or back up to and including the root if no ancestor of t is in A ∪ B.
Let Π1 = {(t, δ) | t = (Δ, δ) ∈ A ∪ B} and Π2 = {(t, δj) | t = (Δ, δ) ∈ A ∪ B, tj =

(Δj, δj) ∈ C ∩ Uj(t)}. The state set Πs = Π1 ∪ Π2. Notice that Ω[φ] is finite, so Πs
is finite.
Then the transition relation θs is defined as:
for any (t1, δ1), (t2, δ2) ∈ Π1, (t1, δ1) −→a (t2, δ2) iff there exists an ⟨a⟩-son tj of t1
s.t. tj ∈ U (t2);
for any (t1, δ1) ∈ Π1 and (t2, δj ) ∈ Π2, (t1, δ1) −→a (t2, δ2) iff there exist an ⟨a⟩-son
tj of t and tj = (Δj , δj ) ∈ C s.t. tj ∈ Uj(t) and tj ∈ U (tj );
2	2  2	2	2
for any (t, δj), (t, δjj) ∈ Π2, (t, δj) −→ε (t, δjj) iff there exist tj = (Δj, δj), tjj =
(Δjj, δjj) ∈ C and (t, δ) ∈ Π1 s.t. tj, tjj ∈ Uj(t).
for any (t, δj) ∈ Π2, (t, δ) ∈ Π1, (t, δj) −→ε (t, δ) iff there exist tj = (Δj, δj) ∈ C s.t.
t ∈ Uj(t).
For any X ∈ X , let ρs (X)= {t = (Δ, δ) | X ∈ Δ}. We need to prove that for any
φ ∈ L[φ0, B0] and t = (Δ, δ) ∈ Πs,
tj = (Δj, δj) ∈ U (t),φ ∈ Δj implies Ws, (t, δj), ρs |=s φ.
f	5
This can be done in a similar way to that in [20, 32].The correctness of the cases
with weight is guaranteed by the region consistency.	 
Proof of Lemma 7.3 Let A = {r ∈ Q+ | x ≥ r ∈ Λ} and B = {r ∈ Q+ | x ≤ r ∈ Λ}. (A1) guarantees that A /= ∅ and if B = ∅, we can derive a contradiction from (R3) for C[X]= X.
Since the two sets are non-empty, the sup and inf exist. Moreover, (R3) can also be used to prove that sup A < ∞. Let sup A = u and inf B = v. If u < v, there exists r ∈ Q+ such that u < r < v. Hence, x ≤ r ∈ Λ, which contradicts r ≤ v. If v < u, there exists r1, r2 ∈ Q+ such that v < r1 < r2 < u. Hence, x ≤ ri,x ≥ ri ∈ Λ for i = 1, 2. Since r2 − r1 > 0, (A3)▶ x ≥ r2 → ¬(x ≤ r1), which proves the inconsistency of Λ - contradiction.	 
Proof of Lemma 7.6 We prove the following properties first:
For any S ⊆L and δ, δ1, δ2 : V → R such that δ = δ1 + δ2, S ☒ δ = (S ☒ δ1) ☒ δ2.
Proof : (⇒) Suppose ψj ∈ S ☒ δ. Then there must exist ψ ∈ S, f—, f+ :
V → Q s.t. f— < δ < f+ and ψj = ψ + f−/f+. Since δ = δ1 + δ2, there exist g—, g+, h—, h+ : V → Q s.t. g— < δ1 < g+, h— < δ < h+ and f— = g— + h—, f+ = g+ + h+. So ψj = ψ + g− + h−/g+ + h+ = ψ + g−/g+ + h−/h+. Since ψ + g−/g+ ∈ S ☒ δ1 by definition, we have ψ + g−/g+ + h−/h+ ∈ (S ☒ δ1) ☒ δ2. Hence, ψj ∈ (S ☒ δ1) ☒ δ2.
(⇐) Suppose ψj ∈ (S ☒δ1)☒δ2. Then there must exist ψ ∈ S, g—, g+, h—, h+ : V → Q s.t. g— < δ1 < g+, h— < δ < h+ and ψj = ψ + g−/g+ + h−/h+. Since δ = δ1 + δ2, there exist f—, f+ : V → Q s.t. f— < δ < f+ and f— = g— + h—, f+ = g+ + h+. So ψj = ψ + g− + h−/g+ + h+ = ψ + f−/f+ . Hence, ψj ∈ S ☒ δ.
2. Let Λ1, Λ2 ∈ Θ such that {Λ1, Λ2} is coherent. Then, for any l ∈ L, Λ1 ☒ (l −
I (Λ1)) = Λ2 ☒ (l − I (Λ2)).
Proof : Let l1 = I (Λ1), l2 = I (Λ2).

(⇒) Λ1 ☒ (l − l1) = Λ1 ☒ ((l2 − l1)+ (l − l2)), which implies Λ1 ☒ (l − l1) = (Λ1 ☒ (l2 − l1)) ☒ (l − l2)) by the above property. Since {Λ1, Λ2} is coherent, Λ1 ☒ (l2 − l1) ⊆ Λ2. So (Λ1 ☒ (l2 − l1)) ☒ (l − l2)) ⊆ Λ2 ☒ (l − l2).
Similarly for the other direction.
With these properties, we can prove the lemma.
Firstly, observe that C ⊆ Θ is coherent iff for any Λ1, Λ2 ∈ C, with l1 =
I (Λ1), l2 = I (Λ2),
Λ1 ☒ (l2 − l1) ⊆ Λ2 and Λ2 ☒ (l1 − l2) ⊆ Λ1, Moreover, Λ1 ☒ (l2 − l1) ⊆ Λ2 iff Λ2 ☒ (l1 − l2) ⊆ Λ1.
Secondly, we observe that all the infinitary rules of our axiomatization have countable sets of instances. We consider the Boolean-completion of L with the same axiomatization (see [14]), namely (an isomorphic copy of) the Boolean algebra of complete ideals in L. The completion is a complete Boolean algebra. Every element in the completion is the supremum (in the completion) of the set of elements in L that are below it. Moreover, L is a dense subset of its completion in the sense that every non-zero element in the completion is above a non-zero element in L. Since the axiomatization is countable, the Rasiowa-Sikorski lemma [15, 29] applied to the completion guarantees that any non-zero element of the completion belongs to an
ultrafilter (of the completion). Since any consistent set S of L corresponds to a non-zero element V S in the completion, by applying Rasiowa-Sikorski lemma to
the completion of L, we obtain that there exists an ultrafilter u of the completion containing V S. This is equivalent to the fact that there exists an ultrafilter u ∩L 
of L that includes S.
We prove that if l = I (Λ) and lj ∈ L, then there exists Λj ∈ Θ s.t. I (Λj)= lj and {Λ, Λj} is coherent. To prove this, we firstly need to prove that Λ ☒ (lj − l) is consistent. The following two properties guarantee the consistency, which can be proved by induction on the structure of the formulas:
If φ ∈ Λ and f—, f+ : V → Q s.t. for any x ∈ V(φ), either f—(x)= f+(x)=0 or
f—(x) < (lj − l)(x) < f+(x), then,
▶ (φ + f−/f+ )+ — f−/— f+ → φ.
For any x Œ r ∈ L,
{(x Œ r)+ f−/f+ | f—, f+ : V → Q, f— < 0 < f+}▶ x Œ r.
Since Λ ☒ (lj − l) is consistent, applying II, it must have a B0-maximal-consistent extension Λj. Since Λ ☒ (lj − l) ⊆ Λj, we also have Λj ☒ (l − lj) ⊆ Λ. Hence, {Λ, Λj} is coherent.
Suppose C = {Λ0, Λ1,..., Λk,.. .} is a coherent set (possibly infinite), li = I (Λs), i = 1,..., k, ... and l ∈ L. Similarly with III, we can prove that Λs ☒(l−li) is consistent. By Property 2 proven above, we have that Λ1 ☒(l−l1)= Λ2 ☒(l−l2)= 
... = Λk ☒ (l − lk)= ... Hence, in order to get a coherent function γ, we only need to get Λ ☒ (lj − l) for any lj ∈ L, and extend it to B0-maximal-consistent set Λl′ by applying II. Let γ(lj)= Λl′ . Obviously, γ is a coherent function.	 

[Proof of Lemma 7.7 Induction on φ. φ∨ψ, ¬φ and X cases are straightforward.
[The case x Œ r]:
(=⇒) Ws, π, ρs |= x Œ r implies for any lj ∈ [l], lj(x) Œ r. So l(x) Œ r, which implies that x Œ r ∈ γ(l).
(⇐=) x Œ r ∈ γ(l) implies l(x) Œ r. Because x ∈ V[φ0, B], so r ∈ Q[φ0, B0]. And since either [l]= n/g or [l]= (n/g, n + 1/g), it is obvious that for any lj ∈ [l], lj(x) Œ r. Hence Ws, π, ρs |= x Œ r.
[The case [a]φ]:

Ws, π, ρs
|= [a]φ iff for any πj = (γj, [lj]) ∈ Πs s.t. π −→a πj, Ws, πj, ρs
|= φ, iff

φ ∈ γj(lj) by induction hypothesis.
(=⇒) Supp. ⟨a⟩¬φ ∈ γ(l).
If γ cannot do any a-transition, then there should be no formula like ⟨a⟩ψ in γ(l) for all l ∈ L – contradiction!
u	j
Suppose γ −→a γ . Let Al = {¬φ}∪ {ψ | [a]ψ ∈ γ(l)}∪ Υl+u and Al′ = {ψ | [a]ψ ∈
γ(lj)}∪Υl′+u for any lj /= l, where Υl′ =	{x ≤ r | r ≥ lj(x)}∪{x ≥ r | r ≤ lj(x)}.
It is easy to see that {ψ | [a]ψ ∈ γ(l)}∪ Υl+u and Al′ for any lj /= l are consistent.
Suppose that Al is inconsistent. Then there exists a set F ⊆ Al s.t. F ▶ φ. If F is finite, (R1) guarantees that [a]F ▶ [a]φ, where [a]F = {[a]ψ | ψ ∈ F}. Otherwise, F ▶ φ is (modulo Boolean reasoning possible involving infinite meets) an instance of one of the rules (R2)-(R3); in all these cases, [a]F ▶ [a]φ is an instance of the same rule for the context C[X] = [a]X. Since F ⊆ Al, [a]F ⊆ γ(l) implying [a]φ ∈ γ(l), which contradicts the consistency of γ(l). Hence, Al is consistent.
Now we prove that for any l1, l2 ∈ L, Al1 and Al2 are such that Al1 + (l2 − l1) ⊆ Al2 .
If l1 /= l, then for arbitrary ψj ∈ Al either [a]ψj ∈ γ(l1), or ψj = x Œ r.
In the first case, [a]ψj + f−/f+ ∈ γ(l2), for all f— ≤ l2 − l1 ≤ f+. So, ψj + f−/f+ ∈ Al . In the second case, since ψj = x Œ r is closed under any resource valuation transfor- mation, for any f— ≤ l2 − l1 ≤ f+, ψj + f−/f+ ∈ Al .
If l1 = i, consider an arbitrary ψj ∈ Al . If ψj /= ¬φ, we geta similar case as above. Otherwise, ⟨a⟩ψj ∈ γ(l), which implies ⟨a⟩ψj + f−/f+ ∈ γ(l2) for all f— ≤ l2 −l1 ≤ f+. So, ψj + f−/f+ ∈ Al .
At this point we can use a similar strategy as in Theorem 7.6 to prove that there exists γjj ∈ Γ s.t. for any lj ∈ L, Al′ ⊆ γjj(lj). Hence, ¬φ ∈ γjj(l + u). According to
the definition of the model, γ −→u	γjj, which implies φ ∈ γjj(l + u) - contradiction!
a
Hence, [a]φ ∈ γ(l).
(⇐=) derives from the definition of θs.
[The case x in φ]:

(=⇒) Ws, π, ρs
|= x in φ implies that there exists πj ∈ Πs s.t. π −→ε
πj and

Ws, πj, ρs |= φ, which implies that φ ∈ γ(l[x '→ 0]) by inductive hypothesis. Since

l[x '→ 0](x)= 0, we have x in φ ∈ γ(l[x '→ 0]). Because γ is coherent function, it is not difficult to prove that x in φ ∈ γ(l).
(⇐=) x in φ ∈ γ(l) implies that x in φ ∈ γ(l[x '→ 0]) by Definition 7.5. Therefore,

φ ∈ γ(l[x '→ 0]) by (A11). By inductive hypothesis, Ws, (γ, [l][x '→ 0]), ρs
|= φ,

which implies Ws, (γ, [l]), ρs |= x in φ.	 
Proof of Theorem 7.10 By the semantics of the alternation-free block sequence, given an environment ρ0, B defines a series of environments: ρs,..., ρs , where
1	m
ρs = JBi)ρs	for any i = 1,..., m. And JB)ρs = ρs .
i	i−1	0	m
We prove that for ρs,i = 0, 1,..., m,
Ws, π, ρs |= φ iff φ ∈ γ(l)
by induction on i. The case i = 0 is given by Lemma 7.7. Suppose the statement holds for k ≥ 0. Then it is still true according to Lemma 7.8 and Lemma 7.9.
And Ws, π, ρs |=5 φ iff Ws, π, ρs |= φ. Therefore, Ws, π, ρs |=5 φ iff φ ∈ γ(l).	 
0	m	0
