Egyptian Informatics Journal 20 (2019) 179–191











Dynamic cluster algorithm for improving percolation of targets in a sensor network (DC-AIPT)
Mohamed Toumi ⇑, Abderrahim Maizate, Mohammed Ouzzif
RITM-ESTC/CED-ENSEM, University Hassan II, Casablanca, Morocco



a r t i c l e  i n f o 

Article history:
Received 2 March 2018
Revised 14 October 2018
Accepted 15 April 2019
Available online 20 May 2019

Keywords:
Clustering algorithm Percolation
Wireless sensor networks Target tracking
Dynamic clustering
a b s t r a c t 

A target tracking in wireless sensor networks consists of two main functions: The detection and the track- ing of the target along its trajectory by means of sensors deployed in an area of interest. Generally, these sensors are not maintainable after deployments. Dynamic clustering algorithms seem to be an effective mechanism for increasing the network’s lifetime. Indeed, this type of algorithms only activates the nodes that are on the trajectory of the target when the latter is at their reach. All other sensors must be in sleep mode. The effectiveness of a monitoring solution must take into account the quality of monitoring, con- nectivity, and the power consumption that are directly affected by the distribution and density of the nodes. We propose to construct optimal dynamic clusters on the target trajectory based on a probabilistic model integrating two fundamental parameters: energy consumption and accuracy. This last metric is evaluated, for the first time in the target tracking algorithms, by the notion percolation.
© 2019 Production and hosting by Elsevier B.V. on behalf of Faculty of Computers and Information, Cairo
University. This is an open access article under the CC BY-NC-ND license (http://creativecommons.org/
licenses/by-nc-nd/4.0/).





Introduction

Tracking by wireless sensor networks involves detecting and locating a target over its entire trajectory across an area of interest. Wireless sensor networks are used to retrieve information about these targets in sometimes hostile environments that are not always accessible to humans. That’s why; it is considered that once they are deployed, the sensors are autonomous. The energy factor is therefore at the center of all researchers concerns in the field of wireless sensors.
Dynamic clustering algorithms appear to be promising mecha- nisms for increased energy efficiency because they only activate nodes that are on the target’s trajectory when the target is at their reach. All other sensors must be in a sleep mode. The choice of this type of architecture is motivated, on one hand, by its efficiency of collaboration, processing and sharing of data and, on the other hand, by the ease of scaling. The coverage of the moving target is

* Corresponding author.
E-mail address: m_toumy@yahoo.fr (M. Toumi).
Peer review under responsibility of Faculty of Computers and Information, Cairo University.
one of the most important problems to guarantee the quality of service in a wireless network. This coverage is closely linked to the preliminary deployment of the sensors in the area of interest. The strategy of deploying sensor nodes in a control zone is a decisive phase that has a major impact on the operation and qual-
ity of service of the network.
The problem of deploying or positioning sensor nodes in a WSN is a strategy used to define the topology of the network, and there- fore the number and position of the sensor nodes. Different prob- lems are studied in the deployment of sensor nodes in a WSN.
Studies in [5–11], which will be presented in the related work, mainly concern the stationary and mobile cases, the mono and multi-objective cases, and finally the deterministic and probabilistic aspects. However; these deployment strategies cannot be adapted to hostile areas of interest that prevent the organized deployment of sensors. In addition, these sensors can also be deprived of the capacity of mobility in order to be able to execute a totally decentral- ized strategy of deployment. In such cases, the use of a random deployment strategy is mandatory. This network creates the chal- lenge of the network connectivity’s quality, which is significantly deteriorated with a poor distribution of sensor nodes in the surveil- lance zone, or even the loss of the network service’s continuity. The problem to solve is how to have a better quality of the monitoring of the moving target with a random distribution of the sensor nodes in the field of interest. The quality of monitoring is measured for the first time by the notion of percolation.



https://doi.org/10.1016/j.eij.2019.04.002
1110-8665/© 2019 Production and hosting by Elsevier B.V. on behalf of Faculty of Computers and Information, Cairo University. This is an open access article under the CC BY-NC-ND license (http://creativecommons.org/licenses/by-nc-nd/4.0/).



For the phenomenon of percolation to appear, two ingredients are necessary: on one hand a solid and hollow structure and on the other hand an agent capable of evolving in this structure. By similarity, we consider that the agent is the target in motion and the hollows are the structure of the clusters formed by the algo- rithm. In Fig. 1 it can be observed that it is not because a rock has a certain porosity that it necessarily leaves water to flow. This porosity must be well structured so that the holes (clusters) con- nect the top of the rock to the bottom of the rock. In other words, there must be a percolation. It is then said that there is a percola- tion when the agent who moves in the hollows of the structure is able to cross it. In the ‘‘no-percolation” regime, the target is lost a moment before proceeding to its detection again, it is thus mani- fested by cover holes in the detection field, These holes are not only usually caused by sensor node failures or by the random deploy- ment of nodes that can leave entire areas uncovered, but also by the structure of the clusters formed by the algorithm during the displacement of the target. A poor design of these structures can create a regime of non-percolation even with sufficient node density as explained above by the porosity of soils. The ‘‘no-percolation” regime is therefore very expensive in terms of the accuracy of coverage of the moving target and the energy con- sumption of the WSN network, since the re-detection process is Very energy-intensive (Ref 2001). We propose a dynamic cluster- ing algorithm for the target tracking that achieves energy efficiency and a better percolation rate regardless of the node deployment strategy. for the first time we adopt the evaluation metric ‘‘Perco- lation” to measure the monitoring quality of the target tracking algorithm in an area of interest with a random distribution of the sensors Fig. 2.
This article is organized as follows: in Section 2, we present related work on tracking of the targets.
Then in Section 3, we will detail the proposed protocol. In Section 4, we present the simulation results. Finally, we end this article with a conclusion in Section 5.

Related works

In target tracking applications, achieving high accuracy of track- ing along with preserving the energy efficiency is considerably and essentially influenced by two parameters:

The nature of the tracking algorithm: The quality of monitoring, connectivity and the power consumption that are directly affected by the nature of the tracking algorithm.



Fig. 1. The phenomenon of percolation.



Fig. 2. The surface of the lunula.


The deployment of the sensor nodes: The problem of deploying or positioning sensor nodes in a WSN is a strategy used to define the topology of the network and therefore the number and position of the sensor nodes.

We present in the following the recent contributions taking into account the two parameters mentioned above.


The nature of the tracking algorithm

Several classifications for monitoring algorithms and protocols have been proposed in the literature [1–6]. Four predominant categories:
Predictive solutions.

Solutions based on a hierarchical architecture.
Solutions based on dynamic cluster architecture.
Hybrid Solutions

This classification takes into account both the type of the net- work architecture and the successive wake-up process of the sensors


Predictives solutions
In this category, the trajectory of the target is predicted in order to activate just the sensors on the way and thus save energy. This prediction can be made using predictive models among such as: Kalman filters [6–9], or using probabilistic mechanisms such as markov chains [10,11].
The Kalman filter (KF) is a prediction model with two stages: prediction and correction. It allows estimating recursively the pro- cess status based on its earlier statements, it aims to estimate the future target position based on the current position.
To get more accurate prediction, an Interactive Multiple Model (IMM) and Kalman filters (KFs) may be used [6]. IMM are suitable for nonlinear and non-Gaussian systems. KFs are linear algorithms that use a series of measurements observed over time, contain noise (random variations) and other inaccuracies, and produce estimates of unknown variables. Due to the non-linear motion of the target, the proposal in [7] uses an extended version of KF (EKF). One of the drawbacks of EKF is that the predicted state may seriously diverge from the actual state because of the EKF’s disruptions during the linearization process.
Contribution [10] addresses the problem of efficiency efficient distributed detection of predicates capturing the motion trends of mobile objects evaluated with respect to a (boundary of a) polygonal region, in the settings in which the (location, time) data is obtained via tracking in Wireless Sensor Networks (WSN).



Predictive solutions have the advantage of making the best use of available information on both the target and the environment. However, they remain inadequate for certain critical contexts (mil- itary applications, intrusion detection, etc.) where even the momentary loss of the target is unthinkable.

Solutions based on a hierarchical architecture
In tree-based tracking approaches, the moving target is sur- rounded by sensor nodes. As the target moves, the tree is dynam- ically configured to add and remove some nodes. The root node of the spanning tree is chosen to be the closest node to the target’s predicted location. In addition, the root collects the sensed data, computes all necessary information about the target, and ulti- mately sends it to the base station [15]. The dynamic lookahead spanning tree based tracking algorithm (DLSTA), proposed in [16], forms look ahead trees along the predicted target direction that aim to reduce the times of missing the target that moves very fast. In DLSTA, when the target is detected by some nodes, they col- laborate with each other and select the closest node to the target as a root node.
The main disadvantage of solutions based on a hierarchical architecture is that the processing of the data is centralized at the level of the root node; this generates a not negligible cost of the information routing. Moreover, since the distance between the root node and the target increases, the rate at which the tree must be reconfigured also Increases. As a result, the tree structure is not efficient for tracking objects at high speed.

Solutions based on dynamic cluster architecture
The solution with dynamic clustering sensors tries to form dif- ferent clusters at different times according to the movement of the target, so a node can be a member of different clusters at different time. Unless static clustering, dynamically it forms the cluster with sensors. Only one cluster is active at each time in accordance to target moving manner. Thus it reduces the energy consumption of sensors in the cluster. It is more reliable than static clustering method. Also the sensor nodes sensing and forwarding redundant information has been reduced. In [12], the authors have mentioned that Dynamic cluster-based approaches provide better bandwidth utilization and higher scalability than other approaches in target tracking.

The hybrid solutions
Hybrid solutions combine several approaches. As an example, a predictive mechanism (markov chain) implemented on a clustered network is proposed in [3*]. By analyzing the intrinsic relationship between tracking performance and energy consumption, the con- tribution cast the scheduling problem of WSN as the optimal policy problem of partially observable Markov decision process, and pro- poses a dynamic cluster members scheduling (DCMS) algorithm to solve the tradeoff between tracking performance and energy con- sumption. The authors of [13,14] propose a dynamic clustering algorithm coupled with the Kalman filter to predict the position of the single moving target. It is described using a state evolution
Virtual force algorithms (VFA) are popular approaches for solv- ing the problem of coverage and deployment of nodes. In this type of algorithm, the nodes are considered points subjected to a force of repulsion and attraction exerted between them and which can move as a function of the calculated force. In [15], the authors pro- posed a virtual force-directed co-evolutionary particle swarm opti- mization (VFCPSO) algorithm to maximize sensing coverage while minimizing the energy consumption in a hybrid wireless sensor network that consists of static and mobile sensors.
The research in [18,19] determined the densities of sensor nodes that achieve a desired area coverage based on Hall’s asymp- totic analysis. They defined the area coverage as the fraction of the geographical area and determined the minimum number of sen- sors to be deployed in the infinite plane using homogeneous Pois- son point processes.
The authors in [20] present a genetic algorithm that seeks a solution to the problem of coverage holes in the network. The pro- posed algorithm determines the minimum number and the best locations of the mobile nodes that must be added after the initial deployment of the fixed nodes. The performance of the proposed genetic algorithm was evaluated by using several indicators; the simulation results show that this algorithm optimizes network coverage in terms of the overall coverage ratio and the number of additional mobile nodes.
In [21], the issue of estimating the number of sensors required to achieve a complete coverage for a desired region was studied. The coverage holes were introduced in [22] as a metric to evaluate the performance of deployment strategies with the presence of failures and placement errors in sensor networks.
In [23], the authors proposed a distributed algorithm that uses Voronoi diagrams in the Laguerre geometry to solve the deploy- ment problem in heterogeneous mobile sensor networks, where sensing radii of sensors are not identical. A Voronoi dia- gram describes the spatial relationship between points that are near each other, or their nearest neighbours. It is a set of connec- tion polygons derived from points or locations. Each line of a Vor- onoi ‘‘region” is halfway between two points. These deployment strategies have the disadvantage of being centralized approaches that necessarily require an organized deployment of sensors. Dis- tributed deployment approaches are limited to the case where nodes do not have the mobility capability to execute a fully decen- tralized deployment strategy. It is important to have an algorithm capable of obtaining the best of the perforations with a random distribution of the nodes. In the following table, we propose a clas- sification of target tracking algorithms in a way that frees itself from the network architecture and focuses on the following criteria:

The detection of the target
The location of the target
Activation mechanisms of the nodes
Support for the density of network nodes

model and a measurement model that assumes linear with Gaus-		

sian errors.
Solution	Detection Localisation Activation
the

This type of solution makes it possible to make the best use of the advantages of the different schemes. The aim is always to have maximum energy efficiency.

The deployment of sensor nodes

The sensor deployment is a critical issue since it reflects the cost and the surveillance capability of a wireless sensor network. A lot of research has been proposed for better node deployment efficiency.



Predictives solutions: Kalman filters [6–9],
mechanisms density
of the nodes
U	U



(continued on next page)




(continued)
Solution	Detection Localisation Activation


the
A lune is a plane figure bounded by two circular arcs of unequal radii, i.e., a crescent. (By contrast, a plane figure bounded





Predictives
mechanisms density
of the nodes
U	U
by two circular arcs of equal radius is known as a lens.) For circles of radius ‘ɑ’ and ‘ß > ɑ’ whose centers are separated by a distance C, the area of the lune is given by the Eq. (1) [25]:
A = a2 tan—1 a2 —b2 +c2 + cos—1 b—c + tan—1 ,ﬃﬃﬃﬃﬃﬃﬃﬃbﬃ—ﬃﬃﬃcﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ 

Markov Chain [12,13]
Solutions based  U	U
—b2htan—1 a2 —b2 —c2 + pi + 2D

2	a2sec 1	2ac	 b2sec 1 


2bc

on a hierarchical
= D +
a2 — b2 — c2  —
—

b2 + c2 — a2

architecture. [15,16]
Solutions based on dynamic


U	U	U
where
D = 1 q(ﬃﬃaﬃﬃﬃﬃ+ﬃﬃﬃﬃﬃbﬃﬃﬃ+ﬃﬃﬃﬃﬃcﬃﬃ)ﬃﬃ(ﬃﬃbﬃﬃﬃﬃ+ﬃﬃﬃﬃﬃcﬃﬃﬃ—ﬃﬃﬃﬃﬃaﬃﬃ)ﬃﬃ(ﬃﬃcﬃﬃﬃ+ﬃﬃﬃﬃﬃaﬃﬃﬃﬃ—ﬃﬃﬃﬃbﬃﬃﬃ)ﬃﬃ(ﬃﬃaﬃﬃﬃ+ﬃﬃﬃﬃﬃbﬃﬃﬃﬃ—ﬃﬃﬃﬃﬃcﬃﬃ)ﬃ


(1)

cluster architecture. [14]
The Hybrid solutions [17]



U	U	U
In general, the signal received by a node Ni from a node Nj is
decreased with the distance between the two nodes.
We are adopting the mitigated disk detection model [17] to estimate the distance d (Ni, Nj) from the received signal. The model equation is written as follows:

Virtual force algorithms (VFA) [18–20]
U	U
ri =
b
da (Ni;Nj)
0	else
if d(Ni; Nj) 6 rs	(2)


The proposed algorithm

Percolation concept

The percolation theory was developed to mathematically deal with the disordered media, in which the disorder is defined by a random variation in the degree of connectivity [24]. The main con- cept of percolation theory is the existence of a percolation thresh- old, defined in the following way. Suppose p is a parameter that defines the average degree of connectivity between various sub- units of some arbitrary system. When p = 0, all sub-units are totally isolated from every other sub-unit. When p = 1, all sub-units are connected to some maximum number of neighboring sub- units. At this point, the system is connected from one side to the other, since there are paths that go completely across the system, linking one sub-unit to the next along the spanning cluster. In the follow-
ri: is the signal received from the node Nj
b: is the original strength of the signal transmitted by a node.
a: attenuation coefficient depending on the environment.
rs: is the detection range of the node.
d Ni; Nj : is the Euclidean distance between the two nodes Ni and Nj

To facilitate the description of the protocol, we adopt the fol- lowing notations:

Rt: The node communication range.
rs: The node detection radius.
R(ni, rs): the detection region of the node Ni with the detec- tion rangers
G: The wireless sensor Network G = (V, E)
E: The set of all links between nodes. The set E is defined by:
E = {e = (v ,v )| {v ,v ∈ V2 ∩d(v ,v ) ≤ R	∩ i – j}


Coffee percolation, where the solvent is water, the permeable sub- stance is coffee grounds, and the soluble constituents are the chemical compounds that give coffee its color, taste, and aroma Movement of weathered material down on a slope under the earth’s surface
Cracking of trees with the presence of two conditions, sunlight and under the influence of pressure
Robustness of networks to random and targeted attacks
Transport in porous media
Epidemic spreading
The spread of fire in a forest

The concept of percolation is therefore widely used in many applications; our algorithm will use this formulation for the first time to measure the accuracy of the target tracking in wireless sen- sor networks.
The system model and assumptions

Before heading into the technical details of our contribution, we first give some definitions and notations that will be used later in our paper.
V: The set of all Nodes: V = {v1 ,v2.. .,vn}
The cluster Ci is defined by:
Ci:{vj |d (vi ,vj )6Rt}, vi is the Cluster Head Node.
L(t): The location of the target at time t

We assume that nodes are initially in the state of sleep which guarantees minimal energy consumption. Indeed, in this state, all the equipment units, which make up the sensor, are off, except for a processing unit and a low power channel for receiving the activation-up messages. Upon receiving a wake-up message, each node has to start all these hardware units.
It is also assumed that the nodes have knowledge of their geo- graphical positions and the first target detection is done. This task is beyond the scope of this project.
The wireless sensor network is abstracted as an undirected
graph G = (V,E), where V represents the set of wireless nodes and E C V2 is the set of edges that gives the available communications: an edge e = (u,v) belongs to E if and only if u is physically able to transmit messages to v and vice versa. Each sensor u ∈ V is assigned a unique value to be used as an identifier Nodeid (u) and all links in
the graph are bidirectional. The neighbourhood set of a node u is represented by N1(u) as in equation (2). The size of this set is known as the degree of u, denoted by d1 (u).

N1(u) = {v ∈ V | v–u Λ (u; v)∈ E}	(3)
The set of 2-hop neighbors is represented by N2 (u) as in equa-
tion (3).
N2(u) = {w ∈ V |(v; w)∈ E where v ∈ N1(u)Λ w Λ w ∈ N1(v)}
(4)

Enabling sleep nodes (Prediction)

In our contribution, we propose an algorithm that uses the acti- vation of sensors located on the way to the target by over- listening nodes belonging to the active cluster. The activation process is described as follows:
Let Ck:{vj , d (CH,vj )6 Rt } be the set of the members of the
active cluster, is defined
NNeig = vi ∈ V ∩C | Evj ∈ CK ; d vi ; vj  6 Rt
NNeig is the set of all neighboring nodes to the active cluster  CK.
Dk = {vj ∈ Ck|E t0, d (L(t0 ),vj )6 rs} is the set of the nodes belong-
ing to the active cluster that detected the target at some point. It
also defines the set of the nodes that will be activated by the pre- diction process based on there over-hearing messages by:
NActiv = {vi ∈ V ∩C Evj ∈ DK ; d (vi ; vj ) 6 Rt}
It is clearly that NActiv @NNeig that is to say, the set of the nodes
that will be activated is only a subset of the active cluster neigh- bors. This improves the energy efficiency by activating just the nodes that potentially will detect the target. In Fig. 3, the nodes in red form the set Dk, by raising the collected data of the target; will create by over-listening the wake-up wave (The chopped part). The green nodes that form the set NActiv will be immediately activated since they are within the range of the wake-up wave. Prediction schemes have been proposed in recent years to predict the position of the target and thus to activate only the nodes that are on the trajectory of the target. The extended Kalman filter [8] combined with a direction change detection mechanism such as

step and lead to additional calculations and therefore a Precious time wasted needed to effectively respond to the real-time con- straint imposed especially by the high-speed targets. This can be very penalizing in terms of a percolation of the target.
The proposed activation model is based on the overhearing of the active cluster member sensors, which makes it possible to wake the other nodes on the target route and increase the percola- tion of the target by having a high probability to get an active clus- ter waiting for him.

Selection of CHs

After the prediction phase described in Section 3 B, next comes the target tracking phase by constructing optimal clusters once the target detected. We start this paragraph by an estimation of the percolation in a cluster in D-1, after proposing the algorithm of the selection of CH and the construction of clusters in D-2.

The estimation of the percolation
The deployment of the sensor networks can follow regular or arbitrary topologies. In case of a random topology, several works, such as those proposed in [18,19], have shown that the random graphs according to a Poisson distribution offer a better represen- tation of the deployment of nodes in a WSN.
In a network following the Poisson distribution with an inten- sity k, each Node N has a number of random neighbors b taking the value k has a probability P such that:
kk
P(b = k) = k e—k	(5)
In the Eq. 5, the parameter k of the Poisson law represents the average degree of the network.
To estimate the percolation, two clustering schemes are defined to track the target:

A schema with overlap (Fig. 4.a)
A schema without overlap (Fig. 4.b)

CuSum [17] make it possible to efficiently calculate the future coordinates of the target and accordingly to awaken the sensors.
The prediction filters require message exchanges and some-


We define the percolation @i in a Cli cluster as:
R s (P(b P 1))dt

is time-consuming. Moreover these algorithms use a correction
P b P 1 : The probability that it has at least one node to cover the target.
s : The average duration of the target’s presence in the Cli
cluster.






Fig. 3. The Activation of inactive nodes.	Fig. 4. Overlapping of the clusters.


With:
1
D = 4 pﬃ(ﬃrﬃﬃsﬃﬃﬃ+ﬃﬃﬃﬃﬃRﬃﬃﬃﬃ+ﬃﬃﬃﬃCﬃﬃﬃtﬃﬃ)ﬃﬃ(ﬃﬃRﬃﬃﬃ+ﬃﬃﬃﬃﬃCﬃﬃﬃtﬃﬃﬃ—ﬃﬃﬃﬃﬃrﬃﬃsﬃ)ﬃﬃ(ﬃﬃCﬃﬃﬃtﬃﬃ+ﬃﬃﬃﬃﬃrﬃﬃsﬃﬃﬃ—ﬃﬃﬃﬃﬃRﬃﬃ)ﬃﬃ(ﬃﬃrﬃﬃsﬃﬃﬃ+ﬃﬃﬃﬃﬃRﬃﬃﬃ—ﬃﬃﬃﬃﬃCﬃﬃﬃtﬃ
The value of the percolation must therefore be written:

—(pr2 — At  )
—k  1	R s	pr2






2D+r2 sec—1 2 rs *Ct  — R2 sec—1 2 R*Ct


—k  1
—k R s
s  t	t  s
pr2

e
∂i = 1 —
t + e
t1 e
s	dt
s
(14)




Fig. 5. The evolution of the target in a clustering scheme without overlap.


Estimation of percolation in the case of a non-overlapping
We suppose that:

R	2 rs the radius of transmission is twice the radius of detection.
The speed of the target is substantially constant within the
same cluster, which amounts to saying that: t1 = 2R—rs.

schema
To estimate this percolation, consider the scheme of Fig. 5. The

A	2	r2 sec—1  4r2 

4r2  8r2 
s	2R


15

intensity of the Poisson law is autonomous when the target moves through the cluster CLi, but once it reaches the border with the cluster CLj, the calculation of the intensity must take into account that the cluster CLj is not still active (Eq.9).
R s (1 — P(b = 0))dt
t =  D + s

D = ,ﬃ1ﬃﬃ5ﬃﬃﬃ r2
—r2  —
s  7r2	(  )

∂i =
s	(7)
 ,ﬃﬃﬃﬃﬃﬃ	!

∂i =
s	se—kt  dt
s	(8)
s	4	s

∂i = 1 —
t1
s	( )

1	 3 4e
3 100  e	16


t1 : Is the instant from which the target field Cd reaches the boundary between the two clusters Cli and Clj (see Fig. 5). From the instant t1 to the instant s the intensity k of the Poisson distri- bution will depend on the time (this parameter will be denoted by
kt)
e—k t1 + R s e—kt  dt )
∂i =  —	/  —k + /	k —k	(  )
The estimation of percolation in the case with an overlapping
scheme
The rate of percolation is written as:
R s (P(b P 1))dt



i


We have
s
= (pr2 — At  )


where A


Is the area of the lunule

R s (1 — P(b = 0))dt

formed by the evolution of the detection field of the target Cd and the radius formed by the cluster CLi. The expression of At is written as:
At = r2

On the basis of the hypothesis which ensures the homogeneity of the intensity of the Poisson distribution, we can deduce that in case of an overlapping clustering scheme we have:

 r2 — R2 + C2!
 R — Ct 
R — Ct
!!	kt = k6t ∈ [0 — s]

* tan—1  s  4	+ cos—1	r
2	 rs — R2 — C2! p!
+	p(ﬃﬃrﬃﬃsﬃﬃﬃ+ﬃﬃﬃﬃRﬃﬃﬃ—ﬃﬃﬃﬃﬃCﬃﬃﬃtﬃ)ﬃﬃ(ﬃﬃrﬃﬃsﬃﬃ)ﬃ
The target, when approaching the border area of the cluster Cli, can be taken by the new cluster Clj which must be in the opera-

— R tan—1
4D	+ 2
+ 2D


(11)
tional mode.
The percolation is then written:

Ct : The Euclidean distance separating the center of the CLi clus- ter and the target.
A	2	r2sec 1  2 rs * Ct	!
∂i = 1 — e—k	(17)
The Fig. 6 illustrates the percolation rate as a function of the
average network degree and therefore the number of sensors

t = D + s
—
R2 — r2 — C2
deployed in a cluster.


— R2sec—1 
s
2 R * Ct
R2 + C2 — r2
t
!	(12)
At low a density (up to k = 1.7 now called critical intensity kc) the adoption of a clustering scheme with a high overlap ratio is better in terms of a percolation compared to a non-overlapping

t	s	clustering scheme that approaches a VORONOI diagram. From kc,

DTv = (

  rs 
MIN(v)
if ∂(v) > kc

(18)

random ()	else
∂(v)	: The density of the node v
kc : Critical density.
MIN(v)= {Min{d(vi ,v)} , V vj ∈ NActiv(v)}
Ck:{vj , d (CH,vj )6Rt} be the set of the members of the active cluster, is defined
C K

G: The set of all nodes
NNeig is the set of all neighboring nodes to the active cluster CK·

Dk = {vj ∈ Ck|E t0,d (L(t0 ),vj )6 rs} is the set of the nodes belong- ing to the active cluster that detected the target at some point. It
also defines the set of the nodes that will be activated by the pre- diction process based on the over-hearing messages by:

Fig. 6. The curve of the two percolation functions.
N	v nv	G C—  v	D  d v v  6 R o

both strategies have the same percolation rate regardless of the number of the sensors deployed.
It is therefore a question of finding a compromise between the percolation rate and the energy consumption. Indeed the overlap- ping of the clusters generates excessive energy consumption for the same displacement of the target compared to a clustering with- out overlaps [25], at the same time, clustering with overlap is much better in the case of low density, in order to have a better rate of percolation.

The selection of CHs

The cluster -building process is illustrated in Fig. 8. Each node v detecting the target must generate a DT timer competition (Eq. 18) after which it passes to the node Cluster-Head state and subse- quently sending the messages MSG_Inv to recruit member’s nodes.
DT is comprised of two parts, as shown in Eq. (4). The first term of DT aims to create a repulsion effect between adjacent clusters and therefore allows distances between clusters each other.
Indeed, increasing the distance between the candidate node to be CH and the active cluster nodes, decreases its competition timer, and therefore greater probability of being a cluster - Head. This metric reduces overlap and at the same time the number of the generated cluster, and therefore better energy efficiency.




Fig. 7. The Cluster overlap area.
Most dynamic clustering algorithms for tracking target build dynamic clusters along the path of the moving target; this dynamic aspect is relative to time since temporal clusters are built on demand. Our algorithm tries to acquire another dynamism dimen- sion, by designing clusters whose topological form changes accord- ing to the density of the network as the target moves, to improve the rate of the percolation.
Our algorithm forms more compact clusters with considerable overlap since the density of the sensor nodes is less than the crit- ical density kc and tries to acquire a repulsive effect between the adjacent clusters in order to minimize their overlaps because the density is considerable, as shown in Fig. 7.
The case of the formation of two or more clusters at the same time is possible with the counter used in the formula Eq. 18; however this case has a very low probability to be realized. In any case, the algo- rithm must behave in a fluid way, ensuring that data collection con- tinues even when there is a need to destroy a cluster. Fig. 8 shows how the algorithm behaves in the case that a CH receives an invita- tion message MSG_INV(ID’_CH) from another CH having
The Id ID’_CH. In this case, the CH with the lowest ID must send MSG_Dest (ID’_CH) destruction messages for those members, which immediately change membership to the winning cluster.

Performance evaluation

In this section, we present the simulation settings, evaluation metrics and we discuss the obtained results. We have used the NS3 simulator to perform this task. In the next experiments, the S -MAC IEEE protocol is used as a model for the data link layer. We are also fixing the bandwidth of all nodes to 2 Mbit/s and Rt scope nodes to 200 m while sensing to 50 m. The parameter values of the simulation are summarized in Table 1.
The results presented in this section are corresponding to an average value of the results obtained by simulation of several sce- narios chosen in a random manner.
To highlight the contributions of this algorithm, we will focus on the following metrics:

The percolation of the target in the observation field.
Tracking accuracy: This represents the probability of having the right target’s location. The average of the Euclidean distances, between the estimated location and the real location, obtained is used to measure the tracking error.




Fig. 8. The flowchart of the algorithm.


Energy consumption: which represents the total energy con- sumed as a result of communication of the sensor nodes with each other after the simulation begins.



Table 1
The simulation Parameters.

parameter	values


deployment surface	(0,0) X (10000 m, 10000 m)
Displacement of the target	Random
Eelec	50nJ/bit
Eamp	10pJ/bit/m2
Eamp2	0.0013pJ/bit/m4
Initial energy of a sensor	10 J
Sleep mode	0.005 J/seconde
Active mode	0.078 J/seconde

The main difference between the rate of the percolation of the target and the tracking accuracy is that percolation expresses prob- ability value in relation to time, whereas the tracking accuracy is related to the tracking space. Most of the tracking algorithms try to best express this metric, whereas the percolation metric is implemented for the first time in our algorithm. We are comparing our algorithm DC-AIPT with two dynamic clustering schemes for the target tracking cited in Section 2: CHEW [18] is using, as the prediction method, the overhearing messages from the active clus- ters, the second solution DKF DC [20] is using Kalman filters to pre- vent the trajectory of the target.

The mobility model chosen for the target

This part presents the mobility model used for the target to obtain the simulations. The Markov Gauss model can be totally



random, partly random or deterministic according to a parameter of the degree of chance adjustment a, with 0 a 1. Initially, a speed and a direction are assigned to different mobile nodes. For fixed time intervals, movement occurs by updating the speed and
direction. More precisely, the speed values and the next position at the moment are calculated from those of (n-1). The values of speed, direction and position at every moment, depend on the val- ues of the previous moment which creates regular movements of the nodes. Fig. 9 shows the movement of a node according to the Markov Gauss model with three different values of the parameter
a. When a is equal to 1, the motion is linear. The node keeps them
values of initial speed and direction


The target percolation rate

We begin the evaluations of the mean performances of our algo- rithm DC-AIPT by studying the impact of the density and the speed of the target on the Rate of percolation. Then we study the impact of the critical density kc on this rate.


The percolation versus the density and speed of the target
We vary the density of the network at the same time as the speed of the target. We change the number of nodes from 100 to 1000 in steps of 100. For each network size, we change the target speed from 10 m/s to 900 m/s in steps of 100. We obtain the curve
representing the average percolation rate as a function of the den-



Fig. 10. The percolation versus the density and the target speed.




The percolation versus the density and the critical density kc
Remember that our algorithm uses the DT counter below to build the clusters.

sity and the speed of the target (Fig. 10).
We note that, except for high speeds of the target (from
DT v = (
  rs 
MIN(v)
if ∂(v) > kc

700 m/s), the rate of the percolation achieved by the algorithm is 100% for high node density, and remains very acceptable dis- playing up to 65% for a very low density. With the increase in speed the percolation rate decreases. In the case of low densities, we observe a negative peak which drops the percolation rate to 2%. We observe the same phenomenon as with large densities with a more moderate drop slope than with low density. This can be explained by the fact that for high velocity, the target sim- ply escapes from most trained clusters, and there is a relapse of the rate of percolation.
random ()	else
The graph in Fig. 11 clearly shows that the percolation of the target increases as the density of the network (number of sensor nodes) increases, which is quite natural given the very definition of percolation. On the other hand, the percolation rate is much bet- ter for low values of the critical density for any value of the net- work density. This can be explained by the fact that with low values of kc the algorithm tends to build adjacent clusters with a considerable overlap rate which increases the rate of percolation at the expense of energy performance. The energetic aspect will be studied in the following section.


	

Fig. 9. Markov Gauss motions with three values of a.	Fig. 11. The percolation versus the density and the critical density.





The list of abbreviations of the graph:
(ID_CH):the identifier of the Cluster Head.
∂(v): The density of the node v.
kc : Critical density.
MSG_Dest(ID’_CH): destruction message from ID’_CH. MSG_INV: invitation message to be a member of the cluster.
ACK: acknowledgment.
ID_Node: the identifier of the node.
Cluster_Vector: local database to store the IDs of the member nodes



The accuracy of the algorithm

The accuracy of tracking algorithms implies low probability of missing the moving object. It is determined by square root of the difference between the predicted and actual location of the object in two dimensions.
The prediction error is given by:
Epr = q ﬃﬃﬃXﬃﬃﬃﬃﬃﬃﬃﬃﬃ—ﬃﬃﬃﬃXﬃﬃﬃﬃﬃﬃﬃﬃﬃ ﬃﬃ2ﬃﬃﬃ+ﬃﬃﬃﬃﬃ ﬃﬃYﬃﬃﬃﬃﬃﬃﬃﬃﬃ—ﬃﬃﬃﬃﬃYﬃﬃﬃﬃﬃﬃﬃﬃﬃ ﬃﬃ2ﬃﬃ
where the Epr is the prediction error of predictor at time t and (Xpre, Ypre) are the calculated coordinates and (Xr, Yr) are the real ones.
Simulations are conducted to study the influence of the sensor density on tracking error. It was carried out with variable and ran- dom speeds of the target.
Fig. 12 (12.a target speed v = 500 m/s and 12.b with v = 1000 m/ s) depicts the accuracy of the algorithms cited in the related work part (DC-AIPT, CHEW and DKF DC) with varying the sensor density. The tracking error of all algorithms is relatively small and acts almost similarly, since as the sensor density increases more and more, the sensors get closer to each other more and more. This makes the localization of the target more accurate which in turn makes the probability that the dynamically formed clusters miss the target is lower and lower.
The DKF DC and our proposed model have substantially low prediction error than the CHEW algorithm. The EKF predictor uses a first-order linearization that sometimes leads to instabilities dur- ing simulation time, especially for faster speeds of the target. Our algorithm provides better precision thanks to the wake-up waves described in Section 3.C. This can be proved again by looking at Fig. 13which represents an example of a real trajectory against

pre
real
pre
real
those obtained by the proposed algorithms.
For normal trajectory, the three algorithms record identical results; on the other hand our algorithm presents the best results in case of a trajectory presenting sudden changes of directions.

The energy consumption

We rely on the energy model whose parameters are summa- rized in Table 1. To evaluate the energy consumed during the mon- itoring process, we record the energy cost of different tasks such as the sensors startup, the time of the activity, the location and the messages exchanged with the CH. The simulation time will be







Fig. 12. Tracking error versus density.
Fig. 13. An example of trajectories obtained by the three algorithms compared with the real trajectory of the target.



set to 200 s. The results presented in this section are corresponding to the mean value of the results obtained by simulation of several scenarios selected in a random manner. The proposed clustering algorithm has been designed with the aim of providing a solution which makes it possible to obtain a better rate of percolation inde- pendently of the distribution of the sensor nodes while having a better energy efficiency.

Impact of the critical density kc on energy efficiency

We theoretically demonstrated in section D-1 that the critical intensity is kc0 = 1.7 to have a compromise between percolation


Fig. 14. Energy consumption versus density and critical density.



Fig. 15a. Energy consumption versus density (target speed 500 m/s).



Fig. 15b. Energy consumption versus density (target speed 1000 m/s).

rate and energy consumption. To analyze the impact of the param- eter kc, we consider the networks with sizes from 100 up to 1000 nodes. For each network size, we vary the value of kc from 0.2 to 5, then we measure the total energy consumed. The 3D graph of Fig. 14 shows the result of these tests. The increase in the number of nodes naturally increases the energy consumed but with differ- ent proportions according to the parameter kc0 in fact the graph has an apparent convexity when the critical intensity is close to the value found theoretically: kc= 1.7. The energetic gain is obvious and can reach 30% according to the distribution of the nodes. This proves once again the rigor of our approach. In the next section, we want to compare the energy efficiency of the proposed solution
tion. We can further observe that DC-AIPT algorithm, with kc 1.7, with the clustering schemes mentioned in the related work sec- outperforms all other algorithms in term of energy consumption as
it is reduced by 15 and 30% compared to that in CHEW and DKF DC algorithms, respectively. Adopting a new prediction method that guarantees the percolation and the precision in the formed clus- ters, that is extremely helpful in mitigating the energy consump- tion. This can be explained by the fact that our algorithm while having for its main objective the improvement of the percolation of the target, had at the same time reduced the percentage of the disappeared target. This logically increases the number of nodes awakened in the network to redetect the target before monitoring. This percentage is obviously important in the other two algorithms Fig. 15a,b.


Conclusion

In this article, we have proposed a clustering algorithm for tar- get tracking. Our algorithm has built dynamic clusters on demand and for the first time it has included the concept of target percola- tion as a major criterion of performance. The main objective of our solution is to handle the trade-off between the percolation of the target, tracking precision and energy consumption.
Thus, a counter for the selection of CHs has been proposed. This term allows creating a propulsive effect between clusters in case of high density around the target, which makes it possible reducing the overlaps and at the same time the number of generated cluster, and thus a better energetic efficiency. In case of low local density, the algorithm tries to create clusters with a large overlap ratio to



have a better percolation. The target evolves within the network, which behaves like a spring that relaxes and compresses itself according to the density encountered.
We have justified the correctness of our analysis through proof, and validated the effectiveness of the algorithm with extensive simulation experiments.
The simulation results have demonstrated the effectiveness of the proposed models and the prevalence of our algorithm com- pared with other algorithms considering different network densi- ties, target speeds, and network dimensions.
As future work is concerned, we are planning to design a variant of the ATHVC algorithm to adapt to an environment with multiple targets. This type of monitoring is complex and involves additional steps, including identification to help differentiate and count tar- gets. In addition, our new evaluation metric for target tracking algorithms called percolation should be, through further study, evaluate the recently proposed monitoring algorithms in consulta- tion with the authors of these articles.

Acknowledgements

The authors thank the anonymous reviewers for helpful comments that increased the quality of the article in particular Mr. Lhoussain SIMOUR.

Funding

This work has received funding from the laboratory RITM-ESTC/ CED-ENSEM, University Hassan II Casablanca, Morroco.

Authors’ contributions

This work is done in the context of the Ph.D. studies of MT under the supervision of AM and MO. All authors read and approved the final manuscript.

Ethics approval and consent to participate

Not applicable.

Consent for publication

Not applicable.

Competing interests

The authors declare that they have no competing interests.

Appendix A. Supplementary data

Supplementary data to this article can be found online at https://doi.org/10.1016/j.eij.2019.04.002.

References

Wang X, Wang S. Hierarchical deployment optimization for wireless sensor networks. IEEE Trans Mobile Comput 2011;10:1028–41.
Chen Jiming, Cao Kejie, Li Keyong, et al. Distributed sensor activation algorithm for target tracking with binary sensor networks. Cluster Comput 2011;14 (1):55–64.
Bartolini N, Calamoneri T, La Porta T, Silvestri S. Autonomous deployment of heterogeneous mobile sensors. IEEE Trans Mobile Comput 2011;10:753–66.
Wu Bo, Feng Yan-Peng, Zheng Hong-Yan, et al. Dynamic cluster members scheduling for target tracking in sensor networks. IEEE Sens J 2016;16 (19):7242–9.
Bernard Thibault, Bui Alain, Pilard Laurence, et al. A distributed clustering algorithm for large-scale dynamic networks. Cluster Comput 2012;15 (4):335–50.
Vasuhi S, Vaidehi V. Target tracking using Interactive Multiple Model for Wireless Sensor Network. Information Fusion 2016;27:41–53.
Sabet MT, Fathi AR, Mohammadi Daniali HR. Optimal design of the Own Ship maneuver in the bearing-only target motion analysis problem using a heuristically supervised Extended Kalman Filter. Ocean Eng 2016;123:146–53.
Hirpara Kirti, Rana Keyur. Energy-efficient constant gain kalman filter based tracking in wireless sensor network. Wireless Commun Mobile Comput 2017;2017.
Zhang Shouzhen, Xie Changjun, Zeng Chunnian, et al. SOC estimation optimization method based on parameter modified particle Kalman Filter algorithm. Cluster Comput 2018:1–10.
Avci Besim, Trajcevski Goce, Tamassia Roberto, et al. Efficient detection of motion-trend predicates in wireless sensor networks. Computer Commun 2017;101:26–43.
Christy Jeba Malar A, Kousalya G, Maode MA. . Markovian model based indoor location tracking for Internet of Things (IoT) applications. Cluster Comput 2017:1–8.
Darman R, Ithnin N. Object tracking methods in wireless sensor network: Network structure classification. In: Proceedings of the International Conference on IT Convergence and Security. Beijing: IEEE Xplore Press; 2014.
p. 1–3. doi: https://doi.org/10.1109/ICITCS.2014.7021793.
Demigha O, Slimane HO, Bouziani A, Hidouci W-K. Energy efficient target tracking in wireless sensor networks with limited sensing range Barcelona, Spain. Proceedings of the 6th International Conference on Systems and Networks Communications, 2011.
Wang Xingbo, Fu Minyue, Zhang Huanshui. Target tracking in wireless sensor networks based on the combination of KF and MLE using distance measurements. IEEE Trans Mobile Comput 2012;11(4):567–76.
Wang Xue, Wang Sheng, Ma Jun-Jie. An improved co-evolutionary particle swarm optimization for wireless sensor networks with dynamic deployment. Sensors 2007;7(3):354–70.
Demigha Oualid, Hidouci Walid-Khaled, Ahmed Toufik. On energy efficiency in collaborative target tracking in wireless sensor network: a review. IEEE Commun Surveys Tutorials 2013;15(3):1210–22.
Alaybeyoglu Aysegul, Kantarci Aylin, Erciyes Kayhan. A dynamic lookahead tree based tracking algorithm for wireless sensor networks using particle filtering technique. Comput Electric Eng 2014;40(2):374–83.
Liu B, Brass P, Dousse O, Nain P, Towsley D. Mobility improves coverage of sensor networks. In: Proceedings of the 6th ACM International Symposium on Mobile ad hoc Networking and Computing (ACM MobiHoc 2005). IL, USA: Urbana-Champaign; 2005. p. 300–8.
Liu B, Towsley D. A study of the coverage of large-scale sensor networks Piscataway, NJ, USA. In: IEEE International Conference on Mobile Ad-hoc and Sensor Systems. p. 475–83.
Banimelhem Omar, Mowafi Moad, Aljoby Walid. Genetic algorithm based node deployment in hybrid wireless sensor networks. Commun Network 2013;2013.
Adlakha S, Srivastava M. Critical density thresholds for coverage in wireless sensor networks New Orleans, LA, USA. In: 2003 IEEE Wireless Communications and Networking (WCNC). p. 1615–20.
Balister P, Kumar S. Random vs. deterministic deployment of sensors in the presence of failures and placement errors Rio de Janeiro, Brazil. In: Proceedings of IEEE INFOCOM 2009. p. 2896–900.
Pavone Marco, Arsie Alessandro, Frazzoli Emilio, et al. Distributed algorithms for environment partitioning in mobile robotic networks. IEEE Trans Automatic Control 2011;56(8):1834–48.
Broadbent Simon R, Hammersley John M. Percolation processes: I. Crystals and mazes. In: Mathematical Proceedings of the Cambridge Philosophical Society. Cambridge University Press; 1957. p. 629–41.
Dunham William. Journey Through Genius: The Great Theorems of Mathematics. Wiley; 1990.



Mohamed Toumi is a graduate engineer in 2002 from school MOHAMMADIA (EMI) RABAT MORROCO, cur-
rently he is working as a professor at OFPPT (Morocco) . He joined the laboratory RITM - ESTC/CED- ENSEM, University Hassan II in 2013. In the years past, he supervised a number of students PFE, participated in several research projects, acted as program committee member, organizer of numerous scientific conferences. His research interests cover the field of communication networks, especially autonomic, self-organized and wireless mobile ad hoc networks. His core research area deals with service provisioning in mobile ad hoc net- works.



Abderrahim Maizate received his Engineering Diploma in Computer Science from the Hassania School of Public Works since 2004 and DESA degree from ENSIAS in 2007. He received with honors the Ph.D. degree in Computer Networks and Telecommunications from Chouaib Doukalli university in El jadida in 2014. Since October 2014 he has been working as a Professor at the Computer Engineering Department at the Higher School of Technology of Casablanca (ESTC-UH2C). He is cur- rently the Deputy Director of the Network, Computer, Telecommunications and Multimedia Laboratory at the same School and member of the research center TIC-
DEV. He is also an IEEE member. His research interests include fields such as Wireless communications, WSN , smart cities, NDN, Big-data, cloud computing and security. He is also a TPC member and a reviewer for many international confer- ences. He is a member of the publishing committee of the Mediterranean Telecommunication Journal and member of the organizing committee of the international conferences SysCo 16 and CMT’2018.
Mohammed Ouzzif joined the Higher School of Tech- nology in 1996 as assistant professor. He supported his Ph.D. degree in 1999 at the Faculty of Science of Rabat. The research presented during this defense concerns the specification and the formal description of videocon- ferencing systems using the SDL and Mondel language. In 2005, he presented his research for the National Doctorate at the National School of Computer Science and Systems Analysis. He has made contributions in the dynamic management of resource sharing in a collabo- rative system. This has been elaborated by distributed algorithms allowing the extension of static distributed
mutual exclusion algorithms for the support of new joins and departures dynam- ically. These algorithms are formally specified using finite state machines and their verification using the model checking technique. Currently, Mr. Mohammed OUZ- ZIF’s research interests concern distributed systems and networks. He has pub- lished a considerable number of scientific articles in various journals, conferences and workshops and has given many regular and invited lectures. He is a Steering Committee member of the NYTES on Networked System, and he served on the Technical Program Committees of around 40 international conferences and work- shops, most of which were related to wireless network and distributed systems. He is a professional member of the IEEE Computer Society.
