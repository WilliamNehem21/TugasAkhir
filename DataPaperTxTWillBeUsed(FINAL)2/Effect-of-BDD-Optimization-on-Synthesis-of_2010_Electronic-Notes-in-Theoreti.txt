

Electronic Notes in Theoretical Computer Science 253 (2010) 57–70
www.elsevier.com/locate/entcs

Effect of BDD Optimization on Synthesis of Reversible and Quantum Logic
Robert Wille1 Rolf Drechsler2
Institute of Computer Science University of Bremen Bremen, Germany

Abstract
Synthesis of reversible and quantum logic has become an intensely studied topic in the last years. However, most synthesis methods are limited, since they rely on a truth table representation of the function to be synthesized. BDD-based synthesis offers an alternative. Here, reversible or quantum circuits are derived from a function given as Binary Decision Diagram (BDD) by substituting all nodes of the BDD with a cascade of Toffoli or elementary quantum gates, respectively. As a result, the application of the approach is not limited by the truth table of the function but by the (quite more efficient) BDD representation. Furthermore, many optimization techniques for BDDs exist which can be exploited.
In this work, we evaluate the effect of three optimization methods for BDDs (namely shared nodes, comple-
ment edges, and advanced orderings) on the resulting reversible and quantum circuits. We describe in detail the adjustments, which have to be done to support these optimizations for synthesis, and discuss possible improvements and drawbacks. In a case study, the effects are experimentally evaluated. The results showed, that applying these optimization techniques leads to significant smaller circuits (with respect to number of gates and lines) in most of the cases.
Keywords: Synthesis, Reversible Circuits, Quantum Circuits, Binary Decision Diagrams


Introduction
Reversible and quantum logic [10,1,20] has applications in domains like low-power design [10], quantum computing [15], optical computing [4], DNA computing [1], and nanotechnologies [13]. Since synthesis of reversible and quantum circuits signif- icantly differs from traditional design (e.g. fan-out and feedback are not allowed), it has become an intensely studied research area in the recent years.
However, many synthesis approaches are limited. Exact (see e.g. [7,23]) as well as heuristic (see e.g. [18,11,6,12]) methods have been proposed. But both are appli- cable only for relatively small functions. Exact approaches reach their limits with

1 Email: rwille@informatik.uni-bremen.de
2 Email: drechsler@uni-bremen.de

1571-0661© 2010 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2010.02.006

functions containing more than 6 variables [23] while heuristic methods are able to synthesize functions with at most 30 variables [6]. Moreover, often a significant amount of run-time is needed to achieve these results.
These limitations are mainly caused by the underlying techniques. The existing synthesis approaches often rely on truth tables (or similar descriptions like per- mutations) of the function to be synthesized (e.g. in [18,14]). But even if more compact data structures like BDDs [9], positive-polarity Reed-Muller expansion [6], or Reed-Muller spectra [12] are used, the same limitations can be observed since all of them apply similar strategies (namely selecting reversible gates so that the chosen function representation becomes the identity).
As an alternative, in [21] a new synthesis approach has been introduced that can cope with significantly larger functions. Here, reversible or quantum circuits are derived from a function given as BDD [3] by substituting all nodes of the BDD with a cascade of Toffoli or elementary quantum gates, respectively. As a result, the synthesis approach is not limited by the truth table of the function but by the (quite more efficient) BDD representation. However, since for BDDs many optimization techniques have been developed (e.g. shared nodes [3], complement edges [2], and reordering strategies like sifting [17]) it seems obvious to exploit these optimizations for the synthesis of reversible and quantum logic as well. But this requires new methods to derive circuits from the BDD.
In this work, we describe an improved BDD-based synthesis approach that sup- ports shared nodes, complement edges, and different orderings for BDD-based syn- thesis of reversible and quantum logic and discuss possible improvements and draw- backs. In a case study, we evaluate the effect of these optimization methods on the resulting circuit sizes. It turned out, that applying these optimization techniques leads to significant smaller circuits in most of the cases.
The remainder of the paper is structured as follows: Section 2 provides the basics of reversible and quantum logic as well as of BDDs. Afterwards, in Section 3 the synthesis approach as proposed in [21] is briefly reviewed. Section 4 describes the new BDD-based synthesis approach that supports shared nodes, complement edges, and reordering for BDD-based synthesis of reversible and quantum logic. Finally, in Section 5 the effect of these optimization techniques on the resulting circuits is experimentally evaluated while the paper is concluded in Section 6.
Preliminaries
To keep the paper self-contained this section briefly reviews the basic concepts of reversible and quantum logic. We also describe the basics of BDDs which are used as the underlying data structure by the synthesis approach.

Reversible Logic
A logic function is reversible if it maps each input assignment to a unique output assignment. Such a function must have the same number of input and output variables X := {x1,..., xn}. Since fanout and feedback are not allowed in reversible



cout sum –
–
0
cin a b
cout sum –
–

With Toffoli gates	(b) With elementary quantum gates
Fig. 1. Two circuits realizing a full adder




logic, a circuit realizing a reversible function is a cascade of reversible gates. A reversible gate has the form g(C, T ), where C = {xi1 ,..., xik } ⊂ X is the set of control lines and T = {xj1 ,..., xjl }⊂ X with C ∩T = ∅ is the set of target lines. C may be empty. The gate operation is applied to the target lines iff all control lines meet the required control conditions. Control lines and unconnected lines always pass through the gate unaltered.
In the literature, several types of reversible gates have been introduced. Besides the Fredkin gate [5] and the Peres gate [16]), (multiple controlled) Toffoli gates [20] are widely used. Each Toffoli gate has one target line xj, which is inverted iff all control lines are assigned to 1. That is, a multiple controlled Toffoli gate maps (x1,..., xj,..., xn) to (x1,..., xi1 xi2 ··· xik ⊕ xj,..., xn).
Quantum circuits realize functions with the help of elementary quantum gates.
Quantum circuits are inherently reversible and manipulate qubits rather than pure logic values.  The state of a qubit for two pure logic states can be expressed as
|Ψ⟩ = α|0⟩ + β|1⟩, where |0⟩ and |1⟩ denote pure logic states 0 and 1, respectively, and α and β are complex numbers such that |α|2 + |β|2 = 1. The most frequently occurring elementary quantum gates are the NOT gate (a single qubit is inverted),
the controlled-NOT (CNOT) gate (the target qubit is inverted if the single control qubit is 1), the controlled-V gate (also known as a square root of NOT, since two consecutive V operations are equivalent to an inversion), and the controlled-V+ gate (which performs the inverse operation of the V gate and thus is also a square root of NOT).


Example 2.1 Figure 1(a) shows a Toffoli gate realization of a full adder. This circuit has four inputs (the constant input 0, the carry-in cin, as well as the sum- mands a and b), four outputs (the carry-out cout and the sum as well as two garbage outputs), and consists of four Toffoli gates. Thereby, the control lines of each Toffoli gate are denoted by ● while the target lines are denoted by ⊕. A circuit realizing the same function by elementary quantum gates is depicted in Figure 1(b). This circuit has the same inputs and outputs but consists of six gates in total. The notation is similar to a Toffoli circuit, except that the target lines are denoted with respect to the particular gate type. More precisely, a V-box is used to denote a controlled-V gate and a V+-box is used to denote a controlled-V+ gate. The notations for NOT and CNOT gates are equal to the notation for Toffoli gates.

Binary Decision Diagrams
A Boolean function f : Bn → B can be represented by a Binary Decision Dia- gram (BDD) [3]. A BDD is a directed acyclic graph G = (V, E) where a Shannon decomposition
f = xifxi=0 + xifxi=1	(1 ≤ i ≤ n)
is carried out in each node v ∈ V . The functions fxi=0 and fxi=1 are the cofactors of f . In the following the node representing fxi=0 (fxi=1) is denoted by low(v) (high(v)) while xi is called the select variable. A BDD is called free if each variable is encountered at most once on each path from the root to a terminal node. A BDD is called ordered if in addition all variables are encountered in the same order on all such paths. In the following, ordered binary decision diagrams are called BDD for brevity. The size k of a BDD is defined by the number of nodes.
In the past, several techniques to optimize the size of BDDs have been developed. In particular shared nodes [3] allow significant reductions. That is, if a node v has more than one predecessor. In particular, functions f : Bn → Bm (i.e. functions with more than one output) can be represented more compactly using shared nodes. Further reduction can be achieved if complement edges [2] are applied. This enables the representation of a function as well as of its negation by a single node only. Furthermore, the size of a BDD significantly depends on the chosen ordering of its input variables [3].

BDD-based Synthesis
In this section, we briefly review BDD-based synthesis of reversible and quantum logic as introduced in [21]. This provides the basis for the rest of this paper, where the application of BDD optimization techniques to the synthesis approach is dis- cussed in detail.
The aim of each synthesis approach is to determine a circuit realization for a given Boolean function. It is well known, that Boolean functions can be efficiently represented by BDDs [3]. Having a BDD G = (V, E), a reversible network can be derived by traversing the BDD and substituting each node v ∈ V with a cascade of reversible gates. The respective cascade of gates depends on the successors of the node v. Table 1 provides the cascades of Toffoli and elementary quantum gates, respectively, for all possible scenarios of a BDD node.
Note that an additional (constant) line is necessary if one of the edges low(v) or high(v) leads to a terminal node. This is because of the reversibility which has to be ensured when synthesizing reversible logic. As an example consider a node v with high(v) = 0 (second row of Table 1). Without loss of generality, the first three lines of the corresponding truth table can be embedded with respect to reversibility as depicted in Table 2(a). However, since f is 0 in the last line, no reversible embedding for the whole function is possible. Thus, an additional line is required to make the respective substitution reversible (see Table 2(b)) 3 .

3 Due to the same reason it is also not possible to preserve the values for low(v) or high(v), respectively,

Table 1
Subsitution of BDD nodes to reversible/quantum circuit


Based on these substitutions, a method for synthesizing Boolean functions in reversible or quantum logic can be formulated: First, a BDD for function f to be synthesized is created. This can be done efficiently using state-of-the-art BDD packages (e.g. CUDD [19]). Next, the resulting BDD G = (V, E) is traversed by a depth-first search. For each node v ∈ V , cascades as depicted in Table 1 are added

in the substitution depicted in the first row of Table 1.

Table 2
(Partial) Truth tables for node v with high(v)=0 
(a) w/o add. line	(b) with additional line

f
x◯1	x1	x1

f' /0/ x◯2
 1 f''	0	f
x◯2	1	g

0 / \ 1
/	\
0 / \ 1	x2	x2
/	\

0	1  1	0


(a) BDD	(b) Resulting Circuit



to the circuit.
Fig. 2. BDD and Toffoli circuit for f = x1 ⊕ x2

Example 3.1 Consider the BDD in Figure 2(a). Applying the substitutions given in Table 1 to each node of the BDD, the Toffoli network depicted in Figure 2(b) results.
As a result, circuits are synthesized which realize the given function f . Since, each node of the BDD is only substituted by a cascade of gates, the proposed method has a linear worst case run-time and memory complexity with respect to the number of nodes in the BDD.

Exploiting BDD Optimization
Current state-of-the-art BDD packages (e.g. CUDD [19]) exploit several optimiza- tion techniques to build BDDs of small size. In this section, we describe how these techniques can be applied to the proposed BDD-based synthesis as well. The effect of these optimizations on the resulting reversible or quantum circuits is considered in the next section.

Shared Nodes
If a node v has more than one predecessor, then v is called a shared node. The application of shared nodes is common for nearly all BDD packages. Shared nodes can be used to represent a sub-formula more than once without the need to rebuild the whole sub-graph. In particular, functions f : Bn → Bm (i.e. functions with more than one output) can be represented more compactly using shared nodes.



0
xi low(f ) high(f )
f xi
low(f )
high(f )
0
xi low(f ) high(f )
f xi
low(f )
high(f )

(a) Toffoli cascade	(b) Quantum gates cascade
Fig. 3. Substitution for shared nodes without terminals as successors



f1 x◯i
f2 x◯i

high(f2 )	g
0	f1

/0/
 1 /0	 1
xi low(f1 )
xi low(f1 )

low(f ) f ◯high(f )

1	xj
/0	 1
2	high(f' )	g
low(f' )	f2

low(f')	high(f')


(a) BDD	(b) Resulting Circuit
Fig. 4. Toffoli circuit for shared BDD

However, to use shared nodes, the output value of a respective node has to be preserved until it is not needed any longer. To ensure this, additional circuit lines with constant inputs are required. Considering the substitutions depicted in Table 1, this is the case for all nodes v where one of the edges low(v) or high(v) leads to a terminal node. Here, all values of the inputs (in particular of high(v) or low(v), respectively) are preserved. But as already mentioned above, this is not possible for the general case (first row of Table 1). Here, at least one value (namely the value from the select variable) is preserved. Thus, a modified substitution for shared nodes without terminals as successors is required. Figure 3(a) and Figure 3(b) show one possible substitution for reversible and one for quantum circuits, respectively.
Besides the additional (constant) circuit line, this requires one additional gate in comparison to the substitution of Table 1. In contrast, using this substitution no cascade for nodes representing the identity of their select variable is necessary any longer. In this case, the node can be represented by the same circuit line as the input itself. This is now possible since the values of circuit lines representing a node can be preserved.

Example 4.1 In Figure 4(a) a partial BDD including a shared node f' is shown. Since the value of node f' is used twice (by nodes f1 and f2), an additional line (line 2 in Figure 4(b)) and the cascade of gates as depicted in Figure 3(a) is applied to substitute node f1. Then, the value of f' is still available such that the substitution of node f2 can be applied. The resulting circuit is given in Figure 4(b).

Table 3
Substitution of BDD nodes with complement edge to reversible/quantum circuit



Complement Edges
Further reductions in BDD sizes can be achieved if complement edges [2] are applied. In particular, this allows to represent a function as well as its negation by a single node only. If a complement edge is applied, the output value of its connected node becomes inverted. To support complement edges in our synthesis approach, new substitutions have to be determined, that take the inversion by complement edges into account.
Table 3 shows the resulting cascades used in our synthesis approach. Note, that complements have to be considered only at the low edges of the nodes. Nodes with complements at the high-edge can easily be replaced by a respective node with a complement at the low edge.
In some cases, this leads to larger cascades in comparison to the substitution without complement edges (in particular for the Toffoli cascades). How far this can be compensated by the possible BDD reductions (or not) is discussed in detail in Section 5.

Ordering of BDDs
It has been shown that the order of the variables has a high impact on the size of the resulting BDD [3]. In the past several approaches have been proposed to achieve good orderings (e.g. sifting [17]) or to determine exact results [8]. All these techniques can be directly applied to our synthesis approach and need no further adjustments of the already introduced substitutions.

Using these optimization techniques (i.e. shared nodes, complement edges, and reordering), in the next section it is considered how they influence the resulting Toffoli or quantum circuits, respectively.
Experimental Study
In this section we investigate the effect of the respective optimization techniques for BDD minimization on the resulting reversible or quantum circuits. To this end, we implemented the proposed synthesis approach in C++ on top of the BDD package CUDD [19] and synthesized circuits with the respective techniques enabled or disabled.
As benchmarks we used functions provided by RevLib [22] (including most of the functions which have been previously used to evaluate existing reversible synthesis approaches) as well as from the LGSynth package (a benchmark suite for evaluating irreversible synthesis). All experiments have been carried out on an AMD Athlon 3500+ with 1 GB of memory.

Shared Nodes
To investigate the effect of shared nodes, we extended CUDD so that the application of shared nodes can be disabled or enabled (this has been done by manipulating the unique table). Then, the substitutions of Table 1 and Figure 3 are applied as appropriate.
The results are summarized in Table 4. The first two columns give the name of the benchmark (Name) as well as the number of primary inputs and outputs
(PI/PO). Then, the number of circuit lines (Lines), Toffoli gates (Tof. Gates)
or elementary quantum gates (Qua. Gates), as well as the run-time of the synthesis approach (in CPU seconds) is given for the naive approach (w/o Shared Nodes) and the approach that exploits shared nodes (with Shared Nodes).
One can clearly conclude, that the application of shared nodes leads to better realizations for reversible and quantum logic. Both, the number of lines and the number of gates can be significantly reduced. In particular, for the number of lines this might be unobvious since additional lines are required to support shared nodes (see Section 4.1). But due to the fact, that shared nodes also decrease the number of terminal nodes (which require additional lines as well), this effect is compensated.

Table 4
Effect of shared nodes


Complement Edges
Complement edges are supported by the CUDD package and can be easily disabled and enabled. For comparison, we synthesized circuits from both, BDDs with and

BDDs without complement edges (denoted by with
Compl.
Edges
and
w/o

Compl. Edges, respectively). In the latter case, the substitutions shown in Table 3
are applied whenever a successor is connected by a complement edge. Both BDD




Table 5
Effect of Complement Edges


types apply shared nodes since their application has been shown to be beneficial (see above). The results are given in Table 5 4 . The columns are labeled as described in Section 5.1.
Even if the cascades representing nodes with complement edges are larger in some cases (see Section 4.2), improvements in the circuit sizes can be observed (see e.g. rd84 70, 9sym, or cordic). But in particular for the LGSynth functions often better Toffoli circuits result, when complement edges are disabled (see e.g. seq, spla, or table3 ). Here, the larger cascades obviously cannot be compensated by complement edge optimizations. In contrast, for quantum circuits in nearly all cases better realizations are obtained with complement edges enabled. A reason for that is, that the quantum cascades for nodes with complement edges have the same size as the respective cascades for nodes without complement edges in nearly all cases (see Table 1, Figure 3 and Table 3, respectively). Thus, the advantage of complement edges (namely the possibility to create smaller BDDs) can be fully exploited without the drawback that the respective gate substitutions become larger.

Ordering of BDDs
To evaluate the effect of the BDD orderings on the resulting circuit sizes, three techniques are considered: (1) An ordering given by the occurrences of the primary inputs in the function to be synthesized (denoted by Original), (2) an optimized ordering achieved by sifting [17] (denoted by Sifting), and (3) an exact ordering [8] which ensures the BDD to be minimal (denoted by Exact). Again, all created BDDs exploit shared nodes. Furthermore, complement edges are enabled in this evaluation. After applying our synthesis approach, circuit sizes as summarized in Table 6 result. Here again, the columns are labeled as described in Section 5.1.
The results show, that the ordering has a strong effect on the circuit size. In particular for the LGSynth functions, the best results are achieved with the exact ordering. But as a drawback, this requires a longer run-time. Besides that, also in this evaluation, examples can be found, showing that optimization for BDDs not always leads to smaller circuits (see e.g. ham7 29 or hwb7 15 where the best results are achieved with the naive ordering). But in most of the cases improvements are observed. In comparison to previous work, for the first time functions with more than 30 variables can be synthesized.

Conclusions and Future Work
In this paper, we described and evaluated how optimization techniques for decision diagrams can also be exploited for BDD-based synthesis of reversible and quantum logic. We considered shared nodes, complement edges, as well as ordering strategies and present the gate cascades needed to support these methods. In a case study the effect of these techniques on the circuit sizes has been evaluated. In most of the cases, BDD optimizations lead to improvements in the circuit sizes as well.

4 Compared to Table 4, also benchmarks are considered for which no result could be determined using the
w/o Shared Nodes approach.



Table 6
Effect of Variable Ordering


In future work, we plan to adjust the optimization techniques for the synthesis purpose with respect to the expected circuit size, not to the BDD size. As an example, the cost function which is used during reordering should be modified for this purpose. Besides that, also other decompositions should be considered.

References
Bennett, C. H., Logical reversibility of computation, IBM J. Res. Dev 17 (1973), pp. 525–532.
Brace, K., R. Rudell and R. Bryant, Efficient implementation of a BDD package, in: Design Automation Conf., 1990, pp. 40–45.
Bryant, R., Graph-based algorithms for Boolean function manipulation, IEEE Trans. on Comp. 35
(1986), pp. 677–691.
Cuykendall, R. and D. R. Andersen, Reversible optical computing circuits, Optics Letters 12 (1987),
pp. 542–544.
Fredkin, E. F. and T. Toffoli, Conservative logic, International Journal of Theoretical Physics 21 (1982),
pp. 219–253.
Gupta, P., A. Agrawal and N. Jha, An algorithm for synthesis of reversible logic circuits, IEEE Trans. on CAD 25 (2006), pp. 2317–2330.
Hung, W., X. Song, G. Yang, J. Yang and M. Perkowski, Optimal synthesis of multiple output Boolean functions using a set of quantum gates by symbolic reachability analysis., IEEE Trans. on CAD 25 (2006), pp. 1652–1663.
Jeong, S.-W., T.-S. Kim and F. Somenzi, An efficient method for optimal BDD ordering computation, in: International Conference on VLSI and CAD, 1993, pp. 252–256.
Kerntopf, P., A new heuristic algorithm for reversible logic synthesis, in: Design Automation Conf., 2004, pp. 834–837.
Landauer, R., Irreversibility and heat generation in the computing process, IBM J. Res. Dev. 5 (1961),
p. 183.
Maslov, D., G. W. Dueck and D. M. Miller, Toffoli network synthesis with templates, IEEE Trans. on CAD 24 (2005), pp. 807–817.
Maslov, D., G. W. Dueck and D. M. Miller, Techniques for the synthesis of reversible toffoli networks, ACM Trans. on Design Automation of Electronic Systems 12 (2007).
Merkle, R. C., Reversible electronic logic using switches, Nanotechnology 4 (1993), pp. 21–40.
Miller, D. M., D. Maslov and G. W. Dueck, A transformation based algorithm for reversible logic synthesis, in: Design Automation Conf., 2003, pp. 318–323.
Nielsen, M. and I. Chuang, “Quantum Computation and Quantum Information,” Cambridge Univ. Press, 2000.
Peres, A., Reversible logic and quantum computers, Phys. Rev. A (1985), pp. 3266–3276.
Rudell, R., Dynamic variable ordering for ordered binary decision diagrams, in: Int’l Conf. on CAD, 1993, pp. 42–47.
Shende, V. V., A. K. Prasad, I. L. Markov and J. P. Hayes, Synthesis of reversible logic circuits, IEEE Trans. on CAD 22 (2003), pp. 710–722.
Somenzi, F., “CUDD: CU Decision Diagram Package Release 2.3.1,” University of Colorado at Boulder, 2001.
Toffoli, T., Reversible computing, in: W. de Bakker and J. van Leeuwen, editors, Automata, Languages and Programming, Springer, 1980 p. 632.
Wille, R. and R. Drechsler, BDD-based synthesis of reversible logic for large functions, in: Design Automation Conf., 2009.
Wille, R., D. Große, L. Teuber, G. W. Dueck and R. Drechsler, RevLib: An online resource for reversible functions and reversible circuits, in: Int’l Symp. on Multi-Valued Logic, 2008, pp. 220–225, RevLib is available at http://www.revlib.org.
Wille, R., H. M. Le, G. W. Dueck and D. Große, Quantified synthesis of reversible logic, in: Design, Automation and Test in Europe, 2008, pp. 1015–1020.
