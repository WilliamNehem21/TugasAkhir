Artificial Intelligence in the Life Sciences 2 (2022) 100044

		




Open protocols for docking and MD-based scoring of peptide substrates
Rodrigo Ochoaa,∗, Ángel Santiagob, Melissa Alegría-Arcosc
a Biophysics of Tropical Diseases, Max Planck Tandem Group, University of Antioquia, Antioquia, Medellin 050010, Colombia
b Departamento de Fisicoquímica, Facultad de Química, Universidad Nacional Autónoma de México, Mexico 04510, Mexico
c Facultad de Ingeniería y Negocios, Universidad de las Américas, Sede Providencia, Manuel Montt, Santiago 948, Chile


a r t i c l e	i n f o	a b s t r a c t

	

Keywords: Peptide Docking
Molecular dynamics Machine learning
The study of protein-peptide interactions is an active research field from an experimental and computational per- spective, with the latest presenting challenges to model and simulate the peptides’ intrinsic flexibility. Predicting aﬃnities towards protein systems of interest, such as proteases, is crucial to understand the specificity of the interactions and support the discovery of novel substrates. Here we provide a set of computational protocols to run structural and dynamical analysis of protein-peptide complexes from a binding perspective. The protocols are based on state-of-the-art methods, but the code is open and can be customized depending on the user needs. These include a fragment-growing peptide docking protocol to predict bound conformations of flexible peptides, a protocol to extract descriptors from protein-peptide molecular dynamics trajectories, and a workflow to build and test machine learning regression models. As a toy example, we applied the protocols to a serine protease structure with a set of known peptide substrates and random sequences to illustrate the use of the code, which is publicly available at: https://github.com/rochoa85/Protocols-Peptide-Binding





Introduction

The spatial arrangement of peptide substrates is important to pre- dict potential interactions with their molecular targets [1]. The research on molecular docking of peptides has contributed to overcome, in part, the challenge of predicting bound conformations of these highly flex- ible molecular entities [2,3]. In this sense, multiple approaches have been published to tackle this computational problem [4]. Among them, methods using docking strategies where the peptide is grown step-by- step can help to solve the flexibility issues, while maintaining the ca- pability of predicting energy-favorable conformations associated with potential biological activities [5,6]. These complexes can be sampled using techniques such as molecular dynamics (MD), where amino acid force field parameters can be implemented to study peptides and their interactions [7,8]. Other tools can be useful to predict beforehand the probable structural conformation of the peptides in comparison to ex- perimental techniques [9,10].
To assess the binding aﬃnity of peptides, multiple strategies have been proposed to capture their molecular flexibility. These include en- hanced sampling approaches [11], alchemical free energy perturbations [12], or techniques able to explore the potential surface energy of the system. Other methods are based on implicit solvent calculation using Molecular Mechanics Poisson-Boltzmann Surface Area (MM/PBSA) ap- proaches [13], with the possibility of adding quantum calculation us-

∗ Corresponding author.
E-mail address: rodrigo.ochoa@udea.edu.co (R. Ochoa).
ing semi-empirical theories for catalytic residues [14]. In any of these scenarios, large computational resources are required to reproduce the binding landscape of peptides as ligands. One option is to use scoring functions used in molecular docking to score representative frames of MD trajectories, and calculate thermal averages that can be correlated with binding aﬃnities [15]. Another approximation is to use machine learning methods to predict, from MD trajectories and molecular de- scriptors, any response variable such as aﬃnity proxies [16,17].
Nowadays, the combination of physics-based approaches with ma- chine learning models is useful to reduce the computational cost of run- ning exhaustive simulations and improve the prediction performance of classical methods with available curated data [18]. This is the case of novel methods to accelerate quantum chemical calculations using mod- els trained with pre-calculated parameters [19]. In the context of MD, initiatives are reported to extract descriptors from the trajectories and combine them with additional chemical data from the molecular enti- ties. This is the case of the Molecular Dynamics Fingerprints package (MDFP) [20], where a set of molecular fingerprints can be computed by obtaining average energy terms and observables from the MD sim- ulations such as the solvent accessible surface area, dipole moments, radius of gyration and evolution of the hydrogen bonds. The latest have been applied to predict free energies of solvation for small molecules [21], and for binding studies involving proteins [22]. The protocol can be adapted to include peptides as ligands for virtual screening studies


https://doi.org/10.1016/j.ailsci.2022.100044
Received 30 June 2022; Received in revised form 30 September 2022; Accepted 12 October 2022
Available online 20 October 2022
2667-3185/© 2022 The Authors. Published by Elsevier B.V. This is an open access article under the CC BY license (http://creativecommons.org/licenses/by/4.0/)



given that a predictive model can be convenient to avoid running ex- haustive simulations.
In this article, we present a set of open Python scripts to run lo- cally different computational workflows inspired by published methods for peptide modeling, such as peptide docking using a fragment-growing docking protocol for the prediction of bound peptide conformations, and a routine to capture descriptors from protein-peptide MD trajectories in order to predict observables such as average scoring values. We pro- vide the open source code to reproduce the main protocols with small differences and without requiring access to web servers. As a toy exam- ple, a library of known substrates and random peptide sequences were docked to a granzyme B protease, where each complex was subjected to short MD simulations. Then, a set of descriptors was calculated per complex to generate a regression model able to predict with enough ac- curacy binding observables. For this example, we show the performance of some models under certain conditions explained in the Methods, but such variables can be changed by the user if a protein target is selected with previous knowledge of its binding site, as well as a list of peptide substrates that can be used to extrapolate the results into a novel chemi- cal space using machine learning approaches. Instructions to run exam- ples and install third-party modules required to perform the analysis are provided in the repository.

Methods

Customization and system requirements

The Python 3 scripts are available in the public repository: https:
//github.com/rochoa85/Protocols-Peptide-Binding. The code is pro- vided under a MIT license for academic and development purposes. The project is split into three folders. The first one allows running the fragment-growing docking protocol with a protease receptor as an ex- ample. The second provides scripts to extract features of protein-peptide MD trajectories with the MDFP package. In addition, the PepFun pro- tocol is used to calculate descriptors from the peptide sequence and structure as explained later in Section 2.5 and Supplementary Table 1. Finally, the third protocol provides a script to configure and run a re- gression model to predict score/aﬃnity values based on the obtained descriptors. An example with a protease and a set of peptides evaluated in this work is included in the code.
All the classes and functions were written under the Ubuntu 20.04 operating system. Additional third-party tools (see Supplementary Table 2) can be installed through the available source code using the latest versions, or through Conda virtual environments.

Fragment-growing docking approach

As an open source alternative to dock flexible peptides in protein binding sites, we provide a protocol based on the incremental growth of a core peptide fragment into the protein binding site, maintaining a degree of flexibility after new amino acids are added in the peptide flanking regions. The method is inspired in the DINC2 strategy [23].
The methodology involves the following steps: (i) Modeling of a 3- mer peptide fragment corresponding to the central section of the peptide of interest given as input. The loop reconstruction module of Modeller is used to generate this starter 3-mer fragment from the amino acid se- quence using the Python modules, which can be easily incorporated into the docking protocol [24]. The protonation states of the protein and pep- tide 3D structures are generated using PDB2PQR [25]. (ii) The fragment is docked in the protein active site using Autodock Vina with standard parameters [26]. The site is defined based on previous knowledge of the protein, and it is delimited by a grid search box at the center of the binding site that increases its size after growing the peptide sequence. The initial fragment has all their rotational bonds active. (iii) From the initial docking, the three best poses (i.e. best Autodock Vina scores) are used as starting points to add amino acids at each flanking region of the
peptide. In that way, three solutions are generated from three different initial docked conformers. To add the flanking amino acids, the rotamers are predicted with Modeller using the rest of the structure bound to the protein as a template. The bonds of each new amino acid and the amino acids next to them are kept flexible, while the central part is configured as rigid based on the docked pose of the previous step. (iv) Finally, the new fragments are docked and the best pose per each of the three par- allel runs is selected to repeat the growing process, until the peptide reaches its final size. The methodology is intrinsically parallelized by Autodock Vina itself and the multiprocessing module of Python.

Use case with a protease-peptide system

A benchmark/validation docking run using our fragment-growing approach was performed on the granzyme B protease (PDB id 1iau) [27,28]. This is a serine protease from the subfamily S01.010, accord- ing to the MEROPS database [29]. Multiple peptide substrates have been reported against this enzyme. A total of 513 8-mer sequences were selected from the MEROPS database based on filtering experimentally non-redundant cleaved substrates. To include a set of external peptides for prediction purposes, 365 random sequences were generated with the PepFun package [30] and docked to the same protease structure. The sequences were generated using the same 8-mer length, with uniformly distributed amino acids per position, and without conserving dominant residues on the peptide cleavage sites.
To assess the performance of our fragment-growing docking proto- col, a set of reported proteases structures bound to peptides with ex- tended conformations were subjected to re-docking calculations of the peptides using the following servers: ClusPro [31], Haddock [32], HPEP- Dock [33], MDockPep [34], CABSDock [35] and DINC2 [23]. To eval- uate the performance, we compared the predicted peptides with re- spect to crystal conformations through RMSD calculations over back- bone atoms. The studied complexes have the PDB IDs 1ou8, 2xxn, 3qdz, 3tjv and 6di8, and all of them are co-crystallized with peptides from 8 to 15 amino acids in range. The full peptide input conformations for re- docking at each server were generated with PEP-FOLD [36], except for CABSDock and MDockPep which both generate the peptide structure in- put. To complement the assessment, we included a set of 10 additional protein-peptide complexes available in the PDB and curated based on the LEADS-PEP dataset [37]. The peptides selected are also bound in extended conformations. The same docking servers were used, and the RMSD evaluation metrics used for the proteases were also calculated. In all cases, the binding site residues or binding site grid were specified, depending on web server requirements.

MD simulations

Each granzyme B-peptide complex docked with our protocol was subjected to MD simulations using Gromacs version 5.1.4 [38]. The Amber99SB-ILDN protein force-field [39], a TIP3P water model [40], a modified Berendsen thermostat [41], and a Parrinello-Rahman baro- stat [42] were used during the equilibration and production phases. The complex was solvated in a cubic box of water with periodic boundaries at a distance of at least 8 A˚ from any atom of the protein. Counterions of
Na+ and Cl− were included in the solvent to make the box neutral. The
electrostatic interactions were calculated using the Particle Mesh Ewald
(PME) method, with 1.0 nm short-range electrostatic and van der Waals cutoffs [43]. The equations of motion were solved with the leap-frog integrator [44], using a timestep of 2 femtoseconds (fs).
The equilibration consisted of 100 picoseconds (ps) of NVT ensem- ble, followed by 100 ps of NPT. Then a production NPT simulation was run during 10 ns. With the trajectories, a MD/scoring approach was implemented to calculate average scores using all the frames from the trajectories. Specifically, for each MD simulation, an interaction score was attributed: each frame was scored using the Autodock Vina scor- ing function (the same used in the fragment-growing docking protocol)



and the average value across all frames from the trajectory was stored, and used at later stages, for the generation of a regression model able to predict the same variable for novel peptide sequences.

Descriptors extraction

Based on the granzyme B-peptide MD trajectories performed with Gromacs, the MDFP tools libraries [20] were adapted and used to ex- tract a set of protein-peptide MD-derived descriptors (https://github. com/rinikerlab/mdfptools/). Each descriptor is split into three positions (vector), which include the average, median and standard deviation value of the calculated property among the MD frames. To achieve this, the calculated MD trajectory is re-run with Gromacs to add new energy terms in the outputs per frame. These include the Coulomb and Lennard- Jones energy contributions between the peptide, the receptor and the water molecules. Other included descriptors are the SASA and radius of gyration, the charges calculated with the ParmEd module [45], the dipole moments and evolution of hydrogen bonds with the MDtraj mod- ule [46], and bioinformatics properties of the peptide using the PepFun package. A total of 70 descriptors per complex were calculated. The full list is available in the Supplementary Table S1.
Two scripts, one using bash command lines, and a second written in Python are included in the main code to extract these descriptors. The vectors per complex are stored as pickled objects in a folder, which can be read later by machine learning models. An example of a protein- peptide MD trajectory is provided in the code repository to reproduce the results.

Machine learning model setup and test

Finally, to test the prediction performance of the average score ob- tained from the MD frames, two regression models were configured us- ing the granzyme B system. The models are a basic linear regression model, and a gradient boosting regressor with 500 estimators and a learning rate of 0.01. Both models are prepared using the scikit-learn module in Python [47]. For the initial training validation, the set of 513 peptide substrates were split in a 75/25 schema (i.e. 75% of the pep- tides to train, and 25% to test). This was performed using a maximum chemical diversity function, where both the training and test set con- tains the maximum number of diverse compounds to avoid biasing both chemical spaces. The chemical similarity is quantified using the ECFP4 Tanimoto coeﬃcient [48], and the diverse subset are selected using the MaxMin algorithm in the RDKit. The R2 coeﬃcient of determination and the Mean Squared Error (MSE) were calculated to assess the models. In the case of the gradient boosting regression model, the deviance of both training and test sets, as well as the feature and permutation importance were analyzed.
After the initial assessment, a final model was trained with the 513 peptide substrates, and applied using the 365 random sequences. The same R2 and MSE metrics were calculated to validate the model. A script to configure and run the predictions with the protease-peptide trajectories is also provided within the code. For this example, we add the average scores as a pre-calculated variable per peptide to be used as the model output. However, the users have the option to select as response any proxy aﬃnity value, mostly motivated in the cases where running such calculations require demanding computational times and resources.

Results and discussion

The three protocols covering peptide docking and scoring analysis were applied using a protease (granzyme B) system as an example. In the next section, we discuss their implementation and provide insights about their use for other applications.
Table 1
Protease-peptide (in gray) and LEADS-PEP protein-peptide com- plexes selected from the PDB to assess the fragment-growing pep- tide docking approach.




Peptide docking protocol

The docking of highly flexible molecules is an active research area with different software available for that purpose. This includes pack- ages such as FlexPepDock [49], GalaxyPepDock [50], and DynaDock [2], which use different computational strategies and scoring functions to predict refined protein-peptide complexes. However, most of these methods are available as public web servers where the code is not avail- able, or as part of open pipelines demanding previous exhaustive analy- sis of the initial template, limiting their usability. In our case, the dock- ing protocol implements open source software to dock peptides in a pro- tein binding site, dealing with the intrinsic flexibility of the peptide, and allowing the customization of the protocol in case the user wants to modify not only parameters but substantial parts of the protocol. The workflow we propose is summarized in Fig. 1.
One goal of the protocol is to include the flexibility of the molecule, in this case the peptide, but gradually after each iteration. The internal rotational bonds of the peptide are configured first as flexible, but af- ter growing the flanking regions the best conformations of the previous steps are kept rigid to diminish the computational time, allowing the new fragments to explore the best pose based on the rigid selected tem- plate, and the flexible new flanking amino acids. The protocol has ben- efited from the multithreading architecture available in Autodock Vina and auxiliary programs to model additional amino acids in the peptide, protonate according to the system requirements, and tailor the peptide based on the known binding site and biological background available.
To validate the protocol performance for proteases, we selected first a dataset of five protease-peptide complexes available in the PDB. The peptides were selected by taking into account full peptide substrates longer than 8 amino acids belonging to different families and with loop structures. One advantage is the availability of crystallized bound con- formations to compare the docking results through RMSD values. We also performed the docking using alternative protocols for peptide dock- ing (see Methods). In addition, we followed a similar docking analysis and RMSD calculation using a set of 10 protein-peptide complexes avail- able in the LEADS-PEP dataset. A summary of the peptide RMSD for our fragment-growing protocol is provided in Table 1.
We found that our protocol predicts peptide conformations with RMSD values below 5 A˚ for the proteases included in the benchmark- ing, and a similar performance was found with the additional protein-
peptide complexes reported in the LEADS-PEP dataset. In general, re- producing flexible backbone conformations is a subject of research that can be complemented with sampling of the conformational space using MD and other techniques, which is the case of our pipeline. Other alter- natives to perform peptide docking presented similar, and in some cases




Fig. 1. Workflow of the protein-peptide fragment-growing docking protocol. (A) The protocol highlights the selection of the initial fragment, the docking, and the iterative expansion of the structure through the addition of amino acids in the flanking regions. The pipeline uses three starting docked fragments to grow the sequence in parallel. The best scored final complex can be used for further sampling steps. The blue section describes the expansion steps, the green section the docking and ranking, and the orange section the protocol output. (B) Example of a peptide fragment and how it is expanded through the flanking regions. (C) Snapshots of the evolution of a peptide subjected to the fragment-growing docking protocol. The initial fragment (in green) is grown by single amino acids at each flanking part of the peptide (in yellow). After each step, the docked part remains rigid, and the new additions are configured as flexible. The snapshots represent the growing steps of the docking protocol until completing the full bound peptide.


better results, but with the disadvantage of being accessed only through web servers, and limiting batch jobs for large peptide binders datasets. Among the external programs, it is important to mention that ClusPro and Haddock are rigid body docking approaches where the results de- pend on the peptide initial conformation. It means that the output will be affected if the structure of the input is very different from that of the crystallographic structure. Unlike the two previous cases, HPEPDock and DINC2 allow implicit flexibility in the peptide structure through en- semble docking or by fragment-based docking respectively, increasing the chances to find optimal conformations. MDockPep and CABSDock can model and dock the structure of the peptide from its sequence.
The docking protocol provided in our scripts is inspired by the DINC2 methodology [23], with differences around the parallelization of the code, the selection of candidates, and the requirement of peptide frag- ments as input files, which are modelled within our protocol. In the case of DINC2, more parallel runs are generated to select the candidates from a group of solutions. In our case, we provide three final protein-peptide complexes that can be filtered based on the predicted score or confor- mational pose. The number of runs can be changed by the user in the code. In terms of the assessment performance, one of the limitations is associated with the size of the peptide, as in our case. Specifically, the larger the size the greater the conformational freedom, as can be ap- preciated for larger peptides with higher RMSD values in Table 1. The RMSD for the external peptide docking servers are reported in Supple- mentary Table S3.
Differences in predictions can be related with the peptide initial con- formation. In our docking protocol, the peptide input conformer is pre- dicted, or a crystallized fragment from a structural complex can be used directly to grow the full peptide sequence. On the other hand, the in- puts used for the servers were generated with PEP-FOLD. In spite of not accurately reproducing the crystal structures, our method can be used to screen massive amounts of ligands that can be refined as proposed. In addition, we compared the computational eﬃciency of our protocol against Autodock Vina itself, using one protein-peptide system as ref- erence (PDB id 1bx2). We found that our method can run the docking in half of the time required by Vina with 24 CPU cores, and the final docking pose was less accurate with regard to the crystal structure when Vina was used alone (see Supplementary Fig. S1).
For the granzyme B system, we docked the 878 peptides at the crys- tal binding site, where 513 are known substrates and the remaining 365 are the random sequences generated with PepFun. After docking all the substrates and random peptide sequences to the granzyme B system, we followed a pipeline where each complex is subjected to MD simula- tions and a set of descriptors are extracted to build a predictive machine learning model (Fig. 2A). The latest is important because it is diﬃcult to explore the conformational space using classic docking protocols. This can be overcomed by refining or sampling the complexes using MD, Metropolis Monte Carlo, among other sampling techniques. Our pro- tocol generates short trajectories of the systems with MD equilibrium simulations of 10 ns, which is a suitable time for massive virtual screen-




Fig. 2. Granzyme B system used as toy example to test the proposed protocols. (A) Representation of the protease structure and general pipeline followed during the application. (B) Overlapping of MD snapshots obtained after 10 ns simulations. (C) Example of the score average for one protease-peptide trajectory. The continuous line is the cumulative average.


ing campaigns in order to increase conformational variability within the same minima found during the fitting process (Fig. 2B), and therefore statistically improve the predicted score by scoring each frame and av- eraging it as a proxy aﬃnity response (Fig. 2C).


Model descriptors

From the MD simulations for all the 878 peptides (513 substrates and 365 random sequences), 70 previously described descriptors (see Meth- ods) were calculated for the machine learning (ML) setup and selected as independent variables. The average Autodock Vina score obtained from the MD simulations for each protein-peptide complex was selected as the dependent variable to be predicted in the regression model. This com- bined MD/scoring approach has been implemented in the past to filter candidates that agree with experimental data [51,52]. However, users can run more exhaustive free energy calculations to predict the aﬃni- ties or to include experimental values if these are available, in order to justify the setup of a regression model able to predict energies using solely basic MD simulations. This reduces the required computational resources and provides a hybrid MD/ML approach that can be more ef- ficient for massive analysis such as protease novel substrate recognition [53].
The example provided is an illustrative case where capturing infor- mation from MD simulations can allow the reduction of prospective simulation time by preparing a model able to predict a particular MD- related observable. It means that information from MD trajectories can be captured in an ML model trained with MD-based descriptors, or if an experimental value is available, a descriptive model can be generated and complemented using the same MD-based descriptors. To visualize how these 70 descriptors are distributed among the included sequences, histograms of some properties are shown in Supplementary Fig. S2. We also plotted the distribution of the average scores to assess the variabil- ity of the metric to be predicted in the example, which is suitable for the machine learning application (Supplementary Fig. S3). A summary of the suggested model is shown in Fig. 3.

Machine learning model performance

As a toy example, we provide a simple analysis of training and testing a regression model using the descriptors calculated in the previous step. The goal is to illustrate one way to run the analysis, but the user has the option to customize the protocols based on the system and data available to build their own models.
For this application and based on the defined set of descriptors, we trained two regression models using the 513 peptide substrates as the




Fig. 3. Overall machine learning strategy. This includes the definition of training and test datasets based on sampled substrates and random docked peptides. The MD simulations and the peptide intrinsic properties are used to extract a set of descriptors to use them as input in predictive regression models.



training set, and the 365 random peptides as the test set. However, with the 513 peptides we did a 75/25 training/test schema using a maximal chemically diversity analysis with the included peptides (see Methods). The main regression metrics for this analysis is provided in the Supple- mentary Table S4. The results for the final training and test using the average score as the output variable is shown in Table 2.
In general, we observed a better performance of the linear regression model. However, in both cases the performances were acceptable with R2 values over 0.7. In particular, the gradient boosting technique al- lowed us to visualize per iteration the deviance of the results, and check which features are contributing the most to the predictions (Fig. 4).
Regarding the features, the most relevant are those derived from the protease-peptide energy terms, including the Coulomb and Lennard- Jonnes average and median descriptors. Some ligand-based features are also highlighted such as the number of rotatable bonds, which is an in- dicator of the peptide flexibility. An additional permutation importance
Table 2
Regression performances for the gradient boosting regressor and the linear regression model trained with the peptide substrates and tested with the random peptides. The metrics are associated with the predictions using the test set.




analysis was performed with similar results about the most relevant vari- ables (Supplementary Fig. S4). The protocol to reproduce the training of both models, as well as generate the gradient boosting related figures is available within the code repository.




Fig. 4. Gradient boosting regression model deviance and feature importance. (A) Deviance evolution of the model with the training set deviance in blue and the test set deviance in red. (B) Feature importance with the top 5 features of the model mentioned in the red square.


Technical considerations

The protocols were designed under the Ubuntu 20.04 operating sys- tem. However, the project can be installed in any Conda virtual envi- ronment with the required dependencies. In the case of the docking pro- tocol, it depends on calls to bash commands that were originally tested in a Linux environment. All the workflows depend on the addition of third-party tools, which are also open source, but will require building the source code in the local machine where the project will be imple- mented.
The docking method we provide is a supervised approach, initially motivated by a local project to dock epitopes into the MHC class II binding site [54]. This means that instead of providing a blind docking strategy where the binding site is undetermined, the user is required to customize the process based on previous knowledge of the protein and binding site, in order to focus the analysis on managing the peptide in- trinsic flexibility and reproducing plausible bound conformations. To al- low this, a grid search space should be assigned based on a required size. A set of known binding site coordinates must be provided to dock the initial peptide fragment, which can affect the starting point to grow the bound peptide structure. We recommend that if a crystallized protein- peptide complex exists, a tripeptide obtained directly from the refer- ence complex should be considered for the fragment-growing docking approach, to improve the results.
Finally, we suggest the parameters for running the MD simulations, but the user can configure them based on their own necessities. The only requirement is to use Gromacs for the calculations.

Conclusion

The computational study of how peptides interact with other molec- ular entities is crucial to accelerate the design of novel sequences with better properties, including their aﬃnities. In this work, we provide three open protocols that can be implemented to any protein-peptide of interest but exemplified in the context of a granzyme B system with available biological and structural knowledge. The protocols allow the analysis of massive peptide substrates through fragment-based docking
and MD sampling and scoring of the molecules. The code is open and can be modified to fit the user necessities, add new types of predictions and simulations, and automatize the pipeline for virtual screening purposes.

Data availability

The code, examples, and instructions to run the proto- cols are publicly available at: https://github.com/rochoa85/ Protocols-Peptide-Binding.

Declaration of Competing Interest

The authors declare that they have no known competing financial interests or personal relationships that could have appeared to influence the work reported in this paper.

Acknowledgments

The computations were performed in a local server of the Max Planck tandem group with an NVIDIA Titan X GPU. The project was funded by Minciencias, University of Antioquia, Ruta N, Colombia, and the Max Planck Society, Germany.

Supplementary materials

Supplementary material associated with this article can be found, in the online version, at doi:10.1016/j.ailsci.2022.100044.
References

London N, Raveh B, Schueler-Furman O. Peptide docking and structure-based char- acterization of peptide binding: from knowledge to know-how. Curr Opin Struct Biol 2013;23:894–902. doi:10.1016/j.sbi.2013.07.006.
Antes I. DynaDock: a new molecular dynamics-based algorithm for protein- peptide docking including receptor flexibility. Proteins 2010;78:1084–104. doi:10.1002/prot.22629.
Florez AM, Suarez-Barrera MO, Morales GM, Rivera KV, Orduz S, Ochoa R, Guerra D, Muskus C. Toxic activity, molecular modeling and docking simulations of bacil- lus thuringiensis cry11 toxin variants obtained via DNA shuﬄing. Front Microbiol 2018;9:2461. doi:10.3389/fmicb.2018.02461.



Weng G, Gao J, Wang Z, Wang E, Hu X, Yao X, Cao D, Hou T. Comprehensive eval- uation of fourteen docking programs on protein-peptide complexes. J Chem Theory Comput 2020;16:3959–69. doi:10.1021/acs.jctc.9b01208.
Unal EB, Besray Unal E, Gursoy A, Erman B. VitAL: viterbi algorithm for de novo peptide design. PLoS One 2010;5:e10926. doi:10.1371/journal.pone.0010926.
Antunes DA, Devaurs D, Moll M, Lizée G, Kavraki LE. General prediction of peptide- MHC binding modes using incremental docking: a proof of concept. Sci Rep 2018;8. doi:10.1038/s41598-018-22173-4.
Ochoa R, Laio A, Cossio P. Predicting the aﬃnity of peptides to major histocompati- bility complex class II by scoring molecular dynamics simulations. J Chem Inf Model 2019;59:3464–73. doi:10.1021/acs.jcim.9b00403.
Ochoa R, Soler MA, Laio A, Cossio P. Assessing the capability of in silico mutation protocols for predicting the finite temperature conformation of amino acids. Phys Chem Chem Phys 2018;20:25901–9. doi:10.1039/C8CP03826K.
Kamenik AS, Lessel U, Fuchs JE, Fox T, Liedl KR. Peptidic macrocycles - con- formational sampling and thermodynamic characterization. J Chem Inf Model 2018;58:982–92. doi:10.1021/acs.jcim.8b00097.
Yan Y, Zhang D, Huang S-Y. Eﬃcient conformational ensemble generation of protein- bound peptides. J Cheminform 2017;9:59. doi:10.1186/s13321-017-0246-7.
Rastelli G, Pinzi L. Refinement and rescoring of virtual screening results. Front Chem 2019;7:498. doi:10.3389/fchem.2019.00498.
Chodera JD, Mobley DL, Shirts MR, Dixon RW, Branson K, Pande VS. Alchemical free energy methods for drug discovery: progress and challenges. Curr Opin Struct Biol 2011;21:150–60. doi:10.1016/j.sbi.2011.01.011.
Genheden S, Ryde U. The MM/PBSA and MM/GBSA methods to esti- mate ligand-binding aﬃnities. Expert Opin Drug Discov 2015;10:449–61. doi:10.1517/17460441.2015.1032936.
Jacob K S, Ganguly S, Kumar P, Poddar R, Kumar A. Homology model, molecular dynamics simulation and novel pyrazole analogs design of Candida albicans CYP450
lanosterol 14 𝛼-demethylase, a target enzyme for antifungal therapy. J Biomol Struct
Dyn 2017;35:1446–63. doi:10.1080/07391102.2016.1185380.
Amaro RE, Baron R, McCammon JA. An improved relaxed complex scheme for recep- tor flexibility in computer-aided drug design. J Comput-Aided Mol Des 2008;22:693– 705. doi:10.1007/s10822-007-9159-2.
Wang DD, Ou-Yang L, Xie H, Zhu M, Yan H. Predicting the impacts of mu- tations on protein-ligand binding aﬃnity based on molecular dynamics simula- tions and machine learning methods. Comput Struct Biotechnol J 2020;18:439–54. doi:10.1016/j.csbj.2020.02.007.
Ballester PJ, Mitchell JBO. A machine learning approach to predicting protein- ligand binding aﬃnity with applications to molecular docking. Bioinformatics 2010;26:1169–75. doi:10.1093/bioinformatics/btq112.
Wang Y, Lamim Ribeiro JM, Tiwary P. Machine learning approaches for analyzing and enhancing molecular dynamics simulations. Curr Opin Struct Biol 2020;61:139–
45. doi:10.1016/j.sbi.2019.12.016.
Dral PO. Quantum chemistry in the age of machine learning. J Phys Chem Lett 2020;11:2336–47. doi:10.1021/acs.jpclett.9b03664.
Riniker S. Molecular dynamics fingerprints (MDFP): machine learning from MD data to predict free-energy differences. J Chem Inf Model 2017;57:726–41. doi:10.1021/acs.jcim.6b00778.
Wang S, Riniker S. Use of molecular dynamics fingerprints (MDFPs) in SAMPL6 octanol-water log P blind challenge. J Comput-Aided Mol Des 2020;34:393–403. doi:10.1007/s10822-019-00252-6.
Esposito C, Wang S, Lange UEW, Oellien F, Riniker S. Combining machine learn- ing and molecular dynamics to predict P-glycoprotein substrates. J Chem Inf Model 2020;60:4730–49. doi:10.1021/acs.jcim.0c00525.
Antunes DA, Moll M, Devaurs D, Jackson KR, Lizée G, Kavraki LE. DINC 2.0: a new protein–peptide docking webserver using an incremental approach. Cancer Res 2017;77:e55–7. doi:10.1158/0008-5472.can-17-0511.
Webb B, Sali A. Comparative protein structure modeling using MODELLER. Curr Protoc Protein Sci 2016;86:2.9.1–2.9.37. doi:10.1002/cpbi.3.
Dolinsky TJ, Nielsen JE, McCammon JA, Baker NA. PDB2PQR: an automated pipeline for the setup of Poisson-Boltzmann electrostatics calculations. Nucleic Acids Res 2004;32:W665–7. doi:10.1093/nar/gkh381.
Trott O, Olson AJ. AutoDock Vina: improving the speed and accuracy of docking with a new scoring function, eﬃcient optimization, and multithreading. J Comput Chem 2010;31:455–61. doi:10.1002/jcc.21334.
Rotonda J, Garcia-Calvo M, Bull HG, Geissler WM, McKeever BM, Willoughby CA, Thornberry NA, Becker JW. The three-dimensional structure of human granzyme B compared to caspase-3, key mediators of cell death with cleavage specificity for as- partic acid in P1. Chem Biol 2001;8:357–68. doi:10.1016/S1074-5521(01)00018-7.
Ochoa R, Magnitov M, Laskowski RA, Cossio P, Thornton JM. An automated protocol for modelling peptide substrates to proteases. BMC Bioinf 2020;21:586. doi:10.1186/s12859-020-03931-6.
Rawlings ND, Morton FR, Kok CY, Kong J, Barrett AJ. MEROPS: the peptidase database. Nucleic Acids Res 2007;36:D320–5. doi:10.1093/nar/gkm954.
Ochoa R, Cossio P. PepFun: open source protocols for peptide-related computational analysis. Molecules 2021;26. doi:10.3390/molecules26061664.
Kozakov D, Hall DR, Xia B, Porter KA, Padhorny D, Yueh C, Beglov D, Vajda S. The ClusPro web server for protein-protein docking. Nat Protoc 2017;12:255–78. doi:10.1038/nprot.2016.169.
de Vries SJ, van Dijk M, Bonvin AMJJ. The HADDOCK web server for data-driven biomolecular docking. Nat Protoc 2010;5:883–97. doi:10.1038/nprot.2010.32.
Zhou P, Jin B, Li H, Huang S-Y. HPEPDOCK: a web server for blind peptide-protein docking based on a hierarchical algorithm. Nucleic Acids Res 2018;46:W443–50. doi:10.1093/nar/gky357.
Xu X, Yan C, Zou X. MDockPeP: an ab-initio protein-peptide docking server. J Com- put Chem 2018;39:2409–13. doi:10.1002/jcc.25555.
Kurcinski M, Jamroz M, Blaszczyk M, Kolinski A, Kmiecik S. CABS-dock web server for the flexible docking of peptides to proteins without prior knowledge of the bind- ing site. Nucleic Acids Res 2015;43:W419–24. doi:10.1093/nar/gkv456.
Lamiable A, Thévenet P, Rey J, Vavrusa M, Derreumaux P, Tufféry P. PEP-FOLD3: faster de novo structure prediction for linear peptides in solution and in complex. Nucleic Acids Res 2016;44:W449–54. doi:10.1093/nar/gkw329.
Hauser AS, Windshügel B. LEADS-PEP: a benchmark data set for assess- ment of peptide docking performance. J Chem Inf Model 2016;56:188–200. doi:10.1021/acs.jcim.5b00234.
Hess B, Kutzner C, van der Spoel D, Lindahl E. GROMACS 4: algorithms for highly eﬃcient, load-balanced, and scalable molecular simulation. J Chem Theory Comput 2008;4:435–47. doi:10.1021/ct700301q.
Lindorff-Larsen K, Piana S, Palmo K, Maragakis P, Klepeis JL, Dror RO, Shaw DE. Improved side-chain torsion potentials for the Amber ff99SB protein force field. Pro- teins 2010;78:1950–8. doi:10.1002/prot.22711.
Jorgensen WL, Jenson C. Temperature dependence of TIP3P, SPC, and TIP4P water from NPT Monte Carlo simulations: seeking tem- peratures of maximum density. J Comput Chem 1998;19:1179–86.
doi:10.1002/(sici)1096-987x(19980730)19:10<1179::aid-jcc6>3.0.co;2-j.
Bussi G, Donadio D, Parrinello M. Canonical sampling through velocity rescaling. J Chem Phys 2007;126:014101. doi:10.1063/1.2408420.
Parrinello M, Rahman A. Crystal structure and pair potentials: a molecular-dynamics study. Phys Rev Lett 1980;45:1196–9. doi:10.1103/physrevlett.45.1196.
Di Pierro M, Elber R, Leimkuhler B. A stochastic algorithm for the isobaric-isothermal ensemble with ewald summations for all long range forces. J Chem Theory Comput 2015;11:5624–37. doi:10.1021/acs.jctc.5b00648.
Janezic D, Merzel F. An eﬃcient symplectic integration algorithm for molecular dynamics simulations. J Chem Inf Comput Sci 1995;35:321–6. doi:10.1021/ci00024a022.
Shirts MR, Klein C, Swails JM, Yin J, Gilson MK, Mobley DL, Case DA, Zhong ED. Lessons learned from comparing molecular dynamics en- gines on the SAMPL5 dataset. J Comput-Aided Mol Des 2017;31:147–61. doi:10.1007/s10822-016-9977-1.
McGibbon RT, Beauchamp KA, Harrigan MP, Klein C, Swails JM, Hernández CX, Schwantes CR, Wang L-P, Lane TJ, Pande VS. MDTraj: a modern open library for the analysis of molecular dynamics trajectories. Biophys J 2015;109:1528–32. doi:10.1016/j.bpj.2015.08.015.
G. Varoquaux, L. Buitinck, G. Louppe, O. Grisel, F. Pedregosa, A. Mueller, Scikit- Learn GetMob Mob Comput Commun 19 (2015) 29–33. 10.1145/2786984.2786995.
Gardiner EJ, Holliday J, O’Dowd C, Willett P. Effectiveness of 2D fingerprints for scaffold hopping. Future Med Chem 2011;3:405–14. doi:10.4155/fmc.11.4.
Raveh B, London N, Schueler-Furman O. Sub-angstrom modeling of complexes between flexible peptides and globular proteins. Proteins 2010;78:2029–40. doi:10.1002/prot.22716.
Lee H, Heo L, Lee MS, Seok C. GalaxyPepDock: a protein-peptide docking tool based on interaction similarity and energy optimization. Nucleic Acids Res 2015;43:W431–
doi:10.1093/nar/gkv495.
Ochoa R, Watowich SJ, Flórez A, Mesa CV, Robledo SM, Muskus C. Drug search for leishmaniasis: a virtual screening approach by grid computing. J Comput-Aided Mol Des 2016;30:541–52. doi:10.1007/s10822-016-9921-4.
Soler MA, Medagli B, Semrau MS, Storici P, Bajc G, de Marco A, Laio A, Fortuna S. A consensus protocol for the in silico optimisation of antibody fragments. Chem Commun 2019;55:14043–6. doi:10.1039/C9CC06182G.
Barkan DT, Hostetter DR, Mahrus S, Pieper U, Wells JA, Craik CS, Sali A. Predic- tion of protease substrates using sequence and structure features. Bioinformatics 2010;26:1714–22. doi:10.1093/bioinformatics/btq267.
Ochoa R, Lunardelli VAS, Rosa DS, Laio A, Cossio P, Multiple-Allele MHC. Class II epitope engineering by a molecular dynamics-based evolution protocol. Front Im- munol 2022;13:862851. doi:10.3389/fimmu.2022.862851.
