Available online at www.sciencedirect.com
ScienceDirect

AASRI Procedia 4 (2013) 319 – 328


2013 AASRI Conference on Intelligent Systems and Control
Clustering Software Components for Program Restructuring and Component Reuse Using Hybrid XOR Similarity Function
Chintakindi Srinivas,Vangipuram Radhakrishna, Dr.C.V.Guru Rao
Associate Professor of CSE, Kakatiya Institute of Technology and Science, Warangal, INDIA
Department of Information Technology, VNR Vignana Jyothi Institute of Engineering and Technolog, Hyderabad,INDIA Professor of Computer Science and Engineering, SR Engineering College,Warangal,INDIA



Abstract

Component based software development has gained a lot of practical importance in the field of software engineering from several researchers and also from industry perspective. Finding components for efficient software reuse is one of the important problems aimed by researchers. Clustering reduces the search space of components by grouping similar entities together thus ensuring reduced time complexity as it reduces the search time for component retrieval. In this research, we instigate a new a generalized approach for clustering a given set of documents or text files or components by defining a new similarity function called hybrid XOR function for the purpose of finding degree of similarity between two document sets or software components. We construct a matrix called similarity matrix of the order n-1 by n for a given set of n documents or components or patterns by applying hybrid XOR function. We define and design the algorithm for component or document clustering which has the input as similarity matrix and output being set of clusters formed dynamically as compared to other clustering algorithms that predefine the count of clusters. The output is a set of highly cohesive pattern groups or documents. The approach can be justified as it carries out very simple computational logic and efficient in terms of processing with reduced search space and can be also be used in general for document clustering or software component clustering.

© 2013 The Authors. Published by Elsevier B.V. Open access under CC BY-NC-ND license.
Selection and/or peer review under responsibility of American Applied Science Research Institute

Keywords : Clustering, hybrid XOR;frequent itemsets; mining;classification,components


Introduction

Clustering is one of the topics which have achieved a lot of practical importance from the researchers and also from the perspective of the software industry. The significance for clustering approach comes from the

* Corresponding author. Tel.: +9700684242
E-mail address: radhakrishna_v@vnrvjiet.in





2212-6716 © 2013 The Authors. Published by Elsevier B.V. Open access under CC BY-NC-ND license. Selection and/or peer review under responsibility of American Applied Science Research Institute doi:10.1016/j.aasri.2013.10.047


need of decision making such as classification, prediction , component search and retrieval and is thus widely used in many practical domains such as text classification , bioinformatics, medicine , image processing. We can define Clustering as the process of grouping similar set of patterns together [11]. The input to clustering algorithm may be any set of entities or patterns or text files or software components. The output of clustering algorithm will be a partition of cohesive groups. The abstract representation of clustering process is shown in figure 1 below.

Figure 1: Abstract view of clustering process

The representations or descriptions of clusters so formed shall be used in decision making such as which software component or pattern need to be selected. One important feature of clustering is that all the patterns within a cluster share common or same properties in some sense and patterns in different clusters are dissimilar in corresponding sense. In view of software engineering, all the components within the same cluster have high cohesion and low coupling.
Software component clusters can be treated as highly cohesive groups with low coupling which is the desired feature. One disadvantage of existing data clustering methods is that they do not adequately address the problem of processing large datasets with a limited amount of resources. Using these limitations as our motivation, so if we can try to reduce the dataset for training process it can help in reducing the cost of training which in turn improves efficiency of clustering. If done so, clustering takes less amount of space and hence forms a compact storage of patterns. Clustering is not any one specific algorithm that we can stick firm to, but it must be viewed as the general task to be solved.
Clustering algorithms may unsupervised or supervised [11]. In unsupervised clustering the partitions are viewed as the unlabelled patterns or components. Supervised clustering algorithms label the patterns which can be used to classify the components for decision making. Hence the partitions obtained by clustering process may be labeled or unlabeled.
A new method called Maximum Capturing is proposed for document clustering [3].Maximum Capturing includes two procedures: 1. constructing document clusters and 2. Assigning cluster topics. The search complexity can be reduced by using the algorithm [10] where ever necessary as part of component retrieval.

Taxonomy

The problem of finding frequent itemsets gets birth from [8] which uses frequent itemsets to find association rules of items in large transactional databases. In [1] clustering a given set of text documents from neighbour set is proposed. In [2] the authors propose a method for discovering maximum length frequent item sets. In [6], the classification of text files or documents is done by considering Gaussian membership function and making use of it to obtain clusters by finding word patterns. Each cluster is identified by its word pattern calculated using fuzzy based Gaussian membership function once clusters are formed.
In this paper the idea is to first obtain frequent item sets for each document using existing association rule mining algorithms either by horizontal or vertical approach. Once we find frequent itemsets in each document


then we form a Boolean matrix with rows indicating documents and columns indicating unique frequent item sets from each document. This is followed by the computation of a binary feature vector for each document pair, represented as a 2D array or 2D matrix by redefining the XOR function as hybrid XOR logic with slight modification in the function introducing high impedance variable as Z. The idea of maximum capturing is taken as the base framework for clustering.

Proposed Work

To design a clustering algorithm we must first design the similarity function which is the heart of any clustering algorithm. We define a generalized similarity function called Hybrid XOR function which may be used to compute similarity feature between any pair of entities which may be software components or software patterns or documents. The documents may be text files to be classified or software product documents of various phases in software life cycle. We define the similarity function S as a function of any two entities A and B which is a tri state function as shown below in the truth table 1.
Table 1. Truth Table of hybrid XOR Similarity Function


Hypothesis-1: If a frequent item set exists in the document, then the cell value of the matrix corresponding to
D [di,wk ] is made 1 else the corresponding cell value of the matrix is made as zero.
The algorithm for document clustering has its input as documents with frequent item sets and output as set of clusters formed dynamically. The approach followed is a tabular approach. Similarly the algorithm for component clustering has its input as software components with properties predefined and the output is a set of highly cohesive components with low coupling feature.

Algorithm for Clustering

// may be used for software component clustering or document clustering or pattern clustering in general Document_Clustering (Document set, frequent item sets)
Begin of Algorithm
Step1:For each document D do Begin
Step1.	Remove stop words and stemming words from each document. Step2. Find unique words in each document and count of the same.
Step3.	Find frequent itemsets of each document End for
Step 2: Form a word set W consisting of each word in frequent item sets of each document.
Step 3: Form Dependency Boolean Matrix with each row and column corresponding to each Document and each word respectivelyFor each document in document set do
Begin
For each word in word set do


Begin
If (word Wk in Word set W is in document Di) Begin
Set D[Di, Wk] = 1 Else
Set D[Di, Wk] = 0 End if
End for End for
Step 4 : Find the Feature vector similarity matrix by evaluating similarity value for each document pair applying Hybrid XOR Function defined in table 1 to obtain the matrix with feature vectors for each document pair.
Step 5: Replace the corresponding cells of matrix by count of number of zeroes in tri state feature vector.
Step 6: At each step, find the cell with maximum value and document pairs containing this value in the matrix.Group such document pairs to form clusters. Also if document pair (I, J) is in one cluster and document pair (J, K) is in another cluster, form a new cluster containing (I, J, K) as its elements.
Step 7: Repeat Step6 until no documents exist or we reach the stage of first minimum value leaving zero entry.
Step 8: Output the set of clusters obtained.
Step 9: label the clusters by considering candidate entries.
End of algorithm

Case Study showing process of document clustering

Consider the document sets with the frequent item sets obtained after mining using any of the existing association rule mining algorithms as shown below. Here we use can also use association rule mining algorithm with multiple support and confidence thresholds. We considered a set of random of 20 documents as the training set.
Table 2. Documents and Corresponding Frequent item sets



We now construct a Boolean matrix with rows indicating each document and column corresponding to each unique frequent item from set of frequent item sets of all documents sets respectively.
Table 3. Boolean matrix Representation of Table.2

We form a matrix D [n-1, n] for n documents and consider only the upper triangular region. The cells of the matrix are filled by applying the similarity function S for which each document pair forms the input as shown below
Table 4. Feature Vector Representation of document set

Once we obtain the above table with feature vectors for each document pair then we replace the corresponding cells of matrix by count of number of zeroes in tri state feature vector. We call it tri-state because it can have 0 or 1 or z as the value. This is shown in the table below.
Table 5. Similarity Matrix with Feature Vector Replaced by Count of 0s.



Now consider only the element of the matrix with the highest value as shown in the table below. The step by step procedure is shown below in the form of tables which is self explanatory.
Step1: find the first maximum value from the matrix and target only those cells having this value to form initial cluster.
Table 6. Content of Similarity Matrix showing step1


Step 2: Find the next max value from the above table which is 3 here and target those cells as they form the best candidate solutions. Now cluster {2, 4, 6} is dynamically changed to {1, 2, 3, 4, 6, 9} and is no more a separate cluster as shown in table.2. cell values with superscript * not considered.
Table 7. Content of Similarity Matrix showing step2


Step 3: Find the next max value from the above table which is 2 here and target those cells as they form the best candidate solutions.
Table 8. Content of Similarity Matrix showing step3


Step 4: Find the next max value from the above table which is 1 here and target those cells as they form the best candidate solutions.



Table 9. Content of Similarity Matrix showing step4

The Set of clusters finally formed are as shown below in the following figure.
Cluster-1: {1, 2, 3, 4, 6, 9}
Cluster-2 :{ 7, 8}
Cluster-3 :{ 5}


Figure. 2. Set of Clusters formed after applying the algorithm

Case Study for Software Component Clustering or Program Partitioning

Consider the following program fragment
Procedure Sum_and_Prod (n: integer; arr: int_array; var sum, prod: integer; var avg: float) var i : integer;
begin
sum = 0;
prod = 1;
for i = 1 to n do begin
sum = sum + arr[i];
prod = prod * arr[i];
end;


avg = sum / n; end;
The table below shows the matrix with rows denoting line numbers or statements, columns denoting variable names.
Table 10. Boolean Matrix for program module


The table below shows the similarity matrix formed using algorithm. The below list of tables show the step by step process of forming clusters and final output of clusters and are self descriptive.
Table 11. Trace of algorithm for stage 1




Table 12. Trace of algorithm for stage 2


Table 13. Trace of algorithm for stage 3


The program module may finally be separated into two individual cluster modules which may run separately


Cluster1	Cluster2

Figure. 3. Program partitioning to run two modules in parallel

Conclusion

In this paper an attempt is made to study the problem of clustering software components for developing reuse library files and also the method of document clustering. An algorithm to cluster a set of given documents or text files or software components is designed which uses the new similarity function defined in this paper named hybrid XOR function defined for the purpose of finding degree of similarity among any two entities. The Proposed algorithm has the input as similarity matrix and the output being set of clusters formed dynamically as compared to other clustering algorithms that predefine the count of clusters and documents being fit to one of those clusters or classes finally. The approach can be extended to classify using classifiers and applying fuzzy logic in future. The concept of Support vector machines may be used for classification once clusters are formed if required. The search complexity can be reduced by using the algorithm [10] where ever necessary as part of component retrieval.


Acknowledgements

We are very much thankful to all the anonymous reviewers and mainly thankful to Sri Dr. C.V.GuruRao for his invaluable suggestions and support throughout the work. We are also thankful to Mr. V.Sreekanth, Senior Technical Lead, Business Intelligence and Warehousing architect,IBM, Bangalore for his cooperation in carrying out the work.


References
Congnan Luo, , Yanjun Li, Soon M. Chung. Text document clustering based on neighbors , Data & Knowledge Engineering (68), 2009, 1271–1288.
Tianming Hu,Sam Yuan Sung, Hui Xiong, Qian Fu. Discovery of maximum length frequent itemsets, Information Sciences (178), 2008,69–87.
Wen Zhanga,, Taketoshi Yoshida, Xijin Tang, Qing Wang. Text clustering using frequent itemsets,
Knowledge-Based Systems 23 (2010) 379–388
Wen Zhanga,Taketoshi Yoshida, Xijin Tang. A comparative study of TF*IDF, LSI and multi-words for text classification. Expert Systems with Applications 38 (2011) 2758–2765.
Vincent Labatut and Hocine Cherifi. Accuracy Measures for the Comparison of Classifiers, ICIT 2011 The 5th International Conference on Information Technology.
Jung-Yi Jiang et.al A Fuzzy Self-Constructing Feature Clustering Algorithm for TextClassification, IEEE TRANSACTIONS ON KNOWLEDGE AND DATA ENGINEERING, VOL. 23, NO. 3, MARCH 2011.
Melita Hajdinjak, Andrej Bauer. Similarity Measures for Relational Databases, Informatica 33 (2009) 143–149.


R. Agrawal, T. Imielinski, A. Swami. Mining association rules between sets of items in very large
databases, Proceedings of the ACM SIGMOD Conference on Management of data, 1993, pp. 207–216.
F. Beil, M. Ester, X.W. Xu, Frequent term-based text clustering, in: Proceedings of the 8th ACM
SIGKDD International Conference on Knowledge Discovery and Data Mining, 2002, pp. 436–442.
Radhakrishna.V,C.Srinivas, C.V.Guru rao. High Performance Pattern Search algorithm using three sliding windows , International Journal of Computer Engineering and Technology , Volume 3,issue 2, 2012 , pages 543-552. Impact factor 3.85.
V.Susheela Devi, M. Narasimha Murthy. Text Book on Pattern Recognition. An Introduction. University Press.
Salim kebir, Abdelhak-djamel seriai, Sylvain Chardigny. Comparing and Combining Genetic and Cluster Algorithms for Software Component Identification, in the Proceedings of the ACM Fifth International Conference on Computer Science and Software Engineering, Pages 1-8, 2012.
Ronaldo.C.Veras, Silvio R.L.Meira , Adriano L.I. Oliveira , Brun J.M.Melo. Comparitive study of
clustering techniques for the organisation of software repositories, in the proceedings of 19th IEEE International Conference on Tools with Artificial Intelligence.







Dr. C.V.GuruRao is currently the Head of the Department of CSE at S.R.Engineering College, Warangal, Andhra Pradesh, India. He has nearly 30 Years of teaching experience. He is a double post graduate, with specializations in Electronic Instrumentation and Information Science & Engineering. He is Doctorate holder in Computer Science & Engineering from Indian Institute of Technology, Kharagpur, India. He has more than 30 publications to his credit. He also served as the Chairman, Board of Studies for Computer Science & Engineering and Information Technology, Kak tiya University, Warangal. He is also serving as the Editorial Board member for International Journal of Computational Intelligence Research and Application journal. He is a life member of Indian Society for Technical Education, Instrumentation Society of India, and member of Institution of Engineers, Institution of Electronics & Telecommunications Engineers and Institution of Electrical & Electronics Engineers (USA).





	 C.Srinivas is a Masters Degree holder in Computer Science and Engineering from JNTU, Hyderabad. Presently he is working as an Associate Professor in CSE Department at Kakatiya Institute of Technology and Sciences, Warangal and is a research scholar at Kakatiya University under the guidance of Dr.C.V.Guru Rao. He has over 15years of teaching experience and presented papers at several national and international conferences and workshops. His areas of interest are Software Reuse, Cloud Computing.
