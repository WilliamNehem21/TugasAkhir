Array 19 (2023) 100317










A comprehensive framework for hand gesture recognition using hybrid-metaheuristic algorithms and deep learning models
Hassan Mohyuddin a, Syed Kumayl Raza Moosavi b, Muhammad Hamza Zafar c,
Filippo Sanfilippo c,d,∗
a Department of Electrical Engineering, Capital University of Sciences and Technology, Islamabad 44000, Pakistan
b School of Electrical Engineering and Computer Science, National University of Sciences and Technology, Islamabad 44000, Pakistan
c Department of Engineering Sciences, University of Agder, Grimstad 4879, Norway
d Department of Software Engineering, Kaunas University of Technology, Kaunas 51368, Lithuania


A R T I C L E  I N F O	A B S T R A C T

	

Keywords:
Feature selection Dimensional reduction Big data
Meta heuristic algorithms Machine learning
This paper presents a novel methodology that utilizes gesture recognition data, which are collected with a Leap Motion Controller (LMC), in tandem with the Spotted Hyena-based Chimp Optimization Algorithm (SSC) for feature selection and training of deep neural networks (DNNs). An expansive tabular database was created using the LMC for eight distinct gestures and the SSC algorithm was used for discerning and selecting salient features. This refined feature subset is then utilized in the subsequent training of a DNN model. A comprehensive comparative analysis is conducted to evaluate the performance of the SSC algorithm in comparison with established optimization techniques, such as Particle Swarm Optimization(PSO), Grey Wolf Optimizer(GWO), and Sine Cosine Algorithm(SCA), specifically in the context of feature selection. The empirical findings decisively establish the efficacy of the SSC algorithm, consistently achieving a high accuracy rate of 98% in the domain of gesture recognition tasks. The feature selection approach proposed emphasizes its intrinsic capacity to enhance not only the accuracy of gesture recognition systems and its wider suitability across diverse domains that require sophisticated feature extraction techniques.





Introduction

Big data analytics is one of the key areas where the next generation of parallel and distributed systems will be used. Nowadays, exabyte- sized data repositories for these applications exist and are growing quickly. These datasets, in addition to their sheer size, provide major obstacles to techniques and software development. The volume and security concerns of datasets, which are frequently dispersed, call for distributed methods using platforms used to store data frequently have a wide range of computing and networking capabilities. Many appli- cations require careful consideration to fault-tolerance, security, and access control [1]. Analysis tasks often come with tight deadlines, and in certain cases, ensuring high-quality data is a significant challenge. Data-driven models and techniques that can function at scale are yet unknown for most developing applications.
The term ‘‘Big Data’’ encompasses not only the immense volume of data but also its intricate complexity and diverse variety [2], and velocity [3]. The advent of big data has revolutionized organizational operations and decision-making processes [4]. Through the utilization of advanced big data analytical tools and technologies, organizations
can harness valuable insights into customer behavior, market trends, and operational performance. These insights enable informed decision- making, drive efficiency enhancements, and foster innovation within the organization [4]. But the sheer volume of data alone cannot better systems, it is not just the quantity of data but also its quality that affects the output of a system [5]. The presence of poor-quality data can have detrimental effects on decision-making and business operations, as it may result in inaccurate and unreliable outcomes. Such consequences can significantly impact the organization’s effectiveness and success. Therefore, ensuring data quality is of utmost importance to mitigate risks and make sound decisions based on trustworthy information [6]. Therefore, good quality data is an empirical part of modern technology and it is being used everywhere from using machine learning (ML) al- gorithms to redefine healthcare and make more accurate diagnoses [7] to its use in reshaping our modern-day financial decisions [8].
Human action recognition is also an area that has become increas- ingly popular in the pattern recognition and computer vision areas as a consequence of the expansion of numerous interactive applications in human–computer interaction. Hand gesture detection (HGD) is used

∗ Corresponding author at: Department of Engineering Sciences, University of Agder, Grimstad 4879, Norway.
E-mail address: filippo.sanfilippo@uia.no (F. Sanfilippo).

https://doi.org/10.1016/j.array.2023.100317
Received 18 June 2023; Received in revised form 20 August 2023; Accepted 27 August 2023
Available online 1 September 2023
2590-0056/© 2023 The Author(s). Published by Elsevier Inc. This is an open access article under the CC BY license (http://creativecommons.org/licenses/by/4.0/).



in a variety of applications gaming, virtual reality, and healthcare to perform critical operational procedures. Using gestures to control a computer or a smart device, or enable a virtual character to mimic the movements of a user in a virtual reality environment would remove the requirement for an intermediate input device between humans and computers and users will be able to control machines with mere gestures [9]. Two main methods are being used for HGD, namely Static HGD and Dynamic HGD. Static HGD means the detection of still gestures whereas Dynamic HGD covers motion-based gestures. Over the years, researchers have developed a variety of ways for HGD including wearable technology-based, depth-based [10], and vision- based detection [11]. While wearable gloves can accelerate the process, it is important to note that the underlying technology can be costly and does not always ensure reliable outcomes. On the other hand, the availability of cheap but efficient sensors has played its part in the evolution of this field. Sensors like the Microsoft Kinect, Intel Realsense, and Sensz3D provide depth and color information, while the Leap Motion Sensor (LMC), employed in this study, captures short IR images and provides data regarding the skeletal information of the hand. The data can either is captured visually or it can be tabulated from the sensor data [12–14].
Another method, found in literature, is to use raw data directly and apply ML algorithms to identify gestures. This method has been dis- cussed in [15] using the Deep Learning technique on more than 30000 features and in [16] using the k-nearest neighbors algorithm (KNN), Decision Trees, and support vector machines (SVM). The advantage of using raw data is that it is faster than the conventional algorithms used for image detection and with large enough data the efficiency could be improved greatly. However, not all features extracted from the sensor are useful and it is hard to go through each feature and find those that give the best results. In this regard, using feature selection techniques can narrow down the data set to the specific features which give the best results [17].
Feature selection (FS) is being used in a variety of applications for the process of reducing data sets without compromising on the efficiency of the system and in most cases even enhancing the perfor- mance as well by removing redundant features [9,18]. Dimensionality reduction using feature selection methods can be achieved in a va- riety of ways including selection based on statistical properties and correlations (Filter based methods) [19], using conventional techniques such as PCA [20] or LDA [21] and using Wrapper based methods. However, there is a new range of algorithms which, over the years have proven to be more effective in solving this problem for complex data sets, these are called metaheuristic algorithms. Metaheuristic al- gorithms have been widely used in feature selection to derive optimal feature subsets. These algorithms are renowned for their capability to discover the optimal solution within expansive feature spaces. They are commonly employed in optimization problems characterized by intricate search spaces and non-linear objective functions. Their ef- fectiveness in navigating complex landscapes makes them valuable tools for tackling challenging optimization tasks. These are inspired by natural processes, such as evolution, hunting, movement, or foraging behavior of different organisms. Several bio-inspired meta-heuristic algorithms are commonly used in various optimization problems. Some of the most well-known bio-inspired meta-heuristic algorithms include Particle Swarm Optimization (PSO), Genetic Algorithm (GA), Artificial Bee Colony (ABC) Optimization, Firefly Algorithm (FA), Grey Wolf Optimization (GWO), and Whale Optimization Algorithm (WOA). Each of these algorithms is inspired by different biological phenomena, such as swarming behavior, evolution, migration, hunting, and foraging.
The LMC from Ultraleap is an optical hand-tracking device. It is primarily intended for use in interactive software applications for hand gesture and finger position recognition [22]. It records the motion of the user’s hands and fingers to enable natural interaction with the digital content and has been widely used for gesture detection in various applications, including:
Human-Computer Interaction (HCI): the LMC can be used to pro- vide a new form of interaction between humans and computers. With gesture recognition, users can control their computers and applications with hand and finger movements [23,24].
Virtual/Augmented/Mixed Reality (VR/AR/MR): the LMC can be integrated into VR/AR/MR systems to provide a more im- mersive and natural experience [25,26]. Users can use hand and finger gestures to control and interact with virtual environments.
Gaming: the LMC can find applications in gaming to provide a new interactive environment for users in the game. Players can control games with hand and finger gestures, providing a more immersive and intuitive gaming experience
The LMC uses IR (Infrared) imaging to quickly ascertain the locations of preset objects within a constrained area. The controller follows hand
movement in 3D interaction region that spans to more than 60 cm (24′′)
and has a nominal viewing field of 140◦ 𝑥 120◦. The software provided
by the manufacturer can capture 27 different hand features, such as
bones and joints, and follow them even when they are hidden by other parts of the hands. Fig. 1(a) shows the reference hand model used by the LMC and a reference output image extracted using the visualizer provided by UltraLeap shown in Fig. 1(b).
The LMC employs two 640 𝑥 240 pixel near IR cameras and three IR
LEDs which are spaced equally. The LMC device structure is shown in
Fig. 2. The sensor is integrated with the system using LeapMotion SDK provided by the manufacturer supported to use with Python. Data from LMC can be extracted both in image form and as spatial coordinates in tabular form. A total of 208 features are provided which consist of rotational and spatial features of the palm, fingers, and bones of each hand.
Datasets employing pictorial or moving frame information have been used extensively for HGD, however, in this paper we consider the possible use of spatial and spatiotemporal data for the purpose of gesture detection. As discussed earlier the LMC outputs 208 feature vectors and all features are not of equal quality, some may be redundant or carry no substantial information thereby degrading the performance of the model [28]. Employing intelligent algorithms for the process of feature reduction can greatly increase model efficiency and reduce computational expenses, thereby making the algorithm faster [29]. In order to determine the optimum subset for feature selection issues, such techniques as greedy, exhaustive, and random search have been used. The majority of algorithms, in literature, suffer problems like premature convergence, excessive complexity, and high computational expenses.
Over the last few decades, metaheuristic algorithms have emerged as promising approaches for addressing complex optimization prob- lems. These algorithms provide effective solutions by leveraging in- telligent search strategies and adaptive techniques, enabling them to navigate intricate search spaces and tackle non-linear objective func- tions. Their widespread application has shown great potential in solving diverse real-world problems and advancing optimization methodolo- gies [30].
Metaheuristic algorithms are a new category of search and opti- mization algorithms that are inspired by different naturally occurring phenomena, a basic classification of these algorithms is shown in Fig. 3 [31]. Metaheuristic algorithms are more flexible and adapt- able and can handle large amounts of data. Population-based search algorithms span wide search space efficiently and random search- based algorithms provide an efficient solution against local maxima problems. Moreover, bio-inspired algorithms are based on naturally occurring phenomena like hunting, foraging, and breeding behaviors of several animals [32]. PSO, GWO, and ABC are some of the most common nature-based bio-inspired metaheuristic algorithms. These algorithms use a population of organisms to scout a wide search space(exploration), then each population is evaluated against a cost function(exploitation) and finally, the populations converge on a so- lution [33,34]. During each iteration, randomness is introduced in


	


/ig. 1. Human Hand visualization using the LMC.


/ig. 2. LMC Schematic Diagram [27].


/ig. 3. Brief Classification of Meta-Heuristic Algorithms.


the population so the solution(mutation) does not get stuck on local minima. The ability of these algorithms to deal with large dataset and complex real-world problems make them an ideal candidate for the purpose of dimensionality reduction.
In this paper, a dataset is developed containing eight static fea- tures using the LMC. The dataset is then pre-processed and passed through a metaheuristic algorithm. The first step is to use a hybrid
metaheuristic algorithm for dimensionality reduction. Then the results are compared with conventional algorithms and it is empirically shown that the selected algorithm performs better than its conventional coun- terparts. The reduced dataset is then passed through a deep neural network(DNN)which is further trained by employing the same hybrid metaheuristic algorithm for the gesture classification purpose. At this stage, neural networks are trained for both reduced and complete




/ig. 4. Proposed scheme of study for the proposed technique.


datasets. The results compiled show that reducing the dataset reduces the number of parameters to be trained and the complexity of the DNN without compromising the overall efficiency of the system. A detailed figure of the scheme developed during the course of this paper is shown in Fig. 4.

Contribution and paper organization

The contributions of this work are:
Creation of a new hand gesture dataset that can potentially be used for future research in hand gesture recognition.
Development of a novel metaheuristic algorithm (SSA) for feature extraction from a hand gesture dataset collected using the LMC.
Comparison of the performance of the proposed metaheuristic al- gorithm with other state-of-the-art algorithms i.e. PSO, GWO and SCA for feature extraction from hand gesture data is evaluated.
Development of a hybrid deep learning model (SSA-DNN) that integrates the proposed metaheuristic algorithm for feature ex- traction is formulated. The model can achieve better performance with selected and full features.
The proposed methodology and experimental setup can poten- tially serve as a framework for other researchers interested in developing hand gesture recognition models.
The remainder of the paper is composed as follows. Section 2 discusses recent related work. In Section 3 details about the dataset generation and pre-processing is described. Section 4 highlights the details of the proposed technique for feature selection. Section 5 discusses the proposed technique for classification and Section 6 covers results and discussion of the experiment.

Related work

Metaheuristics have been the center for research in computing and optimization problems for the past few decades. GWO, ABC, PSO, and WOA are among some of the most widely used nature-inspired algo- rithms for solving complex real-world problems. PSO is a population- based algorithm derived from the collective movement of a flock of birds or a school of fish. It employs a swarm of particles to search for the best solution by adjusting their speed and position relative to
their own experience and the experience of their neighbors [35]. GWO is a population-based optimization algorithm inspired by the hunting behavior of grey wolves. It mimics a wolf pack’s leadership hierarchy and hunting mechanism to search for optimal solutions [36]. ABC is a population-based optimization algorithm inspired by the foraging behavior of honey bees. It uses a population of artificial bees to cover the search space and determine the best global solution [37]. WOA is a meta-heuristic algorithm inspired by the hunting behavior of humpback whales. It mimics the bubble-net hunting technique used by humpback whales to find optimal solutions [38]. More recent hybrid algorithms have also been developed that use multiple meta-heuristic techniques or a combination of meta-heuristic and optimization algorithms to solve the problems more effectively [39]. Azzougui et al. [40] used GWO to find the optimal placement of phasor measurement units in a wide area network and applied the technique on the Algerian 63 bus system.
Researchers have developed a significant interest in the field of human–computer interaction (HCI) in recent years, and one of the key areas within this field is gesture detection. Researchers have studied multiple gesture detection methods including wearable technology, vision-based and depth-based detection. In [41], the use of accelerom- eters and gyros have been discussed whereas [42,43] discuss the use of multi-touch sensors to capture hand and finger movements. Depth sen- sors, a fairly new technology as compared to other HGD techniques [44, 45], show image-based feature extraction and gesture detection using LMC. Yao et al. [46] discussed the application of Microsoft’s Kinect for the purpose of HGR. Zeng et al. [47] proposed a new technique for HGR using LMC via deterministic learning. The method extracts features from LMC and models hand motion dynamics using constant radial basis function neural networks. Using different cross-validation styles, the method achieves good accuracy for the classification of English alphabets and Arabic numerals. Lu et al. [48] presented a method for dynamic HGR using LMC and a novel feature vector. The method uses a Hidden Conditional Neural Field classifier to determine gestures based on their depth information. Xu et al. [49] presented a HGR system using feature extraction and NN. The system consisted of four stages: image acquisition, data pre-processing, feature extraction, and classification. The system was able to recognize 10 hand gestures from the American Sign Language (ASL) alphabet. The study compared different feature extraction methods and different neural network architectures and evaluated the performance of the system using accuracy, precision,


Table 1
Data extracted from the LMC.


recall, and F-measure metrics. In [15], the authors presented a HGR system using LMC and DNN. The system reconstructed the palm model and extracted the feature data from LMC. The system trains the DNN model with the normalized data to achieve good gesture recognition accuracy. For the dataset, 30 features were captured from the LMC mainly focusing on the spatial positioning of the palm and bones. The
about the position and rotational features of hands, fingers, and bones. This data is pre-processed and transformed into a set of features that represent the gesture. Using a standard deviation depended algorithm features with less information are removed. Data is normalized dur- ing the pre-processing phase as this can improve model performance, prevent data biases, and increase its convergence speed.

paper focused on the classification of three gestures by employing static
′
	𝑚𝑖𝑛𝐴	

feature selection and classification using a DNN model.
𝜉𝑎 = 𝜉𝑎 − 𝑚𝑎𝑥
– 𝑚𝑖𝑛𝐴
(1)

Experimental setup

For this experiment the LMC was mounted on a jig to keep the posi- tion static. The data was collected under controlled lighting conditions throughout the experiment as IR sensors are sensitive to light. During the course of the experiment, data was collected with varying distances ranging from 100 mm to 300 mm to add variation in scale. The LMC was integrated with the system using LEAPSDK v2.0 and python 2.7 on a Hp core i3-10th generation Intel micro-processor and no GPU. The data set was collected and stored as .csv file. This data was then imported to Python 3 and pre-processed using a variance-based method for initial scrutiny of the feature set. After the first pre-processing the data was normalized and passed through the feature selection and classification algorithms.

Dataset generation

Data for eight static hand gestures was recorded for both left and right hands with 16 participants. A mixed variety of participants was included from different age groups and genders to introduce variation in scale. Data was recorded at different heights for both Left and Right hands and some gestures were skewed intentionally to introduce vari- ation in orientation to cater to different real-world scenarios. Previous datasets available online use pictorial representation however, for the purpose of this paper tabular data is collected to train the proposed model. The LMC gives 210 feature points for each sample point. A sample of entry for each class is shown in Table 1. Out of these only 19 features were dropped due to negligible variance. The dataset contains positional and rotational data for the wrist and palm. The sensor also gives the position of four bones(meta-carpel, proximal, intermediate, and distal) of each finger. A total of 264 sample points were collected for five labels. Some of the feature points are shown in Fig. 5. To further improve model performance data was normalized to create a uniform distribution. It was observed that the model gave good and consistent results when using normalized data. Table 1 displays several data points. Fig. 6 shows the correlation of data points plotted between different features against gesture classes. It is evident that simply choosing random features will not help in designing a good model for gesture detection as the data points are not distributed distinctly.

Dataset pre-processing

Data pre-processing in this case mainly comprises data normaliza- tion. The minima and maxima of each feature are extracted and data is normalized as per (1). The raw data from the LMC includes information
where 𝜉𝑎 shows the current value, 𝑚𝑖𝑛𝐴 and 𝑚𝑎𝑥𝐴 are the minimum and maximum value of 𝐴th column.

Proposed technique for feature selection

The scientific community is growing keen on feature selection sig- nificantly, the best traits from a preliminary dataset are selected to enhance the quality of features in numerous ML tasks, including clas- sification, regression, clustering, and time-series activity prediction [50,51]. Dimensionality reduction techniques are a key area of research in data mining and machine learning. They are intended to select the best subset of relevant features from an original dataset using specific evaluation criteria, which results in better learning performance, better model interpretability, lower computational costs, and greater learning accuracy. The objective function is typically defined in terms of the accuracy, efficiency, or other performance measures of a machine learning model that is trained on the selected features.
In a context where time and computing resources are restricted, achieving optimal solutions for complex optimization problems be- comes challenging. This is where metaheuristic algorithms come into action. Metaheuristic algorithms are high-level problem solvers de- signed to generate satisfactory solutions for difficult optimization prob- lems that are hard to solve optimally. These methods excel in situations where data may be incomplete or imperfect. Instead of relying on exhaustive search or exact algorithms, they employ heuristics and iterative processes to explore the solution space and converge towards promising solutions. By leveraging their flexibility and adaptability, Metaheuristic algorithms offer a practical approach to finding good solutions within reasonable time constraints. They are particularly useful in situations where traditional optimization techniques may struggle due to the complexity and computational demands of the problem at hand. Feature selection is one of the most tedious optimiza- tion problems, several metaheuristic techniques such as PSO, WOA, GWO and BChOA, have been employed to find the optimal solution with accuracy and efficiency [52]. In [53], the authors have used Binary Chimp Optimization Algorithm to reduce the feature map of the biomedical dataset for classification. In [54], Dragonfly Algorithm has been used for the dimensionality reduction of a Drug Bank dataset. This study utilizes a new class of hybrid metaheuristic algorithms that has been developed by combining other basic metaheuristic algorithms and has been proven to be more effective as compared to the parent algorithms. This study discusses the use of a Spotted hyena-based Sine- cosine Chimp optimization (SSC) algorithm for the purpose of feature selection.




/ig. 5. Gestures used for detection.


/ig. 6. Correlation sample between different features on the 𝑥 and 𝑦 axis vs. Gesture classes on the 𝑧-axis.


SSC metaheuristic algorithm

As discussed in Section 1.1, the dataset developed for gesture de- tection contains 191 features. Solving a classification problem for such a dataset using conventional methods will not yield useful results.
the population towards or away from the optimal solution. By intro- ducing the randomness based on these oscillatory functions this system has shown promising results to tackle the local optima problem. The solution update mechanism for the algorithm is depicted as:
𝜁 𝑘+1 = 𝜁 𝑘 + (𝑅1 ∗ 𝑠𝑖𝑛(𝑅2) ∗ |𝑅3.𝜁 𝑘 − 𝜉𝑡|)	(2)

The hybrid algorithm, SSC [55], used is based on the Sine-Cosine	𝑖	𝑖
𝑖	𝑖

Algorithm (SCA) [56], Spotted Hyena Optimizer (SHO) [57] and Chimp
𝜁 𝑘+1 = 𝜁 𝑘 + (𝑅1 ∗ 𝑐𝑜𝑠(𝑅2) ∗ |𝑅3.𝜁 𝑘 − 𝜉𝑡|)	(3)

Optimization Algorithm (ChOA) [58]. The algorithm is inspired by the	𝑖	𝑖
𝑖	𝑖

sexual attraction of chimps and the exploration of spotted hyenas. The sine-cosine algorithm has been used to introduce randomness in order to solve the local minima problem. The initialization process of ChOA along with the attacking strategy of SHO and update rule as per SCA has shown good results as compared to the individual algorithms. The use of SCA helps to avoid local minima while the ChOA widens the search space for better global minima tracking.

Sine-cosine algorithm
SCA was originally presented by Mirjalili in [59], the algorithm utilizes the mathematical model of sine-cosine functions to fluctuate
where 𝜁 𝑘 is the current position in 𝑖th dimension at 𝑘th iteration and


𝑅1, 𝑅2, 𝑅3 are random numbers and 𝜉𝑡 is the solution for 𝑖th iteration and 𝑘th population. A graphical representation of SCA is given in Fig. 7.
Spotted hyena algorithm
The spotted hyena algorithm is based on social activity and the relation between hyenas. It mainly focuses on the attacking, encircling, hunting, and searching behavior of hyenas. SHO mimics the activity of spotted hyenas to achieve an optimum solution. Encircling can be depicted by the following two equations.
𝜁⃖⃖⃖⃗ = |𝐴.𝜉⃖⃖⃗(𝑥) − 𝜉⃖⃗(𝑥)|	(4)





/ig. 7. Metaheuristic: Sine-Cosine Optimization Algorithm.



𝜉⃖⃗(𝑥 + 1) = 𝜉⃖⃖⃗(𝑥) − 𝐵.𝜁⃖⃖⃖⃗


(5)

𝑝	ℎ

where 𝜉𝑝 show the optimum feature vector (FV), 𝜉(𝑥) is the current FV and 𝜁ℎ shows the distance that the corresponding hyena would have to travel to catch its prey. The coefficients 𝐴 and 𝐵 are calculated using
the following equations
𝐴 = 2.𝑑1	(6)
𝐵 = 2.ℎ.𝑑2 − ℎ	(7)
/ig. 8. Working mechanism of ChoA Algorithm.




𝑥𝑐ℎ𝑖𝑚𝑝(𝑖 + 1) = 𝑥𝑝𝑟𝑒𝑦(𝑖) − 𝛼.𝛽	(15)
where 𝑖 is the number of current iterations, 𝑥𝑝𝑟𝑒𝑦 is the position of prey and 𝑥𝑐ℎ𝑖𝑚𝑝 is the chimp position. The vectors 𝛼, 𝑚, and 𝛾 can be

ℎ = 5 − 𝑘𝑡ℎ ∗ 5
𝑚𝑎𝑥𝑘
(8)
calculated as:

here, the value 𝑘th is the value of current iteration and 𝑚𝑎𝑥𝑘 is the
shown in (8), and 𝑑1 and 𝑑2 are random numbers within the range of maximum number of iterations. The vector h is reduced from 5 to 0, as [0, 1]. Following equations map the hunting regions of spotted hyenas:
𝛼 = 2.𝑓 .𝑟1 − 𝑓	(16)
𝛾 = 2.𝑟2	(17)
During the iterative process the coefficient 𝑓 is reduced form 2.5 to 0,

𝜁⃖⃖⃖⃗ = |𝐴 ∗ 𝜉⃖⃖⃖⃗ − 𝜉⃖⃖⃖⃗|	(9)
𝑟 . and 𝑟
are random values in the range [0,1]. The attacking model

ℎ	ℎ	𝑘	1	2

𝜉⃖⃖⃖⃗ = 𝜉⃖⃖⃖⃗ − 𝐵 ∗ 𝜁⃖⃖⃖⃗
(10)
of chimps can be described by the following equations.
𝛿𝑎𝑡𝑡𝑎𝑐𝑘𝑒𝑟 = |𝑐1.𝛼𝑎𝑡𝑡𝑎𝑐𝑘𝑒𝑟 − 𝑚1.𝑥|	(18)

𝑂⃖⃖⃖⃖⃗ = 𝜁⃖⃖⃖⃗ + 𝜁⃖⃖⃖⃖⃖⃖⃖⃗ + ⋯ + 𝜁⃖⃖⃖⃖⃖⃖⃖⃖⃗
(11)

ℎ	𝑘
𝑘+1
𝑘+𝑁

where 𝜉⃖⃖⃖⃗ shows the search space of the corresponding hyenas and 𝑂⃖⃖⃖⃖⃗
𝛿𝑏𝑎𝑟𝑟𝑖𝑒𝑟 = |𝑐2.𝛼𝑏𝑎𝑟𝑟𝑖𝑒𝑟 − 𝑚2.𝑥|	(19)

𝑘	ℎ

shows the cluster of optimal solutions and 𝑁 is the number of iterations
which can be calculated as.
𝑁 = 𝑐𝑜𝑢𝑛𝑡𝑛(𝜁⃖⃖⃖⃗, 𝜁⃖⃖⃖⃖⃖⃖⃖⃗, 𝜁⃖⃖⃖⃖⃖⃖⃖⃗, … , 𝜁⃖⃖⃖⃖⃖⃖⃖⃖⃖⃗)	(12)
𝛿𝑐ℎ𝑎𝑠𝑒𝑟 = |𝑐3.𝛼𝑐ℎ𝑎𝑠𝑒𝑟 − 𝑚3.𝑥|	(20)

ℎ
𝜁⃖⃗(𝑥 + 1) =  𝑂⃖⃖⃖⃖⃗
𝑁
ℎ+1
ℎ+2
ℎ+𝑀
(13)
𝛿𝑑𝑖𝑣𝑒𝑟 = |𝑐4.𝛼𝑑𝑖𝑣𝑒𝑟 − 𝑚4.𝑥|	(21)
The initial chimps position is determined by the value of random vectors. The chimp’s next position will be between its current position

where, 𝑛 is the number of solutions that are in a region close to the
optimal solution. The vector 𝑀⃖⃖⃖⃗ shows a randomly initialized vector between [0.5, 1]. The best solution 𝜁⃖⃗(𝑥 + 1) helps in updating the
the hyenas is ensured using the random coefficients 𝐴 and 𝐵 where remaining solutions at the end of each iteration. The exploration of the exploration starts when −1 < 𝐵 < 1 and 𝐴 ranges between [0, 5]
and serves as a weight for the corresponding hyena. The optimization
hyena marks its territory and with each iteration, the coefficients ℎ are process begins with the initialization of a random population, each
decreased linearly. The best agents are then fetched after each iteration.

Chimp optimization algorithm
and prey when the value is between the range [−1,1]. The update
strategy follows the following set of equations.
𝑥𝑛 = 𝛼𝑎𝑡𝑡𝑎𝑐𝑘𝑒𝑟 − 𝑎𝑛.𝛿𝑎𝑡𝑡𝑎𝑐𝑘𝑒𝑟	(22)
𝑥2 = 𝛼𝑏𝑎𝑟𝑟𝑖𝑒𝑟 − 𝑎2.𝛿𝑏𝑎𝑟𝑟𝑖𝑒𝑟	(23)
𝑥3 = 𝛼𝑐ℎ𝑎𝑠𝑒𝑟 − 𝑎3.𝛿𝑐ℎ𝑎𝑠𝑒𝑟	(24)
𝑥4 = 𝛼𝑑𝑖𝑣𝑒𝑟 − 𝑎4.𝛿𝑑𝑖𝑣𝑒𝑟	(25)
𝑥1 + 𝑥2 + 𝑥3 + 𝑥4

The Chimp Optimizer algorithm is a metaheuristic optimization algorithm inspired by the behavior of chimpanzees in their natural
𝑥𝑡𝑖 +1 =
4	(26)

habitat. It mimics the social behavior of chimpanzees in a group, where each member of the group interacts with its peers to find the best solutions to a problem, as illustrated in Fig. 8. This technique was first developed by Khishe et al. in [58].
The mathematical model of ChoA is defined as follows
the value 𝑚 is the chaotic value obtained randomly for each chimp and The following equation is applied to update each chimps position where the distribution of 𝑚 can be chosen based on the optimization problem.

{

𝛽𝑟
= |𝛾.𝑥
𝑝𝑟𝑒𝑦
(𝑖) − 𝑚.𝑥𝑐ℎ𝑖𝑚𝑝
(𝑖)|	(14)
𝛼𝑐ℎ𝑖𝑚𝑝(𝑛𝑖 + 1) =
𝛼𝑝𝑟𝑒𝑦(𝑛𝑖) − 𝑥, 𝛥, if 𝜙 < 0.5	(27)
𝑚, if 𝜙 > 0.5



Mathematical model of the SSC hybrid algorithm
of the 𝑗th neuron in the 𝑘th layer. Then, the equations for computing
the output of the three-layer perceptron are:

Due to the complex nature of the gesture detection optimization
𝑧(1) = ∑ 𝑤(1)𝑥 + 𝑏(1)
(34)

problem, the hybrid algorithm is selected for this study. The SSC algorithm combines the attacking strategy of SHO along with the
𝑗	𝑖𝑗  𝑖	𝑗
𝑖
𝑎(1) = 𝑓 (𝑧(1))	(35)

ChoA and optimizes the update rule with the SCA. This new strategy	𝑗	𝑗

allows the algorithm to cover more search space and the randomness,
𝑧(2) = ∑ 𝑤(2)𝑎(1) + 𝑏(2)
(36)

introduced by the SCA, tackles the local minima problem thus making the algorithm more efficient as compared to the individual algorithms.
The complete algorithm can be mathematically expressed as
𝑗	𝑖𝑗  𝑖	𝑗
𝑖
𝑎(2) = 𝑓 (𝑧(2))	(37)

𝑗	𝑗

𝑥1 = 𝑎𝑎𝑡𝑡𝑎𝑐𝑘𝑒𝑟 − 𝑐𝑜𝑠(𝑟2) ∗ 𝑎1.𝑑𝑎𝑡𝑡𝑎𝑐𝑘𝑒𝑟	(28)
𝑧(3) = ∑ 𝑤(3)𝑎(2) + 𝑏(3)
(38)

𝑥2 = 𝑎𝑏𝑎𝑟𝑟𝑖𝑒𝑟 − 𝑠𝑖𝑛(𝑟2) ∗ 𝑎2.𝑑𝑏𝑎𝑟𝑟𝑖𝑒𝑟	(29)
𝑗
(3)
𝑖𝑗  𝑖	𝑗
𝑖
(3)

𝑥3 = 𝑎𝑐ℎ𝑎𝑠𝑒𝑟 − 𝑐𝑜𝑠(𝑟2) ∗ 𝑎3.𝑑𝑐ℎ𝑎𝑠𝑒𝑟	(30)
𝑥4 = 𝑎𝑑𝑖𝑣𝑒𝑟 − 𝑠𝑖𝑛(𝑟2) ∗ 𝑎4.𝑑𝑑𝑖𝑣𝑒𝑟	(31)
Here 𝑟2 = (2𝜋) ∗ 𝑟𝑎𝑛𝑑 and lies in the range [0, 2𝜋]. The following
equation is used to update the location of chimps during searching.
𝑥1 + 𝑥2 + 𝑥3 + 𝑥4
𝑎𝑗  = 𝑓 (𝑧𝑗 )	(39)
𝑦 = 𝑓 (𝑧(4))	(40)
where 𝑓 is the activation function, and 𝑦 is the output of the network. In the above equations, 𝑧(1) represents the weighted sum of the inputs in the first hidden layer, 𝑎(1) represents the output of the first
hidden layer, 𝑧(2) represents the weighted sum of the inputs in the

𝑥𝑖 =
4	(32)
𝑗
(2)

The variable 𝑥𝑖(𝑖 = 1, 2, 3...𝑛) shows the chimp population.

SSC for feature selection

The Feature Selection using the SSC algorithm operates as follows.
Initialize population of 𝑥𝑖 for (𝑖 = 1, 2..., 𝑁 )
Evaluate each individual using the fitness function.
Update the feature subsets of the individuals based on the Eqs. (28)–(31)
Repeat steps 2 and 3 until a stopping criterion is met.
Select the feature subset with the best fitness value as the final result.

fitness function given by Eq. (33). The fitness function 𝐽 is defined as: A set of random features is initially selected and evaluated using a
𝐽 (𝑆) =  1 ∗ 𝛴𝑚 [𝑦(𝑖) ≠ 𝑔(𝑥(𝑖), 𝑆)]	(33)
𝑚
where S is the feature subset, 𝑔(𝑥𝑖, 𝑆) is the prediction of the machine learning model for instances 𝑥(𝑖) using the feature subset S, 𝑦(𝑖) is the total number of classes, and 𝑦𝑖 ≠ 𝑔(𝑥𝑖, 𝑆) is an indicator function
that is equal to 1 if the prediction is incorrect and 0 otherwise. The overall flow of the procedure for feature selection is illustrated in Fig. 9. Multiple population sizes were tested and it was found that a
population size of 𝑁 = 20 gives the best results in terms of efficiency
and time. The experiment was run for 60 iterations for each 20∕80 train-
test split. Overall, 30 iterations were run for each algorithm i.e. SSC,
GWO, PSO, and SCA, to compare the results.

Proposed technique for classification

Deep learning model (DNN)

A three-layer DNN model is employed in this study which consists of an input layer, three hidden layers, and an output layer. The entire DNN is densely connected and the output of each neuron in the hidden layers is calculated using the weighted sum of the inputs from the previous layer, followed by the application of a non-linear activation function. The output of the final layer is the predicted output of the model.
Let 𝑥 be the input to the network, 𝑤(𝑘) be the weight between the
𝑖th neuron in the (𝑘 − 1)th layer and the 𝑗th neuron in the 𝑘th layer,
𝑏(𝑘) be the bias of the 𝑗th neuron in the 𝑘th layer, 𝑧(𝑘) be the weighted
second hidden layer, 𝑎𝑗  represents the output of the second hidden
layer, 𝑧(3) represents the weighted sum of the inputs in the third hidden layer, 𝑎(3) represents the output of the third hidden layer, and 𝑧(4)
represents the weighted sum of the inputs in the output layer.
The input data is forward propagated through the DNN network to generate error which is used to optimize the weights and biases of the network using the SSC algorithm. As shown in Fig. 10, the back- propagation algorithm is replaced with the proposed SSC technique.

Hyper-parameters of DNN

Hyper-parameters are parameters in a NN that are set prior to train- ing and remain fixed during training. In a DNN, the hyper-parameters include the number of neurons in each hidden layer, the learning rate, the activation function, and the regularization strength. Tuning these hyper-parameters is crucial for achieving optimal performance of the neural network. For example, increasing the number of neurons in a layer may improve the network’s ability to model the complex combinations in the data, but may also increase the risk of over-fitting. Similarly, choosing an appropriate activation function is crucial as it can impact the performance of the network. Therefore, careful tuning of hyper-parameters is necessary to optimize the performance of a DNN. In a DNN with three hidden layers, the weights and biases are important parameters that are learned during training to optimize the network’s performance. The weights represent the strength of the con- nections between neurons in adjacent layers, while the biases represent
the threshold at which a neuron is activated.
Effective training of the weights and biases is essential for achieving optimal performance of the neural network. If the weights and biases are not properly trained, the network may suffer from over-fitting or under-fitting, which can lead to poor performance on unseen data. Overfitting happens when a neural network is overly complex and perfectly fits the training data, resulting in poor performance on new data. Under-fitting, on the other hand, occurs when the network is too simple and fails to capture the underlying patterns in the data.
Proper regularization techniques such as L1/L2 regularization, dropout, and early stopping are essential to combat over-fitting and under-fitting. They add penalties, promote model simplicity, prevent over-reliance, and halt training when necessary, ensuring optimal performance and generalization. Dropout randomly drops out some neurons during training, which helps to prevent over-fitting by forcing the network to learn more robust representations. Early stopping halts the training process before the NN overfits the data by tracking the
outcome of the network on validation data and when there is no further

𝑗	𝑗

sum of inputs to the 𝑗th neuron in the 𝑘th layer, and 𝑎(𝑘) be the output
improvement in the results.




/ig. 9. Flow diagram of SSC Hybrid Meta-heuristic Algorithm.


/ig. 10. SSC based Three Layer DNN structure for Classification.


SSC-based DNN model

Metaheuristic algorithms have been used in recent years for the training of weights and biases in neural networks. Compared to tra- ditional optimization algorithms such as stochastic gradient descent, metaheuristic algorithms offer several advantages. Firstly, they are less sensitive to initialization and are able to escape local optima more easily, allowing them to explore a larger search space. Secondly, they can handle non-convex and non-smooth optimization problems, which
are common in deep learning. Moreover, they can be used in parallel and distributed computing environments, enabling the optimization of large-scale NNs. Fig. 11 represents the flowchart for the program used to determine the trainable parameters of the DNN.
Presently, there are no specific research papers that have utilized the SSC for the training of weights and biases in NNs. However, given the promising performance of SSC and its variants in optimization problems, it is possible that the SSC could be used for optimizing the weights and biases of neural networks. The proposed algorithm offers






/ig. 11. Flow chart of SSC-based Tuning of Weights and Biases of DNN.



improved performance compared to traditional optimization algorithms for neural network training. Therefore in this work, SSC is used for effective tuning of weights and biases of the DNN.

Results

Results for this paper are recorded for both feature selection and classification algorithms. The feature selection method is compared with conventional metaheuristic algorithms over multiple iterations and different metrics are recorded for each algorithm. Section 6.1 dis- cusses the results of feature selection. In addition, The selected features are then passed through a DNN trained with different metaheuristic algorithms, and the results of the DNN classification are discussed in 6.2.

Evaluation of feature selection

During the experimentation, 30 iterations were performed. The train-test split ratio was set at 0.2 for test set. In each iteration, different train-test data was used. Accuracy, Precision, F1-score, execution time, and total reduced features were recorded for each iteration. Final data was tabulated and average values were tabulated to check the final results. Each algorithm is trained using Random Forest (RF) and SVM optimizer and all metrics are compared for PSO, GWO, SCA, and SSC algorithms. Fig. 12 shows a comparison of average scores for accuracy, precision, F1-score, and no. of features extracted using the feature selection algorithm. Fig. 13 shows the average train time for each tech- nique over 30 different iterations. It is evident that the proposed SSC algorithm has the highest scores among the metaheuristic algorithms whilst recording the lowest average among the features selected. Fig. 14 shows the best results achieved during the 30 iterations, showing a similar pattern, with SSC achieving the highest accuracy, precision,
Table 2
Classification results evaluation with full features.




Table 3
Classification results evaluation with selected features.




and F1-score and lowest no. of features among the selected algorithms. These bar charts show a comparison of the selected techniques with the proposed algorithm for RF and SVM optimizers.
Fig. 15 shows the correlation among the selected features extracted using the SSC algorithm. Here we can see that some features possess strong correlations with each other however, the majority of the fea- tures do not have strong co-linearity. This shows that each feature is independent and does not cause a drift in the subsequent feature to drift. This weak correlation is often helpful in avoiding over-fitting when training DNN as the features remain distinct and introduce strong generalization.

Evaluation of SSC-DNN for classification

The features selected by the SSC algorithm in Section 4.3 are passed through a DNN trained with the SSC algorithm. The results from the reduced dataset are compared with DNN trained with full features. Figs. 16 and 17 show the confusion matrix for selected and full features. It is evident from the recorded data that the efficiency of DNN trained with selected features is comparable with the results from full features. Table 2 shows different metrics recorded during the experiment with the DNN trained using PSO, GWO, and SSC for full features and Table 3 shows the recorded data for selected features. It is evident from the data that the SSC outperforms other techniques for the purpose of feature selection and classification from the data collected from the LMC.

Comparative study

Table 4 shows a comprehensive comparative analysis of different techniques for gesture detection using feature selection and metaheuris- tic algorithms highlighting their respective strengths and weaknesses. The discussed techniques include traditional feature selection methods such as wrapper, filter, PCA and embedded approaches, as well as metaheuristic algorithms such as GA, PSO, and the SSC algorithm proposed in this study. The comparative analysis provides valuable insights into the performance and applicability of these techniques for accurate and efficient gesture detection.
Notably, our proposed model, combining Meta-heuristic SSC-based feature selection with DNN training, achieves exceptional accuracy of
0.98. This outcome highlights the model’s efficacy in optimizing feature selection to enhance gesture detection accuracy, particularly valuable in resource-constrained scenarios. The integration of SSC across both feature selection and DNN training showcases the model’s synergistic approach, ultimately outperforming other techniques and demonstrat- ing its potential as a superior solution in this domain.




/ig. 12. Feature Selection Results: Average Accuracy, Precision, F1-Score, No. of Features.


Table 4
Comparative analysis of feature selection and meta-heuristic algorithms for gesture detection.

Conclusion






















/ig. 13. Feature Selection Results: Average Train times over 20 iterations.
In this research paper, we presented the development and evalu- ation of a novel technique for feature selection using a hybrid meta- heuristic algorithm called SSC (Spotted hyena-based Chimp optimiza- tion algorithm). Our algorithm aimed to address the challenges of dimensional reduction in gesture recognition using the Leap Motion Controller (LMC) device. Through extensive experimentation and com- parison with existing algorithms, we have demonstrated the superior performance of SSC across multiple metrics.
The results obtained from our experiments clearly indicate that SSC outperforms other algorithms, namely GWO, PSO, and SCA in terms of accuracy, precision, F1-score, time to select features, and the number of features. This significant improvement in performance showcases the effectiveness of SSC as a robust solution for dimensional reduction in gesture recognition tasks. The proposed algorithm not only achieved superior results but also exhibited consistency and stability across various datasets.




/ig. 14. Feature Selection Results: Best Accuracy, Precision, F1-Score, No. of Features.


/ig. 15. Correlation of Input features and Target variable of the selected data-set.


Furthermore, we extended our research by applying the SSC al- gorithm to train a DNN for gesture classification. The results of our experiments with the DNN trained using SSC surpassed those obtained with other algorithms, achieving an impressive 98.7% accuracy rate. This outstanding performance further reinforces the effectiveness of the SSC algorithm for optimizing the training process of complex machine-learning models.
The findings of this research have important implications for the field of gesture recognition and related applications, such as virtual
reality, augmented reality, gaming, and computer-assisted interac- tions. By leveraging the SSC algorithm, developers and researchers can achieve improved accuracy and efficiency in gesture recogni- tion systems, leading to enhanced user experiences and more reliable human–computer interactions.
Exploring the adaptability of the SSC algorithm across various datasets and domains, as well as its integration with advanced machine learning architectures, could yield further insights and refinements. Scaling up the algorithm for real-time implementation and testing in






/ig. 16. Confusion Matrix of Classification Results with Selected Features.



/ig. 17. Confusion Matrix of Classification Results with Full Features.



dynamic environments could bridge the gap between research and practical application. These directions hold the potential to elevate gesture recognition technology’s accuracy and usability

CRediT authorship contribution statement

Hassan Mohyuddin: Conceptualization, Methodology, Resources, Project administration, Validation, Data curation, Software, Prepa- ration and review of the original manuscript. Syed Kumayl Raza Moosavi: Conceptualization, Formal analysis, Investigation, Prepara- tion and review of the original manuscript. Muhammad Hamza Zafar: Visualization, Data curation, Validation, Formal analysis, Preparation and review of the original manuscript. /ilippo Sanfilippo: Supervision, Funding, acquisition, Investigation, Preparation and review of the original manuscript.

Declaration of competing interest

NONE.
All authors claim that there is not any conflict of interest regard- ing the above submission. The work of this submission has not been published previously. It is not under consideration for publication else- where. Its publication is approved by all authors and that, if accepted, it will not be published elsewhere in the same form, in English or in any other language, including electronically without the written consent of the copyright-holder.

Data availability

Data will be made available on request.

References

Kambatla K, Kollias G, Kumar V, Grama A. Trends in big data ana- lytics. J Parallel Distrib Comput 2014;74(7):2561–73. http://dx.doi.org/10. 1016/j.jpdc.2014.01.003, URL https://www.sciencedirect.com/science/article/ pii/S0743731514000057. Special Issue on Perspectives on Parallel and Distributed Processing.
Russom P, et al. Big data analytics. TDWI Best Pract Rep 2011;19(4):1–34.
Madden S. From databases to big data. IEEE Internet Comput 2012;16(3):4–6. http://dx.doi.org/10.1109/MIC.2012.50.
Singh D, Reddy CK. A survey on platforms for big data analytics. J Big Data 2014;2(1):8. http://dx.doi.org/10.1186/s40537-014-0008-6.
Wang RY, Strong DM. Beyond accuracy: What data quality means to data consumers. J Manage Inf Syst 1996;12(4):5–33. http://dx.doi.org/10.1080/ 07421222.1996.11518099.
Samitsch C. Introduction. Wiesbaden: Springer Fachmedien Wiesbaden; 2015, p. 1–3.
Obermeyer Z, Emanuel EJ. Predicting the future-big data, machine learning, and clinical medicine. N Engl J Med 2016;375(13):1216–9.
Sun Y, Shi Y, Zhang Z. Finance big data: Management, analysis, and applications. Int J Electron Commer 2019;23(1):9–11. http://dx.doi.org/10.1080/10864415. 2018.1512270.
Hassanpour R, Wong S, Shahbahrami A. Visionbased hand gesture recognition for human computer interaction: A review. In: IADIS international conference interfaces and human computer interaction, Vol. 125. Citeseer; 2008.
Metcalf CD, Robinson R, Malpass AJ, Bogle TP, Dell TA, Harris C, Demain SH. Markerless motion capture and measurement of hand kinematics: validation and application to home-based upper limb rehabilitation. IEEE Trans Biomed Eng 2013;60(8):2184–92.
Wu C, Shahabi C. Vision-based hand gesture recognition for human-vehicle interaction: A review. IEEE Trans Intell Transp Syst 2018;20(4):1437–55.
Toalumbo B, Nogales R. Hand gesture recognition using leap motion controller, infrared information, and deep learning framework. 2022, p. 412–26.
Ke Q, Liu J, Bennamoun M, An S, Sohel F, Boussaid F. Chapter 5 - com- puter vision for human–machine interaction. In: Leo M, Farinella GM, editors. Computer vision for assistive healthcare. Computer vision and pattern recog- nition, Academic Press; 2018, p. 127–45. http://dx.doi.org/10.1016/B978-0-
12-813445-0.00005-8, URL https://www.sciencedirect.com/science/article/pii/ B9780128134450000058.
Mantecón T, del-Blanco CR, Jaureguizar F, García N. Hand gesture recognition using infrared imagery provided by leap motion controller. In: Blanc-Talon J, Distante C, Philips W, Popescu D, Scheunders P, editors. Advanced concepts for intelligent vision systems. Cham: Springer International Publishing; 2016, p. 47–57.
Yang Q, Ding W, Zhou X, Zhao D, Yan S. Leap motion hand gesture recognition based on deep neural network. In: 2020 chinese control and decision confer- ence (CCDC). 2020, p. 2089–93. http://dx.doi.org/10.1109/CCDC49329.2020.
9164723.
Nogales R, Benalcázar M. Real-time hand gesture recognition using the leap motion controller and machine learning. In: 2019 IEEE latin american conference on computational intelligence (la-CCI). 2019, p. 1–7. http://dx.doi.org/10.1109/ LA-CCI47412.2019.9037037.
Chandrashekar G, Sahin F. A survey on feature selection methods. Comput Electr Eng 2014;40(1):16–28.
Dash M, Liu H. Feature selection for classification. Intell Data Anal 1997;1(3):131–56.
Brownlee J. Feature selection with the caret r package. 2016.
Jolliffe IT. Principal component analysis. John Wiley & Sons; 2002.
Belhumeur PN, Hespanha JP, Kriegman DJ. Eigenfaces vs. fisherfaces: Recogni- tion using class specific linear projection. IEEE Trans Pattern Anal Mach Intell 1997;19(7):711–20.
Guzsvinecz T, Szucs V, Sik-Lanyi C. Suitability of the kinect sensor and leap motion controller—A literature review. Sensors 2019;19(5):1072.
Sanfilippo F, Pacchierotti C. A low-cost multi-modal auditory-visual-tactile frame- work for remote touch. In: Proc. of the IEEE 3rd international conference on information and computer technologies (ICICT). 2020, p. 213–8.
Sanfilippo F, Hatledal LI, Pettersen K. A fully–immersive hapto–audio–visual framework for remote touch. In: Proc. of the 11th IEEE international conference on innovations in information technology (IIT’15), Dubai, United Arab Emirates. 2015.
Sanfilippo F, Blazauskas T, Salvietti G, Ramos I, Vert S, Radianti J, Majchrzak TA, Oliveira D. A perspective review on integrating VR/AR with haptics into stem education for multi-sensory learning. Robotics 2022;11(2):41.
Sanfilippo F, Blažauskas T, Girdžiu¯ na M, Janonis A, Kiudys E, Salvietti G. A multi-modal auditory-visual-tactile e-learning framework. In: Proc. of the 4th in- ternational conference on intelligent technologies and applications, INTAP 2021, Grimstad, Norway, October 11–13, 2021, Revised Selected Papers. Springer; 2022, p. 119–31.
Weichert F, Bachmann D, Rudak B, Fisseler D. Analysis of the accuracy and robustness of the leap motion controller. Sensors 2013;13(5):6380–93. http:
//dx.doi.org/10.3390/s130506380, URL https://www.mdpi.com/1424-8220/13/ 5/6380.
Rangarajan L, et al. Bi-level dimensionality reduction methods using feature selection and feature extraction. Int J Comput Appl 2010;4(2):33–8.
Motoda H, Liu H. Feature selection, extraction and construction. Commun IICM (Inst Inf Comput Mach Taiwan) 2002;5(67–72):2.
Agrawal P, Abutarboush HF, Ganesh T, Mohamed AW. Metaheuristic algorithms on feature selection: A survey of one decade of research (2009–2019). IEEE Access 2021;9:26766–91. http://dx.doi.org/10.1109/ACCESS.2021.3056407.
Gendreau M, Potvin J-Y. Metaheuristics in combinatorial optimization. Ann Oper Res 2005;140(1):189–213. http://dx.doi.org/10.1007/s10479-005-3971-7.
Dokeroglu T, Sevinc E, Kucukyilmaz T, Cosar A. A survey on new generation metaheuristic algorithms. Comput Ind Eng 2019;137:106040.
Alba E, Dorronsoro B. The exploration/exploitation tradeoff in dynamic cellular genetic algorithms. IEEE Trans Evol Comput 2005;9(2):126–42.
Olorunda O, Engelbrecht AP. Measuring exploration/exploitation in particle swarms using swarm diversity. In: 2008 IEEE congress on evolutionary com- putation (IEEE world congress on computational intelligence). IEEE; 2008, p. 1128–34.
Kennedy J, Eberhart R. Particle swarm optimization. In: Proceedings of ICNN’95-international conference on neural networks, Vol. 4. IEEE; 1995, p. 1942–8.
Mirjalili S, Mirjalili SM, Lewis A. Grey wolf optimizer. Adv Eng Softw 2014;69:46–61.
Karaboga D. Artificial bee colony algorithm. Scholarpedia 2010;5(3):6915.
Mirjalili S, Lewis A. The whale optimization algorithm. Adv Eng Softw 2016;95:51–67.
Blum C, Puchinger J, Raidl GR, Roli A. Hybrid metaheuristics in combinatorial optimization: A survey. Appl Soft Comput 2011;11(6):4135–51. http://dx.doi. org/10.1016/j.asoc.2011.02.032.
Azzougui Y, Recioui A, Mansouri A. PMU optimal placement in wide area moni- toring systems using grey wolf optimization technique. 2019;4:1–7 http://dx.doi. org/10.51485/ajss.v4i1.76 URL https://ajss.dz/index.php/ajss/article/view/76.
Zhang X, Chen X, Li Y, Lantz V, Wang K, Yang J. A framework for hand gesture recognition based on accelerometer and EMG sensors. IEEE Trans Syst Man Cybern A 2011;41(6):1064–76.
Hoggan E, Williamson J, Oulasvirta A, Nacenta M, Kristensson PO, Lehtiö A. Multi-touch rotation gestures: Performance and ergonomics. In: Proceedings of the sigchi conference on human factors in computing systems. 2013, p. 3047–50.



Kammer D, Wojdziak J, Keck M, Groh R, Taranko S. Towards a formalization of multi-touch gestures. In: ACM international conference on interactive tabletops and surfaces. 2010, p. 49–58.
Sharma JK, Gupta R, Pathak VK. Numeral gesture recognition using leap motion sensor. In: 2015 international conference on computational intelligence and communication networks (CICN). 2015, p. 411–4. http://dx.doi.org/10.1109/ CICN.2015.86.
Vaitkevičius A, Taroza M, Blažauskas T, Damaševičius R, Maskeliu¯ nas R, Woź- niak M. Recognition of American sign language gestures in a virtual reality using leap motion. Appl Sci 2019;9(3). http://dx.doi.org/10.3390/app9030445, URL https://www.mdpi.com/2076-3417/9/3/445.
Yao Y, Fu Y. Contour model-based hand-gesture recognition using the kinect sensor. IEEE Trans Circuits Syst Video Technol 2014;24(11):1935–44. http://dx. doi.org/10.1109/TCSVT.2014.2302538.
Zeng W, Wang C, Wang Q. Hand gesture recognition using leap motion via deterministic learning. Multimed Tools Appl 2018;77:28185–206.
Lu W, Tong Z, Chu J. Dynamic hand gesture recognition with leap motion controller. IEEE Signal Process Lett 2016;23(9):1188–92. http://dx.doi.org/10. 1109/LSP.2016.2590470.
Xu Y, Wang Q, Bai X, Chen Y-L, Wu X. A novel feature extracting method for dynamic gesture recognition based on support vector machine. In: 2014 IEEE international conference on information and automation (ICIA). 2014, p. 437–41. http://dx.doi.org/10.1109/ICInfA.2014.6932695.
Xue B, Zhang M, Browne WN, Yao X. A survey on evolutionary computation approaches to feature selection. IEEE Trans Evol Comput 2015;20(4):606–26.
Akinola OO, Ezugwu AE, Agushaka JO, Zitar RA, Abualigah L. Multiclass feature selection with metaheuristic optimization algorithms: a review. Neural Comput Appl 2022;34(22):19751–90.
Chen L, Liu Y, Liu X. Gesture recognition based on improved particle swarm optimization feature selection and improved support vector machine. In: Pro- ceedings of the 2013 IEEE international conference on robotics and automation (ICRA). 2013, p. 2201–6.
Wang J, Khishe M, Kaveh M, Mohammadi H. Binary chimp optimization algo- rithm (BChOA): a new binary meta-heuristic for solving optimization problems. Cogn Comput 2021;13:1297–316.
Sayed GI, Tharwat A, Hassanien AE. Chaotic dragonfly algorithm: an improved metaheuristic algorithm for feature selection. Appl Intell 2019;49:188–205.
SSC: A hybrid nature-inspired meta-heuristic optimization algorithm for engi- neering applications. Knowl Based Syst 2021;222:106926. http://dx.doi.org/10. 1016/J.KNOSYS.2021.106926.
Mirjalili S. SCA: A Sine cosine algorithm for solving optimization problems. Knowl-Based Syst 2016;96:120–33. http://dx.doi.org/10.1016/j. knosys.2015.12.022, URL https://www.sciencedirect.com/science/article/pii/ S0950705115005043.
Dhiman G, Kumar V. Spotted hyena optimizer: A novel bio-inspired based metaheuristic technique for engineering applications. Adv Eng Softw 2017;114:48–70. http://dx.doi.org/10.1016/j.advengsoft.2017.05.014, URL https://www.sciencedirect.com/science/article/pii/S0965997816305567.
Khishe M, Mosavi M. Chimp optimization algorithm. Expert Syst Appl 2020;149:113338. http://dx.doi.org/10.1016/j.eswa.2020.113338, URL https:// www.sciencedirect.com/science/article/pii/S0957417420301639.
Mirjalili S. SCA: a sine cosine algorithm for solving optimization problems. Knowl-Based Syst 2016;96:120–33.
Kowdiki M, Khaparde A. Automatic hand gesture recognition using hybrid meta- heuristic-based feature selection and classification with dynamic time warping. Comp Sci Rev 2021;39:100320. http://dx.doi.org/10.1016/j.cosrev.2020.100320, URL https://www.sciencedirect.com/science/article/pii/S1574013720304202.
Dubey AK. Enhanced hand-gesture recognition by improved beetle swarm opti- mized probabilistic neural network for human–computer interaction. J Ambient Intell Humaniz Comput 2022.
Zeng W, Wang C, Wang Q. Hand gesture recognition using leap motion via deterministic learning. Multimed Tools Appl 2018;77:28185–206.
Hisham B, Hamouda A. Arabic sign language recognition using ada-boosting based on a leap motion controller. Int J Inf Technol 2021;13:1221–34.
Rakesh S, Kovács G, Mokayed H, Saini R, Pal U. Static palm sign gesture recognition with leap motion and genetic algorithm. In: 2021 swedish artificial intelligence society workshop (SAIS). 2021, p. 1–5. http://dx.doi.org/10.1109/ SAIS53221.2021.9508468.
Chong T-W, Lee B-G. American sign language recognition using leap motion controller with machine learning approach. Sensors 2018;18(10):3554.
Feng K-p, Yuan F. Static hand gesture recognition based on HOG characters and support vector machines. In: 2013 2nd international symposium on instrumenta- tion and measurement, sensor network and automation (IMSNA). 2013, p. 936–8. http://dx.doi.org/10.1109/IMSNA.2013.6743432.
