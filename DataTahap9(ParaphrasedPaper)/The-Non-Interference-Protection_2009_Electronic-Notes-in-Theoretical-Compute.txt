Numerous information-flow type systems have been developed to control the non-interference of information between different security levels in the Bell-Lapadula model. This paper presents a method for translating type-based information collected for bytecode programs into a bytecode program logic using the syntax of the bytecode specification language BML. This translation enables the verification of non-interference property within a unified verification framework based on a program logic, and it can be utilized as part of a foundational proof-carrying code infrastructure. Additionally, it provides flexibility for implementing various declassification strategies within a code body.

The paper is organized as follows. In Section 2, we introduce the notation and basic concepts used throughout the paper. Section 3 explains the translation of the type-based system into a logic-based system, along with a theorem guaranteeing that the resulting specifications ensure non-interference. Section 4 further discusses the interference property, and a proof is presented in Section 4.1 showing that the non-interference property holds even when the bytecode program is extended with additional specifications. The paper concludes with final remarks in Section 5, outlining how declassification can be introduced.

In this paper, we adopt the security policy framework from a specific source, which assumes that the attacker can observe the input/output of methods and values of fields and heaps. Additionally, it is assumed that the attacker cannot observe program termination. The security levels for method results are represented by a vector, and we use a specific notation to denote these security levels and exceptions.

The translation of the information flow system into the bytecode program logic is achieved using the syntax of BML. We employ the BML syntax to denote logical connectives, access and initialize elements of arrays, and describe variable types. Furthermore, a theorem presented in the paper establishes a relationship between typability and successful program verification in the bytecode logic, which, along with the main theorem, implies non-interference.

Regarding design choices, the objective was to express a system that ensures the non-interference property using BML formulae. The challenge was in connecting data flow with first-order formulae within the language. To address this, ghost variables were used to simulate the operation of type checking, and the formulae were stored in the method precondition, allowing the implementation of declassification without modifying the data they operate on. The paper also discusses extending the specifications to preserve the non-interference property, allowing for the mixing of specifications resulting from the translation with those from other sources.