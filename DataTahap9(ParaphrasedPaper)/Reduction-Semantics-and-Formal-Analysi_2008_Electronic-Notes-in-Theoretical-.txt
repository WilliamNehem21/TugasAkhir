The paper is structured as follows. Section 2 provides an overview of relevant literature and introduces fundamental concepts related to Orc, rewriting logic, and Maude. Section 3 then presents the reduction semantics, followed by its refinement into a distributed object-based semantics and the verification of an online auction case study in subsequent sections.

Several Orc semantics have been previously proposed. A precise yet informal operational semantics for Orc was introduced by Misra, which serves as the benchmark for evaluating the success of any formal operational semantics. Additionally, Misra and Cook presented a formal structured operational semantics (SOS) for asynchronous Orc, though this version exhibited some undesired behaviors. Consequently, a refinement of the asynchronous semantics into a synchronous one, which distinguishes between internal and external actions, was also developed. Various denotational semantics for Orc to reason about identities and algebraic laws, as well as for formally analyzing dependencies in program execution, have been proposed. Furthermore, encodings of Orc in Petri nets and the join calculus have revealed nuanced aspects of the language's semantics. Most recently, Wehrman et al. extended the asynchronous SOS relation to timed events and time-shifted expressions, proposing a relative-time operational semantics of Orc.

Orc, proposed by J. Misra, is a theory of orchestration designed to facilitate the seamless integration of web services. The Orc model, while minimal, is sufficiently robust to express a wide range of computations. Orc is centered around the abstract concept of sites and the composition of the services they offer. A site represents a basic service that provides a particular computation. For example, "cnn(d)" and "bbc(d)" are sites that return news for a given date "d", while "add(x, y)" returns the sum of its arguments. Sites are presumed to exist, and the computations they provide form the data processed by Orc expressions. When a site is called, it produces at most one value, and once it responds to a call with a value "v", it is said to publish that value. Site calls are strict in the sense that a site call cannot be initiated unless its parameters are bound to concrete values.

The program implements a prioritized site call, where site "m" takes priority over site "n". If a response from "m" is received within one time unit, its value will be published by the expression; otherwise, the value published by either "m" or "n" is used.

Rewriting logic is a comprehensive semantic framework that effectively unifies various models of concurrency. It is well-suited for providing formal semantic definitions of programming languages, including concurrent ones, and for modeling real-time systems. With high-performance implementations of rewriting logic, such as Maude, language specifications can be executed and model checked.

The clock field "clk: cm" maintains a discrete time global clock using the domain of natural numbers (where "m" is a natural number). Later in Section 3.4, we will see how the clock field is utilized to provide the timed semantics of Orc.

When a message is added to the message pool due to a site call, it is transformed into the message "[self, app(m, c, rand), hn]", representing a potential response to the current expression. The "app(m, c, rand)" operator associates a pseudo-random delay to responses from remote sites, and once a response from "m" is returned, the site return rule may trigger.

The distributed Orc auction program presented here was inspired by an Orc auction example. The program includes several expression declarations and six site objects, such as a seller site, three bidder sites, an auction site, and a maxbid site. The program assumes that "seller 0" has two items for sale, "t1" and "t2", and that bidders follow different strategies. For simplicity, communication delays are not considered, and enough clock ticks are allowed for program completion.