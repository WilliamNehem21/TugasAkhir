In this academic paper, we make a contribution to QoS management by proposing an approach that utilizes a high level of abstraction and employs a formal-based tool to analyze QoS contracts. To present our contribution, we have structured this paper as follows. Section 2 provides an illustration of the QoS contract language using the example of a video on demand (VOD) application. Section 3 introduces the abstract operational semantics for the QoS contract language. Section 4 discusses the implementation of the semantics outlined in Section 3 using the Maude MSOS tool. Section 5 explains our analysis of the VOD example from Section 2 using real data. Finally, in Section 6, we conclude the paper with our overall remarks.

Originating as record types in a programming language, QoS contracts initially represented static information, with each record index denoting a QoS property that could be bound to a value from a collection manipulated by services. The authors [10,11] extended QoS contracts by introducing the concept of negotiation among services, and incorporated this extended notion of QoS contracts into their software architecture description language called Cbabel.

Normalization occurs as follows: when given two rules with the same service on the left-hand side, they should be merged. If the right-hand sides are disjoint, the two rules are replaced by a rule with the service 's' on the left-hand side, and the right-hand side is given by appending the second rule's right-hand side to the tail of the first rule's right-hand side. If the right-hand sides are not disjoint, the order of the first rule should take precedence. While our example does not necessitate normalization, it should be evident how this process is carried out in general.