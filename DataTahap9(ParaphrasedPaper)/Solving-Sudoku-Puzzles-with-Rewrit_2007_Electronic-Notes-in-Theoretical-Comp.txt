Rewriting logic is a logic that enables concurrent changes, making it well-suited for handling states and highly nondeterministic concurrent computations. It offers valuable properties as a flexible and general semantic framework for providing semantics to a broad range of languages and concurrency models. Furthermore, it permits users to define syntax with complete freedom to select the operators and structural properties suitable for each specific problem.

In the realm of solving Sudokus, the classical techniques of scanning, marking up, and analysis are employed. The application of these techniques is non-deterministic, and the effectiveness of a Sudoku solver hinges on the combination of these approaches. Blindly applying these techniques may lead to a combinatorial explosion, hence the need to identify an efficient combination of techniques.

The scanning process stops when no further numbers can be discovered, prompting the marking of candidate numbers in blank cells. Popular notations for this purpose include writing candidate numbers as subscripts in the cells, although this method is challenging to apply in newspapers due to limited cell space. An alternative notation utilizes dots, with a dot in the top left corner representing a '1'. Among the processes for solving Sudokus, the main strategy considered is analysis for elimination, encompassing rules for removing elements from the set of possible numbers in a cell. The correctness of each rule is clear from their definition, but their application does not yield a unique solution in cases with multiple solutions. Despite this, the system ultimately terminates, as each rule diminishes the set of possible numbers in a cell.

The specification of a Sudoku solving procedure in Maude is described, acknowledging that the straightforward application of the rewrite rules may lead to a combinatorial explosion. To prevent this, it is necessary to apply the rules according to a specific strategy.

Maude features a powerful strategy language that enables users to specify how the rewrite rules in a module will be applied. This language is built on top of another extension called full Maude, which offers additional primitives for working with parameterization and object-oriented modules. The module defines three strategies: "rules," "split," and "solve," each with their own approach for applying the rewrite rules. The "solve" strategy applies the first strategy, and if unsuccessful, tries to rewrite using splitting rules, continuing application of the strategy as long as possible.

For comprehensive details on the strategy language and advanced features of full Maude, readers are referred to [citation needed].