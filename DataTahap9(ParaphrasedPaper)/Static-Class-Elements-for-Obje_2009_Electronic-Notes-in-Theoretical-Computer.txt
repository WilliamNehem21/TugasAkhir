The majority of modern object-oriented programming languages include static variables and methods, which are essential for certain design patterns in programming. However, object-oriented specification formalisms lack these concepts, which can hinder the ability to write formal specifications closely aligned with the actual implementation, thus impeding refinement-based stepwise development.

In this paper, we propose an enhancement of a formal specification language to incorporate static class elements. We utilize the object-oriented state-based method object-z, which already encompasses key object-oriented features such as object creation, inheritance, and polymorphism. By a minor extension of the language and its semantics, we incorporate static variables and methods into object-z. This extension primarily involves adding information about the class an object belongs to, akin to the self-reference for object identity, and introducing a property classname for reference to the class of an object. With this new concept, we can model static class elements in object-z specifications. Additionally, to simplify the inclusion of static variables and methods within normal object-z classes, we define a shorthand notation. We demonstrate the modeling of creation patterns, specifically the singleton pattern, using this extension of object-z.

Static variables and methods are typically employed in the final stages of developing a model akin to an object-oriented implementation. Thus, during development, there is a transition from a specification without static elements to one including them, which must constitute a valid refinement step. Consequently, we conduct a study on refinement in the context of object-z with static elements, and find that refinement between classes with static elements can be represented by patterns, particularly the singleton pattern. We also provide a Java code fragment to illustrate how the pattern can be modeled using static variables. We proceed to present our extension of object-z in the subsequent section, followed by a discussion on the issue of refinement and compositionality in section 4, and conclude in the last section.

The specific problem of single object instantiation is well-recognized in object-oriented programming languages and can be resolved with static variables, which are created only once per class, contrasting with normal object variables of classes that are created once per instance. The concept of static variables and operations in object-oriented programming languages facilitates the formulation of creation patterns, including the singleton pattern. In object-z, achieving a similar effect would necessitate the use of global variables and/or functions, which would compromise the object-oriented structuring and increase inappropriateness with the inclusion of multiple such variables or methods. Furthermore, as object-oriented programming languages either lack global variables or discourage their use, a specification in close alignment with implementation should eschew global variables.

The framework we propose introduces the variable classname, which assumes values from the universe of possible class names (cnames). The function classref, the classname construct, and the constraint over the variable class are integral to our framework and ensure that only one (and always the same)...

The description and usage of the framework are now complete, enabling the utilization of the singleton pattern. We revise the class c from the previous section, which held a variable of type log, and alter the initialization of this variable to be performed using an operation of class logclass, without requiring class c to possess knowledge of the class-side of log2, which can be computed using function classref.

Our primary focus is on employing the concept of static elements in a refinement-based design, wherein we commence with an abstract model and progressively refine it into a specification closely resembling an actual implementation. Static elements are likely to emerge in later stages when object-oriented programming structures are introduced into the design. Therefore, we examine the meaning of refinement in this context and assess whether the introduction of static elements constitutes a valid refinement step.

In our framework, each (object-side) class could have references to objects of other classes, and vice versa. Refinement, particularly conditions of downward simulation, heavily relies on this argument. This result can be extended to non-empty class-sides with a small additional side-condition related to ensuring valid bindings for the class-side.

Finally, achieving proper utilization of these elements entails modifying the classes that hold references to classes with static elements, such as in the case of class c in our log example. However, since this modification depends on the specific application, no general result can be established, and individual proof of refinement is always necessary.

Overall, our paper presents a framework for incorporating static class elements into a formal specification language, enabling the modeling of creation patterns and addressing the crucial issue of refinement in the context of object-oriented programming.