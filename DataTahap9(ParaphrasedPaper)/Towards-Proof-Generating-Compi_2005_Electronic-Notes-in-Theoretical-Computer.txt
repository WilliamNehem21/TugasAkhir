Ensuring the accuracy of compilation is crucial for the dependability of software. This paper introduces an approach to guarantee correctness by verifying each compiled program for accurate translation, as opposed to verifying the compiler itself. The approach involves using proof checking within a formal specification and verification framework, based on formal specifications of the source and target languages and a translation predicate. This method produces a proof alongside the target program, demonstrating its correctness in relation to the source program. The proof can be independently checked by the framework, serving as a translation certificate.

The paper also demonstrates the application of this approach to a simple translation scenario, utilizing the theorem prover Isabelle/HOL. Additionally, the paper discusses the distinction between compiler correctness and translation correctness, and highlights the characteristics of their approach which include a clear separation between language specifications, an explicit specification of translation correctness, flexibility in supporting various specifications, and the provision of a translation certificate in the form of a proof script.

The authors provide examples of related work, such as certifying compilers, and emphasize the need for a general tool, separate from the compiler developer, to specify and reason about programming languages. The paper also outlines future steps for applying the approach to more realistic programming languages and enhancing the support for proof checking.