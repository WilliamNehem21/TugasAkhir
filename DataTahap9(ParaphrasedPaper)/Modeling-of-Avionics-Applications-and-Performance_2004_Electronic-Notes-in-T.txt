Modeling is widely recognized as an essential aspect of the design process. Formal methods such as those used in polychrony provide benefits for analysis and predictability. In the context of polychrony, a component-based approach has been developed for modeling avionics applications using signal models based on the ARINC 653 standard. This approach leverages formal tools and techniques within polychrony to enable verification and analysis.

In this paper, we demonstrate this approach by presenting a small example of an avionics application. We illustrate how a signal model is created to facilitate temporal validation, highlighting the ability of signals to address critical issues in real-time system design.

The fundamental theory underlying the synchronous approach is based on discrete event systems and automata theory. Time is handled logically, using partial order and simultaneous events, with execution durations viewed as constraints to be verified at the implementation level. Synchronous languages such as Esterel, Lustre, and Signal are used to implement this approach.

To analyze a signal program, two types of properties are considered: invariant properties (e.g., ensuring consistency between signal clocks) and dynamical properties (e.g., reachability and liveness). The signal compiler focuses on addressing invariant properties, checking the consistency of signal clock constraints and statically proving properties. Dynamical properties are verified using connected tools such as the boolean model checker Sigali. Additionally, performance evaluation is a key feature of polychrony.

Furthermore, the paper describes mechanisms such as channels and signals used in the avionics application to manage message transmission and execution order. It also discusses the use of signals to initiate processes and handle time constraints within the system.

Overall, the paper demonstrates the feasibility of describing avionics applications using the synchronous language signal, emphasizing modularity and abstraction as key features. It also highlights the potential for scalability of this approach when describing large applications within a well-defined design methodology.

The temporal interpretation of a signal process provides a different perspective on its behavior by emphasizing the time aspect and showcasing how the implementation of a specified function behaves over time.

Additionally, the paper discusses the use of date signals to provide availability times for values in the functional specification, highlighting their relevance in measuring time within the implementation context.

Lastly, the paper explains the computational aspects of signal specifications, including the hierarchical conditional dependency graph and the representation of delays. It also discusses the interpretation of signal processes in relation to control and data computations, emphasizing the role of the data computations in extracting relevant information for specific interpretations.