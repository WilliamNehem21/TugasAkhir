We utilize Eli to produce semantic assistance for each of these projects, thereby eliminating the need to manually create document models and analyses, as is typical in many other Eclipse projects that offer advanced language support. Section 5 provides a brief discussion of this aspect of semantic assistance.

The PLD compiler accepts programs written in a Modula-like syntax called "Mystery," along with a specification of the intended semantics. It outputs a Java program that can be executed under the specified semantic conditions. It is important to note that due to the variability of semantics, many static conditions are actually verified during runtime. This implementation detail is concealed from the students.

In our previous work, we developed the Noosa tool for high-level monitoring of the execution of compilers produced by Eli. The concept behind Noosa is that the execution of a compiler can be visualized in terms of basic symbols, phrases, or syntax tree nodes, without requiring knowledge of the inner workings of the compiler. For instance, when a compiler writer is creating a lexical analysis specification, they deal with regular expressions. Noosa enables them to see which input text has matched which regular expressions. Similarly, they are required to define a context-free grammar to construct a parser. Rather than delving into the intricacies of how the parser operates, they are concerned with which grammar productions match which parts of the input text.

We have developed an Eclipse-based version of Noosa in the form of a plugin that supports a Noosa perspective and a set of associated views. These views offer access to high-level compiler runtime data, such as the token stream, phrase structure, or syntax tree. The plugin is initially targeted at compilers written by hand in Java, but we are also actively pursuing integration with Eli.