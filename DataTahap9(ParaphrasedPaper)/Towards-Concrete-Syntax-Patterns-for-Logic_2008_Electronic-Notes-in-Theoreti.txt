The process of transforming a program from one form to another is a fundamental aspect of software development, and automated program transformation is crucial for managing the complexity and evolution of modern software projects. Various tools and approaches, such as term rewriting, graph transformation, and logic meta-programming, have been developed to facilitate program transformation. Logic meta-programming utilizes logic programming languages, such as Prolog, to analyze and transform program representations, offering easy implementation of program analyses as predicates and queries.

While logic meta-programming offers integration of analysis and transformation at a high conceptual level and produces easily reusable implementations, it lacks a well-defined semantics and the ability to work with concrete syntax. To address these limitations, this paper incrementally introduces a logic-based program transformation approach that offers the advantages of logic meta-programming but avoids its problems. This new approach allows for reduced dependencies on transformed programs, increased reusability of transformation specifications, and the ability to define generic and reusable transformation specifications.

The proposed approach, known as Gentl, supports the definition of program analysis and transformation rules in a way that is easy and reusable. It combines concrete syntax patterns with predicates and allows for the definition of conditional transformations. Overall, Gentl provides a generic transformation language that offers a higher level of abstraction than traditional program transformation approaches, enabling more efficient and reliable development of software projects.