The concept of static program analysis is closely linked to program transformation, as initial program analysis is necessary to gather information about program runtime behaviors and determine which offline transformations are applicable [12,14]. Abstract interpretation has been employed as a formal foundation for static program analysis and can also be utilized to establish a semantics-based framework for program transformation, presenting a novel approach to the formal design of program transformations. This method involves formally designing syntactic program transformations by abstracting the transformations of program semantics using abstract interpretation, thus providing a formal basis for developing correct program transformation tools.

To illustrate the design of correct program transformations using abstract interpretation, we examine the elimination of blocking code, which entails removing blocking commands other than stop commands. While the final iterative algorithm for this case study is straightforward, it serves as a simple example to demonstrate the design of correct program transformations through abstract interpretation. Notably, the iterative nature of the blocking code elimination algorithm corresponds to the fixpoint definition of the trace semantics [10].

The presence of semantically blocking commands in a program may be deemed as poor program design, and a removal function or algorithm (referred to as tb[p]) could be valuable for eliminating such blocking commands or verifying that a program adheres to this criterion. However, it is important to ensure that non-terminating program behaviors remain unchanged.

It is worth noting that a preliminary static program analysis could also be used to identify a larger subset of semantically blocking actions by considering variable values, such as through the use of constant propagation static analysis. Although more refined offline transformations could be designed based on this information, we opt to present a simple variant to demonstrate our purpose, as infinitely many such variants could be developed.