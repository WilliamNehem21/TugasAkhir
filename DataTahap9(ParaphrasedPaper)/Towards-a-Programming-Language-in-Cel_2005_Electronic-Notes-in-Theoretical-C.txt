The paper introduced a new model of computation called membrane computing within the framework of natural computing. It posits that the processes occurring within the compartmental structure of a living cell can be considered as computations, and it introduces computational devices called p systems.

The paper presents a family of p systems designed to solve the numerical NP-complete partition problem. This solution is inspired by previous works on related problems such as subset sum, knapsack, validity, and SAT problems. It focuses on p systems with input and external output, using special objects "yes" and "no" to represent boolean answers.

The design aims to achieve a significant speed-up by employing a cellular model with active membranes and allowing membrane division to create an exponential workspace in polynomial time. The paper emphasizes the importance of ensuring confluence, finiteness of computations, and delivering the answer in the final step of the computation.

The paper also explores the use of p systems with input, allowing the same system to solve different instances of a problem by introducing corresponding input multisets. It discusses the representation of problem instances and the use of additive functions.

The paper highlights the similarities between the rules used in the presented p systems and those used for subset sum and knapsack problems. It notes some differences in the design related to the use of counters and the number of steps for checking, and it suggests that the design can be adapted for solving other numerical problems.

Furthermore, the paper explains the process of making sure all relevant membranes have finished their checking stages before delivering the output. It discusses the activation of the output process, including the condition for sending the affirmative answer "yes" and dealing with the priority of answers.

The paper also touches upon the use of programming language concepts in membrane computing and identifies similarities in design strategies for different problems, such as changes in polarization, working with indexed objects, renaming rules, and the use of counters. It mentions examples of applying these strategies to other numerical NP-complete problems.

In summary, the paper introduces a family of p systems designed to solve the partition problem and discusses their design, similarities to previous works, and potential applications to other numerical problems. It also identifies common design strategies used in membrane computing for various purposes.