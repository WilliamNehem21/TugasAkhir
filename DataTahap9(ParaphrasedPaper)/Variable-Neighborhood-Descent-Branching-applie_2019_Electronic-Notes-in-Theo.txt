The paper provides a mathematical model for the MWNPP and proposes a branching technique involving the insertion of local branching constraints. These constraints, derived from an initial solution xs, define the permissible proximity of feasible solutions to xs. This approach has led to the development of various exact and approximate methods for solving combinatorial optimization problems, including the Variable Neighborhood Descent Branching (VNDB) method. The VNDB method, discussed in the paper, utilizes local branching constraints to define its neighborhoods.

The study evaluates the computational time and upper bounds associated with the VNDB method, demonstrating that, with a reasonable number of neighborhoods, VNDB can produce results comparable to those of the standard CPLEX solver, but in a shorter amount of time. The paper is structured as follows: Section 2 presents the problem and establishes a mathematical model for MWNPP, while Section 3 discusses the analysis of local branching constraints. Section 4 introduces the VNDB method and evaluates the uniqueness of its neighborhood in rings. Section 5 outlines the computational tests conducted to compare the algorithms, and finally, Section 6 provides concluding remarks, including a critique of the findings and the proposed scope.

The paper includes Algorithm 1, which summarizes the key concepts. The stopping criterion for the algorithm is either the exhaustion of the n neighborhoods in a given solution or the maximum number of iterations (itermax) or time limit. The function solve() also has a time limit for resolving the VNDB subproblem, leading to conditional deviations for all possible solution statuses: {feasible, optimal, infeasible}.

Results from computational experiments indicate that VNDB never reaches the maximum available execution time due to neighborhood exhaustion and a high number of solved subproblems with non-optimal status. Despite this, VNDB achieves statistically comparable results to a standard MIP solver running for shorter time intervals, except in instances where k=3. One drawback identified in the experiments is that the CPLEX solver does not seem to set time deterministically on a multi-core processor, leading to longer execution times for certain problems.