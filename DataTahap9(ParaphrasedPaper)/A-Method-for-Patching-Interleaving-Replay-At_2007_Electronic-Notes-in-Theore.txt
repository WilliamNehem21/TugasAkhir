The concept of identity often leads to the possession of one or more secrets, and security protocols, despite consisting of only a few messages, are notoriously difficult to perfect. For instance, the discovery of a flaw in the 3-message Needham-Schroeder public key (NSPK) protocol took about 17 years to rectify.

Tools like FDR and OFMC, as well as theorem proving methods such as the Isabelle inductive method and Coral, are capable of determining the validity of (a finite abstraction of) a security protocol. Model checking tools can complete this verification process quickly and, in the case of unsatisfiability, output a counterexample (a protocol attack). The theorem proving approach, while slower, has a broader range of applications.

An underexplored issue in the realm of verification is the correction of faulty security protocols. A flawed protocol represents a mal-formulation, which is fundamental to theory refinement. These mal-formulations often become apparent when a proof attempt fails, potentially yielding a counterexample. Analyzing this evidence often provides insights for completing proofs and correcting flawed models.

Our approach involves identifying non-trivial message parts shared in protocol runs and using heuristics to diagnose possible faults and suggest potential fixes. We also detail the methodology used in devising our patching method and present the results of tests conducted on 21 faulty security protocols borrowed from the Clark-Jacob library, as well as a significant number of results to validate our approach using the Avispa tool.

In the worst case, a flawed protocol may need to be revisited to ensure it is no longer susceptible to the same counterexample. This may involve employing a model checker or a theorem prover, such as the Avispa tool used in this study, to address the first and third phases of the complete verification cycle. We further explain a method for patching interleaving-replay attacks in detail in the subsequent sections.

In an interleaving-replay attack, a spy monitors a (possibly partial) run of a protocol and then replays one or more messages in a different run, impersonating a friendly agent. Such runs of the protocol interleave during execution. If the corresponding agent lacks mechanisms to distinguish the origin or intended recipient of an inward message, or cannot associate a timeline with the message, they can be deceived. The messages selected for replay by the spy often contain one or more secret elements.