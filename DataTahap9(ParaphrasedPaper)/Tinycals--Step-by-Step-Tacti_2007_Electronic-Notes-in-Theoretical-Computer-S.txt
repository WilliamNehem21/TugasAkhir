Many cutting-edge interactive theorem provers use procedural proof languages, where users interact with the system primarily through a textual script that records the executed commands. These commands, which allow progress during a proof, are known as tactics and are executed atomically. Examples of such systems include Nuprl, Isabelle, Coq, and Matita 4, which is a proof assistant currently being developed by the University of Bologna.

The feedback on the proof status is provided to the user only between atomic steps (execution points). Hence, it is important to keep atomic steps as small as possible for the sake of understanding, debugging, and proof maintenance. This requirement contrasts with tacticals, which are higher-order constructs used to combine tactics together.

This paper proposes a replacement for tacticals to produce smaller atomic execution steps. While our work is not relevant in the context of declarative proof languages, it may already be applicable to systems where procedural scripts can be embedded inside declarative proof steps.

The paper is structured as follows: Section 2 describes the abstract syntax of the proposed replacement for tacticals, called tinycals, and their small-step operational semantics. It also discusses the advantages of tinycals over LCF tacticals. Section 3 presents the implementation of tinycals in Matita, while Section 4 deals with tacticals not covered by tinycals. Section 5 discusses related work, and Section 6 concludes the paper.

The proof status is the logical status of the current proof, and it can be seen as the current proof tree. However, it is not necessary for it to be an actual tree. For example, Matita stores the set of conjectures to prove with a proof term where meta-variables are used in place of missing components. From a semantic standpoint, the proof status is an abstract data type that must describe at least the set of conjectures yet to be proved. A goal is another abstract data type used to index conjectures.

The paper presents the replacement of tacticals with tinycals. Tacticals operate on proof status, while tinycals operate on evaluation status, which is advantageous when using tinycals in scripts because it provides rich intermediate state information to the user. This also enables the support of tactics with side effects. Despite this difference in datatype, the paper explores the possibility of expressing tacticals in terms of tinycals to avoid an independent re-implementation of related operations.

In summary, the paper provides the syntax and semantics of tinycals, a tactical language that mimics some of the LCF tacticals commonly used in state-of-the-art proof assistants. The advantages of tinycals over LCF tacticals include unstructured syntax, step-by-step evaluation, support for tactics with side effects, and better integration with user interfaces based on the CTCoq/Proof General paradigm. The paper also discusses some implementative issues and considers the extension of the approach to other tacticals, with negative results.