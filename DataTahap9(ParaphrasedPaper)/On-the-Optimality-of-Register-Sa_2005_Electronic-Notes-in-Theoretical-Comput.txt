The allocation techniques and ILP instruction scheduling are discussed in this research paper. The paper suggests that performing classical register allocation early can introduce false dependences that hinder further ILP extraction. However, this does not prohibit compilers from effectively performing early register allocation, provided that the allocator used is sensitive to the scheduler. In some cases, introducing spill code may change the problem, and a combined pass of scheduling with register allocation may encounter drawbacks when there are not enough available registers. This may necessitate the insertion of load-store operations during scheduling if there are insufficient free registers, and it may be challenging to find a valid issue time for these memory accesses in an already scheduled code due to resource or data dependence constraints.

The paper presents a large range of experiments to demonstrate that the initial heuristics are nearly optimal. It also discusses why the RS concept is a better way to handle register constraints prior to ILP scheduling. The authors prove that the reducers problem reduces from the problem of scheduling under register constraints. The paper goes on to discuss a reduction algorithm that is efficient in most cases, optimally reducing RS with minimal ILP loss. The research conducted experiments on scientific codes extracted from various benchmarks and used CPLEX to solve ILP programs. The paper also outlines a method that is more generic than existing techniques and can be applied for superscalar, VLIW, and EPIC codes.

The authors provide a formal mathematical modeling and theoretical study to enable the development of nearly optimal heuristics. They demonstrate that computing the register saturation of a directed acyclic graph (DAG) is NP-complete and present an ILP exact formulation. Additionally, they discuss how global register saturation of an acyclic control flow graph (CFG) can be brought back to RS in DAGs (basic blocks) in the presence of branches.