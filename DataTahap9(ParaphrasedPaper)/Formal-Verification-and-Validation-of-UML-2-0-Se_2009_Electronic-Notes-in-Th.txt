The rest of this paper is organized as follows: Section 2 outlines the process for generating Promela code based on the semantics of UML 2.0 interactions. Section 3 presents the V&V mechanism using source/destination and send/receive events. In Section 4, we demonstrate a scenario applying our approach and provide experimental results. Section 5 briefly describes the tool that implements the V&V mechanism. Section 6 discusses related work, and in Section 7, we offer concluding remarks and outline directions for future work.

Upon using Spin to verify the previously described properties, we found that only the first property is satisfied, while the model checker was able to provide a counterexample for each of the other properties. We present the failing trace related to the verification of each property.

As potential areas for future research, two main problems could be addressed. First, there exists a significant disparity between natural language and properties expressed in formal logics. The use of graphical notations, as proposed in macro language and patterns in property specification, should be considered as an important enhancement for model checker-based tools to bring them to an industrial standard. Second, many security aspects are typically not encapsulated in a single type of diagram, but are often dispersed across various diagrams of different types. An inter-diagram analysis may yield more consistent results in the assessment of UML models.