The de facto programming languages, including C, C++, and Fortran, along with parallel programming models such as MPI, OpenMP, pthread, Cilk, OpenCL, or CUDA, are widely used for developing applications on large-scale distributed memory HPC clusters, shared memory systems, and heterogeneous hardware. Julia, a high-level programming language designed for scientific and technical computing, is an intriguing addition to this landscape. With a focus on performance and productivity, Julia is well-suited for parallelism and scientific computing, making it a strong contender for HPC code development. Notably, Julia provides a lightweight API for calling C routines, resulting in minimal overhead and enabling efficient development in a high-level language with reduced code complexity compared to C. At all levels of parallelism, Julia offers built-in primitives for parallel computing, leveraging features such as dynamic types, meta-programming, multiple dispatch, lightweight user threads, support for native code invocation, and specialized packages for distributed and parallel computing.

Julia compiles to machine code, allowing it to execute native code and providing native support for calling C or Fortran shared libraries. Furthermore, Julia offers native GPU support and a range of libraries for utilizing GPUs at various levels of abstraction.

Graphics Processing Units (GPUs) consist of massively parallel processors and are organized into streaming multi-processors (SM) forming a grid of threads in blocks. To fully leverage the potential of these threads, multiple thread blocks must be used to execute CUDA program code under the Single Instruction Multiple Data (SIMD) paradigm. An adaptive CUDA approach typically involves the following steps:

Reference:
Sweilam NH, Al-Mekhlafi SM. A survey on numerical studies for fractional biological models and their optimal control. In: Radwan Ahmad G, Khanday Farooq A, Said Lobna A, editors. Fractional Order Systems: An Overview of Mathematics, Design, and Applications for Engineers. Academic Press. ISBN 978-0-12-824293-3, 2022. Chapter 1.