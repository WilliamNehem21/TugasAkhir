SystemC is part of a set of high-level design languages that have been proposed to increase the level of abstraction for the design and verification of embedded systems. However, conducting a direct and thorough verification through model checking or theorem proving of SystemC designs is not feasible due to the object-oriented nature of the library and the complexity of its simulation environment. Previously, we demonstrated the feasibility and success of performing model checking and generating assertion monitors for SystemC using a variant of abstract state machines (ASMs) languages. In this paper, we establish the validity of our approach by proving the correctness of the transformation from SystemC to ASML.

The work of Patrick and Radhia Cousot is essential for any program transformation using abstract interpretation. The strategic decision to utilize semantics to connect the original program to the transformed program is intelligent as it allows for proving the correctness of the transformation with respect to an observational semantics. The approach described in section 3.9 of ASML is a specific instantiation of this general methodology.

ASML is a modern language developed for abstract state machines, offering support for object-oriented modeling at a higher level of abstraction compared to C++ or Java. In this paper, we focus on a specific subset of ASML semantics used in the program transformation.

Proof: A construction process similar to the one proposed in Theorem 2.14 is used, with the main difference being that instead of considering SystemC method threads and sensitivity lists, we focus on ASML methods and their preconditions. There are numerous potential constructions involving ASML post-conditions as well.

Proof (sketch): The proof is accomplished by constructing the ASML program. For each SystemC module, an ASML class with the same data members and methods is created. The preconditions for the ASML methods are set as a conjunction of the state of the events present in the sensitivity list of the SystemC program processes. The challenging aspect in the construction lies in determining when to update the ASML program. Two possibilities are considered: 1) for C++ variable updates, a partial update can be applied using the notion of binders in ASML; and 2) for SystemC signals, all signals are updated when the preconditions of all methods are false. Once the set of ASML classes is defined, Theorem 3.9 ensures the existence of the ASML program.