The Creol interpreter enables the simulation of a closed distributed system with known initial components, but it requires an implemented environment for component interaction. This limitation is addressed by the Hoare logic, which proves invariants for classes and allows the construction of system-wide invariants from class invariants using a compositional rule. These invariants may reference an imaginary communication history recording object creations and method calls in the system.

This paper focuses on the class aspect of the Creol language, specifically its basic communication and synchronization model. It excludes considerations of interface, inheritance, self-reentrance, dynamic update, typing, and specification. However, the approach is adaptable to other languages where communication occurs through message passing or method interaction, assuming syntactically correct and well-typed Creol programs.

The subsequent sections of the paper are organized as follows: Section 2 reviews the syntax of the primary Creol statements. Section 3 presents operational semantics for the core language within a closed system. Section 4 introduces open system semantics, connecting them to closed semantics and Hoare logic. Section 5 discusses related work, and finally, Section 6 summarizes the paper.

Because some of the rules in this paper use variables that do not appear in their left-hand side, direct testing or simulation of a Creol component is not feasible. Possible solutions include modifying the rewrite rules to accept user-supplied data alongside the Creol program or defining a custom evaluation strategy in Maude to instantiate unbound variables using random data.