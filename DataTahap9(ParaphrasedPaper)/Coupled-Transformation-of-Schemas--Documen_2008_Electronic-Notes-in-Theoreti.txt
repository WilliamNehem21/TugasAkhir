The paper discusses the use of different techniques for transforming automatically composed conversion functions and value-level operations. These transformations enable the optimization of conversion functions and the migration of queries. Section 5 explores the constraint-awareness of two-level transformation, where constraints on transformed types can be propagated and introduced during type-level transformation. Related work is discussed in Section 6, while Section 7 summarizes the contributions of the 2lt project and outlines avenues for future work.

The scenario of data mapping involves coupled transformation of data types and corresponding data instances, particularly at the boundaries between programming paradigms. This occurs when object models, relational schemas, and XML schemas need to be mapped onto each other for purposes of interoperability or persistence. Data mappings typically involve fully automatic translation of entire data structures during system operation, rather than being evolutionary.

The paper presents an example of structural composition of two-level transformations, where a nested type x is transformed in a two-step process involving transformation t1 and a map operator associated with function f. The goal is to pull the nested transformation to the level of the original type a and optimize the conversion functions.

The challenge of driving composition at the value level by composition at the type level is discussed when developing a framework for two-level data transformation. The paper emphasizes the need for dynamic derivation of compositional specifications of value-level transformation functions based on the compositional specification of type-level transformations.

The approach ensures that value-level transformations are statically checked to be well-typed with respect to the associated type-level transformations. It also addresses the need to post-process conversion functions after composing them to optimize their performance and reorder conversion steps.

Constraints on transformed data schemas, such as referential integrity constraints in SQL database schemas and operator precedences in grammars, are also discussed. The paper shows how constraint-awareness can be incorporated into the framework for two-level transformation, with constraints represented similarly to data conversion functions and queries.

The paper also introduces data refinement theory combined with typed strategic term rewriting as an initial framework for two-level transformation. It describes how rewrite rules consume a representation of one type and return a representation of another type, with constraints dynamically computed.

The notion of XML functional dependencies and their propagation to target relational schemas is mentioned, as well as the need to extend the framework to include additional constructs for data type construction, such as mutual recursive datatype definitions and inheritance.

Overall, the paper highlights the challenges and strategies involved in two-level transformation, with a focus on addressing the complexities of transforming data types and instances, considering constraints, and extending the framework to encompass a broader range of data type constructs and behavioral descriptions. It also discusses potential applications of the framework to more general model-transformation problems and the transformation of components and services.