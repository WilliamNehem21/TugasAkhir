JRebel, initially developed as an academic project, has evolved into a widely used commercial product by developers globally. It enhances the Java Virtual Machine by enabling seamless class reloading through extensive use of bytecode manipulation. JRebel significantly reduces development time in real-world projects, with reported time savings ranging between 8% and 18%.

In Java EE development, the standard method of updating an application involves redeploying it onto the Java EE server after compilation and packaging. This process can consume a significant portion of development time, ranging from a few seconds to several minutes for each deployment.

An alternative approach involves using the hotswap protocol provided by the Java EE debugger, which permits updating application classes without the need for redeployment. However, this method has limitations, as it only allows changes to method bodies and not to class signatures or inheritance hierarchy, prohibiting the addition of new methods, fields, or constructors.

The impact of the traditional deployment approach on Java developers' productivity is substantial, accounting for an average of 10.5 minutes per hour, or 17.5% of total development time. Considering an estimated nine million Java developers worldwide, the potential annual economic cost of this inefficiency is estimated to be $56.7 billion.

JRebel overcomes these limitations by employing bytecode rewriting to enable versioning, employing just-in-time bytecode translation similar to dynamic languages' compilation and runtime support. This approach allows for modifications to the Java class schema, albeit not to the type hierarchy.

While object relocation is a common practice in Java garbage collectors, implementing schema updates poses a challenge due to the diverse range of garbage collectors, JIT compilers, hardware platforms, and operating systems supported by the Sun JVM. Despite ongoing efforts, full schema updates have yet to be fully integrated into the Sun JVM since the initial hotswap implementation in 2001.

JRebel takes a different approach using advanced just-in-time compilation techniques to minimize performance overhead. It transforms classes into frontend and backend classes, introducing a level of indirection where necessary. This approach avoids the performance and memory overhead associated with treating objects as runtime maps and creating numerous anonymous classes.