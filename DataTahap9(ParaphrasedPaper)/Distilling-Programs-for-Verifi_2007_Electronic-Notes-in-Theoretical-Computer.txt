The paper introduces the distillation algorithm, which transforms programs into a specialized form, making them more amenable to optimization and verification. The algorithm converts programs into tail-recursive functions with minimal intermediate structures, enabling easy verification through the application of inductive proof rules. The authors argue that the algorithm is suitable for incorporation into compilers as it serves both optimization and verification goals.

The arity of each constructor is fixed, with nil having arity 0 and cons having arity 2. The paper also provides an overview of the distillation algorithm and compares it to the supercompilation algorithm, highlighting the former's capability to produce superlinear improvements in program performance.

To prevent non-termination during the transformation process, the paper discusses rules for generalization and identification of common sub-expressions. If a previously encountered expression is embedded within the current one, the algorithm performs generalization to ensure termination.

The authors acknowledge the possibility of overgeneralization, which may lead to incorrect program evaluations. However, they emphasize that if the theorem prover determines a program to be correct, it is indeed correct. Overall, the distillation algorithm is presented as a significant advancement in program transformation, offering both optimization and verification benefits.