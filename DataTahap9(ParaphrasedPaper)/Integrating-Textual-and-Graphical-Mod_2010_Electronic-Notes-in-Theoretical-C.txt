The main modeling constructs provided by the widely-used UML modeling language are graphical diagrams, although there are benefits to using textual representations of models as well. This study explores the integration of textual and graphical modeling languages by comparing two approaches – one using grammarware and the other using modelware. As a case study, we created two versions of a textual alternative for activity diagrams, which is an instance of a surface language. This paper outlines our surface language, the two approaches, and the implementations that follow these approaches.

This paper is structured as follows: Section 2 introduces several relevant concepts. The surface language we implemented and its integration with UML, as well as the transformation from the surface language to activities, are detailed in Section 3. The grammar-based approach is described in Section 4, while the model-based approach is discussed in Section 5. Section 6 explores other applications involving the integration of textual and graphical languages, as well as the transformation of models constructed using multiple languages. The relationship of our work to earlier research is discussed in Section 7. Finally, conclusions are drawn and future work is discussed in Section 8.

The execution of actions is determined by the flow of tokens. There are two types of tokens: control tokens and object tokens. Control flows, depicted by arrows connecting activity nodes, indicate the flow of control tokens, while object flows, depicted by arrows connecting output pins and input pins, illustrate the flow of object tokens between actions.

Every model adheres to a metamodel, which specifies the elements that play a role in the model. If a model conforms to a specific metamodel, each element in the model is an instance of an element in that metamodel. UML defines various diagrams that can be used to represent different aspects of a model, providing a graphical representation for instances of elements in the metamodel.

A surface language provides an alternative notation for these diagrams. In our case, instead of a graphical representation, we provide a textual representation for instances of elements of the metamodel. Other terms for surface languages include surface action languages or action languages.

In Section 4, we describe the implementation of our surface language using a tool for text-to-text transformations, commonly referred to as grammarware. We outline our approach in Section 4.1 and discuss the tools used and important aspects of the implementation in Section 4.2.

In Section 5, we detail the implementation of our surface language using tools for model-to-text, text-to-model, and model-to-model transformations—often referred to as modelware. We describe our approach in Section 5.1 and discuss the tools used and important aspects of the implementation in Section 5.2.

An advantage of the modelware approach is that all transformations can be performed within one modeling environment, eliminating the need for model import/export operations during the transformation process.

For our implementation, we decided not to pursue an action language based on the syntax of Java proposed by Dinh-Trong, Ghosh, and France, as it contains elements not specified in relation to UML. Similarly, we opted for a different approach than that proposed by Haustein and Pleumann, who incorporated OCL expressions into their language, as we aimed to design and implement a simple alternative for activity diagrams that did not rely on or incorporate other languages. 

In conclusion, this paper explores the integration of textual and graphical modeling languages using two different approaches. We present the design and implementation of a surface language as an alternative notation for UML diagrams, and discuss the challenges and benefits of each approach.