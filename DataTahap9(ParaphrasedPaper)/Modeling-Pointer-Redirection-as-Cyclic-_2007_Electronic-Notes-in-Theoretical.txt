This academic paper discusses the challenges and importance of formal techniques in writing and validating programs that manipulate pointers, which are crucial for improving the quality of software. The paper introduces a new class of graph rewrite systems that aim to rewrite cyclic data structures with pointers, such as circular lists and doubly-linked lists, focusing on the addition of new records, redirection of existing pointers, and redefinition of existing records. The proposed systems place special emphasis on defining two kinds of pointer redirection: local redirection, which redefines the target of a specific pointer, and global redirection, which redirects all pointers targeting a node to point towards another one.

The paper also highlights the distinction between their approach and previous works, particularly in their motivation, which is not the implementation of declarative programming languages, but rather the investigation of the elementary transformation rules of data structures as occur in classical algorithms. The remainder of the paper is organized as follows: the introduction of the category of graphs, technical results that help in defining rewrite steps, the introduction of data structure rewriting through a double-pushout approach, and concluding remarks.

The authors utilize the double-pushout approach to define a rewrite step, and they consider the category of graphs representing data structures. They also mention that the considered category of graphs does not always have pushouts, and complement pushouts are not always unique, when they exist. Finally, the paper discusses the proposed rules' advantages and complexities in ensuring confluence and termination compared to traditional term rewrite systems or even graph rewrite systems with injective morphisms.