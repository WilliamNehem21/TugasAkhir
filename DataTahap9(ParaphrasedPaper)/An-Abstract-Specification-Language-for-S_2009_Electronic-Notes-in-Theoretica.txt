Most static program analyzers come with a fixed set of checks, giving users little flexibility to add additional properties. This paper introduces a unified approach to facilitate the specification of new static analysis checks in a concise manner. The authors present the GPSL/GXSL language, which allows for defining new control flow checks. This language is closely related to CTL specifications that are combined with XPath queries. Additionally, the paper describes the authors' experiences with adding new checks using their tool, Goanna.

The custom checker language developed in this work enables the addition of new checks or modification of existing ones as per the user's requirements. Goanna, a state-of-the-art static analysis tool for C/C++ programs based on model checking techniques, focuses on a syntactic program abstraction using control flow graphs (CFGs) labeled with objects of interest, such as memory allocation, use, or deallocation. The authors elaborate on the GPSL/GXSL language, motivated by describing typical checking patterns in a straightforward declarative manner. The language is divided into GPSL, a high-level abstract language for end users to define new checks based on patterns instantiated with objects from a predefined library, and GXSL, an extension of XPath that incorporates functions and variables for querying the control flow graph.

The authors compare their approach with other methods such as the metal compilation language, the Condate language used in the MyGCC research tool, and the static program query language (PQL) with a dynamic observer. They outline the organization of the paper and provide an overview of Goanna and its underlying framework, before delving into the details of the GPSL/GXSL language. The paper concludes with the authors' experiences using GPSL/GXSL for real software, along with their findings and conclusions.

The paper also discusses the challenges and advantages of different approaches to static analysis and temporal logic patterns. It describes the extension of the GPSL language to include predefined patterns for specifying properties, as well as the addition of warning messages to highlight property violations. Furthermore, the authors share their experiences with the tool's performance, highlighting the benefits of efficient caching and reuse of queried objects offered by GPSL/GXSL. They emphasize that the GPSL/GXSL language has proven to be no less effective than hand-optimized hard-coded checks and has been successfully integrated into the Goanna tool. This approach is recognized as a standard component of the tool, independent of the underlying programming language to be analyzed.