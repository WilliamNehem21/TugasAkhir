Soot 2 was created as a bytecode analysis and transformation toolkit, capable of conducting both intra- and inter-procedural static analyses and transformations. It has been widely utilized by researchers within the Sable Research Group and beyond for exploring new analyses, and serves as a common platform for the comparison of empirical findings. Moreover, Soot is regularly employed in teaching optimizing compiler courses at McGill University and other institutions, providing a foundation for student assignments and projects.

The visualization capabilities of program analysis in the Soot framework benefit both compiler research and teaching. For researchers, the ability to observe the progress and outcomes of an analysis facilitates the development of complex analyses. In teaching, visualizations can be utilized for instructor-led demonstrations of analysis algorithms, as well as by students to enhance their understanding and debugging of program analyses they implement.

Soot incorporates a generic annotation framework for encoding analysis results as tags attached to components of the intermediate representation (IR), including expressions, statements, methods, fields, and classes. These tags are propagated between various IRs in Soot and can also be encoded in class file attributes for use by other tools. The Soot-Eclipse plugin reads these tags as the source of information to be visualized. Consequently, a user wishing to visualize the results of a new analysis only needs to encode them using the standard annotation framework tags, and they will immediately be visible in Eclipse.

To enable the visualization of different types of results, three new types of tags have been introduced. The information stored in these tags is read into Eclipse and displayed with any of the IRs or original source code. String tags encode textual information, displayed as tooltips when the mouse is moved over the associated piece of code. Color tags are utilized to highlight sections of code (such as variables or expressions) in color. Link tags encode connections between different statements and are presented as lists of links with which users can navigate to other pieces of code.

With the plugin, tracing can now be conducted using the actual analysis, enabling students to trace through analyses of their choice at their own pace. One of the primary challenges faced by students when implementing and debugging their own dataflow analysis is understanding the process as their analysis progresses. The ability to trace through the analysis step by step, and even backtrack, is expected to enhance students' comprehension of dataflow analysis and make the task of implementation and debugging more manageable and enjoyable.