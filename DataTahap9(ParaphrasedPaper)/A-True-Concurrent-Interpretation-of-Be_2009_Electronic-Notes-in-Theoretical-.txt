The paper discusses the trend in modern software applications to conceive computation as an outcome of interactions. These applications are designed with architecture composed of components that offer a unified set of services through well-defined interfaces. The overall functionality of the system is the result of complex and highly concurrent interactions among its components. Understanding the behavior exhibited at the component interfaces is crucial for predicting the success of system deployment.

In UML 2.0 (and in other paradigms like Koala), components are perceived as having multiple access points (ports, interfaces) through which they communicate with other components. This design approach captures the ordering relations between event occurrences on component ports and the dependencies that arise.

The paper introduces the concept of component vectors obtained through coordinatewise concatenation and describes the formalism of capturing event occurrences over the ports of a component using a specific kind of component vectors called column vectors, which have at most one event per coordinate. The paper also discusses the properties that a language must satisfy to ensure that vectors are obtained solely through concatenations with column vectors, leading to the characterization of normal component languages and the generation of a class of automata for describing component interactions.

The paper explores the mapping of component vectors onto location sets and discusses the concept of parallelism rooted in the formal treatment of concurrency, expressing it through an independence relation within the theoretical framework. It further addresses the identification of start and end locations in the context of parallel interactions and the treatment of event occurrences appearing in different operands of parallel interactions.

The paper also attempts to simplify the perception of concurrency by stating that events from different operands are reached in no particular order and discusses the implications of this perception on the formal treatment of concurrency. It provides formal definitions for mapping locations within parallel interaction fragments onto component vectors and describes the implications of this mapping on the component language. The paper also discusses the use of labeled transition systems (LTS) to model components and supports the gradual elaboration of scenario-based specifications. The approach helps in identifying missing behaviors and emergent behavior, supporting the comprehensive development of specifications.