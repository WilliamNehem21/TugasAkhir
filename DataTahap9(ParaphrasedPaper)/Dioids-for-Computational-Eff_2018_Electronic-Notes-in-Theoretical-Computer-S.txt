An academic paper explores various algebraic structures used for modeling computational concepts, with a focus on monads and the increasing popularity of applicative functors. These structures can be seen as manifestations of the concept of monoid in a monoidal category. When dealing with non-determinism, monads and applicative functors are often extended with additional structure, and the article investigates the interaction between the existing and additional structure, particularly in the context of dioids. The study generalizes dioids to dioid categories and demonstrates how dioids in such a category can model non-determinism in monads and applicative functors, as well as delves into the construction of free dioids in a programming context.

The paper discusses the significant role played by algebraic structures in modeling computational effects, such as those handled by monads and applicative functors. The unification of concepts and techniques from different structures into a single framework is highlighted, enabling the translation of properties and methodologies across these structures. The paper also explores techniques for dealing with non-determinism in functional programming, particularly deep and shallow backtracking, and how these are represented algebraically to provide a unified framework for non-determinism in monads and applicative functors.

Furthermore, the paper focuses on the study of shallow-backtracking non-determinism through dioid categories, providing a unified model for both monads and applicative functors. The construction of free dioids is also investigated as a means to represent programs structured with shallow-backtracking non-determinism. The paper's sections are devoted to introducing monoids and monoidal categories, dioids and dioid categories, the construction of free dioids, and a conclusion summarizing the findings.

The article presents the concept of near-semirings as a representation of deep backtracking, distinguishing it from the study of shallow backtracking and using lemma 3.3 to extend monoidal categories to dioid categories. The challenge of implementing a monadplus that satisfies certain axioms is discussed, with lists serving as a non-example due to their canonical representation of deep-backtracking non-determinism.

The paper presents a generalization of the free monoid to monoidal categories and free monads and free applicative functors, building on the work of scholars such as Kelly, Rivas, and Jaskelioff.