The paper introduces designs for concurrent objects in an object-oriented language called Creol, which leverage processor release points and asynchronous method calls to influence the control flow within concurrent objects. These designs aim to reduce the time spent waiting for replies in distributed environments and enable objects to dynamically switch between active and reactive behaviors. The control flow inside concurrent objects in Creol can be affected by explicit processor release points, which are declared in method bodies using guarded commands. These guarded commands can be nested within the same local variable scope and allow processes to be suspended to the internal process queue upon evaluation of a false inner guard. The paper also discusses constructs for explicit release of the processor, as well as guards for checking the arrival of method call replies and enabling the continuation of processes after the arrival.

Creol utilizes three types of guards, including standard boolean expressions, wait guards, and return guards, to represent potential processor release points. The operational semantics of the language encode method calls using two messages: invoc and comp, which represent the invocation and completion of the call, respectively. The paper compares Creol's approach to concurrency with other object-oriented languages, highlighting the differences in handling method calls and concurrency between Creol, languages based on the actor model, and languages employing tightly synchronized RPC models or rendezvous-based method calls.

Overall, the proposed designs for concurrent objects in Creol extend the approach to asynchrony by utilizing nested processor release points and asynchronous method calls, allowing for more flexible control flow within concurrent objects in distributed environments.