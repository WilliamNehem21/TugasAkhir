Test cases can be produced from either a test model, such as a model of the test suite, or from a model of an Implementation Under Test (IUT). When test cases are designed separately from the IUT model, specific frameworks like the UML 2 testing profile can be utilized. This method results in well-tailored test cases but may require additional modeling effort during development. On the other hand, in the second case, existing IUT models are examined by a test case generator. Model-based test generation is particularly developed for conformance testing, which aims to verify whether an IUT complies with its specification.

To address the specification of an open system, we apply data abstraction which has previously been successful in model-checking open systems. From the abstracted system, a set of abstract test cases is generated, guided by a test purpose that defines the scenario of interest. These abstract test cases contain abstract data, which needs to be concretized before test execution.

To instantiate abstract test cases with concrete data, we use constraint-solving. Simultaneously, we transform the original specification into a rule system, which is then used for data selection. The test suite is transformed into a test oracle to retrieve test data, which is used to instantiate and execute the test case. During execution, the IUT might deviate from the selected path, and we dynamically adjust the test execution course through online constraint-solving.

In addition, we describe the syntax and semantics of the specifications, as well as provide preliminary information for constraint-solving. We also explain our approach for data abstraction, followed by the details of test generation. We applied our approach to a case study, which is described in detail. Finally, we conclude our paper with a summary.

Our approach is closely related to symbolic test generation methods. Furthermore, we base our approach on conformance testing, formalizing the notion of conformance between specification and implementation with input-output labeled transition systems (IOLTSs).

We discuss test data determination for whitebox testing and compare our constraint rule systems to related techniques based on symbolic execution. Our approach is rooted in conformance testing, aiming to validate the conformance of an implementation to its specification.

The transformation of the process specification involves lifting variables, expressions, and guards to new sorts, and simulating environmental data. In addition, we describe the approach of test selection and execution with data abstraction, including the necessary rule system, test selection, and execution process overview.

Furthermore, the generation of future test cases directly from UML specifications, as well as the adaptation for UML-based test case generation, is proposed as future work, with the target language of test case generation being TTCN-3.