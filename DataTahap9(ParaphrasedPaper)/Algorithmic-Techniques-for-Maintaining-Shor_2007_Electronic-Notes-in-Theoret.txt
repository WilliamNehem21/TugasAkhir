This paper provides an overview of algorithms for maintaining shortest paths in dynamic networks, emphasizing recent developments in the field. Specifically, the paper examines techniques for maintaining shortest routes in dynamic graphs, focusing on the all-pairs version of the problem where information about shortest paths between every pair of nodes is retained. The paper discusses the concept of dynamic graph algorithms, which are designed to preserve a given property on a graph despite dynamic changes such as edge insertions, deletions, and weight updates. The survey recognizes fully dynamic algorithms that can handle both edge insertions and deletions, as well as partially dynamic algorithms that support either edge insertions or deletions exclusively.

The paper highlights the resurgence of interest in dynamic shortest path algorithms over the past few years, outlining the latest algorithmic techniques proposed in the literature. Additionally, the paper abstracts combinatorial and algebraic properties, as well as common data-structural tools that underpin these techniques, aiming to present the newest results in a unified framework. The proposed techniques are intended to improve understanding and applicability, even for non-specialists.

The survey delves into specific examples of dynamic shortest path algorithms, including incremental and decremental algorithms, and discusses their respective running times and capabilities. Moreover, the paper concludes with a summary of the discussed algorithmic techniques and presents potential future research directions. Throughout the paper, the authors emphasize the importance of combinatorial properties and data structures in algorithmic techniques for dynamic path problems, shedding light on their relevance in designing efficient algorithms for transitive closure and shortest paths. They also provide a theorem and empirical findings to support their claims and analyses. Additionally, the authors describe an algorithm for maintaining all pairs shortest paths in directed graphs with non-negative integer edge weights, outlining its design and efficiency. The algorithm leverages combinatorial properties and data structures to achieve its goals.