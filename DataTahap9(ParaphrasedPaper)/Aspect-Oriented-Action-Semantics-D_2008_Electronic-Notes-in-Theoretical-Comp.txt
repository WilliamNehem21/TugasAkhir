The concept of modularity in programming language descriptions allows for the separate classification of each feature as a module, enabling independent study. Action semantics, a formal notation, is used to create modular descriptions for programming languages. This paper suggests enhancing the modularity of action semantics descriptions by incorporating aspects of aspect-oriented programming. An aspect-oriented notation is proposed and applied to describe specific programming language concepts.

Modularity refers to the degree to which systems are composed of distinct modules. Each module is responsible for implementing a particular feature of the system independently, minimizing the impact of changes on the rest of the system. In programming language descriptions, modular documents organize language specifications into independent fragments, each responsible for modeling a language feature. However, traditional methodologies for describing language semantics, such as operational and denotational semantics, often result in specifications with poor modularity. This is due to their direct handling of the information flow in programming languages, which can be heavily dependent on the language features and require redesign when the language changes.

In action semantics, the meaning of a program is defined using predefined dynamic entities called actions and yielders, which respectively produce modifications in the program state and model computations dependent on that state. To address this issue, previous research works have proposed a new style for describing programming languages, emphasizing the need for self-contained objects with all necessary information to describe each language element. This allows designers to define a language feature in a single and independent document section, facilitating reuse and redesign.

This paper proposes an aspect-oriented notation for action semantics descriptions to enhance modularity and reduce complexity. The application of this notation is demonstrated through case studies, and the results encourage further investigation into using aspects for complex language descriptions. Additionally, the paper suggests extending the aspect-oriented notation to incorporate new concepts, such as inter-type declarations, to enhance its effectiveness.