The static single-assignment (SSA) form is a widely used intermediate representation in virtual machines and modern compilers due to its effectiveness in providing data flow information, which simplifies the implementation of common program optimizations such as constant propagation, dead code elimination, and partial redundancy elimination. The construction of SSA form involves computing graph relations such as dominance, as well as non-iterated and iterated dominance frontiers. While efficient graph algorithms exist for these relations, their implementation is complex. This paper presents a novel approach to compute dominance relations and dominance frontiers based on boolean matrix calculus. The approach is implemented in an optimizing backend for LCC bytecode and is evaluated using the SPEC95 benchmark suite.

The paper introduces matrix D as the bit representation of dominance frontiers, where the vector-matrix multiplication SV*D computes the dominance frontier for subset SV. Matrix M represents the dominance relation, with element Mij indicating whether node j dominates node i.

The proposed approach computes iterated dominance frontiers using matrix calculus, requiring a simple binary matrix calculator for computing transitive closures and extended transitive closures. Although basic transitive closure operations can be implemented using simple recurrences, more advanced techniques exist in the literature.

The dominance relation has been extensively studied, and linear-time algorithms exist in the literature. However, some of these approaches have high linear constants and are impractical to implement.

Experimental evaluations were conducted on a Linux platform with specific hardware and software configurations, using the SPEC95 benchmark suite. The results showed that the proposed algorithms have cubic time complexity, aligning with the theoretical considerations of the unified approach. The paper suggests that implementing a better algorithm for finding transitive closures, instead of simple recursion, would significantly improve performance. Notably, the implementation effort for the proposed approach is minimal due to the straightforward nature of the binary matrix calculator, resulting in the smallest lines of code (LOC) in all cases.