Interaction nets are graph rewrite systems where all computation steps are explicit and expressed within the same formalism, without the need for external machinery, which allows for the efficient analysis of computation cost and comparison between different evaluation strategies. The locality and strong confluence of reductions in interaction nets enable reductions to occur in any order, even in parallel, making this formalism well-suited for implementing programming languages and rewriting systems.

The paper is structured as follows: it begins by introducing the main concepts of interaction nets in section 2, followed by the definition of a minimalistic functional language with a case construct and recursion in section 3. The compilation of this language into interaction nets is then presented in section 4, and the paper concludes with a summary in section 5.

In this framework, a net is described as a graph with agents at the vertices and edges connecting at most two ports, with unconnected ports being considered as free. Special instances of a net include a wiring (containing no agents) and the empty net, with the free ports at the extremes of wirings also referred to as free ports. The interface of a net is defined as its set of free ports.

Although no specific evaluation strategy is imposed, it is noted that the left-linearity and non-overlapping nature of the rewrite rules in interaction nets result in strong confluence. However, it is recognized that the system does not terminate due to the presence of recursion. A strict matching semantics, similar to that of ML, is assumed, where an application of a function to an uncovered argument will lead to a runtime error.