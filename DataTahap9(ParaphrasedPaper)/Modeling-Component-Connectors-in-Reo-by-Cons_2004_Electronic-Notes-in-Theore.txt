The model for the behavior of connectors in Reo can be seen as a conceptual extension of probabilistic automata, where simple constraints influence state transitions rather than probabilities. In this model, the primary composition operator in Reo, called "join," is equivalent to a product of automata.

Reo provides various operations for components to dynamically compose, connect, and perform input/output through connectors, with atomic connectors being channels. The concept of a channel in Reo is broader than its traditional interpretation, representing a primitive communication medium with two distinct endsâ€”source end for data entry and sink end for data exit. While channels must support a set of primitive operations on their ends, Reo imposes no limitations on their behavior, allowing for diverse channel types to be used simultaneously, each with its own policies.

Each channel in Reo is considered a simple connector with two nodes, and more complex connectors are constructed by joining simpler ones using the join operation. This allows for the creation of intricate connectors using combinations of user-defined channel types. The semantics of a connector are defined as a composition of the semantics of its constituent channels and nodes, with the semantics of channels being user-defined and Reo defining the semantics of its nodes.

The simplest channels used in these connectors are synchronous (sync) channels, represented as solid arrows, and lossy synchronous (lossysync) channels.

The semantics of Reo connectors can be articulated in terms of relations on timed data streams (TDSs) through constraint automata, which serve as operational models for the behavior of these connectors by relating the languages of these automata with timed data streams. Constraint automata are used to specify the operational semantics of Reo connectors, allowing the representation of subtle timing and input/output constraints, including a mix of synchronous and asynchronous transitions.

Constraint automata are regarded as acceptors for tuples of timed data streams observed at input/output ports of components, and they are used as a semantic model to describe the TDS-language induced by Reo connector networks.

The timing information for the input and output actions is relevant only to the specific connector at hand, and timed runs for a state are determined based on the relative order of initial values, such as a0 and b0, in the timed data streams.

The notation dc(q, n, p) is used to denote the weakest direct current that ensures there is an n-transition from state q to p, while dc(q, n) is a shorthand for dc(q, n, q). These concepts and notations allow for the representation and analysis of the operational semantics of Reo connectors using constraint automata.