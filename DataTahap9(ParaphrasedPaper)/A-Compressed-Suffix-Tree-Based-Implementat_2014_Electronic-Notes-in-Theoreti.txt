Suffix arrays were introduced as a space-efficient means of addressing string processing problems compared to suffix trees. However, they only store information corresponding to the leaves of suffix trees in lexicographical order. To address this limitation, suffix arrays can be enhanced with longest common prefix (LCP) information, which implicitly encodes the topology of the associated suffix tree. With LCP information and navigational operations, a suffix array can fully substitute a suffix tree.

The proposed implementation was evaluated through experiments with two indices. The first index utilized an uncompressed suffix array and LCP information calculated using a specified method. The second index was based on a compressed suffix tree proposed by the Succinct Data Structures group (SUDS) from the University of Helsinki.

The paper is structured as follows: Section 2 covers all necessary foundational concepts; Section 3 presents compressed suffix arrays and LCP; in Section 4, compressed suffix trees are introduced. Sections 5 and 6 discuss related work and experimental results, followed by a conclusion and presentation of future work in Section 7.

Within the domain of suffix arrays, Kasai et al. proposed an O(n) method for computing LCP information. Abouelhoda et al. showed numerous applications stemming from the suffix array data structure and LCP information. Furthermore, they demonstrated that every problem solvable with the aid of a suffix tree can also be solved by substituting suffix trees with enhanced suffix arrays of equivalent time complexity. Later, Puglisi et al. introduced a taxonomy for suffix array construction algorithms.

Despite being a valuable resource, the construction time is not crucial for applications where the index only needs to be built once. A prime example is the mapping of DNA fragments to a reference genome, where the genome index is built once to accommodate mapping of billions of fragments.