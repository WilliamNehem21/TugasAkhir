Numerical programs that perform floating-point computations are highly sensitive to the formulation of mathematical expressions. Minor syntactic variations in these expressions, which do not alter their mathematical meaning, can significantly impact the results of their evaluation. This sensitivity arises from the specifics of floating-point arithmetic, where operations such as addition are non-associative and multiplication is non-invertible. It is challenging to determine the most accurate formulation of a given expression when evaluated using floating-point numbers. Abstract interpretation techniques have been developed in recent years to estimate safe approximations of round-off errors during computation.

The remainder of this paper is structured as follows: Section 2 introduces the original PID controller, PID1. The transformations leading to PID2 and PID3 are detailed in sections 3 and 4, respectively. Section 5 presents the experimental results, and the paper concludes in section 6.

The differences between PID1 and PID2 are found to be insignificant. However, a small change in the code from PID1 to PID3 results in a notable difference in terms of accuracy. Specifically, our focus in this article is on transforming a standard PID controller. We believe that it is feasible to automatically derive the entire transformation from PID1 to PID2 and PID3 using systematic and general rules that are independent of the specific sample program used in this case study. These rules encompass the inlining of expressions, partial evaluation, and loop unfolding. The results obtained from running the three versions of the code demonstrate that these transformations significantly impact the accuracy of the results by several percentage points.