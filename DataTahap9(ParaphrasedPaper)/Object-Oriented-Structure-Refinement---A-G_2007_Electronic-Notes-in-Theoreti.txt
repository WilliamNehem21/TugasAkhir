The paper introduces the concept of using UML to model the structure of objects, their attributes, and relationships as a class graph, with an instance of a class graph defined as an object graph. It defines class graphs and object graphs as directed labeled graphs, and explores how changes in the object structure can maintain the capability of providing services using a graph theoretical approach. The paper also defines structure refinements as transformations from one graph to another that preserve the capability of providing services, and proposes a small set of refinement rules that are sound and complete for a certain type of structure refinement.

The importance of structure refinement in object-oriented design for maintainability, reusability, and cohesion is emphasized, and the paper presents a calculus of structure refinement using graph transformations. It describes class declaration sections as directed labeled graphs and demonstrates how they can be represented as such. Object graphs for class graphs are defined to represent system states, and an informal operational semantics of programming commands based on class graphs and object graphs is proposed. The paper also defines structure refinements between class graphs and their derived relations between object graphs, establishes a set of class graph refinement rules, and shows their soundness and completeness with respect to a restricted notion of structure refinement.

The paper puts forth a graph theoretical approach for studying the relationship between changes in class declarations and changes in method definitions with the aim of making the semantics and refinement of object-oriented programs more understandable and operational. It also introduces an operational semantics for object-oriented programs in the graph theoretical notation, leading to the understanding of the execution of an object program in a similar way to an imperative program by considering graphs as the states. Furthermore, the paper outlines the authors' intentions for future work, including the study of the operational semantics and properties of graphs, which will contribute to the development of a Hoare logic for object-oriented programs with graph predicates.