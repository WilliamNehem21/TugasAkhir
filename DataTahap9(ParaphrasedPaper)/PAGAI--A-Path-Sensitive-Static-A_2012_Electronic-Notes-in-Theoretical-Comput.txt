The Pagai tool is designed for experimenting with new analysis algorithms, enabling independent selection of abstract domains and iteration strategies, as well as partially independent selection of decision procedures, making it suitable for comparisons. The tool was used for extensive experiments on self-produced examples, some inspired by industrial code, as well as on GNU programs, utilizing the LLVM system for analysis of C and C++ code. Unlike many front-ends for analysis tools, Pagai does not impose restrictions commonly found in safety-critical embedded programs, but may employ coarse abstractions that could yield weak invariants in some cases.

In forward abstract interpretation-based analyses, the abstract value at a node where control flows from several nodes into a single node is obtained by computing the least upper bound of the incoming abstract values in the abstract domain. This operation may introduce spurious states leading to loss of precision, especially when the abstract domain is convex polyhedra.

To address precision loss, Pagai aims to obtain inductive invariants at specific program points, particularly using the domain of convex polyhedra. Techniques such as Kleene iterations with a widening scheme and subsequent narrowing iterations are used to push abstract values through control-flow edges to ensure convergence to an inductive invariant.

A specific example demonstrates how classical forward abstract interpretation with convex polyhedra introduces extra states during analysis, preventing the proof of certain conditions. To address this, Pagai implements a solution to compute disjunctive invariants at intermediate nodes, which can lead to a significant increase in the number of elements in the lists.

Pagai's implementation decision involves retaining only those variables in the abstract domain that are not defined by arithmetic operations and are live at the associated control point. This optimization reduces redundant information in the abstract value and is based on an adapted definition of liveness.

Experiments show that the combined technique implemented in Pagai yields statistically more precise results than other techniques, improving the precision of the inductive invariant at numerous control points. However, it is noted that statistically, the domain of convex polyhedra achieves better results but may yield weaker invariants than the domains of octagons or intervals due to the behavior of its widening operator.

Comparison of abstract values obtained by different analysis techniques is noted to be not entirely relevant, as a slightly smaller invariant may not always be useful for proving desired properties. Future work should focus on experiments with better comparison metrics, such as the number of assertions proved in the code and the number of false alarms in client analysis identifying array bound violations and arithmetic overflows.