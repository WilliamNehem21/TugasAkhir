The rapid evolution of smartphone hardware and software ecosystems has resulted in numerous innovations in system software, including the operating system, languages, and runtimes. Although there have been extensive studies characterizing microarchitecture performance, little analysis exists for application performance bottlenecks within the system software stack, particularly for contemporary mobile operating systems.

This study aims to provide a software-focused system utilization analysis, complementing the hardware-focused approach of previous research. The focus is on Android-powered smartphones running newer versions of the operating system. Using 11 representative apps and specific regions of interest within these apps, the performance analysis of the entire Android software stack is conducted to pinpoint system performance bottlenecks.

The widespread adoption of mobile devices, with over 2 billion in use globally and 6.1 billion mobile broadband subscriptions, can be attributed to increasing affordability enabled by hardware and software innovations. The open-source nature of the Android operating system has allowed smartphone vendors to customize the software stack for their hardware, resulting in Android gaining a majority market share for smartphones.

This research seeks to augment the understanding of mobile devices by conducting a top-down analysis of application characteristics. The study focuses on tracing the entire system stack (application + operating system) at runtime to capture performance bottlenecks. While previous works have measured CPU utilization using thread-level parallelism (TLP) as a metric, this study aims to identify specific functionalities that consume high CPU time in order to optimize software and design novel hardware accelerators.

To perform system-level tracing, the Systrace tool is utilized, which captures the time for which each thread executes on the processor core. The resulting traces are then analyzed, with an emphasis on grouping threads for common functionality and identifying major time-consuming threads and functionalities.

The study finds that renderthread is the most time-consuming thread during app launches, indicating the need for optimization in this area. Additionally, the analysis identifies inter-process communication as a major time consumer, highlighting the need for software optimization and hardware acceleration to enhance performance and user experience.

In conclusion, the research presents a system-level performance bottleneck analysis for Android smartphones, revealing specific areas for optimization and improvement. The study emphasizes the importance of targeting inter-process communication for maximizing performance and user satisfaction.