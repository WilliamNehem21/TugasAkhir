Structured documents are typically processed using tree-based document transformers, which convert the document's tree structure into another tree structure. In contrast, event-based document transformers recognize the input as a sequence of parsing events, such as lexical tokens, and process these events in an event-driven manner. Event-based transformers have advantages in terms of memory space usage and tolerance for large inputs compared to tree-based transformers. This paper presents an algorithm for deriving an event-based transformer from a given document transformation specification over a tree structure, using the framework of attribute grammars. The algorithm first obtains an attribute grammar that processes a stream of parsing events through a deforestation method and then derives an attribute evaluation scheme relevant to event-based transformation. This approach allows for the development of event-based transformers in a more declarative style, as opposed to directly programming over the stream of parsing events.

The technology for transforming structured documents is becoming increasingly important due to the growing amount of data being exchanged in structured document formats, such as HTML, LaTeX, and XML. While tree-based transformations are widely used and offer high expressive power for describing document transformations, they have limitations in terms of memory usage and scalability, especially when processing large input documents. Event-based transformers, on the other hand, can significantly reduce memory usage, particularly for simple document transformations. However, they are less expressive and harder to program than tree-based transformations, and are typically used for relatively simple transformations.

To address the limitations of event-based transformations, the paper proposes an algorithm that systematically derives a one-pass interactive event-based program from an attribute grammar (AG) specification. The algorithm separates semantic rules into two parts: attribute dependency and value construction, and utilizes a finite state transition machine to model the evaluation scheme, allowing for the incremental output of transformation results. The paper is organized into several sections, which define the problem, present the algorithm through an example, discuss document transformations that can be defined within the proposed framework, and suggest potential extensions. The authors also discuss the formalized algorithm and acknowledge the implementation of a prototype program that generates event-based transformers.

In summary, the paper introduces an algorithm for deriving event-based transformers from AG specifications, providing a more memory-efficient and declarative approach to document transformation compared to traditional tree-based schemes. The paper also discusses potential extensions to enhance the expressiveness of document tree transformation and highlights ongoing work in this area.