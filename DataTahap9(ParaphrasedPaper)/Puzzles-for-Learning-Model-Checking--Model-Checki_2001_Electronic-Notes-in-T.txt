Despite the significant role that formal methods play in ensuring the reliability of hardware and software development, this area of research is often not well understood by non-professionals. Specifically, many undergraduate students in fields such as pure/applied mathematics and electric/electronic engineering often perceive formal methods as being beyond the scope of their interests, as they are not typically emphasized in their disciplines. Despite this, there are efforts to popularize formal methods, such as the inclusion of special education sections in well-known mathematical journals and the organization of international summer schools focused on formal methods.

However, the reach of these efforts is limited, as the audience of these schools primarily consists of graduate or postgraduate students, junior scientists, or professors. In order to improve the teaching of formal methods, it is proposed that concepts be introduced through the use of engaging games and puzzles, as exemplified by the use of puzzles in the literature on logics of knowledge in computer science.

The authors, who have experience training undergraduate teams for ACM regional programming contests, have explored ways to incorporate puzzles into programming training sessions in order to make formal methods more approachable. As a result, they have designed a programming problem that involves power-set operations, propositional and action variables, and models represented as labeled graphs with sets of variables. This approach aims to make the mathematical foundations of formal methods more attractive and accessible to undergraduate students.

One of the key justifications for the importance of teaching program logics and model checking is the wide range of applications for model checking, including automatic verification of finite state systems in hardware and software, verification of high-level software specifications, automatic test generation, and more. However, the complexity of reliable model checking is a significant challenge, and alternative approaches such as test-generation also face difficulties. Despite these challenges, recent research efforts have reported the development of a formally verified model checker, which represents an important step towards improving the reliability and trustworthiness of model checkers used in practice.