To demonstrate the difficulties of automating termination proofs for expressive rewriting-based programs with specific features, we employ certain maude programs. This approach has the advantage of acquainting the user with the simplified notation that facilitates the transition from os to mel. We refer to [3, section 3.3] and consider cmb cons(n,il): natilist if n: nat/\ il: natilist, cmb cons(n,l): natlist if n: nat/\ l: natlist, cmb take(n,il): natlist if n: nat/\ il: natilist, and cmb length(l): nat if l: natlist.

An interesting example of a nonterminating program involving no rewrite rule, borrowed from [8, introduction], presents a conditional membership that establishes the sort inf for terms s(n) (for terms n of the sort nat) provided that s(s(n)) also has the sort inf. Notably, this scenario does not involve any rewriting steps, but the nontermination of the inf program is evidenced by the infinite proof tree.

Proposition 7.1 suggests that leveraging certain established results to prove termination of ms-trss can be advantageous for our objectives. The termination of ms-trss was explored by Zantema as an auxiliary technique for proving termination of (unsorted) rewriting, although he did not specify a systematic method for proving termination of ms-trss. Zantema defined the persistency of a computational property of many-sorted trss as a property unaffected by the removal of sort information from the ms-trs. Naturally, termination is a persistent property of one-sorted ms-trss. Zantema demonstrated that, in general, termination is not a persistent property of ms-trss, but he provided conditions for the persistency of termination for ms-trss: termination is persistent for ms-trss not containing both duplicating and collapsing rules [26, theorem 14]. Aoto resolved a conjecture posed by Zantema by showing that termination is persistent for ms-trss that contain only variables of the same sort [2, theorem 4.23].

Persistence is an interesting property for our purposes: identifying subclasses of os-trss for which termination is persistent enables us to eliminate all sort information to prove termination by using the underlying trs without concerns about losing termination proofs due to missing sort information. When no ordering among sorts is specified in an unconditional scs-mrt, we essentially commence from a many-sorted trs. As such, these findings can be utilized to devise a simpler proof of termination.