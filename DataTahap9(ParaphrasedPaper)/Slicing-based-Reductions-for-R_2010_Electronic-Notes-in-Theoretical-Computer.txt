The authors of the academic paper propose a program analysis technique known as slicing, which aims to reduce the size of models and mitigate the state explosion problem in model checking. In their work, they introduce a static slicing technique for reducing rebeca models with respect to a specific property, and they also present a rebeca dependence graph (RDG) to facilitate the application of slicing techniques. Additionally, they introduce two novel slicing-based reduction techniques called step-wise slicing and bounded slicing to address the issue of large slices produced by static slicing. They also propose a static slicing algorithm for deadlock detection in the absence of a specific property. The paper demonstrates the applicability of these techniques through several case studies.

Model checking is an important formal verification technique for ensuring the correctness of concurrent systems, and it often faces challenges related to the state space explosion problem. To address this issue, the paper discusses various reduction techniques, including slicing, that have been developed to mitigate the problem.

The paper provides a detailed description of the rebeca language as well as the program slicing technique, and it introduces the RDG specifically designed for rebeca semantics. The authors also present four different slicing algorithms for computing slices from the resulting graph. Furthermore, they highlight the automatic nature of the static slicing process and discuss property preservation in the context of slicing techniques.

The paper also reviews related works and presents a comparison of different slicing techniques utilized in various programming languages. Additionally, the authors discuss the structure of the paper, which includes an overview of related works, a description of the rebeca language and program slicing technique, the presentation of the rebeca dependence graph, a discussion of different slicing algorithms, the results of applying the slicing techniques to case studies, and concluding remarks.

The paper concludes by discussing future work, including further investigation into specialized techniques for rebeca models and the integration of these techniques with the rebeca verifier tool set.

In summary, the paper presents novel slicing techniques for reducing rebeca models and demonstrates their applicability through case studies, offering valuable insights into the efficient verification of concurrent and distributed systems.