The development of mathematics has been more organic than its formal definitions and proofs would suggest. Automated theorem proving systems currently in use are more aligned with formal textbook mathematics than they are with the dynamic nature of mathematics development. Existing deduction systems are geared towards proving results if they are true or finding counterexamples if they are false, but not both. Furthermore, these systems assume that the concepts referenced in conjectures are accurately defined and relevant to the mathematical concepts of interest to the user. However, these assumptions are not conducive to the exploratory and evolving nature of research mathematics, where concept definitions change and develop, and faulty conjectures and proofs are refined over time. Thus, there is a need to enhance the flexibility of reasoning systems to address ill-specified problems.

The development of the TM system aligns with two broader projects. Firstly, it aims to implement both the reasoning and social interaction models described by Lakatos. Secondly, it seeks to demonstrate that the combination of reasoning systems such as those utilized in TM will give rise to a new generation of AI systems capable of solving problems that individual techniques cannot.

HR, named after mathematicians Hardy and Ramanujan, is designed to perform descriptive induction to formulate a theory about a set of objects described by a set of background concepts, in contrast to predictive learning systems. The system has been successful in number theory and algebraic domains and has been utilized to enhance the capabilities of AI systems, particularly constraint solvers. While HR has been used to generate first-order conjectures, its application in this paper marks the first instance of HR being employed to prove, rather than generate, theorems.

The company hopes to relax the restrictions of the system, particularly its focus on algebraic domains, in future iterations. The proposed approach uses OTTER first-order syntax, where the negation of a theorem is derived using resolution. The TM system then undertakes a step-by-step process to find supporting and falsifying examples for the given conjecture, and use these to modify the conjecture to eventually arrive at a proof. The system outputs multiple types of results instead of a simple proof-or-fail outcome, and various modifications and iterations are made to refine the process.

The authors express gratitude to several individuals and organizations that have contributed to the project, and acknowledge the support received from EPSRC platform grant gr/s01771/01.