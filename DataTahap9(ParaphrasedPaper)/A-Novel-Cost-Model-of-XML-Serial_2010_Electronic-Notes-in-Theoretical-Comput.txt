Service-oriented architecture (SOA) has emerged as a rapidly growing paradigm in software engineering, through which business functionality of individual systems is exposed as services with clearly defined interfaces, such as those specified in the standard Web Services Description Language (WSDL). By utilizing elementary services, composite services can be created and complex workflows can be orchestrated to partly or fully automate business processes. SOA offers several advantages, including flexibility, platform-independence, and improved reusability. However, the use of XML serialization introduces additional computational and network demands. This paper presents a cost model for estimating the overhead of XML serialization in SOA-based systems, focusing on the impact of data types, dynamic data structures, and string lengths. The paper is organized as follows: Section 2 summarizes related work, Section 3 explains and validates the cost model of XML serialization, and Section 4 draws conclusions and outlines future work.

To address the overhead of XML serialization in a performance model of a service-oriented application, the paper explores several key questions: How does the cost of serialization depend on the data type of the messages to be serialized? How does the serialization overhead depend on the length of a dynamic data structure, such as an array? How does the length of a string affect the cost of its serialization? How can we estimate the serialization overhead of a known composite data type if we know the serialization cost of the composing primitive data types? The paper presents measurements, a model, and validation against measurement results to answer these questions.

The study includes test cases that involve serializing a specific object 10,000 times into the same network stream and measuring the average execution time of serialization. Another set of test cases measures the cost of deserialization by serializing an object into memory and deserializing it back 10,000 times. The study also records CPU usage during the test cases to separate CPU and I/O costs. These test cases were executed on specific hardware configurations and network connections.

The paper discusses the use of a linear model to estimate the resource demand of composite types and presents findings regarding the impact of buffering in XML serialization, particularly in .NET and Java frameworks. Additionally, the paper highlights practical implications of the study's findings, particularly in reusing coefficients for calculating the serialization overhead of composite objects.

In summary, this paper provides insights into estimating the overhead of XML serialization in service-oriented applications and offers practical implications for modeling and addressing these costs in a real-world context.