The concept of service-oriented computing (SOC) revolves around the composition of services, which are independent and heterogeneous, to accomplish specific tasks. In this paper, we introduce a new calculus for SOC within the framework of the CSP process algebra, with the objective of enhancing verification methods and extending the expressive capabilities of SOC calculi. Our contribution involves the extension of CSP with built-in buffers to facilitate direct asynchronous communications. We present the operational semantics of the calculus and augment the FDR model checker by implementing functions for asynchronous communications.

Existing process calculi, such as SCC and CASPIS, offer formal specifications for interaction patterns involving synchronous communications, thus enabling designers to reason about the correctness of SOC systems. Conversely, other formal systems, like COWS and Conversation Calculus, focus solely on asynchronous communications, as synchronous communications are usually implemented by default as asynchronous in internet standards. To the best of our knowledge, there are no formal calculi developed for SOC that support both synchronous and asynchronous communications.

In our new calculus, CSP/A (CSP with Asynchronous Communication), we introduce implicit buffers in the semantics of channels to facilitate asynchronous communications transparently. This means that CSP/A includes asynchronous communication primitives that rely on buffers without requiring designers to create, maintain, or terminate them. We provide an operational semantics explaining the functionality of these buffers.

While our previous work extended CSP to model dynamic compensations, this paper focuses on communication primitives, enhancing CSP by allowing asynchronous communications in addition to its standard mixed synchronous and interleaving communications. We specifically extend the parallel composition operator to allow for mixed synchronous, interleaving, and asynchronous communications. Our future work aims to include primitives for creating and maintaining sessions and modeling mobility to further enrich the calculus.

The paper is structured as follows: Section 2 provides a review of basic CSP concepts, Section 3 introduces CSP/A, Section 4 discusses the relationship between CSP and CSP/A, Section 5 presents the implementation of CSP/A in FDR, Section 6 demonstrates the usability of this extension with an example, Section 7 discusses related work, and Section 8 concludes and outlines future directions.

In our model, we consider atomic actions that can be inputted through a channel, outputted through a channel, or a combination of both. We introduce the interleaving (|||) and parallel composition (||) operators for these actions.

In our model, we aim to preserve the multi-way communication mode of CSP with the addition of asynchronicity. Buffered channels in multi-way communications may introduce non-determinism, as demonstrated in example 3.2.

According to our model, communications can occur in any order. In the case of output happening first, the value is stored in the buffer and retrieved by the input event. However, which input event receives the value from the buffer is not specified.

Our model also addresses synchronous communication with a delay between inputting and outputting values. This is achieved through synchronization on input and output events. We ensure that the CSP/A model follows the synchronization rules of CSP.

While previous work on buffered channels in CSP considered two-way communications, our model extends this to include asynchronous communications as primitive communications alongside synchronous and interleaving communications. Therefore, we integrate built-in buffers anywhere in the system and retain the multi-way communication mode of CSP.
