This paper introduces a novel framework, denoted as cflp(d), which serves as a logical and semantic foundation for lazy constraint functional logic programming over a given constraint domain d. The programs in cflp(d) are formulated as sets of constrained rewrite rules that govern the behavior of potentially higher-order and/or non-deterministic lazy functions over d. The main contribution of this work is the presentation of a constraint rewriting logic, CRWL(d), which provides a declarative semantics for cflp(d) programs. CRWL(d) is based on a new formalization of constraint domains and program interpretations, allowing for a flexible combination of domain-specific data values and user-defined data constructors, as well as a functional perspective on constraints.

Functional logic programming, a research direction initiated in the 1980s, aims to integrate the strengths of functional programming and logic programming. Early attempts to combine these two paradigms include the language LogLisp, proposed by J.A. Robinson and E.E. Sibert, along with other early proposals for functional+ logic languages. More recent efforts have focused on integrating functions into logic programming, but have encountered limitations such as the requirement for defined functions to be first order and deterministic, as well as the need to use special constraints to simulate pattern usage in function definitions.

In recent years, various extensions of CRWL have been developed to accommodate features of functional logic languages, such as higher-order functions, polymorphic types, algebraic data constructors, and treatment of specific types of constraints and finite failure. However, a generic extension of CRWL with constraint reasoning had been lacking.

This paper addresses this gap by devising an extension of CRWL to accommodate the specific needs of constraint functional logic programming and presents cflp(d) programs, their interpretations, and results concerning the existence of least program models. Additionally, it introduces CRWL(d) with an inference system and correctness results with respect to the model-theoretic semantics. The paper aims to unify different primitive functions and user-defined functions within a unique universal signature, and adopts curried notation to express first-order syntax for expressions as applicative syntax.

The proposed framework aims to complement existing constraint logic programming schemes and prior cflp schemes, offering a more comprehensive semantic framework for functional logic programming. The paper also discusses the intricate semantic properties of non-deterministic functions over finite data elements, emphasizing their significance in programming. The paper omits the radicality condition when defining monotonicity conditions, acknowledging the utility of user-defined functions that produce potentially infinite data structures.