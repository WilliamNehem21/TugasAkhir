The academic paper is structured as follows: Section 2 provides a brief introduction to the mac framework. Section 3 discusses an extension called medl-re. Section 4 covers the construction of the dependency graph. Section 5 presents and proves the augmented dfa algorithm. Section 6 outlines related work, and finally, section 7 concludes the paper.

Linear Temporal Logic (LTL) enables the expression of a considerable subset of safety properties of systems, including real-time properties. The monitoring script, expressed in the Primitive Event Definition Language (PEDL), is used to specify the information sent from a filter to the mac system and how it is transformed into events and conditions used in MEDL. The steering script, written in the Steering Action Definition Language (SADL), is used to define actions to be invoked when violations occur. Additional details about PEDL and SADL can be found in references [9, 10].

Events occur instantaneously during system execution, while conditions represent information that holds for a duration of time. For instance, an event denoting the call to method 'init' occurs at the instant the control is passed to the method, while a condition (angle < 30) holds as long as the value of the variable 'angle' does not exceed 30. The syntax of events and conditions is provided within the paper.

MEDL encompasses events and conditions imported from PEDL, definitions of composite events and conditions, safety properties, auxiliary variables, and auxiliary functions. Safety properties can be expressed as either a condition or an event called an alarm. Auxiliary variables are used to define events and conditions, allowing, for example, the counting of the number of occurrences of an event. Auxiliary functions include 'time(e)' and 'value(e)', which return the time stamp and the value of an event 'e', respectively.

The paper also discusses the use of deterministic finite automaton (DFA) to monitor a regular expression (RE) efficiently and presents the empirical results supporting this strategy. Additionally, the document explains the steps involved in the simulation of a DFA and the challenges that arise when dealing with simultaneous events generated by a single primitive event or condition.

The MAC language consists of high-level or composite events and conditions, and low-level or primitive events and conditions. Primitive events or conditions are sent from the filter to the event recognizer in the order they occur and can trigger composite events or change the value of conditions. The order of composite events triggered by a single primitive event or condition cannot be determined because they occur simultaneously.

The paper proposes a method to handle simultaneous events inexpensively, both during the static phase and at runtime. This includes the incorporation of additional information into the DFA to facilitate the simultaneous simulation of multiple paths effectively. The algorithm proposed to incorporate this additional information into the DFA is discussed in detail, with specific premises and steps outlined for the augmentation process.

The paper also emphasizes the significance of linearization, identifying it as a total order of a set of events and providing the algorithm to construct the augmented DFA under certain premises related to simultaneous events.

Overall, the paper focuses on the development of the augmented DFA algorithm to efficiently monitor safety properties in systems using the MAC framework.