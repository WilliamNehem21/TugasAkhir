Most software is easily prone to crashing due to the slightest error, such as a single bit change. As software complexity has increased, development techniques have been adapted to manage this fragility. However, the rapid increase in complexity of large-scale distributed systems has presented a new challenge. This complexity arises from the growing use of distributed systems and the scale of these systems due to the addition of numerous new computers (e.g., mobile phones and other devices) to the internet. To address this new complexity, the authors propose an approach based on self-managing systems, which are capable of maintaining useful functionality despite changes in their environment. The paper motivates this approach and provides some ideas on how to construct general self-managing software systems. A key aspect of the proposed approach is building systems as hierarchies of interacting feedback loops, and the paper presents examples of such systems and deduces some of their design rules. The selfman project aims to develop these ideas into a programming methodology and an implementation.

The paper also explores the challenges of programming large-scale distributed systems, which possess new properties that significantly increase the complexity of programming. These properties include scale, partial failure, security, resource management, performance, and global behavior. While each of these properties has been studied in isolation, the paper aims to propose ideas for addressing these properties collectively.

The authors note that system theory is still in its early stages, with recent research not yet systematized in a textbook, especially in relation to its application in computer science. The paper presents examples of realistic systems to advocate for the application of system theory to software construction.

The design of a self-managing software system is not yet guided by a general set of design techniques, but several important aspects are discussed in the paper, including feedback loops, global properties, and a general architectural framework. The paper emphasizes the fundamental nature of designing with feedback loops and provides examples of systems built with feedback loops. It also raises specific properties such as monotonicity, strict monotonicity, continuity, determinism, and confluence as potential foundations for designing systems with feedback.

Furthermore, the paper explores the open question of how to design distributed feedback loops, considering the interactions between loop design, distribution, and intended tolerance of partial failures. The concept of structured overlay networks is outlined as an example of formulating feedback loops, specifically in terms of self-organizing a large number of computing nodes for efficient routing despite nodes continuously joining and leaving the network.

In conclusion, the paper proposes the consideration of large-scale distributed systems as general self-managing systems and suggests the construction of such systems as sets of concurrent agents interacting through asynchronous events. It advocates for the implementation of self-managing systems as hierarchies of interacting feedback loops and presents the ongoing selfman project, which aims to further develop these ideas into a programming methodology and implementation.