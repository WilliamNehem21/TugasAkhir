Extensive research has been conducted to enhance the quality of real-time software systems in order to minimize the risk of system failure to the public. This research has focused on formal, mathematical specification, verification, and validation techniques. While these methods have shown potential for improving software quality, it is not always clear to software practitioners how well these theoretical techniques represent real embedded systems and their practical application to industrial systems. There is ongoing debate regarding whether certain formal techniques are only applicable to academic examples. Additionally, industry and regulators are realizing that traditional techniques based on adherence to development processes and testing methods, regardless of their thoroughness, cannot ensure system properties to a satisfactory level.

Recommendations for improving software quality include the use of formal methods, software development technologies, and principles that have proven effectiveness, as well as the integration of security concerns into dependability cases. It is also advised not to rely solely on process and testing to ensure dependability, demand transparency and accountability, and base certification on scrutiny and analysis of dependability claims and evidence. Regarding software education and research, it is suggested to emphasize dependability in the training of software professionals and researchers, allocate funding for basic research aimed at enhancing the dependability of software-containing systems, and prioritize evidence of dependability in research efforts.