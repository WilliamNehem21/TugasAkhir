Previous discussions on prover interfaces primarily focused on the functionality available to the user, with an emphasis on managing proof scripts conveniently. Interactive provers like Isabelle and Coq have been utilized based on this criterion, with support for writing proof scripts and checking documents close to mathematical texts. Promising developments include proof-by-pointing, graphical proving metaphors, and prover-specific interaction models to enhance the user experience. Additionally, web-interfaces for provers enable cooperative proof development. Despite the attention to software systems, the engineering considerations necessary to build these systems have been overlooked in previous studies, which have instead focused on the broad software structure. This paper addresses this gap by applying standard approaches for constructing user interfaces to the specific domain of theorem provers, emphasizing the relevance of general principles for theorem prover interfaces.

This paper introduces the notion that non-functional properties of prover interface software play a crucial role in achieving the desired goals of these interfaces. The discussion of engineering considerations is based on these non-functional properties, with specific reference to the interactive interface for the Isabelle prover, i3p, to demonstrate the realization of the engineering goals. Notably, the identified properties are not abstract goals dictated by any specific software design regime, but are rather derived from their relevance for prover interfaces. The non-functional properties serve as stepping stones for achieving the desired goals through the application of software engineering techniques.

The architecture of i3p is presented as a real-world implementation that has been developed to attain the desirable non-functional properties identified, and the paper elaborates on the impact of engineering considerations on the overall system. Specific components and design decisions are discussed in detail, with a focus on their resulting non-functional properties.

Furthermore, the paper addresses the testability, changeability, and extensibility of i3p, emphasizing the benefits of these characteristics for the software. The use of object-oriented frameworks and the interceptor pattern contributes to the extensibility of i3p, enabling it to accommodate new drivers and installation types developed independently of the core software.

The paper also compares i3p to other prover interfaces proposed in previous studies, highlighting how the application of general software engineering principles can lead to significant benefits in the development of prover interfaces. In contrast to other approaches, the i3p framework demonstrates how the engineering considerations and non-functional properties can be harnessed to realize the potential of prover interfaces.