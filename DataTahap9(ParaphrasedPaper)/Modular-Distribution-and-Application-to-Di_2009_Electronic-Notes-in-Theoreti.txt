Reactive embedded systems, due to their strong interaction with the environment, are inherently critical as their failure can lead to significant human or environmental harm. Consequently, there is a pressing need for formal methods to ensure the design of these systems with formal properties to mitigate potential risks. This paper focuses on the issue of ensuring properties through an automated program transformation method. Some existing methods necessitate the separation of complex and general programs into two partsâ€”one for automated transformation and the other for performing additional computations. However, this process of separation can be laborious, and the recombination of the two parts can raise safety and modularity concerns. This paper proposes a solution using an automatic type-directed distribution method to derive an abstraction for the application of the transformation, as well as the complementary of this abstraction for recombination.

Nevertheless, this approach is effective only for a boolean state-based abstraction of the system, which involves the addition of inputs (e.g., boolean values from scalar data comparisons) and the masking of others. Utilizing this method also requires separate compilation of the state-based abstraction of the original system, which may expose the final system to data or control consistency issues. Furthermore, as current distributed control system (DCS) algorithms only apply to global programs, the boolean abstraction needs to be inlined.

The paper is structured as follows: Section 2 provides an overview of the proposed method, Section 3 presents an application example, Section 4 describes the language used, Section 5 explains the type-directed projection operation, and Section 6 details the application of DCS on the two obtained fragments. Finally, Section 7 discusses the method and outlines potential future directions.

These methods have limited scalability as they are unable to handle more complex systems, such as those combining boolean and numerical values, without abstraction. Two solutions are proposed to address these challenges: extraction of a boolean abstraction from the entire system, followed by recombination with the original system, or the design of a separate boolean abstraction. The former solution may involve complex manual work to obtain the abstraction, whereas the latter solution is considered within the framework of embedded systems design in computation/control layers. This approach allows for the separate design and compilation of computational and control layers, with specific analysis tools suitable for the reactive part. Additionally, it facilitates the design of modular reactive patterns, which can be tested, formally checked, and reused for multiple designs.

However, separate design can pose challenges for the global simulation and analysis of the system, leading to a lack of modularity and flexibility in the control interface. To address this issue, mode automata and further work on synchronous languages have incorporated automata as control structures in dataflow languages. The article also demonstrates the adaptation of an automatic distribution method to enable the separate compilation and transformation of a program, with a focus on discrete controller synthesis.

Overall, the paper serves as an application of the proposed method and demonstrates its adaptation for the distribution of programs on a heterogeneous architecture, in contrast to previous work aimed at homogeneous architectures. The paper illustrates the integration of different program design and analysis approaches and emphasizes the potential for modular program transformations and analysis.

The potential future applications of this work include exploring the interaction of this method with modular compilation, considering the method's utility for other mixed models, and evaluating its relevance for the design of multi-tier systems.