One specific type of model-driven architecture (MDA) process that integrates with behavior-driven development (BDD) is the agile MDA process, which incorporates agile principles (such as testing first and immediate execution) into a traditional MDA process. In this approach, models function similarly to code.

Section 2 provides an overview of the general context for BDD and MDD. Sections 3 and 4 introduce the proposed UML profile and library, while section 5 describes the development tool. Section 6 discusses related work, and the final section includes conclusions and future work.

Our investigation is limited to the structural and behavioral constructs defined by the fUML specification. The fUML structural constructs exclude components, composite structures, and collaborations, while the behavioral constructs do not encompass interactions and state machines. Within this framework, the system structure is established using packages, classes, properties, associations, and operations, while the system behavior is defined through activities.

According to the MDA guide, code can be generated from a PIM for different target platforms, with the generated code intended to be complete, without placeholders for developers to fill in. While generating the structure of classes is straightforward, generating code for the behavior of operations is more complex.

The "given," "when," and "then" stereotypes can be used to describe scenarios and can be applied to any fUML action. The description process can be conducted by users (such as customers, analysts, or developers) before scenario implementation. Representing the null value and handling properties with 0..1 or 0..* multiplicities are particularly challenging tasks for creating the "then" part of scenarios.

Implementing scenarios using this infrastructure is feasible but laborious. Furthermore, maintaining a well-structured nesting of actions using structured activities is crucial for enabling model-to-text transformations toward structured programming languages (e.g., Java).

A model corresponding to an iteration may be divided into multiple models corresponding to developers who accept the stories. This division is also beneficial for users performing change management operations. Additionally, having a model containing the accepted stories within the current iteration allows users to estimate the amount of work done or remaining for their respective stories.

BDD Unified Modeling Language (BUML) automatically manages story and scenario status. When a scenario is executed, the verdict is automatically set for the model scenario. Furthermore, when all scenarios pass for a given story, the story status is automatically updated to completed. This provides users with a real-time view of project progress.

To the best of our knowledge, no existing works combine BDD and MDD approaches. As demonstrated in sections 3 and 4, our approach for constructing fUML models shares similarities with Easyb, a platform-specific BDD framework. While other platform-specific BDD frameworks exist, many of them present similar concepts to those outlined in section 2.