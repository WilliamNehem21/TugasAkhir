This paper introduces an innovative self-correcting method for automatically generating input parameters for Java methods, using formally-defined heuristics. These heuristics assist in identifying parameters suitable for meaningful benchmarks. The approach identifies inappropriate method arguments by analyzing thrown exceptions, then approximates and generates new, appropriate input parameters using novel heuristics. The paper also outlines the organization of the remainder, which includes sections discussing foundations, the presented approach, heuristics, advanced heuristic algorithms for handling runtime exceptions, a case study, related work, assumptions, limitations, and conclusion.

The approach is designed to be applicable to any Java API, but the initial focus is on the Java platform API classes, such as java.lang.String, which are widely used in all Java APIs. The approach involves parsing the compiled bytecode of the API implementation, building a navigable API model, computing a complexity metric for each method signature, and considering dependencies on returned values.

Methods that fail with given input parameters are evaluated to determine whether the method should be abandoned or if other input parameter instances should be attempted. The approach also handles cases where the simplest constructor is unsuitable, explores alternative constructors or factory methods, and generates input parameters for collections such as lists and maps.

The heuristics in the approach address various exceptions, including IndexOutOfBoundsException, ClassCastException, and capacity restrictions in collections. The approach also addresses certain limitations, such as the inability to automate the creation of certain instances, and considerations for environments where exception handling mechanisms may not be available.

The paper acknowledges the potential applicability of the approach to other languages and platforms, such as .NET, and discusses how existing execution data could be leveraged to improve parameter generation. It also highlights similarities in object-oriented principles and problems addressed by the approach in .NET and other modern managed languages.

In conclusion, the paper presents a novel approach for automatic input parameter generation for Java methods, outlines its organization and components, discusses its applicability and limitations, and explores potential extensions to other languages and platforms.