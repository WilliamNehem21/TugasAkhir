In section 2.10, it is evident that combining the aforementioned operations can create systems with intricate geometries. When sketching systems, it may be convenient to differentiate input and output interfaces by the direction of arrows, rather than strictly adhering to the convention of placing all input interfaces on the left and output interfaces on the right of components. Furthermore, there are cases where an interface may not clearly represent input or output, in which case the arrow is omitted.

As previously discussed, a discrete-time system exhibits a specific geometry. The subsequent section provides simple examples that demonstrate the flexibility of the model. In all of these examples, the initial and final states of the actions under consideration are evidently apparent as input and output conditions. It is worth noting that single transitions are special instances of non-atomic actions, which would be more accurately termed as not-necessarily-atomic actions. The next example illustrates the potential for actions to be strongly non-atomic.

The notion of desynchronizing a system is based on this concept. For example, a system expressed as a parallel operation of automata can have every transition in each component automaton replaced by an action consisting of three transitions similar to those in the aforementioned example. This modification results in the components of the system synchronizing with arbitrary duration instead of a duration of 1. As a case in point, the dining philosopher problem described in a previous work is considered. The desynchronized version, in which each philosopher's and fork's actions are divided into begin-action and end-action, allows for the duration of taking a fork to be arbitrarily long. Consequently, while one philosopher is taking a fork, another may eat several meals.

Tomata, a structured geometric representation based on three levels of abstraction and a well-established algebra for the composition of automata with interfaces, built on operations with easily understood definitions, is introduced. Contrarily, timed automata are a low-level representation, despite the availability of translations from more structured representations such as the real-time process algebra (ATP). The discrepancy is highlighted using the example of an automatic controller that opens and closes a gate at a railroad crossing, as described by a timed automaton in section 7.5 of a reference. The example is a simplified version of one discussed in section 3, involving only three components: train, gate, and controller. In the example, the relationships among the components are not immediately discernible from the graphical representation, as communications between two components are only represented by common labels on the transitions of different automata. Additionally, in the automata representing the train and gate, specifications and system descriptions are not completely separated, as clock constraints resemble implementations. In contrast, in our model, a counter appears as a subcomponent in the train model to ensure that if the train does not enter and exit from the gate within the designated time interval, an error is detected, allowing corrective action to be taken.