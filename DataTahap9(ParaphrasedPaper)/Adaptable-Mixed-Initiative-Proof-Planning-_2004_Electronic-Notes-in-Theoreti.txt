In this paper, we discuss the application of proof planning in interactive proof exercises and the development of an interaction console within a graphical user interface. The console provides learners with suggestions for proof steps based on the proof planning situation, which can be adapted dynamically according to the user and pedagogical criteria. The article is structured as follows: after introducing proof planning and activemath, we present four learning scenarios for applying a proof planner. We then focus on the interactive proof planning scenario in section 4, detailing how exercises can be tailored to individual learners and how suggestions are presented. Additionally, we describe the use of a command suggestion mechanism for method applications and meta-variable instantiations. Furthermore, we discuss strategies for structuring the repertoire of proof planning methods to create a more hierarchical proof planning process.

The proof planner operates in automatic and interactive modes, with the former searching for a solution proof plan using mathematics-oriented heuristics, and the latter requiring user input for search decisions, such as strategy and method selection. We also explain how the same suggestion mechanism is used for method applications and meta-variable instantiations, and how over-specified suggestions can be utilized to guide learners through the application of methods. Additionally, we touch on the need for gui-objects and functionalities to correspond to different scenarios, emphasizing the importance of user-adaptivity in the design of the educational tool based on the proof planner.

Different proof planning strategies, comprising different methods, tackle proof planning problems in various ways, and we outline the necessity of specifying commands and agents for each method of a selected strategy. Moreover, we discuss the generation of over-specified suggestions and the automation of certain methods to streamline the learning process for students. We also acknowledge the need to tailor the presentation of proofs, suggestions, and feedback to the needs of different learners in the future, as well as to explore the automated generation of faulty and over-specified suggestions.