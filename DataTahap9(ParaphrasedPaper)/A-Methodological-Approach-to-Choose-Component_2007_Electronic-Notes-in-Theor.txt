We believe that these two issues are closely connected to the concept of substitution. In practice, as one develops or maintains an application, specific requirements emerge. To articulate these, the designer or maintainer may conceptualize ideal components, which are virtual representations of the best components that fulfill these particular requirements. The challenge then becomes finding tangible components that best approximate these ideal components. In essence, the process of composing or maintaining components involves the endeavor to replace ideal components with tangible ones.

The remainder of this paper will be structured as follows: in the subsequent section, we will delve into the concept of substitution within development and evolution processes. In section 3, we will outline the generic component and quality models that underpin all our definitions. Subsequently, in section 4, we will introduce a component-oriented substitution model, encompassing rules for substitutability for every functional and non-functional aspect of our model. In section 5, we will demonstrate the potential applications of such a model through a brief example. Prior to our conclusion, we will review related work in section 6.

Our objective is not to present yet another definition of a component or non-functional properties. Instead, we aim to establish a component-oriented substitution framework that can be applied to various existing component and quality models. Hence, we opt to provide generic models that can be utilized for our substitution concepts.

In addition to the component model, we put forth a generic quality model. This model comprises quality characteristics (e.g., those outlined in ISO 9126) and corresponding metrics. We employ existing metrics for the evaluation and comparison of non-functional properties. While there exist several methods in the literature for defining and evaluating non-functional properties, these methods typically focus on specific properties or property families, such as quality of service, which only constitutes a fraction of overall software quality. Metrics, on the other hand, can be applied to multiple property families and facilitate comparisons. Therefore, we posit that in our context, metrics offer the most effective approach for comparing different non-functional properties.

Each component artifact is associated with a quality element through a non-functional property (denoted as NFP). An artifact may be linked to multiple quality elements, leading to the inclusion of several distinct NFPs for a single artifact. An NFP elucidates the impact of a quality characteristic on the artifact to which it pertains, utilizing the metric prescribed for the artifact. Multiple NFPs for a single component artifact may share the same metric, but not the same characteristic.

For each ideal component, a maximal substitution discrepancy is established by its designer. Consider a component, C1, which is being considered as a substitute for another component, C0. If the substitution discrepancy between C1 and C0 exceeds the maximal discrepancy associated with C0, then C1 will be rejected for substitution.