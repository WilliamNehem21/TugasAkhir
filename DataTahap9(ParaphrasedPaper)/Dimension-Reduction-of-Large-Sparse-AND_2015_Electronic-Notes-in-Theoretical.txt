Our reduction algorithm operates at the level of wiring diagrams and maintains the total number of steady states while preserving the ability to recover the original network's steady states from those of the reduced network. Additionally, heuristic analysis and simulations indicate that the algorithm runs in polynomial time. We have demonstrated the efficacy of our algorithm by applying it to and-not network models of gene networks, showing significant simplification in steady state analysis. Furthermore, our algorithm is capable of handling large sparse and-not networks with up to 1,000,000 nodes, making it suitable for use with such networks.

The reduction algorithm involves a series of steps that only result in a reduced and-not network, taking into account specific criteria related to incoming edges and their signs. The algorithm iteratively applies these reduction steps until a non-reducible network is achieved. While the computational cost of computing steady states for the reduced network may be higher for general and-not networks, it is significantly reduced for sparse networks. In the case of boolean models and random networks, the size of the reduced networks was found to be on the same order of magnitude as the natural logarithm of the number of nodes, which is crucial for minimizing the total computation time.

Comparisons with other reduction algorithms for boolean networks highlight the scalability of our algorithm, particularly for large networks, while emphasizing the benefits of tailoring reduction strategies for specific families of boolean networks, such as and-not networks. Our algorithm has been successfully applied to various and-not network models, demonstrating substantial reduction in network size and efficient computation, particularly for large sparse networks. As far as we are aware, no other algorithm is capable of handling and-not networks or similar size classes of (nonlinear) boolean networks.