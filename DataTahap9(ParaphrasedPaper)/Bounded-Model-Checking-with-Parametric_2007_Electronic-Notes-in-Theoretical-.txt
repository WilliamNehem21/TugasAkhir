Different types of specifications can have various logical domains. In this paper, we primarily focus on safety properties, where a safety property violation is indicated by the failure of the last state of the computation to satisfy the specification. Additionally, specific loop-determining techniques are utilized to extend the method for verifying properties within certain problem classes. Once a counterexample of a fixed length is expressed by a formula, we need to verify that formula for satisfiability, as it is satisfiable if and only if the specification can be violated by a computation of that length. In the discrete case, a sat-solver, i.e., a boolean satisfiability checker, is used for this verification process, whereas in the mixed discrete-continuous case of hybrid and timed automata, a combination of a sat and an lp-solver (linear programming) is typically employed. 

Before the satisfiability check can commence, the boolean formula is transformed into conjunctive normal form (CNF), wherein auxiliary boolean variables are used to minimize the formula. A formula in CNF-form is a conjunction of clauses, where each clause is the disjunction of literals. In the pursuit to satisfy the formula, each of the clauses must be satisfied, meaning that at least one of their literals must be true. The sat-solver assigns values to the variables in an iterative manner, and conflict analysis and learning take place if conflicting values for the same variable arise. 

An important concept in this paper is the use of watch-literals for the detection of unit-clauses. The idea behind this is to reduce the number of clauses that need to be examined to determine the unit-clauses after a decision. Furthermore, the paper introduces the representation of auxiliary boolean variables used to build the CNF efficiently.

During the sat-checks, the solver also learns the explanations provided by the lp-solver to refine the abstraction. The paper also discusses various conflict clause types and their reusability. The study concludes by mentioning the ongoing work on improving runtime efficiency and addressing memory issues during bounded model checking through distributed computation and parallelization schemes.

Overall, the paper focuses on techniques and methodologies used for the verification of safety properties in computer systems and discusses various aspects of satisfiability checking using sat-solvers and lp-solvers in different problem domains.