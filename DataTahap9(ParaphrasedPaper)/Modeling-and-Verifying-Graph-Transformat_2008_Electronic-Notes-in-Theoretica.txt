This academic paper seeks to formalize graph transformations within the context of interactive theorem provers, laying the groundwork for proving the correctness of graph transformation systems. In contrast to traditional graph rewriting methods, which involve mapping a pattern graph onto a source graph using a graph morphism and then performing operations on the resulting node and edge set, this paper introduces the notion of path expressions as a generalization of pattern graphs. These path expressions are formulated as formulae within a subset of first-order logic, allowing for a more versatile interpretation of graph rewriting. The paper demonstrates the advantages of this approach in the context of formal reasoning about model transformations with the assistance of proof assistants.

The paper also discusses techniques for addressing specific structural properties, such as multiplicities, within graph transformation systems. It introduces the concept of path formulae, which are formulae from a fragment of first-order logic (potentially including transitive closure) interpreted over graphs, and emphasizes the significance of their decidability in effectively applying transformation rules to graphs. However, it notes that the validity of path formulae may not always be decidable, necessitating interactive proofs in certain cases.

The paper outlines the approach to graph transformation by discussing the process of duplication and the marking phase, providing a semi-formal notation for the latter. It also introduces a set-theoretic model for graphs, highlighting the finite set of nodes, the finite set of edges, and the typing of the nodes as essential components.

Furthermore, the paper introduces a logic of path formulae and discusses its utility for expressing properties relevant to graph rewriting. It also elaborates on model checking of node sets and path expressions, highlighting the reliance on well-known graph algorithms and the finite nature of universal quantification due to the finite node set of the graph.

The applicability condition for graph transformation is outlined, along with constraints on references to nodes to be deleted and generated in the context of the applicability condition. Finally, the paper discusses the potential for addressing the challenges associated with the expressive nature of path formulae and the resulting verification problems in future work. It intends to develop specialized analyses for fragments of the logic to reduce the required human proof effort, drawing parallels with shape analysis approaches used in the context of pointer programs and description logics.