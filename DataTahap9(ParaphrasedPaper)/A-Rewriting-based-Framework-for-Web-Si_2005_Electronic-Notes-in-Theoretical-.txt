Different formalisms have been introduced in the literature for modeling XML and HTML documents, such as semistructured expressions represented as directed graphs, which can handle crossing references. However, our preference is for a hierarchical representation, which does not impose significant restrictions in many practical contexts, while significantly simplifying our methodology.

In this paper, we introduce a term rewriting specification language that aids in expressing properties related to the content and structure of a given website. A specification is essentially a finite set of rules, with terms on the left-hand side and right-hand side of each rule representing (potentially marked) web page templates. The operational mechanism, formalized in Section 5, is based on a novel rewriting-based approach capable of extracting partial structure from a term and then rewriting it.

An example is provided to illustrate the definition of a web specification, with marks introduced by the user to aid in error detection. The handling of marking information and the description of the verification framework are deferred to Section 6.

The first rule formalizes the property that if a web page contains a member list, then for each member, there must exist a home page containing at least the name, surname, and status of that member. The second rule states that whenever a professor's home page is recognized, it must also include teaching information. Finally, the third rule specifies that if a web page contains information about scientific publications, then each author of a publication should be a member of the research group.

Roughly speaking, markings in the right-hand sides of the rules enable the identification of sets of web pages that may be incomplete or missing, thus allowing the detection of faulty pages within those sets. This idea is formalized in the following section.

These rules also allow for simulation of certain structures on the right-hand side. As we have seen in Section 5.1, simulation enables the identification of the structure of a given web page (or template) into another. This can be leveraged to develop a methodology for discovering incompleteness errors in a given website with respect to a web specification.

It is important to note that our verification framework can detect both erroneous web pages and the causes of the detected errors (i.e., the so-called incompleteness symptoms). This not only allows for the identification of bugs and inconsistencies with respect to a given specification, but also facilitates their rectification by comparing incomplete pages to incompleteness symptoms.

The system was evaluated using several examples of websites, the details of which are provided in the URL mentioned above. In each test case, we were able to efficiently detect errors (i.e., missing and incomplete web pages), for instance, taking less than one second for the verification of a web site with respect to a web specification, and producing error messages as necessary.