Generalization, also known as anti-unification, stands as the reverse of unification. When presented with terms t and t', a generalization refers to a term t'' in which t and t' are substitution instances. The dual of a most general unifier (mgu) is the least general generalization (lgg), which is a generalization that can be represented as a substitution instance of any other generalization. Generalization plays a foundational role in numerous program analysis and transformation methods, including theorem provers and program analysis and transformation tools. Hence, formal reasoning and algorithms for generalization are crucial in various applications (see, e.g., [12, 22, 8, 24]).

As is customary in contemporary treatments of formal deduction mechanisms, and in line with the established practice for the dual case of unification algorithms introduced by Martelli and Montanari (see, e.g., [18, 15]), we delineate the generalization process through an inference system rather than an imperative-style algorithm. This approach confers several expository and conceptual benefits, even in the case of the known untyped generalization, which we present as a specific instance to motivate its extension to an order-sorted context. Subsequently, we showcase the natural extension of our unsorted calculus to the new order-sorted generalization algorithm and demonstrate the application of the inference rules with several examples. Finally, we provide a proof of the correctness of our inference system.