We propose a model structure for OCL concepts that facilitates its application over various metamodels. By defining a set of interfaces, we establish a bridge that allows for the utilization of a common OCL parser, analyzer, evaluator, and code generator across different metamodels. We have implemented bridges for three different metamodels, providing OCL support for Java, KMF, and EMF. Our KMF implementation will be updated to incorporate UML 2.0 upon its finalization, and the proposed architecture allows for a seamless transition. This architecture maintains a clear and well-defined separation between the OCL model and its associated metamodel while still ensuring necessary connectivity.

Appendix A contains the EBNF for an LALR grammar used in our implementation, which differs from the standard grammar in that it is unambiguous. Notably, we address challenges in writing rules that accurately parse the language by separately listing variations in the number and style of iterator variable definitions. A potential alternative to alleviate this complexity could be the use of a different separator, such as a semicolon, which is consistent with iterate expressions. Without implementing such a change, the language cannot support multiple iterator variables.

The parser generates an Abstract Syntax Tree (AST) representing the textual expression entered, establishing a direct association between grammar rules and tree nodes. Before interpreting the syntax, a semantic context for the expression must be provided, consisting of the UML (or other) user model over which the expression is to be interpreted and the entry point into that model, i.e., the type of the self variable. The OCL 'Abstract Syntax Model' (ASM) is a mix of syntax and semantic nodes, and we suggest it should be renamed as the 'OCL Semantic Model' to better reflect its contents and purpose.

We reclassify classes from various packages in the UML metamodel as members of a single package named 'bridge,' maintaining their original names while considering them as mappings to the classes from the UML model. Additionally, we advocate for collection and tuple types to be considered subtypes of OCLAny to enhance the expressiveness and usability of OCL, as it would allow for operations specific to OCLAny to be applied to instances of tuple and collection types.

The subsequent subsections address the issues pertaining to each of our three bridge implementations. The KMF version 2.0 is based on the UML 1.4 metamodel and utilizes a UML 1.4 XMI file to build a model implementation, from which the KMF bridge implementation obtains its information to support OCL expressions. The Java bridge implementation faces challenges due to Java's limited support for certain OCL constructs, such as enumerations and typed collections, which have necessitated the use of Java's reflective capabilities in forming the bridge.

In the context of case tools supporting UML diagrams, the integration of OCL and the transformation of mappings between models is relatively rare. These tools should ideally offer support for both syntax and semantic analysis, interpretation, and compilation of OCL statements, in addition to assisting in the writing of syntactically correct OCL code. Notably, existing tools for OCL include a parser from IBM, a toolset developed at TU Dresden, and an OCL interpreter based on an OCL meta-model, indicating an ongoing effort to improve support for OCL in case tools.

In summary, this paper presents a model structure for OCL concepts that enables its use across various metamodels, addressing specific challenges in parsing the language, interpreting its semantics, and interfacing with different metamodels in the context of three specific bridge implementations.