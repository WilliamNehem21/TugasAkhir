Several recently proposed approaches use model-checker based methods for automating test-case generation, and their performance and applicability depend largely on the complexity of the model being used. For complex models, the cost of creating a full test-suite can be significant, and if the model is changed, the entire test-suite usually needs to be regenerated. However, in many cases, only a subset of the test-suite may be affected by the model change, and therefore, recreating the entire test-suite would be inefficient. This paper explores methods to reduce the effort of regenerating test-suites after a model change, which is also linked to the concept of regression testing, where the goal is to minimize the number of test-cases needed after a change.

The paper starts by discussing the use of model-checkers for test-case generation and how the counter-example mechanism of model-checkers is leveraged to create traces that can serve as test-cases. The authors then present different methods for generating new test-cases after a model change, which can be used for regression testing and updating test-suites generated with older model versions.

The paper is organized into specific sections, which include identifying invalid test-cases, creating new test-cases, describing the experiment setup, evaluating the approaches, and discussing the results.

The authors explain how a model-checker is used to decide if a given test-case is valid for a specific model by converting the test-case into a verifiable model. They also discuss the process of model-checking each test-case with the new model and identifying obsolete test-cases as well as creating new ones.

The paper covers various methods for creating change-related test-cases, including the use of trap properties, creating mutants of the model, and a generic extension applicable to any test-case generation method. The experimental setup and evaluation of the methods are also described, showing how the presented methods can be used to update test-suites after a model change.

The potential performance limitations of model-checker-based approaches are discussed, especially when dealing with complex models. The paper also highlights the importance of optimizing the approach to improve performance and reduce the time and effort required for test-suite generation.

Overall, the paper provides insights into efficient methods for test-case generation using model-checkers, with a focus on reducing the effort of updating test-suites after model changes and minimizing the number of test-cases needed for regression testing.