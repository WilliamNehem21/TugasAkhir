The object constraint language (OCL) is widely recognized for specifying properties of objects and object structures in UML models. However, its adoption in industry has been limited due to the lack of comprehensive tool support. To address this issue, we present a prototype tool that examines the syntax and semantics of OCL constraints within a UML model and translates them into the language of the theorem prover PVS. This approach establishes a formal semantics for both UML and OCL, enabling formal verification of systems modeled in UML. Notably, OCL's basis on three-valued logic is reconciled with PVS's reliance on two-valued logic.

Our emphasis is on deductive verification in higher-order logic, which permits verification of potentially infinite state systems. We delineate a translation of UML notations, including class diagrams, state machines, and OCL constraints, into the input language of PVS. By doing so, the original OCL-based specification becomes amenable to verification using PVS.

We selected a specific example for verification that embodies complexity while being succinct. This example involves object creation, asynchronous communication, and lacks a finite state space, making it a challenging case for verification. Notably, the model's behavior is contingent on the data exchanged between objects, and the property to be proven pertains to number-theoretic properties, specifically the generation of prime numbers. This property's nature precludes its demonstration using automated techniques like model checking.

Our experience revealed the inherent complexities in the transition relation generated by our compiler, which appears to be intrinsic to UML semantics. The most challenging aspect pertains to reasoning about messages in queues, particularly the concepts of message precedence crucial for the sieve. The proof of the sieve hinges on two intertwined properties: the absence of discarded signals and adherence to a first-in-first-out order for dequeuing signals, both of which must be specified as invariants in PVS and proved separately. It is noteworthy that a failure in satisfying either property would render the sieve non-compliant with its specification.