Please note that these functions do not necessarily have to be implemented for the algorithm to be effective; it is only their existence that is important to us. They could be computed in any possible manner and our algorithm cc(x) will never explicitly need to use one of these functions. The final axiom simply states that substitutions occur at the level of semantic values' leaves.

The "valid" column displays the percentage of conditions proven valid by the provers 4. The "timeout" column indicates the percentage of timeouts, while the "unknown" column shows the number of problems unsolved due to incompleteness. Lastly, the "avg. time" column shows the average time taken to provide a valid answer.

cc(x) has been implemented in OCaml as a functor parameterized by a theory module whose signature is provided in section 2.1. cc(x) is crucial to the Ergo theorem prover. As practical implementation often precedes theoretical development, several additional features of cc(x) have already been integrated into Ergo. We defer their formalization and correctness proofs to future work.

A functor combinex(x1,x2) combines two theory modules x1 and x2, enabling cc(x) to combine multiple solvable theories. As demonstrated in previous research, solvers for first-order theories rarely combine. However, while this is beyond the scope of this paper, we argue that solvers for typed theories (given certain restrictions) can be combined.