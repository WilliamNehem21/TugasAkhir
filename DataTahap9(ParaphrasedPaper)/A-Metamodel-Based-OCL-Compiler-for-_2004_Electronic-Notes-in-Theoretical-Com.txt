Following an exploration of related work and initial considerations in sections 2 and 3, the overall architecture of the OCL compiler is detailed in section 4. Section 5 delves into the alignment of OCL with UML and MOF, while section 6 delves into code generation. The paper concludes by summarizing the findings and offering insights into future work in section 7.

Our group has developed the Dresden OCL Toolkit, based on version 1.3 of the OCL specification. This toolkit features a modularly structured OCL compiler with interfaces that facilitate easy enhancement and integration into various software engineering environments. The toolkit enables the processing of preconditions, postconditions, and invariants on UML models, and code generators have been created for Java and SQL. Extensive testing within various projects, including collaborations with industry partners, has laid a solid foundation for OCL support. Our current work builds upon artifacts from this earlier toolset, such as an OCL basis library.

The paper describes a tool capable of evaluating OCL expressions over UML models, allowing textual modeling alongside associated OCL expressions and the creation of snapshots for evaluation. While similar to the "Use" tool, our toolkit differs in terms of the utilized metamodels and the approach to OCL expression evaluation. Additionally, our toolkit includes code generation for OCL expression evaluation, whereas "Use" utilizes interpretation.

Preliminary issues are discussed in this section, focusing on terms and technologies used throughout the paper. The MOF metadata architecture, including terms like XML Metadata Interchange (XMI) and Java Metadata Interface (JMI), is presented as part of this discussion.

The MOF meta-metamodel, which is object-oriented and aligns with a subset of UML modeling constructs, is highlighted in this section. The MOF model is self-describing and defined using its own meta-modeling constructs. OCL, defined by a metamodel with dependencies to elements of the UML metamodel, allows for the authoring of OCL expressions for UML models on layer M1. As metamodels on layer M2 are instances of the MOF model, an adapted OCL metamodel for MOF is necessary for specifying well-formedness rules (WFRs) on M2 layer.

The MOF metadata architecture forms the basis for the definition of XMI, a standard for model exchange among software engineering tools. XMI comprises DTD production rules and document production rules, facilitating the generation of DTDs from metamodels (M2) and XML documents from models (M1). To enable data exchange between tools, JMI and the MOF-IDL mapping provide technologies to generate interfaces from metamodels (M2) for accessing instances (M1) or performing operations on them.

"iCommon" is a set of JMI interfaces that grant transparent access to instances of the OCL metamodel, abstracting common concepts of IMOFOCL and IUMLOCL. The alignment of OCL with MOF and UML is discussed in detail, including the introduction of an abstract interface allowing access to OCLUML instances independently of MOF-specific or UML-specific metamodels.

To realize this architecture, a decision was made to employ the NetBeans metadata repository as the MOF repository for the toolset. This section also discusses the alignment of OCL with MOF and UML, introducing an abstract interface for accessing OCLUML instances and detailing an adapter-based solution for mapping between MOF and OCL datatypes. Additionally, it showcases how WFRs of OCL can be decoupled from the internal structure of UML.

The paper details the composition of "iCommon" and its relations to UML and MOF, highlighting its role as a central element of the abstraction that can be accessed through the "iCommon" interfaces. It includes the "commonmodel" package, which provides abstractions for UML metaclasses used by the OCL metamodel's expressions and types packages. It also introduces the "UML-OCL" package, which contains the OCL metamodel dependence on the UML metamodel.

The OCL metamodel defined in UML- OCL has dependencies on the UML metamodel due to association and generalization relationships. Additionally, a discussion on the intricacies of datatype schema in MOF is provided, detailing the mapping of collection and structure types. Enumerations in MOF are discussed, and an adapter-based solution is introduced to address the differences between the representation of enumeration literals in UML and MOF.

Furthermore, the paper introduces additional operations for the commonmodel classes to decouple the WFRs from the internal structure of the UML metamodel, making it easier to align with UML 2.0. Decoupling the WFRs is described as essential for easing alignment with UML and the adjustments required when changes are made in UML but not in OCL.

Finally, a prototype of the metamodel-based OCL compiler, incorporating the MOF repository implementation and the presented code generator, is showcased. The authors also detail efforts to develop a parser module based on the current proposal for the OCL specification, aiming to enable automatic generation of a parser from the provided specification. The need for efficient tool support for practical application is emphasized.
