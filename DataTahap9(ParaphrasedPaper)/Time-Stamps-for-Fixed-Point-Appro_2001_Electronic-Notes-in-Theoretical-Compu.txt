The abstract interpretation framework enables the systematic derivation of program analyses by approximating the standard semantics of a program with an abstract semantics, which is used to extract properties of the program's actual runtime behavior. This paper introduces a top-down algorithm for computing an approximate solution for program analyses involving dynamic control-flow, such as those determined by the run-time values of program variables. It is formally demonstrated that the time-stamps-based constant propagation consistently yields a result at least as good as a standard monovariant constraint-based data-flow analysis, though with potential trade-offs in worst-case time and space complexity.

The article discusses the investigation of top-down and bottom-up aspects of fixed-point algorithms for abstract interpretation of logic programs by Le Charlier and Van Hentenryck. These authors have developed a top-down fixed-point algorithm, similar to the timestamps-based one presented in this article but capable of computing the least fixed point and maintaining multiple values from the lattice of results. The time-stamping technique, originally introduced by Shivers in his PhD thesis, controls recursion and prevents duplication of analysis information over program branches by reusing intermediate results. The paper formalizes this technique and proves its correctness. Further investigations are suggested, such as exploring the potential impact of the order in which outgoing edges are processed at a certain node on the analysis result, and identifying possible redundancies in the processing of edges. The authors are currently exploring potential improvements to the algorithm and its correctness proof.