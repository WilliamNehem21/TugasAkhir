The concept of mobility is essential in the context of global computing, but it also brings about significant security challenges. This paper aims to tackle the issue of protecting host machines from potential attacks or undesirable behavior exhibited by mobile processes. To address this problem, the authors propose a novel approach that involves moving process abstractions, which refer to process code abstracted from local operations, rather than dealing with ready-to-run or active processes. By employing global values and types, the authors ensure that local operations are only used within their intended scope. The proposed approach is applicable to programming languages and systems for coordinating network services, which allow remote communications with the transmission of code fragments. The authors demonstrate the effectiveness of their approach using the Klaim language, where network services are encoded using tuples inside network service repositories, such as Sun JavaSpace and IBM TSpaces.

In the field of global computing, the mobility of processes is identified as a critical aspect, yet it presents various security challenges. For instance, mobile processes pose a threat to host machines, potentially leading to theft or misuse of system resources, which could result in degraded performance or compromised security and reputation. This paper focuses on safeguarding host machines from potential attacks or misbehavior exhibited by mobile processes. Various solutions in the literature are based on type systems, information flow analysis, and proof-carrying code to address the fine-grained control over the behavior of mobile processes and the management of security policies. The proposed approach involves moving process abstractions, which abstract from local operations, in contrast to active processes. The migration process involves a communication between the source and target hosts, followed by the instantiation of the received process abstraction and the customization of the environment to manage process execution, based on the trustworthiness of the received code.

The paper introduces HotKlaim, a variant of the Klaim programming paradigm, which does not provide the eval primitive but instead offers a form of data that can embody a process, known as process abstraction. Process abstraction is beneficial for parameterization with respect to local operations. HotKlaim incorporates two kinds of types, global and local types, classified as g and l, respectively. Global types and terms do not contain certain elements, thus ensuring the appropriate use of local operations and variables.

Additionally, the paper presents "gatherer" as mobile code for searching, with parameters including the locality where the search result should be placed, the search key item, and an authorization key. "Execute" is described as the guardian process for nodes, parameterized with the locality, an authorization function for checking code reliability, and an authorization function for permitting communication operations. The paper also discusses a process language named D, which integrates the call-by-value calculus and the Ï€-calculus, and introduces a type system to ensure the co-location of all processes intending to perform inputs at a specific channel. Moreover, a fine-grain type system for D is defined to control the effects of transmitted process abstractions on local resources. While HotKlaim and D have different features and methodologies, they both address the challenges related to mobile processes and security in global computing.