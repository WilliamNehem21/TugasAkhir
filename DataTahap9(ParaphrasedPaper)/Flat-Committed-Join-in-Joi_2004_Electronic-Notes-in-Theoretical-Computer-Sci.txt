The key points regarding the implementation of cjoin are: (1) the utilization of a distributed two-phase commit protocol (d2pc) for implementing global decisions in a fully distributed manner, and (2) the dynamic nature of the number of participants and their identities in the negotiation process. The authors demonstrate that a significant portion of cjoin can achieve global decisions through a fully distributed approach using the d2pc protocol, originally proposed for zero-safe nets. Furthermore, they illustrate that the join code designed for d2pc in the context of zero-safe nets can be adapted with minor adjustments to encode cjoin, underscoring its versatility.

While it is established that the join language is capable of encoding flat cjoin, indicating that the new primitives for flat negotiations do not augment the language's expressivity, the authors argue that the syntax of cjoin enables a separation of concerns that is challenging to achieve at the join level. Consequently, cjoin facilitates the programming and reasoning about distributed contracts. It is suggested that through further refinement of the encoding of flat processes, it should be feasible to implement full cjoin within join.

Additionally, the conditions presented align with the basic structures of zero-safe nets. The paper notes specific rules and behaviors characteristic of zero-safe nets, highlighting their relevance to the study.

The authors also discuss the handling of redundant definitions and merge names, clarifying their impact on the behavior of a process and their relevance within negotiations. Furthermore, the encoding of zero-safe nets in cjoin yields processes in canonical form, which can be further encoded in join by leveraging the implementation outlined in the paper.

It is postulated that the resulting encoding in cjoin may represent a slightly redundant version of the direct translation, although formal details and proofs are deferred to future work.