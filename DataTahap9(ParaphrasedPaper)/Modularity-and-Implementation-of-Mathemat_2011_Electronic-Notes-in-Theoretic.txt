The limitations and intricacies of syntactic rules make it challenging to prove meta-theoretic results, understand the impact of language changes, and relate operational semantics to the broader denotational semantics. Language-specific operational semantics hinder the implementation of a generic operational semantics in high-level programming languages. Additionally, the inability to relate operational semantics to high-level denotational semantics limits the use of mathematical tools for structuring and reasoning about operational semantics. The desire to find a unified categorical semantics encompassing both operational and denotational approaches reflects the need to explore the mathematical essence of operational semantics. To address these challenges, a structure that combines both coalgebraic and algebraic features is proposed to enhance operational semantics. This approach enables the development of a modular operational semantics, allowing the semantics of a language to be defined as a combination of its individual components, leading to a natural implementation in Haskell.