The concept of a subsystem offers a higher-level unit of modularization in addition to that of components. Subsystems, akin to components, can be represented by a logical theory in isolation, owing to the fact that component interaction is achieved through coordination. This characteristic, combined with the ability to organize a specification hierarchically, has significant implications for reasoning, as it allows for a more focused allocation of proof efforts to the relevant parts of a specification.

In this section, we present a language that serves as the foundation for the study of hierarchical subsystems. It is important to note that this language is prototypical and should not be viewed as an actual ADL (Architectural Description Language). Its purpose is solely to explore more abstract and declarative ways of describing software architectures and to test the capabilities of our proposed formalism.

The logic utilized is a variation of the Manna-Pnueli logic, with the flexible symbols generalized to accommodate state-dependent interpretations. Due to space constraints, a detailed discussion of this logic is not feasible here. We direct interested readers to the original Manna-Pnueli logic for more information, as well as to [reference] for a comprehensive description of our variant.

The paper also introduces various actions, such as "get," "cons," "prod," and "send," each accompanied by specific axioms characterizing their behavior. Additionally, class definitions are structured as self-contained units, with no reference to other classes within their definitions, allowing for independent reasoning about component properties. Communication between components is achieved through the concept of coordination, with associations serving as a means of interaction.

In a previous study, subsystems were defined as complex components constituted by instances of classes and associations. This paper extends that definition to allow subsystems to include instances of simpler subsystems, thereby enabling hierarchical organization of systems. This is made possible by clarifying the semantics of basic components and aggregations, demonstrating no technical barriers to iterating the process of defining aggregations.

An extended notation for subsystems is proposed, featuring a conservative extension of ADT with a new sort "name" and a set of constants of this sort to represent identifiers of components. A subsystem signature comprises a name, finite sets of basic attributes and basic read variables, and a set of operations with arguments typed by sorts of ADT names.

Given the complexity and size of specifications, even for simple systems, software tool support is imperative. Currently, the Stanford Temporal Prover (STEP) is being utilized to assist with proofs in our logic.