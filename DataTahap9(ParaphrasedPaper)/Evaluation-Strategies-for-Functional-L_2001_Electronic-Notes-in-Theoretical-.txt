Recent progress in the foundational principles and the evolution of functional logic programming languages have been propelled by significant breakthroughs in narrowing evaluation strategies. Narrowing is a form of computation akin to rewriting but involves substitutions as well as normal forms. In the context of functional logic programming, the categories of rewrite systems to which narrowing is applied are generally subclasses of constructor-based, potentially conditional, rewrite systems. Many compelling narrowing strategies, especially for the smaller subclasses of constructor-based rewrite systems, are extensions of well-known rewrite strategies. However, certain strategies for larger non-confluent subclasses have been specifically devised for functional logic computations. This paper will explore the elements that play a significant role in evaluation strategies for functional logic programming, outline some key categories of rewrite systems that emulate functional logic programs, present examples demonstrating the differences in expressiveness provided by these categories, and review the features of narrowing strategies proposed for each category of rewrite systems.

Functional logic programming involves the integration of features from both functional programming and logic programming in a single paradigm. In many cases, a functional logic program can be viewed as a constructor-based conditional rewrite system. The pure logic version proves to be complicated due to the incremental generation and testing of potential solutions, thus hindering the use of library predicates and leading to code that is specific to the problem at hand and not reusable. Conversely, the pure functional version is complex due to the presence of data structures and functions that construct and deconstruct these structures. In contrast, the functional logic version is both textually shorter and conceptually more straightforward. Key factors contributing to this simplicity, which are unavailable in either the functional or the logic program, include non-determinism and semantic unification.

A rewrite system is defined as a pair, r = 〈σ, R〉, where σ is a signature and R is a set of rewrite rules. The term t is constructed over a countably infinite set of variables, and a narrowing strategy plays a critical role in the foundations and implementation of a functional logic programming language by computing the steps to be applied to a term. Furthermore, needed narrowing is a conservative extension of this strategy, and the deﬁnitional trees of certain operations are important considerations in developing efficient narrowing strategies.

Lastly, this paper discusses evaluation strategies for extended functional logic programs, such as conditional and higher-order rewrite rules, and how transformational approaches allow the use of existing strategies while preserving their desirable properties.