An often encountered challenge pertains to the encoding of non-atomic keys, which are keys established through multiple steps using various pieces of data. This issue is related to the manipulation of operators with algebraic properties. In a strongly typed model, most methods developed are capable of conducting protocol analysis. However, a secure strongly typed model does not guarantee security due to type confusing attacks.

A new type of substitution has been introduced, where the domain of these substitutions is a set of positions rather than the set of variables. This enables a symbolic representation of the values associated with a variable.

The over-approximation results do not offer a way to prove that a specific term is reachable, rendering the method incomplete. To address this, the means are adapted and the results are extended to encompass under-approximations computations. In the context of security protocols, computing under-approximations allows for underestimating the intruder's knowledge, facilitating the detection of flaws in secrecy. The under-approximations aim to ensure that the languages of computed tree automata correspond to the set of terms reachable by rewriting. By imposing certain conditions on term rewriting systems, it becomes possible to control completion and prove the reachability of a term.

The Diffie-Hellman protocol is a key establishment protocol between two agents, A and B, typically involving three steps. The protocol begins with A generating the nonce na and computing exp(g, na) (representing gna, where g is a number known by all agents), which is then sent to B. Subsequently, B generates the nonce nb and computes exp(g, nb) as well as k= exp(x, nb), where x is the received message exp(g, na). After exchanging messages, both agents derive a common symmetric key. However, it has been shown that this protocol is flawed in certain scenarios.

The intruder manages to obtain keys at multiple steps, intercepting the secret data and forwarding it to the intended recipient, leading to a breach in security. Furthermore, a recent survey provides an overview of formal methods for analyzing cryptographic protocols along with a list of relevant algebraic properties of cryptographic operators. However, it highlights two shortcomings of recent results in protocol analysis with algebraic properties: the reliance on specific decision procedures for specific properties and the limited automatic verification of protocols with algebraic properties.

The scyther tool has emerged as a valuable resource for verifying protocols with an unbounded number of sessions and nonces, as well as handling complex authentication properties, non-atomic keys, and generating correct attacks. Notably, a performance comparison between scyther and other tools has been detailed in a publication by V. Cortier, G. Keighren, and G. Steel, where they emphasize the automatic analysis of the security of xor-based key management schemes.