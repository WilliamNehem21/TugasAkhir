In the interest of simplicity, we will initially focus only on non-binary methods, meaning methods that take at most one argument. Binary methods present complications as they result in variable occurrences that are opposite in nature in the corresponding functor. Although there have been considerations for extending the coalgebraic paradigm to mixed functors, such extensions are intricate and cover only a limited scope. We briefly outline an alternative approach for handling binary methods, which involves representing functions as graphs. This approach works well in a purely functional environment; however, in an imperative setting, binary methods introduce further problematic issues.

For simplicity, we assume that all fields in the classes are private and can only be accessed from outside the class through the class methods. On the other hand, we consider all methods in a class to be public, and we assume that there are no local variables in method bodies.

We note that, due to the assumption that all fields in a class are private (refer to section 1.1), main methods can only access objects through class methods. In particular, in the definition provided earlier, field access expressions do not appear in the expressions e, e', or in the context c[].

In this section, we present a coalgebraic explanation of fickle objects (and programs) for the subset of fickle that includes unary methods, i.e., methods that do not take more than one object parameter. In line with prior works, we model classes as coalgebras, wherein the carrier represents the objects of the classes, and the coalgebra structure is determined by the operational semantics of the methods. The coalgebraic structure captures the progression of the objects when methods are executed.

We now introduce the coalgebraic depiction of the subset of fickle that comprises unary methods. To achieve this, we equip the set of reference objects in a given program p with a coalgebra structure for the functor induced by the methods in p. When a method t0 m(t1x1,..., tqxq) in program p is invoked on an object along with a list of actual parameters, it can either terminate (successfully or with an exception/error), resulting in a potentially modified object, or not terminate. The behavior of methods on objects determines the coalgebraic structure of the objects under method application, only on parameters consistent with both objects. However, it is noteworthy that this is not a transitive relation in general. An approach to addressing the transitivity issue mentioned earlier might involve compensating for the observability deficit of unary methods, but this requires further investigation. Thus, it remains an open problem to provide a coalgebraic description of fickle objects in the general case.