One of the most widely used automatic debugging techniques is algorithmic debugging, which allows for debugging a program without requiring manual inspection of the source code. The technique poses questions to the programmer about the correctness of subcomputations in an execution to identify bugs, and reducing the number and complexity of these questions has been a long-standing objective in this field. A recent strategy for algorithmic debuggers that minimizes the number of questions is the optimal divide and query method, which, when all questions can be answered, is capable of identifying any bug in the source code with a minimal set of questions. This paper discusses the implementation of this strategy in various algorithmic debugging architectures.

Debugging can be a challenging task, particularly when dealing with source code that was not authored by the debugger or was written long ago. In such scenarios, algorithmic debugging proves to be useful as it can automatically generate a series of questions based on the programmer's answers to pinpoint the location of a bug without the need for directly inspecting the code.

The performance of algorithmic debuggers heavily depends on the internal algorithm used to decide which nodes of the execution tree should be queried. In a series of experiments, the divide and query (D&Q) strategy and its variants, particularly optimal divide and query, exhibited the best performance. The optimal divide and query method was shown to ask an optimal number of questions on average.

The remainder of the paper is organized as follows: Section 2 formalizes the D&Q strategy, focusing on the improved version by Hirunkitti. Section 3 discusses the implementation of optimal divide and query, and Section 4 provides the conclusion.

Section 2 formalizes the D&Q strategy, emphasizing the improved version by Hirunkitti. It begins with the definition of a marked execution tree (ET), where nodes may be removed if marked as correct (answered yes), marked as wrong (answered no), or have undefined correctness.

The paper introduces optimal divide and query as a new variant of D&Q that optimally divides the remaining tree with every question. The algorithm computes the weight of a node based on the sum of the individual weights of all nodes in the subtree, considering individual weights only if the node is marked as undefined. If marked as wrong, the individual weight is ignored.

The paper then discusses the Fix Met architecture, where the Met is never pruned and nodes have a state attribute indicating whether the node can be buggy. The strategy uses a pointer to traverse the Met, which can be moved to any node by implementing the optimal divide and query strategy.

In conclusion, the paper proposes an enhanced approach for algorithmic debugging that minimizes the number of questions asked to identify bugs in programs. This approach, known as optimal divide and query, demonstrates improved performance in comparison to existing strategies and provides a formalized framework for its implementation.