Therefore, the comprehension of elementary actions is typically straightforward and confined to a specific context. On the other hand, the broader view, i.e., the meaning of a set of rules, is more intricate and is determined by the regulation governing the application of these rules.

The characterization of these sets can be highly intricate, possibly non-recursive. What is of interest here is the formulation and exploration of formal systems that can articulate and depict noteworthy strategies. In the context of devising strategies for Elan, we formalized this process using either proof terms of a suitable rewriting logic or as a suitable term in a rewriting calculus. The former approach is wholly declarative and does not dictate the precise method for describing this set. The latter is less declarative, but it offers a systematic approach to constructing the intended derivations.

From the existing strategy languages, we should identify the most suitable means to articulate strategies and the optimal combinators to establish them. A representative instance of this challenge is to devise a strategy language that can aptly model probabilistic algorithms, as well as their associated properties and proof mechanisms. Another related issue is defining probabilistic proof methods. From the achievements to date, the rewriting calculus emerges as the framework I currently view as the most promising for expressing strategies uniformly at the requisite level of detail, particularly due to its ability to provide a possibly typed extension of the lambda calculus with matching capabilities, explicit non-determinism, as well as sophisticated exceptions and control mechanisms necessary for articulating strategies efficaciously.

While this holds true as an initial approximation, explicitly capturing control allows for insightful analyses to simplify or optimize the control and to generate efficient code. For example, strategies are detailed in [1,13]. This process of generating code can also benefit from these partial evaluations, and we are still in the early stages of understanding how this could be adapted to strategic rewriting.

Considerable effort is being devoted to crafting strategies, and this is a highly intricate task. Naturally, sharing this work and knowledge is of paramount importance and poses a significant challenge. An initial endeavor in this direction involves the sharing of strategies between the PVS and Coq proof search programming environments.

The mainstream here is theorem proving (i.e., proof search specification) and verification, as each prover or verifier is inherently, albeit sometimes implicitly, reliant on astute strategies. In this regard, our experiences using Elan or Tom for model checking demonstrate that strategic programming could potentially be at least as effective as a dedicated model checker [9,6], but it employs a much more abstract model description.

The application of strategic programming is still in its infancy. Indeed, as evidenced by experiences in Elan, Maude, Stratego, or Rogue, the way algorithms are devised substantially differs when adopting a strategic programming perspective. This underscores the need for further research into programming methodologies employing this paradigm, as well as the importance of widespread education in this programming approach, which is currently lacking.

Applications based on XML are increasingly prevalent. This implies that symbolic structures, particularly term structures, are omnipresent, and rule-based programming becomes imperative. Programming languages like XSLT do not exploit the explicit use of strategies, making strategic programming highly conducive to exposure and development in this domain.

Another application domain is rule-based systems in the context of production or business rules. Here, strategies, especially in rule activation, are a fundamental component. Given that this has also become a popular approach for comprehending and modeling the organization and analysis of companies, markets, ecological, industrial, or economic processes, strategic programming will also play a critical role here.

As indicated earlier, simulating and programming biological entities is one of the primary challenges of this century. Since strategic programming offers both declarative features and a strategy-oriented approach, along with the capability to naturally specify concurrency, it could potentially be one of the best programming paradigms for modeling complex systems such as biological ones. In this regard, the initial experiences using Maude appear promising and should be further developed from an even more strategy-oriented standpoint [9,6].

H. Kirchner and I. Gnaedig. Termination and normalization under strategyproofs in Elan. In Proceedings of the Third International Workshop on Rewriting Logic and Its Applications, Volume 36 of Electronic Notes in Theoretical Computer Science, Kanazawa, Japan, September 2000. Elsevier Science Publishers B.V. (North-Holland).