We have created a function library that mirrors the names of the original posix calls (e.g., myfork, myexec, mywait, myexit). These functions replicate the functionality of the original system calls (myfork performs fork, myexec performs exec, and so on) while also producing one or more lines in the graphviz dot format to visually represent the system call.

To visualize the dynamic behavior of a real program, we substitute the original system calls with the instrumented library functions described above using a simple program or script. This preserves the original functionality and allows us to obtain its graphical representation.

The global dot file is segmented into multiple files, with each file representing a subset of the original file. The first file contains the first line of the original file, the second file contains the first two lines, and so on. Each file represents the behavior of the corresponding number of calls, with each call being represented by a line in the global dot file.

Our primary focus is on streamlining the process of creating and publishing the graphics. Currently, each step (creating the original file, dividing it into iterative files, generating the graphics, and publishing the graphics on web pages) is carried out independently and semi-manually. Therefore, our initial objective is to integrate the individual steps into a single program that can automatically generate and publish graphics in one seamless process using data from the execution of a process.

Besides the technical aspects, we aim to apply similar concepts to other areas of the subject that could benefit from this type of explanatory support. File management is a promising candidate for this method. By visualizing the evolution of the data structures involved in performing each system service, we can illustrate how this approach can be extended to other topics such as concurrent programming and input/output management, albeit with some challenges.