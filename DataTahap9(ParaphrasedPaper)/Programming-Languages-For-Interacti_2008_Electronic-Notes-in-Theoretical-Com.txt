The main idea presented in this academic paper is that the current approach to software design, which often relies on imperative programming languages, ultimately serves declarative purposes. The author argues that this approach is successful because it approximates a simpler declarative model of interactive computation. The paper suggests that rather than trying to address the mismatch between algorithmic languages and interactive systems by emphasizing imperative languages, a more effective approach would be to elevate declarative languages into a computational model that directly supports interaction. The paper aims to lay the groundwork for this proposed model, called the declarative interaction model, by providing a conceptual basis and motivation for further research. It does not present new findings, but rather offers a philosophical framework for future formalization of the model's various aspects.