This research received partial support from the EU project SENSORIA IST-2005-16004. Additionally, the first author received partial support through the joint PhD program from the Department of Informatics at the University of Pisa and the International Institute for Software Technology at the United Nations University in Macao. The authors would like to express their gratitude to J. Vital for his contributions.

Although not explicitly acknowledged, the concept of BMDSD has been in existence for some time and has been pursued in major projects such as Agile, DEGAS, and SENSORIA. In the latter, several components are being developed to facilitate early analysis for ensuring higher product quality, particularly in the case of service-oriented architecture. There are significant considerations regarding BMDSD in general, particularly relating to understanding the extent to which the components (referred to as "barbs") should influence the structure of the system, i.e., the extent to which the models introduced for analysis should influence the system's structure.

Regarding the technology aspect, it is crucial that the technologies selected facilitate both the vertical development (along the system's structure) and the integration of tools within the components. In this paper, we explore the use of UML2 as the modeling notation and VIATRA as a transformation engine to develop a component for the static verification that a service-oriented application adheres to specified policies. We believe that UML is well-suited for BMDSD due to the variety of modeling approaches it supports, many of which are based on established and popular concepts and can be effectively utilized in the main development. UML's extension capabilities have already been demonstrated to support the integration of components.

VIATRA, on the other hand, has built-in features for importing/exporting UML models, thereby facilitating seamless integration with UML modeling tools. Moreover, the designer can express transformations in a declarative style, simplifying the development of the components. VIATRA is integrated in Eclipse, and by using Rational Software Architect for UML, which is also an Eclipse plug-in, a uniform development environment is achieved. Finally, via the Eclipse-based SENSORIA case tool, we can deploy the verification tool as a service within the same environment.

UML's ability to support various views of the models under development and integrate different modeling concerns using its stereotype extension mechanism is noteworthy. Distributing the cognitive burden among multiple developers, each with their expertise, is an obvious way to alleviate the burden. However, the challenge of maintaining consistency in the model required for various concerns still persists, and we aim to evaluate how UML's characteristics can facilitate the development of consistent models.

In the OSGi platform, data exchange between services is based on Java objects, which should instantiate a metamodel in EMF. While this is not a strict constraint for SENSORIA tools, as any XML-based data representation will suffice, EMF enables the direct usage of EMF-based transformation tools like VIATRA.

Despite its advantages, a UML model exported from a tool like RSA is typically complex, given its need to address the numerous concerns of the development process. Conversely, analysis tools typically operate on models based on a small set of concepts with ad hoc notations. Hence, there is a need to extract the input for the analysis tool from the UML model, often in the form of some XML presentation. While previous work has accomplished this, it lacked flexibility and openness. Our approach, which is consistent with the SENSORIA mainstream regarding model representation, involves transitioning from the UML model to another model that adheres to a suitably defined, as simple as possible meta-model. This simplifies the linearization of the target model for tool input and paves the way for other uses of the target model by transformation tools. The SENSORIA context recommends the adoption of EMF as the modeling framework for PCU.

The design naturally leads to the identification of the need for three types of services. It commences and concludes with UML model descriptions. A UML project is submitted to the platform for analysis, formal content is extracted in the form of process calculi descriptions, which are then analyzed with the corresponding analyzers. The results of the analysis are subsequently reflected back into a modified version of the input UML model. The methodology incorporates the use of ForSyDe, a tool for security analysis based on the LYSA approach, and the PEPA Workbench, based on PEPA. The objectives are similar to ours, but the model transformations in their case are constructed using ad hoc Java programs. We anticipate benefiting from the flexibility gained by using VIATRA in our experiments in generalizing the approach toward BMDSD.

This may lead to a comprehensive framework for simplifying the construction of the components on one hand and supporting the formalization of the BMDSD approach, for instance, in an algebraic setting. Furthermore, an algebraic formalization may aid in structuring the approach to the backward transformations from the analysis results to the UML model, particularly when the analysis uncovers errors. While preliminary results exist, a general theory of error reflection is still lacking.

