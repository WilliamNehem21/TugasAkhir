This paper presents a software tool designed for the automated translation of models from the narrative language (NL), a semi-formal language used in biological modeling, to the bio-PEPA process algebra. The tool aims to provide biologists with a straightforward means to describe biological systems, while also granting access to the simulation and analysis capabilities offered by bio-PEPA. The paper discusses the translation algorithm in detail, its integration into existing software, and potential avenues for further exploration of this idea.

Biological modeling, particularly in the context of systems biology, is increasingly interdisciplinary, with biologists often directly involved in model development. However, due to the complexity of formal methods, biologists tend to describe systems informally and rely on mathematicians and computer scientists to translate these descriptions into computational models. Unfortunately, this translation process is susceptible to errors, including misinterpretation of informal representations.

Bio-PEPA is a stochastic process algebra designed for application to biochemical systems. It employs a reagent-centric view where each biochemical species is abstracted as a process, and models are composed modularly through interactions between these processes.

Additionally, the ability to define constants in bio-PEPA simplifies the process of specifying and modifying models, as it allows for the use of explicit numerical values, such as kinetic parameters or initial concentrations.

The narrative language follows a rule-based modeling style with an emphasis on the description of events, while bio-PEPA is reagent-centric, focusing on the definitions of species. The paper details the process of translating each narrative language event to collect the reactions in which each species participates and its role in them.

A key difference between the narrative language and bio-PEPA is that the former associates a component with a number of binary states (e.g., (un)phosphorylated, (in)active), whereas bio-PEPA species have no internal state. As such, a component with n states in the narrative language corresponds to 2n bio-PEPA species in the translation, with the number of variants constrained by the conditions of each event. The paper introduces a set notation to denote the variants of a component that satisfy a given set of conditions, and provides examples to illustrate this concept.

The reaction products depend on the affected variants and the type of event, and are denoted by a specific notation.

In the event of errors during the validation process, the severity determines the course of action. If the parsing has failed due to a critical element missing, the process is aborted. However, for less severe problems, the user has the option to continue, though the resulting file may not be entirely valid.

The software tool is developed in Java, using standard library packages along with Xtext for parsing the model and the Eclipse API for building the graphical interface. The paper discusses potential theoretical and practical improvements, such as optimizing the translation algorithm, developing translations for other target languages, and enhancing the tool's interface to make the NL more accessible.

The authors plan to explore possible optimizations of the translation algorithm, potential developments of translations for other target languages, and the addition of a graphical interface to make the NL more accessible. They also suggest considering the development of a text editor for the narrative language and integrating it with the bio-PEPA plugin. Additionally, they propose creating a user-friendly graphical interface for specifying NL models, possibly integrating forms or a spreadsheet-like application. Finally, they suggest the possibility of developing a purpose-built GUI for users to describe a model and choose an analysis method, with the tool silently performing the translation and running the desired analysis before presenting the results.