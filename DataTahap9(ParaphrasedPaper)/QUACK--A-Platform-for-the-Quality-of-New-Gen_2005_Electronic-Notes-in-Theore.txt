The inclusion of classes time and offset in the OCL 2.0 standard library provides a means of modeling time instants and temporal relationships. Class time represents time instants, while class offset represents the distance between two time instants. This allows for the representation of timing aspects and the definition of typical temporal operators of temporal logics, such as "always," "sometimes," and "until." Furthermore, the time and offset classes enable reasoning about time in a quantitative manner, allowing for the expression of properties such as the requirement for event b to occur at most l time units after event a. Depending on the specific application being modeled, time and offset may be discrete or dense, allowing for flexibility and expressive power in temporal representation.

OCL formulas are evaluated with respect to the current time instant, which is left implicit. The primitive eval of class time is utilized in OCL to evaluate predicates at time instants different from the current one. This evaluation involves determining whether a given predicate holds true at a specific time instant.

In terms of liveness, the expressive operators of dynamic interval and bounded happen presented in tilco allow for the expression of complex properties in a readable format. Additionally, the extension of tilco, known as communicating tilco (ctilco), provides a new model for the composition and decomposition of complex systems, as well as for process communication. In the context of the quack methodology, strategies for proving tilco expressions have been developed based on ad-hoc lemmas tailored to the basic tilco operators.

While the majority of research on component-based real-time embedded systems is focused on the software design phase, recent attention has been given to incorporating non-functional constraints such as deadlines. Component-based software development techniques have only recently been applied to the design and implementation of safety-critical real-time systems, with limited practical results. Numerous challenges must be addressed before successfully applying component-based design methodologies in real-time systems.

In the realm of real-time applications, the UML-RT profile for schedulability, performance, and time specification proposed by OMG allows for real-time application design with UML. However, this profile is not well-suited for component-based design. Alternative approaches, such as one proposed by Išovíc, Lindgren, and Crnković in the context of the slot-shifting scheduler, have been presented, wherein components consist of a single thread.

In the Quack methodology, a framework has been developed for specifying and analyzing component-based real-time systems, with the unique feature that each component consists of one or more concurrent threads and can specify its own scheduling strategy. In this approach, each component is assigned a minimal fraction of the processor bandwidth and is protected from interference by other components. A mathematical model of the component has been developed to compute the optimal server parameters to ensure the satisfaction of temporal constraints.

Furthermore, the technique addresses the challenge of environment programming for test designers, as a significant number of environment messages are required and a misconfiguration in the environment may impact test results. To mitigate workload and potential errors, the technique provides default environments for each test-level message, which are created by the test engine along with default observations of the effects of the messages.

The proposed techniques have been applied to a subset of case studies, including industrial systems provided by research partners, well-known examples from the literature, and public applications that exemplify the use of component technology. Although preliminary, the results are promising, and ongoing experiments aim to enhance confidence in and understanding of the Quack methodology, as well as refine and tune the individual techniques.