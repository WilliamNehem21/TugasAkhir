In the coordination language community, there is a significant group of languages that exhibit properties of architectural languages. The most recent addition to this domain is the language Reo, which supports control-driven exogenous coordination and is execution-oriented as opposed to the design-oriented VCN.

In the realm of hardware and software design, there has been a recognition of the utility of segregating behavioral aspects from the architectural aspects of a system under design. This idea of aspect separation has been addressed in much of the work pertaining to architectural description languages, including in the recent version of the UML language.

A comprehensive study by Bernardo et al. has focused on the interoperability checking of architectural descriptions formalized within the traditional process algebraic framework. It has been shown that, for checking the topology of an acyclic component, it is sufficient to verify the interaction compatibility of all pairs of mutually connected components. The notion of such compatibility is based on the weak bisimilarity of the two components in a pair. This methodology of compatibility checking has also been extended to arbitrary network topologies, including those with cyclic relationships among components.

It is demonstrated in this paper that a similar approach can be extended to the behavioral model of VCN. Unlike previous approaches, the dependency graph of an architecture in VCN is bipartite, as VCN distinguishes connectors from components as two semantically different elements of the architecture. Therefore, an extension of the notion of architectural compatibility needs to be defined between any two adjacent nodes, which are given as a pair of a connector and a component. Additionally, VCN introduces a set-labeled transition operational semantics to capture the behavioral model of connectors, thus enhancing the expressiveness of the supported coordination model.

In our setting, the computation layer is treated as a low-level layer of system specification, upon which the coordination layer is based. This allows for the application of both top-down and bottom-up design methodologies in system design using VCN. In addition, connectors are treated as first-class citizens in the VCN setting, referred to as buses, which represent coordination mechanisms controlling component interaction.

Overall, this paper presents a simplified version of the VCN language for hierarchical specification of component-based concurrent systems, and it discusses the future implementation of a graphical tool for creating and modifying VCN diagrams. Furthermore, the paper suggests plans to extend architectural interoperability checking to VCN bus classes, allowing for generalized definitions of buses.