The research paper investigates the techniques for reading, rendering, and controlling 3D models saved in the 3ds format based on the OpenGL development tools. It first examines the file structure of 3ds and uses chunk structure to abstract the data structure of faces, materials, objects, and models. The file data is read in using recursion, and the retrieved data is rendered on the screen after data disposal. The interactive control of the model is achieved through geometric transformations (translate, rotate, and scale) and the OpenGL select mechanism. These methods are then applied in a borehole operation simulation and drilling system, resulting in improved outcomes.

OpenGL is a powerful tool for developing graphics and serves as a software interface for graph hardware, enabling the creation of models using points, lines, and polygons. However, constructing complex models directly in OpenGL, such as bent or beveled objects, can be challenging. In contrast, 3ds Max offers robust capabilities for rapidly constructing models using methods like lathe and lofting. Complex models created in 3ds Max can be exported as .3ds files, which are saved in a chunk structure. The 3ds file begins with a 2-byte ID, followed by 4 bytes indicating the chunk length, and then the main data of the chunk. When the 3ds file is opened in hex format, the data is saved with lower bytes preceding higher bytes.

The coordinate system in OpenGL differs from that of 3ds Max. The reading program designed in the article swaps the y and z coordinates and saves the swapped data during the reading of vertex list data. This method can save time and space in processing compared to post-processing after reading the data.

To manage the objects selected by the operator, a name stack is created. The program uses the glInitNames() function to initialize the name stack, glPushName() to push the object name into the stack when rendering various models, and glPopName() to remove the object name from the stack.