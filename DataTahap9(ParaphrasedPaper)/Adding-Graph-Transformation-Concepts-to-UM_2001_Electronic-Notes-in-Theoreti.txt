The object constraint language (OCL) is a key component of the Unified Modeling Language (UML) standard for defining class invariants and pre- and post-conditions of operations based on logic. However, the current form of OCL shares the same issues as many other aspects of the UML standard: it lacks precise static and dynamic semantics definitions. Consequently, groups of researchers are actively working to refine and redesign parts of OCL in order to influence the UML 2.0 definition process.

Section 2 of the paper introduces a simplified meta model of UML class diagrams and collaboration diagrams to illustrate the challenges of defining appropriate invariants using OCL. Additionally, Section 3 demonstrates how incorporating additional operators from Progres can significantly simplify the construction of OCL constraints. The concept of functional abstraction for OCL expressions is also introduced, along with a discussion of issues related to the semantics of recursively defined OCL expressions.

The focus of Section 4 is the development of a sublanguage for visually defining constraints. This section includes a survey of visually-oriented constraint definition languages related to OCL, and explores graphical constraint definition sublanguages. The collaboration-diagram-based visual definition of constraints and different approaches to defining the semantics of graphical negation constructs are also discussed. Finally, Section 5 summarizes the proposal and outlines future activities in this area.

The paper also addresses concerns related to the precise definition of certain restrictions using OCL version 1.3. These restrictions cannot be accurately defined due to the lack of functional abstraction and a transitive closure operator in the current OCL standard. The paper proposes assuming the existence of functional abstraction and using recursively defined functions to work around this limitation.

Another key aspect discussed in the paper is the interpretation of the loop operator in OCL, which has multiple versions with different functionalities. Additionally, the paper addresses the semantics of graphical negation constructs.

With regard to the proposed addition of a visual constraint language, the paper highlights the adoption of syntax proposed elsewhere but suggests a different interpretation of negation. The concept of functional abstraction for visually defined constraints is also added. The paper notes the debate over whether textual or visual representations of OCL constraints are easier to produce and understand, but emphasizes the need for tools to edit, analyze, and execute visually defined constraints, as such support is currently lacking in existing UML case tools.