The rest of this paper is structured as follows. Section 2 provides background information on this topic. Section 3 presents a case study and an example that will be referred to throughout the subsequent sections. Section 4 outlines the formal model, including necessary definitions and specifications. Section 5 discusses the automated reasoning techniques currently being used. Section 6 reviews related work, and finally, Section 7 presents the conclusions and outlines future work.

In a previous study, Kephart and Chess from IBM proposed an architectural approach for achieving autonomic computing through independent elements capable of managing both external resources and their internal behavior. According to this approach, autonomic systems consist of these elements, which continuously interact based on high-level policies. Each element comprises an autonomic manager, which is an implementation of the generic control feedback loop from control theory, and a managed element, which could be a hardware or software resource, such as a server, a service, or a group of interconnected software components.

A wide range of combinatorial problems can be formulated as searches for elements within a vast space of possibilities. In general, the search space is defined as all possible combinations of values for a predetermined set of variables. The elements being sought are specific values of these variables, which are typically implicitly defined by the properties they should satisfy. These properties are known as constraints and are usually expressed as predicates over a set of variables. Such a problem formulated in this manner is known as a constraint satisfaction problem (CSP).

Solving a CSP involves two steps: modeling the problem (logical specification) and finding its solutions through a form of search (in this paper, basic backtracking is used). Modeling the problem entails specifying the variables, their domains, and the constraints among them. Solving the CSP through backtracking involves attempting to incrementally build solution candidates by assigning possible values to the variables. Partial candidates that cannot result in a valid solution are discarded. If all variables are bound, a solution candidate has been found. If, after exploring all possibilities, no solution candidate has been found, then the problem does not have a solution.

To illustrate the challenge of adapting an EA at runtime when the set of quality agreements changes, the example of a large-scale e-commerce application is used. This example is referred to throughout the subsequent sections. Detailed information is provided in the following sections on how the planner element of the SHIFT framework captures adaptation constraints and reasons about them to determine possible adaptation plans to accommodate changing context conditions.

The previously mentioned e-commerce application provides an interesting example of the decision-making process involved in planning an adaptation to accommodate changing quality scenarios. Manually evaluating all component compositions, their relationships to quality scenarios, and interactions between quality scenarios is costly, time-consuming, and error-prone, particularly when the software system is already operational. In the next section, an approach is proposed to address dynamic adaptation planning based on the principles of constraint satisfaction.

This section explains how automated reasoning is provided in the planner element. Due to interactions between quality scenarios, and since different component compositions may be available, conflicts between component sets may arise. Automated reasoning aims to address this issue by providing additional information to make the best possible selection of component sets when determining an adaptation plan. The proposed approach seeks to answer the following questions:

1. Flexible component sets: A flexible component set is a component set that can be applied in self-adaptation plans for the same quality scenario with different combinations of other component sets. The approach ensures that, given a set of possible resolution models, the component sets appearing more than once can be identified.

2. Objective function criteria: Two objective functions are considered. The first function outputs the resolution model with the greatest number of applicable component sets to self-adapt an enterprise application (max), while the second function outputs the resolution model with the least number of applicable component sets to self-adapt an enterprise application (min).

As part of future work, the paper aims to extend the reasoning model to address the process of binding components while they are redeployed on system infrastructures. Additionally, the paper intends to develop a support tool for the model and integrate it into a self-adaptation infrastructure. Other future challenges include conducting validations of the implementation with a case study.