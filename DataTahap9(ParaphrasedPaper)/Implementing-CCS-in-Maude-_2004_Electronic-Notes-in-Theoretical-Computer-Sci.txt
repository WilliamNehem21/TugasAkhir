This paper provides a comprehensive discussion on bridging the gap between theory and practice by implementing the CCS operational semantics in Maude. The new implementation involves transitions being rewrites and inference rules being conditional rewrite rules with rewrites in the conditions, leveraging the new features in Maude 2.0. The authors implement both the usual transition semantics and the weak transition semantics, and additionally, they implement the Hennessy-Milner modal logic for describing processes. A comparison is made with a previous implementation, and extensions to the LOTOS language are also discussed.

The CCS syntax is defined in Maude, and the authors make use of frozen operators, a new feature in Maude 2.0, in their second implementation. Processes, including possibly recursive process definitions, are represented using contexts, and the authors encountered and addressed issues related to new variables in premises and non-deterministic application of rewrite rules.

The problem of new variables in premises is tackled using explicit metavariables, while the issue of non-deterministic application of rewrite rules is addressed through a general search strategy defined at the metalevel. The authors also extended the semantics implementation by including metavariables as processes, and by implementing the Hennessy-Milner modal logic for CCS processes.

The paper also discusses the new features in Maude 2.0, such as its greater generality and expressiveness, efficient support for a wider range of programming applications, and its usability as a key component for developing internet programming and mobile computing systems.

Additionally, the use of the frozen attribute in Maude 2.0 is explained, and the authors discuss the problems encountered in defining the diamond and box modal operators and how they were addressed.

The authors assert that the second implementation has several advantages, including being closer to the mathematical, logical presentation of the semantics. They also highlight differences between the first and second implementations in terms of the search strategy and the use of reflection, concluding that the second implementation provides a faster and simpler approach.

Furthermore, the paper compares the framework implemented in Maude with another framework, Isabelle, and explains how the reflective property of rewriting logic enables the first-order system in Maude to achieve capabilities similar to those of a higher-order system like Isabelle.