The cbabel language is an architectural description language that introduces contracts as a core feature alongside traditional architectural primitives like components and ports. This allows for coordination aspects to be specified through contracts, enabling the description of mutual exclusion properties for input ports and the definition of synchronization and consistency properties for those ports. These coordination aspects are captured in connectors, which mediate interactions between functional modules. By separating coordination concerns from functional aspects, different instances of the same component can be subject to distinct coordination specifications.

The rest of the paper is structured as follows: Section 2 provides examples of the cbabel syntax, while Section 3 offers background information on rewriting logic and object-oriented rewrite theories in maude. Section 4 defines the rewriting semantics of cbabel, and Section 5 details the execution and verification of cbabel descriptions using the cbabel tool in maude. In Section 6, related work is discussed, and finally, Section 7 concludes the paper with final remarks.

An example discussed in the paper involves a producer-consumer-buffer scenario, wherein a producer and consumer need controlled access to a buffer. Issues such as race conditions, boundedness of the buffer, and potential deadlocks are addressed. The paper also delves into the treatment of rule generation for port declarations associated with modules and connectors, emphasizing the coordination role of connectors in mediating interactions within an architectural instance.

Additionally, an analogy involving a vending machine is presented, where the purchase of apples and cakes with dollars and quarters is analogous to architectural interactions. This illustrates the application of cbabel in practical scenarios.

In this work, a rewriting logic semantics for cbabel is presented, treating cbabel components as object-oriented modules in a maude implementation. This implementation gave rise to the cbabel tool prototype, which facilitates the execution and verification of cbabel software architecture descriptions as rewrite theories in maude. Two examples are provided to demonstrate the use of the cbabel tool: variations of the producer-consumer-buffer scenario, and a vending machine architecture, with verification of properties such as race conditions, deadlocks, and buffer overflow and underflow.