The maude ltl model checker provides on-the-fly explicit-state model checking for concurrent systems represented as rewrite theories with performance comparable to existing tools like spin. This significantly broadens the scope of applications amenable to model checking analysis. In addition to traditional areas well-supported by current tools, such as hardware and communication protocols, our tool enables easy specification and model checking of new applications in areas such as rewriting logic models of cell biology, or next-generation reflective distributed systems.

Moreover, the maude ltl checker is capable of model checking systems with states involving data in data types of infinite cardinality, such as numbers, lists, or multisets of arbitrary size, including any algebraic data types, under the condition that the set of reachable states from a given initial state is finite. This finitary reachability condition can be relaxed in the case of semidecidable search for counterexamples for safety properties of infinite-state systems supported in maude by its search command.

The paper is structured as follows: section 2 explains the semantics of linear temporal logic for an arbitrary rewrite theory; section 3 describes the functionality of the ltl model checker; and section 4 introduces the satisfiability and tautology checker. The algorithms and implementation are then detailed in section 5, and performance comparisons with spin are presented in section 6. Finally, conclusions are drawn in section 7.

The syntax of the state predicates to be used can be defined by means of constants and operators of sort prop, a subsort of the sort formula, in the module model-checker. Additionally, semantic rules are provided to define the termination behavior of user statements and the symmetry of the code for process 2. 

Furthermore, the concept of an SCC being alive if it is fair or if there is an arc from it to an alive SCC is introduced, with dead SCCs and any arcs entering them being eliminable. Fairness information can be deleted from arcs not within a fair SCC.

A comparison is made between the performance of spin and the maude ltl model checker by specifying a system in promela, then in maude, and finally comparing the running times and memory consumptions for a given model checking problem for the respective specifications. Default settings for spin were used unless stated otherwise. In cases where properties satisfied by the corresponding systems were model checked, no generation of counterexamples was attempted.

On a 1.13 GHz Pentium III machine with 384MB RAM running Red Hat Linux 7.3, both model checkers finished quickly whenever memory was available. Lack of memory was identified as the main bottleneck for scalability in both cases. The memory benchmark refers to the total memory footprint of the program, including the memory occupied by the code.