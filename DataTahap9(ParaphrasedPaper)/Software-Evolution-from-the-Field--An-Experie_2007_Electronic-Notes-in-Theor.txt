In recent years, our active involvement in maintaining the open-source project Squeak, a Smalltalk programming environment, has allowed us to encounter and address the challenge of effecting changes while preserving compatibility within the community. In this article, we present an overview of the current state of affairs within the Squeak community, discuss the challenges faced, outline the implemented improvements, and highlight areas where problems persist, which we propose as potential research topics for the wider academic community.

Our involvement in the development and maintenance of the Squeak project, including our responsibility for the 3.7 and 3.9 official releases and contributions to the 3.6 and 3.8 releases, has presented typical challenges encountered by software developers, such as bloated code, lack of documentation, and conflicting interests in code improvement.

We provide an account of the challenges faced by the Squeak community, the implemented improvements, and our vision for future approaches. Additionally, we identify persisting issues and suggest them as potential areas for future research in the field of software evolution.

We also include a summary of our experiences as developers and researchers involved in maintaining a complex open-source environment alongside a discussion on the dynamics of Squeak's development, considering its open-source nature and the actual changes taking place.

We detail the various projects based on the Squeak distribution, such as Squeakland, SmallLand, Seaside, Croquet, and Tweak, discussing their objectives and concerns within the community.

We recognize the absence of substantial financial support for the Squeak community and discuss the changes in its development and distribution from its initial development by a single group to its growth and geographical dispersion with numerous developers and small teams.

We delve into specific code-level problems facing the Squeak community, including tangled code, dead and prototype code, and discuss the application of software engineering techniques and object-oriented design heuristics in addressing these challenges, along with their limitations and implications.

We advocate for the use of software engineering improvements to facilitate future changes and discuss efforts to modularize the system, conduct refactorings, and improve test coverage.

We report on the success of Squeaksource and Monticello and reflect on the historical absence of provisions for bug-tracking in earlier releases, highlighting the subsequent implementation of a bug tracking system.

We emphasize the need for automatic build tools and better support for modularity in Squeak, and identify them as vital areas for improvement.

Finally, we recognize the challenges of evolving Squeak within a diverse community of developers and stress the need for the development of tools to analyze the Squeak code base and address novel challenges in programming language support for system evolution.

We acknowledge the financial support from the Swiss National Science Foundation and the French ANR for our projects and express our gratitude to the Squeak developers and reviewers for their contributions.