The remainder of the paper is structured as follows: the next section provides a brief introduction to interaction nets. Section 3 presents a motivation for the work through an example. The proposed extensions are detailed in section 4, with compilation schemes discussed in section 5. Section 6 delves into the discussion of implementation issues, while the conclusion is presented in section 7.

This section introduces our framework, referred to as "inp," which extends ordinary interaction rules (orn) to enable rewritings between nested agents. Notably, the framework allows the left-hand side of a rule to contain more than two agents, distinguishing it from orn. The definitions of agents and nets remain consistent with those for ordinary interaction rules.

We then address the implementation issues of inp. Two approaches are considered for implementing inp: one involves translation into orn rules, followed by the use of existing evaluators of interaction nets, while the other entails direct implementation. The focus here is on the second option, demonstrating how the essential tasks of computation within this framework can be accomplished. We aim to illustrate that a direct implementation of inp can be readily achieved, and we outline a straightforward method for doing so.

In terms of computation for nets, Bechet proposed treating computation for nets on interaction rules as abbreviations. Nets are captured as an agent, and the reductions of the agent are realized by the rules corresponding to the computation of the net. To exemplify this method in the context of nested pattern matching, we consider the example function lastelt. One approach involves defining the agent lastelt using other previously defined agents, although finding a suitable combination with these agents is not straightforward. An alternative solution is to introduce abbreviations for list structures.

We have demonstrated the extension of interaction nets to facilitate nested pattern matching without the introduction of auxiliary rules. This extension offers a convenient and more natural means of expressing interaction net programs and is viewed as a positive step toward utilizing interaction nets as a practical programming language.