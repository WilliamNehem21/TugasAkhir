Currently, Java is widely utilized as a programming language in numerous large-scale projects, where the complexity of applications often surpasses the capabilities of manual testing and human inspection to ensure software quality. Even when automated unit tests are employed, they may not cover all pertinent code scenarios, potentially leaving undiscovered bugs. This paper addresses the issue of generating random well-typed programs within the context of Featherweight Java, an established object-oriented calculus, using QuickCheck, a Haskell library for property-based testing.

In recent years, Java has become one of the most favored programming languages, characterized as a general-purpose, concurrent, strongly typed, class-based object-oriented language. With its continuous evolution and the addition of new features in recent releases, such as lambda expressions, method references, and functional interfaces, Java has further solidified its appeal.

The increasing complexity of applications developed in Java has rendered traditional methods of testing, code reviews, and human inspection insufficient for ensuring software quality. This has heightened the demand for tools utilizing static analysis techniques to comprehensively explore application behaviors and ensure the absence of unexpected issues. However, accomplishing this task is challenging due to computational limitations for large problem sizes. One approach to address this challenge involves modeling formal subsets of the problem through abstraction, focusing on specific properties of interest to facilitate understanding and enable the use of automatic tools.

The process presented in Section 3 outlines the generation of random well-typed programs within the context of Featherweight Java. Section 4 presents the results of testing type-safety properties of Featherweight Java with QuickCheck, while Section 5 discusses related studies. The final remarks are provided in Section 6.

Featherweight Java semantics provide a purely functional perspective without side effects. This entails that object operations do not affect attributes in memory, and the language does not include features such as interfaces, overloading, base class method calls, null pointers, base types, abstract methods, statements, access control, and exceptions. Due to the absence of side effects, the evaluation can be formalized using only the Featherweight Java syntax, eliminating the need for auxiliary mechanisms to model the heap.

QuickCheck, an automated testing tool for Haskell, defines a formal specification language that allows users to specify the code under test and verify if specific properties hold across a large number of randomly generated test cases. While the library provides test case generators for Haskell constructors, users are responsible for defining generators for user-defined types. The library offers combinators to aid programmers in this process.

The process of generating random well-typed programs in Featherweight Java involves producing a random number 'n' to represent the generation of 'n' methods for a given class 'c.' Each method is represented by its signature and body, following method typing rules. The signature includes the method name, return type, and formal parameters (types and names). This step is followed by generating a list of random size for the formal parameters, while ensuring exclusive method names for each class. Additionally, a randomly generated expression is required to be a subtype of the generated return type.

Our approach differs from existing projects, such as those focusing on random test generation in the C language, as we have created generators using a formal specification of typing rules and employed property-based testing to verify type-soundness proofs. Additionally, related projects that involved generating random Java programs to test refactoring engines or object-oriented libraries are distinct from our approach, which involves randomly generating complete, well-formed, and well-typed classes and expressions using formal specification of typing rules, while also employing property-based testing.

Other efforts in automatic random test generation, such as methods for generating well-typed expressions and tools for property-based testing in Coq, differ from our work in that their focus is on generating terms automatically according to formal specifications, whereas our work concentrates on a specific type-system of a high-level programming language.

In summary, our work presents a type-directed heuristic for constructing random programs in the context of Featherweight Java, utilizing property-based testing to validate the process. The lightweight approach facilitated by QuickCheck allowed for experimentation with different semantic designs and implementations, as well as easy verification of changes through re-running the test suite. By encoding type soundness properties as Haskell functions, we achieved a clean and concise implementation that not only helped address bugs but also enhanced the understanding of the semantic properties presented.