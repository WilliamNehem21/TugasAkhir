The MATLAB Simulink tool is commonly utilized for creating and analyzing control law diagrams. Many efforts have been made to improve analysis capabilities, and previous work has focused on verifying the correctness of diagram implementations. In this paper, we utilize Circus, a refinement language that combines Z and CSP, to capture both functional and behavioral aspects of diagrams and programs. We have defined a Circus semantics for an extensive subset of discrete-time diagrams and have extended it to cover Stateflow blocks, which are defined by diagrams written in a variant of the Statechart notation.

We aim to use refinement to verify implementations of Stateflow blocks. Our work builds on previous research that provided CSP semantics for the Statechart notation and used Circus to give semantics to UMLRT, a UML profile tailored for concurrent applications. Our approach covers Stateflow diagrams, which are a variant of Statecharts and are part of a more comprehensive system description including class and structure diagrams.

The Stateflow notation is complex, with states having outer and inner transitions, and junctions used to break transitions into segments. In this paper, we propose a Circus semantics that covers these challenging features. We provide an overview of Circus, explain the main features of Stateflow diagrams, discuss the structure of Circus models of Stateflow diagrams, and consider the formalization of the Circus semantics as algebraic translation rules.

Our proposed Circus semantics addresses the intricate features of control law diagrams, but there are still limitations to our model that need further study and validation. Our future work aims to automate the model construction to enable validation with larger case studies and extends the refinement-based verification technique to cover implementations of Stateflow blocks.