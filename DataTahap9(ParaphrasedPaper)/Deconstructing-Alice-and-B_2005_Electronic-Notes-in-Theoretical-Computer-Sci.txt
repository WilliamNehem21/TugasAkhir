The method we propose is general and not tied to specific formalisms used for modeling protocols or intruder models. Thus, our findings can be applied to provide a formal foundation for using Alice & Bob notation in security protocol analysis tools, even for protocols that rely on message forwarding and conditional abortion. Moreover, our work could form the basis for generating protocol implementations from Alice & Bob-style descriptions that explicitly carry out necessary executability and abortion tests.

The storage of information is essential. Upon receiving n1, party B should hash it and terminate the protocol if it does not match the previously stored opaque submessage, without executing the final sending action. This issue is typical for protocols involving commitments to values by principals.

It is straightforward to demonstrate that if encryption using composed messages as keys is not allowed, i.e., if only atomic keys are considered, then close(s) = synth(analyz(s)). We will also identify another case where this holds true. However, in general, synth(analyz(s)) âŠ‚ close(s), indicating proper inclusion. For instance, if s contains just the message...

The construction of sets di completely disregards the messages that x sends during his run. This is justified by definition 3.3, as x does not gain any information from sending a message. However, x must be able to construct the messages he sends using the available data. This assumption, often implicit in protocol analysis approaches, can be formalized in the present setting.

It is important to note that atomic messages are always transparent by definition. Thus, if s is a set of atomic messages, then sub(s) = s and does not contain opaque elements. Therefore, proposition 3.10 implies that sub(close(s)) also does not contain opaque elements. Furthermore, proposition 3.8 guarantees that close(s) is transparent.

In this scenario, only message forwarding may be necessary. The specific meaning of forwarding can be clarified using propositions 3.9, 3.10, and 3.13, as explained in the proof of proposition 3.17: if a sent message contains an opaque submessage m, then m must also occur and be opaque in some previously received message.