This paper outlines the process of translating a subset of Java source code to Java bytecode. The authors demonstrate the derivation of core functions from a simplified formalization of Java in section 3.2. The paper discusses the transformation of abstract syntax trees, referred to as pre-programs, into genuine programs. It also emphasizes the use of attributed syntax trees and the establishment of a connection to pre-terms.

The paper introduces mixfix syntax for certain constructs and discusses the inclusion of type annotations within expressions. It further explores the structuring of terms and pre-terms at the source code and bytecode levels. Typing judgments are utilized to specify the type of a term under a given environment, serving as type checking rules. Additionally, the paper aims to infer type annotations for pre-terms, providing combined type checking and type inference rules.

The compiler described in the paper does not focus on optimizing the generated code. Furthermore, it discusses the extension of compilation to encompass more complex structures such as methods, classes, and entire programs. The paper notes that while Java source and bytecode are similar, minimal data refinement is needed. It mentions the structure of states at the Java source level and on the JVM level for the purpose of compiler verification.

The paper also discusses clause pnewc and its impact on determining the value of class constructors. It briefly compares its approach to an alternative method that does not use an explicit model of program semantics.

The paper acknowledges that its coverage of the Java language is not exhaustive and identifies areas such as missing operations at both the source and bytecode levels, and the need for a more systematic treatment of class initialization. Additionally, it raises questions regarding the integration of libraries and the generation of error messages for incorrect programs.

The contributions to the formalization discussed in the paper were developed by Gerwin Klein and David von Oheimb, with Tao Yu implementing the parser. The authors acknowledge discussions with Tobias Nipkow, Norbert Schirmer, and Martin Wildmoser that contributed to the work.