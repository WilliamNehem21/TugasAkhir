The third question can be typed because an output at location a occurs twice, while a replicated input at a occurs only once. It should be noted that the replication of x preserves linearity after each invocation at a. On the other hand, b.a|b.c is untypable because b is associated with two replicators.

We are considering the traffic light model described in [citation]. Let's suppose that "a" represents a driver and inred, inyell, and ingreen represent the colors of the traffic light. The process ainred(y) signifies the traffic light signaling to the driver that it is red, while also communicating the name "y" of the crossing. The driver's behavior at the crossing can involve braking, staying still, or driving (inbrake, instill, indrive).

The structures ai.ei, where the order relation is the disjoint union of the orders, the labeling function is the disjoint union of the labeling functions, and the conflict is the disjoint union of the conflicts extended by putting in conflict every two events in two different copies. This is a generalization of prefixing, where an initial reactive cell is added instead of an initial event.

Fully probabilistic event structures do not contain reactive cells, particularly in light of corollary 5.3, which applies to closed processes. More generally, it applies to processes whose free names do not include linear inputs. To illustrate the confluence theorem, consider a process p such that p d a.

A simpler calculus, without renormalization, is presented in [citation]. This version is very similar to ours, in that all choices are local; in fact, the protocol example presented in [citation] (via an encoding into our calculus) is linearly typable. We believe that a typing system similar to ours could be applied to the calculus in [citation], resulting in the proof of the same results as in this paper, and identifying a good class of probabilistic name-passing behaviors.