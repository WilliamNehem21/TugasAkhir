Imperative programming languages commonly utilize for and while loops to repeatedly execute code until a certain condition is satisfied, or if the condition is never met, the loop continues indefinitely. These loops are often accompanied by break and continue statements.

Programmers frequently employ nested loops in imperative languages, along with their corresponding break and continue statements, which can be labeled. While these statements are not strictly necessary for programming, code that uses break or continue can be restructured to function without these statements, although this may reduce readability. Both labeled and unlabeled forms of break and continue are typically available.

Following the occurrence of continue inner and the two instances of return inl, j 1, the control redirects to the start of the inner loop. This section is visually highlighted by a solid purple box. Similarly, the assignment to prod on the left takes place before the start of the inner loop and is highlighted in purple.

Upon encountering both instances of continue outer, the control flows back to the beginning of the outer loop. Additionally, after both occurrences of return inr inl, the control resumes at the start of the outer iteration. These sections are enclosed by a thick dashed red box and the assignment to sum on the left is highlighted in red as it occurs before the commencement of the outer loop.

The return inl statement is utilized to resume both the inner and outer iterations. Consequently, a reader of the program must carefully determine the innermost enclosing iteration to determine where control resumes. In contrast, in the Java program, there is no ambiguity about where control resumes after continue outer.

Similar to sum-based iteration, labeled iteration employs set-based semantics, but with a more intricate type system. A more comprehensive explanation of labeled iteration is provided in section 3. The term "raise" was chosen due to its resemblance to raising an exception, as discussed in section 4.