Presently, formalisms are primarily based on diagrams or graphs (such as UML diagram types for software engineering or function block diagrams for designing programmable controllers). In our approach, we utilize graph transformation to convert various formalisms into the semantic formalism and to simulate the transformed model. The different formalisms are represented as visual languages through meta-modeling.

Several tool-based approaches support the meta-model based definition of visual languages and the graph-grammar based simulation of visual models, such as Diagen or Genged. However, none of them implements parallel graph transformation. Another related approach is MetaEnv, an environment for defining the semantics for visual models. In MetaEnv, a model is translated from an external case tool to the semantic domain of high-level timed Petri nets using graph grammars. The semantic model can be simulated and translated into C code. In contrast to the Atom3 approach, the semantic model is fixed in MetaEnv, while it is variable in Atom3.

Section 2 discusses the concepts of parallel graph transformation. In section 3, a simulator for timed transition Petri nets is presented as a parallel graph transformation system. Section 4 outlines the extensions of Atom3 to provide tool support for the definition and application of amalgamated rules.

Parallel graph transformation models parallel state transition, where a state is described by a graph that can be changed by multiple actions executed in parallel. Since graph transformation is rule-based without restrictive execution prescription, it allows for massively parallel execution. The synchronization of parallel rule applications is described by common subrules. This paper reviews the main concepts of parallel graph transformation and demonstrates how the firing of transitions in arbitrary place-transition nets (P/T nets) can be modeled in a concise manner using parallel graph grammars, providing the basis for the simulation of timed-transition Petri nets.

Graph grammars represent objects as nodes and their interrelations as edges. Actions are typically described by graph rules and simulated by graph transformation, which is the application of rules to a given graph, resulting in a new graph modeling the changed system state.

Subrules with negative application conditions (NACs) can be embedded only into elementary rules containing at least the same NACs as the subrule. Additionally, each elementary rule may have other NACs than the subrule. An interaction scheme can be seen as a bipartite graph (IS-graph) with nodes labeled by elementary rules and subrules, and edges labeled by subrule embeddings.

In addition to specifying how elementary rules should be synchronized, decisions must be made about where and how often a set of elementary rules should be applied. The basic way to synchronize complex parallel operations is to allow a rule to be applied at all different matches in a given graph, expressing massively parallel execution of actions. However, for the purpose of this paper, the covering of all different elementary matches overlapping in the match of their common subrule is restricted. For other, more complex covering constructions, see [reference to another source]. For the restricted covering in this paper, the IS-graph is always connected.

Rule amalgamation can also be seen as a bipartite graph (GR) with nodes representing subrules and instances of elementary rules, and edges representing subrule embeddings. Each valid rule amalgamation represented by GR is typed over the IS-graph; for example, there is a homomorphic mapping from GR into the IS-graph.

The paper also addresses specific scenarios, such as enabling and disabling transitions, as well as conflict situations. This includes the instantiation of the enable post rule for each output place of the transition being checked, and the modeling of the erasure of scheduled possible events of disabled transitions in the case of a conflict situation.

This paper has demonstrated the value of parallel graph grammars for modeling and simulation, expanding the capabilities of regular graph grammars by allowing parallel execution of synchronized elementary rules. This is beneficial for specifying simulators for formalisms in which parallel actions occur, such as Petri nets and other discrete event simulation formalisms. Parallel graph transformation is also useful for transforming models between different formalisms, simplifying the transformation process by allowing the embedding of newly created elements in variable contexts. Furthermore, parallel graph transformation has been implemented in the Atom3 tool.

At the group in Madrid, parallel and distributed graph grammars are currently being applied to model simulation protocols in parallel discrete event systems. In the future, the approach will be applied to other timed transition Petri net semantics, Petri net variants, and discrete event formalisms. Additionally, the implementation of other covering constructions is under consideration.