The sysml language, as a UML profile, serves as a means for documenting and graphically specifying all aspects of a system, encompassing hardware and/or software blocks. It has been introduced by the Object Management Group (OMG) to establish a general-purpose modeling language for systems engineering. This language has gained widespread popularity in both industry and academia due to its ability to harmonize the efforts of various stakeholders involved in system development, ensuring design consistency and quality. Additionally, sysml is well-suited for modeling embedded systems.

This paper centers on the integration of components documented using sysml diagrams in the initial phase. In the subsequent phase, it introduces a formal specification and verification approach for validating the composition of components based on the sysml models from the initial phase. This approach leverages and customizes the interface automata formalism to verify component composition. The interface automata-based approach, originally proposed by L. Alfaro and T. Henzinger, involves specifying component interfaces using automata labeled with input, output, and internal actions, which describe component information at the signature and protocol levels. Furthermore, the paper introduces a verification approach to identify incompatibilities at the signature and protocol levels between two component interfaces, based on the composition of interfaces achieved through synchronizing shared actions.

As an illustration, the paper considers a component-based system called Cycab car (in). The Cycab car is an innovative electric transportation vehicle primarily designed for autonomous transportation services, allowing users to travel between pre-installed stations. It is entirely computer-controlled and capable of operating in various modes. The objective of the Cycab is to enable clients to use the vehicle to move between different stations. To exemplify this concept, the paper outlines system constraints, presenting the Cycab and its environment as an abstract system composed of two composite components: the vehicle and the station. The vehicle is further composed of primitive components such as the vehicle core, starter, and emergency halt (linked to an emergency halt button). Similarly, the station comprises primitive components including a sensor and a computing unit.

In the previous section, the paper proposed to define the architecture of the component-based system using BDD and IBD sysml diagrams. BDD diagrams illustrate the overall system structure and the relationships between composite blocks (composite components) and their sub-blocks (sub-components). Meanwhile, IBD diagrams depict the composition links between blocks. This section introduces a formal specification of the architecture as a graph, with nodes representing the system blocks and edges representing both actions pertaining to the specification and the verification of component assembly. The paper presents a definition of interface automata reinforced by a function specifying energy consumption. It introduces a form of weighted automata where transitions are annotated with costs corresponding to the energy consumption of actions.