Some fundamental programming elements, such as conditional statements, are present in many programming languages and are typically included without modification in the development of new languages. However, when creating a semantic description of a language, it is often not feasible to reuse portions of prior descriptions without modifications.

Doh and Mosses proposed a flatter modular structure for action semantic descriptions (ASDs), where each language construct is described in a separate module. This new structure allows for a complete language description by simply listing the names of the modules for the included constructs, and fully supports explicit reuse of semantic descriptions. Doh and Mosses formulated these modules in the ASF+SDF meta-environment and utilized it for verification.

The approach by Doh and Mosses was viable, but the direct use of ASF+SDF came with a significant notational overhead. Therefore, in this paper, a new formalism known as Action Semantic Description Formalism (ASDF) is introduced, specifically designed for providing reusable descriptions of individual language constructs. Furthermore, the Action Environment, a new environment supporting the use and validation of ASDF descriptions, was developed and implemented on top of the ASF+SDF meta-environment.

The ASDF-specific components were integrated into the ASF+SDF meta-environment to transform it into the Action Environment, with plans for the addition of further components such as a typechecker, interpreter, and compiler for ASDF. The ASDF modules describe the action semantics of individual language constructs and are geared towards reuse and modularity.

The development of ASF+SDF specifications is facilitated by an interactive programming environment called the ASF+SDF meta-environment, which offers syntax-directed editing facilities and well-formedness checking of modules, among other features. However, it was found that using ASF+SDF for writing small modules describing single language constructs was not optimal, leading to the development of ASDF.

The authors plan to integrate support for working simultaneously with ASF+SDF and ASDF modules in the Action Environment to allow full language descriptions. Moreover, integration of different tools into the environment such as an action evaluator and compiler generator is also planned, with the aim of providing a comprehensive environment for developing semantic descriptions and documenting the design of programming languages.

The kernel of the meta-environment is language-independent and is based on a programmable software bus, the toolbus, which manages communication between the components. Adding new components and functionality involves implementation effort but can be facilitated by the powerful button language provided by the kernel meta-environment.

The Abaco system, which is an AS tool for programming language designers, shares similarities with the Action Environment but offers more flexibility in adding external components due to the underlying architecture's openness.

The ASDF formalism and the Action Environment provide a new approach for creating reusable semantic descriptions of individual language constructs and an environment to support their use. Initial case studies have been conducted using ASDF and the Action Environment for the core ML language constructs.