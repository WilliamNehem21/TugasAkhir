This academic paper introduces a program logic for explicit time resource bounds for programs written in the HAL language. The logic is designed to guarantee that programs verified within it will satisfy all invariants specified in assert statements and will be verified against an explicit bound on the number of function calls they make before safely halting. The paper suggests that this type of logic can be applied to real-time systems where specific resource bounds are of interest. The authors highlight that they are not aware of any other logic of resource bounds for languages containing function pointers or the kind of circularity found in HAL.

The paper further explains that the proposed logic is capable of handling programs that use function pointers extensively, including mutually recursive function groups and higher-order functions. Each recursive group is verified as a whole, allowing for compositional proofs of whole-program termination. Higher-order functions are verified independently of their context and can be applied to themselves without difficulty. The authors also present a semantic model demonstrating how step indexing can be effectively applied to logics of resource bounds in a concise manner.

The paper acknowledges some limitations of the proposed logic, noting that it may be seen as simultaneously too weak and too strong. It may be too weak in terms of not requiring tight upper bounds and making no claims about lower bounds. On the other hand, it may be too strong in placing a burden on users to construct explicit termination measures. The paper suggests that it would be beneficial if well-founded relations could be provided for each function, hiding the explicit bounds and termination measures under existentials.

Additionally, the paper discusses the use of semantic assertions in program analysis settings and introduces a simple language with embedded semantic assertions and function pointers, along with a logic of total correctness of time resource bounds. The authors prove the soundness of their logic with respect to an operational semantics using step-indexing, highlighting the usefulness of step-indexed models for modeling resource logics.