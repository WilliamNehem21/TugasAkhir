In section 3 of this paper, we demonstrate an extension of finite-state processes in a comprehensive calculus that encompasses both static operators and recursion. Specifically, we focus on processes where static operators cannot be replicated by recursion. This is achieved by explicitly expressing hiding mechanisms using an hiding operator, denoted as p/l (similar to the hiding mechanism present in the ccs parallel operator). In addition, we introduce a new axiom for the exchange of hiding and recursion, along with a new normal-form derivation procedure that combines unguardedness removal with the elimination of static operators in an inductive manner. This work was carried out in collaboration with Jos Beeten.

With regard to normal form derivability, we show that terms falling within the syntactical characterization mentioned above can be transformed into normal form by combining the elimination of unguarded recursion in bccsrec (see section 2.1.3) with the elimination of static operators in ccs (see section 2.2.2). This transformation involves a structural bottom-up process. Specifically, in the case of recursion or hiding operators, unguarded recursions are removed using standard (wung) and (fung) axioms, along with the new axiom (rechid) for hiding, and other standard elimination axioms for hiding. For hiding, we first propagate the hiding operator structurally from top-down to leaves, and then bottom-up to the top-level to introduce new taus in the previous normal form resulting from hiding, and subsequently remove generated unguarded recursion.

We achieve compositional structural operational semantics by employing our concept of levelwise reindexing of actions. To maintain compositionality, it is necessary to determine the computations of p s q from the computations of p and q, for example in the case of the parallel composition operator. This is accomplished by parameterizing each parallel operator with a mapping m in state terms.

Completeness over finite-state terms falling within the syntactical characterization presented in section 3 is obtained as usual, in two steps, also considering the semantic action refinement operator as a static operator.

Furthermore, terms within the syntactical characterization mentioned above are demonstrated to be transformable into normal form using the same procedure as that described in the previous section 3.2. This involves an inductive structural bottom-up transformation of terms with reindexing of actions at every level as an effect of the axioms for the elimination of the parallel operator.

Differing from previous approaches, we consider the CSP parallel operator, which allows us to express hiding and parallel operations separately. This is essential, for instance, for constructing a complete axiomatization via the (rechid) axiom as described in section 3.

It is important to note that in the context of real-time, the axiomatization, being sound with respect to real-time observational congruence, preserves the time determinism property, ensuring that the resulting basic terms at the end of the transformation are indeed time deterministic. In the case of Markovian stochastic time, normal forms in the two-level syntactical form of section 6.3 are obtained through an unfolding and folding procedure similar to that employed in the transformation described in section 3.2 for eliminating static operators.