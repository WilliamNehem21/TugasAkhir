Typically, software specifications are represented using symbolic notations or, at best, semi-formal diagrammatic notations such as those found in UML. Formal reasoning about specifications is primarily carried out using symbolic notations. However, many individuals find symbolic notations difficult to comprehend and utilize. Additionally, the inaccessibility of syntax available to users can hinder the construction, conceptualization, and refinement of specifications. Therefore, creating a more accessible notation specifically designed for formal specification and reasoning could be beneficial to a wide user community, with diagrammatic notations being a potential alternative to symbolic notations.

With regard to the diagrammatic notations used, overlapping curves indicate the disjointness of sets, while a curve contained within another denotes a subset relationship. Labeled rectangles represent types, and unlabeled spiders signify the existence of elements within the represented sets. In the context of the presented diagrams, labeled spiders act as free variables, and arrows signify binary relations between elements. The diagrams are used to visually represent set intersection, disjointness, and containment, with different properties that align closely with set-theoretic semantics.

Additional benefits of diagrammatic notations are evident in the specific formal specification developed, such as the ability to visually represent set properties and the economy of syntax. Diagrammatic specifications can visually convey information that would need to be inferred from symbolic notations, and their advantages in various reasoning contexts have been discussed by researchers.

While significant tool support exists for symbolic notations, the visualizations available are not as advanced as those possible with the proposed diagrammatic notations. It is feasible to provide tool support for the diagrammatic framework, including functionalities such as automated generation and layout of diagrammatic notations, as demonstrated by previous research on euler and spider diagrams. Overall, there is an opportunity to further develop functional tools for diagrammatic specification given the existing foundation in this area.