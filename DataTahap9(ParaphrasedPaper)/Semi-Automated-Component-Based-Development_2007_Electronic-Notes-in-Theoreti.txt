Several formal methods for component-based software development have been suggested, utilizing formal specifications for retrieval. While these approaches have been effective in achieving high recall and precision in component searches, they have traditionally focused on single adaptation steps. Recognizing the limitations of this single-step approach, particularly in addressing user-specific needs, this paper proposes the use of search tactics to streamline the process of component adaptation.

The search tactics introduced in this paper aim to automate the combination of multiple matching and adaptation steps into a single step, similar to the use of tactics in interactive theorem provers. By automating common component adaptation steps, these tactics enable software engineers to concentrate on more critical design decisions. The authors outline a series of search tactics designed to semi-automate component adaptation and retrieval, with the goal of applicability to various formal-based matching and adaptation techniques. The paper begins by presenting a generic model for matching and adapting formally specified components, capturing the matching and adaptation techniques at both the individual unit and modular component levels.

The authors also introduce a framework for matching and adapting formally specified components, which builds upon existing approaches to specification matching. The framework, modeled using the Z specification language, allows for the generalization of matching components with regards to adaptations. This framework separates individual units from modular components, enabling focus on matching and adaptation techniques specific to each level of granularity. Matching methods for individual units and modules are discussed, with examples of basic adaptations such as identifier renaming and higher-order variable instantiation.

Furthermore, the paper introduces the concept of search tactics and tacticals to combine multiple matching steps into a single complex search step. These tactics and tacticals are designed to facilitate the integration of multiple individual search steps, akin to the way proof tactics are used in interactive theorem provers to automate mundane steps. The paper also discusses the construction of complex search tactics using tacticals and highlights the implications of these tactics in implementing breadth-first searching strategies.