The focus of our investigation lies in the examination of the pure pattern calculus (PPC) and its innovative contributions to the field of pattern calculi, specifically the concepts of path polymorphism and pattern polymorphism. Path polymorphism enables the definition of functions that uniformly traverse arbitrary data structures, while pattern polymorphism allows patterns to be considered as parameters dynamically generated at runtime. The development of such a calculus presents numerous technical challenges to ensure well-behaved operational semantics within an untyped framework. A recent development includes the introduction of a static type system for a restricted version of PPC called the Calculus of Applicative Patterns (CAP), which is capable of capturing the path polymorphic aspect of PPC. Furthermore, type-checking algorithms for this formalism have been explored as an initial step towards implementing a prototype for a typed functional programming language incorporating these features. Continuing along this line of investigation, efforts have also been dedicated to defining normalization strategies for PPC. These results have been extended to CAP through a simple embedding where the static typing discipline provides additional assurances regarding the well-behaved semantics of terms.

Additionally, the correspondence between higher-order rewrite systems (HRS) and explicit substitution calculus (ERS) has been established. The composition of such translations may yield a higher-order system akin to De Bruijn indices, capturing the features of PPC. However, this approach represents a somewhat indirect solution, necessitating further resolution of technical intricacies.

We introduce proper translations from PPC to PPCDB and vice versa. These functions preserve the matching operation and operational semantics of both calculi, while also serving as each other's inverse. This results in a crucial strong bisimulation between the two calculi, enabling the importation of many known properties of PPC into PPCDB, such as confluence and the existence of normalization strategies.
 
Furthermore, this section introduces the novel pure pattern calculus with De Bruijn indices (PPCDB), which extends De Bruijn's ideas to a framework where a binder may capture more than one symbol. In the case of PPC, this includes two types of captured symbols: variables and matchables, both of which are distinguished within PPCDB through the use of bidimensional indices.

We proceed by simulating PPC in PPCDB, ensuring the preservation of the matching operation and operational semantics. Our findings guarantee that every redex in PPC maps onto a redex in PPCDB, thus facilitating the porting of significant properties from PPC to PPCDB.

Finally, we discuss the implications of our strong bisimulation result and its potential impact on the transfer of important properties from PPC to PPCDB. This paper is based on the work presented in "The Dynamic Pattern Calculus as a Higher-Order Pattern Rewriting System" by van Oostrom and van Raamsdonk (2014).