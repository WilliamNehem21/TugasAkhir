This paper describes the integration of the dynamic cut optimization technique within the functional-logic system T oy. The implementation automatically identifies deterministic functions at compile time and incorporates code to detect, at run-time, the computations that can be pruned. This leads to significantly improved performance when executing deterministic functions that include either or-branches in their definitional trees or extra variables in their conditions, with minimal overhead in other computations. The paper also presents the correctness of the criterion used for identifying deterministic functions with respect to the semantic calculus CRWL.

Non-determinism is a key feature of logic programming shared by functional-logic programming, enabling elegant algorithm definitions and increasing program expressiveness. However, this feature has an associated drawback, namely inefficient computations, attributed to two main reasons.

The paper is structured as follows: the subsequent section introduces the non-ambiguity criterion for identifying deterministic functions and the corresponding correctness theorem. Section 3 illustrates, through examples, the cases where the optimization is applied. Section 4 details the steps taken during the implementation of the dynamic cut in T oy, and Section 5 concludes by presenting some final remarks.

The non-ambiguity condition characterizes a set of functions f as deterministic. The implementation begins with an empty set f of non-ambiguous functions, and at each step adds to f the functions that satisfy the definition and only depend on functions already in f. This process continues until a fix-point for f is reached.

Upon examining the code, it is easy to identify the source of redundant computation: the condition of function part includes two existential variables u and v. With the dynamic cut optimization activated in T oy, the system automatically detects that there are no further possible solutions after the first one, reducing the time taken from 40 seconds to 0. Experimental results support the effectiveness of this optimization.

Function calls in the first-order T oy program rules are replaced by Prolog terms in the form of suspensions. The variable s is a flag that is bound to a concrete value, such as hnf, once the suspension is evaluated. The result of the evaluation is stored in r, only if s==hnf.

After the or-branch produces a result, the test for the dynamic cut is performed using the checkvarlist predicate. This test checks if any of the variables in the list produced by varlist has been bound. If so, the cut is avoided; otherwise, the dynamic cut is safely performed using an ordinary Prolog cut.

The paper presents the implementation of the dynamic cut optimization in the functional-logic system T oy, which significantly improves computational efficiency and allows for the use of elegant and expressive function definitions that were previously disregarded due to their inefficiency.

The definitional tree associated with each program function is examined, and or nodes occurring in deterministic functions are labeled as or-cut nodes. Similarly, try nodes corresponding to program rules including existential variables in the conditions are labeled as try-cut nodes.