Bunched logics are interpreted as true or false relative to resources, with additives having their standard propositional meanings and multiplicatives representing resource composition properties. In the field of computer science, the resource-based interpretations of bunched logic have been effectively utilized to create logics for program analysis. Notably, separation logic, which is grounded in an understanding of resources as segments of heap memory, has given rise to numerous program analysis applications that identify and analyze the structure of heap memory during program execution (recent examples include [7,8,10]). Bunched logic has also been employed in various ways to address other computational problems, such as polymorphic abstraction, tree update, and typed reference update and disposal.