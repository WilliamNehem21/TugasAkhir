The use of term rewriting has been demonstrated to be beneficial for both programming and proving purposes. In this study, we propose a formalism based on the rewriting calculus with explicit substitutions (-calculus) for analyzing and debugging rule-based programs. This formalism also enables the construction of proof terms for rewriting derivations. This enables the export of term rewriting proofs to other systems by translating them into corresponding syntaxes, thereby allowing for certification of these proofs using a proof checker. Additionally, our method supports both syntactic rewriting and rewriting modulo a set of axioms, such as associativity-commutativity.

In proof assistants, formal proofs consist of deduction steps performed by users, often with the assistance of tactics. These steps need to be memorized in order to check and communicate proofs with other systems. Some proof assistants store the proof terms of all deduction steps explicitly, while others have made attempts to incorporate this feature. Consequently, proof assistants must trust programming environments and consider the computations they perform as axioms in their proofs, which is not entirely reliable as the computations are not checked. Therefore, it is important for rule-based programs to return the proof terms of their computations, particularly when correctness is crucial.

This paper presents a representation of the proof term of rewriting derivation based on -calculus. We have generated the proof term of syntactic rewriting and AC rewriting in Elan, and translated this proof term into Coq syntax, which has been proven to be sound. Furthermore, we have implemented this translation in Elan, resulting in the corresponding proof term for Coq proof assistant. The proof term is then formally checked by Coq to ensure correctness. This work allows for the certification of term rewriting proofs in Elan and facilitates the use of term rewriting in Coq using Elan.

Additionally, we introduce lemma 4.5 (rewriting derivation), which states that if 1, ..., n are respectively proof terms of the derivations t1! t2, ..., tn! tn+1, then x![n](:::[1](x):::) is a proof term of the n-steps derivation t1!:::!tn+1. The proof of this lemma simply involves applying the tactic "rewrite x=y" on t. Once proved, this lemma can be used as a new constant for building Coq proof terms.

Furthermore, we implement a tracing mechanism for syntactic rewriting and AC rewriting in Elan and transform the trace into a proof term to reduce its size. From this normalized proof term, a set of lemmas and their proofs in Coq is generated via translation, and these lemmas are automatically checked in Coq. The technical details of this process such as the rules and operations used in Elan are described in the paper.