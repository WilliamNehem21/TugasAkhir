The creation of asynchronous logic circuits has been a topic of interest for a long time, dating back to the early days of computing with Huffman's research. While asynchronous hardware offers significant advantages over synchronous hardware, such as improved modularity, lower power consumption, reduced electromagnetic interference, and faster operation, its widespread adoption has been limited due to various challenges. One of the main difficulties in designing asynchronous circuits lies in effectively managing delays within the circuit and preventing race conditions. Additionally, ensuring correct timing alone is insufficient to guarantee proper functioning, as issues related to switching thresholds also come into play. Despite these challenges, an increasing number of organizations are incorporating asynchronous components into their designs, with some processors, such as Illiac, the Caltech asynchronous microprocessor, and the ACT11, being built without global clocks.

In contrast to verification through temporal logic or timeseries simulation, the approach presented in the paper emphasizes the significance of the topological structure of a logic circuit in determining its behavior. Although related approaches have been explored previously, the analysis of electrical circuit topologies is not a new concept. Algebraic topology, for instance, demonstrates that typical electrical circuit laws result in solutions for voltages and currents.

To streamline the design process for asynchronous circuits, it is desirable to bridge the gap between static logic state computation and event-level simulation. Ideally, such a technique would offer a balance between the level of detail and computational burden associated with exhaustive simulation, while providing coarse semantic properties unattainable by static logic computation. The paper proposes a method to encode slightly more information than the netlist and logic values on the wires.

By transforming logic values from binary values into an abstract vector space spanned by logic 0 and logic 1, new insights can be extracted from the sheaf, making computations more straightforward using linear algebra. This abstract method corresponds to the use of one-hot signaling, which is employed for error detection in existing asynchronous interfaces. Mathematically, this encoding provides the resulting switching sheaf with enough flexibility to describe global logic states that are a combination of two transitional states, capturing undefined signals and signal collisions. By examining the cohomology of switching sheaves, specific behaviors can be identified in addition to the static logic states. The main finding is that the first cohomology group of switching sheaves is generated by all the feedback loops that have the potential to latch or cause glitches. Conversely, combinational logic circuits in which each input is used exactly once and cannot glitch have trivial first cohomology, indicating that the first cohomology group serves as an indicator of truly asynchronous behavior.

The paper structurally organizes the content as follows: Section 2 introduces basic definitions and key findings from sheaf theory, Section 3 describes the encoding of a logic circuit as a switching sheaf, and Section 4 demonstrates how the cohomology group of a switching sheaf captures logic states stemming from sustained feedback. Three examples of switching sheaves and the computation of their cohomology are presented in Section 5, culminating in a demonstration that the cohomology of a switching sheaf carries more information than the list of logic states. Finally, Section 6 discusses the results.

A sheaf is a mathematical tool used to store local information over a domain, assigning an algebraic object, such as a vector space, to each open set, subject to certain compatibility conditions. Of particular interest is the relationship between the global information, applicable over the entire graph, and the topology of the graph, captured by the cohomology of the sheaf.

The paper outlines a process to associate a sheaf structure to a directed graph that encodes a logic circuit, where each vertex represents a logic gate and each edge corresponds to a 1-bit signal connecting the input of one gate to the output of another. The approach enables computational problem-solving using linear algebra, potentially leading to gains in asymptotic computational complexity.

The paper presents Proposition 3.1, demonstrating that a switching sheaf over a logic circuit can be associated with elements of h0(x; s) and describes the interpretation of the cohomology of switching sheaves using three illustrative examples: combinational circuits with and without shared inputs and an RS flip-flop. These examples indicate that h0 of a switching sheaf contains at least as much information as the set of qls, while h1 captures information about the presence of feedback or race conditions.

Furthermore, the paper discusses the cohomology of switching sheaves in the context of a connected, directed tree, concluding that h1(x; s) is trivial in situations where each external input is used at most once in the production of each external output. Explicit examples are provided to illustrate this concept further. The paper also offers an analysis of a switching sheaf structure constructed over a graph with one (undirected) loop, exemplifying different types of time-sensitive behavior, such as glitches and latching, through a classic R-S flip-flop circuit.