This academic paper discusses the use of Answer Set Programming (ASP) as an effective tool for solving search problems without requiring the programming of specific algorithms. Instead, a programmer can specify the search space domain and problem-specific properties, allowing an ASP solver to propose solutions called answer sets. The paper highlights the maturity and robustness of ASP, with advanced language constructs and high-performance solvers. It also introduces the use of the "clasp" solver, which has demonstrated competitiveness and versatility in various solver contests.

The paper explores best practices for designing and developing ASP programs from a software engineering perspective, with a specific focus on the implementation of parity constraints and the "xorro" system. It discusses the use of ASP to define properties for a search and demonstrates the practical implementation of ASP programs using these properties. Additionally, the paper presents experimental evaluations of different approaches for integrating parity constraints into ASP solving, demonstrating the impact on solving performance.

The paper introduces the object-oriented approach to ASP, referred to as "ooasp," which allows the analysis of object-oriented software models using ASP. It also discusses the potential of integrating the "xorro" system to handle parity constraints in ASP solving, showcasing its compatibility with advanced interfaces and solving techniques.

Furthermore, the paper discusses a methodology for constructing ASP programs through defined properties, proposing the implementation of an interactive software tool that incorporates transformation modules to visualize various forms of constructed programs. It also emphasizes the importance of iterative software engineering methodologies to engage users in the development process.

To illustrate the methodology, the paper presents a detailed example of constructing ASP programs using properties and discusses the implications of the approach for yielding answer sets. The paper concludes by highlighting the significance of the proposed methodology in saving time, money, and resources from a software engineering perspective, aligning with iterative software engineering practices.