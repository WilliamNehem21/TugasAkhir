Reverse engineering involves comprehending an existing software system and documenting that comprehension in a specified format. The nature of the reverse engineering artifacts varies depending on the purpose, such as problem diagnosis, impact analysis, functional enhancements, or migrating to newer technologies or designs. The current practice relies on utilizing pre-cast tools that extract predefined information with minimal input from the analyst. This paper proposes a specification-based approach, enabling analysts to specify and control the content and abstraction level of the reverse engineering artifacts while allowing user interaction during extraction.

While several frameworks are based on the extract-abstract-view principle, most of them facilitate querying over program sources and their structural properties but do not support querying of semantic properties. Our approach distinguishes itself by providing mechanisms to define abstractions, query on semantic program properties, and display the results in different forms suitable for the intended purpose. The subject programs are represented as models, providing an inherent level of abstraction and making the framework language-independent. In addition, the framework is based on a proven flow-analysis framework for procedural languages, namely darpan. The proposed specifications enable mapping between abstraction definition and pre-defined display types, thereby allowing the abstractions to be viewed using specified displays.

The framework views the source programs as models, thus raising the level of abstraction of the input. It treats core program analysis as a process of computing predefined program properties from program models. These properties, such as control-flow graphs and dataflow information, can also be viewed as abstractions. The framework makes program properties available as primitives and computes program properties like call graphs, def-use chains, alias information, and copy constants using a data-flow analyzer generated using darpan. Users can specify transformation of the source programs to desired target programs, based on analysis abstractions extracted earlier, and the framework is designed to be interpretive, allowing analysts to build reverse engineering tools quickly and explore the changed behavior of the tools.

The framework is currently in a prototype stage, and it is being used to define entity-relationship (ER) model extraction from COBOL programs. Furthermore, it is proposed to use this framework for data-flow diagram (DFD) model extraction, both of which are geared towards system documentation initiatives. The paper describes the steps involved in defining and implementing a reverse engineering tool using the framework, emphasizing the framework's utility in rapidly experimenting with program analysis-based, reverse engineering tools and the ability to change the tool behavior quickly.

Based on the experience of building restructuring tools, the paper presents a specification-driven reverse engineering framework that is independent of the programming language. The prototype has facilitated tool builders to experiment with program analysis-based reverse engineering tools and swiftly modify the tool's behavior. The paper concludes by suggesting that support for model generation, an appropriate balance between the number of primitives and flexibility of specifications, and the ability to integrate existing viewing tools will enhance the utility of this framework.