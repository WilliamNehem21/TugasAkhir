This academic paper extensively explores the implementation of conceptually continuous signals in functional reactive programming (FRP). It demonstrates that standard implementations utilizing streams and continuations for recursive signals may lead to potential time and space leaks under typical call-by-need evaluation. However, the paper proposes that by transitioning to the level of signal functions and structuring the design around arrows, these issues can be mitigated. Additionally, the use of optimal reduction is suggested as an alternative to address the problem, despite the complexity it introduces to the evaluator.

Furthermore, the paper focuses solely on the continuous aspect of FRP, disregarding its reactive component, which is an ideal concept that must be approximated in real implementations. The traditional implementations of FRP have employed time-ordered streams of values to approximate this continuity.

The paper describes two standard non-arrow-based FRP implementations and illustrates how both are susceptible to serious space leaks. It then introduces arrows and utilizes them to design a new FRP implementation that resembles that of yampa. This new implementation is shown not to suffer from the same space leak problem as the standard implementation. The paper also discusses alternative approaches to addressing the space leak problem and assumes the reader's familiarity with Haskell and basic functional programming concepts.

The authors emphasize that while they had expected the unfolding of certain functions to have linear time complexity and constant space complexity, the actual computational complexities are higher due to evolving issues within Haskell compilers. These complexities are linked to the inability of the standard call-by-need evaluation to detect emerging vertical sharing and the need to compute the fixed point of recursively defined higher-order functions.

The paper notes the challenge of generalizing transformations as rewrite rules and acknowledges the difficulty in doing so. It attributes the success of such transformations in FRP to the shared characteristic that the structure of recursively defined signals retains in their future valuesâ€”a characteristic that is not necessarily present in every case.

The paper also highlights the distinction between being optimal and being efficient, noting that optimal evaluation, while desirable, incurs considerable operational overhead in terms of time and space due to the additional bookkeeping of sharing analysis. It points out the underdeveloped status of optimal evaluation compared to call-by-need compilation techniques and the absence of truly practical implementations to date.

In conclusion, the paper elucidates the serious space and time leaks associated with recursive signals expressed in the standard implementations of continuous signals in FRP. It identifies the failure to recognize sharing within a recursive lambda expression as the source of the problem.

Finally, the authors acknowledge the support received for their research and extend thanks to Galois Connections, Yale University, and the IFIP WG2.8 Working Group on Functional Programming for their valuable contributions.