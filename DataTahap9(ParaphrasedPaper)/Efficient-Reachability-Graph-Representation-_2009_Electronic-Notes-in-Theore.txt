To accomplish this, we introduce a new category of petri nets known as petri nets with counters (PNZ). These petri nets are essentially place/transition (P/T) petri nets augmented with data stored in a global vector of integer variables, which can be manipulated through linear transformations. The places, arcs, and tokens in PNZ are similar to those in P/T nets, but each transition is associated with an annotation that encodes the linear transformation to be carried out upon firing. A PNZ can be interpreted as representing the control state in its places and the data state in its variables, and can also be viewed as a specialized form of colored petri nets, wherein the integer variables are implemented as integer marked places. The semantics of PNZ typically result in the generation of infinite reachability graphs.

Subsequently, a more concise construction of state graphs is defined, facilitated by the identification of executions that alter the data state without affecting the control state, and treating them as meta-transitions. This yields a condensed graph in which each state may potentially encapsulate a large or infinite number of reachable markings.

This condensed representation can be visualized as an (potentially infinite) reachability graph, which is a directed graph whose nodes comprise all reachable markings, with each arc indicating a transition and a binding that produces one marking from another. In this context, the reachability graph can be regarded as a condensed portrayal of the trace(n, m0). Notably, it may remain finite (i.e., encompassing a finite number of reachable markings) even if it admits infinite traces.

We have developed a prototype implementation that generates a condensed state graph for a PNZ. The sets of integer vectors are stored using the ndd structure defined in and implemented in the library lash. In certain scenarios, our implementation may encounter an error if a transformation cannot be iterated by lash (as previously discussed, this approach is not exhaustive). Furthermore, we cannot ensure termination, as this is generally an undecidable problem. However, sufficient conditions for termination have been proposed in, and it is earmarked for future work to explore their applicability in our context.