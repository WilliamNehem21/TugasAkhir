We conducted research on generating distributed state spaces on a cluster of workstations, focusing on the challenges posed by recursive data types such as lists and trees. These data types are essential for representing complex systems, but existing methods based on a shared hash function are not suitable when dealing with them. To address this issue, we proposed a solution involving the use of a database to assign global numbers to state values, and introduced a technique known as tree compression to fold states recursively. Our experiments demonstrated that this approach outperforms the manipulation of plain state vectors.

The fundamental approach of using a shared hash function for distributed state space generation has limitations when recursive data types are involved. While implementing acyclic pointer structures works well on a single computer, sharing these structures across multiple workstations is challenging. To overcome this, we introduced a database to maintain a global numbering of state values, enabling workers to exchange vectors of indices rather than serialized pointer structures.

Furthermore, we developed tree compression, a method of recursively folding states using a hierarchy of databases, which reduces memory requirements for storing sets of states. Our experiments involved implementing various versions to assess the impact of recursive state folding and the organization of intermediate node databases. We observed a trade-off between organizing the internal databases locally or globally, depending on the network's bandwidth and latency.

In addition, we explored the communication of compressed index vectors between workers to reduce bandwidth demands, while also considering additional communication with the database. We also discussed the potential for future research in finding optimal compression cutoff points and adapting the scheme for use in heterogeneous systems composed of multiple interconnected clusters of workstations.