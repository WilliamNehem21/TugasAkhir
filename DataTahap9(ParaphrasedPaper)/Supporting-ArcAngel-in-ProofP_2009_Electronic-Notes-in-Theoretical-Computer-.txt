In the paper, it is observed that the "followassign(x, e)" can only be used when the program is in the form w, x:[pre, post]. However, the tactic "robustfollowassign(x, e)" can be applied to specification statements even if x is not in their frame. This means that "followassign(x, e)" may fail after the first choice "skip" is taken, and the execution backtracks to explore the second choice of the alternation in order to find a successful path of continuation.

The angelic nondeterminism embedded in the choice allows for a concise and general description of various robust tactics of refinement and proof. The paper presents several examples of this. The implicit backtracking is illustrated by a law which is valid for arcangel (and angel): (t1 | t2); t3 = (t1; t3) | (t2; t3).

The paper also discusses the extension of the Ergo theorem prover to use angel as a tactic language. Furthermore, the implementation of arcangel in ProofPower, a flexible and extensible theorem prover based on HOL, is presented. ProofPower's open architecture has facilitated its successful use in industrial-scale projects, and it also provides an embedding and formalization of the Z language.

Additionally, the paper addresses various issues that led to a generalization and unification of arcangel with its derivative angel, as well as the more specialized derivate arcangelc. These derivatives are methods for constructive refinement. The unification results in a framework that supports the development of other derivatives of angel.

The structure of the paper is as follows: Section 2 introduces relevant preliminary material, including a brief account of the syntax and semantics of arcangel, and the ProofPower theorem prover. Section 3 discusses the fundamental design of the implementation and its relationship to arcangel semantics. The following section illustrates the use of the tool through an example, and Section 5 draws conclusions, addresses aspects of extensions and generalizations, and identifies future work.

The paper describes various tactics, including "law name(args)" and "tactic name(args)", which assume a pre-defined law or tactic to be applicable and generate new programs or proof obligations. The paper also discusses the handling of nondeterminism and the semantics of law and tactic applications.

The development of proofpower aimed to facilitate the semantic embedding of other languages. The Z language has been embedded and formalized, producing the ProofPower-Z package and dialect. This extension provides syntactic constructs, parsing facilities, rules, theorems, and tactics specific to transforming and proving theorems about Z expressions.

To support nondeterminism, the paper discusses the need to track all possible outcomes of tactic behaviors and characterizes tactics as functions mapping refinement theorems to lists of refinement theorems.

Furthermore, the paper presents an alternative implementation that evaluates all outcomes of tactic applications and selects one that discharges the goal, or fails if none exists. The paper also discusses the simplification of refinement theorems and the automation of discharging well-definedness constraints and provisos of laws.

In conclusion, the paper discusses the direct translation of the arcangel semantics in the implementation model, and outlines how the encoding of particular tactics is mostly trivial and amenable to automation.