The paper introduces a method called async, which runs in new threads in polyphonic C#. The produce_consume invocation creates a buffer and allows two threads to concurrently access it. The compiler associates the token empty:true with b at first, and then replaces it with less informative tokens (empty:true?false and empty:false?true) in the produce and consume methods. The arrows in the annotations of the formal parameters indicate the movement of tokens from the actual parameter b to p and c.

The paper emphasizes that programmers generally consider high-level accessibility rather than low-level synchronization. Compilers ensure synchronization by maintaining properties such as race-freeness and continuity to some extent. The paper argues that concurrency should not dominate the program structure, allowing programmers to focus on other important programming principles.

It states that interfaces specify accessibility, which is required by clients to avoid access and synchronization conflicts. By specifying only necessary information in interfaces, the paper suggests that the black-box view of objects is maintained and data hiding is achieved, so changes in implementation details do not affect clients.

The paper also discusses the movement of tokens between references on assignment and the division of tokens when executing an assignment. It mentions that clients invoking put in a buffer instance usually own a non-exclusive token size:0..(max-1)?1..max, and those invoking get own a token size:1..max?0..(max-1).

The paper suggests that programmers must provide access constraints on methods, as well as annotations of formal parameters and results. It argues that this information has a major influence on object behavior and should be considered in behavioral subtyping.

The paper also touches on topics such as concurrency, static guarantees, deadlock prevention, and the similarities and differences between its proposed approach and the scoop model of concurrency.

In conclusion, the paper presents an approach to integrate synchronization into a static access control mechanism based on tokens, providing information about exclusive access to variables and types of their values. The approach supports subtyping and ensures to some extent continuous operation of the system. The paper points out that the approach is in an early stage and mentions potential future work, including a rigorous practical evaluation of the proposed approach.