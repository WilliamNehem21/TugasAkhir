This paper introduces a graph-based decision procedure for a calculus with sum and product types, drawing inspiration from the bird-meertens approach to reasoning about functional programs. The language utilized here can be viewed as the internal language of a category with binary products and coproducts, making the decision procedure independently interesting.

A node in this context is defined as a triple (s, i, o), where s represents a symbol with arity as and co-arity cs, i denotes a set of input ports, and o denotes a set of output ports, with the cardinality of i (resp. o) being as (resp. cs).

The paper informally presents the graph-rewriting system and discusses the challenges involved in its definition, laying the groundwork for the formal definition of the system in the subsequent section. The treatment of fusion and cancellation is considered, and the paper notes that the application of the rule dupm-choice removes the necessary ground duplicator, which is essential for closing the fusion initiated on the left-hand side sub-net. It is highlighted that the application of the rule dupm-dupm restricts the top duplicator to be ground, effectively avoiding the pattern of divergence that rule dupm-choice leads to.

Furthermore, the paper introduces a local graph-rewriting system for sum-product nets, building upon the informal discussions in the previous section. It establishes the notion of graph-rewriting rule, emphasizing that both the left-hand side (LHS) and the right-hand side (RHS) of the rule are finite nets with identical sets of input and output ports, preserving the interface of the net. The rule ensures that the LHS and RHS nets are well-typed and well-formed, preserves type and position labelings of the inputs and outputs, and does not introduce cycles.

Subsequently, the paper provides the definition of join(a, n) as a two-input, n-output net, composed of two copies of n and n copies of a, where the inputs and outputs of the net are linked accordingly. It also presents a proof with adjusted indices during reduction and explains that rules for indexed nodes do not restrict interaction for non-zero indices, guaranteeing well-formedness criterion.

For sum-product nets in general, the read-back operation is generalized as taking a vector of n inputs and producing a vector of m outputs, where indices are considered from left to right.