In this article, we present "ProTest," an automated testing environment for B specifications that is based on the Prob model checking and animation tools for B. ProTest follows an approach similar to that of Dick and Faivre (discussed in section 2) and generates test cases from B specifications by partitioning the state invariant and operation preconditions of a specification. Our method provides guidelines for implementation, which, if followed, enable the entire testing process to be automated. We also present a small industrial case study to illustrate our approach and the testing environment. The main outcomes of our paper can be summarized as follows:

1. ProTest generates test cases by partitioning and exploring the state space, and then simultaneously animates the specification and runs the implementation with respect to these test cases, providing verdicts on whether the implementation has passed the tests.

2. The entire testing process is automatic, with some restrictions on operation arguments and results at this stage.

The structure of the paper is as follows: section 2 discusses related work, section 3 presents our approach, section 4 discusses our implementation, section 5 analyzes our test environment in relation to existing work, and section 6 concludes the paper.

Additionally, we introduce and discuss the BZ Testing Tool (BZTT) developed by Legeard et al., which is used for deriving test cases from Z or B specifications and shares similarities with our approach.

We discuss the capabilities of the Prob tool, which consists of an automated consistency checker and a model checker for B machines. Prob is able to explore the state space of a B machine systematically and automatically, and it can also detect errors and inconsistencies within the machine.

For the Protest environment, we showcase its ability to deal with Java implementations and its capability to perform simultaneous specification animation and code execution, including examination of intermediate results at strategic control points.

We also address the issue of non-determinism in B operations and provide solutions to handle it.

Finally, we propose potential future enhancements for the ProTest approach and discuss how it can be integrated with other tools, such as the U2B tool for translating UML specifications to B.

In conclusion, we have presented ProTest, a testing environment for B specifications, and demonstrated its effectiveness through a small industry case study. We have also shown how temporal model checking and constraint-based checking can be used to obtain a set of robust test cases.