In heterogeneous computing environments, the challenge of finding optimized solutions remains a difficult problem as we strive for better and improved performances. Task scheduling in these environments is known to be NP-hard, making it crucial to address this issue with the goal of producing effective and efficient solutions. The literature offers a multitude of algorithms utilizing various techniques and approaches to tackle the task scheduling problem, with ant colony optimization (ACO) being one such technique. In this paper, we propose a novel ACO-based algorithm, ACO-RNK, which incorporates a priority-based heuristic called the upward rank value, an insertion-based policy, and a pheromone aging mechanism to guide ants to high-quality solutions. Through our simulation study using randomly generated directed acyclic graphs (DAGs), we found that ACO-RNK exhibits comparable or even better performance than the HEFT and MGACO algorithms.

As computer hardware continues to advance, the software aspect must also keep pace. The presence of heterogeneous multiprocessor systems has brought about increased parallelism and potential for higher performances, making task scheduling a crucial pursuit to fully exploit these environments. In a heterogeneous computing environment, scheduling interdependent tasks becomes especially challenging due to differing processor speeds.

Our research focuses on static task scheduling, where information about available resources is known before execution, and scheduling may be done at compile time. Task scheduling, whether static or dynamic, is classified as an NP-hard problem, but several suboptimal heuristic-based solutions have been proposed, including list scheduling, clustering, task duplication, and guided random search methods.

The ACO mechanism has been applied to various optimization and scheduling problems, with different variants implementing alternative approaches such as continuous or step-by-step pheromone deposits, evaporation mechanisms, and local and global optimization strategies to improve solution quality. ACO has also been combined with other random search algorithms and list scheduling heuristics to enhance the quality of schedules.

Our proposed ACO-RNK algorithm showed superior performance compared to the HEFT and MGACO algorithms, yielding smaller schedule lengths for varying DAG sizes and shapes. We plan to explore further enhancements to ACO-RNK, including incorporating weight-based ranking strategies, additional iterations, a wider range of processors, and the integration of local optimization and stagnation strategies.