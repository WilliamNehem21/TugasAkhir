This paper introduces tsat++, an open platform designed to implement the lazy SAT-based approach for determining the satisfiability of theories in the context of SMT. SMT involves determining the satisfiability of a combination of propositional literals from the first-order theory t, for which a satisfiability procedure for a set of ground atoms is known. The modular design of tsat++ allows for different enumerators and satisfiability checkers to be plugged in, as long as they adhere to a well-defined interface. Additionally, the platform incorporates various optimization techniques that are independent of the specific modules used. Experimental results demonstrate that tsat++, when applied to separation logic, performs competitively with or faster than existing solvers for that logic.

The lazy SAT-based approach is a promising strategy for addressing SMT, delegating first-order reasoning to a specialized satisfiability procedure for the theory t. Tsat++ is implemented in C++ and leverages abstract classes to establish interfaces for the enumerator and satisfiability checker modules. These interfaces consist of methods and data structures through which modules interact with the system. While the modules' internal operations and the quality of their returned objects are left unspecified by the interfaces, this approach provides module developers with considerable freedom in selecting heuristics and optimizations.

In order to comply with the augmentformula method, the enumerator must be capable of dynamically augmenting its formula. This can be achieved using an off-the-shelf SAT solver or by adapting the DPLL method, although the latter is generally more efficient but requires significant engineering effort. Employing an assignment to the satisfiability checker may yield valuable sets of constraints earlier than allowing the enumerator to produce a model, potentially saving time. This technique resembles but is more potent than the concept of early pruning and/or forward checking in AI literature.

The architecture described in the paper is instantiated for separation logic, which combines boolean logic with a fragment of linear arithmetic and is applicable to decision problems in various domains, including AI and formal methods. This instantiation involves handling hard instances with a unique separation logic model, based on parameters such as d and s that influence the complexity of the problem.

The paper emphasizes the importance of openness and modularity for enhancing flexibility, upgradability, and extendability in systems like tsat++. The platform's design embeds the two facets of the lazy SAT-based approach within dedicated modules managed through well-defined C++ abstract classes. An open question that remains is how to maintain the system's openness without compromising its performance.