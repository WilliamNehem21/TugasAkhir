The problem discussed in this paper concerns the philosophical concept known as the identity of indiscernibles. According to Leibniz, objects that share all the same properties must be considered as the same object. Although this idea has been widely debated in philosophical literature, it is important in programming language semantics, particularly in object-oriented programming, to allow for the existence of distinct but indiscernible semantic objects. However, this can also lead to confusion, as evidenced by the common difficulty in explaining to beginner Java students why comparing strings using the "==" operator is not advisable.

The operational semantics of the language are defined by the small-step rules provided in this paper. Additionally, there are context rules that outline a standard shallow applicative-order evaluation strategy (specifically, leftmost innermost, call-by-value) and the left-to-right evaluation of tuples and expressions.