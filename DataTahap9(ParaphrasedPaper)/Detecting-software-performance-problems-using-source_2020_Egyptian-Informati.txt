This academic paper presents several contributions. Firstly, it introduces a new method to detect performance regressions between two system versions by using source code analysis techniques and unit tests. Secondly, it conducts an empirical evaluation of this approach on four open-source applications (agilefant, apache commons math, apache commons io, and xalan), demonstrating its ability to identify performance regressions and improvements across different system versions. The paper is structured as follows: it starts with a problem statement in section ii, introduces the proposed approach in section iii, presents the experimental setup in section iv, details the study results in section v, discusses remaining issues in section vi, and concludes in section vii while pointing out potential future research directions.

The paper identifies limitations of current approaches for detecting performance regression issues in source code, including the time-consuming nature of running complete test suites and the reliance on execution traces, as well as the potential shortcomings of using black-box testing methods. The proposed approach overcomes these limitations by utilizing version control information, identifying changed or added code, and analyzing corresponding test suites to detect performance regressions. Additionally, a prototype tool named perfdetect has been developed for applying the proposed approach.

The paper also provides detailed information on the empirical evaluation of the proposed approach on the four open-source systems, showcasing its effectiveness in identifying performance regressions. Furthermore, comparisons with existing approaches highlight the advantages of perfdetect in terms of efficiency and accuracy. However, the paper acknowledges a limitation of perfdetect in identifying performance regressions introduced by newly added source code, and suggests this as a future research direction.

In summary, this paper introduces perfdetect as a novel approach for identifying performance regressions in source code, and demonstrates its effectiveness through empirical evaluation on real open-source applications, offering potential improvements over existing approaches.