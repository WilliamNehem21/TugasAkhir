Formal methods are increasingly utilized in industry to verify the accuracy and to identify flaws in system models, such as those for hardware, protocols, and distributed algorithms. One approach, known as model checking, is employed to automatically analyze finite-state systems and detect any potential issues. However, model checking is constrained by the state explosion problem, which arises from its reliance on the transition system defining the semantics of the distributed program. This transition system often contains an infinite number of states.

Imperative languages with explicit parallelism and communication statements provide a clear and comprehensive framework for expressing system models and distributed programs, which is crucial for verification purposes. Examples of these imperative notations include occam, the simple programming language SPL introduced by Manna and Pnueli, Promela of the Spin model checker, and the shared-variable language SVL++. 

This framework has been extended by incorporating an auxiliary variable, the channel variable, for each external channel in order to track the history of values transmitted through it. The extended set, known as the interface set, specifies the external and internal channels, where the internal channels facilitate communication within parallel substatements and are considered hidden from the outside. A communication elimination algorithm has been proposed to address the state explosion problem, with the goal of identifying and eliminating redundant variables and statements. The algorithm applies a procedure, pelim, iteratively to eliminate matching communication pairs, and terminates with a false value if the applicability conditions are not met.

The elimination of internal communication statements has the effect of reducing parallelism among external communication offerings, which in turn can lead to the possibility of deadlock in the program environment. This is exemplified by a three-register queue with internal and external channels. A concatenation chain of a statement is defined as a list of its basic substatements in consecutive ascending concatenation order, with parallelism and selection symbols.

Furthermore, the construction of statements at the right side of the congruence symbols involves partitioning the sets of interface computations of the statements and their alternatives, and the sets of behaviors are combined using the union operation. The congruences follow from specific lemmas and principles, with the disabled pairs being retained in the alternative. Additionally, the communication pair elimination algorithm is detailed, which includes a procedure for obtaining communication pairs and a theorem confirming the correctness of the algorithm under certain conditions.