The efficient development of IDE components depends on three key principles: abstraction, modularity, and extensibility. Abstraction is necessary to reduce the complexity of IDE frameworks, modularity helps in reusing definitions of editor components, and extensibility allows for customizing editor components. However, when designing abstractions for increased expressiveness, it is important to avoid excessively limiting the ability to customize component aspects. Reuse is especially crucial for language extension and embedding, such as in domain-specific language embedding and meta-programming with concrete object syntax. It is ideal to define language combinations modularly, and the IDE support for these languages should also be composed from the IDE support for the constituent languages.

To further facilitate efficient IDE development, spoofax/imp automates the derivation of syntactic editor service descriptors for a language through heuristic analysis of the grammar. The compositional nature of these descriptors allows them to be combined with handwritten specifications to customize default behavior, enabling rapid prototyping of editors and facilitating their maintenance as languages evolve. The paper is organized as follows: the definition of editor services is discussed, including those that handle the presentation of a language and those based on the language semantics, as well as the composition of editor services. Additionally, an overview of the Eclipse and imp architecture and their implementation augmentation is provided. Finally, related work, concluding remarks, and directions for future work are discussed.

Each type of service, such as outline, folding, and coloring, is defined by its own declarative description language. These editor service descriptor languages all share the concept of section headings for structuring the module, such as the language section, which specifies the type of editor service and can optionally contain human-readable text describing the part of the file.

In spoofax/imp, syntax highlighting is based on the grammar of the language, allowing for correct highlighting of tokens that are only considered keywords in parts of a composed grammar. Additionally, the use of the grammar enables the reporting of syntax errors inline. The parsing technique is scannerless and reconciles differences through the use of jsglr and stratego/j. The generated components of an editor can be re-generated when a language definition evolves, allowing for dynamic loading of services into the current instance of Eclipse.

Nevertheless, some open problems remain, such as the performance concerns of the stratego interpreter and the jsglr parser. The authors intend to address these concerns by replacing the stratego interpreter with a compiler targeting the JVM and optimizing the jsglr parser for use in an interactive environment. They also aim to use high-level, declarative specifications of semantic analyses for achieving full compositionality of complete syntactic, semantic, and tooling descriptions of language extensions.