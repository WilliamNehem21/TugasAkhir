The paper discusses the use of model-based testing for automatically verifying system conformance to its specification. It proposes an on-the-fly algorithm for generating test suites that cover all feasible coverage items and applies a reachability algorithm to explore system states in a manner that minimizes redundancy. The paper also reviews techniques for test case generation based on reachability analysis and presents experiments comparing different approaches.

The authors emphasize the importance of reducing the costs associated with automated software testing and propose novel algorithms for test case generation that leverage global information about the generated state-space to determine termination and pruning. They also provide insights into generating test suites with coverage in communicating extended finite state machines (CEFSMs), and discuss different coverage criteria commonly used in model-based testing.

Furthermore, the paper highlights the performance of the proposed algorithms through experiments, showcasing significant improvements in terms of state space generation and execution time compared to existing techniques. The authors also relate their work to prior research on flow-based coverage criteria expressed in temporal logic and directed model-checking techniques, demonstrating the novelty and applicability of their algorithms for test suite generation.

Overall, the paper contributes to the field of automated test suite generation by presenting algorithms suitable for various automata-based models, offering insights into coverage criteria and their impact on test suite generation, and demonstrating the effectiveness of the proposed algorithms through experimental results.