An integrated development environment (IDE) tracks the modifications made by a user to source code modules and responds by identifying errors, re-parsing, rechecking, recompiling modules, and adjusting visualizations or other module-derived information. The central component responsible for this behavior is the module manager of the IDE, which is fixed in its overall functionality but exhibits language-specific behavior based on the programming languages it supports. The concept of modules, their interdependencies, and the impact of changes to a module are discussed. Additionally, a language parametric module manager, which is parameterized with the module behavior of a specific language and its properties, is proposed. The paper also examines the application of this module manager in constructing IDEs for the specification language ASF+SDF and for Java.

The paper presents a long-term objective of creating IDEs for programming languages and domain-specific languages, with a focus on generating the interactive behavior of IDEs as opposed to traditional emphasis on the production of syntactic and semantic analysis tools. It emphasizes the importance of the module manager in providing access to the modular structure of a software project, highlighting the differences in modular structure and dependencies across programming languages. Moreover, it discusses the role of directed graphs in representing programming language modules and their interdependencies, as well as the need for rules to select and schedule actions for execution within the module manager.

The paper introduces the concept of the listener or observer design pattern for decoupling coordination from computation and outlines the role of module predicates in making information propagation programmable. It also explores the need for generic graph manipulation algorithms within the module manager for the benefit of IDE actions, providing examples of such operations. The development of a language for expressing conditions for triggering events and the operational semantics of evaluating these conditions are also described.

Furthermore, the paper proposes an incremental predicate evaluation algorithm and underscores the language parametric nature of the module manager, its use in propagating ide-specific information through the module dependency graph, and its efficient recomputation of module predicates after module changes. The authors have successfully applied this approach in constructing IDEs for specific languages and express positive intentions to explore its application to other languages and IDE features in the future.