The concept of categorical trace was first introduced by Joyal, Street, and Verity in a seminal paper. Their work was originally motivated by algebraic topology and knot theory, but has since found numerous applications in computer science. For references and historical context, please refer to [1,3,20].

In our research, we expanded upon this concept by examining partial traces. The idea of extending the abstract trace to the partial setting is not novel, as evidenced by prior studies conducted by Abramsky, Blute, Panangaden, Gordon Plotkin in unpublished lecture notes, as well as the work of Blute, Cockett, Seely, and others. For a comprehensive overview, please see the comparative account. We will briefly revisit the notion of partial trace in the following discussion.

Remark 4.3: It is worth noting that if we choose p d=( p, p) for atomic formulas p, then a d=( a, a) for any formula a (refer to proposition 4.4 below).

Remark 4.6 (comparing interpretations): As demonstrated earlier, the two semantics differ significantly in how they interpret formulas, and the interpretations of proofs are linked by the execution formula as outlined in proposition 4.4 above. In particular, for cut-free proofs, the interpretations in the int category g(c) align with the mgoi and denotational interpretations.

We propose the construction of a *-autonomous category whose objects correspond to Girard types, with morphisms derived from the goi interpretation of proofs. A similar construction could be implemented as a more natural domain for denotational modeling than the compact category g(c) previously explored. We intend to delve deeper into this in the complete version of this paper.

In summary, denotational semantics typically do not track cuts and do not have a separate formulation or interpretation for the removal of cuts (e.g., the execution formula). The elimination of cuts is concealed within the composition in the model category. Our objective in this paper was to directly integrate cut-elimination steps into the interpretation while still allowing for comparison with the denotational view, as described in proposition 4.4 above.

Theorem 6.2 in section 6.1 can be applied to provide a characterization theorem for the untyped (i.e., uni-object) goi semantics for mll, as discussed in our previous papers [20,21]. The following theorem is linked to the work of Danos and Regnier on path-based computing. We hope to explore these connections in future work and will only provide the definitions used in the theorem below, referring readers to [reference] for details on goi semantics in udcs.

Proof (of Theorem 6.5): We will provide an overview of the complete proof, which will be included in the journal version. Recall that as we are working in a traced UDC, the mgoi interpretations of proofs restricted to a single object u can be represented by matrices of their components, as demonstrated in proposition 6.1, where they are shown to be symmetric permutation matrices with zero diagonal entries.