Our approach to mechanically verify a proof within Coq has remained essentially unchanged since its inception. Initially, the proof is meticulously written on paper with as much detail as possible, and this written document serves as a guide to produce the script for the proof system. However, the proof on paper and the script often diverge at this stage, with the proof being condensed for inclusion in a technical report and the script being modified with an eye toward increasing reusability and robustness.

Inspiration for our approach comes from verification condition generators like Why, which are used to prove the correctness of programs by taking annotated programs as input and producing a list of conditions to be proven in order to validate the annotations. We aim to implement a similar mechanism for proofs on paper, such that running a tool on a proof generates a list of formal conditions to be checked for correctness.

The definition of our proof format is directly informed by these considerations, drawing on the natural deduction style proposed by Prawitz to illustrate the structure of proofs. Our choice of a format language independent of a specific prover is motivated by the aim to support large formal developments over the long term, and we have opted for a textual representation rather than a mathematical markup language like MathML for reasons of simplicity and flexibility.

Our proof format accommodates both goal-directed and forward styles of proof, and we have also incorporated mechanisms for representing assumptions, generating proof conditions, and checking the proof's correctness within the Coq system. Furthermore, we have implemented a visibility rule for subproofs to allow for a more natural and less restrictive policy regarding the use of conclusions from other subproofs.

Finally, we have also discussed the potential for using a scientific editor like TeXmacs for writing proofs, and identified the need for further testing and refinement of our approach, including the development of additional tactics for proving conditions automatically within Coq.