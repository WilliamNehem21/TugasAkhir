We have developed a formalization of higher-order separation logic for a first-order imperative language with procedures and local variables in Isabelle/HOLCF. The assertion language is designed to allow the use of any theory defined in Isabelle/HOLCF to construct assertions, such as primitive recursion, least or greatest fixed points, etc. Our approach to higher-order logic enables the verification of non-trivial algorithms without the need to extend the semantics of the language, as was previously done in verifications based on first-order separation logic. We provide non-trivial examples to support this claim and demonstrate how higher-order logic facilitates natural assertions in specifications. Additionally, we have implemented rules for representation hiding and data abstraction to support abstract reasoning.

In our technical development, we define the syntax of the programming language using a deep embedding of commands and a shallow embedding of expressions in section 2.1. The semantics of the programming language make use of the implementation of basic domain theory in Isabelle/HOLCF. We also define the frame property, which expresses that commands behave locally, as required for the verification of the frame rule, and prove that the meaning of any command satisfies the frame property.

Our model of the language involves a shallow embedding of expressions and a deep embedding of commands, allowing us to focus on separation logic for commands. We use a syntax commonly seen in presentations of separation logic to make the presentation more readable, although it differs slightly from the syntax used in our implementation due to symbols that are already used in Isabelle/HOLCF and cannot be overloaded.

We establish the partial correctness properties of our model by defining the validity of a given heap and store, ensuring that if a certain condition holds in the initial state, then the procedure does not abort, and if the procedure terminates, another condition holds in the resulting heap and store.

Our representation assumptions necessitate an appropriate heap invariant. By disallowing skewed sharing and using the separating conjunction, we can express every record with a precise formula and then combine them all together. This approach yields a unique set of heaps due to the associativity and commutativity of the separating conjunction.

One of the main correctness criteria of a garbage collector is that it preserves the structure of the heap. To formalize this, we define the concept of a heap isomorphism. Additionally, we formalize a proof in our Isabelle/HOL implementation to illustrate the use of higher-order separation logic to quantify over heap sets across a hoare triple, exercise our proof rules for procedures, and simplify the assumptions about the procedure according to the original goal.

In the future, we plan to conduct further case studies of formal verification of programs and extend the formalization to languages with more features, such as concurrency, first-class functions, and heaps with procedures. We also aim to incorporate more automated reasoning in higher-order separation logic, potentially using tactics for entailment of higher-order separation logic formulas.