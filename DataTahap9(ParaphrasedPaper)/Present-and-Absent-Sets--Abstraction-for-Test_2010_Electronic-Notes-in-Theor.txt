This academic paper introduces a new way to abstract reactive systems that interact with databases, particularly for the purpose of model-based testing. The abstraction models the database as two sets: the present set and the absent set, representing the under-approximation of data present and not present in the database, respectively. The paper also presents two variations of finite-state machines (FSMs) called dbfsm and pafsm, with the latter being an abstraction of dbfsm using present-absent sets. The translation between dbfsm and pafsm is discussed, along with how specifications for testing can be developed using pafsm. The paper includes a demonstration of this approach through a small example and explains how it can be utilized with the model-based testing tool uppaal tron.

The paper suggests a simplified view of databases in which reactive systems perform basic operations like inserting or removing values without complex data manipulations. The abstraction represents an initial step and is intended to be extended for a more comprehensive view of databases in the future.

The paper is organized into several sections. It begins with a description of related work and model-based testing in both online and offline forms. The subsequent sections delve into the theoretical aspects of the present-absent abstraction, the extension of finite-state machines to incorporate databases and present-absent sets, and the translation between dbfsm and pafsm. The paper concludes with a summary of the findings and potential future research directions.

The paper also explores the practical application of the present-absent abstraction in online and offline testing. Online testing involves dynamically generating and executing test cases, while offline testing generates and examines abstract traces to learn the state of the database and make relevant choices.

The paper includes an example to illustrate the present-absent set abstraction and test-case generation. Additionally, the effectiveness of this approach is demonstrated through testing a system that interacts with a database, both with and without prior knowledge of the database's state.

The paper discusses the potential of the present-absent abstraction and specifies plans for future work, such as extending the scope of the database model and evaluating the approach on larger, potentially industrial examples. Additionally, efforts are underway to enhance the uppaal model checker to better support model checking using present and absent sets.