In current practice, programmers still depend on iterative compilation and a robust test suite, despite the availability of refactoring tools, to ensure that their changes do not result in type errors and maintain the expected behavior. However, relying solely on a test suite for behavior preservation is not sufficient, as it can only identify errors rather than guarantee their absence. Additionally, structural changes to a program, such as creating a new class, often require updating the test suite to include new test cases for the new classes, further underscoring the limitations of relying solely on a test suite for behavior preservation. This is of particular concern in the context of structural model refactorings, where proposed transformations typically rely on informal type systems and may introduce type errors. To address these challenges, we propose and demonstrate in previous work that model transformations for Alloy, a modeling language, can be formally verified to ensure the absence of type errors. We leverage the Prototype Verification System (PVS), which offers mechanized support for formal specification and verification, and demonstrate how model transformations for Alloy can be proven to preserve static semantics and not introduce type errors. Furthermore, we provide a detailed overview of Alloy and propose a core language for it, which includes constructs for defining signatures, relations, facts, and formulas. Notably, we formalize and declare well-formed constraints for the core language as part of our efforts to ensure the soundness of model transformations. Ultimately, we emphasize the importance of defining and proving fine-grained transformations for Alloy models, enabling the derivation of complex, type-safe refactorings that maintain static semantics. These efforts demonstrate the value of formal verification in ensuring the soundness and safety of model transformations, particularly in the context of Alloy and related formal modeling languages.

Our formalizations pertain to the Alloy modeling language and its core constructs, including signatures, relations, facts, and formulas. We illustrate the importance of defining and proving fine-grained transformations to ensure the soundness and safety of model transformations for Alloy. Additionally, we present a set of primitive laws for Alloy and demonstrate their soundness in PVS. Our approach underscores the significance of focusing on fine-grained transformations, as coarse-grained transformations would likely be more challenging to prove, and the PVS prover aids in automating proof tasks. Furthermore, we discuss related work in the domain of formal modeling languages and refactorings, highlighting the limitations of existing approaches and the significance of defining precise enabling conditions for transformations. Our work aims to fill a gap in this area by providing formal verification for model transformations in Alloy, ensuring static semantics preservation and absence of type errors.