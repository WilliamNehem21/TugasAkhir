This paper aims to propose a process algebra that can represent and analyze dynamic modularity. The emphasis in designing the formal model is on the ability to deploy and execute processes in a distributed manner. The paper also provides a prototype implementation of an abstract machine for the distributed execution of processes. The implementation defines a new process calculus, explicitly addressing low-level implementation aspects such as communication protocols and data structures.

When it comes to passivating a module, it is noted that the process cannot be atomic due to the flattened hierarchy of modules. Therefore, the implementation is carried out incrementally, starting from the passivated module and extending to its sub-modules. During this passivation session, the paper addresses the need to manage interferences, particularly the cleanup of running communication sessions in the passivated sub-modules. It is explained that cleaning up communications on names belonging to the passivated module is not problematic, while handling communications on names located above the passivated module involves interactions with the modules owning the channels.

The paper also discusses the OCaml implementation, where channels h and g correspond to two channels implemented with shared memory or sockets, and threads k and g serve as listeners for these channels. The messages transmitted on these channels are of the forms i and g.

To ensure that names are not extruded outside their defining module, the paper considers using a type system to statically enforce a confinement policy, aiming to prevent illegal communications at runtime. The authors suggest that a well-typed term should never attempt to extrude a name out of its scope and aim to avoid checking for scope extrusions at runtime. The paper hints at the need for further experimentation with the expressiveness of the type system and the enforcement of the confinement policy. It is indicated that the presentation of the type system and the corresponding correctness proof will be included in a future discussion of the work.