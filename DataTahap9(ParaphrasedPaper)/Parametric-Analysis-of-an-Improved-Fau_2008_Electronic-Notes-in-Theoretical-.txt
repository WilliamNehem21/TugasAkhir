This paper presents a study on a triple modular computer system used in the aerospace field, which is designed to calculate the course of action for other subsystems and communicate the result to them. The study is based on an initial design provided by a practical engineer, on which the authors conducted experiments to analyze its drawbacks and proposed a more effective fault-tolerant design. The improved system was formalized using a network of timed automaton in uppaal, along with detailed C code specifications for ease of reading and translation.

However, the authors encountered limitations with uppaal not supporting parameters, leading to the need to instantiate parameters for different hardware environments to verify the fulfillment of certain properties. In the current work, the authors address this limitation by establishing constraints on the parameters to ensure the satisfaction of property t and manually proving the system's correctness under these parametric constraints. This approach allows for general constraints on the parameters to ensure correctness and provides a correctness proof, as opposed to verifying the correctness for a specific choice of parameter values.

The paper is organized as follows: Section 2 introduces the original triple modular redundancy system and an improved version focusing on the enhanced functions of the voter and the arbitrator. Section 3 presents a formal model of the improved system in uppaal using a network of timed automata. Section 4 outlines the correctness properties to be proved and the constraints required for their validity. Section 5 provides an overview of the correctness proofs, and Section 6 concludes the paper.

The system's operation involves a sequence of phases and procedures, including reset, startup, idle, and processing, along with interactions between the CPUs, voters, and arbitrator. The paper also discusses various critical timing parameters and their impact on system behavior, as well as the use of a product automaton to describe system phenomena, parametric constraints, and proofs.

The authors demonstrate the application of their methodology to the system using a case study, and the paper concludes by referencing related work in the area of fault-tolerant systems.