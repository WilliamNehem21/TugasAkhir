The inspiration for this research stems from efforts to expand the Curry-Howard correspondence beyond functional programming to model concurrency. Prior approaches have established a correspondence by imposing determinism on processes, restricting them to systems where only deterministic behavior is possible. However, since process reduction is generally non-deterministic and non-confluent, this limits the potential correspondence with cut elimination or normalization of proofs, which are inherently confluent and deterministic. Thus, it effectively constrains a process to behave in a functional manner.

In this paper, we introduce the interpretation of the MCCS (Multiplicative Concurrent Constraint Systems) fragment. We represent the relevant elements of the process for execution by assigning locations, cuts, and xor conditions to addresses, which can then be encoded into designs. Each element of locp, sp, and xp is interpreted as negative designs, which are then combined as premises (sub-designs) of a single positive design, denoted as dp, providing a preliminary and basic interpretation of a process p.

Furthermore, we present the replication-free fragment of CCS (Calculus of Communicating Systems) and extend the previous results. The non-deterministic choice (also known as sum) represents mutual exclusion between its two members, waiting for an external choice within parallel composition to determine which process to use by synchronizing with the channels of one of the two members, while discarding the other for that execution path. This generalizes the execution process and is based on an interactive theory of computability and complexity using ludics. Notably, the ability to represent infinite designs with a finite generator, allowing for recursive definitions, is the most intriguing feature of this work. Design generators enable an easy extension of the interpretation to the full calculus with replication.

In the notation used, p represents positive actions and n represents negative actions. A name signifies both the polarity and cardinality of the ramification of a rule, and in the negative rule, the variables represent each sub-address of the ramification. If n0 is not a variable x in a positive design, it becomes a cut.