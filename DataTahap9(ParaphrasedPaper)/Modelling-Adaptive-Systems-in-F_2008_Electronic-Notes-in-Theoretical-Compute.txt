The fundamental focus of the paper lies in section 4, which introduces the concept of adaptive processes and demonstrates the modeling of adaptive systems through two examples. Additionally, it provides instances of the application of design transformations. The paper concludes in section 5, offering an overview of future work.

The forsyde system design methodology targets heterogeneous embedded systems through a transformative approach. It begins with an abstract system model that is refined using semantic-preserving and non-semantic preserving design transformations to create a detailed model applicable to hardware or software implementation. This section specifically delves into the modeling concepts of forsyde, with design transformations being discussed in the context of adaptive systems within section 4.3. A more extensive explanation of the forsyde methodology, particularly pertaining to design transformations, is detailed later on.

The forsyde model description commences by elaborating on the general aspects of modeling elements, particularly signals (section 3.1) and processes (section 3.2). Forsyde currently provides a synchronous MOC, an untimed MOC, and a discrete time MOC. However, this discussion focuses solely on the synchronous MOC in section 3.3, as the concepts of adaptivity in section 4 are exemplified using this model. These concepts can be easily applied to other MOCs.

Previous forsyde versions defined the process constructors "mapsy" and "zipwithsyn" rather than the process constructor "combsyn". The change in nomenclature aside, there has been no alteration in the formal definition. "Mapsy" corresponds to "combsy 1" and "zipwithsyn" to "combsyn" (for n > 1).

Adaptive processes supply current parameters to alter the functionality of a system. A typical example is parameterising an analog circuit that executes a transfer function, such as h(s) = 1. The signal "spa" is used to adapt the function "h(s)" by providing new values for the parameters "k1" and "k2".

Adaptive processes can be classified as parameter and mode adaptive processes within McKinley's framework, belonging to the category of parameter adaptation, while function and interface adaptive processes belong to compositional adaptation. Further refinements in this classification are possible, particularly in the subcategories of interface adaptive processes, based on the nature of changes in input or output signals, or a change in the model of computation.

At the highest level of abstraction, adaptation is assumed to be instantaneous within the forsyde methodology, where a change in functionality indicated by a new value of the signal "s" occurs simultaneously with the input or output values that trigger the change in functionality of the adaptive process.

Designing a system within the forsyde methodology involves refining the system through stepwise application of design transformations. The formal concepts developed in forsyde for design transformations can also be applied to adaptive systems. Forsyde entails both semantic-preserving and non-semantic preserving transformations, ensuring correctness and efficiency in model implementation. Additionally, a verification method for non-semantic preserving transformations is proposed to maintain design correctness.

Given the increased complexity introduced by adaptivity in the design process, design methodologies need to provide additional support to ensure the system's correctness during adaptation. The paper presents adaptivity as a primary element within the transformational system design methodology of forsyde, with the adaptive process serving as a key concept. This integration of adaptivity into the forsyde framework allows for the application of formal concepts developed for forsyde to adaptive systems. Notably, the ability to define both semantic and non-semantic preserving design transformations for adaptive systems is of critical importance.

The paper's primary focus has been on systems with a static number of processes, while systems where processes are dynamically created and deleted have not been further explored. Future work will delve into analyzing the adaptation process in more detail and developing design transformations for common patterns in adaptive system design. Furthermore, visualizing intermediate steps of a transformation will be essential for verifying the system during adaptation. Moreover, developing transformations for the category of interface adaptive processes poses a challenge, particularly in complex cases of interface adaptation, such as a change in the model of computation.