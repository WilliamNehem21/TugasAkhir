The use of annotations in programming languages is common for adding useful information to programs, but it often results in increased compilation tokens and slower compilation times. Current distributed compilers aim to speed up compilation by breaking programs into separate pieces, but these pieces still rely heavily on synchronous cooperation, leading to significant overhead due to the need to transmit messages, symbols, and codes across the network. This paper introduces two new compilers, Blue+ and DisBlue+, which aim to address these challenges.

Blue+ introduces a new annotation, based on axiomatic semantics, to replace if/loop constructs, which are commonly used by developers and can lead to complex conditions and code repetition. These annotations reduce compilation scanning time and enhance code readability. DisBlue+ builds upon Blue+ by proposing a distributed concept, dividing each program class into prototype and definition pieces, which are then compiled with only their related interfaces. This approach reduces the amount of code transferred over the network, minimizes dependencies between program pieces, and eliminates the need for synchronization between them.

To assess the effectiveness of Blue+ and DisBlue+, the compilers were tested with large-sized code against existing compilers such as javac, djavac, and cdjava. The paper proceeds to discuss the development of the Blue compiler as a research baseline, the implementation of Blue+ to handle the proposed annotation, the construction of DisBlue+ to incorporate distributed concepts, and the validation of these ideas through various applications. Experimental results and conclusions are presented to demonstrate the potential benefits of the proposed compilers.

The paper emphasizes the novelty of utilizing axiomatic semantics, annotations, and compiled interfaces to achieve the research goals of improving code readability, reducing overhead, and enhancing reusability. While the concepts of axiomatic semantics and compiled interfaces are not new, the paper's contribution lies in demonstrating how these ideas can be leveraged to address the research objectives.

The development of Blue+ and DisBlue+ compilers involves making key decisions, such as selecting axiomatic semantics to replace program conditions and loops, choosing C# as a suitable object-oriented language for implementation, and utilizing the Blue compiler as a research baseline. Blue+ uses pre-parsing operations to parse axiomatic semantics at development time, aiming to reduce compilation time.

DisBlue+ extends the features of Blue+ and introduces its own distributed concepts based on object-oriented programming and software engineering principles. By leveraging polymorphism and interface features, DisBlue+ enables the division of tasks among project developers without synchronous collaboration. The utilization of compiled interfaces in the distributed compiler introduces potential benefits such as asynchronous coding, reduced risk of conflicts or miscommunications, and automatic task assembly, ultimately leading to more efficient software management activities.

The paper highlights the need for further investigation into different types of annotations to enhance the proposed compiler, as well as the development of a new C#/C++ compiler with similar features that can impact various phases of compilation, particularly parsing and semantic analysis. The software engineer working with DisBlue+ must also consider eliminating application dependencies through interfaces to achieve the desired results.