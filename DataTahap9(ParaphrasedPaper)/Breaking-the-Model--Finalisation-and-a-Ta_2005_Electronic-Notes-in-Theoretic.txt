In a specification language such as Z, the straightforward relational model is endowed with additional structure to represent parts of the relational state as internal Z state, inputs, and outputs. Furthermore, Z operations can be partial relations, leading to more complex refinement proof obligations due to the incorporation of an applicability (precondition) law for handling partial relations.

The concept of finalisation addresses the paradox of why a clock that is consistently 5 minutes slow, and hence never correct, is considered better than a stopped clock, which is right twice a day. For example, the first clock can be easily finalised by adding five minutes to the displayed time, while the second clock lacks a meaningful finalisation that yields a useful result without resorting to a secondary clock.

The determination of whether a system is a refinement of another is solely dependent on the observations made. Consequently, the arguments presented in the remainder of the paper also hold true for CSP-style refinements.

The specification serves to define what aspects of the system are intended to be observable and what aspects are intended to be unobservable, often for security reasons, such as in the case of a secret cryptographic key. This unobservability is captured by the specifier in terms of a finalisation.

Once the constraints of the refinement model are relaxed to include nontrivial finalisations, it becomes clearer how covert channels can arise, as alternative finalisations may be applied, leading to the observation of different information. Although such finalisations may not formally refine the original models, they are important as they can be practically performed.

Given the increasing difficulty in arguing about the security of modern systems and the occurrence of unexpected issues such as timing attacks and power attacks, a systematic analysis is essential. The paper presents a simple taxonomy, influenced by the formal refinement models introduced earlier.

The intended observation is carried out with the intended finalisation "glasses," such as the discrete values produced by a cryptographic algorithm. Unexpected observations modify the finalisation glasses and can observe discrete properties (e.g., page faults, interrupts, I/O buffers) or analog properties (e.g., power, timing, RF).

The system can be observed as a single instance (e.g., a single smart card) or as multiple instances, allowing for differentiated analyses. Environmental variations, such as power supply specifications and operating temperature ranges, offer opportunities for altering the finalisation. For instance, digital circuitry operates differently at different temperatures, potentially leading to variation even within a specified range.

Flexibility in interpreting the environment is possible, including assumptions about operations of use, thereby influencing the finalisation. When deviations from pure refinement occur, retrenchment is a formal technique employed to handle such circumstances. An open problem is the extent to which properties of interest can be preserved under such conditions.

While the system under observation is typically the system being analyzed, it is also feasible to make higher-order observations. For example, the analysis techniques themselves have standard and non-standard properties. Metaheuristic guided search, a common analysis technique, has both a final result and a trajectory followed to reach that result.

Analogies can be drawn with other approaches, such as perturbing the mathematics in some way, leading to new analyses. Higher-order analogues of fault injection may apply, as non-standard or highly perturbed cost functions in metaheuristic search typically yield better overall results.

It is notable that published analyses often exploit only a single viewpoint, such as unintended finalisations involving power or timing, with limited incorporation of multiple viewpoints. Incorporating multiple sources and exploiting correlations between them presents a promising avenue for exploration, particularly for attackers.

Traffic analysis primarily consists of observing multiple systems, with analysis of network source and destination fields potentially revealing information even if the message content is encrypted.

Potential timing attacks on the finalisation operation itself, for instance, the time taken to compute a complex finalisation, may introduce security vulnerabilities. Methods to enforce the use of the intended finalisation glasses, such as creating a layer between electrical signals and the analyst's observations, can mitigate invasive attacks.

Overwhelming the resources of an analyst can also enhance security, for example, by rapidly sending vast amounts of potential key material, making it impractical for an attacker to store all the data for future reference without prior knowledge of the key.

The significance of finalisation as a formal framework for explaining various security-related aspects of systems has been demonstrated. The power of different finalisations, enabling factors, and countermeasures has been examined. Lastly, modeling the system from an attacker's perspective, rather than as intended for user access, may serve as a useful criterion for formal analysis.