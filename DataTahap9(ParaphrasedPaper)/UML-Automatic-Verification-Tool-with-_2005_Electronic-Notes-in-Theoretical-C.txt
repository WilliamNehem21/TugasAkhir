The unified modeling language (UML) has clear advantages as a visual modeling technique, leading to a rapid increase in its applications. Despite the benefits of UML, there are various tools in the market that support its use, such as Rational Rose, Argo UML, and Rhapsody. However, none of these tools guarantee specification correctness.

The rest of the paper delves into illustrating the functionalities of a particular tool through a case study. It analyzes two main aspects of the tool: how to derive a formal specification from UML diagrams, and how the tool assists in verifying properties. Additionally, it reviews related work in the field and presents conclusions and potential future research directions.

The tool takes a UML specification formatted using XMI exchange syntax as input and automatically generates an SMV specification. It transforms active behavior from UML into SMV, considering class, state, and activity diagrams. Class diagrams provide information about system elements and their relationships, while state and activity diagrams detail the behavior of these elements over time.

The system's basic description involves a user inputting a credit card and a PIN number, followed by the system checking the correctness of the PIN. If the user enters three consecutive wrong PIN numbers, the card will not be returned. Once the correct PIN is provided, the user can perform an operation to update the card information. At any time, the user can cancel the transaction, causing the card to be returned and an error signal to be generated.

The tool uses the concept of active classes and associates them with the reception of signals. Each active class's behavior is reflected in a separate SMV module, which is instantiated in the main module by each class object. The behavior of active objects is depicted through state machine and activity diagrams, and a separate variable is used to store the state of each machine.

The generation of SMV specifications for class operation control flow is shown using activity diagrams, which demonstrate the control flow between activities. The tool uses a temporal logic, such as CTL or LTL, to express properties. An assistant in the tool guides users in writing properties correctly in the appropriate syntax.

The paper also discusses occurrence patterns and order patterns, which describe properties concerning the occurrence and order of states or signals during the system's evolution. It contrasts the work with VUML and Hugo, emphasizing the automatic verification of UML specifications through state and activity diagrams.

In conclusion, the paper introduces a tool that integrates formal and non-formal methods transparently for the user, specifically verifying UML active behavior using SMV. The tool uniquely verifies activity and state diagrams jointly, utilizing the former to represent the behavior of class operations, a feature not found in other works. Additionally, it addresses representative elements of state and activity diagrams, making it more comprehensive in handling UML characteristics.