The first aspect mentioned pertains to the syntax of the modeling language, which is object-based. The second concern relates to the practicality of the model not needing to address the design of external protocols. The third aspect is of a fundamental nature, stating that the modeling language cannot be utilized to describe the effects of concurrent access to data.

The language contains two inherent types, namely string and nat. Additional primitive types can be introduced directly, as sets, or indirectly through enumeration classes or type synonyms. A primitive type attribute is declared by writing patt: ptype, where an extra argument is used when ptype is string to specify the expected length.

The att4 attribute is a set-valued attribute containing references to objects of the otherc class. It has two methods, method3 and method4, which may reference local methods method5 and method6. The expected size of att4 is specified as num. Meanwhile, att5 is a derived attribute whose value is obtained by concatenating the values of the two string-valued attributes, att2.oatts and att2.oattt.

With the exception of _0, these decorations can be applied to class names or attribute names to indicate a specific object or attribute. If attribute names are unique within the scope of a method, any root qualification may be omitted. For instance, class.att1.att2 may be written as att2, and classthis.att3 may be written as att3.

The precondition mandates that the current object is an object of class c, that input sin refers to an object of class d, and that sin is not already an element of s. The change list indicates that the method may alter the value of s. The postcondition states that after execution, sin should be in s.

Each method has a corresponding decoration. Within a class c, the create and destroy methods can use cnew and cthis to refer to the object that is to be created or destroyed, respectively. For an optional attribute att, the set and clear methods may refer to the object that is to be inserted or removed using attin and attthis.

This paper describes a model-driven approach to software engineering that is centered on the use of a new object-based language. The approach has evolved through practical application, with several large case studies, including two systems for commercial customers, having been developed and are currently being maintained. The language is inspired by z and implemented using b, employing a combination of formal techniques and code generation that has proven to be particularly effective.