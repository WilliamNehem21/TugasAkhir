The paper discusses the representation of program dependences using rewrite systems and introduces a notion of dependence for computing program slices. It also presents a complete approximation for computing static slices by constructing a term dependence graph, which is the equivalent of program dependence graphs. Program slicing involves analyzing data and control flow to identify program statements related to computed values at specific program points or variables. While program dependence graphs are effective for imperative programs, they are not appropriate for representing dependences in functional programming due to their granularity. The paper then introduces a new notion of dependence in term rewriting for defining static slicing in a functional context.

The paper is structured as follows: it begins with a review of term rewriting concepts, followed by an explanation of the approach to static slicing in a functional context. It then introduces a new data structure called term dependence graph for computing static slices, and concludes with a discussion of related work.

The paper defines tree terms as trees representing terms, with nodes labeled with the symbols of the term and directed edges from each symbol to its arguments. The algorithm for computing static slices is shown to terminate, and its completeness is proven by demonstrating that all possible computations can be traced using the term dependence graph.

Previous work has attempted to adapt program dependence graphs to the functional paradigm, such as the introduction of functional dependence graphs by Rodrigues and Barbosa. These graphs represent control relations in functional programs but are limited to high-level functional program entities, with functions being the lowest level of granularity considered.