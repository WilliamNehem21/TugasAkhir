Translation validation (TV) is a method used to verify that the output code generated by a translator, such as a compiler, accurately translates the source code. Rather than focusing on the validation of the translator itself, TV aims to validate the correctness of each translation by generating formal proofs to confirm its accuracy. Recently, there has been a growing interest in applying TV to verify the correctness of compilation and optimizations.

To address the challenges of verifying an entire compiler, particularly in ensuring the generation of correct target code for every possible valid source program, translation validation is employed to validate each run of the compiler by comparing the actual source and target codes.

Considerable research has been conducted to develop TV techniques for optimizing compilers that utilize structure-preserving transformations (e.g., dead code elimination, loop-invariant code motion, copy propagation) as well as structure-modifying transformations (e.g., loop reordering transformations such as interchange and tiling). The authors and other researchers have previously described a prototype tool, TVOC, designed for performing translation validation on the Intel Open Research Compiler (ORC), which incorporates a large number of both types of transformations.

TVOC utilizes various proof rules, specific to different optimization techniques, to validate loop reordering transformations. While a unified proof rule would be ideal, different proof rules are currently employed for interchange, tiling, and skewing, compared to fusion and distribution.

When presented with the target code resulting from a series of transformations of the source code, TVOC synthesizes intermediate versions of the code, based on its estimations of the performed transformations. It then validates each translation from the source to these intermediate versions and from the intermediate versions to the final target code.

To determine which optimizations were carried out without relying on information produced by the compiler, the researchers have developed a set of heuristics for generating this information using only the source and target code. These heuristics have been used for the validation of structure-modifying transformations, specifically loop reordering transformations.

The paper outlines the necessary background for understanding the validation of individual structure-modifying transformations, describes the generalization of the proof rule for loop optimizations, presents techniques for validating combinations of optimizations, introduces the developed heuristics, and concludes with a discussion of deterministic transition systems and verification conditions.

Furthermore, the paper explains comparison checking, a related approach where unoptimized and optimized versions of code are compared on particular inputs to detect optimization errors. Additionally, it discusses structure-modifying transformations, particularly reordering transformations, which include various loop transformations and the identification of alignment through the comparison of the middle elements of loop index variables.