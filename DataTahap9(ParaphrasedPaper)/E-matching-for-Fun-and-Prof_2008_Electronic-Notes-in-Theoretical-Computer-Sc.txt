Efficient management of quantifiers is essential for solving software verification problems. E-matching algorithms are utilized in satisfiability modulo theories solvers to handle quantified formulas through instantiation. This paper presents two new, efficient algorithms for addressing the e-matching problem and compares them with a well-known algorithm from the existing literature.

Because boolean formulas are not treated as terms, it is sometimes impossible to designate a single trigger containing all the quantified variables, as seen in cases such as the transitivity axiom. In such instances, a multitrigger, which is a set of triggers intended to match simultaneously and preferably shares variables, is used.

A novel matching algorithm optimized for linear triggers is described in this section. Linear triggers are triggers in which each variable occurs at most once, the linearity of which allows for more efficient processing as the matching problems for subterms become independent.

The paper outlines an example that yields certain results based on a given ordering of terms and defines analogous operators for s-trees of previously defined operators.

During performance testing, it was observed that many triggers shared the head symbol and matching them was time-consuming. The triggers also had a simple form, known as flat triggers, which are triggers where each variable occurs at most once and at a depth of one.

Flat triggers with a given head can be matched all at once by constructing a tree that indexes all the triggers with the given function symbol in the head. This tree can be viewed as a special kind of discrimination tree where each child of the pattern is considered a constant term.

All three algorithms discussed in the paper have been implemented inside the fx7 smt solver, with each implementation being highly optimized to address specific challenges encountered during performance testing.

The design of matching algorithms must also take into consideration incrementality, and the paper discusses the implementation of an optimization technique for achieving incrementality. The effects of this optimization are then discussed, considering the different usage patterns of the matching algorithm.

Tests were performed on a specific computing environment using a set of randomly selected verification queries generated by certain tools, and the results are discussed in the context of other existing smt solvers.

The paper also touches upon the participation of various solvers in a smt competition and the relevance of e-matching in software verification problems, based on the performance of the participating solvers.

Finally, the paper references an earlier work and concludes by providing additional context for the study.