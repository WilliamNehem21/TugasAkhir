Traditional standardized exchange formats have been ineffective in creating a unified environment for supporting and automating reverse engineering tasks due to their rigid and prescriptive nature, which imposes specific functionalities and standards on tool developers for integration. In contrast, an Oasis implementation involves a selection of reverse engineering tools that offer shared services to the integration. Each tool provides functionalities such as generating relevant outputs from inputs, usually in the form of source code or related information.

Despite Fahmy tool's inability to represent variables directly, variable instances can be derived from the usevar representation. These unique variable instances are created based on the entity containing the variable and are identifiable within the range of the usevar relationship, generating variable and containment/use relationships in the conceptual space.

The loss of precision in an Oasis implementation may indicate the need to reassess the domain ontology and differentiate between important concepts to enhance precision and prevent the loss of distinction between concepts when mapping them from the conceptual space.

An important consideration when implementing shared services in an Oasis system is the issue of information dilution, where users may have expectations for shared services that exceed their actual capabilities. Furthermore, subtle differences in representations supported by tools participating in an Oasis implementation can affect the integration of information.

The Oasis proof of concept implementation successfully demonstrated the feasibility of service-sharing for integrating information and services among reverse engineering tools. It has also highlighted the need to address concerns related to factbase filtering processes within the system. Further research is necessary to explore the impact of these issues on reverse engineering tool integration and system integration in general.