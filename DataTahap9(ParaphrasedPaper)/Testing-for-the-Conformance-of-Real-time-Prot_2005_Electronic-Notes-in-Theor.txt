The priority inversion problem occurs when processes with different priorities concurrently seek to access critical sections, which can lead to overly pessimistic estimates of worst-case response times for real-time processes. Various protocols have been proposed to address priority inversion, including the priority inheritance protocols (PIP) and the priority ceiling protocols (PCP), which provide more optimistic worst-case response time estimates.

However, despite the importance of predictability in time-critical applications, many PIP and PCP implementations are faulty and may violate time bounds. This paper presents a toolset for effectively and flexibly validating PCP protocol implementations, with a significant portion of the validation process being automated.

In the realm of real-time and embedded applications, many operating systems and run-time executives vie for market dominance, with one key selling point being the availability of protocols to address priority inversion.

The reactive nature of the protocols is specified using statecharts, which describe interactions between active objects (processes) and the scheduler. These statecharts are represented in a unique notation based on a DTD and provide insight into the syntax of interactions.

While class diagrams and statecharts help to specify the syntax of interactions, the semantics—particularly the prevention of forbidden interleavings—are expressed using so-called Z-specifications. Z was chosen for its ability to express the semantic behavior of the protocols in a mathematical manner, making it suitable for formal proofs.

The invariant PCPSystemInv is used to prove fundamental properties of systems under the priority ceiling protocol, such as the guarantee that a process (e.g., P1) owning a critical section (C1) will not be blocked under the PCP. PCPSystemInv ensures that processes potentially able to block P1 are not allowed to own conflicting critical sections.

Additionally, diagrams representing the actual priority of running processes are generated automatically, depicting the effects of inheritance and the blocking relations between processes. These diagrams illustrate the impact of critical section acquisition attempts on process states.