The syntax can be customized by the user to a large extent, enabling the selection of the most suitable syntax for each problem. Notably, user-declared operators can possess attributes such as associativity and commutativity, simplifying multiset rewriting. This paper extensively relies on this feature in all its specifications.

The aim of this section is not to present a comprehensive tutorial on rewriting logic and Maude. Instead, the intention is to provide a glimpse of the underlying theory and furnish sufficient information for understanding the specifications of the examples in the subsequent sections. For an in-depth treatment, we recommend interested readers to refer to the original paper introducing rewriting logic, the Maude manual, and other papers referencing rewriting logic.

To illustrate both these concepts and Maude syntax, consider the following example. On a blackboard, there are natural numbers, which can be replaced by their arithmetic mean at any time. The static part corresponds to the depiction of the blackboard and the numbers. First, their sort (or type) must be declared, followed by the writing of the well-known Peano constructors. Comments are indicated with "---".

The subsort declaration informs Maude that a single natural number serves as a valid representation for the blackboard. Multiset union is denoted with empty syntax. Notably, this operator possesses two attributes, assoc and comm, so terms of sort blackboard are considered modulo associativity and commutativity (e.g., s(0) 0 and 0 s(0) are indistinguishable).

Flavius Josephus, a renowned Jewish historian, was trapped in a cave with a group of 40 Jewish soldiers surrounded by Romans during the Jewish-Roman war in the first century. According to legend, they opted to form a circle and rotate a dagger around it, causing every third remaining person to commit suicide. Josephus, eager to survive, quickly determined the safe position.

A classic puzzle featured in the 1995 film "Die Hard: With a Vengeance" involves deactivating a bomb by balancing 4 gallons of water. Though the water supply is unlimited, only three basins with capacities of 3, 5, and 8 gallons are available.

At any time, one can either empty a basin or fill it completely, facilitated by the rules empty and fill. When one basin has enough space to hold the content of another, all the water from the second basin can be transferred using rule transfer1. It is noteworthy that this is a conditional rule (introduced with the keyword crl), with the condition following the keyword if. The case where there is remaining water after pouring one basin over another is addressed by the conditional rule transfer2 (where the operator sd denotes subtraction over natural numbers, specified in the predefined Maude module nat). Combining these last two rules into a single rule would result in a less clear outcome.

The traversal of the bridge is modeled by two rewrite rules: one for a single person crossing and another for two people crossing. It is important to note that for someone to be permitted to cross, their position relative to the bridge must match that of the flashlight, represented by having the same variable p twice on the left-hand side of the rules. Additionally, since is commutative, the condition in the second rule amounts to no loss of generality.

After organizing the information, it becomes evident that Bono and Edge must be the first to cross. Then, Bono returns with the flashlight, which is then taken by Adam and Larry. Finally, Edge brings the flashlight back to Bono, and they cross the bridge together for the last time.

The state of the board is represented as a multiset of pieces with the operator. Each piece (bigsq, hrect, vrect, smallsq) has a constructor, along with another one (empty) indicating an empty space (considered a special kind of piece). These constructors require two natural numbers as arguments, corresponding to the coordinates of the upper left corner of the piece; the origin (1, 1) is located at the upper left corner of the board.

The representation of the moves as rewrite rules is straightforward, with each move involving a piece and at least one empty space. For each type of piece, there are four rules corresponding to the four possible directions. For instance, moving the big square one position to the right is captured by the rule sqr below.

A shepherd needs to transport a wolf, a goat, and a cabbage to the other side of a river, but leaving the wolf alone with the goat or the goat alone with the cabbage would result in one being eaten. Constants left and right represent the two sides of the river. The shepherd and his belongings are represented as objects with an attribute indicating their location. The constant initial denotes the initial situation where all objects are on the left riverbank. The rules represent the permissible ways of crossing the river based on the boat's capacity, utilizing an auxiliary operation change to modify the corresponding attributes.

The square has three arguments: the first two indicate its coordinates (column/row), while the last one indicates whether it is covered or empty. Despite the fixed positions of the squares on the board, the attribute comm for could be considered necessary. This allows for a more unified and simple presentation of the rules for positioning the dominoes both horizontally and vertically, focusing solely on the two squares involved in placing the domino. Removing the attribute comm and representing the board as a list would require all squares in between to be represented in one of the rules.

Attempting to obtain the answer results in a state explosion problem, as the program runs out of memory before producing any results. To address this, an approach starting from the top of the board towards the bottom, or from the left towards the right, or even in a diagonal manner beginning at the upper left corner could be employed. The third approach yields a result and requires an auxiliary operator cdiag to check if all positions preceding a given square according to the diagonal order have been covered. Additionally, similar to Section 4, complete control of all board elements is needed, necessitating enclosure within the constructor {_}.

One possibility is using membership axioms [3, chapter 4] to refine the state representation. For example, the multiset constructor allows repetition of elements, but this should be prohibited in certain situations. Moreover, in puzzles such as the Khun Phan puzzle, a piece cannot be stacked on top of another. While this aspect has not been utilized in the aforementioned puzzles, memberships are suitable for ensuring that all elements are distinct.