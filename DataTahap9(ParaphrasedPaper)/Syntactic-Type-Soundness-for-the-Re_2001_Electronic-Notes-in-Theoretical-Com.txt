Tofte and Talpin's region calculus is a polymorphically typed lambda calculus with annotations for memory allocation and deallocation. It serves as an intermediate language in compiler design for ML-like languages and uses static region and effect inference to annotate regions, making it an attractive alternative to garbage collection. The soundness of the region and effect system is crucial for ensuring safe deallocation of regions, ensuring that deallocation only occurs for objects that are provably no longer in use.

Tofte and Talpin have established the type soundness of the region calculus through rule-based co-induction, which, while complex and non-intuitive, provides a formal proof. The low-level big-step operational semantics, involving explicit store manipulation, is a major factor contributing to the complexity. In this paper, we introduce a small-step operational semantics for the region calculus, based on syntactic rewriting, and prove type soundness following the approach of Wright and Felleisen, leading to simpler inductive proofs.

Memory management for dynamic data structures presents a challenge in programming, with the timing of memory deallocation being critical to performance and safety. The region calculus offers an alternative approach to memory management for ML by dividing memory into regions allocated in a stack-like manner, facilitating instantaneous deallocation by popping the topmost region from the stack. This method enables ML to be implemented without garbage collection, and in some cases, it can even prove the semantic deadness of a pointer, allowing for safe deallocation.

The existing proof of consistency, or type soundness, for the region calculus by Tofte and Talpin is complicated due to the co-inductive definition of consistency caused by the explicit use of a store in their big-step semantics. This paper presents an alternative proof of type soundness for the complete polymorphic region calculus, addressing the complexities associated with polymorphic recursion and including illustrative cases.

Additionally, we introduce a small-step operational semantics for the region calculus and provide extensions to the static semantics proposed by Tofte and Talpin. Furthermore, we discuss our work on a binding-time annotated version of the region calculus and highlight the importance of establishing the correctness of the binding-time analysis for achieving type soundness. Finally, we outline the remaining necessary properties to be demonstrated, such as semantics preservation, in analogy to previous results for a monomorphic version of the computational metalanguage.