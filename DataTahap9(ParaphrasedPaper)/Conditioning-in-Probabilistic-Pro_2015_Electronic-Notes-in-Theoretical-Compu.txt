In recent years, there has been a significant increase in interest in probabilistic programming, largely due to its broad applicability. It has found uses in various domains such as machine learning, where it is used to describe distribution functions, and in security, where it is employed to describe cryptographic constructions and experiments defining security properties. Probabilistic programming languages, such as Church and modern approaches like Probabilistic C, Tabular, and R2, have made these fields more accessible to programming communities.

To model probabilistic programs with conditioning, an extension of Probabilistic Guarded Command Language (PGCL) has been proposed, called Conditional PGCL (CPGCL). At the syntactic level, observations are introduced using the instruction observe(g), where g is a boolean expression over v. The effect of such an instruction is to block all invalid program executions violating g and rescale the probability of the remaining executions so that they sum up to one.