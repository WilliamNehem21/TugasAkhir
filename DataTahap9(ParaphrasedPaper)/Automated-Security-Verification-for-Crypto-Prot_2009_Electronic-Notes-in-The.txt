The paper focuses on the need to establish a practical connection between software specifications and their implementations to improve the security of systems. Specifically, the researchers address this issue in the context of crypto-based Java implementations, such as crypto protocols, by using automated theorem provers for first-order logic to link the implementation to a specification model. The authors provide details on applying this approach to the open-source java implementation jessie of the SSL protocol and briefly discuss how these results can be applied to the standard Java Secure Sockets Extension (JSSE) library.

The work outlined in the paper, which builds upon prior research, is aimed at addressing the shortcomings of existing implementations of crypto protocols. The motivation stems from the observation that current crypto-based software is not typically automatically generated from formal specifications or developed under the supervision of security analysts. As a result, even when corresponding specifications are formally verified, implementations may still contain vulnerabilities related to the insecure use of cryptographic algorithms. The paper cites an example of a crypto protocol whose design was formally verified for security, but its implementation was later found to have weaknesses in its use of cryptographic algorithms.

The authors clarify that their objective is not to fully formalize the verification of Java code, but rather to enhance the understanding of the security properties enforced by crypto protocol implementations in an as automated manner as possible. They assume that the cryptographic algorithms called in the crypto protocol implementations have been correctly implemented, and their aim is to verify that they are used correctly in the crypto protocol. Furthermore, the researchers note that due to abstractions introduced for efficiency purposes, such as abstracting from the identity of the message sender, the approach may produce false alarms, although practical examples of this have not yet emerged.