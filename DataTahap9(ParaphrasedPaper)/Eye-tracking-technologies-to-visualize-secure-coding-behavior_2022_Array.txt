Secure programmers commonly analyze various aspects of programming code, such as syntax, semantics, program flow, and overall program execution. Their primary focus is on identifying security weaknesses and determining suitable mitigation techniques. However, the ways in which secure programmers with diverse skills approach the discovery and remediation of vulnerabilities can differ inefficiently. Although the importance of secure coding is increasing, there is a lack of understanding regarding secure coding behavior. An understanding of secure coding behavior and the challenges encountered during coding can help improve learning content and enhance the abilities of secure programmers.

The main challenge arises from stimuli that are controlled by the user. Secure programmers engage in various tasks such as reading documentation and guidelines, writing source code, and using security scanning tools. They often perform these tasks simultaneously with multiple applications, rapidly shifting their focus between them.

This study provides a realistic software development environment in which participants can scroll through documents and source code files, switch between multiple source code files, use static analysis tools, and conduct web searches. The design allows participants to control the process of fixing vulnerabilities, providing a natural coding environment for evaluating the value of eye gaze visualization techniques for secure coding behavior.

The paper is structured as follows: Section 2 introduces general information about secure coding, educational materials on secure coding, eye tracking, and a summary of existing visualization approaches and their limitations. Section 3 reviews the type of stimuli used in hands-on secure coding learning modules. Section 4 contains information about eye tracking and visualizing the behavior of secure programmers. The paper emphasizes the need to improve secure coding behavior and methods through a deeper understanding of how secure programmers approach coding problems.

Software vulnerabilities can exist in various aspects of source code, including the lack of focus on security threats during application development, the use of open source or third-party components, increased interconnectivity, and sharing of user data over network devices and accounts. Secure coding is an essential aspect of software assurance and vulnerability management. Developing secure source code during the software development lifecycle is preferable as the cost to mitigate vulnerabilities after software publication is typically higher.

Our study utilized a hands-on approach, which involved using a photo and video web sharing application to teach participants about vulnerabilities listed in the Common Weakness Enumeration (CWE) repository. The CWE repository provides a list of common weaknesses and example code and exploits applicable to several programming languages. The study aimed to visualize the eye gaze behavior of participants while they engaged in secure coding activities.

It is challenging to determine the cognitive load on individuals, but eye tracking technology, in combination with questionnaires and various stimuli, can help examine secure coding patterns and behaviors. Our research focused on visualizing the eye gaze of secure programmers to study their fixation and transition patterns. Fixations occur when the eye is relatively fixed at one point, while saccades occur when the eyes move rapidly between fixations.

Creating areas of interest (AOIs) on presented stimuli is a commonly adopted technique to analyze eye tracking data. The methodologies used to transform raw eye fixations and saccades into meaningful insights are lacking for dynamic media-based stimuli such as source code reading. Determining the visual scan path that participants take in the chronological order of stimuli viewing can prove beneficial in understanding secure coding behavior.

Our study aimed to improve visualization methods for multiple types of stimuli content, including dynamic and interactive stimuli, to capture the behavior of secure programmers during secure coding exercises. We explored visualization techniques for reading documentation, programming content, and dynamic interactive content, and devised methods to study the behavior and strategies used by secure programmers to learn and work on secure coding exercises.

In conclusion, our research emphasizes the need to improve methodologies for investigating and analyzing eye tracking data for software development and secure coding. Our study utilized eye tracking technology to examine participants' behavior and learning strategies during secure coding tasks, aiming to enhance visualization methods for eye gaze in secure coding.