Various numerical programs, such as those utilized for physics simulation and image processing, rely on graphics processing units (GPUs) to enhance performance through high parallelism. As a consequence, ensuring the accuracy of GPU program development has become a critical concern. While previous tools have addressed data race checking for a large number of threads, hierarchical memory spaces, and thread schedules, the detection of unsafe type-casting has not received significant attention. This paper focuses on this issue and proposes practical solutions based on static typing.

The static analysis method introduced in this study monitors potentially negative values (for both integers and floating-point numbers) and examines whether such values are used in fp2ui casting. The approach is conservative, and thus may produce false warnings of unsafe fp2ui. To mitigate this, the paper presents two techniques for reducing false alarms: manual hints and pre-defined function contracts. Manual hints enable the method to communicate with external sources, such as users or other analyzers, while pre-defined function contracts allow for tracking possibly negative values at a high-level abstraction, rather than delving into source code details, thereby enhancing analysis accuracy. Moreover, this technique enables the method to handle dynamic linked routines with unavailable source code. The contributions of the work are summarized as follows:

1. Development of dynamic tools that instrument programs and establish conditionals to check casting arguments at run-time.
2. Introduction of a static analysis method for detecting unsafe type-casting and its prototype integration with a GPU program analyzer, demonstrating the ability to avoid many false alarms in practice.
3. Plan to incorporate symbolic analysis to improve detection accuracy and integrate with program synthesis to generate low-overhead safe programs in future work.
