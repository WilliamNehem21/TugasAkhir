This academic paper presents a method for evaluating the effectiveness of a Java test suite by incorporating JML specifications associated with the tested Java program. The proposed approach involves extracting a predicate-based graph from the JML method specifications and then measuring the coverage of this graph in relation to the nodes visited by the test suite. Additionally, the paper introduces a tool that serves as a precompiler for Java, responsible for measuring and reporting the coverage based on these criteria.

The paper highlights the importance of evaluating the quality of a test suite, as exhaustive testing is often not feasible. It discusses existing techniques for test suite evaluation, including mutation testing and coverage measurement on control-flow and data-flow graphs. It also explores model-based testing and conformance testing, focusing on the role of JML as a behavioral interface specification language for Java programs.

The structure of the paper includes sections on the modeling capabilities of JML, the coverage criteria based on method specifications, the definition of condition coverage, and the implementation and experiments conducted. It also covers related work in the field, concluding with future directions for research.

The paper describes the JML runtime assertion checker (RAC), which verifies JML specification clauses during program execution. This tool acts as a precompiler by adding verifications related to preconditions, invariants, exceptions, and postconditions to the source code of the program. The paper also discusses the practical considerations in applying these verifications and presents the principles of checking JML specification coverage, along with the development of a coverage report manager.

Experimental results from a case study involving the demoney applet demonstrate the feasibility and efficiency of the proposed approach, as well as the potential for integrating the approach with testing tools like Jartege. The results show that the additional cost of using the coverage tool on top of the RAC is minimal, even for larger test suites.

The paper compares the proposed approach with existing tools and techniques, emphasizing its novel application of coverage criteria to a predicate-based graph extracted from JML method specifications. It also highlights the advantages of using a specification coverage tool over code coverage, as it allows for more specific measurements based on a black-box view of the program.

In summary, this paper proposes a method for evaluating the quality of a Java test suite by incorporating JML specifications, introduces a tool for measuring and reporting coverage based on these criteria, and presents experimental results and comparisons with existing techniques.