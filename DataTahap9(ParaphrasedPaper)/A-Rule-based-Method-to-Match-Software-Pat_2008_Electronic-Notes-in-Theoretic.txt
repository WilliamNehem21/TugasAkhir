Maintenance is widely acknowledged as the most costly aspect of the software development process, and various techniques and processes have been suggested to facilitate this task. Among these, design patterns stand out as a significant proposal, offering a set of refined and reusable solutions to recurring design challenges. The object-oriented community has readily embraced design patterns due to their ability to simplify the design, comprehension, and re-engineering of software.

However, these proposals, situated at the intersection of programming languages and design models, suffer from a lack of formalism, leading to their empirical and manual application, which can be tedious and error-prone. Automating or at least providing assistance for this task is therefore essential.

Approaches utilizing pattern description languages, such as Lepus, introduce a (graphical) formal language that greatly enhances expressiveness. Unlike ad hoc collections of loosely connected concepts, Lepus arises from a deep understanding of a small number of fundamental building blocks that are prevalent in object-oriented design. Designers can easily define Lepus descriptions of common design patterns, allowing for customization, the creation of new patterns, or arbitrary combinations of existing patterns.

However, Lepus has limitations in expressing descriptions of important properties, such as circular dependencies and antipatterns, which are crucial for identifying parts of a complex model that deviate from the expected design properties. Additionally, the proposed prototype only operates on code and not directly on UML models.

In this paper, we formalize the merging of all the class diagrams of a UML model as a graph-shaped structure over a set of classes and a set of relations between classes. We also consider typical method properties and attribute handling, although these details are omitted for simplicity.

For instance, we present an example involving an antipattern that cannot be expressed with Lepus, demonstrating our work on detecting cycles in a class diagram. We are currently developing a technically advanced extension of our tool that integrates the extraction of class information directly from source code by building a parser for the target language and then traversing the parse tree.

Our work in this paper introduces a formal language for describing both design patterns and antipatterns, providing a small number of basic building blocks that are prevalent in object-oriented design, as well as language connectives for combining these blocks as desired. This language allows for the definition of descriptions of common design patterns, as well as customized variations or arbitrary compositions of other patterns.