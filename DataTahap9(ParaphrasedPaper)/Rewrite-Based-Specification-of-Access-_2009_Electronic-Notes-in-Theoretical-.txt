Our technique is applied to two established models in the field of computer security. We analyze Mclean's security model, which aims to extend the Bell and LaPadula model to address joint access. We demonstrate that when certain simplifications are implemented in order to connect the general framework for joint access with BLP, it compromises the confidentiality aspect.

Section 4 outlines the encoding of the two policies in TOM, while Section 5 illustrates how these models can be verified and suggests optimizations to reduce the search space and speed up the verification process. In Section 6, we explore related works and provide a conclusion to the paper.

Bell and LaPadula have formalized the concept of mandatory access controls primarily for the military domain. The essence of the BLP model is to enhance discretionary access controls, depicted in an access control matrix, with mandatory access controls to enforce information flow policies. In this paper, we specifically focus on the mandatory aspect and do not delve into how the contents of the access control matrix can be modified by subjects. It's important to note that our interpretation and formulation of the BLP rules differ from the original work, as we align them with our more current formalism.

The "the-secure" property prohibits a program running at the secret level from writing to unclassified objects, even if it is permitted to do so by discretionary access controls. Practically, this property is not applied to human users, but rather to programs, as human users are trusted not to leak information. The Mclean security model extends the BLP model and introduces the concept of joint access, which allows for the expression of tasks that must be accomplished by a set of subjects concurrently.

TOM is a language extension that adds new matching primitives to existing imperative languages, particularly in Java. The system's integration into existing languages allows for the efficient use of well-designed runtime libraries. Furthermore, TOM's compiler accepts several native languages as input and translates the matching constructs into the underlying native language during the compilation process.

In our example, the evaluation of the %match prints "same level" if the involved subjects and resources have the same security level, and "denied" when the access is not authorized. The patterns are implemented through non-linear pattern matching, and variables do not need to be declared, as their type is automatically inferred from the definitions of the operators using them.

The state's validity with regard to the BLP policy depends on the current state and the security levels lattice of the given instance of the policy. We rely on the hook mechanism provided by GOM for implicit accesses, as it performs additional treatments to ensure that the resulting term is in a particular canonical form.