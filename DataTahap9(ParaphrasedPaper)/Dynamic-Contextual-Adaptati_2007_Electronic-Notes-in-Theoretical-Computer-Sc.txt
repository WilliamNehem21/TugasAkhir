When creating systems using commercial off-the-shelf (COTS) components, it is often necessary to modify the components to function in circumstances not originally anticipated by their developers. Therefore, it is crucial to equip systems with the ability to dynamically adjust their behavior while in operation, based on changing environmental conditions. This paper presents a context-dependent, dynamic mapping between the interfaces of the adapted components, addressing some of the limitations of the static mappings seen in earlier works. This is achieved through the use of contextual environments, which establish flexible adaptation policies. The paper also includes a case study to illustrate the proposed approach and discusses the improvements that these mappings offer compared to previous works, as well as highlighting some outstanding issues.

At the protocol level, interface specifications detail the protocol governing the interactive behavior that a component follows and the behavior it expects from its environment. Problems, such as compatibility of behavior, can arise at this level, for example, determining whether components are susceptible to deadlock when combined.

Existing adaptors in various component-oriented platforms such as CORBA, J2EE, or .NET address several adaptation issues at the signature level, enabling some level of interoperability between software components. While these adaptors provide convenient ways to describe signatures using interface description languages (IDLs), they offer limited and low-level support for describing the concurrent behavior of components. Recent research efforts have focused on the interoperability of reusable components at the behavioral level, particularly dealing with adapting mismatching behavior of components in a dynamic way, particularly at the signature and protocol levels. This approach will also facilitate infrastructures supporting automated software adaptation for mobile and pervasive computing, allowing applications to adapt behavior at run time in a context-sensitive manner as devices move across different networks and the environment changes.

Instead of utilizing state machines (FSM), this work involves the use of process algebras for specifying behavioral interfaces concisely and at a higher level. Recent works have discussed the issue of typing component behavior and service specification. The paper includes an example scenario involving a client component using services offered by a video-on-demand (VOD) system.

In this scenario, adapting between both components involves the need to distinguish between the two available user profiles when translating messages to the VOD server. In a static approach, message correspondences are fixed, regardless of the current user profile. This necessitates providing new capabilities for adaptation to achieve context-aware message translation. The proposed approach advocates for the use of contexts for adaptation, associating the two user profiles available to different contexts in the system, allowing for transitions between them through certain actions.

The paper presents a formal notation for contextual component adaptation to achieve dynamic mappings between the interfaces of the components being adapted, through contextual environments that define flexible adaptation policies. The approach overcomes some previous limitations, making advancements to address issues such as dynamic access rights (user privileges) through contextual adaptation.

A case study related to a VOD system with different client profiles is used to exemplify the proposed approach, using contextual mapping to build the specification of the contextual adaptor based on a graph representing the contexts present in the mapping and the transitions between them. The paper also outlines the procedure for deploying an actual contextual adaptor based on the aforementioned specification and algorithm.

Furthermore, the introduction of security policies for the proposed dynamic adaptation is suggested. The adaptor should ensure the secure interaction of the adapted components, verifying properties to guarantee that they will not deadlock during an interaction session.