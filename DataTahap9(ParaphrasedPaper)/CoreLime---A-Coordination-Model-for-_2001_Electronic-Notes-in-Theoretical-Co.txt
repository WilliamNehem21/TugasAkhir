This academic paper introduces Lime, a middleware communication infrastructure designed for mobile computation that caters to the physical and logical mobility of devices and software components. The original specification of Lime is recognized for its complexity and difficulty in implementation. The paper aims to dissect the Lime model to discern its essential elements and subsequently propose a simplified model, referred to as CoreLime, which can better accommodate large and swiftly changing configurations of agents and hosts.

The prevailing computational models typically assume static deployments of devices and software components. However, in the realm of wireless computing, where ad hoc network connections are established and application software may manage its own deployment, these assumptions no longer hold. This necessitates the development of new computational models to facilitate application development in such fluid environments.

Several theoretical models for mobile computation, such as ambients and SEAL, have been proposed, focusing on migratory computation and mobile agents to abstract physical and logical mobility. While existing mobile agent systems predominantly prioritize support for logical mobility, they fall short in addressing the challenges posed by mobile hosts and lack adequate communication primitives for mobile systems.

Designing communication mechanisms for mobile environments is a daunting task due to the distinctive characteristics of mobile systems, such as transient and opportunistic communication, as well as the anonymity of communication relying on services rather than the identity of the service provider.

The paper documents the authors' efforts to comprehend Lime and devise a scalable implementation of its fundamental concepts. Their primary contribution is the formalization of the core concepts of the model as a process calculus, providing a foundation for reasoning about Lime programs and a specification for implementers. Additionally, they introduce CoreLime, a simplified and scalable basic calculus intended as a foundation for next-generation Lime implementations.

Apart from the standard Linda primitives, Lime introduces the concept of reactions, which consist of a tuple space, a template, and a code fragment. Reactions are executed when a matching tuple is found, and they are guaranteed to run when a matching tuple is encountered, distinguishing them from blocking read operations. Lime also introduces transient sharing of tuple spaces, enabling agents to declare shared spaces, which are merged silently if other agents have spaces with the same name.

Furthermore, Lime supports federated spaces, which are shared tuple spaces spanning multiple hosts and can be entered or exited by hosts through engagement and disengagement commands. The paper also presents the operational semantics of Lime along with its constraints and implementations.

As a future endeavor, the authors aim to enhance CoreLime with security mechanisms to address the anonymity and lack of trust in communication within mobile environments, such as secure channels, entity authentication, and access control mechanisms.