An important aspect of many academic curriculums is the use of educational tools to aid students in comprehending programming paradigms and acquiring proficiency in programming languages. This paper introduces the framework of a distributed visualization system based on event-driven architecture, discussing specialized content provision and visualization services, as well as two communication protocols, in an effort to investigate the potential for a standardized language.

One proposed approach is to break down monolithic visualization environments into multiple reusable, interconnected components, a concept put forth by the ACM SIGCSE working group. The suggested architecture emphasizes separating the production of the visualization trace from its interactive rendering and potential enhancement with questions and narration, with communication facilitated through a set of XML-based protocols.

Our research groups at the University of Pittsburgh and Ramapo College fully endorse this perspective. Our current project, supported by the NSF, concentrates on augmenting the value of visualization with explanatory and adaptive components. The distributed XML-based architecture could greatly facilitate the dissemination of our research findings, as it allows for integration with virtually any open visualization environment. To align with the newly distributed architecture, our groups have begun restructuring our work on adaptive explanatory visualization. This paper outlines our initial endeavor to implement explanatory visualization within a distributed framework, following the principles of the workgroup. We first present the concepts and the original implementation of event-based explanatory visualization, which forms the basis of our work, and subsequently introduce our distributed architecture with emphasis on both components and communication protocols. The paper concludes with a discussion of ongoing and future work.

To enhance the pedagogical value of visualization, the introduction of an element such as explanation (narration) or a predictive question can be integrated with an event, such as removing an item from a linked list. The ability to represent the flow of significant events in a standardized XML format allows for the decomposition of monolithic visualization applications into a system of independent components, including producers, enhancers, and players within the event flow.

The integration of the C-XML and V-XML formats signifies different approaches to content provision and presentation, respectively. Exploring the feasibility of a single format is a goal of the current work, with the optional inclusion of a format translator (FT) in the framework accounting for scenarios where an existing system generating an XML-based visualization specification does not conform to the standard format. FT enables such a system to integrate into the distributed framework and use a non-native visualization engine of its choice (or multiple engines simultaneously).

The interactive nature of the system allows students to navigate the program's execution forwards or backwards, and also facilitates jumping to a specific line of code. The system offers four modes: exploration, challenge, evaluation, and quiz, each designed to accommodate different levels of interaction and feedback between students and teachers.

As a proof-of-concept system, we plan to extend its coverage of programming constructs by identifying objects and events relevant to various programming contexts and designing a general, flexible, and extensible protocol to transmit this information within the system.