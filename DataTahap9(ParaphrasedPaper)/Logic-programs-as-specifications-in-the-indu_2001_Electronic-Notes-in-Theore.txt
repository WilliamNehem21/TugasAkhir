In this paper, we introduce a novel verification method that utilizes an assertion language capable of expressing user-defined properties through a logic program. The approach involves applying a verification framework to derive inductive conditions for establishing partial correctness, followed by demonstrating how these conditions can be verified using program transformation techniques.

It is important to note that while assertion languages allowing the expression of user-defined properties have been previously defined in the literature, our approach differs significantly. Our method does not associate assertions with program points, and it does not rely on run-time execution for verification; instead, it uses the user program to syntactically prove sufficient conditions for partial correctness.

To demonstrate the effectiveness of our approach, we adopt a semantics-based strategy based on abstract interpretation techniques. This allows us to derive sufficient conditions for establishing partial correctness with respect to various properties. By parameterizing the verification framework according to the property of interest, we can systematically derive verification conditions that are guaranteed to be sufficient for partial correctness.

The proposed approach entails the use of logic programs to intensionally derive information on the intended behavior, which is then used to syntactically transform and prove the verification conditions. Examples presented in the paper illustrate how most verification conditions can be easily proven through unfolding steps, suggesting the potential for semi-automating the process of proving verification conditions. Additionally, more complex properties may require the use of other transformation techniques, such as goal replacement.

Overall, our method showcases the potential for effectively verifying user-defined properties through syntactic proof methods and program transformation techniques.