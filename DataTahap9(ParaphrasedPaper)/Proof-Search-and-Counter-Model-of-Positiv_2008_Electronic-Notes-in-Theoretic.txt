This paper introduces an algorithm for conducting proof searches for positive formulas within minimal predicate logic. The method is based on the ljb deduction system, returning a deduction tree and proof when a formula is provable, and constructing a counter-model when the formula is unprovable. It provides proofs for the soundness and completeness of the algorithm.

The algorithm first conducts a backward proof search using the rules from the ljb system. If the formula is provable, the search culminates in obtaining a proof. However, if the formula is unprovable, the search halts when no rules can be applied to continue the search upwards, or when a loop is encountered. In such cases, the construction of the counter-model begins from the leaves to the root. This involves assigning different constants to each variable, providing original assignments for the atomic formulas of every leaf, and creating a model with subnodes for every internal node.

The paper is organized as follows: Section 2 provides foundational knowledge, Section 3 introduces the proof search and counter-model construction algorithm, along with two examples, Section 4 proves the correctness of the counter-model construction, and the final section provides a proof for the soundness and completeness.

Additionally, the paper discusses the correspondence between each world w of a kripke frame <r, w, d> and an extension lw of the language of predicate logic. It also defines a singleton model as a kripke model with a singleton set w, a trivial order wrw, domain d(w), and a set of atomic formulas s.

Furthermore, the paper discusses obtaining evidence for unprovability by assigning every free variable and using a c-substitute to substitute all free variables in the nodes of the fail tree. This involves assigning fresh constants to the variables instead of using brackets in order to move all brackets away. The details of this process are elaborated upon.