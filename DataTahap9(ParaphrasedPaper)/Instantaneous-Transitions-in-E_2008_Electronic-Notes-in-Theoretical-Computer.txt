Esterel is a concurrent programming language with an imperative syntax, specifically designed for creating control-oriented reactive systems. Its synchronous semantics ensure that active threads run in lockstep and communicate through instantly broadcast signals. Unlike most modern imperative languages, Esterel does not support the use of goto statements.

Internally, Esterel compilers use ad hoc intermediate languages, such as ic and grc, to expand Esterel control-flow constructs into jump instructions. This suggests that adding goto statements to Esterel may be feasible and have a minor impact on code generation. However, directly translating formalisms such as synccharts to internal formats does not assist users in reasoning about specifications.

The paper previously extended Esterel with a gotopause instruction, which ensures a delay of one instant between the execution of the jump instruction and the code following its target. The authors specified non-instantaneous jumps consistent with the principles of deterministic synchronous concurrency, eliminating the need for unfolding in their semantics and making compilation trivial.

In this paper, the authors introduce instantaneous jumps to Esterel by combining features of loops, exceptions, and non-instantaneous jumps. These instantaneous jumps have scopes and are prioritized, similar to exceptions. They rely on unfolding, similar to loops. The authors extend the exception handling mechanism of Esterel to introduce instantaneous jumps, enabling the placement of the exception handler at any point within the exception scope.

The authors outline the syntax and semantics of the Esterel language and the gotopause instruction in Section 2, formalize the catch instruction in Section 3, illustrate the encoding of state machines with instantaneous transitions through an example, and discuss related work and conclude in Sections 4 and 5, respectively.

They also provide details on the behavior of various constructs in Esterel, such as p; q, p|| q, loop p end, and trap t in p end, and describe how instantaneously propagating exceptions and priority handling are handled in the context of these constructs.

The authors emphasize that the design minimally changes the language and its semantics and only suggests a general, low-level syntax, with the possibility that additional syntactic sugar may be necessary.

Overall, the paper describes the extension of Esterel with an additional form of control flow constructs, called instantaneous jumps, and demonstrates their practical applications within the language context.