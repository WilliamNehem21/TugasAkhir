The study explores the circumstances under which the least bisimulations exist in relation to set inclusion. Specifically, it presents a method for eliminating redundant pairs from a given bisimulation and introduces the concept of conciseness property on process graphs, which signifies the presence of least bisimulations using the aforementioned approach.

To address this issue, the idea of concise graphs is introduced in Section 3. If a graph, denoted as 'g', is concise, then the least bisimulation between 'g' and another bisimilar graph 'h' (which may not be concise) can be constructed. More specifically, the process begins with any bisimulation 'r' between 'g' and 'h', and then removes non-reachable pairs based on the transition structure described in 'r'.

Definition 2.3 states that a path 'p' in 'g' is an access path of a node 's' if 'r'~'s', where 'r' is a root of 'g'. The set of access paths of 'g' is represented as 'accpath(g)'. A node 's' is considered reachable if it possesses an access path, and the set of reachable nodes in 'g' (with inherited transitions from 'g') is denoted as 'reach(g)'.

The subsequent theorem indicates that the maximal LTS on 'r' fulfills the conditions of Theorem 2.7, and it is noted that this is indeed the largest such structure. In the specific scenario where 'r' is functional...

Theorem 3.5 states that if 'r' is any bisimulation between 'g' and 'h', and either 'g' or 'h' is concise, then for any process graph 's' with functional bisimulations 'g: s g' and 'h: s h', the restrictions of 'g' and 'h' to 'reach(s)' factor uniquely through 'reach(r)'.

Under Theorem 3.10, assuming 'g' is concise and 'h' is bisimilar to 'g', as well as the assumption that every node in 'h' has at most one access path (i.e., 'reach(h)' forms a forest), the least bisimulation 'r' (from Theorem 3.7) between 'g' and 'h' is identified as a partial function from 'h' to 'g', and total on 'reach(h)'.

This section introduces four closely related categories of process graphs, with the fundamental category being 'p' of process graphs and functional bisimulations. The category 'cp' is a full subcategory of 'p' consisting of concise process graphs.

Corollary 4.3 states that if 'r' is a bisimulation on a process graph 'g', there exists a process graph 'g/r' and a functional bisimulation 'q: g g/r', such that every functional bisimulation 'f: g h' respecting 'r' uniquely factors through 'q'.

The discussion then shifts to the binary coproducts of bisimilar process graphs. The approach begins with taking the coproduct 'g+ h' in the set (i.e., disjoint union) for bisimilar 'g' and 'h'. There exists a process graph structure on 'g+ h', however...

Furthermore, it is highlighted that the coproduct construction may not succeed without conciseness, using the example of the graph 'g' and the swap relation 'r' in diagram (1). It is noted that in '(g+ g)/r', the two leaf nodes are identified, thus not constituting the coproduct due to the absence of a functional bisimulation from '(g+ g)/r' to 'g'.

Additionally, it is mentioned that the category 'cp' is a reflective subcategory of 'p', providing a means of creating, for each process graph 'g', a bisimilar concise graph 'h'. This construction is likened to closure operators on partial orders, with the distinction that the graph 'h' is formed by taking a quotient of 'g', rather than enlarging it. Following this, the discussion delves into the categories of restricted process graphs.

It is emphasized that obviously concise graphs are indeed concise. It is suggested that in practice, the specification of a concurrent system typically yields a relatively small state graph, thereby enabling the feasibility of verifying whether the specification is (obviously) concise. This raises the prospect of applying the results about least bisimulations to prove properties between a specification and its implementation, even if the latter may not be concise.

Finally, the study acknowledges the existence of specific unresolved questions. There is an expression of dissatisfaction with Theorem 3.8 and a query about whether conciseness also characterizes the general existence of least bisimulations, i.e., without reference to any particular construction. Additionally, there is a desire to establish a necessary and sufficient condition on 'g' so that the least bisimulation between 'g' and 'h' exists for any bisimilar 'h'.

The paper concludes by expressing an interest in comparing the categories of process graphs to the well-established models of parallel computation, and in exploring whether conciseness leads to useful subcategories in that setting. It also mentions the potential for using the approach taken in a parallel study as a guide for considering weak bisimulations.