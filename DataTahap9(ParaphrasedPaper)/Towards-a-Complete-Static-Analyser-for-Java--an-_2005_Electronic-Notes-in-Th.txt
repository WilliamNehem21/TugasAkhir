This paper introduces an abstract interpretation framework tailored for a subset of Java, excluding concurrency. The framework leverages a structural abstract domain whose concretization function is parameterized based on the relation between abstract and concrete locations. It addresses the scenario where structurally incompatible objects may be referenced by the same variable, necessitating the replacement of structural information with approximate details about the objects, with a focus on type information. While plain structural information enables precise intra-procedural analysis, it is quickly lost upon returning from a method call. To address this limitation, the framework introduces relational structural information to facilitate precise inter-procedural analysis without resorting to inlining.

The abstract domains in this framework contain structural information and closely resemble the standard domain, comprising an environment and a store. Abstract locations can be annotated with various types of information, making the framework generic. Structure sharing at the abstract level can be interpreted in several ways, leading to three variants of the abstract domains.

The paper is structured into five main sections. Section 1 offers a brief overview of the standard semantics, while Section 2 describes the abstract domains. Section 3 outlines the abstract semantics definition, and Section 4 delves into the analysis results for small programs. Finally, Section 5 discusses related work.

The study utilizes multiple abstract domains, all of which are structural and maintain a partial view of the heap structure. Abstract types are introduced when a variable or field may denote values with different types, and these abstract types belong to a parameter abstract domain, primarily focusing on type information.

The paper discusses the analysis of the method main.main3() and uses snapshots to detail the abstract store before and after specific method calls, demonstrating how the framework operates in practice.

In conclusion, the paper presents an abstract interpretation framework for a subset of Java, emphasizing its use of structural abstract domains and its potential for further extension and improvement to cover the complete Java language, including handling incomplete source code. The authors also outline their plans for future work, which involve exploring variants of structural abstract domains and extending the framework to encompass the complete Java language while addressing concurrency and the analysis of incomplete code.