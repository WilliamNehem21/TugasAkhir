The concurrent constraint programming (CCP) model of concurrency involves agents communicating with each other by sharing constraints in a shared store of partial information. The NTCC calculus extends CCP to include discrete time units for specifying reactive systems. Additionally, NTCC introduces capabilities for non-deterministic choices and asynchronous behavior. In Section 3, the paper outlines an approach for symbolically representing the behavior of NTCC processes and demonstrates the correctness of the construction with respect to the operational semantics. The paper also provides examples illustrating the computation of the symbolic model of a process. Furthermore, the logic used to specify properties is detailed in Section 4, and Section 5 explains how the symbolic model can be utilized in standard symbolic model checking algorithms. The paper concludes in Section 6 by discussing related work and briefly describing a prototype tool that implements the methodology.

The NTCC calculus extends CCP by incorporating discrete time units for specifying reactive systems that continuously interact with their environment. In this framework, time is divided into discrete intervals, and a process at each time interval receives a stimulus from the environment, executes with this stimulus as the initial store, and responds with the resulting store upon reaching its resting point. The residual process generated at the resting point is then executed in the next time interval.

The paper introduces the notion of parallel composition of processes and describes the behavior of local variables within processes. The approach involves using temporal formulas to compactly represent the reachable states of a process. Additionally, the paper discusses the use of Constraint Temporal Logic (CLTL) to express temporal properties of NTCC processes. The symbolic model of a process is shown to be a compact representation of its behavior, and standard symbolic model checking techniques are employed to verify if a process satisfies a given property.

The paper suggests future work in reducing the space and time required for property verification and addressing the state explosion problem. It proposes the development of tools for abstract debugging based on abstract interpretation frameworks for CCP programs to quickly identify design problems before verifying precise properties. The paper also plans to employ an abstraction of the constraint system to reduce the number of states generated by the technique.