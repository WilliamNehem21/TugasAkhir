The object modelling group's model-driven architecture initiative emphasizes the importance of refinement as a fundamental practice, yet acknowledges that its definition is vague and open to misinterpretation. This paper presents ongoing efforts to establish a precise definition for refinement, particularly through consistency checking, not only within the context of MDA but also more broadly in model-driven development across various domains.

Model-driven development (MDD) is not a specific methodology or process; rather, it can be implemented in diverse ways, such as through extreme programming, the rational unified process, the b-method, or a refinement calculus. The core aspect of MDD lies in the creation and transformation of models that align with the objectives of the development project. The specific languages and processes utilized for model construction and transformation will vary based on the project requirements.

It is noteworthy that refinement plays a significant role in MDA, despite the fact that the languages stipulated in MDA, which are predominantly UML-based, do not typically offer the level of formality one might expect in a refinement-centered approach. Furthermore, the utilization of multi-view languages in MDA poses challenges for achieving seamless refinement-based development.

An interesting issue arises in determining what constitutes a valid refinement step in MDA. While predefined transformations written in a standard transformation language, such as QVT, are intended to facilitate transitions from PIM to PSM or from PSM to code, customized (often manually created) refinement steps are employed for refining within a specific model type, such as from PIM to PIM. However, the validation of these custom, hand-written refinement steps remains an unresolved challenge.

MDA comprises two essential components: languages for expressing models and transformations applied to models. The languages used in MDA are primarily UML-based and are built on top of the Meta Object Facility (MOF), which serves as a fundamental language for defining other languages. Therefore, the transformations employed in MDA are defined in terms of MOF and its core constructs, such as classes, objects, and features.

The challenges associated with rigorously defining refinement in MDA are characteristic of endeavors to apply formal analysis techniques to semi-formal languages after their initial definition. These difficulties may be particularly pronounced in MDA due to the layered nature of the languages used, with UML being defined in terms of MOF.

In MDA, a diagram can convey one or multiple views of a model, and non-graphical languages can also be utilized to capture these views. The language itself consists of a syntax and a metamodel, which defines the constraints for language well-formedness. For instance, the metamodel for UML class diagrams may contain a constraint stipulating that all classes in a diagram must have unique names.

Rules like these, among others, can be expressed in Object Constraint Language (OCL) to facilitate their evaluation. Implementing this process is relatively straightforward, as exemplified by the OCL fragment provided in the paper to enforce a specific rule.

Structural and state-based rules alone are insufficient to fully capture model consistency in MDA, as the overall system model is divided into several parts, such as PIM and PSM. Consequently, the rules discussed must be applied to verify consistency, and at least two additional types of consistency must be checked.

Consistency with the domain and consistency of PSMS with the domain are among the additional types of consistency that must be addressed. Each domain, such as information systems or database design, imposes domain-specific rules that must not be violated. Since these rules may not be directly enforced by the syntax of the modeling language, additional mechanisms, such as stereotypes or metamodel refinements, must be employed to ensure their application.

Similar cross-model consistency rules must be observed when ensuring the consistency of PSMs with the domain model. This suggests that the distinction between PIM, PSM, and other models in MDA is not always particularly useful.

Furthermore, it is crucial for any cross-model consistency rules relevant to the context to be adhered to. For example, when a represents a PIM and b represents a PSM, all PIM-PSM consistency rules pertinent to the transformation from a to b must be satisfied. Similarly, if a represents a PSM and b represents a domain model, all PSM-domain consistency rules must be upheld.