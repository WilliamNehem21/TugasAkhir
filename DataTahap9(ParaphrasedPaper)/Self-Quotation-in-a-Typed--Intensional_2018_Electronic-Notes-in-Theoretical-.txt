The addition of intensional combinators to lambda-calculus aims to enhance the ability to analyze data structures and programs by enabling the factorization of components. This enables the conversion of abstractions into combinators, and the paper demonstrates how to type an intensional lambda-calculus using no more than the types of System F, including the ability to define and type the quotation function for accessing program syntax and its inverse. As a result, the calculus supports typed self-quotation, allowing for seamless transition between program analysis and execution, with all results verified in Coq.

Ensuring that the calculus is typed provides a crucial check on the entire approach, particularly in modeling each stage of interpretation by ascending one level in a type hierarchy. This serves as a safeguard, as it is challenging to perform analysis in the source language using this method, and can potentially limit the scope of available analyses. The paper also emphasizes the significance of typed programming languages in this context.

The factorable components of a term p are denoted as p| and [p], where p| and [p] represent the left and right components of p, respectively. The complete treatment of factorable forms is made more intricate by the need to factor abstractions. The polymorphic nature of the term m in the rule is essential for handling the components of p, regardless of their types. Furthermore, the paper describes a closed normal form and details the process of checking if p is an operator, using g to factorize p and recurse accordingly.

The status of an operator can be categorized as ternary op, binary op0, binary op2, binary op1, or ternary op1, while a term can be deemed factorable if it is a compound or an operator.

Finally, the paper suggests starting with a factorization operator g to add intensionality from the outset, enabling programs to undergo analysis using a divide-and-conquer approach. However, the challenges associated with exploiting type information during analysis are acknowledged, particularly in relation to querying and updating analyses, following a database approach.