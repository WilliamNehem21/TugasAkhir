Pattern abstractions, which are used in the rewriting calculus to describe rewrite rules and rewriting strategies, can be generalized by rule abstractions. Rule abstractions utilize arbitrary expressions instead of patterns and offer a way to represent innermost rewriting strategies for term rewriting systems, making them a crucial aspect of logic and programming language design and implementation. However, while rule abstractions are firmly rooted in both logic and programming language design, they currently lack well-established foundations.

Additionally, the method "par(x)" is defined to search for a method name assigned to the variable "x" and then install this method as a first-class citizen onto the object itself.

An operational semantics is defined using a natural proof deduction system Ã  la Plotkin to map every closed expression into a normal form, specifically an irreducible term in weak head normal form. The strategy presented adheres to lazy call-by-name evaluation, effectively handling matching failures and exceptions.