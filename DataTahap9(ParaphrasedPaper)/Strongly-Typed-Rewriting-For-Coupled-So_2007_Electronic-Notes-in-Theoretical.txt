The process of software evolution often involves coupled transformations, which occur when multiple artifacts need to be modified in a way that maintains consistency among them. An important example of coupled transformation is seen in the modification of a data type, its instances, and the programs that interact with it. In a previous study, the transformation of data types and instances was formally addressed through the development of type-safe, type-changing strategic rewrite systems. In this paper, we expand on this treatment to encompass the transformation of corresponding data processing programs.

The extension presented in this paper is based on the representation of data migration functions and data processors using a generalized abstract data type (GADT), which enables their formal treatment in a type-safe manner. These representations are then subjected to program calculation rules, which are utilized in type-safe, type-preserving strategic rewrite systems. To facilitate the calculation process, point-free representations and corresponding calculation rules are employed.

The process of coupled transformations is carried out in two steps. First, a type-changing rewrite system is applied to a source type, leading to the generation of a target type along with representations of migration functions between the source and target types. Subsequently, a type-preserving rewrite system is applied to the composition of a migration function and a data processor on the source or target type, resulting in the transformation of a data processor on the target or source type. All rewrite operations maintain type safety.

In the context of software renovation, coupled transformations are encountered, for instance, when adapting the schema of a database, necessitating the simultaneous migration of database instances and updates to the programs that interact with them.

A significant research challenge lies in providing a comprehensive conceptual framework for coupled transformations. This paper builds upon previous work by extending the formal treatment to include transformations of data processors, thereby making progress toward establishing a comprehensive framework. The paper also discusses the application of fusion or deforestation techniques to eliminate intermediate data types during program calculations.

The paper provides an explanation of how type-safe, type-preserving strategic rewrite systems are employed in program calculation, and how fusion laws are utilized to simplify processors of original data into processors that directly operate on new data. The combination of program calculation and type-changing rewrite systems enables the execution of coupled transformations. Furthermore, the paper emphasizes the importance of type representations at the value level in ensuring the type safety of both rewrite systems.