In cases where we are only interested in testing executability or observing the system's evolution without particular emphasis on a specific execution path, maude offers two pre-existing strategies: the "rewrite" command employs a top-down lazy rule-fair strategy, while the "frewrite" command utilizes a position-fair bottom-up strategy. Additionally, maude includes a "search" command for scenarios in which we seek to explore all potential execution paths from the initial term for states that meet specific criteria, conducting a breadth-first search of the possible rewrites tree. However, broader forms of execution may also be of interest, and the selection of suitable strategies is essential in executing rewrite theories. In the maude system, this requirement for strategies to control the rewriting process has been met through the development of strategies at the metalevel. These strategies are defined in extensions of the predefined module "meta-level" by employing predefined functions within it, such as metareduce, metaapply, and metaxapply, as basic components. This approach enables the definition of a wide range of internal strategy languages at the metalevel within the same rewriting logic framework, as opposed to defining it as an additional extralogical feature.