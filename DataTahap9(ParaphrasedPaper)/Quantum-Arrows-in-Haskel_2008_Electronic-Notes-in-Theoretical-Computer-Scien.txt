We posit that an accurate model for quantum computations should be comprehensive in terms of measurements and encompass the flow of information between the quantum and classical domains. We present two alternative models for comprehensive quantum computations, based on probability distributions of quantum state vectors and on density matrices with classical outputs. We demonstrate that both models can be structured using a generalization of monads known as arrows.

In previous research, we established that a general model of quantum computing, including measurements, based on density matrices and superoperators, is a specific instance of a generalization of monads called arrows. However, this model is solely based on quantum data and cannot express the transfer of information between the classical and quantum domains.

The paper is organized as follows: In section 2, we introduce indexed monads and indexed arrows in the context of Haskell. Section 3 provides a brief review of our previous work on modeling superoperators as arrows. In section 4, we present two alternative general and complete models for combined quantum and classical computations structured as indexed arrows. Finally, in section 5, we conclude.

Since the pioneering work of Moggi, various natural notions of computational effects have emerged, some of which can only be expressed as generalizations of monads. Of particular relevance to our work is the generalization of monads known as arrows, which is also incorporated into the programming language Haskell. In this section, we briefly discuss a variation of these notions in the context of Haskell, which we refer to as indexed monads and indexed arrows. These are the relevant notions required to structure quantum computations.

A monad is typically used to define and structure computations in programming languages, even those that are non-functional. In this context, a program featuring computations can be viewed as a function from values to computations. However, there are instances where we want to select specific objects from a set to apply a constructor, a notion that is slightly more general than monads and captured by the definition of a Kleisli structure. This is precisely what we refer to as indexed monads or Kleisli structures, where the constructor does not necessarily need to be an endofunctor on a certain domain. We can select specific objects from the domain to apply the constructor.

We aim to develop models that can express quantum computations involving measurements. However, our existing work is strictly based on quantum data and does not allow the direct expression of algorithms encompassing combined interactions of quantum and classical operations. We argue that a complete model for expressing quantum algorithms should accommodate both measurements and combined interactions of quantum and classical data.

Based on the idea that fully expressible languages/models for quantum computation should include more than one final measurement operation, thereby accommodating both measurements and combined interactions of quantum and classical data, we present two alternative general (involving measurements) and complete (involving both quantum and classical data) approaches for combined quantum and classical computations as indexed arrows. The first approach is based on a measurement-based strategy for quantum programs, while the second is based on probability distributions over quantum state vectors.

In addition, we provide a model for quantum computations based on a measurement approach, where a density operator represents the global quantum state and a probability distribution of classical values represents the classical part of the state. A quantum program operating on this state is interpreted by a special tracing superoperator, which in the general case traces out part of the state, returns a classical output, and leaves the system in a new state (possibly in a space with reduced dimension).

Furthermore, we present a function, uni2qprog, that constructs a quantum program from a unitary operator, which applies the default construction to build a superoperator from a unitary transformation. We also describe a program, tra, that forgets (measures) all quantum state, returning only a classical probability distribution as the result. We present an approach for calculating the output density matrix and the classical result of the program.

Our aim is to develop a combined state where the classical part is represented as a probability distribution of classical values, and the quantum part is represented by an explicit probability distribution over quantum states. A program acting on this combined state can operate on the quantum part, the classical part, or both. We outline the specifics of this representation and how it can handle unitary transformations and measurements of quantum data.

In summary, we have presented two general and complete models for combined quantum and classical computations structured as arrows. This presentation serves as a foundation for the development of a language in which the classical, probabilistic, and quantum layers are separate, thus simplifying reasoning about quantum programs. Our implementation serves as a prototype of the ideas in Haskell, and we aspire to integrate these results into a quantum programming language like QML.