The challenges learners encounter in programming often involve more advanced issues than individual concepts, so materials and activities for learning should also be aimed at developing advanced programming skills. Novice programmers commonly struggle with abstract concepts that they cannot easily relate to their everyday experiences. Providing supplementary interactive visualizations can aid in making these concepts more tangible at the outset.

An experiment was conducted during the fourth and fifth weeks of a programming course. The first week focused on loop structures, and the second week on arrays, chosen for being typically challenging for novice students and conducive to visualization.

Both the control and target groups had access to printed course materials for review before exercise sessions. Additionally, the target group received a web page with instructions on how to review using visualization examples and links. The reviewing materials for both groups included two visualizations to elucidate the concepts.

The homework assignments were identical for both groups, with the only difference being that the students used different tools to work on them. The reference group accessed the assignments on the course website and mostly used pen and paper, while some also used a regular code editor and compiler. The target group accessed the assignments on a web page, which included a visualization tool with a code editor for writing, compiling, and running solutions.

In addition to a small test, all students completed a survey providing background information about their programming experience and their feelings about course progress. They also reported the time spent reviewing the subject and completing the homework. The target group completed an extra survey about their use of the visualization tool.

The experiment was conducted within a typical teaching environment, leading to variations in circumstances between the two weeks. For instance, there were more absent students during the second week, which influenced the results. Furthermore, the subject matter, homework, and test differed between the two weeks.

The results indicate that using visualizations aided novice and struggling students in learning programming, as they learned more when they used visualizations to prepare for exercise sessions. On the other hand, students with previous programming experience already had a mental model of the subject, and therefore, the use of visualizations was less helpful for them.

While the results suggest that visualizations support learning, it is uncertain whether this effect is a direct result of their usage. It is possible that using visualizations makes the study process more engaging, leading to better learning outcomes due to increased time spent on studying. Nevertheless, the most crucial finding is that visualizations do enhance learning outcomes, regardless of the direct mechanism.

When incorporating visualizations into courses, educators should consider that not all students may be receptive to new learning tools. Since visualizations mainly benefit novices and struggling learners, their use should be optional to accommodate students with diverse learning preferences and prior experience.