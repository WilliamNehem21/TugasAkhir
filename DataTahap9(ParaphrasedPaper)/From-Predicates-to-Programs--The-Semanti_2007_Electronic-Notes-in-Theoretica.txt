Each method is defined by a set of three components: a precondition that must be met before the method is invoked, a list of attributes that may be modified, and a postcondition that describes the intended effect. The precondition depends on the values of attributes and inputs, while the postcondition encompasses inputs, outputs, and values both before and after the operation.

To ensure the accuracy of a generated implementation, additional constraints may be added to the postcondition, ensuring that each expression's value falls within the permissible range. For instance, in the previously mentioned example, the constraint "integer(a)" would be added to assert that the post-value of "a" is an integer. These constraints do not directly impact the program semantics or the resulting code.

Several possibilities exist for advancing the fundamental method language further. We are exploring its potential as an action language within UML class diagrams as an alternative to Object Constraint Language (OCL). We are also contemplating the elimination of the change list, as the information it provides can often be deduced from the postcondition. Additionally, we aim to permit nested universal and existential quantifications in the postcondition.

However, the greatest potential for further advancement lies in designing other aspects of the modeling language. We are striving to offer both theoretical and practical support for a broader range of global invariants. Furthermore, we are evaluating the use of state diagrams to represent the intended workflow and exploring the automatic integration of the information they contain.