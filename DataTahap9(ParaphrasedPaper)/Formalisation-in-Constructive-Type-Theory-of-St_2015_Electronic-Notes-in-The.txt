Inductive types can be defined in the usual manner by listing their constructors; however, they can also be parameterized by objects of other types, giving rise to families of types indexed by a base type, or dependent types.

As a result of this characteristic, type theory can be viewed as a form of constructive logic. Specifically, this is accomplished by representing propositions as inductive types, with their constructors serving as the introduction rules, or methods of direct proof, for the relevant propositions.

A concept known as the "freshness relation" holds true when a variable is not freely occurring in a term. We adopt the terminology and notation from works on nominal abstract syntax. Parameters to a function enclosed in curly brackets can be omitted when invoking the function.

The conventional definition of a free variable, denoted as _*_, remains unchanged. Freshness and freedom are essentially each other's negations. Instead of using negation, we choose to define two positive notions, or in programming terms, we naturally proceed by introducing the two types. From a programming perspective, this approach embodies the natural practice within a constructive mathematics framework.