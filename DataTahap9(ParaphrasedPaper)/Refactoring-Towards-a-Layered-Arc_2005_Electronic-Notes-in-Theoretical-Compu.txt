This paper demonstrates how the refactoring of object-oriented programs can be achieved using refactoring rules and programming laws. The authors present a refactoring strategy and showcase its application using template classes. Through this strategy, they refactor a representative program to improve its architecture, thereby achieving software quality factors such as reusability and extensibility. The formal development of the case study has led to the identification of new refactoring rules for ROOL and the enhancement of the refactoring strategy.

The paper is organized as follows: 
- Section 2 provides an overview of ROOL along with basic laws of commands and classes. 
- In Section 3, the authors present two refactoring rules used in their derivation. 
- Section 4 introduces a strategy for program refactoring in ROOL, focusing on structuring programs according to a layered architecture, and presents a case study. 
- Section 5 discusses related work. 
- Finally, Section 6 summarizes the achieved results and outlines directions for future research.

ROOL has established algebraic laws for commands and classes. The laws for commands deal with small-grain constructs, while the laws for classes consider medium-grain constructs. These laws have been proven to be sound with respect to a weakest precondition semantics of ROOL.

The authors propose a series of stages for their refactoring strategy, each involving the introduction of new classes and data and algorithmic refinement of existing classes. The goal is to transform a poorly structured program into a well-structured one according to a layered architectural design, promoting enhancements and reuse.

The paper highlights the limitations of existing approaches to refactoring, such as the lack of formal guarantees for behavior preservation. In contrast, the proposed approach is based on laws, ensuring that the application of a law modifies a program while leaving its behavior unchanged. The authors also plan to mechanize the application of programming laws using systems like Elan, paving the way for a fully formal guarantee of semantics preservation in program transformations.

In conclusion, the paper provides a formal and systematic approach to refactoring object-oriented programs, aiming to establish formal justifications for design changes and the structuring of systems according to design patterns. The authors intend to develop a tool to mechanize rule applications, providing a formal guarantee of semantics preservation in program transformations.