This academic paper introduces an automated method for identifying faults in C programs, focusing specifically on fault localization. The approach utilizes model checking and targets components of the program that, if modified, would rectify discrepancies between the program's actual behavior and its desired behavior. The method involves creating an extended version of the program based on a counterexample to the specification, and introducing abnormal predicates for program components. The objective is to identify the abnormal predicates that need to be asserted and determine how the respective components should be replaced in order to satisfy the original specification.

The paper compares its approach to existing fault localization methods and presents experimental data to demonstrate its effectiveness. Additionally, it discusses the general applicability of the approach across different types of program domains, and provides a specific instantiation of the method for localizing faults in C programs. The approach is further illustrated using examples from the Siemens test suite and the implementation of a data structure.

The paper concludes by highlighting the potential for further improvements to the approach, such as optimizing run time by employing blocking clauses and rerunning the satisfiability solver to find the full diagnosis, as well as addressing computational challenges related to program parsing and representation generation.