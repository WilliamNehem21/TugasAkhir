The programming language TCCP, or timed concurrent constraint programming, was created to model reactive systems by incorporating features like timeouts and preemptions. However, TCCP lacks a natural way to model other desirable features such as functional computations, including arithmetic operations. While it is possible to implement such operations in TCCP, each step of the computation takes time and can interfere with the intended overall behavior of the system.

TCCP, introduced as an extension of the CCP model by Saraswat, includes an implicit notion of time in its semantics and introduces a new conditional agent to handle negative information, allowing for modeling of timeouts and preemptions. In this paper, an extension of TCCP is proposed for modeling instantaneous functions to simplify and expedite arithmetic calculations. The current implementation of arithmetic functions in TCCP is non-intuitive and may lead to synchronization difficulties in the system.

The proposed extension can serve as a valuable tool for developers in terms of system verification, particularly in the context of concurrent systems where manual programming of synchronization may lead to errors. By allowing independent verification of the reactive and functional components of the system, the new capability provides assistance in detecting anomalies and synchronization errors.

The paper is organized as follows: Section 2 introduces the TCCP language, Section 3 provides motivation for the proposed extension through an example and presents the semantics for the new construct, Section 4 illustrates the proposed extensions using a representative example, Section 5 discusses the use of the new features for checking TCCP programs, and Section 6 outlines future work and conclusions.

The "tell" agent adds a constraint to the global store, making it available in the following time instant. The "choice" agent selects a branch based on the satisfied guard at that time. These essential points in the specification of the coffee machine are explained, emphasizing the use of streams to record state changes and the implementation of functions for calculating total money and returning change.

Function calls in the program can be considered as a means to introduce invariants or assertions for checking during system execution. However, the programmer needs to ensure that these invariants do not affect the original system behavior and must manage synchronization accordingly.