The practical challenge at hand is that most theorem provers rely on classical logic, but there is a need to accommodate logics with partial functions. While various approaches have been suggested to modify theorem proving for this purpose, our interest lies in finding a method to support partiality without altering the theorem prover itself. One potential solution is to create over- and under-approximations for the formula, a technique that has been successfully employed in three-valued model checking. In this paper, we present a technique for validating formulas in three-valued logic by reducing the problem to checking two formulas in standard two-valued logic. We construct a TCC (Type Checking Condition) formula akin to PVS, whose validity implies that the original formula is always defined. The paper is structured as follows: Section 2 introduces the syntax and semantics of our three-valued logic, Section 3 presents two key theorems justifying the reduction to two-valued logic, Section 4 outlines the outcomes of implementing these ideas in the theorem prover CVC Lite, and Section 5 provides concluding remarks. The implementation of this approach was relatively straightforward, only requiring a few hours for coding and debugging. Moreover, the verification of TCCs does not significantly impact the tool's performance on classical examples (without subtypes or partial functions), as the TCCs for such formulas simplify to true immediately. However, the impact on performance in large examples involving partial functions remains an aspect that requires further investigation. We have put forward a three-valued Kleene logic for applications that are best represented using partial functions. We have demonstrated how the validation of formulas in this logic can be addressed by checking the formula and a type correctness condition without altering the standard two-valued semantics.