smv, spin, and uppaal each operate on models described in their respective specification languages, necessitating significant effort to remodel existing systems using these proprietary formalisms. While model checking of higher level programming languages, such as C, C++, or Java, is a more efficient approach for existing systems, challenges arise when model checking C programs for embedded software.

C programs for microcontrollers often involve direct hardware accesses and embedded assembly statements, which are not supported by existing C code model checkers. Additionally, as C code is first compiled into assembly code before being deployed to the hardware, the compiled code may introduce errors that are not present in the original source code. Moreover, assembly code has a formal and well-documented semantics, making it a focus of research for model checking (as seen in [1,12,13,17,20]).

In response to the limitations of model checking assembly code, [mc]square 4 has been developed as a discrete, mostly explicit state, on-the-fly, CTL model checker capable of verifying assembly code for specific microcontrollers (Atmel Atmega and Infineon XC167), supporting both low-level features and source-level constructs. To address hardware dependency and the state explosion problem, [mc]square 4 utilizes an extensible architecture and implements various abstraction techniques, such as interrupt nondeterminism detailed in this paper.

Interrupt nondeterminism is dynamically applied at runtime to address the state explosion problem, allowing for a safe over-approximation of the concrete state space and establishing a simulation relation between concrete and abstract states. This technique is essential for modeling embedded systems with interrupts, as it effectively controls the effect of interrupts in model checking. Symbolic simulation, analogous to the approach in [mc]square, is another technique where symbolic values are utilized instead of explicit values.

The static analyzer component inspects the assembly program and creates a control flow graph (CFG), which is used by the counterexample generator to present counterexamples or witnesses. Annotations added by the static analyzer are used by the simulator to reduce the state space during model checking.

A case study is presented, demonstrating the effect of interrupt nondeterminism on the size of the state space, and potential directions for future improvements are discussed. [mc]square's use of interrupt nondeterminism for model checking programs using interrupts is essential, as without it, model checking of such programs would not be feasible due to the significantly higher number of states.

In conclusion, [mc]square's interrupt nondeterminism, combined with other techniques, serves as a crucial abstraction method for tackling the state explosion problem in model checking assembly code for embedded systems. Future research will focus on domain-specific abstraction techniques to enhance model checking for embedded systems using [mc]square.