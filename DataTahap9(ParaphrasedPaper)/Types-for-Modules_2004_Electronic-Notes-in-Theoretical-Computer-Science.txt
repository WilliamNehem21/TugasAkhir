The programming language Standard ML is comprised of two distinct languages, the core language and the modules language, which express algorithms and data structures and the modular architecture of a software system, respectively. Both languages are statically typed, and their static and dynamic semantics are formally defined. Despite the significant research inspired by Standard ML modules over the past decade, a proper type-theoretic understanding of its static semantics has remained challenging. This thesis aims to reformulate the unconventional static semantics of modules using type theory as a guideline and to provide a basis for useful extensions to the modules language.

In the thesis, the modules language is extended to support higher-order modules, enabling modules to take parameterized modules as arguments and return them as results. The extension goes beyond previous proposals for higher-order modules by introducing a notion of type generativity and providing a sound and complete algorithm for type-checking higher-order modules. The thesis also introduces an extension allowing modules to be treated as first-class citizens of the core language, further expanding the range of computations on modules. These extensions naturally stem from the type-theoretic semantics developed in the thesis.

The thesis also addresses the challenges posed by the separate compilation system for modules. The absence of proper support for separate compilation has been a criticism of Standard ML modules, but the thesis proposes a different approach, attributing the failure to an inappropriate choice of compilation unit rather than the semantics of modules.

Additionally, the thesis explores the implications and benefits of introducing universal quantification to express polymorphic programs. It also provides a logical interpretation of the extensions, linking them to higher-order propositional logic.

The work presented in the thesis has been verified empirically through the implementation of the algorithms. Overall, the thesis aims to establish a better understanding of the type-theoretic foundations of the Standard ML modules language and to provide a rational basis for the design of proper extensions to its static semantics.