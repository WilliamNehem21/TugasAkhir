Model checking, a formal method with diverse applications in software verification, involves exploring large state spaces to either produce a formal proof for a desired property or to identify detailed descriptions of error trails. This paper focuses on explicit state model checking and its role in validating communication protocols.

In the realm of techniques for addressing the vast state space inherent in concurrent systems, heuristic search has emerged as a promising approach for failure detection. Early approaches included explicit best-first exploration in protocol validation and symbolic best-first search in the model checker Mur. Additionally, symbolic guided search in CTL model checking has been pursued to circumvent intensive symbolic computations by utilizing hints. Moreover, the successful commercial Uppaal verifier for real-time systems, modeled as timed automata, has been effectively enhanced by directed search techniques.

Our own contributions to directed model checking integrate heuristic estimates and search algorithms into the CKE model checker, a domain-independent AI-planner, and a Promela model checker. We interpret the global state space as an implicitly given graph spanned by a successor generator function, which allows for the search of paths corresponding to error behaviors. The length of the witness path is crucial for debugging erroneous software, as shorter trails are generally easier to interpret.

This paper focuses on error trail improvement, a significant need in practical software development. We propose that a possibly long witness for an error is already given, and the trail can be improved by directed search. The methods and results of our work are detailed in the following sections.

Depth-first search and breadth-first search are considered blind search strategies, as they do not utilize information about the concrete state space being explored. In contrast, heuristic search algorithms incorporate additional search information in the form of an evaluation function to rank the desirability of expanding a node.

The verifiers, such as HSF-Spin, run depth-first search as the default search algorithm, which may result in lengthy trails. We propose the use of the A* algorithm and a simple heuristic estimate to improve this process. Experimentally, we present the initial results of these methods and conclude with remarks on our approach.

Directed model checking typically reports the first error encountered, even if it appears at a high search depth. Although imposing shallower depths on the depth-first search engine is a natural option to improve the trail, there are drawbacks to this approach, including increased search effort and the potential to miss lasting error states at large depths. Therefore, we propose a different approach to trail improvement through heuristic search.

Our work distinguishes between single-state trail-directed search for safety errors and cycle-detection trail-directed search for liveness errors. We propose two heuristics and two algorithms tailored to these categories.

We believe that heuristic search can be a valuable tool for improving error trails, as it provides focused guidance and can be more effective than general error descriptions. We detail the heuristics for focused guidance and discuss their integration into the A* algorithm.

In contrast to previous work on directed model checking, which focuses on detecting unknown error states, our paradigm of trail-directed model checking aims to improve trails resulting from error detections, simulations, and similar sources. This new paradigm can be used to improve error trails corresponding to safety properties.

We also discuss the potential extensions of our work to real software verification in Java and C, and how other tools such as Bandera and Java Path Finder are being used for this purpose.

Finally, we present references to related work in the area and conclude with remarks on the future direction of our research.