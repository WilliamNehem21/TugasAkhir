Even after 25 years of model checking, the complexity of state spaces remains a significant challenge in automatically verifying formally specified models. The explosion of state space complexity in complex systems, particularly due to parallel components, results in an exponential growth in the size of the state space. Various techniques have been and continue to be developed to specifically address this problem, including partial order reductions, symmetry reductions, specific abstraction techniques for parallel systems, and compositional verification, which is the focus of this paper.

Consider a set of jobs to be managed by a scheduler, with n representing the number of jobs. Each job can be started or finished, meaning that for a single job, the events of starting and finishing may occur. To ensure that between two start calls of job i, exactly one finish.i event has occurred, the job may only be restarted if it was finished before. Additionally, a finish.i event may only occur after a preceding execution of a start.i event.

Given an understanding of how the scheduler should operate, the task at hand is to express this system using the language CSP (Communicating Sequential Processes). Before constructing a CSP process that fulfills the constraints, the constraints themselves are described as CSP processes, which will be proven useful later.

Subsequently, a scheduler adhering to both constraints is designed. A new operator, the parallel composition operator, is introduced to express the concurrent execution of two CSP processes. Although the two processes may execute concurrently, they may synchronize on certain events. To illustrate this, the alphabets x1 and x2 are utilized. An alphabet, representing a set of events, is employed where c.i occurs before finish.i, and it specifies that the cell should wait for finish.i and then execute start.i immediately afterwards. These possibilities can be expressed using the choice operator in CSP. Moreover, specific CSP processes are derived using the given alphabets, and the artificial events c.i are hidden in the traces of the process using the hiding operator provided by CSP.

A learning algorithm developed by Angluin and improved by others is then employed to automatically find an assumption that fulfills the conditions of the proof rule. The task is divided into two components: a learner and a teacher. The learner endeavors to learn the weakest assumption, but other assumptions may be discovered as intermediate steps during the learning process.

To implement the learner, the proposed algorithm is utilized, while detailed implementation specifics are not discussed as they are mostly independent of the specification language used. Instead, focus is placed on the teacher, commencing with the membership query.

In summary, the paper addresses the challenges of state space complexity in automatic verification and the development of techniques to handle these challenges, along with the use of CSP to model a scheduler, and the application of a learning algorithm to find assumptions fulfilling specified conditions. Additionally, discussions revolve around optimization approaches such as caching and prefix-caching, as well as considerations for determining when compositional verification is beneficial. The paper also highlights the advantages of the parallel proof rule over the basic rule and the use of assumptions for the components of the system. Future work is proposed to address issues and further improve the technique.