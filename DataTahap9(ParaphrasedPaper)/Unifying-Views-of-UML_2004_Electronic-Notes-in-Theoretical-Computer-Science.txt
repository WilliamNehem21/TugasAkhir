This academic paper discusses the continuous maintenance and evolution of software systems in response to the ever-changing real world. The paper emphasizes the challenges involved in developing and maintaining such evolving systems and highlights the importance of a disciplined process and effective modeling notation to control the activities involved in constructing and documenting different models at various stages of software development. It specifically focuses on the Rational Unified Process (RUP) as a popular software development process, which utilizes the Unified Modeling Language (UML) as the modeling notation.

Section 2 provides a brief overview of the activities and UML models in RUP, while Section 3 summarizes the main ideas of the approach. Section 4 introduces an object-oriented notation for the proposed formal method, and Section 5 exemplifies the use of specification notation in the specification of UML models. The paper also presents a formal object-oriented specification language (OOL) for specifying functional behavior at different levels of abstraction.

The paper emphasizes the significance of the design class diagram, which illustrates the static view of the design by showing how the concepts and associations of the conceptual class diagram are implemented by software classes. It also discusses the integration of refinement calculus with RUP to effectively support iterative and incremental design. The paper touches on various aspects of the proposed formal method, such as the specification of use cases, the formalization of UML models, and the use of a formal approach for incremental system development.

The paper concludes with a discussion in Section 6, while the relationship to existing work is covered in Section 7. The authors express their gratitude to the referees, as well as individuals from various academic institutions, for their feedback and contributions to the development of the paper. The authors also acknowledge the studentsâ€™ feedback and participation in software engineering courses, which have influenced the understanding of the use-case driven, incremental, and iterative object-oriented development and design patterns.