A new approach to programming communication, known as choreography, has emerged as a promising paradigm. This approach shifts the focus from describing the behavior of individual interacting peers in a distributed system to providing a global description (choreography) of how various interactions between participants occur. Unlike traditional methods, which involve describing each communication operation in detail, choreography offers a holistic view of the system by specifying when and where communications should take place. This approach streamlines the design process, allowing architects to leave the implementation details to automated processes that generate end-point code, known as end-point projection.

In modern programming languages such as Java and C#, exceptions are commonly used to handle abnormal system behaviors that interrupt the normal flow of program execution. In communication-focused programming, exceptions pertain to the flow of interactions, where a sudden interruption involves all participating entities. These types of exceptions are referred to as interactional exceptions.

For example, in a financial protocol involving a customer buyer and a company seller, the buyer initiates a session with the seller and receives quote updates about a product. When the buyer decides to accept a quote without explicitly notifying the seller, an exception is triggered, leading both parties to a new stage where they exchange information to complete the transaction. The use of interactional exceptions can be represented in a global calculus.

Choreography also introduces the concept of well-threadedness, which is based on thread annotation of global descriptions. Threads are denoted by identifiers to indicate which actions belong to the same processes. Thread projection and coherence are discussed in the context of generating the end-point behavior associated with each of the threads in an annotated global description.

In the future, further investigation is needed to allow the passing of service and session channels in global calculus with exceptions and to formalize the end-point projection, ensuring its correctness and defining the thread projection of run-time terms. This will enhance the applicability and robustness of choreography as a design tool for end-point behavior.