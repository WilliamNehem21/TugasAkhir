The visitor design pattern is commonly used to traverse abstract syntax trees (ASTs) in program traversal algorithms. This pattern involves the use of a visitor object with a visit method that is executed for each node in the AST, allowing the programmer to explicitly control the order of traversal. However, the exchange of results between traversals in this pattern is error-prone, particularly in the context of side-effectful computations.

Attribute grammars (AGs) provide an alternative approach for writing multi-traversal algorithms, where an attribute evaluator decorates the AST with attributes in one or more traversals. These attributes facilitate the exchange of results between traversals. However, AGs discourage the use of side effects, which can be limiting in certain applications. To address these challenges, this paper presents ruler-front, a language that combines the visitor design pattern and attribute grammars. Ruler-front grammar can be translated to traversal algorithms in multiple languages, including JavaScript.

In imperative languages like JavaScript, programmers often use recursive functions or the visitor design pattern for tree traversal algorithms. While tools for the visitor design pattern are widely available, scheduling visits and managing side effects can be error-prone due to the lack of a define-before-use guarantee. On the other hand, attribute grammars offer a programming model where each AST node has attributes, and attribute evaluations are automatically scheduled. However, the use of side effects in attribute computations is discouraged. Ruler-front aims to address these issues by providing a language for tree traversals that supports both side effects and attribute evaluation, and can be translated to multiple target programming languages.

The paper also discusses the translation of ruler-core programs to JavaScript, where each semantics-block is translated to a coroutine implemented as one-shot continuations. The translation ensures that the selection of clauses is dependent on the values of inherited or local attributes, and the implementation runs in time linear to the size of the tree.

Furthermore, the paper explores the advantages and disadvantages of the visitor design pattern and attribute grammars, and discusses recent developments in attribute grammar systems for mainstream languages. The design of ruler-core is inspired by the language of execution plans of UUAG, and it serves as a small core language for visitor-based attribute grammars with explicit attribute lifetimes and evaluation order. Additionally, the paper mentions future research directions, such as supporting event-handling traversals and incremental evaluation of attribute grammars.