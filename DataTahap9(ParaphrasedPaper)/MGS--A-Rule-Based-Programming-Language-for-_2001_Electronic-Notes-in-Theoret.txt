We introduce the initial outcomes from the development of a novel declarative programming language called mgs, which is dedicated to simulating biological processes, especially those that involve the joint computation of the state space with the current state of the system. This language provides a unified perspective on various computational mechanisms originally inspired by biological or chemical processes (gamma and the cham, lindenmayer systems, paun systems, and cellular automata). The fundamental computational step in mgs entails replacing a subcollection b within a collection a of elements with another collection c. The composition of c into a depends on the shape of the involved collections, and this step is referred to as a transformation. We propose a pattern language based on the neighborhood relationship induced by the topology of the collection to specify the collection to be substituted. Additionally, we present several features for controlling the application of the transformations.

The paper also discusses the cyclic evolution of a system from different initial conditions and describes the challenges in the a priori determination of the phase space in biological systems. The paper highlights the motivation behind mgs, which includes the ability to generically describe fundamental characteristics of four computational models, i.e., gamma and the cham, p systems, l systems, and cellular automata (CA). Furthermore, the paper addresses the specification of the dynamical structure of a dynamical system (DS), where a collection represents the state of a DS and the evolution of the system is achieved through transformations.

The language mgs is informally presented in the paper through examples, and the notions of collections and their transformations are reviewed. The paper also provides simple examples of mgs programs and outlines how previous formalisms can be emulated in mgs. Additionally, the paper discusses the type system of mgs, the concept of records, and rules governing transformations.

Moreover, the paper discusses the application modes of transformations such as stochastic mode and asynchronous mode. It also describes other formalisms that can be emulated in mgs, including p systems, l systems, and cellular automata. The paper discusses the organization of cells in a cellular automaton array, as well as the rules and conditions used in cellular automata.

Finally, the paper acknowledges the input received from anonymous referees and the "simulation and epigenesis" group at Genopole, and the support provided by CNRS, GDR ALP, IMPG, and Genopole/Evry. Additionally, it acknowledges the contributions of W. Fontana and J.-L. Giavitto, and O. Michel in the development of the mgs language.