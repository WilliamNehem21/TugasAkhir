Outer joins are operations in relational algebra that are designed to handle unknown information represented by null values. This paper presents a method for integrating null values and outer join operations into the deductive database system DES (Datalog Educational System), which employs Datalog as a query language. DES also supports SQL, with views and queries being compiled into Datalog programs. Since SQL statements are ultimately resolved by a Datalog engine, it became necessary to incorporate null-related operations into Datalog in order to support a broader range of SQL functionalities. The paper demonstrates how outer joins can be computed within the context of DES, leveraging source-to-source transformations applied to Datalog programs.

The system implements Datalog with stratified negation, which means that negation is not involved in a recursive computation path, although it can use recursive rules. It computes a query within the context of a program that is restricted to the dependency graph built for the query, ensuring that a stratification can be found. SQL statements are translated into Datalog programs and executed as such, with relational metadata for DDL statements being retained. Submitting a DQL query involves parsing it, compiling it into a Datalog program, asserting the program, and submitting the Datalog query. However, if a DDL statement defining a view is submitted, its translated program and metadata persist. A DML statement with a WHERE condition for filtering or a SELECT data source is translated into a Datalog query and program, and the results obtained from executing this query are used to modify base relations, depending on the statement (DELETE, UPDATE, or INSERT).

Furthermore, the system handles negation, undefined (though incomplete) information, nulls, and aggregates, while also providing a more efficient tabling mechanism. However, it is not meant to compete with current implementations, but rather to illustrate the advantages of the more powerful logic found in Datalog systems compared to relational database systems.

For non-stratifiable programs, the system allows for inferring both a positive and a negative fact for a given call, with an undefined fact replacing contradictory information. The current algorithm for determining undefinedness is incomplete and is primarily used for teaching purposes on small examples.

Unknownness has been addressed in relational databases for a long time due to its ubiquitous presence in real-world applications. Null values have been widely used to represent unknowns, despite concerns about their unclean semantics. Including nulls in a Datalog system necessitates providing built-ins to handle them, such as outer join operations. DES includes common outer join operations found in relational databases, offering the same semantics for outer join operators that span null values.