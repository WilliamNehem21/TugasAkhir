This paper provides a brief overview of the process involved in creating story diagrams and introduces a gxl schema for their representation. These diagrams are produced through a static, heuristic reverse engineering analysis and integrate the data and behavioral information from UML activity and collaboration diagrams. The paper also discusses potential challenges related to representing and visualizing story diagrams. UML, a widely used object-oriented modeling notation in software development, forms the basis for the story diagram, which combines elements from UML activity and object collaboration diagrams. Originally developed as a graph grammar language for forward engineering, the story diagram can also be utilized for reverse engineering to facilitate the comprehension of software control behavior and object-level dependencies. For instance, it can illustrate the creation and deletion of links between objects within the program's control flow. The paper includes an example to demonstrate how gxl is employed to represent the method-level story diagram and extract information from the source code for constructing the story diagram. It outlines the challenges encountered in designing a gxl schema and concludes with a summary of the paper's key points. The paper also discusses the extraction of object collaborations and the process of identifying link creation and deletion, emphasizing the importance of these activities in understanding detailed object interactions in the software. Furthermore, it addresses the ongoing efforts to develop a consistent schema for representing and visualizing story diagrams at higher levels of abstraction, including challenges related to graph layout. The paper proposes the use of gxl to represent method-level story diagrams and emphasizes the potential of extending the schema for higher-level story diagrams. Additionally, it underscores the complexities involved in graph layout for intricate compound graphs like story diagrams.