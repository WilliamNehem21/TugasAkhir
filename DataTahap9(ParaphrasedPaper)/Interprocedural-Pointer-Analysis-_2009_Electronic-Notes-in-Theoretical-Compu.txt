Goanna, a robust static analysis tool widely utilized in both academic and industrial settings for identifying bugs in C/C++ programs, stands out for its use of the off-the-shelf model checker NuSMV as the core analysis engine, implemented on a syntactic flow-sensitive program abstraction. This novel approach, utilizing CTL-based model checking, offers a high level of adaptability in formulating checks and is capable of scaling to large code bases. This paper introduces a new pointer analysis technique for C and details its integration into the model checking approach to facilitate interprocedural analysis. The effectiveness and precision of this technique are showcased through a case study.

Unlike conventional static analyzers, Goanna employs model checking methods for conducting static analysis, enabling straightforward specification of desired program properties in CTL. Additionally, it automatically generates a counterexample if a specification is violated, aiding in locating and rectifying defects.

While many static analyzers focus on intraprocedural analyses without considering the impact of procedure invocations, this paper presents an approach to interprocedural analysis of pointers for C through the use of procedure summaries. Leveraging procedure summaries allows for the capture of a procedure call's influence on the program state and the reuse of these results with subsequent calls. Summaries are computed based on an intraprocedural pointer analysis.

The paper also delves into the general approach of Goanna, the construction of models, and their translation into the input language of NuSMV. The reduction step is described, which resolves references to distribute information from actions applied to non-owning variables to other aliases, ensuring the visibility of effects to all aliases. Detailed descriptions are provided regarding capturing the behavior of functions with respect to pointer analysis, combining aliasing information with procedure summaries, and evaluating the performance of the analyses.

The evaluation of the intraprocedural pointer analysis and the summary-based interprocedural analysis involved analyzing source directories of OpenSSL 0.9.8d, highlighting the impact of preprocessor macros on performance. The study demonstrates the successful application of the developed approach to large code bases.

Despite some limitations, such as extensive use of C++ features leading to linear slowdowns, potential performance improvements are suggested through optimization of the xpath algorithm and incremental analysis for reanalyzing only affected program fragments.

It is emphasized that the static analysis based on syntactic properties of a program efficiently identifies defects related to pointer manipulation but results in a high volume of false warnings. The implementation of the approach integrates seamlessly into the existing framework, enhancing the intraprocedural analysis and integrating effectively with incremental analyses. However, generating counterexamples with interprocedural analysis using summaries presents a challenge, necessitating the development of alternative techniques.