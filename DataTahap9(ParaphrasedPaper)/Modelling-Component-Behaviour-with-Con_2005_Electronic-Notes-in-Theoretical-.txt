We are investigating discrete models of interactive systems, focusing on the observable behavior of components rather than their internal structure. It is essential to describe behaviors as perceived on the interfaces of the component. As a result, we present an automata-based language for elucidating the behavior of a component. This language captures assumptions about the sequence of operations in the component and the order in which the component, in response, calls external operations. Implicitly, we are also modeling the environment of a component, as the composition of two components is feasible if there exists an environment that satisfies all assumptions of both. This approach aligns with the optimistic perspective advocated in previous literature.

Furthermore, in earlier work, we have been focused on formulating a formal model of components that allows for reasoning about general properties of components and their composition. In this paper, our goal is to derive a class of automata from that model which generates only the objects of the model. These automata can be viewed as an extension that brings the model closer to automation and eventually tool support.

The motivation for the definition lies in the possibility that behaviors u and v may occur independently as long as they involve different interfaces of the component. It is important to note that independence alone is insufficient to guarantee concurrency, as illustrated by the subsequent definition.

The notation introduced in our component model can be beneficial in aligning it with more traditional approaches to software design. In relation to UML 2.0 state machines and the concept of a compound transition defined therein (pp. 500-1), condition (iv) can be interpreted as a formalization of the scenario where the head of a compound transition has multiple transitions to a set of orthogonal states (fork). Additionally, applying condition (iv) to the conclusion of condition...

Moreover, it is necessary to establish a connection between local concurrency in the constituents and that of the composite automaton. We begin by addressing independence, and it can be demonstrated relatively straightforwardly that the behaviors u and v of the composite automaton can occur independently if and only if their projections onto the constituent automata are independent.

We are also working on further exploration of composition, particularly the preservation of normality under automata composition. The initial results are promising. An intriguing byproduct of exploring the dual aspects of composition in terms of automata is the potential relaxation of compatibility conditions that ensure the preservation of normality in component composition.