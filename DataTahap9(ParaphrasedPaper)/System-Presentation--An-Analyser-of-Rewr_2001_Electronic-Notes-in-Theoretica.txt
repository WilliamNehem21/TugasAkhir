We examine term rewriting systems that are constructed using three distinct sets: function symbols (defined symbols), constructors, and variables. The function symbols and constructors are ordered by a precedence, with constructors considered as the smallest elements of the precedence. A program is a collection of rewriting rules.

The Implicit Complexity Analyser (ICAR) first validates the termination of the given rewriting system and then attempts to determine an upper bound on its complexity. This work is based on references [5,7,2] for complexity analysis. Program transformation through memoization is influenced by Jones's work.

An important aspect of our approach is that the analysis provides an upper bound on the complexity of the computed function rather than on the complexity of the program. This type of complexity analysis is termed "implicit." Therefore, ICAR also provides a method (i.e., a new operational semantics) to effectively achieve this upper bound.

Definition 2.3: Let "main" be a confluent program and "main2f" be a function symbol. The function computed by "main" is the partial function "jmaink: t(c)n! t(c)," where "n" is the arity of "main," defined as follows. ...

Claim 4.1: Under this restriction, the precedence can be determined in quadratic time with respect to the size of the program. Therefore, termination by either the Multiset Path Ordering (MPO) or the Lexicographic Path Ordering (LPO) can be verified in time 2c^k, where "k" is the maximum arity of a function symbol and "c" is a constant.

The determination of polynomial interpretations appears to be undecidable. Fortunately, quasi-interpretations are relatively easy to determine because an upper bound on the program denotation is a good candidate. Therefore, even though finding one is challenging for a computer, it is a simple task for the programmer. The idea is to provide a potential quasi-interpretation along with the rewriting rules, and the program simply needs to verify it.

Time measurement refers to the number of reduction steps required to reach the normal form, and space measurement refers to the size of the environment and the cache, i.e., the number of objects stored in the environment plus the number of objects stored in the cache. These measurements are not highly precise because the actual time required to perform a reduction step and the size of a term depend on the term. However, in both cases, the increase is polynomial in the size of the term, so the polynomial bounds are not exceeded, and the measurements provide a reasonable indication of what occurs.

Proof: If "t" and "s" are ordered such that "g f f," then for all "i," 1 ≤ i ≤ n, there exists a "j," 1 ≤ j ≤ n, such that "vi mpo uj" (by the definition of MPO). Thus, for all "i," "vi mpo t," so the two terms are ordered if "g f f."

Lemma 5.3: Let "t = f(u1,…,un)" and "s = g(v1,…,vn)" be two terms. If "s mpo t" or "s lpo t," no symbol (function or constructor) in "s" may have a precedence greater than the greatest symbol in "t."

Proof: By examining rewriting rules and using Lemma 5.4, we obtain a set of constraints of the form "f f g." Then, graph-reachability between any two symbol tells us whether "f f g" or not. If there are both "f f g" and "g f f," then "f f g" must exist. If there is only "g f f," then Lemmas 5.1 and 5.2...

As previously mentioned, determining a polynomial quasi-interpretation is likely an undecidable problem. However, it appears that the semantics of a function is a viable candidate (e.g., the function "add," which computes the addition of two numbers, admits "addition" as a quasi-interpretation). Of course, determining the semantics automatically is also undecidable. Nevertheless, when writing a program, one is expected to know what the program will compute, so one can provide ICAR with something highly likely to be a quasi-interpretation.

The plan is to integrate ICAR into Elan 3, which is a sizable system developed at LORIA for handling term rewriting systems. Having an upper bound on the complexity of some of the systems will be very beneficial for the Elan team. During the spring and summer of 2001, Mitch Harris rewrote ICAR in TOM, the future parser of Elan terms.