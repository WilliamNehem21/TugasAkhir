The generation process of environments is improved by using a more intelligent cache mechanism, which enhances the number of terms that can be rewritten to a normal form by employing a single rewriting rule. The inefficiency of the rewriting step in systems based on formal language (FL-systems) is a major issue. However, this can be mitigated by reusing the outcomes of previous rewriting processes. For instance, in an urban setting, it is probable that two buildings depicted in different locations could be represented by the same geometric entity. Similarly, a geometric entity representing a window may be reused in multiple locations. Therefore, it would be advantageous to directly reuse a geometric object without executing the rewriting step if two modules that represent elements of the environment are rewritten to the same geometric object. This can be implemented in the environment description, but it complicates the author's work and decreases the model's generality. An alternative approach involves using a cache, where if a module needs to be rewritten, and a key in the cache matches that module, the associated geometric object is utilized as the result of the rewriting process.

The paper introduces a simplified version of FL-systems and formalizes the dynamic dependency analysis utilized. It also discusses the application of the theory to the practical case of the cache mechanism and presents relevant related works and conclusions.

For any module in an FL-system, irrespective of the parameter values, it should be and is rewritten to a unique normal form composed solely of terminals. Additionally, the module names should not be overloaded, meaning that a module name is always followed by the same number of parameters.

The paper describes the method used to dynamically compute a set of terms that are structurally joinable with the currently rewritten term. This method involves manipulating labeled values within the semantics to return a term in normal form and a label when rewriting a module parameterized with labeled values.

The goal of the paper is to develop a cache for the rewriting process of FL-systems, and it achieves this through corollary 3.5, which enables the cache system to characterize a potentially infinite set of modules for which it already knows the structure of the rewritten term in normal form. However, determining the values of the parameters of the terminals contained in the term in normal form remains a challenge.

The rewriting process of a module returns a set of modules and a term in normal form, and to obtain the final term in normal form with numerical values, the function eval is called on the term with a value store that maps the identifiers of the parameters to their respective values.

The paper also presents theorems and corollaries to demonstrate the similarity between rewritten terms and the implications for the cache system. The key finding is that the cache system can identify identical rewritten terms and their associated parameters.