The authors have developed the-calculus, a proof theory for the implicational fragment of classical logic, as a general tool applicable to reasoning about functional programming languages with control features such as continuations and exceptions. This extension of the-calculus by a second binder is essential for its utilization in functional programming and proof systems, and thus, a formal verification of its fundamental properties, such as strong normalization and confluence, is highly desirable. The susceptibility of human proofs to errors, even after undergoing scientific review, underscores the need for formal verifications. Notably, the first published proof of confluence for the-calculus contained an error that was only recently corrected.

To date, the properties of the-calculus have not been mechanically verified. This article aims to contribute towards this goal by presenting two possible encodings of the-calculus in higher-order abstract syntax. The representation of the-calculus using a third-order constructor is rare and facilitates a natural implementation of the structural or mixed substitution, which has been a topic of controversy in the literature.

The contra rule in the-calculus is analogous to the logical fact that if a and a entail a contradiction, there is no rule that constructs an inhabitant of a cotype. Consequently, if c: a holds, c must be a-variable a. The term resulting from the application of a-variable a to a term m has no type, but it is termed as named by a and is called a named term.

In the simply-typed-calculus, each normal term m has the subformula property, where each term has a normal form that can be obtained by a finite number of reductions. The reduction relation is given by the compatible closure of the-axiom.

The reduction relation induced by the three axioms is confluent; however, a straightforward adaptation of the Tait and Martin-LÃ¶f parallel reduction method fails, as it was realized after the original confluence proof. A correct proof was subsequently provided, revealing that in its straightforward definition, the parallel reduction does not have the diamond property due to the twofold effect of reduction.

The-calculus can be extended by datatypes, case-distinction, and recursion to form the core of a programming language, as demonstrated by Ong and Stewart, who developed the toy language pcf. They focused on the core v, which is the-calculus with a call-by-value reduction strategy.

An important question is "what do a-variables stand for?" The small-step semantics suggests that they are a placeholder for evaluation contexts, a notion confirmed by the structural substitution, which replaces contexts with contexts. The type of the constant mu is third-order.

The authors refine and encode the small-step semantics and present a modification that uses substitution instead of environments and includes the decomposition of the subject m into evaluation context c and redex r. The constant eval denotes the top-level evaluation context.

An application of a specific rule has a subsequent effect, including additional reductions within m, requiring the introduction of a new parameter b under the binder. However, implementation of this rule leads to an infinite chain of local rules and cannot be realized.

To enhance support for the second-order representation, the logical framework could be extended to allow type refinement, enabling decisions about whether a term h is canonical and obscuring the proof of can h. The theoretical foundations for such an extension of the logical framework have been laid by Pfenning.

The third-order representation can be utilized to demonstrate various properties of the-calculus. The author has formally proven the soundness of the big-step semantics with respect to an evaluation-frames-stack small-step semantics proposed by Ong and Stewart, and foresees further applications of the encoding in the future.

The author expresses gratitude to Ralph Matthes for first sparking interest in the-calculus, and to Frank Pfenning and Brigitte Pientka for their discussions and ideas. Finally, the author thanks the creator for the framework that supports human life and thinking.

The following references are cited: Baba, Hirokawa, and Fujita's work on parallel reduction in type-free calculus and the associated technical report; and the proceedings of CATS 2001 with related technical reports.