Similar ideas of type coercion are present in various other contexts, such as subtyping compilation, unboxing transformations, hybrid type systems, and contracts. In many of these contexts, the existing type system is similarly limited in its expressiveness. We demonstrate how type coercions can be extended to a higher-order polymorphic type system that incorporates singleton and dependent kinds. The latter introduces significant complexities and requires the definition of higher-order kind coercions at the type level. Fortunately, kind coercions can be represented in code.

The majority of the rules that define these judgments are conventional. Specifically, the rules concerning singletons and extensionality are borrowed almost directly from Stone and Harper. The complete type system is provided in the appendix, and our focus here is on the aspects that are specific to our calculus.

Previous literature includes instances of dynamic type generation for abstract types, as well as discussions of higher-order coercion, as mentioned in Section 1. However, to the best of our knowledge, there is no prior research that explores either of these concepts in the context of a type system like ours, which encompasses translucency, type analysis, and dependent kinds.