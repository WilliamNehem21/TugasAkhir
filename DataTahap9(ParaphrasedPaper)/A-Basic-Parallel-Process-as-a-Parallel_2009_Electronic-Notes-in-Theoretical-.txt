This paper examines the category of fundamental parallel processes, which encompasses all processes with a finite guarded recursive specification within the simple process algebraic language featuring 0, action prefix, choice, and parallel composition without communication (only interleaving). The paper also delves into the concept of context-free processes, demonstrating that the introduction of 1 yields a pivotal distinction, enabling the definition of processes with unbounded branching that was otherwise unachievable. Furthermore, the paper investigates the conditions under which a context-free process can be represented as a pushdown automaton, with a similar investigation conducted for the category of fundamental parallel processes. Notably, the results reveal that the addition of 1 brings about increased complexity and interest to the theory. In terms of expressiveness, it is observed that basic parallel processes have bounded branching, with the exception of those including 1.

Another point of contrast between automata theory and process theory lies in the handling of communication, with process theory allowing for explicit communication and abstraction from it through branching bisimulation. The paper illustrates that every basic parallel process can be presented as a regular process communicating with a bag, akin to the prototypical basic parallel process, in contrast to the use of stacks in the context of context-free processes. The notion of transition systems from process theory is introduced, with finite transition systems resembling non-deterministic finite automata, featuring a subset of states marked as final states.

Focusing on guarded recursive specifications only is motivated by the fact that such specifications have a unique solution in the transition system model, with the added aspect that the solution is finitely branching. This emphasis leads to the definition of basic parallel processes as a subclass of the parallel processes based on recursive specifications over CA.

One crucial lemma is proven, which highlights that the finite control does not make the actual choice when it can select a variable from the bag. Instead, the choice is determined by the initial action performed by a candidate variable, signifying that the variable is removed from the bag upon selection.

In conclusion, the addition of 1 allows for termination precisely when a bag is empty, a condition that cannot be checked without 1. This is distinct from the situation with a stack, where an empty check is possible in an ACP-style language.