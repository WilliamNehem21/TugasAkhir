While existing models and tools are beneficial for teaching and learning programming, there is an ongoing need to develop additional tools that support beginners and focus on specific programming concepts. Studies have demonstrated that practicing programming enhances one's ability in this area. It is also known that certain programming constructs, such as nested loops, are particularly challenging for novices. Therefore, this paper aims to address the issue of generating exercises for nested loops, which can be manually solved with pen and paper to assist novice programmers. To accomplish this, a context-free grammar (CFG) has been designed to formalize specific syntactic patterns for nested loop exercises. Additionally, algorithms have been developed to utilize the CFG rules for generating valid nested loop exercises specifically tailored to the Python programming language, which is widely used in introductory programming worldwide.

The rest of this paper is organized as follows. Section 2 provides background information, and Section 3 discusses related works. Section 4 presents the grammar design for synthesizing nested loops, while Section 5 explains the algorithms for loop synthesis. Section 6 describes the implementation and results, and Section 7 presents the evaluation. Lastly, Section 8 concludes the paper and outlines future work.

This section discusses the challenges novices face when learning to write computer programs. We begin by highlighting general difficulties and then focus on specific challenges related to comprehending nested loop structures. Moreover, we emphasize the significance of loops and the motivation behind this research.

Novice students often encounter practical difficulties with loops in introductory programming modules. They struggle to grasp the process of program iteration and encounter problems with misconception of loop constructs, loop execution, and solving problems using loop constructs. The complexity increases when loops are nested, further hindering novice programmers' understanding.

This study is driven by the aforementioned challenges and aims to address the needs of programming education. A formal technique, based on a CFG, has been devised for synthesizing exercises focusing on nested loop problems, which can be used as practical problems by novice programmers. In the following section, we discuss related research works.

Context-free grammars (CFGs) are a class of formal languages used to formally specify context-free languages (CFLs). The formal definition of CFGs is presented in Section 4.1. CFGs have been employed in this work to express the rules for formulating new problems in nested loops for several reasons.

Firstly, formal languages and automata theory (FLAT) is a fundamental aspect of theoretical computer science, often viewed as having limited real-life applications. However, adopting an aspect of FLAT (CFGs) in this work demonstrates that FLAT can find new applications in areas such as procedural content generation and computer science education.

Additionally, the syntactic definitions of programming language recognizers and parsers are established using CFGs. This is preferred over regular languages (RLs) because CFGs can handle more complex structures, such as the language of balanced parentheses. The application of CFGs for recognition can be found in compiler constructions, and their applications in generation can be found in various works.

The paper also presents a survey conducted among 210 university undergraduates, including first-year students (87.7%) and returning students (13.3%) from computer science and related courses. The findings indicate that a significant proportion of the students struggle with programming, particularly with understanding nested loops. The synthesized nested loop exercises were found to be appropriately formulated and solvable with pen and paper, suggesting that the tool was well-designed and effective. This supports the finding that practicing generated exercises can help novice programmers improve their programming skills in Python.