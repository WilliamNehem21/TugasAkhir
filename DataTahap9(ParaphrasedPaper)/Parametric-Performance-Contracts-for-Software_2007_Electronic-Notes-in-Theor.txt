Several existing methods for predicting system performance are based on analytical models such as queuing networks, stochastic Petri nets, and stochastic process algebras. However, these models often inaccurately represent reality due to their underlying assumptions, like assuming exponential distributions for execution times or only calculating response times as mean values. This can be problematic in large enterprise systems where mean response times are often not sufficient for predicting performance. The paper introduces an initial approach to incorporate multithreaded behavior in component-based performance predictions and reports on a case study to validate this approach. The study compares predictions generated by the method with measurements from an implemented example system, identifying challenges in predicting performance in multicore systems, such as CPU hopping and cache thrashing.

During the early stages of developing a component-based software system, reasoning about the system's quality attributes must rely on models, as the implementation is often not fully available. It is common practice in the software performance engineering community to use a design-oriented model based on UML and transform it into an analysis-oriented model to predict performance attributes. The paper follows this approach and uses UML as the basis for the design model, extending it with information related to performance. The design model is then transformed into an analytical model using stochastic regular expressions (SRE) to predict the response time of a service.

The paper introduces a new parallel operator to analyze multithreaded behavior and explains the process of transforming the design model into an analytical model using SRE. The case study aims to analyze the validity of the new parallel operator and does not model an industry-sized architecture. Instead, it uses a simple architecture involving concurrency, with plans for larger case studies in the future.

The authors implemented the described architecture and four algorithms in Java for measurement on a dual-core Pentium D with 3 GHz and Windows Server 2003. The paper discusses the measurements of the provided service of the client component and the observed behavior of the implemented algorithms.

The results show that some of the measured execution times match the predicted ones, forming a second peak in the distribution function of the measurements. The paper discusses the implications of the findings and states that the approach can accurately predict response times for algorithms with low memory footprint but may yield inaccurate results for memory-intensive algorithms.

The paper also discusses the limitations of existing analytical performance prediction models such as queueing network models, stochastic Petri nets, and stochastic process algebras. It introduces the use of design models in UML and their transformation into an analytical model based on stochastic regular expressions as an alternative approach for predicting performance. However, the study also highlights the need to address other factors such as CPU hopping and cache thrashing, as well as the influence of synchronization mechanisms, in future work.