The majority of software systems are typically described using high-level model or programming languages, with their runtime behavior being controlled by the compiled code. In the context of critical systems, it is essential to apply static analyses and formal methods at the source code level, as this level is more abstract and better suited for such techniques. However, in order to bridge the formalization chain from high-level formal methods to the machine-code level, it is imperative to establish the correctness of the compilation process.

In contrast to compiler certification, the approach of compilers certifying their own results offers two key advantages. Firstly, it completely mitigates the need to trust the implementation correctness of compiler algorithms on a hardware system or to prove their correctness. Secondly, similar to the proof carrying code approach, it provides a clear interface between the compiler producer and the user. Nonetheless, a drawback of the certifying compiler approach is that users must verify the certificates for each (critical) compilation, which could result in failure if the compiler contains a bug.

This paper elaborates on the construction and extension of the code generation phase and the verification of the certificates, with an emphasis on the practical applicability of this approach. The primary technical contributions include the structuring and optimization of the compiler-generated certificates to minimize the time required to conduct the proofs, as well as the description of the intermediate language, the generated MIPS machine code, and their relationship. The paper also discusses the automation and performance enhancement of the certifying process and evaluates the implemented approach.

The code generation phase implemented in the compiler takes an intermediate language program and outputs MIPS assembly code, along with theory files for use with the Isabelle theorem prover. Furthermore, the paper presents strategies to significantly enhance the speed of conducting the proofs within the Isabelle theorem prover, which is crucial for the acceptance of the certifying compiler approach in industry and science.

The evaluation of the implementation demonstrates that the certifying code generation is generally feasible for realistic compilers. The time it takes to conduct a correctness proof in Isabelle/HOL is identified as a critical factor, with efficient datatypes potentially reducing the time and time complexity required for the verification process.