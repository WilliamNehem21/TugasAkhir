The rules of simple GSOS differ from those of ordinary GSOS in that the target of a conclusion is limited to either a single operation or a variable, rather than an arbitrary term. Additionally, in simple GSOS, the number of operations may be infinite, but each operation may only depend on finitely many others. Most practical operations can be specified using simple GSOS.

Assuming familiarity with basic concepts from category theory, including (initial) algebras and (final) coalgebras for endofunctors, we proceed to establish notation and discuss some examples. We denote the category of sets and functions as "Set" and the category of join semilattices and their morphisms as "JSL."

The function "tn" lifts to "coalg(f)," which is proven by induction on "n." The base case "t0 = id" is trivial, and for the induction step, if an "f"-coalgebra "(s, f)" is given, and "tn(s, f) = (tns, fn)," then we define "tn+1(s, f) = (tn+1s, fn+1)" as the following...

The necessity of filtered colimits in Definition 4.5 is demonstrated by the typical definition of constants in the stream calculus: [r] = r:. All constants [r] depend on, and thus the signature cannot be decomposed into a coproduct. In the context of simple GSOS rules on transition systems, a similar example can be observed.

Consequently, by Corollary 4.8, the rational fixpoint, i.e., the set of regular languages, is closed under any operations defined by a DFA specification with finite dependency. Moreover, according to Theorem 4.11, the operational model is locally finite. Several examples will now be presented.