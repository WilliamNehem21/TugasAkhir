The paper introduces a method for proving the soundness of concurrent separation logic by using semantic proofs to annotate program points in the code of a thread with descriptions of its local state. This approach differs from standard interpretations of Hoare triples in that it intentionally considers the internal syntactic structure of the command or proof. The intentional definition acknowledges that the unsoundness of the conjunction rule with imprecise resource invariants is fundamentally related to proofs, rather than denotations of commands.

To establish the soundness of concurrent separation logic, the paper defines a thread-local interpretation of every thread as a semantic proof and connects this interpretation to a standard interleaving operational semantics. The notion of validity of Hoare triples for commands is then defined with respect to this interpretation, and the soundness of all the proof rules is proven. Despite not tracking a partitioning of the state, the thread-local interpretation is shown to be strong enough to establish that the provability of a program in concurrent separation logic implies that the program is data-race free.

The paper also discusses the treatment of locks in the logic, where acquiring a lock gives a thread ownership of a part of the state satisfying the resource invariant of the lock, and releasing the lock requires re-establishing the corresponding resource invariant. The core of the proof of soundness involves establishing the separation property, which shows that the state of the program can be partitioned into that owned by each thread and each free lock. The approach of using semantic proofs is inspired by program analyses based on abstract interpretation, and the paper demonstrates its usefulness in proving the soundness of program logics.

The results presented in the paper are based on a simplistic programming language, but the approach has been extended to more expressive languages and applied to the verification of preemptive OS kernels as well. The approach is deemed to provide a low-cost way of proving the soundness of complicated concurrency logics.