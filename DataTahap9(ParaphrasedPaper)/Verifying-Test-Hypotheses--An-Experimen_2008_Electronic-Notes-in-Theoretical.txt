The hol-testgen system extends the isabelle/hol interactive theorem prover and employs a two-staged approach to generate test cases. First, the original formula, referred to as the test specification, is transformed into a normal form called the test theorem, which is then partitioned into test cases. Second, the test cases are analyzed to identify ground instances (i.e., test data) that satisfy the constraints of the test cases. These test data are subsequently used in an automatically generated test driver to run the program under test. The system places particular emphasis on the control of explicit test hypotheses, which can be proven over concrete programs.

Isabelle is a generic theorem prover that supports various logics, including first-order logic, Zermelo-Fraenkel set theory, and higher-order logic (hol). Isabelle can be controlled at both the implementation level in SML and the Isar level, a tactic proof language allowing for interactive and automated proofs.

In the context of test data selection, a uniformity hypothesis for each non-thyp clause allows for replacing free variables with meta-variables, which can be instantiated by ground terms during the test data selection phase. This transformation is logically sound.

When generating test cases for recursive data structures, hol-testgen generates a data exhaustion theorem instead of a regularity hypothesis. This theorem, generated on-the-fly, depends on the structure of the corresponding datatype. The system has been successfully used in case studies involving unit tests of red-black tree library implementations and firewalls. In the latter case, regularity hypotheses are used to establish coverage of an automaton accepting a (protocol) language.

The paper addresses the testing and formal verification of hypotheses. Specifically, it emphasizes the role of tests and proofs, and presents the essential proof steps for one of the test hypotheses of the test theorem in detail.

In summary, test hypotheses establish a logical link between individual test data and disjoint test cases. They can be regarded as proof obligations that are proven in later stages of validation if necessary. Test hypotheses provide the test engineer with a means to control the quality of a test, as demonstrated in larger case studies conducted with the system.