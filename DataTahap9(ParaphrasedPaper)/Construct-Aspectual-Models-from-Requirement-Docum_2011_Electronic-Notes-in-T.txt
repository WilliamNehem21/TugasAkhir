The information related to behavior in the context of an automotive control module (BCM) application is characterized by discrete, reactive, and timing features. Therefore, this behavioral information should encompass the relationship between inputs and outputs, the interaction among various functionalities, as well as timing constraints like timeouts and deadlines.

Communication information largely involves the communication topology, signals, and protocols used for communication between an electronic control unit (ECU) and its surrounding environment. In automotive systems, bus technologies such as CAN, LIN, and FlexRay are commonly employed to connect an ECU with its environment, facilitating the transmission of signals over buses to convey both data and control commands. There is a close association between communication information and behavior information, as functionalities are typically initiated by received signals, with their outputs similarly transmitted through signals.

Function prototypes, connectors, and ports are fundamental elements of the architectural description language (ADL) used for modeling. A function prototype must be part of an element of adlfunctiontype and is itself linked to an element of adlfunctiontype. Connectors can be categorized as either delegate or assembly, with the former connecting the ports of a function type and its contained function prototypes, and the latter connecting the ports of two function prototypes. Each flow port is associated with a data type, which specifies the properties of the data exchanged through the port.

Timed automata formalism is an extension of traditional untimed automata that introduces time clocks and timed invariants to depict the timing behaviors of systems. A timed automaton interacts with its environment via channels and global variables. To simulate and verify a target timed automaton, it is necessary to model its environments as timed automata and compose them in parallel to form a network of timed automata.

For simulation and verification purposes, the UPPAAL version of timed automata is selected as the formalism of choice. This version extends pure timed automata with several features, including the use of bounded integer variables (or arrays of these types) and clocks in expressions. This extension enhances the expressiveness of timed automata, enabling the modeling of complex guard conditions, assignments, and invariants.

Signals within an ECU are essentially variables managed exclusively by its software. An ECU interacts with its environment through sensors, actuators, physical wiring, and bus networks. From a software perspective, signals represent the primary means through which an ECU senses and acts upon its environment, abstracting all devices and media as transformers that convert the physical variables of the environment (described by ports) to the logical variables of the software (described by signals). Consequently, input signals correspond to input variables, and output signals correspond to output variables, representing data refinement relations (e.g., transformers) between the ports and the signals.

Constraints in the Generic Modeling Environment (GME) are defined using the OCL language on the elements of the metamodel. Developers must specify the model element (of the metamodel) to which the constraint will be attached, as well as the time at which the constraint checking is triggered. When a constraint is violated during modeling, an alarm will be raised at the triggering time. Add-on interfaces in GME offer developers the means to develop their own programs and integrate them with the GME. For example, in the tool support used in this project, the UPPAAL tool is integrated through these interfaces. Model access interfaces provide a set of interfaces allowing access to the model elements through programming.

The tool described in this paper has been utilized in the BCM project, which comprises eight primary functions, involving over 40 ports and 90 signals. Given the substantial size of the model, tool support is deemed essential for effective management.

The section also outlines how to simulate and verify the functionalities using the tool and introduces the procedure of transforming the models into an UPPAAL specification. This transformation procedure combines the structure model and behavior model, as the channels and global variables in an UPPAAL specification correspond to the ports depicted in the structure model. Hence, the transformed UPPAAL specification can be viewed as the integration of the structure and behavior models.

The paper draws inspiration from various works that emphasize the separation of concerns and multidimensional modeling to support incremental development in the context of embedded systems and component-based software design. However, this paper aims to apply these concepts to the domain of automotive software and make them practical for actual development. The choice of different modeling notations for automotive software is influenced by domain characteristics and application background. For example, the paper selects EAST-ADL2 to describe the software structure due to its widespread recognition and expressive capabilities.

Given the complexity of software systems, a single formalism often proves insufficient for all system aspects. Consequently, much of the literature is dedicated to integrated formal methods that combine several well-established formal methods to specify the entire system. For instance, the paper describes the use of CSP-OZ, a method that integrates CSP and Object-Z formalisms, to address behavioral aspects and data structures in software specifications. Additionally, a formalism known as CSP-OZ-DC is proposed to model time-related behavior, integrating duration calculus formulas to specify the timing properties of systems. In this paper, timing behavior is modeled using both timed automata and duration calculus formulas, with the former used to model top-level operational (reactive) behavior and the latter to specify temporal changes in signal values.

Finally, the paper cites prior work by Zhiming Liu, Charles Morisset, and Volker Stolz on the theory and tool for component-based model-driven development as sources of inspiration, considering their application in a relevant context.