We explore the application of linear operator semantics within the framework of probabilistic abstract interpretation [10, 9]. The fundamental concept behind abstract interpretation involves analyzing a program through a simplified or abstracted semantics that focuses solely on relevant aspects of the program for the specific analysis. These relevant aspects are typically encapsulated within the definition of an abstract domain, which, like the concrete domain, is usually structured as a complete partial order. In the classical theory of abstract interpretation formulated by Cousot and Cousot, the translation between concrete and abstract semantics is established through Galois connections (i.e., pairs of adjoint maps) that ensure the correctness of the abstraction. In our context, where we work with linear operators defined on vector spaces, the relationship between concrete and abstract semantics is formalized through the concept of a linear generalized inverse, which can be viewed as a linear analogue of a Galois connection. Specifically, we consider the Moore-Penrose pseudo-inverse, which is defined below. Throughout the subsequent definitions, we refer to the general notion of Hilbert spaces as our (concrete and abstract) probabilistic domains. However, as indicated in Section 2, this paper primarily focuses on the analysis of finite-dimensional vector spaces.

It is important to note that the parameter prect(p, r) represents a numerical value denoting the loss in terms of the completeness of the given abstraction. A smaller value indicates a more precise analysis result. Proposition 4.4 will be demonstrated based on the following two properties.

The abstraction SW is weakly relational, providing information about the correlation between the values of two variables. However, it only captures information about the parity (xi mod 2) rather than certain specific correlations like SR modulo 4. The dimensionality of this abstraction represents a compromise between SR and SN.

Our experiments regarding the precision of the three abstractions when analyzing various extremely short programs led to the following observations. For programs such as "var x:[0..10]; begin x:=k; stop" (with k= 1 or k= 4) and "var x:[0..10]; y:[0..10]; begin x:=y; stop," the relative precisions prect(p, r) are obtained.

Other studies have dealt with the challenge of quantifying the precision of a static analysis. Rountev, Kagan, and Gibas introduced an approach to evaluating the imprecision of a static analysis using lower and upper bounds of the set of false positives. While this method is standard in classical static analysis, the authors propose that a human experimenter should provide proof for each fact, asserting that a given result is not a false positive. This leads to knowing the exact percentage of false positives for a particular program and analysis. However, due to the manual nature of this approach, there are limitations to the size of the set that can be tested, making it unsuitable for integration into a tool, such as for selecting the best analysis for a given program. In contrast, our approach appears to be more promising. With a structured lattice of abstract interpretations and a means for measuring precision, a more systematic approach can be established for selecting the abstract domain. Specifically, this can be practically achieved through a statistical interpretation of the numerical value expressing relative precision.