To fully support refactorings in a team development environment, we have integrated a refactoring-aware repository provider as an extension plug-in to the Java development tools in Eclipse. This versioning system treats refactorings as primary semantic actions rather than numerous scattered changes over the source tree. We have also introduced a refactoring-aware merge, which encompasses both refactorings and traditional changes, using the semantics of the refactorings to detect and resolve merge conflicts. This approach ensures that the semantic meaning of a refactoring is preserved after the merge.

Refactorings provide a safe and efficient method to enhance code quality in a controlled manner, guaranteeing their semantic validity and meaning. These advantages are undermined in a team development setting by the lack of adequate tool support. When code is merged from multiple developers, the preconditions are verified for each individual branch, but not for the merged source tree. Consequently, the safety of a refactoring may not be assured in the merged tree, and manual intervention might be necessary in case of a merge conflict. Additionally, the semantic impact of a refactoring may not be fully included in the merged result, and changes in the branch where the refactoring is not applied may violate preconditions or leave newly introduced code unaffected.

To address these limitations and better support refactorings in a team development environment, we have devised a model for a refactoring-aware repository provider that stores and retrieves both traditional changes and entire refactorings. This allows for the presentation of differences between two versions in terms of refactorings. Furthermore, when two branches are merged, this semantic knowledge is utilized to detect potential conflicts, leading to more accurate automatic merges and better presentation of real conflicts to the developer.

This paper is structured as follows: Section 2 provides an introduction to refactorings and various merge strategies, while Sections 3 and 4 introduce and justify the concepts of refactoring-aware merge and refactoring-aware versioning using examples. Section 5 outlines a versioning model and merge strategy to support refactoring-aware versioning, and Section 6 details the experiences from integrating that model and strategy in Eclipse. Section 7 describes related work, and Section 8 concludes the paper and discusses future work.

The rest of the paper discusses the specifics of refactorings, merge strategies, and the implementation of a refactoring-aware repository provider in Eclipse. Additionally, it explores how semantic knowledge can improve merge processes and the detection of conflicts between different versions of code. We believe that our approach is adaptable to further extensions with other types of refactorings and can enhance the efficacy of team development environments.