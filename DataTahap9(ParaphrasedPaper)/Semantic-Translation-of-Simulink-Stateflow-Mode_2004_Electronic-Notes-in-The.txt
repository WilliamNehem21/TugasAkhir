Characteristics of a system, such as its properties and synthesis, are often addressed through model-based development, requiring the integration of various design tools within a coherent framework. It is crucial for these tools to share semantics, ensuring the consistent interpretation of models across different platforms. This need for semantic interoperability is evident in the embedded systems community, where tools like MATLAB Simulink/Stateflow (MSS) are used for simulation, while hybrid automata-based tools, such as Charon, are employed for verification.

MATLAB Simulink features a diverse range of model elements covering signal processing and both continuous and discrete behaviors, allowing for their arbitrary combination. In contrast, hybrid automata based tools maintain a clear distinction between continuous and discrete behaviors. Translating complex MSS models with intricate interactions between continuous and dynamic behaviors into hybrid automata has proven challenging. To address this, a subset of Simulink/Stateflow that upholds a clear separation between continuous and discrete behaviors has been selected, along with a carefully chosen set of supported primitive blocks. The translation process involves the use of a formal technique based on graph transformations, with the execution of transformation rules specifying the creation, deletion, or binding of pattern elements according to predetermined roles.

The translation algorithm, detailed in section 4, has been implemented using Graph Transformation (GT), incorporating 131 rules, 40 compound rules, and 22 test cases. The implementation process consists of two distinct parts, one focusing on identifying discrete locations in the Simulink/Stateflow diagram and the other on inferring continuous dynamics for each location.

This paper presents a method for converting MSS models into Hybrid Systems Interchange Format (HSIF) models, involving the transformation of MSS models containing continuous time blocks, Stateflow blocks, and switches into hybrid automata with the same dynamic behavior. The transformation is specified through a formal technique based on graph transformations.