The community approach to software architecture, which is based on precise mathematical semantics derived from category theory, supports a clear separation between computation, coordination, and distribution, including mobility. Additionally, it offers a simple state-based language for describing component behavior and addresses composition as a primary concern, accounting for the emergence of global system properties from interconnections. This paper provides a description of the approach and the available tool support by modeling essential aspects of the GSM handover protocol. It also outlines a framework for the distributed execution of such specifications using Klava, a Java library for mobile agent systems based on tuple spaces.

Similar to other formal approaches to software architecture such as Darwin, Wright, and Leda, the community approach has distinct advantages, with its main strength being its precise mathematical semantics, which allows for the explicit superposition and refinement relationships between architectural components. The graphical semantics of the community approach closely mirrors the architectural design, providing an intuitive representation. Furthermore, the categorical semantics enables a thorough and language-independent study of connectors, including the definition of higher-order connectors and their systematic use in assembling complex interactions.

The community approach enforces a strict separation between computation and coordination, and it has recently been extended to include a distribution dimension as a separate architectural concern. The approach's fine-grained distribution capability allows for maximum flexibility in executing actions across different locations and communicating with the environment through location-specific communication channels. The paper aims to demonstrate how the community approach applies to larger examples by modeling the GSM handover protocol, emphasizing distribution and mobility.

The paper is structured as follows: it begins with a description of the handover protocol and an informal review of the community approach. It then presents the community workbench and the architecture description language, followed by a demonstration of modeling the handover protocol using community and testing it with the workbench. The paper concludes with some closing remarks.

In order to model location-aware systems, an extension of the community approach was developed to explicitly represent the space within which movement takes place. This extension separates computation, coordination, and distribution/mobility as architectural dimensions. The paper explains how this separation is achieved, including the association of local channels with location variables and the representation of synchronized actions as joint executions distributed over specific locations.

The paper details the definition of the location type and the touch and reach relations, followed by a discussion of the distribution phase, which involves checking possible topological distribution and adapting designs and glues for required distribution. The execution phase, which tests the specified architecture with different initial values, is currently centralized, but the authors plan to enable distributed execution in the future.

The paper then provides specific design details for interactions identified in the previous section, illustrating the separation of layers and defining connectors, glue, roles, and attachments. Additionally, it presents a summary of the architecture for distributed execution that is being implemented, based on the Klava package, which supports mobile agent systems and contains facilities for specifying hosts, logical and physical locations, and communication between hosts.

Overall, the paper presents the community approach to software architecture, emphasizing its formal, precise, and intuitive mathematical semantics, its clear separation of architectural dimensions, and its adaptability to larger real-world applications.