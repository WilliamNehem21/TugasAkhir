Various iterations of the pi-calculus have attracted significant attention in the academic literature. In this paper, we explore the traditional early labelled transition system (LTS) and propose an approach that breaks down the system into two components, with detailed focus on one of them. By adopting this decomposition, we gain a more comprehensive understanding of how bound outputs are handled in pi-calculus, and we also achieve a robust LTS that can accommodate the addition and removal of language features. This paper provides an overview of some of the techniques and objectives involved in the ongoing research.

We adhere to the syntactic convention of using a, b for name constants, k, l for terms of name type, x, y for variables (including name variables), p, q for terms of process type, and x, y for variables of function type. Type contexts are finite maps from variables to types, and we solely consider typed terms.