In this paper, we present a game-theoretic explanation of concurrent separation logic. We create a specification game for each execution trace of the code interacting with the environment, in which Eve plays for the code and Adam plays for the environment. The objective of both Eve and Adam is to decompose each intermediate machine state of the execution trace into three components: one for the code, one for the environment, and one for the available shared resources. We demonstrate the correctness of concurrent separation logic by interpreting each derivation tree of the logic as a winning strategy in this specification game.

The logic's soundness has been established by Brookes in his influential papers on the trace semantics of concurrent separation logic, and his proof has received significant attention in the community. This proof has been revisited in various ways, including semantic, syntactic, and axiomatic approaches, and has been formalized in proof assistants. A key technical challenge in all these soundness proofs is to demonstrate the validity of the concurrent rule.

Our objective in this study is to develop a game-theoretic approach to concurrent separation logic. To achieve this, we prefer to keep the logic and the concurrent language relatively simple and tangible. Specifically, we do not consider more recent, sophisticated, and axiomatic versions of the logic, such as iris.

The parallel composition operator c1 c2 allows two programs, c1 and c2, to interact concurrently through mutexes called resources. A resource r is declared using "resource r" and acquired using "with r when b do c," which waits for the boolean expression b to be true before proceeding. Naturally, a mutex can only be held by one execution thread at a time.