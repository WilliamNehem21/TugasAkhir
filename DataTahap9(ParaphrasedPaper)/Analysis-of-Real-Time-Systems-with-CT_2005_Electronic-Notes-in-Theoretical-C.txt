This novel algorithm employs decision procedures to calculate the intersection, set difference, and predecessors of classes, as well as to test for class emptiness. Additionally, the tctl specification is reduced to CTL logic through the introduction of new atomic propositions to address specification constraints. Subsequently, a tctl model checker is developed based on techniques similar to those used in classic CTL model checking. Other approaches involve abstracting system and property constraints using predicate abstractions within the framework of abstract interpretation [7,14].

The remainder of the paper is structured as follows: Section 2 presents the formalism of timed automata used for specifying timed systems. Section 3 introduces the logic tctl and outlines the transformation of tctl specifications to CTL specifications, along with a proof of the transformation correctness. In Section 4, an algorithm for generating finite bisimilar graphs of timed systems is presented. Section 5 explains the use of these graphs for CTL model checking and the projection of results back to the original timed systems. Finally, a conclusion is provided.

Many algorithms used for solving the bi-simulation problem are based on some form of partition refinement, where successive iterations split blocks of the current partition into smaller blocks until no further splitting is possible. During the splitting process, indistinguishable states are kept within the same block. In this context, distinguishable states are those where one state allows a transition with a certain label to a state in a certain block, while the other state does not have a transition with the same label to a state in the same block.

At the end of each iteration, the edge e and the zone z are removed and replaced by new edges and sub-zones. The remaining outgoing and incoming edges from and to the zone z are updated according to the new partition. The non-zenoness of the timed automaton and the convexity of its constraints ensure that the produced partition preserves the convexity and non-zenoness. Furthermore, the algorithm terminates.

This paper presents a technique for model checking dense real-time systems, which involves reducing tctl specifications to CTL. The timed behavior of the tctl specification is captured and represented as a timed automaton, which is then composed with the original timed automaton modeling the timed system. A time abstraction technique based on strong bi-simulation is used to generate a finite graph modulo the tctl specification. Various branching-time verification tools can be employed to conduct CTL model checking on this graph. The advantage of this technique lies in its simplicity, as it avoids complex set operations and eliminates the need to extend the logic CTL or its model-checking algorithm, making it easily implementable.