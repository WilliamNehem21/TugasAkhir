In this research paper, we introduced a symbolic structural operational semantics and a symbolic bisimulation for the spi calculus. We also presented decompositions of symbolic environments and updated the symbolic bisimulation to accommodate these decompositions, resulting in soundness and completeness with respect to concrete bisimilarities. Our work provides a complete proof method in a setting with finitely branching operational semantics, distinguishing it from previous efforts on symbolic (bisimulation) semantics for the applied pi calculus.

The set sa is introduced solely for the purpose of ensuring the well-foundedness of a(h). If we were to replace sa(h) with s(a(h)) in ana, the definition would no longer be inductive, as it would require an a priori argument about the presence of certain expression pairs in a(h) before applying the rule. For all hedges h, sa(h) is equal to s(a(h)).

A symbolic environment serves as a concise representation of a set of hedges, differing only in the instantiations of variables. A variable instantiation consists of a pair of substitutions that must adhere to the symbolic environment. The resulting hedges from instantiating variables in a way that respects the environment are referred to as concretizations. The symbolic environments utilized in this paper closely resemble those in a previous work, with the exception that we explicitly keep track of fresh names. A symbolic environment comprises three elements.

Subsequently, we solely consider well-formed symbolic environments, denoted as se. By instantiating the input variables of the symbolic environment, we obtain a concrete (non-timed) hedge. However, such an instantiation must adhere to various constraints, such as timing, guard satisfaction, and the freshness of invented names. For instance, an input performed at time t must be synthesizable based on the knowledge of the environment at that time. Similar to the symbolic early input semantics, we define environment respectfulness for substitutions. Naturally, with bisimulation environments, we require two (possibly different) substitutions, one for each process. Additionally, we introduce some fresh names denoted as b.