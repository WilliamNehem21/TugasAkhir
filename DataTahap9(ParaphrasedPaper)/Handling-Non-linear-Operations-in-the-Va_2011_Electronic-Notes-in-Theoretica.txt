The value analysis in the context of efficiency typically relies on abstract domains that are based on conjunctions of linear constraints, such as polyhedra and octagons. However, these domains are often not precise enough when dealing with non-linear arithmetic operations, as the semantics of such operations cannot be accurately modeled using only conjunctions of linear constraints. Abstract domains supporting non-linear constraints exist, but they generally come with a significant performance overhead. An alternative approach is to use disjunctive abstract domains, allowing the behavior of non-linear operations to be split into mutually exclusive cases that can be precisely described using conjunctions of linear constraints. However, this alternative also imposes a performance overhead due to the increased cost of operations.

In this paper, we present a value analysis approach that handles non-linear arithmetic operations using disjunctions of conjunctions of linear constraints. Instead of directly using disjunctive abstract domains, we encode the disjunctive nature of non-linear operations directly in the abstract program. This approach enables us to use non-disjunctive domains like polyhedra and octagons, while still benefiting from the disjunctive information to infer more precise relations for programs with non-linear arithmetic operations. We implemented a prototype of our analysis in Costa, a cost and termination analyzer for Java bytecode. Through experiments on typical examples from the literature, we demonstrate that Costa is capable of handling programs with non-linear arithmetic that it could not handle before.

The paper also details a multi-step value analysis approach, including abstract compilation, fixpoint computation, and termination or bounds inference using the abstract program and its semantics. A specific focus is placed on abstract procedures, avoiding merging of calling contexts to retain precision, and identifying non-linear arithmetic instructions that do not affect termination to minimize performance overhead. Additionally, the paper presents procedures for adding pre- and post-conditions to events and applying the least upper bound of the underlying abstract domain to ensure termination.

The new value analysis in Costa was able to prove termination for all benchmarks, highlighting its effectiveness compared to other termination analyzers for Java bytecode. In conclusion, the paper demonstrates an approach to handling non-linear arithmetic instructions in value analysis that overcomes the limitations of abstract domains based solely on conjunctions of linear constraints. It also outlines future work to improve the scalability of the analyzer, support overflow in arithmetic operations, and facilitate floating point arithmetic based on the latest developments in the Parma Polyhedra Library.