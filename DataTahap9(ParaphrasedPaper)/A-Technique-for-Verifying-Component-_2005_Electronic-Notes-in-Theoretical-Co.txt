The use of component-based software systems presents new challenges for the testing community, particularly in terms of reusing components and reducing testing costs by leveraging information about the quality of software components. This paper focuses on addressing the testing of evolving software systems, which are obtained by modifying or replacing some of their components. The paper proposes a technique to automatically identify behavioral differences between different versions of the system, in order to deduce potential issues arising from inconsistent behaviors. The approach involves automatically distilling invariants from in-field executions, which are then used to monitor the behavior of new components and uncover unexpected interactions. The events generated during system executions are presented to software engineers, who can identify potential problems with the new versions.

Raz et al. utilize invariants computed by Daikon and statistical algorithms to synthesize the behavior of data feed systems. This approach is similar to the Behavior Capture and Test (BCT) technique, but it operates in a distributed setting where invariants are both computed and stored at the client side. BCT leverages invariants from a different perspective, using them to track the evolution of both systems and components and to verify the correctness of the actual implementation.

Preliminary experimental results using invariants to detect mismatches between different versions of the Java Pet Store show that BCT can identify a wide range of faults. The authors plan to gather more experimental data on BCT to substantiate the benefits provided by this technology. They are currently developing a tool suite for the automatic application of BCT to large experimental software, aiming to evaluate the feasibility of applying BCT to industrial-scale systems, and to clarify the effectiveness, synergies, and complementarities of faults detected by either interaction or I/O invariants.