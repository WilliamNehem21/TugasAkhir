This academic paper introduces fixpoint calculations on lattice structures as a model of highly modular programming in a dependently typed functional language. The authors propose a library of Coq module functors for constructing complex lattices using efficient data structures. The lattice signature incorporates a well-foundedness proof obligation to guarantee the termination of generic fixpoint iteration algorithms. This approach allows for the construction of complex well-foundedness proofs in a functorial manner. Additionally, the paper demonstrates the capability of the recent Coq module system in manipulating algebraic structures and extracting efficient OCaml implementations. The second contribution of the work is a generic result, based on the constructive notion of an accessibility predicate, about preservation of accessibility properties when combining relations.

The paper begins by presenting the module signature that models the lattice to be built, followed by a motivating example and the presentation of various lattice functors. The paper concludes by discussing the new aspects of the functor, in particular, the proof that the widening operator satisfies its termination criterion, and extends the library to handle narrowing operators by addressing the challenges related to functor products.

In summary, the paper provides a framework for programming fixpoint computations on lattice structures in a dependently typed functional language, along with a library of Coq module functors for constructing and manipulating complex lattices. The focus is primarily on the product and function functors, although other functors are also available in the Coq development.