Model checking, in contrast to theorem proving, is a fully automated method for ascertaining whether a specified system meets a given property. A model checker exhaustively examines the state space of a system to determine whether the property holds, and if it does not, the model checker typically provides a counter-example to explain why the property does not hold.

Initially, model checkers were only applicable to finite systems and simple notations suitable for modeling systems with complex control structures, such as hardware systems and communication protocols. However, recent advancements have loosened these restrictions, enabling automatic techniques for property-preserving abstraction and bounded model checking, which allow systems with infinite state spaces to be examined. Additionally, powerful automatic decision procedures have enabled model-checker languages to support high-level specification constructs, such as lambda expressions, set comprehensions, and universal and existential quantifiers, thus making it possible to check specifications written in high-level languages.

The study has found that the branching time temporal logic CTL is well-suited for modeling simulation rules. The paper demonstrates how CTL model checkers, such as NuSMV or SAL, can be used to verify the standard conditions for downward simulation, both for systems with a blocking interpretation of operations and those with a non-blocking interpretation. The approach is not specific to a particular state-based specification language or CTL model checker. It also discusses the potential extension of the approach to upward simulation in future work.

Furthermore, the paper discusses the use of CTL formulas to express properties that are true on at least one or all paths of the Kripke structure M starting from a given state. It also outlines a general approach to checking downward simulations under a blocking semantics with a CTL model checker, combining systems for checking the simulation conditions and emphasizing the need to combine systems to check these conditions. Additionally, it highlights the possibility of utilizing SAL's advanced features and optimisation possibilities, and suggests that future versions of SAL are expected to support predicate abstraction, which is essential for handling larger examples.

The paper concludes by noting the potential applicability of the approach to a wider range of state-based specification languages and CTL model checkers, particularly with the ongoing efforts in the temporal logic model checking community to extend model checking to systems with larger, and even infinite, state spaces.