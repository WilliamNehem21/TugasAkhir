At Yale, we have been working on the development of a typed common intermediate language, called Flint, which is capable of safely supporting not only the standard object-oriented model, but also higher-order generic programming and Java-style reflection. In contrast to the Common Language Runtime (CLR), our type system is not tied to any specific programming model, yet it has the capacity to express all valid propositions and proofs in higher-order predicate logic, enabling the capture and verification of advanced program properties. The sophisticated type system of Flint enables the type checking of both compiler intermediate code and low-level machine code, allowing for type checking to occur at any stage of compilation, even after optimizations and register allocation. Additionally, it results in a more compact and adaptable virtual machine, as low-level native routines that would typically be part of the virtual machine can now be verified and moved into a certified library. This presentation outlines our vision for the Flint system, describes our approach to its design, and provides an overview of the technologies that can be employed to support its implementation.