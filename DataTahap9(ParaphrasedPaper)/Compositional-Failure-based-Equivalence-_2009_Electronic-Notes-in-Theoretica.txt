Constraint automata were first introduced as the operational semantics of reo specifications. This section provides a brief overview of reo before presenting the original definition of constraint automata, which considers them as acceptors of languages of timed data streams. An extended definition is then introduced, treating constraint automata as labeled transition systems that can be translated into a constraint automaton. Additionally, two composition operators for constraint automata are introduced: join (production), which combines two constraint automata based on their common port names, and hiding, which removes a name from all transition labels of a constraint automaton. For further information on the reo specification language and constraint automata as its semantics model, the reader is referred to [1,3,2,4].

Definition 3.2 denotes the original definition of constraint automaton, while a modified definition (as presented in Definition 3.3) is used in this paper. Consequently, the automaton defined in Definition 3.2 is occasionally referred to as the traditional constraint automaton.

The section also describes the operators for joining and hiding a port name from a constraint automaton, using the new definition of constraint automaton. These revised definitions extend the original operators while maintaining their previously proven properties.