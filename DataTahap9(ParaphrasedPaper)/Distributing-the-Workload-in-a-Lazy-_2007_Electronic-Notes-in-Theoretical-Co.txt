The field of automated theorem proving involves the automatic discharge of proof obligations that arise in the application of rigorous methodologies for designing critical software systems, without any user interaction. Recent advances in the integration of boolean satisfiability with decision procedures for decidable theories of first-order logic, known as the lazy approach, have provided new methods to effectively prove or refute these proof obligations. This paper presents the first attempt to design a distributed version of lazy theorem proving on a network of computers, in order to utilize processing power more effectively and prevent automated reasoning from becoming the bottleneck in the application of formal methods. The experiments conducted demonstrate the feasibility and benefits of this approach.

Formal verification tools and techniques face challenges in dealing with increasingly complex software systems, with the verification of system properties often being a bottleneck in formal design approaches. One common approach to address this issue involves creating a conservative abstraction of the system and verifying if it satisfies a property. If the property is satisfied, it can be inferred that the original model also satisfies the property; otherwise, a refinement step is undertaken, with the abstract model being updated to incorporate more details. This abstract-check-refine cycle is repeated until a conclusion can be drawn or computational resources are exhausted. State-of-the-art model checkers for software verification are examples of tools that employ this verification approach.

The construction of a distributed system presents challenges in both design and implementation. The toolbus provides a solution for implementing robust distributed systems, using a process algebra to describe the protocol between different components and a uniform communication data type called aterms. This paper provides essential information on how components of the Harvey system can be distributed and interconnected using the toolbus.

In the distributed version of Harvey, the master tool can emit new assignments to be checked for unsatisfiability by slave first-order reasoning tools. The verification in the slave tools is done asynchronously with respect to the master tool, which creates and dispatches new assignments to the connected slaves. The inner workings of the master-slave tool are described in detail in a subsequent section.

The distributed version of Harvey has been implemented and tested in a small network of workstations, and two experiments are reported on. The first experiment involves different approaches to choosing the assignment, as this choice directly impacts the efficiency of the verification. The second experiment presents the speed-up obtained with the distributed version of Harvey considering varying numbers of available slaves.

Furthermore, the paper describes several approaches for choosing a satisfying assignment from the propositional abstraction of a formula. These approaches, developed for binary decision diagrams (BDDs), aim to optimize the efficiency of distributed Harvey. The impact of distribution is illustrated through the computation of the estimated speedup for different numbers of slaves.

Finally, the paper notes that in some experiments, distributed theorem proving achieves super-linear speedups, particularly when employing the random assignment choice approach. These occurrences are attributed to the proof of unsatisfiability of an assignment prun 
ing a relatively large part of the search tree, particularly for formulas in which the value of a small subset of atoms causes unsatisfiability. The paper validates the proposed approach through a series of experiments, demonstrating both the achievement of interesting speedups on average and the efficiency of the random assignment choice approach.