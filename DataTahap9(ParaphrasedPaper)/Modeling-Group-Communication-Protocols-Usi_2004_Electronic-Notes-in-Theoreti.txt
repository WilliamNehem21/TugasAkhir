There have been few findings on the formal analysis of group management protocols, with only a couple of instances such as Pereira and Quisquater examining a-gdh, and Meadows uncovering security vulnerabilities in early versions of gdoi. The formal analysis of group management protocols presents novel challenges for formal analysis methodologies, necessitating new language features and models to accurately capture the concepts of such protocols. In response to these needs, mucapsl (Multicast Common Authentication Protocol Specification Language) and its intermediate language mucil (Mucapsl Intermediate Language) were developed as extensions of the CAPSL and CIL protocol analysis effort for unicast protocols. Mucapsl offers high-level specification concepts for multicast security protocols, encompassing message passing using unicast and multicast addressing, group membership data, and basic cryptographic operations. Mucil, on the other hand, is closer to state-transition representations of protocols, serving the dual purposes of defining the semantics of mucapsl with respect to multiset term rewriting and acting as an interface for the analysis of protocols specified in mucapsl using a range of tools.

The paper focuses on mucil and its term rewriting semantics, and utilizes the group Diffie-Hellman (GDH) protocol suite to demonstrate the modeling of group communication protocols. GDH, an extension of the two-party Diffie-Hellman key agreement scheme to accommodate arbitrary group sizes, encompasses a key distribution algorithm and protocols for member addition and deletion. The key distribution protocol in GDH, which includes both unicast and multicast messages, is selected as an example to illustrate the semantic framework for multicast protocols. The paper discusses the diagrammatic abstraction of important details, such as the storage of received messages, computation of new key contributions, and message composition, which are part of the mucapsl specification. The paper goes on to elucidate the implementation algorithm, state transition rules, and members' attributes, as well as the roles executed by members and the potential for concurrent role duplication. The authors also outline their ongoing work on developing the mucapsl-mucil translator to parse and typecheck mucapsl specifications and generate mucil rules for the protocol, with plans to incorporate an optimization stage to combine successive mucil rules.