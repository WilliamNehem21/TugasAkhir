The paper discusses the limitations of intensional negation in logic programming and the introduction of constructive negation to overcome these limitations. It also presents a method for eliminating unnecessary local variables from definite logic programs in order to improve the efficiency of SLD-computations.

The paper's outline is as follows: preliminary definitions are given in the next section, program normalization is presented in section 3, the notion of mode specification is introduced in the fourth section, and section 5 shows the process for eliminating local variables from a definite program in multiple phases.

The authors emphasize that mode specifications pertain to positions rather than the actual terms being held, and that the same term, particularly a variable, may occur in different atoms in positions with different modes. The mode specification does not constrain the goals and is unrelated to the data flow assumed by the programmer.

The paper places conditions on recursion in the rightmost atom and in the recursive clauses to ensure the occurrence of a tuple of distinct variables in the output arguments of both the head and the rightmost body atom. These restrictions are important for the auxiliary variable elimination process.

The auxiliary variable elimination process involves inferring mode specifications and employing strategies to guide the application of unfold/fold transformations in order to eliminate local variables. The method aims to make SLD-computations more efficient by eliminating redundant computations made using local variables.

The authors indicate their intention to extend the results to normal logic programs, although they acknowledge that achieving full generality in this case may be challenging. They believe that the method can be adapted for a wide subclass of normal logic programs and plan to explore the extension to constraint logic programming in future work.