Soft constraints have become increasingly popular in various fields, such as the orchestration of web services and the optimization of scheduling decisions. However, existing approaches to soft constraints have limitations in modeling decision problems with multiple preference criteria. This paper proposes a new approach to soft constraints that enables the natural expression of such problems. An implementation in the rewriting logic system Maude is described, and its correctness is proven.

The paper is structured as follows: Section 2 introduces the theory of monoidal soft constraints. Section 3 describes the transformations performed on constraint systems before submission to the solver. Section 4 outlines the branch-and-bound algorithm and proves its correctness. The final sections present related work and conclusions.

The proposed monoidal soft-constraint problem combines the grades of multiple soft constraints into a single rank, which measures the overall quality of a solution. A family of c-operations, known as the preference relation, is used to specify this combination process. While the grades represent the quality of individual constraints, the preference relation expresses the importance assigned to each constraint.

To improve the efficiency of constraint solving, recursive specifications are written in tail-recursive form. The paper briefly presents the implementation of constraints for the meeting scheduling service and the branch-and-bound algorithm for solving soft constraints, based on previous work for solving soft constraints over constraint semirings. Changes include solving soft constraints over partially ordered monoids and a flexible approach for specifying preferences between constraints.

In some cases, divide-and-conquer optimizations can be used to improve efficiency. For example, lexicographic combinations of constraints can be solved independently, and cartesian products can be computed independently if they do not share variables.

The introduction of totally ordered preferences tends to speed up the search significantly, while the introduction of indifferences (leading to partial orders) slows down the search. Divide and conquer optimization can reduce the time needed to compute solutions, but there are cases where the opposite effect is observed.

The work was influenced by the theory of semiring-based constraint satisfaction problems (SCSPs), as well as by the stratification of constraint problems in constraint hierarchies. The use of Maude for implementation simplifies the correctness proof and integration into the Pagoda system for software-defined radios, although it may introduce inefficiencies that are not present in lower-level language implementations.

Further research is needed to develop methods to solve constraints with infinite support and to address generalized problems beyond constraint satisfaction problems. Additionally, efforts to find appropriate analysis methods that exploit the two-level structure of the constraint problem are needed to create improved solvers.