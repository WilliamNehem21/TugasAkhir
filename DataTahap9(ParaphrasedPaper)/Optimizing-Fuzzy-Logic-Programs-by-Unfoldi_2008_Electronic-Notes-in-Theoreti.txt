Multi-adjoint logic programming is a recent and highly flexible attempt to incorporate fuzzy logic into logic programming. This paper proposes the development of a fold/unfold based transformation system for optimizing fuzzy logic programs, drawing on previous experience in declarative program transformation. The paper outlines the main features of the procedural semantics of the programming language used in this work, summarizes a preliminary set of fuzzy transformation rules, and presents refined and extended transformation rules. The paper also emphasizes the importance of avoiding self-folding to prevent infinite loops and discusses the necessity of an aggregation step before applying a folding step. The application of a fold step is illustrated through an example, emphasizing the need for proper aggregation before folding even when the rule has not been previously unfolded. The paper concludes by pointing to future work and its implications.