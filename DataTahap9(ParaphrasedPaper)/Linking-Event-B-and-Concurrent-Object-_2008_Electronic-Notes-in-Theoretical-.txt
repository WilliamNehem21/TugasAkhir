The event-b method is a formal system modeling approach that employs refinement. It initiates specification at an abstract level and adds detail through refinement steps as development progresses toward implementation. When dealing with concurrent processing in software systems, it is necessary to include concurrent features before implementation. This paper aims to demonstrate how event-b models can be connected to concurrent, object-oriented implementations using an intermediate, object-oriented style specification notation called Object-Oriented Concurrent-B (OC-B). The notation facilitates the specification of concurrent aspects of a development and enables reasoning about concurrency issues in an abstract manner.

The paper presents a validation of this approach by automating the translation process with an Eclipse plug-in that produces both event-b models and Java code. It focuses on providing a clear view of atomicity using labeled atomic clauses and abstracting away implementation details such as locking. The paper builds on techniques introduced in UML-B to model object-oriented developments and introduces non-atomic operations and features for specifying implementation-level details.

Moreover, the paper discusses the mapping to Java and emphasizes the need to ensure freedom from interference by restricting visibility of data and enforcing a mutual exclusion policy for shared data access. The work also aims to prevent interference between concurrently executing processes and introduces transactional constructs to facilitate access to multiple shared objects in the future. The proposed approach is expected to simplify reasoning about concurrency by abstracting away details of locking and providing a clear view of atomicity, while making the transition from abstract modeling to concurrent implementation easier. 

The paper introduces various sections that define a system with processes and program counters, followed by the definition of monitors and their extension with object-oriented features. It also discusses the syntactic sugar and provides an example refinement of an event-b model to an OC-B model. Additionally, the paper describes the mapping to Java, discusses related work, and presents conclusions and ideas for future work.

Overall, this work presents a formal approach to linking event-b models to concurrent, object-oriented implementations and aims to simplify the transition from abstract modeling to concurrent implementation.