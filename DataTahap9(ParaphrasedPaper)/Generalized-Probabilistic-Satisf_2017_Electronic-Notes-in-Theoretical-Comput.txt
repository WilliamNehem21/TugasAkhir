The problem addressed in this study concerns determining the satisfiability of a set of possible probability assignments to propositional formulas. Significant efforts have been put into analyzing the probabilistic satisfiability problem and creating effective tools for its automated treatment.

Similar to many NP-complete problems, the Genpsat problem demonstrates a phase transition phenomenon. When solving batches of parameterized random Genpsat problems, it becomes clear that there exists a threshold separating a phase in which nearly every Genpsat problem is satisfiable from a phase in which nearly every Genpsat problem is not satisfiable. As the transition occurs, the problems become substantially more difficult to solve.

Let's start by establishing a set of propositional variables x1,..., xn. A literal can be a propositional variable or its negation, while a clause is a non-empty disjunction of one or more literals. A propositional formula encompass any boolean combination of propositional variables.

We can demonstrate that Genpsat is within NP by providing a polynomial-sized certificate. Notably, Lemma 3.3 can be extended to incorporate rational coefficients by normalizing with the greatest denominator. Applying this result to the system(3), we can deduce that a k m 1 matrix w, composed of columns of v, can be existent, and the system will have a solution if the original system(3) does. Moreover, solutions obtained from (4) can be correlated to solutions of (3) by introducing zeros in appropriate positions. As the solution derived from the latter system has k m 1 elements, it serves as the NP-certificate for the Genpsat problem.

In this section, we explore the close relationship between the satisfaction of propositional formulas and the feasibility of a set of linear constraints over binary variables. Additionally, we present a reduction of Genpsat to mixed-integer programming (MIP), akin to the approach taken with PSAT and GPSAT. A MIP problem involves optimizing a linear objective function subject to a set of linear constraints over real and integer variables and has been shown to be NP-complete. It is important to note that this translation to MIP also serves as proof that Genpsat is within NP.

We subsequently measure the proportion of satisfiable instances and the average time spent by the solver to resolve them. Our software was coded in Java, and we utilized Gurobi version 6.5.0 to solve the MIP problem. The tests were conducted on a Mac Pro equipped with a 3.33 GHz 6-core Intel Xeon processor and 6 GB of memory. Our implementation is available for public access.

Regarding our generalized version of probabilistic satisfiability, Genpsat, it is worth noting that a randomly sampled probabilistic formula can be inherently inconsistent, for example, when it implies that one of the probabilities is greater than 1. Because of this, the coefficients were sampled in a manner to prevent such occurrences.

Throughout this study, we delved into the generalized version of probabilistic satisfiability, Genpsat. Leveraging its NP-completeness, we demonstrated a polynomial reduction from Genpsat to MIP, which was validated to be correct. Since the translated MIP problem only exhibits quadratic growth, we managed to solve reasonably sized instances for various parameter values such as the number of variables, clauses, and probabilistic formulas. As different combinations of these parameters can define an instance, we were able to conduct a comprehensive analysis of the phase transition by scrutinizing behavior across different ratios. As for future work, we aim to explore the phase transition while considering the size of the linear combination in the probabilistic formulas and conduct a 4th-dimensional analysis on the variation of the parameters.