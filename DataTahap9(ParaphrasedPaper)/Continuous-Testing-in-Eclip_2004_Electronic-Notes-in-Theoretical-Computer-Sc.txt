The use of continuous compilation in Eclipse, which triggers a compilation after each saved change, allows Java developers to quickly identify any compilation errors. Despite the potential for redundant feedback, the popularity and effectiveness of continuous compilation demonstrate its value. A user study on student developers led to the development of a full-featured implementation of continuous testing as a plug-in for the Eclipse integrated development environment, leveraging the existing support for integrated unit testing, asynchronous compilation, and automatic notification of compile errors. 

The continuous testing plug-in allows developers to associate a test suite with each Java development project, run the test suite asynchronously, prioritize tests, and receive unobtrusive signals indicating test failures. The plug-in is designed with future reuse in mind and employs common-sense heuristics to minimize distractions to the user. The paper discusses related work, design of the continuous testing plug-in, and opportunities for improvement. The study results indicated that users found the tool helpful and intuitive, with no negative impact on productivity.

The paper highlights the similarities and differences between continuous compilation and continuous testing. It also outlines the design and behavior of Eclipse's auto-building framework and JUnit launch framework, and emphasizes Eclipse's potential as a platform for evaluating and distributing experimental software productivity tools. The authors intend to collaborate with Eclipse developers to further integrate and improve the plug-in, and support its adoption and development by a wider user base.