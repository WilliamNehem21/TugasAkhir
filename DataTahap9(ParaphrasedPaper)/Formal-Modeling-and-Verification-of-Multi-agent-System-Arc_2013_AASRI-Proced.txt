The use of a well-designed software architecture is an effective way to mitigate the complexities of developing distributed systems and is particularly beneficial for applications such as online trading, disaster response, and modeling social structures. In this study, we apply the architecture style to the development of multi-agent systems, which often share common characteristics at the construction level. Consequently, a multi-agent system architecture (MASA) can greatly assist in the development of such systems.

The MASA operates on a framework where distributed agents are able to interact with each other to accomplish tasks, with information resources stored in information nodes. Agents communicate using connectors, and in instances where exceptions are raised within the system, fault tolerant agents are responsible for handling them.

Various agents within the system have distinct responsibilities. For instance, the Query Agent (QA) determines whether to engage with other agents, while the Information Node Agent (INA) decides which information node is relevant. The Query Transmission Agent (QTA) facilitates communication among agents, and the Management Agent (MA) is in charge of coordinating queries, analyzing results, and managing projects. Additionally, the Construction Agent (CA) is responsible for identifying and selecting appropriate projects.

At the architectural level, fault tolerant techniques have been integrated to handle exceptions. When an exception is raised, an appropriate handling strategy is employed, and if unsuccessful, the fault tolerant agent is notified. The global exception, in turn, impacts other interacting agents, necessitating communication and cooperation among the agents to address the situation.

The study also introduces important functions within the BA and FTA theories, such as senddata, exceptpropagate, exceptreceive, uniexcepthandle, exceptrec, and exceptgraph, which serve crucial roles in the interaction and handling of exceptions in the multi-agent system.

Furthermore, the verification process is supported by primitive and induced lemmas, which guide the verification process and can help address any discrepancies in verification results. Additionally, the authors acknowledge the support of relevant sponsors and funders that have contributed to the realization of this study.

Overall, this study presents a comprehensive approach to utilizing software architecture in the development of multi-agent systems, offering valuable insights into exception handling, fault tolerance, and verification processes within such systems.