The paper proposes a two-tier method for illustrating software architectures and their development using visual modeling formalisms. It suggests using one formalism to describe the architecture level and another to model the behavior of each component (component specification level). Graph transformation is employed at both levels for formal depiction of the modeling formalisms and the model evolution. The visual modeling approach, termed genged, allows designers to define the explicit and abstract syntax of each formalism, offering the flexibility to create new visual languages based on the specific problem domain. Coherence between architecture and component specifications is established through their abstract syntax, enforcing consistency while the user modifies the model in the editor generated by the genged tool. These ideas are demonstrated through a small example utilizing UML-like class diagrams for architecture and Petri net-like networks for component behavior.

The paper emphasizes the necessity for an appropriate architecture representation that complies with the decomposition paradigm and permits component interactions to be visualized effectively. It mentions the importance of a visual tool environment for architecture description and the need for the user to conduct syntactical checks on the model using the tool environment. The authors reference Kramer and Magee to highlight the significance of a clean separation between functional concerns of individual application processing components and architectural coordination, stressing the need for a formal approach to change management, which would enable mathematical reasoning and serve as a basis for tool support. They argue that a visual modeling approach for model evolution at the design level should not be tied to a specific technique, but should accommodate various architecture description languages and visual specification techniques.

The paper introduces genged, a visual modeling approach supporting the syntax specification of arbitrary visual modeling languages based on algebraic graph transformation. Genged is used for rule-based modifications of system behavior and architecture. It enables the visual specification of visual languages and automated editor generation for diagrams. The paper outlines different types of changes in the model, such as local changes within a service net and global changes in the architecture level, and discusses the impact of global changes on the component specification level.

The paper concludes by suggesting that the genged approach allows for consistent evolution steps induced by graph transformation, ensuring that model evolution remains consistent. It also emphasizes the need to enhance the abstract alphabet and grammar rules to include additional checks. The authors mention that their approach is flexible and can be applied to different visual modeling techniques, and they plan to extend their work to formalize and check component behavior and interrelations, as well as to explore more examples and case studies using different visual modeling techniques.