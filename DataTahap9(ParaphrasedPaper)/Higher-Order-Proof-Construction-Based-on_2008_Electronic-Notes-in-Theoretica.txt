We can refine the proposition and use a narrowing search to find an unknown proof. The general search procedure will attempt to construct proofs of the specified proposition. To develop a proof construction tool for a given higher-order formalism, one approach involves adding meta variables (or logical variables) to the abstract syntax of the proof language. These variables act as placeholders for unknown data. When searching for a proof, a single meta variable is created at the start to indicate that the entire proof term is initially unknown. The meta variable is then instantiated step by step, with new meta variables representing unknown sub-terms being added during instantiation. Throughout this process, one must keep track of the semantics of the formalism and backtrack when necessary.

One advantage of using the proposed method to achieve proof search from a proof checker is that it allows for the reuse of the existing proof checker rather than implementing a complex proof search algorithm. This not only saves effort but also minimizes the potential for inconsistency. Additionally, if the narrowing search procedure is sound and complete, the correctness of the proof search is directly provided. Another advantage is that the narrowing algorithm handles meta variables, eliminating the need to add them to the term syntax. Furthermore, since the narrowing is first-order, the search algorithm is relatively straightforward.

The potential drawback of this approach is that the resulting search procedure, while theoretically sound, may not be efficient enough for practical use. The authors investigated this by implementing a narrowing search algorithm and a proof checker with the aim of automating the construction of small proofs. This tool is intended to be used in an interactive proof construction environment to assist in filling in not overly complex sub-terms in a proof, rather than competing with advanced algorithms for constructing higher-order proof terms.

The chosen formalism is a logical framework with dependent types and recursive data-types and function definitions. The implemented type checker is actually a type checker for this formalism in Haskell. Although applying the narrowing search on this type checker initially did not yield a practical proof construction tool, experiments suggested that by adding general features to the narrowing search and introducing some modifications to the type checker, the performance was significantly improved. The paper discusses these features and modifications.

The work explores the use of first-order narrowing to construct higher-order terms, and emphasizes the potential benefits and drawbacks of this approach. It also touches upon related work in the area of efficient strategies for automatically constructing proof terms, acknowledging that its approach cannot compete with advanced proof construction strategies. The paper describes some limitations of its approach and discusses potential areas for future improvement but also highlights the potential utility of its method in certain scenarios where low cost is more important than high performance.

In summary, the paper proposes a method of using narrowing search to automate the construction of small proofs in a logical framework with dependent types, using first-order representations and a type checker implemented in Haskell. It identifies potential advantages and drawbacks of this approach and discusses some experimental results and potential areas for further improvement.