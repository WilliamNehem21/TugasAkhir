The lambda calculus enriched with constructors breaks down pattern matching in the style of ML into fundamental rules. Some of these rules do not align with conventional computational and typing intuitions. However, it is feasible to establish an abstract model for the untyped calculus, albeit with a straightforward syntactic instance. 

Nevertheless, the issue of formulating a non-syntactic model for this calculus remained unresolved. This paper addresses this question within the untyped context by revisiting the original motivation behind the lambda calculus with constructors: simulating an abstract machine with two independent stacks. This immediately yields a continuation-passing style (CPS) translation into the standard lambda calculus. At a semantic level, it becomes evident that this translation converts any continuation model of the untyped lambda calculus into a model of the lambda calculus with constructors. Notably, any Scott domain can be adapted into such a model.

With regards to the extended calculus, the model presented here remains sound and the diagram (d3) corresponds to the last rule. Alternatively, if the rule "casecase" is removed from the calculus, then the commutation of (d1) and (d2) is adequate.