This paper presents an innovative approach to the dynamic composition of software in the realm of scientific computing, addressing the challenge of achieving high performance. The proposed approach combines dynamic architectures and task graph scheduling to enable efficient mapping of computational tasks onto interconnected machines, a crucial aspect in scientific computing. The paper introduces a dynamic service infrastructure designed to support high-performance applications, drawing from various fields within computer science such as optimization of parallel programs, dynamic software architectures, and software composition. The infrastructure is demonstrated in the context of executing data-parallel programs on a specific IT system, assuming a high-performance Fortran-like programming model for the components.

The paper emphasizes the importance of efficient task scheduling in achieving high performance in dynamic software composition. While finding an optimal schedule is a computationally challenging task, the paper discusses techniques for approximating and heuristically solving the problem, demonstrating their efficacy in practice. The paper also addresses the challenge of managing events that trigger changes in the system architecture, highlighting the role of a coordinator application in responding to both internal and external events.

A key contribution of the paper is the introduction of a dynamic service infrastructure that enables the dynamic change of system architecture while maintaining high performance. This infrastructure leverages precomputed models of potential architecture changes based on runtime events, allowing for efficient translation and optimization of system architectures concurrently with ongoing system execution. Upon the occurrence of an event triggering a change, the newly optimized system can be deployed without the need for additional preparations, demonstrating the flexibility and adaptability of the proposed approach.