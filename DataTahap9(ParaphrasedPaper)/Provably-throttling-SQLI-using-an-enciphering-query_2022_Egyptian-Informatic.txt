The rapid expansion of the internet has become a chief concern for businesses, with the surge in online information giving rise to heightened worries about information security and potential threats. Additionally, businesses heavily depend on the internet for important transactions like banking, making them susceptible to attackers attempting to gain unauthorized access to web application databases. One particularly damaging web application attack is the structured query language (SQL) injection attack, which targets databases for unauthorized access. Such attacks are classified as severe and detrimental for web applications, as they can result in unauthorized access, manipulation of database information, and potential denial of service.

Section 3 of the paper discusses previous research in this area, while Section 4 introduces the proposed method. Section 5 details the implementation and experiments conducted to validate the proposal, and Section 6 presents the experimental results and a discussion. The security analysis undertaken is explained in Section 7, and the final section offers conclusions and outlines potential future work.

SQL injection attacks are identified as the primary threat to web applications according to OWASP 2021. In recent years, significant research has been carried out to detect and prevent SQL injection attacks. Several proposed methods based on encryption and encoding mechanisms to prevent SQL injection attacks, such as the ones described next, have been put forward.

Raj et al. presented a method based on the reversal insertion algorithm (RIA), which utilizes a coded format to store data. This approach evaluates only the login page, and the computation and comparison combinations load multiple times to the web server, consuming more time. Namdev et al. employed the hash technique for securing logins, with the login process relying on the exclusive OR (XOR) value to authorize a user and protect against tautology attacks. Zhu et al. proposed modular automation of the SQL statement, focusing on pretreatment and maintaining a list for known anomaly patterns, though this method consumes considerable time due to pattern extraction and extra storage requirements. 

The proposed method presented in this paper focuses on using encryption in the database to prevent SQL injection. This encryption is limited to the insertion of information and keyword search, which may lead to increased processing times in contrast to the security benefits offered. Searchable encryption is used to safeguard information privacy and reduce decryption time.

The proposal also addresses the different categories of SQL injection attacks, such as union attacks, targeted database procedures, and attacks on site input fields. The results of the proposal were compared with other prevention approaches and methods, with the conclusion that it has no limitations for platform or language and is applicable to any web application environment. Further study will explore applying the proposed method to cloud architecture and determining its efficacy in withstanding SQL injection assaults in various topologies.