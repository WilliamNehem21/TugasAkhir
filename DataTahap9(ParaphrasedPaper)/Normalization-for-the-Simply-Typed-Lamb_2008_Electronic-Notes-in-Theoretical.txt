A logic program in Twelf is represented by a partial function from inputs to outputs, as specified by the mode declaration. Since only total functions correspond to valid inductive proofs, it is necessary to ensure that the defined function terminates for all inputs and covers all possible cases. However, these properties cannot be demonstrated within the framework; for instance, termination of the subst_red function cannot be proven. Instead, ensuring the totality of a function requires external reasoning and can be achieved using built-in tactics.

The "reduces" declaration asserts that the type expression c is a subexpression of a. Twelf verifies that this invariant holds for all possibilities of introducing subst_x a d c e f. In the case of subst_x_x, the assertion holds because c is instantiated to a, and in the case of subst_x_app, it follows from the induction hypothesis, which states that b => c is a subexpression of a.

The expression indicates that the four type families are mutually recursive and terminate with respect to the lexicographic order on pairs (a, e) of types a and typing derivations e. This corresponds to a main induction on a and a side induction on e. To verify termination, Twelf utilizes the "reduces" declaration. Additionally, using the world block wne_var, the code also undergoes coverage checking. Consequently, the lemma is entirely machine-verified.