In our prior research on biochemical applications, the combination of port graph structures (or multigraphs with ports) and a rewriting calculus has been found to be suitable for representing the interactions between proteins. Port graphs have been suggested as a formal model for distributed resources and grid infrastructures, in which each resource is represented by a node with ports. The lack of global information and the autonomous and distributed behavior of components are captured by a multiset of port graphs and rewrite rules, which are applied locally, concurrently, and non-deterministically. Some computations occur wherever possible and in parallel, while others may be influenced by strategies.

This approach also establishes a formal framework for reasoning about computations and verifying useful properties. We demonstrate how structural properties of a modeled system can be expressed as strategies and checked for satisfiability at each step of the computation, providing a means to ensure invariant properties of a system. This work contributes to the formal specification and verification of adaptive systems and lays the groundwork for the theoretical foundations of autonomic computing.

This paper is structured as follows: Section 2 defines the concepts of port graphs, port graph rewrite rules, and port graph rewriting, demonstrating their application in the context of molecular graph rewriting in a biological model. Section 3 outlines an abstract rewriting calculus inspired by biochemical transformations, where molecules are collections of structured objects, rules, and more general abstractions. An interaction occurring between an abstraction and a molecule is considered a step of the calculus. The introduction of application and failure enables the definition of more general forms of abstractions known as strategies, which express control over rule application within the same formalism. Section 4 extends the formal framework to verify structural properties of systems, showing how properties of a modeled system can be expressed as strategies and checked for satisfiability at each step of the computation, ensuring invariant properties of the system. The conclusion presents further research perspectives. All proofs of the results presented in this paper can be found in the provided sources.

Port graphs are a specialized type of graphs in which nodes have explicit connection points, called ports, with edges attached to specific ports of nodes. This graph structure is inspired by the molecular complexes formed in protein-protein interactions within a biochemical network, where a protein is characterized by a collection of small patches on its surface known as functional domains or sites, and two proteins can bind on such sites. Thus, a protein with its collection of sites is represented by a node with ports, and a bond between two proteins by an edge in a port graph.

The behavior of a protein is determined by its functional domains, which dictate its potential interactions with other proteins. These domains are usually abstracted as sites that can be bound or free, visible or hidden. A protein is defined by its collection of interaction sites on its surface. Proteins can connect at specific sites through low-energy bonds, forming molecular complexes. A biochemical system is represented as a discrete system composed of interacting components, giving rise to structural and behavioral transformations of the components and the system as a whole. Such a system is dynamic, exhibits emergent behavior, and is highly concurrent and non-deterministic.

We represent a protein as an empty box with the identifier placed outside and the sites depicted as small points on the box's surface. For proteins, the ports are called sites and the edges are referred to as bonds. Graphically, the state of a site is represented as a filled circle for bound, an empty circle for free, and a slashed circle for hidden.

For each port p in l, which corresponds to a non-empty set of ports {p1,..., pn} in r, the arrow node has a unique port r and incident edges (p, r) and (r, pi) for all i = 1,..., n.

For example, port graphs provide a modeling formalism for molecular complexes by constraining the connectivity of a port (referred to as a site in the biological model) to at most one other port, leading to the term "molecular graphs". In a given biological model, a p-signature can be derived by associating each protein name with its site names.

A molecular graph rewrite rule is a type of port graph rewrite rule where the left-hand and right-hand sides are molecular graphs. A molecular graph rewrite system consists of a finite set of molecular graph rewrite rules. Notably, a molecular graph rewrite rule is not a molecular graph but a port graph, as the arrow node does not adhere to the constraint of a maximum one incidence degree for its ports.

An extension of the chemical metaphor is to enhance it with a biological aspect, endowing molecules with a specific structure and association (complexation) and dissociation (decomplexation) capabilities. In living cells, molecules such as nucleic acids, proteins, lipids, and carbohydrates can combine based on their structural properties to form more complex entities. Biochemistry, as a science, heavily emphasizes the role, function, and structure of such molecules. Adding association and dissociation capabilities for molecules represents an essential feature when transitioning from a basic chemical model to a biochemical one.

At this level of definition of the calculus, a strategy (specifically a rule) is consumed by a non-failing interaction with a molecule m. An advantage of working with multisets is that a strategy can be assigned a multiplicity, and each interaction between the strategy and a molecule m consumes one occurrence of the strategy. This allows for controlling the maximum number of times an interaction can take place.

The primary original contributions of this paper are to introduce an abstract biochemical calculus for modeling systems that evolve according to initial rules and strategies, which in turn may create new rules based on generated states. Additionally, the paper demonstrates how to slightly extend the syntax to incorporate the verification of invariant properties of the system within the same calculus. When instantiated with port graphs, the resulting representation provides an expressive depiction of adaptive systems with interacting components, drawing strong inspiration from biological systems. It is hoped that this work will contribute to the theoretical understanding of autonomic computing.