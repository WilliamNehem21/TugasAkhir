Expanding upon prior research on proxying interaction with proof assistants, we have previously developed a proof movie. Our current work addresses the challenge of enhancing this movie data structure to accommodate commentary on formal proof development. To this end, we have investigated the extraction of commentary from an online text authored by Pierce et al.

By combining the dynamic nature of original movies with the narrative of a literate proof script, we have conducted initial experiments using Pierce et al.'s course notes on software foundations. In this endeavor, we have successfully generated a nearly identical set of pages, embellished with dynamic visualizations of the proof process.

Furthermore, we have loaded the script into an interface compatible with proof assistants such as Coqide or ProofGeneral. This interactive view of the document enables students to step through tactics, observe their effects, and complete exercises. Notably, the version displayed in the interface lacks the markup of the rendered version.

Our original design for movies consisted solely of plain text and lacked any form of enrichment. To elevate the presentation of movies, we have contemplated replacing the actual contents of the script with a pretty-printed version. For Coq, we have opted to utilize the Coqdoc tool instead of developing our own pretty printer.

Coqdoc, which is the Coq version of our initial approach, is distributed alongside the Coq proof assistant. This tool generates a rendered version of a proof script in HTML or LaTeX format, encompassing both a pretty-printed rendition of the commands and special comments extracted from the proof script.

In addition, structuring a movie into scenes can be performed automatically based on the Coqdoc output. Since Coqdoc categorizes nodes into code and documentation nodes, the creation of scenes from a Coqdoc-annotated script merely entails mimicking the document structure using scenes and subscenes. Each documentation node in the script corresponds to a scene, with the frames associated with it presenting the code beyond it.

One of the initial design decisions we have made pertains to how an author can group text into scenes. Recognizing that the resulting document structure forms a tree, we have considered employing a tree editor for adding, removing, or reordering scenes within the document and selecting scenes for further editing. This approach offers the benefit of enabling a clear overview of the structure and facilitating easy editing.

Building on our progress thus far, we have dynamically transformed the software foundations course notes and applied our techniques to create handouts for a proof assistant and type theory course taught by Geuvers at Eindhoven University of Technology. Additionally, we have identified other documents, such as the Coq tutorial by Huet et al., that we could potentially transform. It is worth noting that the Coq-tex tool in the Coq distribution also follows a similar approach, allowing for the execution of Coq commands within a LaTeX document and the extraction of the output into a LaTeX source file for further processing by the author. However, while these approaches primarily serve to compose proof and documentation concurrently, our movie empowers an author to first compose a proof script and subsequently generate a dynamic presentation of this script, which can then be utilized in the narration of the proof.