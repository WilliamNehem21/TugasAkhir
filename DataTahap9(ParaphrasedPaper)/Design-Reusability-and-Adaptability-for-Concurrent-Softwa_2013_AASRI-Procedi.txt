The commercialization of concurrent software, such as operating systems, has led to a greater emphasis on their design. System software, particularly operating systems, is continually being extended to incorporate improvements and support new features and hardware. In the design of concurrent system software, decisions regarding reusability and adaptability are of paramount importance.

The concept of separation of concerns, initially formulated by [3, 4], is crucial in concurrent software development. It offers numerous benefits, including enhanced reusability and adaptability. However, there is currently no widely accepted approach to guide programmers and developers on how to best achieve reusability and adaptability. Developers and programmers must carefully consider how separation of concerns can be applied not only in the design, but also in the implementation of system software. The extent to which concerns are separated directly influences the reusability and adaptability of both functional components and aspects within the system.

Design patterns play a significant role in the concurrent aspect framework. The abstract factory pattern and bridge pattern are utilized to create aspect components. The factory pattern is employed to create a distinction between an asset abstraction and the asset objects, thereby managing the creation process of asset objects and ensuring consistency. The bridge pattern helps prevent a permanent binding between an asset abstraction and its implementation, enabling flexible association and extension between the two. Additionally, the proxy pattern is used to control access to asset components and to delegate responsibilities when an asset component is accessed.

The concurrent aspect framework not only supports adaptability, but also promotes reusability. The framework facilitates independent design and consideration of functional and asset components, thereby achieving both vertical and horizontal reusability of these components. The use of design patterns in weaving functional components and system assets together further enhances adaptability.

To achieve vertical reusability, asset components on higher layers can utilize abstractions of asset components on lower layers for implementation, thereby promoting rapid development of concurrent software while reducing costs and time. This enables asset objects in the upper layer to specify and reuse asset objects in the lower layer that provide a generally specified asset. Any changes in the specification of asset objects in the lower layer will affect asset objects in the upper layer, ensuring consistent design and implementation of asset objects in the concurrent system.

Horizontal reusability can be achieved by developing various asset objects in different domains within the same layer using the asset interface of that layer. This approach facilitates the extraction of functional components and concerns through a single component called an asset component. This allows the moderator component to coordinate the interaction of functional components and aspect components via joinpoints, ensuring that system assets can be reused and adapted without interfering with functional components, and vice versa. Furthermore, the concurrent aspect framework not only promises reusability and adaptability, but also allows developers to use the most suitable language for the system, thereby reducing the time and cost of developing concurrent software. However, one weakness of this approach is the potential proliferation of classes.