This academic paper discusses the process of merging, which involves combining two sorted lists of elements to create a single sorted list. Initially, sorting was primarily done on large database systems using the merging technique due to its ability to balance the costs associated with expensive internal random access memory (RAM) and external magnetic storage mediums. Merging is an external method used to merge multiple sorted lists into a single sorted list on an external medium.

The merging algorithm involves a series of two-phase episodes. In the first phase of each episode, sorted sub-arrays are generated, and in the second phase, these sorted sub-arrays are merged. The input array's elements are placed into subarrays in a specific order, with elements of the same value being placed in the same sub-array. The M-way-merge technique is used to merge the sorted sub-arrays in order to create the final sorted array. As the process continues, the elements are sorted and placed in the M sub-arrays before each subsequent episode, with the two phases of the subsequent episodes being identical to those of the first episode.

Performance in external memory sorting is often constrained by I/O performance, as disk I/O bandwidth is considerably lower than main memory bandwidth. Therefore, minimizing the amount of data written to and read from disks is crucial. Large files cannot be accommodated entirely in RAM. The proposed implementation sorts the input file in two passes, with each pass involving reading from and writing to the disk.