Due to the distributed and open nature of web services, they present new security challenges. One such challenge is the susceptibility to cross-site scripting (XSS) attacks, which exploit existing vulnerabilities. To address this, a proposed approach utilizes two security testing techniques—penetration testing and fault injection—to simulate XSS attacks against web services. Additionally, the approach leverages WSSecurity (WSS) and security tokens to establish the identity of the sender and ensure legitimate access control for SOAP messages exchanged. The use of the vulnerability scanner SoapUI, a widely recognized penetration testing tool, is contrasted with a new fault injection tool called WsInject. The results demonstrate that WsInject, compared to SoapUI, enhances vulnerability detection, facilitates XSS attack emulation, and generates new types of vulnerabilities.

Web services, which are modular software applications accessible across a network such as the World Wide Web, are particularly susceptible to security risks due to their distributed and open nature. They introduce new security vulnerabilities associated with technologies like SOAP and XML. Injection attacks, including XSS attacks, have been highlighted as significant threats, aiming to inject malicious scripts into web services to manipulate databases and infect users. Given the continuous emergence of vulnerabilities and development of new attacks, the W3C has devised various specifications to protect web services, with WSSecurity being the earliest proposed specification in 2004.

The proposed method incorporates fault injection to simulate software faults and assess the behavior of web services in an unreliable environment. This complements penetration testing, which mimics attacks to uncover vulnerabilities. The study evaluates the benefits of using WsInject for fault injection and contrasts it with the limitations of SoapUI in vulnerability detection. Overall, the research aims to provide insights into security testing methodologies, specifically regarding XSS attacks, and their implications for web services.