The efficient and maintainable definition of models, as well as the ability to query, compare, and manipulate information within them, is crucial for model processing tasks such as model checking, merging, slicing, and synthesis. While the Object Constraint Language (OCL) was originally designed for expressing constraints for UML models, it can also be utilized for various model processing purposes. In this paper, we examine the potential for using OCL for processing models and present how we have employed and extended OCL. We also introduce a model processing tool that incorporates OCL as an integral part of model manipulation capabilities. We emphasize the importance of combined use of OCL and programming languages in UML model processing.

OCL, being a specification language, naturally lacks facilities for user interaction, as well as reading from or writing to files. However, the primary challenge for model processing tasks is that OCL is intended to be side effect-free. This restriction poses limitations for model processing operations that involve modifying the state of the modeled system. Additionally, OCL's standard library includes predefined types and operations, but in some cases, there may be a need for additional operations and types. OCL offers powerful extension mechanisms for altering the language to accommodate such needs.

We argue that model processing tasks in software engineering can be performed and composed of primitive model processing operations. These operations can range from checking and validation of models to transformation, projection, and refactoring operations. While general-purpose programming languages can also be used for model processing, they lack direct support for processing UML models and often result in lengthy and complex code.

An example of model operation is the searching and filtering of information in given UML models, which provides side effect-free checking and validation. Other operations include transformation, projection, refactoring, and set operations. However, OCL's side effect-free nature presents challenges for model processing, especially for operations that involve modifying the model.

To address the limitations of OCL, we propose an approach for authoring small model operations and combining them together using a special visual language called Visiome, which relies heavily on the usage of OCL and offers a high-level model processing paradigm. We have also developed an OCL interpreter to be used in conjunction with the Visiome engine, as well as for individual model operations.

Finally, we discuss some shortcomings of OCL and areas where it could be improved, along with observations based on our practical experience of using OCL. We also highlight the potential for extending OCL using OCL itself and discuss the importance of improving the readability and organization of the OCL specification.