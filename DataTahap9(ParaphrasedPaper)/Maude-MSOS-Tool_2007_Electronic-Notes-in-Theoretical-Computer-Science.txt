Structural operational semantics (SOS) is a widely recognized formalism used for specifying programming language semantics and concurrent systems. While this formalism has been influential, it has overlooked an important aspect of specifications, namely, modularity. In a seminal lecture at Aarhus, Plotkin identified this gap as a significant concern.

In the proposed approach, the transition relation's label is decomposed into pre and post projections. This decomposition then forms the basis of the rewriting relation, yielding pairs of pairs. The first pair consists of the program syntax and the pre-projection of the label, while the second pair comprises the program syntax and the post-projection of the label.

The function f, which may include attributes such as assoc or comm, is directly transferred to the generated operator. In the case of f being in mixfix format, the functional symbol is constructed by retaining lowercase identifiers and replacing uppercase tokens with underscores. The domain sorts of the generated operator are named after the uppercase tokens in f.

Constructive MSOS serves as an abstract syntax to represent typical constructs in programming languages. Our MSDF specifications for Constructive MSOS are composed of 800 lines, distributed across 74 modules defining abstract constructs and fundamental data types commonly used in programming languages. For example, there exists a module on cons/abs/closure with BNF and transition rules for closure values. The finely-grained modularization of the specification is made feasible through the encapsulation of semantic components provided by MSOS, thereby enhancing reusability.