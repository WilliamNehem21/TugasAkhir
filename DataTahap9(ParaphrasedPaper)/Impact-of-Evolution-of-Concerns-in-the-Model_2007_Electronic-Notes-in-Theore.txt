The principle of separation of concerns is crucial for designing high-quality software systems and is applied in both model-driven architecture (MDA) and aspect-oriented software development (AOSD). AOSD has traditionally focused on modeling crosscutting concerns, while MDA has emphasized the explicit separation of platform-independent concerns from platform-specific concerns and the model-driven generation processes. This suggests that AOSD and MDA techniques are complimentary to each other.

In order to evaluate the benefits of AOSD for MDA, a systematic analysis on crosscutting concerns in the MDA context is provided. This analysis involves defining an abstract model of MDA transformation with respect to concerns, identifying evolution scenarios corresponding to selected crosscutting concerns, and analyzing model transformations in MDA with respect to the abstract model, evolution scenarios, and related crosscutting concerns. The analysis reveals key problems related to the integration and evolution of crosscutting concerns in the MDA approach, leading to a set of recommendations for the language and the process used in the MDA approach.

In MDA, platform-independent models (PIMs) are separated from platform-specific models (PSMs), with the PIM representing a technology-independent abstraction. The PIM is transformed into one or more PSMs that include platform-specific details, and finally, the PSM is transformed into code providing the implementation details. This approach results in a clean separation of concerns, making systems more reusable, easier to port to different platforms, and increasing interoperability. However, current software systems also need to address concerns beyond platform-specific ones, such as distribution, persistence, synchronization, and error detection, which tend to cut across various components of the software architecture, increasing complexity and reducing maintenance.

AOSD aims to address these crosscutting concerns by providing explicit abstractions called aspects, allowing for better management of the impact of crosscutting concerns by separating them and composing them with the components. The paper suggests that both AOSD and MDA can benefit from each other to further tackle the challenges of current large and complex software systems.

The paper then presents a systematic analysis of crosscutting concerns within the MDA context, including defining concern transformation patterns (CTPs) to pinpoint the key problems in the transformation, providing evolution scenarios corresponding to crosscutting concerns, and offering recommendations for coping with crosscutting concerns in the MDA approach.

The paper also discusses the impact of crosscutting concerns on model transformations, emphasizing the importance of considering the ordering of transformations in addressing crosscutting behavior and the implications of introducing concerns at different stages in the MDA process.

The analysis identifies various problems related to integrating and evolving crosscutting concerns in the MDA approach, providing valuable insights and recommendations for addressing these challenges. Overall, the paper aims to improve our understanding of crosscutting concerns in MDA and provide practical recommendations for managing and mitigating their impact.