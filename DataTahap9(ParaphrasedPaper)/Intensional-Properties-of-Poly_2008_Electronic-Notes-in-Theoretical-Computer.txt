The academic paper proposes a method for representing computation more accurately, which involves translating terms into polygraphs rather than termgraphs. The properties of polygraphs appear to be similar to those of termgraphs. For instance, in the context of computing multiplication on natural numbers, a term rewriting rule is applied to duplicate the term corresponding to the argument x. However, in termgraph rewriting, it is possible to share the term instead of duplicating it, thereby eliminating the need for additional memory space. This sharing operation can be formalized algebraically as an operation with one input and two outputs, representing a duplication operation. Polygraphs offer the capability to have multiple operations with multiple outputs that are explicitly represented and managed.

The constructions in the paper are considered with respect to certain relations, including topological deformation, whereby wires can be stretched or contracted freely and 2-cells can be moved, as long as no crossings are created or wires are broken. Each 2-cell and 2-path has a 1-path as its input (1-source) and a 1-path as its output (1-target), which can be summarized using the compact notation f: s1(f) t1(f).

The paper introduces rewriting rules known as 3-cells in dimension 3, which always transform a 2-path into another 2-path with the same 1-source and 1-target. By using 1-cells, 2-cells, and 3-cells as generators, reduction paths called 3-paths can be constructed. These constructions are subject to certain relations, which allow for reasonable deformation of the constructions and identification of paths that differ only in the order of application of the same 3-cells on non-overlapping parts of a 2-path. An elementary 3-path contains exactly one 3-cell. Each 3-cell and 3-path has a 2-path as its left-hand side (2-source) and a 2-path as its right-hand side (2-target), summarized by the notation f: s2(f)$ t2(f).

The paper outlines a sketch of the proof, but the complete proof can be found elsewhere. It describes how polygraphic interpretations have been employed to establish termination of 3polygraphs and to derive properties related to the complexity of polygraphic programs. To provide intuition, it presents the analogy of imagining 2-paths as electrical circuits through which current flows from inputs to outputs.

The paper introduces the concept of current and heat maps, which can be used to compute the currents and heat produced by each 2-path. These maps are used to estimate the spatial and temporal complexities of a polygraphic program, providing bounds on the sizes of computed values and the number of computation steps remaining to reach a result, respectively.

The paper defines a polygraphic program and introduces notation for measuring the number of 2-cells and 3-cells within a program. It also discusses the use of current maps to understand the spatial complexity of computation and the pursuit of polynomial bounds for the length of computations. Additionally, it presents a technical lemma showing that the potential structural heat increase due to the application of a computation 3-cell during a computation is polynomially bounded by the size of the arguments.

In summary, the paper offers a novel approach to representing computations using polygraphs, providing insights into their properties and applications in computing.

Please note that while I have attempted to paraphrase the academic paper in a clear and accurate manner, I have not directly read the original paper and my paraphrase is based solely on the information provided. Therefore, I recommend cross-referencing my paraphrase with the original paper for accuracy and completeness.