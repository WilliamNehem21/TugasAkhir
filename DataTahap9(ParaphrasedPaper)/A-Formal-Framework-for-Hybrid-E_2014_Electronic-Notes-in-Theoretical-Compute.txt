In this paper, we introduce hybrid event b, a formal language for modeling hybrid systems, which combine discrete and continuous dynamics. Hybrid event b extends event b by incorporating differential dynamic logic and aims to enable the modeling of both continuous and discrete dynamical systems. The key contribution of this work is the introduction of differential events within hybrid event b, which facilitates the use of differential dynamic logic for modeling continuous and discrete dynamical systems. Additionally, we discuss the proof obligations associated with refinements on differential events, supporting stepwise development. Furthermore, we outline the transformer semantics of differential events and the application of the weakest precondition refinement approach, which collectively support the stepwise development of hybrid systems.

Hybrid systems, which integrate discrete and continuous dynamics, are essential for modeling embedded systems and cyberphysical systems due to their natural representation of different aspects of a system. Discrete aspects, such as switching and control decisions, are captured by discrete dynamics, while continuous aspects, such as motion and physical processes, are represented by continuous dynamics. The formal development of such systems requires consideration of both discrete and continuous frameworks. To address this, we present the principles underlying the design of hybrid event b, which builds on the established concepts of event b while incorporating the mathematical language of differential dynamic logic.

Hybrid event b borrows from differential dynamic logic the capability to handle symbolic parameters with logical variables, allowing for the creation of a unified specification language. It extends discrete dynamic logic by incorporating differential actions to represent continuous evolution. The symbolic nature of logic is advantageous for describing simple system actions with isolated effects on behavior.

The paper is organized as follows: the next section provides background on event b and differential dynamic logic. Section 3 presents the formal syntax, semantics, and refinement of hybrid event b. In Section 4, we demonstrate the application of our model language with a train control system example to specify properties of hybrid systems. Section 5 introduces related work, and finally, Section 6 concludes the paper and discusses future work.

Event b is a specification language based on set theory and first-order predicate logic, utilized for specifying properties in large reactive and distributed systems. Its development process is based on refinement, which gradually constructs a precise model. Machines, the key components of event b, define the dynamic behavior of the model through variables, invariants, variants, and events. The system variables, invariants, variants, and events define the dynamic behavior of the model, whereas contexts define the static elements through carrier sets, constants, axioms, and theorems.