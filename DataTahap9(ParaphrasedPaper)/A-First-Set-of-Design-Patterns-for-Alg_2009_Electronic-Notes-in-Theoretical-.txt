Section 2 provides an overview of design patterns, Section 3 introduces a pattern for bidirectional navigation without an undo stack, Section 4 presents a pattern for extending aspects of an AV system, and Section 5 summarizes the patterns and explores potential future AV-related pattern research. Design patterns are a way of addressing recurring problems by providing a basic solution that can be applied across different instances, even though the specific implementation may vary. The core elements of a design pattern include the name, motivation, sample code, and other aspects described in literature. The paper will structure sections according to the pattern name and include other elements as subsections for clarity and brevity.

The pattern introduced in Section 3 allows for easy navigation in both directions without the need for an undo stack, which is beneficial for users visualizing algorithms and tracking bugs in user-written algorithms. This approach involves stepping back to the previous stage using a well-defined position in the AV contents, similar to reverse debugging and checkpointing.

In Section 4, a pattern is presented for extending different aspects of an AV system without modifying other parts. This involves creating a new transformation subtype for a graphical object, which only requires adding code to the appropriate methods without changing the existing transformation effects or graphical object classes.

It is important to note that implementing these patterns may lead to increased memory usage, as graphical objects need to be stored twice, potentially causing memory fragmentation and impacting runtime. This drawback should be considered when utilizing these patterns in practice.