The concept of opacity pertains to the characteristics of the local states within the secure (or high-level) component of a system, derived from the examination of the local states within a low-level component as well as its actions. We introduce a modeling technique using Petri nets that enables the specification of various information flow properties through appropriately defined observations of system behavior. Our discussion encompasses the expressive power of the resulting framework and the decidability of the associated verification problems.

The notion of secrecy has been articulated in different ways within the field of computer security. A prominent formulation is non-interference, often credited to Goguen and Meseguer, although its origins can be traced back to the earlier work of Feiertag and Cohen. This formulation aims to formalize the absence of information flow, or more precisely, the absence of causal flow from one process to another. A recent reformulation of this notion in terms of the structural characteristics of Petri nets has been presented by Busi and Gorrieri.

The objective is to ensure that despite any observations made by an uncleared user regarding the system, the set of potential high-level (secret) inputs consistent with those observations remains unchanged. Essentially, the uncleared user should not be able to make any meaningful inferences about the interactions of a secret user with the system. Various issues and constraints of the original formulation have been highlighted over time, leading to the proposal of several alternative versions. An overview of these can be found elsewhere.

Initial-opacity is exemplified by the dining cryptographers scenario, which seems well-suited for modeling situations where initialization information, such as cryptographic keys, must be kept confidential. It can also be applied to situations where sensitive information can be expressed in terms of initially resolved nondeterminism. On the other hand, always-opacity appears more suitable for capturing...

Up to this point, it has been implicitly assumed that it is always possible to observe every step of executed transitions in some way (i.e., some label is always generated). However, there might be a need to handle completely invisible transitions and steps. We will now outline how such a feature could be integrated within our existing framework.

For example, two cryptographers, Anne and Bob, have a meal at a restaurant. Upon requesting the bill, the waiter informs them that it has already been settled. Both Anne and Bob want to determine whether the bill was paid by the NSA or one of them. If one of them made the payment, they do not want an eavesdropper to discern who settled the bill. We can represent this using Petri nets, where the placement of tokens indicates distinct scenarios and their outcomes. For each pair, the marked place must contain two tokens, signifying that both Anne and Bob must perceive each coin. The possible initial markings for the coins are therefore...