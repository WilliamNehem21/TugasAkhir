This paper is based on a recently developed technique to build debugging tools for lazy functional pro- gramming languages. With this technique it is possible to replay the execution of a lazy program with a strict semantics by recording information of unevaluated expressions. The recorded information is called an oracle and is very compact. Oracles contain the number of strict steps between discarding unevaluated ex- pressions. The technique has already been successfully employed to construct a debugger for lazy functional languages.

In [4] we have formalized a technique to automatically record and replay such step information. Apart from showing the soundness of the approach we were able to prove interesting properties about the magnitude of resources needed to compute the oracle information. In [8] we have then proposed a tool for debugging lazy functional programs with the oracle approach. This paper is concerned with the extension of the approach to functional logic languages.

Before we discuss the details of our solution we first give two well known examples for the two topics. First we will introduce the non-deterministic operation (?) on base of which all following non-deterministic operations will be defined. (?) takes two arguments and non-deterministically returns one of them.

The connection between generators and free variables can be illustrated with the narrowing example. Evaluating the expression replacing the variable with a genera- tor, i.e., (guard (head (genList genBool ())) 1) also yields 1 with the expres- sion being evaluated only as far as needed, that is to the expression (True:genList genBool ()). Not only with regards to semantics there is a close correspondence between generators and free variables, e.g., the result is 1. But also operationally the correspondence is tight as could be shown in [7]. Wherever we have a free variable in the substitution part of a narrowing derivation, we find a non-evaluated generator in the expression for the derivation with generators.

To project the search tree to a value we need a set of choices. Such a set defines for which reference which alternative to take. For example the one choice could be (1,1) representing that for reference 1 we take the first alternative whereas (2,2) would represent the choice to take the second alternative for reference 2. Projecting the resulting tree of the above example by the set of choices [(1,1),(2,2),(4,2)] we would obtain the list [1,2,3]. A search now boils down to the systematic construction of sets of choices. In order to illustrate this last point we also complete the definition of operation sorted defined above. As sorted matches on more than one constructor we have to introduce an auxiliary function. In general, in the resulting program each function matches at most one constructor. This makes it possible to continue the computation in the arguments of an Or node. The completed declaration of sorted is accordingly:

The reason is that any path to the sub tree corresponding to (permute [3,1,2]) leads over the choices [(1,1),(2,2),(4,2)]. Therefore these choices are also ap- plied for this sub tree leading to the one possibility [1,2,3] only. In addition any choice including (1,2) can only yield a failure.

necessary lookup of choices. However, possible optimization techniques are beyond the scope of this paper and we concentrate on the main advantage of the described technique for building debugging tools. This advantage is that because the main computation is now clearly separated in a deterministic derivation and a projection, the oracle technique developed to replay functional programs can be extended for functional logic programs in a straightforward way.

As detailed in [7] the search tree approach is well suited to implement search strate- gies as traversals on the tree structure. This is also compatible with the presented approach. If, for instance the programmer would have been interested in a first so- lution only with, e.g., a depth first strategy, the above expression would have been evaluated to (Or 1 3 (head (1:insert 3 [2]))) only and the corresponding or- acle would have been [1,2,0].

We have implemented the ideas introduced in the last section into a debugging tool for the language Curry. The tool is an extension of the one presented in [8] for the functional subset of Curry. In this section we will describe the basic ideas of how to present Curry derivations to the user.

In the approach described in Section 2.2 the end result of this derivation would be (1 ?1 2,[1,2] ?1 [2,1]). The references (here denoted as subscript to (?)) are then needed to reconstruct the fact that both parts of the tuple share the same choice, i.e., that (1,[2,1]) is not a valid projection of the result. In bubbling, in contrast, the next step is to copy the whole let expression. (If there was an outer context of this expression, that context would not be copied.) In the notions of [1], the tuple constructor is the dominator.

One of the main open problems with generator functions is how to reclaim the power of the unification operator (=:=). This operator introduces a new quality to functional logic programming. Where narrowing only binds free variables to non- variable constructor terms, (=:=) can also bind free variables to other variables. In this section we can only sketch the main ideas to solve this problem for the oracle approach.

Finally, the projection from search trees to values described in Section 2.2 has to be extended to a constraint solver. Due to lack of space we cannot describe the implementation of such a solver and leave this part for future work.

We have presented a recently developed technique to record compact data about programs written in a lazy functional language. We have shown how this technique can be extended to include the advanced features of lazy functional logic languages, especially with respect to narrowing and non-deterministic operations. The exten- sion to unification has only been sketched and a more thorough treatment is part of future work.

