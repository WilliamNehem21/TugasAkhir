Is a closed atom derivable from a definite logic progam? This derivation problem is undecidable. Focused on this problem there exist two categories approaches: the accurate approach that does not guarantee termina- tion, and the terminated abstract approaches. Both approaches have its advantages and disadvantages. We present a novel derivation framework for the definite logic program. A dynamic approach to characterizing termination of fixpoint is presented, then which is used to approximately predict termination of fixpoint in advance.If the fixpoint is predicted termination, we use the non-terminational approach to the derivation problem, otherwise,the terminated abstract approach is used. With this termination predicting approach, we combine the non-termination accurate approaches and the termination abstract approaches together for solving the derivation problem more efficiently. And the experiment results demonstrates the effectiveness of our approach.

There exist two categories approaches: the accurate approach that does not guar- antee termination, and the terminated abstract approaches. Both approaches have its advantages and disadvantages. This paper presents a novel derivation frame- work for definite logic problem. The derivation framework consists of a derivation algorithm, an abstract and refinement approach for the fixpoint, and an algorithm for predicating termination of fixpoint.

The presented abstract and refinement approach computes a safe approxima- tion of the fixpoint based on a variant of the depth(k) abstract domain[5], and refine the computed abstract fixpoint by increasing the threshold k of the depth(k) abstract domain[3]. The constructed abstract fixpoint terminates, and using which instead of the fixpoint the derivation algorithm will termi- nate. If the result of the derivation algorithm using the abstracted fixpoint shows the closed atom is not derivable, then it is actually not derivable since the abstracted fixpoint is a safe approximation; If the result of the derivation algorithm with the abstracted fixpoint shows the closed atom is derivable, and it is derivable also from the rules in abstract fixpoint which is not abstracted, then the derivation witness(a derivation tree) of the closed atom can be con- structed using the same approach in [4]. Otherwise, the abstract fixpoint is refined by increasing the threshold k, and the derivation algorithm will use the refined abstract fixpoint to solve the derivation problem again.

Our approach supports the abstract refinement iteration analysis framework. There exists no explicit refinement ways for the above approximation algo- rithms, whereas the variant of the depth(k) abstract domain is prone to be refined by only increasing the threshold k. And the derivation, constructing derivation witness and refinement all can be implemented in a mechanized way.

Observe that since a definite logic program has only a finite number of rules, infinite logic rules in solved-form fixpoint result from repeatedly applying the same set of rules, which leads to infinite repetition of selected variant goals or selected goals with recursive increase in term size[11]. By recursive increase of term size of a goal A from a goal B means that A is B with a few function/name/variable symbols added and possibly with some variables changed to different variables. Termination can be characterized by checking whether there exists infinite repetition of selected variant goals or selected goals with recursive increase in term size.

Our predicting algorithm is more precise and more efficient. Firstly, if the loop into relation is not defined restrictively over those heads of offspring of the same logic rule, there maybe some logic rules in a definite logic program, their several offspring are solved form logic rules and the heads of these rules satisfies the loop goal relations, then the algorithm will predict the solved-form fixpoint of the logic program model does not terminate, even though it actually terminates. Thus our predicting algorithm is more precise; Secondly, instead of checking all heads of solved form logic rules to predict termination, we only need to check those heads of offspring of the same logic rule in a definite logic program, so the efficiency of the algorithm will be improved.

In this paper, we firstly present a termination prediction algorithm of solved-form fixpoint of definite logic program. Based on the prediction algorithm, the non- terminational accurate approach and the terminated abstract approach are com- bined together to solve the derivation problem more efficiently. The experimental results show the termination prediction algorithm is practical, and validate the ef- fectiveness of the novel derivation framework for definite logic program.

