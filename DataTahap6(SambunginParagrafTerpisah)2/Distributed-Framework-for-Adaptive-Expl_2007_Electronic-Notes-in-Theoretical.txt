Educational tools designed to help students understand programming paradigms and learn programming languages are an important component of many academic curricula. This paper presents the architecture of a distributed event-based visualization system. We describe specialized content provision and visualization services and present two communication protocols in an attempt to explore the possibility of a standardized language.

A possible solution is to decompose monolithic visualization environments into several reusable, communicating components. This solution was proposed by the ACM SIGCSE Working Group [6]. The architecture suggested by the group sepa- rates production of the visualization trace from its interactive rendering and possible enhancement with questions and narration. A set of XML-based protocols provides the connection between these identified components.

Our research groups at the University of Pittsburgh and Ramapo College fully support this vision. Our current NSF-supported project is focused on increasing the value of visualization with explanations and adaptation components. The dis- tributed XML-based architecture could significantly help us to disseminate the re- sults of our research since virtually any open visualization environment can be enhanced with explanations and personalization. To support work on the newly distributed architecture our groups have attempted to restructure our work on adaptive explanatory visualization in terms of the new architecture. This paper presents our first attempt to implement explanatory visualization in a distributed framework following the ideas of Workgroup [6]. We start by presenting the ideas and the original implementation of event-based explanatory visualization, which is the foundation of our work. Then we present our distributed architecture focusing on both components and communication protocols. The paper concludes with a discussion of current and future work.

removal of an item from a linked list. To increase the pedagogical value of visual- ization, an event could be extended with explanation (narration), a question that challenges the student to predict the result, etc. The ability to represent the flow of interesting events in a standardized XML format allows to decompose monolithic visualization application into a system of several independent components such as producers, enhancers, and players within the events flow.

The two formats involved originate from different perspectives. c-XML repre- sents experiences of content provision oriented approaches. v-XML is shaped to best suit presentation purposes. The current work attempts to explore the possibility of having only one format. Because of that Format Translator (FT ) is an optional component of the framework. At the same time, the presence of FT is depicting a real-life scenario where a system already capable of generating an XML-based visualization specification does not comply with the standard format. FT enables such a system to become a part of the distributed framework and use a non-native visualization engine of its choice (or even multiple engines at the same time).

The system is interactive. The student can navigate the execution of the pro- gram forward or backward. Jumping to a specific line of code is also possible. If a question is encountered on the way to the user-designated line the execution stops there and the student is presented with a prompt. That prevents the student from

The system can work in one of four modes: Exploration (free navigation; no ques- tions asked), Challenge (free navigation; questions are asked, but can be skipped; feedback is presented after each answer), Evaluation (forward-restricted navigation; questions cannot be skipped; feedback is presented after each answer), and Quiz (forward-restricted navigation; questions cannot skipped; no feedback is presented after an answer). The first two modes let students interact with the material on a stress-free basis. The two last modes are designed to be used by teachers to administer quizzes (with or without feedback).

printed on the console while the program executes. This text is translated into a question about output that a particular line will generate. CV does not use errors element at this moment. Therefore, FT discards it during the translation process. This element may be used in the future to generate questions about bugs in the provided code.

This is a proof-of-concept system. In order to extend it to cover more programming constructs we plan to (a) identify objects and events that are of interest in various programming contexts (e.g. building a dynamically linked list) and (b) design a general, flexible, and extensible protocol to transmit this information from CP to CV.

