There are several possible abstraction relations between two automata, homomorphism, refinement, forward simulation, backward simulation, and so on. Forward-and-backward simulation relations are complete with respect to trace properties of I/O automata [9], and therefore they are powerful tools for automata-based verification. In this paper, we present a clean and uniform way of specifying abstraction properties relating pairs of automata in the PVS theorem prover [17] and describe how our specifications allow us to provide a set of generic strategies that aid users in proving abstraction properties while minimizing the necessary interaction with the prover.

Abstraction properties involve a pair of automata, and hence to express them generally, one needs a way to represent abstract automaton objects in PVS. The most convenient way to represent abstract automaton objects would be to make them instances of a type automaton. But, there are barriers to doing this in PVS. An I/O automaton in TAME is determined by instantiations of two types (actions and states), a set of start states, and a transition

Because no general automaton type can be defined in PVS, I/O automata are represented in TAME as theories obtained by instantiating the TAME automaton template. Invariants for I/O automata are based on the definitions in these theories. We will refer to instantiations of the TAME automaton template as TAME automata.

This case study uses a forward simulation relation to prove the time bound of a failure detector taken from [8]. The failure detector implementation consists of three components: (1) a sending process P which sends a heartbeat message every u1 time units as long as it has not failed, (2) a timed channel C which delivers to T each of the messages sent by P within b time units after it is sent, and (3) a timeout process T which performs a timeout action if it does not receive any message over a time interval longer than u2 units. The sending process P fails when an externally controlled fail action occurs and stops sending the messages. As a result of the timeout action, the process T suspects P to have failed. The implementation is modeled as an automaton called TIMEOUT with the two visible actions timeout and fail.

The second case study in which we applied our strategies to prove time bounds through a forward simulation relation is the two process race system described in [10], which we will call RACE. The automaton RACE models two processes running in parallel. The process main updates the counter or produces a report action within every time interval [a1, a2]. The second process produces a set action within the time interval [b1, b2]. The counter is initially set to zero, and it is incremented by main until the occurrence of the set action, from which point onward, the counter is decremented. Once the main process counts down to zero a report action is triggered.

Our work is related to the tools being developed for the TIOA project [7,6]. The TIOA to PVS translator, which is currently under development, produces PVS specifications of timed (or untimed) I/O automata in the style described in this paper. The translator and our strategies are designed to mask the details of the PVS theorem prover, so that the user can specify a TIOA and prove its properties in PVS without learning the details of the PVS language and prover.

a set of abstraction property theories that are being collected into a library, and generic automaton theories that serve as theory types for theory parame- ters to our property theories. For each abstraction property theory, there is a template to allow the abstraction property to be instantiated as a (proposed) theorem that relates two particular automata. Building on this structure, we have added both a reusable PVS weak refinement strategy and a reusable forward simulation strategy to TAME, and have applied these strategies to ex- amples. In the example weak refinement proofs we have done so far, previously existing TAME strategies provide sufficient proof steps for interactively com- pleting the refinement proofs. While previously existing TAME proof steps were useful in completing the forward simulation proofs, the TAME steps had to be supplemented, for example with proof steps from the Field [13] and Manip [5] strategy packages.

As with any other product of a development project, our strategies will re- quire more testing, tuning, and optimization after the initial conceptual phase of development whose results we have described in this paper. We have begun work on developing new strategies useful for (interactively) completing proofs of action cases. Much of this is currently being undertaken within the TIOA project. We also plan to add proof support for other abstraction properties and to continue adding new strategies for interactive proof completion.

We thank Sam Owre and Natarajan Shankar of SRI International for adding the features to PVS that have made our work possible. We also thank Nancy Lynch and Dilsun Kaynar for useful discussions on the case studies. Finally, we thank the anonymous reviewers for many helpful suggestions on improving this paper.

