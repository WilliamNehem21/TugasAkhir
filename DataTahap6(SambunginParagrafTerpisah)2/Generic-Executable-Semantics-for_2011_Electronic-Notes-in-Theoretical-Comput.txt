Distributed Clean [8,19], or D-Clean, is a distributed extension for Clean [16] over clus- ter. This parallel system was designed to coordinate functional programming tasks on a cluster using a high level coordination language parameterized by functional programming computation nodes. However, the designed coordination model can work with computations implemented in other programming languages too.

The D-Box language is the intermediate level language, designed based on Petri nets [3]. The task of a box is to calculate the function wrapped into a node of the distributed computation graph. The boxes are compiled into Clean programs, and they communicate via channels according to well established protocols.

of input and output channels. The coordination primitives return the result dataflow on the specified output channels. The signature of the coordination primitive, i.e. the types of the input and output channels are inferred according to the type of the embedded Clean expressions.

As mentioned earlier, the boxes created by mkFunBox are running concurrently in the original distributed system. Here mkFunBox specifies that the primitive will be placed in the computational node of the generated box. The boxes are communi- cating via channels using well established protocols.

The DDivide primitive has a DFun expression as parameter, which splits the input dataflow into several parts according to a divider parameter function. After split- ting, it broadcasts the input dataflows on different computation threads with their own computational tasks. The main type feature of a division is given in the type of the channel parameters: the input dataflow is transferred on a single channel, while the output will be transferred on a multiple channel. It can be observed, that all the output dataflows have the same type.

Earlier the parallel and distributed computations in Clean where reported in two PhD thesis: [11] and [18]. The first one tests Clean programs on parallel supercom- puters, while the second is based on concurrent evaluation of parts of a function inside one computer using parallel function evaluation annotations. Our approach in the D-Clean system emphasizes the evaluation and coordination of separated Clean programs running on different computers of a cluster.

Two research books are important for the literature of skeletons: [7] and [17]. The first one illustrates several functional programming skeleton applications, while the second one is more a theoretical approach of the topic. The main feature of the D-Clean system is the distributed skeleton application on clusters, not present in the above two books.

The parallel dataflow problems and a comparison for their implementation can be found in [10]. Our dataflow programming is more complex. The distributed environment uses two coordination languages for dataflow manipulations on two different layers of the system using middleware services.

Fournet, C., Le Fessant, F., Maranget, L., Schmitt, A.: JoCaml: A Language for Concurrent Distributed and Mobile Programming, In: Johan Jeuring, Simon Peyton Jones (Eds): Advanced Functional Programming, 4th International School, AFP 2002, Oxford, Revised Lectures, , 2003, Springer, LNCS 2638, pp. 129-158.

