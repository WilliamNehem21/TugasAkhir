To obtain proper access to the raw syntax of VS Cobol II, we need to parse the syntax diagrams to some representation format for grammars. We use (a form of) EBNF in GRK. In fact, there is support for EBNF in concrete syntax, and there is a term-based representation format.

We note the occurrence of nl, which encodes a line-break. The EBNF representation transports such details to the later regeneration so that layout details of the diagrams can be preserved. The current GRK needs more work in a related context; it does not preserve some details such as the mark-up for IBM-specific elements.

We note that the generalisation is encoded as a plain replacement. The fst language of the current GRK does not provide any checks to distinguish language restrictions and generalisations from more arbitrary replacements. We plan to (re-) implement stronger concepts from [9,14].

The grammar that is contained in the re-engineered IBM reference is not immediately used for parser generation and grammar export to GDK. We have accumulated another 158 fst transformations that specifically aim at the preparation of grammar deployment. Several of these transformations resolve ambiguities, or simplify some productions that look fine as syntax diagrams, but too complex in EBNF. Some other transformations eliminate permutation phrases that are not readily supported by various parsing technologies. Yet some other transformations appeal to the limited backtracking model that we applied for the execution of the generated DCG. The final grammar, with- out DCG-specific tweaks, is exported to GDK, which readily generates an operational btyacc [15] parser.

Answer: Grammar inference is successful in a number of application domains. However, known efforts to infer grammars for use in programming-language parsers are quite limited in scale; see, e.g., [16,6,1]. Furthermore, we believe that grammar transformations specifically cater for (i) reusing raw grammar knowledge; (ii) expressing firm but informal grammar knowledge; and (iii) recording precisely the evolution of a grammar. We are interested in a refine- ment of our approach such that inference concepts are incorporated.

I am grateful for the collaboration with Jan Kort on the subject of providing tooling for treating grammars as engineering artifacts. GRK contributes to an overall effort on engineering of gram- marware [7]. In this context, I am grateful for collaboration with Paul Klint, Steven Klusener, and Chris Verhoef. I am also very grateful for interaction with other grammar aficionados, and I apologise for any omission in the following list: Mark van den Brand, Jim Cordy, Kris De Schutter, Jean-Marie Favre, Jan Heering, Niels Veerman, Ernst-Jan Verhoeven, Joost Visser.

