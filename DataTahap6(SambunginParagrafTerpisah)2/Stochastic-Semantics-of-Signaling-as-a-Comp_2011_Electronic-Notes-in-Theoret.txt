same rule. We show how to represent the generator matrix of the underlying Markov process of the whole rule-set as Kronecker sums of the rate matrices belonging to individual view-automata. In the absence of birth the automata are finite, since the number of different contexts in which one agent can appear in a rule-set is finite. We illustrate the framework by an example that is related to cellular signaling events.

The remaining part of the work is organized as follows. In Section 2, the site graphs and their encoding as a valuation over a set of Boolean variables is presented. The encoding is inspired by how the site-graphs are defined in Kappa [7]. Section 3 continues the formalism by defining a rule and a rule-based system. Each rule-based system accompanied with the initial conditions is assigned the (continuous-time) stochastic semantics by the interpreted labelled transition system (referred to as ILTS from now on). Furthermore, agent-view and population-view projections are defined.

We build a formalism on the rule-based language Kappa [7]. The main data struc- ture which we use to describe the structure of the protein network, and to encode the reaction mixture are site graphs. Whereas standard graphs are a pair structure defined by a set of nodes and a set of edges formed over pairs of nodes, site-graphs have a slightly richer structure: each node is defined by (i) its name, (ii) a set of sites with internal state, and (iii) a set of binding sites of that node; The edges are then established, not between the node names, but between a pair of binding sites, each belonging to a different node.

Example 2.6 (Ex.2 revisited) The valuation x2 = (0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1) is not well-defined because b((B2,c),(C1,b)) = 1, but a(B2,c) = 0. Moreover, the valuation x3 = (0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1) is neither well-defined because there are two bonds stemming from the site (C1, b).

and two copies of agent B, ie n(A) = n(B) = 2, and that there are all bound, ie x(a(A1,b))= x(a(A2,b))= x(a(B1,a))= x(a(B2,a)) = 1. However, we may have either bonds between A1, B1 and A2 and B2, or between A1, B2, and A2, B1. We use the bond variables b((A1,b),(B1,a)),.. ., to avoid this ambiguity.

Given a rule-based system B, we interpret its semantics by assigning it the ILTS ML. Then we say that ML models the rule-based system, written ML |= B. Roughly speaking, we relate each state of the ILTS with the interpretation, so that the assigned valuations describe the reaction mixture, either by identifying each of the agents, or at a certain level of abstraction. Moreover, the transitions are labelled by the rule which enables the transition. The origin of the transition is the state whose interpretation satisfies the left-hand-side of the rule, and the activity is

The state space of a full ILTS which models the rule-based system grows proportion- ally to the number of variables over its full contact map, which grows combinatorialy in the number of agents and the complexity of their interfaces. We propose to define it as a composition of smaller ILTS. We start by an ILTS which models each rule separately, and then we define a composition operator over them. In other words, we decompose the ILTS as a standard product of the set of smaler ILTS.

