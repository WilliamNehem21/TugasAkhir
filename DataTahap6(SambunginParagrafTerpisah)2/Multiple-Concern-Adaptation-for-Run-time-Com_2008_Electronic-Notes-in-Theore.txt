Context-Aware computing studies the development of systems which exploit context information (e.g., user location, network resources, time, etc.), which is specially relevant in mobile systems and pervasive computing. When these systems are built assembling pre-existing software components (COTS), the composition process must be able to solve potential interoperability problems, adapt- ing component interfaces. In addition, the composition must be adapted to the execution conditions of such systems, which are likely to change at run-time, affecting component behaviour. This work presents an approach to the flexible composition of possibly mismatching behavioural interfaces in systems where context information can vary at run-time. Our approach enables composition at run-time, enabling dynamic changes in composition according to context changes. Further- more, our approach simplifies the specification of composition/adaptation by keeping Separation of Concerns, and is able to handle context-triggered adaptation policies.

Software Adaptation [6] is a field characterised by the modification of com- ponent interactions through the use of special components called adaptors [27], which are capable of enabling components with mismatching interfaces to in- teroperate. These are automatically built from an abstract specification of how mismatch can be solved (i.e. adaptation mapping or contract ), based on the description of component interfaces. Particularly, recent research efforts [1,8,21,19] concentrate on behavioural interoperability, extending interfaces with a description of the protocol they follow, and ensuring correctness and termination of component interactions.

Traditionally, the context of reuse of a component used to be more or less static (e.g., spreadsheets, banking systems, etc.), but the advent of mobile and pervasive computing has given rise to a whole new breed of systems where execution conditions are likely to change at run-time (e.g., time, user location, resource availability, etc.). Although Context-Aware computing [9] has broadly studied the development of systems exploiting context information, it does not deal with the specificities of component-based systems. Component-based, context-aware systems must be able to reflect environmental changes affecting system behaviour, altering the composition at run-time.

This work advocates for the flexible (i.e., modifiable at run-time) interac- tion between an arbitrary number of components depending on the current state of the execution of the system. This approach serves a double purpose: On one hand, it adapts the composition to the changing environmental condi- tions or context of the system. On the other hand, it works out the potential incompatibilities among components. This work develops and formalises the seminal ideas sketched in [4], extending previous work [5] which focuses on run-time composition and adaptation techniques. Run-time composition is an essential feature of our proposal since it avoids the costly generation of the full adaptor, and its recomputation when the system changes (e.g., addition of a new service).

Moreover, we reduce the complexity of mapping specification by enabling separating concerns [12], breaking down the specification of adaptation into multiple context facets which express the different concerns which may affect system behaviour. Furthermore, our proposal is able to deal with adaptation policies which may depend on context changes (i.e., context-triggered actions),

The rest of this paper is structured as follows: Section 2 presents a Wire- less Medical Information System used to illustrate the different issues de- scribed in the remaining sections. Section 3 describes our run-time compo- sition/adaptation proposal. Section 4 describes some related work. Finally, Section 5 draws up conclusions and further work.

We describe a mapping through an incremental specification, focusing on the different facets or concerns involved in the composition. Each concern is represented as a context facet, where the changes between the different states of that particular context facet are triggered either by component messages or signals designated by vector expressions. Specifically, when an expression matches on the vector which is currently being applied in the composition, the transition is triggered. The order of events and signals does not need to coincide both in the expression and the vector for them to match.

It is worth noticing that there may be cases in which we may need to assign a specific precedence order to just one vector. This could be expressed by adding the precedence order in the vector declaration (e.g., vconn [3] =

When the state of this facet is LOCAL, treatment prescription and log- ging are performed on the local DBMS (vectors vptr and vltr , respectively). Likewise, queries for patient data are performed on the RFID reader (vec- tors vqry, vebl and vresp). Notice that vebl will help to solve the 1-to-many interaction problem described in our case study, by making the RFID reader evolve independently whenever it is ready to receive enable?.

Once we have described the inputs to our approach, we will detail the process followed for composition and adaptation. First, we illustrate the selection of active vectors for a particular state of the global context (i.e., the combination of the active states of all context facets). Second, we sketch the approach used to ensure correct termination of the system. Finally, we describe the composition algorithm, illustrating it with an execution trace coming from our case study.

Considering the nature of our search problem, the use of an informed search algorithm looks like a good strategy in order to find potential solutions efficiently. Specifically, we make use of the A* algorithm [14], a particular best-first search strategy which determines the mimimum cost path from a given node n to a goal state by expanding the most promising candidate paths first. However, we have to provide guidance information for this search. This is achieved by defining a heuristic estimation function h(n) of the cost of arriving from the current state of the components to a global termination state in the composition. In order to determine the heuristic estimation to be used:

The heuristic estimate h(n) is admissible in our case (i.e., it never overes- timates the actual cost from node n to a goal). This is because the distance function d that we have defined always returns the minimum of the distances from a state in the LTS to a final state, resulting in a lower bound of the estimation. This admissibility guarantees A* to return an optimal solution, if one exists [11].

Run-time composition should avoid to engage into execution branches that may lead to deadlock situations. At this stage the state of the com- ponents is checked, and if all of them are in a final state, the composition finishes. Otherwise, the composition engine attempts to select an appli- cable vector v which may lead to a global correct termination state for the system. If such vector does not exist, the composition process ends as well.

Vector v is processed. First, the engine receives the emissions specified in v . Notice that the engine operates reversing the direction of commu- nication with respect to the events specified in vectors. Next, the engine sends the receptions specified in v . After processing both emissions and receptions the state of the components is updated accordingly. Finally, environmental signals are received by the engine as well, and the state of context facets is updated by matching vector expressions on context facet LTSs with the vector being currently applied (v ).

In Context-Aware Computing applications can discover and take advantage of contextual information (such as user location, time, resource availability, etc.). Although this topic has been broadly studied and the usefulness of this technology has been demonstrated [9], this paradigm does not explicitly deal with the composition and adaptation of software entities within the system.

Our main perspective is to implement this proposal as a composition en- gine, using Aspect-Oriented Programming (AOP) [13], where unlike in tradi- tional platforms and languages, a particular system can be modified without altering its (base) code. This is achieved by separately specifying modifica- tions as aspects, and a description of their relation with the current system. Then the AOP environment weaves or composes aspects and base code into a coherent program. This weaving process can be performed at different stages of the development, ranging from compilation-time to run-time [20] (dynamic weaving). In this dynamic approach, the virtual machine or interpreter run- ning the code is aware of aspects and controls the weaving process. Hence, aspects can be applied and removed at run-time in a transparent way. Dy- namic AOP will enable us to shape up the composition engine as aspects able to: (i) intercept communication (i.e., service invocations) between compo- nents; (ii) apply the composition process introduced in this proposal wrt. the adaptation mapping in order to make the right message substitutions; (iii) forward the substituted messages to their recipients transparently.

