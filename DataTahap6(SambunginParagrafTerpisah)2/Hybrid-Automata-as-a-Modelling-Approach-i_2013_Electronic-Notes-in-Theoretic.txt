Hybrid automata have been developed as a formalism to model systems in which discrete control logic interacts with a real-valued reality and facilitate mathemat- ical proofs about their behavioural properties. The discrete control logic usually conceptualised is silicon based, but hybrid automata make no such presumption. Hybrid automata are classically used for modelling embedded systems and their software in different fields of technical engineering. The focus lies on dependabil- ity of such systems and hence on formal verification of properties. Several model checkers [6,4] have been developed for this purpose. Besides their formal semantics, hybrid automata offer a pleasing visual notation accessible with only a minimum of formal training.

of behaviour. Section 4 will start with a discussion of existing work on modelling human drivers. We then model and simulate the behaviour of drivers entering a freeway. Finally Section 5 will, besides summarising, suggest certain extensions of hybrid automata to ease modelling human behaviour.

A hybrid automaton is a model of a hybrid system, i.e. a system consisting of a discrete (usually controlling) part, and a real-valued and continuous part. Formally, a hybrid automaton is a finite automaton extended with a set of real-valued variables and various possibilities to modify and test these variables.

parameters, representing the desired target velocity (7), the size of a car (9), the width of a lane (5), and the length of the acceleration lane (50). To achieve realistic results, these numbers would need to be matched to the geometry of the situation. As we are (in this paper) only interested in showing the feasibility of the approach however, we just chose a set of numbers which seemed roughly right and went with it.

In order to get visual feedback about our models, we wrote a numerical simulator for our hybrid automata models. It can either approximate the complete statespace of the automaton or execute (much faster) monte-carlo approximations to estimate the expected value of the reinforcement value. The monte-carlo approach in par- ticular enables us to use genetic algorithms, which need to execute a model many times, to search for those values of the unknown functions maximising the expected reinforcement value.

