A conceptual framework for the integration of data type and process modeling tech- niques, called integration paradigm, has been presented by the authors in previous papers already. The aim of this paper is to give a short review of this conceptual framework and to present a formal model for the integration paradigm. The for- mal model for the four layers, called data type, data states and transformations, processes and system architecture layers respectively, is based on an integration of abstract data types and structured transition systems. This formal model can be instantiated by all kinds of basic and integrated modeling techniques. Alge- braic high-level nets, attributed graph transformation, an integration of Z with statecharts, and some diagram techniques of UML are discussed on the conceptual level. As instantiation of the formal model, a well-known CCS sender speci cation, place/transition nets, algebraic high-level nets and attributed graph transformation are presented in this paper, while instantiations of other modeling techniques will be discussed elsewhere.

In each of these classes there are low level variants, where data types are only supported in a weak way by xed data domains of alphabets, and also high level variants that are de ned by integration of basic process and data type modeling techniques. Based on these examples of data type and pro- cess modeling techniques we have introduced in [EO98b,EO00] an integration paradigm for system speci cation and modeling on four di erent layers, which provides a uni ed approach on a conceptual level. The integration paradigm is an extension of previous approaches in our papers [EO94] and [EBC+96] motivated by [AZ95], [DG94], and [PP91].

In section 2 of this paper we present the four layers of the integration paradigm, called data type, data state and transformation process, and sys- tem architecture layer respectively, and discuss as typical examples some well- known integrated data type and process modeling techniques. The formal model for the integration paradigm is presented in section 3. Instantiations of the formal model for CCS, low level and high level Petri nets, and attributed graph transformation are given in section 4, where for the last two instanti- ations we only present the main ideas. The conclusion in section 5 compares our formal model with the notion of transformation systems in [Gro98,Gro00] and an extension of the basic component concept in layer 4 to a more general concept in [EO01].

We are most grateful to several colleagues concerning the discussion of inte- grated modeling techniques, especially to Martin Gro e-Rhode for valuable comments concerning the draft of this paper. Thanks also to the organizers of the GT-VMT 2001 workshop for the invitation of this paper and to Maria Oswald with support from Claudia Ermel for excellent typing. This work is partially supported by the German DFG project IOSIP within the DFG prior- ity program "Integration of Software Speci cation Techniques for Applications in Engineering" and by the Spanish project HEMOSS (TIC 98-0949-C02-01).

prising di erent object-oriented modelling techniques.In all these and several other examples like LOTOS [Bri89], an integration of algebraic speci cation and CCS, there is a common pattern how the data type and the process view are combined with each other. This common pattern has been formulated as an integration paradigm in [EO98b,EO98a] and consists of four layers which are organized in a hierarchical way.

The rst layer corresponds exactly to the data type view of the system. The following layers are integrated views of data type, data state and system archi- tecture aspects, where each layer is based on the previous one. This hierarchi- cal concept is di erent from a dimensions concept (see e.g. [Cor98,GKP98]) where dimensions are considered to be independent and can be combined in di erent ways.

transformation applied to attributed graphs. The notion of processes has been extended from Petri nets to graph grammars [CMR96] and in addition the concept of programmed graph transformations is useful for the concept of processes in layer 3. Concerning layer 4 we again have the well-known structuring concepts parameterization and modularization for algebraic spec- i cations and several notions of composition and modularization for graph transformation systems are under development [EE96,HEET99].

The speci cation formalism SZ [BGK98] was developed in the ESPRESS- project for the speci cation of safety critical embedded systems. The main idea of SZ is to integrate statecharts [Har87] with Z [Spi92] and to have a notion of con gurations as modular structuring mechanism. This means that in the data type layer 1 we have type de nition in Z. Data states and transformations in layer 2 are given by data state and operation schemas in Z notation. The processes in layer 3 are de ned by statecharts and the system architecture in layer 4 is given by con gurations of SZ.

Layer 3 provides the reactive behavior of the system in terms of processes. Processes are the activities of the system according to its aims. Either the behavior is given by one { possibly non-deterministic { process or by a set of processes which realize the di erent scenarios of the system. Process compo- sition and communication mechanism in the sense of concurrent systems will be considered as part of the architectural layer 4 in 3.4 and section 4. Given a data state transformation signature T-SIG with data sorts S as in layer	2 to be a graph G(p) with sets I(p) and F (p) of initial resp. nal states, which are nodes of G(p).The connection between the reactive states (nodes in G(p)) with data states in the data state transition system GDSTS of layer 2, and transitions in G(p) with those in GDSTS we consider for p : ; (without parameters) a graph morphism h(p) : GRSTS(p) ! GDSTS. In the general case of p : v; w we assume to have input and output parameter sets A

(i) The general case of a family P of process symbols p : v; w includes the special case that P consists of one process symbol p : ; without param- eter sorts. This special case makes especially sense for the speci cation of CCS-processes see example 3.1, where the behavior of the system is given by one CCS-term de ning one CCS-process.This may suggest that CCS processes have no parameters. In fact, they have parameters, but the problem with CCS is that the parameters cannot be presented explicitly in the CCS syntax. One of the essential improvements of LOTOS [Bri89]

(ii) On the other hand we have a very large set of processes in the case of Petri nets (see 4.2-4.3). In fact all processes of a Petri net PN given by occurrence nets OCCi and net morphisms hi : OCCi ! PN can also be considered as processes in layer 3, where the reactive state transition systems are given by the case graphs of OCCi. In the case of algebraic high level nets the processes can be considered to have input and output parameters according to the data elements on the input and output places of the corresponding occurrence nets.

(v) We assume in general that for the parameter sets A (resp. B) the sets As (resp. Bs; ) are the domains of some data state algebra D (resp. E) where D = h(p)(a; b)(i) for some i 2 I(p) (resp. E = h(p)(a; b)(f ) for some f 2 F (p)) such that a 2 A (resp. b 2 B) can be interpreted as input (resp. output) parameters in the initial (resp. nal) reactive states of the process.

from import to export models in the sense of layer 3 based on construc- tion, composition and communication mechanisms discussed above. In [EO01] we discuss how to construct this model transformation for each basic compo- nent based on the notion of constructive speci cation morphisms between import IMP and body BOD as well as (usual) speci cation morphisms be- tween export EXP and body BOD. For each speci cation morphism f : SP EC1 ! SP EC2 we assume to have a restriction construction REST Rf : Mod(SP EC2) ! Mod(SP EC1) corresponding to the forgetful functor in the case of algebraic speci cations [EM85].The composition of basic components

where the reactive state transition system GRSTS(net) is the case graph of PN (i.e. the subgraph of the marking graph reachable from the initial marking init) and h(net): GRSTS(net) ! GDSTS is the embedding of the case graph into the marking graph of PN. The integrated reactive state transition system RST S is given by

The set I above corresponds to the set of all processes of PN. In view of software engineering it makes also sense to consider only a subset I0 I, which represents a set of essential scenarios of the system. Especially I0 may be the set of all deterministic processes only.

Construction mechanisms for Petri nets to be considered in layer 4 are es- pecially union and fusion. In the following we show how to represent the fusion of nets by a fusion component COMP3, which includes integrated pro- cess signatures P-SIG1 and P-SIG2 of two arbitrary Petri nets P N1 and P N2 represented by components COMP1 and COMP2. We compose these three components leading to a new component COMP4, which represents the fu- sion of P N1 and P N2:In more detail we have the following situation, where in the most basic case of fusion we have two Petri nets, P N1 and P N2 together with fusion places F1 of P N1, F2 of P N2, and a bijection f : F1 ! F2. The fusion P N3 of P N1 and P N2 via f , written P N3 = P N1 +f P N2, is the net P N3 obtained from the disjoint union of P N1 and P N2 by identi cation of corresponding fusion places. The given nets P N1 and P N2 can be considered for i = 1; 2 as basic components

Similar to the low-level case of place/transition nets we can consider two alternatives. In alternative 1 the net 1 is embedded into the marking graph GDSTS of N. In alternative 2 the processes are de ned as high-level processes of N, which are high-level occurrence nets OCC(i) with morphisms m(i) : OCC(i) ! N: A theory of such high-level processes of algebraic high-level nets is under development by the authors. The corresponding processes of the reactive state transition system RST S would be morphisms from di erent initial markings into the marking graph GDSTS of N.

Attributed graphs and attributed graph transformation systems, short AGTs, have been discussed on a conceptual level already in section 2. In the following we give the main ideas how to model them in our formal framework of section 3, where { similar to 4.3 { we allow speci cations instead of signatures in layers 1 - 4 for the data type and data state parts.

