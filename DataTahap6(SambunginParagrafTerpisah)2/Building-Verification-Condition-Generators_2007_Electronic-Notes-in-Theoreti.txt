We propose a more compositional method of building verification condition generators, using ideas from monadic denotational semantics and from generic programming. Our technique allows us to extend an existing verification condition generator to handle new language constructs, but also to add extensions at another level, such as the ability to generate validation traces. We explain the technique through an example, extending a simple while language with a construct for exception handling. This construct not only needs an extension to the logic, but also a change of its structure.

Development and maintenance of implementations of realistic programming logics is known to be hard. There are few methods of dealing with the changes that are incurred by changing the language or the addition of features. Implementing these changes is a dangerous and error prone process that can easily introduce inconsistencies in the logic.

code of the existing implementation of a logic. Our approach has several advantages. First and foremost is the advantage that it is safer. Second, it allows enabling and disabling alterations at will. Thus we can always fall back on the existing imple- mentation. Third, it enables us to easily create a set of related partial logics, each of which can be used separately for light weight verification.

Our technique uses ideas from generic programming and monadic denotational semantics to represent a syntax driven logic. Generic programming abstracts from algebraic datatypes, and these techniques can thus be used to abstract from the actual implementation of the abstract syntax used to represent programs. The main use we make is that of a generic fold, encapsulating the recursion over the datatype, which we assume to be easily specified. This allows us to decouple the recursion scheme from the calculation of the semantics.

Monadic denotational semantics has been introduced as a method of separating concerns in denotational semantics [11,1]. The key idea is to choose an abstraction for the domain of the semantics such that different computations in that domain can be combined in a standard fashion. By relying on that combination method, independence of the domain is achieved. Thus, given a monadic domain, we can hide those aspects that do not affect a specific part of the logic. This allows us to keep the code of the base logic unchanged despite adding to the underlying structure, which normally affects the implementation of each rule in the logic.

Although straightforward, such code is not easily changed. Turning it into an explicit algebra over the provided algebraic data type makes changes easier. The way to implement the algebra as a fold over the abstract syntax can be easily seen: it involves making a separate function for each alternative in the datatype representing the abstract syntax, and passing those functions as arguments to the fold. The set of passed functions clearly specifies an algebra over the language, with the nonterminals in the language being the sorts, and the alternatives inducing the operations. Applying the generic fold gives us the unique homomorphism between the initial algebra and the algebra specified.

Although this works, it involves replacing the entire monad upon changes. Much nicer would be the ability to just add aspects to the existing monad. Traditional approaches of combining monads are the use of distributive laws over monads [7] or the use of monad transformers [4,10]. We have chosen to use another approach, that of monadic coproducts, as described by Luth and Ghani [9].

The problem that remains is that of choosing a monad r that we map the operations on Record and PostE to. This monad r is the essential domain of the semantics. In this case we can use a general state carrying monad, with as state a tuple of expressions and an expression, that is State ([ Expr ], Expr ). This monad has functions get and put , where get extracts the state from the monad, and put takes the state and puts it back under a monad over the unit type. Their

Given this implementation method for verification condition generators, several re- search paths remain. Not only do we want a more compositional way of implement- ing a verification condition generator, we also want to formally verify said generator, as for example Homeier and Martin described [5]. One hypothesis we have inves- tigated is that our approach makes it possible to not only reuse existing code, but also to reuse proofs so that proving e.g. soundness for a changed verification con- dition generator need not be done from scratch. This does indeed seem possible for a simple language, given more care in constructing the underlying monad than exposed in section 4. The question remains if this scales to languages with function abstraction and application.

