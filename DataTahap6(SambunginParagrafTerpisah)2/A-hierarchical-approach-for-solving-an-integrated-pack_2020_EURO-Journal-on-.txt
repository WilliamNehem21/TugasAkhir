Glulam is made by stacking and glueing thin slats of standardized thickness. By varying the number of slats and their length it is possible to produce beams of almost every dimension. Note that the width of the slats determines the width of the beams. The slats are sawed from trunks, dried and finally checked for defects. By finger- jointing slats it is possible to produce slats of almost arbitrary length. Afterward the slats are stacked with glue in between and pressed. The press perfectly aligns the slats and triggers hardening of the glue. By not inserting glue between two slats it is possible

It is feasible to lengthen slats with filling material in order not to violate the packing constraints of the press. This material will be cut off afterward and considered as waste as often it is too short for further usage. This is why one searches for pressing steps with few filling material.

The described basic approach follows that of Ackermann and Dinges (2017). However, in this paper, we develop new algorithms for each of the steps and provide a theoret- ical reasoning for their efficiency. By establishing connections to other well-known combinatorial optimization problems and techniques we systematically analyze these algorithms.

1. Find a packing into pressing steps for single orders and for combinations of up to three orders. The combinations can be overlapping, i.e., an order can be contained in multiple combinations. The packing of single orders is discussed in Sect. 2. Using a theoretical consideration (Theorem 1), we can reduce the packing problem to a simpler partitioning problem, which we solve with the largest difference method. The packing of combinations is discussed in Sect. 3.

The advantage of this decomposed approach is the possibility of choosing algo- rithms for each step independently which greatly increases the flexibility. In general, each of the individual steps is NP-hard to solve; thus, we focus on heuristics that are fast enough but yield good results in practice. In final Sect. 5, we summarize our heuristics and present numerical results on real-world inputs. We show that our method is able to compute a plan for multiple months of production in a few minutes. The computed solutions achieve both a small amount of filling material and a small number of height changes.

For our problem, Ackermann and Dinges (2017) developed an algorithm based on var- ious heuristics which is successfully used in combination with an enterprise resource planning system in a sawmill. Even though it is only an approximation algorithm, the solution quality exceeds that of human experts. Although the same framework is used there, we significantly improve the algorithms used in each of the steps and supplement them with a theoretical reasoning for their efficiency. The bachelor thesis by Diessel (2018) gives some additional theoretical analysis of the used algorithms and extended numerical results.

An exact algorithm, based on a mixed-integer program with a specifically designed Branch-Price-and-Cut scheme, was developed by Leoff (2016). Particular emphasis was given on the relaxation of the constraint that all items belonging to one order are appearing consecutively, e.g., multiple open orders were allowed. This algorithm

We can consider our packing problem as a special case of the two-dimensional variable-sized bin-packing problem analyzed by Pisinger and Sigurd (2005), where there are multiple bin dimensions available, each with their own cost. They present an integer linear-programming model and an algorithm based on branch-and-price. The running time of their algorithms (up to one hour on instances with 100 items) is however to large for our application.

In this section, we treat the case of packing a single order, before considering the complete planning which can consist of multiple orders from different customers in a later chapter. Since pieces belonging to the same order can be permuted arbitrarily, we do not have to deal with scheduling problems which will be addressed later in Sect. 4. Also, the height of all pieces is the same.

We are able to simplify many of the constraints because all pieces of an order share the same height h. By grouping the pressing steps according to their height, the number of height changes can be reduced to the number of occurring heights of the pressing steps minus one. Due to the shared height of all pieces, the height of a pressing step is proportional to the number of layers.

In order to fulfill condition (a), we need to find a partition of the pieces into layers such that their lengths do not differ too much. This is done in following Sect. 2.3, making use of the largest difference method (LDM).

We can then combine Algorithm 2 described later with the constructive proof of Theorem 1 to following Algorithm 1 for packing a single order. The idea is to try partitions of different sizes and to pack the resulting layers in decreasing order of their total length into pressing steps. In this way, we ensure that the length difference in one pressing step remains as small as possible.

If the number of bins m in the number partitioning problem is chosen appropriately, the average value ||S|| of the sums in each subset ||L1||,..., ||Lm|| is approximately in the middle of 4min and 4max. Therefore, a small value of the maximal difference d(L1,..., Lm) ensures that all sums are in the interval [4min, 4max]. Thus, the length constraints can also be handled by focusing on the number partitioning problem.

To reach a small number of height changes, only a small number of different number of layers should be used. Ideally, only one number of layers would be used, but this can be impossible for example when the number of pieces is a prime number. However, we are able in most situations to find solutions with only two different numbers of layers.

In some cases, an order cannot be packed alone without significant filling material. Due to the packing constraints in Definition 1 of the glulam production problem, this occurs when the order does not have a sufficient total size to reach the minimal length or minimal height. By packing combinations of two or more orders together, we can also achieve less filling material in such situations.

In our application the sets are combinations of orders, with the weight being the corresponding filling material of the packing as computed by Algorithms 4 and 5 . Additionally, for each order we compute a packing for it alone using Algorithm 1. We then also include the corresponding singleton sets in the Set Cover instance. This ensures that there always exists at least one exact cover, since we can choose just these singleton sets as the cover. However, this might be far from optimal.

by computing for all possible combinations good packings to evaluate their corre- sponding filling material. We restrict ourselves to combinations of at most three orders. A higher number of orders in a combination would increase the number of possible combinations by a large factor, rendering their computation infeasible in practice. Also, since in practice the height h is usually at least a fifth of the maximal height hmax, it only rarely occurs that more than three orders can appear in one pressing step.

Algorithm 5 for packing combinations of three orders combines a small third order with two large orders. The idea is to first find packings of the two large orders, using Algorithm 4. The residual layers of these two orders are then combined with the items of the third order into one pressing step.

compute packings for combinations with other orders. It is beneficial to limit the size of the orders for which combinations are computed, since the cubic dependence of the running time of Algorithms 4 and 5 on the size of the order renders the combination algorithm slow on large orders. Because large orders can usually be packed efficiently alone, this restriction does not significantly decrease the solution quality.

We have chosen these thresholds using a large number of randomized tests, to evaluate the corresponding performance for each possible value of the threshold. The choice involves a trade-off between running time and the two criteria filling material and height changes. Since a really small running time is not needed for the application, the thresholds are chosen in a way that the solution quality is good without having a prohibitively large running time.

The results also show that the incremental decrease in the filling material becomes smaller when the number of customers per planning is already sufficiently large (i.e., for at least 10 customers per planning). This is due to the fact that already enough good combinations for most of the orders which are difficult to plan have been found. The addition of more possibilities for combinations does not lead anymore to a large decrease of the filling material.

The flexibility of this approach also allows to evaluate the impact of using different heuristics for each step in the framework. We can use this to find an optimal trade-off between running time and solution quality of the final result. The optimal allocation of running time to the different steps of the framework might depend on the concrete problem. Therefore it would be beneficial to develop methods that automatically find an optimal allocation of the running time.

