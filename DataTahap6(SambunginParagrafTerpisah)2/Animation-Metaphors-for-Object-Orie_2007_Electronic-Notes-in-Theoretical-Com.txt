Program visualization and animation has traditionally been done at the level of the programming language and its implementation in a computer. However, novices do not know these concepts and visualizations that build upon programming language implementation may easily fail in helping novices to learn programming concepts. Metaphor, on the contrary, involves the presentation of a new idea in terms of a more familiar one and can facilitate active learning. This paper applies a metaphor approach to object-oriented programming by presenting new metaphors for such concepts as class, object, object instantiation, method invocation, parameter passing, object reference, and garbage collection. The use of these metaphors in introductory programming education is also discussed.

Program visualization and animation has traditionally been done at the level of the programming language and its implementation in a computer. For example, vari- ables have been visualized as boxes (representing memory locations), and nested function calls as a stack of frames containing parameters and local variables (repre- senting the call stack implementation in many computer architectures). In object- oriented (OO) context, animation has also been based on UML diagrams that reveal connections between objects and classes and thus represent another level, i.e., re- lationships between components of an individual program. We know of only one program animation system, PlanAni [20], that builds its visualization on general

Novices have problems in learning the very basic OO concepts which results in misconceptions leading to either erroneous or suboptimal programming skill (see, e.g., [4,6,7]). Program visualization and animation are supposed to enhance learning and prevent misconceptions but the visualizations should be informative and at the same level as the concepts to be learned. Thus visualizations that build upon programming language implementation or uninformative graphical notation may easily fail in helping novices to learn programming concepts.

This paper applies a metaphor approach to object-oriented programming. Our ultimate goal is to provide novices with metaphors that will help them in learning basic OO concepts. For this purpose, we present new metaphors for class, object, object instantiation, method invocation, parameter passing, object reference, and garbage collection. The metaphors are designed to grasp the basic ideas of object- oriented programming; they do not rely on implementation issues or diagramming techniques designed for expert use.

The rest of this paper is organized as follows. Section 2 describes the new metaphors and explains how they can be visualized and animated in a program animator. Section 3 is a literature review that presents visualizations in current program animation systems and compares them with our ideas. Section 4 discusses possible uses of the metaphors and metaphor-based animation in introductory pro- gramming education. Finally Section 5 contains the conclusion.

screen and emerges only when needed for object instantiations. Each blueprint occupies its own page in the book, and class variables are located on the same page. Whereas the background color for blueprints is blue, the background color of the class variable area is white. This area becomes visible whenever an object of that class is active. Class variables are depicted with the same role metaphors as member variables.

In Java, pointers are replaced by object references. This concept has been found to be problematic for novices and a well-designed metaphor is needed. Pointers have been traditionally depicted by arrows that are redrawn to point to a new item each time a new value is assigned to the pointer. This arrow metaphor builds on the implementation aspect: pointers are memory addresses and an assignment to a pointer means the setting of a new memory address to the pointer.

mated program models a bank that consists of bank accounts. The object reference myBank is visualized as a pennant whose pair is attached to the Bank object. Both of these pennants have the same color that is different from all other pennant pairs. The individual bank accounts are implemented as a linked list and visualized as watch panels with pennants making the linkage. The next link in the last account is null represented with two pennants on the ground.

Member variables are depicted with role images: account number stored in the variable account is a fixed value; the variable balance that gathers the net effect of deposits and withdrawals is a gatherer etc. System defined objects that conceptually encapsulate a single attribute (e.g., String, Date) are visualized just like primitive variables. For example, the latest transaction date stored in the member variable date is a most-recent holder.

and the whole method is executed in a single step. Neither parameters nor local variables are represented in the visualization; moreover, several instances of the same method cannot be visualized. Jeliot 3 animates method invocations with a special method instance area that represents the implementation-based method call stack. None of these system uses anything similar to our workshop metaphor.

The above systems visualize object references with arrows or miniature pictures of the referenced object. If a new value is assigned to an object reference variable, the arrow is redrawn or the miniature picture is replaced by a new one. This is in contrast to our pennant metaphor where the referencing variable has a unique identity that does not change if the target of the reference changes.

Metaphors, visualization, and animation can be used in education in several ways. For example, the level of student engagement seems to affect the outcome of learning efforts [9]. It seems obvious that a quick passive watching of an autonomously running animation does not provide improvement in learning but more laborious mental processing of the visualizations is needed.

programming. Classes, objects, methods and other OO constructs are even much more complex concepts, and the use of these OO constructs leads to much more complex programming situations than the use of variables and simple control struc- tures. Thus metaphors can be expected to have a positive effect not only on simple programming but on the learning of OO concepts, also.

For example, a typical novice misconception in OO concepts is to confuse objects with classes [4,7]. Our new metaphors make this distinction clear: classes are represented as blueprints in a blueprint book, and objects are concrete instances created using the appropriate blueprint. The visually strong distinction with blue- and-white blueprints for classes and brass-colored watch panels for objects makes the difference between these concepts clear. Another novice misconception is to assume that methods have some associated object. In the animation, method execution is depicted with workshops that are spatially located next to the associated object, but the static method main has no object next to it. Thus the difference between static and non-static methods can be easily explained in visual terms.

