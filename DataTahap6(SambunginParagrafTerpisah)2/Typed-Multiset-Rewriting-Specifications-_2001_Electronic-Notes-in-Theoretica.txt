In this paper, we propose a thorough redesign of MSR intended to es- tablish it as a usable specification framework for complex security protocols. The major innovations include the adoption of a flexible yet powerful typ- ing methodology that subsumes persistent information predicates, and the introduction of memory predicates that significantly widen the range of appli- cability of this formalism. The detailed definition of this language also allows for a precise description of its execution semantics. We call this formalism Typed MSR, or just MSR when no ambiguity can arise. It fully subsumes our earlier presentations of this language [8,15].

e.g. the use of a shared key to perform public-key encryption [4]. Our typing infrastructure can point to more subtle errors, such as a principal trying to encrypt a message with a key that does not belong to him. A procedure for enforcing such access control policies is analyzed in [3].

Memory predicates allow a principal to remember information across role executions. Their presence opens the doors to the specification of protocols structured as a collection of coordinated subprotocols. This novel possibility is exemplified in [5], where we formalize the Neuman-Stubblebine repeated authentication protocol [21], which lies outside the reaches of our previous version of MSR. A particularly interesting application of memory predicates is given by their role in the specification of the intruder model against which a protocol is to be analyzed. Indeed, our enhanced version of MSR allows expressing an attacker as a distributed protocol that communicates through dedicated memory predicates. We exemplify this technique by giving two specifications of the generic Dolev-Yao intruder. We should stress that these specifications lie completely within the the language of our present version of MSR, while the attacker corresponded to a set of rules that did not fully follow the syntax of protocols in [8,15,9].

In Section 2.1, we describe the messages, or more generally terms, that form the core of MSR. Then in Section 2.2, we introduce the typing infrastructure that allowus to make sense of these terms. We will need them in the definition of protocol rules in Section 4. We conclude in Section 2.3 by pointing out the major differences with respect to the messages used in previous work on MSR [8,9].

Messages are obtained by applying a number of message forming constructs, discussed below, to a variety of atomic messages. The atomic messages we will consider in this paper are principal identifiers, keys, nonces, and raw data (i.e. pieces of data that have no other function in a protocol than to be transmitted). We formalize our notion of atomic message by means of the following grammatical productions:

Here and in the rest of the paper, A, k, n, and m will range over principal names, keys, nonces, and raw data respectively. We will sometimes also use B to denote a principal. Although we will limit the discussion in this paper to these kinds of atomic messages, it should be noted that others can be accommodated by extending the appropriate definitions.

We will use the letter t, possibly sub- and/or super-scripted, to range over terms. Observe that we use a different syntax for shared-key and public-key encryption. We could have identified them, as it is done in many approaches. We choose instead to distinguish them to showthe flexibility and precision of our technique.

Type tuples (discussed in Section 3) and protocol rules (see Section 4) rely on objects that may contain variables to be instantiated during type-checking (this aspect is formalized in [4]) and execution, respectively. A parametric message allows variables where terms could appear in the messages of Sec- tion 2.1.

the execution rules of Section 5), we will use the corresponding seriffed letters: A (or B), k, n and m. Instead, the letters x, y and z will stand for terms that must be variable. In some circumstances, we will need to refer to objects that can be either variables or atomic message constants, but not composite terms. We call these terms elementary and denote them with the letter e, variously decorated.

The typing machinery that best fits our goals is based on the type-theoretic notion of dependent product types with subsorting. Rather than delving into the depth of the definitions and properties of this formalism, we will intro- duce only the facets that we will use, and only to the extent we will need them. In particular, we do not conduct an in-depth discussion of this type theory; we will even stay away from the most exotic aspects of its syntax. Readers who wish to further their understanding of this formalism are invited to consult [11,18,1,22].

All composite terms have type msg, given that their constituent submessages are correctly typed. This implies that the subterms of a concatenation (t1 t2) are themselves messages. On the other hand, the plaintext part t of an en- crypted message {t}k should have type msg but k should be a shared key between two principals. Terms encrypted with public keys, of the form {{t}}k, are handled similarly. This intuition is formally captured in the following typing rules for messages:

As we will see shortly, a state is a collection of specialized atomic first-order formulas. States are a fundamental concept in MSR. Indeed, they are the cen- tral constituent of the snapshots of a protocol execution. They are the objects transformed by rewrite rules to simulate message exchange and information update. Finally, together with execution traces, they are the hypothetical scenarios on which protocol analysis is based.

In this section, we will formalize the concept of state in MSR, together with the constructions needed to implement it. In Section 3.1 we introduce message tuples and a notion of type for them. Then in Section 3.2, we discuss the message predicates that appear in a state, and in Section 3.3 we define states.

Second, active roles rely on a number of role state predicates, generally one for each rule in them, of the form Ll( ,..., ), where l is a unique identifying label. The arguments of this predicate record the value of known parameters of the execution of the role up to the current point.

Every protocol relies on a public network. Therefore, we will hardwire the network predicate N( ) in our language. Local state and memory predicates are different: they are defined on a per-protocol basis. This is similar to principals and keys. We therefore maintain generality by declaring them as part of the signature. We can now complete the definition of a signature as follows:

For the most part, this reduces to admitting variables in the embedded terms. However, role state predicates need to be created on the spot in order to avoid interferences. We achieve this by introducing variables, denoted L, that are instantiated to actual role state predicates during application. This makes our language weakly second-order, although we could easily reduce it to the first order by interpreting a role state predicate Ll as the symbol L indexed by a label l that is kept as a variable in rules. We however opt for the more direct solution since it does not have any drawback, and allows for slightly simpler definitions.

MSR adopts and formalizes this perspective. It represents protocols as a set of syntactic entities that we also call roles. A role is itself given as a parameterized collection of multiset rewrite rules that encode the expected message receptions and the corresponding transmission. Rule firing emulates receiving (and accepting) a message and/or sending a message, the smallest execution steps.

The notion of fresh and bound variable discussed earlier applies also here. Notice that the scope of these quantifiers is limited to the right-hand side of the current rule. Later rules can refer to the values created by these variables by introducing universal quantifiers of the proper type: synchronization is ensured by their occurrence in the role state predicates. We have shown in [6] that, when encoding of MSR in logic, our marker for fresh data is indeed rendered by an existential quantification.

Here, the role owner A is an actual principal name, a constant. Other roles can be executed by any principal. In these cases A must be kept as a parameter bound to the role. We use the following syntax to represent these generic roles:

It should be observed that we do not make any special provision for the in- truder. The adversary is expressed as one or more roles in the same way as the more legitimate message exchange in a protocol. We will illustrate how this is achieved for the standard Dolev-Yao intruder and for a variant of it in Section 6.

A protocol theory was defined in [8,9] as a collection of rules for which the graph generated by their role state predicates was acyclic (see item x below for further details). Each connected component corresponded to a role. Besides this constraint, the rules within a role were indepen- dent. This aspect is mostly maintained in our current formulation, but

With the exception of [7], our previous work did not refer to any argu- ment of a role state predicate as a distinguished role owner. These early versions of MSR did not need to actively rely on role owners to fulfill their objectives, i.e. studying the decidability of discovering attacks in a protocol. Therefore, no particular emphasis was given to this notion. This information becomes crucial when trying to enforce access control, as described in [3].

Observe that, for simplicity, we are overloading the bracket notation to denote the application of the substitution operation to objects belonging to different syntactic categories. We only need to define the substitution of t for x in objects that may mention x as a free variable. This is why we do not include protocol theories, states and active roles in the above list.

The two rules below implement this judgment. The toptmost inference cap- tures the degenerate situation where no basic step is applied: the current snapshot is returned as output. Rule exp par expresses parallel execution: intuitively, we want to partition the current state description into partial snap- shots, independently apply one basic step to each, and then merge the results together to obtain the output snapshot.

We nowcome to the central lemma in the proof of the admissibility of the rules for parallel firing. It asserts that not only signatures, but also states and active role sets can be weakened in an execution judgment, without influencing its derivability. The first result in this lemma is needed in the proof of the remaining two.

In this section, we will demonstrate the expressive power of MSR by formaliz- ing what has come to be accepted as the standard abstraction of the attacker: the Dolev-Yao intruder [20,14]. More precisely, we define the Dolev-Yao ab- straction and the natural intruder model it induces in Section 6.1. We then provide a direct MSR encoding in Section 6.2. We conclude in Section 6.3 by presenting an optimized variant of the Dolev-Yao intruder model and hinting at its correctness.

The Dolev-Yao abstraction of a crypto-protocol appears to be drawn from po- sitions taken in [20] and from a simplified model presented in [14]. It assumes that such elementary data as principal names, keys and nonces are atomic rather than strings of bits, as implemented in practice. Furthermore, it views the operations needed to assemble messages, i.e. concatenation, encryption and digital signature, as pure constructors in an initial algebra. Therefore, if n is a nonce and k a key, {n}k is a composite object whose structure is clearly recognizable. This means for example that a term of the form {t}k cannot be mistaken for a concatenation (t1 t2), and that {t}k = {t }k' if and only if t = t and k = k'. This also means that the Dolev-Yao model abstracts away the details of the cryptographic algorithms in use, reducing in this way encryption and decryption to atomic operations. Indeed, it is often said to adopt a black box viewon cryptography.

The atomicity and initiality of the Dolev-Yao abstraction limits consider- ably the attacks that can be mounted against a protocol. In particular, its idealized encryption model makes it immune to any form of crypto-analysis: keys cannot be exhaustively searched, piecewise inferred from observed traf- fic, or guessed in any other manner. An encrypted message can be deciphered only when in possession of the appropriate key. The symbolic nature of this abstraction allows then to very precisely circumscribe the operations an in- truder has at his disposal to enact an attack against a protocol. All together, they define what has become to be known as the Dolev-Yao intruder. This attacker can do any combination of the following eight operations that we find convenient to organize in the five lines below:

The first line of the description of the Dolev-Yao intruder is then expressed by the following two roles, anchored on I. With the rule on the left, the in- truder can capture a network message N(t) and store its contents in a memory predicate. Observe that the execution semantics of MSR implies that N(t) is removed from the current state and therefore this message is not available any more to the principal it was supposed to reach. The rule on the right emits a memorized message out in the public network.

From now on, we will only be concerned with the memory predicate MI, which acts as a workshop where the intruder can dismantle intercepted com- munications and counterfeit messages. Concatenated messages do not offer any barrier to the intruder: he can take them apart at will. Similarly he can construct the concatenation of any two messages he knows. This is realized by the following two rules:

Both for taking apart and constructing a shared-key encrypted message, the intruder must know the key. Observe that most typing information can be inferred assuming that the specification at hand it well-typed [4]. Take for example the role on the left. In order for the message {t}k to be well-formed, k must be a shared key between two principals. Thus its type must be shK AB and the type of the dependent arguments A and B has to be principal. An algorithmic description of howtype reconstruction is performed is the subject of future work.

We now tackle the often overlooked fourth line of the Dolev-Yao intruder specification above: the ability to access public information. He should clearly be entitled to look up the name and public keys of principals, but any at- tempted access to more sensitive information such as private keys should be forbidden. The clear exception to this rule consists of the keys he is indepen- dently entitled to look up, namely his own private key and keys he shares with other principals. This situation is therefore implemented by the following five rules:

We provide our formalization of the Dolev-Yao intruder with two admin- istrative rules to allowhim to take full advantage of the above stated capabil- ities. The rule below on the left allows him to forget information. The more interesting rule on the right permits duplicating and reusing fabricated data.

Last, we have two seldom needed rule schemata that allow the intruder to shuffle data between the knowledge predicate MI( ) used above and other memory predicates he may have. It is in general unnecessary for the standard Dolev-Yao intruder to rely on additional memory predicates. Here, we write M' for a generic intruder memory predicate with n + 1 arguments. We have the following role patterns, where i is an index between 2 and n + 1:

All but the fresh data generation rules can be automatically generated from the term language, and their typing [4] and access control rules [3]. We conjecture that which fresh data generation rules are admissible is de- pendent on the protocol the intruder is running against. In turn, this may be realized by constraining the fresh data that a principal can generate by imposing a stricter access control policy.

Whenever the adversary intercepts a message, we will have him decompose it in its most elementary bits, store them in a dedicated memory predicate, and construct any message intended for transmission from stored elementary terms, without the possibility of undoing his own work. We therefore partition the actions of the intruder in three distinct activities: message decomposition, storage of elementary information, and message construction. This idea was first proposed in [19] and analyzed in an earlier version of MSR in [8].

We replace the single memory predicate MI( ) used in Section 6.2 with three predicates, DI( ), AI( ) and CI( ). The first is intended to contain messages while they are Decomposed into their elementary constituents. The second holds the Atomic terms learnt in this way. The third is used in the message Construction phase. Our signature shall therefore contain the following four declarations:

Observe that an intercepted message is placed in the decomposition memory predicate since it must be disassembled before its elementary constituents can be used. Dually, only constructed messages can be transmitted over the public network. This is enforced by having a construction predicate in the antecedent of the rule on the right.

As observed earlier, not all terms can be decomposed into to their atomic constituents. In particular encrypted message cannot be exposed unless the intruder has access to the proper decryption key. The following rule is intended to deal with this situation. Here, a message t being disassembled is promoted as a constructible term. Notice that a copy of t is is kept in the decomposition queue in the eventuality that later captured information may allow breaking t into more elementary pieces.

coming from the network: we read them into the decomposition queue, and store them back from the construction stack. Clearly, these rules can be specialized whenever we have additional information on the data stored in each argument of M'. In particular, atomic terms can be read to and from the AI( ) predicates. We have the following two schematic roles, where i is an index in 2,...,n + 1:

It should be noted that we have structured the above rules in such a way that no explicit copying rule is ever needed: whenever atomic or decomposable information is accessed for constructing an outgoing message, we always leave a copy for future use. On a similar note, we omit the deletion rule of Section 6.2: this version of the Dolev-Yao intruder only accumulate information, never eliminates it.

The proof of the corresponding completeness result, which shows that our optimized model is powerful enough to simulate the original Dolev-Yao in- truder, is instead quite complex on the basis of the definitions given in this paper. The intuitively simple translation of runs into the optimized model is complicated by the need to perform context-dependent permutations between rule applications. Keeping track of firing dependencies among rules, while abstracting from unrelated rules that happen to be interleaved with them, is not handled elegantly in our execution model. Proofs of these forms call for a more abstract viewof execution, that chains together cooperating rules. Strand spaces [16] have those qualities and we are currently developing a sim- ilar model on top of our current execution rules. The core of this proof in the context of strand spaces can indeed be found in [17].

In this paper, we have presented the execution model of MSR, a strongly-typed framework for the specification of security protocols. MSR extends previous attempts at using multiset rewriting for formalizing crypto-protocols [8,15,9] with the introduction of dependent types as a simple and effective mechanism for expressing relations among objects (e.g. between a key and its owner), and by permitting rules to mention memory predicates that allow a principal to store data that survives role termination. The typing infrastructure of MSR is discussed in detail in [4] while the related notion of access control is the subject of [3]. Memory predicates are a powerful mechanism that enables the specification of protocols consisting of a set of coordinated subprotocols that exchange data and pass control [5]. The intruder model that best fits the analysis of a given protocol is indeed expressed as a collection of such subprotocols that communicate through dedicated memory predicates. We exemplified this feature by presenting two detailed specifications of the Dolev- Yao intruder [20,14]. The execution model of MSR is based on parallel multiset rewriting. We proved the admissibility of this approach with respect to the interleaving model that we considered in our previous work [8,9].

In addition to the execution model presented here, MSR also embeds an extensive type system, fully discussed in [4], as well as a set of judgments and rules that formalize the notion of access control [3]. In the near future, we plan to develop MSR in three directions. First we want to extend our collection of case studies [5] to encompass not only the most popular authentication proto- cols [10], but also fair exchange protocols and schemes developed for achieving secure multicast (we are currently formalizing the OFT key management pol- icy [2]). Second, we are developing an operational execution model as a basis for simulation and model checking. This involves in particular delaying the instantiation of universal variables to limit non-determinism. Still on the pragmatic terrain, we are devising support for type reconstruction aimed at speeding up the correct formalization of a protocol. Third, we are designing a

This appendix collects the grammatical productions, judgments and rules used throughout the paper for the convenience of the reader. More specifically, the syntax of MSR is summa- rized in Section A.1. The minimal typing infrastructure needed in this paper is displayed in Section A.2. The definition of substitution for MSR is given in Section A.3. Finally, we collect the executions judgments of our language and associated inference rules in Sec- tion A.4. For the convenience of the reader, we specify the page number where each notion is first introduced.

