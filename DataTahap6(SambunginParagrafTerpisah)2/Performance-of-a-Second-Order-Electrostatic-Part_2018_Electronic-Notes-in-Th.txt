In this paper we will show the performance of a second order PIC algorithm. Our implementation uses second order finite elements and particles that are repre- sented with a collection of surrounding ghost particles. These ghost particles each have associated weights and offsets around the true particle position and therefore represent a charge distribution. We also test our PIC implementation against a first order algorithm on various modern compute architectures.

The WARP code, developed at Lawrence Berkeley National Laboratory (LBNL) and Lawrence Livermore National Laboratory (LLNL) implements an explicit and three-dimensional PIC algorithm in order to model the behaviour of high intensity ion beams [6]. Like EPOCH, WARP applies a second order leapfrog method to advance particles, but only uses linear interpolation functions between the particles and the grid points. Instead of the FDTD method, an electrostatic Poisson solver is used to conduct the field solve. There have been several versions of WARP, these include a code capable of Adaptive Mesh Refinement (AMR), and both two- dimensionial and three-dimensional electromagnetic implementations.

tions [13]. The algorithm uses second order weighting functions to deposit charge on all cells adjacent to the particle. At problem boundaries the charge weighting is smoothly changed from second to first order, becoming entirely first order once the particle is on the boundary itself. Through the use of a test problem that consists of a conducting sphere in the centre of a square grid it was shown that charge is exactly conserved within the bounds of round off error. However, the algorithm re- quires further testing to determine its performance on three dimensional problems with strong electric and magnetic fields.

The PIC method implemented within EMPIRE-PIC is used to model the behaviour of plasmas through representation of an electric field (E) and magnetic field (B) on an unstructured grid. The values of these fields are stored at each of the grid nodes, with interpolation being used to determine the field values at a specific point within a cell. The simulation also contains discrete particles that represent the plasma being simulated. Each of these is associated with a position on the grid, an electrical charge, a mass, and a velocity.

to a multiplication of the charge to mass ratio of the given particle, and the value of the electric field at its current location. Once the velocity has been determined, we can update the particle position trivially by multiplying by the timestep size to calculate how much the particle should be moved. In the event of crossing an element boundary, the move is broken up into segments and the process is applied to each of these segments in turn.

The final step of the core electrostatic PIC algorithm is for the particles to deposit their contribution of electrical charge back onto the grid nodes before the beginning of the next field solve. The process is almost identical to that of weighting the fields to the particles: basis functions are used to calculate how much charge a particle must contribute to each node, and the relevant nodes are updated ac- cordingly. However, the node updates must be carried out using atomic addition operations in order to prevent multiple threads attempting to update the charge value of the same node simultaneously, which would lead to erroneous results.

In this section we present the outline of our second order algorithm along with some of its implementation details. Pseudocode for this algorithm is shown in Algorithm 1. Before summarising the second order algorithm implemented within EMPIRE-PIC, it is first necessary to introduce the concept of both first and second order finite elements. Consider a two dimensional grid made up of quadrilateral elements. As outlined in Section 3 the values of the electric field are stored at the nodes of each element of this grid. In the first order situation nodes are situated at each of the four corners of the cell, and basis functions must be used to interpolate the value of E at a specific location within the cell.

of the subparticle (through addition of its offset to the central particle position) which are then multiplied by the electric field value as normal. This result is then weighted according to the weight associated with the specific subparticle. In this way we compute the value of the electric field felt by each subparticle, it is then trivial to obtain the value on the true particle by simply summing the contributions of each subparticle for each grid dimension.

Much like the traditional PIC algorithm, particles in our second order method must deposit their charge contribution back to the grid nodes before the next field solve can be carried out. This follows a procedure much like our field weighting process, except in reverse. For each particle, each of its subparticles deposit their charge individually. As usual we obtain the subparticle position from its offset in order to determine the values of the element basis function at its location. We then multiply the particle charge by its weight, the basis function values, and the amount of physical particles that the particle is representing within our simulation before depositing it at each of the grid nodes. It should be noted that our algorithm still suffers from the issue of race conditions between threads when depositing this charge. Currently this issue is resolved through the use of atomic operations as in many other codes, though this leads to a performance overhead due to reduced parallelism.

In order to examine the peformance of our algorithm we compare its behaviour to that of the first order implementation. To this end we use a two dimensional two stream instability problem as our primary test case. This consists of two beams of electrons travelling in opposite directions separated by a stationary stream of positively charged ions. This leads to an increase in the energy of plasma waves. We also present performance results for Landau damping problems, where we simulate the effects of exponentially decreasing the energy of longitudinal waves in a charged plasma environment. This can be thought of as the inverse of the described two stream scenario.

Our largest test cases use a total of 1 million particles on a grid consisting of 64 cells in the x dimension, and 2 in the y dimension, for a total of 500 timesteps. This leads to a large amount of particles per grid cell, facilitating the later investigation of the effects of the overhead of atomic operations on the performance of the algorithm. Besides this, we use simulations with a variety of particle counts to assess the scalability of our PIC implementation. In addition to total execution time, and the timing of various key kernels, we also examine the average memory bandwidth used by the application at both first and second order in order to establish whether the move to second order drastically alters the degree to which the code is memory bound.

The Intel systems show very comparable scaling, with the initial gap between the two systems narrowing as problem size is increased. Therefore, while the non- accelerator systems are competitive with each other, on our algorithm the P100 is clearly superior and it is reasonabe to conclude that this would be the case on much larger problem sizes. However, at first order all three modern architectures exhibit similar scaling with very little difference between the three. The scaling behaviour does suggest that if first order problem size were to continue to increase a performance gap would appear between the P100 and Intel systems.

experiments. We see almost no difference in the bandwidth achieved by the Tesla K20, whereas there is a noticeable increase for second order problems on both the Tesla P100 and the KNL. However, these increases do not make the application significantly more memory bound due to the high bandwidth limit for both sys- tems. Surprisingly we observe a decrease of approximately 1 GB/s in the achieved bandwidth on the Broadwell system at second order. This result warrants further investigation.

While second order methods currently perform and scale worse versus first order, our results suggest that second order PIC methods are becoming more viable on modern architectures when compared to previous generations of many-core hard- ware. We have also highlighted that, for our unstructured code, the significant performance issues are located within routines that involve weighting the values of the electric field to particle locations, or vice versa. This is both due to the usage of atomic operations, and also the conversion of physical points to reference points in order to determine basis function values.

This is the first paper to document our electrostatic second order algorithm and its performance behaviour on various compute architectures. In future work we aim to use convergence analysis to quantify the accuracy improvement gained through using our method. Additionally, through resolution of performance issues we hope to show improved performance and scaling behaviours versus first order problems. Finally, we will extend our algorithm to function on electromagnetic simulations, where particles are influenced by both magnetic and electric fields.

