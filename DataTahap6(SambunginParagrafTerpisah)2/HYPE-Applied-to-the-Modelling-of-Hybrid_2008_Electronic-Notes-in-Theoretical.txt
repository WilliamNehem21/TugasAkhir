The usefulness of this process algebra for hybrid modelling will be shown through an example. The Repressilator is a well-known synthetic genetic regulatory network [10]. It consists of three genes tetR, cI and lacI. Each gene expresses a protein that affects the expression of one of the other genes. The protein from tetR represses the expression of cI, the protein from cI represses the expression of lacI and the protein from lacI represses the expression of tetR. This forms a negative feedback loop and demonstrates oscillatory behaviour. We will express this network in HYPE and show various analyses.

The next section introduces the process algebra HYPE together with its opera- tional and hybrid semantics. After that the Repressilator is modelled in HYPE and its analysis is given. Finally, we discuss related work in hybrid biological systems modelling and we finish with a discussion of topics for future work.

This section will present HYPE by way of a simple running example of a gene and the protein it produces to illustrate the necessary concepts. This gene has a negative feedback cycle. Once a certain amount of protein is produced, the gene switches off, the protein production stops and the protein concentration drops as a result of the stopping of production. Once it has dropped sufficiently, the gene switches back on and protein production resumes until it reaches the threshold.

The modelling spirit of HYPE focusses on flows. In our example, we can identify two flows affecting the concentration of a protein. There is one for the production of the protein and one for the degradation of the protein. The strength and form of a flow can be modified by events. So the production activity depends on whether the gene, called Gene A, is switched on or off. In HYPE, we model the production of Protein A by the following subcomponent.

and protein being produced. It affects influence pA which represents the influence of protein production on the concentration of the protein, it has strength kp and it is associated with the function called const . The second gives the effect of the gene being switched off and no protein being produced: the influence name is again pA, 0 is the strength of the protein production since none is being produced, and the form it takes is const . We assume that in the initial state, protein is being produced, hence the activity after init is the same as that after expressA.

Notice that no actual function has been specified for const . The interpretation of influence types will be specified separately, so that experimentation with different functional forms of the protein flow can occur without modifying the protein sub- component. Hence, in HYPE we separate the description of the logical structure of flows from their mathematical interpretation.

In the modelling of computer systems, we call this a controller and we will use this terminology here. The system without a controller is called the uncontrolled system because all events are possible and no causal or temporal constraints have been imposed. Controllers only have event prefixes. The controlled system is constructed from synchronisation of the controller and the uncontrolled system and the controller must be prefixed by the initialisation event init.

In the preceding informal discussion, we have introduced the main constituents of a HYPE model including the combination of flow components with a controller component, formal and actual variables, association between influences and vari- ables, conditions that specify when events occur, and definitions for the influence type functions. To understand the dynamics of this system, we need to derive ODEs to describe how the variables change over time. To do this we present operational semantics that define the behaviour of our controlled system. Before that we present the formal definition of HYPE.

Therefore, this process enables us to obtain ODEs describing how the continuous part of the system evolves, and we have different sets of ODEs to describe the differ- ent dynamics that can be in operation. We wish to combine this information with the event conditions already defined and an obvious way to do this is to translate this information into a hybrid automaton, thus allowing our modelling language to be a front-end to a well-known formalism. Hybrid automata are dynamic sys- tems presenting both discrete and continuous evolution. They consist of variables evolving continuously in time, subject to abrupt changes induced by discrete in- stantaneous control events. When discrete events happen the automaton enters its next mode, where the rules governing the flow of continuous variables change. See of protein from the gene. Furthermore, we will assume that there are no differences between the different reaction rates for the different genes and use kp and kd as the reaction rates for production and degradation respectively. The dashed lines now represent the inhibition of the production of protein by another protein.

to the production of the protein AB, and likewise for the other proteins. Finally, we need to give conditions for the events. For init, it must happen immediately the system starts, hence the value true. The reason for having an event init is to initialise the system, hence it sets the initial values for the proteins. For protein AB, the event inhibitA occurs when the concentration of the protein CA that inhibits its production reaches a certain concentration. Likewise the event expressA occurs

