Splitting the idempotents has another remarkable effect. The total maps of this split category become exactly the maps whose complexity belongs to the complexity order, C. Thus, for example, if C = P, then one obtains, as the total maps of the split category, exactly the polynomially timed maps.

This is striking: it is not at all obvious that there should be any relationship between complexity, given in this very concrete manner, and partiality. Yet, in a very straightforward way, one can exhibit a direct relationship. Of course, the polynomially timed maps, obtained in this manner, are by no means the PTIME maps as understood by complexity theorists. The category of timed sets allows all possible timings for all partial maps given between sets whether they are realizable by machine or not. To obtain the classical PTIME maps we need to link these ideas up with computability: for to be a PTIME map, one must also be able to realize the map by a computation on a machine.

These results are explained in the last section: the development relies on a number of standard results from complexity theory and on a basic understanding of Turing categories. A similar technique allows one to obtain models of Turing categories of other low complexity classes such as ELEMENTARY, PRIM (prim- itive recursive). These techniques can also be applied when space is taken as the resource: to illustrate this we briefly discuss LOGSPACE computations which also organize themselves into a Turing category. Finally, we illustrate the possibility of interpreting complexity hierarchy problems as questions about functors between these Turing categories.

In section 5 we carry out these formal steps for TSet(M )/C. While abstractly these steps are quite routine, their realization in this case is quite striking. As we shall see, this allows the construction of a restriction category whose total maps are precisely those with timings bounded by the complexity order C. This provides a direct link between complexity and partiality.

The proof of proposition 3.1 can be broken into parts: proving that it is a restriction category, that it is Cartesian, distributive, and discrete. The verification that it is a restriction category is straightforward: we shall prove [R.1] and [R.4] as these show why the additive assumption is needed: 14 In this case, as N is well-ordered, it may be tempting to think that as we have arbitrary non-empty infima that we will have arbitrary joins for any set of compatible parallel maps (i.e. not just for finite sets). However, this is not the case: the join of an infinite collection will in general not be well-defined as finding uniform bounds is only possible for finite families.

It is worth remarking that categories of timed sets often have more than one trace. Consider, for example, TSet/L where L is the linear order on the natural numbers with addition. As described above L is lax so that there is a trace as defined above. However, on any size monoid (such as N ) which has a maximum L is also an order for that monoid where addition is replaced by the maximum (e.g. for N regarded as size monoid with addition given by max(x, y)). Furthermore, the two categories of timed sets are then actually isomorphic. However, significantly, the traces given by the above, with respect to addition and maximum, are not the same. This not only demonstrates that a category can have more than one trace but also is a reminder that when one wishes to talk of iteration one may have a choice of iteration!

Proposition 5.1 When C is additive Split(TSet(M )/C) is a discrete distributive restriction category in which the total maps are precisely the maps whose time com- plexity lies in C. Furthermore, if TSet(M )/C has joins, ranges, or iteration then so does Split(TSet(M )/C).

As the best known simulation of a Turing machine by a universal Turing machine has an order log n overhead, one cannot quite make the argument (as presented) work for linear time computations. However, for any additive complexity order which contains n log n the argument works verbatim. Hence, this provides a number of examples of Turing categories whose total maps have low time complexity.

The objective of this work was to provide concrete models of computability, as em- bodied in Turing categories, in which the total maps belong to a specific functional complexity class (such as PTIME and LOGSPACE). The constructions we have provided do achieve this. Furthermore, they closely mimic the standard approach taken in complexity theory. This suggests that the results of complexity theory may be mapped fairly directly into categorical facts.

