Local strategies on operators are used in this context, in particular to force the evaluation of expressions to terminate. This kind of strategy is allowed by languages such that OBJ3, CafeOBJ or Maude, and studied in [7] and [18]. It is de ned in the following way: to any operator f is attached an ordered list of integers, giving the positions of the subterms to be evaluated in a given term, whose top operator is f . For example, the TRS

On the previous example, our method consists in proving termination of the constants, and of the terms of the form f (T ); zero(T ); ite(T1; T2; T3); h(T ); i(T ); g(T ); s(T ), for the previously given strategy, whatever the values of the ground terms T; T1; T2; T3. Obviously, 0; true; f alse are in normal form and then terminating. For i(T ) (like for s(T ) and h(T )), using an induction order- ing such that i(T ) T , by induction hypothesis, we can suppose that T is terminating. So is i(T ), since i is a constructor (i.e. i is not a top symbol of left-hand side of rule).

By de nition of the strategy, normalizing zero(T ) rst consists in normal- izing T , into any of its normal forms T # if it exists, and then zero(T #) at the top position. For the same ordering  as previously, we have zero(T )  T . Then, by induction hypothesis, T terminates. Let T # be any of its normal forms (there can be several normal forms if the system is not con uent). The termination of zero(T ) is then reduced to the termination of zero(T #), which can only reduce into true or f alse.

Normalizing h(T ) also rst consists in normalizing T . In a similar way as previously, the induction hypothesis can be applied to T . The termination of h(T ) is then reduced to the termination of h(T #), which can only reduce into i(0), that is in normal form, or into s(i(T #)), that is also in normal form.

Normalizing ite(T1; T2; T3) rst consists in normalizing T1. As previously, T1 can be supposed to be terminating, and the termination of ite(T1; T2; T3) reduced to the termination of ite(T1#; T2; T3). According to the strategy, ite(T1#; T2; T3) is then reduced into T2 or T3, that are terminating by induction hypothesis.

Our goal here is to provide a procedure implementing such a reasoning. In Section 2, the background is presented. Section 3 introduces the basic notions formalizing our induction principle. In Section 4, a rule-based algo- rithm mechanizing the proof principle is given, its correctness is established and examples are given.

substitutions 1 followed by 2 is denoted 2 1. Given two substitutions 1 and 2, we write 1   2 i 9 such that 2 =  1. Given a subset X1 of X , we note X1 for the restriction of to the variables of X1, i.e. the substitution such that Dom( X1 )  X1 and 8x 2 Dom( X1 ) :  X1 x = x:

Given a set R of rewrite rules or term rewriting system on T (F; X ), a function symbol in F is called a constructor if it does not occur in R at the top position of the left-hand side of a rule, and is called a de ned function symbol otherwise. The set of constructors of F for R is denoted by ConsR, the set of de ned function symbols of F for R is denoted by DefR (R is omitted when there is no ambiguity). The rewriting relation induced by R is called standard rewriting relation and is noted !R (! if there is no ambiguity on R). We note s !p;l!r; t (or s !p;l!r; t where either p or l ! r or  may be omitted) if s rewrites into t at position p with the rule l ! r and the substitution . The term sjp is called a redex, the position p a redex position and the symbol in s at position p is called a redex symbol. The transitive (resp. re exive transitive) closure of the rewriting relation induced by R is

De nition 3.1 An LS rewriting strategy (or LS-strategy) on terms of T (F; X ) (resp. of T (F)) is a function LS from F to the set of lists of integers L(N ), de ning a rewriting strategy as follows.

At each rewriting step, the term t is said to LS-rewrite into a term t0. If t does not rewrite for the LS-strategy, it is said to be in LS-normal form (or in normal form if there is no ambiguity). If any LS-rewriting chain starting from t leads to an LS-normal form then t is said to be LS-terminating (or to LS-terminate). If the evaluation strategy of a term t0 is the empty list, then t0 is in LS-normal form.

We then consider the case of any term t of T (F). For that, we observe the rewriting derivation tree for the LS-strategy starting from a term tref = g(x1;::: ; xm), for any g 2 F, where x1;::: ; xm are induction variables that can be instantiated by any ground term. The LS rewriting relation on ground terms is simulated by the two mechanisms below to follow the derivation tree starting from tref , and whose current term is t. Let LS(top(t)) = [p1;::: ; pn], and pk the rst element of [p1;::: ; pn] such that pk = 0.

First, the subterms tjp1 ;::: ; tjpk 1 of t have to be LS-normalized, by def- inition of the above LS-strategy. If tref  tjp1 ;::: ; tjpk 1 we can suppose, by induction hypothesis, that these subterms are LS-terminating. We then replace them in t by abstraction variables Xi representing respectively any of their normal forms ti#: these variables will only be instantiated by terms in normal form. Reasoning by induction allows us to only suppose the ex- istence of the ti# without explicitly computing them; this step will be called abstraction step or abstraction of the subterms of t. We also say that t is abstracted into a term v.

De nition 3.3 Let N be a set of new variables disjoint from X . Symbols of N are called NF-variables. Substitutions and instantiations are extended to T (F; X [ N ) in the following way. Let X 2 N ; for any substitution  (resp. instantiation ) such that X 2 Dom( ), X (resp.  X) is in normal form.

De nition 3.5 An ordering constraint (t > t0) on terms of T (F; X [N ) is satis able if there exists an ordering  and at least one instantiation such that t   t0. We say that  and  satisfy (t > t0).

Along our induction process, when abstracting subterms ti by Xi, we state constraints on NF-variables to express that their instances can only be the normal forms of the corresponding instances of the ti. They are of the form t# = X where t 2 T (F; X ), and X 2 N , or more generally of the form t# = t0 where t; t0 2 T (F; X [ N ). Let us call such a constraint an abstraction constraint.

De nition 3.6 An abstraction constraint (t# = t0) where t; t0 2 T (F; X [ N ) is satis able if there exists at least one instantiation such that t# = t0. We say that  satis es (t# = t0).

De nition 3.7 Let A be a constraint formula and C a conjunction of ordering constraints. The constraint problem (A; C) is satis ed by an ordering  if A is satis able, and for all instantiations  satisfying A,  and  satisfy C. (A; C) is satis able if A is satis able and there exists an ordering  as above.

De nition 3.8 Let R be a TRS on T (F; X ). A term t is narrowed into t0, at the non variable position p, using the rewrite rule l ! r of R and the substitution , when is a most general uni er of tjp and l, t0 = (t[r]p). This is denoted t ;p;l!r; t0 where either p, or l ! r or may be omitted. It is always assumed that there is no variable in common between the rule and the term, i.e. that V ar(l) \ V ar(t) = ;.

The rule Narrow Y processes the narrowing step at position 0 of the cur- rent term u. If u is narrowable with a substitution satisfying the current constraint formula A, then u is narrowed in all possible ways in one step, with all possible rewrite rules of the rewrite system R, and all possible sub- stitutions i, into wi;i 2 [1::l]. Then (fug; [0; p1;::: ; pn]; A; C) is replaced by f(fwig; LS(top(wi));A ^ i; iC); i 2 [1::l]g, where i is the most general substitution allowing narrowing of u into terms wi. Moreover, since in A, we only memorize the abstractions and narrowing substitutions performed on the current term u, and since Var (u) is disjoint from the set of variables occuring in the rewrite rules of the TRS, we can restrict i to Var (u) in adding i to A. Thus, in the following, we will write i for iVar (u).

Let us also precise that if wi is a variable x 2 X , we cannot conclude anything about termination of ground instances of x. So we force the proof process to stop in setting LS(x) to a particular symbol ]. However, if wi = X 2 N , LS(X) is set to [], which is coherent with the fact that any ground instance of X is in normal form.

0 or is narrowable with a substitution that does not satisfy the current constraint formula A. Then no narrowing is processed and the current term is evaluated at positions following the top position in the strategy. The list of positions then becomes [p1;::: ; pn].

We also can test for the current term whether there exists an ordering having the subterm property such that (A; C ^ tref > u) is satis able. Then, by in- duction hypothesis, any ground instance of u terminates for the LS-strategy, which ends the proof on the current derivation chain. The Stop Ind rule then replaces the set containing the current term by the empty set.

When the induction hypothesis cannot be applied on a term u, the inductive reasoning can be completed as follows. It can sometimes be possible to prove termination of any ground instance of ui (resp. u) by another way. Let TERM IN (u) be a predicate that is true i  any ground instance of u LS- terminates. In Abstract, Abstract Stop and Stop Ind, we can then replace the condition t > ui for some i (resp. t > u) by the alternative predicate TERM IN (ui) (resp. TERM IN (u)). Obviously, in this case, the ordering constraint t > ui (resp. t > u) is not added to C.

As in [12], for establishing that TERM IN (u) is true, in some cases, the notion of usable rules can be used. Given a TRS R on T (F; X ) and a term t 2 T (F; X [ N ), we determine the only rewrite rules that are likely to apply to any of its ground instances, for the standard rewriting relation, until its ground normal form is reached, if it exists. Then we try to nd a simpli cation ordering N so that these rules are oriented. Thus any ground instance t is bound to terminate for the standard rewriting relation: indeed, if t ! t1 ! t2 ! :: :, then, thanks to the previous hypotheses, t N t1 N t2 N ::: and, since the ordering N is noetherian, the rewriting chain cannot be in nite.

More formally, given a TRS R, we call usable rules of a term t 2 T [N , as in [2], a calculable superset U (t) of the set of rules of R used in all possible LS- derivations starting from any t, and de ned as follows. When t is a variable of X , then the usable rules of t are R itself. Likewise, the set of usable rules associated to a NF-variable is empty, since the only possible instances of sucha variable are ground terms in normal form. When t is of the form f (u1;::: ; un), then the usable rules of t are the usable rules of the ui, for i 2 LS(f );i 6= 0 and, if 0 2 LS(f ), all the rules l ! r having the symbol f as top symbol of lhs l, altogether with sets U (r) of the usable rules of the terms r.

Since in general r contains variables of X , the evaluation of U (r) and then of U (t) is likely to result in the whole set of rules R. To compute a smaller set of usable rules, like for the narrowing substitutions, we will replace variables by NF-variables as much as we can. The idea is that the usable rules of some variables in r can be omitted since they are included in the usable rules of the ui.

De nition 4.2 Let R be a TRS on a set F of symbols. Let Rls(f ) = fl ! r 2 R j top(l) = f g, and Rls0(f ) = fl ! r0 2 NF (R) j top(l) = f g. For any t 2 T (F; X [ N ), the set of usable rules of t, denoted U (t), is de ned by:

Proposition 4.4 Let R be a TRS on a set F of symbols, R0 = NF (R) and for each l ! r0 2 R0, no variable of X occurs in r0 at an LS-position. Let t 2 T (F; X [ N ). If there exists a simpli cation ordering  such that 8l ! r 2 U (t) : l  r, then any ground instance of t is terminating.

Abstract applies here, since zero(X2) can be abstracted, thanks to Propo- sition 4.4. Indeed, U (zero(X2)) = fzero(0) ! true; zero(s(x)) ! f alseg, and both rules can be oriented by a LPO with the precedence zero F true and zero  F f alse. Then we have TERM IN (zero(X2)).

X4 = 0 and x1 = i(0). The second one is satis able by any instantiation such that X4 = s(0) and x1 = i(s(0)). The third one is satis able by any instantiation  such that X3 = zero(i(0)), X2 = i(0) and x1 = i(i(0)).

The second Abstract applies onf (h(X4)), thanks to Proposition 4.4. In- deed, U (h(X4)) = fh(0) ! i(0); h(x) ! s(i(x))g, and both rules can be ori- ented by the same LPO as previously with the additional precedence h F	i and h  F s. Then we have TERM IN (h(X4)).

One could have tried to narrow f (X5), by using the rst rule and the narrowing substitution NF = (X5 = i(X6) ^ x000 = X6). But then A ^ NF would be (x1# = X1 ^ X1 = i(X2) ^ zero(X2)# = X3 ^ X3 = f alse ^ X2 = X4 ^ h(X4)# = X5 ^ X5 = i(X6)). For any  satisfying A ^ NF ,  must be such that h(X4)# = h( X4#)# = i( X6). If  X4# 6= 0, then, according to R, h( X4#) ! s(i( X4#)), where s is a constructor. Then we cannot have h( X4#)# = i( X6), so  must be such that X4# = 0. But then zero(X4)# = true, which makes A ^ NF unsatis ed. Therefore there is no narrowing.

More precisely, the method is applied on terms of the form g(x1;::: ; xm), where g is a de ned symbol, and consists in iterating the application of two steps: an abstraction step, replacing immediate subterms by NF -variables, representing any of their normalized instances, and a narrowing step, reducing the resulting term according to the di erent possible instances of its variables. These two steps are iterated until getting a term for which one can easily say that all ground instances are terminating. The important point to automate our proof principle is the satisfaction of the ordering constraints for Abstract, Abstract  Stop and Stop  Ind.

[4] Peter Borovansky , Claude Kirchner, H el ene Kirchner, Pierre-Etienne Moreau, and Christophe Ringeissen. An overview of ELAN. In Claude Kirchner and H el ene Kirchner, editors, Proceedings of the second International Workshop on Rewriting	Logic	and	Applications, volume 15, http://www.elsevier.nl/locate/entcs/volume15.html, Pont- a- Mousson (France), September 1998. Electronic Notes in Theoretical Computer Science. Report LORIA 98-R-316.

[5] M. Clavel, S. Eker, P. Lincoln, and J. Meseguer.  Principles of Maude. In J. Meseguer, editor, Proceedings of the 1st International Workshop on Rewriting Logic and its Applications, volume 5 of Electronic Notes in Theoretical Computer Science, Asilomar, Paci c Grove, CA, USA, September 1996. North Holland.

[18] Nakamura M. and Ogata K. The evaluation strategy for head normal form with and without on-demand ags. In K. Futatsugi, editor, Proceedings of the Third International Workshop on Rewriting Logic and its Applications, WRLA'2000, pages 211{227, Kanazawa City Cultural Halt, Kanazawa, Japan, September 2000. Electronic Notes in Theoretical Computer Science.

that p = j:p0. By induction hypothesis on uj, strict subterm of t, we have the property : 8p 2 LS  P OS(uj) : U (ujjp)  U (uj). Then, since p  2 LS   P OS(uj), we have U (ujjp0 )   U (uj), that is U (tjp) U (uj). Moreover, by de nition of the usable rules, we have : U (t) =

Proof. This lemma is a corollary of the Lemma A.1. Indeed, if x occurs at an LS-position p in t then, according to Lemma A.1, U (tjp)  U (t). Since tjp = x 2 X , by de nition of the usable rules, we have U (tjp) = R, therefore R  U (t). Since we also have U (t)  R, we get U (t) = R.	2

Lemma A.3 Let R be a TRS on a set F of symbols and t 2 T (F; X [ N ). Then, every symbol f 2 F occuring in t at a redex position is such that Rls(f )  U (t).

Proof. This lemma is also a corollary of Lemma A.1. Indeed, if f occurs in t at a redex position p, then p 2 LS  P OS(t). According to Lemma A.1, U (tjp)   U (t).  Since f is a redex symbol, we have 0 2 LS(f ), and then

Lemma A.4 Let R be a TRS on a set F of symbols, R0 = NF (R) and t 2 T (F; X [N ). For each l ! r 2 R, we note l ! r0 the rule NF (l ! r). Then l ! r 2 U (t) ) U (r0)  U (t).

Proof. According to Lemma A.2, if a variable of X occurs in t at an LS- position, then U (t) = R, and then the property is trivially true. We will then suppose in the following that t does not contain any variable of X at an LS-position.

Lemma A.5 Let R be a TRS on a set F of symbols and R0 = NF (R), so that for each l ! r0 2 R0, no variable of X occurs in r0 at an LS-position. Let t 2 T (F; X [ N ) such that no variable of X occurs in t at an LS-position. Whatever  ground substitution such that Var (t)  Dom( ), and t !p1;l1!r1 t1 !p2;l2 !r2 t2 ! ::: !pn;ln !rn tn LS-rewrite chain starting from t, the symbol of tk; 1  k  n at a redex position of tk is either a redex symbol of t or one of the ri;i 2 [1::k].

For an empty derivation, the property has to be checked on t. In this case, let us show that whatever x 2 X [ N variable of t, x does not introduce redex symbol in t. Let x be a variable of t occuring at position p.

if x occurs at an LS-position in l1, since l1 = tjp1 , then x is a subterm of t at an LS-position. Then, for a redex symbol f of x, f is a redex symbol of t. Then, as shown before, f is a redex symbol of t.

Let us now suppose the property true for any term of the LS-rewrite chain t0 = t !p1;l1!r1 t1 ! ::: !pk;lk !rk tk, and let us consider tk !pk+1;lk+1!rk+1 tk+1. We then have to show that every de ned symbol of tk+1 at a redex position comes either from t or from one of the ri;i 2 [1::k +1]. By hypothesis, there exists a substitution  such that  lk+1 = tkjpk+1 and tk+1 = tk[ rk+1]pk+1 .

Lemma 4.3 Let R be a TRS on a set F of symbols, R0 = NF (R) and for each l ! r0 2 R0, no variable of X occurs in r0 at an LS-position. Let t 2 T (F; X [ N ). Whatever t ground instance of t and t !p1;l1!r1 t1 !p2;l2!r2 t2 ! ::: !pn;ln!rn tn LS-rewrite chain starting from t, then 8i 2 [1::n] : li ! ri 2 U (t).

Proof. If a variable x 2 X occurs in t at an LS-position then, thanks to Lemma A.2, we have U (t) = R and the property is trivially true. We then consider in the following that the variables of X in t do not occur at an LS- position. We proceed by induction on the length of the derivation.

The property is trivially true if t is in normal form. For any t !p1;l1!r1 t1, since no variable of t occurs at an LS-position, p1 is a non variable position of t. Let f be the symbol at position p1 in t. Then, thanks to Lemma A.3, Rls(f )  U (t). Moreover, since f is the symbol at the redex position, l1 ! r1 2 Rls(f ). Therefore we get l1 ! r1 2 U (t).

or the symbol f at position pk+1 in tk is a symbol of a r0i;i 2 [1::k], occuring at an LS-position ; then, thanks to Lemma A.3 on r0i, we get Rls(f )  U (r0i); moreover, since f is the symbol at the redex position, lk+1 ! rk+1 2 Rls(f ), henceforth lk+1 ! rk+1 2 U (r0i); by induction hypothesis we have li ! ri 2 U (t) and, thanks to Lemma A.4, we have U (r0i)  U (t). Henceforth lk+1 ! rk+1 2 U (t).

Proposition 4.4 Let R be a TRS on a set F of symbols, R0 = NF (R) and for each l ! r0 2 R0, no variable of X occurs in r0 at an LS-position. Let t 2 T (F; X [ N ). If there exists a simpli cation ordering  such that 8l ! r 2 U (t) : l  r, then any ground instance of t is terminating.

Lemma B.3 Let R be a TRS. Let s 2 T (F; X ),  a ground substitution such that s is reducible at a position p 2 O(s), and Y  X  fVar (l) j l ! r 2 Rg a set of variables such that V ar(s) [ Dom( )  Y. If s !p;l!r t0, then there exist a term s0 2 T (F; X ) and substitutions ;  such that :

Let  =  [ . Then we have :  (sjp) =  (sjp) =  l =  l, therefore sjp and l are uni able. Let us note  the most general uni er of sjp and l, and s0 =  (s[r]p). Therefore, by de nition : s ;[p;l!r; ] s0, and then the point	1.

according to Proposition B.1, we have Var ( (s)) = (Var (s) Dom( )) [ Ran( Var(s)); by de nition, Var (s)  Y and Ran( Var(s))  Ran( ), there- fore Var ( (s))  (Y  Dom( )) [ Ran( ), that is Var ( (s))  Y1. There- fore, with the previous point, we get V ar(s0)  Y1.

To each step of the procedure characterized by (ftg; l; A; C), we associate the set of ground terms G = f t j  and   satisfy (A; C)g. Inference rules Abstract, Narrow Y and Narrow N transform (ftg; l; A; C) into (ft0g; l0; A0; C0) to which is associated G0 = f t0 j  and  satisfy (A0; C0)g. We then prove the following result: if for all t0 2 G0, t0 LS-terminates wrt l0, then any t in G LS-terminates wrt l.

f (u1;::: ; um) is abstracted.	So by induction hypothesis, the ukj LS- terminate. Moreover, for i 2 fi1;::: ; ipgnfk1;::: ; klg, we have TERM IN (ui) and then ui LS-terminates. Finally, for i 2 fp1;::: ; pk 1g n fi1;::: ; ipg, ui is either a ground term in normal form or an NF-variable, and then ui LS-terminates.

::: ; um) ! t0, thanks to Lemma B.3, there exists a narrowing step f (u1;::: ; um); v and a substitution  such that t0 = v. Moreover, this narrowing derivation is e ectively produced by Narrow Y, which is applied in all possible ways on ff (u1;::: ; um)g. Then LS-termination of the v implies LS-termination of f (u1;::: ; um).

Let us now prove that the ground instances satisfying (A; C) of each term t removed from T during the application of the rules LS-terminate. The rst rule removing terms from T is Stop. When Stop is applied and removes t from T , then the evaluation strategy of t is []. Then, for any ground substitution satisfying A and C, t LS-terminates.

induction hypothesis, the ukj LS-terminate. Moreover, for i 2 fi1;::: ; ipgn fk1;::: ; klg, we have TERM IN (ui) and then ui LS-terminates. Finally, for i 2 fp1;::: ; png n fi1;::: ; ipg, ui is either a ground term in normal form or an NF-variable, and then ui LS-terminates. Therefore, by de nition of the evaluation strategy of t, t LS-terminates.

