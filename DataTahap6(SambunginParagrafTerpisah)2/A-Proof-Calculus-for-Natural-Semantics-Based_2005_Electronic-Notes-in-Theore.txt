Consider one of the well-known proof rules of the Hoare cal- culus [6]. If one wants to prove that a recursive procedure p is correct wrt. a precondition P and a postcondition Q , then one assumes that for all recursive calls of p within the body of p, precondition P and postcondition Q hold. If p always

The Hoare calculus rule for procedures is essentially an overlay of two rules. The first considers the terminating case with a postcondition. The second models the non-terminating case where the precondition holds at each procedure entry. We will see the same overlay of rules for natural semantics.

Natural semantics [9] is a deductive method to define the semantics of pro- grams. Axioms and inference rules specify semantic properties wrt. the ab- stract syntax. The semantics of an abstract syntax tree is defined as a state transition from the initial state into the final state. This state transition is defined compositionally in terms of the state transitions of the direct subtrees of the abstract syntax tree. Consider e.g. the rules for the while-loop:

Traditionally, natural semantics specifications are interpreted with finite derivation trees because only then, a unique final state exists. This traditional view corresponds to an inductive or least fixed point interpretation. In this paper, we argue why a greatest fixed point or coinductive interpretation is more appropriate. It also allows for a semantics for non-terminating programs while not changing the usual inductive semantics for terminating programs.

ple. Starting at the root node of a tree, we specify how its marking is prop- agated through the tree. Therefore we define how the marking of a node is derived from the marking of its predecessor. The first principle is structural induction and defines unique markings on finite trees. The second principle works also for infinite trees. Even though a tree might not be finite, the coin- ductive definition specifies a possibly infinite marking process well-defined at each step.

The inductive definition principle corresponds directly with the inductive proof principle. It states that some predicate Q holds for all elements in the least fixed point lfp(spec). An inductive proof is entirely constructive. Q can only be verified for elements which can be constructed.

Proof. Analogous to the proof of theorem 3.3: By contradiction: Assume that d /= d'. Then there exists a position pos = [l | pos'] of minimal length such that mark (d |pos) /= mark (d |pos) and mark (d |pos' )= mark (d |pos' ). But then the second condition in theorem 3.4 implies that mark (d |pos)= mark (d' |pos) which is a contradiction to the assumption d /= d'. Hence d = d'.

We start with the observation that each natural semantics defines an abstract data type. Then we show that each natural semantics is a specification in the sense of definition 3.1. We prove that the least fixed point of such a specifi- cation describes the execution of all terminating programs while the greatest fixed point defines also a semantics for all non-terminating computations.

One can also consider the case that there are specifications such that no final state can be computed because, e.g., there might be no applicable rule. Such a case is called a stuck computation. To keep the presentation simple, we do not discuss such situations here.

Second condition: We need to show that those markings of the direct sub- trees of eff part (d) and eff part (d') which do not denote trees are the same. These markings are the constructor symbols (i.e. the applied inference rules), the program annotations (element of Prog) and the initial states in the mark- ings of the direct subtrees of eff part (d) and eff part (d').

of natural semantics by translating it into a small-step format. Induction is used to reason about the thereby defined finite and infinite state transition se- quences. This is only a half-hearted approach as it does not separate between the coinductive character of the state transitions and the inductive nature of the final result defined on top of them. We want to emphasize that induction is not the appropriate proof method to reason about the state transition be- havior of programs, see also our explanations about induction and coinduction for lists at the end of this section.

