Algorithm visualizations have not been widely adopted in teaching. One possible reason for this is that visualizations are often developed as standalone systems which can be difficult to integrate into lectures. Recently XML based formats for the two major presentation tools have been introduced. We present a method and a prototype implementation which allows creation of algorithm animations in the ODF format. This allows integrating the animation seamlessly within the lecture material.

Algorithm visualizations have not been widely adopted in teaching. The problem of integration of visualization in self-study material has been studied in the context of HTML-based hypertextbooks [12]. HTML allows integrating animations as Java applets, Flash animations and videos to name a few.

A whole another problem is that visualizations are often topic-specific tools. For a complete course, the teacher might have to use visualizations provided by a large number of developers. Naturally, this results in visualizations that do not share a uniform look and can cause unnecessary confusion for teacher as well as the students. Additional confusion can also be caused by (even subtle) variations in terminology.

According to results of an international survey, the classroom set-ups vary a lot, with the most typical set-up being a class with a computer and a ceiling- mounted projector [10]. Thus, the teacher has to make preparations before the lecture. Applets should be downloaded and local webpages created to account for problems in network connections. In some cases the visualization software has to be installed, which might even be impossible in some lecture hall setups. The safest alternative is often to use a personal laptop for giving the presentations. However, PowerPoint or PDF slides typically work with whatever computer is available.

Until now, the tools for implementing the generation of slides have been missing. One reason for this is that in the past, the presentation tools have used closed proprietary formats. The development of open XML formats for the presentation tools has made implementing such tools much easier. Both of the most popular presentation tools, Microsoft PowerPoint and OpenOffice Impress, have open XML formats, Office Open XML and Open Document Format, respectively. These lan- guages make it possible to generate presentations for these tools with reasonable effort.

In addition, Extensible Stylesheet Language Transformations (XSLT) [2], a lan- guage designed to transform XML documents to other formats, makes transforming XML documents into the formats used by presentation tools simpler. The out- put of XSLT can be another XML format, HTML, or text. There are many tools available to do the XML transformations using XSLT. The most well-known XSLT processors for Java are Xalan and Saxon. This provides a simple way to implement transformations between languages.

The last step converts the SVG-files into corresponding Impress snippets, which are combined with the parts created directly by the Java code. This is done with XSLT which transforms the multiple SVG-files into one Open Document Format (ODF) presentation. The XSL-stylesheet is divided into two parts that handle dif- ferent parts of the input. The first one generates the main ODF-document creating the needed styles and pages. It combines each slide from the multiple input files (tree, graph, notes, and edge list). For the SVG-files (used for trees and graphs) we have another XSL-stylesheet. This stylesheet transforms the graphical elements of the SVG into ODF. It also takes care of things like coordinate system transforma- tions, scaling etc.

The output of the process is in Open Document Format [3]. ODF is an open, XML-based file format for office applications. The format specifies an XML struc- ture for text documents, spreadsheets, and presentations. In an ODF presentation, each slide includes the slide contents as well as the notes attached to that slide. Listing 1 gives an example of the graphical primitives in one ODF slide. The primi-

In this work, we have introduced an idea to develop tools to easily create slides for the presentation tools. Such tools would allow instructors to integrate algorithm vi- sualizations into the tools they use on lectures instead of using separate visualization systems. We feel that this type of integration might be a solution to the problem of algorithm visualizations not used as widely as the AV research community hopes.

Our vision is to have automatic tools that output algorithm animations as pre- sentation slides. This approach saves the teacher from switching between an algo- rithm visualization system and the presentation software. Compared with using, say, applets to visualize algorithms on lecture, the advantage of the slides is that the lecturer can edit them and adapt them to his/her other learning material. This can be, for example, changing terminology, changing colors, translating it to e.g. German, or adding explanations. In addition, the lecturer can alter the parameters for the tool creating the example, allowing the example to be tuned for the current audience.

3 This caused some major problems in the implementation, since the ODF specification does not clearly state which attributes should be in which namespace. Especially specifying styles was difficult, partly due to the fact that Impress gives no error messages when using wrong namespaces, it just ignores the attributes. Another problem was with the positioning of the graphical primitives. Although the attributes are from the svg-namespace, the coordinates used are different.

Besides the visualization, automatically generated lecture material can be ac- companied with dynamic documentation in the form of notes for the lecturer to use when showing the animation. These can be things to point out, questions for the audience, and such. This makes it easier for the teacher to make the lecture more interactive.

