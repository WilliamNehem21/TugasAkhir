Substitution plays an important role in Hoare Logic, as it is used in interpreting assignments. When writing a computer-based realization of Hoare Logic, it is there- fore important to choose a good implementation for it. In this paper we compare different definitions and implementations of substitution in a logical framework, in an effort to maximize efficiency.

We start by defining substitution as a logical formula. In a conventional ap- proach, this is done by specifying the syntactic changes substitution performs on expressions. We choose instead a semantic definition that describes the behavioral relation between the original expression and its substituted counterpart.

where the notation [v/i]Q represents the substitution of all the (free) occur- rences of i by v in Q. Here, the semantic change of state is reflected syntac- tically by the notion of substitution. When implementing Hoare Logic in a logical framework, we will therefore be interested in implementing substitution efficiently.

In order to make the discussion easier to understand, we will fix the logic in which the formula Q is written. We adopt the one we used in our PCC applications, which is listed in the appendix. Although this is a higher-order calculus based on a polymorphically typed lambda calculus, it is important to stress that we never make use of type polymorphism in our presentation, and that the same techniques and results hold if applied to a different calculus, possibly even an untyped one.

