GATeL proposes a testing environment for Lustre/Scade programs. Its main component is a resolution procedure based on a CLP interpretation of its input language. This paper presents a two-tier extension of GATeL in order to take into account state-machines descriptions. This extension relies on a compilation of these constructs into multi-clocked expressions. Our first contribution is a definition of explicit constraints to manage the clock type hierarchy in GATeL. The second one is the definition of constraints reflecting properties of state-machines built by the Scade compilation schema.

The contribution of this paper is twofold: first, it describes an extension of GA- TeL for these new multi-clocked operators, then it proposes some improvements based on the compilation process to refine state-machine constraints. We first present the Lustre language and its associated notion of clocks in Section 2. A glimpse of the translation process between state-machines and a clocked program is then given. Section 3 introduces the basic mechanisms used in GATeL, then presents the major updates used for the clock extension. The next step is the defi- nition of specific state-machine deduction rules in Section 4. Finally, in Section 5,a case study based on a simplified Cruise Control model demonstrates the efficiency of our proposal compared to the first two solutions.

an enumerated type that represents the states (one enumerator per state). Three flows based on this type are created to carry out the dynamic semantics of the state- machine: at each cycle Sel identifies the state which can trigger strong transitions, Act the one which evaluates state bodies and may trigger weak transitions, and Nxt which defines the next selected state. In a state-machine without any strong transitions, we thus get Act=Sel; and reciprocally Act=N xt if no weak transition occurs. These three flows are automatically defined from the structure of the state- machine.

GATeL [3, 16] is a testing tool based on a dedicated resolution procedure. This procedure relies on an interpretation of Lustre operators through constraints pro- gramming. A first possible way to manage the clocked extension is to simulate the behaviour of when, merge, pre and -> by a combination of single-clock ex- isting ones. For instance, X when (Id, v) can be simulated by if Id=v then X else (def ault -> pre X), returning a def ault value when its clock has never been present and maintaining the previous value since the last occurrence of its clock. This simulation exactly matches the original expression on each instant of the clock (Id, v). However, as it will be illustrated in Section 5, the CLP interpretation of this simulation is less efficient than a direct interpretation of these operators.

This program P is used by the main component of GATeL: its resolution engine. The goal of this engine is to produce a matrix M whose rows are identifiers from Vars and columns are cycles. For each known cycle C, M(Id, C) stores the logical variable associated to Id whose domain is initialised according to its type. New cy- cles are created on demand by the resolution engine, extending M accordingly. As a standard CLP algorithm [14], the resolution engine alternates between deterministic

Rule INIT-T states that if the current cycle is the highest known one of the clock type cl and its status is init, then the filtering procedure applies on its first argument. Rule INIT-F is complementary: when the current cycle is smaller than CM (cl), this means that C is non initial. Therefore the filtering procedure applies on the second argument.

state (Act), and truth value is this state. An important point is that all these clocks appear at the same level of the clock hierarchy for a given state-machine. Moreover, the clock hierarchy contains as many levels as nested state-machines. The properties stated in Proposition 1 and 2 are thus widely used during derivations. We propose to strengthen these propositions in order to make a direct link between the transition function and the clock hierarchy. Given a state-machine (I, S, T ), where I is the initial cycle, S the set of states and T the transition function that defines allowed transitions from one state to another, the following property states that the highest known cycle and status of the initial state I are the same as those of its ancestor clock.

M. Indeed, the selected state cannot be set to a different state vjj since a transition would have already been fired between vjj and vj, violating thus the second major rule. We therefore propose to add to the system a dedicated constraint called sm relating these three variables at a given cycle. This constraint is managed by the VAR rules: it is launched each time a new cycle C is created for a clock type based on the active or the selected state. In these rules XC is a shortcut for M(X, C).

