Component-based software systems raise new problems for the testing community: the reuse of components suggests the possibility of reducing testing costs by reusing information about the quality of the software components. This paper addresses the problem of testing evolving soft- ware systems, i.e., systems obtained by modifying and/or substituting some of their components. The paper proposes a technique to automatically identify behavioral differences between different versions of the system, to deduce possible problems from inconsistent behaviors. The approach is based on the automatic distilling of invariants from in-field executions. The computed invariants are used to monitor the behavior of new components, and to reveal unexpected interactions. The event generated while monitoring system executions are presented to software engineers who can infer possible problems of the new versions.

Raz et al. use invariants computed by Daikon and by statistic algorithms to synthesize the behavior of data feed systems [16]. This approach is similar to BCT but it is based on a distributed setting where invariants are both computed and stored at the client side. BCT uses invariants with a very different perspective: to track evolution of both systems and components and are used to verify correctness of the actual implementation.

Early experimental results obtained by using invariants for detecting mis- matches between different versions of the Java Pet Store indicate that BCT can detect a wide range of faults. We plan to increase experimental data on BCT to gain evidence of the benefits provided by this technology. We are currently developing a tool suite for automatically applying BCT to large experimental software, and thus evaluate the difficulty of applying BCT to industrial scale systems, and clarify effectiveness, synergies and complementarities of faults detected by either interaction or I/O invariants.

