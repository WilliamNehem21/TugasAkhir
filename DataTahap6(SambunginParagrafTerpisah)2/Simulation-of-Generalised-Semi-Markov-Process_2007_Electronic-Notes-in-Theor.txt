Stochastic models like Generalised Semi-Markov Processes (cf. e.g. [13]) have a long history of application, but they do not provide primitives for modelling of concurrency aspects. They also lack mechanisms for compositional specification. Thus models of larger systems tend to be very complex.

There exist several formalisms for the analysis of performance and concurrency aspects. We will discuss briefly the most prominent of them. One of the first models used for this purpose were Stochastic Petri nets [8]. Generalized Stochastic Petri Nets found a wide acceptance (cf. [1]). Those nets are defined as usual Petri nets, with the addition of random assignment of a firing delay to each transition. There is a race condition between all enabled transitions. In the case of exponential prob- ability distributions, this model corresponds to Continuous Time Markov Chains (CTMC) [13]. Stochastic Petri nets proved to be very expressive. They are well suited for specification of concurrency aspects, but the resulting model is rather low level.

Process algebras provide compositional facilities for modelling of concurrent sys- tems. Stochastic process algebras are a natural extension of process algebras (cf. e.g. [12] and part two of [2]). They are used for performance modelling. As in the case of Stochastic Petri nets, a non-negative real number is randomly associated to an action. That number determines the delay of the corresponding action. While basic approaches rely on continuous-time Markov chains, there are also extensions to general distributions, based on Generalised Semi-Markov Processes and Stochastic Automata [2].

In this paper we propose Generalised Stochastic Graph Transformation Systems to model and analyse architectural evolution with non-exponential time distribu- tions. States of concurrent systems are modelled by graphs. Transitions of those systems are modelled by graph transformations. To model delays, we associate ar- bitrary continuous probability distributions with graph transformation rules. Graph transformation executions have delays, which adhere to those distributions. The model works as follows: a system state is modelled by a graph and the delay of rule application is measured by a separate timer. Different rules may be applicable, but only the rule with the smallest delay can be executed. If a rule is executed, then a new state is reached, timers corresponding to enabled rules are decreased, timers corresponding to disabled rules are removed, and new timers are set for rules which become enabled. Let us observe that graph transformation rules can be in conflict, and an application of one rule may disable application of another one.

This model is well suited for modelling of concurrency aspects, architectural aspects as well as stochastic aspects. It uses timed events to model the concurrent execution of events, thereby giving a direct representation of the intuitive idea that each event has its own timer and will be applied when its time expired, independent of other events. Our approach can be seen in the line of research combining high- level modelling techniques with stochastic analysis.

Stochastic modelling is only useful if there are analysis techniques to investigate the properties of the systems which are modelled. The more general a model- ling approach is, the more difficult is its analysis. Stochastic model checkers like PRISM [14] are very powerful tools for Markov Chains, but fail when more general stochastic processes are involved. Anyway, their power could not be fully exploited for stochastic graph transformation, because the complete state space of the model has to be generated first, before model checking tools can be used. This procedure emerged as a serious bottleneck, because the isomorphism checking involved is very complex. Even systems consisting of a small number of nodes and edges can lead to an enormous amount of states, a phenomenon known as state space explosion. When switching to arbitrary distributions, model checking itself becomes more complex [16].

The paper is organized as follows: The next section explains why it is necessary to use general distributions. Section 3 presents the underlying notion of Generalised Semi-Markov Processes. The new model called (Generalized) Stochastic Graph Transformation System and the corresponding stochastic process are defined in Section 4. Section 5 explains how Monte Carlo simulation techniques can be used in the case of stochastic graph transformation systems and presents some experimental results. Section 6 concludes this paper.

Generalising the notion of CTMCs to arbitrary distributions, there are two op- tions: Semi-Markov Chains [16] or Generalised Semi-Markov Processes. As dis- cussed above, semantic models of interleaving processes need to consider waiting times, which are not supported by Semi-Markov Chains. We therefore vote for the second alternative and adopt the following definition from [2].

The operational semantics of this model is defined by mapping a GSMP to a Stochastic Automaton [2]. Despite their more complex semantics, GSMPs are a direct generalisation of continuous-time Markov chains (CTMC). In fact, a GSMP in which all events are associated an exponential distribution is a CTMC. Because of the memoryless property of the exponential distribution, it is not necessary to consider how long an event has already been active, as the conditional probability

In this paper we use the single-pushout approach for graph transformation [19]. To make the new model more general, we define graphs in a categoric way instead of set theoretic one. Typed graph transformation is a technique of key relevance in the modelling of visual languages and in model transformation. The type graph can be defined in several ways and used for various purposes; in particular it can be defined as a colimit obtained in a graph unfolding process [3]. Types can be understood in particular as object IDs.

The intuitive idea of the semantics of a Stochastic Graph Transformation Sys- tem can be explained as follows. In the start state, all matches for all rules are determined and stored as pairs < rule, match >. We call such a pair a rule match. For each rule match the application time is set to a random number corresponding to the distribution the rule obeys. Then, the rule match with the smallest time is chosen, applied, and the remaining rule matches are checked. If their match is no more applicable, they are removed. If it is still applicable to the new graph (we will soon define this thoroughly), its time is reduced by the time that already elapsed. All new rule matches are computed and assigned a random application time. Then again, the fastest of them is chosen for application. So the waiting time of the events which lost the last race is considered.

The Event Scheduling Scheme proposed in [5, Sect. 10.2] provides a simulation algorithm for GSMPs. First, an initialisation procedure has to be performed: The state of the system is set to the initial state, the simulation time is set to 0. Random numbers t are determined for all events e active in the initial state, and the scheduled event list is initialised with them, with all entries sorted in increasing order according to their scheduled times.

Visual Modelling of stochastic graph transformation systems was done with the AGG graphical user interface. The additional information on the distribution asso- ciated with each rule was provided in a text based property file. Integration of this information into existing tools is an interesting issue as it would be more convenient for the user.

The main objective of stochastic simulation is to estimate quantities related to the modelled system by analysing the simulation results. Depending on whether we are interested in the long run behaviour of the system or in transient analysis, different simulation techniques have to be applied. We will shortly discuss both cases.

An interesting long run property of our network example is the proportion of unconnected peers. It is possible that a system converges to the steady-state when time progresses and can then be characterised by a discrete distribution over the state space. This is not always the case, e.g. when the number of nodes of a stochastic graph transformation system is not limited. However, we are in general not interested in the steady-state per se, but in the value of some function, such as for example the proportion of unconnected peers. These quantities may converge

With transient analysis, the simulation strategy is different. Consider for in- stance the probability that a peer which uses the network for 1 hour suffers discon- nection in this period of time. Here, it is not reasonable to extend the simulation time for more than 1 hour. One simulation run will only give one sample path, and estimates can be obtained by repeating the simulation with the same initial conditions, following the method of independent replications [5]. Statistical ana- lysis of the simulation results involves computation of confidence intervals, which is automised in the SSJ framework [15]. The number of simulation runs depends on the desired confidence level. Other transient properties can even involve the simulation time itself. For instance, the average time until an error occurs might be of interest. In this case, a simulation run is performed until an error state is reached, after that the next run is started. The number of runs depends again on the desired confidence interval.

The simulation algorithm involves computing all matches of rules to the current graph, and compare them to old matches, in order to compute the probabilities correctly. AGG provides an efficient graph pattern matching algorithm for calcu- lating a single match on the basis of a constraint satisfaction problem. For every match of the current graph, two conditions need to be checked: First, we have to check whether it is a new match. This can be done easily by comparing the unique

In this paper, we propose a new model of Stochastic Graph Transformation with general distributions. This model allows us to study a wider class of systems than the models based on exponential distribution. However analysis of those models is more complex than the restricted one. There are no powerful model checking techniques for Generalised Semi-Markov Processes. This can be partially remedied by Monte Carlo simulation techniques.

In the future we are going to implement a tool for stochastic graph transform- ation with general distributions. We are going to investigate to what extend data base management systems can be used for this purpose. Our goal is also to study more realistic examples. We will further investigate applicability of already existing simulation techniques to stochastic graph rewriting. On the other hand, we will develop a logic for specification of stochastic properties in SGT and investigate the possibilities of model checking. In many systems, there is a mix between stochastic and deterministic behaviour. We will therefore relate our model to Stochastic Auto- mata.

