The constructor calculus supports generic operations defined over arbitrary data types including abstract data types. This paper extends the basic constructor calculus to handle constructed locations. The resulting calculus is able to define a generic assignment operation that performs in-place whenever appropriate and allocates fresh memory otherwise. This approach may eliminate many of the space overheads associated with higher-order polymorphic languages. In combination with existing generic programming techniques it can express some very powerful algorithms such as the visitor pattern.

Three examples are used to illustrate some of the benefits of this approach. The insertionsort program shows how a space efficient program can be written using higher-order functions and pattern-matching. The program converge shows how to iterate a function while using space efficiently. The visitor pro- gram captures the visitor pattern [3] as a generic function of type

The structure of the rest of the paper is as follows. Section 2 recalls key aspects of the constructor calculus. Section 3 adds types of locations to the basic calculus with some primitive operations for their creation, reading and writing. Section 4 introduces constructed locations and the corresponding operations. Section 5 provides examples. Section 6 draws conclusions and considers future work.

The constructor calculus introduced in [5] was created to support the def- inition of generic functions like mapping and folding in which the types of parameters and return values can be instantiated for a variety of datatypes. The resultant definitions allow these functions to be able to act on a large class of datatypes. The work is further developed in [6] which explains any undefined notation used in this paper. The latter also showed how the key ideas could be demonstrated with respect to the Hindley-Milner type system, e.g. tuples of bits. Since it is unpleasant to expose these in the programming language we shall adopt a different approach, namely to introduce a new term form for each primitive data type, e.g. for the floating point numbers, one can have

The advantage of this approach is two-fold. First, one does not have to write nested patterns to represent departments, etc. Second, the visitor can be re-used after any change in the university structure, e.g. to create divisions, or on a totally different organisational structure.

primitives. This paper shows that the same approach can be applied to im- perative operations. That is, primitive operations for creating, reading from and writing to locations can underpin the definition of generic functions for these operations. The most striking advantage of this approach is that the generic assignment operation performs in-place update whenever reasonable, and allocates fresh memory otherwise. To our knowledge, this has not been achieved in other polymorphic languages.

