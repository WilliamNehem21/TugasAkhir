In this section, we review several computer arithmetics and, for each of them, we present how to synthesize expressions that can be evaluated efficiently. We start with our simpliest arithmetic which is the integer arithmetic. Then we discuss the cases of the floating-point and fixed-point arithmetics and, finally, we end this section by examining the case of interval arithmetic.

The floating-point arithmetic is defined by the IEEE754 Standard [1]. Floating- point numbers are used to encode real numbers. However, because they are finite representations of they mathematical cousins, roundoff errors arise during compu- tations and these approximations may, in some cases, significantly falsify the result of the evaluation. A floating-point number x is defined by

In the future, we would like to generalize our approach to pieces of code more complicated than simple arithmetic expressions. For example, F. Logozzo and T. Ball have worked on binary relations between integer expressions [10]. More gener- ally, we also aim at modifying control structures like conditionals and loops.

