According to Software Performance Engineering (SPE) practices [1], perfor- mance analysts doing Performance Testing are expected to enforce that the System Under Test (SUT) is executed in isolation and following a specific test plan accord- ing to a well-defined test objective [2,3]. Respecting SPE practices adds a layer of responsibilities, new roles (human resources such as performance analysts and similar capacities) invariably leading to additional costs, and also new risks to soft- ware projects. However, it is not always possible to follow SPE guidelines rigorously due to the low priority (or impossibility) that is associated with pure performance testing in software projects. In contrast, Functional Testing is considered more im- portant for stakeholders and thus, has a higher priority level. In software projects, one must balance the advantages of using SPE to devise responsive and performant applications in respect to the effort to be spent.

The remainder of this paper is organized as follows. Section 2 addresses software testing and performance testing generally. Our target application is explained on Section 3 as well as its architecture and internal operational details. In Section 4 we discuss stochastic modeling and the formalism known as Stochastic Automata Networks. Section 5 presents our model and an analysis of our results. Finally, in Section 6, we present our final considerations and future works.

Software Testing is a crucial task in current Information Technology (IT) orga- nizations because it helps ensuring the delivery of high quality products to end customers [5]. There are two aspects of testing that must be considered for every type of software project (small, medium and huge sizes), i.e., failure analysis (or functional software testing) and performance testing. Functional Software Testing (FST) is a process that follows a rigid set of rules allowing testers and developers to repeat error conditions and fix issues, hopefully, in a timely manner. The main interest of FST is to ensure if a functionality is producing the expected output for given input.

Performance Testing is an important component of Software Performance En- gineering (SPE) practices [1]. In contrast to FST, it is directed towards the non- functional aspects of systems, e.g., availability, security, reliability, responsiveness, among other attributes [6]. There are three major objectives to test the performance of an application:

The interest is to evaluate the quality of the product that is subjected for con- sideration. To test a given application in terms of performance, it is recommended to follow guidelines and principles according to a methodology. The methodology must relate to a precise objective, for instance, discover the major application bot- tleneck or assess the network impact on performance indices. It also describes the workload that must be characterized to assess the overall performance.

SLAs are high-level contracts established by stakeholders, e.g., service providers and customers. The main objective to set up an agreement stems from the need to guarantee that quality of service is present and ensured throughout a business rela- tion. Defining SLAs between interested parties helps the understanding of responsi- bilities and conditions to deliver performant services. SLAs relates to non-functional application testing since it helps devising a compromise in terms of expected quality of service.

When applications are fully tested for both functional and non-functional spec- ifications, they are ready to be deployed in a production environment. There is a huge research effort to characterize the behavior of applications and map to distri- butions in order to enhance the comprehension of how the system will behave under certain conditions, anticipating and efficiently reacting to problems. Next section discusses related works regarding stochastic models of multi-tier architectures and also some approaches where SLAs are under consideration.

SLAs were discussed in seminal works regarding Service Oriented Computing [7,8,9,10]. Dealing with SLAs and cost models associated with contracts was researched by several authors in a recent past. Ashok et al. [11] investigated location-aware SLA contracts and quality of service measurements whereas Liu et al. [12] build a cost model to analyze the impact of SLA to maximize profit. Cost models for SLAs are

The research presented here distinguishes itself from related works from previous authors on the description and analysis of a stochastic model specially tailored for applications under performance testing subjected to external workloads and observance of SLAs. It is important to map the amount of external influence or unknown workloads to predict if the contract established by the service agreement will not be met. Case the time to complete jobs in the main load balance servers is taking a time that is superior to the threshold computed by our stochastic model, given the external load, it indicates that the SLAs will probably never be met. It is reasonable to consider that external influences are the main cause for the test fail, not because of some bottleneck problem. After some time or if the main server experiences less amount of loads, one could restart the Performance Testing process and resume SUT operation.

In fact, the bottleneck for such types of environments is directed towards the main server acting as a dispatcher that distributes the workload among the re- maining servers. As stated before, after the transactions pass this server, they are executed in a clean and dedicated environment, where more reliable usage statistics are enabled. Thus, it is possible to populate a stochastic model with parameters measured after the transaction passed the main server. One clear advantage of such stochastic models is the possibility of computing the average time necessary to pro- cess a given transaction, using the SLA deadline to calculate the available time that can be spent in the main server. An online monitoring tool could keep observing the process that are under execution in the main server and decide whether or not the SLA will be met. If a break of contract is imminent, one could stop the perfor- mance test and resume afterwards, to continue searching for application bottlenecks or some other performance testing objective.

Once the transaction is successfully processed by PRF01 and routed to PRF02 or PRF03, the execution becomes dedicated for the SUT. All three web servers run on a Pentium IV 2.66GHz machines with 16 GBytes of RAM, dualcore, running WebLogic 8.1 as application server and Windows 2003 Server Edition. The DBMS runs on a Pentium IV 3.2GHz, quadcore, with the same amount of RAM and run- ning Linux RedHat Enterprise Edition and Oracle 10i with dedicated execution. Transactions that disrespects the SLA are stored for counting reasons (for subse- quent quality assurance purposes) and exits the system. Ideally, no transaction ought to pass the higher limit of the agreement ensuring high QoS to the system and certainty that every transaction runs below specified thresholds.

The measurements ruled out the network as an application bottleneck since every server is present in the same environment and the monitoring tool was able to attest that the system was robust and healthy for the totality of the test plan execution. The critical aspect of the architecture is towards the PRF01 server since it encompasses every demand for every application that is running. Since the SLA must comply with a set of rules, our main strategy is to divide the system into two distinct blocks and analyze them separately, in order to isolate our problem into more manageable pieces.

processes). Occasionally, a process is loaded to memory and remains executing in- definitely. This can be mitigated by a soft reset (only a few processes are destroyed) or, more extremely, a hard reset (the whole machine is reinitialized). In production, the same problems related to server instabilities may or may not appear, depending on the execution profile. Since we are testing the application in the most problem- atic situation, our effort in this work will present a worst case scenario analysis.

For this particular problem, one could model the reality choosing standard Queueing Networks (QN) [21,22]. QN is a very powerful formalism to model systems and ex- tract performance indices such as average state permanence probabilities, transient behavior or scalability analysis [23]. It has been used in the past in many appli- cations with significant results, from economic models to distributed computing. However, our reality implements a unique behavior to balance transaction routing that is hard, if not impossible, to model with QNs. The problem under analysis needs a more sophisticated manner to convey the fact that transactions are routed following patterns that must know the apparent load within each server.

SAN is used to model realities where parallel and synchronizing behavior (re- source sharing, for instance) is expected to occur. It is specially suited for dis- tributed systems but can be applied to several application domains. It has been successfully used to extract useful performance indices of Global Software Develop- ment realities [29], Non-Uniform Memory Access architectures [30], Master/Slave parallel computing platforms [31] and Mobility patterns [32] to name a few. In a mathematical point of view, SAN uses Tensor Algebra properties to compute the probability vector that withholds the performance indices. It basically multiplies a vector by a non-trivial structure called a Markovian Descriptor, i.e., a list of small sized matrices that captures the occurrence of every event present in a given model. These matrices are operated with tensor sums for local events and tensor products for synchronizing behavior. One of the greatest advantages of using SAN to rep- resent and solve stochastic models is due to its power of description and efficient storage mechanism.

This section presents how we calculate the time needed to process the Phase II, i.e., the total response time for this phase (TphaseII ). The main idea is to profit from the isolation of the application and database servers in terms of execution. Once the transaction arrives in this phase, it is processed in dedication with full use of available processing power and memory. We are assuming the servers with a high level of stability, i.e., needing system restorations and management operations only occasionally.

In this paper, once the main application server routes transactions forward, we assume that on the worst case scenario a maximum theoretic value for the response time of precisely 8.8 seconds, i.e., we assume the worst case scenario, TphaseII = 8.8 seconds. This value will be used to derive the final SLA time needed to complete the transaction.

We proceed our analysis on studying the response time for Phase I (TphaseI ). The model presented here was described by a SAN instead of a QN because our reality has several different behaviors that must be captured in terms of external influence modeling. Next, in Section 5.2.1 we explain our stochastic model in detail and its results are presented in Section 5.2.2.

We conducted several performance tests and monitored important resources such as Processor Time and Available Memory (only to name a few) for all application servers and the database servers. We used LoadRunner as the main tool to perform the load testing procedure on our SUT, where the verified throughput (X) was 50 TPS. Following a methodology, our performance testing objective was to verify that at least 90% of the total number of transactions were being met by the SLA.

For the rest of our analyzed case scenarios where we varied the workload inten- sity, we were able to compute response times within the available SLA time, i.e., cases where the external application influence over service time enables meeting the time constraint. Our stochastic model was able to help us understand the fact that depending on the application execution profile we can anticipate if the response time for our SUT will fall under the SLA threshold. This is very interesting because the model could forecast, for instance, the unfavorable or advantageous conditions present on the environment to allow the execution of performance testing. Case such conditions are causing external delays, it is safe to conclude that it is not our

The present work proposed stochastic models and SLA assurance applied in the context of multi-tier web services with external workloads. There is an increasing interest for practical applications of stochastic modeling for performance evaluation. We modeled the reality and performed a worst case scenario analysis to verify if the contracts between users and service providers were being respected. Our performance indices computations presented means to decide if the SLA would be executed below its deadline and the impact of external workloads in this time.

As future works, we consider applying the same model ideas for busy envi- ronments with more intense workload variation. Such work may demand a deeper analysis of stochastic distributions leading to the extensions of the model to consider more complex distributions. One option is the inclusion of phase-type transitions to approach some non-exponential phenomena like timeouts. In this case, some prior studies on phase-type representation for SAN formalism [38] could be used.

In another interesting future work we could also develop and install a daemon with both a stochastic model and a numerical solver (e.g., GTAexpress [33] or similar) in the application servers of interest to monitor the execution and self- parameterize a model with the obtained data to decide whether or not the SLA will be met in a timely fashion. This research will allow decision makers to stop the execution of some external workloads or to control the incidence of external applications that are allowed to run. This will undoubtedly help to assure a higher level of availability to the web service, avoiding economical losses and ensuring user satisfaction.

The authors thank Dr. Alberto Avritzer from Siemens Corporate Research (SCR), Princeton/NJ/USA, for insightful discussions that led to the elaboration of this paper and the Performance Testing Research Team, a collaboration between the Faculty of Informatics at PUCRS and Dell Brazil. This work has also support from FAPERGS/CNPq.

