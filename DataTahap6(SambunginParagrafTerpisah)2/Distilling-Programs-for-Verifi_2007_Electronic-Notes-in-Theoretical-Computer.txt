In this paper, we show how our program transformation algorithm called distillation can not only be used for the optimisation of programs, but can also be used to facilitate program verification. Using the distillation algorithm, programs are transformed into a specialised form in which functions are tail recursive, and very few intermediate structures are created. We then show how properties of this specialised form of program can be easily verified by the application of inductive proof rules. We therefore argue that the distillation algorithm is an ideal candidate for inclusion within compilers as it facilitates the two goals of program optimization and verification.

The programs resulting from distillation are in a specialised form in which func- tions are tail recursive and very few intermediate structures are created. We show that this specialised form is very amenable to the automatic verification of prop- erties of programs through the application of inductive proof rules. We therefore argue that the distillation algorithm is an ideal candidate for inclusion within a compiler as it enables both powerful optimization and program verification.

Each constructor has a fixed arity; for example Nil has arity 0 and Cons has arity 2. We allow the usual notation [] for Nil , x : xs for Cons x xs and [x1,... , xn] for Cons x1 ... (Cons xn Nil ). We also allow the notation 0 for Zero,1 for Succ Zero and n +1 for Succ n.

In this section, we give an overview of the distillation algorithm; full details of the algorithm can be found in [5]. The distillation algorithm is a significant advance over the supercompilation algorithm. Using the supercompilation algorithm, it is only possible to obtain a linear improvement in the run-time performance of programs; with distillation it is possible to produce a superlinear improvement.

If the transformation rules presented so far were left unsupervised, non-termination could arise, even in the presence of folding. This non-termination will always in- volve encountering expressions which are embeddings of previously encountered ex- pressions. We therefore allow transformation to continue until an embedding of a previously encountered term is encountered within the current one, at which point generalization is performed to ensure termination of the transformation process.

The first of these rewrite rules is for the case where both expressions have the same functor at the outermost level. In this case, this is made the outermost func- tor of the resulting generalized expression, and this functor is removed from each of the two expressions. The second rule identifies common sub-expressions within an expression. The results of applying this most specific generalization to items 1-4 in Example 3.11 are as follows:

When we encounter an expression e which is an embedding of a previously encoun- tered expression e', we calculate the most specific generalization of e and e'. If the redex of this most specific generalization is a variable, then the partial process subtree rooted at e is replaced by the result of transforming the generalized form of e. Otherwise, the partial process subtree rooted at e' is replaced by the result of transforming the generalized form of e'. The generalized forms of these expressions are constructed using the abstract operation.

These rules can be explained as follows. In rule (1), if we encounter a variable, the value False is returned, as this is one possible value of this variable (it must be a boolean). In rule (2), if we encounter a constructor, then we return the value of this constructor (again, this must be a boolean). In rule (3), if we encounter a let expression, then we need to apply the proof rules to all the sub-terms within this expression to show that they are all true. In rule (4), if we encounter a case expression, we need to apply the proof rules to all the branches of the case to show that they are all true. In rule (5), if we encounter a letrec expression, we add the

It is possible that overgeneralization can occur, thus turning a theorem into a non-theorem (but not the converse). This means that our theorem prover may determine that a correct program is not actually correct. However, if our theorem prover determines that a program is correct, then this is definitely the case.

In this paper, we have presented a novel transformation algorithm called distil- lation, which can produce a superlinear speedup in programs. This represents a major advance over existing unfold/fold transformation techniques, which can only produce a linear improvement. We have shown that, not only is distillation useful for performing program optimization, it also facilitates the relatively straightfor- ward verification of the resulting programs. We therefore argue that the distillation algorithm is an ideal candidate for inclusion within a compiler as it enables both powerful optimization and program verification.

