The idea of abstraction is to check a smaller finite-state system instead of the original one. If the smaller system provides more computations, compris- ing those of the original one, every linear temporal logic property it satisfies, also holds for the original system. For branching-time logics, similar ideas work if we restrict the logic to a universal fragment [6]. Abstractions of original sys- tems may either be found manually or using ideas of abstract interpretation. In the first case, one has to prove that the abstract system indeed comprises all computations of the original one. Basic principles underlying the construction of abstract models are understood from e.g., [8,7,9].

Systems similar to our timed transition structures have been studied in [15]. The approach is based on automatic abstraction, but is limited to checking safety properties of timed systems with integer time domain. A different approach for studying parameterized systems is presented in [2] and [3]. It is based on finite symbolic representation of infinite sets of states and computing pre-images and convergence. It was shown that reachability for such systems is decidable if each process has a single clock. Our method is also applicable for verifying liveness properties of systems with an arbitrary number of clocks.

Since we develop our theory in the setting of LTL, our notion of abstraction is based on set inclusion of computations. When considering branching-time logics, simulation becomes natural for defining abstraction. This approach was studied for timed systems [18] and it was shown that simulation is decidable.

the syntax and semantics of LTL (in the timed setting). In Section 4 we develop the verification scheme using network invariants, we define discretiza- tion of timed transition systems and prove that our discretization is correct with respect to LTL properties. We illustrate our approach in Section 5. We conclude the paper by summing-up our results.

In this section, we define the concept of network invariants for parameterized systems built-up from timed transition structures. We reduce the problem to model checking certain formulas of the superposition of two timed transition structures. For the latter, we show how to construct discretized systems that can be checked using a standard LTL model checker.

In this subsection we associate to a timed transition structure a finite state transition system satisfying the same linear-time properties. This allows us to use LTL model checkers for finite-state machines for analyzing timed tran- sition structures. We use the discretization given in [10] and [5], though our presentation is different.

Note that there are different versions for discretizing a timed-transition structure. We found this one, however, easy to realize in verification tools like TLV. Given a timed transition structure, one can define tick -transitions con- sisting of adding time with possible adjustment in a straightforward manner.

States 5, 6, and 7 are added to show an example of the hidden dependencies between clocks. State 7 is only reachable if another process in parallel sets d = 4 (by moving from 5 to 6), enabling the guard of the current process to move from 5 to 7). However, since clocks increment simultaneously, this cannot happen, as we will prove.

