Modern software is increasingly concurrent, timed, distributed, and therefore, non-deterministic. While it is well known that tests can be generated as LTL or CTL model checker counterexamples, we argue that non-determinism creates difficulties that need to be resolved and propose test generation methods to overcome them. The proposed methods rely on fault modeling by mutation and use conventional (closed) and modular (open) model checkers.

Test generation from deterministic specifications using verification techniques and tools is a well-known approach. It is suggested by [44] and refined by several authors, e.g., [13], [37], [8], [34], [36], [25], [20]. However, modern systems are non-deterministic due to asynchrony, concurrency, multithreading, timing issues, non-observable or non-controllable elements. Moreover, even if an implementation under test (IUT) itself can be regarded as deterministic, in a model or specification, non-determinism may occur due to incompleteness of knowledge of implementation choices, limitations of a modeling language, and abstractions. Conservative model abstraction is widely used to reduce complexity (state space) or to remove con- structs, which are difficult for simulation and verification (e.g., time aspects [1]). In declarative object oriented conceptual modeling, non-determinism allows to better reflect inherent non-determinism of the domain, reduce complexity, and achieve a better separation of concerns [4]. The problem of coping with non-determinism is a long-standing one in protocol testing [10], [16], [17], [18], [19], [21], [35].

a connection between the two types of testing. In fact, to kill (detect) a mutant obtained simply by mutating an output, a test that covers the affected transition (or, in the case of Moore machines or Kripke structures, a state) is necessary and at the same time sufficient. The problem of finding mutant-killing tests can be reduced to the problem of reaching states of a module composed of a specification and faulty sub-modules which satisfy a given property. This approach could be used to derive tests that combine specification coverage and fault propagation [36], [6]. However, those interested in coverage based techniques could find extensive literature elab- orating usage of model checking tools for particular data or control flow coverage criteria, such as [13], [24], [39], [14].

For FSM, deterministic as well as non-deterministic, test generation is a well studied theoretical problem, e.g., [22], [38], [35], [1]. However, methods developed for classical FSM are rarely applied for real size specifications due to state explosion problem. The current trend is to use model checking [12] technology, which embraces various sophisticated optimization techniques to cope with state explosion problem, such as BDD, partial orders, and SAT.

The paper is organized as follows. The next section introduces necessary defi- nitions of test, module, model checking, and module checking. Section 3 discusses test generation from a counterexample derived by model or module checking in the presence of non-determinism. Section 4 discusses how our results apply to the case of multiple mutants. In Section 5, we briefly discuss some related work and conclude in Section 6.

notion of a module, which could be seen as a Kripke structure with a partition of atomic propositions onto input, output, and internal (hidden) [27]. In Mealy machines, differently from Kripke structures, the labels are assigned to transitions and not to states. In some cases, Mealy machines allow for more intuitive and compact specifications than Kripke structures, especially in the black-box testing context. However, our choice is motivated by the fact that temporal logics, used in model checking, are traditionally defined over Kripke structures. As we later show, the input-output behavior of a module could be modeled by a Mealy machine. In the presence of hidden variables, the model of extended finite state machine [36] could be used to obtain a compact representation of the module.

Input i is enabled in the state w if w has at least one successor state s with input Inp(s) = i. Otherwise, input is disabled. A module is input enabled (completely defined) if each input labels an initial state and is enabled in every state. In this

At the same time, we discuss possible use of more traditional and widespread LTL or CTL model checking techniques for simpler cases of the most general prob- lem. Moreover, we show that candidate test verification and, hence, incremental test derivation is possible for non-deterministic specifications and mutants. Yet, we doubt that one could use conventional LTL or (non-modular) CTL model checking technique to derive strong test or decide its existence without significant computa- tional efforts on the model transformation. An exponential growth of the size of the system or property being model checked is expected. Indeed, the complexity of CTL model checking is linear in terms of state space, while finding strong tests is PSpace-complete.

For most of complete model checking algorithms and tools, which compose mod- ules prior to property analysis, replacing M' by Obs(M ) may somewhat reduce space state, but the gain is relatively small for on-the-fly model checking, when only a frag- ment of the composition, which is relevant to the property, is usually constructed. An incremental generation of a strong test can be performed by consecutive verifi- cation of all candidates of a given length. If the state number of modules is finite, an upper bound of the test is known [1]. Technically, it is possible to define a mod- ule that consecutively tries all possible test candidates of the given length. Such approach could be faster than model checking multiple systems, but we do not see how it could be organized efficiently in the terms of the memory consumption.

first mutant should start with i = 1. Similarly, any strong test for the specification and the second mutant should start with i = 0. Thus, there is no single test for the specification and both mutants at the same time.

