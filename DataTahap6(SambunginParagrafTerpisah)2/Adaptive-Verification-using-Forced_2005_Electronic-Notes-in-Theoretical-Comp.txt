Formal verification techniques are being widely applied in the design, de- velopment and validation of reactive systems such as digital hardware and hardware-software embedded systems [18,11], [4,14,17]. Formal methods use precise syntax and semantics for defining specifications and models of systems so that rigorous verification of properties such as correctness, reliability and security is made possible. Model checking [4] is an automatic formal verifica- tion technique to check if a model of a design (M) satisfies a given property (a function F ) using reachability analysis over the state space of M. Model checking has become very appealing for automated verification due to initial state space reduction techniques like symbolic model checking [2] and more recently approaches using SAT solvers for bounded model checking [1]. The detection of a property failing over a model is a cause for concern as a model checker usually only produces some counter examples and the designer has to manually debug the model prior to attempting another cycle of model check- ing. Hence, approaches to automated debugging is of considerable interest to the community [6,7].

Automatic debugging of the first type of errors is extremely difficult, if not impossible. Approaches for debugging the second type of errors have been recently developed. Adaptive model checking [6] addresses the issue of a model checker providing false negatives due to modelling inconsistencies. Another approach debugs the design of a concurrent system using temporal logic formulas to control the stepping between system states [7]. In this paper we are primarily concerned with the third type of errors which are introduced

Weak satisfaction makes forced transitions in the model internal in the composite process. In the current adaptation algorithm, states that are not present in the specification may be forced by the modifier in order to make the model satisfy the desired specification. Obviously, if we extend such adapta- tion technique to model checking, then forcing needs to be restricted so that bad states (states that may cause critical failure of the property) should not be forced. Hence, forced simulation needs to be modified to include the handling of certain states which are not forceable.

A model M and a specification F are extracted from SMV (symbolic model checker) language files. The extraction algorithm is incorporated in the popular NuSMV model checker [3] written in C programming lan- guage. The extraction algorithm performs a breadth-first search starting from the root (or initial) node(s) of a SMV file. The explicit details of each state traversed (labelling, transitions etc) are written to an out- put text-file. These output files are then used as inputs in the forced simulation algorithm.

In some cases, such as the alternating bit protocol and the batch reactor system, a subset of the actual number of states in the original NuSMV de- scription of the given model was used for debugging. In many cases, such as the mutual exclusion and pipeline examples, models were debugged to sat- isfy given fairness constraints. In other cases, such as the producer-consumer and priority queue examples, priority-based specifications were used to debug models to give priority to a certain sub-process. Most of the debugging show how a general model can be debugged to satisfy a more specific specification.

Existing formal methods can comprehensively detect inconsistencies between a given model and specification. However, the detection of such inconsistencies is followed by manual debugging of the model to satisfy the given specification. This manual debugging may be time consuming and the process of verifying and debugging might be repeated more than once. Therefore, automated design debugging in case of a failure to satisfy critical specifications is of great interest. This paper proposes a formal technique for automated model debugging. Given a model M and a failed specification F , the proposed technique can determine whether M can be automatically adapted to satisfy

F . A model can be automatically debugged if it is related to the specification over a weaker simulation relation called forced simulation presented in this paper. The existence of forced simulation has been proved to be the necessary and sufficient condition for the proposed debugging. If M is forced similar to F , the debugging algorithm automatically generates a modifier D which is guaranteed to adapt M (in the form of D//M) to satisfy F .

