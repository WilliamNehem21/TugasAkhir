We show that, in a fairly general setting including higher-types, may, must and probabilistic testing are semi- decidable. The case of must testing is perhaps surprising, as its mathematical definition involves universal quantification over the infinity of possible outcomes of a non-deterministic program. The other two involve existential quantification and integration. We also perform first steps towards the semi-decidability of similar tests under the simultaneous presence of non-deterministic and probabilistic choice.

We consider a non-deterministic higher-type language, in the style of PCF [38,32,17], which includes angelic, demonic and probabilistic choice. The types are closed under finite products and function spaces, and certain powertype constructors, interpreted as powerdomain monads, which capture various kinds of non-determinism. Choices can only be performed at powertypes, and the different powertypes have different operational interpretations of choice.

We show that (i) may, (ii) must and (iii) probabilistic testing are semi-decidable for this language. The idea is that, given a semi-decidable property u, one can semi-decide whether a given non-deterministic program (i) has some outcome sat- isfying u, (ii) has all outcomes satisfying u, and (iii) has all outcomes satisfying u with probability bigger than a given number. The proofs exploit recent results on exhaustible sets in higher-type computation [13,8], and older results on exact computability and definability of integrals in PCF-like languages [6,41,39].

We also perform first steps towards the semi-decidability of similar tests under the simultaneous presence of probabilistic choice and non-deterministic choice [29,46,47]. We develop semi-decision procedures for this, but their correctness is a conjecture and their scope is open (Section 7.4).

We consider a language with a type system that makes an explicit distinction be- tween deterministic and various kinds of non-deterministic types. Any term of deterministic type has only one outcome, including the possibility of divergence. A term of non-deterministic type has one or more runs, in general continuum many, each of which either produces a single outcome, again including the possibility of divergence, but different convergent runs may produce different outcomes. We take the ground types to be deterministic, and the product- and function-type construc- tions to preserve determinism.

(u)(N ) = T if and only u(x) = T for all outcomes x of runs of N . This is made precise later, when we consider the (operational and denotational) semantics of the language. The idea for the Hoare and Smyth powertypes is the same, but only one kind of test is made available for each of them, as discussed above.

The idea is to reduce may, must and probabilistic testing in MMP to quantifi- cation and integration in PCF + S + I. In principle, as discussed in Section 5.1, the quantifications and integrations are over sets of possible outcomes. For the trans- lation, we further reduce them to quantifications and uniform integrations over the Cantor space in Section 5.3, and Section 5.1 is intended as a motivation for this, which anticipates the denotational semantics given in Section 6 below.

That is, we split the scheduler into two schedulers and pass each one to a different subcomputation. In the target language, the monad laws fail for the translations (both denotationally and operationally), but they will hold modulo the appropriate notion of testing. The strength is translated in a similar, mechanical, manner.

For the Hoare powerdomain, the abstract description given in Section 6.1 al- ways agrees with the concrete one given in Section 6.2 (see [35]). But for the Smyth, Plotkin and probabilistic powerdomains, the two descriptions agree only for continuous domains [35,26,2]. However, not all continuous domains are closed under function spaces and the Plotkin powerdomain, as is also well known, and there is no known cartesian closed category of continuous domains closed under the proba- bilistic powerdomain [27]. Hence we cannot expect all the types of our language to have continuous interpretations, unless further progress is made in domain theory.

Remark 6.3 These and similar issues led the authors of [4] to propose an alterna- tive form of domain theory, called topological domain theory, that would overcome these and other kinds of obstacles in semantics. We plan to investigate its use to the resolution of the problems explained here, but, for the moment, we establish very general, albeit partial, results using classical domain theory.

Proof The ground types are continuous Scott domains. Continuous Scott domains are RSFP domains, and RSFP domains are continuous domains [2]. Plotkin showed that the category RSFP is cartesian closed, and closed under the Plotkin power- domain [2]. Scott showed that the continuous Scott domains are densely injective spaces, and the densely injective spaces are an exponential ideal [16]. Schalk showed that the continuous dcpos are closed under the Hoare and Smyth powerdomains, and it is immediate that they are bounded complete [35]. Jones showed that the continuous domains are closed under the probabilistic powerdomain [26].

A number of authors have considered powerdomains that simultaneously account for probability and non-determinism [29,46,47]. Here we discuss first steps in this direction, closely following the ideas of [46]. A major difference is that this reference considers non-negative real-valued valuations rather than unit-interval valued valu- ations with total mass 1. To prove the correctness of the semi-decision procedures discussed here, we would need a theory based on the latter.

