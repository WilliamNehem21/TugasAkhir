Interaction nets [14] are graph rewrite systems in which all the computation steps are explicit and expressed in the same formalism (there is no external ma- chinery). This facilitates the analysis of cost of computation and the comparison between different evaluation strategies implemented as interaction nets. Also, since reduction in interaction nets is local and strongly confluent, reductions can take place in any order, even in parallel (see [21]), which makes this formalism well-suited for the implementation of programming languages and rewriting systems [8,7].

This paper is organised as follows: after recalling the main notions of interaction nets (Section 2), in Section 3 we define a minimalistic functional language with a case construct and recursion. The compilation into interaction nets is given in Section 4. Finally, we conclude in Section 5.

Intuitively, a net N is a graph (not necessarily connected) with agents at the vertices and each edge connecting at most two ports. The ports that are not con- nected are free. There are two special instances of a net: a wiring (no agents) and the empty net; the extremes of wirings are also called free ports. The interface of a net is its set of free ports.

We will not impose a strategy of evaluation yet, but note that since the rewrite rules are left-linear and non-overlapping (that is, they define an orthogonal system [13]), the language is confluent. It is easy to see that it is not terminating, due to the presence of recursion. We assume a strict matching semantics, as in ML (i.e., an application of a function to an argument that is not covered by the case definition will produce a runtime error).

