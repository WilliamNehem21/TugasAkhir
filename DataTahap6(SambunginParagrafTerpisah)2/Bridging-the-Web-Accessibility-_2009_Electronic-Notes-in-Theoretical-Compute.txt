The Web has become an indispensable source of information and we use it more and more in our daily activities. The primary mode of interaction with the Web is via graphical browsers, which are designed for visual interaction. However, most Web pages contain banners, ads, navigation bars, and other data distracting us from the information. As we browse the Web, we have to filter through a lot of irrelevant data. This is straightforward for sighted individuals, who can process visual data in no time at all and can quickly locate the information that is most relevant to them.

Context-directed browsing. The identification of relevant information on any distinct Web page is subjective. However, as soon as the user follows a link, it is often possible to use the context of the link to determine the relevant information on the next page and present it to the user first.

Dynamo. To unify different types of content changes and make dynamic content accessible to blind web users, we developed Dynamo, the system that treats web page updates uniformly. Its methods encompass both web updates enabled through dynamic content and scripting, and updates resulting from static page refreshes, form submissions, and template-based web sites.

Model-directed transactions. Non-visual web transactions can be facilitated by giving the users a way to quickly access the most relevant concepts at any step of the transaction. We used a process model to direct Web transactions. The model was represented by a finite state automaton where each state corresponded to a web page with concepts, and the edges were the actions leading to those states. When a transaction was in a particular state, the most relevant concepts would be identified, extracted, and presented to the user.

The rest of this paper is organized as follows: In Section 2, we describe the architecture of the system. In Section 3 we describe our approaches to bridging the web accessibility divide. Related work appears in Section 4, followed by concluding remarks in Section 5. The details of experimental setup and user evaluations can be found in our papers [3,9,6].

The Dialog Generator module generates VoiceXML dialogs for page naviga- tion. A separate functionality is provided through Dialog Interpreter to quickly switch between the segments with concept instances. The dialogs are then delivered to the User Interface Manager, and, once the user chooses an action, the process is repeated.

We use an observation that semantically related information exhibits spatial locality and often shares the same alignment on a Web page. Since a DOM tree represents the layout of a Web page, we infer that geometrical alignment of nodes may imply semantic relationship between their respective content. If all descendants of a node are consistently aligned either along X or Y axes, we call such a node consistent.

We consider two multisets to be similar if their cosine similarity is above a threshold. We have statistically computed the threshold (See [3] for details) that best determines whether a topic changes between the Context and the SText multi- sets. If the cosine similarity between the multisets is above the threshold, i.e. topic boundary is not detected, the multi-sets are merged. Otherwise, we stop expanding the context window in that direction. The details appear in [3].

The machine-learned SVM model is now used to predict the relevance of a given block with respect to some context. Given a set of blocks B1, B2, ..., Bm we compute the feature values for each block by matching the context against the text in the block. Next, we use the learned SVM model to label the blocks as either relevant or

Regardless of whether web sites are implemented using dynamic or static ap- proaches, users browsing for information usually care only about the information that changed as a result of their actions. For example, we could use web browser APIs to detect that a new dynamic tab has become visible, or that an incorrectly filled form element was highlighted red. People will care about what information has changed. By the same token, we could use some Diff algorithm to compare previous and current pages, and identify that static tabs are a part of the page design, or that the error message in the refreshed web form is the only difference. Again, people care about the information that changed, so that they can get their information, complete their task, and move on.

HD is built on the existing Hearsay non-visual web browser. HearSay uses a Firefox-extension to communicate with a Java backend. The HD backend processes all events sent to it by the Firefox extension, pushes new web content through the pipeline of various analytic algorithms, generates VoiceXML dialogs, and manages the user interface through the vxmlSurfer - a custom VoiceXML interpreter.

Our Diff Algorithm combines the maps and performs a bipartite matching to find out the matching nodes and makes a list of them. Later we use the max flow routine to find the maximum number of matches. And the rest of them are considered as different nodes.

Herein we describe the content analyzer module that extracts the relevant concepts. In a nutshell this is achieved by partitioning a Web page into segments of seman- tically related items and classifying them against concepts in the ontology. Below we provide an overview.

Web page partitioning techniques have been used for content adaptation [23,24] and content caching [25]. VIPS [26] algorithm uses visual cues to partition a Web page into geometric segments. This algorithm is used in [27], where the segments are described by a set of features (e.g. spatial features, number of images, sizes, links, etc.). The feature values are then fed into an SVM, which labels the segments according to their importance.

w.r.t. the context of the link in the source page. In contrast to [27], where the SVM model was learned using features only from the content of Web page segment, our SVM model uses a feature set, computed from both the context of the link and the content of the block.

The notion of context has been used in different areas of Computer Science research. For example, [28] defines context of a Web page as a collection of text, gathered around the links in other pages pointing to that Web page. The context is then used to obtain a summary of the page. Summarization using context is also explored by the InCommonSense system [29], where search engine results are summarized to generate text snippets.

The use of contextual information for non-visual Web access is not a well-studied problem. A technique resulting from early efforts at context analysis for non-visual Web access is described in [30], where context of a link is used to get the preview of the next Web page, so that visually disabled individuals could choose whether or not they should follow the link. This idea is used in AcceSS system [31], to get the preview of the entire page. However, presenting a preview does not guarantee the reduction of browsing time.

In this paper, we described three techniques for bridging the web accessibility di- vide between sighted and visually impaired users. First, we described the design of context-directed browsing approach, which uses Web page partitioning and tech- niques from NLP and Machine Learning. Using our system, visually impaired indi- viduals can potentially imitate the browsing behavior of sighted users, saving their time on not listening to irrelevant information. Contextual browsing also has im- plications for handheld devices with small screens. We implemented context-direct browsing algorithm to identify and display the most relevant sections of Web pages on small-screen handhelds [48].

We also described the Dynamo approach to making dynamic web content acces- sible and web page updates usable, a problem whose importance, spurred by the advent of Web 2.0, has been continually growing. User studies with the HearSay- Dynamo system indicated that using the system improved disability to web page updates. This initial work has opened up several avenues for improving HearSay implementation and conducting additional research. First, the participants sug- gested several improvements to the user interface that can be explored to optimize the user experience. Second, although HearSay can detect web page updates, many participants wanted to know the semantic roles of those updates. A collaborative approach could leverage a community of users to label content and share the labels among themselves. We believe these goals can build on the foundation outlined here and make dynamic content efficiently accessible to blind web users.

Finally, we talked about our process modeling for directing Web transactions. We showed that, by delivering relevant page fragments at each transactional step, a model-directed web transaction (i.e. process model) can improve Web accessibility and substantially reduce the digital divide between sighted and blind users.

We would like to thank NSF (Award IIS-0534419, CNS 0751083 and IIS 0808678), Sigma Xi (Award G20071013028487872), and CEWIT (http://www.cewit.org/) for supporting this research, and Cepstral.com for donating their realistic synthetic voices. We are grateful to the Helen Keller Services for the Blind for providing their invaluable feedback. And, finally, we would like to thank our developers for their dedication in implementing the HearSay browser.

