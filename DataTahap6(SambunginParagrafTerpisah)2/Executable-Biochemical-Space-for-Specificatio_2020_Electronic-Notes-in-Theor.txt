We present the second generation of a rule-based language called Biochemical Space Language (BCSL) that combines the advantages of different approaches and thus makes an effort to overcome several problems with existing solutions. The key aspect of the language is the level of abstraction it uses, which allows scalable and compact hierarchical specification of biochemical entities. This abstraction enables unique analysis techniques to reason about properties of models written in the language on the semantic and syntactic level.

individual system components at different levels of detail. Since not all biochem- ical structures are known in detail, the language has to support the expression of partial knowledge. On the other end, executability allows automatic assigning the description with appropriate formal (mathematical or programming) structures that enable simulation and exhaustive analysis of desired properties or revealing bugs in the description.

On the other end, SBML multi [29] transfers rule-based description into a uni- versal XML format that fixes the hierarchical structure of objects and modularity of rules. It moves the rule-based paradigm towards a standard technique of describ- ing biological systems. However, it does not directly solve the executability and advanced analysis issues that make an important aspect of rule-based frameworks. Our long-term aim is the development of a general modelling framework [16,27].

Compatibility of atomic agents is a key property defined between agents. An agent is compatible with anothet agent if they have the same name and they are in the same state or the first agent is in the unknown state. It provides a formal way to compare which agent is more detailed, i.e. its state is more specified.

A structure agent represents a biochemical object that is composed of several known atomic agents while we know that a composition is abstract and not necessar- ily complete. To incorporate this kind of abstraction into our language, a structure agent is defined to be labelled with a unique name and a set of atomic agents. This set is restricted according to the given structure signature with the same name as the structure agent.

Structure agents are compatible if it is possible to create pairs from atomic agents of composition of the first agent with the second ones such that these atomic agents are all unique. For such pairs, the agents in each pair must be compatible. It provides a formal way to compare which agent is more specified, i.e. particular states of atomic agents in partial composition are given or not.

A complex agent represents a non-trivial composite biochemical object that is induc- tively constructed from already known biological objects. In rule-based languages, this is usually defined by introducing bonds between individual biochemical objects. In BCSL we abstract from the detailed specification of bonds and we rather assume a complex as a coexistence of certain objects in a particular group. Moreover, a complex agent resides in a compartment which gives it a spatial position.

It worth noting that the complexes have no binding topology. While it provides many advantages, specifically when it comes to combinatorial explosion, it also has several drawbacks. The most important one is that we are not able to express structural modifications on the level of complexes. These have to be encoded using states.

Not every rule makes sense. For example, a rule where not a single agent is changed or a rule where the relation between the left-hand and the right-hand side would not be clear. In order to avoid such cases we need to specify when a rule is well-formed, i.e. it makes sense semantically.

A rule is well-formed if it holds conditions given in Definition 2.26. The condi- tions basically claim that an agent has to change during the rule application. This is ensured by condition (i), where there are three options: (a) at least one pair of agents from LHS and RHS of the rule is different; (b) the lengths of the LHS and RHS are different, i.e. either a new agent is created or complex is formed/dissociated;

Once we defined BCSL agents and rules and syntax for the language, we need to connect them in order to give semantic meaning to a model written in the syntax. For this purpose, we define translation function F (Definition 2.28). It is defined recursively according to the expression given as an argument.

In this section, we define several syntactic extensions which increase the readability of the rule expressions. Note that each rule expression in an extended form can always be translated to basic form defined above (Section 2.3). All rule expressions containing the following extensions must be converted to basic form before the semantics can be applied. For better demonstration, we provide a running example,

The localisation operator is intended for allowing an alternative way of expressing the hierarchically constructed agent expressions (Running example 3.8). The main idea is to allow zooming into individual parts of complex and structure expressions. For this purpose, we use a :: b notation such that a, b are arbitrary agents which satisfy one of the conditions given in Definition 3.7.

In a rule expression, one agent expression might be referenced using a variable as a set of rule agent expressions it can be replaced with (Running example 3.9). Such an agent expression is referenced as ?X. Moreover, in the case when a ?X is used in a location, it must hold conditions from Definition 3.7.

Compatible subset formally defines all fully specified agents from the compatible set which are compatible with a given member of the set (i.e. there are no compatible agents with them in the set). Note that for any complex agent X there exists just one compatible subset. The reason follows from Lemma 4.6 and Definition 4.7.

There might be cases where there are redundant rules in a model (Definition 4.8). These rules do not cause any semantic difference, only increase the size of the model. We provide a static method how to detect such rules and eventually delete them from the model. Please note the redundancy is relevant only in the qualitative context. In the quantitative context, the same rules with different kinetics might have their relevance, yet it is still useful to detect potential redundancies.

In the proof, we used compatible sets of complex agents and the fact that we can generate reactions from the rules, while we are actually enumerating all agents from the compatible set which are compatible with original agent in the rule. This is demonstrated in Example 4.10.

There might be cases when simplifying some details of the given BCSL model pre- serves some properties while making the analysis of the model simpler. This is particularly the case of dynamic analysis, where a minor change in the model speci- fication can dramatically affect the behaviour. To address the model simplification, we first define a function that simplifies rules and then define the notion of a reduced model and show what kind of information does it preserve.

When we are checking whether an agent is reachable in LTS(M) for given model M, we might first check whether the respective abstract agent (the supremum) is reachable in LTS(M) of the reduced model M. If this holds then we are still not certain about reachability of the agent in its initial form. This has to be checked in LTS(M). However, Theorem 4.15 states that agent which is not reachable in LTS(M) is also not reachable in LTS(M). The usage of the theorem is demon- strated in Section 5.

Since we have defined the compatibility operator for agents, we can apply static non-reachability analysis before enumerating the entire transition system of the model M. We can use the fact that there has to exist a compatible agent on the right-hand side of a rule with the desired agent in order to construct it eventually. This analysis is independent of the initial state of the model. However, it is worth noting that we do not consider the trivial case when the desired agent is already in the initial state.

Proof. Let us assume we have a path of states constructed by applying correspond- ing rules from Y where X is reachable. At some point on the path, we inevitably have to create a complex agent X2  X from a complex agent X1 applying a rule R.

is reachable for the given model. The agent is formed from FGF proteins which are unphosphorylated (u) on threonine residues (Thr ). With the traditional approach, we have to enumerate entire transition system of the model and then use model checking method to check it. In our case, we can check if it is non-reachable using static reachability analysis (Theorem 4.16). The conclusion is that there is no compatible agent on any right-hand side of the rules. It follows that the given complex agent is non-reachable.

in the initial model. We can first check whether its corresponding least specified agent Raf .ERK ::cyt is non-reachable in the reduced model. Since the transition system of the model is relatively small, it can be quite easily checked using dynamical model checking. The answer in this case is non-reachable, which means the original agent in non-reachable too.

