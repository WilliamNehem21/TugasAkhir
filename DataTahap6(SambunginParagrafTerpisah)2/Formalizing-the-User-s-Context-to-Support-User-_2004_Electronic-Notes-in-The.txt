The complexity of the theories and specifications attempted in provers has risen dramatically in recent years. For example, the formal semantics of programming languages like Java has been specified in several provers [2]. The proof scripts in one of these efforts [9] (to which the author contributed) are tens of thousands of lines long, and hundreds of strategies have been written to help prove thousands of theorems.

Within a military C4I context agents are, e.g., a general, a battleship, or a tank. Their infospheres share some characteristics: position, disposition, communication, etc. Other components are very different; the agents with which a general interacts are not the same as those with which a battleship or tank interacts.

Kind theory is used to specify the semantics of reusable artifacts in collabora- tive environments. In the context of this work, the artifacts are the subcompo- nents of proof scripts and proofs, which in turn are instances of mathematical notions like variables and functions. The kind theoretical formalization of the semantic context, and likewise the UI features discussed here, follows partially from the grammar of the proof script language.

Some theorem proving environments like Jape and CtCoq have been used as UI/HCI testbeds [6,7,21]. Many of the innovations that were originally introduced in specialized environments have now found their way into general purpose front-ends. For example, proof-by-pointing in Centaur and CtCoq is now available in ProofGeneral, and the PPML-based layout and pretty- printing facilities of CtCoq are partially functionally reproduced in some of this work.

Pcoq is a Java-based user-interface for Coq [3]. It has some of the features of this work including a rich graphical interface and structured editing and presentation mechanisms. In particular, the rich presentation capabilities are based upon an internal formal representation of proof constructs. Unfortu- nately, while Pcoq followed a high-minded model put forth in [25], it has not evolved as is not used as a UI for Coq.

IsaWin is another environment which has some advanced interactive fea- tures [20]. IsaWin differs from this work in that it focuses on an iconic, graphi- cal representation of mathematical constructs with a drag-and-drop interactive metaphor. As with most iconic languages, there are some problematic issues with scaling graphical representations of non-trivial artifacts.

Some commercial general-purpose computation environments, particularly quality commercial environments like Mathematica, Maple, and Matlab, have rich UIs. These tools provide WYSIWYG-ish interfaces that use mathematics fonts and provide direct editing of terms with a point-and-click, drag-and-drop UI. While the intention here is not to attempt to duplicate such UIs, their visual features are compelling and inspirational, but their editing features and flexibility are actually inferior to most sophisticated environments like those mentioned above.

Coupling an advanced UI like that of Mathematica to a prover like PVS is an interesting experiment [1]. But, as neither tool was designed as a reusable component, such coupling is awkward. Instead, in this work these commercial mathematics environments are studied, and the features that are found to be most useful in day-to-day work are adopted, adapted, and formalized for theorem provers.

The second-level concepts of PVS are one level deeper within the gram- mar. They are exactly those concepts which are used to define the top-level concepts. They are: theory formals, import and export relations between theories, assumptions, declarations, judgments, and conversions.

The set consisting of all kinds identified using the process of Section 2.2 is the underlying kind context of the IME. This set is fixed for a given proof script language and IME combination, thus is not contextual from the point-of-view of a user.

All documents loaded by a user in the IME must be parsed to identify all instances in the current semantic context. A parser will obviously exist in the back-end prover of the IME, but it is often the case that no published API exists for accessing this information. Thus, many IMEs will use a front-end parser of some kind, like that discussed in Section 4.

Each construct identified by the parser has a starting point and an ending point. This extent information is used to determine the current user focus by identifying which construct encloses the current point of focus within the IME. If the current point does not fall within the extent of any instance, than the closest instance, moving backward through the current document, is consider the enclosing instance.

Extended implicit hyperlinking is a feature new to commercial development environments. For example, automated spell-checking functionality, like that found in Emacs or Microsoft Word, is an example of implicit hyperlinking. In such an environment, the source document, perhaps a research paper, is im- plicitly hyperlinked to one or more dictionaries. The purpose of this particular hyperlinking is word spelling correction and definition and synonym lookup.

The PVS LATEX printer is driven from typechecked specifications. It allows substitutions to be made, and, by using the resolution information, can distin- guish operators based on arity and the theory where the operator is declared. Types are not currently used, in order to keep the substitutions file simple 8 .

Other approaches are available for pretty-printing that are especially useful when embedding different logics in PVS. For example, Skakkebaek [23] gener- ated a new parser for the Duration Calculus, mapping its abstract syntax to subclasses of the PVS abstract syntax. Instances of these classes are pretty- printed using specialized methods, but typechecking, proving, etc. would use the methods of the superclass. This works well, but it is not easy to define a new grammar in PVS 9 . Defining a new grammar for the Duration Calculus was not too difficult because it copied most of the PVS grammar and simply added a few new operators. Another difficulty is that as a proof is devel- oped, terms get introduced that are part PVS and part Duration Calculus, and though they would be pretty-printed, the result could be confusing to the user.

In Pombo [22], PVS was used to provide the semantics of Ag specifications, defining the semantics of First Order Dynamic Logic and Fork Algebras, along with rules and strategies that allow a user to reason in Ag. Here there were conversions defined, such as a meaning function, and arguments such as the current world of the Kripke structure, that by default are included in the prover interaction, but add clutter to the proof. In this case the function for pretty-printing applications was modified in order to suppress the meaning function and the world argument.

This approach works well for many situations, but not all pretty-printing tools can be integrated into Common Lisp. For non-Common Lisp-based tool, resolution and type information need be provided. The most promising approach to this problem is to provide the abstract syntax of PVS terms in XML, given most programming languages have facilities for reading and manipulating XML documents. This is done, for example, in OMDOC, which provides an extension for PVS that generates OMDOC abstract syntax from typechecked PVS specs [14]. There are future plans for generating XML that directly reflect the internal abstract syntax of PVS, and this could easily be used to build a new pretty-printer.

This integrated environment is an extension of the Emacs Code Browser (ECB), a source code browser for Emacs [5]. It displays a user-customizable set of windows that can be used to browse directories, files, and file contents, all of which are substructures of the current semantic context. The summary pane in the top-left of the future can also be split off into a separate window. The Speedbar package is used to support this functionality [19].

Shortcut menus (not seen in the illustration) are available as discussed in Section 3.1.1. They are realized using the Imenu facility, which is built into recent versions of Emacs. This features offers a way to find the major definitions in a file by name, via a nested set of menus.

Second, currently the wisent parser does not work with the X-Symbol package, as the grammar is written in ASCII. Thus, a user currently either can have symbolic representation of their PVS proof scripts, or can have the integrated environment, but not both. We hope to lift this limitation before the release of the new PVS.

Finally, UI operations involving parameterized theories are weak. Improv- ing support for completion and summarization of such parameterized substruc- tures is an important research topic. It is likely that PVS theory parameter- izations can be characterized by the kind theoretical composition operators, thus the methods of Section 2 can continue to be used.

ing its capabilities. Examples of refactoring include safe renaming of program features (variables, functions, methods, etc.), function extraction and inser- tion, and safe modification of feature visibility (e.g., making a public variable private, automatically writing getter and setter methods, and automatically inserting these methods at all program locations that access the original public variable).

An example refactoring operation within an IME is the identification and use of a cut rule. When performing a large proof, it is sometimes the case that, at some mid-point during the interactive process, multiple branches of the proof are recognized as having a similar structure. To simplify the proof, a lemma could be defined and used within these branches. Unfortunately, many provers, PVS included, provide no means by which such a lemma, acting here as a cut, can be extracted, defined, proved, then (re)used.

This work was supported by the Netherlands Organization for Scientific Research (NWO). Thanks to Sam Owre, Erik Poll, Martjin Warnier, Bart Jacobs, and Adriaan de Groot for their input on earlier versions of this paper. Thanks to Chara Williams for help with the screen captures.

