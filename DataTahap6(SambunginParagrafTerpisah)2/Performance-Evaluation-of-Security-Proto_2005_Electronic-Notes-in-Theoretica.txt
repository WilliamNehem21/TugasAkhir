We use a special operational semantics which drives us in inferring quantitative measures on system describing cryptographic protocols. The transitions of the system carry enhanced labels. We assign rates to transitions by only looking at these labels. The rates reflect the distributed architecture running applications and the use of possibly different cryptosystems. We then map transition systems to Markov chains and evaluate performance of systems, using standard tools.

Intuitively, A sends B the plaintext A, B, N and an encryption readable only by A and the server S; B forwards it to S together with a message readable only to B and S. The server receives and decrypts both. If the components A, B, N in the encrypted messages match with the plaintext, S generates the session key KAB and sends B the key twice; one encrypted with the shared key KA and the other with the shared key KB. Finally, B sends A the first encryption. Here, the basic cryptographic system is a shared-key one, such as AES [3]: the same key shared between two principals is used for both encryption and decryption.

However, looking at protocol narrations is not sufficient. Indeed, here you only have a list of the messages to be exchanged, leaving it unspecified which are the actions to be performed in receiving these messages (inputs, decryptions and possible checks on them). This can lead, in general, to an inaccurate estimate of costs.

Here, we show how we can compare and measure protocols, specified in LySa. This allows the designer to choose among different protocol versions, based on an evaluation of the trade-off between security guarantees and the price for each alternative. Also, our approach makes it possible to estimate the cost of an attack, if any. Consider again our example based on the two versions of Otway-Rees protocol. The literature reports that both versions assure key authentication and key freshness, but they differ with respect to goals of entity authentication. In (OR1), A has assurance that B is alive, i.e. that B has been running the protocol; indeed in receiving message .4, she can deduce that B must have sent message .2 recently. In (OR2) instead, A does not achieve liveness of B. We will show below that they differ also in efficiency, confirming the intuition given above.

Technically, we give LySa an enhanced operational semantics, in the style of [14]. We then mechanically derive Markov chains, once given additional information about the rates of system activities. More precisely, it suffices to have information about the activities performed by the components of a system in isolation, and about some features of the net architecture. The actual performance evaluation is then carried out using standard techniques

In summary, what we are proposing is a first step towards the development of a single, formal design methodology that supports its users in analysing both the behaviour and the performance of protocols, with a semi-mechanizable procedure. In this way, performance analysis is not delayed until a system is completely implemented, which may cause high extra-costs. Also, we can use the available analyser of LySa [5] to check security at the same specification stage. Indeed, this integration is possible because we use LySa as a unifying specification language. Moreover, our approach can be used with any of such languages endowed with an operational semantics.

We consider in the following the two versions of the Otway-Rees protocol specified in LySa, as our running example. In this section we only want to give the intuitive idea of our framework and therefore we will skip any technical detail. In particular, we give an intuitive introduction to the semantics, and the cost functions that enrich transitions with their costs; finally, we give the intuition on how to extract the necessary quantitative information to derive the Continuous Time Markov Chains (CTMC). The formal development is left to the Appendix.

sent by A (l. 3 in Tab. 1), where the term {A, B, N, NA}KA represents the encryption of the tuple (A, B, N, NA) under the symmetric key KA. Tests associated with input are directly embodied in the input: an input suc- ceeds, resulting in name instantiation, only if the first terms received coin- cide with the ones syntactically preceding the semi-colon. In the present

Once the protocol has been specified in LySa, we associate a label to each tran- sition, in particular to each communication and to each decryption. To this aim, we use an enhanced version of operational semantics called proved, in the style of [7,8] (see Appendix A for further details). In our proved operational semantics the transition labels are enhanced so that they record the syntac- tic context in which the actions take place, besides the actions themselves. The context part represents the low level routines performed by the run-time support to execute the transition itself. Therefore, the enhanced label of a communication must record its output and input components and their con- texts. We choose instead not to use contexts to enrich labels of decryptions.

The cost of an output depends on the size of the message and on the cost of each part (or term) of the message. Note that the cost of an encryption is not constant: it depends on the algorithm that implements it, on the size of the cleartext, on the kind of the key (on its size and on its intended use, e.g. long-term or short-term).

Here, we do not fix the cost function: we only propose for it a possible set of parameters that reflect some features of a somewhat idealized architecture and of a particular cryptosystem, e.g. we take into account the number of processors or the kind of cryptographic algorithms. Although very abstract, this s to make our point.

As discussed before, the context of each action must be considered. Con- texts indeed slow down the speed of actions. We therefore determine a slowing factor for any construct of the language. Nevertheless, for simplicity, in our example, we only consider the cost due to parallel composition.

crypted cleartext (we assume that input and output have the same cost). The cost of the third transition is instead 4d, that represents the cost of decrypting a ciphertext, obtaining a cleartext of size 4. The full list of the costs ci relative to the labels li in Sys1 and Sys2 are in Tab. 3. Note that cost parameters depend on the platform and on the actual protocol. For instance, in a system where cryptographic operations are performed at very high speed (e.g. thanks to a cryptographic accelerator), but with a slow link (low bandwidth), the cost for encryptions will be low and high for communication.

i.e. with any derivative of P , rather than to each transition, as often done in the literature, e.g. in [14]. For instance, when calculating the utilisation of a cryptosystem, in order to perform a decryption, we assign value 1 to any transition in which the decryption is enabled. All the other transitions earn the value 0 as transition reward.

We have used an enhanced operational semantics, whose transitions are labelled by (encodings of) their proofs. Taking advantage of enhanced labels, we have mechanically associated rates, i.e probabilistic information, with tran- sitions. This is done symbolically, by looking at the enhanced labels, alone. Actual values are obtained as soon as the user provides some additional in- formation about the architecture and the cryptographic tools relative to the analysed system.

on enhanced labels, alone. Once rates have been assigned to transitions, it is easy to derive the CTMC associated with the transition system of a process. From its stationary distribution, if any, we evaluate the performance of the process in hand. Moreover, although many different timing models can be used, in this paper we concentrate on a continuous time approach.

It is worth noticing that our approach follows the same pattern presented in [7] to derive behavioural information from our enhanced labels. Also, behavioural properties, such as confidentiality and authentication, can be checked by using a tool integrated with ours, like the analyser of LySa [5]. Therefore, we propose our operational semantics as a basis to uniformly carry out integrated behavioural and quantitative analysis.

