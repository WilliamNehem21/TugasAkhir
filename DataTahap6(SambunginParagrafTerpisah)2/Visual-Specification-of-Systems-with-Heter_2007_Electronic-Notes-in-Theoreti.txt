In this paper a prototype of a visual specification language called Visual Coordination Diagrams (VCD) for high-level design of concurrent systems with heterogeneous coordination models is presented. The key property of VCD is the separation of behavioral aspects from coordination aspects. We also highlight the heterogeneity of VCD which has two levels. At first, it allows different coordination models to be mixed in a particular specification. Secondly, different formalisms can be incorporated to VCD for specification of behavioral aspects. This paper contains an overview of the language followed with its formal definition. An example of using the language is also given.

VCD employs a coordination model in which coordination aspects are seman- tically separated from the behavioral aspects. This is called exogenous model [4]. VCD can be also viewed as static architecture diagrams specifying connections among components. The key property of VCD is its two-level heterogeneity. The first level of this heterogeneity is based on the possibility of combination of various coordination models (both synchronous and asynchronous) in a particular system specification. The second level of heterogeneity is the variability of specification of behavioral aspects. This can be done in various notations which have to be, in some well-defined sense, compatible with the coordination models supported by the language.

Graphical calculus of communicating systems (GCCS) [5] and its synchronous extension SGCCS [15] adopt the process algebraic approach as the formal underlying semantic model. These languages have component-based hierarchical architecture. Because of too tight relation to the underlying process algebraic semantic model, the heterogeneity of both coordination and behavioral layers is limited.

There is another architecture language, which is, similarly to VCD, based on the idea of GCCS. It is called Architectural Interaction Diagrams (AID) [13]. VCD and AID both achieve some level of heterogeneity by avoiding the tight relation with the CCS process algebra. One of the significant differences between these two formalisms is in the underlying semantic model. AID is aimed to be used for specification of interactive systems while in VCD the interactive aspects can be additionally mixed with reactivity. At the behavioral layer, VCD supports more expressive formalisms than AID, and thus allows more heterogeneity at this level. On the other hand, AID allows more non-deterministic modeling at the coordination layer than VCD.

In the community of coordination languages, there is a large group of languages which have properties of architecture languages. The most significant languages from this domain are Manifold [10] and ToolBus [2]. These languages support control-driven exogenous coordination. In contrast to VCD, these languages are complex programming languages. VCD is aimed to be a simple visual formalism for higher-level design of concurrent systems. Moreover, unlike in Manifold, there is currently no support for dynamic changes of component connections in VCD. Static coordinators are represented in VCD as buses. What is similar to both Manifold and VCD is the concept of ports. Also the Manifold coordinator hierarchy has in some sense its counterpart in the VCD coordination layer hierarchy.

Semantics of VCD is based on state transition model. By traversing the net- work hierarchy, it relies on a formal mechanism of combining component state tran- sition models into one resulting state transition model of the top-most network. This is done with respect to the communication relationships specified by busses in networks. Semantics of a particular bus type represents behavior of a specific communication media.

One can imagine a particular VCD network as a graph in which subsystem in- terfaces create vertexes and busses with links create edges. Any such graph can be partitioned into strongly connected components. The VCD semantics com- bines subsystem transitions of these strongly connected components synchronously (product) or asynchronously (interleaving) into resulting network transition. The asynchronous or synchronous coordination model results from the semantics of in- cluded buses. The semantic relationship among transitions combined from different strongly connected network components is always asynchronous.

At the bottom-most level, behavior of system components can be specified in any VCD-compatible formalism. This is called behavioral layer of VCD. The se- mantic model behind the behavioral layer is an input/output labeled transition system (LTS) with sets of input and output actions taken as labels. This allows any language with semantics derived in the domain of LTS to be used for behav- ioral specification of system components. This property makes VCD heterogeneous also at the behavioral layer. Heterogeneity of the behavioral layer is achieved with respect to the set of semantically compatible, but notationally different languages, which are used for behavioral description. As examples of supported languages we can mention variants of Statecharts or Petri-Nets.

The key construct of the coordination layer is a bus. As it has been mentioned in the previous section, buses represent coordination mechanisms. They are used for modeling various types of coordination models, such as bi-party handshake message passing, synchronised broadcast, or asynchronous types of component coordination. Different buses can be mixed in the specification of a particular network, which

Any bus class can be instantiated as a particular bus and used for specification of coordination of components in a network. The bus interface is always given by the set of links which connect the bus to the ports of surrounding components. Formal definition of a bus, given by its interface and its class, is the following.

A gate is defined as a partial bijection relating ports of a network to free ports of a particular component in the network. The gate formalises the port mappings depicted in VCD as dashed lines. For simplicity reasons we define gate also for VCD leaves. In this case it is an identity which maps ports of a component to eponymous events of a particular VCD leave. Note that the leave gate restricts the allowed set of leaves which can be embedded in a particular component interface to only those leaves which have the relevant events in labels of transitions. Similarly, the definition of the network gate restricts the possible candidates for embedding of networks into other networks. Only a network with enough free ports can be embedded.

Dealing with the coordination layer, we would like to define semantics of VCD networks. In principle, the semantics of a VCD network is defined as a global I/O LTS which combines transitions of local I/O LTSs representing the semantics of network components. This combination is done with respect to the coordination model encoded in buses used in the network.

Finally, we are approaching to the last inference rule, which is the most complex one. It puts together transitions of buses and transitions of components and evalu- ates their relationships given by the network links. According to the evaluated result it can then coordinate some components by firing their transitions synchronously with transitions of some buses. Before we will define such a coordination rule, we have to look deeper into the structure of the network.

respect to the link relation L some strongly connected blocks of components may be distinguished in the network. For each such a block of components we will define a synchronising coordination rule. From the semantical point of view, any such a separated block of components can internally synchronise while different blocks put together may only mutually interleave. In other words, these blocks are the maximal groups of components with potential synchronous behavior.

In general, the role of synchronous multicast bus is to non-deterministically choose an event involved on one of its input ports, replicate that event and syn- chronously transfer it to all its output ports. Note that this behavior does not depend on the number of components connected to the bus. Hence, we can abstract from the number of ports the bus contains in its interface. This abstraction is the key knowledge which allows us to construct a bus class. Its instances then have the number of ports in the bus interface bounded (as the number of links to other components is finite). Instantiation is done with respect to the context in which bus instances are placed. In the example of the BC bus referred in the previous paragraph the BC bus is an instance with one input and three output ports.

Using the power of the VCD coordination layer we now would like to generalise the notion of the asynchronous message passing bus. More precisely, similarly as in the previous subsection we define a new bus class for this purpose. In this definition we abstract from the concrete number of input and output ports and we base the relevant infinite state transition model on non-determinism of possible asynchronous bi-party interactions. In the bus instances this number is then bounded with respect to the number of surrounding components.

In this paper we have presented the language VCD for hierarchical specification of component-based concurrent systems with heterogeneous models of coordination. The key concept of the language are buses which represent coordination models used in system architectures. Due to its heterogeneous character, VCD can be taken both as an extension of classical software architecture modeling notations and also as a framework for specification of coordination in reactive systems.

