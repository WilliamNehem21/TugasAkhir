In this paper, we survey algorithms for shortest paths in dynamic networks. Although research on this problem spans over more than three decades, in the last couple of years many novel algorithmic techniques have been proposed. In this survey, we will make a special effort to abstract some combinatorial and algebraic properties, and some common data-structural tools that are at the base of those techniques. This will help us try to present some of the newest results in a unifying framework so that they can be better understood and deployed also by non-specialists.

In this paper we survey a number of recent algorithmic techniques for maintain- ing shortest routes in dynamic graphs. For the sake of generality, we focus on the all-pairs version of the problem, where one is interested in maintaining information about shortest paths between each pair of nodes. Many of the techniques described in this paper can be specialized for the case where only shortest paths between a subset of nodes in the network have to be maintained.

A dynamic graph algorithm maintains a given property P on a graph subject to dynamic changes, such as edge insertions, edge deletions and edge weight updates. A dynamic graph algorithm should process queries on property P quickly, and perform update operations faster than recomputing from scratch, as carried out by the fastest static algorithm. We say that an algorithm is fully dynamic if it can handle both edge insertions and edge deletions. A partially dynamic algorithm can handle either edge insertions or edge deletions, but not both: we say that it is incremental if it supports insertions only, and decremental if it supports deletions only. In this paper, we survey fully dynamic algorithms for maintaining information about shortest paths.

Although research on dynamic shortest paths spans over more than three decades, in the last couple of years we have witnessed a surprising resurge of interests in those two problems. The goal of this paper is to survey the newest algorithmic techniques that have been recently proposed in the literature. In particular, we will make a special effort to abstract some combinatorial and algebraic properties, and some common data-structural tools that are at the base of those techniques. This will help us try to present all the newest results in a unifying framework so that they

Up to few years ago, there seemed to be few dynamic shortest path algorithms which were provably faster than recomputing APSP from scratch, and they only worked on special cases and with small integer weights. In particular, Ausiello et al. [1] proposed an incremental shortest path algorithm for directed graphs having positive integer weights less than C: the amortized running time of their algorithm is O(Cn log n) per edge insertion. Henzinger et al. [16] designed a fully dynamic algorithm for APSP on planar graphs with integer weights, with a running time of O(n9/7 log(nC)) per operation. Fakcharoemphol and Rao in [9] designed a fully dynamic algorithm for single-source shortest paths in planar directed graphs that supports both queries and edge weight updates in O(n4/5 log13/5 n) amortized time per operation.

The remainder of this paper is organized as follows. In Section 2 we describe some combinatorial properties of path problems on directed graphs and we abstract some data structures that are at the base of algorithmic techniques for dynamic path problems. Next, we focus on the newest dynamic shortest path algorithms in Section 3. In Section 4 we list some concluding remarks and open problems.

To the best of our knowledge, this property was first given in [12], and later on it has been used may times in designing efficient algorithms for transitive closure and shortest paths (see e.g., [5,19,29,30]). The following theorem is from [29].

The fact that locally shortest paths include shortest paths as a special case makes them a useful tool for computing and maintaining distances in a graph. In- deed, paths defined locally have interesting combinatorial properties in dynamically changing graphs. For example, it is not difficult to prove that the number of locally shortest paths that may change due to an edge weight update is O(n2) if updates are partially dynamic, i.e., increase-only or decrease-only:

In this section we describe how to maintain all pairs shortest paths in a directed graph with non-negative integer edge weights less than C in O(n2.5 C log n ) amor- tized time per update operation. The algorithm that we describe has been designed by King [19] and it builds on the tree data structure presented in Section 2.3 and on the long paths property described in Section 2.1.

We maintain the trees with instances of the data structure presented in Sec- tion 2.3, adapted to deal with weighted directed graphs and to include only short paths, i.e., vertices of distance up to d from the root. Information about longer paths will be obtained by stitching together these short paths.

