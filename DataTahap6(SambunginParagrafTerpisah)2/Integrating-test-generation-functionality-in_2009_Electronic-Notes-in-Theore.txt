We propose an extension of the Teaching Machine project, called Quiz Generator, that allows instructors to produce assessment quizzes in the field of algorithm and data structures quite easily. This extension makes use of visualization techniques and is based on new features of the Teaching Machine that allow third-party visualizers to be added as plugins and for new scripting capabilities. Using these new capabilities, several quiz types have already been produced, which can be applied to any algorithm and/or data structure for which the necessary visualizer plugins exist.

In order to keep the level of difficulty encountered by the instructor while gen- erating a new kind of test reasonably low, we decided to avoid tests based on the manipulation of a data structure, such as the ones described in [10]. In particular, we focused our attention on a specific set multiple-choice quizzes; nonetheless, we think that the coverage of test types proposed in the following section is quite wide. Our approach consists of adding quiz generation functionality to the existing Teaching Machine [4,5] and WebWriter++ [3,2] environment. The Teaching Ma- chine is a program animation tool for visualizing how Java or C++ code runs on a computer. It contains compilers for the two languages and an interpreted run-time environment that runs on a pedagogical computer model that incorporates aspects of both the underlying machine (physical memory, fetch and execute cycles), the compiler (expression parsing) and the memory manager (a stack, static memory and a heap). It has always contained the capability for visualizations at a higher level of abstraction (e.g. a linked view of data) and has recently been extended to allow arbitrary visualizer plugins. The Teaching Machine is written in Java and may be run as an applet or as an application. WebWriter++ is a small authoring system written in JavaScript whose purpose is to allow authors of pedagogical web pages to focus on content rather than technology. It provides a number of other automated facilities such as displaying colour stained code in a visual container with buttons to execute the code in the teaching machine, edit the code, or play a video about

In the next section, we describe the five quiz types that are already included in our framework. In Section 3, we briefly describe the Teaching Machine and Web- Writer++ extensions, which have been made in order to develop the Quiz Generator framework. These extensions mainly consist of a new plugin architecture and an enhanced scripting capability. In Sections 4 and 4.1, we describe a test example and how the new features of the Teaching Machine and the WebWriter++ tools allow the system to visualize and assess the test. Section 5 looks at related work. We conclude in Section 6 by listing some research questions concerning the possibility of using Quiz Generator as a testing tool, and not only as a self-assessment tool.

Our system supports several types of quiz question. These types are similar to the ones included in the taxonomy proposed in [9]: observe, however, that our main goal is to deal with multiple-choice quizzes, while the taxonomy is mainly oriented towards algorithm simulation exercises. In all the question types, visualizer plugins are used to produce both visualizations of the input and visualization of the output.

Quiz Generator leverages an extensive rewrite of the Teaching Machine carried out in 2006-2007, which permitted the development of third party plugins for the Teaching Machine. This development allows instructors to develop their own plugins without touching, or even recompiling, the Teaching Machine core. While such plugins are not confined to visualizers per se, we believed visualizers would be a core need. To that end a visualization adapter was developed to permit rapid third party development. The objective is to allow experienced developers to create new visualizers in a matter of between one and three days of programming. Indeed, it was the availability of this capability that got us thinking about developing a quiz

What was needed for the Quiz Generator project was a richer set of embedded scripting controls for the Teaching Machine than we had needed WebWriter++. For example, our learning web pages can currently display a code fragment for discussion, then allow a student to launch the example in the Teaching Machine to run it for herself, to edit it, or to possibly watch a video about it. Creating quizzes is more demanding.

of an unsorted array, randomly populated according to parameters laid out by the instructor. A second snapshot of the array is presented after a partial sort, together with a list of algorithms. The student is told how many sorting passes were done and asked to check all algorithms that could have created the second snapshot.

This paper fits into the third level (that is, the responding level) of the learner engagement taxonomy presented in [15]. As stated in the introduction, it tries to avoid some of the impediments listed in [13] and faced by instructors, while adopting visualization techniques, by making the development of new quizzes as easy as possible, and by integrating them within a unified framework, such as the one provided by WebWriter++ and the Teaching Machine. (By the way, [15] and [13] provide a good background for the research and development described in this paper, as well as test settings for evaluation.) Other papers deal with the development of interactive prediction facilities such as [8] and [14], where web-based tools are presented and evaluated, and [16],where a tool-independent approach is described.

