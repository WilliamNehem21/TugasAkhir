Due to its distributed and open nature, Web Services give rise to new security challenges. This technology is susceptible to Cross-site Scripting (XSS) attack, which takes advantage of existing vulnerabilities. The proposed approach makes use of two Security Testing techniques, namely Penetration Testing and Fault Injection, in order to emulate XSS attack against Web Services. This technology, combined with WS- Security (WSS) and Security Tokens, can identify the sender and guarantee the legitimate access control to the SOAP messages exchanged. We use the vulnerability scanner soapUI that is one of the most recognized tools of Penetration Testing. In contrast, WSInject is a new fault injection tool, which introduces faults or errors on Web Services to analyze the behavior in an environment not robust. The results show that the use of WSInject, in comparison to soapUI, improves the detection of vulnerability allows to emulate XSS attack and generates new types of them.

Web Services are modular software applications that can be described, published, located, and invoked across a network, such as the World Wide Web [1]. Because of its distributed and open nature, they are more susceptible to security risks [2]. Beyond the traditional insecurities, new ones arise, associated with technologies and services such as SOAP and XML. One example is the so-called Injection Attacks, among the most exploited in 2012, according to the Open Web Application Security Project 3 (OWASP Top Ten 2013).

A variation of this attack allows to inject scripts (e.g. JavaScript, VBScript or Flash Script) in Web Services through its parameters and operations described in their WSDLs. The objective of the attacker is to inject malware 4 , modify the database and infect every user who uses these Web Services.

Every day, new vulnerabilities are found and new attacks are developed. This way, the W3C 5 has developed various specifications to protect Web Services. The first specification proposed for Web Services was WS-Security (WSS) in 2004. WS- Security specifies how integrity and confidentiality can be enforced on messages and allows the communication of various security tokens, such as SAML, Kerberos and <wsse:Security> to use one security specification, in this case Uername Token. Web Service can contain more than one tag <wsse:Security> to insert more security spec- ifications (XML Encryption and XML Signature). Within the tag <wsse:Security> we use the tag <role> that specifies the privileges for a specific user. The tag

The static phase tries to find faults inserted during the development phase in- troduced in the code by possible human errors in the project stage. This phase is analyzed as a state not reachable, i.e. it can always be found new faults. In this case, the methods used are Static Analyze (code inspection, static vulnerability analysis) or Theorem Proof, which do not need to run the system. These methods are early detection and carry many benefits such as reduced cost of testing.

Penetration Testing emulate attacks, in order to reveal vulnerabilities. The tests are automated by the use of tools called vulnerability scanner (VS). There are a variety of vulnerabilities scanners, both commercial (e.g. HP Web Inspect, IBM Rational AppScan) and open source (e.g. WSDigger and WebScarab). The vulnerabilities detected differ from one tool to another. An evaluation [14] of several commercial versions of vulnerabilities scanners showed that these tools are primarily limited to low coverage of existing vulnerabilities and the high percentage of false positives.

Fault Injection is a technique that can be used to assess aspects of dependability of computing systems and can be implemented in hardware or software. This technique emulates errors, failures or anomalies in the target system and observes its behavior under a stressful environment. Fault injection dates back to 1970 when it was used to induce hardware faults. This technique can be used to validate fault tolerant system, assisting in the removal and prevention of faults while minimizing its occurrence and severity [14], [15].

Our aim is using Fault Injection to insert software faults and analyze the behavior of Web Services in a non-robust environment. There are several ways to inject faults into a system. The most attractive, from the point of view of implementation cost, is the fault injection in software. In this case, the faults are introduced by an injector, which is a software responsible for inject faults in the system, either before or during the run. In this technique, the tests consist of two input sets: the workload and the faultload. The first represent the usual entry to the system that serves to activate its functionality, while the latter represents the faults to be introduced.

There are numerous works in the literature suggesting the use of Fault Injection and Penetration Testing techniques to test the security in applications: In [13], this technique was applied to test a security protocol used for communication of mobile devices on the Internet. In [3] and [18] the authors use perturbations in the SOAP messages for emulating attacks, similar to our proposal. These studies use injectors that emulate a type of attack, while ours is for general purpose, i.e. our injector emulates different types of attacks and allows to generate combinations of them.

In the following sub-sections, we briefly describe the results of each phase of the implementation of the Security Testing Methodology with XSS. This attack is emulated with WSInject and soapUI. The reader who wishes to know more about this methodology should look at [4] and [35].

To identify the objectives of the attacker was necessary to make a research on vulnerabilities in web services, with the aim of gathering information about XSS. For this, we decided to search in articles [1], [2], [7], [41] and standards [8] that present vulnerabilities in the context of Web Services. While some of the vulnerabilities are caused by shortcomings in the implementation, most of them explore basic faults of the protocol, i.e. abusing of the flexibility of SOAP.

At this stage, the attack scenarios are produced automatically according to the criteria defined in Section IV.C of [35]. The output of this step is the attack scenarios described in the same format of the tree leaves, each one representing the description of an attack.

At this stage, we identify the behavior of Web services in presence of XSS attacks, tested by vulnerability scanner soapUI. The tool injects scripts through the add-on Security Testing and analyzes the response from servers, classifying the responses in Web Services, vulnerable or not, by the injection of XSS attack. For this, we installed the soapUI version 4.5 with the add-on Security Testing on a laptop with operating system (OS) Windows 7, CPU Intel Core2 Duo 2.00GHz and 3.00GB RAM.

The fault injector use scripts in format of text files. These ones describe the faults to be injected in Web Services, emulating attacks. The scripts are composed by one or more FaultInjectionStatements. Each one is composed by a ConditionSet and a FaultList. The FaultInjectionStatements work with commands of condition- action type. When it intercepts a SOAP message and satisfy a set of condition, the

The results of the Penetration Testing phase helped to develop the rules for vulnerabilities analysis. However, the results obtained by soapUI show a large per- centage of false positives and false negatives. We also verified the security provided by WS-Security standard with the add-on Security Token against XSS attack. In both phases, the use of WS-Security reduces significantly the number of vulnerabil- ities. However, this can be improved with the use of other specifications.

Seo J., HS Kim, S. Cho, and S. Cha. Web Server Attack Categorization Based on Root Causes and their Locations. In Proceedings of the International Conference on Information Technology, Coding and Computing, ITCC 2004, IEEE Computer Society Press, Las Vegas-NE, USA, 5-7, April 2004.

