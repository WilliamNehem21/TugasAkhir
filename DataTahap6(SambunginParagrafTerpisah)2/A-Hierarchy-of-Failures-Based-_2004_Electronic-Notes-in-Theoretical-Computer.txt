We conclude in Section 6 with a discussion of related work. Throughout the paper we include in the main body of the text those proofs that shed light on the results they are establishing. The remaining proofs are left to the appendix.

In CSP a process is a pattern of communication that describes the behaviour of a system. Examples of systems that might be modelled in this language are individual machines, networks and protocols. Moreover simple components may be combined to create a composite process. Whatever the system, the behaviour is described in terms of events or synchronous atomic communica- tions, marking points in the evolution of the system.

We show first that such an encoding is possible for all models associated with predicates that are either upwards or downwards closed, as is the case with all the specific models we have considered in this paper. Then, in Sec- tion 5.3 we prove a corresponding result for the general case and discuss the practicalities of our rule. The proofs are included in the appendix.

A related paper [3] extends and explores practical applications of the work described here. Non-standard measures of consistency are identified and motivated. Verification of consistency within each such measure can be seen as a refinement in one of the models of the current paper and hence can be performed automatically using existing tools.

