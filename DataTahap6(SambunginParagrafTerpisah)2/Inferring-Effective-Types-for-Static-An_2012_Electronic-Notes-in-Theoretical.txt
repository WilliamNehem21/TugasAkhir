The C language does not have a specific Boolean type: Boolean values are encoded with integers. This is also true for enumerated types, that may be freely and silently cast to and from integers. On the other hand, verification tools aiming at inferring the possible values of variables at each program point may benefit from the information that some (integer) variables are used solely as Boolean or enumerated type variables, or more generally as finite type variables with a small domain. Indeed, specialized and efficient symbolic representations such as BDDs may be used for representing properties on such variables, whereas approximated representations like intervals and octagons are better suited to larger domain integers and floating-points variables.

As already mentioned, our motivation is to connect the ConcurInterproc veri- fication tool [6], and its extension to pointers PInterproc [10]. These tools can treat the integer variables of C programs as numerical variables, by representing their possible values using for instance octagons [8], but they can handle more pre- cisely (ie., in a disjunctive way) those integer variables that are actually manipulated as Boolean or enumerated variables, using Bdds.

In this section, we extended the proposition of Section 3 to a broader subset of C. However this proposal was done under some assumptions (absence of casts and pointer arithmetic) and should be seen as a demonstration of how the value analysis and points-to analysis interact. It is possible to relax these assumptions by using classical well-studied points-to analysis. In particular, the technique of Steensgarrd

Note that this work would not be necessary if the abstract domains used by the analysers where able to dynamically switch the types of the variables they ma- nipulate when the latter are escaping their capabilities. But the abstract domains proposed in the literature tend to be very specialized (eg. floating points [2], nu- merical arrays [4]), and taking more general cases into account would add a burden to their complexity.

