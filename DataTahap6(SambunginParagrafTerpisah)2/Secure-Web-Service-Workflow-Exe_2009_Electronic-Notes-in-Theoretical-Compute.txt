In the following sections we present our concept of the process slip. Section 2 presents the technological foundation and briefly discusses related concepts. The concept of distributed workflows and their specific security issues are explored in Section 3. The structure of our container is presented in Section 4. In Section 5 we describe the integration of the process slip in a decentralized workflow and show how the security properties, given in Section 3, are realized by the integration of our container. This section also contains a brief description of the concept of a security stub and explains in details our workflow execution mechanism. In the conclusion we discuss planned further research in this area.

Related work in the field of process security for distributed workflows is scarce. On the level of document security the TransiDoc Project [22] Piechalski and Schmidt proposed a scheme to extend the concept of transformations of paper documents to their digital counterparts. Thus, each change to a document (e.g. a translation) can be digitally signed and non-repudiation of processes is achieved.

Web services based on WSDL, SOAP, and UDDI are developed to a standard in the communication from machine to machine [1]. The WS-* family of protocols cover a variety of middleware related topics like messaging [16], transactions [11,10], and security [17]. Best practice patterns and tools for the application of security and trust mechanisms already exist for these protocols [24]. In complex environments process definition languages like BPEL [2] are used in combination with additional concepts as defined for example by the Enterprise Service Bus [4]. This allows for flexible solutions with respect to integration of new services and changes in the processes supported by the system design.

In scenarios with central authority of a dedicated workflow management system existing WS-* protocols can offer a certain level of security on the link level. Bilal et al. [12] show how to describe non-repudiation protocols in BPEL. In particular, they propose and verify non-repudiation protocol using Petri Nets for chain-linked business transactions and show that they may be specified in BPEL.

step to step. Additional security may be introduced by adding encryption and integrity means to achieve minimal need to know and preserve integrity. This leads to a structured container format supporting addressing of the data to cer- tain steps resp. participants of the workflow. According to the needed security level some (or all) data can be encrypted and signed for the corresponding re- cipient to ensure confidentiality and integrity of the data. Access control to the encrypted data is regulated by using tickets, a Public Key infrastructure (PKI), identity management systems, or pre-shared keys for example. As an alternative to embed the data into the subcontainer it is also possible to include a redirection to an alternative source providing the data. This could be implemented by using a ticket scheme. Access control in this case can also be restricted using a method as presented above.

execution of the workflow and can either be a full description of the workflow or a reference to a location where the definition is kept. According to the needed security level the partner services may have only access to the description of their own activities. This implies that during the generation of the container some (or all) parts of the workflow description must be encrypted for the corresponding services, so that they are able to invoke the corresponding actions but do not have access to the activities of the other partners. Thus authentication and integrity may be added by XML Signature, XML Security, or WS-Security. In case of a reference it should be noted that the integrity means are created nonetheless. If the reference is changed or not available the workflow has to perform a roll back.

In this section we will describe the integration of the process slip container in a decentralized workflow and the realization of the described security properties by the integration of our container. First in 5.1 we will specify the notation used to present the structure and the functionality of our workflow execution concept. In subsection 5.2 we briefly explain the concept of a security stub utilized to handle the process slip container. In the last subsection we give a detailed description of the proposed workflow execution.

One possibility to ensure that our framework fulfills the corresponding security properties (see Section 3) is to use a PKI, which involves generation of public and private keys and public key certificates for each service, deployed during the work- flow. Since the process of key and certificate generation and distribution is out of the scope of this work we assume the existence of a trusted CA, that can generate keys and certificates for the workflow participants and the existence of a service, responsible for their secure distribution among the partners. If new parties partici- pate in interactions during the handling process, we assume that their key pairs and certificates are also correspondingly generated and distributed. Therefore we can assume that prior to the execution of a workflow each participant pi receives a pub-

In this section we will describe the main steps involved in our custom workflow execution. As we already outlined, the generation and the distribution of the pub- lic/private key pairs and the identity certificates of the partners is not a matter of this work. Therefore we assume that there exists a trusted CA and the keys and the certificates have been generated and securely distributed among all possible part- ners. We also assume that the workflow definition already exists and the partners which are supposed to participate in the workflow execution are fixed 5 .

