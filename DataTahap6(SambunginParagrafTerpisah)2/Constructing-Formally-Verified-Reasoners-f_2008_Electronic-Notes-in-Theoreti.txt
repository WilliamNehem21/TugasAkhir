For processing knowledge in the Semantic Web, reasoners of Description Logics (DLs) such as RACER, Pellet and FaCT++ [6,11,12] are being used. Description Logics [3] are a family of logics used to represent conceptual and terminological knowledge. Among these, the ALC logic is a ground logic, which can be extended to the more expressive logic SHOIN, which corresponds to the Ontology Web Language.

Formally verifying the reasoners for DLs could increase their reliability and so that of the Semantic Web. However, formal verification of properties of reasoners for DLs is a time and resource consuming task. Moreover, if we carry out the formal verification of different reasoners for a logic, we will probably have to solve analogous problems for each one.

In this step, the algorithm is generic in the sense that the strategy of appli- cation of completion rules is not determined. That is, the specified algorithm depends on a selection function coding the strategy. The correctness of the algorithm has been proved, assuming some generic hypotheses about the non- determined selection function.

A built-in prelude and loadable libraries provide standard specifications and proved facts of a large number of theories. PVS specifications are packaged as theo- ries that can be parametrized with respect to types and constants. The definitions and theorems of a theory can then be used by another theory by importing it.

In this section we present a sketch of the type and operator refinement techniques developed in PVS in order to relate different specifications of the same notion. The point is that if we want to prove properties about a program, the development of the formal proof will strongly depend of the used datatypes as well as the concrete implementation of it. Thus, the idea is to verify the desired properties for a generic specification of this program and that the verified properties can be transferred to it.

This section is devoted to present the construction of a generic algorithm corre- sponding to the specification of the generic framework that we have described in Section 3. In addition, our purpose is to do it in such way that its termination, soundness and completeness can be deduced from the corresponding properties of the generic framework. For this, we will use the methodology of refinements ex- plained in Section 4.

Secondly, it should be taken into account that the applicability of a rule does not only depend on an instance axiom of an ABox L. In order to capture the notion of applicability of a rule, the type activation (activ) was introduced in the generic framework. An activation is a structure consisting of an instance axiom Aa and a witness x, which made it applicable. Now, we refine in a natural way the type activ, and we specify a function computing a list with the ABoxes obtained by application to L of the rules corresponding to an activation Ac

The idea is that f (L) selects an activation applicable to L. With this activation the algorithm will carry out the next step of the completion process. Due to typing reasons, given an ABox L, f (L) provides a list of activations. Thus, if there is not any activation applicable to L, f (L) should be the empty list.

