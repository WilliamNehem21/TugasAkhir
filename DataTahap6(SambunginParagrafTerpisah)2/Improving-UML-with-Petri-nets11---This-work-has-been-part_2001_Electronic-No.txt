UML is the OMG standard notation for object-oriented modeling. It is easy, graphi- cal and appealing, but in several cases still too imprecise. UML is strong as modeling means, supplies several different diagrammatic notations for representing the dif- ferent aspects of a system under development, but lacks simulation and verifiability capabilities. This drawback comes from its semi-formal nature: UML is extremely precise and wide if we consider syntactical aspects, but its semantics is as precise as those of informal notations. Scientists and users, together with standardization efforts (UML 2.0), are trying to overcome this problem, but as side effect, they are also limiting the intrinsic flexibility of UML. Moreover, several formalization ef- forts concentrated on its static elements (for example, inheritance), leaving dynamic semantics almost untouched.

This paper indicates a way to complement UML with high-level timed Petri nets (HLTPNs, [8]) to provide dynamic semantics. This paper first overviews various semantic aspects of UML by referring to a simple example. Then, it presents a novel approach to complement UML with HLTPNs, which introduces dynamic semantics without affecting flexibility, user friendliness, and simplicity. Finally, it exemplifies the possibilities of early simulation and analysis supported by the approach.

For some of the notations that form UML models, in particular the ones that describe the structure of the system such as the use cases or class dia- grams, the formal definition of the dynamic semantics is not strictly necessary for defining and analyzing these notations themselves. For other notations, in particular the ones that define the behavior of the system such as statecharts or interaction diagrams, the formal definition of the dynamic semantics is re- quired to provide the needed simulation and execution capabilities. However, to provide a complete dynamic model we need to take into account not only the notations that define behavioral aspects, but also some of the notations that define the structure, to provide a coherent semantic framework for the different views of the system.

The few approaches, proposed so far, that address the problem of providing dynamic semantics to UML follow a traditional schema that provide a fixed mapping to a formal model, thus reducing the flexibility of the informal nota- tion. Such a schema has been widely exploited in the nineties for structural analysis but failed in providing really usable solutions [7]. Although the rea- sons for failing may be tracked to several causes, our experience within some industrial projects indicates that the reduced flexibility falls among the main causes. A different schema consists in defining a mapping through a set of flexible rules that can easily be extended to cope with different interpreta- tions for the same model. Such a schema has been initially investigated by Paige ([16]) and Baresi et al. ([2]).

tures that make the extension non trivial: The main ones are the variety of notations used for specifying a system and the absence of a rigid hierarchical framework that constrains a specification. Here we demonstrate the suitability of Petri nets for addressing such problems and the applicability of a rule based schema to UML. We show how to provide formal semantics to a specification composed of a class diagram and some statecharts diagrams, thus we address the problem of providing formal semantics to a heterogeneous set of notations. We also illustrate how the sets of rules for defining the semantics of the dif- ferent notations can be applied in different orders to address the problem of formalizing a model that lacks a rigid development framework.

By formalizing dynamic semantics aspects of UML, Petri nets allow for formal analysis of UML specifications. Petri nets support various kinds of analyses with different costs and precision. Here we focus on the main techniques for analyzing dynamic aspects: simulation, reachability analysis, and model checking.

Analysis methods work on Petri nets, while software engineers would like to express properties and examine results in terms of their UML specifications. Thus, the schema for mapping UML to Petri nets presented in this paper should be augmented to allow the mapping of results from Petri nets back to UML specifications. Here, we assume that such a mapping exists. Interested readers can refer to [1].

In this case, the failure can be tracked back to a design error: the software engineer did not identify the drivers enabled to pump from ready pumps, thus Driver1 can pump from Pump2, enabled for Driver2. Unfortunately the low computational cost of simulation is paid in terms of analysis power. Simu- lation can reveal failures anymore, but cannot prove absence of undesirable behaviors. Thus, once corrected the fault in the specification, simulation will enumeration of all possible states of the computation. Such a technique has been proved feasible for Place/Transition nets, regardless of the boundedness of the markings, and has been extended to various kind of high-level Petri nets ([13]) including the high-level timed Petri nets used in this paper to give dy- namic semantics to UML [9]. Model checking applied to a reachability graph can be used to prove several interesting liveness and safety properties. For ex- ample, model checking can prove that a UML specification of the Gas Station problem always sells the due amount of gas to the customers, or that it never allows a customer to get gas without paying for it.

