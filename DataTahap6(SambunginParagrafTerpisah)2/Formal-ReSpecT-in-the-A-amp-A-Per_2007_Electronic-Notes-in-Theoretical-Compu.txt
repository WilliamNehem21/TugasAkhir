Coordination models and languages have found a new course in the context of MAS (multiagent systems). By re-interpreting results in terms of agent-oriented abstractions, new conceptual spaces are found, which extend the reach of coordination techniques far beyond their original scope. This is for instance the case of coordination media, when recasted in terms of coordination artifacts in the MAS context.

However, conceptual foundations of the MAS area are still under impetuous development, pushed by deep and heterogeneous inputs from distributed comput- ing, programming languages, software engineering, simulation, artificial intelligence, and other related areas that are today converging toward agent-orientedness [32]. Among the most promising approaches, the A&A meta-model [19] re-interprets MAS in terms of two fundamental abstractions: agents and artifacts. Agents are the active entities encapsulating control, which are in charge of the goals/tasks that altogether build up the whole MAS behaviour. Artifacts are instead the passive, reactive entities in charge of the services and functions that make individual agents work together in a MAS, and that shape agent environment according to the MAS needs. Altogether, the A&A meta-model has a deep impact on the way in which MAS are engineered [10], programmed [28], and simulated [11]. Along this line, coordination artifacts can be conceived as a generalisation of coordination media, as specialised artifacts encapsulating coordination services for MAS [19].

In particular, we take the ReSpecT language for programming the behaviour of tuple centres [15,25] and its formal model [14], and discuss its re-formulation in the A&A framework. Section 2 shortly discusses the A&A meta-model, and the main features of artifacts. Section 3 briefly recalls the essentials of the TuCSoN model and of the ReSpecT language. Section 4 introduces the new, revised ReSpecT syntax, along with an example of A&A ReSpecT coordination of agents. Section 5 presents the semantics of A&A ReSpecT, obtained by largely revising and extending the original one [14] along the A&A main lines. After Section 6 discusses relations with previous work and related literature, Section 7 provides for final remarks and future lines of work.

The same complexity of activities within social systems accounted for by AT and Distributed Cognition can be found nowadays in MAS. This is why we consider the inter-disciplinary study of such conceptual frameworks as fundamental for the anal- ysis and synthesis of social activities inside MAS, and in particular of the artifacts mediating such activities [26]. Examples range from coordination abstractions such as tuple centres [15], to pheromone infrastructure [23] in the context of stigmergy coordination, to the Institution abstraction in electronic-institution approaches [5], to cite some.

Dealing with the management of interaction, coordination models and infras- tructures like TuCSoN [22] represent the most natural technologies upon which the A&A approach can be put to test. Therefore, revising TuCSoN models and lan- guages under the A&A viewpoint is seemingly appropriate. In particular, in this paper we recast the ReSpecT language for programming TuCSoN tuple centres: we reinterpret, revise, extend and complete it so as to make it fit the A&A meta-model for MAS. The goal of this operation is twofold. On the one hand, we aim at showing the modelling power of A&A when applied to (MAS) coordination. On the other hand, we aim at providing MAS engineers with reliable and tested technologies like ReSpecT and TuCSoN to build MAS artifacts according to the A&A meta-model.

TuCSoN (Tuple Centres Spread over the Network 2 ) is a general-purpose agent- oriented model and infrastructure for MAS coordination [22]. TuCSoN is based on a coordination model providing tuple centres as first-class abstractions to design and develop general-purpose coordination artifacts [15]. TuCSoN tuple centres are programmed through the ReSpecT logic-based specification language. In the re- mainder of this section, we first recall the essentials of tuple centre coordination in TuCSoN (Subsection 3.1); then, we resume the main features of the original ReSpecT language for programming the behaviour of TuCSoN tuple centres (Subsection 3.2).

Accordingly, a tuple centre enjoys all the many features of a tuple space, which can be classified along three different dimensions: generative communication, as- sociative access, and suspensive semantics. The main features of generative com- munication (where information generated has an independent life with respect to the generator) are the forms of uncoupling (space, time, name) based on mediated interaction: sender and receiver do not need to know each other, to coexist in the same space or at the same time in order to communicate (to exchange a tuple, in particular). Associative access (access based on structure and content of infor- mation exchanged, rather than on location, or on name) based on tuple matching promotes synchronisation based on tuple structure and content: thus, coordination is data-driven, and allows for knowledge-based coordination patterns. Finally, sus- pensive semantics promotes coordination patterns based on knowledge availability, and couples well with incomplete or partial knowledge.

Adopting the declarative interpretation of ReSpecT tuples, a TuCSoN tuple cen- tre has then a twofold nature [14]: a theory of communication (the set of the ordinary tuples) and a theory of coordination (the set of the specification tuples). This allows in principle intelligent agents to reason about the state of collaboration activities, and to possibly affect their dynamics. Furthermore, the twofold interpretation of ReSpecT specification tuples (either declarative or procedural) allows knowledge and control to be represented uniformly (as Prolog-like facts) and encapsulated within the same coordination artifact.

While the original ReSpecT specification did not encompass neither linkability nor situatedness [15], two extensions were already introduced that moved along such directions. First, a first extension was proposed in [27], which introduced the first linkability primitive for tuple-centre composition, that is, out tc. Then, Timed ReSpecT was defined in [17], which first proposed the notions of timed artifact and timed tuple centre, and allowed for the specification of time-dependent coordination policies, encapsulated within Timed ReSpecT tuple centres.

model is defined for A&A ReSpecT, which encompasses the A&A meta-model and its general event model. Then, linkability of artifacts is developed and extended up to its maximum reach: any tuple centre operation can now be invoked in a reaction to be executed either within the tuple centre itself (as an internal operation), or on any other tuple centre (as a link). 9 Finally, situatedness of artifacts is recognised here as a general issue, which encompasses timed artifacts and their computational model. With respect to the original formulation of Timed ReSpecT [17], the model is then made more general, and also fully formalised within the overall A&A ReSpecT framework.

Linkability in its most general acceptation is not strictly a new idea in the field of coordination models and languages. The most prominent example is Reo [1], where channel composition is one of the most important and relevant features. Also, Reo has been recently experimented explicitly in the MAS field [2]. However, Linda- based approaches better cope with agent autonomy, since coordination is not forced upon the agents participating to the workflow, but is instead provided them as a service [31].

[24] could exhibit some sort of mechanism for tuple-space composition. However, such a mechanism is essentially implicit, and does not allow for the explicit control allowed instead by A&A ReSpecT linkability primitives. At the same time, Lime mechanisms for tuple-space automatic composition provide for a sort of spatial situatedness that A&A ReSpecT does not feature in its present form.

This paper owes a lot to a number of brilliant people that have worked with me on ReSpecT in the last decade: mostly, Marco Venuti, Antonio Natali, Enrico Denti, and Alessandro Ricci. Mirko Viroli also deserves credit if for no other reason than his ability to kindly but constantly pressing me so as to make me finally write this article. Finally, the enthusiasm and the many gentle but precise remarks by Matteo Casadei have been very important to correct and improve this paper up to its present shape.

