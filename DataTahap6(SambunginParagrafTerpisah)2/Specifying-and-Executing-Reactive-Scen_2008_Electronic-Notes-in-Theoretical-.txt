For programming random systems, one solution is to use a classical (determin- istic) language together with a random procedure. In some sense, non-determinism is achieved by relaxing deterministic behaviors. We have adopted an opposite solu- tion where non-determinism is achieved by constraining chaotic behaviors; in other terms, the proposed language is mainly relational, not functional.

Related works are abundant in the domain of models for non-deterministic (or stochastic) concurrent systems: Input/Output automata [7], and their stochastic extension [14]; stochastic extension of process algebra [6,1]. There are also relations with concurrent constraint programming [12], in particular with works that adopt a synchronous approach of time and concurrency [13,8]. A general characteristic of these models is that they are defined to perform analysis of stochastic dynamic systems (e.g., model checking, probabilistic analysis). On the contrary, Lutin is designed with the aim of being a user-friendly programming language. On one hand, the language allows to concisely describe, and then execute a large class of scenarios. On the other hand, it is in general impossible to decide if a particular behavior can be generated and even less with which probability.

Example 2.1 We illustrate the language with a simple program that receives a Boolean input (c) and a real input (t) and produces a real output x. The high-level specification is that x should get closer to t when c is true, or should tend to zero otherwise. The header of the program is:

A constraint (Boolean expression) represents an atomic reaction: it defines the rela- tions between the current values of the variables. Scenarios are built by combining such atomic reactions temporal statements. We introduce the type trace for typing expressions made of temporal statements. A single constraint obviously denotes a trace of length 1; in other terms, expressions of type bool are implicitly cast to type trace when combined with temporal operators.

Example 2.3 With those operators, we can propose a first version for our example. In this version, the output tends to 0 or t according to a first order filter. The non- determinism resides in the initial value, and also in the fact that the system is subject to failure and may miss the c command.

Note that, inside the loop, the first constraint (x tends to t) is not satisfiable unless c is true, while the second is always satisfiable. If c is false, the first constraint deadlocks. In this case, the second branch (x gets closer to 0) is necessarily taken. If c is true, both branches are feasible: one is randomly selected, and the corresponding constraint is solved.

We think that such a solution is too much restrictive and tedious for the user, and we prefer to slightly modify the semantics of the loop. The solution retained is to introduce the well-founded loop principle: a loop statement may stop or continue, but if it continues it must do something. In other terms, empty iterations are dynamically forbidden.

The parallel composition of Lutin is synchronous: each branch produces, at the same time, its local constraint. The global reaction must satisfy the conjunction of all those local constraints. This approach is similar to the one of temporal concurrent constraint programming [8].

Example 2.9 We can now write more elaborated scenarios for the system of ex- ample 2.3. In this new version, the system works almost properly for about 1000 reactions: if c is true, x tends to t 9 times out of 10, otherwise it tends to 0. During this phase, the gain for the filters (a) randomly changes each 30 to 40 reactions. At last, the system breaks down and x quickly tends to 0.

The execution takes place within an environment which stores the variable values (inputs and memories). Constraint resolution, weight evaluation and random selec- tion are also performed by the environment. We keep this environment abstract. As a matter of fact, resolution capabilities and (pseudo)random generation may vary from one implementation to another, and they are not part of the reference semantics.

Actually, we use the solver that have been developed for the testing tool Lurette [11,5]. This solver is quite powerful, since it covers Boolean algebra and linear arithmetics. Concretely, constraints are solved by building a canonical repre- sentation mixing Binary Decision Diagrams and convex polyhedra.

The basic rule is to ensure some fairness between the solutions. This is achieved by simulating a uniform choice among the set of solutions. Since uniform selection within a polyhedron is a complex problem, several options are available ranging from a simple, rough approximation to a very accurate, and thus costly one.

Other works concern the evolution of the language. We plan to introduce a notion of signal (i.e. event), which is useful for describing values that are not always available (this is related to the notion of clocks in synchronous languages). We also plan to allow the definition of (mutually) tail-recursive traces. Concretely, that means that a new programming style would be allowed, based on explicit concurrent, hierarchic automata.

