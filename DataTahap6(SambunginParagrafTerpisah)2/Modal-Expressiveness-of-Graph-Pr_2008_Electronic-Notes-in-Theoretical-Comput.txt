Trying to express graph properties using modal logic is an interesting idea for a number of reasons. First, modal logic achieves a good balance between what can be expressed in the language and how complex (computationally) it is to make infer- ences in it. It is a logic that certainly has more expressive power than propositional logic, but it is still decidable, unlike first-order logic. Second, modal logic formulas are evaluated in structures that are essentially graphs, which makes it a very natural choice for our work.

Similar definitions can be given for a bounded morphism and a disjoint union of frames, just removing the parts of the above definitions that deal with valuations. Below are two basic theorems about modal definability that are going to be used throughout the next subsections. Their proofs for a language that contains only  can be found at [5]. It is not difficult to extend that proof to a language

We can define two levels of connectivity for a graph. On a first level, a graph G is said to be (weakly) connected if and only if, for any two vertices v and w in G, there is a path from v to w in the underlying undirected graph of G. On a second level, a graph G is said to be strongly connected if and only if, for any two vertices v and w in G, there is a path from v to w in G itself.

Before trying to find a formula to describe the Hamiltonian graphs, we need to consider some graph-theoretical issues. In graph theory [6], there is no known result that states a necessary and sufficient condition for a graph to be Hamiltonian. If we could find a formula that describes the Hamiltonian graphs without having to describe the Hamiltonian cycle itself, we would be finding such necessary and sufficient condition. Thus, what our formula does is to inspect all of the paths in the graph, searching for a Hamiltonian cycle. Not surprisingly then, the only formula we could find in this simple language to describe the Hamiltonian property has length proportional to n!, where n is the number of vertices in the graph.

The difficulty in finding a formula to describe Eulerian graphs is of a completely different nature. Here, the limitation is on the language, not on the theoretical definition of the property. There is a known result that states a necessary and sufficient condition for a graph to be Eulerian (theorem 3.10), so the argument used above for Hamiltonian graphs is not valid here. However, the hybrid graph language does not have the expressive power, at least not without falling again in a factorial-length formula, to state cardinality conditions on edges incident from and to a vertex, as is needed in theorem 3.10.

The other way to describe the Eulerian property would be to find a formula that explicitly describes an Eulerian path in the graph. However, it is very hard to find such a formula, since the hybrid graph logic and many other modal logics are not good languages to talk about edges. One of the reasons for that is the fact that the modal operator  does not differentiate between edges incident from a vertex. We now, using nominals, have names for vertices, but we still cannot keep track of which edges we are using when we walk in a graph. This suggests that a possible solution would be to find a way to name the edges in some similar way to the use of nominals to name vertices. We do this in section 6, where we describe a method to name edges within the framework of a hybrid language and use it to find a formula for the Eulerian property.

The fact that the formula describing Hamiltonian graphs has factorial size makes its verification impossible. Of course, we can never expect to verify the Hamiltonian property in polynomial time, since determining whether a graph is Hamiltonian is an NP-Complete problem [9], but we may try to verify it a little faster than in factorial time. That is our goal in this section.

Let G be a graph with n vertices and let Ln = {i1,... , in}. Let us add a loop to all the vertices in G. We can then define the formula that is valid if and only if G is Hamiltonian.

So, if we are not going to use theorem 3.10, we need to define the Eulerian property with a formula that explicitly describes an Eulerian path in the graph. This is also a difficult task, because of the reasons exposed in the end of section 4. We need a way to identify particular edges, but hybrid languages only have names for vertices. So, we first develop a method to name edges within the formalism of a hybrid language and later use it to define the Eulerian property.

