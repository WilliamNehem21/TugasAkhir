Here, we consider only the two-dimensional case of directed type theory, and define a type theory 2DTT (Section 2). 2DTT admits a simple interpretation in the category Cat of categories, functors, and natural transformations (Section 3). The syntax of 2DTT reflects the fact that Cat is a strict 2-category, in that various associativity, unit, and functoriality laws hold definitionally, rather than proposi- tionally. Although it is not necessary for the applications we consider here, it seems likely that 2DTT could be extended to higher dimensions, and that more general interpretations are possible. Our main motivating application of 2DTT, which we sketch in Section 4, is extending functorial syntax [21,14] to account for dependently typed and mixed variance syntax.

Finally, we speculate on some additional applications of our theory. First, we may be able to recover existing examples of directed phenomena in dependent type systems, such variance annotations for sized types [1], implicit coercions [6], and coercive subtyping [28]. For example, we may consider a translation of coercive subtyping into our system, using functoriality to model the lifting of a coercion by the subtyping rules. Because uses of map are explicit, our approach additionally supports non-coherent systems of coercions, and it will be interesting to explore applications of this generality; but the coherent case may provide a guide as to when instances of map can be inferred. Second, directed type theory may be useful as a meta-language for formalizing directed concepts, such as reduction [33], or category theory itself. Third, directed type theory may be useful for reasoning about effectful programs or interactive systems, which evolve in a directed manner (FIXME connects homotopy theory and concurrency). For example, we could define a type of interactive processes with transformations given by their operational semantics, or a type of processes with the transformations given by simulation.

