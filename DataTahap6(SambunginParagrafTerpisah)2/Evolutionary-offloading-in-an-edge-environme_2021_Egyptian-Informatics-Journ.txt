This paper proposes an effective offloading strategy in a mobile edge environment using the queuing networks and an evolutionary algorithm, namely the genetic algorithm (GA). The queuing network is used to model the waiting time and the service time of the mobile tasks on the edge servers. The genetic algorithm finds the best allocation of mobile tasks on the edge servers to minimize tasks response time considering the transmission times and the load conditions on edge servers represented by the waiting times and the service times which are calculated using the queuing network. The proposed GA-based offloading algorithm is compared with another evolutionary algorithm, namely particle swarm optimiza- tion (PSO). Experimental evaluations show that the GA-based offloading algorithm outperforms both of round robin offloading and the PSO-based offloading algorithms, and effectively improves mobile appli- cations response time.

computing resources located at the edge of the network at a one- hop distance from mobile devices [9]. Offloading mobile tasks to cloudlets aims to improve the response time by exploiting location proximity and low latency, and to reduce the power consumption by using wireless communication rather than WAN communica- tion which consumes more energy. However, the resources capac- ity of cloudlet servers are limited compared to the cloud, and improper mobile task offloading and allocation decisions to the cloudlet serevers will lead to increase the response times as the number of offloaded mobile tasks increases [10]. Therefore, it is challenging to design an effective mobile tasks offloading strategy considering the constraints of the resources in a mobile edge envi- ronment, including: (1) the tasks transmission time between exist- ing existing existing cloudlets, the waiting time, and the service time at the cloudlet servers.

The rest of the paper is organized as follows. Section 2 introduces the related work of mobile tasks offloading in an edge environment. Section 3 presents a formal system model of the optimization problem, while Section 4 outlines the proposed evolutionary-based algorithms for solving the analyzed optimiza- tion problem. Section 5 the experimental results of the proposed evolutionary offloading algorithm are analyzed and discussed. Finally, Section 6 summarizes and concludes the paper with direc- tions of possible future research works.

Evolutionary algorithms have shown an outstanding results in tasks and virtual machines scheduling in cloud computing [23,24]. In terms of task offloading on a mobile cloud computing architecture, in [25], an offloading strategy using evolutionary algorithms is proposed. The proposed strategy uses four different evolutionary algorithms, namely genetic algorithm, differential evolution, particle swarm optimization, and shuffled frog leaping algorithm. Experimental results have shown that the genetic algo- rithm outperforms the other algorithms. Moreover, in [26], an evolutionary-based offloading strategy using grey wolf optimiza- tion in a mobile cloud computing environment is proposed.

Optimization and Particle Swarm Optimization. The main goal is to load balance the fog nodes and minimizing the response times of the IoT tasks while considering the communication cost between the fog nodes and the IoT devices. Our strategy is based on queuing network and genetic algorithm that aims at minimizing the com- pletion time of the offloaded tasks considering the communication time, waiting time, and the service time on the edge servers.

The genetic algorithm (GA) is an evolutionary algorithm based on the biological concept of generating populations of random solutions and simulating the evolution of natural selection [32]. The GA is widely used for the solution of diverse NP-complete problems, including traveling sales man problem, and cloud com- puting scheduling and load balancing [33]. Each possible solution is encoded as a chromosome made up from a set of genes. Each

The proposed algorithm commence by initializing the parame- ters, including number of tasks Nts, number of cloudlet node Ncl, maximum number of iterations Niter, number of chromosomes in the population Np, probability of crossover Pc, and probability of mutation Pmu, as shown in Algorithm 1. A random initial popu- lation is generated, and the fitness value corresponding to each individual is calculated. The algorithm iterates for the maximum number of iterations. In each iteration, a single point crossover is applied by generating a random number, and the random num- ber is compared with the probability of crossover Pc. If the ran- dom value is less than Pc, the crossover operation will be performed using a random cross over point. Second, a mutation operation is performed on the resulting new chromosomes between two random genes. Finally, A selection operation is per- formed on the population and the new individuals together, applying the roulette wheel selection. The new population is used for next round of iteration.

The Particle Swarm optimization (PSO) is a bio-inspired opti- mization method by the behavior of bird swarm, Nswarm. Each par- ticle, individual bird, searches for food in search space to find the best food source based on the particle position, the particle best found solution, and the swarm best found global solution [35]. For D-dimensional combinatorial problem, each particle represents a possible solution in the search space. A particle Pi is expressed as aims to minimize the response time of offloaded tasks considering the transmission time and the load conditions on the cloudlet ser- vers. A mobile task offloading algorithm is proposed based using the queuing networks and the genetics algorithm (GA). The pro- posed GA-based offloading algorithm is compared to round robin-based offloading and another evolutionary algorithm, namely the particle swarm optimization (PSO). The experimental evaluations show that the proposed GA-based mobile task offload- ing algorithm is efficient in comparison to the PSO-based offload- ing algorithm and the round robin offloading algorithm. In the future work, a multi-objective function, including response time, energy consumption, and cost, for mobile task offloading in mobile edge environment will be investigated. Further, a task offloading for workflows using different evolutionary algorithms, such as grey wolf optimization, cuckoo search, and sun flower optimization will be investigated.

