In industry, scheduling and a limited number of resources is present in most of its activities. All of this forces to optimize ob- jectives. Literature deals with a great number of different prob- lems. One of the most studied problems is called parallel machine scheduling problem. In this problem, in parallel, a set of jobs have to be processed on a set of machines. In our case, each job is pro- cessed on only one machine without preemption and each ma- chine can process only one job at a time. We call the general case Unrelated in which the processing time depends on the machine where the job is assigned. An example of the Unrelated Parallel Machine scheduling problem (UPM) is a ceramics plant where dif- ferent orders have to be assigned to the different kilns they have. One of the most common objectives for this kind of problem is to minimize maximum completion time, known as makespan or Cmax. Denoted as R//Cmax (Graham,Lawler,Lenstra,& Rinnooy Kan,1979), this problem is NP-Hard even for the case of two identical par- allel machines (Lenstra, Rinnooy Kan, & Brucker, 1977). The most common additional consideration to add to UPM problems is setup duced to solve all combinations of use of resources (in processing, setups and/or shared), obtaining solutions for up to 50 jobs and 8 machines. An exact algorithm is also presented which adapts the methodology used in the most recent papers mentioned in this section for UPMR and UPMS problems. The algorithm allows us to obtain solutions for up to 400 jobs and 8 machines in tests that in most cases give a gap between solutions and lower bounds (LB) of less than 2.7% for the largest instances.

In the literature UPM is widely studied (see Pinedo, 2016 for some references). However UPMS is comparatively less studied. Different mixed integer linear programs (MILP) have been pro- posed for UPMS. Based on the model presented in Guinet (1991), an improvement of this model can be found in Vallada and

A complete instance of 4 jobs and 2 machines are presented. In the first place we show an optimal solution for UPMS and after- wards different types of resources are introduced. Then we found the optimal solution with the type of resources introduced. As is previously mentioned, all resources are renewable and needed dur- ing all processing and setup times.

Notice that no relevant setups are fixed to high values (=7) and all diagonal is zero. It is usual to use diagonal to record the initial setup of a job when it exists, i.e. the setup necessary to do on a machine i before the first job j scheduled on this machine is pro- cessed.

machine 2 appears a set of three values that represent in the first place the needs of specific resources for processing (P-resources). In second place and in italics the specific resources needed for se- tups (S-resources) and in third place and in bold the need of un- specific resources shared by both (H-resources). So, the three num- bers above M1 and below M2 represent: P-resources/S-resources/H- resources.

t=3 the first term adds up to 2 (processing), the second term adds up to 4 (setups) and the third term adds up to 12 (shared). This last term exceeds the maximum for this type of resource (=9). For t=4 and t=5 the sums of the three terms are respectively 0, 8, 12 with the limits of 3, 6, 9. Finally for t=6 the sums are 2, 0, 12. In case (b) the same solution is represented taking into account not to

setups) -UPMR-. In particular, the MILP for the UPMS problem was widely studied and in a recent paper (Fanjul-Peyro, Ruiz, & Perea, 2019), the MILP used gives solutions up to 400 jobs and an exact method based on that MILP give solutions up to 1000 jobs and 8 machines with less than 0.8% of gap against Lower Bound. So, an adaptation of this MILP has been used in this paper. In the case of the UPMR problem, a packing-based model of Fanjul-Peyro, Perea, and Ruiz (2017) has been used recently. In this paper we improve and adapt this model.

the job k processing. Finally, (18) force at least one of the binary variables to have the value of 1. Since the constraints are defined for all j and k, this implies that, at least: or j precedes k without overlapping its processing on the time axis, or k precedes j with- out overlapping its processing on the time axis, or the j resource coordinate is higher than k without overlapping its processing re- sources on the P-resources axis, or the k resource coordinate is higher than j without overlapping its processing resources on the P-resources axis.

lap unspecific shared processing resources among themselves nor overlap unspecific shared setup resources among themselves. The unspecific shared processing resources should also not overlap with the unspecific shared setup resources. For shared resources in the processing/processing case, in the previous constraints to avoid this overlap (16), (17), and (18), it is necessary to change su- perscript P for superscript Hp. Similarly, in the setup/setup case, in the previous constraints to avoid overlap (19), (20) and (21), it is necessary to change superscript S for superscript Hs. Finally, in the processing/setup case, order is important and its inverse, setup/processing, should be considered together as is shown in the following constraints:

Although it is not studied in this paper, extending the problem to more than one resource of each type is as simple as adding a new set of constraints of the corresponding type, e.g. if two differ- ent specific processing resources are included, it would be enough to add a new set of constraints (16), (17), and (18) with their corre- sponding values. Other models based on time are studied but ob- tain worse results as is shown is Appendix A.

be shown. All experiments were carried out on virtual machines with 2 cores and 16 GB of RAM with Windows 10 64 bits as op- erating system. Virtual machines come from an Openstack virtual- ization platform running on 12 blades with 12 cores AMD Opteron Abu Dhabi 6344 processors 2.6 GHz and 256 GB of RAM each one.

In small instances, we set the time limit in 3 hours for the model and the Three Phase Algorithm (TPhA) in order to give them the same time as Tran, Araujo, and Beck (2016). For medium and large instances used with TPhA, 30 min was fixed as the time limit. However, the behavior of the Three Phase Algorithm with time is also studied in Appendix A.

In this paper the distribution times for processing and se- tups use the same as Tran, Araujo, and Beck (2016) and Fanjul-Peyro, Ruiz, and Perea (2019), previously introduced in Arnaout, Rabadi, and Musa (2010) with small, medium and large instances. With a processing distribution of U(50,100) and setup distribution of U(50,100), small instances were randomly generated with 10, 20, 30, 40, 50 jobs and 4, 6, 8 machines. Initial setup is used in all instances.

a similar behavior to that of medium instances: an increase of jobs gives a decrease of gap. Now the total average value of gap is 5.09% but with average values lower than 3.1% for all types of resource except the last two studied.

Summarizing, for small instances the MILP proposed can give solutions for these hard problems but with the increase of num- ber of jobs, it begins to fail. TPhA can obtain similar values to the model for small instances and can reach solutions at least up to 400 jobs. Despite the fact that gap seems great, especially for more complex cases, an approximate solution and lower bound can be presented. Gap decreases with the increase of number of jobs, reaching less than 2.7% for 400 jobs and all types of resources ex- cept the last two harder problems when resources specific for se- tups and shared resources are both present.

Other MILP models can be considered. In the MILP employed in this paper, a spatial approximation is used when the strip-packing problem is adapted to be used with resources. However, a tempo- ral approximation could be used. Based on Edis, Oguz, and Ozkara- han (2013) and as was done in paper Fanjul-Peyro, Perea, and Ruiz (2017), the temporal model used there was adapted to UPMSR but has problems giving solutions even for instances of 10 jobs (not included here). A more promising temporal approach came when the finishing times of processing and setup were considered. The new input data for UPMSR temporal MILP are:

U(1,49) and U(1,99) and five resource types i.e. specifically for pro- cessing (P), specifically for setups (S), shared resources (H), when types P and S are present (P+S), and when all types are present (P+S+H). Notice that the number of instances rises to 3,750. Since the model returns no feasible solutions up to 30 jobs when shared resources are present (cases H and P+S+H), only jobs from 10 to 30 are considered in these cases and jobs from 10 to 50 for other cases (P, S, P+S) as in the main part of the paper.

On average, the results are similar for all these distributions. For each distribution it seems that some types of resources make the problem easier or harder, which depends on dominion. The bal- anced distributions have intermediate values. No appreciable dif- ferences can be found in the use of the two different balanced dis- tributions studied.

