properties of a system), and in synthesis (to actually construct the real sys- tem). In model-based development often many design tools are used for dif- ferent needs. These tools need to be integrated in a coherent framework that ensures semantic interoperability. The various design tools must share seman- tics: that is the meaning of a model must be the same across multiple tools. One such need comes up in the embedded systems community where Matlab Simulink/Stateflow (MSS) is used for simulation while hybrid automata based tools (like, for instance, Charon [2]) are used for verification.

Simulink has a rich set of model elements (Simulink blocks) covering various areas of signal processing, and continuous dynamics and discrete behavior can be mixed in arbitrarily. On the other hand, HSIF has a clean separation between continuous and discrete behavior. Mapping arbitrary MSS models that have complex interactions between continuous and dynamic behavior are very difficult to transform into a HA. The pragmatic solution was to choose a subset of Simulink/Stateflow that maintains a clean separation between the continuous and discrete behavior. We have also restricted the supported primitive blocks from MSS to a carefully chosen set that provides a useful coverage. The supported Simulink blocks are as follows: algebraic approach [6]. A production (also referred to as rule) is the basic unit of transformation and it contains a pattern graph that consists of pat- tern vertices and edges. Each pattern element has an attribute called role that specifies what happens during the transformation step. A pattern element can play one of three roles: Bind, Delete, New. The execution of a rule involves matching every pattern object marked either Bind or Delete. If the match is successful and an (optional) guard condition is true, then for each match the pattern objects marked Delete are deleted from the match and objects marked New are created.

The translation algorithm mentioned in Section 4 has been implemented using GReAT. It contains 131 rules, 40 compound rules and 22 test/cases. The implementation is divided into two parts, the first deals with finding all the discrete locations in the Simulink/Stateflow diagram and the second deals with inferring the continuous dynamics for each location.

We have described a method for converting MSS models into HSIF mod- els. The MSS models may contain continuous time blocks, Stateflow blocks, and switches, while the resulting HSIF model consists of a hybrid automaton that exhibits the same dynamic behavior as the original MSS model. The transformation has been specified using a formal technique based on graph transformations.

