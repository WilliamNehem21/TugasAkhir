The need for research in the area of recommender system in modern society is activated in response to address the potential challenge of information overload which hindered the users timely access to items of interest over the internet [1]. This however, calls for a need to find the solution to the information overload by filter- ing, prioritizing and efficiently delivering relevant information to users, hence the birth of recommender system [1]. Recommender systems are regarded as tools that generate recommendations to the target users by leveraging various kinds of knowledge and information about users, items and past records of user-item inter- actions. During the user interactions with systems, his actions and feedbacks (such as, ratings, like/dislike, purchase, browse histories etc.) are usually collected and stored in a database which can be used to generate new recommendation for next user-system interactions.

contributions [15], proposed a unified tag recommendation model which extends PITF method by integrating both time awareness and personalization aspects and adding more weight to user-tag and item-tag interactions, respectively [32]. Unlike the common power-form functions employed by the existing temporal models [33], the authors utilized a temporal weight in the form of expo- nential intensity function which was proven more efficient in mod- eling user-item interactions. [34] provided a novel approach which focused mainly on identifying the semantic attributes extracted from user-side information, including the user sentiments, the number of interactions, and objectivity among others. To achieve that, the authors employed a 3-dimensional MF method that takes the temporal alterations into account.

However, one of the draw backs of tensor model is sparsity problem. That is, the higher the order of tensor model is, the more severe the sparsity problem is [34]. This leads to a high space com- plexity, time-consuming and slow convergence rates in the learn- ing process. Moreover, the previous temporal model [20] is based on a strong assumption that the concept drift of user preferences is captured by the transition matrix. With this approach, it is very difficult, if not impossible, to measure the quantitative drift rate. Secondly, it is not sufficient for the tractability of item changing properties as it assumes that items features are invariant over time, and thus focused only on the preference changes of individ- ual users.

As people changed their preferences for items over time, the user preference model at one time may not be valid for pre- dicting user preference at a future time. Likewise, the item latent vector changes as item popularity change over time. To this end, we represent the user feature matrix P at time t by P(t), and the user latent vector at timet, is represented by Pi(t), for i = 1, 2, .. ., m. Similarly, Q (t) and Qj(t) are also defined in the same manner.

In order to track the perceived changed preferences, we first store the latent vectors at time point t, denoted as Pi(t) and Qj(t). Then, we perform an update training and obtain a new latent user vector Pi(t + 1) and the corresponding item vector Qj(t + 1) on the new batch of the ratings. There are different methods for calculat- ing dissimilarity between two concepts. Matuszyk strategy to mea- sure how much the latent factors have changed compared to the previous time point was by calculating the squared difference between Pi t 1 and Pi t [10]. This strategy however, proves to be sufficient only when the change involved is a gradual change type. Therefore, we proposed a Hellinger distance measure to com- pute the similarity scores in this study. The Hellinger distance measure is a feature based drift detection method that have the and items for tracking changes in their latent vectors. The param- eters that we adopted for our experiments are: the number of k factors = 40, the learning rate a = 0.003, and the regulator k = 0.01. To obtain the latent factors for each time period, we per- form 50 iterations of SGD. The parameters for computing the user

MF. Matrix Factorization method is the most widely and suc- cessful method for rating prediction in the context of recommen- dation tasks [31,32]. Here, we assume that user behaviours as well as items features are time invariants and therefore ignore tracking their changing situations.

To better understand the performance of dui-TMF -c for individ- ual latent factors using different values of c, we conducted a qual- itative analysis on the test set of the Ciao dataset. We found that when c is set to 0.1, the result shows better performance for a number of 41 users but found to be worst for 347 users. When increasing c to 0.5, it shows to be improved for a numbers of 104 users but worsened for 284 users. This implies that, for 104 users, c = 0.5 is a better choice than c = 0.1 but for 284 users, reverse is the case. The same observation is made when increasing c to 1, related drift scores should be computed for each user and item separately. Our approach to improving the adaptivity of recommenders is by continuously updating the obsolete information. We extended a state-of-the-art Matrix Factorization method for the implementa- tion of our proposed method. We performed several experiments on four datasets with rating feedback. The main aspect that we plan to investigate in our future work is to explore several drift detection methods that allow learning the concept-drift by per- forming rigorous change detection analysis instead of relying on

Kowald D, Seitlinger P, Kopeinik S, Ley T, Trattner C. Forgetting the words but remembering the meaning: Modeling forgetting in a verbal and semantic tag recommender. Lecture notes in computer science (including subseries lecture notes in artificial intelligence and lecture notes in bioinformatics, 2015.

