explores the ensemble to gain additional speedup. Besides quantum parallelism, intrinsic from the use of superposed quantum states, a kind of classical single- instruction-multiple-data parallelism is achieved by making quantum systems (the molecules) working in parallel, as in classical computation. In the PQC the whole state is prepared in such a way a subset of qubits is in a mixed state representing the communicating quantum computers while the other qubits in pure state are the proper argument registers of each quantum computer. The authors have shown that the PQC enables additional speedup to important quantum algorithms like Grover and Shor. Specially, unsorted database search can be speedup greatly.

We have noted that this particular way of structuring the state of the PQC fits with what is well know as multithreading programming. Basically, in a multi- threading environment, a process has many execution threads, each of which run independently and which may share a common memory area. What is interesting here is that computationally, the PQC quantum state, living in a Hilbert space, is interpreted as global. Hence, all quantum computer of the PQC share a common global memory area.

The idea in the PQC [9] is to run many copies of quantum systems, which are in the ensemble, in parallel. The goal, as in classical computation, is to achieve additional speedup running tasks in parallel. By running several identical quantum computers in parallel, unsorted database search, for instance, can be sped up greatly [4].

This quantum computation is defined as the parallel quantum computing. In fact it is N1 quantum computers working in parallel. The computation Uc can be the same for all molecules, but the databases, numbers represented by different molecules, can be different.

and executes it atomically. A memory transaction is committed only if no other transaction has modified the memory its execution depends on. If there was con- current access to shared variables the transaction is restarted. An execution of atomically block must guarantee [10]:

In this section, we briefly review state vectors represented as monads and the density matrix approach. Then we discuss how superoperators can be well fit in the concept of arrows. The presentation is in the context of the functional programming language Haskell.

In such a way we can define a global quantum state which can be accessed an manipulated by all parallel/distributed processes. This seems to be exactly what we need to code the multithreading PQC presented in Section 2. The use of superoperators can greatly help the processes to access only small parts of the state.

procedure using the QSt . The idea is to arrange the state inside the QSt as proposed in Section 2. In this way we will have a quantum state shared by Alice and Bob. The first qubit inside the QSt is the identifier, saying if the state is from Alice or Bob.

