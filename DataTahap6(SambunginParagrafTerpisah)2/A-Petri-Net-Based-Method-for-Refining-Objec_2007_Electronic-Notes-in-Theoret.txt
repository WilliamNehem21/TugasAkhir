In the past two decades, object orientation has been an influential discipline in software engineering. According to the principles of object orientation, a system is considered as a collection of objects which are interacting with others in order to accomplish the system functionalities. Conceptually, an object is an entity that encapsulates states and behaviours. It can be analysed in dual-aspects, namely, structure and behaviour. [1] [2] [3] [4] In the former, objects with the same attributes are grouped into classes while classes having common attributes are generalised to form an inheritance hierarchy. In the latter, objects exhibit different behaviours on interacting with others, thus demonstrating different object interaction scenarios. This paper primarily focus on the behavioural aspect of object-oriented system.

Different abstraction between intra-object lifecycle and inter-object interaction. It is very difficult to derive individual object behaviours (within the object lifecycle) from the object interaction scenarios (among multiple interacting objects) because of the difference in abstraction (intra-object versus inter-object). In the literature of object-oriented system design, there is a lack of systematic approaches to solving this problem satisfactorily.

The rest of this paper is organised as follows. In Section 2, we show the spec- ification of object interaction scenarios as labelled nets and the synthesis of these labelled nets (Step 1). Section 3 describes the elimination of duplicate labels of the integrated net so obtained (Step 2). In Section 4, we show how the individual object behavioural specification can be obtained through projection (Step 3). Section 5 is the conclusion. It should be noted that readers of this paper are expected to have

For an object interaction scenario specified as a labelled net, the location where an event occurs is represented by a transition and the location of a condition by a place. The semantic meanings of conditions and events are denoted by the labels of the corresponding places and transitions, respectively. For an event to occur, some conditions must be fulfilled in advance and some afterwards. These pre-conditions and post-conditions are represented by the pre-set and post-set of the transition representing the event.

Definition 3.1 Let S be a uniquely labelled subnet of a labelled net N. The pattern of S in N, denoted as Patt(N, S), is a condition-event net, with an identical structure and label allocation as S while ignoring identities of places and transitions of S.

Identify group of common subnets for fusion. These groups of common subnets need to be maximal and disjoint for two reasons. First, the net so obtained after the fusion will become uniquely labelled. Second, the number of groups of common subnets for fusion can be reduced to minimum as they are maximal.

Transformation of common subnets. In order to maintain firability of transitions and flow of tokens, the common subnets are transformed before fusion. Based on coloured Petri nets, [20], a unique colour is assigned to each common subnet (colour labels of its ingoing and outgoing arcs). A token flows into a common subnet is coloured according to the colour label of the ingoing arc. Its colour is reset as it flows out via the corresponding colour-labelled outgoing arc. Also, the subnets are converted to PP-type by appending dummy places and transitions.

events occur and the locations at which conditions hold. The causal relationships between conditions and events are clearly delineated by flow relations between places and transitions. Many desirable properties, such as liveness, boundedness, safeness and reversibility, can be effectively analysed through many well-known analysis techniques on Petri nets. Besides, since the specifications are uniquely labelled net, conditions can be readily implemented as unique sub-states and events as unique operations.

In this paper, we proposed a Petri-net-based method for refining a given set of object interaction scenarios into individual object-based behavioural specifications and illustrate it using the OACS example. The proposed method has a number of distinctive features. First, the given object interaction scenarios are formally specified as labelled nets which are unambiguous and semantically rich. Second, the object-based behavioural specifications are rigorously derived from the object interaction scenarios through synthesis and projection. They reflect exactly the functionalities of the object interaction scenarios. Third, desirable properties, such as liveness and boundedness, can be analysed through many well-known analysis techniques on Petri nets. Fourth, the specifications contain no duplicate labels so that they can be readily used for implementation purposes.

