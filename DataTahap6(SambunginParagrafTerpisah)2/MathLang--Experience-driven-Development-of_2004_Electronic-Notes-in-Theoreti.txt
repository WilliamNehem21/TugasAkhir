Data management has become an important area for automation. Editing, storage, publishing, data retrieving and other computations are gratefully helped by computers with appropriate software. Nowadays computers could be used at each step of writing texts, the use of pen & paper may not be essential. Could we make the same remark for mathematical work? Would it be possible for a mathematician to use computers as a help tool from scratch to treatise?

The first concern is to be able to automate computations of data encoded in MathLang to use computer skills. For this reason we have designed Math- Lang using a full symbolism (that is to say every element of the language consists of recognisable symbols). This facilitates the manipulations that can be done by the computer.

When using existing formal languages to write mathematics, one needs to be sure that the mathematics used will fit in the underlying logic of the lan- guage. This restricts the expressivity of the language. To cover all math- ematics, MathLang is intended to describe the structure of mathematical texts and their reasoning steps.

Since MV and WTT are said to help provide a language to encode math- ematics which can be used at every level of mathematical work, we set out to test these languages through the Foundations of Analysis (E. Landau [9]) which is already fully formalised in Automath [13] by Bert van Benthem- Jutting. Since our aim is not the full formalisation, but an encoding which allows a full formalisation at a later stage, we felt that choosing a fully for- malised book for our encoding, would allow us in the future, to compare the already existing full formalisation, with the full formalisation that could be built on top of our encoding. This paper reports the extensions that had to be made to WTT to encode the first chapter while remaining faithful to

Lang constructions: flags, definitions by cases, blocks and references. As to the notations we use to print MathLang texts, note that the language Math- Lang is still in development since the translations of the other chapters will no doubt call for further extensions. For this reason the MathLang texts given here are rendered with an experimental syntax which we intend to improve. Currently, the concrete syntax of MathLang is implemented using the XML recommendations. We have made this choice to facilitate transformations on MathLang data. One of these transformations produces automatically the renderings shown in this paper. Below is an example. (i) being line numbers and {i.i} being block indices. In a line, the symbol D separates the context from the new statement or the new definition.

The set Z describes the four constructions which declare a new variable. In the first two constructions, the colon states the belonging of the de- clared variable. The variable on the left side of the colon belongs to the entity on the right side of the colon. The first construction introduces a term variable by stating in which set the term belongs (expression from S). The second also introduces a term variable but by stating of which noun it is an instance of (expression from N). With the keyword : SET (resp. : STAT), the third (resp. fourth) construction introduces a new set (resp. statement) variable.

In MathLang, a definition by cases defines a constant using several lines. Each line being one case. This construction brings MathLang closer to the original text for two reasons. First, to each original case corresponds one case in MathLang. Second, in this encoding we are not using additional constants. We do not need logical symbols as we did in the earlier translation of MV and WTT. These logical constructions may not always be explicitly defined in the mathematical text.

In MathLang, a block denotes a structure. It is possible to restrict the definition of a constant to a precise block, we call this constant local. An example of these local constant could be seen in our translation of the first chapter of [9] with blocks {2.5.1} and {4.2.1}. Each of these blocks represents a part of a proof of a theorem (respectively part A of Theorem 4 and part A of Theorem 28) where the local constants a and b are defined.

These rules assign a type to the expressions taken from the phrase and the sentence levels. That is to say variable instances, constant calls, binding expressions and adjective attributions. A special rule rec-cons allows calls to annotated constant which is currently being defined (c' with its input types wti). This rule allows recursive definitions of constants (see rules full-def and case-def-first).

These rules check the coherence of contexts. The first one states that an empty context is a valid context. The last one checks if an assumption in the context is a well formed statement expression. The three remaining rules correspond to the three constructions of variable introduction. The grammat- ical category of the introduced variable must fit the kind of construction used: either a set or a statement or a term.

A block could either be empty, end with a line or end with a block. The rules below describe how to build a block from an already well-formed one. This is done by adding a line or a sub-block to the existing block.

We have implemented a type checker that analyses a MathLang text by applying the rules of the type system (see Section 3). This software has been programmed using Camlp4 (parser part) and OCaml (type inference part). This program checks the typing of a given MathLang document. If the typing succeeds, the XML document is then considered as a well formed MathLang

As we said earlier, MathLang is still under development. We believe that it is important that this development be guided by existing mathematical texts and practice and that the encoding should be in the language under development and not in syntactic sugaring versions of it. It is also important that the metatheory and implementation be as faithful as possible to the language itself.

Specifications. The MathLang language is still in development. We need to incorporate references in the MathLang syntax and to put the notion of blocks into action by adding some constructions to enable us to derive information about blocks. These extensions will always be made in parallel with the guiding translation work. At every stage, we will make sure that the metatheory is well developed and that the implementation is faithful to the language.

Framework. Because our language will be as exhaustive as possible in its way to encode mathematical texts we will need to have a specific ed- itor to assist the mathematician. This editor should have a user friendly interface. It should be able to print mathematical symbols on the screen. An integrated checker should give instantaneous feedback about the type analysis of the text. We have planned and started to use the What-You-

Y. Baba and M. Suzuki present a grammatical analyser which extends its own grammatical rules on the fly. After translating one sentence, the gram- matical analyser will be able to recognize the same kind of pattern used by the mathematician in the rest of the text.

