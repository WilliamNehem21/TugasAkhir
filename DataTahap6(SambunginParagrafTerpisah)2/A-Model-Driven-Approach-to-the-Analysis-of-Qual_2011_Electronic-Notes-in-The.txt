The Service-Oriented Architecture (SOA) architectural style is one of the most used in the development of distributed applications [22]. Due to this, everyday we have more and more available web services offering the same or similar functionality. It becomes a necessity to consider not only functionality but also the quality (non functional properties [7]) as an important factor for selecting the best service [11]. Bass [1] proposes the use of quality scenarios to precisely define the application quality attributes.

should be done [7]. To this, we must sum up the optimization strategy definition to find the best service from a set of quality combinations given by a client [21]. These combinations are expressed during the design stage through quality scenarios [9]. However, during runtime, it is not always possible to guarantee the compliance of these quality scenarios, due to the fact there are still externals factors such as failures in services offered by 3rd parties, or defects in legacy applications that implement the supplied services.

This paper is organized as follows. Section 2 deals with the self-adaptability concept. Section 3 gives an introduction to the case study used to validate the given proposal. Section 4 gives our proposal, explaining the characteristics and functionality, from development to execution. Section 5 shows our experiment to sustain the proposal and its results. Section 6 presents various other proposals for the same thing based on quality attributes and their respected authors, and finally Section 7 concludes with our results and termination of our proposal.

Self-adaptive systems, according to [19], [14] and [6], adapt themselves to changes in running conditions with a minimum, or no human intervention, with the means of providing reliability, robustness and availability. The running conditions refer to all elements observable by the system, such as user-inputted information, external hardware elements or program rules. The key action to this kind of systems is the fact the life cycle should not be stopped after deployment. Its life cycle should con- tinue and be capable of constantly evaluating and responding to changes presented [18].

This case study focuses on the Property Registry business process, which consists of the publication of properties that may be leased by a client. Although, we are paying specific attention to the Landlord Risk Scoring activity. The objective of this activity is to verify there are no legal impediments in order to accept someone as a provider. This activity is critical, and if faults occur, the system should adapt itself in order to find an alternative service, with a view of guaranteeing the uninterrupted operation of the system.

The Utility Repository (U) contains information relating to adaptation-objective preferences. According to the DSL, when a failure on the quality attribute scenarios is detected, Alternative Services are evaluated in order to replace the service where the fault has occurred. This selection is made with a set of services implementing the same functional contract of the original service. Our approach gives priority, when an alternative service is being selected, to the greatest number of quality scenarios

The Self-Adaptive system model performed a join process between both Domain Repository and Goal Repository components. This model introduces one element that is fundamental to facilitating system self-adaptation, namely Virtual Service (VS). A VS can look like a membrane to cover services used to define an adaptation rule. The VS seeks to free the consumer from a specific service. Additionally, the VS handles the search for better services during execution and constantly monitors the compliance of the quality scenarios of said service. If there is a violation, the VS validates the adaptation rules and replaces the violating service with a viable alternative.

The process of ensuring a service fulfils the quality scenarios consists of the result- ing value calculate from its quality attributes. This proposal concentrates on the uncertain quality attributes, those that are constantly changing. These uncertain attributes are Response time, Availability and Reliability.

In [23] a method based on quality attribute scenarios to find and analyse po- tential points of self-adaptation in software architecture during the design stage is proposed. Extend an ADL called ABC / ADL, to store the architecture informa- tion. Information is used directly by a reflective-based middleware architecture, called PKUAS, for making self-adjustments in implementation. Some limitations in this proposal are using EJB components. While the use of these components is not really a limitation at the functionality level, it certainly is at a interoperability and scalability one. In a word, this proposal is tied to implementation of technology. This proposal is not clear about the possibilities of including new components. The system design is separate from the implementation, so the implementation may be different from the solutions proposed in the architecture. In practice this should not happen, but it is a risk taken to manage this separation.

