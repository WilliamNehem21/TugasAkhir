Nowadays applications tend to be executed on distributed environments provisioned using on-demand in- frastructures. The use of techniques such as application containers simplifies the orchestration of complex systems. In this context, microservices based architectures offer a promising solution for what concerns soft- ware development and scalability. In this paper, we propose an approach to study the automatic scalability of microservices architectures deployed in public and private clouds. A Fluid Petri Net model describes the characterise of the platform, and a real trace drives the approach to consider a realistic scenario. Our focus is on evaluating the performances, costs and energy consumptions from both the service provider and infrastructure provider point of view.

The goal of our modeling process is to evaluate the performances, costs and energy consumptions related to the provisioning of a MBSA from both the service provider and infrastructure provider point of view. In particular, we divide the evaluation into two parts: first we consider the autoscaling strategy, then we focus on the pro- visioning scheme. The autoscaling strategies will be described using pseudo-code algorithms, while the provisioning schemes will be modeled with Fluid Stochastic Petri Nets (FSPN).

Autoscaling strategies are characterized by two important features: the initial allocation, and the consolidation policies. The initial allocation policy defines the main logic according to which the different MSs are mapped onto available VMs when the system starts the operations. The consolidation policy defines how the MSs are mapped onto available VMs according to the dynamics of the workload, i.e. the growth or decrease of demand for the various instances for the different MSs.

In the second step, the available cloud resources and their management policy are considered. As costs are dictated by the usage of resources in time and volume, the number of VMs in use are the most relevant cost factor. Two main cases are in the scope of our study: private clouds and public clouds.

In the case of public clouds, instead, costs are standardized according to the number of VMs used per time billing unit (e.g., one hour): the minimization of costs is thus connected to a better usage of the minimal number of VMs possible, but with the maximum exploitation of resources in the time billing unit.

VMs are characterized by a startup time Tup and a shutdown time Tdown. In this phases, VMs are running, but cannot be used to serve any of the incoming traf- fic. Since they are running, they consume energy: note that the instances of the MSs running over them are considered to be inactive and do not share the work- load with the other instances. Startup phase is modeled by deterministic transition Ready (characterized by firing time Tup) and place Starting. Shutdown is modeled by deterministic transition Off (with firing time Tdown and place SuttingDown). Both transitions are infinite server, since more VMs can be starting or shutting down at the same time.

increasing the cost, by exploiting the time-slot based billing policy usually applied by providers. In this study, we have set Tbill = 8 h., again slightly larger than the one commonly used by cloud providers, to emphasize its effect. As it can be seen, in many cases keeping the VMs active until the next billing period, can leave the system ready to accomodate new workload fluctuations and generally give more resources than the one actually needed, allowing to provide a better quality of service.

identified by run. As expected, actual purchased VM time grows as a step function, due to quantization of billing periods. As expected, the full consolidation policy, strategy C, is the one that provides the least cost in term of VMs running hours, and the non-consolidating policy is the one that results to be the most expensive.

