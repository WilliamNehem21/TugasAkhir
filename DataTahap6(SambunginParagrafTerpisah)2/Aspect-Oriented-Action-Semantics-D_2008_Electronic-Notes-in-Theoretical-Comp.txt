The modularity of programming language descriptions allows the designer to describe each programming language feature in a separated module that can be studied independently of others. Action Semantics is a formal notation that produce modular descriptions of programming languages. This paper proposes to use concepts of Aspect-oriented programming to improve the modularity of action semantics descriptions. To achieve this goal, an aspect-oriented notation is proposed and applied to describe some programming language concepts.

Modularity is the property of systems that measures the extent to which they have been composed out of separate parts called modules. Each module is responsible for implementing a particular feature of the system, independently of other systems el- ements. This independence minimizes the effects of inserting, removing or changing modules on the rest of the system and facilitates its manipulation.

In programming language descriptions, modular documents organize the lan- guage specification in independent fragments, each one responsible to model some language feature (a command, expression, etc.). This organization is useful to fa- cilitate the analysis of complex modern languages. However, the methodologies more often used to describe language semantics, such as Operational Semantics and Denotational Semantics, produce specifications with poor modularity. The most important modularity problems in these formalisms arise because their descriptions handle directly with the information flow existing in programming languages. This flow is heavily dependent on the language features and may be completely redesigned when the language is changed. For example, when a designer wants to describe the denotational semantics of an expression language and this language is formed only by constants and operations over constants, the semantics is expressed as a value and the evaluation function as:

In action semantics, the meaning of a program is given using predefined seman- tic entities called actions and yielders. Actions are dynamic entities that can be executed, producing modifications in the program state. Yielders define expres- sions whose evaluation results depend on the current state and are used to model computations dependent on that state.

To solve this problem, several research works ([2,6], [5] and [1]) propose a new style to describe programming languages. These papers propose that a program- ming language description should be formed by the union of programming language elements. Each element is a self-contained object with all information necessary to describe it: the syntax, semantic functions and semantic entities. Using the new description style, the designer can define a language feature in a single and independent document section, facilitating its reuse and redesign.

This paper proposes an aspect-oriented notation for action semantics descriptions. AOASD is useful to increase the modularity and reduce the complexity of action semantics descriptions as shown in case studies. These results stimulate further investigation on the study of the descriptions of complex languages using aspects and provide supporting tools for AOASD. In addition, extensions to incorporate new aspect-oriented concepts such as inter-type declarations should be inserted in AOASD to improve the power of this technique.

