Formal notations such as Z provide powerful support for writing clear specifications, and for undertaking proofs of properties of those specifications. In this paper, we explore one particular style of specification, with applications in control theory and real-time specification. The notation we define permits the accurate description of concepts in these fields without significant overhead or notational clutter. This notation has long been used by practitioners in these fields; we demonstrate that it may be defined within Draft Standard Z, and that the resulting specifications are amenable to proof.

Formal notations such as Z provide powerful support for writing clear specifi- cations, and for undertaking proofs of properties of those specifications. Much of this benefit comes from having a rich language of pre-defined concepts and types to draw on, so that specifications can both be concise and precise, and also accessible. Everything we write in Z could also be written using classical first order predicate logic, but the result would be far less approachable.

A number of pieces of work related to the specification of timing properties in Z are reported on by Duddy et al. [10]. In the section on lifting, they emphasise that when describing the properties of continuous timed histories, an appropriate collection of function operators is essential for writing under- standable specifications. Thus it is appropriate to generalise addition of real numbers to addition of real-valued (history) functions,

In this example we have also seen how a single variable may be used in more than one way. On the left, speed has been explicitly de-referenced in one subexpression and not in the other. Again, the lifting algorithm must take account of types in determining how variables are to be lifted.

A less algorithmic approach is described by Brien et al. [6], achieving similar results by defining a family of lifted functions, operators, and relations. The definitions are similar to that for ( +' ) above, but are careful to avoid the use of points in the definitions wherever possible. This choice is informed by the observation that quantifiers and lambda abstractions tend to complicate proof, and that definitions which refer to functions without mentioning their points of application are often much easier to use.

In this section, we construct in Z the necessary apparatus for general lifting. We incorporate features of both approaches presented above, but are largely inspired by the overloading approach of Section 2.2. (An alternative, different in form rather than structure, would be to follow the functional programming literature, for example the work of Backus [2], or indeed, in the modern style, a presentation using monads [20].)

Observe that this is closely related to the approach taken by the boolean- valued functions of Duddy et al. [10] and Brien et al. [6]. In our approach, however, we avoid the need to lift partiality into the predicate language, and so stay within classical Z.

In this section we present two applications of the lifting capability defined above. Firstly, a way of making abstract real-time specifications more concise and readable is presented. Secondly, a formalisation of the algebraic reasoning methods traditionally used by process control engineers is given.

In this example, we demonstrate that Z, with lifted operators as defined above, can be used in solving problems in process control theory. This is an area of study with an extensive theory, well-documented in the literature [4,12]. By rendering that theory in Z we make possible checking and analysis using existing Z tools. Directly reusing control theory principles in this way also contrasts favourably with previous work on modelling embedded systems in traditional computing formalisms such as Petri Nets [8], state-machine mod- els [9], state-transition automata [1] or interval calculi [17], where an entirely new modelling approach is developed from scratch.

This straightforward algebraic proof using lifted operators is dramatically sim- pler than performing such proofs without lifting. In an earlier paper [11], we undertook a machine-assisted proof of a similar property using Z, but with- out any lifting apparatus. Even though we there dealt with the considerably simpler case of single-unit delay, and hence no overshoot behaviour, the proof was nevertheless far more complex.

In this paper we have reviewed two previous descriptions of lifting in Z. In these, results from one algebra (typically the real field) were lifted into another (functions from some set to the reals). One aim of this paper is to bring to a wider audience material which has previously existed only in unpublished technical reports [6,10].

