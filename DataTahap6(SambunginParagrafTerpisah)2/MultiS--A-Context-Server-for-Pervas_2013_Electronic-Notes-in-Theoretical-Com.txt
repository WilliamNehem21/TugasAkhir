Context-aware applications are capable of recognizing environmental changes and adapting their behavior to the new context. This process can be divided into three stages: monitoring, context recognition and adaptation. On the monitoring layer, raw information about the environment is collected from sensors. The context recognition layer processes the data acquired from the context and transforms it into information which can be useful for the adaptation process. With this information, the adaptation system can determine what behavior is correct for the application in each different context. This paper proposes a context server called MultiS, which has the goal of solving the problems arising from the context recognition layer, and which includes the following advantages: a) the production of new context data based on the information of

Ubiquitous computing is a vision about the future that was initially raised by Mark Weiser [17]. It is based on the belief that computers will spread throughout the environment. Their presence will be so common that it will not be noticed by the users. Some years later, IBM adopted the concept of Pervasive Computing [14], which is closer to the existing technology. Both wired and wireless devices can be used to provide a service network. The user data, programs and processing power will be available through the network. The service will be provided to the user by means of the resources available in the environment. This paper treats Ubiquitous Computing and Pervasive Computing as synonyms.

The ISAM authors propose an infrastructure where the computational environ- ment is divided into cells. Each cell is composed of wired and wireless nodes. The cells are able to communicate with each other by using Peer-to-Peer protocol [15]. The applications are programmed with ISAM adapt abstractions [2], a programming language built for pervasive applications, together with EXEHDA (Environment Execution for High Distributed Applications) [16], which is the ISAM execution environment. This work forms a part of the ISAM initiative and seeks to propose a context-recognition engine for pervasive applications.

At the beginning of 2005, scientists from The British Computer Society pub- lished a list of what they believe will be the seven greatest challenges to computer science in the next twenty years. One of those challenges is how to build scalable ubiquitous systems. According to this list, Context-Aware Computing is one of the most important properties of Pervasive Computing.

Since several applications will be executing tasks in a given environment con- currently, there is a good chance that some of them will use the same high level of data (e.g. information about the location of a particular user). The support of middleware could save some system resources by sharing the common data between applications. However, although different applications may do this, each application may be sensitive about a given aspect of the environment and have its own particu- lar needs. In view of this, the supporting middleware must enable each application to specify how it wants to receive its information. A context server approach can ex- tend the middleware- based architecture by introducing an access managing remote component. This, aggregated sensor data is moved to the context server to facilitate simultaneous multiple access. As well as allowing the re-use of sensors, using a con- text server has the advantage of freeing clients from resource- intensive operations [3]. These are the factors that were the driving-force behind this work: the building of a supporting middleware that enables pervasive, context-aware applications to be executed.

This paper provides an outline of MultiS, a Multi-Sensor Context Server for Pervasive Computing. The text is structures as follows: Section 2 outlines the MultiS. Section 3 examines a case study, where a MultiS prototype was used to support the execution of an application, while Section 4 analyzes the test results acquired through the current implementation of MultiS and the execution of the developed application. Section 5 discusses related work in the field and compares MultiS to some of the existing projects in the same area. Section 6 discusses the conclusions and makes recommendations for future work.

This section will give a detailed account of the MultiS architecture. MultiS is a context-server made for Pervasive Computing. To begin with, the context recog- nition process will be analyzed, followed by an examination of the MultiS project. The architectural elements of MultiS are described in Section B. In addition to the Context-Server, a programming language was created to compose sensors; this language is detailed in Section C. Section D shows how to deal with disconnected events. The sections from E to F studies the sub system responsible for process- ing and the contextual information, called Context-Compositor. Finally, Section G shows how the contextual information is shared across applications.

Monitoring: Sensors are very important for context-aware computing. It is through them that systems know about the surrounding environment. There are different techniques to acquire information and there have been several studies about this. The differences in each approach make it hard to come up with a single generic solution. For this reason, most of the studies on context-recognition use an external monitoring system. The same strategy is employed by the MultiS project, which uses an external system for monitoring information. It is suggested that a monitoring system should be used that is capable of providing information about different sources and making them available through a common interface.

Filter Repository: The filters are APIs used for processing contextual infor- mation. They are stored in a database called a filter repository. The filters are dynamically loaded by the Verifier module, and are used in Context-Compositor to produce contextual information. The repository also contains detailed information about each filter that allows programmers to query the database when a filter is needed.

The CD-XML language: The CD-XML (Context-Definition XML) was created to enable the applications programmers to describe how the environmental informa- tion must be related and processed to produce useful information for the adaptation process. Each section of the language conveys information from a given number of sources through filters. The data used by the filters may be from sensors or informa- tion produced previously by a filter. The produced information may be used either by another filter or in the adaptation process. When external context information is changed, the adaptation system is activated. It receives data about the new state of the environment and may change the behavior of the application. Each language feature is described above: <context> : Represents an item of information produced by the context- recognition system. The information held by this tag describes the data used to produce its value. Each tag of this type contains one filter and at least one infor- mation source. The filter is identified by the <filter> tag, while the information source may be a <sensor> or another <context> tag. In the case of the latter , the information is produced by the context-server.

The changes in the environment are detected by the sensors. When a sensor de- tects the change, it triggers the context recognition process. This may result in an adaptation to the application behavior. Two different approaches can be used by MultiS to fire the context-recognition process.

It is possible to delegates this responsibility to the monitoring system, some of which are able to detect and warn when its sensors are changing. If the monitoring system is not able to do this, MultiS may periodically obtain the values of the sensors and compare them with the previous value. When a change is detected, a new calculation is started. This mechanism may also be used to overcome faults in the monitoring system. The use of both techniques enables the system to detect changes in the sensors even if the monitoring systems do not warn MultiS when a sensor is changed.

For instance: to produce the value for the <context> isPersonInRoom, the sys- tem invokes the filter FilterAtLeast that receives the information from the following sensors: isComputerInUse, isChairInUse, isMovActive, isDoorLocked, isLightOn. Any change in the value of these sensors activates the context recognition system. It worth pointing out that any leaf node is a sensor, and thus the tree calculation algorithm is always bottom up.

If the change on the sensors value cascade to a change on a sub-tree root node, all the nodes that use this information will have to be re-evaluated. If the root node value changes, the EXEHDA AdaptEngine Service is activated. It should be stressed that not all sensor changes generate adaptation. It is possible that the change in the sensor value was not enough to change the root node; in this case, no action is taken.

The search for nodes providing the same information is carried out on the basis of the CD-XML definition of each node. If a sub-tree with a given definition is found, it provides the same value. It should be pointed out that this algorithm does not find all the possible nodes, but only the ones with the same definition (i.e., nodes with a different syntax but where the same semantics are not detected). A future enhancement may find a better algorithm for this.

The calculation algorithm must be changed to support the graphs. Whenever a node has its value changed, all the consumers must be re-evaluated (it may now be a list of consumers, not just one). If node C is changed, both nodes A and J must be re-evaluated. From the standpoint of the application programmer, the way the information is shared is transparent. Each application receives information as

Some of the most promising uses of Pervasive Computing are designed to enhance the existing applications. The Context-Aware Computing characteristics enable a more valuable form of communication to occur between the system and the user. The Context-Aware Computing was used, for instance, to select the best content in a tourist site for each user [7] [13].

The user location can be used to identify the attraction which holds the users interest. Apart from the location, the device characteristics might only select the supported types of information (e.g. if the device does not support audio reproduc- tion, or if the headphone is currently unplugged, the audio information will not be

The tests were carried out using the current MultiS implementation. The pro- totype was developed in Java because of its platform independence. Apart from the filter repository, all the other features were fully implemented. The tests were conducted using an AMD Athlon X2 64 4200+, 1Gb, and all the sensor data were emulated.

time, and indicates if the user has moved to another attraction. Each sensor change triggered the sub-tree calculation and the adaptation of the application. The y axis represents the ID information, and the horizontal lines show the application state on each event. The vertical lines represent the momentum at which the application behavior has changed.

The monitoring system used in this test was emulated and not supports the ability to notification of changes in sensor values. In view of this, the pooling strategy was used to detect environmental changes and queries were made every second. When the sensor changed nearly at the end of this period (as in the fourth sensor change) , the system reacted quickly. However, when the sensor changed at

Each module subscribe to the sensor or processed information node. A list of all subscribers is kept on each node and when an event is triggered, each subscriber is notified. There is a cost associated with communicating the change for the different subscribers. In the current design a thread is used to perform the communication to each subscriber.

It can be seen that there was a degradation of performance when 100 applications were being executed at the same time. There were cases where the processing time took more time than the sensor refresh rate. That is, the system was still processing information when new sensor data was being perceived by the system. There were big differences in time between the maximum and minimum processing time, as in the case of the standard deviation. The system was very close to supporting the maximum number of applications.

Some important studies that have sought to solve the problems related to the context-recognition process, are reviewed in this section. Among them are So- lar, Context Toolkit, Aura/CIS and JCAF. Context Toolkit [8] is focused on the development of a new methodology for context-aware applications. This was very important and inspired several other works in this area. However, in the proposal of the Context Toolkit, the treatment of the context forms a part of each application, since it is hard to share context data across applications.

Solar [6] makes an interesting proposal to share contextual information. Each in- formation provider is a data flow that is processed and organized by using operators, and shown in graphs. Each operator has several characteristics that must match to allow a connection. However there is no mechanism for dealing with mobility and disconnection, which are very important features of context-aware applications.

The Aura/CIS [10] proposes a software layer called query synthesizer, which simulates a database management system. Applications query the Context Server by using a language that is close to SQL. Each of these queries must be sent to the context-management system. However, there is no subscribing mechanism, which is very important to react to changes in the environment. The applications must pool the sensor to detect and react to changes on the environment.

MultiS is capable of producing contextual data based on several sensor data that use contextual inference trees. The produced information may be shared in the applications. There is independence between the application code and the treatment of contextual production. This coupling occurs by means of CD-XML. This language makes available a mechanism for dealing with undetermined values and may be used to handle disconnection situations. Applications may make a query by using explicit call or using publish/subscribe. The handling of contextual information is carried out through filters that can be shared across applications, and thus save programming effort.

Today, every programmer that needs to develop a context-aware application, must program all the stages of the adaptation process: the monitoring, the context recognition and the adaptation. This adds significant development costs and inhibits the development of this kind of application. However, there have been some studies to support the execution of this application which have been carried out recently. Despite this, with regard to the stage of context recognition, none of the related work has been able to acquire the characteristics needed for context-aware applications.

We propose MultiS to fill this gap. By using MultiS, the integration of infor- mation from different sources can be made possible through CD-XML. This simple language enables contextual data to be produced while containing a mechanism for handling disconnection events. Through the subscribe/notify mechanism of CD- XML, applications are able to react to environmental changes. MultiS middleware also supports the execution of several different context-aware applications concur- rently.

