In recent years, Content Management Systems (CMS) have proven to be the best platforms for maintaining the large amount of digital content managed by Web applications. Thus, many organizations have experi- enced the necessity to base its Web applications on these CMS platforms. To do this, they start a migration process which is complex and error prone. To support this process, we propose a method based on the principles of Architecture-Driven Modernization (ADM) which automates the migration of Web applica- tions to CMS-based Web applications. This article focuses on the implementation of two artifacts of this method: 1) the DSL ASTM PHP, a modeling language for defining a model from PHP code (ASTM PHP

For this reason, the Object Management Group (OMG) [24] proposes the Architecture-Driven Modernization (ADM) [16], an standard which advocates for the application of Model-Driven Architecture (MDA) [19] techniques and tools to systematize the software reengineering process and reduce its high risks and costs. Moreover, ADM develops a set of standard metamodels to represent the informa- tion involved in a software reengineering process. Two of these metamodels are: the Abstract Syntax Tree Metamodel (ASTM) [23], which allows to represent at a platform-specific level the syntax of the source code implementing a legacy system, and the Knowledge Discovery Metamodel (KDM) [26] [30] which allows to represent at a platform-independent level the syntax and semantics of the legacy system.

To show the feasibility of this migration method, we present a case study where we migrate a widget implemented in PHP from a traditional Web application to the CMS platform called Drupal [9]. Drupal is one of the most used open-source CMS platforms, currently. The widget migrated lists the users connected to the Web application.

explains the ADM-based migration method that we present. Section 4 presents the case study used to show the feasibility of our approach. Section 5 presents the definition of the ASTM PHP DSL. Section 6 presents the implementation of the M2M transformations between the ASTM PHP models to the KDM models. Section 7 presents other ADM-based approaches found with literature review and, finally, Section 8 presents the conclusions and future works.

Finally, KDM [26] allows to represent in a model the syntax and semantics of a software system at PIM level. The semantics can be found in the code itself, GUI events and business rules. It provides a common interchange format intended to represent existing software assets, allowing the interoperability at PIM level of the different approaches addressing the reengineering process. KDM comprises several packages (core, kdm, source, code or action) which are grouped in four layers to improve modularity and separation of concerns (infrastructure, program elements, runtime resource and abstractions) [30].

This stage is composed of three tasks: 1) knowledge extraction, the extraction of ASTM PHP models from a legacy PHP code. To define this models, we have defined the ASTM PHP DSL, a modeling language which allows the representation of the syntax and semantics of the PHP code in a proper and non-ambiguous way at platform-specific level. The definition of this DSL is presented in Section 5; 2) generation of KDM models, from the ASTM PHP models we automatically gener- ate KDM models that represent the syntax and semantics of the legacy code but at platform-independent level. These KDM models conform to the code and action packages of the KDM standard metamodel. These models are obtained through M2M transformations implemented in Atlas Transformation Language (ATL) [11]. The definition and implementation of these M2M transformations is another ob- jective of this work presented in Section 6; 3) generation of the CMS model, using M2M transformations we generate automatically the CMS model from the informa- tion captured in the KDM models. This model represents the knowledge extracted within the CMS domain at platform-independent level .The CMS model conforms to the CMS Common Metamodel presented in [37] and introduced at the end of this section. This metamodel has been defined by our research group and it is considered one of the cornerstones of our ADM-based migration method.

user: it defines the elements related to the roles and permissions assigned to the users of the CMS-based Web application. These elements determine how is the navigation and the use of the Web application by a concrete user. Some of the elements considered in this view are: Role, Permission or User.

For the definition of the ASTM PHP metamodel, we extended the SASTM with specific syntax and semantic elements of the PHP programming language. These elements are specializations of the elements defined in GASTM. The elements de- fined in SASTM are classified into two groups: 1) those representing a new element not considered in GASTM (new) and 2) those representing an existing element in GASTM but adapted to the PHP specification (redefined).

metamodel. This Java code is considered as the logic of the metamodel. It defines an API which allows the access to the metamodel programmatically, the generation of models conforming to this metamodel, and the serialization of these models in XMI. Otherwise, the Java edit and the Java editor use the Java model to generate the Java code to implement the user interface of the resulting tree-like graphical editor.

Transformation rule between the element SwitchStatementPHP and the element ActionElement : the element SwitchStatementPHP of the ASTM PHP metamodel is mapped to the element ActionElement of the KDM metamodel. The main attributes of the element ActionElement are: kind and codeElement. The attribute kind is a string that defined the semantic of the action. In this case, the ActionElement is defined as a switch statement. The attribute codeElement allows to store the statements defined within the body of the switch statement as well as the value that is assessed to execute the decision of the switch. The values of this attribute are taken from the attribute cases and switchExpression of the element SwitchStatementPHP.

the element ActionElement :  the element ExpressionStatement of the ASTM PHP metamodel is mapped to the element ActionElement of the KDM metamodel. As it is said previously, the main attributes of the ActionElement are: kind and codeElement. In this case, the attribute kind takes the value depending on the expression stored in the attribute expression of the element ExpressionStatement. For instance, if it is an addition expression(ADD expres-

M2M transformations: this criterion is used to analyze the types of M2M trans- formations considered by the approaches. It is possible to find two types of M2M transformations, vertical or horizontal [20]. Vertical M2M transformations involve a change of the abstraction level for the resulting model of the transformation, e.g. a PSM is transformed into a PIM. Otherwise, horizontal M2M transformations generate the resulting model at the same abstraction level as the source model.

This method is composed of three tasks: 1) the extraction of a Java architectural model from Java which conforms to the KDM metamodel; this extraction considers static and dynamic analysis, 2) the Java architectural model is restructured with extra information provided by system experts, finally 3) the automatic generation of the target architectural models for the target system conforming to the KDM metamodel. All the models used by DynaMod are defined at PIM level. To generate automatically the target architectural model, they define M2M transformations. DynaMod is not focused on any specific domain and it is not supported by any toolkit for systematizing the reengineering process or editing the models.

the extraction of a platform-specific UML model from the C++ code conform- ing to the UML metamodel [4], 2) the generation of a platform-independent UML model from the platform-specific UML model, 3) the restructuring of the generated platform-independent UML model eliminating platform dependencies and extract- ing business logic, finally 4) the generation of a platform-specific Java UML model from the platform-independent UML model. The UML models specified by this method are defined at PSM level and at PIM level. The UML model extracted from the code (the first one) as well as the Java UML model are defined at PSM level, whereas the UML model obtained from the first one is defined at PIM level. To generate automatically the platform-independent UML model and the Java UML model, they define M2M transformations. This approach is focused on Commercial- Off-The-Shelf Software (COTS). Finally, this approach is supported by the UML2 Toolki [10] to generate the UML model at PIM level.

Perez-Castillo et al present in [31] a reengineering process called Preciso to recover and implement Web Services in automatic manner from relational databases. This process is based on ADM and it is composed of the four following stages: 1) extraction of a SQL-92 model according to the SQL-92 metamodel from a relational database, 2) transformation of this SQL-92 model into the object model, conforming to UML2 metamodel, which raises the abstraction level of the system, 3) generation of a WSDL model conforming to the WSDL metamodel [8] from the object model and 4) generation of the code from the object model and the WSDL model. This code is the basis for implementing the infrastructure of Web Services. The SQL-92 model and the WSDL model are defined at PSM level, whereas the object model is defined at PIM level. To obtain the object model from the SQL-92 model as well as the WSDL model from the object model a set of M2M transformations are defined. This approach is focused on extracting Web Services from relational databases in automatic manner. Finally, this approach is supported by a comprehensive tool. This tool supports and automates all the process as well as proposes the use of editors to define the models.

Bruneliere et al present in [5] MoDisco an extensible approach for model-driven reverse engineering which allows extracting platform models from Java, XML and JSP. This approach just considers the reverse engineering stage and concretely the task of knowledge extraction. Therefore, MoDisco can extract from legacy systems models at PIM level conforming to KDM as well as at PSM level conforming to a set of platform metamodels such as Java, XML and JSP metamodels. This ap- proach does not define M2M transformations but T2M transformations. It is not constrained to a specific context, thus it can be applied to any legacy system. and it is supported by a comprehensive toolkit.

from this logical model they generate automatically a conceptual model which conforms to SECDW metamodel that allows the representation of structural aspects of DataWarehouses and the definition of several kinds of security rules. It is comple- mented by an Access Control and Audit (ACA) model focused on DataWarehouse confidentiality. The code is generated by executing M2T transformations. This ap- proach models different aspects of an OLAP system at different levels of abstraction. The DataWarehouse model is defined at PSM level, whereas the conceptual model and ACA models are defined at PIM level. The restructuring stage is carried out at PIM level. To extract the DataWarehouse model they define T2M transformation. On the other hand, to obtain the conceptual model and ACA model, they defined M2M transformations. This approach is focused on legacy OLAP systems. It does not take into account any tool that addresses the automation of the approach.

system, whereas the code model is defined at PIM level. The restructuring of the code model to obtain the KDM conceptual model is carried out at PIM level, but the resulting KDM conceptual model is defined at CIM level. For the extraction of the ASTM model, they define T2M transformations, and for the automatic generation of the code model, they specify M2M transformations. This approach is not focused on any specific context. It is defined as an approach to extract business rules from any legacy information systems. It is supported by a set of tools based on Eclipse Modeling Framework (EMF) [6]. The transformations are supported by the ATL IDE, whereas to edit, query and import/export to XMI format the KDM models, they use the KDM SDL toolkit.

obtaining business process model, the business process model which conforms to BPMN [42] represents the business discovered and is manually restructured by business experts. In Marble we can find models defined at different abstraction levels. The code model is defined at PSM level, whereas the KDM model is defined at PIM level. Finally, the business process model is defined at CIM level. To obtain the code model they implement T2M transformations. To obtain the KDM model from the Java model and the business process model from the KDM model, they define M2M transformations. This approach is not focused on any specific context. Finally, a complete tool supports the automation of the reengineering process of Marble although they do not mention the use of graphical editors to mange the models.

metamodels, Blanco et al defines the SECMDDW and SECDW metamodels and Perez-Castillo et al (Marble) specifies its own Java metamodel. Some of them con- sider standard metamodels such as Sadovykh et al taking into account the UML metamodel or Perez-Castillo et al (Marble) that uses the BPMN metamodel. Fi- nally, the ADM standard metamodels are used by some of the approaches; for instance, Van Hoorn et al, Bruneliere et al (MoDisco), Vasilecas et al and Perez- Castillo et al (Marble) uses the KDM metamodel. The ASTM standard metamodel is just considered by Vasilecas et al. For our ADM-based migration method, we have bet for the use of both ADM standard metamodels (ASTM and KDM). We have extende the ASTM metamodel with specific elements of the PHP code creat- ing the ASTM PHP metamodel. Furthermore, we have defined the CMS Common Metamodel, the cornerstone of our approach.

During the last years, the volume of digital content has increased exponentially. Organizations have experienced the necessity of using powerful platforms to manage all this huge amount of content in a robust and reliable manner. The most adopted solution has been to use Content Management Systems (CMS).

Many organizations have migrated their traditional Web applications to CMS- based Web applications. This migration process entails high risks and costs for organizations. To support this migration process and to mitigate their drawbacks, we propose a method for migrating traditional Web application to CMS-based Web applications. This method is based on the principles of ADM: using models and automated transformations. To define the models, we propose the use of two stan- dard metamodels defined by ADM: Abstract Syntax Tree Metamodel (ASTM) and Knowledge Discovery Metamodel (KDM). Moreover, this migration method is com- posed of three stages defining a horseshoe process: 1) reverse engineering stage, 2) restructuring stage and 3) forward engineering stage.

The work presented in this article is focused on the reverse engineering stage of our method. On the one hand, we have defined a modeling language that allows the definition of platform-specific models representing the syntax of the source code in PHP (ASTM PHP models). This modeling language is defined using a Domain Specific Language (DSL) that we have called ASTM PHP DSL. On the other hand, we have defined and implemented a set of automated M2M transformations that al- low to generate platform-independent models (KDM models ) from the ASTM PHP models.

To define the ASTM PHP DSL, we have specified an abstract syntax and a concrete syntax. The abstract syntax is defined by a metamodel called ASTM PHP metamodel. This metamodel is an extension of the ASTM standard metamodel proposed by ADM. We have extended the ASTM metamodel with specific elements of the PHP code. These new elements have been specified within the Specific Abstract Syntax Tree Metamodel (SASTM) domain. The concrete syntax has been defined with a tree-like graphical editor that allows the definition and edition of models conforming to the ASTM PHP metamodel. This graphical editor has been implemented by the Eclipse Modeling Framework (EMF).

Up to now, our method focuses on the migration of Web applications imple- mented in PHP. As future work, our research group is working to allow the mi- gration to CMS platforms of Web applications implemented in any programming language. Moreover, our group is working on the definition of other two modeling languages for defining the knowledge involved in the migration process carried out by our ADM-based migration method. Moreover, we work on the definition and implementation of the rest of transformations that automate this method.

