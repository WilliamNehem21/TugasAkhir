1 This work has been motivated from discussion with Nobuko Yoshida and Daniele Varacca. We are in debt with Daniele Varacca for many explanations, comments, and suggestions. We are grateful to Martin Hyland, Emmanuel Beffara, and Pierre-Louis Curien for interesting discussions. We also wish to thank the referees for many usefull remarks and suggestions.

Game Semantics strategies. When applied to linear strategies (in the form intro- duced in [8] or [4]) the machine implements strategies composition. When applied to event structures, the result is the same as the paralle composition of event structures defined by Varacca and Yoshida in [17].

The connection between event structures and strategies is especially striking if we focus on linear strategies, i.e. strategies which correspond to the multiplicative- additive structure of Linear Logic. Linear strategies (as defined in [8] and then [4]) can be described as partial orders with a conflict relation, i.e. as a sort of event structures, which satisfy a number of conditions. In particular, they are confusion free. Many of the properties which make the composition work appear to depend only on confusion freeness.

Our aim on the long term is to see confusion free event structures as a gen- eralization of strategies (i.e. as morphisms), and the composition of such event structures as strategies composition. The machine we introduce in this paper al- lows us a common presentation of composition. In further work [5] we develop the game semantical structures.

In Game Semantics, the execution of a program is modelled as interaction between two players; let us call them P (Proponent) and O (Opponent). The role of a strategy is to tell the player how to respond to a counter-player move. The dialogue between the two players will produce an interaction (a play).

Below, we give an example (1.) of event structure which is confusion free, and an example (2.) of an event structure which is not. Waved lines denote conflict. The event structure in (2.) is not confusion free because t4 is in conflict with t2, t3, but fails to have the same parents.

Composition between event structures relies on two notions: synchronization and enabling (reachability). Intuitively, to compose, we synchronize (match) events which are labelled by the same action, and opposite polarity. The synchronization is possible only between events which have been enabled. We enable (reach) an action only if all the actions before it have been enabled (reached). We better illustrate this in Section 4.2.

Let us describe the composition by means of a wave of tokens travelling up on S1 S2. When a private action is reached, to continue, it is necessary to synchronize it with an action of opposite polarity. Observe that, by construction, there is at most one such action.

A confusion free event structures S can be seen as a superposition of conflict-free event structures (which we call the slices of S). The study of confusion free event structures can be reduced to the study of conflict free event structures. In particular, composition of confusion free event structure can be reduced to the composition of its slices.

As for composition, the machine introduced here extends the LAM machine defined in [3,4] to implement the composition of linear strategies. The new machine has the same behaviour of the LAM when restricted to strategies. This in particular means that there is a morphism from strategies to well-labelled event structures, which preserves the parallel composition.

This work meet also another line of research, which is bringing together graph strategies and proof-nets. Proof-nets are a graph representation of proofs intro- duced by Girard in Linear Logic [7] and which are powerful tool for the analysis of normalization. In particular, they have been a fertile tool in the study of functional programming, in particular for optimization. Observe that proof-net normalization is performed via local rewriting rules.

We see event structures as a form of multiplicative-additive proof-nets, and hope to be able to apply some of the technology developed for proof-nets. For example, a key notion in proof-nets is that of correctness criterion, which states that there are no cyclic path, for a certain definition of path which is sensitive to the polarity of the nodes. The correctness criterion has a crucial role in guaranteeing that the normalization (composition) works, and in fact it guarantees that there are no deadlocks. We intend to investigate if a similar notion could be used on event structure, for an opportune typing, to guarantee that there are no deadlocks.

