Binding authentication to the keying material is crucial to avoid MITM attacks. Providing this binding is not straightforward: the use of public keys only proves ownership of the key pair, not who really owns the keys. Usually a Trusted Third Party (TTP) somehow ensures the binding between the peers and their keys.

Public key authentication is the process of validating the binding of a public key to a named entity. The most widely used approaches for public key authentication are the certifying authority model using certificates, e.g., SSL/TLS [12], and the web-of-trust model, e.g., Pretty Good Privacy (PGP) [13]. Methods for obtaining a public key can generally be classified in between two following options: key of an initially unknown party is by consulting a TTP through a trusted channel. The trust relation with the TTP and the assumption that the communication with the TTP is secure, guarantee the integrity of the public key and in fact establish the authentication of the unknown party. Since a TTP can probably guarantee only a small number of public keys, it would be more convenient to use a shared public trusted channel that manages and provides public keys for a potentially large number of parties. Examples of such a public channel, with a rather static nature, are phonebooks and newspapers publicizing keying information, but online directories (thus trusted directory services) are a more dynamic alternative.

The approach we pursue is to use DNS and its secure extensions, called DNSSEC [14], for implementing public key and certificate directories. We expect that DNSSEC key/certificate repositories will be formed around so-called virtual or- ganizations (VOs); organizations or communities that have a shared interest in exchanging credentials within the scope of that VO (see also [15]). This resembles the VO concept in the grid computing [16].

Although X.509 certificate features allow for federation and syndication (for a de- scription see hereafter), it is fairly cumbersome and has its drawbacks [2]. DNS supports the storage of X.509 certificates in the DNS in the form of CERT records. The DNS protocol already allows for syndication, while federation can be emulated trivially. DNSSEC can thus be used to supply a layer of trust and it can be used to implement a PKI.

As stated in [27], DNS was designed to identify network resources. Inherent support for resolving credentials is provided though the KEY and CERT records [28]. Using DNS as a trusted directory service for application keys and certificates has been proposed a number of times as shown in section 2. Still it is a controversial topic in the DNS community as can be observed from multiple discussions on the Internet. There are yet two concerns about DNSSEC:

Performance: The DNS has been designed and optimized for very small message exchanges, about 300 bytes in size. Returning key and certificate data (1.2 KB) complemented by the associated signatures in DNS responses would significantly increase network load. Moreover the UDP maximum packet length may not be appropriate for large certificates, in which case a fallback to TCP has to occur, at the cost of more time and resources. However, storing and resolving full-blown certificates from the DNS is a convenience solution in our proposal, useful to be able to apply the resolved certificates directly to TLS connections. We take into account that the use of CERT records could be replaced by using a newly defined application specific KEY RR containing only a public key, as proposed in [31].

Resolving and checking of certificates in our approach now depend on the availability of the DNS service. As such the DNS service is a single point of attack and a single point of failure. We feel however that these issues have to be addressed for DNS services anyway, and can not be avoided for any shared trusted directory solution. The presented E-TLS protocol is vulnerable to DoS attacks because the presented certificates have to be processed. This vulnerability also exists for TLS [24].

