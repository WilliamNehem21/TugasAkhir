In most formal systems for cryptographic protocol analysis, it is typical to represent encryption operations in terms of a free algebra. Encryption, for example, may be represented as e(K,X), where K is the key and X is the plaintext. Decryption, however, is represented implicitly. For example, one may include a rule that says that if a principal knows the shared/symmetric key K and e(K,X), then it can also learn X.

Another approach is to represent both encryption and decryption explic- itly. Encryption is represented, say, by e(K,X), while decryption is repre- sented by d(K,X). The fact that decryption undoes encryption can be repre- sented by a cancellation rule d(K,e(K,X)) = X. Since the decryption operator can also be used on unencrypted data, and the operations also cancel out when applied in reverse, we can also include the rule e(K,d(K,X)) = X.

However, explicit representation of cancellation, although more expressive, can lead to a less efficient analysis. Moreover, many practical protocols appear to be immune to cancellation based attacks. Techniques such as recognizable formatting, probabilistic encryption, and so forth, appear to make unantici- pated application of cancellation rules unlikely. Thus, most formal systems for cryptographic protocol analysis make use of the free algebra model, although they provide little formal justification for that approach.

In [9] Millen addresses this problem by giving necessary and sufficient conditions on protocols using symmetric encryption, under which if the secrecy property holds for a protocol in the free algebra model, then it also holds in the decrypt-extended model. The condition is specified on protocols written in a model based on parametric strand spaces and pattern matching. It has two subconditions. The first, called purity says that the decryption operator should not appear in the protocol specification. The second, called EV-freeness, says that there must be no application of an encryption operator to a variable in a specification. The EV-free property essentially says that a principal should not apply an encryption operator to a term unless it has been able to verify that that term has some kind of structure, so that it is not unknowingly applying the encryption operator to the result of applying a decryption operator. Since it is generally considered good practice to apply encryption only to data about which one knows something (e.g. it is data that satisfies certain formatting conventions, or data that one has created oneself), it is reasonable to expect that most cryptographic protocols will satisfy EV-freeness.

The rest of the paper is organized as follows. In Section 2 we introduce the model. In Section 3 we prove the soundness results for public key pure, PEV- free protocols. In Section 4 we describe our plans for further work and make some conjectures. Due to page limits, we were unable to include much of the technical material for this paper. All of the proofs were left out, and all of the material on structured protocols was left out. The full paper with all of that material can be found at www.clarkson.edu/~clynch/papers/pubfree.ps/

Like Millen, we use a model based on parametric strands as used by Cervesato et al. in [1] and Song et al. in [12], and constraint solving as developed by Millen and Shmatikov in [10]. We refer the reader to [3] for a definition of strand spaces. In a parametric strand, message terms may contain variables. A variable will correspond to a subterm of a message term appearing in a negative node for which the receiver can verify no properties; thus any terms can be used to substitute for it. Variables can also appear in positive nodes of a strand, but only if they appeared earlier in a negative node.

In [9] Millen describes two constraint systems. One is based on a free al- gebra, with intruder operators consisting of concatenation, deconcatenation, encryption, and reversal of encryption. The other is based on an algebra (called the decrypt-extended algebra) that includes cancellation rules describ- ing the effects of encryption and decryption on each other, and penetrator operators consisting of concatenation, deconcatenation, encryption, reversal of encryption, and the application of the decryption operator. The main theo- rem of that paper is that, given certain conditions, any bundle that is solvable in the second system is solvable in the first system. This boils down to show- ing under what conditions a constraint m : T from the free algebra that is solvable in the cancellation algebra is also solvable in the free algebra. In [9] these conditions are that the protocol from which the constraints are derived should not contain any explicit use of the decryption operator (purity), and that it should contain no case of an encryption operator applied to a variable (EV-freeness). Note that solvability in the free algebra always gives us solv- ability in the decrypt-extended algebra, so that the result is an if-and-only-if. Moreover, the solution for the decrypt-extended algebra induced by the one for the free algebra introduces no strands belonging to honest principals. This has a result on the type of theorems we can prove, as we will see below.

Millen describes in [9] how this result can be used for proving that the free algebra is sound with respect to the decrypt-extended algebra for secrecy properties. One can create a special strand that describes the intruder learning a specified secret, such as a key. One can use his theorem to show that purity and EV-freeness implies that the intruder strand is solvable in the cancellation algebra if and only if it is solvable in the free algebra. Millen also mentions that the result could be used to prove soundness with respect to some authentication properties, although he does not go into detail about this.

Briefly, the positive set of an attack specification gives the strands that should be in the bundle, and the negative set gives the strands that should not be in the bundle. Thus, a specification of an attack on the secrecy of a key accepted by an initiator could be given in terms of a positive set containing two strands: an initiator strand in which the key is represented by the variable K, and a special intruder strand of the sort described by Millen in which the datum learned by the intruder is also represented by K. The negative set would be empty. However, a specification of an authentication protocol would include the authenticated strand in the positive set and the authenticating strand in the negative set.

The notion of attack specification is not explicitly set out in [10], but our definition captures the essence of the kinds of attacks Millen and Shmatikov handle in their constraint system. We note, however, that Millen and Shmatikov restrict themselves to ground attack specifications, or at least attack specifi- cations in which all terms in the positive set are ground. We believe that it should be straightforward to extend their notion of an attack to non-ground attack specifications. This would allow us to characterize attacks in a some- what more general way. However, when rewrite rules are used to describe the properties of a cryptosystem, the problem becomes a little more complex, since we need to keep track of which terms in an attack specification are assumed to be irreducible, and which terms may be allowed to be reducible. Though this would not necessarily be difficult to do (something like this is already done for the specification of insecure states in the NRL Protocol Analyzer) it could be tedious and somewhat beside the main goal of this paper. Thus we treat it as outside the scope of the paper and leave it for further work.

We only consider protocols where the second and third arguments of a pk operator are not variables. This reflects the assumption that keys have a fixed purpose, it is not possible to change that purpose, and all principals will rec- ognize what the purpose of a key is. This would hold, for example, in cases in which public and private keys are distributed beforehand by some trusted pro- tocol. Since this is an assumption under which much cryptographic protocol analysis is done, we consider it reasonable, at least as a first approximation.

Any term that can be derived by D can also be derived by DE. The only thing that is not obvious is for rules 4 and 5 of D that do not exist in DE. But these rules are simulated by a derivation of DE plus a reduction with R.

Definition 2.8 We call a term t public key pure (or pk-pure) if it does not contain any term pk(k, priv, enc) or pk(k, pub, sig) where k may be any term. A set of terms is pk-pure if all its elements are pk-pure. A protocol is considered to be pk-pure if all terms appearing in the protocol are pk-pure.

There are a number of ways in which these results could be extended, besides to attack specifications with nonempty negative sets as we noted in the previous section. The most obvious would be to include other best practices (for example, the use of probabilistic encryption), or to extend our results to models in which both public and single key encryption are used, since most protocols in use today employ both. Moreover, there are a number of other special properties of cryptographic algorithms for which it would be useful to be able to abstract away from in a safe way. For example, the commutative property of Diffie-Hellman can add greatly to the expense of the analysis of a cryptographic protocol. In [7] a specification of Diffie-Hellman is used that abstracts away from the commutative property, but it has the disadvantage that the same key fragment computed by an initiator and a responder will have different representations. This should not be a problem if we can guarantee that a key fragment computed by an initiator will never be confused with one computed by a responder. We have some preliminary results in that direction, using techniques similar to those used in this paper. Other algebraic properties of interest that might be amenable to techniques such as the ones used in [9] and here include the homomorphic properties of RSA used to compute blind signatures, as well as the properties of Diffie-Hellman used in Group Diffie- Hellman. Indeed, an early paper by Even et al. [2] shows that it is safe to leave out the homomorphism property for RSA for a very restricted class of protocols known as ping-pong protocols, so we know that for this property the result is true at least for a limited case. It would also be useful to extend these results to systems that already use cancellation rules, such as the NRL Protocol Analyzer [6]. This would allow us to use cancellation rules when necessary, and the more efficient free algebras when not.

