Cyclic debugging [21] is still an important means to locate the source of a fault in a program. Non-determinism of any kind makes cyclic debugging difficult. In programming languages such as Java or C#, concurrency adds an important source of non-determinism. However, most debuggers provide limited support for debugging multi-threaded applications.

programs. Several solutions that capture and deterministically replay the ex- ecution of a multi-threaded application have been proposed for Java [5,10,15]. The above approaches provide an integrated solution for capture and re- play. In this paper we present a separate replay facility. It can enforce a thread schedule as it might occur during the execution of a multi-threaded Java application on a uniprocessor. The replay facility is independent of a specific virtual machine, i.e., any compliant [20] virtual machine can be used for replay. Replay is achieved by instrumenting the class files of the application

Section 2 gives an overview on related work. The format of a thread schedule is detailed in 3. Section 4 explains the mechanisms used by our implementation. Results on the performance of the replay mechanism are stated in section 5. In section 6 we outline a more general format for thread schedules. The last two sections discuss open aspects and conclude.

Russinovich and Cogswell [26] reconstruct the scheduling of an execution on a uniprocessor by putting all but one threads to sleep to achieve replay for the Mach operating system. Our basic approach for replay and representation of a thread schedule is probably closest to theirs. They use a software in- struction counter [22], i.e., the number of backward control transfers and the current instruction pointer to decide when a thread switch should happen, while we directly count the executions of an instruction. The implementa- tion is based on a modified debug version of the Mach system libraries. An application needs to be compiled with a flag that keeps one of the processor registers free to hold a counter for the backward control transfers. Then, as in our approach, assembly files are instrumented, linked with a debug library, supplied with a schedule file, and can be executed in an existing debugger.

We only cover replay of non-determinism introduced by concurrency. A description of a prototype of a tool for Java that replays other forms of non- determinism is given by Steven et. al. [28]. In principle, our schedule format is flexible enough such that additional commands to replay input/output be- havior or random numbers could be incorporated.

If a thread terminates, a thread switch has to be performed. However, the dying thread must not be blocked. A command die is used in this case. The replay engine waits for the dying thread to terminate until it hands control to the next thread. A terminate command can be used to unblock all threads and disable replaying. If performed before the proper end of execution, this may leave the application in an inconsistent state. If the end of a schedule is reached without executing terminate, the last switched to thread continues. Finally, a log command can be used to print messages.

To replay a schedule the replay engine ensures that only the thread spec- ified by the schedule may proceed in its execution. The remaining threads are kept in a blocked state. Each location in the application where an action should occur at some point in the schedule is instrumented with a call to the replay engine. The engine checks with the schedule whether the next location and the specified counter value has been reached. If this is the case, actions following the event command are performed. In the case of a thread switch the next thread according to the schedule is unblocked by the current thread that thereafter blocks itself.

isInterrupted are therefore replaced with calls to the replay engine. At the level of the virtual machine neither notification nor joined state are the same during replay as during the original execution. Instead, the state of a thread is tracked in the replay engine, the substitutes to interrupt, interrupted, and isInterrupted use that information to replay the original behavior. Not emulated is behavior w.r.t. interruptible channels and Selectors [29].

When a terminate command is processed in the schedule all threads are unblocked. Thus, threads that were blocked due to an invocation of wait or join will continue with their execution even if they should remain blocked according to the original trace. If the schedule ends without a terminate, the replay engine remains active, as does the last thread that was switched to; threads that were left blocked remain blocked.

In this section we briefly describe how to capture execution traces on the fly. We then report on a series of experiments that indicate performance and portability of our replay engine. Finally, we mention an extension of Java PathFinder that generates schedules for replay.

A schedule can be generated easily on the fly during an execution of a Java application if the virtual machine offers a means to invoke a user-defined routine after each executed bytecode. The virtual machine needs to provide information on the last and next threads and the last and next bytecodes of the last thread as well as on the state of each thread. It then suffices to count the number of times each bytecode is executed between two events and to log corresponding events and actions. For proper replay thread switches, calls to notify, time-outs, thread deaths and deadlocks must be included. A corresponding procedure is given in Appendix C.

The replay engine and instrumentation facility are part of the JNuke project of the formal methods group at ETH. Goal of JNuke is to develop a framework for dynamic and static analyses of Java bytecode. As first component a virtual machine for Java was implemented [13] that allows rollback of execution steps to explore different thread schedules as was done by Rivet [3]. On top of the VM, the Eraser algorithm [27] is used to check for data races. An algorithm to dectect high-level data races [1] has already been implemented. Work in progress aims at performing rollback also for input/output events.

Source code debugging is preferable in most cases. Transparency can be achieved in this case (see Sect. 5.2.2). However, some concurrency errors will only be understandable at bytecode level. Thus, transparent stepping through bytecode would be desirable as well. This could be implemented by providing an additional attribute in class files that tells a debugger which bytecodes belong to the original application and which have been added or removed for replay.

