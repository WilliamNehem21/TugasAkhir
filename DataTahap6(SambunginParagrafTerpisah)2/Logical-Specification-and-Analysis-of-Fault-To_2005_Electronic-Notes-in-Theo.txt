Following a general direction pointing out that it exists a beneficial inter- actions between strategies of analysis in security and fault tolerance (e.g., see [14,19,24]), this paper inquires about the analogy between fault tolerance and a particular strategy for computer security analysis i.e., partial model checking [3,17,18].

obtained by introducing occurrences of the possible fault action f in the model of the system P . If the action f is executed in a state of a system, then the failure mode of the system is exhibited, otherwise, the system goes on with its behaviour. For instance, Pf = P + f.P ' denotes the process that

A Fault Tolerant (Candidate) System is modelled as a process P #, obtained by extending the failing model PF with additional processes realizing error- recover strategies, in accordance to some fault tolerant design strategy (e.g., replication of component, triple modular redundancy, voting etc.). Gener- turn, the fault-injector could also exhibit part of the system behaviour. This clear separation between the process and the fault-injector makes the usage of partial model checking (see Section 3) feasible. Before going on it is worth to observe that in (1) fault actions are hidden (i.e., restricted). This implies that PF and FF could synchronize only on fault events and that faults are indeed

This section explains how the fault tolerance verification problem can be char- acterised as a validation problem of logic formulas. This characterisation is prevalently based on a technique called partial model checking [3], while the automatic verification is possible afterwards by theorem proving. It is worth noticing that the same approach has been proposed for security analy- sis [17,18].

The size of the formula obtained after the partial model checking procedure is polynomial in the size of the process and the formula. Remarkably, this function is exploited in [3] to perform model checking efficiently i.e., both P and Q are specified. In our setting, the process Q will be not specified.

As an example, we will illustrate a CCS model of a Triple Modular Redun- dancy (TMR) system, taken from [2]. For sake of conciseness we will write our example in a value passing style CCS, which is knows to be a shortcut for CCS. The basic component is a simple module implementing the identity function, which naively returns the same value received in input. Here we assume that values are taken from a set of binary values Val . The actions mi and mo are used to communicate module inputs and outputs.

