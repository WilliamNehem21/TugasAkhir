In an OO setting there is always a class diagram underlying an application. The same is true for a component based application designed with our com- ponent model. In the OMEGA deliverable D1.1.2 we have presented a formal reduction from a hierachical component model to a flat class diagram. In this paper we will present in Sect. 5 a formal justification of our component model in terms of a compositional trace semantics and its corresponding logics.

Component Interfaces are grouped into Ports. Component Ports correspond with special purpose classes inside components that provide the only inter- action points between components. At runtime, all communication between components is going via instantiated Ports. In our component model, a Port is used as a class, and it is also used as a type specification for one or more runtime objects. Ultimately these runtime objects are instances of classes in the underlying class diagram, because our model is designed in an OO setting.

Syntactically the components in our component model are much like the com- ponents in the UML 2.0 submission by U2Partners in September 2002 and in Januari 2003. One of our main objectives in OMEGA is the development of an OMEGA component model which is compatible with their UML 2.0 submissions. But there are some semantic differences that will appear in the rest of this paper. We can mention here already one of the most important differences: in the submissions by U2Partners a component itself is instan- tiable whereas in our model it is the Component Ports that are instantiated (as instances of UML classes); this way the component provides a conservative extension of the underlying object-orientation so it can remain a software ab- straction. Another difference is that in order to keep our model small, simple and elegant, we do not explicitly model connectors and therefore we have not defined new UML entities for connectors. This provides a user of our com- ponent model with a choice: the user may decide to extend our model and use the UML 2.0 connectors, or the user can choose to model connectors as components themselves.

A Port is a specialization of a both a UML Class and a UML Interface. A Port can be regarded as a UML Class, whereby the interface of the Class is known but the name of the Class is unknown. Creating an instance of a Port means creating an object with a known interface, but without the need of knowing the class of the object.

A Basic Component is a component consisting of classes and their rela- tions as defined in the OMEGA kernel model [15]. Some of the classes are associated with Ports: they can depend on them or they can realize them. The Basic Component is a specialization of a Blackbox Component.

An interface (an ordinary UML interface, not a Component Interface) in the class diagram inside the Basic Component that depends on something from outside, should be modeled as a Component Interface. The designer is free to allow class libraries from outside that can be used inside a Basic Component, but this would be a strange design: it would raise the question why the designer did not turn the interface into a Component Interface. Although it would be a design some would frown upon, we do not want to go as far as to forbid it completely. There can be practical considerations, for example it could be difficult to use an existing library in a component framework setting because there is not enough library source code available.

The labels on the arrows in these statecharts contain OMEGA action lan- guage and they are of the form [guard] trigger / action where guard is a boolean expression, trigger is an event or a method name with its parameters and action is a primitive action in the OMEGA action language. These prim- itive actions use standard OO dereferencing with the dot notation and are of the form a := a0.a1, a0.a1 := a, return := a and other simple state- ments; see the OMEGA kernel model document [15] and [4] for a complete enumeration.

As mentioned in the Introduction, in the OMEGA project we have chosen a subset of UML 1.4 so we will be able to use formal techniques. This subset consists of class diagrams and object diagrams for structural modeling, and statecharts and OCL for behavioral modeling. We also use Live (LSC) Se- quence Charts [12] in OMEGA but they are not part of UML. The subject of this paper is about the extension of this OMEGA UML subset with com-

In our component model we define component diagrams that relate to architectural diagrams like class diagrams relate to object diagrams. When designing OO software, both class diagrams and object diagrams are useful; they serve different purposes: with class diagrams the designer gives a def- inition view, with object diagrams a runtime view is given. Likewise, both component diagrams and architectural diagrams are useful.

In order to provide a semantic basis for the compositional verification of com- ponents, in this section we briefly outline the formal trace semantics of com- ponents which describes the external observable behavior of a component as determined by its ports. OMEGA deliverable D1.1.2 describes a formal op- erational semantics of UML class-diagrams where the behavior of the object instances of each class is described by a statechart ([9]). This semantics ab- stracts from the actual deployment unto a specific execution platform. It is formalized in terms of a translation relation on object-diagrams which specify for each existing object the values of its attributes and the values of some system variables which encode some relevant control information (such as the current state in the associated statechart).

Note that adding the caller as an explicit parameter, together with the encapsulation condition, implies that all interaction between components is via their Port instances. That is, we do not allow an internal object of a component (i.e., objects that are not instances of a Port class) to call the provided services of a Port instance of another component.

In this section we discuss more practical aspects of modelling applications with components in OMEGA. In the OMEGA User Guide the concrete syntax for component models can be found, here we suffice to say that in the absence of a CASE tool that supports UML 2.0 components, the correspondence be- tween component diagrams and class diagrams gives the possibility to use class diagrams to model components. It will give the user a little more admin- istration to do to remember which diagrams are for components and which are for classes. Likewise, object diagrams can be used to model architectural diagrams.

The additional structuring and abstraction mechanism provided by the no- tion of component allows a considerable simplification of an underlying kernel model language like in OMEGA, which basically consists of removing the dis- tinction between active and passive classes. More specifically, every instance of any class has its own single thread of control and its own event queue. Ac- ceptance of signals and operation calls by an object are defined only in terms of the local state of the object itself. Objects are grouped together only by means of the static structuring mechanism of components.

that components are not units of instantiation and do not need to have a unique run-time identity. Moreover, having Ports as instantiable interfaces, in comparison with the recent component model proposed by the U2 partners for UML 2.0 [22], has the advantage of permitting the existence at run time of multiple Ports with the same set of interfaces per component, each Port attached to the necessary number of runtime links. These runtime links are modeled as connectors in UML 2.0.

