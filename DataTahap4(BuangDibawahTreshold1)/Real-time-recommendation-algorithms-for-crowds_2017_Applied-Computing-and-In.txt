approaches. In Section 3, we present our new recommendation algorithms: TOP-K-T and TOP-K-W. In Section 4, we show and discuss our experimental results. In Section 5, we comment on related works and make comparisons with ours. Section 6 concludes the article.

t. both the number of users and the number of items, which both can be huge in future crowdsourcing systems. Therefore, in principle this attractive approach will not result in real-time recommendation which is very much needed by future, very- large-scale crowdsourcing systems. The approach has evolved into two different methods as follows.

We may generally consider the top-k task recommendation as computation of a restricted 1-to-K mapping from workers to tasks, and, in reverse, the top-k worker recommendation as computation of a restricted 1-to-K mapping from tasks to workers. In order to efficiently compute these mappings, we design commensurate data structures to facilitate the computa- tion process. These data structures are described below.

Our TOP-K-T was designed with the assumption that, in a crowdsourcing system, at any given time, there is a huge list of available tasks ({t1; t2; ... ; ts}) of which each belongs to cer- tain categories, and a huge list of online workers which each

50 (i.e., to recommend top 50 tasks to each worker). As expected, the times taken accordingly increase when k increases from 20 to 50. The performance plots show basically constant performance with regard to varied dataset sizes and our explanation for the performance data is basically the same as with the cases of smaller k values. The only thing we would like to point out herein is that when k is 50, which is pretty large in real-world scenarios, our TOP-K-T algorithm remains extremely efficient, taking up to only a couple of milliseconds in our experiments.

Analytically, the running time of our TOP-K-T algorithm is affected only by a and k which are typically very small num- bers, regardless of the data sizes (the numbers of workers, tasks, etc.). Our experimental study confirms the validness and the constant time performance of our algorithm.

ber 10th, 2013 reached 50,000, followed by 400,000 on the next day. The tasks in crowdsourcing systems include micro-tasks, particularly on AMT, that have very short life spans, e.g., from minutes (if not seconds) to hours. These unique features of crowdsourcing systems, i.e., huge flow of tasks with very short life spans, make traditional recommendation algorithms inap- plicable simply because they were not designed and are unable to deliver the desired real-time recommendation performance by most crowdsourcing systems.

