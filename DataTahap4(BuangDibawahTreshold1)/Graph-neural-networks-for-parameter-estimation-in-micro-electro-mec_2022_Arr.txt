Micro-electro-mechanical systems (MEMS) are of great importance in a broad range of applications including vehicle safety and consumer electronics. During the testing of these devices, large heterogeneous data sets containing a variety of parameters are recorded. Aiming to substitute costly measurements as well as to gain insight into the relations among the measured parameters, graph neural networks (GNNs) are investigated. Thus, the questions are addressed whether for inference of MEMS final module level test parameters, working on graph structures leads to an improvement of the predictive performance compared to the analysis via standard machine learning approaches on tabular data and how the graph structure and learning algorithm contribute to the overall performance. To evaluate this, in an empirical study different graph representations of the acquired test data were set up. On these, four different state-of-the-art GNN architectures were trained and compared on the task of raw sensitivity prediction for a MEMS gyroscope. Whereas the GNNs performed on par with a light gradient boosting machine, neural network and multivariate adaptive regression splines model used as baseline on the complete data set, in the presence of sparse data, the GNNs outperformed the baseline methods in terms of the overall root-mean-square error (RMSE) and achieved distinct improvement in the maximum error when trained on data with similar sparsity rates as observed during the validation.

The rest of the paper is organized as follows. Section 2 contains related work on predictive modeling in MEMS and integrated circuit (IC) testing and graph-based representation learning in the context of manufacturing and testing. Section 3 provides a short introduction to learning on graph structured data in general and to the considered GNN architectures. In Section 4, the use case of sensitivity estimation during FT and the experimental setup are specified. Section 5 describes the results which are then discussed in Section 6. Section 7 provides the conclusion.

Manufacturing in general offers a wide range of applications for graph-based methods. Components get assembled from sub-components, which can be represented as entities within graphs as well as the single process stages. A general overview of potential applications of graphs in manufacturing with focus on process and assembly planning is given by Weise et al. [21]. Transferring methods from graph theory

Another representation of relational information are knowledge graphs. Especially for data sets with numerous types of entities and relations, setting up triplets of two entities connected via a relation is common [33]. However, learning methods operating on numeri- cal attributes in knowledge graphs are scarce [34,35]. As knowledge graphs can be reformulated in the graph schema defined above and most common GNN methods operate on the latter, knowledge graphs and their specific learning methods are not regarded further within this paper.

a normalized adjacency with self-connections. Symmetric-normalized aggregation is applied to avoid numerical instabilities that can arise during the training process on graphs with a wide range of node degrees [32,40]. However, whereas countering the risk of overfitting, this self-loop update prevents the distinction between information of the considered node and that of neighboring nodes [32]. GCNs can also be reformulated as spatial method, where the features of a node neighborhood and of the node under consideration are aggregated via mean pooling [32,39]:

the nodes and/or edges taking the aggregated information as well as the features of the own instance or relation into account. The aggregation function might simply average the features, but it might as well be provided by recurrent neural network units [45] or other types of NNs [32,39]. A similar variety exists for the combination function, which can be realized as a non-linear activation function, a weighted sum or others as long as the function is permutation invariant and invariant to the amount of input nodes [24,32,46,47]. In a general form, the message passing scheme can be formalized as:

nation function evaluations defines the number of layers in the GNN. The more iterations are carried out, the more information from distant nodes is propagated to the nodes of interest. However, it has been shown, that the use of too many layers often leads to overfitting and, therefore, the number of iterations is often limited to two or three layers in practice [48,49]. Finally, the last step constitutes the readout of the feature vectors of interest.

To keep models simple for the evaluation of the case study and to limit the computational effort during the search for the best suited graph variant, package, ASIC and process information were disre- garded. Additionally, in a first step the feature set was reduced to five WLT and FT parameters selected by the highest importance scores of the light gradient boosting machine (Light GBM) [51] used as baseline. On these simplified graphs the four GNN architectures GCN, GAT, RGCN and HGT were compared. The best performing pair of graph variant and GNN architecture was then evaluated further by adding supplementary information to the graph structure and by investigating the effects of changes to various hyperparameters of the GNN. The

two best performing GNNs were than compared to a MARS model, a Light GBM, and a standard deep neural network (DNN) and the performance of the models was evaluated on sparse data sets. For this comparison, all models were trained on the complete training set and evaluated on validation sets with different sparsity rates. For a missing ratio of 0.2, 20 different initializations per method were applied and compared. Additionally, for the RGCN and HGT training was also conducted on similar sparsity rates as present during the evaluation. In the following, first the graph construction and afterwards the application of the learning methods is described.

The reason for setting up the graph this way and not concatenat- ing all parameters measured for one die into the die node feature vector is that in such a case missing features would again have to be imputed. Even though this could be handled via embedding or by adding additional entries to the node feature vectors indicating whether a parameter has been measured or not, one would lose the advantage of the graph structure as such a procedure could also be used as pre-processing step for standard ML methods. In the homogeneous graph variants, the node types were encoded in a 1-of-K scheme and concatenated into the node feature vector.

be minimized if neighboring dies and their attributes are taken into account for the predictions as well. For the showcased task of sensitivity estimation, this observation was true up to a missing rate of 0.4 where the performance heavily decreased. Possible reasons for this decrease are firstly that the hyperparameters of the HGT were optimized for a complete training set and secondly that with lots of missing data during training the relations among the features become harder to identify, i.e. the difficulty of the learning task increased. For practical application this means that for each parameter during training a trade- off has to be found between providing the model enough information to capture the underlying relations and maintaining a similar node degree distributions during training and inference.

Except for the HGT, which showed a similar performance to the Light GBM regardless of the specific graph variant used, all other GNN architectures compared showed a strong dependency on hyperparame- ters and on the underlying graph variant. This especially applied to the GAT architecture. In particular, for the GAT the graph variants with high node degrees of the die nodes, V2A and V3A, impeded the learning process. When training took place though, the attention mechanism outperformed the bare GCN due to the limited expressive power of the latter. Shchur et al. [57] reported similar performance drops in GATs concluding that the GAT architecture can be sensitive to weight initialization. Therefore, it is possible that for the variants with high node degrees, which seem to complicate training, the importance of weight initialization increases.

however, cause an informational bottleneck [49] leading to an over- smoothing over connected nodes as observable for the GAT operating on V2A and V3A. The HGT performed best on V2B. Remarkably, this variant had the lowest average centrality coefficient of all graphs where dies were connected both within and between wafers. This suggests that the algorithm makes use of information hold by the inter-wafer relations, but also results in a trade-off between a sufficient number of connections to represent the relationships whereas at the same time preventing over-smoothing.

Another peculiarity is the performance deterioration on graph vari- ants where positional information was represented by separate position nodes (i.e. in AddInfD and AddInfE, see Appendix B). The reason might again be the increased complexity of the graph which makes it harder to extract the relevant information together with the high node degrees of the position nodes, making the GNN prone to over-smoothing as discussed above.

However, an improvement in performance became visible when positional identifier were added to die nodes (PosEncA). This leads to the consideration that an even better performance could possibly be achieved by position-aware GNNs [58] calculating node embeddings by aggregate messages from sets of randomly chosen anchor nodes and considering the distance of two nodes within the message passing. An alternative could be the use of anchor nodes as presented by Chu et al. [59], who selected nodes as anchors which provide a large amount of information to other nodes.

presented approach mainly data has been integrated into the graph structure which is also usable by MARS and a Light GBM even if the positional relation cannot be represented there. Therefore, to fully leverage the advantages of the graph structure, a next step could be to add information from system simulation which classic ML methods can use at most for transfer learning approaches. However, this additional information can be captured by the graph structure. Another possibility to increase the performance of graph-based approaches might be a modification of the loss function towards a semi-supervised loss, not only training the GNNs to correctly predict the target parameter, but also to encourage the capturing of relations between other non-target parameters and therefore to better represent actual inter dependencies.

Several graph construction strategies were evaluated in a case study targeting raw sensitivity estimation of a MEMS gyroscope. Four differ- ent GNN variants were trained and compared on several homogeneous and heterogeneous graph variants, with the HGT architecture showing the best predictive performance which slightly outperformed both the Light GBM and MARS models used as baseline when evaluated on a full data set. Thus, for the showcased application, when only the features were utilized which are also usable in standard data analysis approaches and put to graph structure, only minor benefits regarding the performance arise opposing the effort necessary to find the best suited graph structure. However, the main advantages of the GNNs became visible when applied to sparse data sets, which originally motivated the graph representation. There, the GNNs operating on heterogeneous graphs showed superior performance compared to the baseline methods when sparsity rates of validation and training set were aligned. Remarkably, not only the general prediction error but particularly noticeable also the maximum error decreased, which is crucial for the actual applicability in test environments. Finally, the graph representation allows the integration of much more dies and

For the positional encoding four variants were tested. In the first variant PosEncA, each wafer position was assigned to an unique identi- fier which was set as node feature of each die node. For the second variant PosEncB, separate position nodes were created and each die was connected to its regarding positional node. In the third vari- ant PosEncC, again position nodes were used, but instead of connecting neighboring dies, neighboring position nodes were connected. For the fourth variant PosEncD, the die-die connections of V3A were replaced by position nodes, which in turn were connected introducing the new node type distance with the reciprocal of the Euclidean distance between the two positions as node feature. In AddInfA, additional node types site number FT, site number WLT, load ID, and card ID were added to the graph. Augmenting the graph by six types of inline parameters

Vaswani A, Shazeer N, Parmar N, Uszkoreit J, Jones L, Gomez AN, et al. Atten- tion is all you need. In: Guyon I, Luxburg UV, Bengio S, Wallach H, Fergus R, Vishwanathan S, Garnett R, editors. Advances in neural information processing systems, Vol. 30. Curran Associates, Inc.; 2017, URL https://proceedings.neurips. cc/paper/2017/file/3f5ee243547dee91fbd053c1c4a845aa-Paper.pdf.

Ke G, Meng Q, Finley T, Wang T, Chen W, Ma W, et al. Light- GBM: A highly efficient gradient boosting decision tree. In: Guyon I, Luxburg UV, Bengio S, Wallach H, Fergus R, Vishwanathan S, Garnett R, editors. Advances in neural information processing systems, Vol. 30. Cur- ran Associates, Inc.; 2017, URL https://proceedings.neurips.cc/paper/2017/file/ 6449f44a102fde848669bdd9eb6b76fa-Paper.pdf.

Monika E. Heringhaus was born in Ulm, Germany, in 1995. She received the M.Sc. degree in medical engineer- ing from the University of Stuttgart, Germany, in 2019. She is currently pursuing the Ph.D. degree with Robert Bosch GmbH, Reutlingen, Germany, in cooperation with the University of Stuttgart. Her focus is on machine learning methods for MEMS sensors.

Alexander Buhmann received the Dipl.Ing. and Ph.D. de- grees in microsystems technology from the University of Freiburg, Freiburg, Germany. He was involved in system design, simulation, and algorithms. In 2008, he was with the Corporate Research Department, Robert Bosch GmbH, Reutlingen, Germany, where he designed, analyzed, and as- sessed new MEMS components. Since 2012, he has been the Project and Team Manager of the Development Department. He is currently Chief Expert and Director responsible for systems engineering, for algorithm & data science and for embedded software development of MEMS.

