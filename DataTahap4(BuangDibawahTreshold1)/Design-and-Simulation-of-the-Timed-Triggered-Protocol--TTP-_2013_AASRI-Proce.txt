In this paper, we present our agent based approach for design and simulation of the basic services of the Time Triggered Protocol (TTP) for automotive distributed embedded systems such as the startup algorithm, the membership, the messages sending and reception, errors detection and handling. The proposed architecture is modeled as a multi-agent system and implemented in the JADE platform following mainly the so-called O-MaSE methodology. Using JADE, We developed an ontology that provides an automatic interpretation of frame fields.

The increasing of safety real time control applications in the automotive field led to the creation of the time triggered protocol (TTP) [6]. The latter is a family of field bus protocols based on the Time-Triggered Architecture (TTA). TTA is a framework to develop distributed real time applications. It provides a logical bus connecting the host computers that implement the chosen application, and a set of services to organize the application in a fault-tolerant manner. Each host computer attaches to the system through a TTA controller;

In this section, we try to present briefly some pertinent works on TTP modeling and simulation. The work in [2] applies the object-oriented paradigm to design and implement a software simulator for the official TTP/C specification. The main methods and tools that were utilized during the development of this project were the object-oriented development process, a range of tools like the JUnit unit testing suite, and the Rational Rose UML modeling tool respectively. The author in [5] presents the SIDERA (SImulation model for Dependable Real-time Architectures) for the simulation of various real-time protocol services like system startup, communication, clock synchronization, membership service, protocol error detection and handling. They provide a case study of the clock synchronization in distributed real time systems. According to the literature, we can state that there is a lack of works targeting the simulation of the TTP services using the agent paradigm. For this reason, we try in this work to show how we can exploit efficiently the agent paradigm for TTP basic services modeling and simulation.

TTA is composed of one or more clusters, each cluster is composed of a set of interconnected nodes via a replicate shared media, each node is an autonomous entity which executes a part of the distributed application and exchanges messages with others nodes. The communication between the clusters is realized by the gateway. Each node consists of the host computer which runs the application and a communication controller which is based on the TTP protocol, the communication controller part which is composed of the protocol processor, the Message Descriptor List (MEDL), and the bus guardian, the interface between the controller and the host part is the Interface Communication Network (CNI), and the interface between the controller and the communication bus is the Logical Line Interface (LLI) [2].

The TTP is a complex protocol for which the functional and oriented object methods are not able to deal with all aspects of this protocol. As mentioned before, we have been used the O-MaSE (Organization-based Multi-agent Systems Engineering) methodology [3] which is an extended version of MaSE that allows the design of the multi-agent organization. The main O-MaSE Models used in our MAS are, the goal Model, the organization model, the Role Model, the plan Model and the protocol Model.

The main goal of TTP protocol is to guarantee a fault tolerant communication for the safety critical real time automotive applications. This global goal is noted Goal0. The later can be divided into the communication between nodes (Goal1), the fault tolerate communication (Goal2), and the time real communication (Goal3). Goal2 can be divided into the sub goals: the node fault tolerance (Goal2.1) and the communication medium fault tolerance (Goal2.2). Figure 1 shows a goal model of the TTP protocol.

This diagram represents the roles that can be played by the system agents. Each leaf goal in the goal model must be assigned to one or more roles in the role model that can achieve it. A role may achieve multiple leafs goals. We identified seven roles: transmission service to achieve the Goal1, Membership, clock synchronization, startup system and control access to the communication medium to achieve the Goal2.1, redundancy mechanism to achieve the Goal 2.1 and Goal 2.2, a determinist scheduling to achieve the Goal3. Figure 3 shows a role model of the TTP protocol.

The plan agent represents an algorithm agent for achieving his specific goal. Again, because there are nine different agents defined in the agent class model, we have to develop at least nine agent plan models; one for each agent. In the next of this paragraph we present only the plan model of the Bus communication agent, the startup agent, and the Membership agent. The medium communication agent must wait for frames reception. When the frame is received, this agent broadcasts the frame to all cluster nodes. Figure 4 shows the medium agent plan model. The startup agent plan model represents the general startup system strategy. Figure 5 shows the startup agent plan model. The Membership agent plan model represents the membership service phases.

this paragraph we present only the send protocol model. This protocol begins when the TDMA agent informs the Protocol processor and the Bus guardian agents that the current slot is assigned to their node to start the sending of a frame. When the protocol processor receives this message it sends a request message to the CNI interface agent and waits for the received message. When this later is received, the processor protocol sends a request membership vector message to the membership agent, and waits for the membership vector. When this later is received, the protocol processor sends a clock synchronization message to the synchronization agent and waits for the clock current value. When this message is received, the protocol processor integrates this control information with the data of the frame and sends it to the LLI Interface agent. This later in turns sends a request authorization message to the bus guardian agent and waits. Finally, when the authorization message is received, the LLI interface sends a frame to the communication medium agent.

We have used the JADE (Java Agent Development framework) [1] platform to implement our Multi-agent TTP protocol services. We choose JADE because it matches well O-MaSE methodology aspects such as the behavior of agent, the possibility of creating new communication protocols, the possibility of defining a new ontology. We integrated the Jade with Java eclipse to create our graphical interface and exploit the JADE platform notation to implement the TTP cluster organization, and the container JADE to implement the node organization. We proposed to define a new ontology that provides an automatic interpretation of the frame fields and used the JADE language to automatically convert the format of exchanged messages between agents.

In this paper, we investigated the idea of using the agent paradigm to model and simulate the basic services of the TTP protocol which is based on the Time-Triggered Architecture (TTA). In our case, we followed the O-MaSE methodology to build the goal, the organization, the Role, the plan and the protocol Models. We used the JADE platform to define the frame ontology and simulate our TTP multi-agent system. As a perspective, we plan to model some automotive protocols (for instance CAN) which are based on the Event- Triggered Architecture (ETA) and the hybrid architecture (for instance FlexRay) using the agent paradigm.

