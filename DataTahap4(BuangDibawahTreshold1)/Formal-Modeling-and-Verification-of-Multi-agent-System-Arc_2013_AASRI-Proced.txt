In a multi-agent system, the multiple distributed intelligent agents interact with each other to solve problems. To guide the development of multi-agent system, the multi-agent system architecture would provide a framework. The specific multi- agent system can be customized from the multi-agent system architecture, which does not need to rewrite the construction. In order to satisfy the failure recovery property of multi-agent system, we propose dependable multi-agent system architecture with fault tolerant mechanisms. The PVS formal language is used to build a system architecture, which can provide common patterns and idioms to the system developers. In order to satisfy the reliability requirements, the powerful PVS theorem prover can be used to analyze the high reliability property of the proposed architecture.

be online trading, disaster response, and modeling social structures, etc. Since the software architecture is very good choice to ease the development complexity of distributed system [2], [3], we apply the architecture style in the development of multi-agent systems. Since these kinds of multi-agent system applications have common in the construction level, a Multi-Agent System Architecture (MASA) can be very helpful in developing the multi-agent system.

With the well-defined semantics, the formal methods [6], [7] can be used to write the precise specification and process the rigorous verification for the architecture design. Prototype Verification System (PVS) [8], [9] is very powerful in writing formal language and process the verification for complex high reliability systems. The formal language of PVS is easy to learn how to specify the model. The theorem prover of PVS can be controlled by the users by just inputting proof lemmas. These strengths of PVS are very helpful in verifying whether Multi-Agent System Architecture can satisfy the high reliability requirements.

The remainder of this paper is organized as follows. The basic concepts of PVS are described in Section 2. The structure of MASA is illustrated in Section 3. The PVS specification model of MASA is described in Section 4. Section 5 demonstrates whether the model of MASA can satisfy high reliability requirements. In Section 6, we conclude the paper.

In the Prototype Verification System (PVS), the formal specification is normally composed of theories. As shown in Fig.1, a list example is used to explain how to write a theory. The LIST THEORY has a parameter Entry. There are two important functions here. One Function Leave specifies how an old entry leaves the list. And the function Join specifies how the list receives a new entry.

In the process of verification, the PVS theorem prover can construct a proof tree, where all nodes should be true. The node of a proof tree can be considered as a sequent. And the sequent is composed of antecedents and consequents. For example, the A1 and A2 can be found in the antecedent, and the B1 and B2 can be found in the consequent, as shown in Fig.2. By entering PVS proof commands, the PVS theorem prover can process the verification.

In this section, we describe the architecture style of Multi-Agent System Architecture (MASA). As shown in Fig.3, distributed agents in MASA: Brokering Agent (BA), Query Agent (QA), Query Tool Agent (QTA), Communication Agent (CA), and Monitoring Agent (MA); shared resource: Information Node (INode); fault tolerant agent: FTA; and connectors: BtoQ, QtoB, CtoB, BtoC, QtoQT, QTtoQ, BtoQ, and QtoB.

The distributed agent can interact with each other to accomplish a job. The information resources are all stored in the Information Node. Two agents communicate with each other by using the connector. When raising exceptions in the system, the fault tolerant agent is responsible for dealing with them.

QA and BAs interact with each other to transfer the interface query. QA is responsible for deciding whether to find other BAs. BA is responsible for deciding which INode has the relevant information. And the QTA is responsible for communication among the agents. MA is in the control position, and its job involves build QA to set up a query, receiving the query results, and analyze the results. CA is responsible for searching potential projects, analyzing them, and choosing the appropriate project.

In the architectural level, the fault tolerant techniques have been integrated to deal with exceptions. When raising an exception, we should use an appropriate handling strategy to deal with it. However, the handling result could be false, and then this exception should be passed to the fault tolerant agent, signalled as global exception. The global exception may affect other interacted agents. Thus, the global exception should inform to the related agents, and these agents have to deal with the informed global exception.

In the BA theory, there are four important functions. One function is SendData, which is used to describe how the BA sends the information to QA by using the connectors. How to pass the raised exception to the exception receiving agent is illustrated in the function ExceptPropagate. And the function UniExceptReceive illustrates how the exception can be received from the exception receiving agent. The last Function UniExceptHandle explains whether the BA can handle the received exception successfully. If successfully, the inter state could be normal. Otherwise, the state should indicate that this agent cannot deal with this exception successfully.

In the FTA theory, there are two important functions. One function ExceptRec illustrates when a global exception has been raised, the exception handling agent should receive this exception. The function ExceptGraph specifies that when receiving a set of global exceptions, these exceptions could be resolved into a global exception. And this resolved exception should be handled by the exception handling agent.

In this section, we illustrate how the MASA deals with a raised exception. This fault tolerant property inode_pred1 indicates that when the shared resource component INode raises an exception Inodettacked, the distributed agent (e.g. BA) should receive this raised exception, and handle it, as shown in Fig.6.

Fig.6 shows how the theorem prover of PVS works. When the theorem prover prompts a hint Rule? The users can send a proof command. For example, the proof commands could be flatten. This command can be used to resolve the disjunctive connectives, and convert the consequent inode_pred1 into a sequent.

As shown below of Fig.7, the proof script of property inode_pred1 is composed of all the proof commands that the theorem prover of PVS receives from the users when verifying the property. These proof commands are flatten, skolem!, asset, and so on. The explanation of the proof commands can be check up in the PVS tool manual. For example, the flatten is used to use a constant to replace the quantified variable in the antecedent.

In the proof script, besides those primitive lemmas, there are other important induced lemmas. These lemmas can guide the verification process when the verification result is not true. For example, the exception list is not empty is indicated in the NonEmpty Lemma. When raising an exception from the UniExceptReceive function, how the exception handling component receives the exception is indicated in the ExceptGraph1. When verifying a fault tolerant property, the proof script can be entering to the PVS theorem prover directly. The, the fault tolerant property can be verified automatically. Besides this fault tolerant property, we also can verify other properties successfully.

In this paper, a Multi-Agent System Architecture (MASA) is proposed to help developing the complex multi-agent systems. In order to make this proposed MASA more precise, we use the formal language of PVS to specify MASA. With the PVS formal model of MASA, the powerful PVS theorem prover can be helpful in verifying the high reliability requirements.

The authors would like to thank for the sponsor supported by National Natural Science Fund (No. 61100059). And strong support from National Natural Science Fund of Hubei Province under grant 2012FFB00901, the Science and Technology Research Project of Department of Education of Hubei Province under grant D20132803, Doctoral start Fund of Hubei University of Science and Technology under grant BK1204, the Teaching Research Project of Hubei University of Science and Technology under grant 2012X016B, and the Science and Technology Research Project of Xianning City under grant XNKJ-1203.

