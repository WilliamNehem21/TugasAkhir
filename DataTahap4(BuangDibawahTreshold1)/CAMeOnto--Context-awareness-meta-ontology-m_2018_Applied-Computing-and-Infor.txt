In [8] was presented CARMiCLOC, a reflective middleware for context-aware applications in the cloud, which offers various ser- vices for context-aware systems, among which is found the model- ing. The context modeling is proposed using ontologies, because it is a technique that gains force as a standard, due to its semantic expressiveness and interoperability [8]. In this way, in this work we propose the modeling of the context ontology of CARMiCLOC.

Our ontology must be used by the services of CARMiCLOC to represent the context, to reason about it, to be shared, among other things, without the use of sophisticated tools and processes. This ontology is called CAMeOnto, which is an ontology that allows the modeling of the context, so that it can be used by the set of ser- vices of CARMiCLOC in order to allow the autonomy of the context- aware applications, so that they can discover it, analyze it, and based on it, make decisions. Our ontology provides a simple con- text modeling based on the 5Ws (who, when, what, where and why), with sufficient information about the context to reason and learn from it.

In [9], Alegre presents an investigation about the context-aware systems and their applications, and illustrates how the systems understand the situations, provide services and adaptive their functionalities for very specific needs. Alegre presents different aspects related to the state of the art of Context-Awareness Sys- tems (CASs), for example: 1) the methodologies used for the devel- opment of CASs, 2) the challenges and techniques to construct CASs, 3) and the conceptualization of CASs. It also presents the directions and challenges that should be considered in the future researches regarding context-aware computing. Especially, in the Engineering of the context aware systems, he defines the following investigations: principles of design of the Human-Computer Inter- action, Architectural Patterns, Paradigms of programming, methodological supports, among others.

With respect to the Context modeling, Perera exposes in [10] that there is not a standard for context modeling. In [9,10], Alegre and Perera, respectively, show the most common techniques used for context modeling. Alegre exposes that each technique has some advantage. For example, the ontology-based modeling allows the semantic reasoning, the expressiveness in the context representa- tion, a strong validation, context sharing and the independent utilization.

There are several works that have developed the modeling of context through ontologies [11,12,19]. The use of ontology allows, according to [11,4]: 1) the reasoning using a very well defined declarative semantic, 2) the knowledge sharing in dynamic sys- tems and, 3) the interoperability. In [11], Guermah implements a framework of context-aware services. Guermah propose an ontol- ogy, called CONON (CONtext ONtology), which has two levels. The first level is the services platform, with the general representation of the context; and the second level is extensible and allows adding other specific ontologies. Finally, the framework allows the adapta- tion of services based on the WSMO (Web Service Modeling Ontol- ogy) [13]. They define the next set of classes: user, activity, service, device, and environment.

In [14], Skillen shows a user-centered ontology, and describes an ontological modeling of the user profile for the customization of context-aware applications, defining a method for capturing and representing user profiles for changing environments. The classes that he defines are: user, time, context, activity and loca- tion. In [12], Naqvi presents a mobile context awareness approach in a cloud, and an ontology where its main entities are the user, the platform and the service that is instantiated. It is deployed on a middleware that is defined as a Platform as a Service (PaaS).

In [5], Zhongu et al. present a Meta Context Ontology Model (MCOnt), where the context is divided in three categories: the internal context (it describes the user personal information, prefer- ences and emotional states, provided directly from the user), the external context (it is the user-physical and environmental con- text) and the boundary context (it represents the information related to users’ task-related activities and services). They use a three layer hierarchical approach to describe this meta-ontology in [4]. The MCOnt have three advantages: 1. Ontologies can be pragmatically organized in a modular manner, the modularity facilitates the maintaining and updating of the context ontology model. 2. The multi-dimensional submodels strengthen the semantic integrity of the whole context ontology model. 3. Each part of the internal model in MCOnt is a higher concept abstraction for a generic context. Nevertheless, this work lacks of the definition of the relation between user situation and the services.

In general, the models that have been presented in the previous works are for specific domains, and are not oriented to be devel- oped as services. These ontologies have not been defined for an environment on which services can be executed about the context, for applications that require it. In particular, the ontology proposed in this article allows the autonomous behavior of context-aware applications, such that they can reason about the context, discover the context, among other things. In this sense, it is a general ontol- ogy, which allows the modeling of any environment. Our ontology is of general domain, to be used by CARMiCLOC [8,17], which is part of its knowledge base, in a way that can be used as a knowl- edge service.

Interaction with a Context Awareness System: it can be defined in the executions and configurations. The execution refers to the actions/behaviors of the system in a specific situation (e.g. silence the phone when someone is sleeping). The second refers to the adjustment of actions/behaviors that the system may have. These interactions can be active or passive.

Context Modeling. The context modeling is also widely referred to as context representation. Context models can be static or dynamic. In addition, they may have several states [2]: ready, running, suspending, resuming, expired, and terminated. There are different modeling techniques which are described in [1].

Reasoning of the Context. The reasoning of the Context can be defined as a method to deduce new knowledge from the con- text. It can also be defined as a process for deriving high-level contexts from a set of contexts. The reasoning requires to solve

Specifically, CARMiCLOC incorporates seven services for the context management, the services can be provided internally (I) (required by the same CARMiCLOC services) or called indepen- dently from external services (E). CARMiCLOC Services may be con- sumed by Context-aware Applications and Not Context-Aware Applications. Table 1 shows the services provided by CARMiCLOC. Fig. 2 shows the MAPE architecture of CARMiCLOC. At the bot- tom of Fig. 2 is the Middleware Base level, where the context and sensors are deployed. The context is discovered using the Se1 service (M), which filters and preconfigures the data. The Se2 Service creates the model of context (A), which is stored in the Knowledge base (K) that will be accessed by the MAPE cycle. Se3 Service allows the reasoning over K, in order to infer information about the context (P). The rest of the services (Se4, Se5, Se7, Se8)

One important aspect of CARMiCLOC is that it allows the con- text switching using the services that it has implemented. When something changes in the base level, the Se1, Se3 and Se2 services work together to produce the new context. Particularly, the con- text modeling service (Se2) is one of the most important because it allows the maintenance of context information and can create new models based on new contexts acquired.

To develop our ontology, we are used the Neon methodology [18], which is a methodology to build ontologies based on the reutilization and the dynamic evolution of ontology networks. Par- ticularly, CAMeOnto is based on the CONON [11] and MAOnt [5] ontologies. In specific, we propose a hierarchy of ontologies similar to the proposition in [5] (see Fig. 3).

In a context model, the context information must be defined in terms of attributes, characteristics, context relationships, context quality attributes, among other things. A simple and complete approach is the one used in [9], which contains the four W’s that answer the questions Who? (Who is the user?), What? (What I am doing?), Where? (Where is my location?), and When? (When has happened?). Also, in the mobile applications, it is important to know who carry out the action and with whom, and the rela- tionships between the environment and the services that are exe- cuted or that could be called [9]. All of them defines the ‘‘Why” that in CAMeOnto is added to express the motivation to do the ‘‘what”. In [5], the context is categorized in three: internal context, external context and boundary context. We are going to use the same approach. In specific, our context ontology is characterized by two hierarchical levels (see Fig. 7). The first one is a general and independent domain ontology, and the second one allows the addition of specific domain context ontologies. The first level is divided in three groups, inspired into the proposition in [5].

when, the ‘‘location” class defines where, the ‘‘services” class defines the what, and with the ‘‘device” and ‘‘activity” classes is defined the why. Fig. 4 gives an example of instantiation of our ontology using our six classes, with information that could be described in each one. For example, in the ‘‘location” could be described the environment, which could have as attributes the temperature and illumination.

The relationships between the classes in our multidimensional models is shown in Fig. 5. The relationship between the user and its role in a domain, makes possible to find the why of an activity: the motivation. To complete the description of the motivation, it is required the relationship between the user and the devices, and the user/role and a given activity (see Fig. 5).

The relationships of our ontology allow describing the context: the environment has a location, and devices that provide services according to their specific description. Also, the devices are used by the users at this location, whom have roles in the activities car- ried out in the environment in a given moment. Now, we specify each class of our ontology.

In a context aware, the context information is used to respond and adapt to users’ behaviors. In [20] is shown an ontology to rep- resent and capture the user profiles within a changing environ- ment. The user model is a subclass of the context. We use this user profile ontology mixed with the ontology proposed in [5]. The user model is shown in Fig. 6. The user has a user profile, a schedule, and a role. The user profile describes the user’s personal information, the user schedule defines the events which he/she reacts, and the role defines the responsibility of a user in a given moment.

According to Fig. 6, the user profile describes the user’s personal information, such as his/her name, social safety number, and pref- erences. Also, it can be included an extension of user profiles for each domain will include, for example, health profile, professional profile, sporty profile. A series of user-related events compose the user schedule, where each event contains one or more activities, and each activity contains one or more tasks. The role class indi- cates the current state in which the user’s action is situated, such as professor, student or guest. Therein, the role class mainly repre- sents the lawful situation set of a user or an agent, which can be beforehand defined.

We based our model in [21,23], where they present an Activity Ontology. The activity model defines he different features and abil- ities than are required in an activity. The activity model has the next subclasses: Domain of the Activity that describes all the rela- tive to the domain where the activity is involved, the events gener- ated or used during the activity, and the social and individual activities executed in it (see Fig. 7).

After all the key classes have been defined within the ontology, specific object and data properties are defined in these classes, which are shown in Table 2. These properties are used to relate one class to another via objects, or specify relations via datatypes. They have an important role to relate key concepts and to infer new information. For example, the ‘‘Userprofile” class could con- tain a property ‘‘hasUserProfile”, in order to determine the state of a user’s profile, and this could be linked to the ‘‘DomainActivity” class. Therefore, this could determine that a user has a particular activity, such as ‘‘marathon training”, and so, infer that there are kilometers to run today.

In this way, the relationships between different users can be modeled, and our middleware can learn to adapt to different user patterns. Fig. 12 presents an example of the hierarchical view of the classes of our ontology, their object properties and datatype properties, displayed in Protégé.

Event (Notify Users): This event can notify to users by email, twitter, etc., according to the user profiles and environment devices, e.g., the beginning of the course. Table 4 shows an example of the instances of the classes for this event, which can use the rules of inference of our ontology.

Once verified all the conditions of the environment, etc., the smart classroom starts with the authentication of the users. Also, our ontology can be used to authenticate the students, guests and teachers. If the STUDENT X is authorized to access the class, then he/she can obtain the learning resources, books, etc. of the class. The ontology can use the next rules triggered by the ‘‘Stu- dentMaterial” event.

Situation 2. The patient is in a critical situation in the operation If the patient has a temperature greater than 40 degrees, then the condition of the patient is critical. In this case, it will trigger the ‘‘PatientCondicion” event, to see the condition of the patient.

Fig. 19 presents the core ontology of S-WOLF, and Table 6 pre- sents how S-WOLF is mapped using CAMeOnto, such that each concept in S-WOLF is introduced in CAMeOnto. Particularly, the ‘‘user”, ‘‘location”, ‘‘activity” and ‘‘services” classes of CAMeOnto can be used to model S-WOLF. The ‘‘Time” and the details about the ‘‘environment” classes of CAMeOnto are not considered in the S-WOLF ontology but can be considered if is required later.

In this article, we have proposed a Meta ontology for the con- text modeling, called CAMeOnto. It is a general ontology, without being biased to a single application domain. We have tested in dif- ferent contexts, for example, in the context of a smart classroom or in a Surgery Room, and in each case our ontology can model the context. We were able to create the relationships between the activity domains, the situation the user is going through, among other things.

This meta-ontology describes the main components of knowl- edge to be considered in a CAS, which can be extended with the specific information about the domain of application in its second level. Our ontology allows the modeling of the context based on the 5Ws, using a set of models for each dimension. In this way, we describe the main details of a context.

In future works, we are going to test the creation and integra- tion of domain-specific ontologies, in order to observe how the proposed ontology could be adapted in real time. Also, CARMiCLOC has a set of services (S21 and Se2) to automatically populate our ontology, in order to avoid a human-based population process of the knowledge base. Currently, we are working on the implemen- tation of these services using an approach that analyses the exchanges of messages in an environment using DPI (Deep Packet Inspection) techniques, in order to discover information of the con- text in order to instantiate CAMEOnto.

In the case studies, the Pellet reasoner is used, nevertheless it is just a test. In future works, we are going to evaluate the perfor- mance of CAMEOnto into a real environment with large data. Finally, other important work is to test the context switching with CARMiCLOC based on its services, in a way to update CAMEOnto with the new information of the context in realtime.

