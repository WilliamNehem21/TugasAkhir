Service Selection: Service selection is the core of the process SC [3], where appropriate services are selected from different services providers in the services registry that match the performance requirements speci- fied by the end user. The selected services comprise more than one candidate service that satisfies the end user’s preferences. Therefore, the optimal matched services must be selected and grouped into a composite service.

Static Service Selection: The services are selected at the design time. The different service components that are essential for composition are selected, collected, and then deployed. Early service binding is important because if better alternative services are offered or one of the provided services becomes unavailable, the static composition process will not be able to offer a better choice in SC [33,36]. Static Web services compo- sition is not flexible and adaptable when frequent runtime changes occur, but it is suitable when the service components do not change or they change rarely.

Dynamic Service Selection: The services are selected during the run- time. Thus, the service components can be determined and replaced during the runtime, thereby allowing the consideration of changes that can occur in the in-service components and better alternative services may be offered for the composite services [33,36]. Dynamic service se- lection is considered a more challenging task than static service selection because critical issues must be addressed, such as time limits, service correctness, and transactional support.

Service Orchestration (Centralized): When several services interact, one centralized service is responsible for managing and controlling the communication and workflows among all of the other services. This central point is called the orchestrator and it organizes the connections between different services. The orchestrator has a global and complete view of the logics of the interactions, and it obtains the Results from various connected services, as shown in Fig. 2( A).

Single Optimization Problems: These are considered the standard opti- mization problems where one objective function is optimized at one time. Multi-Objective Optimization Problems (MOPs): MOPs require that the optimal solution is found in the presence of trade-offs between more than one conflicting objective under a set of specific constraints. No single solution [37] can optimize all of the objectives at the same time. A set of infinite optimal solutions or set of points satisfy all of the predefined conditions for the optimum, which are called non-dominated or Pareto optimal solutions, as defined in 1906 [38], and they are the most widely used solutions in MOPs. The solution is regarded as a Pareto optimal solution if none of the objective functions optimize the fitness value without affecting one or more of the other objective values, or if they make none of them worse. If no further Pareto objective can be changed,

Many-Objective Optimization Problems (MaOPs): These problems are extended versions of MOPs, where the MOPs often require the optimi- zation of two or three objectives [37]. MaOPs require the optimization of more than three objectives as the non-dominated number of solutions and solution search space increase. These increases make the service selection problem more complex and it is difficult to achieve diversity and convergence for SSAs in the IoT [39].

The classification proposed for the QoS architecture by Li et al. [40] meets the needs of the IoT environment and allows the QoS to be opti- mized in different IoT layers. The architecture considers three IoT layers comprising the sensor layer, network layer, and application layer. The traditional QoS attributes are integrated with other essential character- istics of the IoT architecture (e.g., cost of network deployment, infor- mation accuracy, energy consumption, and coverage). The traditional QoS classification is not applicable to the heterogeneity and complexity of the IoT architecture.

The QoS in this layer involves selecting the sensor’s necessary infra- structure based on the user/application requirements and sensing capa- bilities. Thus, this layer aims to deal with scheduling the acquisition of information and resource allocation. For example, the QoS in the sensor layer involves the energy consumption, system lifetime, and resource optimization [41].

The optimization of SSA is required to optimize the QoS for sensor services. An optimal SSA is vital for the sensor layer because multiple devices are available with differences in quality that can meet the user/ application requirements. The availability of services in this layer de- termines the success or failure of a service request.

The network layer represents the IoT network infrastructure respon- sible for transferring data and information between sensor nodes. This layer includes different protocols, technologies, and edge networks, such as RFID tags, wireless sensor network (WSN), wireless local area network, or cellular network. The importance of the network layer is related to the network services in the IoT, which require the presence of various network technologies. Similar to WSN, it is necessary to provide universal coverage points and access to network nodes. In the network layer, the heterogeneous network environment is scheduled according to

the traditional QoS in order to allocate various network resources. The different protocols used in heterogeneous networks depend greatly on the QoS requirements, e.g., the bandwidth, capacity, and throughput QoS in the network layer [40,41]. An optimal SSA is essential in the network layer because it allows service providers to provide optimal network technologies and protocols to meet the user/application requirements. Efficient QoS support for different network infrastructures in this layer is challenging when developing applications for use in the IoT.

The application layer represents the highest layer in the IoT architec- ture and it comprises many distributed services, which are combined to provide one service to the end user or an application. Many applications are deployed in different domains in the IoT environment, such as smart home, industrial automation, health care, and traffic management ap- plications. The application layer aims to schedule services according to the QoS constraints. Under the QoS constraints, some network resources must be allocated to services selected in the application layer, thereby affecting the end services and user requirements, e.g., the accuracy, reliability, availability, and execution time QoS in the application layer [41]. Thus, it is crucial to select an optimal SSA and resource allocation scheme based on the information for each component service.

discover.” A heuristic is a type of artificial intelligence and a dependent optimization algorithm designed to find an approximate solution for complex problems when traditional algorithms cannot obtain an exact solution [42]. The main objective of heuristics is to obtain a satisfactory and valuable solution in an acceptable time, but not necessarily the exact solution. The main idea of heuristic algorithms involves ordering an alternative solution for each step based on the available information for the problem in order to decide the next step, which involves iterating the algorithm’s rules and utilizing the output from the previous step as an input for the next step until the optimal solution is reached.

The term meta-heuristic was introduced by Glover in 1986 as a com- bination of the Greek prefix meta- (met´a), which means high level, and heuristic (from the Greek heuristic or euriskein, which means to search or find) [43]. A meta-heuristic is a high-level optimization algorithm that identifies a set of concepts grouped in an algorithmic framework in order to provide a set of strategies or rules for improving heuristic optimization algorithms to find a suitable solution to a specific problem [43]. Meta-heuristics can be defined as general-purpose heuristic methods that can obtain high-quality solutions in the significant search space.

A Hyper-heuristic is a heuristic search method introduced in 1997, which involves the combination of more than one artificial intelligence algorithm in the context of automated theorem proving [44]. This term was subsequently applied in a combinatorial optimization context to denote heuristics for choosing heuristics. The main idea of hyper-heuristic algorithms is automating the use of high-level heuristic methodologies to select, combine, generate, and apply algorithms to a specific problem, which involves combining more than one appropriate heuristic method at each decision point to efficiently solve computational search problems [45].

simulation is the most widely used method. Computer simulation in- volves mathematical modeling on a computer using simulation software in order to predict the behavior of a physical system or the real world. Computer simulation is a useful tool for mathematically modeling many natural systems, e.g., in computational physics, chemistry, manufacturing, biology, and human systems such as psychology, eco- nomics, health care, and engineering.

The other method employed involves using a prototype. A prototype is an early stage model or a sample of a specific product built to test processes and concepts. In general, a prototype is designed to evaluate a new design of a product and to enhance precision for system users. A prototype is used in various contexts, including semantics, electronics, design, and software programming [46]. The difference between a simulation and prototype [47] is that a simulation is an analytical process representing a real working system, whereas a prototype is a real physical object that provides specifications for the actual system.

In the following, we explain the proposed classification approach for QoS-aware SSAs used in the IoT environment. The state-of-the-art research approaches can be classified into three main types, as shown inFig. 3. Our classification criteria were obtained by analyzing the state- of-the-art methods. In order to develop a new method to solve the se- lection problem in the IoT environment, three main points should be considered. First, it is necessary to design an appropriate environment that allows the implementation of the proposed solution. Second, the proposed solution type is applied for selection in the QoS layer. Third, it is necessary to determine the methods used to evaluate the proposed solutions.

Thus, based on these three requirements for developing a new SSA, our proposed classification approach is described as follows. First, the design of SSAs for IoT must adhere to three basic concepts. SSAs are based on the process time phase where the time when the SSA is per- formed is specified. The workflow management behavior represents how the services are controlled and connected. The objective of the optimi- zation algorithm is to establish the number of goals to satisfy when the algorithm is implemented.

Second, we consider two basic concepts related to the implementa- tion of SSAs. Based on the QoS layer, it is necessary to define the layer where the SSA will be applied in the QoS architecture [40]. Moreover, the algorithm type can be divided into heuristics, meta-heuristics, hyper-heuristics, and other algorithms (non-heuristic algorithms).

To design a new solution for the selection problem, researchers must first define an appropriate environment. Thus, we reviewed the state-of- the-art methods and identified three common categories comprising SSAs based on the process time phase, behavioral workflow management, and optimization objective type. Detailed definitions of these features are provided in Section 2. The methods analyzed according to these three categorizes are shown in Table 2.

Many methods have been proposed to solve the QoS-aware selection problem in the IoT environment. We identified these solutions based on the three QoS layers introduced for the IoT architecture by Li. et al. [40], i.e., the sensor layer, network layer, and application layer. For each layer, we classified the implementations of the methods according to four optimization algorithms comprising heuristics, meta-heuristics, hyper-- heuristics, and non-heuristic algorithms. Moreover, we considered the traditional QoS factors optimized in each proposed solution.

Yin et al. [49] addressed the single-source many-target k shortest paths problem in Map-Reduce, where they used a graph of Web services to find k shortest paths (selected services) from a candidate set of services for one source node while providing acceptable QoS. They focused on reducing the execution time and consuming less power. They proposed an efficient pruning algorithm for breadth-first search (BFSKNN) called PruningBFSKNN algorithm. The proposed algorithm built based on find the shortest paths between nodes in a graph using DijkstraKNN and BFSKNN for the single-source many-target shortest path problem.

mapping flow-based process components on the system sensors. They identified three key factors comprising minimizing the latency time when collecting and transferring data from IoT devices and communicating it to the gateways, reducing the energy used by the system, and balancing the system energy requirements to increase the system lifetime. They proposed a collocation-based sensor-service mapping strategy (CBSSMS) to link the IoT services to appropriate sensors. The approach used two algorithms where one found the path that reduced the latency time and a collection algorithm assembled the components that formed a link on the same sensor.

Alsaryrah et al. [18] aimed to select an appropriate set of smart ob- jects by considering the traditional QoS and the energy consumed to form a service. They divided their objectives into minimizing the traditional QoS (execution time, network latency, and cost) and reducing the energy consumption by the combined service, i.e., by maximizing the battery lifetime for the sensors. They proposed a bi-objective shortest path optimization (Bi-SPO) algorithm with four pruning techniques comprising pruning by the cycle, nadir point, efficient set, and label.

Perera et al. [10] investigated the properties of sensors and the in- formation associated with data streams to search, select, and rank large-scale sensors with the same functionalities and capabilities in order to satisfy the user’s requirements. They considered the user preferences and sensor characteristics, such as the accuracy, reliability, battery life, location, and other features, to identify appropriate sensors for data collection approaches. They designed and implemented an ontology-based context-aware sensor search, selection, and ranking model (CASSARAM). To improve the performance, efficiency, and capability of CASSARAM, they proposed a comparative-priority based weighted index to remove sensors with a lower weighted context prop- erty based on the user preferences technique called Top-K selection, comparative priority-based heuristic filtering to reduce the number of sensors ranked by removing sensors placed away from the user, relational expression-based filtering to speed up the search process and sensor

selection by specifying an acceptable range of context property values using relational operators in semantics, before ranking the sensors by considering the account user’s priorities, and distributed sensor search- ing to identify and select appropriate sensors that satisfy the user’s re- quirements on multiple IoT distributed servers. Three different methods were identified to search distributed sensors based on query/data transformation over the network, i.e., chain processing, parallel pro- cessing, and hybrid processing.

Lin et al. [39] introduced a sensor selection algorithm for specifying multiple sensor devices in a large-scale environment. They defined their optimization parameters for energy and distance minimizing the energy consumed by communication between two sensor devices, balancing the energy among different sensors to reduce overloading on some sensor devices, maximizing the total energy harvested by supplementing the sensor’s battery energy with natural energy (e.g., wind and solar), and green index optimization to reduce the total pollution level. Satisfying the QoS involved optimizing the cost, reliability, and availability of IoT services. Their proposed algorithm based on many-objective evolu- tionary algorithm decomposition (MOEA/D) solved larger-scale prob- lems by decomposing them into multiple sub-problems and then finding the optimized solution for each sub-problem.

Na et al. [48] conducted service selection for IoT based on physical resources by using platform-independent middleware. They focused on increasing the IoT system lifetime by using the power on all devices equally to reduce the energy consumption and costs. To balance the energy consumption, they developed an evolutionary game approach by defining a fixed point of the replicator dynamics where the payoffs are equal for all players in the same group. They also presented some options for improving the service selection behavior. The initialization step was improved by estimating the remaining lifetime for all devices at the beginning instead of selecting them randomly. This approach may

Khanouche et al. [13] aimed to solve MOPs during service selection by managing the energy consumption and maintaining the availability of services, while slightly reducing the QoS level but without affecting the user satisfaction. They designed a QoS model by describing the QoS of an atomic service divided into quantitative attributes comprising the traditional QoS, such as the cost, response time, reputation, reliability, and availability, and qualitative attributes, such as security, privacy, and comfort. The QoS of a composite service is dependent on the structure of its atomic services connected through a sequential structure. The relative dominance of services conforms to the Pareto optimality set, which comprises the collection of possible solutions where at least one objective is optimized without affecting other goals. They proposed an energy-centered and QoS-aware service selection algorithm (EQSA) by effectively selecting a user-centered service from the most appropriate services that match the user’s preferences while satisfying the specified QoS level. The proposed solution is executed in two main phases comprising pre-selection of services that provide the required QoS level for the user’s and static selection before the runtime. The most appro- priate services for SC are selected according to the relative dominance of the services.

Huang et al. [15,19–21], and [14] presented a service merging approach that maps and co-locates neighboring virtual service on the same physical devices to reduce the communication energy costs and to balance the energy consumption by sensors to prolong the system life- time. They applied WuKong middleware to automatically discover and manage smart sensors and actuator devices, which could support flexible and interoperable IoT systems by selecting from predefined flow-based programs (FBP) to find the appropriate mapping to the abstraction of an application onto physical smart devices and actuators according to the QoS requirements. They proposed an energy sentient algorithm called the maximum weighted link (MWL) algorithm that treats selection as a two-co-locating problem and ignored the distance between devices [21]. They also updated their model [20] to consider the distance between devices because two remote devices require more energy for communi- cation than closer devices. They treated the problem as a quadratic programming problem and proposed a reduction method to transform the problem into an integer linear programming (ILP) problem.

Huang et al. [19] presented a mapping model that considers the distance and runtime QoS requirements, such as the accuracy response time. Moreover, they attempted to reduce the total communication en- ergy in IoT systems during each new update. They modeled the service matchmaking problem as a maximum weighted bipartite problem and solved it using the ILP model. Huang et al. [14,15] also used strategies for solving the maximum weighted independent set (MWIS) in their selec- tion framework, which considered all possible co-location combinations for services. They implemented this method only in single-hop networks and treated the problem as a data clustering problem [15]. Heuristic algorithms were employed to find the maximum weight for the inde- pendent set, which comprised the basic decisions regarding service co-location. However, the method was subsequently implemented in a single-hop network and multi-hop network by modeling the problem as a quadratic programming problem and solving it with the ILP model [14]. Dhondge [7] presented a study of industrial IoT (IIoT) systems where they focused on collecting and controlling communication data and

parameters obtained from sensors on factory floors. They aimed to reduce and balance the energy consumption in the IoT by proposing a heuristic and opportunistic link selection algorithm (HOLA) to maintain the energy efficiency in the IoT sensors by opportunistically transporting the IoT sensor data to smart devices. These intelligent devices had mul- tiple radio links (3G/4G LTE, Wi-Fi, and Bluetooth) to transmit the received data to the cloud by using HOLA to select the best radio link based on the quality preserved by the Services Level Agreements and the energy cost of the relationship.

WSN-based IoT network into a small network, where each was called a cluster head. By using a meta-heuristic algorithm to optimize the network communication, the clustering method could divide the WSN into a small, reliable, and manageable network with efficient data transmission. The proposed algorithm used five parameters comprising the distance, energy, delay, network load, and temperature of the IoT devices. To efficiently select the cluster heads, a novel method was proposed by combining the gravitational search algorithm (GSA) with the artificial bee colony (ABC) algorithm.

Abinaya et al. [16] also aimed to minimize the energy, time, and loss of packets during the transfer of data among nodes when selecting and combining services. They aimed to increase the energy efficiency, time utilization, and throughput without any loss of data or reduction in the packet delivery ratio. They proposed a meta-heuristic algorithm (ACO) to find the shortest path between the nodes using the network routing protocol approach. The algorithm clustered the data nodes before then transferring data between the nodes with low power consumption.

Khan et al. [61] proposed a QoS-aware secured communication approach for IoT-based networks called QoS-IoT. The Sybil attack detection mechanism was used for identifying Sybil nodes during multi-hop communication. To ensure the fair and efficient utilization of the available bandwidth, an optimal contention window (CW) was selected for QoS provisioning. The optimal CW size was selected by using the binary exponential back-off mechanism. The performance of QoS-IoT was evaluated based on measurements of Sybil attack detection, fairness, throughput, and buffer utilization.

reducing the search space for service discovery. The latest subjective assessment obtained from user feedback concerning the user context similarity was used to estimate the QoS in a similar environment. A subjective evaluation was conducted by calculating four factors: privacy, reliability, availability, and response time. Three objective attributes comprising the availability, response time, and calculation speed were determined by obtaining a score for each service. The service with the highest score was selected.

Liu et al. [11] designed a cooperative evolution algorithm (CEA) for service composition and selection to solve MOPs when selecting an optimal service from a group of services with similar functionalities and diverse QoS requirements. They aimed to develop an efficient and robust approach by considering non-functional attributes comprising the cost, time, availability, and reliability. A heuristic optimization approach was developed by integrating GA and PSO in CEA. Their approach was characterized by improving the best local first strategy to select a service candidate, enhancing the global best policy, and fitting the self-adaptive mechanism for the learning rate.

Gao et al. [51] conducted global optimization for event SCs by using a meta-heuristic method based on GA but without the need to consider all possible combinations. The non-functional attributes were represented by QoS properties for the latency, price, energy consumption, bandwidth consumption, availability, completeness, accuracy, and security.

In particular, they provided a QoS aggregation schema for complex event service (QoS-AS for CES) composition in CES networks by treating complex event processing as reusable services where reusability was determined by examining intricate event patterns and primitive event types. The abstract architecture of these complex networks is shown in Fig. 5.

Anas et al. [50] aimed to simulate human thinking when making a decision about multiple choices and using data collected from IoT sen- sors. They considered an example of a human making a decision while driving when faced with two paths that lead to the same place but with different trade-offs in terms of the time, distance, or cost. Their frame- work collected data to help systems to select their future path. The main problem was how to capture and use human heuristic information. The final solution reduced the total time and obtained more accurate Results. They used the heuristic-IoT framework for enhancing heuristic search algorithms and collecting data from IoT sensors. They implemented their framework with a GA using data regarding the habits and behavior of drivers collected from sensors deployed in taxis to solve the travelling salesman problem (TSP) with hidden edge costs. The proposed frame- work used heuristic information to generate smarter initial solutions for the GA to solve the TSP instead of generating it randomly.

On the cloud manufacturing side, Huang et al. [5] focused on solving the MOPs for cloud SC optimal selection (CSCOS) while considering non-functional QoS factors. They determined four parameters comprising the cost, execution time, energy consumption, and reliability. Non-functional attributes were considered for three types of cloud ser- vices: manufacturing software, hardware, and human resource services. They introduced a new chaos control optimal algorithm (CCOA) to solve the CSCOS problem in large-scale solution spaces.

Li et al. [9] focused on a cloud logistics platform based on IoT and cloud computing environments in order to study a logistics center by considering service encapsulation and resource virtualization. They defined the primary requirement of the logistics center in terms of service selection as how to find the best actual Web services rather than the best combination of abstract Web services. Non-functional constraints were used to compute the QoS for composite services by applying rules of Canfora [9] for an aggregation function and four QoS parameters comprising the time, cost, availability, and reliability. In addition, a dy- namic service selection model was proposed based on PSO.

Abu-Safe et al. [62] proposed a service selection model that ranked services based on end user feedback and the reputation value. The Likert scale was employed as a user-friendly method for acquiring feedback from end users. An improved-PSO was used to select the optimal service from ranked services. Two quality groups used to calculate the QoS factors comprised the business quality group (BQG), i.e., reputation and execution price, and the system quality group (SQG), i.e., reliability, availability, and response time.

Jatoth et al. [60] introduced a meta-heuristic model using an adaptive genotype evolution-based GA (AGEGA). They balanced the QoS param- eters and connectivity constraints to perform SC in a cloud environment. The discrete uniform rank distribution (DURD) and discrete uniform service rank distribution (DUSRD) were proposed to determine the ser- vice fitness and SC fitness, respectively, thereby allowing services to be pruned from the non-optimal solutions and reduce the search space. The specific QoS parameters employed were not defined. However, they used a synthetic data set with QoS parameters such as accessibility, cost, availability, throughput, response time, security, integrity, and reliability.

Elhosenya et al. [22] considered health services applications where they proposed a new cloud-IoT based model for efficiently managing large amounts of data in an integrated industry (4.0) environment. They aimed to satisfy five factors, reducing the medical requests time (execution time, waiting time, and turnaround time), optimizing the storage space for patient data, improving task scheduling, providing a real-time data retrieval mechanism for health care applications, and

maximizing the utilization of resources. They proposed a new model for optimizing virtual machine selection by using three optimization algo- rithms (GA, PSO, and Parallel PSO (PPSO)) to build the proposed model. Zhou and Yao [12] focused on cloud manufacturing by introducing a solution for composited cloud manufacturing service optimal selection (CCSOS) under multi-objectives using four QoS parameters comprising time, cost, availability, and reliability. They introduced the hybrid ABC (HABC) algorithm for CCSOS problems with three main steps. First, the HABC was initialized before outputting feasible solutions at each itera- tion and these solutions were ordered from large to small settlements. The onlooker strategy was improved by updating all the solutions with the chaos algorithm, which had irregular properties in all states and it could help the worst bees. The bee colony’s search space was searched more efficiently based on knowledge of the problem structure and social colony information by updating small solutions with Archimedean

Yuan et al. [56] proposed a dynamic approach by used a fuzzy logic technique and cultural GA to adapt the global QoS constraints. The global QoS constraints were decomposed into near-optimal local QoS con- straints, before independently selecting a service component for each abstract service. They aimed to satisfy five QoS factors comprising the price, response time, availability, throughput, and successful execution rate.

Hosseinzadeh et al. [57] combined a machine learning method with a meta-heuristic algorithm in a hybrid ANN-PSO algorithm. They aimed to improve the execution time and reachability rate for a service selection model in cloud-edge computing. A labeled transition system was pro- posed based on a verification approach to check the correctness of the proposed model. Three QoS factors were considered comprising the response time, availability, and prices.

Jin et al. [53] considered the services provided by IoT devices and designed a physical service model (PSM) to describe various physical IoT services as well as a method for selecting a candidate physical service that satisfies a user’s requirements. The PSM model included three main components (devices, resources, and services) and the relationships be- tween them were defined. The following four QoS properties were determined based on the features of physical services: the available time when environmental services may be accessible, the service area comprising descriptions of physical services for on-device resources that contain information about an entity, the processing time representing the computational time capacity of IoT devices, and the reputation calculated for a service to help users decide whether to use a service based depending on the service ratings given by different users (equipment or service) after requesting services. A physical service selection (PSS) al- gorithm was proposed in terms of spatio-temporal features to rate candidate physical services according to user preferences based on in- dividual QoS rating functions. The PSS algorithm comprised pre-sorting, filtering, and final sorting phases.

In 2016, Jin et al. [54] improved their PSM to dynamically rate QoS values and select a physical service based on the user’s preference. They added the following three types of QoS attributes to reflect the features of physical services: spatial-temporal attributes related to the problems that affect the mobility and availability of physical services due to network, energy-saving, or privacy issues, i.e., available time and service area; positive features that preferably have higher values, i.e., reputation and reliability; and negative features that preferably have lower values, i.e., processing time and execution cost.

location and geographic location, and neural collaborative filtering (NCF) is applied as a neural network model to learn the in-depth latent features. NCF utilizes local features such as similar users or similar ser- vices with historical QoS values and global elements comprising user latent vectors and latent service vectors. NCF then combines the contextual information with the historical QoS values to perform both the prediction and selection processes.

Jatoth et al. [60] also aggregated the application layer and network layer with a meta-heuristic model using AGEGA, where they balanced the QoS parameters and connectivity constraints to perform SC in a cloud environment. DURD and DUSRD were applied to determine the service fitness and the SC fitness, respectively, thereby allowing services to be pruned from the non-optimal solutions to reduce the search space. However, they did not define the specific QoS parameters used in their study, although they described the use of a synthetic data set containing QoS parameters, such as accessibility, cost, availability, throughput, response time, security, integrity, and reliability.

Singh et al. [63] introduced a framework based on multi-criteria decision making for directing the selection process. The framework aggregated the sensor, network, and application layers, and they com- bined two multi-criteria decision making methods comprising the ana- lytic hierarchy process (AHP) and TOPSIS. AHP was used to calculate the weights for the QoS criteria and TOPSIS ranked the service providers. They describe a QoS parameter based on three IoT components, i.e., things, communication entity, and computing entity. Nine QoS parame- ters were considered: operating temperature range, resolution, accuracy, delay, jitter, pricing, availability, throughput, and response time.

Most previous studies used simulations to evaluate the performance of their proposed algorithms and they conducted comparisons with other SSAs in the same environment. In addition, prototypes were constructed in other studies to evaluate the performance of their proposed algo- rithms. In some cases, simulations and prototype were combined in the evaluations. In the following, we discuss the three methods used to evaluate the state-of-the-art algorithms.

Huang et al. [5] demonstrated the high performance of their proposed CCOA algorithm in CSCOS based on simulations. They found that their algorithm was better at searching large-scale solution spaces than GA and typical chaotic GA, where it reduced the time required and energy con- sumption. They recommended improving the effectiveness of CCOA to solve other combinatorial optimization problems by balancing the search capacity and time consumption, and tested the effects of other QoS factors.

Liu et al. [11] developed CEA by integrating GA and PSO. They conducted simulations and generated a data set at different scales based on real scenarios. They showed that CEA was a highly efficient search approach with greater stability and more rapid convergence compared with canonical PSO (CPSO) and the improved discrete immune algorithm based on CPSO (IDIPSO). They recommended extending the experiments to greater scales.

Na et al. [48] showed that their method decreased the time required for implementation and increased the rate of service utilization. When the service utilization reached 100%, the algorithm could not make any changes after initialization. They recommended focusing on group-based service selection to reduce the communication energy requirements.

Zhou et al. [12] evaluated the performance of HABC based on com- parisons with GA, PSO, and the basic ABC algorithm using 15 different user QoS preferences. They randomly generated the data set and the Results showed that HABC exhibited a high search capacity and stability with acceptable time complexity. They recommended studying the per- formance of HABC in detail according to the characteristics of the cloud manufacturing environment, and integrating HABC with other heuristic algorithms.

Reddy et al. [17] assessed the performance of the GSA and ABC al- gorithm based on the trends in the network sustainability of live IOT nodes in the network and by evaluating its convergence compared with PSO, GA, ABC, and GSO. The Results demonstrated that their approach performed better than the other methods at cluster head selection for IoT devices.

Yin et al. [49] showed that the pruning algorithm was more efficient than the breadth-first search shortest path algorithm. Furthermore, the DijkstraKNN algorithm was suitable for small shortest paths, but the PruningBFS algorithm was better when the candidate set was small and the shortest paths were significant. In addition, the execution times were more stable for the BFSKNN and PruningBFSKNN algorithms according to tests using two real-world data sets comprising the Epinions Social network, and LiveJournal social network. They recommended identi- fying approximation algorithms that can handle more significant graphs where time is required to compute several nearest neighbors.

Abinaya et al. [16] compared the ACO algorithm with load balancing clustering for data clustering. They also compared the number of nodes versus the data throughput for time-efficiency prediction, where ACO reduced the time and energy required. ACO could find an almost optimal solution and it could be scaled to large-scale IoT environments.

Nwe et al. compared FQSA and other SSAs including (genetic algo- rithm and fuzzy logic based service selection algorithm (GAFLSS), agent proxy on user preference approach (APUP), and fuzzy linear program- ming approach (FLP)) [52], from the reliability of the trust mechanism-based service selection algorithm. They calculated the sym- metric mean of the recall and precision for each system using the fre- quency for various evaluation metrics (QoS aggregation, QoS reasoning, QoS scalability, personalized confidentiality, and user friendliness). The Results showed that FQSA improved the service selection performance, user satisfaction level, and user friendliness rates. However, many com- putations were required to select the services, which was time consuming.

Jin et al. [53,54] evaluated the PSS method against the skyline-based algorithm called the one-pass algorithm (OPA) in terms of the execution time and user preferences for physical services. They used a random data set based on the Climatography of the United States Number 81 series (CLIM8144) data set. The Results showed that PSS was efficient with a large number of candidate physical services [53] and it performed better than OPA in the filtering step by reducing the number of CPUs to improve the selection performance [54]. For future research, they suggested creating and implementing an IoT service platform that allows users to register their devices, and to discover and select required physical ser- vices, as well as addressing privacy and security issues, and reducing the search space. They suggested the use of pruning methods and heuristic techniques.

Huang et al. [14,15,19–21] conducted simulations to assess the per- formance of their algorithm. Their algorithm reduced the total commu- nication energy by about 20% in IoT systems [20,21]. They compared the performance of greedy matching and the ILP solution at service matching and found that the ILP solution was optimal but it required more time, and it might not be scalable to large-scale IoT systems [19]. In addition, they compared ILP [14,15] and the MWIS framework with MWL [19–21], as well as with other selection strategies (GWMAX, GWMIN,

and GWMIN2) [15]. The Results were improved [15] and the total communication energy was reduced by 10% compared with other methods [21]. They also implemented MWIS in a multi-hop network [14] and the total communication energy was reduced by more than 10% [15]. They planned to develop heuristic algorithms and test them with Adriano-based devices, as well as studying more complex applications by checking the automatic configuration module to support more users interacting with IoT systems.

Shukla et al. [55] presented CBSSMS to link IoT services with appropriate sensors. They conducted comparisons with existing collo- cation distance algorithms based on the random mapping of services on any IoT device, where they tested linear, random, and star FBP networks. The Results showed that the CBSSMS algorithm reduced the latency and energy consumption between devices compared with the collocation distance algorithms [20].

Elhosenya et al. [22] conducted a comparative study based on the execution time, system efficiency, and data processing speed. They evaluated the effectiveness of their model against GA, PSO, and PPSO. The Results showed that the proposed model improved the total imple- mentation time by 50%. Moreover, the efficiency of the system at real-time data recovery improved significantly by 5.2%.

Lin et al. evaluated their MOEA/D approach based on a sensor se- lection problem [39]. They showed that increasing the problem size led to an increase in the energy consumption, energy balancing, energy harvesting services, and pollution level, but it did not affect the QoS. They generated their data set.

Khanouche et al. [13] assessed the performance of EQSA by simu- lating the A2NEts European project scenario, which involves monitoring and smart metering for buildings. They synthetically generated data sets based on QoS factors and realistic energy models to specify the energy profiles of IoT services. The simulation Results demonstrated the efficient performance of EQSA in terms of the energy efficiency, selection time, composition lifetime, and optimality of the solution.

Li et al. [9] simulated their PSO method and showed that it was more efficient than using GAs. PSO optimized different fitness parameters and maximized the availability or reliability while maintaining a low cost and response time. They considered a real-world scenario involving the transport of furniture among countries by combining five Web services related to shipping cargo services. They applied their method to a pre- viously reported data set (Mao data set) of QoS values. The feasibility of applying PSO was confirmed by implementing the simulation program in

Yuan et al. [56] evaluated the performance of a fuzzy logic technique and cultural GA by comparing it with a QoS constraints decomposition (QCD)approach based on cultural GA and an integer programming (IP)-based approach. The experimental Results showed that using the fuzzy logic technique and cultural GA was appropriate in terms of the adaptability and scalability to the environment, as well as satisfying the user preferences and increasing the number of candidate services. They used the Quality Web Service (QWS) data set containing 2508 real Web services with 10 QoS attributes factors [64]. Also they randomly gener- ated other data set according to QWS (RQWS) using the Eclipse pro- gramming tool. They recommended increasing the number of fuzzy sets and formulating more appropriate fuzzy rules, before applying their approach in a distributed environment where a group of distributed QoS registries maintain the QoS values.

The hybrid ANN-PSO algorithm obtained better fitness values compared with PSO, GA, and PSOGA [57]. They evaluated their method based on simulations using the C# language as an integrated develop- ment environment (IDE) and the PAT model checker was employed to prove the correctness of the proposed algorithm. They employed QWS data set containing 2500 Web services. They recommended using deep learning methods to avoid the space explosion problem in the SC model. Satisfactory experiments were conducted based on real-world WS- Dream data sets by Gao et al. [58]. The prediction performance was evaluated using the root mean squared error and mean absolute error. The experimental Results verified the effectiveness of the proposed NCF and context-aware NCF (CNCF) frameworks compared with well-known QoS prediction methods comprising user-based PCC (UPCC), item-based PCC (IPCC), web service recommender (WSRec), and location-based factorization machine (LBFM). They recommended implementing work-based models in the QoS prediction task, such as a recurrent neural network and convolutional neural network, and studying the time factor

The dynamic LRI model was compared with another based on user feedback [59], and the Results showed that the LRI model improved the effectiveness in a real-time scenario because it considers the similarity between users, although the time consumption was higher. The data set and scenario were generated in the study. For future research, they rec- ommended applying a user-centric service management system based on the user’s preferences in the IoT environment.

Singh et al. [63] applied their AHP–TOPSIS framework and existing AHP–AHP framework to a health care case study and compared the Re- sults based on the execution time for the selection value. AHP–TOPSIS required a lower execution time than AHP–AHP to obtain the same se- lection value. They assembled real data sets from three different pro- viders but did not describe them. The robustness of the proposed framework was measured but the sensitivity toward changes in the user or decision maker was not analyzed. They recommended extending their method to deal with fuzziness in human decision making.

Sun et al. [6] evaluated three heuristic algorithms (ACO, GA, and PSO) by building prototypes to calculate the fitness, minimum, and dif- ference in the residual energy for smart devices. The Results showed that PSO performed better than GA and ACO at the optimization problem.

Mejri et al. [8] developed a parallel implementation of the ANN model and TOPSIS model to evaluate the scalability of SSA in the IoT. They used the mean absolute error to measure the quality of the pre- diction model. As the number of services increased, the mean absolute error decreased and the accuracy increased, but there was no significant increase in the execution time. They recommended using an evolutionary technique and pruning methods. A limitation was that the proposed approach was applied to a training set built during search steps that did not meet all Internet requirements. In addition, they only considered the response time and reliability as QoS factors in their study.

methods based on GA, i.e., GA, orthogonal GA (OGA), adaptive genetic programming (AGP), and transactional GA (TGA). The experimental Results showed that AGEGA obtained better fitness values within a lower execution time. They used QWS as the data set of QoS parameters and randomly generated some of the QoS parameters and their corresponding values. They recommended considering multiple service connectivity constraints and multiple QoS parameters in future research, as well as developing an efficient approach for various parallel data processing platforms.

requirements according to the sensor data descriptions, the requirements for sensor selection and indexing, the memory required to select sensors, and the change in the accuracy rate. They evaluated the processing time and memory requirements based on sensor selection and relational ex- pressions during the semantic querying phase. The data sets employed were from the Linked Sensor Middleware project. They showed that CASSARAM could reduce the processing time and minimize the storage

requirements. In the future, they plan to merge their algorithm with leading IoT middleware solutions such as SenseMA and Open-IoT to improve the automated sensor selection functionality in the IoT envi- ronment. They also recommended enhancing the efficiency of CAS- SARAM to integrate automated machine learning techniques using cluster-based sensor search and heuristic algorithms.

Dhondge et al. [7] validated HOLA based on simulation studies and designed a HOLA IoT sensor prototype with Adriano. In practical ex- periments, they measured the energy consumption of the HOLA IoT sensors in different operational scenarios and communication settings. In particular, they compared the energy consumption of HOLA and the Vanilla System, and showed that HOLA could reduce the energy consumed in IoT sensors by reducing the internal communication in the IoT device. The time consumption with HOLA was better compared with the Vanilla System. They recommended detecting the maximal energy efficiency that satisfies the SLA agreement and evaluating HOLA using different smartphone densities in the future.

In addition, most of the solutions proposed for SSA used search optimization algorithms, particularly meta-heuristic algorithms [16,39, 50] based on evolutionary algorithms (e.g., GA, PSO, and ACO), as well as heuristic algorithms [7,19–21,49]. To the best of our knowledge, very few studies have implemented hyper-heuristic algorithms for making selections in the IoT system, as shown in Ref. [22]. The remaining state-of-the-art methods employed other types of algorithms such as Pareto optimality [13] and the PSS method [53,54].

In order to evaluate and measure the performance of SSAs, studies have generally compared the proposed algorithms and models with others, as shown in Tables 4 and 5. Most studies conducted simu- lations but some involved building prototypes. The most commonly used language is Java, followed by MATLAB and other programming lan- guages, as shown in Fig. 8. In most studies, data sets were generated for the experimental evaluations [12,19–21,52,55], although some used existing data sets that were not constructed specifically for IoT envi- ronments [9,49,53,54]. Thus, there is need to provide an appropriate data set that satisfies the QoS requirements for services in IoT environments.

state-of-the-art methods. Fig. 6 was derived by analyzing the imple- mentations of solutions for SSAs, as shown in Table 3. Fig. 8 was extracted by analyzing the evaluations and performance measurements for SSAs, as shown in Tables 4 and 5. Figs. 6–8 should help researchers to extract useful information to guide their research into SSAs in IoT environments.

The development of the IoT environment has led to increases in the number of sensors that provide different services to end users. These services have similar functional properties but different non-functional properties (QoS factors). This problem requires the selection of algo- rithms that can identify the optimal service to meet the requirements of the end user. Many studies have investigated SSAs based on Web services but we focused on SSA solutions proposed for the IoT environment in this review. We presented the fundamental design structures, behaviors, and optimization objectives of SSA in IoT under QoS constraints. The state-of- the-art algorithms were analyzed based on the implementation and QoS layer in the IoT architecture (sensor layer, network layer, and application layer). Moreover, performance evaluations were analyzed to determine the most commonly used methods and data sets for assessing the per- formance of algorithms. Finally, we identified possible future research directions and deficiencies to help the research community develop appropriate SSAs for the IoT system and to optimize the critical QoS factors required by end users.

In the future, we recommend reviewing more SSA solutions by increasing the research scope. In this review, we focused mainly on heuristic, meta-heuristic, and hyper-heuristic algorithms, and thus we recommend studying other types of optimization algorithms. In addition, we recommend the construction of an appropriate QoS data set for the IoT environment.

Yu SY, Shih CS, Hsu JYJ, Huang Z, Lin KJ. QoS oriented sensor selection in IoT system. In: Proceedings - 2014 IEEE international Conference on Internet of things, iThings 2014, 2014 IEEE international Conference on green Computing and communications, GreenCom 2014 and 2014 IEEE international Conference on cyber-physical-social computing, CPS 20. iThings; 2014. p. 201–6.

Huang Z, Lin KJ, Li C, Zhou S. Communication energy aware sensor selection in IoT systems. In: Proceedings - 2014 IEEE international Conference on Internet of things, iThings 2014, 2014 IEEE international Conference on green Computing and communications, GreenCom 2014 and 2014 IEEE international Conference on cyber-physical-social computing, CPS 20. iThings; 2014. p. 235–42.

Shukla J, Maiti P, Sahoo B. Low latency and energy efficient sensor selection for IoT services. In: International Conference on Technologies for Smart City Energy Security and Power: Smart Solutions for Smart Cities, ICSESP 2018 - Proceedings; 2018. p. 1–5. 2018-Janua.

