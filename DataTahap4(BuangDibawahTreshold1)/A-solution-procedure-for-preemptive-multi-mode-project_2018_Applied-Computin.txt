Abstract Extensive research has been devoted to the multi-mode resource constrained project scheduling problem (MRCPSP). However, little attention has been paid to problems where preemp- tion is allowed. This paper involves the preemptive multi-mode resource constrained project scheduling problem (P-MRCPSP) to minimize the project makespan subject to mode changeability after preemption. This problem is a more realistic model and extended case of multi-mode resource constrained project scheduling problem. A binary integer programing formulation is proposed for the problem. The problem formed in this way is an NP-hard one forcing us to use the Simulated Annealing (SA) algorithm to obtain a global optimum solution or at least a satisfying one. The per- formance of the proposed algorithm is evaluated on 480 test problems by statistically comparing in term of the objective function and computational times. The obtained computational results indi- cate that the proposed algorithm is efficient and effective. Also, it is concluded from the results that mode change is very effective to improve the optimal makespan of the project.

the resources availabilities are considered given. The objective is then to minimize the completion time of the project. In the literature there are several algorithms that solve the RCPSP; recent reviews about exact methods and heuristics can be found in Kolisch and Hartmann [30], Hartmann and Kolisch [19], Hartmann and Kolisch [20], Zhang et al. [48], Zhang et al. [49], Jairo et al. [23], Hartmann and Briskorn [17], Agar- wal et al. [3], Fang and Wang [15], Kone´ [31], Paraskevopoulos et al. [38].

time. In these cases, modeling and solving such a problem as a classical MRCPSP, especially in the preemptive case may lead to poor solutions. To the best of our knowledge, no research has been performed on the P-MRCPSP with permitted mode change.

Therefore, the contribution of this paper is fourfold: first, a binary integer programing formulation is developed for the preemptive multi-mode project scheduling problem of mini- mizing the project makespan subject to resource constraints and precedence relations, where execution mode of each activ- ity can be changed after being preempted. This problem is called P-MRCPSP-MC. This model is not considered in the past literature. Second, an efficient meta-heuristic solution procedure based on SA is developed for the problem due to NP-hardness of the problem. In proposed SA, the activity list representation is used to encode a project schedule and the serial schedule generation scheme (SSGS) embedded with a new dynamic heuristic to translate the schedule representation to a schedule. Third, the effectiveness of proposed SA for the P-MRCPSP-MC will be analyzed. Finally, the effect of mode changeability on project makespan is analyzed.

The remainder of this paper is organized as follows: Sec- tion 2 is devoted to the presentation of the problem. In Sec- tion 3 the steps of our algorithm to solve the problem is explained. Computational results are represented in Section 4. Finally, Section 5 contains the conclusions.

In continuation the project is represented by an activity on the node (AON) network G(N, A) where the set of nodes, N, rep- resents activities and the set of arcs, A, represents finish-start precedence constraints with a time-lag of zero. The preempt- able activities are numbered from the dummy start activity 1 to the dummy end activity n and are topologically ordered, i.e., each successor of an activity has a larger activity number than the activity itself. The set of activities is to be scheduled on a set Rq of renewable and Rm of nonrenewable resource types. For each activity i e N, instead of a fixed duration and known resource requirements, a fixed work content Wi is given which essentially indicates how much work has to be per- formed. This work content can be performed in a mode mi, which is chosen out of a set of Mi different execution modes, i.e., with different speeds and resource requirements as long as the required work content is met. The accomplishing of an activity can be temporarily interrupted at discrete time

The basic MRCPSP and P-MRCPSP assume that activities assigned modes cannot change during the execution of the pro- ject. This assumption is one of the classical MRCPSP and P- MRCPSP shortcomings. This common assumption can be jus- tified as long as essence and materials of modes are different and mode change is inapplicable. However, if execution modes

resource units (k e Rq) during each time unit of its execution. For each renewable resourcek e Rq, the availability aq is con- stant throughout the project horizon. Activity i, executed in mode mi, will also use rm nonrenewable resource units (l e Rm) of the total available nonrenewable resource am. Logically, it is assumed that mode mi with higher wimi requires more renew-

The objective function in Eq. (3) minimizes the project duration. Remember, however, that this value exceeds the optimal project length because of the unit duration of both the dummy start and dummy end activity. The constraints in inequality (4) assure that work content of each activity is met. The constraints in Eq. (5) assure that each activity is

[1,8,21,25,35,40]. In this section an SA algorithm is proposed to solve P-MRCPSP-MC. In order to increase quality of the proposed SA, an efficient dynamic heuristic algorithm is imple- mented to construct a schedule. Also exact solutions obtained from Lingo 11 are considered to provide comparable computa- tional efforts for SA.

Simulated Annealing (SA) which has been successfully applied to various difficult combinatorial optimization problems is a random search method that is based on Monte Carlo iterative strategy. The origins of SA are in statistical mechanics (Metro- polis algorithm) and it initially was presented as a search algo- rithm for combinatorial optimization by Kirkpatrick et al. [27]. SA is useful for problems with a very large discrete search space, which is too large for an enumeration search method. SA algorithm starts by generating an initial solution and by initializing the so-called temperature parameter T. Then, at each iteration a solution s' is randomly created in the neighbor- hood of the current solution and if it is better than the current solution, it replaces the current solution. If the new solution is not an improvement upon the current solution, it replaces the current solution with a probability generally computed follow-

ing the Boltzmann distribution exp(— f(s')—f(s)) where T is the current temperature and f(s')- f(s) is the change in objective function value obtained by moving from previous solution to new solution. The temperature T is decreased during the search process, thus at the beginning of the search the probability of accepting uphill moves is high and it gradually decreases, con- verging to a simple iterative improvement algorithm. Regard- ing the search process, this means that the algorithm is the result of two combined strategies: random walk and iterative improvement. In the first phase of the search, the bias toward improvements is low and it permits the exploration of the search space; this erratic component is slowly decreased thus

leading the search to converge to a (local) minimum. The prob- ability of accepting uphill moves is controlled by two factors: the difference of the objective functions f(s')- f(s) and the tem- perature T. On the one hand, at fixed temperature, the higher the difference f(s')- f(s), the lower the probability to accept a move from s to s'. Whereas, the higher T, the higher the prob- ability of uphill moves.

The choice of an appropriate cooling schedule is crucial for the performance of the algorithm. One of the most used ones follows a geometric law Tk+1 = aTk where a e (0, 1) which corresponds to an exponential decay of the temperature. The cooling rule may vary during the search, with the aim of tuning the balance between diversification and intensification. For example, at the beginning of the search, T might be constant or linearly decreasing, in order to sample the search space; then, T might follow a rule such as the geometric one, to con- verge to a local minimum at the end of the search. The cooling schedule and the initial temperature should be adapted to the particular problem instance, since the cost of escaping from local minima depends on the structure of the search landscape. The description of SA indicates that a basic SA does not use the history of the search process. This is one of the reasons why SA is often outperformed by other meta-heuristics. How- ever, due to its simplicity, it is generally very fast and it can be successfully integrated into other search techniques.

Having got a feasible solution represented by the vector described above, the starting times of all activities (sub- activities) are then defined by using the serial SGS. The SGS determines how a feasible schedule is constructed by assigning starting times to the activities. It sequentially adds activities in the activity list to the schedule until a feasible complete sched- ule is obtained such that no precedence or resource constraint is violated. In this paper however, execution modes are deter- mined using a dynamic heuristic embedded into serial SGS. Our proposed heuristic is derived from part period lot sizing heuristic (DeMatteis [12]); algorithm chooses the number of periods covered by the replenishment order such that the total holding costs are made as close as possible to the setup cost.

before the execution of SA. The data reduction procedure has originally been proposed by Sprecher et al. [44] to increase the speed of their branch and bound algorithm for the MRCPSP. The idea behind this procedure is to omit all non- executable and inefficient modes from the project data without affecting the optimal makespan. An execution mode mj is called non-executable if its execution would violate the renew- able resource constraints in any schedule. Also, a mode is called inefficient if there is another mode of the same activity with the same or higher speed and no more requirements for all resources. Hence, non-executable and inefficient modes may be excluded from the project data without losing optimality.

In the previous researches, various representations for sched- ules in the construction of heuristics for the RCPSP are devel- oped (Kolisch and Hartmann [30]). The two most important ones are the random-key (RK) representation and the activity-list (AL) representation. Hartmann and Kolisch [19] deduced from experimental tests that procedures based on AL representations outperform the other procedures. The

RWR is a representation of work-resource balancing. In our proposed SA, mode assignment is done by comparing real- ized ratio of work to resources so far with RWR. For selected activity i, mode mi with realized ratio of total completed work content to the spent resources so far as close as to RWR is assigned.

Starting from time period 1, for each time period t, set of activities that are executable at a certain time period t (i.e., all their predecessors have completed), is identified. This set of activities is denoted by Ia which should consist of at least one activity. Activities in Ia are arranged according their sequence in I. In each iteration, first activity j is selected from Ia and deleted from it. If activity j was in progress at period t-1, same execution mode should be assigned to it if possible. Else, procedure is continued by selecting first activity j from Ia again.

the serial schedule generation scheme (SSGS) to translate the schedule representation to a schedule. Since the minimum pro- ject makespan criterion is a regular performance measure, i.e., a measure which is non-decreasing in activity completion times, one may use the serial SGS rule to construct the sched- ule. As a result, there is no danger of omitting an optimal schedule by using the serial SGS here. The serial SGS sequen- tially adds activities to the schedule until a feasible complete

at period t . If there are no remaining modes for activity j, pro- cedure continues by selecting first activity j is from Ia. Also, if Ia is empty, algorithm restarts by setting t = t + 1. Above procedure is continued until dummy activity n be a scheduled activity. The time complexity of this procedure is the same as the basic serial SGS, O(n2K) (Pinson et al. [39]). The pseudo- code for decoding a solution to a schedule is shown in Table 2. For example, in Fig. 1 consider the following activity list:

consecutive unsuccessful trials to improve the mode assign- ment have been made. In this paper, J equals to four times the number of activities in the project. This procedure acts only on mode assignment and do not change the activity list. Also, this procedure stops as soon as it reaches to a feasible solution; i.e., resulting solution is close to the inner border of nonrenew- able feasibility. So this procedure may not generate a feasible solution that is very different from the original unfeasible one.

In the proposed SA an initial solution is created by setting all activities on the activity list based on the latest finish time (LFT) which is an efficient priority rule (Kolisch [29]). Then, the procedure described in Section 4.2 is used to determine exe- cution modes and execution time of activities.

In order to generate a neighborhood of current solution the following method is used. Let I = (jI, jI , ... , jI ) be the current solution. Neighborhood generation mechanism is applied to the activity list of the solution. For activity list of I, neighbor- hood generation mechanism operates as follows: A random activity jI , is selected from the activity list with position a. Last

A set of 480 problems was generated by the project generator ProGen/px developed by Drexl et al. [14] in order to validate the proposed SA algorithm for the P-MRCPSP-MC. To do this the parameters given in Table 3 are used. The indication [x,y] means that the value is randomly generated on the inter- val [x,y]. Renewable resource availability is constant over time. For each combination of the parameter values, 4 instances were generated. The resource factor RF reflects the average portion of resource required per activity. The resource strength RS reflects the scarceness of the resource. The problem set was extended by generating project deadline sn in the same way as described in Section 2.

The values of parameters used in Simulated Annealing (SA) algorithms must be carefully selected since parameter values may have a significant influence on the performance of the algorithm. In this paper, the Taguchi experimental design is used to tune the parameters of SA. CPU-time limit was speci- fied as a stopping criterion which is selected through the com- putational experiments. We obtained good results by indexing

mines the optimal level of controllable factors and minimizes the effect of noise. In the proposed SA, the factors that should be tuned are temperature control parameter a, initial tempera- ture and number of milliseconds per activity CPU. A set of 27 randomly generated problems with 40 non-dummy activities are used for parameter tuning. Using MINITAB software ver- sion 16, based on a L27 orthogonal array design the optimal levels (in Bold) of the parameters are reported in Table 4.

2.5 GHz processor and 3 GB memory. Since we could not find any algorithm for P-MRCPSP-MC, the proposed SA is com- pared with the optimal solution obtained by Lingo 11. Table 5 presents the computational results of the proposed algorithm where it is compared with the optimal solution obtained by Lingo 11 (or the best obtained solution by SA if Lingo is not able to solve the problem). Proposed SA executed 10 times for each problem to obtain more reliable data. The experimen- tal results demonstrate that control parameter calibration pro- vides high quality solutions. Following notations are used in Table 5:

than 30, while there are many instances that the Lingo is unable to solve, there is a solution by SA. However, Lingo obtained optimum solutions for 229 out of 480 problems in 1000 s and SA algorithm solved all problems with low relative deviation and in a very short time (70 ms per activity). Average CPU-time for Lingo indicates that when the number of execu- tion modes is increased the complexity of the problem is increased. ARD for the algorithm shows that proposed SA gives robust solutions. Also, NPM for the algorithm indicates that too many executions of problems reach the optimum solution.

To observe the statistical comparison of the differences between the results of the Lingo and SA, a paired t-test is used for 229 problems to which Lingo obtained optimum solutions and the corresponding 95% confidence interval is calculated as [—9.36, 7.82]. Since the lower confidence level is negative and the upper level is positive, then the null hypothesis cannot be rejected as the population mean of the differences could be zero. This implies that the differences between the quality of solutions obtained by Lingo and SA are not statistically significant.

In order to evaluate the effect of changeability assumption, for 229 problems which Lingo obtained optimum solutions, each problem has been solved without mode changeability assumption. Table 6 presents the computational results. From Table 6 it can be observed that mode changeability obviously leads to an overall average makespan improvement. Table 6 also reveals that mode changeability usually leads to better solutions. Average Improvement (%) column shows that the percent loss due to using the P-MRCPSP model instead of the P-MRCPSP-MC is straightly relevant to number of activ- ities and execution modes.

The preemptive multi-mode resource constrained project scheduling problem with permitted mode change (P- MPRCPSP-MC), is investigated in this paper. The objective of P-MPRCPSP-MC is to schedule the activities in order to minimize the project makespan subject to the precedence con- straints and resource constraints. In this problem setting, work content concept is used instead of duration. This problem has not been studied ever before. The problem described with an integer programing model, and then the parameters tuned Sim- ulated Annealing (SA) proposed to solve it. The performance of the proposed algorithm on 480 test problems was compared with the results of the Lingo 11. From the computation results, one could clearly see that the SA algorithm could efficiently solve the project scheduling problem. Also, one could find out that mode changeability obviously leads to an average makespan improvement. For further research, we recommend the adapting mode change concept for other extensions of multi-mode project scheduling problems.

