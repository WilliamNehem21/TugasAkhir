Based on the description model of object-orientation-based direction relation in two-dimensional space, the description mode of object-orientation-based direction relation in three-dimensional space is proposed. The basic idea is that the actual direction region is modeled as an open shape. The computation related to the world boundary of spatial direction region is eliminated, and the processing of the direction predicates is converted into the processing of topological operations between open shapes and closed geometry objects. The algorithms of topological operations between open shapes and closed geometry objects are presented and the theoretical proof for the correctness and completeness of the algorithms is performed.

the reference [2]. It is very important for a spatial database management system to provide a method for modelling and processing direction queries in three-dimensional space [3]. Therefore, the research on object- orientation-based open shape model in three-dimensional space is significant.

Based on the description model of object-orientation-based direction relation in two-dimensional space, the corresponding description model of in three-dimensional space is proposed. The computation related to the world boundary of spatial direction region is eliminated, and the processing of the direction predicates is converted into the processing of topological operations between open shapes and closed geometry objects. The algorithms of topological operations between open shapes and closed geometry objects are presented and the theoretical proof for the correctness and completeness of the algorithms is performed.

composed of five basic elements, including 0-simplex, 1-simplex, 2-simplex, and 3-simplex [5]. The corresponding geometries are point, line segment, triangle and tetrahedron respectively, which are called simplex data structures. Simplex data structure is the simplest geometry structure in three-dimensional, which can make the spatial operations easier.

Open shapes refer to the geometries whose boundaries are partially defined. Open shape objects have infinite interiors and extend beyond the boundary of the embedding world. Now we provide the definition of new ADT OpenShape, which is defined as a base class hierarchy to represent open geometries whose boundaries are not closed. We focus on the data types that are needed to model open direction region. The function interfaces for OpenShape related to the processing of direction relation queries can be defined in C++ notation. Fig.3. shows some examples of open shapes that are useful for the processing of direction relation queries. Therefore, new data types for open boxes can be defined as derived classes of OpenShape, and the attributes can be described using open rectangles, directions and points. We only show the attributes and constructors of each open shape class, as shown in Table 1:

In this section, we will focus on defining a topological operation, namely, interiorIntersects, since this operation is needed to solve direction predicates. The interiorIntersects (open shape O, closed shape C) operation is defined, where O could be an OpenBox1, OpenBox2 or OpenBox3 and closed shape C could be a box. The implementation of interiorIntersects uses the two topological operations of contains and crosses. For any pair of open shape O and closed shape C, the interiorIntersects relation between them is defined as:

In other words, O.interiorIntersects(C) is true if C is contained in O or C overlaps O. Since a closed object C cannot contain an open object O due to infinite extent, we do not have to check for C contains O. We will discuss the implementation of the OpenBox1.interiorIntersects(Box), OpenBox2. interiorIntersects(Box) and OpenBox3.interiorIntersects( Box ) respectively.

An OpenBox1 interiorIntersects a rectangle if there exists a set of points which belong to both the interior of the OpenBox1 and the interior of the box. Fig.4 shows several situations that an OpenBox1 interiorIntersects a box. The boolean value of interiorIntersects operation can be determined by enumerating all possibilities of the interiorIntersecting relationship between an OpenBox1 and a box. O.interiorIntersects(C) is TRUE if and only if at least one of the following three conditions is true:

The first case can be tested by using OpenBox1. contains(Point) operation, the second case is checked by OpenBox1.contains(box) operation, and the third case is checked by using OpenLine1.crosses(box). If any of the endpoints of O is within C, the interiorIntersects operation can be determined to be true without further tests as shown in Fig. 4(d). The pseudo-code for the OpenBox1.interiorIntersects(Box) operation is described as Algorithm 1.

touch the OpenBox1. When continuously moving the box horizontally, OpenBox1 interiorIntersects the box, and the relationship between OpenBox1 and box falls into the three cases as described in algorithm 1.This guarantees the completeness of the algorithm, i.e., the algorithm returns FALSE only when there is no intersection between the interior of OpenBox1 and the interior of the box. The arguments of completeness and correctness for the algorithm 2 are similar.

In this paper, the description model of object-orientation-based direction relation in three-dimensional is put forward based on that in two dimensional space. Then the base class of OpenShape in two-dimensional space is extended, and an object-orientation-based open shape model based on the description model for direction relations in three-dimensional space is proposed. The basic idea is that the actual direction region is modeled as an open shape by constructing a new ADT OpenShape, the computation related to the world boundary of spatial direction region is eliminated, and the processing of the direction predicates is converted into the processing of topological operations between open shapes and closed geometry objects. The I/O and CPU cost of the processing of direction relation queries based on the new open shape model in three- dimensional space, which will be presented in the next paper, is reduced by improving the filtering effectiveness. In future work, we will continue to extend the base class of OpenShape, and study the processing of direction relation queries involving viewer-based direction predicates by deriving more class and operations for ADT OpenShape. The processing of object-orientation-based direction relation queries in a mobile environment is also a direction of future work.

