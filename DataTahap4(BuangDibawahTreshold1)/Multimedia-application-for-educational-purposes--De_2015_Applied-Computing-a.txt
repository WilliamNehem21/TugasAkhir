Abstract This paper is based on many years’ experience with multimedia appli- cations supporting the area of computer science education and it could serve as an inspirational material directed to all educators developing students’ algorith- mic thinking. Education of subjects related with computer science is from the perspective of other for centuries taught subjects, still in its infancy. Even now- adays a teaching method aimed at developing algorithmic thinking of students is still the subject of extensive discussions and teachers are looking for different ways on how to access it to students. Next to the educational approach to this base of computer science it is also important to find a suitable support for stu- dents’ self-learning. Multimedia applications give teachers an excellent chance to demonstrate and visualize the subject matter more clearly and comprehensi- bly, as well as also enabling them to prepare study material for students which optimizes their study habits. Along with large software products developed by a team of professionals there are also various smaller programs dealing with objects appropriate to course subject matter created on a script given by the teacher with regard to students’ needs. In the paper such application prepared

to intensify self-preparation of students in subjects developing algorithmic thinking is introduced and its benefit discussed. Animations useful to be used as an introductory complement to lectures are introduced as well. At the end advantages of the professional virtual learning environment containing such study material are mentioned.

The area of software development has passed a rapid expansion and this trend continues so far. Each developer has to learn constantly and master new technol- ogy. Crucial role is played by the basis which developer gains at the beginning of his–her career. Thus an essential part of studies at faculties preparing students in the area of computer science is the development of student’s ability to think algo- rithmically. Students must be able to create various algorithms solving given prob- lems starting with easy ones and consecutively increase their algorithmic knowledge and shifts during studies till the level where they deeply understand much more complex algorithms.

Multimedia applications have substantially influenced education. They give teachers an excellent chance to demonstrate and visualize the subject matter more clearly and comprehensibly, as well as also enabling them to prepare study mate- rial for students which optimizes their study habits. Along with large software products dealing with a wide spectrum of objects developed by a team of profes- sionals there are also various smaller programs dealing with objects appropriate to course subject matter created on a script given by the teacher with regard to stu- dents’ needs. The author of the paper has prepared with her students such multi- media applications for many years.

buildings. We do not use any programming language in the subject, students write algorithms on paper in Czech meta-language. The used Czech meta-language is nothing more than the Pascal programming language basic commands. (Remark: Pascal programming language was created by Nicklaus Wirth especially for edu- cational purposes, see Wirth, 1989.)

The mentioned process of algorithm design is reflected in the course structure. Thus, when we lead our students’ first steps in the creation of algorithms we explain to them that it is like building interesting objects out of just a few basic elements. In the subject Algorithms and Data Structures it means that we start our teaching with basic algorithmic structures (basic elements from the brick- box) and typical algorithmic structures (a few parts made out of these elements) written in Czech meta-language and then we let students get into the secrets of making whole algorithms (building whole constructions) written in Czech meta- language as well.

Let us describe our approach more precisely. We proceed in the following steps. After explanation of the three simple commands (read, write and assign:=) we describe basic algorithmic structures (i.e., basic elements from the brick-box) – block of commands, incomplete and complete branching, and loop construction

Using these basic structures students are soon able to understand typical algo- rithmic structures (e.g., in the given sequence to determine the number of elements with the given property, to calculate the sum and the product of some elements, to find the minimum and the maximum value, to find the last/first occurrence of the searched value, to remove value – see the following example, to add new value, etc.). Subsequently we let the students dive into the secrets of making algorithms (i.e., building whole constructions).

We explain and students practise all algorithmic structures, at first only those which use single variables. After the thorough practising structures on problems using single variables we proceed further and explain the data structure of one- dimensional and two-dimensional array. Using these data structures all previous matter is repeated together with a careful attention to the work with array indices. During lessons students apply the acquired knowledge to a variety of tasks.

They work in groups of two or three and each group is responsible for solving one of the given tasks. After some time when students prepare their solutions on a piece of paper, each task is illustrated and presented by two students (or three, depending on the number of groups, each group responsible for the task- solution deputes one student) on the blackboard and their solutions are compared and discussed by all students. On the one hand this means that students are led to try and find more solutions to the given task, on the other hand when incorrect solutions occur among the presented solutions the teacher has an opportunity to discuss with students where the problem is.

Let us suppose that we are working with a finite numerical sequence (a1, a2, .. . , an) of n terms being already saved in an array a of the length n, n P 1. Let us create algorithms solving the following tasks.

Task: Complete the algorithm which calculates and writes out the following value of sum: If x 6 y then it is the sum of integers x, x + 1, .. ., y, and if x > y then it is the sum of integers x, x — 1, .. ., y.

The program also shows the actual values of used variables in each step of the algorithm’s process. In this way students can easily check their paper-results from tasks similar to the above introduced example 3.2, against the results of these tasks displayed in the program (see Fig. 1).

As an example let us mention animations, created in Macromedia Flash envi- ronment, visualizing on six snowmen three prime sorting techniques: Selection Sort (see Fig. 2), Insertion Sort and Bubble Sort. These small presentations were created by a student through their optional project and they can be downloaded from the same page as the ALGORITHMS program - see above mentioned link. The three prime sorting methods help us when we explain the term algorithm at the beginning of our lectures and emphasize the fact that the given task can be mostly solved by more than one algorithm. We provoke students to imagine the whole process (algorithm) of sorting things by size. We properly explain the idea of each prime algorithm and usually demonstrate it with the help of students. It is known that the main idea of Insertion Sort is usually described as the way many people sort a hand of playing cards. We also remark this illustration; however, we prefer to explain the main idea of each prime sorting algorithm as the way children rank in a line. In the lecture there are always several students willing to be ranked to illustrate the sorting processes. Students can later remind this ‘‘show of the appropriate sorting algorithm’’ using the animations sorting six snowmen. We go back to this topic later (almost at the end of the term) when discussing the for-

The whole area explained within the subject Algorithms and Data Structures is introduced in the textbook Milkova´et al. (2010), where more than 150 problem assignments, questions and exercises are presented. The accuracy of a solution can be verified with the help of the program ALGORITHMS which is enclosed, together with solutions of all the textbook’s given tasks, on the CD attached to the textbook.

Education at the University of Hradec Kra´love´is supported in a virtual learning environment (the Blackboard learning system supports future engineers and managers studying at the Faculty of Informatics and Management, the Moodle learning platform supports future teachers studying at the Faculty of Science). The virtual learning environment is an opportunity for students to combine their occupation with studies. Relevant study material is accessible whenever and wherever.

tion. Here let us review in alphabetical order the tools that we use in the ALGDS course created for the subject Algorithms and Data Structures to support it and let us describe their functions in our ALGDS course. (cf. Milkova´, 2011).

Discussion: Using this tool, students have the opportunity to discuss their ques- tions and problems concerning the appropriate subject with other students. The tool is displayed in our ALGDS course mainly as a means of communication among students. Thanks to the lectures and lessons, the Discussion tool is only seldom used by teachers.

Modules: This tool is used to assign all electronic study materials (additional text to the textbook Milkova´et al. (2010), problem statements of tasks solved in lesson, presentations, and animations) that correspond to a lecture to the appropriate module. The number of modules is the same as the number of lec- tures provided during a term. Moreover, students interested in an area explained within a subject can find here files and/or links to additional informa- tion outside the immediate framework of the subject.

The engagement of students into a subject and their interest in the subject matter belongs to crucial elements of successful teaching and learning process. Students preferentially take in and process information in different ways: by seeing and hearing, reflecting and acting, reasoning logically and intuitively, analyzing and visualizing, steadily and in fits and starts. According Felder and Silverman, 1988; there are four main two-poles-dimensions of learning styles; active/reflective, sensing/intuitive, visual/verbal, and sequential/global.

Balanced study material taking into account the above described learning dimensions and effecting systematical learning can influence engagement, interest and students’ knowledge very much. On one hand it supports the preferred learn- ing dimension pole of a student and on the other hand it enhances his/her ability to absorb subject matter also with regard to the opposite learning dimension pole. Hence, students’ ability to take in and process information in various ways is increased and learning difficulty decreased.

There are many publications devoted to learning styles. Recently we began to be interested in Felder-Silverman learning style model (cf. El-Hmoudova´, 2013). Let us briefly introduce the main characterization of, in the model given, four Felder and Silverman, 1988; learning style dimensions:

