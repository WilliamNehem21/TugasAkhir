between adjacent cameras' field of view is calculated. Based on the relations of cameras view obtained and tracked data of each single camera,a homography based target handover procedure is done for long-term multi-camera tracking.After that, we fully implemented the tracking system on the embedded smart cameras developed by our group.Finally, to combat the huge computational complexity, a novel hierarchical optimization method is proposed. Experimental results demonstrate the robustness and real-time efficiency in dynamic real-life environments and the computationalburden is significantly optimized by 98.84% which is low enough for further biometrics tasks such as recognition.

Together with the increasing population density in metropolitan cities, the demand for maintainingsecurity of citizens is increasing. In alignment with this demand, the smart Closed Circuit Television system(CCTV) surveillance[1] isbecoming pervasive. Hence, automated surveillance has become an emerging technology since the lastfew years.The task of automated surveillance for public locations, which are usually crowded and wide-area, such as public transport stations usingindependent smart cameras [2] almost impossible due to the limitation of cameras’ field of view and the heavytarget occlusion [3]. Hence, scene surveillance using a cooperative multi-camera network [4] isbecoming the preferred solution for surveillance camera users, as will not require major hardwareupgrade. Therefore, a multi-camera tracking method is introduced in this paper, which has been completely implemented on our embedded smart cameras and testedon traffic surveillancenear our campus. Nevertheless, due to the computing limitation of the processing unit in each smart camera, advanced video processing algorithms which are usually of high computational complexity, cannot be performed without optimization. Consequently, in this paper, anovel hierarchicaloptimizationparadigm with several practical techniques for commonoptimization is presented. According to our experiment results, the overall performance is remarkably boosted using our proposed optimization methods.

The rest of this paper is organized as follows. In section 2, we provide the proposedmulti-camera tracking system. Section 3 presents the proposed hierarchicaloptimization methodology. Section 4 presents the experiments and results and finally the conclusions are presented in section 5.

To cooperatively track and monitor movingtargets in large-scale area, multiple overlapping cameras are utilized to observerwide surveillance scenes fromdifferent views.Firstly, in the initial stage of our system, multi-camera calibration is done to gain the image plane correspondence relationshipbetween the adjacent cameras byhomography transformation [5] for target hand-off. After that, multi-objects tracking is performed continuously in each single smart camera which is shown in Fig. 1 (a) to obtain the surveillance information of the moving targets based on which object hand-off is carried out for multi-camera tracking shown in Fig. 1 (b).

The entire embedded system is divided into three components described in the block diagram above. Firstly, a CCD color sensor providing NTSC or PAL video is used for capturing raw video data. Then, the embedded video analysis agent is designed by employing a DaVinciTMS320DM6446 [8] dual-core device with an ARM9 and C64+ DSP. Fig. 2 displays the hardware architecture of embedded video agent designed in this paper. And Fig. 3 shows the highly integrated 3-level embedded system developed by our research group.

In multi-camera network surveillance, single-camera tracking is the fundamental module to obtain the information of the moving targets such as position, motion trajectory, shape, etc. Therefore, in our system, we utilized the tracking paradigm in [5]. Specifically, Gaussian Mixture Models (GMM) is employed to compute the background images of the surveillance scenes. Then, foreground objects (Blob) extraction is done to gain the bounding boxes and centroids of the moving targets. Finally, object tracking is performed based on Mean- shift and Kalman filter to analyze the motion history and trajectories.

Then, based on the homography, target hand-off is done by examining PE between the centroid of two target candidates. If    , where  is a parameter which can be dynamically set,then the two candidatesarecorrespondingtargets and marked the bounding box and trajectory in a unique color, shown in Fig. 4.

To achieve the real time performance of the embedded DSP system, in this paper, a hierarchical optimization method is proposed based on DM6446 are used. According to the performance evaluation done by Code Composer Studio (CCS)profiling module, main performance bottlenecks are found, which areGaussian Mixture Model(GMM) for background reconstruction and moving object(Blob) extraction, respectively.Therefore, the proposed hierarchical optimization method isprimarilyconcentrated in these two modulesusing project-level optimization, algorithm-level optimization and code-level optimization.

To maximize C/C++ compiler performance, the DSP code can be optimized comprehensively by using proper compiler setting [6]. Firstly, software pipelining is used to schedule instructions in a loop so that multiple instructions of the loop are executed in parallel. In C6000 compiler, we use “-o2” and “-o3” compiler options to arrange software pipelines for the codes automatically. Then, “-pm”, “-mt” and “-op3”compiler settings are employed in our compiler to reduce theperformance costin loop iterations. Additionally,to boost the efficiency,in the proposed system, the data which is frequently visited and processed are stored in internal DSP memory and important functions and procedures are executed in CACHE which is supreme fast memory.

Since the detailed information of moving target such as texture, shape, etc. is not significantly essential for GMM and blob extraction, therefore before these two procedures, input video signal can be down-sampled to a smaller resolution for computational complexity reduction. So in our system, we resized the input video from D1 (720 576) to CIF (360 288) using resizer module in Video Processing Subsystem (VPSS) which is a standalone peripheral device on DM6446 for resizing video without any computational cost in DSP. Then, the resized video is analysed by GMM and blob extraction to obtain the positions and bounding boxes of the moving objects. After that, the gainedpositions arere-mapped to D1 coordinate for the on-going procedures such as tracking, classification and recognition. Furthermore, for the purpose of better pipelining the algorithm to achieve higher performance, we divide the GMM function into three stages include backgroundmodel initialization, updatingand comparison, and performed separately. According to the profiling, the performance is greatly enhanced because the software pipeline is generated successfully.

Generally, the generation of software pipeline isakey stepforcode-leveloptimization.However, there are several common situations hinder producing software pipelines, i.e., loops nesting, in-loop function calling, jump instructionsetc. Therefore, we examined and divided large loops into small loops to increases instruction-level parallelism guaranteeing the effective creation of software pipeline by using the instruction “MUST_ITERATE” in oursystem. After that, as the pixel value is 8-bit length, to further improve the quality of the software pipeline, we utilized data packing techniques to pack and parallel process multiple pixels in one 32-bit pack by executing the packing and unpacking instructions such as “_memd8_const”, “_packl4”, “_hi”, “_lo”, “_subabs4”, “_cmpgtu4”, “_itoll”, etc.

By utilizingour proposed hierarchicaloptimization method, the system performance is increased significantly as described in the Table 1.Since the performance of DSP core is at a clock rate of 810 MHz (810 million clock cycles per second), the overall computational budget is reduced by 98.84% and the system performance is boosted from 2.03 frames/second to 30 frames/second reaching the maximum frame rate.

In Fig. 6, experiments results in general view are shown. As can be seen in Fig. 6 (a), raw video is captured by our 3-level embedded video analysis agent from the video input device, and then our multi- camera tracking algorithm is carried out to process the video data in real-time performance, and finally, tracking results are displayed directly intwo standalone screens as shown in the Fig. 6 (b).

In this paper, we represented the multi-camera tracking algorithm and implemented on the embedded platformTI dual-core TMS320DM6446 (ARM+DSP). In our proposed system, a traditional tracking paradigm for singlecamera tracking based on GMM, Mean-shift and Kalman filter is utilized to detect and track multiple targets. Then, when the surveillance objects enter the overlapping area between adjacent cameras, a homography based target hand-off procedure is perform for long-term multi-camera tracking. However, the computation complexity for multi-camera system is huge especially for embedded processor based system. Therefore, to conquer the challenging problems in low-cost, reliable and efficient way, we designed embedded integrated smart camera by utilizing the hardware structure of TI TMS320DM6446 based on which our proposed multi-camera tracking algorithm is implemented, and optimized reaching real-time performance by our proposedhierarchical optimization method. The overall experimental results have fully verified the effectiveness and robustness of our proposed algorithm and the stability of the embedded platform.

