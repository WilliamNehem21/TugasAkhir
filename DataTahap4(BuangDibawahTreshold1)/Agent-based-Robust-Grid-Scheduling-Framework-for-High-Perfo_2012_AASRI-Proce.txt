Grid computing is the enabling technology for high performance computing in scientific and large scale computing applications. A number of powerful parallel systems have been built with increasing number of processors and multi-core solutions in order to meet the increased computational demands. Scheduling is a fundamental issue in achieving high performance on computational Grids. A Grid scheduling system must meet the functional requirements of heterogeneous domains (e.g., user domains, application domains, and network domains). Sometimes these requirements conflict with one another. Moreover, a Grid scheduling system must also satisfy non-functional requirements, such as reliability, efficiency (in terms of time consumption), effectiveness in resource utilization, and robustness.

Many frameworks have been proposed for Grid scheduling system. Agents are able to behave autonomously, intelligently, learn from environment, and adaptability. Agent-based Grid scheduling is concerned with the design and development of software agents for the resource discovery, job scheduling, resource management, and allocation of computing resources on a computational Grid. This paper presents a new Agent based Grid scheduling framework which possesses high degree of robustness, performance, efficiency, scalability and heterogeneity.

To achieve this, we need to develop a Grid infrastructure which will be flexible, scalable, and adaptive in nature and will enable dynamic composition of loosely coupled heterogeneous resources. One way of implementing these Grid capabilities is to use multi-agent system. Agents have the ability to adapt themselves according to prevailing circumstances in a Grid environment. Agents also provide services that are robust and scalable. Because of these characteristics agents are the natural choice for achieving our goal. In our research; we propose a framework named Agent-based Robust Grid Scheduling Framework for Grid infrastructure. It will satisfy the efficiency, performance, Quality of Service (QoS) provisioning and robustness objectives.

Grid computing can be viewed as a mainstream technology for large-scale resource sharing [3]. Grid computing increases a systemâ€™s computing capability and the tendency has been to use them to solve complex and large-scale scientific problems using geographically dispersed computing resources. A large number of complex and large-scale scientific issues cannot be solved by using a traditional network or super computer; that is why research and development of Grid computing has been making progress gradually. A Grid computing system connects available computing resources, such as computers, applications, and storages devices, to networks for high performance computing and reduces system execution time [4, 5].

Grid scheduling is a process of ordering tasks on compute resources and ordering communication between them. It is also known as the allocation of computation and communication over time [6]. Grid scheduling can be divided into two phases. The first stage is the selection of proper resources for job allocation, and the second stage is the placement of jobs onto the selected resource queue for execution [7].

A multi-agent system is a network of agents that work collectively to solve problems that are beyond their individual capabilities [8]. Multi-agent systems are distributed and autonomous computing systems made up of autonomous agents that support reactivity, and are robust against failures locally as well as globally [9]. Due to the highly heterogeneous, distributed, dynamic, and complex Grid computing environments, multi- agent systems appear to be a suitable approach to solve the Grid scheduling problem.

A number of initiatives have been taken to improve the efficiency of computational Grids but this research is still in early development. [10] proposes a resource management system for scheduling jobs on heterogeneous and distributed resources (Nimrod-G). In Nimrod-G, resource agents manage the execution of jobs on resources, and a central resource broker performs the different functions like resource discovery, trading and discovery.

In [11, 12], authors have proposed an agent-based resource management system (ARMS) for Grid computing. In this proposed system; each agent represents a local Grid resource and acts as a service provider for high performance computing power. Agents cooperate and collaborate with each other using a technique of service advertisement and discovery.

effective solution for the efficient utilization of resources. The framework is also a robust one because it handles uncertain runtimes of applications intelligently. However, there are shortcomings with this framework. Firstly, it has not been integrated into any Grid toolkit and so no real-time performance tests have been undertaken. Secondly, it does not support dynamic scheduling.

In [14], a novel multi-agent reinforcement learning method named ordinal sharing learning (OSL) method is proposed for job scheduling in Grid environment. This method has been proposed to resolve the issues of load balancing in computational Grids. The approach supports the scalability issue by using an ordinal distributed learning strategy, and realizes multi-agent coordination based on an information-sharing mechanism with limited communication. Simulation results show that the OSL method can attain the goal of load balancing effectively, and its performance is even comparable to some centralized scheduling algorithm in most cases. The convergence property and adaptability of the proposed method are also explained. But inter-task synchronization, dynamic scheduling and robustness features have not been considered in the proposed method.

[15] proposed an agent-based approach to integrate services and resources. In this proposed approach, service and resource agents contain behavioral rules and can modify these rules based on their interaction with other agents and with the environment in which they operate. In [16] authors also proposed an economic models for resource allocation and to manage supplies and demands in Grid computing environments.

Most of these agent-based Grid scheduling systems are centralized. Grid scheduler agents manage only the execution of jobs on resources. In a true Grid environment, resources are geographically distributed and owned by different parties. It is not practical that a single point in the virtual system retains entire Grid information that can be used for job scheduling.

Grid consumer is the user of the grids. Each consumer needs computational power for execution of their jobs. Consumers belong to various organizations and access the Grid resources in a decentralized way. Each consumer demands computing resources based on nature of jobs. A user job is submitted to the Grid scheduler in the form of application.

This agent partitions user application into several computational tasks depending upon the nature of application, resource demands and resource availabilities. Tasks will be dependent in nature. This agent will be responsible for producing tasks of variable sizes while considering the reliability, robustness and availability of computing resources.

Resource coordinator agent is respondible to choose the most suitable resources in such a way that can satisfy the job constraints as well as to optimize the system performance. Grid resource allocation is an NP complete problem. Resource coordinator agent would play the vital role in achieving the optimal performance in the Grid computing environment. Various resource allocation strategies will be considered and implemented in this framework. Different strategies work optimally under specific jobs, workloads and resource constraints. Resource coorinator agent will analyze the various scheduling constraints, and then selects one strategy out of many strategies to attain the optimal performance under dynamic scheduling environment.

Robustness agent ensures the reliability of job execution. Robustness agent will coordinate with our developed robustness services to ensure the correctness, reliability and completeness of computational task execution. Few robustness parameters such as tasks duration, communication delays will be gathered by the robustness agents to ensure any uncertainties will not affect the task executin.

This layer comprises the core Grid management related services. We will implement our agent oriented robustness services in this layer. These services will be comprised of the agents. Agents will monitor the running of the individual tasks and status of Grid resources. Agents will predict any faults during task execution on a Grid. These services will also influence scheduling the computational tasks in Grid by directly interacting with Robustness agent.

This framework is proposed with the main aim to provide a robust Grid scheduler that can deal with uncertainties in a Grid computing environment. The uncertainties are normally caused by fluctuations in availability of resources, network bandwidth and job demands. Reducing and minimizing uncertainties can contribute to more efficient and effective job computation since jobs are able to be computed and delivered despite the constant changes of Grid environment (due to heterogeneity of resources, jobs and networks).

Agent-based paradigm has been chosen as the suitable approach since agents are autonomous that they are capable of making decisions based on their knowledge about the environment and/or other agents. This feature is crucial and appropriate for a highly fluctuated Grid environment. Furthermore, this agent-based framework is applying both hierarchical multi-layer and hierarchical architecture [17]. Hierarchical multi- layer architecture represents a master-slave relationship among the agents and has the advantages of limited computational complexity and very scalable since the agents need to perform the functionality within the scope of their work only. The hierarchical architecture is depicted in Grid Job Scheduler fig. 1 where there are three main types of agents interrelated in a hierarchical manner. The master of the agents are Task Partition Agent who receives input data from Task Control Agent while both Task Dispatcher Agent and Robustness Agent will need to present data to Task Control Agent to be passed and evaluated by the Task Partition Agent. As depicted, the scope of work of each agent is very limited and thus this contributes to a scalable Grid scheduling environment. The hierarchical architecture is deployed specifically in the Task Control Agent in

which three agents working as peers coordinating among them to provide input for Task Control Agent. The advantage of such architecture is that if any of the agents fail to deliver specific results, other agents can still continue to provide input. This is one of the essential features for a robust scheduler.

In this paper, the architecture of an agent-based scheduling framework of the Grid computing is proposed. This framework is based on a hierarchical multi-layer and hierarchical agent-based architecture and is designed to offer a robustness feature to a Grid scheduler. A robust Grid scheduler will compute and deliver jobs effectively and efficiently despite the constant changeability of Grid computational environment such as heterogeneity of jobs, resources and network conditions.

The success of this framework will depend on how well these agents can cope/work in a high level uncertain Grid environment. As such our future work includes finding the best type of agents that are suitable for each functionality such as finding resource capacities and resource failures. In addition, prototype will be developed and simulated to experiment with scheduling algorithms on a Grid environment comprised of one SGI super computer and five other clusters. Consequently, the performance of the proposed Grid scheduling framework in terms of flowtime, computational cost, average waiting time, average response time, average turnaround time and efficient Grid resource utilizations will be measured through extensive simulations using real workload traces which are available on [18], taken from leading computational centers. The purpose of the simulator would be to evaluate the efficiency, performance, scalability of proposed Grid scheduling framework from various perspectives.

