Grid computing enables sharing, selection and aggregation of computing resources for solving complex and large-scale scientific problems. Grid scheduling is playing a vital role for the efficient and effective execution of jobs on computational grids. Most of the scheduling algorithms do not consider user and system objectives at the same time. Therefore, in this paper we introduce a concept of fairness to scheduling and present a new agent based job scheduling algorithm called Agent based Prioritized Dynamic Round Robin (APDRR). APDRR is designed and developed by combining the best features of round robin and priority job scheduling algorithm using agent technology.

APDRR is fair scheduling algorithm from a user point of view while also regarding the optimization criteria that are anticipated from the system perspective. This paper also presents the comparative performance analysis of our proposed APDRR along with other well known job scheduling algorithms, considering the performance metrics comprised of average waiting time, average turnaround time, average response time, total completion time, average bounded slowdown time and maximum job stretch time. Performance evaluation of job scheduling algorithms has been carried out on a computational grid using real workload traces. Experimental evaluation confirmed that the proposed APDRR scheduling algorithm posses a high degree of optimality in performance, efficiency and scalability. This paper also includes a statistical analysis of real workload traces to present the nature and behavior of jobs.

Grid scheduling presents several interesting challenges that make the implementation of practical systems a very difficult problem. Job scheduling policies not only can manage the various computational resources needed in computing, but also can make the decisions regarding the dynamic, efficient and effective execution of jobs. Optimization of the grid performance is dependent on the scheduling policies [1, 3, 4, 5, 11]. In order to obtain a grid environment, which works with high computational power, the effective and efficient resource management is a must. Due to the high heterogeneity, scalability and dynamicity of a grid, some challenges then arise in the development of algorithms for scheduling to be used along with grid computing [6].

In this paper, job scheduling algorithms have been studied extensively and a new agent based prioritized dynamic round robin job scheduling algorithm (APDRR) has been proposed. The proposed scheduling algorithm has shown its optimal performance compared to the existing ones on an experimental computational grid using real workload traces. Apart from the development of these algorithms, software has been developed to facilitate the study with a greater ease and more user friendly manner.

This paper presents the comparative performance analysis of our proposed job scheduling algorithm with other well known scheduling approaches; e.g.; First Come First Served (FCFS), Round Robin (RR), Proportional Local Round Robin (PLRR), Shortest Process Next (SPN), Priority (P) and Longest Job First (LJF). We evaluated the efficiency, performance and scalability of each scheduling algorithm on a computational grid using six key performance parameters, i.e., average waiting time, average turnaround time, average response time, average bounded slowdown times, total completion time and maximum job stretch times.

The structure of the paper will now be described. Section 2 is a literature review of grid scheduling methodologies. Section 3 presents the proposed grid scheduling algorithm and section 4 is about the statistical analysis of real workload traces. Section 5 shows the homogenous implementation of scheduling algorithms. In section 6, the scheduling simulator’s design and development are discussed. Section 7 shows the experimental setup and section 8 describes the performance analysis of the grid scheduling algorithms. Section 9 concludes the paper.

Grid job scheduling policies can generally be divided into space-sharing and time-sharing approaches. In time-sharing policies, processors are temporally shared by jobs. In space-sharing policies, conversely, processors are exclusively allocated to a single job until its completion. The well known space-sharing policies are FCFS, Backfilling, Job Rotate Scheduling Policy (JR), Multilevel Opportunistic Feedback (MOF), Shortest Process Next (SPN), Shortest Remaining Time First (SRTF), Longest Job First (LJF) and Priority (P) approaches. The famous time-sharing scheduling policies on the other hand are Round Robin (RR) and Proportional Local Round Robin Scheduling (PLRR) [7, 8, 9].

The FCFS is the simplest and non preemptive job scheduling algorithm. For this algorithm the ready queue is maintained as a FIFO queue. Each new job/process is added to the tail of the ready queue and then the algorithm dispatches processes from the head of the ready queue for execution by the CPU. A process

The SPN algorithm takes the processes using the shortest CPU time first. For this algorithm the ready queue is maintained in order of CPU burst length with the shortest CPU demand at the head of the queue [11]. While the LJF algorithm takes the processes that use the longest CPU time first. For this algorithm the ready queue is maintained in order of CPU demands (runtime) in descending order [11, 12].

In the priority (P) scheduling algorithm; the processes are prioritized in accordance with their operational significance. For this algorithm, the ready queue is maintained in the order of the system-defined priorities. Every process is assigned a priority and a new process submitted to the system is linked to the process in the ready queue having the same or a higher priority. The algorithm dispatches processes from the head of the ready queue for execution by the CPU. When a process has completed its task, it terminates and is deleted from the system. The next process afterward is dispatched from the head of the ready queue. If the priority criterion for execution is the order of arrival of the jobs into the system, then the priority scheduling behaves like FCFS scheduling. Alternatively, if the priority criterion is such that the jobs with shorter CPU demands are assigned higher priorities, then this makes the priority scheduling behave like SPN scheduling [11].

Several scheduling policies have been implemented in computational grids for high performance computing. The first come first serve (FCFS) with backfilling [14, 15] is the most commonly used; as on average, a good utilization of the system and good response times of the jobs are achieved. However, with certain job characteristics, other scheduling policies might be superior to FCFS. For example, for mostly long running jobs, the longest job first (LJF) is beneficial, while the shortest process next (SPN) is used with mostly short jobs [16].

In [7], the author has performed an experimental performance analysis of three space-sharing policies (FCFS, JR and MOF) and two time-sharing policies (Global Round Robin and Proportional Local Round Robin Scheduling) that have been developed for grid computing. It is concluded that time-sharing scheduling policies perform better than space-sharing scheduling policies. The RR scheduling policy is extensively used for job scheduling in grid computing [7, 17]. In [18], the authors have performed an analysis of the processor scheduling algorithms using a simulation of a grid computing environment. Three space-sharing scheduling algorithms (FCFS, SPN and P) have been considered for simulation.

In [19], an adaptive dynamic load balancing model using agent-based distributed simulations has been proposed. Experimentation has been conducted to evaluate the efficiency of proposed algorithms under dynamic agent scheduling. Static random agent distribution has been employed in this simulation. The proposed algorithm has resulted in shorted execution time for synthetic workload traces. But this research work has not been evaluated using real workload traces under real time environment. Agents can play an important role for efficient and effective job scheduling on an experimental grid using real workload traces.

Grid scheduling is an NP complete problem, i.e., no such deterministic algorithm exists which can generate an optimum solution in polynomial time. To predict the demand of grid jobs in a dynamic scheduling environment however is not simple. The dynamic scheduling means jobs that are arriving in the system with different processing demands and have different priorities. The priorities are assigned to the jobs on the basis of user classifications.

Agent based Prioritized Dynamic Round Robin Scheduling (APDRR) uses task agent for job distribution in such a way to achieve the optimum solution. Task agent receives the jobs/processes from the users, and distributes them among different prioritize global queues based on user levels. Number of global queues can be customized in the grid system according to defined priority classifications at global level. We proposed a dynamic time quantum strategy in [23]. We have integrated the same dynamic time quantum strategy in designing and development of APDRR. Block diagram of APDRR is shown in Figure 1.

APDRR uses agent based job distribution strategy at global level for optimal job distribution based on user levels and job priorities. APDRR uses its Agent based prioritized job scheduling strategy at local level for efficient and effective execution of jobs. Pi denotes a process i; where i ranges from ‘1’ to ‘n’. Algorithms for each proposed strategy at global and local levels are as follows:

In [12, 24], a comprehensive statistical analysis has been carried out for a variety of workload traces on clusters and grids. We reproduced the graphs of [24, 25] to study the behaviour of the dynamic nature of workload ‘AuverGrid’ using our developed SyedWSim [26]. The total numbers of jobs in ‘AuverGrid’ are ‘404176’. We looked at the number of jobs arriving in each 1024 second period. The number of jobs arriving in a particular period is its ‘job count’. The left hand graph of Figure 2 shows the distribution of job counts for the whole trace. Next we performed an autocorrelation of the job counts at different lags. The middle graph of Figure 2 shows the autocorrelation plot at different lags. Then we performed a Fourier analysis by applying the FFT on the values of the autocorrelation output. This is shown in the right hand graph of Figure 2.

We used a master/slave architecture for implementation of job scheduling algorithms, as shown in Figure 3. One processor is dedicated as the master processor among the cluster nodes. The master processor is responsible for distribution of the workload among the slave processors using round robin allocation strategy (i.e. 1, 2, 3…. n, 1) for parallel computation.

The experiments made use of a HPC facility in the High Performance Computing Centre at Universiti Teknologi PETRONAS. We ran our experiment using a cluster of 128 processors. The ‘hpc.local’ was used as the default execution site for job submission. A detailed experimental setup is shown in Table 1.

Experiments have been performed on an experimental computational grid using ‘AuverGrid’. Experimentation includes the efficiency, performance and scalability test of scheduling algorithms under an increased real workload and increased processors availability. Two data sets have been formed, first by using ‘3%’, and second by using ‘5%’ of the AuverGrid workload (i.e. 12125, and 20208 processes), respectively. The ‘runtime’ attribute is given for each process in ‘AuverGrid’. The ‘runtime’ is taken as CPU time in this experiment. A series of experiments have carried on experimental grid by varying the number of CPUs successively from ‘16’ to ‘128’. This experimentation had used ‘50’ units as the fixed time quantum.

The Turnaround time of the job is defined as the time difference between the completion time and release time [11], [27]. Figure 5 shows the average turnaround times computed for each scheduling algorithm using ‘3%’ and ‘5%’ workload of AuverGrid. The values for average turnaround times computed by APDRR are found shorter than those for the other grid scheduling algorithms. This figure also shows that SPN has shown better performance w. r. t. the average turnaround times. Furthermore, it is found that RR, P, PLRR, FCFS and LJF scheduling algorithms have shown the longer average turnaround time measures.

w. r. t. the average slowdown times. It has also shown that PLRR, P, FCFS and LJF have shown the worst performance while resulting in longer average slowdown times. LJF has shown the longest average slowdown times. As a result, RR and APDRR have shown the best average slowdown times compared to other scheduling algorithms and presented improvement w. r. t. average slowdown times under the increasing number of CPUs successively from ‘16’ to ‘128’.

Machine Completion time is defined as the time for which a machine ‘m’ will finalize the processing of the previously assigned tasks as well as of those already planned tasks for the machine [6]. Figure 8 shows the total completion times computed for each scheduling algorithm using ‘3%’ workload of AuverGrid. Figure 8 shows that APDRR has produced the shortest total completion times compared to the other scheduling algorithms. Figure 8 also presents that SPN and RR have shown slightly higher total completion times than those for APDRR. This figure also depicts that P, FCFS and LJF have shown the worst performance, resulting in longer completion times.

Stretch time is defined as the flow of a job over the processing time. In order to avoid the starvation situation from the grid system, it is also required to minimize the stretch of each job [28], [29]. This motivates us to compute another performance parameter, i.e. Maximum Stretch time of job.

The maximum job stretch times for each scheduling algorithm using ‘3%’ and ‘5%’ workload of LCCG1 are shown in Figure 9. It can be depicted that APDRR have shown the shorter maximum job stretch times compared to the other scheduling algorithms. In addition, RR and SPN have shown the average measures of maximum job stretch times. Figure 9 also shows that P, PLRR, FCFS and LJF have produced the longest maximum job stretch times. Finally, APDRR, SPN and RR have shown the better maximum job stretch times.

In this paper we present agent based prioritized dynamic round robin job scheduling algorithm, namely APDRR. We compared the efficiency, performance and scalability of proposed job scheduling algorithm with other grid scheduling algorithms on a computational grid using real workload traces. In this paper we also performed a statistical analysis of the AuverGrid workload trace to study the dynamic nature of grid jobs.

Experimental results show that APDRR has shown the optimal performance from the system perspective while resulting in the least average waiting times, average turnaround times, average slowdown time, total completion times and maximum job stretch times. Moreover, APDRR has also shown the optimal performance from the user perspective while producing the least average response time measures under dynamic grid scheduling environment. It has been demonstrated and concluded that APDRR is an optimal job scheduling policy from system as well as from user perspective.

