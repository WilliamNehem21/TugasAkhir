The commercialization of concurrent software, e.g. operating systems, has ensued in their design gaining more importance. System software such as operating systems is constantly extended for improvements as well as to support new features and hardware. During the design of concurrent system software, certain decisions such as reusability and adaptability are essential [2].

The necessity in the principle of separation of concerns deals with one issue at a time, originally addressed by [3, 4]. The principle of separation of concerns is the major of concurrent software development. Separation of concerns leads many benefits. Although reusability and adaptability recognized, nowadays there is none commonly acknowledged approach tips programmers and developers how preeminent achieve reusability and adaptability. Developers and programmers have to deliberate how separation of concerns can address and how a quantity of aspects in the system can take [5] not only in the design, but also in an implementation of the system software. The better separation of concerns is, the better reusability and adaptability of both functional components and aspects in the system is.

Concurrent system software consists of multiple concerns spreading across many components of the system. Systems are disreputable of one concern spreading across many components. We mean this situation is not only depriving reusability, but also gradual adaptability. System asset is defined as one concern spreading across multiple components in the system. Example system assets include system monitoring, error handling, synchronization, and scheduling.

Using a fork for plotting plants is a misplaced as using a spoon to dig out an excavation for a dinosaur bone. Concurrent software development turns out to be more and more complex. High quality concurrent software development is become more expensive. Concurrent software is never completed finish. In the future, new requirements and changing hardware require to be modified and improved the software. For these reasons, it is practical to look for adequate methods that allow complexity to be mastered, or make invasive modifications by better supporting reusability and adaptability.

Composing of aspects using the moderator presents components of aspect factory. Functional components need to gather required aspectual components. Then functional components decide about the weaving policies. The framework offers an open architecture that is very suitable for adaptability and reusability of both functional components and aspect components knowing of system assets. The architecture is conceptually very simple as it divides aspect and functional components, and the control over the weaving aspects. The aspects are centralised in the aspect factory component.

Design patterns played roles in the concurrent aspect framework. We use abstract a factory pattern and a bridge pattern to create aspect components. A factory pattern uses to isolate between an asset abstraction and the asset objects. The obligation and the process of creating asset objects have been responded by a factory pattern. The asset object appears only once in a functional component instantiated. When an asset object has been modified, the framework promotes consistency. A bridge pattern helps to prevent a permanent binding between an asset abstraction and an asset implementation. Using a bridge pattern, asset abstractions and asset implementations can freely association and extend. Changing in the implementation of an asset object or an asset abstraction does not result any effects on functional components. A proxy pattern uses to control access asset components and allow organization responsibilities when an asset component is retrieved.

The concurrent aspect framework does not only support adaptability, but also reusability. The functional components and asset components are independently thought and designed. The framework can achieve both a vertical and horizontal reusability of both functional components and asset components. The moderator uses design patterns that weave functional components and system assets together. Adaptability can achieve by using design pattern [2]. The pros of using the moderator are when a new system asset added to the system. There is no need to make any modification of the moderator. Reusability can achieve in two ways: - a vertical adaptability or a horizontal reusability.

First, a vertical reusability can achieved. Asset components on the higher layer can use abstractions of asset components on the lower layers to implement. To develop rapid concurrent software, this promotes not only reusability, but also cost and time reduction. Asset object in the upper layer can specify and reuse asset object in the lower layer that provide a generally specified asset. Channing of specification of asset object in the lower layer will have affected asset objects in the upper layer. This would make asset objects in the concurrent system consistent by separately relatively designed. Second, a horizontal reusability can achieved. To develop various asset objects in different domain in the same layer, asset interface of that layer can

implement as many as asset objects to meet specified requirements. For example, a system asset of logging in the concurrent software is defined in the lower layer to record activity of the system every 2 seconds. This logging asset in the concurrent system can reuse and modify at the upper layer. The asset interface in the lower layer provides the abstraction of the lower logging asset. The concurrent aspect framework seems to promise a better degree of reusability in the design of concurrent software with naturally reusable.

This paper presents our approach for improving the concurrent software system using the aspect-oriented framework while maintaining the advantages of better reusability and adaptability. We propose an alternative technique for designing concurrent software system that present a higher level abstraction to the designer and the programmer. Instead of requiring the designer and the programmer to deal with the complex components of concurrent software system, we allow designers and programmers to modify and understand components simply. Concurrent software system, developed using this framework, is referred to as reusability and adaptability models.

We believe that aspect-oriented software development can assist developers and programmers to design the adaptable and reusable concurrent software. Aspect-oriented approach does not limit to any language either. A general feeling, that concurrent object-oriented design and development naturally helps reusability and adaptability, is a misconception. Concurrent object-oriented design does not naturally enforce reusability and adaptability. Relatively, developers of concurrent software have to carefully specify and design for reusability and adaptability supporting. The high level abstraction of relatively separated concerns better allows for reusability and adaptability. The framework promises on decomposition of concurrent object-oriented system. The framework can achieve and improved a better separation of concerns in the development of concurrent software system.

We achieve extraction both functional components and spreading concerns through a single component, called an asset component. A moderator component can coordinate the interaction of functional components and aspect components via joinpoints. System assets can reuse and adapt without interfering any functional components. Functional components can reuse and adapt without interfering any system assets as well. The concurrent aspect framework not only promises reusability and adaptability, but also lets developers find any proper language for the system. The framework can address various asset and functional components. This technique can reduce time and cost to develop concurrent software. A weakness of this approach is an increasing number of classes.

