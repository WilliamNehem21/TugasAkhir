The Korora¯ Libvirt Agent uses the Network Block Device (NBD) method to migrate non-shared storage. This enables Koror¯a to operate under a heavy workload that the agent may be handling. In other words, Korora¯ can send a disk over a stream to a local file or a remote host. This method, known as NBD storage migration, is the approach adopted by the Korora¯ Libvirt Agent. Here is how it works.

The following sections provide more details on the findings related to the research objectives for this study. The primary outcome was the identification of the value of using evaluation theory and its sub- components to derive the Korora¯ integrity element of the cloud migra- tion framework. This section summarised the findings related to the essential system attributes and the most relevant integrity characteris- tics of a secure cloud migration framework. It also discusses how the Korora¯ framework protects against a range of migration attacks, fol- lowed by an analysis of three different attack scenarios.

During the migration of a VM from the source hypervisor to the destination hypervisor, the vTPM instance must also migrate to the destination hypervisor (see Fig. 10). It is assumed that an attacker can compromise the state of the software on the source and destination hypervisors before or after the live VM and vTPM instance migration, but not during the migration process.

The large number of new threats added daily to cyber ecosystems has made threat modelling an essential information security requirement rather than just a theoretically exciting concept. Threat modelling is a structured process used to identify potential security vulnerabilities and threats, assess the severity of each potential impact, and prioritise methods to protect IT infrastructure and mitigate attacks. Although the proposed framework has been implemented and tested using three different attack scenarios, its feasibility has been questioned. To address this, qualitative data obtained from threat modelling methods aligned with the security development lifecycle were used to measure its effectiveness.

Several common threat modelling methodologies are available, including the Operationally Critical Threat, Asset, and Vulnerability Evaluation Methodology (OCTAVE) (Practice Focused), Trike Threat Modelling (Acceptable Risk Focused), P.A.S.T.A. Threat Modelling (Attacker Focused), STRIDE Threat Modelling (Developer Focused), and VAST Threat Modelling (Enterprise Focused). The challenge, however, is to choose a threat modelling methodology purposefully based on the desired outcomes, rather than stelling for what everyone else is doing. To identify potential threats to a development framework, the Microsoft threat modelling methodology, commonly referred to as STRIDE threat modelling, was chosen. STRIDE is an acronym that stands for Spoofing, Tampering, Repudiation, Information Message Disclosure, Denial of Service, and Elevation of Privilege, and each category of risk aims to address different aspects of security. Developing a use case, while involves making different assumptions about the framework, helps identify issues with the development framework from an at- tacker’s perspective. This approach also allows researchers to document

The following paragraphs present a conceptual threat model based on the STRIDE threat modelling tool for migration attack scenarios, as detailed in Section. To create a data flow diagram of the scenarios, we use the set data flow, data flow, external interactor, process, and trust boundary. The proposed model is tested to effectively mitigate threats and scenarios, as shown in Fig. 11.

The main objective of analysing and validating the proposed framework is to determine whether it can effectively mitigate identity theft by proposing solutions for all the threats identified using the STRIDE threat modelling tool. To gain approval for the threat report, it is essential to ensure that the proposed model can address all the potential attacks listed in Fig. 12. Therefore, based on the threat list in Fig. 12, a list of possible attacks, referred to as abuse cases, has been identified and discussed in the next section (see Section 6.3). To justify the effective- ness of the proposed framework in mitigating these threats, possible solutions and mitigation strategies have been identified and explained in Table 2.

one-to-many attack, such as attacking a guest VM and possibly con- trolling all the VM’s or attacking the host VM and controlling the guest VM. There are many scenarios of live VM attacks. The following sections describe three of these, illustrating the Koror¯a framework’s role in creating a secure live migration environment.

system. The attacker knows that it needs to remove this data from each VM because each virtual guest writes to its local storage device and then propagates the data out to each redundant virtual storage device. To delete all the critical human resource data traces, the attacker needs to eliminate the shared storage device and the localised virtual storage devices in the guests. In a typical single-box scenario, the attacker would have to gain access to each box individually, to share the local data partition, which would mean mounting a tedious 1:1 box attack. Since

least resistance. As the attacker already has root access to the Linux host, it can easily schedule a ‘cron job’ – a time-based job scheduler in a Unix- like computer OS – to run at 3:30 a.m. for the next two days, as follows:

before it can run. After initialisation, the seven agents of Koror¯a are started one by one, from the Libvirt Agent to the last agent, called Data Organisation Agent. The Koror¯a agents register their initialisation function through the Linux security module interface, providing a gen- eral kernel framework to support the security modules that are called up during the initialisation of Korora¯. The initialisation function loads are the access matrix. The access matrix is stored as a binary file in the VMM, while backup data is stored in the privileged VM as well, in the memory address space of the Xen hypervisor.

This scenario is using the Kali Linux system and three steps such as enumeration, gaining access, privilege escalation to attack the VM host. The guest VM running on another computer with the same hardware features in the isolation lab; therefore, there are no legality issues. After gathering information about the target VM machine and the entities they belong to (called footprinting) and identifying live hosts, ports, services and discovering OS and architecture of the target VM machine (called scanning the system). It is then time to get a clear picture of the target machine, identify vulnerable user accounts, establish null sessions and connections, or shared resources using an active connection to systems. Therefore, by running the below Nmap command, the first step of attack started and enabled OS detection, version detection and traceroute with the -A argument. The -p- argument pushes the Nmap to scan all TCP ports, and -V uses for one level of verbosity. The -oX argument is used to save results in an XML file called nmap. xml.

This is a strong foothold, and an attacker has access as an unprivi- leged user to the system; however, the attacker is still keen to be a privileged user and get root access. The next step is extracting user- names, machine names, and network resources from the system (called enumeration) to escalate privileges. Here, the attacker used automated Linux privilege tools called LinEnum to run in the victim virtual machine by using the command line below.

Event channels can be established in the Korora¯ framework, and event notifications are sent if one guest VM has some access to attribute to another guest VM. In the CW model, both subject and object are ab- stract words, while in the cloud platform system, the subject may be hypervisor, Domain0 or DomainU, and the object may be hypervisor, DomainU or a specific file memory snip, data unit or so on. Therefore, when a live VM migration is hypervisor-related, the migration is at the highest level of confidentiality, integrity and availability.

the kernel space while the kernel is running. The shared memory communication is started when the Koror¯a framework initialisation is finished. If VM2 and VM3 do not satisfy the migration integrity pro- cedures, the shared memory cannot be used, and the dynamic kernel fails and cannot be inserted in VM2 and VM3.

There are various performance parameters in a cloud migration process, including a) scalability, b) powerful computing capabilities, c) flexibility, d) storage capacity, and e) quality assurance. Regardless of the exact purpose of data migration, the goal is generally to enhance performance and competitiveness. However, less secure but successful migrations can result in inaccurate data that contains redundancies and unknowns.

kernel must be reinserted in VM2. After starting Korora¯, VM2 loses its permission to access the shared memory, resulting in dynamic kernel insertion failure. Similar results can be observed in VM3 with and without Korora¯. This is consistent with the Koror¯a rules because VM2 has lower integrity and confidentiality levels than VM1.

The proposed research framework, Korora¯, is in a way the opposite of existing security approaches, such as the method used by Mashtizadeh and Koundinya [16] for migrating the contents of a persistent data store from a source object to a destination object and that used by Zheng, Jie; Ng, Tze Sing Eugene; & Sripanidkulchai, Kunwadee [36] for live data migration. It is a performance boost layer for most, if not all, live VM migration schemes. Further, this framework can be used to improve the performance of other VM tasks, such as VM replication, as these tasks encounter the same IO interference problem. The empirical evaluation of the proposed system showed that Koror¯a improves live VM IO security when compared with the Mashtizadeh et al. [16] approach. In other words, Korora¯ could live migrate a VM at a higher speed without sacrificing the live VM IO performance significantly.

This article reports on designing and developing a system architec- ture for a secure live VM migration as a response to this problem. The main contribution is proposing a framework called Korora¯, based on seven agents running on the Xen privileged dom0 and communicating with the hypervisor. The chosen scenario was a public cloud environ- ment, which grants tenants the most responsibility and controls over their systems but also increases the risk of threats to their information. After the critical analysis presented in this study, the Korora¯ framework was shown to possess an efficient form of control-flow integrity, implementing a fine-grained security guarantee without negatively affecting the performance of the live migration system.

Moreover, this research primarily assessed the feasibility and reli- ability of the Korora¯ system through theoretical evaluations and testing conducted within a virtual environment, but the actual development and testing of Korora¯ in a commercial cloud environment have not been undertaken thus far. This indicates that implementing and testing the proposed framework in a commercial cloud environment would involve multiple steps, including quality assurance, deployment, and integra- tion, as well as optimisation process. These steps would need to be carefully planned and executed to address resource constraints effectively.

other hypervisor platforms (e.g., VMware ESXi or Hyper-V) and then comparing the results with the results obtained for Korora¯ on Xen to demonstrate the robustness and feasibility of the framework. However, while VM migration is already established, live VM migration in cloud systems is still immature. Therefore, future work should aim to increase the security of live VM migration in the cloud environment. Another possible research direction is developing reliable and efficient live VM

functionalities provide interesting topics for future research related to Korora¯, especially to prevent hypervisor rootkit injection. Additionally, it would be interesting to examine different elements related to VM live migration. Currently, the implementation of Korora¯ focuses only on memory VM migration integrity and does not consider other elements such as networking or storage migration. Therefore, future research could expand the scope of Koror¯a to cover these additional elements and provide a comprehensive solution for secure live migration.

University, College Station, Texas, and the PhD degree in in- formation systems from the University of Auckland, New Zea- land. He is currently a professor in the department of computer science and software engineering at Auckland University of Technology (AUT), New Zealand. From 2015 and until 2020, Professor Gutierrez was the deputy head of the School of En- gineering, Computer and Mathematical Sciences also at AUT. His current research is on Internet of Things security, networking and information security, viable business models for ICT-enabled enterprises, next-generation networks, and

Roopak Sinha (PhD, BE(Hons), MCE, SM-IEEE, SFHEA) is Director of the Software Engineering Research Centre (SERC) at Auckland University of Technology. His primary research interest is Systematic, Standards-First Design of Next- Generation Cyber-Physical Systems and Software applied to domains like Internet-of-Things (IoT), Edge Computing, Cyber- Physical Systems, Home and Industrial Automation, and Intelligent Transportation Systems. He is an active member of several international ISO/IEEE standardisation committees. Roopak also works with New Zealand companies to adopt in- dustry standards into their software and to systematically reduce standards-compliance costs.

