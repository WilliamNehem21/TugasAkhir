As the majority of cloud services deploy a multi-tier architecture, it poses a real challenge to resource provisioning. Because of the cross-tier dependencies of multi-tier cloud services, the traditional tailor-made resource provisioning methods for single-tier applications can’t be adopted or extended directly. Resource provisioning in the cloud is usually driven by performance predictions, so it’s important to characterize workload fluctuations accurately in order to understand how to allocate resources. And user preference also contributes to workload variants. Therefore, we propose a dynamic resource provisioning strategy for multi-tier cloud services that employs (i) a user preference and service time mix-aware workload prediction method to be used as a foundation of resource provisioning, and (ii) a dynamic resource provisioning strategy based on the queuing theory to determine how many resources to be provisioned to each tier. Experimental results demonstrate that our workload prediction method is accurate, and our provisioning strategy is able to improve the accuracy of resource provisioning, reduce the allocated resources and SLAs violations.

Workload prediction act as a basis for resource provisioning. In order to predict workload fluctuations accurately, we need to characterize workload in a fine-grained manner, especially in the multi-tier cloud services that different tiers have different workload features. In this paper, we divide requests into different sets according to user preference and service time, and then predict each set’s workload variants.

We use k-means clustering algorithm to cluster each class into different sets. The clustering metric is service time. Though other clustering algorithms could also be used, k-means has the strength that it’s easy to understand and widely studied. And it can converge to an optimum quickly. The traditional k-means clustering algorithm requires k, the number of sets, as an input. Whereas k is not priori known in this paper, the algorithm needs to be modified a little. The detailed steps of the clustering are as follows.

Step 2- Calculate set means: The mean of a set is the average service demand of requests falling in the same set. Let T={t1, …, tm} denote the service time set, and F={f1,… , fm} denote the accordingly frequency set. The mean of a set can be calculated by the following formula.

The prediction result is used as a basis for resource provisioning. The multi-tier service model is responsible for calculating the required resources for each tier, and the resource allocator is responsible for making provision for each tier. Figure 1 illustrates the provision architecture of our system.

Dynamic resource provisioning methods need to provision appropriate resources reacting to workload variants in order to maintain performance, so as to avoid SLAs violations. As each tier of multi-tier cloud services has different resource demands, our strategy takes each tier as an independent entity to characterize. We use the workload prediction method proposed in Section 2 to predict each tier’s workload fluctuations, and then compute each tier’s required resource.

We model a multi-tier cloud service as a queuing network, and specify SLA as 95th percentile response time guarantee. Compared to average response time, 95th percentile response time has the benefits of easy to reason about and to capture the user’s perception of service performance [11]. The detailed resource provisioning steps are as follows.

Step 1- Building the queuing network model: Assuming a multi-tier cloud service comprises M tiers, we model the application as a queue network comprises of M G/G/1 queues. One G/G/1 queue represents one tier. We use the G/G/1 queue because it can capture arbitrary request arrival distribution and service time distribution. As a result, it can capture different tiers’ behaviors. In the G/G/1 queue, the service time is assumed to meet a known, fixed distribution. Requests are serviced in a FCFS order.

values into Equation 1,  is obtained.  represents the maximum request rate that a benchmark capacity server can handle meeting the 95th percentile response time constraint. Then we can calculate the ratio m of the required resource to the benchmark capacity.

We build a small cloud using 4 physical machines. One of them is specified to run the resource provisional strategy, and the other three are used for running different components of TPC-W. The configuration of all the machines is 4 Intel Xeon(TM) CPU 3.60GHz processors, 2GB RAM, 70GB disk, and Linux kernel 2.6.26.

We compare our strategy with the service time mix-aware strategy [10]. Both strategies are provided with the same workload comprises of 1000 sessions which are formed by 3 different interactions of TPC-W, which are “Product Detail”, “Search Request”, and “Shopping Cart”. “Product Detail” and “Search Request” belong to browsing interactions which will pose pressure on the CPU, while “Shopping Cart” belongs to ordering interaction which will consume more I/O resources. The measured service times of the three requests are 2.0ms, 4.4ms and 4.5ms, respectively.

In the first 40 minutes, the percentage of “Product Detail” will decrease while the percentage of “Search Request” will increase every ten minutes. In the next 40 minutes, “Search Request” will be replaced by “Shopping cart”. In the last 40 minutes, “Shopping cart” will be replaced by “Search Request” in adverse. Figure 2(a) shows the request mix sent to the TPC-W. Figure 2(b) shows the average service time. Figure 2(c) shows the ratio of the allocated resource to the benchmark capacity, and from which, we can see that our resource provision strategy can allocate resource more precisely and reduce the total allocated resource capacity. Figure 2(d) shows the 95th percentile response time of the service, and indicates our strategy can meet 95% of the SLA, while the service time mix-aware strategy violates most of the SLAs at t=70 minutes.

Compare to [10], in the aspect of workload prediction, we consider the impact of user preference to workload variants additionally. By classifying and clustering requests according to user preference and service time respectively, we can divide requests into sets, and then use time series method to predict each set’s workload, which makes prediction more accurate. In the aspect of resource provisioning, based on the workload prediction method, we can predict requirements of different resources precisely, and allocate resource with a fine-grained and targeted manner. What’s more, the total allocated resource capacity and SLA violations are reduced.

We mainly study the dynamic resource provisioning strategy of multi-tier cloud services in the virtual data center. We analyze the workload prediction strategy, and propose a novel prediction method based on user preference and service time mix. By classifying and clustering requests into fine-grained sets, the precision of prediction providing a basis for resource provisioning can be improved. Then we propose our resource provisioning methods. We model a multi-tier cloud service as a queuing network, and compute each tier’s required resources. Compared to the service time mix-aware method, the experimental result shows our

[8]P. Lama, and Xiaobo Zhou. Efficient server provisioning with control for end-to-end response time guarantee on multitier clusters. IEEE Transactions on Parallel and Distributed Systems, 2012; 23: 78-86 [9]W. Lloyd, S. Pallickara, O. David, et al. Performance implications of multi-tier application deployments on Infrastructure-as-a-Service clouds: Towards performance modelling. Future Generation Computer Systems,

