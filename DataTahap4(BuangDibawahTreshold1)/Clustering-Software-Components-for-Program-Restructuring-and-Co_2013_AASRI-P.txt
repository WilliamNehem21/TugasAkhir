Component based software development has gained a lot of practical importance in the field of software engineering from several researchers and also from industry perspective. Finding components for efficient software reuse is one of the important problems aimed by researchers. Clustering reduces the search space of components by grouping similar entities together thus ensuring reduced time complexity as it reduces the search time for component retrieval. In this research, we instigate a new a generalized approach for clustering a given set of documents or text files or components by defining a new similarity function called hybrid XOR function for the purpose of finding degree of similarity between two document sets or software components. We construct a matrix called similarity matrix of the order n-1 by n for a given set of n documents or components or patterns by applying hybrid XOR function. We define and design the algorithm for component or document clustering which has the input as similarity matrix and output being set of clusters formed dynamically as compared to other clustering algorithms that predefine the count of clusters. The output is a set of highly cohesive pattern groups or documents. The approach can be justified as it carries out very simple computational logic and efficient in terms of processing with reduced search space and can be also be used in general for document clustering or software component clustering.

need of decision making such as classification, prediction , component search and retrieval and is thus widely used in many practical domains such as text classification , bioinformatics, medicine , image processing. We can define Clustering as the process of grouping similar set of patterns together [11]. The input to clustering algorithm may be any set of entities or patterns or text files or software components. The output of clustering algorithm will be a partition of cohesive groups. The abstract representation of clustering process is shown in figure 1 below.

The representations or descriptions of clusters so formed shall be used in decision making such as which software component or pattern need to be selected. One important feature of clustering is that all the patterns within a cluster share common or same properties in some sense and patterns in different clusters are dissimilar in corresponding sense. In view of software engineering, all the components within the same cluster have high cohesion and low coupling.

Software component clusters can be treated as highly cohesive groups with low coupling which is the desired feature. One disadvantage of existing data clustering methods is that they do not adequately address the problem of processing large datasets with a limited amount of resources. Using these limitations as our motivation, so if we can try to reduce the dataset for training process it can help in reducing the cost of training which in turn improves efficiency of clustering. If done so, clustering takes less amount of space and hence forms a compact storage of patterns. Clustering is not any one specific algorithm that we can stick firm to, but it must be viewed as the general task to be solved.

Clustering algorithms may unsupervised or supervised [11]. In unsupervised clustering the partitions are viewed as the unlabelled patterns or components. Supervised clustering algorithms label the patterns which can be used to classify the components for decision making. Hence the partitions obtained by clustering process may be labeled or unlabeled.

A new method called Maximum Capturing is proposed for document clustering [3].Maximum Capturing includes two procedures: 1. constructing document clusters and 2. Assigning cluster topics. The search complexity can be reduced by using the algorithm [10] where ever necessary as part of component retrieval.

The problem of finding frequent itemsets gets birth from [8] which uses frequent itemsets to find association rules of items in large transactional databases. In [1] clustering a given set of text documents from neighbour set is proposed. In [2] the authors propose a method for discovering maximum length frequent item sets. In [6], the classification of text files or documents is done by considering Gaussian membership function and making use of it to obtain clusters by finding word patterns. Each cluster is identified by its word pattern calculated using fuzzy based Gaussian membership function once clusters are formed.

then we form a Boolean matrix with rows indicating documents and columns indicating unique frequent item sets from each document. This is followed by the computation of a binary feature vector for each document pair, represented as a 2D array or 2D matrix by redefining the XOR function as hybrid XOR logic with slight modification in the function introducing high impedance variable as Z. The idea of maximum capturing is taken as the base framework for clustering.

To design a clustering algorithm we must first design the similarity function which is the heart of any clustering algorithm. We define a generalized similarity function called Hybrid XOR function which may be used to compute similarity feature between any pair of entities which may be software components or software patterns or documents. The documents may be text files to be classified or software product documents of various phases in software life cycle. We define the similarity function S as a function of any two entities A and B which is a tri state function as shown below in the truth table 1.

The algorithm for document clustering has its input as documents with frequent item sets and output as set of clusters formed dynamically. The approach followed is a tabular approach. Similarly the algorithm for component clustering has its input as software components with properties predefined and the output is a set of highly cohesive components with low coupling feature.

Step 6: At each step, find the cell with maximum value and document pairs containing this value in the matrix.Group such document pairs to form clusters. Also if document pair (I, J) is in one cluster and document pair (J, K) is in another cluster, form a new cluster containing (I, J, K) as its elements.

Consider the document sets with the frequent item sets obtained after mining using any of the existing association rule mining algorithms as shown below. Here we use can also use association rule mining algorithm with multiple support and confidence thresholds. We considered a set of random of 20 documents as the training set.

Once we obtain the above table with feature vectors for each document pair then we replace the corresponding cells of matrix by count of number of zeroes in tri state feature vector. We call it tri-state because it can have 0 or 1 or z as the value. This is shown in the table below.

Step 2: Find the next max value from the above table which is 3 here and target those cells as they form the best candidate solutions. Now cluster {2, 4, 6} is dynamically changed to {1, 2, 3, 4, 6, 9} and is no more a separate cluster as shown in table.2. cell values with superscript * not considered.

In this paper an attempt is made to study the problem of clustering software components for developing reuse library files and also the method of document clustering. An algorithm to cluster a set of given documents or text files or software components is designed which uses the new similarity function defined in this paper named hybrid XOR function defined for the purpose of finding degree of similarity among any two entities. The Proposed algorithm has the input as similarity matrix and the output being set of clusters formed dynamically as compared to other clustering algorithms that predefine the count of clusters and documents being fit to one of those clusters or classes finally. The approach can be extended to classify using classifiers and applying fuzzy logic in future. The concept of Support vector machines may be used for classification once clusters are formed if required. The search complexity can be reduced by using the algorithm [10] where ever necessary as part of component retrieval.

We are very much thankful to all the anonymous reviewers and mainly thankful to Sri Dr. C.V.GuruRao for his invaluable suggestions and support throughout the work. We are also thankful to Mr. V.Sreekanth, Senior Technical Lead, Business Intelligence and Warehousing architect,IBM, Bangalore for his cooperation in carrying out the work.

	 C.Srinivas is a Masters Degree holder in Computer Science and Engineering from JNTU, Hyderabad. Presently he is working as an Associate Professor in CSE Department at Kakatiya Institute of Technology and Sciences, Warangal and is a research scholar at Kakatiya University under the guidance of Dr.C.V.Guru Rao. He has over 15years of teaching experience and presented papers at several national and international conferences and workshops. His areas of interest are Software Reuse, Cloud Computing.

