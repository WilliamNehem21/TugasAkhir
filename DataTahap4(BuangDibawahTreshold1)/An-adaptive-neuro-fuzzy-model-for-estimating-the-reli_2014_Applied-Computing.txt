Abstract Although many algorithms and techniques have been developed for estimating the reliability of component-based software systems (CBSSs), much more research is needed. Accurate estimation of the reliability of a CBSS is dif- ficult because it depends on two factors: component reliability and glue code reli- ability. Moreover, reliability is a real-world phenomenon with many associated real-time problems. Soft computing techniques can help to solve problems whose solutions are uncertain or unpredictable. A number of soft computing approaches for estimating CBSS reliability have been proposed. These tech- niques learn from the past and capture existing patterns in data. The two basic elements of soft computing are neural networks and fuzzy logic. In this paper, we propose a model for estimating CBSS reliability, known as an adaptive neuro fuzzy inference system (ANFIS), that is based on these two basic elements of soft computing, and we compare its performance with that of a plain FIS (fuzzy inference system) for different data sets.

Software generally has two user requirements: reliability and availability. Reliabil- ity is required when the product’s nonperformance will have the greatest impact, while availability is required when downtime will have the greatest impact. Although it is difficult to formally define reliability, we cannot simply define it as a binary notion by saying that if a program is correct its reliability is 1, and if it is incorrect its reliability is 0. Instead, reliability can usually be measured prob- abilistically as

Specifically, software reliability is defined as a software system’s probability of failure-free operation for a specified period of time in a specified environment. As the complexity of software applications continues to grow, greater emphasis has been placed on reuse. Therefore, component-based software system (CBSS) appli- cations have come into existence.

Component-based software engineering (CBSE) is a specialized form of soft- ware reuse concerned with building software from existing components, including commercial off-the-shelf (COTS) components, by assembling them together in an interoperable manner. Achieving a highly reliable software application is a diffi- cult task, even when high-quality, pretested, and trusted software components are combined. Several techniques have therefore emerged to analyze the reliability of component-based applications. These fall into two groups:

Traditional approaches to software reliability analysis treat the software as a whole and use test data during the software test phase to model only the software’s interactions with the outside world. These are known as black-box models. However, black-box models ignore the structure of software constructed from components as well as the reliability of individual components and are therefore not appropriate for modeling CBSS applications. Recently, soft computing tech- niques have emerged. Since reliability is a real-world issue, many run-time param- eters are associated with reliability. This makes soft computing techniques ideal for estimating CBSS reliability, as these techniques deal mainly with uncertainty. The two basic soft computing techniques are neural networks and fuzzy logic. In this paper we combine these two techniques to estimate CBSS reliability.

are formulated on the basis of expert advice. However, this is a relatively time-con- suming process. The advantage of an ANFIS over the FIS model is that it com- bines fuzzy logic with the learning capabilities of neural networks (NNs) to solve this problem. The aim of our proposed model is to integrate the best features of fuzzy logic and neural networks in a CBSS reliability estimation model. Our results demonstrate how this is an improvement over an FIS.

The rest of this paper is organized as follows. Section 2 discusses related work. Section 3 provides the framework for our proposed model, and Section 4 presents the model. Section 5 presents our experiments to evaluate the proposed model. Section 6 discusses the experimental results, and Section 7 presents our conclusions.

Yacoub et al. (2004) propose an approach to reliability analysis called scenario- based reliability analysis. This approach introduces component dependency graphs (CDGs) which can be extended for complex distributed systems. Using the same algorithm, sensitivity can be analyzed as a function of component reliabilities and link reliabilities. This approach is based on scenarios which can be captured with sequence diagrams, which means that the approach can be automated. A limitation of this approach is that it does not consider failure dependencies among

the components. Zhang et al. (2008) also proposed a model based on a CDG. In this approach, a system’s operational profile is given. It is assumed that control flow transits from component i to component j, and the reliability of component j is calculated as Tij = Rij · Wij, where

Dong et al. (2008) proposed a new model for estimating CBSS reliability in which various complex component relationships are analyzed. The Markov model is used to solve these complicated relationships, which have a large impact on a system’s reliability. The results were used to develop a new tool to calculate soft- ware application reliability. Huang et al. (2008) proposed a technique based on algebra which provides a framework for describing the syntax and predicting the reliability of a CBSS, implemented on Seth et al. (2010) proposed a minimum spanning-tree-based approach to estimating CBSS reliability.

Goswami and Acharya (2009) proposed an approach to CBSS reliability anal- ysis which takes the component usage ratio, which is the time allotted for a com- ponent’s execution out of the application’s overall execution time, into consideration. Mathematical formulas are used to calculate the usage ratio. Due to the flexibility of the component usage ratio, this approach can be used in real-time applications.

Fiondella et al. (2013) proposed an approach based on correlated component failures (COCOF). In this paper an efficient approach to access the reliability of a software application, considering the component reliabilities, correlation and application architecture is proposed. This proposed approach is based on an algo- rithm that transforms a Multivariate Burnoulli distribution (MVB) into a joint distribution of the component outcomes.

Palviainen et al. (2011) proposed a technique for reliability estimation, predic- tion and measuring of CBS. The proposed approach explains that reliability is a key driver for safety critical systems such as health care systems and traffic con- trollers. This paper gives software reliability evaluation during design and imple- mentation phases. The contribution of this approach lies in the integrating the component level reliability. There is a need for a systematic approach that facili- tates software developers to both construct reliable component based software sys- tems and ensure that the software architecture, selected components and constructed software system meet the reliability goals. The approach integrates heuristic reliability estimation, model base reliability prediction and model based reliability measuring activities at component level and reliability prediction

activities at system level to support the incremental and iterative development of reliable CBSS. This proposed approach is not applicable for distributed systems. Hu et al. (2013) proposed a software reliability estimation method using mod- ified adaptive testing (MAT) for reliability of CBS. In this paper, a set of extended metrics based on the Nelson’s software reliability model account for information gained from a user’s point of view regarding the severity of the observed failures. In the approach, the use of test history information allows the resulting test pro- cess to be adaptive in the selection of tests under the limited test budget. This approach can enhance the software reliability estimation testing by guiding test

Dimov and Sasikumar (2010) proposed a fuzzy reliability model for CBSSs, based on fuzzy logic and possibility theory. A mathematical fuzzy model based on necessity and possibility is proposed to predict the reliability of a CBSS. Like many other models, this model does not require component failure data because it is based on uncertainty. However, a mechanism is necessary to model the propa- gation of failure between components and failure behavior.

Si et al. (2011) proposed a framework for estimating reliability through a com- ponent composition mechanism. The approach proposes five basic component composition mechanisms and techniques for their reliability estimation. After cal- culating the reliability for each composition, a procedure estimates the overall application reliability based on the component composition mechanisms and com- ponent utilization frequencies. It is possible to recognize additional composition mechanisms.

Many soft computing approaches are based on support vector machines (SVMs), genetic algorithms (GAs), and fuzzy logic. Lo (2010) proposed a software reliability estimation model based on an SVM and a GA. This model specifies that recent failure data alone are sufficient for estimating reliability. Reliability estima- tion parameters for the SVM are determined by the GA. This model is less depen- dent on failure data than are other models.

Hsu and Huang (2011) proposed a model which is an adaptive approach for testing path reliability estimation for complex CBSSs. Three methods were pro- posed for path reliability estimation: these use sequence, branch, and loop struc- tures. The proposed path reliability can be used to estimate the reliability of the overall application. Tyagi and Sharma (2012) proposed an approach based on fuzzy logic for estimating CBSS reliability. In this approach, four critical factors were identified for estimating the reliability of a CBSS, and these were used to design an FIS for the estimation.

different fields of engineering with varying degree of success. An FIS often consists of if-then rules. These rules are fired in parallel: when if- conditions are met, the consequents of those rules fire to the degree to which the antecedents of the rules are met. One of the main challenges in creating an FIS is determining the fuzzy sets and fuzzy rules to be used. This requires acquiring deep domain knowledge from human experts, and the fine tuning of the fuzzy sets and rules can be very time con- suming. The solution to this problem is to combine an FIS with the learning capa- bilities of NNs, resulting in an ANFIS. The proposed model is an improvement over the fuzzy model proposed by Tyagi and Sharma (2012).

NNs and fuzzy logic are complementary concepts. NNs have learning capabilities: they can learn from data and feedback. They are black-box models. Fuzzy logic models are rule-based models, where the rules usually have an if-then form. Fuzzy models do not have learning capabilities, so for learning, they must adopt tech- niques from other methods. It is therefore natural to marry the two technologies. Fuzzy logic is based on the combination of four concepts shown in Fig. 1.

ANFISs were first proposed by Jang (1992) in 1992. These are adaptive networks whose function is similar to FISs. The aim of an ANFIS is to integrate the best features of fuzzy systems and NNs. The advantages of an ANFIS over an FIS are as follows:

In this paper, we propose an automated model for CBSS reliability estimation that uses the ANFIS approach. An ANFIS is a class of adaptive networks which are functionally equivalent to FISs. This is an extension of the fuzzy model proposed by Tyagi and Sharma (2012). We take into consideration all four factors proposed in that model to compare the results of both models.

Reusability is one of the most basic concepts of component-based development (CBD). As the name suggests, reusability refers to how frequently a component is used in different applications. We selected reusability as a factor for estimating component reliability because it is believed that components that have been used in many applications are highly reliable. Hence the reliability of a component is directly proportional to its reusability: component reliability a reusability

Operational profile for the component: The operational profile (OP), a quantita- tive characterization of how the software will be used, is essential in any software reliability engineering application. An OP is a complete set of operations with their probabilities of occurrence. The reliability may be different for different OPs. The OP for any component describes the inputs supplied to the component.

Component dependency: In a CBSS, various components are connected to one another to form a larger application. The components are dependent on each other to perform their functions, that is, the output of one component may serve as an input for another component. This dependency plays an important role for estimating the reliability of the overall application. If components are highly dependent on one another, the reliability of the system will be low.

There are several mechanisms for characterizing dependencies among compo- nents. For example, an adjacency matrix representation of dependencies indicates which dependencies exist among components. However, this representation does not explain the interactions between components. These interactions play an important role in relation to the dependencies of components and therefore their

reliability, and so we need a different way to represent the interactions. Sharma et al. (2009) proposed a dependency representation which is based on linked lists and implemented using Hash Map in Java. This representation can store depen- dencies along with other information like provided and required information, which can be used to analyze several interaction- and dependency-related issues.

Our proposed model is an additive model. It does not explicitly take the archi- tecture of the CBSS into consideration, but the measure of application complexity will be platform dependent because it comes from the glue code (integration code). The FIS studied in this work has four input factors as described above, namely, reusability, application complexity, component dependency, and operational pro- file. For a first-order Sugeno fuzzy model, a rule set with fuzzy if-then rules is as

Layer 3: Every node in this layer is a fixed node labeled N. The ith node calcu- lates the ratio of the ith rule’s firing strength to the sum of all rule firing strengths. The output of this layer is called the normalized firing strengths.

One of the major limitations of this ANFIS is that it uses only Sugeno-style fuzzy inference systems. The difference between Sugeno and Mamdani inference engines lies in the defuzzification method. A Mamdani-type FIS uses the defuzz- ification technique for fuzzy outputs, and a Sugeno-type FIS uses a weighted aver- age to compute crisp outputs. A Mamdani FIS also has output membership functions, while a Sugeno FIS doesn’t have output membership functions.

some are simple CBSSs. The ANFIS was trained and tested using the data obtained from these projects. Some of the data were used for training and testing, and some were used for the results. A total of 81 rules were formed on the basis of the available data. The rules divide the input factors into three variables: low, med- ium, and high.

To evaluate our proposed model, the training data set was loaded, and the ANFIS was trained using that data set. To validate the model, we loaded the test- ing data set and then plotted the testing error. The membership function of the FIS before and after training is shown in Fig. 3.

After creating the ANFIS model, we compared the output reliability values for different input sets with the original values. We calculated the root mean square error (RMSE) for the output obtained by the FIS and the output obtained by the ANFIS with the original output. The degree of membership had significant changes (see Figs. 4 and 5).

The difference between the two RMSEs can be observed. Using only the FIS, there was an 11.74% error in the results, but the ANFIS reduces the error to 6.66%. Hence, the ANFIS performs better than the FIS. Using the ANFIS, we first trained the FIS, and the rules were formed on the basis of training data to produce the output of the trained model. The only limitation of this model is that its execution is complex for large data sets. Our results show that the ANFIS model gives a more accurate measure of reliability than the FIS model (Table 1). The testing error and training error obtained from the MATLAB FIS TOOL-

impact. This paper proposes a neuro fuzzy model for estimating CBSS reliability. Many approaches to CBSS reliability have been proposed, some based on math- ematical formulas and others based on soft computing techniques. Our proposed method is based on an ANFIS, which is a soft computing technique. This is a hybrid method that requires less computational time than traditional approaches and the previously proposed FIS approach. The CBSSs used to test the models are classroom-based projects. Our results show that the ANFIS improves the reliabil- ity evaluation of the FIS technique.

