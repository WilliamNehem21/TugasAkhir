 Initialization. DLPSL node is comprised of storage index value (SID), Data information (Data), storage node ID(CID), weights (priority) and the pointer field. All storage index value is often between -  and + , and the index value which is the basis to find the specified user data by the server which is defined as a 32 bit binary number. Data information is used to store the data of the relevant information, and set the initial value to NULL. Storage node ID is the storage ID of the corresponding file fragmentation, generally has multiple ID addresses. When you initialize the nodes, all of the weights are set to 0. The level of each node is generated by the random function, and then adjusts dynamically the weights according to the rate of searching; the layer in which the node located will dynamically change on the basis of the size of weights.

 Node Inserting. The main step to complete insert operation is: firstly, locate insert position of node, secondly create new nodes and finally modify the change pointer value. The insert operation will be used while updating nodes and its time efficiency mainly depends on the localization algorithm efficiency.

 Node Deleting. Node deleting is similar to its inserting. The first is to locate the nodes that needed to delete, and then to judge whether it will find the node. If it could find the node, then modify relevant pointer value and delete node. If the node is not found, then return to failure of deleting node. The time efficiency of Node delete also depends on the localization algorithm efficiency.

Space complexity, namely all elements could be MaxLevel-level in the worst case and each element needs MaxLevel+1 pointers. For this reason, the n elements need to be stored and meanwhile chain pointer need to be stored also (space needed is O(n * MaxLevel)). Usually, only n*p elements in 1-level chain, n*p2 elements in 2-level chain and n*pi in i-level chain. So the

