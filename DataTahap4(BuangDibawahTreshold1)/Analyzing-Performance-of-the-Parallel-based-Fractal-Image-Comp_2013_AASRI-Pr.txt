Both the size and the resolution of images always were key topics in the graphical computing area. Especially, they become more and more relevant in the big data era. We can observe that often a huge amount of data is exchanged by medium/low bandwidth networks or yet, they need to be stored on devices with limited space of memory. In this context, the present paper shows the use of the Fractal method for image compression. It is a lossy method known by providing higher indexes of file reduction through a highly time consuming phase. In this way, we developed a model of parallel application for exploiting the power of multiprocessor architectures in order to get the Fractal method advantages in a feasible time. The evaluation was done with different-sized images as well as by using two types of machines, one with two and another with four cores. The results demonstrated that both the speedup and efficiency are highly dependent of the number of cores. They emphasized that a large number of threads does not always represent a better performance.

Image compression is a special topic inside the computer graphics areas which becomes more and more important on Big-Data era [1–3]. Its main objective consists in reducing the irrelevance and redundancy of the image data in order to be able to store or transmit data in an efficient way. In this context, a technique called Fractal Image Compression (FIC) appears as one of most efficient solutions for reducing the size of files [4], [5]. FIC method is characterized by higher rates of compression, but itsencoding phase is time-consuming [9]. On the other hand, the decoding one occurs quickly enabling users to download compressed images from Web servers and visualize them in their hosts in a feasible time, for instance.

Aiming to reduce of the time on the encoding phase of FIC method, it is possible to design this phase as a parallel program to take advantage of multiple cores present on common machine architectures [6, 7]. Multi- core processors are widely used across many application domains.It is important to emphasize the improvement in performance gained by the use of a multicore processor depends on the employed software algorithms, as well as their implementation.This paper describes the FIC technique and presents a new threads-based approach for modeling the problem as a parallel application. Besides the model itself, we developed a prototype that was evaluated by using different-sized images and different multiprocessing machines. Especially, we obtained the results by using both a dual and quad-core machines.

FIC applies transformations, which approximate smaller parts of the image by larger ones. The smaller parts are called ranges and the larger ones domains. All ranges together form the image. A complete domain- poll of an image of size txtwith square domains of size d x d consists of (t – d + 1)2 domains. This paper presents a parallel modeling for multicore systems by using threads in order to explore such an architecture.

As already presented by Stapleton’s work [2, 11], FIC has a natural parallelism. Each comparison between ranges and domains is independent. The main idea is to start more than one FIC process at the same time. Each one is responsible for a subset of the original image. Figure 1 illustrates the proposed model of parallelism when 4 threads are employed. The first step of the model consists in splitting the original image in n equal subsets of ranges. The value of n indicates the number of threads that will be employed on compression coding. Each thread works with whole set of domains and must test all element of this set against each range element received previously.The final step concerns the appending of all blocks for generating the final compresses image. This task is done after a synchronization point that waits for the ending of all threads.

Concerning the model explained in Figure 1, we developed an application written in C Language that uses the routines of the Pthreadslibrary for threads facilities. The main program takes a time for calculating the FIC problem (t2 –t1) in the following manner: time t1 before launching the threads and time t2 after the synchronization directive. The environment is composed byboth dual-core (2.93 GHz) and quad-core (2.53 GHz) multiprocessor machines. Since the parallel application will be evaluated with 2, 4, 8, 16 and 32 threads, our idea consists in observing the speedup and the efficiency on different configuration machines.

According with [13] the error or distortion between original image f and a decoded image f´ is measured by the peak signal-to-noise ratio (PSNR). Equation 1 defines this value. MSE indicates the mean square error. PSNR metric is used in several works to qualify the reconstruction of a lossy compression method.

We used two input images for performing our evaluation. The first has 256x256px (Lenna) and second with 512x512px (Coliseum). We intend to analyze both the speedup and the parallel efficiency when varying the number of threads and the dimension of the ranges. Each experiment ran 30 times and we got both the mean value and the standard deviation. Table 1 presents the obtained PSNR when varying the number of ranges. The 2x2-sized range obtained the best results due to its better entropy when compared to larger ranges.

Tables 2 and 3 present the evaluation of both input images when using a dualcore machine. As expected, the best results appear when testing 2 or 4 threads. For example, 6.57 seconds were obtained when testing only one thread with a range dimension equal to 4. On the other hand, the execution with 32 threads presented the highest execution time when comparingexecutions of multiple threads. This behavior is explained by the overhead of mutex, synchronization and thread management primitives. Figure 2 illustrates the speedup (sequential_time/parallel_time) and the parallel efficiency (Speedup/processors) for the tests with 2x2 range.Our application presents a poor speedup because the number of threads is greater than the number of execution cores. This statement becomes clear in the efficiency graph. Considering that we have only 2

Figure 3 depicts the speedup evaluation results of the Coliseum image over a dualcore machine. In this way, the execution with 2 threads reaches indexes up to 1.97 of speedup, which is considered a good measure since the ideal speedup for this configuration is 2. Besides this analysis, it is possible to observe other two behaviors in the graph of Figure 3.Firstly, the larger the dimension of the ranges, the lower the captured speedup. For example, the execution with a range of 32x32 presents a lowest computation grain per each thread. Secondly, we can observe an execution pattern among the threads.

Both Tables 4 and 5 present the results when changing the infrastructure to a quadcore machine. Figure 4 shows the efficiency results obtained with the compression of the Coliseum image by using 2 and 4 threads. As expected, both dualcore and quadcore machines present higher indexes of efficiency when treating 2 threads. The main results of this figure appear on the right side.While the dualcore computer achieves an average efficiency of 46.3% for 4 threads, a quadcore configuration presents an index of 68.2% for the same metric. The quadcore performance must be carefully analyzed since the larger the number of cores the larger memory access contention.Future tests concern the employment of processor-level profiles in order to verify possible shared components that act as bottleneck in the system performance.

A variety of works explore the thematic of the FIC compression problem [8, 10, 11, 12, 13]. Lin [13] presented a fast search strategy using a classifier of ranges based on particle swarm optimization and Dihedral transformation. Iano, Silva and Cruz [10] utilize a hybrid solution with a lowpass filter (wavelet transform) in order to obtain a better quality of the compressed image. In addition, Wang’s [14] work uses inter range correlation to avoid unnecessary searches. Stapleton et al [11] showed similar solution with nCUBE2 family. Hunfnagel[12] uses fractal algorithms on SIMD (Single Instruction Multiple Data) environments. Therefore, We found a lack on measuring the power of multicore machines for calculating the FIC problem. This opportunity of work was explored in this paper.

This paper presented a parallel modeling of the so-called Fractal Image Compression (FIC) problem. Our model is based on a copy of the entire D (Domain) set for each thread. Furthermore, each one receives from the main program its own subset of ranges, which represents a subpart of the input image. The results showed gains up to 48% when comparing both multiple and single-thread scenarios. The tests revealed a different treatment when using either a dualcore or quadcore machine. The parallel efficiency is abruptly reduced when passing from 2 to 4 threads with a dualcore machine (from 97.1% to 46.3%). This is not verified on a quadcore configuration, where the average efficiency remains in 68.2%.

