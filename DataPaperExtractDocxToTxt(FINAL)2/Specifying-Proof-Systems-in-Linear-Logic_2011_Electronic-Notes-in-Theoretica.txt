

Electronic Notes in Theoretical Computer Science 269 (2011) 109–123
www.elsevier.com/locate/entcs

Specifying Proof Systems in Linear Logic with Subexponentials
Vivek Nigam1
University of Pennsylvania, Philadelphia, USA
Elaine Pimentel and Giselle Reis
Universidade Federal de Minas Gerais, Belo Horizonte, Brazil

Abstract
In the past years, linear logic has been successfully used as a general logical framework for encoding proof systems. Due to linear logic’s finer control on structural rules, it is possible to match the structural restrictions specified in the encoded logic with the use of linear logic connectives. However, some systems that impose more complicated structural restrictions on its sequents cannot be easily captured in linear logic, since it only distinguishes two types of formulas: classical and linear. This work shows that one can encode a wider range of proof systems by using focused linear logic with subexponentials. We demonstrate this by encoding the system G1m for minimal, the multi-conclusion system, mLJ, and the focused system LJQ∗, for intuitionistic logic. Finally, we identify general conditions for determining whether a linear logic formula corresponds to an object-logic rule and whether this rule is invertible.
Keywords: Logical frameworks, linear logic, subexponentials, focusing.


Introduction
In the past years [10,16,11,12,17,14], linear logic has been successfully used as a general logical framework for specifying many proof systems for different logics. It turns out that, in the sequent calculus, a number of dualities appear directly. For example, the occurrences of a formula on the left or right of a sequent arrow are, in some sense, “dual” occurrences of that formula. The cut and initial inference rules are “dual” inference rules. The introduction rules for a logical connective on the left and right of a sequent arrow generally have dual behaviors. 2 Using linear logic

1 This work wouldn’t be possible without Dale Miller’s advices and the support of CNPq and FAPEMIG. The first author was also supported in part by NSF, by ONR, and by AFOSR MURI ”Collaborative policies and assured information sharing”.
2 At least when one wants to be able to eliminate both non-atomic cuts and non-atomic initial rules.

1571-0661 © 2011 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2011.03.009

as a logical framework makes it possible to use its involutive negation to directly capture such dualities of the encoded sequent system and reasoning about them.
On the other hand, when designing a proof system, the structural restrictions imposed to its sequents, usually through structural rules, play a role as important as the logical rules themselves. Already in the first sequent calculus systems designed
by Gentzen [6], the system for intuitionistic logic, LJ, differed from the system for classical logic, LK, by restricting in the former system the right-hand-side of sequents to contain at most one formula. Since then, several other proof systems
have been proposed, which differ more on these structural restrictions than on their logical rules.
Differently from classical logic, in linear logic the structural rules of weakening and contraction are not allowed to be used on any formula, but only those marked with the so-called exponentials (?, !). In this way, it is possible to distinguish be- tween two different kinds of formulas: linear formulas to which no structural rule is applicable (that is, they cannot be erased nor copied) and unbounded formulas to which it is allowed to apply structural rules. This distinction is normally reflected on syntax by using sequents of the form ▶ Θ : Γ containing two contexts [1]: Θ con- tains only unbounded formulas and behaves as a set of formulas, while Γ contains only linear formulas and behaves as a multiset of formulas.
One can, therefore, capitalize on this different treatment of formulas to specify proof systems, such as LK and LJ, whose sequents have at most two different contexts, of which one context can be treated as a multiset and another context be
treated as a set of formulas.
It does not seem possible, however, to specify proof systems that impose struc- tural restrictions to its sequents which require more than one context to be treated as either a set or a multiset of formulas. For instance, the sequents in Maehara’s
mLJ system [9] requires that both the left and the right-hand-side of sequents have
to be treated as two distinct sets of formulas. Focused proof systems are other ex-
amples of proof systems that impose structural restrictions that require more than one context. Besides contexts to store the formulas appearing on the left and right- hand-side of sequents, one needs an extra context to keep track of the formula being focused on.
It turns out that the linear logic exponentials are not canonical [4]. In fact, it is possible to construct linear logic proof systems with as many exponential- like operators (?a, !a), called subexponentials [15], as needed. These operators may or may not allow contraction and/or weakening and are organized in a pre-order that specifies the entailment relation among formulas marked with these operators. Subexponentials, therefore, allows the design of proof systems whose sequents have as many contexts as needed and any of them can be treated as multisets or sets. As this paper shows, the use of subexponentials greatly enhances the proof system’s expressiveness allowing the capture of more proof systems.
We propose the use of focused linear logic with subexponentials proof system, called SELLF [15], to encode such proof systems that impose more complicated structural restrictions to its sequents. More specifically, we show how to encode the

systems GIm [18], mLJ [9], and LJQ∗ [7,5] in SELLF.
Up to this point, we have described how linear logic with subexponentials is suitable for specifying a broad of logical systems. One could ask, on the other hand, whether a given linear logic formula is the specification of any sequent calculus system. It turns out that it is possible to classify linear logic formulas in such a way to determine precisely whether a linear logic formula corresponds to any possible object level inference rule.
This paper is organized as follows: Section 2 presents the system SELLF, focused
linear logic with subexponentials; Section 3 shows the examples of specifications using SELLF; Section 4 investigates connections between object and meta-level logics and, finally, in Section 5 we conclude by giving some directions for future
work.
Linear logic with subexponentials
Although we assume that the reader is familiar with linear logic, we review some of its basic proof theory. Literals are either atomic formulas (A) or their negations (A⊥). The connectives ⊗ and O and their units 1 and ⊥ are multiplicative; the connectives ⊕ and & and their units 0 and T are additive connectives; ∀ and ∃ are (first-order) quantifiers; and ! and ? are the exponentials. We shall assume that all formulas are in negation normal form, meaning that all negations have atomic scope.
Due to the exponentials, one can distinguish in linear logic two kinds of formulas: the linear ones whose main connective is not a ? and the unbounded ones whose main connective is a ?. The linear formulas can be seen as resources that can only be used once, while the unbounded formulas as unlimited resources that can be used as many times as necessary. This distinction is usually reflected in syntax by using two different contexts in linear logic sequents (▶ Θ : Γ), one (Θ) containing only unbounded formulas and another (Γ) only linear formulas [1]. Such distinction allows to incorporate structural rules, i.e., weakening and contraction, into the introduction rules of connectives, as done in similar presentations for classical logic,
e.g., the G3c system in [18].  In such presentation, the context (Θ) containing
unbounded formulas is treated as a set of formulas, while the other context (Γ)
containing only linear formulas is treated as a multiset of formulas.
It turns out that the exponentials are not canonical [4] with respect to the logical equivalence relation. In fact, if, for any reason, we decide to define a blue and red conjunctions (∧b and ∧r respectively) with the standard classical rules:


Γ, A,B ▶ Δ
b
∧bL
Γ ▶ Δ,A	Γ ▶ Δ,B 

b
∧bR

Γ,A ∧ B ▶ Δ
Γ ▶ Δ,A ∧ B



Γ, A,B ▶ Δ
Γ,A ∧r B ▶ Δ
∧rL	Γ ▶ Δ,A	Γ ▶ Δ,B ∧rR
Γ ▶ Δ,A ∧ B

then it is easy to show that, for any formulas A and B, A∧b B ≡ A∧r B. This means that all the symbols for classical conjunction belong to the same equivalence class.

Hence, we can choose to use as the conjunction’s canonical form any particular color, and provability is not affected by this choice. However, the same behavior does not hold with the linear logic modals. In fact, suppose we have red !r, ?r and blue !b, ?b sets of exponentials with the standard linear logic rules:


▶ ?rΓ,F 
▶ Γ,F 
▶ ?bΓ,F 
▶ Γ,F 

▶ ?rΓ, !r F !
▶ Γ, ?rF
D?r
▶ ?bΓ, !b F !
▶ Γ, ?bF
D?b

We cannot show that !r F ≡ !b F nor ?rF ≡ ?bF . This opens the possibility of defining classes of exponentials, called subexponentials [15]. In this way, it is possible to build proof systems containing as many exponential-like operators, (!l, ?l) as one needs: they may or may not allow contraction and weakening, and are organized in a pre-order (≤) specifying the entailment relation between these operators. Formally,
a proof system for linear logic with subexponentials, called SELLΣ, is specified by
using a subexponential signature, Σ, of the form ⟨I, ≤, W, C⟩, where I is the set of labels for subexponentials, ≤ is a preorder relation among the elements of I, and both W and C are subsets of I, specifying which subexponentials allow for, respectively, weakening and contraction. We will require the preorder ≤ to be upwardly closed with respect to the sets W and C, that is, if x ≺ y and x ∈ W 
(x ∈ C), then y ∈ W (y ∈ C). SELLΣ contains the same introduction rules as in
linear logic for all connectives, except the exponentials. These are specified, on the
other hand, by the subexponential signature, Σ, as follows: 3

▶ C, Δ
▶ ?x C, Δ D, if x ∈ I
▶ ?y C, ?y C, Δ
▶ ?y C, Δ	C, if y ∈ C 
▶ Δ	W, if z ∈ W 
▶ ?zC, Δ

That is, the first rule, called dereliction, can be applied to any subexponential, and contraction (respectively, weakening) only to subexponentials that appear in the set C (respectively, W). In this paper, we will assume that C = W. The promotion rule is given by the following inference rule:
▶ ?x1 C1,..., ?xn Cn,C 
x	x	a	!a
▶ ? 1 C1,..., ? n Cn, ! C
where a ≤ xi for all i = 1,..., n. The promotion rule will play an important role here, namely, to specify the structural restrictions of encoded proof systems. In particular, one can use a subexponential bang, !c, to check whether there are only some type of formulas in the context, in particular, those that are marked with subexponentials, ?x, such that c ≤ x. If there is any formula ?y F in the context such that c  y, then !c cannot be introduced.
As we show in this paper, the use of subexponentials greatly increases the ex- pressiveness of linear logic by no longer limiting one to use only two contexts, but as many as one needs, namely, one context for each subexponential. Moreover, since one can specify to which subexponentials one is allowed to copy or erase formulas,

3 Whenever it is clear from the context, we will elide the subexponential signature Σ.

these contexts can either be treated as multisets or sets of formulas. This will allow us to encode in SELL a vast number of proof systems that do not seem possible to be encoded in plain linear logic.

Focusing
First proposed by Andreoli [1] for plain linear logic, focused proof systems provide the normal form proofs for cut-free proofs. In this section, we review the focused proof system for SELL, called SELLF, proposed in [15].
In order to introduce SELLF, we first recall some more terminology. We classify
as positive the formulas whose main connective is either ⊗, ⊕, ∃, the subexponential bang, the unit 1 and positive literals. All other formulas are classified as negative. Figure 1 contains the focused proof system SELLF that is a rather straightforward generalization of Andreoli’s original system. There are two kinds of arrows in this
proof system. Sequents with the ⇓ belong to the positive phase and introduce the logical connective of the “focused” formula (the one to the right of the arrow): building proofs of such sequents may require non-invertible proof steps to be taken. Sequents with the ⇑ belong to the negative phase and decompose the formulas on their right in such a way that only invertible inference rules are applied. The structural rules D1, Dl,R ⇑, and R ⇓ make the transition between a negative and a positive phase.
Similarly as in the usual presentation of linear logic, there is a pair of contexts to the left of ⇑ and ⇓ of sequents, written here as K : Γ. The second context, Γ, collects the formulas whose main connective is not a question-mark, behaving as the bounded context in linear logic. But differently from linear logic, where the first context is a multiset of formulas whose main connective is a question- mark, we generalize K to be an indexed context, which is a mapping from each index in the set I (for some given and fixed subexponential signature) to a finite multiset of formulas, in order to accommodate for more than one subexponential
in SELLF. In Andreoli’s focused system for linear logic, the index set contains a
single subexponential, ∞, and K[∞] contains the set of unbounded formulas. Figure
2 contains different operations used in such indexed contexts. For example, the operation (K1 ⊗ K2), used in the tensor rule, specifies the resulting indexed context obtained by merging two contexts K1 and K2.
Focusing allows the composition of a collection of inference rules of the same polarity into a “macro-rule”. Consider, for example, a formula N1 ⊕ N2 ⊕ N3, where all N1, N2, and N3 are negative formulas. Once focused on, the only way to introduce such a formula is by using one a “macro-rule” of the form:
	▶ K :Γ ⇑ Ni	
▶ K :Γ ⇓ N1 ⊕ N2 ⊕ N3
where i ∈ {1, 2, 3}. There is no other alternative. For another examples, the back- chaining and forward-chaining rules in logic programming can also be explained in such a way [8]. Here, we will encode proof systems in SELLF in such a way that the

Negative phase

▶ K :Γ ⇑ L, A	▶ K :Γ ⇑ L, B
▶ K :Γ ⇑ L, A&B
▶ K :Γ ⇑ L, T [T]
[&]	▶ K :Γ ⇑ L, A, B
▶ K :Γ ⇑ L, AOB
▶ K :Γ ⇑ L
▶ K :Γ ⇑ L, ⊥ [⊥]
[O]

▶ K :Γ ⇑ L, A{c/x} [∀]	▶ K +l A :Γ ⇑ L [?l]


▶ K :Γ ⇑ L, ∀x.A
▶ K :Γ ⇑ L, ?lA

positive phase
	▶ K :Γ ⇓ Ai	 [⊕ ]	▶ K1 :Γ ⇓ A	▶ K2 :Δ ⇓ B

[⊗, given (K

= K )|	]

▶ K :Γ ⇓ A1 ⊕ A2	i
▶ K1 ⊗ K2 : Γ, Δ ⇓ A ⊗ B	1
▶ K :Γ ⇓ A{t/x}
2 C∩W

▶ K : · ⇓ 1 [1, given K[I \ W]= ∅]
▶ K :Γ ⇓ ∃x.A	[∃]

▶ K ≤l: · ⇑ A [!l, given K[{x | l  x ∧ x ∈/ W}]= ∅]
▶ K : · ⇓!lA
Initial, Reaction and Decision Rules
[I, given A⊥ ∈ (Γ ∪ K[I]) and (Γ ∪ K[I \ W]) ⊆ {A⊥}]
▶ K :Γ ⇓ Ap	p	p

▶ K +l P :Γ ⇓ P
▶ K :Γ ⇓ P
[D , given l ∈ C ∩ W]
[D , given l ∈/ C ∩ W]

▶ K +l P :Γ ⇑ ·	l	▶ K +l P :Γ ⇑ ·	l

▶ K :Γ ⇓ P
▶ K : Γ,P ⇑ · [D1]
▶ K :Γ ⇑ N
▶ K :Γ ⇓ N [R ⇓]
▶ K : Γ,S ⇑ L
▶ K :Γ ⇑ L, S [R ⇑]

Fig. 1. Focused linear logic system with subexponentials. Is is assumed that: C ⊆ W; L is a list of formulas, Γ is a multi-set of formulas and positive literals, Ap is a positive polarity literal, P is a non-negative literal, S is a positive literal or formula and N is a negative formula.



(K1
⊗K )[i]= ⎧⎨ K1[i] ∪ K2[i] if i ∈/ C 

K[S]= S{K[i] | i ∈ S}



(K +l
⎩ K1[i]	if i ∈ C ∩ W
A)[i]= ⎨ K[i] ∪ {A}  if i = l
⎩ K[i]	otherwise


• K ≤i

= ⎧⎨ K[l] if i ≤ l
⎩ ∅	if i  l

(K1  K2) |S is true if and only if (K1[j]  K2[j])
Fig. 2. Specification of operations on contexts. Here, i ∈ I, j ∈ S, S ⊆ I, and the binary connective
٨ ∈ {=, ⊂, ⊆}.


“macro-rules” available using our specifications match exactly the inference rules of the encoded system. This is the strongest level of adequacy possible as described in [14].
This paper will make great use of the promotion rule, !l, in order to specify the structural restrictions of a proof system. In particular, this rule determines two different operations when seeing this introduction rule from the conclusion to premise. The first one arises by its side condition: a bang can be introduced only

if the linear contexts that are not greater to l are all empty. This operation is similar to the promotion rule in plain linear logic: a bang can be introduced only if the linear context is empty. Nigam and Miller exploited this in [14] to encode LJ in Andreoli’s focused system for linear logic. The second operation is specified
by using the operation K ≤l: in the premise of the promotion rule all unbounded contexts that are not greater than l are erased. Notice that such operation is not available in plain linear logic.
Finally, to improve readability, we will often show explicitly the formulas ap- pearing in the image of the indexed context, K, of a sequent. For example, if the set of subexponential indexes is {x1,..., xn}, then the following negative sequent
▶ Θ1 :x1 Θ2 :x2 ··· Θn :xn Γ ⇑ L
denotes the SELLF sequent ▶ K : Γ ⇑ L, such that K[xi] = Θi for all 1 ≤ i ≤
n. We will also assume the existence of a maximal subexponential called ∞ for
which contraction and weakening are allowed and which is greater than all other subexponentials. This subexponential is used to store linear logic theories specifying proof systems.

Encoding proof systems
Similar as in Church’s simple type theory [3], we assume that linear logic proposi- tions have type o and that the linear logic quantifiers have type (term → form) → o, where term and form are respectively the types for an object-logic term and for object-logic formulas. Moreover, following [17,16,14], we encode a sequent in SELLF by using two meta-level atoms [·♩ and [·| of type form → o. They denote respec- tively an object logic formula appearing on the left and on the right-hand-side of
a sequent. For example, the sequent B1,..., Bn ▶ C1,..., Cm could be encoded by the SELLF sequent ▶ Θ :∞ [B1♩, ··· , [Bn♩ :l [C1|, ··· , [Cm| :r · ⇑ ·, where Θ en- codes the proof system’s introduction rules. Notice that in SELLF we can configure the contexts for the subexponentials l (for left) and r (for right) to either behave like sets or multisets by changing the subexponential signature accordingly. For
instance, if we use the subexponentials signature ⟨{l, r, ∞}, ≤, {l, ∞}, {l, ∞}⟩, with some preorder ≤, the contexts l and ∞ are treated as sets, while the context r is treated as a multiset. Such situation would be useful for any proof systems where
the right-hand-side of its sequent behaves as a multiset of formulas and the left- hand-side behaves as a set of formulas. Finally, for convenience, if Γ is a (multi)set of object-logic formulas, then [Γ♩ (respectively, [Γ|) denotes the (multi)set of meta- level atoms {[F ♩ | F ∈ [Γ♩} (respectively, {[F | | F ∈ [Γ|}).

G1m
The first logic that we encode in SELLF is the proof system for minimal logic called
G1m [18], where the rules for contraction and weakening are explicit rules in the

system and all introduction rules are multiplicative. 4 The rules of this system are depicted in Figure 3. There both the left and right-hand-side of sequents are treated as two distinct multisets of formulas. This is particularly relevant for the rules ⊃R and Cut since the formula C on the right-hand-side of their conclusion sequents needs to be moved necessarily to the right premise.
Consequently, in SELLF, we will require two subexponentials, l and r, that
do not allow neither contraction nor weakening to store, respectively, object-logic
formulas appearing on the left and on the right of the sequent. Moreover, we use the theory LGIm depicted in Figure 4 to specify in SELLF the G1m’s introduction rules. This theory is, on the other hand, stored in the subexponential ∞ that is greater than both l and r and since an introduction rule can be used in an object-logic proof as many times as needed, ∞ is allowed to both contract and weaken. This can be summarized by the subexponential signature ⟨{∞, l, r}, {l ≺ ∞, r ≺ ∞}, {∞}, {∞}⟩. Intuitively, each clause in LGIm specifies an introduction rule of G1m. To obtain such strong correspondence between focused proofs obtained from LGIm, we need
to capture precisely the structural restrictions in the system. In particular, the use of the !l in the clauses (⊃L), specifying the rule ⊃L, and Id2, specifying Cut rules, is necessary. It forces that the side-formula, C, appearing in the right-hand-side of
their conclusion is moved to the correct premise. This is illustrated by the following derivation:



▶ L	:	:	:
:	:	:

GIm ∞ [Γ1♩ l [A| r · ⇑ 
:
!l, ?r
▶ LGIm ∞ [Γ2, A♩ l [C| r · ⇑ 
:
R⇓, ?l

▶ LGIm :	1	:	l r
:	:	l
GIm	2

▶ L	:
:	:	l r	l	⊗

GIm ∞ [Γ1, Γ2♩ l [C| r · ⇓ ! ? [A|⊗ ? [A♩

:	:	:
D∞, ∃

▶ LGIm ∞ [Γ1, Γ2♩ l [C| r · ⇑ 


When introducing the tensor, the formula [C| cannot go to the left branch since, in that case, the !l could not be introduced: in order to introduce this connective the r context must be empty. Therefore, the only way to introduce the formula Id2 is with a derivation such as the one above. Notice that such specification would not
be possible in plain linear logic because, there, only one context can be treated as a multiset, while in G1m, one requires two such contexts.
Formally, the following is proved in [13].


Proposition 3.1 Let Γ ∪ {C} be a set of object logic formulas, and let the subexpo- nentials, l and r, be speciﬁed by the signature ⟨{∞, l, r}, {l ≺ ∞, r ≺ ∞}, {∞}, {∞}⟩.
Then the sequent ▶ L	: [Γ : C| : · ⇑ is provable in SELLF if and only if the
GIm ∞	l	r
sequent Γ ▶ C is provable in GIm.

Γ1 −→ A  Γ2,B −→ C
Γ1, Γ2,A ⊃ B −→ C	⊃ L
Γ1 −→ A  Γ2 −→ B
Γ1, Γ2 −→ A ∧ B	∧R
Γ, A{c/x} −→ C


Γ, ∃xA −→ C	∃L
Γ,A −→ B
Γ −→ A ⊃ B ⊃ R
Γ, A{t/x} −→ C


Γ, ∀xA −→ C	∀L
Γ −→ A{t/x}
Γ −→ ∃xA  ∃R
Γ, Ai −→ C
Γ, A1 ∧ A2 −→ C ∧iL
Γ −→ A{c/x}


Γ −→ ∀xA  ∀R
Γ,A −→ C  Γ,B −→ C


Γ,A ∨ B −→ C	∨L

  Γ −→ Ai	 ∨ R	 Γ −→ C  W
Γ, A,A −→ C
C

Γ −→ A1 ∨ A2	i
Γ,A −→ C	L
Γ,A −→ C	L


A −→ A I
Γ1 −→ A Γ2,A −→ C
Γ1, Γ2 −→ C	Cut


Fig. 3. The sequent calculus system GIm for minimal logic. Here, Γ1, Γ2 are multisets of formulas and C
is a formula; in the rules ∃L and ∀R, the eigenvariable c does not appear free in Γ nor C; and i ∈ {1, 2}.


Fig. 4. The theory, LGIm, for GIm.
mLJ
We now encode in SELLF the multi-conclusion intuitionistic sequent calculus mLJ, whose rules appear in Figure 5. In order to specify mLJ two different contexts are also required. However differently from G1m, they need to be treated as sets of formulas. This restriction is a result of the right introduction rules for implications
and universal quantifiers. In these rules, all the side-formulas appearing in the right-hand-side of the conclusion sequent have to be erased in the premise, while the side-formulas appearing in the left-hand-side remain untouched.
The theory Lmlj in Figure 6 specifies mLJ in SELLF. As before, we make use of
two subexponentials l and r to store, respectively, meta-level atoms [·♩ and [·|, but now we allow both contraction and weakening to these subexponential indexes. That is, we use the subexponential signature ⟨{∞, l, r}; {l ≤ ∞, r ≤ ∞}; {∞, l, r}; {∞, l, r}⟩. The use of !l in the clauses (⊃r) and (∀R) enforces that the formulas in the context r are erased when these formulas are introduced, as illustrates the following derivation


4 The exchange rule is still implicitly incorporated in a sequent by assuming its context to be multiset of formulas and not lists. The system G1m used here is called context-independent rules in [18, Remark 3.1.5].

Γ,A ⊃ B −→ A, Δ  Γ,A ⊃ B, B −→ Δ
⊃l
Γ,A ⊃ B −→ Δ
Γ,A −→ B
⊃r
Γ −→ A ⊃ B, Δ

Γ,A ∧ B, A, B −→ Δ ∧
Γ −→ A ∧ B, A, Δ Γ −→ A ∧ B, B, Δ
∧

Γ,A ∧ B −→ Δ	l
Γ,A ∨ B, A, −→ Δ  Γ,A ∨ B, B −→ Δ ∨
Γ −→ A ∧ B, Δ	r
Γ −→ A ∨ B, A, B, Δ
∨

Γ,A ∨ B −→ Δ	l	Γ −→ A ∨ B, Δ	r
Γ, ∀x A, A{t/x} −→ Δ	Γ −→ A{c/x}

Γ, ∀xA −→ Δ	∀l
Γ, ∃x A, A{c/x} −→ Δ
Γ, ∃xA −→ Δ	∃l
Γ −→ Δ, ∀xA ∀r
Γ −→ Δ, ∃x A, A{t/x}
Γ −→ Δ, ∃xA	∃r


Γ,A −→ A, Δ I
Γ −→ B, Δ Γ,B −→ Δ

Γ −→ Δ	Cut	Γ, ⊥ −→ Δ ⊥l


Fig. 5. The multi-conclusion intuitionistic sequent calculus, mLJ, with additive rules.


Fig. 6. The theory, Lmlj, for the multi-conclusion intuitionistic logic system mLJ.
introducing the formula (∀R):

▶L	:	:	:

mlj ∞ [Γ♩ l [Ac| r ·⇑ 
∀, ?r

▶L	:	:  :	r

:	Ir
mlj ∞ [Γ♩ l · r ·⇑ ∀x? [Ax|
:	!l

▶ Lmlj :
:	⊥	:
mlj
:	l	r

:	:	:
⊗
⊥	l	r

▶ Lmlj ∞ [Γ♩ l [Δ, ∀x A| r ·⇓ [∀A|
⊗ ! ∀x? [Ax|

:	:	:
D∞, ∃

▶ Lmlj ∞ [Γ♩ l [Δ, ∀x A| r ·⇑ 
In particular, since l  r, all formulas in the context r should be erased in the premise of the promotion rule. The derivation above also illustrates how one can specify fresh values with the use of the universal quantifier. As in mLJ, the eigen- variable c cannot appear in Δ nor Γ.
The following result is proved by induction on the height of focused proofs [13].

Proposition 3.2 Let Γ ∪ Δ be a set of object-logic formulas, and let the subex- ponentials l and r be speciﬁed by the signature ⟨{∞, l, r}; {l ≤ ∞, r ≤ ∞}; {∞, l, r};
{∞, l, r}⟩. Then the sequent ▶ L	: [Γ : Δ| : · ⇑ is provable in SELLF if and
mlj ∞	l	r
only if the sequent Γ ▶ Δ is provable in mLJ.
LJQ∗
The systems in the previous sections always required two contexts, that are treated either as multisets or as sets. There are systems, however, that require more than

Γ,A ⊃ B → A; ·	Γ,A ⊃ B, B ▶ Δ ⊃l	Γ,A ▶ B	⊃r
Γ,A ⊃ B ▶ Δ	Γ → A ⊃ B;Δ 
Γ,A ∨ B, A ▶ Δ	Γ,A ∨ B, B ▶ Δ ∨l	Γ ▶ A, B, Δ	∨r
Γ,A ∨ B ▶ Δ	Γ → A ∨ B;Δ 
Γ,A ∧ B, A, B ▶ Δ ∧l	Γ → A;Δ	Γ → B;Δ ∧r

Γ,A ∧ B ▶ Δ
Γ → C;Δ 
I	D
Γ → A ∧ B;Δ 
⊥

Γ,A → A;Δ 
Γ ▶ C, Δ
Γ, ⊥ ▶ Δ	l


Fig. 7. The focused multi-conclusion system for intuitionistic logic - LJQ∗.


Fig. 8. The theory Lljq used to encode the system LJQ∗.




two contexts to be specified, such as the focused multi-conclusion system for intu- itionistic logic LJQ∗ depicted in Figure 7. This system is a variant of the system proposed by Herbelin [7, page 78] and was used by Dyckhoff & Lengrand in [5]. LJQ∗ has two types of sequents: unfocused sequents of the form Γ ▶ Δ and fo- cused sequents of the form Γ → A; Δ where the formula A, in the stoup, is focused on. Proofs are restricted as follows: the logical right introduction rules introduce
only focused sequents, while the left introduction rules introduce only unfocused sequents.
We use the theory Lljq depicted in Figure 8 to specify the system LJQ∗ in SELLF. Besides the subexponential ∞, we make use of three subexponentials: the first two, l and r, are as before, used to encode, respectively, the left and the right-hand- side of object-logic sequents, while the third subexponential, f , is new and used to
encode the stoup of object-logic focused sequents. Formally, they are specified by the signature ⟨{f , l, r, ∞}{r ≺ l ≺ ∞}; {l, r, ∞}; {l, r, ∞}⟩. Notice that, differently from the previous encoding, the subexponentials r and l are related in the pre-order and moreover contraction and weakening are not available only to f . As before, the restrictions to sequents imposed by the focusing discipline are encoded implicitly
by the use of subexponentials. One is able to correctly specify the restrictions that positive rules can only be applied to the focused formula and that negative rules can only be applied when the stoup is empty.
To illustrate the fact that negative rules are only applicable when the stoup is

empty, consider the following derivation introducing the clause (∧L):
▶ L	:	j	:	:

ljq l [Γ , A, B♩ r [Δ| f · : · ⇑ 
Il	:	:
!r , O, 2 × ?l

▶ K ⇓ [A ∧ B♩⊥	▶ Lljq l [Γj♩ : [Δ| f · : · ⇓ !r (?l[A♩ O ?l[B♩)

▶ L	:	j  :	:
⊗
⊥	r	l	l

ljq l [Γ ♩ r [Δ| f · : · ⇓ [A ∧ B♩  ⊗ ! (? [A♩ O ? [B♩)

▶ L	:	j  :	:
D∞, 2 ×∃ 

ljq l [Γ ♩ r [Δ| f · : · ⇑ 


where K is an abbreviation for the context L
: [Γj :  Δ :	: , and Γj is the set

ljq ∞
l	r  f

Γ ∪ {A ∧ B}. Since r  f , the context f must be empty in order to introduce the !r in the right branch. On the other hand, since r ≺ l, the l context is left untouched
in the premise of this derivation, thus specifying precisely the ∧L introduction rule. As expected, each clause in Lljq specifies precisely an inference rule in LJQ∗ [13]:

Proposition 3.3 Let Γ ∪ Δ ∪ {C} be a set of object logic formulas, and let the subexponentials l, r and f be speciﬁed by the signature ⟨{f , l, r, ∞}{r ≺ l ≺
:	:	:
∞}; {l, r, ∞}; {l, r, ∞}⟩. Then the sequent ▶ Lljq l [Γ♩ r [Δ| f · : · ⇑ is provable in
SELLF if and only if the sequent Γ ▶ Δ is provable in LJQ∗.
Implementation of linear logic with subexponentials
The system depicted in Figure 1 and all examples of encodings listed in this pa- per were implemented using λ-Prolog. In this scenario, focused linear logic with subexponentials is the object-level logic and a fragment of the intuitionistic logic is the meta-level logic. Most of the inference rules of Figure 1 have a straight- forward specification in λ-Prolog, differing only in the context management. The difference between aditive and multiplicative operators, and the presence of subex- ponentials are all related to context control. The source code is available at http://kontesti.me/~giselle/SELLF/.
Relating Meta-level Formulas and Object-level Rules
So far, we have shown how to use linear logic in order to encode logical systems, and how subexponentials can enhance dramatically the amount of systems that can be encoded. On the other hand, it is natural to ask whether a linear logic formula corresponds to a specification of an inference rule.
In [2], Agata et al. introduced a systematic procedure to relate large classes of linear logic formulas into equivalent structural inference rules in sequent and hypersequent calculi. In that work, the classes Ni and Pi are defined so that Ni ⊂ Ni+1, Ni ⊂ Pi+1, Pi ⊂ Pi+1, Pi ⊂ Ni+1 and Pi is built using positive connectives, while Ni is built using negative ones. Although the definition is over intuitionistic linear logic without exponentials, it is straightforward to extend these classes to the whole linear logic.

Definition 4.1 A monopole formula is a linear logic formula that contains only occurrences of the asynchronous connectives, namely O, &, ⊥, T, ∀ together with the modal ?, which can only have atomic scope. A bipolar is a formula in which no synchronous connective is in the scope of an asynchronous connective and where ? has atomic scope.
Hence monopoles are in N1 while bipolars are in P2, both with the restriction that ? must have atomic scope.
In [2] there are two main results concerning this classification: 1) every axiom in N2 is equivalent to a finite set of structural rules; 2) every axiom in P3 is equivalent to a finite set of hyperstructural rules. It turns out that, in our approach, we can completely characterize formulas in P2. In fact, since bipolars define synthetic connectives, every one of these formulas determines a sequent calculus inference rule, trivially. For example, the linear logic formula A ⊗ (B & C) determines a macro-rule:
▶ K1 : Γ1 ⇓ A	▶ K2 : Γ2 ⇑ B	▶ K2 : Γ2 ⇑ C
▶ K1 ⊗ K2 : Γ1, Γ2 ⇓ A ⊗ (B & C)
In order to relate this to object level logics, we introduce the concept of introduction clauses.
Definition 4.2 Let Q be a fixed set of unary meta-level predicates. An introduction clause is a closed formula of the form
∀x1 ... ∀xn[q(⬦(x1,..., xn))⊥ ⊗ B]
where ⬦ is an object-level connective of arity n (n ≥ 0), q ∈ Q and B is a bipolar. Furthermore, an atom occurring in B is either of the form p(xi) or p(xi(y)) where p is a meta-level predicate and 1 ≤ i ≤ n. In the first case, xi has a type of order 0 while in the second case xi has a type of order 1 and y is a variable quantified (universally or existentially) in B (in particular, y is not in {x1,..., xn}).
The next result (proved by a straightforward case analysis on the structure of bipolar formulas) states that introduction clauses naturally yield object-level inference rules.
Proposition 4.3 Every introduction clause (hence in P2) corresponds to a speciﬁ- cation of a sequent calculus introduction rule.
There are some interesting questions related to this subject. It is not clear, for example, how to use linear logic in order to model hypersequents (hence we do not know how to deal with the class P3). For the class Ni,i ≥ 3, we have the following result.
Theorem 4.4 There exist introduction clauses in Ni, i ≥ 3 which does not corre- spond to any speciﬁcation of object level inference rules.
Proof. The following proves the above theorem for n = 3 and, since Ni ⊂ Nj for
i < j, the result comes. Consider the following introduction clauses with non-bipolar


(fcL)	[fc♩⊥ ⊗T.



bodies: 5
Fig. 9. Specification of G3c.


[o(A, B, C)|⊥ ⊗ ([A| & ([B|⊗ [C|))	[o(A, B, C)♩⊥ ⊗ ([A♩⊕ ([B♩ O [C♩))

If they are to correspond to the encoding of sequent inference rules, the natural
candidates would be

Γ1, Γ2 ▶ Δ1, Δ2, A	Γ1 ▶ Δ1, B	Γ2 ▶ Δ2,C 
Γ1, Γ2 ▶ Δ1, Δ2, ⬦(A, B, C)
Γ,A ▶ Δ
Γ, ⬦(A, B, C) ▶ Δ
Γ, B,C ▶ Δ
Γ, ⬦(A, B, C) ▶ Δ

As it turns out, at the meta level the sequent
▶ (Id1)⊥ : · ⇑ [A| & ([B| ⊗ [C|), [A♩ ⊕ ([B♩ O [C♩) is provable, while at at the object level, the two sequent rules listed above cannot be used to prove ⬦(A, B, C) ▶
⬦(A, B, C). This sequent can be proved only with an immediate application of the initial axiom. Thus, the meta-level encoding of the object-level inference rules is not adequate in this non-bipolar example.	2

Invertibility of rules
Another property that has been studied in the sequent calculus setting is the invert- ibility of rules. We say that a rule is invertible if the provability of the conclusion sequent implies the provability of all the premises.
This property is very much of interest to proof search since invertible rules permute down with the other rules of a proof, reducing hence proof-search non- determinism. In particular, in systems with only invertible rules, the bottom-up search for a proof can stop as soon as a non provable sequent is reached.
For example, it is well known that all rules in G3c (see [18]) are invertible. This system is specified in Figure 9. Observe that the meta level connectives in the bodies are asynchronous. In general, the following is a straightforward result.
Theorem 4.5 A monopole introduction clause corresponds to an invertible object level rule.

Conclusions and Future Work
We have introduced the logical framework SELLF, and showed how to specify different logical systems. Also, we addressed the problem of characterizing linear

5 Note that these clauses are in N3 since they are equivalent to the formulas [o(A, B, C)| ◦− ([A| & ([B|⊗ [C|)) and [o(A, B, C)♩ ◦− ([A♩⊕ ([B♩ O [C♩)).

logic formulas as inference rules, as well as invertible rules.
There are several ways of continuing this work. In fact, in [11], a necessary condition was presented in order to guarantee that specified systems had the cut- elimination property. The result was based on the fact that cut elimination is often proved via case analysis, where the duality of inference rules play an important role in the elimination of non-atomic cuts. This is translated to the meta-level by “dual” linear logic formulas. It would be interesting to extend this result to linear logic with subexponentials, since, in most of the systems specified in this paper, the proof of cut-elimination at the meta-level is really hard.
Another direction to pursue would be the relation between multifocusing with exponentials and parallel computing. In this way, extend the concept that proof search corresponds to sequential algorithms, as stated in [13].

References
Jean-Marc Andreoli. Logic programming with focusing proofs in linear logic. J. of Logic and Computation, 2(3):297–347, 1992.
Agata Ciabattoni, Nikolaos Galatos, and Kazushige Terui. From axioms to analytic rules in nonclassical logics. In LICS’08, 2008.
Alonzo Church. A formulation of the simple theory of types. J. of Symbolic Logic, 5:56–68, 1940.
Vincent Danos, Jean-Baptiste Joinet, and Harold Schellinx. The structure of exponentials: Uncovering the dynamics of linear logic proofs. Kurt G¨odel Colloquium, 1993.
R. Dyckhoff and S. Lengrand. LJQ: a strongly focused calculus for intuitionistic logic. In CiE’06, 2006.
Gerhard Gentzen. Investigations into logical deductions. In The Collected Papers of Gerhard Gentzen, pages 68–131. North-Holland, Amsterdam, 1969.
Hugo Herbelin. S´equents qu’on calcule: de l’interpr´etation du calcul des s´equents comme calcul de lambda-termes et comme calcul de strat´egies gagnantes. PhD thesis, Universit´e Paris 7, 1995.
Chuck Liang and Dale Miller. Focusing and polarization in linear, intuitionistic, and classical logics.
Theoretical Computer Science, 410(46):4747–4768, 2009.
S. Maehara. Eine darstellung der intuitionistischen logik in der klassischen. Nagoya Mathematical Journal, pages 45–64, 1954.
Dale Miller. Forum: A multiple-conclusion specification logic. Theoretical Computer Science, 165(1):201–232, September 1996.
Dale Miller and Elaine Pimentel. Using linear logic to reason about sequent systems. In Tableaux’02. Springer, 2002.
Dale Miller and Elaine Pimentel. Linear logic as a framework for specifying sequent calculus. In Logic Colloquium ’99, 2004.
Vivek Nigam. Exploiting non-canonicity in the sequent calculus. PhD thesis, Ecole Polytechnique, September 2009.
Vivek Nigam and Dale Miller. Focusing in linear meta-logic. In IJCAR’10. Springer, 2008.
Vivek Nigam and Dale Miller. Algorithmic specifications in linear logic with subexponentials. In PPDP 09, 2009.
Elaine Gouvˆea Pimentel. L´ogica linear e a especifica¸c˜ao de sistemas computacionais. PhD thesis, Universidade Federal de Minas Gerais, Belo Horizonte, M.G., Brasil, December 2001. Written in English.
Elaine Pimentel and Dale Miller. On the specification of sequent systems. In LPAR’05, 2005.
Anne S. Troelstra and Helmut Schwichtenberg. Basic Proof Theory. Cambridge University Press, 1996.
