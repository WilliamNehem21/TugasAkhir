Available online at www.sciencedirect.com


Electronic Notes in Theoretical Computer Science 326 (2016) 51–72
www.elsevier.com/locate/entcs

Composition Colored Petri Nets for the Refinement of Reaction-based Models
Diana-Elena Gratie1 Cristian Gratie2
Computational Biomodeling Laboratory, Turku Centre for Computer Science Department of Computer Science, A˚bo Akademi University
Turku, Finland

Abstract
Model refinement is an important step in the model building process. For reaction-based models, data refinement consists in replacing one species with several of its variants in the refined model. We discuss in this paper the implementation of data refinement with Petri nets such that the size of the model (in terms of number of places and transitions) does not increase. We capture the compositional structure of species by introducing a new class of Petri nets, composition Petri nets (ComP-nets), and their colored counterpart, colored composition Petri nets (ComCP-nets). Given a reaction-based model with known compositional structure, represented as a ComP-net, we propose an algorithm for building a ComCP-net which implements the data refinement of the model and has the same network structure as the initial ComP-net.
Keywords: Composition Petri nets, composition colored Petri nets, compositional structure, reaction-based model, data refinement.


Introduction
Models represent abstractions of real systems, that capture some of the most im- portant behavioral properties of the system. A biological system can be abstracted to a set of biochemical reactions, based on a system-level understanding of the in- teractions among species. The dynamics is captured in the kinetic rate constants of the reactions. One of the heaviest computational activities for dynamical models is parameter estimation. Usually in the model building process one starts with an abstraction of the system, which is subsequently refined in a stepwise manner so as to include more details. This refinement can be done in a quantitatively correct way, ensuring that at each step the model fit is preserved. Several approaches have

1 Email: dgratie@abo.fi
2 Email: cgratie@abo.fi

http://dx.doi.org/10.1016/j.entcs.2016.09.018
1571-0661/© 2016 The Author(s). Published by Elsevier B.V.
This is an open access article under the CC BY-NC-ND license (http://creativecommons.org/licenses/by-nc-nd/4.0/).

been discussed in the literature for reusing previously computed parameters, in or- der to obtain a more detailed model while avoiding (at least initially) the parameter estimation step for all newly introduced parameters, see [9,2,7,17]. We will consider throughout this paper the concept of data refinement as defined in [5].
Colored Petri nets have been introduced as a programmable high-level class of Petri nets that combines the modeling capabilities of Petri nets with the capabilities of a programming language. They allow the use of data types and parametrization, via the use of color sets (data types) and variables, see [11]. Colors can be used to describe a system in a more compact form, e.g. by representing two identical subsystems with different actors as a single subsystem, where each element has been assigned a color set with two colors (one color for each subsystem). They can also be used to implement refinements of systems via altering the color sets, a process called type reﬁnement, see [15]. A method for implementing structural refinements of models using type refinements of colored Petri nets has been proposed in [6]. We use the framework of Petri nets for representing models, and we extend it with a passive part to encode the composition of elements acting in the modeled system. We implement structural refinements of models in our extended framework via type refinements. Our approach to refinement is thus different from the transition refinement discussed in [21] or the transition/place stepwise refinement discussed in [20].
In this paper we focus on qualitative Petri nets, as the goal is to introduce a new class of Petri nets suitable for automatable structural refinement of models. Particularities regarding the continuous and stochastic approaches are beyond the scope of this paper. We consider as a starting point the standard Petri nets, and not colored Petri nets (although a recent book on Petri nets, [18], defines markings as multisets of several types of tokens – a definition similar to that of colored Petri nets) because any colored Petri net can be unfolded to a corresponding equivalent standard Petri net.
The paper is organized as follows: in Section 2 we detail the concept of structural model refinement, as discussed in [4,5]. In Section 3 we introduce the concept of Petri nets with a compositional part, which can capture not only the functioning of a model, but also the compositional relationships between its elements. We first introduce composition Petri nets (ComP-nets), and then give a method of coloring a given ComP-net into a colored composition Petri net (ComCP-net). We discuss next in Section 4 how to implement reaction-based models as Com(C)P-nets. We detail the implementation of model refinement using ComCP-nets in Section 5, and we draw some conclusions in Section 6.

Model refinement
We give in this section a formal definition of reaction-based models with known composition of their species. We then introduce the data refinement of such models, in the spirit of [4], but with an explicit distinction between atomic and reﬁned species, as first presented in [5].

Intuitively, a reaction-based model consists of a set of reactions, usually rep- resented as rewriting rules over a given set of species. For example, consider the following chemical reaction:
2H2 + O2 → 2H2O .	(1)
We distinguish in this paper between atomic species, which – as far as the con- sidered model is concerned – cannot be divided into constituent parts, and complex species, which consist of several atomic species. We rely on multisets for encoding the linear combinations of species on either side of a reaction, as well as for denot- ing the composition of complex species. We denote multiset addition by ++, and
repetitive multiset addition by ++Σ.
Definition 2.1 [1] Let S = {s1, s2,.. .} be a set of elements. A multiset over S is a function σ : S → N, which maps each element s of S into a non-negative integer σ(s) called the multiplicity (or number of instances) of s in σ. The multiset σ can also be written as:

σ = ++Σ σ(s) ›s = σ(s ) ›s
++ σ(s2) ›s2
++ ... ,

s∈S
where the zero coefficient terms can be omitted on the right hand side.
Whenever σ(s) > 0 we say that σ contains s and we write this as s ∈ σ. Furthermore, for any two multisets σ, τ over S, we define their sum as the multiset σ ++ τ : S → N satisfying (σ ++ τ )(s)= σ(s)+ τ (s), for any s ∈ S. The set of all multisets over S will be denoted by SMS.
We now go back to our example reaction (1) and formalize it as a reaction- based model with known composition of its species. We consider that the atomic species are the hydrogen and oxygen atoms and write this as Γ = {H, O}. The complex species are the hydrogen, oxygen and water molecules and are encoded as multisets over Γ to yield the set of complex species Δ = {2 ›H, 2 ›O, 2 ›H ++ 1 ›O}. The given reaction then becomes a pair of multisets corresponding to the respective stoichiometric coefficients:
2 ›(2 ›H) ++1 ›(2 ›O) → 2 ›(2 ›H ++ 1 ›O) .	(2)
Note that atomicity is relative to the considered model, more precisely it depends on the chosen level of detail. For example, in a larger model where the focus is on macromolecules rather than atoms, the complex species from the previous reaction might be considered to be atomic.
We formalize in the following definition the intuition presented above for reaction- based models.
Definition 2.2 A reaction-based model with known composition of its species is a tuple M = (Γ, Δ, R), where:
Γ is a set of atomic species.

Δ ⊆ ΓMS is a set of complex species, defined as multisets over the set of atomic species Γ, where the intuition is that any complex species σ ∈ Δ contains at least two instances of atomic species, i.e.  A∈Γ σ(A) ≥ 2.
R ⊆ (Γ ∪ Δ)MS × (Γ ∪ Δ)MS is a set of reactions written as α → β or, alterna- tively, (α, β), where α, β ∈ (Γ ∪ Δ)MS are multisets encoding the stoichiometric coefficients corresponding to the left- and right-hand sides of the reaction, respec- tively.
The goal of refinement is to introduce details into the model, in the form of distinguishing several subspecies or variants of a given species. The distinction between the subspecies is very often drawn by post-translational modifications such as acetylation, phosphorylation, etc., by cell differentiation, but it could also account for different possible types of a particular trait (e.g. fur color of animals in a breeding experiment). This type of refinement is called data reﬁnement, because it focuses on refining the species (data) of the model.
Definition 2.3 Let Γ and Γj be two sets of atomic species. A function ρ :Γ → 2Γ′ is called an atomic reﬁnement function if the following conditions hold:
ρ(A) /= ∅, for all A ∈ Γ;
ρ(A1) ∩ ρ(A2)= ∅, for all A1, A2 ∈ Γ with A1 /= A2;
A∈Γ ρ(A)= Γj.
A species Aj is called an atomic ρ-reﬁnement of species A if Aj ∈ ρ(A).
Note that the definition of atomic refinement is equivalent to the definition given in [4] for the species refinement relation, with the distinction that ρ is a function rather than a relation. Moreover, in this paper we also consider the composition of species and, in this context, the atomic refinement will propagate throughout the model and induce the refinement of all complex species and, subsequently, the refinement of reactions, following a similar intuition to that presented in [4]. Note that in this paper we prefer a formulation based on multisets rather than vectors, since the former are more common in the literature of Petri nets.
Definition 2.4 Let Γ and Γj be two sets of atomic species and ρ : Γ → 2Γ′ an atomic refinement function.
A complex species σj ∈ Γj	is a ρ-reﬁnement of a complex species σ ∈ ΓMS,
written as σj ∈ ρ(σ), if the multiplicity of any species A ∈ Γ in σ equals the sum of the multiplicities of all its ρ-refinements Aj ∈ ρ(A) in σj, i.e.

ρ(σ)=  σj ∈ Γj

|
A′∈ρ(A)
σj(Aj)= σ(A), for all A ∈ Γ  .

Given a set of complex species Δ ⊆ ΓMS, we will use ρ(Δ) to refer to the set of all ρ-refinements of complex species from Δ, i.e. ρ(Δ) =	σ∈Δ ρ(σ).
Let Δ ⊆ ΓMS be a set of complex species. A multiset of species αj ∈ (Γj ∪
ρ(Δ))MS is a ρ-refinement of a multiset α ∈ (Γ ∪ Δ)MS, written as αj ∈ ρ(α),

if the multiplicity of any species S ∈ Γ ∪ Δ in α is equal to the sum of the multiplicities of all its ρ-refinements Sj ∈ ρ(S) in αj, i.e.


ρ(α)=  αj ∈ (Γj ∪ ρ(Δ))MS |
S′∈ρ(S)

αj(Sj)= α(S), for all S ∈ Γ ∪ Δ  .


A reaction αj → βj is a ρ-refinement of a reaction α → β if αj ∈ ρ(α) and
βj ∈ ρ(β), i.e.
ρ((α, β)) = ρ(α) × ρ(β) .
Let M = (Γ, Δ, R) and Mj = (Γj, Δj, Rj) be two reaction-based models with known composition of their species and ρ : Γ → 2Γ′ an atomic refinement function. We say that Mj is a structural ρ-reﬁnement of M if Δj = ρ(Δ) and Rj ⊆ r∈R ρ(r). If we have equality in the latter relation, we say that Mj is the full structural ρ-reﬁnement of M .
While the definition of atomic refinement seems to imply that all atomic species are to be refined, the refinement of an atomic species A is nontrivial only as long as |ρ(A)| ≥ 2, i.e. A has at least two distinct variants in the refined model. In this context, whenever |ρ(A)| = 1 we will say that A undergoes a trivial atomic refinement (which translates to a renaming of A in the refined model).

Petri Nets with a Compositional Part
In this section we introduce a new class of Petri nets, composition Petri nets. Such nets have two parts: an active part, that behaves as a standard Petri net, and a passive part, with transitions whose role is to describe how places in the network relate to one another, i.e. how elements in some places are composed of elements in other places.
We assume the reader is familiar with the concept of Petri nets, but we recall some of the definitions and notations to make the paper self-contained. For an introduction, we refer to [19]; for more recent definitions, concepts, extensions and applications to biology we refer to [18,3,13,14].
Definition 3.1 [11] A Petri net is a tuple N = (P, T, A, E, I) where P and T are disjoint sets of places and transitions, respectively; A ⊆ P × T ∪ T × P is the set of arcs; E : A → N+ is an arc expression function (also called weight function); and I : P → N is an initialization function, assigning to each place a nonegative integer that represents the number of tokens in that place.
For a transition t, the set of its pre-places (places p such that there exists an arc from p to t) is denoted by •t; the set of its post-places (places p such that there exists an arc from t to p) is denoted by t•. An arc from a place p to a transition t is denoted by a pair (p, t) ∈ A, and an arc from a transition t to a place p is denoted by the pair (t, p) ∈ A.

Composition Petri nets (ComP-nets)
In this subsection we extend the definition of standard Petri nets with a composi- tional part. We do this by adding a set of non-ﬁreable composition transitions and arcs connecting them with the places of the network. Their combined semantics represents the structural composition of the elements represented as places. Thus, a Petri net model describing the dynamics of a system can also include as a subnet- work the composition of the systems’ entities (species). This is introduced formally in the following definition.
Definition 3.2 A composition Petri net (ComP-net) is a tuple N = (P, Tc, T, Ac, A, E,I) with the following components:
P, T, A, I represent the set of places, set of transitions, set of arcs and the initialization function of places, respectively, as for standard Petri nets.
Tc is a finite set of composition transitions such that P ∩Tc = ∅ and T ∩Tc = ∅. These transitions are used for depicting the compositional structure of places with respect to other places. Composition transitions never fire, irrespective of the marking of the network, and are also called passive (non-active) transitions. The regular transitions are, in contrast, called active.
Ac ⊆ P × Tc ∪ Tc × P is a set of composition arcs such that:
for any place p ∈ P , there is at most one incoming composition arc; if there is no composition arc pointing to a place, then that place is considered atomic;
for every composition transition tc ∈ Tc there is at least one incoming com- position arc connecting a place to it, and exactly one outgoing composition arc connecting tc to a place;
the graph induced by the composition arcs and the places and transitions they connect is acyclic.
E : A ∪ Ac → N+ is an arc expression function, such that:
the arc expression of a composition arc (tc, p) (where tc ∈ Tc and p ∈ P ) is always 1;
the arc expression of a composition arc from a place p ∈ •tc to a composition transition tc has the meaning that the post-place of tc contains E((p, tc)) copies of p;
the arc expression of regular arcs has the usual meaning.
We say that (P, Tc, Ac, E|Ac )) is the compositional part of the network, and (P, T, A, E|A, I) is the active part of the network. Here, for a given set S, E|S denotes the restriction of the arc expression function E to arcs in S.
For a ComP-net, the properties of standard Petri nets (e.g. boundedness, live- ness, deadlock, conflict, invariants, reachability graph) can be generalized, and they will refer only to the active part of the network.
The advantage of ComP-nets is that they can explicitly represent both the dy- namics of a system and the composition relationships between its elements (places). Note that there may exist pairs of transitions (tc, t) where tc ∈ Tc and t ∈ T such

that •tc = •t and t• = t•, i.e. t and tc have the same pre-places and the same post- places. This can happen because the semantics of such transitions are different. Note also that a ComP-net may contain places that do not take part in any active transition, but which are still compositionally important, and thus must appear in the place set for the compositional structure. Moreover, the fact that a place can have at most one incoming composition arc means that its compositional structure (if any) is unique.
Example 3.3 Consider a model M consisting of atomic species Γ = {A, B, C, D}, complex species Δ = {P, Q, R, S}, and a single reversible reaction P + Q « R + S. Assume that the composition of the complex species is given by:

P = 1 ›A ++ 1 ›B , 
Q = 1 ›C ++ 1 ›D , 
R = 1 ›A ++ 1 ›D , 
S = 1 ›B ++ 1 ›C . 


This model can be represented as a Petri net as shown in Figure 1a, where the atomic species are isolated places. The same model can be represented as a ComP-net, as shown in Figure 1b. From the figure it becomes clear what is the composition of species P, Q, R, S, namely that they are complexes A:B, C:D, A:D, and B:C, respectively. Moreover, from the network structure the reader can get an intuition on how atomic species are interchanged between complex species via active transitions (e.g. one molecule of A from P and one molecule of D from Q bind to form one R).




Pl

A’	B’	C’	D’
P’



Q’

Ql
(a)	(b)
Fig. 1. The representation of a reversible reaction P + Q « R + S as: a) a standard Petri net; b) a ComP-net. Circles represent places; solid squares represent active transitions; dashed squares represent passive transitions; solid arrows represent arcs; dashed arrows are arcs connected at one end to a passive transition. Figure generated using Snoopy [8].

Composition Colored Petri nets (ComCP-nets)
Sometimes, due to the complexity of a network, it becomes unfeasible or very dif- ficult to read the corresponding Petri net. In such cases, an extension of standard Petri nets, colored Petri nets, might help reduce the size of the model. A complete description of colored Petri nets, their properties and applications can be found in [11,12,13]. Here, we consider the definitions in [13]. We extend colored Petri nets to include a compositional part, in a similar manner as we extended standard Petri nets in the previous subsection.
Notations. We use |S| to denote the cardinality of a set or multiset S. For an arc expression, |E(a)| denotes the cardinality of the expression. i ›S where i is a nonnegative integer denotes i copies of S, where S can be a species, a color or a color set. If S is a color set, then i ›S is the set of all possible ways of choosing i (not necessarily distinct) colors from the color set S, see Table 1 for an example. In the definition of colored Petri nets, the following standard notations are used: EXPRV denotes the set of valid (under the used inscription language) expressions using variables from the typed variable set V ; Type[e] denotes the type of an expression e ∈ EXPR, or that of a variable e. We recall further some notions and notations we will use in this paper. The variables of a transition t are the set of free variables that appear in t’s guard and in the arc expressions of arcs connected to t. This set is denoted by V ar(t) ⊆ V [13]. A binding of a transition t is a function b mapping each variable v ∈ V ar(t) into a value b(v) ∈ Type[v]. B(t) denotes the set of all bindings for transition t [13]. A pair (t, b) with t ∈ T and b ∈ B(t) is called a binding element in [13], and a transition instance in [16]. We use here the terminology from
[16]: t(b) denotes the instance of transition t with binding b; IT (t) denotes the
set of all transition instances of transition t, and IT =  IT (t) denotes the set
t∈T
of all transition instances for all transitions in T . A place instance is a pair (p, c) with p ∈ P and c ∈ C(p); IP (p) denotes the set of all place instances of p, and

IP =
p∈P
IP (p) denotes all place instances of all places in P [16].


Definition 3.4 [13] A colored Petri Net (CP-net) is a tuple N = (P, T, A, Σ, V, C, G, E, I) satisfying the requirements below:
P is a finite set of places.
T is a finite set of transitions such that P ∩ T = ∅.
A ⊆ P × T ∪ T × P is a finite set of arcs.
Σ is a finite set of non-empty types, called color sets.
V is a finite set of typed variables, where Type[v] ∈ Σ, for all v in V .
C : P → Σ is a color set function. It assigns a color set to each place.
G is a guard function that defines conditions for transitions. It is defined from T into expressions over the variables set V , i.e. EXPRV , such that Type[G(t)] = Bool, for all transitions t in T .

E : A → EXPRV is an arc expression function such that Type[E(a)] = C(p(a))MS, for all arcs a ∈ A, where p(a) is the place corresponding to arc a, and C(p(a))MS is a multiset of elements with color set C(p(a)).
I is an initialization function that assigns to each place p an initialization expression such that Type[I(p)] = C(p)MS.
We want to use ComCP-nets as a means to easily model and implement the structural refinement of a system, as described in Section 2. For this, the key ingredient is the choice of color sets, especially for the complex places. The color sets should reflect the composition of places and, moreover, do it in such a way that the process of assigning color sets to complex places can be done automatically. Thus, for atomic places we propose the use of simple color sets, e.g. int or Enumeration. For complex places, the corresponding color set contains all possible multisets over the color sets of its constituent atomic places, with multiplicities dictated by the actual composition of the place. We provide in what follows a coloring example using this strategy.
Example 3.5 Let P be a molecule with two possible states, and let P2 and P3 denote its dimer and trimer, respectively. We will use P , P2 and P3 to denote both the actual molecules and the places representing them in a Petri net. We list in Table 1 a possible definition of color sets for the three entities.

Table 1
Coloring strategy for the dimer and trimer of a molecule


Definition 3.6 A composition colored Petri net (ComCP-net) is a tuple N = (P, Tc,T, Ac, A, Σ, V, C, G, E,I) that satisfies the following requirements:
P , Tc, T , Ac, A satisfy the constraints of Definition 3.2.
Σ, V , I have the usual meaning, namely the set of color sets, the set of variables, and the initialization function, respectively.
C : P → Σ is the color function assigning color sets to places such that:
all atomic places have disjoint color sets, and
for all complex places p ∈ P , C(p) = ++Σ ′ •  |E(pj, tc)| ›C(pj), where tc
p ∈ tc
stands for the composition transition encoding the composition of p, i.e.
t• = {p}, ; 
G : Tc ∪ T → EXPRV is the guard function, such that for each composition transition tc ∈ Tc with t• = {p} there exists exactly one binding for which the guard is true for each color in C(p).

E : A∪Ac → EXPRV is the arc expression function, defined such that for every
composition transition tc ∈ Tc with t• = {p}: E(tc, p)= ++Σ ′ •  E(pj, tc).
We say that (P, Tc, Ac, Σ, V, C, G|Tc , E|Ac )) is the compositional part of the network, and (P, T, A, Σ, V, C, G|T , E|A,I) is the active part of the network.
For a ComCP-net, the properties of colored Petri nets (e.g. boundedness, live- ness, deadlock, conflict, invariants, reachability graph) can be generalized, and they will refer only to the active part of the network. We extend the notion of transition instance (binding element) to cover the composition and the active transitions of a ComCP-net respectively. We denote by IT the set of active transition instances,
i.e. pairs (active transition, binding of variables): IT = {(t, b) | t ∈ T, b ∈ B(t)} where B(t) is the set of all possible bindings for a transition t. We use IT ⟨true⟩ to denote the set of active transition instances whose guard evaluates to true: IT ⟨true⟩ = {(t, b) ∈ IT ′ | G(t)⟨b⟩ = true}. Similarly, we use ITc and ITc ⟨true⟩ for the composition transition counterparts of these sets.
Example 3.7 Let us consider the example net in Figure 2a. This is not a ComCP- net because of several violations of the ComCP-net definition. The network suggests that E, S, P are atomic places, and ES is a complex place. But the atomic places E and S have the same color set, while the definition requires that atomic places are assigned disjoint color sets (to allow for the identification of colors that come from different places in the color of a complex place). Moreover, the color set of ES is independent of the color sets of E and S, which compose it, and the arc expressions of the composition arcs do not capture any kind of composition.

Implementing models as composition (colored) Petri nets
In this section we introduce a way of modeling with composition (colored) Petri nets. We consider as input models of the form M = (Γ, Δ, R) as discussed in Section 2. Every species in M is represented by a place, and each reaction is represented by a transition. The compositional structure of each complex species is represented as the compositional part of the composition Petri net model. We give examples for both ComP-nets and ComCP-nets.
Implementing models as ComP-nets
Definition 4.1 Let M = (Γ, Δ, R) be a reaction-based model with known compo- sition of its species. We say that a ComP-net N = (P, Tc,T, Ac, A, E,I) structurally implements the reaction-based model M if there are a bijection fP : P → Γ ∪ Δ between places in P and species in Γ ∪ Δ, a bijection fT : T → R between transi- tions in T and reactions in R, and a bijection between composition transitions and complex species fc : Tc → Δ such that:
for every place p ∈ P and every composition transition t ∈ Tc the following conditions regarding the composition transitions hold:



Example net that is not a ComCP-net.

Example ComCP-net.
Fig. 2. Example of (a) an ill-defined and (b) a properly defined ComCP-net. Circles represent places; solid squares represent active transitions; dashed squares represent passive transitions; solid arrows represent arcs; dashed arrows are composition arcs. The text on top of arcs is the arc expression. Places are labeled with a name and their corresponding color set, and the color set definition is given in the inset. Arc expressions in (a) are values, and in (b) are typed variables with the type given by the color set of the place connected
to the arc. Figure generated using Snoopy [8].


(p, t) ∈ Ac ⇔ fc(t)(fP (p)) ≥ 1 and, moreover, E(p, t)= fc(t)(fP (p)) ,
(t, p) ∈ Ac ⇔ fc(t)= fP (p) and, moreover, E(t, p)=1 ;
for every place p ∈ P and every transition t ∈ T with fT (t) = α → β the following conditions hold:
(p, t) ∈ A ⇔ α(fP (p)) ≥ 1 and, moreover, E(p, t)= α(fP (p)) ,
(t, p) ∈ A ⇔ β(fP (p)) ≥ 1 and, moreover, E(t, p)= β(fP (p)) .
We call the ComP-net N the (fP , fT , fc)-implementation of model M .

Example 4.2 The ComP-net N represented in Figure 1b is an implementation of the model M = {{A, B, C, D}, {P, Q, R, S}, {P + Q « R + S}} presented in Example 3.3. There exist bijections fP , fT and fc that satisfy the conditions in Definition 4.1. We provide the definitions of these functions in what follows. The place to species function fP is defined as fP (Xj) = X, where Xj is a place of N and X is the species with the same name that it represents, i.e. place Aj represents species A of model M and so on. The composition transition to complex species function is defined as fc(t1)= P , fc(t2)= R, fc(t3)= S, fc(t4)= Q. It is easy to notice that the requirements for fc are fulfilled. The transition to reaction function is defined as fT (t5) = P + Q → R + S, fT (t6) = R + S → P + Q. Again, the conditions on existence of arcs and their expressions are fulfilled.

Implementing models as ComCP-nets
In the colored setting, there are several aspects that one has to be very careful about. For example, consider a reaction that uses multiple instances of some species, e.g. 2A + B → C. If the color set of the place representing A contains more than one color, then the arc expression of the arc connecting the place that denotes A with the transition that encodes the mentioned reaction should contain variables. Moreover, the transition should have a guard so that it would not allow for two bindings that evaluate to the same multiset of colors. This can easily be implemented by considering an ordering of the elements of each color set, and a guard that tests that the values that the variables on adjacent arcs evaluate to are ordered, with a non-strict ordering. So the guards should be of the form [!(vi < vj)], ∀i > j, or equivalently (vi ≥ vj), for all i, j such that i > j.
Definition 4.3 Let M = (Γ, Δ, R) be a reaction-based model with known com- position of its species. We say that a ComCP-net N = (P, Tc,T, Ac, A, Σ, V, C, G, E, I) structurally implements the reaction-based model M if there are a bijection fP : IP → Γ ∪ Δ mapping place instances (p, c) ∈ IP to species in Γ ∪ Δ, a bijection fT : IT ⟨true⟩ → R mapping active transition instances to reactions in R, and a bijection fc : ITc ⟨true⟩ → Δ mapping composition transition instances to complex species such that:
for every composition transition instance (tc, b) ∈ ITc ⟨true⟩ and every place instance (p, c) ∈ IP such that c appears in the binding b the following conditions hold:
(p, tc) ∈ Ac ⇔ fc(tc, b)(fP (p, c)) ≥ 1 and, moreover, the corresponding arc expression satisfies E(p, tc)⟨b⟩(c)= fc(tc, b)(fP (p, c));
(tc, p) ∈ Ac ⇔ fc(tc, b)= fP (p, c) and, moreover, E(tc, p)⟨b⟩ = 1 ›c ;
for every active transition instance (t, b) ∈ IT ⟨true⟩ with fT (t, b) = α → β and every place instance (p, c) ∈ IP such that c appears in the binding b the following conditions hold:
(p, t) ∈ A ⇔ α(fP (p, c)) ≥ 1 and, moreover, E(p, t)⟨b⟩(c)= α(fP (p, c));
(t, p) ∈ A ⇔ β(fP (p, c)) ≥ 1 and, moreover, E(t, p)⟨b⟩(c)= α(fP (p, c)).
We call the ComCP-net N the (fP , fT , fc)-implementation of model M .
Note that there are multiple ways of representing a model M as a ComCP-net, depending on the color sets one chooses, and on the bijections fP , fT and fc. Note also that, because of the bijectivity of the functions characterizing the model imple- mentation, for every active transition it holds that each of its instances with true guards stands for a reaction in the model; moreover, a place can encode more than one species if and only if all species that it encodes take part in similar reactions, in all possible combinations. One could also formulate the previous definition to say that a ComCP-net implements a model if its unfolding implements that model.
Example 4.4 Consider a model M = (Γ, Δ, R) with Γ = {E, S, P}, Δ = {ES}

such that ES = 1 ›E ++ 1 ›S, and R containing the reactions:
r1 : E + S → ES; r2 : ES → E + S; r3 : ES → E + P.
M is a model for an enzymatic reaction, and we show next that the ComCP-net N
represented in Figure 2b implements it. The place instances of N are
IP = {(E, e), (S, dot), (P, prot), (ES, 1 ›e ++ 1 ›dot)}.
The possible active transition instances are:
IT ={(t1, ⟨v1 = dot, v2 = e, v3 = 1 ›e ++ 1 ›dot⟩), (t2, ⟨v4 = 1 ›e ++ 1 ›dot, v5 = dot, v6 = e⟩), (t3, ⟨v7 = 1 ›e ++ 1 ›dot, v8 = e, v9 = prot⟩)}.
The only passive transition instance is ITc = {(tc, ⟨u1 = dot, u2 = e⟩)}.
There exist bijections fP , fT and fc that satisfy the conditions in Definition 4.3.
We detail here the definition of these functions.
The place to species function fP is defined as fP (X, col(X)) = X, where X is a place of N , col(X) is its color (note that every color set has only one color), and X is the species with the same name that it represents.
The composition transition to complex species function is defined as
fc(tc, ⟨u1 = dot, u2 = e⟩)= ES.
It is easy to notice that the requirements for fc are fulfilled.
The transition to reaction function is defined as:
fT (t1, ⟨v1 = dot, v2 = e, v3 = 1 ›e ++ 1 ›dot⟩)= r1; fT (t2, ⟨v4 = 1 ›dot ++ 1 ›e, v5 = dot, v6 = e⟩)= r2; fT (t3, ⟨v7 = 1 ›dot ++ 1 ›e, v8 = e, v9 = prot⟩)= r3.
Again, the conditions on existence of arcs and their expressions are fulfilled.
Example 4.5 Consider a model M consisting of atomic species Γ = {A, B}, com- plex species Δ = {C, D, E}, with
C = 2 ›A;
D = 1 ›A ++ 1 ›B;
E = 2 ›B.
and the set of reactions R = {2A → C, A + B → D, 2B → E, C + E → 2D}. This model can be implemented with the ComCP-net from Figure 3.


CS A
A
2`a 2`a

1`a 1`a 1`b


CS B
B
1`b
2`b  2`b 

Fig. 3. The representation of an example model as a ComCP-net. The model consists of reactions
{2A → C, A + B → D, 2B → E, C + E → 2D}. Circles represent places; solid squares represent ac- tive transitions; dashed squares represent passive transitions; solid arrows represent arcs; dashed arrows are arcs connected at one end to a passive transition. The name of the color set of a place is the italic text next to a place. The text on top of arcs is the arc expression. All color sets have only one color, which appears on the arc expressions. Figure generated using Snoopy [8].
From ComP-nets to ComCP-nets
In the following we give an algorithm for coloring a ComP-net to get a corresponding ComCP-net, Algorithm 1. We call the resulting ComCP-net the natural coloring of the given ComP-net. The ComCP-net in Figure 2b is an example of a natu- ral coloring. Every place corresponding to an atomic species gets as color set an enumeration color set with only one element, and every place corresponding to a complex species gets as color set the set of possible multiset of all its compositional constituents’ colors, each as many times as dictated by compositional arcs. The arc expressions in the built ComCP-net use a variable for each token traversing the arc, so that we don’t restrict the natural coloring. All guards are set to true, as all color sets have exactly one color and thus there cannot exist several bindings that evaluate to the same multiset of colored tokens.




Algorithm 1 ComP to ComCP
Input: a ComP-net N = (P, Tc,T, Ac, A, E,I);
Output: a ComCP-net Nj = (P, Tc,T, Ac, A, Σ, V, C, G, Ej,Ij);
1: procedure Assign CS(p)	d assign the color set of place p
2:	Tp → •p ∩ Tc;
3:	if Tp = ∅ then	d p is an atomic place
4:	C(p) → new distinct color set with one element;
5:	return
6:	end if
7:	tc →the one value in Tp;
8:	for all q ∈ •tc do
9:	if C(q) =NIL then Assign CS(q);
10:	end if
11:	end for

12:	CSp → ++
q∈•tc
13:	Σ → Σ ∪ CSp;
14:	C(p) → CSp;
15: end procedure
16:
17: Σ → ∅;
18: V → ∅;
19:
20: for all p ∈ P do
21:	C(p) →NIL;
22: end for
E(q, tc)`C(q);

23: for all p ∈ P do	d assign color sets

24:
Assign CS(p);

25: end for
26:
27: for all a ∈ A ∪ Ac do	d assign arc expressions
28:	p → the place connected with arc a;
29:	V j → ∅	d V j stores the variables used in the arc expression of a
30:	for all i → 1 to E(a) do
31:	create a variable va,i : C(p);
32:	V j → V j ∪ {va,i};
33:	end for

34:	Ej(a) → ++
35:	V → V ∪ V j;
36: end for
v∈V
′ v;





Algorithm 1 (continued) ComP to ComCP
37: for all t ∈ Tc ∪ T do	d transition guards are all set to true
38:   G(t) → true;
39: end for
40:
41: for all p ∈ P do		d assign initial markings 42:  Ij(p) → I(p)`C(p)[0];	d the one color in the color set C(p) 43: end for
44:
45: Nj = (P, Tc,T, Ac, A, Σ, V, C, G, Ej,Ij);
return Nj;
There are of course multiple ways of coloring the given network N . We chose here different color sets for each atomic element, so that each such element can be identified by its color set. Furthermore, we chose a representation of complex elements based on multisets, as this allows for the implementation of the refinement of a network without changing the structure of the network’s implementation.
In the algorithm we assume that the network is well-defined and composition places are post-places of exactly one composition transition. The sets of places, composition transitions, transitions, composition arcs and arcs are the same in the initial and final networks.
The set of color sets contains, for places with no incoming composition arc, a color set with one color, and for places p with an incoming composition arc (tc, p), a color set that is the set of all multisets of colors from the color sets of the pre-places of tc, as many times as the value of the arc expression of the arc from the pre-place to tc.
Arc expressions use a distinct variable for each colored token. We do this in order to not restrict the natural coloring, and allow for further extensions of it.
Transition guards are all set to true; no ordering is needed because each color set has only one element.
It is not difficult to see that, if the input of the algorithm is a ComP-net that is a (fP , fT , fc)-implementation of a reaction network M = (Γ, Δ, R), then the output is a ComCP-net that structurally implements M .
Implementing Data Refinement with ComCP-nets
Colored Petri nets can be used to implement refinements of a model in a compact way, as discussed in [15,5,6]. We present here an algorithmic method for imple- menting the structural refinement of a model using its ComCP-net representation. Our approach differs from that of [6] via the automatic propagation of refinement from one atomic place to all places connected to it by compositional transitions. We consider the type reﬁnement of colored Petri nets, namely a refinement of the color sets of some of the places in the network, see [15]. A morphism between two colored Petri nets captures a type refinement if it induces no change in the structure

of the network, and the colors in the resulting network are consistently subtyped. Namely, the refinement adds details to the color sets, such that the resulting color sets can be projected onto the initial color sets.
Definition 5.1 We say that a ComCP-net CPj is a type reﬁnement of a ComCP- net CP if the compositional parts of the two networks are isomorphic and there exists a type refinement morphism between their active parts.
For a given model M = (Γ, Δ, R) represented as a ComCP-net N = (P, Tc,T , Ac, A, Σ, V, C, G, E,I) using the natural coloring, assume that one of the atomic species, S ∈ Γ, is to be refined (i.e. replaced throughout the model with several of its variants). Let γ be the number of such variants that S can be replaced with. We build a ComCP-net Nj = (P, Tc,T, Ac, A, Σj, V, Cj, Gj, Ej,Ij) to be the type (color) reﬁnement of N . The sequence of steps required to implement the refinement is presented in Algorithm 2 and briefly explained here.
Reflecting the change for place q in the ComCP-net Nj is done by adding more colors to the color set of q. This can be done by either adding an attribute with γ possible values, or by altering the enumeration color set such that instead of one element it has γ elements (colors). From the definition of the ComCP-net N as the natural coloring of the model M it follows that all color sets of places corresponding to complex species containing the refined species will automatically reflect the refinement (as they contain the refined color set C(q)). For species that are not refined, the corresponding places get as initial marking Ij(p)= I(p). For the refined species, there are multiple ways of choosing the initial marking for each of the newly introduced subspecies. The condition they must obey is |Ij(p)| = |I(p)|. The chosen method of implementing the refinement conserves the structure of the network and is thus the most compact with respect to the initial network. Moreover, based on the compositional part of the network, a simulation software that would support composition Petri nets could automatically generate the color sets for complex species based on the color sets of atomic species that are input by
the modeler. This would give a significant speedup in the refinement process.
For the construction detailed above, the size of the model is the same as that of the initial model in terms of number of places and transitions. However, the increase in model size is encapsulated in the number of colors used in each color set, and the possible binding elements for each transition.
Theorem 5.2 Let M = (Γ, Δ, R) and Mj = (Γj, Δj, Rj) be two reaction-based mod- els with known composition of their species, and ρ :Γ → 2Γ′ an atomic reﬁnement function, such that Mj is the full ρ-reﬁnement of M. Let N = (P, Tc,T, Ac, A, Σ, V, C, G, E, I) be a naturally colored ComCP-net that is a (fP , fT , fc)-implementation of M (e.g. the natural coloring of a ComP net that implements M). Then the ComCP-net Nj = (P j,Tj,Tj, Aj , Aj, Σj, V j, Cj, Gj, Ej,Ij), obtained by repeatedly
c	c
running Algorithm 2 to compute a color reﬁnement of each atomic place, struc-
turally implements the reﬁned model Mj.
Proof. We only consider the refinement of a single atomic species and prove the

claim of the theorem for this case. The result can then be easily extended for the repeated application of Algorithm 2. Let A ∈ Γ be the atomic species that is refined, γ the number of variants it is refined to, and let pA denote the place that stands for A in N .
The ComCP-net N has exactly one place for each species from model M . The set of places is the same for Nj, but the place instances mirror the refined model Mj as follows: for each atomic place p ∈ P except for pA, there is only one place instance, (p, C(p)); for pA there are γ instances, one for each color in the refined color set. The places corresponding to complex species have as color sets a multiset containing the color sets of the constituent places and are thus automatically updated to reflect the refinement of pA. Each place instance will thus correspond to a refined complex species in Mj.
The set of arcs is the same in the two networks, and the set of arc expressions differs only in the typing of variables.
Each active transition that is not connected to pA or to a place that is connected to pA via a composition transition has its guard set to true, and only one possible binding. Such transitions correspond to those reactions that refine to a singleton set in Mj. Transitions connected to pA or to a place that is connected to pA via a composition transition have a guard that allows exactly one binding for each possible multiset of tokens. A binding (t, b) of such a transition will thus encode precisely the refinements ρ(fT (t, b)) of fT (t, b).
2
Example 5.3 For the Example 4.4, let us consider a refinement where the enzyme E can be in two different conformations, E1 and E2, both of which can catalyze the production of P . Moreover, consider that the environment can induce the transformation of one conformation into the other, but this is not explicitly modeled in the system. In order to reflect this change, the complex species ES refines to

Algorithm 2 ComCP refinement

Input: a naturally colored ComCP-net N = (P, Tc,T, Ac, A, Σ, V, C, G, E,I); an atomic place q ∈ P to be refined, and γ, the number of colors that q’s color set refines to.
Output: the corresponding color refinement ComCP-net Nj = (P, Tc,T, Ac, A, Σj, V j, Cj, Gj, Ej,Ij);
1: Cj → C;		d start with the color function of N 2: Σj → Σ \ {C(q)};	d color sets from N , except the color set of place q 3: CS → enumeration with γ elements;
4: Cj(q) → CS;	d modify the color set of the place to be refined
5: Σj → Σj ∪ {CS};	d add q’s new color set to the set of color sets
6:
7: Ej → E;
8: for all {a ∈ A ∪ Ac | a = (q, t) OR a = (t, q)} do
9:   Va → all variables appearing in E(a);




Algorithm 2 (continued) ComCP refinement
10:	V j → V j \ Va;
11:	V j → ∅;
12:	for all va,i ∈ Va do	d re-type the variables of arcs connected to q
13:	define vj	: Cj(q);
14:	V j → V j ∪ {vj };

a	a
15:	end for
16:	Ej(a) → ++
17:	V j → V j ∪ V j;
a,i

v∈V ′ v;

18: end for
19:
20: Pq → {q};	d set of places affected by the color refinement
21: for all t ∈ Tc do
22:	if (q, t) ∈ Ac then 23:		Pq = Pq ∪ t•; 24:	end if
25: end for
26:
27: for all t ∈ T ∪ Tc do	d change guards where needed
28:	for all p ∈ t• ∪ •t do
29:	if p ∈ Pq then
30:		G(t) → new guard such that no two bindings evaluate to the same multiset of tokens;
31:	break;
32:	end if
33:	end for
34: end for
35: for all p ∈ P do	d change the initial marking for places affected by the color refinement
36:	if p ∈ Pq then
37:	Ij(p) →assign initial marking;
38:	else
39:	Ij(p) → I(p);
40:	end if
41: end for
42:
43: Nj = (P, Tc,T, Ac, A, Σj, V j, Cj, Gj, Ej,Ij);
return Nj;

E1S = 1 ›E1 ++ 1 ›S and E2S = 1 ›E2 ++ 1 ›S. The new set of reactions is listed in Table 2. In order to implement the refinement for the ComCP-net in Figure 2b, we only change the color set of place E to be Enzyme = enum e1, e2. The mapping from place instances to species is straightforward, and the mapping from transition instances to reactions is captured in Table 2.


Table 2
Full structural refinement of an enzymatic model to consider two variants of an enzyme.

If a refinement where transitions from one conformation of the enzyme to the other is preferred to the full structural refinement (e.g. E1 + S → E2S is not a valid reaction), the ComCP-net can be further restricted with guards by not allowing certain bindings (e.g. [!(v1 = dot & v2 = e1 & v3 = 1 ›e1 ++ 1 ›dot)]).

Conclusions
We introduced in this paper a new class of Petri nets that has capabilities for fast model refinement, when the compositional structure of the elements is known. Such Petri nets have a passive compositional part and an active part. The passive part encodes the compositional structure of the elements (species, encoded as places in the network), and all transitions in this part never fire. The active part encodes the behavior of the model.
Model refinement in some formalisms (e.g. ODE models) requires explicitly writing all possible combinations of reactions induced by replacing some species with several of their variants. With colored Petri nets, this can be done without changing the structure of the network. Internally, all these combinations are generated when binding the variables on arcs to values. Moreover, considering the compositional structure of species and choosing the colors in the manner we propose means that all species containing some atomic species that needs to be refined are automatically refined at once.
There exist also modeling frameworks that allow for a compact characterization

of models and are good at handling model explosion upon refinement of a model. For example the Kappa language, see [2,7,17], allows compactness via explicitly mentioning an attribute only when its value is important, and omitting it whenever the actual value is not important, with the understanding that a reaction happens regardless of the value of that particular attribute. Refinement could resume then to adding attributes to a species, as presented e.g. for a case study of the heat shock response in [10]. The framework we are proposing allows for a similar approach of modeling, where attributes and internal states of species can be represented in the color set. Variables can be used whenever the explicit value of some attribute is not important, and actual colors should be used in arc expressions and guards when the particular value of an attribute is important. ComCP-nets have the advantage of being graphical and adding structural information in a formalized manner to the widely used framework of Petri nets.
Some of the combinations of species that are generated when refining some species may be biologically impossible. The formalism of Petri nets is suitable for dealing with such reactions by adding guards to the “parent” reaction (the reaction that was replaced with some biologically impossible reactions). Also, if additional information is known about the model, e.g. on the way atomic species are transferred from some complex species to other complex species, it can easily be implemented by manipulating arc expressions. This will be in the scope of a future paper.
Acknowledgement
The authors gratefully acknowledge support from Academy of Finland through project 267915.

References
Calude, C. S., P. Gheorghe, G. Rozenberg and A. Salomaa, editors, “Multiset Processing,” Lecture Notes in Computer Science 2235, Springer-Verlag Berlin Heidelberg, 2001.
Danos, V., J. Feret, W. Fontana, R. Harmer and J. Krivine, Rule-based modelling and model perturbation, in: C. Priami, R.-J. Back and I. Petre, editors, Transactions on Computational Systems Biology XI, Lecture Notes in Computer Science 5750, Springer Berlin Heidelberg, 2009 pp. 116–137.
David, R. and H. Alla, “Discrete, continuous, and hybrid Petri nets,” Springer Berlin Heidelberg, 2010.
Gratie, C. and I. Petre, Fit-preserving data refinement of mass-action reaction networks, in:
A. Beckmann, E. Csuhaj-Varju´ and K. Meer, editors, Language, Life, Limits, Lecture Notes in Computer Science 8493, Springer International Publishing, 2014 pp. 204–213.
Gratie, D.-E., B. Iancu, S. Azimi and I. Petre, Quantitative model refinement in four different frameworks, with applications to the heat shock response, Technical Report 1067, TUCS (2013).
Gratie, D.-E. and I. Petre, Full structural model refinement as type refinement of colored Petri nets, in: M. Heiner and A. K. Wagler, editors, Proceedings of the 6th International Workshop on Biological Processes and Petri Nets, CEUR Workshop Proceedings 1373 (2015), pp. 70–84.
Harmer, R., Rule-based modelling and tunable resolution, EPTCS 9 (2009), pp. 65–72.
Heiner, M., M. Herajy, F. Liu, C. Rohr and M. Schwarick, Snoopy - a unifying Petri net tool, in:
S. Haddad and L. Pomello, editors, Application and Theory of Petri Nets, Lecture Notes in Computer Science 7347, Springer Berlin Heidelberg, 2012 pp. 398–407.

Iancu, B., E. Czeizler, E. Czeizler and I. Petre, Quantitative refinement of reaction models, International Journal of Unconventional Computing 8 (2012), pp. 529–550.
Iancu, B., D.-E. Gratie, S. Azimi and I. Petre, On the implementation of quantitative model refinement, in: A.-H. Dediu, C. Martn-Vide and B. Truthe, editors, Algorithms for Computational Biology, Lecture Notes in Computer Science 8542, Springer International Publishing, 2014 pp. 95–106.
URL  http://dx.doi.org/10.1007/978-3-319-07953-0_8

Jensen, K., “Coloured Petri Nets,” EATCS Monographs on Theoretical Computer Science, Springer- Verlag Berlin Heidelberg, 1992.
Jensen, K., “Coloured Petri Nets,” Monographs in Theoretical Computer Science. An EATCS Series, Springer-Verlag Berlin Heidelberg, 1995.
Jensen, K. and L. M. Kristensen, “Coloured Petri Nets,” Springer-Verlag Berlin Heidelberg, 2009.
Koch, I., W. Reisig and F. Schreiber, editors, “Modeling in systems biology: the Petri net approach,” Computational Biology 16, Springer-Verlag London, 2011.
Lakos, C., Composing abstractions of coloured Petri nets, in: Application and Theory of Petri Nets 2000, Springer, 2000 pp. 323–342.
Liu, F., “Colored Petri nets for systems biology,” Ph.D. thesis, Universit¨atsbibliothek (2012).
Murphy, E., V. Danos, J. Feret, J. Krivine and R. Harmer, Rule-based modeling and model refinement, Elements of Computational Systems Biology (2009), pp. 83–114.
Reisig, W., “Understanding Petri Nets,” Springer-Verlag Berlin Heidelberg, 2013.
Reisig, W. and G. Rozenberg, editors, “Lectures on Petri Nets I: Basic Models,” Lecture Notes in Computer Science 1491, Springer-Verlag Berlin Heidelberg, 1998.
Suzuki, I. and T. Murata, A method for stepwise refinement and abstraction of Petri nets, Journal of Computer and System Sciences 27 (1983), pp. 51 – 76.
Valette, R., Analysis of Petri nets by stepwise refinements, Journal of Computer and System Sciences
18 (1979), pp. 35 – 46.
