	Electronic Notes in Theoretical Computer Science 92 (2004) 16–33	
www.elsevier.com/locate/entcs




A Graph Theoretical Approach To The Shunting Problem *
Gabriele Di Stefano and Magnus Love Koˇci
Dipartimento di Ingegneria Elettrica, Universit`a degli Studi dell’Aquila, I-67040 Monteluco di Roio - L’Aquila - Italy

Abstract
In this paper we propose a graph theoretical approach to the problem of train shunting in a railway depot. Especially during the night, the trains have to be parked in a shunting depot in such a way that the operations in the next morning can start as smoothly as possible. The general problem is very difficult and includes many subproblems. We focus on the following subproblem: how to arrange the trains in a “correct” order on the available tracks by avoiding shunting operations for outgoing trains of the morning. We discuss different cases of the problem, and we propose both algorithmic solutions and heuristic approaches.
Keywords: Shunting problem, permutation graphs, 3-uniform hypergraphs, unimodal sequences


Introduction
Railway operators have to solve many complex decision problems in order to achieve high quality of service at reasonable cost. One of them is the shunting problem: outside the rush hours there is surplus of rolling stock, and, especially during the night, passenger trains have to be parked in a shunting depot. A major complicating issue is the fact that trains are restricted in their movements by the railway infrastructure of the depot. A depot consists of a set of tracks and, depending on the type of tracks, the depot is called shunting yard or marshalling yard. In the first case all the tracks can be approached from one side only, in a marshalling yard each track can be approached from

 Work partially supported by the Human Potential Program of the European Union under contract no. HPRN-CT-1999-00104 (AMORE Project)


1571-0661 © 2004 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2003.12.020

both sides. We assume that trains can move by themselves in both directions (e.g., this is the case of Dutch train units), and we do not deal with locomotive movements. The train arrivals and departures are regulated by a timetable: we will discuss both the case of arrivals and departure mixed in time and the case in which the first departure take place after the last arrival.
The literature on the shunting problem includes works of Winter and Zim- merman [14] and Blasum et al. [1] for dispatching trams. In this two papers all arrivals take place before the first departure. Gallo and Di Miele [4] discuss an extension of their work on bus dispatching in a depot taking in account mixed arrivals and departures. In [10] the shunting problem for passenger train units is faced and several aspects of this problem are discussed along with some mathematical models. Other papers [9,8] deal with the problem of rearranging cars of trains in a train depot.
Almost all the papers on the shunting problem assume or prove that the problem is hard. The main goal of this paper is to investigate the constraints that make the shunting problem hard. To this end, we do not take in consid- eration the size of the trains and track lengths, but we mainly focus on the constraints due to the type of depot and the arrival and departure sequences due to the timetable.
The paper is organized as follows: after a section on notations and basic concepts, in Section 3, we discuss the case in which the last train arrives before the first departing train. We show some results related to four subproblems which arise by imposing some constraints on the arrival and departure direc- tions. In Section 4 the case of departures before the last arrival is discussed both for shunting and marshalling yards. The last section deals with some open problems.

Basic notations and concepts
In the following, we assume that the trains are numbered according to the departure time from the depot area. In particular, the first train leaving the depot is numbered 1, the second 2 and so on. Then the arriving sequence of n trains at the depot area is a permutation π = [π1, π2,... , πn] of the outgoing sequence [1, 2,... , n]. For example, the sequence [2, 3, 1] means that three trains are involved, the first incoming train will be the second to go out, the second incoming train will be the third to leave the depot, and the last one will be the first to go out. Notice that (π−1)i is the position of train i in a incoming sequence. It will be denoted πi−1 and, in the above example, π2−1 = 1, π3−1 = 2, π1−1 = 3. Moreover πρ denotes the reverse sequence of π, that is πρ = [πn, πn−1,... , π1].

Given a sequence S = [s1, s2,... , sn] of n distinct elements, a subsequence of S is a sequence S' = [si1 , si2 ,... , sim ] such that 1  ij < ik   n for each j < k.
A sequence S = [s1, s2,... , sn] is called unimodal if there exists t,1 ≤ t ≤ n such that s1 < s2 < ... < st and st > st+1 > st+2 > ... > sn. A unimodal sequence is called increasing if t = n, and it is called decreasing if t = 1.
Let PS = {S1, S2,... , Sk} be a set of subsequences Si, 1 ≤ i ≤ k of a sequence S of distinct elements. PS is called a partition of S if each element of S belongs to exactly one subsequence in PS. Two sequences are disjoint if they have no element in common.
It is useful to define some operations on sequences. We write s  S if s is an element of the sequence S, and the number of elements of S is denoted by S . If S' is a subsequence of S, then S S' denotes the sequence obtained from S by removing all the elements in S'. If S and T are two sequences s.t.
|S| = n and |T | = m, then the sequence given by the concatenation of S and
T , denoted by S · T , is the sequence having S as the subsequence of the first n elements and T as the subsequence of the last m elements, and |T · S| = m + n. If S = [s1, s2,... , sn] is a sequence on n integers and k is an integer, then S + k denotes the sequence [s1 + k, s2 + k,... , sn + k].
Let V be a finite set of vertices. Let (V ) denote the power set of the set V , i.e., the set of all subsets of V . The pair H = (V, ) is a hypergraph if	(V ).  is the set of hyperedges of the hypergraph. A hypergraph H = (V, ) is called k-uniform if each e	has exactly k elements. A 2- uniform hypergraph is called graph, in this case the hyperedges are called edges. A k-coloring of a hypergraph H = (V, E) is a mapping f : V −→ {1,... , k} such that no edge of  (besides singletons) has all vertices of the same color. The chromatic number of H, denoted by χ(H), is the minimal k, for which H admits a k-coloring.
Let G = (V, E) be a graph. V '  V is a clique in G if (u, v)  E for all u, v  V ', u = v. w(G)= max V ' : V '  V and V’ is a clique in G is called the clique number of G.

Problems for night depots
For the problems of this section, we generally assume that the depot topology is a marshalling one, that is each track can be approached from both sides. We do not take into account the lengths of trains and tracks. That is, we assume that each track is long enough to host the trains assigned to it. We also assume that the first departure takes place after the last arrival: This could be the case of a depot used during the night. In the next section, we

discuss the case of arrivals and departures mixed in time.
The common objective of all the following problem is to use the minimum number of tracks to host all the trains without additional shunting movements during input or output operations.
By putting some restrictions on the way to approach the tracks we define four main problems:
SISO problem: Single Input, Single Output. In this case we assume that each track can be approached by one side and left from the other side, that is the tracks are used as queues. We also discuss the case in which the tracks are used as stacks (that is the inputs and the outputs of the trains are done from a single side and the other is not accessible). This is the case of a shunting yard.
DISO problem: Double Input, Single Output. In this case each track can receive trains from both sides, but the output is done from a single side. In the night, a main goal of the general shunting problem is to park trains in such a way that the operations in the next morning can start as smoothly as possible. Then the single output side in the direction of the station is a desirable requirement.
SIDO problem: Single Input, Double Output. This case is the opposite of the previous one. Even if there is no practical reason to consider this case, the study of this problem is easier w.r.t the DISO problem, because the order of the trains stored in a track will respect the order in the input sequence. It is easy to show that the SIDO and DISO problems are equivalent: we will give an evidence in Section 3.2.
DIDO problem: Double Input, Double Output. In this case, no restrictions are imposed.

Single Input Single Output (SISO)
Since the tracks are used as queues, then the assignment of trains to each track must be done in such a way that the trains in a track form an increasing sequence, that is, the first departing train must have the lowest of the numbers assigned to the trains stored in the track. This avoids the need of shuntings during the output operations.
Definition 3.1 SISO problem: Given a sequence S of n incoming trains, find a partition of S with the minimum number of increasing subsequences.
Given a sequence S, we can construct an undirected graph G[S]= (V, E) in the following way:

- V = {s | s ∈ S}
- E = {(si, sj) | [si, sj] is a decreasing subsequence of S}
An undirected graph G is called a permutation graph if there exists a sequence S such that G ∼= G[S]. Notice that an edge (si, sj) is present in G[S] if si and sj are in the wrong order, that is, the corresponding trains cannot be put in the same track. Moreover a decreasing subsequence of S corresponds to a clique in G[S].
If the sequence S is reversed, than each pair of trains forming an increasing subsequence in S is now in decreasing order, and vice versa. Hence G[Sρ] = G[S], which shows that the complement of a permutation graph also is a permutation graph.
Theorem 3.2 [7] Given a sequence S of n incoming trains, the minimum number of tracks to solve the SISO problem is k if and only if χ(G[S]) = k.
Proof. Let k' be the optimum solution for the SISO problem on the sequence
S, and let k'' = χ(G[S]). We have to show that k' = k''.
The minimum number of tracks to solve the SISO problem must be larger than the longest decreasing subsequence S' in S, because no pair of trains in S' can be put in the same track. Since a decreasing sequence S' corresponds to a clique in G[S], then k' ≥ ω(G[S]).
Now, let us suppose to have a coloring of G[S]. Then we can find a feasible solution to the SISO problem by putting all the trains colored with the same color in a single track. In fact, if two train si and sj are colored with the same color, they must form an increasing subsequence, otherwise (si, sj) is an edge of G[S] and the two trains cannot be colored with the same color. As a consequence, k' ≤ χ(G[S]).
Then ω(G[S]) k' χ(G[S]). But permutation graphs are perfect graphs (see [7]), and for these graphs the chromatic number and the clique number are equal. Thus ω(G[S]) = χ(G[S]) which implies k' = χ(G[S]) = k''. 
We report an algorithm (see Algorithm 1) to assign trains on tracks based on the corresponding algorithm to color a permutation graph [2,7]. Algo- rithm 1 uses vector LAST , and LAST [i] holds the last train in the i-th track. The algorithm requires O(n log n) time to assign each train of a sequence S with n trains to a proper track. In fact, loop 2–7 is repeated n times and pro- cedure Findtrack requires O(log n) time to find a track with a binary search. Note that, in the case of tracks approachable only from one side (that is the SISO problem on a shunting yard), two trains si, sj ∈ S, where S is the input sequence, cannot be put in the same track if [si, sj] is an increasing subsequence of S. Then in G[S] the edge (si, sj) is present, as well as for all



Algorithm 1 On-line SISO for marshalling yards
Require: A sequence π = [π1, π2,... , πn] of n incoming trains numbered from 1 to n
Ensure: A track assignment for each train using the minimum number k of tracks
1: k	0
2: for j =1 to n do
3:	i ← F indtrack (πj)
4:	Put train πj on track Ti
5:	LAST[i]	πj
6:	k	max k, i
7: end for

Algorithm 2 Procedure Findtrack
1: i ← 1; t ← k+1
2: while i/=t do
3:	r ← [i+t ♩
4:	if πj > LAST[r] then
5:	t	r
6:	else
7:	i	r+1
8:	end if
9: end while
10: return i
the pairs of trains which are in an increasing order in S, and there is no edge between two trains which are in decreasing order. Since G[S]= G[Sρ], then, by Theorem 3.2, the chromatic number χ(G[Sρ]) gives the minimum number of tracks of a shunting yard to store the trains of the incoming sequence S. As a consequence, the number of tracks can be found in O(n log n) time.
By looking at Algorithm 1, we can notice that the choice of a track for the i-th train does not depend on trains arriving later. This means that the same procedure Findtrack can be used for the on-line version of the SISO problem, in which we have to determine the track of an incoming train, given its departure time, without knowing the entire input sequence.
DISO and SIDO problem
The DISO problem on a marshalling yard implies that the incoming trains can approach each track from both sides, but in the morning they leave the tracks from one side only. In the SIDO problem the usage of tracks is opposite,

that is the incoming trains can approach the tracks from a single side, but the output can be done from both sides. In the following we will study the SIDO problem since the sequence of trains stored in a track must be a subsequence of the incoming sequence of trains. This is not true for the DISO problem. On the other hand, it is easy to show that the two problems are equivalent (see Theorem 3.13).
In the SIDO situation the sequence S = [s1, s2,... , sm] of the trains stored in a track must form a unimodal sequence. In fact, let R be the side of the track used for incoming trains and let L be the opposite side. The sequence S is such that S = SL · SR, where SL = [s1, s2,... , st] is the subsequence of trins going out from the L side, and SR = [st+1, st+2,... , sm] is the subsequence of trins going out from the R side. The trains in SL must form an increasing sequence s1 < s2 < ... < st, whereas the trains in SR must form a decreasing sequence st+1 > st+2 > ... > sm, being sm the first train leaving the track from this side. The concatenation of these two sequences is a unimodal sequence. Then the SIDO problem can be formally stated as follows:
Definition 3.3 SIDO problem: Given a sequence S of n incoming trains, find a partition of S with the minimum number of unimodal subsequences.
It is interesting to note that, every sequence of two trains can be stored in a single track: this is not true in the SISO situation. On the other hand, se- quences of just three trains can require two tracks. Let [t1, t2, t3] be a sequence of three incoming trains, and let us suppose they are stored in a single track. If t1 > t2 and t2 < t3 the train t2 must leave the depot before the other two: impossible without shunting operations. As consequence, we can store in a single track at most two of the three trains. To keep this kind of constraints, we introduce the notion of valley hypergraph.
Definition 3.4 Given a sequence S = [s1, s2,... , sn] of n distinct integers, the valley hypergraph induced by S is the hypergraph HS = (V, E) where
V = {s | s ∈ S} and {si, sj, sk} ∈ E if and only if si > sj, sj < sk, and
Lemma 3.5 Given a sequence S of n incoming trains, the SIDO problem is solvable using k tracks if and only if the valley hypergraph HS = (V, ) is colorable using k colors.
Proof. =⇒: If the SIDO problem is solvable using k tracks, then there exist k unimodal subsequences S1, S2,... , Sk that form a partition of S. We color all the trains in the same track with the same color, that is, if t  Si we color t with color i, for each i = 1,... , k.
By contradiction, let us suppose that {sh, si, sj}∈ E, h < i < j and that

sh, si, and sj are colored with the same color. This implies that the trains sh, si, and sj are stored in the same track. Then the sequence [sh, si, sj] is a subsequence of a unimodal sequence and hence it is unimodal. This implies that sh, si, and sj cannot form a valley, contradicting the hypothesis
{sh, si, sj}∈ E.
⇐=: Since HS is colorable with k colors, then there exist k sets T1, T2,... , Tk of trains colored with the same color. Let Tc be the set colored with the color c and Sc the corresponding subsequence of S. Then Sc does not contain valley configurations of trains. This implies that Sc is unimodal. Since we can repeat this proof for each color, then there exist S1, S2,... , Sk unimodal subsequences that form a partition of S.

The complexity of the SIDO problem is open, but we will show a greedy algorithm to color a valley hypergraph. We first show a property of unimodal subsequences by using the Pigeonhole Principle:
Definition 3.6 Pigeonhole Principle: Let A be a set. Let B be a finite set. If f : A −→ B and |A| > |B| ≥ 1, then there exists a1 /= a2 ∈ A such that f (a1)= f (a2).
Lemma 3.7 In any sequence of k(k−1) +1 distinct integers there exists a uni-
modal sequence of k integers.
Proof. Let S = [s1, s2,... ,sk(k−1) +1] be a sequence of distinct integers. By contradiction, every subsequence of S with k or more elements is not unimodal. We assign a pair of integers (xi, yi) to each element si of S in such a way that xi ≥ 1 is the length of the longest increasing subsequence of S ending in si, whereas yi ≥ 1 is the length of the longest decreasing subsequence of S starting with si. Then xi + yi − 1 is the length of the longest unimodal subsequence of S having si as largest element. By contradiction hypothesis, the following inequality holds.
xi + yi − 1 < k	for each i
Since xi and yi are positive integers, this implies that there are at most k(k−1)
distinct pairs (xi, yi).
Let A = {sj|sj ∈ S} and let B = {(xj, yj) | (xj, yj)is assigned to sj ∈ S}. Let f : A −→ B be the function that represents the above assignment. Since
|A| > |B|, then, by using the Pigeonhole Principle, there exist si and sj such that f (si) = f (sj) for some i /= j, i.e., (xi, yi) = (xj, yj). Without loss of generality, let us suppose i < j. Then, either si < sj or si > sj. If si < sj, then xi < xj by definition of (xi, yi) and (xj, yj), a contradiction. If si > sj, then yi > yj, a contradiction.	 

Theorem 3.8 Let HS be a valley hypergraph such that |S| = n. If χ(HS) ≥ k
then n ≥ k(k+1) .
Proof. We prove this theorem by induction on the number k of colors. Case k = 1: If χ(HS) ≥ 1, we have to show that n ≥ 1, but this is obvious. Case k > 1: By induction, we assume that if χ(HS) ≥ k − 1 then n ≥ k(k−1) . We show the inductive step by contradiction, that is, we assume χ(HS) ≥ k and
2
From the inductive and contradiction hypotheses, we obtain k(k−1) ≤ n < 
k(k+1) . Then n = k(k−1) + p, where p is an integer such that 0 ≤ p < k.
Case 1 ≤ p < k: In this case, by Lemma 3.7, there must exist a unimodal subsequence S' of S with k elements. Let T = S \ S', then the valley hypergraph HT has |T | = n − k < k(k+1) − k = k(k−1) vertices. Then, by the
induction hypothesis, χ(HT ) < k − 1. Hence HT is colorable with at most
k − 2 colors and then, since the elements of S' are colorable with a single color, HS is colorable with k − 1 colors, a contradiction.
Case p = 0: In this case, by Lemma 3.7, there must exist a unimodal sub- sequence S' of S with k − 1 elements. Let T = S \ S', then the valley hypergraph HT has |T | = n − (k − 1) = k(k−1) − (k − 1) < k(k−1) vertices.
Then, by the induction hypothesis, HT is colorable with at most k − 2 and
then HS is colorable with k − 1 colors, a contradiction.

Corollary 3.9 The SIDO problem on a sequence of n trains is solvable with
√8n+1 1
2
Proof. Let S be the sequence of incoming trains and let k = √8n+1−1 . By contradiction, we assume that k tracks are not sufficient. By Lemma 3.5, this means that the valley hypergraph HS is not colorable with k colors, that is
χ(HS) ≥ k + 1. By Theorem 3.8, we obtain n ≥ (k+1)(k+2) . But, by using

simple algebra, we obtain


√8n+1−1  √8n+1−1 + 1 

n	(k + 1)(k + 2) >	2	2	= n
2	2
a contradiction.	 
Corollary 3.9 gives an upper bound to the number of tracks needed to solve the SIDO problem on n trains. The following theorem shows that this bound is tight.



Fig. 1. The sequence S4 = [10, 8, 9, 5, 6, 7, 1, 2, 3, 4] of trains requiring four tracks in the SIDO problem
Theorem 3.10 Let m be an arbitrary large intege. There always exists a

valley hypergraph HS
, such that |S| > m and χ(HS
)= ,√8|S|+1−1 ,.

Proof. We show this theorem when |S| = n = k(k+1), where k is an arbitrary

2
positive integer such that n > m. In this special case
i ≥ 1 be a sequence defined in the following way:
 √8n+1−1 


= k. Let Si,

Si = 

[1]	if i =1 

(Si−1 + i) · [1, 2,... , i] otherwise
Figure 1 shows the sequence S4. We show that the valley hypergraph HSk
has |Sk| = k(k+1) elements and requires k colors to be colored. By induction

on k, we assume that HS

k−1
has k(k−1)
elements and requires k − 1 colors to

be colored. The basic step of the induction is obvious.
It is easy to see that k colors are sufficient to color HSk . In fact, Sk is formed by the concatenation of k increasing (and then unimodal) subsequences. It is sufficient to use a different color for each subsequence.
By contradiction, let us suppose that k − 1 colors are enough to color HSk .
Let x and y be two vertices of a 3-uniform hypergraph H = (V, E) and let Txy = {z | {x, y, z}∈ E} be the set of all vertices that form an hyperedge with x and y. Let H(Txy) be the sub-hypergraph of H induced by the vertices in Txy. If χ(H)= χ(H(Txy)) then x and y must be colored with two different colors, otherwise there exists a hyperedge in H with three nodes (x, y, and a node in Txy) colored with the same color.
The above property can be applied to HSk . Let x and y two vertices in the subsequence [1, 2,... , k] of Sk. Then all the nodes z such that {x, y, z} is a hyperedge in HSk are exactly the nodes of the subsequence Sk−1 + k. Let

T be the set of these nodes and let H(T ) ≡ HSk−1+k be the sub-hypergraph of HSk induced by the nodes in T . Notice that the valley hypergraph induced by H(T ) is isomorph to the valley hypergraph induced by Sk−1, that is HSk−1 . Then, by induction hypothesis, χ(H(T )) = χ(HSk−1 ) = k − 1, and x and y must be colored with different colors since χ(HSk ) = k  1 by contradiction hypothesis.
Hence, every pair of nodes in the subsequence [1, 2,... , k] of Sk must be colored with two different colors. But this means that k colors are needed, a contradiction with the hypothesis that k − 1 colors are enough to color HSk . 

Algorithm 3 Track assignment for the SIDO problem
Require: A sequence S of n incoming trains
Ensure: A track assignment for each train using at most	√8n+1−1	tracks
1: Set t =1 
2: while S =[ ] do
3:	S' = LongestUnimodal(S)
4:	Assign each element in S' to the t-th track.
5:	Set S = S	S'
6:	Set t = t +1 
7: end while
On the basis of the previous results, it is possible to show that there exists a greedy algorithm that uses at most  √8n+1−1  tracks. Given a sequence
S of trains, the Algorithm 3 finds the longest unimodal sequence S' in S and assigns each train in S' to the first available track. Then, iteratively, it repeats the operation on the sequence of the remaining trains. Procedure LongestUnimodal, shown in Algorithm 4, follows the same technique used in Lemma 3.7: it associates a pair of integers (xi, yi) to each element si of S in such a way that xi ≥ 1 is the length of the longest increasing subsequence of S ending in si, whereas yi ≥ 1 is the length of the longest decreasing subsequence of S starting with si (see lines 1–9). Then it finds the biggest element of the longest subsequence S' (lines 10–11), and all the other elements of S' (those on the left, lines 12–17, and those on the right, lines 18–23).
Theorem 3.11 Algorithm 3 solves the SIDO problem on a sequence of n
trains using at most  √8n+1−1  tracks.
Proof.
The number of tracks used by Algorithm 3 is equal to the number of times the cycle (lines 2–7) is repeated. In what follows we calculate this number.



Algorithm 4 Procedure LongestUnimodal Require: A sequence S = [s1, s2,... , sn], n	1 Ensure: A longest unimodal subsequence S' of S
Set (xi, yi) to (1, 1), for each i = 1, 2, ··· ,n 
for i = 2, 3, ··· ,n do
Set Xi = xj sj	[s1, s2,... , si−1]and sj < si
Set xi = max(Xi)+1	/* max(Xi)= 0 if Xi is empty */
5: end for
for i = n	1,n	2,	, 1 do
Set Y i = yj sj	[si+1, si+2 ..., sn]and sj < si
Set yi = max(Y i)+1	/* max(Y i)=0 if Y i is empty */
end for
10: Let st	S such that xt + yt	xi + yi, for each i = 1, 2,	,n 
Set S' = [st]; x = xt; y = yt
for i = t − 1,t − 2, ··· , 1 do if xi = x	1 then
Set S' = [si] S'
15:	Set x = x	1
end if end for
for i = t + 1,t + 2, ··· ,n do
if yi = y	1 then
20:	Set S' = S'  [si]
Set y = y	1
end if end for

Let ti = i(i+1) . We want to show that if n < ti+1 then the loop is repeated at most i times. When n < t1, that is the sequence is empty, the loop is not executed, and, correctly, no track assignment is performed.
By induction, we assume that, if n < ti then the cycle is repeated at most
i − 1 times.
If ti < n < ti+1, by Lemma 3.7, S contains a unimodal subsequence of length i + 1. Since Algorithm 3 finds the longest unimodal subsequence S' at Step 3, then |S'|≥ i+1. This means that |S \S'|≤ n−(i+1) < ti+1 −(i+1) = ti. Then, by inductive hypothesis, the loop is repeated at most i − 1 times for the sequence S \ S', and hence at most i times for S.
If n = ti, by Lemma 3.7, S contains a unimodal subsequence of length i, and Algorithm 3 finds the longest unimodal subsequence S' at step 3, then
|S'|≥ i. This means that |S \ S'|≤ n − i ≤ ti − i = ti−1. Then, by inductive

hypothesis, the cycle is repeated at most i	1 times for the sequence S	S', and hence i times for S.
Now, if t	n < t	, then on one hand the loop is repeated at most k
times and on the other hand k(k+1) ≤ n, thus k ≤ √8n+1−1 .	 
The complexity of Algorithm 3 is O(n2.5) because the Findtrack procedure takes O(n2) time, and it is repeated O(√n) times, as stated in the above
result.
In what follows, we show the equivalence of the SIDO and DISO problems. In the DISO problem, since the output is from a single side of the track, the trains are stored in each track in such a way that they form an increasing sequence starting from the first train going out. This means that, as soon as we put the first train t in an empty track, all the other trains numbered with a smaller number w.r.t. t must be put between t and the output in a decreasing order starting from t, and all the other trains numbered with a larger number must be put behind t in an increasing order (starting from t). As consequence, in a DISO problem a sequence S of trains can be put in a single track if it is an arrow sequence, i.e. if S = [t] T and T is partitionable into two sequences S' and S'' such that S' is an increasing sequence of elements larger than t, and S'' is a decreasing sequence of elements smaller than t. Figure 2c shows two arrow subsequence of sequence [3, 5, 7, 4, 1, 8, 6, 2], namely [3, 5, 1, 6] and
[7, 4, 8, 2]. The DISO problem can be formally stated as follows.
Definition 3.12 DISO problem: Given a sequence S of n incoming trains, find a partition of S with the minimum number of arrow subsequences.
The following theorem states the equivalence between the SIDO and the DISO problem.
Theorem 3.13 Let π be a permutation of n trains, numbered 1, 2,... , n. The SIDO problem on the sequence π can be solved by using k tracks if and only if the DISO problem on the sequence (π−1)ρ can be solved by using k tracks.
Proof. = : The SIDO problem requires to find a partition of the sequence π into unimodal subsequences. We prove the theorem by showing that a unimodal subsequence S in π corresponds to an arrow subsequence in (π−1)ρ with the same number of elements. If we represent π like a function graph (see Fig 2a), then π−1 can be obtained by mirroring the function graph along the line positioned at 45 degrees (see Fig 2b). It is easy to see that a unimodal subsequence in π corresponds to a mirrored arrow subsequence in π−1, and then to an arrow subsequence in (π−1)ρ (see Fig 2c). Hence if we know a solution for the SIDO problem on π, we can easily find a solution for the DISO problem on (π−1)ρ.


	
(a) π	(b) π−1	(c) (π−1)ρ

Fig. 2. Transformation from a π = [4, 1, 8, 5, 7, 2, 5, 3] sequence to a (π−1)ρ = [3, 5, 7, 4, 1, 8, 6, 2] sequence.
=: On the other hand, if we know a solution for the DISO problem on τ = (π−1)ρ, that is a partition of τ into k arrow subsequences, we can easily find a solution for the SIDO problem on π, that is a partition of π into k unimodal subsequences, since π = (τρ)−1.


Double Input Double Output (DIDO)
In this section we just model the DIDO problem as a coloring problem of 4-uniform hypergraphs.
The DIDO problem on a marshalling yard implies that the incoming trains can reach and leave the tracks from both sides.
In the DIDO situation the trains stored in a track must form a unimodal sequence as well as in the SIDO problem. The first train t stored in the track represents a point that divides the unimodal sequence into two subsequences of trains. In the input sequence, one of these two subsequences is unimodal, the other is decreasing. More formally, in a DIDO problem, a not empty sequence S of trains can be put in a single track if S = [t] T and T is partitionable into two sequences S' and S'' such that S' is a decreasing sequence of elements smaller than t, and [t] · S'' is a unimodal sequence. We call S a ud-sequence (unimodal and d ecreasing sequence). Then the DIDO problem can be formally stated as follows.
Definition 3.14 DIDO problem: Given a sequence S of n incoming trains, find a partition of S with the minimum number of ud-subsequences.

Notice that every sequence of three trains can be stored in a single track: this is not true in the SISO, SIDO, and DISO problems. On the other hand, sequences of four trains can require two tracks. For example, let S = [3, 1, 2, 4]: it is not a ud-sequence. We store train 3 in an empty track, and, in the same track, we can store trains 1 and 2, necessarily both adjacent to train 3. If we put the train 4 in the same track, then either train 1 or train 2 cannot leave the track before train 4. The sequences [1, 3, 2, 4], [1, 4, 2, 3], [3, 1, 2, 4], and [4, 1, 2, 3] are the only sequences with four elements that are not ud-sequences. We call them nud-sequences (not ud-sequences).
Definition 3.15 Given a sequence S = [s1, s2,... , sn] of n distinct integers, the nud-hypergraph induced by S is the hypergraph HS = (V, E) where V = s s  S and sh, si, sj, sk	if and only if h < i < j < k and [sh, si, sj, sk] is a nud-subsequence of S.
Lemma 3.16 Given a sequence S of n incoming trains, the DIDO problem is solvable using k tracks if and only if the nud-hypergraph HS = (V, ) is colorable using k colors.
Proof. =⇒: If the DIDO problem is solvable using k tracks, then there exist k ud-subsequences S1, S2,... , Sk that form a partition of S. We color all the trains stored in the same track with the same color, that is, if t  Si we color t with color i, for each i = 1,... , k.
By contradiction, let us suppose that {sh, si, sj, sk}∈ E, h < i < j < k and that sh, si, sj, and sk are colored with the same color. Then the trains sh, si, sj, and sk are stored in the same track, forming a unimodal sequence in that track. This implies that [sh, si, sj, sk] is a ud-subsequence of S, contradicting the hypothesis {sh, si, sj, sk}∈ E.
⇐=: Since HS is colorable with k colors, then there exist k sets T1, T2,... , Tk of trains colored with the same color. Let Tc be the set colored with the color c and let Sc be the corresponding subsequence of S. Then Sc does not contain nud-subsequences of trains. This implies that Sc is a ud-sequence and the trains can be stored in a single track. Since we can repeat this proof for each color, then there exist S1, S2,... , Sk ud-subsequences that form a partition of S.

Problems for day depots
In this section we face the SISO problem by removing the constraint that the first outgoing train leaves the depot after the last incoming train. We call this problem General SISO, denoted GSISO, and we will discuss this problem



Fig. 3. A set of intervals and the corresponding chords in a circle.
both for marshalling yards and for shunting yards.
We start assuming a shunting yard. We can model this situation with a set of intervals on an oriented line. Each interval is associated to a train and represents the interval of time that the train have to spend in the depot. We number the trains (and then the intervals) as usual: the first train leaving the depot is numbered 1, the second 2 and so on. Figure 3 represents the model, and it also shows that there is a one-to-one correspondence between each interval and a chord in a cycle. Note that in this model, the constraint that the first outgoing train leaves the depot after the last incoming train, is equivalent to impose that all the intervals share at least a point.
We say that two intervals overlap if they intersect but neither properly con- tains the other. It is easy to see that if two intervals overlap, the corresponding trains cannot be put in the same track of a shunting yard. By denoting I the set of intervals and Ij ∈I the interval associated to train j, for each j, we can construct an undirected graph G[I]= (V, E) in the following way:
V = {j | Ij ∈ I}
E = {(i, j) | Ii and Ij overlap}
G[I] is called overlap graph. The following lemma shows a correspondence between the GSISO and the coloring of an overlap graph.
Lemma 4.1 Let be a family of intervals associated to a set of trains T . The GSISO problem on a shunting yard for the set T can be solved with k tracks if and only if there exists a k-coloring of G[I].
Proof. = : We associate to each track a different color and then we color each train stored in a track with the color associated to that track. Since connected vertices i and j of G[I] are assigned to different tracks, they receive

different colors.
=: Conversely, given a proper coloring of G[ ] using colors 1, 2,... , k. If the color of the vertex x is i, then the train x is assigned to the i-th track. Suppose this strategy is unsuccessful. There must be a bottleneck in some track: this track has a pair of trains x and y stored in increasing order. Without loss of generality, let x < y, then x entered before y. But, since x < y, train x must leave the depot before train y, and this means that Ix overlap Iy. As a consequence x and y are adjacent in G[ ], and they are both colored the same, a contradiction.	 

An immediate consequence of Lemma 4.1 is that an optimum solution for a GSISO problem on a shunting yard is equivalent to finding the chromatic number of an overlap graph. But overlap graphs are equivalent to circle graphs, i.e., intersection graphs of chords in circles (the proof can be obtained with the projection method suggested by Gavril [5], see Figure 3), and in [6] it is reported that the chromatic number problem for circle graphs is NP-complete. The 3-coloring of a circle graph (equivalent to solving the GSISO problem on a shunting yard with 3 tracks) is in P, whereas the 4-coloring is NP-complete [13].
As regards the GSISO problem for marshalling yards, note that it makes no difference whether we assume arrivals and departures either mixed or not mixed in time. As a consequence the GSISO problem for marshalling yards can be solved in O(n log n) time by using Algorithm 1 on the sequence of incoming trains.


Open problems

The complexity of the DISO, SIDO and DIDO problems still remains open: they are equivalent to coloring particular 3-uniform and 4-uniform hyper- graphs. The coloring of a general 3-uniform graph is hard and Lova´sz [11] proved that is NP-hard to determine whether a 3-uniform hypergraph is 2- colorable. It is also hard to approximate the chromatic number of a (hy- per)graph within a factor of n1−є [12].
Other models should be studied when some other factors are introduced to the shunting problem. For example, the influence of the length of both tracks and trains is absolutely not marginal. Another factor is the type of the trains: at departure time it is required a train of a certain type and not a specific train, as assumed above. Then a matching among the arriving trains and the departing trains is needed.

Acknowledgments
We wish to thank Sabine Cornelsen for the useful discussions and suggestions given during her permanence at the Electrical Engineering Department of the University of L’Aquila, Italy.

References
U. Blasum, M.R. Bussieck, W. Hochsta¨ttler, C. Moll, H. Scheel, and T. Winter. Scheduling trams in the morning. Mathematical Methods of Operations Research, 49(1): 137–148, 2000.
A. Brandst¨adt, On improved time bounds for permutation graph problems. Lecture Notes in Computer Science, 657, 1–10,1993.
A. Brandst¨adt, V.B. Le, J.P. Spinrad Graph classes: a survey, SIAM, 1999.
G. Gallo and F. Di Miele. Dispatching buses in parking depots, Transportation Science, 35(3): 322–330, 2001.
F. Gavril. Algorithms for a maximum clique and a maximum independent set of a circle graph,
Networks, 3: 261–273, 1973.
M.R. Garey, D.S. Johnson Computers and intractability, Freeman, 1979.
M.C. Golumbic Algorithmic graph theory and perfect graphs, Academic press, 1980.
S. He, R. Song, and S.S. Chaudhry. Fuzzy dispatching model and genetic algorithms for railyards operations. European Journal of Operations Research, 124: 307–331, 2000.
E. Dahlhaus, P. Horak, M. Miller, J.F. Ryan, The train marshalling problem, Discrete Applied Mathematics, 103 (1–3): 41–54, 2000
R. Freling, R.M. Lentink, L.G. Kroon, D. Huisman, Shunting of Passenger Train Units in a Railway Station. Ecomometric Institute Report 277, Erasmus University Rotterdam,
Econometric Institute, 2002
L. Lova´sz, Coverings and colorings of hypergraphs, Proc. 4-th S.E. Conf. on Combinatorics, Graph Theory and Computing, 3–12, 1973.
M. Krivelevich, B. Sudakov, Approximate coloring of uniform hypergraphs, Proc. ESA: Annual European Symposium on Algorithms, LNCS 1461, 477–489,1998
W. Unger, On the k-coloring of Circle Graphs, Lecture Notes in Computer Science, 294: 61–72, 1988.
T. Winter and U.T. Zimmermann. Real-time dispatch of trams in storage yards. Annals of Operations Research, 96: 287–315,2000.
