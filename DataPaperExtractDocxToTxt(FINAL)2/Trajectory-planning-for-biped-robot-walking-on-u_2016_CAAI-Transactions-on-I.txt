Available online at www.sciencedirect.com
ScienceDirect


CAAI Transactions on Intelligence Technology 1 (2016) 197e209
http://www.journals.elsevier.com/caai-transactions-on-intelligence-technology/
Original Article
Trajectory planning for biped robot walking on uneven terrain e Taking stepping as an example
Qiu-bo Zhong a,*, Fei Chen b
a School of Electronic and Information Engineering, Ningbo University of Technology, 315016, China
b Advanced Robotics Department, Istituto Italiano di Tecnologia, Genova, Italy
Available online 31 October 2016

Abstract

According to the features of movements of humanoid robot, a control system for humanoid robot walking on uneven terrain is present. Constraints of stepping over stairs are analyzed and the trajectories of feet are calculated by intelligent computing methods. To overcome the shortcomings resulted from directly controlling the robot by neural network (NN) and fuzzy logic controller (FLC), a revised particle swarm optimization (PSO) algorithm is proposed to train the weights of NN and rules of FLC. Simulations and experiments on different control methods are achieved for a detailed comparison. The results show that using the proposed methods can obtain better control effect.
Copyright © 2016, Chongqing University of Technology. Production and hosting by Elsevier B.V. This is an open access article under the CC BY-NC-ND license (http://creativecommons.org/licenses/by-nc-nd/4.0/).

Keywords: Humanoid robot; PSO; NN; FLC; Motion planning



Introduction

In order to make humanoid robot able to “live” in the human being environment, it must be able to perform some complex motions. There are two methods to plan these com- plex motions: The first method is to first establish the appro- priate model according to the type of movement, and then plan for the trajectory of motions. Usually, the trajectories of ankle and hip of the robot are assumed by parameter interpolation. Secondly, trajectories of other joints are deduced by geometric relationship. Finally, the optimal trajectories are confirmed by optimal algorithms according to the MAX of stability or MIN of energy consumed or similar strategies [1,2]. The second method is firstly to design an ideal trajectory of motion ac- cording to the stability or optimal targets. Then the movement of each joint will be calculated to match the ideal trajectory through inverse kinematics. Finally, during process of the real



* Corresponding author.
E-mail address: zhongqiubo@nbut.edu.cn (Q.-b. Zhong).
Peer review under responsibility of Chongqing University of Technology.
movement, the error between real trajectory and ideal trajec- tory will be adjusted [3].
It is worth to study of humanoid robot of integrating into society and serving in the home, and it is a very challenging subject. In face of all kinds of uncertain environment, for walking, robot might need to complete the task in various of complex environment regularly, as shown in Fig. 1.
Walking on uneven terrain for humanoid robot is one of the complex motions. It involves in planning and controlling more than ten degrees of freedom of the robot, and this system is a high-dimensional nonlinear complex system. If traditional methods are used in this system, the optimized control effect is not very satisfactory. And especially when there are many more uncertain initial variables, it is easy to fall into local optimization, slow optimization and poor adaptive ability of the algorithm. Therefore, because almost all soft computing algorithms are highly versatile, and analyticity of objective function is not required, evolutionary algorithms and other soft computing techniques can be considered in order to control this system. Rahul used GA with fuzzy logic method to control biped robot walking, and obtain good results [4]. Based on soft computing Pandu designed a gait planner that keep the robot


http://dx.doi.org/10.1016/j.trit.2016.10.009
2468-2322/Copyright © 2016, Chongqing University of Technology. Production and hosting by Elsevier B.V. This is an open access article under the CC BY-NC- ND license (http://creativecommons.org/licenses/by-nc-nd/4.0/).





Fig. 1. Robot walks in complex environment.


stable when it walked on slop [2]. PSO algorithm has proven to be very effective in solving complex optimization problems. However, as with other evolutionary algorithms, with PSO algorithm it is also easy to fall into local optimal solution. Maintaining the diversity of population and avoiding prema- turely falling into local optimal solution is a direct way to improve the PSO. One way to improve the evolutionary al- gorithm is an idea based on multi-population [5], and it has achieved very good results solving practical problems [6,7]. In order to control the multi-robots formation, Seung-Mok used a coevolving particle swarm optimization (CCPSO) algorithm to optimize the model predictive control, and obtained good re- sults [8]. Micael S. Couceiro introduced an extension of PSO optimal method called RDPSO to control with 15 robots. RDPSO can benefit from the dynamical partitioning of the whole population of robots into multiple groups [9]. To avoid multi-robots obstacles, Ezequiel introduced a noise-resistant PSO algorithm to optimize the resource constraints of multi- robots [10]. Vojtech Vonasek utilized PSO technique to find the CPG-based motion primitives, and then planed the global
modified once established. Park [14] designed a trajectory generator based on ZMP FLC. The trajectories of legs were the input, and the effectiveness of the algorithm was proved by simulation. The ZMP trajectory produced by this algorithm can increase the stability of robot. However, the main defect of this algorithm is that the trajectory cannot be the optimum because of the lack of optimizer. Zhou [15] presented a fuzzy reinforcement learning structure, which can maintain the dy- namic stability of biped robot while moving. However, this algorithm used a gradient descent learning method, with which is easy to fall into local optimum. One way to jump the local optimum is to use the intelligence optimal algorithm. PSO algorithm is less dependent on the objective function and it can be introduced to optimize the rules of FLC.
In this paper, constraints of movement for humanoid robot are analyzed at first. Then, an example of stepping over stairs is taken to feasibility analysis. And the kinematics formulas of stepping over stairs are achieved. Based on the PSO algorithm present in [5], an idea of crossover from GA is introduced to make the algorithm jump the local optimum, which is called MPSO. In order to test the effects of different control methods, three methods of soft computing consisting of MPSO, MPSO optimizing NN(MPSONN), MPSO optimizing FLC (MPSOFLC) of are used to control the motion of walking on uneven terrain for humanoid robot. Finally, simulations of different methods are achieved.

External non-collision constraint for humanoid robot

External non-collision constraint for humanoid robot can be divided into two cases, one is collision between legs (mainly considering the lower body of humanoid robot) and external part, and the other is between feet and floor.
Constraint for the first case can be described by 2D geo- metric constraints in sagittal plane [16]. According to a fundamental theorem in computational geometry, given three points, p1, p2, p3, the point p3 is on the left (right) of the
directed line segment p →p2 if and only if the area composed of
these three points Ap1 p2 p3 > 0( < 0). The point p3 is on the

motion for robots using RRT algorithm [11].
segment p——→p2
if and only if A

p1p2p3
= 0. From the Fig. 2,

Artificial neural network (ANN) has a strong approach to
solve the problem of nonlinear mapping. It can be introduced to control the robot arm, motion optimization and many problems of robot control. Tao Li used a new recurrent neural network to control the online robot arm to learn the behavior. Because the training time is too long, only weights of output were trained [12]. Pedro introduced NN to recognize the gestures and to control the moves of the industrial robot. He gathered the data from data gloves and used two ANN to recognize different kinds of gestures. The rate of recognition is up to 95% [13]. However, how to reduce the training time for NN is a good question to discuss.
FLC is one of the soft computing techniques. It uses the controlling experience from human experts to make up the adverse effects brought from nonlinear and uncertain factors in dynamic characteristics of robot. However, it also has short- comings. Its control rules and membership functions cannot be
Ap1 p2 p3 and be easily computed by the coordinate values of p1,
p2, p3. The formula of computing is shown as bellow.
1
Ap1 p2 p3 = 2 [x1(y2 — y3)+ x2(y3 — y1)+ x3(y1 — y2)]	(1)

Fig. 2. Distance of lines.


Motion planning on uneven terrain

Uneven terrain can be assumed to be convex part and concave part in 2D. For humanoid robot, crossing convex part and concave part can be analyzed as stepping on and off stairs respectively. The model of movement is shown in Fig. 4.




Fig. 3. Model of foot for stepping over obstacle.
When humanoid robot walks on uneven terrain, if its foot trajectory is not handled properly, external obstacles collision happen very easily, and so the robot will lose stability. We will take robot stepping across obstacles within single supporting period as example to analyze the constraints. As shown in
Geometric constraints

According to the stability constraints in [17], constraints of stepping off stairs for humanoid robot are shown as in Fig. 5. From formula (1), combined with geometric model of hu- manoid robot in stepping over stairs, constraints during the double supporting period can be obtained. The details of
constraints are shown in formula (2)

Fig. 3, the supposed the starting point of foot is on the point s(sx, 0), the final location is on the point e(ex, 0), the highest point of obstacle is on c(cx, h), and the height is h. f is defined as a fourth-order polynomial function. Let f contain those three
8 max A
>< max A
z0 z3 sh1 z3 z4 sh1
Az0 z3 sh2 Az3 z4 sh2

; Az0 sh2 sh1

; Az3 sh2 sh1
Ash1 z3 sh2 Ash1 z4 sh2
 > 0
 > 0

(2)

points above, and f '(s)= f '(c)= f '(e)= 0. After a simple
mathematical iteration, the expression of f (s ; e ; c )= 0 can	>
Az0 z3 z4 > 0

x  x  z
>:	l	l

be achieved. During the movement of robot, if the heel (hx, hz)
and toe (t , t ) are always over the movement trajectory,
— 1 ≤ x
2
com
≤ Sw
— X1
+ X2 + 2

x	z
avoidance will succeed, which hz ≥ f (hx) and tz ≥ f (tx).







































Fig. 4. Parameters of model of going uneven terrain for humanoid robot.


x1=x z1=zf
x2=r2×sin(q2)+x z2=r2×cos(q2)+zf x3=—r3×sin(q3)+l2×sin(q2)+x z3=r3×cos(q3)+l2×cos(q2)+zf
x4=r4×sin(q4)—l3×sin(q3)+l2×sin(q2)+x z4=r4×cos(q4)+l3×cos(q3)+l2×cos(q2)+zf x5=(l5—r5)×sin(q5)—l3×sin(q3)+l2×sin(q2)+x z5=—(l5—r5)×cos(q5)+l3×cos(q3)+l2×cos(q2)+zf x6=(l6—r6)×sin(q6)+l5×sin(q5)—l3×sin(q3)+l2×sin(q2)+x z6=—(l6—r6)×cos(q6)+l5×cos(q5)+l3×cos(q3)+l2×cos(q2)+zf x7=Sw—X1+X2—l7/2
z7=Sh
(3)
where, ri represents the distance between joint and COM, li is
the length of link, x and zf are the trajectories of ankles [17]. The trajectory of ZMP of robot during the processing of stepping on stairs is shown in formula (4)



Fig. 5. Feasible model of going downstairs for humanoid robot.
xzmp =
7
i=1
 mi(z€i + g)xi — mix€izi — Iix€qix 
P
(4)

where, Sw and Sh are the width and height of the stairs
7
i=1
mi(z€i + g)

respectively. zi(i = 0, 1, 2, 3, 4) represent the joints in legs of
robot. l1, l7 are the width of left and right legs respectively. X1,
X2 is distance between the center of foot and the edge of stairs. xcom represents the abscissa of center of gravity. The pro- cessing of stepping on stairs is similar to this motion, the details can be found in [17].

Stability constraints

Regarding the stability constraints for a humanoid robot, we supposed the friction between the robot foot and stairs is large enough, and ensures that the robot does not slide during the movement. Therefore, the stability constraints can be judged by calculating the ZMP of robot.

Kinematic analysis on uneven terrain

The period of stepping over stairs T is similar with walking on flat terrain, which can be divided into double support period Td and single support period Ts. In a case study of sagittal plane motion it is supposed that the initial location of robot is the following: its right leg is on the stairs, and the left leg is under the right one. The distance between the two legs is one step. After one period T of walking, the robot reached the final location, where the left leg is on the right one, and the distance between the two legs is also one step. The movement is shown
where, mi is the mass of each link, Iix represents moment of
(i      =     1,      2,      …7). inertia of each link, €qix is joint rotation angular acceleration.
Hybrid particle swarm optimization (MPSO)

volves xi,j(t + 1) and xi,j(t) , and actually, the middle points x1(t + 1) and x2(t + 1) have been counted more than once. In normal PSO algorithm, updating the location only in- However, these two points may be better than point xi(t + 1) , therefore, single-step sequential addition in normal PSO is
updated into distributed computing. The middle points can be obtained as shown in formula (5) and (6).
x1(t + 1)= xi(t)+ vi(t + 1)	(5)
x2(t + 1)= x1(t + 1)+ c1•r1•(pbesti(t)— xi(t))	(6)
The next step is to calculate the function values of the two
f (xi(t + 1)).The smaller one is used to update xi(t + 1) and the middle location, and compare them with the objective function detail of algorithm is shown as bellow [5].
v1(t + 1)= vi(t); x1(t + 1)= xi(t)+ v1(t + 1)	(7)

in Fig. 3. The details of parameters of the robot are present
above.
The single support period of the robot can be similar to the multi-link inverted pendulum motion. Supposing the link mass of  robot  is  even,  and  each  COM  coordinates
(xi, zi)(i = 1, 2..., 7) leads to the formula (3)
v2(t + 1)= v1(t + 1)+ c1•r1(pbesti(t)— xi(t));
x2(t + 1)= x1(t + 1)+ v2(t + 1)
v3(t + 1)= v2(t + 1)+ c2•r2(gbesti(t)— xi(t));
x3(t + 1)= x2(t + 1)+ v3(t + 1)
(8)



Fig. 6. Membership function distributions for input and output variables of the first module of fuzzy logic controller.


8><
(wmax — wmin)*(f — fmin)

8 x1(t + 1) if f (x1(t + 1)) ≤ f (x2(t + 1))
>
wmin —
w =
>
 favg
— fmin
	, f ≤ favg
(13)

>< and f (x1(t + 1)) ≤ f (x3(t + 1))
: wmax, f ≥ favg

and f (x2(t + 1)) ≤ f (x3(t + 1))
: x3(t + 1) others
This algorithm divided the single-step updating formula of
particle velocity in normal PSO into three steps, and selects the best one of three position vectors. It can refine the process of searching particle trajectories and increase the update rate of individual extreme.
This algorithm improves the performance of the algorithm based on normal PSO without increasing the complexity. However, this method has defect on the avoiding local optima. To solve this problem, the concept of crossover in genetic algorithm is introduced. In each iteration, a specified number of crossover particles are selected to put into the hybrid pool according to the crossover probability. The particles in hybrid pool will crossover randomly to produce the same number of child particles (child ) and update the parent particles ( parent) using child particles. The position of child can be obtained by cross computing the positions of parents. The details are shown in formula (11).
child(x)= p•parent1(x)+ (1 — p)•parent2(x)	(11)
where, p is a random number between 0 and 1. The velocity of
child can be reached by formula (12)
child(v)= parent1(v)+ parent2(v) |parent (v)|	(12)
|parent (v)+ parent (v)|	1
where, wmax and wmin represent the MAX and MIN of w respectively. f is the current value of objective function. favg and fmin are the current average target and minimum target for all particles. When the target value of each of the particles tends to converge into local optimum, the inertia weight will be increased. While the target values tend to disperse, the inertia weight will be decreased. Meanwhile, for the particles whose objective functional value is better than average ones, their corresponding factor of inertia weight should be smaller, in order to be protected. The details of the algorithm are shown as bellow:

Step 1: Initial the position of particles xi,j and velocity vi,j randomly, and initial the personal best value Pbest and global best valueGbest.
Step 2: Evaluate fitness of each particle, store the current position and fitness of each particle in Pbest , and store the best position and fitness from the whole Pbest in Gbest.
Step 3: Update the velocity and position from formula (7) to formula (10).
Step 4: Update the weight by formula (13)
Step 5: For each particle, compare its fitness to the best position it passed, and if it is better, update the personal best position by current position and then compare the whole current Pbest to Gbest, and update the Gbest.
Step 6: Select number of particles to put into the hybrid

1	2

Meanwhile, for balancing the global search ability and local improvement capacity in PSO algorithm, a non-linear dynamic inertia weight coefficient formula is proposed. The expression of the formula is shown as bellow.
pool according to the crossover probability. Select two particles randomly to crossover the same number of child particles, calculate the position and velocity of child par- ticle by formula (11) and (12).



Fig. 7. Membership function distributions for input and output variables of the second module of fuzzy logic controller.



Table 1
Parameters of robot.
Table 2
Weights of NN obtained after MPSO.


ij	ij





6	1.8	0.10	0.15	0.0922
7	0.4	0.05	0.02	0.0005	ij	ij

Step 7: If the finishing condition is confirmed (predefined computing precision or iteration numbers), stop searching, output the result, else return step 3 to go on searching.



Design of neural network optimized by MPSO algorithm

Design of neural network

According to the features of humanoid robot stepping over stairs, two three-forward networks are designed [17]. The input layer of first network are parameters X1 and X2, which are in the double support period of stepping over stairs for robot. The hidden layer have M nerve cells and the output layer are parameters L2 and H2. Based on different inputs X1
and X2, let Fd = ZMPx — X2 — 1 (l1 + l7) be fitness function,

network, and the output are dqi(i = 1, 2, 3, 4), V2(i = 1, 2; j = 1, 2, ...N) are the weights between input layer and hidden layer, W2(i = 1, 2...N; j = 1, 2, 3, 4) are the weights between hidden layer and output layer.

Neural network optimized by MPSO

The advantage of using PSO algorithm to train the Neural Network is without using the gradient information. Although the global convergence of PSO algorithm is relatively good, the speed of convergence of PSO algorithm is slower. A MPSO algorithm is introduced to train the weight of NN. Given a NN, only coding for connection weight is required,

2	4	and mapping to individual with code string representation.

double support area of robot. V1(i = 1, 2; j = 1, 2, ...M) are which means the ZMP in initial condition is in the center of W1(i = 1, 2...M; j = 1, 2) are weights between hidden layer weights between input layer and hidden layer while and output layer.
qi(i=5,6) in the most stable condition during the double sup- When parameter L2 and H2 are confirmed, the value of let the value of dqi(i = 5, 6) be the input of the second neural port period can be obtained. During the single support period,

Fig. 8. Trajectories of joints based on MPSONN.
Meanwhile, each fitness function of weight is evaluated, and fitness value is calculated. Therefore, the problem of training for NN can be converted to a problem of finding a group of

Table 3
Optimized rule based for the module of fuzzy logic controller.






Fig. 9. Trajectories of joints based on MPSOFLC.

Fig. 10. Iterations of NN based on different PSO.

best weights to make the connection weights of NN MAX. The detail of the algorithm is shown as bellow.

Step 1: Select suitable hidden cells, and initial the NN. Step 2: Code the particles of PSO, which consists of V1,












Fig. 12. Trainning time under different control methods.


Step 3: Initial the position of particles xi,j and velocity vi,j , and initial the personal best value Pbest and global best valueGbest.
Step 4: Each particle is mapped to the weights of NN and constitutes a NN.
Step 5: Select the samples randomly from sample space to train NN.

The next steps are similar with the algorithm MPSO described above.
Final Step: Take the best Gbest to be used as a group of weights for NN.

W1 and bi.

	

Fig. 11. Iterations of optimizing rules of fuzzy logic controller based on different PSO.

Fig. 13. ZMP Trajectories under different controll methods.



Fig. 14. Simulations of going up and down stairs for humanoid robot (MPSO).

Fig. 15. Simulations of going up and down stairs for humanoid robot (MPSOFLC).


Design of fuzzy logic controller optimized by MPSO algorithm

A fuzzy logic controller is designed and the rules are optimized offline by MPSO algorithm. There are two fuzzy logic controllers. The first one is used to calculate the node angle of robot during the double support period. The second one is used to calculate the node angle changes of robot during the single support period.

Design of fuzzy logic controller

The membership function distributions for input and output variables of two fuzzy logic controllers are shown in Figs. 6 and 7. Where VL, L, M, H, VH represent very small, small, me- dium, high, very high. NL, NS, Z, PS, PL are negative, slightly
negative, zero, slightly positive, positive.

Fuzzy logic system optimized by MPSO

System framework
In the fuzzy control system the key factors to efficient of control are rules and membership. With traditional trial and random method it is difficult to select the correct control rules and membership, resulting in incomplete control rules and impact of the effectiveness of the system control. Therefore, multiple
control rules which are selected randomly are used to control the system, and according to the control effect, optimal control rules are determined through PSO optimization algorithm.
According to the first controller, each of two input parame- ters has five linguistic variables, and resulting in 25 rules. First, the condition parts of the 25 rules are created by hand, and then two group integers are generated randomly, each group has 25
integers varying between [—2,2], —2 corresponding to VL, —1
corresponding to L, and so on. Therefore, the two group integers
correspond to the L2 and H2 respectively, which are results of X1 and X2 with fuzzy rules. According to the second controller, which is similar with the first one, 25 rules are created by hand
corresponding to dqi i = 1, 2, 3, 4, which are the results of dq5 and four group integers are generated randomly, each group (25 × 2 + 25 × 4),where, each particle represents a rule set. The anddq6. The vector dimension of each particle is set to 150 details of algorithm are shown as bellow.

Step 1: Select a proper fitness function and determine the fuzzy area and fuzzy reasoning methods.
Step 2: Code the particle of PSO, which are composed of linguistic variables such as VL, L, M, H, VH and NL, NS, Z, PS, PL
Step 3: Initiate the position of particles xi,j and velocity vi,j , and initiate the personal best value Pbest and global best value Gbest.



Fig. 16. Simulations of going up and down stairs for humanoid robot (MPSONN).

Fig. 17. structure of robot NAO.

Step 4: Give a group value to particle randomly. The group values are composed by the rules of fuzzy logic controller. Step 5: Calculate the result according to the rules.
The next steps are similar with the algorithm MPSO described above.
Final Step: Take the best Gbest to be used as a group of weights for fuzzy logic controller.

Sensitivity analysis for system
For the optimization of fuzzy logic controller, both the fitness and control rules can be optimized. Considering optimization
may increase the sensitivity of system and reduce the robustness of system. In this paper, only rules are optimized.
Take the first fuzzy logic controller as an example. As input values are the variables of X1 and X2, output values are the variables of H2 and L2, a control rule can be expressed as bellow:
IF X1 = Ai and X2 = Bi then H2 = Ci and L2 = Di	(16)
and.      i2{VL,   L,   M,   H,   VH} where, Ai, Bi, Ci, Di, are the five linguistic variables of output,


Simulation of neural network optimized by MPSO (MPSONN)










Table 5
The Pitch Motion.
A BP neural network is used as a motion control network. The number of hidden cells of BP is 8, and the transfer function between
training. The learning rate is 0.3, error is 10—5. The number of the layers are purelin, tansig and logsig. There are 500 samples for dimensions of selected PSO is 62, the number of particles is 30,
learning factors c1, c2 are both 2, and number of iteration is 500.
The trajectories of all joints of robot during the process of stepping over stairs are shown in Fig. 8.
The weights of NN optimized by MPSO are shown in Table 2.
Simulation of fuzzy logic controller optimized by MPSO (MPSOFLC)
The number of particles used to simulate is 30, learning factors are both 2, number of iteration is 500. The most common max-min from Mamdani method is introduced to reason. A common trigonometric function is used as the membership  function.  The  weighted  average  judgments

Pn  m(U )•U

When optimizing fuzzy rules based on MPSO, the fitness

method of membership function u =
n	is adopted to
m(U )

changed along with the iteration.
e — ek/Kmax
i=1
take defuzzification. The rules of two fuzzy logic controller optimized by MPSO are shown in Table 3.
Using method MPSOFLC, the trajectories of all joints of

f (xi)= af (xi)+ e + ek/Kmax (fmax — fmin)	(17)
where, fmax is the current MAX fitness value, fmin is the current MIN fitness value, k is the current iteration numbers, Kmax is the MAX iteration number, anda > 0 refers to a constant. From
the formula (17) we know that this control method increases
the computational efficiency, but depends on the system robust performance. Therefore, this method can be used on line.

Experiments

Simulation for humanoid robot walking on uneven terrain is created in Matlab. The parameters of each joint are described as shown in Table 1.



Table 6
Datas from FSR by NAO.

robot are show in Fig. 9.
Comparison of different methods

Comparison of different PSO
In the process of using the basic PSO and MPSO to opti- mize the weights of NN, the same number of particles, the same initial particles and the same learning factors are arrived.
After 500 iterations, the error is 10—5, the process of iteration
is shown in Fig. 10. In Fig. 11, basic PSO and MPSO are used
to optimize the rules of FLC, where the number of dimensions is 150 and number of particles is 40.
Comparison of control methods
In the process of stepping over stairs for humanoid robot, NN, PSONN, PSOFLC, MPSONN, and MPSOFLC are
introduced to control the robot. The time consumed by different methods is displayed in Fig. 12.
From the Fig. 12, we can conclude that MPSONN is the fastest method to control the robot to step over stairs compared to other methods, and the NN is the slowest one. The ZMP trajectory is used to compare the stabilization robot through different methods. From Fig. 13, we can see, using direct PSO to control the robot is not a good method. MPSONN and MPSOFLC can control the robot to step over stairs and obtain better stability.
Simulation of process of stepping over stairs for humanoid robot

The simulations of stepping over stairs through different methods are described in Figs. 14e16.



Fig. 18. Snapshots of stepping motion by NAO.



Experiments on real humanoid robot (NAO)

Nao is a humanoid robot desigend by Aldebaran Robotics, it can run the method present in this paper effectively. The structure of robot NAO is described as in Fig. 17. Method of MPSONN is selected to achieve the stepping motion by NAO. The parameters are shown in Tables 4e6 and snapshots of stepping motion are shown in Fig. 18.
To perform the rotation of the body parts, we place a frame at each joint. When the robot is at the zero pose, all joint frames have the same orientation. Then, roll rotations take place around the X axis, pitch rotations around the Y axis and yaw rotations around the Z axis. The detail of parameters of robot between distance and jonts are described as in Tables 4 and 5. In ladder, the sole of robot's feet can feel different pressure.
Through the monitor, we can get the value of FSC (Feedback
Shift Register)of four point under feet: FsrFL, FsFR, FarRL, FarRR, and the distance of offset: COOx, COOy. The value returned for each FSR is similar to Kg. If FSR are calibrated (see robot configuration keys), the value in kg is about 20% precision (depending time and real force position). Without calibration the error could be more important, and is specific to each sensor. The detail experimental datas are shown in Table 6.

Conclusion

Stepping over stairs can be taken as an example of walking on uneven terrain for humanoid robot. A controller based on NN and FLC are designed to control the robot walking. A mixed PSO algorithm is present to optimize the weights of NN and rules of FLC. Comparison of different control methods are achieved through the simulations and tests the effectiveness of the proposed methods.

Acknowledgment

This material is based upon work funded by State Key Lab- oratory of Robotics and System (HIT) Foundation of China under Grant No. SKLRS-2012-MS-06, China Postdoctoral Science Foundation under Grant No. 2013M531022, Research project of laboratory work in universities of Zhejiang Province under Grant No. ZD201504, Educational technology research program of Zhejiang Province under Grant No. JA027.

References

F. Shouwen, S. Min, S. Mingquan, Real-time gait generation for hu- manoid robot based on fuzzy neural networks. The Third International Conference on Natural Computation, 2007, pp. 142e150.
Vundavilli Pandu Ranga, Pratihar Dilip Kumar, Appl. Soft Comput. 9 (2009) 191e208.
Tong Zhang, Research on Walking Control and Motion Planning for Humanoid Robot [Dissertation], South China University of Technology, Guangzhou, 2010, pp. 22e23.
Jha Rahul Kumar, Robotics Aut. Syst. 53 (2005) 15e35.
Fang Gao, Research on Intelligent Particle Swarm Optimization algo- rithm.[Dissertation], Harbin Institute of Technology, Harbin, 2008, pp. 42e57.
Si shubing, Sun shudong, Xu yaping, Multi-Colony Diploid Immune Algorithm( MCDIA) for Better Job-Shop Scheduling. Journal of Northwestern Polytechnical University 25 (1) (2007) 27e31.
E. Alba, F. Luna, A.J. Nebro, et al., Parallel Comput. 30 (2004) 699e719.
Seung-Mok Lee, Hanguen Kim, Hyun Myung, Cooperative coevolution- based Model Predictive control for Multi-robot Formation, 2013 IEEE International Conference on Robotics and Automation(ICRA), Karls- ruhe, Germany, May 6e10, 2013, pp. 1882e1887.
Micael S. Couceiro, Rui P. Rocha, Nuno M. Fonseca Ferreira, Fault- tolerance assessment of a darwinian swarm exploration algorithm under communication constraints, 2013 IEEE International Conference on Robotics and Automation(ICRA), Karlsruhe, Germany, May 6e10, 2013, pp. 2000e2005.
Ezequiel Di Mario, Inaki Navarro, Alcherio Martinoli, The role of environmental and controller complexity in the distributed optimization of multi-robot obstacle avoidance. 2014 IEEE International Conference on Robotics and Automation (ICRA), Hong Kong Convention and Exhibition Center, Hong Kong, China, May 31eJune 7, 2014, pp. 571e577.
Vojtech Vonasek, Martin Saska, Karel Kosnar and Libor Preucil, Global motion planning for modular robots with local motion primitives. 2013 IEEE International Conference on Robotics and Automation(ICRA), Karlsruhe, Germany, May 6e10, 2013, pp. 2450e2455.
Tao Li, Kohei Nakajima, Rolf Pfeifer. Online learning for behavior switching in a soft robotic arm. 2013 IEEE International Conference on Robotics and Automation (ICRA), Karlsruhe, Germany, May 6e10, 2013, pp. 1288e1294.
Pedro Neto, Dario Pereira, J. Norberto Pires, A. Paulo Moreira. Real- time and continuous hand gesture spotting: an approach based on arti- ficial neural networks. 2013 IEEE International Conference on Robotics and Automation (ICRA), Karlsruhe, Germany, May 6e10, 2013, pp. 178e183.
J.H. Park, Fuzzy Sets Syst. (2003) 189e203.
C. Zhou, Q. Meng, Fuzzy Sets Syst. 134 (2003) 169e187.
S´ebastien L, Nacim R, Philippe F. Planning, Fast re-planning of safe motions for humanoid robots: application to a kicking motion. IEEE/RSJ International Conference on Intelligent Robots and Systems, 2009, pp. 441e447.
Zhong Qiubo, Piao Songhao, Gao Chao, Int. J. Adv. Robotic Syst. 7 (3) (2010) 209e216.


Qiubo Zhong he was born in 1980, and received his
B.S and M.S in Computer Science of Technology from Harbin University of Science and Technology, Harbin
,China, in 2003 and 2006, He received his Ph.D de- grees in Computer Application from Harbin Institute of Technology, Harbin, China, in 2011. He is currently working in School of Electronic and Information En- gineering, Ningbo University of Technology, Ningbo China. His interests include humanoid robot, motion planning.



Fei Chen he was born in 1983, and received his B.S in Computer Science of Technology from Xi'an Jiaotong University, Xi'an ,China, in 2006 He received his M.S.
degree in computer Application from Harbin Institute
of Technology, Harbin, China, in 2008, He received his Ph.D degrees in Computer Application from Nagoya University, Japan, in 2012. He is currently working in Advanced Robotics Department, Istituto Italiano di Tecnologia, Genova, Italy. His interests include robot, motion planning, image processing.
