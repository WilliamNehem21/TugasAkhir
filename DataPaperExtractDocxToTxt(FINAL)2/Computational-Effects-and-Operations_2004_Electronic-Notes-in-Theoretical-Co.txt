Electronic Notes in Theoretical Computer Science 73 (2004) 149–163 
www.elsevier.com/locate/entcs


Computational Effects and Operations: An Overview
Gordon Plotkin and John Power1
Laboratory for the Foundations of Computer Science School of Informatics, University of Edinburgh King’s Buildings, Edinburgh EH9 3JZ, SCOTLAND

Abstract
We overview a programme to provide a unified semantics for computational effects based upon the notion of a countable enriched Lawvere theory. We define the notion of countable enriched Lawvere theory, show how the various leading examples of computational effects, except for continuations, give rise to them, and we compare the definition with that of a strong monad. We outline how one may use the notion to model three natural ways in which to combine computational effects: by their sum, by their commutative combination, and by distributivity. We also outline a unified account of operational semantics. We present results we have already shown, some partial results, and our plans for further development of the programme.
Keywords: computational effects, operations, generic effects, monads, enriched Lawvere theories, modularity, operational semantics


Introduction
Part of the enterprise of the semantics of programming languages is to sepa- rate out and analyse their features. One such is that of side-effects, the “side” indicating that they occur “on the side” while polymorphically computing something else (or, in the case of commands, nothing at all). Side-effects con- cern the store, but one can see other features similarly as polymorphic effects: examples are various forms of nondeterminism, printing, or jumps of various kinds. The polymorphism resides in the fact that these operations apply at all types. These computational effects form the focus of our investigation.

1 This work is supported by EPSRC grant GR/M56333.


1571-0661 © 2004 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2004.08.008


Computational effects invariably arise from operations such as a nonde- terministic choice operation, operations for writing or reading, or operations for looking up or updating state. So we need a unified account of operations. Once we have such an account, we need to extend it to an account of mod- ularity, the various ways in which computational effects combine, and to an account of dynamics, for instance given by structural operational semantics. We also need to understand the logic of effects, particularly their equational logic and its relationship with observations. We have begun a programme of research in this direction, and this paper outlines our achievements to date and some questions on which we are currently working.
The initial work on a unified semantic account of computational effects is due to Eugenio Moggi [19,20,21], more recently described in [3]. Moggi primarily considered computational effects, which he called “notions of com- putation”, in the setting of call-by-value λ-calculus, with examples drawn pri- marily from the programming language M L. His central semantic construct was that of a strong monad on a category with finite products. His ideas have been particularly adopted in functional programming [3], in particular in the development of the language Haskell. Paul Levy has also extended some of his ideas to call-by-name and to a combined calling mechanism in [17]. Our approach relates closely to Moggi’s, but while he emphasised the construction of an object TX of computations of type X as primitive, we give operations a more primitive role, with TX treated as derived.
Our central notion is that of Lawvere theories [30,9], particularly count- able enriched ones. The study of ordinary Lawvere theories is equivalent to the study of universal algebra or to the study of equational theories or to the study of finitary monads on Set [2] (the definitions of finitary endofunctor and monad, as well as a category theoretic account of universal algebra and Lawvere theories, also appear, more accessibly for computer scientists, in [1]). The study of countable enriched Lawvere theories is more general: in terms of strong monads on a category with finite products, it is equivalent to demand- ing that the category be locally countably presentable as a cartesian closed category and that the monad have countable rank. All the leading examples of base categories satisfy these properties: such categories include Set, Poset, ωCpo, all presheaf categories and, if we weaken the countability condition, all Grothendieck toposes. Some restricted categories of domains are not included. All Moggi’s leading examples of monads have countable rank, except for the continuations monad. So we include the monads for exceptions, side-effects, nondeterminism, interactive input/output, and probabilistic nondeterminism, as well as a monad for local state. Several of the monads are easier to describe in terms of enriched Lawvere theories, and the concept of enriched Lawvere


theory lends itself quite directly to accounts of the operations and of modu- larity [9].
An ordinary Lawvere theory amounts to a clone of operations and equa- tions, and it is typically described as being freely generated by operations and equations. The generalisation to countable Lawvere theories allows the op- erations to be of countable arity and correspondingly for the equations. The further generalisation to enrichment allows more sophisticated arities. For in- stance, in the case of enrichment over Poset, the two element poset ≤ with
⊥≤ T may act as an arity. It also allows correspondingly sophisticated notions of operations and equations, as we outline in Section 2. All the computational effects we consider are easily described as countable enriched Lawvere theories freely generated by such operations and equations. In all cases, the operations are computationally simple and natural, for instance lookup and update for side-effects, and read and write for interactive input/output. The equations are similarly natural and yield corresponding programming language equa- tions.
One might wonder why we consider enriched Lawvere theories, which are essentially single-sorted algebraic theories, rather than multi-sorted theories based on a family of primitive types. The reason is that the the single- sortedness here refers to a semantic category rather than syntactically given types. We first choose a semantic base category such as Set or ωCpo or a presheaf category, and then we study enriched Lawvere theories relative to that base category. So the single-sortedness is relative to the chosen semantic category and does not imply single-sortedness of the syntax of a programming language; it rather refers to the polymorphism of the operations, modelled by a strong form of naturality.
The correspondence, given by the Yoneda embedding, between arrows of the Lawvere theory and algebraic operations plays a subtle role here. Nonde- terminism typically appears in a programming language as a polymorphic syn- tactic nondeterministic choice construction M or N : σ (for M, N : σ) modelled by a correspondingly polymorphic algebraic operation ∨ : TX × TX −→ TX in the base category, where TX is the free algebra on X. This corresponds to a map 2 −→ 1 in the Lawvere theory, or equivalently a map 1 −→ T 2 in the base category, viz the “indeterminate truthvalue” tt ∨ff . We call the latter map the generic effect corresponding to the operation. But in examples other than the nondeterministic ones, in particular in infinitary examples such as interactive input/output, it is the generic effects, e.g., read : 1 −→ TI and write : O −→ T 1 where I is an object of inputs and O is an object of outputs, that appear more directly in a programming language. The underlying math- ematics is analysed in [28], with more analysis of its programming significance

in [29]. We give a very brief outline in Section 2.
The notion of countable enriched Lawvere theory provides us with a natural way approach to modularity, how computational effects may be combined. Typically, one takes the disjoint union of the operations, together with all the equations, and adds further equations relating the two classes of operations: one might add no equations, yielding the sum of effects; one might demand the two families of operations commute with each other, yielding the commutative combination of effects; or one might ask for distributivity of one family of operations over the other, or perhaps of each family over the other. Except for distributivity, such combinations are investigated in [9]; we outline the situation in Section 3.
A natural question, and one we have considered, is whether one can pro- vide a unified treatment of structural operational semantics for computational effects. In fact, we can provide a unified deﬁnition of a structural operational semantics [27], but it is not entirely satisfactory yet. It works well for nondeter- minism, probabilistic nondeterminism, printing, and combinations thereof, but it does not agree with a reasonable operational semantics for side-effects.We outline our work to date in Section 4.
Finally, we outline some further issues in Section 5. We consider operations such as handle for exceptions, which one might call deconstructors, regarding our operations as constructors (of effects): although these are operations, they are not algebraic ones as the others mentioned so far are. We are grateful to Andrzej Filinski for explaining the notion of deconstructor to us. We also outline a possible systematic way in which to extend our modelling to local phenomena such as the extension from global to local state [29]. And we outline some ideas about how to model observations and some ideas for giving an enriched notion of equational theory.


Enriched Lawvere Theories
In this section, we recall the definition of countable enriched Lawvere theory, give some examples, and explain the relationship with monads [9]. We do not define the notion of locally countably presentable category here [2], or what it means for a category to be locally countably presentable as a cartesian closed category. So we take the definition for granted. But we do need to recall the notion of cotensor [13].
The notion of cotensor is the most natural enrichment of the construction AX for an object A of a category and a set X. Given an object A of a V - category C and given an object X of V , the cotensor AX satisfies the defining

condition that there is an isomorphism in V
C(B, AX ) ∼= C(B, A)X
V -natural in B. For instance, taking V to be Poset, cotensors allow us to describe not only objects such as A × A in a locally ordered category, but also objects such as A≤. This possibility allows us, in describing theories, to consider a greater range of arities than those given by countable sets and to incorporate inequations in the context of an elegant, coherent body of mathematics.
Given a category V that is locally countably presentable as a cartesian closed category, for instance ωCpo, for concreteness, we define Vℵ1 to be a skeleton of the full sub-V -category of V determined by the countably pre- sentable objects of V . So it is equivalent to the free V -category with countable tensors on 1 [13,30].
Definition 2.1 A countable Lawvere V -theory is a small V -category L with countable cotensors together with a strict countable-cotensor preserving identity- on-objects V -functor I : V op −→ L. A model of L in a V -category C with countable cotensors is a countable-cotensor preserving V -functor M : L −→ C.
So a countable Lawvere V -theory L has a distinguished object, namely the unit of V , which acts as the single-sort of the theory, with every object of L being a canonical countable cotensor of it, where countable cotensor means cotensor with a countably presentable object of V . The V -category L typically extends V by the free addition of operations subject to equations.
For any countable Lawvere V -theory L and any V -category C with count- able cotensors, we thus have the V -category Mod(L, C) of models of L in C; the maps of the underlying category are given by all V -natural transformations (and the naturality condition implies that they respect countable cotensors). The usual way to describe countable Lawvere V -theories is by means of V - sketches, with the Lawvere V -theory given freely on the V -sketch. The notion of V -sketch is implicit in [15], but there does not seem to be a thorough examination of precisely that concept in the literature: we plan to provide one, together with a definition of equational V -theory, in future work. The idea is that to give a V -sketch amounts to giving operations and equations, the difference from ordinary sketches only lying in the extended notion of arity.
Barr and Wells’ book [1] treats ordinary sketches, i.e., the case of V = Set, in loving detail.
Example 2.2 The countable Lawvere theory LI/O for interactive input/output is the free countable Lawvere theory generated by operations read : I −→ 1 and write : 1 −→ O, where I is a countable set of inputs and O a countable


set of outputs. A model of LI/O consists of a set A together with functions readA : AI −→ A and writeA : A −→ AO. The latter may equivalently be expressed as a function writeA : O × A −→ A. So the free model of LI/O generated by an arbitrary set X is given by the recursive type
TX = µY.(O × Y + Y I + X)
with functions defining readTX and writeTX given by unfolding the recursion in the definition of TX. To give the free model on X for every set X is equivalent to giving the monad on Set induced by LI/O (see Theorem 2.7). And this monad is exactly Moggi’s monad for interactive input/output. So interactive input/output is more directly and more simply modelled by the countable Lawvere theory LI/O than it is by the corresponding monad.
Observe that the notion of enriched Lawvere theory makes operations pri- mary, as they generate the theory. Arrows of the Lawvere theory induce, via the Yoneda embedding, operations on free models. For an arrow c −→ d of the Lawvere theory induces, via the Yoneda embedding, a natural transformation (T −)c −→ (T −)d, where T is the monad induced by the Lawvere theory. As we have said in the introduction, operations such as ∨ used to model nonde- terminism or probabilistic nondeterminism typically appear as such natural transformations [7,11,12,25,26].
In other cases, especially when one has infinitary operations, for instance for interactive input/output as above, where I and O are typically infinite, the generic effects appear more directly in a programming language than do the corresponding operations on free models. For instance, a language with interactive input/output will typically contain types in and out, and will con- tain expressions read : in and write M : 1 for M : out. To give an arrow c −→ d of a Lawvere theory is equivalent to giving a map (the generic ef- fect) d −→ Tc in the base category, where TX is the free model on X. The programs read and write have semantics given by maps er : 1 −→ TI and ew : O −→ T 1, corresponding to arrows I −→ 1 and 1 −→ O in the Lawvere theory. The correspondence between operations and generic effects is analysed in [28], along with other equivalent formulations of the notion of operation, and [29] contains more analysis of examples, especially for state, albeit written in the slightly different terms of [14].
An ordinary sketch, and hence a countable Lawvere theory, yielding the side-effects monad is essentially given in [29].
Example 2.3 The countable Lawvere theory LS for side-effects (when S is V alLoc for a finite set Loc and a countable set V al) is the free countable Lawvere theory generated by the operations update :1 −→ Loc × V al and lookup : V al −→ Loc subject to the seven natural equations listed in [29], four


of them specifying interaction equations for update and lookup and three of them specifying commutation equations: one such is
updateloc,v(updateloc,v' (x)) = updateloc,v' (x)
These single-sorted operations and equations duly generate a Lawvere theory LS and we can speak of the models of LS in any category with countable products.
Now suppose we have a category C with both countable products and countable coproducts. By the general theory, we therefore have the category Mod(LS, C) of models of LS in C. The conditions on C suffice, for this particular Lawvere theory, for the forgetful functor U : Mod(LS, C) −→ C
to have a left adjoint, inducing a monad T on C. That monad is given by
TX = (   X)S and the canonical comparison functor from Mod(LS, C) to
T -Alg is an equivalence of categories. If C = Set, TX = (S × −)S, where S is the set V alLoc of states. So this agrees with Moggi’s monad for side-effects, but here one sees that monad arising from the natural operations and equations one associates with side-effects, and those operations are immediately induced on the free models rather than being additional structure.
An enriched Lawvere theory is generated by operations subject to equa- tions. Operations appear directly in describing programming languages, but equations do not. Typically, one rather has a notion of observation, then says two programs are equal if they are contextually equivalent relative to that notion of observation. So, in future work, we should like to develop a theory for the construction of enriched Lawvere theories from operations and obser- vations, rather than from operations and equations as implicit in the notion of sketch.
Another way to justify equations is via the notion of Hilbert-Post com- pleteness, and related ideas. Given an enriched Lawvere theory, one may ask whether the addition of any further equation forces the theory to collapse. If so, the theory is called Hilbert-Post complete. Examples of such theories are given by non-determinism and side-effects (see [29] for further explanation, with the caveat that there is an axiom missing in the last definition of the paper, making the final paragraph of the paper wrong as stated). Given that one accepts the equations of a theory, Hilbert-Post completeness then implies that one has found all possible equations.
Equations are also significant in their own right as they help to provide a proof system with which to reason about semantics: in order to prove that two complicated programs are equal, one wants a small finite number of equational axioms and rules with which to do so; so the equations, for instance those for side-effects mentioned above, should play a role. For instance, the equation

for side-effects given by
updateloc,v(updateloc,v' (x)) = updateloc,v' (x) corresponds to the program assertion
(l := x; let y be !l in M )= (l := x; M [x/y])
The complications involved with higher order types will mean that such equa- tions will not be complete for the language, but they will do part of the desired job. More analysis of the use of such equations for side-effects appears in [29].
We shall now consider how examples other than side-effects appear as countable Lawvere theories.
Example 2.4 Ignoring partiality, the countable Lawvere theory LP corre- sponding to a power-domain is the countable Lawvere theory freely generated by a binary operation ∨ :2 −→ 1 subject to equations for associativity, com- mutativity and idempotence, i.e., the countable Lawvere theory for a semilat- tice, see for instance [26].
For an example of a countable Lawvere V -theory that does not arise freely from an unenriched countable Lawvere theory, let V be ωCpo, and consider a countable Lawvere theory for partiality.
Example 2.5 The countable Lawvere ωCpo-theory L⊥ for partiality is the theory freely generated by a nullary operation ⊥: 0 −→ 1 subject to the condition that there is an inequality
1 	) 0
 
≥	⊥
id
v
1
where the unlabelled map is the unique map determined because 0 is the initial

object of Vℵ1
and therefore the terminal object of V op. A model of L⊥ in ωCpo

is exactly an ω-cpo with least element.
We have introduced a countable Lawvere theory LP for a semilattice. We use the same notation to denote the countable Lawvere ωCpo-theory for a semilattice: the generators and equations are the same, but the ωCpo-theory has more objects as there are countably presentable ω-cpos other than flat ones, and these additional objects generate additional maps. It is an open problem to give an explicit description of all the countably presentable objects of ωCpo. The countable Lawvere ωCpo-theory for a semilattice is just the


free countable Lawvere ωCpo-theory on the countable Lawvere theory for a semilattice.
This definition allows us to make immediate reference to the sum of effects. Using the terminology we shall define, we can make the following definition.
Example 2.6 The countable Lawvere ωCpo-theory LN for nondeterminism is given by the sum of the countable Lawvere ωCpo-theories LP for a semilat- tice and L⊥ for partiality. This result has been known in different terms for many years [26]. It follows from the fact that operations and equations for nondeterminism are given by taking those for a semilattice together with those for partiality, without the addition of any further operations or the imposition of any further equations.
Another non-trivial example of a computationally natural countable Law- vere ωCpo-theory is given by probabilistic nondeterminism [7,11,12]. More detail appears in [29], albeit in the mathematical terms of [14].
Now we have some examples, we compare the notion of countable enriched Lawvere theory with that of strong monad. Given a countable Lawvere V - theory and a V -category C with countable cotensors, there is a canonical forgetful V -functor U : Mod(L, C) −→ C, and, when C = V , this forgetful V -functor has a left V -adjoint, exhibiting Mod(L, V ) as equivalent to the V -category TL-Alg for the induced V -monad TL on V .
Conversely, given a V -monad T with countable rank on V , the V -category

Kl(T )op
1
determined by restricting the Kleisli V -category Kl(T ) of T to the

objects of Vℵ1 is a countable Lawvere V -theory LT . To give a V -enriched V -
monad is equivalent to giving a strong monad on V , so in order to make the comparison with Moggi’s definition a little more direct, we express the main abstract result in terms of strong monads [30].
Theorem 2.7 If V is locally countably presentable as a cartesian closed cat- egory, the constructions of TL from L and of LT from T induce an equiva- lence of categories between the category of countable Lawvere V -theories on V and the category of strong monads on V with countable rank. Moreover, the comparison V -functor is an equivalence of V -categories from Mod(L, V ) to TL-Alg.

Combining Computational Effects
In this section, following [9], we consider natural combinations of countable enriched Lawvere theories corresponding to natural combinations of compu- tational effects [9]. There are three such combinations of primary importance here: the sum, the commutative combination, and a distributive combination.


The simplest of these is the sum. The category of countable enriched Lawvere theories is cocomplete, so we simply consider the sum in that category. We have already mentioned in the previous section that the countable Lawvere ωCpo-theory LN for nondeterminism is the sum LP +L⊥ of the Lawvere ωCpo- theories LP for a semilattice and L⊥ for partiality. That is typical of the way partiality interacts with computational effects other than side-effects. Another class of examples is given by exceptions.
Proposition 3.1 Given a set E, if LE denotes the countable Lawvere theory for E nullary operations, and if L is any countable Lawvere theory, the monad TLE +L is given by TL(− + E).
The construction sending a monad T to T (− + E) has been called the ex- ceptions monad transformer [3,4]. The sum of countable Lawvere V -theories may also be characterised in terms of the categories of models, similarly to the characterisation of the commutative combination we present below. Details appear in [9].
The sum of Lawvere theories is also apposite in combining interactive in- put/output with other effects. Proposition 3.1 can be extended to characterise the sum of any Lawvere theory with a Lawvere theory freely generated by op- erations with no equations, as is the case for interactive input/output [10].
The second combination is given by the commutative combination of the- ories. It is most elegantly described by a universal property in terms of cat- egories of models, but we shall start by giving a more direct description as follows.
Definition 3.2 Given countable Lawvere V -theories L and L', the countable Lawvere V -theory L ⊗ L' is defined to be the countable Lawvere V -theory generated by the disjoint union of L(A, B) and L'(A, B) for each (A, B), re- specting composition and identities of L and L', and, suppressing canonical isomorphisms, subject to commutativity of
L(A, B) × L'(A', B') 	) L(A × B',B × B') × L'(A × A',A × B')

comp
v	v
L(A × A',B × A') × L'(B × A',B × B') 	) L(A × A',B × B')
comp
where the unlabelled maps are given by functoriality of × in each component.
The construction giving the commutative combination is part of a sym- metric monoidal structure on the category of countable Lawvere V -theories,

and it is definable by the following universal property.
Theorem 3.3 For any small V -category C which has countable cotensors, the V -categories Mod(L ⊗ L', C) and Mod(L, Mod(L', C)) are coherently equiva- lent.
The leading class of examples of a commutative combination of computa- tional effects corresponds to the side-effects monad transformer [3] as follows.
Theorem 3.4 Let LS denote the countable Lawvere V -theory for side-effects, and let L denote any countable Lawvere V -theory. Then the monad TLS ⊗L is isomorphic to (S × TL−)S.
The final combination of primary interest is given by distributivity. For instance, one requires a nondeterministic choice operation ∨ to model non- determinism and a probabilistic choice operation + to modelling probabilis- tic nondeterminism [7,11,12], and one wants distributivity of one over the other [18,34]. Another example of distributivity occurs when one has a pair of nondeterministic operations ∨ and ∧, such as for internal and external nondeterminism, and one wants distributivity of each over the other [8].
Informally, it is clear what is required here, and in the case of V = Set, we have a reasonable account. More generally, in the enriched setting, we have an outline treatment using an enriched notion of operad. But our account in the enriched setting is not definitive yet, so resolution of that is future work for us.

Operational Semantics
Lawvere theories, in contrast to monads, make operations primitive. So one may hope that they support a unified structural operational semantics for a calculus extending the computational λ-calculus introduced in [19]. We have made progress in this direction [27] as follows.
Consider a Lawvere theory generated by operations fα subject to equa- tions. We extend the usual notion of value for the computational λ-calculus to a notion of effect value, where an effect value is defined inductively to be a value V or a term of the form fα(t1, ··· , tn) where fα has arity n and each ti is an effect value. Each closed term t evaluates to an effect value, essentially by carrying along the operations fα that appear in t. The details of both small- step and collection big-step semantics appear in [27], together with adequacy results with respect to the usual semantics of the computational λ-calculus in the Kleisli category for the induced monad T .
For nondeterminism, the induced small-step semantics is essentially the


same as the usual one. The induced big-step semantics looks somewhat dif- ferent owing to the use of effect values. It simply does not have a rule like
  ti ⇒ Vi	
t ∨ t ⇒ V (i = 1, 2)
but rather it carries along the ∨ while evaluating t1 and t2, yielding a term of the form t(V1, ··· , Vn), where t is built using many copies of ∨. So the unified big-step semantics we propose is recognisably equivalent to the usual big-step semantics for nondeterminism but is formally a little different.
Similar remarks hold for probabilistic nondeterminism and printing. We believe that the idea should also work for infinitary operations, provided one allows corresponding infinitary syntax, and that should induce an operational semantics for generic effects. Moreover, this unified semantics extends to recursion [27]. But we do not obtain a reasonable semantics for side-effects, the problem being that all equations are ignored until the end, whereas side-effects seem to require use of them in defining a structural operational semantics. So we have still to investigate that; the distributive laws of [33,16] might help. Finally, we note that we do not have any systematic operational semantics for deconstructors.

Further Work
We end with an outline of our current work and plans for further questions we want to address.
For most of the computational effects we have studied, for instance side- effects, nondeterminism, and interactive input/output, the enriched Lawvere theories are generated by all of the interesting primitive operations subject to natural equations. But, as we have said, that is strikingly false for exceptions, as we only need the raise operation in order to generate the enriched Lawvere theory, making no use of the (non-algebraic) handle operation that is central to analysis of exceptions. A similar situation arises in modelling PROLOG. So we plan to extend our general analysis in order to incorporate such decon- structors: they should somehow be modelled in relation to the corresponding constructors, perhaps as inverses of some kind.
In [29], we showed how a monad for local state can be described in terms of operations and equations, extending the enriched Lawvere theory for global state. But we did not make precise the general nature of those operations and equations: they require a use of linear structure that we do not fully understand yet. We plan to investigate that structure, in particular with an eye towards a general mechanism allowing the extension of semantics from global definition to local definition, for instance yielding a semantics for local

exceptions.
We have satisfactory accounts of the sum and commutative combinations of computational effects [9], but we do not yet have as satisfactory an account of distributive combinations. So we plan to complete that work, with particular attention devoted to specific examples.
The general structural operational semantics we have outlined in this paper following [27] yields a standard operational semantics for nondeterminism and a sensible one for probabilistic nondeterminism but, as explained in Section 4, not for side-effects or deconstructors. So we plan to define a more subtle operational semantics that includes those examples.
The relationship between ordinary Lawvere theories, finitary monads on Set, universal algebra, and equational theories has been thoroughly under- stood for several decades: see [1] for most of it, with [5] also relevant. Enriched Lawvere theories are defined and shown to be equivalent to finitary enriched monads in [30], and [14] (see also [31]) defines and gives an equivalence between the latter and enriched universal algebra. But there is not yet a definition of enriched equational theory together with a theorem proving it equivalent to the other notions; so we plan to provide that. It should agree with the notion of single-sorted finite cotensor sketch implicit in [15]. We should also like to extend the setting of the paper to include realisability toposes.
We also have not incorporated a treatment of observations into our analysis yet. In describing a programming language, one has syntax, including oper- ations, and a notion of observation, the latter yielding equations determined by contextual equivalence. We believe there is a account of this to be found at the level of generality of this paper by use of an object of observations, closely related to the use of an answer type R as used to define a continuations monad RR− . This amounts to defining a Lawvere theory not as being free on a sketch but rather in a mathematical formulation of the idea of being generated by operations subject to observational equivalence.
Although we have discussed equational logic we have not really discussed program logic. Scott’s LCF [32], as extended by Milner and his co-workers [6], was a program logic for an extended call-by-name λ-calculus, with nontermi- nation (and so recursion). While one might then deal with at least some effects by translation into this calculus one could rather ask for a uniform treatment, i.e., a program logic uniform in a signature and equational theory for effects. Some work of this kind was done by Pitts [24] on his “evaluation logic” and followed up by Moggi [22,23]. However they did not have our notion of opera- tion clearly in view and we may therefore hope to improve on what they have done.
Finally, we should like to extend our analysis to other calling mechanisms


than call-by-value, which has been the focus of our work to date. Paul Levy’s work [17] on call-by-name might be helpful here, and of course call-by-need should be investigated too. And beyond that, the ideas should apply to lan- guages built on other bases than the λ-calculus such as process calculi. The theory of operational semantics of [33] has already been developed for process calculi, so we hope to relate the two theories in this generality.

References
M. Barr and C. Wells, Category Theory for Computing Science, Prentice-Hall, 1990.
M. Barr and C. Wells, Toposes, Triples, and Theories, Grundlehren der mathematischen Wissenschaften 278, Springer-Verlag, 1984.
N. Benton, J. Hughes, and E. Moggi, Monads and Effects, APPSEM ’00 Summer School, Lecture Notes in Computer Science 2395, 2002.
P. Cenciarelli and E. Moggi, A Syntactic Approach to Modularity in Denotational Semantics, CWI Technical Report, 1993.
P. Freyd, Algebra-Valued Functors in General and Tensor Products in Particular, Colloq. Math. Wroclaw 14 (1966) 89–106.
	M. Gordon, R. Milner and C. Wadsworth, Edinburgh LCF, Lecture Notes in Computer Science, 78 (1979), Berlin: Springer Verlag.
R. Heckmann, Probabilistic Domains, Proc. CAAP 94, Lecture Notes in Computer Science
136 21–56.
M. Hennessy, Algebraic Theory of Processes, Cambridge, Massachussetts: MIT Press, 1988.
M. Hyland, G.D. Plotkin, and A.J. Power, Combining Computational Effects: Commutativity and Sum, Proc. IFIP Conference on Theoretical Computer Science (2002) 474–484.
M. Hyland, G.D. Plotkin, and A.J. Power, Combining effects: sum and tensor (submitted).
C. Jones, Probabilistic Non-Determinism, Ph.D. Thesis, University of Edinburgh, Report ECS-LFCS-90-105, 1990.
C. Jones and G. D. Plotkin, A Probabilistic Powerdomain of Evaluations, Proc. LICS 4 (1989) 186–195.
G. M. Kelly, Basic Concepts of Enriched Category Theory, Cambridge: Cambridge University Press, 1982.
G. M. Kelly and A. J. Power, Adjunctions whose Counits are Coequalisers, and Presentations of Finitary Enriched Monads, J. Pure Appl. Algebra 89 (1993) 163–179.
Y. Kinoshita, A. J. Power, and M. Takeyama, Sketches, J. Pure Appl. Algebra 143 (1999) 275–291.
M. Lenisa, A. J. Power, and H. Watanabe, Distributivity for Endofunctors, Pointed and Co-Pointed Endofunctors, Monads and Comonads, Proc. CMCS 2000 Electronic Notes in Thoeret. Comp. Sci. 33, 2000.
P. B. Levy, Call-by-Push-Value: A Subsuming Paradigm, Proc. TLCA 99, Lecture Notes in Computer Science 1581 228–242.
M.  W.  Mislove,	Nondeterminism and Probabilistic Choice: Obeying the Laws, International Conference on Concurrency Theory (2000) 350–364, URL: citeseer.nj.nec.com/mislove00nondeterminism.html.


E. Moggi, Computational lambda-calculus and monads, Proc. LICS 89 (1989) 14–23.
E. Moggi, An abstract view of programming languages, University of Edinburgh, Report ECS- LFCS-90-113, 1989.
E. Moggi, Notions of computation and monads, Inf. and Comp. 93 (1991) 55–92.
E. Moggi, Representing Program Logics in Evaluation Logic, Unpublished manuscript, available electronically, 1994.
E. Moggi, A Semantics for Evaluation Logic, Fundamenta Informaticae, 22 (1/2), 1995.
A. M. Pitts, Evaluation Logic, G. Birtwistle (Ed.), IVth Higher Order Workshop, Banff, 1990, Workshops in Computing (Springer-Verlag, Berlin, 1991), pp 162-189.
G. D. Plotkin, A Powerdomain Construction, SIAM J. Comput. 5 (1976) 452–487.
G. D. Plotkin, Domains, http://www.dcs.ed.ac.uk/home/gdp/, 1983.
G. D. Plotkin and A. J. Power, Adequacy for Algebraic Effects, Proc. FOSSACS 2001, Lecture Notes in Computer Science 2030 1–24.
G. D. Plotkin and A. J. Power, Semantics for Algebraic Operations, Proc. MFPS 17, Electronic Notes in Thoeret. Comp. Sci. 45, 2001.
G. D. Plotkin and A. J. Power, Notions of Computation Determine Monads, Proc. FOSSACS
2002, Lecture Notes in Computer Science 2303 342–356.
A. J. Power, Enriched Lawvere Theories, Theory and Applications of Categories (2000) 83–93.
E. P. Robinson, Variations on Algebra: Monadicity and Generalisations of Equational Theories, Festshrift for Rod Burstall, Formal Aspects of Computing, 13 (3, 4 & 5) 308–326, 2002.
D. S. Scott, A Type-Theoretical Alternative to ISWIM, CUCH, OWHY, TCS 121 (1–2) 411–440, 1993.
D. Turi and G. D. Plotkin, Towards a Mathematical Operational Semantics, Proc. LICS 12
(1997) 280–291.
D. Varacca, The Powerdomain of Indexed Valuations, Proc. LICS 17 (2002) 299–310.
