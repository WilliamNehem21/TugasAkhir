

Electronic Notes in Theoretical Computer Science 264 (2010) 105–123
www.elsevier.com/locate/entcs

Applications of Algebra and Coalgebra in Scientific Modelling
Illustrated with the Logistic Map
Michael Hauhs1	Baltasar Tranc´on y Widemann2
Ecological Modelling University of Bayreuth Bayreuth, Germany

Abstract
In computer science, the algebra–coalgebra duality serves as a formal framework for connecting the per- spectives of state-based and behavior-based models. In other sciences such as ecology, these perspectives are seemingly harder to reconcile. We explore modelling paradigms, in the sense of philosophy of science, as an intermediate step in translating the (co)algebraic framework from computer science into applications in ecology. We illustrate the application potential of this approach with a simple model from theoretical ecology: the logistic map. Several versions of algebraic models with progressively more sophisticated carriers and operations are introduced and finally contrasted with a corresponding coalgebraic model. We illustrate two modelling paradigms with these examples. Only one of these has traditionally been used in ecology. The second one, which is based on a coalgebraic dualisation, offers new modelling perspectives in ecology and environmental science.
Keywords: algebra, coalgebra, state, behavior, model, paradigm, scientific method, dynamic system, ecology, logistic map


Introduction
Scientific modelling, the task of relating theories and data, is a multi-faceted prob- lem without a single universal solution. Besides the particular discipline of science under study, it is necessarily connected to the polar areas of philosophy and math- ematics.
A fundamental dichotomy from both the philosophic and the mathematical view- point is the choice between state and behavior as the primary ontological category of system properties. There are some scientific disciplines where one is clearly dom- inant: Physical sciences tend to be state-based, whereas social sciences tend to be

1 Email: Michael.Hauhs@uni-bayreuth.de
2 Email: Baltasar.Trancon@uni-bayreuth.de

1571-0661 © 2010 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2010.07.016

behavior-based. But there is also a middle ground covered by life-related sciences, in particular ecology as the science of living systems in an open environment. These sciences pose especially interesting and hard challenges to the modeller, because neither state nor behavior alone seem to be sufficient for comprehensive system descriptions.
In most scientific fields, the primacy of either state or behavior is correlated with the degree of formalization: State-based models tend to be given in math- ematical formulae, whereas behavior-based models tend to be given in narrative prose. Computer science is rather distinguished by the fact that it provides meth- ods to render both perspectives with comparable formal rigor, and to unify them in common frameworks. Of these frameworks, we regard the duality of universal algebra and coalgebra as particularly promising for scientific modelling, for several reasons:
There are vast bodies of theoretical results on how to apply algebra and coal- gebra to state-based (e.g. [5]) and behavior-based (e.g. [9]) system models, respectively.
The duality is a precise relationship within the meta-framework of category theory, as opposed to a mere philosophical complementarity [16].
The usefulness of commuting diagrams similar to those underlying the catego- rial formulation of (co)algebra for theoretical biology has already been estab- lished [15].
Our present work should be understood as a small step towards leveraging the tools of theoretical computer science for theoretical ecology. This overall goal is not easy to achieve; not least because the structural mathematics of computer science remain obscure and inaccessible to the more classically trained ecologist. As an intermediate, more modest goal, we aim at extending the repertoire of scientific ecological modelling with methods originally designed for the description of systems of logic, control and computation. Towards this end, we shall presently discuss a system that is simple and idealized, yet of some popularity in theoretical ecology. We shall illustrate that modelling questions concerning this system fall into the two aforementioned dual categories, and how they can be mapped to algebraic and coalgebraic formulations, respectively. Our focus here shall be the systematic development of modelling techniques from basic universal (co)algebra and their interpretation from the meta-viewpoint of philosophy of science; the connection to more realistic and practical ecological problems is outside the scope of this article.
Scientiﬁc Modelling
Our modelling examples will be idealized. We use the notions proposed by [6] in which modelling is composed of two steps: The first step replaces a real-world phenomenon, the target system, with an idealised system described in words, the model system (see Figure 1 ibid.). In the historical case of astronomical models of planets, the physical objects were replaced by idealised, homogenous spheres with point mass. Here we use a population of organisms and its temporal variation

by growth as the target system and replace it with a spatially homogenous model system: The model system is then in the second step described by the logistic map. A modelling paradigm, as introduced by Kuhn, links an aspect of the empirical world, the model system (in the sense above), with mathematics. It has to include a recipe, how to fill/relate the description of the word model with data on the one hand and how to symbolise the description and apply mathematics on the other
hand.
Several options for this task exist. They are vastly different with respect to their reputation in science, to the extent that sometimes one paradigm, the physical one, is identified with the scientific method as such. However, empirics and management practice, at least for ecological problems, appear determined to remain methodolog- ically diverse. We do not take sides in this dispute, and present two dual modelling paradigms without judging their relative applicability a priori.
Each of the two paradigms emphasizes one of the two ontological categories: The functional paradigm is based on observable states; behavior is a secondary notion that arises of the change of states under a dynamic law. The interactive paradigm focuses directly on behavior; state arises from the history of choices of agents. The latter paradigm is uncommon in most “hard” sciences. Again, computer science is an exception; cf. the famous Turing test.
It is here where we expect the impact of coalgebra. The new theoretical approach may formalise a model paradigm which is already implicitly used in ecological prac- tice, but which has not been recognised in theoretical ecology [17]. A corresponding problem in the philosophy of science is the epistemological classification of computer simulations [8].
Using coalgebra to model natural phenomena is not (yet) a popular approach. This is no surprise, because few natural scientists are even aware of the existence of such a theory. The gap between the research programs of natural sciences on one hand and of theoretical computer science on the other hand makes it difficult to exchange abstract notions and theoretical frameworks. Rigorous study of scientific modelling and its integration of “mindset” and “toolkit” can be beneficial to mutual understanding.
The logistic map has been chosen as an objct of study for its simplicity, not for its immediate practical relevance. For a more relevant example of ecological behavior, consider the idealised case of a domesticated species in which evolutionary change can be supressed deliberately. The complete space of possible behavior under human management can then be derived from its documented growth history. The scientific task is to comprehensively represent patterns of this history along with proper goals and intervention norms, in order to allow a sustained continuation of the past behavior, but without being able to reconstruct the system after irreversible failure, such as extinction of the species.
The Logistic Map
The so-called logistic map [10] is related to the logistic equation published by Ver- hulst in 1838, which was one of founding concepts of theoretical population biol-



1.2
1
0.8
0.6
0.4
0.2
0


0	0.2	0.4	0.6	0.8	1
1.2
1
0.8
0.6
0.4
0.2
0


0	0.2	0.4	0.6	0.8	1



Fig. 1. The logistic map fr for r < 4 (left) and r > 4 (right)

ogy [1]. It has been criticised for being oversimplified, but is still a reference concept for more realistic models. It is used as the introductory example in a standard text- book on theoretical biology [12].
Definition 1.1 For a real parameter r > 0, the logistic map is defined as the real function
fr(x)= rx(1 — x)
restricted in both domain and range to the unit interval I = [0, 1]; see Figure 1.
For r ≤ 4, the function fr is totally defined on I.
For r > 4, the function fr is only partially defined on I: fr(x) /∈ I for some x ∈ I.
The single parameter r is interpreted as the effective growth rate of the system. The state of the system is interpreted as population density, normalised by the carrying capacity of the system with respect to the given environment. Any relation with the environment is encoded into the carrying capacity parameter, hence this gives rise to a discrete autonomous dynamic system.
Dynamic systems with the state space I and the step function fr exhibit a variety of interesting modes of behavior, depending on the value of r: from certain extinc- tion through stable fixed points and periodic solutions of all periods to deterministic chaos with strange attractors.
The logistic map has been investigated with the methods of symbolic dynamics as an important case of a complex, chaotic system. In this role it has also been used as an application of coalgebra [16]. This, to our knowledge, has been the first connection between coalgebra and models used in biology. Here we use the well- known features of this map for reviewing the various roles in which dynamic models can be used in ecological modelling.
Time is discrete in a system with the step function fr. This is not necessarily an idealization for biological systems; e.g. generation times. But the state space I is ide- alized as continuous. For the application of symbolic dynamics and to accomodate the realistic assumption that measurements cannot be made arbitrarily precise, we discretize observations as partitions of the state space, specified by the assignment

of symbols from a finite alphabet. It suffices to consider the most coarse-grained case.
Definition 1.2 The binary unit partition is defined as a function c : I → 2 = 
{0, 1}

c(x)= 
2
1	if x ≥ 1

Note that fr is not reversible (injective), but the tupling ⟨c, fr⟩ : I → 2 × I is.
For r < 4, the function ⟨c, fr⟩−1 is only partially defined on 2 × I.
For r ≥ 4, the function ⟨c, fr⟩−1 is totally defined on 2 × I.
This binary partition of the logistic dynamic system has been used in [4] to demonstrate that the apparent complexity of a system depends crucially on the viewpoint.

Formal Prerequisites
The mathematical structures underlying not only our example model system, but more or less directly every dynamic system, are the sequential data structures: finite and infinite sequences over a fixed set of elements. These structures and the usual ways of reasoning with them have well-understood representations in terms of algebra and coalgebra.
Strings and Streams
Definition 2.1 The set A∗ is called the set of finite sequences or strings over
A. It is generated by the free constructors consA : A × A∗ → A∗ and nilA ∈ A∗. The destructors are the unique partial functions hdA : A∗ ~ A and tlA : A∗ ~ A∗ such that
hdA consA(a, w)  = a	hdA(nilA) undefined

We omit all subscript annotations where no ambiguity arises.
We define the subsets An ⊂ A∗ of strings of a fixed length n inductively as
An+1 = P(consA)(A × An)	A0 = {nilA}
Then
∞	∞
A∗ =   An	A+ =   An = A∗ \ {nilA}

We informally write a1 ... an for cons(a1,... , cons(an, nil) ... ).
In particular, we abbreviate a singleton string cons(a, nil) to a.

For any function f : A → B, we write f ∗ : A∗ → B∗ for the elementwise mapping
f ∗ consA(a, w) = consB f (a),f ∗(w)	f ∗(nilA)= nilB This turns ∗ into a functor.
The choice of cons and nil as the constructors of strings suggest that the organi-
zation of data in a string obey the stack principle: data elements are accumulated and removed at the left end of a string only. The following auxiliary function han- dles a special case of this principle, namely the accumulation of data arising from the iterated application of a given function.
Definition 2.2 Let A be any set and f : A ~ A a partial function. The partial function push(f ): A∗ ~ A∗ is defined as
push(f )(w)= cons f hd(w) , w 

Strict application is implied: push(f ) is undefined at w if hd(w) or f (hd(w)) is undefined. In particular, push(f )(nil) is never defined.
Note that push(f )n : Am → Am+n for m > 0 and n ≥ 0. In slight abuse of notation we define push(f )−n : Am → Am−n for m ≥ n ≥ 0 as the retraction
push(f )−n = tln
Example 2.3 The expression push(succ)n(0) yields a countdown from n.
Definition 2.4 The set Aω = (N → A) is called the set of infinite sequences or streams over A. Its elements are of the form consA(a, s) for any a ∈ A; s ∈ Aω, with


We write
consA
(a, s)(n)=	a	if n =0 
s(n — 1)	if n > 0

hdA(s)= s(0)	tlA(s)= s ◦ succ for the total destructors.
(Co)Algebras of Affine Type
Definition 2.5 The family of affine functors AA : Set → Set is defined as
AA(X)= A × X + B	AA(f )= idA × f + idB
B	B


We write

goA : A × X → AA(X)	stopB : B → AA(X)

B	B
for the left and right injection, respectively.

Lemma
[α1, α2]
2.6 Affine functors have initial algebras. The structure	A∗ × B, α =
with
α1 a, (w, b) = cons(a, w), b	α2(b)= (nil, b)

is an initial AA-algebra. The unique homomorphism or catamorphism h into any
A	 B
  
h cons(a, w), b)= γ1 a, h(w, b)	h(nil, b)= γ2(b)
Lemma 2.7 A ffine functors have ﬁnal coalgebras.	The structure  (A∗ × B) + 
 


φ1 cons(a, w), b = go a, ι1(w, b) φ1(nil, b)= stop(b)
φ2(s)= go hd(s), ι2(tl(s)) 

where ι1, ι2 are the injections into (A∗ × B)+ Aω is a ﬁnal AA-coalgebra. The unique homomorphism or anamorphism h from any AA-coalgebra (C, γ) is deﬁned

corecursively as

 go a, h(c')	if γ(c)= go(a, c')


Instantiating A or B with the empty set or the singleton set 1 = { } yields cases of special interest.
The affine functor A1 . The operations of A1 -algebras are of type γ :1 × C +
B	B
B → C. They are in natural one-to-one correspondence to pairs (f, g) of type
f : C → C and g : B → C, namely (f, g) ↔ [f ◦ π2, g]. The carrier of the canonical initial A1 -algebra (Lemma 2.6) simplifies to N × B by reading 1∗ as a unary number system. Its operation is specified by (f0, g0) with f0(n, b) = (n + 1, b) and g0(b)= (0, b). The catamorphism i into the A1 -algebra specified
by (f, g) is the iteration operator
i(n, b)= fn g(b)
The affine functor AA. The operations of AA-algebras are of type γ : A × C +
1	1
1 → C. They are in natural one-to-one correspondence to pairs (f, e) of type
f : A × C → C and e ∈ C, namely (f, e) ↔ [f, eˆ] where eˆ(∗)= e. The carrier of the canonical initial AA-algebra simplifies to A∗. Its operation is specified by (consA, nilA). The catamorphism j into the AA-algebra specified by (f, e)
is the fold operator
j cons(a, w) = f a, j(w)	j(nil) = e
The affine functor AA. The initial AA-algebra is empty. The operations of
∅	∅
AA-coalgebras are of type γ : C → A × C + ∅. They are in natural one-to-
one correspondence to pairs (h, t) of type h : C → A and t : C → C, namely

(h, t) ↔ ι1 ◦⟨h, t⟩. The carrier of the canonical final AA-coalgebra (Lemma 2.7) simplifies to Aω. Its operation is specified by (hdA, tlA). The anamorphism k from the AA-coalgebra specified by (h, t) is the unfold operator
k(c)= cons h(c), k t(c) 
The affine functor AB is degenerate and equivalent to the constant functor B. We shall demonstrate that each nondegenerate case corresponds to a scientific mod- elling scenario. We use the pair notation of the preceding paragraphs to specify
operations, in order to avoid cluttering diagrams with uninformative projections and injections.
Modelling Paradigms and (Co)Algebra
The trajectories (time-indexed sets of contiguous states) of a dynamic system have been termed recursive by Rosen [15], but not in the rigorous sense of theoretical computer science. For discrete-time systems, where trajectories are sequences, the metaphor can be made precise by connecting finite/infinite trajectories with itera- tion/coiteration in the form of catamorphisms/anamorphisms, respectively. In this section, we discuss the transition from a philosophical view on modelling paradigms to formal systems that employ initial algebras and catamorphisms or final coalgebras and anamorphisms, respectively.
From Functional Modelling to Algebra
Our proposed mapping of the two modelling paradigms to (co)algebra is inspired by [15], where the functional paradigm is discussed in great philosophical detail and organized in the form of the commuting diagram depicted in Figure 2. We have adapted the original discussion to ecological problems in [8]. Note that the real side refers to the model system, not the target system. We identify the situation in this diagram with a pair of algebras, namely the real and the abstract one, with states as their elements, and the abstraction with a homomorphism. A model consists of
the abstraction mapping that separates essential from accidental properties of real objects, and
a logical theory (system of equations) that specifies the valid progressions of abstract states.
The abstract algebra is merely a mathematical implementation of the specification. A scientific hypothesis is posed by claiming that the diagram commutes. Unlike in pure mathematics, and in the face of uncertainty about the model system, this is not a logical property to be decied, but rather an empirical property to be judged by testing and evidence, as prescribed by the Scientific Method. If the correspondence between the two sides actually holds, it gives clauses of the specification the special status of laws of nature. Reverting the top horizontal arrow results in the standard test situation for functional models, the prediction.

Real
 abstraction zA,bstract

 ¸
causalit
 ¸
mputation
 ¸
time



Real
zA,bstract
abstraction

Fig. 2. Functional modelling, conceptually


Actual
 ¸
empirics
Actual
 assessment zV,irtual
 ¸
ntrol assessment zV,irtual
 ¸
time

Fig. 3. Interactive modelling, conceptually

These philosophical interpretations need to be both formalized and generalized in order to adequately capture the tasks and capabilities of the functional mod- elling paradigm. We call algebraic modelling in the above, narow sense direct and distinguish it from inverse problems where not future states, but past or boundary conditions are investigated.
The basic tenet of algebraic modelling of both directions is to employ an initial algebra of a suitable functor as a formal query language, arbitrary algebras of the same functor (models) as implementations of query constructs and the catamor- phisms as the recursive evaluation of queries.

From Interactive Modelling to Coalgebra
Changing the perspective from state to behavior affects all parts of the modelling situation. States are no longer required to be observable, but may be largely hidden behind an interface; all relevant information is taken from behavior at the interface. Metaphysically, objects and their properties are replaced by subjects and their ac- tions. We reflect this shift of perspective, as common in the field of philosophy of science, by distinguishing the terms real (literally: of the things) and actual (liter- ally: of the actions). Laws are replaced by their subjective counterparts, such as strategies and norms. Figure 3 shows the resulting commuting diagram. The stan- dard test situation for interactive models is obtained by reversing the right vertical arrow; it describes planning. See Section 4.3 for a derivation of this model paradigm from formal representations.
The claim that coalgebraic modelling departs from the state-based perspective may be surprising. This issue arises from a fundamental difference between the notions of state in physics and in computer science. The observed state of a physical system is objective reality. The state of a formal automaton, as opposed to its physical implementation, merely refers to its actual behavior, in the sense that semantics are given in terms of observed transitions not states; for instance as the regular language accepted by a finite automaton. The reference character of state is expressed formally by the notion of bisimulation between alternative virtual systems

N × I
	i	zI,

 ¸
(f0,g
 ¸
r ,id)

A1(N × I) 	zA,1(I)
I	A1(i)	I
Fig. 4. Direct functional modelling (perfect information) with initial algebra
or by final coalgebraic semantics. We conjecture that this reflects the empirical phenomenon of equiﬁnality [18,2]: The observed behavior of a complex system at a simpler interface can often be reconstructed by many different processes within the functional paradigm.
The basic tenet of coalgebraic modelling, in our sense, is to employ a final coalgebra as a formal semantic domain, arbitrary coalgebras of the same functor (models) as representatives of behavior and the anamorphisms as the recursive assessment of the represented behavior. The distinction between direct and inverse problems of coalgebraic modelling is less pronounced than in the algebraic case, at least for the example of the logistic map.

Formal Modelling Scenarios
Direct Functional Modelling
Direct functional modelling is a scenario where the “true” dynamics of a system are known. It solves the problem of prediction: From the observation of a current system state, future states are derived by formal (automatic) reasoning.
Claim 4.1 The initial algebra of the functor A1 , where B is the representation of system states, is paradigmatic for direct functional modelling.
Perfect Information
The simplest case of direct functional modelling assumes perfect information about the precise current system state. Its application to the logistic map is shown in Figure 4. (Recall that the labels of vertical arrows are shorthands as defined in section 2.2.) The state space I is represented one-to-one. The left hand side is the
simplified canonical initial A1-algebra. The right hand side is a A1-algebra that
I	I
encodes the known dynamics of the system: Its carrier is the state space I and its operation is specified by the step function fr (with idI as the trivial base case).
Theorem 4.2 The catamorphism i for the operation speciﬁed by the pair (fr, idI)
solves the problem of predicting a state n steps in the future, for r ≤ 4.
i(n, x)= fn(x)
The preceding scenario is a straightforward reconstruction of the iterated step function fn. The graph of the function consists of pairs of initial and final states, n steps apart; the intermediate states are forgotten. This can be remediated by

a simple refinement that replaces single states with stack-based representations of trajectories.
Definition 4.3 We define the set of partial trajectories as the set of stacks (strings constructed right-to-left) arising by iterated action of fr on any initial state (P is the image functor).
∞
Tr =	P push(fr) n(I1) ⊆ I+
n=0
This is the smallest set such that I1 ⊆ Tr and push(fr): Tr → Tr.
The refined model is shown in Figure 5. The carrier of the right hand side algebra is changed to Tr, and the operations fr and idI have been replaced by push(fr) and inI, respectively, where inA : A → A1 is the injection of singleton strings.
Theorem 4.4 The catamorphism i for the operation speciﬁed by the pair push(fr), inI
solves the problem of predicting all states up to n steps in the future, for r ≤ 4.
i(n, x) = push(fr)n(x)
The following three cases refine the representation of state and dynamics by replacing the state space I with progressively more complicated, derived spaces and replacing the step function fr with an appropriate lifting to the respective space. Note that the requirement r ≤ 4 is lifted.
Imperfect Information: Nondeterminism
A moderately simple case of direct functional modelling with imperfect information assumes nondeterminism. Note that the term “nondeterminism” is used in the usual sense of computer science, replacing the single precise current system state by a set of potential current system states. It is not used in the sense of philosophy, namely that a hidden variable, external source of randomness or decision-making entity is involved in the transition from one state to another.
The application of nondeterminstic direct functional modelling to the logistic map is shown in Figure 6. The state space I is represented by its powerset P(I).

The left hand side is the simplified canonical initial A1
-algebra. The right hand

side is an A1
-algebra that encodes the nondeterministic dynamics of the system:

Its carrier is the set P(I) of sets of potential states and its operation is specified by

N × I	i
 ¸
(f0,g
zT,r
 ¸
(push(fr ),in)

A1(N × I) 	zA,1(Tr)
I	A1(i)	I
Fig. 5. Direct functional modelling (partial trajectories) with initial algebra

N × P(I)	i
 ¸ 
zP,(I)
 ¸ 


r

A1	 N × P(I) 

zA,1
	
 P(I) 


Fig. 6. Direct functional modelling (nondeterministic) with initial algebra


P(fr), the image of state sets under fr; a state is a potential post-state of a step if and only if it is the image of a potential pre-state under fr.
Theorem 4.5 The catamorphism i for the operation speciﬁed by the pair P(fr), idP(I)
solves the problem of predicting a nondeterministic state n steps in the future.

i(n, Y )= P(fr)n(Y )

The nondeterministic case can be extended to more sophisticated imperfect in- formation such as fuzzy sets of potential states.

Imperfect Information: Probabilism

Definition 4.6 Each continuous probability distribution over I is specified uniquely by a cumulative distribution function (cdf), that is a continuous, weakly mononotic function F : I → I with F (0) = 0 and F (1) = 1.
An I-valued random variable X is said to be distributed according to F , written
X ∼ F , if and only if F (y)= P (X ≤ y)= P (X < y).
We write ˜I for the set of cdfs over I.
Definition 4.7 The function f˜r : ˜I → ˜I is defined as


⎧⎨  1 — y

	

if y ≤ r

⎩0	if y > 4

It is easy to verify that f˜r (F ) is in fact a cdf over I. Note that 1 ± qr(y) is the
position of the vertical markers in Figure 1, right hand side.
Lemma 4.8 The function f˜r lifts a distribution over the function fr.



 ¸ 
 
(f ,g ) 
 ¸ 
 
 e

0 0	 (fr ,id)
 
A1(N × ˜I)	A (˜I)
Fig. 7. Direct functional modelling (probabilistic) with initial algebra


Proof.


P f (X) ≤ y  = P rx(1 — x) ≤ y
= P  x — 1 2 ≥ 1 — y 

1
2

2	2
= f˜r (F )(y)


The application of probabilistic direct functional modelling to the logistic map is shown in Figure 7. The state space I is represented by the set of cdfs I. The left hand side is the simplified canonical initial Ae1-algebra. The right hand side is a Ae1-algebra that encodes the probabilistic dynamics of the system: Its carrier is the set I of state distributions and its operation is specified by fr, the action of fr on the distribution of its argument.
Theorem 4.9 The catamorphism i for the operation speciﬁed by the pair (fr, ideI)
solves the problem of predicting a probabilistic state n steps in the future.
X ∼ F =⇒ fn(X) ∼ i(n, F )
The probabilistic case can be extended to more complex, not purely continuous distributions.
Inverse Functional Modelling
Inverse functional modelling is a scenario where inferences about the dynamics of a system (parameters, initial or boundary conditions) are drawn from data recorded by external observation. It solves the problem of reconstruction: Empirical ob- servations are reduced to possible causes (parameters and conditions not directly observable, but consistent with the data).

Claim 4.10 The initial algebra of the functor AA, where A is the range of the observable system property of interest, is paradigmatic for inverse functional mod- elling.
We choose the binary partition c as observable property. Its range is the binary alphabet 2, hence the carrier of the canonical initial algebra is the language of binary strings 2∗.
Definition 4.11 The function wr : N × I → 2∗ is defined as
wr(n, x)= c∗ push(fr)n−1(x)
It maps the pair (n, x) to the stack of observed binary symbols for n consecutive system states starting with x. Informally,
wr(n, x)= c fn−1(x)	c f 0(x) 
The range of wr for n > 0 is the set of partitioned partial trajectories P(c∗)(Tr).
The inverse modelling task, given data w ∈ 2∗ of length n and a parameter value r, is to find some or all solutions of the equation w = wr(n, x). A concise representation of the inferred information is given by a partial function on I that is defined only for initial states consistent with the observed data, and maps those to the final states after the observation. The solution is straightforwardly constructed, dealing with one observed symbol at a time.
Definition 4.12 We write —→I = (I ~ I) for the space of partial functions on I. The
—→	—→	—→
function fr :2 × I → I is defined as


—→
fr (a, h)= fr|a ◦ h	where	fr|a =

—→
fr(x)	if c(x)= a undefined	if c(x) /= a

The operation fr refines and extends a given partial function h by excluding initial
states that are mapped by h to intermediate states inconsistent with a given data symbol a, and taking all others one fr-step further.
The application of inverse functional modelling to the logistic map is shown in Figure 8. The observation range is the binary alphabet 2. The left hand side is the
simplified canonical A2-algebra. The right hand side is a A2-algebra that encodes
1	1
the elementwise refinement of inference: Its carrier, the “state space” of inference,
is the set of partial functions —→I . Its operation is specified by —→f , the action of f
r	r
on the inference for its argument.
—→
Theorem 4.13 The catamorphism j for the operation speciﬁed by (fr , id−→I ) solves
the problem of inferring initial conditions from ﬁnite data.
 fn(x)	if w = wr(n, x)

j
2∗
 ¸ 
 
(cons,nil) 
 
 
z—→I,
 ¸ 
 
−→
 (fr ,id)
 

A2(2∗)
	zA,2 —→I 


Fig. 8. Inverse functional modelling with initial algebra

Corollary 4.14 The domain of j(w) is a sound and monotonic approximate recon- struction of the initial state from ﬁnite data w, analogous to the method of nested intervals: Let Yr(n, x)= dom j wr(n, x) . Then for all m, n ≥ 0

x ∈ Yr(n, x)	m < n =⇒ Yr(m, x) ⊇ Yr(n, x)
Here in the context of algebraic modelling, chronicles of events (observations of behavior) are used as means for identifying the initial and final state or the dynamics of the system under study. In the equation
j(a1 ... an)= fr|a1 ◦ ··· ◦ fr|an
however, an alternative view becomes apparent: The standard technique of category theory is to study objects without reference to their internal structure by studying the external structure of morphisms around them. Applied to the model above, this means studying the set of chronicles without reasoning about points of the transition functions they describe via j. This allows us to consider the limit n → ∞, and represent complete, infinite behavior, for which the interpretation as end-to-end transition functions breaks down. This step takes us to the interactive paradigm on the philosophical level, and to coalgebra on the mathematical level.

Interactive Modelling
Interactive modelling is a scenario where the observable properties of a system are represented without referring to any particular process as their cause. It solves the problem of assessment : System states are no longer observed directly but classified according to their potential (future) behavior.
Claim 4.15 The ﬁnal coalgebra of the functor AA, where A is the range of the observable system property of interest, is paradigmatic for interactive modelling.
For r > 4, the logistic map is not bounded by the interval I; we treat the case that the interval is exceeded as undefined. The set dom(fr) of points for which a single step is defined is easily characterized, but the set of points for which unboundedly many steps are defined is nontrivial. The following characterization and model are derived from [16].

Jr 	k	z2,ω


(c,fr
, 
(hd,tl)
, 

A2 (Jr) 	zA,2 (2ω)
∅	A2 (k)	∅
Fig. 9. Direct interactive modelling with final coalgebra
Definition 4.16 The set Jr such that fn(x) ∈ I for all x ∈ Jr and n > 0 is (P is

the preimage functor)
∞


Jr =	P(fr)n(I) ⊆ I
n=0

This is the largest set such that Jr ⊆ I and fr : Jr → Jr.
If r ≤ 4 then Jr = I; otherwise Jr is a complicated (fractal) subset of I.
Note the duality to Tr in Definition 4.3.
Lemma 4.17 For r > 4, the structure (Jr, γ) where γ is speciﬁed by (c, fr) is a ﬁnal A2 -coalgebra.
Proof. Section 18 of [16] gives an isomorphism c˜ between certain coalgebras over the category of complete metric spaces. Forgetting the metric structure, the following equations remain.
hd ◦ c˜ = c	tl ◦ c˜ = c˜◦ fr
= id2 ◦ c
Simple calculation yields


` (h˛d¸,tl) x


= A2 (c˜) ◦ ι1 ◦ ⟨c, fr⟩

` (c˛,f¸r ) x
That is, c˜ is a homomorphism, and hence isomorphism, between the coalgebras
depicted in Figure 9. Since the right hand side is final, the left hand side is also final, and the isomorphism is the anamorphism k.	 
Theorem 4.18 The anamorphism k for the operation speciﬁed by the pair (c, fr) solves the problem of representing the complete future behavior at the interface de- ﬁned by c. Representations of the form k(x) do not contain any reference to the parameter r or the initial value x.
c fn(x) = hd tln k(x)  = k(x)(n)
This representation allows complete, infinite trajectories to be specified in the form k−1(s), in terms of a binary stream s ∈ 2ω. Empirical, finite data of behavior at

Jr 	k	z2,ω

 ¸
⟨c,fr⟩−
 ¸
cons

A2 (Jr) 	zA,2 (2ω)
∅	A2 (k)	∅
Fig. 10. Inverse interactive modelling with final coalgebra
the interface, formally collected using wr(n, x), is generally not sufficient to specify a trajectory uniquely in this way—an instance of the epistemological problem of induction; there is no logically safe procedure for obtaining nontrivial universal empirical truths [7,14]. This leads to a dual of the problem of measurement precision in state-based modelling, namely the problem of complete chronicles of behavior. A collection of data is complete in this sense if extrapolation from the observed strings to the possible streams is safe under given boundary conditions.
We have noted in Definition 1.2 that the operation ⟨c, fr⟩ is bijective on both I and the subset Jr for r ≥ 4. Incidentally, the latter is the operation of the A2- coalgebra depicted on the left hand side of Figure 9. Since the operation of the final A2-coalgebra is also bijective (by Lambek’s Lemma), we may reverse the vertical arrows to arrive at the diagram shown in Figure 10. Note that the distinction between algebra and coalgebra is rather blurred in this scenario.
The operation ⟨c, fr⟩−1 : 2 × Jr → Jr models a non-autonomous dynamic sys- tem with binary input in each step. This input may be interpreted as the non- deterministic choice of an agent, either internal or external to the system. Under this interpretation, prediction is no longer a valid problem. But this apparent re- striction is actually a trade-off: On the upside, it becomes possible to investigate actually observed, contingent behavior in virtualized form in terms of subcoalgebras of the final coalgebra. Laws regarding the presence or absence of certain patterns in these subsystems, described by a theory in modal logic, reflect strategies in the actual system, the dual of natural laws. Examples of the relevance of strategies, both literally and figuratively, abound in ecology: Organisms prefer favourable and avoid hostile environments, natural selection is most effectively described in strate- gic terms, ecosystem use is governed by economic rationale and social norms; cf. the domestication example in section 1.1.

Conclusion
We have demonstrated that for the simple logistic model, the relationship between the functional and the interactive modelling paradigm can be made formally precise as the algebra–coalgebra dualism. Since dualism is not equivalence, the key issue for further research is where the two approaches deviate, both on the empirical level regarding the role of data and on the theoretical level regarding the role of formalisms. The keywords of both paradigms are given in Table 1 in synopsis.
In ecology and environmental sciences, the functional paradigm is prevalent but not unconditionally successful [13]. Therefore, the added value of interactive models

Table 1
Modelling paradigms and keywords


is of particular interest. Many essential features of living systems are naturally char- acterized in terms of behavior, e.g. feeding, reproducing, growing, evolving. Being alive is not a state property in the functional sense, as the development towards ar- tificial life has shown [3]. Coalgebraic modelling facilitates the formal organization of chronicles, as opposed to measurements; this may prove an important extension in this context.
Interactive theories formulated in coalgebra not only have a different formal presentation, they encode different pragmatics. On the functional side, problems of prediction and reconstruction are solved by searching for laws that govern the dynamic mechanism. On the interactive side, problems of assessment and manage- ment are solved by searching for strategies, norms or intentions that govern the behavior of agents. The transition from the former to the latter paradigm will not solve the notoriously difficult problems about explaining ecosystems, but offers the opportunity to formalize models of sustaining ecosystems.
Related Work
The inspiration to use the logistic map to demonstrate the potential of the algebra– coalgebra duality for scientific modelling has been taken from [16], where the result that forms the foundation of our interactive modelling scenario is given rather in passing.

The characterization of functional and interactive modelling as commutative diagrams has been given in [17], where we have criticised the situation of theoretical ecology from the perspective of software science.
The technique of realizing (co)recursive operations as cata-/anamorphisms of simpler operations has been adapted from the Squiggol approach to constructive functional programming; confer the famous banana notation of [11].

References
Berryman, A., The origins and evolution of predator–prey theory, Ecology 73 (1992), pp. 1530–1535.
Beven, K. J., A manifesto for the equifinality thesis, Journal of Hydrology 320 (2006), pp. 18–36.
Brooks, R., The relationship between matter and life, Nature 409 (2001), pp. 409–411.
Crutchfield, J. P., Observing complexity and the complexity of observation, in: H. A. Atmanspacher and
G. J. Dalenoort, editors, Inside versus Outside, Springer Series in Synergetics, Springer-Verlag, Berlin, 1994 pp. 235–272.
Ehrig, H. and B. Mahr, “Fundamentals of Algebraic Specification I. Equations and Initial Semantics,” Springer-Verlag, Berlin, 1985.
Frigg, R., Fiction and scientific representation, in: R. Frigg and M. Hunter, editors, Beyond Mimesis and Nominalism: Representation in Art and Science, Springer-Verlag, Berlin, 2009 .
Goodman, N., “Fact, Fiction, & Forecast,” Harvard University Press, 1955.
Hauhs, M. and H. Lange, Foundations for the simulation of ecosystems, in: J. Lenhard, G. Ku¨ppers and T. Shinn, editors, Simulation: Pragmatic Constructions of Reality, number 25 in Sociology of the Sciences Yearbook, Kluwer Academic Publishers, Dordrecht, 2006 pp. 57–77.
Jacobs, B., Exercises in coalgebraic specification, in: Algebraic and coalgebraic methods in the mathematics of program construction, Springer-Verlag, New York, 2002 pp. 237–280.
May, R. M., Simple mathematical models with very complicated dynamics, Nature 261 (1976), pp. 459– 467.
Meijer, E., M. Fokkinga and R. Paterson, Functional programming with bananas, lenses, envelopes and barbed wire, in: Proceedings of the 5th ACM conference on Functional programming languages and computer architecture (1991), pp. 124–144.
Murray, J. D., “Mathematical Biology,” Springer-Verlag, Heidelberg, 1989.
Peters, R. H., “A Critique for Ecology,” Cambridge University Press, 1991.
Popper, K. R. and D. W. Miller, A proof of the impossibility of inductive probability, Nature 302 (1983),
pp. 687–688.
Rosen, R., “Life Itself: A Comprehensive Inquiry into the Nature, Origin, and Fabrication of Life,” Columbia University Press, New York, 1991.
Rutten, J. J. M. M., Universal coalgebra: a theory of systems, Theor. Comput. Sci. 249 (2000), pp. 3–80.
Tranc´on y Widemann, B. and M. Hauhs, Programming as a model for the theory of ecosystems, in: J. Knoop and A. Prantl, editors, Post-Proceedings of 15. Kolloquium Programmiersprachen und Grundlagen der Programmierung, Technische Universit¨at Wien, 2009, to appear.
von Bertalanffy, L., “General Systems Theory: Foundations, Development, Applications,” 1968.
