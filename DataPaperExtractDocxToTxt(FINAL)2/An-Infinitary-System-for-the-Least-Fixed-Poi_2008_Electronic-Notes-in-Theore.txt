	Electronic Notes in Theoretical Computer Science 205 (2008) 89–104	
www.elsevier.com/locate/entcs

An Infinitary System for the Least Fixed-Point Logic restricted to Finite Models
Alexandre Matos Arruda1 ,2	Ana Teresa Martins3
Departamento de Computac¸˜ao, Universidade Federal do Ceara´,
CP 12.166, Fortaleza-CE, Brasil, 60455-760


Abstract
The notion of the least fixed-point of an operator is widely applied in computer science as, for instance, in the context of query languages for relational databases. Some extensions of first-order classical logic (FOL) with fixed-point operators, as the least fixed-point logic (LFP ), were proposed to deal with problems related to the expressivity of FOL. LFP captures the complexity class PTIME over the class of finite ordered structures. The descriptive characterization of computational classes is a central issue within finite model
theory (FMT). Trakhtenbrot’s theorem states that validity over finite models is not recursively enumerable, that is, completeness fails over finite models. This result is based on an underlying assumption that any deductive system is of finite nature. However, we can relax such assumption as done in the scope of proof theory for arithmetic. Motivated by G¨odel incompleteness theorems, proof theory for arithmetic offer an example of a true mathematically meaningful principle non derivable in first-order arithmetic. One way of presenting this proof is based on a definition of a proof system with an infinitary rule, the ω-rule, that establishes the consistency of first-order arithmetic through a proof-theoretical perspective. Inspired by this proof, here we will propose an infinitary natural deduction system for FOL and LFP restricted to finite models, FOLfin and LFPfin, respectively, and we will prove soundness and completeness for them,
and also a normalization theorem for fragments of these systems. With this infinitary deductive system for LFPfin, we aim to present a proof theory for a logic traditionally investigated within the scope of FMT. It opens up an alternative way of proving results already obtained within FMT and also new results through a proof theoretical perspective.
Keywords: Least Fixed-Point Logic, Finite Model Theory, Proof Theory, Infinitary Natural Deduction System.


Introduction
The notion of the least fixed-point of a certain operator is widely applied in the- oretical computer science as, for instance, in the formalization of programming languages. The denotation semantics of recursive functions is defined as the least fixed-point of a certain functional F over a domain D [16]. As an example, we can

1 This research is partially supported by CAPES/PROCAD, CNPq and FUNCAP.
2 Email: alexandre@lia.ufc.br
3 Email: ana@lia.ufc.br

1571-0661 © 2008 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2008.03.067

mention the semantics of the factorial function, f ac, defined over the set of natural numbers, Nat, as the least fixed-point of the functional F : (N at → Nat⊥) → (Nat → Nat⊥) described in lambda notation as F = λf.λn. n equals zero → one [] n times f (n minus one) [15].
Another example of the use of the least fixed-point concept in computer science is in the context of query languages for relational databases. By using the Fra¨ıss´e theorem, we can prove the impossibility of expressing the transitive closure query over finite relations in first-order logic (FOL) [5]. Several extensions of first-order logic with fixed-point operators on finite structures were proposed and used to define queries not expressible in FOL [11,2].
We are particularly interested in the least fixed-point logic (LFP), an extension of FOL with a predicate that computes the least fixed-point of an operator Fϕ indexed by a certain formula ϕ. With such a logic, we can define transitive closure and acyclicity queries, arithmetic recursive functions, connectivity in graphs, and several other notions not expressible in FOL. In fact, LFP is extremely important within theoretical computer science due to the Immerman-Vardi theorem which states that LFP captures the complexity class PTIME over the class of finite ordered structures [20,10].
The investigation of logics that precisely characterize important computational complexity classes is the central issue of the descriptive, machine-independent, com- plexity studies within the broader area of finite model theory. The development of the finite model theory (FMT), the model theory over finite structures, was strongly influenced by computational applications in database theory, computational com- plexity and formal languages. Although related to model theory, the theory that deals with structures of any cardinality, FMT has its own methods to prove express- ability results since compactness and Lo¨wenheim-Skolem, the main tools of model theory, are not sufficient to prove properties about finite models.
In 1950, Trakhtenbrot proved a theorem that is considered the starting point of FMT. This theorem states that validity over finite models is not recursively enumerable, that is, completeness fails over finite models [17]. This result is based on an underlying assumption that any deductive system is of finite nature, that is, the notion of formal proofs is inherently finite, recursive. Such assumption is relaxed in the scope of proof theory for arithmetic.
Proof theory has roots in Hilbert’s programme. On one hand, proof theory is interested in the structural analysis of formal proofs and, on the other hand, in the analysis of mathematical theories through their proofs and syntactical interpretation of one formal theory into another. Proof theoretical consequences are, for instance, related to normalization theorems, consistency, decidability, and complexity results [18]. The proof theory for arithmetic is also motivated by G¨odel incompleteness theorems. It aims to offer an example of a true mathematically meaningful principle, the transfinite induction principle, non derivable in first-order arithmetic. As a consequence, it is proved that first-order arithmetic is consistent. Such results are due to Gentzen [6,7] and Schu¨tte [14].
In [14], Schu¨tte defined an infinitary proof system with the ω-rule

α(0)	α(1)	...	α(n)	... 


∀xα(x)
(ω)

to establish the consistency of first-order arithmetic through a proof-theoretical perspective. Inspired by this proof, here we will propose an infinitary natural de- duction system for FOL and LFP restricted to finite models, FOLfin and LFPfin, respectively, and we will prove soundness and completeness for them, and also a nor- malization theorem for fragments of these systems. With this infinitary deductive system for LFPfin, we aim to present a proof theory for a logic traditionally defined within the scope of FMT. It opens up an alternative way of proving results already obtained within FMT and also new results through a proof theoretical perspective. Moreover, with some restrictions, this deductive system can be used in a theorem prover to compute queries on relational databases.
In section 2, we will present a natural deduction system to FOLfin. Since FOLfin is an extension of FOL, all classical first-order inference rules are also part of our LFPfin infinitary natural deduction system. In FOLfin, we must also add a rule to deal with finite classical first-order models. In section 3, we will define LFP through its semantics and, in section 4, new rules to deal with the least fixed-point operator are introduced in order to define the LFPfin system. A normalization procedure for fragments of FOLfin and LFPfin will be showed in section 5. Conclusions will be at the end.
Basic logic notations about formulas and models are from [3]. Now, we will briefly present some of them used in this text. The symbol set (or vocabulary) S of the alphabet AS of a first-order language LS is a set, possibly empty, of relational symbols, functional symbols and constants. In the case of LFP , we will deal with a finite and relational, without functional symbols, vocabulary S. This is not a serious restriction since we can define a k-ary function f as a (k+1)-ary relation. Sometimes we will use x as a short form for a tuple of variables (x1,... , xk). Similarly to a tuple of terms t. An S-structure is a pair A = (A, a ) such that A is a nonempty set, the domain or universe of A, and a is a map that interprets the symbols in S on A. Instead of a(s), we may just write sA for each s ∈ S. We will use a as a short form for a tuple of domain elements (a1,... , ak). An assignment in an S-structure A is a map β from the set of variables to A. An S-interpretation I is a pair (A, β) consisting of an S-structure A and an assignment β in A. If t is a term, the interpretation I(t) is an element of A and inductively defined as usual. If ϕ is a formula and I an interpretation, we can also inductively define the FOL satisfiability relation I |= ϕ as usual. If I |= ϕ, we say that I satisfies ϕ, or that I is a model of ϕ. If I |= ϕ and the domain A of A in I is finite, we say that I is a finite model of ϕ. Since the set of free variables that occur in a formula ϕ is always finite, instead of saying that I |= ϕ, we may just say that A |= ϕ(a). Whenever we use the satisfiability or consequence relation of a logic different from FOL, we will use a subscript in |=. For instance, for LFP consequence relation we will use
|=LF P . We will use deduction or derivation for formal arguments, and proof for the meta-level. The notions related to natural deduction systems are from on [13] and [18]. In particular, we will use Π, with or without subscript, as a meta-variable for

deductions.
The First-Order Logic Restricted to Finite Models (FOLfin)
For first-order logic restricted to finite models (FOLfin) we mean classical first- order logic such that the consequence relation is restricted to finite models only. The precise semantical formalization of FOLfin is given by the following definition:
Definition 2.1 (FOLfin logical consequence) Γ |=FOLfin ϕ if all FOL finite models that satisfy Γ also satisfy ϕ.
Our natural deduction system for FOLfin has the usual introduction and elim- ination rules for connectives, quantifiers, equality plus absurdity rules for classical first-order logic. All rules, but the equality ones, are introduced in [13]. The equal- ity rules are from [3]. Additionally, FOLfin natural deduction system has a rule to deal with the cardinality of the models and, for the sake of space, only this rule will be presented in this section.
First, we will define the sentence λ≥n, as in [3], for each natural number n, stating that “there are at least n elements in the domain of the structure” as
λ≥n := ∃x0 ... ∃xn−1(¬x0 ≡ x1 ∧ ... ∧ ¬x0 ≡ xn−1 ∧ ... ∧ ¬xn−2 ≡ xn−1). For all interpretations I we have that
I |= λ≥n iff A contains at least n elements.
We can also define the sentences ¬λ≥n that says “there are less than n elements”.
Now, consider the following set: Φ∞ := {λ≥n | n ≥ 2}.
The models of Φ∞ are precisely the infinite ones, that is, for all interpretations
I we have that
I |= Φ∞ iff A contains infinitely many elements.
FOLfin syntactical presentation is now given. FOLfin natural deduction system extends the FOL one with the following rule
∃v1∃v2(¬v1 ≡ v2)	∃z1∃z2∃z3(¬z1 ≡ z2 ∧ ¬z1 ≡ z3 ∧ ¬z2 ≡ z3)	...  (FIN ⊥)
⊥
or simply,
λ≥2	λ≥3	...	λ≥i	... 
⊥	(FIN ⊥)
The semantical meaning of this rule is that, if each λ≥n is a logical consequence of a set of formulas Γ, then Γ is not finitely satisfiable, that is, there is not a finite model that satisfies it. Hence, ⊥ is a FOLfin logical consequence of Γ. Syntactically, it means that Γ derives ⊥ in FOLfin calculus. The precise definition of the syntactical consequence in FOLfin is given by the following:
Definition 2.2 (FOLfin syntactical consequence) Γ ▶FOLfin ϕ if from the set of hypotheses Γ, there is a derivation in FOLfin natural deduction system to ϕ.

Finally, we can prove that both syntactical and semantical characterization of
FOLfin coincide. First, a definition.
Definition 2.3 (Finitely satisfiable) A set Γ of formulas is finitely satisfiable if there is a finite model that satisfies it.
Theorem 2.4 (Soundness) If Γ ▶FOLfin ϕ then Γ |=FOLfin ϕ.
Proof. The soundness of all inference rules, but FIN ⊥, follows from FOL sound- ness, that is, Γ ▶FOL ϕ ⇒ Γ |=FOL ϕ ⇒ Γ |=FOLfin ϕ. Hence, we only need to prove the soundness of the rule FIN ⊥. By induction, we have: Γ |=FOLfin λ≥2, Γ |=FOLfin λ≥3, .. .. Let I = (A, β) be a finite model such that I |=FOLfin Γ. By hypothesis, I |=FOLfin λ≥2, I |=FOLfin λ≥3, .. .. Thus, the set {λ≥2, λ≥3,.. .} is satisfied by I, and I is an infinite model, a contradiction. We conclude that Γ is not finitely satisfiable and that Γ |=FOLfin ⊥.	 
Lemma 2.5 Γ |=FOLfin ϕ iff Γ ∪ {¬ϕ} is not ﬁnitely satisﬁable.
Proof. Γ |=FOLfin ϕ iff all finite models that satisfy Γ also satisfy ϕ iff there is no finite model that satisfies Γ and does not satisfy ϕ iff there is no finite model that satisfies Γ and ¬ϕ iff Γ ∪ {¬ϕ} is not finitely satisfiable.	 
Theorem 2.6 (Completeness) If Γ |=FOLfin ϕ then Γ ▶FOLfin ϕ.
Proof. Assume Γ |=FOLfin ϕ and, by contraction, also assume that Γ /▶FOLfin ϕ. As a consequence, we have that Γ /▶FOL ϕ and that Γ ∪ {¬ϕ} is consistent. From soundness of FOL, we have that Γ ∪ {¬ϕ} is satisfiable and, by hypothesis and lemma 2.5, it is not finitely satisfiable. Hence, only infinite models satisfy Γ∪ {¬ϕ}. Then, for i ≥ 2, we have that Γ ∪ {¬ϕ} |=FOL λ≥i ⇒ Γ ∪ {¬ϕ} ▶FOL λ≥i ⇒ Γ ∪ {¬ϕ} ▶FOLfin λ≥i ⇒ Γ ∪ {¬ϕ} ▶FOLfin ⊥ ⇒ Γ ▶FOLfin ϕ.	 

The Least Fixed-Point Logic (LFP )
In this section, we briefly present LFP as in [11]. The language of LFP extends that of FOL with fixed-point operators. From a relational symbol set S, and an additional relation symbol R /∈ S, we define an (S ∪ {R})-formula ϕ(R, x) as a formula of vocabulary S ∪ {R}. For each structure A ∈ STRUCT [S], the class of all finite S-structures, the formula ϕ(R, x) gives rise to an operator Fϕ : P(Ak) → P(Ak) defined as Fϕ(X) = {a | A |= ϕ(X/R, a)}. The notation ϕ(X/R, a) means that R is interpreted as X in ϕ, that is, if A' is an (S ∪{R})-structure expanding A in
which R is interpreted as X, then A' |= ϕ(a). The least fixed-point of Fϕ, lfp(Fϕ),
is defined as lfp(Fϕ) = X∞ =  ∞ Xi, for Xi ∈ P(Ak), where the sequence of Xi
is defined as X0 = ∅,	Xi+1 = Fϕ(Xi).
The idea of the least fixed-point logic is to add formulas for computing the least fixed-point of operators Fϕ. However, least fixed-points are guaranteed to exist for monotone operators. Unfortunately, testing if Fϕ is monotone is undecidable for FOL formulas ϕ. Hence, we have to impose syntactic restrictions to assure that least fixed points are only taken for monotone operators, that is, we have to assure

that ϕ(R, x) is a formula positive in R. We say that a formula is positive in R if there are no negative occurrences of R in it. An occurrence of R is negative in a formula if it is under the scope of an odd number of negations, and positive if it is under the scope of an even number of negations. Now, we can define LFP language, semantics and logical consequence as:
Definition 3.1 (LFP language) The language of LFP extends that of FOL with the following formation rule:

if ϕ(R, x) is a formula positive in R, where R is k-ary and t is a tuple of terms, where |x| = |t| = k, then [lfpR,xϕ(R, x)](t) is a formula, whose free variables are those of t.
Definition 3.2 (LFP semantics) The satisfiability relation of LFP extends that of FOL with the following definition:
A |=LF P [lfpR,xϕ(R, x)](a) iff a ∈ lfp(Fϕ).
Definition 3.3 (LFP logical consequence) Γ |=LF P ϕ if all models that satisfy Γ also satisfy ϕ with respect to LFP satisfiability relation.
We will end this section with an use of LFP to define a query not expressible in FOL: the transitive closure query. To see this, let E be a binary relation and ϕ(R, x, y) be E(x, y) ∨ ∃z(E(x, z) ∧ R(z, y)). We can easily note that this formula is positive in R. Now consider the operator Fϕ. For a set X, we have that Fϕ(X)= E ∪(E ◦X), where E ◦X = {(a, b) | (a, c) ∈ E, (c, b) ∈ X, for some c ∈ A}. Hence, the formula [lfpR,x,yϕ(R, x, y)](u, v) defines the transitive closure of E. For additional examples, see [11].

The Infinitary Natural Deduction System for LFPfin
We can semantically define LFPfin in the following way:
Definition 4.1 (LFPfin logical consequence) Γ |=LF Pfin ϕ if all finite models that satisfy Γ also satisfy ϕ with respect to LFP satisfiability relation.
Here, we will define a correct and complete infinitary natural deduction system for LFPfin. It extends the one for FOLfin with three additional rules to deal with the introduction and elimination of least fixed-point formulas and their combined use with λ formulas.
Before presenting these rules, we need some definitions from [11]. Let ϕ(R, x)
be a formula positive in R. From the previous section, we know that to construct the least fixed-point of ϕ on a structure A, we have to inductively calculate X0 =
∅,	Xi+1 = Fϕ(Xi), and the lfp(Fϕ)= X∞ =  ∞  Xi. Each Xi will be considered
the ith-stage of the fixed-point computation.
Definition 4.2 If ϕ is positive in R, then each ϕi(xi), such that ϕi(A) 4 is exactly

4 ϕi(A) := {a ∈ Ak | A |=LF P ϕi(a)}.

Xi, is inductively definable as follows, for i ∈ N , i ≥ 0:
ϕ0(x0) := ¬(x ≡ x)	, where x is a variable in x0 ϕi+1(xi+1) := ϕ(ϕi/R, xi+1) .
The meaning of ϕ(ϕi/R, xi+1) is that every occurrence of R(y) in ϕ is replaced by ϕi(y), and all bound variables in ϕ are replaced by new ones. Back to our example of transitive closure at the end of the previous section, consider the formula ϕ(R, x, y) := E(x, y) ∨ ∃z(E(x, z) ∧ R(z, y)). The sequence of ϕi is, in this case, the following one that represents the stages of the fixed-point computation of the transitive closure operator.

Now, we will prove two theorems directly used to prove soundness of LFPfin
introduction and elimination rules.

Theorem 4.3 Let I = (A, a) be an interpretation such that I |=LF P


N, i ≥ 0. Then I |=LF Pfin [lfpR,x ϕ(R, x)](t).


fin
ϕi(t), i ∈

Proof. Since ϕi(A) defines Xi  and Xi ⊆ X∞, where lfp(Fϕ) = X∞, then
(tA,... , tA) ∈ Xi and, therefore, I |=LF P	[lfp   ϕ(R, x)](t).	 
1	k	fin	R,x
Theorem 4.4 Let  I = (A, a)  be  an  interpretation  such  that I |=LF Pfin  [lfpR,t ϕ(R, x)](t) with  domain  |A| < i + 1, for i ∈ N,  then I |=   ϕik (t), where k = |x|.
k
Proof. Note that lfp(Fϕ) = X  , since the sequence of X ’s is ascending and the
domain A of A has cardinality less than i + 1. Remember that ϕi(xi) defines the ith-stage Xi of the fixed-point computation. Hence, we conclude that

I |=
ik
LFPfin
(t).

From theorem 4.3, we can easily justify the introduction rule LFPfin − I, and with theorem 4.4, LFPfin − FP rule can be directly understood. The elimination rule LFPfin−E, follows the same pattern of the classical elimination of a disjunction since the least fixed-point formula can be thought as a disjunction of all ϕi. Hence, if we have the deduction of lfpR,x ϕ(R, x)](t) and from each ϕi(t)i we have a deduction of σ, then have a deduction of σ. The formal definition of the rules are:

ϕi(t) [lfpR,x ϕ(R, x)](t)
(LFPfin − I),i ≥ 0,i ∈ N,


[lfpR,x ϕ(R, x)](t)
ϕ0(t)0
Π0
σ
ϕ1(t)1
Π1
σ	... 
ϕi(t)i
Πi
σ	... 

σ	(LFPfin − E), 0, 1, ..., i, ...,
where hypothesis labelled with 0, 1,... , i,.. ., for i ≥ 0,i ∈ N , are all discharged, and Πi is a meta-variable for deduction used as in [13].
[lfpR,x ϕ(R, x)](t)	¬λ≥i+1


where k = |x|.
ϕik
(t)
(LFPfin − FP ),i ≥ 0,i ∈ N.

The definition of LFP syntactical consequence based on this system is:
Definition 4.5 (LFPfin syntactical consequence) Γ ▶LF Pfin ϕ if from the set of hypotheses Γ, there is a derivation in LFPfin natural deduction system to ϕ.
Finally, we can prove soundness and completeness of LFPfin. It will be pre- sented in the next subsection.

Soundness and Completeness of LFP
The proof of soundness is somewhat straightforward. Novelties, here, are in the proof of completeness and related to the notion of f -witnesses and compactness to LFPfin. Our proof is based on the one presented by [3] which follows Henkin’s method [8].
The sketch of the completeness proof for FOL is presented in [3] as follows. We want to prove that any consistent set of formulas Φ is satisfiable (theorem 4.35). Since we have only syntactic information about Φ, we will try to construct a model IΦ using just syntactic objects (definitions 4.15, 4.17, 4.18, 4.19). We have to define two conditions for a consistent set Θ being satisfiable by IΦ: negation complete and contains witnesses (definition 4.21). A negation complete set Θ that also contains witnesses is satisfiable by IΦ (corollary 4.25). Now, we have to assure that any consistent set Φ can first be extended to a set Ψ which contains witnesses (theorem 4.32), and after be extended to another set Θ that is also negation complete (theorem 4.33). Since Φ ⊆ Ψ ⊆ Θ and IΦ satisfies Θ, thence IΦ satisfies Φ.
In order to prove completeness to LFPfin we have to introduce the notion of f -witnesses (definition 4.26) which represent witnesses of finite cardinality. Then we can prove, by theorem 4.28, that if a set Φ contains f -witnesses, then for all formula of form [lfpR,x ϕ(R, x)](t) we have for some i such that ¬λ≥i+1 ∈ Φ thatΦ ▶LF Pfin

∀x1 ... ∀xn([lfpR,x
ϕ(R, x)](x ,... ,x ) → ϕik
(x1,... , xn)). This theorem allows us

to prove theorem 4.29 which assures that all theorems from a set Φ which contains f -
witnesses can be obtained by a derivation Π without using the infinite rules FIN −⊥
and LFP − E.
The notion of f -witnesses is essential to prove compactness to LFPfin for a set

Φ which contains f -witnesses (corollary 4.30). Compactness is central in the proof of theorems 4.32 and 4.33 in order to extend a consistent set Φ, which contains f -witnesses, to a set Θ that is negation complete and contains witnesses.
Note that, in theorems 4.32 and 4.33, we do not explicitly state that Φ contains f -witnesses. In fact, it is obtained by theorem 4.31 which says that any consistent set can be extended to a consistent one which contains f -witnesses.
The proof of soundness and completeness for LFPfin are presented below. The complete proof can be found at http://www.lia.ufc.br/∼alexandre/completude.pdf.
Theorem 4.6 (Soundness) If Γ ▶LF Pfin ϕ then Γ |=LF Pfin ϕ.
Proof: Only the soundness of the added rules will be analysed: the soundness of others rules ( (FIN − ⊥) and FOL rules) follows from already mentioned proofs.

(LFPfin − E): Suppose, by induction, that Γ' |=LF P

fin
[lfpR,x ϕ(R, x)](t) and

Γ0, ϕ0(t) |=LF P

fin
σ and Γ1, ϕ1(t) |=LF P

fin
σ .. ., where Γ = Γ' ∪ Γ0 ∪ Γ1	Let

I be an interpretation such that I |=LF P

fin
Γ, then as Γ' ⊆ Γ and therefore, by

theorem 4.4, we have that for some i ∈ N , I |=LF P

fin
ϕi(t). Since I |=LF P

fin
Γi and,

by using the induction hypothesis, we have Γ |=LF Pfin σ; (LF Pfin − I): Suppose

that Γ |=LF P

fin
ϕi(t). Given an interpretation I such that I |=LF P

fin
Γ, therefore

I |=LF P

fin
ϕi(t) and, by theorem 4.3, I |=LF P

fin
[lfpR,x ϕ(R, x)](t); (LFPfin −FP ):

By induction, consider Γ0 |=LF Pfin [lfpR,x ϕ(R, x)](t) and Γ1 |=LF Pfin ¬λ≥i+1,
where Γ = Γ0 ∪ Γ1. Given an interpretation I that I |=LF Pfin Γ, we have I |=LF Pfin
[lfpR,x ϕ(R, x)](t) and I |=LF Pfin ¬λ≥i+1. The last assertion tell us that I have a

domain |A| < i + 1 and therefore, by theorem 4.4, we have I |=
k = |x|. 
ik
LFPfin
(t), where

Now, some considerations about consistency useful in the proof of completeness.
Definition 4.7 (a) Φ is consistent (written: Con Φ) if and only if there is no formula ϕ such that Φ ▶LF Pfin ϕ and Φ ▶LF Pfin ¬ϕ; (b) Φ is inconsistent (written: Inc Φ) if and only if Φ is not consistent (that is, if there is a formula ϕ such that Φ ▶LF Pfin ϕ and Φ ▶LF Pfin ¬ϕ).
Theorem 4.8 For a set of formulas Φ the following are equivalent: (a) Inc Φ; (b) For all ϕ: Φ ▶LF Pfin ϕ.
Proof:	immediately from Theorem 4.6. 
Corollary 4.9 For a set of formulas Φ the following are equivalent: (a) Con Φ;
(b) There is a formula ϕ which is not derivable from Φ. 
Theorem 4.10 Every satisﬁable set of formulas is consistent.
Proof:	Similar to [3]. 
Theorem 4.11 For all Φ and ϕ the following holds: (a) Φ ▶LF Pfin ϕ iff Inc Φ ∪
{¬ϕ}; (b) Φ ▶LF Pfin ¬ϕ iff Inc Φ ∪ {ϕ}; (c) If Con Φ, then Con Φ ∪ {ϕ} or Con
Φ ∪ {¬ϕ}.
Proof:	Similar to [3]. 

Definition 4.12 The rk(ϕ) ofa formula ϕ is defined as the smallest ordinal α such that: rk(ϕ) = α = 0, if ϕ is atomic; rk(¬ϕ) = α such that rk(ϕ) = α1 and α = α1 + 1; rk(ϕ ∨ ψ)= α such that rk(ϕ)= α1, rk(ψ)= α2 and α = max{α1, α2} + 1; rk(∃xϕ) = α such that rk(ϕ  t ) = α1 and α = α1 + 1; rk([lfpR,x ϕ(R, x)](t)) = α such that rk(ϕi(t)) = αi and α = sup{α0, α1,.. .} for all i ∈ N .
Lemma 4.13 The set LS of formulas of a relational countable symbol set S in
LFP logic is countable.
Proof:	By formulas rules of LS we conclude that is countable. 
Definition 4.14 The length of a proof-tree T (called |T |) is defined as the smallest ordinal α associated to a derivation as following: If ϕ is an assumption or an
Π1 Π2 .. .  Πk
axiom then |ϕ| = 1; If Π =	ϕ	such that |Πi| = αi then |Π| = α where
Π1 Π2 .. .  Πk  .. .
α = max{α1,... αk} + 1; If Π=	ϕ	such that |Πi| = αi then |Π| = α
where α = sup{α1, α2,.. .} for all i ∈ N .
To define an interpretation IΦ = (TΦ, βΦ), we first introduce a binary relation
~ on the set TS of S − terms by:
Definition 4.15 t1 ~ t2 :iff Φ ▶LF Pfin t1 ≡ t2.
Lemma 4.16 (a) ~ is an equivalence relation; (b) ~ is compatible with the symbols

in S in the following sense: If t ~ t' ,... ,t ~ t'
then for n-ary R ∈ S, Φ ▶

1	1	n	n
'	'
LFPfin

Rt1 ... tn iff Φ ▶LF Pfin Rt1 ... tn.
Let t¯ be the equivalence class of t:

t¯ := {t' ∈ TS | t ~ t' }; and let T Φ (more

precisely T Φ,S) be the set of equivalence classes: T Φ := {t¯ | t ∈ TS}. The set T Φ
is not empty. We define the S-structure TΦ over T Φ, the so called term structure corresponding to Φ, by the following clauses:

Definition 4.17 For n-ary R ∈ S, RTΦ t¯ ... t¯
:iff Φ ▶
Rt ... t .

1	n
Definition 4.18 For c ∈ S, cTΦ := c¯.
Definition 4.19 βΦ(x) := x¯.
LFPfin	1	n

We call IΦ := (TΦ, βΦ) the term interpretation associated with Φ.
Lemma 4.20 (a) For all t, IΦ(t)= t¯; (b) For every atomic formula ϕ, IΦ |=LF P
ϕ iff Φ ▶LF Pfin ϕ; (c) For every formula ϕ and parwise distinct variables x1,... , xn,

IΦ |=LF P

fin
∃x1 ... ∃xnϕ iff there are t1,... , tn ∈ TS with IΦ |=LF P

fin
 t1...tn 
x1...xn

IΦ |=LF P

fin
∀x1 ... ∀xnϕ iff for all t1,... , tn ∈ TS with IΦ |=LF P

fin
 t1...tn 
x1...xn

Proof:	Similar to [3]. 
Definition 4.21 (a) Φ is negation complete iff for every formula ϕ, Φ ▶LF Pfin ϕ
or Φ ▶LF Pfin ¬ϕ; (b) Φ contains witnesses iff for every formula of the forma ∃xϕ

there is a term t such that Φ ▶LF P

fin
(∃xϕ → ϕ  t ).

Lemma 4.22 Suppose that Φ is consistent and negation complete and that it con- tains witnesses. Then the following holds for all ϕ and ψ: (a) Φ ▶LF Pfin ¬ϕ iff not Φ ▶LF Pfin ϕ; (b) Φ ▶LF Pfin (ϕ ∨ ψ) iff Φ ▶LF Pfin ϕ or Φ ▶LF Pfin ψ;(c) Φ ▶LF Pfin (ϕ ∧ ψ) iff Φ ▶LF Pfin ϕ and Φ ▶LF Pfin ψ; (d) Φ ▶LF Pfin (ϕ → ψ) iff if Φ ▶LF Pfin ϕ

implies Φ ▶LF P

fin
ψ; (e) Φ ▶LF P

fin
∃xϕ iff there is a term t, Φ ▶LF P

fin
ϕ  t ; (f )

Φ ▶LFP

fin
∀xϕ iff for all term t, Φ ▶LF P

fin
ϕ  t ; (g) Φ ▶LF P

fin
[lfpR,xϕ(R, x)](t) iff

Φ ▶LFP

fin
ϕ0(t) or Φ ▶LF P

fin
ϕ1(t) or ... or Φ ▶LF P

fin
ϕn(t) .. ..

Proof: Similar to [3], for (g) the proof is based on (b) using the rule (LFPfin−E) for one hand and (LFPfin − I) for the other. 
Theorem 4.23 Let Φ be a consistent set which contains witnesses and negation complete. Then IΦ have a ﬁnite domain.
Proof:	It is easy to see that if T Φ is infinite we can prove each λ≥i, a contra- diction. 
Theorem 4.24 Let Φ be a consistent set of formulas which is negation complete and contains witnesses. Then for all ϕ in LFP, IΦ |=LF P  ϕ iff Φ ▶LF P  ϕ.
Proof:	Similar to [3] but here we have to use transfinite induction on rk(ϕ) to deal with lfp-formulas. For this case, we apply theorem 4.23. 
Corollary 4.25 If Φ is a consistent set which is negation complete and contains witnesses, then IΦ |=LF P  Φ. 
Definition 4.26 A set Φ contains f -witnesses if for some i ≥ 2, ¬λ≥i ∈ Φ.
Theorem 4.27 If Φ ▶LF Pfin ¬λ≥i then Φ ▶LF Pfin ¬λ≥i+1.
Proof:	Since it is proved in FOL that λ≥i+1 → λ≥i, it suffices to use the contraposition.
Theorem 4.28 If a set Φ contains f-witnesses, then for all formula of form [lfpR,x ϕ(R, x)](t) we have Φ ▶LF Pfin  ∀x1 ... ∀xn([lfpR,x ϕ(R, x)](x1,... , xn) → ϕ (x1,... , xn)) (where k = |x|), for some i such that ¬λ≥i+1 ∈ Φ.
Proof: Since ¬λ≥i+1 ∈ Φ, for some i ∈ N
[lfpR,x ϕ(R, x)](x1,. .., xn)0 ¬λ≥i+1

k
ϕi (x1,. .. , xn)
k
(LFPfin − FP )
(→ −I), eliminating 0

[lfpR,x ϕ(R, x)](x1,. .., xn) → ϕi (x1,.. ., xn)


k


∀x1 ... ∀xn([lfpR,x ϕ(R, x)](x1, ... , xn) → ϕi (x1,. .., xn))
Where k = |x|. 
(∀− I)n
.

Theorem 4.29 For all set Φ which contains f-witnesses, if Π is a derivation of ϕ
from a set Φ, then there is a derivation Π' of ϕ from a set Φ such that |Π'| < ω.
Proof: We use induction on rules. The FOL rules and the rules (LFPfin − FP ) and (LFPfin − I) are trivial: given a proof of premises such that |Πi| < ω, then the

tree has a length less than ω. Now, consider the rule (FIN — ⊥) and, by induction
hypothesis, Π' , Π' , .. ., such that:

1	2
'
1
λ≥2

'
2
λ≥3  .. .
⊥

and |Π'| < ω for all natural number i. Since Φ contains f -witnesses, therefore, for some j, чλ≥j ∈ Φ. Now we are able to rewrite the last derivation as:
'
j−1
λ≥j	¬λ≥j
⊥
which contains length less than ω. Now, the proof of the (LFPfin — E) case. Using the induction hypothesis, we have:


Π
[lfpR,x ϕ(R, x)](t)


ϕ0(t)
'
0
σ


ϕ1(t)
'
1
σ	. . .


ϕi(t)
'
i
σ	... 

σ	(LFPfin − E)
Since Φ contains f -witnesses, then by theorem 4.28, we have a finite derivation

Φ ▶	6x
... 6x
([lfp
ϕ(R, x)](x ,... ,x ) →	ik

LFPfin	1
we obtain:
n	R,x
1	n	ϕ
(x1,... , xn)) and, hence,

[lfpR,x ϕ(R, x)](x1,.. ., xn)0  ¬λ≥i+1

k
ϕi (x1,. .., xn)
(LFPfin − FP )



k
[lfpR,x ϕ(R, x)](x1,.. ., xn) → ϕi (x1, ... , xn)
k
(→ −I), eliminating 0
(∀− I)n

∀x1 .. . ∀xn([lfpR,x ϕ(R, x)](x1,. .., xn) → ϕi (x1,.. ., xn))
Π'		 (∀− E)n

[lfpR,x ϕ(R, x)](t)


k

ϕi (t)
'
i
σ
[lfpR,x ϕ(R, x)](t) → ϕi (t)

where k = |x| which has length less than ω.  .
Corollary 4.30 (Compactness for LFPfin) For all consistent set Φ which con- tains f-witnesses the following relation holds: Φ is consistent iff all ﬁnite Φ0 ⊂ Φ is consistent.
Proof: The theorem 4.29 says that we can drop infinitary rules in derivations for sets containing f -witnesses. Hence, Φ is consistent iff all finite subset is consistent.
 
Theorem 4.31 For all consistent set Φ0 there is a consistent set Φ such that Φ0 ⊆
Φ and contains f-witnesses.
Proof:	Since Φ0 is consistent this means that for some i, Φ0 /▶LF Pfin λ≥i and, by theorem 4.11,Φ := Φ0 ∪ {чλ≥i} is consistent. 
Theorem 4.32 Consider a consistent set Φ with a ﬁnite number of free variables. Then there is a consistent set Ψ such that Φ ⊆ Ψ and Ψ contains witnesses.
Proof:	Similar to [3] by using a sort of ‘compactness’ suggested by corollary 4.30.

Theorem 4.33 Given Ψ consistent, then there is a consistent set Θ such that Ψ ⊆
Θ and Θ is negation complete.
Proof: Similar to [3] by using a sort of ‘compactness’ suggested by corollary 4.30.
Corollary 4.34 Given a consistent set Φ such that Φ contains a ﬁnite number of free variables. Then Φ is satisﬁable. 
Now, we are able to consider any number of free variables.
Theorem 4.35 Given a consistent set Φ, then Φ is satisﬁable.
Proof: The proof uses a similar technique presented in [3] but here we use the fact that there is only a finite equivalence class of terms, and then we reduce Φ to a Φ' with finitely free variables. By consistency of Φ' and applying corollary 4.34, we find a model for Φ. 
Theorem 4.36 (Completeness) For all Φ and ϕ: If Φ |=LF Pfin ϕ then Φ ▶LF Pfin
ϕ.
Proof:	Assume that Φ |=LF Pfin ϕ, but not Φ ▶LF Pfin ϕ. Then Φ ∪ {чϕ} is consistent (by theorem 4.11) but not satisfiable, a contradiction to Theorem 4.35.
 

Normalization Results
A normalization procedure is a rewriting process that transforms a derivation into another one through reduction steps. These reduction steps aim to eliminate all maximum segments, that is, formulas that represent some sort of redundancy. The endproduct of this process is a derivation in a normal form.
For the sake of space, we will just point out the main ideas used in our normaliza- tion procedure to LFPfin. The overall proof can be found in http://www.lia.ufc.br/
∼alexandre/lfp/normalizacao.pdf.
The precise definition of this normal form depends on which properties we want to obtain from it. Usually one requires, at least, the subformula property which says that all formulas that appear in a normal derivation are either subformulas of the hypotheses Γ not discharged in the derivation or subformulas of the conclusion α 5 . An important consequence of the subformula property is the possibility of con- structing automatic theorem provers in a more efficient way since all formulas that appear in a normal derivation are all predictable, that is, they are all subformulas of Γ and α as above mentioned.
We followed Prawitz’s normalization procedure [13] for FOL. See also [18] and
[12] for additional details. For our equality rules, reflexivity and substitution, we defined reduction steps in order to push all equality rules to the top of the deduc- tion, or immediately below elimination rules. The motivation for such reductions

5 Except for hypotheses discharged by applications of Reduction ad Absurdum rule and for occurrences of
⊥ that stand immediately below such hypotheses.

is that the substitution rule may hide maximum segments. In section 1.3.2 of http://www.lia.ufc.br/∼alexandre/lfp/normalizacao.pdf, we defined our notion of equational maximum segments and, in section 1.4.2, our equational reduction steps (operational, permutative and the ones related to absurdum rules) are provided. Our normalization procedure for FOL with equational rules are then presented in section 1.6 of http://www.lia.ufc.br/∼alexandre/lfp/normalizacao.pdf.
Although we have introduced rule LFPfin — FP in our system in order to make easier the completeness proof presented in the previous section, we can prove that such rule is derived from the others (see http://www.lia.ufc.br/ ∼alexandre/lfp/ re- gralfppf.pdf for details). Hence, we will consider normalization for LFPfin system without this rule. Additionally, we will not consider rule FIN — ⊥ in the normali- zation procedure since this rule introduces a sort of indeterminacy in any derivation Π of α from Γ in LFPfin: if FIN — ⊥ is applied in Π, some formulas that appear in Π are neither subformulas of Γ nor of α. We could relax the subformula prop- erty for LFPfin by also allowing formulas that are related to the λ-formulas (for instance, subformulas of them) in the normal form of Π. However, we prefer do not follow this way. Thus, as a first step of our investigation, we will consider proofs in LFPfin without LFPfin — FP and FIN — ⊥ but, in order to maintain the idea of using LFP restricted to finite models, we will introduce a formula чλ≥i, for some i ≥ 2, that represents a witness of finite cardinality in the set Γ of hypotheses not discharged in Π.
The normalization procedure for this fragment of LFPfin system combines all reduction steps above mentioned to FOL with equational rules plus new ones to deal with LFPfin — I and LFPfin — E. Since we are considering derivations of α from a set Γ∪ {чλ≥i}, for some i ≥ 2, we may just use a finite version of LFPfin — E as defined at the beginning of section 1.7 in http://www.lia.ufc.br/∼alexandre/lfp/ normalizacao.pdf. The new reduction steps for the finite version of LFPfin — E and LFPfin — I are similarly defined as the ones for classical first-order rules. In this finitary system, it is possible to prove the normalization theorem for LFPfin in the sense that, if Γ ∪ {чλ≥n} ▶LF Pfin ϕ, then there is a normal derivation of ϕ from Γ ∪ {чλ≥n} such that there are no occurrences of maximum segments.

Conclusions
In this paper, we introduced an infinitary natural deduction system to the Least Fixed-Point logic restricted to finite models, LFPfin. This calculus is an extension of an infinitary system for the First-Order Logic restricted to finite models, FOLfin, that we also defined. We proved soundness and completeness of these systems, and a normalization theorem for fragments of them.
At first glance, it seems to be impossible to obtain a deductive system for FOLfin and LFPfin since validity over finite FOL models is not recursively enumerable. The trick used here was to relax the notion of formal proof by allowing the use of infinite rules.
We can compare our work with the deductive system defined by Compton [1] for

the existential fragment of LFP. Our introduction and elimination rule in natural deduction style for the new operator here defined, the lfp operator, is closely related to the right and left rules for inductive definitions in Compton’s sequent calculus. However, since we are concerned with the use of LFP within the scope of finite models, differently from Compton’s work, we had to introduce two rules to deal with the cardinality of the domain, the FIN — ⊥ used in the context of the FOLfin, and LFPfin — FP , with additional rules to deal with the universal quantifier, not considered in Compton’s work.
We are particularly interested in LFP over finite models due to its importance within theoretical computer science. In fact, LFP captures the complexity class PTIME over the class of finite ordered structures. Since LFP is traditionally de- fined within the scope of Finite Model Theory (FMT), the definition of our LFP infinitary deductive system opens up an alternative way of proving results already obtained within FMT, and also new results through a proof theoretical perspec- tive as normalization theorems and their corollaries: the subformula property, for instance. Finally, it is known that every DATALOG¬ database query can be trans- lated to ∃LFP, the existential fragment of LFP [11]. Hence, we can investigate how our deductive system for LFPfin can be used as a theorem prover to compute queries on relational databases.

References
K.J. Compton. A Deductive System for Existential Least Fixpoint Logic. Journal of Logic and Computation, 3(2): 197-213, 1993.
H.D. Ebbinghaus & J.Flum. Finite Model Theory. Springer, 1995.
H.D. Ebbinghaus, J.Flum & W.Thomas. Mathematical Logic. 2nd Edition, Undergraduate Texts in Mathematics, Springer, New York, 1994.
R. Fagin. Generalized First-order Spectra and Polynomial-time Recognizable Sets. In Complexity of Computation, R. Karp, ed., SIAM-MAS Proceedings, 7, 1974, 43-73.
R. Fra¨ıss´e. Sur Quelques Classifications des Syst`emes de Relations. Universit´e d’Alger, Publications Scientifiques, S´erie A, 1, 1954, 35-182.
G.Gentzen. Die Widerspruchsfreiheit der reinen Zahlentheorie, Mathematische Annalen, 112, 493-565. Translation in M.E.Szabo, editor, The Collected Papers of Gerhard Gentzen, pages 132-170, North- Holland, Amsterdam, 1969.
G.Gentzen. Beweisbarkeit und Unbeweisbarkeit von Anfangsfllen der Transfiniten Induktion in der reinen Zahlentheorie, Mathematische Annalen, 119, 140-161. Translation in M.E.Szabo, editor, The Collected Papers of Gerhard Gentzen, pages 287-311, North-Holland, Amsterdam, 1969.
L.Henkin. The Completeness of the First-Order Functional Calculus. Journal of Symbolic Logic, 14, 1949.
N. Immerman. Upper and Lower Bounds for First Order Expressability. Journal of Computer and System Sciences, 25, 1982, 76-98.
N. Immerman. Relational Queries Computable in Polynomial Time (extended abstract). In ACM Symposium on Theory of Computation. ACM Press, 1982, 147-152.
L. Libkin. Elements of Finite Model Theory. Springer, Berlin, 2004.
Pereira, L.C., and Massi, C.D.B., Normalizac¸˜ao para a Lo´gica Cla´ssica, O que nos faz pensar, Cadernos de Filosofia da PUC-RJ 2 (1990), 49-53.
D. Prawitz. Natural Deduction: A Proof-Theoretical Study. In Stockholm Studies in Philosophy 3, Almqvist and Wiksell, Stockholm, 1965. Acta Universitatis Stockholmiensis.


K. Schu¨tte. Beweistheoretische Erfassung der Unendliche Induktion in der Zahlentheorie. Mathemastiche Annalen, 122:369389, 1950.
D. A. Schmidt. Denotational Semantics: a Methodology for Language Development. Allyn and Bacon, INC, Boston, 1986.
D. Scott. Domains for Denotational Semantics. LNCS 140: Proc. 9th ICALP, pp.577–613, Springer, Berlin, 1982.
B.A.Trakhtenbrot. The Impossibility of an Algorithm for the Decision Problem for Finite Models. Doklady Academii Nauk SSSR, 70, 1950. 569-572.
A.S.Troelstra & H.Schwichtenberg. Proof Theory. Cambridge University Press, Cambridge, 1996.
D. Van Dalen. Logic and Structure. 2nd Edition. Springer Verlag. Berlin. 1989.
M.Y.Vardi. The complexity of relational query languages. In Proc. ACM Symp. on Theory of Computing, 1982, 137-146.
