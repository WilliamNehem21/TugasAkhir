

Electronic Notes in Theoretical Computer Science 223 (2008) 215–237
www.elsevier.com/locate/entcs

Analyzing Reachability for Some Petri Nets With Fast Growing Markings
M. Praveen and Kamal Lodaya
The Institute of Mathematical Sciences, CIT Campus, Chennai 600113, India

Abstract
Using linear algebraic techniques, we analyse the computational complexity of testing reachability in Petri nets for which markings can grow very fast. This leads to two subclasses of Petri nets for which the reachability problem is PSPACE-complete. These subclasses are not contained in any other subclass for which complexity of the reachability problem was known, such as those given in Esparza and Nielsen’s survey [5]. We give an example where further extension of our subclasses fails to maintain the upper bound.
Keywords: Petri net, reachability problem, T-invariant-less net, partially bounded net

Introduction
The reachability problem for Petri nets was first mentioned in [7] and remained open for a long time. Hopcroft and Pansiot [6] gave the example of a net whose reachability set is not semilinear. They also showed that when the reachability set is semilinear, the problem is decidable. Valk and Vidal-Naquet [23] gave an example of a family of bounded nets where the final marking grows according to Ackermann’s function.
Mayr [16] and Kosaraju [8] gave algorithms for reachability over all nets. The algorithms in both proofs have non-primitive recursive complexity, and the exact complexity of the problem has been open since then. Reutenauer’s book [21] has a detailed exposition of Kosaraju’s proof. A simplification of this proof, still not primitive recursive, was given by Lambert [13]. Janˇcar points out a bug [18] in a paper claiming primitive recursive upper bound for the reachability problem. The best known lower bound remains exponential space, given by Lipton [15,4]. Many subclasses of Petri nets have been studied where a better complexity of the reachability problem has been established. Esparza and Nielsen’s survey [5] contains a list of such results. We establish PSPACE complexity for two new subclasses.
Linear algebraic techniques for the analysis of Petri nets are well studied

1571-0661 © 2008 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2008.12.041

[17,14,3,22,12], for example the concept of a T-invariant is used to establish re- currence of a marking. Recently, Kostin [9] gave an algorithm for reachability in T-invariant-less Petri nets and followed it up with an algorithm for a more gen- eral reachability analysis [10]. Hopcroft and Pansiot’s example net [6] with non- semilinear reachability set falls into this subclass. As yet, there is no complexity analysis for these algorithms. We show that reachability for T-invariant-less Petri nets is PSPACE-complete. Our technique follows Rackoff [20], who used bounds on solutions of linear diophantine equations to give an upper bound on the complexity of the boundedness problem.
We then extend the technique to get a more general subclass of Petri nets while maintaining the PSPACE upper bound. Somewhat surprisingly, Valk and Vidal- Naquet’s example family of nets [23] falls into this subclass, because the initial and the final marking are part of the input. But a small modification of this example shows that our technique cannot be extended further.

Notation and preliminary definitions
Let Z be the set of integers, N the set of natural numbers and N+ the set of positive integers. A finite Petri net is a 4-tuple N = (P, T, Pre, Post ) where
P is a set of m places,
T is a set of n transitions,
Pre and Post are the incidence functions:

Pre : P × T → [0 ... D]  (representing arcs going from places to transitions),
Post : P × T → [0 ... D]  (representing arcs going from transitions to places),

where D ∈ N. We assume a net is presented as two matrices, one each for Pre and Post . This has size 2mnd bits, where d is defined to be log D. The m × n incidence matrix of the net N = [cij] (1 ≤ i ≤ m, 1 ≤ j ≤ n) is given by cij = Post (pi, tj) − Pre(pi, tj). In the rest of this paper, we will assume that a Petri net N has m places, n transitions, D is the maximum of range of Pre and Post , and
that N is its incidence matrix.
A function M : P → N is called a marking. With the implicit ordering (p0, p1,..., pm) on the set of places, we also represent M as a column vector where i’th row contains M (pi). At a marking M , a place p is said to have M (p) tokens. A net system (N, M0, Mf ) is a Petri net N with an initial marking M0 and a fi- nal marking Mf . A transition t ∈ T is enabled at marking M iff for all p ∈ P , M (p) ≥ Pre(p, t). If t ∈ T is enabled at a marking M , then t may be fired yielding a new marking M' given by the equation M'(p) = M (p) − Pre(p, t)+ Post (p, t) for all p ∈ P , or M' = M + Nt, where t is the characteristic vector of the transition (i.e., a column vector having a 1 at the position corresponding to t and 0 everywhere
else). M →t M' denotes that M' is reached from M by firing t.

A finite sequence of transitions σ = t1t2 ... tr is a firing sequence of (N, M0, Mf )
iff there exist markings M ,M ,...,M such that ∀i : 1 ≤ i ≤ r, we have M	→ti M .
1	2	r	i−1	i
Its Parikh vector σ : T → N has as the i’th component the number of occurrences in σ of transition ti. In the above case, we have Mr = M0 + N σ. We will also
use σ(U ) to denote the number of occurrences in σ of transitions from a subset of transitions U .
We say that the marking Mr is reachable from M0 by firing σ: M0→σ Mr. The reachability set R(N, M0) = {M : P → N | ∃ finite firing sequence σ : M0→σ M} denotes the set of all markings reachable from M0.
Definition 2.1 (Reachability problem) Given a net system (N, M0, Mf ), the reach- ability problem is to decide if Mf ∈ R(N, M0). Let r0 = max(range(M0)) and rf = max(range(Mf )). Let m0 = log r0 and mf = log rf . For the purpose of com- plexity analysis, we will take size of the input to be N = 2mnd + m0 + mf bits, where d = log D as discussed above.
A net system (N, M0, Mf ) is said to be b-bounded for some b ∈ N if all mark- ings in R(N, M0) have at most b tokens in all places. A 1-bounded net system is commonly called a 1-Safe net. (N, M0, Mf ) is said to be bounded if it is b-bounded for some b ∈ N. A Petri net N is said to be structurally bounded if for every initial marking Mi, there exists some bi ∈ N such that all markings in R(N, Mi) has at most bi tokens in all places. Given a net system (N, M0, Mf ), the boundedness problem is to decide whether it is bounded.
We will use k to denote a column vector of all k’s: the dimension of the vector will be clear from the context. For example, 0 denotes a column vector of all 0’s. If T is a finite set and U ⊆ T , then e[U ] is the characteristic vector which has entry 1 in components corresponding to elements of U and 0 entries everywhere else. We use I for the identity matrix.
Definition 2.2 (T-invariant) Suppose N = (P, T, Pre, Post ) is a Petri net. An integer vector (mapping) J : T → Z is a T-invariant iff for all p ∈ P ,
Σ J (t) (Post (p, t) − Pre(p, t)) = 0 .
t∈T

If all entries of a T-invariant J are non-negative (positive), then it is called a semi-positive (resp.  positive) T-invariant.  If σ is a finite firing sequence of (N, M0, Mf ) with Parikh vector σ = J , then, by definition of T-invariant, we
get M0→σ M0. Thus, semi-positive and positive T-invariants denote firing sequences whose net effect is zero on every place.

S-variants and T-invariant-less nets
All proofs of general Petri net reachability use Euler’s theorem on a vector v ≥ 1
from which sufficiency of reachability is derived (for example in the conditions for

Kosaraju’s sufficiency theorem, cf. [21]). An S-variant generalizes this kind of vector with weights.
Definition 3.1 (S-variant) Suppose N = (P, T, Pre, Post ) is a Petri net. An inte- ger vector (mapping) V : P → Z is an S-variant iff for all t ∈ T ,
Σ V (p) (Post (p, t) − Pre(p, t)) ≥ 1 .
p∈P

If V  is an S-variant and M  is a marking,  then by V (M ),  we denote

Σp∈P
V (p)M (p). Thus, if V is an S-variant and M →t M', then V (M') > V (M ).

We will represent S-variants in terms of expressions. If N is a net with 3 places
p1, p2 and p3, then the expression 2p1 + 3p2 − 4p3 denotes the S-variant [2, 3, −4]T .

Characterizing nets with S-variants
For a Petri net N , an S-variant V is an integral solution to the system of inequalities

N T v ≥ 1 .	(1)
Also, a T-invariant J is an integral solution to the system of equations

Nj = 0 .	(2)

The following theorem (a proof is in [19, Section 3.1.1]) is an application of the well known Farkas lemma in linear algebra [17].
Theorem 3.2 A Petri net has an S-variant iff it does not have any non-trivial semi-positive T-invariants.
Theorem 3.3 Given a Petri net N, it can be checked in polynomial time whether
N has S-variants or not.
Proof. Checking for existence of S-variants is equivalent to checking existence of rational solutions to the system of inequalities N T v ≥ 1. This is the same as checking the feasibility of a linear programming instance with rational data. 
Example 3.4 Hopcroft and Pansiot’s example to show that the reachability set of Petri nets need not be semilinear [6] is shown in Fig. 1. When the initial marking has one token each in places p2 and p3 and no tokens anywhere else, this net can reach markings where number of tokens in p1 and p2 is equal to or less than exponential of the number of tokens in p5.
This net has S-variants, e.g. V = [3, 2, 0, 1, 2]T is an S-variant for this net.

Reachability algorithm
In this section, we give a reachability algorithm for T-invariant-less nets and analyze its complexity.








p5
p3



Fig. 1. Hopcroft and Pansiot’s example net
Proposition 3.5 If σ is a ﬁnite ﬁring sequence of the net system (N, M0, Mf ) such that M0→σ M and if V is an S-variant of N, then the length of σ is at most V (M ) − V (M0).
Proof. Suppose σ = t1t2 ... tr and M0→t1 M1→t2 ... →tr Mr = M . By definition of S- variant, for 1 ≤ i ≤ r, V (Mi) ≥ V (Mi−1) + 1. Starting from i = r and iteratively substituting V (Mi−1) with its lower bound, we get V (Mr) ≥ V (M0) + r. Hence, r ≤ V (M ) − V (M0).	 
Our complexity analysis is based on the following result.
Theorem 3.6 (Borosh and Treybig [1], Theorem 5) Let A be a n×r integer matrix and B be an n× 1 integer matrix. Suppose x denotes a r × 1 vector of variables and the system of equations Ax = B has a non-trivial positive integral solution. Also suppose that R is the maximum of absolute values of all minors of the augmented matrix [A | B]. If A is a full row rank matrix and n ≤ r, then the system of equations Ax = B has a positive integral solution where each entry of the solution is at most Rn + nrR2.
A result similar to the one below was used by Rackoff [20] to give exponential space upper bound for the boundedness problem of Petri nets. In the rest of this paper, some results will be provided only with a proof sketch, with the detailed proofs in Appendix A.
Lemma 3.7 If a Petri net N has S-variants, it has one such that the absolute value of each entry is O mn2(n!)2D2n .
Proof (sketch). An integral solution exists for N T v ≥ 1 iff a positive integral solution exists for the system of equations I | N T | −N T vs = −1. The result follows by applying Theorem 3.6 to these equations.	 
Proposition 3.8 Suppose (N, M0, Mf ) is a net system with S-variants. If σ is a ﬁnite ﬁring sequence of (N, M0, Mf ) such that M0→σ Mf , the length of σ is at most O(m2n2(n!)2D2nmax(M0, Mf )).
Proof. Since N has S-variants, Lemma 3.7 shows that there is an S-variant V such that the absolute value of each entry of V is O(mn2(n!)2D2n). By Proposition 3.5,

we have
length of σ ≤ V (Mf ) − V (M0)
= Σ V (p) (Mf (p) − M0(P ))
p∈P
≤ Σ O(mn2(n!)2D2n) max(M0, Mf )
p∈P
≤ mO(mn2(n!)2D2n) max(M0, Mf ) Therefore, length of σ ≤ O(m2n2(n!)2D2n max(M0, Mf )) .
 
By Proposition 3.8, it is easy to see that the non-deterministic algorithm given in Algorithm 1 is correct. Kostin’s algorithm in [9] is deterministic.

Algorithm 1: Reachability algorithm for Petri nets with S-variants Now, we analyse the space complexity of Algorithm 1.
Lemma 3.9 Algorithm 1 runs in polynomial space.
Proof (sketch). Length of the firing sequence guessed by the algorithm is bounded. Calculating the amount of memory needed by all the variables based on this bound yields the desired result.	 
Theorem 3.10 The reachability problem for T-invariant-less Petri nets (that is, those with S-variants) can be solved in polynomial space.
Proof. Since by Lemma 3.9, there is a non-deterministic PSPACE algorithm for the problem being considered, we can apply the well known theorem of Savitch to con- clude that there is a deterministic algorithm that solves the problem in PSPACE. 
Lower bound
Now, we will prove that the reachability problem in Petri nets with S-variants is PSPACE-hard. Cheng, Esparza and Palsberg [2] gave a reduction from the prob- lem of satisfiability of quantified boolean formulas (QBF-SAT) to the reachability problem in 1-Safe nets. We will use the same reduction and prove that the resulting net has S-variants. This will give us the necessary hardness proof.

Here, we give some prominent features of the Petri net to which QBF-SAT is reduced to in [2]. For a QBF formula G, a Petri net NG is constructed. For our purposes here, we note the following important places of NG:
The place G in, standing for “initialize G”.
For every boolean variable x used in G, the places x is T and x is F .
The places G T and G F
Intuitively, NG starts with one token in G in, indicating that testing of G has started. A token in x is T (resp. x is F ) indicates that variable x is assigned to TRUE (resp. FALSE). When NG finishes testing G (using many other places and transitions not mentioned here), it puts a token in G T (resp. G F ) to indicate that G is TRUE (resp. FALSE). We refer the reader to the original paper [2] for further details. The following result shows that NG has S-variants.
Theorem 3.11 Suppose G is a Quantiﬁed Boolean Formula and NG is the cor- responding net as given in [2]. Then, for each i ∈ N+, NG has a S-variant V (i) satisfying the following properties:
V (i)+ k · G in is a S-variant of NG for 0 ≤ k ≤ i − 1.
The coefficient of G in in V (i) is 0.
There exists a ﬁnite number jG(i) such that removing a token from G T or
G F decreases V (i)+ k · G in by at most jG(i) for 0 ≤ k ≤ i − 1.
The coefficient of X is T and x is F in V (i) is 0 for any variable x that is not bounded (by ∀ or ∃) in G.
Proof (sketch). The S-variant can be constructed by induction on structure of
NG, just like NG itself is constructed by induction on structure of G.	 
Partial S-variants and partially bounded nets
Intuitively, Theorem 3.2 says that S-variants exist for a Petri net if the action of any transition cannot be “undone” by firing other transitions. Unlike transitions that are part of some semi–positive T-invariants, the action of a transition that is not part of a semi–positive T-invariant cannot be cancelled. With the firing of such a transition, the net makes some progress towards reaching the final marking. The following definition makes this formal.
Definition 4.1 Suppose N is a Petri net and t is a transition.  t is said to be
progressive if it is not part of any semi-positive T-invariant.
In a Petri net with S-variants, all transitions are progressive. Just like S-variants that measure the progress made by each transition, we introduce partial S-variants that measure progress made by progressive transitions.
Definition 4.2 Suppose N = (P, T, Pre, Post ) is a Petri net and ∅ /= U ⊆ T is a nonempty subset of progressive transitions. An integer vector (mapping) V : P → Z is a partial S-variant iff it satisfies the following properties:

For all t ∈ U , Σp∈P V (p)(Post (p, t) − Pre(p, t)) ≥ 1.
For all t ∈ T \ U , Σp∈P V (p)(Post (p, t) − Pre(p, t)) ≥ 0.
As before, if M is a marking, V (M ) denotes Σp∈P V (p)M (p). If t ∈ U and
M →t M', then V (M') > V (M ) + 1. If t ∈ T \ U and M →t M', then V (M') ≥ V (M ).

Example 4.3 Consider the Petri net shown in Fig. 2, which is same as the one in Fig. 1 with place p5 removed. Due to this removal, transitions t3 and t4 that were progressive in the original net are now not progressive. However, transitions t1 and t2 are still progressive since they are not part of any semi-positive T-invariants. 3p1 + 2p2 denotes a partial S-variant for this net.


t2

p4
p3



Fig. 2. Example of a Petri net with progressive transitions
If for a Petri net N , N T is represented as
⎡ N 1 ⎤
N T =
N 2
where N 1 represents progressive transitions and N 2 represents other transitions, then a partial S-variant is an integral solution to the system of inequalities
⎡ N 1 ⎤	⎡ 1 ⎤
v ≥	 ⎦ .	(3)
⎣ N 2 ⎦	⎣

The two following results extend to partial S-variants properties similar to those of S-variants in section 3. We refer to [19, Section 3.3.1] for proofs.
Theorem 4.4 A Petri net has a partial S-variant iff it does not have any positive T-invariant.
Lemma 4.5 If a Petri net N has partial S-variants, it has one where the absolute value of each entry is O(mn2(n!)2D2n).
Now, we extend the subclass of Petri nets with S-variants. Even if a Petri net doesn’t have S-variants, we can use partial S-variants to bound the number of oc- currences of progressive transitions in potential firing sequences. If other structural

and/or behavioural properties of the net system imply a bound on the number of oc- currences of other transitions, we can bound the total length of the firing sequence. The following definition captures this intuition in a generic way.

Definition 4.6 Suppose N = (P, T, Pre, Post ) is a Petri net. The net system (N, M0, Mf ) is called partially bounded if it satisfies the following properties:
The set U of progressive transitions of N is not empty.
The non progressive transitions V = T \ U are bounded by progressive ones, that is, there is a bound function f such that for every firing se- quence σ with M0→σ M , there is another firing sequence τ with M0→τ M and τ (V ) ≤ f (τ (U ), M0, Mf , D, n, m).

Different bound functions in the above definition lead to different complexities of the resulting reachability algorithm. We will now look at a sufficient condition for obtaining a PSPACE algorithm.

Lemma 4.7 Consider the subclass of partially bounded net systems (N, M0, Mf ) with bound function f of the form f = (p1(τ (U ), D, M0, Mf ))p2(m,n), for some poly- nomials p1 and p2. There is a PSPACE algorithm that solves the reachability prob- lem in this subclass of Petri nets.

Proof (sketch). If Mf is reachable, the number of occurrences of progressive tran- sitions in the firing sequence can be bounded with the help of partial S-variants, with an argument similar to the one in Proposition 3.5. The bound function f then gives a bound on total length of the firing sequence. With this new bound, Algorithm 1 works in polynomial space.	 

Example 4.8 Fig. 3 shows an example family of net systems Ni,i ∈ N, given by Valk and Vidal-Naquet [23]. N0 is as shown in the top part and Ni is built on top of Ni−1 as shown in the bottom part. This net system is bounded but can reach markings that are non-primitive recursive w.r.t. the initial marking and the size of the net. t0, u0, xi, vi and wi are the only progressive transitions in Ni. Transition t0 plays an important role in enabling the net to reach non-primitive recursive markings. The analysis in Appendix B takes advantage of the fact that t0 is progressive to get a bound function f that satisfies the properties required by Lemma 4.7.

It might seem surprising that a net with markings growing so fast can be an- alyzed in polynomial space. To see this simply observe that the final marking for which we analyze the reachability will have to be given as part of the input.
One disadvantage of partially bounded nets is their dependence on the bound function f . Given an arbitrary Petri net, there is no clear way of identifying whether a bound function exists and to compute it if it does exist. We fix this in the next section to identify a suitable subclass.







e0

ci







di



Fig. 3. Valk and Vidal-Naquet’s example family of nets

Structurally partially bounded nets
One way of overcoming the disadvantage of partially bounded nets mentioned above is to look for simpler properties of Petri nets that automatically imply the existence of a bound function with properties required by Lemma 4.7. The subclass of Petri nets defined in Definition 4.9 below satisfy this requirement.
Definition 4.9 A Petri net N = (P, T, Pre, Post ) is said to be structurally par- tially bounded if it satisfies the following properties:
N has a non empty subset U ⊆ T of progressive transitions.
N , when restricted to T \ U is structurally bounded.
It is known [17] that a Petri net N is structurally bounded iff the system of inequalities N T y ≤ 0 has a strictly positive integral solution. Using this, we will see that for structurally partially bounded nets, there will always be a bound function satisfying the requirements in Lemma 4.7.
Given an arbitrary Petri net, we can identify whether it is a structurally partially bounded net in polynomial time.
Lemma 4.10 Let N be a Petri net. There is a polynomial time algorithm that checks whether N is a structurally partially bounded net.
Proof. We first check if each transition is progressive. This can be done by for- mulating a linear programming problem that checks whether a transition is part of some semi-positive T-invariant and then testing its feasibility with rational data. With n transitions, n such tests need to be done. Then, we check if removing pro- gressive transitions makes N structurally bounded. This can again be reduced to checking feasibility of a linear programming problem with rational data. Clearly, all the above operations can be done in polynomial time.	 

Our modification of Hopcroft and Pansiot’s Petri net of Fig. 2 is structurally partially bounded, since removing the progressive transitions t1 and t2 results in a structurally bounded net. But Valk and Vidal-Naquet’s family of nets (Fig. 3), although partially bounded, is not structurally partially bounded, since removing the progressive transitions t0, u0, xi, vi and wi does not make the remaining net structurally bounded.
The proof of the following lemma is very similar to that of Lemma 4.5. [19] can be referred to for a proof.
Lemma 4.11 If a Petri net N is structurally bounded, there exists a positive in- tegral solution to the system of inequalities N T y ≤ 0 where each component is O mn2(n!)2D2n .
Theorem 4.12 The reachability problem for the subclass of structurally partially bounded nets is PSPACE-complete.
Proof. Since Petri nets with S-variants are structurally partially bounded, the PSPACE lower bound of Theorem 3.11 applies here also.
Suppose (N, M0, Mf ) is the net system for which we need to solve reacha-
bility, where N is structurally partially bounded. Since Mf is reachable, there is a firing sequence σ such that M0→σ Mf . Let σ consist of the components σ0u1σ1u2σ2 ··· ukσk for some k, where u1, u2,..., uk are progressive transitions and σ0, σ1,..., σk consist of non-progressive transitions. Now, define firing sequence τ as τ = τ0u1τ1u2τ2 ··· ukτk, where τi is same as σi but with subsequences that start
and end with the same marking removed. Thus, when τi is fired, all the interme- diate markings that are reached are distinct from each other. It is easy to verify that M0→τ Mf . It is also easy to see that length of τi is bounded by the number of distinct possible markings that can be reached during the firing of τ .
Suppose V = T \ U is the set of non-progressive transitions and NV is the Petri net N restricted to V . From Lemma 4.11, there exists a positive integral vector β where each component is greater than 0 and bounded by O mn2(n!)2D2n , such that NV T β ≤ 0. From Lemma A.1 (stated and proved in Appendix A), for any intermediate marking M reached during the firing of τ , MT β ≤ MT β + (kD)T β. Hence, for any place p, M (p) ≤ (MT β + (kD)T β)/β(p). Therefore, during the firing of τ , each place will accumulate at most MT β + (kD)T β tokens. Since there are m places, total number of distinct markings possible is (MT β + (kD)T β)m. As discussed above, this is a bound on the length of τi for each i, 0 ≤ i ≤ k. Since there are k + 1 sequences τi that make up all firings of non-progressive transitions in V , we get τ (V ) ≤ (k + 1)(MT β + (kD)T β)m. This is the function f required (where k = τ (U )) and it is easy to verify that this satisfies the requirements of Lemma 4.7.	 

Limitations and discussion
Using linear algebraic techniques, we established the computational complexity of testing reachability in some fast growing Petri nets. We identified Petri nets with

S-variants and partial S-variants as subclasses in which this approach works. Struc- turally partially bounded nets are an efficiently identifiable subclass of this kind.
Compared to boundedness, structural boundedness is a much stronger restric- tion. We could try weakening property (ii) in Definition 4.9 to say that the restricted net be bounded just for the particular initial marking M0. But the essential limi-
tation of our technique is that we consider the length of firing sequences in terms of markings and progressive transitions. To see an example of the kind of difficulty this raises, we replace the net N0 in Fig. 3 by the one below.


Fig. 4. Modification of N0 of Valk and Vidal-Naquet’s example family of nets

The only modification from N0 given in Fig. 3 is the addition of “reverse” transi- tions tr and ur. Now, since t0 and u0 are not progressive transitions in the modified net, the bound function in terms of the progressive transitions xi, vi and wi of the new net, as required in Definition 4.6, is no longer primitive recursive in its arguments.
Kostin [10,11] has a more general reachability algorithm based on further anal- ysis of T-invariants (for example, see [12]). It would be interesting to analyze its complexity over subclasses larger than T-invariant-less Petri nets.

References
Borosh, I. and L. Treybig, Bounds on positive integral solutions of linear diophantine equations, Proc. Amer. Math. Soc. 55 (1976), pp. 299–304.
Cheng, A., J. Esparza and J. Palsberg, Complexity results for 1-safe nets, Theor. Comput. Sci. 147
(1995), pp. 117–136.
Desel, J., “Basic linear algebraic techniques for place/transition nets,” LNCS 1491, 1998 pp. 257–308.
Esparza, J., “Decidability and complexity of Petri net problems — An introduction,” LNCS 1491, 1998
pp. 374–428.
Esparza, J. and M. Nielsen, Decidability issues for Petri nets — a survey, J. Inform. Process. Cybernet.
30 (1994), pp. 143–160.
Hopcroft, J. and J. Pansiot, On the reachability problem for 5-dimensional vector addition systems., Theoret. Comput. Sci. 8 (1978), pp. 135–159.
Karp, R. and R. Miller, Parallel program schemata, J. Comput. Syst. Sci. 3 (1969), pp. 147–195.


Kosaraju, S., Decidability of reachability in vector addition systems, in: Proc. 14th Annual ACM STOC, 1982, pp. 267–281.
Kostin, A., Reachability analysis in T-invariant-less Petri nets, IEEE Trans. Autom. Contr. 48 (2003),
pp. 1019–1024.
Kostin, A., A reachability algorithm for general Petri nets based on transition invariants, in: R. Kralovic and P. Urzyczyn, editors, Math. Found. Comp. Sci., LNCS 4162 (2006), pp. 608–621.
Kostin, A., Using Transition Invariants for Reachability Analysis of Petri Nets, in: V. Kordic, editor,
Petri Net: Theory and Applications, I-Tech Edu. Pub., 2008 pp. 435–458.
Kru¨ckeberg, F. and M. Jaxy, “Mathematical methods for calculating invariants in Petri nets,” LNCS
266, 1987 pp. 104–131.
Lambert, J., A structure to decide reachability in Petri nets, Theoret. comp. sci. 99 (1992), pp. 79–104.
Lautenbach, K., “Linear algebraic techniques for place/transition nets,” LNCS 254, 1987 pp. 142–167.
Lipton, R., The reachability problem requires exponential space, Technical Report 62, Yale university (1975).
Mayr, E., An algorithm for the general Petri net reachability problem, in: Proc. 13th Annual ACM STOC, 1981, pp. 238–246.
Memmi, G. and G. Roucairol, “Linear algebra in net theory,” LNCS 84, 1980 pp. 213–223.
P. Janˇcar, Bouziane’s transformation of the Petri net reachability problem and incorrectness of the related algorithm, unpublished.
Praveen, M., “Complexity of the reachability problem in subclasses of Petri nets,” Master’s thesis, Homi Bhabha National Institute (2008).
Rackoff, C., The covering and boundedness problems for vector addition systems, Theoret. Comput. Sci. 6 (1978), pp. 223–231.
Reutenauer, C., “The mathematics of Petri nets,” Prentice-Hall, 1990, (Translated by I. Craig).
Silva, M., E. Teruel and J. M. Colom, “Linear algebraic and linear programming techniques for the analysis of place/transition net systems,” LNCS 1491, 1998 pp. 309–373.
Valk, R. and G. Vidal-Naquet, Petri nets and regular languages, J. Comput. Syst. Sci. 23 (1981),
pp. 299–325.

Detailed proofs

Proof of Lemma 3.7. Since N has S-variants, an integral solution exists for the system N T v ≥ 1. If I is the identity matrix, then an integral solution exists for N T v ≥ 1 iff a positive integral solution exists for the system of equations
 I | N T | −N T vs = −1.
Now we can use Theorem 3.6 on the system of equations  I | N T | −N T  vs =
−1. I | N T | −N T has full row rank due to the presence of I. The number of columns of this coefficient matrix is r = n + 2m ≥ n. The absolute value of minors
of the augmented matrix is upper bounded by R ≤ n!Dn. Hence, Theorem 3.6 is applicable and Rn + nrR2 ≤ nn!Dn + n(n + 2m)n!2D2n. Thus, we have a positive integral solution with each entry being O mn2(n!)2D2n .
It can be easily seen that a positive integral solution to I | N T | −N T vs = −1 can be converted to an integral solution for N T v ≥ 1 without affecting the bounds. So we conclude that if N has an S-variant, it has one with the absolute value of each entry being O mn2(n!)2D2n .	 

Proof of Lemma 3.9. The algorithm first needs to calculate the constant c in line 1. Clearly, this can be done in space O(log m + n log n + nd + m0 + mf ), where m0, mf and d are as in Definition 2.1.  The algorithm needs space to store the variables i and currentMarking. The maximum value in i will be O(m2n2(n!)2D2n max(M0, Mf )) and requires O(log m + n log n + nd + m0 + mf ) bits. Since D is the maximum number of tokens that can be added to a place by one transition and we consider at most O(m2n2(n!)2D2n max(M0, Mf )) transitions, the maximum value that will be stored for each place in the variable currentMarking is O(m2n2(n!)2D2n+1 max(M0, Mf )) and requires O(m log m + mn log n + mnd + m(m0 + mf )) bits.  It is easy to see that space needed for guessing transi- tions and calculating resulting markings is dominated by the space required for the variables i and currentMarking. Thus, the whole algorithm runs in space O(m log m + mn log n + mnd + m(m0 + mf )) bits.
The input to the algorithm is 2mnd + m0 + mf bits. So the space needed by the algorithm is bounded by a polynomial in the size of the input.	 

Proof of Theorem 3.11. For a quantified boolean formula G, the net NG given in
[2] is shown in Fig. A.1 and Fig. A.2, for different structures of G. The nets shown in these figures are same as the ones shown in Fig. 2 of [2], drawn here in a slightly different format to make it easier to understand our construction of the S-variant.
Recall that an expression like 2p1 + 3p2 − 4p3 is an S-variant iff its value strictly
increases whenever any transition in the net fires. We will construct the S-variant
V (i) with the required properties by induction on structure of NG.
Base. G = x for some variable x. See box A in Fig. A.1. V (i) = i · x T + i · x F
is an S-variant that satisfies all the required properties with jx(i) = i.
Step. G = ¬P . See box B in Fig. A.1. By induction hypothesis, we have a S- variant V P (i) for the net corresponding to P that satisfies all the stated properties.




























Fig. A.1. Reduction from x,¬P and P ∧ Q

The S-variant for the net corresponding to ¬P is given by

V (i) = V P (i + 1)+ i · P in + (jP (i + 1)+ 1) · not P T + (jP (i + 1)+ 1) · not P F .

Since V P (i + 1)+ i · P in is a S-variant for NP (the net corresponding to P ) and transitions inside NP do not affect the places not P T and not P F , V (i) strictly increases whenever any transition inside NP fires. When the transition call P fires, V (i) increases due to the presence of i · P in. When the transition not P is F (resp. not P is T ) fires, V i increases due to the presence of V P (i + 1) + (jP (i + 1) + 1) · not P F (resp. V P (i + 1) + (jP (i + 1) + 1) · not P T ). It is easy to see that V (i) + k · not P in is a S-variant of N¬P for 0 ≤ k ≤ i − 1. In this case, jG(i) = jP (i + 1)+ 1.
G = P ∧ Q. See box C in Fig. A.1. The S-variant for the net corresponding to
P ∧ Q is given by

V (i) = V P (i + 1)+ i · P in + V Q(jP (i + 1)+ 2)+ (jP (i + 1)+ 1) · Q in
+ (jP (i + 1)+ jQ(jP (i + 1)+ 2)+ 1) · (P and Q T + P and Q F ) .




































Fig. A.2. Reduction from ∃x.P

Since V P (i + 1) + i · P in is a S-variant for NP and transitions inside NP do not affect places in NQ or P and Q in, P and Q T or P and Q F , V (i) increases whenever any transition in NP fires. Since V Q(jP (i + 1)+ 2)+ (jP (i + 1)+ 1) · Q in is a S-variant for NQ and transitions inside NQ do not affect places in NP or P and Q in, P and Q T or P and Q F , V (i) increases whenever any transition in NQ fires. When call P fires, V (i) increases due to the presence of i · P in. When transitions P F and Q ? or P T and Q F fires, V (i) increases due to the presence of (jP (i + 1)+ jQ(jP (i + 1)+ 2)+ 1) · P and Q F . When transition P T and Q ? fires, V (i) increases due to the presence of (jP (i + 1)+ 1) · Q in. When transition P T and Q T fires, V (i) increases due to the presence of (jP (i + 1)+ jQ(jP (i + 1)+ 
2) + 1) · P and Q T . It is easy to see that V (i)+ k · P and Q in is a S-variant of
NP ∧Q for 0 ≤ k ≤ i − 1. In this case, jG(i) = jP (i + 1)+ jQ(jP (i + 1)+ 2)+ 1.
G = ∃x.P . See Fig. A.2. The S-variant for the net corresponding to ∃x.P is given by
V (i) =	V P (i + 1)+ i · P in + (2+ 2jP (i + 1)) · Ex.P T
+(1 + jP (i + 1)) · x is F + (2+ 2jP (i + 1)) · Ex.P F .

Since V P (i + 1) + i · P in is a S-variant for NP and co-efficient of x is F is 0 in V P (i + 1) (since x is not bound inside P ), V (i) increases when any transition inside NP fires (note that transitions inside NP don’t change token count of x is F ,

Ex.P T and Ex.P F ). When transition call P with x T fires, V (i) increases due to the presence of i·P in. When transition x T and P T fires, V (i) increases due to the presence of (2+2jP (i+1))·Ex.P T . When transition call P with x F fires, V (i) increases due to the presence of (1+jP (i+1))·x is F . When transition x F and P T fires, V (i) increases due to the presence of (2+2jP (i+1))·Ex.P T . When transition Ex.P is F fires, V (i) increases due to the presence of (2 + 2jP (i + 1)) · Ex.P F . It is easy to see that V (i)+ k · Ex.P in is a S-variant of NEx.P for 0 ≤ k ≤ i − 1. In this case, jG(i) = 2 + 2jP (i + 1).	 
Proof of Lemma 4.7. Suppose there is a firing sequence σ such that M0→σ Mf . Since (N, M0, Mf ) is partially bounded, there exists a firing sequence τ such that M0→τ Mf that satisfies the properties mentioned in Definition 4.6. We will first obtain a bound on τ (U ).
Suppose t is a transition in N and for some marking M , M →t M'.  Since (N, M0, Mf ) is a partially bounded net, there is a partial S-variant V such that if t ∈ U , then V (M') ≥ V (M ) + 1 and if t ∈ T \ U , then V (M') ≥ V (M ). Now,

let τ = t1t2 ... tr such that M0→t1 M1 ··· →tr Mr = M
.  For i ∈ N+ : 1 ≤ i ≤ r,

we have V (Mi) ≥ V (Mi−1) + 1 if ti ∈ U and V (Mi) ≥ V (Mi−1) if ti ∈ T \ U . Starting with i = r and iteratively substituting V (Mi−1) with its lower bound, we get V (Mf ) ≥ V (M0) + τ (U ). Therefore, τ (U ) ≤ V (Mf ) − V (M0). Due to
Lemma 4.5, we can assume w.l.o.g. that absolute value of each component of V is
O(mn2(n!)2D2n). Thus, we get
τ (U ) ≤ V (Mf ) − V (M0)
= Σ V (p)(Mf (p) − M0(p))
p∈P
≤ Σ O(mn2(n!)2D2n) max(M0, Mf ) .
p∈P
Therefore, τ (U ) ≤ O(m2n2(n!)2D2n max(M0, Mf )) .
Now, since τ (T \ U ) ≤ (p1(τ (U ), D, M0, Mf ))p2(m,n), we get
τ (T ) = O((p1(τ (U ), D, M0, Mf ))p2(m,n)).

Now, Algorithm 1 can be used here with the constant c in line 1 of the algorithm replaced with the bound given by the above equation. A space complexity analysis similar to the one done in Lemma 3.9 can be done for the modified algorithm, with the conclusion that it needs polynomial space. Again by Savitch’s theorem, we conclude that there is a deterministic PSPACE algorithm that solves the reachability problem for the subclass of Petri nets mentioned in the statement of this lemma. 
Lemma A.1 Suppose the Petri net N is structurally partially bounded with set of progressive transitions U. Let V = T \ U and NV be the Petri net N restricted to
V . Suppose y is a positive integral vector such that NV T y ≤ 0. Suppose a ﬁring sequence σ ﬁres at M0 such that σ(U ) = k. Then, for any intermediate marking M

reached during ﬁring of σ, MT y ≤ MT y + (kD)T y.
Proof. Decompose the firing sequence σ as σ = σ0u1σ1 ··· ukσk, where u1,..., uk are the progressive transitions and σ0,..., σk are made up of the non-progressive transitions. Suppose the marking M is reached just after firing uj or during firing of σj. We will prove by induction on j that MT y ≤ MT y + (jD)T y. The result
then follows since j ≤ k.
For the base case j = 0, M is reached by firing transitions in NV only. We have M = M0 + NV σ0. Therefore, MT = MT + σ0T NV T and hence MT y = MT y + σ0T NV T y. Since NV T y ≤ 0 and σ0 ≥ 0, we have MT y ≤ MT y.
0	0
σ	σj	uj+1	σ'

For the induction step, suppose M0→0 ··· →Mj
→ Mj+1
→ M .  By induction

hypothesis, MT y ≤ MT y+(jD)T y. Since D is the maximum entry in the incidence
j	0
matrix N of N , firing of uj+1 can add at most D tokens to any place. Hence,
Mj+1 ≤ Mj + D. Therefore, we have MT  y ≤ MT y + ((j + 1)D)T y. Marking
M was reached from Mj+1 by firing only transitions in NV . Therefore, we have

M = M
j+1
+ NV


'
j+1
. Therefore, MT y = MT
'	T
j+1	V
T y. Since NV
T y ≤ 0

and σ'
≥ 0, we get MT y ≤ MT
y ≤ MT y + ((j + 1)D)T y. This completes the

induction and hence the proof.	 

Analysis of a partially bounded net
Valk and Vidal-Naquet [23] have given a family of Petri nets to demonstrate that the bound of a bounded Petri net can be non-primitive recursive. We will now show that all nets in this family are partially bounded, though not structurally partially bounded. In this family, there is one net Ni for each non-negative integer i. They are defined inductively as seen in Fig. 3.
The initial marking of Ni for any i ≥ 0 is one token in bi, n tokens in ci and no tokens anywhere else. The working of this family of nets can be understood as follows. We start with N0 first. With one token in b0 and n tokens in c0, transition
v0 fires once to get a token in q0. Transition t0 can now fire n times to put 2n tokens in p0. Transition w0 can now fire once to put a token in s0. Transition u0 can now fire 2n times to put 2n tokens in c0. Transition x0 can now fire once to put a token in e0. Thus, N0 began with one token in b0 and ended with one token in e0, and in the process, number of tokens in c0 was doubled.
Working of Ni can now be understood in terms of Ni−1 as follows. Suppose fi−1(n) is an upper bound on the number of tokens ci−1 can accumulate when Ni−1 has finished with its’ token in ei−1, when it had n tokens in ci−1 at the beginning. With one token in bi and n tokens in ci, transition ti can fire n times to put n tokens each in ci−1 and di. Firing xi will now “initiate” Ni−1 and it will “finish” with at most fi−1(n) tokens in ci−1. Ni−1 can be initiated again by firing ri. This
time, Ni−1 finishes with at most f 2 (n) tokens in ci−1. Ni−1 can be initiated a
maximum of n times like this to accumulate a maximum of fn (n) tokens in ci−1.
Now, transition vi can be fired once to get a token into si. Transition ui can be fired as many times as required to shift tokens from ci−1 to ci. Finally, transition

wi can be fired once to get a token in ei. Thus, Ni began with one token in bi and n
tokens in ci and finished with at most fi(n) = fn (n) tokens in ci. It is well known
that the family of functions

f0(n)= 2n fi+1(n)= fn(n)

dominate any primitive recursive function. We will now show that any net in this family is partially bounded and that there is a PSPACE algorithm for solving reachability in any of these nets.


Proposition B.1 Suppose Ni is a net from the above family, i ≥ 1. Suppose σi is any ﬁring sequence satisfying the following properties:
σi(ti) = σi(ri) = σi(ui) = 1 and σi(xi) = σi(vi) = σi(wi) = 0.
σi(rk) = 1 for 1 ≤ k ≤ i − 1.
σi(tk) = σi(uk) = i − k +1 for 1 ≤ k ≤ i − 1.
σi(xk) = σi(vk) = σi(wk) = i − k for 1 ≤ k ≤ i − 1.
σi(t) = 0 for all other transitions t.
Then the net effect of ﬁring σi is to add i places to b0 and remove i tokens from e0.


Proof. We will prove by induction on j that firing transitions of σi in nets at level i − j to i will result in j + 1 tokens being added to bi−j−1 and j + 1 tokens being removed from ei−j−1. The result then follows by taking j = i − 1.
In what follows, we will represent the effect of firing a transition by expressions. jwi : −jsi + jei means that firing transition wi j times results in removal of j tokens from place si and addition of j tokens to place ei.
When i = 1, t1, r1 and u1 are the only transitions in σi and is not covered by the induction. In this case, effect of firing σi is given by the following expressions:

t1 : −c1 + c0 + d1 r1 : −d1 − e0 + b0 u1 : −c0 + c1
total : b0 − e0

We will now begin with base case of the induction, j = 1. We want to prove that effect of firing transitions of σi that are at level i − 1 and i result in 2bi−2 − 2ei−2. This can be readily seen by observing that following expressions give the effect of each transition.

ti : −ci + ci−1 + di
ri : −di − ei−1 + bi−1 ui : −ci−1 + ci
ri−1 : −di−1 − ei−2 + bi−2 2ti−1 : −2ci−1 + 2ci−2 + 2di−1 2ui−1 : −2ci−2 + 2ci−1
xi−1 : −bi−1 − di−1 + bi−2 vi−1 : −ei−2 + si−1
wi−1 : −si−1 + ei−1
total : 2bi−2 − 2ei−2
For the induction step, assume that firing transitions in σi that are at levels i− j through i results in (j + 1)bi−j−1 − (j + 1)ei−j−1. We want to prove that firing transitions in σi that are at levels i − j − 1 through i results in (j + 2)bi−j−2 − (j + 2)ei−j−2. This can again be verified by the following expressions.
level i − j and higher : (j + 1)bi−j−1 − (j + 1)ei−j−1
ri−j−1 : −di−j−1 − ei−j−2 + bi−j−2
(j + 2)ti−j−1 : −(j + 2)ci−j−1 + (j + 2)ci−j−2 + (j + 2)di−j−1
(j + 2)ui−j−1 : −(j + 2)ci−j−2 + (j + 2)ci−j−1
(j + 1)xi−j−1 : −(j + 1)bi−j−1 − (j + 1)di−j−1 + (j + 1)bi−j−2
(j + 1)vi−j−1 : −(j + 1)ei−j−2 + (j + 1)si−j−1
(j + 1)wi−j−1 : −(j + 1)si−j−1 + (j + 1)ei−j−1
total : (j + 2)bi−j−2 − (j + 2)ei−j−2
 
Proposition B.2 In the net Ni, except xi, vi, wi, t0 and u0, all other transitions non-progressive transitions.
Proof. It is sufficient to prove that all other transitions are part of some semi- positive T-invariant. For this, it is sufficient to take σi defined in proposition B.1 and add iv0, iw0 and ix0 transitions to it. The resulting firing sequence τi when fired, doesn’t change the number of tokens in any place. Hence, τi is a semi-positive T-invariant whose support contains all transitions except xi, vi, wi, t0 and u0. 
Proposition B.3 For Ni, there exists a partial S-variant whose support consists of all the progressive transitions.
Proof. The only progressive transitions are t0, u0, xi, vi and wi. A partial S-variant is V = 2p0 + (Σ1≤j≤i3ci) − bi + si + 2ei. Table B.1 verifies this.	 
To establish that Ni is partially bounded, we need to prove that number of firings of non-progressive transitions is bounded by a function of number of firings of pro- gressive transitions and input size. In what follows, the set of places {p0, c0,..., ci} plays an important role. For convenience of notation, let Ci = {p0, c0,..., ci} and


Table B.1
Effect of transitions on V

t(Ci) be the total number of tokens in all the places in Ci. For a marking M , let
M (Ci) = Σp∈Ci M (p).
Proposition B.4 Suppose Ni has some initial marking Mi such that:
Mi(bi) = 1.
Mi(bj) = Mi(sj) = Mi(ej) = 0, 0 ≤ j ≤ i − 1.
Mi(q0) = 0.
Mi(si) = Mi(ei) = 0.
Suppose Mi→σ M and σ(t0) = k. Then we have M (Ci) ≤ Mi(Ci)+ k.
Proof. Among all transitions of Ni, t0 is the only one that can increase t(Ci). We will now prove the result by induction on k.
For the base case k = 0, the result is a direct conclusion of the above ob- servation. For the induction step, suppose σ(t0) = k + 1. Let us split σ as follows: Mi→σ0 M1→t0 M2→σ1 M where σ1(t0) = 0. By induction hypothesis, we get M1(Ci) ≤ Mi(Ci)+ k. By inspecting the action of firing t0, we can conclude that M2(Ci) ≤ M1(Ci)+1. Again by the observation made at the beginning of this proof, we can conclude that M (Ci) ≤ M2(Ci). Therefore, we have M (Ci) ≤ Mi(Ci)+k +1.

This completes the induction step and hence the proof.	 
Proposition B.5 Suppose the net Ni (for some i ≥ 1) has the initial marking with nl tokens in ci, 1 token in bi and 0 tokens in all other places. In this initial marking, suppose a ﬁring sequence σ is ﬁred. If σ(t0) = k, then, for every 0 ≤ j ≤ i − 1, σ(ti−j) ≤ (nl + k)j+1.
Proof. By induction on j. For the base case j = 0, we need to show that σ(ti) ≤ nl + k. This is true since in the given initial marking, ti can fire at most nl times. By induction hypothesis, assume that σ(ti−j) ≤ (nl + k)j+1. For the induction
step, we need to show that σ(ti−j−1) ≤ (nl + k)j+2. Note that for ti−j−1 to fire,
there must be a token in bi−j−1. Once there is a token in bi−j−1, ti−j−1 can fire as many times as there are tokens in ci−j−1. Once all tokens in ci−j−1 are exhausted, ti−j−1 can fire again only when more tokens are added to ci−j−1. For adding more tokens to ci−j−1, the token in bi−j−1 has to be removed. Therefore, for ti−j−1 to fire once more after exhausting all tokens in ci−j−1, a token needs to be added to bi−j−1. Let us call the period between adding a token to bi−j−1 and adding one token to bi−j−1 next time as one round. In one round, ti−j−1 can fire at most as many times as there are tokens in ci−j−1 at the beginning of the round (to add more tokens to ci−j−1, the token in bi−j−1 has to be removed and this takes us to the next round). By proposition B.4, ci−j−1 has at most nl + k tokens at any time. Thus, σ(ti−j−1) is bounded by nl + k times number of times a token can be added to bi−j−1.
Now, the only transitions that can add tokens to bi−j−1 are xi−j and ri−j. For every firing of xi−j or ri−j, a token is removed from di−j. Therefore, total number of times a token can be added to bi−j−1 is upper bounded by total number of tokens that can be added to di−j. The only transition that can add tokens to di−j is ti−j. By induction hypothesis, σ(ti−j) ≤ (nl + k)j+1. Therefore, σ(ti−j−1) ≤ (nl + k)(nl + k)j+1 = (nl + k)j+2. This completes the induction and the proof. 
Proposition B.6 Suppose the net Ni, i ≥ 1 has the initial marking with nl tokens in ci, 1 token in bi and 0 tokens in all other places. In this initial marking, suppose a ﬁring sequence σ is ﬁred such that σ(t0) = k. Then the following are true.
σ(xi−j) ≤ (nl + k)j, 0 ≤ j ≤ i − 1.
σ(ri−j) ≤ (nl + k)j+1, 0 ≤ j ≤ i − 1.
σ(vi−j) ≤ (nl + k)j, 0 ≤ j ≤ i − 1.
σ(wi−j) ≤ (nl + k)j, 0 ≤ j ≤ i − 1.
σ(ui−j) ≤ (nl + k)j+1, 0 ≤ j ≤ i − 1.
σ(v0), σ(w0), σ(x0) ≤ (nl + k)i.
Proof. (i) Every firing of xi−j needs one token to be added to bi−j. If j = 0, then xi−j can fire only once. Otherwise, only transitions that can add tokens to bi−j is xi−j+1 and ri−j+1. Every firing of xi−j+1 or ri−j+1 needs one token to be added to di−j+1. The only transition that can add tokens to di−j+1 is ti−j+1. By proposition B.5, ti−j+1 can fire at most (nl + k)j times. Therefore, xi−j can fire at most (nl + k)j times.

Every firing of ri−j needs one token to be added to di−j. The only transition that can add tokens to di−j is ti−j. Since by proposition B.5, ti−j can fire at most (nl + k)j+1 times, ri−j can fire at most (nl + k)j+1 times.
Between any two firings of xi−j, vi−j can fire at most once. Since xi−j can fire at most (nl + k)j times, vi−j can also fire at most (nl + k)j times.
Between any two firings of vi−j, wi−j can fire at most once. Since vi−j can fire at most (nl + k)j times, wi−j can also fire at most (nl + k)j times.
Firing ui−j needs a token to be present in si−j. Once a token is added to si−j, ui−j can fire as many times as there are tokens in ci−j−1. By proposition B.4, ci−j−1 will have at most (nl + k) tokens. Therefore, number of times ui−j can be fired is bounded by (nl + k) times the number of times a token can be added to si−j. vi−j is the only transition that can add tokens to si−j and it can fire at most (nl + k)j times. Therefore, ui−j can fire at most (nl + k)j+1 times.
Every firing of v0, w0 or x0 needs one token to be added to b0. Only transitions that can add tokens to b0 are x1 and r1. Every firing of x1 or r1 needs one token to be added to d1. t1 is the only transition that can add tokens to d1 and t1 can fire at most (nl + k)i times by proposition B.5. Hence, v0, w0 and x0 can fire at most (nl + k)i times.	 
In terms of Definition 4.6, U = {t0, u0, xi, vi, wi}. The above proof gives a bound function that meets the requirements of Lemma 4.7. This leads to a polynomial space algorithm for reachability problem in any net Ni.
