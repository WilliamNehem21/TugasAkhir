

Electronic Notes in Theoretical Computer Science 249 (2009) 471–490
www.elsevier.com/locate/entcs

Two Cotensors in One: Presentations of Algebraic Theories for
Local State and Fresh Names
Sam Staton
Computer Laboratory University of Cambridge

Abstract
Various situations in computer science call for categories that support both cartesian closed and monoidal closed structure. Such situations include (i) models of local state, where the monoidal product describes disjointness of memory, and (ii) treatment of fresh names, as required in models of the π-calculus.
I propose a technique to embed the two closed structures into one single structure. To demonstrate the technique, I show how previously studied theories of local state and fresh names can be understood formally as presentations of (enriched) algebraic theories.
Keywords: cartesian closed category, monoidal closed category, enriched algebraic theories

Introduction
When giving a semantics for a language with local state, or for the π-calculus, it is appropriate to work in a category that supports two kinds of function space:

[A → X]	given a location/channel, return an element of X
[A  X]	given a new location/channel, return an element of X

(Here A is a distinguished object of locations/channels.) Just as the function space [A → X] is right adjoint to the cartesian product, the restricted function space [A  X] is right adjoint to a monoidal product (−) ⊗ A.
This use of two closed structures is a nuisance when it comes to using general techniques from category theory, which typically consider only a single closed struc- ture. In this paper, we take our illustrations from algebraic theories for local state and the π-calculus; there is a rich body of work on algebraic theories for monoidal closed categories (e.g. [14,22,26]).

1571-0661 © 2009 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2009.07.103

A crucial contribution of this paper is the observation that both kinds of function space can be described by a single ‘cotensor’ structure, −•:
[A → X] = [i(A) −• X]	[A  X] = [iS(A) −• X]

as will be explained.

Cartesian and monoidal structures in models of the π-calculus and local state
Recall that the π-calculus [16] is a language that allows communication of channel names along the channels themselves. In the semantics of the π-calculus (e.g. [7,28]) the two closed structures both play crucial roles. The cartesian structure is used for an operator input : A × [A → X] → X, giving semantics to the input behaviour of the π-calculus; informally, input creates a semantic representation out of a pair (a, f ) where a is the name of the channel to input from, and f : A → X is thought of as a function specifying how to resume when a channel name is received. The π-calculus also has a restriction operator, the semantics of which is determined by a morphism new : [A  X] → X making a denotation out of an element requiring a fresh name.
In giving the semantics of a programming language with local state (e.g. [18]), both closed structures are used again.  The cartesian closed structure is used for an operator lookup : A × [V → X] → X, giving semantics to com- mands such as let v := !a in M .  The monoidal closed structure is used for an operator block : V × [A  X] → X, giving semantics to commands such as block a := v in M , that introduce local state. (Here V is a set of values.)

Algebraic operations and generic effects
In a sequence of papers (e.g. [20]), Plotkin, Power and collaborators have outlined a program to understand Moggi’s monadic semantics from a more axiomatic perspec- tive: the monads can be presented in terms of operators and equations. A simple example is the algebraic theory of semilattices, which gives rise to the finite pow- erset monad Pf, a simple monad for non-determinism. The operators of the theory

give ‘effects’, 1 −d−ea−d−lo−c→k
Pf(∅) and 1 −c−h−oi−c→e
Pf(2).

In the literature, strong monads arise on a presheaf category I, for modelling local state and the π-calculus. As Plotkin and Power [21] and Stark [29] have observed, the algebras for these monads can be described in terms of operators
— such as new and lookup above — subject to equations expressed as commuting
diagrams. For instance, an algebra for the π-calculus must satisfy the following axiom:


X [t  X] [A   X]
¸¸
which corresponds to the axiom

¸¸¸
new
νa. P = P if a /∈ fv(P )

= ¸¸¸zJ 
X
(from [16]).

A problem with these developments is that, although the theories appear infor- mally as a presentation by operators and equations, they are not presentations in the formal sense proposed by Kelly and Power [14], because the two closed struc- tures are used. Thus, the general results do not apply; for instance, the monadicity results are proved by hand.
A contribution of this paper is a demonstration of how the theories of local state and the π-calculus from [21,29] can be understood as presentations of enriched algebraic theories, in the sense of [14]. We also investigate how a theory for open bisimulation [27] can be understood in this way.

Two cotensors in one
To begin to understand the title of this paper, recall that, just as a monoidal closed category (C, ⊗, ) involves a functor : Cop ×C → C, a cotensor of a category C enriched in V gives rise to a functor −• : Vop ×C → C.
(For a simple example, note that the category of monoids, Mon, has coten- sors −• : Setop × Mon → Mon, with [S −• M ] the S-fold product of a monoid M .)
The essence of my construction involves a category A, in which the presheaf category I embeds in two different ways, iS,i : I ‹→ A. The category I can be enriched over A, and it has cotensors −• : Aop ×I → I. The two original closed structures ( , →) on I can be understood in terms of one cotensor wrt A, in the sense that
[X → Y ] = [i(X) −• Y ]	and	[X  Y ] = [iS(X) −• Y ]	.

The ‘two cotensors in one’ construction can be understood in some generality, which I axiomatize in terms of ‘compatibility structures’.

Synopsis
The paper is structured as follows. The construction surveyed in Section 1.3 above is introduced in Section 2. Some rudiments of enriched algebraic theories are recalled in Section 3, and illustrated in Section 4 with theories of the π-calculus and of local state. In Section 5, we consider ‘two cotensors in one’ in a more general setting, and as an example, we investigate the theory of open bisimilarity in the π-calculus.
Relevance and related work
In this paper, we show that informal, ad-hoc presentations of theories of local state [21] and the π-calculus [29] can be considered as presentations of enriched algebraic theories, in the sense of [14]. In the process, we introduce a new way of understanding the two closed structures of I. This complements the well-established techniques of bunched implications [18,25] and nominal sets [9].
A next step is to better understand the kinds of reasoning permitted in models of Lawvere A-theories. As a first step, Power [24,23] provides an analysis of algebraic theories with a block operator — a generalization of the theory of local state in [21].

Fiore and Hur [6] propose a technique for synthesizing an equational logic from an enriched Lawvere theory. It will be interesting to evaluate this technique for the theories in Section 4.
Nominal equational logic (NEL) [2] and nominal algebra [8] are reasoning sys- tems for theories involving freshness and binding. Unfortunately the theories con- sidered here, for the π-calculus and local state, do not seem to be ‘nominal theories’, although, conversely, it seems that every NEL theory can be understood as an Law- vere A-theory (in the sense of Sec. 3.4). (Clouston [1] recently introduced a bespoke notion of ‘nominal Lawvere theory’ for NEL.)
The idea of having two types of atoms to encode two function spaces seems to be implicit in the proof theoretic work of Ziegler, Miller and Palamidessi [32]. I hope that the constructions in this paper will help to explain that work from a more model theoretic perspective.

Two cotensors, in one
In this section we consider monoidal closed structures on two presheaf categories: I (in Sec. 2.2) and A (Sec. 2.3). There are two embeddings I ‹→A (Sec. 2.4) and these relate the two closed structures of I with a single closed structure in A (in Secs. 2.4–2.6). There is a summary of notation in Section 2.7.

Preliminaries: promonoidal categories
To begin, recall the observation of Day [3,4], that monoidal biclosed structures on (covariant) presheaf categories (SetC) correspond to ‘promonoidal structures’ on small categories (C). (Day treats the general case of enriched functor categories, but we will not need that here.)
A promonoidal structure on a small category C is given by the following data:
two functors, J : C → Set and P : Cop × Cop × C → Set;
three natural isomorphisms (subject to coherence conditions):
Identity: ∫ X J (X) × P (X, A, B) ∼= C(A, B) ∼= ∫ X J (X) × P (A, X, B);
Associativity : ∫ X P (A, B, X) × P (X, C, D)  ∼=  ∫ Y P (B, C, Y ) × P (A, Y, D).
A promonoidal structure on C induces the following monoidal biclosed structure on SetC (notation: SetC(F, [G, H]l) ∼= SetC(F ⊗ G, H) ∼= SetC(G, [F, H]r)):
The unit is J ; for presheaves F and G in SetC,
(F ⊗ G)(A) = ∫ B,C F (B) × G(C) × P (B, C, A)	;
[F, G]l(A) = SetC(yC(A) ⊗ F, G)	[F, G]r(A) = SetC(F ⊗ yC(A), G)
writing yC(A) for the representable presheaf C(A, −): C → Set.
Example 2.1 Cartesian closed structure. For any small category C, the carte- sian closed structure on SetC arises from the following promonoidal structure:
for A in C, let J (A) = 1, the one-element set;

for A, B, C in C, let P (A, B, C) = {(f, g) | f : A → C, g : B → C}.
For presheaves F and G in SetC, the cartesian closed structure can be understood as follows: (F ×G)(A) = F (A) ×G(A), and [F → G](A) = SetC(yC(A) ×F, G).

A monoidal closed structure on presheaves over ﬁnite sets and injections
Throughout this paper we fix an infinite set of ‘atoms’. Atoms can be thought of as locations in memory, or as names of communication channels in the π-calculus.
Let I be the category whose objects are finite sets of atoms, and whose morphisms are injections. In what follows, we write I for the category of presheaves SetI. Let A be the presheaf in I given by A(A) = A.
To get an intuition, following [21], consider a presheaf F in I where F (A) is a set of programs that only use the memory locations in A. For any injection, f : A > B, the action F (f ) : F (A) → F (B) renames the memory locations that the programs use. Alternatively, following [29], consider the case where F (A) is a set of π-calculus processes that only use the channels in A.
As well as the cartesian structure of Example 2.1, we also have the following additional promonoidal structure on I.
For A in I, let J (A) = 1, the one-element set; for A, B, C in I, let

P (A, B, C) = {(f, g) | f : A > C, g : B > C and im(f ) ∩ im(g) = ∅}	.

The identity and associativity isomorphisms are fairly straightforward (see Sec. 5.1). Let (⊗,  ) be the induced symmetric monoidal closed structure on I, and let (×, →) be the cartesian closed structure. To understand the monoidal product, notice that
(F ⊗ A)(A) ∼= {(x, a) | a ∈ A, x ∈ F (A \ {a})}. As for the closed structures, notice
for any atom z /∈ A, we have two bijections (see e.g. [7,28]):

[A  F ](A) ∼= F (A .
z})	[A → F ](A) ∼= (F (A))A × F (A .

z})	. (1)


For instance, a model for local state includes a presheaf F in I and a map block : V × [A  F ] → F (for some set V of values, regarded as a constant presheaf). This can be thought of as follows: for every finite set A of locations, and every new location z /∈ A, there is a map block A : V × F (A ∪ {z}) → F (A) taking a value and a program involving locations (A ∪ {z}), and returning a program with locations A,
i.e. with the location z made local.
For an illustration of the cartesian structure, a semantics for the π-calculus involves a presheaf F in I and a map inp : A × [A → F ] → F . For every finite set A of channel names, and every new name z /∈ A, there is a function
inp : A × (F (A))A × F (A .	z}) → F (A)
∪{ 

which constructs an input behaviour from a tuple (a, (xb)b∈A, x'): the tuple (xb) is a description of what to do with known names (from A); and x' describes what to do with the new name z.

One promonoidal structure for the arrow category
With the aim of understanding the two closed structures of f in one closed struc- ture, we now consider the following category, I⭢: objects are pairs of finite sets of atoms, (A, SA), with SA ⊆ A; a morphism (A, SA) → (B, SB) in I⭢ is an injec-
tion f : A > B for which f (SA) ⊆ SB. In what follows, we write A for the presheaf
category SetI→. A promonoidal structure for I⭢ is given as follows:
for (A, SA) in I⭢, let J (A, SA) = 1; for (A, SA), (B, SB), (C, SC) in I⭢, let
P ((A, SA), (B, SB), (C, SC))
= {(f, g) | f : (A, SA) → (C, SC), g : (B, SB) → (C, SC) and f (A) ∩ g(SB) = ∅}.
The functorial action and identity and associativity isomorphisms are defined fairly straightforwardly.
We write ( , [—, =]l, [—, =]r) for the resulting monoidal biclosed structure on A.
We investigate this structure in the remainder of this section. First, notice that the promonoidal structure is not symmetric. For instance, there is one element in the set P ((1, 1), (1, ∅), (1, 1)) but the set P ((1, ∅), (1, 1), (1, 1)) is empty.
Embedding f in A
There are two embeddings i, iS : f → A, given on objects by
(i(F ))(A, SA) = F (A)	(iS(F ))(A, SA) = F (SA)
(for F in f). The functors i and iS are injective on objects and full and faithful. We also consider a projection functor δ : A → f given on objects by δ(X)(A) = X(A, A). It is a retraction of both iS and i, and indeed the three functors are adjoint:
··· E iS E δ E i E · · ·
(One can understand these adjunctions as arising, as essential geometric morphisms, from adjunctions between I and I⭢ — as indicated, there are also further adjoints to the left and right.)
The embeddings i and iS preserve some of the structure of f:
Theorem 2.2 Let F, G be presheaves in f, and let X be a presheaf in A.
i(F × G) ~= i(F )  i(G)	(3a)	F ⊗ G ~= δ(i(F )  iS(G))	(3b)
The presheaf [X, i(F )]l is always in the image of i : f → A, and moreover the closed structures are connected as follows:
i[F → G] ~= [i(F ), i(G)]l	(3c)	i[F  G] ~= [iS(F ), i(G)]l	(3d)
Proof notes. Isomorphisms (3a) and (3b) are straightforward to calculate, as is δ(yI→ (A, SA)  X) ~= δ(i(yI(A))  X). The remaining facts, (3c) and (3d), follow from these isomorphisms.	 

By way of illustration, notice that the monomorphism m : iS(A) > i(A) gives rise to the natural surjection [A → F ] → [A  F ] (c.f. (1)):


i[A → F ]
(3c)
~=  [i(A), i(F )]l
[m,i(F )]l
—————→ iS A , i F l
(3d)
~=  i[A   F ]	.	(3)


Tensors and cotensors
In light of Theorem 2.2, we can develop new theories for local state and the π-calculus, using only the monoidal closed structure of A.  The carriers of the models will now be presheaves X in A, and we have structures such as block : [i(A),X]l i(V) → X or input : [i(A),X]l i(A) → X. It is unpleasant, how- ever, to consider models with carriers in A rather than in f, as there is little com- putational motivation for the extra structure of A.
This quandary can be partly resolved as follows. Following Theorem 2.2, we consider the action of A on f as a functor —• : Aop ×f → f given by [X —• F ] = δ[X, i(F )]l; this turns out to be a cotensor (see Sec. 2.6). There is a related tensor structure, • : f×A→ f, given by F • X = δ(i(F ) X), and the two constructions are adjoint:
f(F • X, G) ~= f(F, [X —• G])	in Set,	natural in F, G, X.

The properties of the tensor and cotensor are summarized in the following corollary of Theorem 2.2:
Corollary 2.3 Let F and G be presheaves in f. Then:
F • i(G) ~= F × G	[i(F ) —• G] ~= [F → G]
F • iS(G) ~= F ⊗ G	[iS(F ) —• G] ~= [F  G]

For example, the block structure for local state can now be described as a mor- phism block : [iS(A) —• F ] • i(V) → F in f, while the input structure for the π-calculus can be described as a morphism input : [i(A) —• F ] • i(A) → F in f.
The morphism in (3) can be understood from this perspective: m : iS(A) > i(A) gives rise to [i(A) —• F ] → [iS(A) —• F ]. Moreover, thinking about tensors, m gives rise to an natural injection A ⊗ A > A × A.

Universal properties of tensors and cotensors
The constructions introduced in the previous subsection (•, —•) can be understood from a universal perspective, through enriched category theory. The categories A and f can both be considered as categories enriched in A (i.e., where the hom-sets are actually objects of A). We write A and f for the corresponding A-enriched categories; the enrichments are given by
A(X, Y ) = [X, Y ]r	f(F, G) = [i(F ), i(G)]r

The universal properties of the tensor • and cotensor —• can be stated as the following natural isomorphisms, natural in G and F respectively:
f(F • X, G) ~= [X, f(F, G)]r	f(F, [X —• G]) ~= [X, f(F, G)]l	(in A).
The category A also has cotensors, given by the left closed structure, and indeed the embedding i : f → A extends to a cotensor-preserving A-functor, f → A.
(The only justification we have for enriching f in A is that it gives the desired tensor/cotensor structure.)

Summary of notation
Cartesian closed structure of f = SetI:	(1, ×, →)
Monoidal closed structure of f:	(1, ⊗,  )
Monoidal biclosed structure of A = SetI→ :	(1, , [—, =] , [—, =] )
Tensor/cotensor of f (enriched in A):	(•, —•) (Notice that all the monoidal structures have terminal units.)
Enriched algebraic theories and their presentations
We survey some rudiments of algebraic theories and Lawvere theories in the en- riched setting. The reader will find more detail and discussion, and more generality, in [14,22,26]; a reference for enriched categories is [12]. In Section 3.4, we consider the relevance of the theory to the categories f and A, considered above.

Preliminaries on enriched categories
To recall the general definitions, we fix a cocomplete monoidal biclosed cate- gory (V,I, ⊗, [—, =]l, [—, =]r). This can be considered as a V-category, V, with V(X, Y ) = [X, Y ]r. We assume that V is locally finitely presentable as a closed cat- egory, i.e.: every object is a filtered colimit of finitely presentables; the unit I of V is finitely presentable; and the monoidal product of finitely presentables is again finitely presentable. We write |Vf | for a set representing the isomorphism classes of finitely presentables of V.
Consider another V-category, C, with underlying category C. It is said to have tensors if, for all X in V and C in C, there is an object (C • X) in C together
with an isomorphism [X, C(C, D)]r ~= C(C • X, D) natural in D. It is said to have
finite cotensors if, for every finitely presentable n in V, and D in C, there is an object [n —• D] in C together with an isomorphism [n, C(C, D)]l ~= C(C, [n —• D]) natural in C.
A V-category C with tensors and finite cotensors is said to be locally ﬁnitely presentable as a V-category if C is locally finitely presentable and the induced func- tors ((—) • X), [n —• (—)]: C → C preserve filtered colimits for every X and every

finitely presentable n in V.
Note that V has tensors given by monoidal product, and cotensors given by the left closed structure, and that it is locally finitely presentable as a V-category [13].
Presentations of algebraic theories
A V-signature is a family (Σn ∈ V)n∈|Vf | of objects of V. In other words, a V-sig- nature is a functor |Vf | → V. For each finitely presentable n in V, the object Σn
should be thought of as ‘the object of operators of arity n’.
Let C be a V-category with tensors and finite cotensors, and write C for the underlying ordinary category. A model of a V-signature Σ in C is given by an object X of C, together with morphisms [n —• X] • Σn → X in C for each n in |Vf |. A morphism between Σ-models is a morphism in C that preserves the interpretations appropriately. We thus have a category Mod(Σ, C) of Σ-models.
If C is locally finitely presentable as a V-category, the forgetful functor Mod(Σ, C) → C is monadic. In particular, Mod(Σ, V) → V is monadic. We write TΣ for the resulting monad on V. The monad TΣ can be thought of as a signature: (TΣ)n = TΣ(n). Indeed, a model for Σ is also a model for the derived
signature ((TΣ)n)n∈|Vf |.
A system of equations for a V-signature Σ is a V-signature (Eq n)n together with morphisms λn, ρn : Eq n → (TΣ)n for each finitely presentable n.  The object Eq n
should be thought of as ‘the object of n-ary equations’, and λn and ρn assign to each equation the terms on either side, with variables from n.
A model of such an equational system (Σ, Eq, λ, ρ) is a model X of the signa-
ture Σ for which the following diagram commutes for every finitely presentable n.

[n —• X] • Eq	[n−•X]•ρn  [n —• X] • (T )
[n−•X]•λn
J	J 
[n —• X] • (TΣ)n 	 X 

Proposition 3.1 (c.f. [14,26]) Let (Σ, Eq ) be a V-equational system.
Let C be a locally ﬁnitely presentable V-category with tensors and ﬁnite coten- sors. The forgetful functor Mod((Σ, Eq ), C) →C is monadic.
The forgetful V-functor Mod((Σ, Eq ), V) → V  is V-monadic.
We write TC	for the monad referred to in Proposition 3.1.
Example 3.2 Semilattices. For a simple example, let V be the category of sets, with the cartesian closed structure. Finitely presentable sets are precisely the finite sets, and we let |Vf | be the set of natural numbers. Define Σ as follows: Σ0 = {0}; Σ2 = {+}; and for n /∈ {0, 2}, let Σn = ∅. For any set X, the set TΣ(X) contains the terms built from 0 and +, with variables in X. Informally, the equations are:
(z): 0 + x = x	(i) : x + x = x	(s): x + y = y + x	(a): x + (y + z) = (x + y)+ z.

Formally, we define Eq as follows: Eq 1 = {(z), (i)}; Eq 2 = {(s)}; Eq 3 = {(a)}; and for n /∈ {1, 2, 3}, let Eq n = ∅. The morphisms λ, ρ associate each equation with its left and right hand side, respectively. A model of the theory (Σ, Eq ) is a semilattice, and the resulting monad on the category of sets is the finite powerset monad (c.f. Sec. 1.2).


Enriched Lawvere theories
In the following, we write Vop

for the V-category whose objects are finitely pre-

sentable objects of V
tf
Vop(
) = [	] . This V-category has finite

, enriched as	tf m, n	n, m l
cotensors, given by [m —• n] = m ⊗ n.
Definition 3.3 ([22]) A Lawvere V-theory is a small V-category T with ﬁnite cotensors, together with an identity on objects, strictly ﬁnite cotensor preserving V-functor Vop → T.
Let C be a V-category with ﬁnite cotensors. A model in C of a Lawvere V-the- ory T is a ﬁnite cotensor preserving V-functor T → C. We write FC(T, C) for the (ordinary) category of ﬁnite cotensor preserving V-functors T → C, and V-natural transformations between them.
(N.B. What we are calling a Lawvere V-theory would be called a Vt-theory in [22].) Every V-equational system (Σ, Eq ) induces an Lawvere V-theory T(Σ,Eq ) with T(Σ,Eq )(n, m) = V(m, T(Σ,Eq )(n)). Composition is as in the Kleisli category. Notice that an equation Eq n ⇒ (TΣ)n, with Eq n = m finitely presentable, is the same
thing as a pair of morphisms n ⇒ m in the Lawvere V-theory TΣ.
 
There is an equivalence of categories, FC(T(Σ,Eq ), C) —→ Mod((Σ, Eq ), C), taking
a finite cotensor preserving V-functor M : T(Σ,Eq ) → C to a model with carrier M (I).

The special case of f and A
We now return to the setting where f = SetI and A = SetI→ . In Section 2.6, we considered f as an A-category, with all tensors and cotensors.
Consider the finitely presentables of A. Notice that the terminal unit 1 is finitely presentable, and that so are (X Y ) and (X×Y ) if X and Y are finitely presentable. Note also that i and iS : f → A preserve finitely presentables, and that the finitely presentables in f are closed under finite products and include all representable presheaves, notably A. The category A is locally finitely presentable as a closed category, and f is locally finitely presentable as an A-category.
One class of A-equational systems has particularly helpful properties.
Proposition 3.4 Let (Σ, Eq, λ, ρ) be an A-equational system such that, for every n, the presheaves Σn and Eq n are in the image of i : f → A. Then

The monad TI
on f is a restriction of TA
on A, along i : f → A.

The monad TI	on f is strong with respect to both the cartesian and the
monoidal structure of f.














Fig. 1. A theory of late bisimulation in the π-calculus, taken from [29].

Proof notes. Item (i) can be established by following the transfinite constructions for the two monads (see e.g. [5]), noting that i preserves colimits, cotensors, and
tensors of the form ((—) • i(F )). For item (ii), recall that the monad TA	on A
is strong (Prop. 3.1(ii)), and deduce that the monad TI	on f is strong with
respect to the tensor •; the result follows.	 

Proposition 3.4 is important because to use Moggi’s monadic metalanguage [17], it is necessary for the monad to have a cartesian strength.	Notice that the

A
(Σ,Eq )
on A will not, in general, be strong with respect to the cartesian

structure of A, even if the restriction TI	on f has cartesian strength: this is a
reason to consider the restricted monad TI	.
(Σ,Eq )
Examples: presenting the π-calculus and local state
We now discuss how theories of the π-calculus and of local state can be understood as A-equational systems.

A theory of late bisimulation in the π-calculus
Stark [29] has translated the axioms for late bisimulation in the π-calcu- lus [16, Sec. 5] to (what might be called) a presentation of a theory in f, reproduced in Figure 1. Stark shows that the resulting category of models is monadic over f, and that the resulting monad is the one used in the semantics of Fiore et al. [7].
The equations in Figure 1 are notated informally, but can be made precise as follows. Consider the axiom labelled (H): new (⟨out (a, b, xa)⟩a) = nil . In π-cal- culus notation, it is written νa. a¯b. x = 0. Formally, it amounts to the following

commuting diagram:

A × F 	 [A   (A × A × F )]   [A  out]  [A   F ]
new


(4)

J	J 
1	nil	 F 

where  the  unlabelled  horizontal  arrow  is  the  transpose  of  the  morphism
A ⊗ (A × F ) → A × A × F .
The presentation in Figure 1 is not an f-equational system, in the sense of Section 3.2, because it involves both closed structures of f. It can, however, be understood as an A-equational system. We have seen in Section 2.5 how the opera- tors of the theory can be understood using the tensor and cotensor. The equations can also be understood in this way. To demonstrate this, in diagram (a) below, I have transposed diagram (4) across the adjunction (A × —) E [A → —], making use of the transposed operator out : F → [A × A → F ].

F  out  [A → [A → F ]]	 [A → [A  F ]]	1  out  i( A)  i(A)	 i( A)  i (A)
S

J 
1	nil
(a)
 F 
[A→new ]
 [A J 

J 
0	nil
(b)
 1 
i(A)٨new
 i( J 

The Lawvere A-theory corresponding to Figure 1 has morphisms including nil : 0 → 1, out : 0 → i(A) × i(A), new : iS(A) → 1. Axiom (H) corresponds to dia- gram (b) above, in the Lawvere A-theory.
By Proposition 3.1, the category of π-algebras is monadic over f. By Proposi- tion 3.4, the resulting monad on f is strong with respect to both the monoidal and the cartesian structure.
A theory of local state
Plotkin and Power [21] have provided a theory of local state as an informal pre- sentation of a theory in f, reproduced in Figure 2. As they show, the resulting category of models is monadic over f.
Remark 4.1 The theory in Figure 2 is parametric in a presheaf V of values. In [21], a countable set V of values is fixed, and V = KV , where KV is the presheaf given by KV (A) = V . (Here, we must restrict attention to the case where V is finite, so that the arity of lk will be finitary; alternatively, we could revisit Sec. 3 with reference to locally countably presentable categories.) It seems reasonable to also consider the case V = A + KV , where the values include the locations, and hence we have a primitive theory of heaps and pointers.
As with the theory of the π-calculus, the notation in Figure 2 is only informal, but is made precise as follows.  Consider the axiom labelled (‡): bk (v, ⟨lk (a, (xa,v)v)⟩a)  =  bk (v, ⟨xa,v⟩a). This corresponds to the program assertion
 block new a := v; let x be !a in M  =  block new a := v; M [v/x] .


An algebra for local state is a presheaf F in F together with three operations:


satisfying the following equations:


lk (a, (up(a, v, x))v ) = x	(†)
lk (a, (lk (a, (xv,w )v ))w ) = lk (a, (xv,v )v )
up(a, v, up(a, w, x)) = up(a, w, x)
up(a, v, lk (a, (xv )v )) = up(a, v, xv )
lk (a, (lk (b, (xv,w )v ))w ) = lk (b, (lk (a, (xv,w )w ))v )
up(a, v, up(b, w, x)) = up(b, w, up(a, v, x))
up(a, v, lk (b, (xw )w )) = lk (b, (up(a, v, xw ))w )
bk (v, ⟨up(a, w, xa)⟩a) = bk (w, ⟨xa⟩a)
bk (v, ⟨lk (a, (xa,v )v )⟩a) = bk (v, (xa,v )a)	(‡)
bk (v, ⟨x⟩a) = x

bk (v, ⟨bk (w, ⟨xa,b⟩b)⟩a) = bk (w, ⟨bk (v, ⟨xa,b⟩a)⟩b)
bk (v, ⟨up(b, w, xa)⟩a) = up(b, w, bk (v, ⟨xa⟩a))
bk (v, ⟨lk (b, (xa,w )w )⟩a) = lk (b, (bk (v, ⟨xa,w⟩a))w )


Fig. 2. A theory of local state, taken from [21]. The last three equations in the left column require a side condition: a /= b.

What is meant is that the following diagram commutes:

[A  [V →	]]	[A  lk ]	 [A  [A →	]]	 [A × A  F ]   [Δ  F ]	 [A  F ]


J 
[V → [A  F ]]



[V→[A  bk ]]

 [V → [V → F ]] ∼=

 [V × V → F ]



[Δ→F ]
bk 
 [V J 

The corresponding Lawvere A-theory includes three morphisms lk : i(V) → i(A), up: 1 → i(V) × i(A), bk: iS(A) → i(V), and axiom (‡) amounts to the following equation in the Lawvere A-theory:
i (A) × i(V)   iS(A)٨lk	 i (A) × i(A)	 i (A × A)  iS(Δ)  i (A)
S	S	S	S


i(V)

J 
  iS(A)



i(V)٨bk

 i( V) × i(V)
bk
 i( J 


Here, we have elided the equality X × i(F ) = X  i(F ).

Remark: The monoidal structure on f suffices for presenting local state
The theory of local state can be rewritten as a theory involving only the  monoidal  structure  (⊗,  )  of  f.   There  is  a  natural  isomorphism
(π2, eval ): A ⊗ [A   F ] ~= A × F , and, assuming that V is a constant functor
(as in [21]) we also have a natural isomorphism [V → F ] ~= [V  F ].  In place
of the update and lookup operations, we can equivalently consider operations lk ' : A ⊗ [(A × V)  F ] → F and up' : (V × A) ⊗ [A  F ] → F . For example, fol- lowing (1), we have a component up' : F (A {z}) → F (A {z})V, specifying how to update location z.  The axioms can be translated straightforwardly to this

setting; for instance, the first axiom (‡) in Figure 2 says that the composite

[	up' 
lk' 

A  F ] ——→ [V × A  F ] ——→ [A  F ] is the identity.
There are disadvantages to this approach, compared to the approach presented in the remainder of this paper: (i) the translation is limited to the setting where V is constant, and, for a similar reason, one cannot translate the theory of the π-calculus presented in Section 4.1; (ii) the translation weakens the correspondence between the informal presentation of the theory and the formal one, and there is less con- nection with the presentation of global state in [21]; (iii) Proposition 3.4(ii) cannot be used to establish strength with respect to the cartesian structure of f, although Proposition 3.1(ii) ensures that the monad on f is enriched with respect to the monoidal structure (⊗, ).

Remarks on other axioms for local state, and Hilbert-Post completeness
There are other axioms that one could consider for local state. For instance:

(V × A) ⊗ F	(V × A) ⊗ [A   F ]


J	z 
(π1,π3)
J	z 

V × A × F 	 F 
V × [A   F ]
 F 

“(a := v; M ) = M , if a /∈ fv(M )”  “(a := v; M ) = (block a := v in M end)”

(The second equation implies the first.) These equations are consistent with, but not derivable from, the axioms in Figure 2. Indeed, they are not satisfied in the model T (L) of [21]. Thus the conjecture [21] of Hilbert-Post completeness for Fig- ure 2 is refuted. However, the nature of these equations is such that Proposition 3.4 does not apply. Indeed, the resulting monad does not have cartesian strength, and so the monadic metalanguage is not immediately relevant: the program fragments above have no formal status. Perhaps the theory in Figure 2 is complete with respect to ‘cartesian equations’.
Two cotensors in one: towards generality
We now axiomatize the structure of the promonoidal category I, of finite sets and injections, that allowed the development in Section 2. We call this ‘compatibility structure’. In Section 5.5, we use a compatibility structure on a different category to sketch a presentation of a theory for open bisimulation in the π-calculus.
(The reader might have hoped that the development of Sec. 2 could be carried out for any monoidal and cartesian closed category, or at least for any promonoidal category. But this does not seem to be the case.)

Compatibility structures
Terminology. Let C be a category, and M be a class of monomorphisms, closed

under identity and composition. The M-image of a cospan (A f
g
C ←—
is a 

factorization

,,,,
B
with m ∈ M minimal in the sense that it factors through every other such fac- torization. In this setting we refer to the cospan (A → im(f, g) ← B) as jointly M-covering ; it has the property that it is isomorphic to its M-image.
Definition 5.1 A compatibility structure (C, M, ×) is a small category C with an initial object together with: a class M of monomorphisms, closed under composition and identity, such that every cospan in C has an M-image; and a binary relation × on morphisms with common codomain such that
! × f and f × !, where ! : 0 → cod(f ) is the unique map from the initial object;
f × g implies jfh × jgk, whenever the compositions make sense;
If mf × mg and m ∈M then f × g;

If h f × h f , h g × h f ,
A1 ¸¸f¸1¸¸z 

1 1	2 2	1 1	2 2
  ˛C1¸¸¸h¸¸1

h1f1 × h2g2, h1g1 × h2g2,
B1  g1
¸z˛

A ¸¸f¸2¸
,,,, D¸

then h1 × h2,
2	,
  C2¸

where (f ,g ) and (f ,g ) are both jointly M-covering.
B2  g2

1	1	2	2
A compatibility structure is symmetric if f × g =⇒ g × f .

Promonoidal structure from compatibility
A compatibility structure (C, M, ×) induces a promonoidal structure on C, in the sense of Day (Sec. 2.1). We let J (A) = 1, and

P (A, B, C) = {(f, g) | f : A → C, g : B → C, f × g}	.
Using axiom (ii), P extends to a functor P : Cop × Cop × C → Set.
The identity and associativity isomorphisms arise as follows. Since 0 is initial,
∫ AJ (X) × P (X, B, C) ~= P (0, B,C)	and	∫ X J (X) × P (A, X, C) ~= P (A, 0, C).

The identity isomorphisms thus follow from axiom (i). As for the associativity isomorphism, notice that
∫ X P (A, B, X) × P (X, C, D)
~= {(f, g, h) | f : A → D, g : B → D, h : C → D; f × g, g × h, f × h}
~= ∫ X P (A, X, D) × P (B, C, X)	.

This is established using M-factorization structure, and axioms (ii)–(iv).

Examples of compatibility structures

Example 5.2 Cartesian structure. For a simple first example, let C be any category with an initial object, and let M be the class of all isomorphisms in C. There is a compatibility structure in which all morphisms with common codomain are related. The induced structure on SetC is the cartesian closed structure.
Example 5.3 Disjoint images in I. Recall that I is the category of finite sets of atoms and injections between them, and let M be the class of all morphisms in I. The M-image of a pair of injections is their set-theoretic image. The compat- ibility structure defined by f × g ⇐⇒ im(f ) ∩ im(g) = ∅ induces the promonoidal structure on I that we considered in Section 2.2.
Example 5.4 Models for the π-calculus with distinctions.	In some aspects of the π-calculus, particularly open bisimulation [27], it is important to keep track of which names are distinct. To this end, following [10,15,30], let D be the cate- gory whose objects (A, dA) are pairs of a finite set A together with an irreflexive symmetric binary relation dA on A; a morphism f : (A, dA) → (B, dB) is given by a function f : A → B that respects the distinctions, i.e. if a dA a' then f (a) dB f (a'). Let M be the class of those monomorphisms m : (A, dA) → (B, dB) in D for which m(a) dB m(a') implies a dA a'.  We consider the compatibility structure

defined as follows: for a cospan (X, dX
—f (Z, d
←g (Y, d
), let


f × g ⇐⇒ ∀x ∈ X, y ∈ Y. f (x) dY g(y)	.
For a flavour of the structure of SetD, let (⊗, ) be the induced symmetric monoidal closed structure on SetD, and let A be the presheaf given on objects by A(A, dA) = A. Now, let z be an atom not in A; the cartesian structure gives a
bijection [A → F ](A, d ) ~= F (A .	z}, d ) and the monoidal structure satisfies
A	∪{	A


[A  F ](A, d
) ~= F  A .

z}, d

(A × {z})


({z}× A)	.	(5)

Informally: [A → F ] is the type of programs involving a fresh atom, whereas [A F ] is the type of programs involving an atom which is known to be distinct from all the others.
Other examples. Various authors have used more sophisticated monoidal struc- tures on presheaf categories. The structure considered in [19], for modelling syntac- tic control of interference, appears to be an example of a compatibility structure. It would be interesting to investigate a process of adjoining ‘indeterminates’ to compatibility structures, following [11].

Compatibility structure on categories of monomorphisms
Let (C, M, ×) be a compatibility structure. Write C[M] for the category whose ob- jects are monomorphisms (SA > A) in M; a morphism (SA, A) → (SB, B) in C[M]

is a morphism A → B in C for which there is a morphism SA → SB making the evi- dent diagram commute. We now give a compatibility structure for C[ł]. Note that the category C[ł] has an initial object (id: 0 > 0), and that it inherits ł-images from C. A span

S	f '  S  ¸g'	S
(6)

J	J	J 
b
J	J	J 
A	f	 C ¸,g	B
is jointly ł-covering in C[ł] when both (f', g') and (f, g) are jointly ł-covering in C. The relation × on C induces a compatibility structure ×~ on C[ł]: in the situation of (6), let f ×~ g whenever f × gb. It is straightforward to verify that ×~ satisfies axioms (i)–(iv).

Revisiting the situation of Section 2
In the setting of Example 5.3, the category I[ł] is equivalent to the category I⭢, and thus we recover the situation of Section 2.3.
In the general setting, the situation is much as in Section 2. Let (C, ł, ×) be a symmetric compatibility structure. Write C for SetC, and A for SetC[M]; let (⊗,  ) be the symmetric monoidal closed structure induced by the compatibility structure on C, and let ( , [—, =]l, [—, =]r) be the induced monoidal biclosed structure on A.
There are embeddings i, iS : C → A given on objects by
i(F )(SA > A) = F (A)	iS(F )(SA > A) = F (SA)

(for  F	in  C),	and  there  is  a  projection  functor  δ : A→C  given  by

δX(A) = X(A —i→d
(for X in A).

The functors are adjoint: ··· E iS E δ E i E · · · .
The category C is a A-category, with enrichment C(F, G) = [i(F ), i(G)]r. It has tensors and cotensors, and Corollary 2.3 holds:
F • i(G) ~= F × G	[i(F ) —• G] ~= [F → G]
F • iS(G) ~= F ⊗ G	[iS(F ) —• G] ~= [F  G]

Open bisimulation and the π-calculus
We return to the setting of Example 5.4, writing D for the category of finite sets and distinction relations, with the compatibility structure that we introduced there. Let Ð be the category SetD, and let A be the presheaf in Ð given by A(A, dA) = A. Let A be the category SetD[M]. (In fact, the category A is equivalent to one that I used in [31] to study the operational semantics for the π-calculus.)
I now sketch how to understand the well-known axiomatization of open bisimula- tion [27] as an A-equational system (in the sense of Sec. 3.2). We proceed informally, following Section 4.1. Define an open π-algebra to be a presheaf F in Ð together

with the six operations of Figure 1 and an additional operator if : A × A × F → F , subject to some equations. Before we consider the equations, we note that the free model for this signature Σ (without the equations) is the presheaf TΣ,0 for which the set TΣ,0(A, dA) is the set of π-calculus terms (without parallel composition), up-to α-equivalence, involving free channel names from A.
Sangiorgi [27] presents open bisimilarity as a family of equivalence relations, =d, one for each distinction relation d. Thus Ð is an appropriate universe, since here an equivalence relation is a subfunctor (=) ⊆ TΣ,0 × TΣ,0 which determines a family of relations of sets, {(=dA ) ⊆ TΣ,0(A, dA) × TΣ,0(A, dA)}A,dA .
There are too many axioms in [27] to list them all here; roughly speaking they include the axioms of Figure 1, plus extra axioms for the interaction and commuta- tivity of the if operator. The interesting new axioms are as follows (informally).
(P )	If x d y then (if x = y then P ) =d 0
(W )	If d ⊆ d' and P =d Q then P =d' Q
(CR)	If P =d Q then (νx. P ) =d\{x} (νx. Q)

There is no need to include axioms (W ) and (CR) in the corresponding A-equational system, for they are satisfied in every Σ-model. Axiom (W ) amounts to functoriality of our equivalence relation, and axiom (CR) follows from the congruence of new , given the explicit description of the type [A  F ] in (5).
Axiom (P ) amounts to diagram (a) below.  Notice that A ⊗ A satisfies (A ⊗ A)(A, dA) = dA.


(A ⊗ A) × X     A × A × X
1 	if	 i( A × A)

(a)	if
J	J 
(b)
J	J 

1	nil	 X 
 	 i( A ⊗ A)
nil

Diagram (b) is the corresponding diagram in the Lawvere A-theory.
Consider the free model of the resulting theory, as a presheaf T(Σ,Eq ),0 in Ð. The kernel of the quotient TΣ,0 → T(Σ,Eq ),0 is the family {=dA }dA : open bisimilarity.
Acknowledgement
It has been helpful to discuss [5,21,29,32] with their authors. I’ve had helpful dis- cussions with Martin Hyland and Paul Levy too. Referees’ comments were helpful. Research supported by EPSRC fellowship EP/E042414/1.

References
R. A. Clouston. Nominal Lawvere theories. Unpublished manuscript, 2009.
R. A. Clouston and A. M. Pitts. Nominal equational logic. In Computation, Meaning, and Logic: Articles dedicated to Gordon Plotkin, volume 172 of Electron. Notes Theor. Comput. Sci., pages 223–
257. 2007.

B. Day. Construction of Biclosed Categories. PhD thesis, University of New South Wales, 1970.
B. Day. On closed categories of functors. In Reports of the Midwest Category Seminar, IV, volume 137 of Lecture Notes in Math., pages 1–38, 1970.
M. P. Fiore and C.-K. Hur. Equational systems and free constructions. In Proc. of ICALP’07, volume 4596 of Lecture Notes in Comput. Sci., pages 607–618, 2007.
M. P. Fiore and C.-K. Hur. Term equational systems and logics. In Proc. of MFPS XXIV, volume 218 of Electron. Notes Theor. Comput. Sci., pages 171–192, 2008.
M. P. Fiore, E. Moggi, and D. Sangiorgi. A fully abstract model for the π-calculus. Inform. and Comput., 179(1):76–117, 2002.
M. J. Gabbay and A. Mathijssen. A formal calculus for informal equality with binding. In Proc. of WoLLIC’07, volume 4576 of Lecture Notes in Comput. Sci., pages 162–176, 2007.
M. J. Gabbay and A. M. Pitts. A new approach to abstract syntax with variable binding. Formal Aspects of Computing, 13:341–363, 2001.
N. Ghani, K. Yemane, and B. Victor. Relationally staged computations in calculi of mobile processes. In Proc. of CMCS’04, volume 106 of Electron. Notes Theor. Comput. Sci., pages 105–120, 2004.
C. Hermida and R. D. Tennent. Monoidal indeterminates and categories of possible worlds. In Proc. of MFPS XXV, 2009.
G. M. Kelly. Basic concepts of enriched category theory, volume 64 of Lecture Notes in Math.
Cambridge University Press, 1982.
G. M. Kelly. Structures defined by finite limits in the enriched context, I. Cah. Topol. G´eom. Diff´er. Cat´eg., 23(1):3–42, 1982.
G. M. Kelly and A. J. Power. Adjunctions whose counits are coequalizers, and presentations of finitary enriched monads. J. Pure Appl. Algebra, 89(1–2):163–179, 1993.
M. Miculan and K. Yemane. A unifying model of variables and names. In Proc. of FoSSaCS’05, pages 170–186, 2005.
R. Milner, J. Parrow, and D. Walker. A calculus of mobile processes, II. Inform. and Comput., 100(1):41–77, 1992.
E. Moggi. Notions of computation and monads. Inform. and Comput., 93(1):55–92, 1991.
P. W. O’Hearn. On bunched typing. J. Funct. Programming, 13(4):747–796, 2003.
P. W. O’Hearn, J. Power, M. Takeyama, and R. D. Tennent. Syntactic control of interference revisited.
Theoret. Comput. Sci., 228(1–2):211–252, 1999.
G. Plotkin and J. Power. Computational effects and operations: An overview. In Proc. of Domains VI, volume 73 of Electron. Notes Theor. Comput. Sci., pages 149–163, 2004.
G. D. Plotkin and J. Power. Notions of computation determine monads. In Proc. of FoSSaCS’02, volume 2303 of Lecture Notes in Comput. Sci., pages 342–356, 2002. Erratum at http://homepages. inf.ed.ac.uk/gdp/publications/.
A. J. Power. Enriched Lawvere theories. Theory Appl. of Categ., 6(7):83–93, 1999.
J. Power. Semantics for computational effects: from global to local. Draft, 2006.
J. Power. Semantics for local computational effects. In Proc. of MFPS XXII, volume 158 of Electron. Notes Theor. Comput. Sci., pages 355–371, 2006.
D. J. Pym. The Semantics and Proof Theory of the Logic of Bunched Implications, volume 26 of
Applied Logic Series. Kluwer, 2002.
E. Robinson. Variations on algebra: Monadicity and generalisations of equational theories. Formal Aspects of Computing, 13(3–5):308–326, 2002.
D. Sangiorgi. A theory of bisimulation for the pi-calculus. Acta Inform., 33(1):69–97, 1996.
I. Stark. A fully abstract domain model for the π-calculus. In Proc. of LICS’96, pages 36–42, 1996.
I. Stark. Free-algebra models for the π-calculus. Theoret. Comput. Sci., 390(2–3):248–270, 2008.


S. Staton. Name-Passing Process Calculi: Operational Models and Structural Operational Semantics. PhD thesis, Cambridge, 2007. Technical Report UCAM-CL-TR-688.
S. Staton. General structural operational semantics through categorical logic. In Proc. of LICS’08, pages 166–177, 2008.
A. Ziegler, D. Miller, and C. Palamidessi. A congruence format for name-passing calculi. In Proc. of SOS’05, volume 156 of Electron. Notes Theor. Comput. Sci., pages 169–189, 2006.
