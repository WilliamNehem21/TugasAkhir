Electronic Notes in Theoretical Computer Science 174 (2007) 63–77	
www.elsevier.com/locate/entcs

Towards a Hybrid Dynamic Logic for Hybrid Dynamic Systems 1
Andr´e Platzer2
Carnegie Mellon University, Pittsburgh, PA, USA University of Oldenburg, Department of Computing Science, Germany
platzer@informatik.uni-oldenburg.de


Abstract
We introduce a hybrid variant of a dynamic logic with continuous state transitions along differential equa- tions, and we present a sequent calculus for this extended hybrid dynamic logic. With the addition of satisfaction operators, this hybrid logic provides improved system introspection by referring to properties of states during system evolution. In addition to this, our calculus introduces state-based reasoning as a paradigm for delaying expansion of transitions using nominals as symbolic state labels. With these exten- sions, our hybrid dynamic logic advances the capabilities for compositional reasoning about (semialgebraic) hybrid dynamic systems. Moreover, the constructive reasoning support for goal-oriented analytic verification of hybrid dynamic systems carries over from the base calculus to our extended calculus.
Keywords: hybrid logic, dynamic logic, sequent calculus, compositional verification, real-time hybrid dynamic systems


Introduction
Failures in automotive industry, railway technology and avionics have a disastrous impact. A central feature prevalent in those safety-critical embedded systems is a tight amalgamation of mechanical, electrical and digital technology—leading to an interacting continuous and discrete system dynamics in, what is called, hybrid systems. Albeit, the complexity of the overall system dynamics in large-scale ap- plications still exceeds the capabilities of today’s verification tools, which depend on simple dynamics. Hence, a key idea is to decompose reasoning into: (a) a closer

1 Despite the obtruding linguistic appeal of using hybrid dynamic logic for verifying hybrid dynamic sys- tems, notice the incisive gap in terminology. While dynamic logics are multi-modal logics with modalities for reasoning about structured actions, the theory of dynamic systems provides mathematical concepts for states varying over time (along differential equations). Moreover, with hybrid logics being modal logics with nominals for labelling states, hybrid systems are dynamic systems with interacting discrete and continuous behaviour.
2 This work was supported by a fellowship of the German Academic Exchange Service (DAAD) and by the German Research Council (DFG) as part of the Transregional Collaborative Research Center “Automatic Verification and Analysis of Complex Systems” (SFB/TR 14 AVACS, see www.avacs.org).

1571-0661 © 2007 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2006.11.026

investigation of the actual complex dynamics of a single system component; and
(b) an integration of those local correctness results on a simplified abstract level into the overall system verification.
A companion paper [19] introduces a dynamic logic enriched by continuous state transitions along differential equations. This differential dynamic logic, dL, is suit- able for verifying hybrid dynamic systems. In the present paper, we improve its capabilities for compositional reasoning (b) by combining the ideas of hybrid logic with dL to form the hybrid dynamic logic dLh. We refer the reader to [19] for details on (a) in the presence of continuous dynamics.
We use hybrid logic to achieve two important improvements with dLh: state- based reasoning and introspection. Using nominals as abstract state labels, our hybrid calculus is able to leave state succession purely symbolic (state-based rea- soning ) and only expand symbolic state transitions when necessary for progress (expand-on-demand). This ability is increasingly important for computationally expensive state transitions caused by continuous dynamics. The second advantage results from improved system introspection by providing satisfaction operators to refer back to states during the system evolution.
On account of this, a prime contribution of this paper is the hybrid dynamic logic dLh. It forms a foundation for compositional verification of hybrid dynamic systems. Another important contribution is a hybrid sequent calculus for the ﬁrst- order dynamic logic dLh, which allows the paradigm of state-based reasoning in an expand-on-demand style. A third contribution are satisfaction operators to refer back to states during system execution for improved system introspection.

Hybrid Dynamic Systems
Safety-critical systems in the aforementioned industries typically have a joint discrete and continuous state space. There, system behaviour depends on both, the state in a discrete controller and continuous physical measurands. Hybrid sys- tems represent a mathematical model for those dynamic systems of interacting discrete and continuous behaviour. Such behaviour is governed by a combination of continuous evolution characterised by differential equations and of instantaneous projections for discrete jumps in the state space.

Compositional Verification
The key challenge for compositional verification is to provide both a specification language and a verification calculus that are prepared for integrability concerns of local correctness statements. Components often (re)occur in different contexts of a system architecture. For verification, components thus need a systematic decou- pling from their environment in order to permit a flexible assembly into their highly generic context (Fig. 1 visualises a component (PC), in solid lines, with its interface to the environment, plotted with dashed lines). Hence, this flexibility of component integration also has to be respected in correctness statements with a rely-guarantee style of reasoning [10]. The basic requirement for the practical use of compositional



Fig. 1. Context of integrability for compositional verification
verification in this connexion is a free integrability (this notion is adopted from gen- eral principles of component systems [2]) of correctness statements into the overall verification. This means that local correctness statements have to mimic the generic interaction structure of a component with its environment, in order to coalesce into a global correctness statement at every possible instantiation of the component. In particular, this requires the specification language to adhere to this interaction character of compositional correctness statements and the verification tools to deal faithfully with those aspects of integration.
We argue that the ability of dynamic logic to relate statements about multiple components is beneficial for compositional reasoning. All the more, by hybridising dL to form dLh, we improve the means for addressing compositionality by state- based reasoning (using nominals) and introspection (using satisfaction operators).

Dynamic Logic
The principle of dynamic logic (DL) is to facilitate the formulation of statements about system behaviour by integrating system descriptions and formulas within a single specification language (see e.g. [13] for a general exposition of DL). By permitting arbitrary system descriptions α as actions of a labelled multi-modal logic, dynamic logic provides formulas of the form [α]φ and ⟨α⟩φ, where [α]φ expresses that all (terminating) runs of system α lead to states in which φ holds, whereas ⟨α⟩φ expresses that there is at least one terminating run of α after which φ holds. A Hoare-style specification {φ}α{ψ}, for instance, can be expressed as φ → [α]ψ. As in dL, descriptions of hybrid system actions play the role of α in dLh.

Hybrid Logic
Hybrid logic internalises the modal satisfaction relation and state labels [4,6]. It introduces nominals as unique labels for states such that a nominal i designates a single state by being true at exactly one state. Further, the satisfaction operator @iφ allows to refer to whether φ is true in the unique state labelled by nominal i.

Structure of this Paper
After introducing syntax and semantics of the hybrid dynamic logic dLh in Sec- tion 2, we introduce a sound sequent calculus for dLh in Section 3 and illustrate the advances in compositional reasoning using hybrid techniques. Section 4 contains related work. Conclusions and future work are in Section 5.

Syntax and Semantics of dLh
Overview: The Basic Concepts of dLh
The hybrid dynamic logic dLh has four basic characteristics to meet the requirements of hybrid dynamic systems.
Discrete jumps. Projections in discrete state space are represented as instanta- neous assignments of values to state variables. With this, mode switches like mode := 4 can be expressed with discrete jump system actions, as well as re- sets z := 0 or adjustments x := x − 2 of control variables.
Continuous evolution. Continuous variation in system dynamics is represented with differential equations as evolution constraints. For instance, evolution of a system with constant braking can be expressed with a system action for the differential equation z¨=−5 with second time-derivative z¨ of z.
Regular combinations. Elementary system behaviour of discrete and continuous change can be combined to structured behaviour of hybrid systems using regular combinations. For example, mode := 4 ∪ z¨=−5 describes a train controller that can either choose to switch its state to an alert mode (4) or initiate braking by the differential equation z¨ = −5, by a nondeterministic choice. In conjunction with the other regular combinations, conditionals can express more constrained or even deterministic control choices.
Nominals. The combination dLh of hybrid logic with dynamic logic introduces nominals as unique markers for states during system runs and a satisfaction op- erator @iφ to refer back to the truth-value of φ at the unique state labelled by nominal i. For instance, @imode = 4 expresses that an alert (4) has been issued during the system evolution, namely at the state belonging to the nominal i.

Syntax of dLh
Terms and Formulas
The formulas of dLh are built over a set V of real-valued variables (typically called x, y, z), a set N of nominals (with typical symbols i, j, k, r, s) and a fixed signature Σ of function and predicate symbols. The presence of sufficiently many variables and nominals is assumed by the calculus. The signature Σ is assumed to contain exclusively the usual function and predicate symbols for real arithmetic, such as 0, 1, +, ·, =, ≤, <, ≥, >.
The set Trm(V ) of terms with variables in V is defined as in classical first-order logic. The set Fml(V ) of formulas of dLh is defined as common in hybrid logic, yet with modalities of first-order dynamic logic. That is, they are built using the connectives ∧, ∨, →, ↔, ¬ and the quantifiers ∀, ∃ for variables (first-order part). In addition, if φ is a formula and α a system action, then [α]φ and ⟨α⟩φ are formulas as in dL (dynamic part). Moreover, if φ is a formula and i a nominal, then i and @iφ are formulas of dLh (hybrid part). Note that, diametrically to CDL [17], dLh only allows variables but not nominals to be quantified. Formally, the sets Fml(V ) of

formulas, and Act(V ) of system actions are simultaneously inductively defined in Definitions 2.1 and 2.2, respectively.
Definition 2.1 [Formulas] The set Fml(V ) of formulas is the smallest set with:
If i ∈ N is a nominal symbol, then i ∈ Fml(V ).
If p ∈ Σ is a predicate symbol and ti ∈ Trm(Σ), then p(t1,... , tn) ∈ Fml(V ).
If φ, ψ ∈ Fml(V ), then ¬φ, (φ ∧ ψ), (φ ∨ ψ), (φ → ψ) ∈ Fml(V ).
If φ ∈ Fml(V ) and x ∈ V , then ∀x φ, ∃xφ ∈ Fml(V ).
If φ ∈ Fml(V ) and α ∈ Act(V ), then [α]φ, ⟨α⟩φ ∈ Fml(V ).
If i ∈ N is a nominal and φ ∈ Fml(V ), then @iφ ∈ Fml(V ).

System Actions
As in dL [19], elementary discrete jumps and continuous evolutions are combined with regular control structures to form more complex system actions of dLh.
Definition 2.2 [System actions] The set Act(V ) of (hybrid dynamic) system ac- tions is the smallest set such that:
If x ∈ V and θ ∈ Trm(V ), then (x := θ) ∈ Act(V ).
If x ∈ V and θ ∈ Trm(V ), then (x˙ = θ) ∈ Act(V ).
If φ ∈ Fml(V ) is a quantifier-free first-order formula, then (φ?) ∈ Act(V ).
If α, γ ∈ Act(V ) then (α; γ) ∈ Act(V ).
If α, γ ∈ Act(V ) then (α ∪ γ) ∈ Act(V ).
If α ∈ Act(V ) then (α∗) ∈ Act(V ).
The effect of x := θ is an instantaneous discrete jump in the state space, while that of x˙ = θ is an ongoing continuous evolution that is governed by this differen- tial equation (as in [19], our calculus imposes restrictions on the algebraic nature of θ). Extensions to systems of differential equations or higher-order derivatives are straightforward [19].
The semantics of φ? is that of a no-op if φ is true in the current state, and that of a dead end operator, which blocks all further evolution, otherwise. The non-deterministic choice α ∪ γ, sequential composition α; γ and non-deterministic repetition α∗ of system actions are as customary. They can be combined with φ? to form more complicated control structures (see [13]). Independent parallel com- position ∩ can be defined using nominals (cf. [17]).
Example 2.3 [ETCS case study] As our running example, consider part of the European Train Control System (ETCS) case study [11]. In ETCS, the movement of trains is controlled by decentralised Radio Block Centres (RBC), which grant or deny movement authorities to trains by wireless communication. The actual accel- eration and braking behaviour is determined by the train and subject to movement authority limit, weather condition, slope of track etc. (in this paper, we focus on

compositional hybrid dynamics and refer to [16] for pure real-time and communi- cation aspects). For simplicity, assume that—depending on those conditions—the train motion control determines a safety envelope e around the train, within which it considers driving safe. When movement authority has been granted up to the track position m and the train is currently located at position z then dLh can analyse, for example, the following safety statement about the acceleration system (accel):
ψ → [ (m − z < e?; a := −b) ∪ (m − z ≥ 2e?; a := 0.1) ; z¨ = a] z < m
It expresses that—under a sanity condition ψ for the safety envelope—a train that decelerates using service brakes of constant force b if the safety envelope is underrun (m − z < e), but slowly accelerates if there is sufficient distance (m − z ≥ 2e), will always remain within its movement authority m. In reality, the evolution z¨ = a is interrupted for reassessment of driving conditions after a certain processing period, which we do not intend to investigate further here to retain a concise presentation.
Semantics
Hybrid dynamic systems evolve along a piecewise continuous trajectory in n-dimen- sional space as time passes. Discontinuities are caused by discrete jumps in the state space while continuous evolution segments are governed by differential equations.
The interpretations of dLh consist of worlds (states) that are assignments of vari- ables with real values and depend on assignments of states to nominals. A potential behaviour of a hybrid system corresponds to a sequence of states that contain the observable values of system variables during its evolution. More precisely, the se- mantics of a single (compound or atomic) system action is captured by the state transitions that are possible using this action. Since function and predicate symbols are interpreted as common for real arithmetic, we suppress the first-order structures and set of states from the notation.
Definition 2.4 [Interpretation] An interpretation is a non-empty set of states with domain R that is assumed closed under system actions (see Def. 2.7). A state is a map v:V →R; the set of all states is denoted by Sta(V ). In addition to this, an assignment of nominals is a mapping η from N to the set of states.
The passing of time is implicit and assumed to be defined according to the differ- ential action τ˙ = 1 upon which the symbol τ will represent the time passed within the model. Thus, v(τ ) always denotes the absolute point in time to which the sys- tem state v belongs. Further, we use v[x '→ d] to denote the semantic modiﬁcation of a state v that is identical to v except for the interpretation of the symbol x, which is d ∈ R. For terms and formulas, the valuation valη(v, ·) with respect to an assignment η and state v combines the usual semantics for first-order hybrid logic [5] and first-order modal or dynamic logic [12,13]. The underlying modal tran- sition relation, ρη(α), is induced by the semantics of hybrid system α (Def. 2.7).
Definition 2.5 [Valuation of terms] The valuation valη(v, ·) of terms with respect to assignment η and state v is defined by:

valη(v, x)= v(x) if x is a variable
valη(v, f (t1,... , tn)) = fl valη(v, t1),... , valη(v, tn) , where fl is the opera- tion associated to the function symbol f
Definition 2.6 [Valuation of formulas] The valuation valη(v, ·) of formulas with respect to assignment η and state v is defined by:
valη(v, p(t1,... , tn)) = pl valη(v, t1),... , valη(v, tn) , where pl is the relation associated to the predicate symbol p
valη(v, φ ∧ ψ) is defined as usual, the same holds for ¬, ∨, →
valη(v, ∀x φ)= true iff valη(v[x '→ d], φ)= true for all d ∈ R
valη(v, ∃x φ)= true iff valη(v[x '→ d], φ)= true for some d ∈ R
valη(v, [α]φ)= true iff valη(w, φ)= true for all w such that (v, w) ∈ ρη(α)
valη(v, ⟨α⟩φ)= true iff valη(w, φ)= true for some w such that (v, w) ∈ ρη(α)
valη(v, i)= true iff η(i)= v
valη(v, @iφ)= true iff valη(η(i), φ)= true
Unlike in [5], terms are non-rigid, i.e, their value can change from state to state. The semantics, ρη(α), of system actions is a hybrid variant of that in dL [19]:
Definition 2.7 [Semantics of system actions] The valuation, ρη(α), of a system action α, is a transition relation on states. It specifies which state w is reachable from a state v by operations of the hybrid system α and is defined as:
(v, w) ∈ ρη(x := θ) iff w = v[x '→ valη(v, θ)]
(v, w) ∈ ρη(x˙ = θ) iff there is a function f : [v(τ ), w(τ )]→ Sta(V ) such that γx(ζ)= valη(f (ζ), x) is continuous on [v(τ ), w(τ )] and differentiable 3 of value γθ(ζ) at each time ζ ∈ (v(τ ), w(τ )), while γy is constant for each y /= x and f (v(τ )) = v, f (w(τ )) = w
ρη(φ?) = {(v, v) : valη(v, φ)= true}
ρη(α; γ)= ρη(α) ◦ ρη(γ)= {(v, w) : (v, z) ∈ ρη(α), (z, w) ∈ ρη(γ) for a z}
ρη(α ∪ γ)= ρη(α) ∪ ρη(γ)
(v, w) ∈ ρη(α∗) iff there are n ∈ N and v=v0,... , vn=w with (vi, vi+1) ∈ ρη(α) for 0 ≤ i < n 
Due to the implicit definition of time via the differential equation τ˙ = 1, time does not pass during discrete jumps x := θ but only during continuous evolutions.
Compositionality by Introspection
Nominals add the capability to express that a state recurs during the run of a system. For instance, the following formula of dLh expresses that the system inevitably ends

3 Solutions are defined accordingly for differential equation systems, which is where the full capabilities of f with domain Sta(V ) rather than R come into play. Then γy remains constant for each variable y with no equation in the system (x˙ = θ).

in a state (marked by i) that has already been visited after the first assignment: [z := −y; i?; x := x − y; x := z + x]i. We investigate how this can be exploited for compositional reasoning in the next example.
Example 2.8 [ETCS compositionality by introspection] Using nominals, dLh is able to express advanced system introspection properties in the ETCS scenario of Example 2.3. Such system introspection is useful for isolating reasoning about components of tight interplay. For instance, the following formula expresses that— from the perspective of one component—the only cause of underrunning the safety envelope could be due to a change in track slope (or weather conditions) at state i during the system evolution and due to a failure to react by properly having adjusted the braking distance estimates at state j (the use of nominals for introspection is not limited to sequential composition, though):
[poll-sensor; i?; accel; j?; z¨ = a](m − z < e → @i(slope ∨ weather) ∧ @j¬adjust)
Once this conjecture has been established, a separate analysis could be used to show that a misjudgement leading to this sequence of events (as observed at i followed by j) is prevented by another system component that is responsible for assessing track conditions. Yet, the latter would hold for reasons completely irrespective of the functionality of the acceleration system itself. Similarly, reasoning about the full train control depends on messages received from the RBC during system evolution. Nominals help to isolate reasoning about train control and reasoning about RBCs, even though safety depends on their cooperation.
Here, nominals help to structure verification of components, thereby unleashing a great potential for performance improvements during verification. In general, it is easier to prove several conjectures about smaller subsystems than a single correctness statement about the full system [8]. Using nominals for introspection, this effect can even be exploited to decompose reasoning for components when correctness depends on a very tight interplay.

A Sequent Calculus for dLh
Overview
In this section, we introduce a sequent calculus for dLh. With the basic idea be- ing to perform a symbolic evaluation, system actions are successively transformed into logical formulas describing their effects. Yet, rule applications for first-order reasoning and system reasoning are not separated but intertwined.
For propositional logic, standard rules R1–R9 are listed in Figure 2. For dealing with nominals, the satisfaction operator and symbolic state transitions with nomi- nals, dLh uses standard rules R14–R21 of hybrid logic [4,5]. Most of the other rules for dynamic modalities are hybrid variants of dL rules [19]. They transform system actions into “simpler” logical formulas, thereby relating the meaning of actions and formulas. The idea of using hybrid modality rules R14–R17, however, is to facilitate

state-based reasoning by introducing nominals as symbolic state labels. Expanding those purely symbolic transitions with the other dynamic rules can be delayed by this technique until inevitable for proof progress, which is particularly useful for computationally expensive cases like R22. Unlike first-order logic, quantifiers are dealt with using quantifier elimination [21] over the reals for continuous evolutions, which is presented in a companion paper [19].

Rules of the Calculus
A sequent is of the form Γ ▶ Δ, where Γ and Δ are finite (multi)sets of formulas. Its informal semantics is the same as that of the formula  φ∈Γ φ →  ψ∈Δ ψ.
Definition 3.1 [Provability, Derivability] A formula ψ is provable from a set Φ of formulas, denoted by Φ ▶dLh ψ iff there is a finite set Φ0 ⊆ Φ for which the sequent Φ0 ▶ ψ is derivable. In turn, a sequent of the form Γ, Φ ▶ Ψ, Δ (for some finite multisets Γ, Δ of context formulas) is derivable iff there is an instance
Φ1 ▶ Ψ1		...	Φn ▶ Ψn Φ ▶ Ψ
of a rule schema of the dLh calculus in Figure 2 such that Γ, Φi ▶ Ψi, Δ is derivable for each 1 ≤ i ≤ n. Schemata R21–R31 can be applied on either side of the sequent.
As usual in sequent calculus, note that—although the direction of entailment is from premisses (above rule bar) to conclusion (below)—the order of reasoning is converse in practice. Rules are applied analytically, starting with the proof obli- gation at the bottom. As usual in hybrid logic [4], the calculus is further built for satisfaction formulas @sφ and retains this structure during the proof. The choice of multisets and the contraction rules R10–R11 is only necessary for a concise for- mulation of R15,R16,R18–R20 (see [4] for details).
For handling discrete change, the dLh rules R12–R13 use substitutions once the remaining formulas are first-order (improvements for resolving assignments earlier are presented in [3]; observe how hybrid logic gives an elegant alternative to update prefixes). The same rules are assumed for [x := θ] rather than ⟨x := θ⟩, here, as discrete change is deterministic. The result of applying to φ the substitution that replaces x by θ is defined as usual; it is denoted by φθ .
In R22–R23, solving differential equations amounts to a symbolic initial value problem. Yet, differential equations are restricted to having flows as solutions that are expressible in dLh (i.e., semialgebraic):
Definition 3.2 [Expressible solutions] The differential equation x˙ = θ has express- ible solutions in dLh, if its general solution xˆc is parametric in c = (c1,... , cn) ∈ Rn and xˆc ∈ Trm(V ).
Quantifiers arising from R22–R23 are handled using the technique in [19].



▶ @sA
(R1)
@s¬A ▶
@sA ▶
@sA, @sB ▶
(R4)
@s(A ∧ B) ▶
▶ @sA	▶ @sB
@sA ▶	@sB ▶
(R7)
@s(A ∨ B) ▶
▶ @sA, @sB

(R2)


▶ @s¬A
(R5)
▶ @s(A ∧ B)
(R8)


▶ @s(A ∨ B)

@sA ▶ @sB
(R3)
▶ @s(A → B)
φ, φ ▶
▶ @sA	@sB ▶
(R6)
@s(A → B) ▶
@rφ
(R9)


@sA ▶ @sA

(R10)	φ ▶
(R21)
@ @ φ


(R11)
▶ φ, φ


▶ φ
@s⟨x := θ⟩r, @sFθ ▶

(R22)
@s∃c (xˆc(0) = x ∧ ∃t≥0 ⟨x := xˆc(t)⟩φ) @s⟨x˙ = θ⟩φ
@s∀c (xˆc(0) = x → ∀t≥0 [x := xˆc(t)]φ)

(R12) 	x	
@s⟨x := θ⟩r, @rF ▶
 @s⟨x := θ⟩r ▶ @sFθ
(R13)
@s⟨x := θ⟩r ▶ @rF
@s⟨α⟩a, @aφ ▶
(R23)

(R24)

@s⟨α⟩⟨γ⟩φ


@s⟨α; γ⟩φ
@s[α][γ]φ
@s[x˙ = θ]φ

(R14)
@s⟨α⟩φ ▶
@rφ ▶
(R25)


@s[α; γ]φ
@s(φ ∧ ψ)

(R15)
@ [α]φ, @ ⟨α⟩r ▶
(R26)
@ ⟨φ?⟩ψ

s	s
▶ @rφ
s
@s(φ → ψ)

(R16)
@ ⟨α⟩r ▶ @ ⟨α⟩φ
(R27)
@ [φ?]ψ

s	s	s


(R17)

(R18)
@s⟨α⟩a ▶ @aφ


▶ @s[α]φ @ss ▶
▶
@rφ ▶

(R28)

(R29)
@s(⟨α⟩φ ∨ ⟨γ⟩φ) @s(⟨α ∪ γ⟩φ)
@s([α]φ ∧ [γ]φ) @s[α ∪ γ]φ
@s(φ ∨ ⟨α; α∗⟩φ)

(R19)
@ r, @ φ ▶
(R30)
@ ⟨α∗⟩φ

s	s	s

@s⟨α⟩u ▶
(R20)
@ ⟨α⟩r, @ u ▶

(R31)
@s(φ ∧ [α; α∗]φ) @ [α∗]φ

s	r	s


In the above rule schemata, r, s, u are nominals. In R12–R13, F is a first-order formula and the substitution does not introduce new bindings. In R22–R23 the differential equation has expressible solution xˆc, where c, t are fresh variables. In R14 and R17, a is a new nominal; further, φ /∈ N in R14.
Fig. 2. Rule schemata of the hybrid dLh calculus



∗

R9 @t⟨a := -b⟩r, @t⟨z¨ = -b⟩cr ▶ @t⟨z¨ = -b⟩z ≥ m
R12 @t⟨a := -b⟩r, @r⟨z¨ = a⟩cr ▶ @t⟨z¨ = -b⟩z ≥ m

... 

@t⟨c2?; a := 0.1⟩r,... ▶ ... 

R7   @t(⟨a := -b⟩r ∨ ⟨c2?; a := 0.1⟩r), @r⟨z¨ = a⟩cr ▶ @t⟨z¨ = -b⟩z ≥ m
R28   @t⟨a := -b ∪ (c2?; a := 0.1)⟩r, @r⟨z¨ = a⟩cr ▶ @t⟨z¨ = -b⟩z ≥ m R14	@t⟨a := -b ∪ (c2?; a := 0.1)⟩⟨z¨ = a⟩cr ▶ @t⟨z¨ = -b⟩z ≥ m R24		@t⟨accel⟩cr ▶ @t⟨z¨ = -b⟩z ≥ m
R1	 @t¬⟨z¨ = -b⟩z ≥ m, @s⟨tctl⟩t, @t⟨accel⟩cr ▶ R15 @s[tctl]¬⟨z¨ = -b⟩z ≥ m, @s⟨tctl⟩t, @t⟨accel⟩cr ▶ R14	@s[tctl]¬⟨z¨ = -b⟩z ≥ m, @s⟨tctl⟩⟨accel⟩cr ▶ R24		@s[tctl]¬⟨z¨ = -b⟩z ≥ m, @s⟨tctl; accel⟩cr ▶
R2	@s[tctl]¬⟨z¨ = -b⟩z ≥ m ▶ @s¬⟨tctl; accel⟩cr


Fig. 3. Proof with state-based reasoning for compositional verification.

Compositional Veriﬁcation with State-based Reasoning
To illustrate state-based reasoning and focus on the aspects involving hybrid logic, we consider a conjecture about an acceleration system accel (simplified in compari- son to Example 2.3). It is embedded in another component tctl, assumed to assess weather conditions and communication with the RBC:
@s [tctl]¬⟨z¨ = -b⟩z ≥ m → ¬⟨tctl; accel⟩crash 

Fig. 3 shows a proof using state-based reasoning (subsequent weakening is indicated by gray type; the application of R12 is slightly generalised to replace a by −b in differential equations, see [19]). Observe how expanding the modality of @s[tctl] is avoided by R14 and replaced by an abstract symbolic successor t. Using the state-based reasoning capabilities of dLh, this abstract transition to t (thus the whole system action tctl) never needs to be expanded during the proof. The same state-based reasoning technique can be used to skip computation of the continuous evolution in @t⟨z¨ = -b⟩ and close (indicated by ∗) the left branch by simple reasoning that crash states (cr) imply z ≥ m. Closing the right branch is omitted (indicated by ellipsis). It would require reasoning about the actual sanity condition of the safety envelope and is beyond the scope of this paper. Techniques for proving the antecedent, which actually involve investigating the continuous dynamics, will be

presented in [19].
Soundness and Incompleteness
Soundness is proven like (local) soundness of the base logic dL in [19].
Theorem 3.3 (Soundness) The dLh calculus (Def. 3.1) is sound, which means that derivable formulas are valid (true in all states of all interpretations with all assignments of nominals).
The notion of repetition in dLh permits to define natural numbers in real arithmetic, yielding the following result [19].
Proposition 3.4 (Incompleteness) The logic dLh is inherently incomplete, i.e., no sound calculus for dLh can ever be complete.
Proposition 3.5 (Reducibility) The hybrid logic dLh is reducible to dL.
Proof. (Sketch) The proof relies on the key observation that states of dLh can be characterised completely by (quantified) variable assignments. Assume x is the vector of all variables occurring in a formula and i is a vector with fresh variables of the same dimension for each nominal i. With this, a reduction can be achieved using the following replacements for satisfaction operators or propositional occurrences of nominals, respectively:
i ~ i = x
@iψ ~ ⟨x := i⟩ψ
The correspondence now results from assigning to the vector of variables i the values of the vector of variables x at the state labelled by the nominal i.	 
While hybrid reasoning can be emulated in the base logic dL by this result, we argue that a built-in treatment of nominals and satisfaction operators in the dLh calculus is important for practical prover performance. In particular, the simplicity of the reduction in the above proof is lost when the vector notation is expanded.

Related Work.
Chaochen et al. [7] presented a proof system for the duration calculus (DC) ex- tended by durational assertions about mathematical expressions in real-valued time- dependent states and their derivatives. It has no constructive treatment of arith- metic, but only incorporates an oracle, which needs to guess the mathematical conjectures that are needed for proof progress.
R¨onkk¨o et al. [20] presented action systems (inspired by the guarded command language) with differential relations over variables and time-derivatives. To each ac- tion they associate a weakest precondition in higher-order logic with built-in deriva- tives of quantified function symbols. Without providing a means for verification of this higher-order logic, the potential for practical applications is more or less limited

to providing a notational variant of classical mathematics. They primarily focus on refinement and parallel compositions.
Davoren and Nerode [9] presented a Hilbert-style proof system for a modal μ- calculus Lμ. Their actual calculus only has an “opaque” treatment of differential equations, importing them as anonymous atomic actions irrespective of the corre- sponding differential equation or flow. They give a model checking procedure for transition systems of hybrid automata that can be expressed in the quantifier-free theory of real-closed fields. Davoren and Nerode argue for a broader scope of appli- cability of deductive methods, though. They further elaborate on topological issues of hybrid systems expressed in Lμ.
All those approaches have in common that they rely on a semantical treatment of the differential equations determining hybrid evolution instead of incorporating a constructive goal-oriented interface to mathematical problem solving as required for practical verification of hybrid dynamic systems. Further, they do not take into account aspects of compositional reasoning.
Passy and Tinchev [17] presented and analysed a propositional dynamic logic, CPDL, that is extended with nominals and a universal transition relation (this relation is definable in dLh as ∀y ⟨x := y⟩φ, using vector notation x and y as in Proposition 3.5). They also add an intersection operator ∩ on programs. Their extension, CDL, of propositional dynamic logic retains opaque atomic programs and only permits quantification over nominals. Thus CDL is not a first-order dynamic logic and not suitable for verification.
In a series of three papers, Piazza et al. [18] proposed model checking for semial- gebraic hybrid automata in systems biology using quantifier elimination. This work suggests that quantifier elimination is a reasonable choice for handling semialgebraic continuous dynamics.
In [15], Lafferriere et al. presented a subclass of linear hybrid systems where reachability is decidable. Decidability is obtained by combining a bisimulation re- finement algorithm for backward reachability based on quantifier elimination in real arithmetic over {+, −, ·, <, 0, 1} with o-minimality results. Yet, like the HyTech approach [14] to verification of hybrid automata, the philosophy is different in that we focus on investigating a single integrated logic by giving a proof system rather than model checking algorithms for reachability in a separate machine model. Also, tools like HyTech are much more successful in falsification rather than verifica- tion [1], which we intend to improve using a theorem prover approach.

Conclusions and Future Work
We have introduced a hybrid dynamic logic, dLh, as a hybrid variant of the differ- ential dynamic logic dL [19], and we presented a sound sequent calculus for dLh. The design of the logic dLh is guided by the ambition to improve the capabilities of compositional reasoning about (semialgebraic) hybrid dynamic systems.
The hybrid logic dLh extends dL, a dynamic logic with continuous state transi- tions along differential equations [19]. In comparison to dL, the hybrid variant dLh

provides built-in support for system introspection using hybrid satisfaction opera- tors and state-based reasoning with nominals. Both techniques improve its potential for compositional verification.
The dLh calculus combines the ideas underlying the sequent calculus for dL [19] and calculi for hybrid logic [4]. Our calculus provides state-based reasoning, i.e, it exploits nominals to reason about purely abstract symbolic transitions and only expands transitions on demand when necessary for progress. Such a delay is crucial to avoid computationally expensive continuous evolutions that turn out to be of no relevance for the particular verification subgoal during the proof.
In addition to the future work for the base logic dL like operator completion with parallelism, aspects concerning the particular hybrid nature of dLh include investigating the correspondence between deterministic evolutions or assignments (cf. update prefix in [3]) with nominals in the calculus, yielding a theory of struc- tured nominals. Further, unique initial-value problems for continuous evolutions give rise to deterministic state transitions. In dLh, this would result in first-order nominals s(t) that export the time t of evolution as a parameter. Another line of research is on guidance of state-based reasoning rules in automatic theorem provers. In short, we have demonstrated that combining dL with hybrid logic yields a hybrid dynamic logic dLh that is capable of system introspection, and whose calculus
is suitable for state-based reasoning about hybrid dynamic systems.

Acknowledgement
Earlier versions of this work have benefited from discussions with Ernst-Ru¨diger Olderog, Martin Fra¨nzle, Edmund M. Clarke and Bruce H. Krogh. The author also thanks Peter H. Schmitt, Bernhard Beckert and Reiner Ha¨hnle for feedback on a precursory logic, hylo, presented at the KeY symposium 2005.

References
Rajeev Alur. Private communication, Lipari Summer School on Formal Methods, 2005.
Len Bass, Paul Clements, and Rick Kazman. Software architecture in practice. Addison-Wesley Longman Publishing Co., Inc., Boston, MA, USA, 1998.
Bernhard Beckert and Andr´e Platzer. Dynamic logic with non-rigid functions: A basis for object- oriented program verification. In U. Furbach and N. Shankar, editors, Proc., International Joint Conference on Automated Reasoning (IJCAR), volume 4130 of LNCS, pages 266–280. Springer, 2006.

Patrick Blackburn. Internalizing labelled deduction. Journal of Logic and Computation, 10(1):137–168, 2000.
Patrick Blackburn and Maarten Marx. Tableaux for quantified hybrid logic. In Uwe Egly and Christian G. Fermu¨ller, editors, TABLEAUX, volume 2381 of LNCS, pages 38–52. Springer, 2002.
Patrick Blackburn and Jerry Seligman. What are hybrid languages? In M. Kracht, M. de Rijke,
H. Wansing, and M. Zakharyaschev, editors, Advances in Modal Logic, volume 1, pages 41–62. CSLI Publications, Stanford, 1998.
Zhou Chaochen, Anders P. Ravn, and Michael R. Hansen. An extended duration calculus for hybrid real-time systems. In Robert L. Grossman, Anil Nerode, Anders P. Ravn, and Hans Rischel, editors, Hybrid Systems, volume 736 of LNCS, pages 36–59. Springer, 1992.

Werner Damm, Hardi Hungar, and Ernst-Ru¨diger Olderog. Verification of cooperating travel agents.
Int. J. Control, 79(5):395–421, May 2006.
Jennifer M. Davoren and Anil Nerode. Logics for hybrid systems. Proceedings of the IEEE, 88(7):985– 1010, July 2000.
Willem Paul de Roever, Frank S. de Boer, Ulrich Hannemann, Jozef Hooman, Yassine Lakhnech, Mannes Poel, and Job Zwiers. Concurrency Verification: Introduction to Compositional and Noncompositional Methods. Cambridge University Press, 2001.
Johannes Faber and Roland Meyer. Model checking data-dependent real-time properties of the European train control system. In Proc., Formal Methods in Computer Aided Design (FMCAD). IEEE Computer Society Press, 2006.
Melvin Fitting and Richard L. Mendelsohn. First-Order Modal Logic. Kluwer Academic Publishers, Norwell, MA, USA, 1999.
David Harel, Dexter Kozen, and Jerzy Tiuryn. Dynamic logic. MIT Press, 2000.
Thomas A. Henzinger, Pei-Hsin Ho, and Howard Wong-Toi. HyTech: A model checker for hybrid systems. In Orna Grumberg, editor, CAV, volume 1254 of LNCS, pages 460–463. Springer, 1997.
Gerardo Lafferriere, George J. Pappas, and Sergio Yovine. A new class of decidable hybrid systems. In Frits W. Vaandrager and Jan H. van Schuppen, editors, HSCC, volume 1569 of LNCS, pages 137–151. Springer, 1999.
Roland Meyer, Johannes Faber, and Andrey Rybalchenko. Model checking duration calculus: A practical approach. In Kamel Barkaoui, Ana Cavalcanti, and Antonio Cerone, editors, Proc., International Colloquium on Theoretical Aspects of Computing, (ICTAC), volume 4281 of LNCS, pages 332–346. Springer, 2006.
Solomon Passy and Tinko Tinchev. An essay in combinatory dynamic logic. Inf. Comput., 93(2):263– 332, 1991.
Carla Piazza, Marco Antoniotti, Venkatesh Mysore, Alberto Policriti, Franz Winkler, and Bud Mishra. Algorithmic algebraic model checking I: Challenges from systems biology. In Kousha Etessami and Sriram K. Rajamani, editors, CAV, volume 3576 of LNCS, pages 5–19. Springer, 2005.
Andr´e Platzer. Differential logic for reasoning about hybrid systems. Submitted, 2006.
Mauno R¨onkko¨, Anders P. Ravn, and Kaisa Sere. Hybrid action systems. Theor. Comput. Sci., 290(1):937–973, 2003.
Alfred Tarski. A Decision Method for Elementary Algebra and Geometry. University of California Press, Berkeley, 2nd edition, 1951.
