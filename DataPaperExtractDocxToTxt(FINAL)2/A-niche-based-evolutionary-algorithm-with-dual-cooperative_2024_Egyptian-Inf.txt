Egyptian Informatics Journal 25 (2024) 100422








A niche-based evolutionary algorithm with dual cooperative archive for	 solving constrained multi-objective optimization problems
Fengyu Guo a, Hecheng Li b,∗
a School of Computer Science and Technology, Qinghai Normal University, Xining, 810016, China
b School of Mathematics and Statistics, Qinghai Normal University, Xining, 810016, China


A R T I C L E	I N F O	A B S T R A C T

	

Keywords:
Constrained multi-objective optimization Dual stage algorithm
Infeasible individual utilization Niche-based selection method
Constrained multi-objective optimization problems (CMOPs) are commonly encountered in engineering practice. The key to effectively solving these problems lies in achieving a timely balance between convergence, diversity, and feasibility during iterations. Furthermore, the appropriate utilization of infeasible solutions is crucial for identifying potential feasible regions. In order to accomplish this comprehensive objective, we propose a novel dual-stage constrained multi-objective evolutionary algorithm (CMOEA) called NACMOEA in this paper. It can be characterized by the following features: 1) Introducing a novel niche-based individual selection and infeasible solution utilization strategy to enhance convergence, diversity, and feasibility. 2) Presenting a cooperative search strategy assisted by dual archives to approximate the constrained Pareto front (CPF) from both feasible and infeasible perspectives, thereby improving the eﬃciency of obtaining the complete CPF. 3) Designing a new stage switch method based on non-dominant coverage rate to ensure proper completion of search stage switching. Extensive experiments demonstrate that NACMOEA exhibits competitive comprehensive performance when compared with other advanced CMOEAs.





Introduction

CMOPs are widespread in scientific and engineering practice, such as front rail design [6], pressure vessel design [12], etc. To solve such problems normally requires CMOEAs to optimize multiple conflicting objectives with constraint restrictions. A general mathematical expres- sion of CMOPs can be formulated as follows:
minimize  𝐹 (𝐱)= (𝑓1(𝐱), … , 𝑓𝑚(𝐱))𝑇
subject to  𝑔 (𝐱) ≤ 0, 𝑗 = 1, … , 𝑝
the overall constraint violation is defined as:
∑𝑞
Φ(𝐱)=   𝐶𝑉𝑗 (𝐱)	(3)
𝑗=1
is 0; otherwise, it is considered infeasible. To compare the performance a solution is called a feasible solution when its total constraint violation
Given feasible solutions 𝐱 and 𝐲, 𝐱 is said to Pareto dominate 𝐲 (denoted of solutions for CMOPs, we introduce the concept of Pareto dominance. as 𝐱 ≺ 𝐲) if 𝑓𝑘(𝐱) ≤ 𝑓𝑘(𝐲) for all 𝑘 ∈ (1, ..., 𝑚) and 𝑓𝑘(𝐱) < 𝑓𝑘(𝐲) for at

𝑗
ℎ𝑗 (𝐱)= 0, 𝑗 = 𝑝 + 1, … , 𝑞
𝐱 ∈Ω 
(1)
least one 𝑘. A solution is considered Pareto optimal when no other fea-
sible solution dominates it. The set of all Pareto optimal solutions in the
search space is known as the Pareto optimal set (PS). The representation of PS in the objective space forms the Pareto optimal front (PF).

where 𝐱 is a decision variable vector in the search space Ω, 𝐹 (𝐱) is an objective vector with 𝑚 objective function values. 𝑔𝑗 (𝐱)(ℎ𝑗 (𝐱)) are the
𝑗th inequality (equality constraint). The constraint violation of 𝐱 for the
𝑗th constraint can be calculated as follows:
{	{	}
When traditional optimization algorithms are adopted to handle CMOPs, they face computational challenges that the algorithms have to identify the feasible region and keep diversity of individuals for the pur- pose of convergence. In fact, in most of CMOPs, constraints can always
cause the search space infeasible, especially, some tight constraints can

𝐶𝑉 (𝐱)= 
max {0, 𝑔𝑗 (𝐱)
, 𝑗 = 1, … , 𝑝,
(2)
make the feasible region overly narrow and even isolated. As a result,

𝑗	max	|
}
| , 𝑗
|
𝑝 + 1, …
, 𝑞
the algorithm has diﬃculty striking a balance between feasibility and



* Corresponding author.
E-mail addresses: fengyu_guo1990@163.com (F. Guo), lihecheng@qhnu.edu.cn (H. Li).
https://doi.org/10.1016/j.eij.2023.100422
Received 30 September 2023; Received in revised form 9 November 2023; Accepted 20 November 2023
Available online 28 November 2023
1110-8665/© 2023 THE AUTHORS. Published by Elsevier BV on behalf of Faculty of Computers and Artificial Intelligence, Cairo University. This is an open access article under the CC BY-NC-ND license (http://creativecommons.org/licenses/by-nc-nd/4.0/).



convergence, easily getting stuck in a local optimum and failing to lo- cate the full CPF.
A well-established technique for global optimization with great ro- bustness and broad applicability is the multi-objective evolutionary algorithm (MOEA). MOEAs offer a collection of non-dominated approx- imately optimal solutions for multiple conflicting goals. Hence, they can handle complicated situations that are challenging for classical op- timization procedures. In all popular categories of MOEAs, there are three representatives. Dominance-based MOEAs are categorized as the first category, such as NSGA-II [5] and SPEA2 [41]. In the second cate- gory of MOEAs, an objective decomposition scheme is adopted by using Chebyshev’s formula, such as MOEA/D [37] and MOEA/DD [13]. And the third is indicator-based MOEAs such as IBEA [40] and HypE [3]. These MOEAs can effectively handle unconstrained multi-objective op- timization problems, but they have some restrictions when applied to CMOPs, some or even all of the optimal solutions found by these al- gorithms lie in infeasible regions that are invalid for CMOPs. In order to overcome the shortcomings, the research community has developed several different constraint handling techniques (CHTs) to assist MOEAs of this kind to search for optimal feasible solutions. CHTs can be viewed as a selection strategy for handling constraints, which is used to select some infeasible solutions with low constraint violation. These infeasi- ble solutions enable MOEAs to have the ability of crossing infeasible regions and eventually converge to the CPF.
The research on CMOEAs has attracted wide attention in the aca- demic community and has made significant progress in recent years. However, there are still some issues in this field that need to be ad- dressed. The first issue worth considering is how to better balance the algorithm’s convergence, diversity, and feasibility. Due to the influence of constraints, achieving a balance in these characteristics is challenging for CMOEAs. Consequently, the algorithm is prone to getting stuck in a local feasible or optimal region and failing to discover all feasible re- gions, which hinders its convergence towards the CPF or only allows it to find a portion of it. The second problem is how to effectively utilize information from infeasible solutions. Specifically, identifying infeasi- ble solutions located near undiscovered feasible regions can enhance the algorithm’s exploration ability. Additionally, utilizing high-convergence infeasible solutions located near the feasible region can expedite the convergence of feasible individuals.
To address the aforementioned issue, this paper proposes a niche- based two-stage evolutionary algorithm called NACMOEA. This algo- rithm is supported by dual collaborative archives and incorporates a novel strategy for utilizing infeasible solutions. The key characteristics of the proposed approach are outlined below.

The search process of the proposed NACMOEA is divided into two stages, during which a new dual archive collaboration strategy is developed.
A niche-based individual selection and infeasible individual uti- lization strategy is proposed to better balance the convergence, diversity, and feasibility of NACMOEA.
A novel non-dominant coverage rate metric is designed for switch- ing the search stage.
The proposed algorithm exhibits competitive performance com- pared with other advanced algorithms on a large number of com- plex CMOP test problems.

The remainder of the article is organized as follows. In Section 2, we briefly review the recent literature of CMOEAs and introduce the com- mon CHTs. The motivation for this paper is subsequently elicited. The specific mechanisms of the proposed algorithm are described in detail in Section 3, followed by a description of the experimental studies in Section 4. Finally, the conclusions and future work are presented in Section 5.
Background

This section provides a review of existing CMOEAs, with a focus on analyzing CHTs in CMOEAs, comparing the advantages and weaknesses of several common CHTs, and presenting the motivation for this paper.

Literature review

Significant progress has been made in the academic community’s research on CMOP, with various approaches proposed. These include those based on multiple populations, utilization of infeasible solutions, multi-stage strategies, and the balancing of objectives and constraints. The subsequent section presents an overview of representative literature concerning these methodologies.

CMOEAs based on multi-population/archive
The CHT based on a dual-archive set was first presented by C- TAEA [14]. In this approach, the two archive sets have complementary roles to ensure population diversity while promoting population con- vergence and feasibility. In CCMO [30] framework, a dual-population co-evolutionary strategy based on a weak cooperative relationship is provided. In this strategy, two sub-populations evolve independently and share their offspring in their respective environmental selection stages. The dual-population-based evolutionary algorithm proposed in c-DPEA [24] uses an adaptive penalty function to assist evolution using information from infeasible solutions and creates a new ob- jective function to balance population convergence and diversity. In BiCo [15], a bidirectional co-evolutionary strategy is introduced to ap- proximate the CPF from both the feasible and infeasible sides. The CMOCSO [22] framework solves CMOPs through a competition and cooperation mechanism between two swarm optimizers, effectively improving convergence. For constrained many-objective optimization problems, the MOEA/D-DAE [39] framework offers a detection and es- cape mechanism that uses the overall constraint violation rate of change to determine whether the population is trapped in a local optimum. In MFO [10], the constraints of the original CMOP are relaxed to create a simpler auxiliary problem; transferring experience gained from solving this auxiliary problem can be helpful in solving the original problem.

CMOEAs using infeasible solutions
In C-AnEA [33], an angle-based constraint dominance rule and den- sity estimation method are provided, which give the infeasible solutions with excellent convergence a chance to survive. This helps the popula- tion cross the infeasible regions. In ShiP [19], a shift-based penalty is imposed on infeasible solutions, retaining those that do not fall into the region dominated by Locally Feasible Nadir after the shift. Inspired by multi-task evolution, the MTCMO [26] framework uses a highly related dynamic auxiliary task for the complex original problem and designs an improved constraint relaxation method to leverage high-quality infeasi- ble solutions.

CMOEA based on a multi-stage strategy
while the 𝜖-constrained technique-based search is defined as the pull In PPS [8], the unconstrained search is defined as the push stage,
stage. The PPTA [27] framework presents a push-pull search strategy based on the assistance of a dual archive, which effectively improves the performance of PPS. The DTAEA [34] framework suggests a two-phase approach, where the first phase conducts a dual population search based on weak co-evolution and the second phase conducts a feasibility- oriented single population search that drives the population to converge to the final CPF. In DD-CMOEA [25], a dual-stage and dual-population strategy is employed to enhance the search capability of the algorithm by implementing different divisions of labor and collaboration strate- gies for each population in different stages. In FNDS [36], a population partitioning method based on feasible non-dominated solution sets is proposed, which dynamically divides the entire population into three



mutually exclusive subsets and performs different tasks for these sub- sets to guide them towards approaching CPF.

CMOEA based on objective and constraint balancing strategies
In CMOEA-MS [31], a new strategy for evaluating objective func- tions is provided to achieve a better balance between objectives and constraints by assigning different priorities to them. The TOR [20] framework rewrites the original fitness function as a sum of two rank- ings based on CDP and Pareto dominance, controlling the weights through feasible rate to achieve a balance between objectives and con- straints. The CMME [23] framework effectively addresses the issue of decreasing selection pressure on populations as the number of ob- jectives increases by employing two ranking strategies. DPSEA [32]
dynamically adjusts the trade-off between objectives and constraints
violation. The 𝜖-constrained technique overcomes the shortcomings of
CDP to a certain extent, enhancing the exploration ability of CMOEA,
the parameter 𝜖 plays a key role in the search process of CMOEA, too and is widely used in MOEA/D-DAE [39] and I-DBEA [2]. Noting that large 𝜖 can cause infeasible solutions far from the feasible region to be selected, and too small value of 𝜖 possibly causes similar problems as
CDP.

2.2.3. Two-rank fitness method
A new fitness is originally created in TOR [20], where two ranks
𝑅𝑝(𝐱) and 𝑅𝑐 (𝐱) of solution 𝐱 are calculated based on Pareto dominance and CDP, respectively. Then, a new fitness 𝐹 (̂𝐱) is calculated by taking
the weighted sum of these two ranks.

through population size.

Common CHTs
min
𝐹̂(𝐱)= 𝛼𝑅𝑐 (𝐱)+ (1 − 𝛼)𝑅𝑝(𝐱)
𝛼 = 0.5+ 0.5𝑃𝑓
(5)


The MOEA research community has recently attempted to eﬃ- ciently solve CMOPs by combining different MOEAs with multiple types of CHTs. CHTs, which are a crucial technique for handling con- straints, play a particularly critical role in improving the performance of CMOEAs. Some representative CHTs are introduced as follows.

Constraint domination principle (CDP)
CDP is the most representative CHT employed in CMOEAs, which was originally proposed by Deb et al. in NSGA-II [5]. It classifies the population into three categories and assigns a higher selection priority to solutions with high feasibility and excellent convergence. The ben-
apply. Assuming that 𝐱 and 𝐲 are two solutions, we say that 𝐱 con- efit of CDP is that its driving concept is straightforward and simple to strained dominates 𝐲 (denoted by 𝐱 ≺𝐶𝐷𝑃 𝐲) when one of the following
conditions is satisfied.
Φ(𝐱) = 0, Φ(𝐲) ≠ 0;
Φ(𝐱) = 0, Φ(𝐲) = 0, 𝑎𝑛𝑑 𝐱 ≺ 𝐲;
Φ(𝐱) ≠ 0, Φ(𝐲) ≠ 0, 𝑎𝑛𝑑 Φ(𝐱) < Φ(𝐲).
CDP is widely used in CMOEAs, such as NSGA-II [5] and C-NSGA-III [9]. However, due to its preference for feasible solutions, the population can easily get trapped in the local optimum region, thereby ignoring the benefits of infeasible solutions.
𝜖-constrained technique
The 𝜖-constrained technique is another typical CHT that stems from
factor 𝜖. For an infeasible solution 𝐱, if its overall constraint violations a partial improvement of CDP, which introduces a constraint relaxation Φ(𝐱) are less than 𝜖, the solution can still survive, and then these infea-
For two solutions 𝐱 and 𝐲, we say that 𝐱 𝜖-constrained dominates 𝐲 sible solutions are thereby incorporated into the evolutionary process. (denoted by 𝐱 ≺𝜖 𝐲) when one of the following conditions is satisfied.
Φ(𝐱) < 𝜖, Φ(𝐲) < 𝜖, 𝑎𝑛𝑑 𝐱 ≺ 𝐲;
Φ(𝐱) = Φ(𝐲) = 𝜖, 𝑎𝑛𝑑 𝐱 ≺ 𝐲;
Φ(𝐱) > 𝜖, Φ(𝐲) > 𝜖, 𝑎𝑛𝑑 Φ(𝐱) < Φ(𝐲).
An improved strategy to adaptively control 𝜖 is designed in [8], which is formulated as:
{
(1 − 𝜏)𝜀(𝑘 − 1),	if 𝑟𝑘 < 𝛼 
The weight is adaptively controlled by the feasible rate 𝑃𝑓 . However,
when the proportion of feasible solutions is very low, this approach
functions similarly to CDP. Consequently, the algorithm can easily be- come trapped in a local optimum.
The academic community has also recommended some additional CHTs besides the previously mentioned ones. The C3M [28] framework determines the priority of constraints by analyzing the relationship be- tween multiple constraints, and deals with constraints according to their priority. The NRC [16] framework proposed a multi-objective method based CHT, which uses three procedures of non-dominated sorting, re- versed non-dominated sorting, and constrained crowding distance sort- ing to move the population toward to CPF. In MOEA/D-DPF [21], a dynamic penalty function approach is developed to solve CMOPs that is integrated into the MOEA/D framework in which the parameters gradually change with generation number. In TiGE-2 [38], with the aim of achieving the balance of performances, three distinct indicators are developed while considering the convergence, diversity, and fea- sibility. These indicators are then co-optimized using multi-objective techniques.

Motivation

From the literature survey conducted above, it is evident that cur- rent CMOEAs only focus on either the algorithm’s balance scheme or the utilization of infeasible solutions when dealing with CMOPs. How- ever, they fail to effectively combine these two strategies. Furthermore, existing CMOEAs lack the capability to explore extensively within the infeasible region and obtain a comprehensive CPF. Infeasible solutions play a vital role in discovering unexplored feasible regions and enhanc- ing algorithm convergence; however, their potential advantage remains underutilized. Based on the above discussions, we propose employing the following strategies to address the limitations of existing CMOEAs:

A dual archive procedure, consisting of a convergence archive (CA) and a feasibility archive (FA), is established for assignment division and collaboration purposes. The CA retains the UPF discovered by the algorithm, which is utilized to create angle-based niches. These niches are then employed to partition the objective space and de- termine the spatial relationship between individuals. As for FA, it functions as the output population responsible for storing elite so- lutions near the CPF. It employs a niche-based individual updating strategy to strike a balance among convergence, feasibility, and di-
versity objectives.

𝜀(𝑘)= 
𝜀(0)
(1−  𝑘 )𝑐𝑝
𝑇𝑐
,	if 𝑟𝑘 ≥ 𝛼
(4)
The precise utilization of infeasible solutions facilitates the explo- ration of unknown feasible regions and enhances the convergence

where 𝑘 represents the 𝑘th generation, 𝑟𝑘 is the feasible ratio, 𝜏 and 𝛼
respectively. 𝑐𝑝, usually assigned 2, is used to control the speed of re- are two control parameters which are usually assigned 0.05 and 0.95, ducing 𝜖 value in the case of 𝑟𝑘 ≥ 𝛼, and 𝜖(0) is the maximal constraint
of feasible solutions. We strategically pair infeasible solutions with optimal feasibility and feasible solutions with optimal convergence within the same niche, followed by executing a crossover opera- tion for these matched individuals. The resulting offspring exhibit



promising potential to simultaneously improve both solution feasi- bility and convergence.

The algorithm effectively achieves a balance between convergence, diversity, and feasibility while eﬃciently utilizing infeasible solutions. The subsequent section presents a comprehensive account of the pro- posed NACMOEA algorithm.

Algorithm 1: Framework of NACMOEA.

Input: population size: 𝑁 ; maximum generation: 𝐺𝑚 ; non-dominant coverage threshold: 𝐶𝑡 ; generation gap: 𝐺𝑝 ;
Output: 𝐹𝐴
1 𝑡 ← 1, 𝑠𝑡𝑎𝑔𝑒 ← 1;
2 𝑃 ← Random initialize {𝐱1, 𝐱2, ..., 𝐱𝑁 } ;
3 𝐶𝐴, 𝐹𝐴 ← 𝑃 ;
4 while 𝑡 ≤ 𝐺𝑚 do
5	if 𝑡 > 𝐺𝑝 then
 𝐶 ← nondominant coverage of 𝑃 by Equation (6) ; 
if 𝐶 ≥ 𝐶𝑡 &𝑠𝑡𝑎𝑔𝑒 == 1 then
 𝑠𝑡𝑎𝑔𝑒 ← 2 ;
if 𝑠𝑡𝑎𝑔𝑒==1 then
𝑂𝑝 ← Select mating parents from 𝑃 and generate 𝑁 offspring ;
𝑃 ← EnvironmentalSelection([𝑃 , 𝑂𝑝 ], 𝑁, 𝑠𝑡𝑎𝑔𝑒) ;
𝐶𝐴 ← UpdateCA([𝐶𝐴, 𝑃 ], 𝑁 ) ;
𝐹𝐴 ← UpdateFA([𝐹𝐴, 𝑃 ], 𝑁 , 𝑠𝑡𝑎𝑔𝑒) ;
𝑡 ← 𝑡 +1 ;
15	if 𝑠𝑡𝑎𝑔𝑒==2 then
𝑂𝑝 ← Select mating parents from 𝑃 and generate 𝑁 offspring ;
𝑂𝑓𝑎 ← Select mating parents from 𝐹𝐴 and generate 𝑁 ∕2 offspring ;
𝑂𝑟 ← using InfeasibleUtilization(𝐶𝐴, 𝐹𝐴, 𝑃, 𝑁 ) Select mating parents from 𝑃 and 𝐹𝐴 and generate 𝑁 ∕2 offspring ;
𝑂𝑡 ← 𝑂𝑝 ∪ 𝑂𝑓𝑎 ∪ 𝑂𝑟 ;
𝑃 ← EnvironmentalSelection([𝑃 , 𝑂𝑝 ], 𝑁 , 𝑠𝑡𝑎𝑔𝑒) ;
𝐹𝐴 ← UpdateFA(𝐶𝐴, [𝐹𝐴, 𝑂𝑡 ], 𝑁 , 𝑠𝑡𝑎𝑔𝑒) ;
𝑡 ← 𝑡 +2 ;
return 𝐹𝐴 ;



Our approach

This section provides a detailed introduction to the framework and various algorithm components of NACMOEA.

Framework of NACMOEA

the generation counter 𝑡 and search stage are set to 1. The popula- The framework of NACMOEA is shown in Algorithm 1. Initially, tion 𝑃 is randomly initialized with 𝑁 individuals. Subsequently, 𝐶𝐴 and 𝐹𝐴 are initialized by 𝑃 . The algorithm starts from stage one,
and the subsequent steps are iterated until the termination condition is met. Initially, to determine if the algorithm reaches a stable state, we
compute the non-dominant coverage rate 𝐶 of the current population
using Equation (6). If this metric surpasses a predefined threshold 𝐶𝑡 ,
which is described later. The 𝜖-constrained technique-based environ-
to form the next generation 𝑃 . With the aim of discovering the com- mental selection is implemented on the combined offspring population
for updating 𝐹𝐴. In each iteration of stage two, since a total of 2𝑁 in- plete CPF, a niche-based environmental selection strategy is employed
dividuals are generated and evaluated, resulting in an increase of 2 for
𝑡 in each iteration. At the end of iteration, 𝐹𝐴 is outputted as the final
CPF found by NACMOEA.
Note that our proposed framework employs a unique two-stage search strategy, distinct from existing approaches. In the convergence- oriented search stage, constraints are not entirely ignored but rather assigned a small weight. Consequently, feasible solutions with good convergence have the potential to be retained, facilitating the explo- ration of the optimal feasible region for the problem. Similarly, in the feasibility-oriented search stage, convergence is not completely ne- glected but also given less emphasis. At this juncture, infeasible so- lutions with good convergence and low constraint violation may be preserved. Since these solutions are located near the feasible region and closer to the ideal point, they have the potential to improve the convergence of feasible solutions.

Decision of search stage

Switching between search stages is crucial because the proposed NACMOEA employs different search strategies during each stage. As the main population approaches the UPF and reaches a steady state, NACMOEA switches its focus to finding the CPF. Previous algorithms used metrics based on representative points like ideal and nadir points to reflect evolutionary state, but this strategy has a disadvantage in that nadir points are unstable and can change with each generation, leading to inaccurate estimations of evolutionary state. In this paper, we intro- duce a non-dominant coverage rate-based metric that overcomes these shortcomings.
The main idea of our proposed metric is that, according to the definition of Pareto dominance, when the population evolves into a steady state, the majority of individuals will become non-dominated and evenly distributed on the PF. Therefore, by comparing the domi-
nance relationship between the current generation (𝑡) population and
its previous generation (𝑡 − 𝐺𝑝 ), if a larger proportion of individuals in
𝑡 are non-dominated compared to those in 𝑡 − 𝐺𝑝 , it indicates that the
𝑡 generation population has already converged to the PF and achieved
a steady state. Conversely, if there still exist some dominance relation-
ships between individuals in both populations, it suggests that further search should be continued as the evolution of the population has not yet stagnated at this stage. Our proposed metric has better stability com- pared to the metric based on representative points, but it also incurs a relatively higher computational cost due to the introduction of non- dominated sorting. The metric is shown as follows:
|{𝑎 ∈ 𝑃 𝑡 ∣ ∀𝑏 ∈ 𝑃 𝑡−𝐺𝑝 , 𝑎 ⊁ 𝑏}|

the algorithm proceeds to stage two. In stage one, NACMOEA under- takes a convergence-oriented search to derive the UPF. A tournament
𝐶 = |	|
|𝑃 𝑡|
(6)

selection is performed on 𝑃 to select elite parents, and the simulated bi-
on selected parents to generate 𝑁 offspring 𝑂𝑝 . The next generation nary crossover operator and polynomial mutation operator are applied
ronmental selection on combined 𝑃 and 𝑂𝑝 . The 𝐶𝐴 and 𝐹𝐴 employ population is then generated by performing convergence-oriented envi-
the convergence-oriented and feasibility-oriented update strategy, re- spectively, to collect solutions that are close to the UPF and solutions near the optimal feasible region. In stage two, NACMOEA aims to ap-
selecting parents from 𝑃 , 𝑁 Offspring 𝑂𝑝 are generated. Since individ- proximate the complete CPF from both feasible and infeasible sides. By uals in 𝐹𝐴 are located inside or near the optimal feasible region, their generated offspring can further explore the feasible region, so 𝑁 ∕2 off- spring 𝑂𝐹𝐴 are generated by the elite parents from 𝐹𝐴. Another 𝑁 ∕2
offspring are generated using the infeasible solution utilization strategy,
where 𝑃 𝑡 is the current 𝑡th generation population, 𝑃 𝑡−𝐺𝑝 is the (𝑡 −
𝐺𝑝)th historical generation population. When this metric is higher than the predefined threshold 𝐶𝑡 , it indicates that more than 𝐶𝑡% individuals
ical populations, implying that the 𝑡th generation population has been in the current population are non-dominated with respect to the histor- improved slightly when compared to the (𝑡 − 𝐺𝑝)th generation. Hence,
a stage switch should be executed.

Environmental selection

generation population for the main population 𝑃 . The fitness function In this paper, environmental selection is employed to select the next
used in this paper is defined as fellow, which is the same as that in SPEA2 [41].

∑
𝐹𝑖𝑡(𝐱)=	∣ 𝑅
∣+ 	1	
(7)


Algorithm 3: UpdateCA.

𝐲
𝐲∈𝑆𝐱
𝑑𝑖𝑠𝑡(𝐱, 𝐱′)+2 
Input: archive: 𝐶𝐴; current population: 𝑃 ; population size: 𝑁

where 𝑅𝐱 is the set of solutions dominated by the solution 𝐱 and 𝑆𝐱
Output: updated archive: 𝐶𝐴

is the set of solutions dominating the solution 𝐱. 𝐱′ denotes the
√
⌊ 2𝑛⌋
1 𝑃𝑡 ← 𝐶𝐴 ∪ 𝑃 ;
2 𝐹𝑖𝑡𝑡 ← Fitness of 𝑃𝑡 by Equation (7) based on Pareto dominance ;

nearest neighbor to 𝐱. The first part of Equation (7) denotes the total number of individuals dominated by the individual dominating 𝐱 in the
solution set, and the second√part is the inverse of the Euclidean distance
between 𝐱 and its nearest	𝑛⌋ neighbor 𝐱′. A smaller 𝐹 𝑖𝑡(𝐱) indicates
3 𝑆𝑐 ← index of solutions which 𝐹𝑖𝑡𝑡 < 1 ;
4 if ∣ 𝑆𝑐 ∣< 𝑁 then
5	𝑅 ← sort 𝐹𝑖𝑡𝑡 ;
6	𝑆𝑐 ← 𝑅(1 ∶ 𝑁 ) ;

the better quality of 𝐱, and when 𝐹𝑖𝑡(𝐱) < 1, it means 𝐱 is nondominant. According to the above discussion, 𝐹𝑖𝑡(𝐱) is determined by the dom-
7 if ∣ 𝑆𝑐 ∣> 𝑁 then
8	𝑆𝑐 ← use truncation method to select 𝑁 solutions from 𝑆𝑐 ;
9 𝐶𝐴 ← 𝑃 (𝑆 ) ;

inance relationship between 𝐱 and other individuals in the population,
𝑡  𝑐

so the 𝐹𝑖𝑡(𝐱) changes with different dominance rules. Since the search goal of 𝑃 changes with search stage, the fitness function needs to be re-
formulated to realize the switch of search goal. Inspired by TOR [20], the switch of search goal can be achieved by assigning different weight to the rank-based fitness. Specifically, the dominance relationship of population is determined by Pareto dominance and CDP, respectively, and then the fitness is calculated by Equation (7), respectively. Sorting
these two fitness values yields the rank-based fitness 𝑅𝑝(𝐱) and 𝑅𝑐 (𝐱),
where 𝑅𝑝(𝐱) represents the rank of 𝐱 in population based on Pareto dominance. Similarly, 𝑅𝑐 (𝐱) represents the rank of 𝐱 based on CDP. Fi- nally, by assigning different weight to 𝑅𝑝(𝐱) and 𝑅𝑐 (𝐱), the final fitness
𝐹𝑖𝑡𝑟(𝐱) is given below:
𝐹𝑖𝑡 (𝐱)= 𝛼 ∗ 𝑅 (𝐱)+ (1 − 𝛼)∗ 𝑅 (𝐱)	(8)
10 return 𝐶𝐴;



solutions with the 𝐹𝑖𝑡 < 1 is equal to 𝑁 , these solutions are directly selected for updating 𝐶𝐴.
Update strategy of 𝐹𝐴

Algorithm 4: UpdateFA: stage 1.
Input: archive: 𝐹𝐴; current population: 𝑃 ; population size: 𝑁 ;
Output: updated archive: 𝐹𝐴;
1 𝑃𝑡 ← 𝐹𝐴 ∪ 𝑃 ;
𝐹𝑖𝑡𝑡 ← Calculate the Fitness of 𝑃𝑡 by Equation (7) based on CDP ;
𝑆𝑐 ← index of solutions which 𝐹𝑖𝑡𝑡 < 1 ;
if ∣ 𝑆𝑐 ∣< 𝑁 then

𝑟	𝑝	𝑐
5	𝑅 ← sort 𝐹𝑖𝑡𝑡 ;

As shown in Equation (8), 𝐹𝑖𝑡𝑟(𝐱) is calculated by the sum of 𝑅𝑐 (𝐱) and 𝑅𝑝(𝐱) with different weights, respectively. In stage one, 𝛼 is set to 0.9 and 𝐹𝑖𝑡𝑟(𝐱) mainly consists of 𝑅𝑝(𝐱). The algorithm executes convergence-oriented search with a weight of 0.1 for 𝑅𝑐 (𝐱), while fea-
sible solutions with good convergence are still likely to be retained, these feasible solutions can help for finding the optimal feasible re-
gions. In stage two, 𝛼 is set to 0.1 and 𝐹𝑖𝑡𝑟(𝐱) mainly consists of 𝑅𝑐 (𝐱).
for 𝑅𝑝(𝐱), during which infeasible solutions with low constraint viola- The algorithm executes feasibility-oriented search with a weight of 0.1
tion and good convergence may be selected, which can help improve the convergence of the population. The pseudo code of environmental selection is shown in Algorithm 2.

Algorithm 2: EnvironmentalSelection.
Input: temp population: 𝑃𝑡 ; pop size: 𝑁 ; search stage: 𝑠𝑡𝑎𝑔𝑒
Output: next generation population: 𝑃
𝐹𝑖𝑡𝑝 ← Calculate the Fitness of 𝑃𝑡 by Equation (7) based on Pareto dominance ;
𝐹𝑖𝑡𝑐 ← Calculate the Fitness of 𝑃𝑡 by Equation (7) based on CDP ;
𝑅𝑝 ← sort 𝐹𝑖𝑡𝑝 ;
6	𝑆𝑐 ← 𝑃𝑡 (𝑅(1 ∶ 𝑁 )) ;
7 if ∣ 𝑆𝑐 ∣> 𝑁 then
 𝑆𝑐 ← use truncation method select 𝑁 solutions from 𝑆𝑐 ;
𝐹𝐴 ← 𝑃𝑡 (𝑆𝑐 ) ;
return FA ;


In the stage one, 𝐹𝐴 collects highly feasible solutions obtained during the evolutionary process. Subsequently, in the stage two, 𝐹𝐴
conducts a localized search around these solutions discovered in the initial stage, progressively approaching the CPF from the feasible side.
The update strategy of 𝐹𝐴 in stage one is similar to that of Algorithm 3
with the only difference being step 2 (line 2), where the fitness of 𝑃𝑡 is
calculated using CDP instead of Pareto dominance.
In stage two, 𝐹𝐴 employs a niche-based update strategy designed
to generate an angle-based niche and select individuals within it to
preserve adequate diversity and suﬃcient selection pressure. Only one solution is chosen in each niche. To establish the angle-based niche, we first need to compute the angle between solutions situated on the UPF, which is expressed as follows:

𝑅𝑐 ← sort 𝐹𝑖𝑡𝑐 ;
if 𝑠𝑡𝑎𝑔𝑒==1 then
6	𝛼=0.9 ;
else
(
𝐴𝑛𝑔𝑙𝑒(𝐱, 𝐲)= 𝑎𝑟𝑐𝑐𝑜𝑠
	𝐹 (𝐱)∙ 𝐹 (𝐲)	 )
‖𝐹 (𝐱)‖2 ⋅ ‖𝐹 (𝐲)‖2
(9)

 𝛼=0.1 ;
𝐹𝑖𝑡𝑟 ← calculate the rank-based Fitness by Equation (8) ; 
𝑅 ← sort 𝐹𝑖𝑡𝑟 ;
𝑃 ← select solutions of 𝑅(1 ∶ 𝑁 ) from 𝑃𝑡 ;
return 𝑃 ;
Equation (9) calculates the angle between two solutions 𝐱 and 𝐲 in the objective space, where 𝐹 (𝐱) ∙ 𝐹 (𝐲) represents the inner product of solutions 𝐱 and 𝐲. The niche size determines the number and location of
solutions falling into it, which has a significant impact on the selection

		pressure and diversity. In order to provide suﬃcient selection pressure
for evolution and ensure diversity, the niche size 𝐴𝑛 is adaptively set

Update strategy of 𝐶𝐴
to the maximum angle between individuals in 𝐶𝐴, which is shown as
follows:

In stage one, the UPF found by the main population is preserved via
𝐶𝐴, while in stage two, 𝐶𝐴 is not updated, and is used to generate
𝐴 ={  𝑚𝑎𝑥
𝐱,𝐲∈𝐶𝐴,𝐱≠𝐲
𝐴𝑛𝑔𝑙𝑒(𝐱, 𝐲)}	(10)

niches. The update strategy for 𝐶𝐴 is shown in Algorithm 3. Initially,
the original 𝐶𝐴 is merged with the current population 𝑃 to build a tem- porary population 𝑃𝑡 and its fitness 𝐹𝑖𝑡𝑡 is calculated. When the number of solutions with the 𝐹𝑖𝑡𝑡 < 1 is less than 𝑁 , the first 𝑁 solutions are se-
when the angle between a candidate solution 𝐲 and a given solution 𝐱 on UPF is smaller than the 𝐴𝑛 , 𝐲 is considered to be located within the niche of 𝐱. 𝜃𝐜𝐩(𝑡) represents the set of solutions 𝑃 located within the niche of 𝑡th solution in 𝐶𝐴, i.e., 𝐱𝑐 . The equation as shown below:

lected in descending order according to their fitness. When the number	{	}

of solutions with the 𝐹𝑖𝑡𝑡 < 1 is greater than 𝑁 , the ∣ 𝑆𝑐 ∣ −𝑁 solutions
are truncated according to the crowding degree. When the number of
𝜃𝑐𝑝(𝑡)= 
𝐲 ∈ 𝑃 ∣ 𝐴𝑛𝑔𝑙𝑒(𝐱𝑐 , 𝐲) < 𝐴𝑛
𝐱𝑐 ∈𝐶𝐴  𝑡
(11)


plores the feasible region in this approximation direction. The selected individuals in this iteration are illustrated in Fig. 1(b). The pseudo code
for updating strategy of 𝐹𝐴 in stage two is presented in Algorithm 5.

Algorithm 5: UpdateFA: stage 2.
Input: archive: 𝐶𝐴, 𝐹𝐴; offspring: 𝑂; population size: 𝑁 ; search stage: 𝑠𝑡𝑎𝑔𝑒
Output: updated archive: 𝐹𝐴;
1 𝐴𝑐𝑎 ← 𝐴𝑛𝑔𝑙𝑒 (𝐱, 𝐲) ;
𝐱,𝐲∈𝐶𝐴,𝐱≠𝐲
𝐴𝑛 ← the maximum element of 𝐴𝑐𝑎 by Equation (10);
𝑃 ← 𝐹𝐴 ∪ 𝑂𝑡 ;
𝐴𝑐𝑝 ← 𝐴𝑛𝑔𝑙𝑒 (𝐱, 𝐲) ;
𝐱∈𝐶𝐴,𝐲∈𝑃
𝜃𝑐𝑝 ← solutions in 𝑃 located within the niche of 𝐶𝐴 by Equation (11) ; 
foreach 𝑖 = 1, 2, … , 𝑁 do
7	if ∣ 𝜃𝑐𝑝(𝑖) ∣= 1 then
8	 𝐹𝐴(𝑖) ← 𝜃𝑐𝑝(𝑖) ;
9	if ∣ 𝜃𝑐𝑝(𝑖) ∣> 1 then
10	𝐹𝐴(𝑖) ← 𝑎𝑟𝑔𝑚𝑖𝑛 𝐹𝑖𝑡𝑐 (𝐱) ;
𝐱∈𝜃𝑐𝑝 (𝑖)
11	if ∣ 𝜃𝑐𝑝(𝑖) ∣= 0 then
12	𝐜𝟏, 𝐜𝟐 ← 𝑎𝑟𝑔𝑚𝑖𝑛 𝐴𝑛𝑔𝑙𝑒(𝐱𝑖 ∈ 𝐶𝐴 ∣ 𝐱𝑖, 𝐜) ;
𝐜∈𝑃
13	𝐹𝐴(𝑖) ← 𝑎𝑟𝑔𝑚𝑖𝑛 𝐹𝑖𝑡𝑐 (𝐱)
𝐱∈{𝐜𝟏,𝐜𝟐}
14 return 𝐹𝐴 ;

Infeasible solution utilization













Fig. 1. Illustration of the update strategy of FA in stage 2.
To provide further clarification on the update strategy of 𝐹𝐴 in stage two, we present the main concept in Fig. 1. As depicted in
𝑐
In order to explore more viable regions and enhance the conver- gence of existing feasible solutions, a niche-based strategy for utilizing
population 𝑃 undergoes 𝜖-constrained environment selection, gradu- infeasible solutions is adopted in stage two. In this strategy, the main ally approaching CPF from the infeasible side. Meanwhile, 𝐹𝐴 updates
itself based on feasibility priority, approaching CPF from the feasible side. Niches are employed to determine the positional relationship be- tween feasible and infeasible solutions within the same approximation direction. This allows for matching a feasible solution with optimal con- vergence to an infeasible solution with the lowest CV within the same niche. Subsequently, an offspring generation operator is applied to these matched solutions, generating offspring that have potential for explor- ing unknown feasible regions and improving the convergence of feasible solutions.
Fig. 2. As shown in Fig. 2(a), since 𝐹𝐴 is a feasibility-oriented archive, The mechanism of the infeasible solution utilization is illustrated in
solutions within 𝐹𝐴, denoted as 𝑥𝑓 , are mostly located within feasible

Fig. 1(a), 𝐱𝑡 represents the UPF identified by 𝐶𝐴 during stage one,
in 𝐶𝐴 is computed using Equation (9), with the maximum value being which is utilized for niche creation. The angle between two solutions
region. Conversely, solutions	𝑖 main population 𝑃 , denoted as 𝑥𝑝
are located in infeasible region, approaching CPF from infeasible side.
Similar to the update strategy of 𝐹𝐴 in stage two, the solutions 𝐱𝑐 in

assigned as the niche size 𝐴𝑛 . Subsequently, based on Equation (11),
𝐱𝑝 denotes candidate solutions that are allocated into distinct niches.
𝐶𝐴
𝑖
are used to create angle-based niches, with a maximum angle be-

𝑖	𝑐	𝑝
tween 𝐱𝑐 set as niche size 𝐴𝑛 . Afterwards, 𝐱𝑝 have been assigned to

For instance, the angle between 𝐱1 and 𝐱1 is smaller than 𝐴𝑛 , indi-	𝑖	𝑖	𝑐

cating that 𝐱𝑝 is positioned within the niche of 𝐱𝑐 . Consequently, we
distinct niches based on their angular relationships with respect to 𝐱𝑖 .

1	1	We denote 𝜃𝑐𝑝(𝑡) as the collection of 𝐱𝑝 within the niche of 𝐱𝑐 , where

define 𝜃𝑐𝑝(1) as a set containing only 𝐱𝑝. Similarly, for 𝜃𝑐𝑝(2), it remains
𝑐	𝑖	𝑝	𝑝	𝑡

1	𝑝
𝑝  𝑝
for instance, if the angle between 𝐱3 and both 𝐱4 and 𝐱5 is smaller than

empty. However, for 𝜃𝑐𝑝(3), it comprises of the elements: {𝐱4 , 𝐱5 , 𝐱6 }
𝐴𝑛 , then we have 𝜃𝑐𝑝(3) = {𝐱𝑝, 𝐱𝑝}. Similarly, we define 𝜃𝑐𝑓 (𝑡) as the

and so forth. The selection is conducted on each niche to update 𝐹𝐴,
considering the number of individuals located within the same niche,
there are three cases: In case one, where only one solution is located
within the niche (e.g., 𝜃𝑐𝑝(1) = {𝐱𝑝}. Regardless of its feasibility, it is
4	5
collection of vectors from 𝐹𝐴 that fall within the niche of vector 𝐱𝑡 ,
Given our objective to select suitable paired parents from both 𝑃 and thereby characterizing the set of feasible solutions for a given context.

chosen for updating 𝐹𝐴
1
𝐱𝑝
𝐹𝐴 for offspring generation, there are two cases in which a parent can

. This is because 1 retains diversity informa-
tion as an isolated individual, which may contribute to enhancing the
ist within a single niche (e.g., 𝜃𝑐𝑝(3) = {𝐱𝑝, 𝐱𝑝, 𝐱𝑝}), a feasibility priority integrity of the CPF. In case two, when multiple candidate solutions ex-
for updating 𝐹𝐴. Therefore, 𝑥𝑝 is selected. For case three, there exist no selection is employed. The best individual within the niche is selected solutions within the niche, such as when 𝜃𝑐𝑝(2) = ∅. As the 𝐹𝐴 serves as
a feasibility-orientated archive, we choose two individuals with angles
be selected from 𝐹𝐴. For case one, multiple solutions exist within the niche of 𝑥𝑐 . Given that 𝐹𝐴 prioritizes feasibility, enhancing conver-
gence becomes crucial as a majority of its individuals are feasible. The parent is selected based on the minimal sum of objective vectors since it can roughly indicate the convergence for feasible solutions in the same
niche. For instance, consider the niche of 𝑥𝑐 , where 𝜃𝑐𝑓 (4) = {𝑥𝑓 , 𝑥𝑓 }.
As the sum of objective vectors for 𝑥𝑓 is lower than that of 𝑥𝑓 , 𝐹𝐴 se-

closest to 𝐱
5	6
, denoted as 𝐱𝑝 and 𝐱𝑝. Among them, we select the one	𝑓

𝑐2
2	𝑝3
lects 𝑥5 as the parent in this niche. In case two, no solution from 𝐹𝐴

with the best feasibility, namely 𝐱3 , to ensure that the algorithm ex-
exists within the niche of 𝑥𝑐 , and thus, the individual in 𝐹𝐴 with the



Algorithm 6: InfeasibleUtilization.
Input: archive: 𝐶𝐴; archive: 𝐹𝐴; main population: 𝑃 ; population size: 𝑁
Output: paired solutions: 𝑁𝑜𝐹 , 𝑁𝑜𝑃
1 𝐴𝑐𝑎 ← 𝐴𝑛𝑔𝑙𝑒 (𝐱, 𝐲) ;
𝐱,𝐲∈𝐶𝐴,𝐱≠𝐲
𝐴𝑛 ← the 𝑁 th element of 𝐴𝑐𝑎 by Equation (10);
𝐴𝑐𝑝 ← 𝐴𝑛𝑔𝑙𝑒 (𝐱, 𝐲) ;
𝐱∈𝐶𝐴,𝐲∈𝑃
𝐴𝑐𝑓 ← 𝐴𝑛𝑔𝑙𝑒 (𝐱, 𝐲) ;
𝐱∈𝐶𝐴,𝐲∈𝐹𝐴
𝜃𝑐𝑝 ← solutions of 𝑃 located within the niche of 𝐶𝐴 by Equation (11) ; 
𝜃𝑐𝑓 ← solutions of 𝐹𝐴 located within the niche of 𝐶𝐴 by Equation (11) ; 
foreach 𝑖 = 1, 2, … , 𝑁 do

8	if ∣ 𝜃𝑐𝑓 (𝑖) ∣≥ 1 then
9	𝑁𝑜𝐹 (𝑖) ← 𝑎𝑟𝑔𝑚𝑖𝑛
𝐱∈𝜃𝑐𝑓 (𝑖)
10	if ∣ 𝜃𝑐𝑓 (𝑖) ∣= 0 then
∑𝑚
𝑖=1
𝑓𝑖 (𝐱) ;

11	𝑁𝑜𝐹 (𝑖) ← 𝑎𝑟𝑔𝑚𝑖𝑛 𝐴𝑛𝑔𝑙𝑒(𝐱𝑐 , 𝐱) ;

𝐱∈𝐹𝐴
12	if ∣ 𝜃𝑐𝑝(𝑖) ∣≥ 1 then
13	𝑁𝑜𝑃 (𝑖) ← 𝑎𝑟𝑔𝑚𝑖𝑛
𝐱∈𝜃𝑐𝑝 (𝑖)
14	if ∣ 𝜃𝑐𝑝(𝑖) ∣= 0 then
𝑖
Φ(𝐱) ;

15	𝑁𝑜𝑃 (𝑖) ← 𝑎𝑟𝑔𝑚𝑖𝑛 𝐴𝑛𝑔𝑙𝑒(𝐱𝑐 , 𝐱) ;
𝐱∈𝑃	𝑖
16 return 𝑁𝑜𝐹 , 𝑁𝑜𝑃
jective space. To strike a balance between algorithm performance and exploration of more feasible regions, we propose a method of niche-based environment selection and utilization of infeasible solu- tions. Specifically, the functionality of niche-based environment se- lection and infeasible solution utilization can be summarized as fol- lows:










Fig. 2. Illustration of the infeasible solution utilization strategy.

smallest angle to 𝑥𝑐 is chosen. This operation is designed to ensure the exploration of CPF in the approximate direction of 𝑥𝑐 . Taking the niche of 𝑥𝑐 as an illustrative example, it can be observed that there exists no solution of 𝐹𝐴 within the niche. Consequently, the individual closest to this niche, denoted as 𝑥𝑓 , is selected.
The parent selection strategy for individuals in 𝑃 follows a similar
als of 𝑃 exist within the same niche. Since 𝑃 evolves from the UPF concept, with the only distinction being that when multiple individu-
and approaches the CPF from an infeasible side, it primarily comprises infeasible individuals with excellent convergence. Consequently, it is preferable to choose an individual with lower constraint violation as
instance, considering the niche of 𝐱𝑐 , where 𝜃𝑐𝑝(4) = {𝑥𝑝, 𝑥𝑝} and 𝑥𝑝 a mating parent to generate offspring with improved feasibility. For exhibits a lower constraint violation	to 𝑥𝑝, we	𝑥𝑝. matched parents from 𝐹𝐴 and 𝑃 are illustrated in Fig. 2(b). Please refer
to Algorithm 6 for the corresponding pseudo code.

Further discussion

In this article, the niche technique is introduced to provide valu- able insights into population evolution. By employing angle-based niches, we can identify small regions in the objective space that share similar directions, thereby facilitating the partitioning of the population based on these regions. Individuals assigned to the same niche can be considered as exploring similar directions in the ob-
In the stage 2 update strategy of 𝐹𝐴, a niche-based environmental
selection strategy is employed to choose candidate feasible individ-
uals. This approach aims at selecting the most feasible individual within a niche where candidate individuals congregate, thereby enhancing the overall feasibility of the population. In instances where niches are sparsely populated with candidates, this strategy ensures exploration in an approximate direction by selecting the individual closest to that trajectory, thus augmenting population diversity.
In the utilization strategy of infeasible solutions, angle-based niches are employed to provide directional information. Feasible and in- feasible solutions that lie approximately in the same direction are paired together for generating offspring individuals. These off- spring individuals possess the potential to explore the CPF along this approximate direction, thereby enhancing both convergence and diversity of feasible solutions and facilitating the attainment of a complete CPF.

As mentioned above, angle-based niche can preserve diversity in- formation and provide reasonable selection pressure for the envi- ronmental selection, which is crucial for balancing the convergence, diversity, and feasibility of the population. In addition, it can also provide positional information for utilizing infeasible solutions and guide the population to explore unknown CPF, which is partic- ularly important for improving the overall performance of NAC- MOEA.

Experimental setup

In this section, we initially provide an overview of the experimen- t’s various components, including benchmark problems, performance metrics, parameter settings, and advanced CMOEAs for comparison. Subsequently, we employ the proposed algorithm to address distinct CMOPs and contrast the statistical results with other advanced CMOEAs to assess the performance of our proposed method.



Benchmark suits and CMOEAs for comparison

Two well-known benchmark suits MW [18] and LIR-CMOP [7] were chosen as test problem for the empirical study. MW notable for its close approximation to the real CMOPs and extensive coverage of dif- ferent problem types, while LIR-CMOPs stand out due to their large infeasible region and significant diﬃculty in solving. To evaluate the performance of NACOMEA, two typical CMOEAs, C-NSGAII-CDP [5] and C-MOEA/D [9], and five advanced CMOEAs, CMOEA-MS [31], C- TAEA [14], ToP [17], DC-NSGAIII [11], TiGE-2 [38] were selected for
peer comparison. All experiments in this paper were conducted using PlatEMO [35].

Performance metrics

In this section, two comprehensive performance evaluation met- rics, namely inverted generational distance (IGD) [4] and hypervolume (HV) [42], are introduced to compare the performance of the proposed algorithm with that of existing advanced algorithms.

IGD mainly evaluates the convergence and diversity performance of the algorithm by calculating the average of the minimum dis-
solution set obtained by the algorithm. Suppose 𝑃𝐹 is the real tance sum between each point on the real Pareto front and the Pareto front of the problem and 𝑃𝐹∗ is the Pareto front found
by the algorithm, the IGD of proposed algorithm is calculated as follows:
of function evaluations 𝑀𝑎𝑥𝐹 𝐸 is set to 200000 for LIR-CMOP bench- in all CMOEAs is set to 10. For a fair comparison. The maximal number
mark suite, and 80000 for MW benchmark suite. All CMOEAs apply these settings for a fair comparison, the other parameter settings of all CMOEAs in comparison are the same as suggested in their correspond- ing original articles.
The parameters for the 𝜖-constrained technique in NACMOEA are as
follows. 𝜏 is 0.05; 𝛼 is 0.95; 𝑇𝑐 is (0.9 ∗ 𝑀𝑎𝑥𝐹 𝐸)∕𝑁 and 𝑐𝑝 is 2.
generation gap 𝐺𝑝 is 20; the coverage rate threshold 𝐶𝑡 is 0.95. The parameters for compute the search stage are set as follows. The
The aforementioned parameter configurations remained constant throughout the experimental procedure.
Each algorithm runs 30 times independently on each test function, and the mean and standard deviation of IGD and HV values are pre- sented in corresponding tables. In particular, the best results are high- lighted in boldface. To have a statistically sound conclusion, we use the
Wilcoxon’s rank sum test at a significant level of 5% to validate the
significance of the better performance achieved by the proposed NAC-
MOEA with respect to the other compared algorithms.

4.4. Analysis of experimental results

In this section, the performance of NACMOEA is compared with other eight elite CMOEAs mentioned earlier on LIR-CMOP and MW benchmark CMOPs.
Comparisons on LIR-CMOP suite: There are a total of 14 CMOPs

∑
𝐱∈𝑃𝐹
𝑑𝑒𝑑
(𝐱, 𝑃𝐹 ∗)
within the LIR-CMOP benchmark suite. The experimental results based
on the IGD are presented in Table 1. The analysis reveals that NAC-

𝐼𝐺𝐷 =
where 𝑑
𝑒𝑑
∣ 𝑃𝐹 ∣	(12)
(𝐱, 𝑃𝐹∗) represents the minimum Euclidean distance be-
∗
MOEA demonstrates the most superior performance on 9 test problems. In comparison, CMOEA-MS and DCNSGAIII exhibit exceptional perfor- mance on 3 and 2 test problems, respectively. However, C-MOEA/D,

tween 𝐱 and 𝑃𝐹 . The smaller IGD value indicates the better per-
formance of the algorithm.
HV assesses the comprehensive performance of the algorithm by determining the hypervolume value of the space enclosed by the non-dominated solution set and the reference point. The HV of a solution set can be calculated as follows:
∣𝑆∣
𝐻𝑉 = 𝜆( ∪ 𝑣𝑖)	(13)
𝑖=1
where 𝜆 represents the Lebesgue measure, 𝑣𝑖 denotes the hyper-
lution, and 𝑆 is the non-dominated solution set. The larger HV volume formed by the reference point and the non-dominated so-
indicates the better comprehensive performance of the algorithm.

It is necessary to adequately sample the true PF of test problem for calculating IGD. According to the approach of [29], about 10000 sample
of the output population is set to (1, ..., 1), and the point (1.1 ∗ 𝑧𝑛𝑎𝑑 ) is points are sampled on the real PF. To calculate HV, the reference point
used to normalize the objective values.

Parameter setting

DE operator is used to generate offspring in PPS [8], while genetic operator is used in all other compared CMOEAs.
Simulated binary crossover (SBX) [1] and polynomial mutation (PM) [5] are used as the genetic operator for CMOEAs that use genetic operator as the evolutionary operator, with the following parameter set- tings:
Crossover probability 𝑝𝑐 =1 and distribution index 𝜂𝑐 = 20.
Mutation probability 𝑝𝑚 = 1∕𝑛 and distribution index 𝜂𝑚 = 20.

rameters 𝐶𝑅 and 𝐹 in DE operator are set to 1 and 0.5, respectively. For CMOEAs which adopt DE as the evolutionary operator, the pa- The population size 𝑁 is set to 100. The number of decision variable 𝐷
C-NSGAII-CDP, C-TAEA, ToP, and TiGE2 failed to achieve the best results on any of the test problems. To be explicit, the proposed NAC- MOEA demonstrates best performance on LIR-CMOP1-LIR-CMOP6, LIR- CMOP8, and LIR-CMOP10-LIR-CMOP11, indicating that NACMOEA is effective in addressing scenarios where UPF and CPF are separated and the feasible region is narrow (LIR-CMOP1-LIR-CMOP4). In instance that the feasible region is obstructed by a large area of infeasible region (LIR-CMOP5-LIR-CMOP6, LIR-CMOP8), NACMOEA is also capable of
crossing through a multitude of infeasible regions and reaching the CPF. Furthermore, NACMOEA can cope with cases where CPF and UPF partially overlap and the feasible region is narrow and isolated (LIR-CMOP10-LIR-CMOP11). Table 2 displays the HV result of eight compared CMOEAs on LIR-CMOP1-LIR-CMOP14. As illustrated, NAC- MOEA exhibits its superior performance on eight CMOPs and competi- tive against the other two CMOPs.
Fig. 3 illustrates the populations with the median IGD obtained from the eight CMOEAs on LIR-CMOP11, whose feasible region is isolated and narrow. It can be discerned that some solutions of C-MOEA/D, C-TAEA, and TiGE-2 fail to converge to the CPF, demonstrating insuﬃ- cient convergence capability. While the populations of C-NSGAII-CDP, CMOEA-MS, and ToP fail to maintain good diversity, which results in the failure to obtain a complete CPF. The populations of DCNSGAIII and NACMOEA exhibit an optimal balance between convergence, diversity, and feasibility, with all solutions within these populations traversing the infeasible region, thus achieving the complete CPF.
MW benchmark suite comparisons: The MW benchmark suite con- tains a total of 14 CMOPs. Table 3 presents the experimental results of NACMOEA and other advanced CMOEAs on the MW based on IGD. The proposed NACMOEA demonstrates superior performance in terms of MW and attains the most favorable outcomes across 6 test problems. Meanwhile, C-TAEA excels in 5 test problem solutions. Both CMOEA-MS and DCNSGAIII exhibit equivalent eﬃciency on a single test problem. However, C-NSGAII-CDP, ToP, and TiGE-2 fail to achieve optimal re- sults in any test problems.






Table 1
Statistical results of IGD obtained by C-MOEA/D, C-NSGAII-CDP, C-TAEA, CMOEA-MS, DCNSGAIII, TOP, TiGE2 and the proposed NACMOEA on the LIR-CMOP benchmark suite. Best result in each row is highlighted.


Table 2
Statistical results of HV obtained by C-MOEA/D, C-NSGAII-CDP, C-TAEA, CMOEA-MS, DCNSGAIII, TOP, TiGE2 and the proposed NACMOEA on the LIR-CMOP benchmark suite. Best result in each row is highlighted.

F. Guo and H. Li	Egyptian Informatics Journal 25 (2024) 100422


Fig. 3. Populations with median IGD obtained by C-MOEA/D, C-NSGAII-CDP, C-TAEA, CMOEA-MS, DCNSGAIII, MOEA/D-DAE, TOP, TiGE2 and the proposed NACMOEA on the LIR-CMOP11.


Fig. 4. Populations with median IGD obtained by C-MOEA/D, C-NSGAII-CDP, C-TAEA, CMOEA-MS, DCNSGAIII, MOEA/D-DAE, TOP, TiGE2 and the proposed NACMOEA on the MW5.


The rationale behind this phenomenon lies in the adoption of a feasibility-oriented search strategy by C-NSGAII-CDP and ToP, which excessively prioritizes constraint satisfaction at the expense of main- taining diversity during the search process. The convergence speed of TiGE-2 is relatively slow, with most individuals failing to converge near the CPF within an equivalent number of function evaluations. The feasible region of the MW test set is primarily characterized by dis- connected or narrow traits, which makes it easy for CMOEA to get trapped into local feasible regions. NACMOEA exhibits superior per- formance on MW1, MW5, MW7, MW9, and MW11-MW12. Specifically, both MW1 and MW11 present a disconnected geometry of CPF. The fea- sible regions of MW5 and MW7 are connected; however, their CPFs are
situated along narrow boundaries of the feasible region, posing a signif- icant challenge to obtain. On the other hand, the CPF and UPF of both MW9 and MW12 are entirely separate. By effectively handling such complex CMOPs through the utilization of infeasible solutions, NAC- MOEA demonstrates its eﬃcacy. Table 4 showcases the hypervolume (HV) results obtained by NACMOEA as well as eight other CMOEAs for comparison purposes on the aforementioned CMOPs within the context of this study. Overall, our proposed NACMOEA outperforms all oth- ers on six CMOPs while remaining competitive on the remaining four CMOPs.
Fig. 4 illustrates the experimental results of the eight CMOEAs on the MW5 problem, where the CPF of MW5 is discrete and located at the end


10





Table 3
Statistical results of IGD obtained by C-MOEA/D, C-NSGAII-CDP, C-TAEA, CMOEA-MS, DCNSGAIII, MOEA/D-DAE, TOP, TiGE2 and the proposed NACMOEA on the MW benchmark suite. Best result in each row is highlighted.


Table 4
Statistical results of HV obtained by C-MOEA/D, C-NSGAII-CDP, C-TAEA, CMOEA-MS, DCNSGAIII, MOEA/D-DAE, TOP, TiGE2 and the proposed NACMOEA on the MW benchmark suite. Best result in each row is highlighted.

Table 5
Statistical results of IGD obtained by NACMOEA-ARC, NACMOEA-IF and the original NACMOEA on the MW benchmark suite. Best result in each row is highlighted.

















  +/-/≈	0/13/1	1/4/9	


of the narrow tunnel-like feasible region, which requires a high diver- sity of the population. The convergence of C-MOEA/D, C-TAEA, TiGE-2, and ToP is insuﬃcient, with a significant number of solutions failing to converge near the CPF. The absence of diversity in C-NSGAII-CDP and DCNSGAIII leads to a partial loss of CPF. Our proposed NACMOEA demonstrates exceptional performance in both convergence and diver- sity, effectively handling complex feasible region cases.
Eﬀectiveness of each component in NACMOEA: To evaluate the eﬃcacy of components within the NACMOEA, ablation studies are con- ducted in this section. The original NACMOEA and its two variant versions are compared on the MW benchmark suite. The first vari- ant, NACMOEA-ARC, excludes the dual archive cooperation mechanism present in the original NACMOEA and employs only the main popula- tion for evolution. It is important to note that as this variant does not utilize the archive for infeasible solutions, the associated module is also omitted. The second variant, NACMOEA-IF, retains the dual archive co- operation mechanism but eliminates the infeasible solutions utilization mechanism.
The experimental outcomes of NACMOEA and its variants based on IGD are presented in Table 5. A comparison reveals that NACMOEA out- performs the first variant, NACMOEA-ARC, on the majority of test prob- lems. This is attributed to the fact that NACMOEA-ARC has eliminated the dual archive cooperation mechanism and infeasible solution uti- lization strategy, resulting in a considerable performance degradation. The underlying architecture of NACMOEA-ARC is a straightforward two-stage algorithm. The second variant, NACMOEA-IF, demonstrates a comparable performance to NACMOEA on six test problems. This is attributed to the partial or complete overlap between the CPF and UPF of these test problems. For instance, there is a partial overlap between CPF and UPF for MW1, MW6, and MW8. The CPF and UPF for MW10 and MW13 are highly similar, and the CPF of MW14 completely over- laps with the UPF. Given the negligible or non-existent gap between UPF and CPF in the objective space, the proposed infeasible solution utilization strategy is ineffective, resulting in NACMOEA-IF exhibiting approximately the same performance as NACMOEA on these types of test problems. However, the performance of NACMOEA-IF is inferior to NACMOEA for test problems with a distinct separation between CPF and UPF, such as MW3, MW9, and MW12, thereby demonstrating the eﬃcacy of the proposed infeasible solution utilization strategy.

Conclusions

In this paper, we propose a novel two-stage CMOEA called NAC- MOEA to address the challenging CMOPs with intricate feasible regions. The algorithm’s core concept involves dividing the search process into two stages: convergence-oriented search and feasibility-oriented search.
At different stages of the search, dual archives perform distinct roles and collaborate effectively. The transition between these stages is de- termined by evaluating the non-dominant coverage rate metric, which accurately reflects the dominance relationship of the current genera- tion population compared to its history counterparts. In stage one, our proposed approach can rapidly converge to UPF since the influence of constraints is relatively weak. At this stage, the obtained UPF is saved
by 𝐶𝐴, while 𝐹𝐴 collects the elite individuals that are clustered around
the feasible side, 𝐹𝐴 employs a niche-based feasibility priority select the optimal feasible region. In stage two, to approach the CPF from strategy, whereas the population utilizes an 𝜖-constrained technique
cial niche information is provided by 𝐶𝐴. Furthermore, a niche-based to approximate the CPF from the infeasible side. In this process, cru-
strategy for utilizing infeasible solutions is established to enhance con- vergence speed towards CPF from both feasible and infeasible sides.
In the experimental section, we compare the proposed algorithm with seven other advanced CMOEAs on a total of 28 test problems from the LIR-CMOP and MW test sets. These test problems encompass vari- ous forms of feasible regions, effectively validating the performance of CMOEA across different types of CMOPs. The statistical results demon- strate that NACMOEA outperforms the compared algorithms in terms of overall performance. To further validate the effectiveness of com- ponents in NACMOEA, we compare two variants with the original NACMOEA using MW suite. The experimental findings reveal that in- corporating a dual archive cooperation mechanism and an infeasible solution utilization strategy significantly enhance the performance of NACMOEA.
Through an analysis of the limitations of existing CMOEAs, this pa- per proposes a multi-stage framework based on the niche technique. This study substantiates the significance of a balanced strategy encom- passing convergence, feasibility, and diversity. Furthermore, it unveils the potential of infeasible solutions in exploring unknown feasible re- gions and enhancing algorithm performance. While the proposed algo- rithm exhibits promising results in experiments, there is scope for ex- tending its application to tackle more challenging CMOPs. For instance, improvements can be made to environment selection and archive up- date strategies while augmenting selection pressure to address many- objective constrained optimization problems. Additionally, embedding multi-modal optimization techniques could prove beneficial for solving constrained multi-modal multi-objective optimization problems.

CRediT authorship contribution statement

Fengyu Guo: Conceptualization, Methodology, Software, Writing – original draft. Hecheng Li: Supervision, Writing – review & editing.

Declaration of competing interest

The authors declare that they have no known competing financial interests or personal relationships that could have appeared to influence the work reported in this paper.

Acknowledgement

This work is supported by the National Natural Science Foundation of China (No. 61966030).

References

Agrawal RB, Deb K, Agrawal RB. Simulated binary crossover for continuous search space. Complex Syst 1994;9:115–48.
Asafuddoula M, Ray T, Sarker R. A decomposition-based evolutionary algorithm for many objective optimization. IEEE Trans Evol Comput 2015;19:445–60.
Bader J, Zitzler E. HypE: an algorithm for fast hypervolume-based many- objective optimization. Evol Comput 2011;19:45–76. https://doi.org/10.1162/ EVCO_a_00009.
Bosman PAN, Thierens D. The balance between proximity and diversity in multiob- jective evolutionary algorithms. IEEE Trans Evol Comput 2003;7(2):174–88.
Deb K, Pratap A, Agarwal S, Meyarivan T. A fast and elitist multiobjective genetic algorithm: NSGA-II. IEEE Trans Evol Comput 2002;6:182–97.
Fan L, Tatsuo Y, Tao X, Lin Y, Liu H. A novel hybrid algorithm for solving mul- tiobjective optimization problems with engineering applications. Math Probl Eng 2018;2018:1–15.
Fan Z, Li W, Cai X, Huang H, Fang Y, You Y, et al. An improved epsilon constraint- handling method in MOEA/D for CMOPs with large infeasible regions. Soft Comput 2019.
Fan Z, Li W, Cai X, Li H, Wei C, Zhang Q, et al. Push and pull search for solving constrained multi-objective optimization problems. Swarm Evol Com- put 2019;44:665–79. https://doi.org/10.1016/j.swevo.2018.08.017. https://www. sciencedirect.com/science/article/pii/S2210650218300233.
Jain H, Deb K. An evolutionary many-objective optimization algorithm using reference-point based nondominated sorting approach, part II: handling constraints and extending to an adaptive approach. IEEE Trans Evol Comput 2014;18:602–22.
Jiao R, Xue B, Zhang M. A multiform optimization framework for constrained mul- tiobjective optimization. IEEE Trans Cybern 2022:1–13. https://doi.org/10.1109/ TCYB.2022.3178132.
Jiao R, Zeng S, Li C, Yang S, Ong YS. Handling constrained many-objective optimiza- tion problems via problem transformation. IEEE Trans Cybern 2021;51:4834–47. https://doi.org/10.1109/TCYB.2020.3031642.
Kannan BK, Kramer SN. An augmented Lagrange multiplier based method for mixed integer discrete continuous optimization and its applications to mechanical design. Trans ASME J Mech Des 1994;116:405–11.
Li Ke, Deb Kalyanmoy. An evolutionary many-objective optimization algorithm based on dominance and decomposition. IEEE Trans Evol Comput 2014.
Li K, Chen R, Fu G, Yao X. Two-archive evolutionary algorithm for constrained multiobjective optimization. IEEE Trans Evol Comput 2019;23:303–15. https://doi. org/10.1109/TEVC.2018.2855411.
Liu Z, Wang B, Tang K. Handling constrained multiobjective optimization problems via bidirectional coevolution. IEEE Trans Cybern 2021.
Liu ZZ, Qin Y, Song W, Zhang J, Li K. Multiobjective-based constraint-handling tech- nique for evolutionary constrained multiobjective optimization: a new perspective. IEEE Trans Evol Comput 2022:1. https://doi.org/10.1109/TEVC.2022.3194729.
Liu ZZ, Wang Y. Handling constrained multiobjective optimization problems with constraints in both the decision and objective spaces. IEEE Trans Evol Comput 2019:1.
Ma Z, Wang Y. Evolutionary constrained multiobjective optimization: test suite con- struction and performance comparisons. IEEE Trans Evol Comput 2019:1.
Ma Z, Wang Y. Shift-based penalty for evolutionary constrained multiobjective op- timization and its application. IEEE Trans Cybern 2023;53:18–30. https://doi.org/ 10.1109/TCYB.2021.3069814.
Ma Z, Wang Y, Song W. A new fitness function with two rankings for evolu- tionary constrained multiobjective optimization. IEEE Trans Syst Man Cybern Syst 2021;51:5005–16. https://doi.org/10.1109/TSMC.2019.2943973.
Maldonado HM, Zapotecas-Martínez S. A dynamic penalty function within MOEA/D for constrained multi-objective optimization problems. In: IEEE congress on evolu- tionary computation; 2021.
Ming F, Gong W, Li D, Wang L, Gao L. A competitive and cooperative swarm optimizer for constrained multi-objective optimization problems. IEEE Trans Evol Comput 2022:1. https://doi.org/10.1109/TEVC.2022.3199775.
Ming F, Gong W, Wang L, Gao L. A constrained many-objective optimization evolu- tionary algorithm with enhanced mating and environmental selections. IEEE Trans Cybern 2022:1–13. https://doi.org/10.1109/TCYB.2022.3151793.
Ming M, Trivedi A, Wang R, Srinivasan D, Zhang T. A dual-population-based evo- lutionary algorithm for constrained multiobjective optimization. IEEE Trans Evol Comput 2021;25:739–53. https://doi.org/10.1109/TEVC.2021.3066301.
Ming M, Wang R, Ishibuchi H, Zhang T. A novel dual-stage dual-population evo- lutionary algorithm for constrained multiobjective optimization. IEEE Trans Evol Comput 2022;26:1129–43. https://doi.org/10.1109/TEVC.2021.3131124.
Qiao K, Yu K, Qu B, Liang J, Song H, Yue C, et al. Dynamic auxiliary task-based evolutionary multitasking for constrained multi-objective optimization. IEEE Trans Evol Comput 2022:1. https://doi.org/10.1109/TEVC.2022.3175065.
Qin C, Ming F, Gong W, Gu Q. Constrained multi-objective optimization via two archives assisted push–pull evolutionary algorithm. Swarm Evol Com- put 2022;75:101178. https://doi.org/10.1016/j.swevo.2022.101178. https://www. sciencedirect.com/science/article/pii/S2210650222001456.
Sun R, Zou J, Liu Y, Yang S, Zheng J. A multi-stage algorithm for solving multi- objective optimization problems with multi-constraints. IEEE Trans Evol Comput 2022:1. https://doi.org/10.1109/TEVC.2022.3224600.
Tian Y, Cheng R, Zhang X, Su Y, Jin Y. A strengthened dominance relation consider- ing convergence and diversity for evolutionary many-objective optimization. IEEE Trans Evol Comput 2018.
Tian Y, Zhang T, Xiao J, Zhang X, Jin Y. A coevolutionary framework for constrained multiobjective optimization problems. IEEE Trans Evol Comput 2021;25:102–16. https://doi.org/10.1109/TEVC.2020.3004012.
Tian Y, Zhang Y, Su Y, Zhang X, Tan KC, Jin Y. Balancing objective optimization and constraint satisfaction in constrained evolutionary multiobjective optimization. IEEE Trans Cybern 2022;52:9559–72. https://doi.org/10.1109/TCYB.2020.3021138.
Wang BC, Shui ZY, Feng Y, Ma Z. Evolutionary algorithm with dynamic population size for constrained multiobjective optimization. Swarm Evol Com- put 2022;73:101104. https://doi.org/10.1016/j.swevo.2022.101104. https://www. sciencedirect.com/science/article/pii/S2210650222000748.
Wang C, Xu R. An angle based evolutionary algorithm with infeasibil- ity information for constrained many-objective optimization. Appl Soft Com- put 2020;86:105911. https://doi.org/10.1016/j.asoc.2019.105911. https://www. sciencedirect.com/science/article/pii/S1568494619306921.
Wang Y, Liu Y, Zou J, Zheng J, Yang S. A novel two-phase evolutionary algo- rithm for solving constrained multi-objective optimization problems. Swarm Evol Comput 2022;75:101166. https://doi.org/10.1016/j.swevo.2022.101166. https:// www.sciencedirect.com/science/article/pii/S2210650222001341.
Ye T, Ran C, Zhang X, Jin Y. PlatEMO: a Matlab platform for evolutionary multi- objective optimization. IEEE Comput Intell Mag 2017;12:73–87.
Zhang K, Xu Z, Yen GG, Zhang L. Two-stage multi-objective evolution strategy for constrained multi-objective optimization. IEEE Trans Evol Comput 2022:1. https:// doi.org/10.1109/TEVC.2022.3202723.
Zhang Q, Hui L. MOEA/D: a multiobjective evolutionary algorithm based on decom- position. IEEE Trans Evol Comput 2008;11:712–31.
Zhou Y, Min Z, Wang J, Zhang Z, Zhang J. Tri-goal evolution framework for con- strained many-objective optimization. IEEE Trans Syst Man Cybern Syst 2018.
Zhu Q, Zhang Q, Lin Q. A constrained multiobjective evolutionary algorithm with detect-and-escape strategy. IEEE Trans Evol Comput 2020;24:938–47. https://doi. org/10.1109/TEVC.2020.2981949.
Zitzler E, Künzli S. Indicator-based selection in multiobjective search. In: 8th inter- national conference on parallel problem solving from nature; 2004.
Zitzler E, Laumanns M, Thiele L. SPEA2: improving the strength Pareto evolutionary algorithm. Technical Report Gloriastrasse. 2001.
Zitzler E, Thiele L. Multiobjective evolutionary algorithms: a comparative case study and the strength Pareto approach. IEEE Trans Evol Comput 1999;3:257–71.
