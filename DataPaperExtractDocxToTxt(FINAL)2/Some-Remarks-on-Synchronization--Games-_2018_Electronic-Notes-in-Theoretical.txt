Available online at www.sciencedirect.com


Electronic Notes in Theoretical Computer Science 339 (2018) 85–97
www.elsevier.com/locate/entcs

Some Remarks on Synchronization, Games and Planar Automata
Juan Andres Montoya 1,2 Christian Nolasco3
Departamento de Matem´aticas Universidad Nacional de Colombia Bogot´a, Colombia


Abstract
We study synchronization games on planar automata. We prove that recognizing the planar games that can be won by the synchronizer is a co-NP hard problem. We prove some additional results indicating that planar games are as hard as nonplanar games. Those results amount to show that planar automata are representative of the intricacies of automata synchronization.
Keywords: Synchronizing automaton, synchronization games, Cˇerny’s Conjecture.


Introduction
This work is related to the synchronization of deterministic finite state automata (DFAs, for short). We study synchronization games (see [2]) that are played on planar automata.
Recall that a DFA is a triple M = (QM, ΣM,δM) such that:
QM is a finite set, the set of internal states of automaton M.
ΣM is a finite alphabet, the input alphabet of M.
δM is the transition function of M, which is a function from ΣM × QM to QM.

Let M = (QM, ΣM,δM) be a DFA. We use the symbol Σ∗
to denote the set of

finite strings over the alphabet ΣM. The function δ^M : Σ∗
× QM → QM, defined



1 The first author would like to thank the financial support provided by Universidad Nacional de Colombia, Hermes research program, code number 8943 (32083).
2 Email: jamontoyaa@unal.edu.co
3 Email: cnolascos@unal.edu.co

https://doi.org/10.1016/j.entcs.2018.06.006
1571-0661/© 2018 The Author(s). Published by Elsevier B.V.
This is an open access article under the CC BY-NC-ND license (http://creativecommons.org/licenses/by-nc-nd/4.0/).

by the equation:


δ^M (w1...wn, q)= δM wn, δ^M (w1...wn−1, q) ,

determines the state that is reached when automaton M scans the string w1...wn,
beginning in the state q.
We say that an automaton M is synchronizing, if and only if, there exists a

synchronizing string w ∈ Σ∗
, such that for all p, q ∈ QM, the equality
δ^M (w, p)= δ^M (w, q)

holds.
There are many works related to the above notion (see [6] for an account). Most of those works are focused on the study of short synchronizing strings.
Let M be a n-state synchronizing automaton, and let w be a shortest synchronizing string for M, it is easy to prove that |w|∈ O n3 , where |w| denotes the length of w. Cˇerny conjectured that |w|≤ (n − 1)2, it is the famous Cˇerny’s Conjecture.(see [6]). A related notion is the notion of subset synchronization. Given an automaton M, and given q1, ..., qk ∈ QM, a synchronizing string for those k states, is a string
w, such that for all i, j ≤ k, the equality
δ^M (w, qi)= δ^M (w, qj)
holds.
We are specially interested in subset synchronization. Therefore, we decided to investigate the novel concept of subset synchronization games, focussing on planar automata.

Organization of the work, contributions and relations to previous work. This work is organized into three sections.	In section 1 we introduce the synchronization games that we want to study, and we show that some other games that were previously studied in the literature, as for example accessibility games (see [3]), are special cases of synchronization. In section 2 we study the length of optimal playing strategies, focussing on pair synchronization games. We prove a quadratic upper bound, and we prove that this quadratic bound is optimal. To achieve the later result we exhibit a sequence of pair-synchronization games which cannot be won by the synchronizer faster than the given bound. We observe that the constructed sequence is planar, and then we ask if planar automata are the complexity core of synchronization games. In section 3 we investigate subset synchronization games played on planar non-synchronizing automata. We prove that it is co-NP hard to recognize the planar games for which the synchronizer has a winning strategy, and we also prove that the longest possible games are played
on planar automata.


This work is related to the investigations on
Cˇerny’s Conjecture (see [6] and

the references therein). We have chosen to investigate the novel notion of synchronization games introduced in [2]. There are some previous works that study synchronization of automata from the point of view of game theory: The aforementioned work of Fominykh et al [2] define a new class of accessibility games related to synchronization, while Gonze and Jungers use game theoretical techniques to study the synchronizing time of automata [3].  We generalize the notion of synchronization games, and this generalization allow us to study accessibility games (see [3]) as a special case of our games. Then, we focus on synchronization games played on planar automata. We decided to focus on the later type of automata given that we have showed before that this special class of automata is representative of the intricacies of synchronization [4]
Synchronization games
Volkov et al [2] introduced a class of combinatorial games on automata that is related to synchronization.
Definition 2.1 A synchronization game is given by a triple (M, Sc, Sp), such that:
M is a synchronizing automaton, say M = (Q, Σ, δ) .
Sc, Sp ⊆ Σ.
The game is played by two contenders, the synchronizer and the spoiler. The rules of the game estate that at odd rounds the synchronizer must choose a character from Sc, while at even rounds the spoiler must choose a character from Sp. The goal of the synchronizer is to produce (in despite of the spoiler choices) a synchronizing string for M. The aim of the spoiler is to avoid synchronization.
We say that game (M, Sc, Sp) is standard, if and only if, the equalities Sc = Sp = Σ hold. We say that M is winnable, if and only if, the synchronizer has a winning strategy for the standard game (M, Σ, Σ) . Volkov et al showed that there exist synchronizing automata that are not winnable [2]. Examples of the later type
of automata are Cˇerny automata [2]. It is natural to ask: Which are the winnable
automata?
Definition 2.2 A subset synchronization game is given by a 4-tuple (M, Sc, Sp, A), such that:
M = (Q, Σ, δ) is a synchronizing automaton.
Sc, Sp ⊆ Σ.
A ⊂ Q.
The goal of the synchronizer is to synchronize the set A.
Volkov et al [2] proved that an automaton M is winnable, if and only if, the synchronizer has winning strategies for the synchronization games in the set
{(M, Σ, Σ, {p, q}): p, q ∈ Q} .

Therefore, we say that reduction to pairs holds true for synchronization games 4 . It can also be proved (see below) that the synchronizer has a winning strategy for the game (M, Sc, Sp), if and only if, he has a winning strategy for each one of the games in the set
{(M, Sc, Sp, {p, q}): p, q ∈ Q} ,
and it means that reduction to pairs also holds for non-standard games. We use the term pair-synchronization games to refer the games of the form (M, Sc, Sp, {p, q}) . Reduction to pairs yields a polynomial time algorithm for the recognition of the games that are won by the synchronizer, as well as a cubic upperbound on the length of his optimal strategies. The later upperbound follows from the fact that optimal
strategies for pair synchronization games have quadratic length. (see below).
It is important to remark that the investigation on synchronization games can have important applications. We would like to notice that many different combi- natorial games can be represented as special cases of synchronization games. It is the case with the accessibility games studied by Gurevich et al [3]. An accessibility game is given by a triple (G, v, A), where G is a finite digraph, v is a node of G and A is a set of nodes. The game is played by two contenders that we call Alice and Bob. At the beginning of the game a token is placed on node v. Alice chooses an outgoing edge, say (v, u) ∈ E (G) , and the token is moved along this edge to be placed on node u. Then, Bob chooses an edge going out from u, and moves the token consistently. The game continues in this way, Alice playing at odd rounds and Bob playing at even rounds. The goal of Alice is to place the token on a node included in the set A.
Suppose that G is a regular digraph of degree k, that is: Suppose that the outdegree of the nodes of G is equal to k. Given v ∈ G, one can randomly choose a linear ordering of the edges going out from v. Doing so is the same as labelling those outgoing edges with the letters {1, ..., k} . It can be done simultaneously for all the nodes of G. We observe that if one labels all the edges of G according to the later procedure, he gets an automaton MG. Suppose we have constructed such an automaton. Then, we can add a new node s. Given an edge (v, a) such that a ∈ A, we replace this edge by a new edge (v, s), and we attach to (v, s) the label that was attached to (v, a) . Moreover, given i ≤ k, we add a loop (s, s) with label k. We notice that winning the game (G, v, A) is the same as winning the standard game (NG, {1, ..., k} , {1, ..., k} , {v, s}) . Thus, the accessibility game (G, v, A) is correctly represented by the later pair synchronization game.
Now suppose that G is not regular, and let k be the maximum outdegree of the nodes of G. Given v ∈ G, if deg+ (v) < k, we add a node sv and we add k − deg+ (v) edges directed from v to sv. Moreover, we attach k loops to node sv. If we do the later for all the nodes of G, we get a regular digraph H. We observe that the game (G, v, A) is the same as the game (H, v, A). Thus, we can conclude that accessibility games are suitably represented by standard synchronization games.

4 Recall that an automaton M is synchronizing, if and only if, all its pairs can be synchronized. It implies, among other things, that if one wants to synchronize the states of M, he can choose to synchronize the pairs one by one in a sequential fashion.

Notice that standard synchronization games can be represented by accessibility games. Let (M, Σ, Σ, A) be a standard subset synchronization game, and let k =
|A| . The k-tuple automaton M(k) = (Qk, Σ, δk) is the automaton given by:
Suppose that Q is the set of states of M, then Qk = {C ⊆ Q : |C|≤ k} .
The input alphabet of M(k) is the same as the input alphabet of M.
Function δk is defined by
δk (C, b)= {δ (q, b): q ∈ C} .

Let S be the set {C ∈ Qk : |C| = 1}, and let G be the underlying digraph of
M(k). It is easy to check that the synchronization game (M, Σ, Σ, A) is the same as the accessibility game (G, A, S) . Thus, we can conclude that the important class of accessibility games studied by Gurevich et al [3] is the same as the class of standard subset synchronization games.
Remark 2.3 It seems that subset synchronization games can be used to represent a wide variety of games, and it also seems that the claimed versatility of those games comes from the possibility of playing nonstandard games.

On the length of optimal playing strategies
Given A ⊆ Q, we use the symbol δ (A, w) to denote the set
 p ∈ Q : ∃a ∈ A δ^(a, w)= p , .

Consider a game (M, Sc, Sp). The synchronizer can choose to play in the fol- lowing way:
He picks a pair p, q ∈ Q, and he plays the game (M, Sc, Sp, {p, q}).
Suppose the synchronizer wins the game (M, Sc, Sp, {p, q}), and suppose that w1...wm is the ordered sequence of characters that were chosen by the two con- tenders along this game. Then, the synchronizer picks r, s ∈ δ (Q, w), and he plays the game (M, Sc, Sp, {r, s}) . He continues playing in this way until all the states get synchronized.
It follows that if the synchronizer has a winning strategy for all the pair- synchronization games, then he has a winning strategy for the game (M, Sc, Sp) . Moreover, if m is an upperbound on the length of the optimal strategies for all the pair-synchronization games that can be played on M, then m · (|Q|− 1) is an upperbound on the length of an optimal strategy for the game (M, Sc, Sp) . Then,
if m ∈ O |Q|2	we get that optimal playing strategies have cubic length.
Theorem 3.1 Let M be a n-state synchronizing automaton, if the synchronizer has a winning strategy for the game (M, Sc, Sp, {p, q}), then he has a winning strategy

⎛ n ⎞
whose length is upperbounded by 2 ·	.
2
Proof. Suppose that the synchronizer has a winning strategy for the game (M, Sc, Sp, {p, q}), and suppose that he plays optimally. Let
A = C1, ..., CM
be the sequence of unordered pairs (configurations) that are visited along the game,
n

and suppose that M > 2 ·
2
⎠. Then, there exists two odd integers i < j such

that Ci = Cj and |Ci| = 2. If the synchronizer is playing optimally, and in despite of this he produces a loop, then the spoiler is forcing this loop. The spoiler can force this loop infinite many times, and the synchronizer has not a winning strategy (contradiction). The later contradiction indicates that the synchronizer wins the
n

game in less than 2 ·
2
⎠ + 1 steps provided he plays optimally.
⎛ n ⎞

It is natural to ask if the quadratic bound 2 ·
2
⎠ is optimal. We prove that

it is the case, we construct a sequence of pair synchronization games such that the synchronizer has a winning strategy for those games, but such that the length of an
n

optimal playing strategy for the n-th game in the sequence is equal to 2·
2
⎛ n ⎞
⎠−1.2

Theorem 3.2 The upperbound 2 ·
2
⎠ is optimal.

Proof. We	construct	a	sequence	{(Cn, Scn, Spn, {pn, qn})}n≥2	of	pair- synchronization games.	 The synchronizer has a winning strategy for all the
n
games in the sequence, but he requires time 2 · ⎝	⎠ to win the game

(Cn, Scn, Spn, {pn, qn}) . First, we define the automata in the set {Cn : n ≥ 2} . Let
n be a fixed positive integer.
Automaton Cn = (Qn, {a, b, c} , δn) .
Qn = {0, 1, ..., n − 1} .
The transition function δn is defined by:
Letter a labels a directed cycle 0 → 1 → · · · → n − 1 → 0. Letter b labels the set of edges
{(i, i): i /= 0}∪ {(0, 1)} ,

while letter c labels the set of loops
{(i, i): i = 0, 1, ..., n − 1} .

The graphic below corresponds to the transition digraph of automaton Cn.
We observe that if we restrict the alphabet to the set {a, b}, automaton Cn becomes equal to the n-th Cˇerny automaton. Recall that all the Cˇerny automata are synchronizing, and take into account that Cˇerny automata are not winnable. The later fact indicates that we cannot choose Sc = Sp = Σ. We want to make the work of the synchronizer becomes as easy as possible, then we set Sp = {c} , and Sc = {a, b} . Thus, the spoiler is restricted to play the neutral character c, and it means that he cannot stop the synchronizing work that is being done by the synchronizer.
We set pn = 1 and qn = [ n |. If the Synchronizer wants to play optimally he
2	n }
to it. Let w1...wm be a minimal synchronizing string, it is known that
n

m =
2
⎠ (see [5]). Then, an optimal play has the form

w1cw2c...wn−1cwn−2.
⎛ n ⎞

And its length is equal to 2 ·
2
⎠ − 1.	2






It is important to remark that the sequence constructed in the above proof is pla- nar, it means that all those games are being played on planar automata (automata whose transition digraph is planar, see [4]).
We ask: What is the role played by planar automata? Are those automata representative of the intricacies of synchronization games?

Synchronization games and non-synchronizing planar automata
We have constructed a sequence of games that exhibits a certain type of extremal behavior: Winning those games is as hard as possible. It is interesting to observe that the constructed sequence is a sequence of planar games. It is not a surprise, given our previous investigations on the synchronization of planar automata [4], from which we could conclude that planar automata are representative of the in- tricacies of synchronization. The aforementioned construction suggests that planar automata are also representative of the complex behavior of synchronization games (the hardest games are planar games).
We study in this section some facts that are related to subset synchronization games. On one hand, we restrict the scope of our investigations by focussing on planar automata. On the other hand, we expand this scope by considering non- synchronizing automata.
Subset synchronization games played on non-synchronizing automata exhibit

some features that are not present in
Cˇerny’s scenario. First at all, it can be

showed that reduction to pairs is not longer valid. To this end, it is sufficient to exhibit an automaton M = (Q, Σ, δ) , and a set A ⊂ Q, such that the synchronizer has a wining strategy for all the pairs included in A, but such that he does not have a winning strategy for the set A. Consider the automaton M = (Q, Σ, δ) that is defined by:
Q = {1, 2, 3, 4, 5} .
Σ = {a, b, c} .
The transition function δ is defined by the following equations:
δ (i, x)= i, if i = 4, 5 and x = a, b, c, δ (1, a)= δ (2, a)=4 and δ (3, a)= 5,
δ (1, b)= δ (3, b)=5 and δ (2, b)= 4,
δ (2, c)= δ (3, c)=5 and δ (1, c)= 4.
The graphic below is the transition digraph of automaton M.
Notice that the set {1, 2, 3} cannot be synchronized, but notice also that the synchronizer counts with a winning strategy for the standard games encoded by the pairs {1, 2} , {1, 3} and {2, 3}: He plays a in the game (M, {a, b, c} , {a, b, c} , {1, 2}) , he plays b in the game (M, {a, b, c} , {a, b, c} , {1, 3}), and he plays c in the game (M, {a, b, c} , {a, b, c} , {2, 3}) .






Now, that reduction to pairs is lost, it is not clear if there exists a polynomial time algorithm for the recognition of the set
£ = {(M, Σ, Σ, A)} ,
where the synchronizer wins the standard game (M, Σ, Σ, A) .
Theorem 4.1 The set £ is co-NP hard.
Proof. We prove that TAUT is ptime reducible to £. Recall that TAUT is the problem:
Input: α, where α is a formula in conjunctive normal form.
Problem: Decide if α is a tautology.

Our reduction is similar to Eppstein’s reduction. Let α =
i≤m
Ci (X2, X4,..., X2n)

be a boolean formula over the variables X2, ..., X2n. We can write the clause
Ci (X1, ..., X2n) as Y i V· · ·V Y i , where for all i ≤ m and for all j ≤ 2n it happens
1	2n
that Y i ∈ {Xj, ~ Xj,o (Xj)} . The symbol o (Xj) is interpreted as: Variable Xj
does not occur in the given clause. Notice that we have chosen to write the formula
in such a way that for all i ≤ m and for all j ≤ n the equality Y i	= o (X2j−1)
holds.
Given α, we construct an automaton Mα. The input alphabet of Mαis equal to
{0, 1} . The set of nodes of G (Mα) is equal to A1 H· · ·H Am H {c} (the symbol H
denotes disjoint union), where:
Ai = {i1, ..., i2n, i2n+1} .
The transitions are defined in the following way:

First we suppose that k ≤ 2n.


δ (ik, a)= ⎪⎨
⎪⎩
k
c, if a = 1 and Y i = Xk,
ik+1, if a = 0 and Y i = Xk,o (Xk) , c, if a = 0 and Y i =~ Xk.

If k = 2n +1 we have that
δ (i2n+1, a)= i2n+1.
Moreover, we have that
δ (c, a)= c.
Set Aα = {11, ..., m1} . We observe that α is a tautology, if and only if, the set Aα is synchronized by all the strings u ∈ {0, 1}2n. Then, if α is a tautology the syn- chronizer has a very simple winning strategy for the game (Mα, {0, 1} , {0, 1} , Aα): It suffices to play at random. Now suppose that α is not a tautology, there ex- ists v2v4 ··· v2n ∈ {0, 1}n such that for all x1x3 ··· x2n−1 ∈ {0, 1}n it happens that x1v2x3 ··· x2n−1v2n does not satisfy the formula α. Notice that the spoiler chooses the values of X2, ..., X2n. Then, if the spoiler chooses to play according to the string v2v4 ··· v2n he wins: String v2v4 ··· v2n sends one of the tokens, say the k-th token, to the state k2n+1. Notice that if the k-th token visits the node k2n+1, then syn- chronization becomes impossible. Thus, we have that α is a tautology, if and only if, the synchronizer has a winning strategy for the game (Mα, {0, 1} , {0, 1} , Aα) .2
It is important to remark that for all α the constructed automaton Mα is planar. Thus, we have that the restriction of £ to planar automata is also co-NP hard. This later result amounts to show that planar automata are the hardness core of synchronization problems (see reference [4]).
Thus, if one does not fix an upperbound on the sizes of the sets to be synchro- nized, the corresponding algorithmic problem becomes hard. It is natural to ask: What could it happens if we fix such an upperbound? Let k ≥ 1 and let £k be the set
{(M, Σ, Σ, A) ∈£ : |A|≤ k} .
Theorem 4.2 For all k ≥ 1, the set £k can be recognized in polynomial time.
Proof. Let (M, Σ, Σ, A) be an instance of £k. Given M, we can construct in polynomial time the k-tuple automaton M(k) = (Qk, Σ, δk) . Let G be the transition digraph of M(k) and let s M(k) be equal to the set
{A ∈ Q : |A| = 1} ,
we have that (M, Σ, Σ, A) ∈ £k, if and only if, the triple G, A, s M(k)  belongs to the set
{(G, v, D) : Alice wins the game (G, v, D)} .

The above set can be easily recognized in polynomial time (see [3]). Thus, we have a ptime reduction of £k into a problem that belongs to the class P (polynomial time), and it implies that £k can also be recognized in polynomial time.	2

We have proven that £k can be recognized in polynomial time, we can also prove that a polynomial upperbound O nk holds for the length of the optimal winning strategies of k-subset synchronization games. The proof of this later fact is very similar to the proof of theorem 3.1.
Theorem 4.3 Suppose that the synchronizer has a winning strategy for the game
(M, Sc, Sp, A) ∈ £k, then the synchronizer can win in at most O nk  steps.
It is natural to ask: Is the above upperbound optimal?
Theorem 4.4 There exists a sequence {(Mi, Sci, Spi, Ai)}i≥ 1 of winnable k-subset synchronization games such that the synchronizer requires time Ω nk to win the game (Mn, Scn, Spn, An) .
Proof. Let n be a large integer, and let p1, ..., pk be prime numbers such that
n ≤ p1 < ... < pk ≤ n. We set Mn = (Qn, Σn, δn), where:
Qn is the disjoint union of the sets B1 ∪ B2 ∪· · ·∪ Bk ∪ {x} . Moreover we have that for all i ≤ k, the set Bi is equal to	q1, ..., qpi , k1, ..., kpi−1 .

Σn = {a, b} .
i	i	i	i

The function δn is defined by the following equations:
δ (qr, a)= qr+1modpi , for all i ≤ k and r ≤ pi,
i	i
δ (qr, b)= kr, for all i ≤ k and for all r /= pi,
i	i
δ (qpi , b)= x, for all i ≤ k,
δ (kr, c)= kr, for all i ≤ k, and for c = a, b,
i	i
δ (x, c)= x, for c = 0, 1.
We set An =  q1,	, q1}, Scn = {0, 1} and Spn = {0} . Notice that if the synchro-
nizer wants to win this game, he must place simultaneously the k tokens on nodes
qp1−1, ...., qpk−1 The last task can be accomplished no matter the way the spoiler
1	k
plays (the spoiler is constrained to choose 0 all the time), but the time required to
achieve this goal is Ω (p1 ·· · · · pk)= Ω nk .	2

We observe, once again, that the sequence {(Mi)}i≥1 is planar. Thus, we have, once again, that extremal behavior is achieved by sequences of planar automata.
The following graphic is the transition digraph of Mn.
The results consigned in this section amount to show that: Planar automata are representative of the intricacies of subset synchronization and subset synchro- nization games. We believe that we have provided further evidence concerning the conjectured universality of planar automata (see [4]).







Concluding remarks
We are convinced that almost all the questions about slowly synchronizing automata can be investigated through the lenses of planar automata. We have provided some evidence for this conjecture in a previous work [4]. The present paper continues with this line of research. We showed that a similar phenomenon seems to occur when one consider the broader framework of subset synchronization games. We
consider that the main question is the following one: Does Cˇerny’s conjecture holds
true provided that it holds true for planar automata? A positive answer to the later question could be a major step towards the solution of the long-standing Cˇerny’s conjecture.
Acknowledgement
The first author would like to thank the financial support provided by Universidad Nacional de Colombia, Hermes research program, code number 8943 (32083).

References
A. Blass, Y. Gurevich, L. Nachmanson, M. Veanes. Play to Test. FATES 2005: 32-46.

F. Fominykh, P. Martyugin, M. Volkov. Playing for Synchronization. Int. J. Found. Comput. Sci. 24(6): 765-780, 2013.
F. Gonze, R. Jungers. On the Synchronizing Probability Function and the Triple Rendezvous Time for Synchronizing Automata. SIAM J. Discrete Math. 30(2): 995-1014, 2016.
J. A. Montoya, C. Nolasco. On the Synchronization of Planar Automata. Submitted, available at arXiv.


J. A. Montoya, C. Nolasco. On the Synchronization of Small Sets of States: Experiments and Conjectures Related to Cˇerny’s Problem. Submitted.
M. Volkov. Synchronizing Automata and the Cˇerny´ Conjecture. LATA 2008, LNCS 5196, pages 11–27, 2008.
