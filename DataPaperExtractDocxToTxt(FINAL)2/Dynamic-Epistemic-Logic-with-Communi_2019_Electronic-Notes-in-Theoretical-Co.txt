Available online at www.sciencedirect.com


Electronic Notes in Theoretical Computer Science 344 (2019) 67–82
www.elsevier.com/locate/entcs

Dynamic Epistemic Logic with Communication Actions
Mario Roberto Folhadela Benevides1
PESC/COPPE - Inst. de Matem´atica/DCC Federal University of Rio de Janeiro
Rio de Janeiro, Rio de Janeiro
Isaque Macalam Saab Lima2
PESC/COPPE
Federal University of Rio de Janeiro Rio de Janeiro, Rio de Janeiro

Abstract
This work proposes a Dynamic Epistemic Logic with Communication Actions that can be performed con- currently. Unlike Concurrent Epistemic Action Logic introduced by Ditmarsch, Hoek and Kooi [15], where the concurrency mechanism is the so called true concurrency, here we use an approach based on process calculus, like CCS and CSP, and Action Models Logic. Our approach makes possible the proof of soundness, completeness and decidability, different from the others approaches. We present an axiomatisation and show that the proof of soundness, completeness and decidability can be done using a reduction method.
Keywords: Epistemic Logic, Dynamic Logic, Action Models, Dynamic Epistemic Logic, Concurrent Actions, Communication Action.

Introduction
Multi-Agent Epistemic Logic has been investigated in Computer Science [6] to repre- sent and reason about agents (or groups of agents’) knowledge and beliefs. Dynamic Logic aims to reason about actions (programs) and their effects [8]. Dynamic Epis- temic Logic [16] is conceived to reason about actions that change agents (or groups of agents’) epistemic state, i.e., actions which change agent’s knowledge and beliefs. The first Dynamic Epistemic Logic was proposed independently by [11] and [7]
it is called Public Announcement Logic(PAL) . There are many other approaches but the one that is used in this work is the Action Model Logic proposed by [1, 2].

1 Email:mario@cos.ufrj.br
2 Email:isaque@cos.ufrj.br

https://doi.org/10.1016/j.entcs.2019.07.005
1571-0661/© 2019 The Author(s). Published by Elsevier B.V.
This is an open access article under the CC BY-NC-ND license (http://creativecommons.org/licenses/by-nc-nd/4.0/).

Concurrent Dynamic Epistemic Logic was introduced in [15] and it was intended to extend Epistemic Action Logic proposed by Van Ditmarsch in [14] with con- current epistemic actions. In this extension they use a mechanism to deal with concurrency called ”true concurrency” which is inspired on the Concurrent Propo- sitional Dynamic Logic proposed by Peleg in [10]. An interesting work, entitled Logics of Communication and Knowledge, presented in [12], proposes a framework for modelling message passing situations that combines properties of dynamic epis- temic semantics and history-based approaches, which consists of Kripke models with records of sent messages in their valuations. Another work that inspired us to represent communication actions as private epistemic action is [7].
Example: Consider that there are two students waiting for a message from a teacher to send back the homework and that one student does not know if the other received or responded the message. To represent this we need to model the following actions: teacher sending the message (send action), each student receiving (receive action) and responding (response action) the message independently. We also need to guarantee that: the receive action can not be performed before the send action, the response action can not be performed before the receive action and the students actions can be performed concurrently. Can we model this using Action Models Logic? Since this is a very small example one can argue that this can done by using pre conditions and non deterministic choice to model all the possible paths. Now imagine the same situation with 100 students. It would be not so easy to model.
This work proposes a way to deal with concurrency and communication with Dynamic Epistemic Logic. We use an approach based on action models and process calculus, like CCS and CSP, which allow us to prove soundness, completeness and decidability. Different from [15], that implements concurrency on top of Epistemic Action Logic, we extends Action Models to deal with concurrency and communica- tion. The proofs of soundness, completeness and decidability can be done using a reduction method.
In order to facilitate the proof of soundness, completeness, and decidability we restricted our concurrency approach. We do not deal with ”true concurrency” like in [15]. Instead, we adopt the interleaving (non-deterministic choices of all possible paths) approach used in process algebras like CCS and CSP. Since we are based on Action Models we can use the pre-conditions to restrict actions that must be executed after another action. We do not deal with Common Knowledge, because this would make the proofs a little more tricky.
In sections 2, 3 and 4 we give a brief introduction to Multi-agent Epistemic Logic, Action Model Logic and Concurrent Dynamic Epistemic Logic. Next we present the Dynamic Epistemic Logic that we propose in this paper. The last section is the conclusion.

Multi-Agent Epistemic Logic
This section presents the Multi-Agent Epistemic Logic S5a. All the definitions and theorems of this section are based on [16].

Language and Semantics
Definition 2.1 The Epistemic language consists of a countable set Φ of proposition symbols, a finite set A of agents, a modality Ka for each agent a and the boolean connectives ¬ and ∧. The formulas are defined as follows:
ϕ ::= p |T| ¬ϕ | ϕ1 ∧ ϕ2 | Kaϕ

where p ∈ Φ, a ∈ A.
Definition 2.2 A multi-agent epistemic frame is a tuple F = (S, Ra) where:
S is a non-empty set of states;
Ra is a binary relation over S, for each agent a ∈ A;
Definition 2.3 A multi-agent epistemic model is a pair M = (F, V), where F is a frame and V is a valuation function V : Φ → 2S. We call a rooted multi-agent epistemic model (M, s) an epistemic state.
Definition 2.4 Given a multi-agent epistemic model M = ⟨(S, Ra), V⟩. The no- tion of satisfaction M,s |= ϕ is defined as follows:
M,s |= p iff s ∈ V(p)
M,s |= ¬φ iff M,s |= φ
M,s |= φ ∧ ψ iff M,s |= φ and M,s |= ψ
M,s |= Kaφ iff for all sj ∈ S : sRasj ⇒ M, sj |= φ

Axiomatisation
All instantiations of propositional tautologies,
Ka(ϕ → ψ) → (Kaϕ → Kaψ),
Kaϕ → ϕ,
Kaϕ → KaKaϕ	(+ introspection),
¬Kaϕ → Ka¬Kaϕ	(− introspection),
Inference Rules
M.P. ϕ, ϕ → ψ/ψ	U.G. ϕ/Kaϕ
Theorem 2.5 S5a is sound and complete w.r.t its semantics.
Example 2.6 This example is from [16].
Suppose we have a card game with three cards: 0, 1 and 2, and three players a, b and c. Each player receives a card and do not know the other players cards.
We use proposition symbols 0x, 1x, 2x for x ∈ {a, b, c} meaning “player x has card 0, 1 or 2”. We name each state by the cards that each player has in that state, for instance 012 is the state where player a has card 0, player b has card 1 and

player c has card 2 3 . The following epsitemic model represents the epistemic state of each agent 4 .
Hexa1= ⟨(S, R), V⟩:
S = {012, 021, 102, 120, 201, 210}
R = {(012, 012), (012, 021), (021, 021),... }
V(0a)= {012, 021}, V(1a)= {102, 120}, ...

Fig. 1. Epistemic Model Hexa1

Action Models
All the definitions and theorems of this section are based on [16].
Language and Semantics
Definition 3.1 An action model M is a structure ⟨S, ∼a, pre⟩, where:
S is a finite domain of action points or events;
∼a is an equivalence relation on S, for each agent a ∈ A;
pre : S '→L is a precondition function that assigns a precondition to each s ∈ S. Rooted action models is an action model with a distinguished state (M, s).
Note that S is different from S, M is different from M and s is different from s.
Definition 3.2 The Action Model language consists of a countable set Φ of propo- sition symbols, a ﬁnite set A of agents, the boolean connectives ¬ and ∧, a modality Ka for each agent a ∈A and a modality [α] . The formulas are deﬁned as follows:
ϕ ::= p |T| ¬ϕ | ϕ1 ∧ ϕ2 | Kaϕ | [α]ϕ, α ::= (M, s) | α1; α2 | α1 ∪ α2
where p ∈ Φ, a ∈ A, (M, s) a rooted action model and ⟨α⟩↔ ¬[¬α]
Definition 3.3 Given an epistemic state (M, s) with M = ⟨(S, Ra), V⟩ and a rooted action model (M, s) with M = ⟨S, ∼a, pre⟩. The result of executing (M, s) in (M, s) is (M⊗ M, (s, s)) where M⊗ M = ⟨(Sj, Raj ), Vj⟩ such that:
3 A state name underlined means current state
4 We omit the reflexive loops in the picture.

Sj = {(s, s) such that s ∈ S, s ∈ S, and M,s |= pre(s)}
(s, s)Raj (t, t) iff (s Ra t and s ∼a t)
(s, s) ∈ Vj(p) iff s ∈ V(p)
Definition 3.4 Composition of rooted action models
Given rooted action models (M, s) with M = ⟨S, ∼, pre⟩ and (Mj, sj) with Mj =
⟨Sj, ∼j, prej⟩, their composition is the action model (M; Mj, (s, sj)) with M; Mj =
⟨Sjj, ∼jj, prejj⟩:
Sjj = {(s, sj) such that s ∈ S, sj ∈ Sj }
(s, sj) ∼ajj (t, tj) iff (s ∼a t and sj ∼ja tj)
prejj(s, sj)= ⟨(M, s)⟩prej(sj)
Definition 3.5 Given a rooted epistemic state (M, s) with M = ⟨(S, Ra), V⟩ and a rooted action model (M, s) with M = ⟨S, ∼, pre⟩. The notion of satisfaction M,s |= ϕ extends from 2.4 and is deﬁned as follows
1,2,3, 4 as in deﬁnition 2.4
M,s |= [(M, s)]φ iff M,s |= pre(s) ⇒M ⊗ M, (s, s) |= φ
Jα ∪ β) iff Jα) ∪ Jβ)
J(M, s); (Mj, sj)) iff (M; Mj, (s, sj))	Composition of action models Where J.) is the interpretation on a action model.
Axiomatisation

Epistemic Logic Axioms
Axioms (i), (ii), (iii), (iv) and (v) of section 2.2,
Action Model Logic Axioms

[(M, s)]p ↔ (pre(s) → p),
[(M, s)]¬φ ↔ (pre(s) → ¬[(M, s)]φ)
[(M, s)](φ ∧ ψ) ↔ ([(M, s)]φ ∧ [(M, s)]ψ)
[(M, s)]Kaφ ↔ (pre(s) →	s~at Ka[(M, t)]φ)
[(M, s)][(Mj, sj)]φ ↔ [(M, s); (Mj, sj)]φ
[(M, s) ∪ (Mj, sj)]φ ↔ [(M, s)]φ ∧ [(Mj, sj)]φ
Inference Rules
M.P. ϕ, ϕ → ψ/ψ	U.G. ϕ/Kaϕ	ϕ/[α]ϕ

Every formula in the language of action model logic without common knowledge is equivalent to a formula in the language of epistemic logic [16].

Example 3.6 Continuation of example 2.6
Suppose now agent a wants to perform the action of showing her card to agent
b. In fact, we have three actions, agent a showing either card 0, 1 or 2 to agent
b. Agents a and b can distinguish between these three action but agent c cannot. This situation can be represented by the action model below.

Fig. 2. Action Model for show
S = {sh0, sh1, sh2}
∼a = {(s, s) | s ∈ S}
∼b = {(s, s) | s ∈ S}
∼c = S × S
pre(sh0)= 0a
pre(sh1)= 1a
pre(sh2)= 2a
If agent a performs the action of showing her card to agent b on the epistemic model of example 2.6, we obtain:

Fig. 3. Hexa1 After the Execution of show

This new epistemic model, shown in figure 3, is obtained by the product of epistemic model of figure 1 with the action model of figure 2. It is important to notice that the number of states after the product is 18 (6 × 3), but most of them are thrown out because they do not satisfy the precondition.

Epistemic Actions and Concurrent Dynamic Epis- temic Logic
This section provides a brief introduction to the works presented in [15] and [16].
Epistemic Actions is an extension of Multi-Agent Epistemic Logic to deal with new information (updates), like Action Models, but it uses a different approach to deal with new information. Concurrent Dynamic Epistemic Logic proposes a way to deal with concurrency in Epistemic Actions.

Language and Semantics
Definition 4.1 The Epistemic Actions language consists of a countable set Φ of proposition symbols, a ﬁnite set A of agents, the boolean connectives ¬ and ∧, a modality Ka for each agent a ∈A and a modality [α] . The formulas and the actions are deﬁned as follows:
ϕ ::= p |T| ¬ϕ | ϕ1 ∧ ϕ2 | Kaϕ | [α]ϕ,

α ::=?α | L5β | (α!α) | (α¡α) | (α; β) | (α1 ∪ α2)
where p ∈ Φ, a ∈ A, B⊆ A, L stands for learning and L5β means ’group B learn that β, ?α is a test, (α!α) is called left local choice, (α¡α) is called right local choice, (α; β) is sequential composition (ﬁrst α then β), (α1 ∪ α2) is non-deterministic choice.
Definition 4.2 Given the epistemic model M = ⟨S, ∼a,V ⟩ and the state s ∈ S. The notion of satisfaction M,s |= ϕ extends from 2.4 and is deﬁned as follows
1,2,3, 4 as in deﬁnition 2.4
M,s |= [α]φ	iff	for all (Mj, sj): (M, s)[α](Mj, sj) implies (Mj, sj) |= φ
(M, s)[?φ](Mj, sj)	iff	Mj = ⟨[φ]M , ∅,V ∩ [φ]M ⟩ and sj = s
(M, s)[LGφ](Mj, sj)	iff	Mj = ⟨Sj, ∼j,V j⟩ and (M, s)[φ]sj
Jα; αj)	=	Jα) ◦ Jαj)
Jα ∪ αj)  =	Jα) ∪ Jαj)
Jα!αj)	=	Jα)
The Concurrent Dynamic Epistemic Logic language adds the concurrent execu- tion operator to the actions of Epistemic Actions language. The actions are defined as follows:

α ::=?α | L5β | (α!α) | (α¡α) | (α; β) | (α1 ∪ α2) | (α1 ∩ α2) where (α1 ∩ α2) represents a concurrent execution.
Example 4.3 In order to illustrate the use of the language of Epistemic Actions, we consider the card game presented in section 3.
The Epistemic Model is the same shown in figure 1.
The action of “agent a showing her card to agent b” can be model as: (L(b)?0a ∪ L(b)?1a ∪ L(b)?2a); (L(a,b,c)?(Kb0a ∨ Kb1a ∨ Kb2a))
This means that agent a tells agent b her card and after that all agents know
that agent b knows the card that agent a holds. After performing this action, the resulting epistemic model is the same as in figure 3.

Dynamic Epistemic Logic with Communication Ac- tions
Process Calculus
In this section, we propose a very small process (program) calculus for the programs of Dynamic Epistemic Logic with Communication Actions (DELWCA). It is inspired by [17].
Let A = {1, ..., n}, denoted by i, j..., be a finite set of agents, AMS={a1, a2, a3 .. .}  be  a  finite  set  of  action  models  and  N   =
{c1, c2, c3,..., c1, c2, c3,.. .} be a finite set of communication actions. As a convention, communication actions with one overline represent output and with no overlines represent an input. Communication actions can be combined to form a private action model, by joining an output communication action with its respective input ( [c1, c1] = a1 ). The action model resultant of the join of two communication actions is known as silent action, denoted by τs (.), that can be interpreted as the result of a communication between agents i and j 5 .
Definition 5.1 The language can be deﬁned as follows.
η ::= α | α.η | η1; η2 | η1 + η2, where α ∈ AMS ∪N 

π ::= η | β.π | π1; π2 | π1 + π2 | η1  η2 ···  ηn
where n = |A| and ηi denotes the program performed by agent i.
We use π and η to denote processes (programs) and α and β to denote action models and communication actions.
The prefix operator . denotes that the process will ﬁrst perform the action α and then behave as π. The summation (or nondeterministic choice) operator + denotes that the process will make a nondeterministic choice to behave as either π1 or π2. The parallel composition operator  denotes that the processes η1, ..., ηn, performed by agents 1, ..., n respectively, may proceed independently or may commu- nicate through a common channel.
We write π →α πj to express that the process π can perform the action α and
after that behave as πj. We write π →α √ to express that the process π successfully
finishes after performing the action α. A process finishes when there is no possible
β √
action left for it to perform. For example, β →	. When a process finishes inside
a parallel composition, sequential composition or non-deterministic choice we write
π instead of π|√, π; √ and π + √. We also write √ instead of √|√.
Like [9] we need to restrict the agents to perform some actions. In our case we don’t want to perform communication actions, but we can perform τ action which results from the combination of communication actions (a, a).

5 As silent actions τs (.) are interpreted as private action models, the index s denotes the root of the action
model τs (.).

The semantics of our process calculus can be given by the transition rules pre-
sented in table 1, where π and η are process specifications, while πj and ηj are process specifications or √. The τs (.) action represents an internal communication
action from agent i to agent j.

Table 1 Transition Relation
Example 5.2 Continuation of the card game example.
Now suppose that the game is online and player a sends a message p to players b and c. So after the message p players b and c know all the cards. This problem can be modelled as follows:
π1 = cab(p); cac(p)+ cac(p); cab(p)
π2 = cab(.).β
π3 = cac(.).γ
π1  2  3 = (π1  π2  π3)
Given the programs π1, π2 and π3, initially we have two possible actions: com- munication between a and b or communication between a and c. Suppose that the communication between a and b occurs first, then we will have two possible actions: communication between a and c or action β and so on ...
We can represent this using parallel composition:
π1  π2  π3

_c	z_
◦



◦
τac
  
◦
γ
  




◦
γ
  
vz
◦

vz
◦
β
  




◦
β
  

◦
vz
◦
τab
vz	 
◦	◦
γ	β
  	  

◦	◦	◦	◦	◦	◦
Fig. 4. Possible Runs of Process π1  π2  π3

So :
⟨π1  2  3⟩.(K2p ∧ K3p) is true
⟨π1  2  3⟩.(K2p ∨ K3p) is true
⟨π1  2  3⟩.¬(K2p ∨ K3p) is false

Bisimulation
The concept of bisimulation is a key notion in any process algebra. It is an equiv- alence relation between processes which have mutually similar behavior. The intu- ition is that two bisimilar processes cannot be distinguished by an external observer. Using the notion of bisimulation allows us to transform any process in an equivalent one that is a summation of all their possible actions, that is what the Expansion Law (theorem 5.5) states.tab:semccs
There are two possible semantics for the τ action in CCS: it can be regarded as being observable, in the same way as the communication actions, or it can be regarded as being invisible. We adopt the first one, since it is more generic and fits better in our formalism. Whenever the τ action is observable the bisimulation relation is called strong.
Definition 5.3 ( [9]) Let Π be the set of all processes. A set Z ⊆ Π × Π is a
strong bisimulation if (π1, π2) ∈ Z implies the following for all α ∈ AMS :
α
If π1 → πj , then there is πj ∈ Π such that π2 → πj and (πj , πj ) ∈ Z;
α
If π2 → πj , then there is πj ∈ Π such that π1 → πj and (πj , πj ) ∈ Z;
π1 → √ if and only if π2 →α √.
Definition 5.4 ( [9]) Two process π and πj are strongly bisimilar (or simply bisimilar), denoted by π   πj, if there is a strong bisimulation Z such that (π, πj) ∈ Z.
Now, we introduce the Expansion Law, which is very important in the definition of the semantic and in the axiomatisation of our logic. We present a particular case of the Expansion Law, which is suited to our needs. The most general case of the Expansion Law is presented in [9].
Theorem 5.5 ( [9]) [Expansion Law (EL)] Let π = (η1  ...  ηn). Then


π ~ Σ α.(η1  ...  η′  ...  ηn)+	Σ

τi,j (.).(η1  ...  η′

...  η′

 ...  ηn)

α '	c '	c '


ηi→ηi
(ηi→ηi )&(ηj→ηj )


were α is a action model and τi,j is a private action model resulted by the com- bination of two communication actions.
We denote the right side of this bisimilarity by Exp(π). We also denote by 0

the processes whose expansion is empty, i.e., there is no (ηi →c
ηj) , (ηj →c
ηjj ) and

(ηk →α ηj ) for any i, j, k ∈ {1, ..., n}.
k

Proof. This follows from table 1 and definitions 5.3 and 5.4. A detailed proof for the most general case of this theorem can be found in [9].	2
The Expansion Law is a very useful property of CCS processes. Its intuition is that processes can be rewritten as a summation of all their possible actions.
def	j	jj	def 	j	jj
process (A  B) is equivalent, using the Expansion Law, to
(A  B)  α.(Ajj  B)+ β.(A  Bjj)+ τAB.(Aj  Bj)
Language
In this section we present the DELWCA language.
Definition 5.6 The DELWCA language consists of a set Φ of countably many proposition symbols, a set Π of programs as deﬁned in 5.1, a ﬁnite set A of agents, the boolean connectives ¬ and ∧, a modality ⟨π⟩ for every program π ∈ Π (as deﬁned in section 5.1) and a modality Ka for each agent a. The formulas are deﬁned as follows:
ϕ ::= p |T| ¬ϕ | ϕ1 ∧ ϕ2 | ⟨π⟩ϕ | Kiϕ
where p ∈ Φ, π ∈ Π, i ∈ A and ⟨π⟩ϕ means that exists a execution of π that leads to a state where ϕ is true.
Semantics
For communication actions (actions in N ) we need to relax the fact that relations in action models are equivalence relations, we just need them to be relations. For this case all the definitions of action models (def. 3.1), execution (product) of action models (def. 3.3), composition of action models (def. 3.4) can be easily adapted.
Definition 5.7 Let A be the set of all agents and i, j ∈ A. The action model
τs (ϕ)= (M, s), with M = ⟨S, ∼, pre⟩, is deﬁned as follows:
S = {s, t}
∼i = {(s, s), (t, t)}
∼j = {(s, s), (t, t)}
∼k = {(s, t), (t, t)}, for all k ∈ A\{i, j}
pre(s)= ϕ
pre(t)= T

Fig. 5. Action Model for τs

In order to obtain the definition of satisfaction for DELWCA we must add the following condition to definition 3.5:

c1
J(η1	...	ηn)) = { Jτi,j(.)); J(η1	...	ηij	...	ηjj	...	ηn)), for all (ηi → ηj) &

(ηj →c1 ηj ) }   { Jα); J(η1  ...  ηj  ...  ηn)), for all (ηi →α
ηj) }


5.4.1	Axiomatisation
(i) All instantiations of propositional tautologies,
Epistemic Logic Axioms

Axioms (i), (ii), (iii), (iv) and (v) of section 2.2,
Action Model Axioms

Axioms (vi), (vii), (viii) and (ix) of section 3.2,
PDL Axioms

[π](φ → ψ) → ([π]φ → [π]ψ) (K axiom)
[π1][π2]φ ↔ [π1; π2]φ (Composition)
[π1 + π2]φ ↔ [π1]φ ∧ [π2]φ (Non-deterministic Choice)
[α.π]φ ↔ [α][π]φ (Prefix) 6
[α.π]φ ↔ pre(α) → [π]φ
Concurrent Action Axiom

[η1  ...  ηn]φ ↔ [Exp(η1  ...  ηn)]φ
Inference Rules
M.P. ϕ, ϕ → ψ/ψ	U.G. ϕ/[π]ϕ	ϕ/Kaϕ

Proposition 5.8 ▶ [α; π2]φ ↔ [α][π2]φ ↔ [α.π2]φ ↔ pre(α) → [π2]φ


Example 5.9 A supervisor Ane (1) and her two students Bob(2) and Cathy(3) are working in their computer located at their own house. The supervisor wants to book a meeting ”tomorrow at 16:00”. She sends a message asynchronously to Bob and Cathy. We are supposing that the supervisor uses channels c12 and c13 to communicate with Bob and Cathy respectively. We represent Anne, Bob and Cathy by processes π1, π2 and π3 respectively, and their parallel composition by π1  2  3.
π1 = c12(p); c13(p)+ c13(p); c12(p)
π2 = c12(.)

6 It is important to notice that Prefix is a special case of Composition

π3 = c13(.)
π1  2  3 = (π1  π2  π3)
We have two possible runs process π1  2  3 as shown in the tree in figure 6.
π2


◦
τ13
  
z 
◦
τ12
  

◦	◦
Fig. 6. Possible Runs of Process π1  π2  π3

Let propositional symbol p represent ”tomorrow at 16:00”. The epistemic model
Mj at the begging is as shown in figure 7.
u ◦	2, 3	◦ v

p	¬p
Fig. 7. Initial Epistemic Model n0

The action models for τ12 and τ13 are presented in figures 8 and 9.

Fig. 8. Action Model for τ12


Fig. 9. Action Model for τ13

Suppose τ12 is performed before τ13. After the execution of τ12 we obtain the epistemic model picture in figure 10.

Fig. 10. Epistemic Model n1 = n0 ⊗ τ12

It is important to notice that at state us1 Ane and Bob knows p M1, us1 ▶ K1p ∧ K2p but Cath doesn’t M1, us1 ▶ ¬K3p. After the second communication τ13 we have the epistemic model of figure 11.

Fig. 11. Epistemic Model n2 = n1 ⊗ τ13 = n0 ⊗ τ12 ⊗ τ13

We can notice, from figure 11 that at state us1s2 Ane, Bob and Cath knows p M2, us1s2 ▶ K1p ∧ K2p ∧ K3p as expected. If we execute run τ13; τ 12 we obtain the model M3 as shown in figure 12.



Fig. 12. Epistemic Model n3 = n0 ⊗ τ13 ⊗ τ12
We can show, from figure 12, that Ane, Bob and Cath know p M3, us1s2 ▶
K1p ∧ K2p ∧ K3p as expected.
Soundness, Completeness and Decidability
Soundness
We need to prove that all axioms are valid. Axioms i to xiii are standard from Dynamic Epistemic Logic literature and can be found in [16]. We prove validity only for axiom 6.

Lemma 5.10 [η1  ...  ηn]φ ↔ [Exp(η1  ...  ηn)]φ is valid.
Proof. This proof follows straightforward from the rules of table 1 and theorem
5.5.	2
A detailed proof of soundness can be found in [3].
Completeness
The proof of completeness is similar to the proof for Public Announcement and Action Models Logics introduced in [13] Dynamic Epistemic Logic. We prove com- pleteness showing that every formula in DELWCA is equivalent to formula in Epis- temic Logic. In order to achieve that we only have to provide a translation function that translate every DELWCA formula to a formula without communication actions and concurrency.
A detailed proof of completeness can be found in [3].
Decidability
Decidability follows directly from the decidability of S5a.
Conclusions
In this work we present a Dynamic Epistemic Logic with Communication Actions that can be performed concurrently. In order to achieve that we propose a PDL like language for actions and develop a small process calculus. We show that it’s easy to model problems of communication and concurrency with the proposed dynamic epistemic logic. The main feature of it is the Expansion rule which allows for representing the parallel composition operator. This approach is similar to the one introduced in [4, 5].
We represent communication actions as private Action Models where the rela- tions are not equivalence relations. We present an axiomatisation and prove com- pleteness using reduction technique.
As future work we would like to investigate the extension with common knowl- edge and/or iteration operators, study other types of communications where agents are not reliable or not trustful, extend this to Dynamic Epistemic Logic With Post- Conditions and change DEMO, or create a new Model Checker, to deal with con- currency and communication.

References
Baltag, A. and L. Moss, Logics for epistemic programs, Synthese (2004), pp. 165–224.
Baltag, A., L. Moss and Solecki, The logic of common knowledge, public announcements and private
susppition, in: I. Gilboa, editor, The 7th Conference on Theoretical Aspects of Rationality and Knowledge (TARK 98), 1998, pp. 43–56.
Benevides, M. and I. Lima, Dynamic epistemic logic with communication actions, Technical Report 1902.01164, ArXiV (2019).
URL http://arxiv.org/abs/1902.01164


Benevides, M. and L. Schechter, A propositional dynamic logic for CCS programs, in: Proceedings of the XV Workshop on Logic, Language, Information and Computation, LNAI 5110 (2008), pp. 83–97.
Benevides, M. and L. Schechter, A propositional dynamic logic for concurrent programs based on the π-calculus, in: Proceedings of Methods for Modalities, Electronic Notes in Theoretical Computer Science ENTCS 262 (2010), pp. 49–64.
Fagin, R., J. Halpern, Y. Moses and M. Vardi, “Reasoning about Knowledge,” MIT Press, USA, 1995.
Gerbrandy, J. and W. Groeneveld, Reasoning about information change, Journal of Logic, Language, and Information (1997), pp. 147–169.
Harel, D., “Dynamic Logic,” Handbook of Philosophical Logic, Dordrecht:Reidel, Vol.2, 1984, ed. D. Gabbay and F. Guenthner.
Milner, R., “Communication and Concurrency,” Prentice Hall, 1989.
Peleg, D., Communication in concurrent dynamic logic, Journal of Computer and System Sciences 35
(1987).
Plazza, J. A., “Logics of Public Communications,” Proceedings of the 4th International Symposium on Methodologies for Intelligent Systems, North-Holland: 201–216, 1989.
Sietsma, F., “Logics of Communication and Knowledge,” Ph.D. thesis, University of Amsterdam (CWI- ILLC) (2012).
van Benthem, J., J. van Eijck and B. P. Kooi, Logics of communication and change, Inf. Comput. 204
(2006), pp. 1620–1662.
van Ditmarsch, H., “The Semantics of Concurrent Knowledge Actions,” Workshop on Logic and Games, Ed. M. Pauly and G. Sandu, ESSLLI, 2001.
van Ditmarsch, H., W. van der Hoek and B. Kooi, “Concurrent Dynamic Epistemic Logic,” Kluwer, Ed. V.F. Hendricks et al., , vol. 322, 2003.
van Ditmarsch, H., W. van der Hoek and B. Kooi, “Dynamic Epistemic Logic,” Synthese Library Series, volume 337, Springer, The Netherland, 2008.
van Glabbleek, R. J., The linear time - branching time spectrum i: The semantics of concrete, sequential processes, in: A. P. J.A. Bergstra and S. Smolka, editors, Handbook of Process Algebra, chapter 1, Elsevier, 2001 pp. 3–99.
