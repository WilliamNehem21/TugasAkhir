Egyptian Informatics Journal 23 (2022) 529–545











Permutation-based frame synchronization method for data transmission systems with short packets
Jamil Al-Azzeh a,⇑, Emil Faure b,c, Anatoly Shcherba b, Bohdan Stupka b
a Al-Balqa’ Applied University, Amman 11134, Jordan
b Cherkasy State Technological University, 18006 Cherkasy, Ukraine
c The State Scientific and Research Institute of Cybersecurity Technologies and Information Protection of the State Service for Special Communications and Information Protection of Ukraine, 03142 Kyiv, Ukraine



a r t i c l e  i n f o 

Article history:
Received 28 November 2021
Revised 7 May 2022
Accepted 22 May 2022
Available online 3 June 2022

Keywords: Permutation Syncword
Frame synchronization
Short-packet communications Factorial coding
Noise
a b s t r a c t 

This paper describes the research, development, and implementation of a frame synchronization method for data transmission systems with short packets, specifically those that use nonseparable factorial cod- ing. The key concept of the method is using a permutation as a syncword. This permutation must satisfy the following condition: the minimum Hamming distance to all its circular shifts must be the maximum. The frame synchronization method employs correlation processing and majority processing of data frag- ments transmitted through the communication channel, where the fragment length is equal to the sync- word length. As a result, the proposed frame synchronization method can realize frame synchronization in data transmission systems with adverse noise conditions. Theoretical and practical assessment of the number of accumulated fragments required to establish frame synchronization indicates that imple- menting the proposed method reduces the amount of received data, which subsequently reduces the time required to establish a connection between the transmitter and receiver. In addition, interleaving accumulated fragments further reduces the required number of received fragments.
© 2022 THE AUTHORS. Published by Elsevier BV on behalf of Faculty of Computers and Artificial Intel-
ligence, Cairo University. This is an open access article under the CC BY license (http://creativecommons.
org/licenses/by/4.0/).






Introduction

An efficient frame synchronization system that can detect frame boundaries at high bit error rates (BER) allows communication under high levels of natural or intentional noise. For example, such a system could facilitate communication under electronic warfare conditions. In addition, in such communication systems, combin- ing channel error protection and unauthorized access protection


Abbreviations: ACF, Autocorrelation function; BER, Bit error rate; CDF, Cumu- lative distribution function; NOMA, Non-orthogonalnonorthogonal multiple access; SFD, Start of the frame delimiter.
* Corresponding author.
E-mail address: jamil.azzeh@bau.edu.jo (J. Al-Azzeh).
Peer review under responsibility of Faculty of Computers and Information, Cairo University.
into a single data structure realizes confidential information exchange.
This study reviews research aimed at developing a theory to construct telecommunication systems with nonseparable factorial coding. We continue the research started in [1], reveal, describe in detail, and improve the permutation based frame synchronization method.
Previous studies [2–5] have highlighted the basic principles of constructing nonseparable factorial codes and their characteristics. However, to the best of our knowledge, the procedure to establish frame synchronization for such systems with nonseparable facto- rial coding has not been studied extensively.
The frame synchronization [6–8] procedure is a required com- ponent of all network protocols [9–14]. Detecting frame bound- aries at the receiver can be difficult due to low signal-to-noise ratios, which can be caused by electronic warfare and channel fad- ing. Note that redundancy and forward error correction are com- mon techniques to overcome channel fading.
When receiving a framed data stream, frame synchronization identifies incoming frame alignment signals (sync sequences or syncwords). Conventional frame formats ensure that a syncword


https://doi.org/10.1016/j.eij.2022.05.005
1110-8665/© 2022 THE AUTHORS. Published by Elsevier BV on behalf of Faculty of Computers and Artificial Intelligence, Cairo University. This is an open access article under the CC BY license (http://creativecommons.org/licenses/by/4.0/).



is sent in each frame and is utilized for channel estimation and frame synchronization.
Several methods have been proposed to synchronize codeword frames without using syncwords. For example, a previous study proposed a method [15] that is a variation of the brute-force approach. This method buffers two frame lengths of symbols and attempts decoding at each possible offset until an offset is deter- mined for which decoding is successful. However, this method is computationally more complex and does not perform as well as frame synchronizers that utilize syncwords.
Another study [16] suggested XORing syncwords with data stream to increase the efficiency of frame synchronization. This technique reduces the amount of service information transmitted through the communication channel to establish message frame synchronization, thereby realizing more efficient allocation of com- munication channel resources. However, applying such an approach does not seem applicable in telecommunication systems with block and factorial codes [17–19] compared to data transmission systems with convolutional codes [20,21] because syncword superimposi- tion on the information block can result in deformation of the data block and irrecoverable information loss. Thus, this method is not intended for frame synchronization in systems with factorial coding. Frame synchronization methods, which do not rely on preamble symbols that introduce overhead in terms of energy consumption and channel utilization, deserve special attention. The core concept of such methods [22,23] is to omit the preamble and adapt the frame format; however, the adapted frame format provides a sync-
word [start of the frame delimiter (SFD)] in the frame structure.
Telecommunication systems with nonseparable factorial coding already utilize a nonstandard and redundant frame structure that does not provide a separate SFD field In addition, the codeword structure of a nonseparable factorial code allows it to function as a transport mechanism in short-packet communications [24–32], which is a feature of 5G wireless networks, sensor data networks, machine to machine communications. In such systems, the over- head for syncwords cannot be ignored [33–35].
A previous study [36] developed a framing method for data transmission systems that use nonseparable factorial coding. How- ever, it has several disadvantages, which are summarized as follows.

The convergence time of the synchronization procedure is not optimal because this method does not consider all redundant features of the factorial code’s codeword structure.
The probability of false synchronization is high. This feature becomes more noticeable as bit error probability increases
and accumulation l value decreases. For example, for bit error probability p0 = 0.495, the upper estimate of the probability
of false synchronization is in the range 10—2 — 10—5 when accu- mulation factor  l = 3 ... 51  fragments with  a  length of n  M lr  24 bits (for a permutation length of M  8, where each symbol is encoded using a fixed length binary code). The results of an experimental study [36] indicated that the relative frequency of establishing false synchronization was 6.1 10—3 for 10,000 tests and the indicated parameters.

The goal of this study is to increase the probability of frame syn- chronization for a given accumulation and reduce the probability of false synchronization under high noise conditions for short- packet data systems using nonseparable factorial coding.
To achieve this goal, it is necessary to solve the following tasks.

A method and corresponding algorithm must be developed to establish frame synchronization for short-packet data systems using nonseparable factorial coding.
The probability of establishing frame synchronization under noise conditions of various intensity must be assessed.
A model that can implement the algorithm developed to estab- lish frame synchronization must be constructed.
A comparative analysis of the probability indicators of framing acquisition must be performed under various noise intensity conditions.

In this study, we will evaluate the efficiency of the permutation based frame synchronization method in a model data transmission system with the following constraints,

The communication channel is binary symmetric with indepen- dent bit errors.
The bit error probability in the communication channel is
p0 6 0.495.
The probability of establishing correct synchronization is Ptrue P 0.9997 for any given value of bit error probability p0 6 0.495.
The probability of establishing false synchronization is.Pfalse 6 3 · 10—4. for any given bit error probability value
p0 6 0.495.

This study proposed to use as a syncword a permutation where the minimum Hamming distance to all its circular shifts was the maximum. Furthermore, a correlation processing of data fragments received from the communication channel was introduced to rec- ognize a syncword. Interleaving accumulated fragments acceler- ated the synchronization convergence. To evaluate the permutation-based frame synchronization method, a Python soft- ware model was constructed.
This paper is organized as follows: Section 2 provides the con- cepts for syncword selection and recognition, data stream correla- tion processing, theoretical assessment of probabilistic indicators, and details an outline of the permutation-based frame synchro- nization method; Section 3 presents a case study of the frame syn- chronization method; Section 4 gives the results of the permutation-based frame synchronization method evaluation through simulation; and Section 5 summarizes the findings and concludes the paper.

Materials and methods

As described in the literature [2], the codewords of a nonsepa- rable factorial code are permutations. Here, each permutation p symbol is encoded with a fixed length binary code. The codeword
length is lr   log2M , where M is a permutation length.
The proposed frame synchronization method, and an existing method [36] use a permutation p of length M as a syncword. In addition, these methods use majority processing of the received
data. However, in contrast to the previous method [36], the pro- posed method employs fragment correlation processing.
The principle of constructing a frame synchronization system is demonstrated using an example syncword based on permutation p of length M  8 (the sequence of decimal characters in a set 0, 1, 2, 3, 4, 5, 6, 7 ).
Here, each symbol in the set is encoded with a fixed length bin- ary code. The codeword length is lr  log2M  3 n  M lr  24 , as shown in Table 1.

Selecting a syncword

Note that permutation p used as a syncword must satisfy the following condition: the minimum Hamming distance to all its cir- cular shifts is the maximum.



Table 1
Permutation character encoding scheme.



Let pi (j) be the permutation pi circular shifted to the left by j bits, and let dij be the Hamming distance from pi to its circular shift pi (j), where 0 6 i 6 M! — 1 and 1 6 j 6 n — 1. In addition, let
di = min dij and d = max (di) = max  min dij  . Then the sync-
From the distribution information shown in Fig. 1, it follows that d = max (di) = 12 for M = 8. Here, the number of permuta-
tions with d = 12 is 32.

Remark 3. The number d  corresponding to permutation p is

word can be any permutation p where 6d
i	i
P d

i	ij


Remark 1. Due to the n-periodicity of the distances dij relative to the circular shifts, it follows that for 6j, k, j–k, 1 6 j, k 6 n — 1 and d(pi(j), pi(k)) P d is true for the Hamming distance d(pi(j), pi(k)) between circular shifts pi(j) and pi(k) if dij P d for 6j ∈ [1, n — 1].



Theorem 1. If n > 2, there does not exist a permutation pi for which
2di > n + 1, i.e., d 6 (n + 1)/2.

Proof. The value di is equivalent to the coding distance of the code, in which combinations are formed by all n circular shifts of the binary-represented permutation pi . Thus, for such a code, it is nec-
essary to determine the Plotkin bound relative to the code distance di. To achieve this, the ratios available in the proof of Theorem 1 (Plotkin bounds) are applicable [37]. For every code (n, M, d), where n is the code combination length, M is the code size, d is
the code distance, the inequality M M 1 d 6 nM2/2 holds if M is an even number. For code combinations in the form of circular shifts of the binary-represented permutation pi , M = n is true. Then, n(n — 1)di 6 n3/2 or 2di 6 n + 1 + 1/(n — 1) using n > 1.
Here, 1/(n — 1) < 1 if n > 2; thus, 2di 6 n + 1.
With  odd  number  values  of  M,  the  inequality M(M — 1)d 6 n M2 — 1 /2  is  applied.  If  M = n,  then n(n — 1)di 6 n n2 — 1 /2 or 2di 6 n + 1 if n > 1.
Thus, if n > 2, then d 6 (n + 1)/2. h.
Remark 2. For M = 8 and n = 24, the inequality d 6 (n + 1)/2 is formulated as d 6 12.

The distribution of the di values for every permutation of length
invariant relative to its symbol (codeword) circular shifts, the inversions of bits, and the reverse order of bits. Based on Remark 3, the 32 permutations with d 12 can be obtained appropriately from a single permutation, as shown in Table 2.
In the next step, we constructed a normalized autocorrelation function (ACF) for the permutation given in Table 2. Here, we cal- culate the autocorrelation coefficients as follows:
1q =  n — 2dij

Fig. 2 shows the normalized ACF graph for the permutation given in Table 2.
The number of shifts from 0 to 1 and from 1 to 0 in the binary notation of the permutation in Table 2 is 12. From these data, it is apparent that the performance indicators to establish and maintain clock synchronization are slightly lower than those presented in Table 2 in the literature [36]. This indicates that 33% more time is required to accumulate a certain predetermined number of sig- nificant modulation moments for the permutation in Table 2 in this paper compared to the permutations in Table 2 in the literature [36].

Syncword recognition

Here, we describe the majority processing of the received data to increase data reliability, which was also implemented in the previous study [36]. Note that this processing method allows for repetition and accumulation of syncwords. Let l be an accumula- tion factor defining the number of accumulated bit fragments, where the fragment length is equal to the syncword length. In addition, the accumulation factor is an odd number. Majority pro- cessing defines the refined sequence R. According to this proce-
dure, each error with multiplicity up to l  1 /2 inclusive that
occurs in the corresponding bits of the received fragments is cor-
rected. Thus, the maximum total number of bit errors that majority

M = 8 is shown in Fig. 1.
processing can correct is among the received ln bits.

Correlation processing
((l — 1)/2) · n = ((l — 1)/2) · M)log2Me


After majority processing, the receiver defines Hamming dis- tances to every syncword circular shift from the sequence R. If some Hamming distance is less than or equal to dlim for some sync- word circular shift, the receiver identifies the resulting sequence R with this shift.
Using the permutation in Table 2 as the syncword, the Ham- ming distance between the syncword and its circular shifts is not







Fig. 1. Relationship between the distribution of permutations number and distance
di .
Table 2
Permutation pi , where 6dij P d.	

Decimal notation	Binary notation


  (0, 1, 7, 3, 2, 5, 4, 6)	(000, 001, 111, 011, 010, 101, 100, 110) 




Fig. 2. Normalized ACF graph for permutation given in Table 2.


less than 12; thus, each error in the refined sequence R with mul- tiplicity up to dlim = 5 is corrected.

Probability of bit error in sequence R

Here, assume that the communication channel is binary sym- metric with independent bit errors. Then, the result of majority processing allows us to reduce the probability of the bit error to the value as follows:
X	i	l i
where h3 is the third moment of the Chebyshev–Hermite distribu- tion; H2(x) = x2 — 1 is the Chebyshev–Hermite polynomial, Hk x	1 ku(k) x /u x .
For the Bernoulli distribution, where zero is the mean and one is
the variance, i.e., h3 = a3, where a3 = —(1 — 2p0)/ p0(1 — p0) is the third moment (asymmetry) of the distribution. Eq. (2) follows from these expressions.
We obtain the approximation accuracy [Eq. (3)] by substituting the expression for the absolute fourth moment of the Bernoulli dis- tribution function b4 + 3 = 1/(p0 (1 — p0 )) and inserting the expres-

i=(l+1)/2
standard  normal  distribution  divided  by  ,2ﬃﬃﬃpﬃﬃﬃ,  B3 = 2/p,

In cases where l P 1027 (this value would be necessary when the bit error probability is high), it is impossible to perform the calcula- tion using Eq. (1) by standard means. Therefore, we define an approximation for the bit error probability p*0.

Theorem 2. The probability of bit error after majority processing of l fragments can be approximated as follows:
B4 = 3/,2ﬃﬃﬃpﬃﬃﬃ, B5 = 8/p into Equation (40) from the literature [38].

Using Eq. (3), we can define and present an estimate of the approximation accuracy [Eq. (2)] with l P 1027 for different p0 val- ues (Table 3).

Correct synchronization probability

*		1 — 2p0		2

p0 ﬃ U(x) + 6plﬃﬃpﬃﬃﬃﬃﬃ(ﬃ1ﬃﬃﬃﬃ—ﬃﬃﬃﬃﬃpﬃﬃﬃﬃﬃ)ﬃ · x — 1 · u(x)	(2)
where U(x) =  1  R x	—t	denotes the integral Laplace function,
Correct synchronization probability is the probability of errors in m 6 dlim bits in R:

,2ﬃﬃpﬃﬃ
e 2 dt
—∞
,ﬃﬃ
0 5 p
P	n d	p l
X Cv p v 1
p n—v	4

u(x) = ,1ﬃﬃﬃﬃ e— 2 is the differential Laplace function, x =— l ,ﬃﬃ.ﬃﬃﬃ—ﬃﬃﬃﬃ0ﬃﬃﬃﬃﬃ,
true ( ,
lim ,
0, ) =
n  *0
— *0	( )

2p
and the channel bit error probability p0 ∈ (0; 0.5).
p0 (1—p0 )
v=0

In this case, the approximation accuracy is given as follows:
For  the  syncword  in  Table  2,  Ptrue(24, 5, p0 , l) = P5 0

e		1	 	l		1
Cv p* v 1 — p* 24—v .

+ ,ﬃﬃ1ﬃ—ﬃﬃﬃ2ﬃﬃpﬃ0ﬃﬃﬃﬃﬃﬃﬃﬃﬃ ·	l
,ﬃﬃﬃﬃﬃ +
(1—2p0 )  ·	.
0.4, 0.43, 0.45, 0.47, 0.475, 0.48, 0.485, 0.49, 0.495} depending  on
		




Proof. The distribution Fl x can be approximated as follows (refer to Equations (36) and (40) in the literature [38]):
 h3 
Note that the bit error probability is not given a priori; thus, the frame synchronization procedure should be adaptive. Based on the dependencies shown in Fig. 3, the accumulation factor can vary
widely to achieve a given probability of correct synchronization. In other words, to achieve Ptrue P 0.9997 when p0 = 0.1, the accu-

Fl(x) ﬃ U(x) — 3!,ﬃlﬃ · H2(x) · u(x) 
mulation factor l = 3 is required, when p0 = 0.3, factor l = 19 is
required, and when p0 = 0.45, factor l = 305 is required. The


Table 3
Estimation of approximation accuracy of Eq. (2) with l P 1027.



Fig. 3. Dependencies of correct synchronization probability on accumulation factor for different bit error probabilities.


permutation-based frame synchronization method provides accu- mulation of n-bit fragments from the channel, and the correspond-
This estimation considers the possibility of converting the transmitted syncword into any 2n — Pdlim Cv sequence. Simultane-

probability value and minimum synchronization probability value designed for the synchronization system determine the maximum l value. If there is no synchronism at maximum l, the synchroniza- tion system generates the channel failure signal. As indicated below, for n = 24, dlim = 5, and under the given constraints
Ptrue P 0.9997 and p0 6 0.495, the maximum accumulation factor
ously, a false synchronization event will occur if a communication channel error transforms the transmitted syncword into any of the sequences located at a Hamming distance not exceeding dlim from the possible syncword circular shifts (in geometric interpretation, within the spheres of n-dimensional space with centers at the points corresponding to the syncword circular shifts and radius dlim).  Here,  the  number  of  such  possible  sequences  is

l value is limited to 30,603.	d	v

In addition, while devising the procedure to establish frame


n  1	lim C .	While	calculating	the	relation
(n — 1)Pdlim Cv / 2n — Pdlim Cv , for example, for M = 8, n = 24,

occurrences. Here, false synchronization probability increases with a higher probability p0 and with a lower accumulation factor l. In this case, the frame synchronization procedure should ensure that the probability of establishing false synchronism cannot exceed a given threshold for any arbitrarily high probability of a bit error.
Having defined the probability of correct synchronization, we discuss the false synchronization probability in the following.

False synchronization probability

The upper estimate for false synchronization probability can be
and dlim = 5, we obtain the value 0.076. Note that the points inside the spheres of radius dlim are not equally probable when 0 < p0 < 0.5; thus, the assessment in Eq. (5) is imprecise. Next,
we calculate the exact probability rate of false synchronization.

Theorem 3. False synchronization probability.




Pfalse(n, dlim, p0, l)

calculated approximately as follows:
Xn—1 0

dij

 v—dXij +dlim

  * v+w
	* n—(w+v)!1
(6)

Pfalse(n, dlim, p0, l) 6 1 — Ptrue(n, dlim, p0 , l)	(5)
=
j=1
@v=dij —dlim
Cdij

w=0
Cn—dij p0
1 — p0	A



Proof. The probability of an error leading to an incorrect decision and establishing false synchronization in the refined sequence R is
the probability of occurrence of any error vector that transforms
Then, the correct synchronization probability [refer to Eq. (4)] is obtained as follows:

syncword pi into any of its circular shifts (1 6 j 6 n — 1) in the

Ptrue(n, dlim, p , l, K) =

 Xdlim
K
Cv p* v 1 — p* n—v

(9)

refined sequence R with accuracy up to dlim bits.
As discussed previously, dij is the Hamming distance from sync- word pi to its circular shift by j bits pi (j), 1 6 j 6 n — 1. In this case,



to:
0	n  0	0
v=0
From Eq. (6), the probability of false synchronization changes

the error translates permutation pi into its circular shift pi (j) if it
contains m errors in dij bits of difference between these two sequences, while d	d	m	d . In addition, in the remaining


n—1	dij
Pfalse(n, dlim, p , l, K) =	@	C

K
Cw  p* v+w 1 — p* n—v—w A

n  dij  bits, the occurrence of w more bit errors is possible, whereas 0 6 w 6 m — dij — dlim . The latter restraint is due to the
j=1
v=dij —dlim
w=0

(10)

fact that, for false synchronization, the permutation modified by the error should not differ by greater than dlim bit from the circular
Eq. (10) can be explained as follows. The probability of convert-
ing permutation pi into its circular shift pi (j) is equal [refer to Eq.

shift of permutation pi .
(6)]Pfalse j(n, dlim, p , l) = Pdij
Cv  Pv—dij +dlim Cw
 p* v+w


Pfalse

(n, dlim, p0, l)
1 — p* n—(w+v)). The probability that the channel noise will trans- form a permutation pi into its circular shift pi (j) in K blocks is

0	0	Cv p* v 1 — p* dij —v ×	11
equal to PK	(n, dlim, p , l). Thus, the false synchronization proba-

= XB@ X


B@  v—dij +dlim  w


   w	 n—d —w CACA
bility for the K blocks is given as:



By grouping the factors in Eq. (7), we obtain an expression to
+ Pfalse 2 (n, dlim, p0, l) + ... +

calculate the false synchronization probability [Eq. (6)]. h.
+ Pfalse (n—1)
(n, dlim, p0, l)

Remark 4. For the syncword in Table 2 with dlim = 5, values
n—1
=	P
(n, dlim, p0, l).

two cases, and values dij = 16 are registered in two cases (refer to the normalized ACF graph in Fig. 2). Thus, after grouping the terms,

Graphs  of  P



true

(24, 5, p0, l, K)  and  P



false

(24, 5, p0, l, K)  for

Eq. (6) for the syncword in Table 2 holds:
p0 = 0.495 and K ∈ {1, 2, 3, 4} depending on accumulation factor
l = 1, 3, 5, ..., 30603 are shown in Fig. 5 and Fig. 6.


12  v  X12
v   v+w	 24—v—w !
Dependency graphs Ptrue(24, 5, p0 , l, K) and Pfalse(24, 5, p0 , l, K) for

Pfalse(24, 5, p0, l) = 19

v=7
14
C12

v 7
 v—9
C12 p*0
1 — p*0
p0 = 0.495 and K ∈ {1, 2, 3, 4} depending on the number of accu- mulated fragments, L = l · K = 1, 3, 5, ..., 30603 are shown in Fig. 7

+ 2 X Cv
X Cw p* v+w 1 — p* 24—v—w
(8)
and Fig. 8.


16	!
Pfalse(24, 5, p0 , l, 4) 6 2.68 · 10—9,	Pfalse(24, 5, p0 , l, 3) 6 8.15 · 10—7,

8  0	0
v=11
false (
P
, , 0, , ) 6 .	·
—2

false(24, 5, p0, l, 1) 6 7.55 · 10	for p0 = 0.495.



Remark 5. When performing numerical calculations for the false synchronization probability Pfalse(n, dlim), Eq. (8) is expressed in the model example of this study.
Graphs	Pfalse(24, 5, p0, l)	for	p0 ∈ {0.1, 0.2, 0.3, 0.4,
0.43, 0.45, 0.47, 0.475, 0.48, 0.485, 0.49, 0.495}	depending	on
l  1, 3, 5, ..., 1001 are shown in Fig. 4.
Analysis of the graphs shown in Fig. 4 leads to the following.
While increasing accumulation factor l and calculating the dis-
In the following, we perform an upper estimate for the proba- bility Pfalse(n, dlim, p0 , l, K) calculated using Eq. (10).

Theorem 4. The evaluation of false synchronization probability Pfalse(n, dlim, p0, l, K) can be expressed as follows:

Pfalse(n, dlim, p0, l, K) 6 max {p(n, dlim, K, s)},	(11)
where

tances to all syncword circular shifts, the probability of false syn-
Xn—1 0

dij
v—dij +dlim	K
v	w

chronization exceeds the maximum permissible value with an unknown bit error probability p0. For example, if the analysis of the refined sequence begins with accumulation factor l = 3 and
p0 = 0.4, the probability of false synchronization for l = 3 is
p(n, dlim, K, s) =


j=1



8
@v=dij —dlim





m x
Cdij


w=0
Cn—dij F(n, v + w, s)A ,


n m x


(12)

Pfalse = 0.046. Obviously, this probability is unacceptable. Thus,
>< (s/Nn) +
(1 — s/Nn) —( + ), N(m + w) 6 s;

the following approach is employed to reduce this probability.

Reducing false synchronization probability

The receiver groups the fragments received from the channel
F(n, m + w, s) =
:
((s + 1)/Nn)m+x(1 — (s + 1)/Nn)n—(m+x),
N(m + w) P s + 1;

into K blocks by l fragments. Here, the refined sequences Rk, where k ∈ [1, K], are calculated independently for each block. Synchro- nism is established if each of the sequences Rk corresponds to the same circular shift of syncword.
N  is  a  number  of  segments  into  which  the  segments
[z/n; (z + 1)/n] are divided;
z is a natural number, d — dlim 6 z 6 )n/2e — 1;
s is a natural number, N(d — dlim) 6 s 6 )Nn/2e — 1.




Fig. 4. Dependencies of false synchronization probability for different bit error probabilities on the accumulation factor.



Fig. 5. Dependencies of correct synchronization probability on accumulation factor for bit error 0.495 and various values of K ∈ {1, 2, 3, 4}.


Proof. Here,	consider	the	behavior	of	the	function
f n, v + w, p* = p* v+w 1 — p* n—v—w . The graphs f n, v + w, p* 
v	w ln p*	n  v	w ln 1  p* .  Then,  g' n, v	w, p*
v + w — np* /p* 1 — p* ,	and	g' n, v + w, p* = 0	when

for n = 24 and v + w = {7, 9, 12, 15, 17} depending on p*0 are shown in Fig. 9, where the range of values p*0 ∈ (0, 1) is employed
to improve the visualization of the relationship.
In the following step, it is necessary to determine the point p*0 at which function f n, v w, p* obtains the maximum value. Here, we	assume	that	g n, v + w, p*0 = ln f n, v + w, p*0 
p*0 = (v + w)/n.  Thus,  we  obtain  max f n, v + w, p*0  =

For the model example in this study, the maximum of the func- tions f n, v + w, p*0 ,  d — dlim 6 v + w < n/2  is  located  in p*0 ∈ [7/24; 1/2). When v + w P n/2, the functions increase mono-
tonically over the interval (7/24; 1/2).




Fig. 6. Dependencies of false synchronization probability on accumulation factor for bit error 0.495 and various values of K ∈ {1, 2, 3, 4}.



Fig. 7. Dependencies of correct synchronization probability on the number of accumulated fragments for bit error 0.495 and various values of K ∈ {1, 2, 3, 4}.



Each function f n, v + w, p*0 is monotonic in the intervals (z/n; (z + 1)/n),   where   z   is   a   natural   number d — dlim 6 z 6 )n/2e — 1. Each segment [z/n; (z + 1)/n] is divided into
Estimates (12) for p(n, dlim, K, s) and (11) for Pfalse(n, dlim, p0, l, K)
are formed sequentially based on relations (10) and (13). h.
For the example model, we split segment p*0 ∈ [7/24, 1/2] into

N segments [z/n + i/Nn; z/n + (i + 1)/Nn]0 6 i 6 N — 1. For each
)Nn/2e — N(d — dlim) = )2 · 24/2e — 2(12 — 5) = 10 segments with

natural number s,N(d — dlim) 6 s 6 )Nn/2e — 1, and parameter val- ues p*0 ∈ [s/Nn; (s + 1)/Nn], the following constraints are applied:
f n, v + w, p* = p* v+w 1 — p* n—v—w 6 F(n, v + w, s)	(13)
a step of 1/48. Then, s = 14, 15, ... , 23.The upper estimates of the
probability Pfalse(24, 5, p0 , l, K) for K ∈ {1, 2, 3, 4} are derived based on Eqs. (11) and (12), as shown in Table 4.


where	F(n, m + w, s) = (s/Nn)m+x(1 — s/Nn)n—(m+x), N(m + w) 6 s;
((s + 1)/Nn)m+x(1 — (s + 1)/Nn)n—(m+x), N(m + w) P s + 1..
selected even for p*0 → 1/2 such that the probability of false syn- chronization satisfies the given requirements.




Fig. 8. Dependencies of false synchronization probability on the number of accumulated fragments for bit error 0.495 and various values of K ∈ {1, 2, 3, 4}.



Fig. 9. Dependencies of f n, v + w, p*0 from p*0 for n = 24 and v + w = {7, 9, 12, 15, 17}.


Remark 6. Eqs. (9) and (10), as well as Eqs. (4) and (6), determine the probabilities of correct and false synchronization ‘‘in the point,” i.e., for a separate test with given values of accumulation factor l and the number of blocks K, while ignoring the procedure of sequential l increase and K variation.


Assessments of interval probabilities of synchronization

The synchronization result for the current value of l depends on the synchronization results for the previous values of l. This is due
to the fact that the statistics in the accumulated segments within a single block may differ slightly.
The probability Ptrue final of correct synchronization after the accumulation factor has reached the value of l is estimated by the correct synchronization probability for a fixed value of l as follows:
Ptrue final(n, dlim, p0, l, K) P Ptrue(n, dlim, p0, l, K)	(14)
The probability Pfalse final of false synchronization after the accu- mulation factor has reached the value of l for K 1 is estimated from the above as follows:



Table 4
Upper estimates of false synchronization probability for n = 24, dlim = 5.	
K	1	2	3	4
  Pfalse (24, 5, p0 , l, K) 6 8.03 · 10—2	2.80 · 10—4	9.78 · 10—7	3.42 · 10—9 
Table 5
Segment boundaries [lmin(i), lmax(i)].	
i	1	2	3	4
lmin(i)	30,549	10,457	2779	1
  lmax(i)	30,603	15,273	6971	2083 




K
Pfalse final(n, dlim, p0, l, K) =	Pfalse sum(n, dlim, p0, lmin(i), lmax(i), i),
i=1
(15)
where
Pfalse sum(n, dlim, p0 , lmin(i), lmax(i), i)
lmax (i) 
6	Pfalse(n, dlim, p0, j, i),	(16)
j=lmin (i) 
Pfalse sum(n, dlim, p0 , lmin(i), lmax(i), i) determines the false synchroniza- tion	probability	for	i blocks;lmin(i) 6 l 6 lmax(i);lmin(K) = 1;lmax(1) = l.

Remark 7. Ptrue final(n, dlim, p0 , l, K)and Pfalse final(n, dlim, p0, l, K) are in fact estimates of the cumulative distribution function (CDF) [39] of the number Lfr = Kl prior to establishing the correct or false synchronism, respectively.


Selecting K and l



Fig. 10 shows the graphs for the dependencies of estimates of the correct and false synchronization probabilities calculated using
Eqs. (14) and (15) on the number of accumulated fragments under the given constraints for K  1, 2, 3, 4 and the values defined for the transition points.
The graphs in Fig. 10 define the adaptive synchronization pro- cess at an unknown level of bit error probability p0 6 0.495 for Ptrue P 0.9997 and Pfalse 6 3 · 10—4.
Based on the approach employed to determine frame synchro- nism, we formulate the stages stipulated by the proposed method in the following.

Permutation-based frame synchronization method

The permutation-based frame synchronization method is real- ized through the following stages.

The transmitter sequentially issues a syncword into the com- munication channel. The syncword is a permutation p of length M, where the minimum Hamming distance d to all of its circular


The values of K and the segment l	i l	i  bounds are
shifts is the maximum. For example, for M = 8, such a syncword

min  , max
selected	to	satisfy	the	inequality Pfalse final(n, dlim, p0, l, K) 6 Pfalse max, where Pfalse max is the limit value for the probability of false synchronization, and p0 max is the limit value for the bit error probability.
Based on Eq. (15), the constraints for the individual terms
Pfalse final(n, dlim, p0 , l, K) are defined as follows:
Pfalse sum (n, dlim , p0 , lmin(i), lmax(i), i) 6 ci · Pfalse max	(17)
In addition, ci P 0, PK 1ci = 1.
is the permutation p  000, 001, 111, 011, 010, 101, 100, 110
with precision up to its circular shift by the number of bits that is a multiple of the symbol length in its binary representation lr = 3, bit inversion, and their reverse order.
The receiver accumulates K blocks received from a communica- tion channel comprising l fragments of n bits. Here, the K and l values are transformed according to the above procedure.
For each block, the refined sequences Rk, where k   1, K , are
calculated independently. Each bit of this sequence is calculated on a majority basis based on the corresponding bits of the
received fragments. Thus, if ‘‘ones” dominate in the i-th bits of

Note that defining the bounds for segments begins with i = 1.
[lmin(i), lmax(i)]
a fragment, the i-th bit of the refined sequence is assigned a value of ‘‘one.” In contrast, if they contain more ‘‘zeros,” it is

Then lmax 1	min l : Ptrue n, dlim, p0 , l, 1 P Ptrue min. Thus, via

an analogy with Eq. (14), the following inequality holds:Ptrue final(n, dlim, p0 , lmax(1), K) P Ptrue min. For the example model  with  n = 24,  dlim = 5  for  Ptrue min = 0.9997,  and p0 max  0.495, we obtain lmax 1  30603.

The	values	of
lmin(i) = min (l) : Pfalse sum(n, dlim, p0 , l, lmax(i), i) 6 ci · Pfalse max.
The  values  lmin(i)  define  the  upper  bounds  lmax(i + 1):
lmax(i + 1) = [lmin(i) · (i/(i + 1))] — prtsgn	where
assigned a value of ‘‘zero.”
The Hamming distances for all syncword circular shifts are cal- culated for each refined sequence Rk. Here if one distance is less than or equal to dlim  d 1 /2 , the refined sequence is iden- tified with the circular shift to which this distance corresponds.
Synchronism is established if each of the sequences Rk, where k 1, K , are identified by the same syncword circular shift; otherwise, the operations to detect the syncword are repeated


prtsgn =
  0 if [lmin(i) · (i/(i + 1))] is odd; .
beginning from the second stage in the current list.
The number of accumulated fragments can be increased

Here, the method used to select the values of K, lmin(i), lmax(i),
i ∈ [1; K] applies to any given constraint.
For the example model, Pfalse max = 3 · 10—4. According to Table 4 and	from	Eq.	(16),	we	obtain
Pfalse sum(24, 5, 0.495, 1, 30603, 4) 6 1.05 · 10—4. Thus, K = 4, and
sequentially to a predetermined threshold lmax 1 . Here, if syn- chronism has not been established after reaching this threshold, the search procedure is terminated, and a channel failure mes- sage is output by the system.

Evaluation

Pfalse sum(24, 5, 0.495, 1, lmax(4), 4)  P3
Pfalse sum (n, dlim ,



p0 , lmin(i), lmax(i), i).
i=1
To evaluate the permutation-based frame synchronization

Here, assume that c1 = 1/8, c2 = 3/4, and c3 = 1/8. Then, the boundaries of the segments lmin i , lmax i  take the values given
in Table 5.
The number of accumulated fragments is Lfr = Kl, and the num- ber of accumulated bits is L = Kln.
method described in Subsection 2.10, a Python software model was developed to transmit information with data factorial coding. The simulation parameters are given in Table 6.
The algorithm for the model frame synchronization system is shown in Fig. 11.




Fig. 10. Dependencies of estimates of probabilities of correct and false synchronization on the number of accumulated fragments for the adaptive synchronization process.



Table 6
Simulation parameters.

Communication channel	Binary symmetric

Bit errors	Independent
BER	0.4 6 p0 < 0.498
Number of tests	103 , 104
Syncword	p = (0, 1, 7, 3, 2, 5, 4, 6) = (000, 001, 111, 011, 010, 101, 100, 110)
K	4
lmin(i) values	30549, 10457, 2779, 1
lmax(i) values	30603, 15273, 6971, 2083





In this evaluation, the permutation given in Table 2 was adopted as a syncword. Segment boundaries lmin(i), lmax(i) are defined above for Ptrue P 0.9997, Pfalse 6 3 · 10—4 for any given value
of bit error probability p0 6 0.495. In addition, 10,000 tests were
conducted to accurately determine the statistical indicators of frame synchronization.


Results and discussion

The graphs in Fig. 12 show the dependencies of the relative fre- quency Wtrue(24, 5, p0 , l, K) of establishing correct frame synchro- nism on the fixed value of accumulation factor l for BER p0 = 0.4
and number of blocks K ∈ {1; 2; 3; 4}. Here, each value of Wtrue 24, 5, p0 , l, K was verified experimentally across 1000 tests. The markers shown in Fig. 12 also illustrate the corresponding
graphs of the theoretical dependencies Ptrue from l according to Eq. (9).
Note that the theoretical and experimental dependencies shown in Fig. 12 have the same distribution. In addition, the obtained p-values for the Pearson criterion interpreted according to the methodology described in the literature [40] are close to one. The same conclusions were made for the probability of false synchronization. This indicates the adequacy of the constructed model.
Fig. 13 shows the graph of the experimentally obtained CDF Wtrue final(24, 5, p0, l, K) = K* l* 6Kl Wtrue(24, 5, p0, l*, K*) on the num- ber of processed fragments Lfr = Kl for p0 = 0.495 across 10,000 tests.
In Fig. 13, the dashed line shows the CDF lower estimate calcu- lated by Equation (14), and the dash-dotted line represents the experimentally determined CDF for the previous method [36] at
p0 = 0.495.

Remark 8. No false synchronizations were observed in 10,000 tests during the experimental analysis of the developed method, for BER p0 = 0.495.

The graphs in Fig. 13 confirm the relatively rough estimate obtained by Equation (14). The results also indicate that the pro- posed method allows reaching the set probabilistic indicators of frame synchronization faster than the previous method [36]. How- ever, certain value ranges for the number of accumulated frag- ments were determined (Lfr = 1 ... 14984 in the given graph), where the relative frequency of correct synchronization for the previous method [36] is higher. In this case, the previous method
[36] does not satisfy the requirements for the probability of false synchronism establishment. Note that there is a potential for com- bined application of both the previous and proposed methods; however, this is beyond the scope of the current study.




Fig. 11. Algorithm of the frame synchronization system.


It  necessary  to  consider  the  behavior  of  the  CDF Wtrue final(24, 5, p0, l, K) on Lfr = Kl for the BER p0 6 0.498 (Fig. 14). Here, the K and l values were determined for p0  0.495, as shown in Table 5. For each value of BER, 1000 tests were conducted.
The graphs in Fig. 14 determine the probabilistic indicators to establish correct synchronism using the frame synchronization system at various values of BER p0.
Fig. 14(b) shows that when the BER exceeds the limit value (i.e., p0 0.495 in the example model), the requirements for correct synchronization  probability  may  be  violated.  Thus, Wtrue final(24, 5, 0.496, 30603, 1) = 0.997,	Wtrue final(24, 5, 0.497, 30603, 1) = 0.920, and Wtrue final(24, 5, 0.498, 30603, 1) = 0.519. In
this case, the relative frequency of establishing false frame syn- chronism	is	Wfalse final(24, 5, 0.496, 30603, 1) = 0.003,




Fig. 12. Dependencies of Wtrue(24, 5, p0, l, K ) on the fixed value of l.



Fig. 13. CDF for BER p0 = 0.495.


Wfalse final(24, 5, 0.497, 30603, 1) = 0.001, and Wfalse final(24, 5, 0.498, 30603, 1 0.033. In addition, the relative frequency of communication  channel  failure  (a  situation  in  which
At this stage, it is possible to define and demonstrate (Fig. 15) the dependency of the average value of the number of accumulated
fragments prior to establishing frame synchronism L— on BER p .

L = Kl = 30603 synchronization was not found) is 0.003 for
fr	0

fr
p0  0.496, 0.080 for p0  0.497, and 0.465 for p0  0.498.
It is important to note that for maximum efficiency of the pro- posed method, bit error probability must be predicted as accu- rately as possible. However, the procedure used to select the moments to alter the K and l values can be adaptive, depends on bit error probability, and can be determined, for example, accord- ing to the average number of accumulated fragments before frame synchronism is realized.
Fig. 15 illustrates the exponential nature of the increase in the average value of the number of accumulated fragments prior to establishing frame synchronism (depending on the BER). This dependency can be employed for adaptive changes in the value change moments of the K and l value in the frame synchronization system.
Note that according to the permutation-based frame synchro- nization method described in Subsection 2.10, the refined sequences Rk, k ∈ [1, K], are calculated independently. Each bit of




Fig. 14. CDF for BER: (a)p0 6 0.43; (b)0.45 6 p0 6 0.498.



Fig. 15. Average number of accumulated fragments before establishing frame synchronism on BER.


these sequences is calculated on a majority basis based on the cor- responding bits of the received fragments.
In the constructed model, for which the results are shown in Figs. 13–15, the fragments that define sequences Rk stay the same when the values of K and l are varied. When increasing l, new frag- ments just supplement the sets of fragments that define sequences Rk (for the constant K, each next value of l results in each set of fragments being supplemented with only two new fragments). Thus, the number of supplemented fragments is relatively small, e.g., 8 fragments for l 50 and K 4, what is only 4%. Thus, the result of the majority processing of received bits is highly corre- lated with the result obtained in the previous step for a smaller l value.
The following approach is proposed to reduce this correlation. The frame synchronization system accumulates all the received fragments in one buffer and then randomly distributes the frag- ments equally between K sets of fragments that define sequences
Rk. Here, if synchronization is not established in this step, the recei- ver also accepts new fragments and writes them to a general buf- fer. Then, the synchronization system again distributes the fragments randomly between the K sets of fragments. This approach to fragment processing is referred to as interleaving because the specified random distribution of fragments between K sets can be achieved by interleaving fragments in a common array in the buffer.
Fig. 16 shows the graph of the experimentally obtained CDF Wtrue final(24, 5, p0 , l, K) for the proposed processing approach with interleaving compared to the approach without interleaving. Here, all model parameters are the same as those in the previous exam- ple model, and the results are shown in Fig. 13.
The graphs in Fig. 16 show the effectiveness of interleaving fragments prior to calculating the Rk values. We found that the interleaving process reduces the required number of fragments received from the communication channel to establish synchro-




Fig. 16. CDF for BER p0 = 0.495 (with interleaving).



Fig. 17. Average number of accumulated fragments before establishing frame synchronism on BER (with interleaving).



nization. As a result, the time required to establish a communica- tion session is reduced.
In Fig. 17, the dependencies of the average value of the number of accumulated fragments before establishing frame synchronism L— on BER p are shown for the proposed method with interleaving
compared to without interleaving.
The graph in Fig. 17 demonstrates the positive effect of inter- leaving. This effect becomes particularly noticeable with increasing
BER. For example, for p0 0.495, the average number of accumu- lated fragments obtained with the interleaving approach is reduced by 29.4%, i.e., 11,060 fragments compared to 15,667 fragments.
However, realizing this effect requires sufficient buffer memory resources to implement the proposed frame synchronization method with interleaving of accumulated fragments. The size of the buffer used to store the received fragments depends on the




Fig. 18. Buffer size required to store increasing numbers of accumulated fragments.


number of fragments. For the implemented Python model, Fig. 18 shows the buffer sizes required for increasing numbers of accumu- lated fragments.
Thus, the procedure used to interleave accumulated fragments involves a tradeoff between memory costs and the time required to realize synchronization and establish a communication session.


Conclusions

The paper has presented a permutation-based frame synchro- nization method for data communications with short packets. In this method, the binary representation of permutation used as a syncword must satisfy the a single condition, i.e., the minimum Hamming distance to all its circular shifts is the maximum.
The results of this study suggest that, through the correlation processing and majority processing, the proposed frame synchro- nization method effectively realizes frame synchronization in data transferring systems under adverse noise conditions. The proce- dure for selecting the synchronization system parameters is imple- mented in a model data transmission system with the bit error
probability p0 6 0.495, the probability of correct synchronization
Ptrue P 0.9997, and the probability of false synchronization
Pfalse 6 3 · 10—4 .
We found that the proposed method reduces the amount of received data, which, in turn, reduces the time required to estab- lish a connection. This leads to an increase the time to transfer user data.
In addition, we found that interleaving the accumulated frag- ments realizes further reduction of the required number of received fragments at the cost of increased memory usage on the
receiver. For the given example with a BER of p0  0.495, the aver-
age number of accumulated fragments was reduced from 15,667 to 11,060 fragments.
The proposed frame synchronization method can be imple- mented effectively in systems that use nonseparable factorial cod- ing, but is not limited to these systems. A potential application of the permutation-based frame synchronization method is nonorthogonal multiple access (NOMA) [41–43], which is a
promising radio access method in next-generation wireless com- munications, particularly in the Internet of Things context. The NOMA principles allow multiple users to be superimposed on the same resource. As a result, the noise immunity of such systems is reduced. Therefore, resource management and interference mitiga- tion methods for ultradense networks, including the realization of reliable frame synchronization, require improved efficiency.

Declaration of Competing Interest

The authors declare that they have no known competing finan- cial interests or personal relationships that could have appeared to influence the work reported in this paper.

Acknowledgments

The authors are grateful to the Honorary Prof. of Cherkasy State Technological University, Dr. Valerii Shvydkyi for helpful remarks and discussion of the obtained results. This research was funded from the Ministry of Education and Science of Ukraine under grant 0120U102607. E.F. was supported by the nominal scholarship to young scientists - Doctors of Sciences for 2021, founded by the Ver- khovna Rada of Ukraine, under grant 0121U112454.

References

Faure E, Shcherba A, Stupka B. Permutation-based frame synchronisation method for short packet communication systems. In: Proc. 11th IEEE Intl. Conf. on Intelligent Data Acquisition and Advanced Computing Systems: Technology and Applications (IDAACS), Cracow, Poland, 22-25 Sept.. p. 1073–7.
Faure EV. Factorial coding with data recovery. Visnyk Cherkaskogo Derzhavnogo Tehnologichnogo Universitetu 2016;2:33–9.
Faure EV. Factorial coding with error correction. Radio Electron Comput Sci Control 2017;3(3):130–8.
Faure EV, Shcherba AI, Kharin AA. Factorial code with a given number of inversions. Radio Electron Comput Sci Control 2018;2(2):143–53.
Faure EV, Shvydkyi VV, Lavdanskyi AO, Kharin OO. Methods of factorial coding of speech signals. Radio Electron Comput Sci Control 2019;4(4):186–98.
Ling	F.	Synchronization	in	digital	communication systems. Cambridge: Cambridge University Press; 2017.
Massey J. Optimum frame synchronization. IEEE Trans Commun 1972;20 (2):115–9.



Scholtz R. Frame synchronization techniques. IEEE Trans Commun 1980;28 (8):1204–13.
Hercog D. Communication protocols, principles, methods and specifications. Springer International Publishing; 2020.
König H. Protocol engineering. Berlin, Heidelberg: Springer Berlin Heidelberg; 2012.
Popovic M. Communication protocol engineering. 2nd ed. New York, USA: CRC Press; 2018.
Kartaschoff P. Synchronization in digital communications networks. Proc IEEE 1991;79(7):1019–28.
Hansheng W, Xiaoyi Q, Lieguang Z, Fuqin X. Coding, decoding, and recovery of clock synchronization in digital multiplexing system. IEEE Trans Commun 2003;51(5):825–31.
Khlaponin Y, Khalifa EK, Khlaponin D, Selyukov A, Tolbatov A, Tolbatov V, et al. Method of improving the stability of network synchronization in multiservice macro networks. CEUR Workshop, Proceedings 2020;2654:786–97.
Hamkins J. Frame synchronization without attached sync markers. Aerospace Conf 2011;2011:1–7.
Bregman BF, Kvashennikov VV, Method of code frame synchronization of messages, R.F. Patent 2 459 366, 2006.
Al-Azzeh JS, Ayyoub B, Faure E, Shvydkyi V, Kharin O, Lavdanskyi A. Telecommunication systems with multiple access based on data factorial coding. Int J Commun Antenna Propag 2020;10(2):102–13.
Faure E, Shcherba A, Vasiliu Y, Fesenko A. Cryptographic key exchange method for data factorial coding. CEUR Workshop, Proceedings 2020;2654:643–64.
Shcherba A, Faure E, Lavdanska O. Three-pass cryptographic protocol based on permutations. In: Proc. 2020 2nd IEEE Intl Conf. on Adv. Trends in Inf. Theor., Kyiv, Ukraine, 25 Nov.. p. 281–4.
Lin S, Costello D. Error control coding. 2nd ed. NJ, USA: Prentice Hall; 2004.
Kong JJ, Parhi KK. Interleaved convolutional code and its viterbi decoder architecture. EURASIP J Adv Signal Process 2003;13:2003.
Bloessl B, Dressler F. mSync - Frames without preambles. Proceedings of the 21st ACM international conference on mobile computing and networking (MobiCom 2015)”, 4th ACM Software Radio Imple-mentation Forum (SRIF 2015). Paris, France: ACM; 2015.
Bloessl B, Dressler F. mSync: physical layer frame synchronization without preamble symbols. IEEE Trans Mob Comput 2018;17(10):2321–33.
Durisi G, Koch T, Popovski P. Toward massive, ultrareliable, and low-latency wireless communication with short packets. Proc IEEE 2016;104(9):1711–26.
Lee B, Park S, Love DJ, Ji H, Shim B. Packet structure and receiver design for low latency wireless communications with ultra-short packets. IEEE Trans Commun 2018;66(2):796–807.
Bana A, Trillingsgaard KF, Popovski P, de Carvalho E. Short packet structure for ultra-reliable machine-type communication: tradeoff between detection and decoding. In: Proceedings of the IEEE Intl conf. on Acoust., Speech and Signal Process. (ICASSP), Calgary, AB, Canada, 15-20 April 2018. p. 6608–12.
Zaman A, Hassan Z, Odarchenko R, Hassan S, Ahmed S, Bilal M, et al. Wireless underground sensor networks: packet size optimization survey. CEUR Workshop, Proceedings 2020;2616:353–65.
Salamat Ullah S, Liew SC, Liva G, Wang T. Implementation of short-packet physical-layer network coding. IEEE transactions on mobile computing, 1–1, 2021.
Salamat Ullah S, Liew SC, Liva G, Wang T. Short-Packet Physical-Layer Network Coding. IEEE Trans Commun 2020;68(2):737–51.
Wu J, Kim W, Shim B. Pilot-less one-shot sparse coding for short packet-based machine-type communications. IEEE Trans Veh Technol 2020;69(8):9117–20.
Östman J, Durisi G, Ström EG, Co skun MC, Liva G. Short packets over block- memoryless fading channels: pilot-assisted or noncoherent transmission? IEEE Trans Commun 2019;67(2):1521–36.
Liu X, Zhang X. Rate and energy efficiency improvements for 5G-based IoT with simultaneous transfer. IEEE Internet Things J 2019;6(4):5971–80.
Nguyen ATP, Le Bidan R, Guilloud F. Trade-off between frame synchronization and channel decoding for short packets. IEEE Commun Lett 2019;23 (6):979–82.
Nguyen ATP, Le Bidan R, Guilloud F. Superimposed frame synchronization optimization for finite blocklength regime. In: Proceedings of the IEEE wireless communications and networking conference workshop (WCNCW), Marrakech, Morocco, 15-18 April 2019. p. 1–6.
Nguyen ATP, Guilloud F, Le Bidan R. On the optimization of resources for short frame synchronization. Ann Telecommun 2020;75(11–12):635–40.
Faure EV, Shvydkyi VV, Shcherba AI, Kharin OO, Stupka BA. Method of cyclic synchronization based on permutations. Visnyk Cherkaskogo Derzhavnogo Tehnologichnogo Universitetu 2020;4:67–76.
MacWilliams FJ, Sloane NJA. The theory of error-correcting codes. Amsterdam, Netherlands: North-Holland; 1977.
Senatov VV. On the real accuracy of approximation in the central limit theorem. Siber Adv Math 2017;27(2):133–52.
Deisenroth MP, Faisal AA, Ong CS. Mathematics for Machine Learning. Cambridge University Press; 2020.
Rukhin A, Soto J, Nechvatal J, Smid M, Barker E, A statistical test suite for random and pseudorandom number generators for crypto-graphic applications, Spec,” Pub, pp. 800-822 rev. 1a. Gaithersburg, MD: NIST, 2010.
Abozariba R, Naeem MK, Patwary M, Seyedebrahimi M, Bull P, Aneiba A. NOMA-based resource allocation and mobility enhancement framework for IoT in next generation cellular networks. IEEE Access 2019;7:29158–72.
Liu X, Zhang X. NOMA-based resource allocation for cluster-based cognitive industrial internet of things. IEEE Trans Ind Inf 2020;16(8):5379–88.
Liu X, Zhai XB, Lu W, Wu C. QoS-guarantee resource allocation for multibeam satellite industrial internet of things with NOMA. IEEE Trans Ind Inf 2021;17 (3):2052–61.
