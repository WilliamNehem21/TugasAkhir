

Electronic Notes in Theoretical Computer Science 227 (2009) 21–36
www.elsevier.com/locate/entcs
Timed P Automata
Roberto Barbutia,1 Andrea Maggiolo-Schettinia,1 Paolo Milazzoa,1 Luca Teseib,2
a Dipartimento di Informatica - University of Pisa Largo Bruno Pontecorvo 3, 56127 Pisa - Italy
b Dipartimento di Matematica e Informatica - University of Camerino Via Madonna delle Carceri 9, 62032 Camerino (MC) - Italy

Abstract
To study systems whose dynamics changes with time, an extension of timed P systems is introduced in which evolution rules may vary with time. The proposed model is a timed automaton with a discrete time domain and in which each state is a timed P system. A result on expressive power and on features of the formalism sufficient for full expressiveness is proved and, as an application example, the model of an ecological system is given.
Keywords: Timed Automata, P Systems, Ecological models.


Introduction
P systems were introduced by Paˇun in [8] as distributed parallel computing devices inspired by the structure and the functioning of a living cell. A P system consists of a hierarchy of membranes, each of them containing a multiset of objects, rep- resenting molecules, a set of evolution rules, representing chemical reactions, and possibly other membranes. For each evolution rule there are two multisets of ob- jects, describing the reactants and the products of the chemical reaction. A rule in a membrane can be applied only to objects in the same membrane. Some ob- jects produced by the rule remain in the same membrane, others are sent out of the membrane, others are sent into the inner membranes, which are identified by their labels. Evolution rules are applied with maximal parallelism, meaning that it cannot happen that some evolution rule is not applied when the objects needed for its triggering are available.

1 Email: {barbuti,maggiolo,milazzo}@di.unipi.it
2 Email: luca.tesei@unicam.it, Work partially supported by FIRB - LITBIO, Italy.

1571-0661/© 2008 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2008.12.102

Many variants and extensions of P systems exist that include features to increase their expressiveness and that are based on different evolution strategies (for instance, different forms of parallelism). Among the most common extensions we mention P systems with dissolution rules that allow a membrane to disappear and release in its environment all the objects it contains. We mention also P systems with priorities, in which a priority relationship exists among the evolution rules of each membrane and can influence the applicability of such rules, and P systems with promoters and inhibitors, in which the applicability of evolution rules depends on the presence of at least one occurrence and on the absence, respectively, of a specific object. An introduction to P systems in which all the variants we mentioned are described can be found in [10]
In [4] a class of P systems, called timed P systems, has been proposed. In timed P systems, with each rule an integer is associated that represents the time needed by the rule to be entirely executed.
P systems, originally defined as a model of computation inspired by biology, have also been used to model biological systems, in particular biomolecular sys- tems. Recently, in [3], P systems have been used to model ecological systems in the framework of conservation biology. The population dynamics of the Bearded Vulture of the Catalan Pyrenees, and of five subfamilies on which the vulture feeds on, is studied.
In the framework of conservation biology we are interested in the study of the population dynamics when the environment conditions may change. Consider, as an example, populations whose dynamics changes with seasons.
To describe such systems, we introduce an extension of timed P systems in which evolution rules can change over time. This is expressed by means of a timed automaton [1], with a discrete time domain, in which each state (location) is a timed P system. Timed P systems in different locations of the automaton have the same membrane structure, but possibly different evolution rules. As usual in timed automata, a transition of a timed P automaton may have conditions on the value of clocks and may reset some clocks. The execution of a timed P automaton starts from a location designated as the initial one. The timed P system associated with this location is executed and the passage of time in the timed P system coincides with the updates of the clocks of the timed P automaton. When such clocks take values that satisfy the condition of some outgoing transition of the current location of the automaton, such a transition can be performed.
When a transition from a location q to a location q' of the automaton occurs, the timed P system in q stops its execution, all the objects in its membranes are transferred to the same membranes in the target location q', and the timed P system in q', with its own timed evolution rules, is started.
In order to increase the modelling capabilities of timed P automata, we allow some changes to be made in the multisets of objects transferred from the timed P system in q to the timed P system in q' when the transition is performed. In particular, we enrich transitions with operations for adding objects to and removing objects from the skin membrane. Transitions enriched with operations for removing

objects can be performed only if such objects are present in the skin membrane.
The possibility of changing rules when moving from a location to another al- lows us to model changes of dynamics determined by changes in the environmental conditions. As an example, we could have locations corresponding to seasons and population dynamics could be different in different seasons. Moreover, the possi- bility of adding and removing objects in the skin membrane allows us to model changes of the population composition determined by changes in the environmental conditions.
In [5] a class of contents-timed P systems is defined in which timed evolution rules are used and their execution times may vary as the timed P system evolves, depending on the state of the system itself. This work is related to ours as it also defines a variant of P systems in which the reaction rules can change dynamically. However, the changing is limited to the execution times of the rules, which remain fixed. In timed P automata, instead, the rules can be entirely rewritten, depending on time passing (but not on the state of the timed P system).
In this paper, after recalling the definition of timed P systems taken from [4], in Section 2.1, we define timed P automata, in Section 2.2. In Section 3 we study the expressive power of the model and we show that in order to have universality it is sufficient to consider timed P automata whose locations are associated with systems of only one membrane, and in which all objects are equal, but for one particular object whose use in reaction rules is constrained (a bi-stable catalyst). In Section 4 we show an application of timed P automata to the modelling of an ecological system, namely the population of Saddleback birds on Mokoia Island. The timed P automaton we consider is derived from the mathematical model given in [2] to guide the reintroduction of extirpated birds in the New Zealand mainland. Finally, in Section 5 we draw some conclusions.

The Model
In this section we introduce timed P automata, a computational model that brings together timed automata [1] and P systems [9]. In this model time plays a funda- mental role both by expressing a duration for the evolution rules of a P system and by specifying the changing of rules over time. Roughly speaking, a timed P automa- ton (TPA for short) consists of a timed automaton, with a discrete time domain, in which each state (location) is a timed P system. Different timed P systems [4], in the states of the automaton, have the same membrane structure but different rules. A timed P system, introduced formally in Section 2.1, is a P system in which evolution rules require a given number of time units to be completed. A timed P automaton switches from a location to another one depending on the values of
clocks (as in timed automata).
We use natural numbers N for representing units of time. While the automaton stays in a location its clocks increase by one time unit simultaneously and with the same speed. The time passing measured by clocks is synchronised and consistent
with the time passing used by the timed evolution rules of the timed P system

running in the location. The formal machinery of timed automata that we need for our purposes is introduced in Section 2.2.

Timed P Systems
A P system consists of a hierarchy of membranes that do not intersect, with a distin- guishable membrane – called the skin membrane – surrounding them all. We assume membranes to be labelled by natural numbers. Membranes contain multisets of ob- jects, evolution rules and possibly other membranes. In the biological metaphor, objects represent molecules swimming in a chemical solution, and evolution rules represent chemical reactions that may occur inside the membrane containing them. An evolution rule is a pair of multisets of objects, denoted u −→ v, describing reac- tants and products of a chemical reaction. In timed P systems the evolution rules
take the form u −→n  v, where n ∈ N>0 (positive natural numbers) represents the time

units needed for the application of the rule to be completed.
A catalyst c is a special object which is involved only in rules of the form cu −→n

cv,

with u, v not containing c. In the biological metaphor its role is to facilitate the reaction without being transformed or lost. A special case of catalyst is the bi-stable catalyst [11] that has two forms, c and c, and is involved only in reactions of the
form cu −→n  cv or of the form cu −→n  cv.
An evolution step of a timed P system can be described as follows. Rules in a membrane can be applied only to objects in the same membrane, and they cannot be applied to objects contained in inner membranes. The rules must contain target indications specifying the membranes where the new objects, obtained by the rule application, are sent. The new objects either remain in the same membrane, or can be sent out of the membrane, or can be sent into one of the inner membranes precisely identified by its label.
The multiset of an evolution rule describing the products of the represented chemical reaction contains objects having one of the following forms: ahere – the new object a remains in the same membrane of the applied rule; aout – the new object a is sent outside; ainj – the new object a is sent into the membrane labelled by j.
Rules application is done by using maximal parallelism: at each evolution step a multiset of instances of evolution rules is chosen non–deterministically in such a way that no other rules can be further applied to the system. In a timed P system the application of timed rules with the completion time n = 1 is identical to that of P systems. It consists of removing all the reactants of the chosen rules from the system when they are applied. After 1 time unit the products of the rules are added to the system by taking into account the target indications. If the completion time n is greater than 1 the reactants are immediately removed and the products of the rule are added to the system exactly after n time units.
Let us formally define timed P systems.  A multiset over an alphabet V =
{a1,..., ah} is a mapping M : V → N. M (ai) denotes the number of copies of the element ai in the multiset M . We often represent a multiset M by a string w ∈ V ∗ such that if M (ai) = n then ai occurs n times in the string w, in any order. In

the following we use the usual notation V + to denote the set of non-empty strings of elements of V , and ϵ to denote the empty string. Moreover, we overload the set operators ∈, ∪, \, ∩, ⊆ with their multiset counterparts.
Definition 2.1 [Timed P Systems] A timed P system Π is a tuple




where
⟨V, μ, w1,..., wm, R1,..., Rm⟩

V is an alphabet whose elements are called objects.
μ is a membrane structure consisting of a hierarchy of m membranes labelled by 1, 2,..., m. The skin membrane is labelled by 1.
wi (i = 1, 2,..., m) is a string of V ∗ representing a multisets of objects enclosed in membrane i.
Ri (i = 1, 2,..., m) is a finite set of timed evolution rules associated with the
membrane i.  The rules are of the form u −→n  v, n ∈ N>0,u ∈ V +, and v ∈
{ahere, aout, ain | a ∈ V, 1 ≤ j ≤ m}∗.
A timed P structure P is a timed P system without the sets of timed evolution rules: P = ⟨V, μ, w1,..., wm⟩. A timed P frame F is a timed P structure without the multisets of objects contained in the membrane structure: F = ⟨V, μ⟩. We denote by P the class of all timed P systems.
Note that, for the sake of simplicity while introducing a new model, we use a “basic” version of P systems, without priority among rules and without mem- brane dissolving. Moreover, note that the timed extension of P systems we use is essentially the same introduced in [4].
To describe precisely the dynamics of a timed P system we introduce a multiset of pending rules called U .
Definition 2.2 [Pending rules] A multiset of pending rules U is a multiset of ele- ments of the form −→k i v, with k > 0. Every element of this form is originated by a
timed evolution rule u −→n  v, n > 1, in a set Ri of a timed P system.
One element −→k i v stores the information that an instance of the evolution rule was fired in the past and is waiting k time steps to be completed, with 0 < k < n.
We denote by U the set of all multisets of pending rules.
We describe the possible evolutions of a timed P system Π by a transition relation

−→1
between configurations in the set {(Π, U ) | Π ∈ P, U ∈ U}.

Definition 2.3 [Timed P Step] A pair (Π, U ) can perform a timed P step −→1
pair (Π', U') if and only if:
to a

Π' is a timed P system resulting from an evolution step of Π using maximal parallelism as described above. Differently from a classical evolution step:

· the effects of the rules of the form u −→1
v that have been fired in the evolution




Fig. 1. A timed P system calculating the least common multiple of n1 and n2

step are visible in Π', i.e., the reactants have disappeared and the products of the rules are available
the effects of the rules u −→n  v with n > 1 that have been fired in the evolution
step are half visible in Π'. More precisely, the reactants have disappeared, but the products are not yet available (they are stored as pending rules)
for every element −→1 i v in U , the objects of v are inserted into the membrane
structure of Π' as if they had been generated from a timed evolution rule with a completion time 1 in the membrane labelled by i;
U' is the multiset union of
the multiset of all elements −k−−→1 i v derived from all elements −→k i v, k > 1, in
U ; and
the multiset of all elements −n−−→1 i v, n > 1, representing that an instance of a
timed evolution rule u −→n  v ∈ Ri, for some i, has been fired in the evolution step of Π.


We write (Π, U ) /−→1
if it does not exist any (Π', U') such that (Π, U ) −→1
(Π', U').

This means that the system is steady: no evolution rule can be fired and there are no pending rules left. Typically, this happens when a timed P system has completed its computation.
In Figure 1 an example of a timed P system is shown. Graphically, boxes represent membranes and their nesting reflects the hierarchy. In the example given there is only the skin membrane. Inside each box we depict the evolution rules for the corresponding membrane. In evolution rules we omit the completion time if it
is 1 and we omit the subscript here for objects, in the products, that remain in the
same membrane. The free symbols inside the box represent the objects that are present at the beginning of the computation.
The defined system computes the least common multiple of n1 and n2, namely lcm(n1, n2). The idea is to let an object a and an object b appear in membrane 1 for one time unit every n1 and n2 time units, respectively. The first time when a and b appear together is exactly after lcm(n1, n2) time units. It is hence sufficient to count the time units until a and b appear together to obtain the results. The

system consists of two membranes: membrane 1, in which the computation takes place, and membrane 2, where one object c is sent every time unit. The number of objects c in membrane 2 will represent the final result of the computation.
The initial configuration has one a and one b in membrane 1, together with an object e and an object t. Object t is used at each step to send one c into membrane
2. Object e is used to check whether a and b appear together. Actually, the rules consuming a and b remove them for n1 − 1 and n2 − 1 time units, respectively. After these times they appear again as a' and b', respectively. If they do not appear together, the rule ea' → ea (eb' → eb, resp.) transforms in one time unit a' into
a (b' into b, resp) and the computation continues. If a' and b' appear together, neither ea' → ea nor eb' → eb can be applied because, by maximal parallelism, this would cause the application of either b' → τ or a' → τ . Note that the production of the trap symbol τ makes the computation infinite, hence not considered as a valid computation. Hence, when a' and b' appear together, the only rule that can be applied without starting an infinite computation is a'b'et → cin , that stops the
computation and sends the last c into membrane 2.

Timed P Automata
A timed P automaton is a timed automaton [1] with a discrete time domain in which a set of timed evolution rules of a timed P system is associated with every location
q. When the control is in q they represent the dynamics of a timed P system which runs while the timed automaton let the time elapse in the location.
The transitions of the timed automaton are guarded by clock constraints and by a multiset of objects, called extracted objects, to be removed by the skin membrane of the running timed P system. When a transition fires, the target location receives
the timed P structure of the running timed P system – in which the extracted objects specified in the guard have been removed – together with a description of the pending evolution rules, i.e., those rules with a completion time n (n > 1) which were activated k time units before the current time and such that n > k.
The transitions specify also a clock reset set and a multiset of objects, that we call inserted objects, to add in the skin membrane of the received timed P structure. In the target location the clocks are reset to zero and the inserted objects are put in the skin membrane of the timed P structure. Then, this is completed with the timed evolution rules associated with the location, yielding a new timed P system with the same membrane structure but a different set of rules. This system starts its running in the new location, as time restarts to elapse, taking into account the pending evolution rules of the previous location to be completed.
Let us formally describe timed P automata. Clock variables, or simply clocks, are ranged over by x, y, z, . . . and we use X, X',... to denote sets of clocks. A clock valuation over X is a function that assigns a natural number to every clock. The set of valuations of X , denoted by VX , is the set of total functions from X to N.
Clock valuations are ranged over by ν, ν',.. .. Given ν ∈ VX and k ∈ N>0, we use
ν + k to denote the valuation that maps each clock x ∈X into ν(x)+ k.
Given a set X of clocks, a reset γ is a subset of X . The set of all resets of clocks

in X is denoted by ΓX and reset sets are ranged over by γ, γ',... Given a valuation ν ∈ VX and a reset γ, we let ν\γ be the valuation that assigns the value 0 to every clock in γ and assigns ν(x) to every clock x ∈ X\γ.
Given a set X of clocks, the set ΨX of clock constraints over X are defined by the following grammar: ψ  ::=  true | x #c | x − y # c | ψ ∧ ψ | ¬ψ where
x, y ∈ X , c ∈ N, and # ∈ {<, >, ≤, ≥, =}. A satisfaction relation |= is defined such that ν |= ψ if the values of the clocks in ν satisfy the constraint ψ in the natural
interpretation.
Definition 2.4 [Timed P Automaton] A timed P automaton is a tuple T  =
⟨Q, Σ, q0, E, X, F, R, Inv⟩, where: Q is a finite set of locations, Σ is a finite alphabet of symbols, q0 is the initial location, E is a finite set of edges, X is a finite set of clocks, F = ⟨V, μ⟩ is a timed P frame, R is a function assigning to every q ∈ Q a set of timed evolution rules {Rq,... Rq }, and Inv is a function assigning to every q ∈ Q
1	m
an invariant, i.e., a clock constraint ψ such that for each clock valuation ν ∈ VX and for each k ∈ N>0, ν + k |= ψ ⇒ ν |= ψ. Constraints having this property are called past-closed.
Each edge e ∈E is a tuple in Q×ΨX ×V ∗×ΓX ×Σ×V ∗×Q. If e = (q, ψ, u, γ, σ, v, q') is an edge, q is the source location, q' is the target location, ψ is the clock constraint, u represents the extracted objects, σ is the label, v represents the inserted objects and γ is the clock reset set.
Note that the symbols of the alphabet Σ of the TPA are purely descriptive (they are used to attach a label to a transition in order to specify an observable information for that transition), and have nothing to do with the symbols in the alphabet V of the timed P frame F , which are the symbols for the objects.
Note, also, that we use invariants on the locations of the automaton to control the progress of time, as introduced in [6] for timed automata. Invariants must be true while the automaton stays in the locations. Past-closed invariants either represent deadlines or are equivalent to the constraint always true. In the former case a live behaviour of the automaton is guaranteed by the fact that the control cannot stay in the location beyond the deadline. The latter case allows the possibility of a divergence of time in a location, which we use below to define a proper run of a TPA.
To define the behaviour of a timed P automaton T we define a labelled transition system S(T ) whose states are tuples ⟨q, ν, Π, U⟩, where q ∈ Q is a location of T , ν ∈ VX is a clock valuation, Π is the associated timed P system, and U is a multiset
of pending rules. The transition relation −→·	is defined in Figure 2.
TP
Rules T1 and T2 can only be applied if the passing of one time unit still allows the valuation of clocks ν to satisfy the invariant of the location q. If rule T1 is applied one time unit passes for the timed automaton and the associated timed P system performs a timed P step as in Definition 2.3. If rule T2 is applied one time unit passes for the timed automaton even if the associated timed P system is unable to perform a timed P step. This allows time to go on when the timed P system has completed its computation. We call 1-transitions the transitions performed by



ν +1 |= Inv (q)	(Π, U ) −→1
T1
(Π', U')

⟨q, ν, Π, U⟩ −1→
TP
⟨q, ν + 1, Π', U'⟩


ν +1 |= Inv (q)	(Π, U ) /−→1
T2
⟨q, ν, Π, U⟩ −1→ ⟨q, ν + 1, Π, U⟩ 
TP

Π = ⟨V, μ, w1,..., wm, R1,..., Rm⟩

(q, ψ, u, γ, σ, v, q') ∈ E,	ν |= ψ,	u ⊆ w1	w'
T3
Π' = ⟨V, μ, w' , w2,..., wm, R(q')⟩
= (w1\u) ∪ v

⟨q, ν, Π, U⟩ −σ→
TP
⟨q', ν\γ, Π', U⟩ 



·
Fig. 2. Rules for the transition relation −−→
TP

using rules T1 and T2.
Rule T2 describes a transition, labelled by σ, that is possible only if the current clock valuation ν satisfies the clock constraint ψ and u, the multiset of extracted objects, is a subset (using the subset operation of multisets) of the current content of the skin membrane w1. The effect of the transition is that the automaton enters the target location q', where: 1) the extracted objects u are removed from the skin membrane w1 (using multiset difference); 2) the inserted objects v are added to the skin membrane w1 (using multiset union); 3) the clocks in the reset set γ are assigned to 0; and 4) the rules of the associated timed P systems are substituted with those of q', R(q'). This kind of transition is instantaneous. We call σ-transitions the transitions performed by using this rule.
Given w1, w2,..., wm multisets of objects, an initial state s0 of the transition system S(T ) is ⟨q0, ν0, Π0, ⟩, where ν0 is the clock valuation assigning 0 to all clocks,
  is the empty multiset of pending rules, and Π0 is the timed P system composed
of the timed P frame F of T , the given multisets of objects, and the set of rules associated with the initial location q0 of T : Π0 = ⟨V, μ, w1, w2,..., wm, R(q0)⟩.
Definition 2.5 [Input, Run, Output]
Let T = ⟨Q, Σ, q0, E, X, F, R, Inv⟩ be a timed P automaton. Given w1, w2,..., wm multisets of objects, called input objects, we can construct, as described above, an initial state s0 of S(T ). Let ς be an infinite sequence of transitions of S(T ) starting from s0:

ς = s0 −→
TP
l
s1 −→
TP
l
s2 −→
TP
l
s3 −→
TP
··· 

We say that ς is a run of T if and only if there exists J ∈ N such that:




























Fig. 3. A TPA executing the ancient Egyptian multiplication
for all j > J, lj = 1; i.e., the automaton enters a location, say qstop, from which it never exits and in which the time goes on infinitely; and
for all j > J, sj = ⟨qstop, νj−1 + 1, Πstop, ⟩; i.e., the timed P system Πstop in location qstop does not evolve any more as time passes.
We say that the output produced by the run is the content of the skin membrane of the timed P system Πstop.
Figure 3 shows an example of a TPA. Graphically, we use circles to represent the locations of the TPA and arrows to represent the edges. In each location we depict the structure of the timed P frame of the TPA together with the evolution rules associated with the membranes in the location. A description label and the invariant of the location are also depicted inside the circle. For instance, in location labelled “zero #a?” of the TPA of Figure 3 the invariant is x ≤ 1, where x is a clock of the automaton. The membrane structure of the timed P frame of the given TPA is composed only of the skin membrane. When the automaton is in location “zero #a?” the only evolution rule of the skin membrane is “ca → ca”.
Attached to every arrow there are the various components of the corresponding edge. For instance, the arrow from location “zero #a?” to location “hiding ’a’ pairs” has the “!zero” label, the x = 1 clock constraint, the c multiset of extracted objects (we write [−u] for extracted objects u and [+v] for inserted objects v), and the {x} clock reset set. Where, as in the previous case, there are no inserted (or extracted) objects we omit to attach [+ϵ] (or [−ϵ]) to the arrow.
The TPA of Figure 3 calculates the product of two natural numbers, n and m, by using the ancient Egyptian multiplication algorithm 3 . The peculiarity of this

3 This algorithm has been discovered in a papyrus where the calculator Ahmes shows how to multiply 35

d  0
while (a  0)
if (a is even)
a  a / 2
b  b * 2
else

Fig. 4. Ancient Egyptian multiplication algorithm

algorithm, described in Figure 4, is that it uses, as basic operations, only addition, doubling, and division in two halves.
To start the computation we insert in the skin membrane of the initial location (“zero #a?”) n ’a’ objects, m ’b’ objects, and one bi-stable catalyst c. These correspond to the input objects of Definition 2.5. The result is given in location “ending” where n · m ’d’ objects will be present at the end of the computation.
The system executes exactly the steps of the algorithm in Figure 4. To test if n is zero (i.e., no ’a’ objects are present in the skin membrane), the TPA lets one time unit pass by making the associated timed P system execute one timed P step with the only rule in the initial location: ca → ca. After that, the automaton is forced to exit the location by the invariant x ≤ 1, using one of the two exiting edges, which are guarded by the mutually exclusive constraints [−c] and [−c]. If c is present after the performed timed P step, then the rule ca → ca was executed, meaning that there was an ’a’ object left, i.e., n was not zero. Else, no ’a’ objects were left, otherwise the rule would have been fired because of the maximal parallelism; i.e., n was zero.

To control if n is even in location “hiding ’a’ pairs” the rule aa −→2
aa is started.

By maximal parallelism, if the number of ’a’ objects (i.e., the current value of n) is even, then all the ’a’s are involved in an instance of this rule. Otherwise, one ’a’ remains unpaired. While the instances of the rules – which take 2 time units to be completed – are still executing, that is to say they are pending rules, the automaton is forced to enter location “even #a?” where the same method used in location “zero #a?” to detect if there are ’a’ objects left is applied. Note that the rule ca → c, if applied, does not regenerate the unpaired ’a’ object, which correctly disappears because, in the following, it would be the remainder of the halving of the ’a’s. Depending on the result of the test, the locations “even case” and “odd case” are entered, where the doubling and the dividing into halves is performed (in the

meantime, the products of the aa −→2
aa rule instances have appeared). Note that

in the odd case ’d’ objects are generated in a number equal to the number of the

and 42. The papyrus dates back about 2000 years B. C. Nowadays the algorithm is used in digital circuits for multiplication.



goto m : (⋯) location	goto l : (⋯) location
Fig. 5. Translation of the subtracting operation

current ’b’s, as required by the algorithm. After that, the automaton cycles until all the ’a’ objects are consumed.
As stated in Definition 2.5, the output is given in location “ending”, where time diverges and the associated timed P system does not perform any other operation after the cancellation of the remaining ’b’s. At this time, exactly n · m ’d’s are left in the skin membrane.

Expressive Power
In this section we show that a timed P automaton can generate any arbitrary recursively enumerable set of natural numbers by using a very restricted set of resources.
Theorem 3.1 For each recursively enumerable set of natural numbers S there ex- ists a timed P automaton – with only one membrane, one symbol for objects, and one bi-stable catalyst – which generates S.
Proof. The universality of TPAs is easily provable by considering that a timed P automaton without clocks and with only one location, whose invariant is true, can be considered a timed P system. Then, a timed P system in which all the timed rules are of duration 1 can be considered a “classical” P system. Therefore, our model has a computing power at least equal to that of P systems, which have been shown to be Turing equivalent in [10].
To prove the statement on the features sufficient for full expressiveness, we show that by using a TPA with one membrane, one symbol and one bi-stable catalyst we can simulate a 3-register machine, which can generate every recursively enumerable set [7].
An n-register machine [7] is a tuple M = (n, B, i, f) in which n is a natural number expressing the number of registers that the machine can use, B is a set of labelled instructions, i is the label of the initial instruction of the program and f is the label of the final instruction. Each register of the machine holds a natural number (in a unary representation) that can be increased by 1 or, conditionally (if

not zero), decreased by 1. Each labelled instruction can be of the form:
k : (S(i), l, m), where k is the label and i is the register affected by the operation S (for Subtract 1). If the content of the register i is greater than zero then the machine subtracts 1 and continues at instruction l, else it does nothing and continues at instruction m.
k : (A(i), l), where k is the label and i is the register affected by the operation A
(for Add 1). The machine adds 1 to register i and continues at instruction l.
f : halt, where f is the label of the final instruction of the program. The machine does nothing and halts.
The machine computes a partial function f : N → N as follows. Let h ∈ N be the initial content of register 1. If the machine halts and the content of register 1 is r, then the machine has computed f (h) = r. If the machine does not halt, then
f (h) is undefined.
Given a 3-register machine M  =  (3, B, i, f) we construct a TPA TM  =
⟨QM , ΣM , q0, EM , {x}, FM = ⟨{a, c, c}, μM ⟩, RM , Inv M ⟩ that computes the same partial function of M . The membrane structure μM consists of only the skin mem- brane. We use only one clock x that is reset in every edge we construct. At every step of computation the contents of the three registers of the machine – say n1, n2, n3 – is represented by 2n1 3n2 5n3 ’a’ objects in the skin membrane.
For each instruction of M , we construct one or more locations of TM , depend- ing on the type of the instruction and on its arguments. Edges are constructed consequentially. The initial location of TM is the one corresponding to the initial instruction i. Figure 5 shows the three locations and the edges generated by an instruction k : (S(2), l, m). The principal location is that labelled with the instruc- tion, while the other two are added for a correct implementation. To test if register 2, in the case shown in Figure 5, is zero we use the same method we described in Section 2.2 for locations “hiding ’a’ pairs” and “even #a?” of the TPA in Figure 3. In this case we group all the ’a’s in triples (3 is the number associated with register 2 in the representation of the values) and we check if a remainder is present since 2n1 305n3 does not contain 3 while 2n1 3n2 5n3 , with n2 > 0, does. Then, if register 2 is zero the automaton is forced to enter the location associated with the instruction labelled m. Otherwise, register 2 is decreased by 1 by dividing the whole number 2n1 3n2 5n3 by 3, yielding 2n1 3n2−15n3 (location “subtract reg 2”) and the automaton is forced to enter the location associated to the instruction labelled l. In case of subtracting registers 1 or 3, the numbers to use instead of 3 are 2 and 5, respectively.
For an adding instruction and for the halt instruction we construct only one location, as shown in Figure 6. For the addition we simply multiply the ’a’s by 2 (in the instruction shown in this figure register 1 is involved, thus the number to use is 2). The halt instruction makes the timed P system of TM stop and in the location the time diverges, as requested in Definition 2.5, to produce the output, which is the current 2n1 3n2 5n3 number from which n1, the calculated value, can be determined.
 



k : ( A(1) , l )

a ⟶ aa


x =1

{x }	goto l : (⋯) location
x ≤1


Fig. 6. Translation of the adding and the halt operations

An Application to Ecological Systems
In this section we present an application of timed P automata. The example we use is a population model taken by the field of “reintroduction biology”. In such a re- search field, population models are useful to guide environment management as they allow to project the persistence of wildlife populations under different conditions.
In [2] a model for guiding the reintroduction of extirpated birds in New Zealand mainland is presented. Population dynamics is simulated by a stochastic, discrete- time female-only model. The model is derived from the observation of the popu-
lation of Saddleback birds (Philesturnus rufusater ) on Mokoia Island. The female-
only approach assumes that there are sufficient males for all females to be paired. This is a good assumption if the sex ratio is approximately 50:50, as actually hap- pens in the case of Mokoia saddlebacks.
Our model is non-deterministic and there is no notion of probability. This is not a good assumption for a biological model in which events have different probabilities. We plan to add, in the future, probabilities to timed P automata, in order to obtain a stochastic model and to allow more accurate specifications.
In the model in [2], females are partitioned in two classes, the first-year females and the older females. The two kinds of females are considered to have different fecundity rates, which correspond to a different number in the fledglings produced over a breeding season. There are different survival rates for juveniles and adults. In particular, there is a probability for fledglings to reach the first month of life, and there is a different probability to survive a whole year either for juveniles (older than one month) or adults.
An annual harvest of females is scheduled, with harvesting taking place at the start of breeding season. Such a harvest must maintain the population size in equilibrium without driving it to extinction.
Figure 7 shows the timed P automaton model representing the above scenario: f1 represents a one-year old female and f2+ represents older ones, and analogously, j1 represents juveniles old less than one month and j2+ represents older ones.
In the model, a time unit is considered to correspond to one week.  In the

“breeding season” location females can either search for a mate – rules f1
−→2  f1

and f2+ −→2
f2+ – and such a search takes two weeks, or they can effectively mate,

producing offsprings. The mating and breeding process takes four weeks and the number of fledglings is two for one-year old females and it is four for older females.



Fig. 7. A TPA modelling the population dynamics of Saddleback birds

The breeding season lasts for 16 weeks.
The location “juveniles growing” allows all the j1’s to reach the condition j2+, and in the next location (“growing and selection”) juveniles and females are sub- jected to selection. The survived juveniles reach the new breeding season (becom- ing adult females) together with the survived females. Before the restarting of the breeding season a harvest of 40 females older than one year takes place.
Conclusions
An extension of timed P systems has been introduced to study systems whose dynamics changes with time. The proposed model is a timed automaton with a discrete time domain and in which each state is a timed P system. A result on expressive power and on features of the formalism sufficient for full expressiveness has been proved and, as an application example, the model has been given of an ecological system.
We have left as a future work to have in the model a version of P systems with both time and probability. This would allow the development of a simulator and the study of the dynamics of ecological systems similarly to what done in [3].

References
Alur, R. and D. L. Dill, A theory of timed automata, Theoretical Computer Science 126 (1994), pp. 183– 235.
Armstrong, D. and R. Davidson, Developing population models for guiding reintroductions of extirpated bird species back to New Zealand mainland, New Zealand Journal of Ecology 30 (2006), pp. 73–85.
Cardona, M., M. Colomer, M. P´erez-Jim´enez, D. Sanuy and A. Margalida, A P System modeling an ecosystem related to the bearded vulture, in: Proc. of Brainstorming Week on Membrane Computing, 2008, pp. 51–66.


Cavaliere, M. and D. Sburlan, Time-independent P Systems, in: Proc. of Workshop on Membrane Computing, 2004, pp. 239–258.
Cavaliere, M. and C. Zandron, Time-driven computations in P Systems, in: Proc. of the 4th Brainstorming Week on Membrane Computing, 2006.
Henzinger, T. A., X. Nicollin, J. Sifakis and S. Yovine, Symbolic model checking for real-time systems, Information and Computation 111 (1994), pp. 193–244.
Minsky, M., “Computation: finite and infinite machines,” Prentice-Hall, 1967.
Paun, G., Computing with membranes, Journal of Computer and System Sciences 61 (2000), pp. 108– 143.
Paun, G., From cells to computers: computing with membranes (P Systems), Biosystems 59 (2001),
pp. 139–158.
Paun, G., “Membrane Computing. An Introduction,” Springer, 2002.
Paun, G. and S. Yu, On synchronization in P Systems, Fundamenta Informaticae 38 (1999), pp. 397– 410.
