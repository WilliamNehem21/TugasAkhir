Electronic Notes in Theoretical Computer Science 203 (2008) 49–63	
www.elsevier.com/locate/entcs

An Algebra for Directed Bigraphs 
Davide Grohmanna,1	Marino Miculana,2
a Department of Mathematics and Computer Science, University of Udine, Italy

Abstract
We study the algebraic structure of directed bigraphs, a bigraphical model of computations with locations, connections and resources previously introduced as a unifying generalization of other variants of bigraphs. We give a sound and complete axiomatization of the (pre)category of directed bigraphs. Using this axiom- atization, we give an adequate encoding of the Fusion calculus, showing the utility of the added directness.
Keywords: Bigraphical models, categorical meta-models for Concurrency, fusion calculus.


Introduction
Bigraphical reactive systems (BRSs) are an emerging graphical meta-model of com- putation introduced by Milner [9,11] in which both locality and connectivity are central notions. The key structure of BRSs are bigraphs, which are composed by two orthogonal graph structures: a hierarchical place graph describing locations, and a link (hyper-)graph describing connections. The reaction rules, representing the dynamics of the BRS, may change both these structures. Several process calculi for Concurrency can be represented in bigraphs, such as CCS, pure Mobile Ambi- ents, and (using a mild generalization called binding bigraphs), also the π-calculus and the λ-calculus [12]. An important feature of bigraphs is that they support a very general construction, based on the notion of relative pushout (RPO) [7], which allows to turn reaction rules into labelled transition systems.
However, Milner’s definition of bigraphs is not the only possible one. Sassone and Sobocin´ski have given in [15] an alternative definition, derived from a general categorical construction, the “input-linear cospan” over a particular 2-category of

٨ Work supported by Italian MIUR project 2005015824 Art.
1 Email: grohmann@dimi.uniud.it
2 Email: miculan@dimi.uniud.it

1571-0661 © 2008 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2008.03.033

place-link graphs. Also this variant enjoys a general construction of RPOs. Inter- estingly, Milner’s and Sassone-Sobocin´ski’s variants do not coincide; in fact, these two categories and their respective RPO constructions do not generalize each other. In previous work [5,4], we have presented directed bigraphs, a generalization of both these kinds of bigraphs. Intuitively, the idea of directed bigraphs is to notice that names are not resources on their own, but only a way for denoting (abstract) resources (i.e., edges). A system can “ask” for external resources thorugh the names on its interfaces. Thus, we can identify a “resource request flow” starting from control ports, going through names and terminating in edges. This information is represented in the new notion of directed link graph, which replaces the previous notion of link graphs. We have given RPO constructions for this model, generalizing and unifying the constructions independently given by Jensen-Milner and Sassone-
Sobocin´ski in their respective variants. Moreover, the very same construction can be used for calculating relative pullbacks as well.
In this paper, we continue this line of investigation. We study the algebraic structure of directed bigraphs, giving a sound and complete axiomatization of this (pre)category. Moreover, we use the operators of this axiomatization for encoding the Fusion calculus, a calculus which was not dealt with by the previous versions of bigraphs. This encoding is adequate, in the sense that congruent processes are represented by exactly the same bigraph, and reduction steps in the original calculus is mimicked one-to-one by steps in the encoding.
Synopsis In Section 2 we briefly recall the main definitions about directed bigraphs and abstract directed bigraphs. In Section 3 we analyze the algebraic structure of directed bigraphs; this analysis is then carried on to the category of abstract directed bigraphs in Section 4. In Section 5 we put directed bigraphs at work, giving an encoding of the Fusion calculus. Conclusions are in Section 6.


Directed bigraphs
In this section we recall the definition and some properties of directed bigraphs; for details, we refer to [5,4]. Following Milner’s approach, we work in precategories; see [8, §3] for an introduction to the theory of supported monoidal precategories. (We prefer precategories to 2-categories, because their concreteness allows for more direct definitions.)
Let K be a given signature of controls, and ar : K→ ω the arity function.
Definition 2.1 A polarized interface X is a pair of disjoint sets of names X = (X−,X+); the two components are called downward and upward faces, respectively.
A directed link graph A : X → Y is A = (V, E, ctrl, link) where X and Y
are the inner and outer interfaces, V is the set of nodes, E is the set of edges, ctrl : V → K is the control map, and link : Pnt(A) → Lnk(A) is the link map, where the ports, the points and the links of A are deﬁned as follows (where +

denotes disjoint union):
Prt(A)	ar(ctrl(v))	Pnt(A)  (X+ + Y −)  Prt(A)	Lnk(A)  (X− + Y +)  E
v∈V
The link map cannot connect downward and upward names of the same interface, i.e., the following condition must hold: (link(X+) ∩ X−) ∪ (link(Y −) ∩ Y +)= ∅.
Directed link graphs are graphically depicted much like ordinary link graphs, with the difference that edges are explicit objects and points and names are asso- ciated to edges (or other names) by (simple) directed arcs. This notation makes explicit the “resource request flow”: ports and names in the interfaces can be asso- ciated either to locally defined resources (i.e., a local edge) or to resources available from outside the system (i.e., via an outward name).
Definition 2.2 ('DLG) The precategory of directed link graphs has polarized in- terfaces as objects, and directed link graphs as morphisms.
Given two directed link graphs Ai = (Vi, Ei, ctrli, linki): Xi → Xi+1 (i = 0, 1), the composition A1 ◦ A0 : X0 → X2 is deﬁned when the two link graphs have disjoint nodes and edges. In this case, A1 ◦ A0  (V, E, ctrl, link), where V   V0  V1,
ctrl  ctrl0  ctrl1, E  E0  E1 and link : (X+ + X−)  Pr → E  (X− + X+) is
0	2	0	2
deﬁned as follows (where Pr = Prt(A0)  Prt(A1)):

⎪⎨

link1(p)	if p ∈ X2  Prt(A1) and link1(p) ∈ E1  X2
⎪⎩link0(x)	if p ∈ X−  Prt(A1) and link1(p)= x ∈ X−.
The identity link graph of X is idX  (∅, ∅, ∅K,IdX− X+ ): X → X.
Definition 2.3 The support of a link graph A = (V, E, ctrl, link) is the set |A| 
V + E.
Definition 2.4 (idle, lean, open, closed, peer) Let A : X → Y be a link graph.
A link l ∈ Lnk(A) is idle if it is not in the image of the link map (i.e., l /∈
link(Pnt(A))). The link graph A is lean if there are no idle links.
A link l is open if it is an inner downward name or an outer upward name (i.e.,
l ∈ X− ∪ Y +); it is closed if it is an edge.
A point p is open if link(p) is an open link; otherwise it is closed. Two points
p1, p2 are peer if they are mapped to the same link, that is link(p1)= link(p2).
Proposition 2.5 A link graph A : X → Y is epi iff there are no peer names in Y − and no idle names in Y +. Dually, A is mono iff there are no idle names in X− and no peer names in X+.
A is an isomorphism iff it has no nodes, no edges, and its link map can be decomposed in two bijections link+ : X+ → Y +, link− : Y − → X−.
Definition 2.6 The tensor product ⊗ in 'DLG is deﬁned as follows. Given two

objects X, Y , if these are pairwise disjoint then X ⊗ Y  (X− Y −,X+ Y +). Given two link graphs Ai = (Vi, Ei, ctrli, linki) : Xi → Yi (i = 0, 1), if the tensor products of the interfaces are deﬁned and the sets of nodes and edges are pairwise disjoint then the tensor product A0 ⊗ A1 : X0 ⊗ X1 → Y0 ⊗ Y1 is deﬁned as A0 ⊗ A1 
(V0  V1, E0  E1, ctrl0  ctrl1, link0  link1).
Finally, we can define the directed bigraphs as the composition of standard place graphs (see [8, §7] for definitions) and directed link graphs.
Definition 2.7 A (bigraphical) interface I is composed by a width (a ﬁnite ordinal, denoted by width(I)) and by a polarized interface of link graphs (i.e., a pair of ﬁnite sets of names). A directed bigraph with signature K is G = (V, E, ctrl, prnt, link): I → J, where I = ⟨m, X⟩ and J = ⟨n, Y ⟩ are its inner and outer interfaces respec- tively; V and E are the sets of nodes and edges respectively, and prnt, ctrl and link are the parent, control and link maps, such that GP  (V, ctrl, prnt): m → n is a place graph and GL  (V, E, ctrl, link): X → Y is a directed link graph.
We denote G as combination of GP and GL by G = ⟨GP , GL⟩. In this notation, a place graph and a (directed) link graph can be put together iff they have the same sets of nodes and edges.
Definition 2.8 ('DBig) The precategory 'DBig of directed bigraph with signature K has interfaces I = ⟨m, X⟩ as objects and directed bigraphs G = ⟨GP , GL⟩ : I → J as morphisms. If H : J → K is another directed bigraph with sets of nodes and edges disjoint from V and E respectively, then their composition is deﬁned by composing
their components, i.e.: H ◦ G  ⟨HP ◦ GP ,HL ◦ GL⟩ : I → K..
The identity directed bigraph of I = ⟨m, X⟩ is ⟨idm,IdX− X+ ⟩ : I → I.
Proposition 2.9 A directed bigraph G in 'DBig is epi (respectively mono) iff its two components GP and GL are epi (respectively mono).
The isomorphisms in 'DBig are all the combinations ι = ⟨ιP , ιL⟩ of an isomor- phism in 'PLG and an isomorphism in 'DLG.

Definition 2.10 The tensor product ⊗ in 'DBig
is deﬁned as follows. Given

I = ⟨m, X⟩ and J = ⟨n, Y ⟩, where X and Y are pairwise disjoint, then ⟨m, X⟩⊗ 
⟨n, Y ⟩  ⟨m + n, (X−  Y −,X+  Y +)⟩.
The tensor product of Gi : Ii → Ji is deﬁned as G0 ⊗ G1  ⟨GP ⊗ GP , GL ⊗ GL⟩ :
0	1	0	1
I0 ⊗ I1 → J0 ⊗ J1, when the tensor products of the interfaces are deﬁned and the
sets of nodes and edges are pairwise disjoint.
Remarkably, directed link graphs (and bigraphs) have relative pushouts (RPOs) and pullbacks (RPBs), which can be obtained by a general construction, subsuming both Milner’s and Sassone-Sobocin´ski’s variants. We refer the reader to [5,4].
Actually, in many situations we do not want to distinguish bigraphs differing only on the identity of nodes and edges. To this end, we introduce the category DBig of abstract directed bigraphs. The category DBig is constructed from 'DBig
forgetting the identity of nodes and edges and any idle edge. More precisely, abstract
bigraphs are concrete bigraphs taken up-to an equivalence  (see [8] for details).

Definition 2.11 (abstract directed bigraphs) Two concrete directed bigraphs G and H are lean-support equivalent, written G H, if they are support equivalent after removing any idle edges.
The category DBig of abstract directed bigraphs has the same objects as 'DBig, and its arrows are lean-support equivalence classes of directed bigraphs. We denote by A : 'DBig → DBig the associated quotient functor.
We remark that DBig is a category (and not only a precategory); moreover, A
enjoys several important properties which we omit here due to lack of space; see [8].
Algebraic structure of jDBig
We begin this section introducing some useful notations.
Remark 3.1 An interface ⟨0, (X−,X+)⟩ is abbreviated as (X−,X+); a singleton set {x} as x; and ⟨m, (∅, ∅)⟩ as m. The interfaces (∅, ∅) and 0 denote the same interface, the origin ϵ. Hence the identity idє can be expressed as ϵ, (∅, ∅) or 0.
A bigraph A : (∅,X+) → (∅,Y +) is deﬁned by a (not necessarily surjective) function σ : X+ → Y +, called substitution, if it has no nodes and no edges and the link map is σ; analogously a bigraph A : (X−, ∅) → (Y −, ∅) is deﬁned by a (not necessarily surjective) function δ : Y − → X−, called fusion, if it has no nodes and no edges and the link map is δ. With abuse of notation, we write σ and δ to mean their corresponding bigraphs.
Let →x, →y be two vectors of the same length; we write (y0/x0, y1/x1,... ) or Δ→y, where all the xi are distinct, for the surjective map xi '→ yi; similarly, we write (y0/x0, y1/x1,... ) or o→y, where all yi are distinct, for the surjective map yi '→ xi.
We denote by ΔX : (∅, ∅) → (∅,X) the bigraph deﬁned by the empty substitution σ : ∅→ X, in the same way we denote oX : (X, ∅) → (∅, ∅) for the bigraph deﬁned by the empty fusion δ : ∅→ X.
Note that each substitution σ can be expressed in a unique way as σ = τ ⊗ ΔX, where τ is a surjective substitution; while each fusion δ can be expressed in a unique way as δ = ζ ⊗ oX, where ζ is a surjective fusion. We denote the renamings by α,
i.e. the bijective substitution or bijective fusion.
Finally, we introduce the closure bigraphs. The closure Vx : (∅, y) → (x, ∅) has no nodes, a unique edge e and the link map is link(x) = e = link(y). Two other types of closures are obtained by composing the closure Vx and Δx or oy respectively:
the up-closure ▲y : (∅, y) → (∅, ∅) has no nodes, one edge e and link(y)= e;
the down-closure Vx : (∅, ∅) → (x, ∅) has no nodes, one edge e and link(x)= e.
Definition 3.2 (wirings) A wiring is a bigraph whose interfaces have zero width (and hence has no nodes). The wirings ω are generated by the composition or tensor product of three base elements: the substitutions σ : (∅,X+) → (∅,Y +); the fusions δ : (Y −, ∅) → (X−, ∅); and the closures Vx : (∅, y) → (x, ∅).
Definition 3.3 (prime bigraph) An interface is prime if it has width equal to 1. Often we abbreviate a prime interface ⟨1, (X−,X+)⟩ with ⟨(X−,X+)⟩, in particular
⟨(∅, ∅)⟩ = 1. A prime bigraph P : ⟨m, (Y −, ∅)⟩ → ⟨(∅,X+)⟩ has no upward inner

names and no downward outer names, and has a prime outer interface.
An important prime bigraph is mergem : m → 1, it has no nodes and it maps m sites to an unique root. A bigraph G : n → ⟨m, (X−,X+)⟩ without inner names, it can be simply converted in a prime bigraph as follows: (mergem ⊗ id(X−,X+ )) ◦ G.
Definition 3.4 (discrete bigraph) A bigraph D is discrete if it has no edges and the link map is a bijection. That means all points are open, there are no peer points and no idle link.
The discreteness is well-behaved, and preserved by composition and tensor products. It is easy to see that discrete bigraphs form a monoidal sub-precategory of 'DBig. Definition 3.5 (ion, atom and molecule) For any non atomic control K with
arity k and a pair of sequence →x− and →x+ of distinct names, whose overall length is k, we deﬁne the discrete ion K(v)→x+ : ⟨(→x−, ∅)⟩ → ⟨(∅, →x+)⟩ as the bigraph with a unique K-node v, whose ports are separately linked to →x− or to →x+. We omit v when it can be understood.
For a prime discrete bigraph P with outer names (∅,Y +) the composite (K→x+ ⊗ id(∅,Y +)) ◦ P is a discrete molecule. If K is atomic, we deﬁne the discrete atom K→x+ : (→x−, ∅) → ⟨(∅, →x+)⟩; it resembles an ion, but has no site.
An arbitrary (non-discrete) ion, molecule or atom is formed by the composition of ω⊗id1 with a discrete one. Often we omit ·· ·⊗idI in the compositions, when there is no ambiguity; for example we write mergem ◦G to mean (mergem ⊗id(X−,X+ ))◦G

and K→x+ ◦ P to mean (K→x+ ⊗ id
) ◦ P (for P prime discrete). Note that every

→x−
→x−
(∅,Y +)

atom and every molecule are prime, furthermore an atom is also ground, but a
molecule is not necessarily ground, since it may have sites.
Now, we define some variants of the tensor product, allowing sharing of names. Process calculi often have a parallel product P | Q, that allows the processes P and Q to share names. In directed bigraphs, this sharing can involve inner downward names and/or outer upword names, as described by the following definitions.
Definition 3.6 (sharing products) The outer sharing product, inner sharing product and sharing product of two link graphs Ai : Xi → Yi (i = 0, 1) are de- ﬁned as follows:

(X−,X+)  (Y −,Y +)  (X−  Y −,X+ ∪ Y +)
(X−,X+) v (Y −,Y +)  (X− ∪ Y −,X+  Y +)
A0  A1  (V0  V1, E0  E1, ctrl0  ctrl1, link0  link1): X0 ⊗ X1 → Y0  Y1 A0 v A1  (V0  V1, E0  E1, ctrl0  ctrl1, link0  link1): X0 v X1 → Y0 ⊗ Y1 A0  A1  (V0  V1, E0  E1, ctrl0  ctrl1, link0  link1): X0 v X1 → Y0  Y1

deﬁned when their interfaces are deﬁned and Ai have disjoint node and edge sets.
The outer sharing product, inner sharing product and sharing product of two bigraphs Gi : Ii → Ji are deﬁned by extending the corresponding products on their

link graphs with the tensor product on widths and place graphs:
⟨m, X⟩  ⟨n, Y ⟩  ⟨n + m, X  Y ⟩	⟨m, X⟩ v ⟨n, Y ⟩  ⟨n + m, X v Y ⟩
G0  G1  ⟨GP ⊗ GP , GL  GL⟩ : I0 ⊗ I1 → J0  J1
0	1	0	1
G0 v G1  ⟨GP ⊗ GP , GL v GL⟩ : I0 v I1 → J0 ⊗ J1
0	1	0	1
G0  G1  ⟨GP ⊗ GP , GL  GL⟩ : I0 v I1 → J0  J1.
0	1	0	1
deﬁned when their interfaces are deﬁned and Gi have disjoint node and edge sets.
It is simple to verify that  , v and  are associative, with unit ϵ.
Another way of constructing a sharing product of two bigraphs G0, G1 is to disjoin the names of G0 and G1, then take the tensor product of the two bigraphs and finally merge the name again:
Proposition 3.7 Let G0 and G1 be bigraphs with disjoint node and edge sets. Then
G0  G1 = σ(G0 ⊗ τ G1)   G0 v G1 = (G0 ⊗ G1ζ)δ   G0  G1 = σ(G0 ⊗ τ G1ζ)δ
where the substitution σ and τ are deﬁned in the following way: if zi (i ∈ n) are the upward outer names shared by G0 and G1, and wi are fresh names in bijection with the zi, then τ (zi)= wi and σ(wi)= σ(zi)= zi (i ∈ n). The substitution δ and ζ are deﬁned in a very similar way, but acting on the downward inner names.
Definition 3.8 (prime products) The prime outer sharing product and prime sharing product of two bigraphs Gi : Ii → Ji are deﬁned as follows:
⟨m, (X−,X+)⟩  ⟨n, (Y −,Y +)⟩  ⟨(X−  Y −,X+ ∪ Y +)⟩
G0  G1  merge(width(J0)+width(J1)) ◦ (G0  G1): I0 ⊗ I1 → J0  J1 G0 | G1   merge(width(J0)+width(J1)) ◦ (G0  G1): I0 v I1 → J0  J1.
deﬁned when their interfaces are deﬁned and Gi have disjoint node and edge sets.
It is easy to show that  and | are associative, with unit 1 when applied to prime bigraphs. Note that for a wiring ω and a prime bigraph P , we have ω  P = ω P and ω | P = ω  P , because in this case these products have the same meaning.
Now, we can describe discrete bigraphs, which complement wirings:
Theorem 3.9 (discrete normal form) (i) Every bigraph G can be expressed uniquely (up to iso) as: G = (ω ⊗ idn) ◦ D ◦ (ω' ⊗ idm), where D is a dis- crete bigraph and ω, ω' are two wirings satisfying the following conditions:
in ω, if two outer downward names are peer, then their target is an edge;
in ω' there are no edges, and no two inner upward names are peer (i.e., on in- ner upward names ω' is a renaming, but outer downward names can be peer).
(ii) Every discrete bigraph D : ⟨m, (X−,X+)⟩ → ⟨n, (Y −,Y +)⟩ may be factored uniquely (up to iso) on the domain of each factor Di, as:
D = α ⊗ ((D0 ⊗ ··· ⊗ Dn−1) ◦ (π ⊗ iddom(D→ )))

with α a renaming, each Di prime and discrete, and π a permutation.
Proof. For the first part, consider a bigraph G : ⟨n, (X−,X+)⟩ → ⟨m, (Y −,Y +)⟩. We divide G in three parts: a discrete D : ⟨n, (Z−,Z+)⟩ → ⟨m, (W −,W +)⟩ and two wirings ω : (W −,W +) → (Y −,Y +) and ω' : (X−,X+) → (Z−,Z+) satisfying the previous conditions. We proceed by cases (where Pr  Prt(G)= Prt(D)):
p ∈ Pr, linkG(p)= e ∈ E: we add a fresh name we ∈ W + and define linkD(p)= we and linkω(we)= e;
p ∈ Pr, linkG(p)= y ∈ Y +: we add a fresh name wy ∈ W + and define linkD(p)= 
wy and linkω(wy)= y;
p ∈ Pr, linkG(p)= x ∈ X−: this case is analogous to the previous one;
y ∈ Y −, linkG(y)= e ∈ E: we define linkω(y)= e;
x ∈ X+, linkG(y)= e ∈ E: we add a fresh name ze ∈ Z+, a fresh name we ∈ W +
and define linkω' (x)= ze, linkD(ze)= we, linkω(we)= e;
y ∈ Y −, linkG(y)= x ∈ X−: we adda fresh name wx ∈ W −,a fresh name zx ∈ Z−
and define linkω(y)= wx, linkD(wx)= zx and linkω' (zx)= x;
x ∈ X+, linkG(x)= y ∈ Y +: this case is analogous to the previous one; it is suffi- cient to invert the direction of links and swap the rule of ω with ω'.
Note that there are no idle names in Z−, Z+, W − and W +, so those sets are formed only by the fresh names defined in this proof. Furthermore, the three conditions above holds because we create a fresh name every time we need one.
The proof of the second part is easy. Since the outer interface of D has width n, we can decompose D in n discrete and prime parts, obtaining D0 ⊗ ··· ⊗ Dn−1. The renaming α describe the connections between the inner interface and the outer one. Finally the permutation π gives the right sequence of the sites, so we can take
the tensor product of Di (i = 0,... .n − 1) in any order.	 
We call this unique factorization discrete normal form (DNF). The DNF ap- plies to abstract bigraphs as well, and indeed it will play an important part in the complete axiomatization of DBig, as we will discuss in the next section.
Note that a renaming is discrete but not prime (since it has zero width); this is why the factorization in Theorem 3.9(ii) has such a factor. This unique factorization depends on the fact that the prime bigraphs have no upward inner names and downward outer names. In the special case that D is ground, the factorization in Theorem 3.9(ii) is simply D = d0 ⊗ ··· ⊗ dn−1, that is a product of discrete and
prime ground bigraphs.
Algebraic structure of DBig
In this section we describe a sound and complete axiomatization for directed ab- stract bigraphs, similarly to that given by Milner for pure bigraphs [10]. Further- more we give a normal form for discrete bigraphs.
First we introduce the algebraic signature, that is a set of elementary bigraphs

x


y y


x1x2.. .xn
y1y2.. .ym

x

Vx:(∅, y) → (x, ∅)	closure


Δy :(∅,X) → (∅, y)	substitution

oY :(x, ∅) → (Y, ∅)	fusion

1:ϵ → 1	a barren root


merge:2 → 1	mapping 2 sites in 1 root



x1x2.. .xm
γm,n:m + n → n + m	swapping m with n K→x:⟨(→y, ∅)⟩→ ⟨(∅, →x)⟩	a discrete ion
Fig. 1. Elementary Bigraphs

able to define any other bigraph (Figure 1).
We have to show that all bigraphs can be constructed from these elementary ones by composition and tensor product. Before giving a formal result, we provide an intutive explanation of the meaning of these elementary bigraphs.
The first three bigraphs build up all wirings, i.e. all the link graphs having no nodes. Indeed, all substitutions (fusions, resp.) can be obtained as tensor products
of elementary substitutions Δy (fusions oY , resp.); the tensor products of single-
X	x
y	x
ton substitutions Δx and/or singleton fusions oy give all renamings. The compo-
sition and the tensor product of substitutions, fusions and closures give all wirings.
The next three bigraphs define all placings, i.e. all place graphs having no nodes; for example mergem : m → 1, merging m sites in a unique root, are defined as:
merge0   1	mergem+1   merge ◦ (id1 ⊗ mergem).
Notice that merge1 = id and merge2 = merge, and that all permutations
π : m → m are constructed by composition and tensor from the γm,n.
Finally, for expressing any direct bigraph we need to add only the discrete ions
K→x+ . In particular, we can express any discrete atoms as K→x+ ◦ 1.
→x−	→x−
The following proposition shows that every bigraph can be expressed in a normal form, called (again) discrete normal form (DNF). We will use D, Q and N to denote discrete, discrete prime bigraphs, and the discrete molecules respectively.
Proposition 4.1 (discrete normal form)  In DBig every bigraph G, discrete D,


Categorical Axioms
A ◦ id = A = id ◦ A	A ◦ (B ◦ C)= (A ◦ B) ◦ C
A ⊗ idє = A = idє ⊗ A	A ⊗ (B ⊗ C)= (A ⊗ B) ⊗ C γI,є = idI	γJ,I ◦ γI,J = idI⊗J
(A1 ⊗ B1) ◦ (A0 ⊗ B0)= (A1 ◦ A0) ⊗ (B1 ◦ B0)
γI,K ◦ (A ⊗ B)= (B ⊗ A) ◦ γH,J	(where A : H → I, B : J → K) γI⊗J,K = (γI,K ⊗ idJ ) ◦ (idI ⊗ γJ,K)



Vx ◦ Δy = Vx
Link Axioms
oz ◦ Vx = Vz

ox ◦ Vx ◦ Δy = idє

▲y	z	▲z	x	▲y	▲y	▲y

Δz	◦ (id(∅,Y ) ⊗ Δy )= Δz
(id(Y,∅) ⊗ oX) ◦ o(Y  y) = o(X Y )

(Y y)
X	(Y X)
y	z	z

Place Axioms
merge ◦ (1 ⊗ id1)= id1	merge ◦ γ1,1 = merge merge ◦ (merge ⊗ id1)= merge ◦ (id1 ⊗ merge)
Node Axioms

(id
⊗ α) ◦ K→x+ = Kα(→x+ )
K→x+ ◦ (id
⊗ α)= K→x+

1	→x−
→x−
→x−	1
α(→x−)


Fig. 2. Axiomatization for the abstract directed bigraphs.
discrete and prime Q and discrete molecule N can be described by an expression of the respective following form:
G = (ω ⊗ idn) ◦ D ◦ (ω' ⊗ idm)	(1)
where ω, ω' satisfy the conditions given in Theorem 3.9(i);
D = α ⊗ ((Q0 ⊗ ··· ⊗ Qn−1) ◦ (π ⊗ iddom(Q→ )))	(2)
Q = (mergen+p ⊗ id∅,Y + ) ◦ (idn ⊗ N0 ⊗ ··· ⊗ Np−1) ◦ (π ⊗ id(Y −,∅))	(3)

N = (K→x+ ⊗ id
) ◦ Q.	(4)

→x−	∅,Y +
Furthermore, the expression is unique up to isomorphisms on the parts.
We can use these equations for normalizing any bigraph G as follows; first, we apply equations (1), (2) to G once, obtaining an expression containing discrete
and prime bigraphs Q0,... , Qn−1. These are decomposed further using equations (3), (4) repeatedly: each Qi is decomposed into an expression containing molecules Ni,0,... , Ni,pi−1, each of which is decomposed in turn into an ion containing another

discrete and prime bigraph Q'
. The last two steps are repeated recursively until

the ions are atoms or have only holes as children. Note that the unit 1 is a special
case of Q when n = p = 0.
In Figure 2 we give a set of axioms which we prove to be sound and complete. Each of these equations holds only when both sides are defined; in particular,

recall that the tensor product of two bigraphs is defined only if the name sets are disjoint. It is important to notice also that for ions only the renaming axiom is needed (because the names are treated positionally).
Theorem 4.2 (Completeness of the axiomatization) Let us consider two ex- pressions E0, E1 constructed from the elementary bigraphs by composition and ten- sor product. Then, E0 and E1 denote the same bigraph in DBig if and only if the equation E0 = E1 can be proved by the axioms in Figure 2.
Proof. The proof is similar to that of [8, Theorem 10.2]. The “if” direction is simple to prove, since it requires to check that each axiom is valid. The “only if” direction is in two steps. First, we prove by induction on the structure of expressions, that the equality between an expression and its DNF is derivable from the axioms. Next, since DNFs are taken up to iso, we have to show that the equality between isomorphic DNFs is provable from the axioms. This is proved by showing that the axioms can prove the isomorphisms of the components of a DNF, which are ions, discrete and prime bigraphs, and discrete bigraphs.	 
An Application: the Fusion Calculus
In this section we apply the theory developed in the previous sections to the Fusion calculus [13]. The processes of the finite (monadic) Fusion calculus are defined by the following grammar (sum and fusion prefix can be easily encoded in this syntax):
P, Q ::= 0 | zx.P | z¯x.P | P |Q | (x)P
where x, y, z range over a countable set of names N , the processes are taken up to the structural congruence (≡), that is the least congruence satisfying the abelian monoid laws for composition and the scope laws and scope extension law:
(x)0 ≡ 0	(x)(y)P ≡ (y)(x)P	P |(x)Q ≡ (x)(P |Q) where x ∈/ fn(P ).
In [13], the semantics of the Fusion calculus is given by a labelled transition
ϕ
system for deriving transitions of the form P → Q where ϕ is a fusion, that is a
finite equivalence over names of the form {x1=y1,... , xn=yn}. Here we adopt a reaction semantics, similar to that of Explicit Fusion [3]. The configuration of a process is denoted by a pair (P, ϕ) to mean that P has associated the fusion ϕ. We define (P, ϕ) → (Q, ψ) to be the least relation closed under the following rules


Com
uϕv
(u¯x.P |vy.Q, ϕ) → (P |Q, ϕ ∪ {x=y})
(P, ϕ) → (Q, ψ)
(P |R, ϕ) → (Q|R, ψ)

	(P {z/x}, ϕ) → (Q, ψ)	 z /∈ dom(φ) and y =  w	if z=w ∈ ψ

where ψ T z = ψ ∩(N \{z})2 ∪ {z=z}. It is easy to check that (P, ϕ) → (Q, ϕ ∪ ψ) iff
ψσ
Pσ → Qσ in the LTS semantics of [13], for any substitution σ which agrees with ϕ.

x	z	z	y
	

getx,z
sendy,z


Fig. 3. The controls of the signature for the Fusion calculus.
x	y z


[n]∈{z=y}  n	▲n
 yx.0|(x)z¯x.0){z=y}
[n]

x	y z

 yx.0|(x)z¯x.0){y,z,x}


Fig. 4. An example of encoding a fusion process in directed bigraphs.
The signature for representing Fusion processes in directed bigraphs is
KF  {get:2, send:2}
where get and send are passive (Figure 3).
The encoding of processes into bigraphs is based on the idea of representing Fusion names as names on the interfaces, and each name equivalence class by a resource, i.e., an edge. Open names are outer names accessing to internal edges; bound names correspond to edges not accessible from outside.
Formally, a process P is translated to a bigraph of DBig(KF ) in two steps. First, for X a finite set of names such that fn(P ) ⊆ X, we define a bigraph
 P )X : ϵ → ⟨1, (∅,X)⟩, using the algebraic operators defined in the previous sections:
 0)X =1  X	 P |Q)X = P )X  Q)X	 (x)P )X = ▲x ◦ P )X {x}
 zx.P )X = getx,z ◦ P )X	 z¯x.P )X = sendx,z ◦ P )X	where x, z ∈ X
Notice that names in X are represented as outer upward names. In this translation bound names are represented by local (not accessible) edges.
Then, the encoding of a process P under a fusion ϕ takes the bigraph P )fn(P )
and associates to each name in fn(P ) an outer accessible edge, according to ϕ:


 P )
= ,⎝ Σ

o[n]ϕ ◦ Vn ◦ Δn
⎞⎠ ◦ ,⎝ P )
⊗	Σ	Δm⎞⎠


Fusions are represented by linking the fused names (in the outer interface) to the same edge. An example of encoding is given in Figure 4.
The encoding of the syntax is adequate, in the sense that two congruent processes are represented by exactly the same bigraph:

x	z	y	x	z	y



F use



(Vx ⊗ Vz ⊗ Vy ) ◦ (getx,z ★ sendy,z) → (Vz ⊗ (ox,y ◦ Vw)) ★ id1 ★ id1
▲x	▲z	▲y	w
x	y	x	y




F usesend



(Vx ⊗ Vy ) ◦ (getx,x ★ sendy,x) → (ox,y ◦ Vw) ★ id1 ★ id1
▲x	▲y	w
x	y	x	y



F useget



(Vx ⊗ Vy ) ◦ (getx,y ★ sendy,y) → (ox,y ◦ Vw) ★ id1 ★ id1
▲x	▲y	w
x	z	x	z



Sync1



(V▲x ⊗ V▲z ) ◦ (getx,z ★ sendx,z) → (Vz ⊗ Vx) ★ id1 ★ id1
x	z
z	z



Sync2



V▲z ◦ (getz,z ★ sendz,z) → Vz ★ id1 ★ id1
Fig. 5. Reaction rules RF for the Fusion calculus.

Proposition 5.1 Let P and Q be two processes; then P ≡ Q if and only if P )ϕ =
 Q)ϕ, for every fusion ϕ.
The reaction rules RF are shown in Figure 5. The five rules cover the various possibilities of existing fusions between the names involved in the communication rule of the original semantics. As in the case of Milner’s bigraphical reactive systems,

these rules can be instantiated with only discrete ground bigraphs over the signature
KF ; for details see [6, §3.1].
We have the following adequacy result.
Proposition 5.2 (P, ϕ) → (P ', ϕ') ⇐⇒  P )ϕ −→ P ')ϕ' .
Proof. (⇒) The application of the Com rule of the Fusion calculus is encoded by applying one of the rules in DF on the correct sub-bigraph, i.e. the one which encodes the right side of the rule.
(⇐) If P )ϕ −→ P ')ϕ' , then there is an application of one of the rules in DF , so we use the Com rule of the Fusion on the corresponding P sub-process. 

Working with the abstract bigraphs we obtain the exact match between the Fusion reactions and bigraphic one.
The encoding of the Fusion calculus given in this paper differs from that in [6], where an “explicit fusion” control was used; hence, a single Fusion reaction (communication) had to be mimicked by a sequence of several bigraphical reactions, due to the “execution” of explicit fusions produced by the communication. Instead, in the encoding given here there is a one-to-one correspondence between Fusion and bigraphical reactions. On the other hand, the present reaction system is larger (it has five rules instead of three), and it is not orthogonal in the sense of [6].

Conclusions
In this paper we have given a sound and complete axiomatization of the precategory of directed bigraphs, a bigraphical model which subsumes and generalizes both Mil- ner’s and Sassone-Sobocin´ski variants. We have used this axiomatization for giving an encoding the Fusion calculus, taking advantage of the peculiarities of directed bigraphs; e.g., edges represent equivalence classes of names. Differently from the en- coding given in [6], here reactions in the encoding are in one-to-one correspondence with those in the original semantics (at the price of two more rules).
We plan to use this axiomatization for representing other calculi, in particular calculi with resources, locations, etc., which can be represented by edges. An in- teresting candidate is the ν-calculus [14]; it will be interesting to see which kind of wide transition systems we would obtain.
The new discrete normal form, and associated composition operations, presented in this paper can be useful in view of possible applications and extensions of logics and matching tools for bigraphs, in the line of [1,2]. Another future work is to give a 2-categorical definitions of directed link graphs.

Acknowledgement
The authors thanks the anonymous referees for useful remarks and suggestions.

References
Birkedal, L., T. C. Damgaard, A. Glenstrup and R. Milner, Matching of bigraphs, in: Proceedings of Graph Transformation for Verification and Concurrency 2006, 2007.
Conforti, G., D. Macedonio and V. Sassone, Spatial logics for bigraphs, in: L. Caires, G. F. Italiano,
L. Monteiro, C. Palamidessi and M. Yung, editors, ICALP, Lecture Notes in Computer Science 3580
(2005), pp. 766–778.
Gardner, P. and L. Wischik, Explicit fusions, in: M. Nielsen and B. Rovan, editors, Proceedings of MFCS 2000, LNCS 1893 (2000), pp. 373–382.
Grohmann, D. and M. Miculan, Directed bigraphs: theory and applications, Technical Report UDMI/12/2006/RR, Department of Mathematics and Computer Science, University of Udine (2006), available at http://www.dimi.uniud.it/miculan/Papers/ .
Grohmann, D. and M. Miculan, Directed bigraphs, in: Proc. XXIII MFPS, ENTCS 173 (2007), pp. 121–137.
Grohmann, D. and M. Miculan, Reactive systems over directed bigraphs, in: L. Caires and
V. Vasconcelos, editors, Proc. CONCUR 2007, Lecture Notes in Computer Science 4703 (2007), pp. 380–394.
Jensen, O. H. and R. Milner, Bigraphs and transitions, in: Proc. POPL, 2003, pp. 38–49.
Jensen, O. H. and R. Milner, Bigraphs and mobile processes (revised), Technical report UCAM-CL- TR-580, Computer Laboratory, University of Cambridge (2004).
Milner, R., Bigraphical reactive systems, in: K. G. Larsen and M. Nielsen, editors, Proc. 12th CONCUR, Lecture Notes in Computer Science 2154 (2001), pp. 16–35.
Milner, R., Axioms for bigraphical structure, Mathematical Structures in Computer Science 15 (2005),
pp. 1005–1032.
Milner, R., Pure bigraphs: Structure and dynamics, Information and Computation 204 (2006), pp. 60– 122.
Milner, R., Local bigraphs and confluence: Two conjectures, in: Proc. EXPRESS 2006, Electronic Notes in Theoretical Computer Science 175(3) (2007), pp. 65–73.
Parrow, J. and B. Victor, The fusion calculus: Expressiveness and symmetry in mobile processes, in:
Proceedings of LICS ’98, IEEE (1998), pp. 176–185.
URL http://www.docs.uu.se/~victor/tr/fusion.shtml

Pitts, A. M. and I. D. B. Stark, Observable properties of higher order functions that dynamically create local names, or what’s new?, in: A. M. Borzyszkowski and S. Sokolowski, editors, MFCS, Lecture Notes in Computer Science 711 (1993), pp. 122–141.
Sassone, V. and P. Sobocin´ski, Reactive systems over cospans, in: Proc. LICS (2005), pp. 311–320.
