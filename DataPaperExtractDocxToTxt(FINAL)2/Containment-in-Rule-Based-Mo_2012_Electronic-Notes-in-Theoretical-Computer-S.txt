Available online at www.sciencedirect.com


Electronic Notes in Theoretical Computer Science 284 (2012) 125–137
www.elsevier.com/locate/entcs
Containment in Rule-Based Models
C. D. Thompson-Walsh, J. Hayman1, G. Winskel1
Computer Laboratory, University of Cambridge, United Kingdom

Abstract
Recently, there has been substantial interest in using rule-based modelling approaches, such as the Kappa modelling language, to attack the combinatorial intractability of many biochemical systems. These ap- proaches have allowed several novel static analyses to be developed, which motivates broadening their expressivity. In this paper, we build upon prior work giving Kappa an SPO-rewriting semantics to add containment structure, to model the various ways in which biological mixtures are partitioned and enclosed by membranes.
Keywords: biochemical networks, Kappa, regions, rule-based modelling, SPO-rewriting


Introduction
There has recently been a great deal of interest in and investigation of the use of rule- based modelling frameworks for the simulation and static analysis of biochemical systems, in particular well-mixed chemical solutions such as the cell cytoplasm. Rule-based approaches are attractive because modern approaches to biochemistry emphasise how proteins interact via different ‘functional domains’. This lends itself naturally to a modelling proteins as collections of interacting functional domains or sites; rule-based approaches help to manage the severe combinatorial explosion in numbers of different species of protein complex possible in even fairly simply biological systems [9].
Two examples of the rule-based approach are Kappa and the BNG modelling systems [11,2]. There has been substantial recent work done on applying techniques based on Kappa to managing the combinatorial complexity of biological systems [7,10]. This motivates expanding the expressivity and applicability of the rule-based approach, to bring it to more richly-structured systems.
One particular area in which Kappa is currently weak in modelling expressiveness is in the description of different “regions” or areas in which reactions can take

1 JH and GW gratefully acknowledge the support of the ERC through the Advanced Grant ECSYM.

1571-0661 © 2012 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2012.05.019


		
Fig. 1. A spectrum of models of a cell, at different levels of detail. At left, a representation of the approx- imation of a cell as a “cytoplasm in a bag”, with the outer membrane shown dashed, circles representing proteins and arcs showing complexification as in standard representations of Kappa; at right, an informal sketch of a eukaryotic cell; centre, the model we examine in this paper.

place. Real cells, particularly eukaryotic cells, are complex and highly structured spaces. Far from being simple well-mixed cytoplasms, cells have a huge diversity of bilipid membranes and other structures within the outer cell membrane, all of them reducing the degree to which the contents of a cell can really be considered well-mixed at all. A typical “cut-away” depiction of a eukaryotic cell gives a sense of the complexity (see the rightmost part of Fig. 1)
This partition matters because different compartments can exhibit strongly di- vergent concentrations, and hence divergent chemical behaviours; and because fre- quently, the cell will exploit concentration gradients across membranes. Where a reaction happens turns out to matter to how the system evolves. Nor are the struc- tures static: new compartments can form, compartments can be destroyed, and compartments can merge or bud (hive off from existing compartments).
Any simple formalisation of the complexity of actual eukaryotic cells necessarily approximates; the existing approximation in Kappa modelling is to describe bio- chemical networks as operating in a single well-mixed solution (i.e. one in which there is no structure statistically significant to the probabilities of particular parti- cles interacting.)
Our contribution in this paper is to describe a feasible compromise between the full complexity of (for example) a cell and this existing approximation, as shown in figure 1. Our approach is based around adding containment structure to Kappa; it is related to other efforts (such as [13]), but differs in the emphasis placed on being able to model the dynamics of these structures.
The model we give will be based around the idea of containment of protein complexes and regions within other regions; hence we adopt the name containment structures. We will build this model as additional structure to be carried into a semantics for Kappa developed in previous work [6].
In this paper, we first describe a version of Kappa and its associated Single- Pushout (SPO) semantics, simplified to take account of the fact that issues in pro- viding an expressive model for containment are largely orthogonal to those in pro- viding an expressive model for Kappa. This is a simplification of work to appear in [6], which provides a specialised graph-based approach to describe Kappa rewriting, comparable to graph-based perspectives on other systems for modelling signalling pathways [1,3]. We then describe, in an analogous fashion, the statics and dynamics of our containment structures, and give examples of how various biological processes

can be modelled. Finally, we describe how our containment structure dynamics can be dovetailed onto Kappa; the usual stochastics can then be applied to give a model with both stochastic chemical and structural expressiveness. We conclude by giving a brief sketch of present and future work based on this new model.

Simplified Kappa
There are a variety of papers on Kappa; a good recent introduction can be found in [8]. The essential approach in Kappa is to model the state of a well-mixed solution in terms of complexes of agents. The intention is that agents model individual proteins or molecules; each agent has a collection of functional sites associated with it, which may enter into binary links with other sites. The dynamics are given in terms of rules, which may be thought of as locally describing how the solution is affected by describing its effect on any collection of agents matching a given test pattern.
Complexes are connected components of these agents in the graph defined by link structure. Complexes model aggregations of molecules: they can model aggregates of proteins that are chemically bonded, or else associated by any one of a number of “weak” bonding processes.
The overall pattern of development for our semantics is first to establish a cat- egory of structures representing Kappa states and rule patterns, which has as mor- phisms structure-preserving maps. This is used to introduce a notion of partial map (using a standard span construction) and is followed by distinguising classes of matchings and action morphisms. We can then model rules using action morphisms, and rule applications as matchings from the left-hand side of the action morphism into an object representing the mixture. We define the result of applying a rule to be the pushout of the action morphism against this matching. Finally, we prove that this pushout always exists. (When we come to define our compartment-modelling structures, we will follow a similar pattern.)
We begin by defining Σ-graphs, a kind of generalised Kappa state:
Definition 2.1 Assume that we have the ambient sets Type, a set of agent types, and SiteId a set of site identiﬁers; and a map Σ: Type → P(SiteId) which gives the set of sites on an agent of given type.
Then, a Σ-graph is a tuple (Ag, type, Sts, L) where
Ag is the set of agents.
type : Ag → Type is a total typing function, giving what “kind” of molecule or protein each agent models.
Sts ⊆ {(A, i) | A ∈ Ag and i ∈ Σ ◦ type(A)} is the set of sites speciﬁed in the Σ
graph.
L ⊆ Sts × Sts is the set of links, a symmetric irreflexive relation on Sts.
Note the ability to leave a site’s link state unspecified. Later we will see that an object with unspecified link state at a site may be match structures which have

that site specified as either linked or unlinked.
We identify a class of “site graph” objects which represent the physically mean- ingful rule patterns:
Definition 2.2 A Kappa site graph is a Σ-graph (Ag, type, Sts, L) where the link relation satisﬁes the partial function condition: (s, sj) ∈ L and (s, sjj) ∈ L ⇒ sj = sjj.
In a site graph, each site participates in at most one link.
We can also pick out those objects which represent complete system states, with- out any underspecification — we call these mixtures, in reference to the biochemical setting of Kappa:
Definition 2.3 A mixture is a Kappa site graph (Ag, type, Sts, L) in which Sts =
{(A, i) | A ∈ Ag and i ∈ Σ ◦ type(A)}.
In a mixture, every agent has to have every site specified allowed by the signature.
For any Σ-graph X, it is convenient to adopt the convention of writing AgX for its set of agents, StsX for its set of sites, LX for its link relation and typeX for its typing function.
Definition 2.4 A Σ-homomorphism f : X → Y is a (total) function f : AgX →
AgY such that:
f preserves agent types: typeX (C)= typeY (f (C)).
f preserves the presence of sites: {(f (A), i) | (A, i) ∈ StsX}⊆ StsY .
Link structure is respected: if ((C, i), (D, j)) ∈ LX then ((f (C), i), (f (D), j)) ∈
LY .
Note that homomorphisms only preserve the presence of links from a site; they do not preserve the absence of links from a given site. We shall see that this generality is important when we come to consider action morphisms.
Partial morphisms on Σ-graphs are now constructed as particular kinds of spans of homomorphisms. Essentially, this amounts to describing a partial morphism in two stages, firstly defining the domain of definition of the partial map and then defining the effect of the partial morphism as a homomorphism from the domain of definition into the target. The domain of definition is just a subset of elements in the domain:
Definition 2.5 A Σ-sub-graph D of a Σ-graph S is a Σ-graph where AgD ⊆ AgS, LD ⊆ LS, StsD ⊆ StsS and typeD is the restriction of typeS to AgD. A Σ-sub-graph inclusion is the obvious identity-like morphism from D to S.
We can now define a partial morphism from S to T to be a span consisting of an inclusion i : D ‹→ S, where D is a Σ-subgraph of S, together with a homomorphism h : D → T . Since the inclusion i is uniquely determined by the choice of D, we write (D, h) for such spans.
For any partial morphism f : S → T , we adopt the convention of writing Df for the subgraph D above and f0 for the homomorphism h above, so f = (Df , f0). For

any agent A in Df , we allow ourselves to write f (A) for the result of applying the homomorphism f0 to A.
Suppose we have partial morphisms f = (Df , f0) : S → T and g = (Dg, g0) : T → U . Their composition is defined in the obvious way, with the domain of definition of the composition formed as the ‘inverse image’ of f0 applied to the domain of definition of g. In full detail:
For any agent A ∈ AgS, we have A ∈ AgDg◦f iff A ∈ AgDf and f (A) ∈ AgDg .
For any site (A, i) ∈ StsS, we have (A, i) ∈ StsDg◦f iff (A, i) ∈ StsDf and (f (A), i) ∈ StsDg .

For any link ((A, i), (Aj, ij)) ∈  LS, we have ((A, i), (Aj, ij)) ∈  LD

g◦f
iff

((A, i), (Aj, ij)) ∈ LD  and ((f (A), i), (f (Aj), ij)) ∈ LD .
It can be seen [6] that this construction yields a pullback of the homomorphism f0 : Df → T against the inclusion Dg ‹→ T in the category of Σ-graphs with homomorphisms between them, so it corresponds to the standard definition of com- position of spans by taking a pullback.
With this composition between partial homomorphisms, we can form a cate- gory of Σ-graphs with partial homomorphisms. Clearly, any homomorphism can be regarded as a partial morphism by taking the inclusion to be the identity.
With all the categorical underpinnings in place, we can now describe the two distinguished classes of partial morphisms, matchings and actions, which are used to model matches and rules.
For rewriting rules, the idea is to model an action as a partial morphism α : X → Y between site graphs X and Y . Site graphs play the rˆole of patterns: an action can be applied to a mixture if its left-hand side X matches some part of the mixture. Matchings, which we define next, model these matches; they are injective homomorphisms that additionally preserve the absence of links on determined sites. They can be thought of as picking out an exact image of the left-hand side of a rule in a state.
Definition 2.6 An matching from a site graph X into a site graph Y is a homo- morphism f : X → Y which satisfies the following axioms:
f is injective.
f reflects link information: For any (C, i) ∈ StsX , if there exists some (D, j) ∈ StsY such that ((f (C), i), (D, j)) ∈ LY , then there must exist some Cj such that ((C, i), (Cj, j)) ∈ LX . (The agent Cj is necessarily the unique agent such that f (Cj)= D).
We now define action morphisms. Viewing an action α as a span, the domain of definition Dα represents the part of X that is tested by the rule. The elements of X not in Dα are to be destroyed by the rule, and the elements of Y outside the image of α0 are created by the rule.
Definition 2.7 An action is a partial morphism α : X → Y from a site graph X
to a site graph Y that obeys the following axioms:

α is partial injective:
for any A, Aj ∈ AgD , if α(A)= α(Aj) then A = Aj
the only way to delete a site is to delete its agent:
if (A, i) ∈ StsX and A ∈ AgDα then (A, i) ∈ StsDα .
no sites are introduced to existing agents:
if A ∈ AgDα and (α(A), i) ∈ StsY then (A, i) ∈ StsDα .
all newly-created agents are created with all possible sites:
if A ∈ AgY and there is no A0 ∈ AgDα such that α(A0)= A then (A, i) ∈ StsY
for all i ∈ Σ(typeY (A)).
We can see how rules apply to states by taking the pushout of the action against the matching, in the category of Σ-graphs with partial morphisms:
Proposition 2.8 Given any span α : X → Y, i : X → S in the category of partial Σ-morphisms, with α an action and i an matching, and S a mixture, there is a pushout

X   α /Y ¸
i J  p	i 
S	/T ¸
α
where αj is an action and ij is an matching, and T is also a mixture.
It is shown in [6] how this corresponds to the usual interpretation of Kappa actions as describing how agents and links are added to and removed from some part of the mixture initially matching S.

Regions
Real biological systems exhibit remarkable complexity in structure and arrange- ment. A common, simplifying pattern is wanted to be the basis of our model. In the simplest, and most common case, one can think of a membrane that encloses a well-mixed region of space, and whose precise shape is unimportant.
We therefore adopt a perspective that views the cell (or subsystem of interest) as a set of regions, each of which may recursively contain other regions, and which assumes the contents of each region to be well-mixed, i.e. to obey standard mass- action dynamics. Each region models one compartment; we model one compartment held inside another through a notion of containment on regions.
In this section, we study the definition of systems composed exclusively of re- gions. In subsequent sections, we will extend our Kappa semantics from above to carry this region structure, resulting in a recursive scheme of regions containing well-mixed solutions of agents and other regions. The development of this section parallels that of Section 2.


	
Fig. 2. Representing containment structures as trees. The informally depicted situation on the left is represented as the tree shown at right (region identities are omitted for clarity.) It will be convenient to be able to use filled triangles to represent subtrees whose precise members we have not specified; in this case, the triangle represents all of the contents of the shaded membrane.
Containment Structures
We represent region containment in essence as a finite-depth forest. We have a set of regions R and a reflexive relation ≤1 over them; we read x ≤1 y as “the region x is immediately contained in or equal to the region y”.
Definition 3.1 A containment structure X is a pair of a set of regions RX and a containment relation ≤1X, where ≤1X⊆ RX × RX, such that the ≤1X relation satisﬁes the following axioms:
≤1X has ﬁnite depth: writing ≤X for the transitive closure of ≤1X, we insist that for any x, {y | x ≤X y} is ﬁnite.
For any x, y, z with z /= x /= y, if x ≤1X y and x ≤1X z then y = z.
For all x, we have x ≤1X x.
If the order ≤X has a maximum element, we call the containment structure X
connected; we call the maximum element the top region.
A region models a region of space. We think of the cytoplasm (or other solution) as being partitioned into regions by membranes, so each region implies the existence of an enclosing membrane. Containment structures are easily represented as a forest, as in Fig. 2.

Maps and Dynamics
We now describe containment structure homomorphisms. These may be thought of as describing how one structure can be mapped over into another.
Definition 3.2 A containment structure homomorphism f : X → Y is a total function f : RX → RY such that f preserves ≤1X — formally, for all x, y we have that x ≤1X y implies f (x) ≤1Y f (y).
Containment structures with these homomorphisms form the category Reg. The next step is to introduce partiality, as we did before, as a span consisting of an inclusion and a homomorphism.
Definition 3.3 A containment structure inclusion is a morphism f : X → Y where
f is total and identity-like (so RX ⊆ RY ), and ≤1X is contained in ≤1Y
Definition 3.4 A partial containment structure morphism f : X → Y is a span of

an inclusion with a homomorphism: Df ‹→ X and f0 : Df → Y . Df is the “domain of deﬁnition”; it identiﬁes that part of X on which f is deﬁned.
It can be shown that these spans compose associatively in the way expected, and that there is an identity; we therefore have the category of containment structures with partial morphisms, called PReg. Moreover, homomorphisms are included into the category by simply using the identity inclusion to form the inclusion leg of the span; we thus have a class of “total” morphisms in PReg.
We can now establish our class of action morphisms, used to model rules and updates, and our class of matchings, used to model rule applications.
We utilise a constrained form of partiality for our actions, where maps must be total on all regions. Maps need not, however, preserve the containments between regions. This choice of partiality, taken together with the rest of the defined dy- namics, ensures that the effect of a rule is confined to the region of the containment structure where it applies.
Definition 3.5 A containment structure matching is a total morphism i : X → S
such that i is injective.
Definition 3.6 A containment structure action morphism is a morphism α : X → Y , in PReg, such that both X and Y are connected, α takes the top region of X to the top region of Y and α is total on regions.
This is all that is needed for the following result:
Proposition 3.7 Given any span in PReg α : X → Y, i : X → S, with α an action and i an matching, and S a connected containment structure, there is a pushout
X   α /Y ¸
i J  p	i 
S	/T ¸
α
where αj is an action and ij is an matching, and T is also connected.
Expressiveness
This dynamics enable us to model several biologically important processes, some of which are briefly sketched here and in Figure 3. We also indicate certain processes that are not describable in these semantics.
Merging In merging, the object is to combine two membranes into a new, larger membrane with the union of the contents of the original membrane. We can merge membranes in the natural way, by constructing a morphism which maps the two to the same target.
Suppose we have two sibling membranes, b and c, which we wish to merge. Since they are siblings, they are both immediately contained in some region a. Our containment structure morphism will consist of a map from a, b, c to a, d, forming a morphism between the containment structures X and Y :

Merging

Motion

a




Dissolution

a





Fig. 3. Merging, motion and dissolution. In each case, we illustrate at left a sketch of the structure of the modelled membranes before and after, respectively, merging, motion and dissolution. At right, we show how this evolution is represented in a tree-like depiction of a containment structure. As above, the shaded triangles serve to indicate where the subtrees (which we do not draw in detail) of each region lie. For clarity, we neglect other descendants of the top region.


RX ={a, b, c}
≤1X ={(b, a), (c, a)}
∪ IdRX
⎧a '→ a
α	b '→ d
⎪⎩c '→ d
RY ={a, d}
≤1Y ={(d, a), (a, a),
(d, d)}

(Since the map is total, the domain of definition Dα is simply X.)
Motion The object of motion is to take one membrane and move it, along with its contents, into another. This is modelled with a morphism mapping membranes from their starting configuration into their ending configuration. Perhaps sur- prisingly, however, motion exploits partiality : we use undefinedness to “break” immediate containments which no longer hold in the target.
For example, suppose that we have membranes b and c inside a top-level mem- brane a. We wish to move the membrane c and its contents so that they are inside b. The immediate containment of c inside a will not be preserved, so it will not be present in the domain of definition. If X is the left-hand side of the rule and Y the right-hand side of the rule, we can model this example of motion as follows:



RX = {a, b, c}
⎧⎪a '→ a
R	= {a, b, c}

≤1X
= {(c, a), (b, a)}∪ IdRX
α  ⎨
b '→ b
Y
≤1Y
= {(b, a), (c, b)}

RD = {a, b, c}

 
⎪⎩c '→ c
∪ Id

Dissolution of membranes The object in dissolution is to model a rule which removes a membrane, placing all of its contents in the next enclosing membrane. This is possible using a non-injective mapping on membranes: given a membrane c, which we wish to delete, and an enclosing membrane b, itself living inside a, we construct a morphism which maps both b and c to a region d.

RX = {a, b, c}

 
∪ IdRX
⎧⎪⎨a '→ a
	
⎪⎩c '→ d

R	= {a, d}
≤ X = {(d, a), (a, a), (d, d)}

Creation of new empty regions is straightforward, as these may be added
freely to the codomain of an action.
The general flavour of our semantics is of a relatively rigid matching and rewrit- ing of parts of the region structures. There are some situations which do not sit well in this model. Many natural processes require a kind of “universal rendezvous”
— that is, the rule-application will require the systematic modification of an un- bounded number of regions without direct pre-images in the rule LHS. In general, our quite rigid matchings do not support these. Two physically motivated examples not present in our semantics are:
Destruction It is sometimes desirable to model the total annihilation of a region, together with all of its contents. This is not possible in the present semantics: we in fact insist that regions are never destroyed. Even if we could destroy regions, we would need to match on “everything” inside a region, which is a form of universal rendezvous not possible with our rigid matchings.
Budding Many processes that form membranes work by “budding”: partition- ing an existing region. In budding then, the original region therefore need to be exhaustively and stochastically split between the two new daughter regions. Although we can model “small” budding events using techniques such as those described in [14], we cannot express the general case: there is no way to get a “handle”, via matchings, on “all contents” of a region. In addition, there is no way of describing stochastic partitioning of these contents.

Augmenting Kappa with Containment
In this section, we give an account of how to equip our simplified Kappa semantics with containment structure.
Definition 4.1 We deﬁne a Σ-region-graph to be a triple of:

A Σ-graph G = (Ag, type, Sts, L).
An containment structure S = (R, ≤1).
A placing function p : Ag → R.
The intuition of course is that this is a Σ-graph which carries some extra region structure; the placing relation indicates in which region each agent can be found.
We also define site graphs, mixtures and morphisms:
Definition 4.2 We import the following deﬁnitions from containment structures and Σ-graphs:
A Σ-region site graph is a Σ-region-graph (G, S, p) where G is a Σ-site graph, S
is connected and p is total.
A Σ-region mixture is a Σ-region site graph (G, S, p) where G is a Σ-mixture.
Definition 4.3 A Σ-region-graph homomorphism f  :  (GX, RX, pX )  → (GY , RY , pY ) is a pair of maps (f1, f2) where f1 is a (total) Σ-homomorphism, and f2 is a (total) containment structure homomorphism, such that the homomor- phisms respect the placing relation: for any agent C ∈ GX, if pX (C) is deﬁned, we have that f2(pX (C)) = pY (f1(C))
Definition 4.4 A sub-Σ-region-graph D of X is a Σ-region-graph (GD, SD, pD) where GD is a Σ-subgraph of GX, SD is a sub-containment-structure of SX, and pD is a restriction of pX to a subset of the agents of GD.
We call the obvious identity-like map from D into X the inclusion of D into X.
Definition 4.5 A Σ-region-graph partial morphism is a span of an inclusion with a Σ-region-graph homomorphism.
Once again, one can compose by pullback, to yield a category of partial mor- phisms PRk (which includes total morphisms as a special case).
Definition 4.6 A Σ-region-graph action is a Σ-region-graph partial morphism f : X → Y where f1 is a Σ-action, and f2 is an containment structure action, and both X and Y are Σ-region site graphs.
Definition 4.7 A Σ-region-graph matching is a total Σ-region-graph morphism (f1, f2) where the components are respectively Σ and containment structure match- ings.
Note that the totality of matchings implies that the placing of agents found in the source of the matching must be fully respected in the target.
Finally, once again we can show our standard dynamics theorem:
Proposition 4.8 Given any span α : X → Y, i : X → S in PRk with α an action and i an matching, and S a connected containment structure, there is a pushout
X   α /Y ¸
i J  p	i 
S	/T ¸
α

where αj is an action and ij is an matching, and T is also connected.



Conclusion
We have presented a natural, conservative extension to the semantics of Kappa to include a simple dynamics of regions. It is hoped that this begins the process of enriching Kappa as a biological modelling language to represent compartments. There are several possible avenues of future research.
One important question is the complexity and efficiency of simulating Kappa with regions. A key attraction of classical Kappa is a markedly efficient simula- tion algorithm [9]. This algorithm relies on each rule application only enabling or disabling a small and bounded set of other applications — in other words, rule ap- plications have only local impact. This allows efficient incremental update of a set of rule enablings.
Introducing containment structure, however, creates a kind of rule which can have decidedly non-local effect: if a container is moved or deleted, then this poten- tially affects (rules applying to) all of the contained Kappa agents. In general, in our relatively unconstrained full semantics, it is possible to define systems in which this results in severely worse simulation cost.
Nevertheless, it may be hoped that real systems, or perhaps sufficiently con- strained and massaged real systems, might not excite this pathological behaviour. Preliminary work suggests that existing techniques can be effectively adapted to simulate constrained classes of system with reasonable efficiency; however, further work, and especially testing on real example systems of interest, is necessary to validate the new techniques.
It would be useful to establish connections with other space formalisms. In par- ticular, representing containment structure separately from agent complexification is distinctly bigraphical in flavour, and so a connection should be attempted with [15,5].
Finally, it may be worthwhile to explore other notions of structure, both more and less expressive. As we gain experience, it may be desirable to explore both more complex and simpler options. One could for example add “wildcard” constructs to rule patterns, and other constructs of universal rendezvous. Work here might draw on comparisons with the Brane calculus [4] and perhaps more speculatively the Join calculus [12], as well as work on multi-level multisets [16].
Alternatively, with the goal of simplification, one might consider whether sys- tems with regions at arbitrary depth beneath other regions can be translated into systems in which regions do not contain other regions, yielding ”flat” region struc- tures. The translation should (approximately) preserve the dynamics of the original system. Such techniques might have advantages in implementation efficiency for particularly demanding systems.

References
Oana Andrei and H´el`ene Kirchner. Graph rewriting and strategies for modeling biochemical networks. In Proceedings of the Ninth International Symposium on Symbolic and Numeric Algorithms for Scientific Computing (SYNASC 2007), pages 407–414. IEEE Computer Society, 2007.
Michael L. Blinov, James R. Faeder, Byron Goldstein, and William S. Hlavacek. BioNetGen: software for rule-based modeling of signal transduction based on the interactions of molecular domains. Bioinformatics, 20(17):3289–3291, 2004.
Michael L. Blinov, Jin Yang, James R. Faeder, and William S. Hlavacek. Graph theory for rule-based modeling of biochemical networks. In Transactions on Computational Systems Biology VII, volume 4230 of Lecture Notes in Computer Science (Lecture Notes in Bioinformatics), pages 89–106, 2006.
Luca Cardelli. Brane calculi, interactions of biological membranes. In Proceedings of the Second International Conference on Computational Methods in Systems Biology (CMSB 2004), volume 3082 of Lecture Notes in Computer Science, pages 257–278, 2004.
Troels C. Damgaard and Jean Krivine. A generic language for biological systems based on bigraphs. Technical Report TR-2008-115, IT Univeristy of Copenhagen, 2008.
Vincent Danos, J´erˆome Feret, Walter Fontana, Russell Harmer, Jonathan Hayman, Jean Krivine, Christopher D. Thompson-Walsh, and Glynn Winskel. Graphs, rewriting and causality in rule-based models. Submitted. Available from http://www.cl.cam.ac.uk/∼jmh93/, 2012.
Vincent Danos, J´erˆome Feret, Walter Fontana, Russell Harmer, and Jean Krivine. Rule-based modelling of cellular signalling. In Proceedings of the 18th International Conference on Concurrency Theory (CONCUR 2007), volume 4703 of Lecture Notes in Computer Science, pages 17–41, 2007.
Vincent Danos, J´erˆome Feret, Walter Fontana, Russell Harmer, and Jean Krivine. Abstracting the differential semantics of rule-based models: exact and automated model reduction. In Proceedings of the 25th Annual IEEE Symposium on Logic in Computer Science (LICS 2010), pages 362–381. IEEE Computer Society, 2010.
Vincent Danos, J´erˆome Feret, Walter Fontana, and Jean Krivine. Scalable simulation of cellular signaling networks. In Proceedings of the Fifth Asian conference on Programming Languages and Systems (APLAS 2007), volume 4807 of Lecture Notes in Computer Science, pages 139–157, 2007.
Vincent Danos, J´erˆome Feret, Walter Fontana, and Jean Krivine. Abstract interpretation of cellular signalling networks. In Proceedings of the Ninth International Conference on Verification, Model Checking, and Abstract Interpretation (VMCAI 2008), volume 4905 of Lecture Notes in Computer Science, pages 83–97, 2008.
Vincent Danos and Cosimo Laneve. Formal molecular biology. Theoretical Computer Science, 325(1):69–110, 2004.
C´edric Fournet and Georges Gonthier. The Join calculus: a language for distributed mobile programming. In International Summer School on Applied Semantics (APPSEM 2000), volume 2395 of Lecture Notes in Computer Science, pages 268–332, 2000.
Leonard A. Harris, Justin A. Hogg, and James R. Faeder. Compartmental rule-based modeling of biochemical systems. In Proceedings of the 2009 Winter Simulation Conference (WSC 2009), pages 908–919. IEEE, 2009.
Jean Krivine, Robin Milner, and Angelo Troina. Stochastic bigraphs. In Proceedings of the 24th Conference on the Mathematical Foundations of Programming Semantics (MFPS XXIV), volume 218 of Electronic Notes in Theoretical Computer Science, pages 73–96, 2008.
Robin Milner. The space and motion of communicating agents. Cambridge University Press, 2009.
Nicolas Oury and Gordon Plotkin. Multi-level modelling via stochastic multi-level multiset rewriting.
Mathematical Structures in Computer Science, 2011. Special issue on DCM 2010, to appear.
