

Electronic Notes in Theoretical Computer Science 209 (2008) 201–215
www.elsevier.com/locate/entcs
A Coalgebraic Theory of Reactive Systems 1
Filippo Bonchi2 and Ugo Montanari3
Department of Computer Science University of Pisa

Abstract
In this paper we investigate the connection between two well known models for interactive systems. Re- active Systems `a la Leifer and Milner allow to derive an interactive semantics from a reduction semantics guaranteeing, under rather restrictive conditions, the compositionality of the abstract semantics (bisimi- larity). Universal Coalgebra provides a categorical framework where bisimilarity can be characterized as final semantics, i.e., as the unique morphism to the final coalgebra. Moreover, if lifting a coalgebra to a
structured setting is possible, then bisimilarity is compositional with respect to the lifted structure.
Here we show that for every reactive system we can build a coalgebra. Furthermore, if bisimilarity is compositional in the reactive system, then we can lift this coalgebra to a structured coalgebra.
Keywords: Reactive Systems, Coalgebras, Labeled Transition Systems


Introduction
The operational semantics of process calculi is usually given in terms of transition systems labeled with actions, which, when visible, represent both observations and interactions with the external world. The abstract semantics is given in terms of behavioral equivalences, which depend on the action labels and on the amount of branching structure considered. Behavioral equivalences are often congruences with respect to the operations of the language, and this property, which depends on how actions are combined and transformed by the operations, expresses the compositionality of the abstract semantics.
A simpler approach, inspired by classical formalisms like λ-calculus, Petri nets, term and graph rewriting, and pioneered by the Chemical Abstract Machine [3], defines operational semantics by means of structural axioms and reduction rules. Process calculi representing complex systems, in particular those able to generate and communicate names, are often defined in this way, since structural axioms give

1 Research partially supported by the IST 2004-16004 SEnSOria, and the MIUR PRIN 2005015824 ART.
2 Email: fibonchi@di.unipi.it
3 Email: ugo@di.unipi.it

1571-0661 © 2009 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2009.02.012

a clear idea of the intended structure of the states while reaction rules, which are often non conditional, give a direct account of the possible steps. Transitions caused by reaction rules, however, are not labeled, since they represent evolutions of the system without interactions with the external world. Thus reduction semantics in itself is neither abstract nor compositional.
To enhance the expressiveness of reduction semantics, Leifer and Milner pro- posed in [12] the theory of reactive systems: a systematic method for deriving a labeled transition system from reduction rules. The main idea is the following: a process p can do a move with label C[−] and become p' iff C[p] ~ p'. Roughly a reactive system is a syntactical category equipped with a set of rewriting rules. In the category, arrows represents terms and contexts while arrows composition mod- els the insertion of terms into contexts. Rewriting rules are pairs of terms, and the reduction relation ~ is defined by closing the rules under contexts composition.
Leifer and Milner introduced also the categorical notions of relative pushout (RPO) and idem relative pushout (IPO) in order to specify a/the minimal context that allows the state to react with a given rule. This construction leads to labelled transition systems (LTS) that use only contexts generated by IPOs, and not all contexts, as labels, and thus are smaller than in the latter case. Bisimilarity, as well as trace and failure equivalence, on this LTS is a congruence under rather restrictive conditions.
After them, several authors started doing research in this direction, producing a wide theoretical corpus going from bigraphs to adhesive categories. A generalization to reactive systems over G-categories has been proposed by Sassone and Sobocin´ski [16]. The same authors also extended the theory to open systems [11]. Bruni, Gad- ducci, Montanari and Sobocin´ski developed the same theory using tile systems but obtaining a weak semantics (abstracting from internal actions). In [13], Milner in- troduced bigraphs as canonical structures to which the general theory is applicable, while in [9], Ko¨nig and Ehrig applied the theory to DPO graph rewriting.
The aim of this paper is to recast reactive systems as structured coalgebras. The use of coalgebras for the specification of dynamical systems with a hidden state space is receiving more and more attention in the last years, as a valid alternative to algebraic methods based on observational equivalences [14]. Given an endofunctor F on a category C, a coalgebra is an arrow f : X → F(X) of C and a coalgebra morphism from f to f ' is an arrow h : X → X' of C with h ; f ' = f ; F(h). Under certain conditions on C and F, a category of coalgebras admits a final object, which can be considered informally as the minimal realization of the union of all the coalgebras in the category.
Ordinary labeled transition systems (with finite or countable branching) can be represented as coalgebras for a suitable functor on Set. Furthermore, the unique morphism to the final coalgebra induces an equivalence which turns out to be exactly bisimilarity. Thus a first (rather straightforward) result of this paper is to show that the labeled transition systems derived from reactive systems can be considered as coalgebras and that their bisimilarity can be characterizes as final semantics.
However, this representation forgets about the algebraic structure of reactive

systems, i.e., the composition between arrows of the syntactic category. As a conse- quence, the property that bisimilarity is a congruence, which is essential for making abstract semantics compositional, is not reflected in the structure of the model.
The problem of integrating coalgebras and algebras obtaining a model equipped with both structures has been tackled in [18], and an alternative but equivalent ap- proach based on structured coalgebras is presented in [6,7]. Here, the endofunctor de- termining the coalgebraic structure is lifted from Set to the category of Γ-algebras, for some algebraic theory Γ. Morphisms between coalgebras in this category are both Γ-homomorphisms and coalgebra morphisms, and thus the unique morphism to the final coalgebra, which always exists, induces a (coarsest) bisimulation con- gruence on any coalgebra.
It is turn out that the conditions that guarantee the compositionality of bisimi- larity in the theory of reactive systems imply the existence of a structured coalgebras equivalent to the distilled LTS. Thus a second result of the paper is to provide a dif- ferent understanding of why bisimilarity is a congruence in the derived LTS. Namely the derived transition system is functorial, i.e. it preserves identities and arrows composition. Here the decomposition property of IPO’s is pivotal and it remembers us the decomposition property of tile systems [10] that guarantees compositionality of tile bisimilarity. For this reason the results presented here are strictly related to
[8] where the authors show how to recast tile systems as structured coalgebras.
After formally introducing the theory of reactive systems (Section 2), and the theory of coalgebras and structured coalgebras (Section 3), we first define a coalge- braic characterization of the derived LTS of reactive systems (Section 4), and then we lift this construction from Set to algebras representing the syntactical category of reactive systems (Section 5). At the end (Section 6), we summarize the results and we outline the future direction of research. The proofs of several important lemmas can be found in [5].

The Theory of Reactive Systems
Here we summarize the theory of reactive systems proposed in [12] to derive labelled transition systems and bisimulation congruences from a given reaction semantics. The theory is centered on the concepts of term, context and reaction rules: contexts are arrows of a category, terms are arrows having as domain 0 (a special object that denotes no holes), and reaction rules are pairs of terms.
Definition 2.1 (Reactive System) A reactive system C consists of:
a category C
a distinguished object 0 ∈ |C|
a composition-reflecting subcategory D of reactive contexts
a set of pairs R ⊆  I∈|C| C[0,I] × C[0,I] of reaction rules.
The reactive contexts are those in which a reaction can occur. By composition- reflecting we mean that d; d' ∈ D implies d, d' ∈ D.
Note that the rules have to be ground, i.e., left-hand and right-hand sides have


C[−] ¸I4,,¸d¸¸ C[−] ¸I4,,,¸,d¸¸	e' ¸I6,,,¸,f¸' ¸	g' ¸I4,,,
¸	 g	¸	 h	¸	g

I2 ,¸ ¸¸ ¸I3,I2
e I5 ¸f ,I3,I2
e I5 ¸f ,I3
I6 ¸h ,I5

p ¸¸
				
,¸¸¸¸ ¸

0 l
p ¸  l
0

(i)	(ii)	(iii)	(iv)
Fig. 1. Redex Square and RPO
to be terms without holes and, moreover, with the same codomain.
From reaction rules one generates the reaction relation by closing them under all reactive contexts. Formally the reaction relation is defined by taking p ~ q if there is ⟨l, r⟩∈ R and d ∈ D such that p = l; d and q = r; d.
Thus the behaviour of a reactive system is expressed as an unlabelled transition system. On the other hand many useful behavioural equivalences are only defined for LTSs. In order to obtain an LTS, we can plug a term p into some context C[−]
C[−]
and observe if a reaction occurs. In this case we have that p → . Categorically
speaking this means that p; C[−] matches l; d for some rule ⟨l, r⟩ ∈ R and some reactive context d. This situation is formally depicted by diagram (i) in Figure 1: a commuting diagram like this is called a redex square.
Definition 2.2 (context  transition  system) The context transition system
(CTS for short) is defined as follows:
states: arrows p :0 → I in C, for arbitrary I;
C[−]
transitions: p →C q iff C[p] ~ q.
Note that this labelled transition system is often infinite-branching since all contexts that allow reactions may occur as labels. Another problem of CTS is that it has redundant transitions. For example, consider the term a.0 of CCS. The observer can put this term into the context a.0 |− and observe a reaction. This correspond

to the transition a.0
a.0|−
→C  0|0. However we also have a.0
p|a.0|−
→C	p | 0 | 0 as a 

transition, yet p does not contribute to the reaction. Hence we need a notion of “minimal context that allows a reaction”. Leifer and Milner define idem pushouts (IPOs) to capture this notion.
Definition 2.3 (RPO Let the diagrams in Figure 1 be in some category C. Let
(i) be a commuting diagram. Any tuple ⟨I5, e, f, g⟩ which makes (ii) commute is called a candidate for (i). A relative pushout (RPO) is the smallest such candidate. More formally, it satisfies the universal property that given any other candidate
⟨I6, e',f ', g'⟩, there exists a unique mediating morphism h : I5 → I6 such that (iii) and (iv) commute.
Definition 2.4 (IPO) A commuting square such as diagram (i) of Figure 1 is called idem pushout (IPO) if ⟨I4, c, d, idI4 ⟩ is its RPO.
We say that a reactive system has RPOs if, in the underlying category, for each

commuting square there exists an RPO, while we say that it has redex RPOs, if for each redex square there exists an RPO.
Definition 2.5 (IPO-Labelled Transition System) The IPO-labelled transition system (ILTS for short) is defined as follows:
states: p :0 → I in C, for arbitrary I;
C[−]
transitions: p →I r; d iff d ∈ D, ⟨l, r⟩ ∈ R and the diagram (i) in Figure 1 is an
IPO.
In other words, if inserting p into the context C[−] matches l; d, and C[−] is the “smallest” such context (according to the IPO condition), then p transforms to r; d with label C[−], where r is the reduct of l.
Bisimilarity on ILTS is referred to as standard bisimilarity (denoted by ∼IPO ), and Leifer and Milner have shown that if the reactive system has redex RPOs, then it is a congruence (i.e., it is preserved under all contexts).
Proposition 2.6 Let C be a reactive system having redex RPOs, then ∼IPO is a congruence.
The bisimilarity over CTS is a congruence as well and it seems to be more appropriate for several formalisms (e.g. Logic Programming and Open π-Calculus). In [4], the authors study this bisimilarity (called saturated bisimilarity and denoted by ∼SAT ) and they provide an alternative characterization called semi-saturated bisimilarity.
Definition 2.7 (Semi-Saturated Bisimulation) A symmetric relation R is a semi-saturated bisimulation iff whenever pR q, then
p →c I p' implies the existence of d, e, q' such that d; e = c, q →d I q' and p' R q'; e. The union of all Semi-Saturated bisimulation is Semi-Saturated bisimilarity (de- noted by ∼SS).
This characterization is more efficient than considering all the possible contexts as labels. However, as the following proposition states, it exactly coincides with saturated bisimilarity.
Proposition 2.8 Let C be a reactive system having redex RPOs, then ∼SAT =∼SS. In this paper, we focus on providing a coalgebraic characterization of the ILTS
semantics and then of ∼IP O. We left the coalgebraic characterization of ∼SAT as
future work.

Coalgebras and Structured Coalgebras
In this section we first introduce the standard way to represent labeled transition systems as coalgebras for a suitable powerset functor [14], and then we discuss how this encoding can be lifted to a more structured framework, where the coalgebraic representation keeps the relevant algebraic structure of the states and transition of

the encoded system. Let us start introducing the formal definition of coalgebra for a functor.
Definition 3.1 (coalgebras) Let B : C → C be an endofunctor on a category C. A coalgebra for B or B-coalgebra is a pair ⟨A, a⟩ where A is an object of C and a : A → B(A) is an arrow. A B-cohomomorphism f : ⟨A, a⟩ → ⟨A', a'⟩ is an arrow f : A → A' of C such that
f ; a' = a; B(f ).	(1)
The category of B-coalgebras and B-cohomomorphisms will be denoted CoalgB. The underlying functor U : CoalgB → C maps an object ⟨A, a⟩ to A and an arrow f to itself.
Let PL : Set → Set be the functor defined as X '→ P(L × X) where L is a fixed set of labels and P denotes the powerset functor. Then coalgebras for this functor are one-to-one with labeled transition systems over L [14].
Definition 3.2 (labeled transition systems) Let L be a fixed set of labels. A
(nondeterministic) labeled transition system (over L) is a structure TS = ⟨S, −→TS 
⟩, where S is a set of states, and −→TS⊆ S × L × S is a labeled transition relation.

As usual, we write s −→l
TS s' for ⟨s, l, s'⟩ ∈−→TS.

A transition system morphism f : TS → TS' is a function f : S → S' which
l	l
“preserves” the transitions, i.e., such that s −→TS t implies f (s) −→TS' f (t). We
will denote by LTSL the category of finitely-branching LTS over L and correspond- ing morphisms.
Proposition 3.3 (labeled transition systems as coalgebras) Category CoalgPL is isomorphic to the sub-category of LTSL containing all its objects, and all the morphisms f : TS → TS' which also “reflect” transitions, i.e., such that if

f (s) −→TS' t then there is a state s'
∈ S such that s −→l  TS s'
and f (s')= t.

It is instructive to spell out the correspondence just stated. For objects, a transition system ⟨S, −→⟩ is mapped to the coalgebra ⟨S, σ⟩ where σ(s)= {⟨l, s'⟩ | 

s −→l
s'}, and, vice versa, a coalgebra ⟨S, σ : S → PL(S)⟩ is mapped to the system

⟨S, −→⟩, with s
−→l
s' if ⟨l, s'⟩ ∈ σ(s).  For arrows, by spelling out condition

(Equation 1) for functor PL, we get
∀s ∈ S, {⟨l, t⟩| f (s) −→l


t} = {⟨l, f (s')⟩| s −→l


s'},

and by splitting this set equality in the conjunction of the two inclusions, one can

easily see that inclusion “⊇” is equivalent to s −→l
s' ⇒ f (s) −→l
f (s'), showing

that f is a transition system morphism, while the left-to-right inclusion is equivalent

to f (s) −→l
t ⇒ ∃s' .s −→l
s' ∧ f (s')= t, meaning that f is a “zig-zag” morphism,

i.e., that it reflects transitions.
The property of “reflecting behaviors” enjoyed by cohomomorphisms is pivotal, for example, in the characterization of bisimulation relations as spans of cohomo- morphisms, in the relevance of final coalgebras, and in various other results of the

theory of coalgebras [14]. Given two coalgebras ⟨A, a⟩ and ⟨A', a'⟩, a coalgebraic bisimulation on them is a relation R ⊆ A × A' such that ⟨R, r⟩ is a coalgebra and the projections π : R → A and π' : R → A' are cohomomorphisms. Interestingly, it is easy to check that two states of a labeled transition system S are bisimilar (in the standard sense) if and only if there is a coalgebraic bisimulation R ⊆ S × S (regarded as a PL-coalgebra) which relates them.
An even easier definition of categorical bisimilarity can be given if there exists a ﬁnal coalgebra. In this case, two elements of the carrier of a coalgebra are bisimilar iff they are mapped to the same element of the final coalgebra by the unique co- homomorphism. Unfortunately, due to cardinality reasons, the functor PL used for the coalgebraic representation of transition systems does not admit a final coalgebra [14]. One satisfactory, alternative solution consists of replacing the powerset functor P on Set by the countable powerset functor Pc, which maps a set to the family of its
countable subsets. Then defining the functor Pc : Set → Set by X '→ Pc(L × X)
one has that coalgebras for this endofunctor are in one-to-one correspondence with transition systems with countable degree, i.e., systems where for each state s ∈ S

the set {⟨s', l⟩ | s −→l
s'} is countable. Unlike functor PL, the functor Pc
admits

cofree and final coalgebras.
Proposition 3.4 (final and cofree Pc -coalgebras) The obvious underlying

functor U : CoalgPc
→ Set has a right adjoint R : Set → CoalgPc
associat-

ing with each set X a cofree coalgebra over X. As a consequence, the category
CoalgPc has a ﬁnal object, which is the cofree coalgebra R(1) over a ﬁnal set 1.
We shall stick to this functor throughout the rest of the paper, and since there is no room for confusion the superscript c will be understood.
For reactive systems, as well as process algebra and tile rewrite systems, the coalgebraic representation using functor PL (for a suitable L) introduced in Propo- sition 3.3 is not completely satisfactory, because by definition the carrier is just a set and therefore the algebraic structure of states is lost. This calls for the introduction of structured coalgebras, i.e., coalgebras for an endofuctor on a category AlgΓ of algebras for a signature (or algebraic specification) Γ which is determined by the structure of states. Since it is natural to require that the structured coalgebraic representation of a system is compatible with the unstructured, set-based one, the following notion will be relevant.
Definition 3.5 (lifting) Given endofunctors B : C → C, B' : C' → C' and a functor V : C' → C, B' is called a lifting of B along V, if B'; V = V; B.

C'  B'  C '
V	V
J B  J 
C	C
In particular, if VΓ : AlgΓ → Set is the underlying set functor, one will consider typically a functor B' : AlgΓ → AlgΓ which is a lifting of PL along VΓ.

The structured coalgebraic representation of transition systems has been studied in [18] for the case of CCS and other process algebra whose operational semantics is given by SOS rules in the DeSimone format, and in [8] for tile systems. In the first case the lifting of PL is determined by the SOS rules, while in the second one it is defined by authors’hand. In both cases, as well as for the case of reactive systems addressed in the next sections, the following interesting fact applies [18,6].

Proposition 3.6 (bisimilarity is a congruence in structured coalgebras)
Let Γ be an algebraic speciﬁcation, and BΓ : AlgΓ → AlgΓ be a lifting of PL :
Set → Set. If ⟨S, σ⟩ is a BΓ-coalgebra and ⟨S, −→⟩ its corresponding structured LTS, then bisimilarity on ⟨S, −→⟩ is a congruence with respect to the operators in Γ.

The statement follows by the observation that the right adjoint R : Set →

CoalgPL of Proposition 3.4 lifts to a right adjoint RΓ : AlgΓ → CoalgBΓ
for the

forgetful functor UΓ, with VΓ; R = RΓ; VΓ
(see [18]), as shown in the following

diagram.
FΓ
	B 
CoalgPL ¸   CoalgBΓ

,,	Γ
B
R	U
,.L
RΓ	UΓ

 r FΓ	z 

Set ¸¸	 AlgΓ
VΓ
Now, since RΓ and V Γ are both right adjoints, CoalgBΓ

inherits a final object

B	L
RΓ(1) from AlgΓ which is then preserved by V Γ. Hence, bisimilarity induced by
the final morphism to RΓ(1) in CoalgBΓ is determined by the underlying sets and functions, that is, its definition does not use the algebraic structure of states and transitions. Since the final morphisms in Coalg Γ are Γ-homomorphisms, it follows
L
that bisimilarity is a congruence.


In other words, a transition system can be represented as a structured coalgebra only if bisimilarity is a congruence. This property certainly holds, for example, for specifications in GSOS format, which are considered in [18]. Certain structures are used there, called bialgebras, which combine aspects of algebras and coalgebras: bialgebras can be regarded as an alternative, equivalent presentation of structured coalgebras [6]. A specification in GSOS format is shown to satisfy a certain diagram called pentagonal law, which ensures the existence both of an algebra of transition systems and of an algebraic structure on their states. The pentagonal law also makes sure that bisimilarity is a congruence, showing that GSOS specifications perfectly fit in the structured coalgebraic framework.

 ¸o ,,¸ ¸¸	 ¸p ,,, ¸,

c 
   
¸¸¸d
¸¸¸
c 
   
,,,d
,,,

n ,¸,
m¸,m ¸
¸o ,

,,	,¸ ¸

,,,
¸¸¸¸

f  ,,
  l
0
f  ¸¸
 a
n 

(i)	(ii)
Fig. 2. Redex Square and RPO

Reactive Systems as Coalgebras
In this section we give a flat coalgebraic characterization of the operational semantics (ILTS ) and abstract semantics (standard bisimilarity) of reactive systems. In the next section we will lift this construction to structured coalgebras.
First of all, we have to fix the universe of observations. Since the labels of the ILTS are arrows of a category (representing the contexts), we fix a category C, and we consider its arrows as the universe of labels.
Definition 4.1 Given a category C, the functor PC : Set|C2| → Set|C2| is defined for every |C|× |C|-indexed set S by


PC(S(n, m)) = Pc(	 
n',m' ∈|C|

C[n, n'] × C[m, m'] × S(n', m'))

On arrows of Set|C2|, i.e., |C|× |C|-indexed families of functions, the functor is defined analogously.
Note that PC is not an endofunctor on Set, as it is the case of the standard PL discussed above, but it is defined on Set|C2|, i.e. the category of sets sorted by pairs of objects in |C|. Indeed, the states of an ILTS are arrows of a category and then they are typed by their source and target objects. Thus the carrier of a coalgebra is not just a set, but a family of sets indexed by their types. In particular
||C|| is an object of Set|C2| when C is a small category, i.e., a category where both
the collections of objects and arrows are sets and not proper classes.
Another difference between PC and PL is that the former has two labels, while the latter just one. The ILTS has only one label, but here we need two because we have to define a labeled transition system not only for terms, as it was the case in the ILTS, but also for contexts (the reason will be clearer in the next section).
In the following we write f  i  g, to mean that an arrow f : n → m performs a transition labeled by the arrows i : n → n' and j : m → m' arriving in the state
g : n' → m'.
Starting from a reactive system we can always construct a PC-coalgebra in such a way that for all n ∈ |C| and for all f ∈ C[0, n], f →c I f ' if and only if f  id0  f '.

Definition 4.2 Given a reactive system R = ⟨C, 0, D, R⟩, the coalgebra induced by R is ⟨||C||, αR⟩ where αR : ||C|| → PC(||C||) is defined as follows:
for every f ∈ ||C||,
if f = id0, αR(f )= {⟨id0, id0, id0⟩},
if f	: 0 →  n, αR(f ) = {(id0, c, r; d)	such  that  (l, r) ∈ R,d  ∈
D and Diag. (i) in Fig. 2 is an IPO},
if	f	:	n	→	m	(n	/=	0),	αR(f )	=	{(a, c, d)	|	d	∈
D and Diag.(ii) in Fig. 2 is an IPO}.
The function αR associates to each term the set of its possible IPO transitions and to each context the set of its IPOs. We could define αR on contexts differently, since ILTS is not defined on contexts. However such a definition is necessary in order to perform the lifting in the next section.
Note that from the above definition immediately follows the characterization of ∼IP O as final semantics. In fact, the category of structured coalgebras of PC (denoted by CoalgPC ) has a final object R(1), and the unique cohomorphism
!R : ⟨||C||, αR⟩ → R(1) identifies all the bisimilar arrows of ||C||. In other words,
for all f, g ∈ ||C||, f ∼IP O g if and only if !R(f ) =!R(g).
The above construction allows to define different morphisms αR' for different reactive systems R' = ⟨C, 0, D', R'⟩, i.e. reactive systems with the same base cate- gory but different rules. This means that inside the category CoalgPC we can study different reactive systems (with the same base category) and the relation amongst them (as cohomorphism). This study is left as future work.
Definition 4.2 implicitly assumes that C is a small category, otherwise ||C|| is not a (sorted) set, and that ||C|| is a countable set, otherwise the possible transitions of a given arrow could be uncountable and then not belonging to PC(||C||).

Lifting the Categorical Structure
In this section we prove that every well defined reactive system (i.e., such that there exists RPOs) defines a structured coalgebra corresponding to its ILTS. We use the construction defined in the previous section and we lift it to a structured setting, i.e., to algebras corresponding to categories. Note that categories are partial algebras, because the arrow composition is defined only when the codomain of the first arrow coincides with the domain of the second. Since our whole machinery works with total algebras, we define categories as total many sorted algebras, where sorts are pairs of objects, arrow composition “;” is defined by infinitely many total operations “;n,m,k” sorted on objects (n, m, k), and identities are constants. This can be done safely because we have fixed the category of observations C, and we know in advance the set of objects O.
signature Γ(O)= 
sorts
(n, m) for all n, m ∈ O

operations
;n,m,k : (n, m)(m, k) → (n, k)	for all n, m, k ∈ O
idn :→ (n, n)	for all n ∈ O

We can think to algebras of this signature as small categories (where the set of object is fixed to O) without the canonical axioms of associativity and identity. In [7] the second author develop a theory to deal with structured coalgebras for signature equipped with axioms, but here we do not need these axioms and we work without that in order to leave easier and clearer the construction.
Algebras and homomorphisms of this (many-sorted) signature forms a category that we denote with AlgΓ(O). If we fix the class of object as |C|, then the category C is an object of AlgΓ(|C|). Now we have to define an endofunctor on AlgΓ(|C|) in such a way that it is a lifting of PC : Set|C2| → Set|C2|. In order to do that, we have just to extend the functor PC, defining how it behaves for the operation of the signature.
Definition 5.1 (lifting endofunctor PC to AlgΓ(|C|) The endofunctor P^ C :
AlgΓ(|C|) → AlgΓ(|C|) is defined as follows. For each X = ⟨X, ; , id⟩ ∈ AlgΓ(|C|),

P X	P X


where:
P^ C(X)= ⟨PC(X), ;	, id	⟩

S;P X T = {⟨x, y, f ; g⟩ | ⟨x, z, f ⟩∈ S, ⟨z, y, g⟩ ∈ T }
idP X = ⎧⎨ {⟨id0, id0, id0⟩},	if n=0;
{⟨x, x; α, α⟩ | α iso in C}, otherwise.
On arrows of AlgΓ(|C|) is defined as PC.
The following SOS rules describe in a more compact way, the behavior of PC(−) on the operations of the signature.

id  id0  id 
id0
idn (n /= 0) f : n → m	α : m → o is an iso in C
id  f	 α f ;α


p : m → n   f	 p' : m' → n' q : n → o	g
 q' : n' → o'

g	h
p; q   f	 p' ; q'
The following proposition is a trivial consequence of the definition of P^ C.
C2
Proposition 5.2 Let VΓ(|C|) : AlgΓ(|C|) → Set|	| be the forgetful functor that
associates to each Γ(|C|)-algebra its many sorted carrier set. Then PC is a lifting of PC along VΓ(|C|).

 Pb C 
Γ(|C|)	Γ(|C|)


VΓ(|C|)
J   PC

VΓ(|C|)
J 

Set|C2| 	 Se t|C2|
In [18] the authors show that every process algebras whose operational seman- tics is given by SOS rules in DeSimone format, defines a structured coalgebra. In that approach the carrier of the structured coalgebra is an initial algebra TΣ for a given algebraic signature Σ, and the SOS rules in DeSimone format (as the above rules) specify how an endofunctor PΣ behaves with respect to the operations of the signature. Since there exists only one arrow ?Σ : TΣ → PΣ(TΣ), giving the SOS rules is enough for defining a structured coalgebra (i.e., ⟨TΣ, ?Σ⟩) and then assur- ing compositionality of bisimilarity. Our construction slightly differs from this. In fact, the carrier of our coalgebra is C, that is not the initial algebra of AlgΓ(|C|). Then there could exist several or none structured coalgebras with carrier C. In the following we prove our main theorem. It shows that our construction is well defined, namely (C, αR) is a structured coalgebras for the functor PC(C). This automatically assures that bisimilarity is a congruence with respect to the opera- tions of Γ(|C|), i.e., identity and arrow composition (that in the theory of reactive system mimics contextualization). In doing this we make three simplifications with respect to the original theory of [12]. In fact, we require that the reactive system has RPOs (instead of just redex RPOs) and we require that it has strict distinguished object, i.e., that, in the underlying category C, the only arrow with target 0 is id0. Moreover, as outlined in the previous section, C is a small category with countable set of arrows.
Theorem 5.3 Let R = ⟨C, 0, D, R⟩ be a reactive system. If C is a small category such that ||C|| is countable and exists RPOs and if R has strict distinguished object,
then ⟨C, αR⟩ is a structured coalgebra for P^ C.
Proof.
 ¸• ¸,,¸ ¸	 ¸• ¸,,¸ ¸

y 
   
,¸ ¸¸
¸¸¸¸
¸¸¸d
¸¸¸
y 
   
,¸ ¸¸
¸¸d''
¸¸¸
 ¸• ,,¸ ¸¸

¸¸¸
¸¸	¸¸¸
¸¸d'

g  ¸¸
,, ¸,
,,,
¸¸¸
 ¸• ,
   
g  ¸¸
 y'
 
,, ¸,
,,,
¸¸¸
 ¸• ,
   

f  ,,
0
  l
f  ,,
0
  l

(i)	(ii)


P C	P C

In the following we denote C = ⟨||C||, ; , id⟩ and P^ C(C) = ⟨PC(||C||), ;	, id	⟩.
In order to prove that ⟨C, αR⟩ is a structured coalgebra for PC we have to prove
that αR : C → PC(C) is a morphism of AlgΓ(|C|), i.e., that it preserves identity and arrows composition. The former is trivial when considering id0 (it follows from

the definition of FR), while, in the other cases, it follows from Lemma 4 in the Appendix of [5]. The latter, i.e., αR(f ; g)= αR(f );P C αR(g) for every f, g ∈ ||C||, can be proved for cases on the type of the arrows:
If f :0 → a (a /= 0), then:
If (x, y, z) ∈ αR(f ; g) then x = id0, z = r; d for some d ∈ D and (l, r) ∈ R such that the Diagram (i) above is an IPO. Since the reactive system has RPOs, then there exists an RPO (the bottom square of Diagram (ii) where d'; d'' = d). By Lemma 2.1.28 of [17] it is an IPO. Now, by IPO’s decomposition (Lemma 2.1.29 of [17]), also the upper square is an IPO. Note that d', d'' ∈ D (since D is composition-subreflecting) and then (id0, y', r; d') ∈ αR(f ) and (y', y, d'') ∈ αR(f ). By definition of ;P C, (id0, y, r; d'; d'') = (id0, y, r; d) = (x, y, z) ∈ αR(f );P C αR(g).
If (x, y, z) ∈ αR(f );P C αR(g), then (x, y', z') ∈ αR(f ) and (y', y, z'') ∈ αR(g) where z = z'; z''. Since f :0 → n then x = id0 and z' = r; d' for some d' ∈ D and (l, r) ∈ R such that the lower square of Diagram (ii) is an IPO. Since g : n → m (with n /= 0), then z'' = d'' ∈ D such that the upper square of Diagram (ii) is an IPO. Now, by IPO composition (Lemma 2.1.29 of [17]), it follows that also Diagram (i) where d = d'; d'', is an IPO. By definition of αR, (id0, y, d)= (x, y, z) ∈ αR(f ; g).
If f : m → n and g : n → o (where m, n, o /= 0) then we can prove it, using IPO composition and decomposition, as done above.
Since the reactive system has strict distinguished object there are not any other possible cases.	 

Conclusions and Future Work
In this paper we have built a bridge between two important theories for the formal description of interactive systems.
The theory of Reactive Systems by Leifer and Milner [12] allows to derive a labeled transition system, from a reduction semantics, (i.e., an unlabeled transition system) considering as labels the possible contexts (environments) in which the system can interact. The main result of this theory is that if the base category that defines the syntax of the formalism, has a special colimits (namely RPOs) then bisimilarity on the distilled LTS is a congruence.
The theory of Universal Coalgebra [14] allows to specify interactive systems as black boxes, i.e., systems with an hidden state space with some observable (static or dynamic) behaviors. The notion of bisimulation is central in this theory and it is described to a very high level of abstraction. Under certain conditions, the theory guarantees the existence of final coalgebra, and bisimilarity can be characterized by the unique morphism to this final object (final semantics). The Theory of Uni- versal Coalgebra has been extended to coalgebras over algebras, namely structured coalgebras [18,6,7], in order to handle the algebraic structure of process algebras. A fundamental theorem assures that bisimilarity over a structured coalgebras is

always a congruence.
In this paper we have shown that given a reactive system we can always construct a coalgebra equivalent to the distilled LTS. In such a way we define a final semantics for reactive systems. Moreover if the reactive systems has RPOs, then we can define a structured coalgebra equivalent to the distilled LTS, and then bisimilarity is com- positional. This can be seen as a general, more abstract proof, of compositionality of bisimilarity for reactive systems. However this is not the only aim of the pa- per. Indeed it is the base for further studies. We think interesting to coalgebrically characterizes saturated bisimilarity [5] through semi-saturated bisimilation. While saturated bisimulations consider all possible contexts, semi-saturated bisimulations consider just the minimal ones. But these bisimulations are asymmetric (meaning that a transition can be matched by one with different, but related, label) and then they have no trivial coalgebraic characterization. As noted in [4], the same holds in open bisimulation [15], asynchronous bisimulation [1] and large bisimula- tion [2]. For all these abstract semantics, a coalgebraic characterization does not exists. This means that also a final semantics, and then minimal representatives for the equivalence class, are missing.

References
Amadio, R. M., I. Castellani and D. Sangiorgi, On bisimulations for the asynchronous pi-calculus., in:
Proc. of CONCUR ’96, LNCS 1119 (1996), pp. 147–162.
Baldan, P., A. Bracciali and R. Bruni, Bisimulation by unification., in: Proc. of AMAST ’02, LNCS
2422 (2002), pp. 254–270.
Berry, G. and G. Boudol, The chemical abstract machine, Theor. Comp. Sci. 96 (1992), pp. 217–248.
Bonchi, F., B. K¨onig and U. Montanari, Saturated semantics for reactive systems., in: Proc. of LICS
(2006), pp. 69–80.
Bonchi, F. and U. Montanari, A coalgebraic theory of reactive systems, Technical report, Department of Computer Science, University of Pisa (2006).
Corradini, A., M. Große-Rhode and R. Heckel, Structured transition systems as lax coalgebras., Electr. Notes in Theor. Comp. Sci. 11 (1998).
Corradini, A., R. Heckel and U. Montanari, From sos specifications to structured coalgebras: How to make bisimulation a congruence., Electr. Notes in Theor. Comp. Sci. 19 (1999).
Corradini, A., R. Heckel and U. Montanari, Tile transition systems as structured coalgebras., in: Proc. of FCT, 1999, pp. 13–38.
Ehrig, H. and B. K¨onig, Deriving bisimulation congruences in the DPO approach to graph rewriting., in: Proc. of FoSSaCS ’05, LNCS 2987 (2004), pp. 151–166.
Gadduci, F. and U. Montanari, “The tile model,” MIT Press, 1999 .
Klin, B., V. Sassone and P. Sobocinski, Labels from reductions: Towards a general theory., in: Proc. of CALCO ’05, LNCS 3629 (2005), pp. 30–50.
Leifer, J. J. and R. Milner, Deriving bisimulation congruences for reactive systems., in: Proc. of CONCUR ’00, LNCS 1877 (2000), pp. 243–258.
Milner, R., Bigraphical reactive systems., in: Proc. of CONCUR ’01, LNCS 2154 (2001), pp. 16–35.
Rutten, J. J. M. M., Universal coalgebra: a theory of systems., Theor. Comp. Sci. 249 (2000), pp. 3–80.

Sangiorgi, D., A theory of bisimulation for the pi-calculus., Acta Inf. 33 (1996), pp. 69–97.
Sassone, V. and P. Sobocin´ski, Reactive systems over cospans, in: Proc. of LICS (2005), pp. 311–320.
Sobocin´ski, P., “Deriving process congruences from reaction rules.” Ph.D. thesis (2004).
Turi, D. and G. D. Plotkin, Towards a mathematical operational semantics., in: Proc. of LICS (1997),
pp. 280–291.
