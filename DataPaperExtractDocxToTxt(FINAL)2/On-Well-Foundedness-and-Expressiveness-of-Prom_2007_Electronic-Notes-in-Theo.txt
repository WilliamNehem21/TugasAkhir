Electronic Notes in Theoretical Computer Science 175 (2007) 45–56	
www.elsevier.com/locate/entcs

On Well-Foundedness and Expressiveness of Promoted Tyft
(Being Promoted Makes a Difference)
MohammadReza Mousavi a,b,1 and	Michel Reniers a
a Department of Computer Science, Eindhoven University of Technology, P.O. Box 513, NL-5600 MB Eindhoven, The Netherlands
b Department of Computer Science, Reykjav´ık University, Kringlan 1, IS-103 Reykjav´ık, Iceland

Abstract
In this paper, we solve two open problems posed by Karen L. Bernstein regarding her promoted tyft format for structured operational semantics. We show that, unlike formats with closed terms as labels, such as the tyft format, the well-foundedness assumption cannot be dropped for the promoted tyft format while preserving the congruence result. We also show that the well-founded promoted tyft format is incomparable to the tyft format with closed terms as labels, i.e., there are transition relations that can be specified by the promoted tyft format but not by the tyft format, and vice versa.
Keywords: Structural Operational Semantics (SOS), SOS Rule Formats, Promoted Tyft, Tyft.

Introduction
In [3], Bernstein proposed the promoted tyft format which is an elegant framework for specifying the operational semantics of higher-order processes. She proved that the well-founded promoted tyft format guarantees strong bisimilarity to be a con- gruence. The semantics of the lazy lambda-calculus [1] and the Calculus of Higher- Order Communicating Systems (CHOCS) [9] were specified in the promoted tyft format of [3] and using the congruence meta-theorem, it was shown that applicative bisimilarity for the lazy-lambda calculus and strong bisimilarity for CHOCS are both congruences. The conclusions of [3] reads as follows.
“In this paper, we have described a rule format that is a simple but expressive generalization of Groote and Vaandrager’s tyft/tyxt rule format. ... There are

1 Corresponding author: m.r.mousavi@tue.nl. The work of this author has been partially supported by the project “The Equational Logic of Parallel Processes” (nr. 060013021) of The Icelandic Research Fund.

1571-0661 © 2007 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2006.09.015

several open questions related to the work in this paper. It is not clear that the well-foundedness property is necessary for the congruence result. We are not sure how the extensions to tyft/tyxt format that allow negative premises are compatible with our extensions. It is not clear whether promoted tyft/tyxt format is strictly more expressive than tyft/tyxt format.”
We touched upon the second open question in another publication [8]. In this paper, we answer the first and the third questions as follows.
We show that the promoted tyft format does not necessarily induce congruence of strong bisimilarity if the well-foundedness assumption is omitted;
We show that the well-founded subset of the promoted tyft format is incomparable, in its expressiveness, with the tyft format. In other words, we give two counter- examples witnessing that there exist transition relations that can be specified by one rule format but not by the other.
The rest of this paper is organized as follows. In Section 2, we give some basic definitions. Section 3 addresses the well-foundedness concept, shows that it cannot be dropped for the promoted tyft format while preserving the congruence result. Section 4 addresses the expressiveness of the promoted tyft format and proves it incomparable to the tyft format. The paper is concluded in Section 5.

Preliminaries
Definition 2.1 (Signature, Term and Substitution) Assume a countable set of variables V (with typical members x, y, x', y', xi, yi .. .). A signature Σ is a set of function symbols (operators, with typical members f, g, .. .) with ﬁxed arities ar : Σ → IN. Functions with zero arity are called constants. Terms s, t, ti,... ∈ T 
are constructed inductively using variables and function symbols. A list of terms is denoted by −→. When we write f (−→), we assume that −→ has the right size, i.e.,
ar(f ). All terms are considered open terms. Closed terms p, q, . . . ∈ C are terms that do not mention a variable and are typically denoted by p, q, p', q', pi,.   A
substitution σ replaces variables in a term with terms. The set of variables appearing in term t is denoted by vars(t).
Definition 2.2 (Transition System Specification (TSS)) A TSS is a pair (Σ, D) where Σ is a signature and D is a set of deduction rules. A deduction rule dr ∈ D, is deﬁned as a pair (H, c) where H is a set of formulae and c is a formula. For all t, t', t'' ∈ T we deﬁne that t t' t'' is a formula. The formula c is called the conclusion of dr and the formulae from H are called its premises. A deduction rule (H, c) is mostly denoted by H .
c
The concept of closed-ness and substitution are lifted to formulae and sets of
formulae in the natural way (i.e., a substitution applied to a formula, applies to all three terms). We refer to t as the source, t' as the label and t'' as the target of the transition. We may also write vars(φ) and vars(H) to denote variables appearing in a formula and in a set of formulae, respectively.

In this paper, we only deal with positive TSS’s. Hence, the semantics of TSS’s is straight-forward and is defined as the set of all closed provable formulae using instances of deduction rules.
Definition 2.3 (Tyft [6] and Promoted Tyft [3]) A deduction rule is in tyft
format if and only if it has the following form


t'
{ti →i yi|i ∈ I}
−→ t'  ''	,
f ( x ) →t

where variables in −→x and yi’s are all distinct variables, all labels, i.e., t' and t'’s,
are closed terms and I is a (possibly inﬁnite) set of indices.
A rule of the above form is in the promoted tyft format if the source and targets of all formulae in it conform to the constraints of the tyft format and further t'’s

contain at least one function symbol (i.e., are not variable), t' is of the form
(−→i

where variables in −→z are all distinct and different from variables in −→x and yi’s.
A TSS is in tyft (promoted tyft) format if and only if all its deduction rules are.
A subset of the tyft format is the one using constants (instead of closed terms) as labels which is also considered in this paper and compared to the promoted tyft format in Section 4. Arguably, this subset can be considered the original definition of the tyft format as defined by [6]. The generalization to closed terms as labels (if at all considered a generalization) is entirely safe and orthogonal to all existing results (e.g., congruence, conservativity and commutativity meta-theorems [2,5]).
The transition relation induced by a TSS (in the above two formats) is the set of all provable formulae as defined below.
Definition 2.4 A proof of a closed formula φ is a well-founded upwardly branching tree whose nodes are labelled by closed formulae such that
the root node is labelled by φ, and
if ψ is the label of a node and {ψi | i ∈ I} is the set of labels of the nodes directly above this node, then there are a deduction rule {χi | i ∈ I} and a substitution σ
χ
such that σ(χ) = ψ, and for all i ∈ I, σ(χi) = ψi.
Definition 2.5 (Strong (Bi)similarity) A relation R ⊆ C×C is a strong simula-

p'  ''
p'  ''
''	''

tion relation when ∀p,q∈C pRq ⇒ ∀p',p''∈C p →p
⇒ ∃q''∈C q →q
∧ (p ,q ) ∈ R. A

symmetric strong simulation relation is a strong bisimulation relation. Closed terms p and q are (bi)similar, denoted by p q (p ↔ q) if there is a strong (bi)simulation relation R such that p R q.
For a relation R ⊆C × C, we write −→p R −→q and by that we mean −→p and −→q have the same size (possibly zero) and for all pi and qi at the same position in the two lists pi R qi.
Lemma 2.6 (Substituting Bisimilar Labels Under Context [3]) For a TSS

−→'
−→	−→

in the promoted tyft format, ∀
−→ −→	∀
p f ( p ) p'' ∧ p ↔ q ∧ p' ↔
q' ⇒



∃q''∈C q

−→
f ( q )
→ q


∧ p''

— q''.
p,q, p' , q' ,p''∈C
f∈Σ	→

Definition 2.7 ((Pre-)Congruence) An equivalence (a pre-order) R ⊆ C × C is a (pre-)congruence when ∀f∈Σ ∀−→p ,−→q ∈C −→p R −→q ⇒ f (−→p ) R f (−→q ).
Well-Foundedness
In [3], Bernstein proposes a definition of well-foundedness which coincides with the following and proves that for the well-founded subset of the promoted tyft format, bisimilarity is a congruence.
Definition 3.1 The variable dependency graph of a deduction rule is a graph of which the nodes are variables and there is an edge from x to y when y appears in the target of a premise and x in its source or label. A deduction rule is well-founded when there is no backward chain of inﬁnite length in the variable dependency graph. A TSS is well-founded when all its deduction rules are.
Note that this definition coincides with that of [6] in case of TSS’s with closed terms as labels. An alternative definition of well-foundedness is the one that treats the labels in the same way as the targets of formulae (while in the above definition labels are treated like sources). This alternative definition, called p-well-foundedness in [8], is not useful for proving congruence of strong bisimilarity (while it is useful for proving congruence of higher-order bisimilarity) and in fact, as shown below, there are p-well-founded TSS’s in the promoted tyft format for which bisimilarity is not a congruence.
Theorem 3.2 (Congruence for Well-founded (Promoted [3]) Tyft [6])
For a well-founded TSS in the (promoted) tyft format, strong bisimilarity is a congruence.
Theorem 3.3 (Tyft Reduces to Well-founded Tyft [4]) For an arbitrary TSS in the tyft format, there exists a well-founded TSS in the tyft format which induces the same transition relation.
In the following three examples, we show that the congruence result for bisim- ilarity can be ruined if the TSS’s in the promoted tyft format do not satisfy the well-foundedness assumption. The first example violates the well-foundedness as- sumption by having a self-loop on a variable which appears both in the label and the target of a premise.
Example 3.4 Consider the following set of deduction rules deﬁned on a signature with 0 and 1 and f as a unary function symbol. 2 The following TSS is in the promoted tyft format. Note that the last deduction rule is not well-founded due to the occurrence of y both in the target and the label of the premise. (This deduction

2 In the coming examples we omit stating the precise signature as it is clear from the symbols used in the deduction rules.

rule is indeed p-well-founded.)


x →0 y


x →0 y



f (y)
x → y

0 →0


1	1 →0 0


f (x)
→ x


f (x)
→ y


f (x) →1 y

The following is the transition relation induced by the above TSS.
{0 →0 1,	1 →0 0,

1 f (0)
f (1)
f (0)
f (1)

f (1) →1 0,	f (1) →1 1}

Note that for the above transition relation it holds that 0 ↔ 1, but it does not hold that f (0) ↔ f (1). Therefore, bisimilarity is not a congruence.
In the following two examples, the same exercise is repeated, i.e., it is shown that although the TSS is in the promoted tyft format and 0 ↔ 1, it does not hold that f (0) ↔ f (1). In the next example, the TSS is not well-founded since a variable in the target of a premise also appears in the source of the same premise and thus has a self-loop in the variable dependency graph.
Example 3.5 Consider the following TSS in the promoted tyft format. The last deduction rule is not well-founded.


x →0 y
x →0 y
f (x)
y → y

0 →0


0	1 →0 0


f (x)
→ x


f (x)
→ y


f (x) →1 y

The following is the transition relation induced by the above TSS.


{0 →0
0,	1 →0
0,	0 f(0) 0,	0 f(1) 1,	1 f(0) 0,	1 f(1) 0,	f (0) →1 0}


The last example violates well-foundedness (and congruence of bisimilarity) by having a non-trivial cycle concerning target, label and source of two premises.
Example 3.6 Consider the following TSS in the promoted tyft format. The last deduction rule is not well-founded.


x →0 y
x →0 y
f (y)
→ y	y → y

0 →0
1	1 →0
0	0 →1


0	1 →1 1


f (x)
→ x


f (x)
→ y


f (x) →1 y

The following is the transition relation induced by the above TSS.




0 f (0)
{0 →0
f (1)
1,	1 →0
f (0)
0,	0 →1
f (1)
0,	1 →1 1,
1	1

The essence of all counter-examples given before is the presence of a cycle in the variable dependency graph. Such cycles may allow for checking syntactic equivalence of terms (e.g., comparing the argument in the target of a premise against a constant) and hence ruin the congruence result. An interesting question is whether there exists a subset of non-well-founded promoted tyft which indeed guarantees congruence, we conjecture that the safe subset of the promoted tyft format, as defined below, is the desired subset which guarantees congruence.
Definition 3.7 (Safe Cycles) Consider a cycle u0 → ... → un → u0 in the variable dependency graph of a deduction rule of the following form:

t'
{ti →i yi|i ∈ I}

−→ g(−→z ) ''

Such a cycle is called safe if in the variable dependency graph, there is no path u → ... → ui for all i, 0 ≤ i ≤ n such that u is among −→x or among −→z . A deduction rule (TSS) is safe when all cycles in its variable dependency graph (all its deduction rules) are safe.
The following deduction rule contains a safe cycle in its premise.

f (y)
c → y

g(x)
f x  → y

Expressiveness
Well-Founded Promoted Tyft does not reduce to Tyft
Consider the following TSS in the promoted tyft format.




x →0 y
x →0 y
f (x)
x → y
f (x)
x → y
f (x)
x → y

0 f (x)
1 f (x)


f (x)
→ y


f (x)
→ y


f (x) →1 y

The transition relation induced by the above TSS is as follows.


{0 →0
0; 1 , 1 →0
0; 1 , 0 →1
0; 1 , 1 →1
0; 1 ,

0 f (0)
f (1)
f (0)
f (1)	1	1

where
p'  ''	''
p'  ''
p'  ''

relation cannot be specified by any TSS in the tyft format.
If there is such a TSS, then there is a TSS in the pure well-founded tyft format which induces the same transition relation as above [4].
Consider the pure well-founded TSS in the tyft format that (purportedly) induces the same transition relation as above. Assume, without loss of generality that the
proof of f (0) →1 1 from such a TSS does not depend on the proof for f (1) →1 0

(otherwise, a similar assumption should hold for the transition of f (1) →1
0 and one

can swap 0’s and 1’s in the sources, labels and targets of the transitions in the remainder of the proof and the argument remains valid). The last deduction rule

applied to derive the proof for f (0) →1
1 should be of the following form.





(dr)
p'
{ti →i yi|i ∈ I}
,

f (x) →1 t''

'
and there is a substitution σ such that σ(x) = 0, σ(t'') = 1 and all σ(ti →i yi) have
a proof tree.
Definition 4.1 (Distance of a Variable) Given the above deduction rule, deﬁne the distance of variable x as 0 and a variable yi to be the maximum of distances of variables appearing in ti plus 1. The distance of a premise is the distance of the variable of its target.
Term t'' can either be a variable or the constant 1 (otherwise, if it contains a function symbol other than 1, t'' cannot be unified with 1). Since (dr) is pure, it can only contain variables x or yi’s (i ∈ I) and thus t'' can be either 1, or x or yi (for some i ∈ I).
If t'' is 1, i.e., if the deduction rule is of the following form

p'
{ti →i yi|i ∈ I}
,
f (x) →1 1
then we define substitutions σ' inductively (on the rank of the premises) main-
taining σ(x) ↔ σ' (x) for all variables x in the domain of σ' .  First, define
k	k
σ' with σ' (x) = 1 and note that indeed σ(x) = 0 ↔ 1 = σ' (x).  Substitu-

0
tion σ'
0
is obtained from σ'
0
'
as follows: select a premise ti →i yi (or all such

premises) for which the variables of the source are in the domain of σ' . Then, as σ(ti) ↔ σ' (ti) (this follows from the fact that σ(x) ↔ σ' (x) for all variables

k
x from the domain of σ'
k
and the fact that for a TSS in the tyft format, bisimi-
p'

larity is a congruence) and σ(ti) →i σ(yi) we obtain the existence of q' such that
'	p'  '	'	'	.	'

σ (ti) →i q
and σ(yi) ↔ qi. Then define σ
k+1
(yi) = qi.

Define σ' to be the supremum of the chain of premises σ' , σ' ,... (which
0	1

is increasing with respect to the subset ordering on their domains). Then, all premises of the deduction rule are derivable with respect to substitution

σ'. Thus providing us with a proof for f (1) →1
1 (which is not supposed to be

provable according to the above transition relation).
If t'' is x, then σ(x) = σ(t'') = 0 which is contradictory to the target of the
transition f (0) →1 1.
Thus, it only remains to consider the case where t'' is a variable yc, for some
c ∈ I, i.e., the deduction rule is of the following form

p'
{ti →i yi|i ∈ I}
.
f (x) →1 yc
Take an arbitrary variable yj such that σ(yj) = 1 and define σ' and σ'' to
be the following partial substitutions:
σ' (x) = σ' (yj) = 0	and	σ''(x) = σ''(yj) = 1.
0	0	0	0
Then, using an induction on the distance of yj, we show that we can complete
either σ' or σ'' to a substitution σ' such that the range of σ' is {0, 1} and for
p'
all k ∈ I, σ'(t' →k yk) is provable.
Then, it follows that for the particular case of yc, since σ(yc) = 1, that we

can prove either f (0) →1
0 or f (1) →1
1 which is contradictory to the transition

relation that should be induced by the TSS.
(Base case) If the distance of yj is 1, i.e., yj is the target of a premise of which the source only contains x as variable or is a closed term, then the premise
p'
tj →yj can be of one of the following eleven shapes (for all other transitions in the above transition relation, the target of the transition is 0 and thus cannot match with 1).


0; x	0;1;f (0);f (1)
yj	or	1
0;1;f (0)
→	yj,

where we have abused the ; notation to avoid writing all eleven cases explic- itly.
For each of these eleven cases both substitutions σ' and σ'' are complete.
Furthermore, for each of the cases, at least one of these substitutions gives a transition that actually belongs to the transition relation induced by the TSS.

Assuming that σ'
is the substitution that proves the premise tj
p'
→ yj, as

before, one can complete the definition to a substitution σ' inductively on the distance of the premises.
(Induction step) Consider a rule in which yj has distance n + 1 for n ≥ 1. As the distance of yj is n + 1, it cannot be the case that tj is a closed term or the variable x, since then the distance of yj would have been 1. Hence, tj

is a term containing at least a variable. Our previous assumption that the

proof of f (0) →1
1 does not depend on a proof for f (1) →1
0 and the fact that

all other transitions in the transition relation have a left-hand side 0 or 1
indicates that tj has to be a variable, say yk. Now, suppose that p' is 0, 1,
or f (1). Then, define the substitution σ' to be σ'(yj) = 0 and σ'(v) = σ(v) for all other variables v and this way we have a proof for all the premises using σ' which is an extension of σ' .  Thus it only remains to check the

case where p'
= f (0). Therefore, the premise tj
p'
→ yj
is of the form yk
f (0)
→ yj

for some k ∈ I where yk has distance n. Note that necessarily σ(yk) = 0 since otherwise the substitution σ' with σ'(v) = σ(v) for all variables v with distance smaller than the distance of yj and σ'(yj) = 0 can be completed
inductively on the rank of the premises to a substitution that extends σ' and
proves all the premises.
p'
Based on a similar reasoning we must conclude that the premise tk →k yk

should be of the form y f (1) y
for some l ∈ I where yl
has distance n− 1 and

σ(yl) = 1.
Thus we have a deduction rule of the following form:


f (1)
f (0)	p'

yl → yk	yk → yj	{ti →i yi|i ∈ I − {j, k}}
.
f (x) →1 yc

By the induction step, we can complete the definition of one of the two following substitutions:

σ' (x) = σ' (yl) = 0	and	σ''(x) = σ''(yl) = 1 
0	0	0	0
to a substitution σ' or σ'' such that all the premises with a distance of n − 1
or less find a proof. If σ' can be completed, then we define σ'(yk) = 1 and
σ'(yj) = 0 and complete the definition of σ' for all premises with distance
n or more, as before.  If σ'' can be completed, we define σ''(yk) = 0 and
σ''(yj) = 1 and complete the definition of σ''.

This concludes the proof as in all of the above cases, we can construct a

proof for either f (0) →1
0 or f (1) →1
1 (or both) none of which are supposed to

be in the induced transition relation.

Tyft does not reduce to Promoted Tyft
Example 4.2 Consider the following TSS in the tyft format. The signature of the TSS consists of 0, 1 and 2 as constants and f as a unary function symbol.

2 f (0)

The transition relation induced by it is {2 f(0) 2}. We claim that there is no TSS in the promoted tyft format which can induce the same transition relation. It trivially
holds that 0 ↔ 1 and from 2 f(0) 2 and Lemma 2.6 that (for a TSS in the promoted
tyft format) 2 → 2 is also in the induced transition relation.
If one restricts the tyft format to the subset with only constants as labels, then it trivially conforms to all requirements of the promoted tyft format and thus, the pro- moted tyft format (taking the first example in Section 4.1) is strictly more expressive than the tyft format with constants as labels.

(Promoted) Tyft reduces to Promoted PANTH
In [8], we introduced the promoted PANTH format which generalizes promoted tyft with negative premises. But even restricted to positive TSS’s, the promoted PANTH format generalizes both the promoted tyft and the tyft format. To define the pro- moted PANTH format, we need the following notion of volatile operators.
Definition 4.3 (Volatile Operators) Given a TSS (Σ, D) an operator f ∈ Σ is called volatile when there exists a rule d ∈ D of the following form:

t'
{ti →i t'' | i ∈ I}

'
→t''
and f (−→) is a subterm of t' for some i ∈ I such that vars(−→) ∩ vars(t) /= ∅ or
tk −→	i	tk
∃i∈Ivars( tk ) ∩ vars(t') /= ∅.
Note that for a TSS in the tyft format, no operator is volatile as the set vars(−→)
is always empty. Arguments of transition labels under a volatile operator should be replaceable by bisimilar terms (i.e., given a transition with a volatile operator as the outermost operator in the label, another transition with the label containing bisimilar arguments under the same volatile operator should be provable to a bisim-
ilar target). In the definition of the promoted tyft format, all operators are assumed
to be volatile and this assumption has resulted in a less expressive rule format, as we prove shortly.
The following is a simplified definition of the promoted PANTH format (restricted
to positive TSS’s and without predicates and lists of terms as labels) that suffices for our purposes.
Definition 4.4 (Positive Promoted PANTH) A deduction rule is in the positive pro- moted PANTH format when it is of the following form

t'
{ti →i yi | i ∈ I}

f (−→x ) t' t''
and ﬁrst, all xi and yj variables (0 ≤ i < ar(f ) and j ∈ I) and variables in t' are

Positive Promoted Panth


Tyft with closed terms as labels	Promoted Tyft

Tyft with constants as labels

Fig. 1. Comparison of the expressiveness of rule formats.

pairwise distinct, second, if a component of ti (i ∈ I) is a variable (i.e., does not have any function symbol) then it is not among xi’s and yj’s and third,
if t' contains a volatile g ∈ Σ then t' is of the form g(−→z ) where all zi’s are
distinct variables and for all j ∈ I, all ti containing a variable among −→z are

of the form g (−→'
g is volatile,

i ti ) where i
if there is a volatile operator in the signature and if t' is a variable z then for
all i ∈ I, t containing z are either z itself or are of the form g (−→'	g'

i
is volatile.
i ti ) where

It follows immediately from the above definition that any TSS in the tyft format is in the positive promoted PANTH format since a TSS in the tyft format contains no volatile operator. On the other extreme resides the promoted tyft format which is a subset of positive promoted PANTH in which all operators are considered volatile (regardless of whether or not they actually are volatile). Thus, we conclude that positive promoted PANTH is strictly more expressive than both tyft and promoted tyft since it includes TSS’s of examples of Section 4.1 and has both formats as its (proper) subsets.
Figure 1 summarizes the result of our comparison. Each arrow shows strict inclusion of the sets of definable transition relations.

Conclusions
In this paper we studied issues related to the well-foundedness of premises and expressiveness for (the set of transition relation that can be specified by) TSS’s in the promoted tyft format. We showed that well-foundedness cannot be dropped while preserving the congruence property for bisimilarity. Furthermore, we compared the expressiveness of the tyft, the promoted tyft, and the positive subset of the

promoted PANTH formats and showed that while the tyft format with closed terms is incomparable to the promoted tyft format, the positive subset of the promoted PANTH format is strictly more expressive than both.
Regarding well-foundedness, we are currently studying the congruence meta- theorem for the safe subset of the promoted tyft format. The techniques used in [4] are not directly applicable to this setting as the open terms on the labels (containing at least one function symbol) cannot be trivially resolved to variables. Regarding expressiveness, it is interesting to compare the safe promoted tyft format with the promoted tyft format. We do not yet know the answer but expect the two formats to be equally expressive.

References
S. Abramsky, The lazy lambda calculus. in: Research topics in functional programming, Addison-Wesley, Boston, MA, USA, 1990, pp. 65–116.
L. Aceto, W. J. Fokkink, C. Verhoef, Structural Operational Semantics, Chapter 3 of Handbook of Process Algebra, Elsevier Science, Dordrecht, The Netherlands, 2001, pp. 197–292.
K. L. Bernstein, A congruence theorem for structured operational semantics of higher-order languages, in: Proceedings of the 13th IEEE Symposium on Logic In Computer Science (LICS’98), IEEE Computer Society, Los Alamitos, CA, USA, 1998, pp. 153–164.
W. J. Fokkink, R. J. van Glabbeek, Ntyft/ntyxt rules reduce to ntree rules, Information and Computation (I&C) 126 (1) (1996) 1–10.
J. F. Groote, M.R. Mousavi, M. A. Reniers, A Hierarchy of SOS Rule Formats. in: Proceedings of the 2nd Workshop on Structural Operational Semantics (SOS’05), Electronic Notes in Theoretical Computer Science 156 (1) (2006) 3–25.
J. F. Groote, F. W. Vaandrager, Structured operational semantics and bisimulation as a congruence,
Information and Computation (I&C) 100 (2) (1992) 202–260.
D. J. Howe, Proving congruence of bisimulation in functional programming languages, Information and Computation (I&C) 124 (1996) 103–112.
M.R. Mousavi, M. J. Gabbay, M. A. Reniers, SOS for higher order processes, in: Proceedings of the 16th International Conference on Concurrency Theory (CONCUR’05), Lecture Notes in Computer Science, Springer-Verlag, Berlin, Germany, 2005, pp. 308–322.
B. Thomsen, A Theory of Higher Order Communicating Systems”, Information and Computation (I& C) 116 (1) (1995) 38–57.
