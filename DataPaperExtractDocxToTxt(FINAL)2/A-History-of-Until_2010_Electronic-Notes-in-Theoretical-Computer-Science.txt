

Electronic Notes in Theoretical Computer Science 262 (2010) 189–204
www.elsevier.com/locate/entcs
A History of Until
Andrea Masini	Luca Vigano`	Marco Volpe
Department of Computer Science, University of Verona, Italy Email: {andrea. masini | luca. vigano | marco. volpe }@univr. it

Abstract
Until is a notoriously difficult temporal operator as it is both existential and universal at the same time: AUB holds at the current time instant w iff either B holds at w or there exists a time instant w' in the future at which B holds and such that A holds in all the time instants between the current one and w'. This “ambivalent” nature poses a significant challenge when attempting to give deduction rules for until. In this paper, in contrast, we make explicit this duality of until by introducing a new temporal operator
∇ that allows us to formalize the “history” of until, i.e., the “internal” universal quantification over the
time instants between the current one and w'. This approach provides the basis for formalizing deduction systems for temporal logics endowed with the until operator. For concreteness, we give here a labeled natural deduction system for a linear-time logic endowed with the new history operator and show that, via a proper translation, such a system is also sound and complete with respect to the linear temporal logic LTL with until.
Keywords: Temporal logic, Until, LTL, Labeled Deduction, Natural Deduction.

Introduction
Until is a notoriously difficult temporal operator. This is because of its “ambivalent” nature of being an operator that is both existential and universal at the same time: AUB holds at the current time instant (sometimes “world” or “state” is used in place of “time instant”) w iff either B holds at w or there exists a time instant w' in the future at which B holds and such that A holds in all the time instants between the current one and w'. The words in emphasis highlight the dual existential and universal nature of U, which poses a significant challenge when attempting to give deduction rules for until, so that deduction systems for temporal logics either deliberately exclude until from the set of operators considered or devise clever ways to formalize reasoning about until. And even if one manages to give rules, these often come at the price of additional difficulties for, or even the impossibility of, proving useful metatheoretic properties, such as normalization or the subformula property. (This is even more so in the case of Hilbert-style axiomatizations, which provide axioms for until, but are not easily usable for proof construction.) See, for instance, [1,2,7,12,13,22], where techniques for formalizing suitable inference rules include

1571-0661 © 2010 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2010.04.014

introducing additional information (such as the use of a Skolem function f (AUB) to name the time instant where B begins to hold), or exploiting the standard recursive unfolding of until
AUB ≡ B ∨ (A ∧ X(AUB))	(1)
which says that AUB iff either B holds or A holds and in the successor time instant (as expressed by the next operator X) we have again AUB.
In this paper, in contrast, we make explicit the duality of until by introducing a new temporal operator ∇ that allows us to formalize the “history” of until, i.e., the fact that when we have AUB the formula A holds in all the time instants between the current one and the one where B holds. We express this “historic” universal quantification by means of ∇ with respect to the following intuitive translation:
AUB ≡ B ∨ F(XB ∧ ∇A)	(2)
That is: AUB iff either B holds or there exists a time instant w' in the future (as expressed by the sometime in the future operator F) such that
B holds in the successor time instant, and
A holds in all the time instants between the current one and w' (included).
The latter conjunct is precisely what the history operator ∇ expresses. 1 This is better seen when introducing labeling: since ∇ actually quantifies over the time instants in an interval (delimited by the current instant and the one where the B of the until holds), we adopt a labeling discipline that is slightly different from the more customary one of labeled deduction.
The framework of labeled deduction has been successfully employed for several non-classical, and in particular modal and temporal, logics, e.g., [8,23,24], since labeling provides a clean and effective way of dealing with modalities and gives rise to deduction systems with good proof-theoretical properties. The basic idea is that labels allow one to explicitly encode additional information, of a semantic or proof- theoretical nature, that is otherwise implicit in the logic one wants to capture. So, for instance, instead of a formula A, one can consider the labeled formula b : A, which intuitively means that A holds at the time instant denoted by b within the underlying Kripke semantics. One can also use labels to specify how time instants are related, e.g., the relational formula bRc states that the time instant c is accessible from b.
Considering labels that consist of a single time instant is not enough for ∇, as the operator is explicitly designed to speak about a sequence of time instants (namely, the ones constituting the history of the corresponding until, if indeed ∇ results from the translation of an U). We thus consider labels that are built out of a sequence of time instants, so that we can write αb1b3 : ∇A to express, intuitively, that A holds in the interval between time instants b1 and b3, which together with the sub-sequence α constitute a sequence of time instants αb1b3. This allows us to

1 This is in contrast to the unfolding (1). The decoupling of U that we achieve with ∇ is precisely what allows us to give well-behaved (in a sense made clearer below) natural deduction rules.

give the natural deduction elimination rule
αb1b3 : ∇A  b1 ≤ b2  b2 ≤ b3
αb1b2 : A	∇E

that says that if ∇A holds at time instant b3 at the end of the sequence αb1b3 and if b2 is in-between b1 and b3, as expressed by the relational formulas with the accessibility relation ≤, then we can conclude that A holds at b2.
Dually, we can introduce ∇A at time instant b3 at the end of the sequence αb1b3 whenever from the assumptions b1 ≤ b2 and b2 ≤ b3 for a fresh b2 we can infer αb1b2 : A, i.e., 2
[b1 ≤ b2] [b2 ≤ b3]
.
.
.
.
αb1b2 : A αb1b3 : ∇A ∇I
The adoption of time instant sequences for labels has thus allowed us to give rules for ∇ that are well-behaved in the spirit of natural deduction [19]: there is precisely one introduction and one elimination rule for ∇, as well as for the other connectives and temporal operators (⊃, G, and X). This paves the way to a proof- theoretical analysis of the resulting natural deduction systems, e.g., to show proof normalization and other useful meta-theoretical analysis, which we are tackling in current work.
Moreover, the rules ∇I and ∇E provide a clean-cut way of reasoning about until, according to the translation (2), provided that we also give rules for F and X. These operators have a local nature, in the sense that they speak not about sequences of time instants but about single time instants. Still, we can easily give natural deduction rules for them by generalizing the more standard “single-time instant” rules (e.g., [1,2,12,18,23,24,25]) using our labeling with sequences of time instants. As we will discuss in more detail below, if we collapse the sequences of time instants to consider only the final time instant in the sequence (or, equivalently, if we simply ignore all the instants in a sequence but the last), then these rules reduce to the standard ones. For instance, for the always in the future operator G (the dual of F) and X, with the corresponding successor relation , we can give the elimination rules

αb1 : GA  b1 ≤ b2
αb1b2 : A	GE	and
αb1 : XA b1 Q b2 αb1b2 : A	XE

The rule GE says that if GA holds at time instant b1, which is the last in the sequence αb1 and b2 is ≤-accessible from b1 (i.e., b1 ≤ b2), then we can conclude that A holds for the sequence αb1b2. The rule XE is justified similarly (via  ). The corresponding introduction rules are given in Section 4, together with rules for ⊥ and the connective ⊃, as well as a rule for induction on the underlying linear ordering. As we will see, we also need rules expressing the properties of the relations
≤ and  . Moreover, the fact that we consider sequences of time instants as labels

2 The side condition that b2 is fresh means that b2 is different from b1 and b3, and does not occur in any assumption on which αb1b2 : A depends other than the discarded assumptions b1 ≤ b2 and b2 ≤ b3.

requires us to consider some structural rules to express properties of such sequences (with respect to formulas).
This approach thus provides the basis for formalizing deduction systems for temporal logics endowed with the until operator. For concreteness, we give here a labeled natural deduction system for a linear-time logic endowed with the new history operator ∇ and show that, via a proper translation, such a system is also
sound and complete with respect to the linear temporal logic LTL with until. (We
do not consider past explicitly here, but adding operators and rules for it should be unproblematic, e.g., as in [25].)
We proceed as follows. In Section 2, we briefly recall the syntax and semantics of LTL, and an axiomatization for it. In Section 3, we define LTL∇, the logic that is obtained from LTL by replacing U with the history ∇, and give a validity- preserving translation, based on (2), from LTL into LTL∇. In Section 4, we give a labeled natural deduction system N (LTL∇) that it is sound with respect to the semantics of LTL∇. By focusing only on those derivations whose conclusion and open assumptions correspond to the translation of LTL-formulas, we show that N (LTL∇) can be used to capture reasoning in LTL and that it is in fact sound and
complete with respect to the semantics of LTL. In Section 5, we draw conclusions and illustrate directions of current and future work. Due to lack of space, some of the proofs are only sketched here. Full proofs are given in [17].

The Linear Temporal Logic LTL
We recall the syntax and semantics of LTL and an axiomatization for it.
Definition 2.1 Given a set P of propositional symbols, the set of (well-formed)
LTL-formulas is deﬁned by the grammar
A ::= p |⊥| A ⊃ A | GA | XA | AUA
where p ∈ P. The set of LTL-atomic formulas is P ∪ {⊥}. The complexity of an LTL-formula is the number of occurrences of the connective ⊃ and of the temporal operators G, X, and U.
The intuitive meaning of G, X, and U is the standard one: GA states that A holds always in the future, XA states that A holds in the next time instant, and AUB states that B holds at the current time instant or there is a time instant w in the future such that B holds in w and A holds in all the time instants between the current one and w.  As usual, we can introduce abbreviations and use, e.g.,
¬, ∨ and ∧ for negation, disjunction, and conjunction, respectively: ¬A ≡ A ⊃⊥, A ∨ B ≡ ¬A ⊃ B, and A ∧ B ≡ ¬(¬A ∨ ¬B). We can also define other temporal operators, e.g., FA ≡ ¬G¬A to express that A holds sometime in the future. We write Λ to denote a set of LTL-formulas.
Definition 2.2 Let N = ⟨N,s : N → N, ≤⟩ be the standard structure of natural numbers, where s and ≤ are respectively the successor function and the total (re-

flexive) order relation. An LTL-model is a pair M = ⟨N, V⟩ where V : N → 2P. Truth for an LTL-formula at a point n ∈ N in an LTL-model M = ⟨N, V⟩ is the smallest relation |=  satisfying:
M,n |=	p	iff	p ∈ V(n)
M,n |=	A ⊃ B	iff	M,n |=	A implies M,n |=	B
M,n |=	GA	iff	M,m |=	A for all m ≥ n
M,n |=	XA	iff	M,n +1 |=	A
M,n |=	AUB	iff	there exists n' ≥ n such that M, n' |=	B
and M,m |=	A for all n ≤ m < n'
Note that M,n $	⊥ for every M and n. By extension, we write:
M |=	A	iff	M,n |=	A for every natural number n
M |=	Λ	iff	M |=	A for all A ∈ Λ
Λ |=	A	iff	M |=	Λ implies M |=	A, for every LTL-model M
We now present a sound and complete Hilbert-style axiomatization, which we call H(LTL), for LTL (see, e.g., [10]). H(LTL) consists of the axioms
(A1 ) Any tautology instance	(A2 ) G(A ⊃ B) ⊃ (GA ⊃ GB) (A3 ) (X¬A ↔ ¬XA)	(A4 ) X(A ⊃ B) ⊃ (XA ⊃ XB)
(A5 ) GA ⊃ A ∧ XGA	(A6 ) G(A ⊃ XA) ⊃ (A ⊃ GA) (A7 ) AUB ↔ (B ∨ (A ∧ X(AUB))) (A8 ) AUB ⊃ FB
where we denote with ↔ the double implication, and of the rules of inference (MP ) If A and A ⊃ B then B	(NecX ) If A then XA	(NecG ) If A then GA
The set of theorems of H(LTL) is the smallest set containing these axioms and
closed with respect to these rules of inference.
LTL∇: LTL with history
In this section, we give the linear temporal logic LTL∇, which is obtained from LTL by replacing the operator U with a new unary temporal operator ∇, called history. The definition of the semantics of LTL∇ requires a notion of truth given with respect to sequences of time instants rather than just to time instants. We will then provide a translation from the language of LTL into the language of LTL∇ and show some properties of such a translation.

Syntax and semantics
Definition 3.1 Given a set P of propositional symbols, the set of (well-formed)
LTL∇-formulas is deﬁned by the grammar
A ::= p |⊥| A ⊃ A | GA | XA | ∇A

where p ∈ P. The set of LTL∇-atomic formulas is P ∪ {⊥}. The complexity of an LTL∇-formula is the number of occurrences of the connective ⊃ and of the temporal operators X, G, and ∇.
The intuitive meaning of the operators G and X is the same as for LTL, while
∇A intuitively states that A holds at any instant of a particular time interval (but here we see that we need sequences of time instants to formalize the semantics of the history operator, as we anticipated in the introduction). Again, we can define
other connectives and operators as abbreviations, e.g., ¬, ∨, ∧, F and so on. We
write Γ to denote a set of LTL∇-formulas.
To define a labeled deduction system for the logic LTL∇, we extend the language with a set of labels and finite sequences of labels, and introduce the notions of labeled formula and relational formula.
Definition 3.2 Let L be a set of labels. A ﬁnite non-empty sequence of labels (namely, an element of L+) is called a sequence. If A is an LTL∇-formula and α is a sequence, then α : A is a labeled (well-formed) formula ( lwff for short). The set of relational (well-formed) formulas ( rwffs for short) is the set of expressions of the form b ≤ c or b  c, where b and c are labels.
In the rest of the paper, we will assume given a fixed denumerable set L of labels and we will use b, c, d, . . . to denote labels, α, β, γ to denote finite sequences of labels 3 (e.g., bcd . . . or just b in the case of a sequence consisting of only one time instant), ϕ to denote a generic formula (either labeled or relational) and Φ to denote a set of generic formulas.
Definition 3.3 An observation sequence is a non-empty sequence σ = [n0, ..., nk] of natural numbers. Truth for an LTL∇-formula at an observation sequence σ in an LTL-model M = ⟨N, V⟩ is the smallest relation |=∇ satisfying:








By e




3 With a slight abuse of notation, we will also use α, β, γ to denote possibly empty subsequences and thus write αb1 ... bk (for k ≥ 1) to denote a sequence where α may be empty.

Given an LTL-model M, a structure is a pair S = ⟨M, I⟩ where I : L → N. Let Σ be the set of observation sequences and I+ : L+ → Σ the extension of I to sequences, i.e., I+(b0 ... bn) = [I(b0),..., I(bn)]. Truth for a generic formula ϕ in a structure S = ⟨M, I⟩ is the smallest relation |=∇ satisfying:
Note that M,σ $∇ ⊥ and M, I $∇ α : ⊥ for every M, σ and I. Given a set Φ of generic formulas and a generic formula ϕ:

A translation from LTL into LTL∇
LTL and LTL∇ are, obviously, related logics. In fact, below we will define a validity- preserving translation (·)∗ from LTL into LTL∇. Then, in Lemma 3.5, we will show that if an LTL∇-formula corresponds to the translation of some LTL-formula, then it can be interpreted “locally”, i.e., its truth value with respect to an observation sequence depends only on the last element of the sequence. Finally, in Lemma 3.7 and Theorem 3.8, we will use this result to prove that the translation preserves the validity of formulas. This property allows us to use the deduction system for LTL∇, which will be presented in Section 4, for reasoning on LTL too, as we will show in Section 4.2, when discussing soundness and completeness of the system.
Definition 3.4 We deﬁne the translation (·)∗ from the language of LTL into the language of LTL∇ inductively as follows:

We extend (·)∗ to sets of formulas in the obvious way: Λ∗ = {B∗ | B ∈ Λ}.
Lemma 3.5 Let M be an LTL-model, [n1,..., nk] an observation sequence, and A

an LTL-formula. Then M, [n1,..., nk] |=∇
every sequence m1,..., mr.
A∗  iff M, [m1,..., mr, nk] |=
A∗ for

Corollary 3.6 Let M be an LTL-model, [n1,..., nk] an observation sequence, and

A an LTL-formula. Then M, [n1,..., nk] |=∇
A∗ iff M, [nk] |=
A∗.

Lemma 3.7 Let M be an LTL-model, n a natural number, and A an LTL-formula. Then M,n |=	A iff M, [n] |= A∗.
Theorem 3.8 Let Λ be a set of LTL-formulas, A an LTL-formula and Λ∗ = {B∗ |
B ∈ Λ}. Then Λ |=	A iff Λ∗ |=  A∗ .

Proof By Definition 2.2, Λ |=


LTL
A iff ∀M. M |=


LTL
Λ implies M |=


LTL
A iff

∀M. ( ∀B ∈ Λ. ∀n. M,n |=

LTL
B implies ∀n. M,n |=

LTL
A ) iff (by Lemma 3.7)

∀M. ( ∀B ∈ Λ. ∀n. M, [n] |=∇ B  implies ∀n. M, [n] |=
∗
A∗ ) iff (by Lemma 3.5)

∀M. ( ∀B ∈ Λ. ∀σ. M,σ |=∇  B  implies ∀σ. M,σ |=	A ) iff (by Definition 3.3)
∗	∗

∀M. ( ∀B ∈ Λ. M |=∇ B  implies M |=	A ) iff ∀M. ( M |=	Λ  implies M |=
∗	∗	∗
		
A∗ ) iff Λ∗ |= A∗.	 
N (LTL∇): a labeled natural deduction system for LTL∇
In this section, we will first define a labeled natural deduction system N (LTL∇) that is sound with respect to the semantics of LTL∇. Then, by considering a restriction of the set of N (LTL∇)-derivations and by using the translation (·)∗ and the related results, we will show that N (LTL∇) can be also used for reasoning on LTL: we will prove soundness with respect to the semantics of LTL and we will give a proof of weak completeness with respect to LTL, by exploiting the Hilbert-style axiomatization H(LTL).

The rules of N (LTL∇)
The rules of N (LTL∇) are given in Figure 1. In N (LTL∇) we do not make use of a proper relational labeling algebra (as, e.g., in [24]) that contains rules that derive rwffs from other rwffs or even lwffs. Since we are mainly interested in the derivation of logical formulas, we rather follow an approach that aims at simplifying the system: we use rwffs only as assumptions for the derivation of lwffs (as in Simpson’s system for intuitionistic modal logic [23]). Thus, in N (LTL∇) there are no rules whose conclusion is an rwff.
The rules ⊃I and ⊃E are just the labeled version of the standard [19] natural deduction rules for implication introduction and elimination, where the notion of discharged/open assumption is also standard; e.g., [α : A] means that the formula is discharged in ⊃I. The rule ⊥E is a labeled version of reductio ad absurdum, where we do not constrain the time instant sequence (α2) in which we derive a contradiction to be the same (α1) as in the assumption.
The rules for the introduction and the elimination of G and X share the same structure since they both have a “universal” formulation. Consider, for instance, G and the corresponding relation ≤. The idea underlying the introduction rule GI is that the meaning of αb1 : GA is given by the metalevel implication b1 ≤ b2 =⇒ αb1b2 : A for an arbitrary b2 ≤-accessible from b1 (where the arbitrariness of b2 is ensured by the side-condition on the rule). As we remarked above, the operators G and X have a local nature, in that when we write αb1 : GA (and similarly for αb1 : XA) we are stating that GA holds at time instant b1, which is the last in the sequence αb1. Hence, the elimination rule GE says that if b2 is ≤-accessible from b1 (i.e., b1 ≤ b2), then we can conclude that A holds for the sequence αb1b2. Similar observations hold for X and the corresponding relation  .
The rule ser Q models the fact that every time instant has an immediate succes- sor, while the rule linQ specifies that such a successor must be unique. ser Q tells us that if assuming b1  b2 we can derive α : A, then we can discharge the assumption and conclude that indeed α : A.  linQ is slightly more complex: assume that b1

[α1 : A ⊃⊥]
.
.
.
.
[α : A]
.
.
.
.

 α2 :⊥
⊥E
  α : B  ⊃I	α : A ⊃ B  α : A ⊃E


[b1 ≤ b2]
.
.
.
.
α1 : A
α : A ⊃ B

[b1 Q b2]
.
.
.
.
α : B

[ϕ[b3/b2]]
.
.
.
.

αb1b2 : A	αb1 : GA  b1 ≤ b2
GI	GE
α : A ser Q	b1 Q b2 b1 Q b3 ϕ	α : A lin

αb1 : GA
[b1 Q b2]
.
.
.
.
αb1b2 : A
α : A
[b1 ≤ b1]
.
.
.
.
α : A
Q

[b1 ≤ b3]
.
.
.
.

αb1b2 : A	αb1 : XA  b1 Q b2
XI	XE
α : A refl
b1 ≤ b2 b2 ≤ b3	α : A trans≤

αb1 : XA
αb1b2 : A
α : A	≤
α : A

[b1 ≤ b2] [b2 ≤ b3]
.
.
.
.


αb b : ∇A  b ≤ b	b ≤ b



βb : Al

 αb1b2 : A  αb1b3 : ∇A ∇I
  1 3	1	2	2	3
αb1b2 : A	∇E


αb : Al
last



b1 ≤ b2 b2 ≤ b1 αb1 : A eq ≤	b1 ≤ b2 ϕ αb2 : A
[ϕ[b2/b1]]
.
.
.
.
α : A
α : A
[b1 Q b'] [b' ≤ b2]
.
.
.
.
α : A split

[b1 ≤ b2]
.
.
.
.
b1 Q b2	α : A base


αb0 : A  b0 ≤ b
[b0 ≤ bi] [bi Q bj ] [αbi : A]
.
.
.
.
αbj : A
ind

α : A	≤


αb : A

The rules have the following side conditions:
In XI (GI), b2 is fresh, i.e., it is different from b1 and does not occur in any assumption on which αb1b2 : A
depends other than the discarded assumption b1 Q b2 (b1 ≤ b2).
In ∇I, b2 is fresh, i.e., it is different from b1 and b3, and does not occur in any assumption on which
αb1b2 : A depends other than the discarded assumptions b1 ≤ b2 and b2 ≤ b3.
In last , the formula must be of the form Al, as defined in (3).
In ser Q, b2 is fresh, i.e., it is different from b and does not occur in any assumption on which α : A
depends other than the discarded assumption b1 Q b2.
In split ≤ , b' is fresh, i.e., it is different from b1 and b2 and does not occur in any assumption on which
α : A depends other than the discarded assumptions b1 Q b' and b' ≤ b2.
In ind , bi and bj are fresh, i.e., they are different from each other and from b and b0, and do not occur in any assumption on which αb0bj : A depends other than the discarded assumptions of the rule.
Figure 1. The rules of N (LTL∇)

had two different immediate successors b2 and b3 (which we know cannot be) and assume that the generic formula ϕ holds; if by substituting b3 for b2 in ϕ we obtain α : A, then we can discharge the assumption and conclude that indeed α : A.
Similarly, the rules refl ≤ and trans≤ state the reflexivity and transitivity of ≤, while eq ≤ captures substitution of equals. 4 The rule split ≤ states that if b1 ≤ b2, then either b1 = b2 or b1 < b2. The rule thus works in the style of a disjunction elimination: if by assuming either of the two cases, we can derive a formula α : A,

4 Recall that in this paper we use rwffs only as assumptions for the derivation of lwffs, so we do not need a more general rule that concludes ϕ[b2/b1] from ϕ, b1 ≤ b2 and b2 ≤ b1.

then we can discharge the assumptions and conclude α : A. Since we do not use
= and < explicitly in our syntax, we express such relations in an indirect way: the equality of b1 and b2 is expressed by replacing one with the other in a generic formula ϕ, < by the composition of  and ≤.
The rule base≤ expresses the fact that ≤ contains , while the rule ind models the induction principle underlying the relation between and ≤. If (base case) A holds in αb0 and if (inductive step) by assuming that A holds in αbi for an arbitrary bi ≤-accessible from b0, we can derive that A holds also in αbj, where bj is the immediate successor of bi, then we can conclude that A holds in every αb such that b is ≤-accessible from b0. 5
Finally, we have three rules that speak about the history and the label sequences: the rules ∇I and ∇E, which we already described in the introduction, and last . This rule expresses what we also anticipated in the introduction: the standard operators (and connectives) of LTL speak not about sequences of time instants but about single time instants, and thus if a formula A whose outermost operator is not ∇ holds at βb, then we can safely replace β by any other sequence α and conclude that A holds at αb. To formalize this, we define the set of (well-formed) LTLl-formulas (denoted by Al) by means of the grammar

Al  ::=  p |⊥| (Al) ⊃ (Al) | G(Al∇) | X(Al∇)	(3)
Al∇  ::=  Al | (Al∇) ⊃ (Al∇) | ∇(Al∇)

where p is a propositional symbol. Hence, in a formula Al, the history operator
∇ can only appear in the scope of a temporal operator G (and thus of F as in the translation (2)) or X. The rule last applies to these formulas only; in fact, the “l” in Al stands for “last”, but it also conveniently evokes both “local” and “LTL”. For formulas ∇A whose outermost operator is the history operator ∇, such a rule does not make sense (and in fact is not sound) as it would mean changing the interval over which A holds.
Such considerations are formalized in the following lemma, where we prove, for LTLl-formulas, a result that is the analogous of the one given in Lemma 3.5 with respect to the translation of LTL-formulas. 6 At the same time, we also prove that if A is a formula belonging to the syntactic category Al∇ of the grammar (3) (we will call such formulas LTLl∇-formulas), then the truth value of A depends on at most the last two elements of an observation sequence.
Lemma 4.1 Let M be an LTL-model, [n1,..., nk] an observation sequence, Al
an LTLl-formula and Al∇ an LTLl∇-formula. Then: (i) M, [n1,..., nk] |=	Al
iff M, [m1,..., mr, nk] |=∇ A for every sequence m1,..., mr and (ii) M, [n1,..., 
l
nk−1, nk] |=∇ A	iff M, [m1,..., mr, nk−1, nk] |=  A	for every sequence m1, . . . ,
l∇	l∇
mr.

5 The rule is given only in terms of relations between labels, since we restrict the treatment of operators in the system to the specific rules for their introduction and elimination.
6 In fact, Lemma 3.5 is a direct consequence of Lemma 4.1 and of Lemma 4.3 below.

Given the rules in Fig. 1, the notions of derivation, assumption (open or dis- charged, as we remarked) and conclusion are the standard ones for natural deduction systems [19]. We write Φ ▶∇ α : A to say that there exists a derivation of α : A in the system N (LTL∇) whose open assumptions are all contained in the set of formulas Φ. A derivation of α : A in N (LTL∇) where all the assumptions are dis- charged is a proof of α : A in N (LTL∇) and we then say that α : A is a theorem of N (LTL∇) and write ▶∇ α : A.
To denote that Π is a derivation of α : A whose set of assumptions may contain the formulas ϕ1,..., ϕn, we write
ϕ1 ... ϕn
Π
α : A

If we are interested in LTL-reasoning, then we can restrict our attention to a subset of the N (LTL∇)-derivations, namely, to the derivations where the conclusion and all the open assumptions correspond to the translations of LTL-formulas.
Definition 4.2 Let Π be a derivation in N (LTL∇) and Φ the set containing the conclusion and the open assumptions of Π. We say that Π is an LTL-derivation iff there exists a label b such that for every ϕ in Φ there exists an LTL-formula A such

that ϕ = b : A∗. We write Λ ▶

LTL
A to denote that in N (LTL∇) there exists an LTL-

derivation of b : A∗ from open assumptions in a set Φ, where Λ = {B | b : B∗ ∈ Φ}.
In Definition 4.2, we require all the open assumptions and the conclusion of an LTL-derivation to be lwffs labeled by the same single label b. Note that, as a consequence of Corollary 3.6, we would obtain the same notion of LTL-derivation by requiring instead that such formulas were labeled by the same sequence α.
In Section 4.2, we will show that N (LTL∇) is sound with respect to the semantics of LTL∇ and, by considering the notion of LTL-derivability ▶LTL , that it is sound and weakly complete with respect to LTL. An investigation of completeness with respect to LTL∇ is left for future work, together with the formalization of an axiomatization of LTL∇.
Related to this, it is important to understand what exactly is the relationship of the class of LTLl-formulas and the class of LTL-formulas, in particular with respect to the translation (·)∗. It is not difficult to see that the co-domain of the translation is included in LTLl by construction of (·)∗, i.e., by induction on the formula complexity it follows that:
Lemma 4.3 If A is an LTL-formula, then A∗ is an LTLl-formula.
The other direction is trickier, as it basically amounts to defining an inverse translation. To solve this problem, we have been considering normal forms of LTLl- formulas and we conjecture that the following fact indeed holds.
Conjecture 4.4 If A is an LTLl-formula, then there exists an LTL-formula B such that B∗ is semantically equivalent to A.

Soundness and completeness
Theorem 4.5 For every set Φ of labeled and relational formulas and every labeled formula α : A, if Φ ▶∇ α : A, then Φ |=∇ α : A.
Proof The proof proceeds by induction on the structure of the derivation of α : A. The base case is when α : A ∈ Φ and is trivial. There is one step case for every rule and we show here only the two representative cases
[b1 ≤ b2] [b2 ≤ b3]

Π
βb1b2 : B
βb1b3 : ∇B ∇I	and
Π
β'b : A
βb : A  last

Some more cases are in [17].  First, consider the case in which the last rule application is a ∇I, where α = βb1b3, A = ∇B, and Π is a proof of βb1b2 : B from hypotheses in Φ', with b2 fresh and with Φ' = Φ ∪ {b1 ≤ b2}∪ {b2 ≤ b3}. By
the induction hypothesis, for every interpretation I, if M, I |=∇ Φ , then M, I |=
'
βb1b2 : B. We let I be any interpretation such that M, I |=∇ Φ, and show that
M, I |=∇ βb1b3 : ∇B. Let I(b1) = n, I(b3) = m and I (β) = [n1,..., nk]. Since
+
b2 is fresh, we can extend I to an interpretation (still called I for simplicity) such that I(b2) = n + i for an arbitrary 0 ≤ i ≤ m. The induction hypothesis yields M, I |=∇ βb1b2 : B, i.e., M, [n1,..., nk, n,n + i] |=∇ B, and thus, since i is an arbitrary point between 0 and m, we obtain M, [n1,..., nk, n,n + m] |=∇ ∇B. It follows M, I |=∇ βb1b3 : ∇B.
Now consider the case in which the last rule applied is last and α = βb, where
Π is a proof of β'b : A from hypotheses in Φ. By applying the induction hypothesis
on Π, we have Φ |=∇ β b : A. We proceed by considering a generic LTL-model
'
M and a generic interpretation I on it such that M, I |=∇ Φ and showing that
this entails M, I |=∇ βb : A. By the induction hypothesis, M, I |=∇ β b : A,
'
i.e., M, I+(β'b) |=	A by Definition 3.3. Since A is an LTLl-formula by the side
condition of the rule and the two observation sequences I+(β'b) and I+(βb) share
the same last element I(b), we can apply Lemma 4.1 and obtain M, I+(βb) |=  A,
i.e., M, I |=∇ βb : A by Definition 3.3.	 
By exploiting the translation of Section 3.2 and the notion of LTL-derivation of Definition 4.2, we also prove a result of soundness with respect to LTL.
Theorem 4.6 For every set Λ of LTL-formulas and every LTL-formula A, if Λ ▶

A, then Λ |=
LTL A.
LTL

Proof By definition of ▶LTL , for a given label b, there exists a derivation in N (LTL∇) of b : A∗ from open assumptions in Φ = {b : B∗ | B ∈ Λ}. By Theorem 4.5, Φ ▶

b : A∗ implies Φ |=
∇
b : A∗. Since b is generic, we have that for every LTL-model M

and every interpretation I, M, I |=∇ Φ implies M, I |=∇
b : A∗ iff for every natural

number n, M, [n] |=∇ Λ  implies M, [n] |=	A , where Λ  = {B	| B ∈ Λ}. By
∗	∗	∗	∗

Lemma 3.5, we infer that for every observation sequence σ, M,σ |=∇ Λ implies
∗
M,σ |=∇ A . By Definition 3.3, Λ |=  A and thus, by Theorem 3.8, we conclude
∗	∗	∗

Λ |=

LTL

A.	 

As we anticipated, an analysis of the completeness of N (LTL∇) with respect to LTL∇ is left for future work. Here we discuss completeness with respect to LTL. The proposed natural deduction system consists of only finitary rules; consequently, it cannot be strongly complete for LTL. 7 Nevertheless, by using the axiomatization H(LTL) and the translation (·)∗, we can give a proof of weak completeness for it; namely:
Theorem 4.7 For every LTL-formula A, if |=   A, then ▶  A.
Proof We can prove the theorem by showing that N (LTL∇) is complete with re- spect to the axiomatization H(LTL) given in Section 2, which is sound and complete for the logic LTL. That is, we need to prove that: (i) the translation, via (·)∗, of every axiom of H(LTL) is provable in N (LTL∇) by means of an LTL-derivation,

and (ii) the notion of ▶

LTL
is closed under the (labeled equivalent of the) rules of

inference of H(LTL). Showing (ii) is straightforward and we omit it here. With
regard to (i), due to lack of space, we only give here a few examples.	The other cases are presented in [17].
(A2 )
[b : G(A ⊃ B)]1  [b ≤ c]3	[b : GA]2  [b ≤ c]3
bc : A ⊃ B	GE	bc : A	GE
 bc : B	⊃E
b : GB GI3
b : GA ⊃ GB ⊃I2


(A3 )


b : G(A ⊃ B) ⊃ (GA ⊃ GB)
⊃I1

[b : X¬A]1  [b Q c]2	[b : XA]3  [b Q c]2
bc : ¬A	XE	bc : A	XE
 bc :⊥ 	⊃E
b : ¬XA ⊥E3
ser
	b : ¬XA	   b : X¬A ⊃ ¬XA ⊃I1




[b : ¬XA]1
[b Q c]2  [b Q d]4  [bc : A]3
 bd : A	linQ
b : XA XI4
 b :⊥ 	⊃E
 bc : ¬A ⊃3
b : X¬A XI2

b : ¬XA ⊃ X¬A ⊃I1
(A5 )






[b : GA]1  [b ≤ b]2


[b Q c]3

[b ≤ c]5  [c ≤ d]4
bd : A
bd : A
[b : GA]1  [b ≤ d]6


bd : A	GE
trans6
base5

bb : A	GE
last
refl 2
 bcd : A last
 bc : GA GI4
XI3

b : A	≤
b : XGA

	b : A ∧ XGA		∧I
⊃I1
b : GA ⊃ (A ∧ XGA)

7 This is not a problem of our formulation: all the finitary deduction systems for temporal logics equipped with at least the operators X and G have such a defect; see, e.g., [15, Ch. 6].

(A6 )


[b : G(A ⊃ XA)]1 [b ≤ bi]4
bbi : A ⊃ XA	GE
[bi : A]4
bbi : A  last



[b : A]2  [b ≤ c]3
bbi : XA	⊃E	[bi Q bj ]4
bbibj : A	XE
bj : A  last
 c : A	ind 4
 bc : A last
b : GA ⊃3
b : A ⊃ GA ⊃I2


b : G(A ⊃ XA) ⊃ (A ⊃ GA)
⊃I1


Conclusions
The introduction of the operator ∇ has allowed us to formalize the “history” of until and thus, via a proper translation, to give a labeled natural deduction system for a linear time logic endowed with ∇ that is also sound and complete with respect to LTL with until. As we remarked above, we see this work as spawning several different directions for future research. First, the “recipe” for dealing with until that we gave here is abstract and general, and thus provides the basis for formalizing deduction systems for temporal logics endowed with U, both linear and branching time. We are currently considering CTL∗ and its sublogics as in [18,20] and are also working at a formal characterization of the class of logics that can be captured with our approach.
Second, the well-behaved nature of our approach, where each connective and operator has one introduction and one elimination rule, paves the way to a proof- theoretical analysis of the resulting natural deduction systems, e.g., to show proof normalization and other useful meta-theoretical properties, which we are tackling in current work. Moreover, we are also considering different optimizations of the rules. In particular, along the lines of the discussion about the rule last (and Corollary 3.6 and Definition 4.2), we are investigating to what extent we can use sequences as labels only when they are really needed, which would also simplify the proofs of normalization and other meta-properties. 8
This is closely related to the formalization of the relationship between the class of LTLl-formulas and that of LTL-formulas, which in turn will allow us to reason about the completeness of N (LTL∇) with respect to the semantics of LTL∇ and also to provide an axiomatization of LTL∇ (thus treating it as a full-fledged logic as opposed to as a “service” logic for LTL as we did here).
In [16], an extension of a linear-time temporal logic with past is presented, where a unary operator now is used in order to fix a point of evaluation. When used in

8 As an interesting side-track, we believe that the restrictions we imposed on formulas for the rule last , i.e., considering Al and Al∇, is closely related, at least in spirit, to the focus on persistent formulas when combining intuitionistic and classical logic so as to avoid the collapse of the two logics into one, see [6] but also [4,9]. We are, after all, considering here formulas stemming from two classes (if not two logics altogether), and it makes thus sense that they require different labeling (single instants and sequences).

combination with past operators, now allows to “forget” part of the past. The resulting logic is proved to be equally expressive to, but more succinct than, LTL with past.
Finally, it is worth observing that several works have considered interval temporal logics, e.g., [3,5,11,14,21]. While these works consider intervals explicitly, we have used them somehow implicitly here, as a means to formalize the dual nature of until via the history ∇, and this is another reason why it is interesting to reduce the use of label sequences as much as possible. A more detailed comparison of our approach with these works is left for future work.

Acknowledgement
This work was partially supported by the PRIN projects “CONCERTO” and “SOFT”.

References
Basin, D., C. Caleiro, J. Ramos and L. Vigan`o, Labeled Tableaux for Distributed Temporal Logic,
J. Logic and Computation (2009, doi: 10.1093/logcom/exp022).
Bolotov, A., O. Grigoriev and V. Shangin, Automated natural deduction for propositional linear-time temporal logic., in: Proc. TIME’07 (2007), pp. 47–58.
Bowman, H. and S. Thompson, A decision procedure and complete axiomatization of finite interval temporal logic with projection, J. Logic and Computation 13 (2003).
Caleiro, C. and J. Ramos, Combining classical and intuitionistic implications, in: Proc. FroCoS’07, LNCS 4720, 2007, pp. 118–132.
Cerrito, S. and M. Cialdea Mayer, Labelled Tableaux for Linear Time Temporal Logic over Finite Time Frames, in: Labelled Deduction, Kluwer, 2000, pp. 130–144.
Farin˜as Del Cerro, L. and A. Herzig, Combining classical and intuitionistic logic, in: Proc. FroCos’96, 1996, pp. 93–102.
Fisher, M., D. M. Gabbay and L. Vila, editors, “Handbook of Temporal Reasoning in Artificial Intelligence I,” Elsevier, 2005.
Gabbay, D. M., “Labelled Deductive Systems,” Clarendon Press, 1996.
Gabbay, D. M., An overview of fibred semantics and the combination of logics, in: Proc. FroCoS’07, LNCS 4720, 2007, pp. 1–56.
Goldblatt, R. I., “Logics of Time and Computation,” CSLI Lecture Notes, 1987.
Goranko, V., A. Montanari, P. Sala and G. Sciavicco, A general tableau method for propositional interval temporal logics: Theory and implementation, J. Applied Logic 4 (2006), pp. 305–330.
Gore, R., Tableau methods for modal and temporal logics, in: Handbook of Tableau Methods, Kluwer, 1999.
Gough, G. D., Decision procedures for temporal logic, Technical Report UMCS-89-10-1, Department of Computer Science, University of Manchester (1984).
Halpern, J. and Y. Shoham, A propositional modal logic of time intervals, JACM 38 (1991), pp. 935– 962.
Kr¨oger, F., “Temporal logic of programs,” Springer-Verlag, 1987.
Laroussinie, N. Markey and P. Schnoebelen, Temporal Logic with Forgettable Past, in: Proc. LICS’02,
pp. 383–392, 2002.
Masini, A., L. Vigan`o and M. Volpe, A History of Until (Extended Version), arXiv:0910.4500, http:
//arxiv.org/abs/0910.4500, 2009.

Masini, A., L. Vigan`o and M. Volpe, A labeled natural deduction system for a fragment of CTL∗, in:
Proc. LFCS’09, LNCS 5407 (2009), pp. 338–353.
Prawitz, D., “Natural Deduction, ”Almquist and Wiskell, 1965.
Reynolds, M., A tableau for bundled CTL*, J. Logic and Computation 17 (2007).
Schmitt, P. H. and J. Goubault-Larrecq, A Tableau System for Linear-TIME Temporal Logic, in: Proc. TACAS’97, LNCS 1217 (1997), pp. 130–144, See also the unpublished manuscript A Tableau System for Full Linear Temporal Logic.
Schwendimann, S., A New One-Pass Tableau Calculus for PLTL, in: Proc. Tableaux’98, LNAI 1397 (1998), pp. 277–291.
Simpson, A., “The Proof Theory and Semantics of Intuitionistic Modal Logic,” Ph.D. thesis, School of Informatics, University of Edinburgh (1994).
Vigan`o, L., “Labelled Non-Classical Logics,” Kluwer, 2000.
Vigan`o, L. and M. Volpe, Labeled Natural Deduction Systems for a Family of Tense Logics, in:
Proc. TIME’08 (2008), pp. 118–126.
