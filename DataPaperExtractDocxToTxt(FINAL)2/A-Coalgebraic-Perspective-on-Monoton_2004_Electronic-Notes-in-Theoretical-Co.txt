Electronic Notes in Theoretical Computer Science 106 (2004) 121–143 
www.elsevier.com/locate/entcs


A Coalgebraic Perspective on Monotone Modal Logic
Helle Hvid Hansen1
Institute for Logic, Language and Computation University of Amsterdam
Plantage Muidergracht 24, NL–1018 TV Amsterdam.
Clemens Kupke2
Institute for Logic, Language and Computation, University of Amsterdam, Plantage Muidergracht 24, NL–1018 TV Amsterdam, and Centrum voor Wiskunde en Informatica, P.O. Box 94079,
NL–1090 GB Amsterdam.

Abstract
The paper has two main parts: First we make the connection between monotone modal logic and the general theory of coalgebras precise by defining functors UpP : Set → Set and UpV : Stone → Stone such that UpP- and UpV-coalgebras correspond to monotone neighbourhood frames and descriptive general monotone frames, respectively. Then we investigate the relationship between the coalgebraic notions of equivalence and monotone bisimulation. In particular, we show that the UpP-functor does not preserve weak pullbacks, and we prove interpolation for a number of monotone modal logics using results on UpP-bisimulations.
Keywords: Modal logic, coalgebra, bisimulation, frame.


Introduction
There is an obvious connection between coalgebra and modal logic: Coalgebras for an endofunctor T can be seen as abstract dynamic systems or transition systems and modal logic seems to be the natural specification language to talk

1 Email: hhhansen@science.uva.nl
2 Email: ckupke@science.uva.nl



1571-0661 © 2004 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2004.02.028


about these systems. The main benefit which can be expected from defining coalgebraic semantics for modal logic is to obtain results for different types of modal logics in a uniform way. Here the type of a modal logic is determined by the endofunctor T . Research in this direction has been carried out for the inductively defined Kripke polynomial functors (cf. [10,13,30]) but also for arbitrary endofunctors T (see [24,19,26,27]).
In normal modal logic, a modal operator is finite meet preserving (ex- pressed by T— T and (p Λ q) — p Λ q). Monotone modal logic gener- alises normal modal logic by weakening this requirement for  to monotonicity (p → q/ p → q). This entails that Kripke frames no longer constitute an ad- equate semantics; instead (non-normal) monotone modal logics are interpreted over monotone neighbourhood frames of the form (W, ν : W → У(У(W ))) where ν(w) is upwards closed. Monotone modal logics arise naturally in the modelling of open systems and game-like situations (see [25,2,29]), where the ability of an agent to achieve an outcome where ϕ holds is expressed as ϕ. In such a formalisation, ϕ Λ ψ → (ϕ Λ ψ) need no longer be valid, since the agent may need to use different actions/strategies to achieve ϕ, respectively ψ. However, monotonicity is clearly a valid principle.
One aim of this paper is to show that monotone modal logics fall under the scope of the above sketched coalgebraic approach to modal logic. This will be achieved in Section 3 by first defining a functor UpУ on Set such that UpУ- coalgebras correspond to monotone neighbourhood frames. Similar to what has been done for normal modal logic (cf. [17]) we also define a functor UpV on the category Stone of Stone spaces such that the category of UpV-coalgebras is dual to the category BAM of monotone Boolean algebra expansions, which form the algebraic semantics for monotone modal logic.
In Section 4 we then take a look at the different notions of equivalence for UpУ-coalgebras, namely UpУ-bisimilarity as defined by Aczel and Mendler [1] and behavioural equivalence. It is well known that if the functor T is weak pullback preserving, then T -bisimilarity and behavioural equivalence are the same (cf. [31]). It turns out however that the two notions differ for our UpУ- functor. This means that UpУ does not preserve weak pullbacks despite the fact that it is very similar to the weak pullback preserving filter functor defined in Gumm [11]. The two standard examples for functors with this property are the (-)3-functor defined by Aczel and Mendler in [1] and the contravariant powerset functor composed with itself (cf. [31]). However, the UpУ-functor has the advantage that its defintion arises naturally by translating monotone neighbourhood frames into the coalgebraic setting. Furthermore, we argue that behavioural equivalence is the better notion for studying UpУ-coalgebras as it coincides with bisimulation between monotone neighbourhood frames.


In Section 5 we use UpУ-bisimulations to define the bisimulation prod- uct of two monotone neighbourhood frames, thereby generalising bisimulation products of Kripke frames (cf. Marx [23]). We then use bisimulation products to prove Craig Interpolation for some monotone modal logics, following the proof idea in [23] for interpolation in normal modal logics.

Acknowledgement
We would like to thank our colleagues for useful comments. Special thanks goes to Yde Venema for initiating our cooperation and for providing helpful comments on a draft of this paper.

Preliminaries
Topological preliminaries
As we are going to define an endofunctor on the category of Stone spaces we will briefly state the definition of a Stone space and the well-known Stone duality. For the basic notions of general topology that are needed we refer the reader to [6]. Given a topological space X = (X, τ ) we use K(X), O(X) and Clp(X) to denote the collections of closed, open and clopen subsets, respec- tively.
Definition 2.1 (Stone) Let X = (X, τ ) be a topological space. Then X is a Stone space if X is compact, Hausdorff and has a basis of clopen subsets. With Stone we will denote the category with Stone spaces as objects and continuous maps as morphisms between them.
Definition 2.2 (Vietoris topology) Let X = (X, τ ) ∈ Stone. Furthermore we define for a clopen U ⊆ X, [e]U := {F ∈ K(X) | F ⊆ U }, ⟨e⟩U :=
{F ∈ K(X) | F ∩ U /= ∅} and let τυ be the topology on K(X) generated by
{[e]U | U ∈ Clp(X)}∪ {⟨e⟩U | U ∈ Clp(X)}. Then VX := (K(X), τυ) is called the Vietoris space over X.
Fact 2.3 (Vietoris functor) We can deﬁne a functor V : Stone → Stone by
X '→ VX
(f : X → Y) '→ f [ ]: VX → VY
For information about the Vietoris topology and the Vietoris functor we refer the reader to [14], Section III.4.
Fact 2.4 The categories BA of Boolean algebras and Stone are dually equiva- lent. We denote the well-known functors witnessing this fact by Clp : Stoneop →


BA and Sp : BA → Stoneop.
Coalgebraic preliminiaries
We assume that the reader is familiar with the basic notions of category theory. As a standard reference we refer to [20].
Definition 2.5 (Coalg(T )) Let C be a category and T : C → C be an endofuntor over C. Then a T-coalgebra, or T -system, is a pair (X, γ : X → TX) where X denotes an object of C and γ denotes a morphism in C. An arrow f : X1 → X2 ∈ C is a T-coalgebra morphism between two T -coalgebras (X1, γ1) and (X2, γ2) if γ2 ◦ f = Tf ◦ γ1. The category of T -coalgebras and T -coalgebra morphisms is denoted by Coalg(T ).
Coalgebras are closely related to the Kripke semantics of (normal) modal logic.
Example 2.6 (Coalgebras and modal logic) The category Coalg(У) of co- algebras for the powerset functor У : Set → Set is (trivially) isomorphic to the category of Kripke frames and bounded morphisms between them. A slightly more complicated example is the category of coalgebras for the Vietoris func- tor V : Stone → Stone (cf. Fact 2.3) which corresponds to the category of descriptive general Kripke frames [17].
There are two standard notions of equivalence for systems: bisimilarity and behavioural equivalence. It is however a well known fact that for most choices of the functor T these two notions coincide (namely if T preserves weak pullbacks). We will now introduce these two notions and see later on that the functor we are defining is a natural example of a functor for which bisimilarity is stronger than behavioural equivalence.
Definition 2.7 (T -bisimulation) Let T : Set → Set be a functor, and (X1, γ1), (X2, γ2) ∈ Coalg(T ). Then we call a relation Z ⊆ X1 × X2 a T - bisimulation if there is a function γ : Z → TZ such that the following diagram commutes


X ¸,π1
Z   π2  X 

1		2
γ1	 γ	γ2
J 	 J 	J 

TX1 ¸,  TZ 
  
T π2	2

Points x1 ∈ X1 and x2 ∈ X2, such that x1Zx2 for a T -bisimulation Z, are called T -bisimilar.
Definition 2.8 (Behavioural equivalence) Let T : Set → Set be a functor, and (X1, γ1), (X2, γ2) ∈ Coalg(T ). Then two states x1 ∈ X1 and x2 ∈ X2


are called behaviourally equivalent if there is an (X, γ) and morphisms fi : (Xi, γi) → (X, γ) in Coalg(T ) such that f1(x1) = f2(x2). The T -coalgebras (X1, γ1) and (X2, γ2) are behaviourally equivalent if there is a T -coalgebra (X, γ) and surjective morphisms fi : (Xi, γi) → (X, γ) ∈ Coalg(T ).
Monotone modal logic
We assume the reader is familiar with normal modal logic [4] and refer to [5,12] for non-normal modal logic. In this subsection, we fix our modal setting and introduce the basic semantic structures.
For simplicity we will work in a modal language L with only one modal operator. Let prop be a set of proposition letters. Then the set of well-formed L-formulas is given by
ϕ ::= ⊥| p | ¬ϕ | ϕ ∨ ϕ |  ϕ	where p ∈ prop.
T, Λ, → and — are defined as the usual abbreviations, and  abbreviates
¬ ¬. A set Λ of L-formulas is a monotone modal logic if Λ contains all propositional tautologies, and Λ is closed under the rules modus ponens (p, p → q/q), uniform substitution and monotonicity (p → q/ p → q). The smallest monotone modal logic will be called M, and in section 5 we will consider various extensions of M with one or more of the axioms in the box below. If Σ is a set of L-formulas, then M.Σ denotes the smallest monotone modal logic containing Σ.
The semantics of monotone modal logic is formulated in terms of monotone neighbourhood frames. We will define these structures together with their morphisms as a category MNF.
Definition 2.9 (MNF) A monotone (neighbourhood) frame (for the language L) is a pair F = (W, ν) where W is a non-empty set (of worlds) and ν : W → У(У(W )) is a neighbourhood function which is upwards closed, i.e.,
∀w ∈ W, ∀X, Y ∈ У(W ) : X ⊆ Y, X ∈ ν(w) ⇒ Y ∈ ν(w). Let F = (W, ν) and F' = (W ', ν') be monotone frames. A function f : W → W ' is a bounded morphism from F to F' (notation: f : F → F') if
(BM1)	X ∈ ν(w)	=⇒  f [X] ∈ ν'(f (w)).
(BM2)	X' ∈ ν'(f (w))  =⇒  ∃X ⊆ W : f [X] ⊆ X' & X ∈ ν(w).
The category MNF consists of monotone neighbourhood frames and bounded morphisms.


In some cases it is more convenient to work with a definition of bounded morphism formulated for the inverse image map instead of the image map, and it is easy to show that (BM1) and (BM2) are equivalent with the following condition: For all X' ⊆ W ',
f −1[X'] ∈ ν(x) iff X' ∈ ν'(f (x)).	(1)
Similarly to Kripke semantics, a neighbourhood function ν defines a map
mν : У(W ) → У(W ):
mν(X)= {w ∈ W | X ∈ ν(w)} .	(2) Note that mν is monotone whenever ν is upwards closed.
Finally, a monotone model is a triple (W, ν, V ) where (W, ν) is a monotone frame, and V : prop → У(W ) is a valuation of the proposition letters. We can now define the set of states [ϕ]] where an L-formula ϕ is true in a monotone model M = (W, ν, V ) as follows:
[[⊥]] = ∅ ; [p]] = V (p); [¬ϕ]] = W \ [[ϕ]] ; [[ϕ ∨ ψ]] = [[ϕ]] ∪ [[ψ]] ; [[ ϕ]] =
mν([[ϕ]]).

Algebra and duality
We will briefly introduce the main concepts and results from the algebraic duality theory of monotone modal logic. Apart from fixing notation, the purpose of this section is to provide the reader with some insight into the relationship between algebraic duality and the UpV-functor of section 3.2.
We assume familiarity with the algebraic duality theory of normal modal logic [32,8,9], in particular with descriptive (Kripke) frames, Boolean algebras with operators and Stone representation [15,16]. For a detailed account of the algebraic duality for monotone modal logic we refer to [12].

Basic notions
A monotone Boolean algebra expansion (bam) is an algebraic structure A = (A, +, −, 0,f ) where Bl A = (A, +, −, 0) is a Boolean algebra and f : A → A is a monotone map, i.e., a ≤ b implies f (a) ≤ f (b), for all a, b ∈ A, where a ≤ b iff b = a + b. Thus a Boolean algebra with operator(s) (bao) can be seen as a bam in which f is normal and additive. If A1 = (A1, +, −, 0, f1) and A2 = (A2, +, −, 0, f2) are bams, then a map η : A1 → A2 is a bam-homomorphism if η is a Boolean homomorphism, and for all a1 ∈ A1, η(f1(a1)) = f2(η(a1)). We define the category of bams and bam-homomorphisms as BAM.


For basic duality we obtain a bam from a monotone frame F = (W, ν) by taking the full complex algebra F+ = (У(W ), ∪, \, ∅, mν). In the other direc- tion, we will use Stone duality. Given a bam A, we let SpA = (Uf A, A) denote the dual Stone space of Bl A, where Uf A is the set of ultrafilters of Bl A, and A is the image of A under the Stone representation map r : A → У(Uf A) defined by r(a) = a = {u ∈ Uf A | a ∈ u}. Recall that A is a clopen basis for SpA. We now define the ultraﬁlter frame of A by A+ = (Uf A, ν+) where ν+(u) is defined as follows for the different types of subsets of SpA,
(clopen)	∀^a ∈ A^:	^a ∈ ν+(u)	iff	f (a) ∈ u .
(closed)	∀C ∈ K(SpA):	C ∈ ν+(u)	iff	∀a ∈ A : C ⊆ a → f (a) ∈ u.
(arbitrary)  ∀X ⊆ Uf A:   X ∈ ν+(u)  iff  ∃C ∈ K(SpA): 
C ⊆ X & C ∈ ν+(u).
A general monotone frame is a structure G = (W, ν, A), where (W, ν) is a monotone frame and A ⊆ У(W ) is a collection of subsets which contains ∅ and is closed under complementation in W , finite unions and the map mν . If G1 = (W1, ν1, A1) and G2 = (W2, ν2, A2) are two general monotone frames, and θ : W1 → W2 a map, then θ is a general frame bounded morphism between G1 and G2 if θ is a bounded morphism between the monotone frames (W1, ν1) and (W2, ν2), and θ also satisfies the following condition: θ−1[a2] ∈ A1 for all a2 ∈ A2. The category GMF consists of general monotone frames and general frame bounded morphisms.
The basic duality between general monotone frames and bams is ob- tained via the following constructions. Given a general monotone frame G = (W, ν, A), we define the underlying bam of G as G∗ = (A, ∪, \, ∅, mν). Given a bam A, the general ultraﬁlter frame of A is defined as A∗ = (A+, A).
Let A be a bam. Then we define the canonical extension of A by (A+)+. A class K of bams is canonical if K is closed under taking canonical extensions. A monotone modal logic Λ is canonical if the variety VΛ defined by Λ is canonical.

Descriptive general frames
In the algebraic duality theory of normal modal logic, descriptive (Kripke) frames were introduced to obtain a categorical equivalence with baos [8,9]. The descriptive general monotone frames we are about to define serve the same purpose for the category BAM. More precisely, descriptive general monotone frames will be defined such that G is descriptive iff G ∼= (G∗)∗. First recall that in a general monotone frame G = (W, ν, A), the admissible sets A may be taken as the basis for a topology τA on W . We will refer to W = (W, τA) as the topological space of G. Let G = (W, ν, A) be a general monotone frame.


Then G is called differentiated if for all w, v ∈ W : w = v iff ∀a ∈ A(w ∈ a ⇔ v ∈ a); compact if for all A' ⊆ A, A' /= ∅ if A' has the finite intersection property; tight if for all w ∈ W , all C ∈ K(W) and all X ⊆ W ,

C ∈ ν(w) iff ∀a ∈ A(C ⊆ a → a ∈ ν(w)),
X ∈ ν(w) iff ∃C ∈ K(W)(C ⊆ X & C ∈ ν(w)).
Finally, G is descriptive if G is differentiated, compact and tight.
For brevity, we will refer to descriptive general monotone frames simply as descriptive monotone frames. Note that the tightness condition is a natural

requirement if one wishes to show that G
=∼ (G∗)∗ for a general monotone

frame G, since the neighbourhood function in the general ultrafilter frame of
G∗ will be of this form. Furthermore, the conditions of differentiation and compactness are the same as for general Kripke frames, hence we have the following fact.
Fact 2.10 Let G be a general monotone frame. Then G is differentiated and compact iff W is a Stone space in which A forms a clopen basis.
Let DMF be the category of descriptive monotone frames with general frame bounded morphisms. In [12] the following fundamental result is proved.
Theorem 2.11 The categories DMF and BAM are dually equivalent.

Coalgebras for monotone modal logic
Monotone frames as UpУ-coalgebras
It is not difficult to see that monotone frames are coalgebras: A monotone frame is a pair of the type (X, ν : X → 22X ). However not every 22(-) - coalgebra corresponds to a monotone frame. The aim of this section is now to
define a functor UpУ : Set → Set such that the UpУ-coalgebras and monotone
frames are the same.
Definition 3.1 (UpУ on objects) Let X be a set, then the set UpУX is defined as the set of all upward closed sets of subsets of X:
UpУX := {W ⊆ УX | ∀U1, U2 ∈ УX.(U1 ⊆ U2 Λ U1 ∈ W ) ⇒ U2 ∈ W }
Furthermore we define for an arbitrary W ⊆ УX its upward closure ↑(W ) as follows
↑(W ) := {U ∈ УX | ∃U ' ∈ W.U ' ⊆ U } .


Lemma and Definition 3.2  The following mapping deﬁnes a functor UpУ :
Set → Set:
X '→ UpУX
(f : X → Y ) '→ UpУf := (f −1)−1[ ]
Proof. We first check whether the mapping is well-defined on morphisms. Let f : X → Y be a function and suppose W ∈ UpУX, then we have to show that V := (f −1)−1[W ] ∈ UpУY . It is easy to see that V ∈ УУY , so it suffices to show that V is upward closed. To that aim take an arbitrary U1 ∈ V and a U2 ∈ УY such that U1 ⊆ U2. Then by the definition of V we know that f −1[U1] ∈ W . Furthermore we know that f −1[U1] ⊆ f −1[U2] and by the fact that W was upwards closed we get f −1[U2] ∈ W . But then also U2 ∈ V . That UpУ satisfies the functorial laws, is not difficult to see and it
follows immediately from the fact that it is a subfunctor of 22(-) .	 
Before we establish the obvious connection between the categories MNF and Coalg(UpУ), we first want to get a better understanding of how UpУ acts on morphisms.
Lemma 3.3 Let f : X → Y and suppose W ∈ UpУX. Then
UpУf (W )= ↑({f [U '] | U ' ∈ W }).
Proof. Easy to check.	 
It is clear that monotone frames (W, ν) and UpУ-coalgebras are the same mathematical structures. Furthermore it is easy to show that bounded mor- phisms are UpУ-coalgebra morphisms and vice versa.
Lemma 3.4 The categories Coalg(UpУ) and MNF are isomorphic.
Proof. For a detailed proof we refer the reader to [12].	 
In the following we will not make any distinction between the notions UpУ- coalgebras and monotone frames and between UpУ-coalgebra morphisms and bounded morphisms.
Remark 3.5 One might ask why we do not consider the category of 22(-) - coalgebras as the coalgebraic analogue of monotone frames. Indeed this would work well on objects: Given a 22(-) -coalgebra (W, ν : W → 22W ) the corre-
sponding monotone frame would be the pair (W, ν' := ↑ ◦ ν). Morphisms of the category Coalg(22(-) ) would however no longer correspond to bounded morphisms.

Descriptive monotone frames as UpV-coalgebras
In [17] it has been argued that coalgebras for a functor T : Stone → Stone are interesting from a normal modal logic perspective. This will also turn out to be true in the case of monotone modal logic. We will first define a functor UpV : Stone → Stone and then show that the category of descriptive monotone frames is isomorphic to the category Coalg(UpV). As corollaries we obtain a duality between the categories Coalg(UpV) and BAM, a representation of bams as algebras for a functor and the existence of the final UpV-coalgebra.
Definition 3.6 (UpV on objects) Let X = (X, τ ) ∈ Stone, and let U ⊆ K(X), then U is upwards closed (upc) if for all F, F ' ∈ K(X) such that F ⊆ F ', F ∈ U implies F ' ∈ U . U is called [e]-closed if F belongs to U for all closed sets F satisfying a ∈ U for all clopens a ≥ F . We define UpV(X, τ ) := {U ∈ K(VX) | U is upc and [e]-closed }.
Remark 3.7 The requirement for all sets to be [e]-closed is one half of the tightness condition for a general monotone frame. The terminology [e]-closed has been chosen because a set U is [e]-closed iff for all F ∈ —U there is an a ∈ Clp(X) such that F ∈ [e]a and U ∩ [e]a = ∅.
It is clear that UpVX ⊆ VVX. Thus if we can show that UpVX is a closed subset in VVX, then it follows that UpVX is a Stone space with the relative topology.
Lemma 3.8 Let X = (X, τ ) ∈ Stone. Then UpVX is a closed subset in VVX.
Proof. The proof uses only standard techniques from general topology and has to be omitted here for lack of space.	 
Definition 3.9 (UpV-functor) The map UpV : Stone → Stone is defined as follows. For a Stone space X = (X, τ ),
UpVX = ({U ∈ K(VX) | U is upc and [e]-closed },τ ')
where τ ' is the relative topology induced by the topology on VVX. For a continuous function f : X → Y,

UpVf : UpVX → UpVY
U '→ UpVf (U ) = (f −1)−1[U ]= 22f (U )
= {D ∈ K(Y) | f −1[D] ∈ U }
It follows from Lemma 3.8 that UpV is well-defined on objects. The next two lemmas show that UpVf is also well-defined on morphisms.

Lemma 3.10 Let f : X → Y ∈ Stone, where X = (X, τX ), Y = (Y, τY ), and
U ∈ UpVX. Then UpVf (U ) ∈ UpVY.
Proof. That UpVf (U ) is upc is easy to check. It remains to show that UpVf (U ) = (f −1)−1[U ] is [e]-closed. The proof uses a standard compact- ness argument and is left out due to lack of space.	 
Lemma 3.11 The function UpVf : UpVX → UpVY is continuous.
Proof. For completeness reasons we provide the rather technical proof. Read- ers who are not interested in the technical details are advised to skip it. It suffices to show that (UpVf )−1 [[e]b] and (UpVf )−1 [⟨e⟩b] is clopen for an ar- bitrary clopen subset b of VY. We are only going to consider the case in which we are dealing with a set of the form [e]b. The ⟨e⟩-case can be treated in a
similar way. Note that if b ∈ Clp(VY) then there is a suitable family of clopen
sets ak ∈ Clp(Y) such that b =  n	  mk Mkak where Mk ∈ {[e], ⟨e⟩}. Be-
i	k=1	i=1	i  i  n	 i
suffices to look at a set b of the form  m'  M a (M ∈ {[e], ⟨e⟩}). Because

it up we have to show that

Z := (UpVf )−1

 [e]



i =1

[e]ai ∪ ⟨e⟩a 

= (UpVf )−1 [{U ∈ UpVY | 6F ∈ U.(Ei.F ⊆ ai) or F ∩ a /= ∅}]
is clopen for arbitrary ai,a ∈ Clp(Y). First we fix for any i ∈ {1,..., m} a set Ui ∈ {U ∈ UpVY | 6F ∈ U.(Ei.F ⊆ ai) or F ∩ a /= ∅} and a set Fi ∈ Ui such that Fi ⊆ ai and Fi ∩ a = ∅. We may assume that this is possible because suppose that for one i there is no such Ui' and Fi' . Then
{U ∈ UpVY | 6F ∈ U.(Ei.F ⊆ ai) or F ∩ a /= ∅} =
{U ∈ UpVY | 6F ∈ U.(Ei.i /= i'&F ⊆ ai) or F ∩ a /= ∅}
and we can forget about the ai' . We now claim that
(∗)
Z = {V ∈ UpVX | 6G ∈ V.(Ei.f [G] ⊆ ai) or f [G] ∩ a /= ∅}
m
= [e]	[e]f −1[ai] ∪ ⟨e⟩f −1[a]
i=1
and the last set is clearly a clopen subset of UpVX. It remains to show that (∗) is indeed true. The ⊆-part of the equation is easy to check. So we will focus on the ≥-part. Let V ∈ {V ∈ UpVX | 6G ∈ V.(Ei.f [G] ⊆ ai) or f [G] ∩ a /= ∅} . We have to prove that
UpVf [V ] ∈ {U ∈ UpVY | 6F ∈ U.(Ei.F ⊆ ai) or F ∩ a /= ∅} .


Let F ' ∈ UpVf [V ], i.e. there is a G ∈ V such that f [G] ⊆ F '.
Case: f [G] ∩ a /= ∅. Then clearly also F ' ∩ a /= ∅.
Case: f [G] ⊆ ai for some i. Suppose for a contradiction that for all i ∈
{1,... , m} we have F ' /⊆ ai and that F ' ∩ a = ∅. We now define F¯ :=
F ' ∪ Fi. Then F¯ ∈ Ui as Ui is upwards closed. Furthermore F¯ /⊆ ai' for
all i' ∈ {1,... , m} (otherwise F ' ⊆ ai' ). As F¯ ∈ Ui we therefore must have
F¯ ∩ a /= ∅. But this implies F ' ∩ a /= ∅ as Fi ∩ a = ∅ and we have arrived
at a contradiction.	 
Now that we have defined the functor UpV we are able to prove the main result of this section.
Theorem 3.12 The category DMF of descriptive monotone frames is isomor- phic to the category Coalg(UpV).
Proof. We just define the functors Coa : DMF → Coalg(UpV) and Dmf : Coalg(UpV) → DMF which induce the isomorphism between the categories. The proof that we have an isomorphism is merely spelling out the definitions and is omitted.
We first define the functor Coa:
Coa(W, ν, A) := (W, ν  : W → UpVW)	Coaf := f
where W = (W, τA) and ν(w) := {F ⊆ W | F ∈ K(W) and F ∈ ν(w)}. The map ν is well-defined because the tightness condition on (W, ν, A) ensures that ν(w) is [e]-closed. Fact 2.10 gives us that the functor is well-defined on objects. Let us now define Dmf:
Dmf(W, ν) := (W, ν, Clp(W))	Dmff := f
where ν(w) = {U ⊆ W | EF ∈ ν(w).F ⊆ U }. Again Fact 2.10 gives us that (W, ν, Clp(W)) is differentiated and compact. Tightness follows from the [e]-closedness of ν(w).
Furthermore, it is straightforward to prove that a bounded morphism f ∈ DMF is also an UpV-coalgebra morphism and vice versa, a fact which is needed in the definition both of Coa and Dmf.	 
To round up the section we state some immediate consequences of the theorem.
Corollary 3.13 The categories BAM and Coalg(UpV) are dually equivalent.
Proof. Follows directly from the duality between BAM and DMF (cf. Theorem 2.11) and Theorem 3.12.	 


Corollary 3.14 There is a functor L : BA → BA such that Alg(L) ∼= BAM.
Proof. An immediate consequence of Coalg(UpV)op ∼= BAM and Stone dual- ity.	 
Corollary 3.15 The category Coalg(UpV) has cofree coalgebras, in particular the ﬁnal UpV-coalgebra exists.
Proof. Consequence of the duality and the fact that the forgetful functor from BAM to BA has a left adjoint.	 

Equivalence notions
In section 3 we established the equivalence between UpУ-coalgebras and mono- tone frames, and we will now investigate the relationship between the various equivalence notions associated with these two perspectives on monotone modal logic.
In subsection 4.1 we will show that coalgebraic UpУ-bisimulation is strictly stronger than the logical notion of monotone bisimulation (Definition 4.1), and in subsection 4.2 the main result states that behavioural equivalence is equivalent with monotone bisimilarity. These results allow us to conclude that the UpУ-functor does not preserve weak pullbacks (Corollary 4.10).
Bisimulation
The central notion of model equivalence in modal logic is that of bisimula- tion. Bisimulations for Kripke models were introduced by van Benthem in [3], where one also finds the well-known characterisation result which states that (normal) modal logic is the (Kripke) bisimulation invariant fragment of first-order logic.
For monotone (neighbourhood) models, monotone bisimulations have been presented in Pauly [28], which also contains a number of results on the rela- tionship between Kripke and monotone bisimulations together with a version of the van Benthem characterisation theorem for monotone modal logic. This last result, which is also included in [12], is a strong argument for monotone bisimulation being the correct logical notion of model equivalence.


Definition 4.1 (Monotone bisimulation) Let (X1, ν1), (X2, ν2) ∈ MNF. A non-empty relation Z ⊆ X1 × X2 is a monotone bisimulation between (X1, ν1) and (X2, ν2) if for all x1 ∈ X1 and x2 ∈ X2 such that x1Zx2, the following two conditions are satisfied.
(forth)	6C1 ∈ ν1(x1).EC2 ∈ ν2(x2) such that (6c2 ∈ C2.Ec1 ∈ C1 : c1Zc2).
(back)	6C2 ∈ ν2(x2).EC1 ∈ ν1(x1) such that (6c1 ∈ C1.Ec2 ∈ C2 : c1Zc2).
If dom(Z) = X1 and ran(Z) = X2, then we will call Z a full monotone bisimulation. Two monotone frames (X1, ν1) and (X2, ν2) are said to be (full) monotone bisimilar if there is a (full) monotone bisimulation between them, and two states x1 ∈ X1 and x2 ∈ X2 are called (full) monotone bisimilar states if there is a (full) monotone bisimulation Z between (X1, ν1) and (X2, ν2) such that x1Zx2.
For the UpУ-functor, UpУ-bisimulation amounts to the following.
Definition 4.2 (UpУ-bisimulation) Let (X1, ν1), (X2, ν2) ∈ Coalg(UpУ). A non-empty relation Z ⊆ X1 × X2 is an UpУ-bisimulation between (X1, ν1) and (X2, ν2) if there is a function µ : Z → UpУZ such that: ν1 ◦ π1 = UpУπ1 ◦ µ and ν2 ◦ π2 = UpУπ2 ◦ µ.

X ¸,π1
Z 	π2	 X 

1		2
ν1	µ	ν2
J 	 J 	J 

UpУX1
U¸pP,π1 UpУZ UpPπ2 Up  УX

We will say that (X1, ν1) and (X2, ν2) are UpУ-bisimilar via (Z, µ), if µ makes the above diagram commute. If πi : Z → Xi, i ∈ {1, 2}, that is, the projections are surjective, then Z is called a full UpУ-bisimulation.
Thus in order to show that Z is an UpУ-bisimulation between two UpУ- coalgebras (X1, ν1) and (X2, ν2), we must be able to endow Z with a coalge- braic structure µ in such a way that the projections πi : (Z, µ) → (Xi, νi) are bounded morphisms. For i ∈ {1, 2}, πi is a bounded morphism if and only if
6Ci ⊆ Xi.(Ci ∈ νi(xi) ⇐⇒ π−1[Ci] ∈ µ(x1, x2)).	(3)
Or equivalently, for all Y ⊆ Z, Ci ⊆ Xi, (BM1)	Y ∈ µ(x1, x2) implies πi[Y ] ∈ νi(xi),
(BM2)	Ci ∈ νi(xi) implies π−1[Ci] ∈ µ(x1, x2).
These conditions provide us with concrete constraints that µ : Z → UpУZ must satisfy in addition to upwards closure. Condition (BM1) tells us when we are allowed to add some Y ⊆ Z to µ(x1, x2), namely when both π1[Y ] ∈ ν1(x1)


and π2[Y ] ∈ ν2(x2). That is (BM1) gives rise to a largest µ. On the other hand, (BM2) tells us when we must add some Y to µ(x1, x2), namely when π−1[Ci] ⊆ Y for some Ci ∈ νi(xi) and some i ∈ {1, 2}, thus giving rise to a smallest µ. We now give a formal definition.
Definition 4.3 (µs and µl) Let (X1, ν1), (X2, ν2) ∈ Coalg(UpУ), and ∅ /=
Z ⊆ X1 × X2 be given. Then we define µs, µl : Z → UpУZ as follows.

Y ∈ µs(x1, x2) iff EC1 ∈ ν1(x1).π−1[C1] ⊆ Y  or EC2 ∈ ν2(x2).π−1[C2] ⊆ Y.
1	2
(4)
Y ∈ µl(x1, x2)  iff  π1[Y ] ∈ ν1(x1) and π2[Y ] ∈ ν2(x2).	(5)
It should be clear from the definition that both µs and µl are upwards closed, and for any µ satisfying (3), we have µs(x1, x2) ⊆ µ(x1, x2) ⊆ µl(x1, x2). There is, of course, no guarantee that µs and µl themselves will satisfy both bounded morphism conditions. The next proposition tells us when this is the case.
Proposition 4.4 Let (X1, ν1), (X2, ν2) ∈ Coalg(UpУ), and ∅ /= Z ⊆ X1 × X2. Then Z is an UpУ-bisimulation between (X1, ν1) and (X2, ν2) if and only if Z satisﬁes the following two conditions for all (x1, x2) ∈ Z.
(UpУ-forth)   6C1 ∈ ν1(x1).EC2 ∈ ν2(x2) such that
6c2 ∈ C2.Ec1 ∈ C1 s.t. c1Zc2 and Z−1[C2] ∩ C1 ∈ ν1(x1).
(UpУ-back)   6C2 ∈ ν2(x2).EC1 ∈ ν1(x1) such that
6c1 ∈ C1.Ec2 ∈ C2 s.t. c1Zc2 and Z[C1] ∩ C2 ∈ ν2(x2).

Proof. We only sketch the proof. For the direction from left to right, it is straightforward to check that the (UpУ-forth) and (UpУ-back) conditions hold for an UpУ-bisimulation. For the direction from right to left, one can show that when Z satisfies the (UpУ-forth) and (UpУ-back) conditions then (X1, ν1) and (X2, ν2) are UpУ-bisimilar via both (Z, µs) and (Z, µl). 
Due to the above characterisation, the next corollary is immediate.
Corollary 4.5 If Z is an UpУ-bisimulation, then Z is also a monotone bisim- ulation.
As we announced at the beginning of this subsection, UpУ-bisimulations are a strict subset of monotone bisimulations. This is shown by the following example.


Example 4.6 Consider the monotone frames F1 = ({s1, t1, u1, v1}, ν1) where ν1(s1) = ↑({{t1}, {u1, v1}}), ν1(u1) = ↑({{u1}}) and ν1(t1) = ν1(v1) = ∅; and F2 = ({s2, t2}, ν2) where ν2(s2) = ↑({{t2}}) and ν2(t2) = ∅. Then Z =
{(s1, s2), (t1, t2), (v1, t2)} is a monotone bisimulation. In fact, Z is the maximal monotone bisimulation on F1 and F2. But Z does not satisfy (UpУ-forth) for the neighbourhood {u1, v1} ∈ ν1(s1), since Z−1[{t2}] ∩ {u1, v1} = {v1} ∈/ ν1(s1). This problem will occur for any monotone bisimulation linking s1 and s2, since u1 is not monotone bisimilar with any state in F2, thus s1 and s2 are monotone bisimilar, but not UpУ-bisimilar.
The (UpУ-forth)-condition will fail for a monotone bisimulation Z if, for example, Y1 ∈ ν1(x1), Y1 /⊆ dom(Z) and for all X1 Ç Y1, X1 ∈/ ν1(x1), since

then Z−1[Y2] ∩ Y1 Ç Y1 for any Y2, and hence Z−1[Y2] ∩ Y1 ∈/
ν1(x1). This

failure can be eliminated if we consider full monotone bisimulations. We leave
the easy proof of the following lemma to the reader.
Lemma 4.7 Let (X1, ν1), (X2, ν2) ∈ Coalg(UpУ), and Z ⊆ X1 × X2. Then the following holds: If Z is a full monotone bisimulation, then Z is an UpУ- bisimulation.
The next example shows that UpУ-bisimulations need not be full.
Example 4.8 Let F1 = ({s1, t1, u1}, ν1) and F2 = ({s2, t2}) where νi(si) = 
↑({{ti}}), νi(ti) = ∅, for i ∈ {1, 2}, and ν1(u1) = ↑({{u1}}). Then Z =
{(s1, s2), (t1, t2)} is a (maximal) UpУ-bisimulation, but Z is clearly not full.
Behavioural equivalence
As it turns out, the concept of behavioural equivalence ties in better with the frame theoretic notion of bisimulation, and we will now show that two states are monotone bisimilar if and only if they are behaviourally equivalent (Theorem 4.9).
Recall from Definition 2.8 that for two UpУ-coalgebras (X1, ν1) and (X2, ν2), two states s1 ∈ X1 and s2 ∈ X2 are behaviourally equivalent if they can be identified via two bounded morphisms fi : Xi → Y , i ∈ {1, 2}, in some UpУ- coalgebra (Y, δ). The behavioural equivalence induces a relation on X1 × X2,
pb(f1, f2)= {(x1, x2) ∈ X1 × X2 | f1(x1)= f2(x2)},
and it is well-known that (pb(f1, f2), π1, π2) is the pullback of f1 and f2 (in Set), and π1 ◦ f1 = π2 ◦ f2. It is straightforward to show that the pb(f1, f2)- relation is, in fact, a monotone bisimulation. Thus behavioural equivalence between states implies monotone bisimilarity. The main result of this section states that the other implication holds as well.


Theorem 4.9 (State equivalence) Let (X1, ν1), (X2, ν2) be in Coalg(UpУ). Two states s1 ∈ X1 and s2 ∈ X2 are behaviourally equivalent if and only if s1 and s2 are monotone bisimilar.
Proof. Due to lack of space we only sketch the proof, which may be found in
[12] together with the definition of disjoint union and bisimulation quotient which are the two basic constructions needed for the proof. For the direc- tion from left to right one can show that pb-relations are monotone bisimu- lations. For the other direction, we must construct a monotone frame into which (X1, ν1) and (X2, ν2) can be embedded. We do so by first forming the disjoint union (X1 + X2, ν1+2) of (X1, ν1) and (X2, ν2). Then the inclusion maps κi : Xi → X1 + X2, i ∈ {1, 2}, are bounded morphisms. Furthermore, Z is contained in the maximal bisimulation ZM on (X1 + X2, ν1+2), and by taking the bisimulation quotient (Y, γ) := (X1 + X2, ν1+2)/ZM , the natural map ε : (X1 + X2) → Y = (X1 + X2)/ZM is a bounded morphism. Now define fi := ε ◦ κi,then it follows that fi : Xi → Y , i ∈ {1, 2}, are bounded morphisms and f1(s1)= f2(s2).	 
Rutten [31] shows that for functors T which preserve weak pullbacks, the
pb(f1, f2)-relations are also T -bisimulations.
Since we know that UpУ-bisimulation really is a stronger concept than monotone bisimulation, we obtain the following corollary from Theorem 4.9.
Corollary 4.10 The functor UpУ does not preserve weak pullbacks.
Example 4.11 As a specific example of a pb(f1, f2)-relation which is not an UpУ-bisimulation, consider again the frames F1 and F2 from Example 4.6 together with the following isomorphic copy of F2: G = (Y, µ) where Y =
{x, y}, µ(x)= ↑({{y}}), µ(y)= ∅. Let fi : Wi → Y , i ∈ {1, 2}, be defined by f1(s1) = f2(s2) = x and f1(u1) = f1(v1) = f2(t2) = y. Then f1 and f2 are bounded morphisms and pb(f1, f2) = Z = {(s1, s2), (t1, t2), (v1, t2)}. But as we already know, there is no UpУ-bisimulation linking s1 and s2.
The distinction between behavioural equivalence and UpУ-bisimilarity fades when we look at system equivalence rather than equivalence between states.
Theorem 4.12 (System equivalence) Let (X1, ν1), (X2, ν2) ∈ Coalg(UpУ). Then the following are equivalent.
(X1, ν1) and (X2, ν2) are behaviourally equivalent systems.
There exists a full UpУ-bisimulation between (X1, ν1) and (X2, ν2).
Proof. Again, we only provide a sketch.
(i) ⇒ (ii): Behavioural equivalence of two systems requires that the systems


can be surjectively mapped onto a third system, hence the obtained pb(f1, f2)- relation is a full monotone bisimulation, which is also a full UpУ-bisimulation by Lemma 4.7.
(ii) ⇒ (i): This can be proved similarly to Theorem 4.9. All we need to observe is that the constructed fi = ε ◦ κi are surjective, since the maximal bisimulation on (X1 + X2, ν1+2) is full.	 


Interpolation
In this section, we will demonstrate how our results on bisimulations can be combined with algebraic duality into a general test for interpolation (via superamalgamation) in monotone modal logics (Lemma 5.4).
Superamalgamation (SUPAP) of varieties has provided algebraic charac- terizations of the Craig Interpolation Property (CIP) for a large class of modal logics, where it is possible to show that: Λ has CIP iff VΛ has SUPAP. However, we have found only little in the literature regarding interpolation in monotone modal logics or superamalgamation in bam-varieties. One of the few sources is Madarasz [21] who generalises results for bao-varieties to varieties of Boolean algebras expanded with an operation f which is non-normal, i.e. f (0) /= 0, but still additive. Madar´asz [22] also provides some results on the limitations of the CIP-SUPAP relationship.
We start by recalling the definitions of Craig interpolation and superamal- gamation. For an L-formula ϕ, let fv(ϕ) denote the set of proposition letters occurring in ϕ. A modal logic Λ over the language L has the Craig Interpola- tion Property (CIP) if for any L-formulas ϕ, ψ such that ϕ → ψ ∈ Λ, there is an L-formula θ such that fv(θ) ⊆ fv(ϕ) ∩ fv(ψ) and ϕ → θ ∈ Λ, θ → ψ ∈ Λ. θ is called an interpolant.
Let K be a class of algebras such that each A ∈ K has a partial ordering.
K has the superamalgamation property (SUPAP) if, for any A0, A1, A2 ∈ K
e1	e2
and embeddings e1, e2 such that A1 < A0 > A2, there exists an A ∈ K and
embeddings g1, g2 such that

g1	g2
A1 > A < A2.
g1 ◦ e1 = g2 ◦ e2.
6x1 ∈ A1, 6x2 ∈ A2,
g1(x1) ≤ g2(x2) ⇒ Ex0 ∈ A0 : x1 ≤ e1(x0) and e2(x0) ≤ x2 g2(x2) ≤ g1(x1) ⇒ Ex0 ∈ A0 : x2 ≤ e2(x0) and e1(x0) ≤ x1.


Showing that Λ has CIP under the assumption that VΛ has SUPAP can be done under very general circumstances (see [12]), but we formulate the result for monotone modal logic.
Theorem 5.1 (SUPAP ⇒ CIP) Let Λ be a monotone modal logic over the language L, and VΛ the variety of bams deﬁned by Λ. Then Λ has CIP if VΛ has SUPAP.
Marx [23] provides sufficient conditions for SUPAP formulated in terms of Kripke frames, and here we will prove a version for monotone frames, or equivalently for UpУ-coalgebras, in Lemma 5.4. The construction involves bisimulation products, which we introduce now.
Definition 5.2 (Bisimulation product) Let (X1, ν1) and (X2, ν2) be UpУ- coalgebras, Z ⊆ X1 × X2, and µ : Z → UpУZ. Then (Z, µ) is a bisimulation product of (X1, ν1) and (X2, ν2) if (X1, ν1) and (X2, ν2) are full UpУ-bisimilar via (Z, µ).
From Proposition 4.4 and Lemma 4.7 we know that when (X1, ν1) and (X2, ν2) are behaviourally equivalent systems via the surjections f1 and f2, then bisimulation products of (X1, ν1) and (X2, ν2) exist. Namely, by taking Z = pb(f1, f2), then (Z, µs) and (Z, µl) are both bisimulation products of (X1, ν1) and (X2, ν2), and for µ ∈ {µs, µl}, the diagram below commutes.
(Z, µ)	π2  (X  ,ν )
2	2
π1	f2

J 
(X1, ν1)	f1
J 
 (Y , γ)

For a class F of monotone frames, we will say that F has bisimulation prod- ucts if for any F1, F2 ∈ F, such that F1 and F2 are behaviourally equivalent systems via the surjections f1 and f2, there is a µ : pb(f1, f2) → UpУpb(f1, f2) such that (pb(f1, f2), µ) ∈ F. That is, we must be able to choose the neighbour- hood function µ such that the full UpУ-bisimulation induced by the system equivalence equipped with this µ is in F. Thus, in particular, one can show that µs or µl turns pb(f1, f2) into a frame of the right kind, and we will say that F has smallest bisimulation products if (pb(f1, f2), µs) ∈ F, and F has largest bisimulation products if (pb(f1, f2), µl) ∈ F.
Remark 5.3 At first glance, bisimulation products look similar to (weak) pullbacks in the category Coalg(UpУ). However, in general, bisimulation prod- ucts need not be weak pullbacks. To see this, consider the frames Fi = (Wi, νi) where Wi = {si, ti} and νi(si) = νi(ti) = {Wi}, i ∈ {1, 2}, and let Z =

W1 × W2. Then both (Z, µs) and (Z, µl) are bisimulation products of F1 and
F2, but it can be checked that neither is a (weak) pullback in Coalg(UpУ).
Before we state the main result of this section, recall the following from subsection 2.4. F+ denotes the full complex algebra of a monotone frame F, and A+ denotes the ultrafilter frame of a bam A.
Lemma 5.4 (Bisimulation product lemma) Let K be a class of bams and F a class of monotone frames. Then K has SUPAP if the following three conditions are satisﬁed:
F has bisimulation products.
For all F in F: F+ ∈ K.
For all A in K: A+ ∈ F.
Proof. The proof of this lemma is virtually identical to that of Lemma 5.2.6 in Marx [23], which relies only on the Kripke version of bisimulation products and the basic duality between Kripke frames and baos. These analogues for monotone frames and bams are shown in [12].	 
Note that if K is a canonical variety and F = {F | F+ ∈ K}, then conditions
(ii) and (iii) in the Bisimulation product lemma always hold, since then A ∈ K
implies that the canonical extension (A+)+ is in K, and hence A+ ∈ F. From
[12] (Theorem 7.13, Corollary 10.35) we have the following canonicity result.
Proposition 5.5 (Canonical logics) Let M denote the smallest monotone modal logic. If Γ ⊆ {N,P,4’,T,D}, then Λ= M.Γ is canonical.
It is straightforward to show the next proposition (a proof may be found in [12]).
Proposition 5.6 The following frame classes have smallest bisimulation pro- ducts:
The class M of all monotone frames.
The class N of monotone frames satisfying (n) 6w ∈ W : W ∈ ν(w).
(P) The class P of monotone frames satisfying (p) 6w ∈ W : ∅ ∈/ ν(w). (4’) The class 4' of monotone frames satisfying
(iv’) 6w ∈ W 6X ⊆ W : X ∈ ν(w) → mν(X) ∈ ν(w).
(T) The class T of monotone frames satisfying
(t)	6w ∈ W 6X ⊆ W : X ∈ ν(w) → w ∈ X.
(D) The class D of monotone frames satisfying
(d) 6w ∈ W 6X ⊆ W : X ∈ ν(w) → W \ X ∈/ ν(w).

Together with the Bisimulation product lemma 5.4, Propositions 5.5 and
5.6 provide us with the following theorem.

Theorem 5.7 If Γ ⊆ {N,P,T,4’,D} then Λ= M.Γ has CIP.

Remark 5.8 The algebraic duality presented in this paper is built up around the notion of σ-canonicity [15,7]. However, there is a second (dual) way of constructing canonical extensions, and hence ultrafilter frames and descriptive monotone frames, which is referred to as π-canonicity, for which the same duality with monotone frames hold. Thus the Bisimulation product lemma
5.4 could equally have been formulated for the notion of π-ultrafilter frame. Furthermore, one can show that when Γ ⊆ {N,P,4} and Λ = M.Γ then VΛ is π-canonical and, similarly to the proof of Proposition 5.6, the class of frames for Λ has largest bisimulation products. Hence it follows that Λ has CIP. See
[12] for details.


Conclusions and Further Research
We hope to have demonstrated that coalgebra offers an interesting perspective on monotone modal logic, and vice versa, that monotone modal logic can offer new angles on coalgebraic results. There are a number of directions in which the work of this paper can be extended.
First one can now easily see monotone modal logic as a coalgebraic modal logic in the style of Pattinson and prove soundness and completeness for the basic monotone modal logic in the same way as it was proven for normal modal logic in [27]. It might be possible to obtain further results about normal modal logic and monotone modal logic in a uniform way.
Another question is whether behavioural equivalence is more suitable than T -bisimilarity for studying coalgebras for functors that are not weak pullback preserving. This has already been suggested in Kurz [18, Sec. 1.2] and Wolter [33]. Our UpУ-functor also supports this idea, but one has to provide further arguments.
In Marx [23] the connection between bisimulation products (zigzag prod- ucts) of Kripke frames, various degrees of amalgamation, and preservation of first-order validities under the bisimulation product construction are investi- gated. Although our definition of bisimulation products is slightly different than the approach in [23], one could try to generalize these results to monotone modal logic by using our bisimulation products.

References
P. Aczel and N. Mendler. A final coalgebra theorem. In D. H. Pitt et al, editor, Category Theory and Computer Science, volume 389 of LNCS, pages 357–365. Springer, 1989.
R. Alur, T. A. Henzinger, and O. Kupferman.	Alternating-time temporal logic.	In
Compositionality: The Signiﬁcant Difference, LNCS 1536, pages 23–60. Springer, 1998.
J. van Benthem. Modal Correspondence Theory. PhD thesis, University of Amsterdam, 1976.
P. Blackburn, M. de Rijke, and Y. Venema. Modal Logic. Cambridge University Press, 2001.
B. F. Chellas. Modal Logic - An Introduction. Cambridge University Press, 1980.
R. Engelking. General Topology. Heldermann Verlag, 1989.
M. Gehrke and B. J´onsson. Monotone bounded distributive lattice expansions. Mathematica Japonica, 52(2):197–213, 2000.
R. Goldblatt. Metamathematics of modal logic, part I. Reports on Mathematical Logic, 6:41– 78, 1976.
R. Goldblatt. Metamathematics of modal logic, part II. Reports on Mathematical Logic, 7:21– 52, 1976.
R. Goldblatt. A calculus of terms for coalgebras of polynomial functors. In A. Corradini,
M. Lenisa, and U. Montanari, editors, Coalgebraic Methods in Computer Science (CMCS’01), volume 44.1 of ENTCS. Elsevier, 2001.
H. Peter Gumm. Functors for coalgebras. Algebra Universalis, 45:135–147, 2001.
H. H. Hansen. Monotonic modal logic (Master’s thesis). Preprint 2003-24, ILLC, University of Amsterdam, 2003.
B. Jacobs. Many-sorted coalgebraic modal logic: a model-theoretic study. Theoretical Informatics and Applications, 35(1):31–59, 2001.
P. Johnstone. Stone Spaces. Cambridge University Press, 1982.
B. J´onsson and A. Tarski. Boolean algebras with operators I. American Journal of Mathematics, 73:891–939, 1951.
B. J´onsson and A. Tarski. Boolean algebras with operators II. American Journal of Mathematics, 74:127–162, 1952.
C. Kupke, A. Kurz, and Y. Venema. Stone coalgebras. In H. P. Gumm, editor, Coalgebraic Methods in Computer Science (CMCS’03), volume 82.1 of ENTCS, 2003. Also available as Technical Report PP-2003-15, ILLC, University of Amsterdam.
A. Kurz. Logics for Coalgebras and Applications to Computer Science. PhD thesis, Ludwig- Maximilians-Universita¨t Mu¨nchen, 2000.
A. Kurz and D. Pattinson. Definability, canonical models, compactness for finitary coalgebraic modal logic. In Lawrence Moss, editor, Proceedings of CMCS 2002, volume 65.1 of ENTCS. Elsevier, 2002.
S. Mac Lane. Category Theory for the Working Mathematician. Springer, 1971.
J. Madar´asz. Interpolation and amalgamation; pushing the limits. Part I. Studia Logica, 61:311–345, 1998.
J. Madar´asz. Interpolation and amalgamation; pushing the limits. Part II. Studia Logica, 62:1–19, 1999.
M. Marx. Algebraic Relativization and Arrow Logic. PhD thesis, University of Amsterdam, 1995.


L. Moss. Coalgebraic logic. Annals of Pure and Applied Logic, 96:277–317, 1999.
R. Parikh. The logic of games and its applications. In M. Karpinski and J. van Leeuwen, editors, Topics in the Theory of Computation, Annals of Discrete Mathematics 24. Elsevier, 1985.
D. Pattinson. Semantical principles in the modal logic of coalgebras. In Proceedings 18th International Symposium on Theoretical Aspects of Computer Science (STACS 2001), volume 2010 of LNCS, Berlin, 2001. Springer.
D. Pattinson. Coalgebraic modal logic: soundness, completeness and decidability of local consequence. Theoretical Computer Science, 309:177–193, 2003.
M. Pauly. Bisimulation for general non-normal modal logic. Manuscript, 1999.
M. Pauly. Logic for Social Software. PhD thesis, University of Amsterdam, 2001.
M. R¨oßiger. Coalgebras and modal logic. In Horst Reichel, editor, Coalgebraic Methods in Computer Science (CMCS’00), volume 33 of Electronic Notes in Theoretical Computer Science, pages 299–320, 2000.
J. J. M. M. Rutten. Universal coalgebra: a theory of systems. Theoretical Computer Science, 249:3–80, 2000.
G. Sambin and V. Vaccaro. Topology and duality in modal logic. Annals of Pure and Applied Logic, 37:249–296, 1988.
Uwe Wolter. On corelations, cokernels, and coequations. In Horst Reichel, editor, Coalgebraic Methods in Computer Science (CMCS’00), volume 33 of ENTCS, 2000.
