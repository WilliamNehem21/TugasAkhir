	Electronic Notes in Theoretical Computer Science 176 (2007) 113–137	
www.elsevier.com/locate/entcs

Observational Equivalence for the Interaction Combinators and Internal Separation
Damiano Mazza1
Institut de Math´ematiques de Luminy (UMR 6206) Campus de Luminy, Case 907, 13288 Marseille Cedex 9, France

Abstract
We define an observational equivalence for Lafont’s interaction combinators, which we prove to be the least discriminating non-trivial congruence on total nets (nets admitting a deadlock-free normal form) respecting reduction. More interestingly, this equivalence enjoys an internal separation property similar to that of B¨ohm’s Theorem for the λ-calculus.
Keywords: Interaction nets, interaction combinators, observational equivalence, internal separation, B¨ohm’s Theorem.


Introduction
Lafont’s interaction combinators [7] are a graph-rewriting model of deterministic distributed computation. As in Turing machines, transitions are local, but they can be performed in parallel; the determinism comes from the fact that the resulting computation is unique up to permutation of rewriting steps. They can be seen as a generalization of multiplicative linear logic proof-nets [1], and in fact fit into the wider framework of interaction nets [6].
The original motivation behind the introduction of the interaction combinators was indeed the definition of a simple universal interaction net system, i.e., a system capable of simulating all other interaction net systems. The universality of the combinators, which automatically entails their Turing-completeness, together with their extreme simplicity and elegance, are in our opinion enough to justify the interest of studying this system as an autonomous computational model, ignoring its relationship to general interaction nets.
In this paper, we define a notion of observational equivalence for normal nets of combinators, which is interesting because it is maximal (Theorem 3.2) and because

1 Email: mazza@iml.univ-mrs.fr

1571-0661 © 2007 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2006.10.030

it can be characterized by means of a rewriting relation analogous to η-equivalence in the λ-calculus. In other words, we prove an internal separation result similar to B¨ohm’s Theorem (Theorem 4.1): given two non-βη-equivalent normal nets, there exists a context separating them.
It is important to observe however that “separating” does not have exactly the same sense as in B¨ohm’s classical result: in the λ-calculus, two distinct βη-normal forms can be separated by sending them to any pair of distinct terms (the typical choice being the projections λxy.x and λxy.y); in the interaction combinators, the uninformative behavior of the ε combinator forces it to be one of the separation values, as no context can extract any information from it. Therefore, we actually obtain something more akin to Hyland’s Theorem (sometimes referred to as “semi- separation”), which extends B¨ohm’s result to non-normal terms. This reveals a sharp difference between interaction combinators and the λ-calculus, as “full” sep- aration already fails for normal nets.
Non-normal (or rather non-normalizable) nets will not be addressed in this pa- per; indeed, even though considering nets with possibly infinite behavior is of clear interest, we prefer to keep this issue for further study.
The main motivation behind the present work is to provide a foundation for a semantical investigation of the interaction combinators. As a matter of fact, denota- tional semantics is usually required to model the interactive behavior of syntactical objects: the interpretation of two objects should coincide when they “behave in the same way”. Formalizing the idea of “behaving in the same way” is precisely what we are addressing here.

Related work. We must mention Maribel Ferna´ndez and Ian Mackie’s in-depth study on observational equivalence for interaction nets [3], in which one can find the η-like rules we give in Section 3. The other equivalence rules we consider were already found by Lafont through a semantical analysis. Nevertheless, no special property about these equivalences had previously been proved (like maximality or internal separation).

Acknowledgments. We would like to thank Michele Pagani for the many stimulating discussions about observational equivalence and internal separation in λ-calculi and related systems, which have inspired several parts of this work.

Interaction Combinators
Combinators, nets, interaction rules
The interaction combinators are the three following cells:


Each cell has a number of ports; γ and δ have three, ε has only one. The fundamental property of cells is that exactly one of their ports is principal (drawn at the bottom in the above graphical representation), the others being auxiliary.
Ports may be used to plug cells 2 together by means of wires to form nets, as in the following example:






Wires can have one or both of their extremities not connected to any cell, in which case the net has a free port, principal or auxiliary (or neither) depending on the nature of the port of the cell connected to the other extremity of the wire. The net above has for example 7 free ports, of which 1 is principal and 4 are auxiliary. The free ports of a net are referred to as its interface.
The above example shows that cyclic wires are also allowed. In case a net con- tains such cyclic wires, for technical reasons we shall consider that the configuration corresponds to a “virtual cell” with no auxiliary port and with its principal port connected to itself. The set of all ports of all cells contained in a net μ, with the addition of its free ports and its “virtual ports”, is denoted Ports(μ).
The distinction between principal and auxiliary ports comes into play when defining the dynamics of nets. As a matter of fact, when two cells are connected through their principal ports, they form an active pair, and they may be replaced by another subnet according to the following interaction rules: the annihilations



→	→	→


and the commutations



→	→

α ∈ {γ, δ}




2 Here, and all throughout the rest of the paper, we shall make systematic confusion between cells and
occurrences of cells.

When a net μ' is obtained from μ after the application of one of the above rules, we say that μ reduces in one step to μ', and we write μ → μ'. We can then define the reduction relation →∗ on nets of combinators as the reflexive-transitive closure of →. We write μ  β μ' iff there exists μ'' such that μ →∗ μ'' and μ' →∗ μ''.
Notice that interaction rules are purely local; if we add to this the fact that cells have exactly one principal port, we immediately obtain that → is confluent, which implies that the reduction process is also (strongly) confluent. This ensures that the computation is unique up to permutation of rules, and that β is an equivalence relation. We remark here a substantial difference with respect to reduction in the λ-calculus: if a net is normalizable, then it is strongly so.
A net may contain configurations which cannot be removed through interaction,
like

in which clearly no cell can interact first (there is a sort of deadlock). The cyclic wire already discussed above is another example, indeed the simplest, of such deadlocked configurations, which are are called vicious circles.
In order to properly define what a vicious circle is, we use the notion of straight path, inspired by the corresponding notion in linear logic proof-nets [2]. Straight paths will also be of fundamental importance in proving termination properties of nets.
Definition 2.1 (Port graph) The port graph of a net μ, denoted PG(μ), is the undirected graph whose vertices are the elements of Ports(μ), and such that, for x, y ∈ Ports(μ), there is an edge between x and y iff one of the following two mutually exclusive conditions holds:
x and y are connected by a wire in μ;
x and y are resp. principal and auxiliary ports of the same cell.
Definition 2.2 (Straight path) Let μ be a net. A path φ (not necessarily simple) of PG(μ) is straight iff:
(non-bouncing) if φ contains a sequence of the form xyx, then x and y are ports of the same cell, and they are connected by a wire in μ;
(non-twisting) φ does not contain any sequence of the form apb where p is the principal port of a binary cell and a /= b are the two auxiliary ports of the same cell.
The graph PG(μ) has been introduced for formal purposes only; in the sequel, we shall freely speak of a “straight path of μ” meaning “straight path of PG(μ)”.

Definition 2.3 (Vicious circle) A vicious circle is a cyclic straight path not containing two principal ports of two different cells in a row.
A net containing no active pair and no vicious circle is said to be cut-free. 3 A net admitting a cut-free form (necessarily unique by confluence) is said to be total.
Cut-free nets are the “true” normal forms of the reduction; they can be seen as the final result of a computation. On the other hand, non-total nets represent deadlocked or divergent computations.

Basic nets
Wirings. A net containing no cells but just wires will be called a wiring. We shall represent the generic wiring as


or


The following are examples of wirings:

We also allow the free ports of a wiring to belong to ε cells, in which case we speak of an ε-wiring and we use the notation σ˜ or ω˜. The following are examples of ε-wirings:

Notice that the wirings we denote with σ can be considered permutations; given one such wiring, we can then define σ−1 to be the unique wiring such that


=	=	... 




Trees. Trees are defined inductively as follows. A single wire is a tree with one leaf, denoted 1 (it is arbitrary which of the two extremities is the root and which is the leaf). If τ1 and τ2 are two trees with resp. n1 and n2 leaves, then we can define a tree τ with n1 + n2 leaves as

3 Reduced in Lafont’s terminology [7].





=



where α ∈ {γ, δ}. This tree is denoted α(τ1, τ2).
It is not hard to verify that any net μ with n free ports and k active pairs and/or vicious circles can be decomposed (although not uniquely) in terms of trees, wirings, and ε-wirings as follows:


=
... 


The wiring ω accounts for the active pairs and vicious circles of the net; therefore, a cut-free net ν with n free ports admits the following decomposition, which this time is unique:


=
... 

Any tree can be annihilated my means of another tree:

Definition 2.4 (Cotree) If τ is a tree, we define its cotree τ † by induction on τ :
1† = 1;
γ(τ1, τ2)† = γ(τ †,τ †);
2	1
δ(τ1, τ2)† = δ(τ †,τ †).
1	2

We remark in passing that the co-cotree of τ is τ itself.

Lemma 2.5 (Cotree) For any tree τ, the net obtained by plugging together τ and
τ † through their roots reduces to a wiring.

Proof. By induction on τ , using the annihilation rules for γ and δ cells.	 

If we call στ the wiring of Lemma 2.5, we can define a net τ ∗ which annihilates with τ in the simplest way:




=
→∗	... 




We shall say that any “tree plus permutation” τ ' annihilating with τ as above is an
anti-tree of τ . The net τ ∗ just defined is called the canonical anti-tree of τ .

Principal nets, packages, and tests. A principal net of arity n is either a single wire (in which case n = 1), or a cut-free net with n free auxiliary ports and 1 free principal port. If n = 0, we say that the net is a package. Principal nets can be seen as “compound” cells, and will be drawn just like ordinary cells.
Notice that trees are particular examples of principal nets. Other examples of principal nets are what we call n-tests. An n-test is a tree with n + m leaves such that m leaves are connected to principal ports of ε cells. Both m and n can be zero, but not at the same time (we have not defined trees with zero leaves). This means that trees with n leaves are special cases of n-tests. Of particular interest to us will be 0-tests, 1-tests, and 2-tests, which will be called resp. ε-packages, ﬁliform trees, and simply tests.

Termination
In this section we give a sufficient condition for a net to be total, formulated in terms of straight paths (Definition 2.2).
Definition 2.6 (Maximal path) A maximal path in a net μ is a straight path ending into a free port of μ or into the principal port of an ε cell of μ.
In the following, if μ is a net and α a cell of μ, we say that a straight path φ starts from α if φ = pxφ', where p is the principal port of α, and x is not an auxiliary port of α.
Definition 2.7 (Well-founded net) A net μ is well-founded iff for each cell α of
μ, there is a finite non-null number of maximal paths starting from α.
Basically, the definition above assures that in a well-founded net there are no infinite straight paths.
Lemma 2.8 (Stability of well-foundedness under reduction) Let μ be a net such that μ → μ'. If μ is well-founded, then so is μ'.
Proof. By simple inspection of the reduction rules.	 
Proposition 2.9 If a net is well-founded, then it is total.
Proof. Let μ be a well-founded net. First of all observe that if μ contains a vicious circle, then by definition there is a cell of μ (maybe a “virtual cell”, in the case

of a cyclic wire) admitting no maximal path starting from it. Therefore, the well- foundedness of μ implies the absence of vicious circles in μ, and by Lemma 2.8 also in any reduct of μ.
We need only show then that the reduction of μ terminates. For this, let μ0 be a generic well-founded net, and let α be a cell of μ0. We define the weight of α, denoted (α), as the sum of the lengths of all maximal paths starting from α and crossing at least one active pair, i.e., containing a sequence pq where p and q are the principal ports of two cells of μ0. By definition of well-founded net, this is a non-negative integer. Then, we define the weight of μ0, still denoted (μ0), as
 (μ0)= Σ (α),

where the sum is taken over all cells of μ0; this too is clearly a non-negative integer.
We now prove termination by induction on (μ):
	(μ) = 0. This is equivalent to saying that μ contains no active pair. In fact, the presence of an active pair immediately yields two cells α, α' such that (α), (α') > 0; for the converse, by definition the absence of active pairs implies (α)= 0 for all α.
	(μ) > 0. By the previous remark, μ contains an active pair. We reduce it, ob- taining μ', and we show that (μ') < (μ) (remember that, thanks to Lemma 2.8, the weight of μ' is defined). Then we apply the induction hypothesis: since μ' is a reduct of μ, if μ' is total then so is μ.
Proving that the weight strictly decreases is done by a case-by-case analysis of the six reduction rules. The only interesting case is that of the γδ rule, since in all other cases the number of cells strictly decreases, and the paths involved in the rules are shortened.
So let α be one of the two cells involved in a γδ active pair. The rule being perfectly symmetrical, we can consider only α and one its two copies after the application of the rule, which we call α1 and α2. To make the situation even more symmetrical, it does not harm to assume that both cells involved in the active pair have weight (α), so that (μ)= m +2 · (α) and (μ')= m' +2 · (α1)+2 · (α2), where m and m' are suitable integers.
First of all, observe that for each straight path φ “passing through” the active pair in μ, there is a straight path φ' of the same length in μ', and vice versa. This means that m' = m.
Now, any maximal path starting from α must pass through one of the two auxiliary ports of the cell that α is interacting with. This means that the set of maximal paths starting from α can be partitioned into two. Moreover, in any case a maximal path starting from α has length at least 2. Therefore,  (α) = 
Σ(w1 + 2) + Σ(w2 + 2), where the wj are suitable non-negative integers, and the
sums are taken over the paths in each element of the partition.
If we turn to α1, we see that all maximal paths starting from it “come from” the maximal paths starting from α of one of the two components of the partition considered above. The same holds for α2, so we can write, for j ∈ {1, 2}, that

 (αj )= Σ wj.
Now clearly Σ w1 + Σ w2 < Σ(w1 + 2)+ Σ(w2 + 2), so we are done.
i	i	i	i


We observe that well-foundedness is not a necessary condition for a net to be total. To see why, it is enough to consider the net

This net is not well-founded, since there is an infinite number of maximal paths starting from both of the cells it contains. And yet, the net is total, because it reduces in one step to a wire. This shows in particular that well-foundedness is not stable under anti-reduction.
The reader acquainted to the Geometry of Interaction (GoI) may see that well- foundedness is indeed a stronger version of nilpotency [4,7]. In the GoI semantics, fewer straight paths are taken into consideration, namely those that have a non-null weight in the dynamic algebra, or regular paths in Danos-Regnier terminology. It is possible to show that well-foundedness formulated in terms of maximal regular paths, i.e., finiteness of regular paths, becomes also a necessary condition for a net to be total, and thus nilpotency characterizes total nets.
Although weaker, Proposition 2.9 is however enough for our present purposes; in fact, it suffices to prove the following result, which will be constantly (and often silently) used in the rest of the paper.

Lemma 2.10 Let ν be a reduced net with k > 0 free ports, and let θ1,... , θk be
ni-tests (with i ∈ {1,... , k}). Then, the net

is total.

Proof. It is not hard to check that the above net is well-founded, therefore total by Proposition 2.9.	 

In particular, Lemma 2.10 shows that the net obtained by plugging any two trees by their roots is total.

Observational equivalence
The system of interaction combinators can be seen as an abstract programming language, in which total nets are deadlock-free and terminating programs/data. As such, it may be of interest to define on it a notion of observational equivalence. In this paper, we shall restrict our attention to total nets with one free port, although everything we shall say can be generalized to total nets with arbitrary interfaces. Therefore, unless otherwise stated, in the sequel “net” will mean “net with one free port”.
Let μ be a total net, and θ a test. If we plug the free port of μ to the principal free port of θ, we obtain a net with two free ports, which we call θ[μ]. Notice that, by Lemma 2.10, θ[μ] is always total.
In the following, if μ has n free ports, the notation μ⇑ means that μ reduces to a net consisting of n ε-packages.
Definition 3.1 (Observational equivalence) Let μ, μ' be two total nets. We say that μ is observationally equivalent to μ', notation μ  μ', iff for any test θ, θ[μ]⇑ iff θ[μ']⇑.
Theorem 3.2 (Maximality)  is the greatest non-trivial congruence on total nets containing  β, i.e., if ≈ is a congruence on total nets such that  β ⊆ ≈, then either ≈ ⊆  , or μ ≈ μ' for all μ, μ'.
The above proposition can be proved independently of what we shall do in the sequel, but the proof is rather tedious, so we prefer to state it as a corollary of Theorem 4.1, Section 4. As a matter of fact, we shall prove that  can actually be defined in a much more concrete way, indeed as an equivalence relation generated by β plus the following equalities:





 η	 η	 η


α ∈ {γ, δ}










 η



The top-right and bottom equations, which we call resp. γε (or δε) and γδ equations, were already considered by Lafont [7]; in particular, the γε and δε equations state the η-equivalence of all ε-packages to the ε combinator. On the other hand, the

top-left equations, which we refer to as γγ and δδ equations, can be found in the work of Fern´andez and Mackie as part of a larger study on operational equivalence for interaction nets [3].
Definition 3.3 (βη-equivalence)  Two nets μ, μ' are η-equivalent,  notation μ η μ', iff they can be rewritten one into the other by means of the above equal- ities. We write  βη for the transitive closure of  β ∪  η, and if μ  βη μ', we say that μ and μ' are βη-equivalent.
We point out that there is no reasonable orientation for the equations defining η-equivalence, so there are no canonical representatives for the equivalence classes of  βη on total nets (as opposed to βη-normal forms in the λ-calculus).
As to the relationship between observational equivalence and βη-equivalence, we start by proving the following:
Proposition 3.4 Let μ, μ' be total nets. Then, μ  βη μ' implies μ  μ'.
In fact, as shown by Fern´andez and Mackie [3], the configurations related by the equations defining η are operationally equivalent, i.e., no cell interacting with the configurations will ever be able to distinguish between the two. We shall analyze the case of the γδ equation, leaving the other cases to the reader.
Consider the two trees (plus wiring) of the γδ equation. The only way a cell can interact with these two nets is through their principal port, i.e., the root of the tree. If it is an ε cell, it is easy to see that after three rewriting steps both nets reduce to four ε cells; if it is a γ cell, we have







 ∗

The interaction with a δ cell is similar, so in all cases the two configurations of the

γδ equation behave in the same way, and there is no hope to distinguish them.
More generally, it is possible to prove the following:
Lemma 3.5 Let μ1, μ2 be two η-equivalent nets such that μ1 → μ' . Then, there
exist two nets μ'', μ' such that μ' →∗ μ'', μ2 →∗ μ' , and μ''  η μ' .
1	2	1	1	2	1	2
So let μ, μ' be two total nets of resp. cut-free form ν, ν', such that μ βη μ'. By definition, ν  βη ν', but since ν, ν' contain no active pair, we actually have ν  η ν'. Now let θ be a test, and suppose that θ[μ] ⇑. Clearly we also have θ[ν] ⇑. But θ[μ'] →∗ θ[ν']  η θ[ν], so applying Lemma 3.5, we have that there exists a cut-free net ν'' such that θ[μ'] →∗ ν'', and ν'' is η-equivalent to two ε-packages. It is not hard to see that a package is η-equivalent to an ε-package iff it is itself an ε-package, so θ[μ']⇑. Iterating the argument for the symmetrical case yields μ  μ', as required by Proposition 3.4.
Some lemmas about eta equivalence
We prove here a few results concerning or making use of η-equivalence, which will be used in the proof of the Separation Theorem 4.1. The reader may safely skip this section and come back to it when these lemmas are invoked in Section 4.
Lemma 3.6 Anti-trees are unique up to η-equivalence, i.e., if τ ' is an anti-tree of
τ, then τ '  η τ ∗.
Proof. We shall prove the following implication:
... 


→∗


... 
=⇒
 η


... 

where σ is a generic wiring. The statement of the lemma is obviously a special case of it.
We reason by induction on τ . If τ = 1, the result is obvious. Let then τ =
δ(τ1, τ2). The key observation is that




=




where τγ is the maximal subtree of τ ' containing no δ cell. In fact, all leaves of τγ must be connected to a δ cell; if it were otherwise, a leaf of τγ would be free, so that τ and τ ' would not reduce to a wiring. Hence we have










→∗





Now, if we put, for i ∈ {1, 2},

=

and if we absorb σ' and the other wirings into a wiring called σ'', we obtain



→∗	→∗



... 
=

... 

where σ1 and σ2 must be wirings because by hypothesis σ is a wiring. Now we can apply the induction hypothesis as follows:



 η

... 
for i ∈ {1, 2}. We shall not do it explicitly here, but using the γδ equation, it is possible to prove by induction on τγ that





=	 η




from which we obtain






 η	 η	=



Now the reader can check that, since τ = δ(τ1, τ2), we have


=

which proves what we wanted (see the definition of canonical anti-tree, Section 2.2). A similar argument can be given for the case τ = γ(τ1, τ2); the details are left to the reader.	 
Lemma 3.7 (Wire characterization) Let ν be a cut-free net with two free ports. Then, ν is η-equivalent to a wire iff it has the following shape:

where τ ' is an anti-tree of τ.
Proof. The “only if” part is proved by induction on the number of η-equations applied to “expand” the wire. The cases of the equations γγ and δδ are easy; for the case of the γδ equation, an argument similar to that given in the discussion of Proposition 3.4 is used (notice that no equation involving ε can ever be applied). For what concerns the “if” part, by Lemma 3.6 we have τ '  η τ ∗. It is then not hard to prove that




 η	



by induction on τ . The details are left to the reader.	 
Consider now the principal nets γ1, γ2, δ1, δ2 defined as follows:


=	=

where α ∈ {γ, δ}. These nets can be seen as cells behaving according to the following interaction rules:


if i /= j
if i = j



→	→
if i = j	if i /= j






→



Now, if φ is a filiform tree, using the two equations of η-equivalence concerning the
ε combinator, one can see that, for some n, we have

φ  η	.

where αj ∈ {γ, δ} and ij ∈ {1, 2}. For this reason, we shall identify filiform trees
with finite words over the alphabet {γ1, γ2, δ1, δ2}; the example above corresponds to the word α1 ··· αn . We can thus show the following:
i1	in



Lemma 3.8 Let φ be a ﬁliform tree such that
i

φ =

where we have numbered the leaves of τ from 1 to n and we have supposed that the only one not connected to an ε cell is the ith one. Let now φ' be another ﬁliform tree, and call μ the net obtained by plugging φ and φ' together by means of their roots. Then
μ reduces to a wire iff

j


φ′  η

where j = n − i + 1;
if μ does not reduce to a wire, then its cut-free form contains ε cells.
Proof. We start by proving part (ii).  Considering that any filiform tree is η-equivalent to a sequence of cells interacting as described above, the reader will easily convince him/herself that the cut-free form of μ must be η-equivalent to one of the following nets:

or

where φ1, φ2 are themselves filiform trees (Lemma 3.5 is used here). In any case, if one of φ1, φ2 is different from 1 (i.e., the cut-free form of μ is not a single wire), then the cut-free form of μ contains ε cells, because the presence/absence of ε cells is preserved under η-equivalence.
Let us turn to part (i). The “if” direction is a direct consequence of the property defining anti-trees (see Section 2.2). For the converse, suppose that μ reduces to
a wire. By the above remark, we know that φ  η φ0 = α1 ··· αm and φ'  η φ' =

α' ··· α' ' , where the αk and α'
are elements of {γ1, γ2, δ1, δ2}. Call μ0 the net

1	m	k
obtained by plugging φ0 and φ' together by means of their roots. Clearly μ0  η μ;
hence, by Lemma 3.5, μ0 reduces to a net ω0 which is η-equivalent to a wire. It is enough to inspect the interaction rules introduced in Section 3.1 for the γi and δi nets to see that the “filiform structure” is preserved under reduction, i.e., no reduct of μ0 has more than two auxiliary ports connected together by a wire. But then, by Lemma 3.7, ω0 must be a single wire as well.
Now, since cells annihilate in pairs, if μ0 reduces to a wire we must have m' = m; additionally, for each αk = γ1 (resp. αk = γ2), there must be exactly one α' = γ2 (resp. α' = γ1), and for each αk = δ1 (resp. αk = δ2), there must be exactly one
α' = δ1 (resp. α' = δ2), and no γ1 must “meet” a γ1, or a γ2 “meet” a γ2, etc. In
l	l
other words, we must have φ'  η α∗ ··· α∗ , where we put γ∗ = γ2, γ∗ = γ1, δ∗ = δ1,
0	1	m	1	2	1
and δ∗ = δ2. It is not hard to see that this corresponds to the canonical antitree of
τ .	 

Internal separation
In what follows, we write E for the net with two free ports consisting of two ε
combinators, and W for the net consisting of a single wire.
Theorem 4.1 (Separation) Let μ, μ' be two total nets such that μ / βη μ'. Then, there exists a test θ such that θ[μ] →∗ E and θ[μ'] →∗ W , or vice versa.

Combined with Proposition 3.4, the above result proves in particular that, on total nets, βη coincides with . It also gives us a quick argument to prove Theo- rem 3.2. In fact, if ≈ is a congruence such that β ⊆ ≈, and if μ ≈ μ' for two total nets such that μ / μ', by Proposition 3.4 and by Theorem 4.1 we have a test θ such that, for example, θ[μ] →∗ E and θ[μ'] →∗ W . Now put

θπ =


where π is any package. It is not hard to verify that plugging μ into the free principal port of θπ yields a net which reduces to ε (i.e., the ε combinator), while doing the same with μ' yields a net reducing to π. But ≈ is a congruence and is preserved through reduction, so μ ≈ μ' implies ε ≈ π, for all π. By transitivity of ≈, and by its stability under reduction, we conclude that it must identify all total nets.
The rest of the section is devoted to the proof of Theorem 4.1. A few intermediate results are needed, which we go through in the sequel.



Main lemmas
In the following, if ν is a net with two free ports, we use the notation (φ1, φ2)[ν] to denote the result of plugging the roots of two filiform trees φ1, φ2 into the free ports of ν.

Lemma 4.2 (Wire separation) Let ν be a cut-free net with two free ports, such that ν / η W . Then, there exist two ﬁliform trees φ1, φ2 such that (φ1, φ2)[W ]= W and (φ1, φ2)[ν]= E, or (φ1, φ2)[W ]= E and (φ1, φ2)[ν]= W .

Proof. Since ν / η W , by Lemma 3.7 we have three possibilities:
ν contains at least one ε cell. In this case, we will show how to send ν to E, and
W to itself. First of all, we can assume w.l.o.g. that ν has the following shape:


ν =

where ν0 is a reduced net. Now, consider an anti-tree τ ∗ with ε cells plugged on every leaf except the one corresponding to the ε cell present in ν. What we obtain is a filiform tree, and the same happens if we repeat the construction on τ . We then have








→∗	→∗	→∗




for a suitable reduced net ν1 and package π. Notice that, on the other hand, when the same two filiform trees are plugged to the two extremities of the wire ν', they annihilate and we obtain again a wire.
If π = ε, we are done; otherwise, w.l.o.g. π can be assumed to be of the form


π =

where ω0 is W if π is not an ε-package, or E otherwise. Hence, we can consider two more filiform trees as in the following net, the reduction of which gives






→∗




regardless of the nature of ω0. When plugged together through a wire, these two new filiform trees yield once again a wire. We have thus realized our goal by using a context consisting of two trees which are in turn compositions of two filiform trees, and are therefore themselves filiform.
ν contains no ε cell, and there is a maximal path starting from one of the free ports of ν and ending into the same free port; in this case too we show how to send ν to E and W to itself. W.l.o.g., we can assume


ν =

for a suitable reduced net ν0. Then, we consider two filiform trees which yield (for some package π) the following reduction:







→∗




Now we are back to a situation already met in the first case, which we know how to handle.
ν contains no ε cell, and all maximal paths starting from a free port lead to the other. This time we show how to send ν to W and W to E. The situation is the following:





ν =


Suppose first that τ2 and σ2 form an anti-tree τ '
of τ1; by Lemma 3.6, it does

not harm to suppose that τ ' = τ ∗. Then, by Lemma 3.7 and by our assumption
1	1
that ν / η W , σ1 must contain a crossing of wires, so that there exists a leaf of τ1
and a leaf of τ ∗ which are not “symmetrical” but are connected by a wire. More precisely, if we number the leaves of τ1 and τ ∗ from 1 to n, there is a connection between a leaf i of τ1 and a leaf j of τ ∗ such that j /= n — i + 1. Then, we can extract this connection using two filiform trees as follows:







→∗	










By Lemma 3.8, when the same two filiform trees interact with each other through W , they yield a net containing ε cells. But then we can stop here, since we are back to our first case.
In case τ2 and σ2 do not form an antitree of τ1 (and τ1 and σ1 do not form an anti-tree of τ2), the situation is simpler; we can assume w.l.o.g. that there is a wire linking the “rightmost” leaf of τ1 to the “leftmost” leaf of τ2, which can be extracted using two filiform trees as follows:


→∗	







Now by Lemma 3.6 τ ∗ and τ ∗ are certainly not anti-trees of each other, so by
1	2
Lemma 3.8 their interaction through W produces a net which always contains at
least an ε cell, just as before.

Lemma 4.3 (Equivalence lemma) Let π be a package. Then, for any tree τ
with n leaves, there exists a cut-free net ν with n free ports such that



π  βη



Proof. Applying in the order Lemmas 3.7 and 2.10, we have




π  η	→∗




for a suitable cut-free net ν.	 


Proof of the Separation Theorem
First of all, if μ is a total net with one free port and π its cut-free form, by confluence we have that for any test θ, θ[μ] and θ[π] have the same cut-free form, therefore it is enough to prove our result for packages.
So let π, π' be two packages such that π / η π'. Suppose that


π =

By the Equivalence Lemma 4.3, there exists a cut-free net ν such that





π′  βη

so it does not harm to assume that π and π' “end” with the same tree.
Now, at least one of the following two situations must apply:
there exists a leaf of τ which is connected to an ε combinator of ω, but is connected to something not η-equivalent to ε in ν;
there exist two leaves of τ which are connected by a wire of ω, whereas in ν the same two leaves are either not connected, or their connection is not η-equivalent to a wire.
As a matter of fact, if neither (a) nor (b) applied, we would have proved that
π  η π', against our hypothesis.
Suppose that situation (a) applies, and suppose w.l.o.g. that the leaf in question is the “leftmost” one, i.e., we have


π =


By hypothesis, the “leftmost” free port of ν, let us call it x, is connected to some- thing not η-equivalent to ε; this means that if we “go up” the tree rooted at x in ν, let us call it τ0, we must find a leaf of τ0 connected by a wire to some other tree of ν. It may happen that all connections are within τ0 itself, i.e., we have


=
... 
... 
(for graphical convenience, we have assumed w.l.o.g. that there is a direct connection between the “leftmost” two leaves of τ0). Under such assumptions, one can verify that the test



θ =



is such that θ[π'] →∗ W , whereas θ[π] →∗ E. Suppose instead that τ0 is connected to some other tree of ν, and suppose w.l.o.g. that this tree is the one immediately “to the right” of τ0, let us call it τ1:



=

... 
(again, in the picture we have made a convenient assumption about the connection between τ0 and τ1, without affecting the generality of our argument). In this case, one may check that the test




θ =


is such that θ[π'] →∗ W and θ[π] →∗ E.
Let us now consider situation (b), i.e., π has a direct connection for τ which π' is missing. Then, we can use an anti-tree τ ∗ and isolate the two leaves involved in the connection:






→∗	→∗




(as usual, for graphical purposes we have supposed w.l.o.g. that the two leaves in question are the “leftmost” ones). It is not too hard to show that, under the hypotheses we have, ν0 cannot be η-equivalent to a wire. In fact, there are two cases, depending on the shape of ν. The trivial case is when


=
... 

in which ν0 / η W by hypothesis. The other case is that in which the two trees “above” the two “leftmost” free ports of ν are connected to the rest of the net, i.e., we have

=


and in ω1 there at least one wire connecting a leaf of τ1 or τ2 to a leaf of one of the
τi, for i ≥ 3. In this case, we have







→∗




in which, thanks to the supposed connection, we see that there is at least one leaf of τ1 or τ2 connected to an ε cell. But this means that ν0 contains at least one ε cell, which by Lemma 3.7 entails ν0 / η W .
Hence, the Wire Separation Lemma 4.2 applies, giving us two filiform trees φ1 and φ2 which are able to distinguish between the wire and ν0. Therefore, if we define



θ =

we have θ[π] →∗ E and θ[π'] →∗ W , or viceversa, which completes the proof.
Notice that the canonical anti-tree of τ contains γ or δ cells only if τ does; since the filiform trees of Lemma 4.2 are also built out of canonical anti-trees, we get the following for free:
Theorem 4.4 (Internal separation for fragments) Theorem 4.1 holds also for the fragments γε and δε of the interaction combinators.

Concluding remarks
Alternative formulation of observational equivalence
If μ is a total net, instead of plugging a test into its free port, we can use a package π. We thus obtain a net with an empty interface, which is either total (in which case the only possibility is that it reduces to the empty net), or not. In the first case, we write  μ | π  = V, in the second  μ | π  = Ω.
Consider now the following alternative definition of observational equivalence:
Definition 5.1 Let μ, μ' be two total nets. We write μ  ◦ μ' iff, for any package
π,  μ | π   =  μ' | π  .
It is immediate that  ◦ ⊆  βη. To see this, suppose μ / βη μ'. By Theorem 4.1, we have a test θ such that, for example, θ[μ] →∗ E and θ[μ'] →∗ W . Then, by connecting the two free auxiliary ports of θ with a wire, we clearly obtain a package π such that  μ | π  = V while  μ' | π  = Ω. Moreover, by a similar argument to that given for Proposition 3.4, we can prove that, on total nets,  βη ⊆  ◦.

Therefore  ,  ◦, and  βη coincide on total nets.
This alternative formulation of observational equivalence is much more elegant and flexible than that of Definition 3.1; for example, it can be extendend straight- forwardly to all nets, with arbitrary interfaces and without hypothesis of being total (if a net μ, total or not, has n free ports, we can consider its “closures” by means of n packages π1,... , πn; then if μ, μ' have both n free ports, we say μ  ◦ μ' iff, for all π1,... , πn,  μ | π1,... , πn  =  μ' | π1,... , πn  , with the obvious extension of the notations introduced above). It is also reminiscent of the definition of observational equivalence in Girard’s ludics [5]. However, there is something fishy about it, because it is based on the fundamental assumption that the empty net is different from all other nets with an empty interface. Interactively speaking, this is far from being clear: all nets without interface cannot interact, and would thus seem indistinguishable.
Internal separation and topology
Following Girard [5], we can give a topological interpretation to the Separation Theorem 4.1. Call Π the quotient of the set of packages under βη. For, π, π' ∈ Π, define π ≤ π' iff, for all ρ ∈ Π,  π | ρ  = V implies  π' | ρ  = V. The set Π can be endowed with the Alexandrov topology associated to ≤: a set O ⊆ Π is Alexandrov open iff it is upper-closed, i.e., if π ∈ O and π ≤ π', then π' ∈ O.
The Separation Theorem states that the Alexandrov topology on Π is T0. To see why, consider the following. Given X ⊆ Π, define
∼X = {π' ∈ Π | ∀π ∈ X,  π | π'  = V} .
It is not hard to convince oneself that all sets of the form ∼X are Alexandrov open. Now take any two distinct π, π' in Π. This means that π / βη π'; Theorem 4.1 then gives us a package ρ such that ∼{ρ} is a neighborhood of π not containing π', or vice versa.
In some cases, the or vice versa can be replaced by an and vice versa, (see Section 5.3 below), which means that there exist pairs of packages which are T1-separable. Nevertheless, there is no hope to achieve T2 (Hausdorff) separation for the Alexandrov topology: for all π, π ≤ ε, so the package ε belongs to all open sets, and the intersection of two neighborhoods can never be empty. It is interesting to remark in this respect the similarity between the ε combinator and the daimon of ludics.
On the strength of separation
We have already remarked in the introduction that the separation achieved by Theorem 4.1 is in some sense “weaker” than that of B¨ohm’s Theorem, because of its asymmetry: the or vice versa in the statement of the theorem is necessary, and cannot be controlled, i.e., there are pair of nets that “force” a certain separation, refusing the symmetrical one (think of the ε package paired with any other non-βη- equivalent package).

In spite of this, there are nets that can be separated in a “stronger” way. For example, if we call γ (resp. δ) the package consisting of a single γ (resp. δ) cell with its auxiliary ports connected by a wire, there exist total nets μ, μ' such that, by plugging a principal net of arity 1 to their free ports, after reduction one obtains in one case γ, in the other case δ. It is not hard to see that there exists a principal net of arity 1 which can interactively “exchange” γ and δ; therefore, this kind of separation is symmetrical.
There are also “intermediate” situations, in which, although Theorem 4.1 holds with an and vice versa, there is no principal net of arity 1 achieving “strong” sepa- ration, i.e., sending one net to γ and the other to δ.

References
Danos, V. and L. Regnier, The structure of multiplicatives, Archive for Mathematical Logic 28 (1989),
pp. 181–203.
Danos, V. and L. Regnier, Proof nets and the Hilbert space, in: J.-Y. Girard, Y. Lafont and L. Regnier, editors, Advances in Linear Logic (1995), pp. 307–328.
Fern´andez, M. and I. Mackie, Operational equivalence for interaction nets, Theoretical Computer Science
297 (2003), pp. 157–181.
Girard, J.-Y., Geometry of interaction I: interpretation of System F, in: Proceedings of the Logic Colloquium ’88 (1989), pp. 221–260.
Girard, J.-Y., Locus solum, Mathematical Structures in Computer Science 11 (2001), pp. 301–506.
Lafont, Y., Interaction nets, in: Conference Record of POPL’90, ACM SIGACT and SIGPLAN (1990),
pp. 95–108.
Lafont, Y., Interaction combinators, Information and Computation 137 (1997), pp. 69–101.
