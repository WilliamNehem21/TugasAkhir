Available online at www.sciencedirect.com


Electronic Notes in Theoretical Computer Science 301 (2014) 49–59
www.elsevier.com/locate/entcs

A Note on Finitely Derived Information Systems
Lankun Guo 1,2
College of Information Science and Engineering Hunan University
Changsha, P.R. China

Qingguo Li3
College of Mathematics and Econometrics Hunan University
Changsha, P.R. China

Petko Valtchev, Robert Godin
D´epartement d’Informatique Universit´e du Qu´ebec a` Montr´eal Montr´eal, Canada


Abstract
The notion of information system initially introduced by Scott provides an efficient approach to represent various kinds of domains. In this note, a new type of information systems named finitely derived information systems is introduced. For this notion, the requirement for the consistency predicate used in Scott’s infor- mation systems is simplified, and the reflexive and transitive rules for the entailment relation are preserved while the finitely derived rule is introduced. A comprehensive investigation is made on the interrelation between finitely derived information systems and algebraic domains. It turns out that their corresponding categories are equivalent, which indicates that the proposed notion of finitely derived information system provides a concrete approach to representing algebraic domains.
Keywords: Finitely derived information system; Algebraic domain; Equivalence of categories



1 This work is supported by the National Natural Science Foundation of China (No. 11071061), the National Basic Research Program of China (No. 2011CB311808), Research Fund for the Doctoral Program of Higher Education of China (No. 20120161110017), China Postdoctoral Science Foundation (No. 2012M521515) and the Planned Science and Technology Project of Hunan Province of China (No. 2012RS4052).
2 Email: lankun.guo@gmail.com
3 Email: liqingguoli@aliyun.com

http://dx.doi.org/10.1016/j.entcs.2014.01.005
1571-0661 © 2014 Elsevier B.V. Open access under CC BY-NC-ND license.

Introduction
In Domain theory, an interesting topic is to represent various kinds of domain cat- egories by other relatively concrete structures [2]. It can be traced back to the notions of information system and approximable mapping which were initially de- veloped by Scott [7]. Then Larsen and Winskel [5] proved that the category of Scott’s informations systems is exactly equivalent to that of Scott Domains (i.e., bounded-complete algebraic domains) with Scott continuous functions being mor- phisms. Afterwards, Hoofman [3] generalized Scott’s information systems to the continuous case and obtained the representation of bounded-complete continuous domains. Recently, Spreen et al. [8] proposed a generalized version of continuous information systems which realizes the representation of continuous domains. In addition, other variations of information systems have been introduced in order to characterize various other kinds of domains [9,10,11].
Theoretically, in Scott’s original work, an information system is a triple (A, Con, ▶) where A is a set, Con is a set of subsets of A and ▶ is a binary re- lation between Con and A. As advised by Scott, A can be understood as a set of data objects, Con as consistent combinations of data objects and ▶ as an entailment relation which records the dependencies between consistent combinations of data objects and individual ones. As for Con, the following axioms are required: (a) it must be closed under subsets; (b) it contains all singletons; and (c) adjunction of an entailed object to a consistent combination preserves consistency. The entailment
▶ is required to be reflexive and transitive, that is, (i) for any X ∈ Con, if a ∈ X, then X ▶ a (reflexivity); (ii) for any X, Y ∈ Con and a ∈ A, if X ▶ Y ▶ a, then X ▶ a (transitivity).
If we consider A as a set of items (for instance, product items in the super- market domain), then Scott’s information systems may provide a mathematical infrastructure for association rule mining in which Con represents the antecedents of transactions over A and ▶ represents the atomic association rules which indicates the consequents of these antecedents. Nonetheless, we have to be vigilant on the axioms of Scott’s information systems in that some of them may be too restrict from the practical viewpoint and, on the other hand, new axioms may be required to reflect some exclusive features of association rules. For instance, the restrictions that Con is closed under subsets and it contains all singletons are obviously unrea- sonable from the viewpoint of association rule mining. Moreover, we consider that the reflexive and transitive rules for ▶ are necessary to our consideration, but they are not sufficient to appropriately reflect some features of association rule systems. Therefore, we need to adapt Scott’s information systems in order to provide a more rational model for association rule mining.
In [4], we proposed the notion of F-context where F is a finite-subsets-family structure on the attribute set of a formal context. We discussed the implication rule systems induced from consistent F-contexts. The results demonstrate that the concept hierarchy of a consistent F-context is just in correspondence with a special kind of subset family inherent in the induced implication rules system. Based on this result, we introduced the notion of formal implication rule system which

can be viewed as the axiomatization of the induced implication rule systems of consistent F-contexts. By regarding the notion of consistent F-context as a bridge, we demonstrated that the notion of formal implication rule system provides an approach to reconstructing algebraic domains.
The present note is based on [4]. First we rename the formal implication rule systems by finitely derived information systems (see Definition 3.1) in order to be consistent with the notions in Domain theory. Obviously, this type of information systems is still in Scott-style. However, comparing with Scott’s information systems, our proposed notion has the following features: (i) Con is still a set of finite subsets of A but the requirements used in Scott’s information systems are abandoned; (ii) the reflexive and transitive rules for ▶ are preserved but a new rule named finitely derived rule is introduced (Note: This is why the name ”finitely derived information system” is chosen in this paper). Moreover, with the help of the notion of approx- imable mapping, we settle finitely derived information systems into a category. It turns out that this category is exactly equivalent to that of algebraic domains.
The rest of this paper is structured as follows: In Section 2, we recall the neces- sary definitions and results about equivalence of categories and algebraic domains. In Section 3, we introduce the notions of finitely derived information systems and approximable mappings which compose of a category. In Section 4, we study the order-theoretic properties of the family of information states with respect to set in- clusion. It is shown that every poset generated in this way is an algebraic domain. We also discuss the one-to-one correspondence between approximable mappings and Scott continuous functions. In Section 5, we prove the equivalence between the cat- egory of finitely derived information systems and that of algebraic domains. In Section 6, we reach the conclusion.

Preliminaries
Equivalence of categories
We first recall the notion of the equivalence of categories. For more basic notions in Category Theory, we recommend the reader the book [6].
Definition 2.1 Let C and D be categories. A functor F : C → D is a pair of functions Fo : Co → Do and Fa : Ca → Da which satisfy:
(F1) if f : A → B is a morphism in C, then Fa(f ): Fo(A) → Fo(B) is a morphism in D;
(F2) for any object A of C, Fa(idA)= idFo(A);
(F3) if g ◦ f is defined in C, then Fa(g) ◦ Fa(f ) is defined in D and Fa(g ◦ f ) = 
Fa(g) ◦ Fa(f ).
The notion of equivalence of categories is used to demonstrate strong similari- ties or essential identicalness between mathematical structures which may appear unrelated at a superficial or intuitive level.

Definition 2.2 A functor F : C → D is called an equivalence of categories if there are
(E1) a functor G : D → C;
(E2) a family of isomorphisms {μC : C → Go(Fo(C)) | C ∈ Co} with the property that for every morphism f : C → Cj of C, Ga(Fa(f )) ◦ μC = μC′ ◦ f ;
(E3) a family of isomorphisms {νD : D → Fo(Go(D)) | D ∈ Do} with the property that for every morphism g : D → Dj of D, Fa(Ga(g)) ◦ νD = νD′ ◦ g.
If F : C → D is an equivalence of categories, the associated functor G is usually called a pseudo-inverse of F. In this case, C and D are said to be categorically equivalent.
Algebraic lattices and algebraic domains
We recommend the book [1] for the basic notions in Lattice Theory. In the sequel, we recall some notions about algebraic domains. Most of them are collected from [2].
Let (L, ≤) be a poset. A subset A ⊆ L is said to be join-dense in L if any element of L is the join of a subset of A. A non-empty subset D ⊆ L is said to be directed if for any elements x, y ∈ D, there exists z ∈ D such that x ≤ z and y ≤ z.
If every directed subset D ⊆ L has the least upper bound WD, then L is called a
dcpo. For any x, y ∈ L, x is said to be way below y, written as x  y, if for every directed set D ⊆ L for which WD exists, y ≤ WD always implies the existence of
some d ∈ D such that x ≤ d. If an element x ∈ L satisfies x  x, then it is said
to be compact in (L, ≤). Throughout this paper, we always use K(L) to denote the set of all compact elements of L. For any x ∈ L, the notation ⇓x is used to denote the set ↓ x ∩ K(L), i.e., the compact elements less than or equal to x. A subset B ⊆ L is called a basis of L if for every x ∈ L, the subset ↓x ∩ B is directed and
x = W(↓ x∩ B). A dcpo (L, ≤) is called an algebraic domain if K(L) isa basis of L.
Definition 2.3 Let (L1, ≤1) and (L2, ≤2) be dcpo’s. A map ϕ : L1 → L2 is said to be Scott continuous if it preserves the least upper bounds of directed subsets, i.e.,
if D ⊆ L1 is directed, then ϕ(WD)= Wϕ(D).
Throughout this paper, we always use the notation ⊆f to describe the finite subset relation between sets. Whenever both A and B are families of subsets of sets, by saying that a map ϕ : A → B is Scott continuous we always mean that ϕ is Scott continuous with respect to the order of set inclusion. In this paper, we use ALD to denote the category of algebraic domains as objects and Scott continuous maps as morphisms.
The category of finitely derived information systems
In this section, we first introduce the notion of finitely derived information system. Then we put this kind of information systems into a category with appropriate approximable mappings being morphisms.

Definition 3.1 A ﬁnitely derived information system A is a triple (DomA, ConA, ▶A) where DomA is a non-empty set, ConA is a non-empty family of non-empty finite subsets of DomA, and ▶A is a binary relation from ConA to DomA, i.e., ▶A⊆ ConA × DomA, which satisfies:
(R1) (∀F ∈ ConA,a ∈ DomA) a ∈ F ⇒ F ▶A a;
(R2) (∀F1, F2 ∈ ConA,a ∈ DomA) F2 ▶A F1 ▶A a ⇒ F2 ▶A a;
(R3) (∀F ∈ ConA,B ⊆f DomA) B /= ∅ & F ▶A B ⇒ (∃Fj ∈ ConA) F ▶A Fj ⊇ B, where F2 ▶A F1 means F2 ▶A a for any a ∈ F1.
For convenience, given a finitely derived information system A and F ∈ ConA, we use F˜ to denote the subset {a ∈ DomA | F ▶A a}.
Proposition 3.2 Let A be a ﬁnitely derived information system. Then for any
F, F1, F2 ∈ ConA,
F ⊆ F˜;
F1 ⊆ F2 ⇒ F˜1 ⊆ F˜2;
F1 ⊆ F˜2 ⇔ F˜1 ⊆ F˜2.
Definition 3.3 An approximable mapping between finitely derived information sys- tems A and B is a binary relation Θ ⊆ ConA × ConB which satisfies that for any F, F1, F2 ∈ ConA and G1, G2 ∈ ConB,
(T1) F1 ⊆ F˜2 & (F1, G1) ∈ Θ & G2 ⊆ G˜1 ⇒ (F2, G2) ∈ Θ;
(T2) (F, G1) ∈ Θ & (F, G2) ∈ Θ ⇒ (∃G3 ∈ ConB) G1 ∪ G2 ⊆ G˜3 & (F, G3) ∈ Θ.
Next, we present some basic properties of approximable mappings between finitely derived information systems which will be used in the subsequent sections.
Proposition 3.4 Let Θ be an approximable mapping between ﬁnitely derived infor- mation systems A and B. Then for any F ∈ ConA and G ∈ ConB, the following are equivalent:
(F, G) ∈ Θ.
There exists Fj ∈ ConA such that Fj ⊆ F˜ and (F j, G) ∈ Θ.
There exists Gj ∈ ConB such that (F, Gj) ∈ Θ and G ⊆ G˜j.
Given a finitely derived information system A, a relation idA ⊆ ConA × ConA is defined by
(F, Fj) ∈ idA ⇔ Fj ⊆ F˜ (⇔ F ▶A Fj).
Let Θ : A → B and Υ : B → C be approximable mappings. Define a relation Υ ◦ Θ ⊆ ConA × ConC by
(F, H) ∈ Υ ◦ Θ ⇔ (∃G ∈ ConB) (F, G) ∈ Θ & (G, H) ∈ Υ.
Theorem 3.5 The ﬁnitely derived information systems being objects with approx- imable mappings being arrows form a category FIS.
Proof. It is routine by checking the clauses in the definition of a category.	2

Correspondence between finitely derived information systems and algebraic domains
In this section, we study the relationship between finitely derived information sys- tems and algebraic domains.

From ﬁnitely derived information systems to algebraic domains
We first introduce the notion of information state of finitely derived information systems. We also investigate the order-theoretic properties of the poset of infor- mation states with respect to set inclusion. As is shown, every such poset is an algebraic domain. Moreover, we study the correspondence between appropximable mappings (between the given finitely derived information systems) and Scott con- tinuous functions (between the induced algebraic domains).
Definition 4.1 Let A be a finitely derived information system. A non-empty sub- set D ⊆ DomA is said to be an information state of A if
(S1) (∀F ∈ ConA,a ∈ DomA) F ⊆ D & F ▶A a ⇒ a ∈ D;
(S2) (∀B ⊆f DomA) B /= ∅ & B ⊆ D ⇒ (∃F ∈ ConA) F ⊆ D & F ▶A B.
Intuitively, the condition (S1) means that D is closed under entailment and (S2) means that D is finitely derived in the sense that every combination of finite data objects of D can be derived from a consistent combinations of data objects of D.
In the sequel, we use I(A) to denote the set of all information states of A.
Proposition 4.2 Let A be a ﬁnitely derived information system. Then for any
F ∈ ConA, F˜ is an information state of A.
Proof. We only need to check that F˜ satisfies (S1) and (S2).	2
Proposition 4.3 Let D be an information state of A. Then
For any F ∈ ConA, if F ⊆ D, then F˜ ⊆ D;
The family {F˜ | F ∈ ConA & F ⊆ D} is directed;
D =	{F˜ | F ∈ ConA & F ⊆ D}.
Proposition 4.4 Let {Di}i∈I be a directed family of information states of A. Then
i∈I Di is also an information state of A.
Proof. We only need to check that  i∈I Di satisfies (S1) and (S2).	2
Theorem 4.5 Let A be a ﬁnitely derived information system. Then (I(A), ⊆) is an algebraic domain.
Proof. We have proved in Proposition 4.4 that (I(A), ⊆) is a dcpo. Then we can
check that D ⊆ DomA is compact in (I(A), ⊆) if and only if D = F˜ for some
F ∈ ConA. Finally, by Proposition 4.3, we can see that the family {F˜ | F ∈ ConA} precisely forms a basis of (I(A), ⊆).	2

The following result shows that there is a one-to-one correspondence between appropximable mappings (between the given finitely derived information systems) and Scott continuous functions (between the induced algebraic domains).
Theorem 4.6 Let A and B be ﬁnitely derived information systems. Then
For any approximable mapping Θ : A → B, the function ϕΘ : I(A) → I(B)
deﬁned by
ϕΘ (D)=  {G˜ | (∃F ∈ ConA,G ∈ ConB) F ⊆ D & (F, G) ∈ Θ}
is Scott continuous;
For any Scott continuous function ϕ : I(A) → I(B), the relation Θϕ ⊆ ConA ×
ConB deﬁned by
(F, G) ∈ Θϕ ⇔ G ⊆ ϕ(F˜)
is an approximable mapping;
Moreover, ΘϕΘ =Θ and ϕΘϕ = ϕ.
Proof. It is routine to check that ϕΘ is Scott continuous and Θϕ is an approximable mapping.
For Θϕ = Θ, given any F ∈ ConA and G ∈ ConB, (F, G) ∈ ΘϕΘ ⇔ G ⊆ ϕΘ (F˜)
⇔ (∃Fj ∈ ConA, Gj ∈ ConB) Fj ⊆ F˜ & (F j, Gj) ∈ Θ & G ⊆ G˜j
⇔ (F, G) ∈ Θ
For ϕΘϕ = ϕ, given any information state D of A,
ϕΘϕ (D) =  {G˜ | (∃F ∈ ConA,G ∈ ConB) F ⊆ D & (F, G) ∈ Θϕ}
=  {G˜ | (∃F ∈ ConA,G ∈ ConB) F ⊆ D & G ⊆ ϕ(F˜)}
=  {G˜ | G ∈ ConB & G ⊆ ϕ(D)}
= ϕ(D)
2

The ﬁnitely derived information systems induced from algebraic domains
In this section, we study the finitely derived information systems which can be gen- erated from given algebraic domains. We also study the correspondence between Scott continuous functions (between the given algebraic domains) and appropx- imable mappings (between the induced finitely derived information systems).
Theorem 4.7 Let L = (L, ≤) be an algebraic domain.  Then AL  = (DomL, ConL, ▶L) is a ﬁnitely derived information system, where
DomL = K(L);
ConL consists of the ﬁnite subsets of K(L) for which every F ∈ ConL has its greatest element kF with respect to ≤;
▶L⊆ ConL × DomL for which F ▶L k if and only if k ≤ kF .

Proof. Straightforward by checking clauses in Definition 3.1.	2
Proposition 4.8 Let AL be the induced ﬁnitely derived information system of (L, ≤
). Then for any F, F1, F2 ∈ ConL,
F1 ⊆ F˜2 ⇔ kF1 ≤ kF2 ⇔ F˜1 ⊆ F˜2.
Proposition 4.9 Let (L, ≤) be an algebraic domain and D ⊆ K(L). Then D is an information state of AL if and only if D is an ideal of (K(L), ≤).
Proof. Straightforward.	2
The following result shows that there is a one-to-one correspondence between Scott continuous functions (between the given algebraic domains) and appropx- imable mappings (between the induced finitely derived information systems). In the other word, the notion of appropximable mapping provides an approach to represent Scott continuous functions.
Theorem 4.10 Let (L1, ≤1) and (L2, ≤2) be algebraic domains. Then:
For any Scott continuous function ψ : L1 → L2, the relation Πψ ⊆ ConL1 ×
ConL2 deﬁned by
(F, G) ∈ Πψ ⇔ kG ≤2 ψ(kF )
is an approximable mapping;
For any approximable mapping Π from AL1 to AL2 , the function ψΠ : L1 → L2
deﬁned by

ψ (x)= W{k  | (∃F ∈ ConL ,G ∈ ConL ) (F, G) ∈ Π & k
≤1 x}

Π	G	1	2	F
is a Scott continuous function;
Moreover, Π	=Π and ψ	= ψ.
Π	ψ

Proof. It is routine to check that Πψ is an approximable mapping and ψΠ is a Scott continuous function.
For ΠψΠ = Π, given any F ∈ ConL1 and G ∈ ConL2 , (F, G) ∈ ΠψΠ ⇔ kG ≤2 ψΠ (kF )
⇔ (∃Fj ∈ ConL1 , Gj ∈ ConL2 ) (F j, Gj) ∈ Π & kF′ ≤1 kF & kG ≤2 kG′
⇔ (∃Fj ∈ ConL1 , Gj ∈ ConL2 ) (F j, Gj) ∈ Π & Fj ⊆ F˜ & G ⊆ G˜j
⇔ (F, G) ∈ Π
For ψΠψ = ψ, given any x ∈ L1,

ψ	(x) = W{k  | (∃F ∈ ConL ,G ∈ ConL ) (F, G) ∈ Πψ & k
≤1 x}

= W{k  | (∃F ∈ ConL ,G ∈ ConL ) k  ≤2 ψ(k ) & k
≤1 x}

G
= W{ψ(k
= ψ(W{k
1
) | F ∈ ConL1
| F ∈ ConL
& kF
& k
2	G	F	F
≤1 x}
≤1 x})

F	1	F
= ψ(W ⇓x)
= ψ(x).
2

The equivalence between FIS and ALD
In this section, we study the relationship between the category of finitely derived information system and that of algebraic domains. In this end, we establish two functors between them in the following.

Functors between FIS and ALD
From FIS to ALD, define functions Fo : FISo → ALDo and Fa : FISa → ALDa
as follows: For any finitely derived information system A,
Fo(A)= (I(A), ⊆)
where (I(A), ⊆) is the induced algebraic domain of A in the sense of Theorem
4.5. Let A and B be finitely derived information systems. For any approximable mapping Θ from A to B,
Fa(Θ) = ϕΘ
where ϕΘ is the induced Scott continuous function of Θ in the sense of Theorem 4.6(1).
It is routine to check that F = (Fo, Fa) is a functor from FIS to ALD. Conversely, from ALD to FIS, define functions Go : ALDo → FISo and Ga :
ALDa → FISa as follows: For any algebraic domain L = (L, ≤),
Go(L)= AL

where AL is the induced finitely derived information system of L in the sense of Theorem 4.7. Let L1 and L2 be algebraic domains. For any Scott continuous function ψ from L1 to L2,
Ga(ψ)= Πψ
where Πψ is the induced approximable mapping of ψ in the sense of Theorem 4.10(1).
It is routine to check that G = (Go, Ga) is a functor from ALD to FIS.

The equivalence between FIS and ALD
Based on the above two functors, starting from a finitely derived information system A, we can get a new finitely derived information system Go(Fo(A)) = (DomI(A), ConI(A), ▶I(A)). Define a relation ΘA ⊆ ConA × ConI(A) by
(F, A) ∈ ΘA ⇔ kA ⊆ F˜ (⇔A ⊆⇓ F˜)
where kA is the greatest element of A in (I(A), ⊆) and ⇓ F˜ is the compact elements below F˜ in (I(A), ⊆) (Note: We can easily check ⇓ F˜ = {F˜j | Fj ∈ ConA & Fj ⊆ F˜}).
Moreover, define a relation ΠA ⊆ ConI(A) × ConA by
(A,F ) ∈ ΠA ⇔ F˜ ⊆ kA.
It is routine to check that ΘA is an approximable mapping from A to Go(Fo(A)) and ΠA is an approximable mapping from Go(Fo(A)) to A. Moreover, the following result shows that A and Go(Fo(A)) are isomorphic in category FIS.
Proposition 5.1 Let A be a ﬁnitely derived information system. Then ΠA and ΘA
are inverse with each other in FIS.
Proof. We can check that (F, Fj) ∈ ΠA ◦ ΘA if and only if (F, Fj) ∈ idA for any
F, Fj ∈ ConA. This implies ΠA ◦ ΘA = idA.
Moreover, we have (A, Aj) ∈ ΘA ◦ ΠA if and only if (A, Aj) ∈ idG (F (A)) for any
o  o
A, Aj ∈ ConI(A). This implies ΘA ◦ ΠA = idG (F (A)).	2
o  o
Given an algebraic domain L, we can get a new algebraic domain Fo(Go(L)) = (I(AL), ⊆). Define a function ϕL : L → I(AL) by
ϕL (x) =⇓x.
Define another function ψL : I(AL) → L by
ψ (D)= W D.
By Proposition 4.9, both ψL and ψL are well-defined.
It is routine to check that ϕL is a Scott continuous function from L to Fo(Go(L)) and ψL is a Scott continuous function from Fo(Go(L)) to L. The following result shows that L is isomorphic to Fo(Go(L)) in category ALD.
Proposition 5.2 Let L be an algebraic domain. Then ϕL and ψL are inverse with each other.

Proof. For any x ∈ L, we have ψ
(ϕ (x)) = W ⇓x = x. This implies ψ ◦ϕ
= idL.

L	L	W	L	L
For any information state D of AL, we have ϕL (ψL (D)) =⇓ (	D)= D. This implies
ϕL ◦ ψL = idFo(Go(L)).	2
Finally, we can obtain the categorical equivalence between FIS and ALD, which indicates that the notion of finitely derived information system provides a concrete representation of algebraic domains.

Theorem 5.3 F is a functor from FIS to ALD with G being the pseudo-inverse. Therefore, FIS is categorical equivalent to ALD.
Proof. Given any approximable mapping Θ : A → B, we can check that (F, B) ∈ ΘB ◦ Θ if and only if (F, B) ∈ Ga(Fa(Θ)) ◦ ΘA for any F ∈ ConA and B ∈ ConI(B), This implies Ga(Fa(Θ)) ◦ ΘA = ΘB ◦ Θ.
Given any Scott continuous function ϕ from L1 to L2, we can check that

Fa(Ga(ϕ)) ◦ ϕL
(x) = ϕ
2
(ϕ(x)) for any x ∈ L1, This implies Fa(Ga(ϕ)) ◦ ϕL  =

ϕ	◦ ϕ.	2
2
Conclusions
In this note, we introduced a new kind of information systems named finitely derived information systems. This notion can be seen as a revision of the original Scott’s information systems. Towards the consistency predicate, we only required that it is only a set of non-empty finite subsets of the a set of tokens. Towards entailment relation, we preserved the reflexive and transitive rules which have been used in the Scott’s information systems and introduced a new rule named finitely derived. We investigated systematically the interrelation between the category of finitely derived information systems with approximable mappings as morphisms and that of algebraic domains with Scott continuous functions as morphisms. By establishing two functors between these two categories, we proved that they are categorical equivalent. This result demonstrated that our proposed notion of finitely derived information system indeed provides a concrete representation of algebraic domains.
References
B.A. Davey, H.A. Priestley, Introduction to Lattices and Order, 2nd edition, Cambridge University Press, 2002.
G. Gierz, K.H. Hofmann, K. Keimel, J.D. Lawson, M. Mislove and D.S. Scott, Continuous Lattices and Domains, Cambridge University Press, 2003.
R. Hoofman, Continuous Information systems, Information and Computation, 105 (1993) 42-71.
L.K. Guo, Q.G. Li, P. Valtchev, R. Godin, Formal F -contexts and their induced implication rule systems, Lecture Notes in Computer Science, 7880 (2013) 141-155.
K.G. Larsen, G. Winskel, Using information systems to solve domain equations effectively, In: G. Kahn,
D.B. Macqueen, G. Plotkin (Eds.), Semantics of Data Types, Lecture Notes in Computer Science, Vol. 173, Springer, Berlin, 1984, pp. 109-129.
S. Mac Lane, Categories for the working mathematician, Springer-verlag, New York, 1971.
D.S. Scott, Domains for denotational semantics, In: M. Nielsen and E.M. Schmidt (Eds.), Automata, Languages and Programming, Ninth Colloquium, Aarhus, 1982(ICALP82) volume 140 of Lecture Notes in computer Science, pp. 577-613, Springer-Verlag, 1982.
D. Spreen, L.S. Xu, X.X. Mao, Information systems revisited: The general continuous case, Theoretical Computer Science, 405(1-2) (2008) 176-187.
G.-Q. Zhang, DI-domains as prime information systems, Information and Computation, 100 (1992) 151-177.
G.-Q. Zhang, Disjunctive systems and L-Domains, Automata, Languages and Programming, Lecture Notes in Computer Science Volume, 623 (1992) 284-295.
G.-Q. Zhang, A representation of SFP, Information and Computation, 110 (1994) 233-263.
