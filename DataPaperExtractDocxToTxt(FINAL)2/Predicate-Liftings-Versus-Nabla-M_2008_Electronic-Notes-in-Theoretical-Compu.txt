	Electronic Notes in Theoretical Computer Science 203 (2008) 195–220	
www.elsevier.com/locate/entcs
Predicate Liftings Versus Nabla Modalities
Raul Andres Leal1,2
ILLC
Univeriteit van Amsterdam Amsterdam, The Netherlands

Abstract
We compare Moss’ language and languages with predicate liftings. We prove that every monadic predicate lifting for a Kripke polynomial functor can be translated into Moss’ language. We also prove that Moss’ modality can always be translated into an appropriate language with predicate liftings.
Keywords: Coalgebra, modal logic, predicate lifting, singleton lifting, Moss’ modality, logical translator.

Introduction
Modal logic is the logic of transition systems, which are coalgebras for the covariant power set functor. Coalgebraic (modal) languages generalize modal logic in that they describe more general kinds of dynamic systems i.e. coalgebras for different endofunctors. One important requirement for a coalgebraic language is that bisim- ilarity coincides with logical equivalence of states. A language with this property is said to be expressive with respect to bisimulation.
Lawrence S. Moss [4] defined a family of expressive [4,5,8] coalgebraic languages, which is parametric in T for any accessible and weak pullback preserving Set- endofunctor T . For any such functor, the associated Moss’ language, denoted by MT (Definition 2.2), has a unique modality, denoted by ∇T , which is defined using relation liftings (see section 2.2). For Kripke frames, seen as coalgebras for the covariant power set functor P, Moss’ modality acts over sets of formulas and can be described in terms of the basic modal language as follows:
∇P Ψ =   Ψ ∧   Ψ.

1 Thanks to Alessandra Palmigiano, Yde Venema, the anonymous referees, Alexander Kurz, Dirk Pattinson, and Clemens Kupke for all their valuable comments and suggestions. The research of this author has been made possible by VICI grant 639.073.501 of the Netherlands Organization for Scientific Research (NWO).
2 Email: rlealrod@science.uva.nl

1571-0661 © 2008 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2008.05.026

Conversely, using ∇P as a primitive modality, the basic modalities can be expressed as follows:
  ϕ = ∇P ∅∨ ∇P {ϕ};	  ϕ = ∇P {ϕ, T}.
However, in the case of other functors, it is not so easy to extract familiar modalities from Moss’ modality.
A more direct approach to the definition of coalgebraic languages uses predi- cate liftings (see section 2.14). The underlying observation is that the modalities
 and are special predicate liftings. The idea of using (monadic) predicate liftings to define languages to describe coalgebras was first introduced by Dirk Pattinson [5]. Unlike Moss’ modality, which is unique per functor, there are many different predicate liftings for a given functor T , which give rise to different T -languages, parametrized over sets of predicate liftings. Not all languages of (monadic) pred- icate liftings are expressive. Lutz Schro¨der [6] introduced the concept of polyadic predicate lifting and proved that every accessible functor that preserves monomor- phisms admits a set of polyadic liftings Λ such that the associated language LT (Λ) is expressive.
These two approaches define, in principle, two different expressive languages for any accessible functor that preserves weak pullbacks. In the case of Kripke frames, as we saw before, the two languages MP and LP ({ ,  }) can be mutually translated.
Then a natural question is: can this mutual translation be extended to other functors
as well? In this paper we partially answer this question by showing that every monadic predicate lifting for a Kripke polynomial functor can be translated into Moss’ language 3 . In the converse direction we show that Moss’ modality can always be translated into an appropriate language of polyadic predicate liftings. More precisely, we will show that, under appropriate conditions:
For every Kripke polynomial functor T and every PL-language LT (Λ) with only monadic predicate liftings, we can find a translation
t : LT (Λ) −→ MT ,
where MT is Moss’ language (with negations) for T (see Theorems 4.9 and 4.10 on page 21).
For every accessible and weak pullback preserving functor T , there exists a cardinal number κ and a translation
t : MT −→ LT (Λ),
from Moss’ language to the language LT (Λ), where Λ is the set of all η-ary predicate liftings for all η ∈ κ (see Theorem 5.6 on page 23).
The first result was proved by the author in his MSc thesis at the ILLC in Am- sterdam [3]. The construction is based on the development of the concept of logical translator. The second result is joint work of the author together with Dirk Pattin- son and Yde Venema. It is based on a representation theorem by Jiˇr´ı Ada´mek and

3 Here we should assume that the languages involved have enough conjunctions, see Remarks 2.29 and 3.2

Vera Trnkova´ (Theorem 5.1 here), and an inductive presentation of Moss’ language given by Yde Venema in [7].
The structure of the paper goes as follows: In the next section, we fix some notation, define the concept of translation and set our framework. In Section 3, we present the main conceptual contribution of this paper, which is the concept of
logical translator (Definition 3.4). In Section 4, we illustrate two properties of logical
translators: first we illustrate how to produce translations from logical translators (Theorem 4.2), then we show how to extend logical translators under the operations of product and coproduct between functors. We also show how to extend logical translators using the covariant power set functor (Theorem 4.6). As a corollary we will conclude that every monadic predicate lifting for a Kripke polynomial functor can be translated into Moss’ language with disjunctions of appropriate arity. In Section 5 showing how to translate Moss’ modality (Theorem 5.6). We finish with some conclusions and suggestions for further research.

Preliminaries
In this paper we only consider endofunctors in the category Set that are accessible and weak-pullback preserving. These properties are needed to show the existence of Moss’ language [4,5], and to construct set of predicate liftings such that the language LT (Λ) is expressive [6]. Let us recall the relevant definitions.
Definition 2.1 A cardinal number κ is regular if its equal to its cofinality.
Definition 2.2 [see [5]] Let κ be a regular cardinal. A functor T : Set −→ Set is κ-accessible if for all sets X and all x ∈ TX there is a subset Yx ⊆ X with |Yx| < κ such that x ∈ T (i)(Yx), where i : Yx −→ X is the inclusion; and the set T (i)(Yx) is the direct image of Yx under the function T (i).
A functor is accessible iff it is κ-accessible for some regular cardinal κ, and it is
ﬁnitary iff it is ω-accessible.
Intuitively, a translation is a map between languages which preserves meaning, so formally:
Definition 2.3 Let T be a functor, let L1 and L2 be two languages that can be interpreted over T -coalgebras. A translation from L1 to L2 is a function t : L1
−→ L2 that preserves semantics, i.e. if ϕ ∈ L1 then [ϕ]]1 = [[t(ϕ)]]2, where [−]]i is
the satisfaction relation for Li with i = 1, 2.
Definition 2.4 A functor T preserves weak pullbacks iff the diagram on the left


TA T (q)
T (p)) TB 

T (f )
A	p ) B
q	f

v	v	v	v
	)	)

TC	T (g)	TD 
C	g	D

is a weak pullback whenever the diagram on the right is a weak pullback.

Notation
We use T to denote functors and the greek letters λ, μ, τ to denote natural trans- formations.
Let Pˇ be the contravariant power set functor, P be the covariant power set
functor, I be the identity functor. We write D for the constant functor with value D, and Hom(D, −) for the (covariant) homomorphism functor. We use D for the finite distribution functor and BN for the finite multiset functor (bags).
For every cardinal number κ, we write Pκ for the functor mapping a set A to the collection of its subsets of cardinality strictly less than κ, and a function f : A
−→ B to its direct image.
The collection of Kripke polynomial functors, or KPFs for short, is inductively defined as follows:
K := I | D | K + K | K × K | Hom(A, K) |PK,

where A is a set and D is a constant functor with value D. Replacing P with the finite power set functor Pω we obtain the collection of ﬁnitary Kripke polynomial functors. Constant functors are used to introduce constants to our coalgebraic languages, because of that we will often refer to KPFs over a set D.
Given any other functor H, the collection of H-Kripke polynomial functors, or KPF + H for short, is inductively defined as follows:

K := I | D | H | K + K | K × K | Hom(A, K) |PK,

i.e. the functor H is added as a base case.
If X ⊆ S and U ⊆ PS, we denote the characteristic function of X by χX , and the complement of X in S by ¬SX. We write S (U ) for the intersection of the elements in U . The subindexes stress the fact that intersections and complements define natural transformations; the complement defines a natural transformation
¬ : Pˇ −→ Pˇ, and intersections define a natural transformation : PPˇ −→ Pˇ. This will be relevant in the definition of Moss’ language.
A T -coalgebra is a pair (S, σ) such that S is a set and σ is a function of the form σ : S −→ TS. The set S will be called the set of states and σ the transition structure, or transition map, of the coalgebra. We often identify a coalgebra with its transition structure σ (from which the set of states S can be determined as the domain of σ).
Moss’ language and PL-languages are defined using certain natural transforma- tions. Let us first introduce Moss’ language.

Moss’ Language
Moss’ language uses a unique modality, which is defined using relation liftings.

Definition 2.5 [see [5]] For any functor T : Set −→ Set and relation R ⊆ X × Y , the relation lifting T (R) ⊆ TX × TY of R, using T , is defined as follows:

T (R) = {(T (πX )(u),T (πY )(u)) | u ∈ TR}

Using relation liftings, we can characterize the property of weak pullback preser- vation, see [5] for more references and details.

Proposition 2.6 A functor T preserves weak pullbacks if T (R ◦ S) = TR ◦ TS for all composable relations R, S.
Example 2.7 If T be the covariant power set functor P, we can easily show that the relation lifting of R is given by:

P(R) = {(Q0, Q1) | (∀q0 ∈ Q0)(∃q1 ∈ Q1))((q0, q1) ∈ R)
and (∀q1 ∈ Q1)(∃q0 ∈ Q0))((q0, q1) ∈ R)} .
In the case of KPFs, relation liftings can be described inductively, see [8] for more information and references:
Proposition 2.8 Let S and S' be sets, and R ⊆ S × S' a binary relation. The following induction deﬁnes the relation lifting K(R) ⊆ KS × KS', for each Kripke polynomial functor K.

I(R) = R,
D(R) = ΔD,
K0 × K1(R) = {((x0, x1), (x' , x' )) | (x0, x' ) ∈ K1(R) and (x1, x' ) ∈ K2(R)},
0	1	0	1
K0 + K1(R) = {(i1(s), i1(t)) | (s, t) ∈ K1 (R)}∪ {(i2(s), i2(t)) | (s, t) ∈ K2 (R)},
Hom(D, K(R)) = {(f, f') | (∀d ∈ D)((f (d),f'(d)) ∈ K(R))},

PK(R) = (Q0, Q1) | (∀q0 ∈ Q0)(∃q1 ∈ Q1))((q0, q1) ∈ K (R))  }
Definition 2.9 [Moss’ modality] Let T be a functor that preserves weak pullbacks.
Moss’ modality is the natural transformation ∇T : T Pˇ −→ PˇT such that the S-
component (∇T )S : T PˇS −→ PˇTS maps an element t ∈ T PˇS to

(∇T )S(t) = {s' ∈ TS | (s', t) ∈ T (∈S)},
where ∈S is the membership relation between elements in S and sets in PˇS.
The hypothesis that T preserves weak pullbacks is needed to show that the previous functions are the components of a natural transformation, see [5].
Definition 2.10 [Moss’ Language, see [5]] Let T be an accessible functor, and κ a
regular cardinal which serves as a bound for conjunctions. Moss’ language Mκ is
the carrier of an initial algebra for the functor L := Pκ + T + I. The elements of
κ are the formulas of Moss’ language.

The hypothesis of T being accessible is needed to prove that the initial algebra in the previous definition exists, see [1] or [9]. Recall that all initial algebras are isomorphic.
Notice that, by the universal property of coproducts, there exist three functions:
  : Pκ(Mκ ) −→ Mκ ;	∇ : TMκ  −→ Mκ ;	¬ : Mκ  −→ Mκ .

These functions respectively define, conjunctions, Moss’ modality, and negations in Moss’ language.
Definition 2.11 [Complex algebra functor] Let T be an accessible functor that preserves weak pullbacks. The complex algebra functor is the functor
MT : Coalg(T )op −→ Alg(Pκ + T + I).
this functor maps a T -coalgebra (S, σ) to the algebra
[ , σ−1(∇T )S, ¬S] : PκPˇS + T PˇS + PˇS −→ PS,
S
and a morphism f : σ1 −→ σ2 to
f−1 : (PS2, [  , σ−1(∇T )S , ¬S ]) −→ (PS1, [  , σ−1(∇T )S , ¬S ]).

2	2	2
S2
1	1	1
S1

The image of a coalgebra σ under the functor M is called the complex algebra of σ.
Remark 2.12 [Notational issues] We denote arbitrary formulas of Moss’ language by ψ and use Ψ for special “formulas” in TMκ . This is because we want to stress
that the objects in TMκ act like formulas of a different nature.
The symbol ∇ has two uses for us, one is to denote the natural transforma- tion defining Moss’ modality (Definition 2.9), a second use is to denote the actual modality of Moss’ language. We use the same symbol for both situations because they are tightly related. This we also want to simplify out notation.

Definition 2.13 [Moss’ Semantics, see [5]] The semantics [−]]σ
:  Mκ
−→ PˇS of

κ with respect to (S, σ) is the unique morphism of Alg(Pκ + T + I)-algebras
from Mκ to M (S, σ). We also refer to [−]]σ as the satisfaction relation of Moss’ language.
Since the satisfaction relation defined above is a homomorphism of L-algebras, the following diagram
TMκ    	∇	) Mκ

T

T ([[−]]σ )
v
	)
T

[[−]]σ
v

T PˇS
σ−1(∇T )S
PˇS

commutes for every coalgebra σ. In other words, the extension of a formula ∇Ψ ∈
κ can be computed as follows:


[[∇Ψ]]σ
= σ−1(∇T )ST ([[−]]σ
)(Ψ).

This fact combined with Proposition 2.8 implies that in the case of KPFs, the satisfaction relation for Moss’ language can be described inductively.
PL-languages
PL-languages have different modalities, which are obtained using predicate liftings.
Definition 2.14 [Predicate Liftings, see [6]] Let η be a cardinal number. An η-ary predicate lifting λ for T is a natural transformation
λ : (Pˇ)η −→ PˇT.
If η = 1, we say that λ is a monadic predicate lifting; or a predicate lifting for short. A polyadic predicate lifting is an η-ary predicate lifting for some cardinal η.
Example 2.15 For the covariant power set functor, the existential modality  can be seen as the predicate lifting, the S-component of which is the function
 S : PˇS −→ PˇPS
mapping a set X ⊆ S to
 S(X) = {U ⊆ S | U ∩ X /= ∅}.
This shows that P L-languages generalize the basic modal language.
Definition 2.16 [see [6]] Let T be a functor, let Λ be some set of polyadic predicate liftings, and let κ be a regular cardinal that serves as a bound for conjunctions. The P L-language Lκ (Λ) associated with Λ is the least inductively defined set

ϕ :=  Φ | ¬ϕ | λ(ϕi)i∈η;

such that Φ ⊆ Lκ (Λ) with |Φ| < κ, and λ is an η-ary lifting in Λ.

For every T -coalgebra σ, the semantics [ϕ]]σ ⊆ S is given inductively by the

following clauses:
[ Φ]]σ = 

[[ϕ]]σ .

[¬ϕ]]σ = ¬S[[ϕ]]σ .
L	L
[λ(ϕi)i∈η]]σ = σ−1λS([[ϕi]]σ )i∈η,
L	L
Remark 2.17 [Notational issues] We denote arbitrary formulas of PL-language by ϕ. Like we did for ∇, we use the symbol λ to denote predicate liftings (Defintion 2.14), and the modality associated with λ. This helps to keep the notation simple.

Lutz Schro¨der showed that the number of predicate liftings for T is closely related to the action of T on objects. this is stated in the following result.
Theorem 2.18 (see [6]) The set of η-ary predicate liftings is in natural bijection with the subsets of T (2η ).
The following definition tell us how to obtain a predicate lifting from a set
C ⊆ T (2η ), it is motivated from the proof of the previous theorem.
Definition 2.19 Given a η-ary predicate lifting λ, we say that λ is associated with a set C ⊆ T (2η ) if for every η-sequence −→ of subsets of S the following holds:
−→
—→
X
where χ—→ : X −→ 2η is the product arrow of the characteristic functions of the sets
−→	X	−→
in X , i.e. if X = (Xi)i∈η then χ—→ is the unique function such that πiχ—→ = χXi for
X	X
all i ∈ η.
As instances of the previous definition, we will present some examples of predi- cate liftings.
Example 2.20 If T is the covariant power set functor, and we represent 2 =
{T, ⊥}, the existential modality is associated with the set {{T}, {T, ⊥}}. Anal- ogously, the universal modality corresponds to the set {∅, {T}}.
Example 2.21 Given a cardinal number η, if T (2η ) is nonempty, then T has at least two η-ary predicate liftings: one associated with the empty set, which will be denoted as λ⊥ instead of λ$; another one associated with the set T (2η ), which will be denoted as λT instead of λT (2η ). The S- components of these predicate liftings map

an η-sequence −→ of subsets of S as follows: (λ
⊥)S
X ) = ∅, and (λ
T)S
= TS.

Notice that for any η-sequence of formulas (ϕi)i∈η ⊆ Lκ (Λ), the formula λ⊥(ϕi)i∈η
is never true, and the formula λT(ϕi)i∈η is always true.
Among predicate liftings some are simpler than others, for example those related to singleton sets.
Definition 2.22 An η-ary predicate lifting λ is called a singleton predicate lifting, or a singleton lifting for short, if it is associated with an element p ∈ T (2η ), i.e. if the following holds
−→
—→
X
If λ is a singleton lifting, we write it λp where p is the associated element of T (2η ).
Example 2.23 If T is a constant functor with value D, then the singleton liftings for T are associated with elements d ∈ D. The S-component of a singleton lifting λd is the function λd : PˇS −→ PˇD with constant value {d}.
Example 2.24 If T is the identity functor and we assume 2 = {T, ⊥}, then there are two singleton liftings for I. The S-component of λ{T} is the identity. Similarly,

the S- component of λ{⊥} is the function (λ{⊥})S : PˇS −→ PˇS mapping a set X ⊆ S
to λ{Τ}(X) = ¬SX.
Example 2.25 If T is the finite multiset functor, a singleton lifting is given by a pair of natural numbers (n, m). The S-component of (λ(n,m))S is the function (λ(n,m))S : PˇS −→ PˇBNS mapping a set X to the set of bags over S with n + m elements of whose n are in X and m are in its complement.
Example 2.26 If T is the finite distribution functor, a singleton lifting is given by a real number q ∈ [0, 1]. The S-component of λq is the function (λq)S : PˇS −→ PˇDS mapping a set X to the set of probability distributions over S that give probability q to the set X.
One reason to pay special attention to singleton liftings is that in the case of KPFs they can be presented inductively over the complexity of the functor, as the next example illustrates.
Example 2.27 For every set P ∈ PT (2), the singleton lifting λP : Pˇ −→ PˇPT for
PT can be presented using the singleton liftings for T associated with the elements of P as follows: for any η-sequence −→ of subsets of S,

(λ )
(−→) = {U ⊆ TS | U ⊆  (λ )
(−→) and (∀p ∈ P )(U ∩ (λ )
(−→) /= ∅)}.

P S X

p∈P
p S X
p S X


It is also possible to give inductive presentations like the previous one in the case of products and coproducts. This is especially useful in the case of products of functors. Singleton liftings are even more important because they generate all the other predicate liftings as it is shown in the next result.
Proposition 2.28 If λ is an η-ary predicate lifting associated with a set P ⊆ T (2η ), then for every set S and every η-sequence −→ of subsets of S we have
λ (−→) =  (λ ) (−→).
X	p S X
p∈P
In other words, every η-ary predicate lifting can be obtained as a join of singleton predicate liftings.
Proof. Since λ is associated with P its action over an η-sequence −→ can be de-

scribed as follows
(λ ) (−→) = {t ∈ TS | T (χ—→)(t) ∈ P}
=  {t ∈ TS | T (χ—→)(t) = p} =  (λ )



(−→).


p∈P
X
p∈P
p S X

This concludes the proof.	 
Remark 2.29 [Concerning the arity of disjunctions] The previous proposition im- plies that for every language Lκ (Λ) with disjunction of at least size |T (2η|, i.e.

|T (2η| < κ, then every η-ary predicate lifting λ ∈ Λ can be obtained as a disjunc- tion of singleton liftings. This fact will play an important role in the translation of predicate liftings for Kripke polynomial functors, see Example 3.1. From now on we will make the following assumption: if Lκ (Λ) is a language of predicate liftings for a Kripke polynomial functor over a set D, then Lκ (Λ) has disjunctions of size
at least |D|, i.e. |D| < κ.

Translations & Translators
Now that we fixed our framework, we can explain in detail the aim of this paper. Our first goal is to translate monadic predicate liftings. Our first question is:
Can we translate every monadic predicate lifting λ for a KPF T into Moss’ lan- guage for T ?
If we only accept finitary formulas on the languages, the answer is no. Consider the following example.
Example 3.1 Let T be the constant functor with value N, let E ⊆ N be the set of even numbers, and let λE be the predicate lifting associated with E. The predicate lifting λE can not be expressed in łω , i.e. Moss’ language for T with finitary
conjunctions and negation.
Consider the T coalgebra N = (N, 1N), and the formula λET. The formula λET defines the set of even numbers in the coalgebra N , i.e [[λET]]σ = E. We will show that this set is not definable in Moss’ language, i.e there exists no formula ψ ∈ łω
such that [[ψ]]σ = E.
Clearly the formula T does not define E; now we will show that no finite formula involving ∇N does. Recall that Moss’ modality for T can only be applied to elements of N, and that a state s in a coalgebra (S, σ) satisfies a formula ∇Nn iff σ(s) = n. From this we conclude that no finite conjunction of formulas with the shape ∇Nn defines E. Furthermore notice that a formula ∇Nn Λ ∇Nm, with n /= m, defines the empty set. Now consider a formula ч∇Nn; a state s in a coalgebra (S, σ) satisfies ч∇Nn iff σ(s) /= n. From this we conclude that any finite conjunction of formulas with the shape ч∇Nn defines a co-finite set in N . We conclude that there is no
formula ψ ∈ łω such that [ψ]]σ  = E. This implies that the formula λET can not
M
be translated into Moss’ language with only finitary conjunctions.
Remark 3.2 [Concerning the arity of disjunctions] The formula λET in the previ- ous example can be expressed into Moss’ language if we allow infinite (countable) conjunctions in łκ , i.e. ω < κ. Recall that constant functors are used to add constants to the language. Following the idea of Remark 2.29, from now on we will make the following assumption: Moss’ language for a Kripke polynomial functor, over a set D, has disjunctions of at least size |D|. Theorems 4.9 and 4.10 present some conditions under which every monadic predicate lifting can be translated.
Fix a functor T , a PL-language Lκ (Λ), and a predicate lifting λ ∈ Λ. Since the functor T is fixed, we will write ∇ instead of ∇T to simplify our notation. In order to

translate λ into Moss’ language, we should show that for every formula ϕ ∈ Lκ (Λ)

there exists a formula ψ ∈ łκ such that [λϕ]]σ = [[ψ]]σ
. In other words, we would

T	L	M

like to define a function t : Lκ (Λ) −→ łκ such that [λϕ]]σ = [[t(λϕ)]]σ
for every T

T	T	L	M
coalgebra. More precisely:
Definition 3.3 We say that a formula ϕ ∈ Lκ (Λ) can be translated into Moss’

language if there exist a formula ψ ∈ łκ
such that [ϕ]]σ = [[ψ]]σ
holds for every

T -coalgebra.
T	L	M

Intuitively a predicate lifting λ describes some aspect of the one step evolution of coalgebras. Hence if a formula λϕ can be translated into a formula ψ ∈ łκ , we would expect that Moss’ modality takes part in the translation. Assume that we want our formula ψ to be the simplest. Namely we want ψ = ∇Ψ, where Ψ ∈ Tłκ . If we want the translation of λ to be of this form, we would like to define a function
t' : Lκ (Λ) −→ Tłκ such that
T	T

[[λϕ]]σ = [[∇t'(λϕ)]]σ .
L	M
Given t' we will define the translation to be t(λϕ) = ∇t'(ϕ).  We will produce the function t' using logical translators; we will use the so called signature of the translator.
Now, we would like to stress an issue in the construction of a translation. We will first unravel the previous equation. By definition, we have that for any coalgebra σ, the following two equations hold:


[[λϕ]]σ = σ—1λS([[ϕ]]σ ) and [∇t'(λϕ)]]σ  = σ—1∇ST ([[−]]σ
)t'(ϕ).

L	L	M	M
Putting these two equations together, we can see that we would like to inductively define a function t' such that
σ—1λS[[ϕ]]σ = σ—1∇ST ([[−]]σ )t'(ϕ).
L	M
This previous equation has three different kinds of components: the natural transfor- mation associated with the modalities, the satisfaction relations, and the transition map σ. In the previous section we illustrated that the modalities and the satisfac- tion relations can be inductively presented over the complexity of T . Notice that transition maps can not be described inductively, for example, there is no natural way to describe a coalgebra for the functor PT in terms of coalgebras for the func- tor T . Therefore the dependence of the previous equation in the transition map σ might complicate our construction.
Since the presence of σ is problematic, we would like to avoid it. In other words, if we would like to construct a function t'; such that the equality
λS[[ϕ]]σ = ∇ST ([[−]]σ )t'(ϕ)	(2)
L	M
holds for every set S. This might seem like a strong assumption, but one of the features of logical translators resides in the fact that they produce the function t'

with exactly the property in the previous equation, see Remark 4.5 for a consequence of this. The intuition is that the formula t'(ϕ) should be ∇-free. The development of logical translators was motivated by this previous intuition.

Logical Translators
Here we arrive at the key concept of this paper, this is the concept of logical trans- lator. We will first give some intuitive motivations. Recall that the semantics of formulas λϕ and ∇Ψ are defined using natural transformations with names λ (Definition 2.14) and ∇ (Definition 2.9). The S-component of Moss’ modality is a function ∇S : T PˇS −→ PˇTS. Similarly, λS is a function λS : PˇS −→ PˇTS. The functions λS and ∇S have the same codomain but different domains:
PˇS	T PˇS
	/
λ	/∇S
S	/
/s
PˇTS 
We have to relate the two domains. A first idea would be to complete the picture into a commutative diagram using a natural transformation τ : Pˇ −→ T Pˇ.


PˇS	τS
 
λ 
) T PˇS
/
/∇S

S	/
/s
PˇTS 
The intuition is that the natural transformation τ is a semantic translation of the predicate lifting λ. In other words, τ factors λ through ∇.
Unfortunately, we can not just use τ to define a translation. Since τ is a natural transformation just relating power sets, in principle it neither involves Moss’ lan-
guage nor the language Lκ (Λ). Recall that Moss’ language łκ is an algebra for
T	T
the functor L := Pκ + T + I. Empirical evidence, coming from examples, shows the main problem to define a translation is to transform formulas in łκ to formulas in Tłκ , i.e. to transform formulas for which we can not apply Moss’ modality into formulas to which we can apply Moss modality. The examples also suggest that this transformation can be done using boolean combinations of formulas plus some kind of natural transformation. Hence, we do not want involve all L, but only the
boolean part of L. In summary, the idea is not to use natural transformation τ : Pˇ
−→ T Pˇ, but a natural transformation τ : U −→ TU , where U is the forgetful functor U : Alg(Pκ + I) −→ Set. Notice that this argument still works for polyadic liftings. The above considerations lead us to the following definition.
Definition 3.4 [logical translators] Let λ be an η-ary predicate lifting for a functor
T , and let U : Alg(Pκ + I) −→ Set be the forgetful functor. A logical translator τ for

λ is a natural transformation τ : (U )η —→ TU such that that the following diagram


(УˇS)η
 
λ 
τPˇS

) T УˇS
/
/∇S

S	/
/s
УˇTS 
commutes, in Set, for every set S.  Here τPˇS is the component corresponding to the power set algebra УˇS. We call the functions τPˇS the components of the power set restriction of τ . Also notice that the two vertices at the top should be U УˇS and TU УˇS, respectively, but we omit the forgetful functor to simplify our
notation.
We would like to make some observations before presenting some examples.
Observation 1: notice that the components of a boolean transformation τ are indexed over algebras Alg(Уκ + I). This means that given an algebra A, the A component of τ is a function τA : A —→ T A, where A is the carrier set of A. This also implies that for each algebraic structure over A there should be a function from A to T A. In principle different algebraic structures with the same carrier set have different components.
Observation 2: Notice that a natural transformation τ : (U )η —→ TU is a logical translator for λ iff for each η-sequence —→ of subsets of S the following holds
—→	—→
λS(X ) = {s ∈ TS | (s, τPˇS (X )) ∈ T (∈S)}.
Observation 3: Notice that a natural transformation τ : (U )η —→ TU defines a natural transformation τPˇ : (Уˇ)η —→ T Уˇ, as follows: Given a set S, the S-component
of τPˇ is the S+-component of τ , where S+ is the power set algebra with underlying
set УˇS. In other words (τPˇ)S = τS+ . We call the natural transformation τPˇ the
power set restriction of τ . Since the underlying set of S+ is УˇS, we write τPˇS
instead of (τPˇ)S. This justifies the terminology used in the previous definition.

Examples of Logical Translators
Now we would like to present some examples of logical translators. We will also make the translations produced from those logical translators explicit. These translations can be computed as a consequence of Theorem 4.2; we will always assume the formula inside the predicate lifting can be translated. In all the examples presented here we assume 2 = {T, ⊥}. We start with the covariant power set functor.
Example 3.5 Let be the predicate lifting associated with the existential modal- ity (for the covariant power set functor). We define a logical translator τ for with the following components: τA : A —→ УA maps an element x ∈ A to τA(x) = {x, T}. This logical translator produces the translation t( ϕ) = ∇{t(ϕ), T}.

Example 3.6 Let T be the covariant power set functor and consider the predicate lifting λ{Τ} associated with the set {T}∈ У2. Recall that this predicate lifting has the following components: a set X ⊆ S is mapped to
λ{Τ}(X) = {U ⊆ S | U /= ∅ and U ⊆ X}.
We define a logical translator τ for λ{Τ} where the function τA : A —→ УA maps an element x ∈ A to τA(x) = {x}. This logical translator produces the translation t(λ{Τ}ϕ) = ∇{t(ϕ)}.
Example 3.7 Let T be the covariant power set functor and consider the predicate lifting λ{Τ,⊥} associated with the set {T, ⊥} ∈ У2. Recall that this predicate lifting has the following components: a set X ⊆ S is mapped to
λ{Τ,⊥}(X) = {U ⊆ S | U ∩ X /= ∅ and U ∩ чSX /= ∅}.
We define a logical translator τ for λ{Τ,⊥} where the function τA : A —→ УA maps an element x ∈ A to τA(x) = {x, чAx}. This logical translator produces the translation t(λ{Τ,⊥}ϕ) = ∇{t(ϕ), чt(ϕ)}.
In the cases of multisets and distributions we have the following situation.
Example 3.8 Let λ(n,m) be a singleton lifting for the multiset functor. We define a logical translator τ for λ(n,m) where the function τA : A —→ УNA maps an element x ∈ A to the following bag: B(x,n,m) : A —→ N
B(x,n,m)(x) = n, B(x,n,m)(чAx) = m, and B(x,n,m)(a) = 0 for any other element. Using this we obtain the following translation t(λ(n,m)ϕ) = ∇B(t(ϕ),n,m).
Example 3.9 Let λq be a singleton lifting for the distribution functor. A logical translator τ for λ has the following components: The function τA : A —→ ÐA maps an element x to the following distribution μ(x,q) : A —→ [0, 1]
μ(x,q)(x) = q, μ(x,q)(чAx) = 1 — q, and B(x,q)(a) = 0 for any other element.
The translation induced by this logical translator is t(λqϕ) = ∇μ(t(ϕ),q).
Now we will present examples using the identity functor and constant functors; these examples will be used in the proof of Theorem 4.10.
Example 3.10 Let λd be a singleton lifting for a functor with constant value D. We define a logical translator τ where the A-component is the function τA : A —→ D with constant value d. This logical translator produces translation t(λdϕ) = ∇d.
Example 3.11 Let λ{Τ} and λ{⊥} be the two singleton liftings of the identity func- tor. The identity natural transformation 1U : U —→ U is a logical translator for λ{Τ}. This logical translator produces the translation t(λ{Τ}) = ∇t(ϕ).
We define a logical translator for λ{⊥} as follows: the A-component is the function чA : A —→ A corresponding to negations, notice that every algebra in

Alg(Уκ + I) has one of such functions. This logical translator produces the trans- lation t(λ{⊥}) = ∇чt(ϕ).
Now we will show how we can combine logical translators to obtain logical translators of more complex functors. The following examples (constructions) will be used in the proof of Theorem 4.6. We start composing with the covariant power set functor.
Example 3.12 Let T be a functor and fix P ∈ УT (2). There are two facts to notice here. First fact is that P ⊆ T (2), therefore for each p ∈ P there exists a
predicate lifting λp : Уˇ —→ УˇT for T . The second fact is that P itself defines a
singleton lifting λP : Уˇ —→ УˇУT for УT .
Using example 2.27 we can prove the following. If for each p ∈ P there exists a natural translator τp : U —→ TU for the predicate lifting λp : Уˇ —→ УˇT for T , then the natural transformation τP : U —→ УTU , in which the A-component is the function (τP )A : A —→ УTA mapping an element x ∈ A to the set (τP )A(x) =
{(τp)A(x) | p ∈ P}, is a logical translator for the singleton lifting λP : Уˇ —→ УT Уˇ associated with P for the functor УT . This also works for polyadic predicate liftings.
Now we will illustrate the case of coproducts.
Example 3.13 Let τ be a logical translator for an η-ary predicate lifting λ for a functor T , and let T ' be any other functor, for which we can define Moss’ language.
By the universal property of coproducts there exists a natural transformation

iT : TU —→ TU + T 'U,

where U is the appropriate forgetful functor. Composing iT with τ we obtain a new natural transformation iT τ : (U )η —→ TU + T 'U , this natural transformation happens to be a logical translator for the predicate lifting (λ, λ⊥) for T + T ', where λ⊥ is the predicate lifting of Example 2.21. In other words, we extended τ via coproducts. This procedure also works for polyadic predicate liftings. Notice that if λ is a singleton lifting associated with p ∈ T (2η ), then (λ, λ⊥) is the singleton lifting associated with p, but for the functor T + T '.
Logical translators can also be extended using products.
Example 3.14 Fix two functors T1 and T2 and two singleton liftings λp1 and λp2 , respectively. Assume τp1 is a logical translator for λp1 , and τp2 is a logical trans- lator for λp2 . By the universal property of products, there exists a unique natural transformation
τ = (τp1 , τp2 ) : U —→ T1U × T2U.
Given an algebra A, of the appropriate type, τA maps an element x ∈ A to ((τp1 )A(x), (τp2 )A(x)). Furthermore τ is a logical translator for the predicate lifting λ(p ,p ) : Уˇ —→ Уˇ(T1 × T2). Recall that λ(p ,p ) is a singleton lifting for T1 × T2 and
1 2	1 2
maps a set X ⊆ S to λ(p1,p2)(X) = λp1 (X) × λp2 (X). This procedure still works for polyadic predicate liftings.

Logical translators vs Natural transformations
Based on the previous examples we can explain a more general phenomenon, namely that every natural transformation τ : (—)η —→ T deﬁnes an homonymous natural transformation τ : (U )η —→ TU that is in fact a logical translator. This property will become important in Section 5. A first remark is the following result.
Proposition 3.15 Every natural transformation τ : (—)η —→ T deﬁnes an homony- mous natural transformation τ : (U )η —→ TU, where U : Alg(Уκ + I) —→ Set is the forgetful functor.
Proof. Given a natural transformation τ : (—)η —→ T we define an homonymous natural transformation τ : (U )η —→ TU taking the same function for all algebras with the same carrier set. More explicit, given algebras A and A' with underlying set A we define
τA = τA' = τA.


Another interesting property is presented in the following proposition.
Proposition 3.16 Every natural transformation τ : (U )η —→ TU is a logical trans- lator for some polyadic predicate lifting λτ .
Proof. Define λτ composing the power set restriction (Observation 3 after Def-
inition 3.4) of τ , i.e τPˇ : (Уˇ)η —→ T Уˇ, with the natural transformation associ-
ated with Moss’ modality. In other words the S component of λτ is the function (λτ )S = ∇SτPˇS . It is clear from the construction that τ will be a logical translator for λτ .	 
Corollary 3.17 Every natural transformation τ : (—)η —→ T deﬁnes an homony- mous natural transformation τ : (U )η —→ TU that is in fact a logical translator.
Properties of Translators
In the previous section, we defined the concept of logical translator and illustrated it with examples. Now we will show how to obtain translations from logical translators.

Translations from Translators
Notice that If τ is a logical translator for a predicate lifting λ, since Moss’ language
κ is an expansion of an algebra in Alg(Уκ + I), there exists a function τMκ :
(łκ )η —→ Tłκ .
T	T
Definition 4.1 If τ is a logical translator for a predicate lifting λ, for a functor T ,

the function τMκ : (łκ )η —→ Tłκ
is called the signature of the translator. Since

T	T	T
τ is a logical translator, we write mλ instead of τMκ . We do this to keep in mind
the predicate lifting λ.

Another relevant observation is: since [—]]σ	is a morphism of L-algebras, in
particular it is a morphism of Уκ + I-algebras. Therefore, the naturality of τ implies that the following diagram


κ T

[[—]]σ
mλ	) Tłκ

T ([[—]]σ )

M	M
v	v
ˇ		)
УS	τPˇS	T УˇS
commutes, where mλ is the signature of the translator. More explicitly, it says that
for any formula ψ ∈ łκ the equation τPˇS [[ψ]]σ  = T ([[—]]σ )mλ(ψ) holds. Notice
that the bottom function in the previous rectangle coincides with the function at the top of the triangle defining logical translators. Putting those two diagrams together we obtain the following diagram


κ T

[[—]]σ
mλ	) Tłκ

T ([[—]]σ )

M	M
v	v
ˇ		.	)

УS	τPˇS
 
λ 
T УˇS
/
/∇S

S	/
/s
УˇTS 
This diagram commutes, for every set S, because it was constructed from two commutative diagrams. The commutativity of this last diagram implies that for
every formula ψ ∈ łκ the equation


λS[[ψ]]σ
= ∇ST ([[—]]σ
)mλ(ψ)	(3)

holds. Compare this last equation with equation (2) on page 11. Notice that a sim- ilar equation still holds for polyadic predicate liftings. Readers that worry about the mix of λ with the semantic of a Moss’ formula should recall that λ is a natu- ral transformation and therefore the right side on the previous equation makes sense.

Now we can construct our function t from a logical translator τ . We will illustrate the construction proving the following result.
Theorem 4.2 For every accessible and weak pullback preserving functor T, every predicate lifting λ for T, and every formula ϕ ∈ Lκ (Λ), if there exists a logical translator for λ and ϕ can be translated into Moss’ language, then the formula λϕ can be translated into Moss’ language for T.
Proof. Based on the discussion above, it is enough to define a formula t(λϕ) such

that λS[[ϕ]]σ
= ∇ST ([[—]]σ
)t(λϕ), the translation of λϕ will then be ∇t(λϕ). We

define the desired formula as follows

t(λϕ) = mλ(t(ϕ)),

where mλ is the signature of the translator and t(ϕ) is a translation of ϕ. Now
we will show that it works. By hypotheses we already know that [ϕ]]σ = [[t(ϕ)]]σ .
L	M
Using this we conclude

λS[[ϕ]]σ = λS[[t(ϕ)]]σ

L	M
= ∇ST ([[—]]σ
= ∇ST ([[—]]σ
)mλ(t(ϕ))	(Equation (3) with ψ = t(ϕ))
)t(λϕ)	(Definition of t).


The two extremes of this chain are the equation we wanted to prove. This concludes our construction.	 
Notice that the previous result still holds for polyadic predicate liftings. If we have enough disjunctions we can prove the following result.
Corollary 4.3 Let T be an accessible and weak pullback preserving functor, let Λ0 be a set of predicate liftings such that for each of its members there exists a logical translator. If Lκ (Λ) is a PL-language such that Λ0 ⊆ Λ, and each predicate lifting λ ∈ Λ can be obtained as a join of predicate liftings in Λ0, then there exist a translation from Lκ (Λ) into łκ .
T	T
Proof. We will define a function t : Lκ (Λ) —→ łκ by induction on the complexity
T	T
of the formulas. The base case, i.e ϕ = T and boolean cases are done as usual. We have to show how to define t for formulas of the form λϕ. Since every predicate lifting in Λ can be obtained as a join of predicate liftings in Λ0, it is enough to define the function t for each predicate lifting in Λ0, i.e we can assume λ ∈ Λ0. We will define t(λϕ) by induction on the complexity of ϕ.
Assume ϕ = T, we define t(λϕ) = ∇mλt(ϕ) = mλT, where mλ is the signature of the translator for λ. The cases for conjunctions, disjunctions and negations are similar.
Assume ϕ = λ'ϕ', where λ' ∈ Λ. Our inductive hypothesis is that the function
t is already defined on ϕ'. By hypothesis we have λ = i∈I λi for some predicate liftings in Λ0, the previous theorem implies that we can translate all the formulas
λiϕ', i.e. we can define the function t for each formula λiϕ'. Using this and the previous theorem, we can see that defining t(λϕ) to be

t(λϕ) = ∇mλ(  t(λiϕ')) = ∇mλ(  mλ t(ϕ')))
i∈I	i∈I
works. This concludes the construction of t in formulas of the form λϕ. We conclude that the language Lκ (Λ) can be translated into Moss’ language for T .	 
The previous corollary will help us in the translation of KPFs, but also consider the following situation. If we can translate a predicate lifting λ into Moss’ language,

then we can also translate the predicate lifting чλ into Moss’ language. If we can also translate another predicate lifting λ', then we can also translate predicate liftings like λ Λ λ'. In a nutshell, if we can translate a set of predicate liftings Λ0 we can translate all boolean expressions over Λ0, i.e the elements in the free boolean algebra over Λ0. From this we can see that the previous corollary is a particular case of the following result.
Corollary 4.4 Let T be an accessible and weak pullback preserving functor, let Λ0 be a set of predicate liftings such that for each of its members there exists a logical translator. If Lκ (Λ) is a PL-language such that Λ0 ⊆ Λ, and each predicate lifting λ ∈ Λ can be obtained as a boolean expression of predicate liftings in Λ0, then there exist a translation from Lκ (Λ) into łκ .
T	T
Remark 4.5 Given a set of predicate liftings Λ, we write Уκ +Λ+ I for the functor with factor Iη for each η-ary predicate lifting λ ∈ Λ. The conditions in the previous corollaries (requiring that each predicate lifting λ ∈ Λ can be obtained as join or as a boolean expression, respectively, of predicate liftings in Λ0) are important because of the following situation. If they hold, we can define a functor, which we call it the translation functor,

F : Alg(Уκ + T + I) —→ Alg(Уκ +Λ+ I).

Assume Λ = Λ0. We can then define F as follows: an algebra A in Alg(Уκ + T + I) is mapped to an algebra F (A), with the same carrier set A and the following operations: it has the same conjunction and negations of A. Given λ ∈ Λ0 we define λF (A) = ∇AτA, where τ is a logical translator for λ. The functor F is the identity on arrows. The fact that τ is a natural transformation τ : (U )η —→ TU is what we need to prove that F is a functor. If not every predicate lifting in Λ can be expressed as a boolean expression of predicate liftings in Λ0, in principle, we can not define the functor F .
The category Alg(Уκ +Λ+ I) is interesting because, for a fixed set of predicate liftings Λ, the language Lκ (Λ) is the carrier set of an initial algebra in Alg(Уκ + Λ + I). Moreover, we can define a functor ST : Coalg(T )op —→ Alg(Уκ + Λ + I) analogue to the complex algebra functor (Definition 2.11) and then the satisfaction relation [—]]σ appears as a morphism from this initial algebra to ST (σ).
The functor F is interesting because we are defining an appropriate algebra structure on Moss’ language, actually we are defining and appropriate structure over all L algebras.  More important is to notice that the translation t : Lκ (Λ)
—→ łκ , described on the previous corollaries, is the initial arrow from Lκ (Λ) to
T	T
F (łκ ) in Alg(Уκ +Λ+ I), recall that F preserves carrier sets.
Furthermore, this can be done more abstractly. Any functor F : Alg(Уκ + T + I)
—→ Alg(Уκ + Λ + I) such that (i) faithful, (ii) UM = ULF and (iii) ST = FMT , where UM and UL are the appropriate forgetful functors, defines a translation from the language Lκ (Λ) into Moss’ language as an initial arrow. We call functor with these properties translation functors.

Extending Translators
Logical translators are particularly useful because they can be combined to obtain logical translators of more complex functors. In other words, logical translators can be extended via products, coproducts, and composition with the covariant power set functor. This is summarized in the following result.
Theorem 4.6 For every pair of functors T1 and T2, if every (monadic) singleton lifting for Ti has a logical translator, with i = 1, 2; then every singleton lifting for T ∈ {T1 + T2, T1 × T2, УT1} has a logical translator.
Proof. The proof of this theorem was already done along the text, it can be found in the examples. We will only point to the appropriate examples. The case of coproducts follows from Example 3.13, the case of products follows from Example 3.14, and the case of the power set functor was discussed in Examples 3.12, and 2.27.

The next corollary easily follows from the previous theorem.
Corollary 4.7 For every Kripke polynomial functor T, every (monadic) singleton predicate lifting for T has a logical translator.
Proof. The proof goes by induction on the complexity of T . Examples 3.10 and 3.11, in the previous section, show that for each singleton lifting of the base cases, the identity and constant functors, there exists a logical translator. The previous theorem implies that those logical translators can be inductively extended to any singleton lifting for a fixed KPF T . This concludes the proof.	 
This together with Corollary 4.3 implies the following theorem.
Theorem 4.8 For every Kripke polynomial functor T, if Λ0 is the set of monadic singleton liftings for T, then we can ﬁnd a translation
t' : Lω (Λ) —→ łω ,
T	T
where Λ is the set of all boolean expressions over Λ0,
Examples 3.8 and 3.9 show that in fact we can prove the following.
Corollary 4.9 For every (УN, Ð)-Kripke polynomial functor T, if Λ0 is the set of monadic singleton liftings for T, then we can ﬁnd a translation
t' : Lω (Λ) —→ łω ,
T	T
where Λ is the set of all boolean expressions over Λ0,
Notice that these translations are finitary, i.e. we are only using formulas of finite arity. Under the assumptions of Remarks 2.29 and 3.2 on pages 9 and 10, respectively, we can prove the following theorem.

Theorem 4.10 Let T be a Kripke polynomial over a set D. If |D| < κ, then we can ﬁnd a translation
t' : Lκ (Λ) —→ łκ ,
T	T
where Λ is the set of all monadic predicate lifting for T.
At the light of Example 3.8 we have.
Corollary 4.11 Let T be a УN-Kripke polynomial over a set D. If max{|D|, ℵ0} < κ, then we can ﬁnd a translation
t' : Lκ (Λ) —→ łκ ,
T	T
where Λ is the set of all monadic predicate lifting for T.
Based on Example 3.9 we have
Corollary 4.12 Let T be a Ð-Kripke polynomial over a set D. If max{|D|, 2ℵ0 } < κ, then we can ﬁnd a translation
t' : Lκ (Λ) —→ łκ ,
T	T
where Λ is the set of all monadic predicate lifting for T.
From Moss’ language to PL-languages
We concluded our last section illustrating how to translate singleton liftings, in the case of KPFs, using logical translators. As we saw with the example of the existential modality, not only singleton liftings can be translated using logical translators. In this section, we show how we can even translate some polyadic predicate liftings using logical translators. As an interesting consequence, we will obtain a translation backwards, i.e. we will be able to translate Moss’ modality. We start with a representation theorem for endofunctors in the category Set.
Theorem 5.1 (see [2]) For every accessible functor T, there exists a cardinal number κ such that for each set A, there exists a surjection
eA : Σ T (η) × Aη —→ T (A).
η∈κ
Moreover, these surjections constitute a natural transformation e.
Proof. This result was proved by Jiˇr´ı Ada´mek and Vera Trnkova´, see [2], we will only explain how to define the functions eA.
By the universal property of the coproduct, it is enough to define eA in each factor. Fix a cardinal number η, and pick a pair (p, s) ∈ T (η) × Aη. Notice that an element s ∈ Aη is a function s : η —→ A, applying T to s we obtain a function T (s) : T (η) —→ T (A), evaluating this last function on p we obtain the action of (eη)A. In other words
(eη)A(p, s) = T (s)(p).

The function eA is the coproduct of the functions (eη)A. The property of accessibility is used to prove that there exists a cardinal number κ such that the function eA is onto for each set A.	 
An immediate consequence of the previous theorem is the following result.
Lemma 5.2 Every p ∈ T (η) deﬁnes a natural transformation
ep : (—)η —→ T.

Proof. The previous theorem implies that for every η, there exists a natural trans- formation eη : T (η) × (—)η —→ T . Fixing the first component with p we obtain a natural transformation ep : (—)η —→ T . This natural transformation maps an element s ∈ Aη to ep(s) = T (s)(p).	 
Until here, we have not addressed the issue of translating polyadic predicate liftings. We have not developed a general method to translate polyadic liftings, but using logical translators we can translate a large class of polyadic predicate liftings. At a first glance, it might seem unlikely that a formula of the form λ(ϕ1, ··· , ϕη), where λ is an η-ary predicate lifting, can be translated into a formula of the form
∇Ψ. The previous results imply that such polyadic liftings exists. Combining the previous lemma with Proposition 3.15 and Proposition 3.16 on page 16, we obtain the following proposition.
Proposition 5.3 Every p ∈ T (η) deﬁnes an η-ary predicate lifting λp associated with p, furthermore ep is a logical translator for λp.
Example 5.4 If T is the covariant power set functor and 1 = {T}, we have У(1) = {∅, {T}}. we can easily see that e{T} produces the natural translator λ{T} of Example 3.6, furthermore e{T} is the logical translator produced using Theorem 4.6.
Notice that not all logical translators can be obtained using this method. The logical translator associated with the existential modality can not be obtained from an element in У(1). This last result illustrates a method to construct polyadic predicate liftings that can be translated using logical translators. We will say no more concerning translations of polyadic predicate liftings, we will go back to this issue in the conclusions.
Now we will address the issue of translating Moss’ modality. The examples in Section 3 and the previous result suggest that it might be hard to translate all formulas of type ∇Ψ using a single formula schema. The work done in this paper draws a path where a translation of Moss’ modality is parametric in Ψ, i.e for each
Ψ ∈ Tłκ we should find a polyadic predicate lifting λΨ and a sequence of formulas

—→	T
—→ σ	σ

ϕ such that [λΨ( ϕ )]]L = [[∇Ψ]]ł. In fact we will prove something stronger, we
will make our construction independent of the coalgebraic structure, just as it was explained in Section 3, more explicit we will construct λΨ and —→ϕ such that
(λ	——→σ	∇	σ
Ψ)S([[ϕ]]L) =	ST ([[—]]ł)(Ψ).

There is still one piece missing to construct our translation. We would like to define our translation inductively. Consider the following: given a formula ∇Ψ, by definition, we know Ψ ∈ T (łκ ). Using Theorem 5.1, we may pick η ∈ κ, p ∈
T—→	—→
T (η), and a sequence of formulas ψ = (ψi)i∈η ∈ (łκ )η such that ełκ (p, ψ ) = Ψ.
T	T
The intuition is that each formula ψi is less complex that Ψ then we can assume it has been already translated. This idea was suggested by Yde Venema in [7] Section 5. For lack of space we can not explain his idea in detail, we will only quote his definition, a small modification for non-standard functors will work in our framework.

Definition 5.5 [see [7]] Let T be a standard finitary functor, and let X be a set of objects to be called variables. Inductively we define, for each natural number n, the set ł#n(X) of coalgebraic (Moss’) formulas over X of depth n:
ł#0(X) is the smallest set M which contains ⊥, T, and all variables in X and satisfy (i) if p and q belong to M , then so do чp and p Λ q.
ł#n+1(X) is the smallest superset of ł#n which contains the formula ∇Ψ for
T	T
each Ψ that belongs to TQ for some finite Q ⊆ Tł#n and is closed under the

formation rule (i).
The following holds łω = 

ł#n(∅).


Using this definition, in the case of standard functors, we can choose the formulas (ψi)i∈η, defined above to be less complex that Ψ. This is done as follows: lets assume
∇Ψ has depth n + 1, then there exists a finite set Q ⊆ ł#n(∅) such that Ψ ∈ T Q, applying Theorem 5.1 to T Q, we obtain our desired sequence, using the naturality of e we can see that this works. With this observation in mind we can translate Moss’ modality.

Theorem 5.6 For every accessible functor T that preserves weak pullback, there
exists a cardinal number κ and a translation from łω into the language Lω (Λ),
where Λ contains all η-ary predicate liftings for all η ∈ κ.

Proof. Let κ be as in Theorem 5.1, with this assumption the idea behind this proof is the same idea used in the proof of Theorem 4.2. We will inductively define
a translation t : łκ —→ Lκ (Λ). We only explain how to define it in formulas of
the type ∇Ψ. By definition we know Ψ ∈ T (łκ ). Using Theorem 5.1 and the
observation above, we may pick η ∈ ω, p ∈ T (η), and a sequence of formulas —→
(ψi)i∈η ∈ (łT )#η less complex than Ψ such that ełκ (p, ψ ) = Ψ. Using this, we
define t as follows
t(∇Ψ) = λp(t(ψi))i∈η.

Now we show that this works. By inductive hypothesis we have (∀i ∈ η)([[t(ψi)]]σ =

[[ψi]]σ ). Using this we conclude that for all sets S we have


(λp)S([[t(ψi)]]σ )i∈η = (λp)S([[ψi]]σ
)i∈η

L	ł
= ∇S(ep)S([[ψi]]σ
)i∈η	(Definition of λp)

σ	—→	σ
= ∇ST ([[—]]ł)(ep)łκ ( ψ )	(Naturality of ep over [—]]ł)
σ	—→
= ∇ST ([[—]]ł)ełκ (p, ψ )	(Definition of ep)
—→
= ∇ST ([[—]]σ )(Ψ)	(Definition of	and p).

This concludes the proof.	 

Conclusions
We established a general relation between the expressive power of Moss’ language and the expressive power of PL-languages. We showed that the expressive power of Moss’ modality is strictly weaker than the expressive power of polyadic predicate liftings. This is stated in Theorem 5.6 where a non-constructive translation of Moss’ modality is defined for any accessible weak pullback functor, and in Example 3.1 where we present a concrete example of a predicate lifting that is not expressible in Moss’ language. However, the fact that Moss’ modality is strictly weaker than predicate liftings does not imply that Moss’ language is less expressive because the lack of expressive power of Moss’ modality can be overcome in the boolean part of Moss’ language, see corollaries 4.3 and 4.4.
In the backwards direction, we showed that, under appropriate assumptions, every monadic predicate lifting for a KPF can be translated using Moss’ modality, see Theorems 4.9 and 4.10. As corollary of those theorems we proved that we can also add the finite multiset functor and the finite distribution functor as base cases. In the general case, we illustrated how every functor T has a large class of predicate liftings that can be translated into Moss’ language; we don’t know if it is possible to translate all polyadic predicate liftings.
We have presented a new technique to compare coalgebraic modal languages which is based on the use of logical translators to define translations. The key property of logical translators is that they are natural transformations. This was an essential characteristic used in the proofs of Theorem 4.2, Theorem 4.6, and Theorem 5.6.
The translation functor defined in Remark 4.5 seems to be a useful tool to disprove conjectures about expressive power. This because such conjectures could, in principle, be translated into properties concerning the categories of algebras.
Some questions of interest are left open. Given a polyadic predicate lifting λ, Theorem 4.2 provides sufficient conditions to express λ into Moss’ language, a natural problem is to determine whether they are also necessary. The evidence shown in the examples suggests that if λ can be translated into Moss’ language using a formula of shape ∇Ψ, then this formula can be obtained using a logical translator. We conjecture that such a translation exist iff there is a logical translator

that produces it. Our intuition is that Moss’ language should be better understood as a three sorted algebra. One sort of elements, one sort of subsets of the previous sort, and one sort for the image of the first sort under the functor T . The idea is that logical translators are the term representable functions and that translations can only be obtained using term representable functions. The main issue being to explain what does it mean for a function f : A —→ TA to be term representable in this sorted signature.
Let Λ0 be the set of polyadic predicate liftings, for a functor T , for which there exists a logical translator. Theorem 4.4 shows that these predicate liftings have a privileged role among predicate liftings. The exact properties of Λ0 are still to be determined. Notice that Theorem 5.6 implies that for a κ-accessible functor T , the language Lκ (Λ0) is expressive.
We don’t know whether every predicate lifting has a logical translator. Our intuition is that this can not be the case. Since logical translators produce transla- tions, we conjecture that a predicate lifting can have at most one logical translator modulo isomorphisms. Following the same believes, we also conjecture that the translation functor (Remark 4.5) is the unique functor, modulo isomorphisms, with the following properties: (i) faithfulness, (ii) UM = ULF , and (iii) ST = FMT . We also do not know whether the translation of Theorem 5.6 has a more constructive presentation or can be produced as an initial arrow using some kind of translation functor.
Recent work of the author together with Alexander Kurz shows that for every cardinal η and every η-ary singleton lifting λ there exists a natural transformation τ : (Уˇ)η —→ T Уˇ such that λ = ∇T τ . This implies that for every set of predicate
liftings Λ, we can always define a functor F : CM —→ Alg(Уκ +Λ+ I), where CM are the algebras under the image of Moss’ functor. As a consequence we can see that the existence of a translation from the language Lκ (Λ) into Moss’ language reduces to extend the functor F to a functor F' with the following properties: (1) It has as domain a subcategory of Alg(Уκ + T + I) containing Moss’ language and the satisfaction relations for Moss’ language. (2) It is an extension of F . (3) It satisfies the conditions (i)-(iii) in the previous paragraph. The extension of F to
the functor F' is the extension problem. Logical translators are a maximal solution
to the extension problem, i.e. they allow us to extend F to a functor with domain Alg(Уκ+T +I) (Remark 4.5). We remark that Example 3.1 shows that the extension problem is not always solvable.
Another question relates to Theorem 4.6 and was suggested by Dirk Pattinson. We showed that logical translators can be extended when the functor T is composed with the covariant power set functor, so what is so special about У? Can we do extensions of logical translators using other functors? We conjecture that logical translators can be extended whenever the functor T is composed with a monad.
Singleton liftings seem to be interesting by their own, more research on their properties should be carried further. For example, as a consequence of the expres- sivity results in [6] we can show that the existence of a separating set of predicate liftings implies that the language Lκ (Λs), where Λs is the set of polyadic singleton

liftings for T up to arity κ, is expressive. Following Schro¨der, we notice that a separating set of predicate liftings exists iff the set Λs is separating.

References
Jiˇr´ı Ad´amek, Free algebras and automata realizations in the language of categories, Commentationes Mathematicae Universitatis Carolinae 15 (1974), pp. 589–602.
Jiˇr´ı Ad´amek and Vera Trnkov´a, Automata and algebras in categories, Kluwer Academic Publishers, Norwell, MA, USA, 1990.
Rau´l Andr´es Leal, Expresivity of coalgebraic modal languages, Master’s thesis, ILLC, Universiteit van Amsterdam, December 2007.
Lawrence S. Moss, Coalgebraic logic., Ann. Pure Appl. Logic 96 (1999), no. 1-3, 277–317, Erratum
published Ann.P.Appl.Log 99:241-259, 1999.
Dirk Pattinson, An introduction to the theory of coalgebras, Course notes for NASSLLI, 2003.
Lutz Schr¨oder, Expressivity of coalgebraic modal logic: The limits and beyond., FoSSaCS, 2005, pp. 440– 454.
Yde Venema, Automata and fixed point logic: A coalgebraic perspective, Information and Computation
204 (2006), pp. 637–678.
	 , Algebras and coalgebras, in Handbook of Modal Logic, ch. 6, pp. 331–426, Elsevier B.V, 2007.
James Worrell, Terminal sequences for accessible endofunctors, Electr. Notes Theor. Comput. Sci. 19
(1999), 39–53.
