Available online at www.sciencedirect.com


Electronic Notes in Theoretical Computer Science 333 (2017) 73–87
www.elsevier.com/locate/entcs

The Approximate Correctness of Systems Based on δ-bisimulation
Yanfang Ma1,2
School of Computer Science and Technology Huaibei Normal University
Huaibei, China
Haiyu Pan3
College of Computer Science and Technology Taizhou University
Taizhou,China

Abstract
The correctness of system is an important attribute to quantify the quality. δ-bisimulation based on complete lattices have been proposed to generalize the classical bisimulation. To analyze the implementations of system approximates its specification step by step, the infinite evolution mechanism of δ- bisimulation is established. Firstly, the relations between the implementations and specification under δ-bisimulation are analyzed, δ-limit bisimulation is defined and some examples of δ-limit bisimulations are given. Then, δ- bisimulation limit is proposed to state the specification is the limit of implementations. Some algebraical properties of δ-bisimulation limit are proved. Finally, in order to use the flexible hierarchic development and modular design methods to archive the limit, the continuous of δ-bisimulation limit under various combinators are showed.
Keywords: limit, correctness, bisimulation, complete lattice, fuzzy system


Introduction
Correctness is always very important to evaluate the quality of the system. Accord- ing the theory of process algebra, the correctness can be described as the equivalence relation between implementation and specification, such as bisimulation equivalence,

1 The work is supported by the National Natural Science Foundation of China (61672023, 61300048), the Anhui Provincial Natural Science Foundation (1708085MF159, 1508085MA14), the Key Natural Science Foundation of Universities of Anhui Province (KJ2014A223), the Excellent Young Talents in Universities of Anhui Province and the Major Teaching Reform Project of Anhui Higher Education Revitalization Plan (2014ZDJY058)
2 Email: clmyf@163.com
3 Email: phyu76@126.com

https://doi.org/10.1016/j.entcs.2017.08.007 1571-0661/© 2017 Published by Elsevier B.V.
This is an open access article under the CC BY-NC-ND license (http://creativecommons.org/licenses/by-nc-nd/4.0/).

trace equivalence, and so on. However, in real world situations, there exist many hardware equipments in a system, it is difficult to guarantee the completely equiv- alence. For a lots of systems, the implementations are approximately satisfied by specification [1,2,3]. In Ying’s opinions, there are at least two ways to loosen the correctness of system: the static approach and the dynamic approach [4,5]. In the static opinion, a certain small error between the implementation of a system and its specification is allowed. In this case, the system may be seen as an approximate implementation of the specification. A number of theories have been presented to describe approximate correctness in this method (for example [6,7,8,9]). The idea of these theories is to generalize the concept of equivalence with the psedometric, aiming at measuring the behavioral dissimilarities between nonequivalent models.
During the design of system, it is necessary to verify the correctness during the development. However, many reasons can lead to the first implementation can not satisfy specification, such as the inconsistence of program language and experience of developer, and so on. Hence the implementation should be modified step by step. An evolution sequence of implementations is obtained. From the course of design, we notice that the specification is the finial aim for the sequence of implementations. It means that the system is more and more correctness during the design. In order to describe this characterization, Ying proposed the dynamic approach to research the correctness [5]. It means that a sequence of implementations approximates the specification closer and closer. This sequence of implementations can be seen as an evolution toward the specification. Ying [5] proposed strong/weak limit bisim- ulations and strong/weak bisimulation limits to describe the infinite evolution of system correctness. In order to characterize the influence of environment, the first author of this paper presented parameterized limit bisimulation and two-thirds limit bisimulations [10,11]. Recently, ϵ-limit bisimulation and ϵ-bisimulation limit in de- terministic probabilistic processes were presented by the first author to characterize the dynamic correctness of a probabilistic system [12].
In order to obtain the approximate of system, the behavioral equivalences are extended to the quantitative cases and limit cases. However, most of these ex- tensions mainly focus on numerical behavioral equivalence semantics of a labeled transition systems(LTSs), where the truth values of metric between label actions come from real numbers. From the view of partial order set, the truth value in real numbers are comparable. But, Pan et al [13,14] showed some example to state that it is possible that the truth values in transition system are not numbers and are not linearly ordered. Based on this case, they extend the notion of simulation to the residuated lattice-valued setting[15]. Firstly, they generalize the labeled transition system to quantitative transition system (QTS). Then, δ-simulation is defined on QTS, which relaxes the equality of labels transitions in the classical simulation by allowing to perform transitions induced by different labels, as long as the truth degree between the labels is greater than or equal to the threshold δ taken from a certain lattice. Naturally, we can achieve the δ-bisimulation to offer a convenient co-inductive proof technique for establishing behavioral equivalence.
Although some interesting aspects of δ-simulation proposed by Pan et al. were

explored, δ-bisimulation generalize the classical bisimulation and the infinite evolu- tion of system correct remains unexplored when δ-bisimulation is chosen to verify the approximate correctness of the system. In real world situations, if the truth values of a system depending on are not numbers and are not linearly ordered, δ-bisimulation can be chosen to verify the approximate correctness of the system. Therefore, we need to characterize the infinite evolution mechanism of implementa- tions. The goal of this paper is to generalize δ-bisimulation to δ-limit bisimulation and δ-bisimulation limit. Furthermore, their algebraic properties will be discussed. In Section 2, some concepts and results of CCS and δ-bisimulation are re- viewed. In Section 3, δ-limit bisimulation is defined and some examples are shown. δ-bisimulation limit is proposed in Section 4. The uniqueness of δ-bisimuation limit and consistence with δ-bisimulation are proved. The substitutivity laws of δ-bisimulation limit under various combinators are stated in Section 5. Finally, we
conclude the paper in Section 6.


Preliminaries
CCS summary
Let Act = Γ ∪ {τ} be the set of actions, where τ is the silent or perfect actions, Γ be the set of labels. Define that l, lj, ··· range over Γ. The detail definition of the syntax of Communication and Concurrency System(CCS) can be found in [16]. Next, we only show the definition of process expressions.

Definition 2.1 [Process expression][16] The set of process expressions E includes
ℵ, K and the following expressions:
E ::= α.E | Σ Ei | E1 | E2 | E\X | E[f ],
i∈I

where X ⊆ Γ,f :Γ → Γ is a relabeling function, ℵ is the set of processes variables,
K is the set of processes constants and I is indexing set.

Generally, we call processes is the set of process expressions without variables, written by the sign P. The transitional semantics of CCS is presented in [17], which is the structural operational semantics.

Definition 2.2 [Labeled transition system(LTS)] [16] The transition relations →α (α ∈ Act) of a labeled transition system σ = (E, Act, {→α : α ∈ Act}) are showed in the following rules:

Act
Ej →α	j
Sumj Σ
	

α.E →α E
Ei →α	j
i∈I

(j ∈ I)
E →α Ej	F →α Fj

Com1	α
E | F →
Ej | F  Com2 E | F →α
E | Fj

E →l  Ej
¯
F → Fj
E →α Ej

Com3	τ
E | F →
Ej | Fj Res E\X →α
(α, α¯ ∈/ X)
Ej\X

Rel
E →α Ej
f (α)
P →α
Con	α
A →
Pj	def
(A = P )
Pj

E[f ] → Ej[f ]
δ-simulation
Pan et al. presented a new extension of LTS called quantitative transition systems (QTS), where the set of labels is equipped with a residuated lattice-valued version of classical equivalence relation. And, in order to extend the classical bisimulation to residuated lattice, δ-simulation has been defined in [15]. Next, we will review some definitions of lattice and δ-simulation. For the notations of lattice, the detailing contents can be found in the literature [18].
The lattice as a poset will be denoted by (L, ≤), and the lattice as an alge- bra (L, ∧, ∨). Sometimes we write simply L to denote the lattice in both senses. According to the theory of lattice, let (L, ∧, ∨) be a complete lattice and Y be a nonempty set, then any function f : Y 2 → L is an L-valued (lattice-valued) relation on Y .
For an L-valued relation f , if f (x, x) = 1 for all x ∈ Y , then f is reflexive; if f (x, y)= f (y, x) for all x, y ∈ Y , then f is symmetric; if f (x, y) ∧ f (y, z) ≤ f (x, z) for all x, y, z ∈ Y , then f is transitive. By the definition of equivalence relation, we know that an L-valued relation on Y is called an L-valued equivalence relation if f is reflexive,symmetric and transitive. An L-valued equivalence relation on Y satisfying that f (x, y) = 1 implies x = y will be called an L-valued equality relation. Next, we will recall the definition of quantitative transition system and δ-
simulation that was proposed by Pan et al [15].
Definition 2.3 [15] A quantitative transition system (for short, QTS) is Q = (A, θ), where
A = (S, Σ, R), which is called the support set of QTS, is an LTS, where S is the set of states, Σ is the set of labels, and R is the set of transition relations;
θ is an L-valued equality relation on Σ.
An LTS can be viewed as a degenerate QTS when θ is crisp. Because QTS gen- eralizes LTS, we can use QTS to get the transitional semantics of process expresses in order to describe the correctness of system more generally when the truth values

of labels are not numbers. The transition rules are same as LTS. The differences are that the set of states in QTS is set of process expresses, the set of labels is Act,
the transition relations is →α (α ∈ Act) and there is an L-valued equality relation θ
on Act. Thus, we can rewrite the δ-simulation on processes P according to the δ- simulation of Pan. etal [15]
Definition 2.4 [δ-simulation][15] Let Q = (A, θ) be a QTS and δ ∈ L. A relation
Sδ ⊆ P×P is called a δ-simulation if for any (W, V ) ∈ Sδ and for each α ∈ Act, when
α	j	β	j	j	j
W → W , there exist β ∈ Act and V → V such that θ(α, β) ≥ δ and (W ,V ) ∈ Sδ.
In order to offer a convenient co-inductive proof technique for establishing be- havioral equivalence, according to the definition of δ-simulation, naturally, we can define δ-bisimulation.
Definition 2.5 [δ-bisimulation] Let Q = (A, θ) be a QTS and δ ∈ L. A relation
Sδ ⊆P × P is called a δ-bisimulation if for any (W, V ) ∈ Sδ and for each α ∈ Act,
α	j	β	j	j	j
if W → W , there exist β ∈ Act and V → V such that θ(α, β) ≥ δ and (W ,V ) ∈
Sδ;
β	j	α	j	j	j
if V → V , there exist α ∈ Act and W → W such that θ(α, β) ≥ δ and (W ,V ) ∈
Sδ.
As usual, we use the symbol W ∼δ V to express W and V are δ-bisimilar if there exists a δ-bisimulation S such that (W, V ) ∈ S. In other words, δ-bisimilarity
∼δ is defined as ∼δ=  {Sδ : Sδ is δ − bisimulation}.

δ-limit bisimulation
When δ-bisimulation is chosen as the criteria of verifying the correctness between specification and implementation, the implementation may not satisfy the specifi- cation. To ensure that the implementation satisfies the specification, the implemen- tation will have to be modified.
A series of implementations are produced. For a simple system, these implemen- tations can form a sequence {Wn : n ∈ ω}, where ω is natural number set. In real world situations, W1, W2, ··· may not satisfy the specification V , but there exists n0 ∈ ω such that for any n ≥ n0, Wn can satisfy the specification V . According to the view of topology, specification V can be treated as the limit of these implemen- tations. Generally, for a complex system, it is consist of several modular that the modifications of implementation might be done by different modular at the same time. In this case, implementations after modification can form a partial order. Therefore, we can use the nets of processes to characterize this case. By the theory of domain, the net is a mapping from a directed set to a nonempty set. The net of processes is also a mapping from a directed set to processes set. For more details on directed set, cofinality, cofinality subset, net and subnet, the reader may refer to the literature [19,20].

We write PN for the class of all nets on P. For any {Pn : n ∈ D}∈ PN , where D is directed set, Pn ∈ P for any n ∈ D. Now, we give the definition of δ-limit bisimulation as follows.
Definition 3.1 [δ-limit bisimulation] Let Q = (A, θ) be a QTS and δ ∈ L, where A = (P, Act, {→α : α ∈ Act}), θ is an L-valued equality relation over Act. A relation Sδ ⊆ P × PN . If (W, {Vn : n ∈ D}) ∈ Sδ for any α ∈ Act satisfied the following conditions, then Sδ is called a δ-limit bisimulation:
if W →α Wj, then there are βn ∈ Act for every n ∈ D, {V j : n ∈ D} ∈ PN , and
βn	j	j	j
n0 ∈ D such that Vn → Vn, θ(α, βn) ≥ δ for any n ≥ n0 and (W , {Vn : n ∈ D}) ∈
Sδ;

βm
if C is a cofinal subset of D, V
j for any m ∈ C, then there are α ∈ Act,

m → Vm
Wj ∈ P, and a cofinal subset B of C such that W →α k ∈ B and (Wj, {Vk : k ∈ B}) ∈ Sδ.
Wj, θ(α, βk) ≥ δ for any

Compared to Definition2.5, the relation Sδ ⊆P × PN in Definition 3.1 is more complicated than Sδ ⊆ P × P in Definition 2.5. If specification of a system is abstracted as W , and the implementations which are obtained during the design are expressed as {Vn : n ∈ D}, then Sδ state the relation between specification and implementations. Furthermore, the conditions of δ-limit bisimulation need that W and Vn are related by δ-bisimulation for every n ≥ n0. Therefore, δ-limit bisimulation is an extension of δ-bisimulation.
Example 3.2 Let P = a.0+ b.0, Qn = an.0+ bn.0, n ∈ ω. Then the transition diagrams are shown in Fig.1. Since (ω, ≤) is a directed set, {Qn : n ∈ ω} ∈ PN , P ∈ P. Let L = ([0, 1], ≥), the partial order is great than and equal to on the set of the natural number order, and θ is an L-valued equality relation over the set of actions, where δ = 0.9 ∈ [0, 1].
θ(a, a)= θ(b, b)= θ(an, an)= θ(bn, bn)= 1,
θ(a, a0)= θ(b, b0)= 1 × 0.9,
θ(a, a1)= θ(b, b1)= 2 × 0.9,
θ(a, a2)= θ(b, b2)= 3 × 0.9,·
θ(a, an)= θ(b, bn)= (n − (n − 1)) × 0.9 when n ≥ 3, except the value of θ that have been defined, for any other actions θ(α, β) = 0, where α /= a or b, β /= ai or bi, i = 0, 1, ··· , n. The relation on P× PN is Sδ = {(W, {Vn : n ∈ ω}), (W1 = 0, {Wn = 0 : n ∈ ω}), (P2 = 0, {Vn = 0 : n ∈ ω}), (0, {0 : b ∈ B})}, where B is any cofinal subset of ω.
According to Definition 3.1, we can find that Rδ is a δ-limit bisimulation.
In fact, if P →a  P1, then there exist an ∈ Act for n ∈ ω, {Qj  = Wn : n ∈
n
an	j
ω} ∈ PN , and n0 = 3 such that Qn → Qn, θ(a, an) ≥ δ for any n ≥ n0 and

(0, {Qj
: n ∈ ω}) ∈ Sδ. If P →b
0, then there exist bn ∈ Act for n ∈ ω, {Qj
= Vn :

bn	j
n ∈ ω} ∈ PN and n0 = 3 such that Qn → Qn, θ(b, bn) ≥ δ for any n ≥ n0 and
(0, {Qj : n ∈ ω}) ∈ Sδ.

On the other hand, if C is a cofinal subset of ω and Qm am	j  = 0 for any
→ Qm

m ∈ C, then we suppose that C = {n
: l ∈ ω}. Thus Q	= Q
anl
j  for every

l	m	nl
→ Qnl

m ∈ C. So, there exist a ∈ Act, P j = 0, and a cofinal subset B = {nl +4 : l ∈ ω} of
C, such that P →a Pj, θ(a, ab) ≥ δ for b ∈ B and (P j, {Qj : b ∈ B}) ∈ Sδ. Finally,
we prove that Sδ is a δ-limit bisimulation.


Fig. 1. An example of δ-limit bisimulation
According to the definition of δ-limit bisimulation, the identical relation between processes can be extended to limit case.
Proposition 3.3 Let Q = (A, θ) be a QTS and δ ∈ L. Then,
IlimSδ = {(W, {Vn : n ∈ D}): W ∈ P, {Vn : n ∈ D}∈ PN , and there exists
n0 ∈ D such that Vn = W for eachn ≥ n0}
is a δ-limit bisimulation.
Proposition 3.3 states that if the obtained implementations are same to speci- fication after some modifications, then the relation between implementations and specification is δ-limit bisimulation.
Next, we will provide some attendant results, which are useful to describe the re- lation between specification and implementation of system. We consider the subnet closure of a relation between processes and nets of processes.
Let Q = (A, θ) be a QTS, and δ ∈ L, Sδ ⊆P × PN . Then we define
sub(Sδ)= {W, {Vn : n ∈ D}) : there exists (W, {Wm : m ∈ C}) ∈ Sδ such that
{Vn : n ∈ D} is a subnet of {Wm : m ∈ C}}.
Proposition 3.4 Let Q = (A, θ) be a QTS, δ ∈ L and Sδ ⊆ P ×PN . Then sub(Sδ)
is a δ-limit bisimulation if and only if for (W, {Vn : n ∈ D}) ∈ Sδ and α ∈ Act,
if W →α Wj, then there exist βn ∈ Act for every n ∈ D, {V j : n ∈ D}∈ PN , and
βn	j
n0 ∈ D such that Vn → Vn, θ(α, βn) ≥ δ for all n ≥ n0, and (W, {Vn : n ∈ D}) ∈
sub(Sδ);

βm
if C is a coﬁnal subset of D and V
j for all m ∈ C, then there exist

m → Vm

α ∈ Act, Wj ∈ P, and a coﬁnal subset B of C such that W →α
for k ∈ B, and (Wj, {Vk : k ∈ B}) ∈ sub(Sδ).
Proof. For the “only if”: it follows from Definition 3.1.
Wj, θ(α, βk) ≥ δ

For the “if” part: we need to prove sub(Sδ) is δ-limit bisimulation. Let (W, {Vn : n ∈ D}) ∈ sub(Sδ). Then by the construction of sub(Sδ), we can get (W, {Wm : m ∈ C}) ∈ Sδ such that {Vn : n ∈ D} is a subnet of {Wm : m ∈ C}. Furthermore, according to the definition of subnet, that there is a mapping f : D → C such that (D, f ) is a cofinality of C and Vn = Qfn for each n ∈ D. We can suppose that the mapping f is increasing by the theory of domain, which means that n1 ≤ n2 implies f (n1) ≤ f (n2).
If W →α Wj, then from the condition of Proposition 3.4, there are βm ∈ Act for

every m ∈ C, {V j
: m ∈ C}∈ PN
and m
0
β
∈ C such that Vm → Vm, θ(α, βm) ≥ δ

for all m ≥ m0 and (Wj, {V j
: m ∈ C}) ∈ sub(Sδ). Since (D, f ) is a cofinality of C,

there exists some n0 ∈ D with fn ≥ m0 for each n ≥ n0. Let V j = Wj
for every

n	fn

n ∈ D, we have that V = W
βfn
j  = V j for all n ≥ n , where {V j : n ∈ D} is

n	fn
→ Wfn	n	0	n

a subnet of {Wj : m ∈ C}. By the construction of sub(Sδ), (Wj, {V j : n ∈ D}) ∈
m	α	j	n
sub(Sδ). Therefore, if W → W , then there exist γn = βfn ∈ Act for every n ∈ D,
j	γn	j
{Vn : n ∈ D} ∈ PN , and n0 ∈ D such that Vn → Vn, θ(α, γn) ≥ δ for all n ≥ n0,
and (Wj, {V j : n ∈ D}) ∈ sub(Sδ).
βb	j
If B is a cofinal subset of D and Vb → Vb for all b ∈ B, then f (B) is a cofinal

subset of C. Let Wj
b
= V j for each b ∈ B. Then we can get that W
βb fb = Vb →

V j = Wj  for all b ∈ B. Furthermore, there exist α ∈ Act, Wj ∈ P and a cofinal
b	fb
subset H of f (B) such that W →α  Wj and (Wj, {Wj : r ∈ H}) ∈ sub(Sδ). Since f
is increasing, f—1(H) is a cofinal subset of B. Thus, we have that {Wj : r ∈ H} =
{V j : b ∈ f—1(H)} and (Wj, {V j : b ∈ f—1(H)}) ∈ sub(Sδ).	2
b	b
From Proposition 3.4, it is easy to get the following corollary.
Corollary 3.5 Let Q = (A, θ) be a QTS, δ ∈ L. If Sδ is a δ-limit bisimulation, then sub(Sδ) is also a δ-limit bisimulation.
According to Definition 3.1, we can obtain that any union of δ-limit bisimulation is δ-limit bisimulation.
Corollary 3.6 If δ ∈ L, (Sδ)i is a δ-limit bisimulation for each i ∈ I, then	(Sδ)i
i∈I
is also a δ-limit bisimulation.
δ-Bisimulation Limit
In this section, we will present the definition of δ-bisimulation limit in order to de- scribe the converge mechanism of system under δ-bisimulation. The δ-bisimulation limit characterizes the specification of system is the limit of implementations under δ-bisimulation.

Definition 4.1 Let Q = (A, θ) be a QTS, δ ∈ L, W ∈P and {Vn : n ∈ D}∈ PN .
W ∈ P is called a δ-bisimulation limit of {Vn : n ∈ D} if there is a δ-limit
bisimulation Sδ such that (W, {Vn : n ∈ D}) ∈ Sδ. We can use symbol W ∼δ
lim Vn to express this limit.
n∈D
Suppose that

∼δ lim =   (W, {Vn : n ∈ D}): W ∈ P, {Vn : n ∈ D}∈ PN and W ∼δ

lim Vn ,
n∈D



Then Corollary 3.6 tell us ∼δ
lim is the greatest δ-limit bisimulation.

The following proposition provides the recursive mechanism of δ-bisimulation limit.
Proposition 4.2 (Recursive deﬁnition) Let Q = (A, θ) be a QTS, δ ∈ L. Then

W ∼δ
lim Vn if and only if for any α ∈ Act,
n∈D

if W →α
Wj, then there are βn ∈ Act for n ∈ D, {V j
: n ∈ D} ∈ PN and

n0 ∈ D such that Vn →α
V j and θ(α, βn) ≥ δ with n ≥ n0 and Wj ∼δ lim V j;

n	n∈D  n
βm
if C is a coﬁnal subset of D, Vm → Qm′ for any m ∈ C, then there are
α ∈ Act, Wj ∈ P and B is a coﬁnal subset of C such that W →α  Wj and
θ(α, βk) ≥ δ, k ∈ B and Wj ∼δ lim V j.

k∈B

Proof. For the “only if” part: if W ∼δ
can easily get the conclusion.
For the “if” part: let
k

lim Vn, then according to Definition 3.1, we
n∈D

Sδ = {(W, {Vn : n ∈ D}): for α ∈ Act the conditions in Proposition 4.2 hold}. In the following, we need to show Sδ is a δ-limit bisimulation. In fact, if (W, {Vn :
n ∈ D}) ∈ Sδ, then the conditions in Proposition 4.2 hold for all α ∈ Act. Therefore,

Wj ∼δ
lim V j(Wj ∼δ  lim V j) holds. According to the ”only if” part, (Wj, {V j : n ∈

n∈D  n	k∈B  k	n
D}) ∈ Sδ((Wj, {Vk : k ∈ B}) ∈ Sδ). By the definition of δ- limit bisimulation, Sδ is

a δ-limit bisimulation. So, W ∼δ
lim Vn.
n∈D
2

According to the topology theories, the limit is unique. For δ-bisimulation limit, we also need to prove it is unique. The following proposition tells us if W and U are the limit of {Vn : n ∈ D}, then W and U are δ-bisimulation.
Proposition 4.3 Let Q = (A, θ) be a QTS, δ ∈ L. W, U ∈P and {Vn : n ∈ D}∈ 

PN . If W ∼δ
lim Vn, U ∼δ
n∈D
lim Vn, then W ∼δ U.
n∈D

Proof. Since W ∼δ
lim Vn, U ∼δ
lim Vn, we can find S1 and S2 are δ-limit bisim-

n∈D
n∈D	δ	δ

ulations such that (W, {Vn : n ∈ D}) ∈ S1, (U, {Vn : n ∈ D}) ∈ S2. Next, we need
δ	δ
to construct a δ-limit bisimulation Sδ ⊆ P × P such that (W, U ) ∈ Sδ. By Propo-
sition 3.4, we know that sub(S1) and sub(S2) are δ-limit bisimulations. Therefore,
δ	δ
let Sδ = sub(S1) ◦ sub(S2), where the composition of relations is defined as follows:
δ	δ
sub(S1)◦sub(S2)= {(W, U ) : there exists {Vn : n ∈ D}∈P such that (W, {Vn : n ∈
δ	δ
D}) ∈ sub(S1) and (U, {Vn : n ∈ D}) ∈ sub(S2)}, for anyS, Sj ⊆P × PN .
δ	δ
Now assume that (W, {Vn : n ∈ D}) ∈ sub(S1), (V, {Vn : n ∈ D}) ∈ sub(S2).
δ	δ
Since S1 and S2 are δ-limit bisimulations, we know that sub(S1) and sub(S2) are also
δ	δ	δ	δ
δ-limit bisimulations from Corollary 3.5. If W →α Wj, then there are {V j : n ∈ D}∈ 
βn	j
PN , βn ∈ Act for n ∈ D and n0 ∈ D such that Vn → Vn and θ(α, βn) ≥ δ for every
n ≥ n0, and (Wj, {V j : n ∈ D}) ∈ sub(S1). Since D[n0) is a cofinal subset of D, and
n	δ
βn	j	2	j

Vn → Vn for n ≥ n0, (V, {Vn : n ∈ D}) ∈ sub(Sδ ) implies that there exist V
∈ P,

γ ∈ Act and a cofinal subset B of D[n0) satisfy V
γ
→ V , (V
j, {Vb : b ∈ B}) ∈ sub(S2)

and θ(γ, βb) ≥ δ for b ∈ B. Thus, B being a cofinal subset of D[n0) leads to B is

a subnet of D, and {Vb : b ∈ B} is a subnet of {V j
: n ∈ D}. Furthermore,

(Wj, {V j : b ∈ B}) ∈ sub(S1). So, (Wj,V j) ∈ sub(S1) ◦ sub(S2). Since θ is L-valued
b	b	b	δ
equality relation, θ(α, βn) ≥ δ for n ≥ n0, θ(γ, βn) ≥ δ for n ∈ B ⊂ D[n0). So,
θ(α, γ) ≥ δ for n ∈ B. Thus, if V →α V j, then there are Wj ∈ P, β ∈ Act such that
j	j	1	2	β	j

(W ,V ) ∈ sub(Sδ ) ◦ sub(Sδ ) and W → W
and θ(α, β) ≥ δ.	2

Proposition 4.4 states if two specifications W and V are very similar, and the specification W is the limit of some implementations, then V is also the limit of these implementations.
Proposition 4.4 Let Q = (A, θ) be a QTS, δ ∈ L, W, V ∈ P, and {Vn : n ∈ D}∈ 

PN . If W ∼δ
V, and W ∼δ
lim Vn, then V ∼δ
n∈D
lim Vn.
n∈D

Proof. Since W ∼δ
lim Vn, there exist Sδ ⊆P × PN is a δ-limit bisimulation such
n∈D

that (W, {Vn : n ∈ D}) ∈ Sδ. We can construct the following set.
Sj = {(V, {Vn : n ∈ D}) : there exists W ∈P such that W ∼δ V
and (W, {Vn : n ∈ D}) ∈ Sδ}.
We only need to show Sj is a δ-limit bisimulation. In fact, let (V, {Vn : n ∈ D}) ∈

Sj , then we have W ∈P such that W ∼δ
V and (W, {Vn : n ∈ D}) ∈ Sδ. If V →α
V j,

δ	j	β	j

then W
~ V leads to there are W  ∈ P and β ∈ Act such that W → W , and

θ(α, β) ≥ δ, and Wj ∼δ V j. Since (W, {Vn : n ∈ D}) ∈ Sδ, there exist γn ∈ Act for
j	γn	j
n ∈ D, {Vn : n ∈ D}∈ PN , and n0 ∈ D such that Vn → Vn, θ(β, γn) ≥ δ for every
n ≥ n0 and (Wj, {V j : n ∈ D}) ∈ Sδ. Thus we get that (V j, {V j : n ∈ D}) ∈ Sj .
n	n	δ
Since L is a complete lattice and θ is an L-valued equality relation, the transitive
is satisfied, i.e., δ ≤ θ(α, β) ∧ θ(β, γn) ≤ θ(α, γn), i.e., θ(α, γn) ≥ δ for every n ≥ n0.

βb	j
On the other hand, if B is a cofinal subset of D and Vb → Vb for each b ∈ B,
then (W, {Vn : n ∈ D}) ∈ Sδ implies that there exist β ∈ Act, Wj ∈ P, and a cofinal
β	j	j
subset H of B such that W → W , θ(αk, β) ≥ δ for k ∈ H, and (W , {Vk : k ∈ H}) ∈

Sδ. Since W
∼δ V , there is γ ∈ Act and V j
∈ P such that V
γ
→ V , θ(β, γ) ≥ δ,

and Wj ∼δ
V j. Thus, since L is a complete lattice and θ is an L-valued equality

relation, the transitive property can leads to θ(αk, γ) ≥ θ(αk, β) ∧ θ(β, γ) ≥ δ for

k ∈ H. Thus, we obtain that (V j, {V j : k ∈ H}) ∈ Sj . Therefore, Sj
is a δ-limit

k	δ	δ

bisimulation and (V, {Vn : n ∈ D}) ∈ Sj , i.e., V ∼δ
lim Vn.	2
n∈D

The following Proposition 4.5 states that if the implementations of two teams are very similar from some modification and the implementation of one team is obtained based on the specification W , then the implementations of another team is also based on the same specification.
Proposition 4.5 Let Q = (A, θ) be a QTS, and δn ∈ L for n ∈ D, W ∈ P,
δ
and {V : n ∈ D}∈ P . If for some n ≥ n , V ∼ W for each

V	δn
n∈D[n0)
V	δn
n∈D[n0)

n ≥ n0, and W
lim Wn, then W
n∈D
lim Vn.
n∈D


Proof. Since W
V	δn
n∈D[n0)
~

lim Wn
n∈D

, there exists S	V	δn
n∈D[n0)

⊆ P × PN

such that

(W, {Wn : n ∈ D}) ∈ S	V
n∈D[n0)
δ . We construct the set Sj V
n∈D[n0)
= {(W, {Vn :

n ∈ D}) : there exists {Wn : n ∈ D} ∈ PN such that (W, {Wn : n ∈D}) ∈

S	V
n∈D[n0)
δn and for some n0
∈ D, W
δ
n ∼ Vn
for n ≥ n0}.

We only need to show Sj V
n∈D[n0)
is a
n∈D[n0)
δn-limit bisimulation.  In fact,

suppose (W, {Vn : n ∈ D}) ∈ Sj V
n∈D[n0)
δn . Then we have (W, {Wn : n ∈ D}) ∈

S	V	0
δn	α	j
n	n	0

δn and there exists n  ∈ D such that W  ∼ V  for n ≥ n . If W → W ,
n∈D[n0)

then (W, {Wn : n ∈ D}) ∈ S	V
n∈D[n0)
δn implies that there exist βn ∈ Act for n ∈ D,

j	βn	j

{Wn : n ∈ D} ∈ PN and n1 ∈ D such that Wn → Wn, θ(α, βn) ≥

n∈D[n0)
δn for

n ≥ n0, and (Wj, {Wj
: n ∈ D}) ∈ S	V
n∈D[n0)
δn . Since D is directed set, there exists

βn	j	δn
n2 ∈ D such that n2 ≥ n0 and n2 ≥ n1. Thus, we can get Wn → Wn and Wn ∼ Vn

for each n ≥ n . So, there exist V j ∈ P	and γ
γ
∈ Act such that V

0	n	N	n
j δn	j
n → Vn,

θ(γn, βn) ≥ δn, and Wn ∼ Vn for each n ≥ n2. Thus, for {Vn : n ∈ D} ∈ PN ,

there exist n
∈ D, {V j : n ∈ D} ∈ P , and γ
γ
∈ Act such that V

2	n	N	n
n → Vn,

θ(α, βn) ≥
n∈D[n0)
δn for every n ≥ n2 ≥ n1, and θ(βn, γn) ≥ δn ≥
n∈D[n0)
δn for

every n ≥ n2. Furthermore, since θ is an L-valued equality relation, we have that

θ(α, γn) ≥ θ(α, βn) ∧ θ(βn, γn) ≥
n∈D[n0)
δn for every n ≥ n2.

Conversely, if C is a cofinal subset of D and Vm αm	j for each m ∈ C, then

→ Vm
since C[n0) ⊆ C is a cofinal subset, we can obtain Vm αm	j
for each m ∈ C[n0).


δn	δm
→ Vm

Thus, Wn ∼ Vn for n ≥ n0 leads to Wm ∼ Vm for m ∈ C[n0). Therefore, there

exists Wj ∈ PN , βm
β
∈ Act such that Wm → Wm, θ(αm, βm) ≥ δ for m ∈ C[n0).

Since (W, {Wn : n ∈ D}) ∈ S	V
n∈D[n0)
δn and C[n0) ⊆ D is a cofinal subset, there exist

Wj ∈ P, γ ∈ Act, and a cofinal subset B of C[n	γ	j
0) satisfies W → W , θ(βb, γ) ≥


n∈D[n0)
δn for b ∈ B, and (Wj, {Wj
: b ∈ B}) ∈ S	V
n∈D[n0)
δn . Thus we can get a 

cofinal subset B of C such that (Wj, {Wj
: b ∈ B}) ∈ Sj V
n∈D[n0)
δn . Since θ is an

L-valued equality relation, for b ∈ B, θ(βb, γ) ≥
n∈D[n0)
δn and θ(αm, βm) ≥ δ when

m ∈ C[n0). So, θ(αb, βb) ≥ δ ≥
n∈D[n0)
δn when b ∈ B. By the transitive property of

L-valued equality relation, we have that θ(αn, γ) ≥
n∈D[n0)
δn for n ∈ B. Therefore,

j
δn
n∈D[n0)
is a
n∈D[n0)
δn-limit bisimulation.	2

The substitutivity laws of δ- bisimulation limit
The design of system needs many different modular. In order to archive the flexible hierarchic development and modular design methods, in this section, we will mainly discuss this substitutivity laws of δ-bisimulation limit under various combinators. Firstly, we will introduce the following definitions that are useful for the following theory.
Definition 5.1 [δ-round ] Let L be a complete lattice, and θ be an L-valued equal- ity relation on X. δ ∈ L, Y ⊆ X, x ∈ Y , θ(x, y) ≥ δ implies y ∈ Y , then Y is said to be δ- round.
Definition 5.2 [non-contractile] Let L be a complete latticea, and θ be an L-valued equality relation on X. f is a mapping from X into itself. If for any x, y ∈ X, θ(f (x),f (y)) ≥ θ(x, y), then f is said to be non-contractile.
Theorem 5.3 Let Q = (A, θ) be a QTS, and δn ∈ L, and θ be an L-valued equality relation on Act.

If W ∼δ
lim Vn, then α.W ∼δ
n∈D
lim α.Vn;
n∈D

If W ∼δ
lim Vn, then W + R ∼δ
n∈D
lim (Vn + R);
n∈D

If W ∼δ
If W ∼δ
lim Vn, then W [f ] ∼δ
n∈D
lim Vn, then W\L ∼δ
n∈D
lim Vn[f ] when f is non-contractile.
n∈D
lim Vn\L when Act L ∪ L¯ is δ-round
n∈D

Proof. (i) Firstly, we prove the first item in Theorem 5.3. If α.W →α  W , then

according to the transitive rule ’Act’ in Definition 2.2, we can get that α.Vn →α
Vn,

θ(α, α)=1 ≥ δ ∈ L for any n ∈ D. Furthermore, since W ∼δ
in Proposition 4.2 holds.
lim Vn, the condition
n∈D

On the other hand, if C ⊆ D is a cofinal subset, and α.Vm →α
Vm for every

m ∈ C, then we have W ∈ P, β = α ∈ Act and a cofinal subset B = C of C such

that α.W →α
W and θ(α, α) = 1 ≥ δ for every m ∈ C and W ∼δ
lim Vn. So, the
n∈D

condition (ii) in Proposition 4.2 holds. Therefore, Proposition 4.2 can guarantee

α.W ∼δ
lim α.Vn holds
n∈D

We prove the second item in Theorem 5.3. If W + R →α
Wj, then there are

two cases W →α Wj or R →α Wj.

Case 1: if W →α
Wj, then W ∼δ
lim Vn leads to there are {V j : n ∈ D} ∈ PN ,

n∈D
n
βn	j

βn ∈ Act for every n ∈ D and n0 ∈ D such that Vn → Vn and θ(α, βn) ≥ δ for

n ≥ n0 and Wj ∼δ lim V j. By the transitive rule jSumj
in Definition 2.2, we have

n∈D n	j
βn	j	j
that R + Vn → Vn. So, there exist {Vn : n ∈ D} ∈ PN and n0 ∈ D, such that

βn	j
j δ	j

R + Vn → Vn, θ(α, βn) ≥ δ for each n ≥ n0 and W
~ lim Vn. Thus we have that
n∈D

W + R ∼δ
lim (Vn + R).
n∈D

Case 2: if R →α
Wj. By the transitive rule jSumj
in Definition 2.2, we have

R + Vn →α
Wj for every n ∈ D. Let V j = Wj for every n ∈ D. Then we can find

j	n	α	j
a process net {Vn : n ∈ D} ∈ PN and n0 = n for some n ∈ D, R + Vn → Vn,

θ(α, α)=1 ≥ δ and Wj ∼δ
lim V j.

n∈D  n

βm
Conversely, if C ⊆ D is a cofinal subset and R + V
j for each m ∈ C.

m → Vm

β
Then by the transition rule ”Sum ” in Definition 2.2, we obtain that V
j for

j
βm	j
m → Vm

each m ∈ C or R → Vm for each m ∈ C.

βm
Case 1: if V
j for each m ∈ C. Since C ⊆ D is a cofinal subset and

m → Vm

W ∼δ
lim Vn, there is a cofinal subnet B of C, Wj ∈ P and α ∈ Act such that
n∈D

W →α
Wj, θ(α, βm) ≥ δ for m ∈ B and Wj ∼δ
lim V j . The transition rule ”Sumj”

m∈B  m

in Definition 2.2 can tell us W + R →α
Wj. So, we have that W + R ∼δ
lim (R + Vn).
n∈D

βm	j	δ
Case 2, if R → Vm for each m ∈ C, then since R ∼ lim R and C ⊆ D is a cofinal
n∈D

subset, we have a cofinal subset B ⊆ C, α ∈ Act and Wj ∈ P such that R →α
Wj,

θ(α, βm) ≥ δ for m ∈ B and Wj ∼δ
lim V j . Furthermore, W + R →α
Wj. Thus, we

can get that W + R ∼δ
n∈B  m
lim (R + Vn)
n∈D

We prove the third item in Theorem 5.3. Since W ∼δ
lim Vn, there exist
n∈D

Sδ is a δ-bisimulation such that (W, {Vn : n ∈ D}) ∈ Sδ. Next, we construct a
δ-bisimulation Sj ⊆ P × P.  We only need to prove (W, {Vn : n ∈ D}) ∈ Sj .

Let Sj
= {(W [f ], {Vn[f ] : n ∈ D}) : (W, {Vn : n ∈ D}) ∈ Sδ}. If W [f ] →α
Wj,

then we have that W
→ W , α = f (β) and Wj
= Wjj
[f ]. Since (W, {Vn : n ∈

D}) ∈ Sδ, there exist {V jj
: n ∈ D} ∈ PN and γn ∈ Act for every n ∈ D such

γ
that V
jj	jj

n → Vn , θ(β, γn) ≥ δ for each n ≥ n0, and (W , {Vn  : n ∈ D}) ∈ Sδ.
j	j	f (γn)	jj
By the transition rule Ref in Definition 2.2, we have that Vn[f ] → Vn [f ] for
each n ≥ n0. Thus, we can find a processes net {V j = V jj[f ] : n ∈ D} ∈ PN
f (γn)	j
and n0 ∈ D such that Vn[f ] → Vn for every n ≥ n0. Since f is non-contractile,
θ(α, f (γn)) = θ(f (β),f (γn)) ≥ θ(β, γn) ≥ δ for every n ≥ n0. At the same time,
according to the definition of Sj , we know that (Wjj[f ], {V jj[f ]: n ∈ D}) ∈ Sj .

δ	n
βm	jj
δ
γm	jj

On the other hand, if C ⊆ D is a cofinal subset, Vm[f ] → Vm, then Vm → Vm
, βm = f (γm), V j = V jj[f ] for each m ∈ C. Since (W, {Vm : m ∈ D}) ∈ Sδ,
jj	m	m	α	jj

there exist W
∈ P,a cofinal subset B of C and α ∈ Act satisfy W → W
, and

θ(α, γm) ≥ δ for m ∈ B and (Wjj, {V jj : m ∈ B}) ∈ Sδ. By the transition rule jRelj

in Definition 2.2, W [f ]
f (α)
→ W
jj[f ]. Thus, let Wj
= Wjj
[f ]. Then W [f ]
f (α)
→ W

and (Wj, {V j : m ∈ B}) ∈ Sj . f is non-contractile can guarantee θ(f (α),f (γm)) ≥

θ(α, γm) ≥ δ for m ∈ B.
We prove the fourth item in Theorem 5.3. W ∼δ

lim Vn leads to there exists
n∈D

a δ-limit bisimulation Sδ such that (W, {Vn:n∈D}) ∈ Sδ. Next, we construct a new
relation Sj ⊆P × PN .
Let Sj = {(W\L,{Vn\L : n ∈ D}): (W, {Vn : n ∈ D}) ∈ Sδ}. We only need to

prove that Sj
is δ-bisimulation.

In fact, if W\L →α
Wj, then we have that W →α
Wjj and α, α¯ ∈/ L ∪ L¯, Wj =

Wjj\L. Since (W, {Vn : n ∈ D}) ∈ Sδ, there exist {V jj : n ∈ D} and βn ∈ Act and

βn	jj
jj	jj

n0 ∈ D such that Vn → Vn and θ(α, βn) ≥ δ for any n ≥ n0, and (W , {Vn : n ∈
D}) ∈ Sδ. Since α, α¯ ∈/ L ∪ L¯, α, α¯ ∈ Act\L ∪ L¯. And Act\L ∪ L¯ is δ- round, and
θ(α, βn) ≥ δ lead to βn, β¯n ∈ Act\L ∪ L¯. Thus βn, β¯n ∈/ L. So, by the transitive rule
j	j	βn	jj
Res in Definition 2.2, we have that Vn\L → Vn \L for n ≥ n0. And, we obtain
the processes net {V j = V jj\L : n ∈ D} ∈ PN , βn ∈ Act and n0 ∈ D such that

βn	j
jj	j

Vn\L → Vn, θ(α, βn) ≥ δ for any n ≥ n0 and (Vn\L,{Vn \L : n ∈ D}) ∈ Sδ.
βm	j
On the other hand, if C ⊆ D is cofinal subset, Vm\L → Vm, then by the

β
transition rule, we can obtain V
j  = V jj\L, β
, β¯
∈/ L ∪ L¯. Thus,

β  , β¯
∈ Act\L ∪ L¯. Since V
m → Vm, Vm	m	m	m
βm	jj	jj

m	m	m → Vm, we find a cofinal subset B ⊆ C, W
∈P and

γ
γ ∈ Act satisfy W → W
jj, θ(γ, βm) ≥ δ for m ∈ B and (W
jj, {V jj : m ∈ B}) ∈ Sδ.

Since Act\L∪ L¯ is δ- round, and βm, β¯m ∈ Act\L∪ L¯, γ, γ¯ ∈ Act\L∪ L¯.Thus,γ, γ¯ ∈/ 

L∪L¯. Therefore, W\L γ Wjj
\L. Let W
j = Wjj\L, we can find a cofinal subset B of

j	γ	j
j	jj	j

C, W
∈P and γ ∈ Act, such that W\L → W
and (W , {Vm\L : m ∈ B}) ∈ Sδ. 2

Conclusion and Future Work
In this paper, we mainly discuss the infinite evolution of implementation under δ- bisimulation in order to describe the dynamic correctness of system. δ-limit bisim- ulation and δ-bisimulation limit are presented. They reflect the convergence mech- anism of implementation under δ-bisimulation, and state that the specification of system is the limit of a series of implementations under δ-bisimulation. From the the point of view of mathematics, the limit can produce a topology. As a future work, we will try to establish the topological theory of δ-bisimulation limit.

References
A. Girard, G. J. Pappas. Approximate bisimulations for constrained linear systems. In Proceedings of the 44th IEEE Conference on Decision and Control and European Control Conference, Seville, 2005, 4700-4705.
A. Di Pierro, C. Hankin, and H. Wiklicky. Quantitative relations and approximate process equivalences. In Proceedings of 14th International Conference on Concurrency Theory, Marseille, Springer-Verlag, LNCS, 2003, 2761:498-512.
T.Chen, T.Han, J. Lu. On metric for probabilistic systems: definitions and algorithms. Computers and Mathematics with Applications, 2009, 57:991-999.
Mingsheng Ying. Topology in Process Calculus: Approximate Correctness and Infinite Evolution of Concurrent systems. Springer-Verlag, New York, 2001.
M. S. Ying. Bisimulation indexes and their applications. Theoretical computer science, 2002, 275(1-2): 1-68.
U. Fahrenberg, A. Legay. The quantitative linear-time branching-time spectrum. Theoretical Computer Science, 2014, 538:54-69.
T. A. Henzinger. Quantitative reactive modeling and verification. Computer Science Research and Development, 2013, 28:331-344.
A. Henzinger,T. R.Majumdar, V.S.Prabhu. Quantifying similarities between timed systems. Formal Modeling and Analysis of Timed Systems, Lecture Notes in Computer Science, 2005, 3829:226-241.
J.Desharnais, F. Laviolette, M.Tracol. Approximate analysis of probabilistic processes: logic, simulation and games. In Proceedings of Fifth International Conference on Quantitative Evaluation of Systems, 2008, 264-273.
Yanfang Ma, Min. Zhang. Topological construction of parameterized bisimulation limit. Electronic Notes in Theoretical Computer Science, 2009, 257: 55-70.
Yanfang Ma, Min Zhang, Yixiang Chen. Formal sescription of software dynamic correctness. Journal of Computer Research and Development, 2013, 50(3):626-635.
Yanfang Ma, Min Zhang. The infinite evolution mechanism of є-bisimilarity. Journal of Computer Science and Technology, 2013, 28(6):1097-1105.
Haiyu Pan, Yongzhi Cao, Min Zhang, Yixiang Chen. Simulation for lattice-valued doubly labeled transition systems. International Journal of Approximate Reasoning, 2014, 55:797-811.
Haiyu Pan, Min Zhang, Hengyang Wu, Yixiang Chen. Quantitative analysis of lattice-valued Kripke structures. Fundamenta Informaticae, 2014, 135: 269-293.
Haiyu Pan, Yongming Li, Yongzhi Cao. Lattice-valued simulations for quantitative transition systems. Internatinal Journal of Approximate Reasoning, 2015, 56:28-42.
R. Milner. Communication and Concurrency. Prentice Hall, New York, 1989.
G. D. Plotkin. A Structural Approach to Operational Semantics. Technical Report DAIMI FN-19, Computer Science Department, Aarhus University, 1981.
R.Belohlavek. Fuzzy Relational Systems: Foundations and Principles. Springer-Verlag, New York, 2002.
R. Engelking. General Topology. Polish Scientific Publisher, Warszawa, 1977.
John L.Kelley, General Topology. Springer-Verlag, 1975.
