

Electronic Notes in Theoretical Computer Science 268 (2010) 31–47
www.elsevier.com/locate/entcs

Process Algebra with Hooks for Models of Pattern Formation
Andrea Degasperi1 and Muffy Calder2
Department of Computing Science University of Glasgow
Glasgow, U.K.

Abstract
We introduce Process Algebra with Hooks (PAH). In PAH processes represent different layers of abstraction, from biochemistry to tissue, and special synchronisations via hook actions ensure consistency between these abstractions. There is an explicit representation of geometrical space and the algebra has a stochastic semantics based on functional rates of reactions.
Keywords: process algebra, labelled transition system, pattern formation, geometrical space


Introduction
Deep analogies appear to exist between software and biochemical processes, leading to several modelling approaches based on the abstractions of molecule-as-process, species-as-process or pathway-as-process [3]. Existing formalisms have been ap- plied to the modelling of biological systems, such as π-calculus [17,15] and PEPA [10,2], while new ones have been developed for this specific purpose, such as Beta- Binders [14], Bio-PEPA [6], κ-calculus [8], BIOCHAM [4]. Attention has also turned to spatial aspects of behaviour, and there are several approaches that take space into account, usually in the form of topological locations [5,16].
Following this flow of research, we consider models that include a geometrical notion of space [9]. Here we present process algebra with hooks (PAH), a process algebra designed to capture essential features of models of pattern formation. Our approach is inspired by mathematical models of pattern formation that have their roots in the early work on morphogenesis of Turing [18]. Turing supported the

1 Email: andrea@dcs.gla.ac.uk
2 Email: muffy@dcs.gla.ac.uk

1571-0661 © 2010 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2010.12.004

hypothesis that, given an area with identical and uniformly distributed cells, pat- terns of different phenotypes arise due only to the diffusion and the local reactive activity of the molecules present in the cells. These ideas inspired new models that today are validated by increasing experimental evidence [12]. Additionally, Turing introduced the term morphogen, a special molecule whose concentration determines the phenotype of a region in space. Today, we know that this phenotype depends usually on the absolute concentration [11] of morphogens and in some cases on the relative concentration [13].
Following these concepts, in PAH we use processes to represent different layers of abstraction, e.g. from biochemistry to tissue. A bottom-up synchronisation of these layers via actions called hooks ensures the consistency of the abstractions. Moreover, an explicit notion of geometrical space is embedded in the algebra. Other features are borrowed from Bio-PEPA, such as multi-way synchronisation, functional rates and parsimony of the syntax. In this paper we focus mainly on the multi-layer aspect of PAH, rather than the spatial aspect.
Finally, using PAH we produce a temporary labelled transition system (temporary LTS), that we call temporary to emphasise that it is not intended to be used directly. The labels on the transitions present actions from every layer of abstraction, so they require to be filtered, to select the layer of abstraction that we are interested in. Eventually, we aim to use action based relations such as a probabilistic version of bisimulation to test whether two systems with different biochemistries form the same set of patterns.
In summary the contributions of this paper are the following:
syntax of labelled transition semantics of a process algebra featuring geometrical position and layers of abstraction with a biochemical layer being the lowest;
extensible activities acting on two layers of abstraction;
actions that include spatial position in Cartesian coordinates or represent trans- port between positions;
a listen operator for synchronising processes at different layers of abstraction;
examples including a model of tissue behaviour that is determined by biochemical reactions involving two positions;
extension to stochastic labelled transition systems.
The paper is organised as follows. In Section 2 we introduce PAH by examples, before presenting the formal syntax and semantics in Section 3. In Section 4 we show how to model the biochemical layer in PAH, while an example of the use of PAH is in Section 5. We conclude with discussion related work in Section 6 and conclusions and future work in Section 7. The interested reader will find the stochastic semantics is in Appendix A, additional formal definitions in Appendix B and the details of our formalisation of functional rates in Appendix C.

Process Algebra with Hooks by Examples
Example 2.1 Using the process as level of concentration abstraction, let Mv (i = 0,..., 3) be the process representing the morphogen M at a position v in space, with concentration level i. Moreover, let Tv and Tv be processes at a higher layer,
0	1
representing the possible states (the phenotypes) of the tissue T at position v.
Consider the following graphical representation of concurrent processes Mv and Tv,
0	0
where arrows represent actions that the processes can perform:

Actions a:v and b:v represent biochemical reactions that increase or decrease, respectively, the concentration of M at position v. The state of T changes when the absolute concentration of M passes a threshold. In this case, the action x:v denotes Tv becoming Tv, when Mv becomes Mv; and conversely Tv becomes Tv
0	1	1	2	1	0
with a y:v action when Mv becomes (by a b:v) Mv. It is important to note that
2	1
tissue layer actions x:v and y:v synchronise only with some instances of biochemical
layer actions a:v and b:v. These instances represent a concentration threshold and are represented by the different notation a:v[x:v] and b:v[y:v]. x:v and y:v are called hooks, because they link actions on different layers of abstraction bottom- up. a:v and x:v are indeed the same action, interpreted from two different layers of abstraction. They carry different but complementary pieces of information: a:v means the biochemical reaction Ra:v has happened, while x:v means a change at the tissue layer has been triggered. Note, we do not represent the execution of a:v[x:v] as an interleaving of the action names a:v and x:v. Instead, a:v[x:v] generates a single

transition of the form Mv
v a:v,x:v[x:v]	v
Tv, which carries the entire

1 x:v,y:v T0
−−−−−−−→ M2 x:v,y:v  1

information of what happened. The listen operator	 
x:v,y:v
composes processes on

different layers of abstraction that can synchronise on actions in the set {x:v, y:v}.
This operator is not commutative: the process on the left is at a lower layer of abstraction.
Example 2.2 More complex relations between biochemistry and tissue can be de- scribed. In this example, the state change of T is triggered when the concentration of morphogen A surpasses the concentration of morphogen B. We define additional utility process Pi to represent the difference between the concentration levels of A and B.


A can degrade (dA:v), B can be produced (pB:v), while both A and B can syn- chronise (s:v) so that a level of B is converted into a level of A. Pv represents the


 
Fig. 1. Example 4: graphical representation of transport actions of process Ae .

difference A−B, while a:v and b:v actions represent events that make this differ- ence increase by two and decrease by one respectively. An example of a transition

is ((Av D  Bv) 
Pv ) 
v  s:v,a:v,x:v[a:v,x:v]
v D  Bv) 
Pv) 
Tv.

1 s:v
2 a:v,b:v
−1  x:v,y:v T0
−−−−−−−−−−−→ ((A2
s:v
1 a:v,b:v
1  x:v,y:v  1

The parallel operator D  composes processes at the same layer of abstraction that
s:v
can synchronise on actions in the set {s:v}.
Example 2.3 If a layer of abstraction triggers more than one hook, the resulting set of hooks can be caught in sequence by multiple listeners or in parallel by a single listener. Consider the following processes:

Given	these	processes,	two	possible	examples	of	transitions	are

((Av D  Bv)  Pv)  Qv
s:v,x:v,y:v[x:v,y:v]
((Av D  Bv)  Pv)  Qv
and

s:v	1  x:v	0  y:v	0
−−−−−−−−−−−→
s:v	0  x:v	1  y:v	1

(Av D  Bv)   Rv
s:v,x:v,y:v[x:v,y:v]
(Av D  Bv)   Rv,	which	represent

s:v	1 x:v,y:v	0
−−−−−−−−−−−→
s:v	0 x:v,y:v	1

hook synchronisations in sequence and in parallel respectively.
Example 2.4 The positioning of hooks on actions at the biochemical layer simpli- fies the construction of utility processes and is particularly useful when geometrical

space is considered as a grid of locations. Let Ae
denote the process representing a

concentration level n of species A at position e. Concentration can migrate to and from the position e and many different transport actions will have the same effect of lowering or increasing the concentration at one position in space, as shown in the diagram in Figure 1. For example, A can decrease a level of concentration, from Ae

e n−1
, through a transport action of the form t:(e → s), s ∈ {b, d, f, h}. t is the

action name, and e and s are positions. (e → s) denotes transport from position e

to position s. At position s, a process As
will synchronise and become As
. If

we want to denote that a threshold is crossed when passing from level n to n − 1 of A at e, we can add a hook to the four transport actions, that for example become t:(e → s)[y:v].
As an aid to the reader, we conclude this introduction with an explanation of the terminology of actions and their composition. So far, we have been using actions of the kind a:v[x:v] or b:v. a, b and x are action names, v is a location and the compositions of action names and locations, e.g. b:v, are called actions. A set of actions {a:v, b:s, . . . } is called an activity. In fact, processes can perform only what

we call an extensible activity, written A[H], where A and H are activities. If H is empty, a short hand notation for A[H] is A. To simplify the notation, we omit the curly brackets { and } when this does not generate ambiguity. Finally, when we write a:v[x:v] we mean the extensible activity composed of two activities, both singletons, while when we write b:v we mean the extensible activity composed of two activities, where the first is a singleton and the second is empty and so omitted.

Process Algebra with Hooks
Process algebras afford a richer modelling and analysis paradigm than traditional differential equations by offering formal, executable models as well as comparison of models by relations, e.g. simulation and bisimulation.
In this paper we present a new process algebra, PAH. Due to space limitations we concentrate here on the syntax, semantics and examples of use. While we do not define relations here, the reader should bear in mind our overarching motivation for this algebra is comparing systems with different underlying biochemistries.
The distinctive features of the syntax are: extensible activities, acting on two layers of abstraction, actions that include spatial position or transport between positions and a listen operator that synchronises processes at different layers of ab- straction. In addition, there are the standard operators such as parallel composition, prefix and choice.
We now define PAH formally.
Syntax of PAH. The syntax of PAH is defined as:
S ::= nil | Lj[Ljj].Cv | S + S	P ::= P D  P | P  Cv | Cv
L	L′
L ::= ø | Lj	Lj ::= a:m | a:m, Lj	Ljj ::= ø | a:m m ::= v | (v → v)	v ::= (z, z, z)		Cv , S
where:
S ∈ Ps and P ∈ Pm are respectively the sequential component, used to represent the behaviour of biochemical species or of higher layers of abstraction, and the model component, that represents the state of the model. Ps is the set of sequential components while Pm is the set of model components. Cv is a constant, with Cv ∈ Pc ⊆ Pm, where Pc is the set of constants. Sequential and model components are in general referred to as components or processes and form the set of processes P = Pm ∪ Ps;
a ∈ A, A = {a, b, c, ...}, is an action name belonging to A;
a:m ∈ Act, Act = {a:m1, b:m2, c:m3, ...}, is an action belonging to the set of actions Act. A set of actions A⊆ Act is also called an activity;
m is either the position v used to identify the spatial position in three Cartesian coordinates (z, z, z), z ∈ Z, of a constant or an action, or the pair of positions (v → v) of transport actions;

nil is the deadlock process. L, Lj, Ljj are sets of actions (L, Lj, Ljj ⊆ Act), Lj is a non empty set and Ljj is either empty or a singleton set;
Lj[Ljj] ∈ Ext, Ext = {A[H] | A, H ⊆ Act}, is an extensible activity belonging to the set of extensible activities Ext. Given A[H] ∈ Ext, A is a set of regular actions and H is a set of hooks.
A[H].Cv is the prefix of an extensible activity to a constant;
S + S is the choice between sequential components;
P D  P is the cooperation of model components, synchronising on the actions in
L
L;
P  Cv is the cooperation of model components synchronising between layers of
L
abstraction on the actions in L. Process Cv is a listener of actions in P , which
it can synchronise with or ignore;
Cv , S is a constant definition. The sequential component S captures the be- haviour of the constant Cv.
Given A[H] ∈ Ext, if H = ø, A[H] can be written A.
Semantics of PAH. The semantics of PAH is given by a temporary LTS Lu = (Pm, Act, →u), where Pm is the set of model components, Act is the set of actions and →u is a transition relation such that →u⊆ Pm × Ext × Pm. Lu is defined by the following derivation rules:

Prefix	Constant
A[H]	v
, A[H] ∈ Ext	S1 −−−→ C2 , Cv , S



A[H]
v A[H]	v	1	1

A[H].Cv −−−→ Cv
C1 −−−→ C2

Choice Left	Choice Right
A[H]	v	A[H]	v

S1 −−−→ C3
A[H]	v
S2 −−−→ C3
A[H]	v

S1 + S2 −−−→ C3	S1 + S2 −−−→ C3
Cooperation Left	Cooperation Right
A[H]	A[H]
	P1 −−−→ P3			P2 −−−→ P4	
, A∩ L=ø	, A∩ L=ø

P D 
L
A[H]
P2 −−−→ P3
D  P
L
P D 
L
A[H]
P2 −−−→ P1
D  P
L

Regular Cooperation	Hook Ignore

A[£ ]
5[7 ]
A[H]

  P1 −−−→ P3	P2 −−−→ P4			P1 −−−→ P2	
,A∩B∩L/=ø	, H∩ L=ø

P D 
L
A∪5[£∪7 ]
P2 −−−−−−→ P3
D  P
L
P C
L
A[H]
−−−→ P2
  Cv
L

Hook Synchronisation
A[£ ]
v  5[7 ]	v

 P1 −−−→ P2	C′  −−−→ C′′ 
,  B[F] cond

P	v
L
A∪5[£∪7 ]
−−−−−−→ P	′′ L


B[F] cond: given Cv , B [F ].Cv + B [F ].Cv + ... + B [F ].Cv, let B be a B in

′	1	1	1
2	2	2
n	n	n	i

B1, B2, ..., Bn such that Bi ⊆ E and Bi ⊆ L (i.e. Bi ⊆ E ∩ L) and there is no Bj in
B1, B2, ..., Bn with larger cardinality than Bi such that Bj ⊆E ∩ L. We define this formally in Definition B.1.
As an example of hook synchronisation, consider the following sequential com- ponents, where positions are omitted to improve readability:
A , x[a].A	B , x[b].B	C , x[c].C Q0 , a.Q1 + a, b.Q2 + a, b, d.Q3

The transition (A D  B D  C)   Q0
x,a,b[a,b,c]
−−−−−−→ (A
D  B D  C)  Q2, is

x	x	a,b,c	x	x	a,b,c
performed because, although {a} /= {x} and {a} ⊆ {a, b, c}∩ {a, b, c}, Q0 cannot
become Q1 because {a, b} /= {x}, {a, b} ⊆ {a, b, c}∩ {a, b, c} and |{a, b}| > |{a}|. Then Q0 can become Q2, because although |{a, b, d}| > |{a, b}|, we also have that
{a, b, d} ¢ {a, b, c}∩ {a, b, c}.
Well-formed PAH model. We now introduce additional definitions, necessary to define a well-formed PAH model.
Definition 3.1 Biochemical Species. The set Species is the set of biochemical species. Every biochemical species S ∈ Species is associated with one or more constants, the biochemical processes, which represent different levels of concentration for S.
Definition 3.2 Functions species and level. “species: Pc → Species” is the func- tion that given a constant Cv returns the species S it is associated with. If Cv is not associated with a biochemical species, species(Cv) returns ⊥. Similarly, “level: Pc → N”, is the function that converts processes in their corresponding level of concentration. In analogy with the species function, level(Cv) returns ⊥ if Cv is not associated with a biochemical species.
Definition 3.3 Biochemical Actions. The set BioAct ⊆ Act is the set of biochem- ical actions.
Definition 3.4 Well formed PAH model. A PAH model is well formed if the fol- lowing conditions are met:
in the sequential component A[H].Cv, if A contains a biochemical action a:m, then A = {a:m};
species consistency, i.e. if a constant Cv changes to Cv after executing an exten-
1	2
sible activity A[H], then species(Cv)=species(Cv);
1	2
hooks never contain biochemical actions;
the lowest layer of abstraction contains biochemical processes and there is only one process for each species in the model.
We define this formally in Definition B.2.


 

Fig. 2. A temporary labelled transition system (left) is filtered, removing hooks and labels that are not in the set {x, y} (right).
Filtered LTS. The LTS Lu is called temporary because it is not intended to
A[H]
be used directly. Given a transition P −−−→ Q, the label A[H] has to be filtered,
removing the hooks and filtering the set of regular actions A. In particular, A con- tains several actions, but they might be just the same action, seen from different layers of abstraction. In the filtered system, depending on which layer of abstrac- tion is to be considered, only those actions belonging to that layer will be kept on the label.
The following curried function is used to filter the temporary LTS: filter : 2Act −→ (2Pm×Ext×Pm −→ 2Pm×2Act×Pm )
Given a set of actions T , which contains actions relative to a specific layer of abstraction, the function filter(T ) replaces each transition (P, A[H], Q) with a transition (P, B, Q), where B is the set intersection of T and A. If such intersection is empty, B is equal to {τ}, where τ is the hidden action. Function filter is defined formally in Definition B.3.
Definition 3.5 Filtered LTS. Given a temporary LTS Lu = (Pm, Act, →u) and a set of actions T , the filtered LTS Lp = (Pm, Act, →p), with →p⊆ Pm × 2Act × Pm, is given by (Pm, Act, filter(T )(→u)).
An example of LTS filtering is shown in Figure 2.
Stochastic semantics. We aim to formalise models of pattern formation where patterns arise due to biochemical reactions and diffusion. In order to provide accu- rate quantitative predictions, we developed a stochastic semantics for PAH, based on functional rates. This means that we can derive rates for the transitions of the LTS from arbitrary kinetics laws. The interested reader can find the stochastic semantics of PAH in Appendix A.
Abstraction of Biochemistry
PAH has been designed to model biochemical interactions localised in space, using the processes as levels of concentration abstraction. The concentration of each molecule S is divided in NS levels (NS + 1 with 0), with a common step size or granularity h. S has a maximum concentration MS, with h = MS/NS. Given two consecutive levels n and n + 1, a concentration in the range (h · n, h · (n + 1)] is represented by the discrete level n + 1. As a consequence, 0 is not considered a level, but it represents the absence of concentration.

Geometrical space is divided into slots of the same shape and volume, in a grid- like manner, where each slot is identified by a position v = (i, j, k), with (i, j, k) ∈ Z3. Slots are rectangular parallelepipeds with edges of length Δx, Δy and Δz. Given an origin of Cartesian axes (0,0,0), the Cartesian position of a corner of a slot is given by (i · Δx, j · Δy, k · Δz). For example, with respect to the dimension x, boundaries of slot i are at positions i·Δx and (i+1)·Δx. Each species S is identified by a position v of the slot where it is located, written as Sv. The concentration of a species is considered uniformly distributed within a slot.
Biochemical reactions are identified by a name a ∈ A and by a position v where it takes place, or a transition between positions v → vj if it is a transport reaction. We formalise the concentration of a species Sv using NS + 1 constant processes
Sv, Sv, ..., Sv , which represent different levels of concentration of Sv and from which
0	1	NS
the concentration can be computed simply by level(Sv)·h. We use one process to
represent a concentration level for each location where a species S can be present.

A more detailed example
Consider a portion of tissue, divided into two adjacent slots with positions v and s respectively. In these slots, two species A and B can be produced or can degrade, A can turn into B and B into A. Moreover, A and B can migrate freely between the two slots. To indicate, for example, molecule A in slot v we use the notation Av. In chemical form, the reactions of the system, and corresponding actions, are (i, j ∈ {v, s}, i /= j):

We use process Mj to indicate that a species M ∈ {A, B} at position j has a concentration level i ∈ {0, 1, 2}. In this example we want to express that an action happens at the tissue layer, when both A and B reach level two. We use an utility

process Pj
(j ∈ {v, s}, i ∈ {0, 1, 2}), which counts how many A or B are at level

two in position j. Pj denotes none of them, Pj denotes one of them and Pj means
0	j	1	2
both. Finally, we use a process Ti  to represent the state of the slot (tissue layer)
in position j, which can be inactive (T j) or active (T j). For i, j ∈ {v, s}, i /= j,
0	1
the PAH model presents the following constant definitions:

i , r1:i.Ai
+ r6:i.Ai
+ tA:(j → i).Ai

Ai , r1:i[p:i].Ai
+ r6:i[p:i].Ai + r2:i.Ai + r5:i.Ai + tA:(j → i)[p:i].Ai +

1	2
tA:(i → j).Ai
2	0	0	2


		



Fig. 3. Graphical representation of the processes.


i , r2:i[q:i].Ai
+ r5:i[q:i].Ai
+ tA:(i → j)[q:i].Ai

Bi , r3:i.Bi + r5:i.Bi + tB:(j → i).Bi

0	1	1	1
Bi , r3:i[p:i].Bi + r5:i[p:i].Bi + r4:i.Bi
+ r6:i.Bi + tB:(j → i)[p:i].Bi +

1	2
tB:(i → j).Bi
2	0	0	2

Bi , r4:i[q:i].Bi + r6:i[q:i].Bi + tB:(i → j)[q:i].Bi

2
Pi , p:i.P i
1	1	1
Pi , q:i[y:i].P i

0	1	2	1
Pi , q:i.P i + q:i, p:i[ø].P i + p:i[x:i].P v
1	0	1	2
T i , x:i.T i	T i , y:i.T i
0	1	1	0
The initial state of the model is given by the following model component:

(((Av	D  Bv) 
Pv) 
Tv )	D 

0 r5:v,r6:v
0  p:v,q:v  0 x:v,y:v
0  tA:(i→j),tB:(i→j)

(((As	D  Bs) 
Ps)   Ts)

0 r5:s,r6:s
0 p:s,q:s
0  x:s,y:s  0

A graphical representation of these processes is depicted in Figure 3. In this example one can see how hooks are placed at concentration thresholds, linking the biochemical layer formed by molecules A and B with higher layers. Higher layers

can have biological meaning, such as processes T j, representing tissue phenotypes. Alternatively, they can be intermediate layers, that help glue other layers together, such as processes Pj.

Related Work
As we have already mentioned, this work is related to other process algebras, PEPA
[10] and Bio-PEPA [6]. An alternative way to implement hook synchronisation might be using priority of actions in PEPA. Biochemical actions would have the lowest priority, while actions with higher priority could be used to keep higher layers consistent with the biochemistry. There are two disadvantages with this approach. First, actions with high priority would interleave with biochemical actions or with actions with even higher priority generating extra intermediate states that could be avoided a priori using hook synchronisation. Second, removing these extra states would result in removing all actions with the exception of the biochemical ones. Although the processes representing higher layers of abstraction would be consistent, we would lose the capability of performing action based equality checking between models, with respect to selected layers of abstraction.
The concept of using processes to “listen” to actions in a process algebra model was first introduced with Probes [1,7]. In this setting, processes (probes) are con- structed using regular expressions and are used to query a model. Special start and stop labels are added to certain actions to indicate entering and leaving states that satisfy the query. Although there are analogies, our approach does not aim to query the system, but to formalise and characterise the way we can observe its behaviour from different layers of abstraction. Moreover, regular expressions might in some cases not be powerful enough to construct the processes that we need to listen to biochemical actions.

Conclusions and Future Work
A novel process algebra, PAH, that aims to formalise models of pattern formation has been presented. Its main feature is the ability to model different layers of abstractions, by an action synchronisation that works bottom-up. It also includes an explicit representation of geometrical space and transport between locations.
In PAH, the lowest layer of abstraction is the biochemistry, where processes denote levels of concentration of species. Processes at higher layers denote tissue or any other layer of abstraction. At all levels there is an explicit notion of location in geometrical space. The semantics is given by a labelled transition system, which is then filtered to provide a more concise form, without hooks, tailored to a given layer of abstraction.
We have demonstrated, through examples, how biochemical reactions at a lower layer can trigger behaviour at a higher layer when a concentration threshold is crossed, or when the difference between two concentrations reaches a threshold, and when sets of hooks can trigger behaviour in sequence or in parallel.

In this paper, the explicit notion of space in the syntax has a limited function, such as improving comprehensiveness of model descriptions. In further development of PAH we plan to use this notation in the context of spatial modifications, such as tissue growth. Future work also includes defining equivalences or other relations between models so we can determine, for example, when two different biochemistries lead to the same patterns.
Acknowledgement
Andrea Degasperi is supported by a Lord Kelvin / Adam Smith Scholarship of the University of Glasgow and by the EPSRC funded SIGNAL project.

References
Argent-Katwala, A., J. T. Bradley and N. J. Dingle, Expressing performance requirements using regular expressions to specify stochastic probes over process algebra models, Fourth International Workshop on Software and Performance (2004), pp. 49–58.
Calder, M., S. Gilmore and J. Hillston, Modelling the influence of RKIP on the ERK signalling pathway using the stochastic process algebra PEPA, Lecture Notes in Computer Science 4230 (2006), pp. 1–23.
Calder, M. and J. Hillston, Process algebra modelling styles for biomolecular processes, LNCS 5750
(2009), pp. 1–25.
Calzone, L., F. Fages and S. Soliman, Biocham: An environment for modelling biological systems and formalizing experimental knowledge, Bioinformatics 22 (2006), pp. 1805–1807.
Cardelli, L., Brane calculi, Lecture Notes in Bioinformatics 3082 (2005), pp. 257–278.
Ciocchetta, F. and J. Hillston, Bio-PEPA: A framework for the modelling and analysis of biological systems, Theoretical Computer Science 410 (2009), pp. 3065–3084.
Clark, A. and S. Gilmore, State-aware performance analysis with eXtended stochastic probes, LNCS
5261 (2008), pp. 125–140.
Danos, V., J. Feret, W. Fontana, R. Harmer and J. Krivine, Rule-based modelling of cellular signalling, Lecture Notes in Computer Science (2007), pp. 17–41.
Degasperi, A. and M. Calder, On the formalisation of gradient diffusion models of biological systems, PASTA Workshop 2009 (2009).
URL  http://www.dcs.gla.ac.uk/~andrea/files/DegasperiCalder_Bio-PASTA2009.pdf
Hillston, J., “A Compositional Approach to Performance Modelling,” Cambridge University Press, 1996.
Meinhardt, H., Tailoring and coupling of reaction-diffusion systems to obtain reproducible complex pattern formation during development of the higher organisms, Applied Mathematics and Computation 32 (1989), pp. 103–135.
Meinhardt, H., Models of biological pattern formation: from elementary steps to the organization of embryonic axes, Curr. Top. Dev. Biol. 81 (2008), pp. 1–63.
Meinhardt, H., Models for generation and interpretation of gradients, Cold Spring Harbor Perspectives in Biology (2009), pp. 1–14.
Priami, C. and P. Quaglia, Beta-binders for biological interactions, LNCS 3082 (2005), pp. 20–33.
Priami, C., A. Regev, E. Shapiro and W. Silverman, Application of a stochastic name-passing calculus to representation and simulation of molecular processes, Inf. Process. Lett. 80 (2001), pp. 25–31.
Regev, A., E. Panina, W. Silverman, L. Cardelli and E. Shapiro, Bioambients: An abstraction for biological compartments, Theoretical Computer Science 325 (2004), pp. 141–167.

Regev, A., W. Silverman and E. Shapiro, Representation and simulation of biochemical processes using the pi-calculus process algebra, Pacific Symposium on Biocomputing (2001), pp. 459–470.

Turing, A., The chemical basis of morphogenesis, Philosophical Transactions of the Royal Society of London. Series B, Biological Sciences 237 (1952), pp. 37–72.


A  Stochastic Semantics
To define a stochastic version of PAH, we need to associate a rate with each transi- tion of the temporary LTS. The rate is a positive real number that is the parameter of the exponential distribution of the time necessary for a transition, i.e. an action, to happen.
Since the rates of biochemical reactions are usually functions of the concentration of species, we employ functional rates. Every biochemical action a:m ∈ BioAct is associated with a functional rate fa:m. We define as F the set of functional rates such that fa:m ∈ F.
The details of how a functional rate is evaluated are in Appendix C. Here, it is sufficient to say that a rate ra:m is evaluated from a functional rate fa:m ∈ F and an environment Γ, which is a function that associates variable names with values. We define it as “Γ: Names → R”, with Names = C ∪ Species, C ⊆ Names the set of constant names, Species ⊆ Names the set of biochemical species and C ∩ Species = ø.
We now introduce the stochastic semantics of PAH. With respect to the original semantics, derivation rules Prefix, Choice Left and Choice Right are unaltered. These are the modified rules:


Constant

A[H]	v

Cv , S

∧ if species(Cv) ∈ Species then

S1 −−−→ C2	,	1	1	1

v (A[H],Γ)	v
Γ= {(species(Cv), levels(Cv) · h)} else Γ = ø

C1 −−−−−→ C2
Cooperation Left
1	1
(A[H],Γ)

	P1 −−−−−→ P3	
,	A∩ L=ø

P1
Cooperation Right
(A[H],Γ)
P2 −−−−−→ P3

(A[H],Γ)
D  P
L

	P2 −−−−−→ P4	
,	A∩ L=ø

P D 
L
Regular Cooperation
(A[H],Γ)
P2 −−−−−→ P1
D  P
L

(A[£ ],Γ1)	(5[7 ],Γ2)
  P1 −−−−−−→ P3	P2 −−−−−−→ P4 
,  A∩B ∩L /=ø 

P1
Hook Ignore
(A∪5[£∪7 ],Γ1∪Γ2)
P2 −−−−−−−−−−−−→ P3
D  P
L

(A[H],Γ)
P1 −−−−−→ P2	 ,	H∩ L =ø 

P C
L
(A[H],Γ)
−−−−−→ P2
  Cv
L

Hook Synchronisation

(A[£ ],Γ1)
P
v (5[7 ],Γ2)	v

	1 −−−−−−→ P2	C1 −−−−−−→ C2  , B[F] cond
(A∪5[£∪7 ],Γ1∪Γ2)
P
1 L C1 −−−−−−−−−−−−→ P2 L C2
The side condition B[F] cond is unaltered. Notice that Cv is on an higher layer of abstraction, so, if the model is well-formed, species(Cv)= ⊥ and Γ2 = ø.
A stochastic temporary LTS is defined as Ls,u = (Pm, Act, →s,u), where the transition relation →s,u⊆ Pm × Ext × 2Species×R × Pm is the minimal relation that satisfies the stochastic semantics of PAH.
The filtering of a stochastic temporary LTS is used both to select the actions on the labels relative to a layer of abstraction of interest, and to compute the rate of the transitions. In analogy with the non stochastic case, we use the following curried function:
filter : 2C×R −→ (2Act −→ (2Pm×Ext×2Species×R×Pm −→ 2Pm×2Act×R×Pm ))
Given an environment Γ ⊆ C × R and a set of actions T , which contains actions relative to a specific layer of abstraction, the function filters(Γ)(T ) replaces each transition (P, A[H], Γj, Q), with a transition (P, B, r, Q), where B is the set intersec- tion of T and A and r is the rate of the transition. Assuming a well-formed PAH model, A contains exactly one biochemical action a:m, with associated functional rate fa:m. Rate r is computed from fa:m and the union of the environments Γ and Γj. As in the non stochastic case, if the intersection of T and A is empty, B is equal to {τ}. Function filters is defined formally in Definition B.4.
Definition A.1 Stochastic Filtered LTS. Given a stochastic temporary LTS Ls,u = (Pm, Act, →s,u), an environment Γ ⊆ C × R and a set of actions T ⊆ Act, the corresponding stochastic filtered LTS Ls,p = (Pm, Act, →s,p), with →s,p⊆ Pm × 2Act × R × Pm, is given by (Pm, Act, filters(Γ)(T )(→s,u)).
B  Formal definitions
Definition B.1 B[F] cond.  In the derivation rule “Hook synchronisation”, we
define formally B[F] cond by: B⊆ E∩ L ∧ Si>|5| Φi(Cv)(E∩ L) = ø, where |B| is
the cardinality of B and Φk is defined as:
Φk(A[H].Cv)= λX.{A[H]}	if |A| = k ∧A ⊆ X
Φk(S1 + S2)= λX.(Φk(S1)(X) ∪ Φk(S2)(X))
Φk(nil)= λX.ø
Definition B.2 Well formed PAH model. A PAH model is well formed if the following conditions are met:
when defining sequential components, sets of regular actions that contain bio-

chemical actions can only be singletons, i.e.	given A[H].Cv, if ∃a:m  ∈
BioAct s.t. a:m ∈A then A = {a:m};
species consistency, i.e. if Cv /= nil, Ψ(Cv)=species(Cv), with Ψ defined as: Ψ(A[H].Cv)= {species(Cv)},
1	1
Ψ(S1 + S2)= Ψ(S1)∪Ψ(S2).
hooks never contain biochemical actions, i.e. given A[H].Cv then H∩BioAct = ø,
biochemical processes offer only biochemical actions, i.e. if species(Cv)∈ Species

and a:m[H].C
v A[H]
a:m[H]
−−−−→ C
v
then a:m ∈ BioAct. Moreover, if species(Cv
)= ⊥ and

A[H].C
−−−→ C
then A∩ BioAct = ø.

the lowest layer of abstraction contains biochemical processes and there is only one process for each species in the model, i.e. χ(P )= (A, B, C) and A ⊆ Species, B = ø and C ∩ Species = ø, with χ defined as:
χ(Cv)= ({species(Cv)}, ø, ø),
χ(P1 D  P2)= (A∪ X, B ∪ Y ∪ (A∩ X),C ∪ Z), where χ(P1)= (A, B, C) and
χ(P2)= (X, Y, Z),
χ(P   Cv)= (A, B, {species(Cv)}∪ C), where χ(P )= (A, B, C).

Definition B.3 filter function.
filter : 2Act −→ (2Pm×Ext×Pm −→ 2Pm×2Act×Pm )= 
λY.(λX.( { filterlab(Y )(α) | α ∈ X} )) filter lab : 2Act −→ (Pm × Ext × Pm −→ Pm × 2Act × Pm)= 
λY.(λX.( (P, filterset(Y )(A), Q), where X = (P, A[H], Q) ))
filterset : 2Act −→ (2Act −→ 2Act)= 
λY.(λX.( if A =ø then τ else A, where A = {a:m | a:m ∈ X ∩ Y } ))

Definition B.4 filters function. Given (P, A[H], Γ, Q) ∈→s,u, we know that A∩ BioAct = {a:m}. This is because, if a PAH model is well-formed then there is exactly one biochemical action for each transition. We use this observation in the following curried functions, defined to produce the stochastic filtered LTS.
filter : 2C×R −→ (2Act −→ (2Pm×Ext×2Species×R×Pm −→ 2Pm×2Act×R×Pm )) =
λZ.(λY.(λX.( { filters,lab(Z)(Y )(α) | α ∈ X} )))
filters,lab :
2C×R −→ (2Act −→ (Pm × Ext × 2Species×R × Pm −→ Pm × 2Act × R × Pm)) =
⎛	⎛	⎛ (P, filterset(Y )(A), eval(fa:m, Γ ∪ Z), Q), ⎞⎞⎞

λZ.	λY.	λX.
⎝	⎝	⎝
where X = (P, A[H], Γ, Q) and
{a:m} = A∩ BioAct
⎟⎠⎟⎠⎟⎠

Function “eval” is defined in Definition C.1.

C  Details about functional rates
Each biochemical reaction is associated with a velocity, also called a kinetic law, which determines the amount of concentration (e.g. Molars) converted by the reac- tion per time unit (e.g. seconds). A rate ra:m can be derived using the velocity of the reaction associated to a:m. First, the velocity is formalised as a functional rate. Second, when required, the functional rate is evaluated based on the concentration of the species at a particular state.
Derivation of rates in a CTMC with levels model. Given an action a:m, a velocity v of the biochemical reaction associated with a:m, Si (i = 1, ..., n) species involved in the reaction, [Si] to indicate the concentration of Si, ⟨Si⟩ to indicate the current level of concentration of Si, ki ∈ Z to indicate their stoichiometry in the reaction and h as the step size, the variation in time of [Si] is given by:
δ[Si] = k · v
δt	i
We introduce Δ⟨Si⟩ = ki as the change in number of levels that has to be applied to Si when a:m is triggered. Substituting δ[Si] with Δ⟨Si⟩· h:

δ[Si] ≈ Δ[Si] · h = k
1	v
· v =⇒	= 

δt	Δt	i
Δt	h

If we consider Δt as the average of the exponential distribution of the time necessary for a:m to happen, then 1/Δt can be used as a rate for such a distribution. We then formalise v as a functional rate and we divide the evaluation of v by h, to produce the correct rate.
Derivation of mass action velocities from diffusion constants. The mod- els of pattern formation we intend to formalise are defined by partial differential equations that have two components: diffusion and local reactions:

δ[S]
= DS
δt
∇2[S] ± React

If we divide the space into a grid as described in Section 4, we can derive approx- imate mass action rates to move from a slot to the adjacent ones of equal volume, using the ﬁnite difference method. For example, in the case of one-dimensional Cartesian coordinates, the velocity vi,i+1, used to move concentration of S from position i to i + 1, is equal to DS/Δx2 · [Si].
Formalisation of functional rates. A functional rate can be described as a mathematical expression where the basic elements are real numbers, constants and biochemical species. We use the following syntax:
f rate = real | name | f rate op1 f rate | op2(f rate) | f ratef rate
op1 = + | − | ∗ | /	op2 = exp | log | sin | cos
real ∈ R
name is the name of a variable that can be either a model constant or a species. We assume that model constants are declared before the functional rates in the form of the assignment “name = real”. Each assignment can be regarded as a pair (name,real)∈ C × R. Consequently we can update the environment to

Γ = Γ∪{(name,real)}. Species and their concentration, in the form of pairs (S,real)∈ Species × R, will be gathered during the application of the stochastic semantics and added to the environment before the evaluation of a rate (see Section A).
op1 is a binary operator with associativity always to the left and with ∗ and /
having priority over + and −. op2 is a unary operator.
We use the following semantics to evaluate the functional rates:
Constant	Variable
, n ∈ R	,  Γ(name)= n
Γ ▶ n → n	Γ ▶ name → n
Unary operator

  Γ ▶ exp → n1	
, n
= op (n )


Binary operator
Γ ▶ op2(exp) → n2	2	2	1

Γ ▶ exp1 → n1	Γ ▶ exp2 → n2 ,  n
= n op n

Γ ▶ exp1 op1 exp2 → n3
Exponential operator
3	1	1  2

Γ ▶ exp1 → n1	Γ ▶ exp2 → n2 ,  n
= nn2

Γ ▶ expexp2 → n3	3	1
Definition C.1 Evaluation of a functional rate. Given an environment Γ ⊆ Names × R, a functional rate fa:m ∈ F is evaluated to a rate ra:m = x/h, with x ∈ R, written eval(fa:m, Γ) = ra:m, iff Γ ▶ fa:m → x.
Example C.2 . Let Γ = {(B,2)}, f = 5 + 4/B and h = 0.5. It follows that Γ ▶ f → 7, and so eval(f, Γ) = 7/0.5 = 14, with the following derivation:

{(B, 2)}▶ 5 → 5

	
{(B, 2)}▶ B → 2	{(B, 2)}▶ 4 → 4
{(B, 2)}▶ 4/B → 2
{(B, 2)}▶ 5+ 4/B → 7
