Available online at www.sciencedirect.com



Electronic Notes in Theoretical Computer Science 281 (2011) 85–100
www.elsevier.com/locate/entcs

A Tabu Search Heuristic for the Prize-collecting Rural Postman Problem
Guillermo Palma1
Departamento de Computaci´on y Tecnolog´ıa de la Informaci´on Universidad Simo´n Bol´ıvar
Caracas, Venezuela

Abstract
I present a heuristic based in tabu search, in order to generate feasible solutions for solving the Prize- collecting Rural Postman Problem. This problem was recently defined and is a generalization of other arc routing problems. The numerical results from a series of computational experiments with various types of instances show the good behavior of the proposed algorithm in comparison with previous works.
Keywords: Arc routing, metaheuristic, tabu search, combinatorial optimization.

Introduction
The Prize-Collecting Arc Routing Problems (PARP), were introduced by Ar´aoz, Ferna´ndez and Zolt´an [6] and they are a generalization of the Arc Routing Problems (ARP). The Arc Routing Problems aim to find the greatest benefit of traverse from some edges or arcs of a graph, subject to certain restrictions. The main Arc Routing Problems are the Chinese Postman Problem (CPP), and the Rural Postman Problem (RPP). The book edited by Dror [14] is the main reference about the ARPs. The PARP is defined about a graph where there is a vertex d called the deposit. Each edge has a profit function and a cost function. The profit function is taken into account only when an edge is traversed for first time. The objective the PARP is find a maximum profit cycle passing through d. Ar´aoz et al. [6] show that the PARPs are NP-hard and that are generalizations of many Arc Routing Problems and of the Traveling Salesman Problem. The basic PARP is the Prize-Collecting Rural Postman Problem. Other PARPs are defined by adding constraints.
The PRPP is to find the maximum profit cycle passing through the deposit in an undirected graph. At the PRPP the demand service is on the edges of graph.

1 Email: gpalma@ldc.usb.ve

1571-0661 © 2011 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2011.11.027

When perform a service to a edge not only incurs a cost but a profit is received. The cost is to traverse the edge. The profit is due to the service provided to the edge. In a cycle is taken into account the cost of traversing all edges of the same. Is possible that a edge is traversed more than once. Only when an edge is traversed for the first time in a route, a reward is earned. The objective the PRPP is to find a route that begin and finish in the deposit. The objective the PRPP is to find a route that begin and ending in the deposit, such that maximizes the total profit to serve the edges, less the the cost of traverse them.
The figure 1 show an example of a graph that is a instance the PRPP. The figure 2 shown the cycle that is optimal solution of problem of figure 1.

Figure 1. A PRPP instance. The vertex d is the deposit and ce/be are the values cost/profit of a edge e

Figure 2. Optimal solution of the figure 1. The cycle is d-1-4-3-2-1-d with profit equal to 14

Ar´aoz, Fern´andez and Meza [5] proposed the first algorithmic solution for the PRPP. Their algorithm has two phases and in each phase used a diferent solver. The first phase give a approximate solution of the PRPP through a linear inequalities system along with a heuristic. The heuristic is an adaptation of the heuristic 3T for the RPP [16]. The second phase uses the first solution to obtain the optimal solution of the problem.
Besides the PRPP, there are four problemas that belong to the family of the PARPs. The first is the Weighted PARP (WPARP) [9], where there is a weight associated with the service of each edge and there is a limit in the total weight that can have a route when it is served. A solution can have more than one route. The second is the Clustered Prize-collecting Arc Routing Problem (CPARP) [3]. The objetive the CPARP is to find a cycle that passes for d, such that satisfies the demand of a subset of the cluster of edges. Franquesa [17] present a complete study of the CPARP and of the algorithms that solved it. Ar´aoz, Fern´andez and Franquesa [3] recently, proposed an exact algorithm based in linear programming

and a heuristic for solved the CPARP. The third problem of the PARPs family is the Windy Clustered Prize-collecting Arc Routing Problem (WCPARP). This problem have all features of the CARP. The only difference is that the cost de traverse a arc depend the direction in that traversed it. Franquesa [17] studied the features of the problem and he proposes an exact algorithm to solve it. Ar´aoz et al. [4] present an exact algorithm based in branch-and-cut to solve the WCPARP and a simple heuristic to obtain feasible solutions. The fourth and final problem that belong to the PARPs family is the Profitable Capacitated Rural Postman (PCRPP). The PCRPP was introduced in 2009 for Stefan Irnich [24] For the PCRPP apply the same definition of the PRPP. Additionally when traversing a edge for first time is consumed a time qe, and the others times is consumed a time Re. The objective the PCRPP is to find a cycle of maximum profit, such that the cycle has a time less or equal that Q.
In addition to the studies about the PRPP and the related problems I have knowledge of six works of arc routing problems with profits. Deitch and Ladany [13] were interested in determining a attractive transport route for a turistic region. Feillet, Dejax and Gendreau [15] introduces a new problem named the Profitable Arc Tour Problem (PATP). The objetive of the PATP is to find a set of cycles in the graph that maximize the profit less the cost of the route, with restrictions on the number of times that profit is in the edges and the maximum length of the cycles. Malandraki and Daskin [25] introduces the Maximum benefit Chinese postman problem (MBCPP) and the Maximum benefit traveling salesman problem (MBTSP). The MBCPP is analogous to the PRPP, the one difference is that the MBCPP is definite with a direct graph and that each arc has a profit function ben. This function returns a profit when an arc e is traversed for nth time. The MBTSP definition is similar the main difference is that the benefit is obtained by passing through a node. Finally Hertz et al. introduce the Undirected capacitated arc routing problems with profits [8] [7] (UCARPP). The UCARPP is defined on an undirected graph in which each edge has a reward associated with them, a demand and travel time. A fleet of vehicles serving the edges. The goal is to find a set of routes of maximum benefit that satisfies all constraints.
There are potential practical applications for the PRPP. Applications of arc routing problems trying to minimize costs. It was decided that the service demand is exactly in some places. Because the goal is not to decide which edges will be served, is to determine the least cost to traverse them. With the rural postman problem can be modeled more complex practical problems. A company that wants to maximize profits, can decide that the demand of a edge will not be served, unless this provided a benefit for the company. An example where this principle is applied, is in the collection of recycling bins by private companies. Another example is the mail service managed by private companies. Companies may choose the districts to which they will serve. Because of the success that has been obtained by applying the Tabu Search to several ARPs [23,12,11,2,19,1,10,8,7] this metaheuristic is chosen as the basis of algorithmic solution for the PRPP.
This paper is organized as follows. The section 2 describes formally the PRPP

and some of its properties. The section 3 presents the algorithms developed to solve the PRPP. The experimental results and discussion of them is done in section 4. Section 5 presents the conclusions of the work.
The Prize-collecting Rural Postman Problem
In this section I define formally PRPP and present some notations and definitions to be used in this work.
Definition 2.1 Let G(V, E) be an undirected graph with a distinguished d, called deposit, and with two functions on the edge set E in R+, the profit function b and the cost function c. The objective of the problem is to find a cycle C∗ that maximizes the value of

e∈ΣE(C)
(be − tece)	(1)

where C is an cycle in G passing through d, which is not necessarily simple, edges
can be repeated, te is the number of times that edge e is traversed in C and E(C) is the edges set of cycle C.
The following notations to use and other definitions.
V (H): Vertex set of an subgraph H. If H = G then V (G)= V .
E(H): Edge vertex of an subgraph H. If H = G then E(G)= E.
γ(S): Let S be a set such that ∅ ⊂ S ⊆ V we denote by γ(S) = {e ∈ E | e =
{u, v}, u,v ∈ S} the edges set with both vertices in S.
δ(S): Let S be a set such that ∅ ⊂ S ⊆ V we denote by δ(S) = {e ∈ E | e =
{u, v},u ∈ S, v ∈ V \ S} = δ(V \ S) the edges in the cut between S and V \ S.
For a singleton set, I do not use the brackets. For example the following expressions are valid δ(v) ≡ δ({v}) and γ(v) ≡ γ({v}).
The following functions are defined on the edges e of a graph G.
ϕe = be − ce. ϕe is the profit you get when a edge is traversed for first time.
ψe = be − 2ce. ψe is the profit you get when a edge is traversed two times.
The edges set is divided into three sets
P = {e ∈ E | ϕe < 0}	R = {e ∈ E | ψe ≥ 0}	Q = {e ∈ E\R | ϕe ≥ 0}
Definition 2.2 [Even Graph] A Even Graph is a graph in the which all vertices have even degree.
We denote by (G, d, b, c) a PRPP instance, where G is the graph associate to the problem, d is the deposit vertex, b is the profit function and c is the cost function.
GR: GR ≡ (V (R) ∪ d, R) is is the subgraph obtained with the edges set R and the deposit d. Where V (R) is vertex set incidents with the edges of type R.
Ck: Are the connected components of graph GR, where k ∈ {0,..., n}. We assume that d ∈ C0.

V (Ck)= Vk: Vertex set of connected component Ck.
γR(Vk): With γ(Vk) we obtain a set of edges corresponding to the original graph. While with γR(Vk) we obtain a set of edges corresponding to the graph GR. Therefore γR(Vk)= γ(Vk) ∩ R.
Here are some properties that have the PRPP optimal solutions. These were derived and proved by Ar´aoz, Fern´andez and Zolt´an [6]. Let C ∗ be a cycle that is optimal solution of the PRPP.
Dominance 1 Neither edge e ∈ E is present more than twice in C ∗.
Dominance 2 Let e ∈ C ∗ be, if for any connected component Ck of the graph GR, we have that V (e) ∩ Vk /= ∅ then all edges of γR(Vk) is in C ∗.
Remark 2.3 The Dominance 2 implies that for each connected component Ck, we have that the edges in γR(Vk), or all them are in the optimal solution C ∗, or none of them are in C ∗. The Dominance 2 also implies that if exist a edge that is not in the set R, is in cycle C ∗ and that is incident with any vertex Vk, then all the edges are in C ∗.
Preprocessing 1 Let Ck be the connected components of GR and let e ∈ γ(Vk) \ R for some k. Then we have that the edge e is traversed at most once in the optimal solution C ∗
Remark 2.4 Dominance 2 and Preprocessing 1 imply that if a edge e ∈ γ(Vk) \ R
is in C ∗, then all the edges γR(Vk) are in C ∗

Algorithm to solving the PRPP
I developed an algorithm based on Tabu Search to solve the PRPP. This algo- rithm has two phases. In the first phase generates two solutions feasible for PRPP by two constructive algorithms. These algorithms are called Union of Connected Components and Successive Elimination of Connected Components. The second phase is the application of a algorithm of Tabu Search that tries to improve the initials solutions.
The algorithm 1 Union of Connected Components is based in two algorithms. These are the algorithm presented by Pearn and Wang for the Maximum Beneﬁt Chinese Postman Problem [26] and the approximate algorithm for the RPP pro- posed by Frederickson [18]. The algorithm constructs a feasible solution for the PRPP, that has all the edges of graph except the edges of the input list. The idea of the Tabu Search is to create an initial feasible solution containing the edges that give profit when them are traversed for first time. The idea of the Tabu Search is to create an initial feasible solution containing the edges that give profit when them are traversed for first time, these are the edges that belong to set R ∪ Q. Ar´aoz et al. [6] prove that the edges e ∈ R∪Q are not necessarily part of the optimal solution of the PRPP. However it is considered a best strategy lose profit for including these edges in the solution, instead to lose profit for not including them. One reason for

using this technique is because with the Tabu Search algorithm is possible to de- termine if the elimination of edges of a cycle, that is a feasible solution, is obtained a cycle of greater benefit. One reason for using this technique is because with the Tabu Search algorithm is possible to determine if with the elimination of edges of a cycle, that is a feasible solution, is obtained a cycle of greater benefit.
In the Tabu Search the algorithm 1 Union of Connected Components provides a feasible solution for the PRPP that contains all the edges that provide benefits, this is the edges of type R and Q. The algorthm 3 Successive Elimination of Connected Components has a strategy to rule out the edges of R and Q types that would not provide benefit to a solution of PRPP. Let Gt = (Vt, Et) be of step 2 of the algorithm 1 Union of Connected Components. Then in step 3 of the algorithm 1 is obtained minimum spanning tree of the graph Gt with the set of edges Est. With this set of edges can be created the graph Gmst = (Vt, Est) which corresponds to the tree. Each vertex vi ∈ Vt corresponds to a connected component Ci. Each edge of Est correspond to minimum cost paths between the connected components. C0 is the connected component containing the deposit. Traverse the graph Gmst with a search algorithm from vertex v0 ∈ Vt that is in the connected component C0. When visiting each vertex vi inVt can be obtained the cost cvi of reaching the vertex vi and the connected component Ci. Can also be calculate the maximum benefit that can be obtained from a connected component Ci, this is ϕ(γ(Ci)). If the maximum benefit of the connected component is less than cost the path in which this component is reached, that is cvi > ϕ(γ(Ci)) then this component should not be part of the solution. This is because the inclusion of this set of edges could provide losses to a solution of the PRPP. This is the basic idea of the algorthm 3 Successive Elimination of Connected Components. Connected components are sorted in ascending order based on the value of the total profit minus the cost of reaching the component, such that is not mandatory for the solution to have the edges of the connected component Ci. From all solutions obtained, we choose the of greatest profit.
Tabu Search was introduced by Fred Glover [20] and is one of the metaheuristics more successful in solving combinatorial optimization problems. Good descriptions of the concepts and applications of the Tabu Search is presented by Glover and Laguna [21] and by Meli´an and Glover [22]. The Tabu Search is an metaheuristic algorithm based on adaptive memory and on the adoption of intelligent general principles for the resolution problems. Tabu Search is used to guide a slocal earch in the attempt to find a global optimum using memory structures that help to avoid falling into local optima and to visit previously reached states.
The basic idea of the algorithm 5 Bu´squeda Tabu´ para el PRPP is to start with
a feasible solution for the PRPP to do a local search that has adaptive memory and
has the ability to reset at different points of the search space, if necessary. Before explaining how to work the algorithm will describe some of their structures and basic procedures.
First we will explain how it generates a set of neighboring solutions from a feasible solution of PRPP. It will use an exchange scheme of edges by paths in- spired by the one presented by Cober´an et al.  for the Mixed RPP [12].  In




Algorithm 1: Union of Connected Components Input: A graph G = (V, E) and an edge set Le Output: A cycle C , feasible solution the PRPP
STEP 1: Create a graph Gs = (Vs, Es), where Es = E\Le. If the deposit d ∈/ Vs then is added to the graph Gs and will be considered the connected components C0. Do Gj → Gs. If Gj is eulerian (connected and even) go to

step 6. If Gj is only connected, do Ej
→∅ and go to step 4

Step 2: Let C0, C1,..., Ct the two connected components of Gj. Construct a complete graph Gt = (Vt, Et), where Vt has as elements each of connected components Ci. Each edge et ∈ Et has a cost given by the function cet : Et → R This function is defined as
cet (et)= min{dcc(vi, vj) | vi ∈ Ci ∧ vj ∈ Cj ∧ i /= j}
where dcc is a function that return the value of minimum cost path between the vertices vi and vj in the graph G. We called to the minimum cost path as MCvivj . Let MCP be a set with the MCvivj . We use the following function to obtain the minimum cost paths MCP → find-minimum-cost-path(G, Gj)
Step 3: We calculate the minimum spanning tree of the graph Gt, to obtain

the edges Est corresponding to the edge set of the tree. Let Ej
be the edge

set e ∈ E that are obtained by determining the paths of the graph G
corresponding to each of the edges of Est. Ej  is added to the graph Gj to
obtain Gj = (Vs, ES ∪ Ej )
Step 4: We obtain the set of vertices of odd degree of the graph Gj and is called Vo. We build a complete graph Gm = (Vo, Eo), in which each edge
eo = (i, j) | eo ∈ Eo will have as cost ceo the value of the minimum cost path, called MCij. We have that MCij is the minimum cost path between the vertices i, j ∈ Vo in the graph G Let MCP be a set of MCij, we have the minimum cost paths are obtained with the function
MCP → find-minimum-cost-path(G, Gj)
Step 5: Obtain the minimum cost perfect matching in the graph Gm. Let
Em be the set of edges of Gm corresponding that to optimal matching. Let
j  be the set of edges e ∈ E that obtained by determining the paths of the
graph G that corresponds to each edge of Em. Ej is adding to the graph Gj
to obtain Gj = (Vs, Es ∪ Est ∪ Em). We have Gj is a eulerian graph (even and connected) therefore it has a feasible solution of the PRPP
Step 6: The eulerian cycle C is determined with the algorithm
Eulerian-Cycle presented in Dror book [14]. We have that C is a cycle that is a feasible solution for the PRPP in G
Step 7: return C




Function 2: find-minimum-cost-path
Input: The graphs G = (V, E), and Gs = (Vs, Es)
Output: Set of minimum cost paths MCP
1 begin
2	MCP →∅	// Set of minimum cost path
3	EdgeSet →∅	// Set of edges
4	Let MCvivj be the minimum cost path between the vertices vi, vj ∈ Vs in the graph G. Each edge e ∈ E, has a cost given by function cst : E → R that will depend on the paths MCvivj previously found.
5	foreach vi, vj ∈ Vs do

6	Determine MCvivj
with cst
(e) =	ce,	if e ∈ Es ∪ EdgeSet
−ϕe,	otherwise

7	MCP → MCP ∪ {M Cvivj }
8	EdgeSet → EdgeSet ∪ the edges of the MCvivj
9	return MCP


the function 4 obtenerVecinos, we present the algorithm to generate the set
of neighboring solutions. Let be C a cycle that is a feasible solution of the PRPP represented by a sequence of edges which correspond to the order on that the edges of graph are traversed.  The cycle C has the following form C = ((d, a)(a, b),..., (i, j),..., (l, m),..., (p, q),..., (s, t), (t, d)), where d is the de- posit. Given any edge e = (l, m), such that belong to the solution C , starting from this edge the solution C is traversed from the left and right of the edge e. When we traversed to the left of the solution C , we want to find one edge h of the type that provides benefit when traversing for the first time, this is h ∈ R∪Q. If we not found a edge h ∈ R ∪ Q we take the edge that is connected to the reservoir, in this case in the solution C we have that h = (d, a). Suppose if we find one edge h ∈ R ∪ Q in C , this edge is denoted as h = (i, j) ∈ C . We do the same procedure starting from edge, we traversed the solution from the right until to find one edge or by default, the rightmost edge that has the deposit, this is k = (t, d) ∈ C . Once we have identified these three edges h = (i, j), e = (l, m) and k = (p, q) in the solution C , we find the minimum cost path between the vertices j and p in the graph G that we call MCPjp. Then we replace the path of cycle by the minimal cost path between j and p, this is MCPjp. This will result in a new feasible solution for the PRPP V , which has the form V = ((d, a)(a, b),..., (i, j), CCMjp, (p, q),..., (s, t), (t, d)). This procedure is applied to all edges of the solution C , thereby generates a set of feasible solutions of PRPP. The set of neighboring solutions will be composed of tuples (V , e), where V is a feasible solution and e = (l, m) ∈ C is the edge that was selected at the beginning of the algorithm and that allowed the generation of the solution V . The function 4 obtenerVecinos shows the algorithm to get the set of neighboring solutions as a set of tuples. Let C be the feasible solution of PRPP with which you get the set neighboring solutions. Let G = (V, E) be the graph that represents the instance PRPP to resolve. In obtaining the minimum cost paths



Algorithm 3: Successive Elimination of Connected Components
Input: A graph G = (V, E)
Output: A cycle C feasible solution of the PRPP
1 begin
2	tabu-edges → All the edges of the graph G of type P
3	Apply steps 1 and 2 of the algorithm 1 Union of Connected Components
with input, the graph G and tabu-edges. Is obtained a graph
Gt = (Vt, Et).
4	ncc → |Vt| // Number of connected components
5	best-solution → Union of Connected Components with input G and
tabu-edges.
6	if ncc =1 then return best-solution.
7	Calculate the minimum spanning tree of the graph Gt resulting in a set of edges Est. Create the graph Gmst = (Vt, Est).
8	Traverse the graph Gmst with the depth first search algorithm from the vertex the vertex that corresponds to the component C0 (contains the deposit d) and calculate the cost cCi of reaching each connected component Ci ∈ Vt.
9	foreach connected component Ci ∈ Vt do
10	Calculate the maximum profit can be obtained ϕ(γ(Ci)).
11	profitCi → ϕ(γ(Ci)) − cCi
12	profit-connec-component → profit-connec-component ∪{(Ci, prof itCi )}
13	It is ordered ascending the set of profits of the connected components
profit-connec-component.
14	foreach tuple (Ci, prof itCi ) ∈ profit-connec-component do
15	edges-connec-component → Obtain the edges in the graph G that form the connected component Ci.
16	tabu-edges → tabu-edges ∪ edges-connec-component.
17	solution → Union of Connected Components with input G and
tabu-edges.
18	if profit(solution) > profit(best-solution) then best-solution → solution.
19	return best-solution



MCPjp each edge has a cost given by the function c (2).
∞,	if e ∈ edgesPreprocessing1 ∪ TabuList c(e)=	ce,	if e ∈ C
0,	of e ∈ R ∪ Q ∪ edgesDominance2
⎪⎩−ϕe,	otherwise (the edge is type P ).



(2)

Once generated the set of neighboring solutions, we want get a solution which will be the best current solution, in other words the best solution of iteration that is running. The function 4 obtenerSolucion choose a solution, probabilistically,



Algorithm 4: Functions used by the tabu search for the PRPP
func obtainNeighbors(G : A graph, CurrentSol: Sol. PRPP, BestSolution:
Sol. PRPP, TabuList: Set of edges) −→ Neighbors: Set of Sol.
PRPP
begin
foreach edge e ∈ CurrentSol do
Let e = (l, m) be a edge and the cycle CurrentSol is represented as a sequence of edges which are traversed the following form: CurrentSol
= ((d, a)(a, b),..., (i, j),..., (l, m),..., (p, q),..., (s, t), (t, d));
From the edge e = (l, m) the solution CurrentSol is traversed to the left to find a edge (i, j) ∈ R ∪ Q. If no such edge then we take the more extreme edge of the solution, This is one edge (d, a) that has the deposit;
From the edge e = (l, m) the solution CurrentSol is traversed to the right to find a edge (p, q) ∈ R ∪ Q. If no such edge then we take the more extreme edge of the solution, This is one edge (t, d) that has the deposit;
Find the minimum cost path MCPjp between the vertices j and p;
Obtain a new feasible solution to the PRPP by replacing the path [j, l](l, m)[m, p] of CurrentSol by the minimum cost path MCPjp in CurrentSol. We obtain a solution with the following form: NewSolution → ((d, a)(a, b),..., (i, j),MCPjp, (p, q),..., (s, t), (t, d));
if e ∈ TabuList then
// Aspiration Criterion
if beneficio(NewSolution) > profit(BestSolution) then
Neighbors = Neighbors ∪ {(NewSolution, e)};
else
Neighbors = Neighbors ∪ {(NewSolution, e)};
return Neighbors;
func obtainSolution(Neighbors: Set of soluc., TabuList: Set of edges,
BestSolution: Sol. PRPP ) −→ C : Sol. PRPP
begin
(ChosenSol, e) → find within Neighbors the tuple with the feasible solution with the greatest profit;
ChosenSol → Obtain of the tuple (ChosenSol, e) the solution of the PRPP;
if profit(ChosenSol) ≤ profit(BestSolution) then
(ChosenSol, e) → Choose a tuple of probabilistic manner, using the technique of roulette wheel in which is considered the profit of the solutions of the PRPP;
ChosenSol → Obtain of the tuple (ChosenSol, e) the solution of the PRPP;
e → Obtain of the tuple (ChosenSol, e) the edge e associated to the PRPP solution, e is the edge with which the solution ChosenSol en obtainNeighbors is built ;
TabuList → TabuList ∪ {e};
return ChosenSol;


of the set of neighboring solutions.
In the algorithm 5 shows the Tabu Search for the PRPP. At first, the algorithm generates two feasible solutions with the algorithms 1 and 3. The solution generated by the algorithm 3 Successive Elimination of Connected Components is the initial
solution which will iterate in the Tabu Search. The solution of the algorithm 1 Union of Connected Components can be used later in the Tabu search in case we need to diversify the search. In line 6 begins the iteration of the algorithm.
The maximum number of iterations, MaxIter, which were allowed was 120. Once obtained the set of neighboring solutions, they pass through improvement algorithms of solutions. These are three algorithms. The first eliminates the cycles of negative benefit of a solution. The second eliminates duplicate edges of the solutions. The third take each one of the pairs of edges of a solution and examines whether there is a lowest cost path between the vertices extremes on both edges. It is considered that two solutions are equal if they have the same profit. There is a multiset of solutions called BeneficioMultiConjunto, which has the frequency of occurrence of a solution during the search. In lines 12-19 we see that if a solution is presented three times the search is trying to change the search space, making an intensification of the search since the best solution found so far or performing a diversification since
the solution of algorithm 1 Union of Connected Components. We remember that
the solution of algorithm 1 has all the edges that give benefit when traversing them
for the first time. In lines 20 and 21 edges are obtained that are associated with the properties of PRPP, which are known as Dominance 2 and Preprocessing 1. The idea with the edges of edgesDominance2 is to try to promote their inclusion in the feasible solution, because if one edge R belongs to the optimal solution is likely that some of adjacent edges also belong to the optimal solution. Due to this we see that the cost of these edges in the function 2 is 0. The purpose of having the edges of edgesPreprocessing1 is try to avoid having to include these edges in the feasible solution, as shown in the function 2. In lines 26-33 is observed what makes the algorithm in case you have a number iterations without finding a better global solution. The first time there will be a diversification of the search in a completely different state space, which is obtained by continuing with a tabu search feasible solution generated randomly. In case of falling back into this situation will make a intensification of the search by choosing as current solution, the solution algorithm
3 Successive Elimination of Connected Components.

Experimental Results and Discussion
The algorithms were implemented in C and are publicly available on the http:
//www.ldc.usb.ve/~gpalma. All experimental tests were performed on a computer SUN ULTRA 10 modelo 440, with a processor UltraSPARC-IIi de 440 MHz with
1.0 GB DRAM.
So far the only instances of PRPP available are those formulated by Ar´aoz, Ferna´ndez and Meza [5]. They are a set of 118 instances that were generated from a set of instances, widely used, of the Rural Postman Problem (RPP). We will use



Algorithm 5: Tabu Search for the PRPP
Input: A graph G
Output: A cycle C feasible solution of the PRPP
1 begin
2	iterWithoutImprovement → 10,	MultisetProfit →∅ 
3	SECCSol → Apply the algorithm 3 with input G
4	CurrentSol → SECCSol,	BestSolution → CurrentSol
5	UCCSol → Apply the algorithm 1 with input G and the edges of type P
in G
6	while iter < MaxIter do
7	Neighbors → getNeighbors(G, CurrentSol, BestSolution, TabuList)
8	Apply the improvements algorithms to all solutions of Neighbors
9	CurrentSol → getSolution(Neighbors, TabuList, BestSolution)
10	PCS → profit(CurrentSol)
11	MultisetProfit → MultisetProfit ∪ {PCS}
12	if number of occurrences of PCS in MultisetProfit = 3 then
13	if useBestSolution then
14	useBestSolution → FALSE
15	CurrentSol → BestSolution
16	else
17	useBestSolution → TRUE
18	CurrentSol → UCCSol
19	Delete all occurrences of PCS in MultisetProfit
20	edgesDominance2 → Get all the edges of type Q and P that are adjacent to the edges of type R of CurrentSol and not belonging to it
21	edgesPreprocessing1 → Get all the edges γ(Vk) ∪ δ(Vk) that are part of
CurrentSol (Preprocessing 1)
22	if profit(CurrentSol) > profit(BestSolution) then
23	BestSolution → CurrentSol
24	iter → iter − 10,	iterWithoutImprovement →
iterWithoutImprovement − 9
25	Remove one unit the number of iterations that should be the edges
e ∈ TabuList in TabuList
26	iter → iter+1,	iterWithoutImprovement → iterWithoutImprovement+1 
27	if iter = iterWithoutImprovement then
28	if UseRandomSol = TRUE then
29	CurrentSol → Get a randomly generated feasible solution
30	UseRandomSol → TRUE
31	else
32	CurrentSol → SECCSol
33	UseRandomSol → FALSE
34	MultisetProfit → ∅,	TabuList →∅ 
35	iterWithoutImprovement → iterWithoutImprovement +9 
36	return BestSolution


these same instances to test the algorithms implemented. The 118 instances were grouped into 15 classes of problems, depending on their type and its number of vertices. The table 1 shows the characteristics of the problems to solve.
The results obtained with the Tabu Search Algorithm for the PRPP were com- pared with the results of the Heuristic of cutting plane algorithm proposed by Ar´aoz, Fern´andez and Meza [5], described in the introduction. All the results of both algorithms were obtained using the same computer SUN ULTRA 10.
Table 1
Summary of the characteristics of the problems to be solved. |R| and |P| are the number of edges type R
and type P for each type of problem


Due to the probabilistic elements of Tabu Search, it is possible to obtain solutions different when solving an instance. To test the robustness and reliability of the algorithm Tabu Search was performed 30 runs for each of the 118 instances and in the table 4 are reported the results of the mean values obtained and the best solutions found. When comparing the results obtained with the the heuristic can see that the percentage of total deviation of the heuristic (10.98) is greater than the percentage of total deviation from the mean value (10.22) and greater than the best value of the Tabu Search (2.85). This indicates that, in general, the Tabu Search get better solutions than the heuristic of [5]. If we observe the best solutions found by the Tabu Search algorithm we have to find the best solution in 13 of the 15 types

of problems. The heuristic of [5] , just find a better solution than the Tabu Search in the problems G64 and G100. The Tabu Search get the optimal solution in 12 of the 15 types of problems, which is very satisfactory. The computation time of the Tabu Search was higher in small instances and much lower in larger problems. This is because in the Tabu search generates two initial solutions, which is expensive in time. However we consider that the computational effort of the Tabu Search is good if we see time total spent by both heuristics.
Table 2
Results of Tabu Search and the Heuristic of [5] in the instances of the PRPP. Where Vo: optimal value,
%dHeur: percentage deviation of the heuristic, %dMeanTS: percentage deviation of the mean value of the Tabu Search, %dBestTS: percentage deviation of the best value found by the Tabu Search, tHeur: time of the heuristic, tTS: average time of the tabu search


Conclusions
Tabu Search Algorithm for PRPP get high quality solutions beating to the Heuristic of [5] in most of the problems studied. The strategies used in Tabu Search algorithm can be applied to other arc routing problems with profits and costs. One of the main contributions of this work is the mechanism of generation of neighboring

solutions in Tabu Search for the PRPP. This is a key process for the Tabu Search performance and is so general that can be applied to other arc routing problems with profits and costs. The computational effort of the tabu search algorithm is moderate. Among the future work is to apply the scheme of Tabu Search algorithm to other arc routing problems with profits, such as the Clustered Prize-collecting Arc Routing Problem (CPARP) and the Undirected capacitated arc routing problems with proﬁts (UCARPP).

References
Ahr, D. and G. Reinelt, A tabu search algorithm for the min–max k-Chinese postman problem, Computers & Operations Research 33 (2006), pp. 3403–3422.
Amberg, A., W. Domschke and S. Voß, Multiple center capacitated arc routing problems: A tabu search algorithm using capacitated trees, European Journal of Operational Research 124 (2000), pp. 360–376.
Ar´aoz, J., E. Fern´andez and C. Franquesa, The clustered prize-collecting arc routing problem, Transportation Science 47 (2009), pp. 287–300.
Ar´aoz, J., E. Ferna´ndez and C. Franquesa, The windy clustered prize-collecting arc routing problem., in: Conference on System Modelling and Optimization, IFIP TC7, 2009.
Ar´aoz, J., E. Ferna´ndez and O. Meza, Solving the prize-collecting rural postman problem, European Journal of Operational Research 196 (2009), pp. 886–896.
Ar´aoz, J., E. Fern´andez and C. Zoltan, Privatized rural postman problems, Computers & Operations Research 33 (2006), pp. 3432–3449.
Archetti, C., D. Feillet, A. Hertz and M. Speranza, The Capacitated Arc Routing Problem with Profits
C. Archetti, D. Feillet, Technical report, GERAD (2009).
Archetti, C., D. Feillet, A. Hertz and M. Speranza, The undirected capacitated arc routing problem with profits, Computers and Operations Research (2009).
Ar´aos, J., E. Fern´andez, C. Franquesa and O. Meza, Prize-collecting arc routing problems and extensions, in: Odysseus Conference, Valencia, Espan˜a, 2006.
Brand˜ao, J. and R. Eglese, A deterministic tabu search algorithm for the capacitated arc routing problem, Computers & Operations Research 35 (2008), pp. 1112–1126.
Corber´an, A., R. Mart´ı, E. Mart´ınez and D. Soler, The Rural Postman Problem on mixed graphs with turn penalties, Computers & Operations Research 29 (2002), pp. 887–903.
Corber´an, A., R. Mart´ı and A. Romero, Heuristics for the mixed rural postman problem, Computers & Operations Research 27 (2000), pp. 183–203.
Deitch, R. and S. Ladany, The one-period bus touring problem: Solved by an effective heuristic for the orienteering tour problem and improvement algorithm, European Journal of Operational Research 127 (2000), pp. 69–77.
Dror, M., “ARC Routing: Theory, Solutions and Applications,” Kluwer Academic Publishers, 2000.
Feillet, D., P. Dejax and M. Gendreau, The Profitable Arc Tour Problem: Solution with a Branch-and- Price Algorithm, Transportation Science 39 (2005), p. 539.
Fern´andez, E., O. Meza, R. Garfinkel and M. Ortega, On the Undirected Rural Postman Problem: Tight Bounds Based on a New Formulation, Operations Research 51 (2003), pp. 281–291.
Franquesa, C., “The Clustered Prize-collecting Arc Routing Problem,” Ph.D. thesis, Universidad Polit´ecnica de Catalun˜a (2008).
Frederickson, G., Approximation algorithms for some postman problems, Journal of the ACM (JACM)
26 (1979), pp. 538–554.


Ghiani, G., F. Guerriero, G. Laporte and R. Musmanno, Tabu Search Heuristics for the Arc Routing Problem with Intermediate Facilities under Capacity and Length Restrictions, Journal of Mathematical Modelling and Algorithms 3 (2004), pp. 209–223.
Glover, F., Future paths for integer programming and links to artificial intelligence, Computers & Operations Research 13 (1986), pp. 533–549.
Glover, F. and M. Laguna, “Tabu Search,” Springer, 1997.
Glover, F. and B. Meli´an-Batista, Bu´squeda tabu´, Inteligencia Artificial, Revista Iberoamericana de Inteligencia Artificial 19 (2003), pp. 29–48.
Hertz, A., G. Laporte and M. Mittaz, A Tabu Search Heuristic for the Capacitated Arc Routing Problem, Operations Research 48 (2000), pp. 129–135.
Irnich, S., New models and methods for arc routing, in: C. Barnhart, U. Clausen, U. Lauther and R. H. M¨ohring, editors, Models and Algorithms for Optimization in Logistics, number 09261 in Dagstuhl Seminar Proceedings (2009).
URL http://drops.dagstuhl.de/opus/volltexte/2009/2163

Malandraki, C. and M. Daskin, The maximum benefit Chinese postman problem and the maximum benefit traveling salesman problem, European Journal of Operational Research 65 (1993), pp. 218–234.
Pearn, W. and K. Wang, On the maximum benefit Chinese postman problem, Omega 31 (2003), pp. 269– 273.
