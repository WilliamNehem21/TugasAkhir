Available online at www.sciencedirect.com



Electronic Notes in Theoretical Computer Science 278 (2011) 85–98
www.elsevier.com/locate/entcs
Refinement Quantified Logics of Knowledge
James Hales1,2 Tim French Rowan Davies
Computer Science and Software Engineering The University of Western Australia
Perth, Australia

Abstract
Refinement quantifiers were introduced to quantify over all refinements of a model in modal logic, where a refinement is described by a simulation relation. Given the “possible worlds” interpretation of modal logic, a refinement corresponds to an agent ruling out certain possible worlds based on new information. Recent work by van Ditmarsch, French and Pinchinat has presented an axiomatization and complexity results for refinement quantifiers in the general modal logic K. Here we extend these results to apply to the epistemic and doxastic settings for a single agent.
Keywords:  Epistemic Logic, Refinement Quantification, Axiomatizations, Decision Procedures.


Introduction
Epistemic logic is a modal logic used to reason about the knowledge that a collection of agents hold about the state of the world. Dynamic epistemic logic considers how this knowledge may change in response to informative updates, such as announce- ments or messages, which introduce new information to some of the agents.
Previous work in dynamic epistemic logic has considered extensions of epistemic logic which allow informative updates to be modelled and reasoned about. Of particular interest to us are logics which introduce operators for reasoning about the results of a specific informative update, or operators for quantifying over arbitrary informative updates.
Several representations of informative updates have been considered for such logics. Public announcements are a simple, restrictive representation of informative update; a public announcement is simply an epistemic formula which is publicly announced to all agents in the system. Action models are more complex represen- tations of informative updates, capable of representing informative updates in which

1 Thanks the Hackett Foundation for the assistance of the Hackett Foundation Alumni Honours Scholarship
2 Email: james@jameshales.org

1571-0661 © 2011 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2011.10.008

information is given privately to only a subset of agents in the system, something which is not possible with a public announcement. Action models are capable of expressing any public announcement.
Public announcement logic, introduced by Plaza [10], and also independently by Gerbrandy and Groenvald [8], extends epistemic logic with an operator for reasoning about the result of a specific public announcement. A similar logic for action models was introduced by Baltag and Moss [3].
Balbiani et al. [2] then explored arbitrary public announcement logic, an exten- sion of public announcement logic which provides an operator for quantifying over arbitrary public announcements. van Ditmarsch and French [5] later proved that arbitrary public announcement logic was undecidable in the multi-agent setting, and so similar logics for action models may also be undecidable.
van Ditmarsch and French then went on to introduce future event logic [6], an ex- tension of modal logic which introduces an operator for quantifying over refinements of models. The finite refinements of a model are equivalent to the models which result from the execution of arbitrary action models. van Ditmarsch, French, and Pinchinat [7] later showed that future event logic is decidable with the underlying modal axioms of K(1).
The present work extends future event logic to the setting for which it was originally intended: epistemic logic. We examine both epistemic logic and doxastic logic, provide an axiomatisation of the single-agent form of both logics, and an algorithm providing an upper-bound for the complexity of satisfiability in both logics.
Technical preliminaries
We recall the definitions given by van Ditmarsch, French, and Pinchinat [7] in de- scribing the future event logic, and adapt those definitions to be based on epistemic logic, LS5, and doxastic logic, LKD45. Specifically, we restrict the Kripke models under discussion to those in the class of S5 models when we are discussing the extension of the future event logic to LS5, and to those in the class of KD45 models when we are discussing the extension to LKD45.
Let A be a non-empty, finite set of agents, and let P be a non-empty, countable set of propositional atoms.
Definition 2.1 [Kripke model] A Kripke model M = (S, R, V ) consists of a domain
S, which is a set of states (or worlds), accessibility R : A → P(S×S), and a valuation
V : P → P(S). The class of all Kripke models is called K . We write M ∈ K to denote that M is a Kripke model.
For R(a) we write Ra. Given two states s, sj ∈ S, we write Ra(s, sj) to denote that (s, sj) ∈ Ra. We write sRa for {t|(s, t) ∈ Ra}. As we will be required to discuss several models at once, we will use the convention that M = (SM , RM ,V M ), N = (SN , RN ,V N ), etc. For s ∈ SM we will let Ms refer to the pair (M, s), or the pointed Kripke model M at state s.

Definition 2.2 [Epistemic model] An epistemic model is a Kripke model M = (S, R, V ) such that the relation Ra is an equivalence relation for all a ∈ A. The class of all epistemic models is called S5 . We write M ∈ S5 to denote that M is an epistemic model.
Definition 2.3 [Doxastic model] A doxastic model is a Kripke model M = (S, R, V ) such that the relation Ra is serial, transitive, and Euclidean for all a ∈ A. The class of all doxastic models is called KD45 . We write M ∈ KD45 to denote that M is a doxastic model.
Throughout this paper we present results in both S5 and KD45 , often showing a result for S5 first and then the same result in KD45 . As such we will assume that all models are epistemic models when discussing LS5 or LS5, and that all models
are doxastic models when discussing LKD45 or LKD45.
Definition 2.4 [Bisimulation] Let M = (S, R, V ) and Mj = (Sj, Rj,V j) be Kripke models. A non-empty relation R ⊆ S × Sj is a bisimulation if and only if for all s ∈ S and sj ∈ Sj, with (s, sj) ∈ R, for all a ∈ A:
atoms s ∈ V (p) if and only if sj ∈ V j(p) for all p ∈ P
forth-a for all t ∈ S, if Ra(s, t), then there is a tj ∈ Sj such that Rj (sj, tj) and
(t, tj) ∈R 
back-a for all tj ∈ Sj, if Rj (sj, tj), then there is a t ∈ S such that Ra(s, t) and
(t, tj) ∈ R.
We call Ms and Mj′ bisimilar, and write Ms↔Mj′ to denote that there is a
s	s
bisimulation between Ms and Mj′ .
Definition 2.5 [Simulation and refinement] Let M and Mj be Kripke models. A non-empty relation R⊆ S × Sj is a simulation if and only if it satisfies atoms and forth-a for every a ∈ A.
We call Mj′ a simulation of Ms and we call Ms a refinement of Mj′ . We write
s	s
Mj′ ≥ Ms to denote this, or alternatively, Ms ≤ Mj′ .
s	s
A relation that satisfies atoms and forth-b for every b ∈ A, and satisfies back-b
for every b ∈ A − {a}, for some a ∈ A, is an a-simulation.
We call Mj′ an a-simulation of Ms, and we call Ms an a-refinement of Mj′ . We
s	s
write Mj′ ≥a Ms to denote this, or alternatively, Ms ≤a Mj′ .
s	s
We will use a-refinements to define the semantics of the future event logic. The significance of refinements is that the refinements of a finite Kripke model are exactly the models that result from the execution of an arbitrary action model [6].
Finally we give a result that will be used in the complexity results later.
Lemma 2.6 The relation ≥a is reflexive, transitive and satisﬁes the Church-Rosser property in the class of models K.
This is shown by van Ditmarsch, French and Pinchinat [7].

Syntax and semantics
Here we define the syntax and semantics of the logics LS5 and LKD45, which restrict
d	d
the logic LK, defined by van Ditmarsch, French, and Pinchinat to models and
refinements of models that are in S5 or KD45 respectively.
The same syntax used for LK is used for LS5 and LKD45, and so we will define
d	d	d
it only once, as Ld. We also refer to the language of modal formulae as L, which is
Ld without the ►a operator.
Definition 3.1 [Language of Ld] Given a finite set of agents A and a set of propo- sitional atoms P , the language of Ld is inductively defined as
φ ::= p | ¬φ | (φ ∧ φ) | □aφ | ►aφ
where a ∈ A and p ∈ P .
Standard abbreviations include: ⊥ ::= p ∧ ¬p; T ::= ¬⊥; φ ∨ ψ ::= ¬(¬φ ∧ ¬ψ);
φ → ψ ::= ¬φ ∨ ψ; and 3aφ ::= ¬□a¬φ. We use the abbreviation daφ ::= ¬►a¬φ
for the dual of the ►a operator.
We also use the cover operator ∇aΓ, which is an abbreviation for □a Wg∈Γ γ ∧
g∈Γ 3aγ, where Γ is a finite set of formulae. This is the basis of our axiomatisation,
as it is for the axiomatisation of LK	presented by van Ditmarsch, French and
Pinchinat [7].
The semantics for LK, LS5 and LKD45 are very similar, and so we will introduce
d	d	d
a generalised set of semantics that can be applied to all three.
Definition 3.2 [Semantics of LC] Let C be a class of Kripke models, and let M = (S, R, V ) be a Kripke model taken from the class C . The interpretation of φ ∈ LC
is defined by induction.
Ms ▶ p iff s ∈ Vp Ms ▶ ¬φ iff Ms $ φ
Ms ▶ φ ∧ ψ iff Ms ▶ φ and Ms ▶ ψ
Ms ▶ □aφ iff for all t ∈ S : (s, t) ∈ Ra implies Mt ▶ φ
Ms ▶ ►aφ iff for all Mj′ ∈ C : Ms ≥a Mj′ implies Mj′ ▶ φ
s	s	s
The logics LK, LS5 and LKD45 are instances of LC. The difference between
d	d	d	d
these logics are the class of models that formulae are interpreted over. It should
be emphasised that the interpretation of the refinement operator, ►a, varies for each logic, as the refinements considered in the interpretation of each logic must be taken from the appropriate class of Kripke models. It is for this reason that LS5 and LKD45 are not conservative extensions of LK. For example, da□a⊥ is valid
d	d
in LK, but not in LS5 or LKD45. This is because given any pointed model in K ,
d	d	d
one can construct an a-refinement from that model by deleting the a-edges starting
at the designated state; in this resulting a-refinement, □a⊥ is satisfied, and hence

da□a⊥ is satisfied in the original model. However because of the serial property of S5 and KD45 models, □a⊥ is not even satisfiable in LS5 or LKD45, and hence
d	d
da□a⊥ is not satisfiable as well.
Lemma 3.3 The logics LS5 and LKD45 are bisimulation invariant.
d	d
The proof for bisimulation invariance in LK, given by van Ditmarsch, French
and Pinchinat [7] applies to LS5 and LKD45.
d	d
Following are some examples illustrating the semantics of LS5.
Example 3.4 Consider a situation where two agents are initially uncertain about a proposition p, where in fact p is true, represented by Figure 1. We assume that all models are in S5 . An informative event is possible after which a knows that p is true, but b does not know this. This is expressed by:
da(□ap ∧ ¬□b□ap)

Example 3.5 Imagine a scenario where an agent is presented with three cards face down, and asked to identify which is the ace of spades (let’s suppose it is the left card). An agent may receive many informative updates (e.g. “the card with the bent corner is definitely not the ace”), but as an agent’s knowledge is only ever based on reliable evidence, it follows that given any informative update, there is always a further informative update after which the agent knows the location of the ace:
left → ►d□left.	(1)
This scenario is represented in Figure 2. We can also imagine a corresponding scenario in terms of the agent’s belief rather than knowledge. That is we suppose the axioms of LKD45 rather than LS5. Here an agent may believe that the ace is either the centre card or the right card, despite this not being the case. Again the agent may receive informative updates, but the formula (1) does not hold. We also note that once an agent holds a belief, no informative update will cause the agent to revise that belief:
□(right ∨ centre) → ►□(right ∨ centre).	(2) That is, we do not consider belief revision in the sense of [1] but rather belief
reﬁnement. This situation is depicted in Figure 3. This allows incorrect information,

≈





Fig. 1. The initial state where a and b are uncertain about p, with the subsequent refinement

≈


Fig. 2. The initial state of an agent’s uncertainty, with an example refinement, both in S5 .
≈



Fig. 3. The initial setup in K , where an agent believes the ace is either the centre or right card, with an example refinement. Note that the relations are not equivalences, and so directions of relations are marked, and we do not have reflexivity.

but requires that the information provided is consistent because of the requirement that KD45 models are serial.
The axiomatisation given in this paper is only for the single-agent variant of
S5 and LKD45. The differences for the multi-agent variants will be mentioned
briefly in the future work section. We note that in the single agent case for S5 , the semantic interpretation of the refinement quantifier ► agrees with the semantic interpretation of the arbitrary public announcement operator of Balbiani, et al. [2]. This is because in the single agent case of S5 , the refinements of a model, up to bisimulation, are formed by a restriction on the set of states of the original model; a public announcement is similarly formed by such a restriction. However, the resulting axiomatizations are quite different since the axiomatization for arbitrary public announcement operators relies heavily on public announcements, whereas we do not require such operators.
When discussing the single-agent variants of these logics, we will use a subscript

to denote the single-agent logics, e.g. LS5, LS5
, and so on. We also drop the

d(1)
superfluous subscripts denoting agents in the syntax of the logics, e.g. we write □
instead of □a.
To simplify the completeness proof of our axiomatisations, we rely on the fact that all formulae of L are equivalent to formulae in cover logic prenex normal form,
under both the semantics of LS5 and LKD45. We define the prenex normal form
first, then give another definition for the form using the cover operator, and then show our equivalence result.
Definition 3.6 [Prenex normal form] A formula in prenex normal form is specified by the following abstract syntax:
α ::= δ | α ∨ α
δ ::= π | □π | 3π | δ ∧ δ
where π stands for a propositional formula.
Lemma 3.7 Every formula in L is equivalent to a formula in prenex normal form,

under the semantics of LS5.
This is shown by Meyer and van der Hoek [9].
Lemma 3.8 Every formula in L is equivalent to a formula in prenex normal form, under the semantics of LKD45.
Proof. The proof given by Meyer and van der Hoek [9] for Lemma 3.7 applies also to LKD45.
Meyer and van der Hoek remarked that the only use of the reflexivity axiom of
LS5, T, in the proof, is in the form of the theorems ▶ □□φ → □φ, and ▶ □¬□φ →
¬□φ. Therefore the proof holds for any logic which replaces T with axioms entailing both of these properties. Both of these properties are obviously valid in LKD45, and therefore the proof of Lemma 3.7 applies to this result.	□
Definition 3.9 [Cover logic prenex normal form] A formula in cover logic prenex normal form is specified by the following abstract syntax:
α ::= π ∧ ∇Γ | α ∨ α
where π is a propositional formula, and Γ is a set of propositional formulae.
Lemma 3.10 Every formula in L is equivalent to a formula in cover logic prenex normal form, under both the semantics of LS5 and LKD45.
(1)	(1)
Proof. Without loss of generality, we may assume that our given formula is in prenex normal form (by Lemma 3.7 for LS5, or by Lemma 3.8 for LKD45).
(1)	(1)
Given a formula in prenex normal form, we consider each disjunct separately. We
can convert each term □γ or 3γ into an equivalent term using the cover operator, using the equivalences □γ ≡ ∇{γ} and 3γ ≡ ∇{γ, T} Note that each resulting term contains a cover operator applied only to a set of propositional formulae.
An inductive argument can be used to show that we can collapse the resulting conjunction of cover operators into a single term containing one cover operator applied to a set of propositional formulae. We use the following equivalence to achieve this, and note that at each stage this equivalence preserves the property that the cover operator is only applied to a set of propositional formulae.

∇Γ ∧ ∇Γj ≡ ∇ {γ ∧ 
g′∈Γ′

γj | γ ∈ Γ}∪ {γj ∧  γ | γj ∈ Γj} 
g∈Γ

Repeating this for each disjunct in our original formula leaves us with a formula in cover logic prenex normal form.	□
The cover logic prenex normal form will be used in our completeness proofs.


Axiomatisation
Here we present sound and complete axiomatisations of LS5

and LKD45. As they

share common rules and axioms, we will define the axiomatisation FEL(1) contain-

ing these rules and axioms, and then define the axiomatisations of LS5
KD45
d(1)

as extensions of FEL(1).
Definition 4.1 The axiomatisation FEL(1) is a substitution schema of the follow- ing axioms:

P All tautologies of propositional logic.
K □(φ → ψ) → □φ → □ψ
G0 ►(φ → ψ) → ►φ → ►ψ
G1 ►α ↔ α, where α is a propositional formula.
Along with the rules:

MP From ▶ φ → ψ and ▶ φ infer ▶ ψ.
Nec1 From ▶ φ infer ▶ □φ.
Nec2 From ▶ φ infer ▶ ►φ.


Definition 4.2 The axiomatisation FELK
is a substitution schema consisting of

the axioms and rules of FEL(1), along with the additional axiom:
GK d∇Γ ↔ Vg∈Γ 3dγ
Definition 4.3 The axiomatisation FELS5 is a substitution schema consisting of the axioms and rules of FEL(1), along with the additional axioms:

T □φ → φ
5 3φ → □3φ
GS5 d∇Γ ↔ Wg∈Γ γ ∧ Vg∈Γ 3γ, where Γ is a set of propositional formulae.
Definition 4.4 The axiomatisation FELKD45 is a substitution schema consisting of the axioms and rules of FEL(1), along with the additional axioms:

D □φ → 3φ
4 □φ → □□φ
5 3φ → □3φ
GKD45 d∇Γ ↔ Vg∈Γ 3γ, where Γ is a set of propositional formulae.
We note that many of the axioms from LS5 and LKD45 are also axioms for the
logics LS5, LKD45 and LK .

(1)

d(1)

Lemma 4.5 The axioms FEL(1) are sound for the logics LS5
and LKD45.

Proof. The soundness of the axioms P and K, and the rules MP and Nec1 in

LS5
and LKD45 can be shown by the same reasoning that they are sound in LS5

d(1)
d(1)
(1)

and LKD45. The soundness of the axioms G0 and G1, and the rule Nec2 can be
shown by the same reasoning used by van Ditmarsch, French, and Pinchinat [7] to
prove their soundness in LK .	□
Lemma 4.6 The axiomatisation FELS5 is sound for the logic LS5 .
(1)	d(1)
Proof. Soundness of the axioms P, K, G0, and G1, and the rules MP, Nec1 and
Nec2 are shown above. Soundness of the axioms T and 5 in LS5 are well-known

results, and their soundness in LS5
follows from this. All that is to be shown is

the soundness of GS5.
Let Γ be a finite set of propositional formulae, and let M be a model in S5 such that Ms ▶ Wg∈Γ γ ∧ Vg∈Γ 3γ.
Then for each γ ∈ Γ, there is some successor tg ∈ sRM such that Mtγ ▶ γ.
We can construct the model Mj such that SM′ = {s}∪ {tg | γ ∈ Γ}, RM′ =
SM′ × SM′ and for all p ∈ P , V M′ (p)= V M (p) ∩ SM′ . This model is clearly in S5.
By construction, for each γ ∈ Γ, there is a successor tg ∈ sRM′ such that

j ▶ γ. For each successor t ∈ sRM′ we have that Mj ▶ W

g∈Γ
γ, as each successor

is either one of the tg for some γ ∈ Γ, in which case Mj
▶ γ, or it is our initial

state s, in which case Mj ▶ W

g∈Γ
γ follows from our hypothesis that Ms ▶ W
g∈Γ γ.

Therefore Mj ▶ ∇Γ.
Furthermore we have that Mj ≤ Ms by the relation R = {(s, s)}∪{(tg, tg) | γ ∈
Γ} (atoms and forth are satisfied). Therefore Ms ▶ d∇Γ.
Conversely, let Γ be a finite set of propositional formulae, and let Ms be a model in S5 such that Ms ▶ d∇Γ. Then there exists some model Mj′ ≤ Ms in S5, via
some simulation R⊆ Sj × S, such that Mj′ ▶ ∇Γ.
From the definition of the cover operator, Mj′ ▶ □ Wg∈Γ γ ∧ Vg∈Γ 3γ.

As Mj is in S5 , we know that sj ∈ sjRM′ , and so it follows from Mj
W	s
▶ □ Wg∈Γ γ

and Mj′ are equivalent for propositional formulae. As each γ ∈ Γ is propositional,

s
it follows that Ms ▶
Wg∈Γ γ.

Furthermore, from Mj′ ▶ Vg∈Γ 3γ, we know that for every γ ∈ Γ, there exists

some tj
∈ sjRM′ such that Mj
γ
▶ γ. It then follows from forth that there exists

some tg ∈ SM such that tg ∈ sRM and (tj , tg) ∈ R. From atoms we know that Mt

and Mj
γ
are equivalent for propositional formulae. As γ is propositional, it follows
V

that Mtγ ▶ γ and therefore Ms ▶ 3γ for each γ ∈ Γ. Therefore Ms ▶
so Ms ▶	g∈Γ γ ∧	g∈Γ 3γ.
Therefore GS5 is sound, and so FELS5 is sound for the logic LS5
g∈Γ 3γ, and
.	□

(1)	d(1)
Lemma 4.7 The axiomatisation FELKD45 is sound for the logic LKD45.
(1)	d(1)
Proof. The proof is similar to the proof for Lemma 4.6. Instead of showing sound-

ness for the S5(1) axioms, we must show that the KD45(1) axioms are sound, and this follows from their soundness in LKD45. The main difference in the proof of soundness is for GKD45 as compared to the proof for GS5, is that in the right to
left direction, we do not have to show that Ms ▶ Wg∈Γ ц; as doxastic models do not
have to be reflexive, there is no requirement for s to be in the possible worlds for the constructed refinement. For the left to right direction of the proof, the refinement Mj′ is a KD45 model instead of an S5 model, but this has no bearing on the rest of the proof.	□
We show the completeness of the axiomatisations FELS5 and FELKD45 by
provably correct translations from LS5 to LS5, and from LKD45 to LKD45 respec-

d(1)
(1)
d(1)
(1)

tively. Completeness then follows from the completeness of LS5 and LKD45.
(1)	(1)
Lemma 4.8 Every formula of Ld(1) is provably equivalent to a formula of L(1) with the axiomatisation FELS5.
Proof. Given a formula ψ we prove by induction on the number of occurrences of d that ψ is equivalent to a d-free formula, and therefore to a formula in L(1). The base case with no d operators is trivial, as a d-free formula is a formula in L. Now assume that ψ contains n +1 d-operators. Choose a subformula of type dφ of our given formula, where φ is d-free. Without loss of generality, by Lemma 3.10 we can assume that φ is in cover logic prenex normal form. We prove by induction on the structure of φ that dφ is provably equivalent to a formula χ without the d operator.
d(φ ∨ ψ) iff dφ ∨ dψ. (Derivable from P, G0, and G1, and the induction hypoth- esis.)
d(π ∧ ∇Γ) iff π ∧ Wg∈Γ ц ∧ Vg∈Γ ∇{ц, T}. (Derivable from P, G0, G1, and GS5,
and the induction hypothesis)
Replacing dφ with χ in ψ gives an equivalent formula with one less d-operator. Thus by induction, all formulae in Ld(1) can be translated into an equivalent formula in L(1) using the axiomatisation FELS5.	□
Lemma 4.9 Every formula of Ld(1) is provably equivalent to a formula of L(1) with the axiomatisation FELKD45.
Proof. The proof is similar to the proof for Lemma 4.8, with the main difference being that the axiom GKD45 is used in place of GS5 in the induction over the structure of φ.
Specifically, given some subformula dφ, where φ is d-free, we can prove by in- duction on the structure of φ that dφ is provably equivalent to a formula χ without dφ.
d(φ ∨ ψ) iff dφ ∨ dψ. (Follows from the soundness of P, G0, and G1, and the induction hypothesis.)
d(π ∧ ∇Γ) iff π ∧ Vg∈Γ ∇{ц, T}. (Follows from the soundness of P, G0, G1, and
GKD45, and the induction hypothesis)

The rest is as for Lemma 4.8.	□
The rest of the completeness proof is merely a formality to show that, given the above translations into L(1), we can show completeness by using these translations along with the completeness of LS5 and LKD45.
(1)	(1)
Corollary 4.10 Let φ ∈ Ld(1) be given and ψ ∈ L(1) be equivalent to φ under the
semantics of LS5 . If ψ is a theorem in LS5, then φ is a theorem in FELS5.

d(1)
(1)
(1)

Proof. Let φ ∈ Ld(1) and let ψ ∈ L(1) be semantically equivalent to φ. By Lemma 4.8, we can obtain some φj ∈ L(1) that is semantically equivalent to φ (and thus also to ψ) by following the given translation steps. We can extend a derivation of ψ to a derivation of φj as the two are semantically equivalent under LS5, and by the completeness of LS5 this equivalence is derivable. As FELS5 is a

(1)
(1)
(1)

conservative extension of LS5, this equivalence is therefore also derivable in FELS5.
(1)	(1)
The derivation can be further extended to φ by observing that all of the reduction
steps in Lemma 4.8 are provable equivalences in FELS5. Therefore φ is a theorem
in FELS5.	□
Lemma 4.11 The axiom schema FELS5 is complete for the logic LS5 .
(1)	d(1)
In the following proof we use a subscript on the turnstile symbol to denote the

logic we are working in (e.g. ▶LS5
¢(1)
is entailment in LS5 ).

Proof. Let φ ∈ Ld(1) such that ▶LS5
¢(1)
φ. Then by Lemma 4.8, there exists a

semantically equivalent formula ψ ∈ L(1) which is d-free. As ▶LS5
¢(1)
φ and φ ↔ ψ,

then ▶LS5
¢(1)
ψ. As ψ is d-free, then it follows that ▶LS5 ψ, and by the completeness of
(1)

FELS5 it follows that ▶LS5 ψ. Therefore by Corollary 4.10 we have that ▶LS5
φ.□

(1)
(1)
¢(1)

Theorem 4.12 The axiomatisation FELS5
is sound and complete for the logic

S5
d(1)
Proof. The soundness proof is given in Lemma 4.6 and the completeness proof is given in Lemma 4.11.	□
Theorem 4.13 The axiomatisation FELKD45 is sound and complete for the logic
KD45
d(1)
Proof. The soundness proof is given in Lemma 4.7, and we note that similar results to Corollary 4.10 and Lemma 4.11 can be shown with minor modifications to their proofs, which gives us completeness.	□

Complexity
The proofs of completeness given above allow us to derive a decision procedure for

S5
d(1)
and LKD45, and thus show that these logics are decidable.

Theorem 5.1 The logics LS5 and LKD45 are decidable.


Proof. Given a formula φ in LS5
, we can find an equivalent ψ in LS5
(from

Lemma 4.8). We can therefore determine whether ψ is satisfiable using a decision

procedure designed for LS5. The decidability for LS5
therefore follows from the

decidability of LS5 [4].
(1)
d(1)

The proof for LKD45 is the same, but relying on Lemma 4.9 for the translation, and on the decidability of LKD45 [4].	□
In this section we wish to reason about the complexity of the decidability prob-

lem for LS5
complexity.
and LKD45, and specifically we will present an upper-bound for this

It should be noted that the translation described above has a non-elementary complexity. This comes from the conversion to prenex normal form required for each d-operator. Similar to a disjunctive normal form, this results in an exponential increase in formula size in the worst-case, and this effect is stacked in the case of nested d-operators, resulting in a non-elementary complexity.

Below we describe a better decision procedure for LS5
. We first show that to

determine the satisfiability of φ in S5 (1) it is sufficient to only check a finite set of

models, MS5
, determined by the propositional atoms used in φ.

Lemma 5.2 Let P be a ﬁnite set of propositional atoms. Then there exists a ﬁnite

S5
d(1)
of S5 (1) models such that, if φ ∈ Ld(1) is a formula over the propositional

atoms P then φ is satisﬁable under the semantics of LS5 if and only if φ is satisﬁed

by a model in MS5
Proof. Each model in MS5

is constructed from a set of states S ∈ P(P(P )) −{∅}.

We note that in S5 (1), the relationship between states is uniquely determined from the reflexive, transitive and symmetric properties of S5 (1). We define the valuation at each state to be the set of atoms that represents the state itself.

We first note that LS5
has the finite model property, as it is expressively equiv-

alent to LS5, which also has this property [4]. This means that a formula of Ld(1) is satisfiable in S5 (1) if and only if it is satisfied by a finite model in S5 (1). Fur- thermore, we note that every finite model of S5 (1) is bisimilar to a finite model in

which the valuations at each state are unique. In particular, as MS5
is formed from

every possible combination of valuations over P , any finite model defined over the
propositions in P is bisimilar to a model in MS5 .
Then suppose that φ is satisfiable. Then it is satisfied by a finite model Ms ∈
S5 (1). Without loss of generality we may assume that the only propositions in

Ms are from P . Then Ms is bisimilar to a model in MS5
which also satisfies φ.

Conversely, suppose that φ is not satisfiable. Then it is not satisfied by any finite
model, and so it is not satisfied by any model in MS5 .	□


Given the set MS5
, we can determine the satisfiability of a formula over the

propositional atoms in P by iterating over the models in MS5
and testing each

model according to the semantics of LS5 .
Lemma 5.3 Algorithm 1 reports that a formula φ is satisﬁable if and only if φ is
satisﬁable in LS5 .


Proof. MS5
is finite and computable, from the description given in the proof of

Lemma 5.2. The partial ordering on MS5
can be computed due to Lemma 2.6. The

correctness of the main loop follows from the semantics of LS5
and an inductive

argument over the map satisfies.	□

Corollary 5.4 Satisﬁability for LS5
can be determined in 2EXP time.

Proof. Let φ be a formula of size n. There are at most n distinct propositional

atoms in φ, and so the set of models MS5
contains at most 22n − 1 models. If

models are represented as sets of states, any two models from MS5
can be tested for

bisimulation in O(2n) time, by testing for set inclusion, and so the partial ordering

S5
d(1)
can be determined in O(2n · (22n − 1)2) time. There are also at most n

subformulae of φ, and an ordering of these under inclusion can be computed in O(n)
time.
The inner loop of Algorithm 1 executes at most n· (22n − 1) · 2n times. The cases for φ ≡ p for p ∈ P , φ ≡ ¬α and φ ≡ α∧β can be computed in O(lg n) time. The case for φ ≡ □α can be computed in O(2n) time. The case for φ ≡ ►α can be computed in O(22n − 1) time. Therefore the main loop executes in O(n· (22n − 1) · 2n · (22n − 1)) time, which is O(2O(2n)).	□


Algorithm 1. LS5 -SAT
Require: Let φ be a LS5
formula.

Ensure: Return true if and only if φ is satisfiable.

Construct a partial ordering models on MS5
, ordered by refinement.

Initialise a map satisfies from formulae to sets of pointed models. Initialise the values satisfies(ψ) →∅ for every subformula ψ of φ.
for all Subformulae ψ of φ, in an order that respects the partial ordering of subformula inclusion do
for all M ∈ models do for all s ∈ SM do
Add Ms to satisfies(ψ) if and only if any of the following:
ψ ≡ p for some p ∈ P and p ∈ V M (s)
ψ ≡ ¬α and Ms ∈/ satisfies(α)
ψ ≡ α ∧ β and Ms ∈ satisfies(α) and Ms ∈ satisfies(β)
ψ ≡ □α and Mt ∈ satisfies(α) for every t ∈ sRM

ψ ≡ ►α and Nt ∈ satisfies(α) for every Nt ∈ MS5
if satisfies(φ) /= ∅ then return true else return false
such that Nt ≤ Ms

We can define a set similar to MS5
for KD45 (1) models, called MKD45. Each

model in MKD45 is constructed from a set of states S ∈ P(P(P )) − {∅}, along with an optional state s ∈ S, designated as the only non-reflexive state in the model. We note that in KD45 (1), the relationship between states is uniquely determined by which states are reflexive, along with the serial, transitive and Euclidean properties of KD45 (1). We can then show a similar result to Lemma 5.2, and extend Algo-
rithm 1 to LKD45 by replacing the set MS5 with MKD45. The resulting algorithm

d(1)
also runs in 2EXP time.
Future work
d(1)
d(1)

Left for future work are the generalisation of the axiomatisations to the multi-agent logics LS5 and LKD45, and the consideration of the decidability problems in these
d	d
logics.
The generalisation for the axioms of LK	to the multi-agent logic LK involves
generalising the GK axiom, and adding extra axioms to handle the interaction between different agents. Whilst a similar approach does not seem to work for the
multi-agent LS5, it seems possible for LKD45.
d	d

References
C.E. Alchourr´on, P. G¨ardenfors, and D. Makinson. On the logic of theory change: Partial meet contraction and revision functions. Journal of symbolic logic, pages 510–530, 1985.
P. Balbiani, A. Baltag, H. van Ditmarsch, A. Herzig, T. Hoshi, and T. de Lima. What can we achieve by arbitrary announcements?: A dynamic take on fitch’s knowability. In Proceedings of the 11th conference on Theoretical aspects of rationality and knowledge, pages 42–51. ACM, 2007.
A. Baltag and L.S. Moss. Logics for epistemic programs. Synthese, 139(2):165–224, 2004.
P. Blackburn, M. de Rijke, and Y. Venema. Modal logic, volume 53. Cambridge Univ Pr, 2002.
H. van Ditmarsch, and T. French Undecidability for arbitrary public announcement logic. Proceedings of Advances in Modal Logic 2008, 2008.
H. van Ditmarsch and T. French. Simulation and information: Quantifying over epistemic events.
Knowledge Representation for Agents and Multi-Agent Systems, pages 51–65, 2009.
H. van Ditmarsch, T. French, and S. Pinchinat. Future event logic: axioms and complexity. In 8th International Conference on Advances in Modal Logic, AiML2010, Moscow, Russia, August 24-27, 2010, 2010.
J. Gerbrandy and W. Groeneveld. Reasoning about information change. Journal of Logic, Language and Information, 6(2):147–169, 1997.
W. van der Hoek and J.J.C. Meyer. Epistemic logic for AI and computer science. Cambridge Univ Pr, 2004.
J. Plaza. Logics of public communications. Synthese, 158(2):165–179, 2007.
