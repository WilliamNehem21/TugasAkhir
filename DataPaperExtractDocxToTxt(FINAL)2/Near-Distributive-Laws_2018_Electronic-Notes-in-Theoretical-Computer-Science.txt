Available online at www.sciencedirect.com


Electronic Notes in Theoretical Computer Science 341 (2018) 277–295
www.elsevier.com/locate/entcs
Near Distributive Laws
Ernie Manes1
Department of Mathematics and Statistics University of Massachusetts at Amherst USA
Phil Mulry2
Department of Computer Science Colgate University Hamilton NY, USA

Abstract
Monads and their compositions can sometimes be generated from simpler data types and without neces- sarily requiring any monad axioms. Free monads and monad approximations provide two approaches to overcoming the constraints required by monad composition laws while generating near distributive laws.
Keywords: monad composition, free monad, monad approximation, near distributive law.


Introduction
This paper continues our study of monad composition in [10], [11]. We will use the same notations as in the second of these papers. We work in a category V.
In working with monads in a programming language, there are two problems: It may be hard to define a monad using the data types available to the programmer, and it may be difficult to verify the monad axioms. The second of these is a very common situation in monad composition.
Given monads (H, μ, η) and K, ν, ρ) their composition should have form (KH, τ, ρη). The problem is that there is no obvious τ . The solution is to pro- vide a natural transformation λ : HK → KH which allows τ to be defined as
KλH	νμ
τ = KHKH −−→ KKHH −−→ KH

1 Email: egmanes@gmail.com
2 Email: pmulry@colgate.edu

https://doi.org/10.1016/j.entcs.2018.11.014
1571-0661/© 2018 The Author(s). Published by Elsevier B.V.
This is an open access article under the CC BY-NC-ND license (http://creativecommons.org/licenses/by-nc-nd/4.0/).

The axioms on λ equivalent to rendering (KH, τ, ρη) a monad were discovered by [3] and are as follows.

H	Hρ	) HK
(	Hν	 HKK

(DL A)
λ
(DL B)
vλK KHK

 
ρH 
	v
vKλ

   KH (	 KKH
νH


K	ηK	) HK
(	μK
HHK

(DL C)
λ
(DL D)
vHλ HKH

 
Kη 
	v
vλH

   KH (	 KHH
Kμ
Axioms (DL C, DL D) hold if and only if K lifts through the category VH of Eilenberg-Moore algebras of H and we say λ is a near distributive law in this case.
In practice, such axioms present an obstruction to the programmer. We recall [4, Page 34]:
“all polymorphic functions in functional programming are natural transforma- tions”.
Thus the axioms are the obstruction and not the requirement of naturality. In this paper we present two approaches to getting around the obstruction and, in the process, discover various near distributive laws. In the first case, we consider endofunctors H, K and arbitrary natural transformations λ : HK → KH where there are no axioms on λ. If H generates a free monad H@ then λ induces a near distributive law λ@ : H@K → KH@ and say λ generates λ@. We consider in detail near distributive laws for a common class of free monads namely those generated by algebraic signatures.
A different approach involves defining the notion of a pre-monad in V to be (H, η, μ) with H : V → V an endofunctor and μ : HH → H, η : id → H natural transformations, with no further axioms. Pre-monads retain a surprising amount of structure. Analogous to the property of generating a free monad, we shall see that a pre-monad H usually has a monad approximation H. We show that if (K, m, e) isa pre-monad, then a near distributive law λ : HK → KH induces a near distributive law λ^ : H^ K → KH^ .

Free Monads
Our most relaxed model of a monad is a functor H : V → V. In standard situations the free monad generated by H, (H@, μ, η; ι) exists where H@ = (H@, μ, η) isa monad in V and ι : H → H@ is a natural transformation, subject to the universal property [2]

H 	ι	) H@
 
 
(H@, μ, η)

α	ψ
 
v
K
ψ
v
(K, ν, ρ)

that if (K, ν, ρ) is a monad in V and α : H → K is a natural transformation then there exists a unique monad map ψ as shown with ψι = α.
Example 2.1 Assume that V has finite powers. For a finite ordinal i ≥ 1, let Hi : V → V be the functor HiX = Xi, the usual i-ary power functor. When V = Set, the data type H@X is the set of all trees in which every node is either an element of X, denoted Lix (if it is a leaf) or has i subtrees beneath it, denoted Bit1 ··· ti ∈ H@X. The natural transformation ηX : X → H@X maps x to Lix
i	i
while μX : H@H@X → H@ maps Lit to t and Bi t1 ... ti to Bi (μX t1) ... (μX ti).
i	i	i
In what follows, we consider only H for which H@ exists.
Definition 2.2 An H-algebra is a pair (X, δ) where δ : HX → X in V. An
H-homomorphism f : (X, δ) → (Y, ϵ) of H-algebras must satisfy
HX	Hf ) HY
δ	ϵ
v	v
X	) Y
f
It is evident that idX : (X, δ) → (X, δ) is an H-homomorphism and that H- homomorphisms are closed under composition. This gives rise to a category VH of H-algebras with underlying functor VH → V.
Theorem 2.3 [2] If VH →V is monadic, VH is isomorphic over V to the category of Eilenberg-Moore algebras VH@ , where H@ is the free monad generated by H. The isomorphism Φ: VH@ → VH is given by
@	ξ	ιX	@	ξ

Φ(X, H
X −−→ X) = (X, HX −−→ H X −−→ X)

Functorial Lifts
Definition 3.1 Let H = (H, μ, η) bea monad in V, and let K : V → V be a functor. A functor K٨ : VH → VH is a functorial lift of K through the Eilenberg-Moore category VH if the following square commutes:

K٨)
V	V

v	v
V	) V
K
The following result is due to [1]. Also, see [7].
Theorem 3.2 For H = (H, μ, η) a monad in V and K : V → V a functor, functo- rial lifts K٨ : VH → VH are in bijective correspondence with natural transformations λ : HK → KH which satisfy (DL C) and (DL D). The correspondences are
٨	λX	Kξ

K
and
(X, ξ)= (KX, HKX −−−−→ KHX −−−−→ KX)

HKηX	ωX
λX = HKX −−−−→ HKHX −−−−→ KHX

where K
٨(HX, μX)= (KHX, HKHX −−→ KHX). Further,


λHX
KμX

ωX = HKHX −−−−→ KHHX −−−−→ KHX

It is immediate that λX : (HKX, μKX) → K٨(HX, μX) isa H-homomorphism; the homomorphism diagram is precisely (DL D). It follows (using (DL C)) that λX is the unique homomorphic extension of Kη. There is more than one possi- ble λ, however, because there is more than one possible K-algebra structure for K٨(HX, μX).
Definition 3.3 Let H : V → V generate a free monad H@ and let K : V → V be a functor. Let K٨ : VH@ → VH@ be a functorial lift of K with classifying natural transformation λ@ : H@K → KH@ as in Theorem 3.2. We say K٨ is a flat functorial lift if there exists a natural transformation λ : HK → KH such that the following square commutes.
HK   ιK ) H@K
λ	λ@	(3.3)
v	v
	)
KH	Kι	KH@
We then say that λ generates K٨, or λ generates λ@, and when K is a monad that λ@ is a flat near distributive law.
Theorem 3.4 Given H, K : V → V such that H@ exists, every natural transfor- mation λ : HK → KH generates a flat functorial lift of K through H@.

Proof. Given λ, define K† : VH → VH over V by
†	λX	Kδ
K (X, δ) = (KX, HKX −−−−→ KHX −−−−→ KX)

If f : (X, δ) → (Y, ϵ) is an H-homomorphism, the diagram

HKX
λX ) KHX  Kδ) KX

HKf
v
KHf	Kf
v	v
	)		)

HKY	λY
KHY
Kϵ	KY

shows that Kf : K†(X, δ) → K†(Y, ϵ) is again an H-homomorphism. In the nota- tions of Theorem 2.3 we then have the functorial lift

K٨ = VH@	Φ
H	K†
H	Φ−1	H@

We leave the remaining details to the reader.	2
Corollary 3.5 Given H, K : V → V where K is a monad and H@ exists, then every natural transformation λ : HK → KH generates a flat near distributive law λ@ : H@K → KH@.

Near Distributive Laws for Free Monads
Near Distributive Laws via Generic Prestrengths
The notion of prestrength on an endofunctor F of a category was defined and used in [11] and [12] as part of the process of working with Kleisli strength. For fixed n ≥ 1, a prestrength of order n on the functor F is a natural transformation Γn : FX1 ×· · · × FXn → F (X1 ×· · · × Xn). We note immediately that a special case of a prestrength of order n on the functor F is a natural transformation Γn : HnF → F Hn, where Hn is the n-ary power functor of Example 2.1. We exploit the existence of what could be suitably called a monad-induced generic prestrength to derive classes of near distributive laws on free monads H@. Later, in Section 4.3, we will identify alternative non-generic kinds of prestrengths which generate in turn different near distributive laws.
Lemma 4.1 For any monad K = (K, ν, ρ) in Set there exists a generic prestrength
Γn : KX1 ×  KXn → K(X1 ×   n) of order n ≥ 1.
Proof. Let K = (K, ν, ρ) be a monad in Set. We show for any given n ≥ 1 there exists a natural transformation Γn : KX1 × ...KXn → K(X1 × ...Xn). Suppose there exists a natural transformation in two variables
ΓXYKX × KY − −→ K(X × Y )

Then for n = 1 define Γ1 = idX1 , and for n = 2 let Γ2 = ΓX X
. Proceeding

1 2
inductively, if Γi is natural, we obtain a natural transformation Γi+1 by

idX1 ×Γi

ΓX1(X2 ... ×Xi+1)

KX1 × (KX2 ... × KXi+1) −−−−−−→ KX1 × K(X2 ... × Xi+1) −−−−−−−−−−→ K(X1 × X2 ... × Xi+1)
To construct Γ2, for x ∈ X let inx : Y → X × Y be defined by inx(y)= (x, y). It is

obvious that the following square commutes for each f : X → X1, g : Y → Y1:

Y	inx
g
) X × Y
f × g

v	)


Y1	infx
v
X1 × Y1

Define δXY : X × KY → K(X × Y ) by δXY (x, τ )= (K inx) τ . From the preceding square and the functoriality of K we obtain

X × KY
δXY
) K(X × Y )



f × Kg
v
	)
K(f × g)
v

X1 × KY1
δX1Y1
K(X1 × Y1)

At this stage, we need that K is a monad. Any function from X to a K-algebra admits a unique K-homomorphic extension f # from the free algebra (KX, μX).

Define the desired ΓXY
: KX × KY → K(X × Y ) by ΓXY
(σ, τ )= δXY
(·,τ )#σ. The

desired naturality square amounts to the commutativity of

(δ	(·,τ ))#
KX
) K(X × Y )

Kf	K(f × g)
v	v
	)

KX1
(δX1Y1
(·, (Kf )τ ))#
K(X1 × Y1)

for each τ ∈ KY . Since each of the four maps in this square isa K-homomorphism, it suffices to check commutativity restricted to the generators ρX and this is clear from the square for δXY  immediately above.	2
Amenable Monads
We know of no nontrivial monad which admits a distributive law with every monad. This places some constraint on the use of distributive laws in programming. We consider instead monads which admit near distributive laws with every monad, calling these amenable and provide examples.
Definition 4.2 A monad H in V is amenable if for every monad K in V, K has a functorial lift through VH.
Proposition 4.3 The monads H@ in Set of Example 2.1 are amenable.
Proof. Let K = (K, ν, ρ) bea monad in Set. By Lemma 4.1 there exists a generic natural transformation Γi : HiK → KHi for every i ≥ 1 and so by Corollary 3.5 we are done.	2

Example 4.4 Let (C, e, ∗) bea monoid and let K be the reader monad KX = C ×
X. Then λ = Γ2 : H2K → KH2 in Proposition 4.3 becomes Γ2((c1, x1), (c2, x2)) = (c1 ∗ c2, (x1, x2)). Acting on a binary tree t of type H@KX, λ@(t)= (p, t∗) where p is the product of the cis found in the leaves and t∗ is the corresponding tree in H@X consisting only of the elements of X.
Example 4.5 When K is itself a free monad of the form H@, we can give a recursive

construction of the functorial lift of K = H@
@
through Set i
defining the near

distributive law λ : H@H@ → H@H@ in cases. Details are straightforward and left
i	j	j	i
to the reader (see Example 2.1 for notation). For i, j ≥ 1:
λ(LiLja)= LjLia
λLi(Bjt1 ··· tj)= Bj(λLit1) ··· (λLitj)
λBi(t1 ··· ti)= (H@Bi)Γi((λt1), ··· , (λti))
Proposition 4.6 Let V have small coproducts, let (Hα) be a small family of endo- fuctors and let H = Hα be the pointwise coproduct. Assume that the free monads H@, H@ exist. Then if each H@ is amenable, so is H@.
α	α
Proof. An H-algebra is determined by a family (δα : HαX → X). Let K be a
δα	єα
monad in V and let (X, HαX −−→ X) '→ (KX, HαKX −−→ X) under a functorial
lift of K through VHα . The remaining details are clear.	2
Example 4.7 Let Σ be a finitary operator domain, that is, a disjoint sequence (Σn) of (possibly empty) sets. A Σ-algebra (as conventionally defined in universal algebra) is (X, δ) where X is a set and δ = (δσ : σ ∈ Σ) with δσ : Xn → X if σ ∈ Σn. Consider the coproduct functor
HΣX =   Xn
σ∈Σn
so that an HΣ-algebra is the same thing as a Σ-algebra.
A variety of universal algebras is obtained from SetHΣ by imposing equations.
H@X is the usual free Σ-algebra generated by X. It is immediate from Propositions
4.3 and 4.6 that H@ is an amenable monad in Set.

Prestrengths and Flat near distributive Laws
In this section we consider a different class of flat near distributive laws which generally differ from those of the previous section.
Lemma 4.8 For any monad K = (K, ν, ρ) in Set, if there exists a natural trans- formation γ : K → id then there exists a prestrength Γi : KA1 × ... × KAi → K(A1 × ... × Ai) for any i ≥ 1.
Proof. The construction is simple: for i = 1 define Γ1 = ρ ◦ γ. If i ≥ 2 then Γi = ρ◦(γ×.. .×γ). Since in each case Γi is a composition of natural transformations we are done.	2

Proposition 4.9 For any monad K = (K, ν, ρ) with natural transformation γ :
K → id, there exists a flat near distributive law λ@ : H@K → KH@.
i	i
Proof. For any i ≥ 1, the prestrength Γi of the previous lemma generates a natural transformation HiK → KHi and so the result follows immediately from Corollary
3.5.	2
Example 4.10 For j ≥ 1 let πj denote the j-th projection natural transformation Hj → id. By the previous proposition this generates a flat near distributive law λ@ : H@H@ → H@H@ which generally differs from that of Example 4.5.
i	j	j	i
Example 4.11 Let K be the reader monad of Example 4.4 with monoid (C, e, ∗). Define γ : K → id by γ(c, a)= a. Such γ is natural, generating Γn : KA1×...KAn → K(A1 × ...An). For the monad of non-empty lists L, the resulting flat distributive law λ@ : L(C × A) → C × LA takes [(c1, a1), ...(cn, an)] to (e, [a1, ...an]).

Uniformly branching trees and non-flat near distributive laws.
For the free monad H@, H@X consists of trees in which every non-leaf has i
i	i
branches. Due to their particular structure, these trees also generate a class of

(not necessarily flat) near distributive laws of H@
over H@
for which very little

underlying data is either created or destroyed in the process. Significantly these near distributive laws do not arise via flat liftings, but rather arise directly from the monad structure on H@.
Recall that an algebra for H@ is generated by (A, [ ]i), where [ ]i : Ai → A is an i-ary operation on A. For i, j ≥ 1, we build a recursive schema for canonical
functorial liftings of H@ over SetH@ . To do this, we define (H@)∗ in cases and
j	i	j
expressly define (H@)∗(A, [ ]i)= (H@A, [ ]i). (Note that we use the same notation
j	j
for the two i-ary operations). When i =1 
[(Lj a)]1 = Lj([ a]1)
[(Bj t1...tj)]1 = Bj [t1]1...[tj]1
Likewise when j =1 we have
[L1a1, ...L1ai]i = L1[a1, ...ai]i
[L1a1, ...L1ai−1, (B1 t)]i = B1 [L1a1, ...L1ai−1, t]i
etc
[(B1 t1) t2...ti]i = B1 [t1, t2...ti]i
Otherwise for i, j ≥ 2
[Lja1, ...Ljai]i = Lj[a1, ...ai]i
[Lja1, ...Ljai−1, (Bj ti,1...ti,j)]i = Bj [Lja1, ...Ljai−1, ti,1]i ti,2...ti,j
etc
[(Bj t1,1...t1,j) t2...ti]i = Bj t1,1...t1,j−1 [t1,j, t2...ti]i

Theorem 4.12 For i, j ≥ 1, there exists a schema of recursively deﬁned near dis-

tributive laws λ : H@H@
→ H@H@
between all free monads H@,H@
as deﬁned

above.
i	j	j	i	i	j

Proof. A near distributive law λ is created via the lifting functor (H@)∗ over
H@ algebras described above. Applying (H@)∗ to (H@A, Bi), the i-ary operation
i	j	i
associated to the canonical algebra (H@A, μ) generates λ defined by the following
set of equations:
λ(LiLj a)= LjLi a
λLi(Bjt1... tj)= Bj(λ Lit1)...(λ Litj)
λ(Bi t1... ti)= [λti]i where [ ]i is defined as in the previous result
Verifying that the two laws (DL C) and (DL D) hold follows from a straightforward argument via structural recursion and is left to the reader.
2
Example 4.13 For the special case of i = 1 of Theorem 4.12, H@ is the writer monad N × where N is the commutative monoid of natural numbers {0, 1, 2,.. .} under addition. λ : N × H@ a → H@(N × A) is actually a distributive law where
j	j
λ(n, t) distributes n to each leaf of tree t. Likewise for the special case of j = 1,
λ : H@(N × A) → N × H@A is again a full distributive law as follows. For an
i	i
arbitrary tree t in H@(N × A), λ t = (k, t∗) where t∗ is the tree in H@A, with the
i	i
same shape as t, generated by replacing every leaf in t of the form Li(m, a) by Lia
and where k equals the sum of all the m’s found in the leaves.
Are the near distributive laws of Theorem 4.12 always distributive laws as in the two cases of the previous example? The answer is no in every other case.
Theorem 4.14 For any i, j ≥ 2 the near distributive law λ : H@H@ → H@H@
i	j	j	i
of Theorem 4.12 fails to produce a distributive law as one can produce a tree t ∈
H@H@H@ for which law (DL B) fails.
i	j	j
Proof. For λ : H@H@ → H@H@ we produce a tree t ∈ H@H@H@ with 4(j − 1) + i
i	j	j	i	i	j	j
leaves for which (DL B) fails. Let
lt = Bj (Lj (Lj a1))...(Lj (Lj aj−1)) (Lj(Bj(Ljaj)...(Lja2j−1)))
rt = Bj (Lj(Bj(Lja2j)...(Lja3j−1))) (Lj (Lj a3j))...(Lj (Lj a4j−2))
t = Bi(Li(lt)) (Li(Lj(Ljb1))) ... (Li(Lj(Ljbi−2))) (Li(rt))
then (DL B) fails for this t. The details are left to the reader.	2
5	Pre-Monads
Definition 5.1 A pre-monad in V is H = (H, μ, η) with H : V → V a functor and with η : id → H, μ : HH → H natural transformations.

Composition of pre-monads is easily obtained. If (H, μ, η) and (K, ν, ρ) are pre- monads and if λ : HK → KH is a natural transformation, we obtain the composite pre-monad
KλH	νμ	ρη
(KH, KHKH −−−−−−→ KKHH −−−−→ KH, id −−−−→ KH)
It develops that λ with additional axioms will classify a functorial lift of K through VH. To make sense of this we will have to define the “Eilenberg-Moore” category VH.
Definition 5.2 The axioms defining an algebra (X, ξ) for a pre-monad H = (H, μ, η) and an H-homomorphism f : (X, ξ) → (Y, θ) are exactly the same as for a monad, namely

X	ηX	)HX ( μX

HHX
HX	Hf ) HY



id	ξ
Hξ	ξ	θ

X

v	v	v	v

X (	 HX
ξ
X 	) Y
f

As for monads, the resulting category of algebras is denoted VH. It is well known that the theory of algebras for a monad provides an approach to developing universal algebra [9]. It is very frequently the case that for a pre-monad K there is an isomorphism Φ : VK → VK• with K• a monad, i.e. that VK →V is monadic. By the well-known “Beck tripleableness theorem” it is enough that V is complete and that VK →V satisfies the solution set condition, since the coequalizer condition of the theorem always holds. This shows that pre-monads play a role in developing universal algebra. This idea will be developed elsewhere, but we present an example now, with emphasis on the idea that pre-monads may reduce complications for the programmer.
A band is a semigroup in which every element is idempotent. Bands arise as the variety of semigroups satisfying the additional equation xx = x, so the monad B for bands is a quotient monad θ : L → B of the monad of non-empty lists. Note that throughout the paper the list monad will refer to non-empty lists. From the point of view of the monad programmer, the construction of the free band BX (despite the fact that BX is finite when X is, unlike the situation with lists) is not intuitive. An entire section of [6] is devoted to the word problem involved.
We next introduce an approach to bands which uses only the list data type. This illustrates our claim that, by relaxing axioms, we can sometimes describe what we need using readily available data types. We shall see in Theorem 6.2 below how this result leads to a simplification in specifying near distributive laws. In effect, we have gotten around the work to solve the word problem for free bands by simply not needing it!
Proposition 5.3 Let (L, m, e) be the monad of non-empty lists in Set. Modify this to the pre-monad (L, m, eˆ) where eˆX x = [x, x]. Then Set(L,m,eˆ) is the category of

bands.
Proof. An algebra (X, ξ) satisfies

X	eˆX

id 
)LX ( mX


ξ
LLX

Lξ

X

v	v
X (	 LX
ξ
We have
x = ξ[x, x] = ξ(mX[[x], [x]]) = ξ(Lξ)[[x], [x]])
= ξ([ξ[x], ξ[x]] = ξeˆX(ξ[x]) = ξ[x]
But then (X, ξ) is also an algebra of the list monad, that is a semigroup (X,·) with ξ([x1,..., xn]) = x1 ··· xn. This semigroup is a band because x2 = ξ[x, x]= x. The remaining details are routine.	2
Although every monad is a pre-monad, a pre-monad need not satisfy any of the three monad axioms. We do have two pre-monad laws or axioms (PME.1, PME.2) where “PM” stands for “pre-monad”.
Proposition 5.4 Pre-monads may be equivalently described as (H, (·)#, η) where
f
H : V → V is a functor, η : id → H is a natural transformation and X −−→ HY '→
f#
HX −−→ HY is an operator subject to the axioms


(PME.1) For g : Y → HZ,	g#
Hg	(idHZ )

= HY −−→ HHZ −−−−−−→ HZ
(PME.2) For f : X → HY , g : Y → Z, (Hg) f # = ((Hg)f )#
As for monads, the correspondences are
#	Hf	μY
f	= HX −−→ HHY −−→ HY
μX = (idHX)#
Proof. Let (H, μ, η) be a pre-monad. For f : X → HY define f # : HX → HY as in (4). Since H(idHX) = idHX, (idHX)# = μX, and this gives (PME.1). For (PME.2), let f : X → HY , g : Y → Z. Then
(Hg)f # = (Hg) μY (Hf )= μZ (HHg) (Hf )	(μ natural)
= μZ H((Hg)f )= ((Hg)f )#
Conversely, let (PME.1, PME.2) hold and define μ by (5). (4) holds by PME.1. For
g : Y → Z,
(Hg) μY = (Hg) (idHY )# = ( (Hg) idHY )#	(PME.2)
= (Hg)# = μZ (HHg)

which shows that μ is natural. To complete the proof, we show the two passages are inverse bijections. Start with (·)#, define μZ = (idHZ)# and then (·)## by (4). Then (·)# = (·)## by (PME.1). Starting with μ, define (·)# as in (4) and then νZ = (idHZ)#. Then νZ = μZ as is clear from setting g = idHZ in (4). The proof is complete.	2
Definition 5.5 Let H = (H, μ, η), K = (K, ν, ρ) be pre-monads. A pre-monad map σ : H → K is a natural transformation σ : H → K such that
id	η	) H (	μ	HH

ρ	σσ
 
v	v
K (	ν	KK
The definition is the same as the usual one for monad maps so that monads form a full subcategory of pre-monads.
Definition 5.6 Given a pre-monad H in V, a monad approximation of H is a reflection σ : H → K of H in the full subcategory of monads.
Theorem 5.7 Let H = (H, μ, η), K = (K, ν, ρ) be pre-monads in V. Then a pre- monad map σ : H → K induces a functor W : VK → VH over V deﬁned by
σX	ξ
W (X, ξ)= (X, HX −−→ KX −−→ X)
If, additionally, K is a monad, then σ '→ W is bijective with inverse
HρX	γX
σX = HX −−−−→ HKX −−−−→ KX
where (KX, γX)= W (KX, νX).
Proof. Given σ, we first show W (X, ξ) is an H-algebra.  This follows from
ξ σX ηX = ξ ρX = idX and
ξ σX μX = ξ νX(σσ)X	(σ pre-monad map)
= ξ νX σKX(HσX)
= ξ(Kξ)σKX(HσX)	(K-algebra)
= ξ σX(Hξ)(HσX)	(σ natural)
= ξ σX H(ξσX)
That W maps homomorphisms to homomorphisms is clear from the naturality of σ. Now assume that K is a monad, so that (KX, νX) isa K-algebra. We next show that if W '→ σ '→ W then W = W . (Of course we cannot assume here that σ is a pre- monad map since that has not yet been shown). Starting with a K-algebra (X, ξ),

W (X, ξ) is (X, HX
σ
−−→ KX
ξ
−−→ X) where σX = HX
HρX
−−→ HKX
γX
−−→ KX

and (KX, γX) = W (KX, νX). As ξ : (KX, νX) → (X, ξ) is a K-homomorphism,
ξ : (KX, γX) → W (X, ξ) is an H-homomorphism. Writing W (X, ξ) as (X, δ), we

have the commutative diagram

HρX
HX
 
 
id 
) HKX

Hξ
γX ) KX

ξ

X

v	v
HX 	) X
δ
where the square is because ξ is a homomorphism and the triangle is a K-algebra axiom. But the top row is σX, so δ = ξ σX and W (X, ξ)= (X, δ)= W (X, ξ). We may apply this, in particular, to the K-algebra (KX, νX) to establish that
γX = νX σKX
We turn to showing that W '→ σ is well defined. For f : X → Y in V, Kf : (KX, νX) → (KY, νY ) isa K-homomorphism. Applying W gives the square on the right in the diagram
HX	HρX ) HKX	γX	) KX

Hf	HKf	Kf
v	v	v
	)		)
HY	HρY	HKY	γY	KY
But the square on the left commutes because ρ is natural. Since the rows are σX and σY , the perimeter of the diagram then shows that σ is natural. The first pre-monad map law is shown by
σX ηX = γX(HρX)ηX  = γX ηKX ρX	(η natural)
= ρX	( (KX, γX) algebra) For the second pre-monad map law,
νX(σσ)X = νX σKX(HσX)  =  γX(HσX)	(by (8) ) 
= γX(HγX)(HHρX)  =  γX μKX(HHρX)	( (KX, γ) algebra)
= γX(HρX)μX	(μ natural)
= σX μX
Finally, we show that if σ '→ W '→ σ then σ = σ. σX = γX(HρX) = νX σKX(HρX)	( by (8))
= νX(KρX)σX	(σ natural)
= σX	(K monad)
2
Theorem 5.8 Let H be a pre-monad such that U : VH → V is monadic so that there exists a monad K and an isomorphism of categories Φ : VK → VH over V. Then the corresponding pre-monad map σ : H → K of Theorem 5.7 is a monad approximation of H.

Proof. Let α : H → M be a pre-monad map with M a monad and show that there exists a unique monad map β completing the triangle below.
H 	σ ) K
 
α	β
 
  v
M
Let W : VM → VH correspond to α and let β be the unique monad map

corresponding to VM
−−W→ VH Φ−1
K. We leave the remaining details to the

reader.	2
Example 5.9 By the theorem, σ : (L, m, eˆ) → B is a monad approximation of the band monad. This example can be easily generalized. Let (L, m, eˆ) be the list premonad where eˆ(x) = [x, x, x,   , x] n-times and m is the usual counit for lists.
Then Set(L,m,eˆ) is the category of n-bands (semigroups in which xn = x for every element).
Example 5.10 Let (L, mˆ , e) be the list premonad where e(x)  =  [x] and
mˆ [l1,	lk]= l++ l++	l k-times where l has the same length as list l1 and all of its
elements are the first element of l1. Then σ : L → N × A where σ [a1	ak]= (k, a1)
has as monad approximation the reader monad N × A where N = (N, ∗, 1) is the monoid of natural numbers under multiplication.
Example 5.11 A rectangular band is a semigroup in which every element is idem- potent and additionally the equation xyz = xz holds. Let (L, mˆ , eˆ) be the list
premonad with eˆ(x)= [x, x] and mˆ ll = [fst fst ll, lst lst ll] where fst and lst pick
out the first and last elements of a non-empty list. As in the case of Proposition 5.3, an algebra (X, ξ) in Set(L,mˆ,eˆ) satisfies x = ξ[x]. Additionally,
x(yz)= ξ[ξ[x], ξ[y, z]]
= ξ ◦ mˆ [[x], [y, z]] = ξ[x, z]= xz
Similarly, (xy)z = xz. The rectangular band monad R = (R, μ, η) where R A = A×A is the monad approximation of (L, mˆ , eˆ) defined by the reflection σ [x]= (x, x) and σ [x1,... xn] = (x1, xn). One can easily check that σ is a premonad map and that the monad properties of (R, μ, η) can be derived directly from (L, mˆ , eˆ). See Example 6.5.
Example 5.12 Let (L, mˆ , e) be the list premonad where e(x) = [x], mˆ [[x]] = [x] and mˆ [l1, ...lk] = [fst l1,fst l1]. Then σ : L → B × A defined by σ [a] = (F, a), σ [a1...ak] = (T, a1) defines a monad approximation of the Boolean-set monad B × A where Bool= (T, F ), B = (Bool, OR,F ). The algebras (X, ξ) in Set(L,mˆ,e) are semigroups that satisfy xy = x2 since
xy = ξ[x, y]= ξ[ξ[x], ξ[y]]
= ξ ◦ mˆ [[x], [y]] = ξ[x, x]= x2

6	Near Distributive Laws for Pre-Monads
We note that the laws DL A, DL B, DL C, DL D make sense whenever (H, μ, η), (K, ν, ρ) are pre-monads. In this section, we show how distributive laws and near distributive laws for pre-monads induce similar laws on their monad approximations. As shown in [10, Theorem 2.2.2] the following result is well known when H is a monad. The generalization to the case when H is a pre-monad must be proved with some care.
Theorem 6.1 Let K : V → V be a functor, (M, m, e) a monad in V and let (H, μ, η) be a pre-monad in V such that VH →V is monadic. Functorial lifts K٨ : VM → VH correspond bijectively to natural transformations λ : HK → KM which satisfy (K٨ A, K٨ B):

ηK
K
(K٨ A)
) HK
(	μK

(K٨ B)
HHK
νHλ

	λ
Ke 
	ν
HKM
νλM


The correspondences are
   KM (	 KMM
Km

٨	θ	λX	Kθ
K (X, MX −−→ X)= (KX, HKX −−→ KMX −−→ KX)
and, if K٨(MX, mX)= (KMX, γX),
HKeX	γX
λX = HKX −−−−→ HKMX −−−−→ KMX
Moreover, half of this result holds if M is only a pre-monad, namely if λ satisfies (K٨ A) and (K٨ B), then K٨ as in (9) is a functorial lift VM → VH of K.
Proof. Given λ satisfying (K٨ A) and (K٨ B) and assuming that M, H are arbi- trary pre-monads, we first show that (KMX, (Kθ) λX) is an H-algebra by checking the properties in Definition 5.2. We have
(Kθ)λX ηKX = (Kθ)(KeX)   ((K∗A) for λ)
= idKX   (θ algebra)
Also,
(Kθ)λX μKX = (Kθ)(KmX)λMX(HλX)	((K∗ B) for λ)
= (Kθ)(KMθ)λMX(HλX)	(θ algebra)
= (Kθ)λX(HKθ)(HλX)	(λ natural)
Further an M-homomorphism f : (X, ξ) → (Y, θ), Kf is an H-homomorphism as follows:
(Kf )(Kξ)λX = (Kθ)(KMf )λX	(M-homomorphism)
= (Kθ)λY (HKf )	(λ natural)
Conversely, now assuming that M is a monad, let K٨ : VM → VH be a functorial

lift of K.  Let σ : H → H^
be such that (H^ , μ^, η^) is the monad approximation

corresponding to the isomorphism Φ : VH^ → VH, (X, ξ) '→ (X, ξσ  ) as in Theorem
5.8. This gives rise to a new functorial lift

VM	Ks
H	Φ−1	H^

of K which, since the theorem holds for monads, corresponds to a natural transfor- mation λ^ : H^ K → KM which satisfies (K٨ A) and (K٨ B). Define
σK	λ^
λ = HK −−−−→ H^ K −−−−→ KM
We first show that such λ satisfies (K∗ A) and (K∗ B).
λ^(σK)(ηK)= λ^(η^K)	(σ pre-monad map)
= Ke	((K∗ A) for λ^)
λ^(σK)(μK)= λ^(μ^K)(σH^ K)(HσK)	(σ pre-monad map)
= (Km)(λ^M )(H^ λ^)(σH^ K)(HσK)	((K٨ B) for λ^)
= (Km)(λ^M )(σKM )(Hλ^)(HσK)	(σ natural)
as desired.
If K٨(MX, mX) = (KMX, γX) there exists a unique H^ -algebra (KMX, γ^X)
with γX = HKMX −−−→ H^ KMX −−→ KMX. By (10), which holds since H^ is a

H^ KeX
γ^X

monad, λX = HKM X −−−−→ HKM X −−→ KMX. We can then check that λ is
also defined by (10) as follows.
λ^X σKX = γX (H^ KeX) σKX
= γX σKMX (HKeX)	(σ natural)
= γX (HKeX)
So far, the passages of (9, 10) are well defined. If λ '→ K٨ '→ λ1 then γX = (KmX) λMX so
λ1,X = (KmX) λMX (HKeX) = (KmX) (KMeX) λX	(λ natural)
= idKMX λX	(mX algebra)
= λX

If K٨ '→ λ '→ K•, let K٨(X, ξ) = (KX, HKX
−−δ→ KX).  Taking K٨ of the

M-homomorphism ξ : (MX, mX) → (X, ξ) gives a commutative square

HKMX
HKξ
) HKX

γX	δ
v	v
	)
KMX	Kξ	KX
Then K•(X, ξ)= (KX, ϵ) where
ϵ = (Kξ) λX = (Kξ) γX (KHeX)
= δ (HK(ξeX)) = δ	(ξ algebra)
2

We conclude the section with the promised theorems and point out the connec- tion to Proposition 5.3 (which asserts that the band monad is the monad approxi- mation of (L, m, e^) ).
Theorem 6.2 Let K = (K, ν, ρ) be a pre-monad in V and let H = (H, μ, η) be
a pre-monad in V with monad approximation σ : H → H^ , H^ = (H^ , μ^, η^). Let
λ : HK → KH be a natural transformation satisﬁng (DL C, DL D). Then there

exists a near distributive law λ^ : H^ K → KH^
square commutes. We say λ generates λ^.
  σK )
of H^
over K such that the following

HK
λ
v
	)
KH	Kσ
H^ K
λ
v
KH^

(6)

Proof. For σ : H → H^ the monad approximation of H, the isomorphism Φ : VH^ →

VH maps the free algebra (H^ X, μ^
) to the H-algebra (H^ X, μ^X
σH^ X
), K٨ of which

is (KH^ X, ωX) where


λHˆ X


KσHˆ X


KμˆX

ωX = HKH^ X −−−−→ KHH^ X −−−−→ KH^ H^ X −−−−→ KHˆ X
Applying Theorem 6.1 to the composite functorial lift through VH^ , (H^ X, μ^ ) is
X
mapped to (KHX, Kη), the H-algebra corresponding to the H-algebra (KHX, ωX). This lift is classified by
H^ Kη^X	ω•
λ^X = H^ KX −−−−→ H^ KH^ X −−−X−→ KH^ X
Then λ satisfies (DL C, DL D) because it arises from the formula corresponding to a functorial lift. To complete the proof, we must show that the square (6) commutes. We have
λ^ (σK)= ω• (H^ Kη^) (σK) = ω•(σKH^ ) (HKη^)	(σ natural)
= ω (HKη^)	(by the definition of ω•)
= (Kμ^) (KσH^ ) (λH^ )(HKη^) = (Kμ^)(Kσ) (KHη^) λ	(λ natural)
= (Kμ^) (KH^ η^) (Kσ) λ	(σ natural)
= (Kσ) λ	(H^ -algebra)
2
Lemma 6.3 Let H = (H, η, (·)#) and K = (K, e, (·)##) be pre-monads in V. Given a map σX : HX → KX (not necessarily assumed to be a natural trans- formation) for each X, σ is a pre-monad map if and only if ση = e and for each f : X → HY the following square commutes.
HX	σX) KX
f #	(σY f )##	(6.3)
v	v
	)
HY	σY	KY

Proof. We first show that if σ is a pre-monad map then (6.3) holds. f #
μY
HHY −−→ HY .
σY f # = σY μY (Hf ) = μX(KσX)(σHY )(Hf )
= μY (KσY )(Kf ) σX	(σ is natural)
= (σY f )## σX
Now the other direction. Let g : X → Y . Then (Kg) σX = (eY g)## σX = (σY ηY g)##σX
= σY (ηY g)#	(by (6.3))
= σY (Hg)
shows that σ is natural. To see that σ is a pre-monad map,
mX (σσ)X = mX (KσX) σHX = (σX idHX)## σHX
= σX (idHX)#	(by (6.3))
= σX μX
Hf
= HX −−→
















2

Proposition 6.4 Let σ : (H, η, (·)#) → (K, e, (·)##) be a pre-monad map, let f : X → KY and let s : KX → HX, t : KY → HY be morphisms such that σX s = idKX , σY t = idKY . Then
f ## = σY (tf )# s
Proof. As σ is a pre-monad map, we have by Lemma 6.3
f ## = (σY tf )## σX s = σY (tf )# s
2
Example 6.5 The calculation of μ for the rectangular band monad (R, μ, η) is not immediately intuitive. We can derive it however applying Proposition 6.4 where R is the monad approximation of L of Example 5.11 so that σX[x1,..., xm]= (x1, xm). Define a splitting s : R → L by s(x, y)= [x, y], so μX = (idRX)# = σ ◦ (sX ◦ id)# ◦ sX = σX ◦ mˆ ◦ L(sX) ◦ sX and thus μ(a, b, c, d)= σX ◦ mˆ ◦ L(sX) ◦ sX(a, b, c, d)= σX ◦ mˆ ◦ L(sX)[(a, b), (c, d)] = σX ◦ mˆ [[a, b], [c, d]] = σX[a, d]= (a, d) as expected.
Example 6.6 The previous example can be generalized to other dimensions. For n ≥ 1, let (Ln, μ, η) denote the monad of lists of length exactly n. For instance when n = 3, η(a) = [a, a, a] while μ([[a, b, c], [d, e, f ], [g, h, i]]) = [a, e, i] defines monad (L3, μ, η). L3 is the monad approximation associated with premonad (L, mˆ , eˆ) de- fined by eˆ(x)= [x, x, x] and mˆ (ll)= [p1(p1 ll), p2(p2 ll), p3(p3 ll)] where pi picks out the i − th element in a list(or the last element if the list is too small). Ln, which is equivalent to the cartesian product of the identity monad (n-times), (id)n, is the monad approximation of a premonad structure on lists L, similar to the previous example.
When V = Set, the image of σ : H → H^ is a submonad with the universal
property. Thus all monad approximations are pointwise split epic in Set.

Theorem 6.7 If σ : H → H^ is a pointwise split epic monad approximation then if
λ : HK → KH is a distributive law then so too is λ^ : H^ K → KH^ .
Proof. For (DL A),
λ^(H^ ρ)σ = λ^(σKHρ)	(σ natural)
= (Kσ)λ(Hρ)	by (6)
= (Kσ)ρH	(λ a distributive law)
= ρH^ σ	(ρ natural)
so (DL A) holds as σ is pointwise epic. Similarly, for (DL B),
λ^(H^ ν)σKK = λ^(σKHν)	(σ natural)
= (Kσ)λ(Hν)	by (6)
= (Kσ)(νH)(Kλ)(λK)	(DL B for λ)
= (νH^ )(KKσ)(Kλ)(λK)	(ν natural)
= (νH^ )(Kλ^)(KσK)λK	by (6)
= (νH^ )(Kλ^)λ^K σKK	by (6)
Since σ is a retraction, it is surjective, so (DLA) and (DL B) hold for λ^.	2

References
H. Appelgate, Acyclic Models and Resolvent Functors, Dissertation, Mathematics Department, Columbia University, 1963.
M. Barr, Coequalizers and free triples, Mathematische Zeitschrifte 116, 1970, 307–322.
J. Beck, Distributive laws, Lecture Notes in Mathematics 80, Springer-Verlag, 1969, 119–140.
R. S. Bird and O. de Moor, The Algebra of Programming, Prentice-Hall, 1996.
N. Hindman and D.Strauss, Algebra in the Stone-Cech Compactification: Theory and Applications, De Gruyter, 1998.
J. M. Howie, An Introduction to Semigroup Theory, Academic Press, 1971.
P. T. Johnstone, Adjoint lifting theorems for categories and algebras, Bulletin of the London Mathematical Society 7, 1975, 294–297.
V. Kurkova-Pohlov´a and V. Koubek, When a generalized algebraic category is monadic,
Commentationes Mathematicae Universitatis Carolinae 15, 1974, 577–587.
E. G. Manes, Monads of sets, in M. Hazewinkel (ed.), Handbook of Algebra, Vol. 3, Elsevier Science B.V., 2003, 67–153.
E. G. Manes and P. Mulry, Monad compositions I: general constructions and recursive distributive laws, Theory and Applications of Categories 18, 2007, 172–208.
E. G. Manes and P. Mulry, Monad compositions II: Kleisli strength, Mathematical Structures in Computer Science18, 2008, 613–643.
P. Mulry, Notions of Monad Strength, Semantics, Abstract Interpretation, and Reasoning about Programs, Electronic Proceedings in Theoretical Computer Science, vol 129 2013, 67-83.
