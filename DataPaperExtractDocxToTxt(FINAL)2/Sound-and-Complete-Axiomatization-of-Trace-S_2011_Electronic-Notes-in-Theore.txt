Available online at www.sciencedirect.com



Electronic Notes in Theoretical Computer Science 276 (2011) 291–311
www.elsevier.com/locate/entcs

Sound and Complete Axiomatization of Trace Semantics for Probabilistic Systems
Alexandra Silva1,2
Centrum Wiskunde & Informatica, The Netherlands
Ana Sokolova3,4
Department of Computer Sciences, University of Salzburg, Austria

Abstract
We present a sound and complete axiomatization of finite complete trace semantics for generative proba- bilistic transition systems. Our approach is coalgebraic, which opens the door to axiomatize other types of systems. In order to prove soundness and completeness, we employ determinization and show that coalgebraic traces can be recovered via determinization, a result interesting in itself. The approach is also applicable to labelled transition systems, for which we can recover the known axiomatization of trace semantics (work of Rabinovich).
Keywords: probabilistic systems, trace semantics, axiomatization, coalgebra


Introduction
Quite some amount of work in formal methods, in particular on process algebra and process calculi, concentrates on representing processes by expressions (terms in some process algebraic language) and providing axiomatizations of behavior semantics, in most cases branching-time semantics.
Coalgebras arose as a mathematical model of state-based systems in the last couple of decades. The strength of coalgebraic modeling lies in the fact that many important notions are parametrized by the type of the system, formally given by a functor. On the one hand, the coalgebraic framework is unifying, allowing for a uniform study of different systems and making precise the connection between

1 Email: ams@cwi.nl
2 Visiting researcher at Cornell University
3 Email: anas@cs.uni-salzburg.at
4 Research supported by the Austrian Science Fund (FWF) grant V00125

1571-0661 © 2011 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2011.09.027

them. On the other hand, it can serve as a guideline for the development of basic notions for new models of computation.
In [17], Bonchi, Bonsangue, Rutten and the first author made use of the coalge- braic view on systems to devise a framework where languages of specification and axiomatizations can be uniformly derived for a large class of systems, including quantitative systems, such as weighted and probabilistic automata. The axiomati- zations considered were proved, in a uniform way, to be sound and complete with respect to bisimilarity.
Bisimilarity may sometimes be considered a too strong equivalence between states of a system [13]. For applications where the branching in the system is irrelevant, linear-time semantics like trace semantics might be more appropriate. Consider for example the following two probabilistic transition systems


a, 1
b, 1
a, 1
b, 1

 	2 /  / 3 /  /1 / /	 	3 /  / 2 /  /1 / /


where the labels a and b are action labels, and the labels 1 , 1
are quantities that

2  3
represent probabilistic branching (the probability of getting from one state to an-
other with a given label). These two systems are not bisimilar, but they are trace equivalent since for (finite) trace equivalence only the total probability to reach termination with a word of labels matters (for both systems this probability is 1 by
the unique possible word ab).
In [7], Hasuo, Jacobs and the second author provided a notion of (finite) trace semantics for a large class of coalgebras and showed that their abstract notion coin- cides with existing notions in the literature, such as the ones for labeled transition systems or (generative) probabilistic automata. The theory works for TF -coalgebras in Sets with T a suitable monad modeling branching and F a suitable functor mod- eling linear behavior (involving the existence of a distributive law λ:FT  TF that distributes branching over linear behavior). Coalgebraic trace semantics shows that linear-time semantics fits into the paradigm of final coalgebra semantics (in the Kleisli category of the monad T ), and can thus benefit from the associated machin- ery, for instance in showing compositionality/congruence of bisimilarity and trace equivalence for various coalgebras [7]. This paper shows another benefit of the generic trace theory, allowing for new sound and complete axiomatizations of trace semantics for probabilistic transition systems in a coalgebraic view.
The paper combines the work on generic axiomatizations [17] bringing pro- cess algebra to coalgebra and coalgebraic trace semantics [7] and provides a sound and complete axiomatization of trace semantics for probabilistic transition systems. Probabilistic transition systems, in this paper, are coalgebras of type Dω1Aid, where Dω is the subdistribution monad. The work presented here can be seen as a step towards the goal to derive a framework where axiomatizations for trace seman- tics can be uniformly derived for a larger class of systems. However, it is difficult to describe a class of monads for which the conditions of the generic trace theory are met. The generic trace theory works for the powerset monad which allows us to use the same approach and provide sound and complete axiomatization of (finite)

trace semantics for labeled transition systems (LTS), in which case we can recover the results of Rabinovich.
We build on the framework of [17] in the sense that we keep the same specification language but add one new axiom. This is natural and also in accordance to the strategy used by Rabinovich, who presented a sound and complete axiomatization of trace semantics for LTS [14] by adding one axiom to the sound and complete axiomatization of bisimilarity proposed by Milner for the same language [11]. In our case, the additional axiom also suffices. It should be noted however that the step from qualitative, that is LTS, to general quantitative systems is not at all trivial. The main difficulty is caused by the following: while every finite LTS can be changed to a finite trace-equivalent LTS that is deterministic (in any state there is at most one a-labelled transition), this is not the case for probabilities/general weights. For a finite system (hence corresponding to an expression), there may be no finite deterministic system that is trace equivalent to it. Hence, the difficulty is in finding a “normal form” expression for all expressions that represent trace equivalent systems, since expressions correspond to finite systems only. Coalgebraic proofs of soundness and completeness [8,4,17] involve a finality argument that avoids reasoning about normal forms. This is our way out as well: We use the (infinite) determinization of a probabilistic transition system but avoid reasoning about normal forms by using a (more involved) finality argument.
Organization of the paper Section 2 and Section 3 are the introductory part of the paper introducing basics of coalgebras and coalgebraic trace semantics, and probabilistic transition systems and their trace semantics in concrete terms, respec- tively. In Section 4 we present the syntax of expressions for quantitative transition systems, followed by the axiomatization in Section 5 where the main results (sound- ness and completeness) are presented and proven. We wrap-up with concluding remarks in Section 6. The proofs are available in [18].
Preliminaries
In this section, we introduce the basic definitions on coalgebras and (coalgebraic) trace semantics.
Coalgebras and algebras. Let F be an endofunctor on Sets, the category of sets and functions. An F -coalgebra is a pair X, α : X  F X where X is the carrier set, the set of states, and α is the coalgebra transition map. An F -algebra is a pair
X, a : F X  X. For brevity, we often identify a (co)algebra with its (co)algebra map. Given two F -coalgebras α : X  F X and β : Y  F Y , a coalgebra homomorphism from α to β is a map h : X  Y such that β  h  F h  α. Given two F -algebras a : F X  X and b : F Y   Y , an algebra homomorphism from a to b is a map h : X  Y such that b  F h  h  a. F -(co)algebras together with their (co)algebra homomorphisms form a category.
A final F -(co)algebra is a final object in the category of F -(co)algebras: From any F -(co)algebra α there is a unique homomorphism behα to the final one. If a final coalgebra exists, it induces a final coalgebra semantics which identifies two states if and only if they are mapped to the same element of the final coalgebra

via the unique homomorphism. In Sets, for weak pullback preserving functors, the final coalgebra semantics coincides with bisimilarity, i.e., for states x and y in a coalgebra α : X  F X, x  y  behαx  behαy.
Trace semantics. In this paper we are further interested in (finite) trace semantics, which also happens to be a final coalgebra semantics, only in a different category. Coalgebraic (finite) trace semantics has been developed for coalgebras of the form X  TF X where T is a suitable monad and F a suitable functor, see [7]. Essential for coalgebraic trace semantics is the Kleisli category of a monad. A monad T, η, μ, which we will frequently denote by T , on Sets consists of an endofunctor T on Sets and two natural transformations, the unit η : id  T and the multiplication μ : TT  T , that is, functions ηX :X  T X and μX : TT X  T X for each set X satisfying a naturality condition. The unit and multiplication satisfy the compatibility conditions μX  ηTX  μX  TηX  id  and μX  T μX  μX  μTX .
The monad structures provide a perfect way of modelling “branching”. Intu- itively, the unit η embeds a non-branching behavior as a trivial branching (with a single branch) whereas the multiplication μ “flattens” two successive branchings into one branching, abstracting away internal branchings.
An example of a monad is the powerset monad P with unit given by single- ton, and multiplication given by union. Here, the “flattening”-of-a-“branching” metaphore is obvious, as pictured below.


  	/x/
z_
u	 y 
z  _	/z/


˛x zz 

A monad T on Sets allows for a definition of a Kleisli category KlT  whose
objects are sets, and a morphism f : X  /Y /is a function f : X  TY . The identity morphism on X is ηX , and composition of morphisms is defined as

f  g  μ  Tf  g  X   g /T Y/ Tf /T T/Z  μ	/T Z/ .

There is a canonical lifting functor J : Sets  KlT  which is the identity on objects, and maps a function f : X  Y to the function Jf   η  f : X  TY .
The coalgebraic trace result of [7] applies to TF -coalgebras in Sets if T and F
satisfy a number requirements:
 There exists a distributive law λ : FT  TF . As a consequence, F lifts to a functor F on KlT , with F X  F X and for a Kleisli arrow f : X  /Y /, i.e., a map f : X  TY , F f   λ  F f . Hence TF -coalgebras in Sets are F -coalgebras in KlT .
 The Kleisli category KlT  is suitably order-enriched, with order  on Kleisli homsets, bottom element  and suprema of directed subsets.
  The lifting F : KlT   KlT  is locally monotone.

The requirements are explained in detail in [7]. The main result of the generic trace theory [7] is:
If T and F satisfy the requirements of the generic trace theory and there exists

an initial F -algebra ι : F I 
I in Sets, then the lifted coalgebra Jι1  η 

ι1 : I  TF I is final F -coalgebra in KlT .
This enables defining trace semantics for TF -coalgebras in Sets as the final coalge- bra semantics for F -coalgebras in KlT . More precisely, for a coalgebra α : X  TFX in Sets, i.e., α : X /F/Y in KlT , we denote by trα the final coalgebra map in KlT , called the trace map. The trace of a state x  X is given by the image trαx. Trace equivalence is defined by x tr y  trαx  trαy.
The requirements of the generic trace theory hold for the powerset monad P, the subdistribution monad D, and the lift monad 1  id, together with the inductively defined class of all “shapely functors” [7].
Slightly abusing the notation, whenever there is no risk of confusion, we will denote the lifted functor F by F as well.

Probabilistic transition systems and their traces
In this paper, we consider finitely branching generative probabilistic transition sys- tems [19] with explicit termination. They are TF coalgebras of the finitely sup- ported subdistribution monad Dω and the linear-behavior functor F  1  A  id where A is a set of labels and 1   is a singleton set, used to model termination. The monad Dω assigns to a set X the set


DωX  ϕ  0, 1X  ϕ has finite support and	 
xsuppϕ
ϕx  1


and to a function f : X  Y , the function Dωf  : DωX  DωY :


Dωf ϕ  λy.	 
xf 1y
ϕx.


The unit of Dω is given by ηX x  x  1 and the multiplication by


μΦx 	 
ϕDω X
Φϕ ϕx,	Φ  DωDωX


Hence, our probabilistic transition systems are Dω1Aid-coalgebras on Sets. The monad Dω provides probabilistic branching. The finite support requirement ensures finite branching and is necessary for representing probabilistic transition systems by finite expressions. The functor 1  A  id provides linear behavior, in which a state can either successfully terminate or make a labelled transition to another state.

Given a probabilistic transition system α : X  Dω1  A  X we write
p
x  	if	αx  p,
i.e., x successfully terminates with probability p, and
a,p
x  y	if	αxa, y  p,
i.e., if x can make an a-labelled step to y with weight p. Here, and throughout the paper, without any risk of confusion, we are omitting the coproduct injections when representing elements of 1  A  X.
The monad Dω is not suitable for describing traces. The reason (intuitively) is that a trace of a state is a distribution over words. Even if the system is defined with finitely-supported distributions only, the trace will in general not have finite support. For example, consider the finite probabilistic transition system


a, 1


/ ./

The trace of state x is the distribution that assigns probability  1  to the word an for all n  N and hence has infinite support. In terms of the generic trace theory requirements, Dω fails to satisfy the requirement of existence of suprema of directed subsets.
However, the requirements of the general trace theory do hold for the monad D which is defined as Dω by dropping the finite support condition. We will apply the generic trace results by using the natural injection i : DωX  DX. The conditions for applicability of the generic trace results hold for the functor F  1  A  id.
In particular, we need to include explicit termination since the initial algebra of the functor A  id is trivial. As a result, we can only deal with (finite) terminating traces. In case of LTS, this is no restriction: one can add the possibility to explicitly terminate to each state of an LTS, and so the finite terminating traces of this transformed LTS are all finite traces of the original one. With probabilities, this is not the case: if in a state the probability to terminate is zero and the sum of the probabilities to make a step is one, then there is no place for adding termination. Nevertheless, (finite) terminating traces are of sufficient interest and have been studied under the name completed-trace semantics in process theory.
For completeness, we mention the distributive law λ : 1  A D  D1  A  id that enables the lifting of F to KlD. It is defined by λX   η and λX a, ξ  λa, x.ξx for ξ  DX.
It seems possible, but requires significant additional work, to extend the results presented here to an inductively defined class of so-called shapely functors (cf. [7]). The final 1  A  id-coalgebra in KlD is η  ι : A 	/D/1  A  A  with

ι : A  
1  A  A  being the (inverse of the) initial algebra isomorphism, given by

ιε  	and	ιaw  a, w.

The trace map, for a coalgebra X α
Dω1  A  X, is defined by applying the

generic trace theory to the coalgebra X α
Dω1  A  X i
D1  A  X, as we

depict on the right, and can be instantiated to the concrete definition:


p
trxε	 p,	if x  
	tr	// 

trxaw  


a,p
p  tryw.
i α 
J    //
 η ι
J 

x   y
1  A  X	 
1  A  A

In the diagram above the black dot on the arrows indicates Kleisli arrows and therefore the composition is Kleisli composition.
The coalgebraic trace definition provides a natural (terminating, finite) trace distribution of a state in a probabilistic transition system. We note that this trace distribution is different than the (possibly infinite) trace distribution (without ex- plicit termination) [15] which is a probability measure over a σ-algebra generated by so-called cones. We are not aware of a possibility to deal with such trace semantics coalgebraically.
We note that, as expected, (coalgebraic) bisimilarity implies (coalgebraic) trace equivalence, i.e., x  y  x tr y.

Syntax
In this section, we introduce the syntax of the specification language for which we will present a sound and complete axiomatization of trace semantics. The lan- guage is an instance of the framework introduced in [17], where uniform sound and complete calculi for bisimilarity were introduced. We illustrate the definitions of this section with examples that we shall use in the subsequent sections and which capture key differences between bisimilarity and trace.
Definition 4.1 [Expressions for probabilistic transition systems] Given a set of input actions A and a set of fixed-point variables X, the set Exp of expressions for quantitative transition systems is given by the closed expressions contained in the following BNF, for a  A and x  X:

E ::   pi  Fi  μx.Eg  x	pi  0, 1,  pi  1
i I	i I
Eg::   pi  Fi  μx.Eg	pi  0, 1,  pi  1

i I
Fi ::   a  E
i I


The operator μ in the expression μx.Eg functions as a binder for all the occur- rences of the variable x in Eg. Note that the only difference between Eg and E is the occurrence of variables (Eg is an expression where variables occur guarded, that is only inside an expression of the shape p  a  ). An expression E is closed if all variables x  X occurring in E are bound.

Intuitively, an expression  pi  Fi behaves as the expression Fi with probability
i I
pi, and μ-expressions are used to represent loops: a μ-expression behaves the same
as its unfolding. We make this precise by providing the set of expressions with a coalgebraic structure.
We define c : Exp  Dω1  A  Exp by induction on the number of nested fixed-points as follows:
c  pi  Fi			pi

i I
i : Fi 

c  pi  Fia, E 		pi

i I
i : Fi a E

cμx.Eg	 cEgμx.Egx

Having a coalgebra structure on the set of expressions has two advantages: it provides immediately a natural semantics, using the unique homomorphism into the final coalgebra (which can be thought of as the universe of behaviors), and it enables to define when a state s of a probabilistic transition system and an expression E are bisimilar, s  E, or trace equivalent, s tr E.
Example 4.2 [Some specifications and corresponding systems] To give an intuition for the type of systems each expression specifies, we present below a few examples of expressions and equivalent systems (more precisely, the top state of each system is bisimilar to the expression).


1	
a, 1

a, 1	1

a, 2 J 

 r
b, 1
z z
c, 1
b, 1		c, 1

3 J 
1
J 


J2 
1
  s
1
J 
z z
1

	J 
	J 

1  a  1  b  1  1  a  1  c  1 	1  a  1  b  1  1  c  1   

2	3
2
4	2

a, 1
2	3	4
a, 1	

r
a 1	  s


1
J2 

1
4 J 
2	 ,
1
J2 


1
2 J 

			
1  a  μx. 1  a  x  1  	1  a  μx. 1  a  x  1   
2	2	2	2	2	2
 1  a  μy. 1  a  y  1  	 1  a  μy. 1  a  y  1   
2	3	4	4	3	2
The systems on the right and on the left in each row are trace equivalent. How- ever, they are not bisimilar and, therefore, each pair of expressions in each row would not be provably equivalent using the axiomatization of [17]. We will show

later how to syntactically prove the trace equivalence of the expressions, making use of the axiomatization we will introduce for trace semantics.
Theorem 4.3 (Kleene’s theorem for trace) For every expression E  Exp there exists a (ﬁnite) probabilistic transition system S, α and s  S such that E tr s. Conversely, for every locally ﬁnite probabilistic transition system S, α and s  S there exists an expression E  Exp such that s tr E.
Proof. Direct consequence from the similar theorem for bisimilarity [17, Theorem 4.9] and the fact that bisimilarity implies trace equivalence.	 
In the formulation of Kleene’s theorem we use locally ﬁnite probabilistic systems. These are probabilistic systems in which from each state only finitely many states are reachable (coalgebraically, this means that the subcoalgebra generated by each state is finite).

Sound and complete axiomatization for trace
In this section, we present an equational system to reason about probabilistic ex- pressions. We will prove it sound and complete with respect to trace semantics.
For sake of simplicity, in what follows we first introduce a nulary operation  (denoting the empty  -sum) and two partial operations on expressions: a binary sum E  E , and a unary scalar product pE for a non-negative real number p, and write the axioms with help of these auxiliary operations. They are defined as follows:
The binary sum E E is defined if and only if E   pi  Fi, E   qj  F ,
i I	j J	j
and i I pi  j J qj  1, in which case it equals (as expected) the expression
k I  J rk Fk with rk  pi, Fk  Fi for k  i  I and rk  qj, Fk  Fj for k  j  J.
Clearly, we then have	i I pi  Fi  p1  F1  p2  F2   
Given a non-negative real number p, the scalar product pE is defined by

p  pi  Ei  ppi Ei,	pμx.E  pEμx.Ex.
Note that p   i I pi  Ei is defined if and only if  i ppi  1.
In what follows, we present an axiom system for probabilistic expressions using the binary sum, the zero expression, and the scalar product. An axiom E1  E2 is to be understood as: if both E1 and E2 are well-defined expressions, then they are equivalent with respect to .
Let the relation   Exp  Exp, written infix-style, be the least equivalence relation satisfying the axioms (and implication rules) from Figure 1. From the axioms, only the last is related to traces. The subset of the axioms in Figure 1 excluding the last one is sound and complete w.r.t. bisimilarity, as it was shown in [17].



Fig. 1. Axioms for trace semantics


Example 5.1 We now show some examples of the derivation of trace equivalence of two expressions. The expressions we consider in this example already appeared in Example 4.2 (1) and (2), together with equivalent transition systems. We start by showing that the expressions from Example 4.2 (1) are -equivalent, i.e.,


 1  a  1  b  1    1  a  1  c  1    1  a  1  b  1  1
 c  1   .

2	3	4	2	2	3	4

First, we observe that 1  b  1   1  2  b  1   and 1  c  1   1 1  c  1  . Then,
3	2 3	2	2
we apply D using p  1 , p1  1 and p2  1 :
2	2	4
 1  a  1  b  1    1  a  1  c  1   D 1  a  1  2  b  1   1 1  c  1   
2	3	4	2	2	2 3	4
 1  a  1  b  1  1  c  1   .
2	3	4

A more interesting example is provided by the expressions from Example 4.2 (2). The proof of equivalence of these expressions requires the use of the UFP  rule. We first start by observing that the left side of the sum in each expression is the same. Thus, using Cong , it suffices to prove that
1  a  μy. 1  a  y  1    1  a  μy. 1  a  y  1   


Fig. 2. Soundness and completeness. : existence of out , Δ: out     tr, O: out  is injective.
In what follows let E stand for the expression μy. 1  a  y  1   
3	2
1  a  μy. 1  a  y  1    1  a  μy. 1  a  y  1   
					
2	3	4	4	3	2
 1  a  μy. 1  a  y  1    1  a  1  a  E  1  	(Cong ) and (FP )
2	3	4	4	3	2
 1  a  μy. 1  a  y  1    1  a  1  a  E  1  a  1  D  with p  1 , p1  1 and p2  1
2	3	4	3	4	2	4	4	3	2
 1  a  μy. 1  a  y  1    1  a  1  a  E  1  	D  with p  1 , p1  1 and p2  1
2	3	4	2	6	4	2	3	2
 μy. 1  a  y  1    1  a  E  1 	(Cong )
3	4	6	4
 1  a  1  a  E  1    1   1  a  E  1 	(UFP 
3	6	4	4	6	4
 1  a  1  a  E  1    1  a  E	(Cong )
3	6	4	6
 1  a  1  a  E  1    1  a  E	(D ) twice
6	3	2	6
 E  E	(Cong ) and (FP )

In the next sections, we will show that the axiomatization, obtained from the sound and complete axiomatization for bisimilarity by adding one new axiom, is sound and complete with respect to trace semantics. This is the main technical result of the paper and, despite the simplicity of the axioms, proving that they are enough to achieve completeness is not a trivial task. Before we provide the technical details of the proof, let us present the intuitive idea behind it.
Soundness and completeness: An overview
We want to show that the axiomatization above is sound and complete with respect to trace semantics. That is,
E1 tr E2  E1  E2
Our strategy is to show that the trace map tr is equal to a composition of two maps out  , where out is an injective map, which we will define below, and  is the canonical map mapping each expression to its  - class. Having this, soundness and completeness follow easily, as shown in Figure 2.
We proceed as follows: in Section 5.2 we discuss determinization of probabilistic transition systems, define out and show that out   is a Kleisli homomorphism from Exp,i  c to the final A,η  ι, which by finality yields out    tr and soundness follows; in Section 5.3, we show that out is an injective map, which will have as consequence completeness.

A way out: Determinization of probabilistic transition systems
The determinization of a probabilistic transition system
α : X  Dω1  A  X

is a “deterministic” system of type G  0, 1  idA and state space DωX. The idea is that in the determinization, states are uncertain, i.e., we only know that with a given probability the system is in one of the original states.
We start by an example of such determinization: the automaton on the right is part of the determinization of the one on the left. In general, the determiniza- tion yields an infinite automaton. In this example, we show the accessible part when starting from the state ηx1, the Dirac distribution of x1, and we denote the distributions by formal sums.




x
x1
x1
Ja 
1 x  1 x

2
b, 1

c, 1
2 2	4 3

J	J	1
4	5	6 4
1	1	1
z1 
8 x5
1
8

J 
J 
J 
J 

The actual definition of the determinization is as follows. Given a probabilis- tic transition system α : X  Dω1  A  X its determinization is the system α : DωX  0, 1 DωXA defined by

αξ  ⟨  ξx αx, λa.λx.   ξx αxa, x⟩

xX
for a distribution ξ  DωX.
xX

A state y in a coalgebra β : Y  0, 1 Y A of type G, with βy  ⟨p, f⟩, either terminates with probability p or given a label a it transits to a unique next state f a. Moreover, for any such deterministic coalgebra β : Y  0, 1  Y A of type G, there is a canonical map out : Y  0, 1A  given by
outβyε  p,	outβyaw  outβf aw.
In the example above, outηx1ab  1 and out 1 x2  1 x3c  1 .
6	2	4	8
The map outβ is actually the unique homomorphism from β into the final G-
coalgebra. The final G-coalgebra is 0, 1A , ⟨ε?,  ⟩ where for a map ξ : A 
0, 1, we have ε?ξ  ξε and ξa  λa.λw.ξaw. Hence, the following diagram commutes.
Y 	outβ	/0/, 1A 

β
J	idoutA
⟨ε?, ⟩
J 

0, 1 Y A 	β	/0/, 1 0, 1A  A

The concrete definition of a determinization can be structured in the following way. We observe that there is an injective natural transformation δ : Dω1  A  X  0, 1 DωXA, given by δξ  ⟨ξ, λa.λx.ξa, x⟩. The determinization map satisfies α  δ  μ  Dωα and makes the following diagram commute
X 	ηX	/D/X
α
J 
Dω1  A  X α
δ J ,7
0, 1 DωXA.
To summarize, the situation is shown in the following diagram:
X 	ηX	/D/X 	out	/0/, 1A 
α
J 

Dω1  A  X α
δ J ,7
⟨ε?,a⟩

J 

0, 1 Dω
XA	idoutA	/0/, 1 0, 1A  A


More generally, this fits into the generalized powerset construction [16]. The generalized powerset construction can be applied to a coalgebra of type HT , for T a monad and H a functor with a T -algebra lifting (HT X has a T -algebra structure h), or equivalently, for H such that there is a distributive law π : TH  HT . Given a coalgebra γ : X  HTX, where H and T satisfy the above conditions, the coalgebra γ : TX  HTX obtained by applying the generalized powerset construction to γ is defined as γ  h  Tγ  Hμ  π  Tγ. It can be thought of as a determinization of γ in the sense that any side effects modeled by the monad T will now be buried in the state space of the new coalgebra. Taking T to be the powerset monad and H  2  A, the functor defining the type of deterministic automata, one obtains the usual powerset construction, which allows to define a deterministic automaton language-equivalent to a given non-deterministic automaton. The construction is applicable to T  Dω and H  G, since GDωX has a Dω-algebra structure, leading δ  α  α.
Remark 5.2 There seems to be a relationship between the functor G and the functor F , that may shed light on how to extend the current work to other functors in place of F , e.g. shapely functors. Given a functor H that is inductively built from the identity functor, constant functors, finite products and coproducts (or even if infinite coproducts in which case H can be any shapely functor), we can define a corresponding functor GH as follows: Gid  id, GA  DωA, GH1H2 
H1
GH1  GH2  and GH1H2   GH 	. Note that in our particular example F 
1  A   and GF  G  0, 1  A, where 0, 1  Dω1. Such a functor
GH may be useful to determinize DωH-coalgebras, and a corresponding natural transformation δH : DωH  GH Dω could also be inductively defined. The details

of this generalization remain future work. In addition, the definition of expressions should change accordingly (the F-type expressions) and the trace semantics needs to be instantiated to such functors H in order to gain understanding of the situation.
We now need to formally connect the semantics given by out and the trace semantics given by tr. The first observation is the following.

Lemma 5.3 Starting from a coalgebra X α
Dω1  A  X, the image of the map

out, as depicted in the commuting diagram below, is in DA.


X 	ηX	/D/X 	out	/D/A
//	/0/, 1A 

α
J 
Dω1  A  X α
δ J ,7
Dι
J 
D1  A  A
δ J 


⟨ε?,a⟩

J 

0, 1 Dω
XA	idoutA	/0/, 1 DAA  // /0/, 1 0, 1A  A

Remark 5.4 A consequence of our further results, which we can also show inde- pendently, is that out  η  tr, which is also expected from the definition of out and the determinization. This is in itself a very interesting result since it shows that coalgebraic traces can be recovered via determinization. However, for the ax- iomatization we need another map out and its connection to coalgebraic traces.
Our goal in the remainder of this section is to define out and show that out 
 is a Kleisli homomorphism from Exp,i  c to the final F -coalgebra in KlD,
A,η  ι.
Let us start with summarizing in a diagram some of the maps we are dealing with:



Exp
c
J 
D 1 





c0
  Dω 1A /D/1  AJ	 

/zEx/ p

ω	A  Exp	ω	 Exp 

Here,  denotes the surjective equivalence map which quotients only using the axioms for bisimilarity (all axioms except D), and  quotients with the axiom
D. The commutativity of the square above was proved in [17], and had as con- sequence the soundness of the axioms w.r.t. bisimilarity. We know, however, that we cannot fill the diagram on the right side in the same way, that is, Exp will never have a coalgebra structure making  a coalgebra homomorphism. Hence, we will take a different approach, inspired by [12,3].
From now on positive convex structures [5,6] play an important role in our work. They are the Eilenberg-Moore algebras of the monad Dω [6]. In concrete terms, a positive convex structure is an algebra with a finite convex sum operation   pixi
iI

for pi  0, 1 and	pi  1, satisfying the axioms:
iI


i	pi,kxi  xk	if pi,k  1 for i  k and pi,k  0 otherwise
iI
ii pi  qi,jxj    iI piqi,j xj.
		

Given a positive convex structure  on a set X, it provides a Dω-algebra

a : DωX  X by aξ 
xsuppξ
carries a positive convex structure.
ξxx.  Our first observation is that Exp


Proposition 5.5 (Exp is a PCA) The set Exp has a positive convex algebra structure, that is, for every E1,  , En  Exp and p1,..., pn  0, 1 satisfy- ing i1 pi  1, the operation given by


 piEi   piEi 

is a positive convex structure.

Next, we observe that Exp also has a positive convex structure.

Proposition 5.6 (Exp is a PCA) The set Exp has a positive convex algebra structure, that is, for every E1,  , En  Exp and p1,..., pn  0, 1 satisfying
 i1 pi  1, the operation given by


 piEi   piEi 

is a positive convex structure. Moreover  is an algebra homomorphism from
Exp to Exp.

Let a denote the algebra map on Exp, a : DωExp  Exp, given by the positive convex structure and a the algebra map on Exp, a : DωExp  Exp, making  an algebra homomorphism.
We can then expand the above diagram in the following way, where the coalgebra

structure d exists because of Lemma 5.7 below:

Exp  	 	/Ex/p    	 	z/Ex /p

c
J 
D 1 

  Dω 1A /
c0
/1  AJ	 

ω	A  Exp
Dω	 Exp 
δ J	d

0, 1 DωExpA
idaA
  J 
A


id A	//	J  A

0, 1 Exp
Lemma 5.7 Let E1, E2  Exp such that E1  E2. Then
0, 1 Exp

G  Ga  δ  c0E1  G  Ga  δ  c0  E2.
In concrete terms, the coalgebra Exp, d behaves as follows. Let E be an expression. We first notice that there exists an unfolded expression p  i pi ai Ei such that E  p   i pi  ai  Ei. Then we have


dE  ⟨p, f⟩	where	f :A  Exp, f a  
i:aia
piEi.	(1)

Let out be the unique homomorphism from Exp, d to the final G-coalgebra.
This is the map we are after, in order to show soundness and completeness.
There are many generic properties of determinizations that are out of the scope of this paper and we leave their elaboration for future work. We only state few here, in order to reveal connections between Exp, d and the determinization of
Exp, c0 and shed some light on the overall situation. First, we note that
c0  a  μ  Dωc0	(2)
which is a consequence of the definitions and the property c i piEi   pi  cEi, that can readily be checked. This means that c0 is an algebra homomorphism from Exp, a to Dω1  A  Exp, μ, the free PCA, and yields that the determinization c0 of Exp, c0 satisfies
c0  δ  c0  a	(3)
implying further that a is a coalgebra homomorphism from the determinization
DωExp, c0 to the G-coalgebra Exp, Ga  δ  c0, i.e.
Ga  c0  Ga  δ  c0  a.	(4)
Let out be the unique homomorphism from the determinization DωExp, c0 to the final G-coalgebra and out the unique homomorphism from Exp, Ga  δ c0  to the final G-coalgebra.

Lemma 5.8 The ﬁnal coalgebra homomorphisms satisfy
out  out  a, out  out  η, out  out  .
Lemma 5.3 stated that the image of out, coming from a determinization, is in DA. Now, using Lemma 5.8 we can show that the image of out is in DA as well.
Lemma 5.9 The unique homomorphism out into the ﬁnal G-coalgebra from the
G-coalgebra Exp, d makes the following diagram commute.


Exp 	out	/D/A
Dι
J 
//	/0/, 1A 



d	D1  A  A 
J	δ J 
⟨ε?,a⟩

J 

0, 1 ExpA 	/0/, 1 DAA  // /0/, 1 0, 1A  A
Having this as a first step, we can relate the semantics induced by out with trace semantics.
Proposition 5.10 The map out   is a Kleisli homomorphism from Exp,i  c to A,η  ι. Therefore, by ﬁnality, out    tr.
This yields the soundness of the axiomatization, see Figure 2, and paves the road to completeness.
Theorem 5.11 (Soundness) For all E1, E2  Exp, E1  E2  E1 tr E2.
Completeness
To prove completeness, as announced in Figure 2, it remains to prove that out is an injective map. Borrowing inspiration from [8], we proceed as follows. We first factorize the map out into a surjective map followed by an injective one:
out  Exp   e /I //m/ /D/ω A
Then we show that a “variant” of Exp, d is final in a certain category of coal- gebras to which the factorization carries over. Finally, we show that a “variant” of I, g, induced by the factorization, is in the same category and is final as well. This proves that e is an isomorphism, and hence out is mono.
The difficulty is that Exp, d is not final in the category of G-coalgebras on Sets, since d is not an isomorphism. Therefore, we move to another category (of coalgebras) which was already implicitly present for a while.
Coalgebras over algebras
As base category, instead of Sets, we take PCA, the category of Eilenberg-Moore algebras of Dω.

Then we consider coalgebras on PCA. For a functor F on PCA, an F -coalgebra is a pair X, a, α where α is an algebra homomorphism from X, a to F X, a, both in PCA. An F -coalgebra homomorphism from X, a, α to Y, b, β is
a map h : X  Y that is both an algebra and a coalgebra homomorphism, i.e.,
b  Dωh  h  a and β  h  F h  α.
The functor G  0, 1  A on Sets lifts to a functor on PCA, denoted also by G, as follows. We have GX, a  GX, aG where aG is defined “pointwise” by
  pi⟨oi, fi⟩  ⟨  pi  oi,f⟩,	with f a   pifia
i	i	i
for ⟨oi, fi⟩  GX. Note that the second  is from the algebra X, a.
Any G-coalgebra X, α on Sets with a PCA structure a such that α is an algebra homomorphism from X, a to GX, a is a G-coalgebra X, a, α on PCA.
Example 5.12 Every determinization is a G-coalgebra on PCA, with carrier the free PCA DωX, μ. Moreover, Exp, a, Ga  δ  c0 and Exp, a, d are G-coalgebras on PCA.
The carrier of the final G-coalgebra on Sets has a PCA structure z, making it final in the category of G-coalgebras on PCA. This is a consequence of a general result, see e.g. [2,8], and the fact that the coalgebra structure on the final is an algebra homomorphism. In concrete terms z is given by


  piξiw   pi  ξiw,	for ξi  0, 1A
, w  A.

i	i
Therefore, for any G-coalgebra X, α on Sets such that X has a PCA structure
a, the final coalgebra map out is also the final coalgebra map from the G-coalgebra
X, a, α on PCA. That is, out is also an algebra homomorphism from X, a to
0, 1A , z, as shown in the diagram below.
D X 	Dωout	/D/0, 1A 
a	z
J	out	J 
X	/0/, 1A
α	⟨ε?,a⟩

J 
0, 1 XA
idoutA
J 
/0/, 1 0, 1A  A

At this point it is important to mention that DA also has a PCA structure, namely μ  i. Moreover, the inclusion DA // /0/, 1A  is an algebra homo- morphism from DA,μ  i to 0, 1A , z. Also DA,μ  i,δ  Dι is a G-coalgebra on PCA. As a result, we get the following lemma which is applicable to any determinization (by Lemma 5.3), as well as to out and out (by Lemma 5.9),
Lemma 5.13 If the image of the ﬁnal coalgebra homomorphism out of a G- coalgebra X, a, α lives in DA, then out is a coalgebra homomorphism from
X, a, α to DA,μ  i,δ  Dι.

Next we factorize. Factorizations in Sets carry over to factorizations of coal- gebras over Eilenberg-Moore algebras, see e.g. [10, Theorem 1.3.7]. We have the following situation.



Exp , a
out 
 	e	/I/, aI 

z 
/D/A

  , μ



d
J 
GExp
g

	/G/

J 	/G/D
δ Dι
J 
	

 , a 
I, aI 
ω A  ,μ 

Still, G-coalgebras on PCA are not sufficient for our goal of showing finality of Exp , a , d since d is still not an isomorphism. For this reason we consider (yet) another functor Gˆ on PCA which is a subfunctor of G. Let X, a be a PCA. The functor Gˆ is defined on object as
GˆX, a  ⟨o, f⟩  0, 1 XA  a  A. pi  0, 1, vi  V .f a   pi vi
a	a	a a
i

and    pi
 1  o 

a  i
and on arrows just like G.

Finality for completeness
We show that Exp , a , d is final in the category of locally-ﬁnite Gˆ-coalgebras, denoted by PCAf Gˆ, that we define next.
A Gˆ-coalgebra X, a, α is locally finite if for every x  X there exists a finitely
generated subalgebra of X, a with states Y and x  Y which is a subcoalgebra of
X, a, α, i.e., Y is closed under the coalgebra structure α. An algebra Y, aY  in PCA is finitely generated if there exists a split epi eB from DωB, μ to Y, aY  for some finite set B.
Proposition 5.14 Exp  , a  , d is ﬁnal in PCAf Gˆ.
The next property follows from [1, Proposition 1.69] and ensures that I, aI , g is also final in PCAf Gˆ.
Lemma 5.15 The category PCAf Gˆ is closed under homomorphic images.
Hence we have reached our goal, stated in the following lemma.
Lemma 5.16 The map out  : Exp   DA   is injective.
This is the last ingredient we needed for completeness.
Theorem 5.17 (Completeness) For all E1, E2  Exp, E1 tr E2  E1  E2.

Conclusions
In this paper, we presented the first sound and complete axiomatization of (finite, terminating) trace semantics for generative probabilistic transition systems (with explicit termination).
Inspired by the work of Rabinovich, who axiomatized trace semantics for LTS, we took as basis a calculus sound and complete w.r.t. bisimilarity and we extended it with an extra axiom. Our approach is coalgebraic. This means that constructions and results are phrased in quite general terms which might be helpful to pinpoint which conditions on the functor type of the system are crucial and which general- izations are possible.
The fact that a sound and complete calculus w.r.t. bisimilarity can be extended to a sound and complete calculus w.r.t. coalgebraic language equivalence has re- cently been studied by Bonsangue, Milius and the first author [3]. The class of systems they consider is however different from the one considered in this paper (formally, they consider coalgebras for FT , with F a functor and T a monad, such that F preserves T -algebras). In the determinization step, we relate to the powerset construction [16] which also served as basis for the proofs in [3]. However, we had to deal with the extra difficulty of showing that the semantics of the determinized automaton is actually a subdistribution over words (that is, an element of DA ) and not just any arbitrary function 0, 1A . This fact is quite instructive and we believe that it will serve as basis to clarify the connection between the coalgebraic trace semantics of [7] and the coalgebraic language equivalence of [3] and describe a framework in which both semantics can be considered.
Acknowledgement
We are indebted to Marcello Bonsangue and Stefan Milius for valuable suggestions and pointers to the literature.

References
Jiˇr´ı Ad´amek and Jiˇr´ı Rosicky. Locally Presentable and Accessible Categories (London Mathematical Society Lecture Note Series 189), Cambridge University Press (1994)
Falk Bartels. On generalized coinduction and probabilistic specification formats. Ph.D. thesis, Vrije Universiteit Amsterdam (2004)
Marcello Bonsangue, Stefan Milius, and Alexandra Silva. Sound and complete axiomatizations of coalgebraic language equivalence. preprint, 2011.
Marcello M. Bonsangue, Jan J. M. M. Rutten, and Alexandra Silva. An algebra for Kripke polynomial coalgebras. In Proc. LICS, pages 49–58. IEEE Computer Society, 2009.
Ernst-Erich Doberkat.	Eilenberg-Moore algebras for stochastic relations.	Inf. Comput., 204(12):1756–1781, 2006.
Ernst-Erich Doberkat. Erratum and addendum: Eilenberg-Moore algebras for stochastic relations.
Inf. Comput., 206(12):1476–1484, 2008.
Ichiro Hasuo, Bart Jacobs, and Ana Sokolova. Generic trace semantics via coinduction. Logical Methods in Computer Science, 3(4), 2007.

Bart Jacobs. A bialgebraic review of deterministic automata, regular expressions and languages. In
K. Futatsugi et al., editors, Essays Dedicated to Joseph A. Goguen, volume 4060 of Lecture Notes in Computer Science, pages 375–404. Springer, 2006.
Peter Johnstone. Adjoint lifting theorems for categories of algebras. Bull. London Math. Soc. 7, 294–297 (1975)
Alexander Kurz. Logics for coalgebras and applications to computer science. Ph.D. thesis, Ludwig- Maximilian-Universit¨at Mu¨nchen (2000)
Robin Milner. A complete inference system for a class of regular behaviours. J. Comput. Syst. Sci., 28(3):439–466, 1984.
Stefan Milius. A sound and complete calculus for finite stream afteruits. In Proc. LICS, pages 421–430. IEEE Computer Society, 2010.
Sumit Nain and Moshe Y. Vardi. Trace semantics is fully abstract. In Proc. LICS, pages 59–68. IEEE Computer Society, 2009.
Alexander Moshe Rabinovich. A complete axiomatisation for trace congruence of finite state behaviors. In S. Brookes et al., editors, Proc. MFPS, volume 802 of Lecture Notes in Computer Science, pages 530–543. Springer, 1993.
Roberto Segala.	A compositional trace-based semantics for probabilistic automata.	In
Proc. CONCUR, volume 9622 of Lecture Notes in Computer Science, pages 234–248. Springer, 1995.
Alexandra Silva, Filippo Bonchi, Marcello Bonsangue, and Jan Rutten. Generalizing the powerset construction, coalgebraically. In K. Lodaya and M. Mahajan, editors, Proc. FSTTCS 2010, volume 8 of LIPIcs, pages 272–283, 2010.
Alexandra Silva, Filippo Bonchi, Marcello M. Bonsangue, and Jan J. M. M. Rutten. Quantitative Kleene coalgebras. Inf. Comput. 209(5): 822–849, 2011.
Alexandra Silva and Ana Sokolova. Sound and complete axiomatization of trace semantics for probabilistic systems. Technical report SEN-1108, CWI, 2011.
Rob J. van Glabbeek, Scott A. Smolka, and Bernhard Steffen. Reactive, generative and stratified models of probabilistic processes. Inf. Comput., 121(1):59–80, 1995.
