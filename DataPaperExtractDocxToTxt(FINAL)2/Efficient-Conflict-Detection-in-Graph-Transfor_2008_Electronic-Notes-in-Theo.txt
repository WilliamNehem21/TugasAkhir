Electronic Notes in Theoretical Computer Science 211 (2008) 17–26	
www.elsevier.com/locate/entcs

Efficient Conflict Detection in Graph Transformation Systems by Essential Critical Pairs
Leen Lambers , Hartmut Ehrig 1,2
Institut fu¨r Softwaretechnik und Theoretische Informatik Technische Universita¨t Berlin
Germany

Fernando Orejas 3
Dept. L.S.I.
Tech. Univ. Catalonia Barcelona, Spain


Abstract
The well-known notion of critical pairs already allows a static conflict detection, which is important for all kinds of applications and already implemented in AGG. Unfortunately the standard construction is not very efficient. This paper introduces the new concept of essential critical pairs allowing a more efficient conflict detection. This is based on a new conflict characterization, which determines for each conflict occuring between the rules of the system the exact conflict reason. This new notion of conflict reason leads us to an optimization of conflict detection. Efficiency is obtained because the set of essential critical pairs is a proper subset of all critical pairs of the system and therefore the set of representative conflicts to be computed statically diminishes. It is shown that for each conflict in the system, there exists an essential critical pair representing it. Moreover each essential critical pair is unique with regard to its conflict reason and thus represents each conflict not only in a minimal, but also in a unique way. Main new results presented in this paper are a characterization of conflicts, completeness and uniqueness of essential critical pairs and a local confluence lemma based on essential critical pairs. The theory of essential critical pairs is the basis to develop and implement a more efficient conflict detection algorithm in the near future.
Keywords: conflict, confluence, critical pair, graph transformation



1 Email: leen@cs.tu-berlin.de
2 Email: ehrig@cs.tu-berlin.de
3 Email: orejas@lsi.upc.edu

1571-0661 © 2008 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2008.04.026

Introduction
Static conflict detection is a well-known important task for all kinds of rewriting systems especially also for graph transformation systems. To enable a static conflict detection the notion of critical pairs was developed at first for hypergraph rewriting
[12] and then for all kinds of transformation systems fitting into the framework of adhesive high-level replacement categories [6]. Usually a straightforward way (i.e. directly according to the definition) is used to compute the set of all critical pairs of a graph transformation system. This is very important for all kinds of applications like for example graph parsing [2], conflict detection in graph transformation based modeling [8] [1] and model transformation [3] [4], refactoring [11], etc. Up to now, however, there is almost no theory which allows an efficient implementation of conflict detection. Therefore our paper [9] and this paper concentrate on exactly this subject.
In [9] it was already explained which optimizations lead to a more efficient conflict detection in a graph transformation system. Unfortunately this efficiency could only be obtained for conflicts induced by a pair of rules with one of the rules non-deleting. This is quite a strong restriction, since in particular a lot of conflicts are induced by a pair of deleting rules. Therefore this paper formulates a characterization of conflicts, covering also these kind of conflicts. Moreover this conflict characterization leads us to the identification of the conflict reason of each conflict.
The notion of critical pair introduced in [12], [6] expresses each conflict in its minimal context. In some cases though two different critical pairs express the same kind of conflict. Therefore exploiting the uniqueness of each conflict reason men- tioned above, it is possible to further reduce the set of critical pairs to a subset of essential critical pairs. This subset expresses each kind of conflict which can occur in a graph transformation system in a minimal context and moreover in a unique way. This uniqueness property and the constructive conflict reason definition facilitates the optimization of detecting all conflicts of a graph transformation system.
The following sections explain how to characterize conflicts and what the con- flict reason is, how we come to the definition of essential critical pairs and which properties they fullfill. Main new results presented in this paper are a character- ization of conflicts, completeness and uniqueness of essential critical pairs and a local confluence lemma based on essential critical pairs. More details concerning well-known definitions and new proofs are given in the long version of this paper
[10] to show the mature status of the theory. The theory of essential critical pairs is the basis to develop and implement a more efficient conflict detection algorithm in the near future.

Conflict Characterization and Conflict Reason
In this section we formulate a theory which leads us to the identification of the conflict reason for each occuring conflict in a graph transformation system where




Fig. 1. asymmetrical delete-use-conflict
we only consider injective matches. This new notion of conflict reason will help us consequently in the next sections to detect in a static way all representative conflicts of a graph transformation system. At first, we look at an example of two

direct transformations H1
p1,m1
G
p2,m2
H2
in conflict in Fig. 1, generated by two

deleting rules p1 : L1 ← K1 → R1 and p2 : L2 ← K2 → R2.  Looking at both
direct transformations we can describe the reason for the conflict between them as follows. The left transformation deletes edge (1, 4 − 2, 5) and that is why rule p2 can not be applied anymore to the same location on graph H1. The structure
(S1, o1, q12), constructed as pullback of (m1 ◦ g1, m2), captures exactly the conflict
reason for this conflict, because it holds the edge (1, 4−2, 5) to be deleted by the left transformation, but used by the other one. The following definitions and theorem explain how to formalize this new notion of conflict reason. Please note, that for all

subsequent definitions and theorems the following pair of rules pi
: Li
←li
K →ri  R

with boundary Bi and context Ci, defining an inital pushout (1) over li (see [6]) and injective graph morphisms bi, ci, gi, li are given, i.e. bi, ci, gi, li in M (i = 1, 2), where M is the set of all injective graph morphisms.
Bi	ci  Ci 
bi	(1) gi
J	J 

Ki	li
 Li 

Definition 2.1 [conflict condition] Given a pair of direct transformations H1
p1,m1

p2,m2
G	H2
(S1, o1 : S1 → C1, q12 : S1 → L2) the pullback of (m1 ◦g1, m2) satisfies the conflict condition if: / ∃s1 : S1 → B1 ∈ M such that c1 ◦ s1 = o1

B1	c1 C1 ¸,  S1
¸¸¸

b1	g1
J	J 
¸¸¸
12	¸z 

R1 ¸r,1
K1   l1  L1 
¸¸¸¸
(1)
L2 ¸l,2
   
K2   r2  R 2

(41)
(31)
m1 ¸¸¸¸
  m2
(32)
(42)

J	J 
z ,s
J	J 

H1 ¸,  D1 	 G ¸,	 D2 	 H 2
e1	d1	d2	e2
(S2, q21 : S2 → L1, o2 : S2 → C2) the pullback of (m1, m2 ◦g2) satisfies the conflict condition if: / ∃s2 : S2 → B2 ∈ M such that c2 ◦ s2 = o2

S2	o
 C2 ¸,  B2

q21 
 
 ,s
2	c2
g2	b2
J	J 

R1 ¸r,1
K1   l1  L1 
¸¸¸¸
(1)
L2 ¸l,2
   
K2   r2  R 2

(41)
(31)
m1 ¸¸¸¸
  m2
(32)
(42)

J	J 
z ,s
J	J 

H1 ¸,  D1 	 G ¸,	 D2 	 H 2
e1	d1	d2	e2
In the example in Fig. 1 (S1, o1 : S1 → C1, q12 : S1 → L2) satisfies, but (S2, q21 : S2 → L1, o2 : S2 → C2) doesn’t satisfy the conflict condition. The idea behind this conflict condition is that a conflict occurs if graph parts which are deleted are overlapped with parts to be used by the other transformation. This idea is expressed formally by a new characterization of conflicts in the next theorem.
Theorem 2.2 (Characterization Conflict) Given a pair of direct transformations

p1,m1
H1	G
⇒	H2 with (S1, o1 : S1 → C1, q12 : S1 → L2) the pullback of

(m1 ◦ g1, m2) and (S2, q21 : S2 → L1, o2 : S2 → C2) the pullback of (m2, m1 ◦ g1)
then the following equivalence holds:


p1,m1
H1	G
⇒  H2 are in conflict
⇔

(S1, o1, q12) ∨ (S2, q21, o2) satisﬁes the conflict condition
Theorem 2.2 (proof see [10]) teaches us, that a pair of direct transformations

p1,m1
H1	G
⇒  H2 is in conflict, because one of the following three reasons:

(S1, o1, q12) satisfies and (S2, q21, o2) doesn’t satisfy the conflict condition (asymmetrical delete-use-conflict)
(S1, o1, q12) doesn’t satisfy and (S2, q21, o2) satisfies the conflict condition (asymmetrical use-delete-conflict)
both (S1, o1, q12) and (S2, q21, o2) satisfy the conflict condition (symmetrical conflict)




Fig. 2. symmetrical conflict

In the case of asymmetrical conflicts rule p1 (resp. p2) deletes something, what is used by rule p2 (resp. p1), but not the other way round. Let us consider in more detail the case of symmetrical conflicts. In Fig. 2 you can see an example of two direct transformations, having a symmetrical conflict. Then (S1, o1, q12) expresses the part which is deleted by p1 and used by rule p2 and (S2, p1, o2) expresses the part which is deleted by p2 and used by rule p1. In order to summarize both parts into one graph expressing exactly the graph parts of L1 and L2 responsible for the conflict, we make the construction depicted in Fig. 3. In this construction (S', a1, a2) is the pullback of (m1 ◦ g1 ◦ o1 : S1 → G1, m2 ◦ g2 ◦ o2 : S2 → G2) and (S, s' , s' ) is the pushout of (S', a1, a2). This is, we determine the part S', which
1	2
is deleted by both rules and glue S1 and S2 together over this part leading to S.
Note, that in the example in Fig. 2 S' would be the empty graph. Now we have g1 ◦ o1 ◦ a1 = q21 ◦ a2 and similar g1 ◦ o2 ◦ a2 = q12 ◦ a1 because m1 is mono and m1 ◦g1 ◦o1 ◦a1 = m2 ◦g2 ◦o2 ◦a2 = m1 ◦q21 ◦a2. Together with the pushout property of S this implies, that there exists a unique s1 : S → L1 (resp. s2 : S → L2) s.t.

g1 ◦o1 = s1 ◦s'
and q21 = s1 ◦s'
(resp. g2 ◦o2 = s2 ◦s'
and q12 = s2 ◦s' ). Moreover

using PO-property of S we can conclude m1 ◦ s1 = m2 ◦ s2. Please note, that in Fig. 3 we left out q21 and q12. Thus in the end (S, s1, s2) summarizes which parts of L1 and L2 are responsible for the symmetrical conflict. Remark: S = S1 = S2 if and only if all elements deleted by p1 are also deleted by p2 and the other way round (pure delete-delete-conflict). S' = ∅ if and only if all elements deleted by p1 are not deleted, but used by p2 and the other way round (pure delete-use-conflict


    
  a1
S1 ¸¸
¸¸
S' ¸¸
¸¸¸¸
a2 ¸¸z 
S2
    

o1	s' ¸¸¸	  s'	o2
J 1	z ,s2	J c2

B1	c1  C1 
 S ¸¸
C2 ¸, B2

g	¸¸¸ g

b1
J l
1	 s
J, s
s  ¸¸ 2	b2
zJ  l	J 

K1	1  L1 
¸¸¸
L2 ¸,2	K2
   

(31)
m1 ¸¸¸¸
  m2
(32)

J 
D1	d1
z ,s	J 
 G ¸,	D2
2

Fig. 3. construction of the conflict reason for symmetrical conflicts
as in the example in Fig. 3).
We can resume these observations into the following definition.
Definition 2.3 [conflict reason span] Given a pair of direct transformations

p1,m1
H1	G
⇒	H2 in conflict, the conflict reason span of H1
p1,m1
G
p2,m2
H2

is one of the following spans using the notation of Def.2.1:
(S1, g1 ◦o1, q12) if (S1, o1, q12) satisfies and (S2, q21, o2) doesn’t satisfy the conflict condition
(S2, q21, g2 ◦o2) if (S1, o1, q12) doesn’t satisfy and (S2, q21, o2) satisfies the conflict condition
(S, s1, s2) if (S1, o1, q12) and (S2, q21, o2) both satisfy the conflict condition and (S, s1, s2) is constructed as above

Definition of Essential Critical Pairs
By means of the new notion of conflict reason it is possible to define the new notion of essential critical pairs. The idea behind this notion is that for each conflict reason we have an essential critical pair, expressing the conflict caused by exactly this conflict reason in a minimal context.

Definition 3.1 [essential critical pair] A pair of direct transformations P1
p2,m2
p1,m1

K  ⇒  P2 is an essential critical pair for the pair of rules (p1, p2) if the following

holds: P
p1,m1
p2,m2
are in conflict and (K, m ,m ) is a pushout of the conflict

1 ⇐ K
⇒ P2	1	2

reason span (S ,g ◦ o ,q  ),(S ,q  ,g ◦ o ) or (S, s ,s ) of P
p1,m1
p2,m2

1	1	1  12
2  21	2	2
1	2	1	⇐	K
⇒	P2

according to Definition 2.3.
Fact 3.2 Each essential critical pair P

p1,m1

p2,m2

of (p ,p ) is a critical

pair of (p1, p2).
1	⇐	K
⇒	P2	1	2

Proof. Each essential critical pair is a pair of direct transformations in conflict. The overlappings (m1, m2) of an essential critical pair are jointly surjective, because they





Fig. 4. essential crit. pair P1
p1 ,m1
K

p ,m
⇒ P2 into crit. pair P1
p1 ,m'
⇐  K
p2 ,m'
2

are constructed via a pushout.	 
Remark: The main idea shown in the next section is that it is sufficient to consider essential critical pairs and not every critical pair is an essential critical pair. This

is shown in the example in Fig. 4. The essential critical pair P1
p1,m1
K
p2,m2
P2

of (p1, p2) only overlaps the edge (1 − 2) with (4 − 5), since this is exactly the
reason for the delete-use-conflict. However the matches (m' , m' ) of the critical pair

p1,m'
1	2
p2,m'

'	⇐ 1 K'
⇒ 2 P' (with m' = m1 ◦ m and m' = m2 ◦ m) overlap in addition

node 7 with node 3, which are not responsible for the conflict at all. The pair of rules, used in the example in Fig. 1,2 and 4 induces, according to the critical pair detection in [13] AGG 14 critical pairs, but only 3 of them are essential critical pairs.

Properties of Essential Critical Pairs
In this section we will prove that it is enough to compute all essential critical pairs to detect all conflicts, occuring in a graph transformation system. Therefore we show, that the set of essential critical pairs fullfills the following three properties.

At first, we demonstrate that each conflict, occuring in the system can be expressed by an essential critical pair (completeness). The second property says, that each essential critical pair is unique with regard to its conflict reason span. Finally we will prove a local confluence lemma based on essential critical pairs.
Theorem 4.1 (Completeness and Uniqueness of Essential Critical Pairs) For each crit-

ical pair P'
p1,m'
⇐ K
'
⇒ 2 P' of (p1, p2) there exists a unique essential critical pair

p1,m1
P1	K
⇒	P2 of (p1, p2) with the same conflict reason span and extension

diagrams (1) and (2).

P1 ¸c  K

zP2 

(1) m	(2)
J	J	J 
P' ¸c  K' 	 zP '
1	2
Remark: m : K → K' is an epimorphism, but not necessarily a monomorphism.
The proof of this theorem is given in appendix C in [10].
The set of essential critical pairs is unique in the following sense:
Theorem 4.2 (Uniqueness of Essential Critical Pairs) Each essential critical pair is unique with regard to its conflict reason span.
Proof. This follows directly from Theorem 4.1 and Fact 3.2.	 
Note, that the set of critical pairs doesn’t possess this uniqueness property. The example in Fig.  4 shows two different critical pairs (a normal critical pair

p1,m'
P	⇐  K
'
⇒ 2 P' and an essential critical pair P'
p1,m'
⇐ K
'
⇒ 2 P') possessing

1	2	1	2
the same conflict reason span.
The following theorem states that it is enough to check each essential critical pair for strict confluence as defined in [12][6] to obtain local confluence of a graph transformation system.
Theorem 4.3 (Local Confluence Lemma based on Essential Critical Pairs) If all essen- tial critical pairs of a graph transformation system are strictly confluent, then this graph transformation system is locally confluent.
The proof of this theorem is given in appendix D in [10]. It is similar to the proof of the local confluence lemma in [6], but avoids to assume that m : K → K' is a monomorphism. Note, that the theory of essential critical pairs not only simplifies static conflict detection, but in addition confluence analysis of the conflicts in the system. This is because the number of conflicts to be analyzed for strictly confluence diminishes, since the essential critical pairs are a subset of the critical pairs.

Summary and Outlook
In this paper we have introduced the new notion of essential critical pairs and corresponding results which are the basis of a more efficient conflict detection and

local confluence analysis than the standard techniques based on usual critical pairs. In a forthcoming paper we will give on this basis an efficient correct construction of all essential critical pairs for each pair of rules and a corresponding algorithm which will improve the current critical pair algorithm of AGG [13]. In addition we assume and will verify that an extension of this theory to graph transformation with non-injective matches is possible, provided that the conflict condition is slightly generalized. Moreover the following question in the context of conflict detection for graph transformation systems is subject of future work. What kind of new conflicts occur and which new critical pair notion is necessary to describe the conflicts in graph transformation systems with application conditions and constraints [5] and what about the more general case of typed, attributed graph transformation systems [7]?

References
Baresi, L., R. Heckel, S. Th¨one and V. D., Modeling and analysis of architectural styles based on graph transformation, in: I. Crnkovic, H. Schmidt, J. Stafford and K. Wallnau, editors, Proc. of the 6th ICSE Workshop on Component-Based Software Engineering: Automated Reasoning and Prediction Portland (2003), pp. 67–72.
Bottoni, P., A. Schu¨rr and G. Taentzer, Efficient Parsing of Visual Languages based on Critical Pair Analysis and Contextual Layered Graph Transformation, in: Proc. IEEE Symposium on Visual Languages, 2000, long version available as technical report SI-2000-06, University of Rom.
de Lara, J. and G. Taentzer, Automated Model Transformation and its Validation using AToM 3 and AGG, in: A. Blackwell, K. Marriott and A. Shimojima, editors, Diagrammatic Representation and Inference (2004).
Ehrig, H. and K. Ehrig, Overview of Formal Concepts for Model Transformations based on Typed Attributed Graph Transformation, in: Proc. International Workshop on Graph and Model Transformation (GraMoT’05), Electronic Notes in Theoretical Computer Science (2005).
URL http://tfs.cs.tu-berlin.de/publikationen/Papers05/EE05.pdf

Ehrig, H., K. Ehrig, A. Habel and K.-H. Pennemann, Constraints and application conditions: From graphs to high-level structures, in: F. Parisi-Presicce, P. Bottoni and G. Engels, editors, Proc. 2nd Int. Conference on Graph Transformation (ICGT’04), LNCS 3256 (2004), pp. 287–303.
URL http://www.cs.tu-berlin.de/~ehrig/publications/ICGT04paper3.pdf

Ehrig, H., A. Habel, J. Padberg and U. Prange, Adhesive high-level replacement categories and systems, in: F. Parisi-Presicce, P. Bottoni and G. Engels, editors, Proc. 2nd Int. Conference on Graph Transformation (ICGT’04), LNCS 3256 (2004), pp. 144–160.
URL http://www.cs.tu-berlin.de/~ehrig/publications/ICGT04paper1.pdf

Ehrig, H., U. Prange and G. Taentzer, Fundamental theory for typed attributed graph transformation, in: F. Parisi-Presicce, P. Bottoni and G. Engels, editors, Proc. 2nd Int. Conference on Graph Transformation (ICGT’04), Rome, Italy, LNCS 3256, Springer, 2004 pp. 161–177.
URL http://www.cs.tu-berlin.de/~ehrig/publications/ICGT04paper2.pdf

Hausmann, J., R. Heckel and G. Taentzer, Detection of Conflicting Functional Requirements in a Use Case-Driven Approach, in: Proc. of Int. Conference on Software Engineering 2002, Orlando, USA, 2002, to appear.
Lambers, L., H. Ehrig and F. Orejas, Efficient detection of conflicts in graph-based model transformation, in: Proc. International Workshop on Graph and Model Transformation (GraMoT’05), Electronic Notes in Theoretical Computer Science (2005).
URL http://tfs.cs.tu-berlin.de/publikationen/Papers05/LEO05.pdf

Lambers, L., H. Ehrig and F. Orejas, Efficient conflict detection in graph transformation systems by essential critical pairs, Technical report, Technische Universit¨at Berlin (2006).
Mens, T., G. Taentzer and O. Runge, Detecting Structural Refactoring Conflicts using Critical Pair Analysis, in: R. Heckel and T. Mens, editors, Proc. Workshop on Software Evolution through Transformations: Model-based vs. Implementation-level Solutions (SETra’04), Satellite Event of ICGT’04) (2004).
URL http://www.cs.tu-berlin.de/~gabi/gMTR04.pdf


Plump, D., Hypergraph Rewriting: Critical Pairs and Undecidability of Confluence, in: M. Sleep,
M. Plasmeijer and M. C. van Eekelen, editors, Term Graph Rewriting, Wiley, 1993 pp. 201–214.
Taentzer, G., AGG: A Graph Transformation Environment for Modeling and Validation of Software, in: J. Pfaltz, M. Nagl and B. Boehlen, editors, Application of Graph Transformations with Industrial Relevance (AGTIVE’03), LNCS 3062, Springer, 2004 pp. 446 – 456.
