Egyptian Informatics Journal 22 (2021) 285–294











Exploiting dynamic changes from latent features to improve recommendation using temporal matrix factorization
Idris Rabiu a,b,⇑, Naomie Salim a, Aminu Da’u a, Akram Osman a, Maged Nasser a
a Faculty of Engineering, School of Computing, Universiti Teknologi Malaysia, 81310 Johor Bahru, Malaysia
b Computer Science Department, Ibrahim Badamasi Babangida University, Lapai P.M.B. 11, Niger State, Nigeria



a r t i c l e  i n f o 

Article history:
Received 7 April 2020
Accepted 11 October 2020
Available online 24 October 2020

Keywords: Recommender system Collaborative filtering Concept drift Temporal models
Temporal matrix factorization
a b s t r a c t 

Recommending sustainable products to the target users in a timely manner is the key drive for consumer purchases in online stores and served as the most effective means of user engagement in online services. In recent times, recommender systems are incorporated with different mechanisms, such as sliding win- dows or fading factors to make them adaptive to dynamic change of user preferences. Those techniques have been investigated and proved to increase recommendation accuracy despite the very volatile nature of users’ behaviors they deal with. However, the previous approaches only considered the dynamics of user preferences but ignored the dynamic change of item properties. In this paper, we present a novel Temporal Matrix Factorization method that can capture not only the common users’ behaviours and important item properties but also the change of users’ interests and the change of item properties that occur over time. Experimental results on a various real-world datasets show that our model significantly outperforms all the baseline methods.
© 2021 THE AUTHORS. Published by Elsevier BV on behalf of Faculty of Computers and Artificial Intel-
ligence, Cairo University. This is an open access article under the CC BY-NC-ND license (http://creative-
commons.org/licenses/by-nc-nd/4.0/).





Introduction

The need for research in the area of recommender system in modern society is activated in response to address the potential challenge of information overload which hindered the users timely access to items of interest over the internet [1]. This however, calls for a need to find the solution to the information overload by filter- ing, prioritizing and efficiently delivering relevant information to users, hence the birth of recommender system [1]. Recommender systems are regarded as tools that generate recommendations to the target users by leveraging various kinds of knowledge and information about users, items and past records of user-item inter- actions. During the user interactions with systems, his actions and feedbacks (such as, ratings, like/dislike, purchase, browse histories etc.) are usually collected and stored in a database which can be used to generate new recommendation for next user-system interactions.


* Corresponding author at: Faculty of Engineering, School of Computing, Univer- siti Teknologi Malaysia, 81310 Johor Bahru, Malaysia.
E-mail addresses: idrisrabiu43@gmail.com (I. Rabiu), naomie@utm.my (N. Salim).
Peer review under responsibility of Faculty of Computers and Information, Cairo University.
Although recommender systems suggest the items that appear most likely to be useful to a particular user based on his actions and feedbacks, it is important to note that user interests are some- times dynamic and change over time. Also, as more data about new users and items are being constantly generated, this causes a lot of changes in fundamental relationship between users and recom- mended items [2]. These complex and dynamic characteristics accompanied with stream data posed a great challenge in making effective recommendations as a result of these changes in relation- ship between users and recommended items [3]. On this note, sev- eral studies have considered the problem of modelling user behavioural patterns and shown that a user’s preferences are likely to change from time to time as they become more aware of new products [2,4–7]. To satisfy the users’ current need, the appropriate way to build a holistic recommender system is to properly model the user interest and preferences as they evolve over time [8]. It was shown in these studies that modeling such user preference dynamisms over time can improve the prediction accuracy.
Recently, a Temporal Matrix Factorization (TMF) was proposed by [9], which only takes into account the dynamic change of user preferences by monitoring the evolution of user latent vectors, but it neglects the changed item features. However, the existing temporal models for capturing users’ changing interests are insuf- ficient and in most cases ignored the changed item properties. For


https://doi.org/10.1016/j.eij.2020.10.003
1110-8665/© 2021 THE AUTHORS. Published by Elsevier BV on behalf of Faculty of Computers and Artificial Intelligence, Cairo University. This is an open access article under the CC BY-NC-ND license (http://creativecommons.org/licenses/by-nc-nd/4.0/).



example, a user who is fancy of latest documentary films gave a good rating to the recommended films at first, because the recom- mendation is either up-to-date or gain more popularity among others. But, when the same user requests a recommendation the second time, and he is recommended a documentary film which is much older and unsatisfying than the previous one, then his rat- ing for this recommendation will be low reflecting his dissatisfac- tion with the recommendation. This implies that the user’s perception for documentary films have changed for only the latest and up-to-date recommendations. Different from previous studies, we propose a novel TMF method that considers the dynamic change of user preferences and the changed item features. Gener- ally, the intuition behind temporal models is that, when a new set of ratings is received at a time point t, we gain more information about a user preference which may distort the precision of the pre- diction model. This, therefore, warrants for the adjustment of the user preference model (the latent matrix P) [10]. Similarly, items go in and out of popularity over time such as the recency effects or periodic effects, which also contributes to dynamic changes in the item preference model (the latent matrix Q ). This, however, nullifies the claim that the item latent factors are time invariants. To capture the dynamic changes in each individual user latent vector and item latent vector, we propose to model the user and item latent features separately: the user specific model is built using the dynamic user latent vectors and the item specific model is built using the dynamic item latent vectors. To this end, the
major contributions of this paper can be summarized as follows:
We propose a dui-TMF that leverage the dynamics of user
Table 1
List of notation.

number of users
number of items
T	Tis the prediction time, while T — 1 is the training periods
K	number of latent factors
R = (Rij)  m × nrating matrix
Rij	user i rating prediction for item j P	K × muser latent matrix
Pi	user ith latent vector
Pi (t)	ithuser latent vector learned at timet = 1, 2, ·· · T — 1
Pi (T)	ithuser latent vector predicted at timeT Q	K × n item latent matrix
Qj	item jth latent vector
Qj (t)	jthitem latent vector learned at time t = 1, 2, ·· · T — 1
Qj (T)	jthuser latent vector predicted at timeT I	identity matrix
Iij	indicator function which is equal to 1 if user i rated item j and equal to 0 otherwise
eij	prediction error
eij(t)	prediction error at time t = 1, 2, ·· · T — 1
a	learning rate
k	regulator parameter
DP(t)  changes between user latent vectors at timet = 1, 2, ·· · T — 1 DQ (t)  changes between item latent vectors at timet = 1, 2, ·· · T — 1 SD	standard deviation of changes in the latent vectors.



matrix R into the product of a user feature matrix P and item fea- ture matrix Q, where both P and Q are m × K and n × K matrices for
rank k  min{m, n} respectively. Each row p in P is vector of user i

and item latent vectors to capture changes in each user pref-
preference towards the k
i
q in Q represent the

erences and item features. This method does not only break the limit of the basic Matrix Factorization (MF) method, it also offers a tool for recommenders to accurately recom- mend items that meet the user’s current needs.
We performed experiments using the weighting values esti- mated based on the changes in latent vectors of each indi- vidual users and items.
We further compare our dui-TMF model with state-of-the- art methods to demonstrate its effectiveness based on four real-world datasets.
features and the row j
affinity of jth item towards k features.
Based on this assumption, it follows that each rating is approx- imated by the dot product of each user feature vector and item fea- ture vector as in Eq. (1):
k
T
j
s=1
The MF approach considers the optimization problem in Eq. (2) to learn P and Q :

The remainder of this paper is as follow. In section 2, a review of
1 X X
T 2
1  2	2 

related works is presented. In section 3, we define the general rat- ing prediction problem, and the propose method for capturing
P, QMin 2


i=1


j=1
Ii,j Rij — Pi .Qj
+ 2 P + Q
(2)

changes in user and item latent features, as well as the rating pre- diction are presented in Section 4. Section 5 presents the experi- mental results on various real-world datasets to validate the proposed method. Lastly, the paper is concluded by recommending
where the optimization parameters P and Q can be learn through a SGD algorithm [10], which loops through all ratings in the training set. For each training example Rij, the associated prediction error is first computed in equation in (3) as:

the future research directions in section 6. The list of notations


e = R
— P .Q
(3)


Related work

This section presents a brief review of the MF method and sev- eral recent approaches on temporal aspects that integrate time information with MF for recommender systems, including time-


Then for each loops through the ratings, the Pi and Qj matrices can be updated in the opposite direction of the gradient in Eqs. (4) and (5) as follows:
Pi ← Pi + a eij.Qj — k.Pi	(4)

Q ← Q + a e .P — k.Q	(5)


Matrix Factorization

In the context recommender system, MF has attracted a consid- erable attention for their superior performance in the rating prediction task [11,12]. The motivation behind the MF method is the ease to represent individual user and item by latent factors that characterize the user and item interactions from the historical rat- ing matrix R. Specifically, the basic idea is to decompose the rating
where a and k are the learning parameter and the regulator param-
eter respectively. This iterative and incremental learning method
provides a key building block to extend MF method to a large scale and more dynamic scenarios.

Time-dependent collaborative filtering (TDCF)

Research on TDCF that takes the temporal changes into account has become more triggered after the Netflix competition worn by



the Koren team in the year 2009. It has since then emerged as an appropriate tool to aid the process of recommendations, consider- ing the dynamic nature of data and to address the limitations of the content-based approach [4]. In the same manner, as the classical CF system, DCFM uses a collaborative approach that leverages the user information, such as the age, country, city, and items pur- chased when processing recommendations [13]. Based on this information, the system looks for users that share the same prefer- ence, and then suggest relevant items purchased by similar users. DCFM approaches are basically of two types, namely, the temporal memory-based [14] and the temporal model-based methods [15]. There are several prior works on the temporal CF approaches based on memory models such as [16–19], which focused on Neighborhood-based CF and build the extended techniques that incorporates the dynamic user behaviors based on their interaction sequences to produce a personalized recommendation. In this approach, window-based [20] and weighting functions [21] are the most widely employed to address the dynamic change of user preferences. These two approaches are based on the assumption that most recent ratings reflect more of users’ current interests than the old ratings. Specifically, the window-based approach dis- cards the old data instances that might be less relevant to the cur- rent state of the situation and considers only the recent instances [22]. In this model, all the ratings within a given time-window are assigned equal importance, which is most suitable when the change is an abrupt type, but less so when change is a gradual type [4]. The weighting functions, on the other hand, penalize the old the preferences by applying a decreasing weight to old ratings and attach more importance to the recent ratings. Although these techniques improve the prediction accuracy to some extent com- pared to their baseline neighborhood-based methods, several issues were raised. The possible drawback of these methods is that, by way of penalizing or discarding the old ratings that could pro- vide better information about general preferences of the user, they tend to lose too much data and these make them more susceptible
to data sparsity problem [23].
In addition to memory-based temporal models, several attempts were also made on the temporal factor-based CF models to address the issue of dynamic changes of user interest, which also consider the sparsity limitation of the previous techniques [20,24– 27]. One of the famous models in this category is the temporal matrix factorization (TMF) model [20,28,29]. Thanks to the flexibil- ity of interpreting the latent factors in matrix factorization (MF) methods, different grounds for user preferences and item attrac- tiveness in recommender systems can be seemingly represented in a way that the dynamic changes in user behaviors or item fea- tures are captured. These can be achieved either by employing the recency-based methods [20,30,31] or by incorporating a time variable when modeling user behaviors [25].

Time-independent model

Pairwise Interaction Tensor Factorization (PITF) is one of the basic approach in which time information is duly incorporated. PITF is a classic tensor model that has a linear runtime for both the learning and prediction tasks [32]. In this case, the pairwise interactions among users, items and the tags are jointly learned by this model [32]. Given the user-item-time rating matrix, the tag dimension is replaced in a time-aware approach where the resulting matrix can be factorized to get the corresponding feature models. In this regard, [33] proposed a time-aware approach based on Base-Level Learning (BLL) which utilized the time feature to capture temporal dynamic of user preferences and the items pop- ular tags to handle the cold start of new users. However, the BLL approach works only on individual and the target resource levels, and therefore fails to capture users’ potential interests. In recent
contributions [15], proposed a unified tag recommendation model which extends PITF method by integrating both time awareness and personalization aspects and adding more weight to user-tag and item-tag interactions, respectively [32]. Unlike the common power-form functions employed by the existing temporal models [33], the authors utilized a temporal weight in the form of expo- nential intensity function which was proven more efficient in mod- eling user-item interactions. [34] provided a novel approach which focused mainly on identifying the semantic attributes extracted from user-side information, including the user sentiments, the number of interactions, and objectivity among others. To achieve that, the authors employed a 3-dimensional MF method that takes the temporal alterations into account.
However, one of the draw backs of tensor model is sparsity problem. That is, the higher the order of tensor model is, the more severe the sparsity problem is [34]. This leads to a high space com- plexity, time-consuming and slow convergence rates in the learn- ing process. Moreover, the previous temporal model [20] is based on a strong assumption that the concept drift of user preferences is captured by the transition matrix. With this approach, it is very difficult, if not impossible, to measure the quantitative drift rate. Secondly, it is not sufficient for the tractability of item changing properties as it assumes that items features are invariant over time, and thus focused only on the preference changes of individ- ual users.
In this paper, we want to remove the assumption that the item’s features are time-invariant and tracking changes from item fea- tures can lead to an improved solution. By doing so, we measure the concept drift of individual users based on the user latent vec- tors and the concept drift in item features based on the item latent vectors. Furthermore, we also verified that individual users and items preference vectors changes in different ways. The result shows that some of the users and likewise the items have consid- erable changes in their latent vectors, and the inclusion of items dynamicity in our work is the major factor for the improvement of our proposed temporal model.

Problem definition

Before introducing our novel dynamic user and item features for TMF model (dui-TMF), we first define the problem of rating pre- diction in general based on MF, which has been modified as TMF by using time information in rating prediction [9]. Given a time- stamped rating matrix R, the basic idea is to decompose the rating matrix R into the product of a user feature matrix P and item fea- ture matrix Q, where both P and Q are m × k and n × k matrices for
rank k  min m, n respectively. However, considering the associ-
ated time information for user-item interactions, the user rating matrix is represented in four tuples:
(i, j, r, t)
It is assumed that each rating may be a real number and each item is often rated at most once by a user. When timestamps of the rating matrix are dropped, then the ratings can be represented in the form of m × n matrix with element (Rij), where Rij denotes the user i rating on an item j if the useri actually rated item j. Con- versely, Rij is said to be missing rating if the item j is not been rated by the user i. In real sense, the matrix R may be a sparse matrix with many missing values. Therefore, given a sparse matrix, the rating prediction goal is to predict the missing ratings in the sparse matrixR.
To demonstrate the effectiveness of recommender systems, the performance of the prediction algorithm is often evaluated by par- titioning the rating matrix is into two sets, which comprises of the training and the test sets. The training set is provided to a learning



algorithm to ‘‘learn” the desired parameters for the prediction model. The test set on the other hand is not presented to the learn- ing model but only used to test the accuracy of the prediction model.
In literature, several performance measures have been used to evaluate the temporal recommendation algorithms. In this paper, we adopt the Time-averaged RMSE to measure the performance of our proposed method. TA RMSEis a temporal accuracy metric based on RMSE, which is computed on ratings made until a partic- ular point of time as follows:
vuﬃﬃﬃﬃﬃﬃﬃﬃ1ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃTﬃeﬃﬃsﬃtﬃsﬃﬃeﬃtﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
Step 3: The dynamic concept drift in the user latent vectors for each user i, and the item latent vector for each item j are com- puted using the time series of user latent vectors, {Pi (t), t = 1, 2,
.. ., T — 1}, and the time series of item latent vectors, {Qj (t),
t = 1, 2, .. ., T  1}.
Step 4: In this step, the weighted user and item latent vectors based on the dynamics of the concept drift obtained in the step 3 is computed to update the previous models.
Step 5: In this step, the missing values in the rating matrix is predicted by using the product of P (T) and Q(T) predicted for the user latent matrix and item latent matrix at time T

TA RMSE =
ut|Testsett|
t
rij — brij



(5)
Constructing the time series of rating matrices
One of the possible ways for constructing the time series of rat-

where rij and rij are the predicted and actual rating values, and Testsett is the set of test ratings made until time t. In this case, the lower values of TA RMSE indicates better accuracy.

Proposed temporal matrix Factorization method

In view of the prediction problem discussed in Section 3, we propose a dui-TMF method for tracking not only the changes in user latent vectors but also the changes in item latent vectors. Fig. 1 shows the proposed model for adoption of the temporal matrix factorization based on dynamics of user and item latent fea- tures. Our method follows the same assumptions with the previ- ously used temporal methods in the literature [10,20]. These include:

As defined in the original MF, there are m number of users, indexed as i = 1, 2, .. ., m, andn number of items, indexed as j = 1, 2, .. ., n, such that the rating matrix R can be decom- posed into the product of a user feature matrix P and item feature matrix Q, where both P and Q are m × k and n × k
matrices for rank k  min{m, n} respectively. The latent
vector of user i, denoted by Pi, is the ith column of the user latent matrix P. Likewise, the latent vector of item j, denoted by Qj, is the jth column of the item latent matrix Q . Hence,
the user i rating for item j can be predicted as the inner pro- duct of both Pi and Qj
As people changed their preferences for items over time, the user preference model at one time may not be valid for pre- dicting user preference at a future time. Likewise, the item latent vector changes as item popularity change over time. To this end, we represent the user feature matrix P at time t by P(t), and the user latent vector at timet, is represented by Pi(t), for i = 1, 2, .. ., m. Similarly, Q (t) and Qj(t) are also defined in the same manner.

Based on these assumptions, the key factor of our work is to train the proposed method on the training data set to study the possible drifts in each of the user latent vector, which signifies the user preferences towards the kfeatures and item latent vectors, which represents the affinity of individual items towards k fea- tures. To this end, the major steps involved in our approach are as follows:

Step 1: In this step, the time series of m  n rating matrices, {R (t), t = 1, 2, .. ., T 1} were constructed by using the rating feed- backs in the training data set.
Step 2: In this step, using the time series of rating matrices {R(t), t = 1, 2, .. ., T — 1} constructed in step 1, the time series of both the user latent vector Pi (t), and item latent vector Qj(t), {t = 1, 2,
... , T — 1} were learned.
ing matrices  R t , t  1, 2,  T  is either by sorting the original
rating matrix such that items appear chronologically according to users’ ratings submission or by equally partitioning the rating matrix on the same scale based on their timestamps. Here we choose the latter approach where the original rating matrix is par- titioned according to their stamps. To avoid the possibility of cre- ating sparser data which is guaranteed using partitioned based method, we use a sliding window method that combines the rat- ings in a number of consecutive slices into a single time step, as adopted in [21].
Learning the time series of user and item latent vectors
The intuition behind time-evolving user latent factors is that, when a new set of ratings is received at time t, we gain more infor- mation about a user preference which may distort the precision of the prediction model. This, therefore, warrants for the adjustment of the reference model (the user latent vector Pi). The temporal methods proposed by previous authors [9] assumed the user latent vector always reflects the user preferences not only associated with the ratings of the user for that specific time step but also reflect the overall behavior. Based on this claim, they proposed a method that updates the user preference model at a regular time interval, and keep the items’ feature vectors fixed based on the claim that item features are time-invariant and does not change. We argued that items feature undergoes several changes at a reg- ular time interval, and therefore we adopt a procedure different from [9].
To learn the time series of user latent vectors for individual users, we begin by decomposing the rating matrix at t = 1 and determine the user feature matrix P and the item feature matrix Q related to this time step. As such, the user-item interactions for each time period is modeled using the proposed dui-TMF, defined as follows:
T
ij	i	j

In view of this, we first set Pi(t) and Qj(t) as the original user and item latent vectors Pi and Qj. Then, the ratings observed for that time step is used to learn Pi(t) and Qj(t) respectively. When the new batch of rating is received, we then incrementally train the model to obtain an updated latent user vector Pi(t + 1) and
Qj(t + 1), without the making changes permanently. To solve the optimization problem, we adopt a stochastic gradient descent (SGD) method in order to obtain the optimized learning parameters:

eij(t) = Rij(t) — Pi(t).QT (t)	(7)

Pi(t) ← Pi(t) + a eij(t).Q j(t) — k.Pi(t)	(8)
Qj(t) ← Qj(t) + a eij(t).Pi(t) — k.Qj(t)	(9)




Fig. 1. Proposed temporal matrix factorization model.


This implies that, for every new rating we gain more informa- tion about a user preference in addition to the last preferences and thus update the latent vectors related to users and items based on these new ratings. This approach maintains a balance between


benefit of adapting to gradual or abrupt changes in a data distribu- tion [35]. This strategy is formally expressed by the following formula:
 1  rXﬃﬃﬃﬃﬃﬃﬃkﬃﬃﬃﬃﬃﬃﬃﬃpﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃpﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ ﬃ2ﬃﬃ

Learn the dynamics of concept drift in Pi(t) and Qj(t) 
In real life recommender systems, individual users experience drift of interests at different time points or rates. For some users, the change rate occurs frequently, for instance when users buy items as gifts for others during the festive periods, or when several individuals share one account. While other users change their pref- erences at more slow pace. In either case, learning the model with respect to these dynamic changes distorts the precision of the pre- diction model. In this section, we assume that the latent vectors Pi and Qjchanges over time and analyze how much of these changes occurred in the latent vectors.
In order to track the perceived changed preferences, we first store the latent vectors at time point t, denoted as Pi(t) and Qj(t). Then, we perform an update training and obtain a new latent user vector Pi(t + 1) and the corresponding item vector Qj(t + 1) on the new batch of the ratings. There are different methods for calculat- ing dissimilarity between two concepts. Matuszyk strategy to mea- sure how much the latent factors have changed compared to the previous time point was by calculating the squared difference between Pi t 1 and Pi t [10]. This strategy however, proves to be sufficient only when the change involved is a gradual change type. Therefore, we proposed a Hellinger distance measure to com- pute the similarity scores in this study. The Hellinger distance measure is a feature based drift detection method that have the
The drift score reveals a piece of important evidence as to whether the user has a consistent taste or if item features are time-invariant. The lower the score value, the more the possibility that the concept-drift has occurred. To test if the change has occurred, we adopt the same principle with [10] by computing
the standard deviation SD h Pi t  1 , Pi t  of how much the
latent features have changed compared to the previous time point. In this case, the change is decided if the following inequality is sat- isfied, else no change has occurred:
h(Pi(t + 1), Pi(t)) > a.SD(h(Pi(t + 1), Pi(t)))	(11)
where the parameter a controls the sensitivity of the forgetting the old preferences. In every case, the choice of a is specifically chosen
for each dataset and has to be determined experimentally. The same strategy is also applied to measure the concept drift in Qi(t + 1) and Qi(t).
Computing weighted user and item latent factors
After analyzing how much the latent user vector Pi and the item latent vector Qj changes between two-time points, then we adjust the preference models (the latent vector Pi and the item latent vec- tor Qj) appropriately. If the new ratings are consistent with this user’s preferences, then the change in the latent vectors between Pi t and Pi t 1 is expected to be minimal. However, if the latent vectors changed dramatically after training on the new batch, this



shows that the user preference has drifted away from past prefer- ences. Hence, we update the model of a user preference (Latent item vectors) by multiplying with an exponential function whose value depends on the rate of change of user’s preference [36]. This is expressed in the equations (12) and (13) as follows.
and items for tracking changes in their latent vectors. The param- eters that we adopted for our experiments are: the number of k factors = 40, the learning rate a = 0.003, and the regulator k = 0.01. To obtain the latent factors for each time period, we per- form 50 iterations of SGD. The parameters for computing the user
and item latent vectors for each time period in our method are set

P—i—(—t —+—→1) = a—SD(h(Pi (t+1),Pi (t))).P——i(→t) 

Q——j(—t—+——→1) = a—SD(h(Pi (t+1),Pi (t))).Q— —j(→t) 
(12)

(13)
to be the same as those for the baselines. We compare the results against three baseline methods in different aspects to show the benefit of tracking concept drift in the latent vectors. These baseli- nes include:

The exponential function controls the extent of the penalty. Specifically, the function takes the values in the range [0, 1) for
a > 1. For a high value of drift score, the exponential function yields
a lower value and as a result, penalize the old preferences the
more.
Rating prediction
Once the weighted users and items latent vectors have been obtained for the time period T — 1, i.e., both Pi(T — 1) and Qj(T — 1), then we can predict the latent vectors at time T using
the equation (14) and (15) as follows:
MF. Matrix Factorization method is the most widely and suc- cessful method for rating prediction in the context of recommen- dation tasks [31,32]. Here, we assume that user behaviours as well as items features are time invariants and therefore ignore tracking their changing situations.
timeSVD++. This method models the temporal dynamics of users by a simple sum of time-changing rating biases for each user and each item with the estimate from the traditional MF [4].
TMF. This is a state-of-the-art method for tracking the concept drift of each individual user’s preferences over time [20]. It is based on a linear system model with a user-specific transition matrix

P—i—(→T) = a—SD(h(Pi (t+1),Pi (t))).P—i—(—T————→1)
Q (→T) = a—SD(h(Pi (t+1),Pi (t))).Q——(—T————→1)
(14)

(15)
which represent the concept drift of user preference in each time steps.
We implemented the proposed model in python 3.5 and tune



After learning the latent factors P and Q at time T, the future prediction of the unseen items can be predicted using the inner product of both Pi(T)and Qj(T) latent vectors in equation (6) that is:
R^ij(T) = Pi(T).Qj (T)	(16)


Experiments

In this section, we performed a series of experiments to evalu- ate the performance of the proposed method using the four real- world datasets. These comprises of MovieLens 1 M, Flixster, Ciao, and Epinions datasets. These datasets were carefully chosen based on the fact that they have timestamped information and are broadly used in collaborative filtering research projects that involve tracking the dynamics of concept drift in the recommender system. Specifically, the MovieLens 1 M dataset contains ratings for over a period of three years (from the year 2000 to 2003) for the user who joined ML during the year 2000. As such, the ratings in this category correspond to three years of a follow-up by these users, therefore the dataset has enough users, items, and ratings to detect the trends of users’ preferences. Specifically, the dataset has 1, 000, 0054 ratings on 3,900 items provided by 6040 users respectively. Flixster is an American-based social movie site that provides applications for customers to share the ratings or reviews about movies. The dataset contains the rating of 7, 837, 76, by 114,747 users on 44,439 items. Ciao is a European-based online site with claims, which have reached an audience of 28.4 million monthly unique users in Europe. In the Ciao dataset, we sample a subset of the dataset with 22,894 ratings on 5,004 ratings by 1,947 users respectively. Epinions is one of the largest users’ review site, established in 1999 comprises of thousands of users and product records in the world. These datasets provide services for users to rate movies based on a 5-point Likert scale. It thus pro- vides information about the user, item, users’ preference ratings, and the associated timestamp information. The statistics about these datasets is provided in Table 2.
To enable proper tracking of change detection, new users and new items are removed, that is, the users or items that appear in less than 20 times in the dataset and focus on the existing users
based on the test dataset. All the models are trained with the stochastic gradient decent algorithm until converge with at least 50 iterations. Table 3 shows the performance of the three baselines and the improved methods when exploiting the dynamic changes in a user and item features. Fig. 2 shows the experimental results on the four datasets with explicit rating feedbacks for better explanations.
First, in comparison with the previous approaches, the proposed temporal model improves the performance in terms of RMSE across all the four datasets. However, the performances of different baselines varies across datasets. As could be seen from Fig. 2, timeSVD++ and TMF performed best compare to MF across all the datasets, which shows the benefits of temporal models over the non-temporal models. Also, we noticed that the temporal mod- els shows different capabilities in various scenarios. Specifically, the timeSVD++ and TMF perform quite well in Ciao and Epinion datasets, which may be the result of longer time span and the sen- sitivity to dynamic preferences in these datasets. This explains the fact that the performance gain of tracking concept drift effects depend on the domain dataset as a result of some intrinsic proper- ties. As for our dui_TMF model, we achieve the best performance improvements compare to all baselines methods. Specifically, on the Ciao, we obtain 14% improvement, while in Epinion dataset, we obtained 10% improvement, which implies that these datasets are more beneficial to concept drifts both in terms of user latent vectors and item latent vectors as well. But in other datasets, users’ interactions tend to be in more consistent direction, therefore, mainly modelling temporal dynamics in these datasets result in lower performance gain.
Second, in order to check the validity of tracking the dynamic changes from both the latent vectors of the user and item models, we also examine the effect of changes in user latent vectors as well as item latent vectors over time (see Fig. 3). Here, the opinions vary about the importance of tracking changes in item latent vectors. The previous studies assume that item vectors are invariant over time and thus ignored the dynamic properties of items [20]. There- fore, our study verifies the impact of dynamic changes in items properties and the results showing the evolution of both the user latent vectors as well as the item features are provided in the Tables 3-6. However, as a result of space constraints and for an easier comparison, we report only the results on the Ciao and

Datasets statistics.



Table 3
Experimental result based on RMSE on the four datasets.




 

			


Fig. 2. Comparison of results for MF, timeSVD++, TMF, and dui-TMF on all the datasets.


MovieLens datasets. From the user preference perspective, our finding reveals that users tend to change their interest in different ways which require a more robust approach to account for the dif- ferences in user’s preference drift. The implication is that, even if two users share the same view about same items for some time, they will likely to have different views at some point in the future. Also, the rate at which user’s preference changes varies among dif- ferent users. Some users basically tend to change their interests more rapidly than others. To gain a better understanding of these
concepts, we conducted a qualitative analysis. First of all, we con- sider the changes in the first five latent factors which represent the user preferences for user 63 and user 155 latent vectors based on the MovieLens dataset as well as Ciao dataset. In Table 4, we recorded the first five factors of the user latent vectors for the dif- ferent time periods t, and the predicted factors of the user latent vector Pi (T) where T = 6. In the case of user 63, the predicted latent vector at time period 6 using the proposed method is significantly different from the initial latent vector at time 1, and the changes occurred more rapidly after the fifth period. However, in the case of user 154 as reported in Table 5, the rate of change is relatively slow. The predicted latent vector for this user at time period 6 is very close to that obtained at the origin.
Third, in the perspective of item latent factors, Table 6 analyses the advantage of computing the dynamic changes in item latent vectors. As can be seen from the table, the results show that items affinity values for each of the latent factors also change from time to time. The changes occur for several reasons such as when a par- ticular item became popular as a result of the presence of a partic- ular actor in a movie or the arrival of the festive periods. These factors have the tendency to shift the preferences for the item latent factors. For example, we show the evolution of the first five latent factors of the latent vector for item 80 and item 218 in the Ciao and the MoveLens dataset. It is also observed that the changes in items features vary among items. In the case of item 80, the pre-






Fig. 3. Result on the Cio and MovieLens datasets for dynamic changes in user latent vectors. The left figure shows the changes in user latent vectors for user 63 in Cio dataset. While the right figure shows the changes in user latent vectors for user 154 in MovieLens dataset.

User 63 latent vectors for the first five factors in the Ciao dataset.

Factors	1	2	3	4	5

Pi	0.4878	0.3468	0.4869	0.4085	0.3670
Pi(1)	0.5078	0.4468	0.5769	0.4885	0.4670
Pi(2)	0.4678	0.3802	0.5791	0.4043	0.3935
Pi(3)	0.4835	0.3934	0.4455	0.3813	0.4236
Pi(4)	0.4948	0.3447	0.4748	0.3699	0.3887
Pi(5)	0.4344	0.3785	0.5693	0.3895	0.3703
Pi(6)	0.4740	0.4207	0.5580	0.4711	0.4575



Table 5
User 154 latent vectors for the first five factors in the MovieLens dataset.
Factors	1	2	3	4	5
Pi	0.6878	0.6443	0.6787	0.5832	0.8241
Pi(1)	0.6758	0.6353	0.6787	0.5832	0.8241
Pi(2)	0.6419	0.6445	0.6144	0.9932	0.6241
Pi(3)	0.5582	0.7354	0.6480	0.5837	0.7241
Pi(4)	0.5437	0.7543	0.5675	0.5432	0.7133
Pi(5)	0.5418	0.7312	0.5819	0.5985	0.7345
Pi(6)	0.6966	0.6923	0.6231	0.5625	0.8584



Table 6
Item 80 latent vectors for the first five factors in the Ciao dataset.
Factors	1	2	3	4	5
qj	0.5235	0.7034	0.7255	0.7113	0.5236
qj (1)	0.5835	0.8027	0.8515	0.8613	0.5036
qj(2)	0.5748	0.7174	0.7284	0.7869	0.4987
qj(3)	0.4085	0.6461	0.6163	0.7075	0.4311
qj (4)	0.4023	0.6178	0.7305	0.7239	0.4856
qj(5)	0.4158	0.6554	0.7559	0.7605	0.4721
qj(6)	0.5748	0.7174	0.8284	0.8669	0.5087




dicted latent vector at time period 6 using the proposed method is significantly different from the initial latent vector at time 1, and the changes occurred more rapidly after the fourth period. How- ever, in the case of item 218, the rate of change is relatively slow. The predicted latent vector for this user at time period 6 is very close to that obtained at the origin as shown in Table 7.
Fourth, to further analyze the advantage of computing the dynamic changes for each user and item separately, we ran the dui-TMF with the following configurations, adopted from [29]:
(a) dui-TMF: where the dynamic drift score is calculated for each individual user and item latent vectors as in equation (11) and
(12); (b) dui-TMF -c: where a common drift score (c) is used for all users and items. We chose three values for s ranging from small to high: c {0.1,0.5,1}. The results are shown in Table 8. The TA_RMSE for this experiments is shown in Fig. 4. The interesting observations from the result include: (1) Using dui-TMF -c with adapted concept drift scores for both the user and item latent vec- tors is better than the baselines that do not consider item dynam- icity. (2) dui-TMF significantly improves the performance of the recommendation task by computing the individual concept drift scores for both the user and item vectors on all the datasets as shown in Fig. 5.
To better understand the performance of dui-TMF -c for individ- ual latent factors using different values of c, we conducted a qual- itative analysis on the test set of the Ciao dataset. We found that when c is set to 0.1, the result shows better performance for a number of 41 users but found to be worst for 347 users. When increasing c to 0.5, it shows to be improved for a numbers of 104 users but worsened for 284 users. This implies that, for 104 users, c = 0.5 is a better choice than c = 0.1 but for 284 users, reverse is the case. The same observation is made when increasing c to 1, related
to c = 0.5. The results show to be better for 218 users but worst for
170 users. A notable observation is the significant changes in results when different values of c are used. For c = 0.5, we observed that not all users who showed improved results for this value also showed improvement for c = 1. When moving to c = 1, additional 171 of users showed better results, while about 57 of users got worst results. This analysis proves our argument that each individ- ual user or item has distinct drift scores that do not necessarily fit for others.
In summary, the results demonstrate that dui-TMF clearly cap- tures the temporal dynamics of user and item features, and sug- gested that computing drift scores for each individual user and item latent features yields a better result than assigning a common drift value for each dimension.

Conclusion and future work

In this paper, we introduced dui-TMF, a time-aware approach that combined the concept drift effects of both the user and item latent vectors to improved recommendation tasks. Based on the preference vectors of the user and item latent vectors derived with the MF method, we compute a user-specific and item-specific drift scores. Consequently, these scores are used to weigh down the importance of old features and make the recommender system more adaptive to dynamic changes in user’s preferences and item specific features. These weights control the contribution of the latent vectors in future predictions. The interesting findings from this work are: (1) in order to achieve realistic recommendation, it is essential to consider a dynamic changes of user preferences and dynamic changes in item features when making predictions; and (2) as individual users and items drift in different directions,


Table 7
Item 218 latent vectors for the first five factors in the MoveLens dataset.
Factors	1	2	3	4	5
qj	0.2998	0.4365	0.2460	0.2156	0.2907
qj (1)	0.2845	0.5665	0.2860	0.2356	0.3407
qj(2)	0.2817	0.4194	0.3098	0.3294	0.2800
qj(3)	0.3249	0.4065	0.3178	0.3246	0.2727
qj(4)	0.2793	0.4482	0.3440	0.3219	0.2489
qj (5)	0.2810	0.4645	0.3789	0.2969	0.2551
qj(6)	0.2854	0.5517	0.2864	0.2235	0.3412



Table 8
RMSE comparisons for dui-TMF and dui-TMF – c on Ciao dataset.





Fig. 4. Result on the Ciao and MovieLens datasets for dynamic changes in item latent vectors. The left figure shows the changes in item latent vectors for item 80 in the Ciao dataset. While the right figure shows the changes in user latent vectors for item 218 in MovieLens dataset.


the heuristic approach of calculating the Hellinger distance of the previous user or item features.

Funding

This research was funded by the Universiti Teknologi Malaysia, through the grant number: Q.J13000.2551.21H38-Novel Deep Learning, Concept Drift, and Hybrid Models Research Funding Program.



Fig. 5. RMSE comparisons for dui-TMF and dui-TMF –c on Ciao dataset.



drift scores should be computed for each user and item separately. Our approach to improving the adaptivity of recommenders is by continuously updating the obsolete information. We extended a state-of-the-art Matrix Factorization method for the implementa- tion of our proposed method. We performed several experiments on four datasets with rating feedback. The main aspect that we plan to investigate in our future work is to explore several drift detection methods that allow learning the concept-drift by per- forming rigorous change detection analysis instead of relying on
Declaration of Competing Interest

The authors declare that they have no known competing finan- cial interests or personal relationships that could have appeared to influence the work reported in this paper.

Acknowledgements

The authors wish to express their gratitude to Universiti Tekno- logi Malaysia (UTM), the Ministry of Higher Education Malaysia (MOHE) and Ibram Badamasi Babangida University, Lapai, Niger State, Nigeria for their financial support.



References

Isinkaye FO, Folajimi YO, Ojokoh BA. Recommendation systems: Principles, methods and evaluation. Egypt Inform J 2015;16(3):261–73.
Sun B, Dong L. Dynamic model adaptive to user interest drift based on cluster and nearest neighbors. IEEE Access 2017;5:1682–91.
Zhang Q, Wu D, Lu J, Liu F, Zhang G. A cross-domain recommender system with consistent information transfer. Decis Support Syst 2017;104:49–63.
Koren Y. Collaborative filtering with temporal dynamics. Commun ACM 2010;53(4):89–97.
N. Hariri, B. Mobasher, and R. Burke, ‘‘Context adaptation in interactive recommender systems,” pp. 41–48, 2014.
P. M. Gonçalves, S. G. T. De Carvalho, R. S. M. Barros, and D. C. L. Vieira, ‘‘Expert Systems with Applications A comparative study on concept drift detectors,” vol. 41, pp. 8144–8156, 2014.
Yuan Q, Cong G, Ma Z, Sun A, Magnenat-Thalmann N. Time-aware point-of- interest recommendation. SIGIR 2013 - Proceedings of the 36th international ACM SIGIR conference on research and development in information retrieval, 2013.
McAuley J, Leskovec J. From amateurs to connoisseurs: Modeling the evolution of user expertise through online reviews. WWW 2013 – proceedings of the 22nd international conference on world wide web, 2013.
Y. Lo, W. Liao, C. Chang, and Y. Lee, Temporal matrix factorization for tracking concept drift in individual user preferences, pp. 1–13.
Matuszyk P, Vinagre J, Spiliopoulou M, Jorge AM, Gama J. In: Proceedings of the ACM symposium on applied computing. p. 947–53.
Abdollahi B, Nasraoui O. Using explainability for constrained matrix factorization. RecSys 2017 – proceedings of the 11th ACM conference on recommender systems, 2017.
Kumar B. A novel latent factor model for recommender system. J Inf Syst Technol Manag 2016.
Portugal I, Alencar P, Cowan D. The use of machine learning algorithms in recommender systems: A systematic review. Expert Syst Appl 2018.
L. Zhang, P. Liu, and J. A. Gulla, ‘‘Dynamic attention-integrated neural network for session-based news recommendation,” Machine Learning, Springer New York LLC, 14-Oct-2019.
Wang K, Jin Y, Wang H, Peng H, Wang X. Personalized time-aware tag recommendation. In: 32nd AAAI conference on artificial intelligence. AAAI; 2018. p. 2018.
Bellogín A, Sánchez P. Revisiting neighbourhood-based recommenders for temporal scenarios. CEUR workshop proceedings, 2017.
Koren Y, Bell R. Advances in collaborative filtering. Recommender systems handbook, 2015.
Liu NN, Zhao M, Xiang E, Yang Q. Online evolutionary collaborative filtering. In: RecSys’10 – proceedings of the 4th ACM conference on recommender systems. p. 95–102.
Wei S, Ye N, Zhang Q. Time-aware collaborative filtering for recommender systems. Communications in computer and information science, 2012.
Lo YY, Liao W, Chang CS, Lee YC. Temporal matrix factorization for tracking concept drift in individual user preferences. IEEE Trans Comput Soc Syst Mar. 2018;5(1):156–68.
Zhu Z, Li D, Liang JIE, Liu G, Yu HAI. A dynamic personalized news recommendation system based on BAP user profiling method. IEEE Access 2018;6:41068–78.
Escovedo T, Koshiyama A, da Cruz AA, Vellasco M. DetectA: abrupt concept drift detection in non-stationary environments. Appl Soft Comput J 2018;62:119–33.
Al-Hadi IAAQ, Sharef NM, Sulaiman MN, Mustapha N. Review of the temporal recommendation system with matrix factorization. Int J Innov Comput Inf Control 2017.
A. Lommatzsch, B. Kille, Incorporating context and trends in news recommender systems, 2017.
A.B. Othmane A. Tettamanzi S. Villata N.L. Thanh in ICAART 2018 - Proceedings of the 10th international conference on agents and artificial intelligence 2018 48 57
Song D, Li Z, Jiang M, Qin L, Liao L. A novel temporal and topic-aware recommender model. World Wide Web 2019;22(5):2105–27.
Zafari F, Moser I, Baarslag T. Modelling and analysis of temporal preference drifts using a component-based factorised latent approach. Expert Syst Appl Feb. 2019;116:186–208.
Al-Ghossein M, Murena PA, Abdessalem T, Barré A, Cornuéjols A. Adaptive collaborative topic modeling for online recommendation. In: RecSys 2018– 12th ACM conference on recommender systems. p. 338–46.
Alzogbi A. Time-aware collaborative topic regression: Towards higher relevance in textual item recommendation. CEUR Workshop Proc 2018;2132:10–23.
Liu Y, Liu C, Liu B, Qu M, Xiong H. Unified point-of-interest recommendation with temporal interval assessment. Proceedings of the ACM SIGKDD international conference on knowledge discovery and data mining, 2016.
R. Pálovics, A. A. Benczúr, L. Kocsis, T. Kiss, and E. Frigó, Exploiting temporal influence in online recommendation, RecSys 2014 - Proc. 8th ACM Conf. Recomm. Syst., pp. 2–9, 2014.
Rendle S, Schmidt-Thieme L. Pairwise interaction tensor factorization for personalized tag recommendation. In: WSDM 2010 – Proceedings of the 3rd ACM international conference on web search and data mining. p. 81–90.
Kowald D, Seitlinger P, Kopeinik S, Ley T, Trattner C. Forgetting the words but remembering the meaning: Modeling forgetting in a verbal and semantic tag recommender. Lecture notes in computer science (including subseries lecture notes in artificial intelligence and lecture notes in bioinformatics, 2015.
Feltoni Gurini D, Gasparetti F, Micarelli A, Sansonetti G. Temporal people-to- people recommendation on social networks with sentiment-based matrix factorization. Futur Gener Comput Syst 2018;78:430–9.
Ditzler G, Polikar R. Hellinger distance based drift detection for nonstationary environments. IEEE SSCI 2011: symposium series on computational intelligence - CIDUE 2011: 2011 IEEE symposium on computational intelligence in dynamic and uncertain environments, 2011.
Matuszyk P, Vinagre J, Spiliopoulou M, Jorge AM, Gama J. Forgetting techniques for stream-based matrix factorization in recommender systems. Knowl Inf Syst 2018;55(2):275–304.
Idris Rabiu, Naomie Salim, Aminu Dau, Akram Osman. Recommender System Based on Temporal Models: A Systematic Review 2020;10(7)(2204):1–27. doi: https://doi.org/10.3390/app10072204.
