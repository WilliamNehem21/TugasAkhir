Electronic Notes in Theoretical Computer Science 106 (2004) 167–184 
www.elsevier.com/locate/entcs


Trace Semantics for Coalgebras
Bart Jacobs
Department of Computer Science, University of Nijmegen
P.O. Box 9010, 6500 GL Nijmegen, The Netherlands Email: mailto: bart@ cs. kun. nl URL: http: // www. cs. kun. nl/ ~bart

Abstract
Traditionally, traces are the sequences of labels associated with paths in transition systems X → P(A × X). Here we describe traces more generally, for coalgebras of the form X → P(F (X)),
where F is a polynomial functor. The main result states that F ’s final coalgebra Z −=∼→ F (Z) gives rise to a weakly final coalgebra with state space P(Z), in a suitable category of coalgebras. Weak finality means that there is a coalgebra map X → P(Z), but there is no uniqueness. We show that there is a canonical choice among these maps X → P(Z), namely the largest one, describing the traces in a suitably abstract formulation. A crucial technical ingredient in our construction is a general distributive law F P ⇒ PF , obtained via relation lifting.
Keywords: Coalgebra, trace semantics, polynomial functor, final coalgebra, distributive law.

Introduction
A final coalgebra Z −=→ F (Z) of a functor F is an abstract model consisting of behaviours of the kind described by the functor (or interface) F . The elements of Z are “structured” in the sense that the transition structure is incorporated.
The associated notion of equivalence is “strong” bisimulation. It arises as the natural notion of equivalence within the theory of coalgebras.
Trace semantics involves only linear behaviours consisting of sequences of consecutive actions, see for instance [2] for a discussion. It is much more problematic within the theory of coalgebras. Partial results may be found in [5], for coalgebras of the form X → P(1 + (A × X)). Here we generalise the
approach from [5] to coalgebras of the form X → P(F (X)). This is achieved
by generalising the distributive law that is used in [5] to one of the form
F P ⇒ PF .

1571-0661 © 2004 Published by Elsevier B.V.Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2004.02.031


Once the appropriate abstraction level is achieved, we are not done, since the technical elaboration appears non-trivial. Much of the work focusses on general traces of coalgebras X → P(F (X)) and on their properties.
This paper starts with two preliminary sections, one on traditional trace
semantics for labeled transition systems, and one on relation lifting associated with an endofunctor. Then, Section 4 describes the general distributive law F P ⇒ PF that forms the basis of our work, and Section 5 introduces an ap-
propriate category of coalgebras over a Kleisli category for our trace semantics.
Our main result about a weakly final coalgebra of traces is in Section 6.

Traditional trace semantics
This section sketches the basics of traditional trace semantics for labeled trans- ition systems (LTSs). Such a system is described as a coalgebra α: X → P(A × X), where
X is the set of states
A is the set of labels (or actions)
α describes the transitions x −a→ x', namely as (a, x') ∈ α(x). For such an LTS one can form the set U of infinite paths as:
U = {(⟨x ,a ⟩, ⟨x ,a ⟩,.. .) ∈ (X × A)N | ∀n ∈ N.x −a→n  x	}
0	0	1	1	n	n+1

With each state x ∈ X one can then associate an infinite trace l(x) ∈ P(AN), namely
l(x) d=efn {πN(u) | u ∈ U with π (u )= x}.
2	1	0

Here we write πN
for the element-wise extension of the second projection

π2: X × A → A to af function (X × A)N → AN.
It is not hard to see that this function l: X → P(AN) satisfies:
l(x) = {a · σ | ∃x' ∈ X. x −a→ x' and σ ∈ l(x')}.
where the dot in a · σ describes prefixing.
The following simple example shows that the equation (2) does not uniquely determine l(x). Consider the LTS given by the following transitions:
c

b


Hence this LTS is captured by X = {x}, A = {b, c} and α(x)= {(b, x), (c, x)}. The set l(x) is then {b, c}N, i.e. contains all infinite sequences with elements b and c. However, the proper subset
k(x) = {σ ∈ l(x) | b occurs infinitely often in σ}
also satisfies (2). For the inclusion (⊆) assume σ ∈ k(x), so that σ contains infinitely many b’s. If we write σ = a · σ', where a ∈ {b, c}, then clearly the tail σ' must also contain infinitely many b’s. The reverse inclusion (⊇) is obtained similarly.
We have two remarks.
This last example shows that uniqueness is not part of trace semantics (in this manner), and thus that a trace function l will not arise as map to a final coalgebra. However, as our main result (Theorem 6.5) shows, it does arise as canonical map to a weakly final coalgebra. This “weakness” means existence, but not unique existence.
Despite this lack of uniqueness, trace semantics is useful for the compar- ison of states, namely via trace inclusion or trace equality between states. This paper however, focuses exclusively on the abstract theory, and not on applications.
One may wish to include finite traces—and not only infinite ones. A typical way of doing this is via auxiliary transitions that are repeated over and over again once a final state is reached. Then one may also restrict oneself to coalgebras of the form X → P∗(A × X) for the powerset P∗ of non-empty
sets. We shall not do so.

Trace semantics for LTSs, more abstractly
Before we proceed to a coalgebraic approach to trace semantics, we like to identify the crucial steps of this more abstract approach for an LTS α: X → P(A × X) as considered above. We first notice that its functor P(A × −) can be written as PF , there F = A × −. The final coalgebra of F is of course the
set AN of infinite sequences, given by the head and tail operation ⟨h, t⟩: AN −=→
A × AN. Interestingly, the set U of infinite traces carries an F -coalgebra struc- ture U → A × U , given by (⟨x0, a0⟩, ⟨x1, a1⟩,.. .) '−→ ⟨a0, (⟨x1, a1⟩,.. .)⟩. The induced map to the final coalgebra is πN: U → AN, as used in the definition (1). In the more abstract approach in the remainder of this paper we shall allow more general functors F for coalgebra X → P(FX). A crucial step is to give an appropriate definition of the set U of infinite paths, with an F -coalgebra structure. This yields a map U → Z to the final F -coalgebra Z, and hence a
trace map X → P(Z).

Coalgebraic preliminaries
We shall restrict ourselves to coalgebras X → F (X) of endofunctors F : Sets → Sets. Later, in Section 6 we shall further restrict these F ’s to so-called poly- nomial functors, built up from the identity, constant functors, product, cop- roducts and exponents (−)A with a constant set, see for instace [3].
Associated with a functor F : Sets → Sets we can define what is usually called relation lifting. It is an extension Rel(F ) of F from sets to relations, in the sense that R ⊆ X × Y is mapped to Rel(F )(R) ⊆ F (X) × F (Y ). It may be defined in general terms via epi-mono factorisation: if we have
⟨r1, r2⟩: R ‹→ X × Y , then:


F (R) ¸¸
¸¸¸¸¸
 R el(F )(R)
J 

⟨F (r1),F (r2)⟩ ¸¸¸¸¸z˛ J 
F (X) × F (Y )
For polynomial functors one can describe this relation lifting conveniently via an inductive definition, see [3].
The following list sums up the basic results that we need about relation lifting.
Equality is preserved: Rel(F )(=X) = =F (X).
Composition is preserved: for R ⊆ X × Y and S ⊆ Y × Z, the relational composition S ◦ R = {(x, z) | ∃y. R(x, y) ∧ S(y, z)} satisfies:
Rel(F )(S ◦ R)= Rel(F )(S) ◦ Rel(F )(R).
Inclusions are preserved: if R ⊆ S then Rel(F )(R) ⊆ Rel(F )(S).
Inverse images (or substitution, or reindexing) and direct images pre- served: for functions f1: X1 → Y1, f2: X2 → Y2 and relations S ⊆ Y1 × Y2 and R ⊆ X1 × X2 we have:
Rel(F ) (f × f )−1(S)	= (F (f ) × F (f ))−1 Rel(F )(S)
Rel(F )   f1 ×f2 (R)  =  F (f1)×F (f2 )  Rel(F )(R) ,
where, in general  h(P )= {x | ∃y. x = h(y) ∧ y ∈ P } = {h(y) | y ∈ P }. All these properties hold for functors F that preserve weak pullbacks, see [6], and hence in particular for polynomial functors.
We shall need the following non-standard result about relation lifting.


Lemma 3.1 Assume a relation ⟨r1, r2⟩: R > X × Y , with associated relation lifting ⟨p1, p2⟩: Rel(F )(R) > F (X) × F (Y ). Assume we have a diagram
T ¸,	 W 	 S 
J	J	J 
J	J	J 
Y × Z ¸,	 R × Z 	 X × Z
r1 × id	r2 × id
Then we have an inclusion, as indicated by the dashed arrow, in:


Rel(F )(T ) _ _ _ _ _ •  ¸¸,,	 *
 Re l(F )(S)

¸z˛	J	J	J 
¸¸¸¸¸¸

¸¸z˛J 
¸,	 Rel(F )( J 
	  J 

FY × FZ 
p1 × id
R) × FZ 
p2 × id
FX × FZ 

Proof Since relation lifting preserves both direct and inverse images, we can apply it to the first diagram in the lemma and get:
Rel(F )(T ) ¸¸,,	 Rel(F )(W )	 R el(F )(S)
J	J	J 

J  ¸,		J 	  J 

FY × FZ 
F (r1) × id
FR × FZ 
F (r2) × id
FX × FZ 


The surjection e: F (R) → Rel(F )(R) with pi ◦ e = F (ri) yields a mediating map Rel(F )(W ) → *. The required map is then obtained via orthogonality (or so-called “diagonal-fill-in”) in:


Rel(F )(W )
 R el(F )(T )

*J 

. . .
. . .	J 

J. .s	J 
 F Y × FZ 


A distributive law
We now assume we have a functor F with associated relation lifting Rel(F ). Applying this relation lifting to the inhabitation relation ∈X ‹→ X × P(X) on a set X, yields a new relation Rel(F )(∈X) ‹→ F (X) × F (P(X)). By

transposition it gives a function:




F (P(X)) 	λX	 P (F (X))
u 	 {a ∈ F (X) | (a, u) ∈ Rel(F )(∈X )}


We check that we get a natural transformation λ: F P ⇒ PF , using some of the above special properties of relation lifting. For f : X → Y and u ∈ F (P(X)),


(λY ◦ F P(f ))(u) = {b ∈ F (Y ) | (b, F P(f )(u)) ∈ Rel(F )(∈Y )}
= {b | (b, u) ∈ (F (id) × F (P(f )))−1(Rel(F )(∈Y ))}

= {b | (b, u) ∈ Rel(F )((id × P(f ))−1(∈
))}

∗	 
= {b | (b, u) ∈ Rel(F )(	f ×id(∈X ))}
= {b | (b, u) ∈	F (f )×F (id)(Rel(F )(∈X ))}
= {F (f )(a) | (a, u) ∈ Rel(F )(∈X)}
= (PF (f ) ◦ λX )(u).





∗
The marked equation = holds because:



(id × P(f ))−1(∈ ) = {(y, v) | y ∈ P(f )(v)}
= {(y, v) | ∃x ∈ v. y = f (x)}
= {(f (x), v) | x ∈ v}
=  f ×id(∈X ).



It is well-known that the powerset functor P forms a monad with singleton map as unit η = {−} and union as multiplication µ =	.  This monad

structure is also preserved by the distributive law λ, as will be shown next. (λX ◦ F {−})(u)
= {a | (a, F ({−})(u)) ∈ Rel(F )(∈)}
= {a | (a, u) ∈ Rel(F )((id × {−})−1(∈))}
= {a | (a, u) ∈ Rel(F )(=X)}
= {a | (a, u) ∈ =F (X)}
= {u}.
(µF (X) ◦ P(λX) ◦ λP(X))(u)
=	{λ(a) | (a, u) ∈ Rel(F )(∈)}
= {b | ∃a. (b, a) ∈ Rel(F )(∈) ∧ (a, u) ∈ Rel(F )(∈)}
= {b | (b, u) ∈ Rel(F )(∈) ◦ Rel(F )(∈)}
= {b | (b, u) ∈ Rel(F )(∈◦∈)}

= {b | (b, u) ∈ Rel(F )((id × µ)−1
(∈))}

= {b | (b, u) ∈ (F (id) × F (µ))−1(Rel(F )(∈))}
= (λX ◦ F (µ))(u).

∗
The equation = holds because:
(x, z) ∈ (∈◦∈) ⇐⇒ ∃y. x ∈ y ∧ y ∈ z
⇐⇒ x ∈	z
⇐⇒ (x, z) ∈ (id × µ)−1(∈).
We propose to call the distributive law (4) the “power” law. The defin- ition (4) also makes sense for the non-empty powerset P∗, in the sense that λ: F P ⇒ PF restricts to λ∗: F P∗ ⇒ P∗F . It is well-defined, since:


 ∈J, 
F (∈)
   ¸
 R el(F )(∈)
   s

⟨e1, e2⟩
J 
   ⟨F (e1),F (e2)⟩ 
 

P (X) ¸,X ×P (X)
F (P (X)) ¸,F (X)
J  s 

∗	π2	∗
∗	π2
× F (P∗(X))

This says that for each u ∈ F P∗(X) there is an a ∈ F (X) with (a, u) ∈
Rel(F )(∈). Hence λ(u) ⊆ F (X) is non-empty.
Example 4.1 Let F be the deterministic automaton functor (−)A × B. The

associated distributive law λ: P(X)A × B ⇒ P(XA × B) is given
λX(f, b) = {(g, c) ∈ XA × B | c = b ∧ ∀a ∈ A. g(a) ∈ f (a)}.

As noted in [1], for the special case where B is the two element lattice {0, 1}
there is also a distributive law κ in the reverse direction, given by:

κX (U ) = ⟨λx ∈ A. {h(x) | ∃b. (h, b) ∈ U },  {b | ∃h. (h, b) ∈ U }⟩
It is easy to see that κ restricts to κ∗: P∗((−)A × B) ⇒ P∗(−)A × B. It has λ∗
as section:
(κ∗ ◦ λ∗)(f, b) = κ∗({(g, b) | ∀a. g(a) ∈ f (a)})
= ⟨λx ∈ A. {h(x) | ∀a. h(a) ∈ f (a)},	{b}⟩
= ⟨f, b⟩,	since each f (a) is non-empty.
For future use we note the following result.
Lemma 4.2 For n ∈ N deﬁne the natural transformation λn: FnP ⇒ PFn
by
n	idP(X)	if n =0 
X
λF n−1(X) ◦ F (λX  ) otherwise.
Then, for each n ∈ N we have a pullback square:
Rel(F )n(∈X )	 ∈F n(X)


Fn(X)
J 

Jn 


(X))

 F n(X)
J 
J  n(X))

× F (P
id × λn
× P(F


Proof By induction on n. The base case n = 0 is obvious. If n > 0, then by applying relation lifting Rel(F ) to the pullback square for n − 1 we get the square below.
Rel(F )n(∈X )	 R el(F )(∈F n−1 (X))


Fn(X)
J 

Jn 


(X))
J 
J 
 F n(X) × F (	n−1(X)))

× F (P
id × F (λn−1)
P(F


The next square is a pullback by definition of λ.
Rel(F )(∈F n−1 (X))	 ∈F n(X)

J 
J 
Fn(X) × F (P(Fn−1(X)))



id × λF n−1(X)

 F n(X)
J 

J 
× P(F (X))

Hence by putting these two squares side-by-side we get the required pullback. 

Coalgebras and Kleisli categories
In this section we assume we have a functor F : C → C,a monad T = (T, η, µ) on C, and a distributive law λ: FT ⇒ TF . The latter satisfies λ ◦ Fη = η and λ ◦ Fµ = µ ◦ Tλ ◦ λ. Later we shall concentrate on the special case where T is powerset P, but here it is clearer to use a general monad for clarity and abstraction. As an aside, the monad is not to be seen as a “term formation
monad” like in [7], but as a “computational monad”, as in [4].
We shall write CT for the Kleisli category associated with C. Its objects are the objects X ∈ C, and its morphisms X → Y are maps X → TY in C. The identity map X → X in CT is the unit ηX , and the composition in CT of f : X → Y and g: Y → Z is the map µZ ◦ Tg ◦ f . There is an obvious
inclusion functor J: C → CT given by X '→ X and f '→ η ◦ f . It has a right adjoint K: CT → C described by Y '→ TY and g '→ µ ◦ Tg.
The functor F : C → C can be lifted to a functor FT : CT → CT on the Kleisli category, by:
X '−→ FX	and	f '−→ λ ◦ Ff.
We now have the following situation,
CoAlg(F ) 	JT	 C oAlg(FT )


	K	
J 
J	 C T ¸_
F	FT

where JT is the obvious lifting of J.

The weakly final coalgebra of traces
In this section we return to the concrete situation where the monad T from the previous section is the powerset P. The resulting Kleisli category SetsP


is the category of sets with relations between them as morphisms. The main result of this section is a description of (the carrier of) a weakly final coalgebra in the category CoAlg(FP) as powerset of (the carrier of) the final coalgebra of F .
We assume that our functor F is polynomial, in the sense that it is built up from the identity functor X '→ X and constant functors X '→ A, using
products ×, coproducts + and exponents (−)A. Such functors are guaranteed
∼=
to have a final coalgebra, which we shall write as ζ:	.
Z → FZ 
An important starting point is the next technical lemma. It involves ele- ments u ∈	n∈N An in a countable product of sets An. For such an u we shall
	
Lemma 6.1 Assume we have countable collections (Xn)n∈N of sets with rela- tions (Rn ⊆ Xn+1 × Xn)n∈N between them. We form the sets of sequences,
V = {v ∈  n∈N Xn | ∀n ∈ N. (vn+1, vn) ∈ Rn}
The tuple of projection functions ⟨F (pn)⟩n∈N: F (	n∈N Xn) →	n∈N F (Xn)
then restricts to an isomorphism
F (V ) −=→ WF .
Proof By induction on the structure of F .
If F is the identity functor Id the result is obvious because V = WId.
If F is the constant functor A, then WA consists of the sequences w ∈
n∈N A with w0 = w1 = w2 = ·· ·, because (wn+1, wn) ∈ Rel(F )(Rn)= =A. Hence WA is isomorphic to A = F (V ).
If F = F1 × F2, then each w ∈ WF ×F has projections wn = (w1, w2) with
1	2	n	n
(w1	, w1) ∈ Rel(F1)(Rn)	and	(w2	, w2) ∈ Rel(F2)(Rn).
n+1	n	n+1	n
Hence w ∈ WF ×F corresponds to two sequences w1 ∈ WF and w2 ∈ WF . But by the induction hypothesis, these w1 and w2 correspond to elements in F1(V ) and F2(V ), and thus to a single element in F1(V ) × F2(V )= F (V ).
If F = F1 + F2, then each w ∈ WF1 +F2 has elements wn ∈ F1(Xn)+ F2(Xn). But:
(wn+1, wn) ∈ Rel(F )(Rn) = {(κ1a, κ1b) | (a, b) ∈ Rel(F1)(Rn)}
∪{(κ1a, κ1b) | (a, b) ∈ Rel(F1)(Rn)}.


As a result, we have either of the following two situations.
Each wn is of the form κ1zn, with the sequence z = (zn)n∈N ∈ WF1 . Such a z corresponds by the induction hypothesis to an element in F1(V ).
Each wn is of the form κ2zn with z ∈ WF2 corresponding to an element in
F2(V ).
Combining these two points yields the required isomorphism WF1+F2 ∼= F1(V )+ F2(V ).
If F = GA, then each w ∈ WGA consists of wn ∈ G(X)A consisting of wn(a) ∈ G(X), for each a ∈ A. Each sequence (wn(a))n∈N is then in WG, and thus corresponds to an element in G(V ). This yields a correspondence of w to an element in G(V )A = F (V ).


We use this result in our next step towards a weakly final coalgebra in the category CoAlg(FP). It uses a coalgebra X → P(F (X)), i.e. an object in the category CoAlg(FP)
Lemma 6.2 For a coalgebra α: X → P(F (X)) consider the induced relation
(id × α)−1(∈FX) in:
(id × α)−1(∈FX)	 ∈F X 

J	J 
J 		J 
FX × X	id × α	FX × PFX 

together with the repeated applications of relation lifting:


defn
Rn = Rel(F )
((id × α)−1
(∈FX ))
,˛	 F n+1(X) × Fn(X)

The set
U = {u ∈  n∈N Fn(X) | ∀n ∈ N. (un+1, un) ∈ Rn}
then carries a coalgebra structure given by a surjective function αU : U → F (U )
with

αU
U ¸¸
 F (U )

¸¸¸¸¸¸¸

p	¸¸¸¸
F (pn)

n+1
¸z˛J 
Fn+1(X)

Moreover, it gives rise to the unique map of F-coalgebra α: U → Z in:
F (U )	F (α)	 F (Z)

,,	,,
αU	∼= ζ
U	α	 Z 
Proof We apply the previous lemma with Xn = Fn(X), V = U and
WF = U− = {⟨un+1⟩n∈N ∈	n∈N F (Xn) | u ∈ U }
Hence U− contains the sequences u ∈ U with the first element u0 ∈ X removed. We then get our coalgebra αU : U → F (U ) using the isomorphism ϕ from the previous lemma:


αU =  U
⟨pi+1⟩i∈N U 	ϕ	 F (U ) 

Then clearly, F (pn) ◦ αU = F (pn) ◦ ϕ ◦ ⟨pi+1⟩i∈N = pn ◦ ⟨pi+1⟩i∈N = pn+1. 
Example 6.3 We shall illustrate the constructions so far for the functor F (X) = A × X, with a coalgebra α: X → P(A × X) describing a labelled transition system. The set U from the previous lemma then contains ele- ments u ∈   ∈N An × X with the following property. If un = (→−a, x), then
un+1 = (→−a · b, y), where (b, y) ∈ α(x). The latter is usually written as a

transition x −→b
y. Hence the set U contains the inﬁnite transition sequences,

toghether with their labels, like in Section 2. The above map α from U to the
ﬁnal F-coalgebra AN maps such a sequence of transitions to the sequence of labels involved.
Remark 6.4 An alternative way to understand the coalgebra map α: U → Z in Lemma 6.2 is as follows. Since F is a polynomial functor we know that it preserves limits of ω-chains, so that its ﬁnal coalgebra Z can be described simply as ω-limit, namely of the sequence

!	F (!)	2	F 2(!)
1 ←− F (1) ←− F (1) ←− ··· 
The associated projections πn: Z → Fn(1) satisfy Fn(!) ◦ πn+1 = πn. The ﬁnal

coalgebra ζ:
~
Z −→ F
(Z) satisﬁes F (πn
) ◦ ζ = πn+1.

A sequence u ∈ U consists of elements un ∈ Fn(X), which yield u' =
Fn(!)(un) ∈ Fn(1) forming a chain. The chain property requires that:
'  = Fn(!F (1))(u'	),



i.e. that
Fn(!X)(un) = Fn(!F (1))(Fn+1(!X)(u'	))

= Fn(!FX)(un+1).
The latter equation holds for the following reason. Obviously, the following diagram commutes.
(id × α)−1(∈FX)	 1 


J 
J 
FX × X	!	× !
J 
⟨id, id⟩
 1 J 

FX	X
Hence by repeatedly applying relation liﬁng and using that relation lifting pre- serves the equality relation 1 > 1 × 1 on the right, we get:
Rel(F )n((id × α)−1(∈FX))	 Re l(F )n(1) = Fn(1)

J 
J 
n+1	n


	 F n(1)
J 
⟨id, id⟩
J n

F	(X) × F
(X) Fn(!
) × Fn(! )
× F (1)

FX	X

This shows that Fn(!X)(un)= Fn(!FX)(un+1).
As a result we get an element u ∈ Z in the ﬁnal coalgebra satisfying
πn(u)= Fn(!X )(un). This is α(u) as in Lemma 6.2, since:
πn ◦ α = Fn(!X) ◦ pn.
This is easily checked by induction.
We are now in a position to state and prove the main result of this paper.
Theorem 6.5 Let F be a polynomial functor.
The functor JP: CoAlg(F ) → CoAlg(FP) from (5) turns a ﬁnal F-
coalgebra ζ: Z −=→ FZ into a weakly ﬁnal FP-coalgebra.
Concretely, this means that for each coalgebra α: X → P(F (X)) there
is a “trace” map l: X → P(Z) making the following diagram commute.
PF X  PFl P F PZ   Pλ  P 2FZ 	µ	 P F Z

α X
That is, for each x ∈ X,
∼= Pζ
l	 P Z

{ζ(z) | z ∈ l(x)} =  {λ(F (l)(y)) | y ∈ α(x)}.


There is a canonical choice for this coalgebra map l, namely the largest one:

l(x) = {α(u) | u ∈ U and u0 = x}

where U and α are as deﬁned in Lemma 6.2.


Proof The canonical description of l means:


(z, x) ∈ (id × l)−1(∈Z) ⇐⇒ z ∈ l(x)
⇐⇒ ∃u ∈ U. z = α(u) and p0(u)= x
⇐⇒ (z, x) ∈  α×id⟨idU , p0⟩.


This can also be expressed in a diagram:

U 	 (i d  × l)−1(∈Z)	 ∈Z 

J	J	J 
⟨id, p0⟩
J	J	J 
U × X	α × id	 Z × X	id × l	 Z × P(Z)

Since relation lifting preserves direct and inverse images it yields:


Rel(F )(U )= F (U )	 R el(F )((id × l)−1(∈Z))	 R el(F )(∈Z)

J 
⟨id,F (p0)⟩
J 
F (U ) × F (X)


F (α) × id
J 
 F (Z) J  X)


id × F (l)

 F (Z)
J 
J 
× F (P(Z))


We use the last diagram in the step marked by (∗) below in a derivation



of (8).


a ∈	{λ(F (l)(y)) | y ∈ α(x)}
⇐⇒ ∃y ∈ α(x).a ∈ λ(F (l)(y))
⇐⇒ ∃y ∈ α(x). (a, F (l)(y)) ∈ Rel(F )(∈Z)
⇐⇒ ∃y ∈ α(x). (a, y) ∈ (id × F (l))−1Rel(F )(∈Z)
(∗)
⇐⇒ ∃y ∈ α(x). (a, y) ∈	F (α)×id Rel(F )(⟨id,F (p0)⟩)

⇐⇒ ∃y ∈ α(x). ∃b ∈ F (U ).F (α)(b)= a and F (p0)(b)= y
(6)
⇐⇒ ∃y ∈ α(x). ∃u ∈ U. F (α)(αU (u)) = a and F (p0)(αU (u)) = y
⇐⇒ ∃y ∈ α(x). ∃u ∈ U. ζ(α(u)) = a and p1(u)= y
(∗∗)
⇐⇒ ∃u ∈ U. ζ(α(u)) = a and p0(u)= x
⇐⇒ ∃z ∈ l(x).ζ(z)= a
⇐⇒ a ∈ {ζ(z) | z ∈ l(x)}.

The step marked with (∗∗) is justified because α(u), and thus also α(u), does not depend on u0, see (6).
We still have to prove the second point of the theorem, namely that l is the largest coalgebra map. Suppose k: X → P(Z) also satisfies (8), i.e. for all x ∈ X,
{ζ(z) | z ∈ k(x)} =  {λ(F (k)(y)) | y ∈ α(x)}.
We first massage this equation into an equation between relations, so that we can apply relation lifting to both sides. The left-hand-side (LHS) is in fact the relation on F (Z) × X given by

LHS = {(w, x) ∈ F (Z) × X | ∃z ∈ Z. w = ζ(z) ∧ z ∈ k(x)}
=  ζ×id(id × k)	(∈Z), as in the diagram:

LHS ¸,	 •J 
 ∈Z 
J 



J ¸,	
J 	  J 

FZ × X
ζ × id
Z × X
id × k
Z × P(Z)

Hence
Rel(F )n(LHS) =	n	(id × Fn(k))−1Rel(F )n(∈Z)
−1	n −1
=	F n(ζ)×id(id × Fn(k))	(id × λ )	(∈F nZ )
by Lemma 4.2
−1
=	F n(ζ)×id(id × kn)	(∈F nZ )
= {(Fn(ζ)(v), w) | v ∈ kn(w)},

where we have abbreviated kn = λn ◦ Fn(k): FnX → P(FnZ), with λn as defined in Lemma 4.2.
The right-hand-side (RHS) is more complicated. It can be described as:


RHS ¸¸,,	 •J 
 • ¸ ¸,,	 •
 ∈F X 

J 

J  ¸,  ∈
J 

J 	   J  ¸, 
J	J 
J 		J 

FZ × X
FZ ×X
PFZ × X 1
FX × X
FX × PFX 

e1 × id
e2 × id
k  × id
id × α


where ∈FZ is written as relation ⟨e1, e2⟩: ∈FZ> FZ × PFZ. We now use Lemma 3.1 and write ⟨p1, p2⟩: Rel(F )n(∈FZ) > Fn+1Z × FnPFZ, so that we get an inclusion:

Rel(F )n(RHS) ⊆  p ×id(p2 × id)−1  F n(k1)×id (Rn)
where Rn = Rel(F )n((id × α)−1(∈FX ))
= {(v, w) | ∃a ∈ Rel(F )n(∈FZ). p1(a)= v ∧
(p2(a), w) ∈	F n(k1)×id (Rn)}
= {(v, w) | ∃b ∈ FnPFZ. v ∈ λn(b) ∧
(b, w) ∈	F n(k1)×id (Rn)}	by Lemma 4.2
= {(v, w) | ∃b ∈ FnPFZ. v ∈ λn(b) ∧
∃y ∈ Fn+1X. b = Fn(k1)(y) ∧ (y, w) ∈ Rn}
= {(v, w) | ∃y ∈ Fn+1X. v ∈ kn+1(y) ∧ (y, w) ∈ Rn}.

Once we know these facts about Rel(F )n(LHS) and Rel(F )n(RHS) we can start to show that k is included in l. Assume therefore that z ∈ k(x0). Our aim is to prove that z ∈ l(x0) by showing that there is a sequence u = (x0, x1, x2,.. .) ∈ U with α(u)= z.
We proceed step by step. We shall use the abbreviation ζn: Z −=→ FnZ


for:
ζn =	id	if n =0 
Fn−1(ζ) ◦ ζn−1 otherwise.
z ∈ k(x0) yields (ζ(z), x0) ∈ LHS = RHS. Hence there is an x1 ∈ F (X) with ζ(z) ∈ k1(x1) and (x1, x0) ∈ R0.
ζ(z)= ζ1(z) ∈ k1(x1) yields (ζ2(z), x1) ∈ Rel(F )(LHS) = Rel(F )(RHS). Hence there is an x2 ∈ F 2(X) with ζ2(z) ∈ k2(x2) and (x2, x1) ∈ R1.
··· 
In this way we obtain a sequence u = (x0, x1, x2,.. .) ∈ U with ζn(z) ∈ kn(xn). The latter amounts to (ζn(z),Fn(k)(xn)) ∈ Rel(F )n(∈Z), using Lemma 4.2. But then, like in Remark 6.4,
Fn(!Z)(ζn(z)) = Fn(!PZ)(Fn(k)(xn)).

The right-hand-side of this equation is clearly equal to F n(!X )(xn). And the left-hand-side is equal to πnz, since it is not hard to check that F n(!Z) ◦ ζn = πn. This shows, as noted in Remark 6.4, that z = α(u).	 

Conclusions
We have shown how non-trivial use of relation lifting leads to a general for- mulation of traces for coalgebras X → P(FX), and to a weak finality result. Suitable relational reasoning for establishing trace inclusion or equality is left to future work.
Acknowledgments
The counterexample to uniqueness in Section 2 came up in discussion with Jesse Hughes.

References
F.	Bartels.	On	generalised coinduction and probabilistic speciﬁcation formats. Distributive laws in coalgebraic modelling. PhD thesis, Free Univ. Amsterdam, 2004. http://homepages.cwi.nl/~bartels/ .
B. Bloom, S. Istrail, and A.R. Meyer. Bisimulation can’t be traced. Journ. ACM, 42(1):232–268, 1988.
B. Jacobs. Exercises in coalgebraic specification. In R. Crole R. Backhouse and J. Gibbons, editors, Algebraic and Coalgebraic Methods in the Mathematics of Program Construction, number 2297 in Lect. Notes Comp. Sci., pages 237–280. Springer, Berlin, 2002.
E. Moggi. Notions of computation and monads. Inf. & Comp., 93(1):55–92, 1991.


J. Power and D. Turi. A coalgebraic foundation for linear time semantics. In M. Hofmann D. Pavlovi´c and G. Rosolini, editors, Category Theory and Computer Science 1999, number 29 in Elect. Notes in Theor. Comp. Sci. Elsevier, Amsterdam, 1999. www.elsevier.nl/locate/entcs/volume29.html.
J. Rutten. Universal coalgebra: a theory of systems. Theor. Comp. Sci., 249:3–80, 2000.
D. Turi and G. Plotkin. Towards a mathematical operational semantics. In Logic in Computer Science, pages 280–291. IEEE, Computer Science Press, 1997.
