

Electronic Notes in Theoretical Computer Science 251 (2009) 5–16
www.elsevier.com/locate/entcs
Regularity in PDA Games Revisited
Va´clav Broˇzek
ITI FI, Masaryk University Botanick´a 68a, 602 00 Brno Brno, Czech Republic

Abstract
We study the regularity of sets of winning configurations (winning regions) in countable-state stochastic games played on transition graphs of pushdown automata (PDA games) with reachability objectives. Our main result is proving the regularity of winning regions for qualitative reachability objectives. This completes the classification partially given in a previous paper on this topic. We also improve the upper bounds on the
regular representation in cases already solved. We further mention a problem which has also been studied recently: determining the value of a reachability game. Using our methods we prove the regularity of the set of configurations with value 1 and 0.
Keywords: Stochastic games, pushdown automata, reachability, regularity, model-checking.


Introduction
Stochastic games are discrete transition systems in which three kinds of states occur: stochastic, controllable and adversarial. The transitions of such a system are chosen either randomly according to a prescribed probability distribution, or according to a strategy of Player  representing the controller, or according to a strategy of Player  representing the environment, depending on whether the state is stochas- tic, controllable or adversarial, respectively. Although these games are well defined on countable transition graphs, from computational point of view only finite games were studied until recently, see e.g. [5]. The need for verification and modeling of systems involving recursion gave rise to stochastic games on (infinite) transition graphs of pushdown automata, or PDA games in short.
A pushdown automaton is a finite automaton equipped with an unbounded stack. The transitions are chosen according to the current control state as well as to the symbol on the top of the stack. The configurations are pairs of a control

1 Email: 99081@mail.muni.cz
2 The author was partially supported by the project GD102/09/H042 of the Czech Science Foundation.

1571-0661© 2009 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2009.08.024

state and the content of the stack. They can be also viewed as finite words over the alphabet consisting of the control states and the stack symbols. Important from the computational view are regular sets of configurations, i.e. those representable by a finite automaton. Several subclasses of PDA games were studied, in particular games without one of the players (Markov Decision Processes, MDP) and games over transition graphs of stateless pushdown automata (BPA games).
Basic model checking problems studied in stochastic games are associated with the reachability and safety objectives. These objectives are given as a pair (R, DQ), where R is a regular set of vertices, D ∈ {>, ≥} and 0 ≤ Q ≤ 1 is a rational constant. For Q ∈ {0, 1} we call the objective qualitative. If every configuration in R has an empty stack, we speak about a termination objective. We say that Player  wins in some initial vertex v if he has a strategy such that for every strategy of Player the probability of reaching R is DQ. On the other hand, Player wins if he has a strategy such that for every strategy of Player  the probability of reaching R is not DQ. Thus, Player  represents reachability, whereas Player  represents safety.





Known results
In [7,8] an algorithm for BPA games and qualitative termination objectives was given to decide for a given configuration whether one of the players wins. The algorithm runs in NP∩co-NP, and moreover in polynomial time if there is at most one player. An easy consequence of this result is that the winning sets are regular again, as showed in [4].
As an extension from the termination objective to general reachability, it is shown in [2,3] that deterministic finite automata accepting the sets of winning con- figurations for each of the players can be computed by a deterministic polynomial time Turing machine with a NP∩co-NP oracle. Moreover for the case of MDP, i.e. if one of the players is not present, the automata can be constructed in deterministic polynomial time (without oracles). It is also shown in [3] that every finitely branch- ing game, i.e. game where every vertex has only finitely many outgoing edges, is determined. This means that in every vertex exactly one of the players wins. Note that PDA games are finitely branching.
Since for qualitative objectives the sets of winning configurations happen to be regular for subclasses of PDA games where the decidability of winning was already proved, the question of their regularity for the whole class of PDA games becomes interesting on its own. In [4] regularity was shown for qualitative reachability objec- tives and PDA games with at most one player, and for quantitative and qualitative termination objectives for BPA games. An upper bound on the size of the respective finite automata was given, although the presented proof of regularity was not con- structive. For quantitative reachability and already for BPA games with no player examples of non-regular winning sets are known [4]. The question of regularity for qualitative reachability and PDA games was left open.

Our contribution
We extend and improve the methods from [4] and prove the regularity of the sets of winning configurations for qualitative reachability and PDA games. We not only managed to answer the open question from [4] but also improved the upper bounds on the size of the representation of the regular sets of winning configurations in cases already solved.
In addition, we take another model checking problem into account: determining the value of a game. A value wrt. some reachability objective is the supremum over all strategies of Player  of the infima over all strategies of Player  of probability of reaching the desired set. This is a standard game-theoretic notion studied e.g. in [7,8]. There are PDA games even without Player where the set of configurations where Player wins with the objective (R, ≥ 1) is a strict subset of the set of configurations with value 1. In [7] was shown that already for PDA games with one player determining whether a configuration has value 1 is undecidable. However, we prove that the set of configurations with value 1 is regular even for PDA games.

Definitions
For every set A we denote A∗ the set of all finite sequences of elements of A (words over A). We denote ε the empty sequence and A+ := A∗ z{ε}. For every two sets A, B we denote AB := {ab | a ∈ A, b ∈ B} the set of concatenations of elements from A and B. We call a binary relation R ⊆ A× B total if for all a ∈ A there is a b ∈ B such that (a, b) ∈ R. By the abbreviation DFA we denote the deterministic finite state automaton, see also [10] for definition. Given a word w = w(0)w(1) ··· w(n) we denote wR = w(n) ··· w(1)w(0) its reverse.

Stochastic Games
A stochastic game is a tuple G = (V, (V , V , V⃝), →, Prob) where V is a countable set of vertices, V⃝, V , V is a partition of V , → ⊆ V × V is a total transition relation, and Prob assigns to every transition u →v where u ∈ V⃝ a positive rational

number x, written u →x v, such that Σ
u→x v
x = 1 for all u ∈ V⃝.

A strategy of Player  is a function σ assigning to every finite sequence wu
with w ∈ V ∗, u ∈ V and every transition u →v a non-negative real number such that  u→v σ(wu, u →v) = 1. The set of all strategies of Player  is denoted Σ. Similarly we define the set Π of strategies of Player  .
Choosing an initial vertex s ∈ V and a pair of strategies (σ, π) ∈ Σ × Π we get a discrete Markov chain G(σ, π) with states V + and transitions '→ along with their probabilities given as wu →x wuv for every w ∈ V ∗, u, v ∈ V and u →v iff
u ∈ V⃝ and u →x v,
or u ∈ V  and σ(wu, u →v) = x,
or u ∈ V  and π(wu, u →v) = x.
We call a (finite or infinite) sequence of states w = w1w2 ... satisfying wi '→ wi+1

for all i ≥ 0 a path. An infinite path is a run. For every finite path w = w1 ··· wn we denote Run(w) the set of all runs starting with w. On Run(s) we define a probabilistic space: The set of events is the the least set closed on complement and countable union (i.e.  σ-algebra) containing all Run(w) where w starts with
s. There is a unique probability measure (see [11]) Pσ,π such that for every path
w = s →x1 w '→x2 ··· →xn w  we have Pσ,π(Run(w)) =  n	x . For every set R ⊆ V we
call Reach(R) the set of all runs visiting R. Observe that Reach(R) is a countable union of sets Run(w) for suitable paths w, thus it is an event.

PDA Games
To generate a graph for a stochastic game a pushdown automaton (PDA) has to be enhanced with a partition of the configurations into stochastic, controllable and adversarial ones, and probability weights for transitions leaving stochastic config- urations. We call this enhanced model still a PDA and define it to be a tuple Δ = (Q, Γ, (H , H , H⃝), ‹→ , ProbΔ) where
Q is a finite set of control states;
Γ is a finite stack alphabet ; every finite word pα where p ∈ Q and α ∈ Γ∗ is called a conﬁguration;
H , H , H⃝ is a partition of the set H := QΓ of heads;
a total relation ‹→ ⊆ H × (QΓ≤2), where Γ≤2 are all words over Γ of length ≤ 2, is the set of transition rules; and
ProbΔ assigns to every rule pX ‹→ qα where pX ∈ H⃝ a positive rational number

x, written pX ‹→x
qα, such that Σ

x
pX‹→qα
x = 1 for all pX ∈ H⃝.

Along with Δ we implicitly get the stochastic game GΔ = (QΓ∗, (H⃝Γ∗ ∪ Q{ε}, H Γ∗, H Γ∗), →, Prob) represented by Δ by defining → along with Prob as follows. For every p ∈ Q, X ∈ Γ and α ∈ Γ∗:

pXα →qβα iff pX ‹→ qβ; if pX ∈ H⃝ then pXα →x qβα iff pX ‹→x
qβ;

pε →1 pε.
The following definition introduces a handy notation for the strategies in games generated by PDA.
Definition 2.1 Let σ be a strategy of one of the players and α ∈ Γ∗ a word over the stack alphabet.  Then σ[−α] is the strategy defined for every history w = p1γ1 ··· pnγn pγ, where piγi, pγ ∈ QΓ+, ending with a configuration pγ of the respective player, and for every edge pγ →qβ by σ[−α](w)(pγ →qβ) = σ(p1γ1α ··· pnγnα pγα)(pγα→qβα).  By σ[+α] we denote an arbitrary strategy τ satisfying τ [−α] = σ.

Objectives
A (reachability) objective is a pair (R, DQ) where R ⊆ QΓ∗ is a regular set, D ∈ {>
, ≥} and 0 ≤ Q ≤ 1 is a rational number. If Q ∈ {0, 1} the objective is qualitative.

If R ⊆ Q{ε} we speak about a termination objective. In a given configuration pα we say that Player  wins wrt. (R, DQ) iff there is a σ ∈ Σ such that for all π ∈ Π: Pσ,π(Reach(R)) D Q. The strategy σ is then called (R, DQ)-winning. On the other hand, Player  wins iff there is a π ∈ Π such that for no σ ∈ Σ:
Pσ,π(Reach(R)) D Q. We denote [R]Qę and [R]Øę the set of all configurations where
pα
Player  , or Player  wins, respectively. We also call these sets the winning regions
of the respective players. Given just the set R ⊆ QΓ∗ the following equality is true, allowing us to define the value of a given configuration pα:
val (pα) := inf sup Pσ,π(Reach(R)) = sup inf Pσ,π(Reach(R))
π∈Π σ∈Σ  pα	σ∈Σ π∈Π  pα
This is due to a famous result of D. Martin [12], but it can be solved more easily for this special case, see [3].
PDA Games and Qualitative Reachability
In this section we prove that both [R]Qę and [R]Øę are regular whenever (R, DQ) is
a qualitative objective. We start with a determinacy result from [3] with an easy corollary:
Theorem 3.1 ([3]) For every objective (R, DQ): [R]Øę = QΓ∗ z [R]Qę.
Corollary 3.2 If [R]Qę is regular then [R]Øę is regular and the number of states of
the minimal DFA for [R]Qę and [R]Øę are the same.
Using standard techniques of encoding a finite automaton into the stack alphabet and transition rules, see e.g. [1, Section 4.5], we can prove for all PDA Δ, D ∈ {≥, >} and a rational 0 ≤ Q ≤ 1 that if [R]Qę is regular for all R ⊆ Q{ε} then [R]Qę is
regular for all regular R. In other words, it is enough to prove the regularity of [R]Qę for termination objectives.
Proposition 3.3 For every PDA Δ and objective (R, DQ) there is a PDA Δ', a termination objective (S, DQ), a homomorphism μ and a regular language L such that [R]Qę = μ([S]Qę ∩ L).
Proof. Let us start with a technical assumption that the regular set R is repre- sented by a DFA A = (A, δ, a0,F ) recognizing the reverse of the language R{⊥}. For fresh symbols qe and ⊥ we set Q' := Q∪{qe}, Γ' := Γ∪{⊥}. We define μ : (Q∪(Γ' × A))∗ → Γ∗ by extending μ(p) = p, p ∈ Q, μ((X, a)) = X, X ∈ Γ and μ((⊥, a)) = ε
to a homomorphism. We set Δ' = (Q', Γ' × A, (H' , H' , H' ), ‹→ ', ProbΔ' ) where
⃝
‹→ ' is the least set satisfying for all p, q ∈ Q, (X, a) ∈ Γ' × A, Y, Z ∈ Γ, b ∈ A:
If δ(a, Xp) ∈ F then p(X, a) ‹→ 'qeε, else
if pX ‹→ qε then p(X, a) ‹→ 'qε,
if pX ‹→ qY then p(X, a) ‹→ 'q(Y, a),
if pX ‹→ qY Z and δ(a, Z) = b then p(X, a) ‹→ 'q(Y, b)(Z, a),

always qe(X, a) ‹→ 'qeε,
if δ(a, ⊥p) ∈/ F then p(⊥, a) ‹→ 'p(⊥, a).

We set H'
= μ−1(H ), H'
= μ−1(H ) and H'
= μ−1(H⃝) ∪ {qe}Γ' ∪ Q{⊥}. For

any p(X, a) ∈ H' , q ∈ Q, b ∈ A, Y, Z ∈ Γ we define ProbΔ' as follows:
If p(X, a) ‹→ 'qeε is a rule then p(X, a) ‹→1 'qeε,

p(X, a) ‹→x
'qε if pX ‹→x
qε,

p(X, a) ‹→x
'q(Y, a) if pX ‹→x
qY ,

p(X, a) ‹→x
qe(X, a) ‹→1
'q(Y, b)(Z, a) if p(X, a) ‹→ 'q(Y, b)(Z, a) and pX ‹→x
'qeε,
qY Z,

if p(⊥, a) ‹→ 'p(⊥, a) is a rule then p(⊥, a) ‹→1 'p(⊥, a).
We call a string α ∈ (Γ' × A)∗ consistent if α = α(1) ··· α(n) where α(i) = (Xi, bi) for 1 ≤ i ≤ n, Xn = ⊥, bn = a0 and δ(bi+1, Xi+1) = bi for all 1 ≤ i < n. Eventually we set L = {qα | q ∈ Q, α consistent}. Clearly L is regular. When starting in consistent configurations, the second component of the stack alphabet is always the state of the DFA A in which A would be if reading the stack bottom-up except for the top-most symbol and the control state. Thus Δ' gets into qeε iff the DFA A would accept a configuration visited in some previous step of the computation. Now it can be easily seen that for S := {qeε | a ∈ A} the lemma is true.	 
Thus we fix a PDA Δ = (Q, Γ, (H , H  , H⃝), ‹→ , ProbΔ) and a termination
objective (R, DQ) for the rest of the text.  Further observe that [R]>1 = ∅ and
[R]≥0 = QΓ∗ thus we may restrict our attention to the objectives (R, >0) and
(R, ≥1). The next lemma is a useful tool for treating the former objective. We consider the PDA Δ and construct two PDA
Δr = (Q, Γ, (∅, H , H⃝ ∪ H ), ‹→ , Probr)
Δn = (Q, Γ, (H⃝ ∪ H , H , ∅), ‹→ , ∅)
where Probr extends to rules beginning in H by assigning a uniform probability to all rules starting in every fixed pX ∈ H . (The r and n in subscript stand for “r andom” and “nondeterministic”.)

Lemma 3.4 The sets [R]>0 (and thus also [R]≯0) are the same in Δ, Δ

r
and Δn.

Proof. Observe that Δr is in fact Δ with a fixed strategy of Player  choosing always the uniform distribution. Thus whenever Player  wins in Δr, he wins in Δ. On the other hand, let σ ∈ Σ such that for all π ∈ Π: Pσ,π(Reach(R)) > 0 in Δ. Then for every π ∈ Π there is a finite path in GΔ(σ, π) from pα to R with positive probability. It is easy to see that this path has also positive probability when π is applied to Δr. Since this is true for every π, we proved the part regarding Δ and Δr. To prove the rest, just use the above proof and substitute Δn for Δ.	 
In the results below we will give some bounds on the representation of a regular language. A usual bound is the size of the minimal DFA recognizing such a lan-

guage. However, this can be reformulated to measuring the index of the syntactic congruence. For a fixed language L the (right) syntactic congruence ∼ is a relation on words defined by u ∼ v iff uq ∈ L ⇐⇒ vq ∈ L for all words q. The index of
~ is the cardinality of the set of words factorized by ∼. Whenever there is some homomorphism ϕ from the free monoid of words to some monoid (M, •) such that L = ϕ−1(N ) for some N ⊆ M then ker ϕ is a subset of ∼. In particular, L is regular
iff the index of ∼ is finite, and, for a regular L, classes of ker ϕ correspond to states of some DFA accepting L, and vice versa. Thus the index of ∼ is equal to the size of the minimal DFA.

Theorem 3.5 Consider a PDA Δ and denote n = |Q|. The set [R]>0 is regular and the size of the minimal DFA for it is bounded from above by 2 + n · 2n·2n . Moreover, if H = ∅ then the bound is polynomial in the size of Δ.
The set [R]≥1 is regular and the size of the minimal DFA for it is bounded from
above by 2+ n · 2n·(2n−1). Moreover, if H  = ∅ then the bound is 2+ n · 2n·n.

Proof. We begin with the objective (R, >0). The case for H  = ∅ reduces due to Lemma 3.4 to the model checking for nondeterministic pushdown systems, just consider Δn instead of Δ. The bound we give here follows from [6, Theorem 3.2].
For the general case we use Lemma 3.4, consider Δr instead of Δ and thus assume without loss of generality that H = ∅. We will prove the regularity by mapping the stack content, i.e. words over Γ, to a finite monoid M and describe
the winning region [R]≯0 as a union of concatenations of one-letter sets with inverse
images of a subsets of M, proving its regularity.  The regularity and bounds on
representation of [R]>0 will then follow immediately from Corollary 3.2. We start with defining the map ψ from words over the Γ, then we describe the monoid M where this map points to, prove that ψ is a homomorphism and finally we describe
the winning region [R]≯0 in terms of ψ and M.
The contents of the stack acts in some sense as a transformation of sets of states: to some given subset P ⊆ Q of states, a word α ∈ Γ∗ written on the stack, and a fixed strategy π ∈ Π, we can assign a set S(P, α, π) ⊆ Q of exactly those states, which are visited after erasing the stack from some pα, p ∈ P . Formally, S(P, α, π) := {s ∈ Q | ∃p ∈ P : Pπ (Reach({sε})) > 0}. We now define ψ(α) to be
the map P '→ {S(P, α, π) | π ∈ Π}.
Until now we only defined a map ψ from Γ∗ to the set M of all functions of the type 2Q → 22Q . We now add a monoid operation • to it and show afterward that ψ is actually a homomorphism from the free monoid Γ∗ to M = (M, •). Intuitively, the operation • reminds of the (reversed) composition of functions. But since the set 2Q and 22Q differ, • cannot be exactly the composition operation. Formally it is defined as
(f • g)(S) = {T | ∃U ∈ f (S),T ∈ g(U )}

We also define a special element ι ∈ M by setting ι(S) = {S}. The operation • is

associative
(f • (g • h))(S) = {W | ∃U ∈ f (S),W ∈ (g • h)(U )}
= {W | ∃U ∈ f (S),W ∈ {X | ∃T ∈ g(U ),X ∈ h(T )}}
= {W | ∃U ∈ f (S), ∃T ∈ g(U ),W ∈ h(T )}
= {W | ∃T ∈ {X | ∃U ∈ f (S),X ∈ g(U )},W ∈ h(T )}
= {W | ∃T ∈ (f • g)(S),W ∈ h(T )}
= ((f • g) • h)(S)
and ι is neutral

(f • ι)(S) = {T | ∃U ∈ f (S),T ∈ ι(U )} = f (S)
= {T | ∃U ∈ ι(S),T ∈ f (U )} = (ι • f )(S).

Thus (M, •, ι) is a monoid.
It remains to prove that ψ is a homomorphism. Clearly ψ(ε) = ι. Now suppose
α, β ∈ Γ+. Fix some P ⊆ Q. We have to prove that ψ(α) • ψ(β) = ψ(αβ).
If S ∈ ψ(αβ)(P ) then there is a strategy π such that t ∈ S = S(P, αβ, π) iff tε is reachable from some pαβ, p ∈ P under π with nonzero probability. We use the notation from Definition 2.1 and consider the strategy π[−β]. Denote U the set of all states r ∈ Q such that rε is reachable from some pα, p ∈ P under π[−β] with nonzero probability. Now π induces some strategy τ for which S is the set of all q ∈ Q such that qε is reachable from some rβ, r ∈ U under τ with nonzero probability. Indeed, τ copy the moves of π after reaching Q{β} from some pαβ, p ∈ P . We have proved U ∈ ψ(α)(P ), S ∈ ψ(β)(U ), and thus S ∈ (ψ(α) • ψ(β))(P ). Let now S ∈ (ψ(α) • ψ(β))(P ). Thus there is some set U such that U ∈ ψ(α)(P ) and S ∈ ψ(β)(U ) with strategies π, π' such that U = S(P, α, π) and S = S(U, β, π'). From π, π' we define a new strategy τ such that S = S(P, αβ, τ ). Until the run visits a configuration with just β on the stack for the first time, τ behaves like
π[+β]. Then it behaves like π'.
Observe that for every α ∈ Γ∗ the map ψ(α) is defined uniquely by its images on singletons, because ψ(α)(P1 ∪ P2) = ψ(α)(P1) ∪ ψ(α)(P2) for all P1, P2 ⊆ Q. Since there are only 2n·2n maps of the type Q → 22Q , we have that |ψ(Γ∗)|≤ 2n·2n .
Finally, note that setting RQ := {q ∈ Q | qε ∈ R} and Wq := {f ∈ M | ∃S ∈

f ({q}), RQ
∩ S = ∅} for every q ∈ Q we have that [R]≯0 = 

q∈Q
({q}· ψ−1(Wq)).

The bound on the index of the syntactic congruence of [R]≯0 and thus also of [R]>0
 
follows from the fact that the equivalence relation ≈ given by
ε ≈ ε,
u ≈ v whenever u, v ∈/ QΓ∗ ∪ {ε}, and
pα ≈ qβ iff p = q ∈ Q and ψ(α) = ψ(β)
is a subset of the syntactic congruence of [R]≯0.
Now we prove the part for the objective (R, ≥1). The outline of the proof is very

similar, we give a map ϕ : Γ∗ → M , prove it to be a homomorphism of monoids, bound the cardinality of its image, and express [R]≥1 in terms of reverse images of ϕ, one-letter concatenation, and finite union. The only difference is that the function ϕ will be more complicated than ψ, and that we have to deal with game PDA instead of only MDP PDA.
We start defining the function ϕ. We set ϕ(ε) = ι, and for α ∈ Γ+, P ⊆ Q
⎧⎨ {∅}	if P{α} ¢ [Q{ε}]≥1
ϕ(α)(S) = 
⎩ {T (P, α, σ) | σ ∈ Σ,σ is (Q{ε}, ≥1)-winning}	otherwise

where T (P, α, σ) is the set of all states where the play in which Player  plays σ
may visit ε when starting from pα for some p ∈ P . Formally T (P, α, σ) = {t ∈ Q |
∃π ∈ Π, ∃p ∈ P : Pσ,π(Reach(ε)) > 0}. Note that ∅∈ ϕ(α)(P ) iff {∅} = ϕ(α)(P ) iff
P{α} ¢ [Q{ε}]≥1 or P = ∅.
To prove that ϕ is a homomorphism from Γ∗ with concatenation to M we only have to prove for every α, β ∈ Γ+ and p ⊆ Q that ϕ(αβ)(P ) = (ϕ(α) • ϕ(β))(P ) by showing both inclusions. Since for P = ∅ the equality is easy to prove, we only consider P /= ∅.
“⊇”:  If K ∈ (ϕ(α) • ϕ(β))(P ) then there is some L ∈ ϕ(α)(P ) such that
K ∈ ϕ(β)(L). If K = ∅ then either L = ∅ and P{α} ¢ [Q{ε}]≥1, or L /= ∅ and
L{β} ¢ [Q{ε}]≥1. In both cases P{αβ} ¢ [Q{ε}]≥1, thus ϕ(αβ)(P ) = {∅}. If K /=

 
∅ then L /= ∅ and there are strategies σ ,σ 
 
∈ Σ such that Pσ1,π (Reach(L{ε})) = 1 

1	2	pα
and Pσ2,π (Reach(K{ε})) = 1 for all π ∈ Π, p ∈ P and l ∈ L. We define a strategy σ as follows: σ plays as σ1[+β] until β is reached on the stack and then it plays like σ2 (ignoring the previous history of the play). Clearly Pσ,π (Reach(K{ε})) = 1 for all π ∈ Π and p ∈ P . Moreover for every l ∈ L there is a p ∈ P and π1 ∈ Π
such that Pσ1,π1 (Reach({lε})) > 0 and for every k ∈ K there is a l ∈ L and π2 ∈ Π
such that Pσ2,π2 (Reach({kε})) > 0, thus for every k ∈ K there is a p ∈ P and a π ∈ Π, composed from π1, π2 in the same way as σ from σ1, σ2, such that Pσ,π (Reach({kε})) > 0. Thus K ∈ ϕ(αβ)(P ).
“⊆”: Let K ∈ ϕ(αβ)(P ). If K = ∅ then P{αβ} ¢ [Q{ε}]≥1. But then either P{α} ¢ [Q{ε}]≥1 and thus ϕ(α)(P ) = {∅}, or whenever there is some ∅ /= L ∈ ϕ(α)(P ) then L{β} ¢ [Q{ε}]≥1 and thus ϕ(β)(L) = {∅}. In both cases ∅∈ (ϕ(α) • ϕ(β))(P ). Now let ∅ /= K = T (P, αβ, σ) for some (Q{ε}, ≥1)-winning σ ∈ Σ. We denote L := T (P, α, σ[−β]). Observe that L /= ∅ since σ[−β] is (Q{ε}, ≥1)-winning. For every l ∈ L and some suitable p ∈ P let wl be an arbitrary path from pαβ to lβ under σ with positive probability. Denote σ¯ the strategy derived from σ by
“forgetting” the history wl, i.e.  σ¯(lβ u) = σ(wlu) for all histories lβ u, l ∈ L.
Clearly Pσ¯,π(Reach(K{ε})) = 1 for every π ∈ Π. Moreover since for every k ∈ K there is some π ∈ Π and p ∈ P such that Pσ,π (Reach({kε})) > 0 then there must be also some l ∈ L such that Pσ,π(Reach({kε})) > 0. Thus K ∈ ϕ(β)(L) and hence
K ∈ (ϕ(α) • ϕ(β))(P ).
We again set RQ := {q ∈ Q | qε ∈ R} and further Uq := {f ∈ M | ∃L ∈ f ({q}) : 

∅ /= L ⊆ R } for all q ∈ Q. We have that [R]≥1 =	({q}· ϕ−1(U )).
Observe that similarly to the case of the function ψ, for every α ∈ Γ∗ and P ⊆ Q the value of ϕ(α)(P ) is uniquely determined by the values of ϕ(α)({p}) for all p ∈ P , since ϕ(α)(∅) = {∅} and for every P ⊆ Q, p ∈ Q z P either P ∪ {p}⊆ [Q{ε}]≥1 and then ϕ(α)(P ∪ {p}) = {K ∪ L | K ∈ ϕ(α)(P ),L ∈ ϕ(α)({p})}, or ϕ(α)(P ∪ {p}) = 
{∅}. Moreover since ϕ(α) is either {∅} or does not contain ∅ and is nonempty, each
ϕ(α) uniquely corresponds to some map from Q → (22Qz{∅} ∪ {{∅}} z {∅}). Hence
|ϕ(Γ∗)|≤ 2n·(2n−1). For the special case when H  = ∅ observe that ϕ(P ) is always
a singleton. Thus ϕ(α)(P ) is always a singleton and uniquely corresponds to some map from Q → 2Q. Hence |ϕ(Γ∗)| ≤ 2n·n. The upper bound on the size of the DFA for [R]≥1 and [R]§1 follows in both cases using the same argument as for the
objective (R, >0) and the function ψ.	 
Note that although the winning regions are regular and, due to the upper bounds on the representation, for a fixed Δ there is always a finite set of DFA with the property that it contains a DFA accepting the winning region, due to [9] it is undecidable which of them is the right one, since the membership testing for the
winning region [R]≥1 is undecidable already for PDA with H  = ∅.

PDA Games and Value 1
We still consider the PDA Δ fixed above and some R ⊆ Q{ε}. In this section we focus on the set val−1(1) of configurations with value 1 with respect to reaching the set R. One may wonder why not to consider also value 0, but as a simple exercise it can be proved that val−1(0) = [R]>0. On the other hand an inequality may occur for value 1 and (R, ≥1) as the following example shows:
Example 4.1 Let Q = {p, r, s}, Γ = {X}, H = {pX}, H⃝ = {rX, sX}, H = ∅,
pX ‹→ pXX, pX ‹→ rX, rX ‹0→.5 rε, rX ‹0→.5 sε, sX ‹→1 sε, R = {sε}. If Player  wants
to reach sε he has to switch to control state r in some configuration pXn, n ≥ 1. After performing this, sε is reached with probability 1 − 2−n. Thus val (pX) = 1 but pX ∈/ [R]≥1.
Moreover, in [7] is shown that testing the membership to val−1(1) is undecidable already for PDA with H = ∅. However, similarly to the previous section, we prove the following theorem:
Theorem 4.2 Consider a PDA Δ and denote n = |Q|. Fix some R ⊆ Q{ε}. Then the set val−1(1) of all conﬁgurations with value 1 with respect to R is regular and the size of the minimal DFA for it is bounded by 2+ n · (2n·(2n−1)).
Proof. Consider the monoid M from the proof of Theorem 3.5. We start proving that val−1(1) is regular by giving a homomorphism κ : Γ∗ →M such that val−1(1) is a finite union of one-letter concatenations to reverse images in κ. We set κ(ε) = ι and for every α ∈ Γ+, P ⊆ Q:

κ(α)(P ) = ⎧⎨ {∅}	if ∃p ∈ P : val Q{ε}(pα) < 1
⎩ {K | ∀p ∈ P : val K{ε}(pα) = 1}	otherwise
The proof that κ is a homomorphism of monoids is very similar to the proof for ϕ, and follows: It suffices to prove that (κ(α) • κ(β))(P ) = κ(αβ)(P ) for every P ⊆ Q and α, β ∈ Γ+.
“⊆”: Let K ∈ (κ(α) • κ(β))(P ). Then there is some L ∈ κ(α)(P ) such that K ∈ κ(β)(L). If L = ∅ then K = ∅ and moreover val (pαβ) with respect to Q{ε} is less than 1 for some p ∈ P thus ∅ ∈ κ(αβ)(P ). Similarly if L /= ∅ and K = ∅ then ∅∈ κ(αβ)(P ) as well. Now assume ∅ ∈/ {K, L}. Thus for every ξ > 0 we have
strategies σ ,σ  ∈ Σ such that for all π ∈ Π: Pσ1,π (Reach(L{ε})) ≥ 1 − ξ/2 for all
1	2	pα
p ∈ P , and Pσ2,π (Reach(K{ε})) ≥ 1 − ξ/2 for all l ∈ L. Combining σ1 and σ2 in the same way as in the proof that ψ is a homomorphism above we get a strategy σ ∈ Σ such that for all π ∈ Π: Pσ,π (Reach(K{ε})) ≥ (1 − ξ/2)2 > 1 − ξ for all
p ∈ P . Thus K ∈ κ(αβ)(P ).
“⊇”: Let K ∈ (κ(αβ))(P ). If K = ∅ then either κ(α)(P ) = {∅} or κ(β)(L) = {∅} for all L ∈ κ(α)(P ). In both cases ∅∈ (κ(α) • κ(β))(P ). If K /= ∅ then for all ξ > 0 there is a σ ∈ Σ such that for all π ∈ Π and p ∈ P : Pσ,π (Reach(K{ε})) ≥ 1 − ξ2. Let again σ1 and σ2 be the strategies induced by σ in the same manner as in the proof that ψ is a homomorphism above. We denote L the set of all l ∈ Q such that Pσ2,π (Reach(K{ε})) ≥ 1 −ξ for all π ∈ Π. Observe that also Pσ1,π (Reach(L{ε})) ≥
lβ	pα
1 − ξ for all π ∈ Π and p ∈ P , since otherwise from the definition of L and σ1, σ2
there would be some δ > 0 such that
Pσ,π (Reach(K{ε})) < 1 − ξ − δ + (ξ + δ)(1 − ξ) = 1 − ξ2 − δξ § 1 − ξ2
contradicting our choice of σ. Thus K ∈ (κ(α) • κ(β))(P ).
Using the sets RQ and Uq, q ∈ Q from the proof of Theorem 3.5 it can be easily verified that val−1(1) =  q∈Q({q}· κ−1(Uq)). By arguments similar to those for ϕ it can be proved that |κ(Γ∗)| ≤ 2n·(2n−1), and from this also the upper bound on the representation of val−1(1).	 

Conclusion
Our results finished the classification of the regularity of the sets of winning config- urations for PDA games and reachability started in [4]. The classification is given in Table 1, “NR” means that the sets of winning configurations can be non-regular, “Reg” means that they are always regular but no algorithm can produce the recog- nizing DFA and “EfR” means that there is an algorithm to produce the respective finite automaton. We also focused on the size of the corresponding minimal DFA by giving an upper bound on the index of the syntactic congruence and hence also on the number of states of the minimal DFA. We managed to decrease these upper bounds comparing to the earlier results. Our methods also showed to be applicable


Table 1
Classification of the regularity of [R]≥1

to slightly different problem: computing the value of the game. As an open prob- lem remains the decidability of membership for the sets of winning configurations in case of PDA games, as well as BPA games and objectives other than qualitative,
i.e. with probability thresholds from the open interval (0, 1).

References
Br´azdil, T., “Verification of Probabilistic Recursive Sequential Programs,” Ph.D. thesis, Faculty of Informatics, Masaryk University (2007).
Br´azdil, T., V. Broˇzek, V. Forejt and A. Kuˇcera, Reachability in Recursive Markov Decision Processes, Information and Computation 206 (2008), pp. 520–537.
Br´azdil, T., V. Broˇzek, A. Kuˇcera and J. Obdrˇz´alek, Qualitative Reachability in Stochastic BPA Games, in: Proceedings of the 26th International Symposium on Theoretical Aspects of Computer Science (STACS 2009) (2009), pp. 207–218.
Broˇzek, V., Regularity in Model Checking PDA Games, in: MEMICS proceedings, 2007, pp. 27–34.
Chatterjee, K., M. Jurdzinski and T. A. Henzinger, Quantitative Stochastic Parity Games, in: Proceedings of the Fifteenth Annual ACM-SIAM Symposium on Discrete Algorithms, SODA 2004, New Orleans, Louisiana, USA, January 11-14, 2004 (2004), pp. 121–130.
Esparza, J., A. Kuˇcera and S. Schwoon, Model-Checking LTL with Regular Valuations for Pushdown Systems, Technical Report Informatics Research Report EDI-INF-RR-0044, Division of Informatics, University of Edinburgh (LFCS) (2001).
Etessami, K. and M. Yannakakis, Recursive Markov Decision Processes and Recursive Stochastic Games, in: Automata, Languages and Programming, 32nd International Colloquium, ICALP 2005, Lisbon, Portugal, July 11-15, 2005, Proceedings, LNCS 3580 (2005), pp. 891–903.
Etessami, K. and M. Yannakakis, Efficient Qualitative Analysis of Classes of Recursive Markov Decision Processes and Simple Stochastic Games, in: STACS 2006, 23rd Annual Symposium on Theoretical Aspects of Computer Science, Marseille, France, February 23-25, 2006, Proceedings, LNCS 3884 (2006), pp. 634–645.
Etessami, K. and M. Yannakakis, Recursive Markov Decision Processes and Recursive Stochastic Games (2009), a joint journal submission of [8,7]. To be published.
URL http://homepages.inf.ed.ac.uk/kousha/j_sub_rmdp_rssg.pdf

Hopcroft, J. E., R. Motwani and J. D. Ullman, “Introduction to Automata Theory, Languages, and Computation,” Addison Wesley, 2006, 3rd edition.
Kemeny, J. G., J. L. Snell and A. W. Knapp, “Denumerable Markov Chains,” Springer, 1976, 484 pp.
Martin, D. A., The Determinacy of Blackwell Games, J. Symb. Log. 63 (1998), pp. 1565–1581.
