

Electronic Notes in Theoretical Computer Science 239 (2009) 5–15
www.elsevier.com/locate/entcs

Deciding Reachability in Mobile Ambients with Name Restriction
Giorgio Delzanno and Roberto Montagna
Dipartimento di Informatica e Scienze dell’Informazione Universita` di Genova, via Dodecaneso 35, 16146 Genova, Italy e-mail: {giorgio, montagna}@disi.unige.it

Abstract
We investigate the reachability problem for fragments of the Mobile Ambients, a powerful model for dis- tributed and mobile computation. By using a connection with associative-commutative term rewriting, we prove that reachability is decidable in the open-free fragment of pure Mobile Ambients with name restriction and weak reduction semantics. Processes in this model have three sources of infiniteness: depth of ambients, width of parallel composition, and number of restricted names. Our work extends similar results obtained for public fragments of Mobile Ambients.
Keywords: Mobile Ambients, reachability, term rewriting

Introduction
The Mobile Ambients (MA) of Cardelli and Gordon [4] is a powerful model of distributed, mobile computation. The basic block of this model is the notion of ambient. An ambient is represented by the expression n[P ] where n is a name, and P is a collection of local agents and sub-ambients. Local agents model the possible computations that can take place inside the ambient. The formalism is based on classical operations of process algebra like action prefix act.P , parallel composition P | Q and replication !P . The replication !P denotes an arbitrary number of copies of P in parallel. Its semantics is defined via the axiom !P ≡!P |P . In addition to these operations, the pure (i.e. without communication) version of the calculus provides movement capabilities like in n (out n) that allow an ambient A (with any label) to enter (exit from) ambient B with label n. As an example, the process m[in n.P |Q] | n[R] reduces in one step to n[m[P |Q]|R], whereas n[m[out n.P |Q] | R] reduces in one step to n[R] | m[P |Q]. The open capability can be used to dissolve the boundary of an ambient. The name restriction νx.P (where x is a name that may occur free in P ) can be used to assign unique identities to dynamically gener- ated ambients. As an example, the replicated process P =!νx.x[in n.0] is equivalent

1571-0661/© 2009 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2009.05.027

to the process νx1.... .νxn.x1[in n.0] | ... | xn[in n.0] | P , i.e., to a collection of an arbitrary number of ambients with fresh names and capability in n (0 represents the null process). The movement capabilities may generate ambients with arbitrary nesting structure. Thus, MA is an inﬁnite-state model with several sources of in- finiteness: width of parallel composition, number of restricted names, and depth of ambients.

Reachability in MA
Expressiveness issues and verification problems for dialects of MA have been studied in [2,10,1,3,5,7,8]. In this paper we focus our attention on the reachability problem: is there a computation from process P to process Q?. This problem has been studied for public (i.e. without name restriction) fragments of MA in [6,1,3]. Specifically, in
[6] Charatonik and Talbot proved the undecidability of reachability in pure public MA. In [1] Boneva and Talbot refined this result by showing that reachability is undecidable in the open-free (i.e. without open capability) fragment of public MA. They also proved the Turing completeness of the same fragment by exhibiting an encoding of two counter machines. In this encoding the standard semantics of repli- cation (i.e. !P ≡!P |P ) is used for collecting garbage left by the processes performing the simulation of the counter machine. Indeed, in the same paper the authors shown that reachability becomes decidable whenever the replication operation is only used to generate new processes (i.e. !P ≡!P |P is turned into the oriented reduction rule
!P →!P |P ). This semantic restriction is called weak reduction. In [3] Busi and Zavattaro proved that reachability is decidable in open-free public MA with stan- dard reduction semantics whenever every occurrence of replication is guarded by a movement capability. (i.e. they admit the use ! only in processes like !M.P where M is either in n or out n). Interestingly, the open-free public MA fragment with guarded replication is still Turing complete [3,10].

Novel Contribution
In this paper we extend the decidability result of Boneva and Talbot in [1] by proving that reachability remains decidable when adding name restriction to the open-free fragment of MA with weak reduction, i.e., when adding the third source of infiniteness to the fragment considered in [1]. We call the resulting fragment pMA−o. To prove this result, we exploit a link between MA and AC term rewriting. Specifically, we show that the reachability problem in pMA−o can be reduced to a reachability problem for ground terms and rewrite rules with multiset-variables. The resulting rewrite rules satisfy the syntactic restrictions proposed in [9] (structure preserving rewriting) under which reachability is decidable.
This reduction requires some preliminary transformation on the pMA−o seman- tics. More in detail, we first introduce a new reduction relation working on pMA−o processes in a special syntactic form called prenex form. A process is in prenex form when all the name restrictions occurring outside the scope of a replication are moved at the top level (i.e. it has the form ν→x.P where P has no restrictions

outside replications). This transformation requires some work because the congru- ence relation ≡ of MA does not provide a direct way to move restrictions through movement capabilities, e.g., in n.ν x.P ≡ ν x.in n.P for x /= n is not an axiom for ≡. As a second step, we show how to reduce a reachability problem in the new pMA−o reduction semantics to a reachability problem for ground terms. Terms are built by mapping an ambient n[P1 | ... | Pn] to a compound term n⟨t1 | ... | tn⟩, where ti is a term associated to Pi, and | is an associative-commutative term con- structor. Local agents like !P are encoded by constants like q!P . The key point in the encoding consists in showing that it is enough to consider a finite set of node constructors and constants to model a reachability problem in pMA−o. Since we work in AC term rewriting, the finiteness of the set of constants does not imply the finiteness of the set of ground terms we have to deal with. As an example, if q0 is the constant representing the null process 0, then we have to deal with the infinite set of ground terms of the form q0 | ... | q0. This makes the encoding from pMA−o
to term rewriting non trivial.
As mentioned before, our result extends the result of Boneva and Talbot in [1] formulated for the public fragment of pMA−o. To our knowledge, this is the first positive result for reachability in non trivial fragments of MA with name restriction.





Related work

In [9] we have studied the relationship between public fragments of MA and a fragment of associative and commutative (AC) term rewriting, we called TUC. Indeed, the computational mechanisms of public MA can be naturally expressed using rewriting systems working on terms with multiset-variables. In [9] we have shown that reachability between ground terms (but for a set of rules with multiset- variables) is decidable for the structure preserving fragment of TUC, called TUCSP . Structure preserving rules cannot remove internal nodes of a tree term. However, they can still produce and consume leaves. In the same paper we have shown that the decidability of reachability in TUCSP generalizes the results obtained for the fragments of Mobile Ambients in [1,3]. Indeed, the semantic and syntactic restrictions for MA studied in [1,3] can be reformulated in a uniform way using a set of structure preserving TUC rewrite rules. Interestingly, TUCSP has a different nature from other fragments of AC rewriting like PRS [12] and AC ground rewriting [11]. Indeed, to express the movement operations of MA, we need rewrite rules (like the one in the previous example) that synchronize tree terms with multiset- variables. This kind of synchronization rules are restricted to ground terms in PRS and ground AC term rewriting (the interested reader can refer to [9] for a more detailed discussion on this point).



P |0 ≡ P
P |Q ≡ Q|P
(P |Q)|R ≡ P |(Q|R)
if P ≡α Q then P ≡ Q
νn.(νm.P ) ≡ νm.(νn.P )
νx.0 ≡ 0
νx.(P |Q) ≡ P |νx.Q for x /∈ fn(P )
νx.(n[P ]) ≡ n[νx.P ] f or x /= n


Fig. 1. Congruence relation.
m[in n.P | Q] | n[R] → n[m[P | Q] | R]	(in)
n[m[out n.P | Q] | R] → m[P | Q] | n[R]	(out)
open n.P |n[Q] → P |Q	(open)
P | !P  → !P	(abs)
!P  → P | !P	(gen)

P → Q C[P ] → C[Q]

(context)
P ' ≡ P P → Q Q ≡ Q' P ' → Q'

(congr)

Fig. 2. Reduction relation: C[•] is either •|R , n[•], or νx.•
Pure Mobile Ambients (MA)
Given a denumerable set of ambient names Amb, the set of MA process terms is the smallest set generated by the following grammar.
P, Q	::=	0 | P |Q | !P | νx.P  | n[P ] | in n.P  | out n.P  | open n.P

The term n[P ] denotes an ambient with name n. Local agents are processes in one of the following forms: 0, !P , in n.P , out n.P , and open n.P . In the rest of the paper we use P ≡α Q to denote that P and Q are equivalent modulo α-conversion, and fn(P ) to denote the set of free names in P (all names occurring in P that are not binded by a name restriction). The structural congruence ≡ is the smallest congruence relation satisfying the equations listed in Fig. 1. Notice that for any P and x /∈ fn(P ), we have that νx.P ≡ P . We call this kind of restrictions useless. Furthermore, we call active any occurrence of a term/operator outside the scope of a replication. The operational semantics of the language is given via a reduction relation → defined as the smallest relation satisfying the axioms and rules of Fig.
Differently from the standard presentation of Mobile Ambients, the equivalence
!P ≡!P | P is split into two reduction axioms, namely gen (generate) and abs (absorb). This presentation simplifies the definition of the fragments studied in the following section. We use →∗ to denote the reflexive and transitive closure of →.
Definition 2.1 Given processes P and Q, the reachability problem RP (P, Q) con- sists in deciding if P →∗ Q.

Reachability in open-free Mobile Ambients
As mentioned in the introduction, in [1] Boneva and Talbot proposed a weak re- duction semantics for a fragment without open and without name restriction. Ac- cording to the weak reduction of [1], replication in this fragment can only be used to generate new processes. The result in [1] is based on the following property: if P →∗ Q in this fragment, then the tree structure of Q gives us an upper bound on the number of ambients (occurring outside a replication) that may occur in the processes appearing in a derivation from P to Q. Indeed, without open and with weak reduction it is not possible to consume ambients in a derivation. In this paper we study the reachability problem for an extension, named pMA−o, of the fragment
with weak reduction of Boneva-Talbot defined as follows.
Definition 2.2 The fragment pMA−o is obtained by forbidding the use of the open capability in the definition of a process (open-free), and by removing abs and open from the rules of Fig. 2 (weak reduction).
To extend the result of [1] to pMA−o, we need some considerations on the se- mantics of restrictions and movement. Consider a process νn.P ' occurring in a derivation from P to Q and suppose that we use α conversion to avoid clashing with other restrictions occurring in P . Then, we have three possible situations. (1) If n does not occur in P ' then νn.P ' is equivalent to P '. (2) If n occurs in a subterm n[Q] of P ', then n occur in all successive configurations (weak reduction does not allow the consumption of active ambients). (3) Finally, the more subtle case is when n occurs in a subterm in/out n.Q of P ' while it does not occur in a subterm n[Q'] of P '. Potentially, we could consume the name n by executing the corresponding capability. However, in n and out n require the presence of an ambient named n to be executed. Thus, in the latter case the processes in n.Q and out n.Q never be executed (they are deadlocked). The previous properties show us that if P →∗ Q in pMA−o then Q contains at least one occurrence (either in a term n[Q] or in a deadlocked process in n.P or out n.P ) of every newly generated ambient name. Thus, the tree structure of Q together with the set of ambient names occurring in Q outside the scope of a replication can be used to have an upper bound on the size of tree structures and on the number of names we have to consider to solve RP (P, Q). To make this observation into a formal argument, we introduce a special class of terms, we call prenex forms, in which all restrictions are moved at the top level (i.e. we extrude their scope as much as possible), and we only keep restrictions that bind names occurring somewhere in the process.

Prenex form
The prenex-form of a term P is a term P ' (structurally equivalent to P ) in which all the name restrictions have been pushed up (renamed if necessary) in the tree- structure of P as much as possible. To find the prenex form we use a rewriting relation - defined as the smallest relation satisfying the rules in Fig. 3. The reduction in prenex form is defined as follows.

νx.P - P	if x /∈ fn(P )
(νx.P ) | Q - νx.(P | Q)	if x ∈ fn(P ) and x /∈ fn(P )
n[νx.P ] - νx.n[P ]	if x ∈ fn(P ) and x /= n in n.(νx.P ) - νx.(in n.P )   if x ∈ fn(P ) and x /= n out n.(νx.P ) - νx.(out n.P )  if x ∈ fn(P ) and x /= n

P - Q C[P ] - C[Q]
(context)
P ≡1−5 P ' - Q' ≡1−5 Q P - Q
(congr)

Fig. 3. Relation ~: C[•] is either •|R , n[•], M.•, or νx.•.
m[in n.P | Q] | n[R] →∅ n[m[P | Q] | R]
n[m[out n.P | Q] | R] →∅ m[P | Q] | n[R]

P	$ ν→y d P '
!P	→→y	!P |P '
P →→y Q

P | R →→y P | R

if →y ∩ fn(R)= ∅

P →→y Q n[P ] →→y n[Q]
if n /∈ →y P →→y Q
P ≡1−5 P ' →→y Q' ≡1−5 Q

P →→y Q

if →y ∩ →x = ∅

ν→x d P '→ ν→x ∪ →y d Q

Fig. 4. Restricted Reduction Relation.
Definition 2.3 P $ P ' if P -∗ P ' /-.
The prenex form P ' of P is such that P $ P '. In a process in prenex form all active restrictions are moved at the top level. In order to study the properties of
processes in prenex form, let us call tree structure of a process P the term ts(P ) obtained by removing all active occurrences of restriction in P . Formally, ts(!Q)= 
!Q, ts(0) = 0, ts(νx.Q) = ts(Q), ts(n[Q]) = n[ts(Q)], ts(Q|R) = ts(Q)|ts(R), ts(M.Q)= M.ts(Q). The following properties hold.
Proposition 2.4 The relation $ modulo ≡1−5 is terminating.
Proposition 2.5 If P1 $ P2, then there exist a set of names →y such that P2 =
ν→y.P3, P3 has no active occurrences of restrictions, every name in →y occurs free in
P3, and there exists P ' ≡α P1 such that ts(P ')= ts(P2).
1	1
Proposition 2.6 If P1 $ P2 and P1 $ P3, then P2 ≡1−5 P3.
In the following we use the notation ν→y d P to identify a term ν→y.P in which P does not contain active occurrences of restrictions, e.g., to isolate the block of top-level restrictions of a prenex form. In Fig. 4 we define a new reduction relation


DerN (0)= {0}	DerN (n[P ]) = DerN (P )
DerN (M.P )= {M.P }∪ DerN (P )	DerN (νx.P )=	DerN (P [n/x])
DerN (P | Q)= DerN (P ) ∪ DerN (Q)
DerN (!P )= {!P }∪ DerN (P ') if P $ P '

Fig. 5. Derivatives of a process.
working on terms in prenex form and in which α-renaming is only applied locally to the generation rule (∅ denotes the empty vector). The following property relates the new reduction with the standard one.
Proposition 2.7 For any P, Q, P → Q iff P $ P ' '−→ Q' and Q $ Q'.
Let us make some final considerations on the semantics of pMA−o. Let us first notice that we can work with a congruence relation applied only to contexts different from !P (as for the reduction semantics). Furthermore, let us reformulate the axiom P | 0 ≡ P as the following two reduction rules

P →∅ P | 0	P | 0 →∅ P

Since in MA the empty ambient is n[0] and not n[ ], when using the reduction rules for 0 we need to refine the reduction rule for the out rule as follows
n[m[out n.P | R] | Q] →∅  m[P | R] | n[Q | 0]
Several computation steps in the resulting reduction may correspond to one compu- tation or congruence step in the original semantics. However, the reachability can be safely checked in the new semantics. From here on, we still use '→ to denote the the modified reduction relation. Finally, given a process term P and a finite set of names N , in Fig. 5 we define the set of local agents DerN (P ) that may become ac- tive during a computation (derivatives) and in which restricted names are replaced by names in N . For a finite set N , DerN (P ) is finite, too. Furthermore, we have the following property.
Proposition 2.8 If P0 '→ P1 ... '→ Pn = →xn d Qn, then Der→xn (P0) ∪ {0} contains the set of local agents active in Pi for i : 0,... , n.

From Mobile Ambients to AC term rewriting
To show that the reachability problem for the fragment of pure Mobile Ambients defined in the previous section is decidable, we use a reduction to reachability in a special fragment of AC term rewriting called structure preserving. The latter problem is decidable [9]. We introduce the syntax of structure preserving rewrite rules in the next section.

Structure Preserving AC Term Rewriting
We consider a restricted class of rewrite rules defined over TR terms and with vari- ables ranging over multisets of terms. For this purpose we first need to define the shape of restricted terms that can occur in the left- and right-hand side of rules RTL and RTR, respectively. Given a denumerable set of variables V = {X, Y,.. .}: ranging over MS-terms:
RTL is the least set of terms satisfying: Q⊆ RTL; if t1,... , tn ∈ RTL, and X ∈ V, then n⟨t1 | ... | tn | X⟩∈ RTL for n ≥ 0.
Furthermore, RTR is the least set of terms satisfying: Q⊆ RTR; if t1,... , tn ∈ RTR, and X ∈ V, then n⟨t1 | ... | tn | X⟩∈ RTR and n⟨t1 | ... | tn⟩∈ RTR.
Given a term t let IntNds(t) denote the number of occurrences of labels in N (internal nodes/ambients) in t. Formally, IntNds(t) is defined by induction on t as follows: IntNds(ϵ) = IntNds(X) = IntNds(q) = 0 for X ∈ V and q ∈ Q,

IntNds(t1| ... |tk)= IntNds(t1| ... |tk| X)= Σk
IntNds(ti), and IntNds(n⟨m⟩)= 

IntNds(m)+ 1.
A structure preserving rule l → r is such that
l = t1 | ... | tn, and ti ∈ RTL for i : 1,... , n,

r = t'
| ... | t'
and t' ∈ RTR for i : 1,... , m;

l and r have the same set V of variables;
each variable in V occurs once in l and once in r;
IntNds(l) ≤ IntNds(r).

Encoding Reachability Problems
Consider the processes P0 = →x d P ' with →x = ⟨x1,... , xk⟩ and P1 = →x ∪ →y d P ' with
0	1
→y = ⟨y1,... , yp⟩. Furthermore, assume that all free names occurring in P ' occur in
→x. The reachability problem RP (P0, P1) can be encoded into a reachability problem for two ground terms and a finite set R of term rewrite rules with variables and one associative-commutative constructor. To handle names, we consider a set N1 of constants associated to the names in →x and a set N2, disjoint from N1, associated to the names in →y \ →x. We define N = N1 ∪ N2. Let us now describe the encoding of processes into terms.
The set TR of terms used to represent processes is built upon a signature with the following constructors and constant symbols:
For any n ∈ N , the ambient n[·] is represented by the constructor n⟨·⟩.
The parallel composition is represented by an associative and commutative con- structor |. The constant ϵ is the identity element of |. A term t1| ... |tn can be viewed as a multiset of terms.
Each derivative R of P0 is represented by means of a constant qR.
To keep track of unused names, we associate a constant qn to each n ∈ N2.

T (0)= q0	T (!Q1)= q!Q1	T (M.Q1)= qM.Q1
T (n[Q1]) = n⟨T (Q1)⟩	T (Q1|Q2)= T (Q1)|T (Q2)
Fig. 6. Encoding of processes into ground terms.
A process P derived from P0 is mapped to a ground term T (P ) (i.e. a term with variables) in TR via the map T defined by induction as shown in Fig. 6. Notice that the map T does not produce constants qn with n ∈ N2. We add them to the initial configuration as explained in the next section.
We are ready now to define the set R of rules modelling the behavior of processes in DerN (P0). In the following X, Y,... denote variables ranging over multisets of terms.
For every n, m ∈ N , in n.Q, out n.Q ∈ DerN (P0), R contains:
m⟨qin n.Q | X⟩ | n⟨Y ⟩ −→ n⟨m⟨T (Q) | X⟩ | Y ⟩
n⟨m⟨qout n.Q | X⟩ | Y ⟩ −→ m⟨T (Q) | X⟩ | n⟨q0|Y ⟩
These rules are a natural reformulation of the movement operations of pMA−o. The continuation Q is a label in the constant qM.Q occurring in the left-hand side. It becomes a ground term T (Q) in the right-hand side.
In order to generate a new copy of process !Q, we first put it in its prenex form Q'' = ν→y d Q1. Then, we assume that v distinct leaves qa ,... , qa representing unused names float in parallel with q!Q. The rule consumes these leaves (i.e. every name in N2 can be used only once) and generate an instance of Q1 in which the free names y1,... , yv are replaced by a1,... , av. Formally, for every q!Q ∈Q and a1,... , av ∈ N2, R contains:
qa1 | ... | qav | q!Q −→ q!Q | T (R)
where Q $ ν→y d Q1, →y = y1,... , yv, ai /∈ fn(Q1) for i : 1,... , v, and R =
Q1[a1/y1,... , av/yv].
For the previous rule to work, constants that represent unused names must be available inside any ambient when needed. To let constants qa with a ∈ N2 move across ambients, for any m ∈N \ {a}, we add to R the rule

qa | m⟨X⟩ −→ m⟨qa|X⟩
If constants associated to N2 are at the top level in the initial configuration, then the move rule allows us to distribute them inside the tree structure of terms in order to be ready to synchronize with a gen rule.
Finally, for any R ∈ DerN (P0) and n ∈N we add to R the rules

qR → qR | q0	n⟨X⟩→ ⟨X⟩ | q0	qR | q0 → qR	n⟨X⟩ | q0 → n⟨X⟩

These rules naturally model the congruence P |0 ≡ P independently from the structure of P (ambient n⟨.. .⟩ or local agent qR).
Since DerN (P0) is a finite set and $ is terminating, then we can always pre-compute all the terms needed to define R. Thus, for fixed P0 and N , R is a finite set of
rewrite rules.
Now let ⇒ denote the standard rewrite relation for ground terms, i.e, t ⇒ t' if there exists a ground instance l → r of a rule in R such that l is a subterm of t and t' is obtained by replacing l with r in t. Let ⇒∗ be the reflexive and transitive closure of ⇒. Then, the following property holds.
Proposition 5.1 Given RP (P0, P1) with P0 = ν→x d P ' and P1 = ν→x ∪ →y d P ', let
N1 = {n1,... , nk}, N2 = {a1,... , ap}, N = N1 ∪ N2 and let R be the set of rewrite rules associated to DerN (P0). Then, we have that


→x d P ' '→∗ →x ∪ →y d P ' iff qa | ... | qa
| T (Q0) ⇒∗ T (Q1)

0	1	1	p
where Q0 = P '[n1/x1,... , nk/xk], Q1 = P '[n1/x1,... , nk/xk, a1/y1,... , ap/yp].
0	1

From Prop. 5.1 it follows that reachability in pMA−o
can be reduced to a

reachability problem for two ground terms and a finite set of AC term rewrite rules with variables ranging over multisets of terms. All rewrite rules used in this reduction satisfy the structure preserving syntactic restriction introduced in [9]. The restriction ensures that the application of a structure preserving rewrite rule never removes internal nodes (occurrences of the constructor n⟨⟩) from the current term. For rules of this kind, in [9] we have proved that reachability can be decided by means of a further encoding into Petri net reachability. The following result then holds.
Theorem 5.2 Reachability is decidable in pMA−o.
Proof. It follows then from the decidability of reachability for ground terms and structure preserving AC term rewriting proved in [9].	 

Conclusions
The open-free fragment of MA with weak reduction is a model with different sources of infiniteness: the number of local agents/ambients, the nesting of ambients, and the number of names. In this paper we have proved that reachability is decidable in this infinite-state model. This result extends the decidability result of [1] obtained for pMA−o without name restriction.

References
I. Boneva and J.-M. Talbot When Ambients Cannot be Opened! TCS 333(1-2): 127-169, 2005.
N. Busi and G. Zavattaro. On the expressive power of movement and restriction in pure mobile ambients. TCS 322(3): 477-515, 2004.

N. Busi and G. Zavattaro. Deciding Reachability in Mobile Ambients. In ESOP ’05: 248-262.
L. Cardelli and A. D. Gordon. Mobile ambients. TCS 240(1): 177-213, 2000.
L. Cardelli and A. D. Gordon. Anytime, anywhere: modal logics for mobile ambients. In POPL ’00: 365–377.
W. Charatonik, J.-M. Talbot. The Decidability of Model Checking Mobile Ambients. In CSL 2001: 339-354.
W. Charatonik, S. Dal Zilio, A. D. Gordon, S. Mukhopadhyay, and J.M. Talbot. The Complexity of Model Checking Mobile Ambients. In FoSSaCS 2001: 152-167.
W. Charatonik, S. Dal Zilio, A. D. Gordon, S. Mukhopadhyay, J-M. Talbot. Model Checking Mobile Ambients. TCS 308(1-3): 277-331, 2003.
G. Delzanno and R. Montagna. Reachability Analysis of Mobile Ambients in Fragments of AC Term Rewriting. Formal Asp. Comput. 20(4-5): 407-428 (2008)
S. Maffeis and I. Phillips. On the computational strength of pure ambient calculi. TCS 330(3): 501-551 (2005)
R. Mayr and M. Rusinowitch. Reachability is decidable for ground AC rewrite systems. In INFINITY’98, 3rd International Workshop on Verification of Infinite State Systems, Aalborg (Denmark), July 1998.
R. Mayr. Process Rewrite Systems. Inf. Comput. 156(1-2): 264-286, 2000.
