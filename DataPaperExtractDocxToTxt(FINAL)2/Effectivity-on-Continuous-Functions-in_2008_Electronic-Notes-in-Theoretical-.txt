	Electronic Notes in Theoretical Computer Science 202 (2008) 237–254	
www.elsevier.com/locate/entcs

Effectivity on Continuous Functions in Topological Spaces
Tanja Grubba1
University of Hagen Hagen,Germany
Klaus Weihrauch2
University of Hagen Hagen,Germany
Yatao Xu3
Nanjing University Nanjing,China

Abstract
In this paper we investigate aspects of effectivity and computability on partial continuous functions in topological spaces. We use the framework of TTE, where continuity and computability on finite and infinite sequences of symbols are defined canonically and transferred to abstract sets by means of notations and representations. We generalize the representations introduced in [14] for the Euclidean case to computable T0-spaces and computably locally compact Hausdorff spaces respectively. We show their equivalence and in particular, prove an effective version of the Stone-Weierstrass approximation theorem.
Keywords: Computable Analysis, TTE, Stone-Weierstrass approximation theorem, Representations of Continuous Functions


Introduction
Computable Analysis connects Computability/Computational Complexity with Analysis/Numerical Computation by combining concepts of approximation and of computation. During the last 70 years various mutually non-equivalent models of real number computation have been proposed (Chap.  9 in [14]).  Among these

1 Email:tanja.grubba@fernuni-hagen.de
2 Email:klaus.weihrauch@fernuni-hagen.de
3 Email:yataoxu@gmail.com

1571-0661 © 2008 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2008.03.018

models the representation approach (Type-2 Theory of Effectivity, TTE) proposed by Grzegorczyk and Lacombe [8,10] seems to be particularly realistic, flexible and expressive. So far the study of computability on sets of points, sets (open, closed, compact) and continuous functions has developed mainly bottom-up, i.e., from the real numbers to Euclidean space and metric spaces [18,2,16,14,19,1,20]. But often generalizations to more general spaces are needed (locally compact Hausdorff spaces [4], non-metrizable spaces [17], second countable T0-spaces [11,7]).
In this article we investigate various representations of continuous functions in a general setting. In Section 2, we sketch some basic notions on TTE and provide some fundamental definitions and properties of representations of points and sets in computable T0-spaces. In Section 3, we introduce some equivalent chacteriza- tions of the representation η of the partial continuous functions on Cantor space. In Section 4 we introduce three multi-representations (open-open, via realization and via pointwise continuity) of the set of the partial continuous functions in com- putable T0-spaces, we define the compact-open representation for total continuous functions in computably locally compact spaces and show their equivalences. In the last section we prove an effective version of the Stone-Weierstrass approximation theorem. For a compact space K we construct a notation νK of a dense subset DK  C(K) and a metric dK such that the metric space MK = (C(K), dK, DK, νK) is semi-computable for κ-computable K, computable for κmc-computable K and the Cauchy representation is equivalent to the open-open representation.

Preliminaries
This section consists of two parts. In Section 2.1, we sketch some concepts of TTE. In Section 2.2, we introduce computable T0-spaces and the underlying representa- tions of points and sets.

Type-2 Theory of Effectivity (TTE)
In this article we use the framework of TTE (Type-2 theory of effectivity). For more details see [14]. We assume that Σ is a fixed finite alphabet containing the symbols 0 and 1 and consider computable functions on finite and infinite sequences of symbols Σ∗ and Σω , respectively, which can be defined, for example, by Type-2 machines, i.e., Turing machines reading from and writing on finite or infinite tapes. We use the “wrapping function” ι : Σ∗  Σ∗, ι(a1a2 ... ak) := 110a10a20 ... ak011 for coding words such that ι(u) and ι(v) cannot overlap properly. We consider standard functions for finite or countable tupling on Σ∗ and Σω denoted by  . By “ ” we denote the subword relation. For p  Σω let p<i  Σ∗ be the prefix of p of length i  N. We write x  y if x is a prefix of y and x и y if x is a proper prefix of y.
We use the concept of multi-functions. A multi-valued partial function, or multi- function for short, from A to B is a triple f = (A, B, Rf ) such that Rf ⊆A × B (the graph of f ). Usually we will denote a multi-function f from A to B by f : ⊆A Σ B. For X⊆A let f [X] := {b ∈ B | (∃a ∈ X)(a, b) ∈ Rf } and for a ∈ A define

f (a) := f [ a ]. Notice that f is well-defined by the values f (a) B for all a	A. We define dom(f ) := a		A		f (a) =		. In the applications we have in mind, for a multi-function f :		A Σ B, f (a) is interpreted as the set of all results which are “acceptable” on input a		A. Any concrete computation will produce on input a			dom(f ) some element b		 f (a), but usually there is no method to select a specific one. In accordance with this interpretation the “functional” composition g	f :	 A Σ D of f :	A Σ B and g :	C Σ D is defined by dom(g	f ) := a A		 a	dom(f ) and f (a) dom(g) and g	f (a) := g[f (a)] (in contrast to “non- deterministic” or “relational” composition gf defined by g f (a) := g[f (a)] for all a		A). A partial function from X to Y , denoted by f :	X	Y , is a single-valued multi-function.
Notations ν :  Σ∗  M and representations δ :  Σω	M are used for introducing relative continuity and computability on “abstract” sets M . For a representation δ :  Σω   M , if δ(p) = x then the point x  M can be identified by the “name” p Σω . We will have applications where a sequence p Σω contains information about a point x, which is sufficient for some computation, although p does not identify x. We arrive at the concept of multi-notation ν : Σ∗ Σ M and multi-representation δ : Σω Σ M . A multi-representation can be considered as a naming system for the points of a set M where each name can encode many points. It can be interpreted also as a naming system of an attribute on M . We generalize the concept of realization of a function or multi-function w.r.t. (single-valued) naming systems [14] to “naming systems”, i.e., multi-notations or multi-representations, as follows [15]:
Definition 2.1	For naming systems γi : ⊆ Yi Σ Mi (i = 0,..., k), abbreviate
Y := Y1 × ... × Yk, M := M1 × ... × Mk, and γ(y1,..., yk) := γ1(y1) × ... × γk(yk).
Then a function h : ⊆Y → Y0 is a (γ, γ0)-realization of a multi-function f : ⊆M Σ
M0, iff for all p ∈ Y and x ∈ M ,
x ∈ γ(p) ∩ dom(f ) =⇒ f (x) ∩ γ0 ◦ h(p) /= ∅ .
The multi-function f is
(γ, γ0)-continuous, if it has a continuous (γ, γ0)-realization,
(γ, γ0)-computable, if it has a computable (γ, γ0)-realization.
(We will say (γ1,... γk, γ0)-computable instead of (γ, γ0)-computable, etc.)
Fig. 1 illustrates the definition. Whenever p is a γ-name of x ∈ dom(f ), then
h(p) is a γ0-name of some y ∈ f (x).
We introduce reduction and equivalence [13,12].
Definition 2.2 [reducibility, equivalence] For multi-representations γ :  Y Σ M and γ' :  Y ' Σ M' (Y, Y '  Σ∗, Σω ), let γ  t γ' (t-reducible) and γ  γ' (reducible), iff the identity id : a a (a M ) is (γ, γ')-continuous and (γ, γ')- computable, respectively. Define t-equivalence and equivalence by
γ  t γ'	(γ  t γ' and γ' t γ) and γ  γ'	(γ γ' and γ' γ), respectively.
Two representations induce the same continuity or computability, iff they are

p .	h	) .h(p)
/\	/\
/ \	/ \

/  \
/	\
γ /	\
/	\
/	\1
/r




ccccs
/  \
/	\
/	\γ0
/	\
/	\1
/r

.cvzccc
x	zzzzz  f
) .v
∃ y ∈ f (x) ∩ γ0 ◦ h(p)

zzzz,

Fig. 1. h(p) is a name of some y ∈ f (x), if p is a name of x ∈ dom(f ).

t-equivalent or equivalent, respectively. If multi-functions on represented sets have realizations, then their composition is realized by the composition of the realiza- tions. In particular, the computable multi-functions on represented sets are closed under composition. Much more generally, the computable multi-functions on multi- represented sets are closed under flowchart programming with indirect addressing [15]. This result allows convenient informal construction of new computable func- tions on multi-represented sets from given ones.
For multi-representations δ : ⊆ Σω Σ M and δ' : ⊆ Σω Σ M' define [δ, δ'] : 
⊆ Σω Σ M × M' by [δ, δ']⟨p, p'⟩ := δ(p) × δ(p'), δ ∧ δ : ⊆ Σω Σ M ∩ M' by δ ∧ δ'⟨p, p'⟩ := δ(p) ∩ δ'(p') and [δ]ω : ⊆ Σω Σ Mω by [δ]ω⟨p0, p1, p2,.. .⟩ := (δ(p0) × δ(p1) × δ(p2) × .. .) .
Let ρ be the standard representation of R. A ρ<-name represents a real number by lower rational bounds. ρ<(p) = x, if p is a list of all rational numbers a < x and ηab a standard representation of Fab, the partial continuous functions f :  Σa  Σb with open or Gδ domain, if b =  or b = ω respectively, with properties utm(ηab) and smn(ηab).
A computable metric space [13,14] is a tuple M = (M, d, A, α) such that (M, d) is a metric space and α : Σ∗  A is a notation with recursive domain of a (countable) dense subset A M such that the distance on A, (a, b)  d(a, b), is (α, α, ρ)–computable. If dK is (νK, νK, ρ>)-computable, then M is called semi- computable. The canonical representation of a semi-computable metric space is the Cauchy representaion defined by δC(p) = x, iff p = ι(u0)ι(u1)ι(u2) ... such that (∀i)d(x, α(ui)) ≤ 2−i. In particular, the elments a ∈ A are δC–computable.

Representations of Points and Sets in Computable T0-spaces
In this Section we introduce computable T0-spaces together with some fundamental representations of points and sets ([9]).
A topological space X = (X, τ ) is a T0-space, if for all x, y   X such that x = y, there is an open set O  τ such that x  O	y O. In a T0-space, every point can be identified by the set of its neighborhoods O  τ . X is called second-countable, if it has a countable base [5].

In the following we consider only second countable T0-spaces. For introducing concepts of effectivity we assume that some notation ν of a base β with recursive domain is given. The notation is partial as well as in many applications.
Definition 2.3 [computable T0-space]
A computable T0-space is a tuple X = (X, τ, β, ν) such that (X, τ ) is a second countable T0-space and ν : ⊆ Σ∗ → β is a notation of a base β of τ with recursive domain, U /= ∅ for U ∈ β and X has computable intersection: there is a computable function h : ⊆ Σ∗ × Σ∗ → Σω such that for all u, v ∈ dom(ν),
(2) ν(u) ∩ ν(v) =  {ν(w) | w ∈ dom(ν) and ι(w)  h(u, v)} .
Call two computable T0-spaces X1 = (X, τ, β1, ν1) and X2 = (X, τ, β2, ν2) re-
cursively related, if and only if there are computable functions g, g' :	Σ∗	Σω
such that

(3)
ν1(u) =	 
ι(w)Qg(u)
ν2(w)	and	ν2(v) =	 
ι(w)Qg'(v)
ν1(w) .

We are interested in computability concepts which are “robust”, that is, which do not change if a space is replaced by a recursively related one.
In the following let X = (X, τ, β, ν) be a computable T0-space. Now we introduce
the standard representation of X.
Definition 2.4 [standard representation δ of X] Define the standard representation
δ : ⊆ Σω → X as follows: δ(p) = x iff
u ∈ dom(ν) if ι(u)  p
{u ∈ dom(ν) | x ∈ ν(u)} = {u | ι(u)  p}.
A δ-name p of an element x ∈ X is a list of all words u such that x ∈ ν(u).
The definition of δ corresponds to the definition of δ' in Lemma 3.2.3 of [14], in
particular, δ is admissible with final topology τ (Sec. 3.2 in [14]).
Definition 2.5 [union representation of open and closed sets]
Define the union representation θ : ⊆Σω → τ of the set of open subsets by

dom(θ) := {q ∈ Σω|u ∈ dom(ν) if ι(u)  q} and θ(p) := 
ι(u)Qp
ν(u) .

Define the union representation ψ : ⊆Σω → τc of the set of closed subsets by
ψ(p) := X \ θ(p) .
Thus, θ(p) is the union of all ν(u) such that u is listed by p. The union represen- tation of the closed sets is defined by the union representation of their complements.
For technical reasons we define a notation ν∗ : ⊆Σ∗ → {M⊆β | M is finite} of all finite sets of base elements by dom(ν∗) := {w ∈ Σ∗ | u ∈ dom(ν) if ι(u)  w}

ν∗(w) := {ν(u) | ι(u)  w}

and a notation θ∗ :	Σ∗	τfin of all open sets that can be written as the union of finitely many base elements by
θ∗(w) :=  ν∗(w).
The representations δ and θ are not only very natural, but they can be charac- terized up to equivalence as maximal elements among representations for which the element relation is open or r.e., respectively. Furthermore “O = ” is θ-r.e., count- able union on τ is ([θ]ω, θ)-computable and intersection is (θ, θ, θ)-computable. Also finite intersection on the base is computable:
ν∗ ≤ θ. 
where	ν∗ is a notation of the set of all open sets which equal to an intersection of finitely many base elements ([9]). Since w	Σ∗ is a prefix of some p	dom(δ) iff
 ν∗(w) /= ∅, the set of all finite prefixes of δ-names
P := {w ∈ Σ∗ | (∃ p ∈ dom(δ)) w и p} is r.e. .
Definition 2.6 [inner representation of closed sets] Define the inner representation
ψ< : ⊆Σω → τc as follows: ψ<(p) = A iff
u ∈ dom(ν) if ι(u)  p,
{w | ι(w) p} = {w | ν(w) ∩ A /= ∅} .
A topological space is a T2-space (also called Hausdorff space), if for all x, y  X such that x = y, there are disjoint open sets O, O'  τ such that x  O and y  O'. A subset K  X of a Hausdorff space (X, τ ) is compact, if every open cover of X by elements of the base has a finite subcover. Let
K(X) := {K⊆X | K compact}
denote the set of all compact subsets of a Hausdorff space (X, τ ). We write instead of	(X), if there is no need to specify the space or if it’s obvious which space we refer to.
The following definitions are generalizations of the cover representations of the compact sets in R introduced in [14], see also [7] and [9].
Definition 2.7 [representations of compact sets] Let X = (X, τ, β, ν) be a com- putable T0-space and let (X, τ ) be a Hausdorff space.
Define the cover representation κ : ⊆ Σω →K as follows: K = κ(p) iff
w ∈ dom(θ∗) if ι(w)  p,
{w ∈ Σ∗ | ι(w)  p} = {w ∈ Σ∗ | K⊆θ∗(w)}.

Define the minimal cover representation κmc :	Σω	as follows: K =
κmc(p) iff
w ∈ dom(θ∗) if ι(w)  p,
{w ∈ Σ∗ | ι(w)  p} = {w ∈ Σ∗ | K⊆θ∗(w) and (∀ι(u)  w) ν(u) ∩ K /= ∅}.
For compact K and open O, “K  O” is (κ, θ)-r.e., on compact sets, union is (κ, κ, κ)-computable and countable intersection is ([κ]ω, κ)-computable and for

closed A and compact K the mapping (A, K) → A ∩ K is (ψ, κ, κ)-computable. Finally, κmc ≡ κ ∧ ψ<.
Next we introduce an effective version of the Hausdorff property and an effective version of locally compactness.
Definition 2.8 [computably Hausdorff] A computable T0-space X = (X, τ, β, ν) is called computably Hausdorff if there exists an r.e. set H dom(ν)  dom(ν) such that

​
​
(∀(u, v) ∈ H)	ν(u) ∩ ν(v) = ∅,
(∀x, y ∈ X with x /= y) (∃(u, v) ∈ H) x ∈ ν(u) ∧ y ∈ ν(v).
It can be shown that X is computably Hausdorff iff
{(x, y) ∈ X × X | x /= y} is (δ, δ) − r.e..

Furthermore, for computably Hausdorff spaces it is κ ≤ ψ.
A topological space (X, τ ) is called locally compact, if for every point x  X, there exists a neighborhood O of x such that the closure O¯ is compact. Next we introduce an effective version of locally compactness by means of the representation κ of the compact subsets of a Hausdorff space.
Definition 2.9 [computably locally compact] A computable T0-space X' = (X, τ, β', ν') is called computably locally compact if (X, τ ) is a Hausdorff space and there is some computable T0-space X = (X, τ, β, ν) such that CLS : β	(X) defined by CLS(U ) := U¯ is (ν, κ)-computable and X' and X are recursively related.
The definition of computably locally compactness ensures its robustness. In the following if X = (X, τ, β, ν) is a computably locally compact space, we suppose CLS to be (ν, κ)-computable (without changing the base or its notation).
If X is a computably locally compact space, then it is locally compact since the closure of each base element is compact. Therefore X is Tychonoff, thus regular (and a Hausdorff space) and even metrizable since X is second countable ([5]).
For computably locally compact spaces, “U¯ ⊆O” is (ν, θ)-r.e., “O¯⊆O'” is (θ∗, θ)-
r.e and the multi-function F : ⊆K × τ Σ τ defined by
U ∈ F(K, O) : ⇐⇒ K⊆U⊆U¯ ⊆O
is (κ, θ, θ∗)-computable. For more details see [9].

Representations of Fωω
In [14], Def. 2.3.10 a representation ηωω : Σω  Fωω of the set Fωω of the partial continuous functions f :  Σω	Σω with Gδ-domain (i.e., dom(f ) is a countable intersection of open sets) is introduced, which can be considered as a Type-2 version of an “admissible Go¨del numbering” of the computable number functions. In the following let η := ηωω. Since its definition is too abstract for some applications we introduce other equivalent ones.

Definition 3.1 [representations of Fωω ]
Let M be a Type-2 machine which on input p, q , p, q  Σω works in stages n = 0, 1,... as follows: In Stage 0 it does nothing. For n  1 let zn−1 be the word on the output tape before Stage n. Then in Stage n the machine M searches for the first subword ι y, z , y, z Σ∗, of p with y и q and zn и z and extends zn−1 on the output tape to z. (If there are no such words y, z then the machine remains in Stage n forever) Define a representation η¯ : Σω → Fωω by η¯p(q) := fM ⟨p, q⟩.
Let η' be η¯ restricted to those r Σω listing some consistent set V Σω  Σω , where consistent means
 (u, v) ∈ V ∧ (u', v') ∈ V ∧ u ± u'  =⇒ v ± v'
Let ηˆ be η¯ restricted to those r ∈ Σω that list the graph of some monotone total function h : Σ∗ → Σ∗.
By [14], Thm. 2.3.7, f ∈ Fωω iff there is some monotone function h : Σ∗ → Σ∗ such that f = hω, i.e., f (p) = q ⇐⇒ q = sup{h(w) | w и p}. If p lists the graph of some monotone total function h : Σ∗ → Σ∗, then η¯r = hω.
Lemma 3.2 η ≡ ηˆ ≡ η' ≡ η¯.

Proof of Lemma 3.2 In the following let ξx := ξωω : ⊆ Σω → Σω be the
function computed by the Type-2 machine with canonical code x ∈ Σ∗.
ηˆ ≤ η': ηˆp = η' for all p ∈ dom(ηˆ).
η' ≤ η¯: η' = η¯p for all p ∈ dom(η').
η¯ ≤ η: Let x be a codeword for the machine M defining η¯, thus fM = ξx, then
p → ⟨x, p⟩
is a computable translation from η¯ to η:
η¯p(q) = fM ⟨p, q⟩ = ξx⟨p, q⟩ = η⟨x,p⟩(q).
η ≤ ηˆ:  We define a Type-2 machine N such that fN translates η to ηˆ. On input
⟨x, p⟩ with x ∈ Σ∗,p ∈ Σω N works in stages k = 0, 1,... as follows: Let vk ∈ Σ∗ be the output of the universal machine U of ξ after |νΣ∗ (k)| steps on input (x, ⟨p, νΣ∗ (k)0ω⟩). Then on stage k N writes ι⟨νΣ∗ (k), vk⟩.
fN is total and fN ⟨x, p⟩ lists the graph of some monotone total function.
η⟨x,p⟩(q) = ηˆfN ⟨x,p⟩(q) for all q ∈ Σ :
ω
Let η⟨x,p⟩(q) = s. If v ± s there exist t, k ∈ N such that U es v after t steps on input (x, ⟨p, νΣ∗ (k)0ω⟩) with t = |νΣ∗ (k)| and νΣ∗ (k) ± q . Therefore ι⟨νΣ∗ (k), v⟩ is a subword of fN ⟨x, p⟩ and v ± ηˆfN ⟨x,p⟩(q). If q /∈ dom(η⟨x,p⟩), then the output of the universal machine U of ξ on input (x, ⟨p, q⟩) is not infinite. By definition of N there exist n ∈ N and v ∈ Σ∗ such that
ι⟨u, v'⟩  fN ⟨x, p⟩ =⇒ v' = v

for all u ∈ Σ∗ with u и q and |u|≥ n. Therefore q /∈ dom(ηˆf
⟨x,p⟩).	 

Representations of Functions in Computable T0- spaces
For computable T0-spaces X and X' let

​
​
C(X, Y) := {f : X → Y | f continuous}	and Cp(X, Y) := {f : ⊆X → Y | f continuous}

be the set of all continuous total and partial functions, respectively, from X to
Y . We will introduce three representations of Cp(X, Y) and compare them w.r.t. reducibility. The following representation has already been used in [13] (only for metric spaces) and in [7].
Definition 4.1 [open-open multi-representation] Let X and X' be computable T0- spaces. Define the multi-representation δoo : ⊆Σω Σ Cp(X, X') by
(r ∈ dom(δoo) and ι⟨u, v⟩  r) =⇒ (u, v) ∈ dom(ν) × dom(ν') ,

f ∈ δoo(r) : ⇐⇒ (∀ v ∈ dom(ν'))f−1[ν'(v)] =	 
ι⟨u,v⟩Qr
ν(u) ∩ dom(f )

Notice that every continuous function f :	X	Y has at least one δoo-name and that every δoo-name p of f is also a δoo-name of each restriction of f .
Lemma 4.2 (robustness of δoo ) Suppose X = (X, τ, β, ν), X' = (X, τ, β', ν')
Y = (Y, σ, α, μ), Y' = (Y, σ, α', μ') are computable T0-spaces with open-open multi-
representation δoo of Cp(X, Y) and δ'	of Cp(X', Y') respectively.

δoo ≡ δ'
, if X and X' are recursively related and Y and Y' are recursively

related.
δoo ≡t δ'


Proof:
We show δoo ≤ δ'

. Suppose f ∈ δoo(r), then

f−1[μ'(v')] = f−1[
(v,v')∈B'
μ(v)]



=
(v,v')∈B'


=
(v,v')∈B'
f−1[μ(v)]


  ι⟨u,v⟩Qr ν(u) ∩ dom(f )



=		ν'(u') ∩ dom(f )
(v,v')∈B' ι⟨u,v⟩Qr (u,u')∈A
holds for all v' ∈ dom(μ') and u' ∈ dom(ν'). There is a Type-2 machine that

on input r computes a sequence s such that ι⟨u', v'⟩  s iff
(∃u, v)(ι⟨u, v⟩  r ∧ (u, u') ∈ A' ∧ (v, v') ∈ B').
For δ'  ≤ δoo a similar argument holds.
For δoo ≤t δ'  use A and B' of the previous proof as oracles.


For a continuous function the preimage of an open set is open. We prove a fully computable version for partial functions.
Lemma 4.3 (pre-image of open sets) Let X1 and X2 be computable T0-spaces. Then PI : Cp(X1, X2) × τ2 Σ τ1 deﬁned by
U ∈ PI(f, V ) : ⇐⇒ U ∩ dom(f ) = f−1(V )
is (δoo, θ2, θ1)-computable.
Proof: Suppose f ∈ δoo(p) and V = θ2(q), then

f−1[θ2(q)] = f−1[
ι(v)Qq
ν2(v)]



=
ι(v)Qq
f−1[ν2(v)]


=		ν1(u) ∩ dom(f ).
ι(v)Qq ι⟨u,v⟩Qp
There is a Type-2 machine that on input p and q computes a sequence r such that
ι(u)  r iff
(∃v)(ι(v)  q ∧ ι⟨u, v⟩  p).


The next lemma is a generalization of [14, Lemma 6.2.4.4]. Notice that we consider only total continuous functions f : X1 → X2.
Lemma 4.4 (image of closed sets) Let X1 and X2 be computable T0-spaces.
Then IM : C(X1, X2) × τc → τc deﬁned by IM(f, A) := f [A] is (δoo, ψ<, ψ<)-
1	2	1	2
computable.
Proof: Let f = δoo(p) and A = ψ<(q). Then

ν2(v) ∩ f [A] /= ∅ ⇐⇒ ν2(v) ∩ f [A] /= ∅
⇐⇒ f−1[ν2(v)] ∩ A /= ∅



ι⟨u,v⟩Qp
ν1(u) ∩ A /= ∅.

There is a Type-2 machine that on input p and q computes a sequence r such that

ι(v)  r iff

(∃u)(ι(u)  q ∧ ι⟨u, v⟩  p).



Since the standard representation δ of a computable T0-space is admissible, by the main theorem ([14], Thm. 3.2.11) a partial function f : X X' between computable T0-spaces is topological continuous iff it has a continuous realization f ∈ Fωω. In the following any η-name of a realization of f is a name of f .
Definition 4.5 [multi-representation via realization] Let X and X' be computable T0-spaces with standard representations δ and δ' respectively. Define the multi- representation δ→ : ⊆Σω Σ Cp(X, X') by
f ∈ δ→(r) : ⇐⇒  f ◦ δ(p) = δ' ◦ ηr(p) whenever δ(p) ∈ dom(f ) where η is the standard representation of Fωω (Def. 2.3.10 in [14]).

Σω	ηr

) Σω



'

p

f ◦ δ(p)
ηr
ηr(p)


'

δ	δ		=	δ	δ δ' ◦ ηr(p)
v	v	v	v
X	f	) X'	x	f	) f (x)


Fig. 2. f ∈ δ→(r)
The representation η can be replaced by any equivalent one. Notice that the restrictions of δ→ and δoo to the set C(X, X') of the total continuous functions are single-valued representations.
Theorem 4.6 (equivalence) δ→ ≡ δoo, if X, X' are computable T0-spaces.

Proof: δ→ ≤ δoo:
Let h : ⊆ Σ∗ → Σω be a computable translation from

ν∗ to θ (4), let P be the

r.e. set of all prefixes of elements in dom(δ) (5) and let U be a universal machine of ηωω.
Suppose ηp realizes f and δ(p)  dom(f ). If the machine U on input (p, q) after some t steps has read the prefix y of q and has written the word z, then f [  ν∗(y)]  ν'(v) whenever ι(v)  z. Since the set P is r.e. and  ν∗  θ for every
v we can list words u0, u1,... such that f−1[ν'(v)] = dom(f )   i ν(ui).  More
precisely, there is a Type-2 machine M that on input p computes a sequence r such that ι u, v  r iff for some t  N and some y  P
on input (p, y0ω ) in t steps U reads exactly y
from the 2nd input tape and writes z on the output tape and
ι(u)  h(y) and ι(v)  z.

Now let f ∈ δ(p) and r = fM (p). Suppose ι⟨u, v⟩  r. Then for some t, y the above conditions hold true. We can conclude f [ν(u)]⊆ν'(v), hence

dom(f ) ∩	 
ι⟨u,v⟩Qr
ν(u)⊆f−1[ν'(v)].

On the other hand suppose x  f−1[ν'(v)]. Then x  dom(f ) and δ(q) = x for some q  dom(δ). There are some t, y such that the machine U on input (p, q) in t steps has written ι(v) (somewhere on its output tape) and reads exactly the prefix y form the 2nd input tape. Then the machine U also on input (p, y0ω ) in t steps writes ι(v) and reads exactly the prefix y form the 2nd input tape. Since
x = δ(q) ∈  {ν(w) | ι(w)  y} =  {ν(w) | ι(w)  h(y)} ,
there is some u such that x	ν(u) and ι(u)  h(y), hence some u such that ι u, v
is listed by M on input p. Therefore,
f−1[ν'(v)]⊆dom(f ) ∩  {ν(u) | ι⟨u, v⟩  r. 
This shows that the machine M translates δ→ δoo.
δoo ≤ δ→:	There is a Type-2 machine M , which on input (p, q) ∈ Σω × Σω computes a list of all ι(v) such that for some u, ι⟨u, v⟩  p and ι(u)  q.
If f ∈ δoo(p) and x = δ(q) ∈ dom(f ) then f (x) = δ'(fM (p, q)). By the smn- theorem for η there is a computable function h : Σω → Σω such that fM (p, q) = ηh(p)(q). The function h translates δoo to δ→.	 
For all f ∈ Cp(X, X') the following holds:
(∀x ∈ dom(f ))(∀V ∈ β',f (x) ∈ V )(∃U ∈ β) (x ∈ U ∧ f [U ] ⊆ V ).
The open set U does not depend continuously on x and V , there is, however, a continuous multi-function.
Lemma 4.7 In general, for f ∈ Cp(X, X') there is no continuous (single-valued) function fˆ : ⊆X × β' → β with
dom(fˆ) := {(x, V ) ∈ X × β' | x ∈ dom(f ) ∧ f (x) ∈ V }
(∀(x, V ) ∈ dom(fˆ))[x ∈ fˆ(x, V ) ∧ f [fˆ(x, V )] ⊆ V ]
Proof: Let X = X' := (R, τR, β, ν) where ν is a standard notation of all rational intervals. Let f (x) := x3 and suppose fˆ :  R  Cb(1)  Cb(1) such that (12,13) is (δ, ν, ν)-continuous. Then g : R β defined by g(x) := fˆ(x, (0; 2)) is (ρ, ν)- continuous and therefore constant on its domain (0; 3 2) (Lemma 4.3.15 in [14]).
Therefore, there are rational numbers a, b such that fˆ(x, (0; 2)) = (a; b) for all
x	(0; √3 2).  Then (0; √3 2)  (a; b) and (a3; b3)  (0; 2).  This cannot be true for
ratinal numbers a, b.	 


Lemma 4.8 Let X, X' be computable T0-spaces. For f ∈ Cp(X, X') deﬁne
⊆X × β' Σ β by
dom(fˆ) := {(x, V ) ∈ X × β' | x ∈ dom(f ) ∧ f (x) ∈ V }
fˆ :

U ∈ fˆ(x, V ) : ⇐⇒ x ∈ U ∧ f [U ] ⊆ V.

Then fˆ is (δ, ν', ν)-continuous.
Proof:  Consider the oracle-machine M that on input  p, w	Σω and oracle
o	Σω , where ι u, v  o	f [ν(u)]	ν'(v) in stage k works as follows:
if ι u, w  o<k and ι(u) p<k then M writes u. Then fM is a continuous realization of fˆ.	 

Definition 4.9 [multi-representation via pointwise continuity] Let X and X' be computable T0-spaces and let δ be the standard representation of X. Define the pointwise multi-representation δˆ→ : ⊆Σω Σ Cp(X, X') by f ∈ δˆ→(r), iff
ν ◦ ηr⟨p, w⟩∈ fˆ◦ [δ, ν']⟨p, w⟩, whenever (δ(p), ν'(w)) ∈ dom(fˆ) or equivalently,
(δ(p) ∈ ν ◦ ηr⟨p, w⟩ and f [ν ◦ ηr⟨p, w⟩]⊆ν'(w) for δ(p) ∈ ν'(w) .
Theorem 4.10 (equivalence)	δˆ→ ≡ δoo.
Proof. δoo	δˆ→: Let f	δoo(r) and let t be a codeword for the oracle-machine M described in the proof of Lemma 4.8, thus fM = ξt. Then
r → ⟨t, r⟩
is a computable translation from δoo to δˆ→:
fM ⟨r, ⟨p, w⟩⟩ = ξt⟨r, ⟨p, w⟩⟩ = η⟨t,r⟩⟨p, w⟩.
δˆ→ ≤ δoo:	Let f ∈ δˆ→(r), where r lists the graph of some monoton function
h : Σ∗ → Σ∗. The machine M works on stage k as follows: if ι⟨x, y⟩  r<k and there
exist subwords ι(v)  x ∧ ι(u)  y such that ν(v) ∈ dom(ν') ∧ ν(u) ∈ dom(ν) then M writes ι⟨u, v⟩.	 
Next we define a compact-open representation of the set of total continuous functions.
Definition 4.11 [compact-open representation] Let X be a computably locally compact space and X' a computable T0-space. Define the compact-open repre- sentation δco : ⊆Σω → C(X, X') by

δco(p) := f ⇐⇒ {(u, v)|ι⟨u, v⟩  p} = {(u, v)|f [ν(u)] ⊆ ν'(v)}
Theorem 4.12 (equivalence) Let X be a computably locally compact space and X' a computable T0-space. Restricted to C(X, X') the following equivalences hold true


Proof.
δoo ≤ δco :
Let f = δoo(p). It is
δoo ≡ δco ≡ δ→.


	
f [ν(u)] ⊆ ν'(v) ⇐⇒ ν(u) ⊆ f−1[ν'(v)] =	 
ι⟨uv,v⟩Qp
ν(uv)

There is a Type-2 machine that on input p computes a sequence r such that
ι⟨u, v⟩  r iff
(∃w)(∀ι(uv)  w)(ι⟨uv, v⟩  p ∧ ι(w)  q) where q is a κ-name of ν(u).
δco ≤ δ→ :
Let f = δco(p) and δ(q) = x. It is

f (x) ∈ ν'(v) ⇐⇒ (∃u)(x ∈ ν(u) and f [ν(u)]⊆ν'(v)) as X is regular.
There is a Type-2 machine M that on input p and q computes a sequence r
such that ι(v)  r iff
(∃u)(ι(u)  q ∧ ι⟨u, v⟩  p) .
By smn-Theorem there is a function r such that fM (p, q) = ηr(p)(q), that is r
translates δco to δ→.
δ→ ≤ δoo :
Since δ→	δoo holds for computable T0-spaces, δ→	δoo holds for com- putably locally compact spaces obviously.


Stone-Weierstrass Representation
By the Weierstrass approximation theorem the set of polynomial functions f : [0; 1] → R is dense in the space C[0; 1] of real valued continuous functions on the unit interval with the metric d(f, g) := maxx∈[0;1] f (x) g(x) . Obviously, also the countable set Pn of polynomial functions with rational coefficients is dense in the space C[0; 1].
For a natural notation νPn of the set Pn, X := (C[0; 1], d, Pn, νPn) is a com- putable metric space [14, Section 8.1]. By [14, Section 6.1] the Cauchy representa- tion δ[0;1] of X is equivalent to the representation [ρ  ρ][0;1] (where ρ is the stadard representation of the real numbers). This is a computable version of the Weierstrass approximation theorem.
In this section we prove a computable version of the more general Stone- Weierstrass approximation theorem for compact Hausdorff spaces. A set A of real-valued functions on a set X is an algebra if f · g ∈ A and af + bg ∈ A for all a, b ∈ R, whenever f, g ∈ A. A separates the points of X, if for all x, y ∈ X such that x /= y there is some function f ∈ A such that f (x) /= g(x)
Theorem 5.1 (Stone-Weierstrass [3]) Let X be a compact Hausdorff space. If A is an algebra of continuous real-valued functions on X that contains the constant functions and separates the points of X, then A is dense in the space C(X) of continuous real-valued functions on X with metric d(f, g) = maxx∈X |f (x) − g(x)|.

In the following let X = (X, τ, β, ν) be a computable T0-space that is computably Hausdorff and computably locally compact with standard representations δ, θ, ψ and κ of the points, the open sets, the closed sets and the compact sets, respectively. Furthermore, let κmc be the minimal-cover representation of the compact sets. The support supp(f ) of a function f : X → R is the closure of {x|f (x) /= 0}.
First, we show that there is a computable sequence of continuous functions with compact support, which separates the points of X.
Lemma 5.2 There is a sequence (ei)i of continuous functions ei : X   R such that
{ei | i ∈ N} separates the points of X,
there is a (νN, κ)-computable function h such that supp(ei)⊆κ ◦ h(i),
the function (i, x) '→ ei(x) is (νN, δ, ρ)-computable.
Proof. In [9] it is shown that the space X is computably regular. This means that there is a computable function t3 : Σ∗ Σ∗  Σω such that R := dom(t3) is recursively enumerable,

(∀v ∈ dom(ν)), ν(v)=	 
(u,v)∈R
ν(u),  and

(∀(u, v) ∈ R) ν(u) ⊆ ψ(t3 (u, v)) ⊆ ν(v) .
In [6] for for a computably regular space from a computable enumeration (ui, vi)i
of R a sequence of continuous functions (fi)i is constructed such that

​

​
(∀ i, x)0 ≤ f⎧i(x) ≤ 1 ,

i

⎩ 1 if x /∈ ν(vi) .
(i, x) '→ fi(x) is (νN, δ, ρ)-computable Define ei(x) := 1 − fi(x).
If x = y then by (16) and the Hausdorff property there is some i such that x	ν(ui) and y	ν(vi). By (19), ei(x) = 1 and ei(y) = 0. Therefore, ei	i	N separates the points of X.
By (18) ei(x) = 0 for x  ν(vi), hence the support of ei is in the compact set h(i) := ν(vi). The function h is (νN, κ)-computable as the space is computably locally compact.
Finally (iii) follows from (20).	 
For K⊆X let δK : ⊆ Σω → K be the restriction of δ to K and let C(K) be the set continuous real functions f : K → R. Since δ is admissible also δK is admissible and so [δK → ρ] is a representation of C(K) [14, Sections 3.2, 3.3]. For the set Cp(X, R) of partial continuous functions we use the multi-representation [δ →p ρ].
Define the “restriction” operator resK : ⊆ Cp(X, R) → C(K) by dom(resK) = 
{f ∈ Cp(X, R) | K⊆dom(f )} and graph(resK(f )) := graph(f ) ∩ K × R (abbrevia- tion: fK := resK(f )). Define the “embedding” operator embK : C(K) → Cp(X, R)

by graph(embK(g)) := graph(g).
Lemma 5.3	(i) The restriction resK is ([δ →p ρ], [δK → ρ])-computable.
(ii) The embedding embK is ([δK → ρ], [δ →p ρ])-computable. In both cases the identity on Σω is a realizaton.
Proof:	Suppose K⊆dom(f ). Then
f ∈ [δ →p ρ](p)
=⇒ (∀ q, δ(q) ∈ dom(f )) fδ(q) = ρηp(q)
=⇒ (∀ q, q ∈ dom(δK)) fδK(q) = ρηp(q)
=⇒ resK(f ) = [δK → ρ](p) .
On the other hand,
g = [δK → ρ](p)
=⇒ (∀ q ∈ dom(δK)) gδK(q) = ρηp(q)
=⇒ (∀ q, δ(q) ∈ K) gδ(q) = ρηp(q)
=⇒ embK(g) ∈ [δ →p ρ](p) .


Let M = (M, d, D, α) such that (M, d) is a metric space and α is a notation with recursive domain of the dense set D. According to [14, Section 8.1], M is a semi-computable metric space if the distance d is (α, α, ρ>)-computable on D and a computable metric space if d is (α, α, ρ)-computable on D. The Cauchy representation δC of M is defined by
δC(p) = y ⇐⇒ p = ι(u0)ι(u1) ...  such that (∀ i) d(α(ui), y) ≤ 2−i .
For compact K⊆X define a metric dK : C(K) × C(K) → R on C(K) by
dK(f, g) := max f (x)	g(x) .
x∈K
Lemma 5.4 The function dK is ([δK → ρ], [δK → ρ], ρ>)-computable for κ- computable K and ([δK → ρ], [δK → ρ], ρ)-computable for κmc-computable K.
Proof:	For the compact subsets of the real numbers let κR be the cover repre-
sentation and let let κR  be the minimal-cover representation (called κc and κmc,
respectively, in [14, Section 5.2]). By [14, Lemma 5.2.6], L '→ max L for compact
L ∈ R is (κR, ρ>)-computable and (κR , ρ)-computable.
Since evaluation (f, x)	f (x) is ([δK		ρ], δK, ρ)-computable, the function (f, g, x)	f (x)	g(x) is ([δK	ρ], [δK	ρ], δK, ρ)-computable. Therefore, the
function (f, g)	h, h(x) := f (x)	g(x) , is ([δK	ρ], [δK	ρ], [δK	ρ])- computable. By lemma 5.3 the function (f, g)	embK(h) is ([δK		ρ], [δK
ρ], [δ	p ρ])-computable and hence ([δK	ρ], [δK	ρ], δoo)-computable by Theo- rem 4.6.
For r :	X	R and compact K' dom(r), the function (r, K')	r[K'] is (δoo, κ, κR)-computable by [7, Lemma 12].  From Lemma 4.4 we can conclude

that the function is also (δoo, κmc, κR
)-computable.	Therefore, r '→ max r[K]

is (δoo, ρ>)-computable for κ-computable K and (δoo, ρ)-computable for κmc- computable K.
Since dK(f, g) = max( f	g [K]), the lemma follows by composition of the above functions.		 
Theorem 5.5 (computable Stone-Weierstrass) For every κ-computable set K
there is a notation νK : ⊆ Σ∗ → DK such that MK = (C(K), dK, DK, νK) is a
semi-computable metric space, the Cauchy representation δC of which is equivalent
to [δK	ρ]. Furthermore, if K is κmc-computable then MK is a computable metric space.
Proof. Let (ei)i be the sequence of functions from Lemma 5.2. Define a canonical notation ν1 of the finite products of the ei with rational coefficients by
ν1(ι(w))(x) := νQ(w)
ν1(ι(w)0n1 1 ... 0nk 1 := νQ(w) · en · ... · en
k
and the notation α :  Σ∗  D of the rational linear span D of the ei and the constant 1 function on X by
α(ι(v1) ... ι(vm)) := ν1(v1)+ ... + ν1(vm) .
From Lemma 5.2(iii) we obtain
α ≤ [δ → ρ] .
Define a notation νK : ⊆ Σ∗ → DK (with recursive domain) by
DK := {fK | f ∈ D},	νK(u) := α(u)K(= resK(α(u))) .
By Lemma 5.2(i), the set DK separates the points of K. The set DK is dense (with respect to dK) in the linear span A of the eiK and the constant 1 function on
K. By the (classical) Stone-Weierstrass theorem, A is dense in C(K). Therefore,
DK is dense in C(K).
By (21) there is a computale function h such that α(u) = [δ → ρ]h(u), hence
α(u) ∈ [δ →p ρ]h(u). By Lemma 5.3, νK(u) = resK(α(u)) = [δK → ρ]h(u), hence
νK ≤ [δK → ρ].
It follows from Lemma 5.4 that dK is (νK, νK, ρ>)-computable for κ-computable K and (νK, νK, ρ)-computable for κmc-computable K. Therefore, the metric space MK is semi-computable for κ-computable Kand computable for κmc-computable K.
Finally, we have to show δC ≡ [δK → ρ].
“[δK → ρ] ≤ δC ”: By Lemma 5.4 and since νK ≤ [δK → ρ], the relation
{(f, g, i) ∈ C(K) × DK × N | dK(f, g) < 2−i} is ([δK → ρ], νK, νN)-recursively enumerable. Therefore, for every f ∈ C(K) and every i some u can be computed such that dK(f, νK(u)) < 2−i. We conclude [δK → ρ] ≤ δC .
“δC ≤ [δK → ρ]”: By the definition of the Cauchy representation, the multi-
function f |Σ (gi)i such that f (x)  gi(x) for all x is (δC , [νK]ω )-computable. Since νK  [δK  ρ], the function ((gi)i, x)  (gi(x))i is ([δK  ρ], δK, ρ)-computable. Since the limit of real Cauchy sequences is computable by [14, Theorem 4.3.7], the

function (f, x) '→ f (x) is (δC , δK, ρ)-computable, hence f '→ f is (δC , [δK → ρ])-
K	K
computable. This means δC ≤ [δK → ρ].

References
Brattka, V. and G. Presser, Computability on subsets of metric spaces, Theoretical Computer Science
305 (2003), pp. 43–76.
URL  http://dx.doi.org/10.1016/S0304-3975(02)00693-X

Brattka, V. and K. Weihrauch, Computability on subsets of Euclidean space I: Closed and compact subsets, Theoretical Computer Science 219 (1999), pp. 65–93.
URL  http://dx.doi.org/10.1016/S0304-3975(98)00284-9
Cohn, D. L., “Measure Theory,” Birkh¨auser, Boston, 1980.
Collins, P., Continuity and computability on reachable sets, Theoretical Computer Science 341 (2005),
pp. 162–195.
Engelking, R., “General Topology,” Sigma series in pure mathematics 6, Heldermann, Berlin, 1989.
Grubba, T. , M. Schr¨oder and K. Weihrauch. Computable metrization. Submitted to Mathematical Logic Quaterly 2007.
Grubba, T. and K. Weihrauch, A computable version of Dini’s theorem for topological spaces, in:
P. Yolum, T. Gu¨ng¨or, F. Gu¨rgen and C. O¨ zturan, editors, Computer and Information Sciences - ISCIS 2005, Lecture Notes in Computer Science 3733 (2005), pp. 927–936, 20th International Symposium, ISCIS, Istanbul, Turkey, October 2005.
Grzegorczyk, A., Computable functionals, Fundamenta Mathematicae 42 (1955), pp. 168–202.
Grubba, T. and Y. Xu. Computability on subsets of locally compact spaces. In preparation.
Lacombe, D., Classes r´ecursivement ferm´es et fonctions majorantes, Comptes Rendus Acad´emie des Sciences Paris 240 (1955), pp. 716–718, th´eorie des fonctions.
Schr¨oder, M., Effective metrization of regular spaces, in: K.-I. Ko, A. Nerode, M. B. Pour-El,
K. Weihrauch and J. Wiedermann, editors, Computability and Complexity in Analysis, Informatik Berichte 235 (1998), pp. 63–80, cCA Workshop, Brno, Czech Republic, August, 1998.
Schr¨oder, M., Admissible representations for continuous computations, Informatik Berichte 299, FernUniversit¨at Hagen, Hagen (2003), dissertation.
Weihrauch, K., Computability on computable metric spaces, Theoretical Computer Science 113 (1993),
pp. 191–210, fundamental Study.
Weihrauch, K., “Computable Analysis,” Springer, Berlin, 2000.
Weihrauch, K., Multi-functions on multi-represented sets are closed under flowchart programming, in: T. Grubba, P. Hertling, H. Tsuiki and K. Weihrauch, editors, Computability and Complexity in Analysis, Informatik Berichte 326 (2005), pp. 267–300, proccedings, Second International Conference, CCA 2005, Kyoto, Japan, August 25–29, 2005.
Yasugi, M., T. Mori and Y. Tsujii, Effective properties of sets and functions in metric spaces with computability structure, Theoretical Computer Science 219 (1999), pp. 467–486.
Zhong, N. and K. Weihrauch, Computability theory of generalized functions, Journal of the Association for Computing Machinery 50 (2003), pp. 469–505.
Zhou, Q., Computable real-valued functions on recursive open and closed subsets of Euclidean space, Mathematical Logic Quarterly 42 (1996), pp. 379–409.
Ziegler, M., Computability on regular subsets of Euclidean space, Mathematical Logic Quarterly 48
(2002), pp. 157–181.
Ziegler, M., Computable operators on regular sets, Mathematical Logic Quarterly 50 (2004), pp. 392– 404.
