

Electronic Notes in Theoretical Computer Science 253 (2009) 187–201
www.elsevier.com/locate/entcs

CoBiC: Context-dependent Bioambient Calculus
Luca Bortolussi 1,3
Dipartimento di Matematica ed Informatica University of Trieste, Trieste, Italy
Maria G. Vigliotti 4,2
Department of Computing, Imperial College, 180 Queen’s Gate, London SW7 2BZ, UK

Abstract
In biological phenomena like osmosis, the rate of flow of water molecules in or out of biological compartments depends on the solute concentration and on other forces, like hydrostatic pressure. A similar example is the passive transport of ions in and out the cell membrane. In this paper, we address the problem of faithfully modelling these kind of phenomena with an adequate process calculus. We enhance the ambient calculus stochastic semantics with functional rates, which are calculated by taking into account the volume of ambients and the surrounding environment. A model of osmosis in plant cells will be used as an example to show the new features of our calculus.
Keywords: Stochastic Process algebras, Markov Processes, Systems Biology, Functional rates.


Introduction
Since the article by Regev and Shapiro [10], modelling biological systems using process algebras has became very popular. In [10] it was suggested that biolog- ical molecules can be represented as processes and signalling as communication. Thus, the behaviour of a biological system can be naturally derived by the (possi- bly stochastic) semantics of the process calculi. This method proved successful for modelling signalling, biochemical and genetic networks. [2,3,4,8]. Roughly speak- ing one can see that process calculi like stochastic π-calculus, PEPA, sCCP, and

1 Email: luca@dmi.units.it
2 Email: mgv98@doc.ic.ac.uk
3 Supported by PRIN “BISCA” and FIRB LIBi.
4 Supported by EPSRC grant SPARTACOS (EP /D047587/1).

1571-0661 © 2009 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2009.10.012



Fig. 1. Graphical representation of active and passive transport

BioAmbients, are mostly suitable to model chemical reactions or systems whose behaviour is naturally modelled as exchange of signals among components.
In this work we focus on modelling transport of molecules in and out of mem- branes via process calculi. The transport of molecules can be divided in two types: passive transport and active transport.
Passive transport refers to passage of molecules that does not require any energy. A typical example is osmosis. Osmosis is the process of water passing by diffusion from a region of higher concentration to a region of lower concentration. Note that this refers to the concentration of water, not the concentration of any solutes present in the water. We will see in Section 4 how the solute affects osmosis.
Active transport is the pumping of molecules through a membrane against their concentration gradient i.e. from a compartment with lower concentration to a com- partment with higher concentration. Active transport requires proteins called trans- porters (usually located on the membrane) and consumption of energy. A graphical representation of the active and passive transport can be found in Figure 1.
To model passive or active transport using process calculi, we need the following components:
A notion of membrane or compartment that separates what is inside from what is outside;
A function that yields  internal concentration of the compartments;
A function that yields  external concentration of the compartments.
In this paper, we have modified BioAmbients [10] by introducing volumes an by allowing rates to be context-dependent. We shall concentrate on modelling passive transport, however our work can be easily adapted to model active transport.
Other people have considered either volumes or functional rates. Versari et al. [11] present a stochastic version of polyadic π-calculus, with volume dependent rates. Their notion of volume turns out to be rather similar to ours, yet their calculus does not have context-dependent rates. Regarding functional rates, they

have been introduced in some stochastic process algebras dealing with biological system: we recall BioPEPA [5], sCCP [3], and a version of π-calculus [8]. However, all these calculi do not have a notion of dynamic compartmentalisation.
The rest of the paper is organised as follows: Section 2 introduces the key ideas behind the definition of the language, Sections 3.1 and 3.2 introduce the syntax and the operational semantics, Section 4 presents the model of osmosis in detail, and Section 5 draws final conclusions and suggests future work.

Rationale behind the choice of the language
CoBic, the language that we present hereafter, is essentially Bioambients with some rather important modifications. Prior to introducing the language we explain the rationale beyond our choices.
Concentration To model either passive or active transport correctly, we need to calculate the rate at which molecules enter or exit the cell/membrane. This de- pends on the concentration and pressure; these quantities are, in turn, determined by the concentration of different substances inside and outside the membrane. To faithfully model this, we need to introduce context-dependent rates. This means that our rates are calculated via functions that consider the whole context.
Volume In consideration of defining a calculus for membranes/cells, volume is an important parameter as it can influence rates of reactions. It is known that cells modify their volumes, for instance in cell cycle or in during the intake or loss of water provided by the environment. In cells there is a physical limit to volume variation.

CoBic: language with context dependent semantics
In this section we introduce the syntax and the semantics of CoBic.

Syntax
We assume the existence of a set U of channel names and a set Uamb of ambient names, which are meant to identify the type of each ambient.
We let the Greek letters α, β, . . . range over ambient names to distinguish those from channel names. The notion of environment we have in mind will be relative to an ambient, as ambients provide a clear notion of border. In order to define the boundaries of the whole system, we will wrap it up in an impenetrable ambient. To this purpose, we introduce a special ambient name system /∈ aUmb, and let Uamb = Uamb ∪ {system}. We impose that U ∩ Uamb = ∅
We can now introduce the syntax for the extension of Bioambients.
Definition 3.1 The set of processes of CoBic (denoted by CoBic) is given by the

following syntax:
P, Q ::= 0 | Σ




i∈I


Mi.Pi | (new n) P | A⟨∼x⟩| α [P ]V | P | Q

M ::= enter n | exit n | accept n | expel n | τa | $n(x) | $n⟨m⟩
$ ::= s2s | local | p2c | c2p

We now explain the informal meaning of the syntax. The different primitives for communication and enabling ambients are inherited from BioAmbients.
Communication Communication happens on a channel n by sending on a name
-or channel- m; $n(x) stands for the input, and $n⟨m⟩ stands for output. There are three ways of communicating: channels in the same ambient perform local communication, local n(y) for the input on channel n and local n⟨m⟩ for the output of m on channel n. Inputs and outputs located in sibling ambients respec- tively perform sibling communication; s2s n(y) stands for such input and s2s n⟨m⟩ stands for output. Finally, parent to child communication happens when inputs p2c n(y) and outputs p2c n⟨m⟩ are located in parent-child ambients respectively (or vice-versa for c2p n(y) and c2p n⟨m⟩).
Ambient capabilities The capabilities such as exit n or enter n give the ambient the power to become active; enter n/accept n allow an ambient to move into a sibling, exit n/expel n allow a child ambient to leave the parent. Note that we have excluded the capability of merging two ambients, which is present in the original paper.
In general, inputs are binding operators on the arguments. This means that in the process local n(y).P the name y is bound in P , and not accessible from outside P . A similar argument applies to the other inputs in the communication primitives. The definition of free names of channels of P , written fn(P ), (and bound names of P written bn(P )) is standard, taking into account that the only binding operators are inputs and restriction. We write P{y/m} to mean the substitution of every occurrence of the name y by m in P . Similarly we write P{A/Q} to mean the substitution of every occurrence of the process A by Q in P .
0 Nil represents the inactive process.
M .P Local sum represents the standard choice. Given a set of indexes I and a permutation p on it, we write p(i)∈I Mp(i).Pp(i) to represent a reordering of the terms of the summation. We reserve the letters G, C to represent summation as in  i∈I Mi.Pp(i) = Mj.Pj + G where G =  i∈I i/=j Mi.Pi.
The process τa.P represents an exponentially distributed time delay. Its subscript
a ∈U is used to attach to each τ a specific rate function (cf. below).
(new a) P Restriction of the name a makes that name private and unique to P : the name a becomes bound in P . Restriction does not apply to ambient names.
A⟨∼x⟩ Recursion models infinite behaviour by assuming the existence of a set of equations of the form A(∼x) =df P such that {∼x}⊂ fn(P ).
α [P ]V  Ambient represents a compartment with name α that contains a process P .

Each ambient has a basic or minimal volume V ∈ R+ associated to it. Its actual volume is calculated according to Definition 3.2. In our setting, ambients can represent either physical or abstract objects. In the latter case, the volume of the ambient is 0 and it can be omitted i.e.α [S] .
P|Q Parallel composition means that P and Q are running in parallel.
We introduce now some definitions to be used in the following.
Definition 3.2 The volume Vα of a CoBic process is calculated as Vα =df ƒV (α [P ]V ), where the function ƒV : CoBic → R+ is defined as follows:

ƒV (0) =df 0 
ƒV (M.P ) =df 0 

ƒV (Σ

i∈I
Mi.Pi) =df Σ

i∈I
ƒV (Mi.Pi) = 0 

ƒV ((new n) P ) = ƒV (P )
ƒV (A⟨∼x⟩) =df ƒV (P )	if A⟨∼x⟩ = P ƒV (β [P ]V ) =df V + ƒV (P )
ƒV (P | Q) =df ƒV (P )+ ƒV (Q)
Definition 3.3 The number of ambients with name α ∈ Uamb inside another am- bient is calculated by the function ϵα : CoBic → N

  ϵ (S)	if	P = β [S]V



where ϵ 
is defined as follows:


ϵ (0) = 0 

ϵ (Σ

ϵ (M.P ) = 0 
M .P ) =df 0 

ϵ (A⟨∼x⟩) =df ϵ (P )	if A⟨∼x⟩ = P
α	a
ϵ (β [P ]V ) =  1 if β = α
ϵ (P | Q) = ϵ (P )+ ϵ (Q)
α	a	a

Semantics
The semantics of CoBic is defined by a set of reduction rules in the style of Chemical Abstract Machine [1], but it is different from standard stochastic semantics [12,6]. The main difference is the fact that rates of basic actions in CoBic are not real numbers, but rather functions depending on the context of the executing processes. These functions, in any case, depend only on the global configuration of the system,

hence in each state of a model they are evaluated to (positive) real numbers, so that from the labeled transition system a Continuous Time Markov (CTMC) Chain [9] can still be derived.
First of all, we need to define the notion of environment of a process. For convenience, we parameterize such definition w.r.t. a ﬁnite subset A ⊆ Uamb, counting how many occurrences of ambients α ∈ A are present in parallel.
Definition 3.4 The inner environment of an ambient α [S]V , w.r.t. A ⊆ Uamb is the vector νA(α [S]V ) in R|A|, defined by

νA(α [S]V ) =  ϵa(α [S]V ) 
a∈A

We now introduce the set FR of functions that will be used in defining the rates of actions. Each element of FR is a function ƒA : Rhf → R+, where A ∈ Uamb is the set of ambients on which ƒA depends and hf is the number of arguments of ƒA, depending on the type of action of which ƒA is the rate (cf. below). In general, the functions in FR will depend on the inner environment and volume of the ambient in which the corresponding action happens, and possibly also on the inner environments and the volumes of the ambients involved in the action, if any.
We can now proceed to associate a rate function to each different channel name. In general, channel names can be used to perform different kinds of actions (enter, exit, and so on), whose meaning is different. Hence, functions assigning rates to enter actions enter n need to be different from functions assigning rates of exit actions exit n (a similar argument is valid for other action’s types). Thus, we have chosen to associate a function to each channel name and action type.
Definition 3.5 Let A = {enter, exit, local, s2s, p2c, τ} be the set of action types. The function ρ : U ×A → FR associates a function from FR to each pair of channel names and action types.
The reduction rules of the operational semantics are defined in Figure 3. Before commenting them, we need to define some notational conventions that simplify their writing. If α [S]V is an ambient appearing in the left hand side of a rule, with νA,α we indicate the |A|-vector νA,α = νA(α [S]V ) (here and in the following A ⊆ Uamb) and with Vα = ƒV (α [S]V ) its volume. Furthermore, we assume that xA is always a vector of non-instantiated variables of size |A|, while y is a single non-instantiated variable. Finally, with σ we indicate either a real number r or a function ƒA(z) with non-instantiated variables z.
Each action has a rate calculated according to a rate function ρ(n, type), depend- ing on the channel and on the action type. The information needed to compute such functions is not always available at the descriptive level of each rule: in fact, some rates may depend on the context, which is not known by the agents performing the action. In order to solve this problem, we introduce a simple mechanism: some vari- ables in the function giving the rate of the rule are left non-instantiated, and will be instantiated afterwards, when the context will be “closed”, i.e. when all the agents in parallel with the communicating ones will be wrapped up in an ambient. As a

matter of fact, this is the effect of rule (AMB2), which computes the inner environ- ment and the volume of the ambient γ, substituting them into the non-instantiated variables of the rate function. Note that the fact that CoBic models are always surrounded by the special system ambient is crucial in order to guarantee that all functions appearing in the derivation rules will have all their variables sooner or later instantiated. In fact, the rule (AMB2) can be applied also to this special am- bient (as γ ∈ Uamb in the rules of Figure 3) 5 . There is another rule which deals with ambients, namely (AMB1), which is needed to deal with the case in which all variables of rate functions are already instantiated, hence the function has already been evaluated to a real number r.
We now discuss the dependence of rate function on action types in more detail.
enter: we assume that the rate of entrance of an ambient α into an ambient β may depend on the inner environment and the volume of their parent ambient. It may also depend on the inner environment of the accepting ambient β, and on volumes of α and β. The parent ambient is however not specified in the left hand side of the rule for enter/accept in Figure 3, hence we leave some variables non- instantiated in its rate function, namely those for the state of the environment
(x) and for the volume of the parent ambient (y). According to the previous discussion, these values will be set by rule (AMB2), when applied to the parent ambient of α and β.
exit: we assume that the rate of an exit action can depend on the inner environment of the expelling ambient, on its volume and on the volume of the expelled ambient.
local: the rate of a local communication can depend on the volume of the ambient in which it happens, and also on its inner environment.
s2s: similarly to a local communication, a sibling to sibling one will have a rate dependent on the volume and the inner environment of the parent ambient of the two siblings.
p2c–c2p: the rate for parent to child communication may depend on the inner environments and the volumes of the parent and the child ambients.
τ -actions: silent actions are indexed by names, hence ρ assigns a rate function also to them, depending on the inner environment and the volume of the containing ambient.
The rules dealing with parallel composition, restriction, structural congruence are similar to the ones in Bioambients [12].
In the previous discussion, we did not provide a specific functional form for the rates. Rate functions can range from constant functions to very complex functions of the environment. They will be specified by the programmer and suggested by the model under study. This gives a great deal of flexibility to the language. In the next section we will exemplify this by dealing with osmosis.
Remark 3.6 The rate functions assigned by ρ do not need to depend on all the

5 Note that enter and exit rules in Figure 3 cannot be applied to the ambient system, (α, β ∈ Namb /$
system). This means that no ambient can enter of exit from system, hence this ambient is impenetrable.



Σi∈I Mi.Pi ≡ Σp(i)∈I

(new n) 0  ≡  0	(new m) (new n) P ≡ (new n) (new m) P

Fig. 2. Structural congruence
G + τ .P fA (xA,y)
a	−→	P, with ρ(a, τ )= fA
α [(G + enter n.P ) | Q]V1 | β [(G' + accept n.R) | S]V2 −σ→ β [α [P | Q]V1 | R | S]V2
with σ = fA(νA,β, xA, Vα, Vβ, y), fA = ρ(n, enter)
α [β [(G + exit n.P ) | Q]V1 | (G' + expel n.R) | S]V2 −σ→ α [P | Q]V1 | β [R | S]V2
with σ = fA(νA,α, Vα, Vβ ), fA = ρ(n, exit)
(C + local n(y).P ) | (C' + local n⟨m⟩.Q) −σ→ P{y/m}| Q
with σ = fA(xA, y), fA = ρ(n, local)
α [(C + s2s n(y).P )]V1 | β [(C' + s2s n⟨m⟩.Q)]V2 −σ→ α [P{y/m}]V1 | β [Q]V2
with σ = fA(xA, y), fA = ρ(n, s2s)
γ [β [(C + c2p n(y).P ) | R]V1 | (C' + p2c n⟨m⟩.Q) | S]V2 −σ→ γ [β [P{y/m}| R]V1 | Q | S]V2
with σ = fA(νA,γ , νA,β, Vγ , Vβ ), fA = ρ(n, s2s)
γ [β [(C + c2p n⟨m⟩.Q) | R]V1 | (C' + p2c n(y).P ) | S]V2 −σ→ γ [β [Q | R]V1 | P{y/m}| S]V2
with σ = fA(νA,γ , νA,β, Vγ , Vβ ), fA = ρ(n, c2p)


(PAR)
P −σ→ P'
P | R −σ→ P' | R

(NEW)
P −σ→ P'
(new n) P −σ→ (new n) P'

P −r→ P'
(AMB1)		
γ [P ]V −r→ γ [P ']V

(AMB2)
f (x ,y)
−→	P

V  fA(νA,γ ,Vγ )	' V

P ≡ P' −σ→ Q' ≡ Q
γ [P ]	−→	γ [P ]

(CONG)


P −σ→ Q


with α, β ∈ Uamb,γ ∈ Uamb


Fig. 3. Reduction Relation
values described in the rules. In the simplest case, they can be taken as constant functions. If all the rate functions are constant, we obtain the BioAmbients calculus as a subset of CoBic.
Definition 3.7 Let P be a process. A CoBic model is written as system [P ]V .
Models enjoy the nice property that the rate of each transition is fully resolved to a real number.
Proposition 3.8 Let M, M' be two CoBic models, such that M −σ→ M'. Then σ ∈
R.
The semantics as CTMC is derived in the standard way [12,6]. Moreover, since our rates depend on the state of the system only, our CTMC is time-homogenous,

which implies that our system can be simulated, for instance, via direct method [13].


Osmosis
In this section we provide a detailed example of the osmosis to to show how CoBic
can be put to use.

The physical process
Osmosis is the physical process regulating the quantity of water within a cell. It is a passive process: the cell consumes no energy, as water movement is driven by physical forces arising due to different energy levels between the cell and its sur- rounding environment. Water tends to flow from regions of low solute concentration to regions of higher concentration (Figure 1). The cell membrane is selectively per- meable: just small, non-charged molecules can pass through freely, other molecules (charged ions and large molecules, like proteins) can be incorporated only by an active cellular process or through protein channels. Therefore, most of the sub- stances dissolved in water cannot cross the cell membrane passively, but water can. Brownian motion of water molecules makes them bump into the cell membrane, so that some of them can cross it, inwards or outwards. The presence of a solute in water reduces the freedom of movement of water molecules (some of them are tied to the solute by electrostatic forces), hence water molecules in a concentrated solution tend to cross the membrane less frequently. Consequently, the net balance of water flow is from regions with low concentration (more freedom of movement) to regions of high concentration (less freedom of movement).
A flow of water into the cell will increase its volume; a flow of water outside the cell will reduce it. If the volume variation becomes significant, the cell can collapse (plasmolysis) or burst. In plants, in particular, the cell membrane is surrounded by a semi-rigid structure called the cell wall. Thus, an increase in water quantity (hence volume) induces an increase of the pressure exerted by the cell wall. Pressure is another important regulator of osmosis: high pressure increases the frequency of pumping of water molecules into the cell membrane, hence the flow of water outwards of the cell. The gradients of water flow induced by concentration and pressure are important mechanisms for plants, as they also keep cells turgid in non-ligneous parts of the plants, like stems.
There are also other forces that take part in the osmotic process, like gravity and surface adherence between water and other materials. However, they are not relevant to our work. We refer the reader to [7] for further details.
In order to quantify the rate of water flow, we need to delve into some physical notion. The rate of osmosis depends on the difference in water potential, a measure
of Gibbs free energy associated to the water status. The water potential, historically denoted by ψw, is the sum of two terms, ψw = ψs + ψp:
The solute potential ψs, depends on the concentration of solutes dissolved in

water. For a dilute solution of non-dissociating substances 6 , like sucrose, there is a simple expression for such potential, the van Hoff’s equation: ψs = −RTcs, where R is the gas constant, T is the absolute temperature, and cs is the solute concentration. An important issue is that this formula is independent from the type of solute.
The pressure potential ψp, depends -in cells- mainly on the elastic properties of their membrane and of the cell wall. For simplicity, in this work we assume ψp to be linearly depended on the cell volume.
Once we have computed the water potentials of the cell and its environment, we can give an expression of the rate of flow of water molecules into and from the cell. According to [7], the total flow is


J = Lp
V
Δψw,

where Lp is the hydraulic conductivity constant (depending on semipermeability properties of the cell membrane), S is the cell’s surface, V is the cell’s volume and Δψw = ψw(ext) −ψw(int) is the difference in water potential between the external wa- ter potential and internal water potential. The sign of ψw determines the direction of the flow (positive if directed towards the cell, negative otherwise).

Model of Osmosis in CoBic
In CoBic modelling osmosis is quite natural because of the functional definition of rates. The model is shown in Table 1. Water is free to get in and out the cell, while the membrane is impermeable to the solute. The flow of ambients into the cell is modeled with an enter/accept pair, similarly the exit of water ambients towards the environment is modeled by an exit/expel pair. As we can see, only one accept/expel agent is active in the cell, and it represents the membrane semipermeability.
The model in Table 1 is not complete: we still have to specify rates and volumes. In order to do this, we first recall that the concentration of the solute in a water solution is defined as the ratio between the number of molecules (usually expressed in moles) of the solute and the volume of the solution. The solution volume is different from the volume of the entire cell, and the latter contains some parts that are not dissolved in water (like organelles). As a first approximation, ignoring effects of temperature, the volume of a solution is given by the sum of the volume of water and the volume of the solute. For example, in looking at the CELL agent, we can write:


V CELL
= NCELLVwater + NCELLVsolute	(1)

solution
water
solute

where NCELL = ϵwater(CELL) and NCELL = ϵsolute(CELL) is the number of water
water	solute
(resp.  solute) molecules and Vwater (Vsolute) is the volume of one single molecule

6 A non-dissociating substance is one that is not broken apart when diluted in water. If a substance is dissociated when diluted in water, then the previous formula holds by adding up the concentrations of the different parts of the solute molecule.

Pin = enter n.Pin Pout = exit m.Pout Qin = accept n.Qin Qout = expel m.Qout
W = water[Pin | Pout]Vwater
S = solute[]Vsolute

CELL = cell[Qin
| Qout
| W | ... | W | S | · · ·| S]V CELL

`	k˛i¸n	x	`	h˛i¸n	x



 
kout
Table 1
h˛o¸ut  x

The CoBic code for the osmosis. The set of ambient names in the SYSTEM is
η(SY STEM )= {water, solute, cell}, plus the special ambient system, which wraps up the whole model.
The rate functions ρ(n, enter) and ρ(m, exit), and volume functions are specified in the text.

of water (solute). In real terms, Vwater roughly equals Vwater = 3 · 10−26, while for sucrose, a typical solute inside cells, approximatively Vsucrose = 3.6 · 10−25.
Since the volume of the cell does not coincide with the volume of the water solution inside: we need to add another term representing the volume of elements not diluted in water. Hence,

Vcell = V CELL + V CELL ,
0	solution


CELL
solution
is defined in (1). This defines the volume functions. As for rates,

we start by defining them only taking into account the effect of the concentration gradient. According to the previous discussion, we may define rates as Lp  S ψs, with ψs = −RTcsolute the solute potential. Now, the rate of water molecules into
the cell will depend on the water potential outside the cell, while the rate of exit of water from the cell will depend on the water potential inside the cell. The previous definition, however, will not work, as the ψs are negative! We cannot simply take their absolute value, as this would reverse the direction of osmosis. However, observe that the lower the solute concentration, the higher the water concentration, defined as the ratio between the number of water molecules and the solution’s volume. Hence, we can simply replace solute concentration with water concentration, obtaining the following solute potential:
ψ' = RT  Nwater	 ,

s

with NA the Avogadro number.
NAVsolution

In our case we can easily calculate each water potential for CELL and for the concentration outside the cell in SY STEM :

CELL
ψ'	= RT	water	 ,	ψ'
SY STEM
= RT	water	 ,	(2)

s(cell)
CELL
solution
s(System)
SY STEM
solution

'
w(cell)
'
s(cell)
'
w(System)
'
s(System)
. The total flow is:



J = J	− J
= L S (ψ'
— ψ'
)	(3)

in	out


p V	w(System)
w(cell)

To obtain the rate functions for enter and exit actions, we still need to define the surface to volume ratio. If  we approximate the cell shape with a sphere, the
ration  S equals 3 , with r = 3  3 Vcell. Other parameters are set according to [7]:
Lp = 10−6 and RT = 2.5 (corresponding to T = 30◦C). Jin and Jout (cf. 3) are the total flows of the system, which can be seen as the speed of movement of all water molecules. Hence, if we want to assign a rate to each single water molecule, we need to divide Jin and Jout by the number of water molecules outside (resp. inside) the cell. Hence, the rate for enter and exit actions is the following:


3Lp
 3 4π V


cell
 − 1
'
w(system)


SY STEM
water

= 3Lp
3
4π V


cell
— 1

NA
RT
SY STEM
solution

(4)


3Lp
 3 4π V


cell
 − 1
'
w(cell)


CELL
water

= 3Lp
3
4π V


cell
 − 1
RT


CELL
solution

(5)

Remark 4.1 By following the rule for exit in Figure 3 we can calculate the expres- sion (5), which essentially depends on three variables: NCELL,NCELL, Vcell, since

Lp and T, R, NA are fixed parameters.
water
solute


ρ(m, exit) = ƒA(νA,cell, Vcell, Vwater),	A = {cell, solute}

where νA,cell = (NCELL,NCELL). We observe that in ƒ there are no variables, in
water	solute
order to derive the final rate we apply the rule (AMB1) from Figure 3. Similarly, the function for entrance of water molecules in cell, ρ(n, enter), depends on the volume of the cell, and on the number of water and solute molecules in the system. Unlike the exit, these values are not at disposal at the moment of application of the rule, hence they must be left non-instantiated. The function is thus ρ(n, enter) = gA(νA,cell, xwater, xsolute, Vcell, y) where


g (ν

,x	,x 

,V	, y) = 3L

  3 V

 − 1   RTx	1 

= 3Lp  3 V

cell
— 3 	RT	
SY STEM
solution

When looking at SY STEM , in order to derive the final rate we need to apply the rule (AMB2), we obtain g = gA(νA,system, Vsystem), which is the rate in Equation (4),
as νA,system = (NSY STEM ,NSY STEM ).
water	solute
In Figure 4, we present the result of a simulation of the model of Table 1 (dotted lines), showing the temporal evolution of the solute concentration inside and outside the cell 7 . As we can see, the net effect is that the solute concentration inside the

7 We decided to depict the solute concentration instead of the number of water molecules or the water concentration, as this is the most common measure.





















Fig. 4. Solute concentration ignoring the effects of pressure (dotted lines) and considering it (solid lines) The initial solute concentration in SYSTEM is equal to 0.1, while the initial concentration in CELL is 1. This corresponds to the following number of ambients inside and outside: set by kin = 1960, kout = 24460, hin = hout = 4500. Each water ambient represents not one, but a set of water molecules (this is to speed
up the simulation), namely 107. Similarly, each solute ambient represents 105 molecules of sucrose, taken here as the prototype solute.

cell, initially equal to 1, decreases, while the concentration outside the cell increases, until they reach their equilibrium value, close to 0.2. This corresponds to a net flow of water within the cell, which increases its volume. Looking at Figure 5, we can see that the cell volume increases 7 times 8 , an event that would probably kill the cell. This can happen for cells having no protection against influx of water from outside. In plant cells, instead, the presence of the cell wall counterbalances the effect of the concentration gradient by exerting a strong pressure inside the cell.
In order to take into account the effects of pressure, we need to introduce a model of the pressure potential. We assume the following simple model [7]:
ψ (V ) =  0	if V ≤ αV0
(1−α)2 V0
with V0 = 10−15 and α = 0.85. The pressure potential outside the cell is assumed

to be zero.  Now, we have new water potentials, namely ψ''
'
s(cell)
+ ψp

''
w(system)
'
s(system)
.  Rates for enter and exit actions are like those in

equations (4) and (5), with ψ'' in place of ψ' .
In Figure 4, we also show the result of simulating the system with both concen- tration and pressure potential. As we can see, the solute concentration converges to the value of 0.7, a much higher level than the one reached under concentration effects alone, while the system concentration remains almost constant. Inspecting again Figure 5, we can see that now the volume increases by a factor of 1.3, which is an acceptable parameter.

8 We assumed an initial cell volume of 10−15 liters, 3 of which due to the water solution.





















Fig. 5. Increase of volume of cell. We plot the ratio w.r.t. the initial volume, both for the system with rates depending only on concentration and for the system with rates depending also on pressure (cf. Figure 4).
Conclusions and future work
In this paper we have shown how to model passive transport in cells using a vari- ant of BioAmbients we called CoBic as the rates of the transition depend on the environment of the process. We also provided a detailed example of the osmosis.
The general functional form of rates endows CoBic with the possibility of inte- grating analytic information in a process-based calculus. This has been exploited in osmosis to provide a more realistic model of water flow. Other straightforward applications are in the modeling of ion transportation in and out a cell. Indeed, this feature can be used also to abstract some aspects of the model, describing them in the functional rates. For instance, the kinetics of a simple enzymatic reaction can be abstracted (neglecting the formation of the substrate-enzyme complex) using a Michaelis-Menten form for the rate.

References
G. Berry and G. Boudol. Chemical Abstract Machine. In Proceedings of the 17th ACM Symposium on Principles of Programming Languages, pages 81–94. ACM, 1990.
R. Blossey, L. Cardelli, and A. Phillips. A compositional approach to the stochastic dynamics of gene networks. Transactions on Computational Systems Biology IV, 3939:99–122, 2006.
L. Bortolussi and A. Policriti. Modeling biological systems in concurrent constraint programming.
Constraints, 13(1), 2008.
M. Calder, S. Gilmore, and J. Hillston. Modelling the influence of RKIP on the ERK signalling pathway using the stochastic process algebra PEPA. In Proceedings of the BioConcur Workshop on Concurrent Models in Molecular Biology, London, England, August 2004.
F. Ciocchetta and J. Hillston. Bio-PEPA: an extension of the process algebra PEPA for biochemical networks. In Proceeding of FBTC 2007, 2007. Workshop of CONCUR 2007.
J. Hillston. A Compositional Approach to Perfomance Modelling. PhD thesis, Department of Computer Science, Edinburgh, 1994.

l. Tainz and E. Zeiger. Plant Physiology. Sinauer Associated Inc., 2006.
P. Lecca and C. Priami. Cell cycle control in eukaryotes: A biospi model. Electron. Notes Theor. Comput. Sci., 180(3):51–63, 2007.
J. R. Norris. Markov Chains. Cambridge University Press, 1997.
A. Regev, E.M. Panina, W. Silverman, L. Cardelli, and E.Y. Shapiro. Bioambients: an abstraction for biological compartments. Theoretical Computer Science, 325(1):141–167, 2004.
C. Versari and N. Busi. Efficient Stochastic Simulation of Biological Systems with Multiple Variable Volumes. In Proceeding of FBTC 2007, 2007. Workshop of CONCUR 2007.
M.G. Vigliotti and P.G. Harrison. Stochastic mobile ambients. In Proceeding of QAPL 2006, volume 164 (issue 3) of E N T C S, pages 169–186. Elsevier, 2006.
D.J. Wilkinson. Stochastic Modelling for System Biology. Chapman & Hall, 2006.
