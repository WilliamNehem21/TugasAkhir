motivations and related works. the motivations of this work come from studies aiming at extending the curry-howard correspondence outside the functional setting, to model concurrency. many approaches achieved such a correspondence(as), though by imposing determinism to processes, i.e. limited to concurrent systems where only a deterministic behaviour can occur. however, reduction on processes is, in general, non-deterministic and non-confluent: this intrinsically limits a possible correspondence with cut elimination or normalization of proofs, whose nature is confluent and deterministic, effectively restraining a process to functional behaviour.



we present here the interpretation of the mccs fragment. firstly, the elements of the process relevant for execution must be represented: via an assignment of locations, cuts, and xor conditions to addresses, we can code them into designs. we interpret each element of locp, sp and xp into negative designs, then put them together as premises(sub-designs) of a single positive design, the base design, denoted dp, that is a preliminary and naive interpretation of a process p.



we present here the replication-free fragment of ccs, and the extension of the previous results. the non-deterministic choice+(also called sum) is a mutual exclusion between its two members; it waits for an external choice, i.e. a context in parallel composition, which selects one process to use by synchronizing with the channels of one of the two members, dropping the other for that execution path. execution is therefore generalized in the following way: interactive theory of computability and complexity based on ludics. the feature that seems most interesting to us is the possibility to represent infinite designs by a finite generator, allowing recursive definitions. design generators let us easily extend the interpretation to the full calculus with replication.



p denotes the positive actions, n the negative actions. a name denotes both the polarity and cardinality of the ramification of a rule, and, in the negative rule, the variables stand for each sub-address of the ramification. if n0 is not a variable x in a positive design, then it becomes a cut.



