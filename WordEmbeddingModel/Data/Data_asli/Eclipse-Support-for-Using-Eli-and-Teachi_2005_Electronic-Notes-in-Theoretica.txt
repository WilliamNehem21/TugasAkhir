we are using eli to generate semantic support for each of these projects. this strategy allows us to avoid hand-crafting document models and analysis as is done in most other eclipse projects that provide sophisticated language support. section 5 briefly discusses this semantic assistance aspect.



the pld compiler accepts programs written in a modula-like syntax called mystery together with a description of the desired semantics. the output is a java program that can be run under the specified semantic conditions. note that since the semantics can be varied so much, many static conditions are actually verified at runtime. this implementation detail is hidden from the students.



in previous work we have developed the noosa tool for high-level execution monitoring of eli-generated compilers. the idea behind noosa is that we can view the execution of a compiler in terms of concepts such as basic symbols, phrases, or syntax tree nodes without having to know anything about the way in which the compiler is coded. for example, when a compiler writer is developing a lexical analysis specification they work at the level of regular expressions. thus noosa provides a way for them to see which input text has matched which regular expressions. similarly, they must specify a contextfree grammar to build a parser. they are not interested in the detail of how the parser works but in which grammar productions match which parts of the input text.



we have developed an eclipse-based version of noosa in the form of a plugin that supports a noosa perspective and a collection of related views. the views provide access to high-level compiler runtime data such as the token stream, the phrase structure or the syntax tree. the plugin is initially aimed at compilers that are hand-written in java but we are also working on eli integration.



