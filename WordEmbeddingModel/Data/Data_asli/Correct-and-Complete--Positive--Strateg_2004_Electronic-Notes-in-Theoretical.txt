strategy annotations are used in several rewriting-based programming languages to introduce replacement restrictions aimed at improving efficiency and/or reducing the risk of nontermination. unfortunately, rewriting restrictions can have a negative impact on the ability to compute normal forms. in this paper, we first ascertain/clarify the conditions ensuring correctness and completeness(regarding normalization) of computing with strategy annotations. then, we define a program transformation methodology for(correct and) complete evaluations which applies to obj-like languages.



specifies an explicit strategy annotation for the list constructor cons which disables replacements on the second argument. in this way, we can ensure that computations with this program are terminating(see example 4.4 below for a formal justification of this claim).



termination of rewriting under strategy annotations has been studied in a number of papers[5,13,14]. unfortunately, using rewriting restrictions may cause incompleteness, i.e., normal forms of input expressions could be unreachable by restricted computation. for instance, using the program in example



we first clarify our notion of correct and complete computations with(positive) strategy annotations. as there is no standard, commonly accepted terminology, current definitions are rather misleading and we think this may cause an erroneous understanding(e.g., compare the mix of different concepts for the notion of correctness/completeness in[18,19,21]).



