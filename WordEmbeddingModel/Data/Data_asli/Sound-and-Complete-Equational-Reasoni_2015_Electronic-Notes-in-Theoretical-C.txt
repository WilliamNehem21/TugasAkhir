remark 4.3 state variables could be internalized in the original term language. a state variable is essentially a unary function symbol that only appears at the head of a term. in particular, this overloads the dot-notation for the application of unary functions a.t= a(t) in a consistent way. all rules of the system we are about to introduce remain sound if we relax the interpretation of a state variable to be a unary function on states instead of a single state.(completeness, proved later, transfers trivially to this more permissive semantics.) what distinguishes state variables from function symbols is that we have an infinite reservoir of state variables allowing us to pick fresh variables when necessary, as well as the possibility of renaming state variables.



which employs similar mechanisms as disjunction elimination and existential elimination in natural deduction: to conclude c.s= d.t we have to derive c.s= d.t assuming each of the possible outputs xi of some labelled term a.r in turn, in each case giving a fresh name b to the poststate reached by a.r. we have a version of falsum-elimination(on the left) and a rule that asserts validity of all substitution instances of the axioms in e(on the right).



the following technical preparations are needed for establishing completeness. we formulate substitution as an axiom rather than as a rule, as the substitution axiom(but not the substitution rule, see remark 5.13) remains sound also for modulobisimulation reasoning. however, substitution as a rule is admissible.



this phenomenon of comodel states being different but observationally indistinguishable is entirely standard, and captured by the established notion of bisimilarity. we explicitly instantiate this concept to the particular notation of comodels. for simplicity of notation, we work with bisimilarity on a single comodel; in the comodel setting, this is without loss of generality as bisimilarity across two models is the same as bisimilarity in their coproduct.



