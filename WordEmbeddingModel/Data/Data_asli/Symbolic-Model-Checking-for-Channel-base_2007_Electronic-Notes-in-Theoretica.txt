in the past 15 years, many languages and models for coordination have been developed that provide a formal description of the glue code for plugging components together and can also serve as a starting point for formal verification. in this paper, we address the latter aspect for the exogenous coordination language reo. in reo, the glue code is provided by a network of channels obtained through a series of operations that create channel instances and link them together in(network) nodes. the semantics of reo networks has been provided in different, but consistent ways.



organisation of the paper. section 2 gives a brief introduction in the coordination language reo and constraint automata that serve as operational model for reo networks. in section 3, we explain the syntax and semantics of the logic btsl. section 4 summarizes the main steps of the btsl model checking algorithm and reports on our symbolic implementation. experimental results will be presented in section 5. section 6 concludes the paper.



the btsl model checking problem takes as input a reo network, possibly together with constraint automata that specify the interfaces of the components that are connected to the source and sink nodes of the network, and a btsl formula which has to be checked for the network. the automata for the components that are connected to the sink or source nodes of the network describe the environment in which the network operates. they may restrict the nondeterminism in the automaton for the network, since certain transition instances(concurrent i/o-operations) might become impossible due to the behavioral interfaces of the components. after connecting a sink and source node a of the network with a port of a component, a is treated as a mixed node. thus, the automata for the component might also decrease the set of terminal states. in case nothing is known about the potential behaviors of the components that will be coordinated by the network, these automata can be skipped, in which case all possible interactions of the sink and source nodes will be taken into account for the analysis.



we applied the btsl model checker to a couple of examples. we will report here on two case studies. all results were achieved on a pentium iv, 1.8ghz, 1.5gb ram with mandriva linux and kernel 2.6.12. the tool was written in c++, compiled with gcc4.0.3 and uses jinc as library for binary decision diagrams.



the second formula does not hold since there is the run where all philosophers take their left chopstick and then wait forever for the missing right chopstick. this deadlock situation has been found with 798 iterations by means of a backward analysis. computing the reachable part first by means of a forward analysis, the deadlock can be found in 403 steps within 13.92s only.



