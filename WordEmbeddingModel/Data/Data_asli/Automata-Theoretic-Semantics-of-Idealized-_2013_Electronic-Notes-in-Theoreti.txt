the main contribution of this paper is to provide a denotational model of idealized algol that satisfactorily models passivity while being extensional. in particular, this means that passive expressions do not have side effects, not even temporary ones. in the main body of the paper, we do this for a language without divergence, but treat it in such a way that it generalizes to divergence. the issues of divergence are then briefly mentioned in sec. 5. the treatment without divergence is also novel in that it is the first model of passivity that is able to deal with a language without divergence. all the previous models[1,34,45] depend on the presence of divergence for modeling passivity. however, intuitively, passivity is independent of the issues of divergence. our treatment is able to decouple the two issues.



formally, the four components: store shapes, morphisms between store shapes, logical relations between store shapes and squares between them, form a reflexive graph of categories. further, they satisfy additional axioms laid out in to form a parametricity graph. formal definitions describing the structure may be found in the appendix.



in recent work, ahmed, dreyer and colleagues[2,9] have applied the ideas of possible worlds(similar to functor categories) and automata-theoretic reasoning in the setting of operational reasoning. while the ideas seem intuitively similar, it is difficult to make a formal comparison at the present stage because the starting points of denotational and operational approaches are quite different. some remarks regarding the comparison may be found in. it is also worth remarking that these researchers have not yet tackled the issues of passivity in their approaches.



other questions that this work might enable is a semantic understanding of the various notions of passivity present in specification and verification frameworks, e.g., program specification systems, ownership type systems and fractional permission-based methods[6,37]. secondly, the successful modeling of passivity takes us one step closer to modeling program logics such as syntactic control of interference, specification logic[39,45] and separation logic[37,41]. we envisage that the model presented here will be helpful to streamline the semantic treatment of such programming logics.



