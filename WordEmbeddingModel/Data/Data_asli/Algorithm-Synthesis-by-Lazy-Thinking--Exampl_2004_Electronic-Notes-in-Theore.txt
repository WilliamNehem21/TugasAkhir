in this paper, we give a couple of examples for algorithm synthesis using the lazy thinking paradigm. these examples illustrate how the synthesized algorithm depends on the algorithm scheme used. also, we give details about the implementation of the lazy thinking algorithm synthesis method in the frame of the theorema system. in this implementation, the synthesis of the example algorithms can be carried out completely automatically, i.e. without any user interaction.



in this paper, all our formal developments will be given in the theorema system, see,. in particular, all formulae will be given in the theorema syntax. also, the implementation of the method is described in the concrete example of the theorema system.



given a data type(which is part of the problem specification), experience shows that there are not too many possible algorithm schemes that are worth storing in a library of algorithm scheme. there are many algorithms but, in contrast, there are only a few algorithm schemes. in other words, given a data type, there are only of few basic ideas how to attack problems specified for the given data type but there are many variations or instantiations of these ideas and even more combinations of theses ideas with ideas(schemes) for the subalgorithms.



remark. in fact the second formula is a natural specification for the split functions. what it says is that when we split a tuple x by the functions l and r then, if we put the splits together by concatenation, we again get a tuple that contains exactly the elements of the original x.



