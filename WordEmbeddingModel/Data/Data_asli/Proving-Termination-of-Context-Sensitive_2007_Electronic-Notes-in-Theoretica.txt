context-sensitive rewriting(csr) is a restriction of rewriting which forbids reductions on selected arguments of functions. proving termination of csr is an interesting problem with several applications in the fields of term rewriting and programming languages. several methods have been developed for proving termination of csr. the new version of mu-term which we present here implements all currently known techniques. furthermore, we show how to combine them to furnish mu-term with an expert which is able to automatically perform the termination proofs. finally, we provide a first experimental evaluation of the tool.



we assume a basic knowledge about term rewriting, see for missing definitions and more information. in section 2 we briefly describe the new features which have been added to mu-term. section 3 discusses the termination expert. section 4 provides an experimental evaluation of the new version of mu-term. section 5 concludes and discusses future work.



mu-term is written in haskell 4, and wxhaskell 5 has been used to develop the graphical user interface. the system consists of more than 45 haskell modules containing more than 14000 lines of code. compiled versions in several platforms(linux, mac osx, and windows) and instructions for the installation are available on the mu-term www site. a recent hybrid(haskell/c#) version of the tool is also available for the.net platform.



regarding the range of the coefficients, we follow the usual practice in similar termination tools, where coefficients are bounded to take values 0, 1, or 2(see[6,15,16,27]). note that(as in those related tools) this choice is heuristic, usually based on the experience. we do not know of any theoretical or empirical investigation which tries to guide the choice of appropriate bounds for the coefficients depending on the concrete termination problem. from our side, we just added the value 1 which enables a minimal(but still fruitful) use of rational coefficients. again, these generation modes are orderly used by the expert to try different polynomial interpretations.



the current implementation of csrpo is based on an ad-hoc incremental constraint solver which could be improved in many different directions. we plan to explore the reduction of the problem to a sat-solving format, as described in. we also plan to develop algorithms to solve polynomial constraints over the reals yielding exact(but not necessarily rational) solutions.



