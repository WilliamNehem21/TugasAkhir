the writer builds a model as an approach to complex documentation tasks. this helps the user to maintain consistency between documents since they all refer to the same underlying model. for the same reason it helps the user to oversee and implement change management. finally, the model itself provides assurance of consistency in the design process.



the document structure is induced from the use of what we call structured text. at the simplest level, structured text is the language generated by a repository of syntax constructors. the constructors are sorted: i.e., each constructor argument only accepts terms from a particular subset of structured text(labelled by a socalled sort), and the constructor returns a term of definite sort. documents created in the hive writer are written in structured text, thereby acquiring a hierarchical structure from the sort-directed nesting of constructors.



the user controls tool interactions through a distinguished document, called the normative design document(ndd). the ndd is strongly coupled to the datastore: it provides the declaration point for all entries in the datastore from the current project. there is exactly one datastore, and so exactly one ndd, in any given project.



the user then instructs the hive to process the command. control is passed to the relevant module which then enacts the desired transaction with the tool. results from the tool transaction may be presented in any output arguments of the command and one or more facts are entered into the datastore. error messages are handled and displayed appropriately to the user.



