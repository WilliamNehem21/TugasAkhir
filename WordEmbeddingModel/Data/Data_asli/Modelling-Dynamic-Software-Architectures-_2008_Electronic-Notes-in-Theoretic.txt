software architectural models are intended to describe the structure of a system in terms of computational components, their interactions, and its composition patterns, so to reason about systems at a more abstract level, disregarding implementation details. since gcs may change at design time, pre-execution time, or run-time, software architecture models for gcs should be able to describe the changes of the system structure and to enact the modifications during the system execution. such models are generally referred to as dynamic software architectures(dsas), to emphasize that the system architecture evolves during runtime.



organization. in section 2 we describe the formal framework used in the rest of the paper, and the way in which software architectures are represented by using hypergraphs. then we show how different forms of dynamism in software architecture can be expressed in terms of graph grammars(section 3) and apply them to a simple case study(section 4). other orthogonal aspects of dynamism are discussed in section 5. some final remarks and future lines of research are in section 6.



consider a vehicle subscribed to an assistance service. due to a collision, the airbag of the car is inflated, which causes the automatic generation of a message destined to the accident assistant server. the message can be transmitted through near vehicles until reaching the server(preferred method) or directly to the server. the message will be eventually delivered to the assistance server, which will coordinate the assistance.



in this paper we have identified classes of properties that can be naturally associated some kinds of dynamicities. next work will approach the problem of verifying such properties over graph grammar specifications. in particular, we have in mind to use alloy[14,15] for attempting this task and we are going to concentrate our efforts on proving properties associated to each kind of dsa.



