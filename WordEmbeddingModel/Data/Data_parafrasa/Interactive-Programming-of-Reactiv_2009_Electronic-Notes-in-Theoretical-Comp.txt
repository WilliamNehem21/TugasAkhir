This paper introduces rmltop, a tool that serves as the reactiveml equivalent of the ocaml toplevel. Its purpose is to enable programmers to interactively write reactiveml programs that are type-checked, compiled, and loaded on the fly. Users can progressively run concurrent processes and observe the interactions between them.

One of the key advantages of rmltop is that it accepts all valid reactiveml expressions with the same semantics as in the compiler. This feature allows it to be used as a debugger for reactiveml programs. Additionally, the interpreted code in rmltop is as efficient as if it were compiled, and its relatively light implementation in reactiveml makes it unique.

Reactiveml expressions on the standard input are compiled and executed, and the toplevel provides control directives for running processes, suspending and resuming execution, or executing only the next n reactions. The suspension directive can also be triggered by processes to allow for dynamic suspension based on specific conditions.

Furthermore, the paper discusses the process of creating a new random planet and the simulation of planet positions, as well as the use of the #suspend directive to suspend the simulation when a planet is at an eclipse position. This feature allows for semantic breakpoints to be set, enabling the suspension of program execution based on complex conditions expressed in the reactiveml language.

The paper details the architecture of rmltop, where the reactive machine and its controller run in a separate thread of the ocaml toplevel, sharing the environment through shared memory. The controller monitors global variables and emits corresponding signals when the status of a variable changes.

The paper also points out the impossibility of implementing a reactive toplevel based on the semantics of esterel due to causality loops, and contrasts it with reactiveml semantics, which allow for dynamic addition of processes to a running machine without causing causality loops.

Overall, the paper presents rmltop as an interactive mode for the reactiveml language that is useful for designing and debugging reactive systems, providing a way to execute programs in sampled or step-by-step modes and dynamically modify system behavior. It also emphasizes the elegance of rmltop's implementation in reactiveml and suggests adding asynchronous tasks to reactiveml as a potential future improvement.