The concept of data refinement in a state-based language like Z is defined through a relational model in terms of the behavior of abstract programs. The use of downward and upward simulation conditions constitutes a rigorous and comprehensive approach for verifying relational data refinements. Meanwhile, in process algebra, refinement can take various forms depending on the specific notion of observation chosen, which may encompass the events that a system is willing to accept or reject.

Continuing with the discussion, this paper explores additional concurrent refinement relations, many of which are based on the partial relations model. The structure of the paper is straightforward, with Section 2 providing the fundamental definitions and background, and Section 3 outlining the simulation rules for a variety of scenarios.

The background section delves into the standard refinement theory for abstract data types in a relational setting. The relational model of data refinement, where all operations are total as outlined in a 1986 paper by He, Hoare, and Sanders, has traditionally garnered the most attention. For instance, the standard refinement theory of Z is based on this version of the theory. However, later publications by He and Hoare relaxed the constraint to total relations and demonstrated the soundness and joint completeness of the same set of simulation rules in the more general case. De Roever and Engelhardt also present the partial relations theory, albeit without placing much emphasis on this aspect.

In terms of the testing scenario, the paper discusses a machine for testing failures, which includes a switch for each action in Act in addition to the interface of the completed trace machine. This setup allows for the observation of blocked actions, and if the process reaches a state where all actions are blocked, this can be detected through an empty display, thereby characterizing observations as the failures of a process.

Furthermore, the paper details a testing scenario in which the display in the machine for testing failures traces mirrors that for failures but does not halt if the process cannot proceed. Instead, it idles until the observer permits one of the actions that the process is ready to perform. The observations in this scenario are traces with idle periods in between, and for each idle period, the set of actions that are not blocked by the observer is recorded. This approach has been advocated as a better notion for testing compared to solely observing process failures, particularly when one can identify a process's refusal of an action and has the ability to intervene accordingly.

The paper also discusses the ready trace semantics, which is similar to the failure trace semantics but involves acceptance sets replacing failures in the observed traces. The relational embedding for the ready trace is akin to that for the failure trace, with the substitution of an appropriate acceptance set. Similar derivations can be made for the simulation rules.

Additionally, the paper mentions alternative preorders for process algebras that have been proposed in response to testing and the need for test generation, such as extension and conformance. Formally defining these alternative preorders requires notation that delineates refusal sets after a particular trace.

The relational embedding used to model extension is a totalization over the space of partial relations and represents the standard non-blocking model. Although downward and upward simulations are complete, their totalized versions are not. However, complete simulations can be provided for each semantics, with the failures semantics simulations known to be complete. A separate completeness proof for simulations is necessary in each embedding, which is anticipated in an extended version of the paper.