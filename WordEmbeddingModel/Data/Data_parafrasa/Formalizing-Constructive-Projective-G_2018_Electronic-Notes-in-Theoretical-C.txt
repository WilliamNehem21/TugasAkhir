Projective geometry, a well-established branch of mathematics, investigates the incidence properties of points, lines, and planes. Standard textbooks in this field, such as those referenced in [4,23], typically cover topics including the axiomatization of points, lines, and the incidence relation, the principle of duality, the theorems of Desargues and Fano, harmonic conjugates, projectivities, polarities, and conics.

Projective geometry is an elegant and self-contained mathematical system built upon the primitive concepts of points and lines, with a defined relation of incidence between them based on a few axioms. Due to its simplicity and distinct structure, projective geometry is an attractive candidate for formalization in a computer system and serves as an interesting case study for exploring challenges associated with computer formalization of mathematical concepts.

Despite its simplicity, projective geometry serves as a unifying framework for other geometries, as every result in projective geometry can be applied to affine geometry, which in turn extends to Euclidean geometry. This property is implicit in the Erlangen program of F. Klein, where projective geometry is defined as the study of properties invariant under projectivities.

To achieve a definition as general as possible, we consider that a belongs to the universe set a for a generic level a. This approach is also adopted for all objects in our formalization. We will not delve into details about levels throughout the rest of this paper, and readers unfamiliar with universe polymorphism in Agda can ignore them without losing understanding. Additionally, some arguments are declared as implicit and enclosed within curly brackets. Implicit arguments possess the property that, in most cases, we can omit these arguments and Agda will attempt to infer them from the context. We make frequent use of implicit arguments in our implementation, although we will not explain why some arguments are declared as implicit and others are not, as the decision is typically determined by heuristics derived from practice.

Overloading is necessary for working with several setoids simultaneously. To achieve this, we employ an Agda feature called instance arguments. By using this feature, we can open the module setoid] with a special directive, thus enabling us to access all the operations of the module setoid] and omit the particular instance argument, which will be inferred by Agda from the context using a special instance resolution algorithm.

Formally constructing a proof of the uniqueness of the harmonic conjugate is a particularly complex task when using constructively valid methods alone. Despite this complexity, we were unable to find a complete and rigorous presentation of this proof in the literature. Therefore, the formal and machine-checked construction of such a proof represents a significant contribution of this paper.

Our development is based on the programming language features of Agda, rather than the proof-assistant features. Notably, we have not constructed proofs using tactics, but have instead taken advantage of several important language features. Modules and dependent record types have played a crucial role in our implementation, allowing us to implement setoids as an abstract data type and view lines and points as instances of this ADT. Additionally, the mechanism of implicit instances has facilitated overloading the operators of this ADT. We have almost exclusively utilized natural numbers and finitary sets to define the concept of complete n-point. Regarding the logic involved in the implementation, we have relied on the standard connectives of first-order intuitionistic logic: implication, negation, disjunction, conjunction, and quantifiers.

Induction and recursion have only been sparingly used in our implementation, which is atypical for a formalization in type theory. However, this choice is reasonable given that the primary objects are ADTs rather than inductively defined data types. As a result, pattern matching is seldom employed, only being used to process disjunctions and finitary sets.

An early formalization of projective geometry was written in ALF (an ancestor of Agda) by von Plato. This simple formalization was based on von Plato's axiom system. A more advanced implementation formalizes von Plato's constructive geometry in Coq. These works present only a small fragment of projective geometry, omitting advanced concepts such as Desargues' theorem and harmonic conjugates; nevertheless, they use a similar representation for line/point existence and uniqueness, defining functions "join" and "meet" akin to our implementation. The definition of the apartness relation is also quite similar.

This work is part of a larger project aiming to fully formalize constructive projective geometry. Future topics to cover will include projectivities and conics. Additionally, there are several interesting related problems to investigate, such as the relationship of projective geometry with affine geometry, the implementation of the coordinatization of the projective plane, and the connection with algebraic models of projective geometry like Grassmann-Cayley algebra and geometric algebra.