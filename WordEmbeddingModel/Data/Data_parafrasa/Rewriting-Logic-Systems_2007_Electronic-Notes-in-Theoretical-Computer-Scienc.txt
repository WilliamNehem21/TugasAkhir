An important objective of the WRLA is to encourage discussions about the practical applications of rewriting logic and to increase awareness among the community about systems and tools that are based on rewriting logic. Several such systems were showcased as part of the workshop. The paper provides an overview of the capabilities demonstrated by these systems. Additionally, there was a competition involving two well-established algebraic specification environments â€“ ASF+SDF and Maude. The paper describes the rules of the competition, the benchmarks used to test the systems, and the results of the competition.

ASF+SDF and the ASF+SDF meta-environment have been utilized in diverse applications, including prototyping domain-specific languages, software renovation, and code generation. The paper presents an overview of some of these applications.

Rewriting logic is reflective, as it can express its own metalevel at the object level. Maude supports reflection efficiently, endowing the language with powerful metaprogramming capabilities, including user-definable module operations and declarative strategies to guide the deduction process. The metalevel in Maude provides descent functions for reifying the process of reducing a term to normal form, applying a rule to a subject term, rewriting a term, matching a pattern to a subject term, searching for a particular pattern term, as well as parsing and pretty printing of a term, and key sort operations. It also provides ascent functions for obtaining the metarepresentation of terms and of modules in the module database.

The concept of organizing a rewrite competition arose from the observation of diverse applications of rewriting in different areas and by different categories of researchers who expressed genuine and explicit interest in term rewriting. The authors believe that such competitions can be beneficial provided they are fair and explicitly state what was tested. These competitions can assist users in selecting the right rewrite engine for their applications and enable developers to compare the performance of various rewrite engines. The paper emphasizes the need to establish fair comparison criteria for evaluating rewrite engines, such as raw speed, memory consumption/management, use of parallelism, compiler vs. interpreter, and scalability. The authors believe that the importance assigned to these criteria largely depends on the role that rewriting plays in the development of applications. It is hoped that these competitions will reveal meaningful examples addressing all aspects of rewriting as a programming paradigm.

The paper acknowledges the difficulty in capturing the actual strengths of the systems tested, as it was challenging to devise compelling examples that fit within the intersection of the capabilities of the two systems. The authors also point out that ASF+SDF has a great parser and was successfully applied in large program transformation projects, which were not tested in the competition, and that Maude has AC matching and a suite of tools (theorem prover, model checker) making it amenable for formal analysis projects, which were also not tested.

The paper discusses potential causes for the behavior of ASF+SDF and highlights the differences in behavior between the two systems in terms of list operations, such as list length and list reversal.

The article also highlights that Maude 2.2 supports IPv4 TCP client and server sockets, and provides an overview of model-driven development in software engineering.

Furthermore, the paper gives demonstrations of various tools such as Moment-OCL and TOM, and provides insights into their features and applications.