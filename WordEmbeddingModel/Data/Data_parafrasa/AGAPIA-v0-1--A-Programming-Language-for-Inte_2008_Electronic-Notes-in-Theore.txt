Recently, Stefanescu introduced a model consisting of rv-systems along with a core programming language for developing rv-programs, accompanied by various specification and analysis techniques suitable for modeling, programming, and reasoning about interactive computing systems. Dragoi and Stefanescu further enhanced this work by developing structured programming techniques for rv-systems and their verification in their subsequent papers. In particular, they introduced a kernel structured programming language called Agapia v0.1 for interactive systems and studied its typing system.

One of the notable features of the introduced model is the incorporation of high-level temporal data structures, which is essential for achieving a compositional model for interactive systems. This is a challenging goal, as evidenced by the difficulties encountered in obtaining compositional semantics for data-flow networks.

The present paper has two main objectives. Firstly, it introduces the Agapia v0.1 language and provides an example program implementing a termination detection protocol. Secondly, it delves into the study of the typing system of Agapia v0.1, with the aim of utilizing the findings for the design of Agapia v0.1 compilers. The paper is organized into sections covering an overview of rv-systems, the introduction of structured rv-programs and their operational semantics, the syntax of Agapia v0.1, an implementation of a termination detection protocol, a section on the typing systems for Agapia v0.1 programs, and concludes with a few examples and final remarks.

In this work, it is suggested that voices can be implemented on top of a stream similar to registers being implemented on top of a Turing tape. Additionally, a scoping rule is implicitly used for variables, and the paper discusses structured programming techniques for rv-programs, which resemble flowcharts and assembly languages.

The presented termination detection protocol is designed for a ring of processes and utilizes colored tokens to handle cases where processes may be reactivated after local termination. The program utilizes spatial and temporal variables to manage the passing of tokens through the process ring and the coloring of processes.

The paper also delineates a typing system for arithmetic expressions, exploring the incorporation of algebraic techniques for cyclic structures, and discusses the ongoing efforts to develop an efficient and fully flagged compiler for Agapia programs.