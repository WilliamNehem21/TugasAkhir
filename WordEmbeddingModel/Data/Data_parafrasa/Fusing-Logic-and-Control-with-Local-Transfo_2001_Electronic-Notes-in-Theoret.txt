This paper presents various approaches to separate the definition of program transformation rules from the strategies under which they are applied, thus enabling the generic definition of program transformation components. The paper also explores fusion techniques for strategies to specialize such generic components.

The authors demonstrate how the generic innermost rewriting strategy can be optimized by combining it with the rules it is applied to. This optimization, along with the programs to which it applies, is specified in the language Stratego. The paper outlines a style of program optimization that combines small transformation steps using strategies to achieve the effects of complex transformations. The optimization is based on small transformation rules applied locally under the control of strategies, using specific knowledge about the contexts in which the rules are applied.

The remainder of the paper is organized as follows: Section 2 explains the basics of Stratego and introduces the generic specification of innermost reduction, while Section 3 presents an optimized version of this strategy. Section 4 demonstrates how the optimized specification of innermost can be derived from the original specification, followed by the Stratego implementation of the optimization rules from Section 4 in Section 5. Finally, Section 6 concludes the paper.

Stratego is described as a language for specifying program transformations, with a key design choice being the separation of logic and control. Rewrite rules are used to express basic transformations on terms, and rewriting strategies control the application of those rules.

The authors introduce elements of Stratego relevant to the paper, illustrating them with a small application that simplifies expressions over natural numbers using a generic specification of innermost reduction. Various aspects of Stratego, including formal semantics, term patterns, and term traversals, are discussed.

The paper outlines a technique to recognize the structure of patterns using the Stratego overlay mechanism and presents rules used in the derivation as Stratego rules. It then combines these rules into a strategy that optimizes occurrences of the innermost strategy in Stratego specifications.

The paper discusses the use of strategies to optimize programs that are not defined in terms of strategies and highlights the use of small local transformations, referred to as "humble transformations," in optimizing compilers. It also touches upon the importance of optimizing term traversals in functional transformation systems and discusses potential connections to fold/unfold program optimization methodology.

Additionally, a system description of Stratego 0.5 is referenced at the end of the paper.

Overall, the paper provides valuable insights into the use of rewriting strategies and fusion techniques to optimize program transformations and introduces various concepts related to the Stratego language and program optimization.