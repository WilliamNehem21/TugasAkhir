This paper proposes the integration of assume-guarantee contracts as a form of non-deterministic specification in the design-flow of embedded reactive programs, with a focus on early execution of reactive specifications. The authors illustrate this approach through a case-study in an avionic application, highlighting the implications of this simulation method on the design-flow.

Reactive systems, such as those found in aircraft or nuclear plants, are characterized by their interaction with the environment as a primary aspect of their behavior. Synchronous languages play a significant role in programming reactive systems, based on the synchronous hypothesis of instantaneous communication between system components and instantaneous computations within components.

In response to the increasing complexity of systems, the paper discusses the importance of complete design flows, which lay out the steps in the development of a system and provide methods to validate the system at each step. Simulation techniques are a vital validation feature, allowing developers to observe possible system behaviors during different stages of development.

The paper proceeds to present a subset of the Lustre language for describing a running example, followed by the introduction of a system example to illustrate a progressive design-flow. It includes the formalization of components, a description of a simple implementation framework using existing tools, and an overview of related works and potential future research directions.

The authors also define a language for programming reactive systems, introduce limited higher-order operators, discuss the initialization property, and provide a description of the system environment for simulations. They emphasize the denotational characterization of deterministic components and assume-guarantee contracts, as well as the operational generation of traces that satisfy these specifications.

Additionally, the paper delves into the use of RML, a language for implementing reactive systems, and its extension in Lucky for describing non-deterministic environments. The authors explore the connections between Lustre and Lucky, and propose future studies on the automation of translation between the two languages and the integration of probabilistic behaviors in the framework.

Finally, the authors suggest potential extensions of the approach to include input generators or observers, tool support improvements, and the consideration of probabilistic behaviors and GALS systems in the design-flow of embedded reactive programs.