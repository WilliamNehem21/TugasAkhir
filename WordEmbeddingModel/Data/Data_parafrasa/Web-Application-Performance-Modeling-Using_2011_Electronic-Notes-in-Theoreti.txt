This paper presents an LQN performance model of a web application incorporating Linux, Apache, PHP, and a PostgreSQL backend database. The model offers performance metrics such as steady-state throughput and response times, which are validated by comparing the model results with measurements obtained from load testing the system. The analysis of the model results identifies a bottleneck resource, and suggests an approach to scale the system by preventing saturation of the bottleneck resource.

The paper is structured as follows: Section 2 reviews related works in the field of web performance modeling. Section 3 provides a brief overview of LQN, while Section 4 details the design of the web application. Section 5 describes the load testing setup, and Section 6 presents the LQN model of the application. Section 7 presents the measurements and model evaluation results, with further analysis to alleviate bottleneck resource issues. Finally, Section 8 encompasses the conclusions and outlines future work.

The study by Liu et al. also utilizes a closed queuing network (QN) model to analyze a 3-tiered web application consisting of Apache, Tomcat, and MySQL. Multi-station queues are employed to model the concurrency limits of the Apache and MySQL servers.

Similarly, Dilley et al. and Pastsyak et al. have used LQN to model a CGI web server and an Apache-PHP-MySQL system, respectively. Pastsyak et al.'s model is evaluated for 40 users and compared with load test results, demonstrating the model's successful prediction of system performance. In this study, the LQN model incorporates components such as two web servers, a load balancer, and a database server.

The web application discussed in the paper utilizes a PostgreSQL backend database to store map tiles/images and bike routes data. The system provides features such as best path routing using the pgrouting project. Additionally, differences between the current application and its derivative project (mybikeroutes) are outlined, including the use of Google Maps API and a MySQL backend-database in the derivative project.

Performance metrics obtained from the model evaluation, along with measurement data, are presented in tabular and graphical formats for model validation. The paper also discusses the performance objectives for the base scenario and conducts performance analysis to achieve these objectives.

The model evaluation was conducted for up to 150 users, with the results indicating poor performance for larger user loads. Based on the identified bottleneck resource (Papache CPU), modifications to the model are proposed to meet performance objectives.

To alleviate the bottleneck resource issues, two potential solutions are evaluated: (i) employing a multi-processor machine, and (ii) deploying the application and database tasks on separate identical machines. Detailed modifications are outlined for both solutions, and the resulting performance models are evaluated.