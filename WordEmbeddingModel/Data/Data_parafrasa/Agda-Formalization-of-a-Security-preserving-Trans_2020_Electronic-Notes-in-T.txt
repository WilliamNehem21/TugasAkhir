The examination of information flow is a widely used method to maintain the confidentiality of data. In this context, confidentiality policies are developed to ensure that private data cannot be deduced from public data. Non-interference is a security policy that prevents unauthorized information flow during program execution by ensuring that the results of two computations cannot be distinguished if they only differ in their confidential inputs. An important aspect of non-interference is its ability to be enforced statically through the definition of information flow type systems. Such type systems can check whether a program meets the security policy at compile-time, reducing or eliminating the need for checking properties at run-time.

Most security type systems are flow-insensitive, meaning the security level of program variables remains unchanged throughout the program. In contrast, flow-sensitive type systems allow variables to have different security levels at different points in the program, making them more permissive.

The paper is structured as follows: Section 2 introduces the high-level language and a flow-insensitive type system, while Section 3 discusses the flow-sensitive type system for the language. Section 4 presents the program transformation and the corresponding proof.

In a security scenario where each program variable is associated with a security level indicating the confidentiality of its values, it is natural to implement a security mechanism using an information flow type system. The type system discussed in the paper is flow-insensitive, meaning it assumes that the security level of variables remains constant during program execution. Variables with this property are called fixed-type variables, in contrast to floating-type variables whose security levels may vary during program execution.

Explicit flow occurs when data is copied to less confidential variables. For example, the assignment of a high-confidentiality variable to a low-confidentiality variable is not allowed, as it can lead to a security violation. However, the opposite assignment is allowed.

The paper also discusses the need to keep track of the security level of the program counter in order to know the security level of the context in which a statement occurs. It then presents the flow-sensitive type system defined by Hunt and Sands for the while language, emphasizing its parameterization by a lattice of security types.

The paper concludes by discussing the relevant characteristics of the semilattice of environments and its relevance for the theorem formulation. It also outlines the monotonicity of the fixpoint construction and the internalist approach for the Agda implementation of the language with a flow-sensitive type system.