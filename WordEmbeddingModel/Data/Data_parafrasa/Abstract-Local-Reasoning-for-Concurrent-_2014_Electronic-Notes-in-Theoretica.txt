The focus of our research is on abstract local reasoning for concurrent libraries. There are two primary approaches: one involves specifying a library by abstracting from concrete reasoning about its implementation, and the other provides a direct abstract library specification, justified by refining it to an implementation. However, both approaches have a significant gap in their reasoning, stemming from a mismatch between the abstract connectivity of the abstract data structures and the concrete connectivity of the concrete heap representations. We illustrate this gap using structural separation logic (SSL) for specifying a concurrent tree library and concurrent abstract predicates (CAP) for reasoning about a concrete tree implementation. The disparity between the abstract and concrete connectivity arises due to a mismatch between the SSL tree predicates and CAP heap predicates. We address this gap by introducing an interface function, denoted as "i," which serves to link the abstract and concrete connectivity. In the accompanying technical report, we extend our SSL reasoning and results to arbitrary concurrent data libraries.

SSL enables reasoning about fine-grained abstract data fragments stored in abstract heaps. Abstract heaps contain cells identified by abstract addresses (e.g., address x) whose values consist of disjoint data fragments. These data fragments contain context holes, also specified by abstract addresses, which serve as placeholders for the data fragments located at the corresponding abstract cells. For instance, the SSL predicate atree(t)(x) describes a tree cell with abstract address x containing tree context t. We can split (abstractly allocate) this predicate to obtain the desired results.

Moreover, we provide the axiomatic SSL specification of a simple deletetree(n) command, in which this command removes the entire subtree whose top node identifier corresponds to the value of variable n, while leaving the rest of the tree unchanged. We formalize this English description using assertions that describe abstract heaps.

To reason about our tree programs, we utilize the program logic of the views framework, as described in [reference]. We instantiate the framework with the separation algebra of abstract tree states (Def. 2.6) as the view monoid and the tree library commands (Def. 2.1) as the atomic commands. The remaining task is to describe the axioms associated with the tree library commands (Def. 2.7).

Concurrent abstract predicates with CAP model the state as a pair consisting of a thread-local state and a shared state. The shared state is divided into a set of regions, each encompassing a shared portion of the state. Each region is identified by a region identifier r and is governed by a protocol that specifies how the resources of the region can be manipulated. We further discuss the cap separation algebra and its instantiation with the standard fractional heap separation algebra for this paper.

In the accompanying technical report, we further generalize this approach to translate arbitrary abstract libraries and specify a set of general properties that, when satisfied, ensure the sound translation of any abstract library, as stated in Theorem 4.9.