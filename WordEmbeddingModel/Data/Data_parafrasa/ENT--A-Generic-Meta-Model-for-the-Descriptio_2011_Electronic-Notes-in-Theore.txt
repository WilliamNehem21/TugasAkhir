The prevailing method for modeling component-based applications involves utilizing UML extended by a profile. While this approach offers a general way to describe applications and capture specific details based on the concrete component model, it suffers from limitations inherent in UML, such as a lack of scalability and inherent model semantics. In response to these limitations, this paper presents a meta-model developed specifically for describing components and component-based applications. Notably, this meta-model employs faceted classification to introduce additional semantics and structuring to the derived models. The paper outlines the features and benefits of this meta-model and demonstrates its application through a model example of a simple OSGi application. Additionally, the paper suggests employing this meta-model for visualizing component-based applications.

Component model-specific descriptions serve the purpose of exchanging information among domain experts in a given component model. However, the specifics of a particular component model can pose challenges for experts from different domains in understanding the architecture of the application. Furthermore, component models often utilize their own graphic notations, making them difficult to comprehend for experts unfamiliar with them.

On the other hand, a general application description is useful for exchanging information across domains, but it lacks details specific to concrete component models, limiting the depth of understanding of the component-based application. UML 2.0, with its underlying component model, exemplifies such a general description language. In the context of UML, there are component constructs that are challenging to model, such as events, which are significant even at the component diagram level for illustrating indirect connections between components.

Our work in the area of software composition shares common features with existing efforts. It addresses the creation of a generic tool capable of handling different component models used for software composition and utilizes a generic approach to leverage the descriptions of component models to achieve this goal.

While UML was designed to be a universal and general modeling notation supported by a meta-model, it also accommodates extensions to enhance its usability when users need to add specific details to the model. UML 2.0 supports extensions through UML profiles, leveraging stereotypes, tagged values, and constraints.

The presented meta-model operates at the level of concrete components and the applications built from them. The component model level must be defined beforehand, as the application level references its elements, assigning meaning to the application elements. Some traits and elements could be perceived as unwanted information from different perspectives, for instance, software architects versus programmers. Therefore, it is important to consider the potential confusion that may arise when representing large and complex applications by using all information contained in both layers of an ENT-based model.

The ENT meta-model enables rich possibilities of grouping and filtering by applying a category set layer over an application model. This approach allows users to define category sets and easily switch between them, catering to their specific informational needs at a given moment.

One of the key advantages of the close relationship between a component model and its real components is the provision of structures for describing component types supported by a component model and grouping component surface elements into traits using a custom classification system to capture their human-perceived characteristics. The classification system contains enough information to enable different interpretations of the resulting component representations by machines. Moreover, the ENT meta-model captures the relations between components and supports the hierarchical decomposition of components.