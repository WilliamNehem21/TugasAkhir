This paper explores the integration of aspect-oriented programming and design-by-contract in the context of reactive systems. The researchers demonstrate the application of the aspect language Larissa and contracts expressed with synchronous observers to create new contracts from existing ones. They validate this approach using a medium-sized example.

Aspect-oriented programming (AOP) enables the encapsulation of crosscutting concerns in aspects, which are then weaved into the program. A pointcut specifies the program points where the aspect intervenes, while advice defines the actions taken at each join point.

Existing aspect languages, such as AspectJ, lack the necessary semantic properties for formal verification in the context of reactive systems. To address this, the researchers developed the aspect language Larissa as an extension to the synchronous programming language Argos, which is well-suited for reactive systems due to its hierarchical automata structure.

Design-by-contract, a principle originally tailored for object-oriented systems, specifies methods with contracts consisting of assumption and guarantee clauses. The contracts have been adapted for reactive systems using observers to express temporal properties over input and output traces.

The paper presents a method for deriving new contracts for Argos programs and Larissa aspects, where an aspect is applied to a contract to derive a new contract. The researchers also outline the core features of Argos, including input/output automata, synchronous product, and encapsulation.

In Larissa, two types of advice are defined for aspect-oriented modifications. The researchers illustrate the weaving of aspects into contracts and describe the process of transforming observers into non-deterministic automata and then back into observers.

The proposed approach is further demonstrated through examples, such as the re-triggerable MFF and a controller for tramway door systems. The modular verification of woven programs against contracts and environments is shown to be an effective method for verifying safety properties.

The paper highlights the advantages of this approach, including the ability to analyze aspects against contracts during the development phase, the independence of re-verification when the base program is changed, and the potential for modular verification of larger programs.

Overall, the paper introduces a novel approach for integrating AOP and contracts in the context of reactive systems, presenting a detailed method for deriving new contracts and demonstrating its applicability through practical examples.