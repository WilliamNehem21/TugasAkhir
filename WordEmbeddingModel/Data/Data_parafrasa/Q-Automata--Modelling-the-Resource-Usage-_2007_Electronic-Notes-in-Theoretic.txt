Weighted automata, which incorporate a simple weight or cost on each transition, have been the subject of extensive study since the early days of computer science [16,26]. These automata are known to have practical applications, as exemplified by Mohri et al.â€™s work on speech processing [23,24]. Buchholz and Kemper have studied these automata in detail.

Priced or weighted timed automata [2,9] encompass a model of time using clocks and involve costs on states and transitions. The cost associated with each transition is incurred each time the transition occurs, while the costs of each state are paid once for each time unit the automaton spends in that state. This framework provides a comprehensive model of costs and time, which is often undecidable.

Our paper represents an initial presentation of our concepts and ideas, and due to space constraints, it offers a relatively informal outline of our initial findings. In the following section, we introduce our cost algebra, and in Section 3, we define our automata. Section 4 addresses restriction and channel communication, demonstrating how synchronous communication between automata can be used to model various types of channels. Finally, in the concluding Section 5, we briefly discuss potential future work related to the potentially infinite maximum cost.

It is evident that the product of two q-algebras is indeed a q-algebra. In some cases, elements of a product in two different q-algebras may represent the same resource. When taking the product of these algebras, the aim is not to duplicate these entries but rather to combine them. This can be achieved by utilizing a q-algebra with members that are tuples of labeled elements. The following definitions introduce labels to the algebra, which can be utilized for comparison when calculating the product of two (labeled) q-algebras. These definitions allow for the representation of values such as (power:2, cpu:10) and (power:7, errors:1), as opposed to (2,10) and (7,1), and for their product to be (power:9, cpu:10, errors:1) rather than (2,10,7,1). These products are only defined if the operations on identically labeled algebras are the same.

Additionally, it should be noted that even if automaton p1 sends a message on channel stdout at the same time that p2 receives a message on stdout, it does not necessarily imply that p1 and p2 have communicated. In fact, p1 may receive a message on channel stdout from some other component while p2 sends a message to some other component over the same channel. This difference between the {stdout} and the {stdout?, stdout!} action sets allows us to establish that constructing products of q-automata is associative.

Furthermore, only one input may synchronize with only one output, and multiple inputs may not synchronize with the same output. To model a broader range of communication styles, including asynchronous, lossy, and multicasting, channels are explicitly modeled as automata (similarly to constraint automata).

An infinite number of computations can only be generated by looping. A single loop may either add a fixed cost to a computation (resulting in a potentially infinite cost) or may set a new level cost or have no effect at all. Thus, a single traversal around a loop is sufficient to predict the effect of an infinite number of traversals of that loop. This means that we can calculate the maximum cost in finite time, even if that cost is infinite.