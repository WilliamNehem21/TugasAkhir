The issue of global wire delays in designing systems-on-chips (SoCs) is considered to be highly crucial, especially with recent nanometer technology processes, which have rendered global wire delays unable to scale any further. The majority of industrial computer-aided design (CAD) flows operate under the assumption of synchronicity, which enforces stringent uni delay requirements for communication and necessitates the incorporation of repeaters to segment long wires. Consequently, designers are compelled to factor in these delays when creating the local intellectual property (IP) blocks, leading to further implications for system design.

In this research, the term "computation network scheme" (CNS) is used to describe a graph comprising computation nodes as its vertices and links as its arcs. Additionally, the concept of a marked graph is introduced, which is a CNS where time is asynchronous, and computations are executed independently given the presence of sufficient tokens in their incoming links.

The shell wrapper in the latency-insensitive design leads the overall system to start functioning as soon as all input data is available. The interconnection element in this design, known as a relay-station, consists of a 2-place capacity buffer, and the back pressure protocol ensures that this capacity is not exceeded. Furthermore, a statically scheduled latency-insensitive design (LID) is characterized by using places of capacity either 1 or 2, facilitated by the static schedule of the LID, which prevents overflow in these places.

The period and periodicity of a statically scheduled LID are determined by the ultimate periodic behavior of the system, where it consumes and produces k values in p instants, with k denoting the throughput of the system and p being the period. Due to the independent design of each subsystem component, the rate (k) of each subsystem may vary. In the event of combining these subsystems with other global asynchronous local synchronous (GALS) components or synchronous components, the subsystem with the slowest rate dictates the overall rate of the system, and the other subsystems may need to be slowed down while maintaining their internal behavior. Clock gating managed by the state of input and output buffers facilitates this adjustment.

When integrating a GALS interface on the input/output side of the subsystem, the interface is responsible for managing a specific synchronization protocol, ensuring correctness of the behavior, providing necessary buffering resources, and implementing required clock synchronizers. In scenarios involving a fully-synchronous framework, the complexity of composition increases due to the impatience of synchronous circuits, necessitating a higher level of buffering to accommodate variations in throughput between the subsystem and the synchronous environment.

In summary, the research explores the implications of wire delays in SoC design and delves into the technicalities of latency-insensitive design, subsystem scheduling, and the integration of GALS components, shedding light on the complex interplay of timing and system architecture in modern integrated circuits.