We address the issue of efficiency in aspect-oriented programming by enhancing the execution mechanism for aspect-oriented programs. Traditionally, aspect-oriented programs are executed by mapping aspect-oriented constructs to Java bytecode, which is then executed on a standard Java virtual machine. However, recent research has explored extending the executing Java virtual machine by incorporating aspect-oriented features. It has been observed that the first approach offers limited optimization gains due to its reliance on the limited operations of Java bytecode, while the second approach provides greater optimization potential. Implementing aspect dispatch mechanisms at the level of the JVM holds promise for facilitating efficient weaving policies suited to the specific requirements of static and dynamic weaving in systems with limited memory and computational power.

In our work, we extend the JamVM virtual machine to optimize various aspects of the aspect execution mechanism for OT/J. Initial experimental results demonstrate a significant reduction in execution time, thereby enhancing runtime performance.

This paper is organized as follows: Section 2 provides an overview of the foundations of aspect-oriented programming, while Section 3 presents our optimizations of aspect execution. Section 4 explains our implementation of selected optimizations in the existing execution environment of OT/J, accompanied by initial experimental results. In Section 5, we discuss related work, and in Section 6, we offer conclusions and outline future work.

Aspect-oriented programming (AOP) enables better separation of concerns, facilitating the modularization of crosscutting concerns that would have been scattered across the module structure in purely object-oriented designs. The core functionality is implemented in the base program, while the crosscutting concerns are defined in separate aspect modules. These aspects define crosscutting functionality together with aspect bindings, specifying the points in the execution of the base program (join points) at which they should be executed.

There is no strict definition of aspect-orientation, resulting in a variety of aspect-oriented programming languages. Some of these languages allow for dynamic activation and deactivation of aspects, including OT/J, which supports advanced modularization concepts. In OT/J, aspect functionality is defined in role classes that adapt individual base classes. These roles are contained in team classes, which define a collaboration context for them.

The aspect code must be woven into the base code at some point to be executed at the defined join points of the base program. Different approaches exist for aspect weaving, such as compile-time weaving and run-time weaving. Our aim for the optimization of the woven program code is to enhance the functionality of the executing JVM, resulting in a significant gain in execution time, as demonstrated in our initial experiments described in Section 4. Moreover, this optimization paves the way for our long-term goal of dynamic weaving of aspects at run-time, instead of at class loading time, to further optimize the code size of the executed applications.

Our work starts by illustrating the overhead caused by different tasks performed during aspect execution and subsequently presents optimizations for these kinds of overhead. The overhead of aspect-oriented program execution is due to additional control flow using additional data structures and the weaving process itself. We propose optimizations for the different kinds of overhead identified, such as introducing a specialized aspect dispatch mechanism working on the VM-internal activation infrastructures, adding a reference to the implicit super role for role classes in the VM, and more.

We selected the JamVM for implementing our optimizations due to its open-source availability, extensibility, performance, support for target architectures, and compatibility with existing OT/J. The JamVM supports the full JVM specification version 2 and is applicable for embedded devices.

Our experiments have shown a significant improvement in the time efficiency of aspect activation. We plan to implement additional optimizations proposed in Section 3.2 to further enhance the execution of aspect-oriented embedded applications. As embedded software becomes increasingly important, applying software engineering methods in this area is crucial. Our proposed optimizations aim to make AOP applicable for embedded mobile devices, and our initial results demonstrate a considerable performance gain for the aspect activation mechanism of OT/J.

This research has been funded by the German Science Foundation (DFG) under the Emmy Noether grant no. GL 360/1-2, and we also acknowledge the assistance of our student Magdalena Luniak in the implementation of the optimizations and the analysis of the measurement.