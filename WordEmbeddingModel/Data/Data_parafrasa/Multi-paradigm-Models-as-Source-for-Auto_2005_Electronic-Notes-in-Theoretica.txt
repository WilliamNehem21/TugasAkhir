Software engineering has utilized a range of techniques relying on abstraction and various forms of composition to construct intricate software systems, thereby making the effort required for software construction more manageable. However, there is a lack of similar techniques for software verification and validation, leading to the inability to thoroughly verify or test systems that are larger and more complex than those we can construct.

The theoretical advantages of model-based testing do not necessarily translate straightforwardly to practical applications. It is not immediately apparent that model-based methods can be successfully applied to complex software systems produced in the industry. Furthermore, the success of a single application does not guarantee that the techniques used can be easily extended to a wide range of industrial software. These challenges can only be overcome through experimentation and understanding the critical characteristics of the approach for successful industrial practice.

The industrial application of model-based testing methods requires comprehensive support for all aspects of test development and testing, as evidenced by the capabilities of Unitesk. Additionally, it appears that in order to obtain practical results from formal models, it is necessary to integrate different formal methods. Unitesk serves as an example of a multi-paradigm technology where diverse approaches to the formal treatment of software coexist symbiotically, and it is only through their combined usage that the stated goals can be achieved.

The subsequent sections of the paper delve into various issues related to test development and testing across all phases of the software lifecycle. It describes the challenges that test development technology must address in order to be applicable to industrial software, and briefly outlines existing solutions within various formal frameworks. The conclusion drawn is that no single formal approach provides all the desired features for successful test development technology. The paper also presents the key concepts of the Unitesk approach and how it integrates different formal techniques, and concludes with potential directions for future work.

The paper identifies a lack of references on the formal consideration of testing issues for concurrent and distributed systems. It raises questions about how to stimulate test actions for such systems in a way that explicitly checks their concurrent behavior, and how to interpret observable system responses to verify their conformance to the given model, considering the unclear notion of concurrent actions and the inability to introduce a full order on input actions and system responses observed in different places, which is common for concurrent and distributed systems.

The paper discusses various methods for constructing oracles from contract specifications, such as checking preconditions, calling the target operation, and verifying postconditions and invariants. It also explores approaches based on temporal logics, trace specifications, and scenario-based specifications, as well as coverage criteria based on models of the target system. It examines the usage of probabilistic models to estimate the reliability of the system under test, and presents techniques that use a model from contract specifications and partition the domain of each operation under test. The paper emphasizes the need for strict definition of conformance relations in test development methods, and emphasizes the seamless integration of different formal models in the test development process.

In addition, the paper discusses various tools developed by different organizations that utilize formal methods for test development, including Rational TestRealTime, ASML Test Tool, GotchaTCBeans, TorX, and TGV. It also highlights the effectiveness of integrating various formal techniques in test development for industrial applications, as demonstrated by the Unitesk technology.

Overall, the paper emphasizes the need for new techniques and approaches to address the challenges of software verification and validation, particularly for complex and industrial-scale software systems. It promotes the integration of diverse formal methods and experimentation as key steps towards achieving successful test development technology for industrial applications.