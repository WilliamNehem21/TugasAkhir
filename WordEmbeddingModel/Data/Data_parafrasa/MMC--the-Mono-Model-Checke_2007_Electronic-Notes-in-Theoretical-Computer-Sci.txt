The software model checker called Mono Model Checker (MMC) has been designed for verifying CIL bytecode programs, allowing it to detect deadlocks and assertion violations. Developed on the Mono platform, MMC's architecture is inspired by Java Pathfinder (JPF) and its performance is comparable to JPF. This paper provides an introduction to MMC, outlining its key architectural features.

Furthermore, Feaver is a tool used to extract high-level verification models from low-level C code, which can then be verified using Spin. Similarly, the first version of JPF translated Java programs into Promela models for verification with Spin.

JPF explores the state-space of a Java program on-the-fly and reduces its size by applying techniques such as partial order reduction and heap symmetry reduction. Similarly, MMC, developed in C#, is heavily influenced by JPF in terms of architecture and design, with its approach to verification being credited to the developers of JPF.

The exploration process in MMC involves checking for deadlocks and assertion violations, with deadlock being defined as a state with no runnable processes but not all processes have terminated, and assertions being user-defined conditions that must hold in a certain state.

In MMC, instruction executors are responsible for executing CIL instructions, with each type of instruction having its own executor implemented as a C# class. The design resembles the command pattern, allowing for the addition of new CIL instructions without modifying existing code and the inclusion of associated metadata in the executor classes.

MMC's transition between states consists of safe instructions and one unsafe instruction, with safe instructions being those whose execution is not relevant to other threads and unsafe instructions potentially influencing other processes. To manage state explosion, MMC uses techniques such as recursive indexing and collapse compression.

The experimental performance of MMC, conducted on an AMD Thunderbird 700 CPU with 768MB of RAM running Linux, suggests that MMC is a valuable platform for experimentation with different implementations in an academic environment.

Overall, MMC is presented as a model checker for CIL bytecode programs, with a clear, readable, and extensible implementation, making it useful for academic environments.