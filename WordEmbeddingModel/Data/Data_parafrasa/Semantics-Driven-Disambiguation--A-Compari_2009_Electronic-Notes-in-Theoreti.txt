Due to their large size and complexity, programming languages are particularly difficult to disambiguate. The transformersproject initially employed algebraic specification formalism (ASF), then Stratego, and ultimately implemented Tag, an attribute grammars (AGs) engine for syntax definition formalism (SDF) grammars (David 06 ICCP). This paper examines and compares these three approaches.

The remainder of this paper is organized as follows: section 2 introduces SDF and SGLR, and discusses the three environments used for implementing disambiguation filters—ASF, Stratego, and Tag. These environments are evaluated in section 3 within the context of the various layers of Phenix. Section 4 provides a summary of the results, and section 5 offers concluding remarks.

Tag AGs, as described by Knuth 68 JMST, provide syntax-driven specifications for the semantics of context-free languages. Attributes hold values that are associated with grammar symbols, and semantic rules are linked to production rules, expressing local computations that pertain only to the attributes of the production symbols. Inherited attributes are computed using values from the parent, while synthesized attributes use values from the children. During runtime, an evaluator determines the global order in which attributes are computed for the entire parse tree.

This section presents the layers of Phenix and discusses their disambiguation using the three aforementioned methods. The first layer is elaborately detailed to explain the process of disambiguation—which involves removing invalid derivation trees—using the three frameworks. Due to space limitations, only the most significant results are presented. A comprehensive understanding of the three toolsets is likely necessary to fully grasp the code.

While Stratego supports the specification of patterns in the concrete syntax of the object language, this feature is not utilized due to the ambiguity of Phenix. Each construction should be prefixed to indicate the node to which it refers. Tag attributes are integrated into SDF using the attributes annotation.

Another extension involves scoping, where a variable name may have different bindings. Declarations made in a scope must be discarded upon leaving it. The extended Stratego necessitates the addition of a dynamic rule (get-access) to maintain a list of accessible namespaces. This adjustment requires modifications to all previous code.

The Tag extension is quite invasive, requiring numerous changes. The attribute 'ns' alone is insufficient to determine whether a variable is reachable. A new attribute, 'access ns', is introduced to store a list of reachable namespaces, which must be maintained in all rules.

Stratego is highly expressive, enabling the straightforward expression of complex traversals using various combination operators and user-defined strategies. Scoped dynamic rules provide support for modularity, allowing transparent traversal of unrelated nodes and direct application where needed. However, when extending the grammar, care must be taken to ensure that the code can accommodate the changes, as Stratego modules are not directly linked to the grammar.