Many C programs rely on implicit domain-specific information, such as units of measurement associated with values. However, the lack of a built-in mechanism in the C language to represent this additional information makes it challenging to detect violations of domain-specific policies, such as unit safety violations. This paper introduces a static analysis approach, based on an abstract C semantics defined using rewriting logic, for identifying unit violations in C programs. Unlike typed approaches, this analysis leverages annotations in C comments on function headers and in function bodies, without modifying the C language. Initial evaluation results demonstrate good scalability and the ability to detect errors without imposing a heavy annotation burden.

Various programming languages, including C, often employ domain-specific information, such as units of measurement, which are associated with specific values or variables and are governed by unit rules to ensure safe operations. However, this information is typically implicit and lacks a program-level representation, making automatic verification of unit safety challenging.

In this paper, a new solution for the C language, called cpf[units], is proposed for enforcing unit safety in C programs. It is based on the cpf framework and extends the concepts introduced in the c-units system. cpf[units] allows the addition of unit-specific annotations to C programs in the form of function preconditions, postconditions, assertions, and assumptions. These annotations are then validated using abstract rewriting logic semantics of C and the units policy.

Other approaches have focused on extending language and type systems to incorporate units into the type system and language syntax, enabling the compiler or interpreter to check expressions for unit correctness using extended type checking algorithms. However, these approaches require manual addition of relationships between units and can mask potential errors.

Annotation-based systems, such as jml and spec#, have been applied to various problem domains but have not been specifically tailored to handle units. cpf[units] builds on the concepts from the c-units system, utilizing abstract semantics and annotations. Notably, cpf[units] has been designed to be modular, covering a larger portion of C, and incorporates improvements in error reporting and handling complex unit annotations.

The paper also introduces cpf[units], a tool for checking the unit safety of C programs using annotations in source code comments. After converting the annotated code into a formal representation based on abstract C semantics, the tool checks the annotations function by function to ensure accurate verification without significant increase in verification task size.

The paper presents several areas for potential extension of cpf[units], such as addressing cases currently not covered by the tool, refining error messages, and handling more complex unit annotations. These extensions aim to enhance the capabilities of cpf[units] and broaden its applicability to handle a wider range of C code.