The use of graph rules in combination with graphs can establish a model of computation known as a graph transformation system. The study of graph grammars, which encompass more general structures defined as graphs, including an initial graph, expands the theory of formal languages. The algebraical approach to graph grammars, known as the double-pushout approach, employs categorical constructs to define the relevant aspects of the model of computation provided by graph grammars. This approach is characterized by derivations based on two pushout constructions in the category of graphs and total graph morphisms. In contrast, the single-pushout approach features derivations characterized as a pushout construction in the category of graphs and partial graph morphisms. It extends the double-pushout approach to accommodate the addition and deletion of items in unknown contexts, an important feature for distributed systems. Graph grammars have been utilized to specify various types of software systems, with the graphs representing states and the graph productions representing the operations or transformations of such systems. Additionally, concepts of parallel and distributed productions and derivations in the algebraic approach are valuable for modeling concurrent access, aspects of synchronization, and distributed systems.

In the paper, Section 2 presents the order relations utilized to express the inheritance relation on objects and the overriding relation between methods. Section 3 demonstrates how these relations can be combined into a graph structure to represent an object-oriented class structure, leading to the formation of a category whose objects are object-oriented system specifications and whose morphisms are relations between them. Section 4 discusses how the semantics of common features of object-oriented languages, such as extension by inheritance, object aggregation, and system composition, can be defined in terms of special colimits of the category defined in the previous section. The proofs for most of the content in Sections 2, 3, and 4 are omitted due to space limitations, though they are considered straightforward and easily verifiable. Lastly, Section 5 draws conclusions about the work presented in the paper.

To assure the maintenance of the strict ordered function's structure when combining sets, specific restrictions are imposed. These restrictions dictate that if an element is mapped, then all elements from the chain to which it belongs must also be mapped accordingly, respecting the strict relation on its set. The restriction is necessary to ensure that the strict relation structure is preserved when the sets are combined. The paper also provides a sketch of the proof that strict ordered functions and sets form a category, demonstrating that strict ordered functions are closed under composition and that their composition is associative, with the identities constructed as in a partially ordered set (poset).

The paper uses hierarchical graphs to model object-oriented systems, with each graph node representing a class identifier and the hyperarcs departing from it corresponding to its internal attributes. Messages addressed to a node consist of the services it provides to the exterior (its methods). The inheritance hierarchy is depicted by imposing a strict relation among the graph nodes, and hyperarcs also possess an order structure to reflect the redefinition of methods inherited from ancestors. This feature is employed to define a formal semantics for dynamic binding based on graph computations.

The paper further describes the composition of class-model graphs and the mapping between elements in different subsystems, emphasizing the formalization of composition in a manner compatible with the combination of systems. The class-model graph morphism, which plays a key role in specifying the shared and unique elements between subsystems, is detailed, highlighting its role in system integration.

The construction of a class-model graph to perform specialization through inheritance requires at least one node to which the new element must be connected, along with restrictions to assure a coherent mapping. The relations on the nodes and edges are utilized to make the inheritance relation among objects and method redefinition explicit. Class-model graphs are designed to reflect the underlying structure of the object-oriented paradigm, aiming to enhance the compactness and understandability of graph specifications.

The paper also emphasizes the use of class-model graphs to provide a typing structure for graph models of object-oriented systems and computations, offering benefits such as explaining common programming features within this framework and ensuring that the results obtained are unique and well-defined within category theory.

In summary, the paper presented in-depth exploration of how graph transformation systems and graph grammars, particularly in the context of object-oriented systems, can be formalized and understood within the framework of category theory. The formalisms and concepts discussed enable the specification and modeling of concurrent access, synchronization, and distributed systems, while also addressing common features of object-oriented languages such as extension by inheritance, object aggregation, and system composition. The paper also offers insights into the use of class-model graphs for system integration and the formalization of composition in a manner compatible with the combination of subsystems.