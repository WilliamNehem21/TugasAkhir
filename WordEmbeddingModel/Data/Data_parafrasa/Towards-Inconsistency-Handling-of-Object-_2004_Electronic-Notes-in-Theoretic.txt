This research paper examines the issue of managing inconsistencies in object-oriented behavioral models, within the framework of consistency management. It begins by providing an overview of existing research on consistency checking and presenting an example of a consistency problem. The paper then delves into the concept of inconsistency handling, and subsequently focuses on the use of graph transformation for addressing inconsistencies in UML models generated by model checkers.

Prior work has previously detailed a consistency concept, utilizing the formal method CSP and model checker FDR to evaluate consistency conditions. To facilitate the translation of submodels and define consistency checks, a consistency workbench was developed, enabling rule-based translations of UML models into semantic domains and the creation of consistency check workflows. The workbench currently includes predefined translations and supports the execution of consistency checks for specific consistency problems.

Inconsistency handling encompasses activities and techniques aimed at addressing inconsistencies in multi-view software development. Depending on the languages and abstractions utilized in model-based development, various techniques for inconsistency handling have been developed, involving changing and non-changing actions and the decision to tolerate or resolve inconsistencies. The paper focuses on discussing actions for handling inconsistencies in object-oriented models.

Detecting inconsistencies is crucial for inconsistency management and is typically carried out through a consistency check, with the results provided in terms of the language in the semantic domain. Back-annotation is utilized to visualize the inconsistency found in a UML model and may require additional support for resolving the inconsistency, depending on the underlying consistency concept.

Back-annotation involves constructing a UML model from a trace in the semantic domain such as CSP to assist in addressing the inconsistency. However, challenges arise in expressing information compatible with the source UML model during the back-annotation process, necessitating an approach that incorporates the necessary information for reconstruction.

The proposed approach involves designing a translation from UML to CSP that determines aspects necessary for reconstructing a UML model and mapping these aspects into a reconstruction model, which can then be used for back-annotating a UML model during inconsistency handling. The paper also introduces the concept of a reconstruction model and explores the use of graph transformation for back-annotation.

Future work will involve a detailed study of back-annotation for different consistency problems, potentially leading to an expanded set of transformations and the inclusion of techniques into the consistency workbench. Additionally, the development of specialized algorithms for user-directed inconsistency resolution and the inclusion of techniques such as negative traces and distinctions between mandatory and potential behavior are also areas of interest.