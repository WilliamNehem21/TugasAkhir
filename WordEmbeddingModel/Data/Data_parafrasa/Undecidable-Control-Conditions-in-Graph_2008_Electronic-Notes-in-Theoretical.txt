As the utilization of diagrams and their manipulation gains traction across various fields, the significance of graph transformation in recent years has become increasingly pronounced. Numerous applications of graph transformation have emerged, including in UML, MDA, software refactoring, and logistic processes. The literature has put forth a variety of graph transformation approaches, each distinguished by the type of graphs they consider and their approach to graph transformation. A comprehensive review of these approaches can be found in the three-volume handbook of graph grammars and computing by graph transformation [14, 5, 6].

The termination of the derivation process is crucial when seeking to compute the semantics of a transformation unit. It has been demonstrated that determining whether graph rewriting terminates is generally undecidable. Consequently, several methods have been explored to restrict graph transformation systems and address the termination problem. Specific termination criteria based on the number of nodes and edges have been proposed, along with a general approach based on measurement functions. The termination criteria outlined in these methods have been implemented as termination checks in the AGG system.

This paper aims to examine a transformation unit that models an arbitrary Turing machine. The double-pushout variant is chosen as the graph transformation approach, while a string graph is used to represent the tape. Additionally, two special cells labeled "d" (indicating the left end) and "e" (indicating the right end) are introduced to determine the position of the head. It is essential to note that the head cannot be placed on these special cells.

Control conditions govern the control flow during rule applications and the use of imported transformation units. Various types of control conditions and their interrelations have been extensively studied. Three kinds of control conditions, namely regular expressions, as-long-as-possible, and priorities, have proven to be particularly useful in numerous examples. This section delves into the study of these control conditions from the perspective of decidability.

The iteration of a star-free regular expression over rules with as-long-as-possible yields a semi-decidable control condition. However, it is generally not decidable due to the semi-decidability of the halting problem for Turing machines, which is encoded in the variant of the Turing machine simulation presented earlier. Additionally, priority control conditions, where a higher priority is assigned to some imported transformation unit, are generally undecidable.

Both iterating a single imported transformation unit with as-long-as-possible and priority control conditions providing a higher priority to some imported unit are generally undecidable. Only when a higher priority is assigned to rules can the priority control conditions be deemed decidable. Therefore, an initial implementation of graph transformation units should prohibit as-long-as-possible and higher priorities on imported units.

While transformation units as a concept are independent of any specific graph transformation approach, the same cannot be assumed for a general verification method. Future efforts will be dedicated to the verification of transformation units based on a specific graph transformation approach. This focus is especially relevant as we intend to develop a software system enabling programming with transformation units and their eventual execution.