In the following sections, we provide a brief overview of Internet Protocol (IP) and Transmission Control Protocol (TCP), as well as Mixed Intuitionistic Linear Logic. We then outline our specification for the user interfaces of IP and TCP, demonstrating the role of linear operators in the axioms. Additionally, we present a specification of the data transfer component of the TCP protocol, and describe the verification process we undertook to prove key properties of IP and TCP.

The communication stack of many network-based applications relies on the Transmission Control Protocol (TCP) and the Internet Protocol (IP) as fundamental components. Both protocols are characteristic of state-based distributed systems. While IP is responsible for transmitting data between internet nodes, it does not guarantee the delivery of data to the destination node. TCP, on the other hand, operates on top of IP and is responsible for establishing an end-to-end error-free connection between peer TCP entities.

Our specification is based on a series of axioms, utilizing linear operators to define the valid transitions within the system. For IP, we employ ordinary commutative linear logic, as IP datagrams may be reordered during transmission. However, for TCP, where the order of receipt is crucial, we use a combination of commutative and non-commutative operators in its specification.

Section D describes a boolean flag, "b," which becomes false once an end-of-stream (EOS) character is written to the stream. A complete TCP session consists of a pair of these streams, one for the source and one for the destination.

Axiom (6) specifies the operation of reading some data at the destination, transferring exactly "l" octets from "m1" to "m2." The functions "drop(n, l)" and "take(n, l)" are defined, returning a list with "n" elements removed from the beginning of list "l," and a list of the first "n" elements from list "l," respectively.

The IP specification provides minimal guarantees about a message sent from one node to another, as the messages may be corrupted, duplicated, or lost. However, it does imply that a message arriving at a node must have been created at some node. If a node receives a message with a correct header, validated by the checksum, then some node must have sent a message with the same header (although the actual message itself may be corrupted). If the initial datagram is not lost, a message sent from node "a" to node "b" may result in one or more messages with a correct header being received by node "b." These messages will not appear out of thin air.