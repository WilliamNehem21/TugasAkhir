Software quality has long been a concern for the software engineering community, and this issue also affects model-driven engineering (MDE) due to the central role of models in software development. One way to address this challenge is through the use of pattern languages, which help designers communicate ideas and facilitate the creation of high-quality models. However, the selection or misuse of patterns can lead to inconsistent and inefficient designs, underscoring the need for tool assistance in managing quality and ensuring consistency.

In the context of MDE, the quality of Unified Modeling Language (UML) models can be evaluated based on syntax, semantics, and aesthetic aspects. While UML provides well-formedness rules for validating abstract syntax, checks for semantic and aesthetic aspects are typically described in natural language. Consequently, incorporating computer-aided software engineering (CASE) tools can help designers identify and address issues related to model quality.

The paper proposes the use of the Semantics Check and Repair (SCR) process as a means of verifying the application of patterns in designs, focusing on the Patterns of Enterprise Application Architecture (EAA) as a case study. The SCR process detects problems in pattern application, and with the aid of wizards, helps designers rectify these issues, thus contributing to the production of more consistent models.

The paper is structured as follows: it introduces pattern languages and the EAA patterns, outlines the process of verifying pattern languages and the SCR process, describes a case study of integrating SCR into the modeling tool ArgoUML, discusses related works, and concludes with insights for future research.

The EAA patterns, which are organized into presentation, domain, and data source layers, are intended to guide the development of client-server platforms. The SCR process, designed to verify the application of a single pattern, is extended to handle dependencies between patterns. However, the overall process of pattern language verification is still in its early stages of development.

The SCR process involves three steps: checking the unique sign of a pattern, evaluating a set of criteria for consistent pattern usage, and providing feedback to the designer based on the results. The paper also includes examples of Object Constraint Language (OCL) and Java code for defining and implementing well-formedness rules for patterns of EAA.

The implementation of the SCR process in the ArgoUML modeling tool involves adding features for describing pattern signs, criteria, and repair actions, as well as facilitating the detection of correct pattern usage.

The paper highlights previous work on models quality assurance and consistency checking, presenting frameworks and systems developed for these purposes. Additionally, it discusses a language called Epsilon Wizard Language (EWL), which exhibits similarities to the SCR process and has been integrated into ArgoUML.

The experiments conducted with ArgoUML demonstrate that the integration of the SCR process can help detect design problems early in the development process. The authors outline plans for future work, including expanding the scope of the pattern profile, providing guidance on pattern selection, and enhancing the tool to facilitate model verification and repair.

The authors emphasize the potential benefits of continued work on the SCR process and its integration within modeling tools, aiming to improve the support for designers in identifying and addressing design problems. They also express the intention to explore the inclusion of preview functionalities similar to code refactoring in integrated development environments (IDEs) for the repair part of the process.
