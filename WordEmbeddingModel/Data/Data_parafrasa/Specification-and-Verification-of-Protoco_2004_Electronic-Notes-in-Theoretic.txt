This paper addresses the challenge of defining and validating security protocols that involve temporal aspects in their description. To address this, the authors have developed a specification formalism comprising state-transition graphs for each participant in the protocol, with edges labeled by trigger/action clauses. The formalism allows the translation of a protocol specification into a timed automaton, enabling the application of standard model checking techniques for verifying properties expressed in linear/branching untimed/timed temporal logic.

While there have been various approaches and promising results in the analysis of cryptographic protocols, many existing techniques focus on protocols where specific timing information is not critical, and low-level timing details are abstracted. The authors propose an approach that differs from existing methods by using timed automata as the frontend of a new specification language specialized for security protocols, as opposed to using timed automata as the specification language itself.

The paper provides an application of the proposed formalism to a non-repudiation protocol, where the protocol's fairness property is verified. The non-repudiation protocol involves the exchange of messages between Alice and Bob, ensuring that neither party can falsely deny sending or receiving the message. The remainder of the paper is organized as follows: it briefly introduces the non-repudiation protocol of Zhou and Gollmann, presents the specification language and resulting timed automata for the example protocol, and covers the translation into timed automata. The paper concludes with the verification of the fairness property for the example protocol and some final conclusions.

The non-repudiation protocol presented in the paper aims to prevent unfair behavior due to communication channel faults or a party not adhering to the protocol rules. The protocol involves splitting the message into a commitment and a key, which are sent to both Bob and a trusted third party. If a dispute arises, both parties can retrieve the key from the trusted third party. The paper provides detailed notation for describing the protocol and explains the non-repudiation evidences that both parties obtain in case the protocol concludes successfully, as well as in case of a dispute.

In addition to the non-repudiation protocol, the paper defines an algebra for expressing structured messages used in communication among protocol participants. The algebra includes operations for commonly used cryptographic primitives and temporal constraints associated with messages.

The authors highlight two main advantages of their approach: the close alignment of the specification language with the style of protocol designers, and the automatic translation of a protocol specified with this formalism into a timed automaton. This enables the use of standard model checking techniques to verify security properties expressed in temporal logic.