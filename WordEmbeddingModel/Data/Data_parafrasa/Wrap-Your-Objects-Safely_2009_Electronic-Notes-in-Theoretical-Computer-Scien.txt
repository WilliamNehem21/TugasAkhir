The advent of open distributed systems and embedded devices has introduced various challenges, such as correct functioning, modeling, practical implementation issues, and, most significantly, security. Security, in particular, is crucial due to the potential compromise of data privacy, confidentiality, and integrity during the uploading or downloading of applications to a device. Consequently, there is a pressing need for new solutions to ensure a minimum level of security at run-time. This is a complex task, given the openness of modern systems, which implies uncertainty about the possible environments with which the software will interact.

It has been recognized that the shared-state concurrency model is not well-suited for open distributed systems, despite its prevalence in modern languages such as Java. A more natural approach for modeling distributed systems involves message-passing and concurrency, such as in the creol model, where objects running concurrently communicate asynchronously through method calls. To further explore this approach, we have selected creol as the underlying language due to its communication model, simple semantics, and support for dynamic class upgrades.

The upgrade of classes in a distributed manner, independently installed at affected objects without interrupting execution, poses potential risks, as it allows for the insertion and execution of unsafe code in a hostile environment. By focusing on controlling the flow of messages in and out of wrappers, we aim to address issues related to unsafe data and code flow.

In addition to enhancing security, we also aim to introduce the notion of locality to the message passing system, which would allow for the grouping of messages into local pools. This is essential for modeling local networks and connected computers.

A wrapped object behaves similarly to an unwrapped object, including the processing of method invocations and reply statements, without awareness of being wrapped. As a result, both standard object creation and method binding can be performed as in traditional creol. However, additional rules need to be added to govern the flow of messages to and from the wrapped component and its environment.

Our approach differs from existing calculi, such as the seal calculus and aspect-oriented programming, in its focus on abstract protection concepts with a simple semantics that can be leveraged for formal program analysis. Furthermore, we suggest that contract logic could be used to write contracts specifying the obligations, permissions, and prohibitions of each party, and the wrapper could consist of an automaton derived from such a contract specification.

While our proposal may not fully address all security issues, it is expected to mitigate some of the problems, particularly in domains such as internet and embedded systems. Moreover, it could serve as a starting point for defining different layers of localities and could be extended to incorporate firewalls for added security.