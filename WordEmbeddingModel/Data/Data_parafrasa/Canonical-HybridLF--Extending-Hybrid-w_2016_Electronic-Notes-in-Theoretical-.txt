This paper introduces canonical hybridlf (chlf), a metalogic for verifying properties of deductive systems, implemented in Isabelle/HOL. chlf is closely connected to two other metalogics: the Edinburgh Logical Framework (LF) by Harper, Honsell, and Plotkin, and the hybrid system by Ambler, Crole, and Momigliano, which is based on untyped lambda calculus and provides a higher-order abstract syntax (HOAS).

The key innovation of chlf is the replacement of untyped lambda calculus with a dependently-typed lambda calculus in the style of LF. chlf enables the use of signatures containing constants representing the judgments and syntax of an object logic, along with proofs of metatheorems about its judgments, using a HOAS interface. Proofs that metatheorems defined in the signature are valid are constructed using the m2 metalogic of Sch√ºrmann and Pfenning.

The paper focuses on reasoning about deductive systems such as logics and programming languages, which are referred to as object logics. It demonstrates the translation of object logics into a metalogic to facilitate reasoning, provided that properties of the object logic are appropriately reflected in the metalogic.

The core of hybrid involves conversion functions that map untyped higher-order syntax to first-order syntax. The paper demonstrates that the conversion technique extends to a new system, canonical hybridlf, which is dependently typed, and dispenses with well-formedness predicates. This new system also facilitates Twelf-style reasoning using the judgments-as-types methodology.

The paper provides an overview of the hybrid system in section 2, briefly discusses the details of the canonical LF logical framework in section 3, and presents examples and comparisons in section 4, including a direct comparison of hybrid and canonical hybridlf encodings of quantified propositional logic. It also discusses an implementation of a logic for proofs in the system.

Canonical hybridlf, like hybrid, employs the concept of abstraction and has function predicates to determine the validity of certain terms as abstractions. However, it extends the general notion of abstraction from unary to k-ary abstractions and adds type abstractions in addition to term abstractions. The paper also discusses the functions lambda and lbind and their implementation in canonical hybridlf, and provides examples of the code for these functions.

The paper demonstrates the use of type constants and datatypes in the context of formalizing the metatheory of a language with variable bindings, and provides references to related work for further reading.