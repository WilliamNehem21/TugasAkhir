The development of the Mondex formal model included a proof of refinement from an abstract atomic model to a multi-step protocol at the concrete level. The principal element of this proof was a backward simulation from the abstract to the concrete. Initially, the development team attempted to construct a forward simulation but was unsuccessful. It was widely believed that a forward simulation refinement was not possible. However, it is now known that a forward simulation is indeed possible, and multiple such simulations have been built.

In the original framework, the backward simulation was associated with an early synchronization, where a single non-trivial abstract step (1, 1) corresponded with a step that occurred early in protocol runs. In contrast, the recently discovered forward simulations are linked with a late synchronization, where various non-trivial abstract steps (1, 1) are matched with steps occurring late in protocol runs.

An interesting aspect of the Mondex protocol is its ability to maintain unforgeability and atomicity properties even in the presence of abort events. The protocol operates in isolation, with the purses only acknowledging expected messages and calls to abort, while ignoring all other messages and calls from the environment. Additionally, the protocol retains the option of initiating a self-initiated abort in response to unexpected events.

The paper aims to demonstrate that a big-diagram refinement of an atomic action to a protocol can be broken down into a collection of small-diagram refinements using forward simulation reasoning, except for branching steps (BS steps). Although forward simulation reasoning can be used for all steps except for BS steps, there are certain trade-offs associated with this approach.

The section also describes an idealized pattern for a single isolated protocol run, which records the full history of the protocol. This description serves as a template for what collections of agents might do over a period of time to achieve a goal described by the protocol. A matching process is used to align these idealized patterns with real-world scenarios, and a projection mechanism is employed to allow for the forgetting of unrealistic details in protocol states.

The paper also discusses the role of real agents in the execution of a protocol, emphasizing the need to distinguish between the various agent roles in a protocol definition and the different instantiations of these roles during system runs.

The discussion of external dependency definitions (XDD) and the motivation to study general possibilities are also addressed, along with the formalization of future and past simulation relations (RP and RF), which are used in the case study and earlier work.