Most model checkers typically work with low-level languages designed for hardware circuit specification rather than software. However, the development of software requires the support of a high-level language offering customary language features such as complex data types and appropriate structuring mechanisms. When employing model checking to analyze software models, a transformation from a high-level language to the input language of a chosen model checker must be provided. This transformation should bridge the semantic gap between the different languages in a way that preserves semantics and minimizes complexity in the model checking task.

The paper outlines the introduction of abstract state machines (ASM) in Section 2 and multiway decision graphs (MDGs) in Section 3. Section 4 presents a transformation from ASM to the graph structure of MDGs. The model checking approach for ASM using MDGs is described in Section 5, and the work concludes with discussions on related and future work in Sections 6 and 7.

To leverage the support of abstract data types provided by MDGs, a syntactic feature is introduced to label any sort as an abstract sort. Functions over abstract sorts do not have a fixed interpretation and allow for any interpretation matching their signature. This abstraction mechanism facilitates the creation of an abstract ASM model from a concrete ASM model, where instances comprise concrete models for all possible interpretations of the abstract sorts and functions.

MDGs, which are a generalization of binary decision diagrams, provide a data structure for canonically representing formulas of a many-sorted first-order logic. Special features of the underlying logic include the distinction between concrete and abstract sorts, and function symbols may be concrete, abstract (if the range is abstract), or cross-operators (if the range is concrete but the domain contains some abstract sort).

Model checking algorithms based on MDGs are introduced, and it is noted that the same model checking algorithms can be employed for ASM models represented as MDGs. The representation of "next let" formulas must be transformed into simple ASM models consisting of additional variables and simple guarded transition rules, which can be further transformed into ASM-IL.

The paper also discusses the treatment of uninterpreted functions elsewhere and compares the expressive power of different logics for model checking. It additionally highlights the benefits of using MDGs for computing abstract models, such as simpler computation and more compact representation of multivalued data types compared to OBDD-based tools.

In summary, the paper addresses the challenges in leveraging model checkers for software analysis and introduces a transformation approach from high-level languages to the input language of model checkers, specifically focusing on the use of ASM and MDGs. It also highlights the benefits and considerations of using abstract data types and decision graphs in the context of model checking.