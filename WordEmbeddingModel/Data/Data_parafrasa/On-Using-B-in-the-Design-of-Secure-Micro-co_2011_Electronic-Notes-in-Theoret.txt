The systematic formal development of safety-critical software has become a well-established engineering practice, particularly in the context of railway systems. However, this approach has not been as effectively applied to hardware development, where formal methods are predominantly used for verification and gate-level transformations and optimizations. In this paper, we present our recent experience in systematically developing a real macro-cell, which paves the way for designing synchronous digital circuits with no functional bugs. We propose a development process tailored to producing circuits that are proven correct by construction and possess additional desirable robustness properties for secure chips. The work reported in this paper is forward-looking and aims to demonstrate the feasibility of this technique for creating high-confidence, trustworthy devices.

The initial development effort involved writing test programs, running simulations, and analyzing their results. The verification plan relied heavily on the expertise and experience of specialized designers. While some specialized tools were used to measure the coverage of the verification campaign, achieving functional specification coverage largely depended on peer review, as the only available reference was the natural language description of the function to be designed.

The idea was to adapt the B formal method for the development of our digital circuits. Although microelectronics development tools already use several formal methods, they are typically employed behind the scenes without the designer's awareness, and their application begins after the source code has been written. These methods are primarily used for verification and various transformations from a register transfer level (RTL) representation to a final placed and routed netlist. However, more expensive functional errors often arise before any code is written, usually stemming from the functional or high-level design specifications. Currently, no verification tool is available for these natural language representations, and only a thorough peer review can potentially identify these error seeds before they manifest as erroneous behaviors in the circuit.

Subsequent refinement introduced an automaton to handle interrupts and reset conditions of the host micro-controller. This refinement elegantly constrained the system's behavior for the remainder of the development process.

Another refinement introduced the main concept of the case study, the segment, by representing an accessible address window using sets. Sets of addresses were refined to be defined by start and end address registers.

We utilized constructive set expressions to facilitate a translation to VHDL that can be synthesized. Furthermore, we believe that specific formal methods and their associated toolsets should be employed to address security properties at each step of the development process.

The exhibited invariant may be slightly too strong, as it only holds for undisrupted circuits. Nonetheless, this refinement stage allows for an exact proof.

The design began with describing an algorithm, often a standard one. However, for some algorithms, desirable security properties are known to significantly impede power analysis success. For instance, in the case of a symmetric key algorithm, a specific property must be satisfied in the final circuit layout.

Although trivial to some, performing verification on the real detailed algorithm revealed intricate situations that only a thorough analysis could uncover. Additionally, we were able to propose an improvement to the detailed algorithm and convinced the designers to implement it by demonstrating that with the proposed modification, exhaustive verification of all properties could be achieved.