We express the construction described in section 2.2 in terms of (co)algebras. Example 6.2 demonstrates how this construction is applied to deterministic automata, and can be understood without requiring comprehension of the abstract construction. Our abstract construction assumes the presence of bras, which may involve branching. However, as clarified in section 8, the factorization of mb resulting in a minimal automaton cannot be formulated within this framework. Furthermore, the construction is linked to another construction, which, instead of a contravariant adjunction, assumes a duality. This renders the factorization of mb unnecessary, as it automatically becomes an epi due to the duality. The construction outlined here contradicts our example of deterministic automata below.

An inquiry may arise as to whether there exists a converse, meaning, whether the i-reachable part of f(x, c) can be obtained from the i-minimization of (x, c). However, example 2.1 demonstrates that this is not the case, as partition refinement for deterministic automata may terminate before the computation of reachable sets in the reversed determinized automaton.

Additionally, we can utilize corollary 7.3 to merge the minimization procedure based on i-minimizations with the one based on i-reachable parts. The potential of computing the i-minimization from the i-reachable part suggests a procedure where we recursively calculate i-reachable parts, as per theorem 5.1, compute i-minimizations along the way, and stop when the i-minimization reaches a minimization.

Within this procedure, when computing the (i+1)-minimization from the (i+1)-reachable part in deterministic automata, one would like to utilize the i-minimization as well. Specifically, given the partition ei computed from the splitters ri (section 2.2), and the new set of splitters ri+1, we aim to compute ei+1 by partitioning the ei partition according to the new splitters, those present in ri+1 but absent in ri. Abstractly, ei+1 can be computed from ei, ri, and ri+1 as follows.

For deterministic automata, the iterative computation of i-reachable parts and i-minimizations using corollary 7.3 and lemma 7.5 closely resembles the construction presented in [8, algorithm 1] and the conclusion of section 2.2. However, the algorithm in [8] terminates only when the reachable part r is found, whereas employing corollary 7.3 allows for termination once the i-minimization becomes a minimization. This situation may arise before the i-reachable part becomes the reachable part (example 2.1).

Proof: This is directly established by duality and theorem 4.4. The factorization system (e, m) on d yields the factorization system (m, e) on dop, l-algebras in d are lop-algebras in dop, and (i-)reachable parts in d are (i-)minimizations in dop.