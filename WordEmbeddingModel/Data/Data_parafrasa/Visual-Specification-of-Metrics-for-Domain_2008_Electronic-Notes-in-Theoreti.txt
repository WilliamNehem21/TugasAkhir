We introduce a domain-specific visual language (DSVL) for defining metrics within other DSVLs. The metrics language is established through meta-modeling and encompasses frequently used types of product metrics. Our objective is to facilitate the definition of metrics for a DSVL, with the aim of reducing or eliminating the need for coding. To achieve this, we utilize visual patterns for specifying the properties to be measured for each metric type.

These concepts have been implemented in the Atom3 tool, which enables the definition of DSVLs through meta-modeling. With this new extension, DSVL designers can define a metrics suite for a DSVL. Subsequently, an environment is generated where various widgets facilitate the measurement of the defined metrics on the models. We provide illustrative examples using the hypermedia design language Labyrinth.

Diagrammatic representations play a pervasive role in numerous software development activities, serving as a means to specify, understand, and reason about the system being developed. DSVLs are specialized diagrammatic notations tailored to specific application domains, providing high-level, abstract representations.

The class "metric" serves as the base class for all metrics that a DSVL designer may create, featuring a unique name and an attribute "variabletypes" that indicates the domain of the metric (i.e., the types for which the metric is to be calculated). Additionally, the "subtypematching" attribute specifies whether the objects in the domain must have the exact type specified or if their subtypes are also allowed. Furthermore, the "dependency" relation enables a metric to utilize results calculated by others, with a constraint in the meta-model preventing cycles of dependency relations.

The class "elementoriented" represents the second subclassification in our taxonomy, focusing on metrics for properties of individual model elements. Consequently, only one type needs to be specified within the domain. The subclass "relatedelements" measures the number of elements of a specific kind related to a given element, with the nature of their relationship specified as a pattern.

User-defined metrics "stratum" and "compactness" are tailored to the hypermedia domain. "Stratum" measures the linearity of the navigation path, ranging from 0 to 1, with lower values indicating less linearity. "Compactness" assesses the degree of connectivity of the navigation graph, also ranging from 0 to 1, with lower values signifying less connectedness. Both metrics depend on the calculation of a distance matrix using the lengths of the paths between nodes, which explains their dependency relations with the distance matrix of navigation paths.

Finally, three metrics have been defined as generalizations of existing metrics in the object-oriented domain. For instance, the "permission inh factor (PIF)" calculates the inherited permission ratio, which serves as an indicator of reuse. It is a specialization of object-oriented domain metrics such as method inheritance factor (MIF) and attribute inheritance factor (AIF). We have also introduced auxiliary metrics to facilitate the calculation of the PIF. The PIF metric, along with the auxiliary metrics, is not generated as a button in the final environment.

In this work, we have presented a taxonomy of product metrics and introduced a DSVL called "metrics" for specifying metrics for other DSVLs. Our language simplifies the customization of metrics through graph patterns. These concepts have been implemented in the meta-modeling tool Atom3, and we have provided examples in the hypermedia domain. The examples demonstrate the utility of metrics, particularly in the early stages of development, for improving design or identifying quality defects before implementation.

Most tools for defining metrics are hard-coded and have limited potential for extension, with the exception of the SDMetric tool, which enables the definition of metrics for UML using a relational-like language based on XML. Our approach is more general, as it is not restricted to UML and can define metrics for any DSVL. Furthermore, our visual metrics language allows for the graphical and declarative customization of metrics. In the realm of meta-case tools, our work is innovative, as existing tools such as GME or MetaEdit+ do not support the definition of metrics as far as we are aware.