This academic paper discusses the representation of events with vertices and causal dependencies with directed edges. The systems being analyzed are modeled using timed automata, which are more versatile than timing constraint graphs as they permit system composition and action selection. The timing bounds involved in the action guards and location invariants of these timed automata are represented as parameters rather than constants, allowing for the modeling of various timed systems, such as communication protocols and asynchronous circuits.

The paper also explores the synthesis of constraints within the context of parametric timed automata or hybrid systems, highlighting the use of methods like counter-example guided abstraction refinement. The authors introduce a method for synthesizing constraints based on counter-examples, with an emphasis on refining the constraints from counter-examples.

The approach detailed in the paper is demonstrated through the presentation of parametric timed automata, a motivating example, and the synthesis of constraints. The method is applied to both the motivating example and an example involving cyclic traces. Finally, the paper concludes with remarks and suggestions for future work.

Acknowledging the assumptions of familiarity with standard timed automata, the paper extends the class of timed automata to the parametric case, allowing the use of parameters in clock constraints. The authors assert that while this class is similar to the classical definition, the incorporation of parameters within clock constraints is not restrictive in practical applications.

The study presents a complexity analysis of the proposed procedure, noting its exponential complexity with respect to the number of parameters, locations, and clocks. However, it reassures that the procedure has performed well in practice across various examples, including those containing up to 10 parameters, 10 clocks, and thousands of potentially reachable locations.

The synthesis procedure described in the paper has been implemented as a script program written in Python, calling upon HyTech for computation. The paper also outlines the successful application of the synthesis method to asynchronous circuits, specifically those employing the bi-bounded inertial delay. Furthermore, the authors emphasize the suitability of their method for asynchronous circuits, citing its successful implementation in the framework of the French ANR project ValMem.

Overall, the paper introduces an algorithm for synthesizing constraints that ensure the same set of traces as a given valuation of parameters. It highlights the practical usability of the method, demonstrating its successful application to asynchronous circuits and its potential for scalability to larger circuits involving hundreds of gates.