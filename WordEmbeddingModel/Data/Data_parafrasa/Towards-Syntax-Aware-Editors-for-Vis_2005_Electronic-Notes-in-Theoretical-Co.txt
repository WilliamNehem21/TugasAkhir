In this research, we have developed a method for creating visual language editors that are sensitive to syntax by incorporating incremental subsentence parsers into free-hand editors. The parser combines LR-based techniques for parsing visual languages with the more general incremental generalized LR parsing techniques used for string languages. This approach has proven to be useful for implementing a non-correcting error recovery strategy and for providing prompts to users during the editing process as they continue to create visual content.

The paper is structured as follows: Section 2 discusses related approaches, Section 3 describes the main features of the XPG grammar formalism and presents a parsing technique for visual subsentences modeled using XPGs. Section 4 explains how the parser can be utilized to implement non-correcting syntax error recovery and prompts during the editing process. Finally, conclusions and avenues for further research are discussed in Section 5.

The "intelligent diagram metaphor" is a recent concept in which the editor parses the diagram as it is being constructed, performing error correction and capturing geometric constraints that represent relationships between diagram components. This metaphor is supported by editors generated using the visual programming environment generator Penguins. In these editors, diagrams can be created freely and in any order, and objects in the diagram can be manipulated while maintaining geometric constraints through a constraint solver. Penguins employs a constraint solver capable of maintaining linear arithmetic constraints necessary for geometric error correction and diagram manipulation. The error correction mechanism used in Penguins is based on the concept of the geometric distance between sentences, allowing for automatic correction of incorrect sentences by adjusting attribute values of the graphical symbols.

Tuovinen has proposed an error handling strategy for parsing algorithms based on atomic relational grammars, aiming to allow parsing to continue processing input despite syntactic errors without correcting the errors. This error handling strategy has been implemented in the VILPERT system, an object-oriented framework for implementing visual languages in Java.

We present an example of an XPG grammar modeling the data flow diagram language, detailing the nonterminals, terminals, and syntactic attributes. Additionally, we discuss strategies for managing the graph stack and the packed shared parse forest for highly ambiguous grammars.

We also describe the forward and backward parser stacks, including their components and operations, and elucidate our methodology for integrating incremental X-parser algorithms into XPG grammars. The incorporation of tie-points is discussed, providing guidance for the construction and prompt insertion of correct symbols during visual sentence editing.

To facilitate the construction of syntax-aware visual language editors, we have presented a comprehensive approach leveraging XPG grammar formalism and incremental LR-based subsentence parsing technique. When integrated into visual editors, this parser can provide immediate feedback to users by highlighting correct and incorrect subsentences and offering additional support during the construction of visual sentences. Furthermore, the strategy has been found effective for implementing a non-correcting error recovery approach and providing prompts as users continue to compose visual content.