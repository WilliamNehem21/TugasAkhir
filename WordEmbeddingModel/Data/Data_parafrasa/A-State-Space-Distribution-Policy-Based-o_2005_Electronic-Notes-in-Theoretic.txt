The objective of our research is to enhance the performance of distributed algorithms for model checking and state space reduction. To achieve this, we propose a new strategy for distributing states among workers, aiming to minimize the number of transitions between states located on different workers, thereby reducing the communication costs of the distributed algorithms.

Our approach involves using abstract interpretation techniques to derive a compact approximation of the state space based on a high-level description of the system. This approximation is utilized to predict the connectivity of concrete states, which informs the distribution of states among workers. Our experiments demonstrate a significant reduction in cross transitions, with a manageable imbalance in the number of nodes per worker.

The behavior of a reactive system can be captured as a state space or labeled transition system (LTS), where nodes correspond to states, edges represent transitions, and labels on edges correspond to events. In enumerative model checking, an LTS is generated from a system specification, and model checking algorithms are employed to verify desired properties.

Most of the algorithms utilized in the experiments are rooted in reachability procedures, which involve transferring information between states connected by transitions. Hence, to minimize communication costs, it is essential to reduce the number of cross transitions while balancing the number of nodes per worker to maximize parallelism.

To address these challenges, we propose computing a small approximation of the state space using abstract interpretation of the system specification. The connectivity of abstract states is leveraged to predict the connectivity between corresponding concrete states and to assign states to workers accordingly.

The experimental results of our distribution policy revealed a remarkable reduction in cross transitions with a modest tradeoff in the balance of nodes per worker. Our approach, tailored for distributed applications on large graphs, bears resemblance to prior work on graph partitioning methods, such as the one that defined a partitioning function considering the structure of the original specification. However, our experiments show that the abstract interpretation distribution algorithm yields a significantly lower proportion of cross transitions.

As our distributed tools operate on an iterative basis, achieving balanced workload is crucial for the performance of computation phases, while mitigating cross transitions is essential for efficient communication phases. Our proposed approach holds promise for enhancing the performance of distributed model checking tools, particularly in scenarios where the distribution of transitions is critical, and it is scalable without incurring additional costs for larger systems.

Although our experiments utilized straightforward algorithms, we anticipate that employing more advanced algorithms could yield even better distributions of states and transitions. We are currently exploring integrating our implementation with the software package Chaco, which offers a suite of efficient graph partitioning algorithms.