The meaning of processes is now being explained. Most of the technical explanations in this section, up to section 2.2 and also section 3.2.2, are lightly edited excerpts from the primary source for the ideas presented in these sections of the paper.

The joint probability distribution over all potential states of the system at time 't' is denoted as pt. The semantics of a model are determined by the operator 'w', which defines a stochastic process. These stochastic processes can also be tailored to deterministic dynamics, as illustrated below. The model operator 'w' can be composed by adding up operators 'wr' that correspond to parallel, interacting subprocesses.

It is assumed that there exists a typed language that restricts the parameterized terms xi present in the rules. The crucial characteristic of 'p' is that it encompasses a set of function symbols with defined input and output type signatures. These function symbols represent type-supported operations on the typed constants, variables 'xk', and typed parameter expressions 'in'. The typed parameter expressions may include a distance metric. Specifically, integers have the discrete topology, the uniform measure, and can be integrated over by summation; real numbers have the topology generated by open intervals, the associated Borel measure, and Lebesgue integration; and both have distances defined by 'd(x, y)' that generalize to Euclidean distance in vector spaces over the respective primitive types. For many applications, including quantum mechanical ones, the complex field 'c' should also be considered a primitive type. Integration is crucial for the operator representation of dynamics, and distance measures facilitate controlled approximations.

Type constructors generate new types from existing ones. Standard type constructors in mathematically defined programming languages may include type sums, products, powers, and function types, and we will also include quotient types. Here, we describe the type constructors already present in stochastic parameterized grammars and, therefore, in dynamical grammars: vector and product types.

Hence, an object type must support measure and integration, and object type constructors can achieve this through the use of various kinds of norms and distances, including extended pseudoquasimetrics. The generic object data type may take values in a measurable, quasimetric space. Conditions sufficient for the construction of function types and quotient types are previously outlined.

Process modeling languages with operator algebra semantics can be enhanced with type constructors to create objects and processes at successively larger scales and greater levels of abstraction. Vector, product, and graph type constructions are readily available, and recursively related processes can also be defined. However, function types and quotient types are more intricate. We provide conditions under which they can be defined, but we do not know the frequency of these constructions being iterated before the conditions are necessarily violated.