The Unified Modeling Language (UML) specifies different views of software systems using different models. While the abstract syntax of the modeling languages is precisely defined in the UML standard, the dynamic semantics have only been outlined using natural language descriptions. Additionally, the precise correspondences between the different models are not described. In this paper, the author presents an abstract semantic domain that has been independently defined and can be used to provide formal semantics for the various modeling languages. By employing one common domain, the approach supports the integration of different viewpoint models.

The UML standard precisely defines the abstract syntax of the language using the meta-model. However, the semantics, particularly the dynamic semantics of the behavior models, are only informally described in natural language. This lack of precision results in some important design decisions being left open, and there are no precise statements about the semantic interrelations and correspondences between the different models. This makes it challenging to address the integration problem satisfactorily.

To establish transformation systems as an internal model of the UML, the different modeling techniques need to be mapped to this domain, and their semantics need to be defined in terms of transformation systems. This approach makes the meaning of the constructs precise and allows for the formulation of correspondences between the different techniques, as all languages are interpreted in the same domain. Due to the complexity of the UML languages, these mappings should be defined incrementally, starting with kernel languages that are extended step by step.

Furthermore, the paper discusses the formal semantics of viewpoint models using sets of transformation systems and the need for mappings, such as projections, to relate different models and formalize their correspondences. It also examines the semantic integration of a collection of models and how consistency and completeness of the collection can be determined.

The domain of transformation systems extends labeled transition systems, where both the transitions and the states are labeled. The paper also explores the representation of system snapshots and the modeling of object references, associations, compositions, aggregations, and inheritance relations within the framework of transformation systems.

In summary, the paper introduces transformation systems as a formal semantic domain for interpreting different software specification techniques, providing a flexible and general integration framework for software specification techniques. The approach enables the formalization of language semantics, investigation of relations between different languages on the semantic level, reflection of correspondences between different models at the syntactic level, and checking the consistency of heterogeneous specifications through interpretation in a common domain.