The study points out two challenges in software evolution research: the limited availability of information for researchers due to current version control tools not capturing all the information generated by developers, and the lack of integration of software evolution analysis tools into day-to-day programming activities. To address these challenges, the paper proposes a new approach that models development information as change operations retrieved directly from the integrated development environment (IDE) used by developers, in an accurate and incremental manner. This approach aims to provide more comprehensive information for developers and researchers to explore and evolve complex systems.

The paper describes a method to capture evolution information in real-time by integrating tools into the IDE, allowing for the incremental treatment of changes and enhancing the usability of the tools. The approach treats changes as first-class entities and does not distinguish between the system and the changes made to it, thus integrating software engineering into the process of software evolution.

The study acknowledges the difficulty of tracking program-level entities across multiple system versions, especially considering events such as file and entity renames due to refactorings. It notes that some analyses are based on sampled data due to time and space constraints, which can lead to increased changes between versions and difficulty in linking entities across versions.

The paper highlights the challenge of accurately capturing changes in the development process, emphasizing that developers often make smaller, incremental changes that may not be captured effectively by current tools. It also notes the potential for the proposed approach to benefit both reverse and forward engineering activities, as well as program comprehension and transformation.

Furthermore, the paper outlines the applicability of the approach, noting that it is language-specific but can be adapted to different languages and IDEs with effort. It also discusses the potential for the approach to facilitate program comprehension, enable fine-grained understanding of code history, and allow for the characterization and classification of changes and entities.

Finally, the paper presents a case study conducted with student projects to gather data for the proposed approach, demonstrating the use of programming environments tailored for student use and the monitoring capabilities of the prototype.