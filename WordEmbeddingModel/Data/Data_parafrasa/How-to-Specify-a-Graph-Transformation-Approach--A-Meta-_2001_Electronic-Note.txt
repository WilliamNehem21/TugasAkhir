This paper introduces the use of a meta graph grammar for defining a complex graph transformation approach. The meta graph grammar is a typed graph grammar whose type graph describes the structure of graphs, rules, and transformations. It is extended by a specification of the rule application operator using graphical embedding rules, which provide a visual description of the allowable context embeddings of a rule and the side effects of the rule application.

A graph transformation approach formally consists of notions of graph, rule, and transformation, and may also include concepts like graph schemata or control structures. While these concepts are typically defined in mathematical terms, which are important for theoretical development, they may not be easily understandable to potential users if the mathematical language differs significantly from the approach being defined.

To address this issue, the paper proposes the use of meta modeling as a technique for specifying the static and dynamic aspects of application-oriented graph transformation approaches. The paper applies this technique to a subset of the object-oriented graph transformation approach Fujaba, which includes features such as composition, multiplicity constraints, and inheritance.

Additionally, the paper discusses the implementation of one-to-one associations using pointers in the context of the Fujaba approach, highlighting the implications of this implementation for memory usage and potential conflicts in ownership. Furthermore, the paper explains the need for consistency in the management of pointers representing links between objects and the utility of allowing objects to become temporarily orphaned in certain situations.

In summary, the application of graph transformation to object-oriented data models presents challenges in defining the semantics of graph rewrite rules, particularly regarding multiplicity constraints, composition relations, and side effects of object and link creation and deletion. The paper presents a formalization for the static and dynamic aspects of these non-standard features.

The paper also describes the use of a meta graph grammar to specify the set of transformations resulting from applying a story pattern to legal object-oriented graphs and presents a formal representation of the graph grammar productions using algebraic double-pushout (DPO) approach to graph transformation.

The approach described in the paper is inspired by contextualization rules in structural operational semantics (SOS) and seeks to establish a correspondence between graph transformation rules and full UML collaboration diagrams.

In conclusion, the paper presents a novel approach to defining complex graph transformations and contributes to the formalization and understanding of the static and dynamic aspects of graph transformation approaches, particularly in the context of object-oriented data models.