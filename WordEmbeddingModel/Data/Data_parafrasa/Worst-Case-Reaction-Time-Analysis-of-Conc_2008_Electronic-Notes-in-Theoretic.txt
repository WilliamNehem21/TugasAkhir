Reactive programs need to respond continuously to their inputs, and the time required for the program to react with the corresponding output is crucial. While the synchrony hypothesis assumes that the program is infinitely fast, real computations take time. Just as the worst case execution time (WCET) determines the maximum time for program execution, the worst case reaction time (WCRT) of a program sets the maximum time for one reaction.

This paper introduces an algorithm for calculating the WCRT of a program written in the synchronous language Esterel. This value provides an upper bound for the execution time when the program runs on a reactive processor. Specifically, we focus on the execution of the Esterel program on the Kiel Esterel Processor (KEP), a reactive processor designed to execute Esterel-like instructions. The WCRT directly sets an upper bound on the instruction cycles per logical tick, and it also offers a guideline for the execution time when the Esterel program is compiled to software using a simulation-based approach.

Reactive processors, such as the KEP, are well-suited for hard real-time systems due to their support for reactive control flow, including preemption and concurrency. The synchronous execution model of Esterel and its direct implementation on a reactive processor contribute to the practicality of timing analysis for reactive processors. Additionally, reactive processors, unlike general-purpose processors, do not have hierarchical caches, pipelines, or branch predictors, leading to a simpler design and execution behavior that facilitates WCET analysis.

The analysis presented in this paper includes concurrency and preemption and computes the WCRT in terms of KEP instruction cycles, which closely correspond to the number of executed Esterel statements. As part of the WCRT analysis, we also propose an approach to calculate potential instantaneous paths, which may be useful for compiler analysis and optimizations that go beyond WCRT analysis.

The paper details the representation of an Esterel program, explains the algorithm, presents experimental results, and concludes by discussing potential future research directions. Various approaches to classical WCET analysis exist, typically considering subsets of general-purpose languages such as C and accounting for processor designs and caches.

The analysis presented in this paper is not limited to simple Esterel programs and also addresses schizophrenic Esterel programs. The proposed approach extends beyond earlier work to consider concurrency, and it offers a source-level analysis that accounts for compiler optimizations.

To minimize jitter, a maximum number of instructions for each logical tick can be specified, and the analysis is performed at an intermediate level after compilation, allowing for finer analysis and reduced analysis time.

The paper covers details on Esterel, the KEP, and the analysis process, including the representation of Esterel programs, intermediate data structures, and various program behaviors, followed by an explanation of how exceptions and concurrency are handled in Esterel and the KEP. The analysis is performed on a graph representation of Esterel programs, known as the CKAG, and the resulting WCRT information could be combined with traditional WCET analysis taking hardware details into account.