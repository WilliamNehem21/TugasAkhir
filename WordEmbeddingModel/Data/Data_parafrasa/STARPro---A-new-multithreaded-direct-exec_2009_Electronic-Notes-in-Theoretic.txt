Summary of the Paper:
The traditional method of compiling Esterel programs into software code for general-purpose processors or hardware netlists is challenged in this paper. Instead, the paper proposes a reactive processor, called Starpro, that enables the direct execution of Esterel programs. This approach offers the flexibility of software compilation while significantly improving code size and execution time. Additionally, a new intermediate format called UCCFGSD (Unrolled Concurrent Control-Flow Graph with Surface and Depth) has been developed to represent the structure of Esterel programs in the compiler, allowing for straightforward translation into Starpro assembly instructions. The performance of Starpro was compared to a recent reactive architecture, demonstrating an average speed-up of 37% in worst-case reaction times and 38% in average-case reaction times.

Key Concepts:
- The paper compares the benefits of reactive processing with traditional operating systems for managing concurrent tasks, highlighting the synchronous execution and absence of race conditions in Esterel programs.
- Starpro, a novel multithreaded processor, is introduced as an alternative approach to direct execution, outperforming the KEP3A architecture in terms of average performance and logic gate requirements.
- The use of a hardware platform, like Starpro, is contrasted with the use of a virtual machine for executing Esterel programs. While both approaches offer compact code sizes, the hardware platform exhibits superior performance.
- The scheduler and the handling of abort constructs in Esterel within the context of Starpro's architecture are described, emphasizing the implementation choices for efficient execution.
- The construction of UCCFGSD, the mapping between nodes in UCCFGSD and Starpro instructions, and the benefits of using this format for code generation are explained.
- Finally, the performance of Starpro is evaluated using benchmark programs from Estbench, comparing worst-case and average reaction times with KEP3A, generated code size, and the speedup obtained from a pipelined architecture.