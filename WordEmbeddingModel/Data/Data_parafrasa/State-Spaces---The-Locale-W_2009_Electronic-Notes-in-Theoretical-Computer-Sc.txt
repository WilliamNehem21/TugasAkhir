The verification of imperative programs involves the analysis of changes in a program's state. Therefore, representing state spaces effectively is crucial for the usability of a corresponding verification environment. This paper explores different existing state space models from various perspectives, such as strong typing, modularity, and scalability, and proposes a variant based on the locale infrastructure of Isabelle. By leveraging the advantages of previous formulations while avoiding their limitations, this new variant provides added flexibility in composing state space components.

It is evident from this discussion that there is no one-size-fits-all solution for all potential applications. The specific motivation for this work was to reason about C0 programs (a type-safe subset of C) within the Verisoft project. In this context, the representation of the state as a record in a general Hoare logic environment, implemented in Isabelle/HOL, was found to be limiting in terms of compositionality and scalability for large verification tasks within Verisoft.

The most fundamental features of a state space are the lookup and update of a variable, which appear in programming language expressions, assertions, and statements. To reason about a global state, it is essential to express "frame conditions," representing the parts of a state that do not change during certain operations. Integrating these aspects requires the ability to access individual variables and their complements (all other variables).

Typed programming languages structure the program state by assigning different types to variables. If the programming language is type-safe and the HOL type system is expressive enough, mapping program types directly to HOL types is desirable. This allows for the direct use of strong typing from the underlying logic to support the verification of imperative programs.

In composing a system from multiple components, modularity of the reasoning framework becomes important. Immediate compositionality necessitates a uniform representation of the state space of the different components. Replication of components and renaming are also crucial for compositionality. For example, when considering a library for linked heap lists that only considers a next pointer for operations like append and reverse, it is desirable to verify the library once for an abstract next-field and later instantiate it for various kinds of lists.

Different representations for integers, booleans, and arrays are injected into the type value by constructors intg, bool, and array, respectively. By modeling arrays as lists of values, nested arrays can also be expressed. However, a drawback of this approach is the need to explicitly deal with the typing of the programming language within HOL.

The various issues and considerations related to state space modeling in imperative programs highlight the complexities and challenges involved in this area. The paper suggests that a combination of basic logical concepts with an extra-logical layer for type-checking and notation, utilizing the existing locale infrastructure in Isabelle, can provide an effective approach to representing state spaces in imperative programs.