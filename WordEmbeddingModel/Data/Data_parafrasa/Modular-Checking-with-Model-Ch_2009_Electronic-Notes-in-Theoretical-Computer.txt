Model checking is widely used in industry to identify software bugs, but it can encounter problems related to scalability. In an effort to address this, the concept of design by contract (DbC) and modular checking has been proposed, although challenges persist in applying modular checking with DbC to handle function-pointers, defensive programming, and re-entrancy issues. This paper suggests a DbC notation to address these challenges and proposes a checking method that utilizes behavioral subtyping to pinpoint the specific location of errors.

Sat-based bounded model checkers, such as Varvel, often face scalability issues due to the state space explosion problem, which necessitates manual preprocessing of program codes to mitigate the problem. Modular checking is seen as a potential solution to address this issue.

Varvel, a sat-based bounded model checker for C programs, incorporates modular checking on top of the model checker F-Soft. While the integration of DbC into program model checkers is not a new concept, Varvel's explicit introduction of DbC style, where appropriate primitives corresponding to a contract are embedded in the source programs and model checking is conducted, sets it apart from existing tools.

Challenges in handling function-pointers and defensive programming are also addressed in this paper, using code snippets from real industrial projects where Varvel has been applied. Modular checking, combined with model checking, proves advantageous in identifying error locations and providing a scalable method for program analysis. However, limitations exist in modular checking, particularly in its lack of interprocedural flow-sensitive analysis and its production of spurious error witnesses, especially in handling re-entrancy.

Varvel's approach involves generating state transition and property formulas from the control flow graph (CFG), converting them into boolean formulas, and utilizing a model checking engine for sat-based bounded model checking.

Dealing with the contract of higher-order functions is also discussed, highlighting the difficulty in statically checking the contracts of such functions. Additionally, the paper emphasizes the significance of considering practical programming conventions and programmer behaviors in the development of advanced checking tools like Varvel.

Moreover, the paper addresses the need for enhanced DbC notations to guide static checkers in handling the initialization of invariants, especially in languages like C that lack built-in features for initialization. The establishment of programming conventions to enable the implementation of comprehensive checking capabilities by Varvel is proposed as a future direction.