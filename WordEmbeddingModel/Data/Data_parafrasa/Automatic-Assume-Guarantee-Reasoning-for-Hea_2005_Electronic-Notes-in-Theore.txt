Reasoning about ensure/guarantee (E/G) conditions for programs that manipulate the heap is difficult due to the potential arbitrary mutation of the heap through procedure calls, as well as the complex task of specifying the potential side-effects of a procedure. This paper presents an ongoing effort to alleviate the burden of E/G reasoning for heap-manipulating programs by automatically generating post-conditions and estimating the side-effects of non-recursive procedures. The method employed is sound and combines the use of theorem provers and abstract-interpretation algorithms.

Object-oriented programs present several challenging features, including heavy use of the heap and the ability to redefine behavior using inheritance. The paper focuses on analyzing the heap, while leveraging existing methods to handle inheritance in single-threaded programs.

The paper restricts attention to non-recursive procedures, enabling analysis of procedures before their use. Each procedure is analyzed once using an abstract value representing a superset of the stores fulfilling the precondition, resulting in a safe approximation to the post-condition including potential side-effects. The analysis can verify safety properties such as the absence of memory leaks and null dereferences, as well as user-defined assertions. The method involves utilizing computed postconditions of invoked procedures in the analysis of each procedure.

To realize the process, two operations—assert and assume—have been implemented using a theorem prover. The assert operation examines a formula in first-order logic with transitive closure and an abstract value, returning true if all concrete stores represented by the abstract value satisfy the formula. The assume operation refines the input abstract value by eliminating concrete stores that do not satisfy the formula.

The paper also establishes the absence of memory leaks and null dereferences not only for a specific program, but for all programs where the precondition is satisfied, due to the conservative analysis performed on the append procedure. The method also involves analyzing main, treating intraprocedural statements as usual and interpreting procedure calls by checking the precondition and assuming the post-condition.

Dynamic memory allocation is modeled using an additional unary relation, active(v), assuming an infinite number of nodes in a structure and setting active to true for newly allocated nodes. The paper introduces pre f and post f to denote the pre- and post-conditions of a procedure f, where the post-condition is generated by the system.

The method's feasibility was evaluated by implementing it using the TVLA system and the simplify theorem prover, with ongoing development of a Java front end and plans to apply the approach to Java methods in further experiments.