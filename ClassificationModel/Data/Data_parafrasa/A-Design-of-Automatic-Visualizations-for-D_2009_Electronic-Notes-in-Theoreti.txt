We have developed a framework for designing multiple visualization systems, each based on a specific design technique. As a proof of concept, we have implemented a system called srec to visualize recursion. We are now focusing on designing a visualization system for the divide-and-conquer algorithm design technique.

Assuming familiarity with divide-and-conquer algorithms, we define the key terms used in this paper. Divide-and-conquer algorithms decompose a problem into subproblems, which are recursively solved to obtain subsolutions that are then combined to solve the original problem. These algorithms often involve traversing and manipulating data structures, with each subproblem being associated with a part of the structure, such as a subarray or subvector. In this work, we primarily focus on one- and two-dimensional arrays and use terms such as (sub)arrays, (sub)vectors, and (sub)matrices. The boundaries of subarrays are typically defined using a range specified by lower and upper indices.

Our visualization system allows users to select parameters or view results. When a method does not return a value but produces side effects, the initial and final parameter values are displayed. Additionally, the system provides features for zooming, panning, and presenting an overview with details to handle large-scale activation trees. Users can also customize the color scheme to differentiate input/output values and the status of a call in the overall process (executed, active, or pending). Despite these features, the resulting visualizations are deemed unsatisfactory.

A partition tree, a variation of an activation tree, effectively combines recursion and vector representations. It consists of a tree isomorphic to an activation tree, with elements of the vector displayed as nodes in the tree when they are in their final position, or as part of a subvector when they have not been processed yet.

Stern proposes a different approach to visualizing recursive algorithms, categorizing them based on their handling of data structures (modification, traversal, or construction) rather than their recursion scheme. However, it remains unclear whether their visualizations can be generalized. Their proposed visualizations include vectors for algorithms that modify data structures, and trees for algorithms that traverse or construct them. The visualization included in their article for the former class corresponds to a divide-and-conquer algorithm (specifically quicksort), where the vector is displayed horizontally and mirrored by horizontal bars representing recursive calls underneath.

We have developed a working prototype based on our design, but further refinement is required to create a fully operational system. It is important to conduct usability evaluations with experts (e.g., instructors) and students to assess the validity of the system, as was done for the srec system.