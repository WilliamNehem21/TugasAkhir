In recent years, a new trend has emerged in the field of interlocking systems as a result of the opening of markets within Europe. This trend signifies a departure from the traditional strict collaboration between national railway companies and industries, where there was a limited need for precise specifications due to frequent problem resolution over the phone. The introduction of computer-based interlocking systems has led to various industries developing their own approaches to producing them, often based on logic formalism or language, but still bound by the common reference language of principle schemata. The emergence of a geographical approach demonstrates potential in reducing re-validation efforts following system changes, particularly by re-validating only the affected software modules.

The core objective of interlocking systems is to ensure the correctness of interlocking rules, which facilitate the safe positioning of switches, signals, and trains within a station to prevent collisions. Signal indications, managed by the interlocking system, govern the proper use of routes and authorize train movements within interlocking limits.

The statecharts formalism, an extension of finite state machines (FSM), enables the specification of hierarchical parallel interacting state machines. It allows for transitions driven by trigger events, communication between statecharts using broadcasting, and the generation of events and actions during transitions. This formalism can aid in the design and operational specification of interlocking systems, particularly in the absence of global summarizing variables commonly used in functional approaches.

An approach similar to the one utilized in the EURIS language is proposed for the design of interlocking systems, with a focus on methodology that does not necessitate the use of global summarizing variables. This method utilizes geographical objects to distribute the activities performed by functional objects, such as controlling the position of switch points.

Additionally, a geographical approach can be combined with the statechart model to generate C or Ada code using an automatic code generator tool, eliminating the need for translation into lower-level languages. This approach also facilitates re-validation efforts by identifying only the modules affected by system changes.

The authors' experience, presented in this paper, forms part of a broader research project investigating the design of interlocking systems through various statechart dialects and commercial tools. The focus is on adopting a geographical approach to reduce re-validation efforts following system changes and to explore scalability to larger designs. Furthermore, the suitability of this approach for formal verification and automatic generation of statechart models from physical layout specifications needs to be assessed.