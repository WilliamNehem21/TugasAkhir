This academic paper represents a step towards verifying the effective implementation of a satisfiability solving procedure. The verification of the satisfiability (SAT) solver is part of a broader research program to establish a secure foundation for reasoning using a verified reference kernel that contains a verified SAT solver. The verification relies on utilizing predicate subtypes and dependent types in the PVS language to capture the specification and key invariants.

Inference procedures have significant applications in programming and other fields. Recent advancements have greatly improved the power and efficiency of inference procedures, especially in the context of solvers for propositional satisfiability (SAT) and satisfiability modulo theories (SMT). These procedures are utilized in assertional verification, bounded model checking, unbounded model checking, and planning.

The verification process, though interactive, leverages features of the PVS language and inference mechanisms. It involves the use of PVS to delve into the formalization details interactively, resulting in proofs that currently require substantial manual guidance. However, the goal is to explore strategies for greater mechanization, particularly through increased use of solvers for propositional satisfiability and satisfiability modulo theories.

PVS is a framework for specification and verification based on higher-order logic and interactive proof. The PVS specification language enriches simply typed higher-order logic with features such as predicate subtypes, dependent types, abstract datatypes, inductive definitions, and more. Proofs in PVS are constructed interactively by combining automated tools such as boolean simplification, model checking, and induction.

The formalization in PVS encompasses the resolution rule of inference, a representation for partial assignments, definitions of basic operations, and key procedures - propagate, analyze, and dpll. Predicate subtypes and dependent types are heavily utilized to capture key invariants, and typechecking with these types generates proof obligations called type-correctness conditions (TCCs) that must be discharged using the PVS theorem prover.

The main DPLL search procedure is defined recursively and includes operations like propagation and analysis, with termination being a major aspect of the correctness argument. The proof primarily focuses on proving the termination of the DPLL procedure, addressing challenges related to demonstrating that the partial assignment eventually stops growing.

This mechanical verification using PVS of a DPLL-based search procedure for propositional satisfiability serves as an interesting challenge for various automated and semi-automated tools. The verification represents an initial step towards constructing a trusted/verified reference kernel for checking the results of other untrusted verifiers.

While the current verification effort represents a preliminary and exploratory attempt, there are plans to explore avenues for better formalization and greater automation, with the goal of examining the verification of more efficient and expressive satisfiability procedures, including SMT solvers. Although it is promising that complex proofs can be constructed with relatively little effort, there is recognition that there is still considerable room for improvement.