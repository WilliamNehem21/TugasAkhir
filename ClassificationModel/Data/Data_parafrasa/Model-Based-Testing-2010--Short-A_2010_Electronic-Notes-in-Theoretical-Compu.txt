The importance of software quality is growing within the industry, with systematic testing being a widely used technique to assess software quality. However, manual testing processes lack effective automation, leading to errors, time consumption, and high costs. Model-based testing is a technology that has emerged to address these challenges in software testing.

From an industrial perspective, model-based testing shows promise in improving the quality and efficiency of testing, as well as reducing its cost. While the current focus of test automation tools is on automatic test execution, model-based testing aims to automatically generate high-quality test suites from models, complementing the automatic test execution process.

From an academic standpoint, model-based testing is seen as an extension of formal methods and verification techniques, with both formal verification and model-based testing serving complementary goals. Model-based testing aims to show that the physical implementation of a system behaves in accordance with a verified model, acknowledging the inherent limitations of testing and the inability to achieve complete testing.

An important benefit of model-based testing is the automatic generation of numerous test cases from a model. However, to ensure the validity of test cases, a well-defined theory of model-based testing is crucial. The theory should enable precise reasoning about various objects in model-based testing, such as models, input-under-test (IUT), test cases, test generation, and verdicts. Additionally, a testing hypothesis and an implementation relation are essential components of the theory of model-based testing.

In the automotive industry, model-based testing methods such as the .mzt method and the getmore test case generator have been demonstrated to be practically suitable for integration testing of control devices from different suppliers and coordinating functions between suppliers.

Model-centric testing has shown successful practical applications of model-based testing, leading to the development of an established methodology, including guidelines, training, and tooling. This approach enables systematic identification of all test cases and reduces their number, as compared to intuitive, manual test case preparation.

In European industry, the application of model-based systems engineering techniques is increasing to address the complexity of systems and strive for high-quality systems at reduced costs. However, the quality assurance aspect of these developments needs to catch up with this trend.

Research on model-based testing has demonstrated its feasibility, with successful applications at the component level. However, there is a need to focus on applying the technique to the system or aircraft level, aiming to provide high-quality specifications rather than producing code. It has been recognized that testing must be applied early in the system development lifecycle to minimize the cost of addressing discovered problems.

Descriptive modeling of system test cases using a combination of natural language and formal graphical notation has shown to be effective in facilitating communication between system designers and test engineers.

An innovative approach for model-based testing involves integrating various technologies and tools for analysis and testing into a domain-independent model-based analysis and testing tool solution, offering a standard interface for storing and retrieving model elements. This approach promotes the seamless collaboration between different tools and their data in a common, standard way.