Design Methodology for Globally-Asynchronous Locally-Synchronous (GALS) Systems

The design methodology suggested for GALS design involves several steps. Initially, the system's behaviors are identified as concurrent processes communicating asynchronously with unbounded FIFOs according to a KPN model of computation. Validation of the KPN model for properties such as composition and determinacy is then carried out to ensure correctness. Architectural exploration is conducted to determine the appropriate GALS architecture based on the KPN model, taking into account constraints such as area and latency for communication. Based on the results of architectural exploration, refinements are made to the KPN model.

In GALS systems, components are associated with clocks whose specifics are unknown to the designer. These clocks are assumed to be independent and can be generated locally using gates or obtained from an external source.

A new GALS architecture, based on the principles of LIPS, is proposed. The communication within this architecture is managed through valid-stall signals, which are generated based on the component clocks. For every inter-component signal, valid and stall signals are added.

One key component of this architecture is the Input Interface Process with Barrier Synchronization (IIP), positioned at the input of synchronous components. The purpose of the IIP is to synchronize all valid inputs for the computational block, ensuring that the block only executes once all inputs are available. Each IIP contains buffers for each input signal to store input data values, with exactly two storage elements for each input to accommodate for enabling stall signals when the computation block is stopped. The IIP also takes input data signals, valid signals, and a stop signal from the Output Interface Process (OIP) and provides data to the computation block, a data-valid (DV) signal to the OIP, and stall signals to its source components.

While the addition of valid and stall signals increases from previous architectures, the proposed architecture allows components to avoid stopping after every execution, only getting stalled when required. This back pressure mechanism ensures that data is not lost during communication and increases parallelism, leading to improved performance compared to handshake-based architectures.

The storage structure contains fields for inputs and outputs, each divided into address and bound parts. These parts are used to identify input and output addresses simultaneously, with the address being incremented as needed to access or store additional values.

Data in the lookup storage is organized such that the most significant bit (MSB) indicates the data's validity, with the remaining 31 bits representing the actual data. Additionally, a Storage Mapping Unit (SMU) is responsible for mapping input/output addresses to the correct storage locations, extracting MSBs of retrieved data, and managing local storage elements.

In summary, the proposed design methodology for GALS systems involves the identification of system behaviors, validation of the KPN model, architectural exploration, and the introduction of a new GALS architecture based on the principles of LIPS. This architecture employs valid-stall signals and input interface processes with barrier synchronization to ensure efficient communication and improve system performance. Additionally, the storage structure and SMU functionality are designed to effectively manage input and output data within the system.