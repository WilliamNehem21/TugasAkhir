The remainder of the paper is structured as follows: The next section provides an explanation of how the algorithm can learn DFA using a specific example. Section 3 presents two additional examples, and Section 4 describes various implementation details. Finally, Section 5 offers concluding remarks.

Another feature of the available application is that it stores all user-provided answers throughout the execution, ensuring that the user is not asked the same membership query more than once. Additionally, the algorithm consistently constructs a new hypothesis automaton that is consistent with previous counterexamples.

This section concludes with a third example, wherein the target language is defined as the set of natural numbers that are multiples of 3. Determining a number's divisibility by 3 involves adding up all its digits and checking if the sum is divisible by 3. For instance, the sum of the digits in 12123 is 1+2+1+2+3, which equals 9 and is divisible by 3, indicating that 12123 is also divisible by 3.

Other functionalities of the application include the option to reset the application at any time and the ability to save the on-screen constructed automaton to a file recognized by the JFLAP tool. This feature is particularly beneficial for users who wish to further utilize an automaton structure learned through the application, as it allows for saving, loading, and editing of automata using various tools within JFLAP.

While it is possible for users to deactivate this function, doing so may reduce the efficiency of the learning process. However, it enables users to closely follow the actual learning algorithm, as the learning iterations become more distinct from each other. Furthermore, it provides users with the opportunity to experiment with their own counterexample inputs, rather than those chosen by the program. Users can toggle this function on and off at any point during the execution through the options menu.

JFLAP integrates visual and interactive tools that facilitate hands-on experience with theoretical concepts. In the context of the learning algorithm, this package simplifies user interaction with the learner. Among its capabilities, JFLAP can compare finite automata, transform nondeterministic finite automata and regular expressions into minimal deterministic finite automata, and determine whether a specific string is recognized by a finite automaton. This suggests that the package itself enables direct interaction with the learning algorithm within JFLAP.