Graph transformation techniques have been widely applied across multiple domains in computer science, such as software systems development, visual language definition, and programming language implementation. The concept of interaction, a type of graph transformation, has been employed to model concurrent systems, provide semantics for logic proofs, establish programming discipline, and serve as an implementation approach for functional languages. In each case, a syntax and operational semantics have been independently defined.

Furthermore, the use of higher-order syntax offers advantages for organizing and modularizing graph-defined programs. Hierarchical definitions are particularly valuable in the context of graph rewriting and can also be applied to interaction nets using higher-order syntax. Specifically, the process of combining two interaction nets to create a new net, an operation analogous to functional programming application, is currently considered a meta-operation. The paper illustrates how to internalize this operation using higher-order language and provides examples of its application in writing modular programs. Additionally, the paper demonstrates how to model the combination of nets and introduces the concept of higher-order interaction nets, where a net depends on another net, similar to the concept of recursive nets in functional programming.

The structure of the paper is organized as follows: Section 2 briefly reviews rule-based transformations of graphs, graph and term-graph rewriting, and interaction nets. Section 3 introduces the syntax of the higher-order systems, while section 4 illustrates how to represent various systems, such as graph and term-graph rewriting, interaction nets, interaction systems, and non-deterministic nets. In section 5, different sets of higher-order rules are defined, and section 6 presents a simple example of application. The paper concludes in section 7.

The paper explains that the metavariables in metaterms can be seen as placeholders that must be instantiated by terms. Rules act as schemes defining a reduction relation on terms and involve a notion of substitution using substitutes and valuations.

Furthermore, the paper discusses the use of contextual rules, allowing for the inclusion of patterns like z(t) in the left-hand sides of rules, where z is a metavariable and t is a term. This enables the writing of contextual rules, such as the optimization rules presented in section 5. The paper also outlines the use of metavariables in the context-sensitive reduction systems defined.

Regarding proof nets of linear logic, the paper discusses their encodings in interaction nets. It explains that encodings of proof nets in interaction nets fall into two types: one where boxes containing nets are defined by agents with a proof net as a label, requiring an infinite set of agents in the system, and another where a first-order encoding of binders is used to model the box and its contents, and this can be achieved with a finite number of agents. The paper elaborates on the implications of these different encoding approaches.

Lastly, the paper demonstrates a higher-order rewrite framework capable of expressing various graph reduction systems. It emphasizes the utility of the framework, particularly in the context of interaction nets, where a program and its evaluator can be written using the same language. The framework is presented as a valuable tool for designing and implementing graphical languages, as well as for enhancing the structure of graphical programs through the use of higher-order features to create hierarchical systems and name/reuse program components.