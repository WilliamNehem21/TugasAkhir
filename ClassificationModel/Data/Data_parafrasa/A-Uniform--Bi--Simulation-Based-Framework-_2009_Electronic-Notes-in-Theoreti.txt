The downward (bi-)simulations, which expand upon the corresponding backward (bi-)simulations from word automata to bottom-up tree automata, align with the language inclusion preorder. Specifically, if a state r downward (bi-)simulates a state q, then the language accepted by q is contained within the language accepted by r. Consequently, these relations are a natural choice for reducing the size of tree automata.

In previous studies, a single relation from the set of possible language-preserving combined relations was chosen at random. However, we demonstrate that there always exists a unique maximal combined preorder for a given upward simulation and its inducing downward simulation. In Section 6, we present a straightforward algorithm for computing this maximal preorder. From a practical perspective, using the maximal preorder rather than a random one significantly impacts the size of the reduced automaton, as evidenced by our practical experiments.

The problem of computing (bi-)simulations over tree automata is discussed in [2, 1, 9]. In [2, 1], a general approach for computing tree (bi-)simulations by transforming the problem into specialized instances of the classical problem of computing (bi-)simulations over labelled transition systems (LTS) is proposed. Subsequently, classical (bi-)simulation algorithms such as [11, 12] are applied to the LTSS obtained from the translation.

RTMC refers to a family of techniques for analyzing infinite-state systems such as parameterized networks of processes, systems with queues, stacks, unbounded integers, and/or dynamic linked data structures like lists or trees. In RTMC, states are represented by trees, sets of states by tree automata, and transitions by tree transducers (or, in some cases, also by specialized operations on tree automata). ARTMC is a combination of RTMC and the abstract-check-refine paradigm, which typically enhances the efficiency of the technique. Since the size of the generated automata often grows exponentially, making computations infeasible without a reduction, most of the algorithms in the frameworks of both RTMC and ARTMC depend crucially on efficient automata reduction methods.

The tree automata considered in our experiments were encountered in various computations within the frameworks of RTMC and ARTMC. Our experimental evaluation was conducted on an AMD Athlon 64 X2 2.19GHz PC with 2.0 GB RAM. We compared the size of tree automata after reducing them using all the different reduction techniques considered in this paper.

The proposed framework is based on general principles, and it is conceivable that it can be extended to more advanced types of automata such as guided tree automata, nested word automata, or hedge automata, which are used in numerous applications in formal verification, decision procedures of various logics, structured document processing, or natural language processing. Reduction of automata from some of such classes has already been explored in the literature (e.g., the author proposes a bisimulation-based minimization of weighted word automata, and the use of bisimulations for reducing weighted tree automata is considered in).

From a practical viewpoint, it is also worthwhile to investigate more efficient techniques for computing the (bi-)simulation relations, for example, by computing them symbolically (for symbolically encoded automata). Furthermore, delving deeper into the principles behind the proposed combination of downward and upward (bi-)simulation relations could be interesting. It may be possible to define still weaker types of relations that preserve the language of tree automata by using the combined relations repeatedly as inducing relations.