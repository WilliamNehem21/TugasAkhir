Bicategories possess a widely recognized and comprehensive graphical language involving points, lines, and regions, which is primarily employed to present formalism and demonstrate results. This approach is favored due to the direct topological interpretation of the basic axioms, which, when viewed from an algebraic perspective, are complex but are naturally accommodated and simplified by the graphical language. The underlying reason for this phenomenon is not readily apparent, and it indicates a significant connection between topological structures and information theory, meriting further exploration. 

A detailed explanation of the diagram components will be provided in Section 3, but a brief overview is presented here. In the diagrams, shaded regions denote public information, while vertices represent computational processes. Lines depict computational systems carrying information: if a line borders a shaded region, the associated system holds a copy of the public information, otherwise, it carries private information. The dashed vertical lines, though not part of the formalism, signify a segregation of components between "Alice" and "Bob," which aids in interpretation.

It is assumed that a single computational system is located at a distinct point in space at any given time, tracing out a line in spacetime over its history. In the absence of shaded regions, the diagrams represent scenarios where vertices denote interaction points for multiple systems, conforming to the standard notation for morphisms in a symmetric monoidal category. The string diagrams are valued in "rel," the symmetric monoidal category of finite sets and relations, representing endomorphisms of the 1-element set considered as a 0-cell of 2rel. This allows for a natural embedding of the ordinary string diagram calculus for rel into the surface diagram calculus for 2rel, enabling an interpretation of an object of rel as a classical computational system with a specific set of internal states, while morphisms represent arbitrary nondeterministic computational dynamics.

The formalism includes representations where one region splits into two, each carrying a copy of the original public information, and where two regions fuse into one, carrying the same information as the initial regions if their data matches. Otherwise, the computation ceases, and this vertex can be interpreted as indicating the successful comparison of two data values.

The formalism facilitates the proof of protocol-related results based solely on its abstract form, with implications for any implementation. Many of these results have natural interpretations as descriptions of security properties. The generality of these results permits the consideration of attackers with arbitrary computational abilities, as long as their actions can be described using the formalism (i.e., arbitrary nondeterministic processes).

The proof strategy entails construction, with a direct construction of a solution to equation (20) from a description of a message space, a collection of one-time pads, and secure encryption and decryption procedures, as per Theorem 4.5. The reverse is also feasible.

On the left side of the procedure, pre-existing public information is utilized as the data to be communicated. Two correlated systems are prepared using a one-time pad, followed by manipulation of the first copy through a procedure dependent on the classical data, resulting in a pair of ciphertexts. Both are then employed together by a process yielding public information, successful when the outcome replicates the original public information.