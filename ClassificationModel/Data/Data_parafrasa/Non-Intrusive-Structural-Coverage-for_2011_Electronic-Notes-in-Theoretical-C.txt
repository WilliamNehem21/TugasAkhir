This paper introduces a non-intrusive approach for conducting objective caml code coverage analysis that does not involve rewriting the source code. Instead, the method utilizes a virtual machine to monitor instruction execution and generate traces, which are then used to produce a machine code coverage report. By combining these traces with control-flow debug information, it becomes possible to analyze and generate a source code coverage report. This approach aims to provide a method for generating code coverage analysis using the same binary for both testing and production. The custom virtual machine developed for this purpose maintains the same semantics as the original virtual machine and is implemented in objective caml.

In 2006, Esterel Technologies decided to base its new SCADE Suite 6TM certifiable code generator on objective caml. The SCADE Suite 6TM, used for developing safety-critical embedded software, includes a code generator (KCG) that complies with the DO-178B standard and facilitates the certification process for avionics projects.

The DO-178B standard, originally aimed at embedded software, imposes criteria for the development of tools, necessitating adherence to its own coding standard. The forthcoming DO-178C standard is expected to explicitly address the unique aspects of tool certification under the qualification process. One of the testing activities under DO-178B involves code coverage reporting, which presents challenges beyond simply determining the reachability of code segments. For instance, when dealing with complex boolean expressions, it is crucial to verify not only their evaluation, but also the evaluation of their sub-expressions.

Esterel Technologies has developed an open-source code coverage measurement tool for objective caml, called Mlcov, which focuses on the functional and imperative features of the language. The tool covers a substantial subset of objective caml features, such as those allowed by the coding rules of the SCADE-to-C compiler, including the standard library.

The method for measuring coverage involves instrumenting the source code, defining an expression as covered once its evaluation concludes. The instrumentation algorithm replaces each expression with an auxiliary expression (let aux = expr in mark(); aux), where aux is a variable not free in expr and mark() is a side-effect that records the point of program execution.

The certified KCG developed in objective caml is utilized in civil avionics DO-178B projects (e.g., for the A380 Airbus plane) and is qualified in accordance with the IEC 61508 and EN 50128 norms. Additionally, for traditional processors, the QEMU emulator is used for non-intrusive analysis on final target code, while AdaCore develops tools independent of the language and compiler, utilizing source DWARF debug info but imposing several restrictions for MC/DC.

A stack-based virtual machine, ZAM, is employed for executing a functional-based multiparadigm programming language in an untyped manner. The design choice of an untyped virtual machine for a strongly statically typed programming language was based on the assurance provided by static type checking.

To assess code coverage, ZAMCOV exploits debug events and execution traces, associating bytecode instructions addresses with their corresponding source code to determine coverage. This enables the identification of covered and non-covered expressions in the source code.

The paper also discusses the challenges and opportunities associated with the development of non-intrusive coverage tools for different languages and virtual machines, such as the JVM and CLR, and compares different static and dynamic instrumentation techniques for Java code. Additionally, it describes the Coverage project, which investigates non-intrusive coverage tools for Ada and Objective Caml, utilizing the QEMU emulator for the former and the ZAM virtual machine for the latter.