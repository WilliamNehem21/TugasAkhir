The development of an efficient distributed database system (DDBS) is widely recognized as a complex challenge due to various interconnected factors that impact its performance. The effectiveness and accuracy of allocation and fragmentation processes directly influence the performance of DDBS. As such, the proficient fragmentation and allocation of data across network sites are crucial aspects of research in distributed database design. This study introduces an approach that concurrently conducts vertical data fragmentation and allocates the resulting fragments to suitable network sites. The method utilizes the Bond Energy Algorithm (BEA) with an enhanced affinity measure to improve the clustering of attributes. The algorithm simultaneously forms attribute clusters, computes the allocation cost for each cluster at each site, and assigns each cluster to the most appropriate site. The findings demonstrate more efficient clustering and allocation, which leads to improved performance.

Data allocation involves dividing data into fragments that need to be distributed across network sites during the allocation stage. Fragmentation encompasses two processes: vertical fragmentation, which partitions a relation into smaller disjoint sets, and horizontal fragmentation, which partitions a relation into disjoint tuples. The allocation problem revolves around finding the optimal distribution of fragmentation to a set of sites. Four data allocation strategies are applicable in distributed relational databases: centralized, fragmentation (partition), full replication, and partial replication (selective). The allocation of data can involve either replication or maintenance as a single copy, resulting in nonredundant or redundant fragment allocation. Non-redundant allocation serves as a methodology for designing distributed object databases, involving an analysis phase to determine the most suitable fragmentation technique, a horizontal class fragmentation algorithm, and a vertical class fragmentation algorithm. Baiao et al. present a three-phased methodology for the design of distributed databases comprising an analysis phase, a horizontal fragmentation algorithm phase, and a vertical class fragmentation phase. The method demonstrated in Abuelyaman experimentally indicates that relocating an attribute has an impact on allocation and fragmentation and demonstrates the interplay between the two.

Allocation and fragmentation are interdependent issues, and addressing them concurrently yields improved application performance. To the best of our knowledge, the application of BEA to simultaneous fragmentation and allocation has not been explored. Given that vertical partitioning places attributes that are commonly accessed together into a single fragment, it is crucial to define a precise measure of affinity. BEA utilizes attribute affinity to generate clusters of the most similar attributes. It commences with attribute usage (AU) and query access (QA) matrices to generate an attribute affinity matrix (AFF) and subsequently creates a clustered affinity matrix (CA) by arranging and rearranging attribute columns and rows. The proposed affinity measure in BEA is primarily based on the simultaneous access of attributes.

Following the generation of AFF using the described affinity measure, attribute clusters are formed using the split function. The split (AFF) function takes the AFF matrix as input, permutes its rows and columns, and produces a CA matrix. The permutation aims to maximize a global measure based on the number of columns already placed in CA and attempts to place the remaining columns in the CA to optimize the global affinity measure.

As the clustering result of BEA represents the split boundary between two sets of attributes, it may not be efficient for larger databases. Therefore, a more effective approach is needed to identify additional partitioning candidates. The similarity of two attributes can be inferred based on both their concurrent occurrence and concurrent absence in a query. The distance matrix (DM) plays a critical role in the performance of a distributed database and reflects costs that can be minimized through the method described in Bentley and Dittman. Multiplying DM in QA generates a new matrix that considers the influence of communication costs between sites and query access per site. Since DM represents minimized distance, the resulting matrix is the minimized query access (MQA) matrix.

The variable coef in the denominator reflects the effect of n01 and n10, leading to four different possibilities. Specifically, when n01 > 0 and n10 = 0, it indicates that for two attributes, all queries accessing one attribute do not access the other, suggesting a level of similarity. This results in a negative effect on the similarity, impacting the weighted measure in the denominator. The same logic applies when n10 > 0, reflecting a negative effect on similarity. Following the calculation of the AFF matrix, the algorithm calls the split function to create attribute clusters.

Distributed databases offer benefits such as reduced information retrieval and update costs, improved performance, and increased availability, but the design of distributed database management systems (DDBMS) is more intricate than that of centralized databases. Fragmentation and allocation significantly affect DDBS performance, and logically merging and concurrently addressing these processes may yield better results. This study proposes a method that integrates vertical fragmentation and allocation. To achieve this, the study applies the Bond Energy Algorithm with a modified affinity measure in a hierarchical process, simultaneously calculating the cost of data allocation for each site and assigning fragments to appropriate sites. The hierarchical process leads to the clustering of more similar attribute sets and improved data fragmentation. By concurrently computing the cost, the study accounts for the interdependency of data fragmentation and allocation.