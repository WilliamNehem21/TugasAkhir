We investigate and enhance the obf method, used in distributed algorithms for partitioned graph decomposition into its strongly connected components. Specifically, we introduce a recursive variation of obf and conduct experimental assessments on several different implementations with varying degrees of parallelism. Our evaluation involves synthetic graphs with a few large components, graphs with numerous small components, and graphs derived from real model checking applications. We compare the experimental results with other successful SCC decomposition techniques [6,5].

Previously, several distributed algorithms for SCC decomposition have been proposed, all capitalizing on the efficient computation of the set of vertices reachable from a specific vertex or set of vertices. The first distributed algorithm, known as fb, is based on the simple observation that the SCC to which a given vertex v belongs is the intersection of the set of vertices reachable from v and the set of vertices reachable from v in the transposed graph.

Our focus is on the obf technique, which essentially divides a rooted graph into independent sub-graphs, possibly eliminating some trivial SCCs in the process. No SCC crosses the boundary of an independent subgraph, allowing for the use of any algorithm to decompose the sub-graphs. The original paper utilized the fb algorithm for the sub-graphs, but we enhance the obf technique so that it can be applied recursively.

By having a number of independent sub-graphs, we can run SCC decomposition on them in parallel, thereby increasing the degree of parallelism. However, it is not clear whether the gain of decomposing all sub-graphs in parallel outweighs the overhead and complexity compared to decomposing the sub-graphs one by one.

The remainder of the paper is organized as follows. Necessary definitions from graph theory and existing distributed algorithms are presented in Section 2, while the new algorithm based on recursive application of obf is described in Section 3. Results of experiments are in Section 4, including a comparison with algorithms from [6,5,1], and an analysis of the effect of decomposing sub-graphs one by one or in parallel. Contributions of the paper are summarized, and future work is outlined in Section 5.

All algorithms below share an optimization routine that removes all initial trivial SCCs (called elim-atomic in, owcty in). It repeatedly removes vertices with indegree zero, as these must be trivial components. However, this procedure cannot detect trivial components that lie between strongly connected components. The paper also illustrates that obf performs better than fb in a number of experiments. Additionally, we observed that recursive obf suffers from the amount of synchronization points among individual procedures, and we aim to address this in future work.

Our experiments show that increasing parallelism reduces the total running time of the algorithm, despite the extra overhead and the fact that a single reachability computation is already parallel. Furthermore, we discover that the amount of synchronization points may be significantly reduced if independent procedures are started as soon as all data they depend on are ready. The three different versions of the algorithm are recapitulated in the following section.

Finally, our experiments indicate that recursive obf, when implemented with higher degrees of parallelism, reduces the algorithm's total running time despite any extra overhead. However, future work aims to improve recursive obf to work better on graphs with many unconnected islands. Thorough experiments should also be conducted to confirm the promising results of recursive obf.