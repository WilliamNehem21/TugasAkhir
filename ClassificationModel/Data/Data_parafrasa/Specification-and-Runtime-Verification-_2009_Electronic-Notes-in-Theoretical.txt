The Java Card programming language, which is a variant of Java, is specifically intended for use on highly restricted platforms such as smart cards, SIM cards, and security tokens. Many features and constructs present in standard Java, such as certain primitive types (e.g., integer or float) and most library classes, are not supported in Java Card. This is due to the severe limitations of the Java Card Virtual Machine (JCVM), which is a scaled-down version of the Java Virtual Machine (JVM).

The motivation behind our work is to enhance the safety of Java Card applets by incorporating a subset of the Java Modeling Language (JML) that is compatible with Java Card. While the full JML specification cannot be accommodated by the Java Card Virtual Machine, we aim to define a subset of JML that avoids unsupported features of the Java Card platform. This subset should ensure compliance of both data and control structures specified, as well as the verification code generated, with the restrictions of the Java Card Virtual Machine.

The paper is organized as follows: Section 2 discusses Design by Contract and JML, Section 3 introduces the Java Card platform and its limitations and advantages, Section 4 presents the impact of Java Card restrictions on the selection of a JML subset compatible with the Java Card Virtual Machine (JCVM), termed JCML, Section 5 outlines the implementation of the JCML compiler and its translation rules from JCML assertions to Java Card code, Section 6 presents experimental results comparing code size produced by the JCML compiler and the JML compiler, and finally, Sections 7 and 8 discuss related work and future steps to further enhance JCML and its compiler.

Design by Contract is a software development approach based on defining contracts between software units and verifying these contracts at runtime. It involves the use of logical assertions (preconditions, postconditions, and class invariants) to specify these contracts in the source code of a program.

Java Card is a platform designed for use in resource-constrained devices, such as smart cards, with very limited memory. Java Card applications, referred to as applets, need to undergo a series of steps before being installed on a card. The Java Card Virtual Machine enforces compliance checks through an off-card component called the converter, ensuring that applets adhere to platform restrictions and safety measures.

JML, initially designed for standard Java, caters to all Java constructs for generating verification code. To apply JML for specifying and verifying Java Card applications, it becomes necessary to consider only those constructs compatible with the device. Hence, our proposal introduces JCML, a subset of JML tailored to meet the restrictions of the Java Card language, while carefully balancing expressiveness and feasibility.

JCML inherits various JML constructs, primarily preserving the specification aspect of the language. However, several features from standard JML have been pruned to align with the constraints of Java Card, including certain commands, commands related to time and memory consumption, among others.

Our implementation introduces the JCML compiler, which generates Java Card-compliant code from JCML specifications, utilizing static analysis to optimize processing time and memory consumption. We also explore inlining optimization and discuss how it impacts processing time and code size.

Several related works focused on the formal specification and verification of object-oriented languages for resource-constrained devices are briefly reviewed, including the use of Proof Assistants and static verification tools such as Krakatoa and Key. Additionally, efforts towards runtime verification of Java (and Java ME) using AspectJ are discussed.

The paper also acknowledges the need for further research to address exceptional behavior and graceful recovery from faults in Java Card applications, as well as the extension of the class of specifications handled by the compiler to enhance its capabilities for generating verification code.