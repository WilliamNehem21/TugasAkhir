The concept of recursive data types serves as a valuable tool for modeling in software verification. While previous research has proposed decision procedures for both the full theory and its universal fragment, there have been limitations in the existing work. This paper presents a general algorithm for the universal fragment, expressed declaratively as a set of abstract rules that are terminating, sound, and complete. Furthermore, the paper demonstrates how other algorithms can be embedded as strategies within this general framework. Lastly, a new strategy is proposed, supported by experimental results that demonstrate its effective performance in practice.

Recursive data types are commonly utilized in programming and provide a convenient abstraction for common data types such as records and data structures like linked lists. As a result, the ability to effectively reason automatically about recursive data types holds significance for the analysis and verification of programs.

One well-known example of a simple recursive data type is the list type used in LISP, where lists are either null or constructed from other lists using the "cons" constructor. This constructor takes two arguments and returns the result of adding its first argument to the list in its second argument. To access the elements of a list, a pair of selectors is provided: "car" returns the first element of a list, while "cdr" returns the rest of the list.

The paper's contributions extend beyond prior work in several ways. Firstly, the setting is more general, encompassing mutually recursive types and multiple constructors. Secondly, the presentation of the theory is based on an initial model rather than axiomatically, offering greater flexibility and ease of analysis. Additionally, the abstract rewrite rules given for the decision procedure in the paper make it more flexible and easier to analyze than if it were presented imperatively. Lastly, the abstract algorithm allows for the description of a new strategy with significantly enhanced practical efficiency.

Furthermore, an approach based on first-order reasoning with the superposition calculus is described, demonstrating the automatic inference of a decision procedure for a recursive data type from first-order axioms, despite the axiomatization being infinite. While these results are impressive theoretically, the practical efficiency of such a scheme is yet to be demonstrated, and its scope is limited to theories with a single constructor.

The paper also discusses the complexity of determining the satisfiability of an arbitrary set of literals, highlighting that the problem is NP-complete and NP-hard. An alternative strategy, termed the lazy splitting strategy, is proposed as an improvement over the existing greedy splitting strategy, offering potential reductions in the size of resulting derivations.

In summary, this paper presents a general algorithm for the universal fragment of recursive data types, offers insights into decision procedures and strategies, and proposes practical improvements for the satisfiability problem associated with recursive data types.