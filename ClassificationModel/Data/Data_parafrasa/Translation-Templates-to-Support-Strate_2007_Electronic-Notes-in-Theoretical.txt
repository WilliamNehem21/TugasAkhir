The process of developing strategies for proving certain classes of properties in a theorem prover naturally consists of at least two phases. The initial phase involves formulating problem specifications for the theorem prover, detailing the settings and assertions to be proven.

During the formulation phase, a conflict arises between the convenience for the formulator and the convenience for the theorem prover. The specification formulation most natural to a user may not be the ideal formulation for reasoning about properties of the specification in a theorem prover. To address this tension, an intermediate layer is proposed between the specifier and the prover, which translates user-expressed specifications into a form more suitable for the prover.

This paper focuses on integrating the theorem prover PVS into the TIOA (Timed Input/Output Automata) system development framework. Several features of PVS make it a suitable choice for theorem proving support in TIOA, including its higher-order nature allowing for the representation of automaton state using function-valued variables and its support for automated assertion labeling and proof comments. The paper describes how the translation scheme central to the integration of PVS into TIOA produces PVS specifications structured by templates, thereby facilitating the creation of PVS strategies for proving invariant and simulation properties of TIOA specifications.

The paper is organized as follows: Section 2 discusses the relationship of this work to other related work, while Section 3 provides background on the TIOA toolkit and the PVS interface tame used for the integration. Section 4 describes the TIOA framework and its specification language, while Section 5 presents a set of templates designed for use in the tame representations of TIOA specifications and explains how they support the development of PVS strategies. Section 6 discusses how the TIOA-to-PVS translator in the toolkit has evolved.

In previous work, various tools have been developed for translating specifications in the IOA (Input/Output Automata) language, the predecessor of TIOA, into the languages of different theorem provers, including Larch Prover, Isabelle, and PVS. This paper presents the first TIOA-to-PVS translator designed specifically to support strategy development.

Mechanized proof steps corresponding to reasoning steps typical in high-level hand proofs of automaton properties, such as invariant and simulation properties, are implemented as PVS strategies. Through the automatic translation of specifications to PVS specifications and the implementation of additional setting-specific proof steps as PVS strategies, the system has been adapted to provide theorem proving support in various settings for the specification, analysis, and refinement of distributed and concurrent systems.

TIOA specifications model a system as an automaton with a set of states, actions causing state transitions, and trajectories. The TIOA specification language extends the IOA language by adding constructs for defining trajectories, describing how a system state can evolve as a result of time passage. Complex systems can be modeled as compositions of automata, and timed I/O automata can be composed by joining output actions to input actions.

A TIOA specification consists of the definition of one or more automaton models, together with the definition of properties of interest of these automata and, if needed, a vocabulary. When PVS is used to prove properties of interest for automata specified in TIOA, the vocabulary takes its semantics from some appropriate PVS theory.

The paper also discusses specific translation issues and solutions related to the TIOA-to-PVS translator, including the handling of start state conditions, trajectory representations, and other features of the TIOA language. These include addressing the challenges of reasoning about specific components of trajectory definitions and handling the translation of preconditions and transitions separately.

Overall, the paper outlines a method for providing efficient theorem proving support in an interactive, higher-order logic prover for establishing properties of automaton models without requiring the user to change the form of the specification for the convenience of the prover. This approach involves translating specifications written in a language designed for specifying automata (TIOA) into the language of a theorem prover (PVS) while adhering to specific templates governing how various aspects of the automaton model are represented in the theorem prover. The use of structural and naming conventions captured in these templates can be advantageous in developing efficient domain-specific proof steps for interactive reasoning about automaton models.