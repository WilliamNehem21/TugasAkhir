The fusion of two 3D images remains a challenging issue in medical imaging, particularly when precise matching of small critical areas such as brain regions like caudate nuclei and putamen is required. These areas of interest for pathologists are often contained within small boxes, sometimes no larger than 10 pixels in each direction. Due to technological limitations, it is not feasible to zoom in for better views, necessitating a detailed mathematical study to aid the surgeon.

The 2D scenario provides valuable insights into the underlying intersection problem and demonstrates the benefits of lattice periodicity, which can be easily illustrated using continued fractions. However, these lattice properties do not easily extend to higher dimensions. Nonetheless, the 2D case offers valuable indications for introducing higher dimension notions, such as plane sections of voxel spaces studied in parts 5 and 6, as well as formulas providing plane sections of cubes in part 8 and quadratic cubes in part 13.

Simple digital coordinate change formulas provide sufficient accuracy when the Euclidean norm of (a, b) divided by m is not too small (i.e., greater than 10), but are not precise enough when (a, b) divided by m is small, indicating similar grid sizes. In such cases, computing the intersection areas of small and large pixels and incorporating them into interpolating formulas is necessary.

General computational geometry algorithms that utilize sophisticated data structures to describe convex polyhedra are not well-suited for the present situation due to two principal reasons: they avoid degenerate cases and implementing them in exact arithmetic or computer algebra systems is still a challenge. Furthermore, current implementations with floating point systems destroy lattice properties, prohibiting their study.

This paper not only addresses the geometry of the voxel intersection algorithm, but also delves into the challenges in its coding. The efficiency of the code, particularly in minimizing control tests in the main loop, is a primary concern, as is maintaining a convenient number system: quadratic algebraic ones.

The paper also highlights how these formulas give specific cases of cubes plane sections when parameters tend toward special values. For instance, vertices of a parallelogram parallel to an edge will converge to it if the section plane tends toward this edge. Cube symmetries are also relied upon to obtain plane sections for any normal vector (a, b, c) using elementary group theory.

Various methods for extracting plane sections from a 3D image are explored, including cutting all voxels with a given plane and mapping these tiles to overlapping pixels. A precise treatment of this correspondence involves determining all intersections of tiles and pixels, which can be done using an algorithm for the intersection of two convex polygons.

The main focus of the paper is on the intersection of two sets of voxels, each tiling R^3 space, and the identification of identical cubes as tiles of each partition. An approach for identifying cube sections is presented by leveraging the structure of cubes, particularly their symmetries, and demonstrating that their plane sections can be described by exact formulas, even for degenerate cases, thus avoiding complex coding often encountered in such scenarios.

Additionally, the paper highlights the relevance of the intersection of two digital views of the same object with neighboring resolutions, demonstrating the need to compute intersections of overlapping voxels. A formal approach to this issue, leveraging the particular structure of cubes and their symmetries, reveals that their plane sections can be described by exact formulas, which are valuable for degenerate cases and help simplify the complex coding typically associated with such situations.