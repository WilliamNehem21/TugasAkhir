In the context of Dolev-Yao style analysis of security protocols, we examine the ability of an intruder to dynamically choose and assign names to agents. This capability has been overlooked in all major protocol verification frameworks based on formal methods. We identify and classify new type-flaw attacks that arise from this capability.

In this paper, we introduce and discuss new abilities of intruders related to the dynamic selection of names for compromised agents, and potentially for honest agents as well. Unlike well-known type-flaw attacks, such as the one demonstrated on the Needham-Schroeder protocol, which are based on the assumption that agent names are static, we allow the adversary to choose dynamically created terms as the name of an agent. Typically, dynamic agent naming is not considered by protocol verification frameworks and tools.

We present a name type-flaw attack on a published protocol for which no attacks were previously known. In this attack, the intruder takes advantage of a type flaw to learn a shared key using a dynamically created name. This type-flaw attack would not be possible with a static name.

We differentiate between two types of chosen-name attacks. In a selected-name attack, the intruder can select arbitrary names for compromised agents only, while in an assigned-name attack, the intruder may also assign arbitrary names to uncompromised, i.e., honest agents. Apart from the fact that assigned-name attacks are much more specialized than selected-name attacks, the two classes also have distinct targets. In selected-name attacks, malicious agents choose their name to attack other agents, so the veracity of security properties for these agents may be ignored, while in assigned-name attacks, the victim may very well be the agent that is being assigned a name. It's important to note that while the attacker may assign a name to an honest agent in order to attack another victim, in general, these attacks can also be executed as selected-name attacks.

Previously, such attacks have not been occurring as separate instances, but rather as instances of other classes, such as impersonation attacks, man-in-the-middle attacks, or relay attacks. The chosen-name type-flaw attacks, however, are new and have not received attention before. In the rest of this section, we will therefore limit ourselves to chosen-name type-flaw attacks. We will discuss existing chosen-name attacks in section 3.

This attack can be modified to impersonate B to N_B and invalidate both secrecy claims of N_B as follows. When N_B sends out the first message of the protocol, the adversary can block the communication between the agents (N_B, E) and B and inject the message {NB', (N_B, E)}_pk(B) into their conversation to learn NN_B. Then, the adversary can pick a nonce N_E to construct the message {N_E, NN_B, B}_pk((N_B, E)). The adversary now knows both nonces and has furthermore impersonated B to N_B. The security claims of B are not invalidated, though, since B does not finish the protocol.

Since the introduction of type flaws in security protocol analysis, various approaches have been used to detect and prevent type flaws. A tagging scheme is presented that prevents simple type flaws. Simple type flaws occur when one variable is unified with a complex term or a variable of another type.

More complex type-flaw attacks are described in. These attacks emerge when tags are confused with terms or when parts of a term are confused with another term. The detection of complex type flaws is formalized in [23, 24, 18, 19]. Research in this area focuses on the transitions from abstract message specification into concrete bit strings and vice versa.

Most formal models underlying tools for verification of security protocols can be extended to express chosen-name attacks. However, it will not necessarily be easy to extend the tools themselves, especially those that search through the state space of a given finite scenario and have to choose appropriate agent names from an infinite domain.