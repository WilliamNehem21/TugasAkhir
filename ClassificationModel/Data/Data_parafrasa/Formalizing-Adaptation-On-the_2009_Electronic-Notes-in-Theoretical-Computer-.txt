The paradigm models specify how collaborating components are coordinated through constraint control. The component mcpal allows for the later addition of new constraints and control to accommodate unforeseen adaptation. Once the new constraints and control are added, mcpal begins coordinating the migration accordingly, adapting the system towards the to-be collaboration. After the migration is complete, mcpal removes the obsolete control and constraints. The coordination continues while migrating on-the-fly, without any interruption. 

Dynamic consistency becomes even more problematic when collaboration needs to change, particularly during migration. To address this, the concept of quiescence is introduced for adaptive systems. This involves isolating a system part from its environment, making the necessary changes, and then reconnecting the part in its renewed form, thus circumventing dynamic consistency problems during ongoing collaborations.

The translation of the adapting system, including the mcpal component, into process algebra allows for formal analysis of the adaptation process. The process algebra model makes the adaptation dynamics explicit, enabling the verification of progress properties for every migration trajectory.

The phase, as the current state of a role, imposes dynamic constraints on the detailed state transition diagram (STD) underlying the role. The detailed transition can only occur if permitted by the current phase of the various roles assigned. A connecting trap of a phase serves as a guard for a phase transfer and further constrains coordination steps.

The coordination of migration is conducted by mcpal using the rules defined. The mcpal component starts coordinating the migration of the scheduler and the workers, ensuring that the migration progresses smoothly according to the defined rules.

By expressing mcpal and other example components as process algebra processes, and using formal proofs, it is verified that the system migrates from the existing behavior to the to-be behavior. This specification can also be used as input for further analysis using the mcrl2 model checker.

By formalizing the separate components and the systems they compose, it becomes possible to relate the models and analyze the migration trajectory formally.

There is ongoing research on dynamic system adaptation, with a focus on formal analysis of the migration trajectory, particularly in the context of component-based software engineering. Process languages and mobile calculi are used to express run-time adaptor modification, but tool support for formal analysis of run-time adaptation has not been fully addressed. Components, unlike adaptors, cannot change unless replaced, as they are from on-the-shelf.