Currently, the Unified Modeling Language (UML) is widely acknowledged as a standard for representing object-oriented software systems. UML is a visual language that offers various diagram types for depicting specific attributes of software artifacts. The syntax of these diagrams is determined through a metamodel, notably class diagrams. However, this approach is semi-formal because the class diagram is cyclically defined by the metamodel.

In addition, the semantics of UML diagrams are solely expressed in natural language. To enhance the graphical notation, the Object Constraint Language (OCL) is employed to formulate constraints in textual form that cannot be represented by the diagrams alone. OCL is also semi-formally defined. A formal syntax and semantics for UML class diagrams as well as OCL has been introduced and is included in the accepted OCL 2.0 OMG submission.

This paper presents an integrated formal semantics not only for class diagrams but also for other fundamental diagram types, such as use case, object, statechart, and interaction diagrams. The approach adheres to UML 1.5, although UML 2.0 covers the concepts examined in this paper with some changes in details and nomenclature. Our new integrated semantics is formalized using graph transformation concepts, a well-developed field. We are not aware of a formal approach that deals with this set of UML diagrams, particularly the formal integration of use cases, which is a novel aspect.

Our approach offers a framework for automatically translating a UML model into a graph transformation system. The UML model may comprise the mentioned diagram types and can include OCL expressions. The graph transformation system consists of a set of graph transformation rules and a "working graph" or system state graph, which represents the current state of the modeled system. The rules modify this state step by step, simulating the execution of the modeled system.

In contrast to most graph transformation work, we utilize an enhanced approach that allows for the inclusion of OCL expressions in rules. This approach combines the benefits of operational graph transformation and logic-based OCL, enabling the handling of complex issues using intuitive graphical representations and allowing for more compact graphs in most cases. OCL expressions are used as application conditions to decide whether a rule may or may not be applied, and also in attribute expressions in the right-hand side of graph transformation rules.

Our approach provides an integrated formal semantics for a significant portion of UML. Since no formal semantics are available for UML, our approach relies on a number of assumptions on how the diagrams could be used in practice and integrated effectively. This precise semantics serves as a solid foundation for further work, such as validating a system before implementation and handling future system extensions and changes more easily.

The paper details the covered UML features, presents the system state concept, demonstrates the translation of the model into a graph transformation system, outlines the architectural design of the prototype, and discusses further considerations for the approach. Additionally, it touches upon the ongoing implementation of a prototype system, which generates graph transformation rules for a given model and enables interactive execution and visualization of the modeled system.

In summary, this paper introduces an approach to provide formal semantics for a range of UML diagrams by translating a UML model into a graph transformation system. The approach offers potential for integrating additional diagram types and features, and its practicality will be further explored through case studies.