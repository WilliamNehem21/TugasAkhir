Termination proofs in term rewriting involve resolving constraints between terms derived from the rules of the term rewriting system. An approach commonly used in termination tools is to treat these constraints as polynomial constraints. Recent studies have established connections between these problems and standard constraint solving problems, enabling the application of well-known and efficient techniques, notably SAT techniques. The key idea is to encode polynomial constraints as propositional constraints, which can be efficiently managed using state-of-the-art SAT solvers. We have developed an algorithm for solving constraints in small domains of coefficients, specifically tailored for termination tools. This algorithm leverages a specialized representation of domain elements and corresponding polynomials, allowing for efficient arithmetic and constraint propagation techniques.

Dependency pairs form a new TRS, DP(), which, together with dependency chains, determines termination. The absence of infinite dependency chains characterizes termination. The dependency pairs can be represented as a dependency graph (DG), where the absence of infinite chains can be analyzed by considering the cycles in the graph.

For example, consider the TRS in Example 1.1 and the cycle c= 6 (see Example 1.2). To prove termination, we need to find a reduction pair (,>) that satisfies specific constraints, with the variables to be solved being the coefficients of the parametric polynomials as described in Example 1.4. This set of constraints guarantees soundness regarding DG-based termination proofs, provided that the variables take non-negative values.

In practice, termination tools typically restrict the usable coefficients to small domains, such as {0, 1}, {0, 1, 2}, or {0, 1, 1, 2}. We have proposed an efficient algorithm for solving polynomial constraints over small domains of powers of 2, covering the widely used domains of coefficients.

When addressing polynomial constraints over n1, the arithmetic on n1 becomes akin to boolean operations, with 0 interpreted as false and 1 as true. Building on this, we have developed a simple encoding of polynomial constraints as propositional formulas.

Our efficient encoding of polynomial constraints over n1= 0, 1 as propositional formulas is nearly four times faster than a recent SAT-based algorithm by Fuhs et al. when applied to solve polynomial constraints over n1. Furthermore, we have generalized the algorithm to handle arbitrary non-negative numbers and explored different constraint-solving algorithms for the efficient generation of polynomial interpretations in termination provers.

Comparative benchmarks suggest that our algorithm performs well in comparison to similar polynomial constraint solvers, such as the one reported in [reference]. However, there is still room for improvement, particularly in leveraging heuristics from the constraint satisfaction problem (CSP) area. Furthermore, the SAT encodings presented do not consider more sophisticated SAT frameworks, like SMT (SAT modulo theories), which could offer a natural choice for polynomial constraints. Additionally, an open problem is how to encode polynomial constraints over more general domains, such as rational or real algebraic numbers, using SAT/SMT techniques.

These areas represent interesting directions for future research.