In model-based testing, it is essential to utilize a formal model for specifying system requirements and for generating test cases based on a given test criterion. Finite state machines (FSMs) and extended finite state machines (EFSMs) are two types of models that can be used to specify the system under test. FSMs consist of a finite set of states and transitions, with each transition comprising entering and exiting states, input, and output. FSMs can only model the control aspect of the system. On the other hand, EFSMs extend FSMs by incorporating variables. Transitions in EFSMs can include predicates (guard conditions) and operations (assignments), allowing EFSMs to specify both the control and data aspects of the system. As the aim of this paper is to generate test data for test cases derived from the formal model, EFSMs are chosen to model the system under test.

Test data that satisfy constraints can be obtained through search-based methods, which are akin to constraint-based methods in requiring the initial derivation of path constraints. However, the distinguishing feature of search-based testing lies in transforming test data generation into function optimization. The individual with the best fitness (where fitness is 0) obtained through a search algorithm serves as the test data. This function optimization can be addressed using metaheuristic techniques such as genetic algorithms, ant colony optimization, and particle swarm optimization.

Symbolic execution is a static program analysis method that employs symbolic values, rather than real values, to execute a program, yielding expressions over symbols to facilitate understanding of the relationship between inputs and outputs.

Genetic algorithms (GAs) are randomized methods rooted in biological evolution principles. They possess parallel and global optimization search capabilities, enabling automatic acquisition and guidance of the optimized search space, as well as adaptive adjustment of the search direction. These properties have found widespread applications in combinatorial optimization, machine learning, and, more recently, in software testing, particularly in the context of search-based software testing.

Search-based software testing translates the problem of software testing into an optimization problem. To generate test data for EFSM paths, a process is initiated by computing the symbolic expression for each path through data flow dependence analysis and subsequently employing genetic algorithms to search for the optimal solution for the symbolic expression, which is viewed as a function to be solved. The test data are represented by individuals, and are first encoded using the encoding mechanism provided by the genetic algorithm.

In the proposed method, guard conditions on transitions within a path are not represented as nested if statements, but rather in a parallelism form. Additionally, guard conditions linked by the "and" operator are also represented in parallelism form, rather than nested if form. Guard conditions connected by the "or" operator are divided into separate transitions, and the minimum fitness among these transitions determines the fitness of the guard condition.

The path constraint is represented using parallelism if statements, consolidated from the guard conditions on each transition connected by "and" operators. According to the proposed method, these guard conditions are represented as parallelism if statements, while the conditions within each guard condition connected by "and" operators are also represented in parallelism form. Guard conditions connected by "or" operators are separated into individual transitions, and the fitness of the guard condition is based on the minimum fitness among these transitions.