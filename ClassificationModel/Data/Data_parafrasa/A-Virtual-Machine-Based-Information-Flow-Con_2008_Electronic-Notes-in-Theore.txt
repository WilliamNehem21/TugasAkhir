The agents store sensitive data, and it is crucial for the security of the system that the integrity and confidentiality of this data are maintained. It is important that external nodes executing the agent code and handling agent data do not misuse it in a way that violates the usage policy.

Explicit flows, such as those resulting from codes like y = x, occur due to the direct transfer of a value from x to y. In contrast, in the scenario described in Listing 1, even though there is no direct transfer of value from x to y, the execution of the code results in y obtaining the value of x. This type of implicit flow poses a challenge, as demonstrated in Listing 2, where the outcome of the code execution leaks information based on unexecuted branches.

Compile-time systems are limited in their ability to enforce certain policies because they are bound to the code in a static manner and cannot handle policies tied to data or those dependent on dynamic runtime properties. On the other hand, pure runtime systems have difficulty handling implicit flow leaks, as they cannot analyze flows associated with unexecuted branches. To address these limitations, Trishul utilizes a hybrid approach involving static analysis of Java bytecode at class load time and dynamic tracing of taints at runtime.

Runtime information flow control systems can be implemented at different levels within a computer architecture, such as at the application level or within the operating system. However, implementing it within the operating system may face challenges in translating application-level usage policies into operating system system calls. Tracing information flow at runtime involves dynamically monitoring access to stacks, registers, the program counter, and memory.

In the architecture of Trishul, a pluggable policy engine module is used to specify the interception of calls from the application to Java library methods, as well as to designate protected output channels and their associated method calls. Each Java application runs within a separate virtual machine, and the runtime data area includes a method area, heap, Java stacks, native method stacks, and a program counter register.

Dataflow analysis is used to determine conditional control flow influences on the execution of a basic block. Trishul introduces a taint propagation mechanism that incurs some performance overhead, which can be attributed to factors such as the analysis of control flow graphs and the calculation and maintenance of taint properties of objects. Performance optimization techniques are being explored to mitigate this overhead.

Trishul does not use a specific built-in security policy model but employs a modular policy engine architecture to support various policy expression languages and semantics. Native methods invoked by Java applications through JNI are assumed to be accessed only from trusted native method libraries to prevent untracked information flow within these methods.

Trishul's architecture and approach have been compared with other existing systems, highlighting differences in how they handle information flow tracing, taint representation, and instrumentation of bytecode. Trishul is designed to trace information flows at the granularity of Java member fields, providing a flexible architecture for enforcing data-oriented policy frameworks. Performance measurements have shown that Trishul incurs limited overhead, and ongoing efforts include optimization to further reduce this overhead.

In this paper, the design and implementation of Trishul, a JVM-based information flow tracing system, have been described, emphasizing the hybrid approach employed for static and dynamic analysis of Java bytecode. Future work includes the implementation of the pluggable policy engine module and a language for developing policy engines.