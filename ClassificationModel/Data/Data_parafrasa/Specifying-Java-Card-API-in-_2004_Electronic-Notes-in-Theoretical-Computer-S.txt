The academic paper discusses the creation of an OCL (Object Constraint Language) specification for the Java Card API. The primary aim of the specification is to facilitate the verification of Java Card programs within the key system, which seeks to integrate object-oriented design and formal methods. The existing JML (Java Modeling Language) specification served as the starting point for developing the OCL specification. The paper outlines the encountered challenges in writing the specification in OCL, presents notable sections of the specification, reports successful verification attempts, and evaluates OCL in comparison to JML within the context of Java Card program specification and verification.

The paper presents the development of an OCL specification for the Java Card API, which is a subset of the Java programming language used for programming smart cards. The Java Card API consists of a set of library classes tailored for Java Card programs. The OCL specification is essential for formally verifying such programs, especially when the API class implementation is unavailable. Additionally, the specification serves to document the behavior of the Java Card API in a formal manner. The paper discusses the encountered challenges, interesting aspects of the specification, successful verification attempts, and the evaluation of OCL in comparison to JML within this framework. The results are summarized in the paper.

One of the main goals of the key system is to enable the formal verification of Java Card applications. The formal specification of the Java Card API is crucial for verifying programs utilizing the API, especially when the API implementation is not accessible. The paper illustrates the use of the Java Card API specification in the verification process through an example. The switch from JML to OCL as the specification language was necessitated by the industry-standard OCL adoption in the key project, aiming for a more comprehensive coverage of the Java Card API in the OCL specification.

Handling comparisons of objects, such as method arguments, to the null value becomes more challenging. The paper discusses difficulties in specifying null values for non-array or collection object types. Additionally, it addresses the interpretation of overflow behavior in OCL and how the Key System assists in tackling this issue by enabling users to choose the interpretation of integer types during translation to Java dynamic logic formula.

The paper discusses the challenges in expressing attribute modification behavior in the OCL specification, especially in cases where a class has many attributes. It mentions ongoing work aimed at addressing this issue. Furthermore, the paper describes the resulting OCL specification for all classes and interfaces of the Java Card API 2.2, highlighting cases where the OCL specification offers more coverage than the JML specification.

The paper also presents specific examples of enriching the OCL specification compared to the JML specification, such as the specification of the method setkey in class deskey. It highlights the key contributions made to the OCL specification, emphasizing instances where it provides enhanced coverage compared to JML.

The paper reports successful verification attempts using the OCL specification, including the verification of simple methods in the exception classes and more complex proof attempts. Despite the challenges encountered with OCL, the paper concludes that the OCL specification for the Java Card API has been defined to a reasonable extent, and outlines plans for future work in formal verification.

Overall, the paper discusses the development of an OCL specification for the Java Card API, including the encountered challenges, enriched OCL specification compared to JML, and successful verification attempts. It also outlines the future direction of the work and the availability of the OCL specification online.