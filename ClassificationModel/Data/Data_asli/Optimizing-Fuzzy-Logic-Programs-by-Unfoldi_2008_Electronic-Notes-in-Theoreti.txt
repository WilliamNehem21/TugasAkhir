multi-adjoint logic programming represents a very recent, extremely flexible attempt for introducing fuzzy logic into logic programming. inspired by our previous experiences in the field of(declarative) program transformation, in this paper we propose the development of a fold/unfold based transformation system for optimizing such kind of fuzzy logic programs. the starting point is a set of unfolding-based transformations together with a reversible kind of fuzzy folding, that we have designed in the past. the present work



the structure of the paper is as follows. in section 2, we summarize the main features of the procedural semantics of the programming language we use in this work. in section 3 we recall from our preliminary set of fuzzy transformation rules, which is further refined and extended in section 4. finally, in section 5 we give our conclusions and propose future work.



the condition which says that the folded rule y is a non-eureka rule whereas y' is a eureka rule is useful to avoid the risk of self-folding, that is, the possibility of folding a rule w.r.t. itself, hence producing a wrong rule with the same head and body which may introduce infinite loops on derivations and destroy the correctness properties of the transformation system.



the application of an aggregation step is not only crucial, but also mandatory, before applying a folding step, in particular when the intended rule has been unfolded several times, thus implying that the number of noisy elements in its body has considerably grown. moreover, as we are going to see in the following example, even when the folding step is intended to be applied to an original rule, say y, which has never been unfolded, it must be preceded by the appropriate aggregation step(in this case, similarly to definition 3.3, the objective of the folding operation is not to obtain a recursive definition of a eureka predicate, but simply to link such eureka predicate to the body of rule y).



