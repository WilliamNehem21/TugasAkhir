the object constraint language(ocl) is the established language for the specification of properties of objects and object structures in uml models. one reason that it is not yet widely adopted in industry is the lack of proper and integrated tool support for ocl. therefore, we present a prototype tool, which analyzes the syntax and semantics of ocl constraints together with a uml model and translates them into the language of the theorem prover pvs. this defines a formal semantics for both uml and ocl, and enables the formal verification of systems modeled in uml. we handle the problematic fact that ocl is based on a three-valued logic, whereas pvs is only based on a two valued one.



we focus on deductive verification in higher order logic. this allows the verification of possibly infinite state systems. we present a translation of the notations of uml(class diagrams, state machines, and ocl constraints) into the input language of pvs. then the specification, originally given in ocl, can be verified using pvs.



we have chosen this example, because it is short, but still challenging to verify. it involves object creation and asynchronous communication, and therefore does not have a finite state space. furthermore, the behavior of the model depends on the data sent between objects and note also that the property we want to prove on the model is a number-theoretic property, namely, that the numbers generated are primes. this makes it impossible to show the considered property using automatic techniques like model checking.



the complexity of the transition relation generated by our compiler proved to be challenging. it appears that this complexity is inherent to the uml semantics. the most difficult part is reasoning about messages in queues. the concepts of messages preceding one another, crucial for the sieve, are difficult to work with for purely technical reasons. the proof of the sieve depends on the facts that no signals are ever discarded and that signals are taken from the queue in a first-in-first-out order. these two properties have to be specified in pvs as invariants and proved separately. 11 note, that, if one of the two properties does not hold, then the sieve would not satisfy its specification.



