in, we proposed a symbolic structural operational semantics and a symbolic bisimulation for the spi calculus. in this paper, we define decompositions[8,15] of symbolic environments and update symbolic bisimulation to account for this, yielding both soundness and completeness with respect to concrete bisimilarities. compared to work on symbolic(bisimulation) semantics[14,17] for the applied pi calculus, we give a complete proof method in a setting where the operational semantics are finitely branching.



the only purpose of the set sa is to ensure that a(h) is well-founded. if we replaced sa(h) by s(a(h)) in ana the definition would no longer be inductive, since we would a priori need to argue about the presence of certain expression pairs in a(h) before applying the rule. indeed, for all hedges h, sa(h)= s(a(h)).



a symbolic environment is a concise description of a set of hedges, differing only in the instantiations of variables. here, a variable instantiation is a pair of substitutions, that must respect the symbolic environment. the hedges that we get from instantiating variables in an environment-respecting way are called concretizations. the symbolic environments used in this paper are very similar to the ones in, with the only difference that we keep explicit track of fresh names. a symbolic environment consists of the following three elements.



from here on we only consider well-formed symbolic environments, the set of which is denoted se. by instantiating the input variables of the symbolic environment, we can get a concrete(non-timed) hedge. however, such an instantiation must be subject to several constraints, e.g., timing, guard satisfaction and freshness of invented names. for instance, an input performed at time t must be synthesizable from the knowledge of the environment at that time. similarly to the symbolic early input semantics, we define environment respectfulness for substitutions. naturally, with the bisimulation environments we need two(possibly different) substitutions, one for each process. we also create some fresh names b.



