aspects. that problem is defined on graphs using the geodesic convexity as an analogy of the euclidean convexity in the multidimensional space. we denote such a problem by geodesic classification(gc) problem. we propose an integer programming formulation for the gc problem along with a branch-and-cut algorithm to solve it. finally, we show computational experiments in order to evaluate the combinatorial optimization efficiency and classification accuracy of the proposed approach.



supervised learning denotes the automatic prediction of the behavior of unknown data based on a set of samples. it is a tool widely used in many everyday situations of the information society in which we live. in general terms, it can be described as the following two-phase procedure: in the initial phase, or training phase, the sample set is analyzed. each sample consists of an array of encoded attributes that characterize an object of a certain type together with a label that associates a class to the corresponding object. most commonly, only two classes are considered. a tacit assumption made at this phase is that there is an underlying pattern associated with the samples of each class that sets them apart from the samples of the other classes. thus, the purpose of the training phase is to determine a mapping from all possible objects into the set of possible classes as an extension of an underlying patterns of the samples. then, in the second phase, the mapping determined in the training phase is used to respond to queries for the class of objects that do not belong to the sample set.



the sample set may contain an arbitrary number of misclassified objects, called outliers, resulting from possible sampling errors or due to inherent characteristics of the phenomenon being modeled. from the mathematical point of view, an outlier is that object that causes the underlying pattern of the samples in its class to deviate from the convexity definition. the possible occurrence of outliers poses an additional challenge to any method used to solve the classification problem since they need to be detected and disregarded of accurate solutions.



in this section, we describe the method used to solve the problem and how it was implemented. we also present some results of computational experiments carried out with an intel i7-7700 processor with 3.6 ghz, 8 cores and 32 gb ram memory, running a 64 bits linux os. the algorithms were coded in c++, and cplex 12.8 was the optimization solver used. essentially, we embedded separation procedures in the default branch-and-cut method provided by cplex.



