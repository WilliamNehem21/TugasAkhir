in this paper, we discuss the issue of consistency of behavioral models in the uml and present techniques for specifying and analyzing consistency. using meta-model rules we transform elements of uml models into a semantic domain. then, consistency constraints can by speci ed and validated using the language and the tools of the semantic domain. this general methodology is exempli ed by the problem of protocol statechart inheritance.



it is the aim of the paper to outline an approach to the speci cation and veri cation of behavioral constraints for visual models. we proceed in four steps. after identifying(informally) the consistency problem at hand(sect. 2), we choose a semantic domain which supports the kind of consistency problem we are interested in and de ne a mapping of models into the semantic domain(sect. 3). then, we use the language and tools provided by the semantic domain to formulate the behavioral constraints and to verify them(introduced in rule(2)) by corresponding process de nitions. in general, all names set in italics represent\non-terminals" that have to be replaced. notice that we have used the machine-readable version of the csp notation where[] and|~| denote 2 and u, respectively.



below, the application of these rules to the statechart of class traditionalperson is shown.(the name of the class is abbreviated to tp.) notice that(*) beh(single)= directbeh(single)[]beh(top)= beh(top)= stop by rule(5,4,6) and the csp axiom p 2 stop= p. that means, the external behavior of the implicit top state(which is not visible in the concrete syntax and does not have outgoing transitions or super-states) is empty, and the same holds for state simple which does not have outgoing transitions either. therefore, the semantics of state single is de ned by rule(3) to be that of the default state notengaged. as notengaged is a simplestate, rules(2) and(5) are applied. after dropping the super-state component using(*), we just collect the outgoing transitions using rules(6) and(7). the semantics of engaged and married is computed in a similar way.



rule-based mappings, like the one in section 3, are also used in[12,1] where timed petri nets are proposed as a semantic framework for the uml. notice, however, that it is not our aim to provide a denotational semantics for the uml(or even a reasonable sublanguage of it). on the contrary, the mapping is de ned locally for the language features of interest, even if the semantics of other model elements is not yet clari ed.



in order to be able to modify the notion of consistency(when the development process evolves or a new pro le is created), it is important that this mapping is exible and extensible. we think that the rule-based notation, which was already used in for describing java code generation and is originally motivated by pair grammars, provides a good starting point. however, it has to be supported by a tool which is able to generate a translator from such a rule-based description. currently, we are investigating the use of xsl transformations for this purpose.



