proofs about system specifications are difficult to conduct, particularly for large specifications. using abstraction and refinement, we propose a proof technique that simplifies these proofs. we apply the technique to circus(a combination of z and csp) specifications of different complexities. interestingly, all the proofs are conducted in z, even those concerning reactive behaviour.



now, if we can prove that protnat is a refinement of aprotnat, then we can conclude that protnat is also deadlock-free and divergence-free. moreover, the main action of protnat must also preserve the state invariants, otherwise aprotnat would not be divergence-free. we state and prove that protnat is a refinement of aprotnat in theorem 3.2, which will make use of the following three laws 5.



loadfeedbelt: this action is enabled only when there is no plate on the belt. the arrival of a new plate to the belt is indicated by the synchronisation event on the channel start. the effect of the action is to change the status of the feed belt accordingly.



refinement and it does not explicitly appeal to the formal semantics of the specification language concerned. instead, the details of the semantic model are hidden away through the use of refinement laws. we are then left with the side conditions for these laws, which need to be discharged. these side conditions are in the form of z or, indeed, first order logic. thus, in effect, the logical framework of the proofs is independent of the semantic model of the specification language. this allows for elegant proofs that are more readable, and hence understandable; try, for example, to do prove the same



