that enjoys subject reduction, type uniqueness, and decidability of typing. then we apply a classical type-erasing function to rhof, to obtain an untyped rho-calculus`a la curry(urhof). the related type inference system is isomorphic to rhof and enjoys subject reduction. both rhof and urhof systems can be considered as minimal calculi for polymorphic rewriting-based programming languages. we discuss the possibility of a logic existing underneath the type systems via a



is associated with an action; once an instance of a pattern is recognized, the corresponding term is rewritten to a new one. another advantage of rewritingbased languages(in contrast with ml or haskell) is the ability to handle nondeterminism by means of a collection of results: pattern-matching needs not to be exclusive, i.e. multiple branches can be taken simultaneously. an empty collection of results represents a matching failure, a singleton represents a



one of the most commonly used models of computation, the lambdacalculus, uses only trivial pattern-matching. this calculus has recently been extended, initially for programming concerns, either by introducing patterns in lambda-calculi[31,42], or by introducing matching and rewrite rules in functional languages. more concerned with extending logics, stehr has studied a calculus of constructions enhanced with rewriting logic.



in a uniform way. its abstraction mechanism is based on the rewrite rule formation: in a term of the form p d a, one abstracts over the pattern p. note that the rewriting-calculus is a generalization of the lambda-calculus, since we get the lambda-calculus back if every pattern p is a variable.



