cannot be applied directly, since the semantics for non-determinism of rewriting logic is run-time choice, instead of the call-time choice criterion adopted in flp. in a previous work we started what is, up to our knowledge, the first general framework for the verification of program properties for flp with non-deterministic functions. our work was based on crwl 1[7,8], a well-established semantic framework for flp. the idea was to map crwl into first order logic(fol) in the following sense: the crwl-semantics of a program p, given by a reduction relation



{0, s(s(0))}. hence double(coin) is finite and totally defined. denotations, even total denotations, can be infinite. for instance, g(0))t={0, s(0), s(s(0)),...}. therefore g(0) is infinite, and it is easy to see that it is also totally defined. rather different is the case of g(s(0)), which is infinite since its denotation is g(s(0)))=



our improvement seems practical enough to continue in several ways. first, determining effective sufficient conditions ensuring determinism; in this sense, maybe the techniques in[14,3] could be useful. we are interested also in investigating weaker(but still applicable to our purposes) notions of determinism that will enlarge the deterministic part of the program in which proving properties will be more effective. finally, we also plan to develop a set of non-trivial case studies for a better evaluation of our methods. this was almost impossible prior to this work due to the complexity of proofs of previous approaches.



