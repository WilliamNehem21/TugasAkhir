the ots/cafeobj method is a formal method to model systems, specify models and verify that models satisfy properties. we propose a way to verify that a state machine s satisfies invariant properties based on a simulation from s to another state machine, which is more abstract than s, in the ots/cafeobj method. three communication protocols are used as examples to demonstrate the proposed method.



we have been developing the ots/cafeobj method[17,15,6], in which we mainly use induction on the structure of the reachable state spaces of state machines to verify that state machines satisfy invariant properties. the verification method is called the induction-based(invariant) verification method in this paper. in the ots/cafeobj method, observational transition systems, or otss are used as state machines, and cafeobj, an algebraic specification language and system, is used to specify otss and verify that otss satisfy properties. a number of cases studies have been conducted, among which are[14,16,11].



the rest of the paper is organized as follows. section 2 describes otss. section 3 introduces cafeobj. section 4 defines simulations from otss to otss. section 5 proposes the simulation-based invariant verification method. section 6 defines compositions of simulations from otss to otss. section 7 mentions some related work. section 8 concludes the paper.



such proofs are called proof scores. the keyword open makes a temporary module that imports a given module and the keyword close destroys such a temporary module. each fragment enclosed with open and close in proof scores is called a proof passage. the proof score consists of two proof passages. cafeobj returns true for each of the two proof passages, which means that



we make a comparison of the ots/cafeobj method with i/o automata, z, b, vdm and event-b on one more point: whether do events(or transitions or actions) have guards(outside which events cannot occur), preconditions(outside which events can occur but their outcomes are not defined) or both. actions have guards in i/o automata and events have preconditions in z, b and vdm, while event-b has both gourds and preconditions. effective conditions that transitions have in the ots/cafeobj method are more similar to guards than preconditions, but are not exactly the same as guards. in the ots/cafeobj method, transitions can be applied in any state even if their effective conditions do not hold in the state. if transitions are applies in a state where their effective conditions do not hold, however, nothing changes.



