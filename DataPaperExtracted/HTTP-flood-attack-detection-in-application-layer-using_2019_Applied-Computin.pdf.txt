Original Article
HTTP ﬂood attack detection in application layer using machine learningmetrics and bio inspired bat algorithm
Indraneel Sreeram⇑, Venkata Praveen Kumar Vuppala
Department of CSE, St. Ann’s College of Engineering & Technology, Chirala, India
article info
Article history:Received 13 May 2017Revised 9 October 2017Accepted 14 October 2017Available online 18 October 2017Keywords:Denial of Service (DoS) attacksDistributed DoS (DDoS) attacksApplication Layer DDoS (APP-DDoS)Bio inspired approachesabstract
The internet network is mostly victimized to the Distributed Denial of Service (DDOS) attack, which is onethat intentionally occupies the computing resources and bandwidth in order to deny that services topotential users. The attack scenario is to ﬂood the packets immensely. If the attack source is single, thenthe attack is referred as denial of service (DOS) and if attack is sourced from divergent servers, then it isreferred as DDOS. Over a decade many of the researchers considered the detection and prevention ofDDOS attack as research objective and succeeded to deliver few signiﬁcant DDOS detection and preven-tion strategies. How fast and early detection of DDOS attack is done in streaming network transactions isstill a signiﬁcant research objective in present level of internet usage. Unfortunately the current bench-marking DDOS attack detection strategies are failing to justify the objective called ‘‘fast and early detec-tion of DDOS attack”. In order to this, in this paper we devised a Bio-Inspired Anomaly based applicationlayer DDoS attack (App-DDOS Attack) detection that is in the aim of achieving fast and early detection.The proposed model is a bio-inspired bat algorithm that used to achieve the fast and early detection ofthe App-DDOS by HTTP ﬂood. The experiments were carried out on bench marking CAIDA dataset andthe results delivered are boosting the signiﬁcance of the proposed model to achieve the objective ofthe paper./C2112017 The Authors. Production and hosting by Elsevier B.V. on behalf of King Saud University. This is anopen access article under the CC BY-NC-ND license ( http://creativecommons.org/licenses/by-nc-nd/4.0/ ).
1. IntroductionGlobal network of computers interconnected through differentmedia using a standard protocol is called internet. Modern humanbeings rely on the Internet for their education, trade, socializationand entertainment, among many other important aspects ofhuman life. Information sharing, E-commerce and entertainmenthave taken a new dimension. Evidently, the Internet is the biggestrevolution in the computing and communications world. Webthreats pose a broad range of risks, including ﬁnancial damages,identity theft, loss of conﬁdential information or data, theft of net-work resources, damaged brand/personal reputation, and erosionof consumer conﬁdence in e-commerce and online banking.DoS attack is an intentional attempt by malicious users to com-pletely disrupt or degrade the availability of services/resources tolegitimate users. Distributed denial of service (DDoS) attack is aform of DoS attack which slowdowns the server in responding tothe client/refuses the client request. Now-a-days, the impact ofDDoS attacks on internet security is growing excessively. Ingeneral, this type of attack is launched explicitly from a collectionof compromised systems known as botnet by an attacker. The maingoal of such attack is to exhaust server resources such as CPU,I/O bandwidth, sockets and memory etc. As the result, theresources available to other normal users/clients get limited orsometimes may not be available. The recent familiar victims ofDDOS attack are explored in[1,2]and strategies for successful attack mitigating are explored in[3].The DDoS attacks are classiﬁed based on [4,5]into different fac- tors. On the basis of network protocol stack, DDoS can be furtherclassiﬁed as Network/transport level and Application level DDOSattacks.Network/transport level DDoS attack:These attacks are launched at half opened connections by using TCP, UDP, ICMP and DNSprotocols.Application level DDoS attack:These attacks typically consume less bandwidth and are stealthier in nature in comparison
https://doi.org/10.1016/j.aci.2017.10.0032210-8327//C2112017 The Authors. Production and hosting by Elsevier B.V. on behalf of King Saud University.This is an open access article under the CC BY-NC-ND license ( http://creativecommons.org/licenses/by-nc-nd/4.0/ ).⇑Corresponding author.E-mail addresses:indraneels123@gmail.com,sreeram.indraneel@gmail.com (I. Sreeram).Peer review under responsibility of King Saud University.
Production and hosting by ElsevierApplied Computing and Informatics 15 (2019) 59–66
Contents lists available atScienceDirect
Applied Computing and Informatics
journal homepage: www.sciencedirect.com
to volumetric attacks. However, they will have an identical impactto service as they aim speciﬁc characteristics of well-known appli-cations like HTTP, DNS, VoIP or simple Mail Transfer Protocol(SMTP). These attacks are specialize in disrupting legitimate usersservices by exhausting the resources. An Application layer DDoSattack overloads an application server by creating excessive login,information search or search requests. Application DDoS attacksare tougher to detect than other forms of DDoS attacks. As the con-nections are already established, the requests could seem to befrom legitimate users. However, once identiﬁed, these attacks willbe stopped and back-traced to source more simply than the othervarieties of DDoS attacks.Application Layer DDoS attack is a DDoS attack that sends outrequests following the communication protocol, thus theserequests are indistinguishable from legitimate requests in the net-work layer .Consequently, traditional defense systems become lessor even not applicable for application layer DDoS attacks whichmake use of the asymmetric computation between client and ser-ver, as they are proper-looking requests from the protocol andtrafﬁc.Flooding attacks: Flooding attacks are launched in followingways[5,6,41,42]:In Reﬂection/Ampliﬁcation based ﬂooding attacks ,the attacker initiates small DNS queries with forged source IP addresses whichprovoke a large extent of network trafﬁc. And the DNS responsemessages are signiﬁcantly larger than DNS query messages. Asthe result, this large extent of network trafﬁc is directed towardsthe targeted system to incapacitate it.HTTP based ﬂooding attacks are classiﬁed into four types: In Session ﬂooding attack, the Session connection request rates initi-ated from the attackers are higher the requests generated fromlegitimate users. Thus the server resources are exhausted and leadto ﬂooding.In Request ﬂooding attack,the attacker send sessions that con-tains more number of requests than the normal users, which leadsto ﬂooding.In Asymmetric attack,the attacker sends sessions that containslarger amount of high workload requests. The ultimate aim ofthe attacker is to devour resources like CPU, memory of the serverand degrade it.In Slow request/response attack,the attacker sends HTTP requestin pieces slowly (one at a time) and the request is not complete ini-tially. As the result, the server keeps the indulged resources inwaiting stage until it receives the entire data. This attack is catego-rized into slowloris attack, HTTP fragmentation attack, slow postattack and slow reading attack.The major focus of an HTTP ﬂood DDoS attack is toward gener-ating attack trafﬁc that closely simulates legitimacy of a humanuser. Thereby it becomes harder for a victim to differentiatebetween legitimate and attack trafﬁc. Because of this type ofattacks, the server becomes unavailable to legitimate users. Themain impact of application layer DDoS attacks are :unusually slownetwork performance (opening ﬁles or accessing web sites),unavailability of a particular web site, inability to access any website, dramatic increase in the number of spam emails received.2. Related workThe recent escalation of application layer DoS attacks haveattracted a signiﬁcant interest of a research community. Sinceapplication layer attacks usually do not manifest themselves atthe network level, they avoid traditional network based detectionmechanisms. As such, security community focused on specializedapplication-layer DoS attacks detection mechanisms. Theseresearch efforts can be broadly divided into several groups:application-based, puzzle-based approaches and network trafﬁccharacteristics based.Application-based techniquesare generally geared toward legiti-mate and thus expected characteristics of an application behavior.These approaches include detection of deviations from normalbehavior of users browsing web pages [7–10], monitoring charac- teristics of HTTP sessions[11,12], monitoring a number of clientsrequests[13], and analyzing popularity of certain websites [14]. In many of these approaches, rate-limiting serves as a primarydefense mechanism.Puzzle-based methodsare similar to these approaches. However,instead of monitoring characteristics of particular applications,puzzle-based methods, as the name suggests, offer a puzzle tosolve and detect potential DoS attack by the ability of the clientat the IP addresses to solve it or by their reaction to the offeredpuzzle. One of these techniques is the detection of attacks usingCAPTCHA puzzle[14]. Although this technique may offer a simpleapproach to attack detection and mitigation, a number of studiesshowed its ineffectiveness[15,16]
.Monitoring characteristics ofnetwork trafﬁc for application-layer DoS detection is deﬁned and has been employed for differentiationof ﬂash crowd and true DoS attacks as per the suggestions made in[17]. The approach has also found its application in several studiesin a form of IP address monitoring [18,19]. Most of these studies deal with general type application-layer denial-of-service attacks.With the introduction of low-rate application-layer DoS attack, anumber of research efforts were focused on various detectionand mitigation techniques[20,21,30,23]. Most of these techniques focus speciﬁcally on characteristics of incoming network trafﬁcaiming to reveal/prevent patterns speciﬁc to low-rate DoS attacks.As such Tang[20]developed a CUSUM-based approach that mon-itors packet arrival rate. Macia-Fernandez et al. proposed to modifythe implementation of application servers in terms of their pro-cessing of incoming requests[21].Fadir Salmen et al.[22]created digital signature of networkphase for ﬂow analysis by using two meta-heuristic approaches.To investigate the behavior of planned approaches they injectedabnormal trafﬁc and showed improved accuracy in detection DDoSattacks however the primary model is incapable for detection theDoS attacks.In[23,24]the authors proposed a model where the conversa-tions between server and its client and The practical cyber sur-roundings that generated realistic trafﬁc patterns of end usersare used to check the proposed approach.Vijayalakshmi et al.[25]proposed IP Traceback defense mecha-nism used to detect both network layer and application layerattacks. The hybrid IP traceback function comprised of Packetmarking (IP address is fragmented and marked), Reconstructionprocedure (two phases: address identiﬁcation and address recov-ery) and Attacker’s source identiﬁcation using entropy (Entropyvariation is calculated). In mitigation component, when attack isdetected an alert ﬁle generated.Yu et al.[26]proposed TMH (Trust Management Helmet) whichis light weight mechanism uses trust management to differentiatenormal (legitimate) user and attackers. The DDoS resilient sched-uler determines which session is granted to forward requests andwhen, relying on the scheduling policy and scheduler service rate.Wen et al.[27]proposed CALD is a defense mechanism to protectweb servers against application layer DDoS attacks that pretend asﬂash crowds. The anomalous source IP (identiﬁed based on thresh-old of entropy) is sent to ﬁlter so that it can defend the attack.Liu et al.[28]proposed DAT (Defending Systems Against TiltDDoS Attacks) is built with two coordinated defenders namelyIn/egress ﬁlter (IF) and Behavior Analyzer (BA). The counter-attack mechanism offers different services to each user dependingon their degree of deviation. Yu et al. [29]proposed DOW (Defense60 I. Sreeram, V.P.K. Vuppala / Applied Computing and Informatics 15 (2019) 59–66and Offense Wall) defense mechanism is integration of detectiontechnology and currency technology . The encouragement modelencourages the session expelled by anomaly detection method ifit is legitimate. That is encourages the users to resend the sessionconnection requests.Yang et al.[30]proposed a generalized entropy metrics andinformation distance metrics to detect low rate application layerddos attack. This is a router based solution and requires controlof all routers in the network. Ying et al. [31]proposed a Group- Testing based approach. Prasad et al. [32]deﬁned machine learning strategy called Anomaly based Real Time Prevention (ARTP) ofunder rated App-DDoS attacks. The complexity of the processreduced and attained maximum detection accuracy compared toother existing machine learning approaches. The results are goodbut still it can be improved further.Senthilnath et al.[33,34]explored the use of ﬁreﬂy algorithmfor clustering. Local Minima is obtained by using the k-means clus-tering and this drawback was overcome by the ﬁreﬂy algorithm.The authors used k-means and ﬁreﬂy algorithm for clustering pur-pose which increases the time complexity and this is not applica-ble for detecting application layer DDoS attacks in real timeanalysis.In[35,36], the model of Intelligent IDS proposed that based onontology. The proposed system thwarts ontology based on encod-ing scheme, port number, system component, policies, and attacktype and the model is vulnerable to DDOS attacks. In [37]deploy- ment of wireless sensor networks and mobile ad-hoc networks inapplications poses the threat of various cyber hazards, intrusionsand attacks as a consequence of these networks’ openness.In[43]the authors investigated the effect of signaling attacksand storms in mobile networks, focusing on signaling anomaliesthat exploit the radio resource control (RRC) protocol in UMTS net-works. As mobile devices and apps increasingly access the Cloud inorder to ofﬂoad computationally intensive or energy-costlyactivities, signaling storms can create heavy overloads that can sig-niﬁcantly impair system performance and offer very poor qualityof service to users. In[44]authors deﬁned the detection and miti-gation technique for storms that uses a software counter for eachmobile user, within mobile devices or in signaling system.From the review of many of the recently proposed models, it isimperative that there are many constraints in the existing modelsthat are to be addressed for improving the effective solution forcountering DDoS attacks, categorically the HTTP ﬂood attacksand more speciﬁcally majority of them are assessing on the sessionbased. However, in real-time scenario, a user can adapt differentsessions for performing set of requests to ensure order of sequenceor parallel. Considering such limitations, in this paper the proposedsolution is about a bio-inspired strategy for preventing HTTP ﬂoodbased DDoS attacks. The objective of the proposed model is toassess the HTTP transaction is ﬂood or not, which carried out usingmultiple metrics extracted based on absolute time interval rathersession. To intensify the search towards the deﬁned metrics, thebio-inspired strategy of Bat algorithm is adopted.The proposed solution assesses the similarities of HTTPtransactions with fair and ﬂood data chosen for training. Theproposed model extracts the features from request streamobserved during an absolute time interval rather than based onuser sessions and packet patterns. Unique set of features pro-posed (see Section3.1). The fast and scalable evolutionary searchtechnique called Bat algorithm used to perform search to assessthe compatibility during test phase. The cosine metric is used toidentify the signatures of given transactions is used in trainingphase. The cosine similarities identify attribute set that imposesa discernibility relation. The signatures set that imposes the dis-cernibility is critical since, the signatures having similar contextin both records of normal and ﬂood formats are obsolete todifferentiate, hence such signatures minimizes the processcomplexity.3. HTTP ﬂood attack detection using machine learning metricsand bio inspired bat algorithm3.1. The exploration of the metrics considered to train and test themodelThe need of metrics should explore in contrast to packet pat-terns. The detailed exploration of the constraints observed in exist-ing contemporary models, which are stated in related work (seeSection2), it is obvious to state that, in distributed environment,diversiﬁed packet ﬂow is easy to achieve through minimal timeframes and session time. The arrival rate based on human users,including a proxy server seems to constitute the non-pattern (ran-dom) cases. Hence, to challenge this constraint, this manuscriptdevised a novel set of metrics, which are derived from absolutetime interval rather than the session time and packet patterns.
3.1.1. Discovering time frame lengthLetCSbe the cached user sessionsCS¼fs
1;s2;...;sjCjgand each session is set of transactions given for Training, such that eachrequest is said to be transactionft9t2s
i^si2CSglabeled asN (normal) orD(DDOS attack). The cached transactions CSis segre- gated intoCS
NandCS D, those contains requests labeled as N(nor- mal) and labeled asD(DDOS attack) respectively.For each datasetCS(which is the aggregation ofCS
NandCS D), order the sessions in ascending order of their initiated time.Let
SB¼fsbðs 19s12SCÞ;sbðs 29s22SCÞ;...;sbðs jSCj9sjSCj2SCÞg
as the set that represents the session begin time of all sessionsbelongs toSC.
Let
SE¼fseðs 19s12SCÞ;seðs 29s22SCÞ;...;seðs jSCj9sjSCj2SCÞg
as the set that represents the session end time of all sessionsbelongs toSC.
Let
SL¼fslðs 19s12SCÞ;slðs 29s22SCÞ;...;slðs jSCj9sjSCj2SCÞg
as the set that represents the session life time of all sessionsbelongs toSC.Session life time of a sessionfs
i9si2CSgis calculated as follows:
slðs i9si2CSÞ¼seðs i9si2CSÞ/C0sbðs i9si2CSÞ
Find session begin time absolute deviation (Leys, 2013) of SB
sbtAD¼ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃP
jSBji¼1ðhSBi/C0sbðs i9si2SBÞÞ2qjSBj
Here in the above equation,jSBjis the size ofSBandhSBiis the aver- age ofSB.
Find session end time absolute deviation of SE
setAD¼ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ ﬃP
jSENji¼1ðhSEi/C0seðs i9si2si2SEÞÞ2qjSEj
Here in the above equation,jSEjis the size ofSEandhSEiis the aver- age ofSE.
Then the absolute time frameatfcan be measured as follows
atf¼ðhSEiþseADÞ/C0ðhSBiþsbADÞ
Cluster the sessions byrmsdðSB NÞandrmsdðSE NÞdistance Finding K (count of centroids) value as follows:I. Sreeram, V.P.K. Vuppala / Applied Computing and Informatics 15 (2019) 59–66 61Let K be the set of centroids and move session with least sessionbegin time to the K.For each sessionfs
i9si2SB N^i¼2;3;...;jSB NjgBegin flag¼trueFor each sessionfs
j9sj2KgBeginIfﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃðsbðs
iÞ/C0sbðs jÞÞ2q<sbtADjjﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ ﬃðseðs
iÞ/C0seðs jÞÞ2q<setAD /C18/C19then Beginflag¼falseEndEndifðflagÞthen BeginK s
i
EndEnd
Then apply K-Means to ﬁnd number clusters with sessions inapproximately similar time frames.
LetC¼fc 1;c2;...;c Kgbe the set of clusters of sizeK. Then for each clusterfc
i9ci2C^i¼1;2;3;...;Kg, ﬁnd the time frame as the elapsed time between least session begin time andmax session end time as follows:For eachfc
i9ci2C^i¼1;2;3;...;KgBegin LetSB
NðciÞ¼fsb 1;sb 2;...;sbjcijgbe the ascending ordered set ofsession begin times of the sessions belongs to cluster c
i. LetSE
NðciÞ¼fse 1;se2;...;sejcijgbe the descending ordered set ofsession end times of the sessions belongs to cluster c
i. Then the time frametfðc
iÞof the clusterc iis measured as follows:
tfðc iÞ¼ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃðse 1/C0sb 1Þ2q
Then ﬁnd the average of time frames length observed from allthe clusters as follows
htfðCÞi¼PKi¼1tfðc iÞK
Further ﬁnd Time Frame Absolute Deviation tfADobserved from all the clusters as follows
tfAD¼ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃP
Ki¼1ðhtfðCÞi/C0tfðc iÞÞ2qK
Then ﬁx the time frametfas the sum of average of time frameslength and Time Frame Absolute Deviation as follows.
tf¼htfðCÞiþtfAD
3.1.2. Session time observed for each absolute time intervalFor a given normal or ﬂood transactions set, the total observa-tion timeTwill be partitioned into sub intervals of size atiand measures average session time observed as follows:LetbT,eTare the respective begin time and end time of thetransaction set observation time T(a)idx¼0 // absolute time intervals counter set to 0 initially(b) IfðbTþatiÞ6eTbegin(c)idx¼idxþ1(d)tsi¼0 // the sum of all possible session intervals is set to 0initially(e)ctr¼0 // a counter ﬂag initialized with 0(f) For each sessionfs
i9si2S^i¼1;2;...;jSjgbegin (g) IfðtB6bðs
iÞ6ðtBþatiÞÞ&&ðtB6eðs iÞ6ðtBþatiÞÞBegin(h)ctr¼ctrþ1(i)tsi¼tsiþðeðsiÞ/C0bðs iÞÞ(j) End (of step g)(k) End (of step f)(l)asiðt
idxÞ¼tsictr// absolute session intervalasiðt idxÞof absolute time intervalt
idxrepresented by counteridx (m) End (of step b)(n)bT bTþati(o) IfðbTþatiÞ<eTÞContinue the process from step b3.1.3. Maximum number of Sessions (ms)All transactions are formed into sessions that can be either ran-dom or variable timings. Their exists different number of sessionsfor each time interval. Count of number of sessions observed in onetime interval gives maximum number of sessions of that timeinterval which helps in observing the user sessions to detect appli-cation layer DDoS attacks.3.1.4. Page access count (pac)User will access multiple pages in different sessions of timeinterval. How many pages are accessed in one time interval helpsin observing whether the environment in network is malicious ornormal. Page access count of absolute time interval is the numberof web pages accessed in that time interval.3.1.5. Minimum time interval between two pages (mti)This feature is calculated for two page requests which are insequence of absolute time interval. How frequently the web pagesare accessed by the user and the least amount of time gap that isrequired between two pages is measured that will help in observ-ing the user behavior. Average of unique time gaps between twopage requests which are in sequence of absolute time interval givesits minimum time interval. Let the unique time gap set of intervalbe tg¼ftg
1;tg2;...g
Minimum Time IntervalðmtiÞ¼Pjtgji¼1tgi
jtgj
3.1.6. Packets observed per each type of packet (PC)Request can be sent through any of the packets like HTTP, FTP,SMTP etc., . Each time interval contains different type of packets forwhich count of each packet is measured. The deviation in count ofpackets from one time interval to another time interval signiﬁesthe attack packet presence in the trafﬁc. p¼fp
1;p2;p3;...gbe the packets observed in that interval and pc¼fp
1c;p2c;p3c;...g be the number of packets observed for each type of packet.3.2. The dataset preparationFor given Flood and normal transaction sets CS
Nand CS Dthe record sets absolute time interval (ati) is formed as follows:Each absolute time interval is considered as one record thatcontains the values of attributes in order of session time observed(see Section3.1.2), Max number of sessions (Section 3.1.3), page access count (Section3.1.4), Minimum Time interval (Section3.1.5) and packet observed for each type (sec Section 3.1.6). These attri- butes will be referred as a setalin further draft of the article.The number of attributes in each record will be 5 which is the sizeofalthat can be referred asjalj.AbsolutetimeintervalidSessiontimeobservedMaxnumberofsessionsPageaccesscountMinimumTimeintervalPacketobservedfor eachtype62 I. Sreeram, V.P.K. Vuppala / Applied Computing and Informatics 15 (2019) 59–663.3. Bat approachMany bio-inspired algorithms exist; bat algorithm belongs tothis class which is based on swarm intelligence. The bat algorithmuses the echo based location determining behavior of bats to solveboth single objective and multi-objective optimization problems.In proposed approach bat algorithm is used for classiﬁcation (clas-sify the attack trafﬁc and normal trafﬁc).3.3.1. Nature of batsBats can ﬁnd their prey and discriminate different types ofinsects even in complete darkness. The BAT algorithm is a popula-tion based evolutionary algorithm where each bat represents asolution. It is designed according to the echolocation behavior ofthe virtual bats. This property enables them to detect the positionof their prey. Frequency modulated signals are used for echoloca-tion. Bats listen to the sound pulse emitted by them when itbounces back from the prey or the surrounding objects. As thebat approaches near its prey, it reduces the loudness of their echoand increases the rate of the sound pulse.The three generalized rules for bat algorithms:(1) All bats use echolocation to sense distance, and they alsoguess the difference between food/prey and back-groundbarriers in some magical way.(2) Bats ﬂy randomly with velocity vi at position xi with a ﬁxedfrequency f
min, varying wavelength and loudness A0 tosearch for prey. They can automatically adjust the wave-length (or frequency) of their emitted pulses and adjustthe rate of pulse emission r depending on the proximity oftheir target.(3) Although the loudness can vary in many ways, it is assumedthat the loudness varies from a large (positive) A
0to a min- imum constant value Amin.3.3.2. Classiﬁcation using bat algorithmAn initial population of bats is generated. After initializationmodify the parameters needed for ﬁtness, and subsequently the ﬁt-ness is evaluated for each bat in population.Step1: fori= 1:Number Of Iterationdelwt = wtStep2: forj=1 :nreadD
j
Step3:compute eachbatjfrequency asfj f
j=c1⁄Mean(D j)Step4: compute class (object) distance from bat
jasS object j Sobject
j=fj⁄D j⁄delwtStep5: compute for each classE
j=Sobject j– 1, updatewt=wt-2⁄ l⁄Ej
Step6: compute the new position P jand change pulse ratecontrollerc1o fBat
j
ifEj<Ej-1P
j=Pj+E j
c1=f j+c2⁄P j⁄Ej
endStep7: endStep8: calculate the error and update wt err(i) = Mean(E),wt=wt-delwtStep9:endStep10: Plot the error as sigmoid ( err) Step11:Use the abovewtandfwith testing dataStep12: Print confusion matrix from S object
j
Step13: Compute percentage of accuracyProcess for generating the classiﬁers is as follows
Step 1 and 2:Initialize the bat population has to be produced.One record is treated as one bat for which it has any numberof features. Deﬁne the random number between m, T. Wherem is the number of features, and T is the number of classes.Step 3:Calculate the frequencyﬁof each batf
j=c1⁄Mean(D j)Where, c1 is the pulse rate controller initially taken as 0.6, it canchange for every iteration.Step 4:calculate the class (object) distance from each bat.Step 5:calculate the E
jof each class and update the randomnumberwt.Updatewt=wt-2⁄
l⁄Ej
where, lis the constant number 0.2.Step 6:now, consider the class of one bat and compare with theprevious class of the bat, if it is less than the other, then calcu-late the new position P
jand pulse rate controller C1 of that bat.Now the process has to be repeated with remaining bats.Step 7:Above process has to be done for remaining all bats.Step 8:calculate the error and update the random number.Step 9:Do the next iteration by using the above process until itreaches the maximum number of iterations.Prepared dataset of both normal and attack is given as input forthe Bat algorithm individually. For normal dataset, each record isconsidered as one bat and compare with the remaining bats toknow how much distance it has to move towards the remainingbats. This has to be done for all the remaining bats. Updatedrecords are carried over to next iteration or generation. Maximumnumber of iterations has to be performed for getting the accurateclassiﬁers. Once all the iterations are completed, the normal classi-ﬁer is extracted and marked as normal signature. The same processis carried for attack training records to get the attack signature.3.4. Application layer DDoS attack detectionTesting dataset has to be preprocessed by using the dataset pre-processing process. Prepare the dataset with ﬁve attributes as likein the dataset preparation. Calculate the total weight (light inten-sity) of the testing records individually. Calculate the cosine simi-larity of testing record with both normal and attack signatures anddeclare whether the testing record is attack or normal by using therules deﬁned in Section4.2.4. Experimental results4.1. CAIDA datasetThe proposed technique is tested against CAIDA [38](Center for Applied Internet Data Analysis) dataset 2007. Core Objectives ofthis dataset are collection and sharing of data for research or scien-tiﬁc analysis of internet trafﬁc, topology, routing, performance andsecurity related events. Dataset contains the parameters like serverIP address, Timestamp, Time Zone, Object ID/URL of the web page,Response code/status, Number of bytes sent.
Table 1data set details.
Number of transactions considered for both training and testing 213,066Number of Normal transactions 94,164Number of Attack transactions 118,902Number of transactions for training 127,839Number of transactions for testing 85,227I. Sreeram, V.P.K. Vuppala / Applied Computing and Informatics 15 (2019) 59–66 634.2. Training & testing recordsThe total number of transactions considered for experimentswere 213,066 which includes N (normal-94164) and D (DDoSattack-118902). The total transactions are partitioned for trainingand testing into 60%(127,839) and 40%(85,227) respectively. Eachmetric is calculated on the dataset CS which includes N (normal)as CS
Nand D (DDoS attack) as CS Dand its detection accuracy isassessed. Number of intervals are 401. The number of intervals innormal dataset DSNis 178 in which 60% of transactions i.e., 108are considered for the training process and 40% of transactionsi.e., 69 for the testing process. The total number of intervals inattack dataset DS
Dis 224 in which 60% of transactions i.e., 135are considered for the training process and 40% of transactionsi.e., 89 for the testing process. The details are given in Table 1. Training dataset of CS
Nis formed into sessions that are of eitherrandom or same timings. Then K-Means algorithm is applied onthe training set of normal to prepare clusters. Clusters have to begrouped to ﬁnd the time interval value as explained in machinelearning metrics. Now divide the sessions with respective ofabsolute time interval value. Each time interval is considered asone record that contains the value of attributes deﬁned in metrics.Now the records are given to bat algorithm to generate single nor-mal signature. The same process is repeated for attack trainingdataset to generate attack signature. Testing dataset is mixture ofboth normal and attack trafﬁc. Calculate all the attributes for eachTable 2Rules deﬁned for attack detection.
Rule1 Weight of the testing time interval is less than the normal classiﬁer weight and greater than the attackweight AðwÞ<TðwÞ6NðwÞNormalRule2 2.1 similarity of testing record with the normal classiﬁer is more than 98 percent similarityðtest;normalÞP98%Normal 2.2 similarity of testing record with the attack classiﬁer is more than 98 percent similarityðtest;attackÞP98%Attack Rule3 Similarity of testing record with normal classiﬁer is more than the similarity of testing record withattack classiﬁer similarityðtest;normalÞ>similarityðtest;attackÞNormalRule4 All the above conditions are failed Suspicious
Table 3Performance parameter calculations.
Total Number of records consider for training and testing 213,066 Total Number of intervals consider for training and testing 401 Number of intervals used for training (Normal + Attack) 243 (108 + 135) Number of intervals used for testing (Normal + Attack) 158 (69 + 89) True Positive (tp) The number of transactions identiﬁed as intruded, which are actually intruded 91False Positive (fp) The number of transactions identiﬁed as normal, which are actually intruded 3True Negative (tn) The number of transactions identiﬁed as normal, which are actually normal 69False Negative (fn) The number of transactions identiﬁed as intruded, which are actually normal. 5Precision
tptpþfp 0.945 Recall/sensitivity
tptpþfn 0.94 Speciﬁcity
tntnþfp 0.936 Accuracy
tnþtptpþtnþfpþfn 0.948 F-Measure 2/C3
recall/C3precisionrecallþprecision/C16/C17 0.9457
Table 4Comparison of Bat algorithm with ARTP and FCAAIS.
Bat algorithm ARTP FCAAISPrecision 0.945 0.895 0.869Recall 0.94 0.985 0.942Speciﬁcity 0.936 0.914 0.894Accuracy 0.948 0.944 0.917F-measure 0.9457 0.938 0.855
Fig. 1.Comparison of Bat algorithm with ARTP and FCAAIS.64 I. Sreeram, V.P.K. Vuppala / Applied Computing and Informatics 15 (2019) 59–66interval. Testing time interval Cosine similarity is calculated withboth attack and normal signatures and at last classiﬁes the testingtime interval according to proposed rules in Table 2.4.3. Performance evaluationThe performance of proposed approach is evaluated based onthe following parameters[22]. The calculations are shown inTable 3./C15Precisionshows the class agreement of the data labels with thepositive labels given by the classiﬁer./C15Recallshows the effectiveness of a classiﬁer to identify the pos-itive labels./C15Speciﬁcityshows how effectively a classiﬁer identiﬁes the neg-ative labels./C15Accuracyshows the overall effectiveness of a classiﬁer./C15F-measureshows the relation between data’s positive labelsand those given by a classiﬁer.Munivara Prasad proposed ARTP[31]for Detecting Application layer DDoS attacks by using the Machine learning approach. Jyoth-sna and Prasad proposed FAIS[39]and FCAAIS[40]for detecting DDoS attacks. The experiments in above papers are conducted onthe same dataset and results are indicating that these models arealso scalable and robust towards forecasting the DDoS attacksscope of a network transaction (observed detection accuracy isapprox. 91%), but the major obstacle observed these models arethat compared to the proposed model is process complexity, whichinﬂuence the statistical metrics deﬁned for measuring the perfor-mance. As per these results, the accuracy of our proposed modelwas improved when compared to FCAAIS, ARTP and also attainedmaximum prediction accuracy which is shown in Table 4and the performance comparisons are given in Figs. 1–3.5. ConclusionBio-Inspired Anomaly based HTTP-Flood Attack Detection(BIFAD) devised in this article. In this, we adopted the Bat algo-rithm, which is a bio-inspired approach with magniﬁed speed insearch. First we deﬁned feature metrics to identify the requeststream behavior is of attack or normal. Unlike traditionalapproaches, the assessment of feature metrics done on the streamof requests observed in an absolute time interval rather in a ses-sion. The Second contribution is to customize the Bat algorithmto train and test. The devised Bat algorithm ampliﬁed the detectionaccuracy with minimal process complexity. The experiments wereconducted using CAIDA dataset . Hence the model devised here inthis paper is signiﬁcantly accurate and retains the maximal predic-tion accuracy.
Fig. 2.Comparison of Detection rate observed in Bat algorithm with ARTP and FCAAIS.
Fig. 3.Comparison of Processing time observed in Bat algorithm with ARTP and FCAAIS.I. Sreeram, V.P.K. Vuppala / Applied Computing and Informatics 15 (2019) 59–66 65References
[1] J. Udhayan, R. Anitha, Demystifying and rate limiting ICMP hosted DoS/DDOSﬂooding attacks with attack productivity analysis, in: IEEE InternationalConference on Advance Computing, 2009, pp:558–564.[2] Xia Chun-Tao, D. Xue-Hui, C. Li-Feng, An algorithm of detecting and defendingCC attack in real time, in: International Conference on Industrial Control andElectronics Engineering, 2012, pp. 1804–1806.[3] S.M. Lee, Distributed denial of service: taxonomies of attacks, tools, andcountermeasures, in: Proceedings of the International Workshop on Security inParallel and Distributed Systems, San Francisco, 2004, pp. 543–550.[4]
Raj kumar, Manisha Jitendra Nene, A survey on latest DoS attacks:classiﬁcation and defense mechanisms, Proc. Int. J. Innov. Res. Comput.Commun. Eng. 1 (8) (2013)
. [5] Erol Gelenbe, Michael Gellman, George Loukas, An autonomic approach todenial of service defence, in: Sixth IEEE International Symposium on a World ofWireless Mobile and Multimedia Networks, 2005. WoWMoM 2005, June 2005,pp. 537–541.[6]
Yadong Wang, Lianzhong Liu, et al., A survey of defense mechanisms againstapplication layer distributed denial of service (DDoS) attacks, IEEE Commun.Surv. Tut. (2015)
.[7] Y. Xie, S. Zheng Yu. A novel model for detecting application layer DDoS attacks,in: First International Multi-Symposiums on Computer and ComputationalSciences, 2006. IMSCCS ’06, vol. 2, 2006, pp. 56–63.[8] J. Yu, Z. Li, H. Chen, X. Chen. A detection and offense mechanism to defendagainst application layer DDoS attacks, in: Third International Conference onNetworking and Services, 2007. ICNS, 2007, pp. 54–54.[9] C. Ye, K. Zheng, Detection of application layer distributed denial of service, in:2011 International Conference on Computer Science and Network Technology(ICCSNT), vol. 1, 2011, pp. 310–314.[10] S. Ranjan, et al., DDoS-resilient scheduling to counter application layer attacksunder imperfect detection, in: Proceedings of IEEE INFOCOM, 2006, pp. 23–29.[11]
S. Ranjan, R. Swaminathan, M. Uysal, A. Nucci, E. Knightly, DDoS-shield: DDoS-resilient scheduling to counter application layer attacks, IEEE/ACM Trans.Netw. 17 (1) (2009) 26–39
. [12]
Y. Xuan, I. Shin, M. Thai, T. Znati, Detecting application denial of-serviceattacks: A group-testing-based approach, IEEE Trans. Parallel Distrib. Syst. 21(8) (2010) 1203–1216
.[13]
Y. Xie, S. Zheng Yu, Monitoring the application-layer DDoS attacks for popularwebsites, IEEE/ACM Trans. Netw. 17 (1) (2009) 15–25
. [14]
M. Mehra, M. Agarwal, R. Pawar, D. Shah, Mitigating denial of service attackusing captcha mechanism, in: Proceedings of the International Conference&#38; Workshop on Emerging Trends in Technology, ICWET ’11, ACM, NewYork, NY, USA, 2011, pp. 284–287
. [15]
J. Jung, B. Krishnamurthy, M. Rabinovich, Flash crowds and denial of serviceattacks: characterization and implications for cdns and web sites, in:Proceedings of the 11th International Conference on World Wide Web,WWW ’02, ACM, New York, NY, USA, 2002, pp. 293–304
. [16]
S.Y. Nam, T. Lee, Memory-efﬁcient IP ﬁltering for countering DDoS attacks, in:Proceedings of the 12th Asia-Paciﬁc Network Operations and ManagementConference on Management Enabling the Future Internet for ChangingBusiness and New Computing Services, APNOMS’09, Springer-Verlag, Berlin,Heidelberg, 2009, pp. 301–310
. [17]
S. Bhatia, D. Schmidt, G. Mohay, Ensemble-based DDoS detection andmitigation model, in: Proceedings of the Fifth International Conference onSecurity of Information and Networks, ACM, 2012, pp. 79–86
. [18]
Y. Tang, Countermeasures on application level low-rate denialof-serviceattack, in: Proceedings of the 14th International Conference on Informationand Communications Security, ICICS’12, Springer-Verlag, Berlin, Heidelberg,2012, pp. 70–80
.[19]
G. Maciá-Fernández, R.A. Rodríguez-Gómez, J.E. Díaz-Verdejo, Defensetechniques for low-rate dos attacks against application servers, Comput.Netw. 54 (15) (2010) 2711–2727
. [20]
G. Maciá-Fernández, J.E. Díaz-Verdejo, P. García-Teodoro, Evaluation of a low-rate dos attack against iterative servers, Comput. Netw. 51 (4) (2007) 1013–1030
.[21]
G. Macia-Fernandez, J. Diaz-Verdejo, P. Garcia-Teodoro, Mathematical modelfor low-rate dos attacks against application servers, IEEE Trans. Inf. ForensicsSecur. 4 (3) (2009) 519–529
.[22] Fadir Salmen, Paulo R. Galego Hernandes Jr, et al., Using ﬁreﬂy and geneticmeta heuristics for anomaly detection based on network ﬂows”, in: AICT : TheEleventh Advanced International Conference on Telecommunications, 2015.[23] Mikhail Zolotukhin, Timo Hamalainen, et al., Increasing web serviceavailability by detecting application-layer DDoS attacks in encrypted trafﬁc,in: IEEE, 23rd International Conference on Telecommunications (ICT).[24] Georgios Kambouakis, Tassos Moschos, Dimitris Geneiatakis, StefanosGritzalis, A fair solution to DNS ampliﬁcation attacks. Second InternationalWorkshop on Digital Forensics and Incident Analysis, 2007, WDFIA 2007.[25]M. Vijayalakshmi, S. Mercy Shalinie, IP traceback system for network andapplication layer attacks, 2012 International Conference on Recent Trends InInformation Technology (ICRTIT), IEEE, 2012
. [26]
J. Yu, C. Fang, L. Lu, Z. Li, Mitigating application layer distributed denial ofservice attacks via effective trust management, IET Commun. 4 (16) (2010)1952–1962
.[27]
S. Wen, W. Jia, W. Zhou, W. Zhou, C. Xu, Cald: Surviving various application-layer DDoS attacks that mimic ﬂash crowd, 2010 4th International Conferenceon Network and System Security (NSS), IEEE, 2010
. [28]
Huey-Ing Liu, Kuo-Chao Chang, Defending systems against tilt DDoS attacks,2011 6th International Conference on Telecommunication Systems, Services,and Applications (TSSA), IEEE, 2011
. [29]
Jie Yu, Zhoujun Li, Huowang Chen, Xiaoming Chen, A detection and offensemechanism to defend against application layer DDoS attacks, 2007. ICNS. ThirdInternational Conference on Networking and Services, IEEE, 2007
. [30]
Yang Xiang, Ke Li, Wanlei Zhou, Low-rate DDoS attacks detection andtraceback by using new information metrics, IEEE Trans. Inf. Forensics Secur.6 (2) (June 2011) 426–437
. [31]
Ying Xuan, Incheol Shin, My T. Thai, Taieb Znati, Detecting application denial-of-service attacks: a group-testing-based approach, IEEE Trans. Parallel Distrib.Syst. 21 (8) (2010) 1203–1216
. [32] K. Munivara Prasad, A. Rama Mohan Reddy, K. Venugopal Rao, Anomaly basedreal time prevention of under rated App-DDoS attacks on web: an experientialmetrics based machine learning metrics, Indian J. Sci. Technol. 9 (27) (2016),https://doi.org/10.17485/ijst/2016/v9i27/87872 . [33]
J. Senthilnath, S.N. Omkar, V. Mani, Clustering using ﬁreﬂy algorithm:performance study, ELSEVIER, Swarm Evol. Comput. 1 (2011) 164–171
. [34] Suﬁan Hameed, Usman Ali, On the Efﬁcacy of Live DDoS Detection withHadoop, arXiv preprint arXiv:1506.08953, 2015.[35]
A. Razzaq et al., Foundation of semantic rule engine to protect web applicationattacks, in: 2011 Tenth International Symposium on AutonomousDecentralized Systems, IEEE, 2011, p. 2011
. [36]
Saeed Javan Mardi, Mohammad Shojafar, Shahdad Shariat Madari, et al.,PGSW-OS: a novel approach for resource management in a semantic weboperating system based on a P2P grid architecture, J. Supercomput. 69 (2)(2014) 955–975
.[37]
Shahaboddin Shamshirband, Nor Badrul Anuar, Miss Laiha Mat Kiah, AhmedPatel, An appraisal and design of a multi-agent system based cooperativewireless intrusion detection computational intelligence technique, Eng. Appl.Artif. Intell. 26 (9) (2013)
. [38] MIT, M. I. . DARPA INTRUSION DETECTION EVALUATION. Retrieved fromLincoln Laboratory: <https://www.ll.mit.edu/ideval/data/1998data.html >. [39] V. Jyothsna, V.V. Rama Prasad, Anomaly based network intrusion detectionthrough assessing Feature Association Impact Scale (FAIS); Inderscience, Int. J.Inform. Comput. Secur. (IJICS), 2016, in press.[40] V. Jyothsna, V.V. Rama Prasad, FCAAIS: Anomaly based network intrusiondetection through feature correlation analysis and association impact scale, in:ICT Express, The Korean Institute of Communications Information Sciences,Elsevier, August 2016, in press.[41]
E. Gelenbe, G. Loukas, A self-aware approach to denial of service defence,Comput. Netw. 51 (5) (2007) 1299–1314
. [42] Daniele Gianni, Georgios Loukas, Erol Gelenbe, A simulation framework for theinvestigation of adaptive behaviours in largely populated building evacuationscenarios, in: Organised Adaptation in Multi-Agent Systems workshop at the7th International Conference on Autonomous Agents and Multiagent Systems,May 2008.[43]
Gokce Gerbil, Omer H. Abdelrahman, Mihajlo Pavloski, Erol Gelenbe, Modelingand analysis of RRC-based signalling storms in 3G networks, IEEE Trans.Emerging Topics Comput. 4 (1) (2016) 113–127
. [44] Erol Gelenbe, Omer H. Abdelrahman, Gokce Gorbil, Detection and mitigation ofsignaling storms in mobile networks, in: IEEE ICNC, 2016, pp. 1–5.66 I. Sreeram, V.P.K. Vuppala / Applied Computing and Informatics 15 (2019) 59–66