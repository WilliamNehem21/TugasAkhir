On the stability of (self-)adaptive behaviour in continuously changingenvironments: A quantiﬁcation approach
Martin Goller, Sven Tomforde*
Christian-Albrechts-Universit €at zu Kiel, Intelligent Systems, Hermann-Rodewald-Str. 3, 24118, Kiel, Germany
ARTICLE INFO
Keywords:Self-awarenessSelf-adaptive and self-organising systemsSystem analysisStabilityDegree of self-adaptationAutonomic computingOrganic computingABSTRACT
The concept of self-adaptation and self-organisation (SASO) is a modern approach to cope with the ever-increasing complexity and interconnectedness of large-scale component systems. The basic idea is to react toenvironmental dynamics and disturbances by re-con ﬁguring the productive behaviour and/or the relations to other systems. However, this may result in unstable and even oscillating macro-level behaviour, potentiallyrendering the adaptation efforts of the contained component systems inappropriate. We assume that such anunstable conﬁguration is an indicator of unexpected behaviour which can lead to a reduced utility of the overallsystem. To enable the system to be self-aware about such events, we propose a concept to measure the con ﬁg- uration stability of a SASO system by creating a derived time series based on the con ﬁgurations. This is based on the application of the Kinoshita measure. We show the applicability of the concept and the observed behaviour indifferent simulated use-cases.
1. IntroductionWithin the last decade, (self-)adaptivity increasingly became an in-tegral part of the design of next-generation information and communi-cation systems [1]. Concepts such as intelligent systems [ 2], cyber-physical systems [3], Internet of Things [4] or self-aware computing systems [5] established a trend in systems engineering to-wards constellations of typically distributed autonomous subsystems thatintegrate dynamically into an overall system constellation and self-adapttheir behaviour in response to changing situations [ 6]. We refer to sys- tems with abilities to autonomously modify their behaviour and theirstructural integration in terms of cooperation with other (sub-)systems asself-adaptive and self-organising (SASO) systems in the remainder of thisarticle.To equip a SASO system with the capability of context-aware self-adaptation, different approaches have been proposed [ 9], e.g. by the Automatic Computing [7] or Organic Computing [8] initiatives. gives an overview. These system designs often incorporate autonomous learningtechniques to allow a continuous and unsupervised improvement of theself-adaptation behaviour [10]. The result of these efforts is that systemscan react fast and continuously to changing conditions as well as dis-turbances [11] and consequently achieve higher robustness [ 12]. As outlined in previous work [13], we assume that too frequentadaptation decisions of the (sub-)systems will lead to decreased stabilityof the overall system and potentially to a decreased user acceptance.Although there might be a perfect reason for each decision aboutself-adaptation at sub-system-level, the resulting macro-level behaviourand the interplay of the distributed subsystems ’behaviour may lead to unstable or even oscillating conditions. Although there is some work onthe quantiﬁcation of system properties and runtime behaviour in SASOsystem (see section2.2for an overview), what is missing is an integratedapproach to balancing the adaptation decision between possible perfor-mance and robustness gains on the one hand and system stability anduser acceptance on the other. With this article, we propose a ﬁrst step towards such a constructive trade-off–the basis for this is an awareness of the actual stability within the system federation, based on externalobservation.Based on the ideas to quantify a ‘degree of adaptation’, the authors have presented aﬁrst concept for measuring the stability of the system'sconﬁguration in Ref. [14]. The previous article evaluated the measure inan external disturbance scenario and a system failure scenario. Thisarticle extends the previous work by the evaluation of the measure in twonew scenarios (see sections4.2 and 4.4), determines novel insights about the behaviour and its interpretability, and gives an approach to deter-mine the necessary parameters for the evaluation (see section 3.3). The remainder of this article is organised as follows: Section 2
* Corresponding author.E-mail address:st@informatik.uni-kiel.de(S. Tomforde).
Contents lists available atScienceDirect
Array
journal homepage:www.elsevier.com/journals/array/2590-0056/open-access-journal
https://doi.org/10.1016/j.array.2021.100069Received 7 December 2020; Received in revised form 22 March 2021; Accepted 10 May 2021Available online 28 May 20212590-0056/©2021 The Author(s). Published by Elsevier Inc. This is an open access article under the CC BY-NC-ND license ( http://creativecommons.org/licenses/by-
nc-nd/4.0/ ).Array 11 (2021) 100069explains the underlying system model for SASO systems including theassumptions made by the authors and describes related work. Section 3 presents an approach to the measurement of adaptation behaviour sta-bility, which is experimentally analysed in section 4. Finally, section5 summarises the paper and gives an outlook on future work.2. BackgroundIn this section, we initially describe our system model that de ﬁnes which characteristics and capabilities of a SASO system we argue. Af-terwards, we brieﬂy summarise developments of related work.2.1. System modelIn this article, we refer to a SASO system Sas a collectionAof autonomous subsystemsa
ithat are able to adapt their behaviour based onself-awareness of the internal and external conditions. We further assumethat such a subsystem is an entity that interacts with other entities, i.e.,other systems, including hardware, software, humans, and the physicalworld with its natural phenomena. These other entities are referred to astheenvironmentof the given system. Thesystem boundaryis the common frontier between the system and its environment.Eacha
i2Ais equipped with sensors and actuators (both, physical orvirtual). Internally, eacha
iconsists of two parts: The productive systempartPS, which is responsible for the basic purpose of the system, and thecontrol mechanismCM, which controls the behaviour of the PS (i.e.,performs self-adaptation) and decides about relations to other sub-systems. In comparison to other system models, this corresponds to theseparation of concerns betweenSystem under Observation and Control(SuOC) andObserver/Controllertandem [15] in the terminology of Organic Computing (OC) [16]o rManaged ResourceandAutonomic Managerin terms of Autonomic Computing [ 7].Fig. 1illustrates this concept with its input and output relations. The user describes the systempurpose by providing a utility or goal function Uwhich determines the behaviour of the subsystem. The User usually takes no further action toinﬂuence the decisions of the subsystem. Actual decisions are taken bythe productive system and the CM based on the external and internalconditions and messages exchanged with other subsystems. We modeleach subsystem to actautonomously, i.e., there are no control hierarchiesin the overall system. Please note that for the context of this article anexplicit local conﬁguration of the PS is necessary–which in turn limits the scope of the applicability of the proposed method. Furthermore, eachsubsystem must provide a read access to the con ﬁguration. At each point in time, the productive system of each a
iis conﬁgured using a vectorc
i. This vector contains a speciﬁc value for each control variable that can be altered to steer the behaviour, independently of theparticular realisation of the parameter (e.g., as real value, boolean/ ﬂag, integer or categorical variable). Each subsystem has its own con ﬁgura- tion space, i.e. an n-dimensional space deﬁning all possible realisations of the conﬁguration vector. The combination of the current con ﬁguration vectors of all contained subsystems of the overall system Sdeﬁnes the joint conﬁguration ofS. We assume that modiﬁcations of the conﬁgu- ration vectors are done by the different CMonly, i.e. locally at each subsystem, and are the result of the self-adaptation process of the CM.2.2. Related workWithin the last two decades, some work has been presented that aimsat measuring and assessing SASO system properties. The most prominentexamples are self-organisation [17] and emergence [18]. However, most of these metrics require domain knowledge, are dedicated to a speci ﬁc application, are restricted to simple, small-scale models [ 19], or describe architectural and implementational properties for the comparison ofsystems at design-time [20].Kaddoum et al. [21] discuss the need to reﬁne classical performance metrics to SASO purposes and present speci ﬁc metrics for self-adaptive systems. They distinguish between“nominal”and“self-*”situations and their relations. For instance, they measure the operation time aboutthe adaptation time to determine the effort. Some of the developedmetrics have been investigated in detail by Camara et al. for softwarearchitecture scenarios [22]. Besides, success and adaptation efforts andways to measure autonomy have been investigated, see e.g. [ 23]. Only a few contributions focused on general metrics to determine theeffort and the beneﬁt of (self-)adaptation in distributed collections ofautonomous subsystems, see Ref. [24] for an overview. Examples include the relation between working and adaptation time, the availability ofsubsystems for task processing, and the performance of the overall system(i.e., the degree to which a certain goal is achieved). This has beenaccompanied by a transfer of traditional performance metrics, seeRef. [21] or augmented with measures necessary for control strategies ofSASO systems [25]. However, the focus on an degree of adaptation, thestability of adaptations, and the foundation for deriving a trade-off be-tween possible performance gain of individual component systems andnegative impact on macro-level behaviour has not been focused.In general, there is only a very limited number of contributions onwhen (and if at all) to adapt in literature. Recently, Chen et al. presenteda concept that is based on the so-called ‘technical debt’[26]: The authors introduce a gate that either enables or disables the adaptation mecha-nism. This decision is based on deriving an integrated score for de ﬁning the current so-called ‘temporal interest’and the expected ‘revenue’. This implicitly allows for a similar goal as outlined in this paper: More sta-bility rather than frequent self-adaptation. However, it does not comewith a measurement that determines the degree of self-adaptation or thedegree of stability, preferable in relation to the current context.In [17] Tomforde et al. introduce a method to measureself-organisation based on a comparison of observed communicationpatterns between subsystems. Their basic idea is comparable to theapproach presented in this paper. In Refs. [ 13,27] the authors present the idea to consider the conﬁgurations of subsystems as an observable statein a generative probabilistic model of observation. Although the tech-nical approach is comparable to this article, the focus is different as itgoes beyond a‘degree of self-adaptation/self-organisation ’. Fundamen- tally, this article presents the next step on-top of these measurements.As a summary of this discussion, we can state that a uni ﬁed mea- surement framework for the quantiﬁcation of externally measurable system properties that consider the adaptation behaviour of SASO sys-tems is still missing. Either existing approaches focus on isolated aspectssuch as performance or they make use of domain knowledge. Based onthe assumption of being able to assess the con ﬁguration of the productive components that are steered by adaptation modules, we add a novelapproach for modelling system behaviour at macro-level. This serves as astarting point for higher-levelled assessments such as stability (discussed
Fig. 1.Schematic illustration of a subsystem a ifrom Ref. [15]. The arrows from the sensors and PS to the CM indicate observation ﬂows, while the arrows from the CM to the PS and the actuators indicate control ﬂows. Dashed arrows emphasise a possible path that is typically not used. Not shown: The CM is ableto communicate with other CMs in the shared environment to exchange infor-mation such as sensor reading and to negotiate policies.M. Goller, S. Tomforde Array 11 (2021) 100069
2in this article), variability, or acceptability (which is subject to futurework). Technically, our probabilistic approach differs fundamentallyfrom other approaches as it models each aspect of the distributed sub-systems’conﬁgurations as random variables without any assumptions onthe impact of the performance, the causes for adaptation decisions, ortemporal implications. We compare the observations using divergencemeasures, which then allows for deﬁning different measures for self- adaptation on-top of this quantiﬁcation.3. Conﬁguration stabilityIf the CM decides that an adaptation is necessary it will change theconﬁguration of the productive system. Since the decision models usedby the CM are hidden to external observers, we model the con ﬁguration changes as a random process with the conﬁguration vector as a random variable. Therefore, the observed conﬁgurations form a random distri- bution. For this distribution, an estimated density can be associated andnew conﬁgurations can be assigned a probability concerning that density.Our approach is based on the idea that if new con ﬁgurations with a high probability are chosen the system works as expected and the un-derlying adaptation is desirable or ‘normal’. In such a case, we call the conﬁguration state‘stable’. If a new conﬁguration has a low probability we still assume that the system is working as usual and that this adap-tation is due to a minor disturbance. Only when con ﬁgurations with low probability are chosen over a longer course of time, we presume that amajor disturbance or a system failure is on hand.If it comes down to the implementation, con ﬁguration parameters are usually represented as real numbers. Since a single vector of real numbershas a probability ofP¼0 in a continuous density, we will look at theprobability densities that are created by several vectors.By comparing the conﬁgurations of a subsystem in a current timewindow with those of a previous window, we can identify abnormaladaptation activity in a single subsystem. To identify abnormal changesin a SASO system at a global scale (i.e. at macro-level, we take allconﬁguration comparisons into account and then apply a measure basedon the“macroscopic measure for detecting abnormal changes in a multi-agent system”as deﬁned by Kinoshita [28].3.1. Deﬁnition of the Kinoshita measuresKinoshita proposes a measure which he uses as an indicator for un-usual activity changes in a distributed multi-agent system. Kinoshitadeﬁnes two values, the activity factor at a given time and the variance ofﬂuctuation of the activity factor. The activity factor is based on theclassiﬁcation of each agent as either active or inactive. Let N
denote the total number of agents in the multi-agent system and let n
tbe the number of active agents at a given time t. The activity factor z
tis deﬁned asz
t:¼2/C1n t/C0Nþ12/C1N (1)For a given window sizeM, theﬂuctuationξ
tof the activity factor at timetis calculated asξ
t:¼z t/C01M/C1XM/C01i¼0zt/C0i
andﬁnally, we calculate the variance νtof theﬂuctuation:
νt:¼1MXM/C01i¼0ξ2t/C0i/C0 1MXM/C01i¼0ξt/C0i!2
(2)Kinoshita argues that unusual peaks in the time series of
νtare an indi- cator of abnormal changes in the underlying distribution of active andinactive subsystems. Consequently, we aim at using this measure todetect such peaks that then serve as an indicator for undesired adaptationbehaviour that needs to be suppressed.3.2. Application of the Kinoshita measuresTo apply the Kinoshita measure, we need to de ﬁne what active and inactive agents are. Obviously, the subsystems of our SASO system arethe agents in Kinoshita's measure. Our goal is to determine whether theconﬁguration of each subsystem is stable or not. Therefore, we de ﬁne a subsystem as active if and only if its conﬁguration is unstable. That is that the divergence of the density of the latest con ﬁgurations and the density of previous conﬁgurations is greater than a certain threshold. That meansthat for the latest conﬁgurations values were chosen that follow a dis-tribution which signiﬁcantly differs from the previous one.Letca;t2Rnbe then-dimensional conﬁguration vector of the sub- systemaat timet. We modelc
a,tas a random variable. LetM>1 be the window size andL>0 be the delay parameter. Using an appropriatedensity estimation technique, we deﬁne two probability densitiesDC
a,t
andDP a,tbased on parts of the time series of c a,t: DC
a;t:¼densityðc a;t/C0m;ca;t/C0mþ1 ;…;c a;tÞDP
a;t:¼densityðc a;t/C0l/C0m ;ca;t/C0l/C0mþ1 ;…;c a;t/C0lÞ DCis the density of the current window and DPthe density of a previous window in the time series. To these two densities, we now applythe Kullback-Leibler divergence [29] measureKL
2ðP;QÞ¼Z∞/C0∞pðxÞlog/C18pðxÞqðxÞ/C19/C302/C0Z
∞/C0∞qðxÞlog/C18qðxÞpðxÞ/C19/C302(3)and get a new time seriesd
a;t:¼KL 2ðDC a;t;DP a;tÞ (4) Finally, we deﬁne a subsystemato be active at timetifd
a,t>ϵfor a threshold valueϵ. Otherwise, the subsystem is called inactive.3.3. Finding the right parametersFinding suitable values for the parameters M,Landϵis crucial for the signiﬁcance of the calculated Kinoshita measure. A low ϵwill mark conﬁguration changes as unstable which at a closer look are stillacceptable as stable. On the other hand, too high values for MandL would mask short term occurrences of high amplitude changes. Our ex-periments show that good choices for these parameters highly depend onthe actual SASO-System. In general, the con ﬁguration of these parame- ters is consequently application-speciﬁc and should be customised at runtime using hyper-parameter-tuning. However, we aim at a ‘good- enough’reference conﬁguration.Aﬁrst approach toﬁnd such acceptable values is to create a simula-tion of the SASO system and gather the con ﬁguration time series of the simulated subsystems. In the next step, change these data samples forsome of the agents such that at controlled time points for a few steps highamplitude changes occur. Then we create an optimisation problem: Findthe best values forM,Landϵsuch that the controlled changes createunique peaks in the Kinoshita measure.Our experiments show that the best values vary depending on wherewe set the artiﬁcial changes. However, they vary only in a very limitedrange. Therefore, a reasonable next step is to run this optimisationseveral times with different points for the changes. This gives a distri-bution forM,Landϵ. The values that occur most often usually are in factgood values for the actual evaluation.Of course, this method only works if it is possible to create suchartiﬁcial changes. If the base simulation already generates con ﬁguration samples with a wide range of values and a lot of changes in one timeframe and very few changes in another, then it is hardly possible to ﬁnd values that will give satisfying results. In this case, we consider theM. Goller, S. Tomforde Array 11 (2021) 100069
3conﬁguration of the system as unstable from the beginning. In fact,normal and abnormal adaptation behaviour cannot be distinguished inthese scenarios, which renders our measure not applicable. However,current experiments show that this is not the case for the investigatedscenarios (where future work aims also at de ﬁning the limits for the application).4. Experiments and evaluationWe analyse the behaviour of the proposed measure in two arti ﬁcial ﬂocking [30] and two basic trafﬁc simulations. All simulations areimplemented in the MASON [31] simulation environment.4.1. Flocks with external disturbanceThisﬂocking simulation consists of 50 birds on a toroidal plane withrandom starting points and random initial orientations. We consider twocases: First a normal simulation and second a disturbed one. In bothscenarios, the birds follow the usual rules of ﬂocking:●Alignment: A bird will align its direction with the average direction ofits neighbours●Cohesion: A bird will steer towards the centre of all neighbouringbirds●Avoidance: A bird will steer away from neighbours that are too closeFor each of these rules, a direction vector v
xis computed, weighted (with factorw
x) and then added together. This sum is then normalisedand eventually added to the current direction v
current vector of the given bird to determine it's directionv
nextin the next time step: v
next¼v currentþnormalise/C16w
*alignment valignment
þw*cohesion vcohesion
þw*avoidance vavoidance/C1 (5)For the two simulations, the values are w
cohesion ¼w alignment ¼1.0,wavoidance ¼0.33 and the sum is normalised to a value of 0.7.In the undisturbed case, all birds follow these three rules. In thedisturbed case, one birdA
0is removed at time pointt¼500. All birds within a distance of 50 unitsﬂy diametrically away fromA
0for two time steps and then follow their usual behaviour again (which simulates theresponse to a shot killing the bird, for instance).The conﬁguration on which we apply the measures is the orientationof the birds, represented as the angle against the x-axis (with values from/C0
πtoπ) of the simulation environment.Fig. 2shows the time series of
Fig. 2.The orientation time series of one of the affected birds. The values wraparound at/C6
π. The disturbance is visible as the drop at t¼500.
Fig. 3.Some results of the heuristic 3.3 for the ﬁrstﬂocking simulation for a ﬁxedϵ¼1. Red:M¼L¼10, blue:M¼L¼20 and grey:M¼L¼25.
Fig. 4.Some results of the heuristic 3.3 for the ﬁrstﬂocking simulation for a ﬁxedM¼L¼20. Red:ϵ¼2, blue:ϵ¼1 and grey:ϵ¼0.5.M. Goller, S. Tomforde Array 11 (2021) 100069
4the orientation of one of the affected birds. Most of the time, this bird hasan orientation near/C6
π, but when the disturbance occurs it changes it'sorientation abruptly to a value near 1. It then takes the bird about 120steps to realign to the majority of theﬂock.To apply the Kinoshita measure, we need to ﬁx values forM,Landϵ. For this, we put the undisturbed simulation into the heuristic from sec-tion3.3and change the conﬁguration values for 10% of the agents. Fromt¼200 tot¼210 these agents get a constant conﬁguration value of 1 and fromt¼300 tot¼310 they get a value of 0. Therefore, we expect theheuristic toﬁnd values such that one peak att¼200/C0Land one att¼ 300/C0Lis sufﬁciently prominent.Fig. 3shows results for aﬁxedϵ¼1. ForM¼L¼10 (red graph) we see the peaks att¼190 andt¼290 but also two additional peaks at t¼ 200 andt¼210 which are almost the same height as the ﬁrst one.M¼L ¼25 (grey graph) we have no sufﬁciently prominent peak att¼175. The blue graph shows the result forM¼L¼20 which meets our expectation fairly well.Fig. 4gives an impression on the effects of changing theϵ-parameter. A lowϵ
allows too many agents to be counted as active, eventhose who are not using artiﬁcially changed conﬁguration data. There- fore, the grey graph (ϵ¼0.5 gives too many peaks. The blue graph showsthe results forϵ¼1, where we can identify the desired peaks alongside afew smaller ones. The red graph shows ϵ¼2. Here, no other peaks are present. We then repeat this process with other time points for the arti-ﬁcially changed data. Finally, the heuristic tells us that good values for M andLare in fact nearM¼L¼20 and thatϵ/C211 is suitable. We keep in mind that a high value forϵcould suppress important agents. Therefore,we chooseM¼L¼20 andϵ¼1 for the evaluation of this simulation.To determine whether the birdais count as active att¼520 in the disturbed simulation, we need to calculate the distribution densitiesDC
a,520¼density(c a,500,…,c a,520) andDP a,520¼density(c a,480,…,c a,500) of its orientation. To do so, we use the common kernel density estimationmethods from Ref. [32]. Since the orientation is circular (wrappingaround at/C6
π), we need to use a circular kernel function. In this case, wechose a von Mises kernel [33].Fig. 5shows the resulting densities with the centre of distribution near 2.7 in theﬁrst time window and near 1.2 in the second window.TheKL2-value for this bird isd a;520¼KL 2/C0DC
a;520;DP a;520/C1/C256:11. This is higher than our threshold value. Consequently, the bird ais considered to be ‘active’att¼520.Doing this for all birds and all time points, we can calculate theKinoshita activity factor (which is basically the ratio of active agents)usingformula 1. The result is shown inFig. 6. Here, we can already identify a peak at the disturbance event together with other phases ofhigh activity. Finally, we can calculate the ﬂuctuation variance
νt.Fig. 7 shows the resulting time series for the disturbed (red) and the
Fig. 5.Densities for the orientation distributions of bird from Fig. 2in the disturbedﬂocking simulation. Red: during t¼480 tot¼500, blue: duringt¼ 500 tot¼520.
Fig. 6.The Kinoshita activity factor for the disturbed ﬂocking simulation.
Fig. 7.The Kinoshitaﬂuctuation variance of theﬂocking simulation. Red: the disturbed case, blue: undisturbed.M. Goller, S. Tomforde Array 11 (2021) 100069
5undisturbed (blue) simulation. Except for minimal differences due to thearithmetic precisionﬂaws of the Java double type [34] both graphs are identical untilt¼480. At that point, the time windows incorporate thedisturbance. The disturbance creates a clear peak in the graph. Shortlyafter the disturbance, the birds group in three isolated ﬂocks, two of them merge att¼900 which results in a second peak. Other than the activityfactor, theﬂuctuation variance emphasises these two events.4.2. Flocks with change of utilityIn this simulation, we model 50 agents that again roam a toroidalplane with random starting points and random initial orientations. Next,we assign each point of the plane a utility value such that the utilityvalues for all points in the plane are zero except for two circular, inter-secting areas. The agents follow the rule of avoidance as in the previousscenarios (but not alignment or cohesion, i.e. w
cohesion ¼w alignment ¼0) and they can evaluate the utility value of their current position. The goalfor each agent is to stay inside the area of the highest utility value. If it isnot inside that area it will steer towards the centre of that area until thearea is entered (seeFig. 8). This can be viewed as aﬂock of predators running around in an area with the best supply of prey or as a group ofvacuum cleaning robots that clean the dirtiest area in the house.In analogy to the real world, where the predators will decimate theprey and the robots will remove the dirt, we introduce a dynamic in theutility values. The valuesUfor the two non-zero utility areas change overtime following a sinus function with a constant phase pand the time step variablet:UðtÞ:¼ðsinð0:001
*p*tÞþ1Þ=2The phase parameters for the two areas are p¼7 andp¼9. Therefore, their utility values oscillate between 0 and 1 with different speeds. Bythis means, we force the agents to migrate to the other area which createsa notable overlay over the usual chaotic motion behaviour. At thebeginning of the simulation, the lower right area is the one with thehighest utility value. Within 150 steps, all agent have reached this area.Att¼205 the upper left area will become the one with the higher valueand the agents start migrating towards it. At t¼588 the roles will switch again.Putting the time series of the agents’orientation into our measures and applying the parametersM¼L¼12 andϵ¼0.8 as given by the heuristic creates the graph forνtas shown inFig. 9. The two prominent peaks show the reaction of the agents to the changing utility. They are anindicator for a major conﬁguration change that a system user shouldexamine.4.3. Network of trafﬁc lights with internal disturbanceThe third scenario is inspired by the Organic Traf ﬁc Control (OTC) system that self-adapts the green duration of traf ﬁc lights [35], estab- lishes progressive signal systems [36], and guides drivers through the network using variable message signs [ 37]. Here, we used an abstract trafﬁc simulation, where the SASO system consists of seven inter-connected intersection controllers.Fig. 10shows the layout of the street
Fig. 8.The secondﬂocking simulation at time step t¼250. The agents are heading towards the upper left area which has a higher utility value than thelower right area sincet¼205.
Fig. 9.The Kinoshitaﬂuctuation variance for the utility changing simulation.The peaks att¼205 andt¼588 show the reaction of the agents to the changeof the highest utility area.
Fig. 10.The street network for trafﬁc simulation. The circles are intersections and the arrows are the street lanes.M. Goller, S. Tomforde Array 11 (2021) 100069
6network.Each intersection tries to minimise the waiting time for all cars at allincoming lanes by optimising the red light times for each lane. There are250 cars in the simulation. They are part of the environment and not ofthe SASO system itself. Each car picks its destination randomly andchooses the shortest path to it. When it reaches the destination, theprocess is repeated and therefore all cars in motion constantly. In contrastto OTC system, the intersections of the SASO system in this simulation donot communicate with each other. Their recon ﬁguration results are onlybased on the current trafﬁc volume at intersection's lanes.The optimisation function to be minimised is the sum of all waitingtimes of all cars in all lanes. We assume that each car needs a constanttime to cross the intersection if it is in the ﬁrst position of an incoming lane with a green light. Therefore, the waiting time for one car is de ﬁned by the number of cars that are processed before the current car leaves theintersection. In one time step of the simulation, several cars can be pro-cessed. The waiting time of the unprocessed cars is carried over to thenext simulation step. After each simulation step, the intersections look atthe waiting times of the unprocessed cars and try to ﬁnd a red light conﬁguration that minimises the expected waiting time over all cars inthe next step.In this scenario, the path between intersections AandBis chosen with a probability ofp¼0.9 and the path betweenE1 andE2 is chosen withp ¼0.75. Consequently, these two separate paths have the highest traf ﬁc volume. We then block the central intersection Cbetweent¼250 andt ¼400. During this time, the intersection Cis unavailable and the cars have to use other paths. Therefore, the intersection D2 will have to reconﬁgure its red-light times to handle both traf ﬁc streams.Fig. 11 shows the results of the disturbance for one lane at the intersection D2. We re-used the heuristic approach from the previous scenarios, whichchose a window size ofM¼20 steps, a delay ofL¼20 and a thresholdϵ ¼10 to generate the time seriesνt.Fig. 12shows νtfor the simulation with (red) and without (blue) the disturbance. After an initial setupphase, which takes 70 steps, there is no longer a difference betweencurrently and previously chosen conﬁgurations in the undisturbed case. The conﬁguration is stable for allt>70. In the disturbed case, on the other hand, the instability of the conﬁguration is clearly visible. The start and the end of the blockade require high recon ﬁguration effort of the intersections to handle the changed trafﬁcﬂow. The effects manifest themselves as the two peaks att¼250 andt¼400. In the beginning of the simulation, and during and after the blockade, there are stillconﬁguration changes that are big enough to count as active but theygenerate no isolated peaks. For the sake of completeness, We provide theKinoshita activity factor for this simulation in Fig. 13. In this time series, the signals for the blockade are not as prominent and the setup phasecreates similar signals.
Fig. 11.The red light times at intersection D2 for the laneE2→D2.
Fig. 12.The Kinoshitaﬂuctuation variance of theﬁrst trafﬁc simulation. Red: with a blocked intersection from t¼250 tot¼400, blue: undisturbed.
Fig. 13.The Kinoshita activity factor of the ﬁrst trafﬁc simulation with a blocked intersection fromt¼250 tot¼400.M. Goller, S. Tomforde Array 11 (2021) 100069
74.4. Network of trafﬁc lights with changes in the environmentWe created this additional simulation to test the measures in a morenoisy and larger environment where a smaller part of the subsystemsexperience a direct inﬂuence from external events. The scenario simu-lates rush hours in a city street network. The traf ﬁc lights and the cars operate in the same way as in the previous scenario, but we use adifferent street network. The network represents two islands each with aManhattan-type network of sizes 3 by 5. The islands are connected withthree bridges. The connections between two intersections provide onelane for each direction (seeFig. 14).During the whole simulation, there are 250 cars driving aroundrandomly. Furthermore, three intersections on one island are designatedto be homesteads and three intersections on the other island are labelledas work places. Att¼250 a total count of 500 new cars will appearrandomly in the three homesteads and start driving towards one of thethree workplaces. Therefore, the bridges have to handle an increasingﬂow from one side to the other in the following time steps. When the newcars arrive at their work places, they are removed from the simulation. Att¼750 this is repeated but this time the new cars will go from theworkplaces towards home.Fig. 15shows the time seriesνtfor this scenario with parametersM¼ L¼15 andϵ¼2. Since the random background trafﬁc has no preferred routes, we see a more noisy time series with more peaks. The peaksoccurring aftert¼250 andt¼750 are due to the increased conﬁguration changes that are caused by the higher traf ﬁcﬂow. These peaks are still clearly visible but are not as outstanding as in the previous simulations.The other peaks are a result of the random traf ﬁc. This shows that the measure is still applicable in such an environment although its perfor-mance to identify major events is not as good as in situations with lessnoise.5. ConclusionThis article presented a step towards an integrated framework for thequantiﬁcation of runtime SASO behaviour. Based on preliminary work ona probabilistic approach to assess a degree of self-adaption and self-organisation, this article presented a method to measure the stability ofconﬁgurations of autonomous subsystems within an overall SASOconstellation. Taking the design concepts of Organic Computing andAutonomic Computing as basis, we found our approach on the interfacebetween adaption mechanism and productive system by assuming readaccess to the current conﬁgurations of the productive units. We showedthat the proposed measure building upon the Kinoshita approach can beused to identify global anomalies in the system's con ﬁguration which serve as indicators for abnormal adaptation processes. The capability toidentify such anomalies relies on the choices for the incorporated hyper-parameters.The presented approach is a step towards the overall goal of devel-oping an integrated measurement framework for a continuous runtimeanalysis of SASO system properties. Future work follows two majorresearch directions: On the one hand, we aim at an application to further,more complex scenarios of distributed SASO constellations and assess thebehaviour of the measure. This includes an evaluation of this method inreal-world applications andﬁnding more constructive methods to iden-tify suitable parameters. On the other hand, we build on-top of the in-dicators provided by the measure to establish a runtime approach tousing this information within the adaption logic, e.g., to better balancethe trade-off between possible performance gain due to adaptation de-cisions and the impact on the stability and correspondingly the users ’ acceptance.Declaration of competing interestThe authors declare that they have no known competing ﬁnancial interests or personal relationships that could have appeared to in ﬂuence the work reported in this paper.AcknowledgementsThis research is partly funded by the Deutsche For-schungsgemeinschaft (DFG, German Research Foundation) under grantTO 843/5-1 (project ‘InTURN’). The publication of this article wasﬁnancially supported by DFG within the funding programme Open Ac-cess Publizieren. The authors acknowledge the support by the DFG.References
[1] Bellman K, Botev J, Diaconescu A, Esterle L, Gruhl C, Landauer C, Lewis PR,Nelson PR, Pournaras E, Stein A, Tomforde S. Self-improving system integration:mastering continuous change. Future Generat Comput Syst 2021;117:29 –46. https://doi.org/10.1016/j.future.2020.11.019 .http://www.sciencedirect.com/sci ence/article/pii/S0167739X20330430 . [2]Calma A, Kottke D, Sick B, Tomforde S. Learning to learn: dynamic runtimeexploitation of various knowledge sources and machine learning paradigms. In:2017 IEEE 2nd international workshops on foundations and applications of self*systems; 2017. p. 109–16.
Fig. 14.The street network for the second traf ﬁc simulations. Home steads are marked with a square, work places with a triangle.
Fig. 15.The Kinoshitaﬂuctuation variance of the rush hour simulation withincreased trafﬁcﬂow starting att¼250 andt¼750.M. Goller, S. Tomforde Array 11 (2021) 100069
8[3]Rajkumar R, Lee I, Sha L, Stankovic J. Cyber-physical systems: the next computingrevolution. In: Design automation conference. IEEE; 2010. p. 731 –6. [4]Atzori L, Iera A, Morabito G. The internet of things: a survey. Comput Network2010;54(15):2787–805.[5]Kounev S, Lewis P, Bellman K, Bencomo N, Camara J, Diaconescu A, Esterle L,Geihs K, Giese H, et al. The notion of self-aware computing. In: Self-awarecomputing systems. Springer; 2017. p. 3 –16. [6]Bellman K, Tomforde S, Würtz R. Interwoven systems: self-improving systemsintegration. In: 8th IEEE int. Conf. on self-adaptive and self-organizing systemsworkshops; 2014. p. 123–7. [7]Kephart J, Chess D. The vision of autonomic computing. IEEE Computer 2003;36(1):41–50.[8]Müller-Schloer C, Tomforde S. Organic computing –techncial systems for survival in the real world, autonomic systems. Birkh €auser Verlag; 2017. [9]Weyns D, Schmerl B, Grassi V, Malek S, Mirandola R, Prehofer C, Wuttke J,Andersson J, Giese H, G €oschka K. On patterns for decentralized control in self-adaptive systems. In: Software engineering for self-adaptive systems II. Springer;2013. p. 76–107.[10]D'Angelo M, Gerasimou S, Ghahremani S, Grohmann J, Nunes I, Pournaras E,Tomforde S. On learning in collective self-adaptive systems: state of practice and a3d framework. In: 2019 IEEE/ACM 14th international symposium on softwareengineering for adaptive and self-managing systems. IEEE; 2019. p. 13 –24. [11]Krupitzer C, Roth F, VanSyckel S, Schiele G, Becker C. A survey on engineeringapproaches for self-adaptive systems. Pervasive Mob Comput 2015;17:184 –206. [12]Tomforde S, Kantert J, Müller-Schloer C, B €odelt S, Sick B. Comparing the effects of disturbances in self-adaptive systems - a generalised approach for the quanti ﬁcation of robustness. Trans. Comput. Collect. Intell. 2018;28:193 –220. [13]Tomforde S, Goller M. To adapt or not to adapt: a quanti ﬁcation technique for measuring an expected degree of self-adaptation. Computers 2020;9(1):21 . [14] M. Goller, S.Tomforde, Towards a continuous assessment of stability in (Self-)Adaptation behaviour, Proceedings of the 1st IEEE international conference onautonomic computing and self-organising systems workshops (ACSOS-W), 6thWorkshop on Self-Aware Computing (SeAC20).[15]Tomforde S, Prothmann H, Branke J, H €ahner J, Mnif M, Müller-Schloer C, Richter U, Schmeck H. Observation and control of organic systems. In: Müller-Schloer C, Schmeck H, Ungerer T, editors. Organic computing - a paradigm shift forcomplex systems, autonomic systems. Birkh €auser Verlag; 2011. p. 325–38. [16] Tomforde S, Sick B, Müller-Schloer C. Organic computing in the spotlight, CoRRabs/1701.08125.http://arxiv.org/abs/1701.08125 . [17]Tomforde S, Kantert J, Sick B. Measuring self-organisation at runtime - a
quantiﬁcation method based on divergence measures. In: Proc. of 9th int. Conf. onagents and artiﬁcial intelligence; 2017. p. 96–106. [18]Fisch D, J€anicke M, Sick B, Müller-Schloer C. Quantitative emergence –ar eﬁned approach based on divergence measures. In: IEEE int. Conf. on self-adaptive andself-organizing systems. IEEE; 2010. p. 94 –103. [19]Chan W. Interaction metric of emergent behaviours in agent simulations. In: Proc.of the winter sim. Conf.; 2011. p. 357 –68. [20]Raibulet C, Masciadri L. Metrics for the evaluation of adaptivity aspects in softwaresystems. Int. J. Adv. Softw. 2010;3(1&2):238–51.[21]Kaddoum E, Raibulet C, Georg /C19e J-P, Picard G, Gleizes M-P. Criteria for the evaluation of self-* systems. In: Pro. of ICSE works. on softw. Eng. for adaptive andself-managing sys.; 2010. p. 29–38. [22]C/C19amara J, Correia P, de Lemos R, Vieira M. Empirical resilience evaluation of anarchitecture-based self-adaptive software system. In: Pro. of 10th int. ACM sigsoftconf. on quality of softw. Architectures; 2014. p. 63 –72. [23]Gronau N. Determinants of an appropriate degree of autonomy in a cyber-physicalproduction system. In: Proc. of 6th Int. Conf. on Changeable, Agile, Recon ﬁgurable, and Virtual Production, 52; 2016. p. 1 –5. [24]Eberhardinger B, Anders G, Seebach H, Siefert F, Reif W. A research overview andevaluation of performance metrics for self-organization algorithms. In: Proc. of self-adaptive and self-organizing systems works. SASO-W ’15); 2015. p. 122–7. [25]Filieri A, Maggio M, Angelopoulos K, D ’ippolito N, Gerostathopoulos I, Hempel A, Hoffmann H, Jamshidi P, Kalyvianaki E, Klein C, Krikava F, Misailovic S,Papadopoulos A, Ray S, Shariﬂoo A, Shevtsov S, Ujma M, Vogel T. Control strategies for self-adaptive software systems. ACM Trans Autonom Adapt Syst 2017;11(4):24:1–24:31.[26]Chen T, Bahsoon R, Wang S, Yao X. To adapt or not to adapt? technical debt andlearning driven self-adaptation for managing runtime performance. In: Proc. of the2018 ACM/SPEC int. Conf. on Performance Engineering; 2018. p. 48 –55. [27]Tomforde S. From”normal”to”abnormal”: a concept for determining expected self-adaptation behaviour. In: IEEE 4th international workshops on foundations andapplications of self* systems; 2019. p. 126 –9. [28]Kinoshita T. Basic characteristics of a macroscopic measure for detecting abnormalchanges in a multiagent system. MDPI Sensors 2015;15(4):9112 –35. [29]Bishop C. Pattern recognition and machine learning. second ed. Information Scienceand Statistics, Springer; 2011 . [30]Reynolds CW. Flocks, herds and schools: a distributed behavioral model. ACMSIGGRAPH Comput. Graph. 1987;21:25 —–34. [31]Luke S, Ciofﬁ-Revilla C, Panait L, Sullivan K, Balan G, Mason. A multi-agentsimulation environment. Trans. Soc. Model. Simul. Int. 2005;82(7):517 –27. [32]Parzen E. On estimation of a probability density function and mode. Ann Math Stat1962;33:1065—–1076.[33]Mardia K, Jupp P. Directional statistics. Wiley; 1999 . [34] D. Goldberg, What every computer scientist should know about ﬂoating point arithmetic, ACM Comput Surv 23. doi:10.1145/103162.103163.[35]Prothmann H, Rochner F, Tomforde S, Branke J, Müller-Schloer C, Schmeck H.Organic control of trafﬁc lights. In: Autonomic and trusted computing, 5thinternational conference, ATC 2008, Oslo, Norway, june 23-25, 2008, proceedings;2008. p. 219–33.[36]Tomforde S, Prothmann H, Rochner F, Branke J, H €ahner J, Müller-Schloer C, Schmeck H. Decentralised progressive signal systems for organic traf ﬁc control. In: Second IEEE international conference on self-adaptive and self-organizing systems,SASO 2008, 20-24 october 2008, Venice, Italy; 2008. p. 413 –22. [37]Prothmann H, Schmeck H, Tomforde S, Lyda J, H €ahner J, Müller-Schloer C, Branke J. Decentralised route guidance in organic traf ﬁc control. In: 5th IEEE international conference on self-adaptive and self-organizing systems, SASO 2011,ann arbor, MI, USA, october 3-7, 2011; 2011. p. 219 –20.M. Goller, S. Tomforde Array 11 (2021) 100069
9