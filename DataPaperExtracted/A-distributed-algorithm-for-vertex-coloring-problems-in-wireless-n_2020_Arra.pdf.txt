A distributed algorithm for vertex coloring problems in wireless networks
Mohammadhasan Miria,*, Yousef Darmanib, Kamal Mohamedpourb, R. Lal Tummalac, Mahasweta Sarkar
c
aDepartment of ECE, Golestan University, Gorgan, Iran
bDepartment of ECE, K. N. Toosi University of Technology, Tehran, Iran
cDepartment of ECE, San Diego State University, SanDiego, USA
ARTICLE INFO
Index Terms:Bit complexityDistributed algorithmsMedia access controlTime complexityVertex coloring problemsWireless networksABSTRACT
A lot of problems in computer networks are modeled by the vertex coloring problem (VCP), the multicoloringproblem (MCP), the bandwidth coloring problem (BCP), and the bandwidth multicoloring problem (BMCP). Tosolve the VCP withΔþ1 colors, a myriad distributed algorithms have been proposed to reduce time complexity(the number of rounds), whereΔis the maximum vertex degree in the graph. Time and communication com- plexities of these algorithms are functions of nandΔ, wherenis the number of vertices in the graph. The MCP can be converted into VCP after transformation of the graph; the transformation increases the time and communi-cation complexities. However, no distributed algorithms for BCP and BMCP have been proposed in the literature.In this paper, we propose a General Distributed Vertex Coloring Algorithm (GDVCA) to solve four problems inwireless networks. In GDVCA, some (and not necessarily all) vertices assign colors to themselves and theirneighbors, which we refer to them as assigning vertices. The communication cost of GDVCA is very low; thenumber of messages transmitted by each assigning vertex is one and by the other vertices is zero. Assigningvertices assign theﬁrst available colors to uncolored vertices; moreover assigning vertices can use heuristicmethods to choose the next proper vertex for coloring. Therefore, the number of colors used by the distributedalgorithm GDVCA is signiﬁcantly low. The number of time slots required to color a graph is OðΔ
2Þand at mostn, where each round comprises several time slots.
1. IntroductionThe topology of a distributed system can be modeled by a graph andparadigms of distributed systems are represented by classical problems ingraph theory. Vertex coloring, computing a maximal independent set,ﬁnding a vertex cover, andﬁnding a maximal matching are some clas-sical problems that can be used to model numerous problems. Each so-lution to one of these problems is a building block for a lot of distributedalgorithms: resource allocation, network synchronization, routing, to-pology control, or symmetry breaking [ 1,2]. Vertex coloring and its generalizations have been used a lot in computer and telecommunicationengineering, for example to solve computer register allocation, channelassignment in cellular networks, and scheduling problems [ 3–7]. A legalðKþ1Þ-coloring of a graph assigns colorsf0;1;2;…;Kgto the vertices such that adjacent vertices do not receive the same color [ 7]. In ðKþ1Þ-coloring, main metrics are the number of colors ðKþ1Þ, time, bit, and communication complexities. In the Vertex Coloring Problem(VCP), the objective isﬁnding the minimum number of colors, which iscalled chromatic number
χ[8]. It is an NP-hard problem [3,5,9]. Ac- cording to Brook's theorem, graph Gcan be colored withΔþ1 colors, whereΔis the maximum vertex degree ofG[10].Δþ1 is a loose upper bound for
χandχcan not be approximated to any closer bound [ 11]. Tables 1 and 2show the main notations and abbreviations used in thepaper, respectively.The greedy coloring algorithm chooses the next vertex and assigns ittheﬁrst (minimum) available color [9]; theﬁrst available color for each vertexv2Vis the minimum non-negative color that has not beenassigned tov's neighbors, whereVincludes all vertices of the graph andn¼jVj. The greedy coloring algorithm can use a heuristic method tochoose the next vertex. Using heuristic methods increases the ef ﬁciency (using fewer colors). Firstﬁt, largest degree ordering, saturation degreeordering, incidence degree ordering, and their combinations are heuristicmethods that have been proposed [4,12]. The MultiColoring Problem (MCP), the Bandwidth Coloring Problem
* Corresponding author.E-mail addresses:mh.miri@gu.ac.ir(M. Miri),darmani@eetd.kntu.ac.ir(Y. Darmani),kmpour@eetd.kntu.ac.ir(K. Mohamedpour),rtummala@sdsu.edu (R.L. Tummala),msarkar2@sdsu.edu(M. Sarkar).
Contents lists available atScienceDirect
Array
journal homepage:www.elsevier.com/journals/array/2590-0056/open-access-journal
https://doi.org/10.1016/j.array.2020.100023Received 3 October 2019; Received in revised form 23 December 2019; Accepted 5 March 2020Available online 12 March 20202590-0056/©2020 The Authors. Published by Elsevier Inc. This is an open access article under the CC BY license ( http://creativecommons.org/licenses/by/4.0/ ).Array 6 (2020) 100023(BCP), and the Bandwidth MultiColoring Problem (BMCP) are general-izations of the VCP. They model more complex situations than VCP [ 13]. MCP can be used to schedule jobs with different time requirements [ 9, 14]. BCP and BMCP are notable for their applications in the area offrequency assignment in mobile networks [ 15–17]. In MCP and BMCP problems, the number of colors required by a vertex may be more thanone; in BCP and BMCP problems, the absolute difference between colorsassigned to two adjacent vertices may be required to be greater than one.In MCP, BCP, and BMCP, the objective is to ﬁnd the minimum number of colors. MCP, BCP, and BMCP are NP-hard because they generalize theVCP [13,14,17,18]. Various metaheuristic algorithms such as tabu searchalgorithms [9,17–19], evolutionary approach [13,14,20], constraint programming approaches [16], local search, simulated annealing, andhybrid algorithms have been proposed to solve these problems.The greedy, heuristic, or metaheuristic methods presented for thefour coloring problems are centralized algorithms. Centralized vertexcoloring algorithms may not be applicable in a distributed system,because one node (vertex) must have knowledge of the system (graph). Itrequires determining that vertex and all other vertices give it their in-formation. The coloring is done just by the vertex; coloring is donesequentially and not in parallel. Finally, the colors assigned by the vertexmust be informed to all other vertices. Therefore, using centralized col-oring requires lots of message exchanges (send and receive). Thus, it maynot be feasible in distributed wireless systems.A kind of Distributed Vertex Coloring Algorithm (DVCA) for VCP, inthe distributed LOCAL model, has been proposed and studied for fourdecades. MCP can be converted into VCP after transformation of thegraph [17,19–21]bib21. However, as it will be described later, thetransformation introduces extra vertices and edges. Therefore, usingDVCA for the MCP may not be feasible. To the best of our knowledge, nodistributed algorithms have been proposed for BCP and BMCP.In the standard LOCAL model, time is divided into synchronousrounds. In each round, every vertex of the graph sends a single message toeach of its neighbors, receives the messages sent to it by its neighbors,and performs an (unbounded) amount of local computations [ 7,8]. The time complexity of an algorithm is measured by the total number ofrounds [6,7,22]. As it can be seen inTable 3, time complexities of pro- posed algorithms are functions ofΔandn; the number of colors isΔþ1, OðΔÞ,o rOðΔ2Þ; and there is a tradeoff between the number of colors andtime complexity [23]. In many problems modeled by the VCP, the ef ﬁ- ciency is inversely proportional to the number of colors. Therefore, ourfocus is onðΔþ1Þ-coloring; it is also the most common in related work[6–8,10,24].Proposed distributed algorithms (the DVCA [ 1–4,6,7,11,15,25–31]o r other algorithms [24,32–34]) use at leastΔþ1 colors. Besides, the number of messages is high because of need for synchronization,knowledge ofΔandn, and contention for colors; the number of messagestransmitted by each vertex only for coloring is a function of the numberof vertices. Therefore, it is necessary to propose a new kind of distributedvertex coloring algorithm that requires fewer colors and message ex-changes. In this paper, we present a General Distributed Vertex ColoringAlgorithm (GDVCA) to solve the four problems. The main advantages ofGDVCA over DVCA, the most common algorithms for VCP [ 24], are the following:/C15The initial overhead of GDVCA is less than DVCA. It does not requiresynchronization nor the knowledge ofΔandn.They may require time and message exchange more than coloring itself;/C15In DVCA algorithms, each vertexvrandomly chooses its color from setf0;1;…;dðvÞgorf0;1;…;Δg, whered
ðvÞisv's degree. But in GDVCA, some (and not necessarily all) vertices assign colors to themselves andtheir neighbors, which we refer to them as assigning vertices. Eachassigning vertex assigns theﬁrst available color to itself and itsneighbors. Assigning vertices can also use heuristic methods. There-fore, GDVCA reduces the number of colors and increases theefﬁciency;/C15While DVCA cannot be extended to solve BCP or BMCP, and there areno other distributed algorithms for these problems, GDVCA solvesthese problems in a distributed manner without increasing time andcommunication complexities. In other words, time and communica-tion complexities of GDVCA are independent of the number andweights of vertices and edges' weights;/C15Communication costs usually outweigh the costs for (local) compu-tation [30]. Message exchange includes composing a frame, listen tothe channel before transmission, transmission, listen to the channeland receive a frame, and decomposing a frame. It usually consumestime and energy more than computations [ 35,36]. In GDVCA, theTable 1Main notations.
u vertex v vertex G graph V set ofGvertices E set ofGedges TðGÞ transformed graph ofG V' set of TðGÞvertices E' set of TðGÞedges VðvÞ set includesvand its adjacent vertices GðvÞ graph induced byVðvÞfromG EðvÞ set ofGðvÞedges wðvÞ weight ofv wðu;vÞ weight of edgeðu;vÞ dðvÞ degree ofv Δ maximum vertex degree inG Δ' maximum vertex degree in TðGÞ n number ofGvertices n' number of
TðGÞvertices
χ chromatic number ofG UCV set of uncolored vertices cðvÞ set ofv's colors CðVðvÞÞ colors assigned toVðvÞvertices H length of message overhead in bit
Table 2Main abbreviations.
BS Base StationVCP Vertex Coloring ProblemMCP MultiColoring ProblemBCP Bandwidth Coloring ProblemBMCP Bandwidth MultiColoring ProblemDVCA Distributed Vertex Coloring AlgorithmGDVCA General Distributed Vertex Coloring AlgorithmCMSG Coloring MeSsaGeNH Neighbors HeadCSMA Carrier Sense Multiple AccessTable 3An overview on time complexities of DVCA.
Time complexity Number of colors2
Oðﬃﬃﬃﬃﬃﬃﬃ
lognp
Þlogn[39] DET Δþ1OðﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃΔlogΔplog
*Δþlog*nÞ[6] DET Δþ1 OðﬃﬃﬃﬃΔplog
2:5Δþlog*nÞ[28] DET Δþ1 OðΔ
3=4logΔþlog*nÞ[27] DET Δþ1 OðΔ
2þlog*nÞ[26] DET Δþ1 OðΔlognÞ[26] DET Δþ1 OðﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃlogΔpÞþ2
Oðﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
loglognp
Þ[7] Δþ1OðlogΔÞþ2
Oðﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
loglognp
Þ[23] Δþ1OðlogΔþﬃﬃﬃﬃﬃﬃﬃﬃﬃlognpÞ[30] Δþ1 OðlognÞ[41] Δþ1 2
Oðﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
loglognp
Þ[23] OðΔÞ OðloglognÞ[30] OðΔþlognÞ Oðlog
*nÞ[38] OðΔ2Þmin8<:O0@ðlogΔÞ
1312logn1A;2
OðlogΔþﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
loglognp
Þ9=;[10]Δ/C0ﬃﬃﬃﬃΔpþ3M. Miri et al. Array 6 (2020) 100023
2number of messages transmitted by each vertex is at most one(compared toOðn;ΔÞfor VCP, whereOðn;ΔÞis a general form for time complexity or communication complexity of DVCA, please refertoTable 3);/C15Time complexity of GDVCA is a function of only Δand notn, unlike DVCA (please refer toTable 3). Therefore, when the maximumnumber of neighbors isﬁnite and the number of vertices approachesinﬁnity, which is very common in computer networks, coloring usingGDVCA takes aﬁnite time.In summery, the efﬁciency of GDVCA is high. Moreover, thecommunication cost and thereby power consumption of GDVCA is verylow, which is among the most important objective in wireless networks[36]. The rest of this paper is organized as follows. The next section re-views related works on vertex coloring algorithms. In Section 3, the four coloring problems are deﬁned and formulated. GDVCA algorithm isdescribed in Section4. Section5shows the efﬁcacy of GDVCA over 33 benchmark instances for the four vertex coloring problems. The paperconcludes with Section6.2. Related worksThe distributedðΔþ1Þ-coloring problem is among the most impor-tant studied problems in distributed computing since 1980's [ 7,23,37]. Most of the proposed algorithms are based on LOCAL model. In LOCALmodel, all vertices start executing an algorithm simultaneously; coloringis composed of some rounds. In each round, each uncolored vertexchooses a color and informs its neighbors using a message, receivesmessages from its neighbors, and performs (unbounded) local compu-tations [30]. Then, at the end of each round, the vertex takes the color ifits neighbors have not chosen that color; otherwise there is a competitionand the vertex may lose the color. Since communication costs usuallyoutweigh the costs for (local) computation, the time complexity of analgorithm is measured in the number of rounds until every vertex com-mits its color.Table 3summarizes the time complexities of several proposed algo-rithms for this problem. They are deterministic or randomized. Deter-ministic algorithms have no probability of failure (staying uncolored);they have been marked as DET in the table. For the deterministicapproach, several algorithms with running time of OðfðΔ
Þþlog*nÞhave been developed [7]. The latter term is necessary as [38] showed that 3-coloring a ring requiresΩðlognÞrounds. Goldberg et al. presented twoðΔþ1Þ-coloring algorithms with running times OðΔ
2þlog*nÞand OðΔlognÞ[26]. Barenboimﬁrst gave an algorithm running inOðΔ
3=4logΔþlog*nÞrounds [27]. Then, the bound was improved toOðﬃﬃﬃﬃΔplog
2:5Δþlog*nÞby Fraigniaud et al. [28]. After that, Barenboim et al. obtained aðΔþ1Þ-coloring withinOðﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃΔlogΔplog
*Δþlog*nÞtime [6]. Recently, Kuhn has presented an algorithm that runs in2
Oðﬃﬃﬃﬃﬃﬃﬃﬃ
lognp
Þlogn[39].In randomized coloring a graph is colored with high probability /C181/C0
1nc/C19, wherec>0 is an arbitrary constant. It is seen that randomized al-gorithms are exponentially faster (in terms of norΔ) than their deter- ministic counterparts; moreover, they are usually simpler to analyze andimplement [40]. Therefore, our focus will be on randomized coloringalgorithms. The randomized approach can be traced back to the OðlognÞ rounds [29]. TheOðlognÞupper bound improved when Schneider andWattenhofer gave an algorithm of running time OðlogΔþﬃﬃﬃﬃﬃﬃﬃﬃﬃlognpÞ[30]. Then, Barenboim et al. improved the dependence on nto 2
Oðﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
loglognp
Þby agraph shattering technique [31]. [7] gives an algorithm that runs in OðﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃlogΔpÞþ2Oðﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
loglognp
Þtime.[1] decreases the bit complexity of randomized distributed algo-rithms fromOðlog
2ðnÞÞtoOðlogðnÞÞ. But the number of colors used by thealgorithm may be more thanΔþ1. [2] has proposed an algorithm that can be used along with the proposed algorithm by Ref. [ 1] to limit the number of colors toΔþ1. The bit complexity of the proposed algorithmisOðlogðΔÞlogðnÞÞ.[32,33], and [34] state that those fast algorithms, mentioned above,are not applicable in an unstructured radio network model, as theypresume an established and powerful communication framework. Theypresent randomized coloring algorithms for the unstructured radionetwork model, a model comprising autonomous nodes, asynchronouswake-up, and an unknown but geometric network topology. The algo-rithm presented by Ref. [32] requiresOðΔlognÞtime and usesOðΔÞ colors in a unit disk graph; the algorithm requires a linear bound on nand Δ. In a unit disk graph, vertices are points in the plane; two vertices areneighbors if and only if their Euclidean distance is at most 1. [ 33,34] generalize the network topology from unit disk graph tobounded-independence graph; bounded-independence graphs restrict forany vertex the maximum size of a set of independent vertices in itsneighborhood. [34] also improves the results of [32,33]. It reduces the time complexity; its time complexity is OðΔþlogΔlognÞgiven an esti- mate ofnandΔ, andOðΔ
þlog2nÞwithout any knowledge ofΔ. More- over, its proposed algorithm requires onlyΔþ1 colors. Parter proposed a randomizedðΔþ1Þvertex coloring algorithm that works inOðlogðlogΔÞlog
*ΔÞ-rounds in the congested clique model. In thecongested clique model, each node can send OðlognÞbits of information to any node in the network [24].In summary, the time complexity of a randomized DVCA is Oðn;ΔÞ and:/C15the number of messages transmitted by each vertex is Oðn;ΔÞ. Considering LOCAL model deﬁnition, it is straightforward;/C15the number of bits transmitted by each vertex is OðlogΔÞOðn;ΔÞ. Each message includes taken or chosen color by its sender, Δþ1 color is used, and the number of messages is Oðn;ΔÞ; /C15the number of time slots isOðΔÞOðn;ΔÞ. DVCA is composed of some rounds, and each round is composed of some time slots; in a time slota vertex can broadcast its chosen or taken color. In each round, allvertices may need to broadcast their chosen colors and then takencolors. The minimum number of time slots in a round, required forbroadcasting chosen and taken colors, is 2
χðGÞ. Sinceﬁnding χðGÞis NP-hard, it is considered 2ðΔþ1Þ. In DVCA withOðn;ΔÞrounds and OðΔÞtime slots in each round, the number of time slots required tocolor all graph isOðΔÞOðn;ΔÞ.We use these complexities for comparison. By using the DVCA forMCP, the complexities are also the same but the number of vertices ðn'Þ and the maximum vertex degreeðΔ'Þin the transformed graph are ob- tained by using equations(2) and (5), respectively.3. Vertex coloring problemsIn this section, the four coloring problems are de ﬁned. Then it is explained how MCP and BMCP problems can be converted into VCP andBCP, respectively. Atﬁrst, we deﬁne the most generalized problem (BMCP) as following:Given an undirected graphG¼ðV;EÞwith vertex setV, edge setE⊂ V/C2V, vertex weightwðvÞfor each vertexv2V, and edge weightwðu;vÞ for eachðu;vÞ2E, a legalð
Kþ1Þ-bandwidth multicoloring is assigningM. Miri et al. Array 6 (2020) 100023
3cðvÞcolors tovsuch thatcðvÞ⊂f0;1;…;Kg;jcðvÞj ¼wðvÞ, and the absolute difference between any two colors in cðuÞandcðvÞof an edgeðu;vÞ2Eis at leastwðu;vÞ, that isjcðuÞ/C0cðvÞj /C21wðu;vÞ;8ðu;vÞ2E: (1) MCP is a special case of BMCP where wðu;vÞ¼1;8ðu;vÞ2E; BCP is aspecial case of BMCP wherewðvÞ¼1;8v2V. VCP is a special case of BMCP wherewðu;vÞ¼1;8ðu;vÞ2EandwðvÞ¼1;8v2V. As it was said before, MCP can be converted into VCP after trans-formation of the graph. Transformation of graph Ginto graphTðGÞis done as follows. For each vertexvinG, there is a clique with sizewðvÞin TðGÞ; where a clique is a complete subgraph. Any vertex of a clique isconnected to all vertices of another clique in TðGÞif and only if the two corresponding vertices inGare adjacent [20]. The number of vertices and edges of the transformed graph are obtained by equations (2) and (3), respectively [20]:n'¼jV'j¼X
v2VwðvÞ (2)jE'j¼X
v2VwðvÞðwðvÞ/C01Þ2þX
ðu;vÞ2EwðuÞwðvÞ(3)In transformation, eachvinGis converted to a clique inTðGÞ. The degree ofv', any vertex in the clique corresponded to v, is obtained by equation(4). The maximum vertex degree in graph TðGÞis obtained by using equation(5). Furthermore, for each vertexvinG,w ed eﬁne new metricd'ðvÞas (6).dðv'Þ¼X
u2VðvÞwðuÞ/C01 (4)Δ'¼max
v'2TðGÞfdðv'Þg¼max v2V(X
u2VðvÞwðuÞ)/C01(5)d'ðvÞ¼dðv'Þ (6) BMCP problem can be converted into BCP and solved by using acentralized algorithm after the transformation of the graph [ 17,19–21].4. General Distributed Vertex Coloring AlgorithmIn GDVCA algorithm, some (and not necessarily all) vertices assigncolors to themselves and their neighbors. Colors assignment must bedeclared by broadcasting Coloring MeSsaGe (CMSG). GDVCA consists oftwo parts. Part one determines which vertices and when must assigncolors, whichFig. 1shows it. Part two is related to how a vertex assignscolor(s) to itself and its neighbors, which Algorithm 1shows it. Before coloring, each vertex has broadcasted its ID and neighbors' IDsand received neighbors’information. Each vertexv2Vcomposes graph GðvÞinduced byVðvÞ, whereVðvÞincludesvand its neighbors. Vertices may not start coloring at the same time because they are not synchro-nized. Coloring duration consists of some time slots. The upper bound forthe number of time slots,“execution time”inFig. 1, is estimated using Theorem 1and simulation results, which will be described later. Eachvertex has a unique ID. ID can be the unique MAC address of the nodethat the vertex represents or the coordinator node (BS or hub) if thevertex represents a network.Nodes (vertices) access to the channel using slotted Carrier SenseMultiple Access (CSMA). CSMA is used to determine the availability ofthe channel before a node begins its transmission. The channel is checkedﬁrst whether it is busy (channel is being accessed by other nodes) or it isin idle state (channel is available) before transmission [ 42]. Every time slot is composed of 2 parts. Part one consists of Rmini-slots. A vertex before broadcasting CMSG, chooses one mini-slot from f0;1;…;R/C01g and senses the channel during the chosen mini-slot. If the channel is idle,
it broadcasts the message; otherwise it waits for the next slot. The lengthof part two equals the maximum length of CMSG. In order to avoidchoosing the same mini-slot by two or more adjacent vertices, verticesmust choose a mini-slot randomly. On the other hand, the recipients ofCMSG require to know the beginning of the next slot. It can be possible ifthey know the chosen mini-slot by the sender. To do this, the number ofFig. 1.How vertexvdetermines whether it must broadcast CMSG.M. Miri et al. Array 6 (2020) 100023
4mini-slot chosen by a sender vertex is set to r¼ðIDmodRÞ, where ID is the identiﬁer of the sender vertex andmodis the remainder ofID/C4R. CSMA protocols suffer from“hidden node problem”and“exposed node problem”[43]. Hidden node problem occurs when a node issending frames without realizing the presence of another node that iscurrently transmitting frames to the same destination. Transmission fromeither one of these hidden nodes may result in collision at the receiver.This will lead to increases in message loss ratio and execution time of acoloring algorithm. Exposed node problem occurs when a node ismistakenly restrained from transmitting frame due to overhearingtransmission from neighbors fearing that collisions might happen [ 42]. This unnecessary prevention from transmitting frames lead to increase inexecution time of a coloring algorithm. In GDVCA design, these twoproblems have been considered and solved. In GDVCA, when a vertexbroadcasts a CMSG, all its neighbors require to receive that and theyshould not transmit at that time. In other words, there is no exposed nodeproblem in GDVCA. To solve hidden node problem, every vertex must beable to sense the channel as busy when at least one of its neighbors orneighbor of neighbors is transmitting [ 44]. Thus, the value of“energy detection threshold”is determined such that the range of busy detectionis twice of the range of reception. The range of reception is the distancethat a vertex can receive a CMSG correctly, and the range of busydetection is the distance that a vertex reports the channel as busy if thepower of the received signal is above of the energy detection threshold.In other words, vertexvcan receive from vertices with distance 1 anddetect energy when vertices with distance 1 or 2 are transmitting CMSG.At the beginning of coloring, each vertex determines wether it is aNeighbors Head (NH). NH vertices try to start coloring. Between any twoadjacent vertices, at most one of them is an NH. NH determination de-pends on the problem. For the VCP and BCP problems, an NH vertex hasthe maximum degree among its neighbors; in other words, vis an NH if dðvÞ¼max
u2VðvÞfdðuÞg. If some neighbors of the vertex also have themaximum degree, then the vertex is an NH if its ID is greater than the IDsof those neighbors. For the MCP and BMCP, vis an NH ifd'ðvÞ¼ max
u2VðvÞfd'ðuÞg, whered'ðvÞis obtained by equation(6). If somev's neighbors have the maximum value too; then the degrees, weights, andIDs of those neighbors are considered to determine wether vis an NH, respectively. The weights are considered only if the degrees are also thesame, and so on.In theﬁrst time slot, an NH vertex tries to access the channel andbroadcast CMSG; a non-NH vertex listens to the channel for the wholetime slot. If a non-NH vertex senses the channel as busy, it waits toreceive CMSG. Otherwise, it tries to access the channel and broadcastCMSG at the second time slot. In any situation, if a vertex wants tobroadcast CMSG and senses the channel as busy, it waits for the next timeslot. If a vertex still (at the beginning of the next time slot) has tobroadcast CMSG, it broadcasts CMSG if the channel is idle. The vertexcontinues this procedure until the channel becomes idle and it broadcastsCMSG.After vertexvreceived a CMSG, if it has not broadcasted CMSG, itmust broadcast a CMSG in any of the following two cases:/C15some ofv's neighbors have not been assigned colors yet;/C15if allv's neighbors have been assigned colors, vhas been colored by more than one vertex, and colors assigned by different neighbors arenot the same, thenvmust assign itself the minimum availablecolor(s). If there is at lease one neighbor that has not broadcastedCMSG yet,vmust broadcast CMSG and inform its neighbors of colorsassigned to itself.CMSG includes aﬁeld that shows the time slot number of its sender. Ifa vertex has not received any CMSG yet, it sets this ﬁeld to zero. Otherwise, it uses the sender's timing; if a vertex received more than oneCMSG with different timings, it would use the timing of the last CMSG'ssender. A recipient vertex knows the beginning of the received messageand the chosen mini slot by its sender; so it knows the beginning of thecurrent time slot and its number. The length of time slot is constant, sothe recipient knows the end of the current time slot and the end of thealgorithm. Vertexvcanﬁnish the coloring algorithm if:Algorithm 1colors assignment toVðvÞby vertexvusing GDVCA
/C15it broadcasted CMSG; or/C15it has received CMSG from all its neighbors and it has obtained wðvÞ allowed colors.Algorithm 1shows how assigning vertexvassigns colors toVðvÞ.A tFig. 2.Coloring a graph using GDVCA.M. Miri et al. Array 6 (2020) 100023
5ﬁrst, it determines the UnColored Vertices (the set UCV⊂VðvÞ, lines 2–10). Ifvhas not received CMSG yet, thenUCV¼VðvÞ.I fvhas been assigned different color(s) sets by neighbors, vmust be included inUCV. At the next step (lines 11–17),vassigns color(s) toVðvÞvertices.vassigns to eachu2ðVðvÞ/C0UCVÞwhatuhas been assigned before. To color othervertices (UCV),vusesAlgorithm 2, 3, 4, or 5for the VCP, MCP, BCP, or BMCP problem, respectively. In other words, Algorithm 1is the common and initial part ofAlgorithm 2, 3, 4, or 5to solve the VCP, MCP, BCP, or BMCP problem, respectively. Any algorithm or method that has beensuggested to colorGcentrally in related work, can be used by vto color UCVbased onv's information. In this paper, the greedy algorithm alongwith a heuristic method is used to solve the four vertex coloring problemsbecause heuristic methods are easy to implement and fast [ 13,14,18,45]. The heuristic method for each problem is described later.Fig. 2shows how the graph inFig. 2(a) is colored using GDVCA; the problem is the VCP. According to NH deﬁnition, verticesv;w;orymay be an NH and the other vertices can not. If the
w's ID is greater than bothv andy's IDs, thenwis the only NH in the graph. Otherwise, v;y, or both are NHs. We consider the casewis the only NH; consequently it starts col-oring. The graph induced bywand its neighbors (VðwÞ) has been shown inFig. 2(b)wcolors it with 3 colors and informs its neighbors by a CMSG.After that,vandytry to access the channel and broadcast a CMSG;because they have received a CMSG and they have uncolored neighbors.Ifvaccesses to the channel sooner, it colors the induced graph GðvÞas Fig. 2(c). Then,zandytry to access the channel. Ifzaccesses to the channel sooner, colors assignment is as Fig. 2(d). Vertexyhas been colored by two vertices and the colors are the same, so ydoes nothing. If two different colors were assigned to it, ywould assign itself the mini- mum color that has not been assigned to its neighbors.By deﬁnition, communication/bit complexity of a distributed algo-rithm is the total number of messages/bits transmitted during its execu-tion. [46] states that the cost of a distributed algorithm is both time andbits. Bit complexity is considered as aﬁner measure of communication complexity [1,2]. It has been used as a measuring cost of coloring algo-rithms by related work. One important matter that is not considered bythem is that any communication between two or more nodes in adistributed wireless network must be done by physical frames. A physicalframe includes header, payload (bits related to colors information), andtrailer. The overhead (header and trailer) can be even more than thepayload in bit. For example in IEEE 802.11n (WiFi), the overhead ofphysical and MAC layers for“management frame”is 376 bits [47]. Related work, for example [2], considers only payload that its length is log ðΔþ1Þ bits. In case wireless network is based on IEEE 802.11n and Δ<
2376,t h e length of payload is less than the overhead. Thus, the ﬁrst and the most important step to reduce the number of bits is to reduce the number ofmessages, and the second step is to reduce the number and length of ﬁelds that must be present in the MAC frame body. GDVCA does the ﬁrst step excellently and each vertex broadcasts at most one CMSG. The number ofbits transmitted by a vertex is zero if it is not an assigning vertex. Other-wise, it is the length of the message transmitted by the assigning vertex.A CMSG transmitted by vertexvshould include colors assigned to all(VðvÞ) or some vertices (UCV). If CMSG includes colors assigned to VðvÞ vertices, there are no need for extraﬁelds to tell which color(s) has been assigned to which neighbor because v's neighbors knowv's neighbors and their sequence. If a CMSG includes colors assigned to UCVvertices,ﬁelds are needed to show which color(s) assigned to which neighbor. vhasdðvÞ neighbors and its neighbors know the sequence. Therefore the length ofeachﬁeld, which shows the position in the sequence, is log ðdðvÞþ1Þ.A 1-bitﬁeld is required to show which case is used. The smaller case in bit isused. The number of bits transmitted by vis at mostHþmin/C26n
1*logðn 2Þ; P
u2UCVðlogðdðvÞþ1ÞþwðuÞ*logðn 3ÞÞ/C27, whereHis the length of theoverhead in bit. The overhead includes physical and MAC headers andtrailer, theﬁeld that tells the number of bits used for each color, the 1-bitﬁeld that shows which case is used, and the number of current time slot.The two arguments of theminfunction are related to theﬁrst and second cases;n1is the sum of colors that vertices VðvÞrequire;n 2is the maximum color that is used for coloring VðvÞ;n
3is the maximum color that is used for coloringUCV; andwðuÞis the number of colors required by vertexu. The values ofn
1;n2;andn 3for each coloring problem will be calculated in the corresponding section. Time complexity of GDVCA isindependent of the problem and determined by the following theorem.Theorem 1.The number of time slots required to color n-vertex graph G isOðΔ
2Þand at most n.Proof.Each vertex is assigned color(s)by itself or its neighbors using CMSG. NH and non-NH vertices broadcast CMSG at the ﬁrst and second time slots, respectively;unless they sense the channel as busy.In case of busy,an NH tries to broadcast CMSG at the next slot and non-NH waits to receive a CMSG andbroadcasts after that;unless they do not need to broadcast CMSG ;they do not need to broadcast if they and all their neighbors have been properly colored . The number of neighbors and neighbors of neighbors for each vertex is at mostΔandΔ
2,respectively.Therefore,each vertex receives or broadcasts a CMSGin OðΔ
2Þtime slots.In other words,the graph is colored in OðΔ2Þtime slots.On the other hand,the number of neighbors plus the number of neighbors ofneighbors is less than n.Consequently,the theorem is proved. In many applications, the maximum number of neighbors ðΔÞis limited. In other words, the number of interfering/con ﬂicting nodes for each node is limited. According toTheorem 1, coloring the graph of this network using GDVCA takes aﬁnite time even if the number of verticesapproached inﬁnity. Moreover, coloring Special graphs using GDVCA hasinteresting features.Deﬁnition 1. If there is at least one vertex in graph Gthat is connected to all other vertices, thenGis a Special graph.For examples, complete, wheel, and windmill graphs are Specialgraphs.Theorem 2.If G is a Special graph,the numbers of time slots and messages required to color G are one.Moreover,coloring can be done with the minimum number of colors.Proof.If there is only one vertex(v)that is connected to all other vertices, then and according to NH deﬁnition,v is the only NH in the graph.If there are some vertices that are connected to all other vertices ,then only one of them is an NH(v),because from any two adjacent vertices,at most one of them is an NH.The NH is connected to all other vertices .After it broadcasts CMSG,all vertices of G are assigned colors,and there is no need any vertex to broadcastCMSG.Moreover,coloring G by the NH is similar to a centralized algorithmand can be done with the minimum number of colors .4.1. Vertex coloring problemIn this subsection, it is described how assigning vertex vcolors the uncolored set
UCVand the problem is the VCP. Then, the upper bound ofcolors and bit complexity of the algorithm are calculated. The number ofmessages transmitted by each vertex is at most one and the number oftime slots isOðΔ
2Þand at mostn, for the four problems.Algorithm 2shows howvassigns colors to the uncolored setUCV;o r howvimplements line 17 ofAlgorithm 1.A tﬁrst,vﬁnds the next vertex for color assignment using a heuristic method. The heuristic method isthe combination of saturation degree, largest-degree ﬁrst, and largest-ID ﬁrst; it has been proposed by Ref. [4,45]. Saturation degree of a vertex is the number of different colors assigned to the vertex's neighbors. vdoes not have complete knowledge of colors assigned to the neighbors of itsneighbors, so it computes the saturation degree of its neighbors based onM. Miri et al. Array 6 (2020) 100023
6what it has. If two vertices have the maximum saturation degree, theirdegrees and IDs are considered, respectively. ID is used only if their de-grees are also the same.
Algorithm 2colors assignment toUCVvertices by vertexvfor the VCP problem
Theorem 3.The number of colors used by GDVCA to assign exactly onecolor to each vertex of G, is at mostΔþ1. Proof.In GDVCA,some vertices assign colors using the greedy algorithm(Algorithm 2).If v has not received CMSG,according to Brook’s theorem it can color GðvÞwith at mostΔþ1colors.Because the number of vertices in GðvÞis dðvÞþ1and dðvÞ/C20Δ.Otherwise,in which k vertices of GðvÞhave been colored with at most k colors,v can color remaining verticesðUCVÞwith at mostΔþ1/C0k colors.Theorem 4.The number of bits transmitted by assigning vertex v is at mostHþminfðdðvÞþ1Þ*logðΔþ1Þ;jUCVjlogððdðvÞþ1ÞðΔð
vÞþ1ÞÞg, where ΔðvÞ¼max
u2VðvÞfdðuÞg /C20Δ.Proof.Considering the explanations for obtaining the bit complexity ofGDVCA inSection4,we require to prove that n
1¼dðvÞþ1;n 2¼Δþ1; andn
3¼ΔðvÞþ1.In the VCP problem,wðuÞ¼18u2V,so the sum of colors needed by VðvÞis n
1¼dðvÞþ1.Based onTheorem 3,the maximum number of colors is at most n
2¼Δþ1.Vertex v can assign to8u2VðvÞa color less than dðuÞþ1independent of the colors assigned to u ’s neighbors,so the maximum color used to color UCV is less than n
3¼max u2VðvÞfdðuÞg þ 1¼ΔðvÞþ1.4.2. Multicoloring problemTo solve MCP using DVCA, time, communication, and bit complex-ities are functions ofΔ' andn' which are obtained by equations(2) and (5), respectively. The values ofn' andΔ' can be very large. Therefore, using DVCA for the MCP is not a good solution because the mentioneddisadvantages of DVCA are directly proportional to the number ofvertices and the maximum vertex degree of the graph. But the com-plexities of GDVCA are low and coloring is done as following.Algorithm 3shows howvassigns colors toUCV. At the beginning of the algorithm,vselects the next vertex inUCVusing the heuristic method (line 2 of the algorithm). Then,vassigns the minimum allowed colors tothe chosen vertex.Algorithm 3colors assignment toUCVvertices by vertexvfor the MCP problem
Theorem 5.To solve MCP using GDVCA, the number of colors is at mostΔ'þ1.Proof.v assigns colors by usingAlgorithm 3.If v has not received CMSG yet,it can color GðvÞwith colors less than d'ðvÞþ1and d'ðvÞ/C20Δ'.The maximum color inf0;1;…;d'ðvÞgis used when each color is assigned just toone vertex.If v has received CMSG before,VðvÞ/C0UCV vertices have been colored with at mostP
u2ðVðvÞ/C0UCVÞwðuÞcolors.v can color remaining vertices withΔ'þ1/C0P
u2ðVðvÞ/C0UCVÞwðuÞcolors.■Theorem 6.The number of bits transmitted by assigning vertex v is at mostHþmin/C26ðd'ðvÞþ1Þ*logðΔ'þ1Þ;jUCVj*logðdðvÞþ1ÞþlogðΔ'ðvÞ-þ1Þ*P
u2UCVwðuÞ/C27, whereΔ'ðvÞ¼max u2VðvÞfd'ðuÞg /C20Δ'.Proof.Considering the explanations for obtaining the bit complexity ofGDVCA inSection4,we require to prove that n
1¼d'ðvÞþ1;n 2¼Δ'þ1; andn
3¼Δ'ðvÞþ1.In the MCP problem,the sum of colors needed by VðvÞ is n
1¼P
u2VðvÞwðuÞ¼d'ðvÞþ1.Based onTheorem 5,the maximum number of colors is at most n
2¼Δ'þ1.Vertex v can assign to8u2VðvÞcolors less than d'ðuÞþ1,independent of the colors assigned to u ’s neighbors,so the maximum color used to color UCV is less than n
3¼max u2VðvÞfd'ðuÞg þ1¼ Δ'ðvÞþ1.The costs of two algorithms DVCA and GDVCA are respectively:/C15the numbers of messages transmitted by each vertex are Oðn';Δ'Þand at most 1. For a graph, they aren'Oðn';Δ'Þand at mostn; /C15the numbers of bits transmitted by each vertex are OðlogΔ'ÞOðn';Δ'Þ andOðΔ'logΔ'Þ;/C15the numbers of time slots areOðΔ'ÞOðn';Δ'ÞandOðΔ
2Þ.4.3. Bandwidth coloring problemTo solve BCP centrally, a series of BCP problems with a given numberof colorskare solved [13,17,21]bib21. Several algorithms have been proposed to solve thek-BCP problem, for example learning-based hybridsearch [21], combination of tabu search approach with a specializedcrossover operator [13], and multistart iterated tabu search [ 17]. The initial number of colorskmust be large enough. The initialkcan equal P
ðu;vÞ2Ewðu;vÞþ1 but this upper bound is very weak [ 16]. Therefore,kis obtained by using fast greedy heuristic algorithms [ 13,14,16]bib16.A sM. Miri et al. Array 6 (2020) 100023
7soon as a legalk-BCP is found, they decreasektok/C01 and solve the new k-BCP problem. This process is repeated until no legal k-coloring can be found and the result is the lastkfor which a legalk-coloring is reached [13,17,19,21]bib21. GDVCA can be used as a distributed solution for theBCP. Any presented algorithm for BCP to color Gcan be used byvto color GðvÞ.Assigning vertexvcolorsUCVusingAlgorithm 4. In the beginning, it chooses the next vertex for color assignment based on their scores. [ 13] proposes equation(7)to obtain thev's score; it is a function of the numberof different colors assigned to its adjacent vertices and the distance to berespected between the color of the vertex and the colors of its neighbors.If two vertices have the maximum score, their degrees and IDs areconsidered. Then, it assigns the minimum allowed color to the chosenvertex.sðvÞ¼X
h¼1;…;kmax
u2ðVðvÞ/C0fvgÞandcðuÞ¼hwðu;vÞ(7)Algorithm 4colors assignment toUCVby vertexvfor the BCP problem
Theorem 7.To solve BCP using GDVCA,the number of colors is at mostP
ðu;vÞ2Ewðu;vÞþ1.Proof.If v has not received CMSG yet,it assigns color0to theﬁrst vertex of GðvÞ;color k to the second vertex,where k¼0if the two vertices are not connected otherwise k’s value is the weight of the edge between the two verticesand so on;ﬁnally,colorP
ðu;vÞ2EðvÞwðu;vÞto the last vertex,where EðvÞincludes GðvÞ’s edges.Otherwise,in which assigning vertex v has received CMSGbefore,each vertex of set VðvÞ/C0UCV has been colored with colorP
ðu;vÞ2E 1wðu; vÞ,where E
1⊂E and no edges in E 1are connected to UCV vertices.v can color UCV withP
ðu;vÞ2ðE 1[E2Þwðu;vÞcolors,where E 2⊂EðvÞand its members are connected to UCV vertices.The equationðE
1[E2Þ⊂E implies that the maximum color used by v is less than the upper bound . Theorem 8.The number of bits transmitted by assigning vertex v is at mostHþminnðdðvÞþ1Þ*log/C0P
ðu;vÞ2Ewðu;vÞþ1/C1;jUCVj*log/C0ðdðvÞþ1Þ*/C0P
ðu;vÞ2Ewðu;vÞþ1/C1/C1o.Proof.In the BCP problem,the sum of colors used by VðvÞis dðvÞþ1. Moreover,Pðu;vÞ2Ewðu;vÞþ1is an upper bound for coloring V;VðvÞ;orUCV. Therefore,the theorem is proved.4.4. Bandwidth multicoloring problemGDVCA solves the BMCP in a distributed manner in a time complexityindependent of the number and weights of vertices as follows. AssigningvertexvcolorsUCVusingAlgorithm 4. In the beginning, it chooses the next vertex for colors assignment using equation (7). If two vertices have the maximum score then theird'ð:Þ,dð:Þ, and IDs are considered. After that, it assigns the minimum allowed colors to the chosen vertex. Thefollowing lemma provides an upper bound for the number of colors usedby any centralized greedy algorithm. Theorem 9states that it is also an upper bound for the number of colors used by our proposed algorithm.Lemma 1.To solve BMCP using any centralized greedy algorithm,P
v2VwðvÞþP
ðu;vÞ2Ewðu;vÞþ1/C0n is an upper bound for the number of colors .Proof.Set V¼fv
1;v2;…;v ngdenotes the vertices,and set½a;b/C138includes colors a;aþ1;…;b.Vertex v
1is assigned½0;wðv 1Þ/C01/C138.Vertex v 2is assigned colors½0;wðv
2Þ/C01/C138if it is not connected to v 1;otherwise,v 2is assigned ½wðv
1Þþwðv 1;v2Þ/C01;wðv 1Þþwðv 2Þþwðv 1;v2Þ/C02/C138.Continuing in the same way,vertex v
ncan be assigned colors"P
u2V/C0fv ngwðuÞþP
ðu;vÞ2ðE/C0E 1Þwðu;vÞ/C0ðn/C01Þ;P
v2VwðvÞþP
ðu;vÞ2Ewðu;vÞ/C0n#,where E 1is the set of all edges that are connected to v
n.When wðuÞ¼18u2V,the BMCP is converted into BCP,and the bound P
v2VwðvÞþP
ðu;vÞ2Ewðu;vÞþ1/C0n is converted intoP
ðu;vÞ2Ewðu;vÞþ1,which is the upper bound of colors for solving BCP . Theorem 9.To solve BMCP using GDVCA,P
u2VwðuÞþP
ðu;vÞ2Ewðu;vÞþ1/C0 n is an upper bound for the number of colors . Proof.If v has not received CMSG yet,it can color GðvÞwithP
u2VðvÞwðuÞþ P
ðu;vÞ2EðvÞwðu;vÞþ1/C0jVðvÞjcolors based onLemma 1.If assigning vertex v has received CMSG before,each colored vertex in set VðvÞ/C0UCV has been colored with colors less thanP
u2V 1wðuÞþP
ðu;vÞ2E 1wðu;vÞþ1/C0jV 1j;where V 1⊂ V and does not include any vertex of UVC ,and E
1⊂E and none of edges in E 1
are connected to UCV vertices.v can color UCV vertices with colors less thanP
u2ðV 1[UCVÞwðuÞþP
ðu;vÞ2ðE 1[E2Þwðu;vÞþ1/C0jV 1[UCVj;where E 2⊂EðvÞand its members are connected to UCV vertices .The equationsðV
1[V2Þ⊂V and ðE
1[E2Þ⊂E imply that the maximum color used by v is less than the upperbound.Theorem 10.The number of bits transmitted by assigning vertex v is at mostHþminnðd'ðvÞþ1Þ*log/C0P
u2VwðuÞþP
ðu;vÞ2Ewðu;vÞþ1/C0n/C1;jUCVj*logðdðvÞþ1Þþlog/C0P
u2VwðuÞþP
ðu;vÞ2Ewðu;vÞþ1/C0n/C1*P
u2UCVwðuÞoProof.The sum of colors used by VðvÞis d'ðvÞþ1.Considering the upper bound of colors(Theorem 9),the theorem is proved.M. Miri et al. Array 6 (2020) 100023
8Algorithm 5colors assignment toUCVby vertexvfor the BMCP problem
5. Simulation results and discussionsTo evaluate GDVCA performance, we use 33 benchmark geometricinstances given by Trick. They have been used by related work to assesstheir proposed algorithms for MCP, BCP, and BMCP problems [ 9,13,14, 16,17,20,21]. These instances belong to three kinds: GEOM n, GEOMna, and GEOMnb, wherenrepresents the number of vertices in the graph. Inthese graphs, the vertices are randomly generated in a 10,000 by 10,000grid and are connected if they are close enough together. Edge weightsare inversely proportional to the distance between the correspondingvertices. The weights of vertices are uniformly randomly generatedbetween 1 and 10 for sets GEOMnand GEOMna, and between 1 and 3 for set GEOMnb. GEOMninstances are sparse and the two others are densergraphs [9,13].The aim of related work has been presenting a new metaheuristiccentralized coloring algorithm to reduce the number of colors to solve thegeneralized vertex coloring problems in an acceptable time. In theirsimulations, the metrics have been“number of colors”and“time”. The aim of our work is presenting a distributed algorithm to solve thoseproblems with low time and colors. In simulations of our work, themetrics are also“number of colors”and“time”. GDVCA is a distributed algorithm and its results must be compared toa distributed coloring algorithm. But there are no distributed algorithmsfor BCP and BMCP. Therefore, we use a centralized vertex coloring foreach problem to evaluate GDVCA efﬁciency (the number of colors). For each problem, the centralized algorithm and Algorithm 1use the greedy algorithm along with a simple heuristic method to color GandGðvÞ, respectively. The simple heuristic method for each problem wasexplained in the subsections of Section 4. The approach, used to colorG orGðvÞ, is simple and fast. For comparison, consider this example. [ 13] uses a tabu search algorithm to solve BCP and BMCP problems. At ﬁrst, it performs 20 runs of the greedy algorithm; the minimum number of colorsthat has been used is the initial number of colors k. Then the tabu search algorithm runs for many iterations to decrease k. The number of itera- tions for solving BMCP on the instance GEOM60b is 878,357,241.5.1. Simulation results of GDVCA on the VCP instancesThis subsection is dedicated to an evaluation of the GDVCA perfor-mance for the VCP using 33 VCP benchmark graphs. Table 4gives the detailed results. Columns in the table are Instance name, Δ(the number of colors used by DVCA to colorGminus one), the number of colors usedby the centralized coloring algorithm, the number of colors used byTable 4Detailed simulation results on VCP instances.
InstancenameΔ#Colors(centralcoloring)#Colors(GDVCA)#Transmittedmessages#TimeslotsGEOM20 4 3 3 6 3GEOM20a 8 6 6 7 4GEOM20b 7 5 5 8 4GEOM307 6 6 12 5GEOM30a 12 7 7 12 6GEOM30b 9 7 7 14 7GEOM40 10 5 6 19 7GEOM40a 16 9 10 16 9GEOM40b 17 10 10 18 8GEOM50 11 7 7 19 7GEOM50a 16 11 12 35 15GEOM50b 21 13 13 15 9GEOM60 15 7 9 39 13GEOM60a 18 10 11 31 13GEOM60b 22 11 13 39 20GEOM70 18 10 11 35 14GEOM70a 25 15 17 48 26GEOM70b 25 13 14 31 16GEOM80 19 10 11 46 16GEOM80a 27 15 16 48 26GEOM80b 28 13 16 38 24GEOM90 21 12 12 39 13GEOM90a 31 17 20 57 33GEOM90b 38 19 21 48 24GEOM100 22 13 13 46 15GEOM100a 40 20 21 58 34GEOM100b 35 18 23 56 32GEOM110 25 15 15 64 23GEOM110a 46 21 21 41 26GEOM110b 40 20 23 62 33GEOM120 22 13 14 66 18GEOM120a 46 23 25 63 38GEOM120b 46 22 24 63 37Table 5Detailed simulation results on MCP instances.
InstanceNameΔΔ0#Colors(centralcoloring)#Colors(GDV CA)#Transmittedmessages#TimeslotsGEOM20 4 29 19 19 5 3GEOM20a 8 33 23 23 8 4GEOM20b 7 16 10 10 7 4GEOM30 7 42 37 37 10 5GEOM30a 12 84 50 50 14 7GEOM30b 9 22 14 14 14 7GEOM40 10 57 29 33 20 8GEOM40a 16 91 49 49 19 10GEOM40b 17 34 19 21 20 11GEOM50 11 73 44 44 14 5GEOM50a 16 102 67 68 26 13GEOM50b 21 48 28 29 17 10GEOM60 15 108 54 55 39 16GEOM60a 18 106 57 66 30 14GEOM60b 22 45 21 24 39 20GEOM70 18 109 56 61 36 14GEOM70a 25 161 79 96 49 21GEOM70b 25 50 24 27 36 18GEOM80 19 91 50 58 45 16GEOM80a 27 176 93 104 41 20GEOM80b 28 52 25 31 49 28GEOM90 21 136 75 75 46 14GEOM90a 31 173 96 112 55 32GEOM90b 38 85 40 46 52 27GEOM100 22 118 79 79 48 17GEOM100a 40 265 126 135 58 33GEOM100b 35 67 32 36 57 32GEOM110 25 143 77 77 70 23GEOM110a 46 269 117 126 47 30GEOM110b 40 89 41 49 63 34GEOM120 22 130 85 92 73 18GEOM120a 46 263 115 139 67 39GEOM120b 46 90 40 48 63 38M. Miri et al. Array 6 (2020) 100023
9GDVCA, the number of CMSG transmitted by all vertices (the number ofvertices that have broadcasted CMSG), and the number of times slotsrequired to colorGusing GDVCA. Comparing columns 2 and 4, it can beobserved that the number of colors used by our algorithm is always lessthanΔþ1; it is about
Δþ12. Moreover, the numbers of colors used byGDVCA, which is a distributed algorithm, and the centralized algorithmare close. Column 5 reports that about half of vertices have broadcastedCMSG. Column 6 shows that the number of time slots required to color G is always less thanΔ, whereas by using DVCA, it is always more than Δ.5.2. Simulation results of GDVCA on the MCP instancesThe results of simulations for the MCP have been summarized inTable 5. Compared toTable 4, one column has been added that showsΔ' (the number of colors used by DVCA minus one). Column 5 shows thatthe number of colors used by GDVCA is far from Δ'þ1 and close to the number of colors used by the centralized algorithm. Column 6 reportsthat about half of vertices have broadcasted CMSG. Finally, column 7shows that the number of time slots required to color Gis less thanΔ; except in instance GEOM90a that they are 32 and 31, respectively.5.3. Simulation results of GDVCA on the BCP instances and BMCPinstancesThe results of the simulations for BCP and BMCP have been sum-marized inTables 6 and 7, respectively. Observing the tables, conclusionsare the same for the four coloring problems. The numbers of colors usedby GDVCA and the centralized coloring algorithm are near. About half ofvertices have broadcasted CMSG. And required time is less than Δtime slots.Comparing the last two columns of the four tables, one can observethat the number of messages and time required to solve the problems arevery close. In other words, simulation results con ﬁrm that time and communication complexities of GDVCA are independent of the weightsof vertices and edges.6. ConclusionThe vertex coloring problem and its generalizations have a lot ofapplications in computer networks. But proposed algorithms have seriousissues that prevent them from being usable in real world especially inwireless networks. We have proposed a distributed vertex coloring al-gorithm (GDVCA) for vertex coloring problems in wireless networks.GDVCA does not require synchronization nor the knowledge of theentire graph. Each vertex only requires to know its neighbors and if theyare connected together, so there is no need to relay the messages of othervertices. It means that initial overhead of GDVCA is very low. Thenumber of messages transmitted by each vertex for coloring is at most 1.Simulation results of GDVCA on 33 benchmark instances for each prob-lem, show that about half of the vertices broadcast coloring message andhalf of the vertices do not. GDVCA algorithm requires less colors than theupper bound used by centralized coloring algorithms. Simulation resultsreport that the numbers of colors used for the problems using GDVCA andthe corresponding centralized algorithms are close together. Besides, thealgorithm can solve any of the four problems with the minimum numberof colors on Special graphs. Time complexity of the proposed algorithm isa function of only maximum vertex degree. According to simulation re-sults, the number of time slots required to color an instance is less thanthe maximum vertex degree in the instance. Therefore, coloring usingGDVCA takes less time compared to DVCA.Declaration of competing interestThe authors declare that they have no known competing ﬁnancialTable 6Detailed simulation results on BCP instances.
InstancenameΔ#Colors(centralcoloring)#Colors(GDV CA)#Trans mittedmessages# TimeslotsGEOM20 4 11 11 5 3GEOM20a 8 30 30 8 4GEOM20b 7 31 31 6 3GEOM30 7 30 30 11 5GEOM30a 12 48 48 12 6GEOM30b 9 41 38 14 7GEOM40 10 29 29 21 7GEOM40a 16 38 38 17 9GEOM40b 17 58 58 21 10GEOM50 11 47 47 18 8GEOM50a 16 60 72 33 16GEOM50b 21 54 54 16 10GEOM60 15 36 43 35 13GEOM60a 18 57 59 32 15GEOM60b 22 53 59 34 18GEOM70 18 45 53 32 12GEOM70a 25 75 75 27 13GEOM70b 25 64 64 33 16GEOM80 19 56 56 48 17GEOM80a 27 79 96 41 22GEOM80b 28 63 70 44 20GEOM90 21 57 60 49 15GEOM90a 31 84 107 57 34GEOM90b 38 93 114 50 26GEOM100 22 92 92 50 18GEOM100a 40 91 102 48 31GEOM100b 35 97 97 56 33GEOM110 25 71 72 66 23GEOM110a 46 98 98 44 27GEOM110b 40 84 109 57 31GEOM120 22 70 77 68 19GEOM120a 46 113 116 61 37GEOM120b 46 106 114 64 38Table 7Detailed simulation results on BMCP instances.
InstanceNameΔΔ0#Colors(centralcoloring)#Colors(GDV CA)#Transmittedmessages#TimeslotsGEOM20 4 29 27 27 5 3GEOM20a 8 33 45 53 8 4GEOM20b 7 16 37 37 6 3GEOM30 7 42 64 64 10 5GEOM30a 12 84 91 91 12 6GEOM30b 9 22 47 43 14 7GEOM40 10 57 54 62 20 8GEOM40a 16 91 91 106 16 9GEOM40b 17 34 65 65 20 11GEOM50 11 73 95 94 15 5GEOM50a 16 102 119 118 27 14GEOM50b 21 48 78 86 19 11GEOM60 15 108 95 99 36 14GEOM60a 18 106 118 115 33 15GEOM60b 22 45 72 78 36 21GEOM70 18 109 102 130 34 14GEOM70a 25 161 155 183 45 19GEOM70b 25 50 83 85 35 18GEOM80 19 91 118 104 45 17GEOM80a 27 176 197 218 43 21GEOM80b 28 52 99 101 46 26GEOM90 21 136 141 141 49 14GEOM90a 31 173 200 217 57 33GEOM90b 38 85 121 155 53 28GEOM100 22 118 171 154 49 17GEOM100a 40 265 282 289 60 34GEOM100b 35 67 114 138 59 34GEOM110 25 143 178 177 73 26GEOM110a 46 269 267 281 51 33GEOM110b 40 89 122 148 65 36GEOM120 22 130 181 172 77 20GEOM120a 46 263 249 278 69 40GEOM120b 46 90 163 154 65 36M. Miri et al. Array 6 (2020) 100023
10interests or personal relationships that could have appeared to in ﬂuence the work reported in this paper.CRediT authorship contribution statementMohammadhasan Miri:Writing - original draft, Software, Investi-gation.Yousef Darmani:Software, Investigation.Kamal Moha- medpour:Conceptualization, Methodology.R. Lal Tummala: Conceptualization, Writing - review&editing.Mahasweta Sarkar: Writing - review&editing, Validation.References
[1]Metivier Y, Robson JM, Saheb-Djahromi N, Zemmari A. An analysis of an optimalbit complexity randomised distributed vertex colouring algorithm. InternationalConference On Principles Of Distributed Systems Dec 2009:359 –64. [2]Robson JM, Metivier Y, Saheb-Djahromi N, Zemmari A. About randomiseddistributed graph colouring and graph partition algorithms. Inf Comput Nov 2010;208(11).[3]Choudhary S, Purohit GN. Distributed algorithm for optimized vertex coloring. In:2010 international conference on methods and models in computer science(ICM2CS-2010); 2010. p. 65–9. [4]Omari HA, Sabri KE. New graph coloring algorithms. J Math Stat 2006;2:439 –41. [5]Blas AD, Jagota A, Hughey R. Energy function-based approaches to graph coloring.IEEE Trans Neural Network 2002;13(1):81 –91. [6] Barenboim L, Elkin M, Goldenberg U. Locally-iterative distributed ( Δþ1)-coloring below szegedy-vishwanathan barrier, and applications to self-stabilization and torestricted-bandwidth models. In: Proceedings of the 2018 ACM symposium onprinciples of distributed computing, ser. PODC ’18. New York, NY, USA: ACM; 2018. p. 437–46.https://doi.org/10.1145/3212734.3212769 [Online]. Available:. [7] Harris DG, Schneider J, Su H-H. Distributed ( Δþ1)-coloring in sublogarithmic rounds. J ACM Apr. 2018;65(4):19:1 –19:21.https://doi.org/10.1145/3178120 [Online]. Available:.[8]Konrad C, Zamaraev V. Distributed minimum vertex coloring and maximumindependent set in chordal graphs. In: 44th international symposium onmathematical foundations of computer science (MFCS 2019), ser. Leibnizinternational proceedings in informatics (LIPIcs). vol. 138; 2019. 21:1 –21:15. [9]Lim A, Zhu Y, Lou Q, Rodrigues B. Heuristic methods for graph coloring problems.In: Proceedings of the 2005 ACM symposium on applied computing, ser. SAC ’05; 2005. p. 933–9.[10] Bamas E, Esperet L. Distributed coloring of graphs with an optimal number ofcolors. In: 36Th international symposium on theoretical aspects of computer science(stacs 2019); 2019. p. 10.https://doi.org/10.4230/LIPIcs.STACS.2019.10 [Online]. Available:http://infoscience.epﬂ.ch/record/268183. [11]Kothapalli K, Scheideler C, Onus M, Schindelhauer C. Distributed coloring in~OðﬃﬃﬃﬃﬃﬃﬃﬃﬃlognpÞbit rounds. In: Proceedings 20th IEEE international parallel anddistributed processing symposium, rhodes island. vol. 24; 2006. p. 10. 3 . [12]Kosowski A, Manuszewski K. Classical coloring of graphs. Contemp Math 2004;352:1–20.[13]Malaguti E, Toth P. An evolutionary approach for bandwidth multicoloringproblems. Eur J Oper Res 2008;189(3):638 –
51. [14]Fijuljanin J. Two genetic algorithms for the bandwidth multicoloring problem.Yugosl J Oper Res 2012;22(44):225 –46. [15]Aardal KI, van Hoesel SPM, Koster AMCA, Mannino C, Sassano A. Models andsolution techniques for frequency assignment problems. Ann Oper Res 2007;153(1):79–129.[16] Dias B, de Freitasa R, Maculan N, Michelon P. Solving the bandwidth coloringproblem applying constraint and integer programming techniques [Online].Available:http://www.optimization-online.org ; 2016. [17]Xiangjing L, Zhipeng L. Multistart iterated tabu search for bandwidth coloringproblem. Comput Oper Res 2013;40(5):1401 –9. [18]Marti R, Gortazar F, Duarte A. Heuristics for the bandwidth colouring problem. Int JMetaheuristics May 2010;1(1):11 –29. [19] Lai X, Lü Z, Hao J, Glover F, Xu L. Path relinking for bandwidth coloring problem.CoRR 2014;abs/1409.0973 [Online]. Available: http://arxiv.org/abs/1409.0973 . [20]Han K, Kim C. An evolutionary approach for graph multi-coloring problem. ApplMath Sci Feb 2015;9(34):1677 –84. [21]Jin Y, Hao JK. Effective learning-based hybrid search for bandwidth coloring. IEEETransactions on Systems, Man, and Cybernetics: Systems 2015;45(4):624 –35.[22]Su H-H, Vu HT.“Towards the locality of vizing's theorem. CoRR 2019;abs/1901.00479.[23] Barenboim L, Elkin M, Pettie S, Schneider J. The locality of distributed symmetrybreaking. J ACM Jun. 2016;63(3):20:1 –20:45.https://doi.org/10.1145/2903137 [Online]. Available:.[24]Parter M. (Δþ1) coloring in the congested clique model. In: 45th internationalcolloquium on automata, languages, and programming (ICALP 2018), ser. Leibnizinternational proceedings in informatics (LIPIcs). vol. 107; 2018. 160:1 –160:14. [25]Panconesi A, Rizzi R. Some simple distributed algorithms for sparse networks. DistrComput Apr 2001;14(2):97–100. [26]Goldberg AV, Plotkin SA, Shannon GE. Parallel symmetry-breaking in sparsegraphs. SIAM J Discrete Math 1988;1(4):434 –46. [27]Barenboim L. Deterministic (Δþ1)-coloring in sublinear (inΔ) time in static, dynamic and faulty networks. In: Proceedings of the 2015 ACM symposium onprinciples of distributed computing, ser. PODC ’15; 2015. p. 345–54. [28]Fraigniaud P, Heinrich M, Kosowski A. Local con ﬂict coloring. In: 2016 IEEE 57th annual symposium on foundations of computer science (FOCS); 2016. p. 625 –34. [29]Alon N, Babai L, Itai A. A fast and simple randomized parallel algorithm for themaximal independent set problem. J Algorithm Dec. 1986;7(4):567 –83. [30]Schneider J, Wattenhofer R. A new technique for distributed symmetry breaking.In: Proceedings of the 29th ACM SIGACT-SIGOPS symposium on principles ofdistributed computing, ser. PODC ’10; 2010. p. 257–66. [31]Barenboim L, Elkin M, Pettie S, Schneider J. The locality of distributed symmetrybreaking. In: 2012 IEEE 53rd annual symposium on foundations of computerscience; Oct 2012. p. 321–30. [32]Moscibroda T, Wattenhofer R. Coloring unstructured radio networks. In:Proceedings of the seventeenth annual ACM symposium on parallelism inalgorithms and architectures, ser. SPAA ’05; 2005. p. 39–48. [33]Wattenhofer R, Moscibroda T. Coloring unstructured radio networks. Distr ComputOct 2008;21(4):271–84. [34]Schneider J, Wattenhofer R. Coloring unstructured wireless multi-hop networks. In:Proceedings of the 28th ACM symposium on principles of distributed computing,ser. PODC’09; 2009. p. 210–9. [35]Moosavi H, Bui FM. Optimal relay selection and power control with quality-of-service provisioning in wireless body area networks. IEEE Trans Wireless CommunAug 2016;15(8):5497–510. [36]Zheng J, Jamalipour A. Wireless sensor networks: a networking perspective. NewJersy, USA: Wiley-IEEE Press; 2009 . [37] Barenboim L, Elkin M, Gavoille C. A fast network-decomposition algorithm and itsapplications to constant-time distributed computation. Theor Comput Sci 2016[Online]. Available:http://www.sciencedirect.com/science/article/pii/S030439751630319.[38]Linial N. Locality in distributed graph algorithms. SIAM J Comput Feb 1992;21(1):193–201.[39] Kuhn F. Faster deterministic distributed coloring through recursive list coloring.CoRR 2019;abs/1907.03797 [Online]. Available: http://arxiv.org/abs/1 907.03797.[40]Hefetz D, Kuhn F, Maus Y, Steger A. Polynomial lower bound for distributed graphcoloring in a weak local model. In: Gavoille C, Ilcinkas D, editors. distributedcomputing. Berlin, Heidelberg: Springer Berlin Heidelberg; 2016. p. 99 –113. [41]Johansson O. Simple distributed (Δþ1)-coloring of graphs. Inf Process Lett 1999; 70:229–32. 70.[42]Roslan I, Kawasaki T, Nishiue T, Takaki Y, Ohta C, Tamaki H. Control oftransmission power and carrier sense threshold to enhance throughput and fairnessfor dense WLANs. In: 2016 international conference on information networking(ICOIN); Jan 2016. p. 51–6. [43]Fullmer CL, Garcia-Luna-Aceves JJ. Complete single-channel solutions to hiddenterminal problems in wireless lans. In: IEEE international conference on
communications, ICC’97 montreal. vol. 2; Jun 1997. p. 575 –9. 2. [44]Thorpe C, Murphy L. A survey of adaptive carrier sensing mechanisms for ieee802.11 wireless networks. IEEE Communications Surveys Tutorials Third 2014;16(3):1266–93.[45]Kumlander D, Kulit/C20skov A. An experimental comparison of heuristic coloringalgorithms in terms of found color classes on random graphs. In: Optimization ofcomplex systems: theory, models, algorithms and applications. Cham: SpringerInternational Publishing; 2020. p. 365 –75. [46]Santoro N. Design and analysis of distributed algorithms. New Jersy: John Wiley & Sons; 2007.[47]IEEE802.11n-2009 standard for information technology –local and metropolitan area networks–speciﬁc requirements–Part 11: wireless LAN medium access control (MAC)and physical layer (PHY) speci ﬁcations amendment 5: enhancements for higher throughput. Oct 2009 .M. Miri et al. Array 6 (2020) 100023
11