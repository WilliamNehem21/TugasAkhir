 AASRI Procedia   5  ( 2013 )  177 – 182 
2212-6716 © 2013 The Authors. Published by Elsevier B.V.
Selection and/or peer review under responsibility of American Applied Science Research Institute
doi: 10.1016/j.aasri.2013.10.075 ScienceDirect
 2013 AASRI Conference on Parallel and Distributed Computing and Systems 
A New Recursive Decomposition Algorithm to Calculate 
IMDCT 
Hui Lia,*,Yiwen Wanga, Ping Lia, Yunyi Lia 
a,State key Laboratory of Electronic Thin Films and Integrated Devices,University of Electronic Science& Technology of China,Chen gdu 
( 610054), China 
 
Abstract 
A new decomposition method to calculate IMDCT is proposed in this paper. The decomposition algorithm can convert a 
pair of long transforms into 2 pairs of short transforms with half size of the long transforms. In addition, the 
decomposition algorithm can be utilized recursively to attain shorter transforms and reduce computational cycles.  
According to experimental results obtained previously, the number of computational cycles of 512-point IMDCT is 
estimated to be 9641, which is less than those in previous reports. 
 
© 2013. Published by Elsevier B.V. 
Selection and/or peer review under responsibility of American Applied S cience Research Institute 
 
Keywords:  IMDCT; DCT-IV/DST-IV; TDAC 
1. Introduction 
MDCT and IMDCT have been utilized to implement TDAC [1] in many standards. Because calculating 
MDCT/IMDCT requires much time, it is  necessary to find efficient methods and simple structures for the task.  
To reduce area cost, the regressive methods and architectures were researched [2-6]. Allowing for VLSI 
implementation, the methods proposed in [2,3] are same efficient. But the architecture in [2] has a latch more. 
The method in [4] reduces about 7 eighths of computationa l time compared with ones in [2,3] by virtues of 
 
* Corresponding author. Tel.: +86-28-83206813; fax: +86-28-83208839. 
E-mail address:  huili@uestc.edu.cn 
Available online at www.sciencedirect.com
© 2013 The Authors. Published by Elsevier B.V.
Selection and/or peer review under responsibility of American Applied Science Research InstituteOpen access under CC BY -NC-ND  license.
Open access under CC BY -NC-ND  license.178   Hui Li et al.  /  AASRI Procedia   5  ( 2013 )  177 – 182 
 low latency of IDCT-II and IMDCT’s symmetry. In contrast with the method in [4], our factorization method have the virtues of less computational cycles and smalle r structure [5]. Absorbing virtues of the algorithm in  [4] and [5], our recent proposed algorithm [6] possesses smaller accelerator and less computational cycles in contrast to [5].  A new decomposition method to calculate IMDCT is proposed in this paper. The work presented in this paper
 results from the method in [5]. Its aim is to further develop the algorithm in [5] and increase the computational efficiency for IMDCT computation. The core idea is to recursively decompose a pair of long transforms into 2 pairs of short transforms with half size of the long transforms. The detailed derivation of algorithm is proposed in section II. Conclusion is presented in Section III. 2. Decomposition algorithm of IMDCT 2.1. Obtaining two M/4-point transforms from one M-point IMDCT The equation of M-point IMDCT is expressed as       
2/2 10 21 2 1() ( ) c o s2MMk mjxm X jM ,         for m = 0,…, M 1.                 (1)  M is a multiple of 16 in this paper.   Three sequences are defined as 
/4 , /4, , 1 ,()+3 /4 , 0, , /4 1,xm M f o r m M Mymxm M f o r m M                                               (2) 
'() ( 2)ymy m                   for m=M/4-1,                                                      (3) 
''() ( 2 1 ) ,ym y m              for m=M/4-1.                                                      (4) We can further derive  
/2 1(0)0() (  )( ) c o s [ ( 2 1 ) ( 2 1 )/ ]Mcc Mjzm X j C j m j M ,                                         (5)       
/2 1(0)0( ) ( ) ( ) sin[(2 1)(2 1) / ]Mcs Mjzm X j S j m j M  ,                                       (6) where 
(0)(0)'"() [() () ] / 2 , 0 , , / 21 ,'"( ) [ ( ) ( )]/2 0, , /2 1,() c o s { [ 2 1 ] / [ 2 ] } , 0 , , / 2 1 ,() s i n { [ 2 1 ] / [ 2 ] } , 0 , , / 2 1 . cccsMMzm y m y m m Mzm y m y m m MCj j M j MSj j M j M
                                       (7) From (3),(4), (7), we have  
(0) (0)(2 ) ( ) ( )cc cs ym z m zm ,                                                 (8) 
(0) (0)(2 +1) ( ) ( )cc cs ym z m zm ,                                               (9) where m ranges from 0 to M/4 -1.
 Thus, the two M/4-point transforms ((0)()cczm and (0)()cszm ) are used to calculate the M-point IMDCT.  179  Hui Li et al.  /  AASRI Procedia   5  ( 2013 )  177 – 182 
 2.2. Decomposing two M/4-point transforms into four M/8-point transforms The two M/4-point transforms presented in part A will be decomposed into four M/8-point transforms in this part. Then, the four M/8-point transforms will be recombined to get four new M/8-point transforms. And the relation between the transforms and 
()ym is given. The derivation is as follows. Let                     
(0)() () ( )cc MZjX j C j ,                                                                (10)                     
(0)() () ( )cs MZjX j S j .                                                                 (11) Dealing with equations (5),(6),(7),(10) and (11) elaborately, we derive 
/2 1(1) (0) /2 0( ) ( ) ( ) cos{[2 1][2 1] /[ /2]},Mcc cc Mjzm Zj C j m j M                             (12) 
/2 1(1) (0) /2 0( ) ( ) ( ) sin{[2 1][2 1] /[ /2]},Mcs cc Mjzm Zj S j m j M                             (13) 
(0) (1) (1)(2 ) ( ) ( ) , 0, , /8 1 ;cc cc cszm z m z m f o r m M                                     (14) 
(0) (1) (1)(2 +1) ( ) ( ) , 0, , /8 1 ;cc cc cszm z m z m f o r m M                                  (15) and    
/2 1(1) (0) /2 0( ) ( ) ( ) sin{[2 1][2 1] /[ /2]},Mss cs Mjzm Zj C j m j M                              (16)               
/2 1(1) (0) /2 0( ) ( ) ( ) cos{[2 1][2 1] /[ /2]},Msc cs Mjzm Zj S j m j M                             (17)                    
(0) (1) (1)(2 ) ( ) ( ) , 0, , /8 1 ;cs ss sczm z m z m f o r m M                                      (18)  
 (0) (1) (1)(2 +1) ( ) ( ) , 0, , /8 1 ;cs ss sczm z m z m f o r m M                                   (19) Based on the above derivation, computing two M/4-point transforms (equations (9) (10)) is changed into computing four M/8-point transforms(equations  (12)(13)(16)(17)) .The relation between 
(m)y m =0,1,…,M/2-1
and (1)()cczm,(1)()cszm,(1)()sszm,(1)sc()zm m =0,1,…,M/8-1  is given as follows. From equations (8),(9), (14),(15), (18) and (19) we have                  
(1) 1 (1) 1( 4) [ () ()][ () ()]sc ss cc cs ym z m zm z m zm ,      m = 0, … , M/8 –1,              (20)              
(1) 1 (1) 1( 4+ 3 ) [ () ()][ () ()]sc ss cc cs ym z m zm z m zm ,      m = 0, … , M/8 –1,             (21)             
(1) 1 (1) 1( 4+ 1 ) [ () ()][ () ()]sc ss cc cs ym z m zm z m zm ,      m = 0, … , M/8 –1,             (22) 
(1) 1 (1) 1( 4+ 2 ) [ () ()][ () ()]sc ss cc cs ym z m zm z m zm ,      m = 0, … , M/8 –1.             (23) Based on equations  (12),(13),(16) and (17), equations (20),(21),(22) and (23) can be further changed into    
00(1) (1)(4 )cs ym z m z m ,        m = 0 , … , M/8 –1,                            (24) 
00(1) (1)(4 +3)cs ym z m z m ,        m = 0 , … , M/8 –1,                            (25) 
11(1) (1)(4 +1)cs ym z m z m ,        m = 0 , … , M/8 –1,                            (26) 
11(1) (1)(4 +2)cs ym z m z m ,         m = 0 , … , M/8 –1.                           (27) while                      
00(1) (1)/2 10cos{[2 1][2 1] /[ /2]}ccMjzm Z j m j M ,  m = 0 , … , M/8 –1,             (28) 180   Hui Li et al.  /  AASRI Procedia   5  ( 2013 )  177 – 182 
 00(1) (1)/2 10sin{[2 1][2 1] /[ /2]}ssMjzm Z j m j M ,  m = 0 , … , M/8 –1,              (29) 
11(1) (1)/2 10cos {[2 1][2 1] /[ / 2]}ccMjzm Z j m j M ,  m = 0 , … , M/8 –1,             (30) 
11(1) (1)/2 10sin{[2 1][2 1] /[ /2]}ssMjzm Z j m j M ,  m = 0 , … , M/8 –1.             (31) and 
0(1) (0) (0)
/2 /2 () ()c cc csMM Zj ZjC j ZjS j ,                                     (32) 
0(1) (0) (0)
/2 /2 () + ()s cc csMM Zj ZjS j ZjC j ,                                     (33) 
1(1) (0) (0)
/2 /2 () + ()c cc csMM Zj Z jC j Zj S j  ,                                     (34) 
1(1) (0) (0)
/2 /2 () ()s cc csMM Zj Z j S j ZjC j   .                                    (35) Equations (28)(29)(30)(31) are four new M/8-point transforms. From equations (20)(21)(22)(23) and equations (24)(25)(26)(27) , we can see that  
[]ym is expressed as sum of 4 items using M/8-point transforms (equations (12)(13)(16)(17) ) whereas sum of 2 ite ms using new M/8-point transforms (equations (28)(29)(30)(31) ).   That is to say,  using new M/8-point transforms can decrease computational complexity.   Fig.1. is presented to clarify the relation among 
[]ym m =0,1,…,M/2-1 and two M/4-point transforms and four new M/8-point transforms. The box of M/4-point SUM
0 corresponds with equations (8) and the box of M/4-point SUB
0 corresponds with equations (9). The four boxes in right column correspond with equations (24)-(27). 
 
Fig. 1. relation among ()ym  and M/4-point transforms and M/8-point transforms 
2.3. Conversion to DCT-IV/DST-IV To reduce the computational cycles, equations (28) (29) (30) (31) are changed into two pairs of M/8-point DCT-IV/DST-IV as          
00(1) (2)/8 10cos{[2 1][2 1] /[ /2]}ccMjzm Z j m j M ,   m = 0 , … , M/8 –1                          (36) 
00(1) (2)/8 10sin{[2 1][2 1] /[ /2]}ssMjzm Z j m j M m = 0 , … , M/8 –1                          (37) 181  Hui Li et al.  /  AASRI Procedia   5  ( 2013 )  177 – 182 
 11(1) (2)/8 10cos {[2 1][2 1] /[ / 2]}ccMjzm Z j m j M m = 0 , … , M/8 –1                          (38) 
11(1) (2)/8 10sin{[2 1][2 1] /[ /2]}ssMjzm Z j m j M m = 0 , … , M/8 –1                          (39) while     
00 0 0 0(2) (1) (1) (1) (1)+/ 2 1 / 4 1 / 4 +cc c c cZ jZ j Z M j Z M j Z M j                                    (40)  
00 0 0 0(2) (1) (1) (1) (1)/2 1 + /4 1 /4+ss s s sZ j Z jZ M j Z M jZ M j                                    (41) 
11 1 1 1(2) (1) (1) (1) (1)+/ 2 1 / 4 1 / 4 +cc c c cZ jZ j Z M j Z M j Z M j                                    (42) 
11 1 1 1(2) (1) (1) (1) (1)/2 1 + /4 1 /4+ss s s sZ jZ j Z M j Z M j Z M j .                                  (43) 
By using equations (32)-(35), (10) and (11), 
0(2)cZ j, 
0(2)sZ j, 
1(2)cZ j, 
1(2)sZj in equations (40)-(43) can be described as functions of 
Xj in similar forms as ones in [5]. Equations (24)-(27), (36)-(39) have similar correspondences in [5] too. Therefore, there ar e similar computational cycles as [5] using equations (24)-(27), (36)-(39) to compute IMDCT.  But the decomposition algorithm from two M/4-point transforms to four M/8-point transforms in part B, section II can be used recursively to get eight M/16-point transforms. After that, Equations (36)-(39) will become four pairs of M/16-point DCT-IV/DST-IV and computational cycles are reduced by 50%. Equations (40)-(43) will be in the form of eight items’ sum instead of four items’ sum and computational cycles are approximately doubled. Namely, the cycles to calculate 512-point IMDCT are approximately 9641 from the experimental results of [5]. Therefore, the presented decomposition algorithm can reduce computational cycles of IMDCT co mpared with 12153 in [5] and 9718 in [6]. 
3. Conclusion 
A new decomposition method to calculate IMDCT is proposed in this paper. The decomposition algorithm can convert a pair of long transforms into 2 pairs of short transforms with half size of the long transforms. In addition, the decomposition algorithm can be utilized recursively to attain shorter transforms and reduce computational cycles. Based on the previous experimental results, the number of computational cycles of 512-point IMDCT is estimated to be 9641, which is less th an 12153 in [5] and 9718 in [6]. The detailed number of computational cycles will be evaluated in future experiments. 
Acknowledgements 
The research work reported in this paper is supported  by “the Fundamental Research Funds for the Central Universities” (Project Code: ZYGX2012J040). 
References 
[1] J. P. Princen and A. B. Bradley, Analysis/synthesis filter bank designs based on time domain aliasing cancellation, IEEE Trans. Acoust. Speech Signal Process. 1986;34: 1153-1161. [2] H. C. Chiang and J. C. Liu, Regressive implem entation for the forward and inverse MDCT in MPEG audio coding, IEEE Signal Process. Lett. 1996; 4: 116-118. [3] V. Nikolajevic and G. Fettweis, Computation of forw ard and inverse MDCT using Clenshaw’s recurrence formula, IEEE Trans. Signal Process. 2003; 5: 1439-1444. 182   Hui Li et al.  /  AASRI Procedia   5  ( 2013 )  177 – 182 
 [4] C. H. Chen, B. D. Liu and J. F. Yang, Recursive architectures for realizing modified discrete cosine transform and its inverse, IEEE Trans. Circuits Systems-II: Analog Digital Process. 2003; 1: 38-45. [5] H. Li, P. Li, Y. Wang, et al, A New Decomposition Algorithm of DCT-IV DST-IV for Realizing Fast IMDCT Computation, IEEE Signal Process. Lett. 2009; 9: 735-738. [6] H. Li, P. Li, Y. Wang, An efficient hardware accelerator architecture for implementing fast IMDCT computation, Signal Process. 2012; 8: 2540-1545. 