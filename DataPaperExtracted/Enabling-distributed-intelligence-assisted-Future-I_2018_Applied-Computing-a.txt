Original Article
Enabling distributed intelligence assisted Future Internet of ThingsController (FITC)
Hasibur Rahman⇑, Rahim Rahmani
Department of Computer and Systems Sciences (DSV), Stockholm University, Nod Building, SE-164 55 Kista, Sweden
article info
Article history:Received 25 January 2017Revised 1 May 2017Accepted 2 May 2017Available online 8 May 2017Keywords:Future InternetInternet of ThingsEdge computingDistributed intelligenceBelief-networkabstract
The unprecedented prevalence of ubiquitous sensing will revolutionise the Future Internet where state-of-the-art Internet-of-Things (IoT) is believed to play the pivotal role. In the fast forwarding IoT paradigm,hundreds of billions of things are estimated to be deployed which would give rise to an enormousamount of data. Cloud computing has been the prevailing choice for controlling the connected thingsand the data, and providing intelligence based on the data. But response time and network load are onthe higher side for cloud based solutions. Recently, edge computing is gaining growing attention to over-come this by employing rule-based intelligence. However, requirements of rules do not scale well withthe proliferation of things. At the same time, rules fail in uncertain events and only offer pre-assumedintelligence. To counter this, this paper proposes a novel idea of leveraging the belief-network withthe edge computing to utilize as an IoT edge-controller the aim of which is to offer low-level intelligencefor IoT applications. This low-level intelligence along with cloud-based intelligence form the distributedintelligence in the IoT realm. Furthermore, a learning approach similar to reinforcement learning hasbeen proposed. The approach, i.e. enabling a Future IoT Controller (FITC) has been veriﬁed with a simu-lated SmartHome scenario which proves the feasibility of the low-level intelligence in terms of reducingrules domination, faster response time and prediction through learning experiences at the edge./C2112017 The Authors. Production and hosting by Elsevier B.V. on behalf of King Saud University. This is anopen access article under the CC BY-NC-ND license ( http://creativecommons.org/licenses/by-nc-nd/4.0/ ).
1. IntroductionFuture Internet is expected to be driven by the prevalence ofInternet of Things (IoT) where it is envisioned that anythingcan be connected[1]. The hype around IoT is that it is the next techno-logical revolution of the current world [2]where hundreds of bil- lions of things will be interconnected. IoT has started to shapeinto reality from its hype by and large due to recent advancementsin ubiquitous technologies such as Radio Frequency Identiﬁcation(RFID)/Near Field Communication (NFC), Wireless Personal AreaNetwork (WPAN), high speed communication (4G/5G), BluetoothLow Energy (BLE), etc. Advanced developments in the sensingand actuating technologies also contribute to the rise of the IoTpopularity. This rise in connected things has already taken itsnumber beyond current world’s population and expected to impactevery aspect of human life. Currently, there are almost two con-nected things for every human. The ratio is expected only to accel-erate in the coming days. The challenge of collecting and sharingthe context information (ConIn) from these connected things hasbeen addressed in earlier research [3–8]. The challenge has been addressed by architecting IoT platforms via mostly middlewaresolutions. Each middleware solution addresses different IoT chal-lenges; for example, device management, context information col-lection and sharing, context-awareness, interoperability, etc. [4]. However, there is no single middleware solution or IoT platformthat solves all these IoT challenges. An ideal IoT platform capableof providing solutions to all IoT aspects has not yet been designed[4]. Furthermore, most of the IoT platforms solutions are cloud cen-tric[3–5,8]; recently Cisco coined the term fog computing, i.e. edgecomputing closer to the actual devices [9]. Lately resource constrained devices such as SmartDevices andraspberry pi have enriched in computational capabilities and atthe same time price has become more affordable. These deviceshave the potential to be exploited as IoT gateways and havealready been demonstrated in earlier research [10,11]. Emergence of these devices paves the way for computing at the edge of
http://dx.doi.org/10.1016/j.aci.2017.05.0012210-8327//C2112017 The Authors. Production and hosting by Elsevier B.V. on behalf of King Saud University.This is an open access article under the CC BY-NC-ND license ( http://creativecommons.org/licenses/by-nc-nd/4.0/ ).⇑Corresponding author.E-mail addresses:hasibur@dsv.su.se(H. Rahman),rahim@dsv.su.se(R. Rahmani). Peer review under responsibility of King Saud University.
Production and hosting by ElsevierApplied Computing and Informatics 14 (2018) 73–87
Contents lists available atScienceDirect
Applied Computing and Informatics
journal homepage: www.sciencedirect.com
connected things, for example, raspberry pi (Raspberry Pi 3 is a creditcard-sized computer with 1.2 GHz quad-core CPU, 1 GB RAM,built-in support for BLE and Wireless LAN, and priced at US $35[12]) can be employed as an IoT gateway for smart home, mHealth,smart farming, factory automation, shipping, etc. Most of earlierresearch more or less agree on the typical three-layer IoT architec-ture as depicted inFig. 1 [3–5,13]. It shows IoT application wherethings are connected to a gateway locally and gateway then col-lects and forwards data to the cloud for further processing whichis also shown in the industry for example by AWS IoT [14]. This brings high latency and bandwidth requirements. However, IoTnecessitates latency, i.e. response time as low as possible. WhenIoT was ﬁrst coined by Kevin Ashton back in 1999, it was proposedin the context of supply chain management [15]. Due to the tech- nological advancements and progressions in the research withinIoT have evolved its vision and transformed the way Internet-enabled things are being utilized. IoT vision has been expandedto many other application domains. Such expansion of scopesdrives IoT on the verge of experiencing a paradigm shift towardsenabling Internet of Everything (IoE) [16]. The focus of which is the integration of people, things, services, context information asseen inFig. 2. To counter this paradigm shift, new approachesare mandated to research into. Most of the IoT applications requirereal-time and quick decision making; hence, edge computing pro-posal is gaining growing attention from researchers recently [9,17– 20]. At the same time, cloud computing cannot be ignored sinceedge computing can only offer solutions for limited data locally[18]- this data is also known as small data [21]-and a future IoT solution need to cater for both small data locally and big data glob-ally[18]. Hence, an IoT solution is mandated to offer both edge andcloud solution. Therefore, this paper proposes a novel IoT solutionoffering both edge and cloud computing; thus, enabling a FutureInternet of Things Controller (FITC).Properties of future IoT, i.e., IoE, correspond to a cycle as seenfromFig. 2. This cycle can be compared with the vision of auto-nomic computing loop[16]. The autonomic loop executes self-Xalgorithms in order to make an autonomous entity. Execution ofself-X algorithms depend on the policies embedded into a con-troller by a human-administrator. Whenever a policy needs to bemodiﬁed or added or removed, human-administrator usually isconsulted. This can also be seen from AWS IoT’s rule-engineswhere rules (policies) are added whenever required and furtherin XpertRule[22]. However, in the IoT scenario where each con-troller might control thousands of things, updating rules or policiesshould be done automatically (as to reduce time and complexity)preferably by learning from the past experiences. Recently bigplayers in the industry like IBM, Amazon, and Microsoft havestarted to tie up machine learning with IoT. This tying up isexpected to offer unprecedented impact on IoT. In future, IoT andArtiﬁcial Intelligence (AI) -thereby, machine learning- will beinseparable. The reason is that up until now IoT only focused oncollecting and sharing raw-data, it did not focus on providinginsight to the raw-data. Existing approaches for edge intelligenceare heavily reliant on predeﬁned rules and are time consumingwhere in order to deﬁne new rules a person is reliant on cloud-based intelligence. Therefore, to counter the shortcomings of thecurrent and previous approaches, this paper proposes to provideintelligence at the edge where IoT controller would learn fromthe past experiences. The proposal proposes an IoT controller toprovide three important operations: Decision making, Action, andPrediction (DAP) for the connected things at the edge. The idea isto provide low-level intelligence to the small data at the edgebefore providing high-level intelligence for the so-called big dataat the cloud; thus, enabling distributed intelligence. The need fortwo-level intelligence was also highlighted earlier in [4,18]. Provid- ing intelligence at edge implies reaping value from the collectedraw-data by the gateway, i.e. an IoT controller (this paper regardsa device as gateway which only collects and forwards raw-data,and in addition to this when a device provides the portrayedlow-level intelligence is regarded as controller). However, raw- data collected from IoT applications do not actually provide anyusefulness unless insight is harvested [23]. To reap value from the raw-data, the data need to put into context to provide intelli-
gence for converting into knowledge [3,23]. Currently, only rules are employed to provide edge-intelligence. However, as the num-ber of connected things escalate the required number of rules alsorockets. Depending only on rules could break the intelligence ifnew or uncertain events occur. Furthermore, pre-deﬁned rules’domination would only provide pre-assumed intelligence. In orderto provide further intelligence to improve the performance of anIoT controller mandates the controller to learn from the experi-ences by employing machine learning algorithms. In light of theabove, the followings can be considered as vital challenges to pro-vide edge-intelligence: contextualization of the raw-data; mini-mizing dependency only on rules for executing tasks; improvingperformance of tasks through experiences, i.e. learning; predictingan outcome in the event of uncertainties; efﬁcient routing of thedata; self-organization of the things, i.e. sensors and actuators;
Fig. 1.A typical simpliﬁed three-layer IoT architecture.74 H. Rahman, R. Rahmani / Applied Computing and Informatics 14 (2018) 73–87etc. With regard to such challenges, this paper further proposes anovel approach of employing belief-network (also popularlyknown as Bayesian network) to reduce dependency on the rulesand learning algorithm similar to the reinforcement learning forIoT edge controller. Usefulness of such belief-network, i.e. proba-bilistic approach to learn from experiences was earlier discussedin[23].The paper does not propose to get rid of employing cloud-intelligence altogether, rather it proposes the novel idea of reapingvalue from both edge and cloud, thus enabling distributed intelli-gence (seeFig. 3). This implies providingintelligence of thingsby reaping theinformation of thingscloser to the devices. In order todemonstrate the feasibility of the proposed approach, two IoTapplications namely SmartHome and SmartFarming have beenused for references and further, SmartHome application wasexploited for verifying the algorithms for providing intelligenceat the edge. In order to execute the DAP; the controller necessitateshaving algorithms that can help in executing these operations. Thepaper proposes and develops new algorithms with regard toproviding intelligence at the edge. Further, the advantage ofbelief-network over rule-based is investigated followed by resultsof prediction for simulated SmartHome data.2. Related workMaking sense of IoT data, that is, to reap value from the IoT datais the current topic and challenge of IoT research. IoT started withthe vision of connecting any physical objects to the Internet andcollecting data from these physical objects. Therefore, the earlierproposals[5–8,24]of analysing and taking decisions at the cloudmade sense since initial objective was to collect data from thephysical objects about real world by employing things rather thanrelying only on human-entered data on the Internet. The objectivewas simple: to collect data and let computers or higher-leveldevices take decisions by analysing data. Today the objective liesin harvesting value from the collected data. However, cloud centricsolutions fail to provide low-latency which is one of the IoTrequirements[9,13,18,19]. IoT further requires computing to bedone as closer to the things as possible. Both cloud and edge com-puting provide advantages that are useful and solve many chal-lenges in IoT paradigm. For example, cloud computing can offerlarge storage, complex processing[3,11]; analytics and visualiza- tion tools[3,11,24]; anywhere access[3], contextualization/perso nalization[25]; publish/subscribe[7]; and edge computing can offer faster processing[9,10]; better sustainability and energy efﬁ-ciency[10,13,20]; distributed computing[18]; data pre-processing and ﬁltering[13,19]; mobility support[18]; heterogeneity and interoperability[18]; computing closer to the actual things[13,18], etc. Besides these, edge computing reduces burden oncloud computing in terms of data storage, bandwidth, geographiccoverage, analytical dependency, communication overhead, etc.[8,18,19]. Earlier papers showed advantages of edge computingover cloud computing in IoT in terms of: efﬁciency in energy, dataﬁltering, providing notiﬁcations in a SmartHealth application [13];Fig. 2.Properties of Internet-of-Everything.
Fig. 3.Distributed (two-level) intelligence for IoT.H. Rahman, R. Rahmani / Applied Computing and Informatics 14 (2018) 73–87 75latency improvement[17]; synchronization and upload delay,communication overhead improvement [19]; better dynamic scal- ing and communication cost via mobile fog computing [26]; but none of the papers focused on providing intelligence for decisionmaking and actions, and learning for prediction based on collectedraw-data. To counter the challenge of intelligence at the edge, aparallel work in[13]demonstrated reinforcing gateways with sys-tem intelligence speciﬁc to the e-health scenario. However, thatwork did not focus on providing intelligence and learning basedon collected data which this paper has demonstrated. Some ofthe solutions such as AWS IoT[14]and XpertRule[22]provide intelligence by employing predeﬁned rules. Both solutions allownew rules to be deﬁned aided by human. A person can deﬁnenew rules based on analysed data from cloud-centric intelligenceby employing AI techniques. Analysed data could be a classiﬁcationor prediction problem, extract meaningful information from theraw-data[27], etc. However, these approaches are heavily relianton predeﬁned rules and are time consuming where in order todeﬁne new rules a person is reliant on analysed cloud-based intel-ligence. Moreover, rules fail to scale well with the increase in con-nected things. Furthermore, to overcome pre-assumed intelligenceand in order to provide further intelligence to improve the perfor-mance, IoT controller mandates to learn from the experiences byemploying machine learning algorithms. Belief-network can beused to learn from experiences as earlier discussed in [23]. How- ever, most of the machine learning algorithms take time to learn,and additionally it requires training data meaning data needs tobe readily available prior to applying the learning techniques[23]. Belief-network is gaining attention lately in AI research forprediction, learning, decision-making, etc. It is conceptually simpleyet emerging as principal approach to learn through experiences[23]. On the other hand, reinforcement learning allows an agent(decision-maker and learner) to learn by giving reward for eachaction perceived from the environment [28]. This kind of learning can be applied to both low-level and high-level decision makingand prior data is not needed for learning which makes it a compe-tent technique for the IoT realm. Even though a lot of research hasbeen conducted within IoT; research towards assisting IoT withdistributed intelligence, employing belief-network in the edgecomputing to overcome dependency on rules, and learning havenot yet been conducted.3. Proposed approachInternet-of-Things (IoT) is a network of things where things canbe anything from a physical object to a virtual object. The primaryobjective of IoT is to connect anything anytime and anywhere.However, once things get connected via any path, challenge is toreap value from things’ data, i.e. information. That corresponds tocatering theinformation-of-things. Earlier many argued that things’capability of providing this information in the IoT domain makesthe things smart; however, recently others argue that this capabil-ity only makes the things connected- not necessarily smart. Inorder to make things smart or make sense of information-of-things, providing intelligence is a prerequisite. Thus, it necessitatesto provideintelligence-of-things. As inefﬁciency of cloud computingleads to edge computing; therefore, it is necessary to look intoother solutions to counter data closer to the things which someresearchers have started calling small data. Question is ‘‘How can a solution be employed that can provide intelligence by utilizingthesmall data?”. This also corresponds to the earlier vision oftwo level intelligence in IoT[4].Fig. 3shows a resemblance of information-knowledge pyramid hierarchy. The hierarchy showsrelation of the raw-data to ultimately providing wisdom basedon the raw-data. In the middle of hierarchy lies the knowledge.Knowledge also corresponds to the question of how. Therefore, the proposal in this paper would look into answering some of thequestions related to this ‘‘how” the goal of which is to alleviatethe intelligence-of-things. The IoT edge controller speciﬁcallywould look at answering the questions based on the raw-data col-lected from the things at the edge. The edge controller, apart from
answering the ‘‘how” questions, would also control other actionssuch as collecting raw-data from the connected things and con-verting the collected raw-data into information by answering thequestions ofwho,what,where,when, etc. prior to converting into knowledge. The later action is also known as contextualization,i.e. each connected thing is contextualized by answering thosequestions. Based on this context information (ConIn), controllerwould provide knowledge to the connected things. For instance,in a SmartFarming scenario, the controller would collect raw-data from sensing devices, for example, about water conditionand controller would ﬁrst contextualize the raw-data into ConIn,and based on the knowledge about the ConIn, controller wouldtake actions; an action could be determining when and how longto sprinkle water. Context information is further processed to exe-cute the DAP. This is what edge controller has been proposed as toprovide the low-level intelligence. Now based on the knowledgehierarchy, from raw-data to wisdom, below each of the steps cor-responding to low-level intelligence is discussed.3.1. Distributed intelligenceRaw-data: Raw-data is usually being in the form of symbols orsigns in the context of knowledge hierarchy. In an IoT scenario,raw-data is any data that is collected from a thing, e.g. sensor oractuator. Raw-data is usually collected and fed forward by a gate-way. There are many protocols that can be exploited by IoT to col-lect raw-data from the things. Some of the promising protocols are:MQTT, CoAP, DCXP, etc.[6,7]. The things can further be controlledvia employing self-organizing algorithms such as presented earlierin[16]. This part of connecting and collecting raw-data is beyondthe scope of this particular work. The next two steps are relevantto this particular paper, i.e. information and knowledge.Information: As seen fromFig. 3, information corresponds to answering few of the fundamental questions. This also refers tocontextualizing a thing. The collected data is fed into the contextu-alization algorithm (see Algorithm 1) which by answering thequestions like:who,what,where,when, etc. provides more mean- ing to the raw-data. Here,whorefers to thing’s identity,whatrefers to the actual data,whererefers to its origin, andwhenrefers to its time of occurrence. There could be more context informationadded at this step for example its relation to other things and/orcontext information.Knowledge: This step then provides further low-level intelli-gence based on the contextualized data. Although the ﬁgure showsknowledge as part of the low-level intelligence; in essence, knowl-edge would be distributed to both low-level and high-level intelli-gence. The reason being that the proposed IoT controller at theedge would run on resource-constrained devices which mightnot be able to provide all the required knowledge. High-levelknowledge would come from more advanced computationaldevices. More insight to the data can be provided at the cloud byemploying data mining techniques.Understanding & Wisdom: These two operations are meant foroperations like extracting meaningful information from data. Thesedata mining challenges are beyond the scope of this paper and canbe dealt at the higher level. Since understanding deals with appre-ciation of the data and wisdom is for evaluating the data which areanalytical; and require all the previous steps and synthesizingknowledge from earlier knowledge and information. Wisdom onthe other hand requires human intervention as this is the last76 H. Rahman, R. Rahmani / Applied Computing and Informatics 14 (2018) 73–87and highest level, so it extends the previous steps to infer newknowledge or understanding. A data scientist or a researcher per-haps would infer this new knowledge or understanding. Or infuture deep learning based AI solution might be able to providethe required wisdom.To understand the above steps, let’s consider an IoT applicationin a SmartHome scenario where things such as sensors and actua-tors are installed for home automation. The sensors and actuatorsare controlled via an IoT edge controller. The controller collectsdata from the things and executes DAP. The following exampleshows how a temperature sensor reading can inﬂuence actionssuch as lighting, heating and making breakfast.3.1.1. Example 1Raw-dataExample raw-data from a sensor and actuatorsTemperature sensor: 2000Lighting actuator: 0Heating: 1Breakfast (coffee-maker & toaster): 0InformationContextualized Temperature SensorWho:temperaturesensor1.bedroom@smarthome1What:2000/100 = 20/C176C (warm)When:07:00 AM (morning)Where:homeWhich:heating, lightingContextualized Lighting (Actuator)Who:lighting1.bedroom@smarthome1What:0When:07:30 AMWhere:homeWhich:coffee-maker, toasterContextualized Coffee-maker (Actuator)Who:coffeemaker.kitchen@smarthome1What:0When:07:30 AMWhere:homeWhich:toasterKnowledgeAbove shows example of raw-data and context informationfrom sensor and actuators in a SmartHome scenario. The contextinformation also shows which things are related to each thing.Based on the available context information following knowledge,i.e. DAP can be used. Although there are existing SmartHome plat-forms that are built upon IFTTT (IF This Then That), e.g. Smart-Things[29], CNET SmartHome[30], etc. SmartThings’ IFTTT does not consider logical association between things, and often requiresuser intervention to trigger a task. Moreover, the intelligence is notprovided at the edge rather the gateway is only used for connectingthings, and for collecting and forwarding data. Temperature sensorat bedroom reading gives 20/C176C (warm). Now following this read-ing, when the temperature at bedroom is above 20 /C176C the con- troller can make decision to turn off the heating and turn on thelighting. However, before triggering the action, the controllerneeds to take into account other related context information forexample time of the occurrence of this temperature reading. If thistemperature reading occurred at morning (around 07:00 AM), onlythen turn off heating and turn on the lighting (turning on the lightcould also depend on the motion sensor, i.e. if it detects any phys-ical activity then turn on the light). This time also refers to theweekdays of the week, during weekend the time might be set toa later time. The controller also has the knowledge that when thisSmartHome user wakes up, she usually takes her breakfast 30 minafter waking up. Following turning on the bedroom light, motionsensor detects movement inside the bedroom (conﬁrming thatshe is now awake) and make decisions on preparing breakfast,e.g. toasts and coffee.Now another scenario could be that the user returns home onweekdays around 18:00 and the controller knows that if the tem-perature is below 15/C176C (cold) then user turns the heating on whenshe is at home or about to reach home. To know user’s currentlocation, controller consults with her mobile application on theSmartPhone. When the user is 15 min away or 10 km away, con-troller decides to turn the heating on. The controller knows sheeats her supper around 19:30, so it turns the oven on at a desired
temperature at 18:45 every day. Now considering a non-regularday when the user joins dinner at a friend’s house or outside, thecontroller makes a prediction on whether or not the oven shouldbe turned on. Here, this knowledge is not embedded into the con-troller. Therefore, controller learns not to take such usual actionswhen user is not around.3.1.2. Example 2Raw-dataExample raw-data from sensors and actuatorsLight: 40Temp: 18Nutrition: 26Moisture: 43Soil moisture: 30InformationContextualized Nutrition SensorWho:nutritionsensor1.gateway2@adamsfarmWhat:26%When:03:00 PMWhere:Zone 2, Row 3, Column 4Which:FertilizerContextualized Soil Moisture SensorWho:soilsensor.gateway5@adamsfarmWhat:30%When:05:00 PMWhere:Zone 4Which:SprinklersKnowledgeThe example here shows a probable scenario in farming wheresensors and actuators are used for automating tasks. Few of thesuch tasks are monitoring water, soil, temperature, nutrition andoperating fertilizer machine, sprinklers, lighting, etc. For example,Edyn[31], an example of connected farming, enables healthy farm-ing by allowing instant access to one’s remote farm. While Edynalerts its users when to water, fertilize, control light, etc. whichis useful but user might be not connected to receive alerts andmight risk of not being able to execute such tasks required forhealthy plant-growth; therefore, it would have been ﬁtting in theera of connected world to let the IoT controller decide when to exe-cute a task at the farm. For example, a farm could employ differentsensors for collecting data as shown above and the controllerwould control DAP execution if and when to trigger a task. The taskcould be to start water sprinkle if soil moisture is below the thresh-old (a value which is speciﬁc to application and implementation)but before starting the task, controller would check weather fore-H. Rahman, R. Rahmani / Applied Computing and Informatics 14 (2018) 73–87 77cast and based on the weather information it would decide howmuch, and if, water needs to be poured. Similarly, when the nutri-tion level drops below a desired value, the controller would try toexecute the task of providing fertilizer; but fertilizing can alsodepend on the plant growth meaning if the plants are ready to har-vest then there is no need to fertilize the plants.3.2. Belief-networkTo achieve the aforementioned knowledge execution, i.e. stepsshown in example 1 and 2, the paper proposes the belief-network concept instead of only rules. More speciﬁcally, each ofthe context information (ConIn) would be assigned with a prior-belief. In Bayesian or belief network, prior-belief is always deﬁnedeven before collecting data[23]. Following the collection of data,new belief is obtained. And based on the belief-calculation, a taskwould be executed. Bayesian machine learning belief calculationfollows two simple rules of sum and product rule [23]. Based on this, the paper adapts the formula as outlined in Eq. (1). The equa- tion shows how to calculate the probability of taking an action bythe IoT edge controller. An action is usually taken based on belief ofConIn that affect the action. Therefore, the controller would ﬁrstdetermine which of the ConIn belief are required to take an action.Following this, the controller would calculate the probabilityaccording to:
PrðAÞ¼Xni¼1ðßCI/C3ß CIVÞð 1Þ
Here, ß is the belief andPris the probability, ß CIand ß CIVstands for belief of ConIn and ConIn value respectively. For example, CI is thetemperature sensor and CIV is the value of temperature sensor (e.g.cold). OncePris calculated then it is checked with a threshold value(e.g. a pre-deﬁned value of 75% which can later be changed orlearned),£, when£exceedsPr, new belief is established, as for-mulated in Eq.(2).
ßnew¼ðPr>£Þð 2Þ
Figs. 4 and 5show such belief-networks for SmartHome andSmartFarming respectively where it illustrates which sensors andactuators affect which actuators. However, the prior-belief maynot always be optimal since this is pre-deﬁned; therefore, thepaper proposed to exploit the reinforcement learning techniqueto learn belief through experiences which can then be used toupdate the prior-belief. This learning implies that whenever anevent occurs, it is given a reward (a numerical value). Fig. 6 illustrates how reinforcement learning-like approach is proposedfor an IoT controller. The controller observes actions about a cer-tain IoT application (e.g. SmartFarming) by interacting with theapplication, and increases frequency for each action in a contextstate (set of ConIn). An action here could be collecting ConIn forsensors or performing an actuation. Increasing frequency is compa-rable with giving reward as in reinforcement learning. Frequency isalso increased for each speciﬁc ConIn at the time of different asso-ciated ConIn, e.g. frequency of cold temperature at different time ofthe day for different user locations. And when the frequencyexceeds the threshold level, prior-belief is altered with new beliefas formulated in Eq.(2). Furthermore, when one or more contextvalue is missing from the set of ConIn, the missing value is pre-dicted by analysing the learned experiences. This learning algo-rithm gives advantage over other machine learning algorithmswith respect to the fact that no prior data is required and it learnsfrom its experiences perceived from the environment.4. ModelThis section describes modelling of the proposed approach ofthis paper. The section ﬁrst describes the workﬂow of the modeland follows with describing the algorithms to achieve the goalsset in this paper.4.1. WorkﬂowThe paper proposes to provide distributed intelligence to coun-ter the inﬂux of context information in the IoT domain by provid-ing intelligence both at the edge and at the cloud as illustrated inFig. 3. Edge-intelligence implies that intelligence based on raw-data collected by the IoT controller from the things would be pro-vided as fast as possible. The ﬁrst task of the proposed approach isto contextualize the collected raw-data. This is done by answeringfour fundamental questions of knowledge-hierarchy. Algorithm 1deals with this, i.e. contextualization. Hence, the ﬁrst task of themodel is to check if a raw-data has been contextualized or not; ifthe data is already contextualized i.e. the questions are answered,the ConIn would be forwarded to determine a task after updatingexisting set of ConIn and frequency of each ConIn. Algorithm 2demonstrates the determine task part, it then decides whether toactivate an action based on the available thing’s ConIn (TConIn)or forwards the ConIn to learn experiences. Algorithm 3 illustrates
Fig. 4.Example Belief-Network for SmartHome.78 H. Rahman, R. Rahmani / Applied Computing and Informatics 14 (2018) 73–87learning experiences which are then forwarded for learning and/orprediction. Learning and/or prediction usually take place in scenar-ios when one or more ConIn is missing. In such cases, ﬁrst associ-ated ConIn (AConIn) is obtained which is along with the availableConIn then decides whether to predict or learn an action.Algorithm 4 and 5 take care of learning and prediction respectively.Fig. 7further demonstrates the workﬂow of the proposed approachto alleviateintelligence of thingsby harvestinginformation of things at the edge.4.2. Algorithms4.2.1. ContextualizationThis, contextualization, algorithm deals with answering ques-tions to provide more meaning to the raw-data from a connectedthing. This also corresponds to the second step of the knowledgehierarchy as shown inFig. 3. The algorithm takes the sensedraw-data as input and outputs the contextualized data. It also takescare of calculating frequency of each ConIn, frequency of eachConIn at given ConIn, and AConIn. These frequencies and AConInare then exploited by other algorithms for carrying out the DAP.At this stage, ConIn are mapped to some other context informationthat it may affect, e.g. some actuation and occurrence of the ConInis also saved for future uses, e.g. ﬁnding frequency.Fig. 5.Example Belief-Network for SmartFarming.
Fig. 6.Learning experiences based on reinforcement learning.
Fig. 7.Workﬂow of the proposed approach.H. Rahman, R. Rahmani / Applied Computing and Informatics 14 (2018) 73–87 79Fig. 8.Probability, i.e. belief distribution for turning on heating.
Fig. 9.Probability, i.e. belief distribution for turning on a light.80 H. Rahman, R. Rahmani / Applied Computing and Informatics 14 (2018) 73–874.2.2. Determine taskThis algorithm is where based on ConIn a decision is made toexecute a task or experience is obtained in case of missing ConIn.As the paper proposes employing belief-network for decision mak-ing; the algorithm ﬁrst looks up to the prior-belief of each ConIn ifset of thing’s ConIn (TConIn) is not missing. The prior-belief of eachConIn is predeﬁned; this can be deﬁned at the cloud based on somedata mining or other machine learning algorithms. At the initialstages of installing the IoT controller for a SmartHome, SmartFarm-ing, e-Health, etc. applications, user could be involved to set theprior-belief based on individual preferences, i.e. each IoT controllercould be personalized and personalization could be saved and ini-tialized at the edge. Later on, the prior-belief can be altered by thecontroller based on experiences – through learning. As for thispaper, prior-belief has been predeﬁned which has been distributedamong simulated ConIn (seeFigs. 8 and 9). After retrieving prior- belief for each of the TConIn, probability for each task is calculatedusing Bayesian Theorem as shown in Section 3and in[23]; and actions related to TConIn are executed when the calculated proba-bility exceeds the pre-deﬁned threshold value. Exploring belief-network at the controller is deemed efﬁcient compared to usingonly rules (see Section5.2for more). Next, when one or moreConIn is missing from TConIn, the algorithm ﬁrst fetches its ACo-nIn. Once the AConIn is found, then TConIn and AConIn are fed intoﬁnd experience algorithm for further analysis or prediction.Algorithm 1Contextualization1. Initialize Connection/communication to collect data2.whilethere is sensed datado3.ifsensed data is not contextualizedthen 4. what: raw-data5. where: origin of the raw-data6. when: time of occurrence7. who: originator of the raw-data8.else ifsensed data is contextualizedthen 9. ﬁnd its frequency10. frequency at the given ConIn11. what other ConIn it is related to, e.g. some actuation12. update ConIn13.end if14. determineTask(TConIn);15. addToAConIn();16. addToTConIn();17.end whileAlgorithm 2Determine Task1. Fetch TConIn2.forall TConIndo3.whileTConIn is not emptydo4. Look up the prior-belief for each ConIn5. Calculate probability of tasks related to TConIn (Eq.(1))6.ifprobability of task > thresholdthen 7. Execute task(s), i.e. decision8.end if9.end while10.whileTConIn is not emptydo11. ﬁndAConIn(TConIn)12. predict (TConIn);13.end while14. ﬁndExperience(TConIn, AConIn);15.end for4.2.3. Find experienceThis algorithm ﬁnds experiences of a thing in the IoT domain. Ittakes TConIn and AConIn as input and returns thing’s experiences.This algorithm checks each of the ConIn and stores frequency foreach tuple of ConIn (e.g. {
what,when}, {what,when,where}, {what, when,where,who}). This frequency based on the experience later isused to ﬁnd belief, learning and prediction - thereby, improve per-formance of tasks. For example, when one or more ConIn is miss-ing, this tuple of context information’s frequency is used topredict the missing ConIn. Further, the frequency based on experi-ence is used to learn action for each set of ConIn and later prior-belief can be altered.Once the edge controller has learned the experiences by countingfrequency of each ConIn tuple and total frequency of each set ofConIn, this algorithm can learn from the experiences to take anaction. This is similar to reinforcement learning where an agentlearns from its environment which gives reward (a numerical value)for each action. Similarly, this algorithm also increases frequency forevery action, and saves occurrence of every ConIn tuple as illustratedinFig. 6. This reward or frequency is then used to calculate belief ofan action. Once the algorithm has calculated belief of certain ConIn, itchecks with a threshold value (the choice of value could be deter-mined at the cloud by human-expertise, by exploring machine learn-ing technique, by the user during personalization) and when checkreturns true, it helps the controller to learn actions related to thisConIn. However, if belief fails to meet the desired threshold value,it can then decide whether to send to cloud for high-level action orno action is required to trigger. Algorithm 4 describes this.4.2.4. PredictionThis algorithm is employed to predict missing values in a set ofConIn. This algorithm takes TConIn as input with missing values,and ﬁnds other ConIn (OConIn) for the available ConIn. Followingthis, the algorithm ﬁnds frequency for each OConIn. It then checksif the frequency is the highest among OConIn frequencies; whenthe frequency is the highest frequency it identiﬁes as the mostprobably missing ConIn. For example, if the algorithm is given atuple such as {when,who,where}, the OConIn for this tuple wouldbewhat; now assuming thatwhathas the four values {very cold, cold, comfort, warm}, the algorithm would fetch probability (fromthe OConIn frequencies) for each of whatvalue. And ifcoldhas the maximum probability, e.g. 45%, the algorithm would predict coldas the missing ConIn.Algorithm 3Find Experiences1. Fetch TConIn2.foreach what (sensed data)do3.foreach when (time)do4. add to tuple5. increase frequency6.foreach where (location)do7. add to tuple8. increase frequency9.foreach who (originator)do 10. add to tuple11. increase frequency12. ﬁnd AConIn13. add to tuple (TConIn, AConIn) to learnexperiences14. learnBelief(TConIn, AConIn);15.
end for16.end for17.end for18.end forH. Rahman, R. Rahmani / Applied Computing and Informatics 14 (2018) 73–87 81Algorithm 4Learn Belief1. Fetch TConIn, AConIn2.fori = size of TConIndo3.forj = size of AConIndo4.ifTConIn(i) is associated with AConIn(j) then 5. fetch frequency of (TConIn(i), AConIn(j))6. calculate probability of (TConIn(i), AConIn(j))7.ifprobability > threshold (Eq.(2))then 8. new belief is obtained9.end if10.else if11. forward for higher level action (to cloud)12.end if13.end for14.end for
Algorithm 5Prediction1.foreach available tuple of ConIndo 2. ﬁnd OConIn for this tuple3.foreach available tuple of ConIndo 4. fetch frequency5.iffrequency of OConIn equals highest frequency then 6. ConIn predicted7.end if8.end for9.end for5. Results & discussionsThis section demonstrates the evaluation of the concept men-tioned in the earlier sections. This paper has employed simulationsas experiments[32,33]for verifying feasibility of the proposedapproach. Simulations generate new data about empirical systems[32]which is also a kind of experiment and allow to carry scientiﬁcinquiry of a model with less-cost and more quickly [33]. The model has been developed in Java and the developed model has beentested on a raspberry pi 2 (Model B) [12]to observe performances since the paper mentioned it as a suitable candidate for edge con-troller. By consulting earlier research [11], data about a SmartHome has been generated which is randomized in each sim-ulation. These simulated data are later fed into the developedmodel to generate new data to verify the feasibility of the model.First of the objectives is investigation of employing belief-network instead of only rules where it is shown how such belief-network can help in reducing rule domination and obtaining fasterresponse time. Subsequently, the results of applying belief-network and reinforcement learning to predict or learn actionshave been portrayed. Each simulation has been run for 100 timesexcept for prediction part which has been run few hundred times;and mean values for each simulation are reported. Evaluation ofthe algorithms can be seen in the following sub-sections.5.1. Simulation scenarioIn order to verify the feasibility of the proposed approach in thispaper, the algorithms are veriﬁed by simulated ConIn values. Sim-ulation scenario for each of the DAP is presented in this sub-sectionwhere decision is made based on the prior-belief of each ConIn. Inthe following example of a SmartHome scenario, assuming that
Table 1Advantages of Belief-Network over rule-based.
What When Motion Location Heating Lighting Total ConIn Increase in ConIn Total rules % increase in rules3 3 2 2 2 2 14 - 144 -4 3 2 3 2 2 16 2 288 1004 4 2 4 2 2 18 4 512 2555 5 2 4 2 2 20 6 800 4566 5 2 5 2 2 22 8 1200 733
Fig. 10.(a) Rules increase; (b) response time.82 H. Rahman, R. Rahmani / Applied Computing and Informatics 14 (2018) 73–87Fig. 11.Pseudo-code for turning on heating in belief-network.
Fig. 12.Simulated ConIn examples and probability for actuations.H. Rahman, R. Rahmani / Applied Computing and Informatics 14 (2018) 73–87 83there are four actuators, e.g. heating, lighting, making breakfastand dinner (could be more for example: door, robot cleaner, win-dow blinds control, etc.), probability for each of the actuation is1.0 (since probability cannot be over 1.0) which is then distributedamong the ConIn that affect the actuation. For instance, activationof heating is dependent mainly on temperature, user’s current loca-tion, time and motion sensor. Of these 4 ConIn, temperature affectsheating mostly followed by user’s location, time and motion sensor.Therefore, temperature is given 0.5 of probability followed by 0.2 toboth location and time, and 0.1 to motion sensor. Motion sensorgets low probability because user might be at home but no physicalactivity (e.g. sleeping) is detected. However, temperature can befurther divided into many sub-categories (e.g. cold, comfort, warm;or low, medium, high) and each of these sub-categories would thenbe given prior-belief. Obviously cold or low temperature affectsheating more than any other ConIn, so this ConIn would get higherbelief compared to others.Figs. 8 and 9show the prior-belief distri- bution for heating and lighting actuation respectively. However,the prior-belief that is distributed among the ConIn may not beoptimal, optimal belief distribution may be done by employingother type of learning techniques at the cloud as part of high-level intelligence or during personalization as mentioned earlier.5.2. Belief-network vs. rule-based solutionAs the number of connected things increase in IoT so does the vol-ume of context information. This high inﬂux of ConIn would requirea large number of rules to execute a certain task. For instance, in aSmartHome scenario as shown earlier in example 1 (Section 3.1.1), if we want to apply rules for events related to a temperature sensorat bedroom, where it is assumed that sensed temperature values aregrouped in different ranges (e.g. cold, comfortable, warm (3)), andafter contextualizing the temperature values with AConIn ( location: home, away (2);time: morning, afternoon, evening (3);motion: yes,no (2)) would require (3/C22/C23/C22 =) 36 rules to activate any action comparing every conditions based on these ConIn. Now ifthere are 3 more ConIn are added, the required rules would become108 (= 3/C23/C24/C23) - a whooping 200% increase in the rules. Thisgives an idea about how depending only on the rules for intelligencewould be impractical for thousands, or even more, of things for a par-ticular controller.Table 1andFig. 10(a) further demonstrate this dependency on the rules.FromFig. 10(a) andTable 1, it is seen that a total of 1200 rulesmight be required for a total of 22 ConIn, whereas for ConIn of 14the rule shrinks to 144. This is roughly 733% increase in the numberof rules requirement only for 8 ConIn increase. The requirement ofnumber of rules for every condition to be met follows the productrule of thing’s ConIn. This can be obtained by the following formula:
Nr¼Yni¼1NCIið3Þ
Nr= Total number of rules, N CI= Number of ConIn, n = total numberof context state
Now if belief-network, i.e., prior-belief, is employed instead ofrules for each of the ConIn as shown in earlier section, the require-ment for rules decrease drastically. The total number of rulesneeded by assigning prior-belief for each ConIn is equivalent tothe total of number of ConIn plus one rule for taking each actionfor combined belief as formulated in Eq. (4).Fig. 10(a) shows two results of belief-network with 1 and 20 actions to be taken, thissuggests that even with increase in number of actions, rules forbelief-network remain lower.Fig. 11illustrates pseudo-code of rules for employing belief-network for taking an action. Thepseudo-code also signiﬁes the fact that the more ConIn are there,the more advantageous employing belief-network becomes.
Nr¼Xni¼1NCIiþN A ð4Þ
Fig. 13.Results of prediction for missing value (1).84 H. Rahman, R. Rahmani / Applied Computing and Informatics 14 (2018) 73–87NArefers to the number of actions to be taken for N CI.
Besides, belief-network demonstrates faster response timecompared to only rule-based approach as illustrated in Fig. 10(b). The ﬁgure was plotted in logarithmic scale, and ‘x’ times of sameConIn was used to measure the response time (in nanosecond)on raspberry pi for both belief-network and rule-based approach.The result shows that belief-network and rule-based approachrequired almost same response time for the ﬁrst set of ConIn whennumber of rules for both of these were almost same; however, asthe number of ConIn increase belief-network required lowresponse time compared to only rule-based approach. Thisresponse time is one of the signiﬁcant performance metrics in edgecomputing and the proposed approach has demonstrated fasterresponse time.The example further signiﬁes the advantages belief-networkprovides over only rule-based solution. The controller only needed11 rules for 10 ConIn to turning on heating, whereas rule-basedwould have to deﬁne a rule for every condition for each ConInwhich would make number of rules to be 36. However, belief-network requires to provide prior-belief which rule-based doesnot necessarily need to. This prior-belief distribution among ConIncan further be learned or predicted by utilizing concept similar toreinforcement learning as shown in the following sub-section.5.3. Learning and predictionThe example shown above, i.e. prior-belief for each ConIn,works when all the ConIn are available. However, in a situationwhen one or more ConIn is unavailable, the IoT controller wouldbe unable to make a decision since one or more of the beliefs toexecute a certain task are missing. In such cases, the IoT controllerwould have to predict through learned experiences to take actions.Learning in this paper has been limited to experiences only wherethe IoT controller would learn frequency of each ConIn and ConIntuple. However, learning an action based on ConIn and AConIn isalso possible which has been left for future work. Fig. 12shows results of running the model of the proposed approach assumingthat no ConIn value is missing. This ﬁgure illustrates how collectedraw-data is being contextualized (TConIn) and four such examplesare shown. In the 3rd example, TConIn is {warm, home, morning,yes} which is interpreted as ‘‘temperature is warm in the morningat home and the user is awake (motion sensor detected a move-ment)”. Probability for each actuation is calculated using Eq. (1) and presented in the ﬁgure. Heating probability is 0.36 for the3rd ConIn tuple which indicates that heating does not need to beactivated, even though user is at home but temperature is warm;lighting probability is high at 0.77 which indicates light shouldbe turned on. The actuations that would be activated based onthe following TConIn examples are: lighting and breakfast (2nd &3rd TConIn); lighting and dinner (4th TConIn).Fig. 13shows results for prediction, after running few hundredmore simulations, when a ConIn is missing. Only temperaturevalue missing has been considered for proof-of-concept of thealgorithms. For the example shown in Fig. 12, frequency and expe- rience (algorithm 1 and 3) for each particular ConIn are storedwhich are subsequently used to predict the missing values. Theﬁrst TConIn tuple inFig. 13shows that available ConIn tuple:{home, bedroom, morning}, here bedroom refers to the ‘ who’ that is the identiﬁcation of the context originator. The probability formissing temperature value is 0.41, 0.28 and 0.31 respectively for
Fig. 14.Results of prediction for missing value (2).H. Rahman, R. Rahmani / Applied Computing and Informatics 14 (2018) 73–87 85cold, comfort, and warm. Therefore, the prediction algorithm pre-dicts ‘‘cold” as the most probable missing temperature for this par-ticular ConIn tuple. Afterwards, these predicted values are usedwith the available ConIn and actions are taken against this ConIntuple. For the ﬁrst ConIn tuple, heating, lighting and breakfastactions are taken which seem an accurate predicted estimationsince user is at home in the morning. Thus, turning on these actionsare the most probable actions. The algorithm through the experi-ences learns to improve its tasks. However, the probability formissing value illustrated inFig. 13appear very close, the reasons being the randomness of the three-simulated value of temperaturewhere after few hundred simulations each value might appearequally.Fig. 14further shows results of prediction algorithm withﬁve simulated value of temperature. The probability of each valuein this particular case seems more spread. In either case, the pre-diction algorithm deems successful in predicting the most proba-ble missing ConIn value and thereby improving the controller’sperformance in executing tasks. Furthermore, Figs. 13 and 14also suggest that algorithms are successful in learning the frequencies,e.g. frequency for each ConIn, ConIn tuple at given ConIn.6. ConclusionsInternet of Things, the next technological revolution in the cur-rent world, applications have so far been relied on cloud-basedsolutions for computations, analytics, etc. While the advantagesoffered by cloud-based solutions cannot be disregarded; the needfor computations, analytics closer to the things, i.e. at the edge isgaining growing attention recently. Edge analytics are dominatedby rules which are computationally expensive and fail to scale wellwith the ever-mounting number of things in the IoT paradigmwhich mandate to look into alternative solution such as AI basedsolutions. AI based solutions can also cater for uncertain and newevents. The paper has presented an AI based distributed-intelligence assisted Future Internet of Things Controller (FITC)that utilizes both edge and cloud based intelligence. More speciﬁ-cally, edge controller is employed to provide low-level intelligenceand cloud controller would provide high-level intelligence.It is foreseen that the combination of IoT and AI is inseparable,and edge controller by utilizing AI techniques closer to the thingswould allow necessary edge analytics. Belief-network enables tomake decisions based on prior-belief and it further can learn newbelief based on probability. The proposed IoT edge controller fur-ther exploits capability similar to the reinforcement learning tolearn experiences which can then be used for learning probabilityand making prediction. To the best of our knowledge, this paper isthe ﬁrst to propose such novel idea of employing belief-networkand reinforcement learning at the edge of IoT. The feasibility ofthe proposed approach has been backed up by simulatedSmartHome scenario on a raspberry pi as a proof-of-concept. Fur-thermore, mathematical formulas for obtaining probability, newbelief and rules for belief-network have been presented in thispaper. Results conveyed here suggest that employing belief-network considerably reduces requirement of rules and enablesfaster response time for the edge controller; it also allows learningnew belief based on experiences. Making prediction is one of theimportant capabilities that was missing from earlier edge solutionswhich this paper has successfully achieved to make prediction ofthe missing ConIn. The paper has also presented algorithms toachieve the aforementioned capabilities. Further, an algorithm toprovide meaning to the raw-data inspired by the information-knowledge hierarchy has also been presented. Given the evidencesreported in this paper, the approach can be used in many IoT appli-cations such as SmartHome, SmartFarming, SmartHealth, WasteManagement, etc. which can be explored in the future.Moreover, to complement the work presented in this paper, fewof the work that can be done in future are as follows: further ver-ifying the FITC performance by incorporating a cloud controlleralong with the presented edge controller; a distributed edge con-troller for large scale IoT applications such as trafﬁc/environmentmanagement, SmartAgriculture, etc.; learning was limited to expe-riences and ﬁnding new belief in this paper and this could beextended to learning other actions such as when to sense data,activate an actuation, when to send data to cloud, etc.; providingmulti-modal Context-Aware reasoNing (CAN) in order to employedge controller for various IoT applications. It would also be inter-esting to investigate dynamic behaviour of the controller.References
[1]H. Sundmaeker, P. Guillemin, P. Friess, S. Woelfﬂe, Vision and Challenges forRealising the Internet of Things Technical Report, European CommissionInformation Society and Media, 2010
. [2] M. Ali Feki, F. Kawsar, M. Boussard, L. Trappeniers, The Internet of things: thenext technological revolution, Computer 46 (2) (2013) 24–25, http://dx.doi. org/10.1109/MC.2013.63. [3]
J. Gubbi, R. Buyya, S. Marusic, M. Palaniswami, Internet of things (IoT): a vision,architectural elements, and future directions, Future Gener. Comput. Syst. 29(7) (2013) 1645–1660
.[4]
C. Perera, A. Zaslavsky, P. Christen, D. Georgakopoulos, Context awarecomputing for the Internet of Things: a survey, IEEE Commun. Surv.Tutorials 16 (1) (2014) 414–454, First Quarter
. [5] OpenIoT: Open Source Solution for the Internet of Things into the Cloud,January 2012. <http://open-platforms.eu/library/openiot-the-open-source-internet-of-things/> (last accessed: January 2017).[6] H. Rahman, R. Rahmani, T. Kanter, Enabling scalable publish/subscribe forlogical-clustering in crowdsourcing via mediasense, in: IEEE Science andInformation (SAI) Conference 2014, August 27–29, 2014, London, UK, 2014.[7] A. Antonic´, M. Marjanovic´, K. Pripuzˇic´, I.P. Zˇarko, A mobile crowd sensing ecosystem enabled by CUPUS: Cloud-based publish/subscribe middleware forthe Internet of Things, Futur. Gener. Comput. Syst. 1 (2015) 1–16, http://dx.doi. org/10.1016/j.future.2015.08.005 . [8] A. Botta, W. de Donato, V. Persico, A. Pescapé, On the integration of cloudcomputing and internet of things, in: 2014 International Conference on FutureInternet of Things and Cloud, Barcelona, 2014, pp. 23–30. http://dx.doi.org/10. 1109/FiCloud. 2014.14.[9] Cisco White Paper, Fog Computing and the Internet of Things: Extend theCloud to Where the Things Are < https://www.cisco.com/c/dam/en_ us/solutions/trends/iot/docs/computing-overview.pdf > (last accessed: January 2017).[10] C. Perera, P.P. Jayaraman, A. Zaslavsky, P. Christen, D. Georgakopoulos,MOSDEN: an internet of things middleware for resource constrained mobiledevices, in: 2014 47th Hawaii International Conference on System Sciences,Waikoloa, HI, 2014, pp. 1053–1062. http://dx.doi.org/10.1109/HICSS.2014. 137.[11] H. Rahman, R. Rahmani, T. Kanter, M. Persson, S. Amundin, Reasoning Serviceenabling SmartHome Automation at the Edge of Context Networks, NewAdvances in Information Systems and Technologies, vol. 444, SpringerInternational Publishing, 2016, pp. 777–786, http://dx.doi.org/10.1007/978- 3-319-31232-3_73.[12] Raspberry Pi. <https://www.raspberrypi.org/ > (last accessed: January 2017). [13]
A.M. Rahmani, T.N. Gia, B. Negash, A. Anzanpour, I. Azimi, M. Jiang, P. Liljeberg,Exploiting smart e-Health gateways at the edge of healthcare Internet-of-Things: a fog computing approach, Future Gener. Comput. Syst. (2017)
. [14] Amazon AWS IoT. <https://aws.amazon.com/iot/ > (last accessed: January 2017).[15]
K. Ashton, That ‘‘Internet of Things’’ thing, RFiD J. (2009) . [16] H. Rahman, T. Kanter, R. Rahmani, Supporting self-organization with logical-clustering towards autonomic management of Internet-of-things, Int. J. Adv.Comput. Sci. Appl. (IJACSA) 6 (2) (2015), http://dx.doi.org/10.14569/ IJACSA.2015.060204.[17]
A.M. Haubenwaller, K. Vandikas, Computations on the edge in the internet ofthings, in: Procedia Computer Science, The 6th International Conference onAmbient Systems, Networks and Technologies (ANT 2015), vol. 52, 2015, pp.29–34
.[18]
F. Bonomi, R. Milito, J. Zhu, S. Addepalli, Fog computing and its role in theinternet of things, in: Proceedings of the First Edition of the MCC Workshop onMobile Cloud Computing (MCC ’12), ACM, New York, NY, USA, 2012, pp. 13–16
. [19] M. Aazam, E.N. Huh, Fog computing and smart gateway based communicationfor cloud of things, in: 2014 International Conference on Future Internet ofThings and Cloud, Barcelona, 2014, pp. 464–470.[20] S. Sarkar, S. Chatterjee, S. Misra, Assessment of the suitability of fog computingin the context of internet of things, IEEE Trans. Cloud Comput. 99 (2015) 1,http://dx.doi.org/10.1109/TCC.2015.2485206 . [21] M. Kavis, Forget Big Data – Small Data is Driving The Internet of Things.<http://www.forbes.com/sites/mikekavis/2015/02/25/forget-big-data-small-86 H. Rahman, R. Rahmani / Applied Computing and Informatics 14 (2018) 73–87data-is-driving-the-internet-of-things/#736c8b98661b > (last accessed: January 2017).[22] XpertRule Software Ltd. < http://xpertrule.com/> (last accessed: January 2017). [23]Z. Ghahramani, Probabilistic machine learning and artiﬁcial intelligence,Nature 7553 (2015) 452–459
. [24]
P.P. Jayaraman, C. Perera, D. Georgakopoulos, S. Dustdar, D. Thakker, R. Ranjan,Analytics-as-a-service in a multi-cloud environment through semantically-enabled hierarchical data processing, Softw. Pract. Exp. (2016)
. [25]
J. Soldatos, N. Kefalakis, M. Hauswirth, M. Serrano, J.-P. Calbimonte, M. Riahi, K.Aberer, P.P. Jayaraman, A. Zaslavsky, I.P. Z ˇarko, et al., in: Interoperability and Open-Source Solutions for the Internet of Things, Springer, 2015, pp. 13–25
. [26]
K. Hong, D. Lillethun, U. Ramachandran, B. Ottenwälder, B. Koldehofe, Mobilefog: a programming model for large-scale applications on the internet ofthings, in: Proceedings of the Second ACM SIGCOMM Workshop on MobileCloud Computing (MCC ’13), ACM, New York, NY, USA, 2013, pp. 15–20
. [27] P. Barnaghi, F. Ganz, C. Henson, A. Sheth, Computing perception from sensordata, Sensors, IEEE, Taipei, 2012, pp. 1–4, http://dx.doi.org/10.1109/ ICSENS.2012.6411505.[28] R.S. Sutton, A.G. Barto, Reinforcement Learning: An Introduction, The MITPress Cambridge, Massachusetts, London, England. < https://webdocs.cs. ualberta.ca/~sutton/book/ebook/the-book.html > (last accessed: January 2017). [29] SmartThings: Smart Home, Intelligent Living. < https://www.smartthings.com/ > (last accessed: January 2017).[30] CNET Smart Home – CNET. < http://www.cnet.com/smart-home/ > (last accessed: September 2016).[31] EDYN Smart Gardeing. < https://edyn.com/> (last accessed: January 2017).[32]A. Barberousse, S. Franceschelli, C. Imbert, Computer simulations asexperiments, Synthese 169 (3) (2009) 557–574
. [33]
E.C. Parke, Experiments, simulations, and epistemic privilege, Philos. Sci. 81 (4)(2014) 516–536
.Hasibur Rahmanearned his Philosophy of Licentiate degree in Computer andSystems Sciences in 2015 from Stockholm University, Sweden where he is currentlyworking towards his ﬁnal doctoral degree. Prior to this, he received his M.Sc. degreein Computer Engineering from Mid Sweden University in 2013. Immediate after hejoined Stockholm University as a Research Assistant where he started his currentresearch in Internet of Things. He has previously conducted research in WirelessCommunications -CDMA, Single Frequency Networks, Mobile TV, DVB-T/H, etc. Hiscurrent research includes autonomic management of IoT, Context Informationmanagement, Intelligent SmartCity applications, Context-Aware Reasoning ser-vices, etc.Rahim Rahmaniearned a Ph.D. in communications in heterogeneous networks andhe is an Associate Professor of Computer Science at the Department of Computerand System Sciences at Stockholm University, where his research focuses on Col-laborative ubiquitous services and context-aware mobile communication and ser-vice architectures and self-organizing application infrastructures. He is a member ofthe editorial board of International Journal of Wireless Networking and Commu-nications.H. Rahman, R. Rahmani / Applied Computing and Informatics 14 (2018) 73–87 87