Design of a 4 DOF parallel robot arm and theﬁrmware implementationon embedded system to transplant pot seedlings
Rahul K., Hifjur Raheman ⁎, Vikas Paradkar
Agricultural & Food Engineering Department, Indian Institute of Technology Kharagpur, India
abstract article info
Article history:Received 17 July 2020Received in revised form 14 September 2020Accepted 14 September 2020Available online 21 September 2020
Keywords:RobotﬁrmwareParallel robot armAutomationSoC microcontrollers, pot seedlingsThis paper presents aﬁrmware design and its implementation on a real time embedded system for driving a 4DOF parallel robot arm. Theﬁrmware primarily comprised of two components to produce motion of the robotarm: a) generation of continuous position coordinates and b) generation of actuating signals. These two compo-nents were processed in two different microcontrollers with a common communication bus. The position gener-ation algorithm produced and transmitted continuous position data to the motion generation algorithm in theform of G-code strings by reading the input positions which were previously stored by the user in EEPROM mem-ory of the microcontroller. The receipt of a handshake signal synchronized the data transmission between thesecomponents through a communication bus. An LCD display and keypad were used as human-machine interface(HMI) to communicate with the user to set the robot target coordinates. The mechanical structure of the robotarm comprised of multiple links which were actuated by stepper motors. The workspace boundary were sensedby limit switches. The kinematic equations represented the gripper position for the corresponding input joint an-gles. A microcontroller was used to compute kinematic equations of the robot arm with the help of motion gen-eration algorithm to generate actuation signals for the simultaneous movement of robot joints. The kinematicequations were solved with the dual-core capability of the microcontroller using real time operating system(RTOS), which made the computation faster with an average computation time of 198 μs per step. The developed ﬁrmware was implemented and tested on a 4 DOF parallel manipulator using embedded microcontrollers forcontinuous pickup and place of the paper pot seedlings for automating the metering of pot seedlings. The cycletime taken for pickup and dropping of each seedling was 3.5 s with a success rate of 93.3%.© 2020 The Authors. Publishing services by Elsevier B.V. on behalf of KeAi Communications Co. Ltd. This is an openaccess article under the CC BY license ( http://creativecommons.org/licenses/by/4.0/ ).
1. IntroductionA robotic system generally consists of a motion generating mechan-ical hardware module, an electronic control module, a software modulethat run a decision support system to drive the electromechanical actu-ators and a communication protocol for data transfer within and outsidethe system (Angeles, 1997). The electronic module would consist of em-bedded microcontrollers, PLC's, or other advanced hardware such asFPGA's to generate the actuating signals. These signals are then receivedby the motor drivers to supply driving power to the actuators. Powerregulators are used to provide different operating power levels foreach component according to its working range. Also, multiple sensorsare used to monitor the environment ( Joseph Raj et al., 2019) and the robot operating parameters (position measuring devices such as en-coders, limit switches and potentiometers) ( Chen et al., 2018). The elec- tromechanical actuators such as stepper and servo motors providedriving torque to the robot joints through power transmission mecha-nisms like gears, timing belts and pulleys with minimal backlash. Therobotﬁrmware implemented on PC or embedded microcontrollerplays a crucial role in developing the necessary actuation signals bymaking decisions through task allocation, algorithm computation anddata transmission. Among the various modules of the robotic system,theﬁrmware implemented on the embedded microcontroller decidesthe control and action of each module to perform the prede ﬁned tasks. The typical function of a robotﬁrmware is shown inFig. 1. Theﬁrmware can fetch and modify data from storage memory to per-form the tasks according to the instructions provided by the user. It drivesthe actuators by reading the sensors connected with the robotic system. Itdecides to channel the data transfer either internally or externally to read,write or display data through the required data bus.1.1. Literature reviewRobot operating system (ROS) is an open-source ﬁrmware architec- ture, mainly designed for the development of robotic tools. It consists ofseveral libraries which are capable of performing complex tasks such asnavigation robots, multiple robot coordination assisted with machinevision and sensor integration.Araujo et al. (2015)developed a mobile robot platform using an Arduino board controlled by ROS. The controlArtiﬁcial Intelligence in Agriculture 4 (2020) 172 –183
⁎Corresponding author.E-mail address:hifjur@agfe.iitkgp.ac.in(H. Raheman).
https://doi.org/10.1016/j.aiia.2020.09.0032589-7217/© 2020 The Authors. Publishing services by Elsevier B.V. on behalf of KeAi Communications Co. Ltd. This is an open access article under the C C BY license (http:// creativecommons.org/licenses/by/4.0/ ).
Contents lists available atScienceDirect
Artiﬁcial Intelligence in Agriculture
journal homepage:http://www.keaipublishing.com/en/journals/artificial-intelligence-in-agriculture/logic was developed in a PC and the command signals were sent toArduino through a USB communication. This robot was built for educa-tional purposes to demonstrate swarm robotics, multi-robot surveil-lance and rescue tasks. The robot used an onboard camera to navigateand send the environment data wirelessly. Kamel et al. (2017)devel- oped a model in ROS for trajectory tracking technique for unmanned ae-rial vehicles (UAV). Though ROSﬁrmware architecture is designed forsolving complicated robotic operations, advanced hardware with highcomputation power is required to deploy the code blocks developedin ROSﬁrmware. Therefore, still there is a requirement for a simpleand efﬁcientﬁrmware structure that could be implemented on a com-mercially available system on chip (SoC) microcontrollers.The most notable open-sourceﬁrmware available for driving a ro-botic system using SoC is ‘Marlin’ﬁrmware (Wijnen et al., 2016; Kruger et al., 2018). Marlin is an open-source software constructedusing C++ language, dedicatedly developed for operating 3D printersusing embedded microcontrollers. Some typical functions of Marlinﬁrmware are: a) positioning the printing nozzle in x, y and z coordinatesaccording to the commanded locations by a slicing software, b) drivingthe extruder for continuous feeding of the printing ﬁlament, c) heating theﬁlament and printing bed by PID control with the feedback of tem-perature sensors. Marlin takes the input of NC (G-codes and M-codes)codes (Arroyo et al., 2004) to operate the 3D printer, which producesreal 3D components by melting an input ﬁlament at high temperature through an extruder. A list of essential G-codes for positioning the print-ing nozzle of a 3D printer is given inTable 1. Tiansong et al. (2019)developed a 3D printed 3 DOF serial robotusing open source Marlinﬁrmware controlled by ATMEGA 1284P mi-crocontroller. The robot was actuated by geometric codes generatedby Pronterface software installed on a desktop personal computer(Surange and Gharat, 2016).Nejatimoharrami et al. (2017)developed a liquid handling robot equipped with machine vision for automatingchemical handling. It is a gantry type robot controlled by Marlin ﬁrm- ware installed on an Arduino Mega microcontroller board. AlthoughMarlin architecture could be modiﬁed for operating a robotic systemusing commercial microcontrollers, it has several drawbacks such as:Marlin software requires an additional system to input the positionalcoordinates. Generally, the robots run by Marlin ﬁrmware uses an exter- nal PC to generate the positional G-code strings. Also, the amount ofmemory requirement of Marlinﬁrmware is high because of additionalmodules written for the functioning of 3D printer components. The op-eration speed cannot be improved signiﬁcantly due to its core design (3D printers does not require high operation speed) and it requires anexternal code generation module to direct the actuators.Many a researchers have been using Marlin ﬁrmware to develop a ro- b o t i cs y s t e mt op e r f o r ms e v e r a lu s e f u lt a s k s .T h i se x t e r n a ls o f t w a r es u p -plies the necessary codes to manipulate the robotic system. It createsdifﬁculty in operating the robotic system in a hostile environment andwith space constraints. This paper presents a ﬁrmware architecture and implementation algorithms to run a 4 DOF parallel robot, which couldbe deployed in an embedded system that comprised of SoCmicrocontrollers, HMI and electronic components which eliminated theneed of an external PC to generate the positional coordinates. To imple-ment and validate the developedﬁrmware, it was implemented on areal time embedded hardware, a robot arm based vegetable transplanterwas selected to meter the seedlings of vegetables raised in paper pots.1.2. Automation of vegetable transplantationVegetable transplanters are used in agriculture to simplify the man-ual process of planting already grown seedlings in agricultural ﬁeld to improve the yield and reduce drudgery of the human labor ( Kumar and Raheman, 2011;Dihingia et al., 2018). Pot seedling transplanters generally consist of a seedlings pickup mechanism (extracts seedlingsfrom a feeding conveyor and place it into a drop tube one by one), con-veying unit (to continuously transfer seedlings towards the pickup unit)and a soil opening-closing unit. Researchers have been working on au-tomating this mechanical transplanting process by including robots asa picking mechanism to improve its efﬁciency and to reduce the input power requirement (Hwang and Sistler, 1986;Hu et al., 2014;Rahul et al., 2019). The robot used in these transplanters picked up seedlingsone by one from multiple numbers of ﬁxed pickup locations and dropped it into aﬁxed dropping point (Fig. 2). To maintain a delicate picking without damaging the seedlings andto drop the picked seedlings without collisions with other components
Table 1List of essential G-codes for the nozzle spatial manipulation of 3D printer.Code FunctionG00 X Y Z Rapid linear movementG01 X Y Z Linear motion of nozzle at a speci ﬁed speed G28 Homing of X, Y and Z coordinatesG02 and G03 CW and CCW arc at a speci ﬁed radiusNomenclatureθ
a Active arm joint angleθ
p Passive arm joint angleθ
tr Transmission angleαPassive arm angle with respect to active-passive jointorientationβActive arm linear angle with horizontalγInner angle of active armC(x,y) End effector position in Cartesian planeCOM busCommunication busEEPROMElectrically Erasable Programmable Read Only MemoryHMIHuman Machine Interfacek and s Linear distance between origin of active arms and endeffector positionL
1 Length of active armL
2 Length of passive armLCDLiquid crystal displaym Horizontal distance between the active-passive jointsM
dep Elbow position memory address for dropping positionM
dp Dropping point memory addressM
pep Elbow position memory address for pickup pointM
pp Memory address of pickup position valuen Vertical distance between the active passive jointsO Origin of the robot axisPGFPosition Generation FirmwareSGFSignal Generationﬁrmware
Fig. 1.Functions of a robotﬁrmware.R. K., H. Raheman and V. Paradkar Artiﬁcial Intelligence in Agriculture 4 (2020) 172 –183
173of the transplanter, the manipulator needs to move from dropping point(initial coordinates) to each of the pickup locations through a via point.After picking, the manipulator again reaches the drop point through thesame via point. The via point is known as the approach point for eachpickup location. A systematic motion requirement of a robot for seed-ling handling was reported byRahul et al. (2019). The optimal robotic path requires an approach point, gripping point and a dropping point.The operational speed of picking should be lesser than the speed of ap-proach and dropping. This entire problem for the robotic task is consid-ered as a pick and place application with multiple ﬁx e dp i c k u pp o s i t i o n s and one drop point at variable operating speed. Hence, the hardwareand software embedded control system for the robot in an automatedtransplanter requires the following features:1) A user interface system to modify the robot motion coordinates andits parameters without the aid of an external computer2) A fault diagnosis system to detect the status of sensors and actuatorswhenever required3) Display of the operating parameters (i.e., number of droppings andexecution code received) through HMIIn this study, a robot controlﬁrmware was constructed and de-ployed on a real time embedded system to control a 4 DOF parallel ma-nipulator robotic system used for continuous pick and place operationsof paper pot seedlings in an agriculturalﬁeld. The details of its develop- ments and its laboratory evaluation are given in the following sections.2. Materials and methods2.1. Firmware architecture of the robotic systemThe proposedﬁrmware architecture of the robot system is shown inFig. 3. It consisted of two components: 1) signal generation ﬁrmware (SGF) and 2) position generationﬁrmware (PGF).Au s e ri n t e r a c t i v eH M Iw a su s e dt os t o r eo rm o d i f yt h ed a t af o rp i c kand place task such as the number of positions, approach point, pickuppoint and dropping point in the EEPROM memory at their speci ﬁed mem- ory addresses. Also, an external communication bus was used to monitorand control the robotic system by a remote computer. During the pick andplace operation, PGF read the position data (X, Y, Z location) fromEEPROM memory and compiled it into a G-code string (Ex. G01 X d
1, Yd
2,Z d 3; where d kis the kthposition data). The generated G-code wasthen sent to the SGF and waited for the handshake signal to indicate thecompletion of the assigned task. The SGF read the input string andinterpreted the X, Y and Z position coordinates. The coordinates wereused to compute the trajectory points by Bresenham 3D line algorithm.For each trajectory point, the algorithm calculated the inverse kinematicsof the robotic system (in this case, a planar parallel robot was selected) tocompute the joint angular positions at that instance. The required jointmotor actuation signals were generated and supplied to follow the
Fig. 3.Generalizedﬁrmware architecture of the robotic system.
Fig. 2.Robot pickup and drop positions with a via point trajectory.R. K., H. Raheman and V. Paradkar Artiﬁcial Intelligence in Agriculture 4 (2020) 172 –183
174trajectory at the speciﬁed linear speed of the manipulator. Further, accel-eration at the beginning and deceleration at the end of the trajectory wereprovided to maintain smooth actuation. Once, the manipulator reachedthe target position, SGF sent a handshake signal to the PGF through serialbus to continue the cycle for the next position.2.2. Design of robot armThe validation of the proposedﬁrmware architecture for operating arobotic system was made by a) designing the mechanical structure ofthe robot arm, b) deriving the kinematic equations of the robot arm,c) designing the embedded hardware to actuate the mechanical systemand d) implementing theﬁrmware in a deployable SoC microcontrollerof the hardware. The following sections explain the practical implemen-tation of the proposedﬁrmware architecture.2.2.1. Design of mechanical structure of robot armThe 3D CAD model of a 4 DOF parallel robot arm is presented inFig. 4. It consisted of two active links those were driven by stepper mo-tors through timing belt and pulley. One end of the two passive linkswas joined together and the other ends were connected with the corre-sponding active links. Thus the combined motion of the active jointsprovided a planner manipulation in X and Y direction.The arm assembly platform, which comprised the robot links and ac-tuation stepper motors was mounted on the support frames through aslider with a linear bearing that permitted motion only in ‘Z’direction. An- other stepper motor mounted on top of the frame drove a lead screwcoupled with the platform. Thus, the rotation of the stepper motor wasconverted into a linear motion in Z direction. A parallel jaw gripper wasattached to the robot arm at the connecting point of the two passive links.The gripper was made to open and close using a servo motor. An-other servo motor mounted on the passive link was attached to the grip-per to provide the rotary motion of the gripper in planner coordinates.Four limit switches were provided at the robot arm frames to act assensing boundary of the robot arm. Two limit switches (limit switches1 and 2) sensed the boundary position of the active robot joints. Thelimit switches 3 and 4 detected the upper and lower boundary positionsof the platform, in Z-up and Z-down directions, respectively.2.2.2. Inverse kinematics of the robot armThe input joint anglesθ
a1andθ a2for the given gripper position werecomputed with inverse kinematics. The geometric line diagram of theparallel manipulator is shown inFig. 5with three operating regions to visualize easily and to develop the implementable robot equations.The regions are separated based on the position of the end effector,i.e., C(x, y) in the planar space.Using cosine rule in triangle O
1AC (referringFig. 5), the inner angle of active arm 1.γ
1¼acosL12−L22þk2
2L1k !where,k¼ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃxþL0 ðÞ2þy2qð1ÞSimilarly, using cosine rule at triangle O
2DC, the inner angle of active arm 2
Fig. 4.CAD model of the developed robot arm to implement the proposed ﬁrmware.R. K., H. Raheman and V. Paradkar Artiﬁcial Intelligence in Agriculture 4 (2020) 172 –183
175γ2¼acosL12−L22þs2
2L1s !where,s¼ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃx−L0 ðÞ2þy2qð2ÞBased on the location of the manipulator point ‘C’within the region, the active arm linear angle with horizontal ( β
1andβ 2) varies as:β
1¼atanyL
0þxjj/C18/C19andβ2
¼atanyL
0−xjj/C18/C19for the location of‘C’in region−2ð3Þβ1¼atanyL
0þxjj/C18/C19andβ2
¼π−atanyL
0−xjj/C18/C19for the location of‘C’in region−1ð4Þβ
1¼π−atanyL
0þxjj/C18/C19andβ2
¼π−atanyL
0−xjj/C18/C19for the location of‘C’in region−3ð5Þ
Fig. 5.Geometric line diagram of the manipulator with its operating regions.
Fig. 6.Block diagram of the electronic control circuit of the robot arm.R. K., H. Raheman and V. Paradkar Artiﬁcial Intelligence in Agriculture 4 (2020) 172 –183
176The active joint angles (θ a1andθ a1)a r ed e t e r m i n e db yθ
a1¼β1þγ1 ð6Þθ
a2¼β2−γ2 ð7Þ The transmission angle inﬂuences the manipulator stabilityθ
trbe- tween active and passive links and is directly proportional to the dis-tance between points B and C; which is determined by using thefollowing equations.The vertical distance of link,L1y¼L1sinθ a1 ð8ÞThe vertical distance of link,L
2y¼L2sinθ a2 ð9ÞLength between points B and C,L
BC
¼minL 1y,L2y/C0/C1þ abs L 1y,L2y/C0/C12 ð10Þ2.3. Design of embedded hardware for the robot armThe electronic system incorporates the necessary hardware compo-nents to realize the robot arm motion. The block diagram of electroniccomponents used and their associated connections are shown inFig. 6. The list of hardware components used with their speci ﬁcations and functions are summarized inTable 2. The SGFﬁrmware deployed on dual-core ESP 32 microcontroller actu-ated the stepper motors of robot joint by supplying the essential signals tothe corresponding motor drivers. It calculated both robot kinematic andtrajectory equations. Limit switches were also connected to the ESP 32,to sense the robot joints whenever it reached the robot boundary. ThePGFﬁrmware installed on the Arduino Mega board took input from theHMI keypad and displayed the necessary data through an LCD. TheMega board also controlled the gripper open/close and wrist rotation ofthe robot arm. A COM bus connected these two microcontrollers, trans-ferred data between them. Buck converters provided the required DCvoltage to these electronic components for their operation and actuation.2.4. Robot path planningRobot path planning involves the generation of optimal reachablepoints in spatial coordinates from the present position of the manipulatorto the target location. Command G00 (rapid motion) and G01 (motion ofTable 2List of components used in electronic hardware.Component Speciﬁcations FunctionsESP 32 Clock frequency: 240 MHzCPU: 2 cores (32 bit),Tensilica LX6microprocessorsMemory: 520 Kib SRAMPeripheral interfaces: 3UART, 2 I2CSGFﬁrmware installed to drive therobot joint actuators
ArduinoMegaClock frequency: 16 MHzCPU: 8 bit ATMEGA 2560Memory: 8Kb SRAMPeripheral interfaces: 4UART, 1 I2CPGFﬁrmware installed to generate andsupply the motion control codes
BuckconverterInput: 36 V DC (max),current: 5A (max)Output: 5 V and 12 VTo supply recommended constant DCpower to actuators andmicrocontrollers HMI KeypadLCDTo receive input from the user and todisplay the operating parameters Actuators NEMA 17 Stepper motorsandServo motors (up to 180°rotation)To provide driving torque to the robotjoints
Fig. 7.Flow diagram of robot kinematics computation through dual-core.R. K., H. Raheman and V. Paradkar Artiﬁcial Intelligence in Agriculture 4 (2020) 172 –183
177manipulator at speciﬁed speed) were used to move the end effector be-tween the speciﬁed coordinates (X, Y and Z) with a straight-line trajectoryusing Bresenham algorithm.2.5. Computation of kinematic equations through dual-coreThe robot kinematics involves the computation of complex geo-metric equations to determine the angular positions and velocitiesof the joints at minimal time. As discussed in the earlier section,higher the resolution, better is the straight-line approximation, butat the cost of increased computation. Hence, the processor needs tocalculate the kinematic equations at a higher speed to supply the ac-tuation signals to the corresponding stepper motors. By utilizing theadvantage of dual-core computing capability of ESP 32 microcontrol-ler, the complex algorithms were solved at a minimal time. Since allthe kinematic equations were required to be solved only by the SoCmicrocontroller, the equations were divided into two parts, eachwas computed individually in different cores and the results were
Fig. 8.User interactive menu sequence to store data in EEPROM memory.
Fig. 9.EEPROM memory stack and allocation of data in its associated storage locations.R. K., H. Raheman and V. Paradkar Artiﬁcial Intelligence in Agriculture 4 (2020) 172 –183
178combined to obtain the target angular position. The algorithm for en-abling dual-core computation is given in Algorithm 1and the block diagram of dual-core computation is shown in Fig. 7. ESP32 was sup- ported with RTOS (Real Time Operating System); thus multiple taskswere created and ran those tasks simultaneously in different CPUcores. Two sets of kinematic equations ran independently in cores1 and 2 by using‘Semaphore’(give or take) function by deﬁning global variables that shared common data between both the cores.Finally, the computed data from both the cores were collected andthe target angular positionsθ
a1andθ a2were calculated. Algorithm 1.Dual-core computation of kinematic equations.
2.6. Construction of position generation ﬁrmwareThe position generationﬁrmware produced the robot control codes(G-codes) required for the actuation of the robot arm to perform a partic-ular task (i.e., in this case, continuous pick and place application of potseedlings was considered). The generated signals were sent through theinternal serial communication bus (COM bus) of the robot controllerupon the receipt of handshake signals from the receiver. In order to pro-duce the continuous control codes which perform pick and place task,the controller was required to access the position data. Considering thecase of pick and place application as explained in the Introductionsection, the user could provide all the required position data at once which wouldbe stored in EEPROM memory. Then the controller could access the dataat any time repeatedly without consideration of power supply ON/OFFcriteria. Besides, provision was also made to change speci ﬁcd a t ai nt h e memory according to the user's requirement.The position data storage for the robot actuation was madethrough a user interactive menu-based system as shown in Fig. 8. Navigation buttons of the keypad were used to change the menu se-quence to access a particular address of the EEPROM memory(Fig. 9). The number of pickup positions value was stored in memoryaddress Mppby navigating the corresponding menu and by enteringa numeric entity. The dropping position data were stored in thememory by directing to ‘End effector position’in dropping position menu. With the help of a keypad, the end effector could be movedto the desired position and the corresponding coordinates (X andY) could be fetched from the SGF through COM bus to store thedropping point data in memory address M
dp. Elbow position for the dropping coordinate were stored in address M
dep.I nt h i sp a r t i c u l a rR. K., H. Raheman and V. Paradkar Artiﬁcial Intelligence in Agriculture 4 (2020) 172 –183
179application, there were multiple numbers of pickup points; whichrequired multiple end-effector coordinates and elbow positions.T h e s ed a t aw e r ea c c e s s e da n dm o d iﬁed by the user by entering the pickup position number ‘k’in menu sequence which could accessthe memory locations M
pdx(k), M pdy(k) and M pep(k) and these par- ticular data were stored in the speciﬁc memory address. Algorithm 2.Continuous pick and place operation.The procedural steps for the continuous pick and place operation areprovided inAlgorithm 2. It initialized the required variables and thedata for pick and place were fetched from the EEPROM memory(Fig. 9). It generated the G code string required for the robot motionfor approach coordinates and transmitted the string to the SGF whichactuated the elbow and gripper. After the receipt of acknowledgementsignal from SGF, the algorithm generated strings for gripping and dropcoordinates for the pick and place of the present position. Itincremented the position data and actuated the robot until it wasequal to M
pp. The position data was again reset back to pick and placefrom the initial point.3. Results and discussion3.1. Data entry through HMIThe HMI system was connected to the PGF microcontroller to displaydata and to provide input to the SGF microcontroller for the actuation ofthe robot arm. The developed HMI control for the robotic system, whichcomprises an LCD display and Keypad is shown in Fig. 10.T h eb u t t o n so f the keypad were conﬁgured for multiple functions (up, down, left, right,select, back and numerical entries) to access the data.The entry of position data in EEPROM memory of the PGF microcon-troller is shown inFig. 11. By navigating the menu system through theup/down and select buttons user could obtain ‘Enter value’tab in the display (Fig. 11.a). User could change the number of pickup positionsby the buttons (Fig. 11.b). Then by pressing the select button, the en-tered data were saved in the corresponding EEPROM memory locationof the microcontroller (Fig. 11.c). This updated data were used by thePGF for the next operation cycle.The data entry for the dropping position in the corresponding mem-ory address of the EEPROM is shown in Fig. 12.3.2. Operation of robot arm by the proposed ﬁrmware implemented on the embedded microcontrollersThe developedﬁrmware (both SGF and PGF) were deployed in SoCmicrocontrollers of the embedded hardware and it was implementedon a 4 DOF parallel robot (Fig. 13).It consisted ofﬁve pickup positions and one dropping position. Thealgorithm was tested for continuous pick and drop of pot seedlingsloaded on a feeding conveyor. Forty numbers of pot seedlings werepicked and dropped by rotating the feeding conveyor to supply potseedlings to the pickup positions. The average computation time (for20 pickup positions i.e., four row of pot seedlings) required to solvethe kinematic equations were recorded. Function ‘micros ( )’was used in the kinematics code block within the SoC microcontrollers of threedifferent modes and the data were recorded. Table 3presents the com- parison of the average computation time to solve the computation of in-verse kinematic equation in different modes.It was found that, ESP 32 SoC microcontroller computed the kine-matics at less time as compared to the utilization of widely usedArduino board. Further, usage of dual-core capability through RTOS im-proved the computation speed, which increased the operating speed.3.3. Performance evaluation of the developed ﬁrmware implemented on the hardware to pick and drop the pot seedlingsThe robot arm was tested for seedling pickup and dropping. A totalof 40 pot seedlings were loaded on the cells of the feeding conveyorfor testing. The sequence of operation for picking and dropping of seed-lings by the robotic arm is shown inFig. 14(a–d). The cycle time taken for pickup and dropping of each seedling was3.5 s (which maintained delicate picking and dropping of pot seedlingswithout any damage at an average of 17 seedlings per min which issufﬁcient for walk behind type vegetable transplanters, Kumar and Raheman, 2011). The average success rate(S¼
Number of successfully picked seedlingsTotalnumberofseedlingsloaded/C2100Þof the robot arm deployed with the proposedﬁrmware for three trials was computed as 93.3%.3.4. Comparison of the proposedﬁrmware and the associated hardwarewith existing systemsIt is required to compare the developedﬁrmware and the hardware on which theﬁrmware was deployed.Table 4presents the comparison of various features of the developedﬁrmware and the associated hard- ware with the existing systems.The SMC4-4-16A 16B CNC motion controller has built in ﬁrmware and already well established in several industrial NC machines. In costwise this controller is not suitable for operating with agricultural ma-chines. Compared to Raspberry pi based ROS system, the developedﬁrmware with its associated hardware is much lower in cost. Also, theperformance of the developed system proved that it is well suited formetering pot seedling for transplanting.4. Conclusions and future workIn this paper, design of a 4 DOF parallel robot arm, the developmentof controlﬁrmware and the implementation of the developed ﬁrmware on embedded system to handle paper pot seedlings for vegetable trans-plantation were studied. A general design of a robot ﬁrmware was pro- posed to produce control codes (G-codes) based on the prede ﬁned user input and motor actuation signals obtained for the internal commandsreceived, and by sensing the joint angular positions. An embedded elec-tronic hardware was developed and deployed the proposed ﬁrmware to generate control codes and actuation signals using SoC microcontrollers(tested using ESP 32, Arduino Mega microcontrollers, LCD-Keypad HMI,limit switch position sensors and the required power converters). 3DBresenham algorithm was used in theﬁrmware to approximate the lin- ear trajectory of the parallel robot in between initial and targetpositions.Region-based inverse kinematic equations were developed and im-plemented in the robotﬁrmware, coupled with the Bresenham line al-gorithm to realize the linear trajectory of the robot in real time. The
Fig. 10.HMI system for the robot arm.R. K., H. Raheman and V. Paradkar Artiﬁcial Intelligence in Agriculture 4 (2020) 172 –183
180a) Navigate to positions b) Numerical entry c) Saving the data
Fig. 11.Modifying position data in memory through HMI.
a) Navigate to drop menu   b) Motor positions selection    c) Move the robot joint
Fig. 12.Setting of motor positions for drop point in memory through HMI.
Fig. 13.Robot arm actuated by the proposed ﬁrmware for pick and drop of pot seedlings.R. K., H. Raheman and V. Paradkar Artiﬁcial Intelligence in Agriculture 4 (2020) 172 –183
181kinematic equations were computed at a lesser time using the dual-corecapability of the ESP 32 microcontroller, which resulted in an averagecomputation time of 198μs per step as compared to 276μsa n d 4027μs with single-core mode and other commercial microcontrollers.A user interactive menu sequence was developed to store the positiondata related to pick and drop in the EEPROM memory using HMI. Thedevelopedﬁrmware was successfully implemented on an embeddedhardware to pick and drop of pot seedlings loaded on a feeding con-veyor using a parallel robot arm with an average cycle time of 3.5 swith a success rate of 93.3%.Declaration of competing interestThe authors declare that they have no known competing ﬁnancial interests or personal relationships that could have appeared to in ﬂu- ence the work reported in this paper.References
Angeles, J., 1997.Fundamentals of Robotic Mechanical Systems: Theory, Methods, and Al-gorithms. 2nd edition. Springer-Verlag, New York.Table 3Time taken to solve the kinematic equation with different microcontrollers.Device used Average computation time per step ( μs) (For 20 different positions)Arduino Mega 4027ESP 32 (without dual-core) 276ESP 32 (dual core enabled) 198
a) Manipulator approaching a seedling b) Manipulator picked the seedling
c) Transferred the seedling to drop pointd) Released the seedling inside the seedling delivery tube
Fig. 14.Pick and drop of a pot seedling with robot arm under laboratory conditions.
Table 4Comparison of developedﬁrmware and its associated hardware with existing systems.Robot controlﬁrmware with hardware Cost (approx.) Number of controllable axis ApplicabilityProposed system (Microcontrollers with HMI) Rs. 1800 Up to 5 axis Robotic applicationsRaspberry pi with ROS and HMI Rs. 4000 Up to 6 axis Robotic applicationsSMC4-4-16A 16B Rs. 60,000 Up to 4 axis Industrial CNC machinesR. K., H. Raheman and V. Paradkar Artiﬁcial Intelligence in Agriculture 4 (2020) 172 –183
182Araujo, A., Portugal, D., Couceiro, M.S., Rocha, R.P., 2015. Integrating Arduino-based edu- cational mobile robots in ROS. J. Intell. Robot. Syst. 77 (2), 281 –298. Arroyo G, Ochoa C, Silva J and Vidal G., 2004. Towards CNC Programming Using Haskell. InIbero-American Conference on Arti ﬁcial Intelligence. Springer, Berlin, Heidelberg, pp. 386–396.Chen, W., Khamis, H., Birznieks, I., Lepora, N.F., Redmond, S.J., 2018. Tactile sensors for fric- tion estimation and incipient slip detection - toward dexterous robotic manipulation:a review. IEEE Sensors J. 18 (22), 9049 –9064. Dihingia, P.C., Kumar, G.P., Sarma, P.K., Neog, P., 2018. Hand-fed vegetable transplanter for use with a walk-behind-type hand tractor. International Journal of Vegetable Science24 (3), 254–273.Hu, J., Yan, X., Ma, J., Qi, C., Francis, K., Mao, H., 2014. Dimensional synthesis and kinemat- ics simulation of a high-speed plug seedling transplanting robot. Comput. Electron.Agric. 107, 64–72.Hwang, H., Sistler, F.E., 1986.A robotic pepper transplanter. Appl. Eng. Agric. 2 (1), 2 –5. Joseph Raj, A.N., Sundaram, R., Mahesh, V.G., Zhuang, Z., Simeone, A., 2019. A multi-sensor system for silkworm cocoon gender classi ﬁcation via image processing and support vector machine. Sensors. 19 (12), 2656.Kamel, M., Stastny, T., Alexis, K., Siegwart, R., 2017. Model predictive control for trajectory tracking of unmanned aerial vehicles using robot operating system. Robot OperatingSystem (ROS). Springer, Cham, pp. 3 –39. Kruger, J., Gu, W., Shen, H., Mukelabai, M., Hebig, R., Berger, T., 2018, February. Towards a better understanding of software features and their characteristics: a case study ofmarlin. Proceedings of the 12th International Workshop on Variability Modelling ofSoftware-Intensive Systems, pp. 105 –112. Kumar, G.P., Raheman, H., 2011. Development of a walk-behind type hand tractor powered vegetable transplanter for paper pot seedlings. Biosyst. Eng. 110 (2),189–197.Nejatimoharrami, F., Faina, A., Jovanovic, A., St-Cyr, O., Chignell, M., Stoy, K., 2017. UI De- sign for an Engineering Process: Programming Experiments on a Liquid HandlingRobot. In 2017 First IEEE International Conference on Robotic Computing (IRC).IEEE, pp. 196–203.Rahul, K., Raheman, H., Paradkar, V., 2019. Design and development of a 5R 2DOF parallel robot arm for handling paper pot seedlings in a vegetable transplanter. Comput. Elec-tron. Agric. 166, 105014.Surange, V.G., Gharat, P.V., 2016. 3D printing process using fused deposition modelling(FDM). Int. J. Res. Eng. Technol. (IRJET) 3, 1403 –1406. Tiansong, L., Feng, G., Yilong, Y., 2019. Design of low-cost desktop robot based on 3D printing technology and open-source control system. 2019 IEEE 3rd InformationTechnology, Networking, Electronic and Automation Control Conference (ITNEC).IEEE, pp. 739–742.Wijnen, B., Anzalone, G., Haselhuhn, A., Sanders, P., Pearce, J., 2016. Free and open-sourcecontrol software for 3-D motion and processing. Journal of Open Research Software 4,e2.https://doi.org/10.5334/jors.78 .Rahul K.is persuing Master of Science at Indian Institute of Technology Kharagpur in FarmMachinery specialization under Agricultural and Food Engineering Department. His re-search focuses on implementation of robotics and automation in agricultural machinery.He is also interested in artiﬁcial intelligence, machine vision and mechatronic system de-sign.Hifjur Rahemanis a Professor in the Agricultural and Food Engineering Department ofIndian Institute of Technology Kharagpur, India. His research areas are use of robotics inagri-machinery, renewable energy operated agricultural machinery, alternate fuels frombiomass (Biodiesel, producer gas) and bioelectricity production and tillage and tractionimprovement in tractors and power tillers.Vikas Paradkaris Ph.D Student, Specialization in Farm machinery and Power, Agriculturaland Food Engineering Department, Indian Institute of Technology Kharagpur, India. His re-search focus is on implementation of robot in vegetable transplanter.R. K., H. Raheman and V. ParadkarArtiﬁcial Intelligence in Agriculture 4 (2020) 172 –183
183