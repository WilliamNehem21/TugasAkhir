Quality of service-aware service selection algorithms for the internet ofthings environment: A review paper
Aghabi N. Abosaifa,*, Haitham S. Hamzab
aDepartment of Computer Science, Sudan University of Science and Technology, Sudan
bDepartment of Information Technology, Cairo University, Egypt
ARTICLE INFO
Keywords:Service Selection Algorithm (SSA)Quality of Service (QoS)Internet of Things (IoT)Optimization Objective Algorithm]ABSTRACT
The Internet of Things (IoT) has evolved over the last decade to connect a massive number of objects. Theseconnected objects provide a vast amount of services to enhance the daily live of end users. The services providedcomprise other services with similar functionalities but different quality of service (QoS) requirements. Thus, theproblem of selecting and combining services that match the required QoS constraints is challenging. Therefore, inthis review, we classify, and analyze state-of-the-art algorithms for service selection under QoS constraints in theIoT environment. We propose a classiﬁcation system to review and analyze the various state-of-the-art algorithms described between 2012 and 2020. The aims of this review are to provide the research community with guidanceand knowledge, and to identify the trends regarding the different algorithms used to solve the service selectionproblem. In addition, we discuss future research directions in terms of the design, implementation, and evaluationof new service selection algorithms.
1. IntroductionIn the last decade, interest has increased in both academia and in-dustry in the Internet of Things (IoT) concept, with high economic im-pacts [1]. It is predicted that devices and objects will be increasinglyconnected in the coming years [2], thereby leading to more servicesbeing exposed to end users.Fundamental features of IoT systems include the ability to select andcombine services that match the needs and preferences of end users.Service selection is regarded as the core of service composition (SC) [ 3] and it is deﬁned as selecting the most appropriate service from candidateindependent services that match the end user requirements [ 4]. These candidate services provide the same functionality but they may havedifferent non-functional properties. The non-functional properties arequality of service (QoS) factors with different values. Thus, it is essentialto consider QoS factors that satisfy the end user requirements.The service selection process is even more challenging when com-bined with speciﬁc QoS requirements. In this case, the problem does notsimply involve identifying, selecting, and combining a service with spe-ciﬁc functionalities, but instead it is necessary to select the best servicethat matches both the functionality and the quality requirements of theend user. These conditions require using optimization algorithms toselect the set of services that match speciﬁc criteria, such as the energy consumption [5–7], response time [8,9],reliability [5,8–10], availability [11–13], cost [14,15], throughput [16], and accuracy [10]. In recent years, researchers have focused on developing optimizationalgorithms for selecting services with a speci ﬁc set of quality re- quirements in the IoT environment. Examples of these algorithms includecluster head selection [17], shortest path algorithms [16,18], mapping ﬂow-based algorithms [19–21], co-locating services [14,15], physical services models [25,26], genetic algorithms (GAs) [6,11,22], and particle
swarm optimization (PSO) algorithms [ 6,11,22]. To the best of our knowledge, few reviews have surveyed the SCproblem in the IoT under QoS criteria, although one previous review [ 23] investigated the selection algorithms employed under QoS constraints inthe IoT. Previous surveys related to this problem are summarized asfollows (SeeTable 1).Mqhele et al. [24] reviewed service selection methods for a range ofdynamic environments, and provided a general overview of dynamicWeb services, cloud, and the IoT. Their review considered different ap-proaches, including the multi-agent approach, ontologies, QoS, func-tional requirements, and user-centered QoS. They focused on certainfactors related to service selection methods, such as user preferences,domain speciﬁcations, storage, scalability, and evaluations. A case study
* Corresponding author.E-mail address:aghape.nabeel@gmail.com(A.N. Abosaif).
Contents lists available atScienceDirect
Array
journal homepage:www.elsevier.com/journals/array/2590-0056/open-access-journal
https://doi.org/10.1016/j.array.2020.100041Received 25 April 2020; Received in revised form 31 August 2020; Accepted 31 August 2020Available online 3 September 20202590-0056/©2020 The Authors. Published by Elsevier Inc. This is an open access article under the CC BY license ( http://creativecommons.org/licenses/by/4.0/ ).Array 8 (2020) 100041based on a smart campus with IoT services compared a content-basedalgorithm with a collaborativeﬁltering algorithm. However, they didnot discuss the methods or algorithms used to solve the service selectionproblem, such as optimization algorithms, and ensuring the QoS based onthe IoT architecture was not addressed.Bouzary et al. [25] presented a comprehensive survey of service se-lection and composition in cloud manufacturing. They classi ﬁed six categories comprising objective functions, selection criteria, algorithmtypes, correlation awareness, mapping approaches, and dynamiccomposition. They did not consider the service selection problem in theIoT environment or ensuring QoS based on the IoT architecture. Theyonly investigated some of the traditional QoS parameters comprisingcost, response time, reliability, and availability. In addition, they did notdiscuss any of the evaluation metrics used to evaluate the performance ofthe proposed state-of-the-art approaches.Yu et al. [26] reviewed the non-functional factor-based service se-lection problem in Web services. They proposed a model fornon-functional properties, hierarchical properties, user preferences,evaluations of properties, dynamic aggregation, automation, scalability,and accuracy. Comparative classiﬁcation was conducted based on threedimensions: policy vs. reputation, universal description, discovery, andintegration (UDDI) extensions vs. semantic Web services, and graphicpreference modeling vs. ontology-based preference modeling. Theycompared different types of service selection optimization algorithmsand frequently used QoS factors, such as the response time, availability,and reliability, but not how to ensure the QoS in the IoT architecture.They reviewed various approaches based on the proposed requirementsbut details of the criteria employed were not provided, such as the modelimplementations, evaluation methods, or Results obtained.Hamzei et al. [27] conducted a systematic survey of SC-awaremethods based on QoS factors proposed in the IoT environment. Theydivided the methods into four main categories comprisingframework-based, model-based, service-oriented architecture (SOA),representational state transfer (REST)ful-based, and heuristic-based ap-proaches. They discussed the beneﬁts and drawbacks of the state-of-the-art approaches and deﬁned six QoS factors to examine for theSC approaches, i.e., scalability, execution time, cost, reliability, avail-ability, and response time, but they did not consider the QoS factorsbased on the IoT architecture. In addition, they did not de ﬁne the methods that can be used to design and evaluate service selection algo-rithms (SSAs).Aoudia et al. [28] surveyed the techniques used for SC in the IoT.They compared the state-of-the-art approaches based on three essentialrequirements for the IoT system: management of heterogeneity, moni-toring and fault tolerance, and reasoning for the environment and re-sources, as well as constraints comprising resource constraints, theresponse time, and real-time constraints. In particular, they comparedtraditional Web SC and IoT SC, but they only considered a few factorsrelated to traditional QoS and did not investigate how to ensure the QoSbased on the IoT architecture.Asghari et al. [29] conducted a systematic review of SC approaches inthe IoT based on seven main categories: SC approaches, platformsselected, tools employed, measurement environments used to evaluateSC, QoS factors, current algorithms supported by the SC, and futurechallenges of SC. In particular, they considered the functional behavior ofSC and non-functional aspects of QoS in the IoT in SC approaches. Theyinvestigated most of the QoS factors in the IoT system but withoutreferring to the IoT architecture. The bene ﬁts and drawbacks of the state-of-the-art approaches were discussed and some weaknesses wereidentiﬁed. A useful classiﬁcation was provided for service selection in IoTbut the methods that must be used to design SSAs were not discussed. Inaddition, they did not provide a complete review of the QoS factors, suchas QoS in the network layer, and they only discussed one QoS factor inthe sensor layer (energy). However, they discussed the languages andveriﬁcation tools employed to measure the performance of the existingapproaches. Detailed descriptions were not provided of the methods usedto compare the performance of different methods, and the Results ob-tained from these comparisons were not presented.Aoudia et al. [30] reviewed the existing SC approaches for IoT basedon three groups of criteria. First, they considered the dynamic compo-sition and adaptation of the proposed solutions, including the optimi-
zation method used, its description, the deployment areas, the techniquesused, and whether they were applied online or of ﬂine. Second, they assessed the protection and security protocols, distribution and decen-tralization, automatic identiﬁcation and resolution of failure and inter-action problems, and independence and extensibility. Third, theyconsidered the Results obtained performance of the service representa-tions, standards and protocols used, models employed, and the optimi-zation of the composition. They investigated the essential points of theselection problem but did not explain them in detail, such as declaringthe dynamic composition without deﬁning other composition types. Moreover, they presented the techniques employed but without discus-sing the differences between them. In addition, they did not discuss thedifferent factors that affect traditional QoS or QoS in the IoTenvironment.Dongre et al. [31] investigated the QoS parameters applied for servicecomposition and selection by considering nine QoS parameters in theapplication layer: execution time, response time, availability, reliability,throughput, cost, price, reputation, and latency. However, they did notdiscuss technique or methods used to solve the selection problem.Li et al. [23] conducted a systematic study of SSAs in the IoT envi-ronment, which they categorized as centralized, decentralized, andhybrid classes. They focused on the techniques used to solve the selectionproblem and the QoS parameters employed to assess the advantages anddisadvantages of each algorithm. They identi ﬁed the main issues and challenges that affect the service selection problem in the IoT. Moreover,they analyzed the distribution of state-of-the-art studies by year of pub-lication and the percentage of studies by different publishers (IEEE,Springer, Hindawi, Elsevier, Sage, IJSRCSEIT, and other). The mainmethods used by service selection algorithms (SSAs) were discussedbased on three categories but they did not classify the optimizationmethods employed or whether the behavior was based on the processtime (static or dynamic). Moreover, they did not compare the types ofsoftware or data sets used to evaluate the performance of thestate-of-the-art algorithms. Newly published studies were not discussed.All of the previous reviews mentioned above are useful but our pro-posed classiﬁcation differs because of the following three main points.We deﬁne the methods that can be used to design an SSA while consid-ering the QoS based on the three main layers in the IoT environment(sensor, network, and application layers). Second, we provide detailedclassiﬁcations of the optimization methods used in the state-of-the-artapproaches for solving the service selection problem. Finally, we inves-tigate the evaluation metrics and comparisons applied to measure theperformance of the state-of-the-art approaches.In this review, we surveyed, classiﬁed, and analyzed the state-of-the- art algorithms for service selection in the IoT under QoS constraints. Weused a new classiﬁcation method for reviewing and comparing variousSSAs. Based on our review of state-of-the-art methods, two main prob-lems must be addressed by the research community in order to propose asuitable solution for the services selection problem: identifying themethods used to design an appropriate IoT environment and determiningthe methodology used to implement the proposed solution. Moreover, athird important requirement is an evaluation step for assessing the ef ﬁ- ciency and effectiveness of the proposed solution. In particular, we aimedto address the following questions.Q1: What are the methods used to design SSAs in terms of the processtime phase, behavioral workﬂow management, and optimizationobjectives?Q2: What are the implementations proposed for SSAs in the QoSlayers based on the IoT architecture and types of optimizationalgorithms?A.N. Abosaif, H.S. Hamza Array 8 (2020) 100041
2Q3: What are the techniques used to assess the performance of SSAs interms of the speciﬁc evaluation approaches, the software employed,and data sets applied?The answers to these questions are presented in the following ,as well as the Results and suggestions for future research.The main contributions of this review can be summarized as follows.Classiﬁcation of SSAs for use in the IoT system: we classiﬁed the pro- posed SSAs for the IoT system according to three main levels: algorithmdesign level, algorithm implementation level, and algorithm perfor-mance evaluation level. This classiﬁcation covers most of the researchrequirements when proposing a new SSA.Review and analysis of the current SSAs in IoT: we reviewed the state-of- the-art methods for SSAs for the IoT system. Furthermore, we analyzedthe proposed solutions based on three main classi ﬁcation levels (algo- rithm design, algorithm implementation, and algorithm evaluation) toassess the details of the current selection solutions for IoT.Resultsand future research directions:we identiﬁed future trends tohelp the research community identify areas that need further investiga-tion in order to address the service selection problem, as well asproviding knowledge and understanding to clarify the requirements forSSAs. These details should facilitate the construction of an ef ﬁcient SSA that addresses the challenges of designing, implementing, and evaluatingSSA in an appropriate manner for the IoT system.The remainder of this paper is organized as follows. In Section 2,w e discuss the background and present necessary de ﬁnitions. The proposed state-of-the-art classiﬁcation method is presented in Section 3. In Section 4, we discuss solutions for designing SSA and analyze the design solu-tions. In Section5, we explain the solutions for implementing SSA andanalyze the proposed solutions. In Section 6, we consider the perfor- mance evaluations proposed for SSA solutions. The Results and futureresearch directions are presented in Section 7. We give our conclusions in Section8. In Section9, we outline research limitations and providerecommendations.2. BackgroundIn the following, we explain the context and concepts required tounderstand the proposed classiﬁcation system. First, we explain theservices, composition, and selection process concepts. We then describethe main components of our proposed classi ﬁcation method.2.1. SC and selection processes2.1.1. Web servicesWeb services are as an essential concept of the IoT environmentbecause they allow sensors and devices to exchange data and informationthrough the IoT network. The deﬁnitions of Web services vary fromhighly public to highly deﬁned. Most consumers view a Web service as anapplication or end service that can communicate with other applicationsor end services through the Web. The World Wide Web Consortium(W3C) [32] introduced the concept of a web service as: “A software system designed to support interoperable machine-to-machine interac-tion over a network. It has an interface described speci ﬁc format like Web Services Description Language (WSDL)." In general, Web services arebased on three critical standard concepts comprising WSDL, the SimpleObject Access Protocol (SOAP), and UDDI. We can view Web services ascomprising connected components and integrated into a more complexdistributed environment. The three main components of the Web servicesarchitecture are as follows./C15Service Provider:Different services are provided via interfaces tocreate, implement, and publish a Web service using the UDDIspeciﬁcation./C15Service Consumer:A service consumer is regarded as the end user of aWeb service. A service consumer uses the service registry to obtaininformation about services and to access them./C15Service Registry:The service registry contains information aboutdifferent services provided based on the UDDI speci ﬁcation, where services are listed and advertised to search.Web services can divide into two main types, as follows.Atomic Service: An atomic service is also known as an elementaryservice [33] and it is a sold service that cannot be divided into other Webservices or that relies on other Web services to satisfy consumer requests.The interface of an atomic service is based on SOAP and WSDL.Composite Service:[33] this services integrates or collects atomicservices, where each has a functionality to implement a speci ﬁc appli- cation or service. Atomic or composite Web services de ﬁned by an identiﬁer comprise a set of service factors that deliver useful informationfor the services and a set of operations to identify a service ’s functionality.Thus, the SC process integrates and collects more than one serviceinto a single service to perform more complex functions. In our reviewed,Table 1Comparison of state-of-the-art surveys introduced for service selection.
Authors Year Review type Approach criteriaMqheleet al.[24]2017 Service selection indynamic environments(dynamic Web services,cloud, and IoT)Based on multi-agentapproach, ontology, QoS,functional requirementsBouzaryet al.[25]2018 Service selection and SC incloud manufacturing Based on the objectivefunction, selection criteria,algorithms, correlationawareness, mappingapproaches, and dynamiccomposition Yu et al.[26]2008 Service selection in Webservices Based on a model of the non-functional properties,hierarchical properties, userpreferences, evaluation ofproperties, dynamicaggregation, automation,scalability, and accuracy Hamzeiet al.[27]2018 SC in IoT Using framework-based, model-based, SOA, RESTful-based, and heuristic-basedapproaches Aoudiaet al.[28]2017 SC in IoT Based on the management of heterogeneity, monitoringand fault tolerance, andreasoning for theenvironment and resources Asghariet al.[29]2018 SC in IoT Based on SC approaches, platforms selected, toolsused, measurementenvironments for evaluatingSC, QoS factors, currentalgorithms supported by theSC, and future challenges ofSC Aoudiaet al.[30]2019 SC in IoT Based on dynamic composition, adaptationused, automaticidentiﬁcation and resolutionof failure, distributed anddecentralized composition,protection and securityprotocol, optimization,performance, and Resultsobtained Dongreet al.[31]2020 QoS in service compositionin IoT Nine QoS parametersconsidered in the applicationlayer: execution time,response time, availability,reliability, throughput, cost,price, reputation, and latency Li et al.[23]2020 Service selection in IoT Centralized, decentralized, and hybrid classesA.N. Abosaif, H.S. Hamza Array 8 (2020) 100041
3we focused on selecting the appropriate service for each composingservice.2.1.2. SC lifecycleThe Services Composition lifecycle [33–35] has four primary levels, as shown inFig. 1Service Deﬁnition:this level is also called the services description andit may be considered from the following two different perspectives:Provider’s perspectives:providers are responsible for describing theservice’s performance in terms of the functional and non-functional re-quirements using speciﬁc languages. Providing an excellent descriptionof the performance of the service increases the likelihood of its selectionand the validity of the resulting composition services.End user’s perspectives: the end user who requests a service deﬁnes their preferences and service performance requirements. These data arecollected either semi-automatically or automatically in order to abstract amodel to determine a set of activities that control the requirements anddataﬂow among them, and to determine the QoS constraints and unusualbehaviors.Service Selection: Service selection is the core of the process SC [ 3], where appropriate services are selected from different services providersin the services registry that match the performance requirements speci-ﬁed by the end user. The selected services comprise more than onecandidate service that satisﬁes the end user’s preferences. Therefore, the optimal matched services must be selected and grouped into a compositeservice.Service Construction: The constructed composite service is published toallow its utilization by end users. Thus, the executable composite serviceis produced at this level.Service Execution: At this level, the composite service instance iscreated and executed by the execution engine using the orchestration orchoreography engine in order to run the individual service components,and thus the end user service or application. In addition, the monitoringtasks should be performed [33] at this level, including logging, perfor-mance measurement, exception handling, and execution tracking. Insome automated composition methods, the ﬁrst two levels are merged and the constructed composite service is generated directly according tothe composition requirements [33].2.2. Analysis of SSA design2.2.1. SSAs based on process time phaseIn the following, we explain the deployment of SSAs based on timephases, which has two main stages.Static Service Selection:The services are selected at the design time.The different service components that are essential for composition areselected, collected, and then deployed. Early service binding is importantbecause if better alternative services are offered or one of the providedservices becomes unavailable, the static composition process will not beable to offer a better choice in SC [33,36]. Static Web services compo- sition is notﬂexible and adaptable when frequent runtime changes occur,but it is suitable when the service components do not change or theychange rarely.Dynamic Service Selection:The services are selected during the run-time. Thus, the service components can be determined and replacedduring the runtime, thereby allowing the consideration of changes thatcan occur in the in-service components and better alternative servicesmay be offered for the composite services [
33,36]. Dynamic service se- lection is considered a more challenging task than static service selectionbecause critical issues must be addressed, such as time limits, servicecorrectness, and transactional support.2.2.2. Behavioral workﬂow managementThe behavior of services refers to how the services work ﬂow can be organized and controlled. The services work ﬂow can be managed in the following two ways.Service Orchestration (Centralized):When several services interact, one centralized service is responsible for managing and controlling thecommunication and workﬂows among all of the other services. Thiscentral point is called the orchestrator and it organizes the connectionsbetween different services. The orchestrator has a global and completeview of the logics of the interactions, and it obtains the Results fromvarious connected services, as shown in Fig. 2( A). Services Choreography (Decentralized): The services choreography represents distributed services with no central control point. The servicesinteract and connect with other services according to their logic [ 33], as shown inFig. 2(B), thereby allowing sensors to interact directly withactuators.2.2.3. Types of optimization objectivesOptimization algorithms are not novel solutions and they have beendeveloped for decades in order toﬁnd the optimal maximum or mini-mum solution. Optimization algorithms are used widely to solve complexservice selection problems, especially QoS selection problems, whichhave various names such as QoS-driven or QoS-aware selection problems.
Fig. 1.Services composition lifecycle [34].
Fig. 2.A) Service orchestration.B) Service choreography [33].A.N. Abosaif, H.S. Hamza Array 8 (2020) 100041
4The three main types based on the number of objective functions solvedby the optimization algorithms are as follows.Single Optimization Problems: These are considered the standard opti-mization problems where one objective function is optimized at one time.Multi-Objective Optimization Problems (MOPs): MOPs require that the optimal solution is found in the presence of trade-offs between more thanone conﬂicting objective under a set of speciﬁc constraints. No single solution [37] can optimize all of the objectives at the same time. A set ofinﬁnite optimal solutions or set of points satisfy all of the prede ﬁned conditions for the optimum, which are called non-dominated or Paretooptimal solutions, as deﬁned in 1906 [38], and they are the most widely used solutions in MOPs. The solution is regarded as a Pareto optimalsolution if none of the objective functions optimize the ﬁtness value without affecting one or more of the other objective values, or if theymake none of them worse. If no further Pareto objective can be changed,the solution is called Pareto optimal.The main challenge of MOPs is that no best unique solution exists[37]. Thus, only a set of non-dominated solutions can be found to obtaina good approximation of the real Pareto dominance.Many-Objective Optimization Problems (MaOPs) : These problems are extended versions of MOPs, where the MOPs often require the optimi-zation of two or three objectives [37]. MaOPs require the optimization ofmore than three objectives as the non-dominated number of solutionsand solution search space increase. These increases make the serviceselection problem more complex and it is dif ﬁcult to achieve diversity and convergence for SSAs in the IoT [ 39].2.3. Analysis of solution implementations2.3.1. QoS based on IoT architectureThe classiﬁcation proposed for the QoS architecture by Li et al. [ 40] meets the needs of the IoT environment and allows the QoS to be opti-mized in different IoT layers. The architecture considers three IoT layerscomprising the sensor layer, network layer, and application layer. Thetraditional QoS attributes are integrated with other essential character-istics of the IoT architecture (e.g., cost of network deployment, infor-mation accuracy, energy consumption, and coverage). The traditionalQoS classiﬁcation is not applicable to the heterogeneity and complexityof the IoT architecture.The sensor layerrepresents the physical IoT infrastructure includingdifferent edge–node links, such as data centers, RFID tags, sensor net-works, mobile devices, and other heterogeneous devices. This layer isbased on the concept of sensing as an independent service and it allowsthe IoT environment to provide sensing and actuating capabilities thatcan be modeled as services using edge –node devices through the cloud computing system.The QoS in this layer involves selecting the sensor ’s necessary infra- structure based on the user/application requirements and sensing capa-bilities. Thus, this layer aims to deal with scheduling the acquisition ofinformation and resource allocation. For example, the QoS in the sensorlayer involves the energy consumption, system lifetime, and resourceoptimization [41].The optimization of SSA is required to optimize the QoS for sensorservices. An optimal SSA is vital for the sensor layer because multipledevices are available with differences in quality that can meet the user/application requirements. The availability of services in this layer de-termines the success or failure of a service request.Thenetwork layerrepresents the IoT network infrastructure respon-sible for transferring data and information between sensor nodes. Thislayer includes different protocols, technologies, and edge networks, such
as RFID tags, wireless sensor network (WSN), wireless local areanetwork, or cellular network. The importance of the network layer isrelated to the network services in the IoT, which require the presence ofvarious network technologies. Similar to WSN, it is necessary to provideuniversal coverage points and access to network nodes. In the networklayer, the heterogeneous network environment is scheduled according tothe traditional QoS in order to allocate various network resources. Thedifferent protocols used in heterogeneous networks depend greatly onthe QoS requirements, e.g., the bandwidth, capacity, and throughput QoSin the network layer [40,41]. An optimal SSA is essential in the networklayer because it allows service providers to provide optimal networktechnologies and protocols to meet the user/application requirements.Efﬁcient QoS support for different network infrastructures in this layer ischallenging when developing applications for use in the IoT.Theapplication layerrepresents the highest layer in the IoT architec-ture and it comprises many distributed services, which are combined toprovide one service to the end user or an application. Many applicationsare deployed in different domains in the IoT environment, such as smarthome, industrial automation, health care, and traf ﬁc management ap- plications. Theapplication layeraims to schedule services according to theQoS constraints. Under the QoS constraints, some network resourcesmust be allocated to services selected in the application layer, therebyaffecting the end services and user requirements, e.g., the accuracy,reliability, availability, and execution time QoS in the application layer[41]. Thus, it is crucial to select an optimal SSA and resource allocationscheme based on the information for each component service.2.3.2. Search optimization algorithmsSearch optimization algorithms are used to select the optimal solutionin a speciﬁc search space and they may be classiﬁed into four main types comprising heuristics, meta-heuristics, hyper-heuristic algorithms, andnon-heuristic algorithms.The termheuristiccomes from the Greekεὑρίσκω, which means“Iﬁnd, discover.”A heuristic is a type of artiﬁcial intelligence and a dependent optimization algorithm designed toﬁnd an approximate solution for complex problems when traditional algorithms cannot obtain an exactsolution [42]. The main objective of heuristics is to obtain a satisfactoryand valuable solution in an acceptable time, but not necessarily the exactsolution. The main idea of heuristic algorithms involves ordering analternative solution for each step based on the available information forthe problem in order to decide the next step, which involves iterating thealgorithm’s rules and utilizing the output from the previous step as aninput for the next step until the optimal solution is reached.The termmeta-heuristicwas introduced by Glover in 1986 as a com-bination of the Greek preﬁx meta- (met/C19a), which means high level, and heuristic (from the Greek heuristic or euriskein, which means to search orﬁnd) [43]. Ameta-heuristicis a high-level optimization algorithm thatidentiﬁes a set of concepts grouped in an algorithmic framework in orderto provide a set of strategies or rules for improving heuristic optimizationalgorithms toﬁnd a suitable solution to a speciﬁc problem [43]. Meta-heuristics can be deﬁned as general-purpose heuristic methods thatcan obtain high-quality solutions in the signi ﬁcant search space. AHyper-heuristicis a heuristic search method introduced in 1997,which involves the combination of more than one arti ﬁcial intelligence algorithm in the context of automated theorem proving [ 44]. This term was subsequently applied in a combinatorial optimization context todenoteheuristics for choosing heuristics. The main idea of hyper-heuristic algorithms is automating the use of high-level heuristic methodologiesto select, combine, generate, and apply algorithms to a speci ﬁc problem, which involves combining more than one appropriate heuristic methodat each decision point to efﬁciently solve computational search problems[45].Non-heuristic Algorithmsare optimization algorithms for optimizingthe search of a space and obtaining an optimal solution. In this class, thesolution is found without employing evolutionary algorithms and aniteration process is not followed toﬁnd an optimal solution.2.4. Performance evaluationsResearchers must evaluate the behavior or performance of SSAs afterthey have been developed. Our survey showed that two main methodsare used to measure the performance of the proposed solution. ComputerA.N. Abosaif, H.S. Hamza Array 8 (2020) 100041
5simulation is the most widely used method. Computer simulation in-volves mathematical modeling on a computer using simulation softwarein order to predict the behavior of a physical system or the real world.Computer simulation is a useful tool for mathematically modeling manynatural systems, e.g., in computational physics, chemistry,manufacturing, biology, and human systems such as psychology, eco-nomics, health care, and engineering.The other method employed involves using a prototype. A prototypeis an early stage model or a sample of a speci ﬁc product built to test processes and concepts. In general, a prototype is designed to evaluate anew design of a product and to enhance precision for system users. Aprototype is used in various contexts, including semantics, electronics,design, and software programming [ 46]. The difference between a simulation and prototype [47] is that a simulation is an analytical processrepresenting a real working system, whereas a prototype is a real physicalobject that provides speciﬁcations for the actual system.3. Proposed classiﬁcation approach for QoS-AWARE SSASIn the following, we explain the proposed classi ﬁcation approach for QoS-aware SSAs used in the IoT environment. The state-of-the-artresearch approaches can be classiﬁed into three main types, as showninFig. 3. Our classiﬁcation criteria were obtained by analyzing the state-of-the-art methods. In order to develop a new method to solve the se-lection problem in the IoT environment, three main points should beconsidered. First, it is necessary to design an appropriate environmentthat allows the implementation of the proposed solution. Second, theproposed solution type is applied for selection in the QoS layer. Third, itis necessary to determine the methods used to evaluate the proposedsolutions.Thus, based on these three requirements for developing a new SSA,our proposed classiﬁcation approach is described as follows. First, thedesign of SSAs for IoT must adhere to three basic concepts. SSAs arebased on the process time phase where the time when the SSA is per-formed is speciﬁed. The workﬂow management behavior represents howthe services are controlled and connected. The objective of the optimi-zation algorithm is to establish the number of goals to satisfy when thealgorithm is implemented.Second, we consider two basic concepts related to the implementa-tion of SSAs. Based on the QoS layer, it is necessary to de ﬁne the layer where the SSA will be applied in the QoS architecture [ 40]. Moreover, the algorithm type can be divided into heuristics, meta-heuristics,hyper-heuristics, and other algorithms (non-heuristic algorithms).Third, the evaluation approaches, software, and performance man-agement can be used to evaluate the performance of proposed algo-rithms. Each of these sub-classiﬁcations is deﬁned in Section2. Based on the deﬁnitions and concepts described in Section 2,w e classiﬁed the state-of-the-art methods as shown in Fig. 3.4. Analysis of solution DESIGNSTo design a new solution for the selection problem, researchers mustﬁrst deﬁne an appropriate environment. Thus, we reviewed the state-of-the-art methods and identiﬁed three common categories comprising SSAsbased on the process time phase, behavioral work ﬂow management, and optimization objective type. Detailed de
ﬁnitions of these features are provided in Section2. The methods analyzed according to these threecategorizes are shown inTable 2.5. Analysis of solution implementationsMany methods have been proposed to solve the QoS-aware selectionproblem in the IoT environment. We identi ﬁed these solutions based on the three QoS layers introduced for the IoT architecture by Li. et al. [ 40], i.e., the sensor layer, network layer, and application layer. For each layer,we classiﬁed the implementations of the methods according to fouroptimization algorithms comprising heuristics, meta-heuristics, hyper--heuristics, and non-heuristic algorithms. Moreover, we considered thetraditional QoS factors optimized in each proposed solution.5.1. Sensor layerA. Heuristic algorithms in the sensor layerYin et al. [49] addressed the single-source many-target kshortest paths problem in Map-Reduce, where they used a graph of Web servicestoﬁndkshortest paths (selected services) from a candidate set of servicesfor one source node while providing acceptable QoS. They focused onreducing the execution time and consuming less power. They proposedan efﬁcient pruning algorithm for breadth-ﬁrst search (BFSKNN) called PruningBFSKNN algorithm. The proposed algorithm built based on ﬁnd the shortest paths between nodes in a graph using DijkstraKNN andBFSKNN for the single-source many-target shortest path problem.Shukla et al. [55] introduced a collocation-based strategy for hostingIoT services and applications in devices where they considered a smarthome scenario. They aimed toﬁnd the correct sensor for the requiredservices from a set of sensors while satisfying the QoS objectives by
Fig. 3.Classiﬁcation of QoS-aware SSAs in the IoT environment.A.N. Abosaif, H.S. Hamza Array 8 (2020) 100041
6mappingﬂow-based process components on the system sensors. Theyidentiﬁed three key factors comprising minimizing the latency time whencollecting and transferring data from IoT devices and communicating itto the gateways, reducing the energy used by the system, and balancingthe system energy requirements to increase the system lifetime. Theyproposed a collocation-based sensor-service mapping strategy (CBSSMS)to link the IoT services to appropriate sensors. The approach used twoalgorithms where one found the path that reduced the latency time and acollection algorithm assembled the components that formed a link on thesame sensor.Alsaryrah et al. [18] aimed to select an appropriate set of smart ob-jects by considering the traditional QoS and the energy consumed to forma service. They divided their objectives into minimizing the traditionalQoS (execution time, network latency, and cost) and reducing the energyconsumption by the combined service, i.e., by maximizing the batterylifetime for the sensors. They proposed a bi-objective shortest pathoptimization (Bi-SPO) algorithm with four pruning techniquescomprising pruning by the cycle, nadir point, ef ﬁcient set, and label. Perera et al. [10] investigated the properties of sensors and the in-formation associated with data streams to search, select, and ranklarge-scale sensors with the same functionalities and capabilities in orderto satisfy the user’s requirements. They considered the user preferencesand sensor characteristics, such as the accuracy, reliability, battery life,location, and other features, to identify appropriate sensors for datacollection approaches. They designed and implemented anontology-based context-aware sensor search, selection, and rankingmodel (CASSARAM). To improve the performance, ef ﬁciency, and capability of CASSARAM, they proposed a comparative-priority basedweighted index to remove sensors with a lower weighted context prop-erty based on the user preferences technique called Top-K selection,comparative priority-based heuristicﬁltering to reduce the number of sensors ranked by removing sensors placed away from the user, relationalexpression-basedﬁltering to speed up the search process and sensorselection by specifying an acceptable range of context property valuesusing relational operators in semantics, before ranking the sensors byconsidering the account user’s priorities, and distributed sensor search-ing to identify and select appropriate sensors that satisfy the user ’s re- quirements on multiple IoT distributed servers. Three different methodswere identiﬁed to search distributed sensors based on query/datatransformation over the network, i.e., chain processing, parallel pro-cessing, and hybrid processing.B. Meta-heuristic algorithms in the sensor layerLin et al. [39] introduced a sensor selection algorithm for specifyingmultiple sensor devices in a large-scale environment. They de ﬁned their optimization parameters for energy and distance minimizing the energyconsumed by communication between two sensor devices, balancing theenergy among different sensors to reduce overloading on some sensordevices, maximizing the total energy harvested by supplementing thesensor’s battery energy with natural energy (e.g., wind and solar), andgreen index optimization to reduce the total pollution level. Satisfyingthe QoS involved optimizing the cost, reliability, and availability of IoTservices. Their proposed algorithm based on many-objective evolu-tionary algorithm decomposition (MOEA/D) solved larger-scale prob-lems by decomposing them into multiple sub-problems and then ﬁnding the optimized solution for each sub-problem.Na et al. [48] conducted service selection for IoT based on physicalresources by using platform-independent middleware. They focused onincreasing the IoT system lifetime by using the power on all devicesequally to reduce the energy consumption and costs. To balance theenergy consumption, they developed an evolutionary game approach bydeﬁning aﬁxed point of the replicator dynamics where the payoffs areequal for all players in the same group. They also presented some optionsfor improving the service selection behavior. The initialization step wasimproved by estimating the remaining lifetime for all devices at the
beginning instead of selecting them randomly. This approach mayTable 2Categorization of state-of-the-art methods according to the solution design.
Reference Process Time Phase Behavioral Work ﬂow Management Optimization Objective TypeDynamic Static Choreography Orchestration MOPs MaOPsHuang et al., 2014 [5]✓✓ ✓ Liu et al., 2013 [11]✓✓ ✓ Na et al., 2015 [48]✓✓ ✓ Zhou et al., 2016 [12]✓✓ ✓ Sun et al., 2017 [6]✓✓ ✓ Reddy et al., 2017 [17]✓✓ ✓ Mejri et al., 2017 [8]✓✓ ✓ Yin et al., 2014 [49]✓✓ ✓ Huang et al., 2015 [14]✓✓ ✓ Dhondge et al., 2016 [7]✓✓ ✓ Anas et al., 2016 [50]✓✓ ✓ Gao et al., 2014 [51]✓✓ ✓ Abinaya et al., 2017 [16]✓✓ ✓ Nwe et al., 2014 [52]✓✓ ✓ Jin et al., 2014,2016 [53,54]✓✓ ✓ Perera et al., 2014 [10]✓✓ ✓ Yu et al., 2014 [19]✓✓ ✓ Huang et al., 2014 [20,21]✓✓ ✓ Shukla et al., 2018 [55]✓✓ ✓ Elhoseny et al., 2018 [22]✓✓ ✓ Alsaryrah et al., 2018 [18]✓✓ ✓
Huang et al., 2014 [15]✓✓ ✓ Lin et al., 2017 [39]✓✓ ✓ Khanouche et al., 2016 [13]✓✓ ✓ ✓ Yuan et al., 2019 [56]✓✓ ✓ Hosseinzadeh et al., 2020 [57]✓✓ ✓ ✓ Gao et al., 2020 [58]✓✓ -- ✓ Quan et al., 2019 [59]✓✓ ✓ Jatoth et al., 2019 [60]✓✓ -- Khan et al., 2019 [61]✓✓ ✓ Abu-safe et al., 2019 [62]✓✓ ✓ Singh et al., 2020 [63]✓ -- ✓A.N. Abosaif, H.S. Hamza Array 8 (2020) 100041
7require a long time toﬁnd the optimal initialization solution, but it willsave time in the following steps by maintaining communication with theother selection process. The decision-making step was improved byallowing the algorithm to select a longer estimated remaining lifetime,which could accelerate the algorithm and reject the optimal solutionwhen selecting a service with a shorter lifetime.C. Non-heuristic algorithms in the sensor layerKhanouche et al. [13] aimed to solve MOPs during service selectionby managing the energy consumption and maintaining the availability ofservices, while slightly reducing the QoS level but without affecting theuser satisfaction. They designed a QoS model by describing the QoS of anatomic service divided into quantitative attributes comprising thetraditional QoS, such as the cost, response time, reputation, reliability,and availability, and qualitative attributes, such as security, privacy, andcomfort. The QoS of a composite service is dependent on the structure ofits atomic services connected through a sequential structure. The relativedominance of services conforms to the Pareto optimality set, whichcomprises the collection of possible solutions where at least one objectiveis optimized without affecting other goals. They proposed anenergy-centered and QoS-aware service selection algorithm (EQSA) byeffectively selecting a user-centered service from the most appropriateservices that match the user’s preferences while satisfying the speciﬁed QoS level. The proposed solution is executed in two main phasescomprising pre-selection of services that provide the required QoS levelfor the user’s and static selection before the runtime. The most appro-priate services for SC are selected according to the relative dominance ofthe services.5.2. Network layerA. Heuristic algorithms in the network layerHuang et al. [15,19–21], and [14] presented a service merging approach that maps and co-locates neighboring virtual service on thesame physical devices to reduce the communication energy costs and tobalance the energy consumption by sensors to prolong the system life-time. They applied WuKong middleware to automatically discover andmanage smart sensors and actuator devices, which could support ﬂexible and interoperable IoT systems by selecting from prede ﬁnedﬂow-based programs (FBP) toﬁnd the appropriate mapping to the abstraction ofan application onto physical smart devices and actuators according to theQoS requirements. They proposed an energy sentient algorithm calledthe maximum weighted link (MWL) algorithm that treats selection as atwo-co-locating problem and ignored the distance between devices [ 21]. They also updated their model [20] to consider the distance betweendevices because two remote devices require more energy for communi-cation than closer devices. They treated the problem as a quadraticprogramming problem and proposed a reduction method to transformthe problem into an integer linear programming (ILP) problem.Huang et al. [19] presented a mapping model that considers thedistance and runtime QoS requirements, such as the accuracy responsetime. Moreover, they attempted to reduce the total communication en-ergy in IoT systems during each new update. They modeled the servicematchmaking problem as a maximum weighted bipartite problem andsolved it using the ILP model. Huang et al. [ 14,15] also used strategies for solving the maximum weighted independent set (MWIS) in their selec-tion framework, which considered all possible co-location combinationsfor services. They implemented this method only in single-hop networksand treated the problem as a data clustering problem [ 15]. Heuristic algorithms were employed toﬁnd the maximum weight for the inde-pendent set, which comprised the basic decisions regarding serviceco-location. However, the method was subsequently implemented in asingle-hop network and multi-hop network by modeling the problem as aquadratic programming problem and solving it with the ILP model [ 14
]. Dhondge [7] presented a study of industrial IoT (IIoT) systems wherethey focused on collecting and controlling communication data andparameters obtained from sensors on factory ﬂoors. They aimed to reduce and balance the energy consumption in the IoT by proposing aheuristic and opportunistic link selection algorithm (HOLA) to maintainthe energy efﬁciency in the IoT sensors by opportunistically transportingthe IoT sensor data to smart devices. These intelligent devices had mul-tiple radio links (3G/4G LTE, Wi-Fi, and Bluetooth) to transmit thereceived data to the cloud by using HOLA to select the best radio linkbased on the quality preserved by the Services Level Agreements and theenergy cost of the relationship.B. Meta-heuristic algorithms in the network layerSun et al. [6] proposed a solution for integrating and co-operatingwith smart IoT functionalities to satisfy the user requirements, whichcould be applied to more than one smart thing. They considered theconﬂicts between the device’s features and balancing its energy con-sumption. Spatial constraints were deﬁned by the physical location and communication radius of a smart thing on the IoT. The temporalconstraint was deﬁned as the speciﬁc time duration required to meet auser’s requirement because smart things should only be available forpredeﬁned time duration. The energy efﬁciency was considered by balancing the energy load of intelligent devices or things and avoidingexcessive consumption. Conﬁgurability of the IoT services occurredwhen two IoT services instantiated on the same smart device and theirfunctionalities conﬂicted. Thus, the composition and selection of theservices demanded consideration of the delay between two sequentialservices by building a set of aggregated alternative smart things. The twomain QoS factors involved reducing and balancing the energy con-sumption, and prolonging the network lifetime. A two-tier frameworkwas proposed and three different meta-heuristic algorithms (ant colonyoptimization (ACO), GA, and PSO) were implemented to search for theoptimal IoT SCs. The two-tier framework was con ﬁgured as shown in Fig. 4. The IoT smart thing tier encapsulated the functionalities of devicesin IoT services. The services class tier categorized IoT services into ser-vice class chains using traditional Web service composition techniques.The service network was created between the two tiers by consideringthe possibility of calling between service classes.Reddy et al. [17] proposed a clustering method for dividing aWSN-based IoT network into a small network, where each was called acluster head. By using a meta-heuristic algorithm to optimize the networkcommunication, the clustering method could divide the WSN into asmall, reliable, and manageable network with ef ﬁcient data transmission. The proposed algorithm usedﬁve parameters comprising the distance,energy, delay, network load, and temperature of the IoT devices. Toefﬁciently select the cluster heads, a novel method was proposed bycombining the gravitational search algorithm (GSA) with the arti ﬁcial bee colony (ABC) algorithm.Abinaya et al. [16] also aimed to minimize the energy, time, and lossof packets during the transfer of data among nodes when selecting andcombining services. They aimed to increase the energy ef ﬁciency, time utilization, and throughput without any loss of data or reduction in thepacket delivery ratio. They proposed a meta-heuristic algorithm (ACO) toﬁnd the shortest path between the nodes using the network routingprotocol approach. The algorithm clustered the data nodes before thentransferring data between the nodes with low power consumption.C. Non-heuristic algorithms in the network layerKhan et al. [61] proposed a QoS-aware secured communicationapproach for IoT-based networks called QoS-IoT. The Sybil attackdetection mechanism was used for identifying Sybil nodes duringmulti-hop communication. To ensure the fair and ef ﬁcient utilization of the available bandwidth, an optimal contention window (CW) wasselected for QoS provisioning. The optimal CW size was selected by usingthe binary exponential back-off mechanism. The performance of QoS-IoTwas evaluated based on measurements of Sybil attack detection, fairness,throughput, and buffer utilization.A.N. Abosaif, H.S. Hamza Array 8 (2020) 100041
85.3. Application layerA. Heuristic algorithms in the application layerNwe et al. [52] introduced a matching, ranking, and selection modelto satisfy the distributed needs of dynamic networks in IoT environments.They selected services based on two factors to optimize the QoS, i.e.,objective information supplied by the service providers and subjectiveinformation provided by the service consumers. To select a service, theyproposed aﬂexible QoS-based service selection algorithm (FQSA). Theycalculated the subjective factors for user with a similarity aggregationmethod (SAM)) to evaluate the creditability of different users. Moreover,the user’s input was extracted using the QoS ontology, WordNet, andontological reasoning. To help understand the QoS characteristics, theyanalyzed a separate language glossary and evaluated the consistencyamong the QoS criteria chosen by the end users. The FQSA algorithmemployed an artiﬁcial neural network back-propagation algorithm(ANN-BP) toﬁnd the objective factors and improve the selection per-formance rate for acceptable real-time service selection. They also pro-vided aﬂexible, user-friendly assessment form to allow users to requestany number of QoS criteria.Mejri et al. [8] investigated the scalability of service selection in theIoT by using a self-adaptive approach based on a combination of a QoSprediction model, which considered the user context, service context,and network context by using the ANN, and the technique for order ofpreference by similarity to ideal solution (TOPSIS) model to introducethe best service to the consumer of the service. They optimized two QoSparameters comprising the response time and reliability.Quan et al. [59] introduced a reinforcement learning approach calledthe linear reward inaction (LRI) algorithm in real time. They consideredthe dynamic IoT environment by calculating the user ’s mobility, which could affect the accessibility and connection location of services, therebyreducing the search space for service discovery. The latest subjectiveassessment obtained from user feedback concerning the user contextsimilarity was used to estimate the QoS in a similar environment. Asubjective evaluation was conducted by calculating four factors: privacy,reliability, availability, and response time. Three objective attributescomprising the availability, response time, and calculation speed weredetermined by obtaining a score for each service. The service with thehighest score was selected.B. Meta-heuristic algorithms in the application layerLiu et al. [11] designed a cooperative evolution algorithm (CEA) forservice composition and selection to solve MOPs when selecting anoptimal service from a group of services with similar functionalities anddiverse QoS requirements. They aimed to develop an ef ﬁcient and robust approach by considering non-functional attributes comprising the cost,time, availability, and reliability. A heuristic optimization approach wasdeveloped by integrating GA and PSO in CEA. Their approach wascharacterized by improving the best localﬁrst strategy to select a service candidate, enhancing the global best policy, and ﬁtting the self-adaptive mechanism for the learning rate.Gao et al. [51] conducted global optimization for event SCs by using ameta-heuristic method based on GA but without the need to consider allpossible combinations. The non-functional attributes were representedby QoS properties for the latency, price, energy consumption, bandwidthconsumption, availability, completeness, accuracy, and security.In particular, they provided a QoS aggregation schema for complexevent service (QoS-AS for CES) composition in CES networks by treatingcomplex event processing as reusable services where reusability wasdetermined by examining intricate event patterns and primitive eventtypes. The abstract architecture of these complex networks is shown inFig. 5.
Fig. 5.Architecture of CES networks [51].
Fig. 4.Two-tier framework [6].A.N. Abosaif, H.S. Hamza Array 8 (2020) 100041
9A GA was also developed to efﬁciently create optimal event SCs withthe same standard GA steps (select, crossover, and mutate until thetermination conditions are satisﬁed) but some differences from thestandard implementation. A tree encoding schema was maintained by anevent reusability forest.Anas et al. [50] aimed to simulate human thinking when making adecision about multiple choices and using data collected from IoT sen-sors. They considered an example of a human making a decision whiledriving when faced with two paths that lead to the same place but withdifferent trade-offs in terms of the time, distance, or cost. Their frame-work collected data to help systems to select their future path. The mainproblem was how to capture and use human heuristic information. Theﬁnal solution reduced the total time and obtained more accurate Results.They used the heuristic-IoT framework for enhancing heuristic searchalgorithms and collecting data from IoT sensors. They implemented theirframework with a GA using data regarding the habits and behavior ofdrivers collected from sensors deployed in taxis to solve the travellingsalesman problem (TSP) with hidden edge costs. The proposed frame-work used heuristic information to generate smarter initial solutions forthe GA to solve the TSP instead of generating it randomly.On the cloud manufacturing side, Huang et al. [ 5] focused on solving the MOPs for cloud SC optimal selection (CSCOS) while consideringnon-functional QoS factors. They determined four parameters comprisingthe cost, execution time, energy consumption, and reliability.Non-functional attributes were considered for three types of cloud ser-vices: manufacturing software, hardware, and human resource services.They introduced a new chaos control optimal algorithm (CCOA) to solvethe CSCOS problem in large-scale solution spaces.Li et al. [9] focused on a cloud logistics platform based on IoT andcloud computing environments in order to study a logistics center byconsidering service encapsulation and resource virtualization. Theydeﬁned the primary requirement of the logistics center in terms of serviceselection as how toﬁnd the best actual Web services rather than the bestcombination of abstract Web services. Non-functional constraints wereused to compute the QoS for composite services by applying rules ofCanfora [9] for an aggregation function and four QoS parameterscomprising the time, cost, availability, and reliability. In addition, a dy-namic service selection model was proposed based on PSO.Abu-Safe et al. [62] proposed a service selection model that rankedservices based on end user feedback and the reputation value. The Likertscale was employed as a user-friendly method for acquiring feedbackfrom end users. An improved-PSO was used to select the optimal servicefrom ranked services. Two quality groups used to calculate the QoSfactors comprised the business quality group (BQG), i.e., reputation andexecution price, and the system quality group (SQG), i.e., reliability,availability, and response time.Jatoth et al. [60] introduced a meta-heuristic model using an adaptivegenotype evolution-based GA (AGEGA). They balanced the QoS param-eters and connectivity constraints to perform SC in a cloud environment.The discrete uniform rank distribution (DURD) and discrete uniformservice rank distribution (DUSRD) were proposed to determine the ser-viceﬁtness and SCﬁtness, respectively, thereby allowing services to bepruned from the non-optimal solutions and reduce the search space. Thespeciﬁc QoS parameters employed were not deﬁned. However, they used a synthetic data set with QoS parameters such as accessibility, cost,availability, throughput, response time, security, integrity, andreliability.C. Hyper-heuristic algorithms in the application layerElhosenya et al. [22] considered health services applications wherethey proposed a new cloud-IoT based model for ef ﬁciently managing large amounts of data in an integrated industry (4.0) environment. Theyaimed to satisfyﬁve factors, reducing the medical requests time(execution time, waiting time, and turnaround time), optimizing thestorage space for patient data, improving task scheduling, providing areal-time data retrieval mechanism for health care applications, andmaximizing the utilization of resources. They proposed a new model foroptimizing virtual machine selection by using three optimization algo-
rithms (GA, PSO, and Parallel PSO (PPSO)) to build the proposed model.Zhou and Yao [12] focused on cloud manufacturing by introducing asolution for composited cloud manufacturing service optimal selection(CCSOS) under multi-objectives using four QoS parameters comprisingtime, cost, availability, and reliability. They introduced the hybrid ABC(HABC) algorithm for CCSOS problems with three main steps. First, theHABC was initialized before outputting feasible solutions at each itera-tion and these solutions were ordered from large to small settlements.The onlooker strategy was improved by updating all the solutions withthe chaos algorithm, which had irregular properties in all states and itcould help the worst bees. The bee colony ’s search space was searched more efﬁciently based on knowledge of the problem structure and socialcolony information by updating small solutions with Archimedeancopula estimation of distribution.Yuan et al. [56] proposed a dynamic approach by used a fuzzy logictechnique and cultural GA to adapt the global QoS constraints. The globalQoS constraints were decomposed into near-optimal local QoS con-straints, before independently selecting a service component for eachabstract service. They aimed to satisfyﬁve QoS factors comprising the price, response time, availability, throughput, and successful executionrate.Hosseinzadeh et al. [57] combined a machine learning method with ameta-heuristic algorithm in a hybrid ANN-PSO algorithm. They aimed toimprove the execution time and reachability rate for a service selectionmodel in cloud-edge computing. A labeled transition system was pro-posed based on a veriﬁcation approach to check the correctness of theproposed model. Three QoS factors were considered comprising theresponse time, availability, and prices.5.4. Aggregate layersIn some methods, the models were aggregated together in more thanone layer, such as in the sensor layer and application layer [ 53,54]. Jin et al. [53] considered the services provided by IoT devices anddesigned a physical service model (PSM) to describe various physical IoTservices as well as a method for selecting a candidate physical service thatsatisﬁes a user’s requirements. The PSM model included three maincomponents (devices, resources, and services) and the relationships be-tween them were deﬁned. The following four QoS properties weredetermined based on the features of physical services: the available timewhen environmental services may be accessible, the service areacomprising descriptions of physical services for on-device resources thatcontain information about an entity, the processing time representing thecomputational time capacity of IoT devices, and the reputation calculatedfor a service to help users decide whether to use a service baseddepending on the service ratings given by different users (equipment orservice) after requesting services. A physical service selection (PSS) al-gorithm was proposed in terms of spatio-temporal features to ratecandidate physical services according to user preferences based on in-dividual QoS rating functions. The PSS algorithm comprised pre-sorting,ﬁltering, andﬁnal sorting phases.In 2016, Jin et al. [54] improved their PSM to dynamically rate QoSvalues and select a physical service based on the user ’s preference. They added the following three types of QoS attributes to re ﬂect the features of physical services: spatial-temporal attributes related to the problems thataffect the mobility and availability of physical services due to network,energy-saving, or privacy issues, i.e., available time and service area;positive features that preferably have higher values, i.e., reputation andreliability; and negative features that preferably have lower values, i.e.,processing time and execution cost.Gao et al. [58] aggregated the application layer and network layer toprovide recommendations for services and allow the selection of services,where they proposed a holistic framework for predicting the QoS valuesin the IoT. The proposed framework employs fuzzy C-means to clustercontextual information related to users and services, such as the networkA.N. Abosaif, H.S. Hamza Array 8 (2020) 100041
10location and geographic location, and neural collaborative ﬁltering (NCF) is applied as a neural network model to learn the in-depth latentfeatures. NCF utilizes local features such as similar users or similar ser-vices with historical QoS values and global elements comprising userlatent vectors and latent service vectors. NCF then combines thecontextual information with the historical QoS values to perform both theprediction and selection processes.Jatoth et al. [60] also aggregated the application layer and networklayer with a meta-heuristic model using AGEGA, where they balanced theQoS parameters and connectivity constraints to perform SC in a cloudenvironment. DURD and DUSRD were applied to determine the serviceﬁtness and the SCﬁtness, respectively, thereby allowing services to bepruned from the non-optimal solutions to reduce the search space.However, they did not deﬁne the speciﬁc QoS parameters used in their study, although they described the use of a synthetic data set containingQoS parameters, such as accessibility, cost, availability, throughput,response time, security, integrity, and reliability.Singh et al. [63] introduced a framework based on multi-criteriadecision making for directing the selection process. The frameworkaggregated the sensor, network, and application layers, and they com-bined two multi-criteria decision making methods comprising the ana-lytic hierarchy process (AHP) and TOPSIS. AHP was used to calculate theweights for the QoS criteria and TOPSIS ranked the service providers.They describe a QoS parameter based on three IoT components, i.e.,things, communication entity, and computing entity. Nine QoS parame-ters were considered: operating temperature range, resolution, accuracy,delay, jitter, pricing, availability, throughput, and response time.5.5. Analysis of solutions for implementing SSAsThe analyses of selected state-of-the-art solutions implementationsare categorized, as shown inTable 3. It is categorized based on the proposed solution, QoS layer, algorithm type, and QoS parameters.6. Analysis of performance evaluationsMost previous studies used simulations to evaluate the performanceof their proposed algorithms and they conducted comparisons with otherSSAs in the same environment. In addition, prototypes were constructedin other studies to evaluate the performance of their proposed algo-rithms. In some cases, simulations and prototype were combined in theevaluations. In the following, we discuss the three methods used toevaluate the state-of-the-art algorithms.6.1. Using simulation software to evaluate SSAsHuang et al. [5] demonstrated the high performance of their proposedCCOA algorithm in CSCOS based on simulations. They found that theiralgorithm was better at searching large-scale solution spaces than GA andtypical chaotic GA, where it reduced the time required and energy con-sumption. They recommended improving the effectiveness of CCOA tosolve other combinatorial optimization problems by balancing the searchcapacity and time consumption, and tested the effects of other QoSfactors.Liu et al. [11] developed CEA by integrating GA and PSO. Theyconducted simulations and generated a data set at different scales basedon real scenarios. They showed that CEA was a highly ef ﬁcient search approach with greater stability and more rapid convergence comparedwith canonical PSO (CPSO) and the improved discrete immune algorithmbased on CPSO (IDIPSO). They recommended extending the experimentsto greater scales.Na et al. [48] showed that their method decreased the time requiredfor implementation and increased the rate of service utilization. Whenthe service utilization reached 100%, the algorithm could not make anychanges after initialization. They recommended focusing on group-basedservice selection to reduce the communication energy requirements .Zhou et al. [12] evaluated the performance of HABC based on com-parisons with GA, PSO, and the basic ABC algorithm using 15 differentuser QoS preferences. They randomly generated the data set and theResults showed that HABC exhibited a high search capacity and stabilitywith acceptable time complexity. They recommended studying the per-formance of HABC in detail according to the characteristics of the cloudmanufacturing environment, and integrating HABC with other heuristicalgorithms.Reddy et al. [17] assessed the performance of the GSA and ABC al-gorithm based on the trends in the network sustainability of live IOTnodes in the network and by evaluating its convergence compared withPSO, GA, ABC, and GSO. The Results demonstrated that their approachperformed better than the other methods at cluster head selection for IoTdevices.
Yin et al. [49] showed that the pruning algorithm was more ef ﬁcient than the breadth-ﬁrst search shortest path algorithm. Furthermore, theDijkstraKNN algorithm was suitable for small shortest paths, but thePruningBFS algorithm was better when the candidate set was small andthe shortest paths were signiﬁcant. In addition, the execution times weremore stable for the BFSKNN and PruningBFSKNN algorithms accordingto tests using two real-world data sets comprising the Epinions Socialnetwork, and LiveJournal social network. They recommended identi-fying approximation algorithms that can handle more signi ﬁcant graphs where time is required to compute several nearest neighbors.Anas et al. [50] used the T-drive data set based on 10,357 taxi driversand compared the proposed Heuristic-IoT framework with GA. Theyfound the quality of the TSP Results improved by up to 49% comparedwith the traditional TSP.Abinaya et al. [16] compared the ACO algorithm with load balancingclustering for data clustering. They also compared the number of nodesversus the data throughput for time-efﬁciency prediction, where ACO reduced the time and energy required. ACO could ﬁnd an almost optimal solution and it could be scaled to large-scale IoT environments.Nwe et al. compared FQSA and other SSAs including (genetic algo-rithm and fuzzy logic based service selection algorithm (GAFLSS), agentproxy on user preference approach (APUP), and fuzzy linear program-ming approach (FLP)) [52], from the reliability of the trustmechanism-based service selection algorithm. They calculated the sym-metric mean of the recall and precision for each system using the fre-quency for various evaluation metrics (QoS aggregation, QoS reasoning,QoS scalability, personalized conﬁdentiality, and user friendliness). TheResults showed that FQSA improved the service selection performance,user satisfaction level, and user friendliness rates. However, many com-putations were required to select the services, which was timeconsuming.Jin et al. [53,54] evaluated the PSS method against the skyline-basedalgorithm called the one-pass algorithm (OPA) in terms of the executiontime and user preferences for physical services. They used a random dataset based on the Climatography of the United States Number 81 series(CLIM8144) data set. The Results showed that PSS was ef ﬁcient with a large number of candidate physical services [ 53] and it performed better than OPA in theﬁltering step by reducing the number of CPUs to improvethe selection performance [54]. For future research, they suggestedcreating and implementing an IoT service platform that allows users toregister their devices, and to discover and select required physical ser-vices, as well as addressing privacy and security issues, and reducing thesearch space. They suggested the use of pruning methods and heuristictechniques.Huang et al. [14,15,19–21] conducted simulations to assess the per-formance of their algorithm. Their algorithm reduced the total commu-nication energy by about 20% in IoT systems [ 20,21]. They compared the performance of greedy matching and the ILP solution at service matchingand found that the ILP solution was optimal but it required more time,and it might not be scalable to large-scale IoT systems [ 19]. In addition, they compared ILP [14,15
] and the MWIS framework with MWL[19–21], as well as with other selection strategies (GWMAX, GWMIN,A.N. Abosaif, H.S. Hamza Array 8 (2020) 100041
11Table 3Categorization of selected state-of-the-art methods based on the proposed solution, QoS layer, algorithm type, and QoS parameters.
Proposed Solution QoS Layer Algorithm Type QoS ParametersApp Sen N ⋅W Heu Meta-HeuHyper-HeuNon-HeuNew CCOA to solve CSCOS [5]✓✓ /C15Cost/C15Execution time/C15Energy consumption/C15Reliability Integrating GA and PSO algorithms [ 11]✓✓ /C15Cost/C15Time/C15Availability/C15Reliability Evolutionary game approach with platform-independentmiddleware [48] ✓✓ /C15Save energy/C15Cost HABC algorithm for CCSOS [12]✓✓ /C15Time/C15Cost/C15Availability/C15Reliability Two-tier framework based on ACO, GA, and PSO [ 6]✓✓ /C15Reduce energy consumption/C15Prolong the network lifetime Novel method that combines GSA and ABC [ 17]✓✓ /C15Reliable and manageable network/C15Efﬁcient data transmission Self-adaptive approach including ANN and TOPSIS models[8] ✓✓ /C15Response Time/C15Reliability DijkstraKNN, BFSKNN, and PruningBFSKNN Algorithms[49] ✓✓ /C15Reduce execution time/C15Consume less power HOLA in IIoT systems [7] ✓✓ /C15Reduce energy consumption/C15Balance energy consumption across the IoTnetwork Heuristic IoT framework based on GA [ 50
]✓✓ /C15Reduce the total time/C15Obtain more accurate Results ACO [16] ✓✓ Increase:/C15Energy efﬁciency/C15Time utilization/C15Throughput/C15Packet delivery ratio FQSA comprising ANN-BP and SAM [ 52]✓✓ Speciﬁc QoS not deﬁned PSM model and PSS algorithm [ 53,54]✓✓ ✓ In [53]:/C15Available time/C15Service area/C15Processing time/C15ReputationIn [54]:/C15Spatial-temporal attributes/C15Positive attributes/C15Negative attributes MWL [19–21] ✓✓ /C15Reduce communication costs/C15Balance energy consumption MWIS [14,15] ✓✓ /C15Reduce communication costs/C15Balance energy consumption CBSSMS [55] ✓✓ /C15Minimize latency time/C15Reduce energy costs/C15Balance the system energy to increase thesystem’s lifetime New model based on GA, PSO, and PPSO [ 22]✓✓ /C15Reduce time/C15Optimize the required storage/C15Improve scheduling tasks/C15Provide real-time data retrieval mechanism
/C15Maximize resource utilization Bi-SPO [18] ✓✓ /C15Minimize traditional QoS/C15Reduce energy consumption MOEA/D Approach [39] ✓✓ /C15Energy consumption/C15Energy balancing/C15Energy harvesting/C15Optimize the green index/C15QoS objectives EQSA [13] ✓✓ /C15Reduce energy consumption/C15Maintain high service availability CASSARAM [10] ✓✓ /C15Accuracy/C15Reliability/C15Battery life/C15Location Dynamic PSO model [9]✓✓ /C15Response time/C15Cost/C15Availability/C15Reliability(continued on next page)A.N. Abosaif, H.S. Hamza Array 8 (2020) 100041
12and GWMIN2) [15]. The Results were improved [15] and the total communication energy was reduced by 10% compared with othermethods [21]. They also implemented MWIS in a multi-hop network [ 14] and the total communication energy was reduced by more than 10%[15]. They planned to develop heuristic algorithms and test them withAdriano-based devices, as well as studying more complex applications bychecking the automatic conﬁguration module to support more usersinteracting with IoT systems.Shukla et al. [55] presented CBSSMS to link IoT services withappropriate sensors. They conducted comparisons with existing collo-cation distance algorithms based on the random mapping of services onany IoT device, where they tested linear, random, and star FBP networks.The Results showed that the CBSSMS algorithm reduced the latency andenergy consumption between devices compared with the collocationdistance algorithms [20].Elhosenya et al. [22] conducted a comparative study based on theexecution time, system efﬁciency, and data processing speed. Theyevaluated the effectiveness of their model against GA, PSO, and PPSO.The Results showed that the proposed model improved the total imple-mentation time by 50%. Moreover, the ef ﬁciency of the system at real-time data recovery improved signiﬁcantly by 5.2%. Alsaryrah et al. [18], evaluated the Bi-SPO algorithm against QoSC,which only considers the QoS, and EPC, which only considers the energyproﬁle. The Results showed that Bi-SPO achieved the ideal balance be-tween the traditional QoS level and energy consumed, and it performedbetter than the other algorithms.Lin et al. evaluated their MOEA/D approach based on a sensor se-lection problem [39]. They showed that increasing the problem size ledto an increase in the energy consumption, energy balancing, energyharvesting services, and pollution level, but it did not affect the QoS.They generated their data set.Khanouche et al. [13] assessed the performance of EQSA by simu-lating the A2NEts European project scenario, which involves monitoringand smart metering for buildings. They synthetically generated data setsbased on QoS factors and realistic energy models to specify the energyproﬁles of IoT services. The simulation Results demonstrated the ef ﬁcient performance of EQSA in terms of the energy ef ﬁciency, selection time, composition lifetime, and optimality of the solution.Li et al. [9] simulated their PSO method and showed that it was moreefﬁcient than using GAs. PSO optimized different ﬁtness parameters and maximized the availability or reliability while maintaining a low cost andresponse time. They considered a real-world scenario involving thetransport of furniture among countries by combining ﬁve Web services related to shipping cargo services. They applied their method to a pre-viously reported data set (Mao data set) of QoS values. The feasibility ofapplying PSO was conﬁrmed by implementing the simulation program inTable 3(continued)
Proposed Solution QoS Layer Algorithm Type QoS ParametersApp Sen N ⋅W Heu Meta-HeuHyper-HeuNon-HeuFuzzy logic and cultural GA [ 56]✓✓ /C15Price/C15Response time/C15Availability/C15Throughput/C15Execution rate Hybrid ANN-PSO [57]✓✓ /C15Response time/C15Availability/C15Prices Fuzzy C-means and NCF [58]✓✓ ✓ /C15Response time/C15Throughput LRI [59] ✓✓ /C15Subjective:/C15Privacy/C15Reliability/C15Availability/C15Response Time/C15Objective:/C15Availability/C15Response time/C15Speed AGEGA [60] ✓✓ ✓ /C15Balancing/C15QoS parameters/C15Connectivity constraints QoS-IoT [61] ✓✓ /C15Sybil attack detection/C15Fairness/C15Throughput/C15Buffer utilization Likert-Improved-PSO [62]✓✓ /C15BQG:/C15Reputation/C15Execution price/C15SQG/C15Reliability
/C15Availability/C15Response time AHP- TOPSIS [63] ✓✓ ✓✓ /C15Temperature range/C15Resolution/C15Accuracy/C15Delay/C15Jitter/C15Pricing/C15Availability/C15Throughput/C15Response time
Abbreviations.APP: application layer;Sen: sensor layer;N⋅W: network layer;Heu: heuristic;Meta-Heu: meta-heuristic;Hyper-Heu: Hyper-Heuristic;Non-Heu: non-heuristic.A.N. Abosaif, H.S. Hamza Array 8 (2020) 100041
13Java. They recommended further research into logistics and Web serviceselection, improving the efﬁciency of SSA based on PSO, comparing PSOwith other algorithms, and developing methods to con ﬁrm the consis- tency of QoS between service consumers and service providers.Yuan et al. [56] evaluated the performance of a fuzzy logic techniqueand cultural GA by comparing it with a QoS constraints decomposition(QCD)approach based on cultural GA and an integer programming(IP)-based approach. The experimental Results showed that using thefuzzy logic technique and cultural GA was appropriate in terms of theadaptability and scalability to the environment, as well as satisfying theuser preferences and increasing the number of candidate services. Theyused the Quality Web Service (QWS) data set containing 2508 real Webservices with 10 QoS attributes factors [ 64]. Also they randomly gener- ated other data set according to QWS (RQWS) using the Eclipse pro-gramming tool. They recommended increasing the number of fuzzy setsand formulating more appropriate fuzzy rules, before applying theirapproach in a distributed environment where a group of distributed QoSregistries maintain the QoS values.The hybrid ANN-PSO algorithm obtained better ﬁtness values compared with PSO, GA, and PSOGA [ 57]. They evaluated their method based on simulations using the C# language as an integrated develop-ment environment (IDE) and the PAT model checker was employed toprove the correctness of the proposed algorithm. They employed QWSdata set containing 2500 Web services. They recommended using deeplearning methods to avoid the space explosion problem in the SC model.Satisfactory experiments were conducted based on real-world WS-Dream data sets by Gao et al. [58]. The prediction performance wasevaluated using the root mean squared error and mean absolute error.The experimental Results veriﬁed the effectiveness of the proposed NCFand context-aware NCF (CNCF) frameworks compared with well-knownQoS prediction methods comprising user-based PCC (UPCC), item-basedPCC (IPCC), web service recommender (WSRec), and location-basedfactorization machine (LBFM). They recommended implementingwork-based models in the QoS prediction task, such as a recurrent neuralnetwork and convolutional neural network, and studying the time factorduring QoS prediction.The dynamic LRI model was compared with another based on userfeedback [59], and the Results showed that the LRI model improved theeffectiveness in a real-time scenario because it considers the similaritybetween users, although the time consumption was higher. The data setand scenario were generated in the study. For future research, they rec-ommended applying a user-centric service management system based onthe user’s preferences in the IoT environment.Jatoth et al. [60] compared the performance of AGEGA with othermethods based on GA, i.e., GA, orthogonal GA (OGA), adaptive geneticprogramming (AGP), and transactional GA (TGA). The experimentalResults showed that AGEGA obtained better ﬁtness values within a lower execution time. They used QWS as the data set of QoS parameters andrandomly generated some of the QoS parameters and their correspondingvalues. They recommended considering multiple service connectivityconstraints and multiple QoS parameters in future research, as well asdeveloping an efﬁcient approach for various parallel data processingplatforms.Khan et al. [61] simulated QoS-IoT and compared FIFO, round-robin(RR), and cross-layer scheduling based on the utilization of the CW viaadaptation using the network simulator NS-2. They simulated IoT-basednetworks that covered a city of 100/C2100 km
2using a system model produced with the proposed approach. The total area was divided intosmaller IoT-based networks, where each network comprised Sybil, mo-bile, static, and high power nodes. The simulation Results showed thatQoS-IoT was resilient against the Sybil attack, as well as improvingnetwork performance with a large amount of data. They recommendedstudying the effect of Sybil node detection-aware QoS on the Internet ofVehicles andﬂying ad hoc networks.Abu-Safe et al. [62] simulated their Likert-Improved-PSO model andevaluated its performance based on comparison with the original PSOand Improved-PSO. The proposed model had a lower execution time andit obtained betterﬁtness value. For future research, they recommendedtesting more QoS parameters and combining with more than onemeta-heuristic algorithm with respect to the end user feedback.Singh et al. [63] applied their AHP–TOPSIS framework and existing AHP–AHP framework to a health care case study and compared the Re-sults based on the execution time for the selection value. AHP –TOPSIS required a lower execution time than AHP –AHP to obtain the same se- lection value. They assembled real data sets from three different pro-viders but did not describe them. The robustness of the proposedframework was measured but the sensitivity toward changes in the useror decision maker was not analyzed. They recommended extending theirmethod to deal with fuzziness in human decision making.6.2. Using prototypes to evaluate SSAsSun et al. [6] evaluated three heuristic algorithms (ACO, GA, andPSO) by building prototypes to calculate the ﬁtness, minimum, and dif- ference in the residual energy for smart devices. The Results showed thatPSO performed better than GA and ACO at the optimization problem.Mejri et al. [8] developed a parallel implementation of the ANNmodel and TOPSIS model to evaluate the scalability of SSA in the IoT.They used the mean absolute error to measure the quality of the pre-diction model. As the number of services increased, the mean absoluteerror decreased and the accuracy increased, but there was no signi ﬁcant increase in the execution time. They recommended using an evolutionarytechnique and pruning methods. A limitation was that the proposedapproach was applied to a training set built during search steps that didnot meet all Internet requirements. In addition, they only considered theresponse time and reliability as QoS factors in their study.Gao et al. [51] proposed QoS-AS for CES and GA, which theycompared with a brute-force enumeration algorithm in terms of theexecution time and optimization degree, where the proposed algorithmimproved the optimized Results from 79% to 97%. The performance ofCASSARAM was also evaluated based on the change in the storageTable 4Categorization of state-of-the-art algorithms according to evaluation methodsand performance measurement based on prototypes.
Reference Software used Performance measurementData set Results[6] Javaprogram,with Intel i7-6700 CPU, 8-GB ofmemory, and64-bitWindows 7Compared withACO, GA, andPSOGeneratedtheir owndata setPSO performedbetter than GAand ACO
[8] Java andmeanabsolute erroras theassessmentmetricEvaluated ANNmodel andTOPSIS modelDifferent datasetsgeneratedrandomly[0,1]Increased theaccuracy, butwith nosigniﬁcantincrease inexecution time [10] Java on acomputerwith anIntel(R) Corei5-2557 M,1.70 GHzCPU, and 4GB RAMComparisonbased onexecution time,memoryrequired, andaccuracyLinkedSensorMiddlewareprojectReducedprocessing timeand minimizedstoragerequirements
[51] Java usingMacBook Prowith 2.53GHz duo coreCPU and 4 GB1067 MHzmemoryCompared witha brute-forceenumerationalgorithmBuilt theirown data setImprovedexecution timeand degree ofoptimization,and optimizedResults from79% to 97%A.N. Abosaif, H.S. Hamza Array 8 (2020) 100041
14requirements according to the sensor data descriptions, the requirementsfor sensor selection and indexing, the memory required to select sensors,and the change in the accuracy rate. They evaluated the processing timeand memory requirements based on sensor selection and relational ex-pressions during the semantic querying phase. The data sets employedwere from the Linked Sensor Middleware project. They showed thatCASSARAM could reduce the processing time and minimize the storagerequirements. In the future, they plan to merge their algorithm withleading IoT middleware solutions such as SenseMA and Open-IoT toimprove the automated sensor selection functionality in the IoT envi-ronment. They also recommended enhancing the ef ﬁciency of CAS- SARAM to integrate automated machine learning techniques usingcluster-based sensor search and heuristic algorithms.Table 5Categorization of state-of-the-art algorithms according to evaluation methods and performance measurement based on simulations.
Reference Software used Performance measurement Data set Results[49] Java on Hadoop platform using IntelCore 2 Duo CPU and 1 GB of RAM,running CentOS v6.0Compared DijkstraKNN, BFSKNN,and PruningBFSKNN algorithms /C15Epinions Social network/C15LiveJournal social network BFSKNN and PruningBFSKNN algorithmsobtained more stable execution times[16] Java using Intel Core, Window 32-bitsystem Compared ACO with loadbalancing clustering Not stated Reducing the time and energy required, and more efﬁcient for large scale IoT [53,54] Java on a desktop computer with IntelCore i5-3570 dual CPU, 3.40 GHz,running on Windows 8 (64-bit)Compared PSS and PSM withskyline-based algorithm OPA Generated random data based onClimatography of the United StatesNumber 81 series (CLIM8144) datasetEfﬁcient with a large number of candidatephysical services and improved the selectionperformance;More scalable and reduced the execution time[54] [18] Java under 64-bit Windows 7 OS, onIntel Core i5- 8 GB RAM Compared QoS-C and EPC Synthetically generated data set based on QoS Performed better than algorithms that onlyconsidered QoS-C or EPC [13] Used JVM, JRE 1.6, for Windows 64-bit running on Intel Core i7-4712HQCPU random memory_ Synthetically generated data set based on QoS and EP Improved energy efﬁciency, selection time,composition lifetime, and optimality of thesolution [9] Simulation program in Java Compared with GA Mao Data set Increased the availability and reliability, and maintained low cost and response time [11] MATLAB 7.0þIntel Core2 Duo 2.10GHz CPU Compared CEA with CPSO andIDIPSO Data generated from real scenarios High performance in terms of search convergence and stability [12] MATLAB R2013b for Windows 7 on2.50-GHz PC with 4-GB RAM Compared HABC with GA, PSO,and basic ABC Randomly generated data set among[0.7, 0.95] High performance in terms of search stabilitywithin acceptable time [17] MATLAB R2015a Compared GSA and ABC with PSO, GA, ABC, and GSO Real-time data acquisition readthrough Xively IoT API Improved cluster head performance[55] MATLAB R2017b on Core(TM) i3-5005U CPU @ 2.00 GHz (4 CPUs) and4 GB RAMCompared CBSSMS with distancealgorithms at randomly mappingservices on devicesGenerated their own data set Reduced latency and energy balance between devices
[22] MATLABþCloudSim package Compared hyper-model with GA, PSO, PPSO Generated their own data set Enhanced implementation time and system ’s efﬁciency in real time [52] Not stated Compared FQSA with GAFLSS, APUP, and FLP Random QoS data sets generated from[0,1] Improved selection performance and usersatisfaction level [19–21] Not stated Compare the performance of three models Generated their own data set byrandomly generating services data set Reduced communication energy consumptionand increased system lifetime [14,15] Not stated Compared MWIS with MWL, GWMAX, GWMIN, and GWMIN2 Generated their own data set Reduced communication energy and increased system lifetime [39]Cþþprogramming language run on aPC with Intel Core i7-6700 CPU and 8GB memoryCompared with sensor selectionalgorithms Generated their won data set Ran more ef ﬁciently[7] Python with NetworkX, SciPy, andNumPy libraries Compared HOLA system withVanilla System Not stated Reduced energy consumption by IoT sensors by reducing the internal communication inIoT devices, as well as reducing time required [56] Microsoft Visual C. Net on PC with anIntel Core i5 (1.6 GHz) CPU and 4 GBRAMCompared fuzzy logic techniqueand cultural GA with QCD and WS-IPQWS and RQWS generated randomlyusing Eclipse programming tool Reduced runtime and approximation ratio[57] C# language used as an integrateddevelopment environment and PATmodel checkerCompared ANN-PSO with PSO, GA,and PSOGA algorithms QWS Improve execution time and reachability rate[58]- Compared NCF and CNCF againstQoS prediction methods (UPCC,IPCC, WSRec, and LBFM)WS-Dream Superior prediction performance demonstrated[59] Mac-OS 10.14.3 within an Intel i5-7500U 2.30 GHz CPU, 8 GB RAM Compared LRI with anothermethod that considered userfeedbackGenerated their own data set Veri ﬁed the similarity between users in realtime[60] Java and R language on Intel (R) Core(TM) i5 2.60-GHz processor and 8 GBof memory, running Windows 8.1Compared AGEGA with GA, OGA,AGP, and TGA QWS plus some random data Obtained better ﬁ
tness values in lowerexecution time[61] Network simulator NS-2 Compared QoS-IoT against FIFO, RR, and cross-layer basedutilization of CW for schedulingDesigned their scenario Improved network performance with a large amount of data[62] MATLAB on Windows 10, 2.90 GHzprocessor, and 8 GB RAM Compared Likert-Improved-PSOwith original PSO and Improved-PSOGenerated a random data set Better ﬁtness values and lower execution time[63]- Compared with AHP–AHP Health care case study using real datacollected from various sourcesavailable onlineLower execution time and robust to changesin user or decision makerA.N. Abosaif, H.S. Hamza Array 8 (2020) 100041
156.3. Using simulations and prototypes to evaluate SSAsDhondge et al. [7] validated HOLA based on simulation studies anddesigned a HOLA IoT sensor prototype with Adriano. In practical ex-periments, they measured the energy consumption of the HOLA IoTsensors in different operational scenarios and communication settings. Inparticular, they compared the energy consumption of HOLA and theVanilla System, and showed that HOLA could reduce the energyconsumed in IoT sensors by reducing the internal communication in theIoT device. The time consumption with HOLA was better compared withthe Vanilla System. They recommended detecting the maximal energyefﬁciency that satisﬁes the SLA agreement and evaluating HOLA usingdifferent smartphone densities in the future.6.4. Analysis of evaluations and performance measurements for SSAsThe analyses of selected state-of-the-art solutions evaluations usedprototypes, and Simulationd are categorized, as shown in Tables 4 and 5 respectively. They categorized based on the software used, performancemeasurement, applied data set, and obtained results.7. Results and future research directionsSSAs are essential for the IoT environment in order to satisfy thepreferences of end users by selecting the required services based on QoSfactors. In the following, we discuss the Results, possible future researchdirections, and limitations of the state-of-the-art solutions, therebyhighlighting the basic requirements for a robust SSA structure.Based on our proposed classiﬁcation, the structure of a SSA can bedivided into the design process to determine the appropriate environ-ment for building the SSA, the implementation stage involving thedeﬁnition of the structure required to implement the SSA, and the eval-uation step to measure the performance of the SSA.In order to design an appropriate SSA structure for the IoT sys-tem, the following speciﬁc features should be considered. The timeallocated to the selection process is called the process time phase. Thedesign time is rarely static before a user requires a service [ 13]. Thus, most of the state-of-the-art methods are dynamic during the runtime [ 5,7, 11]. In terms of workﬂow management, IoT is a large-scale environmentthat requires complex management or orchestration [ 7,14,17], where the IoT devices and network communication structure have speci ﬁc prop- erties. Thus, most studies preferred to select a choreography work ﬂow [6, 50,51]. Moreover, to the best of our knowledge, no algorithms involvedsingle-objective optimization because the QoS factors are related toothers, and thus MOPs [6,48] and MaOPs [5,11] required optimization. In order to implement and build an appropriate SSA for the IoTsystem, most of the state-of-the-art methods focused on selecting the QoSfactors that need to be optimized or satis ﬁed. We classiﬁed the QoS factors based on the IoT architecture proposed by Li et al. [ 40] in the application layer, sensor layer, and network layer. In future research, itwould be useful to focus more on search in the network layer because itsproperties affect the selection of the required services. Moreover, thetraditional QoS factors considered in most studies comprised the opti-
mization time, cost, availability, reliability, and energy consumption, asshown inFig. 7.In addition, most of the solutions proposed for SSA used searchoptimization algorithms, particularly meta-heuristic algorithms [ 16,39, 50] based on evolutionary algorithms (e.g., GA, PSO, and ACO), as wellas heuristic algorithms [7,19–21,49]. To the best of our knowledge, veryfew studies have implemented hyper-heuristic algorithms for makingselections in the IoT system, as shown in Ref. [ 22]. The remaining state-of-the-art methods employed other types of algorithms such asPareto optimality [13] and the PSS method [53,54]. Thus, researchers have tended to produced improved algorithm bycombining more than one to obtain more ef ﬁcient solutions. Thus, new solutions can be obtained for selection problems by considering othermethods such as fuzzy logic.A new trend is the use of prediction in the selection process toenhance the end user preferences [ 58]. We consider that using a recommendation system that predicts the behavior and preferences ofend users could result in a more effective selection process.In order to evaluate and measure the performance of SSAs,studies have generally compared the proposed algorithms and modelswith others, as shown inTables 4 and 5. Most studies conducted simu- lations but some involved building prototypes. The most commonly usedlanguage is Java, followed by MATLAB and other programming lan-guages, as shown inFig. 8. In most studies, data sets were generated forthe experimental evaluations [12,19–21,52,55], although some used existing data sets that were not constructed speci ﬁcally for IoT envi- ronments [9,49,53,54].Thus, there is need to provide an appropriatedata set that satisﬁes the QoS requirements for services in IoTenvironments.The Results shown inFigs. 6–8were extracted by analyzing reports ofstate-of-the-art methods.Fig. 6was derived by analyzing the imple-mentations of solutions for SSAs, as shown in Table 3.Fig. 8was extracted by analyzing the evaluations and performance measurementsfor SSAs, as shown inTables 4 and 5.Figs. 6–8should help researchers to extract useful information to guide their research into SSAs in IoTenvironments.
Fig. 6.Implementations algorithms in different IoT layers.
Fig. 7.Common QoS factors considered.A.N. Abosaif, H.S. Hamza Array 8 (2020) 100041
168. ConclusionThe development of the IoT environment has led to increases in thenumber of sensors that provide different services to end users. Theseservices have similar functional properties but different non-functionalproperties (QoS factors). This problem requires the selection of algo-rithms that can identify the optimal service to meet the requirements ofthe end user. Many studies have investigated SSAs based on Web servicesbut we focused on SSA solutions proposed for the IoT environment in thisreview. We presented the fundamental design structures, behaviors, andoptimization objectives of SSA in IoT under QoS constraints. The state-of-the-art algorithms were analyzed based on the implementation and QoSlayer in the IoT architecture (sensor layer, network layer, and applicationlayer). Moreover, performance evaluations were analyzed to determinethe most commonly used methods and data sets for assessing the per-formance of algorithms. Finally, we identi ﬁed possible future research directions and deﬁciencies to help the research community developappropriate SSAs for the IoT system and to optimize the critical QoSfactors required by end users.9. Research limitations and future recommendationsIn the future, we recommend reviewing more SSA solutions byincreasing the research scope. In this review, we focused mainly onheuristic, meta-heuristic, and hyper-heuristic algorithms, and thus werecommend studying other types of optimization algorithms. In addition,we recommend the construction of an appropriate QoS data set for theIoT environment.Declaration of competing interestsThe authors declare that they have no known competing ﬁnancial interests or personal relationships that could have appeared to in ﬂuence the work reported in this paper.Abbreviation, DeﬁnitionABC Artiﬁcial Bee ColonyACO Ant Colony OptimizationAGP Adaptive Genetic ProgrammingAHP Analytic Hierarchy ProcessANN Artiﬁcial Neural NetworkANN-PSO Artiﬁcial Neural Network-Based- Particle SwarmOptimizationBi-SPO Bi-Objective Shortest Path OptimizationCASSARAM Context-Aware Sensor Search, Selection, And RankingModelCBSSMS Collocation Based Sensor-Service Mapping StrategyCCOA Chaos Control Optimal AlgorithmCCSOS Composited Cloud Manufacturing Service Optimal SelectionCEA Cooperative Evolution AlgorithmCNCF Context-Aware Neural Collaborative FilteringDURD Discrete Uniform Rank DistributionDUSRD Discrete Uniform Service Rank DistributionEB Energy BalancingFBP Flow-Based ProgramFIFO First In First OutFQSA Flexible QoS-Based Service Selection AlgorithmGA Genetic AlgorithmGSA Gravitational Search AlgorithmHABC Hybrid Artiﬁcial Bee ColonyHOLA Heuristic And Opportunistic Link Selection AlgorithmIIoT Industrial IoTILP Integer Linear ProgrammingIoT Internet of ThingsIPCC Item-Based PCCLBFM Location-Based Factorization MachineLRI Linear Reward InactionMaOP Many-Objective Optimization ProblemMOEA/D Many-objective Evolutionary Algorithm DecompositionMOPs Multi-objective optimization problemMWIS Maximum Weighted Independent SetMWL Maximum Weighted LinkNCF Neural Collaborative FilteringOGA Orthogonal Genetic AlgorithmOPA One-Pass AlgorithmPSO Particle Swarm OptimizationPSS Physical Service SelectionQCD QOS Constraints DecompositionQoS Quality of ServiceQoS-AS for CES QoS Aggregation Schema for Complex Event ServiceRQWS Randomly Generated QWSRR Round-Robin SchedulingSC Service CompositionSOA Service-Oriented ArchitectureSOAP Simple Object Access ProtocolSSA Service Selection AlgorithmTGA Transactional Genetic AlgorithmTOPSIS Technique for Order of Preference by Similarity to IdealSolutionUDDI Universal Description, Discovery, and Integration
UPCC User-Based PCCW3C World Wide Web ConsortiumWS Web ServicesWSDL Web Services Description LanguageWSREC Web Service RecommenderReferences
[1]Nicolescu R, Huth M, Radanliev P, De Roure D. State of the art in IoT - beyondeconomic value. 2018.[2]Evans D. The Internet of things - how the next evolution of the Internet is changingeverything. 2011.[3]Maaradji A. End-user service composition from a social networks analysisperspective. 2011. theses.fr.
Fig. 8.Programming languages used for performance evaluations.A.N. Abosaif, H.S. Hamza Array 8 (2020) 100041
17[4]Xia Y, Chen P, Bao L, Wang M. 2011 IEEE international conference on web services.In: A QoS-aware web service selection algorithm based on clustering; 2011. p. 8 . [5]Huang B, Li C, Tao F. A chaos control optimal algorithm for QoS-based servicecomposition selection in cloud manufacturing system. Enterprise Inf Syst 2014;8(4):445–63.[6]Sun M, Shi Z, Chen S, Zhou Z, Duan Y. Energy-ef ﬁcient composition of conﬁgurable Internet of things services.IEEE Access; 2017. p. 1–14. [7]Dhondge K, Shorey R, Tew J. HOLA: heuristic and opportunistic link selectionalgorithm for energy efﬁciency in Industrial Internet of Things (IIoT) systems. In:2016 8th international conference on communication systems and networks.COMSNETS 2016; 2016. p. 1 –6. [8]Mejri M, Ben Azzouna N. Scalable and self-adaptive service selection method for theinternet of things. Int. J. ofComputer Appl. 2017;167(10):43 –9. [9]Li W, Zhong Y, Wang X, Cao Y. Resource virtualization and service selectionin cloudlogistics. J Netw Comput Appl 2013;(1 –9). [10]Perera C, Zaslavsky A, Liu CH, Compton M, Christen P, Georgakopoulos D. Sensorsearch techniques for sensing as a service architecture for the internet of things.IEEE Sensor J 2014;14(2):406 –20. [11]Liu J, et al. A cooperative evolution for QoS-driven IoT service composition. Autom.‒J. Control. Meas. Electron. Comput. Commun. 2013;54(4):438 –47. [12]Zhou J, Yao X. A hybrid artiﬁcial bee colony algorithm for optimal selection of QoS-based cloud manufacturing service composition. The International Journal ofAdvanced Manufacturing Technology 2017;88(9-12):3371 –87. [13]Khanouche ME, Amirat Y, Chibani A, Kerkar M, Yachir A. Energy-centered and QoS-aware services selection for internet of things. IEEE Transactions on AutomationScience and Engineering 2016;13(3):1256 –69. [14]Huang Z, Lin K, Yu S, Hsu JY. Co-locating services in IoT systems to minimize thecommunication energy cost. Journal of Innovation in Digital Ecosystems 2014;1(1-2):47–57.[15]Huang Z, Lin KJ, Yu SY, Hsu JYJ. Building energy ef ﬁcient internet of things by Co- locating services to minimize communication. In: Medes 2014 - 6th internationalconference on management of emergent digital EcoSystems; 2014. p. 101 –8. Proceedings.[16]Abinaya S, Akshaya G, Dhivya J. Minimizing energy consumption using internet ofthings.Int. J. Recent Innov. Trends Comput. Commun. , no. March 2017:67–70. [17]
Reddy MPK, Babu MR. Energy efﬁcient cluster head selection for internet of things energy efﬁcient cluster head selection for internet of things. New Rev Inf Netw2017;22(1):54–70.[18]Alsaryrah O, Mashal I, Chung T. Bi-objective optimization for energy aware internetof things service composition. IEEE Access 2018;6:26809 –19. [19]Yu SY, Shih CS, Hsu JYJ, Huang Z, Lin KJ. QoS oriented sensor selection in IoTsystem. In: Proceedings - 2014 IEEE international Conference on Internet of things,iThings 2014, 2014 IEEE international Conference on green Computing andcommunications, GreenCom 2014 and 2014 IEEE international Conference oncyber-physical-social computing, CPS 20. iThings; 2014. p. 201 –6. [20]Huang Z, Lin KJ, Li C, Zhou S. Communication energy aware sensor selection in IoTsystems. In: Proceedings - 2014 IEEE international Conference on Internet of things,iThings 2014, 2014 IEEE international Conference on green Computing andcommunications, GreenCom 2014 and 2014 IEEE international Conference oncyber-physical-social computing, CPS 20. iThings; 2014. p. 235 –42. [21]Huang Z, Lin KJ, Han L. An energy sentient methodology for sensor mapping andselection in IoT systems. IEEE International Symposium on Industrial Electronics2014:1436–41.[22]Elhoseny M, Abdelaziz A, Salama AS, Riad AM, Muhammad K, Sangaiah AK. “A hybrid model of internet of things and cloud computing to manage big data inhealth services applications. Future generation computer systems. 2018;86:1383–94.[23]Li Y, Huang Y, Zhang M, Rajabion L. Service selection mechanisms in the Internet ofThings (IoT): a systematic and comprehensive study. Cluster Comput 2020;23(2):1163–83.[24]Manqele L, Dlodlo M, Coetzee L, Sibiya G. A survey for service selection approachesin dynamic environments. In: 2017 IEEE AFRICON: Science, Technology andInnovation for Africa. AFRICON 2017; 2017. p. 1049 –54. [25]Bouzary H, Frank Chen F. Service optimal selection and composition in cloudmanufacturing: a comprehensive survey. Int J Adv Manuf Technol 2018;97(1 –4): 795–808.[26]Yu HQ, Reiff-Marganiec S. Non-functional property based service selection: a surveyand classiﬁcation of approaches. CEUR Workshop Proc. January, 2008;411 . [27]Hamzei M, Navimipour NJ. Towards ef ﬁcient service composition techniques in the internet of things. IEEE Internet Things J. Towar. 2018;4662. c . [28]Aoudia I, Benharzallah S, Kahloul L, Kazar O. A comparative analysis of IoT servicecomposition approaches. In: The international arab conference on informationTechnology yassmine hammamet; 2017. p. 1 –7. Tunisia. [29]Asghari P, Rahmani AM, Haj H, Javadi S. Service composition approaches in IoT: asystematic review. J. Netw. Comput. Appl. 2018;120:61 –77. [30]Kahloul L, Benharzallah S, Aoudia I. Service composition approaches for Internet ofThings: a review. Int J Commun Network Distr Syst 2019;23(1):1 . [31]
Dongre Y, Ingle R. An Investigation of QoS Criteria for Optimal Services Selection inComposition. In: 2nd Int. Conf. Innov. Mech. Ind. Appl. ICIMIA 2020 - Conf. Proc.,no. Icimia; 2020. p. 705 –10. [32] Hugo Haas W, (until J M. Allen Brown, “web services glossary,”W3C working group [Online]. Available:https://www.w3.org/TR/ws-gloss/ ; 2002. 20-Jan-2018.[33]Sheng QZ, Qiao X, Vasilakos AV, Szabo C, Bourne S, Xu X. “Web services composition: a decade’s overview. Inf Sci (Ny) 2014;280:218 –38. [34]Elﬁrdoussi S, Jarir Z. An integrated approach towards service composition lifecycle: a transportation process case study. May 2018 J. Ind. Inf. Integr. 2019;15.138–146.[35]Elqortobi M, Bentahar J, Dssouli R. “Framework for dynamic web services composition guided by live testing. In: Lecture notes of the institute for computersciences, social-informatics and telecommunications engineering, vol. 206. LNICST;2018. p. 129–39. 5.[36]Lemos AL, Daniel F, Benatallah B. Web service composition: a survey of techniquesand tools. ACM Comput Surv 2015;48(3):1 –41. [37]Caramia P, Massimiliano Dell ’Olmo. Multi-objective optimization. In: Multi- objective management in freight logistics; 2008. p. 11 –37. [38]Marler RT, Arora JS. Survey of multi-objective optimization methods forengineering. Struct Multidiscip Optim 2004;26(6):369 –95. [39]Lin CC, Deng DJ, Lu ALY. Many-objective sensor selection in IoT systems. IEEEWirel. Commun. 2017;24(3):40 –7. [40]Li L, Li S, Zhao S. QoS-Aware scheduling of services-oriented internet of things.IEEE Trans. Ind. Informatics 2014;10(2):1497 –507. [41]Marjanovi/C19c M, Skorin-kapov L. Quality of service (QoS) for IoT services. 2014 . [42]Jim/C19enez-S/C19aez NMH. Multi-criteria decision-making, evolution and characteristics.In: International series in operations research &management science. Cham: Springer; 2019. p. 3–13. [43]Bianchi L, Dorigo M, Gambardella LM, Gutjahr WJ. A survey on metaheuristics forstochastic combinatorial optimization. Nat Comput 2009;8(2):239 –87. [44]R P, Edmund Burke SS, Hart Emma, Kendall Graham, Jim Newall. Hyper-heuristics:an emerging direction in modern search Technology. ResearchGate; 2003. no. January, pp. 0–23.[45]Gendreau M, Potvin J-Y. A classiﬁcation of hyper-heuristic approaches edmund, vol. 272.Springer-Verlag; 2010. July 2014. [46] F. Wikipedia,“Basic prototype categories. ” [47] 06-Jun-2020 Prototypes vs. simulations. Applied Abstractions; 2005 [Online]. Available:https://appliedabstractions.com/2005/04/12/prototypes-vs-simulations/.[48]Na J, Lin K, Huang Z, Zhou S. An evolutionary game approach on IoT serviceselection for balancing device energy consumption. In: IEEE 12th internationalconference on e-business engineering; 2015. p. 331 –8. [49]Yin X, Yang J. Shortest paths based web service selection in internet of things.J. Sensors 2014;2014.[50]Anas M, Khatab S, Badr A. Poster: HeuristicIoT: a framework for augmentingheuristic search algorithms by internet-of-things data. In: MobiSys 2016 companion- companion publication of the 14th annual international conference on mobilesystems, applications, and services, vol. 12; 2016. p. 4. 1 . [51]Gao F, Curry E, Ali MI, Bhiri S, Mileo A. QoS-aware complex event servicecomposition and optimization using genetic algorithms 2014;8831:386 –93. [52]Nwe NWE, Win H, Jian-min BAO, Gang CUI. Flexible user-centric service selectionalgorithm for Internet of Things services. J China Univ Posts Telecommun 2014;21:64–70. July.[53]Jin X, Chun S, Jung J, Lee K. IoT service selection based on physical service modeland absolute dominance relationship. In: IEEE international conference on service-oriented computing and application; 2014. p. 65 –72. [54]Jin X, Chun S, Jung J, Lee K. A fast and scalable approach for IoT service selectionbased on a physical service model. Information Systems Frontiers 2016;19(6):1357–72.[55]Shukla J, Maiti P, Sahoo B. Low latency and energy ef ﬁcient sensor selection for IoT services. In: International Conference on Technologies for Smart City EnergySecurity and Power: Smart Solutions for Smart Cities, ICSESP 2018 - Proceedings;2018. p. 1–5. 2018-Janua. [56]Yuan Y, Zhang W, Zhang X, Zhai H. Dynamic service selection based on adaptiveglobal QoS constraints decomposition. Symmetry (Basel). 2019;11(3) . [57]Hosseinzadeh M, et al. A hybrid service selection and composition model for cloud-edge computing in the internet of things. IEEE Access 2020;8:85939 –49. [58]Gao H, Xu Y, Yin Y, Zhang W, Li R, Wang X. Context-aware QoS prediction withneural collaborativeﬁltering for internet-of-things services. IEEE Internet Things J.2020;7(5):4532–42.[59]Quan H, Takahashi R, Yoshiaki F. Dynamic service selection based on user feedbackin the IoT environment. In: CITS 2019 - proceeding of the 2019 internationalconference on computer. Information and Telecommunication Systems; 2019.
p. 1–5.[60]Jatoth C, Gangadharan GR, Buyya R. Optimal ﬁtness aware cloud service composition using an adaptive genotypes evolution based genetic algorithm. FutureGenerat Comput Syst 2019;94:185 –98. [61]Khan F, et al. A quality of service-aware secured communication scheme forinternet of things-based networks. Sensors 2019;19(19):1 –18. [62]Abu-safe AN, Elrofai SE. QOS –aware meta-heuristic services selection algorithm and Likert scale measurement for IOT environment. Int. J. Comput. Sci. TrendsTechnol. 2020;8(1):1–8. [63]Singh M, Baranwal G, Tripathi AK. QoS-aware selection of IoT-based service.Arabian J Sci Eng 2020;20(2) . [64] Al-Masri’s E. QWS-Datasets.University of Guelph&University of Washington Tacoma ; 2007 [Online]. Available:https://qwsdata.github.io/.A.N. Abosaif, H.S. Hamza Array 8 (2020) 100041
18