Algorithms for optimizingﬂeet staging of air ambulances
Joseph Tassonea,*, Geoffrey Pondb, Salimur Choudhurya
aLakehead University, 955 Oliver Road, Thunder Bay, ON, P7B 5E1, Canada
bRoyal Military College of Canada, 13 General Crerar Crescent, Kingston, ON, K7K 7B4, Canada
ARTICLE INFO
Keywords:Air transportationCUDAFleet optimizationInteger linear programmingLocal searchTabu searchABSTRACT
In a disaster situation, air ambulance rapid response will often be the determining factor in patient survival.Obstacles intensify this circumstance, with geographical remoteness and limitations in vehicle placement makingit an arduous task. Considering these elements, the arrangement of responders is a critical decision of the utmostimportance. Utilizing real mission data, this research structured an optimal coverage problem with integer linearprogramming. For an accurate comparison, the Gurobi optimizer was programmed with the developed model andtimed for performance. A solution implementing base ranking followed by both local and Tabu search-basedalgorithms was created. The local search algorithm proved insuf ﬁcient for maximizing coverage, while the Tabu search achieved near-optimal results. In the latter case, the total vehicle travel distance was minimized, andthe runtime signiﬁcantly outperformed the one generated by Gurobi. Furthermore, variations utilizing parallelCUDA processing further decreased the algorithmic runtime. These proved superior as the number of test missionsincreased, while also maintaining the same minimized distance.
1. IntroductionRapid disaster response can be the difference in determining a pa-tient’s survival. In urban environments, ambulance retrieval is a standardprocedure; however, the process becomes increasingly complicated withthe remoteness of an incident and the dispersing of a population. As such,the placement of responders for optimal area coverage is an importantand critical decision. Additionally, many air ambulance services containa comparatively smallﬂeet to handle vast areas [1]. Given such a small contingency, proper placement of these vehicles becomes even morecrucial.Multiple solutions have been proposed in previous works, with someimplementing near-optimal metaheuristics [ 2] or concentrating specif- ically on scheduling [3]. For this research, the problem was formulated tomaximize coverage, while minimizing the solution runtime. Real-missiondata aided in developing a more realistic scenario rather than relying onsynthetic generation. Each mission began at a potential base, performed apickup, dropped off a patient, and then returned to the same base. Theprimary purpose was determining which bases the vehicles should beplaced at to maximize the coverage. While exact methods are an optionwhen time is not a factor, in emergencies there are instances where ve-hicles must be repositioned quickly toﬁll demands. In this case, algo- rithmic metaheuristics are much more necessary. Furthermore, manypast works only considered sequential implementations, whereas theCompute Uniﬁed Device Architecture (CUDA) platform provided an op-portunity for further improvement through parallelization. This researchaimed to model the problem in terms of integer linear programming andthen use custom algorithms to achieve a near-optimal solution.Much of the current literature comments on the usage of exact tech-niques, which are less reliable when the scale increases and timing canmean the difference between life and death. These methodologies alsobecome problematic in a shifting environment where positions must beconstantly reconsidered [4].This work aims toﬁll in the gap with near-optimal, fast algorithmsthat can be efﬁciently utilized over exact methods. The paper takes ageneralized approach in modelling a system which can be furtherenhanced or customized to other environments. Additionally, there is notmentioned in the realm of parallelism, a technology that can dramaticallyimprove the runtime of the algorithms.The remainder of this paper is arranged as follows. Section 2describes the related work, emphasizing previous or similar techniques forresolving the topic. Section3presents the problem domain anddescription, along with the constraints. Section 4describes the base ranking, local search, and Tabu search-based solutions. Sections 5 and 6 explain the results and conclude the paper.
* Corresponding author.E-mail address:jtasson2@lakeheadu.com(J. Tassone).
Contents lists available atScienceDirect
Array
journal homepage:www.elsevier.com/journals/array/2590-0056/open-access-journal
https://doi.org/10.1016/j.array.2020.100031Received 9 January 2020; Received in revised form 5 May 2020; Accepted 12 May 2020Available online 6 June 20202590-0056/©2020 The Authors. Published by Elsevier Inc. This is an open access article under the CC BY license ( http://creativecommons.org/licenses/by/4.0/ ).Array 7 (2020) 1000312. Related workThe healthcare industry is only one candidate when considering theoptimization of air assets. The present work explores the minimization oftotal distance for placement; however, others have examined cost inconjunction with distance. Fernandez-Cuesta et al. [ 5] looked at this problem from the perspective of the oil industry and suggested twoheuristics for optimizing the position of aﬂeet of helicopters. Placement of vehicles is considered an NP-hard problem, making it unrealistic toachieve an optimal solution or use purely iterative techniques. Dong et al.[6] confronted this issue, taking a relaxed approach by solving for asubset of decision variables, and then locking the solved variables. Anelementary approach was then utilized for resolving the remaining var-iables, minimizing the operation costs while encouraging maximizedproﬁts onﬂeet composition and service levels.Regardingﬂeet management, an optimized solution must providecoverage with a minimized retrieval distance and potentially a minimalresource cost. Using approximate dynamic programming, Schmid [ 7] solved a dynamic ambulance reallocation problem. The approachresolved two of the previously mentioned criteria (coverage and cost) byrelocating among aﬁxed set of stations. This had the added bene ﬁto f reducing the cost of subsequent ambulance requests. Maleki et al. [ 8] attacked a similar relocation problem; however, additionally attemptedto minimize the total transit time by ambulances on succeeding calls. InRef. [9], the authors confronted the added constraint relating totime-windows. There was a similar objective of providing minimumcoverage at a reduced cost, yet the approach instead used a hybridmetaheuristic. Based on mixed-integer programming formulations, ahybrid evolutionary search algorithm (HESA) was developed. The algo-rithm shared similarities with genetic algorithms, while also using anembedded local search operator for improving offspring generated fromthe crossover operation.Empirical data allows a model to make use of past trends for presentsolutions. Utilizing information like travel time, dispatch delay, andpickup time; McCormack et al. [ 10] developed a simulation for land-based ambulances. For actual optimization, the simulation relied ona genetic algorithm forﬂeet assignment. Similarly, the work of Zhen et al.[11] took a simulation approach with the use of a genetic algorithm foroptimization. The work looked to maximize the expected survivalprobability across variable patient classes. In this approach, the authorsutilized the tactic for developing a model for actual deployment andredeployment. As with previously mentioned works, Pond et al. [ 2] implemented a genetic algorithm, although directed the solution spacetowards air ambulance vehicle placement. The paper asserted that pop-ulation density alone was not an accurate enough determinant forplacement of vehicles, and instead relied on a large volume of past datafor resolving. Other generalized solutions for these types of set-coveringproblems implemented fuzzy parameters, such as those in Ref. [ 12,13]. Local and Tabu search are well-documented methodologies forresolving optimization and set coverage problems. The literature on thesealgorithms is substantial and will only brie ﬂy be touched upon in this section. In local search, small localized changes are periodically madeuntil a solution is approximately optimal. Tabu search is an extension oflocal search-based algorithms. It allows for the exclusion of recentlyexplored areas within a search space and can allow moves that would notimprove the objective. A list of previous states is held within a Tabu list,which prevents a search from reaching a local optimum. It only recordsrecent moves and will not allow a solution that has been explored withina period. The list clears after a predetermined number of iterations,although the size of the list can vary depending on the problem [ 14]. In Ref. [15], Zimmermann exploited local search for resolving a mobilefacility location problem, whereby clients were assigned to existing fa-cilities so that the total movement and client travel costs were minimized.
The model reduced the problem into smaller solvable subproblems andthen implemented a modiﬁed local search for optimization. Gendreauet al. designed and modeled an ambulance location problem, resolving itwith Tabu search [16]. The objective was to maximize the coverage usingtwo ambulances, constrained by actual requirements imposed by EMSservice laws. Real and randomly generated data points were used,approaching near-optimal results in a reasonable computing timecompared to the CPLEX optimizer. Oberscheider and Hirsch investigatedefﬁcient transport for non-emergency patients utilizing real-patient datafrom the Red Cross of Lower Austria [ 17]. They generated all combina- tions of patient transports, then performed a set partitioning action uponthe previous generation to gain an initial solution. They then inputtedthese combinations into a Tabu Search and optimized the routing.Implementing parallelization to improve algorithms is not a newtrend and has generally been used to speed up calculations using thegraphics progressing unit (GPU) [18]. Reorganizing algorithms to take advantage of multiple simultaneous threads can dramatically enhanceperformance and see a huge improvement in the runtime of certaintechniques. Hussai et al. altered the particle swarm optimization algo-rithm with the CUDA platform [19]. Through partially coalescing memory accesses, they were able to achieve a massive time improvementwhen applied to benchmarks. Fabris and Krholing utilized similarbenchmarks to test the applications of the CUDA platform on aco-evolutionary differential evolution algorithm for solving minmaxoptimization problems [20]. Through this application, they found thatthe algorithm converged to a near-optimal ﬁtness and scaled far better than nonparallel variations. Following review, there is currently littlepublished research on applying GPU parallelization to ambulance prob-lems. Similarly, Schulz et al. discussed in their survey that there is acomparatively small amount of literature on applying GPU paralleliza-tion to local or Tabu search [21]. Much of the current research has beendirected towards swarm algorithms, though the survey suggests that it isstill useful for local search-based methods.As previously discussed in Ref. [2], multiple maximum coverage problems have relied on population density for the development of anoptimized solution space. This is not feasible when considering a sizeablenon-uniform density over a large region. Utilizing some traditionalmethodologies would mean that a signiﬁcant area is ignored, risking patient survival through invalid placement. The problem can be treatedas a coverage problem with the added addition of ensuring equalimportance among those in the north. It should be noted that research onthe effect of ambulance response time is still a wary topic [ 22–25]; however, from an economic standpoint, there is an interest in reducingtravel distance.Several recent algorithms have been suggested for implementation onrelated optimization problems, many of them based upon evolutionary orswarm-based techniques. While complex, these methodologies arepotentially unreliable due to unknown optimal parameters [ 26]. For instance, differential evolution (DE) could be considered as it can solve ina changing environment. However, it requires certain choices to be madetowards its parameters, which can signiﬁcantly impact the result [27]. Swarm intelligence methods like particle swarm optimization (PSO)suffer similar issues where the choice in parameters will signi ﬁcantly impact theﬁnal optimization [28]. Parameter tuning is possible in caseswhere a fast response may not be required; however, is signi ﬁcantly problematic in an emergency environment. There is the possibility of ashifting ecosystem forcing the algorithms to change settings; somethingwhich may not be reasonable in a disaster situation. In the case of acritical system such as this, the algorithm utilized should be computa-tionally efﬁcient, while also not depending on parameter tuning tofunction.Prior research has relied on evolutionary algorithms, speci ﬁcally a genetic algorithm for achieving optimization [ 2], yet was not utilized in this paper as further constraints were implemented and tested upon.There is a signiﬁcant lack of literature related to this problem, especiallyin recent years. This provides an opportunity to enhance with algorithmicapproaches over exact techniques still being researched [ 29–31]. The methodology of this research was compared against optimized results,achieving near-optimal itself. Similar works have been completedJ. Tassone et al. Array 7 (2020) 100031
2regarding real provided data [3]; although this was more directly relatedto scheduling, they did not list substantial constraints and made use of aset-partitioning integer program. Given the organization of the data andprior works, this research will explore both local and Tabu search-basedsolutions, while at the same time assessing the usefulness of parallelizingboth algorithms.3. ModelPlacement of ambulances for maximum coverage is a more nuancedproblem that cannot rely solely on demographic data alone. Patientstypically move to specialized facilities if the care required is moreparticular. Additionally, if a region’s population is sparse then populationdensity is a poor predictor for developing an optimized solution. As aresult, historical mission data can instead be utilized for consideringpossible future demands. For this paper, two years of Ornge collectedresearch data was employed, consisting of both hospital transfers andarea pickups by rotary-wing aircraft.A mission consists of a pickup, a delivery, and a return to base. Tosimplify the calculation, the distances between pickup and deliverypoints are ignored since excluding them does not affect the ﬁnal coverage determination. As this is not a scheduling problem, the formulationconsiders that each base can only hold a single aircraft. In general,dispersing the vehicles will be more bene ﬁcial the more spread out missions become over a large area. In essence, this process would becompleted before scheduling to determine the best placement of vehiclesfor servicing missions. Additionally, cost determination for travel isrelated primarily to scheduling and less to coverage. The objectivefunction can be modiﬁed for cost if the need requires it; however, dis-tance is more useful in determining the best regional coverage. Similarly,the vehicle speed is ignored for this problem as some areas are clusteredwith vehicle-speciﬁc missions (rotary-wing helicopters are required). Inthis case speed of the vehicle is irrelevant, as the missions cannot makeuse of the faster vehicle.The aircraftﬂeet is made up of following two sets:R: the set of all rotary-wing helicopters r
i2R8i¼1,…,8. F: the set of allﬁxed-wing planesf
j2F8j¼9,…,12. The potential bases consist of the following two sets:A: the set of all aerodromes capable of supporting both rotary-winghelicopters andﬁxed-wing planes, with each being a 3-tuple of forma
k¼<kϕ kψk>,a k2A8k¼1,…,274 k/C17aerodrome IDϕ
k/C17row coordinate of aerodromek
ψk/C17column coordinate of aerodromek. H: the set of all heliports, only supporting rotary-wing helicopters,with each being a 3-tuple of formh
n¼<nϕ nψn>,h n2H8n¼275,…,378 n/C17heliport IDϕ
n/C17row coordinate of heliportnlocation
ψn/C17column coordinate of heliportnlocation. The set set of all missions consists of:M: the set of all missions, with each being a 6-tuple of formm
z¼<zϕ pψpϕdψdρ>,m z2M8z z/C17mission IDϕ
p/C17row coordinate of patient pick-up location
ψp/C17column coordinate of patient pick-up locationϕ
d/C17row coordinate of patient delivery location
ψd/C17column coordinate of patient delivery location
ρ¼/C261 if mission requires rotary/C0wing helicopter0 otherwiseDecision variables consist of the following:v
im¼/C261 if roatary/C0wing helicopteriis assigned to missionm 0 otherwisewjm¼/C261 if fixed/C0wing planejis assigned to missionm 0 otherwisex
jk¼/C261 if fixed/C0wing planejis assigned to aerodromek 0 otherwisey
ik¼/C261 rotary/C0wing helicopteriis assigned to aerodromek 0 otherwisez
in¼/C261 if rotary/C0wing helicopteriis assigned to helipadn 0 otherwiseTo perform optimal vehicle placement, distances needed to becalculated.Drepresented the distance between a potential aerodromewith the sum of each mission’s patient pick-up and delivery location.Similarly,Edescribed a measurement applied instead to helipads. Fordetermining optimal distances, there are several distance formulas thatmay be substituted in the model. If the data was purely simulated thenEuclidean distance would have been a valid option, though this is notpractical when using real coordinate data based on latitude and longi-tude. The Earth is not a perfectlyﬂat space and the curvature must beconsidered to garner an accurate measurement. In this case, Haversinedistance is a far more reliable metric for the model and can be calculatedwith the following formula:D
ij¼2rsin/C01/C18ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃsin
2/C16φ/C0φp
2/C17þcosðφÞcos/C0φp/C1sin2/C16ψ/C0ψp
2/C17r/C19(1)In the above formulaϕrepresents row location values forϕ
korϕ n
(aerodromes and helipads) respectively. Similarly, the same can be saidfor
ψapplying to column location values ψkorψn. The remaining dis- tance matrices use the same formula; however, ϕ
pandψpcan be substituted forϕ
dandψd. The resulting matrices are both of dimension z (number of missions) bykorn(number of aerodromes or heliports) andreferenced for achieving total distances for each mission. The optimiza-tion model takes the following form:minimizeX
mUnsupported X
iUnsupportedv im X
kUnsupportedD mk
þX
nUnsupportedE mn!þX
jUnsupportedw jm
 X
kUnsupportedD mk!!(2)
subject toX
iUnsupportedv imþX
jUnsupportedw jm¼1;8m(3)X
kUnsupportedy ikþX
nUnsupportedz in¼1;8i(4)X
kUnsupportedx jk¼1;8j (5)X
iUnsupportedz in/C201;8n (6)X
jUnsupportedx jkþX
iUnsupportedy ik/C201;8k(7)X
mUnsupportedv im/C20X
nUnsupportedz inþX
kUnsupportedy ik;8i(8)J. Tassone et al. Array 7 (2020) 100031
3X
mUnsupportedw jm/C20X
kUnsupportedx jk;8j(9)w
jm/C201/C0 ρm;8j (10)v
im;wjm;xjk;yik;zin2f1;0g;8i;j;k;m;n(11) The objective function is described by Equation (2), where the total distanceﬂown by each aircraft assigned to a mission is minimized. Thebinary decision variables applied are used with references to matrices D andErespectively.These are used to sum the total distances for each assigned base. Theequation is separated into three parts, with each separation indicating thepossible assignments that can occur:/C15Rotary-wing helicopter located at aerodrome assigned to a mission./C15Fixed-wing plane located at aerodrome assigned to a mission./C15Rotary-wing helicopter located at helipad assigned to a mission.Furthermore, the objective function is constrained based on the rulesset by Equations(3)–(11). Each mission can only support a single aircraft,constrained by Equation(3). Equations(4) and (5) limit each aircraft to a single base, while equations(6) and (7) ensure that for every helipad or aerodrome there is at most one vehicle. Enforced by prior constraints,Equation(8)guarantees that each rotary-wing assigned mission has anoccupied base if the variable is set. In this particular case, both decisionvariables for a base assignment will not be set as a result of previousconstraints. Similarly, Equation(8)does the same type of operation, except towardsﬁxed-wing aircraft and aerodromes. As some missions arerotary-wing only, Equation(10)prevents aﬁxed-wing aircraft from being assigned to these missions. Lastly, Equation (11)ﬁxes the decision vari- ables to a binary format.4. AlgorithmSolutions were designed with the previously discussed model whileconsidering the prior constraints and minimization requirements. Thedescription of this solution is described in Algorithm 1, Algorithm 2, andAlgorithm 3. All versions had a sequential and parallel CUDA imple-mentation, with minor changes in design. The primary differencesrelated to the lack of outer loops in the CUDA versions, as these indiceswere acted upon simultaneously by individual threads. Additional dif-ferences are given following the description of each algorithm. Given thatthe differences between the parallel and sequential algorithms are onlyminor, the actual outlining of them are expressed using the sequentialversions.4.1. Base rankingAlgorithm 1 reduced the problem scope by ranking the most effectivebases for covering every mission. The idea was to allow for a morereasonable starting position over the local search, acting on a randomlyassigned set. Speciﬁcally, the algorithm looked at which bases had thelowest total Haversine distance and assigned a vehicle to each top-rankedbase. The number of vehicles was predetermined based on the ﬂeet occupied by Ornge and represented in lines 1 and 2. The input for thesolution utilized coordinate data (longitude and latitude) for base loca-tions, mission pickup, and mission destination. In lines 3 –5, this infor- mation was respectively assigned to the
Destination,Pickup, andBase matrices. In this case, the organization of the matrix indices corre-sponded to each mission (the exception being Unused). As an example: theﬁrst index ofDestination,Pickup, andBasewould be one complete mission from start to end.Lines 8–12 of the algorithm summed the Haversine distance for eachbase relative to both its destination and mission pickup. Following this,lines 13–18 determined the top bases for each mission based on theminimum summed Haversine calculation. For this particular set, 12 baseswere chosen as this corresponded to the number of vehicles available forassignment. Per the model’s decision variables and Equations(3)–(10), a ﬁxed-wing vehicle could not be assigned to a helipad. As such, lines14–16 prevented the number of helipads chosen to exceed the number ofrotary-wing vehicles. The ranking for each mission was then taken at line19, where each distance was assessed based on the based on chosen basesinTop_Valsrelative toDistance. Each vehicle was then assigned to arespective aerodrome or helipad at lines 20 –21. Helipads were allocated ﬁrst to ensure thatﬁxed-wing aircraft had an available aerodromeavailable. From lines 22–29 the actual mission to base assignment tookplace. A constraint handled by the algorithm was that each base selectedhad to be able to accommodate a speciﬁc assigned vehicle. In this case 8 helicopters and 4 planes; meaning that the top bases were occasionallythe second-best option instead of theﬁrst choice. Additionally, some missions speciﬁcally required the use of a rotary-wing aircraft, furtherconstraining the rankings (lines 23–25). Line 24 and 27ﬁnalized the algorithm, assigning the bases to each mission (placing them at thecorresponding index inBase). This solution did not guarantee the bestpossible placement, only that the local search had a strong starting point.Swaps among unused bases still needed to be considered, as alternativesmay have yielded better results. As such, line 30 assigned any unusedbases toUnused.The Base Ranking algorithm operates quite ef ﬁciently, although can be easily made parallel by the elimination of the outer loop at line 8.CUDA operates through simultaneous thread organization, so by sepa-ratingiinto individual threads, each can perform the inner loop jat the same time. As there are no race conditions for writing to Distances, each can write to a rowiwithout issue. Another modiﬁcation can be made at line 17, as it requires the summing of every rowiin theDistancematrix to determine the total distance of each base to every mission. This wouldagain apply a thread to each row ito determine the respective sums. These modiﬁcations remove the bottleneck associated with scaling for anincrease in missions. The remainder of the algorithm did not requireparallelism, as there were only small quick accesses using single loops.
Algorithm 1:Base RankingData: Base, mission pickup, and mission destination dataResult: Assignment of vehicles to top aerodromes1heli-number←number of helicopters;2Plane-number←number of airplanes;3Destination←coordinates of destinations for respective missions;4Pickup←coordinates of each mission;5Base←coordinates of aerodromes;6Distances←empty list sized to length of Pickupby length ofBase; 7Top-Vals4←empty list sized toheli-numberþplane-number; 8fori 4r- 1 to number of basesdo 9forj4←1 to number of missionsdo 10 Add toDistancessummed Haversine distance of Base i to each respectivemissionPickupandDestination j; 11End12End13whileTop-Vals isnotfulldo 14ifNumber of helipads chosen¼heli-numberthen 15 Choose an aerodrome instead to provide enough locations for plane-number; 16End17 PopulateTop-Valswith indices of top aerodromes (minimum summed Haversinedistance to each mission);18End19 Rank chosenTop-Valsbases inDistancesfor each mission; 20 Assign rotary-wing vehicles to helipads;21 Assign remaining rotary-wing and ﬁxed-wing vehicles to aerodromes; 22whileall missions are not assigned a base
do 23ifmission requires aﬁxed-wing vehiclethen 24 Assign best available and compatible rotary-wing occupied base to themission;25End26Else27 Assign best available and compatible rotary-wing or ﬁxed-wing occupied base to the mission;28End20End30 Unused¼remaining unassigned aerodromes and helipads:J. Tassone et al. Array 7 (2020) 100031
44.2. Local searchﬂeet optimizationAlgorithm 2 accepted the ranked data and unused bases assigned inAlgorithm 1. As there would be no variation on successive runs (and theguarantee of optimal placement), two permutation matrices weregenerated corresponding to each mission index (lines 5 and 6). Essen-tially, this meant that swaps or take-overs would occur at different pointseach time, offering a distinction between results and allowing theexploration of varying neighbourhoods. Per line 9, the goal of the algo-rithm was to minimize the total Haversine distance across all missions.The entire set would iterate multiple times completely, stopping onlyafter no further improvement could be found.The algorithm ran through every mission at least once (line 11), whileensuring that each had a chance to swap with every corresponding option(line 12). Two sets of changes were possible, depending on whether agiven unused base contained a vehicle. The choices from lines 13 –22 were for the corresponding mission vehicle to be taken over by anothervehicle assigned base or moved to a new compatible base (an empty baseinUnused). This depended again on whether the base in Unusedwas occupied or not. In the case of the latter, all subsequent missions utilizingsaid vehicle needed to be updated. These changes only held if theylowered the total Haversine distance and then the previously used (oroccupied) base was transferred into Unused. Once all missions were explored, the iterators were reset, and the algorithm repeated if there wasfurther improvement found during the run.The remaining changes occurred between lines 23 –27 where the vehicle atPermutation
bindexiwas compatible with the mission atPermutationbindexj. The vehicles located at the respective indexed basesthat would be assigned had to be of a compatible type (example: rotary-wing only as per Equation(10)) and were updated if they minimized thetotal Haversine distance. Additionally, if the replaced base was no longerassigned to any other mission, it was moved to Unused. The parallelization of this algorithm was a bit more complex than theBase Ranking, as there were simultaneous accesses and dependencies.The outer loop at line 11 was eliminated and each index iof thePer- mutation
amatrix was assigned a thread. This would allow the CUDAplatform to do simultaneous checks for each inner loop jat once. In order to prevent race conditions a lock was placed between lines 13 and 14,lines 18 and 19, and lines 23 and 24. Once the checks were completed, athread was allowed to perform the adjustment. Additional threads wouldonly act once the thread released the lock. This added a level ofsequential access to the algorithm, although checks were performed inparallel and the lock would only activate upon a change occurring. Sinceupdates did not occur as often as checks, much of the bottleneck of thealgorithm was eliminated.A visualization of this algorithm can be seen in Fig. 1. Assigned ve- hicles were applied to each mission (summed to pickup and destination),meeting Equations(3)–(10). So long as the change was viable, anotherassigned base could attempt to take over the assignment of another. Thenew base would gain the mission, and the old base would be moved toUnusedif it had no more assignments remaining. A similar change tookplace based on whether an unused base contained a vehicle. If it did thena similar takeover occurred with the now assigned based moving fromUnused. However, if the base did not contain a vehicle, then a swapoccurred with the vehicle moving to the new location and the priorassigned base moving toUnused. Changes only held if they reduced thetotal Haversine distance applied across all missions.
Algorithm 2: Local-Search Fleet OptimizationData: Ranked and Unused Mission Data Front Algorithm 1Result: Assignment of aircraft to missions and bases1Destination←coordinates of destinations for respective missions;2Pickup←coordinates of each mission;3Base←coordinates of vehicle assigned to mission;4Unused←coordinates of empty bases and unused vehicles;5Permutation
a←random permutation of indices equal to the number of missions;6Permutation
b←random permutation of indices equal to the number of missions;7i←ﬁrst index of Permutation
avector; 8j←ﬁrst index of Permutation
bvector; 0k←Total Haversine Distance;10whileimprovementdo11whileinot equal to the last index value in Permutation
avectordo 12whilejnot equal to the last index value in Permutation
bvectordo 13ifunused vehicleiis compatible with missionjthen 14 Replace vehicle jwith unused vehiclei; 15l←Total Haversine Distance;16 Update ifkis greater thanland move vehiclejto Unused if not allocated to a mission17End18ifunused baseican host vehiclejand is compatible with mission jthen 10 Move vehicle jto unused basei; 20l←Total Haversine Distance;21 Update ifkis greater thanland move new empty based jto Unused: 22End23ifvehicleiis compatible with missionjthen 24 Replace vehicle jwith vehiclei; 25l←Total Haversine Distance;26 Update ifkis greater thanland move vehiclejto Unused if not allocated to a mission:27End28j¼next index ofPermutation
bvector; 20end30i¼next index ofPermutation
avector; 31End32Permutation
a—new random permutation of indices equal to the number ofmissions;33Permutation
b—new random permutation of indices equal to the number ofmissions;34End
Fig. 1.Visualization of local search.J. Tassone et al. Array 7 (2020) 100031
54.3. Tabu Searchﬂeet optimizationThe Tabu search algorithm is an extension of Algorithm 2. For themost part, the operations have remained the same and even the paral-lelization operates in the same fashion. It still uses Algorithm 1 as astarting point. The primary contribution of this the introduction of theTabuListat line 7. A Tabu search prevents recently explored neighbour-hoods that improved the results from being explored again. The purposeof this is to give other possible changes a fair chance and prevent thealgorithm from becoming stuck in a local optimum. Prior to each itera-tionj, a check is performed from lines 15–23. If the neighbourhood to be explored exists in theTabuList, then it is skipped depending on whetherthe selection is based on indexiorj(lines 17–22). Selections are only added to the list if the improve the result as suggested by lines 28, 34, and40. Each neighbourhood in the list has a counter, expressed by Tabu- Counterand decremented at either line 16 or 42. After so many iterations,the selection is removed from theTabuListand is allowed to be explored again.It should be noted that a traditional Tabu search can potentially allowmoves that will not improve the results. This was not done in the case ofthis algorithm, as it almost always resulted in a signi ﬁcantly poorer answer. One way to combat this problem was the introduction of morevariability through the vectorsPermutation
aandPermutation b. Originally both Algorithm 2 and Algorithm 3 did not utilize these which signi ﬁ- cantly impacted the performance. The two loops traversed sequentiallythrough indices relative to the normal order the Pickupmatrix. As already suggested, this caused the results to be the exact same each time as Al-gorithm 1 would never have a different result. Additionally, using onepermutation vector did improve the result, though the introduction oftwo allowed for signiﬁcant variability and the exploration of previouslyunexplored neighbourhoods by older versions.In terms of parallel implementation, the algorithm performs almostidentically to Algorithm 2. That being said, while the parallel local searchresults in the same answer as the sequential variation, the parallel Tabusearch will not. The reasoning for this is due to the nature of the Tabusearch itself. In this algorithm neighbourhoods will only be explored ifthey are not in the list, otherwise, they are skipped. Since multipleneighbourhoods are being explored simultaneously, the result of eachcan potentially be added to the list and the respective counters arereduced at different intervals. The forces it to explore differently that thenon-parallel Tabu search, giving a comparable, yet different result.Algorithm 3:Tabu Search Fleet OptimizationData: Ranked and Unused Mission Data Front Algorithm 1Result: Assignment of aircraft to missions and bases1Destination←coordinates of destinations for respective missions:2Pickup←coordinates of cach mission:3Base←coordinates of vehicle assigned to mission;4Unused←coordinates of empty bases and unused vehicles;5Permutation
a←random permutation of indices equal to the number of missions:6Permutation
b←random permutation of indices equal to the number of missions:7Tab List←list of recently explored neighbourhoods:8Tab Counter←how long a neighbourhood can be held within a list;9i←ﬁrst index of Permutation a vector:10j←ﬁrst index of Permutation b vector:11k←Total Haversine Distance:12whileimprovementdo13whileinot equal to the last index value in Permutation
avectordo 14whilejnot equal to the last index value tri Permutation b vector do 15ifSelectioniorjfor Un use. d or Vehicle arc in the TabuListthen 16 Reduce theTabuCounterfor each within theTabuList: 17ifSelection is of an indexithen 18 Continue to next i index of Permutation
avector: 19end20else21 Continue to next j index of Permutationa vector: (continued on next page)
Fig. 2.Base Ranking versus random average starting over an optimal ground truth.J. Tassone et al. Array 7 (2020) 100031
6(continued)
22end23End24ifunused vehicleiis compatible with missionjthen 25 Replace vehicle jwith unused vehiclei; 26l←Total Haversine Distance;27 Update ifkis greater thaniand move vehiclejto Unused if not allocated to a mission:28 Add selection to the TabuListand initiateTabuCounterfor the selection: 29end30ifunused base i can host vehicle j and is compatible with mission j then 31 Move vehicle jto unused basei; 32l←Total Haversine Distance;33 Update ifkis greater thanland move new empty based jto Unused; 34 Add selection to the TabuList and initiate TabuCounter for theselection:35end36ifvehicleiis compatible with missionjthen 37 Replace vehicle jwith vehiclei; 38l←Total Haversine Distance:39 Update ifkis greater thanland move vehiclejto Unused if not allocated to a mission:40 Add selection to the TabuListand initiateTabuCounterfor the selection: 41end (continued on next column)(continued)
42 Reduce theTabuCounterfor each within theTabuList; 43j¼next index of Permutationb vector:44End45 i¼next index of Permutation
avector; 46End47 Permutation
a←new random permutation of indices equal to the number ofmissions:47 Permutation
b←new random permutation of indices equal to the number ofmissions:48End
5. ResultsEleven datasets were analyzed for testing the previously describedalgorithms. All ran for 10 separate attempts; the results of which aresummarized inFigs. 2–5,Table 1, andTable 2. The datasets were generated as a randomized subset of missions chosen among 13,824previously recorded in the real-mission dataset. 12 vehicles (8 rotary-wing and 4ﬁxed-wing) and 378 bases (274 aerodromes and 104
Fig. 3.Comparison of sequential and CUDA times for base ranking.
Fig. 4.Comparison of algorithms against the optimized solution.
Fig. 5.Comparison of algorithmic runtimes (logarithmic scaling).J. Tassone et al. Array 7 (2020) 100031
7helipads) were used for an individual assignment. Datasets initially ranthrough an instance of base ranking to generate a strong starting point,and then adjustments were made with the local search algorithm. Thelatter was performed until no further improvement could be found, atwhich point the results were recorded. As previously mentioned, thisoccurred ten times for each set with the average and limits being docu-mented upon completion. Two separate instances were executed foreach: one being sequential and the other being a parallel CUDA imple-mentation. For validation, the Gurobi optimizer was employed to mea-sure the algorithmic against the optimized solution.The purpose of the base ranking algorithm was to allow an improvedstarting position over a randomized permuted assignment. The results ofthis algorithm are displayed inFigs. 2and3. As there was no randomi- zation in the operation, the runtimes and values were the same for everyspeciﬁc sequence.Fig. 2compared this result against the average randomstarting position generated by 100 sets. In all cases, the base rankingalgorithm outperformed a random generation of bases applied to mis-sions. While base ranking in conjunction with Tabu search allowed for anear-optimal result, it could not be used on its own for assignment.Despite being an improvement over randomization, Fig. 2showed that base ranking was still substantially above the optimal ground truth.While the values were fairly uniform with an increase in mission size,they were not accepted without additional algorithms. The speed of thebase ranking should be noted, as it was far faster than the local or Tabusearch. Furthermore,Fig. 3shows that the speed was nearly constant forthe CUDA variation of the algorithm, while it increased linearly for thesequential version with the addition of missions. This result implies thatfor this scale the primary slow down point for the CUDA variation is thekernel call to the GPU itself.Given the consistency over randomization and the speed beingnegligible using CUDA meant it was worth performing upon theincreasing sets.On its own, the local search algorithm proved unsuccessful inachieving a close to the optimal solution. Fig. 4displays that even in the best scenarios, the increase was still just under 30% and went as high asover 60% for the average. The bounds were also not acceptable, with setslike 120 showing a very wide gap. These conclusions imply that it isgetting stuck in a local optimum and the nature of the algorithm is pre-venting it from continuing. The Tabu search modi ﬁcation greatly improved the results and allowed it to achieve much closer to the Gurobisolutions. PerFig. 4, all were consistently under 20% and containedmuch smaller bounding gaps. This suggests that each solution wasachieving a similar one to each other on successive tests. Likewise, theparallel Tabu search was able to garner a similar result and even out-performed the sequential variation in some instances. There is no guar-antee that the parallel version will always achieve a better metric to thesequential version, as they essentially use the same process with a dif-ference mainly in runtime. However, they should always achieve asimilar answer which is proven byTable 1. It not only shows similar averages (A), but also comparable upper (U) and lower (L) bounds. Itshould be noted that there is still the possibility of outliers occurring,meaning that for real-use the algorithm should be performed multipletimes.For the local search variation, the CUDA and sequential algorithmswill always result in the same answer so long as matching permutationsTable 1Summary of total haversine distance results.
Number ofMissionsOptimalDistanceLocal Search Tabu Search Parallel Tabu Search80 19,665.9 U: 28,257.612L:27,087.806A:27,672.709U:22,879.656L:22,687.638A:22,783.647U: 22,630.631L: 20,512.258A: 21,571.445
90 21,535.7 U: 36,028.446L:33,461.815A:34,745.130U:25,572.773L:24,853.126A:25,212.949U: 26,203.804L: 24,360.679A: 25,372.478
100 23,578.5 U: 35,428.436L:32,116.723A:33,772.579U:27,382.108L:26,346.672A:26,864.390U: 27,420.052L: 26,073.513A: 26,846.783
110 28,774.4 U: 38,819.082L:34,829.650A:36,824.366U:33,909.447L:31,054.683A:32,482.065U: 32,061.554L: 29,930.193A: 31,595.873
120 27,338.4 U: 44,920.914L:33,098.822A:38,509.868U:32,948.576L:32,092.066A:32,520.321U: 33,171.001L: 29,843.666A: 31,707.334
130 30,931.7 U: 39,554.642L:37,001.330A:38,277.991U:34,774.973L:33,617.954A:34,196.463U: 36,019.660L: 34,483.924A: 35,251.797
140 37,530.2 U: 57,863.797L:51,014.197A:54,438.997U:45,159.912L:43,750.540A:44,455.226U: 45,625.989L: 43,599.954A: 44,212.971
150 36,359.9 U: 47,536.625L:44,338.199A:45,937.412U:42,406.212L:39,771.094A:41,088.653U: 40,321.420L: 37,970.291A: 38,972.549
160 40,578.4 U: 54,753.877L:48,131.950A:51,442.913U:48,351.222L:45,793.889A:47,072.556U: 46,986.095L: 44,223.194A: 45,248.996
170 41,700.4 U: 54,078.253L:50,506.153A:52,592.203U:45,778.813L:44,871.607A:45,133.210U: 46,886.254L: 44,412.027A: 45,549.141
180 49,758.6 U: 70,492.104L:62,744.421A:66,618.263U:56,146.200L:55,119.247A:55,632.724U: 56,508.848L: 54,055.691A: 55,782.260Table 2Summary of runtime results (seconds).
Missions Gurobi(s)LocalSearch(s)ParallelLocalSearch (s)TabuSearch(s)ParallelTabuSearch (s)80 804.503 14.203 8.478 20.915 18.62090 798.339 17.804 11.863 28.426 20.484100 608.483 19.411 11.925 29.272 21.641110 920.3110 22.879 14.424 30.491 24.502120 1260.200 29.026 15.572 42.328 27.415130 1583.530 32.071 16.909 47.558 28.503140 922.661 35.524 17.800 52.625 29.169150 1394.010 45.977 22.426 67.249 34.803160 3454.810 49.351 23.705 72.937 36.289170 1025.990 66.105 24.243 77.386 38.909180 1543.920 75.794 28.569 79.921 41.246J. Tassone et al. Array 7 (2020) 100031
8are used. As such, the only metric available for differentiating was time,which is summarized inTable 2. The CUDA running time was a signiﬁ- cant improvement over the sequential algorithms, only increasing by asmall amount given the number of missions. In Fig. 5it can be seen that the trend line is muchﬂatter than the sequential at a higher number ofmissions. This similarity is seen in the parallel Tabu search as well.Admittedly, it does display a comparable timing to the sequential vari-ation at a lower mission count, though this changes with greater mis-sions. It even manages to surpass the sequential local search after 110missions. In all cases, the time for the sequential versions increased fasterthan the CUDA variations given an increase in the number. As previouslyspeculated, this trend will continue to grow as the number of missionsincreases, giving validation to the CUDA implementation. Regardless, thetiming in conjunction with near-optimal results justi ﬁes the use of par- allelization for this purpose.6. ConclusionIn a city-wide EMS system, ambulance placement is simplistic, how-ever; in an air ambulance service, there are often far more bases thanvehicles. Additionally, the coverage regions can be massive with most ofthese bases being heavily dispersed. Facility coordinate data suggeststhat demographic information is not reliable enough for the positioningof vehicles. Achieving an exact solution, while not completely unrealistic,can be time-consuming in the case of a disaster. Therefore, alternativealgorithms were necessary for determining the placement of air ambu-lances for optimal coverage.The results generated demonstrates the usefulness of the ranking andalgorithmic solutions in both sequential and parallel forms. For theempirical data collected by Ornge, Gurobi achieved an optimized solu-tion in a signiﬁcantly increased time. Though this time may be acceptablein cases where missions are known, it may not be viable in an emergencywhere reorganization is required.As such, a solution that delivers near optimization becomes all themore critical. All of the datasets reached a timeframe far exceedingtraditional methodologies, while still being within an admissible targetrange. All algorithms approached an acceptable limit relative to theoptimal, which was further enhanced, utilizing parallelization throughthe CUDA platform. On its own, the local search proved insuf ﬁcient, although modifying the algorithm into a Tabu search greatly enhancedthe result. It should be noted that this model is adaptable to possiblefuture changes in the data and could be updated quickly. This furtherdenotes the advantage of these techniques over other similar solutions.Evolutionary techniques have already been tested upon in pastresearch [2] and while swarm intelligence has its issues, it may be usefulto test upon in future works. Similar research has proved promising,though these were in less critical systems and parameter tuning is still beconsidered an issue [32,33]. Additionally, the current iteration usesgeneralized constraints and it may be useful to further represent thiscloser to real systems [3]. This may pose a problem as most ambulanceorganizations keep their models conﬁdential, though for expansion this is the next logical step. Lastly, there is signiﬁcant research in static varia- tions of these problems. While this research is quite signi ﬁcant, most active systems must consider dynamic changes in the actual imple-mentation. This opens the possibility for further research into dynamicscheduling and possibly even location shifting for vehicles. Someresearch has suggested further building off the advantage of the paral-lelism seen in evolutionary algorithms, as these types of techniquesfunction better in a dynamic shifting environment [ 34]. These methods can be modiﬁed to become self-adaptive, whereby a set of con ﬁgurations with solution parameters are encoded into the individual solutions of thedynamic problem.Declaration of competing interestsThe authors declare that they have no known competing ﬁnancialinterests or personal relationships that could have appeared to in ﬂuence the work reported in this paper.
CRediT authorship contribution statementJoseph Tassone:Conceptualization, Software, Methodology, Writing- original draft.Geoffrey Pond:Conceptualization, Supervision, Re-sources.Salimur Choudhury:Validation, Writing - review&editing, Funding acquisition, Supervision.References
[1] Ornge [Online,https://www.ornge.ca/home. [Accessed 10 November 2019]. [2] Pond GT, McQuat G. Optimizing ﬂeet staging of air ambulances in the province of ontario, international conference on theory and practice of natural computing.2018. p. 215–24.https://doi.org/10.1007/978-3-030-04070-3_17 . [3]Carnes TA, Henderson SG, Shmoys DB, Ahghari M, MacDonald RD. Mathematicalprogramming guides air-ambulance routing at ornge. Interfaces 2013;43(3):232 –9. [4] Recent optimization models and trends in location, relocation, and dispatching ofemergency medical vehicles. Eur J Oper Res 2019;272(1):1 –23. https://doi.org/ 10.1016/j.ejor.2018.02.055. URL, http://www.sciencedirect.com/science/article/ pii/S0377221718302054. [5] Fern/C19andez-Cuesta E, Norddal IK, Andersson H, Fagerholt K. Base location andhelicopterﬂeet composition in the oil industry. INFOR Inf Syst Oper Res 2017;55(2):71–92.https://doi.org/10.1080/03155986.2016.1262583 . arXiv:https:// doi.org/10.1080/03155986.2016.1262583.[6]Dong Z, Chuhang Y, Lau HH. An integrated ﬂight scheduling andﬂeet assignment method based on a discrete choice model. Comput Ind Eng 2016;98:195 –210. https://doi.org/10. 1016/j.cie.2016.05.040 . [7] Schmid V. Solving the dynamic ambulance relocation and dispatching problemusing approximate dynamic programming. Eur J Oper Res 2012;219(3):611 –21. https://doi.org/10.1016/j.ejor.2011.10.043 . feature Clusters. [8] Maleki M, Majlesinasab N, Sepehri MM. Two new models for redeployment ofambulances. Comput Ind Eng 2014;78:271 –84.https://doi.org/10.1016/ j.cie.2014.05.019.[9] Koç Ça/C21gri, BektașT, Jabali O, Laporte G. Theﬂeet size and mix location-routing problem with time windows: formulations and a heuristic algorithm. Eur J Oper Res2016;248(1):33–51.https://doi.org/10.1016/j.ejor.2015.06.082 . [10] R. McCormack, G. Coates, A simulation model to enable the optimization ofambulanceﬂeet allocation and base station location for increased patient survival,Eur J Oper Res 247. doi:10.1016/j.ejor.2015.05.040.[11] Zhen L, Wang K, Hu H, Chang D. A simulation optimization framework forambulance deployment and relocation problems. Comput Ind Eng 2014;72:12 –23. https://doi.org/10.1016/j. cie.2014.03.008 . [12]Hwang M, Chiang C, Liu Y. Solving a fuzzy set-covering problem. Math ComputModel 2004;40(7):861–5. https://doi.org/10.1016/j.mcm.2004.10.015 . [13] Zimmermann K. Fuzzy set covering problem. Int J Gen Syst 1991;20(1):127 –31. https://doi.org/10.1080/03081079108945020 . arXiv: 10.1080/ 03081079108945020.[14] Edelkamp S, Schr€odl S. Chapter 14 - selective search. In: Edelkamp S, Schr €
odl S, editors. Heuristic search. San Francisco: Morgan Kaufmann; 2012. p. 633 –69. https://doi.org/10.1016/B978-0-12-372512-7.00014-6 . [15] Halper R, Raghavan S, Sahin M. Local search heuristics for the mobile facilitylocation problem. Comput Oper Res 2015;62:210 –23.https://doi.org/10.1016/ j.cor.2014.09.004.[16]Gendreau M, Laporte G, Semet F. Solving an ambulance location model by tabusearch. Locat Sci 1997;5(2):75–88. https://doi. org/10.1016/S0966-8349(97) 00015-6.[17] M. Oberscheider, P. Hirsch, Analysis of the impact of different service levels on theworkload of an ambulance service provider, BMC Health Serv Res 16:487. doi:10.1186/s12913-016-1727-5.[18] Lee D, Dinov I, Dong B, Gutman B, Yanovsky I, Toga AW. Cuda optimizationstrategies for compute- and memory-bound neuroimaging algorithms. ComputMethods Progr Biomed 2012;106(3):175 –87.https://doi.org/10.1016/ j.cmpb.2010.10.013.[19] Hussain MM, Hattori H, Fujimoto N. A cuda implementation of the standard particleswarm optimization. In: 2016 18th international symposium on symbolic andnumeric algorithms for scientiﬁc computing. SYNASC); 2016. p. 219 –26.https:// doi.org/10.1109/SYNASC.2016.043 . [20] Fabris F, Krohling RA. A co-evolutionary differential evolution algorithm for solvingmin–max optimization problems implemented on gpu using ccuda. Expert Syst Appl2012;39(12):10324–33.https://doi.org/10.1016/j.eswa.2011.10.015 . [21] Schulz C, Hasle G, Brodtkorb AR, Hagen TR. Gpu computing in discreteoptimization. part ii: survey focused on routing problems. EURO Journal onTransportation and Logistics 2013;2(1):159 –86.https://doi.org/10.1007/s13676- 013-0026-0. 10. 1007/s13676-013-0026-0. URL.[22] H Blackwell T, Kline J, Jeffrey Willis J, Monroe Hicks G. Lack of associationbetween prehospital response times and patient outcomes, Prehospital emergencycare. ofﬁcial journal of the National Association of EMS Physicians and the NationalAssociation of State EMS Directors 2009;13:444 –50.https://doi.org/10.1080/ 10903120902935363.J. Tassone et al. Array 7 (2020) 100031
9[23] Cannon E, Shaw J, Fothergill R, Lindridge J. Ambulance response times andmortality in elderly fallers. Emerg Med J 2016;33. https://doi.org/10.1136/ emermed-2016-206139.29. e9.1–e9. [24] A. Bürger, J. Wnent, A. Bohn, T. Jantzen, S. Brenner, R. Lefering, S. Seewald, J.-T.Gr€asner, M. Fischer, The effect of ambulance response time on survival followingout-of-hospital cardiac arrest, Deutsches Aerzteblatt Online 115. doi:10.3238/arztebl.2018.0541.[25] Perez M. Response time to the emergency department (ed) and its effect on patientﬂow and hospital outcomes. Chest 2015;148:481A. https://doi.org/10.1378/ chest.2215810. 4, Supplement.[26]Ab Wahab MN, Nefti-Meziani S, Atyabi A. A comprehensive review of swarmoptimization algorithms. PloS One 2015;10(5):e0122827 . [27]Das S, Suganthan P. Differential evolution: a survey of the state-of-the art. IEEETrans Evol Comput 2011;15:4–31. [28] Mavrovouniotis M, Li C, Yang S. A survey of swarm intelligence for dynamicoptimization: algorithms and applications. Swarm and Evolutionary Computation2017;33:1–17.https://doi.org/10.1016/j.swevo.2016.12.005 . URL,http:// www.sciencedirect.com/science/article/pii/S2210650216302541 . [29] Almehdawe E, Jewkes B, He Q-M. Analysis and optimization of an ambulanceofﬂoad delay and allocation problem. Omega 2016;65:148 –58.https://doi.org/ 10.1016/j.omega.2016.01.006 . URL,http://www.sciencedirect.com/science/artic le/pii/S0305048316000074.[30] V. B/C19elanger, E. Lanzarone, V. Nicoletta, A. Ruiz, P. Soriano, A recursive simulation-optimization framework for the ambulance location and dispatching problem, Eur JOper Res:https://doi.org/10.1016/j.ejor.2020.03.041 . URLhttp://www.sciencedi rect.com/science/article/pii/S0377221720302551 . [31] Abdullah L, Adawiyah C, Kamal C. A decision making method based on intervaltype-2 fuzzy sets: an approach for ambulance location preference. AppliedComputing and Informatics 2018;14(1):65 –72.https://doi.org/10.1016/ j.aci.2017.04.003. URL,http://www.sciencedirect.com/science/article/pii/S2210832717300923.[32]Khorjuvenkar PR, Singh A. A hybrid swarm intelligence approach for anti-coveringlocation problem. Innovations in power and advanced computing technologies (i-PACT), vol. 1; 2019. p. 1–6. 2019. [33] Lien L-C, Cheng M-Y. A hybrid swarm intelligence based particle-bee algorithm forconstruction site layout optimization. Expert Syst Appl 2012;39(10):9642 –50. https://doi.org/10.1016/j.eswa.2012.02.134 . URL,http://www.sciencedirect.co m/science/article/pii/S0957417412003971 . [34] Sabar NR, Bhaskar A, Chung E, Turky A, Song A. A self-adaptive evolutionaryalgorithm for dynamic vehicle routing problems with traf ﬁc congestion. Swarm and Evolutionary Computation 2019;44:1018 –27.https://doi.org/10.1016/ j.swevo.2018.10.015. URL,http://www.sciencedirect.com/science/article/pii/S2210650218303407.J. Tassone et al. Array 7 (2020) 100031
10