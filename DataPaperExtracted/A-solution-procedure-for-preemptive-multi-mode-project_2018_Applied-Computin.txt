ORIGINAL ARTICLE
A solution procedure for preemptive multi-modeproject scheduling problem with mode changeabilityto resumption
Behrouz Afshar-Nadjaﬁ*
Faculty of Industrial and Mechanical Engineering, Qazvin Branch, Islamic Azad University, P.O. Box: 34185-1416, Qazvin, IranReceived 21 February 2013; revised 8 February 2014; accepted 25 February 2014Available online 6 March 2014
KEYWORDSProject scheduling;Mode change;Simulated Annealing;Preemption;ResumptionAbstractExtensive research has been devoted to the multi-mode resource constrained projectscheduling problem (MRCPSP). However, little attention has been paid to problems where preemp-tion is allowed. This paper involves the preemptive multi-mode resource constrained projectscheduling problem (P-MRCPSP) to minimize the project makespan subject to mode changeabilityafter preemption. This problem is a more realistic model and extended case of multi-mode resourceconstrained project scheduling problem. A binary integer programing formulation is proposed forthe problem. The problem formed in this way is an NP-hard one forcing us to use the SimulatedAnnealing (SA) algorithm to obtain a global optimum solution or at least a satisfying one. The per-formance of the proposed algorithm is evaluated on 480 test problems by statistically comparing interm of the objective function and computational times. The obtained computational results indi-cate that the proposed algorithm is efﬁcient and effective. Also, it is concluded from the results thatmode change is very effective to improve the optimal makespan of the project.
/C2112014 King Saud University. Production and hosting by Elsevier B.V. All rights reserved.
1. IntroductionResource constrained project scheduling problem (RCPSP) isone of the most important problems in the context of projectscheduling which is an NP-hard problem[7]. The decision vari-ables for the RCPSP are the starting times of activities whilethe resources availabilities are considered given. The objectiveis then to minimize the completion time of the project. In theliterature there are several algorithms that solve the RCPSP;recent reviews about exact methods and heuristics can befound in Kolisch and Hartmann[30], Hartmann and Kolisch[19], Hartmann and Kolisch[20], Zhang et al.[48], Zhang et al.[49], Jairo et al.[23], Hartmann and Briskorn[17], Agar- wal et al.[3], Fang and Wang[15], Kone´[31], Paraskevopouloset al.[38].In RCPSP it is assumed that activities could only be per-formed in one possible execution mode. In practice, however,it often happens that multiple execution modes can be deﬁnedfor the project activities. Each activity may be executed in oneor more execution modes, each requiring a speciﬁc amount of
*Tel.: +98 9125817105; fax: +98 2813670051.E-mail address:afsharnb@alum.sharif.edu. Peer review under responsibility of King Saud University.
Production and hosting by ElsevierApplied Computing and Informatics (2018) 14, 192–201
Saudi Computer Society, King Saud University
Applied Computing and Informatics
(http://computer.org.sa)www.ksu.edu.sawww.sciencedirect.com
http://dx.doi.org/10.1016/j.aci.2014.02.0032210-8327/C2112014 King Saud University. Production and hosting by Elsevier B.V. All rights reserved.resources consumption and resulting in different durations foran activity completion. More exactly, each execution modedeﬁnes as a trade-off between time/cost, time/resource,speed/resource etc. The multi-mode problem (MRCPSP) is ageneralized version of the RCPSP, where each activity canbe performed in one out of a set of modes, with a speciﬁc activ-ity duration and resource requirements. The standard multi-mode resource constrained project scheduling probleminvolves the selection of an execution mode for each activityand the determination of the activity start or ﬁnish times suchthat the precedence and resource constraints are met and theproject duration is minimized. As this problem is a generaliza-tion of the RCPSP, the MRCPSP is also NP-hard. Severalalgorithms that solve the MRCPSP have been proposed inrecent years: Hartmann and Drexl[18], Sprecher and Drexl[43], Knotts et al.[28], Nonobe and Ibaraki[37], Jozefowska et al.[25], Alcaraz et al.[4], Bouleimen and Lecocq[8], Heil- mann[22], Zhu et al.[50], Zhang et al.[48], Zhang et al. [49], Lova et al.[32], Jarboui et al.[24], Ranjbar et al.[42], Lova et al.[33], Coelho and Vanhoucke[10], Ranjbar[41], Barrios et al.[6], Afshar-Nadjaﬁ et al.[2], Nabipoor Afruziet al.[36].The basic RCPSP and MRCPSP assume that each activity,once started, will be executed until its completion. Thisassumption can be justiﬁed only for activities in which theirinterruption essentially is inapplicable. For example, in orderto integrity of foundation, concrete placement cannot be pre-empted. However, for activities in which their interruption isapplicable, the optimal makespan can be improved by allowingpreemption, because the solution space is extended as a resultof the constraint relaxation. Welding can be mentioned as apreemptive activity. Preemptive multi-mode resource con-strained project scheduling problem (P-MRCPSP) refers to ageneralization of the multi-mode resource constrained projectscheduling problem (MRCPSP) which allows activities to bepreempted at any time instance and restarted later on at noadditional cost. The literature on solution methods for the pre-emptive resource constrained project scheduling problem is rel-atively scant. For the single-mode case, one can refer toKaplan[26], Demeulemeester and Herroelen[13], Ballestin et al.[5], Vanhoucke and Debels[46], Damay et al.[11]. For the multi-mode case, Buddhakulsomsiri and Kim [9]proved that preemption is very effective to improve the optimal pro-ject makespan in the presence of resource vacations and tem-porary resource unavailability and that the makespanimprovement is dependent on the parameters that impactresource utilization. Van Peteghem and Vanhoucke [47]have proposed a genetic algorithm for the multi-mode resource-constrained project scheduling problem and its extension tothe preempted case.The basic MRCPSP and P-MRCPSP assume that activitiesassigned modes cannot change during the execution of the pro-ject. This assumption is one of the classical MRCPSP and P-MRCPSP shortcomings. This common assumption can be jus-tiﬁed as long as essence and materials of modes are differentand mode change is inapplicable. However, if execution modesof an activity have the same essence and materials, the optimalmakespan can be improved by allowing mode change. This isprobable especially in the presence of resource vacations andtemporary resource unavailability. However, it is likely thatin reality, execution mode of an activity is changed, especiallywhen an activity is preempted and it will be restarted at a latertime. In these cases, modeling and solving such a problem as aclassical MRCPSP, especially in the preemptive case may leadto poor solutions. To the best of our knowledge, no researchhas been performed on the P-MRCPSP with permitted modechange.Therefore, the contribution of this paper is fourfold: ﬁrst, a
binary integer programing formulation is developed for thepreemptive multi-mode project scheduling problem of mini-mizing the project makespan subject to resource constraintsand precedence relations, where execution mode of each activ-ity can be changed after being preempted. This problem iscalled P-MRCPSP-MC. This model is not considered in thepast literature. Second, an efﬁcient meta-heuristic solutionprocedure based on SA is developed for the problem due toNP-hardness of the problem. In proposed SA, the activity listrepresentation is used to encode a project schedule and theserial schedule generation scheme (SSGS) embedded with anew dynamic heuristic to translate the schedule representationto a schedule. Third, the effectiveness of proposed SA for theP-MRCPSP-MC will be analyzed. Finally, the effect of modechangeability on project makespan is analyzed.The remainder of this paper is organized as follows: Sec-tion2is devoted to the presentation of the problem. In Sec-tion3the steps of our algorithm to solve the problem isexplained. Computational results are represented in Section 4. Finally, Section5contains the conclusions.2. Problem descriptionIn continuation the project is represented by an activity on thenode (AON) networkG(N,A) where the set of nodes,N, rep- resents activities and the set of arcs,A, represents ﬁnish-startprecedence constraints with a time-lag of zero. The preempt-able activities are numbered from the dummy start activity 1to the dummy end activitynand are topologically ordered,i.e., each successor of an activity has a larger activity numberthan the activity itself. The set of activities is to be scheduledon a setR
qof renewable andRmof nonrenewable resourcetypes. For each activityieN, instead of a ﬁxed duration andknown resource requirements, a ﬁxed work content W
iis given which essentially indicates how much work has to be per-formed. This work content can be performed in a mode m
i, which is chosen out of a set ofM
idifferent execution modes,i.e., with different speeds and resource requirements as longas the required work content is met. The accomplishing ofan activity can be temporarily interrupted at discrete timeinstants, and restarted at a later time with a same or differentmode. The progress of activityiduring each time unit of itsexecution in modem
i,i sw imi(measured by same unit ofW
i). Each activityiin modem irequiresrqim
ikrenewable resource units (keR
q) during each time unit of its execution.For each renewable resourcekeR
q, the availabilityaqkis con- stant throughout the project horizon. Activity i, executed in modem
i, will also usermim
ilnonrenewable resource units (leRm) of the total available nonrenewable resource a
ml. Logically, it is assumed that modem
iwith higherw imirequires more renew-abler
qim
ikand nonrenewable resourcesrmim
il.The objective of the P-MRCPSP-MC is to ﬁnd a feasibleschedule in order to minimize the makespan of the project.However, changeable execution modesm
ifor activities andpreemption plan for activities have to be determined. A sched-Solution to multi-mode project scheduling problem 193ule is deﬁned as a sequence of start (ﬁnish) times for the pro-ject’s activities. A schedule which satisﬁes the speciﬁed prece-dence and resource constraints is called feasible schedule.Also, a feasible schedule which meets as much as possiblethe objectives set forward by project management is calledoptimal. The following notation is used for P-MRCPSP-MC:
ASet of arcs of acyclic digraph representing the projectNSet of nodes of acyclic digraph representing the project,|N|=nnNumber of activities, index byi R
qSet of renewable resource(s), |Rq|=K KNumber of renewable resource(s), index by k R
mSet of nonrenewable resource(s), |Rm|=L LNumber of nonrenewable resource(s), index by l M
i Number of execution modes for activity i, index bym i
Wi Total work content of activityi,ieN w
imiProgress of activityiduring each time unit of its executionin modem
i,ieN,m i=1 ,...,M i
rqim
ikRenewable resource typekrequirement of activityiin mode m
i,ieN,keRq,mi=1 ,...,M i
rmim
ilNonrenewable resource type l requirement of activity iin modem
i,ieN,leRm,mi=1 ,...,M i
aqk Constant availability of renewable resource type k throughout the project horizon,keR
q
aml Total availability of nonrenewable resource type l,leRm
EST iEarliest start time of activityiLFT
iLatest ﬁnish time of activityi s
n Deadline of the projectZObjective function (project makespan)x
imit1, if activityiin modem iis in progress in periodt,0 , otherwise (binary decision variable)
In our formulation, 0–1 variablesx imitare deﬁned, whichspecify whether an activityiin modem
iis in progress in periodtor not. These variables can only be deﬁned over the timeinterval of the activity in questionte[EST
i+1 ,LFT i]. These limits are determined using the traditional forward and back-ward pass calculations considering duration of activity ibased on high speed mode as follows:d
i¼Wi
max
miwimi2435 ð1ÞThe backward pass calculation is started from a ﬁxed pro-ject deadlines
n. In this paper, earliest ﬁnish time of dummyend activity,EFT
n, is considered as project deadline.EFT nis computed using the traditional forward calculations consider-ing duration of activityibased on low speed mode as follows:d
i¼Wi
min
miwimi26663777 ð2ÞIt is clear that an activity with work content of 0 is never inprogress and thus does not have a corresponding decision vari-able which is set to 1. This problem, however, can be easilyovercome: the dummy start and end activity are assigned adummy mode with work content of 1. Also, the parametersr
mim
il,rqim
ikandw imifor dummy modes are assumed as 1. Allother activities with zero work content can be eliminated, pro-vided that the corresponding precedence relations are adjustedappropriately. The resulting schedule may be transferred into aschedule for the original problem by removing the dummystart and end activity, and one time unit left shifting.Using the above notation, P-MRCPSP-MC can be mathe-matically formulated as follows:minZ¼XLFT n
t¼EST nþ1t:xnmnt ð3ÞSubject to:X
LFT i
t¼EST iþ1XMi
mi¼1wimi:ximit/C21W i8i2Nð4ÞX
Mi
mi¼1ximit/C2018i2N;8t2½EST iþ1;LFT i/C138ð5Þx
imitþx im0iðtþ1Þ/C2018i2N;8t2½EST
iþ1;LFT i/C01/C138;8m i–m0ið6ÞX
ts¼1XMi
mi¼1wimi:ximis/C21W iXMj
mj¼1xjmjðtþ1Þ 8ði;jÞ2A;8t2½EST
iþ1;LFT j/C01/C138ð7ÞX
ni¼1XMi
mi¼1rqim
ik:ximit/C20aqk8k2Rq;t¼1;...;s n ð8ÞX
ni¼1XMi
mi¼1XEFT i
t¼EST iþ1rmim
il:ximit/C20aml8l2Rmð9Þx
imit¼0;18i2N;8t2½EST iþ1;LFT i/C138;m
i¼1;...;M i ð10Þ The objective function in Eq.(3)minimizes the projectduration. Remember, however, that this value exceeds theoptimal project length because of the unit duration of boththe dummy start and dummy end activity. The constraints ininequality(4)assure that work content of each activity ismet. The constraints in Eq.(5)assure that each activity isnot assigned more than one mode for each time period. Theassumption that mode change is not allowed without preemp-tion is modeled in Eq.(6). Eq.(7)denotes the precedencerelations-constraints. Constraints(8) and (9)take care of the renewable and nonrenewable resource limitations, respectively.Finally, Eq.(10)imposes binary values on the decision vari-ables. This formulation requires the deﬁnition of at most n* max(M
i)*s nbinary decision variables. Also, the number ofconstraints of the formulation amounts to at most n+ns
n
[1 + max(M i)(max(M i)-1)/2]+s n(|A|+K)+L.Fig. 1shows an example of P-MRCPSP-MC with 7 activi-ties where 1 and 7 are dummy activities.Each activity has two execution modes. For each mode, 1renewable resource and 1 nonrenewable resource is indicated.The availability for the renewable (nonrenewable) resource is5 (132). Problem instance parameters are given in Table 1. Fig. 2(a) depicts a schedule with a makespan of 8 days. Thisschedule is feasible because it uses exactly 130 nonrenewableresource units. Also, precedence relations are met and renew-able resource availability (5) is not violated. Fig. 2(b) shows194 B. Afshar-Nadjaﬁa feasible schedule with a makespan of 7 days, in which pre-emption is allowed. If the problem is relaxed to the P-MRCPSP-MC, a feasible schedule as shown in Fig. 2(c) can be generated.3. Proposed SA to solve P-MRCPSP-MCSimulated Annealing (SA) algorithm has been successfullyapplied to a noticeable number of project scheduling problems[1,8,21,25,35,40]. In this section an SA algorithm is proposedto solve P-MRCPSP-MC. In order to increase quality of theproposed SA, an efﬁcient dynamic heuristic algorithm is imple-mented to construct a schedule. Also exact solutions obtainedfrom Lingo 11 are considered to provide comparable computa-tional efforts for SA.3.1. Basic Simulated AnnealingSimulated Annealing (SA) which has been successfully appliedto various difﬁcult combinatorial optimization problems is arandom search method that is based on Monte Carlo iterativestrategy. The origins of SA are in statistical mechanics (Metro-polis algorithm) and it initially was presented as a search algo-rithm for combinatorial optimization by Kirkpatrick et al.[27]. SA is useful for problems with a very large discrete searchspace, which is too large for an enumeration search method.SA algorithm starts by generating an initial solution and byinitializing the so-called temperature parameter T. Then, at each iteration a solutions0is randomly created in the neighbor-hood of the current solution and if it is better than the currentsolution, it replaces the current solution. If the new solution isnot an improvement upon the current solution, it replaces thecurrent solution with a probability generally computed follow-ing the Boltzmann distribution expð/C0
fðs0Þ/C0fðsÞTÞwhereTis the current temperature andf(s
0)-f(s) is the change in objectivefunction value obtained by moving from previous solution tonew solution. The temperatureTis decreased during the searchprocess, thus at the beginning of the search the probability ofaccepting uphill moves is high and it gradually decreases, con-verging to a simple iterative improvement algorithm. Regard-ing the search process, this means that the algorithm is theresult of two combined strategies: random walk and iterativeimprovement. In the ﬁrst phase of the search, the bias towardimprovements is low and it permits the exploration of thesearch space; this erratic component is slowly decreased thusTable 1Problem instance information.
ActivityiW i Modem i wimi rqim
ikrmim
il
11 1 1 0 021 4 1 6 5 1 024 4 738 1 5 2 1 323 1 641 1 1 8 4 2 325 2 1 051 4 1 7 3 725 2 566 1 6 2 2 223 1 1 171 1 1 0 0
Fig. 2Schedules for problem instance.12
45
3
67
Fig. 1An example network.Solution to multi-mode project scheduling problem 195leading the search to converge to a (local) minimum. The prob-ability of accepting uphill moves is controlled by two factors:the difference of the objective functionsf(s
0)-f(s) and the tem- peratureT. On the one hand, at ﬁxed temperature, the higherthe differencef(s
0)-f(s), the lower the probability to accept amove fromstos
0. Whereas, the higherT, the higher the prob-ability of uphill moves.The choice of an appropriate cooling schedule is crucial forthe performance of the algorithm. One of the most used onesfollows a geometric lawT
k+1=aT kwhereae(0, 1) which corresponds to an exponential decay of the temperature. Thecooling rule may vary during the search, with the aim of tuningthe balance between diversiﬁcation and intensiﬁcation. Forexample, at the beginning of the search,Tmight be constantor linearly decreasing, in order to sample the search space;then,Tmight follow a rule such as the geometric one, to con-verge to a local minimum at the end of the search. The coolingschedule and the initial temperature should be adapted to theparticular problem instance, since the cost of escaping fromlocal minima depends on the structure of the search landscape.The description of SA indicates that a basic SA does not usethe history of the search process. This is one of the reasonswhy SA is often outperformed by other meta-heuristics. How-ever, due to its simplicity, it is generally very fast and it can besuccessfully integrated into other search techniques.3.2. PreprocessingIn order to reduce the search space, preprocessing is usedbefore the execution of SA. The data reduction procedurehas originally been proposed by Sprecher et al. [44]to increase the speed of their branch and bound algorithm for theMRCPSP. The idea behind this procedure is to omit all non-executable and inefﬁcient modes from the project data withoutaffecting the optimal makespan. An execution mode m
jis callednon-executableif its execution would violate the renew-able resource constraints in any schedule. Also, a mode iscalledinefﬁcientif there is another mode of the same activitywith the same or higher speed and no more requirements forall resources. Hence, non-executable and inefﬁcient modesmay be excluded from the project data without losingoptimality.3.3. Solution representationIn the previous researches, various representations for sched-ules in the construction of heuristics for the RCPSP are devel-oped (Kolisch and Hartmann[30]). The two most importantones are the random-key (RK) representation and theactivity-list (AL) representation. Hartmann and Kolisch [19] deduced from experimental tests that procedures based onAL representations outperform the other procedures. TheAL representation is used to encode a project schedule andthe serial schedule generation scheme (SSGS) to translate theschedule representation to a schedule. Since the minimum pro-ject makespan criterion is a regular performance measure, i.e.,a measure which is non-decreasing in activity completiontimes, one may use the serial SGS rule to construct the sched-ule. As a result, there is no danger of omitting an optimalschedule by using the serial SGS here. The serial SGS sequen-tially adds activities to the schedule until a feasible completeschedule is obtained. In each run, the ﬁrst un-scheduled activ-ity in the activity list is chosen and the ﬁrst possible startingtime is assigned for that activity such that precedence orresource constraints are preserved.A feasible solution is represented by a vector which is aprecedence-feasible permutation of activities:I¼ðjIi;jI2;...;jInÞð11Þ Fig. 3shows an example of solution representation relatedto the mentioned instance inFig. 1.Having got a feasible solution represented by the vectordescribed above, the starting times of all activities (sub-activities) are then deﬁned by using the serial SGS. The SGSdetermines how a feasible schedule is constructed by assigningstarting times to the activities. It sequentially adds activities inthe activity list to the schedule until a feasible complete sched-ule is obtained such that no precedence or resource constraintis violated. In this paper however, execution modes are deter-mined using a dynamic heuristic embedded into serial SGS.Our proposed heuristic is derived from part period lot sizingheuristic (DeMatteis[12]); algorithm chooses the number ofperiods covered by the replenishment order such that the totalholding costs are made as close as possible to the setup cost.To solve P-MRCPSP-MC, an initial feasible activity list isgenerated. Then, ratio of work to resource ( RWR) is computed as follows:RWR¼
Pni¼1WiPLl¼1amlþTPKk¼1aqkð12Þ RWRis a representation of work-resource balancing. Inour proposed SA, mode assignment is done by comparing real-ized ratio of work to resources so far with RWR. For selected activityi, modem
iwith realized ratio of total completed workcontent to the spent resources so far as close as to RWRis assigned.After obtaining an initial activity listI, the correspondingschedule is computed by the following procedure:Starting from time period 1, for each time period t, set of activities that are executable at a certain time period t(i.e., all their predecessors have completed), is identiﬁed. This setof activities is denoted byI
awhich should consist of at leastone activity. Activities inI
aare arranged according theirsequence inI. In each iteration, ﬁrst activityjis selected from I
aand deleted from it. If activityjwas in progress at periodt-1, same execution mode should be assigned to it if possible. Else,procedure is continued by selecting ﬁrst activity jfromI
a
again.If activityjwas in progress at periodt-1, allimpossibleand dominatedmodes of activityjare considered inactive. A modem
jis calledimpossibleif its renewable resource requirementexceeds remaining availability for at least one renewableresource type. Also, A modem
jisdominatedby another mode m
0jif remaining work of activityjis less than or equal tow jm0j
whereasw jmj>w jm0j. Then, for remaining modes (if exist) of
Activity list
j1 j2 j3 j4 j5 j6 j7
1 2 4 3 5 6 7
Fig. 3Solution representation.196 B. Afshar-Nadjaﬁactivityj,P jmjis computed as follows which is a representationof realized ratio of work to resources, so far.P
jmj¼P
iP
miPts¼1wimi:ximisP
iP
miP
lPts¼1rmim
ilximisþtPKk¼1aqkð13ÞFinally, the modem
jfor whichP jmjmost nearly equals toRWRis assigned to activityjand activityjset to be in progressat periodt. If there are no remaining modes for activity j, pro- cedure continues by selecting ﬁrst activityjis fromI
a. Also, if I
ais empty, algorithm restarts by settingt=t+ 1. Above procedure is continued until dummy activity nbe a scheduled activity. The time complexity of this procedure is the same asthe basic serial SGS,O(n
2K) (Pinson et al.[39]). The pseudo- code for decoding a solution to a schedule is shown in Table 2. For example, inFig. 1consider the following activity list:
Decoding this schedule as follows results in the feasible sched-ule shown inFig. 2(c):t= 1 activity 2 in mode m
1
t= 2 activity 4 in mode m 1
t= 2 activity 3 in mode m 2
t= 3 activity 2 in mode m 2
(activity 2 is preempted at time pointt=1 )t= 3 activity 3 in mode m
2
t= 4 activity 2 in mode m 2
t= 4 activity 3 in mode m 2
t= 5 activity 4 in mode m 1
(activity 4 is preempted at time pointt=2 )t= 5 activity 5 in mode m
1
t= 6 activity 5 in mode m 1
t= 6 activity 6 in mode m 1
The number of requested nonrenewable resource units thatexceeds the capacitya
ml;l2Rs, is deﬁned as the excess ofresource requestERR(l) (Van Peteghem and Vanhoucke[47]). AnERR(l) = 0 means that the solution is feasible. IfERR(l) is larger than 0, the solution is infeasible with respectto nonrenewable resources. The formula of the ERR(l) can be adjusted in our problem as follows:ERRðlÞ¼X
Ll¼1max 0;Xnj¼1Xsn
t¼1XMj
mj¼1ðrmjm
jl:xjmjtÞ/C0aml ! ! ð14ÞFor an infeasible generated schedule (ERR(l) > 0) the local search procedure of Hartmann[16]is applied to trans-form infeasible solutions into feasible ones. The procedurechooses an activity randomly and for that activity, a differentmode is chosen. If theERR(l) remains the same or decreases,the mode for that activity is changed. This step is repeateduntil the mode assignment is feasible (ERR(l) = 0) or untilJ consecutive unsuccessful trials to improve the mode assign-ment have been made. In this paper,Jequals to four timesthe number of activities in the project. This procedure acts onlyon mode assignment and do not change the activity list. Also,this procedure stops as soon as it reaches to a feasible solution;i.e., resulting solution is close to the inner border of nonrenew-able feasibility. So this procedure may not generate a feasiblesolution that is very different from the original unfeasible one.3.4. Starting solutionIn the proposed SA an initial solution is created by setting allactivities on the activity list based on the latest ﬁnish time(LFT) which is an efﬁcient priority rule (Kolisch [29]). Then, the procedure described in Section4.2is used to determine exe-cution modes and execution time of activities.3.5. Neighborhood generation structureIn order to generate a neighborhood of current solution thefollowing method is used. LetI¼ðjIi;jI2;...;jInÞbe the current solution. Neighborhood generation mechanism is applied tothe activity list of the solution. For activity list of I, neighbor- hood generation mechanism operates as follows: A randomactivityj
Ia, is selected from the activity list with position a. Last predecessor and ﬁrst successor’s position of j
Iais identiﬁed in the activity list. Subsequently, a random position xbetween the last predecessor and ﬁrst successor’s position of j
Iais selected, andj
Iais moved to positionx. Finally, all activitiesbetween position ofj
Iaand positionxare shifted to the leftor right depending on relative position ofj
Iaand positionx. 3.6. Cooling schemeThe cooling scheme is the main factor that needs to be orga-nized when designing the Simulated Annealing algorithm.The temperature is initially set at a large value and then grad-ually decreased under the cooling schedule function until itreaches the thermal equilibrium. After each move (neighbor-hood generation), the temperature is reduced according to
Table 2Pseudo-code for decoding a solution to a schedule.
1) Lett= 1, computeRWRfrom Eq.(12)2) Determine the list of uncompleted activities which are admissible to be in progress at period twith respect to the precedence constraints, (I
a). Arrange activities inI aaccording their sequence inI 3) IfI
ais empty sett=t+ 1 and go to step 2, else, select ﬁrst activity jfromI a, DeletejfromI a,I fj=ngo to step 8 4) If activityjwas in progress at periodt-1, assign the same execution mode to it ifpossible and go step 7else, go to step 3 5) Delete allimpossibleanddominatedmodes of activityj. If the remaining mode list of activity jis empty go to step 3 6) For remaining modes of activityjcomputeP
jmjfrom Eq.(13), assign the modem jto activity for whichP jmjis most nearly equal toRWR 7) Set activityjin assigned mode to be in progress at period t, go to step 2 8) Stopj1 j2 j3 j4 j5 j6 j7
1243567Solution to multi-mode project scheduling problem 197the cooling schedule suggested by Lundy and Mees [34]as fol- lows whereais chosen close to zero.T
kþ1¼Tk
1þaT kð15Þ3.7. Stopping criterionIn theory the SA procedure should be continued until the ﬁnaltemperatureT
fis zero, but in practice other stopping criteriaare used. In this paper, the procedure is continued until a pre-determined CPU time is reached.4. Performance evaluation4.1. The test problemsA set of 480 problems was generated by the project generatorProGen/px developed by Drexl et al.[14]in order to validatethe proposed SA algorithm for the P-MRCPSP-MC. To dothis the parameters given inTable 3are used. The indication[x,y] means that the value is randomly generated on the inter-val [x,y]. Renewable resource availability is constant over time.For each combination of the parameter values, 4 instanceswere generated. The resource factorRFreﬂects the averageportion of resource required per activity. The resource strengthRSreﬂects the scarceness of the resource. The problem set wasextended by generating project deadline s
nin the same way asdescribed in Section2.4.2. Parameters settingThe values of parameters used in Simulated Annealing (SA)algorithms must be carefully selected since parameter valuesmay have a signiﬁcant inﬂuence on the performance of thealgorithm. In this paper, the Taguchi experimental design isused to tune the parameters of SA. CPU-time limit was speci-ﬁed as a stopping criterion which is selected through the com-putational experiments. We obtained good results by indexingthe CPU-time limit to the size of the problem, i.e., use of thelow CPU-time for small problems and high CPU-time for lar-ger problems. Taguchi[45]divides factors into controllableand noise factors and offer a set of orthogonal arrays fordesigning experiments of quality improvement. Although thereis no direct control of noise factors, the Taguchi method deter-mines the optimal level of controllable factors and minimizesthe effect of noise. In the proposed SA, the factors that shouldbe tuned are temperature control parameter a, initial tempera- ture and number of milliseconds per activity CPU. A set of 27 randomly generated problems with 40 non-dummy activitiesare used for parameter tuning. Using MINITAB software ver-sion 16, based on a L27 orthogonal array design the optimallevels (inBold) of the parameters are reported inTable 4. 4.3. Experimental resultsThe procedure has been programed in Borland C++ 5.02 andexecuted on a personal computer with an Intel Core2Dou,2.5 GHz processor and 3 GB memory. Since we could not ﬁndany algorithm for P-MRCPSP-MC, the proposed SA is com-pared with the optimal solution obtained by Lingo 11. Table 5 presents the computational results of the proposed algorithmwhere it is compared with the optimal solution obtained byLingo 11 (or the best obtained solution by SA if Lingo isnot able to solve the problem). Proposed SA executed 10 timesfor each problem to obtain more reliable data. The experimen-tal results demonstrate that control parameter calibration pro-vides high quality solutions. Following notations are used inTable 5:NPO: Number of problems for which Lingo was able toﬁnd optimum solution in 1000 s.NPM: Number of runs of problems for which SA was ableto ﬁnd optimum solution.ACNT-L: Average convergence time for Lingo (inseconds).ACNT-SA: Average convergence time for SA (in seconds).ARD: Average relative deviation percentages.Relative deviation (RD) percentage for each problem isobtained by following formula:RD¼
Z/C0Z/C3
Z/C3 ð16Þ whereZis the value of objective function obtained by SA andZ
*is the optimal solution obtained by Lingo or the bestobtained solution by SA.FromTable 5it can be observed that when the number ofactivities is less than or equal to 30, all 192 problems can besolved to optimality by Lingo within the allowed time limit.Also,Table 5shows that when number of activities is greaterTable 3The parameter settings for the problem set.
Control parameter ValueNumber of activities (non-dummy) (n) 20, 30, 40, 60,90 Number of execution modes 2, 3Activity work contents [10,20]Progress of activities (per period) [1,10]Number of initial and terminal activities 3Maximal number of predecessors and successors 3Coeﬃcient of network complexity (CNC) 1.5 Resource factor (RF) 0.5, 1Renewable and nonrenewable resource strength(RS) 0.25, 0.5Number of renewable and nonrenewable resourcetypes 1, 2, 3Constant availability of renewable resources n Total availability of nonrenewable resource 25 n Activity renewable resource (per period) demand Integer[1,10]Activity nonrenewable resource (per period)demand Integer[1,10]
Table 4Factors levels and the tuned values for a,T 0and CPU.
Factor Number of Levels Level 1 Level 2 Level 3CPU35 070100 a3 0.00450.00550.0065 T
0 31 21725198 B. Afshar-Nadjaﬁthan 30, while there are many instances that the Lingo isunable to solve, there is a solution by SA. However, Lingoobtained optimum solutions for 229 out of 480 problems in1000 s and SA algorithm solved all problems with low relativedeviation and in a very short time (70 ms per activity). AverageCPU-time for Lingo indicates that when the number of execu-tion modes is increased the complexity of the problem isincreased. ARD for the algorithm shows that proposed SAgives robust solutions. Also, NPM for the algorithm indicatesthat too many executions of problems reach the optimumsolution.To observe the statistical comparison of the differencesbetween the results of the Lingo and SA, a paired t-test is used for 229 problems to which Lingo obtained optimum solutionsand the corresponding 95% conﬁdence interval is calculated as[/C09.36, 7.82]. Since the lower conﬁdence level is negative andthe upper level is positive, then the null hypothesis cannot berejected as the population mean of the differences could bezero. This implies that the differences between the quality ofsolutions obtained by Lingo and SA are not statisticallysigniﬁcant.In order to evaluate the effect of changeability assumption,for 229 problems which Lingo obtained optimum solutions,each problem has been solved without mode changeabilityassumption.Table 6presents the computational results. FromTable 6it can be observed that mode changeability obviouslyleads to an overall average makespan improvement. Table 6 also reveals that mode changeability usually leads to bettersolutions. Average Improvement (%) column shows that thepercent loss due to using the P-MRCPSP model instead ofthe P-MRCPSP-MC is straightly relevant to number of activ-ities and execution modes.5. Summary and conclusionsThe preemptive multi-mode resource constrained projectscheduling problem with permitted mode change (P-MPRCPSP-MC), is investigated in this paper. The objectiveof P-MPRCPSP-MC is to schedule the activities in order tominimize the project makespan subject to the precedence con-straints and resource constraints. In this problem setting, workcontent concept is used instead of duration. This problem hasnot been studied ever before. The problem described with aninteger programing model, and then the parameters tuned Sim-ulated Annealing (SA) proposed to solve it. The performanceof the proposed algorithm on 480 test problems was comparedwith the results of the Lingo 11. From the computation results,one could clearly see that the SA algorithm could efﬁcientlysolve the project scheduling problem. Also, one could ﬁndout that mode changeability obviously leads to an averagemakespan improvement. For further research, we recommendthe adapting mode change concept for other extensions ofmulti-mode project scheduling problems.References
[1]B. Abbasi, S. Shadrokh, J. Arkat, Bi-objective resourceconstrained project scheduling with robustness and makespancriteria, Appl. Math. Comput. 180 (2006) 146–152
. [2]
B. Afshar-Nadjaﬁ, A. Rahimi, H. Karimi, A genetic algorithmfor mode identity and the resource constrained projectscheduling problem, Sci. Iran. 20 (3) (2013) 824–831
. [3]
A. Agarwal, S. Colak, S. Erenguc, A neurogenetic approach forthe resource constrained project scheduling problem, Comput.Oper. Res. 38 (1) (2011) 44–50
.Table 5Computational results of the SA and Lingo.
#Activities #Modes #Problems SA Lingo NPM ARD (%) ACNT-SA NPO ACNT-L 20 2 48 480 0.00 0.014 48 3.9620 3 48 480 0.00 0.023 48 5.6230 2 48 480 0.00 0.079 48 37.1930 3 48 392 0.34 0.053 48 68.2740 2 48 480 0.00 0.069 16 107.3040 3 48 381 0.39 0.074 10 132.6160 2 48 354 0.42 0.189 9 265.7860 3 48 335 0.56 0.274 2 324.4390 2 48 351 0.50 0.190 0 –90 3 48 321 0.55 0.329 0 –
Table 6Computational results of the Lingo with and without mode change.
#Activities #Modes #Problems P-MRCPSP-MC vs. P-MRCPSP Average improvement (%) Better Equal 20 2 48 4.32 46 220 3 48 5.76 48 030 2 48 5.11 45 330 3 48 6.85 47 140 2 16 7.64 15 140 3 10 9.46 10 060 2 9 8.39 9 060 3 2 9.82 2 0Solution to multi-mode project scheduling problem 199[4]J. Alcaraz, C. Maroto, R. Ruiz, Solving the multi-mode resourceconstrained project scheduling problem with genetic algorithms,J. Oper. Res. Soc. 54 (2003) 614–626
. [5]
F. Ballestin, V. Valls, S. Quintanilla, Pre-emption in resourceconstrained project scheduling, Eur. J. Oper. Res. 189 (2008)1136–1152
.[6]
A. Barrios, F. Ballestin, V. Valls, A double genetic algorithm forthe MRCPSP/max, Comput. Oper. Res. 38 (1) (2011) 33–43
. [7]
J. Blazewicz, J. Lenstra, A. Rinnooy Kan, Scheduling subject toresource constraints: classiﬁcation and complexity, Discrete.Appl. Math. 5 (1983) 11–24
.[8]
K. Bouleimen, H. Lecocq, A new efﬁcient simulated annealingalgorithm for the resource-constrained project schedulingproblem and its multiple mode version, Eur. J. Oper. Res. 149(2003) 268–281
.[9]
J. Buddhakulsomsiri, D. Kim, Properties of multi-moderesource constrained project scheduling problems withresource vacations and activity splitting, Eur. J. Oper. Res.175 (2006) 279–295
.[10]
J. Coelho, M. Vanhoucke, Multi-mode resource constrainedproject scheduling using RCPSP and SAT solvers, Eur. J. Oper.Res. 213 (1) (2011) 73–82
.[11]
J. Damay, A. Quilliot, E. Sanlaville, Linear programming basedalgorithms for preemptive and non-preemptive RCPSP, Eur. J.Oper. Res. 182 (2007) 1012–1022
.[12]
J.J. DeMatteis, The part-period algorithm, IBM Syst. J. 7 (1)(1968) 30–38
.[13]
E. Demeulemeester, W. Herroelen, An efﬁcient optimalprocedure for the preemptive resource-constrained projectscheduling problem, Eur. J. Oper. Res. 90 (1996) 334–348
. [14]
A. Drexl, R. Nissen, J.H. Patterson, F. Salewski, ProGen/ px– An instance generator for resource constrained projectscheduling problems with partially renewable resources andfurther extensions, Eur. J. Oper. Res. 125 (2000) 59–72
. [15]
C. Fang, L. Wang, An effective shufﬂed frog-leaping algorithmfor resource constrained project scheduling problem, Comput.Oper. Res. 39 (5) (2012) 890–901
.[16]
S. Hartmann, Project scheduling with multiple modes: a geneticalgorithm, Ann. Oper. Res. 102 (2001) 111–135
. [17]
S. Hartmann, D.A. Briskorn, Survey of variants and extensionsof the resource constrained project scheduling problem, Eur. J.Oper. Res. 207 (1) (2010) 1–14
.[18]
S. Hartmann, A. Drexl, Project scheduling with multiple modes:a comparison of exact algorithms, Networks 32 (1998) 283–297
. [19]
S. Hartmann, R. Kolisch, Experimental evaluation of state-of-the-art heuristics for the resource constrained project schedulingproblem, Eur. J. Oper. Res. 127 (2000) 394–407
. [20]
S. Hartmann, R. Kolisch, Experimental investigation ofheuristics for resource-constrained project scheduling: anupdate, Eur. J. Oper. Res. 17 (2006) 23–37
. [21]
Z. He, N. Wang, T. Jia, Y. Xu, Simulated annealing and tabusearch for multimode project payment scheduling, Eur. J. Oper.Res. 198 (2009) 688–696
.[22]
R. Heilmann, A branch-and-bound procedure for the multi-mode resource constrained project scheduling problem withminimum and maximum time lags, Eur. J. Oper. Res. 144 (2)(2003) 348–365
.[23]
R. Jairo, M. Torres, G.F. Edgar, C. Pirachica ´n-Mayorga, Project scheduling with limited resources using a geneticalgorithm, Int. J. Project Manage. 28 (6) (2010) 619–628
. [24]
B. Jarboui, N. Damak, P. Siarry, A. Rebai, A combinatorialparticle swarm optimization for solving multi-mode resource-constrained project scheduling problems, Appl. Math. Comput.195 (2008) 299–308
.[25]
J. Jozefowska, M. Mika, R. Rozycki, G. Waligora, J. Weglarz,Simulated annealing for multi-mode resource constrainedproject scheduling, Ann. Oper. Res. 102 (2001) 137–155
.[26] L. Kaplan, Resource-Constrained Project Scheduling withPreemption of Jobs (Ph.D. Thesis), University of Michigan,1988.[27]S. Kirkpatrick, C. Gelatt, M. Vecchi, Optimization by simulatedannealing, Science 220 (1983) 671–680
. [28]
G. Knotts, M. Dror, B. Hartman, Agent-based projectscheduling, IIE Trans. 32 (5) (2000) 387–401
. [29]
R. Kolisch, Serial and parallel resource constrained projectscheduling methods revisited: theory and computation, Eur. J.Oper. Res. 90 (1996) 320–333
.[30]
R. Kolisch, S. Hartmann, Heuristic algorithms for solving theresource constrained project scheduling problem: classiﬁcationand computational analysis, in: J. Weglarz (Ed.), ProjectScheduling: Recent Models, Algorithms and Applications,Kluwer Academic Publishers, Boston, 1999, pp. 147–178
. [31]
O. Kone´, New approaches for solving the resource constrainedproject scheduling problem, 4OR 10 (1) (2012) 105–106
. [32]
A. Lova, P. Tormos, F. Barber, Multi-mode resourceconstrained project scheduling: scheduling schemes, priorityrules and mode selection rules, Intell. Artif. 30 (2006) 69–86
. [33]
A. Lova, P. Tormos, M. Cervantes, F. Barber, An efﬁcienthybrid genetic algorithm for scheduling projects with resourceconstraints and multiple execution modes, Int. J. Prod. Econ.117 (2) (2009) 302–316
.[34]
M. Lundy, A. Mees, Convergence of an annealing algorithm,Math. Program. 34 (1986) 111–124
.[35]
M. Mika, G. Waligo´ra, J. Weglarz, Simulated annealing andtabu search for multi-mode resource constrained projectscheduling with positive discounted cash ﬂows and differentpayment models, Eur. J. Oper. Res. 164 (2005) 639–668
. [36]
E. Nabipoor Afruzi, E. Roghanian, A.A. Najaﬁ, M. Mazinani,A multi-mode resource-constrained discrete time–cost tradeoffproblem solving using an adjusted fuzzy dominance geneticalgorithm, Sci. Iran. 20 (3) (2013) 931–944
. [37] K. Nonobe, T. Ibaraki, Formulation and Tabu SearchAlgorithm for the Resource Constrained Project SchedulingProblem (RCPSP), Technical Report, Kyoto University, 2001.[38]
D.C. Paraskevopoulos, C.D. Tarantilis, G. Ioannou, Solvingproject scheduling problems with resource constraints via anevent list-based evolutionary algorithm, Expert Syst. Appl. 39(4) (2012) 3983–3994
.[39]
E. Pinson, C. Prins, F. Rullier, Using tabu search for solving theresource constrained project scheduling problem, in: Proceedingof the 4th International Workshop of Project Management andScheduling, Leuven, 1994, pp. 102–106
. [40]
A. Rahimi, H. Karimi, B. Afshar-Nadjaﬁ, Using meta-heuristicsfor project scheduling under mode identity constraints, Appl.Soft. Comput. 13 (4) (2013) 2124–2135
. [41]
M. Ranjbar, An optimal NPV project scheduling with ﬁxedwork content and payment on milestones, Int. J. Ind. Eng. Prod.Res. 22 (3) (2011) 181–186
.[42]
M. Ranjbar, B. De Reyck, F. Kianfar, A hybrid scatter-searchfor the discrete time/resource trade-off problem in projectscheduling, Eur. J. Oper. Res. 193 (1) (2008) 35–48
. [43]
A. Sprecher, A. Drexl, Solving multi-mode resource constrainedproject scheduling problems by a simple, general and powerfulsequencing algorithm, Eur. J. Oper. Res. 107 (1998) 431–450
. [44]
A. Sprecher, S. Hartmann, A. Drexl, An exact algorithm for theproject scheduling with multiple modes, OR Spektrum 19 (1997)195–203
.[45]
G. Taguchi, Introduction to Quality Engineering, AsianProductivity Organization, Tokyo, 1986
. [46]
M. Vanhoucke, D. Debels, The impact of various activityassumptions on the lead time and resource utilization ofresource constrained projects, Comput. Ind. Eng. 54 (2008)140–154
.[47]
V. Van Peteghem, M. Vanhoucke, A genetic algorithm for thepreemptive and non-preemptive multi-mode resource200 B. Afshar-Nadjaﬁconstrained project scheduling problem, Eur. J. Oper. Res. 201(2) (2010) 409–418
.[48]
H. Zhang, C. Tam, H. Li, Multi-mode project scheduling basedon particle swarm optimization, Comput. Aided Civ.Infrastruct. Eng. 21 (2006) 93–103
.[49]H. Zhang, H. Li, C.M. Tam, Particle swarm optimization forresource constrained project scheduling, Int. J. Project Manage.24 (1) (2006) 83–92
.[50]
G. Zhu, J. Bard, G. Tu, A branch-and-cut procedure for themultimode resource constrained project scheduling problem, J.Comput. 18 (3) (2006) 377–390
.Solution to multi-mode project scheduling problem 201