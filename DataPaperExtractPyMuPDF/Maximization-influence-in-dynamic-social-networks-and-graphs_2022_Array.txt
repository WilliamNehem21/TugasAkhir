Array 15 (2022) 100226
Available online 13 July 2022
2590-0056/© 2022 Published by Elsevier Inc. This is an open access article under the CC BY license (http://creativecommons.org/licenses/by/4.0/).
Maximization influence in dynamic social networks and graphs 
Gkolfo I. Smani *, Vasileios Megalooikonomou 
Department of Computer Engineering and Informatics, University of Patras, 26504, Greece   
A R T I C L E  I N F O   
Keywords: 
Maximization influence 
Dynamic social networks 
Diffusion 
Social influence 
Graphs 
A B S T R A C T   
Social influence and influence diffusion have been extensively studied in social networks. However, most existing 
works on influence diffusion focus on static networks. In this paper, we study the problem of maximizing in-
fluence diffusion in dynamic social networks, i.e. networks that change over time. We propose the following 
algorithms under the Linear Threshold (LT) and Independent Cascade (IC) models: (a) the DM algorithm which is 
an extension of MATI algorithm and solves the Influence Maximization (IM) problem in dynamic networks, (b) 
the DM-C algorithm which is a latter version of DM and solves the IM problem using k-core decomposition and 
the core number information, (c) the DM-T algorithm which is another version of DM, that uses K-truss 
decomposition and the truss number information in order to solve the IM problem. Experimental results show 
that our proposed algorithms increase diffusion performance by 2 times compared with several state of the art 
algorithms and achieve comparable results in diffusion with the Greedy algorithm. Also, the proposed algorithms 
are 8.5 times faster in computational time compared with previous methods.   
1. Introduction 
Recently, social networks are playing a fundamental role in infor-
mation propagation, since more and more people prefer to publicize 
their views or ideas on the networks. One of the main research interests 
is to understand the way of influence and information spread in social 
networks. For example, a company wants to market a new product 
through the effect of “word of mouth” in the social networks. It wishes to 
find and convince a small subset of users (seed users) to adopt the 
product so as to trigger a large cascade of further adoptions via social 
influence. Fundamentally, we need to understand the influence diffusion 
by answering questions such as: how to select the seed users so that the 
total number of triggered users who adopt the product can be maximized 
(a.k.a. influence maximization) [1,9,11,19,20,21]. 
A natural problem for social influence is how to find the initial users 
that will eventually influence the largest number of users, which is 
known as Influence Maximization (IM). Given a social network G and an 
integer k, IM’s goal is to select k seed users in G in hope that adopting a 
promoted product or idea can maximize the expected number of final 
adopted users through word-of-mouth effect [1,9,20]. Initially proposed 
by Kempe et al. [8], the problem of IM has been intensively studied by a 
plethora of subsequent projects, improvements or modifications from 
multiple aspects, including estimation of influence size, adaptive seed-
ing, boosting seeding, and many others. 
The main task in IM lies in estimating the expected size of influenced 
users of each alternative seed set based on each user’s activation prob-
abilities, referring to the probability that a user successfully influences 
his social neighbors after being influenced. The influences among users 
are quantified by those activation probabilities [1,16,20,21]. While 
existing literature works well in finding the most influential seed users, 
they are all constrained to the assumption that the number of nodes in 
the network, along with their edges in between, are fixed during influ-
ence diffusion. Consequently, it violates real practices as many realistic 
social networks are usually growing over time. 
In this paper, we study the problem of influence maximization (IM) 
on dynamic social networks (DSNs) which are changing over time, and 
specifically under the Linear Threshold (LT) and Independent Cascade 
(IC) models. According to both, at any discrete time step a user can be 
either active or inactive (for example, has adopted the product or not) 
and the information propagates until no more users can be activated. 
The main contributions of this work can be summarized as follows:  
• We introduce efficient IM algorithms for dynamically changing 
networks.  
• The proposed algorithms take advantage of node metrics in order to 
stratify the nodes – a procedure that facilitates tracking changes.  
• The proposed approaches are evaluated on large scale real-world 
graphs. 
* Corresponding author. 
E-mail addresses: gsmani@upatras.gr (G.I. Smani), vasilis@ceid.upatras.gr (V. Megalooikonomou).  
Contents lists available at ScienceDirect 
Array 
journal homepage: www.sciencedirect.com/journal/array 
https://doi.org/10.1016/j.array.2022.100226 
Received 5 May 2022; Received in revised form 4 July 2022; Accepted 5 July 2022   
Array 15 (2022) 100226
2
• The proposed algorithms perform better than several state of the art 
algorithms in terms of influence and computation time, while ach-
ieve comparable results to MC Greedy algorithm in terms of 
influence. 
2. Related work 
Influence Maximization aims at a given number of users that maxi-
mize the influence spread over a network. Previous efforts on Influence 
Maximization can be generally categorized into static methods and dy-
namic methods. In the case of static methods, there has been a vast 
amount of literature. 
A Monte-Carlo simulation method is proposed by Kempe et al. [8], 
which estimates σ(S) repeating Monte-Carlo simulation, where S is the 
set of seed nodes and σ(S) is the average number of infected vertices. 
Chen et al. [3] propose PMIA (Prefix Excluding Maximum Influence 
Arborescence) to find seed vertices focusing on the paths with high in-
formation diffusion ratio. Chen et al. [4] also suggested Degree Discount 
based on node degree where the nodes, which are adjacent to the 
selected node, are given penalty. This means that, when node v is 
selected as a seed node and u is its neighbor, it is possible that v prop-
agates information to u, so selecting nodes other than u as seed nodes is 
better for information diffusion. Cai et al. [2] proposed Holistic Influ-
ence Maximization problem as a complementary to Influence Maximi-
zation problem. Song et al. [18] proposed Bi-CLKT model that exploits 
contrastive learning to learn from large amounts of unlabelled data, 
transforming Knowledge Tracking problem into a graph form. 
Two categories of methods have been proposed for the IM problem in 
dynamic networks: Monte-Carlo simulation-based methods and 
heuristic-based methods. The previous method is proposed by Habiba 
and Berger-Wolf [6]. The method estimates the scale of propagation σ(⋅) 
by repeating Monte-Carlo simulation in the case of static networks. Since 
σ(⋅) is a monotonic and submodular function also in dynamic networks, 
this method achieves large-scale propagation [6,13,14]. However, the 
computational cost of this method is high as in static networks [12]. 
Osawa et al. [14,16] proposed a heuristic method for calculating σ(⋅) at 
high speed. After σ(S) is computed, seed nodes are obtained by greedy 
algorithm as in the method by Monte-Carlo simulation. Also, Murata and 
Koga [12] proposed three methods, Dynamic Degree Discount, Dynamic 
CI (Dynamic Collective Influence) and Dynamic RIS (Dynamic Reverse 
Influence Sampling), as extensions of static network methods to dy-
namic network methods, based on node degree, the degree of distant 
nodes, and the reachable nodes, respectively. Xue et al. [22] presented a 
new taxonomy that organizes current dynamic network embedding 
methods within a novel category hierarchy. 
3. Preliminaries and problem statement 
A social network is typically modeled as a directed graph G =
(V,
E), consisting of |V| users represented as nodes and |E| directed edges 
reflecting the relationship between users. An influence weight pu,v ∈
[0, 1] is also associated with each edge (u, v) ∈ E, and represents the 
probability that a node u will influence node v. We assume that T (u) =
{τ1, τ2, …, τМ} represents the set of all possible paths that exist in the 
graph starting from node u and leading to “leaf” nodes and are generated 
by the Depth-first search (DFS) algorithm. Each path τi consists of a 
sequence of nodes: τi = {ni1, ni2, …, niN}. M is the number of all possible 
paths from a node u and N represents the number of nodes and the index 
of the terminal node of path τi[15]. 
Let pτ
l.l+1, 1 ≤ l ≤ N − 1, represent the influence weight (probability) 
between two successive nodes in path τ. Then F (τi) = {fi1, fi2, …., fiN} 
represents the probability path for every path τi starting from node u to 
be active. Each fij is equal to ∏j−1
l=1 pτi
l,l+1 if j ≥ 1, and 1 otherwise [15]. 
Let Ψ(u, v) = {ψ1, ψ2, .., ψL} denote the set of all possible unique 
paths from a node u to a node v, where each path ψi = {ni1, ni2, …, niN}
consists of a sequence of nodes, L is the number of all possible paths 
between nodes u and v, and N represents the number of nodes of path ψi, 
with L ≤ M. Respectively, Φ(ψi) = {φi1, φi2, .., φiN} defines the proba-
bility for every path ψi between nodes u and v, and is calculated in the 
same way as fij [16]. 
Goyal et al. [5] showed that the spread of a set S of nodes is the sum 
of the spread of each individual u ∈ S on the subgraphs induced by the 
set V − S + u: 
σ(S)
=
∑
v∈V
∑
X
Pr[X]I(S, v, X)
=
∑
v∈V
A(S, v)
=
∑
u∈S
σV−S+u(u)
(1)  
where X is a possible live-edge graph, Pr [X] is the sampling probability of 
X, I(S, v, X) is an indicator function which equals to 1 if there exists a live 
path in X from S to v and 0 otherwise, A (S,v) is the probability the single 
node v to be activated (influenced) by S, and σV−S+u(u) denotes the total 
influence of u in the subgraph induced by the set V − S + u to denote 
((V\S) ∪ {u}). 
Under the LT model, the calculation of influence after a node x 
addition to a set of nodes S is given by the following equation: 
σ(S + x) = σ(S) + σ(x) −
∑
y∈S
Ω(x, y) −
∑
y∈S
Ω(y, x)
(2) 
Under the IC model the following heuristics [13] are used:  
1. for each path originating from node x or a node of seed set S, we keep 
the subpaths before finding node of S ∪ {u}.  
2. σ(S +x) is equal to the sum of the influence probabilities that 
correspond to each of these subpaths. 
Also, the forward cumulative influence Ω(u,v) corresponds to the 
influence of node u to v and to the nodes that can be found right after v in 
the paths T(u) of node u. 
In this paper, we model a dynamic social network G = {G1, G2, …,
GT} as a set of network snapshots evolving over time. We assume that 
the nodes remain the same while the edges in each network snapshot 
change through time. This is used as assumption in other papers [4,11]. 
Each snapshot graph Gt = (V, Et) is modeled as a directed network which 
includes edges appearing during time t = 1, 2, …, T. Moreover, an in-
fluence weight pt
u,v ∈ [0, 1] is also associated with each directed edge (u,
v) ∈ Et, and represents the probability of node u to influence node v at 
time t. 
Our goal is to discover a set of seed sets, St,t = 1, 2,…,T, whose size is 
k, such that it maximizes the influence σ(St). 
Below, we present the basic notations used in this paper (see 
Table 1 
Notation.  
Notation 
Description 
pt
u,v 
Influence weight on directed edge (u,v) at time-step t 
σ(St)
Influence of a set of nodes St to the graph 
At(u,v)
Influence of node u to node v at time-step t 
Ωt(u,v)
Forward cumulative influence of node u to node v, at 
time-step t 
Tt(u) = {τt
1,τt
2, …,τt
М} 
Set of all possible paths starting from node u, at time-step 
t 
τt
i = {ni1, ni2, …, niN} 
Path consisting of N nodes starting from node u, at time- 
step t 
F (τt
i) = {fi1, fi2, …., fiN} 
Cumulative probability path for path τi, at time-step t 
Ψt (u,v) = {ψt
1, ψt
2, 
….,ψt
L} 
Set of all possible paths between nodes u and v, at time- 
step t 
ψt
i = {ni1, ni2, …., niN} 
Path between nodes u and v, at time-step t 
Φt (ψi) = {φi1, φi2, 
….,φiN} 
Cumulative probability path for path ψt
i, at time-step t  
G.I. Smani and V. Megalooikonomou                                                                                                                                                                                                      
Array 15 (2022) 100226
3
Table 1). 
Below, some useful definitions and theorems from Refs. [7,16,17] 
are given for completeness: 
Definition 1 (k-core subgraph): Let H be a subgraph of G, (i.e., H ⊆ G). 
Subgraph H is defined to be a k-core subgraph of G, denoted by Ck, if it is a 
maximal connected subgraph in which all nodes have degree at least k. 
Definition 2 (node’s core number): A node i has core number ci = k, if 
it belongs to a k-core but not to any (k + 1)-core. 
It is evident that if all the nodes of the graph have degree at least one, 
i.e., d(v) ≥ 1, ∀v ∈ V, then the 1-core subgraph corresponds to the whole 
graph, i.e., C1 ≡ G. Furthermore, assuming that Ci, i = 0, 1, 2, …, kmax is 
the i-core of G, then the k-core subgraphs are nested, i.e.: 
C0 ⊇ C1 ⊇ C2 ⊇ … ⊇ Ckmax 
Typically, subgraph Ckmax is called maximal k-core subgraph of G. 
Fig. 1 illustrates an example of a graph and the corresponding k-core 
decomposition. 
Definition 3 (Induced Core Subgraph (ICS)): The core subgraph of G 
induced by a node v ∈ V, noted ICS(v)=(VV
I , EV
I ) is the maximal con-
nected subgraph of the kG(v) such as: 
1. v ∈ VV
I , v is in H (i.e., the vertex inducing the ICS is in the ICS). 
2. ∀v ∈ VV
I , kG(u) = kG(v); all nodes of ICS(v) has a coreness exactly 
equal to (an no greater than) kG(v).  
Theorem 1.
(k-core update theorem): Given a graph G and two nodes u 
and v in G, the insertion or deletion of an edge between u and v:  
• if kG(u) > kG(v), may impact the nodes that belong to ICS(v).  
• if kG(u) < kG(v), may impact the nodes that belong to ICS(u).  
• if kG(u) = kG(v), may impact the nodes that belong to the union of ICS(v) 
and ICS(u). 
The coreness of such a node may:  
• remain unchanged.  
• in the case of an edge addition, increase by 1.  
• in the case of a suppression, decrease by 1. 
The K-truss decomposition extends the notion of k-core decomposition 
using triangles, i.e., cycle subgraphs of length 3 [16]. 
Definition 4 (Triangle subgraph): Let G = (V, E) be a graph. We define 
as a triangle Δuvw a cycle subgraph of nodes u, v, w ∈ V. Additionally, the set 
of triangles of G is denoted by ΔG. 
Definition 5 (Edge support): The support of an edge e = (u, v) ∈ E is 
defined as sup(e, G) = |{Δuvw : Δuvw ∈ ΔG}| and expresses the number of 
triangles that contain edge e. 
Definition 6 (K-truss subgraph): The K-truss, K ≥ 2, denoted by TK =
(VTK,ETK), is defined as the largest subgraph of G, where every edge is con-
tained in at least K – 2 triangles within the subgraph, i.e., ∀e ∈ ETK, sup(e, TK)
≥ K − 2. 
Definition 7 (Edge truss number): The truss number of an edge e ∈ E is 
defined as tedge(e) = max{K : e ∈ ETK}. Thus, if tedge(e) = K, then the edge 
belongs to TK but not to TK+1, i.e., e ∈ ETK but e ∕∈ ETK+1. We use Kmax to 
denote the maximum truss number of any edge e ∈ E. 
Definition 8 (Node truss number): The truss number of a node v ∈ V, 
denoted by tv is the maximum truss number of its incident edges, i.e., 
tv = max{tedge(e), e = (u, v) ∀u ∈ N(v)}, where N(v) is the set of neighbor-
hood nodes of v. 
Definition 9 (K-class): The K-class of graph G = (V, E) is denoted as 
ΦΚ = {e : e ∈ E, τedge(e) = K}. 
Definition 10 (K-truss decomposition). The K-truss decomposition is 
defined as the task finding the K-truss subgraphs of G, for all 2 ≤ K ≤ Kmax. 
That is, the K-truss can be obtained by the union of all edges that have truss 
number at least K, i.e., ETK = ∪j≥KΦj. 
Fig. 2 illustrates an example of a graph and the corresponding K-truss 
decomposition. 
Theorem 2.
If an edge e is inserted into G, then the tedge(.) value of any 
edge can increase by at most 1. 
Theorem 3.
If an edge e is inserted into G, then for every other edge whose 
tedge(.) value increases from K to K + 1, a triangle is formed with either e or 
with at least one other edge whose tedge(.) value also increases from K to K +
Fig. 1. Example of the k-core decomposition.  
Fig. 2. Example of K-truss decomposition  
G.I. Smani and V. Megalooikonomou                                                                                                                                                                                                      
Array 15 (2022) 100226
4
1. 
We also present the following observations that we made during our study 
[17]. 
Observation 1: If an edge e is deleted from G, then the tedge(.) value of 
any edge can decrease by at most 1. 
Observation 2: If an edge e is inserted between nodes u,v ∈ VG, then tu,
tv values can increase by at most 1. 
Observation 3: If an edge e is deleted between nodes u,v ∈ VG, then tu, tv 
values can decrease by at most 1. 
4. Proposed methods 
In this section, we present our proposed methods for the Influence 
Maximization Problem in Dynamic Networks (DNs): DM, DM-C and DM- 
T. The proposed methods are extensions of static method MATI [16]. 
4.1. DM algorithm 
DM algorithm is an extension of the static method MATI. Based on 
the functions A, Ω and influence function σ, we use functions At, Ωt at 
timestamp t, for t = 1, 2,…,T. DM LT is the DM algorithm under Linear 
Threshold (LT) model, shown in Algorithm 1, while DM IC is the DM 
algorithm under Independent Cascade (IC) model, shown in Algorithm 
2.  
Algorithm 1: DM LT 
1 
Input: G0, k, T ⊳k = number of seed nodes, T = max time-step 
2 
Initialize: St = 0,∀t = 1, 2,...,T 
3 
for t = 0 to T do 
4 
if t == 0 then 
5 
Calculate At, ​ Ωt 
6 
Calculate Qt 
7 
for i ​ = 1 to k do 
8 
s,σ(s) = ​ Qt.top()
9 
St = St ∪ {s}
10 
U ​ = ​ V\St 
11 
for each u ∈ U do 
12 
σ(u) = ​ Qt(u)
13 
for each v ∈ St do 
14 
σ(u) − = Ωt(v,u)
15 
σ(u) − = Ωt(u,v)
16 
Qt.add((u,σ(u)))
17 
Update Gt to Gt+1 
18 
Update At, ​ Ωt 
19 
return S = {S1, ​ S2,….,SΤ}
Algorithm 2: DM IC 
1 
Input: G0, k, T ⊳k = number of seed nodes, T = max time-step 
2 
Initialize: St = 0,∀t = 1, 2,...,T 
3 
for t = 0 to T do 
4 
if t == 0 then 
5 
Calculate At 
6 
Calculate Qt 
7 
for i = 1 to k do 
8 
s,σ(s) = Qt.top()
9 
St = St ∪ {s}
10 
U = V\St 
11 
for each u ∈ U do 
12 
σ(St + u) = |St ∪ {u}|
13 
σ(u) + = influence(St)
14 
σ(u) + = influence(St ∪ {u})
15 
Qt.add((u,σ(St ∪ u) − σ(St)))
16 
Update Gt to Gt+1 
17 
Update At 
18 
return S = {S1,S2,….,SΤ}
4.2. DM-C: DM core algorithm 
In DM algorithm, for the computation of functions At and Ωt, the 
computation of T, F, Φ and Ψ from the beginning for each snapshot 
under both LT and IC model is required, which is time consuming. 
Thus, we propose DM-C algorithm applying k-core decomposition 
and reclaiming the information of nodes’ core number or coreness. 
Based on Theorem 1, we detect the nodes affected by graph changes - 
whose coreness changed - and we recalculate those functions for them. 
In order to reduce the execution time and to be more precise in detection 
of changes in the graph, we use the core number. Using the knowledge of 
node’s core number we can see where the changes have taken place. 
Since the computation of paths and factors from the beginning for each 
snapshot under both LT and IC model is time consuming, after forming 
the set of changes at the current snapshot Gt, we calculate the new paths 
and the factors only for the affected nodes by the new paths for 
computing instances of At, Ωt and the influence of the affected nodes by 
changes. 
Therefore, instead of computing At and Ωt over and over again, we 
detect where the changes are, and which nodes were infected by them. 
So, we compute instances of At and Ωt taking into consideration At - 1 
and Ωt - 1, respectively. We name this algorithm DM-C, and more pre-
cisely DM-C LT (under LT model) and DM-C IC (under IC model). This 
approach is 1.5 times faster and more precise in detecting changes than 
our previous approach, thus detecting new paths. The parts that change 
in the previous approach are shown in Algorithm 3 (DM-C LT) and Al-
gorithm 4 (DM-C IC), while steps 6–16 and steps 6–15, respectively, 
remain the same:  
Algorithm 3: DM-C LT 
1 
Input: G0, k, T ⊳k = number of seed nodes, T = max time-step 
2 
Initialize: St = 0,∀t = 1, 2,...,T 
3 
for t = 0 to T do 
4 
if t == 0 then 
5a 
Apply k-core decomposition 
5b 
Calculate coreness (Gt) 
5c 
Hierarch nodes based on their core number ct(v), v ∈ V 
5d 
Calculate At 
⋮ 
17a 
for each v ∈ V do 
17b 
Update ct(v) to ct+1(v)
17c 
CD = {v ∈ V /ct(v) ∕= ct−1(v)}
17d 
Update Gt to Gt+1 based on CD 
18 
Update At, ​ Ωt based on CD 
19 
return S = {S1,S2,….,SΤ}
Algorithm 4: DM-C IC 
1 
Input: G0, k, T ⊳k = number of seed nodes, T = max time-step 
2 
Initialize: St = 0,∀t = 1, 2,...,T 
3 
for t = 0 to T do 
4 
if t == 0 then 
5a 
Calculate coreness (Gt) 
5b 
Hierarch nodes based on their core number ct(v), v ∈ V 
5c 
Calculate At 
⋮ 
16a 
for each v ∈ V do 
16b 
Update ct(v) to ct+1(v)
16c 
CD = {v ∈ V /ct(v) ∕= ct−1(v)}
16d 
Update Gt to Gt+1 based on CD 
17 
Update At based on CD 
18 
return S = {S1,S2,….,SΤ}
4.3. DM-T: DM truss algorithm 
We also propose DM-T algorithm applying K-truss decomposition - 
an extension of k-core decomposition using triangles - and using the 
information of edge and node’s truss to reduce the computation time of 
our initial algorithms (DM and DM-C). 
Thus, we name these algorithms DM-T LT and DM-T IC, which are 
almost 2 times faster and more precise than our first approach in 
detection of changes, using Theorems 2–3 and our Observations 1–3. 
The parts that change in the previous approach are shown in Algo-
rithm 5 (DM-T LT) and Algorithm 6 (DM-T IC), while steps 6–16 and 
G.I. Smani and V. Megalooikonomou                                                                                                                                                                                                      
Array 15 (2022) 100226
5
steps 6–15, respectively, remain the same:  
Algorithm 5: DM-T LT 
1 
Input: G0, k, T ⊳k = number of seed nodes, T = max time-step 
2 
Initialize: St = 0,∀t = 1, 2,...,T 
3 
for t = 0 to T do 
4 
if t == 0 then 
5a 
Apply K-truss decomposition 
5b 
Hierarch nodes based on their truss number tt(v), v ∈ V 
5c 
Calculate At 
⋮ 
17a 
for each v ∈ V do 
17b 
Update tt(v) to tt+1(v)
17c 
TD = {v ∈ V /tt(v) ∕= tt−1(v)}
17d 
Update Gt to Gt+1 based on TD 
18 
Update At, ​ Ωt based on TD 
19 
return S = {S1,S2,….,SΤ}
Algorithm 6: DM-T IC 
1 
Input: G0, k, T ⊳k = number of seed nodes, T = max time-step 
2 
Initialize: St = 0,∀t = 1, 2,...,T 
3 
for t = 0 to T do 
4 
if t == 0 then 
5a 
Apply K-truss decomposition 
5b 
Hierarch nodes based on their truss number tt(v), v ∈ V 
5c 
Calculate At 
⋮ 
16a 
for each v ∈ V do 
16b 
Update tt(v) to tt+1(v)
16c 
TD = {v ∈ V /tt(v) ∕= tt−1(v)}
16d 
Update Gt to Gt+1 based on TD 
17 
Update At based on TD 
18 
return S = {S1,S2,….,SΤ}
5. Experiments 
5.1. Datasets 
In this section, we show experiments on real-world dynamic net-
works to test the performance of proposed algorithms. The dynamic 
networks we used in the experiments are listed below. The following 
table (Table 2) shows the number of nodes and edges of each dataset. 
5.2. Evaluation 
We compared the performance of the proposed algorithms with the 
following ones:  
- Dynamic Degree Discount [8].  
- Dynamic CI [10].  
- Dynamic RIS [10].  
- Osawa [12].  
- MC Greedy [4]. 
The results of information propagation for different seed sizes k are 
shown in the following figures with fixed threshold θ = 0.1. The x-axis 
shows the size of the seed set, while the y-axis shows the number of 
propagated vertices. Values of x-axis is k
|V|*100, i.e. the percentage of 
seed vertices to all vertices in the network. Values of y-axis is σ(S)
|V| *100, i. 
e. the percentage of influence σ(S) to all vertices in the network. In 
Fig. 3, the comparison of the proposed algorithms for the different 
datasets is shown. Among the proposed methods, DM-T algorithms (DM- 
T LT and DM-T IC) achieve higher propagation than the other ones. 
Specifically, DM-T IC algorithm is better by 15–30% than the rest of 
proposed ones in terms of diffusion. 
As shown in Fig. 4, MC Greedy achieves the highest diffusion in all 
datasets. Diffusion of the proposed methods are inferior by 5% 
compared to MC Greedy, although they are better by 20% than the other 
Table 2 
Datasets.  
Datasets 
Description 
Nodes 
Edges 
EmailEuCore 
The network was generated 
using email data from a 
large European research 
institution. The e-mails 
represent communication 
only between institution 
members and not with the 
rest of the world. A directed 
edge (u, v, t) means that 
person u sent an email to 
person v at time t [24]. 
986 
12216 
(Temporal), 
24929 (Static) 
Email-dnc 
This is the directed network 
of emails in the 2015 
Democratic National 
Committee email leak. A 
directed edge in the dataset 
denotes that a person has 
sent an email to another 
person [23]. 
92 
9800 
High school 
dynamic 
contact 
network 
These datasets contain the 
temporal network of 
contacts between students 
in a high school in 
Marseilles, France. In case of 
multiple active contacts in a 
given interval, multiple 
lines start with the same 
value of t which is measured 
in seconds [25]. 
327 
188,508 
Primary school 
temporal 
network data 
This dataset contains the 
temporal network of 
contacts between the 
children and teachers. In 
case of multiple active 
contacts in a given interval, 
multiple lines start with the 
same value of t which is 
measured in seconds [25]. 
242 
125,775 
Hospital ward 
dynamic 
contact 
network 
This dataset contains the 
temporal network of 
contacts between patients 
(29), patients and health- 
care workers (HCWs) and 
among HCWs (49) in a 
hospital ward in Lyon, 
France. In case of multiple 
active contacts in a given 
interval, multiple lines start 
with the same value of t 
which is measured in 
seconds [25]. 
75 
32,424 
CollegeMsg 
This dataset is comprised of 
private messages sent on an 
online social network at the 
University of California, 
Irvine. Users could search 
the network for others and 
then initiate conversation 
based on profile 
information. An edge (u, v, 
t) means that user u sent a 
private message to user v at 
time t [24]. 
1899 
59835 
(Temporal), 
20296(Static) 
WikiTalk 
This is a temporal network 
representing Wikipedia 
users editing each other’s 
Talk page. A directed edge 
(u, v, t) means that user u 
edited user v’s talk page at 
time t [24]. 
1,140,149 
7,833,140 
(Temporal), 
3,309,592 
(Static)  
G.I. Smani and V. Megalooikonomou                                                                                                                                                                                                      
Array 15 (2022) 100226
6
Fig. 3. Comparison of the proposed algorithms DM, DM-C, DM-T in terms of % of infected nodes with varying seed size for different datasets (a) EmailDnc, (b) 
EmailEuCore, (c) CollegeMsg, (d) WikiTalk, (e) Primary School, (f) High School, (g) Hospital. 
G.I. Smani and V. Megalooikonomou                                                                                                                                                                                                      
Array 15 (2022) 100226
7
Fig. 4. Comparison in terms of % of infected nodes with varying seed size for different datasets (a) EmailDnc, (b) EmailEuCore, (c) CollegeMsg, (d) WikiTalk, (e) 
Primary School, (f) High School, (g) Hospital. 
G.I. Smani and V. Megalooikonomou                                                                                                                                                                                                      
Array 15 (2022) 100226
8
Fig. 5. Comparison of computation time when the seed size k changes for different datasets: (a) Email dnc, (b) EmailEuCore, (c) CollegeMsg, (d) WikiTalk, (e) 
Primary School, (f) High School, (g) Hospital. 
G.I. Smani and V. Megalooikonomou                                                                                                                                                                                                      
Array 15 (2022) 100226
9
ones (Dynamic Degree Discount, Dynamic CI, Dynamic RIS, Osawa). 
Fig. 5 presents the computational time that is needed for θ set to 0.1 
and for varying seed sizes. X-axis shows the size of seed vertices, and y- 
axis shows the computational time in log-scale. 
Fig. 5 shows that for all datasets MC Greedy needs several hours to 
compute seed vertices, while all other methods including the proposed 
ones can compute seed vertices in several minutes. This shows that MC 
Greedy is intractable in realistic time for large scale networks. The 
computational time of proposed methods DM-C LT and DM-C IC is about 
the same for the Primary School dataset. Similarly, for proposed 
methods DM-T LT and DM-T IC on the Primary School dataset. 
Compared with the proposed methods, Dynamic RIS and Dynamic De-
gree Discount, except for the Primary School dataset - where Dynamic 
RIS is faster – and the Hospital dataset - where Dynamic Degree Discount 
and DM-C IC are almost the same – DM-C IC is faster than those or the 
same. Note that DM-T IC is faster in all the datasets. 
6. Conclusion and future work 
We proposed DM, DM-C and DM-T – three new methods for the in-
fluence maximization problem on dynamic networks which extend 
methods for static networks. Based on the experiments performed for 
comparing with previous methods, the proposed methods perform bet-
ter than the state of the art methods in terms of diffusion, except for MC 
Greedy which achieves better diffusion. As compared to MC Greedy, our 
methods are 8.5 times faster. In future work, we plan to investigate the 
case of partially observed dynamic graphs. In addition, we plan to study 
the Influence Maximization Problem in Dynamic Networks using models 
other than LT and IC. 
Credit author statement 
G.I.Smani: Conceptualization, Methodology, Data curation, Writing 
– original draft preparation, Validation, Writing- Reviewing and Editing. 
V. Megalooikonomou: Supervision. 
Declaration of competing interest 
The authors declare that they have no known competing financial 
interests or personal relationships that could have appeared to influence 
the work reported in this paper. 
References 
[1] Borgs C, Brautbar M, Chayes J, Lucier B. Maximizing social influence in nearly 
optimal time. In: SODA; 2014. p. 946–57. 
[2] Cai T, Li J, Mian A, Li R-H, Sellis T, Yu JX. Target-Aware holistic influence 
maximization in spatial social networks. 4. In: IEEE transactions on knowledge and 
data engineering, vol. 34; 2022. p. 1993–2007. https://doi.org/10.1109/ 
TKDE.2020.3003047. 1 April. 
[3] Chen S, Wang C, Wang Y. Scalable influence maximization for prevalent viral 
marketing in large-scale social networks. In: Proceedings of the 16th ACM SIGKDD 
international conference on knowledge discovery and data mining -KDD 2010; 
2010. p. 1029–38. 
[4] Chen S, Wang Y, Yang Y. Efficient influence maximization in social networks. In: 
Proceedings of the 15th ACM SIGKDD international conference on knowledge 
discovery and data mining -KDD 2009; 2009. p. 199–207. 
[5] Goyal A, Lu W, Lakshmanan VS. SIMPATH: an efficient algorithm for influence 
maximization under the linear Threshold model. In: ICDM; 2011. 
[6] Habiba CT, Berger-Wolf TY. Maximizing the extent of spread in a dynamic 
network. 2007. DIMACS Technical Report. 
[7] Jakkula VR, Karypis G. Streaming and batch Algorithms for truss decomposition. 
In: 2019 first international conference on graph computing (GC); 2019. p. 51–9. 
https://doi.org/10.1109/GC46384.2019.00016. Laguna Hills, CA, USA. 
[8] Kempe D, Kleinberg J, Tardos E. Maximizing the spread of influence through a 
social network. In: KDD; 2003. p. 137–46. 
[9] Li G, Chen S, Feng J, Tan K-L, Li W-S. Efficient location-aware influence 
maximization. In: SIGMOD; 2014. p. 87–98. 
[10] Li H, Bhowmick SS, Sun A, Cui J. Conformity-aware influence maximization in 
online social networks. VLDB J 2015;24(1):117–41. 
[11] Li Y, Zhang D, Tan K-L. Real-time targeted influence maximization for online 
advertisements. PVLDB 2015;8(10):1070–81. 
[12] Murata T, Koga H. Extended methods for influence maximization in dynamic 
networks. Comput Soc Netw 2018;5:8. 
[13] Nguyen HT, Thai MT, Dinh TN. Stop-and-stare: optimal sampling algorithms for 
viral marketing in billion-scale networks. In: SIGMOD; 2016. p. 695–710. 
[14] Osawa S, Murata T. Selecting seed nodes for influence maximization in dynamic 
networks. In: Proceedings of the 6th workshop on complex networks (CompleNet 
2015), studies in computational intelligence. Berlin: Springer; 2015. p. 91–8. 
[15] Li Rong-Hua, Jeffrey Xu Yu, Mao Rui. Efficient core maintenance in large dynamic 
graphs. In: IEEE transactions on knowledge and data engineering, vol. 26; 2014. 
p. 2453–65. 10. 
[16] Rossi M, Shi B, Tziortziotis N, Malliaros F, Giatsidis C, Vazirgiannis M. MATI: an 
efficient algorithm for influence maximization in social networks. PLoS One 2018. 
https://doi.org/10.1371/journal.pone.0206318. doiQ 13. 1. 
[17] Smani GI, Megalooikonomou V. Influence maximization in dynamic social 
networks and graphs, ICSNAM 2022: 16. In: International conference on social 
network analysis and mining june 02-03; 2022. Rome, Italy. 
[18] Song X., Li J., Lei Q., Zhao W., Chen Y., and Mian A., Bi-CLKT: Bi-graph contrastive 
learning based knowledge tracing. Know Based Syst 241, 2022. 
[19] Tang Y, Shi Y, Xiao X. Influence maximization in near-linear time: a martingale 
approach. In: SIGMOD; 2015. p. 1539–54. 
[20] Tang Y, Xiao X, Shi Y. Influence maximization: near-optimal time complexity meets 
practical efficiency. In: SIGMOD; 2014. p. 75–86. 
[21] Wang X, Zhang Y, Zhang W, Lin X. Distance-aware influence maximization in geo- 
social network. In: ICDE; 2016. p. 1–12. 
[22] Xue G, Zhong M, Li J, Chen C, Kong R. Dynamic network embedding survey. 
Neurocomputing 2022;472:213–23. 
[23] http://networkrepository.com. 
[24] https://snap.stanford.edu/data. 
[25] http://www.sociopatterns.org. 
G.I. Smani and V. Megalooikonomou                                                                                                                                                                                                      
