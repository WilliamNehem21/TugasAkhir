 AASRI Procedia  5 ( 2013 )  177 – 182 
2212-6716 © 2013 The Authors. Published by Elsevier B.V.
Selection and/or peer review under responsibility of American Applied Science Research Institute
doi: 10.1016/j.aasri.2013.10.075 
ScienceDirect
 
2013 AASRI Conference on Parallel and Distributed Computing and Systems 
A New Recursive Decomposition Algorithm to Calculate 
IMDCT 
Hui Lia,*,Yiwen Wanga, Ping Lia, Yunyi Lia 
a,State key Laboratory of Electronic Thin Films and Integrated Devices,University of Electronic Science& Technology of China,Chengdu 
( 610054), China 
 
Abstract 
A new decomposition method to calculate IMDCT is proposed in this paper. The decomposition algorithm can convert a 
pair of long transforms into 2 pairs of short transforms with half size of the long transforms. In addition, the 
decomposition algorithm can be utilized recursively to attain shorter transforms and reduce computational cycles.  
According to experimental results obtained previously, the number of computational cycles of 512-point IMDCT is 
estimated to be 9641, which is less than those in previous reports. 
 
© 2013. Published by Elsevier B.V. 
Selection and/or peer review under responsibility of American Applied Science Research Institute 
 
Keywords: IMDCT; DCT-IV/DST-IV; TDAC 
1. Introduction 
MDCT and IMDCT have been utilized to implement TDAC [1] in many standards. Because calculating 
MDCT/IMDCT requires much time, it is necessary to find efficient methods and simple structures for the task.  
To reduce area cost, the regressive methods and architectures were researched [2-6]. Allowing for VLSI 
implementation, the methods proposed in [2,3] are same efficient. But the architecture in [2] has a latch more. 
The method in [4] reduces about 7 eighths of computational time compared with ones in [2,3] by virtues of 
 
* Corresponding author. Tel.: +86-28-83206813; fax: +86-28-83208839. 
E-mail address: huili@uestc.edu.cn 
Available online at www.sciencedirect.com
© 2013 The Authors. Published by Elsevier B.V.
Selection and/or peer review under responsibility of American Applied Science Research Institute
Open access under CC BY-NC-ND license.
Open access under CC BY-NC-ND license.
178  
 Hui Li et al. /  AASRI Procedia  5 ( 2013 )  177 – 182 
 
low latency of IDCT-II and IMDCT’s symmetry. In contrast with the method in [4], our factorization method 
have the virtues of less computational cycles and smaller structure [5]. Absorbing virtues of the algorithm in  
[4] and [5], our recent proposed algorithm [6] possesses smaller accelerator and less computational cycles in 
contrast to [5].  
A new decomposition method to calculate IMDCT is proposed in this paper. The work presented in this 
paper results from the method in [5]. Its aim is to further develop the algorithm in [5] and increase the 
computational efficiency for IMDCT computation. The core idea is to recursively decompose a pair of long 
transforms into 2 pairs of short transforms with half size of the long transforms. The detailed derivation of 
algorithm is proposed in section II. Conclusion is presented in Section III. 
2. Decomposition algorithm of IMDCT 
2.1. Obtaining two M/4-point transforms from one M-point IMDCT 
The equation of M-point IMDCT is expressed as  
     
2
/ 2 1
0
2
1
2
1
( )
( )cos
2
M
M
k
m
j
x m
X j
M
 ,         for m = 0,…, M
1.                 (1) 
 M is a multiple of 16 in this paper.   
Three sequences are defined as 
/4 ,
/4,
,
1,
( )
+3
/4 ,
0,
,
/4 1,
x m
M
for m
M
M
y m
x m
M
for m
M
                                               (2) 
'( )
(2 )
y m
y
m
                  for m=M/4-1,                                                      (3) 
''( )
(2
1),
y m
y
m
             for m=M/4-1.                                                      (4) 
We can further derive  
/ 2 1
(0)
0
( )
( ) ( )
cos[(2
1)(2
1) /
]
M
cc
M
j
z
m
X j C j
m
j
M ,                                         (5) 
      
/ 2 1
(0)
0
( )
( ) ( )
sin[(2
1)(2
1) /
]
M
cs
M
j
z
m
X j S j
m
j
M  ,                                       (6) 
where 
(0)
(0)
'
"
( )
[ ( )
( )]/2,
0,
,
/2 1,
'
"
( )
[ ( )
( )]/2
0,
,
/2 1,
( )
cos{[2
1]/[2
]} ,
0,
,
/2 1,
( )
sin{[2
1]/[2
]} ,
0,
,
/2 1.
cc
cs
M
M
z
m
y m
y m
m
M
z
m
y m
y m
m
M
C j
j
M
j
M
S j
j
M
j
M
                                       (7) 
From (3),(4), (7), we have 
 
(0)
(0)
(2 )
( )
( )
cc
cs
y
m
z
m
z
m
,                                                 (8) 
(0)
(0)
(2 +1)
( )
( )
cc
cs
y
m
z
m
z
m
,                                               (9) 
where m ranges from 0 to M/4 -1. Thus, the two M/4-point transforms (
zcc ( )(0)
m
and 
zcs ( )(0)
m
) are used to 
calculate the M-point IMDCT.  
179
 Hui Li et al. /  AASRI Procedia  5 ( 2013 )  177 – 182 
 
2.2. Decomposing two M/4-point transforms into four M/8-point transforms 
The two M/4-point transforms presented in part A will be decomposed into four M/8-point transforms in 
this part. Then, the four M/8-point transforms will be recombined to get four new M/8-point transforms. And 
the relation between the transforms and ( )
y m  is given. The derivation is as follows. Let 
                    
( )(0)
( ) ( )
cc
M
Z
j
X j C j
,                                                                (10) 
                    
( )(0)
( ) ( )
cs
M
Z
j
X j S j
.                                                                 (11) 
Dealing with equations (5),(6),(7),(10) and (11) elaborately, we derive 
/ 2 1
(1)
(0)
/ 2
0
( )
( )
( )
cos{[2
1][2
1] /[
/2]},
M
cc
cc
M
j
z
m
Z
j
C j
m
j
M
                            (12) 
/ 2 1
(1)
(0)
/ 2
0
( )
( )
( )
sin{[2
1][2
1] /[
/2]},
M
cs
cc
M
j
z
m
Z
j
S j
m
j
M
                            (13) 
(0)
(1)
(1)
(2 )
( )
( ) ,
0,
,
/8 1;
cc
cc
cs
z
m
z
m
z
m
for m
M
                                    (14) 
(0)
(1)
(1)
(2 +1)
( )
( ) ,
0,
,
/8 1;
cc
cc
cs
z
m
z
m
z
m
for m
M
                                 (15) 
and 
   
/ 2 1
(1)
(0)
/ 2
0
( )
( )
( )
sin{[2
1][2
1] /[
/2]},
M
ss
cs
M
j
z
m
Z
j
C j
m
j
M
                             (16) 
              
/ 2 1
(1)
(0)
/ 2
0
( )
( )
( )
cos{[2
1][2
1] /[
/2]},
M
sc
cs
M
j
z
m
Z
j
S j
m
j
M
                            (17) 
                   
(0)
(1)
(1)
(2 )
( )
( ) ,
0,
,
/8 1;
cs
ss
sc
z
m
z
m
z
m
for m
M
                                     (18) 
 
(0)
(1)
(1)
(2 +1)
( )
( ) ,
0,
,
/8 1;
cs
ss
sc
z
m
z
m
z
m
for m
M
                                  (19) 
Based on the above derivation, computing two M/4-point transforms (equations (9) (10)) is changed into 
computing four M/8-point transforms(equations (12)(13)(16)(17)) .The relation between 
y(m)
m 
=0,1,…,M/2-1
and 
zcc ( )(1)
m
,
zcs ( )(1)
m
,
zss ( )(1)
m
,
zsc( )(1)
m
m =0,1,…,M/8-1
 is given as follows. 
From equations (8),(9), (14),(15), (18) and (19) we have 
                 
(1)
1
(1)
1
(4 )
[
( )
( )
] [
( )
( )
]
sc
ss
cc
cs
y
m
z
m
z
m
z
m
z
m
,      m = 0, … , M/8 –1,              (20) 
             
(1)
1
(1)
1
(4 +3)
[
( )
( )
] [
( )
( )
]
sc
ss
cc
cs
y
m
z
m
z
m
z
m
z
m
,      m = 0, … , M/8 –1,             (21) 
            
(1)
1
(1)
1
(4 +1)
[
( )
( )
] [
( )
( )
]
sc
ss
cc
cs
y
m
z
m
z
m
z
m
z
m
,      m = 0, … , M/8 –1,             (22) 
(1)
1
(1)
1
(4 +2)
[
( )
( )
] [
( )
( )
]
sc
ss
cc
cs
y
m
z
m
z
m
z
m
z
m
,      m = 0, … , M/8 –1.             (23) 
Based on equations  (12),(13),(16) and (17), equations (20),(21),(22) and (23) can be further changed into 
   
0
0
(1)
(1)
(4 )
c
s
y
m
z
m
z
m
,        m = 0 , … , M/8 –1,                            (24) 
0
0
(1)
(1)
(4 +3)
c
s
y
m
z
m
z
m
,        m = 0 , … , M/8 –1,                            (25) 
1
1
(1)
(1)
(4 +1)
c
s
y
m
z
m
z
m
,        m = 0 , … , M/8 –1,                            (26) 
1
1
(1)
(1)
(4 +2)
c
s
y
m
z
m
z
m
,         m = 0 , … , M/8 –1.                           (27) 
while 
                     
0
0
(1)
(1)
/ 2 1
0
cos{[2
1][2
1] /[
/2]}
c
c
M
j
z
m
Z
j
m
j
M
,  m = 0 , … , M/8 –1,             (28) 
180  
 Hui Li et al. /  AASRI Procedia  5 ( 2013 )  177 – 182 
 
0
0
(1)
(1)
/ 2 1
0
sin{[2
1][2
1] /[
/2]}
s
s
M
j
z
m
Z
j
m
j
M
,  m = 0 , … , M/8 –1,              (29) 
1
1
(1)
(1)
/ 2 1
0
cos{[2
1][2
1] /[
/2]}
c
c
M
j
z
m
Z
j
m
j
M
,  m = 0 , … , M/8 –1,             (30) 
1
1
(1)
(1)
/ 2 1
0
sin{[2
1][2
1] /[
/2]}
s
s
M
j
z
m
Z
j
m
j
M
,  m = 0 , … , M/8 –1.             (31) 
and 
0
(1)
(0)
(0)
/ 2
/ 2
( )
( )
c
cc
cs
M
M
Z
j
Z
j
C j
Z
j
S j
,                                     (32) 
0
(1)
(0)
(0)
/ 2
/ 2
( )
+
( )
s
cc
cs
M
M
Z
j
Z
j
S j
Z
j
C j
,                                     (33) 
1
(1)
(0)
(0)
/ 2
/ 2
( )
+
( )
c
cc
cs
M
M
Z
j
Z
j
C j
Z
j
S j
 ,                                     (34) 
1
(1)
(0)
(0)
/ 2
/ 2
( )
( )
s
cc
cs
M
M
Z
j
Z
j
S j
Z
j
C j
  .                                    (35) 
Equations (28)(29)(30)(31) are four new M/8-point transforms. From equations (20)(21)(22)(23) and 
equations (24)(25)(26)(27) , we can see that  [ ]
y m  is expressed as sum of 4 items using M/8-point transforms 
(equations (12)(13)(16)(17) ) whereas sum of 2 items using new M/8-point transforms (equations 
(28)(29)(30)(31) ).   That is to say,  using new M/8-point transforms can decrease computational complexity.   
Fig.1. is presented to clarify the relation among [ ]
y m
m =0,1,…,M/2-1
and two M/4-point transforms 
and four new M/8-point transforms. The box of M/4-point SUM0 corresponds with equations (8) and the box 
of M/4-point SUB0 corresponds with equations (9). The four boxes in right column correspond with equations 
(24)-(27). 
 
Fig. 1. relation among ( )
y m  and M/4-point transforms and M/8-point transforms 
2.3. Conversion to DCT-IV/DST-IV 
To reduce the computational cycles, equations (28) (29) (30) (31) are changed into two pairs of M/8-point 
DCT-IV/DST-IV as 
         
0
0
(1)
(2)
/8 1
0
cos{[2
1][2
1] /[
/2]}
c
c
M
j
z
m
Z
j
m
j
M
,   m = 0 , … , M/8 –1                          (36) 
0
0
(1)
(2)
/8 1
0
sin{[2
1][2
1] /[
/2]}
s
s
M
j
z
m
Z
j
m
j
M
m = 0 , … , M/8 –1                          (37) 
181
 Hui Li et al. /  AASRI Procedia  5 ( 2013 )  177 – 182 
 
1
1
(1)
(2)
/8 1
0
cos{[2
1][2
1] /[
/2]}
c
c
M
j
z
m
Z
j
m
j
M
m = 0 , … , M/8 –1                          (38) 
1
1
(1)
(2)
/8 1
0
sin{[2
1][2
1] /[
/2]}
s
s
M
j
z
m
Z
j
m
j
M
m = 0 , … , M/8 –1                          (39) 
while     
0
0
0
0
0
(2)
(1)
(1)
(1)
(1)
+
/2 1
/4 1
/4+
c
c
c
c
c
Z
j
Z
j
Z
M
j
Z
M
j
Z
M
j
                                   (40) 
0
0
0
0
0
(2)
(1)
(1)
(1)
(1)
/2 1
+
/4 1
/4+
s
s
s
s
s
Z
j
Z
j
Z
M
j
Z
M
j
Z
M
j
                                   (41) 
1
1
1
1
1
(2)
(1)
(1)
(1)
(1)
+
/2 1
/4 1
/4+
c
c
c
c
c
Z
j
Z
j
Z
M
j
Z
M
j
Z
M
j
                                   (42) 
1
1
1
1
1
(2)
(1)
(1)
(1)
(1)
/2 1
+
/4 1
/4+
s
s
s
s
s
Z
j
Z
j
Z
M
j
Z
M
j
Z
M
j
.                                  (43) 
By using equations (32)-(35), (10) and (11), 
0
(2)
Zc
j
, 
0
(2)
Zs
j
, 
1
(2)
Zc
j
, 
1
(2)
Zs
j
 in equations (40)-(43) 
can be described as functions of X
j  in similar forms as ones in [5]. Equations (24)-(27), (36)-(39) have 
similar correspondences in [5] too. Therefore, there are similar computational cycles as [5] using equations 
(24)-(27), (36)-(39) to compute IMDCT.  But the decomposition algorithm from two M/4-point transforms to 
four M/8-point transforms in part B, section II can be used recursively to get eight M/16-point transforms. 
After that, Equations (36)-(39) will become four pairs of M/16-point DCT-IV/DST-IV and computational 
cycles are reduced by 50%. Equations (40)-(43) will be in the form of eight items’ sum instead of four items’ 
sum and computational cycles are approximately doubled. Namely, the cycles to calculate 512-point IMDCT 
are approximately 9641 from the experimental results of [5]. Therefore, the presented decomposition 
algorithm can reduce computational cycles of IMDCT compared with 12153 in [5] and 9718 in [6]. 
3. Conclusion 
A new decomposition method to calculate IMDCT is proposed in this paper. The decomposition algorithm 
can convert a pair of long transforms into 2 pairs of short transforms with half size of the long transforms. In 
addition, the decomposition algorithm can be utilized recursively to attain shorter transforms and reduce 
computational cycles. Based on the previous experimental results, the number of computational cycles of 512-
point IMDCT is estimated to be 9641, which is less than 12153 in [5] and 9718 in [6]. The detailed number of 
computational cycles will be evaluated in future experiments. 
Acknowledgements 
The research work reported in this paper is supported by “the Fundamental Research Funds for the Central 
Universities” (Project Code: ZYGX2012J040). 
References 
[1] J. P. Princen and A. B. Bradley, Analysis/synthesis filter bank designs based on time domain aliasing 
cancellation, IEEE Trans. Acoust. Speech Signal Process. 1986;34: 1153-1161. 
[2] H. C. Chiang and J. C. Liu, Regressive implementation for the forward and inverse MDCT in MPEG 
audio coding, IEEE Signal Process. Lett. 1996; 4: 116-118. 
[3] V. Nikolajevic and G. Fettweis, Computation of forward and inverse MDCT using Clenshaw’s recurrence 
formula, IEEE Trans. Signal Process. 2003; 5: 1439-1444. 
182  
 Hui Li et al. /  AASRI Procedia  5 ( 2013 )  177 – 182 
 
[4] C. H. Chen, B. D. Liu and J. F. Yang, Recursive architectures for realizing modified discrete cosine 
transform and its inverse, IEEE Trans. Circuits Systems-II: Analog Digital Process. 2003; 1: 38-45. 
[5] H. Li, P. Li, Y. Wang, et al, A New Decomposition Algorithm of DCT-IV DST-IV for Realizing Fast 
IMDCT Computation, IEEE Signal Process. Lett. 2009; 9: 735-738. 
[6] H. Li, P. Li, Y. Wang, An efficient hardware accelerator architecture for implementing fast IMDCT 
computation, Signal Process. 2012; 8: 2540-1545. 
