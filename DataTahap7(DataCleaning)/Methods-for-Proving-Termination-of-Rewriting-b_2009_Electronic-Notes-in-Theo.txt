formalized in a proof theoretic manner by means of an inference system rather than just by a rewriting relation. the corresponding termination notions can also differ from the standard ones. during the last years we have introduced and implemented different notions and transformation techniques which have been proved useful for proving and disproving termination of such programs by using existing tools for proving termination of(variants of) rewriting. in this paper we provide an overview of our main contributions.



this program(where list concatenation is expressed with empty syntax and satisfies associativity(assoc) and identity(id for nil) axioms) is terminating, that is, given a list of quoted identifiers the specification can always be used to compute in a finite number of steps whether it is a palindrome, i.e., has sort pal, or not. but note that no rewriting at all is involved.



provides an interesting example of a nonterminating program involving no rewrite rule(borrowed from[11, introduction]). here, a conditional membership establishes that terms s(n)(for terms n of sort nat) have sort inf provided that s(s(n)) has sort inf too. again, no rewritings are specified here.



and also the association of a sort discipline to the arguments of symbols and terms built from them), context-sensitivity, etc., can play a crucial role in the termination behavior and hence in any attempt to provide an automatic proof of it. for instance, lengthoffinitelistsandtake is terminating. however,



what these examples show, most strikingly the palindrome, inf, and inf2 specifications, is that termination of a declarative program may not involve rewriting at all, or, as in the case of inf2, may involve both rewriting and other computational relations. thus, the standard(rewriting-based) termination notions that have been developed for rewriting-based programming languages, including those for ctrss, are insufficient for dealing with termination of mel or rewriting logic programs. for this reason, we use in this paper a proof-theoretic termination notion, called operational termination. this notion is parametric on the logic: it can be defined not just for mel, but for many other logics, that may or may not involve rewriting in their computations. intuitively, a program is operationally terminating if all its well-formed proof trees are finite. for example, the nontermination of the



we consider a logic l defined by inference rules, parameterized by a theory s. that is, we focus on provability, and assume the axiomatic framework of general logics, in which what we call a logic becomes a particular style of presenting an entailment system. we refer to for a more detailed account of the axiomatic metalogical background that we assume in what follows. the notion of operational termination is parametric on the inference system. we briefly recall the notions we need for our purpose.



memberships may be intrinsically needed to determine whether a term has that sort. all other sorts are called order-sorted sorts. while membership of a term in an order-sorted sort can be determined syntactically by the exclusive use of an order-sorted parsing algorithm, membership of a term in a membership sort cannot be so determined; it is instead axiomatized in the transformed theory by adding to its signature new truth-valued predicates for each membership sort that return tt when applied to a term in the transformed theory if and only if that term has that sort in the original theory.



