model-based testing has been proposed as a technique to automatically verify that a system conforms to its specification. a popular approach is to use a model-checker to produce a set of test cases by formulating the test generation problem as a reachability problem. to guide the selection of test cases, a coverage criterion is often used. a coverage criterion can be seen as a set of items to be covered, called coverage items. we propose an on-the-fly algorithm that generates a test suite that covers all feasible coverage items. the algorithm returns a set of traces that includes a path fulfilling each item, without including redundant paths. the reachability algorithm explores a state only if it might increase the total coverage. the decision is global in the sense that it does not only regard each individual local search branch in isolation, but the total coverage in all branches together. for simpler coverage criteria as location of edge coverage, this implies that each model state is never explored twice.



according to a test specification, and the responses of the system are checked to conform to its specification. to reduce the costs of this process, the execution of software testing is often automated, whereas the production of test suites are mostly done by hand. techniques to automatically generate test suites, or to combine generation and execution, are emerging and getting more mature[31,9,28,19].



used in this paper, and review techniques for test case generation based on reachability analysis. in section 3 we describe a reachability analysis algorithm for test case generation. in section 4 we present a novel algorithm for test case generation that uses global information about the generated state-space to determine termination and pruning. in section 5 we describe the results of experiments comparing the different techniques. the paper ends with conclusions in section 6.



in, hong et al show how several flow-based coverage criteria can be expressed in temporal logic and how the test case generation problem can be solved by modelchecking. hong and ural continue this work and study how coverage items can subsume each other, and propose a solution to the problem. these works use an existing ctl model-checker to solve the test case generation problem, whereas we propose a specialized algorithm for test case generation.



our work is also related to directed model-checking techniques, where statespace exploration is guided by the property to be checked. in, the authors use a bitstate hashing based iterated search refinement method to guide a model-checker to generate test cases. this method can be seen as a meta algorithm using an existing model-checker iteratively. thus the actual model-checking algorithms is not refined for test case generation.



we will present ideas and algorithms for test case generation applicable to several automata based models, such as finite state machines, extended finite state machines(efsm) as, e.g., sdl, or timed automata. throughout this paper, we shall present our results using the model of communicating efsms.



we will focus the presentation on generating test suites with a certain coverage in a cefsm. coverage criteria are often used by testing engineers to specify how thorough a test suite should test a system under test. examples of coverage criteria used in model-based testing include structural criteria such as location or edge coverage, data-flow properties such as definition-use pair coverage, and semantic coverage on, e.g., states of an efsm or the time regions of a timed automata[28,30]. a coverage criterion typically consists of a list of items to be covered or reached. we shall call those items coverage items, and use c to denote a set of coverage items, c0 the initial c, and|c| to denote the size of c.



the rows marked train e 6(0) show performance for the train gate model with the edge coverage criterion on the instances of the train automaton. there are six coverage items to be covered, with zero partial coverage items. the global algorithm generates 1645 states which is the size of the model. the local algorithm generates 3353 or 7375 states without and with resets, respectively.



for the rows train du 12(5) the definition-use criterion has been used. there are 12 different coverage criteria and five partial coverage items. the size of the generated state space of the global algorithm increases(due to the partial coverage items) modestly to 1717(+4.3% compared with the actual size of the model state space). for the local algorithm this increase is from 3357 states to 27129(or 114697 when resets are used). we note that the global algorithm performs substantially better than the local algorithms. in fact, it generates only 6%(or 2%) of the states used by the local algorithm(s). the gain in execution time is similar.



in this paper, we have studied algorithms and ideas for test suite generation applicable to automata models with semantics defined as a(finite) transition system. we have reviewed algorithms derived from ordinary reachability analysis algorithm, similar to those used in many model-checking and planning tools. such algorithms can be used to generate test suites that follow a given coverage criterion and are optimal in e.g, the total number of model transitions the test suite will exercise. we have further elaborated these algorithms by adopting existing abstraction and pruning techniques often used in model-checking algorithms.



