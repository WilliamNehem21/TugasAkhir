we present a context-based approach to proving termination of evaluation in reduction semantics(i.e., a form of operational semantics with explicit representation of reduction contexts), using tait-style reducibility predicates defined on both terms and contexts. we consider the simply typed lambda calculus as well as its extension with abortive control operators for first-class continuations under the call-by-value and the



because of their close relation to continuations, the benefits of using contexts can be seen perhaps most prominently in languages with control operators, i.e., syntactic constructs that manipulate the current continuation/context. moreover, as shown by wright and felleisen, context-based reduction semantics of a programming language provide a convenient formalism for expressing and proving type soundness properties.



and the syntax of reduction contexts depends on the strategy we choose for reduction(in fact, the grammar of reduction contexts reflects the reduction strategy). because of that, we postpone the actual definitions of reduction contexts for call by value and call by name to section 2.2 and section 2.3, respectively.



we define the set of free and bound variables in a term in the usual way, and we distinguish closed terms, i.e., terms with no free variables. as is also standard, we identify terms that differ only in the names of their bound variables.



in the standard approach, the reducibility predicate on well-typed terms expresses the property that whenever a reducible term is applied to another reducible term of the right type, the resulting term has also this property. moreover, if a term is reducible, then it normalizes. the proof of termination consists in showing that all well-typed terms are reducible, from which it follows that all well-typed terms normalize.



proof. it is straightforward to see that the empty context satisfies ccont a for any type a. from lemma 2.4 it follows that if we take a closed well-typed term t and put it in the empty context, then the resulting program evaluates to a value program.



though it is impossible to prove a stronger type soundness property in the general case, we can obtain such a property if we consider only plain programs. as we will see, plain programs can be shown to satisfy the strong type soundness property stating that the type of a plain program and of its final value are the same, which in general is sufficiently strong and together with the termination theorem of section 3.1.3 ensures that any well-typed plain program evaluates to a unique value of the same type. however, even in the case of plain programs, we cannot hope for a standard subject reduction property of our type system, since, in the course of computation, contexts get captured and are substituted for continuation variables, which leads to non-plain programs.



we shall prove strong type soundness for the above type system by relating it to a more restrictive one, namely an annotated type system that allows for applications of contexts of one fixed answer type. in the annotated type system the annotation on the turnstyle specifies the type of the entire program, of which the given phrase can be a part. only contexts of that answer type are allowed to be captured and applied later on.



our goal in this section is to prove termination of call-by-value evaluation of welltyped plain programs(hence, of well-typed plain terms). the logical predicates for the language with callcc are exactly the same as for the simply typed lambda calculus and we state a termination theorem analogous to that of section 2.2.3.



analogously to the call-by-value case, it can be shown that the plain language with the call-by-name reduction strategy satisfies both the weak and strong type soundness properties. moreover, using the logical predicates defined for the simply typed call-by-name lambda calculus in section 2.3.2, we prove termination of callby-name evaluation for the language augmented with callcc.



it is easy to see that the presented typing rules for a and c are too liberal to ensure type preservation by reduction(because of the completely unconstrained type b in the premises). so even though the evaluation in the simply typed language with a and/or c always terminates, the type of the program may change in the course of computation. if we wanted to ensure type preservation under the given reduction rules(which are standard), we could use a more restrictive type system that is an extension of the annotated type system of section 3.1.2 with the rules: the call-by-value and the call-by-name reduction strategies. we have also presented evaluators extracted from each of the proofs. these evaluators are instances of normalization by evaluation. moreover, they are in continuation-passing style and the continuations arise as the computational content of the reducibility predicates for reduction contexts. this latter fact shows a logical connection between continuations and contexts; the correspondence between them has previously been observed and investigated by danvy in the setting of program transformations[11, 12].



below we present example ocaml implementations of the evaluators from section 3.1.4 and section 3.2. these implementations can be seen as desired effects of a program extraction tool but they have not been obtained in that way(in fact, automatic tools usually produce much less readable code).



