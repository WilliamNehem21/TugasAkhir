ocl is intended to be a formal specification language. it is used for adding precision that uml models lack. its omg standard defines the syntax of the language, and, to some extent, its semantics. however, despite many academic works on ocl(some of which are referenced in the related works section) there is curently no commmercial tool that offers full support for it.



part of the problem is the standard, which is imprecise, incomplete, and flawed in some places. this is common to many languages for which the semantics is informally described in manuals declared as standards(see, e.g., the definition of c). some of these problems include the nondeterministic cast operations from unordered to ordered sets and bags, the question of whether a singleton set{a} and the set element a should be distinct or not(answered differently in different pages of the standard), and issues due to the presence of an invalid value.



the rest of the paper is composed as follows: section 2 provides some background on uml, ocl, and the k framework. in section 3 we present our k definition of ocl and illustrate it on examples. section 4 concludes and discusses related and future work. an online tool implementing our definition is available.



the annotated grammar of our k definition of ocl is shown in appendix a. we currently support the usual integer, real, and boolean expressions(including boolean expressions with quantifiers); strings and concatenation; collection expressions, including navigation, and iterators; and other expressions(e.g., let-in, if-then-else). since the k definitions are modular, we may add new expressions without changing the old ones. note that ocl is an evolving language and the k framework can help in experimenting the new constructs introduced in the language.



hence, expressions of the form a/0 are not reduced by the above rule to a legitimate ocl value(here, an integer). such expressions model the invalid value of the ocl standard. the advantage of our definition with respect to the standard is that we do not need to give explicit rules saying how the invalid value is propagated: expressions that contain an undefined value(i.e., a subexpression that is not reduced to a value) are also undefined, because they are not reduced to a value.



k. one of them is the substitution operator, which is actually implemented in k itself using a visitor pattern. we shall come back to the substitution operator later in this section when we define the semantics of the let-in expression and compare it with the corresponding semantics in the ocl standard. the other k mechanism we use extensively here is the automatic generation of rules that evaluate arguments of strict operators.



related work we have already mentioned the informative annex of the ocl standard. despite its shortcomings, mainly due to numerous typos, the annex is based on solid formal groundset-theoretical foundations. we do not know of formal tools implementing the set-theoretical semantics of the ocl standard.



