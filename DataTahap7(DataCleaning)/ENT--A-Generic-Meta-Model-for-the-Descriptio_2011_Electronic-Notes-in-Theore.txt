current best practice in modeling component-based applications is the use of uml extended by a profile. this solution provides a general and common approach of application description and allows to capture some details based on the concrete component model. it has however disadvantages due to the limitations of uml itself, like little scalability or lack of inherent model semantics. in this paper we propose a solution to overcome these limitations, in the form of a meta-model developed directly for the description of components and component-based applications. its unique aspect is the use of faceted classification to introduce additional semantics and structuring to the derived models. we describe the features and advantages of this meta-model and illustrate its aspects on a model example of a simple osgi application. at the end of paper we also propose the usage of this meta-model in visualization of component-based applications.



the component model-specific description is useful only for the exchange of information between the domain experts of the given component model. the specifics of the particular component model make it difficult to read and understand the architecture of application for experts from different domains. moreover component models often use their own graphic notation(e.g. saveccm), making it hard to read for experts not familiar with it.



a general description of application is on the other hand useful for exchange of information between domains but it provides no details bound to the specifics of concrete component model(s) and thus can only provide shallow understanding of the component-based application. the best example of these general description languages is uml 2.0 and its underlying component model. there are therefore component constructs that are very difficult to model in uml, for example events, which can be important even on component diagram level to show the indirect connections between components.



the area of software composition described in has several common features with our work. the author of this paper is concerned with the creation of generic tool capable of handling different component models used for software composition. the author also uses generic approach and takes advantage of description of component models to achieve the goal of her work.



uml was designed to be a universal and general modeling notation backed by a meta-model, but it also supports extensions that makes it more usable when user need to add some details to the model. uml 2.0 supports extensions through uml profiles, which uses stereotypes, tagged values and constraints. using uml



this level of the ent meta-model provides modeling constructs for concrete components and applications built from them. the component model level has to be already defined because the application level references its elements. these references assign meaning to the application elements; in particular, the set of traits of a concrete component is gained by assigning it the corresponding component type.



some traits and elements could be at particular times considered as unwanted information when reading a model of component-based application. for example, software architects are interested in other information than programmers. by using all information contained in both layers of an ent-based model there could also be a danger of confusion when representing big and complex applications.



the possibilities of grouping and filtering by applying a category set layer over an application model are very rich. since category sets can be defined by user and switched between easily, this is one of the most useful features of the ent metamodel itself. this approach ensures that user see only what he wants to consider at the moment.



advantage of the close relation between a component model and its real components. it provides structures for the description of component types supported by a component model and, more importantly, it groups component surface elements to so called traits that use a custom classification system to capture their human-perceived characteristics. the classification provides enough information to machine interpret the resulting component representations in different ways. the ent meta-model also captures the relations between components and supports hierarchical decomposition of components.



