the most prominent similarity between the ambient calculus and lmntal is that both feature membranes that can be nested. this suggests that any natural encoding from the ambient calculus to lmntal should map ambients into lmntal cells, and we regard this as the boundary condition in designing our encoding. henceforth cells representing ambients are referred to as ambient cells.



next, we define the normal form of a name tree. intuitively, a name tree in a normal form should accord with the underlying ambient hierarchy. let us make this more precise. first, note that an ambient hierarchy forms a tree structure that will be referred to as an ambient tree. a name tree in a normal form must have a root cell at the uppermost node of some connected subgraph of the ambient tree 3, and a proxy cell at each of other nodes of the above connected subgraph.



rules whose names start with proxy_ are to reestablish the normal-form conditions of a name tree structure when the set of names referred to in each ambient is changed by mobility primitives. proxy_enter enables two references to the same name within an ambient to be recognized within that ambient. proxy_resolve merges two serial proxies for the same name in the same ambient. proxy_insert_ middle is activated when in moves two directly connected name cells(root or proxy) to remote places not in a parent-child relation, and inserts a new proxy in between. proxy_insert_outer is activated when out exports some child proxy out of an ambient and inverts the parent-child relationship between proxies, and creates a new proxy at the parent level. proxy_merge_outer is activated when the second parent of a proxy is created(by proxy_insert_outer) and merges the two parents.



it should be noted that name normalization and ambient operations may run concurrently. this means that in, out and open rules may be applied even when name trees are not in their normal forms. however, the three rules also preserve the above-mentioned invariants, and we can allow name tree normalization to proceed asynchronously with ambient operations.



one issue that arises in the encoding of!(open n.p) is that the duplication of p creates new references to the free names of p. duplication of[p]] with free names can be expressed using aggregates. aggregates are the only construct not yet supported in our current implementation, but the lmntal system instead supports an nlmem(nonlinear membrane) api which does the necessary job for our purpose. nlmem.copy({p}, a, r), which is an abbreviated form of(nlmem.copy(r0, a, r),{+r0, p}), creates two copies of the cell{+r0, p} with all its free links renamed, and connects r and the two fresh copies of r0 using a ternary atom with the name a. furthermore, for each free link l except r0 of the original cell{+r0, p}, nlmem.copy connects the two fresh copies of l and the original l via the ternary atom a. the semantics of nlmem.copy can be given by the following rule scheme:



acknowledgments. the author would like to thank the current and former members of the lmntal development team who jointly built our publicly available lmntal implementation. this work is partially supported by grant-in-aid for scientific research((b)(2) 16300009; priority areas(c)(2)13324050,(b)(2)14085205 and 04560009), mext and jsps.



