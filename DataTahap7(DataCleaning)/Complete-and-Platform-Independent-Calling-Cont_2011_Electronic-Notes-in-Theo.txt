calling context profiling collects statistics separately for each calling context. complete calling context profiles that faithfully represent overall program execution are important for a sound analysis of program behavior, which in turn is important for program understanding, reverse engineering, and workload characterization. many existing calling context profilers for java rely on sampling or on incomplete instrumentation techniques, yielding incomplete profiles; others rely on java virtual machine(jvm) modifications or work only with one specific jvm, thus compromising portability. in this paper we present a new calling context profiler for java that reconciles completeness of the collected profiles and full compatibility with any standard jvm. in order to reduce measurement perturbation, our profiler collects platform-independent dynamic metrics, such as the number of method invocations and the number of executed bytecodes. in contrast to prevailing calling context profilers, our tool is able to distinguish between multiple call sites in a method and supports selective profiling of(the dynamic extent of) certain methods. we have evaluate the overhead introduced by our profiler with standard java and scala benchmarks on a range of different jvms.



unlike a context-insensitive dcg, a cct in principle is capable of capturing the complete context of a call. still, ccts generated by state-of-the-art profilers are missing one key bit of information present in the well-known labelled variant of dcgs: information about the individual site at which a call is made. in other words, while keeping track of numerous methods in entire call chains, many calling context profilers are unable to distinguish between multiple call sites within a single method.



there are several variations of the cct supported by our tool. for instance, calls to the same method from different call sites in a caller may be represented by the same node or by different nodes in the cct. moreover, in the case of recursion, the depth of the cct may be unbounded, representing each recursive call to a method by a separate cct node, or alternatively recursive calls might be stored in the same node, limiting the depth of the cct and introducing back-edges into the cct.



in this section we describe the design and the architecture of our tool. first, section 3.1 discusses both the design and the weaknesses of a previous version of the tool. next, section 3.2 presents our new design implemented in the jp2 profiler. finally, section 3.3 explains how jp2 deals with native methods.



jp2 provides a mechanism to temporarily disable the execution of instrumentation code for each thread. assume that instrumentation code itself uses methods from the java class library, which has already been instrumented. this will cause infinite recursions. to sidestep this issue, jp2 uses code duplication within method bodies in order to keep the non-instrumented bytecode version together with the instrumented code, and inserts a conditional upon the method entry in order to select the version to be executed.



the probabilistic calling context(pcc) approach due to bond et al. continuously maintains a probabilistically unique value representing the current calling context. as this value can be efficiently computed, the approach causes rather low overhead, if supported by a customized virtual machine. but due to its probabilistic nature ppc does not always produce completely accurate profiles. recent research, however, has shown that is often possible to reconstruct a significant amount of context offline.



in this paper we presented jp2, a new tool for complete platform-independent calling context profiling. jp2 relies on bytecode transformation technique in order to create ccts with platform-independent dynamic metrics, such as the number of method invocations and the number of executed bytecodes. in contrast to prevailing profilers, jp2 is able to distinguish between multiple call sites in a method and supports selective profiling of certain methods. we have evaluated the overhead caused by jp2 with standard java and scala benchmarks on a range of different jvms.



