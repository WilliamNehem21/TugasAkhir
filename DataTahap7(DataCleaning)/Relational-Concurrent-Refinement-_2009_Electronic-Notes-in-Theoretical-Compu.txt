data refinement in a state-based language such as z is defined using a relational model in terms of the behaviour of abstract programs. downward and upward simulation conditions form a sound and jointly complete methodology to verify relational data refinements. in models of concurrency, refinement takes a number of different forms depending on the exact notion of observation chosen, which can include the events a system is prepared to accept or refuse, or depend on explicit properties of states and transitions. in this paper we continue our program of deriving relational simulation conditions for behavioural notions of refinement by defining embeddings into the relational model that extend our framework to include various notions of automata based refinement.



this paper continues the programme by considering concurrent refinement notions in the context of automata based specification. in section 2 we provide the basic definitions and background. in section 3 we introduced automata and io automata, their refinement notions, and derive their relational simulation rules. we conclude in section 4.



, traditionally received the most attention. the standard refinement theory of z[26,12], for example, is based on this version of the theory. however, later publications by he and hoare, in particular, dropped the restriction to total relations, and proved soundness and joint completeness of the same set of simulation rules in the more general case. de roever and engelhardt also present the partial relations theory, without putting much emphasis on this aspect.



in we showed how different process algebraic preorders can be embedded into the relational model. here we review how this is achieved for the trace preorder which defines refinement as trace inclusion. in the next section, we provide that type of characterisation for each notion of automata refinement.



on the basis of this result, we can extract the simulation rules that correspond to this notion of refinement from the partial relation simulations as applied to this embedding(i.e., without a totalisation in between). these are of course the rules for standard z refinement but omitting applicability of operations, as used also e.g., in event-b. the conditions for a downward simulation in the partial relational model are(c.f. definition 4):



automata offer another perspective on refinement to those given by a process algebra or state-based context. in lynch and vaandrager provide a comprehensive treatment of refinement for automata, defining a number of simulation definitions and results relating them. in this section we describe the relationship between automata based refinement and our relational characterisation, hence answering the question raised in concerning their connection.



io automata are a class of automata that distinguish explicitly between the input and output of a system, and thus share characteristics with both standard automata and state-based languages such as z and b. in such a model the set of actions is partitioned into input and output actions. a particular computational interpretation is taken, viz: output actions are actions initiated by the system, while input actions are under the control of the environment. a system can never refuse to perform its input actions, and its output actions can never be blocked by the environment.



