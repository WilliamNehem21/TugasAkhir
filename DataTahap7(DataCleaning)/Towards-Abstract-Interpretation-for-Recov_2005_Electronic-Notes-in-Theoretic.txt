one technique that can be used for recovering design information is logic meta programming. this technique revolves around the use of logic programming for posing queries on a program. using a library of logic rules that define which high-level relationships between program elements hold under which conditions, a programmer can build an understanding of a program by querying it for such relationships.



we have currently explored how pattern detection rules based on behaviour can be written using an ad-hoc model based on execution trace information. our position for this workshop is that abstract interpretation research can provide a better theoretically-founded model. we wish to receive further feedback from the abstract interpretation community on this position. to provide the necessary background this paper further explains the following: section 2 gives a brief overview of the current lmp approach, section 3 describes a particular design pattern in more detail, sections 4 and 5 respectively contrast the current structural-based pattern detection approach and our proposed novel behavioural-based one and in section 6 we consider the question of how abstract interpretation can be used.



logic meta programming is a technique in which a prolog-like language is used as a meta language for reasoning about object-oriented programs. over the years, it has been applied to a variety of problems in object-oriented software engineering, some examples are: reasoning about object-oriented design[11,10]; checking and enforcing programming patterns; supporting evolution of software applications and checking architectural model conformance. following the example of these researchers, we use the soul logic meta programming system to conduct experiments on programs written in smalltalk. the soul approach to logic meta programming is however generic and can be applied to most class-based object-oriented programming languages, as is evidenced by the existence of soul for java.



logic queries both to verify whether there is a hierarchy relationship between two classes and to detect the classes another class has in its hierarchy. in the first of the two example logic queries below, the isinhierarchyof: predicate is used to verify that the class string somehow inherits from the class object, in the second query it is used to find all classes that inherit(in)directly from the class object. for the first query the logic evaluator will try to logically prove that the isinhierarchyof: predicate holds for the given arguments and for the second query it will return all the values for the variable?x that make the predicate hold.



finally, approximate reasoning is another path we are pursuing in parallel in our research for a more flexible detection of software patterns. our initial experiments have shown that approximate reasoning aids in overcoming small discrepancies between the facts needed to prove the existence of a pattern and the program facts at hand. later research might also entail investigating how these two approaches can be combined conceptually: approximate reasoning about approximate program semantics.



