to keep the student retention high in computing education, educational technologies are often applied to help students learning a particular topic. these technologies typically rely on automated visualisation as their main feature; a particular topic is explained through intuitive graphics and animation. program visualisation(pv) tool and algorithm visualisation(av) tool are two of the most common ones. the former focuses more on visual-



in computing domain, educational tools are common to explain programs, algorithms, and data structures through visualisation. generally speaking, these tools can be classified to three categories: program visualisation, algorithm visualisation, and others. this section will discuss educational tools for each of those categories. further, we will also explain a brief overview of piton, an educational tool which acts as a basis of our proposed tool.



apart from classical topics, some av tools cover domain-specific algorithms and data structures. for example, a work in covers algorithms for network optimization problems. other two examples are a work in that covers sha-512 algorithm and a work in that covers matrix multiplication algorithm.



as the number of av tools is increased, algoviz was proposed. it works as a digital repository for av tools where av creators and users meet. on there, the success of an av is measurable as the users can provide a feedback about it.



for some learners, learning programming is not an easy task. hence, visual programming(vp) tools are introduced as an alternative of program visualisation(pv) tools. instead of writing a program code directly, a vp tool acts as a connector between the learners and their code. it removes some technical details so that the learners can focus on the algorithmic side of their program. greenfoot enables drag-and-drop feature for some program parts. alice and scratch let the learners to drag and drop their syntaxes instead of writing them directly. raptor and sfc editor display a flowchart to learners instead of program code.



some educational tools aim to explain the characteristics of algorithms. a work in proposes complexitor, a tool to learn algorithm time complexity in practical manner. it then inspires a work in that proposes jcel, which is similar to complexitor except that it has simpler inputs and focuses on java programming language. a work in proposes greedex, a tool for learning the characteristics of greedy algorithms. it is then expanded to greedexcol with collaborative features on board.



the proposed combination between pv and av tools is called ds-piton. it is built on the top of piton, and covers seven data structures for visualisation(array, linked list, stack with array, stack with linked list, queue with array, queue with linked list, and priority queue with linked list). since piton is developed for python programming language, ds-piton will only cover that programming language.



in terms of provided feedback, they can be categorised to three categories. the first one is to assure that a pop-up window is always displayed on top of the main window. it should always be the main focus till it is closed. the second one is to enlarge data structure display. the third one is to optimise the technical details of visualisation. all of them have been fulfilled at the final implementation of ds-piton(that is proposed in this paper).



unsupervised learning, on the contrary, relies on no lecturer or tutor during the process. it typically occurs when the students are taking an online course or completing an assessment related to data structure implementation. when this kind of learning is used, it is important to make the tool accessible through e-learning so that when they need it, they can easily download it. further, the detailed tutorial about how to use the tool and what goals need to be achieved with that tool should also be described on the elearning. in terms of usage, the students can utilise the tool in a similar manner as supervised learning with computer access; they can write a python source code aiming to learn the implementation of some data structures.



learning(where the student learn a particular information from a given textbook). the textbook-based learning is chosen as the baseline since it is the conventional(and most common) strategy for learning data structure implementation. by comparing those two, we believe that our findings can be more relevant to the current condition of learning data structure implementation.



per experiment, the students would act as a control group when completing the first assessment and as an intervened group when completing the second assessment. both sessions would be conducted in 30 min each. for the first assessment, the students should rely only on a data structure textbook(textbook-based learning). whereas, for the second assessment, they should rely only on ds-piton. the use of ds-piton is beneficial if a statistically-significant improvement occurs between the control and intervened groups in terms of scores and/or completion time(measured using a two-tailed paired t-test).



for slow-paced students, three quasi-experiments were conducted. the experiments behaved similarly as the experiments on moderate-paced students except that they cover different material set. in this context, these experiments cover priority queue with linked list, queue with linked list, and stack with array. further, our experiments have fewer questions for assessments(three questions per assessment with 33.33% score contribution per question). each experiment should be completed in 30 min(15 min per assessment). it is worth to note that the number of questions and completion time are modified so that slow-paced students would not be feel burdened.



the open-ended question collects two kinds of feedbacks. the first one is to optimise ds-piton more as some laboratory computers have limited specification. the second one is to integrate dspiton with the data structure textbook(as inspired by).



this paper integrates program visualisation(pv) with algorithm visualisation(av) tools with the aim to help learners understanding data structure implementation. the integration is represented as a tool called ds-piton. it works similar to a standard pv tool except that, when visualising predefined data structures, it utilises an av tool for visualisation. according to our evaluation, three findings can be deducted. first, it helps both moderate-paced and slow-paced students getting better assessment score. second, it helps moderate-paced students completing their assessment faster while being possible to add more completion time for slow-paced students. third, the students believe that ds-piton helps them to understand data structure materials.



