in this paper, we use the general hierarchical methodology proposed by akbarpour for the formal modeling and verification of dsp(digital signal processing) designs, to verify an implementation of the ieee 802.11a physical layer ofdm modem using the hol theorem prover. the verification is performed at all levels of abstraction starting from real, floating-point, and fixed-point number systems down to register transfer level(rtl) hardware implementation. for the purpose of verification, both the design specification and implementation are modeled in formal logic and then mathematical theorems are proved for correctness. we were able to find a bug in the modulation block where the constellation used in the implementation did not follow the ieee standard specification. besides, we derive new expressions for the round-off error accumulation while converting from one number domain to the other and carry out a formal error analysis of the ofdm modem in hol.



work. section 3 describes details of the ofdm modem implementation to be verified and the methodology used for verification. section 4 describes the verification of rtl blocks of the ofdm system. section 5 describes the error analysis of the ofdm modem and its formalization using hol. the last section concludes the paper and provides hints for future work directions.



there are numerous research work done on the design and implementation of the ieee 802.11a physical layer. although no significant work is done about using theorem proving for the verification of the ofdm or part of the system, we still mention some important implementations of ofdm systems. in, a coded ofdm system was developed using the tms320c6201 processor for telemetry applications in the racing and automotive environment. in the authors developed a wirethe result is bounded to a certain amount. he also reported on an error in the hand proof mostly related to forgetting some special cases in the analysis. this error analysis is very similar to the type of analysis performed for dsp algorithms. the major difference, however, is the use of statistical methods and mean square error analysis for dsp algorithms which is not covered in the error analysis of the mathematical functions used by harrison. in this method, the error quantities are treated as independent random variables uniformly distributed over a specific interval depending on the type of arithmetic and the rounding mode. then the error analysis is performed to derive expressions for the variance and mean square error. in another work, huhn et al. proposed a hybrid formal verification method combining different state-of-the-art techniques to guide the complete design flow of imprecisely working arithmetic circuits starting at the algorithmic down to the register transfer level. the usefulness of the method is illustrated with the example of the discrete cosine transform algorithms. in particular, the authors in have shown the use of computer algebra systems like mathematica or maple at the algorithmic level to reason about real numbers and to determine certain error bounds for the results of numerical operations.



rithm have long been analysed using traditional mathematics and simulation. for instance, tran-thong and liu presented a detailed analysis of roundoff error in various versions of the fft algorithm using fixed-point arithmetic. jackson analysed the roundoff noise for the cascade and parallel realizations of fixed-point digital filters. liu and kaneko[24, 21] presented a general approach to the error analysis problem of digital filters and fft algorithm using floating-point arithmetic and calculated the error at the output due to the roundoff accumulation and input quantization. error analysis is traditionally validated by comparing such theoretical results with experimental simulations.



the main purpose for using formal verification was to find bugs in the design. we did not find any bug in the blocks. but, some comments are in order. namely, for the qam block, it is given in the standard that the input for a 64-qam modthe standard is followed exactly, then this issue might have resulted in a bug in the design. but, the standard gives some flexibility to the designers in order to have more precise results from the ifft block, as explained before in section 4.1. as, we were aware about it at the time of verification, we constrained the implementation using the proper number of bits. the same comments are applied to the dqam block. for the rest of the blocks we did not find any issue like this.



terval insertion and guard interval removal. the reason is that the rtl codes for those blocks were not available for the design at hand. the guard insertion block in the transmitter side has a portion of its behavioral code but the whole code mostly contains port-mapping to the ip blocks. in general, the whole design contains many ip blocks and thus the verification of the design in its entirety is not practical using any theorem-proving tool like hol. still, this chapter demonstrates the scope and feasibility of formal methods in a comprehensive way in parts of the ofdm rtl blocks.



the error analysis done above covers the ofdm rounding error analysis thoroughly between different number domains. to establish the complete theory of error analysis we proved three main theorems with the help of formalized real and imaginary part of fft-ifft expansion and also the theorems related to the error for arithmetic operations. all definitions were derived heavily from existing theories, e.g., realtheory, booltheory, ieeetheory, floattheory, fxptheory, wordtheory, etc. there is a very strong relationship between mathematical models and their formal counterpart which might have been observed above. the definitions built on top of established theories in turn helped to build the fft and ifft components; which build the theory for the fft-ifft combinations. then this theory is extended and the operators are overloaded for establishing the real, floating-point and fixed-point counterparts of the design using the floattheory and fxptheory.



a system. but, hol strongly checks the type of the terms and functions entered into the system. this particular constraint also makes it very difficult to make simple mistakes in defining wrong theorems thus also answers partially the concern mentioned in the previous paragraph. still, if any user wants to trick the tool to generate proof arbitrarily, he/she has to use oracle mechanism that enables arbitrary formulas to become elements of the thm type. by use of this mechanism, hol can utilize the results of arbitrary proof procedures. to avoid unsoundness, a tag is attached to any theorem coming from an oracle. this tag is propagated through every inference that the theorem participates in and if falsity becomes derived, the offending oracle can be found by examining the tags component of the theorem. a theorem proved without use of any oracle will have an empty tag, and can thus be considered to have been proved solely by deductive steps in the hol logic. thus, the tool ensures its security against misuse.



this paper is mainly concerned to demonstrate the use of formal verification techniques, here theorem proving, to verify an implementation of an ofdm modem based on the ieee 802.11a physical layer standard for wireless communication. the ofdm design is fairly complex and some important design blocks were chosen for verification purposes. we formally modeled and verified the rtl blocks such as qam, dqam, s/p, and p/s against the corresponding specifications in the standard. we were able to find a bug in the qam modulation block which implementation was diverted from the constellation provided in the ieee standard specification.



