uml is a widespread language used in both industry and academia, despite the fact that its semantics is still informal and allows ambiguities. on the other hand, ohcircus is a formal specification language which unifies z, csp, the refinement calculus of morgan and object-oriented theories. in this work we integrate uml class diagrams and ohcircus by written uml elements in terms of ohcircus constructs. however, instead of a simply syntactical mapping, we also propose the concept of a class model to capture associations and global constraints. finally, we use this integration to prove the refinement of associations as attributes, a result that relates analysis to design to implementation and which is very common in industry.



among various initiatives to make formal methods more accessible and used in industry, the current research direction is using a graphical and appealing language, such as uml, to encapsulate formal notations. this is usually accomplished by providing a mapping to constructions of a(often informal) language into another, a more formal one[17,21,3,14]. thus, popular modelling languages, well-known by developers, are mapped into more powerful and formal, designed without major conceptual restrictions(although some are necessary for their practical usage).



our approach differs on treating uml in the same semantic level of the formal language. for example, uml classes are mapped into classes in our chosen language. other works, like those from the most important group in the area, offer a denotational semantics of uml in z[9,7].



this works is organised as follow. in sections 2 and 3, we describe the main elements of uml class diagrams and ohcircus specifications, respectively. in section 4, we present our first contribution: the translation of a uml class diagram into an ohcircus specification(where we show our concept of the class model). the second contribution appears in section 5, where we address refinement in uml diagrams using associations-as-attributes. finally, we present our conclusion and future works in section 6.



uml is compound of several diagrams that express static and dynamic aspects of an application. static aspects are related to the structure of the system, being true all the time. the purpose is to describe the entities of a system and how they will always be related. on the other hand, dynamic aspects refer to the evolution of the application: the creation and destruction of objects and their connections over time; formally, the transformations in the global state(the set of objects and relations) of the system.



class diagrams are the most common diagrams used in software development projects. they model concepts from the domain of the application and the structural aspects of the system using classifiers and relationships as their building blocks. they are also named static view, representing information that never changes.



multiplicity imposes a constraint on the number of entities of an endpoint that are related to a single element of the other. the cardinality of this set can also be expressed using ranges. for instance, consider the owns relationship, where we can relate a person to zero or more(0..*) instances of account; and for each instance of account it must relate one or more instances of person. the latter constraint enforces that every account must have at least one owner.



navigability defines visibility for associations. the entity in one endpoint is seen by the opposite entity if the association between them is navigable; otherwise, that entity cannot state anything about the instances to which it is associated. navigability is no further discussed.



generalisations capture inheritance relations between a more general class(superclass) and a more specific one(subclass). in fact, all members held by the superclass are inherited by the subclass. this relationship also states that every instance of the subclass is also an instance of the superclass. it is worth noting that we are interested only in simple generalisations, where classes can have only one superclass.



in ohcircus, a class declaration is introduced with the keyword class, followed by its name and the optional clause extends. this last part enables inheritance between classes; if omitted, the class inherits from the special class object. in this example, creditaccount extends(inherits from) account.



the state clause indicates the schema which defines the state of a class. this schema is similar to that of z, though its variable declarations can also contain qualifiers. if nothing is said, fields are assumed private. we can also declare them as protected or public. despite its stated semantics, the modifiers do not constrain the access to the fields in ohcircus.



implicitly, the creditaccount state inherits all fields and invariants declared in the state of its superclass. moreover, new fields and invariants can be defined. for example, the creditaccountstate introduces a new private field, credit, and states that the sum of balance and credit cannot be negative. note that the invariant is made up of fields from the subclass and also from the superclass.



methods are differentiated from other paragraphs by the use of private, protected, public, or logical qualifiers. the first three are directly related to the visibility of the method, again with standard meaning. the logical methods are just specification artefacts, useful for the calculation of complex expressions, for instance, but not necessarily present in the implementation.



our solution to these problems is the introduction of a class named model, responsible for capturing all the structure of a class diagram: the sets of instances of classes, the relationships, and the global invariants. we believe that this approach offers a more abstract view of the class diagrams when compared to others([6,15,3]), which only consider the representation of the classes, capturing associations directly through fields and ignoring global invariants. note that the class model is not part of the class diagram itself; it arises from our interpretation of the diagram. thus, it is a kind of meta-class.



for mapping inheritance, one must include, in the ohcircus representation of the subclass, the extends clause followed by the name of the superclass. moreover, an invariant in the class model must assert the inclusion of the elements from the set of instances of the subclass into the set of instances of the superclass. in the following example, the invariant ensures that the elements of creditaccounts are also values of accounts.



links them all. such fields are only syntactic sugar, because the consistency of the association is maintained by a relation in the class model. however, they are necessary because the uml semantics allows statements about the classifiers to which a class is associated. lastly, constraints are also established regarding multiplicity.



mix fields and associations in ones that have only fields, bringing them closer to implementation. however, the support provided by a theorem prover is a very important feature to guarantee the correctness of a demonstration, and ohcircus still lacks it. in the other hand, ohcircus has the refinement theory of z, which has the support from z/eves. thus, we chose z to specify our model.



in this subsection, we will present the two class diagrams related to abstract and concrete models. in our mapping, each one of these class diagrams introduces a class model in the specification. these classes will serve as the state of the specifications and their(meta-)operations will be refined.



the operations identified by the classes modelr and modela change the sets of instances and associations of a diagram through the addition and removal of elements, in a similar approach to the one reported in. however, since the representation of the sets does not change from one diagram to another, it is trivial to prove its refinement. so, we are interested only in the operations of addition and removal of an association pair. the steps of the proof can be seen in.



in this work we considered the uml formalisation using the formal specification language ohcircus. although not exhaustive, we dealt with the most important uml static constructions. the originality of the approach, where we connect isolated elements of other works, and also our contribution to support the use of associations and their representation as fields are the main points of this paper.



the second contribution of this paper is the analysis of refinement in uml. in particular, the class model allowed exploring the same refinement theory of z, where there is only one(global) state and operations that act over it; this gave us a direct tool support. the case study was the previously discussed representation of associations as fields, and our contribution was that the representation of fields is a refinement of the one with associations.



related works to refinement are also important. the formal proof, using this mapping, of the validity of design patterns is an example of relevant contribution to the area of software engineering. other refinements can be inspected, like the transformation of bidirectional associations into unidirectional ones and the inclusion or removal of a class from the model, proposing, for example, a set of transformation laws to uml models.



