although programs convey an unambiguous meaning, the grammars used in practice to describe their syntax are often ambiguous, and completed with disambiguation rules. whether these rules achieve to remove all the ambiguities while preserving the original intended language can be difficult to ensure. we present an experimental ambiguity detection tool for gnu/bison, and illustrate how it can assist a grammatical development for a subset of standard ml.



what our naive account overlooks is that all the legitimate parses according to the grammar might not always be correct in the intended language. with programming languages in particular, a program is expected to have a unique interpretation, and thus a single parse should be returned. nevertheless, the grammar developed to describe the language is often ambiguous: ambiguous grammars are more concise and readable. the language definition should then include some disambiguation rules to decide which parse to choose.



in this paper, we present a tool for gnu bison 2 that pinpoints possible ambiguities in context-free grammars(cfgs). grammar and parser developers can then use the ambiguities reported by the tool to write disambiguation rules where they are needed. since the problem of finding all the ambiguities in a cfg is undecidable[6,8], our tool implements a conservative algorithm: it guarantees that no ambiguity will be overlooked, but it might return false positives as well. we attempt to motivate the use of such a tool for grammatical engineering.



from this ambiguity report, two things can be noted: that user-friendliness is not a strong point of the tool in its current form, and that the two detected ambiguities correspond to the two ambiguities of examples 2.2 and 2.3. furthermore, the re-



our ambiguity checking algorithm attempts to find ambiguities as two different parse trees describing the same sentence. of course, there is in general an infinite number of parse trees with an infinite number of derived sentences, and we make therefore some approximations when visiting the trees. the algorithm in its full generality is described in, along with the proof that all ambiguities are caught, and more insights on the false positives returned along the way.



our exploration stops with this last item pair: its concurrent items expect different terminal symbols, and thus cannot reach the end of the input upon reading the same string. the algorithm has successfully found how to discriminate the two possibilities in conflict in example 2.1.



the eligible single moves from item to item are in fact the transitions in a nondeterministic lr(0) automaton(thereafter called lr(0) nfa). the size of the ma relation is bounded by the square of the size of this nfa. let|g| denote the size of the context-free grammar g, i.e. the sum of the length of all the rules right parts, and|p| denote the number of rules; then, in the lr(0) case, the algorithm time and space complexity is bounded by o((|g||p|)2).



the choice of a conservative ambiguity detection algorithm is currently rather limited. several parsing techniques define subsets of the unambiguous grammars, and beyond lr(k) parsing, two major parsing strategies exist: lr-regular parsing, which in practice explores a regular cover of the right context of lr conflicts with a finite automaton, and noncanonical parsing, where the exploration is performed by the parser itself. since we follow the latter principle with our algorithm, we call it a noncanonical unambiguity(nu) test.



a different approach, unrelated to any parsing method, was proposed by brabrand et al. with their horizontal and vertical unambiguity check(hvru). horizontal ambiguity appears with overlapping concatenated languages, and vertical ambiguity with non-disjoint unions; their method thus follows exactly how the context-free grammar was formed. their intended application is to test grammars that describe rna secondary structures.



a first solution, already adopted by brabrand et al., is to attempt to generate actually ambiguous inputs that match the detected ambiguities. the ambiguity report would then comprise of two parts, one for proven ambiguities with examples of input, and one for the potential ambiguities. the generation should only follow item pairs from which the potential ambiguities are reachable through ma relations, and stop whenever finding the ambiguity or after having explored a given number of paths.



the complexity of our algorithm is a square function of the grammar size. if, instead of item pairs, we considered deterministic states of items like lalr(1) does, the worst-case complexity would rise to an exponential function. our algorithm is thus more robust.



the paper reports on an ambiguity detection tool. in spite of its experimental state, the tool has been successfully used on a very difficult portion of the standard ml grammar. the tool also improves on the dreaded lalr(1) conflicts report, albeit at a much higher computational price.



we hope that the need for such a tool, the results obtained with this first implementation, and the solutions described for the current limitations will encourage the investigation of better ambiguity detection techniques. the integration of our method with the one designed by brabrand et al. is another promising solution.



