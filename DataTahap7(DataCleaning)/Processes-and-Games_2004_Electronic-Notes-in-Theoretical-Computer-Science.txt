computing in the modern world is characterised by diversity and rapid change. science of computing is no exception, where we have diverse activities and theories dealing with different subject matters and using different approaches. all the more so there is a value in seeking a general theory of computing which can, among others, offer a common mathematical footing on which we can unify and integrate these diverse scientific theories and engineering disciplines. such a general theory is expected to act on science and engineering of computing as basic physical theories have acted on natural sciences and engineering, in spite of a different nature of computing from physical phenomena(on this difference we do not extend further here; except noting the complexity method would particularly be successful. theory of domains and denotational semantics, initiated by scott and strachy, is a forerunner of this approach. these different approaches compensate each other: without ambient general algebraic theories, the understanding of specific structures would be a limited one; but a general algebraic theory may as well become most effective when combined with a powerful concrete structure. different presentations of a core theory may as well be extended to a general algebraic universe, gaining in both richness and applicability; and the former may suggest an alternative, useful presentation of a general algebraic universe which would help its deeper understanding. in fact, any general theory, however powerful, can give only one way of abstracting computational phenomena: other abstraction would always be possible, and the interplay among different mathematical abstractions will enrich our scientific understanding. thus distinct directions may as



the process on the left-hand side, which offers two choices, sends to the continuation c two names, z1 and z2; then it waits with these names. if z1 is invoked, then p1 becomes active: similarly for z2 and p2. on the other hand, the process on the left-hand side, which selects information, receives two new names after the initial invocation, then selects the first one by outputting to it. as a result we obtain the following reduction: which is of course not correct from the viewpoint of untyped processes, since z2 is still available for invocation: but, in typed processes. because we expect that the environment obeys the choice protocol, z2 will never be invoked, hence z2.p2 will be safely garbage collected, justifying the reduction. since this justification depends on the typing of the process, we may add an annotation as, for example:(z1.p1& z2.p2), which, as an untyped process, is still the same



channel types are similarly extended, allowing each vector to be finite or infinite and each type to be of a finite or countably infinite height, with the same well-formedness conditions as before. a sum type can have an infinite domain; so is an action type in general. using infinitary processes and types, the typing rules are given precisely as before, reading each rule as a constraint on each full subtree of a process.



well-bracketing means, simply put, the parentheses match properly when written using the notations[,(,) and], taking the justification into consideration(e.g.[ can only be closed by] which it justifies). we can now define an innocent strategy.



by innocence and contingency completeness, an innocent strategy is precisely characterised by a partial function from odd-length legal player views to next actions(if any). such functions are called innocent functions. an innocent function uniquely defines an innocent strategy and vice versa. in essence, contingency completeness says that a strategy is always ready to receive any legal input; innocence says that a strategy always reacts in the same way in the same context(where the sameness in both instances takes the notion of



example 4.2 let 1 be the empty arena. an innocent strategy from 1 to b is that which returns true after the initial move(the latter justifies the former); another returns false; and the third one returns nothing. these respectively correspond to the three constants, the truth, the falsity, and the undefined, which are all and the only inhabitants of the boolean type. an innocent function from b to b starts from the root of the co-domain, and returns true immediately at the co-domain. this is a constant function of value true. another innocent function of the same type would, after the initial action at the co-domain, asks at the domain, receives true(resp. false) then outputs false(resp. true) at the co-domain, defining the negation.



