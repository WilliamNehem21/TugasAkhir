can be implemented, and techniques to address the overheads. sec. 3 presents our approach to evaluating parallel state-space exploration algorithms, showing how overheads can be measured, how models can be constructed to assess the overheads, and how the results from real models can be put into context. we round off the paper with a discussion of related work(cf. sec. 4) and our conclusions(cf. sec. 5).



one of the great difficulties of parallelising state-space exploration algorithms is understanding how to efficiently implement a devised parallel algorithm. the types of languages and libraries chosen for parallelisation can have a significant effect on the performance of the parallel algorithm, since their characteristics can influence overheads. the importance of these choices can be shown when inspecting the work of inggs: the use of java led to high synchronisation overheads for memory allocation and garbage collection, and eventually inggs used c to implement her parallel algorithm. language selection can therefore be costly in time and effort if it hinders parallelisation.



selecting an appropriate architecture is also an important decision when considering how to parallelise a state-space exploration algorithm. availability is a key issue when choosing hardware. multi-processor, multi-core pc are becoming widely available for performing experimental analysis on parallel algorithms. the drawbacks of this type of machine are that they only offer a relatively small number of processors/cores and that secondary cores are approximately 30-40% less efficient than processors. larger shared-memory machines can offer more processors for performance evaluation but are less readily available. pc clusters are easily available but incur communication overheads across the network. in addition, operating system choice is often tied to the machine under usage. different operating systems schedule their threads in different ways, which can affect scheduling overhead. another operating system decision is related to tool support, where parallel tools that can aid the development of the algorithm may only be able to run on particular operating systems(see also sec. 3).



when considering how to parallelise a state-space exploration algorithm, techniques for addressing parallel overheads must be well chosen to minimise their impact. the most common technique for addressing load imbalance caused by irregularity is dynamic load balancing, specifically workstealing techniques. these have been used in parallel state-space exploration algorithms to facilitate orders of magnitude improvements in time-efficiency[15,19]. we applied workstealing to parallel saturation, and our results using this technique demonstrated speedups on several models including a super-linear speedup. workstealing is based on the principle that, when one processor runs out of work to do, it steals work from another processor. for instance, if processors are given a number of states to enumerate, a processor completing its work can attempt to steal states from other processors. while this can be effective in spreading work to multiple processors efficiently, the technique introduces its own overhead from extra code and synchronisation. thus, in order to improve the run-time of the parallel algorithm, sufficient parallel work must exist for the technique to spread fully across the available processors.



the quality of the measurement of parallel overheads, and how it reflects on the performance of a parallel state-space exploration algorithm, is a key issue that has yet to be addressed in the literature. the overheads of the algorithm are usually measured through some form of estimation, such as the distribution of states across processors to indicate load(im)balance. when we tried to estimate the amount of parallel work arising from our next-state function, we found that the influences on the parallelisation are much more complex than the factors we initially considered. thus, estimates of overheads may not be an accurate measurement of their true impact on a parallel algorithm, which brings their contribution towards an objective evaluation into question.



we now address the problem of measuring parallel overheads for each type of overhead in turn. load balancing is difficult to measure. if we count the number of states enumerated on a processor and discover that this number is fairly even on different processors, we could argue that the load is well balanced amongst processors. however, what has not been taken into account here is the way in which work has been scheduled: due to the dependencies between states, the processors



while parallel overheads can be identified as a general influence on an algorithm, a subtlety of state-space exploration algorithms, and one which is not discussed in related literature, is the affect of the model on the severity of the overheads. we found this out the difficult way in saturation, since some models showed good performance using the parallel algorithm, and others showed a lack of parallelisability. at first glance these results can suggest that the parallelisation is inefficient, which is a highly frustrating point to consider when a lot of work has gone into the parallel algorithm. our experience from investigating the effects of the underlying model can hopefully be used to alleviate future frustration relating to this point, by illustrating that the parallelisation efficiency is highly dependent upon the model as well as the techniques that have been used to address overheads.



(b) has high scheduling, and(c) is an ideal model that can be parallelised well with little overheads. using models matching profile(a) one can ascertain whether the load balancing function of the parallel algorithm under investigation can be improved, by attempting to increase the amount of fully parallel processor utilisation. using models matching profile(b) one can attempt to improve the scheduling technique, by reducing the scheduling overhead. using models matching profile(c) one can try to elaborate on various parallel overhead techniques, where any increase in fully parallel processor utilisation and decrease in scheduling and synchronisation overhead is desirable. these profiles highlight inefficiencies that can be used for the optimisation of parallel overhead techniques and allow for a quantitative comparison of the performance of different techniques. they also facilitate the understanding of how the effectiveness of the techniques can be challenged by the models under consideration.



most of the work on parallel state-space exploration has focused on networks of workstations(nows), primarily using static partitioning of statespaces[2,3,4,6,11,24,25,26,27]. the evaluation of the proposed parallel algorithms usually involved benchmarking in terms of run-time and some estimation of the work distribution and communication overhead. to the best of our knowledge, only one paper gives a breakdown of the run-time overheads.



our approach to evaluation is unique, firstly, with regards to the quality and thoroughness of parallel overhead measurement and, secondly, in the way we choose models to measure specific overheads. using a profiler that provides a direct measurement of overheads, while taking into account the cost of its own instrumentation, assures the accuracy of measurement. combining a thorough evaluation of a parallel state-space algorithm with a carefully selected benchmark of its runtime performance serves to provide a clear picture of how efficiently parallelised the algorithm is.



