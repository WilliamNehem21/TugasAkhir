the representation of the set of falsifying assignments of clauses via binary patterns has been useful in the design of algorithms for solving#fal(counting the number of falsifying assignments of conjunctive forms(cf)). given as input a cf formula f expressed by m clauses defined over n variables, we present a deterministic algorithm for computing#fal(f). principally, our algorithm computes non-intersecting subsets of falsifying assignments of f until the space of falsifying assignments defined by f is covered. due to#sat(f)= 2n-#fal(f), results about#fal can be established dually for#sat. the time complexity of our proposals for computing#fal(f) is established according to the number of clauses and the number of variables of f.



the problem of counting models for a boolean formula(#sat problem) can be reduced to several problems in approximate reasoning. for example, estimating the degree of belief in propositional theories, generating explanations to propositional queries, repairing inconsistent databases, bayesian inference and truth maintenance systems[4,12,13,14]. the above problems come from several ai applications such as planning, expert systems, approximate reasoning, etc.



the combinatorial problems that we address in this paper are the computation of the number of models and falsifying assignments for boolean formulas in conjunctive forms(cf), denoted as#sat and#fal, respectively. both problems(#sat and#fal) are classical#p-complete problems even for the restricted cases of monotone and horn formulas. we also show that string patterns can be used as a succinct representation of the set of falsifying assignments of conjunctive formulas.



the standard strategy used to solve#sat comes from variants of the classical davis and putnam(d&p) method, especially designed to solve the sat problem. in this case, the main variant arises from reviewing the entire tree of search on the set of assignments of the formula; for example, the backtracking process has to be applied not only when a partial assignment falsifies a sub-formula, but also for assignments satisfying it. however, now a days, each variant from d&p have an exponential-time complexity[4,14].



in, some cases are presented where#sat(f) is computed in polynomial time considering the graph-topological structure of the constrained graph of f. additionally, in a new way to measure the degree of difficulty for solving#sat is presented. it is shown that there is a threshold, determined by the same number of models, where#sat is computed in polynomial time.



in this paper, we present a method for computing#fal(f) in an incremental way with respect to the set of clauses in f. we order the clauses of the formula, taking advantages of the binary strings representing the falsifying assignments of a set of clauses. in order to accelerate the computation of#fal(f), we reduce the cardinality of the set of clauses to work with by applying some reductions among clauses; e.g. the application of the independent reduction rule combined with subsumed clause rule.



the paper is organized as follows. in section 2 we give the basic notation as well as several definitions. in section 3 we describe the binary pattern based approach for 2-cf cases, and we extend such approach for cf cases. section 4 provides the algorithm associated with our proposal. in section 5, we present the conclusions of the work.



so, the hard cases to answer whether#sat(f)= k are given when k> p(n). in, several hard cases for solving#sat(f) are identified. such identification depends on the relation between its number of clauses(m) and the variables(n) of the instances f. for example, some of the proved cases were: the set of clauses of f. we use a short notation to represent the set of falsifying assignments of clauses using string patterns. and we show how to manipulate such strings to form the set of falsifying assignments of a conjunctive formula.



we begin computing excluded subsets of falsifying assignments of f until the whole space of falsifying assignments defined by f is covered. due to#sat(f)= 2n-#fal(f), results about#fal can be established dually for#sat. some reductions in our procedure are used, as subsumed clauses and the independent reduction involving dependent clauses, in order to accelerate the computation of#fal(f).



