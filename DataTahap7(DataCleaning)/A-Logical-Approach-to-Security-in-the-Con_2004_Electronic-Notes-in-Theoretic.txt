security properties. our logic is a more expressive alternative to ambient logic, based on a single modality, but still powerful enough to handle mobility and dynamic hierarchies of locations. moreover, having a temporal logic to express properties of computation, we can reuse the algorithms for model checking temporal logics in analyzing models for security problems.



we resort to syntax trees of ambient calculus and enrich them with some labeling functions in order to obtain what we called labeled syntax trees. the labeled syntax trees will be used as possible worlds in a kripke structure developed for a propositional branching temporal logic. the accessibility relation is generated by the reduction of ambient calculus considered as reduction between syntax trees.



the main idea of ambient logic is treating processes as spatio-temporal entities, thus were used two types of modalitiesone for assertions about space and the other for assertions about time. we will prove here that a single modality suffices for describing the behavior of these entyties. the main intuition is that we only need to calculate the modification that each movement of the system is making over the initial state, because this information suffices to reconstruct the actual shape of the system using only a propositional branching temporal logic based on ambient calculus.



in this section we define an algebra of labeled syntax trees extending the compositional operations of ambient calculus from syntax trees to the labeled syntax trees. this mean that, starting from the labeled syntax tree of p1 and p2 we will define those for p1|p2, c1.c2...cn.m[p] or!p.



we developed the labeled syntax trees to use them as states in our logic. the choice of the initial state depends on the purpose of our analysis. if we are interested in the future of an ambient calculus process p by himself, then the labeled syntax tree of p will be the initial state. but if p will interact with another process q, or will become child of an ambient, or both like in m[p|q], then, even if we have a particular interest in p, the initial state will be the labeled syntax tree of m[p|q](we can use, for defining this, the computation operations developed for labeled trees, i.e. and m@).



definition 5.6 a state formula p(resp. path formula p) is valid provided that for every structure m and every state s(resp. fullpath x) in m we have m,s|= p(resp. m,x|= p). a state formula(resp. path formula) p is satisfiable provided that for some structure m and some states s(resp. fullpath x) in m we have m,s|= p(resp. m,x|= p).



of this paper is to show the advantages that could be obtained in analyzing the security problems expressed in ambient calculus by using our logic. for this reason we will not present here the algorithms that can compute the accessibility relation. these can be found in. we present only the idea behind our implementation.



18 it will analyze if the spatial arrangement of the process to see if it allows this reduction. moreover, this algorithm will check more then the conditions generated by the reduction rules; it will stop the consuming of a forbidden capability, as in the case c1.(c2.p|q) where the consuming of c2 is forbidden as time as c1 exists



we investigated this possibility in connection with ambient calculus. consider, for example, that the firewall is expected to interact with all the agents that know the passwords. generally speaking this is the situation in reality. now the previous definition of the firewall is not satisfactory because it was modelled such that, if the interaction with one agent was done, the firewall cannot interact with any other, being unable to recognize the passwords once again.



