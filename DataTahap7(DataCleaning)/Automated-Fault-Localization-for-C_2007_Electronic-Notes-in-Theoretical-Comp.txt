we present an automatic approach for fault localization in c programs. the method is based on model checking and reports only components that can be changed such that the difference between actual and intended behavior of the example is removed. to identify these components, we use the bounded model checker cbmc on an instrumented version of the program. we present experimental data that supports the applicability of our approach.



debugging consists of three steps: detecting that the program contains a fault, localizing the fault, and correcting the fault. detecting faults has been an active area of research. there exists less work on fault localization and correction. in this work we focus on localization and present a novel method for determining the cause of faults in c programs.



we assume that we are given a program written in c and a specification. suppose the program contains a fault, and we have a counterexample showing that the specification does not hold. we use the counterexample to create an extended version of the program. we fix the inputs of the program according to the values of the counterexample and introduce abnormal predicates for every component in the program. if the abnormal predicate of a component is true, we assume that the component works abnormally. therefore, we suspend the original behavior of the component and replace it by a new input. the localization problem is then one of finding which abnormal predicates need to be asserted and how the respective components have to be replaced in order to fulfill the original specification. in order to find abnormal predicates we negate the original specification to state that it is not possible to satisfy it by suspending components, and again use a model checker to verify the new system. if we find a failing run, we can derive from it the components that work abnormally and a replacement such that the program is fixed for the original counterexample.



in[15,23] a game based approach is presented for debugging. using an ltl specification, the approach is able to locate a fault and provide a correction that is valid for all possible input values. recently, this work was extended to pushdown systems to handle recursive boolean programs. details on the approach and its application to abstractions from c programs, are given in. the problem of finding a correction that is valid for all inputs is computationally hard and therefore the approach is less efficient than the one presented in this paper, where we only provide a correction for the considered counterexamples.



other existing work does not report possible fault locations, but rather gives a deeper understanding of the nature of a failure. in segments of the counterexample are identified that force the error to occur. zeller and hildebrandt point out the significant difference between a failure inducing program input and a successful input. groce and visser generate and analyze similar versions of a program run(successful and faulty runs) in order to obtain more information about the cause of the failure.



in the next section, we give the details of our approach in the general case. section 3 gives the instantiation for the case of localizing faults in c programs as well as details on the used tools and methods. we show the applicability of the approach in section 4 by examining two examples and explaining the gathered results. we conclude and give some outlook for future work in section 5.



in this section we describe, in general terms, how a model checker can be used for fault localization. efficiency is not our prime concern in this section. in section 3 we give a specific instantiation of the approach to localize faults in c programs.



the theory presented here is quite general. it is not restricted to finite domains, as long as the modifications mentioned in point ii can be expressed. likewise, the restriction that a signal is defined by exactly one component is unnecessary. if it is removed, general constraint systems can be diagnosed.



in order to apply the approach to c programs, we first give a short description on the used model checker cbmc and bounded model checking for software. subsection 3.2 presents our approach to finding faults in c programs, which is a variation on the general approach described in the last section.



the assert in line 12 is an unwind assertion, which is added by cbmc to decide whether or not the unwinding is deep enough. if it is violated, we found a run which traverses the loop more than three times. we have to call cbmc again with a higher bound for the unwinding.



in the unwound program, cbmc supports assume statements as well as assert statements. cbmc turns the unwound program into a propositional logic formula that is satisfiable if and only if there is an execution of the program that ends in the violation of an assert statement and satisfies all assume statements that it encounters. satisfiability is checked by a standard sat solver.



the new counterexample again is computed using cbmc. if no new counterexample is found we can look for dual faults or increase the number of unwinds. keeping the unwind assertion unchanged in the previous step helps to adjust the correct number of unwinds.



the full diagnosis for a given counterexample is built iteratively: when an expression is found, we add an assume statement to the program code to avoid that the same component is reported a second time. cbmc is run repeatedly until no more expressions are found. a more efficient way would be to add blocking clauses to the sat instance.



in the following we illustrate our approach using a simple c program. listing 2 shows a program p that adds and multiplies the variables a and b. as specification we use an assert statement in line 12. in line 4, a is assigned 5, which is incorrect and should be 6. note that there are no loops in the code and thus pk= p.



assume that the counterexample sets a, b, c, d to the values 1, vb, vc, and vd, respectively.(values vb, vc, and vd are irrelevant, a can be set to any nonzero value.) listing 3 shows p'. in line 3 the new variable diag is introduced. the counterexample is fixed in line 6, but no value is fixed for e in line 14. the statement assert(false) is added to the end of the program and each expression is replaced to include the appropriate check for the diag variable. the numbers used for the expressions correspond to the line numbers in listing 2.



by using expressions as components, we get a fine grained and quite natural model for localization of the fault. examining expressions allows us to localize faults in assignments, function calls and return statements as well as in conditions for ifstatements or loops. because we do not only examine if an expression contributes to a fault, but also if it is possible to change it to avoid the fault, our results are more exact than comparable methods. the corrected version of the program in listing 2 assigns 6 to variable a in line 7. groce, zeller, ball et al., and the dynamic slice for this example comprise all assignments from line 4 to line 7 while we are able to correctly pinpoint the fault to line 4.



our approach returns all expressions that can be changed such that we can generate a correct run from a given counterexample. note that in case of a faulty value which is propagated through the program, it is not possible to tell which of the involved expressions is to change if the program is weakly specified. again have a look at the example in listing 2. if we change the assert in line 12 to assert(d== 36), it is not possible to tell if the fault is located in line 4 or line 7.



we show the applicability of the approach by considering two examples: the following section shows the results from the tcas task of the siemens test suite. the siemens suite contains five tasks which are widely used in literature. each task consists of a c program and several versions of it with faults introduced. the position and kind of the faults is known. besides the source-files, a number of test cases along with the information which of the code versions pass them is provided. in the second example, we check the implementation of a data structure. section



because no specification is given, we use failing test cases as counterexamples and the correct value for the test case as specification. except for v38, for which no test case is given, the test suite provides between 3 and 130 failing test runs for each program version, 1500 in total. the program contains 34 expressions in assignments and conditions, which were identified as potential cause of an error and instrumented as described above.



we will now have a closer look at v2, its source code is given in listing 4. functions that are not important for the example and initialization of the variables are omitted. constants are written in capital letters, global variables representing input values from the test case start with a capital letter, and local variables start with lower case letters. the failure was introduced in function inhibit biased climb, line 4 by confusing two constants, the original version is shown as annotation in the line above.



a repair in line 8 is more complicated. a look at the counterexample showed that to remove the error, function obt has to return false when called in line 42, and true when called in line 25. because obt compares two input variables, it should always return the same values within a run. a repair at this position



in addition to the diagnosis, the approach gives us the value of nondet() that was chosen to avoid the wrong behavior for each of the identified expressions. this information is valuable to understand how to repair the program. in the example above, the condition of the conditional statement in line 4 always selects the second, smaller, expression for return. to avoid the fault, we can also we replace the left expression by a negative value, indicating that the returned value should be smaller. other versions of tcas give even better replacements for the faulty expression.



e.g. in version 7, the fault was introduced by initializing a constant by 501 instead of 500. examination of the suggested value for this line resulted in the correct assignment of 500 in order to remove the fault for all test cases.



insert-, removeand search-operations are implemented as with usual binary search trees. after such an operation, the tree is examined to check if it is consistent with the rules above. if not, constant time rotation and repainting operations are performed to restore the consistency. this ensures that the tree remains balanced and guarantees the time bounds.



rule(iv) and binary search tree order: after insert operations, a routine is called which traverses the tree. if a red node is found, it checks that both children are black. the same routine also performs a comparison of the values to ensure the correct order of the binary search tree.



every node first is inserted to the tree like in a usual binary search tree. therefore the tree is traversed to find the proper position for the new node. in the traversion routine, a comparison was changed from<= to== leading to a wrong order of the tree.



the first fault resulted in only one element giving the correct line of the fault for every test case. the second fault does not cause an incorrect tree for the first test cases. the second and third test case, however, lead to a diagnosis of three expressions containing the correct line. the state space for the fourth test case exceeded memory limits for the full diagnosis, but it was possible to check one by one if a expression from a previous test cases was also a in the diagnosis for the fourth test case. that way, we were able to rule out one expression and resulted in a final diagnosis with two elements.



we presented a new approach to localize faults in c programs by constructing a modified system that allows a given number of expressions to be changed arbitrarily. the new system contains the inverted specification from the original program. if we can find an error trace for the new system, we found expressions to repair the original program.



we have demonstrated the applicability of the approach on two examples. the run time of the approach can still be improved. a significant portion of the time is taken by parsing, unwinding and generating the internal representation of the program. this representation does not change during calculation of the diagnosis for a single program. overall run time would be significantly reduced by using blocking clauses and rerun the sat solver to find the full diagnosis, instead of rerunning the complete cbmc process.



