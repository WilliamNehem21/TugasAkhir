as part of microsofts trustworthy computing initiative the company has sought many ways to increase reliability. one approach being extensively investigated and used is model based testing. with a finite state machine modeling tool(tmt) successfully deployed and in use by many test groups, a need for more powerful and flexible modeling has arisen. several product groups are exploring the use of the abstract state machine language(asml) and its associated test tool(asml/t). results from both approaches have shown an increased ability to find defects earlier, including in the specification and design stages, as well as achieve higher structural code coverage on the actual systems under test.



most test engineers test software by observing its external behavior, a process called black box testing. in the past most tests have been designed by hand. as the complexity of the software and environment in which microsoft products must operate increases, demand for designing and especially maintaining tests more easily has arisen. while many testers implicitly or explicitly use models in their heads and some even write them down, the lack of automation prevents fully exploiting the model based testing approach.



directed generates all available test cases up to a certain number of steps. shortest path allows you to specify where you want your test case to begin and end, and returns the shortest path between these two points. all shortest paths finds all the possible ways to begin and end a test case, and returns the shortest paths between all of these points. shortestpath-random or shortestpath-directed these queries let you combine two queries. you pick a specific state you would like to get to using a shortest path and then the query creates a random or directed set of test cases from the specific state your picked. you can use these queries to generate test cases that exercise the riskiest areas of your product.



tmt supports simple model checking in the form of assertions. assertions are statements that the tester makes about their area that should never be broken. assertions are not only useful for ensuring the quality of the model; but can also be used to ensure the quality of the spec the model was built from.



tmt outputs test cases as xml files called xml test cases(xtc). tmt also generates an automation template. the tester writes the automation that will run them. this was the first tool that truly helped with test design automation instead of just test execution automation.



tmt is used by over 20 teams at microsoft. time to automate fell by as much as 88%. biztalk took one week to generate a set of test cases that took eight weeks by hand. code coverage increased by as much as 50%. one subteam in shell in two weeks increased code coverage from 20% to 75%, while the number of test cases increased from about 75 to 2000. many spec and implementation bugs are uncovered in the course of model creation..net assemblies which can be executed from the command line, linked with other.net assemblies, or packaged as com components. asml specifications provide a precise, non-ambiguous way to specify a computer system, either software or hardware. program managers, developers, and testers can all use an asml specification to achieve a single, unified understanding. one of the greatest benefits of an asml specification is that you can execute it. that means it is useful before you commit yourself to coding the entire system. by exploring your design, you can answer the following questions:



indigo is based on a number of industry defined standards for web services(ws). during the drafting of these standards parts of the indigo test team modeled the specifications with help from fse. modeling the ws-routing specification in about a week we found twenty issues using the asml model which had taken months for authors to find out the same in design/ architecture meetings. modeling the ws-policy specification found six issues which all got fixed. we found additional issues in revisions of the specification. modeling the ws atomic transactions specification numerous specification issues were raised. new passport login protocol modeled in asml raised so many specification issues that the specification was rewritten entirely.



in ws-routing testing of web service extension 1.0, one incompatibility issue was found after it had already been traditionally tested. in an early implementation of ws-policy by indigo, asml/t parameter generation was used to generate variations of policy which found 13 bugs in the implementation. more than three very insidious bugs were found in the indigo early implementation of ws-atomictransaction.



