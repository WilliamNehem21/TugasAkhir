although the field of coordination languages and models has been around for some time, the recent interest in service-oriented computing(soc) and web-service choreography and orchestration 3 has precipitated greater interest in the field, resulting in both new models and new application domains for existing models. service-oriented computing is based on the idea that software is composed of services which reside on third party machines. web services are a common realization of this idea. since the conception of soc, research has focussed on developing languages to compose or coordinate services into either composite services or applications.



reo is a channel-based coordination language designed by arbab that is based on a simple notion of channel composition. it differs from existing models in that composition propagates synchronization and exclusion constraints through connectors. in combination with stateful channels, an expressive coordination language emerges.



reo. we also discuss the difficulties of embedding in the other direction. section 2 describes our encoding of orc into reo. section 3 argues that the encoding in the other direction is not as trivial. section 4 compares the two models on a variety of points. section 5 discusses some related work, and section 6 concludes and discusses future work. but first, we introduce orc and reo, and give a small example.



an orc program consists on an orc expression together with a set of definitions. basic services, such as data manipulation, are assumed to be provided by primitive sites. an orc expression can be a primitive site call, a reference to another orc expression, or a composition of orc expressions.



a site call is written as m(p), where p is a tuple of arguments which can be constants or variables. when executed all variables have to be instantiated, that is, evaluation is strict, and the site returns at most one value. examples of primitive sites are 0, which never responds, and let(v), which responds value v. we use e to range over possibly recursive definitions of orc expressions.



here, uk and me are constant values, x and d are variables, and cnn(uk, d), bbc(uk) and email(me, x) are site calls that retrieve the news for uk on the day d from cnn, retrieve the news for uk from bbc for today, and send an email to me with value x. thus emailnews(d) and emailnewsonce(d) invoke the news service from cnn and bbc and send the content by e-mail to me. the difference between these two expressions is that emailnews sends the news from both cnn and bbc(when the services reply), while emailnewsonce e-mails only the value of the first reply, ignoring the second reply.



reo is a powerful coordination model arising from the propagation of synchronisation and other constraints imposed by individual channels through connectors formed by plugging channels together, in combination with mutual exclusive data merging and synchronous data replication through nodes. a key characteristic of reo is that synchrony is propagated through composition. we present the semantics of reo connectors in an adaptation of the q-automata model, which in turn extends constraint automata.



nodes act as n-replicators, where data must flow to every connected input channel end. if n= 0, we assume that the data is consumed. the formal description we present differs slightly from the original description of reo, without fundamentally changing anything, in order to simplify our formal results.



theorem 2.10 is the main result of this section, which relates orc expressions with their reo encodings. the proof uses the lemmas introduced above, in particular, corollary 2.6 deals with inductive applications of the construction, and lemma 2.9 handles the base case.



considered. an example use of more complex primitive site calls can be found in the work by cook et al., where the authors encode in orc the set of workflow patterns proposed by van der aalst. a similar approach could be attempted



component/service instantiation in reo components are attached externally to a connector, whereas orc can dynamically initiate contact with services. orc is thus more dynamic, although it is tightly bound to the actual sites being called. these limitations seem easy to lift.



asynchrony vs synchrony orc offers highly asynchronous connectives that gracefully deal with failing sites. reo is highly synchronous and susceptible to failure. recall that failure can also be handled with timed connectors, as mentioned in section 2.2, although this solution is less transparent, as failure must explicitly be handled. in principle, synchrony(or in any case, atomicity) can form the basis of high-level abstractions. much of this work remains to be done. in fact, the jury is still out regarding whether synchrony is a good idea in a distributed setting, even though it has the potential to offer better abstractions.



