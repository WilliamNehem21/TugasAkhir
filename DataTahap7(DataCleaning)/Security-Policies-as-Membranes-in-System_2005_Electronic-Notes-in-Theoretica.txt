we propose a simple global computing framework, whose main concern is code migration. systems are structured in sites, and each site is divided into two parts: a computing body, and a membrane which regulates the interactions between the computing body and the external environment. more precisely, membranes are filters which control access to the associated site, and they also rely on the well-established notion of trust between sites. we develop a basic theory to express and enforce security policies via membranes. initially, these only control the actions incoming agents intend to perform locally. we then adapt the basic theory to encompass more sophisticated policies, where the number of actions an agent wants to perform, and also their order, are considered.



paper, and start with the straightforward policy which only prescribes the actions an agent can perform when running in a site. in section 3, we enhance the theory to control also how many(and not only which kind of) actions an agent wants to perform in a site, and their order of execution. finally, in section 4 we extend the theory to control the overall computation taking place at a site, and not only the behaviour of single agents. the paper concludes in section 5 where a comparison with related work is also given. the theoretical results are proved in the full paper.



deciding on when to apply the second possibility presupposes a trust management framework for systems, which is the topic of much current research. to simplify matters, here we simply assume that each site contains, as part of its membrane, a record of the level of trust it has in other sites. moreover, we assume only three possible levels: lbad, loc and lgood.



(i.e. typechecked) and which ones are not. however, for economy, we prefer to record this information in the membranes, by demanding that the trust knowledge at trustworthy sites is a proper reflection of this division. this is more easily defined if we assume the following ordering over trust levels:



uncertainty is when k classifies l as loc: then l may be either lgood or lbad. of course, in coherent systems we expect sites which have been classified as trustworthy to act in a trustworthy manner, which amounts to say that code running at such a k must have at one time gained entry there by satisfying the entry policy. note that by using policies as in definition 2.1, if p satisfies an entry policy mk, then it continues to satisfy the policy while running at k(cf. theorem 2.7 below).



in the full paper, we prove that the enforcement predicate can be established efficiently, while dfa satisfaction is decidable, but extremely hard to establish. this substantiate our hypothesis that verifying digests is preferable to inspecting the full code from the point of view computational complexity. we are now ready to state the soundness of this variation. it simply consists in finding a proper notion of well-formed systems. like in section 3.1, the entry policy can only express properties of single threads, instead of coalitions



here we change the intended interpretation of policies. in the previous section a policy dictated the proposed behaviour of an agent prior to execution in a site, at the point of entry. this implied that safety in well-formed systems was a thread-wise property(see rules(wf-g.sitem) and(wf-g.sitea)). here we focus on policies which are intended to describe the permitted(coalitional) behaviour of agents during execution at a site. nevertheless these resident policies are still used to determine whether a new agent is allowed access to the site in question; entry will only be permitted if the addition of this incoming agent to the code currently executing at the site does not violate the policy.



example 4.1 let licence serv be the site name of a server that makes available k licences to download and install a software product. the distribution policy is based on a queue: the first k agents landing in the site are granted the licence, the following ones are denied. the policy of the server then need to analyse the incoming code in parallel with the resident code r. it should be clear that the theory developed in section 3.1 is readily adapted to this revised reduction semantics. in particular the subject reduction and safety theorems remain true; we spare the reader the details. however it should also be clear that this approach to enforcing resident policies has serious practical drawbacks. an implementation would need to:



related work. in the last decade, several calculi for distributed systems with code mobility have appeared in literature. in particular, structuring a system as a(flat or hierarchical) collection of named sites introduced the possibility of dealing with sophisticated concrete features. for example, sites can be considered as the unity of failure[6,1], mobility[6,3] or access control[10,16,9]. the present work can be seen as a contribution to the last research line.



membranes as filters between the computing body of a site and the external environment are also considered in[5,2,17]. there, membranes are computationally capable objects, and can be considered as a kind of processes. they can evolve and communicate both with the outer and with the inner part of the associated node, in order to regulate the life of the node. this differs from our conception of membranes as simple tools for the verification of incoming agents.



