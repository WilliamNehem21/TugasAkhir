light-weight formal method has been regarded as an important approach to development of componentbased safety critical systems. the paper proposes an approach which can formally specify and verify the contract of static structure, dynamic behavior and refinement of component systems based on uml 2.0 superstructure. as results, the correctness of static contract can be obtained via type checking of interfaces and connectors. dynamic contract can be verified through determining the cooperativeness of integrated components, whose contracts are depicted with interface protocol state machines and their semantics models, namely contract automata. the refinement relation between high level component and its implementation will be guaranteed through defining the alternating simulation between contract automata of components at different levels.



it is an admitted fact that software has become the pivotal element in safety critical systems, such as avionics and aerospace systems, nuclear power controller, etc. generally, these systems have the characteristics of real-time, dynamic, autonomy, fault-tolerant, and should satisfy some critical properties. because of the complexity and demand of high confidence, the development, deployment and running of these systems are faced with grand challenges.



to verify essential properties of safety critical systems(e.g. via model checking), the dynamic or temporal aspects of interfaces should be specified in the contract. moreover, the dynamic contract should support the component composition and refinement, which are common activities in cbsd.



unified modeling language(uml) provides various viewpoints and diagrams to depict the characteristics of software systems. comparing with former versions, uml 2.0 has distinctly improved the descriptive capability of component models. this paper firstly formalizes the component model of uml 2.0, which will be used to model the static structures of safety critical systems. to depict the temporal constraints of interface usages, the dynamic light-weight formal specifications are attached to the components through defining interface protocol state machines(ipsm) and their semantics models, namely contract automata. the notions of stateful and stateless are introduced into contracts to distinguish the specialties of services.



position(but in current formalization, the real-time properties are not considered yet). then the essential static and dynamic consistency rules for component integration are studied respectively. by the rules, the static contract can be verified via type checking of interfaces and connectors, and the dynamic contract can be verified by investigating if the integrated components are cooperative. based on dynamic contract, the way of how to specify and determine the legal environments is presented. the refinement relation between high level component and its implementation is also studied, and the refinement consistency can be checked for both top-down design and bottom-up construction.



the next section discusses the related work. the formal specification of component system structure is given is section 3, and the static consistencies are proposed in section 4. the dynamic contract and consistency are studied in section 5, and the refinement relation among components is studied in section 6. the last section concludes the paper with the future work.



all the above work can not fully meet the 4 principles proposed in section 1, and may not suit uml 2.0 well. approach presented in this paper attempts to form a light-weight specification and verification method for both composition and refinement of uml 2.0 component model.



for an operation op! of component a, fa(op!)= true if it appears in some transition label of ma, else fa(op!)= f alse. it is assumed that a stateful operation can not be used as the stateless operation simultaneously. if a provided operation can be used by more than one components, it must be stateless. two complemented operations may become an internal operation after the component composition.



of the contract automata of sub-components. safe-ii can be regarded as the system with time-triggered pattern, for example, the component f ault detection will periodically execute. in the beginning of each cycle, the contract automaton of each sub-component will locate in its initial state. during the execution, the components synchronize through interface invocation. but they should return back to the initial states at the beginning of next cycle. therefore, in the semantics of composition, both of the synchronization of interface interaction and time-triggered pattern should be included.



for a close system, none external service will be needed, only the consistency 4 should be satisfied. when an open system has been constructed, it should be considered which are legal environments of the system, and whether the system can correctly work in some given environment. it is obvious that an open system can only work well in its legal environments.



in cbsd, a high level component may be refined into an implementation component, or be constructed through integrating more than one sub-components, which can also be regarded as its implementation. the high level component and its implementation must satisfy not only the static consistencies of delegation, but also the consistency between their dynamic behaviors, e.g. ipsms or contract automata. hence there should exist a refinement relation between a component and its implementation.



if a is implemented by more than one components bi, b is regarded as the composition of these bi, then a and b should also satisfy the above claim. but for each sub-component, it may has its own interface operations which interact only with other sub-components in the same level. these operations will become the internal operations after integration, and will not affect the refinement relation between b and a. we will study the refinement based on contract automata.



the industry community has attempted to take the advantages of cbsd paradigm in safety critical system development, in which formal method is desired to be applied. this paper presents our first step to bridge the gap between formal method and the most widely used modeling language uml. the improvement of component model in uml 2.0 also helps us to realize the purpose. we study the characteristics and pattern of component-based safety critical systems like safe-ii, and propose the formal specification of static structure and dynamic behavior. the consistency rules for static connection, dynamic composition and component refinement are also studied, which can be regarded as one way of verification. the method and supporting tool are being applied in the practical development of safe-ii. the preliminary results show that they have good usability, and provide a kind of rigorous way to develop component-based safety critical systems.



around these formal specifications, model checking of component-based safety critical systems is now being studied, especially combined with compositional reasoning to improve the scalability. timing constraints are unavoidable in these systems(e.g. safe-ii), and how to introduce real-time model and related performance interfaces into specification and verification will be further studied.



