the paper is divided into several sections. section 2 of the paper highlighted the related work. research problem is formulated in section 3. the basic concept of query optimization is depicted in section 4. section 5 represents the design of different stochastic query optimizers. the design of cost coefficients and experimental setup has been described in section 6. section 7 represents discussion and results. conclusion has been natural genetics. in other words, genetic algorithms are stochastic techniques that stipulate good-quality solution with low time complexity. it permits a population composed of many individual chromosomes to evolve under delineated selection rules to generate a state that optimizes the objective function. these types of algorithms successfully operate on a population of solutions rather than a single solution. it generally employs some heuristics such as selection, crossover and mutation to develop better solutions[16,8].



initially, the design of rho and march(sgqo) and sevinc and cosar(ngqo) is implemented as sgqo and ngqo respectively. furthermore, two restricted stochastic query optimizers have been proposed as rsqo and ersqo. ersqo uses the concept of genetic algorithm and havrda and charvat entropy. the remaining section explains the design and working of different stochastic distributed dss query optimizers.



on the basis of rho and march approach, simple genetic query optimizer(sgqo) has been designed for solving the operation site allocation problem of distributed dss queries. sgqo starts with randomly generated initial population. a chromosome is designed on the basis of number of operations and number of sites. the chromosome has been designed in way that its length is one less than the number of operations of a query. the pseudo-code for sgqo is formulated as below:



five different query optimization approaches to optimize distributed dss queries in a distributed environment have been discussed. from the above subsections, it is found as exhaustive enumeration scans all different possible query execution plans, hence it is not feasible to use eaqo for complex distributed dss queries. sgqo being stochastic is able to give an optimal query execution plan for moderate to complex distributed dss query, however for complex moderate to complex dss query may have redundant chromosomes. ngqo avoid redundant in chromosome, but still may lead to low diversity problem. rgqo is introduced to further improve the design of ngqo by using the restricted design of the chromosomes. on the other hand, ersqo has been implemented by using the hybrid idea of restricted growth chromosome design and entropy to solve the low diversity population problem.



for analyzing the efficiency and performance of different dss query optimizers, following set of adhoc distributed dss queries has been designed. the queries are focused on tpcds a benchmark database which is based upon customer and sales. the queries are represented in the form of relational algebra expressions. a set of queries is selected in such a way that in experimentation one has different number of join operations in each query. the queries are designed over a range of one-to-ten join operations. the queries are selected in such a way to vary the number of join operations. the queries are fired on a distributed database consisting of relations viz. customer, sales, cust_address, marketing, shipping, webstore, warehouse, store, and items.



using the above designed decision variables and costs coefficients, one can find local processing costs(lp_costs) and communication costs(cm_costs) of a dss query. local processing costs is abbreviated as lp_costs and communication costs is abbreviated as cm_costs. let t_costsio is the total input output costs and t_costscpu is the total processing costs of a query.



costs for a set of distributed dss queries obtained using the above said query optimization approaches. the total costs is measured in seconds. to avoid any discrepancy in the results of stochastic approaches, an experiment is performed several times and the average of the results has been taken.



stochastic approaches viz. sgqo, ngqo, rsqo and ersqo. from the experimental results, it was found that by increasing the replication rate from 20% to 90%, the total costs of a dss query can be further optimized. for a set of experimental dss queries, the total costs was reduced by 1.5%, 1.7%, 2% and 3.5% by using sgqo, ngqo, rsqo



goals of high quality(total costs) and low time complexity(runtime). in terms of solution quality, ersqo outperformed sgqo, ngqo and restricted stochastic query optimizer as well. in addition to this, a statistical analysis of number of join operations and the total costs of dss query shows that a positive correlation exists between the number of join operations and the total costs of dss query. moreover, ersqo shows more consistent results as compared to other stochastic query optimizers.



