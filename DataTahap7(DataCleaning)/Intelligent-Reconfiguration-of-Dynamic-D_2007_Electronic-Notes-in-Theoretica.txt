the autonomic approach is similar to the way coda(the complex organic distributed architecture), described in this paper, works. coda applies the cybernetic concepts proposed by the viable system model(vsm). the foundations underpinning the vsm are that all living systems are composed of a series of autonomous sub-systems, each having self-organizing and self-regulatory characteristics. they have within them the capacity to adapt to changes in their environment and to deal with the complexity that is relevant to them.



application components/connectors can implement the framework interfaces(previously created by nidl) that enable local management components at their machines to control their lifecycle. components and connectors have to register with their local management components, which can then interrupt and control their execution. components nfrs are monitored by an event-handling system(part of the runtime management system) located at the general-purpose layer of the framework. information about components and connectors, as well as local management components, is stored in the globalmanager(defined in the next section), which acts as a global information repository that simplifies the location of components within the system and provides a solid foundation for traceability(e.g.



the key principle behind the concept of role is autonomy. a role should perform its tasks autonomously, provided its csfs are satisfied. if a csf fails, the role will need assistance from other roles, possibly a higher-level role, which should have access to information and tasks not normally available to it. the higher-level role should be able to adjust the operational parameters(specified as csfs and filters) of the failed role, to enable it to adapt to the conditions that are causing the failure. if the higher level role also fails to achieve its csfs, it similarly alerts another higher layer role. as will be shown later, the chain of roles can extend to as many layers as there are in the system and only if it is not possible for the system to decide what



the concept of feedback loop in control systems is well known. the coda concept of feedback loop is more sophisticated because of its notion of systemic learning. rather than just adjusting the operational parameters to cope with environment changes like traditional control systems, coda uses its memory, the information provided by the wrappers, to identify the successful operational parameters. in this sense, the model presents a level of intelligence that is not encountered in typical control systems. in addition, because of the amount of information collated by system, the capability for learning is further enhanced even in comparison with other kinds of intelligent systems.



an architecture modelled using coda needs to make use of predictive techniques usually available in business intelligence. this is essential for the system to predict its resource usage and successful services and thereby be proactive in adjusting csfs and operational parameters. in addition, it is even possible to model emergent behaviour where the system can identify behaviour not previously known. for instance, the system may identify new user patterns or service usage.



monitor(the) monitors: this layer deals with multidimensional data and provides capability for analysing trend behaviour. at this level, business operations are monitored in terms of external trends. it is possible to react more effectively by analysing the historical data from various levels of aggregations such as type, time and locations.



survival csfs are also defined for the system. they indicate if the system is reaching its capacity. in the case of frodica, this means the maximum number of(services) components of certain type running on the local managers. for simplicity, we assume that there is a correlation between the number of services and the amount of resources. this assumption will be revised in line with the work presented in.



saleh, a., ribeiro-justo, g. r. and winter, s. c., non-functional oriented dynamic integration of distributed components, in proceedings of the 1st international workshop on foundations of coordination languages and software architecture(foclasa2002), brno, czech republic, august 24th, 2002. electronic notes in theoretical computer science vol. 69(2002).



