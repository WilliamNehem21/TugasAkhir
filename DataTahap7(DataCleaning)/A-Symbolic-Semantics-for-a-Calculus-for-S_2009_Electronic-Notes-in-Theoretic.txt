back to corba, dcom, j2ee and ibm websphere, the most successful instantiation of the soc paradigm are probably the more recent web services. these are sets of operations that can be published, located and invoked through the web via xml messages complying with given standard formats. to support the web service approach, several new languages and technologies have been designed and many international companies have invested a lot of efforts.



current software engineering technologies for soc, however, remain at the descriptive level and lack rigorous formal foundations. we are still experiencing a gap between practice(programming) and theory(formal methods and analysis techniques) in the design of soc applications. the challenges come from the necessity of dealing at once with such issues as asynchronous interactions, concurrent activities, workflow coordination, business transactions, failures, resource usage, and security, in a setting where demands and guarantees can be very different for the many different components. many researchers have hence put forward the idea of using process calculi, a cornerstone of current foundational research on specification and analysis of concurrent, distributed and mobile systems through mathematical



by taking inspiration from well-known process calculi and from the standard language for orchestration of web services ws-bpel, in we have designed cows(calculus for orchestration of web services), a process calculus for specifying and combining service-oriented applications, while modelling their dynamic behaviour. we have shown that cows can model and handle distinctive features of(web) services, such as, e.g., correlation-based communication, compensation activities, service instances and interactions among them, race conditions among service instances and service definitions.



in this section, we present cows main features and syntax in a step-by-step fashion while modelling an italian-english translation service. by means of this scenario, we discuss some verification problems and present the major intuitions underlying the symbolic operational semantics for cows. for the time being, we use a monadic variant of cows, i.e. we assume that invoke and receive activities can carry one single parameter at a time. in fact, for the sake of presentation, the symbolic semantics is introduced for the monadic variant in section 4, and is then extended to polyadic communication in section 5.



applying the symbolic approach to cows. the main contribution of this work is the development of a symbolic operational semantics for cows. to achieve this goal, the main issue is to give receive activities a proper semantics, because variables in their arguments are placeholders for something to be received. for example, let



cows(calculus for orchestration of web services,) is a recently designed process calculus for specifying, combining and analyzing service-oriented applications, while modelling their dynamic behaviour. cows combines in an original way a number of ingredients borrowed from well-known process calculi, e.g. asynchronous communication, polyadic synchronization, pattern matching, protection, delimited receiving and killing activities, while resulting different from any of them. in this section, we present the standard syntax and operational semantics of cows. we refer the interested reader to for many examples illustrating cows peculiarities and expressiveness, and for comparisons with other process-based and orchestration formalisms.



first, we exploit a function[] for evaluating closed expressions(i.e. expressions without variables): it takes a closed expression and returns a value. however,[]] cannot be explicitly defined because the exact syntax of expressions is deliberately not specified.



we also define a function, named halt(), that takes a service s as an argument and returns the service obtained by only retaining the protected activities inside s. halt() is defined inductively on the syntax of services. the most significant case is halt({|s|})={|s|}. in the other cases, halt() returns 0, except for parallel composition, delimitation and replication operators, for which it acts as an homomorphism.



actions: n[n] denotes execution of a bound invoke activity over the endpoint n, while n d[x] denotes taking place of external communication over the endpoint n with receive parameter x(that will be replaced by the unknown value x). the remaining labels have the usual meaning. notably, due to the restraint on monadic communication, here the natural number l can only be either 0 or 1.



we comment on the aspects of the symbolic semantics rules that mainly differ from the standard ones. bound invocations, that transmit private names, can be generated by rule(s-open). notably, bound invocation actions do not appear in rules(s-match) and(s-com), and therefore cannot directly interact with receive actions. such interactions are instead inferred by using structural congruence to pull name delimitation outside both interacting activities. although the bound transitions and rule(s-open) can be omitted, we include them both to give a proper semantics to terms



cows is a process calculus introduced in for specifying and combining service-oriented applications, while modelling their dynamic behaviour. since its definition, a number of methods and tools have been devised to analyse cows specifications, such as a type system to check confidentiality properties, a logic and a model checker to express and check functional properties of services, a stochastic extension to enable quantitative reasoning on service behaviours, a static analysis to establish properties of the flow of information between services, and bisimulation-based observational semantics to check interchangeability of services and conformance against service specifications. an overview of some of the above tools, with an application to the analysis of a case study, can be found in.



