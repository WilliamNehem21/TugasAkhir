we consider a pre-existing formalization in constructive type theory of the pure lambda calculus in its presentation in first order syntax with only one sort of names and alpha-conversion based upon multiple substitution, as well as of the system of assignment of simple types to terms. on top of it, we formalize a slick proof of strong normalization given by joachimski and matthes whose main lemma proceeds by complete induction on types and subordinate induction on a characterization of the strongly normalizing terms which is in turn proven sound with respect to their direct definition as the accessible part of the relation of one-step beta reduction. the proof of strong normalization itself is thereby allowed to consist just of a direct induction on the type system. the whole development has been machine-checked using the system agda. we assess merits and drawbacks of the approach.



we therefore tackle the problem of formally proving strong normalization for the system of assignment of simple types to terms. the method of proof we choose to formalize is due to where the authors present slick proofs of weak and strong normalization which proceed by simple induction on the type system. these proofs use a main lemma that allows to deal with the difficult case of applications in the induction, via a separate complete induction on types, with a subordinate induction which, in the case of strong normalization, proceeds on a characterization of the strong normalizing terms originally given in.



in this section we present two definitions of the strongly normalizing terms. the first one(predicate sn) is naturally introduced as the accessible part of the onestep beta reduction. the second one(predicate sn) is an alternative syntactic characterization introduced in, originally given in vector notation and adapted in in a somewhat different context(i.e. using typed reductions).



we shall presently give the two definitions together with some of their properties, in order to eventually prove the soundness of the second definition with respect to the original one, i.e. that for all terms m, sn m implies sn m, in the next section. later, in section 5, we will complete the strong normalization proof by showing that all terms typable in the system of simple types assignment satisfy the second definition(sn).



in this section we will show that sn is sound with respect to sn, i.e, every term in the first predicate is also in the second one. in order to achieve this, we first need to introduce two notions, namely that of neutral term and that of strongly normalizing head reductions that do not step inside abstractions.



case app: necessarily m= pq and sne x(p q) is obtained from sne x p and sn q. then, by ind. hyp. we have sn p and sn q, and by lemma 4.9 we get ne p. finally, by lemma 4.3 we obtain sn p q.



it is possible to prove by using a simple induction on the given type system that the typable terms are strongly normalizing. for this, we need to deal with the case of applications, that will be proved after the theorem(lemma 5.14).



concerning the latter, we believe that this method makes it possible to come closer to a presentation in textbook style that does not hide details that need formalization. of course, the main price paid has been the explicit handling of alpha-conversion; this has shown itself mainly in the formulation of the main definitions and results, which often must replace identity of terms by their alpha conversion, due to the renaming implicit in the effect of substitution on abstractions. as to additional, housekeeping lemmas, these seem to have been circumscribed to results of closure under alpha conversion. also lemma 5.12 is particularly noticeable. it could be replaced by a proof that definition 3.4 is closed under alpha conversion.



