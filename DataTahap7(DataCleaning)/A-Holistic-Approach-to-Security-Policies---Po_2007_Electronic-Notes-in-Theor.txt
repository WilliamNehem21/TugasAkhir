this platform supplies a bunch of applications and provides various security services to the user in a transparent, seamless and integrated way. it is a modular and integrative platform that allows the connection of various end user devices, such as pcs, pdas, and ambient intelligence devices and gives support for various network types(e. g., wired and wireless networks) and communication paradigms



sicari platform. the platform consists of the kernel started on top of a java virtual machine, a number of mandatory basic services, and optional application services. any application can rely upon the availability of the basic services, as there are among others the authentication manager, the identity manager, the cryptographic key master, and the policy service.



sicari application. an application is a software which fulfills a complex task. since it usually interacts with the user, it provides both an interfaces for userinteraction and a programming interface. applications make use of services in order to fulfill their tasks.



it is another goal of the platform to bridge the gap between the informal specification of security policies(i. e., what the security administrator wants to enforce) and its corresponding machine-readable policy specification(i. e., what the system actually enforces).



we have chosen to support a subset of xacml that comprises the most important elements and attributes of the language. one first goal was to reach the expressiveness that allows to handle one well-known xacml example which has been validated in the literature before[2,7]. some concepts of xacml like obligations and rule combining algorithms are not yet supported.



policy enforcement. the policy enforcement component assures that all security relevant tasks can only be fulfilled if they are in accordance with the underlying security policy. the policy enforcement component detects security relevant tasks, consults the policy decision component in order to decide upon a task, and enforces the policy decisions, i. e. allows a platform entity to access a platform resource or not.



platform authentication. finally and as another precondition for policy enforcement e. g. by means of access authorization, every acting entity in the service infrastructure has to be successfully authenticated. thus, several authentication modules are provided locally on a platform instance to allow different user login procedures according to the specific use case and characteristic of the local platform instance.



from now on the pdp proactively keeps the policy at the pep side up to date. whenever a change to the master policy at the pdp side is made, it passes it on to all peps that make use of this policy. for that purpose both parties regularly exchange keep alive(ka) messages to assure that the pep always uses a policy that is up to date.



the c-num and c-type fields determine the class and the characteristics of the object. for clientsi objects the c-num field is 9 and the variable length field for the object content carries the policy data. this data has to be processed by special cops modules that can interpret the corresponding client type specific information. our implementation bases on an open source implementation of the cops protocol from the university of waterloo[1,3]. we extended their pbn code with several classes to multiplex incoming cops messages at the pdp to modules which handle client-specific content like xacml.



as the next step a concept to extend the cops protocol to transport xacml polices as payload has been developed. for any extension to the cops protocol one has to take the peculiarity of the target policy language into account. the structure of the client-type specific objects and the protocol extensions should be specified in a supplementary document that defines how the pep and the pdp interpret and handle the policy specific payload.





