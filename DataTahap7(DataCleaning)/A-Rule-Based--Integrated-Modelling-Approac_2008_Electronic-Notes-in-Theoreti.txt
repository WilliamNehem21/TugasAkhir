the unified modeling language(uml) has become the pre-dominant modelling language in object-oriented software development. the behavioural techniques provided by the uml, however, do not contain a method for the declarative, rule-based specification of modifications on object structures. moreover, the interconnection between different behavioural techniques is treated rather superficially in the uml specification, because the uml tries to permit as many usage and interconnection scenarios as possible.



on the second layer local state changes are modelled using a variant of singlepushout graph transformation rules tailored to the uml on this layer. this layer is described in sect. 3. object-based graph grammars and object-oriented graph grammars[7,6] are other approaches using graph transformation rules to specify the behaviour of object-oriented systems. they are, however, designed as self-contained specification techniques without relation to the uml.



the fujaba tool suite uses story diagrams, which are a combination of activity and collaboration diagrams, to specify transformations on object-oriented systems. the fujaba approach is very similar to the one proposed in this paper. in contrast to fujaba, which employs java source code for the specification of low-level expressions, we use ocl expressions, which are on the one hand already integrated into the uml family of languages, on the other hand they aid in keeping the approach platform independent. another difference is the strict separation of concerns with transformation rules and flowcharts specified in self-contained diagrams, respectively, where fujaba uses the integrated story diagrams. the separation of concerns eases the reuse of transformation rules in different flowcharts and of flowcharts in other flowcharts. the choice of visualisation techniques for rules and



it is possible to use graph transformation systems also as the semantic domain of object-oriented modelling techniques. this is done in[13,5], where uml class, object, state, collaboration, and use case diagrams are translated into graph transformation systems. this approach is complementary to the one in this paper, where graph transformations are used as an additional modelling technique on the syntactical level.



in addition to the lhs and rhs, negative application conditions(nac) may be defined for a rule. such conditions are defined as non-injective extensions of the lhs, where non-injectivity is used to forbid the identification of certain elements by the match and extensions are used to forbid auxiliary object structures. if the nac can be matched compatibly with the match of the lhs, then the rule is not applicable.



in this section we use structured flowcharts as defined by nassi and shneiderman to describe control flows. the flowcharts are built over the queries and rules defined in the previous sections. because the details of state changes are delegated to the rule-based operation specifications, the control flows remain concise and comprehensible.



length lists. the actual number of sorted lists is stored in the number variable. then, these lists are merged pairwise, which halves the number of sorted lists in each pass. this is done until only one list remains and this list is moved to the self list.



