we present an extension of the soft concurrent constraint language that allows the nonmonotonic evolution of the constraint store. to accomplish this, we introduce some new operations: the retract(c) reduces the current store by c, the updatex(c) transactionally relaxes all the constraints of the store that deal with the variables in the set x, and then adds a constraint c; the nask(c) tests if c is not entailed by the store. we present this framework as a possible solution to the management of resources(e.g. web services and



the inspiration for this work comes from and: in the authors present a nonmonotonic framework for concurrent constraint programming(ccp), together with its semantics. our nask and update operations(see sec. 3) are the soft versions of those described in, while the atell, which adds a constraint only if it is consistent with the store, can be trivially modelled with the classical(valued) tell of sccp. a negative ask like our nask is described also in. the idea for a fine-grained removal of constraints(the retract in sec. 3) comes from, which describes a different nonmonotonic framework for ccp. its main purpose was not to add any additional nondeterminism(besides the choice operator) by keeping track of the dependencies among constraints in the same parallel computation, otherwise the nonmonotonic evolution could yield different results if executed with different scheduling policies. however, in our language we decided to allow this kind of nondeterminism, since we believe it is more natural to experience this behaviour during the negotiation interactions in open systems. other examples of nonmonotonic evolution of the constraint store in ccp are presented in, and their line of research is usually called linear concurrent constraint programming.



while in classical sccp this is not possible: sccp being monotonic, since the consistency level of the store can only be decreased during the executions of the agents, it is only meaningful to prune those computations that decrease this level too much. on the other hand, in nmsccp there is the possibility to remove constraints from the store, and thus the level can be increased again(this leads to the absence of a fail agent). for this reason we claim the importance of checking also that the consistency level of the store will not exceed a given threshold.



parallelism and nondeterminism: the composition operators+ and respectively model nondeterminism and parallelism. a parallel agent(rules r3 and r4) will succeed when both agents succeed. this operator is modelled in terms of interleaving(as in the classical ccp): each time, the agent a b can execute only one between the initial enabled actions of a and b(r3); a parallel agent will succeed if all the composing agents succeed(r4). the nondeterministic rule r5 chooses one of the agents whose guard succeeds, and clearly gives rise to global nondeterminism.



example 4.3[nask] in a negotiation scenario, the nask operation can be used for several purposes. since it checks the absence of information(see sec. 3), for example it can be used to check if the own policy is still implied by the store or



nonmonotonicity has been extensively studied for crisp constraints in the so-called linear cc programming and in following works as[1,9,11,16]. regarding related sla negotiation models, the process calculus introduced in is focused on controlling and coordinating distributed process interactions while respecting qos parameters expressed as c-semiring values; however, the model does not cover negotiation. in and the authors define slas at a lower level of abstraction and their description is separated from their negotiation(while soft constraint systems cover both cases).



store. we have chosen to extend sccp because soft constraints[3,6] enhance the classical constraints in order to represent consistency levels, and to provide a way to express preferences, fuzziness, and uncertainty. we think that having preference values directly embedded in the language represents a valuable solution to manage sla negotiation, particularly when a given qos is associated with the resources. soft constraints can be used to model different problems by only parameterizing the semiring structure.



