this paper provides a tutorial-style introduction to interfaces and discusses the basic concepts and ideas. in particular, we elaborate on the automaton-based interfaces from and the timed interfaces from. due space limitations, we do not treat the notion of interface refinement, but we refer the reader to and.



the prevalent trend in software and system engineering is towards componentbased design: systems are designed by combining components, some of them off-the-shelf, other application-specific. the appeal of component-based design is twofold: it helps to tame complexity through decomposition, and it facilitates reuse. components offer the unit in which complex design problems can be decomposed, allowing the reduction of a single complex design problem into smaller design problems, more manageable in complexity, that can be solved in parallel by design teams. components also provide a unit of design reuse, defining the boundaries in which functionality can be packaged, documented, and reused.



summarizing, the composition of two interfaces yields a new interface for the composite system. the input assumptions of the new interface guarantee that the input assumptions of the composed interfaces are met; the output guarantees of the new interface combine the output guarantees of the composed interfaces. the compatibility and composition of interface automata will be explained later in this paper.



interfaces as games. an interface is naturally modeled as a game between the players output and input. output represents the component: the moves of output represent the possible outputs generated by the component(output guarantees). input represents the environment: the moves of input represent the inputs accepted from the environment(input assumptions).



the existence of an environment for the combined interfaces that ensures that the input assumptions of both individual interfaces are satisfied. component composition thus consists in synthesizing the most liberal input strategy in the composite system that avoid all locally incompatible states. this can be done by classical game-theoretic algorithms.



related work. models that can encode input assumptions, such as process algebras, usually phrase the compatibility question as a graph, whereas we treat it as a game question. in a graph model, input and output play the same role and two components are considered compatible if they cannot reach a deadlock[16,9,17] in our game-based approach, input and output play dual roles. two components are compatible if there is some input behavior such that, for all output behaviors, no incompatibility arises. this notion captures the idea that an interface can be useful as long as it can be used in some design. in this respect, interfaces are close to types in programming languages, to trace theory, and to game semantics[1,2,4,5]. the reader is referred to for a more elaborate comparison with related work.



organization of the paper. this paper treats two automaton-based formalisms for the specification and analysis of interfaces. section 2 presents interface automata and defines well-formedness, compatibility and composition for these interfaces. in section 3, we extend interface automata with real-time, yielding timed interface automata. again, we explore the notions of well-formedness, compatibility and composition. in particular, we explain how timed interfaces deal with time progress conditions, which are needed to ensure that time can advance in every system behavior.



example 2.13 the interfaces b and r are clearly compatible, as the initial state(b0, r0) is so with respect to error(b, r). indeed, in state(b0, r1) the environment can prevent entering error states by not providing the input snd?. hence, while the state(b0, r1) itself does not have to be avoided, its outgoing snd? action should be avoided. this is achieved automatically by removing the incompatible state(b1, r1), along with the transitions leading to it.



this section extends the interface automaton model with timing constraints, yielding timed interface automata. a timed interface automaton augments an interface automaton with a set of real-valued clocks. clocks occur in location invariants and transition guards, respectively specifying deadlines and enabling conditions on the actions of the interface. timed interface automata are syntactically similar to timed automata, except that they have two kinds of invariants, one for input and one for output actions. semantically, however, the two models differ: timed automata are interpreted as labeled transition systems, while timed interfaces are interpreted as timed games.



the order of the quantification(first over output strategies, then over input strategies) makes the game turn-based. i.e. the output player chooses its move first and input can use this move to determine its own move. this is due to the asymmetrical causality relation between inputs and outputs in composition, as explained in.



the composition of two tias is again obtained from their product by strengthening the input assumptions to avoid all error states. in tias, input strengthening means strengthening the input invariants. 8 a product of two tias may contain two kind of locally incompatible states: i/o-incompatible states and timing-incompatible states. a state is i/o-incompatible when one component can preform an output action that is not accepted by the other component, as in the untimed case.



the result below states that if we compose two well-formed and compatible interfaces, we get a well-formed interface. as well-formedness corresponds to the interface being useful in some environment, we see that composing two useful interfaces that can be used together, yields another useful interface. note that this result trivially holds in the untimed case.



