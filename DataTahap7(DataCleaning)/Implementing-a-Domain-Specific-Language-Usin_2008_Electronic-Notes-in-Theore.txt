we describe the experience of implementing a domain-specific language using transformation to a general purpose language. the domain of application is image processing and low-level computer vision. the transformation is accomplished using the stratego/xt language transformation toolset. the implementation presented here is contrasted with the original implementation carried out many years ago using standard compiler implementation tools of the day. we highlight some of the unexpected advantages afforded to us, as language designers and implementers, by the source-to-source transformation technique. we also present some of the practical challenges faced in the implementation and show how these issues were addressed.



this paper describes the re-implementation of a domain-specific language for lowlevel computer vision called apply. this work contributes a reflection on the experience of using source-to-source transformation tools to implement a non-embedded domain specific language. this work compares the implementation experience with that of more traditional compiler implementation techniques. both implementations were carried out by the same developer. the present apply implementation was carried out over a period of five months and this paper distils the experience a parser which constructed an abstract syntax tree(ast). hand-written c code implemented the analysis and generation of appropriate target code depending on the target platform. for example, the compiler could generate w2 code for the warp processor, or c code for a uniprocessor unix machine.



the use of concrete syntax facilitated optimisations that would not have been feasible in the c version of the compiler. this encouraged the development of the apply language to further enhance its expressivity without fear of sacrificing application performance. it also made it possible to compile the base language for more efficient execution on a uniprocessor machine than could have been achieved with the original design.



in the sections that follow we provide an outline of the domain of application. we introduce the apply language and domain specific features and discuss the influence that using stratego/xt has had on the language design. then we discuss the implementation of the current apply compiler and reflect on its development with reference to the original c-based implementation.



out or in out. special features available in apply include an abstract data type, called window which can only be used as the type of a formal parameter of a procedure. a window can either hold a single element of a specified primitive data-type or a two dimensional array of a specified primitive data-type with index ranges. formal parameters of this type are declared with the syntax window of type or window( range,range) of type border expr for scalar or subscripted instances respectively. the border expr modifier in the declaration is a succinct way of defining how windows should be handled at the edges of the image. when a location of the window falls outside the image(as it would at the edges) the constant expression given is substituted for the value that would otherwise have been taken for the image itself. often this constant expression is zero.



the current implementation of apply defines a number of new metaprogramming style language extensions. these extensions serve one of two purposes. some extensions are used as hints to the compiler indicating possible optimisations. other extensions make it easier to write the stratego rules that will generate the code to target specific apis. these extensions were not available in the original apply definition, they have been added to the language as a direct result of the experience of using transformation techniques for the compiler implementation. examples of these extensions include@known expressions,@apply statements, defined expressions and assert statements.



if the programmer knows a property of a variable but the compiler could not be expected to prove it, the programmer can assert this knowledge using the assert expr statement e.g. assert x>=2;. the compiler exploits this knowledge to optimise code generation wherever possible. this statement could also be used to generate runtime checks, however currently this is not done.



generates assertions based on these loops. in particular the loop for row 1..100 do loop would generate the assertions row>= 1 and row<= 100. if the earlier@known example were included in the computation the apply compiler would be



languages and the example code provided for stratego/xt 3 was used as the basis of the apply implementation. in particular implementing data-flow analysis, such as needed for constant propagation and unreachable code elimination, at the source code level is described in. however some of the steps of transformation are unique to the apply language and the design goals of its compiler and therefore deserve further discussion.



in the syntax of the apply language, applied occurrences of variables of type window are indistinguishable from procedure calls. the do apply stage of the transformation uses the typing information to identify the applied occurrences of window variables and replaces them with windowaccessscalar or windowsaccesselement abstract syntax nodes for scalar and indexed variable respectively. the do apply stage also wraps the entire procedure body in the@apply language extension which represents a looping structure. the complete syntax for this extension is:



it is difficult to give an accurate measure of the relative complexity or effort involved, however to give a rough guide, and in the absence of accurate records of the time taken to program the original compiler, we compared the physical commented lines of code(loc). we also counted non-commented code and present that as a proportion of the total. see for further discussion.



9. the analysis and transformation stages for the original c implementation were smaller, however the current implementation does significantly more code manipulation and optimisation. the original compiler included a very simple c module for performing constant folding which handled 8 arithmetic operators computing constant values only when the arguments to the operator were themselves constant terms. by comparison constant folding in the current compiler handles 15 operators including boolean operators. this code more aggressively simplifies expressions, rearranging them as necessary to bring constant terms together and removes operator



the reverse production format of the stratego syntax definition formalism(sdf) posed difficulties at first, as did identifying sources of ambiguities in the sdf grammar definition and correcting them. being forced to re-specify the grammar represented a barrier to entry, but it facilitated the integration between concrete and abstract syntax. overall productivity was greater than before, primarily due to the domain specific nature of stratego over c.



c code generated by the old compiler with that of the current compiler. the tests were run with five combinations of cpu and c compiler. for each c compiler a range of common optimisation options were tested with the best option used for comparison for each compiler on each platform. see for more details. each measurement is the median time over 7 runs each involving 30 seconds of execution time with randomised array locations to avoid the impact of cache and paging.



we described the experience of implementing a domain-specific language for image processing and low-level computer vision, comparing our experience of using stratego/xt with the experience of using traditional techniques. the stratego/xt toolset enabled easy implementation and provided opportunities to enhance the language and improve the performance of generated code. the use of concrete syntax in the transformations facilitated rapid retargeting to exploit available apis and target environments. our experience demonstrates that implementing a compiler by transformation to a gpl is a practical way of achieving a non-embedded dsl.



