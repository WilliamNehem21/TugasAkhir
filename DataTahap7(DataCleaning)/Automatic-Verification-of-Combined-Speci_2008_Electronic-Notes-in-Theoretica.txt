computers are more and more used to control the behavior of complex systems, for instance in the traffic domain. such applications are typically safety critical, i.e., a malfunction of the computers is costly and dangerous. think of assistance systems that should guarantee the collision freedom of traffic agents such as cars, trains, and planes. such applications necessitate the use of formal models of the overall system and of formal verification for establishing the relevant safety properties. the models must be able to represent various aspects of the systems such as state spaces and their transformation, communication between system components, real-time constraints, interfaces to a continuously evolving physical environment, and dynamically changing system structures. to cope with such models in a manageable way, combined specification techniques have been proposed, integrating well researched specification techniques for individual system aspects. it is a major research challenge to develop methods for the automatic verification and analysis of such combined specifications modeling complex real-life systems.



this paper is organized as follows. in section 2 the combined specification language csp-oz-dc is outlined. in section 3 an approach to automatic verification of real-time properties of csp-oz-dc specification is presented. section 4 reports on case studies preformed in this setting. section 5 describes the tool support available for the approach, and section 6 concludes the paper.



the etcs with two trains consists of several classes. besides reartrain there are the classes for the leadingtrain, the rbc, the communicationnetwork(between trains and rbc), the track, and the driver. objects of classes may be combined into systems using the csp operators of parallel composition and renaming.



note that the pea and hence the tcs representing the semantics of csp-ozdc specifications are in general infinite state systems due to both clocks and data values. so reachability is in general not decidable. thus the fixpoint computation of armc need not terminate. however, as our case studies demonstrate, armc can be applied successfully to various examples.



a first application of this approach to verification dealt with a parametric elevator by j. hoenicke and p. maier. in this example the number of floors are treated as parameters. a safety property that depended on all parts of the specification(i.e., communication, data, and time) was verified automatically with armc. the specification of the elevator in csp-oz-dc comprised both infinite data(i.e., integers representing an arbitrary number of floors) and continuous real-time.



since verification is based on the transformation of pea into tcs, the socalled pea toolkit provides an automatic computation of the parallel product of pea and an automatic translation of pea into tcs, the input representation for both model checkers developed in r1, namely armc as well as slab. the latter integrates of slicing techniques with abstraction mechanisms. moreover, counterexample traces produced by armc can be automatically traced back to the given high-level csp-oz-dc specification and visualized in the syspect tool.



a shortcoming of the current version of armc is that it cannot exploit the parallel composition that is present in the phase event automata(pea). since armc expects as input transition constraint systems(tcs) in disjunctive normal form, the parallel product of pea, which corresponds to the conjunction of tcs, has to be computed before it can be handled by armc. for the full benchmark case study this leads to state spaces that are too large to be computed(see section 4). this shortcoming will be addressed in the future work of the subproject r1.



