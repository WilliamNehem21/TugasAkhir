remark 2.10 it is clear that by combining the operations we have described above systems with a complex geometry may be produced. it is often convenient in sketching systems not to place all the input(output) interfaces on the left(right) of components but to distinguish them by the directions of the arrows(although it is clear one could always rearrange the system to maintain the left/right input/output convention). in some cases an interface may be neither clearly input or output in which case we omit the arrow.



as explained above a discrete-time system has a geometry. in the remainder of this section we give some simple examples illustrating the expressiveness of the model. in all of the examples the inconditions and outconditions will be the evident single initial and final states of the actions under consideration. clearly single transitions are special examples of non-atomic actionswhich therefore should more precisely be called not-necessarily-atomic actions! the next example shows that actions may be strongly non-atomic.



there is a construction of the desynchronization of a system based on this idea. consider a system which is given as an expression in parallel operations of automata. suppose every transition in each component automaton of the system is replaced by an action consisting of three transitions analogous to the actions in this example then the components of the system synchronize with arbitrary duration instead of duration 1. as an example consider the dining philosopher problem as described in. the desynchronized version in which each of the philosopher and fork actions are divided into begin-action and end-action has the property that the duration of taking a fork may be arbitrarily long, and hence while one philosopher is taking a fork another may eat several meals.



tomata is the structured geometric representation based on three level of abstraction and also a well-established algebra for composition of automatawith-interfaces, based on operations whose definitions are easily understood. timed automata on the contrary are a low-level representation, even if translations from more structured representations like the real-time process algebra atp have been presented. the difference is easily remarked referring to the example of an automatic controller that opens and closes a gate at a railroad crossing described by means of timed automaton in section 7.5 of. this example is a simplified version of the one we gave in section 3: only three components train,gate and controller form the systems because the example does not concern with how the train knows whether it is approaching or leaving the crossing, we could easily do the same example deleting the checkpoints and simplifying train controller and gate controller. in the alur and dill example the connections among the components cannot be immediately read from the graphical representation(only common labels on the transitions of different automaton represent communications between two components). in the automata representing train and gate, specifications and system description are not completely separated, because clock constraints look like implementations. in our model a counter occurs as a subcomponent in the train model to guarantee that if the train does not enter and exit from the gate in the due time interval the error is detected allowing corrective action to be taken.



