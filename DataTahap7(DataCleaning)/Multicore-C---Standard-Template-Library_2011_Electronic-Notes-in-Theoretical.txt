in this paper we argue for a multicore implementation of c++ standard template library for cilk++. we consider the implementation of containers, algorithms, and functors as well. our implementation takes advantage of generative technologies of c++. we also measure the speedup of our implementation.



indeed, memory fences are one of the key sources of performance degradation in communication intensive(e.g. streaming) parallel applications. avoiding memory fences means not only avoiding locks but also avoiding any kind of atomic operation in memory(e.g. compare-and-swap, fetch-and-add). while there exists several assessed fence-free solutions for asynchronous symmetric communications, these results cannot be easily extended to asynchronous asymmetric communications, which are necessary to support arbitrary streaming networks.



the c++ standard template library(stl) was developed by generic programming approach. in this way containers are defined as class templates and many algorithms can be implemented as function templates. furthermore, algorithms are implemented in a container-independent way, so one can use them with different containers. c++ stl is widely-used because it is a very handy, standard c++ library that contains beneficial containers(like list, vector, map, etc.), a lot of algorithms(like sort, find, count, etc.) among other utilities.



the stl was designed to be extensible. we can add new containers that can work together with the existing algorithms. on the other hand, we can extend the set of algorithms with a new one that can be work together with the existing containers. iterators bridge the gap between containers and algorithms. the expression problem is solved with this approach. stl also includes adaptor



in this paper we argue for a multicored implementation of c++ stl. we examine how a set of containers and algorithms can be developed effectively for the cilk++ platform with the assistance of generative techniques. we measure the speedup of applications.



the cilk++ language can be used to efficiently execute our application on multicore machines. in this language, applications run in the cilk++ runtime, which manages parallel execution using computation workers. these workers run on separate operating system threads and there is one worker per cpu core.



cilk++ is a c++ extension, thus c++ stl can be used as general framework for containers and algorithms. on the other hand, stl is not optimized for multicore environment. in this way, stl can be an efficiency bottleneck as it does not support multicore programming. furthermore, cilk++ does not contain a general container and algorithm library.



we reimplemented the vector container of stl to improve its effectiveness. there are several operations on vectors, which can be improved by parallelism, such as creating a large vector and fill its elements with a given value, copying a vector, or growing its internal buffer. some of these operations are done by the constructor, or copy constructor of vector.



cilk++ provides high level constructs to support parallelism such as cilk for, however, they do not work inside of constructors.(it is not implemented yet.) therefore we need to handle the parallelism by lower level constructs: cilk spawn, and cilk sync. the first one starts a new thread and executes a function on it. the second one is waiting for the spawned threads to be terminated.



working with lower level constructs the programmer has to take care of scheduling manually. in our solution we split the main task to as many threads as many cores are in the cpu. as the number of cores is compile time informationa template metaprogram does the splitting process during the compiler compiles the source code. this way we can spare the runtime overhead of determining the number of cores and splitting the process.



the technique is based on recursive instantiation of templates. the struct do aux has two template arguments. the first one is kind of loop variable referring to sub-interval to deal with, and the second is the number of cores. the struct do aux divides the interval into as many sub-interval as number of cores are in the cpu and invokes the process function to the last sub-interval. after that it instantiates itself with the current loop variable minus one, and the number of cores, and invokes the static member function it. when the value of the loop variable is zero then the specialized version of struct do aux is chosen, and the recursion is stopped. this specialized struct does nothing but invokes the process function to the firs sub-interval.



the number of cores, and the constant min growsize are determined by an analyzer program. this program runs before our library is compiled in a computer. we compared the running time of our solution with the vector of stl. we did this test on a quad core 2.4ghz cpu and did with different size of vectors. the



seeing that the majority of the algorithms go through the data structure via iterators, this iteration could be changed to cilk for which was proposed by cilk++. in some cases the access of shared resources takes place inside of the algorithms, which led to development of race condition, this way the insurance of atomicity was our responsibility. we tackled this problem by introducing the reducers that ensures that the given variable modification is atomic.



multicore programming is an interesting new way of programming. cilk++ is widely-used language, that is an extension of c++. on this platform the stl itself is not prepared for multicore programming and no other container/algorithm library is available in this platform. this way, stl can be an efficiency bottleneck in cilk++ applications.



in this paper, we argue for a multicore version of the c++ standard template library for cilk++ platform. we reimplemented containers, as well as, algorithms based on the generic programming paradigm. we have worked out a more advanced framework for functors based on the generative techniques. we have measured the speedup of applications.



