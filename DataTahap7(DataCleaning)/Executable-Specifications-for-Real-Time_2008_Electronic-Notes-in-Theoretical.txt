aadl, rapide, and aid to name a few. these notations seek to provide a(semi-)formal modeling framework wrapped inside an intuitive and expressive design language. of these aid(architectural interaction diagrams) distinguishes itself by virtue of its ability to define different inter-process communications(ipc)s as native features of the language, thus facilitating concise and re-usable system specifications.



the paper is arranged as follows. section 2 outlines the basic concepts of the non-timed architecture design language, architectural interaction diagrams(aid) which this paper extends to create a timed design language: timed architectural interaction diagrams(taid)(section 3). we then illustrate out formalism with two examples of timed inter-process communication. section 5 details related work, and section 6 concludes the paper.



buses are the most critical elements of the aid paradigm. mathematically, they can be seen as transducers that convert transitions of incident components(i.e. components that are connected to them) to system-level transitions. as such, they have two responsibilities: the transfer of data between senders and receivers, and the synchronization of sender/receiver transitions.



l is the set of links. each link connects a component port with a port on a bus. interested readers may refer to the formal definition of links in. it should be noted that for the purpose of the paper, the basic intuition behind links and gates is all that is necessary.



the reason for these assumptions is to separate the modeling of the passage of time from the modeling of system interaction. maximal progress guarantees that an action must occur as soon as all participants are ready to do it. in other words, enabled actions may not be delayed for even a single clock tick. time determinacy ensures that the only ambiguity about the state a system can be in is due to the actions it performs, not just the passage of time. a fuller discussion of these issues may be found in.



section 2.3. for tn, we use all the sos rules for aid and add to it another sos rule(given below) that defines the timing behavior of n in terms of the timing behavior of its constituent components and buses. more precisely the rule will allow a network to do a clock tick only if all the components and all the buses that constitute the network can do a clock transition, and if there is no enabled communication between a component and a bus inside the network.



at each instant of time, the bus checks to see if either of the reader or the writer timed out, i.e. is no longer interested in the communication it initiated. if that is the case, then the bus transitions to an error state.



3). if however, the writer or reader has timed out, then the bus(vide rule 4) transitions to an error state. if when the counter expires, the original writer and reader are still present in the interaction, the handshake is completed and the writer and reader are released(rule 5). else a transition to an error state is made(rule 6).



the intuition behind this is that when an element is written to the fifo, the put logic checks to see if there is another data value with the same tif already present in the fifo. if there is not, then the data is added to the fifo. if there exists a data value with the same tif(i.e. the same time-stamp), then a data collision has occurred or in other words, simultaneous writes to the same location at the same time has taken place. in this case, we allow none of the colliding values to enter the fifo.



note that the definition of tick allows the tif to become negative. a data value with an associated negative tif can be interpreted as a value that has propagated from the head to the tail of the fifo but has still not been read(and thus removed) from the fifo. if more than one data value with a negative tif exists, the one with the minimum tif is the one that is read(since it has been in the fifo for the longest time).



