a concrete case of this is the enterprise architecture language developed by the archimate project. this paper describes a mapping of this language onto uml 2.0. on the one hand, this mapping is needed to concretize the relation between models of the business and ict domains. on the other hand, this mapping will provide the basis for developing a uml profile for the archimate language, facilitating the use of uml tools for making archimate models. in this way, one is able to compensate the disadvantages of writing business models in a non-uml language.



therefore, enterprise architectural descriptions often discriminate between different levels or layers within the enterprise, like e.g. the business level, for the various business domains consisting of the business processes descriptions, the application level, describing the supporting software systems from the outside in terms of functionality provided and(business) processes monitored and guided, and the technology level, providing the physical organisation of the supporting software systems. these levels must be described on their own as well as in relation to each other.



another important weakness of uml is the large number of diagram types, with poorly defined relations between them: uml 2.0[13,14] consists of 13 different mostly unrelated diagrams, each with a different semantics. this means that, without some additional properties or framework, there is no hope of using the current uml 2.0 for modelling the different levels in an enterprise in a sufficiently consistent manner: relations between diagrams on these levels will certainly not remain restricted to diagrams from one diagram language only, so their consistency remains unclear.



architecture description languages(adls) define high-level concepts for architecture description but mostly with a focus on software architecture. the adl acme is widely accepted as a standard to exchange architectural information, also between other adls. there is a translation mapping acme concepts into uml 2.0, with goals similar to those of this paper: concepts in one domain are made available to a large user base and can be supported by a wide range of software tools.



the preceding description and modelling languages cover different architectural domains, but the integration among the domains offered by these languages is weak. the modelling language developed by the archimate project[11,10] aims at describing enterprise architectures in a structured, well-defined way, covering the different levels of the enterprise in an integrated manner. such an architectural description should serve as a basis of stability amidst organizational change: on the basis of such an architecture, interaction and alignment on one level as well as between levels should be analysable and also impact analysis of minor or major adoptions or changes in one domain or with respect to one software system should become feasible, realistic or perhaps even standard.



composite structure diagram: a subset from classes of a class diagram, moreover showing how they are physically connected. particularly, the relationships in a composite structure diagram depict the physical connections between(logical) elements(like classes/objects, packages, use cases). there are two appearances: via ports and connectors or as collaboration(of roles: views on elements).



state machine diagram: it describes local behaviour through state changes of a concrete object while in execution, by performing internal steps or driven by messages received from outside or by sending messages out. at each point in time the current state represents the situation reached by the execution so far. thus a state machine diagram models the local flow of control from state to state within an object, i.e. within a conceptually small part of the system.



strong reason for this insight is that many software systems themselves contain or even are a dynamic model of a concrete organization or of a concrete business process. so the object-oriented model of such a software system itself contains or even is a model of that particular organization or of that particular business process. in principle this indicates a certain suitability of object-orientation with respect to modelling organizations and their activities or processes.



however, as uml and its concepts originally were not geared towards modelling organizations and their activities, let alone towards business architecture, it is not a priori clear how to apply the uml concepts to modelling business architecture, see e.g.,. archimate has developed a metamodel for modelling enterprise architecture. by investigating how the metamodel can be translated into uml, as a by-product we gain more insight into applying the uml concepts to modelling organizations, business processes and business architecture on the basis the guidance provided by the archimate metamodel. this brings us back to the topic of this paper: the mapping of the archimate into uml. in the next section we briefly present and discuss the meta-



the archimate project has resulted in an enterprise architecture modelling language and a corresponding metamodel. this metamodel provides concepts for architecture designs in the context of archimate on a most general level, covering business, application, and technology. the language is being developed by the archimate project and has evolved over the course of the past one and a half years based on validation in practical(customer) cases and because of better understanding and insight of the concepts and their relations.



for this section we reformulate the existing definitions of the archimate concepts. our reformulations of the definitions are an understanding of performed to get the archimate concepts more geared toward facilitating their translation into uml. the concepts are grouped by the three aspects mentioned in the previous section, structural, behavioural and informative.



the original formulations of the archimate concepts can be found in. note that this metamodel is fairly general: as it covers both business domain(business level) and ict domain(application level). so a concept covers two levels. nonetheless we shall present separate(but rather similar) definitions for each level.



object: an object is a logical or physical unit of information that has relevance from a business perspective. business objects are the passive entities that are manipulated by behaviour such as business processes or functions. business objects represent the important items, relevant for the business domain.



actor: actors are the active entities that perform behaviour such as business processes or functions. in the business domain, business actors may be individual persons(e.g. customers or employees), but also groups of people and resources that have a permanent(or at least long-term) status within



in the application domain, the actor is an application component. it is used to model any structural entity in the application level: not just software components(part of one or more applications), but also complete software(sub)applications or information systems. although very similar to the uml component, the archimate component concept strictly models the structural aspects of an application: its behaviour is modelled by separate behavioural concepts, connected to such a component via explicit relationships.



interface: the interface concept can be a business interface or an application interface. a business interface represents the location for accessing the services offered by a business role to the environment. in a broader sense, a business interface also has some behavioural characteristics. it may



collaboration: collaborations represent two or more roles that cooperate to realise certain behaviour. architectural descriptions focus on structure, which means that the interrelationships of entities within an organization play an important role. to make this explicit, the concept of business collaboration has been introduced. collaboration is a collective of roles within an organization which perform collaborative behaviour.



interaction: the interaction concept can be a business interaction or an application interaction. in both cases it is a collective unit of behaviour performed as a collaboration of two or more roles. a business interaction represents the work performed by two or more cooperating business roles in business collaboration.



business processes, functions or interactions. a business event is most commonly used to model something that triggers behaviour, but other types of events are also conceivable: e.g., an event that interrupts a process. a business event is instantaneous: it does not have duration. events may originate from the environment of the organization, but also internal events may occur, generated by, e.g., other processes within the organization.



service: a service is an externally visible unit of functionality that is meaningful to the environment. an organizational service models the externally visible behaviour of a business process or function, as it is offered e.g. to the customers of the organization.



an application service is an externally visible unit of functionality, provided by one or more components, exposed through well-defined interfaces. the service concept provides an explicit way of describing the functionality shared between components or offered by components to the environment. the term business service is sometimes used for an external application service, i.e., application functionality that is used to directly support the work performed in a business process or function, exposed by an applicationto-business interface. internal application services are exposed through an



purpose: the purpose concept represents the functionality of a service seen from the point of view of an external user. it models the intended contribution of a service towards achieving a particular(business) goal, or a set of goals. a purpose concerns a high-level description of some basic functionality in terms of behaviour or even some condition or state supported or enabled by some organizational service, seen strictly from the point of view of some external actor.



meaning: the meaning concept represents the contribution of an object to the knowledge or expertise of some actor, given a particular context. thus, meaning represents the informative value of a business object for a user of such an object. it is through a certain interpretation of a representation of the object that meaning is being offered to a certain user or to a certain category of users.



representation: a representation is the perceptible form, e.g., a document, of the information carried by an object. if relevant, representations can be classified in various ways, for example in terms of medium or format. a single business object can have different representations, but a representation always belongs to one specific business object.



we therefore take the following approach in translating the archimate metamodel concepts to uml. instead of matching archimate semantics with uml semantics, we match properties from the above characterizations. in some cases a match can be found for properties corresponding to different uml concepts. that means, the underlying archimate concepts can be translated to these different uml concepts. where relevant we shall discuss the different possibilities.



we start with analyzing the structural concepts, followed by the behavioural concepts and ending with the informative concepts. the structural concepts are the concepts that are easiest to understand since they are similar to well known structural notions in other formalisms. so they are relatively easy to translate. the behavioural concepts are a bit less common. finally, the informative concepts are even more difficult to understand and therefore to translate, as they are rather uncommon.



in archimate we use a business case called archisurance. the case consists of a relative simple, but nevertheless sufficiently rich example of a number of related business processes within an architectural setting as given by an organization and supported by some software systems. the full case covers a reorganization of an insurance company in terms of the global structure and global execution of their business processes as well of the supporting software systems.



the archisurance case is a business case concerning three parties interacting with each other: an insurance company, an intermediary and a customer. the insurance company cooperates with intermediaries to get in touch with customers wanting to get a contract for an insurance or negotiating to see which insurance is best(and hopefully wanting to have a contract after the negotiation). when a customer has an insurance contract with the insurance company, the intermediary can collect the insurance premium for the insurance company. the insurance company can handle claims from the customer without having to interact with the intermediary.



translation of both models turns out to be fairly straightforward. in both cases however, the resulting uml model lacks detail one normally expects to be present. so the uml models look somewhat incomplete. as both translations are performed step-wise, we shall discuss the effect of the step order on the resulting uml model.



