specifying a security policy that includes both permissions and prohibitions, may lead to conflicts. this corresponds to a situation where a subject is both permitted and prohibited to perform a given action on a given object. we adopt a comparative approach to investigate this problem. we first investigate access control models based on rules, called rule-bac, and present weaknesses that arise when we try to manage conflicts in this model. in particular, rule-bac models fail to provide decidable solution to redundant rules and potential conflicts problems. then, we show how a more structured model, say or-bac(organization



however, when an access control model includes the possibility to specify both permissions and prohibitions, some conflicts may occur. this is the case when a subject is both permitted and prohibited to perform an action on an object. hence, the system might not be able to decide either to allow or deny the access. this problem was investigated by several models(for instance[2,9,7,3,16,5,15,1]). the conflict issue must be addressed by defining a conflict resolution strategy. a conflict resolution strategy consists in a set of rules that enable the system to decide, in case of a conflict, to discard either the positive or the negative authorization. therefore, the resulting access control policy will depend on the chosen conflict resolution policy. thus the security officer should have the possibility to define his or her own conflict resolution strategy in order to obtain a relevant access control policy.



when implementing a given policy, conflicts must be solved, else it should not be possible to decide if a given access must be granted or denied when a conflict occurs. the approach to solve conflicts consists in defining a conflict resolution strategy(crs). the basic principle of a crs is to consider that predicates permission and prohibition only define prima facie authorizations. the objective of a crs is to derive actual authorizations from prima facie authorizations. for this purpose, we shall consider predicates a-permission and a-prohibition to represent actual positive or negative authorizations. thus, a crs will be defined as a set of rules having the predicates a-permission or a-prohibition in the conclusion.



we associate the authorization rules with priorities in order to evaluate their significance in conflicting situations. priorities between access control rules may be sometimes derived from the rules syntactical format. for instance, let us come back to rules r1 and r2 of our previous example. if we consider that rule r1 has higher priority than rule r2, then r2 will never apply and is therefore useless. in this case, we shall say that rule r2 is a redundant rule. to avoid this misspecification, we can conclude that rule r2 must be associated with higher priority than rule r1. in the following section, we shall formally define this notion of redundant rule.



notice also that if there is no suspended nurse or no urgent patient case, then it is no longer possible to apply both rules r2 and r5. so, in this situation, there is no actual conflict. however, in this situation, we shall say that there is a potential conflict between rules r2 and r5, that is a conflict will occur when a suspended nurse and an urgent patient case are both inserted in the domain instance idom. in the following, we shall formally define this notion of potential conflict.



we also introduce two new predicates higher-permission and higherprohibition. higher-permission(s, a, o, p) means that there exists a permission for subject s, action a and object o having a priority higher than p. higherprohibition(s, a, o, p) means that there exists prohibition over s, a and o having a priority higher than p.



in this case, it is never possible to apply both rules r1 and r3 to derive a conflict. we shall say that r1 and r3 are unrelated. it is not necessary to compare the priority of unrelated rules and therefore a partial order relation on priorities is sufficient in this case. unrelated rules are further formalized in section 3.5.



let us consider rules r1 and r2. we can consider that r1 specifies a general case(nurses are prohibited to read medical records) whereas rule r2 specifies an exception to rule r1(nurses are actually permitted to read medical record in case of emergency). exceptions are formalized as follows. let us consider two rules ri and rj and let condition(ri) and condition(rj) be the conditions of ri and rj. definition 15: rule ri is an exception to rule rj if we can prove that:



now, if rule ri is a strict exception to rule rj, then ri should be assigned higher priority than rule rj, else ri never applies and is therefore a redundant rule. we can give the condition to prevent redundant rules. let us consider two rules ri and rj and let priority(ri) and priority(rj) be the priorities of ri and rj.



definition 8 provides means to derive actual conflicts. however, in rule-bac the set of authorizations may change dynamically as the authorization conditions are updated. in the example of section 2.4, if physician john is no longer suspended, rule r3 does not apply to john anymore.



the administrator of an access control policy may want to establish the rule pairs that may lead to conflict situations. in our example, rules r2 and r5 do not generate a conflict as long as nurse peter is not suspended. such a situation is called a potential conflict. to recognize potential conflict situations, we need to model the notion of unrelated rules suggested in section 3.3.



in this case, rule r6 acts as an exception to rule r5 and thus it must have higher priority than rule r5 if the non redundant rule condition presented in section 3.4 is satisfied. now, the potential conflict between rules r2 and r5 is solved: due to rule r6, we can conclude that a nurse is permitted to read the medical record of an urgent case patient, even if this nurse is suspended.



r3 and r4 are not unrelated rules. however, since r4 has higher priority than rule r3, potential conflict is solved. a similar comment applies to rules r2 and r5. finally, due to constraint c1, rules r1 and r3 are unrelated. so, there is no potential conflict between these two rules. similarly, r2 and r4 are unrelated rules where cond subject(s), cond action(a) and cond object(o) are respectively the conditions the subject s, the action a and the object o must separately satisfy so that the corresponding rule applies. constraint(s, a, o) is an additional condition that joins subject s, action a and object o. satisfying the constraint is necessary to activate the rule.



the central entity in or-bac is the entity organization. intuitively, an organization can be seen as any entity that is responsible for managing a given access control policy. hence, hospitals or companies are organizations. a more concrete security component such as a firewall may be also viewed as an organization managing a network access control policy.



however, this is not exactly the way an access control policy is specified in the or-bac model. actually, in or-bac, the access control policy does not directly apply to subject, action and object. instead, the access control policy is specified using the organizational access control predicates o-permission and o-prohibition. for instance, the fact



finally, we consider hierarchies of roles, but also of views, activities and contexts. we associate these hierarchies with both inheritance of o-permission and o-prohibition. for instance, we can consider a role suspended physician and specify that suspended physician is a sub-role of physician. thus, the role suspended physician will inherit from the role physician the permission to consult medical record in context attending physician. this may lead to a conflict if a suspended physician is explicitly prohibited to consult medical records. thus, we now present how to manage conflicts in the or-bac model.



as in prioritized rule-bac, we suggest managing conflicts in or-bac using priorities. we thus obtain the prioritized or-bac model(see section 4.3 below for a formal presentation of this model). in prioritized or-bac, priorities are assigned to o-permission and o-prohibition.



finally, as suggested in section 3.7, one can easily specify automatic assignment strategies in prioritized or-bac. for instance, we could say that security rules that apply to the emergency context have higher priority than other rules. this assignment strategy can be expressed as follows:



applying this rule, we can derive that p2 has higher priority than all other priorities. this can be used to automatically solve the potential conflict between r2 and r5. due to space limitation, we do not further develop how to specify automatic assignment strategies.



in this section, we state the results of a more global look at other works in this domain. in the same way, recent models consider prohibitions and are of course faced to conflicts. this is the case of the model suggested in. in this paper, bertino, jajodia and samarati suggest an authorization mechanism that enables multiple access control policies to be supported. the mechanism enforces a general authorization model that manages both positive and negative authorizations. it also distinguishes between weak and strong authorizations. a strong authorization overrides a weak authorization whereas a strong authorization cannot be overridden. in this model, only conflicts between weak authorizations are manageable and, in this case, the authors propose an approach to resolve conflicts.



a more recent approach is suggested in. this model specifies an access control policy as a set of logical rules expressed in a language that is quite similar to. it suggests managing conflicts using the concept of conflict resolution policy(crp). this idea is quite similar to our concept of conflict resolution strategy. however, definition of a crp is fully separated from the remainder of the policy specification and is only used to provide semantics to the suggested model. in our approach, a crs is used to assign priority levels to permissions and prohibitions. this is used to model the concept of prioritized policy as a single logical theory that includes both the policy specification and the crs. thus, we obtain a more integrated model.



in, a security policy is modelled using modal logic, permissions, prohibitions and obligations being represented using deontic modalities. this provides a richer model in which it is possible to specify, for instance, disjunctive obligations or conjunctive prohibitions. however, this paper only suggests managing conflicts using priority between roles. in, the approach is refined and the concept of strategy to manage conflicts is introduced. however, this strategy is used to define priority between roles and its specification is separated from the remainder of the policy specification. thus, our approach is more integrated and provides means to specify more flexible strategies. moreover, the complexity of reasoning with the strategies is not addressed in.



finally, suggests an approach based on possibilistic logic to handle conflicts in prioritized security policies. the priority is implicitly derived from the format of rules. this is used to effectively construct a stratified theory in which conflicts are solved. however, this strategy is not always effective to solve every conflict and must be refined to handle unsolved conflict situations.



in this paper, we show the advantage of managing conflict in an access control policy modelled in or-bac. since a policy in or-bac is defined at an organizational level(i.e. independently of actual implementation of subjects, objects and actions in the system), we suggest managing conflicts at the organizational level. our approach is based on defining conflict resolution strategy(crs) that is used to assign priority levels to organizational permissions or prohibitions. two different situations may arise when using a crs:(1) redundant rules may exist and(2) potential conflict may arise.



in this paper, we only investigate the problem of conflicts within a single organization. we are also applying our approach to control interoperability of organizations managing different security policies. our proposal is well suited to detect and manage conflicts that occurs when these organizations want to interoperate.



finally, in, ador-bac, an administration model for or-bac is defined and implemented. it would be interested to extend our approach to manage conflicts between administration rules. in particular, ador-bac includes the possibility to specify delegation rules that may generate conflicts with other security rules. managing these conflicts represents further work that remains to be done.



