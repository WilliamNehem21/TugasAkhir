we present a resolution-based proof method for finite-valued propositional logics based on an algorithmic reduction procedure that expresses these logics in terms of bivalent semantics. our approach is hybrid in using some elements which are internal and others which are external to the many-valued logic under consideration, as we embed its original language into a more expressive metalanguage to deal with the satisfiability problem. in contrast to previous approaches to the same problem, our target language is fully classical, what turns the design of the resolution-based rules for a specific many-valued logic into a straightforward task. correctness results, which are proved in detail in the present study, follow easily from results on classical resolution. we illustrate the application of the method with examples, and comment on its implementation, readily achievable by direct translation into classical propositional logic, making use of reliable existing automated provers.



many-valued logics have just celebrated their centennial jubilee, and the computational proof method known as resolution is now commemorating its semicentennial birthday. while a competent extensive overview of the applicability of many-valued logics may be found in, and references therein, different automatic proof methods for such logics have been covered in depth elsewhere(see and). among the variegated proof procedures available for dealing with many-valued logics, the resolution-based methods detailed in and are of particular interest and stand as close neighbours to the method introduced in the present paper. briefly, both of the latter papers present clausal resolution-based procedures, taking as inputs a formula in the language of a particular many-valued logic and transforming it into a labelled formula. labels are used to mirror truth-values at the syntactic level, and are intended to represent the semantic conditions under which a formula is satisfied. the resolution inference rule is applied to clauses containing complementary literals and whose labels are unifiable(in the sense that they represent consistent semantic conditions). the main difference between those proof methods reside on the form of the labels: in labels are singletons whilst in labels are sets of signs.



