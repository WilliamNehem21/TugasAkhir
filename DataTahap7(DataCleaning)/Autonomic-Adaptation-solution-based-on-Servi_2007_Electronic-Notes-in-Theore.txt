we are living today in a world where the computing/telecommunications infrastructure and software services running on top of this infrastructure, are more and more ubiquitous and diverse. we consider a service as implemented by a distributed architecture composed by interconnected components(sometimes called also services). reusable components may be published, upgraded and removed continuously by different providers.



vironments, such as mobile systems, it is impossible to anticipate all context elements/attributes that will influence the service at a given moment. instead of having services that offer only the features anticipated by the service developer, we may prefer to have proactive services able to discover and propose to user new, unanticipated features. also, a service that uses only components a priori defined cannot make use of new components that are published after its creation.



this paper is organized as it follows: the next section presents several existent adaptive systems; section three presents the service-context meta-model, how it is used, and finally its place into adaptive platform architecture. section four describes a simple prototype that we have implemented in order to test our model. the last section presents the evaluation, the conclusions and the future work.



the context is represented today using different model types: list of attributes, object oriented models, ontology based models, contextual graph. in order to have a common model, we propose the use of the same model for the context and the service. this means, the context is also seen as an architecture composed by interconnected contextual components: user, terminal, network, environment, etc.



component attributes. the component attributes are related to the whole component. examples of such attributes are: memory, cpu, apis, os, and they are related usually to the physical and logical resources. each attribute has a name and a definition domain(values).



several contextual components are involved: user that interacts with the forum service through its hmi, terminal that includes two components: the display as output device and the keyboard as input device. the terminal devices are interposed between the user and the software components. the terminal screen visibility may be influenced by external factors as the external light for instance. the network connects the terminal with the internet access point and finally with the server machine. several networks may be concatenated. uplink and downlink are seen as separated filters. the network bit rate may be influenced by the external conditions such as rain for instance. the server machine is a host for the forum server(we may take into account this contextual component for load balancing).



the observer module extracts information about the context and the service. the context and the service are observed using some dedicated components called observers. context elements may be discovered dynamically, using pattern recognition on a webcam recorded image for instance. the service observers concern for instance the amount of memory or processor time used by a component.



the service deploy engine uses java reflection api in order to deploy the service component instances and binds the components together. when a service is deployed, the s-c graph producer initializes the service and context graph. in this case, the context is implicit: the user is always connected to the service through the hmi and each service component always uses the host resources. this example takes into account only one contextual component: the user and only one information flow attribute: the language.



