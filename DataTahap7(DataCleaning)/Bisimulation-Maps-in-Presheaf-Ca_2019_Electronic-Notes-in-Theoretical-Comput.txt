executions(inspired by[10, 28]) because the branching structure of a state in the presence of invisible actions is described by the set of executions(not states). this situation further escalates when one is interested in infinite executions(e.g. fairness properties[17, 25]) or dense executions which are omnipresent in hybrid systems(e.g.). the point is not that executions are inexpressible in a coalgebra, but rather that we need a semantic framework where they are treated as first-class citizens just as states are in a coalgebraic framework. thus, our hypothesis is that behaviour of a system is given solely by its executions.



the objective of this section is to describe our semantic framework in which one can model behaviour of a dynamical system. by behaviour of a dynamical system, we understand some phenomena that evolve over time. our aim is to formalise this intuition. we begin by modelling time as a small category t, whose objects are points in time and arrows describe passing of time.



one possibility is to use the open maps of joyal et al., which gave a unified definition of functional bisimulations over the range of computational models. in particular, when invoked in a presheaf category, open maps correspond to natural transformations whose naturality squares are the weak-pullback squares in set(see[8, proposition 2.3]). nevertheless, an open map falls short in capturing the complete refinement point of view since an arbitrary open map may not even be a surjective map at the level of executions; i.e., our implementation may not even implement or cover all the behaviour present in the specification.



remark 3.2 it is interesting to note that a similar definition for sheaves can be derived from the definition of embedding-open maps as given in. first, note that sh(c,j) is concrete over psh(c) due to the forgetful functor i, which is fully faithful. moreover, embeddings in this concrete category are actually monomorphisms. this is because any mono is a regular mono in sh(c,j) and the faithful functor i preserves regular monos(since i is right adjoint to the associated sheaf functor a). lastly, every regular mono is an embedding whenever the faithful functor preserves regular monos[2, proposition 8.7.3]. thus, we have the exact same definition of bisimulation maps in sh(c,j).



we end this section by capturing functional bisimulations in terms of bisimulation maps whose proof can be extracted from the proof of theorem 4.3. note that a similar theorem was proven earlier in the seminal paper for functional bisimulation; however, the difference is that we use bisimulation maps(not open maps) in our characterisation.



before we prove theorem 5.11, we need a category theoretic result(which is probably folklore; see[26, exercise iv.2.7] for a dual statement), namely, that the colimit of a diagram can be decomposed into the coproducts of the colimits of diagrams with smaller shapes under certain restrictions.



open maps between presheaves as defined in are instances of the open maps in a topos as introduced in. this is because open maps between presheaves(as in) are natural transformations whose naturality square is a weak pullback in set(cf.[22, example 1.1]). we discarded the open maps between presheaves because they are incapable of establishing complete refinement between an implementation and its specficiation; though it is still interesting to assert whether the bisimulation maps(def. 3.1) satisfy the axioms given in.



prefix orders are generalisations of trees proposed in to study executions of dynamical systems in an order theoretic manner. in, the authors defined functional bisimulation between prefix orders by reinterpreting the definition of open maps in concrete categories. our bisimulation maps are an instance of this general definition(section 3). it is unclear, though, how to enrich prefix orders with observations so that we can model labelled executions in a uniformly. this question lead us to model observations as presheaves.



