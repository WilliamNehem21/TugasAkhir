current tools for automated deduction are often powerful and complex. due to their complexity there is a risk that they contain bugs and thus deliver wrong results. to ensure reliability of these tools, one possibility is to develop certifiers which check the results of tools with the help of a trusted proof assistant. we present a framework which illustrates the essential steps to develop stand-alone certifiers which efficiently check generated proofs outside the employed proof assistant. our framework has already been used to develop certifiers for various properties, including termination, confluence, completion, and tree automata related properties.



due to their increased power, automated provers like sat-solvers, smt-solvers, automated first-order theorem provers, model checkers, termination provers, etc., are becoming increasingly popular for software verification. however, the complexity of these provers comes with the risk of bugs that cause wrong answers(e.g., a termination claim for a nonterminating program). hence, the reliability of the generated answer is usually reduced whenever the complexity of the prover is increased.





it is well-known that solvability of pcp instances is undecidable in general. we want to validate certificates for solvable pcp instances. this is a trivial certification task, but can be used to illustrate various design choices and challenges in the process of developing a certifier. we assume that the certificate numbers each pair of words in p and provides the solution as a list of numbers.



to increase reliability, we can make use of lcf-style[10,11,19] proof assistants, i.e., proof assistants whose soundness relies on a small trusted kernel and where definitional packages allow us to write more high-level proofs which are then broken down into kernel-primitives without adding new axioms.



where errors are indicated by inl and proper results by inr. booleans are now replaced by type je check which is an abbreviation for je+ unit. then inr() corresponds to true and inl e to false enriched by the error message e.



here, shows is the type of functions from strings to strings, which allows for constant time concatenation. for each instance ja of the show-class, there is a function shows-prec that takes a precedence(which may influence parenthesization) and a value of type ja. the given value is turned into a string, wrapped inside the shows type. to display lists in a special form, shows-list can be used, e.g., to allow special treatment of strings, which in haskell and isabelle are just lists of characters. the show-law which should be satisfied according to the haskell documentation(and more or less states that a show-function is not allowed to modify an incoming string) is enforced in the isabelle class definition.



this implication clearly lacks any connection between s and pcp, i.e., if the certifier accepts s, one only knows that some pcp is solvable, which is not necessarily the pcp instance that is encoded in s. and indeed, if the parser would be written in a way that it always returns the trivial pcp instance{(a, a)} with solution, then the certifier will never reject any proof.



where at least the returned message m is related to the semantic object, pcp, via the show function show. then the user of the certifier can inspect whether the string obtained from pcp corresponds to the intended input that is given in s. clearly, here one has to trust the show function, but usually this is less complex than the parser and hence, also more reliable.



instead of a human inspection we also integrated a way for an automatic comparison that the parsed input corresponds to the given input string. to this end, we make use of an xml show function to-xml which outputs the semantic object pcp as an xml-string. then one can also easily check whether the string obtained from the parsed input is contained in the original input s, i.e., in(4) and(5) one gets the additional guarantee:



of course, if one enforces such a strict comparison via strings, then the input xml string has to be normalized in some way, e.g., it must not contain comments, since the show function to-xml will not be able to invent the right comments. moreover, there must be consensus about the input xml string and the show function, whether to print<foo></foo> or<foo/>, etc.



we presented a framework to develop stand-alone certifiers, with a simple certifier for pcp as an example. to adapt it to other certification problems, of course one has to adapt the major soundness proofs, but the method of integrating error messages, and the theories on parsing, show functions, etc. should all be easily reusable.



