over the last decade, software architecture emerged as a critical issue in software engineering. this encompassed a shift from traditional programming towards software development based on the deployment and assembly of independent components. the specification of both the overall systems structure and the interaction patterns between their components became a major concern for the working developer. although a number of formalisms to express behaviour and to supply the indispensable calculational power to reason about designs, are available, the task of deriving architectural designs on top of popular component platforms has remained largely informal.



note that class m implements the context for process m, by declaring and grouping its two actions, but still, it does not capture its behaviour. in fact, there is no method invocation order subjacent to class m, whereas in process m one can only perform method coffee() after method coin() has been activated. even more, in process m the execution of method coin() is immediately followed by a single execution of method coffee(). the specification does not allow, for example, that several calls to coin() precede the coffee() call or that several calls to coffee() follow a coin() insertion.



interaction restrictions within a process are handled in ccs by the new combinator. its implementation at the prototype level resorts to the accessibility mechanisms of the.net platform. thus, for every variable in the scope of a ccs restriction, the corresponding method is set to an internal method, rather than to a public one, as used so far in our toy example.



both ways provide an encapsulation of the entire system and a simple way to test it. they rely on the introduction of an additional class, called the system interaction class. this class encapsulates the entire system, exposing only its free variables and ensuring a correct execution order for all the assembled processes.



the buildsystem function relies on several auxiliary functions, but three of them really constitute the building blocks where the entire automatic translator stands upon. these functions analyse the ccs specification and were already mentioned above as central functions for an automatic implementation. they are, respectively, getfinalports, which computes all the final ports of a given process, getinitialports, which computes all the available initial ports when a process executes and finally portpreds, which finds all the possible preceding ports of a given port in a given system.



skeleton architecture in.net, one has to perform the two-phase procedure described in the previous section. for illustration purposes, we shall consider here process signal in some detail, and abstract a little of the entire system, though some calls to other processes which interact with signal will appear in the implementation. a similar procedure applies to the other processes.



function buidsystem relies on many other functions, many of them working exhaustively with strings and string manipulation. to improve this sort of operations a new type shows= string-> string was introduced. the advantage of resorting to shows values, instead of directly working with string, is that functional composition with shows maintains linear complexity in functions dealing with many string concatenations.



the resulting implementation of the process specification must then be stimulated with the initial action string(in this case the empty string), and the result written to a.cs file or passed to other function. the result of applying function buildsystem is the different.cs files implementing each process defined in the ccs specification. for example, signal.cs contents is as follows:



note that every method receives a boolean value. this has to do with cross reference calls when treating calls to complementary actions. its objective is to prevent the system to get into an infinite loop when complementary actions are called. this is achieved by forcing false as an argument in every user call to a method. only internal calls use the value true to call other complementary actions. this protocol guarantees that each method can inspect if it is being called by an internal call and therefore not needing to call the method that called him again from users calls that do need to check if there are complementary actions to be called.



skeletons, able to be re-used in architectural design. recall that a software connector[7,5,2] is an abstraction intended to represent the interaction patterns among components, the latter regarded as primary computational elements or information repositories. the aim of connectors is to mediate the communication and coordination activities among components, acting as a sort of gluing code between them. examples range from simple channels or pipes, to event broadcasters, synchronization barriers or even more complex structures encoding client-server protocols or hubs between databases and applications. all of them can be specified in a process algebra notation(as in, e.g.,[1,12]) and, therefore translated to.net skeletons.



d. garlan. formal modeling and analysis of software architecture: components, connectors and events. in m. bernardo and p. inverardi, editors, third international summer school on formal methods for the design of computer, communication and software systems: software architectures(sfm 2003). springer lect. notes comp. sci, tutorial,(2804), bertinoro, italy, september 2003.



