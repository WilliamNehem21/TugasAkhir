the paper is organized as follows. section 2 discusses related work and presents preliminaries on orc, rewriting logic, and maude. the reduction semantics is then presented in section 3. its further refinement into a distributed object-based semantics and the verification of an online auction case study are covered in section



several orc semantics have already been given. a precise but informal operational semantics for orc was given by misra in; we consider this as the standard against which the success of any formal operational semantics should be measured. a formal sos asynchronous operational semantics has been given by misra and cook in; but since this asynchronous semantics allows some undesirable behaviors, a refinement of the asynchronous semantics into a synchronous semantics, distinguishing between internal and external actions was also given in. different denotational semantics of orc for reasoning about identities and algebraic laws about the language[13,14], and for formally analyzing dependencies in program execution were also proposed. moreover, encodings of orc in petri nets and the join calculus that reveal some of the subtleties of the semantics of the language were given in. most recently, ian wehrman et al. proposed a relative-time operational semantics of orc by extending the asynchronous sos relation of to timed events and time-shifted expressions.



orc is a theory of orchestration, proposed by j. misra, to model the smooth integration of web services. the orc model is fairly minimal, yet powerful enough to express a wide range of computations. orc is based on the abstract notion of sites and the composition of the services they provide. a site is a basic service that provides a computation of some kind. for instance, cnn(d) and bbc(d) are sites that return the news for the given date d, and add(x, y) is one that returns the sum of its arguments. sites are assumed to exist, and the computations they provide constitute the data processed by orc expressions. a site, when called, produces at most one value. when a site responds to a call with a value v, the site is said to publish the value v. moreover, site calls are strict, in the sense that a site call cannot be initiated before its parameters are bound to concrete values.



the program implements a prioritized site call. site m is given priority over site n, in that a response from m, if received within one time unit, would be the value published by the expression. otherwise, either value published by m or n is published.



rewriting logic is a general semantic framework that unifies in a natural way a wide range of models of concurrency. in particular, it is well suited to both give formal semantic definitions of programming languages, including concurrent ones(see[15,20] and references there), and to model real-time systems. furthermore, with the availability of high-performance rewriting logic implementations, such as maude, language specifications can both be executed and model checked.



clock: the clock field(clk: cm) maintains a discrete time global clock modeled using the domain of natural numbers(m is a natural number). we shall see later in section 3.4 how the clock field is used to give the timed semantics of orc.



into the message pool as a result of a site call, it is converted into the message[self, app(m, c, rand), hn], which represents a potential response back to self, a reference to the current expression. the operator app(m, c, rand), whose definition depends on the site m, associates a pseudo-random delay to responses from remote sites. once a response from m is returned, the site return rule may fire.



the distributed orc auction program auction presented here was inspired by the orc auction example given in. the program uses a few expression declarations that we briefly describe first(a detailed discussion of the program and the following analysis can be found in). the two main declarations are postingdecl and biddingdecl. postingdecl defines an expression posting(s) that gets items that are available to be advertised from the seller site list s, which is given below 7.



the bids expression collects bids in rounds, each lasting for one time unit. in each round, the maximum bid is computed and published by the site maxbid, and then used as the minimum bid for the next round. the collect expression(declared by collectdecl shown below) returns a list of bidding pairs of the form(bid, bidder).



along with six site objects:(1) a seller site object whose name is seller 0;(2) three bidder site objects(named b0, b1, and b2);(3) a site object for the auction site, which manages the bidding process; and(4) a site object for the maxbid site. in auction, we assume that seller 0 has two items t1 and t2 for sale and that bidders follow different bidding strategies. for simplicity, we assume no communication delays, and allow enough clock ticks for program completion.



