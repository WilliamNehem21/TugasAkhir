recently, user preferences for computing have changed because of the latest developments and enhancements in mobile computing technologies. several reports and studies have presented the importance of mcc and its impact on mobile clients and enterprises. for instance, and according to a recent study by abi research, more than 240 million business will use cloud services through mobile devices by 2015 and this will push the revenue of the mcc to$5.2 billion. moreover, the usage of smartphones has increased rapidly in various domains, including enterprise, management of information systems, gaming, e-learning, entertainment, gaming, and health care. although the predictions that mobile devices will be dominating the future computing devices, mobile devices along with their applications are still restricted by some limitations such as the battery life, processor potential, and the memory capacity of the smds. nowadays, modern mobile devices have sufficient resources such as fast processors, large memory, and sharp screens. however, it is still



this paper is organized as follows: section 2 explains the essential background concepts and terminology, including cc, the mcc concept, and computation offloading. section 3 presents the offloading approaches. a comparison between the different offloading frameworks and their critical issues is discussed in section 4. section 5 highlights general issues and challenges in computation offloading for mcc. finally, section 6 gives a summary and points to future work.



(1) enormous computing resources available on demand,(2) payment for use as needed and on a short-term basis(storage by the day and release them as needed), and(3) simplified it management and maintenance capabilities. cc provides clients with different applications as services via the internet. as examples of public cc we can list windows azure and amazon web services(aws). windows azure is an open and flexible cloud platform which provides several services to develop,



deploy and run web applications and services in cloud data centers. aws, which is considered as an example of a public computing tool, provides users with two models: infrastructure as a service and software as a service. these services allow the user to use virtualized resources in cloud data centers. computational clouds implement a variety of service models in order to use them in different computing visions.



the first step is application partitioning which is very important for computation offloading. it divides the application into offloadable and non-offloadable components meaning which components to retain on the mobile device and which to migrate to the cloud server. the decision whether a component is offloadable can be taken based on different information. the programmer can annotate application components for example through a special api as offloadable. compute intensive parts that are candidates for offloading can be identified also by source code analysis in combination with performance prediction or via application profiling. if the partitioning is done at design time, both techniques have a limited accuracy since they do not take the real execution context into account, when the application is run.



the offloading decision is the final step before remote execution is started for offloadable components. whether an installed remote component is used in the smd application or not depends typically on the execution context. if the decision is taken at runtime, more precise information is available, for example, the smd might even not have a wireless connection or the energy consumption for transferring the data for the remote execution might simply be too high. whenever the situation changes, the offloading can be adapted. such a runtime decision induces some overhead that typically is not present if the decision is taken at design time.



according to when the decision is taken to offload computation on a remote server, we can distinguish two types of offloading frameworks. the first class is static offloading frameworks. here all the presented steps are performed at design time, before the application is started on the mobile device. the other classes are dynamic offloading frameworks. in those frameworks, at least the final decision whether to offload a computation is taken at runtime. the other two steps can be executed at design or runtime. for example, a framework that is based on user annotations of offloadable components and on preinstallation of the components on a remote server will be called a dynamic offloading framework, if it decides at runtime whether it is better to offload computation or not.



this section introduces different existing offloading frameworks. for each of the frameworks we identify the approaches used in the three steps introduced in the previous section. at the end of the section, the different frameworks will be compared with respect to their most important properties.



the partitioning step in this framework combines static program analysis with program profiling to produce a set of offloadable components while meeting some constraints, such as methods that use mobile sensors should be executed locally. the framework uses thread level granularity for partitioning of applications. the role of static analysis is to discover constraints on possible migration points while profiling aims to build a cost model for offloading and execution. partitioning and integration of the applications are performed at the application level.



reachable heap objects, and then resumed. on the cloud server, when the migrated thread reaches a re-integration point, it is suspended, packaged, and then shipped back to the mobile device. finally, the received packaged thread is merged into the state of the original process in the mobile device.



maui is a framework that considers energy saving on smartphones as the main objective function for the offloading process. maui is a highly dynamic offloading framework because of a continuous profiling process. the framework hides the complexity of a remote execution from the mobile user and gives the impression as if the entire application is being executed on the mobile device.



the authors presents different experiments in order to compare the energy consumption of running three applications(face recognition, chess, and video) standalone on the smartphone versus using maui for remote execution to servers that are located elsewhere. the face recognition application can achieve strong energy savings when using maui. on the one hand, the results of the conducted experiments showed that the energy consumed when offloading code using 3g is 2.5 times higher than offloading code to a close server. on the other hand, the energy savings for both video and chess game are less strong but they are still important; when offloading to a close server, maui saves 45% for chess and 27% energy for the video game.



satyanarayanan et al. suggest in a vm based cloudlet framework. a cloudlet can be defined as a hosting environment for offloaded tasks that is deployed to remote resources, as different as individual servers or parallel systems. cloudlets are virtual-machine(vm) based on support scalability, mobility, and elasticity. they are located in single-hop nearness to mobile devices.



to the cloudlet) are used by the mobile client to specify the suitable cloudlet for computation offloading. once the cloudlet is determined for offload, the mobile client sends the application code and the application metadata to the cloudlet server. the cloudlet server deploys the application code in the guest vm. once the deployment is done, the execution of the application is launched.



we can take a scenario where the user must execute a computation intensive application. at runtime, the application discovers a nearby cloudlet and offloads the computation intensive mobile application. however, because of loss of network connectivity, the mobile application can find a different cloudlet and run the application in a short time.



sharing the same concern but from a different perspective, qian et al. present in a system that monitors application and device status and that automatically decides where the code should be executed. the goal of jade was to maximize the benefits of energy-aware computation offloading for mobile applications while minimizing the burden on developers to build such an application.



profiling: in order to make correct offloading decisions, the framework should have updated information concerning the status of the application and the device. application profiling is the process of collecting information about programs, such as energy consumption, data size, execution time, and memory usage. similarly, device profiling collects information about devices status, such as battery level, cpu usage, and wireless connection.



in order to check the amount of energy that jade can save for mobile device, authors run face detection application on a mobile device. the application performs face detection on 50 pictures with size of each less than 200 kb. results showed that jade reduces the power consumption for face detection application. average power consumption was decreased by 34%.



zhao et al. present in the mirror server framework that uses telecommunication service provider(tsp) based remote services. a tsp is a type of communication service provider which provides voice communication services such as landline telephone services. mirror server extends capabilities of smartphones by providing three different types of services: computation offloading, security, and storage. mirror server is a powerful server which retains vm templates for different mobile device platforms.



in the preparation step, a new vm instance is created. this vm is called mobile mirror and the mirror server takes care of managing and deploying the mobile mirrors on a computing infrastructure in the telecom network. applications are executed in the mirror vm instances and results are returned to the smd. the framework employs an optimized mechanism for offloading.



cuckoo is a dynamic offloading framework as it takes the offloading decision at runtime and offloads the well-defined components of the application. in case the remote resources are not reachable(i.e. network connection is not available) then the application can be executed on local resources(the mobile device).



the framework can offload the whole or part of an application to a cloud server. the prototype of phone2cloud is implemented for android and hadoop environment(to serve as a cloud). it consists of several components, including an offloading decision engine, a local execution manager, a bandwidth monitor, a resource monitor, an execution time predictor, a remote execution manager, and an offloading proxy that links the offloading decision engine to remote execution manager.



for instance, face finder application costs more energy on smartphone than on a cloud server and the difference between the two costs gets bigger as input grows. the reason behind this is because data transmission costs less energy than running the application locally. moreover, the energy consumption in smartphones grows faster than that on the cloud server. thus, face finder application should be offloaded to cloud.



annotation is one of the important attributes in partitioning step. it can be seen as a metadata added to the source code. the current partitioning algorithms used in the offloading frameworks can be categorized as(a) automatic and(b) manual.



it can be seen from the presented frameworks that they use different approaches to offload intensive tasks to remote cloud servers. however, none of them use or adopt containers technology such as linux containers(lxc). lxc is attracting researchers these days as a lightweight alternative to full machine virtualization such as the common known hypervisors such as kvm or xen. recently, research suggests that applications running in containers can achieve approximately same speed in memory, processing and also network throughput as if they were running on a physical machine. lxc is considered as an os level virtualization where each container has its own environment called a namespace where specific processes are running and isolated from the rest of the system. the usage of containers instead of vm will be a good idea since it is lighter than vm.



one of the challenges in the current computation offloading frameworks is the diversity and heterogeneity of smartphone architectures and operating systems. this diversity is seen in the following example: maui is an offloading framework which is applicable for the.net framework whereas mirror server is a framework which is compatible with the android platform. a consistent access to cloud services is expected wherein smds are enabled to access cloud computing services regardless of the installed operating system or the used hardware. a standardized offloading framework for different smartphone platforms is still a challenging issue in the mcc field.



in, the authors focus on optimizing tasks and computations, and they explore secure offloading of applicable linear programming(lp) computations. in this paper, authors build their work based on the decomposition of the lp computation offloading into public lp solvers running on the cloud and private lp parameters owned by the customer. to achieve an efficient and validate results, the authors focus on the fundamental duality theorem of lp computation and come up with the essential conditions that must satisfied by correct results. bugiel et al. present in an architecture for secure outsourcing of data and arbitrary computations to an untrusted commodity cloud. the architecture proposed in their approach consists of two clouds(twins): a trusted cloud and a commodity cloud.



the security threat is advancing in a quick manner more than we can keep up with it. security techniques need to enhance and progress constantly to meet new changes and new offered services. thus, it is no longer possible to define a security system that would solve all the security threats at once.



the available computation offloading frameworks still need to be automated. this will help the offloading process to be performed in a seamless fashion while discovering the surrounded environment[5,9,14]. the achievement of such automation is not an easy task as it needs the implementation of a protocol dedicated to finding and discovering services depending on the current context and its constraints.



(2) mobile cloud computing, and(3) computation offloading. more specifically, it presents existing frameworks for computation offloading along with the various techniques used to enhance the capabilities of smartphone devices based on the available cloud resources. the paper investigates the different issues in current offloading frameworks and highlights challenges that still obstruct these frameworks in mcc. moreover, the paper shows the different approaches that are used by the frameworks to achieve offloading. some of these approaches use static offloading while others employ dynamic offloading. even though there exist a variety of approaches, all of them target the same objective which is the improvement of the smartphone device capabilities by saving energy, reducing response time, or minimizing the execution cost.



we notice that current offloading frameworks are still facing some challenges and difficulties. for instance, lack of standard architectures. this shortage leads to more complications while developing and managing a proposed framework. finally, it is important to come up with a lightweight paradigm or model that will help to overcome the difficulties and minimizing efforts while developing, deploying, and managing an offloading framework.



