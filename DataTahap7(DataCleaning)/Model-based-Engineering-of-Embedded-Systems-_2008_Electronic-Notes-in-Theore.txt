hybrid chi is a process algebra for the modeling and analysis of hybrid systems. it enables modular specification of hybrid systems by means of a large set of atomic statements and operators for combining these. for the efficient implementation of simulators and the verification of properties of hybrid systems it is convenient to have a model that uses a more restricted part of the syntax of hybrid chi. to that purpose the linearization of a reasonably expressive, relevant subset of the chi language is discussed. a linearization algorithm that transforms any specification from this subset into a so-called normal form is presented. the algorithm is applied to a bottle-filling line example to demonstrate tool-based verification of chi models.



the outline of this paper is as follows. in section 2 the input language for the linearization algorithm is defined. the normal form that is the output of the linearization algorithm is defined in section 3, and section 4 contains the linearization algorithm itself. in section 5, the linearization algorithm is illustrated by means of a case study. concluding remarks and future work are discussed in section 6.



for many of the core process terms introduced before, there is additional, more user-friendly syntax available(see[5,20] for a complete overview.) trivially, the user-friendly syntax that is defined in terms of process terms that belong to the input language of the linearization algorithm as defined above, can be used as input as well. a list of these additional process terms that are used in the bottle filling line example in section 5 is given below.



besides the specification of delay by means of delay predicates, arbitrary delay can be described by means of the any delay operator[p]. the resulting behavior is such that arbitrary delays are allowed. when[p] delays, p remains unchanged and its delay behavior is ignored. the action behavior of p remains unchanged in[p].



parallelism can be specified by means of the parallel composition operator. parallel processes interact by means of shared variables or by means of synchronous point-topoint communication/synchronization via a channel. channels are denoted as labels(identifiers). the parallel composition p q synchronizes the time behavior of p and q, interleaves the action behavior(including the instantaneous changes of variables) of p and q, and synchronizes matching send and receive actions. the synchronization of time behavior means that only the time behaviors that are allowed by both p



process term x denotes a recursion variable(identifier) that is defined either in the environment of the process, or in a recursion scope operator process term|[r...:: p]|, see subsubsection 2.2.9. among others, it is used to model repetition. recursion variable x can do whatever the process term of its definition can do.



|[ d:: p]| is introduced, where d denotes declarations of local channels, local variables and local modes. it is allowed that the local variables have been declared on a more global level also. any occurrence of a variable in process term p that is declared in d refers to the local variable and not to any more global declaration of the same variable name.



the initial volume vt0 of the storage tank, and the value qin of the flow that is used to fill the storage tank. the constants qset, vtmax, and vbmax define the maximum value of the bottle filling flow q, the maximum volume of the storage tank, and the filling volume of the bottles, respectively. the model fillingline consists of the algebraic variable q, the channels open and close, and the parallel composition of the process instantiations for the tank and the conveyor.



in our linearization algorithm, the number of recursion variables is linear in the number of variables of a process term, except in the case of parallel composition. in that case, the number of recursion variables can grow exponentially. we expect that this situation can be improved, some progress is reported in.



