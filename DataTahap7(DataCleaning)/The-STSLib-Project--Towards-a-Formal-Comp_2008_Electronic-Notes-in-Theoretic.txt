considering java source code generation, the constructive approach of coglio and green is relevant. in this paper, the authors show that a constructive approach, generating code from specifications, can be a valuable alternative to usual code verification. the usual way is to verify legacy code by a post-hoc method of proving certain properties, or possibly functional correctness. but the combinatorial difficulty of a post-hoc approach has generally prevented the community from being able to prove full functional correctness,



as the reader may see, this product defines an sts with pairs of states and pairs of events. this synchronous product can be extended to a n-ary product and to any depth. the extension of the synchronous product of automata contains in the result the structure of the composite. thus, we not only have states and transitions, but composite states, composite transitions, composite events and so on. this is valuable to get an exact understanding about the events and the conditions occurring in a complex system.



abstraction techniques such as[9,6,11] may be used in our context, but are currently only possible with a manual transformation step. some abstractions are simple to perform on our sts either on the dynamic part or the data part, a comprehensive analysis is under study. for example, we want to check that an existing card is either owned by the proper client or by its connected till or lost. this safety property was proved by abstracting the data of the system into the card identity which is also the client id. the global product



a design of this case study has been done with lotos and the cadp toolbox. the lotos description of the processes appeared in. the lotos description is closest to our sts description and an automated translation is even possible. however cadp bound the data types, we use really strict bounds and we cannot compute the bcg representation(the internal lotos representation) even with one client and one till.



our long term objective is to provide a java compiler which is able to translate sts, both the state machine part and the data part, and architectures into java code. currently we defined an experimental interpreter. there are two main parts in this: the implementation of the rendezvous we have at the specification level and the translation of the sts data part into java. the first part was detailed in and this section describes the principles of the second part. the specification process is the following: the user generates, from the sts dynamic part, a skeleton of the adt with the signatures, then he fills the axioms part and finally a code generator produces the full java class and its interface.



type the emitted type, ii) a guard is a boolean function of the current data type, and an action is a function of the current data type with as resulting type this current data type. in case of a receipt the guard and the action takes as additional parameters the typed receipt variables. in case of an emission, the action takes as additional parameters variables corresponding to the emitted types. in the usual terminology of adt, guards and emitters are called observers and actions belongs to the constructor category.



our experimental generator relies on some hypotheses but the original thing was to generate full imperative java code from data type description. the current hypotheses are a prefixed grammar, and the lack of operator overloading. while these features do not impose technical difficulties, they will complicate the grammar. another restriction we are able to relax is the monogenerator constraint since we have already investigated this problem in. this previous work explored object-oriented class generation representing a data type with several generators. currently our translation process preserves the axiom ordering. we have to investigate a less strict approach allowing more general left conclusion terms and a support to check axiom exclusivity(for instance using critical pairs computation).



our library provides a compositests java class, which defines a list of subcomponents, the locations of the dynamic and data parts, the internal connections, with the modal operator and the external connections. from the internal connections and the modal operator, a list of synchronization vectors is computed. these vectors serve to build the locks as needed to manage the rendezvous mechanism. in addition to this, the composite defines a scope which may hide or export some ports(and the associated events) to outside. it has a similar role to the hiding operator of process algebras. a parser and a loader have been designed for the composite structure which are able to handle complex architecture descriptions. this raises the issue of defining a global context class which memorizes the component(primitive or composite) al-



one important and future task on the verification side is to define and implement abstraction techniques. the second task is to elaborate a concrete syntax for hierarchical components and to implement a java compiler based on our experimental interpreter. another future perspective is to prove the translation process into java code and the correctness of our rendezvous mechanism.



