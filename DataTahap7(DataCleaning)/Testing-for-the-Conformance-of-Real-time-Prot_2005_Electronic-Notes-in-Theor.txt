the priority inversion problem arises when prioritized processes concurrently attempt to enter critical sections. this phenomenon results in extremely pessimistic estimations of worst case response times for real-time processes. various protocols against priority inversion have been proposed in the literature and are available at system call level of operating systems and run-time executives. they belong to two major families of protocols: the priority inheritance protocols(pip) and to the priority ceiling protocols(pcp). these protocols have in common that they allow to derive more optimistic worst case response times.



in contrast to the importance of this predictability aspect in the context of time-critical applications a lot of pipand pcp-implementations are not correct and permit the violation of time bounds. this article presents an effective and flexible tool set applied here for the validation of the implementations of protocols of the pcp-family. besides the manual setup and instrumentation major parts of the black-box validation process are executed automatically.



a large number of operating systems and run-time executives are contending for the market of real-time and/or embedded applications. in this context the major strategy of advertisement is to demonstrate the completeness in fulfilling the essential real-time features. one of these is the availability of one or more protocols against the phenomenon of priority inversion.



the reactive aspect of the protocol is specified by statecharts. interaction in the case of these protocols happens between the active objects which are the processes and the scheduler. based on a dtd statecharts are described in a unique notation, representing their nested structure, the states and the transitions from one state to another. e.g. for the method sigentercs from the



up to this point the class diagrams and statecharts specify the syntax of interactions between the processes and the scheduler. the semantics, particularly the prevention of forbidden interleavings, has to be expressed by a third means, here denoted by z-specifications. z was chosen for two major reasons, first the ease to specify the semantic behavior of the protocols in a mathematical fashion which also can be used for formal proofs. the second reason comes from the fact that there are several interpreters available to execute z-specified protocols. so, a z-interpreter is a valuable tool for the validation of protocol implementations.



the invariant pcpsysteminv is strong enough to prove the fundamental properties of the system under the priority ceiling protocol, e.g.: a process p1 owning a critical section c1 will not be blocked under the pcp(corresponding to lemma 9 in). this property can be derived immediately from pcpsysteminv, because those processes(like p2) which are potentially able to block p1(expressed by relation uses) are not allowed to own any conflicting 5 these diagrams are generated automatically. they indicate the actual priority of the running process. these priorities depend on inheritance, due to the blocking relations between processes. blocking is introduced by the unsuccessful acquisition of critical sections. to make this evident the operations enter and leave are depicted by ascending and descending rectangles with the name of the critical section inside. an open, ascending rectangle indicates that the acquisition a critical section was not successful and led to a blocking state for the attempting process.



