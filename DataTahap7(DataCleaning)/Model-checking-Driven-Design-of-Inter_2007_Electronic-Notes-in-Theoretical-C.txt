a number of researchers have explored the use of formal models to understand how cognitive errors can affect user performance. rushby models the behaviour of a forgetful operator who follows a warning display light or a non-forgetful operator without warning lights and checks for an emergent mode confusion. curzon and blandford focus on goal-based interactions and model the behaviour of a user who assumes all tasks completed when the goal is achieved, but forgets to complete some important subsidiary tasks(post-completion error).



section 2 introduces a scenario that may occur during a workshop or conference, in which conference attendees share thoughts and opinions through a web interface motivated by various goals(section 2.1). we also assume a basic structure of the web interface accessible through a login mechanism(section 2.2).



describes the model of the user behaviour in terms of three possible goals that may motivate and lead the user in interacting with the system: expressing own ideas in the forum(section 3.1), establishing contact with a matching user(section 3.2) and gathering information about other users(section 3.3).



section 5 identifies possible security threats(section 5.1), defines a security property which aims to prevent security violations(section 5.2), introduces assumptions on the expertise and forgetfulness of a typical user(section 5.3), shows how to analyse the system design under the given assumptions with respect to the security property(section 5.4), and describes possible improvements of the design to reduce(section 5.5), or even completely overcome(section 5.6), the vulnerabilities of the initial design.



this tool consists of a web-based interface which could be a part of a bigger system, that features a simple discussion forum and a member list. through web pages users gather information on a conference(or some other events) and find/contact other users who are likely to match their interests. the tool, however, does not feature a dating service. matching decisions are instead explicitly made by the user.



we start considering a common scenario that may occur at a workshop or conference. we use the word user to identify the main subject of our scenario. after a lecture or speech a user would like to meet other attendees to discuss impressions or reactions to the attended presentation. such attendees might either be working on similar projects as our user or have similar thoughts about the topic of the presentation. a lecture usually involves a large number of attendees and every single attendee could have a different opinion about the topic. in series of lectures attendees do not have many chances to communicate with one another and ask opinions. therefore it is important to allow the user to search and initiate communications before attending the conference and in order to make in advance plans and appointments for meetings to be held while being at the conference.



after achieving the goal, the authorised user can either logout or choose a new goal and continue the interaction session with the system. in principle, a cognitively plausible behaviour must include the situation in which the user may leave the interaction session unattended at any time, independently of whether the goal is achieved or not. however, such a situation is unlikely to occur when the user focusses on achieving the goal, but it is much more plausible after the goal is achieved. it is actually common that the user assumes all tasks completed when the goal is achieved, but forgets to complete some important subsidiary tasks(post-completion error), such as logging out of the system. therefore we assume that



after achieving the goal, the authorised user may pursue a new goal(state authoriseduser) or leave the session(state leave). in the latter case, the user may either logout(action logout) or leave the session unattended(action unattended) without logging-out. an unattended open session, after a certain time, which may be short(action short_delay) or long(action long_delay), may be taken over by an unauthorised user(in state unauthoriseduser), who can try to perform any action.



of the information gathering loop, if the information gathering process has been performed outside the system. obviously, the goal_achieved action must be preceeded by the try_contact action. due to assumption(2) in section 2.2 action try_setup may also need to be performed.



process priviliges defines the initial state, in which the user has not logged in yet. after the user logs in(action login), the system checks whether the user has already set a profile(action profile) or not(action noprofile). if the user has not set a profile yet, the state changes to nonmember, otherwise it changes to member. these two states define the two user privileges that correspond to assumptions(1) and(2) in section 2.2. the purpose of action enter is to move to the state corresponding to the appropriate user privilege and to activate the web interface described in section 4.2. user privileges can be changed by the successful execution of action try_setup(from nonmember to member). action logout leads back to the initial state(priviliges).



the other states model the five web pages described in section 2.2. actions users, forum, home, back_to_users and back_to_forum allow the user to freely navigate through the five web pages. note that action logout is only possible from state home1. this means that the user has always to go back to the home page in order to be able to logout.



interface1 is then composed with the user process. in this second parallel composition, the synchronisation must include all user actions that define interactions with the interface. note that we have also included the failure action, which does not occur in the priviliges and interface1 processes(and therefore neither in their parallel composition) in the sychronisation set. this prevents the overall system from performing the failure action, so modelling the following assumption



such an assumption was implicitly made for logout and navigation actions in section 4.2; it is here explicitly extended to all user actions. the purpose of this assumption is to show that the design weaknesses captured by the model-checking analysis presented in section 5.4 are independent of the ability of the user in successfully performing a single interaction with the interface.



ideally, we would like an unattended session to automatically logout on time to prevent security violations. however, in practice, we can just introduce safeguards that minimise the likelihood of security violations, in a way that does not introduce much degradation in the quality and performance of the services provided to the user. in order to find the right balance between security and the quality and performance of services, it is important to analyse the user attitudes and behaviours while interacting with the system. specific attitudes and behaviours may actually reduce the likelihood of some threats and increase the likelihood of others. for example, panicking when the planned action does not appear immediately available on the current web page is an attitude that may lead to the behaviour of leaving the session unattended, so causing a security threat. on the other hand, the attitude of always checking that all tasks have been completed after achieving a goal reduces



in cwb-nc syntax atomic formulae have form{action list} or{-action list}; the former is satisfied by any action that appears in action list, whereas the latter is satified by any action that does not appear in action list. note that a deadlock process satisfies~{action list}, where~ is the negation connective, but does not satisfy{-action list}. the w temporal operator(weak until) ensures that formula pwq is true if and only if p is continuously true forever or until q is true.



note that using{-success} rather than~{success} in formula secure ensures that a deadlock occurring after the goal is achieved falsifies the secure formula. we will exploit this in section 5.3 by checking whether some constrained user behaviours are supported by the interface.



the users of our system are not supposed to be expert in using interactive systems. in fact, some of them might have very low familiarity with computers. the user behavior model defined in section 3 is a very general one and needs to be restricted to capture specific attitudes and behaviours of non-expert users.



the user defined by the system1n process may, however, forget to logout and leave the session unattended even if there is a logout mechanism(e.g. a logout button) promptly available on the current web page. this occurs when actions unattended and logout are both available but unattended is chosen. we model an extreme case of a non-forgetful user, who will always choose a logout action when available after goal_achieved, even when intending afterwards to pursue another goal, and will never leave the session unattended. such a non-forgetful user may be defined by appropriately synchronising the system with the nonforgetful process defined as follows.



the problem is that the logout is not available on each web page, but just on the home page. the users have to properly navigate back to the home page from the page where the goal has been achieved. this might be quite challenging for a non-expert user. in addition, the presence of a logout button on each web page would be a reminder for the user to logout, so addressing also expert but forgetful users.



a problem with the interface defined by system2 is the lack of any protection for forgetful users. although adding a direct logout mechanism to each web page may work as a reminder to the user to logout, users might still forget to logout. property security does not actually hold for system2n.



this process models the presence of an authorised user until action unattended occurs, and then the presence of an unauthorised user, with no authenticated action allowed, until action logout occurs. note that this constraint restricts assumption(5) in section 4.3 to authorised users only.



