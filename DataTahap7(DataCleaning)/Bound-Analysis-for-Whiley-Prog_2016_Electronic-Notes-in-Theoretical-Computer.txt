the whiley compiler can generate naive c code, but the code is inefficient because it uses infinite integers and dynamic array sizes. our project goal is to build up a compiler that can translate whiley programs into efficient opencl code with fixed-size integer types and fixed-size arrays, for parallel execution on gpus. this paper presents an abstract interpretation-based bound inference approach along with symbolic analysis for whiley programs. the source whiley program is first analyzed by using our symbolic analyzer to find the matching pattern and make any necessary program transformation. then the bound analyzer is used to analyze the transformed program to make use of primitive integer types rather than third-party infinite integer type(e.g. using gmp arbitrary precision library). the bound analysis results provide conservative estimates of the ranges of integer variables and array sizes so that efficient code can be generated and integer overflows avoided. the bound analyzer combines the bound consistency technique along with a widening operator to give fast time of solving program constraints and of converging to the fixed point. several example programs are used to illustrate the bound analyzer algorithm and the program transformation.



static program analysis techniques validates the consistency between software specifications and program behaviors using mathematical methodologies. for example, the bound consistency technique is widely used to solve the finite constraint domain problem(a.k.a constraint satisfaction problem). however, the problems of object-oriented program languages, such as side-effect problems or non-deterministic results, makes it a grand challenge to create such a compiler, with automated



whiley is a new and verification-friendly programming language with the aim of resolving verification issues that arise from object-oriented programming languages. whiley verifying compiler can detect bugs at compile-time and convert the program into bug-less java or c code. however, translating high-level whiley programs into efficient implementations has some challenges, for instance, the use of unbounded integers causes substantial slowdown on the performance of whiley implementations.



this paper is organized as follows. section 2 reviews some related works about static analysis, bound analysis and symbolic loop bounds. section 3 describes the bound inference procedure, fixed-point approximation using widen operator, and pattern matching along with program transformation. section 4 illustrates the algorithm of bound analysis with example programs and shows the performance of generated c code with/without program transformation. and the final section concludes the future work.



loop bound analysis is a compiler optimization technique to obtain the number of loop iterations and prove the loop termination. it also can unroll the loop to reduce the compiler heap consumption. the commonly used techniques include pattern-matching and counter increment.



the bound analyzer is implemented as a java plug-in on top of the whiley project. it infers the bounds of integer variables in two phases. first, the analyzer evaluates each wyil code semantics to extracts the constraints on the abstract domain. then the analyzer computes bounds with the bound consistency technique and converge the termination time by using the abstract interpretation-based widening operator.



cfg construction. the analyzer processes each wyil code semantics to build up a control flow graph(cfg) for each function and add it to a map for later use. based on wyil code type, the analyzer creates different types of cfg blocks(see cfg definitions), then extracts the bound constraints and place them into the cfg block.



the gradual widening operator broadens an increasing upper bound to the minimum of possible maximal thresholds. otherwise, the upper bound u stays unchanged. and the operator widens the decreasing lower bound l to the maximum of minimal thresholds. the widening operator is repeatedly applied on the bounds until all the bounds have no changes. the inferred bounds allows the code generator to determine the smallest fixed-sized integer data type. for example, short integers can be used to store the variables in the range of i16min and i16max.



a typical while-loop is classified as incremented or decremented loop pattern(see theorem 3.4 and theorem 3.5). build list pattern is also an extension of whileloop pattern with an additional list and list predicates. as the list is initialized with an empty array and inserted with only one item at each iteration, build list pattern suggests that the list size can be estimated by inferring the number of loop iterations(see theorem 3.6).



the transformer changes the while-loop structure to the for all pattern and divides the program into several parts, including pre-loop, loop header, loop body and loop exit. the pre-loop part is split into s1 and s2 by init; the loop body part is grouped into s3 and s4 by update; s5 is the loop exit. s1... s5 can be preserved and put into the transform program in order without changes(see theorem 3.7).



in nested if-else test cases, the bound results show that the bound analyzer propagates the bounds for each function call and produces context-sensitive bounds that are as precise as the bounds from the industrial frama-c. in the while-loop test case, the bounds analysis result show that the bound analyzer using the gradual widening strategy achieves more precise bound results than frama-c(without unroll-loop option). in the dynamic-sized list test case, the performance chart shows that the program transformation speeds up the generated c code, but allows the bound analyzer to replace the dynamic list by a fixed-size array with in-place updates. this will be a good basis for generating parallel code in the future.



the symbolic and bound analysis enable the code generator to make use of fixedsized integers and fixed-sized lists in translation so the generated code avoids integer overflows and out-of-range list errors and reduces memory usage. this makes our project similar to the w constraint operator. but our gradual widening operator increases the precision of bound analysis, and the support for program transformations improves the efficiency of generated code.



