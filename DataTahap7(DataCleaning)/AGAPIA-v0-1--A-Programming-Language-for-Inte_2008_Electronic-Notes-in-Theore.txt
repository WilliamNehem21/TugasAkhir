a model(consisting of rv-systems), a core programming language(for developing rv-programs), several specification and analysis techniques appropriate for modeling, programming and reasoning about interactive computing systems have been recently introduced by stefanescu using register machines and space-time duality, see. after that, dragoi and stefanescu have developed structured programming techniques for rv-systems and their verification, see, e.g.,[14,15,16,17,18].



guage for writing interactive programs with registers and voices(rv-programs) have been presented. one of the key features of the model is the introduction of high-level temporal data structures. actually, having high level temporal data on interaction interfaces is of crucial importance in getting a compositional model for interactive systems, a goal not always easy to achieve(recall the difficulties in getting a compositional semantics for data-flow networks,[4,5,6,8,29]).



in a couple of papers dragoi and stefanescu have developed structured programming techniques for rv-programs and for their verification, see[14,15,16,17,18]. here, a kernel structured programming languages agapia v0.1 for interactive systems is introduced and its typing system is studied. 3



a first goal of the present paper is to introduce agapia v0.1 language. an example is p in sec. 3, an agapia v0.1 program implementing a termination detection protocol. here, we briefly touch on the key features of the language, with explicit reference to p.



a second goal of the paper is to study the typing system of agapia v0.1. our particular interest is to use the results for the design of agapia v0.1 compilers. while it is the programmer duty to ensure the correctness of his/her program, our type checking procedure help him/her by checking the types of the programs and



the paper is organized as follows. it starts with a brief presentation of rvsystems, including: scenarios, operations on scenarios, finite interactive systems, rvsystems and rv-programs. then, structured rv-programs are introduced and their scenario-based operational semantics is presented. next, the syntax of agapia v0.1 is presented and an implementation of a termination detection protocol is developed. a more technical section follows, describing the typing systems for agapia v0.1 programs. a few examples and final comments conclude the paper.



voices may be implemented on top of a stream in a similar way registers are implemented on top of a turing tape, for instance specifying their starting time and their length. most of usual data structures have natural temporal representations. examples include timed booleans, timed integers, timed arrays of timed integers, timed linked lists, etc.



the body of a module is its bottom-right part, including type declarations and clike code. the exit from the module is specified by a goto statement. a statement like goto[b,3] indicates that:(i) the data of the spatial variables in the current module will be used in a next module with control state 3;(ii) the data of the temporal variables in the current module will be used for the interaction interface of a new module with interaction label b.



notice that a global scoping rule is implicitly used here: once defined, a variable is always available. it is also possible to introduce rv-programs obeying a stronger typing discipline, where each module comes with an explicit type at each border. this option is actually used for structured programs to be introduced in the next subsection.



the rv-programs, presented in(and briefly recalled in the previous subsection), resemble flowcharts and assembly languages: one freely uses goto statements, with both temporal and spatial labels. the aim of this section is to introduce structured programming techniques on top of rv-programs. the resulting structured rvprograms may be described directly, from scratch. the lower level of rv-programs is used as a target language for compiling.



given a type v, the notations v(k), v.k, v.[k],v@k, v@[k] are used to refer to its components. for instance, in the case of spatial interfaces, they refer to: v(k)a component of a choice; v.ka component of a tuple within a process; v.[k]a component of an iterated tuple within a process; v@ka component of a tuple of processes; and v@[k]a component of an iterated tuple of processes.



the protocol is used for termination detection of a ring of processes. it can handle the case when processes may be reactivated after their local termination. to this end, it uses colored(i.e., black or white) tokens. processes are also colored: a black color means global termination may have not occurred. then, the algorithm works as follows:



the token is passed through the ring from one process pi to the next when pi has terminated. however, the color of the token may changed. if a process pi passes a task toa process pj with j< i, then it becomes a black process; otherwise it is a white process. a black process will pass on a black token, while a white process will pass on the token in its original color. after pi has passed on a token, it becomes a white process.



suppose there are m processes, denoted 0,...,m-1. besides the input m, the program uses the spatial variables id: sint, c:{white, black}, active: sbool and the temporal variables tm, tid: tint, msg: tintset[].(sint, sbool, tint, and tintset stands for spatial integers, spatial booleans, temporal integers, and temporal sets of integers, respectively.)



when a process executes the code r, whether active or passive, it checks if new jobs were assigned to it; if the answer is positive, it collects its jobs from the jobs list and stays/becomes active. when it is active, it executes some code, sends new jobs to other processes, and randomly goes to an active or passive state. if it has the token, it keeps it until it reaches termination and afterward it passes it. a white process will pass the token with the same color as it was received and a black process will pass a black token(after passing the token, the process becomes white).



for an arithmetic expression, we collect in a set the variables occurring in the expression, together with their types. the leafs of the expression should have an integer sn or tn type, otherwise the error type err is associated. the typing of the leafs is naturally extended to the full expression, collecting the types of the components and propagating their ok, war0, err status flags.



in the last 20 years, a rich and successful algebraic approach to cyclic structures has been developed, see, e.g.,[10,11,12,30,25,26,39,40,43], either for control or for reactive models. there are attempts to mix these two models, see, e.g.,[23,24,42,41,45,44] or the last chapter of. the model of rv-systems, presented in this paper, falls into this class. a difficult, but worthwhile, research topics is to extend such algebraic techniques to rv-programs.



finally, a general topics is to develop an efficient and fully flagged compiler for agapia programs. our current approach is to translate structured rv-programs to rv-programs, then we use a running machine for rv-programs to get the program output. currently, we have an automatic procedure for the translation(see), but it is not fully implemented as we still look for the possible optimizations to improve the compiler.



