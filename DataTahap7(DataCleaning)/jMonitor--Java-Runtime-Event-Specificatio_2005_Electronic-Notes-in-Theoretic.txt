jmonitor events correspond to fundamental java programming abstractions such as reading or writing of a field in a class, method invocation, method return or throw of an exception, and creation of a new object or array. each event is also qualified with a java application context such as the name of the field or the method and the names of the class and method context. the names are specified as strings representing posix compliant regular expressions.



several distinct event monitors can be associated with any event. jmonitor instruments applications to capture the call context and call the monitor function with this information. each monitoring function is called before, after or instead of the associated event depending on the event specification.



the organization of the paper is as follows. in section 2 we introduce the jmonitor events, event patterns and event monitors. in section 3 we describe the different types of event monitors and the types of runtime context information collected and made available to the event monitor through jmonitor instrumentation. in section 4 we present the design and implementation overview. section 5 covers how jmonitor relates to existing work in the field.



for event patterns built using the of and from constructs, no additional runtime checks are needed to determine whether a specific java instruction matches the event pattern. event patterns that include the in context definitions incur a very slight extra runtime overhead(single boolean test) during application execution around each instruction that potentially match the event pattern. this also imposes a similar overhead to the call of the function mentioned by the in construct.



each event pattern is associated with zero or more event monitors. a jmonitor event monitor is a pure java class inheriting from one of the abstract classes in the jmonitor package: monitor or insteadmonitor. each class corresponds to a particular type of the monitor that is attached to an event pattern. the doafter and dobefore monitors implement the jmonitor.monitor interface and the abstract doevent method. the dobefore and doafter monitors are intended to be observer monitors, although the monitors are implemented as unconstrained java methods and can have side-effects.



each doinstead monitor implements the jmonitor.insteadmonitor interface and can use the passthrough method of the jmonitor.eventcontext passed to the monitor to perform the original event that is being replaced. the passthrough method takes an object[] representing the arguments for each event type:



one limitation imposed on the user is that event monitoring classes must be distinct from event specification classes(or declared within the specification classes as inner classes). this is necessary to prevent dynamic class from attempting to load monitor or legacy application classes before the event specification classes are loaded. jmonitor needs to load specification classes first and learn about all user defined event patterns before any other class is loaded, otherwise the instrumentation will be partial.



the matching of event patterns to actual intructions in class bytecodes of the monitored application that needs to be instrumented is performed statically during initialization, prior to loading any application class. there is no additional runtime overhead associated with event pattern matching involving those built using the of and from constructs. the instrumented application methods simply call the event monitor methods when execution reaches the specified event trigger locations.



event patterns that include the in context definitions, however, incur a very slight extra runtime overhead(single boolean test) during application execution around each instruction that potentially match the event pattern. it is important to note, however, that there is no runtime regular expression match overhead for matching the in patterns. all regular expressions are matched at instrumentation time.



to illustrate the mechanism, suppose there is an in("^int.*\\(") pattern, to match any function that returns an int. for this pattern object, jmonitor introduces a thread specific static boolean(so there will be one boolean per in() pattern per thread). when instrumenting a method, jmonitor checks to see if it matches the pattern for all in patterns anywhere for any event. if it does match, then instrumentation adds some code around the method to



the tool bearing closest resemblance to jmonitor is java-mac, an implementation for java of the monitoring and checking architecture. java-mac supports a language for specifying events and alarms on a java program in the form of a java expression that begins at a static object. these events can detect changes made to fields of objects in the system as well as the beginning and end of method calls. various other contexts are supported to limit the scope of such events.



one feature that java-mac has that makes it useful for particular kinds of events is that it tracks the references to a particular object. this allows it to determine that the fields of a specific object(as determined by a code path from some static class object) have been changed rather than simply that a field of an object of a specific type was changed. this functionality causes java-mac to incur a performance penalty, however.



another project that is similar in nature and design is valgrind. valgrind is a framework for doing instrumentation of compiled x86 code. some of the tools that have been implemented using valgrind are memory leak and overrun detectors, as well as profilers. valgrind has a rather large runtime performance cost, however, in that even if no instrumentation is to be performed there is about a four to five times speed hit. some other limitations of the tool is due to the limitations of its target domain: the environment of compiled x86 code. there is not nearly enough meta information in compiled x86 binaries to design general runtime instrumentation skins in valgrind as most of the useful code details are lost during the compilation process. jmonitor, implemented in and for java, has access to metadata information regarding what functions or fields are actually being accessed by any particular instruction.



lencevicius et al. have developed a query-based debugging tool which, working somewhat similar to an sql database query tool, finds all object tuples satisfying a given boolean constraint expression. the dynamic query based debugger continually updates the results of queries as the program runs, and can stop the program as soon as the query result changes. to provide this functionality, the debugger finds all places where the debugged program changes a field that could affect the result of the query and uses sophisticated algorithms to incrementally reevaluate the query. the on-the-fly debugger adds a capability to stop the java program just at prescribed execution phases and enables querying as well as allowing to change the query later. they have implemented such a dynamic query-based debugger for java written in pure java with no jvm modifications.



it seems possible to use a tool based on jmonitor to assist in similar type of debugging scenarios. jmonitor monitors can be written by the programmer to provide instant error alerts by continuously checking inter-object relationships while the debugged program is running. the monitor can continually update the results of queries(expressed as user level java expressions) as the program runs, and can stop the program as soon as the query result changes. the programmer can specify event patterns matching all contexts where the debugged program changes a field that could affect the results of the query for an efficiency.



jmonitor can be used during the development, debugging, testing and deployment stages of the software lifecycle. when a developer needs to get more of an understanding of when and why a particular behavior is happening, he or she may decide to design event patterns and attach monitors to analyze the relevant events. we envision powerful tooling and debugging environments to be developed around jmonitor technology. additionally, we envision adding tooling support to automate some of the mechanical(i.e. programmed specification) aspects of event pattern specification and event monitor selection.



jmonitor supports program guidance. it can be used to alter the behavior of a legacy program for example to adapt to a new paradigm or when its specification is violated. this ranges from standard exceptions to advanced planning. guidance can also be used during testing to expose errors.



