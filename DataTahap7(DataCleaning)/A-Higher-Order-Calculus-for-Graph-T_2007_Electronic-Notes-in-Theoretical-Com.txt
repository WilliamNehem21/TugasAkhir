rule-based transformations of graphs have been used in many areas of computer science, including the specification and development of software systems, the definition of visual languages, the implementation of programming languages(see[5,25]). the notion of interaction, which can be seen as a particular kind of graph transformation, has been used to model concurrent systems, to give a semantics to(linear) logic proofs, as a programming discipline, and as an implementation technique for functional languages. in each case, a syntax and an operational semantics(a calculus) has been defined, often independently.



another aspect where the higher-order syntax presents advantages is for structuring and modularizing programs defined by graphs(or nets). hierarchical definitions are very useful in the framework of graph rewriting, and the same techniques can be exported to interaction nets using the higher-order syntax. in particular, the operation that combines two interaction nets to produce a new net where one or more edges have been connected together(the analogous of application in functional programming) is currently a meta-operation. we show how to internalize it using the higher-order language, and give examples where this technique is used to write modular programs. once we have the ability to model the combination of nets, it is straightforward to express a notion of higher-order interaction nets, where a net depends on another net. as with functional programming, this technique can be used to write recursive nets: nets which depend on themselves.



organization. section 2 briefly reviews crss, graph and term-graph rewriting, and interaction nets. section 3 introduces the syntax of our higher-order systems, and section 4 shows how to represent graph and term-graph rewriting systems, interaction nets, interaction systems and non-deterministic nets. in section 5 we then go on to define different sets of higher-order rules. section 6 contains a simple example of application. we conclude the paper in section 7.



the metavariables in metaterms can be thought of as holes that must be instantiated by terms. in other words, rules act as schemes defining a reduction relation on terms. formally, to define the rewrite relation we have to consider a notion of substitution using substitutes and valuations.



note that left-hand sides of rules may contain patterns of the form z(t) where z is a meta-variable and t a term. this will allow us to write contextual rules(such as the optimization rules in section 5). the context-sensitive reduction systems defined in allow this use of metavariables.



proof nets of linear logic. the encodings of proof nets in interaction nets that can be found in the literature are of two kinds: either boxes(which are nets containing nets) are defined by agents which contain a proof net as label, therefore we need an infinite set of agents in the system(see for instance), or a first-order encoding of binders is used to model the box and its contents, and this can be done with a finite number of agents(see for instance). in the first case, the dereliction cut elimination step is performed in one rewrite step, using an infinite rewrite system, whereas in the second case it is performed in several steps using a finite system.



we have shown a higher-order rewrite framework which can express several systems of graph reduction. the power of the framework can be seen for the particular case of interaction nets, where we can write a program together with its evaluator, all in the same language. we see two main uses of this framework. first, as a tool for the design and implementation of graphical languages: the language, its semantics and metaoperators, can all be defined using the same language. second, as a tool for adding structure to graphical programs: the higher-order features can be used to write hierarchical systems, and to name and reuse different components of the program.



