this paper gives an introduction to and overview of the functional quantum programming language qml. the syntax of this language is defined and explained, along with a new qml definition of the quantum teleport algorithm. the categorical operational semantics of qml is also briefly introduced, in the form of annotated quantum circuits. this definition leads to a denotational semantics, given in terms of superoperators. finally, an implementation in haskell of the semantics for qml is presented as a compiler. the compiler takes qml programs as input, which are parsed into a haskell datatype. the output from the compiler is either a quantum circuit(operational), an isometry(pure denotational) or a superoperator



language development for quantum computation is a rapidly developing research area, motivated by the application of established formal reasoning and verification techniques within a quantum framework, understanding the behaviour of quantum computation, aiding the development of new algorithms and gaining a deeper understanding of how they work. this paper discusses the syntax and features of, and gives a compiler for, a language allowing both classical and quantum control: qml[1,5]. the syntax and semantics for qml is a complete redevelopment of that presented previously, as the language has been changed to remove a problematic interpretation of coproducts(section 2.2); the interpretation of orthogonality has also been updated(section 2.1). in addition, in this work the operational semantics is made concrete by a compiler for qml programs implemented in haskell.



the quantum teleportation describes how to transport a quantum state using a small amount of classical communication. a qml interpretation of the teleportation circuit with deferred measurement has previously been presented, along with a full description of the algorithm. however, this circuit relies on the existence of a quantum channel. in order to demonstrate and explain the syntax of qml and the compiler, a new, faithful, implementation of the quantum teleport algorithm, which the qorth module contains all the code for generating the orthogonality judgements and circuits, while qcirc contains the definition of the circuit datatypes and associated functions. the compiler exploits advanced haskell features, such as monads and pattern matching, and making use of the ideas put forward by vizzotto et al. the operational semantics is realised in the qcomp(q ml compilation) module.



semantics of qml factored through the category fqc, as shown in the diagram in section 3. a direct implementation of the denotational semantics, without using the operational semantics, is an extension currently being developed. please refer to the project website for full details.



the development of qml and the compiler is an ongoing project which has already reached a functional state. as the language and semantics evolve, extensions and new features can be incorporated into the compiler; which also provides a useful testbed for the development of new language features and capabilities. for example, an extension of the orthogonality circuits given in was developed using the compiler in this way. the compiler also facilitates the testing and development of new qml algorithms, such as the described teleportation algorithm. it has also been useful in allowing others to experiment with quantum programming and get immediate feedback on the behaviour of their functions, in a style that is familiar to computer scientists, logicians, and physicists with functional programming experience.



further extensions to the compiler include adding the ability to export typed circuits as images, or in notation compatible with tools such as matlab and mathematica. possible relationships with the measurement calculus, the haskell qio monad, and other formalisms are being studied, and may provide new insights. this will lead to new features being developed, such as basis independence, and further useful abstractions.



