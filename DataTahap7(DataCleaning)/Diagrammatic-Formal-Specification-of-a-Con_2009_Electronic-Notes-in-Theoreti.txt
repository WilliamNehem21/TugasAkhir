software specifications are typically presented in symbolic notations or with(at best) semi-formal diagrammatic notations such as those found within uml. formal reasoning about specifications is almost exclusively performed with symbolic notations. many people find symbolic notations inaccessible and hard to use. added to that, specification construction, conceptualization and refinement can be difficult, and is hindered by the inaccessibility of the syntax available to the user. the provision of a fit-for-purpose, more widely accessible notation specifically designed for formal specification and reasoning may be helpful to a large community of users. diagrammatic notations are potentially a viable alternative to symbolic notations.



overlapping curves assert that the sets are disjoint; a curve placed inside another asserts a subset relationship. we use the convention that labelled rectangles represent types. the dots are called spiders. unlabeled spiders assert the existence of elements in the sets represented by the regions of the diagram in which they are placed. the labeled spiders in this diagram are acting as free variables. an arrow represents a binary relation, where its source and target may be either a spider or a curve; its target then corresponds to the image of its source under a relation identified by the label on that arrow.



in the first sub-diagram there are two disjoint sets a and b. the spider labeled a is a free variable and is the source of the arrow f, while the target of f is a spider in b; thus f represents a function mapping each element of a to an element in b. different spiders represent distinct elements, so there is an element in b that is not the image of a under f. in the second sub-diagram c and d are disjoint sets and each is a subset of a. as there are no spiders in it, the shaded region represents the empty set. so this sub-diagram asserts that a is partitioned into subsets c and



d. in the third sub-diagram the rectangle represent a type; we use names from a distinguished alphabet a,...,z to define given(fully-abstract) sets, taken as typeparameters of that class. the arrow labeled r represents a relation as it maps each element of a to a subset of i. the sub-diagrams are conjoined.



some of the benefits of diagrammatic notations are evident in the formal specification developed here where set intersection, disjointness and containment are represented visually. the diagrams presented here have properties that are thought to correlate with areas where diagrams are superior, from a usability perspective, to symbolic notations because they are well-matched to their set-theoretic semantics. extending this observation, using containment to represent set inclusion has the added benefit that the transitive property of the(semantic) subset relation is mirrored by the transitive property of(syntactic) containment. any notation that is based on euler diagrams to make such statements about sets is well-matched to



the economy of syntax afforded by diagrams over symbolic notations is also sometimes an advantage. in diagrammatic specification of the class vcp, the relative placement of the track, root and rev curves gives, for free, that root is disjoint from rev. this example of a free ride, the theory of which is developed by shimojima, is an instance of where the explicit information in a diagram includes facts that would need to be inferred in the symbolic case. other types of free rides arise and are not solely an advantage of euler diagrams; for example, see the discussions on various types of free rides in constraint diagrams that relate to their arrows. this type of inferential advantage of diagrams has been noted by several researchers, including barwise and etchemendy and stenning and lemon, and is backed up by empirical evidence provided by shimojima and katagiri. the advantages of diagrams in numerous reasoning contexts are further discussed by larkin and simon.



significant tool support has been developed for using symbolic notations for specification and reasoning. however, the visualizations available to the users are not as sophisticated as those possible with the notations proposed in this paper. it is possible to provide tool support for this diagrammatic framework. key pieces of functionality include:



in the latter case above, significant research has been directed towards the automated generation and layout of euler diagrams, which form the bases of constraint diagrams, including[4,6,25]. theorem provers have been developed for euler diagram and spider diagrams. there is already a firm basis on which we can build in order to further develop functional tools for diagrammatic specification.



