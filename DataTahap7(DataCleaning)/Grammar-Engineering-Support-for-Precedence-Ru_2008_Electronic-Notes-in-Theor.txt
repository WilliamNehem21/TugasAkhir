the variance between grammars raises the question if the precedence rules of one grammar are compatible with those of another. this is usually not obvious, since some languages have complex precedence rules. also, for some parser generators the semantics of precedence rules is defined operationally, which makes it hard to reason about their effect on the defined language. we present a method and tool for comparing the precedence rules of different grammars and parser generators. although it is undecidable whether two grammars define the same language, this tool provides support for comparing and recovering precedence rules, which is especially useful for reliable migration of a grammar from one grammar formalism to another. we evaluate our method by the application to non-trivial mainstream programming languages, such as php and c.



exists a series of parser generators, not only featuring different parsing algorithms, but also different grammar formalisms. these grammar formalisms often provide methods for declaring the precedence of operators, since the notions of priority and associativity are pervasive in the definition of the syntax of programming languages. as early as 1975 aho and johnson recognized that for many languages the most natural grammar is not accepted by the parser generators that are used in practice, since the grammar does not fall in the class of context-free grammars for which the parser generator can produce an efficient parser. aho and johnson proposed to define the syntax of a programming languages as an ambiguous grammar



in this paper, we argue that precedence rules need to be liberated from the idiosyncrasies of specific parser generators. the reasons for this are closely related to the efforts to work towards an engineering discipline for grammarware[6,11,13,9]. liberating grammars from concrete parser generators is not a new idea, however precedence rules have never been studied fundamentally outside of the context of specific parsing technologies or parser generators. indeed, there is currently, for example, no solid methodology to compare the precedence rules of two grammars, whether they are defined in the same grammar formalism or not. for example, for the c language, the gnu compiler uses yacc with precedence rules, the c-transformers uses sdf without priorities, while the sdf library does use priorities. for php, zend uses yacc with precedence rules, whereas php-front uses sdf with priority and associativity declarations. however, there is no way to check that the precedence rules of one grammar are compatible with those of another.



in this paper we present a method and its implementation for recovering precedence rules from grammars. our method is based on a core formalism for defining precedence rules, which is independent of specific parser generators. based on this formalism and the recovery of precedence rules, we can compare precedence rules of different grammars, defined in different grammar formalism, and using different precedence declaration mechanisms. we have implemented support for recovering precedence rules from yacc and sdf[4,15](parser generators using different parsing algorithms) and present the details of an algorithm to check precedence rules against lr parsers. although it is undecidable whether two grammars define the same language, this tool provides support for comparing and recovering precedence rules, which is especially useful for reliable migration of a grammar from one grammar formalism to another. also, the method can be used to analyze the precedence rules of a language, for example to determine if they can be defined using a certain grammar formalism specific precedence declaration mechanism. we evaluate our method by the application to the non-trivial mainstream programming languages c and php. for both languages we compare the precedence rules of three grammars defined in sdf or yacc. the evaluation was most successful and revealed several differences and bugs in the precedence rules of the grammars. the yacc and sdf implementations of the method that we present are implemented in stratego/xt and available as open source software as part of the stratego/xt grammar engineering tools 4.



organization. in section 2 we introduce notations for context-free grammars and tree patterns. in section 3 we introduce a running example and explain the precedence mechanisms of yacc and sdf. section 4 is the body of the paper, where we present our precedence rule recovery method. section 5 discusses compatibility checking. in section 6 we present our evaluation, and we conclude with a discussion of related work.



a core formalism for precedence rules. the recovered precedence rules need to be expressed in a certain formalism. to liberate the precedence rules from the idiosyncrasies of specific grammar formalisms, we need a formalization that is independent of specific parsing techniques. the formalism for precedence rules does not need to be concise or notationally convenient. rather, it serves as a core representation of precedence rules of programming languages.



precedence rules defined by tree patterns are closely related to the set of conflicts conflicts(g) defined by sdf priority and associativity declarations. one important difference is that the set of conflicts of sdf is transitively closed, since it is defined by a priority relation that is a strict partial ordering between productions. another difference is that we do not restrict the tree patterns used in the precedence rule sets to trees of two productions. as mentioned before, we do not assume anything about(the feasibility of) a concise notation for the set of tree patterns.



to the unfolding of productions, the input of the system can now contain nonterminals. this is the reason for a separate transition rule 4 for performing a goto, which is usually considered to be a part of the reduce action. the goto transition rule removes a non-terminal from the input and pushes a new state on the stack, determined by the goto function. the reason why this works is that we can assume that the non-terminal a is productive, which means that there will always be a production for a that will finally reduce to state sm, which would lead to exactly the same goto.



while the precedence rules are represented in a grammar formalism independent formalism, this does not imply that precedence rules can be compared directly in a useful way after recovering them from two different grammars. grammars usually have different naming conventions, different names for lexical symbols, and often also have a different structure at some points. the recovered precedence rules can still be compared by first applying grammar transformations to the precedence rules to achieve a common representation. after this, the comparison of precedence rules is a simple set comparison.



the relationship between two grammars is something that has to be custom defined for a particular combination of grammars. typically, one of the grammar transformations that needs to be applied to the precedence rules is the renaming of all expression symbols to a single expression symbol. note that it is essential that this renaming is applied to the precedence rules and not to the original grammar, since that would most likely change the precedence rules of the language or even make it impossible to generate a parser.



in the comparison of a yacc grammar and an sdf grammar a common issue is that the yacc precedence rules use names for the operators of the language(e.g. andand instead of&&). this is usually a straightforward renaming where the lexical specification can be consulted if necessary.



we have evaluated the method for precedence rule recovery and compatibility checking by applying the implementation for yacc and sdf to a set of grammars for the c and php languages. both languages have a large number of operators and non-obvious precedence rules. the size and complexity of the languages makes this compatibility check a good benchmark for our method.



the transformers project provides a c99 sdf grammar. this grammar is a direct translation of the standard to sdf 7. the grammar does not use sdf precedence declarations. instead, it uses an encoding of precedence in productions as specified by the standard. the grammar is designed to be ambiguous where the c syntax is ambiguous.



a conditional or a cast in the left-hand side of an assignment is allowed by gcc and the sdf library. for gcc this is a legacy feature that now produces a semantic error. c-transformers forbids this, which is correct. the same issue holds for many more binary operators(||,&&,|,^,&,!=,==,>=,<=,>,



for php versus the php-front sdf grammar we expected many differences in the precedence rules. we were already aware of various issues in the precedence of operators of the php-front grammar. actually, the uncertainty about the exact precedence rules of php was the primary motivation to develop this method of precedence rule recovery. one of the questions that we want to answer in this project is if the php precedence rules can actually be expressed in sdf. the php operators are a bit unusual since php has very weak as well as very strong binding unary operators. the transitive closure of priorities in sdf results in various cases where we could not find a solution by hand. in future work, we plan to analyse precedence rule sets to extract characteristics and hopefully determine automatically if these precedence rules can be expressed using grammar formalism specific precedence declaration mechanisms, in this case sdf priorities.



grammar engineering vision. several researchers have suggested that there is a strong need for proper foundations and practices for grammar engineering[11,6,13,9]. in particular, presents an extensive research agenda for grammar engineering. our method for recovery and compatibility checking of precedence rules is highly related to several of the presented research challenges, such as maintaining consistency between the incarnations of conceptually the same grammar. also, our precedence rules help to abstract from the idiosyncratic precedence mechanisms provided by the various parser generators in use. our precedence rule recovery method is very useful in the semi-automatic grammar recovery process from language references and existing compilers. in particular, more automation of grammar recovery is now possible, since precedence declarations can be checked during the life-time of a grammar.



we have presented a method for recovering precedence rules from grammars. we have presented the algorithm for yacc and implemented the method in tools for yacc and sdf. as far as we know, this is the first effort to develop methods and tools for reliably assisting grammar developers with the recovery of precedence rules, migration of grammars with precedence rules, and compatibility checking of grammars. although there are many open issues and opportunities for further research, the evaluation of our current prototypes has already clearly demonstrated the value of the tools that we have presented.



