write in this situation can result in the view of memory changing. most of the time, it does not; in cases when it does, only part of the address space changes. inferring separation of what may have changed from what has not allows effective reasoning about such memory updates.



as this is a work in progress, we are using a simplified model: we use a simple machine abstraction and do not take into account memory permissions beyond whether a virtual address is mapped/unmapped. as such permissions are merely extra properties of virtual addresses, they can be easily integrated into our logic. other work has shown how to integrate actual machine encodings with separation logic. we believe our logic can be likewise connected.



as mentioned in the introduction, virtual memory is a hardware-enforced abstraction allowing each executing process its own view of memory, into which areas of physical memory can be dynamically inserted. it adds a further level of indirection: virtual addresses potentially map to physical addresses. memory access is ordinarily done through virtual addresses only, although hardware devices may modify physical memory directly. direct memory access can be approximated by using a one-to-one virtual-to-physical map.



the addition of virtual memory to separation logic raises the issue of what exactly it means for two predicates to be separate, as well as what kind of state space we are to divide into sub-states in order to be able to express their disjointness. we want the ability to make statements on three levels: virtual to physical, physical to values and virtual to values. we also wish to preserve the usefulness of separating assertions in this context, as well as staying close to traditional separation logic notation.



we begin with explaining basic notation in sect. 3. in sect. 4 we discuss the virtual memory abstraction and our specific instantiation of it. in sect. 5 we introduce our logic, followed by examining its properties in sect. 6. finally, we discuss related work in sect. 7 before concluding.



using the above, we define an instantiation of a highly simplified machine: each 32-bit pointer points to a 32-bit word in memory for a total of 232 words in an address space. note that traditional implementations use 8-bit values. our three machine types are: vptr, pptr and val, representing virtual pointers, physical pointers and values respectively. on this machine, we define the types of the three memory views described in sect. 2 to be:



the former states that a property not dependent on the area of the heap being modified holds after the update. the latter is a weakest-precondition rule useful for backwards reasoning. it states that if p holds for a heap with the entry p set to v, then p will hold after the update, as that is precisely what heap-update does. henceforth, we will refer to these as the global and weakest-precondition rules respectively.



at the end of the operation, the address space is unchanged except for all the virtual pointers mapped to the physical address at which the heap was changed(via heap-update-v). as we described in sect. 5 however, vp cannot alias with any other virtual pointer under separation conjunction, thus the modification of the heap will only be visible through one virtual address: vp.



separation logic has been successfully applied to the verification of context switching code[10,12]. tuch et al. demonstrated the extension of separation logic to reasoning about c programs involving pointer manipulation. presently, our work uses a simplified machine model with only one type and does not involve hoare logic. we believe our framework supports addition of these extensions.



we have presented an extension of separation logic which allows reasoning about virtual memory and processes running within it. our logic allows for a convenient representation of predicates on memory at three levels: the virtual map, the physical heap and the virtual address space. the notation abstracts away details to the point of appearing very similar to classical separation logic. our logic preserves the pure and intuitionistic properties of separation logic, again without exposing the underlying abstraction. our work has been formalised in the isabelle/hol theorem prover.



