outsourcing data and computation services to public cloud providers de-mands security mechanisms that can enforce strict data confidenti- ality and in-tegrity regulations. this is particularly important for ap- plications and orga-nizations that prosess sensitive data. two orthogonal approaches for securing data processing activities are actively being touted as potential game changers: homomorphic encryption (he) and hardware based tees.



he promises computation on encrypted values without revealing their con-tent. research in the area increased after 2009, when craig gentry [1], in his doctoral thesis, described the first technique for achieving fhe nearly 30 years after the idea was conceived [2]. fhe enables outsourcing of many types of computations that previously had to be kept in-house due to confidentiality constraints, including health-data processing, financial processing, and genome research.



multithread-ing (smt) [7]. hardware technology that reveals secrets internally thus cannot be relied on to provide highly assured confiden- tiality in public cloud settings. there are some ways to counter this, such as using oblivious primitives like oblivious ram (oram) [8], which obscures access patterns to prevent infor-mation leakage through side-channels. oblivious methods do, however, incur significant per- formance overhead to computation.



within the stated security context, and propose a hybrid approach that combines the confidentiality strengths of fhe with the integrity strengths of tees. we do so using the memory-safe programming lan- guage rust [9]. using rust miti-gates large classes of dangerous and common security-related bugs, including memory corruption errors, buffer overflows, uninitialized memory, data races, dereferenced pointers to unallocated memory (e.g., null-pointer dereferencing), and



that uses fhe both outside and within sgx. by comparing the relative performance difference, we demonstrate that a hybrid approach is feasible in terms of per-formance while retaining more robust security and safety guarantees than using either fhe or sgx separately. to our knowledge, our approach is the first work that combines a tee with fhe to cover integrity weaknesses of fhe.



although malleable encryption schemes are secure under standard indistin-guishability under chosen-plaintext attack (ind-cpa), they are not secure un-der indistinguishability under adaptive chosen- ciphertext attack (ind-cca2) [13], as opposed to non-malleable cryp- tosystems [14]. furthermore, it has been shown that some encryption schemes that are ind-cpa become insecure when they encrypt their own decryption key [15], often referred to as circular security. as.



several known methods exist for an adversary to physically attack hard-ware components to extract information. this includes power- monitoring (or power-tweaking) attacks such as plundervolt [22], acoustic cryptanalysis attacks [23], electromagnetic attacks, and optical attacks. software-based side-channel attacks range from page-fault based attacks [3], cache-based attacks [4], and interface-based attacks [5], all targeting confidentiality.



the tee manufacturer must also be trusted to provide sound soft- ware and development tools. in the case of intel sgx, various software systems and a software development kit (sdk) are provided, in addition to the on-chip hardware mechanisms. as of february 2021, the intel sgx linux sdk consists of around 360 000 source lines of code (sloc).



the tfhe-rs library combines he with code executing inside a tee to provide both confidentiality and integrity. by processing ciphertexts within a tee, an adversary cannot modify nor even read the ciphertext, eliminating the issue of malleability and thus providing stronger secu- rity. for our tee we use intel sgx and for homomorphic operations we use the fast fully homomorphic encryption over the torus (tfhe) scheme, first described by chillotti et al. [24].



tfhe is a symmetric lattice-based fhe scheme that works by represent-ing polynomials with coefficients over t, the set of real numbers modulo 1, or r/z. chillotti et al. [24] also provide an accom- panying library implemen-tation [25], which we will refer to as tfhe-c in this paper. a key benefit of the tfhe-c library is that it is designed to compute on bits. in contrast, other schemes like homomorphic encryption arithmetic of approximate num-bers (heaan) (also called cheon-kim-kim-song (ckks)) [26] and brakerski- gentry-vaikun tanathan (bgv) [27], work with approximate numbers as the plaintext space is within the complex numbers.



the tfhe source code has some structures where a field is a pointer to values within a dynamically-allocated array that a different field in the same structure also references, i.e. self-referential structures. when one moves a value in memory, the referenced value in the self-referential structure is invalidated. this makes them inherently dangerous and thus disallowed by the type system in rust. as a solution, we chose to remove these fields and access the values directly, at the loss of some readability.



all data structures that might need to be transmitted are serializable and deserializable, using the rust package serde.3 serde designs seri- alization and deserialization so that any data structure that implements one of two traits can be serialized or deserialized to one of the tens of different serialization for-mats supported. this is unlike the tfhe li- brary, where serialization of data can only be done through specific functions for reading and writing files and streams. these functions are somewhat limited and do not allow the developer to specify the serial- ization format. in tfhe-rs, a macro allows deriving the implementation automatically, such as (line 3 highlights derive macro):



finally, we also performed the benchmark of the tfhe library with all their optimizations included. we use their spqlios fft processor with the fma instruction set extensions and achieved an execution time of 14.771 ms. this number is similar to their findings, but should not be compared directly to ours as it implements several more optimizations.



under conditions that make it challenging to solve. thus, it is good to use as proof that a par-ticular system can solve problems in the domain of smpc. the problem has several solutions, with techniques ranging from oblivious transfer methods [31], private set intersections with he [32] to fhe.



we start by producing the binary decomposition of the two values. we use two 32-bit signed integers for this purpose. for each of the values, we decompose them into bytes in big-endian order, then decompose those into the individual bits. we use big-endian as we implemented the circuits we use to work on big-endian values. then each bit is individually encrypted with our tfhe implementation. this results in two pairs of 32 ciphertexts representing the encryption of the two values. in a multi-key setup, the two parties perform these actions separately after completing a key-exchange protocol. note that our implementation of the tfhe scheme does not support multi-key setups as we based it on an implementation that also did not support it. however, supporting it would only necessitate adding a key combina- tion step that scales linearly with the number of parties.



next, we evaluate and compare the performance of tfhe-rs with and with-out the use of sgx. we repeat each experiment 25 times, timing only the relevant sections. running with 80-bit security, tfhe-rs with sgx finished with an arithmetic mean of 90.504 s and a standard de- viation of 0.602 86 s while the fhe-only version finished in 116.08 s and a standard deviation of 2.3548 s. these results indicate that tfhe-rs is approximately 28% faster with sgx.



drucker and gueron [35] state that most secure cloud database so- lutions tend to provide confidentiality and integrity of data by using either a tee or he. they show that combining a tee and using he is feasible and does not need to rely on the tee for confidentiality pur- poses. they compare their work to cryptdb [36] and mrcrypt [37], which both use partially homomorphic en-cryption (phe), but lack integrity security for both code and data. drucker and gueron combine the phe scheme paillier [38] and sgx, where sgx pro-vides integrity of code and data (in addition to some confidentiality guarantees, side-channel attacks aside). the paillier cryptosystem ensures data is private and provides confidentiality, even within the enclave. the combination allows the system to place less trust in intel, as the paillier cryptosystem guarantees confidentiality for the encrypted data while allowing some computations. in their experiments, they only experience problems re-lated to side-channel attacks and cloud hosted computa- tions. chen et al. [41] propose a software framework that detects side-channel attacks by a privileged attacker, such as a malicious or virus-infected os. some types of side-channel attacks that exploit access-pattern information leakage can be protected against using techniques such as oram [8]. oram can be seen as a compiler that transforms memory accesses of a program into a program where the distribu-tion of memory accesses differs (is independent) from the original program while preserving the semantics of the program. path oram [42] improves upon reg-ular oram and has a low space over- head and in some cases, asymptotically improved performance compared to earlier work. circuit oram [43] further improves the techniques and gives an implementation with a complexity near the theoretical lower-bound.



we evaluated the performance characteristics of tfhe-rs with and without an sgx enclave and found that the performance overhead is negligible. the evaluation showed that using tfhe-rs with sgx is 3% faster than a version of tfhe-rs without sgx. this result is not in line with what we conjectured, which was that tfhe-rs with sgx should be slower. based on our experience, we conjecture that specific memory management implementations particularly affects performance. the the dlmalloc allocator used by the fortanix rust edp in the sgx setup. as such, a system with a similar setup to ours should emphasize low memory usage and experiment with different allocators to ensure that they stay within the memory limits imposed by sgx. however, the measured stan-dard deviation does account for most of the performance difference, and the benchmarks themselves take long enough for this discrepancy to be due to envi-ronmental factors in our experimental setup (i.e., due to system load). overall, this is a positive result, as our hybrid solution is both more secure and faster.



