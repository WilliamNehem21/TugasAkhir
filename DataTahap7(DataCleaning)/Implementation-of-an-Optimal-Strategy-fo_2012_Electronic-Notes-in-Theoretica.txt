one of the most automatic debugging techniques is algorithmic debugging because it allows us to debug a program without the need to inspect the source code. in order to find a bug, an algorithmic debugger asks questions to the programmer about the correctness of subcomputations in an execution. reducing the number and complexity of these questions is an old objective in this field. recently, an strategy for algorithmic debuggers that minimizes the number of questions has been released. this new strategy is called optimal divide and query and, provided that all questions can be answered, it finds any bug in the source code with a minimum set of questions. in this work we discuss the implementation of such a strategy in different algorithmic debugging architectures.



debugging is often a hard task. specially when we try to debug source code that we have not written ourselves or that we wrote a long time ago. when this happens, we usually know or remember what our functions or methods do, but we hardly remember how they do it. in these cases, the technique algorithmic debugging[10,11] can be very useful because it allows us to debug programs without the need to inspect the source code. the technique automatically generates a series of questions and uses the answers of the programmer to find the location of a bug. the questions are always whether a given result of a method or function activation with given input values is actually correct. therefore, the programmer only needs to know what a function is supposed to do(instead of how) in order to debug it.



the debugger points out the part of the code that contains the bug. in this case|| should be&&. note that, to debug the program, the programmer only has to answer questions. it is not even necessary to see the code.



the internal algorithm used by algorithmic debuggers to decide what nodes of the et should be asked is crucial for the performance of the technique. in, we conducted a series of experiments to compare the performance of different algorithms, and divide& query(d&q) and its variants showed the best performance. in that work, we also proved that the variant optimal d&q asks(as an average) an optimal number of questions.



the rest of the paper has been organized as follows. in section 2 we recall and formalize the strategy d&q and its improved version optimal d&q. then, in section 3 we discuss the implementation of optimal d&q. finally, section 4 concludes.



in this section we formalize the strategy d&q focussing on the improved version by hirunkitti. we start with the definition of marked execution tree, that is an et where some nodes could have been removed because they were marked as correct(i.e., answered yes), some nodes could have been marked as wrong(i.e., answered no) and the correctness of the other nodes is undefined.



in, optimal divide& query was introduced as a new variant of d&q that optimally divides the remaining tree with every question. it is presented in algorithm 2 where wn represents the weight of node n(i.e., the weight of the subtree rooted at n), and win represents the individual weight of node n(i.e., the weight of the single node n without taking into account its descendants). it is important to note that, in this algorithm, the weight of a subtree with root n is computed with the sum of the individual weights of all nodes in the subtree, but the individual weight of n is only added if it is marked as undefined. in the case that it is marked as wrong, then it is ignored.



along this section, we will assume the existence of an object that implements the strategy optimal d&q. we will refer to this object with the usual reference this, and thus, we can access the methods of this object as usual(e.g., this.node.getstate(), this.movenodetochild(indexchild), etc.).



fix met architecture. where the met is never pruned; and thus nodes have a state attribute that indicates to the strategy whether this node can be buggy or not. here again, it is assumed that all the nodes of the met are already generated when the first question is asked.



the information from nodes. for this, we use a pointer that can point to any node in the met. this pointer is the attribute node of the strategy that initially points to the root of the met and can be moved to any node by means of the method selectnode. this method(selectnode) implements the optimal d&q strategy presented in algorithm 2, and it uses 7 different methods during its execution:



the loop traverses the met in a top-down manner in order to find the optimal node. we start the search in the root node and in each iteration we descend to one of its children. once we have selected one child, the other children are discarded. lines(8) to(22) determine this child and stores it in variable indexchild. if this child does not exist(e.g., the node is a leaf) then lines(24) to(26) return the node itself as the optimal node.



traditionally, the weight of a node represents the number of nodes of the subtree. in our approach the weight of a node represents the probability that the subtree of this node contains the bug. this probability is computed with method calculateweight shown in frame 2. this method does not take into account the wrong root when computing probabilities because it is not necessary to answer it again to determine that it is wrong.



in addition, when the user marks a node as unknown, this node should be removed from the met. but, because we do not prune these nodes, they remain in the middle of the tree. this means that the getnodechildren method should be modified in order to exclude unknown nodes. moreover, it should also be modified to exclude right and trusted nodes that also remain in the



met. this is performed by the new version of getnodechildren shown in frame 3, that stores in attribute children the children of the current node. if one of its children is an unknown node, it is ignored, but the children of this unknown node are also added. after collecting the children of the current node, we can use movenodetochild and movenodetofather methods in frame 3 to move from father to children and vice versa. finally, having correctly updated the weights of right, trusted and unknown nodes, the calculateweight method can be implemented as the one in frame 2.



