total correctness and partial correctness are obviously intimately linked. the difference between them is the issue of whether or not the program will terminate and so deliver any result at all. but partial correctness cannot simply be extracted from total correctness just by setting aside the question of termination. nor can total correctness be reconstructed purely from partial correctness.



q, i.e. establish q if it terminates at all. although the predicate transformers wlp(a,) and wp(a,) are both positively conjunctive, which is to say they distribute across non-empty conjunctions, only wlp(a,) is universally conjunctive, which is to say in addition it maps the empty conjunction, true, to itself. the necessary logical relationship between the two predicatetransformers is expressed by the law of our abstract command language with the completely chaotic program we call anarchy which is our refinement bottom. but, operationally speaking at least, our infinite loop is completely deterministic since it can never terminate. general correctness must faithfully reflect its guaranteed non-termination. the standard way to achieve this, as nelson explains in, is to use another ordering and define recursions as least fixed-points with respect to this instead. the ordering in question is the so-called egli-milner approximation ordering: when a and b are programs, we say a approximates b if for every postcondition q



in fact later we will define abstract command iteration constructively using natural induction, as did dijkstra originally in for the do... od of his guarded command language. thus we avoid any appeal to the egli-milner ordering and fixed-point theory. nevertheless, to introduce a more complete notion of recursion into our abstract command language we would have to employ egli-milner.



we call the collection within the alphabet of variables on which an abstract command acts its frame. our operational intuition is that these are the variables to which the command may assign values. we denote the frame of an abstract command a by frame(a). an abstract command may make passive reference to variables in the alphabet outside its frame. for example, the frame of x:= y is just x although it makes passive reference to y too. the frame may be empty as in skip, or as in x< 7| skip which makes only passive reference to x. we distinguish between skip and x:= x since they have different frames.



unbounded choice: takes the form@z. a where a is an abstract command, and z is fresh with respect to the current alphabet. the alphabet of a is understood as the current alphabet augmented by z. the unbounded choice@z. a represents a attenuated by a demonic choice of any value for variable



we have already encountered one fundamental predicate of an abstract command a: its termination predicate, trm(a), which characterises from where execution of a is guaranteed to terminate, and is therefore safe from the risk of non-termination. several other important characteristic predicates are associated with a. the names of most of them are adopted like trm from where they are used for corresponding predicates defined for generalised substitutions.



parallel composition: takes the form a|| b where a and b are abstract commands. execution proceeds until a and b have both terminated, and the result, if any, is the composite effect of a and b. here, rather than specify wlp(a|| b,) directly, it is convenient to specify prd(a|| b). as usual the frames are merged, so we have



in our case this merge is the straightforward feasible fusion of the two sets of results. where the respective effects of a and b on a common variable are wholly irreconcilable a|| b is infeasible. we defined a similar parallel composition in for generalised substitutions. our definition here is actually simpler than that one, since total correctness induces a dependency between the trm and prd of a generalised substitution which is not mirrored in general correctness, where trm and prd are independent of each other.



concert: takes the form a#b, where a and b are abstract commands. it represents parallel execution of a and b on disjoint copies of their respective frames in a termination pact. these concerted executions proceed until either terminates. the overall result, if any, is determined entirely by whichever has terminated. their frames are merged, so we have



we might imagine concert being concretely implemented in, say, a unix/c environment by the parent process forking two subsidiary processes, then waiting for either to terminate, upon which it just kills off the other one. thus concert offers us the means of refining a decidable specification into a concurrently executing pair of semi-decidable programs. we illustrate this in the next section with a domestic allegory.



