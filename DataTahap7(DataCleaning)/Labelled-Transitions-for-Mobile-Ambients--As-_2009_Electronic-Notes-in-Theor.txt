a series of papers recently addressed the need of synthesizing a lts out of the reduction semantics of e.g. a calculus. the most successful technique so far has been proposed by leifer and milner with the so-called relative pushout(rpo), which captures in an abstract setting the intuitive notion of minimal context into which a process has to be inserted, in order for allowing a reduction to occur.



in this paper we exploit the graphical encoding for mas, proposed in, to distill a lts on(processes encoded as) graphs. this lts is then used to infer a set of rules defined on the processes of the mas calculus, and we compare it with the alternative solutions proposed so far, discovering many similarities(thus confirming the hints provided by the ingenuity of the researchers), yet with a few substantial differences, as articulated in the concluding section. since we are interested in lts defined over processes, we provide a comparison with the only two works presenting a lts on mas processes, namely, those proposed in[16,23].



this paper is organized as follows. section 2 briefly recalls the mas calculus. in section 3 we introduce(typed hyper-)graphs and their extension with interfaces, while section 4 presents dpo rewriting on graphs with interfaces as well as the bc technique for distilling a lts. then, in section 5 we recall a graphical encoding for mas processes that has been introduced in. a graph transformation system for mas that simulates process reduction is defined in section 6. section 7 presents a lts for graphs representing mas processes, obtained by means of the bc synthesis mechanism. section 8 introduces a lts defined over processes of the mas calculus and obtained from the lts over graphs. finally, section 9 concludes the paper.



it seems noteworthy that three rules 3 suffice for recasting the reduction semantics of mobile ambients. that is possible for two reasons. first, the closure of reduction with respect to contexts is obtained by the fact that graph morphisms allow the embedding of a graph within a larger one. second, no distinct instance of the rules is needed, since graph isomorphism takes care of the closure with respect to structural congruence, and interfaces of the renaming of free names.



in this section we apply the bc synthesis mechanism to ramb in order to obtain a lts for graphs representing mas processes. we first show some examples of rewriting steps with bcs, then we use some pruning techniques(proposed in) in order to obtain a simpler presentation of the derived lts. this presentation is then used in the next section in order to define a lts directly over mas.



in the second case no transition is possible. indeed the graph g+ is the whole graph g in parallel with a fresh ambient w having inside a capability in n, but the pushout complement of j> g> g+ does not exist, because n is restricted and thus it does not belong to the interface j. intuitively, this means that no ambient from the environment can enter inside a restricted sibling ambient n.



e.2. however reasoning on the synthesized lts is still hard(this is usually the case when working with derived ltss, as pointed out in and, where the authors state that an sos presentation of the synthesized lts would be desirable). in order to simplify this reasoning, we introduce a set of minimal transitions that allow us to derive all and only the transitions of the(pruned) synthesized lts.



the rule coopen instead models an environment that opens an ambient of the process. the rule inamb enables an ambient of the process to migrate into a sibling ambient provided by the environment, while in the rule in both the ambients are provided by the environment. in the rule coin an ambient provided by the environment enters an ambient of the process. the rule outamb models an ambient of the process exiting from an ambient provided by the environment, while in the rule out both ambients are provided by the environment.



moreover, the label and the resulting graph of the borrowed transition for g are obtained from the label and the resulting state of the minimal transition of d, respectively. therefore, for each minimal transition we obtain an inference rule: the conditions in the premise correspond to the necessary and sufficient conditions for performing a transition from a graph g, while the label and the resulting process are obtained from the label and the resulting state of the borrowed transition, respectively. since the labels of the lts over graphs obtained by the bc mechanism represent minimal graph contexts enabling a graph production, then also the labels of our lts over processes represent minimal process contexts enabling a reduction.



interface j contains all the nodes of jdopen, we conclude that n must belong to j, that is, n must bea free name of p. this represents the premise of the rule open. starting from the label j> f< k of the bc transition we now obtain the label of the process transition. by observing the shape of f, which contains all the items of fdopen, we can say that the process context is composed of the ambient n. moreover, the context f is glued to g through j, which contains the free names of p and the nodes of jdopen, i.e., the name n and the nodes representing the roots of the graph g(which models p). since these two nodes represent the roots of the graph f(which models ambient n), we conclude that the label of the process transition



in this paper we exploit the graphical encoding for mas, proposed in, to distill a lts on(processes encoded as) graphs. we then use this lts in order to infer a lts directly defined on the processes of the mas calculus. for the sake of simplicity, we considered a graphical encoding for mas without communication primitives, as well as without recursive expressions. a graphical encoding for the whole calculus could be obtained by tackling both communication primitives and recursive processes along the lines of the solution in. once the graphical encoding for the whole calculus has been defined, the technique presented in this paper could be applied in order to obtain a lts for the whole mas calculus.



beside the presentation of a succinct lts for mobile ambients, our work is a relevant case study for the theory of reactive systems. as already pointed out in the introduction, bc rewriting and bigraphical reactive systems are both instances of this theory. this paper, together with, shows that the bcs approach is quite effective in deriving lts for process calculi.



in the minimal transition d' the name n belongs to the process(it occurs inside the graph dout') but, since the node n occur in jd', it should appear in the interface j, i.e., it must be free. thus, this



analogously to the substitution of process variables, our composition does do not capture bound names. consider e.g. the bound name n of h< k. it does not appear in the interface k and thus, for all graph with interfaces k< i'> j'(representing possible substitutions), it can not be identified with any name of i'.



