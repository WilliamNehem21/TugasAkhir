aspect-oriented approaches have commonly advocated separation of concerns. some approaches have applied this separation in a symmetric fashion, like hyper/j, whereas some others have relied on asymmetric separation, like aspectj. the difference in the approaches is that the different concerns play a symmetric role in the former, whereas the latter explicitly includes a conventional implementation on top of which other concerns are woven onto as aspects. the question then arises, how are the concerns of the conventional implementation special in the latter, and will the opportunity to use symmetric separation lead to a fundamentally different decomposition. in this paper, we discuss the dominance in decompositions in specifications and corresponding aspect-oriented implementations. as examples, we use the specification method disco which allows modeling of concerns in a fashion that separates the different concerns to specification branches, and aspect-oriented implementations using hyper/j and aspectj that can be composed for disco specifications. as the final outcome, we propose that any aspect-oriented approach addressing the system at the level of program code necessarily has some concerns that are more dominant than some others due to the control flow of programs.



tyranny of dominant decompositions is the term introduced to address problems related to the inability to address all concerns of a software system using the same facilities. reported in, this has lead to the introduction of a paradigm where all the concerns can be treated in a similar fashion, with a practical programming-level implementation in hyper/j. then, all concerns can be treated symmetrically, which enables the creation of systems so that both conventional modularity and cross-cutting properties are enabled using hypermodules.



in contrast to symmetric approaches to manage cross-cutting properties, asymmetric approaches have been introduced. for instance, aspectj introduces facilities for augmenting a baseline implementation with additions referred to as aspects. then, one can advance such that an existing system, given as a conventional program, is taken as the starting point, and new behaviors are woven into the system with aspects. furthermore, provided with a convention where aspects are used for certain issues, the developers can anticipate the injection of aspects, and overlook such parts of the system in the baseline implementation.



the rest of this paper is structured as follows. section 2 introduces the specification and modeling method we use as the starting point. furthermore, we discuss the structure of specifications that has been commonly used for separating concerns. sections 3 and 4 sketch implementations for disco specifications using hyper/j and aspectj, where symmetric and asymmetric decompositions of concerns are offered. in addition, we discuss the dominance of decompositions in described systems. then, section 5 finally concludes the paper.



disco specifications are composed in terms of layers that contain classes and actions. classes are containers of data, and actions can be understood as multi-object methods that can alter values of variables. actions are executed in an interleaved fashion without any interference from the rest of the system and their execution is bound to be finished once it has been initiated, which makes actions atomic units of executions. the language used for composing specifications is textual. however, animation facilities have been provided to ease the analysis of specifications[16,3]. furthermore, the relation of disco specifications and their denotation using uml



layers can build on top of other layers, which is referred to as refinement in disco terminology. a restriction is made that actions can only alter values of variables given in the same layer, which guarantees that safety properties will be preserved by construction. to satisfy this restriction, refinements can introduce new variables and operations on them as well as augmentations to actions, provided that the new action logically implies its ancestor. in fact, one can consider that the concept of ancestors plays a key role in the disco approach. all classes and actions can be considered as the refinements of their ancestors in earlier layers, with the layer defining an empty system as the origin of the hierarchy. this gives an explicit structure for any disco specification, with the opportunity to define concerns in individual layers.



the use of layers allows modeling of systems using several levels of abstraction. for instance, when modeling a telephony exchange, it is possible to model the system using abstract concepts, such as call control, connections, and legs, which are individual connections from the exchange to a caller or callee, and charging, as well as in terms of processes used for implementing the abstract concepts. this allows each layer to focus on a certain concern the modeler wants to address separately.



layered specifications in disco allow layers where individual concerns are addressed. layers are truly symmetric in the sense that the refinement relationship between layers preserves(safety) properties of all component layers, and the order in which layers are given can vary. furthermore, refinements can only make more restrictions, which resembles the constraint-oriented design style introduced in connection with lotos. another difference to commonly used aspect-oriented approaches is that layers are complete in the sense that they only describe behaviors in terms of the variables included in them. then, when layers are composed, a new universe is created where the rules of behavior of all component layers are satisfied.



more recently, we have also considered aspect-oriented techniques. this enables us to preserve the structure created with layers. moreover, we have considered applying the same design methodology in the design of aspect-oriented systems. in the following sections, we shift the focus on composing aspect-oriented implementations in a fashion that preserves the layered structure of the specification.



when composing a hyper/j system, independent subsystems are defined in the beginning. they can be individual classes or collections of them, and they can be even tested in isolation from one another. the goal is to create all the necessary operations of the eventual implementation in isolation.



however, there is one major drawback. before one includes the branch that defines the master control flow only declarative goals can be achieved. in other words, by combining branches that define operations that do not trigger themselves to execution, one cannot create any runnable programs. as a result, the semantics of different branches have different contribution to the development. therefore, the branch defining the control flow can be considered as a dominant dimension in the semantic sense.



as a result of the special role of control flow, in cases where an early phase of the disco specification defines executions the situation is simple. the corresponding hyper/j implementation can be given and tested in a straightforward fashion. then, as the design advances, new features can be immediately augmented with normal routines. furthermore, also testing by running the system is enabled. however, in cases where some later branch introduces the control, combinations where the implementation branch is missing result in declarative statements. this in particular applies to non-primitive abstractions, which often define no control as such but are conceptually important. they cannot be tested in a hyper/j implementation independently of the rest of the system, but they can still be defined and used as intermediate systems that can be studied with reviews.



in contrast to hyper/j, aspectj aims at the definition of systems in a fashion where a baseline implementation is given first. this baseline is given using conventional java, and it will be extended with aspects that are woven into code. in other words, aspects can be taken as extensions of the baseline system, and they most naturally follow the control given in the baseline, although an option has been provided to override operations. in the following, we outline a mechanism for implementing the above disco specification using aspectj.



the fundamental source of asymmetry in aspectj is that there are two types of artifacts. one type is the conventional java classes, and the other type is the aspects. the types also play a different role in the development process, which is addressed in the following.



forms a necessary element in an implementation. when considering the behaviors of the system, executions that must take place commonly introduce a dominant decomposition any case in implementations, as otherwise only declarative definitions can be given. as a result, structure-preserving implementations of the specifications, whose architecture had prescribed differences regarding the order in which certain concerns were introduced, are similar for both hyper/j and aspectj.



