implementation using platforms like corba, fractal or.net. the crucial question that arises to the developers is to know if the proposed assembling is correct or not. in this paper, our interests concern components which are described by interface automata. these interfaces specify action protocols: scheduling calls of component actions. as some related works, we can mention the model in where the protocols are associated to the component connectors. others works as the ones in, the authors proposed a comparison between models at three grades of interoperability using the operation signatures, the interfaces protocols and the quality of service. the protocols in based on transitions systems and concurrency including the reachability analysis. the composition operation is essential to define assembly and check the surety and vivacity properties. the approach in aims to endow



the works of l.alfaro and t.henzinger[1,2], allows to specify component interfaces by interface automata. these interfaces are specified by automata which are labelled by input, output, and internal actions. the composition of interfaces is achieved by synchronizing actions. our approach reuse this model and strengthening it by taking into account the action semantics to ensure a more reliable verification of components interoperability. the paper is organized as follows: in section 2, we describe the interface automata as well as the definitions and the algorithm used to verify the compatibility between component interfaces. in section 3, we present our approach to verify the interface compatibility, and we apply the approach to the case study of the vehicle cycab in section 4. we conclude our work and present perspectives in section 5.



the i/o automata are defined by nancy a.lynch and mark.tutle as a labelled transition systems.commonly, they are used to model distributed and concurrent systems. labels of i/o automata fall into three categories of actions: input, output, and hidden actions where input actions are enabled at every state of an automaton.



in this section, we present an approach to verify the compatibility between component interfaces based on the i/o automata and the approach of l.alfaro and t.henzinger.the contribution of our approach compared to the one presented in, is the consideration of the action semantics in the component interfaces and in the verification of the component compatibility. in, one verify component compatibility by considering only action signatures. we consider, that action signatures are not sufficient to decide on the component compatibility using an approach based on i/o automata.



we propose to annotate transitions in an interface automaton by pre and post conditions of actions. we adapt the compatibility verification algorithm presented in, to take into account pre and post of actions. in the following definitions we formalise the adaptations on the l.alfaro and t.henzinger approach in order to introduce action semantics in the interface automata.



the composition condition is the same as the preexisting approach. the composition of two automata may take effect only if their actions are disjoint, except shared input and output actions between them. when we compose them, shared actions are synchronized and all the others are interleaved asynchronously.



several approaches have been proposed to study the concept of cycab. the cycab car is a new electrical means of transportation conceived essentially for freestanding transport services. it is totally manipulated by a computer system and it can be driven automatically according to many modes.



after computing the set of illegal states in the product, we obtain the set illegal(av,as)={32, 12}. the state 32 is an illegal state because from the state 3 in the automaton vehicle, the postcondition of the input shared action, halt?, do not imply the postcondition of the corresponding output action, halt!, from the state 2 in the component station(vpsh a spsh). in fact, the component vehicle inputs the actions halt which provokes strictly the vehicle halt, while the component station solicits an action halt which provokes the the vehicle halt and the station reach.



next, we compute by performing a backward reachability analysis from illegal states which traverses only internal and output steps, all states thus reachable. the resulting set is{11, 21, 42} and so the set of unreachable states is{41}. finally, we remove all incompatible and unreachable states{11, 21, 42, 32, 12, 41} and from the product automaton to obtain their composite automaton av as. the set of remaining states is empty then, the two interfaces vehicle and station are not compatible.



in this context, we are interesting for two research directions. the first consists in implementing a verification tool which takes into account pre and post conditions of actions to check compatibility between interfaces. the second concerns composite components and their refinement to define under which conditions a set of assembled components satisfies constraints of the composite component.



becker steffen, overhage sven, and reussner ralf. classifying software component interoperability errors to support component adaption. in crnkovic ivica, stafford judith, schmidt heinz, and wallnau kurt, editors, component based software engineering, 7th international symposium, cbse 2004, edinburgh, uk, proceedings, pages 68-83. springer, 2004.



