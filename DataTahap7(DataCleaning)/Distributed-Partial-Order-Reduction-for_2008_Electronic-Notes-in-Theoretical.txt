note that the purpose of using the expanded set is to avoid state revisits, and it is not needed to guarantee the termination of the algorithm as the ltss are cycle free. therefore, this set can gradually be removed from memory and be stored on disks, in case memory limits are reached, without endangering the termination of the algorithm. for similar approaches to memory management see[3,9].



distributed state space generation algorithms usually comprise the code ran by each client and the code for a manager process. in algorithm 2, we show the part of our dpor algorithm which is ran by the clients. the manager keeps track of the progress and decides to terminate the generation once no new states are found. we here omit the code of the manager process as it has no interactions with the por pruning part. see, e.g., for a generic specification of the manager process.



