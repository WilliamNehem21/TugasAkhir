one of the questions which comes up when using embedded domain specific languages is to what extent we can analyze and transform embedded programs, as normally done in more conventional compilers. special problems arise when the host language is strongly typed, and this host type system is used to type the embedded language. in this paper we describe how we can use a library, which was designed for constructing transformations of typed abstract syntax, in the removal of left recursion from a typed grammar description. the algorithm we describe is the left-corner transform, which is small enough to be fully explained, involved enough to be interesting, and complete enough to serve as a tutorial on how to proceed in similar cases. the described transformation has been successfully used in constructing a compositional and efficient alternative to the standard haskell read function.



a template haskell library which generates the values of type grammar a and library code which combines such values at run-time to form a complete grammar. out of this combined value the desired read function for the composed data type is constructed, again by library haskell code. this whole process is described in the aforementioned paper.



, but is also more efficient(o(n2), where n is the number of terminals and nonterminals in the grammar). here we will start from an improved version formulated by robert c. moore, which we present in a more intuitive form. both his tests, using several large grammars for natural language processing, and our tests, using several very large data type descriptions, show that the algorithm performs very well in practice.



for each(mapm) non-terminal(a) the function rules1 visits each(mapm) of its productions; each visit results in new productions using rule2a and rule2b. they are added to the transformed grammar by the function insert. the productions resulting from rule2a are returned(ps), and together(concat) from the new productions for the original non-terminal a. the left-corners cache is reset when starting with the next non-terminal:



note that the functions rule2 and insert are mutually recursive. they apply the rules 2a and 2b until no new left-corner symbols are found. the structure of the typed implementation we present in section 4 closely resembles the untyped solution above.



the type ref is a generalized algebraic data type. the constructor zero expresses that the first element of the environment has to be of type a. the constructor suc does not care about the type of the first element in the environment(it is polymorphic in b), and remembers a position in the rest of the environment.



the lct is applied in turn to each non-terminal(a) of the original grammar. the algorithm performs a depth first search for left-corner symbols. for each left-corner x a new non-terminal a x is introduced. additionally a new definition for a itself is added to the transformed grammar.



the function rules1 is defined by induction over the original grammar(i.e. it iterates over the non-terminals) with the second parameter as the induction parameter. it is polymorphically recursive: the type variable env' changes during induction, starting with the type of the original grammar(i.e. env) and ending with the type of the empty grammar(). the first argument is a copy of the original grammar which is needed for looking up the productions of the original non-terminals:



we have shown how complicated transformations can be done at run-time, while having been partially verified statically by the type system. doing so we have used a wide variety of type system concepts, like gadts and existential and polymorphic types, which cannot be found together in other general purpose languages than haskell. this allows us to use techniques which are typical of dependently typed systems while maintaining a complete separation between types and values. besides this we make use of lazy evaluation in order to get computed information to the right places to be used.



implementing transformations like the left-corner transform implies the introduction of new references to a collection of possibly mutually recursive definitions. previous work on typeful transformations of embedded dsls represented as typed abstract syntax[3,2,4] does not deal with such complexity. thus, as far as we know, this is the first description of run-time typed transformations which modify references into an abstract syntax represented as a graph instead of a tree.



