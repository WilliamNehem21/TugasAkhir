web services and service-oriented architecture in general are promising concepts to overcome difficulties such as heterogeneity, scalability, etc. in this paper we present an algebraic structure of web services which assist users in web service composition and formal description of their services. using relation algebra, tests and iteration offer the possibility of an automatic composition of web services based on a specified goal.



there are plenty of approaches to web service composition. a composition can be achieved agent-based(as in[17,5]), based on interaction protocols, symbolic transition systems or based on some kind of logic. very often process algebras or petri nets are used, too. the semantic web community has used planning techniques to address the problem of automated composition of semantic web services,



in this section we develop an algebraic characterisation of web services and present also an algebraic definition of web service composition. obviously, a web service consists of an interface and the implementation. in the interface(described in wsdl) several web methods are defined. these receive input messages and reply with output messages which both can be of a simple type such as string, integer, etc. or of a complex type. for our first formalisation of web services we assume that both, the types of the input data and the output data are known before and therefore there is a knowledge set k: a set which includes the input and the output as subsets. types which might be nested or semantically described are topics for further research and also the concrete binding and port information of web services are currently neglected for the sake of simplicity.



note, that by definition r; s is defined only if the output set of r has the same size as the input set of s. unfortunately, this definition yields a strange behaviour in the setting of web services, which is illustrated by the following example. afterwards we will present a possible solution for this deficit.



the problem is, that executing the second web method needs more information than the first one provides. vice versa the second web method cannot be executed if the first one provides to many information, like etix in the above example. to bridge this gap, we define a web service as a collection of web methods which is based on a simple web service with additional information, which remains untouched during execution of the web service and is just added to the output data.



in this definition e is the context and the extension of the simple web service w, which just takes any information that is not needed as input for execution and adds this information unchanged to the output. obviously, each element of a web service is again a web method. moreover, the definition implies the following result if. is seen as a function: the execution of the web services in this order yields a positive result(a hotel room and a flight is booked). note that we use t and not the extended web service t, since we want to guarantee that an execution starts without any input. usually, one has to use the extended one if a test occurs inside an execution(see above).



as we have seen, tests can be used to model assertions for web services. but they are also the basis for defining modal operators which are used for modelling termination and an abstract version of the wlp-operator. the resulting formalism is similar to propositional dynamic logic but also strongly related to temporal logics. in this section we discuss these operators with respect to web services. in particular we show how to determine necessary information which has to be specified by a customer when a certain goal is given, e.g. to receive an e-ticket in the end.



of course this result is not a surprise since we constructed the web services in exactly that way, but since the modal operators can be applied to any web services they can be used to determine the necessary data. for this purpose it is useful to provide some basic laws for boxes and diamonds. all the presented laws as well as many more can be found in.



we do not want to discuss this operation and structure(which is known as kleene algebra) and its connection to web services. instead we will present some longer examples in the next section. more details concerning the reflexive, transitive closure within relations can be found e.g. in, about kleene algebra in[1,15].



we have implemented relations, web service composition, tests and modal operators in haskell. with this implementation we have build up a small case study to show that using the presented theory is useful to determine information about web services. the haskell code, the encodings of our examples and the result sets can be found at the web site of.



include a, d, dep and des and(not surprisingly) all recombinations of cc, ff and smt. since we know that two iterations of flight yield two tickets, the star in the above expression could be replaced by flight2. nevertheless, since normal users do not have such knowledge we modelled the desired behaviour with an arbitrary finite iteration.



in this paper we presented a first step towards an algebra of web services and showed how to make advantage of the resulting algebraic structures. in particular, web services can be embedded into the well-known structure of relations which by adding operations for composition and choice form an i-semiring. henceforth we considered web services from a syntactical point of view and started to see them as tuples of input and output data.



this embedding led to a definition of web service composition on an algebraic level. after that we were able to add restrictions to web services, e.g., to select those web services satisfying a specific condition. furthermore we used modal operators to determine necessary information which guarantee to reach certain goals. throughout the paper we tried to illustrate the developed theory by an on-going example, which was expanded to a simple case study.



using a relational approach works fine for calculating inputs and/or outputs. but, so far, we have not mentioned in detail how to determine any execution order for web services. nevertheless, since we have lifted web services to an abstract algebraic level, a replacement of the relational model by any other model which is also based on i-semirings is possible without recalculating properties again. this is another advantage of our approach. in we introduce the algebra of traces, another(well-known) i-semiring, which is useful for web service composition. informally, traces simply save information about the execution order of web services.



