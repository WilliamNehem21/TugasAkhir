in this paper, we describe a system, written in haskell, for the ontology-based approximate filtering of xml data. basically, it allows one to extract relevant data as well as to exclude useless and misleading contents from an xml document. the system provides a declarative language one can use to define xml patterns and ontology queries to express syntactic as well as semantic filtering criteria. the system can be used through a web application which is endowed with a user-friendly graphical interface. finally, we provide some meaningful examples which show the usefulness of the implemented filtering methodology.



to face up such an information overload, in the last years a lot of efforts have been invested to develop query and filtering languages as means to consult xml documents. the w3c has defined some standard languages to query xml contents, such as xquery and xpath. however, a large variety of proposals have been developed independently, e.g.[10,17,14]. all these solutions are characterized by an



some programming languages supporting xml processing have also been developed, such as xcentric which is a logic language, extending prolog with a richer form of unification and regular types, designed specifically for xml processing in logic programming. xcentric is also employed as part of veriflog which is a tool for verification of web sites content and data inference. cduce and xduce(,) are typed functional programming languages, based on pattern matching, designed to support xml applications. such languages can be used to consult and query xml documents but provide basically an exact matching behavior and the semantic information is not considered.



in is presented a rewriting-like methodology to filter information from xml documents where the positive and negative filtering concepts are introduced. the work proposed in extends the ideas in introducing approximate patternmatching and presents a declarative pattern-based language for xml filtering, endowed with an approximate pattern-matching engine. a further improvement is proposed in where we have integrated the approximate pattern-matching engine with ontology reasoning capabilities in order to enable semantic data filtering.



the already mentioned xquery language, which uses xpath to describe path expressions, provide a minimal degree of flexibility. for example, element insertions in path expressions are only allowed by the explicit use of the\\ operator, while no element deletion or renaming is allowed. furthermore, no semantic based filtering facilities are provided.



in our framework, the connection between the filtering engine and the ontology reasoner is realized by means of(an extended version of) the dig interface, which is a standard api for description logic systems supported by a number of ontology reasoners(e.g. pellet, racerpro).



tion and many new approaches have been proposed. one of them, quite similar to ours, is digxcerpt, which presents a language that extends the xml query language xcerpt enhancing structural querying of xml data with ontology reasoning. similarly to our framework, they employ dig to interface the xml query engine with the ontology reasoner. although digxcerpt allows a powerful search and manipulation of xml data, it only performs exact query matching, while our methodology is able to perform a more flexible matching which ranks the query results w.r.t. computed similarity degree.



the resource description framework(rdf) has been designed to complement xml data with semantic annotations. a large number of prototype systems able to read and reason about such annotations have been developed, for example, which describes a logical framework in which xquery programs are enriched with rdf metadata. this approach enables a limited form of data inference from rdf documents, which is not as powerful as the reasoning capabilities of more complex description logic formalisms like the one supported by the dig interface.



plan of the paper. the rest of the paper is organized as follows. section 2 introduces the dig interface languages, by means of which we model ontologies and ontology queries; then, we provide an extension of the standard dig query language which is employed to define ontology query templates. section 3 presents our filtering language which combines an approximate pattern-matching engine with an ontology reasoning mechanism. in section 4, we describe the xphil system architecture and the way it works in order to answer user queries. in section 5, we briefly describe the web interface by means of which the system can be tested. finally, section 6 concludes.



the name univ. such ontology can be easily defined by using the dig formalism, more precisely by means of the dig tell language which is devoted to ontology description. the univ ontology models people and courses as individuals. each person has a position inside the structure, like associate professor, researcher, phd student and so on. positions are represented by means of hierarchically organized concepts.



the dig interface, whose complete formalization is available at, includes an ask language whose constructs are used to query ontologies loaded into ontology reasoners. ask statements allow us to infer information regarding concepts, roles and individuals of a given ontology. moreover, they can model boolean as well as non-boolean ontology queries. more precisely, a boolean(respectively, nonboolean) ontology query is an ask statement that returns a boolean(respectively, non-boolean) value.



letting ask statements denote non-boolean queries to reference xml tags of a given xml document via the tag:self notation. as we will show in section 3, a non-boolean ontology query q is typically bound to an xml tag t. by using the tag:self construct, we can automatically reference t inside q without citing it explicitly.



moreover, we provide four filtering operators filterop which can model both exact and approximative filtering w.r.t. a universal as well as existential semantics(i.e. filter{one,all}exact, filter{one,all}best). finally, note that, when no conditions are specified, the<conditions> tag of a filtering rule can be omitted.



moreover, tag selectors can contain three different attributes. the first two attributes ont and query enable tag flexible matching(i.e. matching modulo tag renaming). the ont attribute specifies an ontology file name, while the query attribute specifies the file name of an extended dig ask statement modeling a non-boolean ontology query. more precisely, given a tag selector t, by the syntax selector t by querying the ontology ontname via the query queryname. such synonyms are then used by the pattern-matching algorithm to find approximate results. as we have seen in section 2, the tag selector t can be referenced inside the query queryname using the tag:self notation. during the query execution tag:self occurrences are replaced by t.



conditions. conditions are employed to further refine the search of a given pattern inside an xml document. when some instances of the xml pattern have been detected inside the xml document and variables have been bounded to some values, the associated instance of the condition list is evaluated and the pattern instance is then delivered to the user if and only if the condition list instance evaluates to true.



example 3.3 assume that an xml document modeling university courses is given. for each professor we know both the name and the surname. for each course, the professor giving the course is identified by the concatenation of his/her surname and the initial of his/her first name. using three variables x, y, and z, we can model such property by means of the following functional constraint x++first(y)=z. following the ruleml syntax, such condition will be expressed by means of the following xml code.



example 3.5 consider an xml repository containing academic information along with the ontology univ. suppose we want to search for busy associate professors, that are, associate professors who are titular of at least one six month course and have more than three phd students. then, a possible rule searching for this property might be



example 3.6 consider the same xml repository and the univ ontology. suppose we have an xml document containing personal information about professors and we want to query it in order to obtain all contacts information for young professors(that is, professors whose age is less than 40). a query formalizing this property might be as follows.



