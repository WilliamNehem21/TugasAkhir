an embedded system represents a part of a product with which an end user does not directly interact. nowadays, there exists a lot number of typical applications of industrial embedded systems that are supported by software, for instance adaptive cruise control systems, automotive systems and nuclear power plants. these are mostly characterized by safety-critical properties.



the finite state machine model is very popular in the control flow specification of state/transition-based systems and many related analysis methods have been developed. these support a formal test derivation which can be used for validation and testing purposes. however, finite state machines lack to deal with the data flow. this shortcoming can be alleviated by using the extended finite state machine model. moreover, the test generation cannot be easily applied in this case.



in this paper, we discuss the testing problems for embedded systems modeled as extended finite state machines and propose a framework to deal with them. we first present the main components of an embedded system as well as their interactions. furthermore, the testing issues based on so-called p-efsm(predicated efsm). the later, represents a variant of the usual efsm are identified and the appropriate solutions will be discussed.



the paper is organized as follows. section 2 reviews the conventional finite state machine and the extended finite state machine models and gives a short comparison. modeling embedded systems based on p-efsm are presented in section 3. section 4 identifies the main properties of an embedded system to be tested. after that, the testing principle is explained. finally, section 5 concludes the paper.



system, for instance, regarding the data flow. therefore, fsms were extended to improve their description capability by using additional state variables and interaction parameters. such variables are used in programming languages specifying conditions on transitions and calculations carried out during transitions.



estelle is a standardized formal description technique(international standard iso 9074) based on concepts of structured communicating extended state automata and pascal. it is oriented towards the specification of complex distributed systems, in particular communicating systems. a specified system is presented as a tree of tasks where each task has a fixed number of input/output access points(interaction points). within a specified system it exists a fixed structure of subsystems(sub-trees of tasks) and communication links between subsystems.



the most important component of an embedded system consists of the controller which communicates with its environment, i.e. sensors and actors, via signals(i.e. events). to be recognized by all components, these events have to be declared as global variables for adjacent p-efsms. the events output from sensors represents input events for the controller. the events



that is, each output event generated by sensors must trigger a transition of the controller. this event represents an input event for the triggered transition. we assume here that the predicates related to the transitions are satisfied by the actual context.



there are two kinds of testing, general and special. the first one consists of testing of properties that must be held independently of special semantics of the developed system(consistency), such as livelock and deadlock-freeness, limitedness and resynchronization. the second aims at properties that are determined by the semantics of the designed system.



$ denotes either the input symbol? or the output symbol!. the letter g represents the name of the component sending the event or receiving it. we use the letters s, c and a to designate sensors, the controller and actuators, respectively. the condition for a transition is written in brackets[], the output



these predicates assume that first, it exists at least one input event generated by the sensors that is never used in the controller. secondly, the actuator contains a transition whose input event is not specified in the controller. thirdly, it exists at least a transition in actuators whose output event is not empty.



for a given p-efsm, it is decidable whether this p-efsm is incomplete. the states in which the p-efsm presents incompleteness can be then detected. this can be carried out by checking all the states of the specified behavior of the given p-efsm. each time the specified input events have to be checked against the potential input events at the given state.



