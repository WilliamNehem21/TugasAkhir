creol allows explicit control over data-flow synchronisations. in, creol has been extended to support first class futures, although the future access is explicit(using get and await). asp and proactive, have transparent first-class futures. thus, the synchronisation is transparent and data-flow oriented. in ambienttalk, futures are also first-class and are transparently manipulated; but the future access is a non-blocking operation: it is an asynchronous call that returns another future. this avoids the possibility of a dead lock as there is no synchronisation.



this differs from the approach adopted in other frameworks where access to a future is blocking. in, all processes interested in the future are registered as observers. when the result for the future is computed, all the registered observers are notified; this is very similar to eager-message based strategy as specified in. in a safe extension to java futures is proposed, but with explicit creation and access.



in, the authors provide the semantics of an object-oriented language based on creol; it features active objects, asynchronous method calls, and futures. they provide a proof system for proving properties relating to concurrency. the model is multi-threaded, with only one thread active at a given time. our approach is quite close to this work except that we study a component model featuring high level of abstraction, and hierarchical composition.



in, a formalisation of the fractal component model using alloy, a specification language, is presented. fractal allows for hierarchical composition of components, and separation of functional and non-functional concerns. the authors provide a analyser to check the consistency of model, they define key invariants and other properties of interest. compared to, we consider asynchronous components and focus on the component dynamic behaviour. this is crucial when specifying future management procedures.



our work extends which presents a component model giving a semantics to gcm, including hierarchical components, asynchronous communication, and first class futures. building on the structural description provided in gcm, formalises the component composition and communication semantics in the presence of futures. in order to prove properties related to the implementation of futures, we have extended with the precise definition of future update strategies, including semantics and constructs for the management of futures. with mechanised proofs, we show that our formalisation is complete and enables proofs on properties on futures and their update strategies, thus ensuring correctness of the proactive/gcm implementation.



our model inherit most of its structure from gcm. gcm allows hierarchical composition of components. a coarse-grained component may be formed by composition of several fine-grained components. a component containing one or more subcomponents is referred to as a composite component. primitive components do not contain other components, they are leaf-level components that implement the business functionality.



first class futures can be updated using different strategies[4,10,14]. we classify those strategies as either eager or lazy. strategies are called eager when all the references to a future are updated as soon as the future value is calculated. they are the future. for this, all components receiving the future must register themselves as a future recipient. finally, the lazy home strategy is the lazy version of eager home strategy where the future values are transferred on-demand: accessing a future reference triggers the future update.



form of rules is due to the component structure. classically there are two rules for stating that a component is willing to send a communication(one for primitives and one for composites). additionally, as there are three kind of bindings(from a parent component to a subcomponent, between two subcomponents, or from a subcomponent to its parent), there are three kind of communication rules(resp.



rcvresultcomposite(1): this rule expresses future update for a composite component which is the destination of the update. at the component n, the state s is updated such that the new value v for the future f, replaces the old value inside both the results and queue. the values for any futures inside v should be sent to n, this is recorded in the rl list.



the reduction rules for the primitive components are similar and appear in appendix a. we only show one of the rules below. rcvresultprim expresses the future update for a primitive component. all references to the future f are replaced with the new value v. entries are made in the frl for any futures present inside v. interaction between the component semantics and the internal state of the primitive is enabled by triggering transitions on the primitive behaviour, here receiveresult.



first, the definition of the component structure and the component semantics are directly translated from the preceding sections as we will show below. then this section will describe the properties we proved using our formalisation. this is clearly the most innovative part of this paper as it shows that our formalisation is able to handle mechanised proofs entailing reasoning on components, their structure, and futures. while the formalisation represents a few hundreds lines of code, the proofs are much longer(above 5000 lines) and entail reasoning interleaving component structure, semantics, and future registration aspects.



we now have sufficient formal constructs and tools to express future update strategies and to study their properties. this work showed that it is possible to formally prove completeness and correctness of our future update mechanism, and of the corresponding implementation in proactive/gcm. the proofs are relatively long due to the numerous reduction rules, and the rich component structure, thus a lot of cases had to be considered. one of the main difficulties was to design the good representation for our model in the isabelle theorem prover. a crucial point during the specification phase was to find the good isabelle/hol abstraction to represent the component structures. we think we found a good balance between expressiveness and abstraction, that allows formal reasoning but is close enough to the component model implementation.



