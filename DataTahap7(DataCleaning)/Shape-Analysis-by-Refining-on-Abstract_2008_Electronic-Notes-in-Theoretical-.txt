shape analysis algorithms statically analyze a program to determine information about the heap-allocated data structures that the program manipulates. it is an important methods used to understand or verify programs[7,8,9,10,11,12,13,14]. abstraction is needed if we want to do shape analysis efficiently. there are many abstraction methods, such as k-limited heap abstraction, shape graph and reference counts, 3-valued logic abstraction.



shape analysis can also be used to detect memory leak. memory leak is one of the most common errors in programs written in languages with pointers. occurring in large, memory intensive, long-time running programs, it can exhaust the available memory and cause the programs to fail. many models and methods are proposed to detect memory errors. in[1,2,3,4,5] an ownership model is used to detect memory errors. hackett et al uses region based method to detect memory errors. escape



the difficulty in dealing with complex expressions lies in the fact that the value of a complex expression cannot be easily defined in the abstract shape graph(asg). we can get the value of a basic type datum, such as an integer, by accessing the corresponding memory. however, if we want to know the value of a pointer expression, we must access several memories along a path. in this paper, we proposed abstract evaluation path(aep) to deal with this problem. aep is an abstract access path of the expression. it denotes how the l-(r-)value of an expression can be defined. in other words, it shows all the possible access paths along which the value of an expression can be defined in an asg. we call these paths evaluation paths. aep can be used to refine the asg to make the defining of the value of an expression easily.



c. we take a more aggressive materialization strategy in doing shape analysis. by supporting taking addresses of fields and stack variables, our method allows pointers into the middle of structures, not just the beginning of structures. our method is also conservative, which means it may generate more shape graphs than the program really generates.



outline. the rest of the paper is organized as follows. section 2 gives the definition of concrete shape graph(csg). section 3 defines aep and shows our algorithms of refining asgs based on aep. in section 4, we give the abstract semantics of the statements on asgs. section 5 shows the results of our experiments. section 6 lists some related work and gives the conclusion of our work.



a shape graph is a directed graph which consists of a set of nodes and edges. it is used to represent memory structures and the connectivity between them. it is different from ordinary directed graph since it may have many types of nodes, which are used to represent different data structures.



the name of the field. the node of a basic type datum has just one cell, whose name is nname.bas, where bas denotes the basic and only field of the node. the node of a composite type datum has several cells, one for each field, plus an additional one



rcell(v): cell is the basic cell of a pointer variable or the pointer field cell of a structure variable. it denotes the reachability of memory location v from cell. if rcell(v)= 1, then there is a path from cell to any memory cell of node v, which may have multiple memory cells.



typei(v): we use an integer to denote a structure type. different memory locations may have different structures. typei(v)= 1 if and only if memory location v belongs to type i. all the basic data types are classified into one type and different structures are classified into different types.



unique(v): it is only used in the definition of asg. in order to make the nodes in the shape graph finite, some node in the asg may denote a set of concrete nodes. for concrete shape graphs, for all addresses, v, unique(v)= 1.



abstract interpretation is a good method to deal with infinite systems; it can also be used to generate finite number of asgs from any possible infinite number of csgs. there are two reasons which cause the program states to be infinite: first, some variables may have infinite values, e.g. integer variables, float variables; second, the memories dynamically allocated may be infinite. since we have introduced the abstract memory location value, the infinite values are reduced to one abstract value. a set of predicates are used to classify the possible infinite memory locations into different classes. all the memory locations in the same class should have the same value for any predicate in the set. since the number of predicates is finite, the number of classes is also finite.



pcore={xi, rcell, typei}, is a set of unary predicates. there are some constraints: first, the truth value of predicate xi must be definite and there is one and only one memory location v which satisfies xi(v)= 1; second, for any node v, the truth value of typei(v) is definite. this is the set of core predicates.



the algorithm is described in algorithm 1. there are some new functions. every graph has a current attribute which identifies the current memory cell. function node maps the memory cell to its node. split is used to generate a new node from a non-unique node and cut is used to delete the inconsistent edges and graphs.



the idea behind the algorithm split is simple: we just split a new unique node from a non-unique node and the new node inherits most properties of the old one. the current memory cell is transferred from the cell of the old node to the corresponding cell of the new one. algorithm 2 shows the algorithm split. after splitting, there may be many redundant edges. we use the cut operation to delete the impossible edges and graphs.



if a unique cell has more than one output edge in graph g, then we use a graph set s to replace g. for each graph g' in s, every unique cell has at most one output edge. the total number of the graphs in s is the multiplication of the number of output edges of each unique cell. the reachable predicates are conflict in the following two conditions:(1) rcell(v)= 1, but there are no paths from the cell to v;(2) there is a definite path(all the edges along the path have truth value of 1) from a variable cell to node v, but the corresponding reachable predicate for v has truth value of 0. the share predicates are conflict in two conditions:(1) shared(v)= 1, but there are no input edges to v.bas or just an input edge from a unique cell;(2) shared(v)= 0, but there are more than one definite input edges to v.bas.



second, different programs may need different core predicates. the core predicates can be different from the definition in this paper. actually, we add shared into the core predicate set in dealing with the elem merge program and the total number of shape graphs is greatly reduced. but if we also add shared into the core predicate set in dealing with the last two programs, the total number of shape graphs will increase.



in this paper, we present a shape analysis method which can deal with complex expressions. this method also allows pointers into the middle of structures. aep is generated from arbitrary expression in c language and is used to refine the asg. the semantics of a statement can be easily defined on the result shape graphs after the refinement. memory error conditions can be checked on the asgs. in the future, we plan to improve the efficiency of our method and provide more thorough experimental evaluations. we will also apply our shape analysis results to verify the correctness of programs in c language.



