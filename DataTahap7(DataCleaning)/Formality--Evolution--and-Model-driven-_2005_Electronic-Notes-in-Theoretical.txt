the first of these is reflected in the syntax of the modelling language, which is itself object-based. the second is a practical concern: that the model need not concern itself with the design of external protocols. the third is quite fundamental: the modelling language cannot be used to describe the effects of concurrent access to data.



the language has two built-in types: string and nat; other primitive types may be introduced directly, as sets, or indirectly, via enumeration classes or type synoyms. an attribute of primitive type is declared simply by writing patt: ptype. whenever ptype is string, an additional argument is used to give the expected length.



att4 is a set-valued attribute, containing references to objects of class otherc. this attribute has two methods of its own, method3 and method4; the definitions of these methods may include references to local methods method5 and method 6. the expected size of att4 is num. att5 is a derived attribute, whose valued is obtained by concatenating the values of the two(string-valued) attributes att2.oatts and att2.oattt.



with the exception of _0, these decorations may be applied to class names(to indicate a particular object) or to attribute names(to indicate a particular attribute). where attribute names are unique within the scope of a method, any root qualification may be omitted: for example, class.att1.att2 may be written as att2, and classthis.att3 may be written as att3.



the precondition insists that the current object is an object of class c; that input sin refers to an object of class d; and that sin is not already an element of s. the change list indicates that the method may change the value of s. the postcondition states that, afterwards, sin should be in s.



each method has a corresponding decoration. within a class c, the methods create and destroy can use cnew and cthis to refer to the object that is to be created or, respectively, destroyed. for an optional attribute att, the methods set and clear can use attin and attthis to refer to the object that is to be inserted or, respectively, removed.



in this paper, we have described a model-driven approach to software engineering, based around the use of a new object-based language. this approach has developed through application: a number of large case studies, including two systems for commercial customers, have been produced, and are being maintained. the language is inspired by z, and implemented using b, in a combination of formal techniques and code generation that has proved particularly effective.



