commonly, programming languages can be broadly categorized according to their typing as static or dynamic. nevertheless, there are other typing classifications that allow to mix typing features between both static and dynamic extremes, such as hybrid typing and gradual typing. in particular, gradual typing languages allow programmers to make use of static and dynamic typing, and thus, obtaining the advantages that both represent.



in dynamic typed languages(such as racket, scheme or lisp), an identity function can be declared as(lambda(x)x). in this declaration it is only stated that the type of x is unknown at this very moment. later, during run-time, the type of x must be known. notice that as it is an identity function, the type of the return value x can be only known until the type of the argument x is already known. in a gradual typing system, the above declaration should have a type that represents the notion of typing in run-time but in compilation time and hence a type consistency notion is essential.



robustness of usual extensions of functional languages are based on the preservation of fundamental properties such as security. a meta-theory, as presented by toro and tanter allows to extend a language into a gradual one in a safe manner: the gradual union of types and the unknown type? are combined through the abstract gradual typing(agt) methodology. the agt is based on abstract interpretation due to cousot and cousot, for a sound abstraction using galois connections. abstract interpretation describes the computations made in a given system but in a different universe. for example, the elements in a program and their operations can be modeled in another language, preserving their semantics.



we present an extension of a functional language with records. such an structure allows the programmer to manipulate expressions that could have different types. the gradual extension is carried out with gradual union types, which are intended to preserve the safety property. in this paper the extension of the type system is provided in order to understand the abstraction behind the agt methodology, as proposed by.



toro and tanter combine these two proposals into a gradual union typing(gut) approach, in which it is possible to have the two different types of union: disjoint or tagged union types, and untagged union types. mixing tagged and untagged unions in a language is named as optimistic type checking to ensure that statically any term will have a type. in particular, optimistic type checking means that some statement is well typed without the occurrence of any explicit projection or case analysis.



disjoint union types or tagged unions(t1+ t2) denote values of different types. they are called disjoint because some elements are explicitly tagged, so the type system recognizes the type of each element. hence, it guarantees and ensures the type of each element during compilation and execution time.



toro and tanter, based on the agt methodology, propose static semantics for a gradual typed functional language, which make use of gradual unions and unknown typing. the notion of gradual union types is to restrict the imprecise types to denote a finite number of static types. such a semantic is based on the simply-typed functional language(stfl), which is statically typed.



this paper extends the gut by toro and tanter with records. a record is a datatype that describes variables(called fields) and their values. fields possibly have different types. some programming languages use records to define new types, and therefore, are able to extend the language[6,12]. a record is composed by one or more labels, here denoted as l. each label has an assigned term, which also has a type.



the type setting here provides a static extension using records for the study of gradual union typing, as presented by toro and tanter in. this approach contributes to the study of the theoretical perspective for the foundations of programming languages. adding records to a functional language allows to create new variants of types, using them as basic types predefined in the language, for a richer and more versatile language. extending the methodology for languages with gradual typing helps to combine the advantages of using both static and dynamic typing, while preserving the properties of consistency and security in it.



a related work from garcia, clark and tanter proposes an extension of a type system with records using subtyping, and formalizing a relation of consistency on gradual typing language, by following the methodology proposed by siek and taha. our approach here differs from theirs as we rely on gradual union types. here it is already provided a static formal system. further, the dynamic formal part, demonstrating its static and dynamic semantics properties, is aimed as future work. the main goal is to obtain a gradual system with records using the so-called threesome calculus for the dynamic semantics.



