in this paper we describe a network invariant for all con gurations of the futurebus+ cache coherence protocol. the network invariant was computed with pax and veri ed by a model checker. using this invariant we are able to prove a specication of cache coherence correct for an arbitrary number of components on a single bus of the system. this speci cation includes a progress property not proven yet. we show how the result for the single bus system can be extended to tree-shaped systems. this is, as far as we know, the rst uniform proof of the protocol with multiple data-buses.



considerable e ort has been invested into the veri cation of the ieee futurebus+ protocol[11,6,20,12]. either these e orts have not presented a uniform proof of correctness, i.e., a proof which establishes correctness for all instances of the parameterised network, or they have only veri ed a subset of the cache coherence speci cation.



we base our proof method on the method described in[3,4,5]. it consists of building a model of the parameterised network in the theory of weak second order logic of one successor(ws1s)[8,15,28]. the dynamic behaviour is described with a ws1s transition system. an abstraction relation is formulated in ws1s. both serve as input to the tools pax, which computes an



in the next section we introduce the notation and de nitions used in this article. we recall the de nition of ws1s transition systems. section 3 describes our extension of the proof method in[3,4,5] to synchronous parallel composition. a short description of the futurebus+ cache coherence protocol is given in sect. 4. section 5 recalls the de nition of l-simulation and network invariants, summarises the results of and describes the construction of the network invariant for the general case. we close this article with a short conclusion and comparison to related work.



terms of ws1s are build from the constant 0, rst-order variables, and the successor function t:t+ 1 applied to a term t. second-order terms are either second-order variables, the constant; denoting the empty set, or terms of the form x[ x0, x\ x0, or x n x0, where x and x0 denote second order terms. atomic formulae are of the form b, t= t0, t< t0, or t 2 x, where b is a propositional variable, t and t0 are both terms, and x is a second-order term. ws1s-formulae are build from atomic formulae by applying the boolean connectives as well as quanti cation over rst and second-order variables. first-order monadic formulae are ws1s-formulae in which no second-order variables occur. ws1s-formulae are interpreted over models that assign nite subsets of!(the natural numbers) to second-order variables and elements of! to rst-order variables. the interpretation is de ned in the usual way. given a ws1s formula f,[[f]] denotes the set of models of f. the set of free variables is denoted by fv(f). by fv2(f) we denote the free second-order variables, by fv1(f) we denote the set of free rst-order variables. one says that f is( rst-order) closed, if fv(f)=;(fv1(f)=;). ws1s is a decidable formalism. given a ws1s formula f we can construct a nite automaton, which is enumerating[[f]]. however, in it is shown that the space needed to compute the set of models of a ws1s formula is bounded from below by a stack of powers of two the size of the length of the formula. despite this discouraging fact, a decision procedure has been implemented in the mona tool.



(b) f0;:::; m 1g. 8nx:f abbreviates the formula 8x:(0 x^x< n)! f, and 9nx:f abbreviates the formula 9x:(0 x^ x< n)^ f. similarly for second-order variables b we abbreviate the formula 8i:i 2 b! f by 8bi:f and 9i:i 2 b^ f by 9bi:f. the formulae in af(n) are interpreted over



the transition relation is given by just one formula. however, the space needed to compute the set of models of a ws1s formula is bounded from below by a stack of powers of two the size of the length of the formula. in our case study this resulted in a formula which is to large to be handled with our resources. this makes it necessary to keep the formula of the transition relation small. in a method to remedy this situation is presented.



initially, any cache line is invalid. an invalid cache line must issue a command or snarf a copy of the desired data to change its state(snar ng means reading the data from a transaction issued by another component). it is possible for a cache line to transition to any other state from the invalid state. a module that initiates a read-shared transaction and completes it successfully transitions to shared-unmodi ed state if tf is asserted and to exclusive-unmodi ed state, otherwise. it may assert tf during a read-shared, read-invalid or copy-back transaction to change its state to shared-unmodi ed. a module initiating a read-modi ed transaction that completes successfully will cause its cache line to change state to exclusive-modi ed.



a processor may change the state of a cache line in exclusive-modi ed state to invalid or shared-unmodi ed by initiating a copy-back transaction. it must assert tf to change state to shared-unmodi ed. if this module snoops a readshared, read-invalid or read-modi ed transaction, it must assert iv to intervene and supply the data in place of the memory. it may keep a shared-unmodi ed copy if it asserts tf during a read-shared or read-invalid transaction. it always changes the state of a cache line to invalid if it snoops a write-invalid transaction.



furthermore, modules may split transactions if access time of a module is slow compared to bus access time. cache and memory modules determine if they need to split a transaction by decoding the address and command for each cache-coherent read transaction that they snoop. if the module is responsible for that address and cannot respond immediately, it asserts sr.



in illegal attribute combinations are speci ed. whenever such a combination is observed, the system sets a bus-error. even if the observed transaction is legal, it may indicate an error. the absence of these error conditions is speci ed as(1).



de nition 5.1 let(p; vl) be a partially ordered set of processes, and k monotone with respect to vl, i.e., for all p; q 2 p with p vl q and for all r 2 p we have p k r vl q k r. then we call a process i 2 p a network invariant, if it satis es p vl i and p k i vl i for all p 2 p.



the rst step in the construction of the network invariant was de ning a parameterised model of the protocol as a ws1s transition system. in this particular case it was a simple task. we used the model described in and translated it into a bts(see def. 2.1). using the method described in sect. 3 we have build a ws1s-ts from this description. the memory line and the bus itself are not considered in the model. they were added by hand to the ws1s-ts.



much e ort has been invested into minimising the ws1s-ts. the transition relation of the automata constructed from the ws1s description of the system may grow exponentially in the number of variables occuring in the system's description. therefore, we minimised the number of second-order variables and the syntactic representation of the transition relation. this is described in detail in.



this is a\natural choice" for an abstraction relation. the idea is, that the abstract process should be able to\mimic" every behaviour of the system it is abstracting. the same idea is also used in. we introduce an abstract



using these abstractions and the fact that our parallel composition is monotonic with respect to vl(cf.) the network invariant in question turns out to be the network invariant for the single-bus case(rf. sect. 5.1). this will be established in the following paragraphs.



the rst step is to show, that the bus-bridge bb does not interfere with normal operation. in our model of the protocol the bus bridge itself has an instant transmission time and only communicates the most necessary behaviour. the delays introduced by message propagation are simulated by having the agents non-deterministically split read-commands on their local bus. then it easy to see, that bb vl b, where b is a data bus. we have already shown, that m k b k p vl i, where i is the network invariant. using the monotonicity of k with respect to vl and the fact that vl is transitive, one has ma k bb k ca vl m k b k p vl i.



the second step is to put these results together. a single-bus system is composed of the data bus, a memory unit and an arbitrary number of processors. by the abstraction ma vl m one can replace the memory unit on a bus by an memory agent without changing its behaviour. similarly any processor may be replaced by an cache agent. hence the bus turned into a tree node. the main point is, that any of these substitutions have the same network invariant, because the memory-agent and the cache-agent are



e. clarke et al.. they used temporal logic model checking to show that the protocol satis es a formal speci cation of cache coherence. they have veri ed a selection of examples and not a parameterised version. we have based our speci cation of cache coherence on theirs and extended it with a new progress property.



in the states of a network are encoded as a regular language over an alphabet of the states of its component processes and the transition relation is represented by a nite state transducer. this idea is improved in[1,7], where this method is called regular model checking. this method has been implemented in the pen program. we have based our method on similar ideas. for some systems a network invariant can be computed using an algorithm proposed by d. lesens, where widening techniques are used to compute a network invariant for linear parameterised networks. this idea is similar to ours. all those methods are semi-automatic or may fail to terminate.



we have used pax to compute a network invariant[21,29] for single-bus con gurations of the futurebus+ cache coherence protocol. such network invariants are described in[12,22]. the network invariant given in is not correct. though the abstraction relations are similar, the proof in was done by hand. our semi-automatic method increases the con dence in the established proof.



in it is shown that the veri cation problem for the linear futurebus+ cache coherence protocol is decidable. however, the veri cation with pax is very fast. it only needed 2 minutes to verify the system. using a conventional model checker and 2 processors needed 36 hours to model check our speci cations.



