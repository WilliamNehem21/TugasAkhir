a rewrite logic semantic definitional framework for programming languages is introduced, called k, together with partially automated translations of k language definitions into rewriting logic and into c. the framework is exemplified by defining silf, a simple imperative language with functions. the translation of k definitions into rewriting logic enables the use of the various analysis tools developed for rewrite logic specifications, while the translation into c allows for very efficient interpreters. a suite of tests show the performance of interpreters compiled from k definitions.



the k language definition framework is a rewrite logic based framework for specifying programming languages. it includes both a notation, the k-notation, consisting of a series of domain-specific syntactic-sugar conventions aiming at simplifying and enhancing readability of language definitions, and a language definition technique, the k-technique, based on a first-order representation of continuations. as part of our ongoing research, we are developing a number of tools around k to assist in defining and analyzing programming languages.



here, we show two pieces of this work. first, we show the semantics of a simple programming language with functions defined using k. this language has standard imperative features, including a controlled jump in the form of a function return. second, we provide some details of a translation from our notation in k to an



here we briefly recall the k-framework, useful to compactly, modularly and intuitively define languages in rewrite logic. it consists of the k-notation, i.e., a series of notational conventions for matching modulo axioms, for eliding unnecessary variables, for sort inference, and for context transformers, and of the k-technique, which is a continuation-based technique to define languages algebraically. the kframework is described in detail in.



context transformers are the most subtle aspect of the k notation, based on the observation that, in programming language definitions, it is always the case that the state of the program does not change its significant structure during the execution of the program. for example, the store will always stay at the same level in the state structure, typically at the top level. if certain state infrastructure is known to stay unchanged during the evaluation of any program, and if one is interested in certain attributes that can be unambiguously located in that state infrastructure, then we only mention those attributes as part of the context assuming that the remaining part of the context can be generated automatically(statically). since silf does not have threads, exceptions or other complex control sensitive language features, context transformers do not make a difference in this paper, so we do not discuss them in more detail. the reader interested in the role of context transformers in compactness and modularity of language definitions is referred to.



in words, this rule states that, to apply the function with identifier i to a(possibly empty) list of values, we need to replace the apply continuation item and the continuation k with the continuation k' associated with the function i in the function environment, put k and environment env on a stack, and replace env with the global environment genv, which will give us access to global names while hiding names declared in the calling context. we make use of many of the conventions we discussed in this section within this rule. for instance, the values are unnamed since we do not use them at this point. also, since the stack is an associative list, we are adding something to the head of the list by replacing the identity on the left with the item we are stacking, a tuple. the function environment is a set, so we match against the function name to get the proper tuple in the set without the need to specify the rest of the set. we need only mark those parts of the state that are changing by putting the changes under what is being changed; the parts of the state that remain the same need no further notation.



arithmetic, relational, and logical operations. all three operation types follow the same general pattern. when we encounter an addition expression, e.g., we first need to evaluate both operands. we also need to keep track of what operation we are performing. so, we will replace an expression such as e+ e' with one were we evaluate e and e' and put+ on the continuation to remind ourselves what we need to do with the results. once we get back the values from evaluating the two expressions(here, expected to both be integers) on top of a+, we return their sum(using integer addition):



in this paper we introduced the k language definition framework and used it to define a simple imperative language with functions. we also showed an example of translating this definition into an interpreter in c. based on current encouraging results, we believe this is a promising strategy for automatically deriving interpreters from definitions of language semantics.



there is much future work yet to do. we are still looking for ways to improve k as we gain more experience using it to define languages. we are also continuing work on automatically generating interpreters in rewriting logic and c from k definitions, which is currently a mix of manual and automated processes. we believe there is no reason this cannot be done in a fully automatic fashion. along with this, we are looking for ways to more closely define both the syntax and semantics of languages, to allow for the automatic generation of language parsers and other static tools which process program text using rules we have defined in k.



note that these operations are not short-circuit, since we evaluate both operands to and and or at once. we could make them short-circuit by instead evaluating only the first operand, and storing the second with the continuation for the operator. based on the result of evaluating the first operand, we could then either return the proper value or evaluate the second operand to give us the value of the operation.



