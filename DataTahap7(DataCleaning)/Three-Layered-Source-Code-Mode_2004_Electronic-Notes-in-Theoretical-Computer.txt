as an example, consider xml. as a meta-model, xml permits the expression of schemas defined for a specific role. to express the syntactic structure of code, srcml and javaml both define xml compliant schemas. however, the former views the source-code as the foundation and adds markup to the code while the latter views the model as the foundation and adds the code, as attributes, to the representation. in this case, xml is used in two ways to accomplish the same purpose but to support differing higher level pressures. srcml is designed to assist programmers working with the source-code while javaml is designed to be easily manipulated by other tools for xml.



gxl, an xml schema, can be used to express graph-based software structures. when used for this role, gxl has little relationship to srcml or javaml. in this case, pressure from below, through the desire to express unrelated concepts, is exhibited.



we believe that a solution to these issues is to support multiple schemas and representation models. the key to this response is to utilize a multilayered approach, where each layer minimizes the constraints it imposes on higher layers and decouples higher layers from the constraints imposed by lower layers. in this article a three-layered implementation and its elements are detailed.



the storage layer is implemented using a database or repository system. for this reason, the storage model is database specific. examples of storage models include the relational model, object models and text models. it is not anticipated that there will be significant scalability issues as modern databases are used routinely to store data-sets in the gigabyte range.



it is also possible to consider the storage layer as providing an additional schema. for example, if there is information for which there is no need for a higher-level conceptual model, or for which a conceptual model does not exist, the information can be stored directly using the storage model. this practise is not desirable, as the storage model interface usually lacks a strong set of features for manipulating information. in response to this lack, paul and prakash have developed an algebraic query language specifically designed for manipulating source-code.



while it is possible to store multiple xml schemas in the same database, there is no documented research in this area. specifically, there needs to be further research on the implications of normalization to remove redundancy. as well, the use of a relational database to store source-code is known to be inefficient when the code is decomposed into grammatic units. queries must reconstruct code segments recursively using sub-queries to access each sub-element. in modern systems, this reconstruction can be performed efficiently, but it is not known whether this performance is maintained when multiple low-level conceptual models are integrated in a single database



in jupiter, we are exploring a multi-level markup approach. for conceptual modelling, traditional markup, as seen in javaml, srcml and gxl, is used. to store the conceptual models, a second, lower level of markup is used. the second level of markup is highly simplified and is specifically tailored for the multitext structured text database system. while similar to xml-style markup, the storage level markup exhibits several key differences in support of retrieval efficiency. first and foremost, multitext markup is indexbased to support algebraic query solution. relationships are represented as pairs of indices and have no semantic constraints. as well, apart from relationships, markup items are atomic and attributeless tokens that have no imposed limitations on their locations. the similarity of the conceptual and storage models permits conceptual models to be easily mapped to the storage model.



a 3-layered approach stacks conceptual models upon a storage model. extension of this approach will likely entail the splitting of the conceptual layer into layers focused on a specific concept. for example, a 4-layered implementation could have a low level ast-based layer on top of the storage layer and below a higher level dmm-based layer.



multi-layered approaches have yet to have a significant impact on the field of reverse engineering. though they offer improved flexibility, they are more complex to implement and have not been well researched. it is not known how well a storage model, such as the relational model, will integrate multiple conceptual models. more research on the representation of the various conceptual models using storage specific models is needed. similarly, it is known that relational query languages are less desirable for use in some maintenance tasks. hence, there is also a need for development of techniques to map abstract graphical languages to database retrieval languages such as sql.



there is some discussion on the development of common conceptual models for information interchange but this discussion has not been carried out with respect to software storage models. existing repository systems utilize relational, object-oriented, text, logical(prolog) and customized database systems. there is now a need to develop a consensus on the most appropriate storage models for representing conceptual models.



the use of a multi-layered approach unifies much of the work that has been occurring in the development of reverse engineering tools. research on information extraction and representation is focusing on the schema layer while research on repository systems usually examines the storage layer. these topics should not be viewed as disjoint, but instead as two elements of a more complete layered implementation approach.



