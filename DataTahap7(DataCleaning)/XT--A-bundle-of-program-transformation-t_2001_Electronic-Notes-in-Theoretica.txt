program transformation encompasses a variety of different, but related, language processing scenarios, such as optimization, compilation, normalization, and renovation. across these scenarios, many common, or similar subtasks can be distinguished, which opens possibilities for software reuse. to support and demonstrate such reuse across program transformation project boundaries, we have developed xt. xt is a bundle of existing and newly developed libraries and tools useful in the



in this short paper, we will provide an overview of xt and an indication of what is possible with it. section 2 fixes terminology and discusses common program transformation scenarios. section 3 outlines the program transformation development process that we want to support. section 4 discusses the actual content of the xt bundle, and explains how its constituents can be used to support program transformation development tasks. section 5 summarizes our experiences with xt so far, and section 6 wraps up with concluding remarks.



program transformation is the act of changing one program into another. the term program transformation is also used for a program, or any other description of an algorithm, that implements program transformation. the language in which the program being transformed and the resulting program are written are called the source and target languages respectively. below we will distinguish scenarios where the source and target language are different(translations) from scenarios where they are the same(rephrasings).



program transformation is used in many areas of software engineering, including compiler construction, software visualization, documentation generation, and automatic software renovation. at the basis of all these different applications lie the main program transformation scenarios of translation and rephrasing. these main scenarios can be refined into a number of typical sub-scenarios.



in a rephrasing scenario a program is transformed into a different program in the same language, i.e., source and target language are the same. examples of rephrasing scenarios are normalization, renovation, refactoring, and optimization. in a normalization a program is reduced to a program in a sub-language. in renovation some aspect of a program is improved. for example, repairing a y2k



the list of sub-scenarios is not complete, and in practice many program transformations are a combination of sub-scenarios. for example, a single compiler may perform code optimization after transforming its input to a target language. in fact, xt supports component-based development of program transformations, where each component might follow a different transformation scenario.



design a transformation pipeline. generally, this pipeline consists of parsers and pretty-printers as front and back ends, and contains a variety of rephrasing and translation components. the interfaces between the components of the pipeline need to be established in this phase.



an implementation of a transformation system for a subset of haskell incorporating the warm fusion algorithm was undertaken as a case study in program transformation with rewriting strategies. the transformation system consists of a parser, a normalization phase to eliminate syntactic sugar, a typechecker, the warm fusion transformation itself and a pretty-printer. the warm fusion algorithm rephrases explicitly recursive functions as functions defined using catamorphisms to enable elimination of intermediate data structures(deforestation) of lazy functional programs. by inlining functions rephrased in this manner, compositions of functions can be fused. the bodies of all function definitions are simplified using standard reduction rules for functional programs.



the grammar for haskell98 has been semi-automatically re-engineered from a yacc grammar using the yacc2sdf tool. a pretty-printer for haskell was built using gpp. the transformations have been implemented in stratego and make extensive use of the generic algorithms in the stratego library, in particular those for substitution, free variable extraction and bound variable renaming.



the sdl grammar was obtained from yacc using yacc2sdf, gpp was used for pretty-printing, and sdfcons was used for abstract syntax generation. furthermore, the grammars used in addition to sdl where already available for reuse in the grammar base. all programming was performed with stratego.





xt shares its bundling infrastructure and the sdf and aterms packages with a peer bundle: the asf+sdf meta-environment. this bundle integrates these packages with a compiler and interpreter for the asf programming language, a structure editor, a gui, and other components into an interactive development environment for language definitions and tools. by contrast, xt supports multiple programming languages, and offers an extendible set of components that can combined in various ways.



