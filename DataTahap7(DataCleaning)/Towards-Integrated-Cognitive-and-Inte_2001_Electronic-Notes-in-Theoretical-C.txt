using cognitive architectures to analyse the usability of human-computer interfaces is an extensively investigated strategy. a particularly powerful way to perform such analysis is through syndetic modelling, where both the interface and the chosen cognitive model are described in the same specification framework; allowing the combined behaviour of the two to be analysed. this paper proposes lotos as a syndetic modelling language. we highlight four reasons why syndetic modelling is so difficult and show how the lotos notation addresses each of these four reasons.



procedures and documents, to analysing biological systems and computer interfaces. the work presented here fits into the latter of these non-standard applications. however, our application of formal methods to hci is unusual since it focuses on syndetic modellinga particular approach to analysing the usability of computer interfaces in which the interface and the cognitive model of the user are analysised together in the same notation and in an integrated fashion. in this paper, we argue that the formal description technique lotos can be advantageously applied to such syndetic modelling.



human computer interaction. the next generation of human-computer interfaces will be extremely complex, incorporating sophisticated interaction mechanisms, such as gestural and multi-modal interaction. furthermore, it is clear that if these interaction mechanisms are used in an unconstrained manner interfaces can be developed which are very difficult to use. as an illustration[10,9] shows how the combination of mouse-based pointing gestures and spoken phrases in the matis system is not as effective as expected due to the demands of competing cognitive resources.



thus, there is a clear need to assess how cognitively demanding particular interaction tasks are. the standard approach to such assessment is to construct a prototype system implementation and perform user trials. however, this is both time consuming and expensive. thus, along with many others, we consider how cognitive models can be used in making such an assessment. a powerful approach to such assessment is to describe both the interface and the chosen cognitive model in the same notation and then analyse the cognitive behaviour in the context of the particular interface. the term syndetic modelling has been used to describe such combined specification and analysis doubt critical. in particular, a full description of any non-trivial cognitive architecture will necessarily be very large and, in addition, interface behaviour can be extremely complex. thus, syndetic specifications will certainly have two main(large) components, each of which will contain sub-components. in addressing this issue of scalability we seek specification structuring techniques which have two characteristics:



hierachical. a major aspect that supports scalability is the ability to build up specifications in a hierarchical manner, for example, at a particular level of decomposition, being able to wrap up a complex behaviour in a component and use the resulting component at a higher level of specification. this implies that we need to allow components to themselves be structured in terms of components. note that some techniques fail in this respect by either being completely flat, e.g. petri nets 4 or only allowing one level of component structure, e.g.(timed)automata approaches such as uppaal.



in addition, it is beyond the scope of this paper to give a full introduction to lotos. thus, a certain knowledge of the notation is assumed. also, throughout the paper we use a reduced lotos notation in order to simplify presentation. for example, gate lists are not included in process definitions.



representations from different flows can be blended to create a composite representation. however, the nature of the blending depends upon the cognitive task being considered. for example blending might only be possible if the two representations are, in some appropriate sense, consistent.



each process contains a number of interaction points at which it can communicate with its environment, i.e. with the other concurrently evolving processses. we view the notion of a process as a suitably general structuring paradigm to underly syndetic modelling. this is testified to by the observation that basic components of both the cognitive architecture and the interface can be modelled as lotos processes, see subsection 3.3.



clearly in a model constructed with autonomous components a mechanism needs to be provided which enables components to interact. furthermore, if our chosen notation is going to be appropriate this interaction paradigm must be primitive enough to underly inter-component communication in both the interface and the cognitive domain. we believe that the process calculi interaction paradigm is sufficiently primitive.



processes in process calculi interact by performing a synchronous rendezvous/handshake. when both processes are ready, an atomic 6 synchronisation and associated transfer of data occurs. such primitive interactions yield the process calculus concept of an action. the primitive nature of such an interaction paradigm can be seen from the observation that more complex interaction mechanisms, such as asynchronous or shared memory communication, can be constructed from action based interaction and can thus be viewed as derived behaviour[14,17].



interface interactors. for the structured description of interactive software, interactor models have been developed[12,15]. interactor models form an abstract framework for the description of components within an interactive system. the generic interactor model can be specialised to focus attention on particular issues of system behaviour by embedding the basic interactor model into a particular language or modelling approach.



the lotos interactor model(lim), describes interactor behaviour in lotos. it organises the actions used to describe system behaviour along three dimensions: type of action(control or information), originator(application or user side), and direction(input and output). the interactor is considered as an entity that is able to mediate between the user and the application side. it gives feedback on user generated input and it uses



the lid is specified as the parallel composition of a measuring(m), a presentation(p) and an abstraction(a) component which are all specified as lotos processes. the actions im1 to imj model the input received by the measure process. the actions it1 to itj model the input triggers. the action mo is the output sent by the presentation and od the output generated by the abstraction process.



where the two constituent processes could be defined in the style shown in section 3, each of which contains concurrent behaviour, and g is the set of common actions between the interface and ics, e.g. control of a mouse interactor either directly(or indirectly)via the lim hand ics transformation.



compaction. firstly, the complexity of the complete specification of both the interface and the cognitive architecture can, in some way, be hidden using the lotos hiding operator. this allows a set of actions to be hidden from the environment. thus, if the set of actions that are relevant to a particular analysis can be identified, all other actions can be hidden. for example, if we are interested to observe/analyse the behaviour of ics only at its sensory and effector ports, we can do this by hiding all other actions, here the set of actions g, i.e.,



simulated execution. tools such as lola and smile enable specifications to be executed in a simulation environment. the approach is that the specification is run, with the user of the tool interactively resolving choices and non-determinism(automated resolution of such branches is also possible). simulated execution can be combined with internal action compaction by just observing the behaviour of the specification at certain interaction points.



verification. tools can be used, such as testing and model checking, to automatically determine whether the syndetic specification satisfies certain properties. with testing, the property is coded as a test process and then the specification is analysed to see if it will pass or fail the test. with model checking the property is coded in temporal logic and then the model checker automatically analyses whether the syndetic specification satisfies the property.



goal formulation logic. we introduce an interval temporal logic which can be used to formulate cognitive properties of ics. this is based upon the logic mexitl which was described in. this logic is interpreted over the intervals described in the last bullet point. thus, giving us a semantic link between lotos and interval temporal logic.



case study. we analyse the capabilities of ics to perform certain multimodal tasks. these tasks have arisen from assessment of the matic system and have also been considered in and in[10,9]. for example, a typical negative property that we analyse is:



analysis. simulation and deductive reasoning are used to perform this analysis. specifically, we verify properties of the form of the above negative property using deductive reasoning in the interval temporal logic. this reasoning uses an axiomatization of the logic. in contrast, positive properties are verified constructively using the simulation tool lola. thus, a fulfilling trace is interactively constructed through simulated execution of the specification.



we have motivated the use of lotos in syndetic modelling. lotos has been used in modelling the human-computer interface before. however, our use of the notation for modelling cognitive behaviour is new. in addition, we believe that lotos provides an interesting alternative to modal action logic which has typically been used in syndetic modelling[10,9]. our main preference for lotos is that we believe it provides an appropriate level of abstraction for integrated interface and cognitive specification and analysis, since it sits between prescriptive(programmed) and very abstract(logical) modelling notations.



the work presented here has been performed in the context of the tmr tacit project(funded by the eu under the tmr programme, contract n. erbfmrxct970133) and thus, we must thank all the members of the project. in particular, we would like to thank david duke, david duce, jon may and phil barnard with whom we have had valuable discussions.



