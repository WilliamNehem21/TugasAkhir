in uml, the general structure of objects, their attributes and relations are modeled as a class graph, and an instance of a class graph is defined as an object graph. the class graph of a system determines the general properties of objects and how objects collaborate in realizing a use case. in this paper, we define class graphs and their object graphs as directed labelled graphs, and investigate in a graph theoretical approach what changes in the object structure maintain the capability of providing services. we define the general notion of structure refinements. a structure refinement is a transformation from one graph to another that preserves the capability of providing services, that is the resulting class graph should be able to provide at least as well as the original graph. we give a small set of structure refinement rules that is proved to be sound and complete for a kind of structure refinement.



structure refinement is important for an object oriented design to be maintainable, reusable and cohesive. in this paper, we propose a calculus of structure refinement by using graph transformations. we define a class declaration section as a directed labelled graph, called a class graph. the nodes are labelled with names of classes or primitive data types, such as int, char and string, and edges are labelled with attribute names(also represents uml associations) or symbol q denoting the direct inheritance relation.



section 2 shows how a class declaration section can be defined as a directed labelled graph. in section 3 we define object graphs for class graphs to represent system states. we also propose an informal, yet precise and obviously formalizable, operational semantics of programming commands based on class graphs and object graphs. in section 4, we define structure refinements between class graphs and their derived relations between object graphs. section 5 establishes a set of class graph refinement rules and prove that they are sound refinements. we also show that this set of rules are complete with respect to a restricted notion of structure refinement.



a class declaration section can be represented as a directed and labelled graph. we use names of data types and classes to label the nodes and names of attributes and an annotation of inheritance to label the edges. for this, we assume an infinite set cn of class names, an infinite set t of names of primitive data types, an infinite set a of attribute names, and a single name q to annotate the inheritance relation. let n be union of types in cn and t.



we have proposed a graph theoretical approach to studying the relation between changes in class declarations and changes in method definitions. the main purpose is to make the semantics and refinement of object oriented programs easier to understand and more operational. we believe this is important for development of tool support to object system development by transformations.



another contribution of this paper is the proposal of an operational semantics for object oriented programs in the graph theoretical notation. this allows us to understand the execution of an object program in the same as an imperative program by taking graphs as the states. in our future work, we will study this operational semantics together with the study of operations and properties of graphs. this will lead to the development of a hoare-logic for object-oriented programs with predicates of graphs.



