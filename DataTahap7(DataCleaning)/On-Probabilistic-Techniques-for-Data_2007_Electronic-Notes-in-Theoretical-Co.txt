as shown in any classical abstract interpretation can be seen as a probabilistic abstract interpretation by lifting the classical domains into probabilistic domains(hilbert spaces). another approach to the analysis of probabilistic programs applies classical abstract interpretation techniques to probabilistic semantics. this approach corresponds to a special case of classical abstract interpretation and it therefore results in safe, i.e. worst case analyses. as shown in, the more general pai approach allows us to construct additionally statistical information which is more in the spirit of an average case analysis.



the first example of an analysis based on the los of pwhile concerns the parity of variables. although, it is arguable whether this analysis by itself is of any practical use it is certainly a quite useful example in order to illustrate the basic methodology. the purpose of the parity analysis is to determine at every program point whether a variable is even or odd. it is a simple forward analysis where the concrete i.e. exactly in the same way as the concrete one. the difference is exhibited by only few of the operators(and the fact that the identities have a much reduced dimension). the control-flow steps are not changed at all as we are interested here only in a data-flow analysis. each of the operators is constructed using the parity



it is rather straightforward to implement the finite approximations of the concrete as well as the abstract semantics using a numerical program like octave. as to be expected the size, even using sparse matrix representations, is prohibitively large; while for n= 5 things still work out it is effectively impossible to deal with case that n= 10. the abstract semantics creates no such problem.



a more interesting static program analysis is the classical live variable(lv) analysis, see e.g.. it is an example of a backward analysis, i.e. the control flow has to be reversed. in order to do this we use the transposes of the original control-transfer matrices.



the information we record about every variable is just if it is alive or not, i.e. we need to consider for every variable an abstract state in v({live, dead}). the update can be specified in a very similar way as in the case of the classical analysis(following e.g.), where the local transfer function is usually defined by means i.e. when several(backward) control-flows come together as at a test in an ifor while-statement. to do this we need additional information about the branching probabilities. this could be obtained(i) experimentally from profiling or(ii) from the concrete semantics, by not abstracting at least those variables which determine



as with all probabilistic versions of classical analyses we could(re)construct the classical result from the probabilistic version by just recording the possibilities instead of probabilities. for this we only have to define a forgetful map from v(x) to p(x) which just considers the support of a probability distribution, i.e. those elements in x which are associated with a non-zero probability.



a formal estimation of the branching probabilities for if-statements(and similarly for while-loops) follows the following scheme: perform a first phase analysis(e.g. a parity analysis) to determine the branching probabilities, then use these estimates to perform the actual analysis. this means in effect that we replace tests b with ways to construct abstractions of in particular control variables in order to obtain optimal estimates for these branching probabilities. alternatively, for sub-optimal abstractions, we are also interested in determining the error margins of these estimates. finally, we plan to extend this approach also to higher order, e.g. functional, languages and to implement a prototype of an automatic analyser.



