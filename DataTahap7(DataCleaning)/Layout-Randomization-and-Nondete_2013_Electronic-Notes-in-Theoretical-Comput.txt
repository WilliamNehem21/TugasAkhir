in security, layout randomization is a popular, effective attack mitigation technique. recent work has aimed to explain it rigorously, focusing on deterministic systems. in this paper, we study layout randomization in the presence of nondeterministic choice. we develop a semantic approach based on denotational models and simulation relations. this approach abstracts from language details, and helps manage the delicate interaction between probabilities and nondeterminism.



randomization has important applications in security, ranging from probabilistic cryptographic schemes to the introduction of artificial diversity in low-level software protection. developing rigorous models and analyses of the systems that employ randomization can be challenging, not only because of the intrinsic difficulty of reasoning about probabilities but also because these systems typically exhibit many other interesting features. some of these features, such as assumed bounds on the capabilities and the computational complexity of attackers, stem directly from security considerations. others, such as nondeterminism, need not be specifically related to security, but arise because of the generality of the ambient computational models, which may for example include nondeterministic scheduling for concurrent programs and for network protocols.



we phrase our study in terms of a high-level language in which variables are abstract(symbolic) locations, and a low-level language in which they are mapped to random natural-number addresses in memory. both languages include a standard construct for nondeterministic choice. we give models for the languages. for each language, we also define a contextual implementation relation. intuitively, a context may represent an attacker, so contextual implementation relations may serve, in particular, for expressing standard security properties. we characterize contextual implementation relations in terms of semantic simulation relations(so-called logical relations). throughout, the low-level relations are probabilistic. via the simulation relations, we obtain a semantic correspondence between the high-level and low-level worlds. basically, simulation relations in one world induce simulation relations in the other, and therefore contextual implementation in one world implies contextual implementation in the other.



thus, our approach emphasizes semantic constructions. in comparison with prior syntactic work, arguments via models arguably lead to more satisfying security arguments, independent of superficial details of particular languages(as layout randomization is largely language-agnostic in practice). they also help reconcile probabilities and nondeterminism, which have a rich but thorny interaction.



thus, they adopted a form of probabilistic scheduling, and excluded nondeterminism. in further work, mitchell et al. refined the framework, in particular defining protocol executions by reference to any polynomial-time probabilistic scheduler that operates uniformly over certain kinds of choices. the uniformity prevents collusion between the scheduler and an attacker. similarly, canetti et al. resolved



however, in our work, it does not suffice to resolve nondeterministic choice before probabilistic choice, as we explain in detail below, fundamentally because the probabilistic choices that we treat need not be independent. instead, we construct a more sophisticated model that employs random variables, here maps from memory layouts to outcomes. the memory layouts form the sample space of the random variables, and, as usual, one works relative to a given distribution over the sample space.



beyond the study of layout randomization, it seems plausible that an approach analogous to ours could be helpful elsewhere in security analysis. our models may also be of interest on general grounds, as a contribution to a long line of research on programming-language semantics for languages with nondeterministic and probabilistic choice. specifically, the models support a treatment of dependent probabilistic choice combined with nondeterminism, which as far as we know has not been addressed in the literature. finally, the treatment of contextual implementation relations and simulation relations belongs in a long line of research on refinement.



in section 4, we similarly develop a lower-level language in which programs may use natural-number memory addresses(rather than abstract locations). again, we define a denotational semantics, an operational semantics, a contextual implementation relation, and a simulation relation. these definitions are considerably more delicate than those of the high-level language, in particular because they refer to layouts, which map abstract locations to concrete natural-number addresses, and which may be chosen randomly(so we often make probabilistic statements).



although this idea could lead to a sound proof technique for the contextual pre-order, it does not suffice for completeness. indeed, forward simulations, of the kind just described, are typically incomplete on their own for nondeterministic systems. they can be complemented with techniques such as backward simulation, or generalized(e.g.,[1,14,5]).



in this section, we define our low-level language. in this language, we use concrete natural-number addresses for memory. we still use abstract location names, but those are interpreted as natural numbers(according to a memory layout), and can appear in arithmetic expressions.



where k ranges over numerals, and l over the finite set of store locations. boolean expressions are as in the high-level language. natural-number expressions and commands are also as in the high-level language, except for the inclusion of memory locations among the natural-number expressions, and for the dereferencing construct!e and assignment construct e:= ej where e is an arbitrary natural-number expression(not necessarily a location).



mapping memories to probability distributions on memories, where hv is a powerdomain for mixed nondeterministic and probabilistic choice as discussed above. however, such an approach would imply(incorrectly) that a new layout is chosen independently for each memory operation, rather than once and for all. in our small example with the single private location l and four addresses, it would not capture that(1:= 1);(2:= 1) will always fail. it would treat the two assignments in(1:= 1);(2:= 1) as two separate guesses that may both succeed. similarly, it would treat the two assignments in(1:= 1);(1:= 2) as two separate guesses where the second guess may fail to overwrite l even if the first one succeeds. with a layout chosen once and for all, on the other hand, the behavior of the second assignment is completely determined after the first assignment.



our main theorem, theorem 5.3, follows from theorem 5.2, the two previous theorems, and the lemma. theorem 5.3 is analogous to theorem 5.2, but refers to the contextual pre-orders: a high-level command c implements another high-level command cj, with respect to all public contexts of the high-level language, if and only if the compilation of c implements the compilation of cj, with respect to all public contexts of the low-level language.



has proved valuable in reconciling probabilistic choice with nondeterministic choice. however, the approach is potentially more general. in particular, the study of concurrency with nondeterministic scheduling would be an attractive next step. also, extending our work to higher-order computation presents an interesting challenge.



