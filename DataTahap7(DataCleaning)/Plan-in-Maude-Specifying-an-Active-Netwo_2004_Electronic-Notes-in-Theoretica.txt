plan is a language designed for programming active networks, and can more generally be regarded as a model of mobile computation. plan generalizes the paradigm of imperative functional programming in an elegant way that allows for recursive, remote function calls, and it provides a clear mechanism for the interaction between host and mobile code. techniques for specifying and reasoning about such languages are of growing importance. in this paper we describe our specification of plan in the rewriting logic language maude. we show how techniques for specifying the operational semantics of imperative functional programs(syntax-based semantics) and for formalizing variable binding constructs and mobile environments(cinni calculus) are used in combination with the natural representation of concurrency and distribution provided by rewriting logic to develop a faithful description of the informal plan semantics. we also illustrate the wide-spectrum approach to formal modeling supported by maude: executing plan programs; analyzing plan programs using search and model-checking; proving properties of particular plan programs; and proving general properties of the plan language.



programming language. in this paper we present the second application in greater depth and with a particular emphasis on the following two aspects:(1) the use of operational semantics techniques from programming language theory augmented with the cinni explicit substitution calculus; and(2) the wide-spectrum approach to formal modeling supported by maude. we begin with a brief introduction to active networks and plan.



active networks are networks with nodes that do not operate according to a fixed scheme(e.g. as conventional routers) but are instead fully programmable and provide execution environments for programs that can be received from other nodes via the network. active networks can be wired, wireless or hybrid networks. one may think of active networks as a generalization of conventional networks and as a step toward greater flexibility: packets, which are interpreted by routers in conventional networks following rigid schemes, become programs, which are executed in active networks in a universal fashion. see for a survey of active network research and the recent darpa conferences on this subject[3,4].



plan[13,12,25,14,19], is an imperative functional language similar to ml, but has a number of additional features, such as remote function execution and resource awareness. remote function execution, means that functions can be invoked in such a way that the execution does not take place locally but in the execution environment of a different network node. to this end, the function call is treated as a so-called chunk, i.e. as a piece of data, which is transmitted to the destination node by means of a packet. resource awareness refers to a mechanism which keeps track of computational resources and ensures that all plan programs are terminating. in addition, plan programs interact with their host nodes through service package interfaces. basic services include provision of information about local network



our specification is organized in three main parts: syntax; network; and semantics. the syntax part is a fairly direct formalization in maude of the syntax of xplan as an algebraic data type. the network part models basic network concepts such as locations, addresses, connections, and routing, with the minimal detail needed for the plan specification. the semantic part is the heart of the matter. the multilevel concurrency of active networks is very directly reflected in the computation state which is structured to provide clear boundaries for the scope of effects and information access.



the abstract syntax of xplan uses cinni notation for bound variables. defining(binding) occurrences of variables are represented as identifiers. a referencing occurrence of a variable is written x{n} and refers to the n-th defining occurrence of x(counting from the inside and starting with 0). presupposing a sort nat of natural numbers, and a sort of identifiers id, this is formalized by the declarations:



foldr and foldl provide the ability to iterate over a list. in contrast to general recursion using letrec(see below), these two functions provide a form of bounded recursion that is always terminating and hence not charged against the computational resources available to the program. the basic data types of plan are modeled by injecting the corresponding maude sort into the const sort. thus they are isomorphic to, but not confused with, the maude sorts. apart from the standard maude sorts we presuppose a sort addr of host addresses. the host address is not necessarily unique for a given host, because each host can have several network devices and each of these has an associated host addresss.



its resource units for sending the packet containing the chunk and for its execution on the remote node. onremote is similar but allows execution on arbitrary nodes and hence may involve packet routing by means of a routing function that has to be passed as an additional argument. finally, exists(str, i), get(str, i), and put(str, i, val, exp) provide access to a resident data dictionary local to the current node,(str, i) being a composite access key, val the value to be stored, and exp the time till expiration.



for sake of brevity we have omitted the declarations of the sort plantype of type annotations and the obvious declarations of the sorts idlist, exlist, vallist, and plantypelist. they denote lists over id, ex, val, and plan type, respectively, with inclusions id< idlist, ex< exlist, val< vallist, plantype< plantypelist. we always use a constructor _,_ for list concatenation. furthermore, we use a constant empty-exl for the empty list over ex, and we extend the inclusion val< ex to vallist< exlist.



to specify the semantics of xplan we first explain how the global active network state is represented. we then discuss the reduction machine which is the basis for the operational semantics for the functional programming primitives. finally, we discuss the transition rules and give representative examples for the main types of transitions.



a process has the form process(l, orign, ardev, ssn, rb, rs). the process was created when a packet with node l as its final destination arrived. the address ardev refers to the device at which the packet entered the node, orign, ssn, are the same as in the packet, rb is the remaining amount of computational resources, and rs is the reduction machine state(see below).



for the resident data services each node node(l,...) has an associated data object data(l, dil) where dil is a list of data items. data items have the form dataitem(id, k, val, ttl), where(id, k) constitutes a composite key under which the value val is stored. the last argument ttl determines the time until expiration of the data item(present for future compatibility, since time advance is currently not modeled).



when a packet arrives at its destination node a process is created to execute the invocation encapsulated by the chunk. the local execution of a process is specified by an abstract reduction machine. a simple and concise formalization of the reduction machine is crucial for the semantics to be useful for mathematical reasoning. we have used an approach called syntax-based semantics[8,20,30] to simplify the reduction machine and to obtain a very direct connection between the(partially ings are value expressions. mathematical descriptions of deterministic evaluation using reduction contexts are based on a key lemma that says that an expression ex is either a value or it decomposes uniquely into a reduction context r and a redex r such that ex is the result of filling the hole in r with r(written r[r]). the inductive definition of the set of reduction contexts corresponds to peeling off basic reduction contexts one layer at a time until a redex is reached: ex= r0[ rn[r]].



these basic reduction contexts correspond to a control stack with rn at the top. for example, the first layer of a plan application ex= val(vall, nval, exl), where vall is a value list and nval is a non-value expression, is the reduction context r= val(vall,?, exl) expressing the left to right evaluation order semantics. most of the action occurs at the inner basic reduction context(top of the stack). for example, suppose the above application fills the hole of an outer reduction context r' so that ex'= r'[ex]= r'[r[nval]]. when the evaluation of nval leads to a value val' the hole is filled with that value, and the resulting expression is redecomposed if it still contains a redex. the new decomposition is parametric in the outer reduction context, that is, it has the form r'[r''[r']] where r''[r'] is the unique decomposition of r[val'].



in the following we use variables ex, ex', etc. to range over expressions(sort ex) and variables cx, cx', etc. to range over contexts(sort cx). the operation of hole filling is a special case of metavariable substitution(the hole being the only metavariable) and is generalized to allow filling of holes with contexts(context composition) and to apply to context lists(sort cxlist), contexts being a special case. the process of hole filling is formalized by the following operation.



apart from the metavariable substitution used for hole filling, a second notion of substitution is needed in the rules of our specification for object variables. this substitution cannot be reduced to a simple textual substitution, because it must respect the binding structure of the object language. therefore, we use the cinni family of explicit substitution calculi instantiated to the syntax of xplan. we have slightly generalized the original cinni substitutions to simultaneous substitutions by simply lifting all operators from id to idlist(which represents a simultaneous binding). there is a basic explicit substitution constructor[_:=_], two auxiliary constructors shift and lift, for relocation(by changing the variable indices), and an operation for application of a substitution to an expression list(expressions being a special case).



packet rules include rules for emitting, delivering, and routing packets in transit. the plan construct onneighbor is one of the two possibilities to initiate a remote function call which is given by a chunk chunk(val, vall). as we can see below, the execution of onneighbor leads to the emission of a packet which encapsulates this chunk.



creased by the amount given to the emitted packet, and that amount is then decreased by one corresponding to the use of one unit for the first hop. the routing function component of the packet is set to an irrelevant constant noroute above, because onneighbor can only send packets to immediate neigbors. the more general onremote service allows remote invocation on arbitrary locations and allows the user to specify a routing function which is passed along in the packet.



service), by generating a fresh key for labeling data(using the generatekey service), and by an initial call of the find function with this information. the network is then flooded with packets which propagate themselves from nodes that have not been previously visited. to this end, the find function first uses the resident data service exists to check if an entry associated with the current key exists in the local dictionary of the current node. if this is not the case, the node has not been previously visited. hence a new entry in the local dictionary under the same key is created using put to store the backpointer. next it is checked using



i222e4 is a constant defined to be the above initial state. the infix=>+ says to search for states reachable after one or more rewrites, and the term on the righthand side is a pattern to be matched. a solution is found with two processes executing on node l3, one coming from address c1 and the other coming from address d2.



we emphasize that testing a specification as we did is an extremely important part of the process of developing a formal model. in fact, the specification presented here is the second major version. the first version we developed served to clarify many issues and to fill in many gaps. however, it was too low-level, making mathematical analysis overly complex. for example, the reduction machine was based on a state representation similar to the secd machine used in the paper specification. this involved defining a number of new state constructors and special purpose transition rules just to manipulate these. also the network model is slightly more abstract compared with the previous version, where network devices were clearly distinguished from their addresses.



