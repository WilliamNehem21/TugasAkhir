this paper presents the design and implementation of a system for extracting jit trace information from the pycket jit compiler. we define three increasingly parametric cost models for pycket traces. we determine the best weights for the cost model parameters using linear regression. we evaluate the effectiveness of the cost models for predicting the relative costs of transformed programs.



the main contributions in this paper are as follows. we have designed and implemented a system for extracting jit trace information from the pycket jit compiler(section 3). we have defined 3 cost models for jit traces, ranging from very simple to parametric, and we have used an regression analysis over the pycket benchmark suite to automatically tune the architecture-specific cost model parameters(section 4). we have shown that the tuned cost model can be used to accurately predict the relative execution times of transformed programs(section 5).



jit compilation is a technology that allows interpreted languages to significantly increase their performance, by dynamically compiling well-used parts of the program to machine code. this enables interpreters or virtual machine languages to approach performance levels reached by statically compiled programs without sacrificing portability. dynamic compilation also allows optimisations to be performed which might not be available statically.



a range of analysis techniques are used to estimate the resources used by programs. high level cost analysis can be performed on the syntactic structure of the source code of a program, e.g. using a mathematical function of c syntactic constructs to estimate execution time. low-level representations of code and bytecode can be used as source for static resource analysis[3,4,26,7,6]. for example the costa tool for java which allows the analysis of various resources using parameterized cost models, and the chameleon tool which builds on this approach and uses it to adapt programs.



there are many other approaches in cost analysis including amortized resource analysis[23,6], incremental resource analysis, and attempting to enforce resource guarantees using proof-carrying code[6,9](the mobius project is a prime example). control flow is a key element of many resource analyses[41,20]. however, as jit traces do not contain any control flow, these types of analysis are redundant and a far simpler approach will suffice. this is fortunate as the static analysis must run



other important concepts in pycket traces include guards: assertions which cause execution to leave the trace when they fail; bridges: that are traces starting at a guard that fails often enough; and trace graphs: representing sets of traces. the nodes of a trace graph are entry points(of loops or bridges), labels, guards, and jump instructions. the edges of a trace graph are directed and indicate control flow. note that control flow can diverge only at guards and merge only at labels or entry points. a trace fragment is a part of a trace starting at a label and ending at a jump, at a guard with a bridge attached, or at another label, with no label in between.



the trace graph is a convenient representation to read off the trace fragments. in this example, there are the following four fragments: l1 to l2, l2 to g2, l2 to j1, and l3 to j2. trace fragments can overlap: for instance, l2 to j1 overlaps l2 to g2.



the rpython tool chain provides language developers with a rich set of apis to interact with their generic jit engine. among these apis are a number of callbacks that can intercept intermediate representations of a trace, either straight after recording, or after optimisation. we use the latter callback to obtain the optimised trace for cost analysis.



for the purpose of calibrating weights we use 41 programs from the standard pycket benchmark suite pycket-bench and the racket programming languages benchmark game suite. the programs used are a subset of the full suite, as programs that result in failing benchmark runs or which contain calls to foreign functions are omitted. foreign function calls are removed as it is unlikely that any two foreign function calls are doing the same thing or take the same time.



the pycket version used for these experiments is revision e56ba66d71 of the trace-analysis branch of our custom fork, built with racket version 6.1 and revision 79009 of the rpython toolchain. the experiments are run on a 16 core 2.0 ghz xeon server with 64 gb of ram running ubuntu 14.04.



a number of different skeleton types are used in ajitpar. the basic types of skeletons are parallel map, parallel reduce and divide and conquer. the actual versions of the skeletons in ajitpar are tuneable, in that they are parameterised with a number that specifies the granularity of the parallelism in some way. the definitions of some of these tuneable skeletons, parmapchunk, parmapstride and



we have designed and implemented a system for extracting jit trace information from the pycket jit compiler(section 3). we have defined three lightweight cost models for jit traces, ranging from the extremely simple loop counting model cm0 to the relatively simple instruction counting model cmc to the architecture-specific weighted model cmw. to automatically determine appropriate weights for cmw we have run a linear regression over the pycket benchmark suite(section 4). we have used all three cost models to compare the relative cost of tasks generated by six skeleton-based benchmarks preand post-transformation, where the skeleton transformations are induced by changing a skeleton-specific tuning parameter. we have found that the effect of these transformations on task runtime can be predicted accurately using our cost models, once the task granularity rises above a threshold(section 5).



we have demonstrated that even the simplest, architecture-independent cost model described in this paper allows us to accurately predict the effect of simple transformations on task runtime. we expect that the architecture-specific model cmw will be more accurate when predicting the task runtime of more complex transformations, e.g. chains of transformations(as arise naturally when transforming complex skeleton expressions by rewriting). we further speculate that similar techniques can be used to identify lightweight cost models based on the traces produced by the jit compilers for other languages, e.g. python, javascript, etc.



