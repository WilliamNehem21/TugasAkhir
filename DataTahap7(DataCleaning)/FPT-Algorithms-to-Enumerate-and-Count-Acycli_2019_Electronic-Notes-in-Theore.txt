a graph orientation of an undirected graph g=(v, e) is a directed graph obtained by orienting all edges of g. in this paper, we design enumerating and counting algorithms parameterized by path-width and branch-width for acyclic and totally cyclic orientations. an orientation is said to be acyclic if it is a directed acyclic graph, and totally cyclic if each of its connected components is strongly connected. it is well-know that, for planar graphs, these two orientations are dual in the sense that there is a bijection between acyclic orientations of a planar graph and totally cyclic orientation of its dual graph.



the canonical way of explicitly enumerating objects in graph theory and geometry is performing reverse search. in, reverse search techniques were developed for a wide variety of objects, including cells of hyperplane arrangements, and they can thus be extended for enumerating acyclic and totally cyclic orientations of graphs. there are also enumeration algorithms specialized in acyclic orientations[25,3,9].



boolean functions. they allow one to perform boolean operations on the compressed data without decompressing it. this outstanding virtue of bdds has yielded a stream of bdd-based approaches to combinatorial optimization and enumeration problems. for example, an algorithm for computing the tutte polynomial was developed by constructing the bdd associated with spanning forests in a top-down manner. bdd-based algorithms were also developed to solve graph optimization and enumeration problems such as max clique, graph coloring, graph covering and path enumeration.



the number of nodes in the bdd constructed by the algorithm above depends on the ordering of edges, and finding the optimum ordering is a co-np-complete problem in general. in particular, it is important to consider the width of the bdd, defined as the maximum number of nodes in a level over all levels. we describe an ordering of the edges, denoted path-width ordering, based on path decompositions of a graph which allows us to bound the width of the bdd, originally introduced in.



in the case of totally cyclic orientations, there may exist subsets of vertices in the elimination front whose elements are mutually reachable. if we perform vertex identification on those subsets, we can use the result in by considering the reachability relations on sets of cardinality 1, 2,..., pw, respectively. the total number of possible reachability relations becomes bounded by is defined to be|mid(e)|, i.e. the number of vertices common between g[e1] and g[e2]. the value w(d) is the maximum value we among all links e of d. the branch-width bw(g)(or abbr. bw) of g is the minimum value w(d) among all possible branch decompositions d of g. for any fixed k, there exists a linear time algorithm which checks whether a graph has branch-width bounded by k and, in case it does, outputs a branch decomposition of minimum branch-width.



the correctness of these algorithms on branch decomposition can be proved in the same way as propositions 2.3 and 2.4. for each node u, an array dpu is constructed by taking each index of dpui(i= 1, 2). while the number of indices



as future work, we list the three following problems. firstly, one can consider further improving the running time of the algorithms parameterized by path-width and branch-width presented in this paper. secondly, one may consider investigating the(parameterized) computational complexity of manipulating bdds associated with acyclic and totally cyclic orientations. finally, we suggest developing algorithms parameterized by other structural graph invariants. path-width and branch-width tend to be close to the input size n when the input graph is dense. it is thus an important task to design efficient parameterized algorithms with respect to other parameters robust against dense graphs.



