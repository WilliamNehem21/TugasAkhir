design patterns are not only beneficial to the forward engineering process but also help in design recovery and program understanding, typical reverse engineering activities. in this paper, we introduce dpvk, a reverse engineering tool to detect pattern instances in eiffel systems. in order to get better detection results, we analyze many different patterns and examine eiffel software in terms of both static structure and dynamic behaviour. dpvk is implemented as an eclipse plug-in to ensure better compatibility and extensibility.



a typical system structure for pattern detection tools includes three parts: a parser, a detector, and a database. the parser extracts facts from the implementation. then, the detector retrieves pattern definitions from the database, compares these definitions with the facts, and outputs the detection result. the database can also be used to store detected pattern instances for further analysis.



eliminate most false positives of pattern instances. many recently developed tools use multiple passes, or recursive filtering, to improve the detection output. meanwhile, both static structure and dynamic interaction have been taken into account in order to increase the hit rate and reduce the missing rate of true pattern instances.



kt: kt is a tool that can reverse-engineer design diagrams from smalltalk code and use this information to detect patterns. the author of kt advocates that any tool designed to detect the artifact of design patterns must support both static and dynamic modelling constructs. in terms of diagram, static information includes is-kind-of and has-a relationship and dynamic information includes object interaction or message flow. three gof design patterns are analyzed: composite, decorator and chain of responsibility. the methods used for the detection of these patterns are coded directly into the kt source code.



environment has a three tier architecture. from bottom to top, they are object-oriented database, repository schema and end-user tools. the lowest tier provides physical storage of the reverse engineering model and design information. the middle tier contains the object-oriented schema of the reverse engineering model, comprising static structure and dynamic behaviour. the upper-tier consists of end-user tools implementing domain specific functions, such as source code capturing and visualization analysis.



heuzeroth-holl-hogstrom-lowe: the authors present a way to automatically detect patterns by combining both static and dynamic analysis. the former restricts the code construction and the latter the runtime behaviour. this analysis does not depend on coding or naming convention. a pattern instance is defined by a tuple of program elements such as classes, methods or attributes. these elements must conform to the rules of a certain design pattern.



first, source code is processed by static analysis which transforms the implementation into tuples of ast(abstract syntax tree) nodes. then, static analysis computes predefined pattern relationships on the ast nodes and generates the candidate set of pattern instances. the dynamic analysis takes this set as its input. it monitors the execution of the nodes of every tuple. it also tracks the output of the executed nodes to check whether the candidate complies with dynamic pattern rules. the candidate is eliminated if the rule is violated. finally, the remaining candidate set contains the detected pattern instances.



protocol conformance of patterns. so far the tool can detect observer, composite, mediator, chain of responsibility and visitor patterns. according to, when the tool is applied on java swingset example and the tool itself, the number of false positives is small, in most experiments even zero.



classes in each design pattern interact in a precise manner and each class is expected to show proper behaviour. eiffel provides a mechanism, namely, design by contract, to define such mutual obligations and benefits among classes. design by contract has a sound theoretical basis, and it provides a guideline for constructing robust designs. it lets developers precisely specify the obligations and explicitly assign the responsibilities of clients and suppliers. in the language level, assertions, precondition and postcondition clauses, are used to define contracts between clients and suppliers. moreover, class invariants enable the definition of general consistency properties within each class. a failure to comply with the contract indicates a bug. this can help developers discover and deal with such design bugs.



is a notation for analysis and design of object-oriented systems, which emphasizes seamlessness, reversibility and software contracting. there are two major reasons we chose bon for our work. first, bon is integrated with eiffelstudio. eiffelcase, an integrated tool of eiffelstudio directly interfaces with the other tools of the ise environment and supports generation of new system architectures as well as reverse engineering of existing ones. second, bon has similar function with uml while the former is easier to learn and use. bon is based on concepts similar to those of eiffel but can be used independently of eiffel.



in order to get a better understanding of gof patterns and to detect them in eiffel source code, we analyzed both their static structure and dynamic behaviour. as a by-product, a diagram catalogue of gof patterns is compiled. in this catalogue, each design pattern is analyzed and presented from both static and dynamic perspective. the static diagram illustrates the pattern structure, especially the inheritance and invocation relationships between com-



reverse engineering tasks are commonly done by means of text-based search tools such as grep, sed, or awk, or by querying graph representations of source code, such as an asg(abstract syntax graph). our implementation, dpvk, is an integrated text-search tool that detects design patterns in eiffel programs. dpvk is written in java to gain better compatibility and portability for multiple operating systems and development environments, such as eclipse.



grok is a relational calculator that supports a scripting language. it was initially created by ric holt in 1995 in order to manipulate binary relations with the purpose of understanding large-scale software systems. it includes an interpreter that can be treated as a relational processor.



a key aspect of detecting a design pattern is how to model and define a design pattern precisely and how to express that definition. in dpvk, each design pattern has two definitions: one definition is based on the static structure of the pattern and the other is based on its dynamic behaviour. dpvk uses the special structure and behaviour to identify and pinpoint design patterns and differentiate a design pattern from another.



more specifically, dpvk compares these two definitions with the static and dynamic fact files of the target software system respectively. this approach is similar to the one used in. theoretically, if both static and dynamic definitions are complete and precise, all design patterns will be found and no false positives will be output. if we treat each definition as a set of conditions, then complete and precise definition means no redundant conditions are included and no necessary conditions are missing.



in the real world, a particular design pattern may be implemented as a number of different variants in a given system. although each variant can still be illustrated and analyzed statically and dynamically in a similar way, to collect all possible variants of each design pattern would be an endless work as software systems evolve. our solution is to create a design pattern definition repository which stores as many variant definitions as possible. it is clear that, the more complete the factbase, the better the chances we will find design patterns and their variants in software systems.



the static fact extraction navigates around the source file directory, scans and parses all.e files(eiffel source code files). the output of this stage is static relationships between all classes. all relationships are expressed as a triple of the form(relationship, entity1, entity2). the relationships we include are inheritance(inherit class1 class2) and client-supplier(use clientclass supplierclass).



static relationships are retrieved by using ec(eiffel compiler). ec is a command-line eiffel compiler developed by ise(it is the same compiler eiffelstudio uses). the extraction module manages ec to traverse all.e files to collect static information, and consolidates the static information into static facts. finally, it renders the collected static facts into rsf format to interface with grok in stage two.



in this stage, we compose the definition of the static structure of each design pattern we would like to detect. this definition is rendered as rsf and it defines the inheritance and invocation relationship among classes participating in the design pattern. using grok, we compare the definition with the facts about static relationships derived in stage one.



once a set of classes that fits the static definition is found, we record it as a candidate instance. eventually, the output lists all combinations of classes that fits the design pattern static structure. the output may contain false positives, since the static structure of many design patterns contains a small number of nodes and edges in a combination that is likely to be found in software systems that do not contain the particular design pattern.



we also propose a reverse engineering tool called dpvk, which is used to detect/verify patterns in eiffel systems. dpvk operates in four stages. the first three stages are static fact extraction, candidate instance discovery and false positive elimination. finally, the fourth stage lets developers manually evaluate and justify the output of previous stages.



as stated earlier, an eiffel development tool for eclipse is under development in york university. once it is ready, dpvk can use it to replace eiffelstudio and ec which are currently used to extract static and dynamic facts about the software system under examination. in the long run, dpvk will be extended to detect design patterns in other popular object-oriented language such as java, c++ etc.



