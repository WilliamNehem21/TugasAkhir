to bridge the gap between domain experts and formal methods experts, visualisations of the behaviour of formal models are used to let the domain expert understand and experiment with the formal model. in this paper we provide a definition of visualisations, founded in game-theory, which regards visualisations as transition systems synchronised with formal models. we show example visualisations, use them to show winning strategies of games, and demonstrate how an industrial application of formal models benefited from this approach.



mimic/cpn is a library which facilitates visualisation of coloured petri net models. mimic/cpn provides an api which can be used to define and update visualisations. by annotating a model, these functions are called during execution of the model. the disadvantage of this approach is that it is very inconvenient to have to change the model in order to add a visualisation and the changes unnecessarily clutter the model. furthermore, this library mainly focus on the state changes of the system, and everything shown to the user must be formulated as explicit updates, so it is not possible to easily monitor the value of, e.g., a counter like in exspect. finally, mimic/cpn is unable to handle asynchronous input, which must be simulated by polling.



the play-engine allows a prototype of a program to be implemented by inputting scenarios(play-in) via an application-specific gui. the resulting program can then be executed(play-out). compared to the approach of the other described tools, this makes the model implicit as it is created indirectly via the input scenarios. furthermore, the play-engine relies on heavy-weight techniques to perform visualisation as the model is given implicitly. in order to decide how to execute the model, a complete model-checking step is performed in each step, which is computationally expensive.



synchronising visualisations with formal models using this technique is very useful and allows us to observe what happens in the model, but it does not allow us to interact with the model, e.g., to drive the model into interesting states. the



if the purpose of a visualisation is to get acquainted with the model or the modelled system, it is often reasonable to assume that a computer tool chooses controllable transitions at random. this can often be done very quickly, however, and this can make it difficult for the user to interact with the model. to overcome this, we may need to impose fairness during execution of the model.



hitherto, we have used visualisations primarily for validation that the formal model reflects the intended behaviour by letting a domain expert stimulate and observe the model using visualisations. now, we will turn to using visualisation for communicating the result of formal verification, i.e., convincing users that no winning strategy exists, which is decided using an algorithm from as outlined in sect. 3. the purpose of a counter example is to convince users that it is impossible to have a winning strategy, so we let the domain expert assume the role of the modelled system and let him try out ideas for winning strategies. at the same time we let a computer tool take charge of the uncontrollable actions according to the counter example that has been calculated. the user is urged to reach a winning state while the tool executes uncontrollable transitions to prevent that(by ensuring that the user is not allowed the ability to execute a transition leading to a good state). we can do this using the formal model, but often the formal methods expert does not have enough domain knowledge to have understand why the system should have winning strategy, so the domain expert, who has little knowledge of the modelling language, has to find out whether the error is in the model or in the specification. instead we let the domain expert control the controllable transitions of the model using a visualisation(the computer tool is able to let the visualisation assume control of either the controllable or uncontrollable transitions, as described in sect. 4.1). we let the user stimulate the model in any way seen fit(according to the supposed winning strategy), and eventually the model will perform an unforeseen move(error in the specification) or the model will perform a disallowed move(error in the model).



in this paper we have given a theoretical foundation for viewing visualisations as game transition systems synchronised with formal models, providing a uniform and general framework for coupling formal models and behavioural visualisation. we have used game-theory to separate output from and input to the model and given two concrete examples of visualisations. we have demonstrated how an industrial case can benefit from using the method described in this paper. furthermore, we have sketched how this can be used to create counter-examples to the existence of a winning strategy in games, so domain experts with no knowledge of the formalism used can understand them.



