we also present a more e ective methodology which is based on abstract interpretation. by approximating the intended speci cation of the success set we derive a nitely terminating debugging method, which can be used statically. our framework is parametric w.r.t. to the chosen approximation of the success set. we present one speci c example of approximation. we provide an implementation of our debugging system which shows experimentally on a wide set of benchmarks that we are able to nd some common errors in the user programs.



semantics of r. in section 6, we present our method of abstract diagnosis and illustrate its use through examples. in section 7, we present an experimental evaluation of the method on a set of benchmarks. section 8 concludes and discusses some related work.



no confusion can arise, we omit the subscript r. a term s is a normal form, if there is no term t with s!r t. the program r is said to be canonical if the binary one-step rewriting relation!r de ned by r is noetherian and con uent.



since unrestricted narrowing has quite a large search space, several strategies to control the selection of redexes have been developed. a narrowing strategy(or position constraint) is any well-de ned criterion which obtains a smaller search space by permitting narrowing to reduce only some chosen positions. a narrowing strategy' can be formalized as a mapping that assigns a subset'(g) of o(g) to every goal g(di erent from>) such that, for all u 2'(g), the goal g is narrowable at position u. an important property of a narrowing strategy' is completeness, meaning that the narrowing constrained by' is still complete. there is an inherited tradeo coming from functional programming, between the bene ts of outside-in evaluation of orthogonal, nonterminating rules and those of inner or eager evaluation with terminating, non orthogonal rules. a survey of results about the completeness of narrowing strategies can be found in[4,21,22,29]. to simplify our notation, we let ir' denote the class of ctrs's which satisfy the conditions for the completeness of the narrowing strategy'.



we let inn(g)(resp. out(g)) denote the narrowing strategy which assigns the position p of the leftmost-innermost(resp. leftmost-outermost) narrowing redex of g to the goal g. 6 we formulate a conditional narrower with strategy',' 2 finn; outg, as the smallest relation;' satisfying 6 an innermost term is an operation applied to constructor terms, i.e., a term of the form f(d1;:::; dk), where f 2 f and for all i= 1;:::; k, di 2(c[ v). the leftmost-innermost position of g is the leftmost position of g which points to an innermost subterm. a position p is leftmost-outermost in a set of positions o if there is no p0 2 o with p0 pre x of p, or p0= q:i:q0 and p= q:j:q00 and i< j.



! f(x)g. according to de nition 3.4, fca(r)= f0= 0; s(x)= s(x); g(x)= 0; f(0)= 0; f(s(0))= 0;:::; f(sn(0))= 0;:::g. given the goal g(y= f(z)), innermost narrowing computes the answers ffy=0; z=0g; fy=0; z=s(0)g;



example 3.8 now consider the program r= ffrom(x)![xjfrom(s(x))]; first([xjy])! xg. according to de nition 3.4, fca(r)= fs(x) s(x); from(x)=?; from(x)=[xj?];:::; from(x)=[xj[s(x)j:::[sn(x)j?]]];:::; first(x)=?; first([xjy])= xg, with n 2!. given the goal g(first(from(s(x))) z), outermost narrowing only computes the answer fz=s(x)g in r, which is also the only substitution which can be computed by unifying the at goal(first(y)= w; from(s(x))= y; w z) in fca(r).



the theory of abstract interpretation provides a formal framework for developing advanced dataow analysis tools. abstract interpretation formalizes the idea of`approximate computation' in which computation is performed with descriptions of data rather than with the data itself. the semantics operators are then replaced by abstract operators which are shown to`safely' approximate the standard ones. in this section, starting from the xpoint semantics



roughly speaking, the special symbol] introduced in the abstract domains represents any concrete term. the behaviour of the symbol] from a programming viewpoint resembles that of an\anonymous" variable in prolog. from the viewpoint of logic,] stands for an existentially quanti ed variable[2,37,38]. de ne[[s]]= s0, where the n-tuple of occurrences of] in s is replaced by an n-tuple of existentially quanti ed fresh variables in s0.



de nition 5.2 an abstract substitution is a set of the form fx1=t1;:::; xn=tng where, for each i= 1;:::; n, xi is a distinct variable in v not occurring in any of the terms t1;:::; tn and ti 2([ v[ f]g). the ordering on abstract substitutions is given by logical implication: let; 2 sub], i[[]])[[]].



from a semantics viewpoint, given a program r, the xpoint semantics f(r)(resp. fca(r)) is approximated by the corresponding abstract xpoint semantics f](r)(resp. fca](r)). that is, we can compute an abstract approximation of the concrete semantics in a nite number of steps. the correctness of the abstract xpoint semantics with respect to the concrete semantics is proved by the following:



theorem 5.13(strong completeness) let r be a program in ir' and( g be a non{trivial goal. if is a computed answer substitution for( g in r, then there exists g0 e1;:::; em<< fca](r) such that 0= mgu](f lat(g); g0) and 0.



in the following, by abuse we let i denote the program that speci es the intended semantics. in the following, we consider i+= lf p(t]), i.e. we consider the abstract success set that we have de ned in previous section as overapproximation of the success set of a program. we can consider any of the sets de ned in the works of[11,16] as underapproximation of i. alternatively, we can simply take the set which results from a nite number of iterations of the ti function(the concrete operator). let us illustrate this method.



then the errors are automatically found by the debugger and the user has to indicate the corrections to be made on the wrong rules. the buggy system is written in sicstus prolog v3.8.1 and the complete implementation consists of about 300 clauses(1260 lines of code). the debugger is expressed by 147 r. caballero-rold an, f.j. lopez-fraguas, and m. rodr quez artalejo. theoretical foundations for the declarative debugging of lazy functional logic programs. in fifth international symposium on functional and logic programming, lecture notes in computer science. springer-verlag, berlin, 2001. to appear.



