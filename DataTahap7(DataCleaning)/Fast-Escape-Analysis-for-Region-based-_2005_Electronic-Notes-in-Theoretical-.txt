we present an algorithm for escape analysis inspired by, but more precise than, the one proposed by gay and steensgaard. the primary purpose of our algorithm is to produce useful information to allocate memory using a region-based memory manager. the algorithm combines intraprocedural variable-based and interprocedural points-to analyses. this is a work in progress towards achieving an application-oriented trade-off between precision and scalability. we illustrate the algorithm on several typical programming patterns, and show experimental results of a first prototype on a few benchmarks.



several approaches to escape analysis for java have been proposed, most of which aim at allocating objects on the stack, and removing unnecessary synchronizations. works on the bytecode, which brings in an additionnal complexity due to the stack-based model.[5,19] use points-to analysis to determine if an object escapes a method through a path in the points-to graph. proposes a fast but very conservative escape analysis, based on solving a simple system of linear constraints obtained from a static single assignment(ssa) form of the program.



for region-based allocation in java, we are aware of two works. exploits method-call chains and escape analysis to dynamically map allocation sites to regions associated with methods. defines a points-to analysis to determine regions of objects with similar lifetimes(with instruction-level resolution, as opposed to method-level).



rithm is to produce useful information to allocate memory using a region-based memory manager. the algorithm combines intraprocedural variable-based and interprocedural points-to analyses. this is a work in progress towards achieving an application-oriented trade-off between precision and scalability. we illustrate the algorithm on several typical programming patterns, and show experimental results of a first prototype on a few benchmarks.



in this section we describe our escape analysis algorithm in detail. we assume the program is in static single assignment form(ssa), that is, every variable is assigned only once in the program. the transformation of the program into ssa comes at a cost, but gives to a flow-insensitive analysis the power of a flow-sensitive one. our algorithm is mainly based on local variables, instead of on a complex points-to graph, which would be much more expensive to build and to work with. the analysis is based on abstract interpretation and computes several properties for local variables and methods.



fielduse shows reference relations between local variables. for each v in m, fielduse(v) is the set of variables u in m such that v may be an alias of u.f(for some field f). fielduse is mainly useful when a variable v escapes by a field: for example, if escape(v)=field, but all variables of fielduse(v) are captured by m, then so is v.



our analysis is designed to process arbitrary portions of an application. that is why we have an istobeprocessed predicate, that tells if a method must be analyzed or not. if not, for example because the method is native, or unavailable, we must be conservative about it.



to process the parameters of m, we match the formal parameters(pi) with the concrete ones(vi): if pi escapes from m, vi is considered as escaping from the current method, and we put an edge from unknown to all sites pointed to by vi. if pi does not escape but isdereferenced in m, then we cannot be precise about those references without performing a points-to analysis. in this case, we conservatively consider that all children of vi escape.



instrument the benchmarks as described in. we count on doing this soon. anyway, a preliminary implementation on another test program revealed a gain of 20% of total utilized memory, when using gc together with regionbased manager, w.r.t. gc only, even if the actual region-allocated memory is about 5%.



besides, only a subgraph of the whole call graph has been analyzed for each test case. the subgraph contains all application methods and a subset of library methods transitively invoked by the program. this explains why there are only a few allocation sites. nevertheless, these results are interesting, because an important fraction of analyzed allocation sites are indeed computed to be captured. our algorithm is parameterized by the set of classes to be analyzed. this allows the user to fine-tune the analysis trading precision against performance according to specific application behaviors.



