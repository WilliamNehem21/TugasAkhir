describing and reasoning about asynchronous distributed systems is often a difficult and error prone task. in this paper we experiment the input/output automata framework as a tool to describe and reason about cryptographic protocols running in an asynchronous distributed system. we examine a simple certified email protocol, give its formalization using the ioa model, and prove that some security properties are satisfied during the execution of the protocol.



in order to provide some form of protection, cryptographic techniques have been employed to obtain additional guarantees on the email service. a number of certified email protocols has been presented in literature, ensuring that the message exchange procedure provides the participants with different security properties. usually such protocols involve a trusted third party(ttp for brief) which controls the behavior of the participants, helping them in the message exchange, and resolving any dispute if necessary. according to the role played by the ttp, protocols have been classified as inline or optimistic. in inline protocols[3,5,14,15], the ttp is actively involved in each message exchange. in optimistic protocols[1,2,9], the sender and the receiver perform the message exchange without the intervention of the ttp but they can invoke the ttp to resolve any dispute, caused for example by a cheating attempt from one of the party.



p kb(m): denotes the encryption of message m using the public key of user b in some public-key encryption algorithm. the algorithm should provide non-malleability, i.e., given a ciphertext it is impossible to generate another ciphertext such that the respective plaintexts are related.



for communication from node i to node j. the state is a list of all the variables that describe the state of the automaton. for this channel the state is completely described by a variable that contains the messages still in transit on the channel.



the channel has an input action send(m)i,j which is controlled by another(unspecified in the example) automaton a, modeling node i, which has the same action send(m)i,j as an output action. whenever automaton a executes this action also the channel executes the action(at the same time), we will say that the action send of a controls the action send of channeli,j. in this case the effect of the action, in the channel automaton, is to add a message in the set of in transit messages.



the channel has an output action receive(m)i,j which has a precondition(a boolean condition) specifying when the action is enabled, that is when the action can be executed. an output action can be executed whenever it is enabled. moreover, all other automata that have such an action as input will execute it. there will be an automaton b, modeling node j, that has receive(m)i,j as an input action.



there are also internal actions that are similar to output actions(i.e., have a precondition and an effect) with the difference that they do not interact with other automata(i.e., several automaton may have internal actions with the same name and they are all independent). we use the notation name.var to indicate variable var of automaton name, for example channel.msgs refers to variable msgs of automaton channeli,j.



non-repudiation of delivery. the protocol provides the mail originator with an irrevocable proof that the mail content received by the recipient was the same as the one sent by the originator. this proof-of-delivery can protect against any attempt by the recipient to falsely deny receiving the message.



fairness. proper execution of the protocol ensures that the proof-of-delivery from the mail recipient and the proof-of-origin from the mail originator are available to the mail originator and recipient, respectively. moreover, the protocol must be fail-safe. that is, incomplete execution of the protocol will not result in a situation where the proof-of-delivery is available to the originator but the proof-of-origin is not available to the recipient, or vice versa.



we can now start with the description of the automaton actions, and will proceed by looking at each of them in the order they appear in the code from top to bottom, left column first. this order corresponds to the logical order in which the actions are executed. notice the use of the unique identifier id: it is attached to all the messages concerning a particular email: this is just to avoid interference with possible delayed messages from other sessions.



constr m1. variable statussnd is set to send so that the only(non-input) action that is enabled is the send action. this action interacts with the channel to the recipient j and sends the message stored in m1. the program counter goes into a wait state wait. all the non input actions are not enabled now. the execution proceeds when a message is received from the ttp. when this message is received, it is stored into variable m4. the program counter is updated to done. at this point the protocol has terminated successfully and nothing else has to be done. the output action send is in a task, so in a fair execution it has infinitely many opportunities to be performed.



we next describe the actions, top to bottom, left to right. the lose action models the delivery of a corrupt message. the program counter statusrcv is set to discarded and the protocol is aborted. the first receive action takes a message from the channel and starts processing the incoming message.



