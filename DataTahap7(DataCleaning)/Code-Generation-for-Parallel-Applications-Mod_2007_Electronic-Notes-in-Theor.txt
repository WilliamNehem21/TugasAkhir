during the development of a parallel application, besides being able to analyze performance aspects, it is highly desirable to be able to assure functional properties as early as possible. assuring functional properties about a model of the parallel applicationcan lead to important savings since it reduces the time spent in application development and debugging. in this direction, model-checking and automatic code generation can be used as complementary tools during the development, making possible to analyze the system behavior and allowing the fast generation of corresponding code. in this paper we propose the use of object-based graph grammars(obgg) for the specification of parallel applications. obgg is a formal, visual language suited for the description of concurrent systems based on asynchronous message passing. models described using obgg can be verified through model checking. following this approach, a translation from obgg models to c code using mpi(message passing interface), which is suited for clusters, is presented. to illustrate the contribution, a sample parallel application is modelled in obgg; functional properties of the model are proven by model-checking; the c/mpi corresponding model is presented and performance results



object-based graph grammars(obgg) is a formal visual language suited to the specification of asynchronous distributed systems based on message passing. parallelism is implicit, through the declaration of rules that define possible state changes, and non-determinism is supported. the few abstractions provided and the object-based style makes it relatively easy to learn. due to the few constructions and its formal semantics, obgg models can be model-checked via a translation to promela, the input language of the spin model-checker.



in this paper we propose the use of obgg for the construction of parallel applications models and a translation step to generate c/mpi implementations from obgg models. one of the arguments is to allow the specification of parallel applications using a language with implicit parallelism, increasing the level of abstraction offered to the designer. another argument is to bring the possibility of modelchecking the parallel applications under development as an obgg model, which can then be directly translated to a c/mpi implementation. these ideas are illustrated with a simple parallel application which is defined in obgg, model-checked for some properties, has its c/mpi code generated through the proposed translation, and is executed on a cluster, generating performance graphics which are discussed.



standards for parallel programming exist about two decades in many forms such as design patterns, skeletons and templates, for example. skeletons and templates provide a structure with parallel code, where the user introduces the application dependent code. design patterns are basically descriptive structures for code fragment of common use.



design patterns as an extensible library for parallel programming. an application is built using one or more design patterns, and they can be combined with other code fragments using also low level communication primitives. new design patterns can be incrementally added in the system, making it extensible.



attributes could be primitive data types(such as integer, byte, float) or abstract data types(adt). user defined adt can be used in obgg models under some restrictions:(i) the correctness of the user defined data types must be assured by the user;(ii) the operations on user defined data types must be atomic, i.e, they finish during the rule application. for instance, they can not leave any thread created or pending processing such as receiving a response 5.



in obgg, rules of a class present in the left-hand side one message being received. each rule specifies the reaction of any object from that class to the reception of such message. in the right-hand side of the rule, this message will be consumed, attributes of the object can change values and new messages can be generated. all actions described in one same rule occur in an atomic step. the identification of a possible rule application is called match. each rule describes the treatment of only one message. an object can send a message to another object only if exist at least one reference to the destination in the right-hand side of the rule. this reference can be an attribute of the object or a parameter of the incoming message.



verifier. more details about the obgg-promela translation can be found in, including a formal proof of the semantics compatibility between original obgg model and translated model. the spin model-checker supports the verification of properties described in linear temporal logic(ltl). in it is proposed how to specify properties over obgg models using ltl, taking into consideration



allows one to edit obgg models and translate the models into promela in an automatic way. moreover, the counter-examples generated by spin(when the model violates an ltl specification) can be translated to obgg abstractions such that the counter-example can be interpreted using the obgg model instead of the promela generated one. this feature keeps the same level of abstraction for the developer.



and results in true. again, it is important to remember that this step assumes as correct the functions ins() and rand(). these functions where manually translated. in the promela model, rand() always returns the same 0 value and ins() may return 1 or 0 non-deterministically. this abstraction was used to diminish the state space, and does not modify the meaning of the given system,



an obgg model is comprised by various concurrent objects interacting by message passing. it is therefore natural to map obgg objects to processes and the message passing communication among obgg objects to message passing among processes. the non-determinism offered by obgg can be embedded in the way that incoming messages are treated by the process. dynamic object creation can be



another aspect to be considered is related to the number of messages supported by the model. an obgg state graph holds(in thesis) an unbounded amount of messages. this characteristic is represented using a linked list(lin) to store the messages already received and still not processed for each obgg process. therefore, the limit of the real implementation is the available memory.



complementarily, the attributes of obgg objects are mapped to local variables of the corresponding obgg process. basic data types available in the destination language(c) can be used in obgg specifications. user defined data types that follow the restrictions already discussed can be used as well.



obgg messages are translated to mpi messages using c data structures. these structures are composed by primitive data types such as char, int and float. mpi messages are constructed field-by-field, using packing primitives offered by the library. such messages must be unpacked in the same order by the generated receiver code.



inside of the data structure of generated by the translation, the first field contains identification of the type of the corresponding message. the other fields(when existing) are related to each present parameter in the message. in this presented translation schema, the generated system uses only one type of data structure for all messages, which is a superset of all the allowed parameters of messages in the system.



in obgg the termination of objects is not represented explicitly. a system stops processing when there are no more matches possible. however, explicit process termination is necessary in real systems to, for example, deallocate the resources of a cluster. therefore, in order to consider the system terminated and thus be able to deallocate the resources, we have to somehow detect that there are no more matches possible in the distributed processes representing the obgg objects. when such a situation is detected, then the various processes are signalized and terminate. the identification of the distributed termination(no more matches) is coordinated by the init process, after having performed the initialization procedures.



in a totally asynchronous setting, this problem is analogous to a voting protocol. however, in our translated model we can assume certain communication characteristics and avoid a high amount of messages. the distributed protocol for detecting the termination is described bellow. it uses three control messages: r, b and c. the behavior of each participant process and the behavior of the init(coordinator) is as follows.



thread evaluate is responsible for searching the input buffer for messages and identifying matches for them. if this thread does not identify any match for all the messages in the buffer or the buffer is empty, then it blocks until a new message is received. once evaluate is blocked for a certain amount of time, a control message(b), signaling the blocked state, with destination init, is appended to lout and will be eventually sent by sender.



non-determinism: as stated in the algorithm describing the steps performed by an object, the calculation of matches consider all messages in the input buffer, and, for every message, all possible rules(a message may be handled by more than one rule). from all the enabled rule applications a random choice is taken. this random choice among all enabled rules represents the non-deterministic behavior of obgg models.



in this section we present performance measurements for the parallel application generated from the model presented in section 3. the parallel application was executed in the cpad 8 cluster, which is comprised by 16 dual pentiumiii stations(550mhz, 256 mb-ram) interconnected via a fast-ethernet network. for the model execution was used one cluster node per process.



there are various reasons for the performance difference. while on the base program only one mpi call is needed to transmit a message(that consists only of an integer value), in the generated application there are many mpi calls involved: one for packing every parameter, one for sending, and finally one unpacking calls for every parameter. also, due to the obgg behavior, a(linked) list of messages has to be manipulated, and the matching is calculated over all messages in this input list each time a rule has to be chosen for application. moreover, it has to be considered that this performance penalty is due to the more abstract modeling formalism which offers non-determinism and implicit parallelism.



the performance of the translated model in section 4.7 show the impact of offering the abstraction provided by obgg. some aspects of the translation are under investigation in order to allow a better performance. for instance, in the current translation only one mpi message type is defined for a whole model. in terms of message parameters, this mpi message is the superset of all obgg messages, leading to extra processing and communication overhead. a next optimization is the generation of various mpi message types, one for each message type of the obgg model.



