given a mathematical model for the mwnpp, a branching technique by insertion of local branching constraints is proposed in. these constraints are defined from an initial solution xs, and determine how close or far a feasible solution can be of xs. this technique allowed the proposition of many exact and approximate methods for the solution of combinatorial optimization problems. one of these methods is the variable neighborhood descent branching(vndb), described in, which defines its neighborhoods using local branching constraints.



the analysis of the computational time spent and the upper bound for each instance shows that vndb, with a reasonable number of neighborhoods, finds results as good as the standard cplex solver and, in addition, in a shorter run time. the article is organized as follows. section 2 presents the problem addressed and states a mathematical model for mwnpp. section 3 introduces an analysis of local branching constraints. section 4 addresses the proposed vndb method and evaluates the particularity of its neighborhood in rings. following, section 5 presents the computational tests performed for the comparison between the algorithms. finally, section 6 concludes the paper, including a critique about the found results and the proposed scope.



algorithm 1 summarizes the above explanations. the stopping criterion is the exhaustion of the n neighborhoods in a given solution or by the maximum number of iterations itermax(or maximum time). in practice, the function solve() also has a time limit to resolve the vndb subproblem. then there must be conditional deviations for all possible solution status:{feasible, optimal, infeasible}.



computational experiment results show that vndb never reaches the maximum time available for execution due to neighborhood exhaustion and a large number of solved subproblems with non-optimal status. despite this, vndb has statistically as good results as the same mip running for a shorter time interval. the only exception is its performance in instances where k= 3. a drawback found in the computational experiments is that the cplex solver does not seem to set time in a deterministic way on a multi-core processor. this causes some problems to take up to 4500 seconds more in mip execution.



