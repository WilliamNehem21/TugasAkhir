as modeling formalisms today are usually based on diagrams or graphs(e.g. uml diagram types for software engineering or function block diagrams for designing programmable controllers), our approach uses graph transformation for both the transformation of different formalisms to the semantic formalism and the simulation of the transformed model. the different formalisms are defined as visual languages by means of meta-modeling.



there are some related tool-based approaches supporting the meta-model based definition of visual languages and the graph-grammar based simulation of visual models, e.g. diagen or genged, but none of them realizes parallel graph transformation. another related approach is metaenv, an environment to define the semantics for visual models. a model is translated from an external case tool to the semantic domain of high-level timed petri nets using graph grammars. the semantic model can be simulated and translated into c code. compared to the atom3 approach, the semantic model is fixed in metaenv, whereas it is variable in atom3.



section 2 reviews the concepts of parallel graph transformation. in section 3, a simulator for timed transition petri nets is presented as a parallel graph transformation system. section 4 sketches the extensions of atom3 in order to provide tool support for the definition and application of amalgamated rules.



parallel graph transformation models parallel state transition where a state is described by a graph which can be changed by several actions executed in parallel. since the graph transformation is rule-based without restrictive execution prescription, it offers the possibility for massively parallel execution. the synchronization of parallel rule applications is described by common subrules. in this section, we review the main concepts of parallel graph transformation and show how the firing of transitions in arbitrary placetransition nets(p/t nets from now on) can be modelled in a concise way using parallel graph grammars. this provides the basis for the simulation of timed-transition petri nets, an extension of p/t nets, discussed in section 3. using graph grammars as modeling technique, objects are represented by nodes and their interrelations by edges. actions are usually described by graph rules and simulated by graph transformation(which is the application of rules to a given graph, resulting in a new graph modeling the changed system state).



subrules with nacs can be embedded only into elementary rules containing at least the same nacs as the subrule. in addition, each elementary rule may have other nacs than the subrule. an interaction scheme can also be seen as a bipartite graph(is-graph) whose nodes are labelled by elementary rules and subrules. edges are labelled by subrule embeddings.



in addition to the specification how elementary rules should be synchronized, we have to decide where and how often a set of elementary rules should be applied. the basic way to synchronize complex parallel operations is to allow that a rule should be applied at all different matches in a given graph. this expresses massively parallel execution of actions. for the purpose in this paper we restrict the covering of g(the image of all different matches from instances of elementary rules in g) to all different elementary matches that overlap in the match of their common subrule. for other, more complex covering constructions see. for our restricted covering of g, the is-graph is always connected.



rule amalgamation can also be seen as a bipartite graph gr whose nodes are subrules and instances of elementary rules, and whose edges are subrule embeddings. each gr representing a valid rule amalgamation is typed over the is-graph, e.g. there is a homomorphic mapping from gr into the is-graph.



placed. the enable post rule is instantiated once for each output place of the transition being checked. the sync enable subrule gives the common context for the instantiation of enable pre and enable post: the transition and the events. if some predomain place of the transition does not have enough tokens, enable pre cannot be instantiated in that place. analogously to def. 2.3, the transition is deleted and reconstructed by the subrule, such that in the case of not enough tokens on a predomain place the scheme cannot be applied due to the dangling condition.



in a conflict situation(a place in the predomain of two transitions), it is possible for a transition firing to disable other transitions. in this case, the scheduled possible events of the disabled transitions should be erased. this is modelled by rule conflict shown on the right.



this paper has presented parallel graph grammars as a valuable means for modeling and simulation. they extend the capabilities of regular graph grammars by allowing parallel execution of synchronized elementary rules. this is useful for specifying simulators for formalisms in which parallel actions happen, such as petri nets and others discrete event simulation formalisms. parallel graph transformation is also useful for formalism transformation where models are translated between different formalisms. in this context, parallel graph transformation simplifies the models transformation as they allow embedding newly created elements in variable contexts. otherwise, one would have to replicate the transformation rules for each different context. parallel graph transformation has been implemented in the atom3 tool.



in the group at madrid, parallel and distributed graph grammars are currently applied for modeling simulation protocols in parallel discrete event systems. in the future, we will apply the approach to other ttpn semantics, petri net variants and discrete event formalisms. the implementation of other covering constructions is also under consideration.



