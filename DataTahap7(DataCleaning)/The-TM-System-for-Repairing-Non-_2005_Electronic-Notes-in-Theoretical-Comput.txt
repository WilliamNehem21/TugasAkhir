mathematics has developed in a much more organic way than its rigid textbook presentation of definition-theorem-proof would suggest. automated theorem proving systems more closely reflect the textbook notion of mathematics than a developmental approach. in particular, most deduction systems are designed either to prove results if they are true, or find counterexamples if they are false, but not both. system designers also assume that the concepts mentioned in the conjecture are correctly defined and actually relate to the mathematical notions the user is interested in. clearly, the adoption of these assumptions is not conducive to the kind of exploration more common in research mathematics, in which concept definitions change and become more sophisticated, and flawed conjectures and proofs are gradually refined. hence, it is time to increase the flexibility of reasoning systems to better handle illspecified problems.



the development of the tm system forms part of two larger projects. firstly, we are working towards a full implementation both of the reasoning and the social interaction notions described by lakatos in. secondly, we are aiming to show that the combination of reasoning systems such as those used in tm will lead to a new generation of ai systems which are able to solve problems which individual techniques cannot.



hr is named after the mathematicians hardy and ramanujan, and the core functionality of this system is described in. hr performs descriptive induction to form a theory about a set of objects of interest which are described by a set of background concepts, as detailed further in. this is in contrast to predictive learning systems which are used to solve the particular problem of finding a definition for a target concept. the theories hr produces contain concepts which relate the objects of interest; conjectures which relate the concepts; and proofs which explain the conjectures. theories are constructed via theory formation steps which attempt to construct a new concept. hr builds new concepts from old ones using a set of 15 generic production rules



hr has been used for a variety of discovery projects in mathematics. it has been particularly successful in number theory and algebraic domains. moreover, we have used hr to improve the abilities of artificial intelligence systems, most notably constraint solvers, and we are currently extending hr to perform discovery tasks in other scientific domains, in particular bioinformatics. while we have used hr to generate first order conjectures, the application described in this paper is the first one in which we have applied hr to the problem of proving, rather than generating, theorems.



statement of the conjecture they wish to prove/modify/disprove. the theorem is supplied in otter first-order syntax, which means that c must be negated, as otter will derive a contradiction using resolution. tm assumes that c is placed in the last line of input, preceded by a line per axiom. we hope to relax such restrictions in future versions of the program. for the purposes of this paper, we also assume that we are working in an algebraic domain, where algebraic objects comprise a set of elements and a set of operators relating those elements which are constrained as prescribed by the axioms. an example algebra is group theory, where there is a single operator which satisfies the associativity, identity and inverse axioms.



to summarise, in our running example that all groups are abelian, tm undertakes the following process. firstly, it tries and fails to prove that the conjecture is true already, and similarly fails to prove that the negation of the conjecture follows from the axioms(i.e., it fails to prove that all groups are non-abelian). if the latter were true, then no amount of specialisation would improve matters. tm also fails to prove that a group is abelian if and only if it is trivial, and that a group is abelian if and only if it is non-trivial. it then employs mace to generate some abelian groups which support the conjecture and some non-abelian groups which falsify the conjecture. both sets of examples are given, along with the conjecture statement as input to hr, which forms a theory of groups containing many specialisations of the notion of group. from this theory, tm extracts all those specialisations which describe only groups which support the conjecture. when using one of these, namely self-inverse groups, in a modified conjecture, otter proves the theorem and tm reports that it can prove that self-inverse groups are abelian, even though the original conjecture is false. in contrast to the usual proof-or-fail output from a theorem prover, tm outputs 5 different types of result:(iii) altering variables and constants and(iv) altering bracketing. in this fashion, we produced 158 altered theorems, which we used alongside the 9 proper non-theorems. we found that 30 of our altered tptp theorems were still theorems(tm told us this). mace produced the same examples to both support and falsify the conjecture, for 39 of the remaining 137 non-theorems. this was due to constants such as an identity element being used in the conjecture statement without reference in the axioms, or to variables being instantiated differently. we removed these non-theorems from the test set, leaving us with a core of 98 non-theorems.



we would like to thank alan smaill and john lee for their continued input to this project. special thanks to bill mccune and geoff sutcliffe for supplying data and for their input to this work, and to roy mccasland for providing the proof found in the appendix. we are grateful to the anonymous referees for their useful comments on an earlier draft of this document, and to the organisers of the ijcar workshop on disproving. this work has been supported by epsrc platform grant gr/s01771/01.



