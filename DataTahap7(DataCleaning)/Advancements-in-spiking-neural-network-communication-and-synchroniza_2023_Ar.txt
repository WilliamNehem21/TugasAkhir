platforms using asics have high-performance and high-speed computing capabilities in addition to offering low power consumption. however, their architecture is fixed, which limits their use when adopting different designs. this is particularly important in neural network implementations, which rely on various network and communication parameters.



fpu: each tile shares a 32-bit fpu(floating-point unit) between four cores. latency in ip core is the number of cycles it takes for an accumulation to propagate through the block from input to output. the fpu operates using altera ip blocks that have 14 cycles latencies at 250mhz.



real-world applications such as world wide web, medical informatics, social network, and machine learning libraries make use of graph-based algorithms. poets with the capability of fast and parallel processing at large scale uses graphs to map applications to the hardware. to perform graph processing, our framework provides highlevel programming models for the users to easily create the graphs and edges without dealing with low-level fpga coding. users must think about how to break down their application components into vertices and edges. for instance, in the snn case, the neurons in the spiking neural network are vertices and the edges are synaptic weights between the neurons. currently, there are two different toolchains for mapping the simulations and applications to hardware, namely, graph schema and polite.



polite. another high-level programming environment toolchain is polite, which is similar to the vertex-centric paradigm[29,30] but supports both synchronous and asynchronous messaging. polite is a layer of abstraction that manage mapping arbitrary graphs onto the tinsel overlay. polite is a c++ light software layer on top of the tinsel hardware designed to implement a graph-based event-driven abstraction, while it is able to hide architectural details from the user. similar to graph schema, the vertices receive the events and if the state of the vertex is changed, it will send a message via the edge to the other connected vertices. the event messages are treated by the following event handlers:



machine learning algorithms have been used to solve tasks in automation, recognition, classification, and prediction without being explicitly programmed. in other words, they are capable of learning from data. artificial neural networks are a class of machine learning models that are loosely inspired by their biological counterparts. conventional neural networks continuously transmit real-valued signals between neurons that can be interpreted as firing rates. in contrast, spiking neural networks(snns) operate via the transmission of discrete events, referred to as spikes, mimicking action potential generation in the brain. snns offer huge energy savings due to their sparse eventdriven nature, however, training and simulating such models remains challenging.



in larger networks, the number of messages surpasses that of clocked synchronization(cs). nevertheless, removing global synchronization will accelerate computation, especially in non-fully connected networks running on distributed, federated or heterogeneous systems can facilitate parallelization. running this method on our platform, in addition to reviewed benefits of gals, we predict more capability to speed up the computation and communication due to the lack of global clock connections.



hardware idle detection(hid): in this research, we introduce hid for the neuromorphic event-driven system synchronization based on termination detection. a hardware barrier synchronization will synchronize the event-based neurons in the hid method. it means a neuron does not wait for any other neurons to receive messages. the hid method is designed for globally-asynchronous applications, and it uses a signal to ensure there is no undelivered message in the system. hid identifies an event when there is no thread in the system with



poets is designed to efficiently simulate highly scalable eventbased models. we will focus on simulating spiking neural networks that implement parallel distributed processing at large scale. in the previous section, we presented a generic model that could be used for any neuron model. here, we demonstrate how the izhekevich model can be mapped on hardware. the balance of excitatory to inhibitory neurons ratio in the spiking network is 80% to 20% respectively.



routing algorithms serve the purpose of directing data packets, while each algorithm being a software tasked with determining the most efficient path for transmitting a packet. achieving effectiveness and efficiency in routing stands as a paramount aspect within nocbased(network on chip) neuromorphic systems. message delivery in poets system is guaranteed by the hardware provided that all threads eventually execute the messages available to them. threads communicate with each other via mailboxes. two different methods have been used for message communication between threads, namely unicast and multicast. in the unicast method, there is a point-to-point communication between two threads in which a single packet is sent to a single destination. the aim of multicasting is to send the same message to multiple destinations while minimizing messaging traffic in the system. messages first will be delivered to the programmable routers, which automatically propagate messages to any number of destination threads distributed throughout the cluster. if a router supports multicast routing, then neurons with a high fan-out can be communicate efficiently with minimizing inter-fpga bandwidth while offloading work from the processing cores. tinsel provides both unicast and multicast communication by having a programmable router on each fpga board to support global multicasting.



each box is hosted by an x-86 machine with 28 cores intel(r) i9-7940x cpu@3.10 ghz. although in previous work, we have used mnist data set as an output due to establishing a learning algorithm on the hardware. in this research, the input spiking data is generated randomly using a normal distribution for different networks to verify the network capability running different number of neurons. we implemented a random recurrent neural network with sizes from 100 to 8 million nodes and placed on one to 8 hardware boxes. the testing benchmark is similar to but in more scalable sizes. the critical check points for the number of nodes are 100, 200, 500, 1k, 10k, 50k, 100k, 500k, 1000k, 2000k, 8000k. the number of synapses per neuron has been defined to verify a normal and extreme number of connections, 100 and 1000 synapses per neuron. due to more robustness of results while using the random seeds inputs, we average value from a gaussian(normal) distribution with a mean of zero and a standard deviation that corresponds to the chosen weight range. for connection weight modification, the system supports stdp(spike timing-dependent plasticity) and reward-based stdp which have been presented in our previous works running on the same platform[19,20]. in this work, we focus on neuron activities and message communication while stdp rule is used for weight modification without decoding any input data pattern.



the poets ecosystem mapping strategy works efficiently depends on the number of vertices and edges in the mapped graph. if the vertices could be assigned parallelly into the threads of one physical board, it will not use two boards to address high-speed communication and energy saving challenges. the threads on neighboring mailboxes communicate faster compared to threads on further mailboxes, causing these to spend more time and consume more bandwidth in the system. therefore, it is important how neurons communicate with each other on the same thread, or different threads while still sharing 4.67 s using one box and eight poets boxes respectively. we used the same networks with the same number of connections for brian simulation. results show that the hardware implementation on poets is more than twenty times faster than the brian simulator. additionally, comparing the system with one 48-chip spinnaker node shows that poets is at least 16 times faster. this speed comparison is made using optimal communication parameters such as hid synchronization, multicast routing, and considering homeostasis for poets as discussed previously.



spikes across the network. neurogrid and brainscales similarly use the temporal dynamics of memory elements to store the state of the network, with the capability of local learning. the second version of brainscales is developed as brainscales-2. this version is a multichip system building upon existing brainscales wafer-scale system components. the architecture is implemented in a single-chip asic



synchronization is one of the most important methods in designing neuromorphic event-driven systems in simulating snns. three synchronization methods including clocked sync, gals(globally asynchronous locally synchronous), and hardware idle detection(hid) have been discussed and analyzed in this work that the hid is introduced in this work as a novel synchronization method for neuromorphic system. to implement these algorithms on hardware, we introduced poets as a new large-scale neuromorphic system which is flexible using fpga clusters, easily scalable by adding more fpga boards, reliable with a guaranty of receiving messages, and fast due to the parallel processing of data and high-speed interconnection bandwidth. running the snn on poets hardware, we demonstrated that hid is the best synchronization approach considering speed and spiking accuracy.



