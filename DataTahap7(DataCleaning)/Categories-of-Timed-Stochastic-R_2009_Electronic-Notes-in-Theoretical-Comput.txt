to model and program systems with soft constraints, we need languages to express probability distributions over the delays experienced during the evolution of the system. pepa and the stochastic pi calculus are two examples of languages that express this kind of stochastic temporal behavior. the semantics of these languages is operational, given in terms of a labelled probabilistic transition system. the transition systems themselves denote continuous-time stochastic processes, often continuous-time markov stochastic processes.



loops extended with a deterministic delay operation. we call the resulting semantic models categories of m-timed stochastic relations tsrelm, extending the category srel of stochastic relations commonly used to give semantics to probabilistic languages of while loops. in these categories, we draw a relationship between probabilistic choice and stochastic temporal behavior by showing that both are in fact derivable from a primitive that lets us sample probability distributions.



islwhile is the standard language of while loops, often called imp[24,52]. to model while, we need a monad that imposes enough structure on its kleisli category to support iteration. following manes and arbib, we take this to mean that the kleisli category should be partially additive.



intuitively, a loop is the limit of the finite unrollings of its body. partial additivity models this limiting process through an infinite summation operator on hom-sets. partial additivity is the combination of a few simple structures(see) but we present it as one large, aggregate definition that suffices for our purposes. the subtleties of this definition are less relevant to our goals than how it enables us to interpret loops, which we give below.



two familiar examples of partially additive categories are the category par of sets with partial functions and the category cpo of complete partial orders and continuous functions. in par, a family of partial functions is summable if and only if the functions are defined on mutually disjoint subsets of the domain, and the sum is the union of their graphs. partial additivity in cpo is even more familiar: a family is summable if and only if it is a directed subset of the function space, and the sum is the least upper bound.



deterministic delays are too simple to model systems with complex time behavior. a more expressive language would be able to represent the duration of complex computations stochastically by sampling delays from probability distributions. here we consider a language with probabilistic delays and deterministic state behavior before moving to a fully probabilistic language in the next section.



and values in the monoid m, which we interpret as time delay. we can then read composition as: f; g relates x to c if f relates x to y with delay a, g relates y to z with delay b, and z paired with the aggregate delay m(b, a) is in c. the probability that f; g relates x to c is then the sum of the probabilities of each of these sufficient cases.



several frameworks exist to describe and model stochastic temporal behavior, including queueing systems, stochastic automata[15,16], generalised stochastic petri-nets, and generalised semi-markov processes. our approach shares much in common with stochastic automata. roughly speaking, stochastic automata extend standard deterministic automata with clock variables, just like timed automata. upon entering a state, some of those clocks are set by sampling a probability distribution, and then all clocks decrement at the same rate. transitions are labeled with an input symbol and a set of clocks, and a transition is enabled once its labeling clocks reach 0. stochastic automata are usually interpreted using a probabilistic transition system with two classes of states, states from which nondeterministic choices are made, and states from which probabilistic choices are made, the latter essentially corresponding to probabilistic delays. it is possible to view our work as a partial reframing of stochastic automata in a categorical setting, providing them with a direct transition semantics.



as far as languages for stochastic temporal behavior are concerned, much of the original impetus came from finding reasonable languages in which to compositionally and finitely represent models for the study of stochastic temporal behavior in systems with soft constraints. stochastic process calculi, with their support for concurrency and their ready compositionality, have proved popular[23,43,26,8,27]. stochastic process calculi, especially derived from the stochastic pi calculus, are especially popular for biological modeling[46,45,14,10,17]. in the tradition of process calculi, the semantics of those languages is operational, using an annotated reduction semantics that records the rate of reaction(which correspond, roughly, to the time delays introduced in the reduction). stochastic process calculi generally use exponential distributions to model delays, and the reduction semantics can be shown to yield continuous-time markov processes. restricting to markov processes implies that we can reason more efficiently about the resulting processes expressed in the stochastic pi calculus, or stochastic automata, for that matter; see, for instance, bryans et al.. priami shows how to extend the stochastic pi calculus to general distributions. recently, klin and sassone developed a general operational reduction semantics for stochastic process calculi that unifies much of the ad hoc presentation in earlier papers. our work is essentially denotational and can



finally, we need to examine the relationship between our models and the more operational models used in the stochastic process calculus literature. a starting point is to use our categories or variants thereof to give a semantics to stochastic process calculi. we hope to report on this research in the near future.



