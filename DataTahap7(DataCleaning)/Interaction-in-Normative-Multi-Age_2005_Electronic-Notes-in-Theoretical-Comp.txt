technically, a normative code is seen as a set g of conditional norms, i.e. a set of such ordered pairs(a, x). for each such pair, the body a is thought of as an input, representing some condition or situation, and the head x is thought of as an output, representing what the norm tells us to be desirable, obligatory or whatever in that situation. the task of logic is seen as a modest one. it is not to create or determine a distinguished set of norms, but rather to prepare information before it goes in as input to such a set g, to unpack



positive permission is more elusive. as a first approximation, one may say that something is positively permitted by a code if and only if the code explicitly presents it as such. makinson and van der torre distinguish what they call forward and backward permission as two distinct kinds of positive permission. forward permission answers to the needs of the citizen, who needs to know whether an action that he is entertaining is permitted in the current situation. it also corresponds to the needs of authorities assessing the action once it is performed. if there is some explicit permission that covers the action in question, then it is itself implicitly permitted. on the other hand, backward permission fits the needs of the legislator, who needs to anticipate the effect of adding a prohibition to an existing corpus of norms. if prohibiting x in condition a would commit us to forbid something that is implicit in what has been expressly permitted, then adding the prohibition is inadmissible under pain of incoherence, and the pair(a, x) is to that extent protected from prohibition.



the proof theory of the various kinds of permissions contains various unexpected properties and proof-theoretic novelties. for example, whenever out satisfies a horn rule, then the corresponding negperm operation satisfies an inverse one. forperm and backperm are very different operations. whereas forperm satisfies si, backperm satisfies weakening of the input wi. like negative permission, backperm satisfies the inverse rule of any horn rule satisfied by out; but forperm satisfies instead a subverse rule. see for the details.



in this section we consider the proof rules of input/output logics as properties that can be enforced on the components by exogenous coordination. in particular, it has been suggested by makinson and van der torre that the identity rule corresponds to a forward loop, and that the cumulative transitivity rule corresponds to a feedback loop. we use lions to make this idea more precise. the problem can be phrased as follows. how far can the various ways of strengthening the input/output operation out1 to outn(n= 2,3,4) with out without+, be simulated by integrating other familiar devices into the system as a whole? before we introduce the definitions, we consider two examples.



whereas the identity rule and the cumulative transitivity rule are naturally modeled as feed forward and feedback loops, this is not the case for the disjunction rule. in the semantics of input/output logics, this rule corresponds to reasoning by cases. we can consider reasoning by cases as a kind of exogenous coordination, in the sense that we can ensure that a component behaves like it is reasoning by cases, when it is not really doing so. the idea is that in the wrapper around the component, we need to generate the cases, and then we collect the outputs again.



moreover, the properties of the lion depend on the properties of the components. for example, when both b and d satisfy identity, then the lion satisfies the identity rule. likewise, when both b and d satisfy cumulative transitivity, then the lion satisfies this rule. however, when b satisfies the disjunction rule, then the lion does not have to satisfy the disjunction rule.



thus far, we have assumed integer time, in the sense that the input and output streams may be seen as a function from the natural numbers to propositions. in other words, we have implicitly assumed that there is a clock such that every tick of the clock, a new output is generated from the input. this can be generalized to real time by making time explicit. for example, an abstract behavior type defines an abstract behavior as a relation among a set of timeddata-streams. we do not further consider this extension here.



moreover, once we use streams, we can use more complicated channels. a typical example is a register channel, which delays the throughput of data. for example, a register(1) outputs its input with a delay of one clock tick. such a channel contains a buffer, with an initial value which is outputted as the first element of the output stream.



in this section we discuss the relevance of interactive computing in general, and lions in particular, for research on agent theory and normative multiagent systems. a pioneering approach which has inspired us is the work of jan treur and colleagues, on the design of interacting reasoning components. our discussion in this section is based on some of our own research. in the boid agent architecture, interaction among the various mental attitudes like belief and desire, results in certain types of behavior. in a multi-agent system, a kind of qualitative game theory is used to describe and analyze the interaction among agents. in normative multi-agent systems, norms are used to coordinate the interaction among agents. finally, in agent communication protocols, interaction is coordinated through social commitments.



obligations can be defined in the bdi framework. the desires or goals of the normative system are the obligations of the agent. this contributes to the open problem whether norms and obligations should be represented explicitly, for example in a deontic logic, or they can also be represented implicitly.



the clauses deal with various circumstances. for example, the first clause expresses the objective of the norm. the second clause ensures that normative systems will only detect actual violations. similarly, the third clause prevents arbitrary sanctions. the last clause shows that the sanction is undesirable, and hence will deter agents from violating the norm.



goal, while abstracting from the individuals that will eventually execute them. a role is usually described in terms of normative descriptions, expectations, standardized patterns of behavior, social commitments, goals and planning rules. the normative description specifies the obligations that any agent who plays the role(called the actor) should obey. goals are his intrinsic motivations. roles, thus, seem to be strictly related to the notion of agent: they are described using notions like actions, goals and obligations.



in agent theory there are at least two kinds of semantics. one is based on the paradigm of mental attitudes. it makes specific assumptions about the internal architecture of the agents. the other is based on social commitments, and makes no assumptions about the agents. this approach is more in line with the paradigm of interactive computing. in this section we discuss the two approaches, and also propose a synthesis.



the method we adopt is to model dialogue as a game in which agents play roles. speech acts are moves in the game and their preconditions and effects refer to the mental states attributed to the roles, not to the mental states of the agents themselves. this approach presupposes that mental attitudes can be attributed to roles as well as to agents. following[10,12], we describe roles as agents with mental attitudes, albeit of a different kind, since they are not autonomous.



since such dialogue games consist of both constitutive and regulative rules, they can be considered as a normative multi-agent system. just as for roles, our view of normative systems is based on the agent metaphor: a normative system can technically be considered as an agent to which mental attitudes are attributed. moreover, normative systems, like organizations, can be articulated in roles.



in this paper we consider logical input/output nets, or lions for short, as models of interactive computing. lions are based on input/output logic, a deontic logic not used as a non-classical inference engine deriving output from input, but as a secretarial assistant for transformations from input to output. we present a few definitions, but no formal results.



input. yet another alternative applies an input/output operation at every propositional input, but assumes that the set of norms can change over time. secondly, we consider lions with and and register gates, formalizing the behavior of channels and connectors. the extension illustrates how gates from boolean circuits can be used to extend lions, and how operators for streams can be introduced to model behavior over time. we also observe that more



our discussion has highlighted a number of future research directions for lions. a proof theory for lions can be developed, constraints can be added to lions, and permissions can be introduced to distinguish two kinds of outputs. the introduction of time in streams introduces new possibility of studying new proof rules of input/output logics, and the introduction of new kinds of channels and gates introduces a variety of new conceptual and formal issues. given the huge number of possible extensions, we feel that we need guidance to develops lions, just like the development of input/output logic has been guided by issues in deontic logic. we are motivated to build normative multi-agent systems on top of lions, based on the idea that interaction plays a crucial role in normative multi-agent systems. in the agent architecture the behavior of an agent is determined by the interaction among the mental attitudes, in a multi-agent system game theory is used to describe and analyze the interaction among agents, in normative multi-agent systems norms are used to coordinate interactions among agents, and in communication interaction is



one particular extension we believe can be guiding the further development of lions for normative multi-agent systems is the development of value webs, which are networks that describe the exchange of value. for example, a value web may model the exchange of goods for money, possibly including third parties such as shippers and banks. we suspect that when not only information but also values are transported over channels, new issues arise.



