action systems were first defined by back and kurkio-suonio as a modelling formalism for distributed systems. we have chosen this formalism as it can effectively be used for modelling reactive systems and because recently, it has also been used for model-based mutation testing. there exist several variations of it like object-oriented action systems and it also served as an inspiration for event-b. however, the action system formalism used here is more restricted than other variations. in some aspects it is similar to the event-b language, but for instance it does not support set-theoretic constructs like event-b.



informally, the execution of an action system starts in an initial state which is manipulated by repeatedly executing actions. during this process one action is chosen at each step in a non-deterministic fashion from the set of enabled actions. an action is enabled iff its guard is satisfiable in the current state. the execution terminates when the set of enabled actions is empty.



. this approach was taken, because action systems can easily be translated to initialised input output symbolic transition systems(iostss). this way it is possible to use the symbolic framework given in with some adaptations. moreover, we will use the same concepts and notation for first-order formulae as follows.



the concept of symbolic execution trees of action systems is inspired by execution trees created for programs. a symbolic execution tree shall, starting from an initial state, encode the effects of symbolically executing arbitrary actions. we chose a tree-based rather than a trace-based description of the symbolic execution of action systems to highlight the effects of actions on symbolic states.



note that the indexes of states directly correspond to the execution depth, at which they have been detected. by convention, we consider states reached by executing internal actions to be at the same depth label as the pre state, so we do not increase the index value for such states. this is allowed by our definition of indexed symbolic states, as internal actions do not have parameters and thereby do not introduce new indexed parameter variables. although this is also true for the quiescence observation, we increase the symbolic state index as it is observable.



since the angelic completion adds self-loops for undefined inputs to states of ltss, execneg must not perform a state update. as implementations in the context of sioco are considered to be weakly input-enabled, execneg should take into account, that it is not necessary to add self-loops for inputs i if a state may be reached by executing internal actions, in which i is enabled. for this reason, the function expects the disjunction over the guards of all internal actions as third parameter.



as noted before, action systems may behave non-deterministically. the sioco conformance relation, takes non-determinism into account as well. therefore, the conformance check is able to handle action systems containing internal actions and does not produce spurious counterexamples, i.e. it does not identify action systems to be non-conforming, which are actually conforming.



furthermore, the product graph allows actions to be executed only if the path condition of the target product state, which contains both implementation and specification states, is satisfiable, while ioco is defined for suspension traces of the specification. this restriction is used, as the non-conformance condition given below would not be satisfiable anyway for product states with unsatisfiable path conditions. the non-conformance condition corresponds to the negation of the condition for sioco-conformance given in.



the implementation of the test case generator performs a depth-first search for unsafe states in the product graph. following the definition given in, unsafe states are states in which non-conforming behaviour may be observed. in our case, these are product states which fulfil the condition given in definition 3.5. if such an unsafe state is found, a symbolic test case is returned, which is a pair formed of:



we developed several optimisations to decrease the run-time of the search in the product graph, which will be discussed in the following. some of them specifically target model-based mutation using first-order mutants. as such, they make use of an efficient syntactical mutation analysis inspired by, which detects the location of mutations. we distinguish mutations of the init block, the state update of an action and the guard of an action. in general, an algorithm applying the given optimisations will not detect fewer conformance violations. one optimisation, however, breaks this rule in order to generate a more comprehensive test suite.



as long as the mutated action has not been executed, at most two nonconformance checks need to be performed at each step. the actual number depends on whether the mutation affects the guard of an internal or output action. if it is not possible to reach the mutation along the search path, the search may be stopped before hitting the maximum search depth.



the model used for the comparison specifies the behaviour of a device measuring particle counts in exhaust gas and contains 69 input and 20 output actions. it was derived from the model used in, which was defined using a different action system language. since this language allows for nested guarded commands in actions, the original model contains a lower number of actions.



we presented an approach to use symbolic input output conformance checking for test case generation and gave guidelines on how to implement the conformance check efficiently. the optimisations are targeted towards model-based mutation testing, which creates test cases covering faults corresponding to model mutations. applying angelic completion to the mutant, we implicitly cover another class of faults: as the angelic completion essentially ignores non-specified inputs, our test case generation strategy covers faults corresponding to ignored inputs as well.



to our knowledge, we have implemented the first fully symbolic iococonformance checker. however, the sioco-conformance relation has already been used as a conformance relation for model-based online testing. in contrast to their work, we rather focus on test case generation than on execution, which is performed randomly and on-the-fly in. an adapted version of ioco is also used in conjunction with symbolic specifications in. gaston et al. present an algorithm for testing suts based on finite behaviours of the specification selected by test purposes. their notion of test purposes can be related to our test case selection strategy. however, while the test cases generated by our approach are specified



in our current applications, we can safely assume a synchronous communication between test driver and sut. however, this assumption may not hold in general. to circumvent this problem, we could compose our models with action systems modelling message queues prior to the conformance check. such an approach would be able to faithfully model asynchronous communication performed during testing and would not result in state space explosion, as we check conformance symbolically. hence, it would be interesting to study the composition of action systems.



