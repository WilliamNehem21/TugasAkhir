we present a domain specific visual language(dsvl) for the definition of metrics for other dsvls. the metrics language has been defined using meta-modelling, and includes some of the more used types of product metrics. the goal is to make the definition of metrics for a dsvl easy, reducing or eliminating the necessity of coding. for this purpose, we rely on the use of visual patterns for the specification of the properties that should be measured in each metric type.



these ideas have been implemented in the atom3 tool, which allows the definition of dsvls by means of meta-modelling. in this way, with the new extension, the dsvl designer is able to define a metrics suite for a dsvl. then, an environment is generated where a number of widgets allow taking actual measures of the defined metrics on the models. we present some illustrative examples using the hypermedia design language labyrinth.



diagramatic notations are pervasive in many software development activities. they are used in the planning, analysis and design phases as a means to specify, understand and reason about the system to be built. dsvls are constrained diagramatic notations, oriented to a particular application domain. they provide high-level,



abstract class metric is the base class for all the metrics that the dsvl designer may create. it has a name, which must be unique. attribute variabletypes indicates the domain of the metric(i.e. the types for which the metric is going to be calculated). for example, if the attribute contains the name of two types, the metric is calculated for each combination of one instance of the first type and another one of the second, resulting in a matrix. if no type is specified, the domain of the metric is the whole model, and a scalar is obtained as a result. attribute subtypematching specifies whether the objects in the domain must have exactly the type specified in the previous list(value false) or also its subtypes are allowed(value true). in addition, relation dependency allows a metric to use results calculated by others. a constraint in the meta-model forbids cycles of dependency relations.



class elementoriented corresponds to the second subclassification in our taxonomy, that is, metrics for properties of single model elements. therefore, only one type has to be specified in the domain. subclass relatedelements measures the number of elements of certain kind related to a given one. the way in which both are related is given as a pattern.



hypermedia systems are described as a set of nodes where contents(text, images, etc.) are placed. links establish the way in which users can navigate in the system. besides, users can assume roles and belong to different teams from which they receive a set of permissions. roles and teams can execute certain functions if a relation permission exists between them. besides, roles and teams can be nested in hierarchical structures by means of relation composition.



user defined metrics stratum and compactness are oriented to the hypermedia domain. the first one is a measure of the linearity of the navigation path and may take values between 0 and 1. the lower the value, the less linear is the path.



compactness is a measure of the degree of connectivity of the navigation graph and also takes values between 0 and 1. the lower the value the less connected is the graph. both metrics are based on the calculation of a distance matrix using the length of the paths between two nodes. this is the reason of the dependency relations between these two metrics and the distance matrix navigation paths.



finally, we have defined three metrics that are generalizations of existing metrics in the object oriented domain. metric permission inh factor(pif) calculates the inherited permission ratio, being an indicator of the reuse. it is a particularization of metrics method and attribute inheritance factor(mif and aif respectively) in the object oriented domain. it is the sum of all the permissions inherited by subjets(roles and teams) divided by the total number of defined permissions(locals and inherited). we have defined auxiliary metrics subject inh permissions and subject permissions to calculate the factors of this division. the first one is a customization of the path-oriented metric inheritedelements, and the second one of the element-oriented metric relatedelements. then, the pif metric can be calculated from them using a couple of dependency relations. for the two auxiliary metrics no button is generated in the final environment(attribute button is set to false).



definition. in the window at the background, the buttons in white allow the creation of new instances of the ariadne artefacts. a new artefact is represented as a box in the window canvas, which later can be edited to include the model. the buttons in grey allow executing the previously defined metrics on the current models. the



in this work, we have presented a taxonomy of product metrics, together with a dsvl(called metrics) for specifying metrics for other dsvls. our language makes easy the customization of metrics by means of graph patterns. we have implemented these concepts in the meta-modelling tool atom3 and shown some examples in the hypermedia domain. the example showed how the use of metrics is especially interesting in the early phases of development in order to improve the design or detect quality defects prior to implementation.



ally hard-coded and the possibilities of extension are very limited. one exception is the sdmetric tool, which allows the definition of metrics for uml using a relational-like language based on xml. our approach is more general, as we are not restricted to uml, but we can define metrics for any dsvl. in addition, our metrics language is visual, allowing the customization of metrics in a graphical and declarative way. in the area of meta-case tools, our work is also original. there is a plethora of this kind of tools(such as gme or metaedit+), but to our knowledge none of them support the definition of metrics.



