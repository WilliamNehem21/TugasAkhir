online. as a result, we have seen a surge of many typical desktop applications being implemented as rich internet applications(or, rias). these applications include mail clients, office software, and even photo-editing software. the main benefits of online applications are the ease of which they can be taken into use and the ease of maintenance from the developers perspective.



in iticse 2006, a working group considered how algorithm visualizations should be merged with hypertext. the group considered visualization based hypertextbooks an important factor in promoting algorithm animation adoption in teaching. in the working group report, the features of such hypertextbooks the working group considered important were seamless visualization integration, increasing student engagement, providing a richer learning environment, integration of cms features, and aesthetics.



one implementation of the ideas of the group is xaal(extensible algorithm animation language). xaal supports describing animations on different levels of abstraction: using graphical primitives and transformations on them, or using data structures and operations on them. the goal of xaal and the tools supporting it has been to allow easy transformation of aas between various formats/systems. the import and export features of visualization systems is a significant research problem even in the wider scope of software visualization.



from the purely technical point of view, several rich internet application(or, ria) technologies have been introduced lately. these technologies allow creating complex applications that run in web browsers. in this work, we will focus on javascript. however, we will introduce some alternatives in section 4. on the field of javascript, a multitude of libraries aiding in web development have been developed, and new ones are popping up constantly. some of the most well-known libraries include dojo, mootools, prototype, scriptaculous, jquery, and google web toolkit, just to mention a few.



there are still some problems unsolved. first, platform specific problems do arise, although the javascript libraries make writing browser independent code a lot easier. currently, the implementation has been used in firefox, safari, opera, and seamonkey but does not work in internet explorer. however, there should not be any major impediments in fixing this in ie. in addition, using javascript libraries other than prototype in the html document can cause problems. however, this is not usual in current learning environments. another problem is that due to the nature of javascript, all the source code is available to the student. thus, any client-side assessment results cannot be trusted if such a system is to be used in evaluating students.



when building rich internet applications, javascript is not the only choice. in fact, there is an increasing number of promising technologies available. the discussion of all of these is not possible in the scope of this paper. however, the following mentions some of the most potential candidates.



so, why did we choose the javascript road? first, by using javasscript we do not depend on software provided by any corporation but are using open source libraries. second, javascript works on all platforms without any plugins, whereas, for example, silverlight is not available on linux at the time of writing. in addition, our approach can use any server side components. finally and most importantly, for the javascript approach, the technology is mature, widely used, and supported by an ever-growing number of useful libraries.



