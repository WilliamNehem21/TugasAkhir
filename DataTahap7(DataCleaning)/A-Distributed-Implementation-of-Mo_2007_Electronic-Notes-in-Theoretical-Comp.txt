example in which we specify the search of the best offer between several distributed alternatives. section 6 explains how we have used the model checker to check properties on our mobile maude specifications. section 7 wraps this piece of work with some final conclusions.



in case there is no socket associated to a particular location in the map neighbors, there can be a default socket stored in the attribute defneighbor. nevertheless, the value of the defneighbor attribute may also be unspecified. the sort default{x} declared in the module default-element below adds a default value to the sort used in the instantiation of the module. we define the parameterized functional module default-element{x:: triv} in which we declare a sort default{x} as a supersort of the sort elt of the parameter theory, and a constant null of sort default{x}.



if there is no socket associated to a particular location and a default one has not been specified then the data is not delivered. note that this model allows us to represent many different network architectures, and, although we do not care here about it, the routing information may be updated and used in a very flexible way. we will explain how to build a very simple architecture in section 4.2.



finally, a root object may be in state idle, waiting-connection, or active. the attribute state will take one of these values. root objects are only idle when they are created, being their first action either being activated as a client or server socket. they stay in waiting-connection until they get the confirmation from the server socket, passing then to active mode, state in which they will develop their normal activity.



to send messages to the appropriate locations. the first and second arguments of the send message are, respectively, the addressee and sender of the message, and the third argument is the message being sent. we will see in section 4 how the send messages will be used to send the corresponding data through the appropriate sockets.



sockets are accessed using the messages declared in the module socket, which can be found in the file socket.maude distributed with maude. we briefly describe here maude sockets. for a complete explanation of maude sockets, their use, and examples, we refer the reader to the maude manual. currently only ipv4 tcp sockets are supported; other protocol families and socket types may be added in the future.



as we have seen in section 3, the specification of mobile maude does not know about sockets. the only place where we get close to sockets is when using the send messages, which is in fact not a socket message, but a buffered socket one. we introduce in section 4.1 buffered sockets, a kind of filter class that makes mobile maude independent of sockets at the same time it adds some additional functionality. as we will see in section 6, this independence is precisely what allows us to model check mobile maude specifications in a rather clean way. section 4.2 talks about the architecture of the systems, on how processes get connected, and show how to do it for a very simple architecture.



the key is then in the reception of messages. a bufferedsocket object is always listening to the socket. it sends a receive message at start up and puts all the received messages in its buffer. notice that a buffered socket goes from idle to active in the buffer-start-up rule. a receive message is then handled if there is a complete message in the buffer, that is, there is a mark on it, and results in the reception of the first message in the buffer, which is removed from it.



when a serverrootobject is created it send an acceptclient message indicating that it is ready to accept clients through the server socket. when a clientrootobject is created it first tries to establish a connection with the sever by sending a createclienttcpsocket message. in the rule acceptedclient below, in addition to sending messages acceptclient and receive indicating, respectively, that it is ready to accept new clients through the server socket, and messages through the new socket, the server root object that gets the acceptedclient message sends a start-up message new-socket communicating its identifier. notice that the client knows the address and port of the server root object, but not its identity. in this first message the server sends its name to its client, allowing to this one establishing the association between the socket and the identity of the object in it.



the attributes neighbors and defneighbor are key for sending messages through the appropriate sockets. the reason why the first message sent through a socket after its creation is the message new-socket is to initialize these attributes. when it is received, depending on whether the receiver is a client or a server, and whether there is already a default neighbor or not, one or another action is taken. to avoid unintended loops in the delivering of messages, we assume that server root objects do not have default neighbors. for clients, the first connection is made



in this section we present a simple application to illustrate how mobile application code can be written in maude and can be wrapped in mobile objects. in this example we have printers, buyers, and sellers; a buyer agent visits several printer sellers which provide him information on their printers. the buyer looks for the cheapest printer, and once he has visited all the sellers, he goes back to the location of the seller offering the best price.



a buyer has an attribute sellers with a list of the identifiers of the known sellers. it also has an attribute status with its current state: onarrival, asking, done, or buying. finally, the buyer keeps information about the printer with the best price in the attributes price and bestseller of sorts, respectively, default{nat} and default{oid}. initially, these two last attributes are null.



we have used the language to implement several case studies. here we have shown an application where a printer buyer has to choose the seller offering the cheapest printer. the conference reviewing system presented in has also been migrated to this new version of the language.



