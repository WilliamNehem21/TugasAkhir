in this paper, we propose a technique for bounded reachability of linear hybrid automata, based on the reduction of a bounded reachability problem to a mathsat problem, i.e. satisfiability of a boolean combination of propositional variables and mathematical constraints. the mathsat solver can be used to check the existence(or absence) of paths of bounded length.



1 this work has been sponsored by the calculemus! ihp-rtn ec project, contract code hprn-ct-2000-00102, and has thus benefited of the financial contribution of the commission through the ihp programme. it has also been partly supported by esacs, an european sponsored project, contract no. g4rd-ct-2000-00361, and by a grant from intel corporation.



in this paper, we address the problem of verifying hybrid automata with continuous variables and triangular constraints. we propose a formal verification method for bounded reachability. the approach is based on the encoding of a bounded reachability problem into a mathsat problem, i.e. the problem of checking the satisfiability of a boolean combination of propositional variables and mathematical constraints over real variables. the approach is made practical by the use of the efficient mathsat solver, that extends and integrates state-of-the-art techniques for propositional satisfiability(sat) with a set of mathematical reasoners. the approach presented in this paper is largely similar to bounded model checking, and enhances the method presented in, limited to timed systems, to dealing with real variables with arbitrary linear dynamics.



the proposed technique is clearly incomplete, and currently limited to the case of linear dynamics. despite these facts, however, it allows us to represent and to analyze interesting systems from real-world applications[6,5], providing useful information, especially oriented to debugging and goal-directed simulation. an experimental analysis shows that our techniques is competitive with state of the art verification tools such as hytech, and with methods based on the discretization of real variables.



bounded model checking(bmc) is a recent approach to symbolic model checking. given a kripke structure m, and an ltl formula f, the idea is to check whether f is true in m by looking for a counterexample(i.e., a witness to the violation of f) that can be presented within a bound of k steps. given k, the problem is reduced to the satisfiability of a propositional formula



the encoding of properties basically follows the encoding in. our approach is bounded complete, in the following sense: if there exists a trace of length k, then the encoding of length k is satisfiable, and can be found by running mathsat on it. the undecidability of the class of hybrid automata we are dealing with tells us that it is in general impossible to decide if a counterexample might be found with bigger k, or if the problem is unsolvable.



we evaluated the potential of the approach by tackling an example of hybrid systems of industrial relevance, i.e. the model of the sps. the bounded reachability method described in section 4 can be used both for model debugging(i.e., bug hunting) and for simulation of hybrid systems. in the following we provide some hints about the use of our methodology by showing some experithe gbx, valve, atsm and pto components happen along the path, and finally the speed of the gearbox(gbx component) drops below the constant value sg1. the negation of the above property can be seen as a safety property to be verified by the system(i.e., in presence of failures due only to the main engine, the gearbox speed cannot drop below sg1). the rationale behind this property is that the cross-bleed procedure initiated by the sps computer(see section 2) is able to recover from an engine failure by using power coming from the opposite engine(which is assumed to be working in this one-sided model).



procedure is not able to prevent the gearbox speed to drop below that particular value). in this case, mathsat generates an output trace showing an execution of the system which leads to the violation. the trace includes information on the discrete transitions and the time elapse transitions taken by the automata, the exact time delays and time points at which the transitions take place, and the synchronization channels between different automata. if the



the simulation begins at time t0, when an engine grippage takes place. both the engine and the gearbox speeds begin to decrease. at time t1, the sps computer detects a gearbox low speed condition, and therefore issues the opening of the valve(the valve and sps computer automata synchronize on the open channel); as a result, the atsm begins to increase its speed(sps and atsm synchronize on the inc a channel). at time t2, the sps computer issues a change in the atsm dynamics(sps and atsm synchronize on inc b). the simulation stops at time t3, when the gearbox speed reaches the value



we also attempted a comparison with hytech, a state-of-the-art tool for the analysis of hybrid systems. differently from our approach, hytech is based on the calculation of the reachable state space, and is therefore not limited to the bounded case. in principle, hytech may not terminate when tackling an undecidable class of automata(as in the case of the sps).



then be checked by a sat-solver. we also presented the mathsat solver[2,1], an efficient sat-solver which is based on the integration of sat techniques with some specialized decision procedures for linear mathematical constraints. a work related to ours, but still limited to timed systems, is. in the present work, as explained in section 4.2, we have extended the encoding in order to deal with hybrid systems.



the model of hybrid i/o automata presented in is general enough to accommodate our model of hybrid automata. discrete and continuous communication are achieved by means of, respectively, shared actions and shared variables. however, discrete events are not allowed to change the value of shared variables, as in our case.





in this paper, we have addressed the problem of verification of industrial systems that are naturally modeled as linear hybrid automata. the approach is an enhancement of the bounded model checking approach for timed systems proposed in to the case of linear hybrid automata. efficiency is gained by the use of the mathsat solver. the main limitations are given by the undecidability of the analyzed class, and the constraints on the linearity of real variables dynamics. despite this, however, the approach allows us to model and analyze systems of practical relevance, that hytech is currently unable to deal with.



in the future, we will provide a more thorough experimental evaluation, by enlarging both the set of tools we compare with(some of them are cited in section 6), and the set of case studies to analyze. regarding the sps example, we plan to experiment with more complex models, at different levels of granularity and abstraction(e.g., a two-sided model of the system). we will investigate how to optimize the mathsat solver on these specific problems(e.g., by constraining the splitting variables in the style of[9,18]), and will experiment with different encodings. as a first step towards bridging



gilles audemard, alessandro cimatti, artur korni-lowicz, and roberto sebastiani. bounded model checking for timed systems. in doron a. peled and moshe y. vardi, editors, forte 2002: conference on formal techniques for networked and distributed systems, volume 2529 of lncs, houston, texas, november 2002. springer.



