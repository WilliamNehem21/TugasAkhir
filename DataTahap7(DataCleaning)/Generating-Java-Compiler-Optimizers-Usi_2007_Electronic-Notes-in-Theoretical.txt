a new specification language based on the bidirectional ctl that can express typical optimization rules very naturally. by adding rewriting conditions to allow for temporary variables and considering real-world language features such as exceptions, the system can perform optimization of java programs. so far, a compiler optimizer using temporal logic was assumed to be impractical, because it consumes too much time. however, with our method, the generated java compiler optimizer can compile seven of the specjvm98 benchmarks with a compile time from 4 seconds to 4 minutes.



current optimizers are almost always implemented by some kind of programming language. however, the approach of implementing optimizers by ctl(computational tree logic), a branching temporal logic, has attracted interest in recent years. this approach has two main advantages.



before model checking, free variables 4 must be bound. therefore when there are a lot of free variables in the conditional expression, processing time becomes unrealistic. we clarify through experiment the fact that using the node numbers of the kripke structure as free variables, as done in all previous work, will greatly increase the optimization time. thus, formalization of optimization should be done using the least number of free variables.



the specification language we have developed does not refer to the node number of the kripke structure. what the model checker calculates is not the instruction of a specific number but sets of instructions that satisfy the same condition. therefore, it becomes very easy to describe a complex rewrite rule that rewrites many instructions. moreover, efficiency is improved as the free variables corresponding to the node number of the kripke structure are omitted.



so far, optimizers with temporal logic have been assumed to be impractical because of the amount of processing time needed. by adding some processing for real-world language features, we obtained several typical optimization phases for a java language compiler, the performance of which is now close to optimizers that use traditional algorithms. in our research, seven of the specjvm98 benchmarks were able to be optimized in a time ranging from 4 seconds to 4 minutes using the aforementioned improvement.



we constructed a new model checker instead of modifying an existing model checker because we think our model checker can easily handle the program features. also, creating our own model checker will make it easy to extend its functionality in the future such as improving the algorithm and data structures to make it more efficient, e.g., by using bit vectors(or partial evaluation).



complex optimization like partial redundancy elimination is needed for real optimizing compilers. many conditional formulas are necessary to specify it. the system must rewrite a set of instructions that satisfy the same conditional formula at the same time. writing specifications in ctlbd from scratch considering the meaning and condition of optimization is difficult.



free variables has been adopted by most previous work, as well as ours, and it seems very convenient and expressible. however, as mentioned above, binding of free variables will cause an exponential computational complexity. an example of time explosion caused by free variables will be shown in section 8. there, we use different formulas for copy propagation, one containing 2 free variables that can be bound at the match stage, and another containing 4 free variables with only 2 of them able to be bound at the match stage. the resulting time explosion exhibited by the latter case will be shown later. it shows that the introduction of free variables needs to be avoided as much as possible in practical compiler optimizers. we focused on eliminating unnecessary free variables when we made our optimizers.



binding can be omitted if the target is not on the path related to the temporal formula. for example, checking instructions on the past paths can be omitted if the ctlbd formula includes only future temporal operators. similarly, checking instructions far away from the next instruction can also be omitted if the temporal operator is ax or ex. in our experiment, when this technique is applied to the dead code elimination(which only includes future temporal operators), processing time is reduced to about 1/3.



