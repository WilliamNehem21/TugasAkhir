an emerging paradigm for programming communication is the so-called choreography. this discipline focuses on the fact that an architect, when designing a distributed system, no longer describes the behaviour of each single interacting peer(end-point behaviour) but establishes how the various inter-participant interactions happen by giving a global description(choreography) of the system. in a traditional approach, the architect would describe each communication operation, e.g. an input to be performed at one particular peer. unfortunately, this makes it very difficult to have a global view of how the whole system being designed works. on the other hand, a global description offers a view of where and when a communication has to happen. the architect will now decide that e.g. there will be a message from a to b and no longer think how this will be implemented at a(sending a message) or b(waiting to receive a message). choreography can offer a vantage view of the system facilitating the design stage and leaving the implementation details to the(possibly automated) process of generating a sound end-point code, called end-point projection.



exceptions are a mechanism widely adopted in modern programming languages(e.g. java, c#) for dealing with exceptional system behaviours i.e. they are designed to handle the occurrence of some conditions interrupting the normal flow of execution of a program 3. while the classical notion of exception is bound to the local flow of a process, in communication-centred programming exceptions are about the flow of interactions where a sudden interruption must involve all interacting participants. we shall call this kind of exception an interactional exception.



example 2.1(a simple financial protocol) this example and the following one are typical scenarios in financial protocols. consider a customer buyer who wishes to purchase a product from a company seller. buyer starts a session with seller who repeatedly sends quote updates about the product price. when buyer decides to accept a particular quote, without explicitly notifying seller, it throws an exception. at this point, seller and buyer move together to a new stage(exceptional stage with respect to the ordinary sequence of actions) where they exchange information for successfully terminating the transaction e.g. credit card details for payment and receipt. a global calculus representation of the protocol which uses the interactional exception mechanism is given:



in lines 1 and 2, buyer invokes service chbroker and sends its identity id to broker who, in line 3, will check whether buyer is bad or not. if buyer is not trusted, broker will raise an exception which will take both buyer and broker to an abortion procedure in line 12. note that in this case, buyer and broker are the only participants involved so far and the only ones who will move to another conversation for handling the exception.



if buyer can be trusted, broker invokes service chseller and forwards to buyer all quotes received from seller increasing them by 10%. as before, buyer will throw an exception whenever s/he decides to accept a quote. in this case, as the participants involved are now buyer, broker and seller, the handler to be executed is the inner one where broker will forward messages between buyer and seller(lines 8-11). this event will also discard the handler in line 12 which, after session initiation in line 4, has become inactive.



the predicate outertry is necessary because the throwing of an exception can happen nested in a try-catch block which is a refinement of an outer one. like in the financial protocol with broker, the latter needs to be discarded. hence, we need to apply meta reduction to the outermost block.



above, the default choreography describes a system where participant b sends two messages, one immediately after the other, without waiting for an acknowledgement from a. this is a common scenario in communication-centred programming that, we believe, should also be allowed. as another example, also consider the financial protocol shown in the previous sections(also without broker) where seller repeatedly sends a quote.



well-threadedness is based on thread annotation of global descriptions. threads are denoted by identifiers denoting which actions belong to the same processes. for instance, in the example above, b(s)[s, s!op(v), q1] and!a(t)[0, q2] denote two different threads, both running at the same location a.



thread projection and coherence. in this subsection, we discuss, together with the definition of coherence, the notion of thread projection i.e. given an annotated global description i, how can we generate the end-point behaviour associated to each of its threads.



when we project thread 1, we must take into consideration that, after the refinement in line 2, such a thread is involved in another handler in the line 4 besides the outermost handler in line 5. therefore, we must make sure that the thread projection of 1 provides a single handler ready to input with both operations op4 and op5(lines 4 and 5). the solution is to merge the outermost handler in the fifth line with any other nested handler involving thread 1. in, thread merging is a partial operation between threads that allows differences in branches which do not overlap. if two end-point behaviours are mergeable, we can merge them and obtain a single process which simulates both of the two behaviours, by combining missing branches from the both. for instance, in the above example the projection of thread 1 would result into



we have introduced the notion of exception for choreography. in particular, we have extended the syntax of the global calculus[3,4] with the exception mechanism and given its formal semantics. the aim of this work was to show how exceptions can be used at choreography level and, with examples, how they can be mapped to end-points. in the global calculus, exceptions are a simple form of transferring execution to a different choreography. but, together with a sound end-point projection, choreography becomes a powerful tool for designing end-point behaviour where the raising of an exception will transfer the execution of all end-points to an exception handling interaction.



future work. the global calculus with exceptions introduced in this work is still limited to some basic operators and only includes values in messages. one point that needs further investigation is to allow the passing of service and session channels although this problem should also be carefully studied at end-point level.



the end-point projection has only been analysed through examples but it has been revealed that it does not follow directly from the work done in. however, the three conditions for guaranteeing end-point projection need to be formally defined and a theorem stating the correctness of the epp must be proved. in particular, we need to understand how to formally define the thread projection of run-time terms such as try-catch blocks and queues.



