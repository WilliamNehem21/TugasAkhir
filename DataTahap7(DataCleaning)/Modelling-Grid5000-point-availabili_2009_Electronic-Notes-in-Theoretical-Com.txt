the point availability is the probability that a system is available at time t. as grids need a lot of resources to be really operational, the evolution of their availability with time or depending on a maintenance process is a hot topic. but as grids contain a lot of resources, it is quite difficult to model and solve this problem. here we advocate a component based description which is associated to a tensor based numerical approach.



steady-state availability, i.e., the limit of a(t) when t goes to infinity, can be computed for very large systems because it relies on the numerical analysis of steadystate distribution and very efficient techniques are known. point availability is much harder. the algorithms are simpler to write but the number of iterations may be very important and the size of the markov chain has a large impact on the feasibility of the analysis.



stochastic automata networks is one of the many high level formalisms which have been designed to overcome the state space explosion problem using a tensor representation of the chain. instead of storing the chain as a sparse matrix, it is possible to derive from the specifications some small matrices which are used to build the transition matrix of the chain. also, computation can be handled on the reachability states space, which may be much smaller than the potential states space.



many high level formalism such as petri nets and stochastic process algebra are now able to store the transition matrix q of a chain in a tensor form[11,13]. however, new methods have to be derived to take advantage of this tensor representation[12,16] and they may be more complex than simple algorithms based on sparse matrix representation. typically the algorithms[9,10,15] to compute the point availability are based on the uniformization of the continuous time markov chain to control the truncation error and on a(vector matrix vector) multiplication. here we advocate tensor representation of the chain as an interesting alternative to obtain, store and analyze the chain and the point availability of systems. using new version of classic algorithms tailored for tensor representation(implemented in the last version of peps), we are able to analyze the grid point availability problem we want to cope with.



stochastic automata networks(san) is a structured markovian formalism, i.e., it describes continuous-time markovian models not as a flat system, but as a structured(modular and organized) collection of subsystems. the basic modeling principle of san is to describe a whole system by a collection of subsystems with an independent behavior and occasional interdependencies. each subsystem is described as a stochastic automaton, i.e., an automaton in which the transitions are labeled with probabilistic and timing information. hence, one can always build a continuous-time stochastic process related to san[17,5].



the global state of a san model is defined by the cartesian product of the local states of all automata. there are two types of events that change the global state: local and synchronizing events. local events change the san global state passing from a global state to another that differs only by one local state. synchronizing events can change simultaneously more than one local state, i.e., two or more automata can change their local states simultaneously. in other words, the occurrence of a synchronizing event forces all concerned automata to fire a transition corresponding to this event.



the other possibility of interaction among automata is the use of functional rates. any event occurrence rate may be expressed by a constant value or a function of the state of other automata. by contrast with synchronizing events, functional rates are one-way interaction among automata, since it affects only the automaton where it appears.



this section presents a possible description of a grid platform using san. basically, a grid platform is composed of a set of interconnected sites. each site provides some cpus. we propose in this paper a simple way to model a grid platform composed of s sites and l connections using only two kinds of generic automata. the first kind of automaton represents the sites of the grid. this kind of automaton is called site automaton. the second kind of automaton, called link automaton, represents the direct connections between two sites, i.e., each link automaton models a direct connection.



grid state dependence. the function fi associated to the repairing rate allows us to model different repair behaviors, like priority repair ordering. this feature will be shown in the case study of section 4 where different functions are used to change the repair service policies. here we use specifically the ability of san formalism to model dependencies among components using functions. typically, function fi which determines rates of automaton site(i) has as argument the current state of automata link(l) which are connected to this site.



if a simple connection failure occurs(event dlinkl) the site can still be accessible by others connections, if it exists at least one connection in state up. otherwise, i.e., if a local network failure occurs(dsitei) the site cpus are inaccessible to all other sites.



after grouping a set of sites in only one secure site, some connections become redundant too, i.e., the connections between orsay-lyon, rennes-lyon, and lillelyon. these connections can be grouped in only one connection with a reduced failure rate. a grouped connection failure rate is easily computed by the combination of individual connections failure rates. this procedure reduces the number of direct connections to 5.



another reduction can be applied based on clusters characteristics. we can assume that processors are assembled in groups, and the cpus failures occur by blocks. this assumption is very reasonable, especially if we consider that many cpus are inside a same physical machine. we consider in our model blocks of 32 cpus.



