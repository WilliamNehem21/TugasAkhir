futures are special kind of values that allow the synchronisation of different processes. futures are in fact identifiers for promised results of function calls that are still awaited. when the result is necessary for the computation, the process is blocked until the result is returned. we are interested in this paper in transparent first-class futures, and their use within distributed components. we say that futures are transparent if the result is automatically and implicitly awaited upon the first access to the value; and that futures are first-class if they can be transmitted between components as usual objects. thus, because of the difficulty to identify future objects, analysing the behaviour of components using first-class transparent futures is challenging. this paper contributes with first a static representation for futures, second a means to detect local deadlocks in a component system with first class futures, and finally extensions to interface definitions in order to avoid such deadlocks.



if communications occurring over the bindings are synchronous, then the interfaces can be accessed as usual objects, having methods with parameters and a return type. when components are connected asynchronously, one must find a way to create a channel for the objects returned by the components. futures can be used as identifier of the asynchronous invocations over components. indeed, futures provide some kind of transparent channels that correspond to the original bindings, but taken in the opposite direction: from the server to the client.



but components and futures get more related when considering static analysis. indeed, in an asynchronous component model like the gcm, only invocations on a component create a future. thus, the components allow the static identification of future creation points, and thus a finer static analysis.



unfortunately, although the component model provides a good abstraction for distribution and specifies which calls are asynchronous, the flow of futures is still hard to approximate. in other words, the component abstraction tells us where futures are created but not where they can go. the dynamic and transparent nature of futures implies that each result and each parameter of an invocation may contain a future; thus the only safe assumption for parameters and results is that any object received can be a future, and every field of this object can itself be a future. this leads to a very imprecise approximation of the synchronisation in the system; this over-approximation can always be improved by static analysis(when the system is closed), or by specification, as illustrated in section 5.



transparent first-class futures provide a natural and efficient data-flow synchronisation where a result is awaited only when it is necessary. however, providing a model of programs using transparent first order futures is challenging. the contribution of this paper is first to give a static representation of transparent first-class futures, second to characterise how access to futures can block components indefinitely, third to use the previous results to identify local deadlocks, and finally extend the definition of interfaces to avoid some blocked states.



the objective of this section is to give a behavioural model for transparent firstclass futures, this model is intended at the static verification of the behaviour of components. we assume that the accesses to the component interfaces and the creation point of futures are given in the functional behaviour of the component(body). we start this section by a brief definition of the pnets model, and of its(static) graphical representation on which we build our models.



i.e. all future creations are of the form f=itf.foo(), resulting in a future stored in the variable f. we call future update the operation consisting in replacing a reference to a future by the value that has been calculated for it.



i.e. to synchronise futures. we call waitfor the primitive allowing the update of a future to be awaited(this primitive has also been named touch or get). when futures are transparent, this waiting operation is automatically performed upon an access to the content of the future. we describe in this section what behavioural model can be created for this kind of futures. for the moment, we consider that futures cannot be passed between remote entities, and thus the future is necessarily accessed by the same entity that created it(at another point of the execution).



in here, if f.bar1() is executed, then f must be filled; in this case f.bar2() will be necessarily non-blocking. otherwise, f.bar2() may or may not be blocking depending if the future f is already filled by the time the call is performed. note that it is much simpler when futures are explicit, i.e. if futures are typed.



proxies that are used for transmitting a future reference as the value of another future are slightly different: they need no!getvalue because they simply forward the value they receive as the value for another future. assigning a future reference to another future is directly ensured at a higher-level, that is to say by the composition itself. this ensures that the behavioural model is still compositional as no name of an externally created future exist in the proxy.



in the pnets model of a, futures are forwarded to several activities; a future is sent as parameter of the method calls to e and f in call(gee(fa)) and call(hoo(fa)) resp. a proxy is created in each callee with the identifier(fa) matching the proxy of the caller, i.e. proxy(fa). proxy(fa) in pnets(a), after receiving the concrete value, will forward the value to both activities e and f. this is seen as an action forward(fa,val). as a remark, the update of proxy(fa) in f is done no matter whether the component is called or not, however if the call is never performed the proxy is unreachable(its identifier is unknown).



system deadlocks if itfb.foo() is synchronous the deadlock is similar to the previous one; if foo() is synchronous, then this call blocks component b until the result is known. what it means is that a synchronous call cannot trigger a flow that goes through a composite twice. this is a common pitfall for inexperienced programmers with gcm/proactive that we can fortunately detect in our models.



this removes some of the imprecision of the static analysis. nevertheless, a source of ambiguity remains in open environments: a parameter(or any subfield) received in a method call may be either a future or a value due to transparency of first-class futures. this section suggests an extension to the interface description language(idl) to improve the precision of analysis and specification, we also explain how this extension prevents the occurrence of some deadlocks.



the idl used in the gcm specifies the interface signatures, but is insufficient to deal with transparent first-class futures. based on the interface signature, one does not know whether method parameters are futures or not. moreover, there is no way of controlling which parameters cannot be futures. typing futures would solve the issue, however, we would lose all the good properties shown in section 2.2. one way is to specify within the idl which parameters(or fields) cannot be futures(i.e. marking them as strict value); the other parameters are allowed to be futures or not. note that this is less restrictive than typing because some parameters can still be either a value or a future.



the difficulty is finding, statically, a proper abstraction for the parameter structure. in theory, every subfield of every parameter may be a future. therefore a static representation of arbitrary types is impractical. here we suggest a relatively precise approximation; marking a field as strict value, recursively, means that all its subfields(known at runtime during serialisation) are strict values as well. similarly, not marking a field implicitly means that, recursively, all its subfields(except the marked ones) may be futures.



model for futures and their behaviour(synchronisation, update). this model expresses the flow of future references and future values. it extends our previous works by giving behavioural models for transparent first-class futures, relying heavily on the properties proved in the asp-calculus.



