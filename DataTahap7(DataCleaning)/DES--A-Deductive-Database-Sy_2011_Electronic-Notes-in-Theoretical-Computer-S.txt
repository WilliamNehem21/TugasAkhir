the intersection of relational databases, logic, and artificial intelligence was the melting pot of deductive databases. a deductive database system includes procedures for inferring information from the so-called intensional database(deductive rules) in addition to the so-called extensional database(deductive rules without body, i.e., facts following the logic programming nomenclature). deductive database languages are related to the prolog language, and datalog has become the de-facto standard deductive database query language. datalog allows to write queries as normal logic programs(without function symbols), and they are ensured to be terminating upon some conditions(e.g., avoiding infinite relations as arithmetical predicates).



this language has been extensively studied and is gaining a renowned interest thanks to their application to ontologies, semantic web, social networks, policy languages, and even for optimization. in addition, companies as logicblox, exeura, semmle, and lixto embody datalog-based deductive database technologies in the solutions they develop. the high-level expressivity of datalog and its extensions has therefore been acknowledged as a powerful feature to deal with knowledge-based information.



compared to the widely-used relational database language sql, datalog adds two main advantages. first, its clean semantics allows to better reason about problem specifications. its more compact formulations, notably when using recursive predicates, allow better understanding and program maintenance. second, it provides more expressivity because the linear recursion limitation in sql is not imposed. in fact, multiple recursive calls can be found in a deductive rule body.



several deductive systems have emerged along time, mostly born from academic efforts. see, for instance dlv, xsb, bddbddb, ldl++, conceptbase, and.ql. translating these outcomes to experiment with and to widen the dissemination of state-of-the-art features of such deductive systems is hard since no one meets the following desired properties: multi-platform, interactiveness, multi-language support, freeness, and opensourcing, among others.



organization of this paper is as follows. section 2 summarizes the main features of the current version of the system. section 3 describes the datalog and sql query languages as they can be used from des. section 4 explains our proposal to the management of null values and outer join operators in datalog, which in turn are used in the compilation of sql statements to datalog programs. also, a novel approach to aggregates is described in section 4, including both aggregate functions and predicates. finally, section 6 draws some conclusions.



des ensures that negative information can be gathered from a program with negated goals provided that a restricted form of negation is used: stratified negation. this broadly means that negation is not involved in a recursive computation path, although it can use recursive rules. the system can correctly compute a query q in the context of a program that is restricted to the dependency graph(which shows the computation dependencies among predicates) built for q so that a stratification can be found. the user can ask the system for displaying the predicate dependency graph as well as for the stratification via commands.



automatic temporary views, autoviews for short, are temporary views which do not need a head. when submitting a conjunctive query, a new temporary relation, named answer, is built with as many arguments as relevant variables occur in the conjunctive query. answer is a reserved word and cannot be used for defining other relations. the conjunctive query a(x), b(y) is an example of an autoview, which computes the cartesian product of a and b.



in, an approach to debug datalog programs anchored to the semantic level instead of the computation level is proposed. this approach has been implemented in des as a novel way of applying declarative debugging, also called algorithmic debugging, to datalog programs. it is possible to debug queries and diagnose missing answers(an expected tuple is not computed) as well as wrong answers(a given computed tuple should not be computed). the system uses a question-answering procedure which the user starts when



the command process filename allows to process the file filename as a batch of user inputs. in addition, if the file des.ini is located at the installation directory, its contents are interpreted as input prompts and executed before giving control to the user. therefore, automation is possible as, for instance, to set the des application as a component of more complex systems of as a delegate for tasks sent from other systems. in this case, inter-process communication is via files. batch files can contain remarks because prompt input lines starting with the symbol% are interpreted as such, which imply no computations. in addition, the command/log allows to write the system output to a file, which can be used by another application.



the system has been implemented following iso prolog, its binaries uses an efficient prolog engine(sicstus prolog) and moreover implements memoization techniques[21,9] for upgraded efficiency. the computation is guided by the query, instead of following a bottom-up approach. however, focus was not set on performance, but on rapid prototyping of useful features, so that this system cannot be seen as a practical deductive database for large amounts of data since it is developed from an in-memory database point of view. in addition, neither indexing is provided nor concurrent accesses are allowed.



since des is ported to several prolog systems(including ciao prolog, gnu prolog, sicstus prolog and swi-prolog), it can be used from any of these environments running on any platform they support(e.g., windows, linux glibc 2.x, mac os x 10.x, solaris 10, aix 5.1l,...).



unknownness has been handled in relational databases long time ago because its ubiquitous presence in real-world applications. despite its claimed dangers due to unclean semantics(see, for instance, the discussion in), null values to represent unknowns have been widely used. including nulls in a datalog system implies to also provide built-ins to handle them, as the outer join operations. des includes the common outer join operations in relational databases, providing the very same semantics for operators ranging over nulls.



this predicate encloses a query for which a given list of variables builds answer sets(groups) for all possible values of these variables. if we consider the relation employee(name, department, salary), the number of employees for each department can be counted with the query group by(employee(n,d,s),[d],r=count). if employees are not yet assigned to a department(i.e., a null value in department), then this query behaves as a sql user would expect: excluding those employees from the count outcome. if we rather want to count active employees(those with assigned salaries), we can use the query group by(employee(n,d,s),[d],r=count(s)).



an aggregate predicate returns its result in its last argument position, as in sum(p(x),x,r), which binds r to the cumulative sum of values for x, provided by the input relation p. these aggregate predicates simply allow another way of expressing aggregates, in addition to the way explained just above. for instance, the following query is allowed: count(employee(n,d,s),s,t).



a group by operation is simply specified by including the grouping variable(s) in the head of a clause, as in the following view, which computes the number of active employees by department: c(d,c):count(employee(n,d,s),s,c). having conditions are also allowed, including them as another goal of the first argument of the aggregate predicate as, for instance, in the following view, which computes the number of employees that earn more than the average: count((employee(n,d,s),avg(employee(n1, d1,s1),s1,a),s>a),c). note that this query uses different variables in the same argument positions for the two occurrences of the relation employee. compare this to the following query, which computes the number of employees so that each one of them earns more than the average salary of his corresponding department. here, the same variable name d has been used to refer to the department for which the counting and average are computed: count((employee(n,d,s),avg(employee(n1, d,s1),s1,a),s>a),c).



this paper has listed the main features of the deductive database educational system des and described some of the most relevant ones that distinguish it as a unique system. following such features, intended users who can benefit from this system include students, teachers, practitioners and researchers, since it can be used to, first, learn and teach both sql and datalog languages in a single, database-shared environment. second, to experiment with its features since it is free, open-source and furthermore is completely implemented with prolog, a high-abstraction-level programming language. on the one hand, this allows to change its behaviour and add new features much more easily than either using a lower-abstraction-level language or using several languages.



