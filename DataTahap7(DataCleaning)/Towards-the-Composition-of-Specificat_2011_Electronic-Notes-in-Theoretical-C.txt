the development of a system can start with the creation of a specification. following this viewpoint, we claim that often a specification can be constructed from the combination of specifications which can be seen as composition. event-b is a formal method that allows modelling and refinement of systems. the combination, reuse and validation of component specifications are not currently supported in event-b. we extend the event-b formalism using shared event composition as an option for developing(distributed) systems. refinement is used in the development of specifications using composed machines and we prove that properties and proof obligations of specifications can be reused to ensure valid composed specifications. the main contributions of this work are the event-b extension to support shared event composition and refinement including the proof obligations for a composed machine.



systems can often be seen as a combination and interaction of several subspecifications(hereafter called sub-components) where each sub-component has its own functionality aspect. this view introduces modularity in the system: different sub-components represent a particular functionality and changes in the subcomponents are accommodated more gracefully in the system specification. we use composition to structure specifications through the interaction of subcomponents seen as independent modules. this use of composition is not new in other formal notations: examples are[22,13,15]. here we express how we can use(and reuse) composition for building specifications in event-b through subcomponents(modules) interaction, benefiting from their properties and proof obligations(pos). the interesting part of composition involves the interaction of subcomponents which usually occurs by shared state, shared operations ora combination of both(for example, fusion composition). although sub-components have states, we mainly focus on their(visible) events similar to csp[11,14]: we follow a shared event composition approach where events are synchronised in parallel. this document is structured as follows: sect. 2 briefly describes event-b. section 3 introduces the notion and properties for shared event approach. composed machine, pos and the monotonicity property are introduced in sect. 4. related



the semantics of the parallel composition of machines m and n corresponds to the set of failure-divergence for each individual machine in parallel. from the correspondence between action systems and event-b, machines m and n can be refined independently which is one of the most important and powerful properties that shared event composition in event-b inherits from csp. the monotonicity property for the shared event composition in event-b is proved by means of proof obligation in sect. 4.4. when sub-components are composed it is desirable to define properties that relate the individual sub-components allowing interactions. these properties are expressed by adding composition invariants icm(s, c, v1,..., vm) to the composed machine constraining the variables of all machines being composed.



pos play an important role in event-b developments. pos are generated to verify the properties of a model. for simplicity we define pos in terms of a composition of two machines m1 and m2 that refine machine m0, but the rules generalise easily to the composition of n machines. furthermore context elements in the formulas(s, c, a(s, c)) are not considered. the pos defined for standard machines(invariant preservation, well-definedness, refinement, etc) are defined for composed machines. we simplify the composed machines pos by assuming that the pos of the individual machines hold. we define the additional pos necessary to ensure that the composed machine satisfies all the standard pos. we consider that the pos of the m 0, m1 and m2 hold. the respective composition pos are described as follows.



well-definedness for expressions(guards, actions, invariants, etc) needs to be verified. these are verified by means of pos in event-b. for composed machines, well-definedness pos are only generated for icm(v0, v1, v2). other expressions are verified in the individual machines.



we also need to prove the monotonicity for single(non-composed) events that appear at both levels of abstraction. we shall prove it using machines m 1 and cm 2. in this case, the gluing invariant described in(12) does not use neither the variables(vn) neither the invariants(in) neither events(evtn1) from n 1. therefore it can be simplified and rewritten as:



new events can be added during refinement, respecting the refinement pos. the refinement po proof for new events is similar to the previous cases but applied to a single event refined by a composed event. due to the lack of space we do not present it here.



