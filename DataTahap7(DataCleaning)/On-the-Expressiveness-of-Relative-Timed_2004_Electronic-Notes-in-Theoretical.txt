although very simple and elegant, linda-style coordination models lack the notion of time, and are therefore not able to precisely model real-life coordination applications. nevertheless, industrial proposals such as tspaces and javaspaces, inspired from linda, have incorporated time constructs. this paper aims at a systematic study of the introduction of relative time in coordination models. it builds upon previous work to study the expressiveness of linda, linda extended with a delay mechanism and linda primitives extended to support the duration of tuples and of the suspension of communication operations.



in this context, a clear separation between the interactional and the computational aspects of software components has been advocated by gelernter and carriero in. their claim has been supported by the design of a model, linda(), originally presented as a set of inter-agent communication primitives which may be added to almost any programming language. besides process creation, this set includes primitives for adding, deleting, and testing the presence/absence of data in a shared dataspace.



adopt the classical two-phase functioning approach to real-time systems illustrated by languages such as lustre(), esterel() and statecharts(). this approach may be described as follows. in a first phase, elementary actions of statements are executed. they are assumed to be atomic in the sense that they take no time. similarly, composition operators are assumed to be executed at no cost. in a second phase, when no actions can be reduced or when all the components encounter a special timed action, time progresses by one unit.



in this paper, we consider only the first two extensions. these extensions were introduced in with some expressiveness results. however, as will be appreciated by the reader, this paper aims at a much deeper study of these expressiveness results. in particular, all the results of sections 3 and 4.2 are original with respect to while the comparisons of sections 4.1 and 4.3 have lead to 8 new results with respect to.



to start with, consider the family of languages l(x), parameterized on the set of linda-like communication primitives x. this set x consists of the basic linda primitives out, in, and rd, for putting an object in a shared dataspace, getting it and checking for its presence, respectively, together with a primitive testing the absence of an object from the dataspace. formally, the language is defined as follows.



language and qualify e as an agent. however, to meet the intuitive expectaion, we shall always rewrite agents of the form(e; a),(e|| a), and(a|| e) as a. this is technically achieved by defining the extended set of agents as follows, and through simplifications derived by imposing a bimonoid structure.



as delay(i) succeeds on the empty store, the agent b1 has to suceeds. this derivation provides then a valid prefix for a successful derivation of the agent. this contradicts, by property p 3, the fact that delay(i)+(delay(0); ask(t)) has only failling computations on the empty store. the absence of choice starting with a tell and delay(0) primitive can be shown similarly.



as delay(i+ 1) succeeds on the empty store, this derivation provides a valid prefix for a successful derivation of the agent. this contradicts, by property p 3, the fact that delay(i+ 1)+(delay(i); ask(t)) has only failing computations on the empty store. any kl must then be strictly greater than at least one of the jl. by the induction principle, any jl is greater than i, and therefore any kl is greater than i+ 1.



proof.(i). because of the infinite enumerability of the tokens, we associate with each token t a pair of tokens that, for simplicity, we denote tf and ti. intuitively, they correspond to a token t on the store with, a finite or infinite duration, respectively. as there is no nask primitives, decreasing the duration of finite tokens in the transitions will occur only in case of failing computation.



by property p 3, the coding of delay(1) has only successful computations on the empty set. the first step of any such computation corresponds to the execution of a telld(t) or naskd(t) primitive on the empty set and thus is not a temporal step. any computation can be represented as follow.



the third observation is about the delay primitives appearing in the coding. none of the j1,..., jl> 0 can have 1 as value. indeed, if jj= 1, in view of our second observation, the coding of the agent telli(t);(naski(t)+ naski+1(t)) accepts the following derivation



other related proposals for the introduction of time in coordination-like languages are and. both pieces of work concern concurrent constraint languages(), which may be viewed as a variant of linda restricted to two communication primitives putting information in a tuple space and checking the presence of information in it. technically, concurrent constraint languages can thus be viewed as the language l({ask, tell}). the paper introduces time in this context by identifying quiescent points in the computation where no new information is introduced and by providing an operator for delaying computations by one unit. at each quiescent point in time, the tuple space is reinitialized to an empty content. the paper extends this framework, on the one hand, by introducing a primitive for checking the absence of information and reacting on this absence during the same unit of time and, on the other hand, by generalizing the delay(1) mechanism in a hence a construct which states that a holds at every instant after the considered time.



de boer, gabbrielli, and meo have presented in a timed interpretation of concurrent languages by fixing the time needed for the execution of parallel tell and ask operations as one unit and by interpreting action prefixing as the next operator. a delay mechanism is presented in oz(), a language which combines object oriented features with symbolic computation and constraints, and,(relative) time-outs have been introduced in tspaces() and javaspaces(). a formal semantics of these time-outs and other mechanisms, different from our expressiveness study, is presented in.



another piece of work on the expressiveness of timed constraint systems is. there, various extensions of the tcc languages have been studied: extension with replication and recursive procedures with static scoping. decidability results are proved as well as several encodings, which are however not of the form of modular embeddings studied in this paper.



finally, investigates the impact of various mechanisms for expired data collection on the expressiveness of coordination systems. however, the study is based on random access machines, on ordered and unordered tells of timed data and on decidability results. in contrast, we study a richer class of mechanisms and foccus on modular embeddings.



