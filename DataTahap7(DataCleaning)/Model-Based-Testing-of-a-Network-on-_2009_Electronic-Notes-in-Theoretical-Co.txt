we discuss the problem of model based test case generation and that of automatic testing of a component of an asynchronous network-on-chip(noc). we start with a model of the component in b action system, which is a state based formalism based on action systems and the b method. we construct a finite state space graph by executing the model, and next, generate a test driver from the abstract test cases. this test driver can be used to test a matching implementation automatically. the important contribution of our work is that we consider hierarchical models for test case generation and automatic testing, whereas the previous approaches considered flat models. in addition, we also highlight the issue due to non-determinism in hierarchical models.



along with operations which modify the state. b action systems[7,31], the modeling notation of this paper, is a state based formalism based on action systems and the b method. note that a model in b action systems is a valid model within the b method; therefore, tool support for the b method[9,5,18] can be used to analyze models in b action systems. the existing model based testing approaches[4,24] to handle b models consider only flat models; i.e. models without any hierarchy. hierarchy plays an important role in modular design and modular implementations. hierarchy also provides a natural mechanism for parallel and distributed design. in addition, refinements in b method may also introduce hierarchy.



the organization of this article is as follows. section 2 discusses the related work. in section 3, we present a short introduction to the b action systems and then discuss the model of a noc component. section 4 presents the problem that we address in this paper. section 5 discusses the test generation procedure. in section 6, we outline a solution to the problem of non-determinism. in section 7, we present an analysis of our approach. finally, section 8 concludes this paper.



operation instances are created as the number of valid disjuncts in the dnf. an attempt is then made to create a finite state automaton(fsa) in which each node represents a possible machine state and an edge represents an application of an operation instance. test cases are then generated by traversing the fsa.



the bz testing tool(bz-tt) and the protest approach also partition the operation input space in a manner similar to the method of dick and faivre. both methods also use variants of the dick and faivre technique to generate test cases. in addition, both consider flat b models.



hamon et al. have used model checking to generate test cases from models in the sal formal language. keeping a coverage criterion in mind, the sal model is so instrumented with trap variables that reachability of a trap variable implies reachability of a model element; reachable traces then become the test cases. although there is considerable amount of work on formal methods applied to noc system design[32,26,29], to the best of our knowledge, there is hardly any if its guard evaluates to true. as regards to the behaviour of the action system[3,19], the initialization statement is executed first, and thereafter as long as there are enabled actions, one of the enabled actions is selected non-deterministically for execution. when there are no enabled actions, the system terminates.



b action systems can be composed to model parallel systems[7,20]. structuring mechanisms such as sees, includes and promotes can be used to express b action systems as a composition of subsystems. the sees-mechanism allows read access to the seeing system. the includes-mechanism allows write access to the variables of the included system. actions of the included system can also be made available by promoting them into the including system within a promotes-clause. the structuring mechanisms provide an efficient way to model system hierarchy.



finally, four instances of this router(a.router, b.router, c.router and d.router) were composed into a controlling system named m odule abcd which controlled the data distribution between the routers. in order to do so, some of the global interface procedures of pushchannel were promoted to the interface of the



refer to the test driver shown in appendix a. this java program has a manual part and an automatic part. the automatic part is generated automatically by the test driver generator. everything cannot be generated automatically because in that case, we must have knowledge of the signatures of the class constructors even before the code is written. in the manual part essentially the global objects are created. these issues have been discussed in. here, we have considered automatic testing of a single test case. the same can be repeated for the remaining test cases.



the bas model of the router component has altogether 23 operations. all such operations were covered by the eight test cases. note here that, we have considered a simple testing criterion. for a complex test criterion, achieving full coverage could be a challenging task.



in this paper, we have considered models in bas which can be hierarchical. previous works[4,24] considered only flat b models. for our testing approach to succeed, we expect that the implementer must not deviate from the structure of the test template derived from the bas. this means the implementer must preserve the hierarchy and the action(and procedure) signatures; in addition, the recommendations associated with a promoted operation must also be preserved. furthermore, the implementation must have the probe operations with matching signatures. note that the implementation is treated as a black box.



following the principle of the b method, one would expect that the development process is completely formal and then no testing will be necessary. however, it is not the case that a formal refinement process is always followed. in many cases, the specification and possibly the first few refinements undergo the formal refinement process and for the rest, model based testing is recommended. moreover, sometimes model based testing is recommended before performing any refinement proof between the abstract and refined models. for testing purposes, we can view the refined model as the implementation. this activity can potentially cut down the time for performing proofs considerably.



functional test cases can also be generated by using model checking. prob tool can generate a finite state space of the hierarchical b model. a test criterion like state or transition coverage can mean reachability of the state or transition; trap variables can be attached to the state or transition, and reachability of the trap variables means satisfying a ltl formula. next ltl model checking can be used to find an appropriate trace which can be used as a test case.



