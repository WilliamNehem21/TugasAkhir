after adopting a standard format such as gxl to exchange graphs of artifacts for reverse engineering tools, the next logical step is to define an appropriate schema for the information contained in the graphs. various researchers have developed schemas, but in practice, it is still hard to choose an existing one. typically, researchers end up needing to implement new schemas for the particulars of their tools or case studies. in the paper, we discuss a potential scenario for integrating schemas, with the aim of improving the interoperability among reverse engineering tools.



some research work has been made to establish a standard schema for c/c++. ferenc et al. explored building a standard schema for c/c++ at the abstract syntax tree level. three types of issues were analyzed in the datrix and columbus schemas: the lexical, the syntactic, and the semantic structure. the authors concluded that creating a standard schema for c/c++ is a complex problem, which produces many difficulties. dean and holt proposed a technique to combine two schemas to create a fact extractor.



cording to certain schemas, or due to missing elements that were of interest). thus, we had to develop a new schema for c/c++ to be used with the rigi reverse engineering tool. preferably, we would rather spend more time in the analysis of the software system than in writing a fact extractor and its schema. we discuss the challenge and benefits of integrating existing schemas in section 2. section 4 describes in detail an example of integrating two given schemas. section 3 describes the structuring of schemas in the reverse engineering domain. section 5 presents our conclusions about this work, and



by having easier information exchange and methods to integrate data from diverse, complementary tools, users can form the best tool for the task at hand. beyond having a common exchange format, it is necessary also to ensure that the exchanged information conforms to common, agreed semantics. the idea of integrating schemas comes naturally, but it is a significant challenge.



there are many schemas in the reverse engineering domain. since they were developed independently, they have different structures and use different terminology for the entities, relationships, or attributes. some of these differences identify the same thing, but are expressed in other words. thus, we need to identify the logically common parts between these schemas. this process is called schema matching, and tries to produce a mapping between the elements of the two schemas that match semantically to each other. after this, we can view integrating the two schemas as a union of the two schemas, taking into consideration only once the elements discovered in the schema matching process.



the schema integration problem is very old, but it is still not completely solved. it has been investigated in the database field since the early 1980s. also, this problem is found in the artificial intelligence domain when integrating independently developed ontologies into a single ontology.



jin et al. proposed a solution for transparent interoperability among reverse engineering tools. they defined a special adapter to deal with a domain ontology, which translates and filters the queries in a conceptual unification, making integration possible. this is similar to creating a common intermediate language for all the reverse engineering tools. the more comprehensive the ontology is, the more chances to obtain a good integration.



rahm and bernstein produced a survey of the existing approaches to automatic schema matching. they produced a taxonomy based on different criteria for the matches. they released an algorithm for general schema matching, called cupid, that includes automated linguistic-based matching. cupid is based on the elements of the schema, as well as the structure of the schema.



madhavan et al. proposed a novel approach for matching schemas. the idea of this approach was to extract knowledge from past matching of schemas, and apply this knowledge to match new schemas. schemas and mappings are added to the mapping knowledge base continually.



two interesting classifications were presented by jin et al.. for categorizing the schemas, they considered the definition of schema(how the schema is defined, implicit or explicit) and the locality of schema(where the schema is defined, internal or external).



the subcategories contain schemas or integrated schemas as appropriate. for example, in the object-oriented subcategory, the schemas that reside here depend on what arises in practice from the existing schemas for java, c++, etc., and the tools that deal with these languages.



this section presents an example of integrating two schemas, both intended for c/c++ elements. one of them is cppdm developed by the university of alberta, and the other one is dmm developed by the university of ottawa. first, we introduce the two schemas and then we present their integration.



the aim of creating an integrated schema is to use it for integrating the data from different fact extractors. for example, if we have a software system that contains elements of c and tcl, we might extract the facts separately for each language using the appropriate extractor, and store in two different repositories. each repository conforms to its schema, for c and tcl respectively. for data integration, we have to maintain the rules for mapping the elements from the initial schemas to the elements of the resulting schema. these rules may involve filtering data from each repository, or transforming the data as needed to conform to the new schema.



we provide an example of building attributes for the class entity in the new schema. the attributes for the cppdm class entity are file, lineno, position and template. for the same entity in dmm the single attribute is issubclassable. the set of the attributes for the class entity in the new schema is then: file, lineno, position, template, and issubclassable.



in this paper, we have outlined the need for integrating schemas for reverse engineering, and illustrated a process for integrating two given schemas. as future work, additional case studies are needed to apply the process for integrating schemas in reverse engineering. also, we need to refine the derived transformation rules and their relationship to the data integration process. another need is an approach for further changes of the integrated schema to enhance its reuse for a particular reverse engineering purpose.



