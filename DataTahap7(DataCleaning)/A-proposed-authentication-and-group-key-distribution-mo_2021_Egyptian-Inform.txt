in the virtual world, the authentication process is used to prove the identity for both of the server and the clients. therefore, the authentication is an urgent issue for sharing data between users in the data warehouse systems. this paper presents the enhancement of data warehouse signature(dws) framework through proposing a novel authentication and group-key distribution model, based on the modular symmetric polynomials, to distribute a secure group-key between the manager and the chosen executors. to the best of our knowledge, we are the first to propose a group-key based on the symmetric polynomial middleware. the proposed model has the lowest cost of computation, communication and complexity overheads among the existing security models. additionally, security analysis shows that the proposed model achieves the key security, prevents insider and outsider attacks, and provides forward and backward secrecy.



a data warehouse(dw) is a collection of integrated different data sources used to support decision-making processes. for this reason, there are a set of challenges associated with building data warehouses. these challenges are data quality, understanding data, testing, performance, designing the dw, cost, and security and privacy concerns. thus, it is necessary to consider data security in the dws. the dw contains a huge amount of business and financial data that is considered as the main goal for hackers. therefore, it is important to keep these data in a secure state. for data security, there are mainly three security issues: confidentiality, integrity, and availability known by the acronym cia. these are the main topics used in the practical dw field. many manager chooses a group of executors to be used in encrypting the blocks in parallel in order to save the encryption time. the manager sends these blocks along with the shared key(ksk), used with the aes encryption algorithm, to the executors. however, regarding the above dws framework communication, all transmitted blocks along with the key, ksk, are sent in a clear-text, which in turn is a chance for any intermediate attacker to intercept the data before encrypting it. on one hand, the problem of sending the data blocks in a clear-text may be solved by compressing the qrt and dividing it to blocks, then keeping some blocks at the owner(dwserver/client)(i.e., the owner is working as one of the executors). therefore, the attacker could not be able to identify the



in this paper, the problem of sending the shared key(ksk) of encryption algorithm in a clear-text is solved by proposing a novel authentication and group-key distribution model. the goal of the model is to mutually authenticate the manager and the executors. also, it generates a secure group-key among the manager and the chosen executors to encrypt/decrypt the data. specifically, the contribution of this paper is in three folds:



in the performance evaluation, the implementation of dws achieves the high performance using the parallel computing through the vml middleware connecting 12 nodes, owner(dwserver/client), manager, and 10 executors. this middleware is developed on alchemi.net framework to increase the security among the network nodes through the proposed model.



the rest of this paper is organized as follows. section 2 reviews the related work. section 3 presents some preliminaries. the system model is described in section 4. in section 5, an authentication and group-key distribution model is proposed. section 6



second, for pseudorandom generator based polynomial functions, in, they propose a polynomial-based key management scheme in which the group controller generates the polynomial function using the pseudorandom number and broadcasts it to all the members to calculate the group key. although the scheme reduces storage and communication overheads, it does not support the authentication method. in, a group key distribution scheme is proposed based on identity based broadcast encryption(ibbe) and bilinear maps as mathematical polynomial function. it randomly generates the public security parameters and the encapsulation header to establish the group key. this scheme achieves the confidentiality for group key using encryption with efficient time. but, it needs a large size of storage for many public parameters. in, the authors proposed a key distribution scheme in hierarchical structure using elliptic curve as a polynomial function of differential cryptography. they generate the group key by using a pseudorandom number and substituting it in an elliptic curve function. this approach ensures that the key collision is infeasible through using the elliptic curve function. however, this approach does not support the dynamic system for updating the key and it has a high computation overhead.



blocks, to become qrt to be sent into the owner(client). in the traditional systems, the security processes are executed serially. however, the serial execution leads to network overhead and query response timed-out. in the dws framework, executing the security processes on a query result of a huge number of records as blocks using parallel computing saves more time than serial computing.



ensuring the security issues, cia was the first consideration in the dws framework at the two models(dwsend and dwreceive). the assumption of the vml middleware is worked in isolated and trusted network has not been supported by some dw organizations. enhancing the dws framework is a must in order to protect the transmitted data of the qrt. in the dws, the data of qrt was sent as a clear text to the executors in the vml middleware. to increase the security in the dws approach, the data will be sent as ambiguous data to the executors. therefore, in the dwsend model, the owner(dwserver) will compress the qrt before man-in-the middle attack. also, the proposed model will generate a group key employed to encrypt the key(ksk) of the aes encryption algorithm. thus, the ksk is not sent as clear to the executors. this enhancement in the dws also prevents any attacker to get the complete compressed blocks by keeping one block at the owner without sending it. finally, in dws implementation, we have enhanced the vml middleware supported by alchemi.net desktop enterprise in order to implement the proposed authentication and group-key distribution model.



key to recover the shared key of aes algorithm. then, these executors can encrypt/decrypt the data of the cqrt by ksk. thus, the authentication and group-key distribution algorithm solves the problem of sending the shared key(ksk) in a clear-text.



in dwreceive model, the owner(client) gets the encrypted compressed qrt with its hash code from the dwserver. then,this owner divides it into a number of encrypted compressed blocks. these blocks are sent to the vml middleware while keeping the last block. in this middleware, the manager schedules and sends those blocks to the chosen executors in a load balance way. each of the chosen executors performs two processes, hash computing process and decryption process on its block. then, the owner compares between the two hash codes(received and computed). if the two hash codes are the same, the owner performs a decompression process to obtain the qrt.



time in the collection, although the transmission time for these blocks is a small. second, dividing the qrt to large blocks(fewer executors) takes a little time in the collection, although the transmission time is a lot. therefore, the load balance for the number of executors solves these challenges of time factors.



attacker a could eavesdrop the communicated messages between the manager and the executors. however, those messages are encrypted using the manager public key, pkm and the nonce1, nonce2 as symmetric keys. additionally, the group key is never sent inside the encrypted messages, instead, the evaluated symmetric polynomial function is sent. however, according to theorem2, even if the attacker knows the polynomial function, they are still could not able to identify the key. therefore, the confidentiality of the key is achieved.



the executors who are chosen from the manager. however, the shared executors would never know each other, because every executor receives different modular value, mi, where i is the number of executors. therefore, the colluded executors need to try all possible combination of the shared executors together. so, the



the encryption process and the hash computing process on their cbos in a parallel computing. therefore, the enhancement of dws has achieved the high performance as presented in the experimental results. generally, the high performance reaches limited values when the number of executors increase, as a result of using the time factors with the parallel computing. additionally, the proposed model achieves the key freshness, confidentiality, and authentication. it also thwarts the insider and outsider attackers



in the future, the proposed model is aimed to be extended to create an owner certificate. this certificate is needed to get the authorization services through the vml middleware. in addition, we will protect the data stored in the manager, including the group key, from any possible attack on that manger. moreover, a migration from the parallel computing to the cloud computing will be applied to our secure dws framework along with the proposed authentication and group-key distribution model. with a cloud computing, an increase is expected in the performance of the dws, comparing with that implemented in the parallel computing.



