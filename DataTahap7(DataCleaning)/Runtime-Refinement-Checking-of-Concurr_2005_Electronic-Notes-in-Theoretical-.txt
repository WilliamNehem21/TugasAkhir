we use state transition systems to give semantics to the implementations and specifications of concurrent data structures. section 2 formalizes state transition systems and our notion of refinement. we illustrate our runtime verification technique on a concurrent implementation of a multiset described in section 3. sections 4 and 5 present our technique for checking refinement at runtime. we discuss related work in section 6 and conclude in section 7.



we focus on concurrently accessible implementations of data structures written in object-oriented languages. the data structure makes available a number of operations each of which is implemented as a method. when it is necessary to distinguish these methods from methods only internally accessible by the data structure, we refer to them as public methods. several application threads can issue calls to methods concurrently and portions of method executions can be interleaved for better performance. throughout this paper, the domain tid represents the set of thread identifiers. tid is the union of two disjoint sets, tid app and tid ds. the set tid app contains identifiers of applications threads that call the public methods provided by the data structure. the set tid ds contains identifiers of worker threads in the implementation used to perform tasks internal to the data structure.



t performs an action until the corresponding return action(t, return, name, rets) has occurred. thus, every atomic run is a concatenation of fragments of the run, such that only one application thread performs actions in any particular fragment. each fragment begins with a call action by an application thread t and ends with the corresponding return action by thread t. a state transition system is atomic if all of its runs are atomic.



the call action at the beginning and the return action at the end of a fragment form the signature of the fragment. an atomic state transition system is deterministic if whenever two fragments of any two runs have the same first state and the same signature, they have the same last state as well. thus, every trace of an atomic and deterministic state transition system is produced by a unique run.



ure 2), which looks for an available slot in the array for a single element x. if findslot finds an available slot, it reserves it by setting its content to x and returns its index. if no slot is available, it returns 0.



observe that, for the insertpair method, the method call action, the commit action and the return action may have an arbitrary number of interleaved actions by other application threads separating them. thus, a witness interleaving based on the ordering of method call or return transactions would be in error. a complete proof, based on commit actions, of the fact that the multiset implementation i/o refines its specification is provided in the appendix.



annotating the implementation with commit points is extra effort for the programmer. the reward for this effort is the capability to perform runtime checking of refinement efficiently. in addition, the process of analyzing the implementation using these terms may itself expose design flaws and result in a better design, even before runtime verification is used. our experience with



many concurrent data structures used in distributed systems, such as the boxwood project, implement similar logs to restore system state reliably in case of a crash. with some modifications, the logging mechanisms in such systems can be reused for the purpose of verification. further, the fact that such systems tolerate the interference caused by a logging mechanism for recovery is evidence that the impact of logging for the purpose of verification may also be tolerable.



failure as return values, the runtime checks for i/o refinement would pass trivially. for useful checking, the test program must perform a number of calls to lookup. but introducing a large number of calls to lookup might not be desirable, as the concurrency characteristics of the program under this workload may be significantly different from regular use. even if the test program did perform calls to lookup, these calls may not get scheduled at the most interesting points in the execution. i/o refinement as a correctness criterion is thorough enough for static checking but needs to be strenghtened for runtime checking.



observe that lock acquisitions and releases must also be logged to compute view in this case. with the addition of the auxiliary variable m to the implementation, we get useful checking even with a test program that has no calls to lookup. now the refinement checking ensures that the implementation updates m in the same fashion as the specification. note that the return value of any lookup operation is uniquely determined by the value of m at the



this stronger correctness criterion is more likely to expose errors and provide early warnings as the following example demonstrates. consider a version of the multiset data structure that also supports a remove operation. suppose that a thread in the test program inserts an element a into the multiset twice, but, because of an error in the implementation, only the first a gets inserted into the array a. to expose the error through testing or i/o refinement checking alone, we need an execution that inserts a twice, followed by a removal of a, followed by a lookup of a. the probability of generating such an execution would be low. even if such a test scenario were exercised, if the insert operations, the remove operation, and the lookup operation were separated from each other by large number of other method calls, then it would be difficult to locate the soucrce of the discrepancy. the use of m in the multiset will detect this error immediately after the attempt to insert the second copy of a.



represented by view. in this scenarion, view is used as a device to extract a canonical representation of the data structure state from the specification as well as the implementation. such a device is useful if the specification itself contains detail in addition to the abstract view of the data structure state. additional detail of this kind may make writing a specification easier. for instance, in the b-link data structure implemented by boxwood, an indexing structure is needed to be able to update the data stored in the specification state. however, the indexing structure is not part of the abstract view of the data structure state.



intrumentation of the updates to implementation variables introduces more computational overhead and possibly effects the concurrency characteristics of the implementation more than checking i/o refinement only. for this reason, it may be necessary to perform performance optimizations in the logging process. for instance, if it can be proven that inside the body of a method a code block has exclusive modify access to a set of variables v, then the entire update to the set can be written as a single entry to the log. in the actual execution, other updates to other implementation variables may have been interleaved with updates to v. however, the exclusive modify access guarantees that the interleaving does not interfere with the modifications entered into the log. in particular, at each commit point, the values of the variables obtained using this logging method are the same as they would have been without this optimization.



we provide an execution of the multiset implementation that is not linearizable. consider an implementation with an array a of size two, and two application threads t1 and t2, concurrently invoking the insertpair method. for the following interleaving of threads, both calls to insertpair fail.



run-time checking of refinement promises to be a powerful verification approach with reasonable computational cost. in this paper, we investigated two notions of refinement and techniques for checking them. we are in the process of applying these techniques to an industrial software design.



proof. given an execution of the implementation, let us define a commit action for each method call. for calls to insertpair that succeed, the commit action corresponds to line 12. for calls to insertpair that fail, we define the commit action to be the call action to insertpair. in this latter case, there are many other possible choices since failing calls to insertpair do not modify the data structure state.



