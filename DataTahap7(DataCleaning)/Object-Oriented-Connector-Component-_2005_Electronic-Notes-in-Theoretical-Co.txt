the paper is organized as follows. in section 2 we start with a small case study for an object-oriented component architecture. this is an explicit example of the advanced generic architecture framework presented in section 3. based on that, we define the semantics of connector architectures in section 4. the main result in section 4 shows existence and uniqueness of architecture semantics, which is based on compatibility of component composition in section 3, within the extended framework allowing overlapping connector interfaces. section 5 then presents the instantiation of the generic framework to uml diagrams, which is the concrete framework for our case study in section 2. in section 6 we conclude with a brief discussion of related work and an outlook to future research.



in this section we will model a small case study concerning the management of meta data using an object-oriented connector-component architecture based on uml. the corresponding architecture framework for uml is an instantiation of the generic framework for architectures presented in sections 3 and 4. this instantiation will be described in more detail in section 5.



the system shall be able to exchange the data of arbitrary topic maps via the http protocol(see). this way it shall be possible to share the data on one hand in a server based fashion, where a powerful web server processes the queries of lots of clients, and on the other hand in a peer-to-peer fashion, where clients exchange data directly. as exchange format the standardized xml transfer syntax for topic maps shall be applied.



the<<architecture>> packages in this abstract view correspond to the architecture graphs of our generic framework in section 3. the components are ontology, server, and manager representing the three main areas of requirements. they are connected via the connectors srvsrc between server and the data model in ontology and manont between manager and the domain ontology in ontology.



by a uml class diagram. additionally two methods are declared which will be used by the server component below. the first method getbyidentifier of topicmap takes a uri as parameter and returns a topic containing the given uri as identifier if it exists. this is specified by the ocl constraint for the method. the second method serialize of topic shall return an xtm



<<transform>> dependency, between impsource and expdatamodel renaming the class datasource with the method getbyuri to the class topicmap with method getbyidentifier and the class resource to topic(the method serialize is not renamed). the renamed model is included in expdatamodel. the connection consrv to the export of the server component will be described in the next paragraph.



next, we carry the concept of overlapping connector interfaces forward to whole architectures of components and connectors. similarly to connectors we obtain an architecture diagram and an architecture graph. the first describes the architecture at the level of specifications and the second as a graph, where nodes are connectors or components.



definition 3.7(architecture graph) an architecture graph ga for an architecture diagram da is obtained by shrinking each connector diagram in da to the corresponding connector graph. hence, it consists of nodes labeled by the connectors and components and arrows in between labeled with the corresponding connection transformations.



in the following we consider the special case of binary connectors and components with two export interfaces each. the proof of this special case shows how to use the extension and the parallel extension property and can be extended without problems to the general case of theorem 3.10 which is needed in the proof of theorem 4.5.



in this section we will show, how the abstract connector framework can be applied to uml diagrams. in this paper, we regard only the concrete graphical representation of uml diagrams on a more or less intuitive level. this implies that also our instantiation can be given only on an intuitive level. in later stages of our research we want to deal with the corresponding meta-model instances as formal abstract syntax, which would enable us to give a much more detailed definition of connector architectures for uml diagrams. moreover, we could respect the syntactical dependencies between different diagrams, e. g. the case that a state machine refers to a certain method defined in the class diagram, which are documented in the uml meta-model instances.



means for example, that an attribute number: nat of cd may be translated to an attribute number: int, if all other occurrences of number: nat in the class diagram cd are translated to number: int. of course, the images of the classes are allowed to have additional functionality with respect to their preimage. all connections between classes have to be transformed to corresponding connections of the same type, e. g. associations have to be mapped to associations. again we allow a renaming of the inscriptions of the connections.



to translate the labels of the interactions in the diagram. the second step is to replace lifelines by disjoint sets of lifelines(including the given lifeline) and interactions(l, m, l')(where l and l' are lifelines and m is a message sent from l to l') by sets of diagrams involving only the lifelines included in the refinements of l and l'. finally, each diagram in sd must be included in a diagram in sd'.



part of cd and thus, embedded by e. this may cause ill formed class relations since their targets might have been removed. the well-formedness is restored in cd', since the loose ends of the class relations are connected to the tcd images of the deleted classes.



proof idea. the construction of extension and parallel extension diagrams has been discussed already above. it remains to show the properties. first of all, all embeddings preserve the type of the diagram elements and they do not change any inscriptions. hence, they are special cases of the defined transfor-



the approach in this paper is based on an intuitive graphical representation of uml diagrams. in future work we want to deal with the corresponding meta-model instances as formal abstract syntax, which would allow a much more detailed discussion of the instantiation, and we will also consider more general notions of transformations and embeddings. moreover, it is possible to consider other uml techniques. especially with respect to the example in section 2 it seems sensible to include uml profiles to the components. ontologies could then be modeled as class hierarchies with respect to an ontology profile. on the other hand profiles could also be used for platform specific implementation models.



