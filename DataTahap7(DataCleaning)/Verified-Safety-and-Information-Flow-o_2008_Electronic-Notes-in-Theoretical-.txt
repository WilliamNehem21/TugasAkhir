guage in higher-order logic using monads, reasoning about the embedded programs, and connecting those programs to an implementation. the work presents a modified formalization of non-interference more suited to programs with non-inverted control flow and weakened to allow for timing variations. finally, it suggests a few areas where tool improvements could help future efforts of similar nature.



another issue with modeling system software is that higher-order logic functions are total, while most system software does not terminate. the program transformations mentioned in section 7(informally) transform the interactive program into a terminating reaction function surrounded by a single outermost non-terminating reaction loop. this terminating reaction function, step, then formally models the software component as a transition system.



for input buffers an oracle function determines the value of the input. the question, however, is choosing the parameter of the input oracle. on what do the input bytes depend? they actually depend on the other processes, including what those other processes have read from the block access controller. modeling all of those factors in detail would be inconvenient at best. instead, a byte read is a function of the memory page being read, the offset within that page, and some notion of time. what is an appropriate notion of time? in a small step operational semantics, the number of reductions could model time. this is unnecessary since the amount



the main issue in modeling hard disks is the asynchronous nature of dma. while using synchronous disk operations would have greatly simplified the system, the performance would likely suffer unacceptably. dma, like shared memory interprocess communication, must be modeled with care in order to reason about the interleaved concurrent actions at a granularity coarser than individual memory bus cycles. the key idea is that as long as nobody is looking, the extent to which the dma transfer completed so far remains irrelevant. the two primitive non-proper morphisms for reading a byte from a dma buffer and for writing a byte to a dma buffer both check if any disk is currently using that buffer for a dma transfer. if so, the operation transitions to the unspecified error state.



monadic setting) offers a cleaner alternative to disjunctive invariants. a disjunctive invariant is typically applied uniformly throughout the program, but the first conjunct of each disjunct serves as a guard based on an encoding of the control flow as a data value. they often have a form similar to the following.



tioned by chen and hudak. specifically, the state representation inside the monadic datatype contains references to values passed in from the outside. 2 since the interface to the monadic datatype fails to enforce linearity, the operations do not model an imperative implementation. transforming the interface eliminates this difficulty.



while proving that a model of a system enforces a desired policy eliminates certain design flaws, it does not guarantee that a deployed implementation behaves accordingly. for this, the implementation must correspond to the model of the program and the library code must properly implement the primitive monadic effects. this section describes the connection between the model and the source code. section 10 discusses the primitives.



the experience with this project was overall quite positive, but room for improvement remains. the integration between the testing and verification tools could have been tighter. model to implementation correspondence issues remain. finally, this section suggests a research challenge in modeling reactive systems.



