verification techniques that allow to conclude this from the functionality and security properties of the components. such guarantees are in particular necessary when the different components in the system can communicate and collaborate with each other. in the context of mobile code, development of a compositional verification techniques becomes even more pertinent, because here new applications can be downloaded post-issuance on a running system.



section 2 gives a short overview of our earlier results, in particular the program structure and behaviour, the logic and the definition of maximal model. it also introduces useful notations. section 3 defines the translation from behavioural modal simulation logic formulae to structural formulae, and proves its correctness. section 4 proves soundness and completeness of a compositional verification principle for behavioural properties without disjunctions, provided the local assumptions are described by behavioural modal simulation logic. finally, section 5 gives conclusions and discusses future work.



we use a subset of modal logic as our specification language. in our work on compositional verification, we exploited that formulae in this logic, extended with greatest fixed-points can be characterised by simulation, and vice versa; therefore we call that logic simulation logic. the subset of simulation logic that we consider in this paper is modal simulation logic. throughout, we fix a set of labels l and a set of atomic propositions a.



since we abstract away from all data, applet structure is defined as a collection of call graphs for the methods that the applet implements. let meth be a countably infinite set of method names. a method specification is an instance of the general notion of specification.



notice that method specifications allow return points to have outgoing edges. however, the characterisation of behavioural properties by a set of structural formulae defined later is only correct if the applet has no outgoing edges in return nodes; such applets are referred to as clean. we define a unary operation of cleaning returning a clean applet having the same behaviour.



thus, cleaning is idempotent and preserves behavioural properties. and any state that is a return point, trivially satisfies any box formula at the structural level. below, in the correctness proof of the characterisation, we will define a notion of reachability(the set of nodes that can be reached by a behaviour), and we will use that on clean applets this coincides with the satisfaction of box formulae.



for our subset modal simulation logic, we can only prove soundness of this rule. to establish completeness for full simulation logic, we use that every model can be characterised with a characteristic formula. but, since specifications can contain loops, the availability of greatest fixed-points is essential here.



this paper describes a translation from behavioural to structural properties. the translation is defined for so-called modal simulation logic, which corresponds to modal logic with box modalities only. in earlier work, we defined a compositional verification principle where local properties have to be structural properties. based on this principle, we developed a compositional verification method, provided machine support by means of a tool set, and evaluated the practical applicability of the method on an industrial case study. by having a translation from behavioural to structural properties, we extend the compositional verification principle to behavioural properties. the translation proceeds by symbolic execution of the behavioural formula: each modality in this formula gives rise to a constraint on the structures that satisfy the behavioural formula. it has been implemented in ocaml and included in the tool set.



