the latest ocl 2.0 proposal provides two semantic descriptions, i.e., a metamodel-based semantics that uses uml itself to associate the semantic domain with the language concepts and a formal semantics based on a set-theoretic approach called object model. unfortunately, these two semantics are currently neither consistent nor complete, as(a) the formal semantics does not consider the newly introduced concept of ocl messages and(b) both semantics lack an integration of statecharts and a semantic definition of state-related operations.



this article focuses on a formal semantics for ocl messages as a foundation for consistency among the two ocl semantics. we extend object models and present an extended definition of a system state that comprises all relevant information to be able to evaluate ocl expressions also w.r.t. ocl messages.



in the remainder of this article, a particular instantiation of an object model is called a system. a system is in different states as it changes over time, i.e., the(number of) objects, their attribute values, and other characteristics change during execution of the system. in the ocl 2.0 proposal, a system state



however, the formal semantics provided in the ocl 2.0 proposal is not complete, as it is not possible with the information given by a system state to reason about currently activated statechart states or messages that have been sent. thus, it is not possible to provide a formal semantics for state-related operations and operations on ocl messages.



the concept of ocl messages has been newly introduced in the ocl 2.0 proposal to specify behavioral constraints over messages sent by objects. it is based on work presented in[7,8]. basically, an ocl message refers to a signal sent or a(synchronous or asynchronous) operation called. while signals sent are asynchronous by nature and the calling object simply continues its execution, synchronous operation calls make the invoking operation wait for a return value. in contrast, an asynchronous operation call is like sending a signal, such that a potential return value is simply discarded. for more details about messaging actions, see the action semantics of uml 1.5[9, section 2.24]. note here that the uml action semantics also define broadcast signal actions, while a corresponding kind of ocl message is not yet defined.



to check whether a message has been sent, the hassent operator^ can be used, e.g., the expression targetobj^setvalue(17) results in true iff a message setvalue(17) has been sent to targetobj during execution of the considered operation. more examples can be found in[6, section 2.7.3].



subsection 3.1 explains the syntactical elements of extended object models. in subsection 3.2, we then present an extended version of system states. this extension enables us to give a semantics to message-related operations that could so far not formally be defined.



note that we do not further describe the tuple components of extended object models here. for more details on sets class, att, op, and assoc, readers are referred to the corresponding sources[6,10]. we also omit the formal syntax definitions for signals and statecharts and refer to for further details.



additional runtime information has to be taken into account to be able to evaluate expressions that access ocl messages. this mainly concerns the currently executed operations and the histories of signals and messages sent. this relates to the local snapshots defined in the metamodel-based semantics for ocl 2.0[6, section 5.2].



note that this identity is not quite correctly treated in the ocl 2.0 proposal, as the definition of oclmessageexpcs says that the number of messages sent to the target object is exactly= 1(instead of> 0)[6, section 4.3].



and an additional function to capture free variables. the set post-expr of valid ocl postcondition expressions is defined in the same way as expr, but with additional rules for allowing operation oclisn ew(), operator@pre, and a predefined result variable named result[6, section a.3.2.2].



based upon our previous work that already captures statecharts and staterelated operations, we presented further extensions to object models and system states, such that a formal semantics for ocl messages and corresponding operators and operations could be given. this article is therefore to be seen as a direct contribution to the finalization process of ocl 2.0.



for ocl messages, we used explicit call identifiers to distinguish messages sent from source objects to target objects. when returning from a synchronous operation call, this identifier can be used to update the corresponding parameter values. this is an abstraction from the uml semantics that assumes that a specific reply object is generated and sent[9, section 2.24].



