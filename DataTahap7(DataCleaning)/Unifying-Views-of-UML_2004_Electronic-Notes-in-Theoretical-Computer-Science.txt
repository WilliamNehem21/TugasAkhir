ming language. as the real world keeps changing, the software system that represents it needs to be continuously maintained and evolved. to develop and maintain such an evolving software system is obviously difficult. a well disciplined process and a good modelling notation are essential to control the activities in constructing and documenting the different models obtained at different stages of the software development. the rational unified process(rup) has emerged as a popular software development process[33,38,31]. as the modelling notation, rup uses uml, which is the de-facto standard modelling language for the development of software in a broad range of application.



section 2 briefly discusses the activities and uml models in rup. we provide a summary of the main ideas of our approach in section 3. section 4 introduces an object-oriented notation that will be used in the proposed formal method. section 5 shows the use of the specification notation in the specification of uml models. instead of going into details of the formalization of uml, we will use a library system as an example to illustrate the treatment of models created in different cycles of the rup. finally, section 6 concludes the paper with a discussion. the discussion on the relationship to existing work is given in section 7.



a formal semantics and it is not expressive enough to describe many useful aspects of object-orientation, such as recursive method call, dynamic binding. in this paper, we will define an object-oriented specification language(ool) that can be used to specify functional behaviour at different levels of abstract. the conceptual model is a class diagram consisting of classes(also called concepts), and associations between classes. a class represents a set of conceptual objects and an association determines how the objects in the associated classes are related in the application domain. the reason why we call the class diagram conceptual at this level is that it is not concerned with what an object does, how it behaves, or how an attribute is represented. the decisions on these issues will be made during the design phase when the responsibilities



after the responsibilities of the objects are decided, the directions of the associations(i.e. navigation and visibility from one object to another) and the methods of the classes can be determined. this will lead to the construction of the design class diagram, which shows the static view of the design, i.e. how the concepts and associations of the conceptual class diagram are realized by software classes.



refinement can also be used to justify steps of incremental design(e.g. those informally used in[33,38]), such as adding attributes, promoting attributes from a subclass to it superclass, encapsulating attributes, delegating functionality of an object to its associated objects, etc. such an integration of the refinement calculus with rup makes the use of the design calculus more effective in an iterative and incremental manner so that only a small model will be treated at each stage of an iteration.



and similarly pro(n) and pub(n). we use attr(n) to denote the union of these three sets of attributes; and for an attribute u of n, we use dcltype(n.u) to denote the type of a and init(n.u) the initial value of u declared in n.



where null represents the special object of the special class null. notice that expressions can appear as arguments of method calls, but we do not allow method call to be an expression as we explicitly use result and val-result parameters in methods. we can include more expression such as type casting(c)e and type test(e is c), but they are not needed in this paper.



visattr: its value is the set of attributes which are visible from inside the current class, i.e. all its declared attributes plus the protected attributes of its superclasses and all public attributes. this value will be modified by the whole declaration of the program and by variable redeclarations.



assignments: there are two cases of assignments. the first is to(re-)attach a value to a variable. this can be done only when the type of the object is consistent with the declared type of the variable. the attachment of values



method call: let v, r and vr be lists of expressions. the command le.m(v, r, vr) assigns the values of the actual parameters v and vr to the formal value and value-result parameters of the method m of the object o that le refers to, and then executes the body of m. after it terminates, the value of the result and value-result parameters of m are passed back to the actual parameters r and vr.



notice that we did not introduce the syntax super.m to explicitly indicate the call to a method according to its definition in the superclass. instead the a method call will be executed according to the definition of method at the lowest position in the inheritance hierarchy. there is no difficulty to introduce super.m and define its semantics accordingly.



the informal identification and description of a use case is important for the creation of the conceptual model to support it. however, the formal specification of the use cases depends on the specification of the conceptual model. we have a canonical form of a use case specification by introducing a use-case handler class 2. at any time during the execution, this class will only have a single instance. considering the use case recordcopy that adds a new copy of an existing publication to the library. we specify this use case by introducing a use case handler class ls(denoting the logic library system):



we can consider registerm independently from recordcopy with its own conceptual model of classes lib, m ember and the association has. we then obtain cm2 by merging this model with cm1. if different names are used for the same concept, rename one to another.



the important nature of the integrated method is that each iteration is only concerned with a small part of the system functionality and a small model at a time. instead of using a traditional compositional approach, we decompose the system informally according to use cases. we obtain formal models in each iteration and compose them to form a larger system step by step. we believe that this is important for scaling up the use of a formal method. a system developed this way is easy to maintain when the business rules change. for example, consider the need to impose the restriction on the use case borrowcopy that a member is only allowed to take a limited number k of loans. we only need to add a method nborrow() method in ls



because our approach supports refinement of models by introducing modelling elements in an incremental manner, it clearly supports the sketch and blueprint modes of uml usage pointed out by martin fowler in his invited talk at<<uml>> 2003. also, our formalization of uml model in a specification in a java-like notation can be seen as a step toward third mode of usage of uml suggested by martin fowler as a programming language. being able to use uml as a programming language is very important for the success of mda[19,6,42].



cavalcanti and naumann define an object-oriented programming language with subtype and polymorphism using predicate transformer[11,45]. mikhajlova and sekerinski design a rich object-oriented language by using a type system and predicate transformers as well. however, neither reference types nor mutual dependency between classes is allowed in those approaches.



in addition, tool support, e.g. in the direction of, for formal objectoriented methods is an area of considerable significance for further industrial take-up of these methods. we are also interested in studying the difference and relationship between our model and separation logic.



first of all, we are very much grateful to the two referees for their careful reading, insight comments and for the technical errors they pointed, that have helped a lot to bring the paper into this revised form. we thank dines bjorner at technical university of denmark, anders ravn from aalborg university of denmark and uday reddy from birmingham university of the uk for their helpful comments and discussions at and after the seminars that the second author gave on parts of the works when he visited them. our unu-iist fellows quan long, bhim upadhyaya and jing yang also read and gave useful comments on earlier versions of the article. the second author would also like to thank the students at the university of leicester and those participants of the unu-iist training schools and courses who took his course on software engineering and system development for their feedback on the understanding of the use-case driven, incremental and iterative oo development and the design patterns.



