the second contribution of this work is to present a formal framework for the cooperation of the algebraic constraints domains fd and r in an improved version of the cflp(d) scheme, now useful for higher-order functional and logic programming on lambda abstractions. as a result, we provide a powerful theoretical framework for higher-order constraint functional logic programming with lambda abstractions and decidable higher-order unification in a new higher-order constraint domain 7, which leads to greater expressivity. as a motivation for the rest of the paper, we present in this section a couple of examples of cprs-programs involving the cooperation of the algebraic constraint domains fd and r to illustrate the different cooperation mechanisms that are supported by our theoretical framework, as well as the benefits resulting from the cooperation in the higher-order functional logic programming setting.



which must go through the data points. in order to apply this technique, our cooperative computation model keeps a store c by means of the execution of an algebraic constraint collect[...] c(similar to the setof predicate in prolog)



in addition to already mentioned works, an important related work in this area is the cflp scheme developed by mircea marin in his phd thesis. this work introduces cflp(d, s, l), a family of languages parameterized by a constraint domain d, a strategy s which defines the cooperation of several constraint solvers over d, and a constraint lazy narrowing calculus l for solving constraints involving functions defined by user given constrained rewrite rules. the main difference with respect to our approach is the lack of declarative(model-theoretic and fixpoint) semantics provided by the rewriting logic underlying our cflp(c) instance(see for more details). another difference with respect to our approach is the intended application domain. the instance of cflp developed by marin combines four solvers over a constraint domain for algebraic symbolic computation.



