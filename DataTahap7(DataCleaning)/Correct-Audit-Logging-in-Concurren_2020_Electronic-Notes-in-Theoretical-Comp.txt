using audit logging along with preventive mechanisms has two major applications: 1) post-execution analysis of audit logs provides a platform to detect security violations based on the logged evidence[60,5]. this class of logging policies rely on the notions of user accountability and deterrence. 2) audit logging is used to detect existing vulnerabilities in the preventive security mechanisms and ameliorate those mechanisms[7,44].



in both of the aforementioned applications, effectiveness of in-depth security relies on the correctness and efficiency of the generated audit log and its after-thefact analysis. audit log correctness and efficiency reflect on some challenges in the generation of audit logs. correct audit logging must record factual information about the runtime behavior, which may be ensured by the verification of auditing policies and their runtime enforcement mechanisms. moreover, a correct audit log must include sufficient information according to what the auditing policy specifies. in addition, efficiency of audit logging must be emphasized in in-depth security in order to improve system performance regarding the collection and analysis of audit logs. efficient audit logging entails to only record necessary information about the computation, rather than naively collecting all events in the log. these issues have been challenging in the wild, for instance resulting in failure to safeguard against data breaches, and are considered as one of the top ten most critical security risks by open web application security project.



the aforementioned line of work relies on the proposed semantic framework for audit log generation whose implementation model is constrained to linear process executions. this limitation, in practice, restricts the application of the framework to systems where a single thread of execution is involved in the generation of audit logs. for instance, in the case study of a medical records system, audit logging capability is considered as an extension to the web server program, and all preconditions for logging depend on the events that transpire in the same program execution thread. as an example consider breaking the glass event. breaking the glass is used in critical situations to bypass access control. by breaking the glass, system policies access to particular patient information is logged as long as the glass is already broken. in order to implement such specifications, we need to apply a timing mechanism that is shared among all processes of the system. each step of concurrent execution of processes updates this universal time.



many applications have been shifting their architecture from a traditional monolithic structure toward service-oriented architecture(soa) in order to boost maintainability, continuous deployment and testing, adaptation to new technologies, system security, fault tolerance, etc. one popular deployment approach to soa is where an application is decomposed to a set of highly collaborative processes, called microservices. a microservice must be minimal, independent, and fine-grained. minimality constrains a microservice to access and manipulate certain data types within an application, ideally a single database per each service. microservice instances run independently in their own containers, virtual machines, or hosts. to accomplish its own goals, a microservice communicates with other microservices of the application through message passing, or remote procedure calls(rpcs). jolie



these assumptions help us to purposefully focus on the essence of logging, i.e., whether logs are generated correctly in the first place and independent of external concerns including reliability of the underlying execution and communication system, latency, etc. which are explored in related work(section 4).



in order to provide a standalone formal presentation, in this section we review the information-algebraic semantics of audit logging and the instantiation of the semantic framework with first-order logic, which is originally proposed by amirmohammadian et al.. we have applied minor modifications to the model to better suit concurrency and nondeterministic runtime behavior, inherent to concurrent systems.



the notion of correct audit logging can be defined based on an execution trace and a logging specification. to this end, the information content of the audit log is compared to the information that the logging specification dictates to be recorded in the log, given the execution trace. the following definition captures this relation.



another related property of the instrumentation algorithm is to ensure that it is deadlock-free, meaning that instrumenting a system does not introduce new states being stuck. one approach to define an independent notion of deadlock-freeness is to consider bisimilar source and target traces. indeed, additional formal constructs must be introduced to translate target traces to source traces for this purpose. our



lastly, definition 2.10 instantiates the combination and focusing operators for the fol-based information algebra. combination is the closure of the union of two sets of formulas. focusing is the closure of the intersection of an information element and a query domain.



in section 3.1, the syntax and semantics of the source system model is introduced. section 3.2 proposes a class of logging specifications that can specify temporal relations among computational events in concurrent systems. section 3.3 describes the syntax and semantics of the systems enhanced with audit logging capabilities. lastly, in section 3.4, we discuss the instrumentation algorithm and the properties it satisfies.



gorithm changes the systems as follows. a new link cpa is established between patient and auth agents. the definition of brkglass is updated as cj(auth)(brkglass)=[brkglassauth(u) callevent(auth, brkglass,[u]).p], and the definition of getmedhist is updated as



another line of work employs logs to record proof of legitimate access to system resources. vaughn et al. propose an architecture based on trusted kernels that rely on such logged proofs. another related work is the a posteriori compliance control system that verifies legitimacy of access after the fact, using a trustbased logical framework that focuses on a limited set of operations. however, our logical framework is used to specify invocation of any arbitrary operation as a precondition to log, or the logging event.



microservices-based approach[17,20] to software deployment is an application of our implementation model, that we aim to study in future in a greater detail. accountability plays a significant role as part of the access control framework in microservices-based systems, including platform-specific monitoring techniques, e.g., in azure kubernetes service. smith et al. have proposed a provenance management system, including provenance logger, for microservices-based applications. camilli et al. have proposed a semantics for microservices based on petri nets. our approach is, however, language-based and relies on process calculi. jolie proven that our algorithm guarantees correct audit logs. this ensures that the instrumented system avoids missing any logging event, as well as logging unnecessary events. correctness of audit logs are defined according to an information-algebraic semantic framework. in this semantic framework, information containment is used to compare the runtime behavior vs. the generated audit log.



another area of interest is to extend the class of logging specifications, and hence implementation models. our current class focuses on function invocations within each agent of the system, and it is limited to horn clauses. while a great percentage of system events can be specified in this class, we need other classes of logging specifications for certain purposes. for example, consider the effect of revoking break-the-glass status for a user on the specification of audit logging requirements. moreover, auditing usually includes the log of message transmissions between specific agents, which is not supported by what we have introduced in this paper.



since our model of concurrency is based on a process calculi, message-passing is used for ipc. this necessitates the exploration of models that study the specification and enforcement of correct audit logging in concurrent environments which handle ipc through alternative approaches, e.g., shared memory and/or files.



