stochastic modelling of computer systems using markov processes and stochastic process algebras, such as pepa, has been hugely successful. it has, amongst other things, led to greater understanding of the systems in question, the ability to predict rare behaviour accurately and helped the engineering of computer systems. the major limiting factor of markovian methods turns out to be the underlying state space. this tends to grow extremely rapidly as more components and/or more component-types are introduced.



an obvious candidate would be work on sde-approximations of heavily loaded queues, since the link between queueing systems and markov processes is very strong. examples can be found in work by many different authors, e.g., and. the common denominator for almost all these approaches is the assumption that the traffic is heavy, which might not always be appropriate for the systems we would like to model.



a more serious problem is that all these models are derived using the structure of the entire system. so there does not seem to be a way of using these derivations to get an sde description of a generic pepa-model. instead, each time we would have to handcraft a model, without any guarantee that it is even possible. this is not satisfactory for our purposes.



as a first example we look at a very simple system going through two phases. one possible interpretation would be a server that alternates between busy and idle. we use the pepa language to write this. for a detailed description of pepa, see, we will only mention the subset of the syntax needed for the paper here. in pepa r4= 15, it becomes clear why. note that the only difference is that in this system the servers reset quickly. this means the number of servers in phase 2 will be very low. we set the starting state at 25 clients in each phase and 10 servers in phase 1, 5 in phase 2, so nowhere near the boundaries.



this behaviour is by no means limited to systems that contain a low overall number of components. it will be present whenever any component-type can reach a low population, especially when it interacts with a component-type that has high population level. in that case the size of the noise term will be bigger and hence negative values are more likely. in particular this means that modelling instant state-transitions with very fast rates will give rise to these negative and imaginary values.



e.g. in the server-client system considered above, if the servers are all in phase 2, no client can move from phase 1 to phase 2. but it is possible for a server to go from phase 2 to phase 1, thus creating server population of type 1. this seems to be a reasonable compromise between the case of absorbing boundaries and that of reflecting boundaries.



note that we offer no proof that this stochastic process with weakly absorbing boundaries is a form of brownian motion. intuitively we feel this should be the case since this can be considered to be reflecting brownian motion with an infinitely small positive value. or alternatively, with an all-zero reflective matrix. whether this intuition holds technically is out of scope for this paper.



for the practical strand it would be interesting to examine more complex models and see if the match between ssa and sde-results is just as convincing as in this paper. in particular examining models where the stochastic behaviour differs qualitatively from the ode-behaviour would be very interesting. it would also be of great practical use to define a formal translation from pepa-model into sde-model directly. we do not anticipate any difficulty with such translation.



