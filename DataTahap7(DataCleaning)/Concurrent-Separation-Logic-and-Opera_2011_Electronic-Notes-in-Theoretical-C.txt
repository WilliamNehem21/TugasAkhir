in this paper, we take a direct approach to proving soundness of csl. we define the meaning of csl judgments directly in terms of a standard concrete operational semantics for the programming language. our definition is concise and results in a relatively simple soundness proof, which we have formalised in isabelle/hol. 1 our soundness statement has three important benefits:



it does not insist on resource invariants being precise. similar to gotsman et al., we prove(a) that csl with possibly imprecise resource invariants and without the conjunction rule is sound, and(b) that the conjunction rule is sound provided that the resource invariants in scope are precise. both proofs use the same semantics for csl judgments.



discussion. a nice aspect of definition 3.1 is that the straightforward lemmas about safety of compound commands are usually already inductive, thereby rendering the otherwise most challenging part of soundness proofs trivial. the only exception is lemma 5.3 about the resource declaration rule(for an extension of definition 3.1 to handle multiple named ccrs), which was arguably the most intellectually challenging part of the proof.



naturally, one would expect to prove this implication by induction on n with an induction hypothesis quantifying over all c and h. the base case is trivial; so consider the n+ 1 case. the first two subcases are easy; so consider subcase(iii). from the first assumption, we know that there exist h1 and h1 such that hj= h1 h1



the first declares a new mutual exclusion lock, r, known as a resource or a resource bundle in csl terminology. the second construct denotes a conditional critical region(ccr) which runs in isolation with respect to any other ccrs with the same lock. executing a ccr blocks until the resource is available and the condition b is true, and then executes the body c in isolation to other ccrs acting on the same resource. this is achieved by holding a lock for the duration of testing whether b is satisfied and the execution of its body. finally, within r do c represents a partially executed ccr: one that has acquired the lock, tested the condition, and still has to execute c. we define locked(c) to be the set of regions syntactically locked by c: those r for which c contains a within r do cj subterm.



to show absence of data races, we have added a rule(racedetect) that aborts whenever a data race is observed. here, the functions accesses(c, s) and writes(c, s) return the set of heap locations accessed or modified by c respectively. their formal definitions can be found in.



