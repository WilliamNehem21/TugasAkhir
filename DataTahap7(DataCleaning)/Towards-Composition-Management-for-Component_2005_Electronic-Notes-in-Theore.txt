recent peer-to-peer architectures do not fulfill the idea of a service-oriented architecture to allow the flexible composition of services towards concrete applications. this can be justified by the absence of flexible notations for the composition of services that incorporate the dynamic nature exposed by peer-to-peer architectures. in this work, the peer-to-peer architecture deevolve is presented that provides novel ways for the composition of services including the handling of exceptions such as the failure of peers. the intention of this approach is to facilitate even less-skilled end-users to compose and to maintain service-oriented applications.



software architectures represent software systems as a coherent set of highlevel computational elements such as components, objects, or services together with their interactions and dependencies. the merit of an architecture-based development is to drift away from a low-level, code-based development towards a more flexible development focusing on the composition of self-contained building blocks. the structure of software architectures is often specified in a declarative manner by an external, formal notation. prominent approaches for these notations are architecture description languages(adls) or workflow



the notion of a software architecture makes at first no proposition concerning the actual organization, distribution, or availability of the constituting building blocks. therefore, designers usually revert to so-called architectural styles to design software architectures on top of appreciated and established architectural organizations. well-known architecture styles for instance are the client-server, layered, or pipe and filters style. the selection of a style depends strongly on the intended use of the architecture.



the major contribution of this work is a novel approach for the composition of peer services within a peer-to-peer architecture to overcome the drawbacks of existing architectures and notations. a notation called peercat is presented for the composition of various peer services in a declarative manner. peercat also allows to define exception handlers itemizing resolution plans in the case of exceptions caused for instance by the failure of peers. the structure of peer services is modelled by the composition of components. a component model does thereby prescribe the valid remote and local interaction primitives between services in a unified way. both the component model and peercat constitute the foundation for the component-based runtime environment dee-



this rest of this article is structured as follows. in the second chapter, the notion of the peer-to-peer architecture style as assumed in this work and a review of existing peer-to-peer architectures are pointed out. the third chapter presents the deevolve component architecture, covering the novel approach for composition management and exception handling. the related work presented in chapter 4 concentrates on the comparison of the illustrated solutions with other issue-related approaches. chapter 5 finally concludes this paper and gives a brief outlook for future work.



peer-to-peer computing should enable users to organize in groups without the assistance of a central authority. these self-governed communities can share, collaborate, and communicate, or participate in their own private web. peer groups can thereby restrict the access of their computer resources to authorized peers. a peer first has to apply for group membership before it can join a group.



semantic interpretation. the underlying peer group concept has two semantic interpretations. the first intention is to subdivide peers into groups according to common interests or knowledge independent from any given organizational or network boundaries. only peers that are interested or, moreover, are authorized to a group, are able to receive internal group messages. the second purpose is rather technically funded: the transmission of messages to a restricted number of(interested) peers instead of to all peers does actually reduce the network traffic.



analyses. there are a plethora of possible analysis that can be conceived for this style. an important task is to schedule all connections or dependencies to other peers. the violation of a dependency to a peer during use time(for instance due to a failed peer) may not only result to local exceptional cases within a single peer, but also to global misbehavior within the entire peerto-peer architecture. exception handling therefore is a primary challenge for a peer-to-peer architecture. exceptions can also occur during the start of an application, if remote peer services belonging to a previously composed application can not be resolved and integrated. this might lead to cases that the respective application cannot be started correctly. besides, the adaptation of a peer service(for instance the deletion of single ports) can be erroneous, if dependencies from other peer services are violated.



the jxta framework constitutes the most sophisticated peer-to-peer architecture due to its generic nature. the framework fulfills the characteristics of a peer-to-peer architecture style remarkably. however, jxta does not address most of the implementation issues and analysis recommendations as elucidated in section 2.2:



specification advertisement the purpose of the specification advertisement is to provide all information necessary to access a service. there can be multiple specification advertisements for a given class advertisement. the intention is to provide multiple versions of a given peer services.



implementation advertisement this advertisement provides the remotecat description of a peer services and, hence, a detailed specification, how to access the peer service. this advertisement is essential, if the peer services should be composed with other peer services(see section 3.3).



during deployment of the minimal composition, the missing services are substituted by so-called mock services, which are generated by deevolve automatically. while running the minimal composition, deevolve still tries to resolve the missing services and to deploy them belatedly by replacing the respective mock services. this kind of deployment is indicated as lazy deployment. the deployment tag indicates, how long the system is instructed to resolve the missing services. after this time, the user himself can use the deevolve console to discover an alternative service. the accessable tag denotes, if a composition that has been advertised as peer service can be accessed by other peers, even if only a minimal composition has been resolved.



the concept of minimal compositions and lazy deployment facilitate the exception handling during the start-up or deployment of a composition. however, these concepts do yet not support the treatment of exceptions during the use time of an application. exception handling during use time will be the topic of the next section.



for both types of handling exceptions, deevolve keeps track to which remote peers a peer has established a connection to consume a service. these peers are pinged in regular intervals. if each ping follows a response from a peer, then the peer is said to be alive. if no response occurs, an exception is assumed. besides the failure of service or peers, other types of exceptions are supported by deevolve, such as the loss of group access rights, the violation of constraints defined on public attributes of services, or the violation of a minimal composition during runtime.



as for the handling of exceptions as intuitive and easy to learn. the instrumentation of service compositions with exception handlers affords a relatively good understanding of the semantics of the complete composition, for instance the possible exceptions a composition may cause. although the proposed instrumentation mechanisms are simple, end-user and, particularly, beginners could be swamped with the composition, instrumentation, and the selection of exception handlers. similar observation were made in user tests for the first adaptation and compostion environments of the freevolve platform. in order to improve the intuitiveness and the ease to learn of deevolve, one could think of further developments such as exploration environments, helping systems or wizards.



exception handling on code-level is integrated in well-known programming languages like java. the advantage of this method of exception handling is to handle a large number of different low-level types of exceptions for instance within a single component. however, developers of components cannot anticipate all situations, in which a distinct component will be deployed by third-parties and, thus, the possible exceptions it will cause. hence, it is reasonable to integrate exception handlers after all components have been composed to a concrete application. the abstraction towards a more coursegrained, declarative exception handling is intended to enable end-users the intuitive instrumentation of peercat structures through appropriate tools.



