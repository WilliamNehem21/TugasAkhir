in this paper we present first the background for the two application areas(section 3), with emphasis on routing algorithms. in particular we motivate the modular characteristic of the language and the necessary aspects of parallelism and functional complexity. the target architecture is only sketched so as to leave more room for the introduction of the language(section 4) and the discussion of the compilation process(section 5). specifically, we demonstrate how a unification-based method can be used to extract specific functionalities for hardware building blocks in the rule-evaluation engine. if this functionality is spread over several rules in the user program, it has to be detected by the compiler to maintain hardware independence.



with respect to routing in parallel computer networks, summerville et al. present an architecture for a bit-pattern-associative router in. they describe their routing algorithms in a pseudo-language that is very similar to the basic pattern used in reral. the target hardware uses a pattern-matching circuit array which is similar to a ternary cam(content addressable memory). as there are neither dedicated arithmetic circuits nor other specialized components in the proposed routing engine, only simple routing algorithms can be carried out without a huge increase in the association circuitry.



routing algorithms typically cover several more or less independent aspects. two aspects, deadlock and livelock avoidance, ensure that a message is transported to its destination in finite time. while a deadlock results in an infinitely long waiting time of messages within the routers because their further routing depends cyclically on each other, a livelock situation occurs when one or several messages move continuously through the network without ever reaching their target. for this reason, livelock avoidance specifically includes the knowledge of the network topology, in particular the capability of the routers to determine a path to the destination for a given router address. moreover, routing algorithms contain a local scheduling that decides which message is preferred in a resource conflict such as link usage. two other aspects of importance are related to the avoidance of overloaded and broken routers or links, if this is possible. they are a combination of the collection and distribution process of relevant information and the application when routing an individual message.



the language itself and its usage to define routing algorithms are given in. the central building block of the language is a rule that consists of a condition(premise) and a list of commands(conclusion). a set of rules forms a rule base or a subbase. in general, subbases are functions returning a value to the caller.



exploiting side effects, they become a powerful way of describing subroutines and shaping the code clearly. in contrast to traditional programming languages such as c/c++ and modula-2, all rules of a rule base are executed in parallel. the conditions are evaluated with respect to the global state at a rule-base call, and the commands belonging to the conclusions executed alter the global state also in parallel.



the variable linkload is an array of numbers where each number is in the range of 0..63. its size and indices are given by the constant set in parentheses. all variables have a finite(usually small) domain that is given by a set literal or a constant.



this kind of declaration predefines a subbase that has two parameters. subbases are one form of rule bases. they are the main structuring element and either define a function or work as subactions having side effects. the declaration is not necessary, but improves readability.



rule base is some kind of case distinction where every rule covers at least one case. it is expressed by a predicate logic expression. in this case the action is the presentation of the function result. in addition to boolean operators and arithmetic expressions subbases can be used.



the compilation process and the generated implementation of the rule-based hardware specification are usually greedy for resources. hence, especially memory size on processing-system side, and available logic gates and timing constraints on target-system side limit number and complexity of processable rules. the usage of functions that conserve utilization of resources provides room to implement more rules. therefore, the number of rule bases that can be performed by the routing engine increases.



per premise is achieved. unfortunately, the unification-based optimization has a high mismatch ratio because of the commutativity of several functions. because exchanged operands of a binary, commutative operation for example can lead to mismatches, the operands were sorted by length to decrease the number of mismatches.



