tured by the output it produces, which is determined by the supplied input. but reality is often more complicated, for one may have to deal with components whose behavioral pattern is, e.g., partial or even non deterministic. therefore, to proceed in a generic way, the behavior model is abstracted to a strong monad b. of course, b= id retrieves the simple deterministic behav-



the central idea of our research on the formalization of uml is that a set of uml diagrams denote coalgebraic specifications as introduced by jacobs[8,9]. more precisely, we intend to translate all the graphical symbols and annotations in the uml syntax, into functors and properties of a coalgebraic specification. therefore standard definitions in universal coalgebra, such as bisimilarity and refinement, become available to reason and transform uml designs.



in uml, a class is an abstract description of a set of objects with similar structure, behavior and relationships. the description of a class includes the attributes and operations common to all of the objects belonging to it. every object o of a class c in a system has an identifier ido which is unique within the system. we denote the set of all identifiers by id. therefore, an object o: c is semantic functions for visibility of attributes, operations, interfaces, etc. which can be found in. note that in this framework attributes and operations are very similar: only the form of the signature functor changes. the distinction lies in the difference between observation and computation, only the latter being the source of change in object states.



every association has three basic components: a name, a role and the multiplicity at each of its ends. the semantics for an association is given by the corresponding observers in each of the classes being related by the association. let a be such an association between classes u and v. the role names and multiplicities on the two ends are, respectively, ua, va, and mu, mv, the later being two sets of non-negative integers. then the semantics of a is defined as a pair of the coalgebraic observers: and may be given to associations in a class diagram. for example, uml allows an association to have its own attributes, which is represented by an association class, i.e., an association which is also a class. generally, an association class can be represented as a class with two one-to-many associations.



generalization relations organize classes into a lattice, with the most generalized class at the top of the hierarchy(eventually an abstract class). the meet and join operators are defined as the superclass and subclass(for multiple inheritance) of classes respectively. note that an abstract class may not have direct instances, and, therefore, it can not be interpreted in the same way as a concrete class. however, from the generalization relationship between an abstract class and its subclasses, its semantics can be recovered as the smallest superclass of all of its subclasses(or the least upper bound in the lattice of classes). translated to category theory this means that the semantics of an abstract class with respect to its subclasses is the colimit of the corresponding subclass coalgebras, i.e., structure, and makes the verification of system properties more effective(as shown by d. pattinson in). a detailed discussion can be found in. furthermore, the generic notion of component refinement, proposed by the authors in, can be adapted to the context of uml and used for checking consistency of different models. such is purpose of the following section.



to make proper use of uml models in a development process we need a clear notion of refinement between components clarifying what it means for a component to implement another. orthogonal to the horizontal decomposition of the system structure, the vertical refinement of concrete components from abstract ones provides an approach for stepwise separate development of component-based systems. in the coalgebraic framework sketched in this paper, three kinds of refinement relations between components can be defined. in any case the semantic mapping defined for uml models makes them associated with a proper refinement ordering.



behavioral refinement characterizes the preservation of component behavior. but if we rely solely on behavioral refinement, the inability to change the syntactic interface will force us to work at the same level of interface abstraction throughout the whole development process. to avoid this, a more general notion of refinement, called interface refinement is introduced, which relates components with different interfaces.



(see for a recent account). however, for component-based systems, the situation is far more complex(see, e.g.,). in this paper we investigated refinement at three, inter-related, levels: behavioral, interface and architectural level. our framework allows the notion of refinement to change the interface and granularity of components.



a major influence in our work was jacobs and tews research on objectoriented systems[8,9,23]. however, instead of defining and resorting to a specific(coalgebraic) specification language(ccsl), we adopt a rather pragmatic approach: that of using uml diagrams to denote coalgebraic specifications. another difference between our work and the formalization of uml in is that we do not restrict ourselves to class diagrams.



