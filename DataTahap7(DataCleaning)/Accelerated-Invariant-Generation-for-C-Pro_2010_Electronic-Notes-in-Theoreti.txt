the aspic input language grammar can be found in the research report. in particular, the aspic language enables the use of a non deterministic operation xj:=?, whose semantics is the loss of any information concerning the variable x. the expressivity of the fast language is thus improved(all affine relations can be encoded).



by a variant of the tarjan algorithm. some precomputations are made at the beginning in order to apply the acceleration results. some changes are also made on the topology of the automaton: for instance, some nodes are split. the iteration is a classical fixpoint iteration, except when some loops are accelerable: in this case, a(post) fixpoint is computed locally thanks to the acceleration results of.



during the first phase of the analysis the transition functions are preprocessed, an internal structure encodes the type of the action(identity, translation, translation reset, idempotent transition,...), of the guard(always true, simple, complex,...), whether the transition is accelerable, and other useful informations that can be precomputed(postconditions, rays to add,...).



back to the initial automaton at the end of the fixpoint iteration on the modified automaton, the final results are computed w.r.t. the initial control points, by taking the union(convex hull) of the invariants associated to the two control points obtained after spliting.



aspic is implemented over a fixpoint generic analyzer called analyseur 4. this tool performs a fixpoint analysis, given an encoding of the control flow graph and an implementation of the abstract lattice of properties. we chose the polyhedral library newpolka 5, which has an ocaml interface. these two librairies are now embedded in the apron interface(. the cumulated number of lines of ocaml code is 20000(without newpolka).



the parser the parser for c2fsm has been written in ocaml using the ocamlyacc implementation of yacc and the c grammar in. the result is an xml representation of the abstract syntax tree. error detection is minimal, and diagnostics are rudimentary. the user is advised to use a standard c compiler as a filter before attempting to use c2fsm.



one difficulty comes from the fact that the c assignment symbol is an operator which return a value, thus allowing such conundrums as if((c= f(x= y+z))> x). in this case, the tool applies a process of unwinding, which may generate more than one state per statement. the semantics of c does not specify in which order multiple assignments may be executed. c2fsm applies an innermost leftmost policy.



c2fsm then proceeds to the expansion of the control statements(while, for, if, do, goto) using the familiar definitions, and adding new states as needed. in the interest of simplicity, no attempt is made to minimize the automaton at this stage. for instance, if a test has a then but no else, the tool generates a blank transition for the else branch.



this construct is transformed into a conditional goto to an error state whose name is the string argument. if the condition is not met, a transition to the error state is executed. there are two ways of verifying(or not) the assertion. firstly, when simplifying the automaton, it may happen that all paths to the error state have a false guard. in that case, the error state disappears. in the other case, aspic eventually finds that the error state is unreachable.



in this section we present some experiments driven with the aspic tool. these results show that the method we have proposed gives interesting results in terms of precision and effectiveness. all these examples(and other ones) can be found in the aspic webpage.



nbac 6 implements the classical lra in combination to dynamic partitioning(). contrary to aspic, the tool is dedicated to the verification of properties of lustre programs. the method perfoms forward and backward analysis from a minimal control structure, and the cfg is partionned w.r.t. the analysis results(and the proof goal). our technique can be used to improve the precision of invariants during each forward/backward analysis.



lash 7 and faster 8 use acceleration techniques to compute, when possible, the exact reachability sets of counter automata. theoretical results concerning the acceleration of some subclasses of loop have been obtained this last ten years(for difference bound contraints, a subclass of affine guarded functions[4,9] and more recently for octagonal relations). however, the tools based on these algorithms are not fully automatic(lash), or are not guaranteed to terminate(faster), in particular for nested loops.



sting 9, and invgen 10 use a combination of lra and farkas lemma to discover numerical invariants. the main drawback of the method is the use of template invariants, which prevents the analysis to discover any invariant which is not of the right form. to improve the precision, invgen perfoms an execution of the program to add some additional constraints, which increase the global analysis time.



and suif, and all of them could be used as a replacement for the c2fsm parser. however, none of them is able to extract an automaton from their intermediate representation, let alone do the complex approximations and transformations that are necessary prior to static analysis. in fact, since these tools are geared toward compilation, they tend to represent their input program as faithfully as possible.



r wilson, r french, c wilson, s amarasinghe, j anderson, s tjiang, s-w liao, c-w tseng, m hall, m lam, and j henessy. the suif compiler system: a parallelizing and optimizing research compiler. research report csl-tr-94-620, stanford university, computer research laboratory, 1994.



