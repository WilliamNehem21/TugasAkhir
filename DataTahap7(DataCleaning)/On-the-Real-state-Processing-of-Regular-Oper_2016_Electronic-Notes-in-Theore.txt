in this work we study some aspects of state-complexity related to the very famous sakoda-sipser problem. we study the state-complexity of the regular operations, we survey the known facts and, by the way, we find some new and simpler proofs of some well known results. the analysis of the state of art allowed us to find a new and meaningful notion: real-state processing. we investigate this notion, looking for a model of deterministic finite automata holding such an interesting property. we establish some preliminary results, which seem to indicate that there does not exists a model of deterministic finite automata having real-state processing of regular expressions, but, on the other hand, we are able of exhibiting a deterministic model of finite automata having real-state processing of star free regular expressions.



it is known that nondeterministic finite state automata(1nfas) are as powerful as deterministic finite state automata(1dfas), in the sense that 1nfas can only recognize regular languages. it is also known that 1nfas are more powerful than 1dfas, because 1nfas cannot be simulated by 1dfas with a polynomial overhead in the number of states. sakoda and sipser asked if 1nfas can be simulated by two-way deterministic finite state automata(2dfas) with a polynomial overhead in the number of states. it is one of the questions included in the, so called, sakoda-sipser problem. the sakoda-sipser question is a question about: how, when and to which extent can two-wayness replace nondeterminism? it would be great news if such a question would have an affirmative answer. it is the case, given



remark 1.1 we understand the sakoda-sipser problem as the question: does there exist a deterministic model of finite state automata which can efficiently simulate nondeterministic automata? it is clear that a positive answer to sakoda-sipser implies that our problem can be positively solved. on the other hand, if we could give a positive answer to our question, we could not immediately conclude that sakoda-sipser also has a positive answer. it is the case because nondeterministic automata are exponentially more succinct than regular expressions.



six sections. in section 1 we introduce the problem that we study in this paper, introducing the notion of real-state processing. in section 2 we consider the model of dfas, and we present simpler proofs of some well known results. in section 3 we study 2dfas, and we prove that those automata do not have real-state processing of regular operations. moreover, we prove a strict superpolynomial separation with respect to the model of 1nfas. in section 4 we consider a model of two-way pebble automata, and we prove that it is not able of real-state processing concatenations. in section 5 we introduce a new model of multiplebble automata, and we prove that it has real-state processing of star-free regular expressions. we conclude, in section 6, with some concluding remarks.



the models of automata studied so far have several different features but a common feature: they cannot write on their tapes. if we add those automata the ability of writing on their tapes, we could leave the regular world. there exists some very weak forms of writing, which does not force 2dfas to leave the regular world, one important example is the writing ability provided by a single pebble. ibarra et al studied a model of pebble automata that accepts the regular languages, ibarra automata are two-way deterministic automata provided with a single pebble which is used by those automata to mark cells on their tapes(for definitions see). we use the symbol 1p2dfa to denote the class of ibarra automata that adhere to the following further restriction: segments. when the pebble is placed on the tape, those automata work first on the left segment, and then on the right segment. moreover, their computations are divided into completely independent stages, the transition between two successive stages being given by moving the pebble one step to the right. notice that those automata are tailor-made to process the concatenation of two regular languages.



so far, we have surveyed the most popular models of finite state automata, we showed that all those models, but the model of 1nfa, are unable of real-state processing regular expressions. it seems that real-state processing is not achievable within the world of deterministic finite state automata. therefore we decided to relax our goal: we would be happy if we could find a model that is able of efficiently processing all the star free regular expressions(a model that is able of real-state processing unions and concatenations).



between the time pi+1 is placed and the time either pi is picked up or pi+2 is placed, the automaton can traverse only the substring located between the current location of pi and the end of the input word that lies in the direction of pi+1. moreover, in this substring, the automaton can act only as a 1p2dfa using pi+1 as its unique pebble. in particular, it is not allowed to lift up, place, or even sense the presence of any other pebble.



it seems that dpdfa cannot real-state process the kleene star. if we try to use the naive idea employed in the case of concatenations we will promptly realize that we have to use an unbounded number of pebbles. an unbounded number of pebbles seems to be a not admissible resource because, among other things, we need to include some special states in order to handle the provision of pebbles, and it happens that the number of those states increases with the number of pebbles. thus, such a model of pebble automata seems to be nonfeasible(seems to be nonfinite).



we conjecture that there does not exist a feasible deterministic model of finite automata for which thompson property holds. our conjecture implies that there does not exist a feasible deterministic model of finite automata that is able of realstate processing the regular operations. we have that dp2dfas are able of real-state processing the star free regular expressions and it is the best result that we can achieve so far. thus, we have



one can argue that the sakoda-sipser problem is the question about the statecomplexity of simulating a given class of finite automata by another one. thus, from this very general point of view, the sakoda-sipser problem is a question about comparing the state-complexity of different computational tasks when they are analyzed through the lenses of different models of finite automata. we chosen one specific task: processing of regular expressions. our choice yields a new and meaningful notion: real-state conversion. the analysis of this new notion allowed us to explain, to some extent, what is special about 1nfas, and which are the main computational advantages of nondeterminism when one restricts the attention to finite automata. we could prove some preliminary results concerning this new notion, but we feel that it deserves further investigation.



