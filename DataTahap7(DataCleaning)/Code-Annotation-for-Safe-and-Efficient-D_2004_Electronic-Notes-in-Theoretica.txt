unfortunately in the presence of dynamic loading, the static object resolution of even simple applications is often infeasible. indeed, in most cases the information necessary for object resolution is only available at execution time when the contents of external methods are available. running a simple escape analysis algorithm for the java grande benchmark programs, it turned out that most of the candidates found for object resolution cannot be optimized at compile time due f.e. unknown constructors of created objects from different classes or the access to fields of arrays where the index is not known. deferring the analysis until runtime, however, means that the cpu cycles spent performing the escape analysis are cpu cycles that are not spent executing the program. for this reason, it is beneficial to minimize the runtime cost of the escape analysis; this can be done by performing a partial escape analysis at compile-time and attaching the results as annotations to the individual program modules.



null-checking and index-checking can be generalized to include all type-cast operations: an xupcast operation involves a dynamic check and will cause an exception if it fails. in the case of success, it will copy the value being cast to the next available free register on the plane of the target type(only the dynamic check will result in actual code at the target machine, but not the copy operation). the downcast operation never fails and will never result in any actual target code.



where base-type identifies the static type of the receiver object, receiver designates the register number of the actual receiver object on the corresponding plane, method is a symbolic reference to the method being invoked, and operand1... operandn designate register numbers on the respective planes corresponding to the parameter types of the method. the result will be deposited into the next available register on



in checkintersect parameter p1 is assigned the type sbnd as the compile statically can verify that that reference is safely bounded. in contrast, the reference to object produced by the new operator will be assigned type mbnd as it will be passed as an argument to the method intersects. in method intersects the parameter is assigned type mbnd as it will be given as an argument to method incdefborder, but the parameter definition in method incdefborder is assigned a sbnd type since the reference variable created from p1 is safely bounded to the method.



because the method checkintersect will be called during program execution and the jit-compiler has not already compiled this method, the classloader first will load class framecheck. preliminary analysis of method checkintersect reveals that the object referenced by variable lower could be a candidate for an object resolution since lower is of type mbnd. checking if an object resolution on this object can be performed, the classloader will first load class frect and verifies whether the parameter of intersects escapes the method. since the parameter of intersects is not defined as a sbnd type, class frameborders has to be loaded and the analysis will proceed with the method incdefborder. the sbnd parameter declaration of method incdefborder indicates that the parameter does not escape its method. as a result the analyzer concludes that the parameter definition of method intersects also is safely bound and therefore can be transformed into a sbnd type. this means that an object reference that is passed to intersects cannot escape the method and hence an object resolution on the object accessible via variable lower can be performed.



earliest investigations in escape analysis were done by park and goldberg, which developed an escape analysis for functional languages, which is based on reference lifetime, and operating on lists. in steensgaard has develops an interprocedural flow-insensitive points-to analysis with near-linear time-complexity. whaley combines points-to and escape analysis into a points-to-escape graph, and uses this data structure in order to eliminate superfluous synchronization of threadbound objects and to stack-allocate strongly-bounded objects. threads are also handled in, where salcianu describes a technique for obtaining precise points-to and escape information for objects accessed by multiple threads. vivien et al. provide an algorithm for incremental pointer and alias analysis.



code annotation for program representations have not been as thoroughly researched as escape analysis, but recently, various annotations have been proposed for enhancing the performance of jit compilers using java bytecode and other intermediate representations. krintz et al. annotates bytecode for increasing the performance of programs executed by jvms. franz et al. annotate programs syntax trees with escape information and encode them for safe transportation. both and guarantee the safety of their annotations. hannan uses a functional approach for the annotation of escape information types in. in contrast to our work, he excludes dynamic class loading and gives no algorithm for the computation of types.



