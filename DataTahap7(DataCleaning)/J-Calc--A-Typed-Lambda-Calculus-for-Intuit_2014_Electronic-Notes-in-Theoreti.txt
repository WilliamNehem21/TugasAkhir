and t j with corresponding types(p and just p). for that reason we introduce a linking witness constructor link. this is how necessity is introduced: by proofchecking deductions of t with deductions of t j, we reason constructively about admissibility of valid(via t j) statements in t. the principle thus becomes:



the server might provide different implementations of the instack module signature. the two textbook approaches use lists or arrays of integers. given different implementations, the initial source code has different computational value since the links that it induces change. schematically:



for future work, we plan to extend the computational relevance of the full calculus(jcalc) by establishing its connection with higher-order module systems(e.g. where module signatures can refer to other module signatures which, in turn, are implemented by a third module). linking processes in such systems would utilize our type system in full. cut-elimination results are currently under development.



