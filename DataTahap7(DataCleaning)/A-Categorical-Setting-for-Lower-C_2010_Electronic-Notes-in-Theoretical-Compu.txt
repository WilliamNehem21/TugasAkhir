polarized strong categories are closely related to certain fibrations(over the opponent world). this provides an alternative and compelling perspective on these setting which we shall wish to exploit. this section, therefore, develops the relationship to fibrations and also introduces r-sized sets which we shall use as a running example to illustrate the theory.



the x-strong categories we are interested in here have much more structure: the player category is affine closed 10 with products and coproducts. this section describes how this structure is defined for x-strong categories and gives the corresponding fibrational interpretation. finally, the corresponding structure in r-sized sets is described.



a peculiarity of the(initial) fixed point calculus in his setting is that inductive data(i.e. fixed point data) does not in general supply material from which one can build more inductive data. this is because inductive data does not, in general, organize itself into a polarized operator.



in the initial settings it is usually the case that every object in the opponent world is actually a lifted player object. in such settings the polarized operators are completely determined by the player side. thus, the specification of these operators in the player world is often the crucial aspect.



each constructor increases the size of its input by 1, so they are certainly maps in the player category. the map cons above is the cotuple of these constructors, and so it too is bounded by a size increase of 1. the inverse map is non-size increasing and so is also in r-setconst. this shows that this object is a fixed point in r-setconst.



it is convenient, in order to bound the recursion principle to use the transformation of proposition 5.1 and derive the size bounds from the fixed point form of the map. this then has to be evaluated to obtain the map we actually want. it



these matters are addressed in which is still work in progress. that document describes a full programming language and type system in support of the development of a ptime programming language called pola. it is a more complex system than that described here. it uses a bunched logic for the programs in the player world, has type inference, and supports both inductive and coinductive data. coinductive data has destruction which is constant time, and thus, like the closed structure discussed in this document, is completely in the player world. the inductive data is essentially as discussed here(although a slightly more powerful recursion principle is used).



one can easily program ptime turing machines in this languiage: thus, it is certainly ptime complete. if the distributive law for products over coproducts is assumed for all data, then qsat can be programmed(following the observation of hofmann). thus this language is also pspace complete. the arguments for soundness are by structural induction: they show first that the language(with the distributive law) is pspace sound and second that, if one drops the distributive law(for higher-order, coinductive, and universal types), that the language is ptime sound(ptime completeness is not affected).



