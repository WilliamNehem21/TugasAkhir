we evaluate and quantify the role of cnn architecture employed to extract features in the video captioning framework. we analyze 5 cnn models encompassing varying depths and structures. we observe that networks with stronger expressive ability perform better. we empirically demonstrate that the choice of cnn model in the video captioning framework can lead to performance gain up to



most recent methods incorporate various adjustments in the encoder- decoder framework. wang et al. [29] proposed multi-model memory to model the long-term visual-textual dependency. chen et al. [30] proposes a frame picking module to select a compact frame subset to represent the video. this enables the encoder-decoder architecture more applicable to process the real world videos. gru-eve [25] employs short fourier transform on the encoder output to enrich the video representation with temporal information. zhang et al. [31] models salient objects with their temporal dynamics to improve the architecture performance. zheng et al.



[32] propose syntax aware action targetting module to explicitly learn actions. in order to understand the strength of each technique employing encoder-decoder architecture, it is important to understand the role of each module in encoder-decoder. for that matter, we put together the performance contribution of each module, forming the basis of encoder-decoder architecture, towards overall framework performance.



we first introduce the setup used in our empirical analysis of the video captioning framework. for evaluation, we divide the framework into four core components, namely cnn model - that encodes visual features of videos, feature transformation - that transforms visual features to be used as inputs by the language model component, word embeddings - that provides numerical representation of words in the vocabulary, and the language model component, which decodes the visual features into natural language descriptions. extensive experiments are carried out by varying the methods for each component of the framework and analyze the captioning performance of the overall pipeline.



description evaluation (cider) [36]. these metrics are known to comprehensively evaluate the quality of automatically generated cap- tions. we briefly discuss each metric in the below text. for details on each metric, pros and cons, and for their comparisons, we refer the readers to original papers and survey paper [37].



we perform experiments on the popular video captioning dataset msvd [41]. this dataset comprises 1, 970 youtube short video clips, primarily containing single action/event in a video. each clip duration varies from 10 to 25 s. each video is associated with multiple human annotated captions. on average, there are 41 captions per video clip. for bench-marking, we follow the data split of 1, 200, 100, and 670 videos for training, validation and testing respectively. this is a widely employed protocol for evaluation using msvd dataset [8,9,29].



of generated sentence is an exact match to the reference sentence. in order to compute corpus level score, aggregated values of the constituent components i.e., p, r, and p are taken. moreover, highest meteor score is selected if there are multiple reference sentences against a generated sentence.



in this section we briefly describe the vanilla encoder-decoder ar- chitecture which is backbone of most video captioning methods. encoder encodes the input video frames by employing pre-trained convolutional neural network(s). the extracted features from encoder are then utilized as input to rnn decoder to generate the caption. formally, for a given video



convolutional neural networks (cnns) can be readily applied to images and videos. in deep learning based encoder-decoder framework for captioning, cnns dominate the encoder part. due to the significance of a encoder role, the choice of cnn models can affect the overall captioning performance significantly. hence, we first analyze the five most commonly used cnn models in captioning, namely; c3d [44], vgg-16 [45], vgg-19 [45], inception-v3 [46], and inceptionresnet-v2 [47]. among these models, c3d - a popular example of 3d-cnn, is a common choice [23,48] because it can not only process individual frames, but also short video clips. this is possible due to its ability to process tensors with an extra time dimension.



moreover, we observe that the effect of cnn architecture in the video captioning framework follows the similar trend as seen in image classi- fication tasks. it is generally believed that deeper networks tend to perform better, we see that vgg-nets from 16 to 19 layers slightly improve the performance of captioning framework. however, after a certain depth is reached in the cnn, increase in number of layers do not increase the classification accuracy of the model. the problem was resolved by introducing residual blocks that resulted in networks with stronger expressive ability and hence performed better in classification tasks. similarly, we see the same trend in our experiments where we achieve better performance by employing these networks in the video captioning framework.



it is also evident from the results that for temporal encoding, the performance of different models show a similar behavior relative to each other, which is also the case for the mean pooled features. for instance, with temporally encoded features, the best performing architecture still remains the best and vice versa is also true. the temporal encoding is providing a significant positive offset to the performance.



in this encoder-decoder framework, a word embedding is a vector representation for each word in the available vocabulary for video caption generation. word embeddings are much more powerful low- dimensional representations for words as compared to the sparse one- hot vectors. more importantly, unlike one-hot vectors, word embed- dings can be learned for the captioning tasks. in captioning literature, two methods are commonly used to compute these vectors. the first approach is to learn the vectors from the training dataset while the lan- guage model is trained. in this case, one can initialize the embedding vectors randomly and compute the embeddings tailored to the captioning task. however, such vectors often fail to capture rich semantics due to the fact that captioning corpus size is often small for the purpose of training a language model. the second way to obtain these vectors is to use pre- trained embeddings that are learned for a different task and select those according to the vocabulary of the current task.



vectors. the other word embeddings do not have this property. for instance, with 9, 914 words of corpus vocabulary size in fasttext, 8, 846 tokens are extracted from the pre-trained embeddings and the embed- dings for the remaining 1, 068 tokens are generated using character n- grams of out-of-vocabulary words. the resulting vectors are then merged to produce the final embedding vector. this strategy is certainly better than random initialization of the out-of-vocabulary words. with fasttext at the top, glove840b and word2vec performs almost at par. among all the pre-trained embeddings, glove6b proved to be the weakest.



in language models, given the type and size of data, depth of the model plays the pivotal role in effective learning. where lower layers of a model learn to represent the syntactic information (parts of speech, grammatical role of words in each sentence etc.), semantic information (meaning of the words, contextual information) is better captured at the higher layers. as each layer learns different type of information, depth of models becomes important for effective language modelling. however, the modelling performance may start to deteriorate at a certain depth due to the data size limitation.



appropriate hyper-parameter setting and model fine-tuning are well- known for their role in achieving the improved performance with deep networks. here, we provide a study of a few important hyper-parameters relevant to the captioning task under the encoder-decoder framework. the reported results and findings can serve as guidelines for the com- munity for training effective captioning models.



we also experimented by fine tuning the model for 10 epochs on the pre-trained word embeddings. it was observed that in this case, the performance on bleu and cider metrics improved slightly with the fine tuning. however, performance on rougel metric remained negligible. meteor metric value showed mixed behaviour with no regular patterns. dropout in recurrent layers: dropout is a technique used in neural networks to prevent overfitting of the model during training. in recurrent kens), dropout therefore does not have a significant effect on language model performance for this dataset, or the datasets of similar scale. we employed dropout in the recurrent layers of language model. however, it was observed that application of dropout did not improve the perfor- mance. in fact, it sometimes resulted in slight deterioration of the model performance. based on the observed behavior, we can confidently recommend to avoid the use of recurrent dropout in a gru language model, given the training data of msvd size (or comparable) and model



60 % for cider metric, if we choose the right visual feature encoding model. similarly, when comparing among 2d cnns only (second row), we see there are significant performance variations. these variations only resulted from varying the cnn model. hence, we can conclusively argue that superior cnns (with better representation power) can result in significant performance improvement for the captioning techniques.



training with random initialization. moreover, we also experimented with fine tuning of the pre-trained embeddings for 10 epochs for the captioning task. however, we observed that fine tuning does not result in any drastic performance gain. we noticed that the performance of word2vec and glove840b mostly remain at par with each other. compared to the visual feature encoder selection, we can see the per- formance gain by the informed selection of word embeddings are not negligible either. however, the right cnn model does have a dominant effect on the performance gain as compared to the word embedding selection.



