the paper is structured as follows. we first provide an intuitive explanation of the purpose of tokenizing java card class files by describing the differences between method resolution for java card class files and for java card cap files(section 2). we then proceed(section 3) to describe the pvs formalization of the class file and the cap format on which the cap converter operates. section 4 presents the development and accompanying proofs of the tokenization part of the converter. section 5 on componentisation describes the specification and the implementation of constant pool merging in the cap format.



in this section we present the pvs specification of class file format and cap format. each of them is built as a pvs abstract data type, defined by its set of constructors, associated recognizer predicates and accessors. the pvs models are strongly idealized versions of java card class and cap files.



a class hierarchy is a forest that can be empty or which is of the form nodehier(c, s, b) where c is a class, s is the forest of its sons and b is the forest of its brothers. for instance, a class c1 having two children c2 and c3 will be represented by a term nodehier(c1, nodehier(c2, empty, nodehier(c3, empty, empty)), empty), where c1 has a son c2 which has a brother c3. in the above datatype, class, sons and brothers are the accessors and empty?, nodehier? are the recognizers.



corresponding to listmet and the inherited methods. the integer field next is used during the recursive calls to count every method defined in mt super in order to find the number of the first token that can be used to tokenize the methods in listmet. if a method s is associated with a token t in mt super and if s occurs in listmet then the searchmethod function ensures that s will be numbered by the same token t in the class c.



in the java bytecode format, constants like integers, real numbers, strings, class and method names are all stored in an array called a constant pool. there is one constant pool per class. in the bytecode of the methods of the class, every occurrence of a constant is replaced by its corresponding index in the constant pool.



this section deals with the componentisation of java card packages. the java card definition specifies how a package of class files must be split into a number of components(method, class, export, constant pool, etc) that together represent the package. we will not deal with all these aspects of componentisation but focus on how to build the constant pool component. more precisely, we will show how to define and prove correct a function that is given a class hierarchy and produces two results: a global package constant pool and an offset function f. the global constant pool is produced by merging all the constant pools of the classes contained in the hierarchy. for every class of the hierarchy, the offset function gives the jump to perform in the global constant pool to find back the content of the constant pool of the class. in particular, the offset function will be used to backpatch the bytecode of every



in section 5.1, we define a specific theory to deal with basic array copying and merging problems. in section 5.2, we show how to use this simple theory in order to achieve the componentisation function and its proof on class hierarchies.



copies the content of an array t1 between indexes from pos and to pos into an array t2 at a position at pos. the type of the result of this function could be more precise. in particular, we could specify in the type that in the resulting constant pool,(1) we must find the values of t1 between the indexes at pos and at pos+(to posfrom pos) and(2) we must find back the original values of t2 outside of these indexes. however, using such a very precise subtype tends to generate type checking conditions(tccs for short) that are more intricate and more difficult to prove than if the property is proven outside the typing, as additional lemmas: correct copy for property(1) and copy not modif outside values for property(2):



thanks to the previous array copy function it is easy to define a function sum that concatenates two constant pools. moreover, using the two previous lemmas it is easy to show that the sum function is correct i.e. in the sum of two constant pools t1 and t2, t1 can be found in the sum from indexes 0



like in section 4.2 for the tokenization functions, the componentisation function is supposed to be applied to a valid hierarchy. however, for componentisation an additional assumption is necessary: we assume that there is a bijection between classes and their names. the following main theorem states that for all valid class hierarchies, if comp cp is the componentised constant pool, if off fun is the related offset function, then for every class file cf in this hierarchy(having a non empty constant pool), we can find back the i-th cell of the constant pool of cf at position jump+ i in comp cp, where jump=get(get assoc(name(cf), off fun)). the value of the jumpis in fact the value associated to the name of the class cf into the association list off fun.



however, typing this theorem raises two non trivial proof obligations(tccs) revealing two implicit assumptions that have to be proved first, as lemmas. the first lemma states that by looking for the name of the class cf in the association list we will obtain at least one value for the jump, i.e. that the offset function is total with regards to the class names of the hierarchy. the second lemma states that for every class file cf, jump+ i is within the bounds of the global componentised constant pool comp cp. even if the details are rather different, the global proof sketches for those two lemmas and for correctness cp component are similar. we perform an induction on the structure of the hierarchy ch. the base case of the empty hierarchy is easily discarded since it is contradictory with the fact that cf is known to be in the hierarchy ch. then for the general case, we achieve a proof by cases on the definition of



we have specified the core algorithms of a cap converter in pvs. these algorithms deals with the tokenization and the componentisation of java card class files. the tokenization algorithm was proved correct by showing that it fulfills the constraints detailed in the java card definition of the cap format. as was shown in previous work, this is sufficient to prove the correctness of the conversion. componentisation was proved correct in the particular case of merging constant pools.



