we present a method to analyze, monitor and control dynamic memory allocation in java. it first consists in performing pointer and escape analysis to detect memory scopes. this information is used to automatically instrument java programs in such a way memory is allocated and freed by a region-based memory manager. our source code instrumentation fully exploits the result of scope analysis by dynamically mapping allocation places to the region stack at runtime via a registering mechanism. moreover, it allows executing the same transformed program with different implementations of scoped-memory managers and perform different run-time analysis without changing the transformed code. in particular, we consider a class of managers that handle variable-size regions composed of fixed-size memory blocks for which we provide analytical models for the intraand inter-region fragmentation. these models can be used to observe and control fragmentation at run-time with negligible overhead. we describe a prototype tool that implements our approach.



in object-oriented design is the encapsulation of abstractions into objects that communicate through clearly defined interfaces. because programmercontrolled memory management inhibits modularity, object-oriented languages, like java, provide built-in garbage collection(gc), that is, the automatic reclamation of heap-allocated storage after its last use by a program. however, automatic memory management is not used in real-time embedded systems. the main reason for this is that the temporal behavior of software with dynamic memory reclaiming is extremely difficult to predict.



based on the information above we synthesize a memory organization that associates a memory region with each method in such a way the restrictions imposed by the scoped-memory management scheme are fulfilled by construction. thus, run-time checks can be safely eliminated to enhance performance. to instrument the program, we define an api that avoids the rtsj overhead of creating a runnable object each time a new memory scope is created. our instrumentation fully exploits the result of the scope analysis by dynamically mapping creation sites to the region stack at runtime via a registering mechanism. this allows to control at run-time where the object is actually allocated according to given performance criteria(e.g., minimizing memory fragmentation), without changing the source-level instrumentation.



we also address the issue of monitoring and evaluating run-time performance of the scoped-memory manager. in this paper, we focus on region-based memory managers that handle variable-size regions composed of fixed-size memory blocks. for this class of managers, we provide an analytical model of the intraand inter-region fragmentation for several allocation algorithms(e.g., first-fit and best-fit). these models can be used to observe and control fragmentation at run-time with negligible overhead. run-time analysis also allows tuning the parameters to accommodate to the needs of the program.



we call creation site every place(defined by its label+) of the program where an object is created(i.e. there is a new or a newa statement). for simplicity we assume that new statements only create object instances. constructors are assumed to be called separately. calls to constructors are handled as any other method call. csm denotes the set of creation sites reachable from the entry point of the method m control flow graph.



at runtime, region activity is related to the execution of computational units(e.g., methods or threads). in an single-threaded program, where each region is associated with one method, there is a region stack, where the number and ordering of active regions corresponds exactly to the appearances of each method in the call stack. in a multi-threaded program, where regions are associated with threads and methods, there is a region tree which branches are related to each execution thread. in this paper, we assume that threads do not share regions, that is, threads only interact through the immortal memory.



programming with scoped-memory management is difficult and error-prone. one solution is to statically check whether a program satisfies the restrictions above. this approach is followed in, where a type system is proposed. here we propose to automatically infer scopes by static analysis and automatically instrument the program with the appropriate region-based allocations in such a way the restrictions imposed by the scoped-memory management scheme are fulfilled by construction.



based on the information above we can synthesize a memory organization that associates a memory region rm with each method m in such a way the restrictions imposed by the scoped-memory management scheme are fulfilled. the properties of escape analysis ensure that the lifetime of objects allocated by creation sites captured by a method m does not exceed the lifetime of m itself. that is, no object captured by m can be pointed-to by an object captured by a method(transitively) calling m. thus, the memory referenced



on the contrary, our instrumentation fully exploits the result of the scope analysis in terms of call chains, by dynamically mapping creation sites to a prefix of the region stack at runtime via the registering mechanism. the actual region where an object is allocated in is determined by the implementation. one possible strategy consists in allways allocating objects in the region of the method that captures them(that is, the last one in the prefix). this strategy produces regions which sizes tend to be bigger for the leafs of the call tree, that is for those methods with shorter lifetimes, rather than near the root. in other words, it minimizes the lifetime of allocated memory.



to generate the transformed program, we proceed as follows. we first use the flex harpoon compiler to perform the escape analysis. the output of flex is used to compute the capture function. we have developed an eclipse plug-in that takes as input the original program and the capture function, traverses the syntax tree of the program, and generates the transformed one. the transformed code can be easily integrated into a test suite that provides a software platform(java classes) with the appropriate wrappers for executing the program. the test platform simulates the behavior of the different memory allocation algorithms by using the fragmentation models presented in the previous section. the classes have been developed in such a way they can be parameterized in many ways, in particular, by different allocation



our instrumentation offers a light-weight mechanism for gathering information about and controlling memory allocation at run-time. in this paper, we have focused on using it for analyzing memory fragmentation for different allocation algorithms. nevertheless, it can be used for other purposes such as measuring the number of object intances, region sizes, allocation time, etc.



