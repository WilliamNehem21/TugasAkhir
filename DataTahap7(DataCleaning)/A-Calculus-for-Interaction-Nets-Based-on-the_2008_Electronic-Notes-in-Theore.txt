interaction nets are graph rewriting systems which are a generalisation of proof nets for classical linear logic. the linear chemical abstract machine(cham) is a term rewriting system which corresponds to classical linear logic, via the curry-howard isomorphism. we can obtain a textual calculus for interaction nets which is surprisingly similar to linear cham based on the multiplicative fragment of classical linear logic. in this paper we introduce a framework based on the linear cham to model interaction net reduction. we obtain a textual calculus for interaction nets that is closer to the graphical representation than previous attempts.



interaction nets are graphical rewriting systems, defined in a very similar way to term rewriting systems: they are user-defined by giving a signature and a set of rules over the signature. at the origin, interaction nets were inspired by linear logic proof nets, specifically the multiplicative part. since interaction nets were introduced by lafont in 1990 there has been a wealth of theory and applications developed(see for instance[3,6,4,10,12,9] for just a sample).



proposed for interaction nets. although these calculi destroy the graphical advantages, they do allow an easy way of writing them. in particular, they can provide a basis of a programming language, and they also serve to provide a language that is more familiar to develop proofs of properties. in a calculus of interaction nets was proposed, based in part on the syntax that lafont gave.



the rest of this paper is structured as follows. in the next section we recall some basics on interaction nets. in section 3 we review the linear chemical abstract machine. section 4 is devoted to representing interaction nets in the linear chemical abstract machine. section 5 is about cost models, and we conclude the paper in section 6.



free ports: for every free port, we connect a principal port of a fresh agent whose arity is 0. we use t, s, u,... to range over these fresh agents. this is a pre-processing step that must be performed on the net being translated.



in a textual calculus for interaction nets was proposed. the main difference between this calculus and our calculus is in the way the rewrite rules are represented. in the textual calculus, fresh names are introduced according to occurrences of names in a rule, even if the occurrences are not for connections between auxiliary ports. therefore, the number of reductions will be increased according to the number of names which are not for connections between auxiliary ports in rules at most.



compared with the number of reductions in our calculus, we find that the number of reductions has increased by two(see example 3.2). this is because the name x is used not only for connections between auxiliary ports in these rules respectively and therefore some substitutions for these names are needed.



in this paper we have given a new calculus for interaction nets that we believe is closer to the graphical framework than extant calculi. we have also made a first attempt to study the cost of an interaction net computation. current work is now devoted to building programming languages around this framework, and also using the framework to show properties of existing systems of interaction.



