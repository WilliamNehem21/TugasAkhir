context-aware computing, in which mobile programs adapt their behavior to changes in their environment, is an important emerging computing paradigm. directly reusing formal models for mobility prevents easy specification of context-based interactions because the primitives are tailored to mobile interactions. however, because context-aware applications often operate in a mobile environment, adapting such a mobility model to account for context-aware interactions allows us to reuse the mobility constructs and portions of the proof logic. our approach specializes mobile unity to provide constructs that allow reasoning about the manipulation of and interaction with the context. the resulting model, context unity, inherits many of the features of mobile unity, including its notation and proof logic.



current systems and applications. section 3 briefly reviews the mobile unity model. section 4 overviews the concepts fundamental to context unity, and presents its formalization via a simple context-aware system. finally, discussions appear in section 5 and conclusions in section 6.



our view of context focuses on providing applications with flexible mechanisms for defining individualized contexts that are transparently maintained as the environment changes. this view of the context encompasses the definitions used by current applications and systems. to review, the context is defined by any information available on connected devices(both traditional context information and arbitrary data). one of the most important aspects of our context definition stems from the observation that individual applications demand different things from their environment. for this reason, we define context from the perspective of a single component, taking an egocentric view of the world. the key ramification of this decision is that not every



while the availability of systems and applications for context-aware computing has rapidly increased, no formal model for their behavior has emerged. the time has come to explore context-awareness from a formal perspective. the notation and proof logic of the resulting model should facilitate reasoning about context-aware programs formally, yet the model should be similar enough to actual programming languages to transition easily to an implementation. in the next section we review the mobile unity model on which we base context unity.



the remaining two programs in the system, loader(i) and unloader(j) are simple programs that each contain one assignment statement. in loader(i),a value is prepared to be loaded onto a cart; in unloader(j), a value is removed from the system. the operation of these two programs is more interesting when we consider how these three programs interact. the components section of a mobile unity system defines the programs that make up the system and their initial locations. in this example, the system contains two carts(indexed as cart(1) and cart(2)), one loader, and one unloader. the loader and unloader have specified initial locations, while the carts initial positions are unrestricted.



as indicated previously, the goal of this work is to adapt a formal model of mobility to the context-aware environment to allow reasoning about programs that adapt their behavior to their changing context. given that we are adapting mobile unity to the context-aware environment, the tools at our disposal include mobile unity programs(units of modularity), variable and variable assignment, and the ability to specify interactions between programs. in this section, we introduce the details of the notation for expressing context-aware systems in context unity through the use of a detailed example. after the discussion of the basic program and notation, we discuss the power of the nondeterministic assignment statement in defining contexts through an extension of the example program. we then present options for defining relationships between a program and its context. finally, we discuss how a context unity program can be reduced to mobile unity.



non-deterministic assignment statements can also be used in the resolve section of the context to project changes onto non-deterministically selected variables. while not immediately useful in the context of our example program, we can imagine the case when multiple unloaders are at the same location. the context variable u might actually reflect a particular unloader, but in the projection phase, the cart only has to be sure that it unloads onto an unloader at the location d with no current load. an example resolution rule for an unloader might be:



context unity as presented in this paper represents the introduction of a new model for context-aware computing in a mobile environment. the notation used to express context definitions and resolutions in our example programs, while quite expressive, may at times appear complex and difficult to read. further refinements to the context unity model will include constructs to simplify this notation; for example, the need to shadow variables to be able to react to their changing state will be included in the model. the full notation is shown in this paper to completely and clearly describe the steps necessary to model context-awareness. section 4 also defined a few consistency semantics for reflecting context and projecting onto the context, specifically eager and lazy transfer semantics. exploring additional possible semantics for these two relationships may provide programmers more flexibility and control over the definition and use of their defined context.



this research was supported in part by the national science foundation under grant no. ccr-9970939 and by the office of naval research muri research contract no. n00014-02-1-0715. any opinions, findings, and conclusions or recommendations expressed in this paper are those of the authors and do not necessarily reflect the views of the national science foundation or the office of naval research.



