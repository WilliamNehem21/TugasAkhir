once the et is built, the debugger basically traverses it by using some search strategies[19,10,14,1,13], and asking the oracle whether each question found during the traversal of the et is correct or not. given a program with a wrong behavior, this technique guarantees that, whenever the oracle answers all the questions, the bug will eventually be found. if there exists more than one bug in the program, only one of them will be found with each debugging session. of course, once the first bug is removed, algorithmic debugging may be applied again in order to find another bug. let us illustrate the process with an example.



the first part of our study consisted in the selection of the debuggers that were going to participate in the study. we found thirteen algorithmic debuggers, and we selected all of them except those immature enough to be used in practice(see section 4.1). our objective was not to compare algorithmic debugging-based techniques, but to compare mature and usable implementations. therefore, we have evaluated each debugger according to its last implementation, not to its last report/article/thesis in order to check all the possibilities offered by the debuggers. we also identified some desirable properties of declarative debuggers that are not implemented by any debugger. some of them have been proposed in related bibliography and others are introduced here. the desirable features of an algorithmic debugger are:



down, top-down zooming, heaviest first, subterm dependency tracking and dynamic weighting search) have arisen to minimize both the number of questions and the time needed to answer the questions. firstly, the number of questions can be reduced by pruning the et(e.g., the strategy divide and query prunes near half of the et after every answer). secondly, the time needed to answer the questions can be reduced by avoiding complex questions, or by producing a series of questions which are semantically related(i.e., consecutive questions refer to related parts of the computation). for instance, the strategy top-down zooming tries to ask questions related to the same recursive(sub)computation. a survey of algorithmic debugging strategies can be found in.



tracing subexpressions has two main advantages. first, it reduces the search space because the debugger only explores the part of the et related to the wrong subexpression. second, it makes the debugging process more understandable, because it gives the user some control over the bug search.



algorithmic debugging can become too rigid when it is only limited to questions generation. sometimes, the programmer has an intuition about the part of the et where the bug can be. in this situation, letting the programmer to freely explore the et could be the best strategy. it is desirable to provide the programmer with the control over the et exploration when she wants to direct the search for the bug.



a mixture between main and secondary memory would be desirable. it would be interesting to load a cluster of nodes in main memory and explore them until a new cluster is needed. this solution would take advantage of the speed acquired by working on main memory(e.g., keeping the possibility to apply strategies on the loaded cluster) while being able to store huge ets in secondary memory.



it is important to note that in this part of the study our objective was not to compare the debuggers against real programs. this is useless, because with the same et, independently of its size, all the debuggers find the bug with the same number of questions(if they use the same strategy). our objective was to study the behavior of the debuggers when handling different kinds of ets. in particular, we produced deep, broad, balanced and unbalanced ets with different sizes of nodes. with the experiment we were able to know how efficient the debuggers are when storing the et in memory, and how scalable they are when the size of this et grows up.



hat-delta stores the art into a file and traverses it during the debugging process. then, we considered the size of the whole art rather than the size of the implicit et. since the art is used for other purposes than algorithmic debugging(e.g., tracing) it contains more information than needed.



buddha also generates the whole et in main memory. in this case, we used a shell script to measure the physical memory used by the data structures handled by the debugger. it might produce a slightly unfair advantage in that in-memory representation of the et is likely to be more compact than any other representation stored on disk.



and. we contacted with the developers of the java interactive visualization environment(jive) and the next release will integrate an algorithmic debugger called javadd. this tool uses the java platform debugger architecture to examine the events log of the execution and produce the et.



hat-delta: the old algorithmic debugger of hat was hat-detect. hat-delta has replaced hat-detect because it includes new features such as tree compression and also improved strategies to explore the et. nevertheless, some of the old functionalities offered by hat-detect have not been integrated in hat-delta yet. since these functionalities were already implemented by hat-detect, surely, the next release of hat-delta will include them. these functionalities are the following:



the functionality comparison has produced a precise description of what features are implemented by each debugger(hence, for each language). from the description, it is easy to see that many features which should be implemented by any algorithmic debugger are only included in one of them. for instance, only the mercury debugger is able to trace subexpressions, only hat-delta implements tree compression, only ddt has a gui and only it allows the user to graphically explore the et.



despite the big amount of problems we have identified, we can also conclude that there is a continuous progression in the development of algorithmic debuggers. this can be easily checked by comparing the dates of the releases studied and their implemented features. also by comparing different versions of the same debuggers(for instance, from hat-detect to hat-delta many new functionalities have been added such as tree compression and new search strategies).



the comparison presented here only took into account objective criteria that can be validated. subjective criteria that can be interpreted were omitted from the study. for instance, we did not talk about how easy to use or to install the debuggers are. this is another quirk of maturity, but we let this kind of comparison for future work.



