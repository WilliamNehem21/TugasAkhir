ance between competing interests(e.g. sharing available capacity). from a computational point of view, the problem is to find the values of parameters(variables) in the system that achieve such an optimum, or balance point. this must be done dynamically, and often as a distributed calculation, in response to changes in the environment. for example, a routing protocol must continually respond to changes in availability of links, adjusting flows accordingly.



although we do not report on it directly in this paper, we believe there is much value to be gained in developing high level(programming) languages to analyse and organise network functionality and structure. advantages we anticipate from such an approach include better statement of management issues, exposure of options for refinement into different protocols, comparison of different design options within a common language framework, and precision about aspects such as the amount of network state, numbers of variables, and naming structure. here we restrict our attention only to a model of interaction that should underpin such a language. we draw on the mathematics of optimisation, which puts our work in parallel with other recent work using optimisation theory in the design and analysis of networks and protocols[9,11].



an outline of our general approach is as follows. a network task for which a distributed solution is sought is first formulated as a mathematical optimisation problem, involving an objective function and some constraints. the problem is then relaxed by incorporating the constraints into the objective function. the modified objective function is called the lagrangian, and is standard in optimisation theory. it depends on the variables of the original objective function, and an additional set of dual variables which quantify the cost of violating the constraints. the problem then becomes to find a saddle point of this new function, rather than a minimum or maximum. the lagrangian can usually be written as the sum of different components, and its structure can be described as a graph highlighting the connections between these components. this graph illuminates the structure of the original problem in several respects: it allows for decomposition, where different parts of the graph are considered as subproblems; these subproblems can then be distributed by allocating them to different nodes or processors in the network; it specifies the communication channels that must be supported between the subproblems; it suggests distributed algorithms; and its structure exposes different axes of interaction and feedback in the system. different decompositions of the component graph lead to different algorithms, and in this way the design space for solving the original problem is laid out.



as just mentioned, the general mathematical setting for our model is actually more general than optimisation. we study the problem of finding a saddle point of a convex-concave function of typically many real-valued variables. we usually call this(real-valued) function, l, the lagrangian, on the basis that it can often(but not always) be derived from a lagrange relaxation of an optimisation problem. in this section we first present general saddle point conditions, then specialise these to smooth approximations of lagrangian functions derived from linear programs.



to explain how a saddle point problem can be distributed we introduce a running example. we seek the shortest paths to a given destination in a communication network, which can be formulated in the standard way as a minimum cost flow linear program, with lagrangian of the form(3). the flow over link j is determined by a primal decision variable xj, while the dual variable yi becomes the distance(or cost) from node i to the destination node. a cost of cj per unit flow is imposed at link j, and flow bi is injected into node where we use the notation yi and xj to indicate that a variable is owned by another node. thus, from the point of view of node 4, y2 is perceived as environmental. a locally perceived lagrangian changes whenever neighbouring nodes change the values of their decision variables. if a node has found a saddle point of its local lagrangian, the derivatives(5) with respect to the variables it owns are zero. because every decision variable in the global lagrangian is owned by exactly one node, it follows that the network as a whole is in a saddle point if and only if all nodes are simultaneously in a saddle point of their local lagrangian. each local saddle point problem is formally similar to the global saddle point problem, and the decomposition into sub-problems can, in general, be continued recursively.



