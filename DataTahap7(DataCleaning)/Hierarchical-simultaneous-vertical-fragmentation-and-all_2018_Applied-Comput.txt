abstract designing an efficient distributed database system (ddbs) is considered as one of the most challenging problems because of multiple interdependent factors which are affecting its perfor- mance. allocation and fragmentation are two processes which their efficiency and correctness influ- ence the performance of ddbs. therefore, efficient data fragmentation and allocation of fragments across the network sites are considered as an important research area in distributed database design. this paper presents an approach which simultaneously fragments data vertically and allocates the fragments to appropriate sites across the network. bond energy algorithm (bea) is applied with a better affinity measure that improves the generated clusters of attributes. the algorithm simultane- ously generates clusters of attributes, calculates the cost of allocating each cluster to each site and allocates each cluster to the most appropriate site. results show more efficient clustering and allo- cation which gives better performance.



allocation. fragmentation tries to split data into fragments, which should be allocated to sites over the network in the allo- cation stage. the process of fragmentation falls into two cate- gories: vertical fragmentation and horizontal fragmentation. vertical fragmentation (vf) is partitioning relation r into disjoint sets of smaller relations while horizon- tal fragmentation (hf) is partitioning relation r into disjoint tuples. the allocation problem involves finding the optimal distribution of fragmentation to set f on site set s. there are four data allocation strategies applicable in a distributed rela- tional database: centralized, fragmentation (partition), full replication, and partial replication (selective) [10]. when data is allocated, it might either be replicated or maintained as a single copy. so, fragment allocation can be either non- redundant or redundant. under a non-redundant allocation [6] is a methodology for the design of distributed object data- bases that includes an analysis phase to indicate the most ade- quate fragmentation technique, a horizontal class fragmentation algorithm, and a vertical class fragmentation algorithm. the analysis phase is responsible for driving the choice between the horizontal and the vertical partitioning techniques, or even the combination of both, in order to assist distribution designers in the fragmentation phase of object databases. baiao et al. [8] presents a three phased methodology for the design of distributed database that contains analysis phase, horizontal fragmentation algorithm phase, and vertical class fragmentation phase. the method illustrated in abuelya- man [7] experimentally shows that moving an attribute that is



allocation and fragmentation are interdependent problems where solving them simultaneously is difficult but results in bet- ter performance of applications. to the best of our knowledge, bea is not applied to simultaneous fragmentation and alloca- tion. since in vertical partitioning attributes which are usually accessed together are placed in one fragment, defining a precise measure of togetherness is critical. bea uses affinity of attri- butes to create clusters of attributes, which are the most similar. it starts with attribute usage (au) and query access (qa) matrices generates attribute affinity matrix (aff) and finally creates clustered affinity matrix (ca) by positioning and re- positioning columns and rows of attributes. the affinity mea- sure is too simple. the proposed affinity measure in bea is basi- cally based on simultaneous access of attribute ai and attribute



after generating aff using the described affinity measure, clusters of attributes are created using the split function. the split(aff) takes as input the aff matrix, permutes its rows and columns, and generates a ca matrix. the permutation is done in such a way to maximize the following global measure.



is the number of columns already placed in ca and try to place them in the remaining i + 1 positions in the ca. choose the placement that makes the greatest contribution to the global affinity measure described above. continue this until no more columns remain to be placed.



since the clustering result of bea is the split border between two sets of attributes, bea does not work efficiently for larger databases. therefore, we need a better approach to identify more partitioning candidates. as we infer similarity of two attributes when they have concurrent occurrence in a query, concurrent absence of them for the same query could also be considered as a weighted measure of similarity. fur- database play a key role in the performance of a distributed db. distance matrix (dm) is the asymmetric square matrix that reflects these costs which can be minimized using the method described in bentley and dittman [25]. multiplying dm in qa generates a new matrix in which the influence of communication costs between sites and query access per site is considered simultaneously and since dm is minimized dis- tance matrix then the resulted matrix will be the minimized query access (mqa) matrix.



the variable coef in the denominator is reflecting the effect of n01 and n10. there are four different possibilities. when n01 > 0 and n10 = 0, it indicates that for two attributes of ai and aj, all queries which access ai do not access aj. this means that these attributes have some level of similarity. as a result the sij should get greater values so the weighted mea- sure in the denominator, w2, should be negative. this is shown in lines 12 and 13 of algorithm 2. the same is for the case in



and n10 are greater than 0. this condition means ai and aj do not have the same behavior upon different queries which are accessing them. this has negative effect on the similarity, so the weighted measure in the denominator, w2, should be positive. this is shown in line 15. after calculating the aff matrix, the algorithm calls the split function which we described in section 2 and creates clusters of attribute.



distributed databases reduce cost of update and retrieval of information and increase performance and availability, but the design of ddbms is more complicated than designing cen- tralized database. one of the major challenges which greatly affects ddbs performance is fragmentation and allocation of fragments to sites. allocation and fragmentation can logi- cally be merged and done simultaneously. in this paper we proposed a method that merges vertical fragmentation and allocation. to achieve this goal we applied bond energy algo- rithm with a modified affinity measure in a hierarchical process and simultaneously calculated the cost of data allocation for each site and assigned fragment to the appropriate site. the use of the hierarchical process resulted in clustering sets of more similar attributes and better data fragmentation. on the other hand, by performing simultaneous cost calculation we took interdependency of data fragmentation and allocation into account.



