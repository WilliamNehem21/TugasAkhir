it has been shown by apt and kozen that this problem is in general undecidable. the best we can do is to restrict the verification to a particular class of systems and provide a method that is sound(but not necessarily complete) for this class. the systems that we are going to consider consist of a number of identical node processes. given n, the number of node processes present in the system, the general form of such systems is



in most practical situations we can expect the context f to describe some controller process that is put in parallel with the nodes. the uniform verification of the family of problems with such a context has been proven by german and sistla to be decidable. however, the algorithm provided is double exponential and therefore the verification is only possible for very small instances of a problem.



the work that is probably the closest to ours is. it considers systems of a similar structure to the one we use, and uses a model with synchronous communication between processes. the verification algorithm consists of two parts. the first creates a finite abstraction, which is independent of the number of processes present in the concrete system. this is similar to our method, but instead of using a fixed threshold z(introduced in section 4), it determines appropriate thresholds on-thefly(at the expense of compilation complexity). the second part of the algorithm evaluates the ctl-x specification on the abstract state machine.



failures are used in system analysis in order to allow verification of specifications that talk not only about safety of the implementation(i.e. what the system can do), but also about the availability of events(i.e. what the system cannot refuse to do); and



it is important to note that here we have presented only a subset of the csp syntax. however, since all our results are derived using operational semantics, they all apply to the full csp language provided the processes are non-divergent and contain no termination events. the syntax presented in this section is only used for our running example.



in this section we present a transformation method, which generates a system that is bisimilar to n odes(n). each state in the new system is a tuple of integer counters, each counting how many node processes are in a given concrete state. we start by introducing our running example, and then describe the transformation itself.



the task of the scheduler is to divide the cpu time between the different processes. let cores be the number of processors present in the system. then the scheduler, below, consists of cores interleaved processes core, each representing a single processor resource. we abstract away the details of the algorithm that the scheduler uses to decide which process should be given access to the cpu next(letting it pick any available process nondeterministically), and hence our analysis



the process core, below, models a single cpu resource. when core is idle it can run and become busy; and when busy, any of the events that imply that a process no longer needs cpu time(i.e. deschedule, block or terminate) brings it back to the idle state.



to create our implementation, we interleave all the node processes and put them in parallel with the scheduler process, synchronising on the common events. finally we rename all the events that imply that a process no longer needs cpu time(i.e. deschedule, block or terminate) to a single event stoprun since, for specification verification purposes, we need not to distinguish why a process no longer needs a cpu.



finally we would like our specification to say that we never have more than cores processes in the running state, i.e. the number of run events minus the number of stoprun events is never more than cores. further, if there is at least one process running, then it can stop running, so the event stoprun is not refused. finally, the events load and interrupt may or may not be available. hence we define



in the previous section we showed how to create an abstraction of a concurrent system by using unbounded integer counters. even though such an abstraction offers a dramatic decrease in the number of states by factoring the states with respect to bisimulation, it is likely that the state space will still be unbounded in size. more importantly, its size will still depend on n. in this section we present an improved abstraction method, where we introduce a threshold z for the values each of the counters can take.



we can easily generate canodesz for our running example. the counter abstraction will contain five counters, one for each of the states that a single node process can be in. below are the first two branches of the definition; the other branches are similar and can be found in appendix a.



of the counter-abstracted process canodesz. most of the parsing work is done by fdr: given a csp script, it produces the concrete state machine of a single node process. then the tool produces an output csp script identical to the original one with the exception that the original definition of the process n odes is replaced by its counter-abstracted version.



the csp script produced by tomcat for the running example is below. here states and transitions define the set of states and transitions of the abstract state machine, respectively. given a state s, incoming(s), self loops(s) and outgoing(s) are sets of transitions for which s is the end state only, both the start and the end state and the start state only, respectively. each member of these sets is defined



another possible area of improvement is the family of systems allowed for the application of our method. at the moment we do not allow the node processes to use the node identifiers inside their definitions, for otherwise the state space of the node processes would be dependent on n. this limits the number of systems that could be analysed using counter abstraction and fdr. we intend to address this problem using techniques from data independence[11,16] to collapse, within each node process, the type[0..n) of node identifiers to some fixed finite type t, and then to proceed using the methods described in this paper.



