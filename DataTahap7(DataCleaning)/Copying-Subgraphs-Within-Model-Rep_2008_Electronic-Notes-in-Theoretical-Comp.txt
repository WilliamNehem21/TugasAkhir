the set of operations in state-of-the-art graph transformation tools allows one to conditionally create and remove nodes and edges from input graphs. node attributes can be initialized or updated with information from other attributes, parameters or constants. these operations appear to be too restricted for expressing model refinements in a concise manner. more specifically, graph transformation lacks an operation for copying subgraphs(multiple connected nodes, including their attributes) to a new location in the host graph. this paper presents a case study that illustrates the need, a syntax and an informal semantics for such an operation. it also discusses how the operation was integrated in an existing graph transformation language. finally, it indicates how our ongoing effort towards the implementation of a model transformation language based on graph transformation makes optimal reuse of evaluation code for existing language constructs.



a model can be defined as a simplified representation of a part of the world, named the system. model repositories are databases with specialized support for storing and retrieving models. their main functionality consists of serializing their data into standard model exchange formats(like xmi), and exposing a query and transformation api(like ocl and jmi). any program with the purpose of creating or changing models can be called a model transformation. the purpose of this paper is to extend graph transformation such that model transformations can be programmed at a high level of abstraction while the low-level apis of mainstream model repositories are interfaced by means of compilers.



transformation to formalize the model transformation that defines this generation process in section 2, the need for a copy operator becomes obvious. section 3 presents the syntax and semantics of the proposed copy operator as an extension to story diagrams. additionally, the section briefly compares two approaches for extending an existing story diagram engine. the next section refers the reader to related work while the paper concludes with a summary of the contributions and lessons learned.



therefore, current development is focussed on a model-to-model transformation approach that leaves the code templates unchanged. story diagrams are used to transform models conforming to the profile discussed in section 3.1 into models conforming to the sdm profile without the copy operator. the generated story diagrams realize the behavior of the copy operator by means of a traceability metamodel and the introduction of additional stories and control structures. the complete transformation is still complex but thanks to the use of an intermediate layer and the modularity mechanisms of story diagrams, the complexity can be decomposed into manageable parts. apart from the facilities for manageing the transformation complexity, the model-to-model transformation approach is promising due to portability opportunities:



java appears to be promising but the validation of this work is still in progress. this work builds upon the case study from hoffmann by considering the attributes and links from syntax nodes within method bodies in more detail. we are evaluating whether or not the use of control structures such as a story diagram<<loop>> leads to more complex rules than those making use of graph variables.



