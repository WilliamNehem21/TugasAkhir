we have carried out experiments with pips, a source-to-source compiler, and aspic, an abstract interpretation tool, using 71 test cases published by gonnord, gulwani, halbwachs, jeannet& al. the number of invariants found by these tools goes up from 28 to 69 for pips and from 44 to 62 for aspic when our heuristics is used as a preprocessing step. the total execution time of pips is only marginally increased, going up from 76 to 103 s, thus showing the practical interest of our optimization technique.



an alternative approach consists in computing state transformers, i.e., transfer functions, instead of state predicates. each program command, elementary or compound statement or procedure call, is approximated by an affine transformer. each function is analyzed once and its transformer is reused at each call site. preconditions are then propagated using the transformers. such an approach is useful in order to obtain a modular analyzer and to limit analysis times. affine transformers are commonly used, as they offer good compromise between accuracy and



we propose to address this issue with control graph restructuration. in section 4, a general control node splitting algorithm is introduced and we discuss how to use it to refine invariants found by convex analysis. the results of our experiments are shown in section 5, while related work is discussed in section 6.



let gi= val z gi. as gi is the complementary of a convex polyhedron, it is a polyhedron itself so it can be partitioned into a finite set of convex polyhedrons gi,1,..., gi,ji. so pi={gi, gi,1,..., gi,ji} is a partition of val. the partition taken on control point k is: if at all, and the memory state on these controls is well known(theorem 4.1). this assumption proved reasonable in most of our test cases. despite this, the main drawback of this technique is the important number of created controls and transitions, which limits its application field to transition systems whose average number of transitions per control node is limited.



the algorithms described in this paper have been tested with the program analyzers pips 2[20,26] and aspic 3, on a set of 71 previously published test cases 4, most of them taken from references given below in section 6, a few other from henzinger& al.[19,4], n. halbwachs[16,18,17], and some protocol descriptions[25,23,6]. as



among these 71 cases, pips was able to provide the expected cycle invariants directly for 28. using our restructuration techniques, we were able to run 41 additional cases without suffering accuracy loss on the first group of cases. finally, it failed on two cases, both with and without restructuration.



aspic was able to compute the expected cycle invariants for 44 out of our 71 test cases using direct encoding. unsurprisingly, these results are better than those obtained with pips since aspic is a program devoted to polyhedral invariant computation. 21 more test cases are properly analyzed using partitioning techniques, while aspic still failed on 6 cases.



after restructuration, the resulting systems have typically between 2 and 10 control states, which is in the scope of our analyzers. the subway example, more complex, grew much bigger(up to 23 controls) and its analysis, while correct, is very slow compared to what could be achieved with manual control restructuration(10 seconds vs. 0.5 seconds using 5 control states).



102.77 seconds with restructuration(34% slower). thus, it appears that the increase in time due to restructurations does not necessarily lead to an exponential blowup as feared by laure gonnord, at least for loops with no more than five cycles.



on the other hand, several techniques improve the computation of loop invariants without any control flow restructuration. the work of kelly& al. introduced many concepts and algorithms in the computation of transitive closures. however, they consider a different set of applications and focus mostly on the underapproximation of transitive closures instead of overappromations. laure gonnord improves results given by linear relation analysis by identifying categories of loops whose effects can be computed exactly, via abstract accelerations[11,10]. also, sven verdoolaege& al. have developed techniques to compute more accurately the transitive closures of a class of parametrized relations that captures presburger arithmetic and affine transformers on integer variables, with a special focus on the case of parallel paths.



we present a simple algorithm to split control nodes to refine a program control flow graph, over a partition of the set of variable valuations(section 4.1). theorems are given about the invariants of created control nodes, and to ensure the restructuration does not change the behavior of the program(section 4.2).



we also give heuristics concerning the choice of partitions in the case of convex transition systems, based on the transition guards(section 4.3). this approach is tested on a set of previously published examples, yielding encouraging results(69 examples worked out of 71, section 5).



future work will address performance issues. the restructuration given by our heuristics tends to create a large number of controls and transitions, which limits its scope to systems whose number of parallel loops is limited. this complexity is useless in several cases because the same invariant accuracy is obtained with much simpler, manually restructured systems. we were also able to design transition systems on which the proposed partition is not suited, leading to the analyzer failure, while a better, simpler partition choice would have worked. as part of future work, we therefore want to design better partition strategies to handle a wider range of transition systems.



