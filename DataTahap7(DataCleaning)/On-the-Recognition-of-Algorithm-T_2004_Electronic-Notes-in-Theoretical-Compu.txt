hardware-software codesign: if we recognize in the source program a piece of code for which we have a hardware implementation(e.g. as a coprocessor or an intellectual property) we can remove the code and replace it by an activation of the hardware.



the aim of this paper is to propose a method in order to perform some algorithm template recognition and to find out how the instantiation is performed. this important issue have never been tackled before in the framework of algorithm recognition. this preliminary work is based on the framework presented in. as in most algorithm recognition methods, the first step is for all dependences in the sare. if the domains are bounded, a schedule exists iff the given sare has no dependence cycle. the scheduling problem for parametrically bounded sares is undecidable. however, the existence of affine schedules for sares is decidable. note that in general, these schedules have a parametric latency. we only consider in this paper sares with a schedule.



consider two scheduled sares s and s', with s a template. suppose that we are given a bijection between the output variables of the two sares and a mapping between input variables. these pairings must have the property that corresponding variables have the same domain.



and template outputs, finding out the substitutions for the variables. we will show that this procedure is correct and complete. however, it may take a parametric number of steps to terminate. the next section proposes to address this termination problem by the construction of an automaton.



the matching procedure unfolds the recurrences defined by the sare, thus may take a parametric number of steps. the idea of this semi-algorithm, following the approach of, is to implement the procedure with an automaton and analyze the automaton, without executing it, in order to construct the set of unifiers. the automaton, a memory state automaton(msa) is described below.



(v) can be applied, because reachability sets were already computed. one can notice that the msa has the same transitions than the matching procedure, with the same context in firing relations. so it computes the same set of unifiers, which is correct(see correction proof in section 4). this justifies steps(vii) and(viii).



