more specifically, our abstraction mechanism uses affine constraints, i.e. polyhedra, to specify preand postconditions as well as state transformers. we present an algorithm to compute the transitive closure of such a state transformer, and we illustrate its performance on various examples. our algorithm is simple, based on discrete differentiation and integration: it is very different from the usual abstract interpretation fixed point computation based on widening. experiments are carried out using previously published examples. we obtain the same results directly, without using any heuristic.



each program command, elementary or compound statement or procedure call is approximated by an affine transformer. the underlying mechanism is similar to but extended from the states to state transitions. the idea of transformers is quite general and is also used, for instance by boigelot& al..



the set of possible program states, before a command is executed, is defined by a precondition. the set of program states after the command execution is defined by a postcondition. the postcondition is the image of the precondition by the command transformer. a legal affine abstract postcondition contains the effective postcondition, i.e. it is an over-approximation.



let us take the toy example described in and recently reused by. a robot car must follow autonomously a track painted on the floor. in case it loses the track, it should not crash against a wall; however it is not stopped right away since the track might be found again. the car should not accelerate too much when it is looking for the lost track. the safety controller must ensure that a limited amount of time is allowed to search the painted track at bounded speed. since time and speed are bounded in the track search mode, the car is safe if the track is far enough from the walls.



using polyhedra instead of presburger arithmetic, we do not claim to obtain more accurate results than others. our philosophy is to use real-life cases, avoiding artificial or contrived examples. we only claim our simple and direct algorithm gets the same results as iterative approaches like widening.



the concept of abstract acceleration introduced by gonnord in is very similar in its goal to our algorithm, but it is implemented by pattern matching for different specific cases(see chapters 5 to 7 in), whereas we can deal with function calls and any control construct as the loop body transformer is computed in a modular way. also, the exploitation of the accelerated cycles is part of a heuristic and not a program transformation as in section 3.5. and the final result is obtained iteratively. all examples found in are successfully processed by our algorithm, including the swimming pool.



kelly et al. present an algorithm to compute the transitive closure of a relation encoded by a presburger formulae. this heuristic includes the notion of d-form relation which leads to an explicit transitive closure. it is stated that any relation can be put in a d-form at the expense of accuracy. we show here that it is not necessary to put the relation into a d-form to obtain an explicit transitive closure. we explain how to transform any relation into constraints about the state evolution and finally we explain how to get precise results by postponing convex hull operations.



technique in a dual way to obtain predicates over arrays such as those found in. monotonicity analysis has also been used to extend induction variable detection, the inverse transformation of strength reduction. basically, assignment statements nested in loops are monotonic if the value assigned increases from one iteration to the next. the exact value of the difference is abstracted by its sign. this information does not lead to loop invariants but is useful for dependence testing and for array bound checking. we could derive the same kind of information from t+ by introducing the difference variables and by eliminating the program variables.



a simple algorithm to compute affine invariants over integer scalar variables in while loops is presented. its development and refinements have been mostly application driven, targeting the automatic program analysis and transformation domain. its low complexity is key to addressing large scientific codes of up to 100 kloc. our experience shows that it performs well on standard program test cases, but not on complex automata whose states and transitions cannot be rewritten with simple c encodings.



