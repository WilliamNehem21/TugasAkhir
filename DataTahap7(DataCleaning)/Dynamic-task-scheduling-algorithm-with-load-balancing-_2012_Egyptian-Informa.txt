the problem of task mapping in heterogeneous systems is finding proper assignment of tasks to processors in order to optimize some performance metric such as the system utilization, load balancing and the minimum execution time[1,2]. therefore, scheduling algorithm is needed to overcome this restriction. according to the task scheduling problem, the application is represented as a directed acyclic graph(dag) where nodes(or tasks) represent the needed computation and edges represent the communication between tasks. for each node in the dag, a weight is assigned corresponding to computation cost, and weights for edges are assigned corresponding to communication cost between nodes. on the other hand, the task scheduling can be either static or dynamic. in the static schedul-



the work in this paper concerns the dynamic scheduling for heterogeneous computing system(hc). an algorithm has been developed to produce efficient task scheduling and mapping for tasks on heterogeneous machines which is called clustering based heft with duplication(cbhd). the developed cbhd algorithm is considered an amalgamation between the triplet clustering algorithm, by clustering tasks into interrelated group, and the heft algorithm by order tasks in each cluster according to rank value, and some tasks may be duplicated on processors in order to improve the performance of scheduling algorithm specially load balance, and in the same time, overcome computation overhead.



the paper is organized as follows; the heft and the triplet clustering algorithms will be introduced in more details in sections 2 and 3 respectively. the developed cbhd algorithm has been introduced in section 4. in section 5, the performance evaluation and comparative study among the developed cbhd, heft, and triplet cluster algorithms will be introduced. the conclusion is introduced in section 6.



according to method 2.1: each task in a cluster has id. the clusters tasks which are belong to a path of length 2 in the task graph are grouped, where a path of length 2 is composed of three tasks and is called a triplet. once all triplets in the task graph are generated, triplets are sorted in order to consider large communicating edges first. triplets are sorted first by their degree and second by their decreasing amount of communication produced by its three tasks. a geometric approach can be used to find any possibilities to minimize number of clusters.



the application subtasks are grouped based on interconnection to minimize communication overhead. on the other hand, the processors of underline system which have the same characteristics(network, processor speed, etc.) are grouped into clusters(i.e. convert the heterogeneous underling system into set of homogenous subsystem).



where processor pi is the main processor for executing the task during the mapping stage, and pj is the processor which runs the duplicated task. once the duplicated task is finished on any processor, the tasks which depend on it will start executing immediately, and all the machines will be working in the same time. so the developed algorithm achieves full utilization and load balancing among processors in the underline system, and keeps minimum makes pane.



a simulator called distributed algorithm simulator1 has been used. this simulator involves building a graphical tool that enables to simulate different network topology like linear, ring and mesh, or any other network topology supported with message passing architecture. additional experiment outcome analysis features could also be supported in this simulator by the programmer. this simulator is executed using computer pentium 4, cpu 1.86 ghz, and 504 mb of ram.



simple dynamic task scheduling with less computation complexity than that the triplet algorithm. on the other hand, the produced makespane of the triplet algorithm in most cases is the same or larger than the heft algorithm, but the triplet cluster algorithm almost satisfies both the load balancing between processors, and processors utilization. according to the comparative study among the developed cbhd algorithm, the triplet algorithm and the heft algorithm, it is found that the developed cbhd algorithm outperforms the heft and triplet algorithm by decreasing the makespane by 2.5%. it also achieves better load balancing than the heft algorithm by 70%, and it increases processors utilization by 10% with respect to the heft and triplet algorithms. the cbhd algorithm has developed into two versions, without and with duplication. the cbhd algorithm without duplication may increase the makespane which results in lower performance. the cbhd algorithm with duplication has achieved minimum makespane, maximum utilization and load balancing which is considered



