based on previous research, it seems that the activities performed by and the engagement of the students matter more than the content of the visualization. one way to engage students to interact with a visualization is to present them with prediction questions. this has been shown to be beneficial for learning. based on the engagement taxonomy and benefits of the question answering during the algorithm visualization, we propose to implement an automatic question generation into a program visualization tool, jeliot 3. in this paper, we explain how the automatic question generation can be incorporated into the current design of jeliot 3. in addition, we provide various example questions that could be automatically generated based on the data obtained during the visualization process.



according to hundhausen et al., the activities performed by and the engagement of the students matter more than the content of the visualization. thus, a research program has been laid down in which the level of engagement(engagement taxonomy) and its effects on learning with algorithm or program visualization are being studied. one of the ways to engage students to interact with a visualization is to present them with questions, which ask the students to predict what happens next in the execution or visualization(level 3: responding). this has been shown to be beneficial for learning as well[3,11]. furthermore, interaction and question answering during learning have been found to have a positive influence on problem-solving ability in the given domain. in addition to the benefits



based on the found benefits of the question answering during visualization, we propose to implement an automatic question generation into a program visualization tool, jeliot 3. in this paper, we explain how the automatic question generation can be incorporated into the current design of jeliot 3. in addition, we provide various example questions that could be automatically generated based on the data obtained during the visualization process. finally, conclusions and future directions are presented.



jeliot 3 is a program visualization system that visualizes the execution of java programs. it has been designed to support the teaching and leaning of introductory programming. jeliot visualizes the data and control flow of the program. in a classroom study, it was found that especially the mid-performers benefited from the use of jeliot while the performance of others was not harmed.



could allow the user to select the variables or expression types that should generate questions and thus focus the questions on the selected concepts or parts of the program. similarly to related systems(e.g. problets and wadein(see section 4)), we could adapt the question generation, visualizations and explanations based on the performance data of the user. we have done preliminary work on this direction, and it is described in.



kumar et al. have developed a system, called problets, that generates exercises related to programming concepts(e.g. loops, pointers etc.) from language independent templates, thus supporting multiple programming languages. these exercises present a program and ask the user to identify the lines that generate output and determine what is the output during the execution of the program. in exercises regarding pointers, user needs to identify the code lines that are either syntactically or semantically erroneous. these exercises are delivered in the form of an applet that is connected to a server that handles the exercise generation and stores information related to the performance of the user. this is done in order to analyze what kind of exercises to present to the user.



when compared to the question generation in jeliot 3, we can identify certain similarities and differences. both ask questions related to the execution of a program. however, problets are related to the program code, whereas questions in jeliot can be related to the program code and visualization. this can give more variation in the question types as seen in section 3. jeliot supports dynamic aspects of the program execution, for example, user can give input to the program and the questions are adjusted accordingly because they are based on the information acquired during the interpretation process. currently, jeliot supports only java. however, if interpreters for other programming languages are integrated into it, the question generation is language independent. problets support multiple programming languages because of the language independent templates that are translated to the programming language in question. problets can be used for learning and testing similarly as the automatic question generation in jeliot 3.



wadein ii visualizes the expression evaluation in c language. the system consist of two modes: exploration and knowledge evaluation. the question generation is related to the knowledge evaluation mode in which student needs to demonstrate the understanding of the expression evaluation by simulating it. the task is to simulate the evaluation of the expression, whereas in jeliot, a user is asked to predict what will happen next in the given context of the program and its execution.



as future work, we implement the proposed question types and test their usability. we also plan to study the use of question answering both during individual as well as collaborative learning of programming concepts and programming. we will variate the level of engagement to analyze its effects to the learning and collaboration. furthermore, we can test how different types of questions support the understanding of programs and programming learning. for example, should the questions be related to data flow or control flow, or both. in addition to this, we are planning to use the feature in distance education as a part of the summative evaluation.



