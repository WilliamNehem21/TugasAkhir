in this paper, we consider a coloring as a function that assigns a color to a vertex, regardless of the color of its neighbors. the convex recoloring problem finds the minimum number of recolored vertices needed to turn a coloring convex, that is, every set formed by all the vertices with the same color induces a connected subgraph. the problem is most commonly studied considering trees due to its origins in the study of phylogenetic trees, but in this paper, we focus on general graphs and propose a grasp heuristic to solve the problem. we present computational experiments for our heuristic and compare it to an integer linear programming model from the literature. in these experiments, the grasp algorithm recolored a similar number of vertices than the model from the literature, and used considerably less time. we also introduce a set of benchmark instances for the problem.



the convex recoloring problem has its origins in the study of phylogenetic trees. a phylogenetic tree reconstructs the evolutionary history of a set of species that have common characteristics. the leaves of these trees are known organisms, and the remaining vertices are hypothetical ancestors. an important feature of such trees is that similar organisms are expected to appear close to each other.



the problem is mainly studied on trees, due to its origin. moran and snir proved that the version on trees is np-hard. chopra et al. presented an integer programming model to the convex recoloring on trees that has good computational results, compared to the previous approaches. the best approximation factor known



in this paper, we focus on the convex recoloring problem on general graphs, without any restrictions on the recoloring. this version of the problem is also proved to be np-hard. to our knowledge, only exact algorithms have been proposed to solve this problem so far, but no computational results were reported.



the remaining of this paper is organized as follows. in section 2, we give basic definitions for the convex recoloring problem that are used throughout the text. in section 3, we discuss the methods currently available for the problem. in section 4, we detail the algorithm proposed. in section 5, we report on our experiments and discuss the results. lastly, in section 6, we draw our conclusions and point out future research directions.



the construction algorithm in the initial phase is also iterative, and has three key components. the first is the greedy component: at each iteration, a partial solution is available and the candidate elements to be added to it are put in a list, that is sorted according to a greedy criterion which measures how good an element is compared to the other possible ones. the second key component is the randomization: instead of picking the candidate at the top of the previously sorted list, a restricted candidate list(rcl) is formed with only a percentage of the best candidates from which one is chosen randomly. the third key component is the adaptivity: each iteration is affected by the previous ones, since each choice modifies the state of the solution.



we chose this meta-heuristic because of its simplicity and the small number of tuning parameters, namely, the percentage of best candidates considered for selection and the stopping condition. another advantage of grasp is its potential to combine it with other techniques, such as variable neighborhood search and parallelization. next, we describe the main ingredients of our grasp to solve the crp.



the construction phase is detailed in algorithm 1. the greedy selection recolors the vertices aiming to obtain large monochromatic components. the algorithm operates on a colored graph(h, d), that is initialized with the original graph g and its coloring c. next, every monochromatic component of h is shrunk into a single vertex. then, the following steps are repeated until no bad colors remain in h: vertices are sorted according to a greedy criterion, a vertex v is chosen among a fraction of the best candidates following the greedy criterion, the color of v is switched and, finally, its neighbors with the same color are shrunk into it. the criteria we use to select the next candidate, to sort the candidate list, and to recolor the chosen vertices are detailed below. after a solution is constructed, all vertices from g are either in h or represented by a vertex of h. to extract a recoloring of g, we assign the color of a vertex v from h to its copy in g and to the vertices v represents. we envisaged two alternative criteria to select, sort, and recolor candidate vertices. one is called ratio while the other is named union.



local search. the local search routine is executed after each solution is constructed to explore a neighborhood of the solution in search for a local maximum. we propose two neighborhoods for the crp: the simple and the extended neighborhood. these neighborhoods are detailed below. the basic idea is to revert the color change of a vertex, i.e., to find a vertex that was recolored and have it returned to its original color. the difference between simple and extended is how they find such vertices.



