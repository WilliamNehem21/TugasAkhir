the dagstuhl middle metamodel(dmm) is an extensible schema for static models of software. it is a middle-level metamodel since it captures program level entities and their relationships, rather than a full abstract syntax graph(lower level), or architectural abstractions(higher level). dmm can be used to represent models extracted from software written in most common object-oriented and procedural languages. this paper presents the main features of dmm.



there have been several practical uses of dmm. for example, moise and wong used it in an industrial reverse engineering case study. there is also a tool on the web that will take any c++ source code and convert it into dmm using gxl syntax. several projects are also building schemas that extend or connect with dmm(e.g.).



dmm does not represent programs completely; i.e. it does not store the abstract syntax tree. nor does it represent very high-level architectural elements like pipes, filters, clients, servers, etc. other types of metamodels can be used for these low-level and high-level models, respectively. dmm is intended to be used for middle-level models. there is nothing in dmm, however, that precludes extensions which address high-level or lower-level concerns.



some users of dmm may elect to simplify their models by omitting all but the most essential sourceobjects. rather than storing one or more sourceobjects for every single modelobject(e.g. specifying where in a file each variable, method, invocation etc. is located), one could just store the sourceobjects corresponding to top-level modelobjects(i.e. just the classes). if this option is chosen, then tools using such models will not be able to pinpoint the exact location in files of lower-level modelobjects without further searching; such searching can, however, be done easily in near real time.



an interesting issue that arose when storing source code information was how, in the sourcepart class, to store pointers to the start and end of blocks of source code text. one strategy is to use character offsets from the beginning of a file. this makes seeking to a particular character easy in some programming languages. the choice that was instead made is to use line number plus character offset in the line. this has the advantage that no confusion arises when the size of lines in a file change due to the different line-ending conventions(i.e. cr vs. cr/lf).



to achieve this multi-language transparency, dmm generalizes several concepts. for example, the notions of routine, function and subroutine are all treated the same. also, a method is very much the same as a routine except that it has a relationship to a class. similarly, a class is a structuredtype that has a few other features, such as methods. although various programming languages have minor semantic differences regarding how they implement these ideas, dmm abstracts these differences away.



some people have proposed even abstracting away the differences between method and routine, as well as between structuredtype and class. if this were done, true structured types would be represented as classes that happen not to have any methods. this simplification has not been made in the current dmm version. a reason for keeping all four classes is that we believe it helps people to understand dmm better.



more specialized. the domain of a sub-relationship is the same as or a subclasses of the domain of a higher-level relationship. the same is true of ranges. models using dmm do not have to represent information about each relationship shown. also, if a model wants to model accesses, it could use either



a metamodel needs to be robust as opposed to fragile. robustness means the widest possible variety of tools can use it without the need for inconsistent variants. we hope that robustness was increased by the fact that the developers of several metamodels got together and worked out a metamodel that could be used by all the groups. the fact that several projects have used dmm with little change, is initial evidence for its robustness.



