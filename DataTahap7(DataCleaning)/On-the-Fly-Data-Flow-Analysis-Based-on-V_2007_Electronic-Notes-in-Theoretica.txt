the last two decades have been the most productive from the point of view of techniques and tools for testing and ensuring the reliability of complex software. the investment in formal methods has produced a number of powerful languages, algorithms, methodologies and tools to be successfully employed with software models. today, we can think of applying the same methods to real programs in a transparent way, integrating the verification functionality within the compiler.



this promising scenario is mainly due to the advances in two major techniques: static program analysis and model checking. in a few words, a static analysis carries out a static(abstract) execution of a program in order to extract correct information about its behavior during execution. this information is typically utilized to discard some programming errors as soon as possible, and to improve the program compilation. regarding model checking, it is a technique based on exhaustive exploration of states produced by(concurrent) programs, to check the satisfiability of a desirable program behavior. our work exploits the use of model checking as a static analysis implementation method that can be naturally coupled with compilers.



includes the intended result for the lv analysis. it shows which variables x or y are live on the different program points. for instance, variable y is not live at the first two lines of the program, because its value is updated before being read.



gram analysis. we illustrate the bes specification capability by encoding classical dfas. the resulting dfas are nicely implemented thanks to a generic algorithm, which evaluates the different bes encodings over a given program described as an implicit labeled transition system(lts). the algorithm was integrated into the well-known cadp toolbox, and experiments confirmed that it worked efficiently for realistic examples.



store the program counter(an element of set{0, 1, 2, 3, 4, 5}). actions in p are the boolean expressions and assignments in the code. we remark that, since only the cfg is kept in the lts, the current value of program variables in each state is ignored.



variables. moreover, three labels bool, assert, and api respectively establish if the corresponding program instruction is a boolean or assignment expression, or a system call to an api of interest. this information is relevant for some static analyses, like influence analysis[2, 4, 5] and makes possible both property verifications and program optimizations. such a format further allows to automatically and incrementally construct the(strict necessary parts of the) resulting lts considering a program cfg.



since variable xs,e is recursively defined in terms of its successors xs',e, solving xs,e forces to traverse the whole lts. xs,e being a tautology, its final value is always true. once xs,e is computed, testing the inclusion of ys,e in computed(y) gives that expression e is not available at state s. if ys,e is not included in computed(y), then testing the inclusion of zs,e in computed(z) gives that expression e is available at state s. otherwise, e is not available at s.



we discuss below the behavior of algorithm analyse w.r.t. efficiency. every transition in the lts is traversed exactly once per program variable or expression. we assume that bes resolutions are linear in the size of the lts. since the constructed bes is unique for all states given a variable or an expression, resolution of already solved boolean variables is done in constant time. therefore, each call



we performed several experiments to compare the results of our dfas with those observed in the literature. we considered twelve classical c program examples showing the interest of using one or the other dfa to simplify the compilation of the program. we also performed a series of experiments for investigating the effectiveness of influence analysis[4, 5]. besides promela examples extracted from the literature, we also considered ten other c program examples specific for each one of the implemented influence analyses.



to show the applicability of our tool to a third specification language, we took a lotos description of the dekker mutual exclusion protocol 2(89 lines of lotos, 2 processes, 9 variables, 954 states, 1 908 transitions, and 17 labels) on which we tested the nine currently implemented dfas. the first step was to automatically extract out of the specification a specific petri net, called network, that can be further processed to obtain a cfg of the protocol(25 states, 134 transitions). the graph was then transformed into our abstract model, by appropriately relabeling the transitions. finally, the resulting abstract lts was processed by annotator. from the results, we conclude that, among the nine variables present in the specification, none of them were live at all states. this means that an explicit verification of the program can ignore many variables in the state vector at different control point without loosing any information relevant for a formula to be evaluated(as purpose, the static analysis resulting from the interconnection of annotator and c.open into cadp could then be integrated to the model extractor socketmc. finally, we will seek solutions to other static analysis problems, such as reset variables analysis, by investigating their translation in terms of bes resolution, and by studying the a priori natural and efficient connection of existing compilers to our abstract cfg model.



