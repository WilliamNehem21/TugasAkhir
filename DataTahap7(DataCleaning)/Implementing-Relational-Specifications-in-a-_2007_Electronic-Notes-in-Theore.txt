for many years, relation algebra has widely been used by mathematicians and computer scientists as a convenient means for problem solving. its use in computer science is mainly due to the fact that many datatypes and structures(like graphs, hyper-graphs, orders, lattices, petri nets, and data bases) can be modeled via relations, problems on them can be specified naturally by relation-algebraic expressions and formulae, and problem solutions can benefit from relation-algebraic reasoning and computations. a lot of examples and references to relevant literature can be found, e.g., in[17,4,6,13].



the functional logic programming language curry[8,10] aims at integrating different declarative programming paradigms into a single programming language. it can be seen as a syntactic extension of haskell with partial data structures and a different evaluation strategy. the operational semantics of curry is based on lazy evaluation combined with a possible instantiation of free variables. on ground terms the operational model is similar to lazy functional programming, while free variables are nondeterministically instantiated like in logic languages. nested expressions are evaluated lazily, i.e., the leftmost outermost function call is selected for reduction in a computation step. if in a reduction step an argument value is a free variable and demanded by an argument position of the left-hand side of some rule, it is either instantiated to the demanded values nondeterministically or the function call suspends until the argument is bound by another concurrent computation. binding free variables is called narrowing; suspending calls on free variables is called residuation. curry supports both strategies because which of them is right depends on the intended meaning of the called function.



besides these constants, the library clpb exports a lot of functions on boolean constraints. for example, there are the following nine functions corresponding to the boolean lattice structure of boolean, where the meaning of the function neg and the operations(.&&),(.||),(.==), and(./=) is obvious and the remaining operations denote the comparison relations on boolean with the constant false being defined strictly smaller than the constant true:



in this section we sketch an implementation of relation algebra over finite, binary, relations in the curry language. we will represent relations as boolean matrices. this allows to employ the higher-order features of curry for an elegant formulation of the relation-algebraic operations, predicates, and constants. as we will also demonstrate, relational constraints can be integrated seamlessly into curry because we can use free variables to represent unknown parts of a relation. based on this, the nondeterministic features of curry permit us to formulate the search for unknown relations that satisfy a given predicate in a natural way.



the functional features of curry serve well to implement relation algebra. relations can be easily modeled as algebraic datatype and relational operations, predicates, and constants can be defined as curry-functions over this datatype. we only consider relations with finite domain and range. as already mentioned in section 2.1, such a relation can be represented as boolean matrix. guided by the type of matrices introduced in section 3.1, we define the following type for relations:



note that we use the type boolean instead of bool for the matrix elements. this allows to apply the more efficient constraint solver satisfied of section 3.3 for solving relational problems. furthermore, note that in our implementation a vector corresponds to a list which contains exactly one list.



in section 2.1 we introduced one more basic combinator on relations, namely relational inclusion. it differs from the other constructions because it does not compute a new relation but yields a truth value. for the applications we have in mind, we understand relational inclusion as a boolean constraint over relations, i.e., a function that takes two relations of the same dimension and yields a value of type boolean. its curry implementation is rather straightforward by combining the already used functions foldr1 and elemwise with the predefined function concat::[[a]]->[a] that concatenates a list of lists into a single list.



the predefined function replicate:: int-> a->[a] computes a list of given length that contains only the specified element. the function find is the key to many solutions of relational problems using curry since it takes a predicate over a relation and nondeterministically computes solutions for the predicate. a generalization of find to predicates over more than one relation is obvious, but for the problems we will consider in this paper this simple version suffices.



now, we present some example applications. we also report on the results of our practical experiments with the pakcs implementation of curry on a powerpc g4 processor running at 1.33 ghz with 768 mb ddr sdram main memory. unfortunately, the current pakcs system is not able to use more than 256 mb of main memory which turned out to be a limitation for some examples.



in the following first example we present an application of our library that does not rely on the logic features of curry. we implement the relational specification of a least element of a set with regard to an ordering relation. this specification is not given as a predicate but as a relation-algebraic expression.



to compute a linear extension of an ordering relation, we directly can employ the function find introduced in section 4.2. the result is the following function that takes an ordering relation as argument and nondeterministically returns a linear extension of the given relation.



using encapsulated search, the function linearextension can be employed to enumerate all linear extensions of an ordering relation. we do not need to specify sets of linear extensions relation algebraically to compute them. the nondeterministic features of curry permit us to use a simple specification for one linear extension to compute all of them. enumerating linear extensions is of great interest to computer scientists because of its relationship to sorting and scheduling problems. for example, the np-hard problem of computing a possible scheduling for a distributed system with dependencies given as ordering relation r obviously can be solved by computing all linear extensions of r and picking a best linear extension.



if the given ordering relation represents the dependencies of tasks in a distributed system, each linear extension represents a possible scheduling expressed as relation of type rel. to rate a scheduling with regard to some quality factor, it would be more convenient to represent it as an ordered list of tasks. the conversion is accomplished by the following function that relies on the predefined function sortby::(a-> a-> bool)->[a]->[a] that sorts a list according to an ordering predicate. the function evaluate:: boolean-> bool converts between boolean constraints and values of type bool and(xs!! n) selects the n-th element of the list xs.



of course, with regard to efficiency, our approach to execute relational specifications cannot compete with specific algorithms for the problems we have considered. it should be pointed out that our intention is not to support the implementation of highly efficient algorithms. we rather strive for automatic evaluation of relational specifications with minimal programming effort and reasonable performance for small problem instances. therefore, we compared our approach to a narrowingbased implementation, that does not rely on a constraint solver but uses the handcoded function satisfied introduced in section 3.2. the results of our experiments show that using a constraint solver significantly increases the performance while it preserves the declarative formulation of programs.



in this paper we have demonstrated how the functional logic programming language curry can be used to implement relation algebra and to prototype relational specifications. we have used the functional features of curry for elegantly implementing relations and the most important operations on them. then the execution of explicit specifications corresponds to the evaluation of expressions. for the execution of implicit specifications we employed a boolean constraint solver available in the pakcs system which proved to be head and shoulders above a narrowing-based approach. without presenting an example, it should be clear that our approach also allows the formulation of general relational algorithms(like the computation of



using our library, relational specifications can be checked in a high-level declarative style with minimal programming effort. we have demonstrated that different programming paradigms can benefit from each other. functional programming can be made more efficient using constraint solving facilities and constraint programming can be made more readable by abstraction mechanisms provided by functional programming languages. especially, higher-order functions and algebraic datatypes serve well to implement constraint generation on a high level of abstraction. functional logic languages allow for a seamless integration of functional constraint generation and possibly nondeterministic constraint solving with instantiation of unknown values.



