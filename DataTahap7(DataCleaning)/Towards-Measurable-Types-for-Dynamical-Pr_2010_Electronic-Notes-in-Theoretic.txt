we now describe the semantics of processes. most of the technical descriptions in this section up through section 2.2, and also section 3.2.2, are lightly edited excerpts from, which is the primary source for the ideas presented in these sections of the paper.



where p t is the joint probability distribution over all possible states of the system at time t. the semantics of a model is given by the operator w, which specifies a stochastic process. these stochastic processes can be specialized to deterministic dynamics as well as shown below. the model operator w can be composed by simply adding up operators wr that correspond to parallel, interacting subprocesses



we assume that there is a typed language that constrains the parameterized terms xi occurring in the rules. the essential feature of p is that it includes a set of function symbols with defined input and output type signatures. these function symbols represent type-supported operations on the typed constants, variables xk, and typed parameter expressions in. the typed parameter expressions may distance metric. specifically the integers have the discrete topology, the uniform measure, and can be integrated over by summation; the real numbers have the topology generated by open intervals, the associated borel measure, and lebesgue integration; and both have distances defined by d x, y x y that generalize to euclidean distance in vector spaces over the respective primitive types. for many applications including quantum mechanical ones, the complex field c should also be taken as a primitive type. integration is essential for the operator representation of dynamics, and distance measures enable controlled approximations.



type constructors generate new types from old ones. standard type constructors in mathematically defined programming languages may include type sums, products, powers, and function types, and we will also include quotient types. here we describe the type constructors already present in stochastic parameterized grammars and therefore in dynamical grammars: vector and product types.



thus we see that an object type must support measure and integration, and object type constructors can do this through the use of several kinds of norms and distances including extended pseudoquasimetrics. the generic object data type may take values in some measurable, quasimetric space. conditions sufficient for the construction of function types and quotient types are given above.



process modeling languages with operator algebra semantics can be augmented with type constructors to create objects and processes at successively larger scales as well as greater levels of abstraction. vector, product, and graph type constructions are straightforwardly available, and recursively related processes can be defined as well. however, function types and quotient types are more subtle. we give conditions under which they can be defined, but we do not know how often these constructions can be iterated before the conditions are necessarily violated.



