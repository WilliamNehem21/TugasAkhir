the point of utp is to formalize the similar features of different languages in a similar style, and on that basis to analyze and connect different languages. one potential benefit of the utp semantics for reo is the possibility to integrate reasoning about reo with reasoning about component specifications/implementations in other languages for which utp semantics is available, such as csp, circus and rcos. another possible benefit of the result in this paper is that it provides a semantic model in which the causality of connector behavior is made explicit by separation of the assumption and the commitment in the design model. the accounting of assumptions and commitments can enable a large team of engineers to collaborate successfully in the design of huge connectors. the utp approach also makes it possible to check connector properties by assume-guarantee reasoning. properties of a complex connector can be decomposed into properties of its subconnectors and each subconnector can be checked separately.



this paper is structured as follows. in section 2 we briefly summarize the coordination language reo. then, in section 3, we present the utp observation model with meta variables and introduce the utp design model used throughout the rest of the paper. in section 4, we present the utp design semantics for basic connectors in reo. in section 5, the composition of connectors is discussed. in section 6 we discuss refinement and testing of connectors. finally, section 7 concludes with some further research directions.



in this section we provide a brief introduction to reo. reo is a channel-based exogenous coordination model wherein complex coordinators, called connectors, are compositionally built out of simpler ones. exogenous coordination imposes a purely local interpretation on each inter-components communication, engaged in as a pure i/o operation on each side, that allows components to communicate anonymously, through the exchange of untargeted passive data. we summarize only the main concepts in reo here. further details about reo and its semantics can be found elsewhere[6,8,11].



complex connectors are constructed by composing simpler ones via the join and hiding operations. channels are joined together in nodes. a node consists of a set of channel ends. the set of channel ends coincident on a node a is disjointly partitioned into the sets src(a) and snk(a), denoting the sets of source and sink channel ends that coincide on a, respectively. nodes are categorized into source, sink and mixed nodes, depending on whether all channel ends that coincide on a node are source ends, sink ends or a combination of the two. the hiding operation is used to hide the internal topology of a component connector. the hidden nodes can no longer be accessed or observed from outside. a complex connector has a graphical representation, called a reo circuit, which is a finite graph where the nodes are labeled with pair-wise disjoint, non-empty sets of channel ends, and the edges represent the connecting channels. the behavior of a reo circuit is formalized by means of the data-flow at its sink and source nodes. intuitively, the source nodes of a circuit are analogous to the input ports, and the sink nodes to the output ports of a component, while mixed nodes are its hidden internal details.



set of all observation-capturing variables, used in this paper is different from that for a design in. the signature gives the rules for the syntax for denoting the elements of the theory. healthiness conditions, which embody aspects of the model being studied, are taken as true here.



an important subtheory of relations allows the separation of preconditions from postconditions, in the manner of the well-known formal methods like vdm, b, raise, refinement calculus and more recently ocl. this allows us to model the total correctness of programming constructs using relations. this section is an introduction to the relational calculus on designs in utp.



as can be seen, a design predicate represents a pre/post-condition specification. the separation of precondition from postcondition allows us to write a specification that has a more generous precondition than simply the domain of the relation used as a specification. implementing a design, we are allowed to assume that the precondition holds, but we have to satisfy the postcondition. moreover, we can rely on the system having been started, but we must ensure that it terminates. if the precondition does not hold, or the system does not start, we are not committed to establish the postcondition nor even to make the system terminate.



the synchronous channel transfers the data without delay in time. so it behaves just as the identity function. the pair of i/o operations on its two ends can succeed only simultaneously, and the input is not taken until the output can be delivered, which is captured by the variable ok.



this channel is similar to a synchronous channel, except that it always accepts all data items through its source end. if it is possible for it to simultaneously dispense the data item through its sink end, the channel transfers the data item. otherwise the data item is lost.



therefore, test cases, as well as connector specifications and implementations, can be specified by designs. it is obvious that an implementation that is correct with respect to its specification should refine the test cases of the latter. an implementation refines a test case if and only if the implementation passes the test case. taking specifications into consideration, the specification should also be a refinement of a test case if the test case is properly derived from the specification. an algorithm



this paper demonstrates that utp can be applied not only for giving semantics of specific programming languages and specification languages, but also for providing a formal semantic foundation for coordination languages. in particular, the unified semantic model for different kinds of channels and composite connectors in reo covers different communication mechanisms encoded in reo, and allows the combination of synchronous and asynchronous channels as in reo. our semantic model offers potential benefits in developing tool support for reo, like test case generators. furthermore, the predicates used in utp provide a possible symbolic representation of coloring for connectors, and thus make it possible to synthesize connectors from specifications more efficiently.



the authors are indebted to our colleagues, especially bernhard aichernig, jan rutten, frank de boer, milad niqui and christel baier for helpful discussions, and jifeng he for the constructive comments on an earlier version of the paper which helped to simplify the model and improve this paper. we are grateful to lacramioara astefanoaei for her help in developing the test case generator. the work reported in this paper is supported by a grant from the glance funding program of the dutch national organization for scientific research(nwo), through project cooper(600.643.000.05n12), and the dfg-nwo-project syanco.



