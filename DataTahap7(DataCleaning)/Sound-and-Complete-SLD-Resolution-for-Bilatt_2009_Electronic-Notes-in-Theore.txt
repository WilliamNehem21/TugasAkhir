and probabilistic programs, see[4,11,15,23,26,31]. their use, however, gives rise to the obvious question of how annotated logic programming compares with logic programming based on(bi)lattices, see[14,15,21,24,25,28]. in this paper, we contribute to this discussion by combining the two approaches in that we make use of bilattice structures within the framework of annotated logic programs. specifically, we introduce bilattice-based annotated logic programs(baps) and establish declarative and operational semantics for them. baps, being many-valued and quantitative in nature, enable us to work with statistical knowledge, and with databases which can be incomplete or inconsistent, and thereby introduce monotonic extensions of two-valued negation. but what is particularly important is that they possess all the desirable properties of classical logic programming. thus, we define monotonic and continuous semantic operators for baps and develop sound and complete proof procedures for them based on classical binary resolution.



finally, we establish sound and complete sld-resolution for baps. as far as we know, this is the first sound and complete proof procedure for first-order infinitely interpreted(bi)lattice-based annotated logic programs. compare, for example, our results with those obtained for constrained resolution for gaps, which was shown to be incomplete, see, or with sound and complete(sld)resolutions for finitely-interpreted annotated logic programs(these logic programs do not contain annotation variables and annotation functions)[2,10,14,23,24,25,31]. 4



in this section, we define annotated bilattice-based logic programs. our definition extends previous definitions on this topic in various ways and, in particular, it extends annotated(or signed) languages(see[2,4,15,23,24,25,31] and others) to the case of distributive bilattices. the languages we introduce allow variables and functions in annotations, unlike[14,23,24,25] and others, for example; they generalize some of the propositional lattice-based languages[4,28] to the first-order case, and allow negations unlike, for example,[4,23] and others.



example 3.3 suppose we want to implement a program p which is able to make decisions about delaying and cancelling airport flights without human supervision. let this program work with databases which are obtained through accumulating information from weather forecasts taken from different sources. these sources may give inconsistent or incomplete information which is collected in the database of p. the first and the second elements of each annotation denote evidence for, respectively against, a given fact. let b25 from example 2.3 be the chosen bilattice. let individual variables x, y receive, respectively, values from the set



in, we introduced a semantic operator tp for baps, proved its continuity and showed that it computes the least herbrand model mp for a given bap p. detailed analysis of some of the properties of tp can be found in. we define tp next.



semantic operators defined for many logic programs in the style of[4,6,7,15,31] use only some form of item(i) from definition 4.2. however, this condition is not sufficient for the computation of the(least) herbrand models for(bi)lattice-based logic programs, as we see next.



the resolution method was first introduced by robinson, and was implemented(as sld-resolution) in two-valued logic programming by colmerauer et al. a detailed exposition of this can be found in, and for many-valued resolution procedures see[12,14,15,23,27,29], for example. kifer and lozinskii show in that unlike classical refutation procedures, where only the resolution rule is applied, latticebased theories need to have four procedures: resolution, factorisation, reduction and elimination in order to be sound and complete. this enriches resolution for many-valued logics which have linearly ordered sets of values, as it was defined, for example, in[12,31]. some very interesting ideas about the relationship between resolutions for languages with ordered and non-ordered annotations can be found in[24,25]. comparing with these papers, we allow variables and functions in annotations and adopt the additional refutation rules(which correspond to some rules of) in order to obtain soundness and completeness of sld-resolution for baps. note that in[14,24,25] only constant annotations are allowed in the language and therefore each logic program becomes finitely interpreted in these settings. we extend all our results to infinitely interpreted programs with functions and variables in annotations. 6 finally, we establish an operational semantics for baps and prove its soundness and completeness.



note that certain items in the definition of derivation correspond to certain items in definition 4.2 of tp. for example, item(a) corresponds to item(i) in definition 4.2, and item(ii) corresponds to item(ii) in definition 4.2. and, as we have noted before in relation to the definition of tp, all these items serve to reflect the model properties of baps captured in proposition 4.1.



next, we need to obtain the completeness with respect to correct answers. as in classical two-valued logic programming, it is impossible to prove the exact converse of theorem 5.7. however, we can extend the classical result that every correct answer is an instance of a computed answer to the case of baps. the next lemma and associated theorem are straightforward(the proofs can be found in), recall that we allow refutation to work over individual and annotation variables independently.



