affects simple goals or constrained goals. in the so-called intensional negation(cf.) for the lp approach, universal quantification prevents from achieving a complete goal computation mechanism. afterwards, constructive negation was introduced in[4,5] and extended in[8,16] to a complete and sound operational semantics for the whole class of normal logic programs in the clp framework. intensional negation was also extended to clp in where a complete operational semantics is provided. the computational mechanisms proposed in[3,8,16] deal with universally quantified(constrained) goals that, in general, are not easy to compute in an efficient manner. besides, the negation technique is introduced in and local variable absence is claimed as a sufficient condition for the completeness of the technique.



outline of the paper. in the next section, we give some preliminary definitions. program normalization is presented in section 3. the fourth section introduces the notion of mode specification. in section 5, we show how to eliminate the local variables from a definite program in several phases. fi-



we would like to remark that mode specifications are about positions, but not about terms being their actual holders. notice that the same term(in particular, variable) could occur in distinct atoms(or, even, in the same atom) in positions with different modes. moreover, the mode specification does not restrict the goals and has nothing to do with the dataflow that is assumed by the programmer.



that is, as well as the standard condition of recursion in the rightmost atom, we also demand that, in the recursive clauses(2), the same tuple of pairwise distinct variables(namely z) occurs in output arguments of both the head and the rightmost body atom. notice that only direct recursion is considered in our definition. these restrictions will be useful during the auxiliary variable elimination process.



the second subtask is to eliminate the auxiliary variables that are located in the leftmost atom where some auxiliary variables occur in. with this aim, we have to infer the mode specification in the above mentioned atom and the next one. the definition 4.4 already fixes the mode specification in the argument positions where auxiliary variables occur in. in the remaining ones, the mode specification that is inferred by definition 4.5 is subject to the mode specification in the clause head atom, that is undefined for the time being. therefore, the mode specification in these positions is inferred as follows.



a method for eliminating local(there called unnecessary) variables from definite logic programs was introduced in. their main aim was to eliminate the redundant computations that are made by means of local variables. hence, the target program yields more efficient sld-computations. this motivation is essentially different from ours. they present different strategies for guiding the application of unfold/fold transformations in order to achieve local variable elimination. the strategies are syntactically based and only guarantee the complete elimination of local variables for a very restricted subclass of definite logic programs. to the best of our knowledge, there is no other published result on the elimination of this kind of variables in logic programs.



we plan to extend our results to normal logic programs. by now, we think that full generality could not be achieved in this case. however, we believe that the method can be easily adapted for a wide subclass of normal logic programs. future work also includes the extension to constraint logic programming.



