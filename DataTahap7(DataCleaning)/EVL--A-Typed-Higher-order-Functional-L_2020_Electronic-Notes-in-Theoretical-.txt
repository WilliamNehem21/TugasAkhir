we define evl, a minimal higher-order functional language for dealing with generic events. the notion of generic event extends the well-known notion of event traditionally used in a variety of areas, such as database management, concurrency, reactive systems and cybersecurity. generic events were introduced in the context of a metamodel to deal with obligations in access control systems. event specifications are represented as records and we use polymorphic record types to type events in our language. we show how the higher-order capabilities of evl can be used in the context of complex event processing(cep), to define higher-order parameterised functions that deal with the usual cep techniques.



note that, much like what happens with tuples, the type of a particular list in this notation will be closely related to the size of the list in question. a more realistic approach is to add lists and list-types as primitive notions in the language, but, as we mentioned before, we are focusing on a minimal language. furthermore, we will often use constants(numbers, booleans, strings, etc) and operators(arithmetic, boolean, etc) in our examples. however, following the minimalistic approach, we do not add constants/operators to the grammar and instead use free variables to represent them. again, in a more general approach we could extend the grammar with other data structures and operators, for numbers, booleans, lists, etc.



example 2.3 consider the following example illustrating the definition of a generic event firedanger and of a function check that determines if there is the danger of a fire erupting in a particular location, using the weather information associated with that location. function check creates an appropriate instance of firedanger to report the appropriate fire danger level.



in this section we are going to study the application of evl in the context of complex event processing(cep). see for a detailed reference on the area. the area of cep comprises a series of techniques to deal with streams of events such as event processing, detection of patterns and relationships, filtering, transformation and abstraction, amongst others. because evl is a higher-order functional language, we are going to explore the higher-order capabilities, to define higher-order parameterized functions that deal with the usual cep techniques.



the canonical model[10,15] for event processing is based on a producer-consumer model: an event processing agent(epa) takes events from event producers and distributes them among event consumers. this process often involves filtering or translating. filtering may happen because not every event will be of interest or available to every consumer: in some cases access control policies might be in place that restrict what events consumers might receive. translating events allows us to change, add or remove information from the agents based on particular consumers. the processing of events can be done in a one-event in/one-event out form, but it is also possible to have event processing agents that process a collection of events as a whole or that produce a set of events as result: for example, an incoming event may be split into multiple events, each containing a subset of the information from the original event.



evl can be used to program event processing agents. it is able to process raw events produced by some event processing system and generate derived events as a result. these derived events can then be passed on to an event consumer.



transformation event processing agents can be either stateless(if events are processed without taking into account preceding or following events) or stateful(if the way events are processed is influenced by preceding or following events). in the former case, events are processed individually. in the latter, the way events are processed can depend on preceding or succeeding events. transformation events can be further classified as translate, split, aggregate or compose agents. in the following we describe some transformation events that we are going to focus on.



example 5.9 this example represents an event processing agent that composes the partial weather information that is provided by two different sensors. one of the sensors outputs event x, which contains information about the temperature and wind velocity, and the other sensor outputs event y, which contains information about the humidity and precipitation levels. this event processing agent outputs an instance of weatherinfo with the complete weather information.



definition 5.10[pattern detect event processing agent] a pattern detect event processing agent is an event processing agent that performs a pattern matching function on one or more input streams. it emits one or more derived events if it detects an occurrence of the specified pattern in the input events.



an area where pattern-detect agents are quite relevant is in publish-subscribe systems, where consumers are allowed to subscribe to selective events by specifying filters using a subscription language. the filters define constraints, usually in the form of name-value pairs of properties and basic comparison operators, which identify valid events. constraints can be logically combined to form what are called complex subscription patterns. cep systems extend the functionality of traditional publish-subscribe systems by increasing the expressive power of the subscription language to consider complex event patterns that involve the occurrence of multiple, related events.



else i f( p list. head) then( cons list. head( f ilt er p list. t a i l)) else f i l t e r p l i s t. t a i l



when dealing with event processing applications, many events will have a similar structure and a similar meaning. consider a temperature sensor: all of the events produced by it have the same kind of information, such as temperature reading, timestamp and maybe location, but with possibly different values. this means that instead of defining the structure of each event individually, we can specify the structure of an entire class of events. this relationship was formally defined in as that between generic and specific events. evl is based on the typed language that was defined in, but it extends it by allowing explicit subtyping between record types according to.



a retraction event relationship is a property of an event referencing a second event. it indicates that the second event is a logical reversal of the event type that references it. for example, an event that starts a fire alert and the event that stops it. this is a notion that is also present in access control systems with obligations. in, this is defined by a closing function that describes how events are linked to( x. snd. p recipitation+ y. precipitation)/ x. f s t)) i n l e t check x= i f( x. temperature> 29 and x. wind> 32



when it comes to processing flows of information, there are two main models leading the research done in this area: the data stream processing model(that looks at streams of data coming from different sources to produce new data streams as output); and the complex event processing model(that looks at events happening, which are then filtered and combined to produce new events). in, several information processing systems were surveyed, which showed a gap between data processing languages and event detection languages, and the need to define a minimal set of language constructors to combine both features in the same language. we believe that evl is a good candidate to explore the gap between these two models.



with respect to future work, events in our language are represented by records of the form{l1= v1,..., ln= vn}, with appropriate constructors for creating, accessing and modifying records. additionally one could consider more powerful operations on records, such as extending a record with a new field or removing an existing field from a record, which are not part of evl but could prove useful in both cep and in the treatment of obligations in the context of access control models.



