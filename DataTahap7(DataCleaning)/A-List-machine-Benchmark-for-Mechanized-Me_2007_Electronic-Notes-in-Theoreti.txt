we propose a benchmark to compare theorem-proving systems on their ability to express proofs of compiler correctness. in contrast to the first poplmark, we emphasize the connection of proofs to compiler implementations, and we point out that much can be done without binders or alpha-conversion. we propose specific criteria for evaluating the utility of mechanized metatheory systems; we have constructed solutions in both coq and twelf metatheory, and we draw conclusions about those two systems in particular.



a type system. we will assign to each live variable at each program point a list type. to guarantee safety of certain operations, we provide refinements of the list type for nonempty lists and for empty lists. in particular, the fetch-field operations demand that their list argument has nonempty list type, and the branch-if-nil



sample program. the following list-machine program has three basic blocks. variable v0 is initialized to nil as prescribed by the operational semantics. block 0 initializes v1 to the list cons(nil, cons(nil, nil)) and jumps to block 1. block 1 is a loop that, while v1 is not nil, fetches the tail of v1 and continues. the last instruction of block 1 is actually dead code(never reached). block 2 is the loop exit, and halts.



in lf, one can compute as well on the derivation trees themselves. suppose we write another prolog program(set of clauses) that takes as input a derivation tree for type-checking, and produces as output a derivation tree for safe(non-stuck) execution. if this program is total(that is, terminates successfully on any input) then we have constructively proved that any well typed program is safe.



to reason about this meta-program, we use(machine-checked)%mode declarations to explain what are the inputs and outputs of the derivation transformer. we also use(machine-checked)%total declarations to ensure that our meta-program has covered all the cases that may arise, and that our meta-program does not infinite-loop. we give an example of such a proof in section 6, items 6 and 7.



operational semantics. both twelf and coq make it easy and natural to represent inductive definitions of the kind found in sos. in coq one also has the choice of representing operations over mappings(e.g., lookup and update in stores) either as relations(defined by inductive predicates) or as functions(defined by recursion and pattern-matching).



derive an example of type-checking. trivial to do in twelf, by running the type system as a logic program. not directly possible in coq because the specification of the type system is not algorithmic: it uses universal quantification over all variables to specify environment subtyping.



%mode lub-subtype-left+p1-p2. the modes of a logic program specify which arguments are to be considered inputs(+) and which are outputs(-). formally, given any ground term(i.e., containing no logic variables) p1 whose type is lub t1 t2 t3, our clauses(if they terminate) must produce outputs p2 of type subtype t1 t3 that are also ground terms.



%total p1(lub-subtype-left p1 p2). we ask the metatheorem to check our claim that no execution of lub-subtype-left can infinite-loop: it must either fail or produce a derivation of subtype t1 t3; and we check the claim that the execution never fails(that all cases are covered). the use of p1 in two places in our%total declaration is(in some sense) mixing the thing to be proved with part of the proof: we indicate that the induction should be done over argument 1 of lub-subtype-left, not argument 2.



state soundness theorem for the type system. in coq, the statement is just ordinary mathematics. in twelf, this is done, as above, by writing a logical predicate that relates a derivation of type-checking to a derivation of runs-or-halts, and then making the appropriate%mode and%total claims for the twelf system to check.



in coq, the type-checker is defined as a function from program typing and programs to booleans. our solution uses intermediate functions for checking environment subtyping and for type-checking instructions and blocks. these functions return option types to signal typing errors, which are propagated in a monadic style. to avoid an n2 algorithm, we represent environments and program typing as finite maps implemented by radix-2 search trees. therefore, the typing algorithm has o(n log n) complexity.



industrial-strength type-checker. coq has a facility to automatically generate caml programs from functions expressed in coq. automatic extraction of caml code from the coq functional specification of the type-checker produces code that is close to what a caml programmer would write by hand if confined to the purely functional subset of the language.



