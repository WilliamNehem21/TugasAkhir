in the context oflc-graphs, when we see a plus-variable(resp. minusvariable, lambda-variable etc.), we call it a plus-node(resp. minus-node, lambda-node etc.). in addition, we call a node in g a terminal node iff it has an out-degree of 0. note, however, that plus-nodes often occur in terms that label negative axiomatic formulae(a negative occurrence of a plus node), but they are still plus-nodes. these arise from the following two lexical unfolding rules:



lc-graphs represent the substitutions that must be carried out in the final step ofproof net construction. each plus-node corresponds to a redex for a substitution that must be replaced with a term composed of the plusnodes and minus-nodes that it points to. with this intuition in mind, the relevance of the lc-graph integrity criteria to proof net construction can be demonstrated.



proof. plus-nodes acquire incoming arcs either through a negative occurrence(which receives one arc from an axiom link) or through a lambdanode parent. a plus-node labelling a positive terminal formula has neither ofthese, and therefore has an in-degree of0.



proof. if v is not a minus-daughter of a lambda-node, then by proposition 4.1 and proposition 4.2, it has an in-degree of 1. furthermore, by proposition 4.7, every intermediate node on the paths u; v and w; v is a plus-node, and by proposition 4.1, has an in-degree of1. 2



we call the axiomatic label referred to in proposition 4.9 the axiomatic reflection of the proper root node. if a positive terminal formula is a basic category(and thus also an axiomatic formula), then the axiomatic reflection ofits proper root node is the proper root node itself.



proof. since the lc-graph is acyclic, its nodes can be topologically sorted. if we always choose the most highly ranked redex according to this order to expand next, then the rank of the most highly ranked redex strictly decreases at each step of variable substitution, and thus variable substitution terminates. 2



proof. given i(3), there is likewise an occurrence of v in s. if v also occurred outside s, then there would be a path from some plus-node w; v, such that neither u; w(and thus expands to a subterm of s) nor w; u(with v:s being a subterm ofthe expansion of w).



proof. given pn(3), each subterm v:s corresponds to a lambda-node with a minus-daughter v, and a plus-daughter u, whose expansion under variable substitution yields s. the occurrence of v in s then means that there is a path u; v. 2



all other nodes in the lc-graph were introduced at a location in the lexical unfolding with a negative formula somewhere beneath them. the proofthat these remaining nodes are path-accessible from the proper root node is by induction on the number oflexical unfolding steps down to the lowest such negative formula. in order for the induction to carry through, we must strengthen the claim by adding the condition that for minusnodes, there exists a path whose last step arises from an axiom link.



the base cases are precisely the minus-nodes labelling negative terminal formulae and the minus-daughters of lambda-nodes along the path from the proper root to its axiomatic reflection. for the former category, the last step must be an axiom link because the negative terminal formulae are not daughters ofa lambda-node. for the latter category, i(3) holds by proposition 4.13, so each of these minus-daughters, m, has a plusdaughter sister, p, such that there is a path p; m. the last step of this path must be due to an axiom link, since the lambda-node parent of p and



proof. terminal plus-nodes and improper root nodes have a negative(resp. positive) occurrence inside a given sublinkage, and a positive(resp. negative) occurrence outside the sublinkage. but the positive and negative occurrences of a node, when both exist, necessarily derive from the same lexical unfolding, i.e., the lexical unfolding of the same terminal formula. that means that this lexical unfolding must be peripheral, since one occurrence, and thus part of the unfolding, falls outside the sublinkage.



among the three integrity criteria, i(2) stands out because it demands that a particular kind ofpath, namely a cycle, does not exist, whereas i(3) and i(ct) demand that a particular kind ofpath does exist. this makes i(2) easy to enforce incrementally. before asserting an edge, we simply discard the the lc-graphs with cycles from its set. if no lc-graphs remain, then the edge itselfcan be discarded.



clearly, the most significant remaining question is how to combine lcgraphs during parsing so as to avoid an exponential explosion in the size of the set of lc-graphs attached to each edge. one partial step in this direction would be the conjecture that iftwo lc-graphs for the same edge can both produce an integral spanning linkage, then both of them share the same set of paths from improper root nodes to terminal plus-nodes. in other words, they behave the same way when considering only their peripheral formulae. by itself, this piece of knowledge cannot be used to prune away lc-graphs of sublinkages, however, because, given two lcgraphs with different sets of paths from improper root nodes to terminal plus-nodes, it does provide a way of determining which set is the correct one.



