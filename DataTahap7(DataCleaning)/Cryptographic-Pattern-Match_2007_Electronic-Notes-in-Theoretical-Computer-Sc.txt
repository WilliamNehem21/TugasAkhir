we construct a language extension for process calculi for modelling the exchange of cryptographically composed data. more specifically, we devise a succinct syntax for terms and patterns that captures the intention behind perfect cryptography. the proposed language extension is independent of the choice of process calculus and is applicable to any calculus that supports exchange of data. initially we restrict the model to symmetric cryptography, but we also show how it can be extended with support for asymmetric encryption and digital signatures.



the modelling of security protocols often relies on process calculi. as a common method for ensuring security in a system is the application of cryptography, several process calculi have emerged which incorporates cryptography in the design, e.g. lysa[3,4] and the spi-calculus. however, the modelling of cryptography and the underlying communication model are orthogonal factors in the resulting system, and this motivates an independent development of these components.



in this paper we shall design a language extension for process calculi that allows for modelling the use of cryptographic operations for securing the exchange of data. specifically, we develop a term language with pattern matching that captures the intention behind perfect cryptography in an intuitive and succinct manner. the design is independent of the underlying communication model, and the language extension can be applied to any process calculus that supports exchange of data.



the other basic building block is patterns. as mentioned already, patterns are used to match on terms. hence the syntax for patterns is identical to the syntax for terms, except that a pattern includes a list of the variables that should be mapped within the term.



the matching t(n, m) d t(y, m) a[y] in p should succeed because the tuple t(n, m) matches t(y, m). this results in the mapping of the variable y to the name n in the continuation process p. the matching t(n, m) d t(y, y) a[y] in p on the other hand would not succeed as both n and m cannot match the pattern y, and thus further execution is garbled.



the syntax and semantics of our language extension does not enforce the usual assumption of perfect cryptography. matching on a pattern such as ex(y) a[x, y] obviously violates this assumption, as it allows for learning x based only on an encrypted message. this design choice has been made to make the model as flexible as possible, one may want to encode the possibility of a principal to guess certain keys or encrypted contents in order to analyse different attack scenarios. perfect cryptography is only one such scenario, although the most commonly used one, and thus we shall design a well-formedness condition for enforcing this assumption, hereby allowing the protocol analyst to choose when this criteria should apply.



in(1) the new variable x is learnt by decryption with k, an already known name. similarly in(2) y is learnt using the prior knowledge of x to decrypt the encryption. in(3) z can be learnt from the third element of the tuple, then the second part of the tuple can be decrypted using z hereby learning y, and finally from the first part of the tuple x can be learnt using y.



sieves are supposed to match on terms and thus the syntax is merely terms extended with a wildcard for a sieve that matches everything, i.e. variables defined with the sieve correspond to the variables of the basic model. notice that sieves allow for both recursive variable definitions and for defining variables based on the mappings to other variables. recursive variable definitions such as in the pattern xa



the examples of how well-formedness ensures that perfect cryptography is enforced in the basic model presented in example 2.2, naturally also apply to the extended model. the extended model however, introduces new ways to circumvent perfect cryptography, and the following example shows how the well-formedness condition presented above also captures these.



applicable to a large variety of process calculi, we cannot assume anything about the underlying semantics of the communication model. instead, we shall formalise the protocol in an extended protocol narration, where we distinguish between outputs and corresponding inputs, and between encryptions and corresponding decryptions. in the encodings we follow and extend each sent message with source and destination information as the first two elements, simulating the ip address along the lines of ipv4 and ipv6. upon receipt of a message the principal will always check whether the message is intended for it; occasionally it will also check that the



each line in the simple alice-bob protocol narration, has been translated into three lines in the extended narration. the first line describes the actions of the sender, the second line then describe how the recipient inputs the message, and the third line describes how the recipient decrypts some of the received elements using pattern matching. notice that this encoding assumes that the distributed key k is fresh, and that s knows the master key of a and b, called ka and kb respectively.



in this appendix we shall show some important properties of our language extension. the first is that well-formedness is preserved in the semantics, and the second that a well-formed pattern guarantees perfect cryptography. as was the case for the development of the language extension, we shall proceed in two phases. first we shall prove that the results apply to the basic model, and then using the same proof technique we shall extend the results to the extended model.



it can extend its knowledge by decomposing the values according to perfect cryptography(rules(i2) and(i3)), i.e. decrypting using known keys and decomposing tuples. furthermore, i has the ability to construct new values from its knowledge by concatenating known values into new tuples and creating new encryptions from known keys and contents(rules(i4) and(i5)).



