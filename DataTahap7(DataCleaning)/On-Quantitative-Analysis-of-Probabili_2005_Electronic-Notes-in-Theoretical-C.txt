we advocate the use of approximate noninterference for the security analysis of probabilistic protocols. our approach relies on a formalisation of the protocol in the setting of a probabilistic process algebra and a notion of process similarity based on weak probabilistic bisimulation. we illustrate this approach by presenting the analysis of a probabilistic nonrepudiation protocol which allows us to quantitatively estimate its fairness degree.



probabilities are introduced by adding probabilistic information to the algebraic operators. the probabilistic model we adopt is a mixture of the generative and reactive approaches of. in particular, we assume the internal and output actions behaving as generative actions, i.e. the system autonomously decides, on the basis of a probability distribution, which internal/output action will be executed and how to behave after such an event. on the other hand, we assume the input actions behaving as reactive actions, i.e. the system reacts internally to the action type, say a, chosen by the environment. then, the choice of the reactive action of type a to be executed is performed on the basis of a probability distribution associated with the reac-



tive actions of type a the system can perform. in practice, we see the input actions as underspecified, since their execution is guided by the environment behaviour. the mixed generative-reactive model allows for a representation of both probabilistic behaviours guided by probability distributions decided by the system and nondeterministic behaviours due to the possible interactions of the system with the environment(see, e.g., for more details).



in the rest of the paper, we denote by g the set of finite state, guarded, and closed terms, called processes, generated by the syntax above. moreover, we assume p= 1 in the case parameter p of a probabilistic operator is omitted. now, we briefly introduce the semantics of the calculus. to this purpose, we introduce the following notation: ract and gact denote the sets of input actions and of output and internal actions, respectively; we use the abthe system and the environment. low can perform low-level activities only and is not allowed to directly observe the occurrence of high-level events. in our setting, what low can see is not only the logical low-level behaviour of the system, but also the probability distribution of each low-level activity. despite of the absence of a direct communication channel from high to low, high may succeed in altering the low-level view of the system, thus passing information to low, by interacting with the high-level interface of the system. in the following we describe a formalisation of noninterference, where high is considered to be an adversary that tries to maximise the information leakage from high to low.



action prefix operators within p. then, the application of the security check to p is as follows. the view of p without high-level operations is modeled by p\high. the low-level view of p in the presence of high-level interactions



as far as the security guarantees are concerned, each message conveys a timestamp, which is used to determine the freshness of the message and to protect the parties against replication attacks. the nonrepudiation of origin is guaranteed by the messages sign o({m}k, o, r, t) and signo(k, o, r, t), and the nonrepudiation of receipt is given by the last message sign r(ackn). if the protocol terminates after the delivery of sign r(ackn), both parties obtain their expected information and the protocol is fair. if the protocol terminates before the transmission of signo(k, o, r, t), then neither o nor r obtain any valuable information, so that the fairness is preserved. however, at each step r could try to verify whether m can be obtained by employing the last key received from o and, once the correct key k is received, violate the fairness of the protocol by blocking the transmission of the last ack. hence, key to success of the protocol is the immediacy in sending back the ack. under such a condition, if the transmission of an ack is delayed by r, then o can detect this unfair strategy and prematurely stop the protocol. to this aim, the choice of the encryption algorithm must be in such a way that the decryption of the ciphertext takes more time than the transmission of an ack. hence, o decides a deadline for the reception of each ack, after which, if the ack is not received, the protocol is stopped. finally, we observe that such a protocol is exposed to the attack of a malicious recipient that tries to randomly guess the number of protocol steps and block the final ack. in fact, as we will see, this is the kind



the protocol described in section 3.1 guarantees nonrepudiation of origin with probability 1 and nonrepudiation of recipient with a probability less than 1. hence, our goal is to estimate the probability of violating the nonrepudiation of recipient. in order to determine the effectiveness of the most powerful adversary strategy against the originator, we model and analyse the behaviour of the originator and we consider the recipient as a potential adversary.



