at the turn of the millennium the field of software agent research had become one of the most active areas of r&d activity in computing. since then agents have been widely tipped as the logical next step in the evolution of computer science(e.g.). much of the intuitive appeal of the agent paradigm stems from the idea that agents could solve problems through cooperation and negotiation, as people do, therefore providing the potential for automating many of the tasks which currently still have to be performed by humans. the potential ability of agents to communicate with each other in a goal directed manner forms an integral part of this idea.



researchers such as greaves et al. have identified three characteristics which must be shared by different agents to enable them to communicate effectively: a shared infrastructure for message passing, a common ontology, and a common agent communication language. these researchers have also noted that in all but the very simplest interactions it is necessary for each agent to have a common understanding of the set(or collection of sets) of rules underlying the interaction. a set of rules governing an interaction is commonly known as an interaction protocol.



uml is a collection of diagrammatic notations that was introduced and standardised by rational software, microsoft, and the object management group during the 1990s and has become a standard method for designing object-oriented systems. agent uml is an extension of uml which aims to apply the principles behind uml to the problem of agent oriented system design. there are a number of reasons why notations taken from agent uml are a natural choice for the representation of interaction protocols. their similarity to existing uml notations makes them easy to understand for agent designers, who would be familiar with uml notations already. this reduces the risk of agent designers choosing not to implement the standard protocols just because they have difficulty understanding the notation used to represent them. another obvious advantage of uml based notations over other methodologies is the ability to benefit from the large amount of research which has already gone into the development of uml, and its proven track record as an effective means of designing complex systems.



in conventional software engineering, uml has been used to provide a relatively abstract description of a system giving an overview of how it would work. in this way the uml diagram has acted as a useful reference for the programmer. the object constraint language(ocl) included in the uml framework provided a means of introducing formal constraints, however it was designed for object modelling and addressed only preconditions and postconditions. the exact details of how a system would be implemented were intentionally left out for two reasons. firstly, the inclusion of every detail could compromise the clarity and simplicity of the representation, making it less useful for the programmer rather than more useful. secondly, when initially designing a system it is not the intention to give a complete and unambiguous specification of it, as it would be unreasonable to expect a designer



the propositional statechart formalism presented here is based on david harels statecharts. these are based on higraphs, which are a modified form of euler diagrams described in. an euler diagram is a collection of closed curves known as contours arranged on a 2d plane, which is divided into separate regions corresponding to the areas of the plane inside different collections of contours. a similar principle underlies venn diagrams(described in).



there are a number of reasons why we have chosen to base our graphical methodology on statecharts. firstly, since they are part of the uml suite, they share the benefits of other methodologies derived from uml, which are described in section 1. secondly, the inclusion of state hierarchy enables them to provide simpler, more economical representations of protocols than other graphical methodologies such as finite state machines. finally, a modified form of statecharts could provide an unambiguous representation of interaction protocols. this would facilitate consistent implementations of the protocol in



the propositional statechart formalism introduced here aims to preserve the benefits of using statecharts to represent interaction protocols while strengthening their ability to do so unambiguously. in order to achieve this we have made a number of modifications to the statechart formalism. firstly we have simplified the definition of statecharts by removing orthogonality. secondly, we have introduced labelling conventions that are intended to be sufficiently intuitive to render the propositional statecharts easy to understand, yet restrictive enough to help designers provide unambiguous representations of protocols. both of these modifications are described here in detail.



when a statechart is used to represent an interaction protocol it is possible to consider each state of the interaction as a combination of the states of each agent involved in the interaction, and so decompose an interaction protocol into a series of orthogonal sub-protocols, each representing the possible states of a particular agent. there are two reasons for not approaching this task using the orthogonality mechanism of standard statecharts. firstly the agents themselves are not subsystems, it is only their sub-protocols which must combine, so we have the conceptually tricky problem of combining parts of interactions between temporally autonomous agents into a pseudo whole. secondly in a typical interaction protocol the agent states are far from independent, as many or all of the agents may be in the same protocol state at any particular time, or may be following a similar sub-protocol. in these cases the use of orthogonality would provide little benefit for the representation of states. instead, one can represent each sub-protocol using a separate, and often similar, or generic, statechart. the absence of orthogonality simplifies the propositional statechart formalism. we then seek to clarify the verification and implementation of protocols by considering the properties of these simpler charts, and how they interact.



a state label is an identifier for a state. an effective state labelling system should enable the user of the statechart to refer to each state unambiguously. to achieve this goal state labels should be assigned so that if the statechart were flattened out, and the names of the superstates were appended to those of the substates, no two states would have the same label.



in their book modeling reactive systems with statecharts, harel and politi propose the introduction of activity diagrams to give a dual hierarchy for information flow through processing activities. this perspective has not persisted because an information processing activity can also be regarded as a discrete, although possibly compound processing state, and a process as a path between such processing states in program execution. while a primitive interaction event may be the action of an agent in sending a message, a more complex interaction can be expressed as the composition of primitive actions in the way primitive programs are composed in a sufficiently rich dynamic logic. thus we treat an event in a propositional statechart as expressed by the composition of actions by agents in certain roles, including test actions which capture and generalize the auxiliary preand post-conditions of statecharts. the language we have used elsewhere for expressing the events in protocols is derived from anml, and allows us to extract from the interaction statechart a formal theory in the dynamic logic.



