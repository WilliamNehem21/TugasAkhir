essential component to ensure that sensitive information is secure, uncorrupted, and available. therefore, it is very important that access control becomes a first-class concern of the software development process. overall, the general problem that motivates this research is: the need of a process for secure software engineering that incorporates access control at every stage in the software development process.



at the code level, a very important issue is security assurance. in the context of this research, security assurance means to ensure that the code correctly implements the access control from the design. a correct implementation means that the application behaves exactly as the policy intends, allowing subjects to access application resources only if allowed by the rules in the access control design. in support of security assurance, previous work of the authors include a process to formally prove consistency between access control policies and the code that implements them. the above proofs provide security assurance based in the assumption that models are the main development artifact. this premise is valid in some model-driven approaches, where designers create an access control policy, then code is automatically generated to implement the policy and the code is not further modified.



the remainder of this paper details the approach. section 2 explains the essential concepts of the cincosecurity module, which will be used as a case study to illustrate the approach. section 3 details the proposed approach, formalizing the essential concepts and theorems for security assurance. section 4 uses a case study based in the cincosecurity module to develop round-trip security assurance proofs. section 5 describes some related work. section 6 concludes this paper.



to illustrate the proposed approach, this paper uses the cincosecurity module as a case study to prove round-trip security assurance. the cincosecurity module was developed by one of the authors to provide access control enforcement for java ee applications. cincosecurity extends the standard access control capabilities of java ee with seam, providing: enhanced use case implementation and modularization, fine-grained roles, resource protection, security profiles, session and authentication services.



in round-trip engineering, designers create models of the system and, using a code generator, automatically create the code that implements those models. in addition, programmers can modify the generated code. finally, a reverse engineering process parses the modified source code to re-generate the models.



to address this problem, the proposed approach is to enhance the typing rules of the target programming language to include automatic checkings for any rule imposed by the access control model and the security library. these typing rules should only allow modifications to the code that yield valid access control models. from these extended typing rules, one can provide security assurance in a roundtrip environment, by formally proving that the generated code and models satisfy certain consistency properties.



in a round-trip engineering project, there are several essential elements: models that represent the system, mappings from models to code(code generators), code that implement the models, and reverse engineering mappings(to generate models from code). in addition, models have a set of constraints that assure that the model is valid, which are usually verified by the case tool utilized to create them. for instance, a constraint over a uml class model is that there must not be two methods with the same name and parameters in a class.



definition 4.10 specifies a round-trip scheme that uses the cincosecurity module. the code generation function takes as input a model with operations and a policy, and outputs an implementation with operations and restrict annotations(see section 2 for more details about these annotations). for simplicity, the text inside restrict annotations only has the essential information of the role and operation. all of the additional syntax is removed to reduce the complexity of the example. analogously, the reverse engineering mapping takes as input an implementation using cincosecurity and outputs a model.



models must satisfy a set kcs of constraints, which ensure that all of the permissions in an access control policy reference existing operations in the model. similarly, the implementation must satisfy three typing rules. the first two are abstractions of typing rules found in java: rule(6) indicates that there must not be duplicate operations in the implementation, rule(7) indicates that annotations must reference an existing operation(method) in the implementation. rule(8) represents an extension to the typing rules of java, to ensure that any implementation using cincosecurity yields only valid models when performing reverse engineering. this rule indicates that the string of every restrict annotation must include a role name and and operation name, and the operation name must correspond to the operation referenced by the annotation.



that it is correct. theorem 4.13 is the application of theorem 3.7 to prove correctness of the scheme of definition 4.10. to facilitate the proof, lemma 4.11 proves correctness for the code generation mapping gcs and lemma 4.12 proves correctness of the reverse engineering function recs.



there are several works that incorporate access control into software. at the design level, umlsec, authuml, doan et al. propose extensions to uml to model different aspects of rbac, mac, or both. song et al. and mouheb et al.



proposes an approach for model synchronization based in triple-graph grammars(tgg). similarly, anjorin et al synchronizes models and code using triplegraph grammars, and maps grammars to meta-models. anjorin et al approach uses tgg at the model level and the meta-model tgg is automatically derived from the tgg of the model-level. however, this relies on the assumption that the abstract syntax tree meta-model is fixed. this assumption is not valid in an mde environment, where it is necessary to generate code for multiple languages and platforms[30,31,35].



this paper proposed a formal proof of correctness for access control models and code in a round-trip environment. its applicability was illustrated in a case study using the cincosecurity module. from the case study one can infer that the proposed approach is applicable for code generation and reverse engineering mappings, provided that models and code are sufficiently abstracted.



the future results of this work are expected to benefit code generation and reverse engineering by improving safety in the definition of round-trip engineering schemes. a reduction in the loss of information in the mappings is expected, to comply with the correctness conditions. moreover, since the extended typing rules are associated to code, they can be incorporated into standard ide tools. automatic typing rule verifications in these tools are expected to reduce the probability of errors, thus improving the overall round-trip process.



