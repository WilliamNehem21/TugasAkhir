abstract the grid vision, of sharing diverse resources in a flexible, coordinated and secure manner, strongly depends on metadata. currently, grid metadata is generated and used in an ad-hoc fashion, much of it buried in the grid middleware code libraries and database schemas. this ad-hoc expression and use of metadata causes chronic dependency on human intervention during the operation of grid machinery. therefore, the semantic grid is emerged as an extension of the grid in which rich resource metadata is exposed and handled explicitly, and shared and managed via grid protocols. the layering of an explicit semantic infrastructure over the grid infrastructure potentially leads to increase interoperability and flexibility. in this paper, we present psg framework architecture that offers semantic-based grid services. psg architecture allows the explicit use of semantics and defining the associated grid services. psg architecture is originated from the integration of peer-to-peer(p2p) computing with semantics and agents. ontologies are used in annotating each grid component, developing users/nodes profiles and organizing framework agents. while, p2p is responsible for organizing and coordinating the grid nodes and resources.



computational grids are sharing environments in which collections of geographically distributed hardware and software resources are made available to groups of remote users. ian foster et al. define the grid problem as coordinated resource sharing and problem solving in dynamic and multi-institutional virtual organizations. grid computing combines the technologies of distributed computing, networks, servers and storages, and supports resource sharing across differentorganizations. after almost 20-year development, grid computing has many varieties, such as computational grid, data grid, access grid, information grid, service grid, wireless grid and cloud computing.



that any field of human activity is producing. although databases and data warehouses are nowadays more powerful and can manage large datasets, only a small portion of data will be accessed by humans or programs. the obstacle is not the technology to store and to access data, but perhaps what is lacking is the ability to transform data tombs in useful data and extract knowledge from them. therefore, the grid is moving from computation and data management, to a pervasive world-wide knowledge management infrastructure. to achieve this very ambitious goal, next generation grid is introduced to develop grid frameworks based on the key technologies available such as semantic web, peer-to-peer systems, and ambient computing.



the semantic grid is an initiative of the uk epsrc/dti core e-science program that aims to integrate and bridge the efforts made in the grid and in the semantic web. the semantic grid is an extension of the current grid in which information and services are given well-defined meaning, better enabling computers and people to work in cooperation. this approach is essential to achieve the full richness of the grid vision, with a high degree of easy-to-use and seamless automation, and hence, enables flexible collaborations and computations on a global scale. through provision of ontological support to the grid, there is the potential to create a searchable, reusable resource that is understandable by and accessible to a wider community.



the paper is organized as follows. section 2 presents some related work on semantic grids including some attempts towards integrating ontologies. section 3 introduces the main psg components and services. in section 4, the detailed framework architecture is presented. section 5 introduces the



the open grid services architecture(ogsa) is the result of a standardization effort, and now it is sustained by the grid standards body, namely the open grid forum(ogf). ogsa aims to define a core set of capabilities and behaviors for grid systems. semantic-ogsa(s-ogsa) is a reference architecture that extends ogsa to support the explicit handling of semantics, and defines the associated knowledge services to support a spectrum of service capabilities. the objective of s-ogsa is the provision of a unified platform for exposing and delivering explicit metadata in grid applications, including a formal framework and a set of guidelines to ease the development of semantic grid applications. sogsa has three main aspects: the model(the elements that it is composed of and its interrelationships), the capabilities(the services needed to deal with such components) and the mechanisms(the elements that will enable communication when deploying the architecture in an application).



another architecture, that provides distributed data management based on semantics, is open grid services architecture data access and integration(ogsa-dai). ogda-dai is about sharing data, whether this data lies within a single organization, between a group of partners, or with the public. by sharing data, ogsa-dai can identify, understand and exploit complex interactions between disparate variables and so convert data into information. besides, ogsadai allows data in distributed databases to be accessed, updated, transformed and combined. ogsa-dai has a powerful distributed query processor that allows queries to be run over many databases as if they were a single database. ogsa-dai can be used with relational and xml databases and with file systems.



psg architecture comprises three main components: p2p overlay, multi-agent system(mas) hierarchy, and semantics. p2p overlay is used to build non-hierarchical decentralized grid services and hence increase grid scalability. furthermore, using p2p model provides a fully decentralized system without using of pre-existing infrastructure or central administration. semantic services are responsible for integrating ontologies with grid entities and providing ontology matchmaking mechanisms for resource discovery. moreover, semantic services provide users with intelligent reasoning and interlinking of available resources on the grid. the reason behind using multi-agent systems in our framework is to provide both p2p and semantic services with flexible and decentralized decision making capabilities.



p2p overlay networks for the internet have been classified based on the structure of constructed network overlay into two categories: unstructured p2p overlay networks and structured p2p overlay networks[13,14]. in unstructured systems such as gnutella, the placement of data files is totally isolated from the overlay topology and random search algorithms are used to locate data files. in the contrary, structured systems define the relationships between nodes and data files. numerous structured p2p overlays have been proposed, such as can, chord, and pastry. in our framework, nodes are organized using chord protocol. the chord maps the key onto a node using consistent hashing function. moreover, the chord protocol specifies how to find the locations of keys, how new nodes join the system, and how to recover from the failures of existing nodes.



agent-based systems technology has generated lots of excitement in recent years because of its promise as a new paradigm for conceptualizing, designing, and implementing software systems in open and dynamic environments. agent architectures are designed to exhibit autonomy, decentralized coordination, and complex distributed behaviors in highly dynamic environments such as grids[19,20]. currently, agents on the internet mostly perform information retrieval and filtering. when agents and grids systems cooperate together, agents will perform information gathering in context and sophisticated reasoning in support of user problem-solving tasks. some of the gained benefits of this integration are modularity, autonomy, swarm-level coordination, and immersion in their environment, to more advanced capabilities such as problem solving, meta-reasoning, learning, shared goals, and human system collaboration.



atile resources described using different approaches and languages, and managed by different virtual organizations. in such heterogeneous and dynamic environments, syntactic keyword and taxonomy-based matching is insufficient to achieve high precision resource discovery. in order to improve the precision of a discovery service, resources must be given well-defined meaning carried by semantic information added to resource descriptions[19,26,27].



ontologies are used in artificial intelligence, semantic web, software engineering and information science as a form of knowledge representation about the world. most ontologies describe individuals or instances(ground level components of ontology; they may include concrete objects such as people, animals, and planets, as well as abstract individuals such as numbers and words), classes or concepts(abstract groups, sets, or collections of objects), attributes, and relations. objects in the ontology can be described by assigning attributes to them. each attribute has at least a name and a value, and is used to store information that is specific to the object it is attached to. for example, the person object has attribute named age with value 20. an important use of attributes is to describe the relationships(also known as relations) between objects in the ontology. typically, a relation is an attribute whose value is another object in the ontology[30,31].



our proposed framework, psg, is developed using service oriented architecture(soa) that integrates ontology with services definitions. psg provides conceptual model to describe resources and services. we develop framework ontology that describes every service and entity in the psg architecture. moreover, psg conceptual model is used to increase mechanisms of the activities related to services, namely discovery and negotiation. psg framework ontology is developed according to owl-dl ontology language specifications and describes peers, agents, tasks, and resources. moreover, framework ontology creates agent hierarchy and manages agent communication based on bdi reasoning model. task execution is also included in framework ontology; each task is mapped to a set of related actions to be executed and alternatives plans could be used in case of failure of main plan.



management layer consists of the main services provided by psg starting from resource management service that organizes resources using semantic driven hashing(sdh), and the profiling service that keeps up-to-date profiles of both users and nodes. finally, management layer provides agent services, each agent role is provided as a separate service. agent management service(ams) is responsible for managing the communication between agent services and reporting environmental changes to update agent model.



the role of semantic layer is to provide the ontological support to users and middleware agents. a set of facilities is provided to users to enable them to interact with the framework like browsing, providing metadata, and finally evaluation mechanisms. browsing facility helps users to browse and navigate through available resources and used ontologies concepts. while, evaluation mechanisms affect the decisions taken by ontology agents in matchmaking process. another set of facilities is developed to guide ontology agents starting from handling rules for semantic relationships(sr) among different ontology concepts, then, ontology matchmaking(omm) process that is based on classification matching scheme, and finally reasoning and integration mechanisms(r&im) using rules(i.e., inference rules).



to allow agents to interact with each other, we provide a communication act library that is based on fipa specifications. this communication act library deals with constructing agent messages and transporting these messages where the message represents one of the agent communicative acts. am has a main role in providing the communication functionality for other agents as we design it as the communicator to eliminate the communication overhead from other agents. here we list the communicative acts that we use in our framework: based on environment changes. so, agent belief may be about peer, environment setting, or about another agent. we build dbi ontology so that beliefs can be updated and intentions can be reconsidered during task execution. as we previously mentioned, the framework ontology is developed using owl-dl ontology language specification. the owldl semantic syntax of any class consists of a set of direct superclasses and a set of restrictions. then, a class c can be written as c={superclasses}[{restriction}(here means union). the set of class restrictions include allvaluesfrom([6), somevaluesfrom(e), hasvalue(), mincardinality(), maxcardinality(), cardinality(=). while, the class owl:thing is the main class in owl-dl ontology and every owl-dl class is a subclass of it.



action={owl:thing}[{hasweight some actionweight and hasstate some actionstate}. action class is expressed as a subclass from owl:thing and has restrictions that specify having action weight(either trivial or vital action), and action state(either unexecuted, done, failed). if any action has weight of vital action and fails to be executed causes the failure of the whole plan and then trying of executing the alternative plans.



agents should have the ability to watch the environment in order to respond to dynamic environment changes. moreover, agent should reconsider their set of desires/intentions and goal relationships with environment updates. in psg architecture, agents are capable of monitoring environments for specific series of events. these events either are related to application execution logic or environment prosperities. we interpret these events into rules and add them to agent beliefs. based on these rules, agents can add or infer new beliefs and change their set of desires/intentions according to new beliefs. when a new belief/desire is generated, existing contradictory or obsolete belief/desire will be removed. the following are the rules that agents use in managing their dbi:



resource accessing. sharing relationships can vary dynamically over time, in terms of the resources involved, the nature of the access permitted, and the participants to whom access is permitted. these relationships do not necessarily involve an explicitly named set of individuals, but rather they are defined by the access policy that governs access to resources. in order to allow users access resources only those are permitted to them, we attach with each user and resource authority level. once user announces a resource to be shared, rm agent allows access to be granted to any user when his authority level is greater than resource authority level.



any ontology concept can be written as a class c that consists of a set of the direct superclasses of c and a set of restrictions,, for short c= ss[ sr.(here[ means union, while\ means intersection, ss is the short for the set of direct superclasses and sr is the set of restrictions). the subsumption distance is the distance between the two concepts in the hierarchy. while, to get the definition distance between two concepts c1= ss1[ sr1 and c2= ss2[ sr2, the ontology agent performs the following steps:



now, sr1 and sr2 contain all the restrictions that the two concepts have and inherit from their superclasses. simply, the definition distance will be the sum of all differences in the sr1 restriction from restrictions in sr2. the meaning of the difference in restrictions here refers to restrictions in sr1 that are not satisfied or realized through the set of restrictions in sr2.



der to form a social network of academics in a university. academic and organizational information that is available by university users is investigated in order to create a campusbased resource described in terms of semantic description. the campus-based resource is also enriched with additional semantics that link one resource to another. semantic campus application provides a range of capabilities such as ability to diagnose relationships between the academics in the university, ability to find potential experts in specific research areas and ability to provide useful information that represents the individual experience of the academics and research interests that they share.



a campus network is an autonomous network under the management of a single entity that exists on a university campus or within a local geographic area such as a business park, a government center, a research center, or a medical center. the ideal campus network provides easy access from any access point to all information pools, including library materials, departmental libraries, non-print media collections, institutional databases, etc. the ideal campus network provides easy sharing of electronic resources such as data, text, images, sound, and video across the network. moreover, the campus network tells a user that his/her friends are nearby. these pervasive applications are active all the time, and move everywhere the user moves.



normalpeer class is expressed as a subclass from peer and restrictions that specify having agents with roles(nm: network management, om: ontology management, pm: profiling management, rm: resource management). also, restrictions of normalpeer specify that this peer is included in dht and this is the reason it has a network management agent. moreover, as this peer joins the dht, its power indicator, connection indicator, and computing resources must not be low.



edgepeer class is expressed as a subclass from peer and restrictions that specify having agents wit roles(om: ontology management, pm: profiling management). as edgepeer is considered as a week node, it is not included in dht and hence has no network management or resource management agents. also, this peer power indicator, connection indicator, and computing resources may have low values.



should be mapped into ontology concepts. simple knowledge organization system(skos), introduced by the w3c, is a model for expressing knowledge organization systems in a machine-understandable way, within the framework of the semantic web. the skos core vocabulary is a set of rdf properties and classes that can be used to express the content and structure of a concept scheme as an rdf graph. the following are sample from semantic campus classes and their properties as developed in our ontology. sc is used as a namespace identifier for the semantic campus ontology, foaf terms are prefixed by foaf, and skos terms are prefixed by skos.



we build a set of experiments to compute the cost of using ontology in resource matchmaking and indexing. moreover, to compute the communication overhead we focus our analysis in counting messages exchanged among peers and categorizing these messages based on type or purpose. besides, as semantic campus application is deployed on mobile devices, we provide recovery and optimized dht adaptation services. we run a separate experiment to characterize psg behaviour with different churn rate of mobile peers. the experiments are built as fully symmetric environment which means that all nodes have identical functionalities and responsibilities. but also we use asymmetric capabilities of peers(i.e., different connection states, different battery life values, and different processing capacities of mobile nodes).



so, every peer keeps a profile based on the peer classification in psg framework ontology. the peer profile is the representation of the peer capabilities at any given time. in the experiments a peer is classified either as edge, or normal node based on its power, connection state, and computing capabilities. in every experiment the peers run concurrently and the peer processing starts by loading the framework services and then join the chord ring using its chordid. moreover, the peers construct the ontology concepts hierarchy from the ontology file and then start to create semantic relation among these concepts and add the relations as ontology beliefs to the that the power of ontologies comes from the ability to describe relations among concepts. hence, the more semantic relations between ontology concepts, the more reasoning can be done and intelligent results we can get. in order to overcome the time cost of loading ontology, ontology engineers could build set of ontology files with different level of details from the domain ontology and on peer start-up ontology agent can load the appropriate details file that matches the current peer profile.



the results show that the change in resources count increases the time with lower percentage than the change in network size. as doubling network size from 4 to 8 nodes increases the publishing time with 61:69%, while doubling number of resources from 5 to 10 increases the publish time with 6:13%. therefore, users of the campus application should take care of the number of resources published on large networks as it would be a time cost process. so, if we attach importance factor with each resource and relate this factor with number of users that will benefit from sharing this resource; this will lead to limit three different sets of applications, the first uses psg middleware that offers a structured p2p overlay using chord dht over jxme. the second set uses flooding technique over jxme, while the third uses flooding with time-to-live(ttl) added to message. ttl is set to the value of chord ring size when the message is created and it is decreased by 1 when the message is received by intermediate nodes. the message is discarded when its ttl reaches 0. we focus our analysis on number of messages exchanged in the following cases:



in the second flooding application, flooding with ttl, we perform the same scenario but this time we use ttl counter. in this application, the new node sends only one message to its predecessor. the message is sent with ttl counter, and on receiving a message with ttl that is grater than 0, it will be forwarded to the predecessor of the received node. the message will be discarded when its ttl reaches 0.



