abstract multilevel feedback queue scheduler suffers from major issues of scheduling such as starvation for long tasks, fixed number of queues, and static length of time quantum in each queue. these factors directly affect the performance of the scheduler. at many times impreciseness exists in attributes of tasks which make the performance even worse. in this paper, our intent is to improve the performance by providing a solution to these issues. we design a multilevel feedback queue scheduler using a vague set which we call as vmlfq scheduler. vmlfq scheduler intelligently handles the impreciseness and defines the optimum number of queues as well as the optimal size of time quantum for each queue. it also resolves the problem of starvation. this paper simulates and analyzes the performance of vmlfq scheduler with the other multilevel feedback queue techniques using matlab.



in this paper we introduce a vague logic based new multilevel feedback queue cpu scheduler and call it as vmlfq scheduler. vmlfq scheduler considers all the above mentioned problems with mlfq and provides solutions to all. vmlfq scheduler dynamically calculates the length of time quantum for each queue which makes the scheduler flexible. hence, it can take decisions at run time. with all these, it also improves the performance of a system in terms of average waiting time, average turnaround time, average normalized turnaround time and average response time.



this paper is organized as follows. section 2 gives brief explanation of the task scheduling algorithm and the multilevel feedback queue scheduling. this section also discusses the related work of mlfq. section 3 provides the reader with the background information on vague set theory. section 4 describes vmlfq scheduler in detail. section 5 discusses the simulation with the help of sample task sets and results. finally, section 6 concludes the work.



mlfq scheduling is one of the widely known scheduling approaches for interactive systems. in 1962, corbato et al. had first accounted the mlfq scheduler in a system called as compatible time sharing system(ctss). just like multilevel queue, the multilevel feedback queue also contains multiple queues and each queue has a different priority. the highest priority task from highest priority queue is scheduled first with cpu. here, the priority is the key factor for task to run since mlfq allows moving the task from one priority queue to another priority queue. therefore, the fundamental principle of mlfq scheduling depends on how to set priorities of each task. instead of assigning a static priority to task, mlfq changes the priority according to its observed behavior.



whereas for q2, it follows fcfs approach. when the task enters in the system, firstly it is added at the end of q0 and then system allots a fixed single time quantum. this scheduling algorithm provides the facility to move the tasks from one queue to another queue. if the task consumes more cpu time, the task is moved to the lower priority queue q1 and allotted double time quantum.



since mlfq is mainly preferable algorithm for interactive tasks, torrey and coleman have implemented a mlfq scheduler to compare the response of interactive tasks. proposed algorithm has shown some improvements in terms of turnaround time, as the mlfq scheduling performance depends on the number of queues and the length of time quantum is assigned to each queue. with this aim, parvar and safari have utilized the recurrent neural network to optimize the number of queues and the size of time quantum of each queue of mlfq scheduler. hoganson has pointed the performance of mlfq scheduler in terms of task starvation. mlfq scheduling algorithm is efficient and effective for small cpu bound tasks or interactive tasks but in the lower priority queues, the cpu-intensive tasks may get starved and reduce the performance of mlfq scheduler. he has presented an



this research work is grounded to handle the uncertainty using vague set theory. we call this as vmlfq scheduler. we compare vmlfq with mlfq and pmlfq scheduling. we claim that the proposed work results in better performance in terms of average waiting time, average response time, average normalized turnaround time and average normalized turnaround time. in the next section we will discuss preliminaries of vague set theory which is the core part of our work.



rao and shet have further implemented the mlfq scheduler for multi-task real time systems. they have proposed a new multilevel feedback queue(nmlfq) scheduling algorithm which is implemented in c++. bhunia has also given a solution for the mlfq scheduler for the tasks which get starved in the lower priority queues for waiting cpu. the proposed solution considers five queues. in this approach, the number of queues is fixed and also the time slice increases from upper to lower queues. the tasks from the lower queue may also be shifted to higher priority queues on the basis of remaining cpu burst time which results in the reduction of number of starved tasks up to some level. we are calling this algorithm as pmlfq scheduling algorithm. in this book arpacidusseau and arpaci-dusseau have discussed numerous issues related to mlfq scheduling. there is no development in the literature which shows the handling of uncertainty in mlfq scheduling.



in a fuzzy set, each element is assigned a single membership value in the interval[0,1]. this single membership value does not separate the evidence in favor and evidence against. gau and buehrer have pointed this single membership value and introduced vague set theory over fuzzy set theory which considers both evidences individually.



consider a universe x for priority of the tasks. a vague value for priority of a task can be[0.5, 0.7]. here, 0.5 and.3 represent the truth part and false part of vague value respectively, whereas remaining 0.2 stands for hesitated part of vague value.



the length of optimum time quantum depends on the number of tasks, their burst time, and also on the system assigned time quantum. after completing the assigned time quantum, the task will either move to next level queue q2 or leave the system. if the task has completed its execution it will leave the system otherwise resumes its execution in the next level queue. the tasks of lower level queues will be scheduled only when the higher level queues becomes empty. as the task waits for a long time, the priority of the task will automatically move up on the basis of response ratio. considering the response ratio for scheduling the tasks prevents the starvation problem in lower level queues. the value of time quantum for other queues q2,..., qn depends on the value of time quantum for previous queue, number of tasks in current queue and the remaining burst time of tasks.



matlab is used to design the vmlfq scheduler. we are presenting some of the snippets for different modules defined for the vis-mlfq. below is the snippet for vlm which fetches the data from the data base and returns the vague value.



vmlfq scheduler performs better mainly for four reasons: the proposed vmlfq scheduler responds effectively to dynamic environment where number of queues are assigned at run time as well as time quantum to each queue is also provided at run time. it handles the uncertainty and impreciseness of tasks. in addition, vmlfq scheduler improves the starvation problem at the lower priority queues as we are considering the response ratio. last but not the least, it improves the performance of the system in terms of average waiting time, average response time, average turnaround time and average normalized turnaround time.



