one of the most popular abstraction used in security analysis uses abstract, symbolic terms to model the bit strings sent over the network. however, the high level of abstraction blurs the significance of proofs carried out in such models with respect to real executions. in particular, although good encryption functions are randomized, most existing symbolic models for security do not capture explicitly the randomization of ciphertexts.



in this paper we put forth a more practical alternative. we show that for a large class of security properties(that includes rather standard formulations of secrecy and authenticity), security of protocols with respect to the simpler model implies security in the model that uses labels. combined with the computational soundness result of, our theorem enables the translation of security results obtained in symbolic models that do not use labels to standard computational security. based on these results, we have recently implemented an avispa module for verifying security properties in a standard cryptographic model.



a central feature of the computational, complexity-based models is the ability to capture and reason explicitly about the use of randomness. moreover, randomness is essential to achieve any meaningful notion of security for encryption. in contrast, symbolic models rarely represent randomness directly. for example, a typical representation for the encryption of message m under the public key of entity b is the term{m}ek(b). notice that the symbolic representation does not capture the dependency on the randomness used to generate this ciphertext. while this abstraction may be sufficiently accurate in certain settings, in some other settings it is not sufficient.



a model that employs labels to capture the randomness used in ciphertexts(and signatures) has recently been used to establish soundness of symbolic analysis with respect to computational models. their results are based on an emulation lemma: for protocol executions, every computational trace can be mapped to a valid symbolic trace. the mapping is then used to translate security properties that hold in the symbolic model to computational analogues. note that the use of labels is necessary even when there is no explicit repetition of cyphertexts to distinguish for example the encrypted messages generated by the agents from those generated by the adversary.



in this paper we put forth and clarify an alternative solution, used implicitly in. the idea is to keep existing tools unchanged, use their underlying(unlabeled) model to prove security properties, and then show that the results are in fact meaningful for the model with labels. the main result of this paper is to prove that for a large class of security properties the approach that we propose is indeed feasible.



erties for protocols with and without labels, respectively. informally, the formulas of l1 are obtained by removing the labels from formulas of ll. both logics are quite expressive. for example, it can be used to express standard formulations for secrecy and authenticity properties.



in this section we provide the syntax of protocols with labels. the presentation is adapted from. the specification language is similar to the one of casrul; it allows parties to exchange messages built from identities and randomly generated nonces using public key encryption and digital signatures. protocols that do not use labels are obtained straightforwardly.



parties by outputting a set of identities. he receives in return the secret keys corresponding to the identities. it happens only once at the beginning of the execution. we focus on static corruption because the soundness result using explicit labels in only considers this kind of corruption. however, in our formal context, our reduction result should be easily extended to the case of adaptive corruption(when agents are corrupted at any time during the execution) since we can map traces with dynamic corruption to traces where all corrupted agents are so at the beginning.



we use the deduction relations to characterize the set of valid execution traces. we say that the trace(sid1, f1, h1),...,(sidn, fn, hn) is valid if the messages sent by the adversary can be computed by dolev-yao operations. more precisely, we



proof the key argument is that only pattern matching is performed in protocols and when a term with labels matches some pattern, the unlabeled term matches the corresponding unlabeled pattern. the proof is done by induction on the length of the trace. full details are provided in appendix a.



the avispa project provides a platform for automatic verification of security protocols. the platform includes a specification language called hlpsl that can be used for specifying both protocols and security properties. protocols specified in this language can be verified with four different tools. three of them, ofmc, atse, and satmc, use symbolic models where the number of sessions that can be executed in parallel is bounded. the fourth tool, ta4sp, provides verification abilities for an unbounded number of sessions. the tools can be used to verify three security properties: secrecy, weak authentication, and replay protection.



