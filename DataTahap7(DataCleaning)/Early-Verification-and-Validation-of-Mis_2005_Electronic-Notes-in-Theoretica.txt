to produce highly reliable systems it is recommended to use formal methods. they refer to mathematically based languages, techniques and tools for specifying and verifying such systems. even though there are some success stories, formal methods have not yet gained wide industrial adoptionthe main obstacles being the significant investment from learning a difficult technology and often a psychological resistance to mathematics. to overcome those problems, alternative approaches are now being explored such as lightweight formal methods and invisible formal methods. the former is a targeted application limited in scope and analysis to reach relevant conclusions at a minimal cost. the latter aims at providing sufficiently convenient, powerful, and useful technologies for practitioners to adopt them willingly.



the rest of this paper is structured as follows. section 2 gives some background information on kaos and its formal semantics. section 3 gives an overview of the functionalities supported by the toolbox. section 4 and 5 respectively detail two mature tools: the early analyzer(mainly about verification) and the animator(mainly about validation).



goals refer to objects which may be incrementally derived from goal specifications to produce a structural model of the system(similar to uml class diagrams). objects have states defined by the values of their attributes and associations to other objects. they are passive(entities, associations, events) or active(agents). agents are related together via their interface made of object attributes and associations they monitor and control, respectively. in the above formalization of the goal doorsclosedwhilemoving, m oving and doorsstate are attributes of the train entity declared in the object model.



the correctness of all refinements in a goal model does not ensure that the specification is consistent: inconsistencies can occur between goals. a conflict is a logical inconsistency between those goals. a divergence is a logical inconsistency under some(feasible) boundary condition. as opposed to goal refinement, checking inconsistencies is not a process local to a goal.



the early analyzer checks the correctness about the goal-model. in case of error, it will produce a counter-example trace which can be replayed in the animator tool. it can also be used for validation purposes in order to produce constrained animation traces.



in the incremental process of building four complementary models in parallel, errors will often occur in the formalization of the informal statements made by the stakeholders. the main purpose of the analyzer is to verify their formal consistency at an early stage of the process. another use of the tool is to produce possible system histories for validation purposes.



whose responsibility should of course be examined. another way is to enforce the postconditions rather that the preconditions. in fact the latter approach is documented as a well-known operationalization pattern and if the analyst had looked in that library in the first place, the mistake would not have occurred. in both cases, the formal analyzer stops returning counter-examples.



the tools used are the bdd-based engine and the sat-based engines of nusmv and the clp engine of oz. experiments with alloy show that it is better to use tools that provide high level input formalisms which optimize their mapping into sat, bdd,... it is planned to use alloy, some automatic theorem provers, and well-known theorem provers such as step or pvs(mainly to use their powerful decision procedures).



the different mappings replace infinite domains with finite ones(eg. alloy), and replace the infinite time structure with a bounded one(eg. bounded model checking). the analyst must interpret the results obtained with caution. for instance, no bounded trace can be found if a counter constrained to augment indefinitely is modeled. the analyst will often foresee this because the analyzed formulas are small.



scenebeans framework used here provides a good level of abstraction and is described in a simple xml format. it allows the designer to produce a new view and to interface it with the simulation engine in a few minutes for simple scenes(such as the train doors) to a few hours for more complex one(such as the global track view). a mapping tool helps in this process of connecting the view to the underlying model.



in the future, the early analyzer will be extended to support checks addressing obstacles and conflicts. the animator mapping is also being improved and a new component for designing control panels(such as train/plane/automative cockpits) is being implemented. other tools such as the the acceptance tests generator and the obstacle generator are in the implementation phase or being planned.



