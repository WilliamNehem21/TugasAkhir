attribute grammar specification languages, like many domain specific languages, offer significant advantages to their users, such as high-level declarative constructs and domain-specific analyses. despite these advantages, attribute grammars are often not adopted to the degree that their proponents envision. one practical obstacle to their adoption is a perceived lack of both domain-specific and general purpose language features needed to address the many different aspects of a problem. here we describe silver, an extensible attribute grammar specification language, and show how it can be extended with general purpose features such as pattern matching and domain specific features such as collection attributes and constructs for supporting data-flow analysis of imperative programs. the result is an attribute grammar specification language with a rich set of language features. silver is implemented in itself by a silver attribute grammar and utilizes forwarding to implement the extensions in a cost-effective manner.



domain specific languages offer several significant advantages to their users over general purpose programming languages. they allow problem solutions to be expressed using the notational constructs of the problem domain. these languages are often declarative in nature, resulting in concise programs. also, important optimizations and analysis are often only feasible when the domain specific information is directly represented in the language constructs of the dsl. but, domain specific languages have some disadvantages as well. van deursen et. al.[5, page 27] describe several and we quote three that pose particular challenges to dsl implementers here:



in the domain of language analysis and translation, attribute grammar specification languages offer many advantages but are also not as widely used as they might be. attribute grammars(ag) were developed almost 40 years ago by knuth and there has been a steady stream of research in such systems since then, see[17,7,2] to cite just a very few. the continued interest is due to the fact that they provide a high-level, declarative means for solving a wide variety of language analysis and translation problems. evidence of this can be seen in their use in implementing language processing tools for full-fledged popular languages such as java 1.4[6,7] and icon.



our experience using attribute grammars is primarily with our own system, silver. we have developed an attribute grammar specification language called silver to incorporate an extension to ags called forwarding that has proven useful in the specification of extensible programming and modeling/specification languages. we have used silver to specify an extensible implementation of java 1.4 and several modular language extensions. one embeds sql into java and performs static type-checking of the embedded sql queries. we have also built an extensible version of(a substantial subset of) the synchronous language lustre(used in embedded safety-critical systems) and various language extensions.



easily composed to create domain-adapted general purpose languages. we thus decided to implement silver as an extensible language in order to mitigate some these challenges. through a series of boot-strapping steps we were able to implement silver as an ag specification written in silver.



store(undecorated) syntax trees. this is useful for creating new trees in building, for example, optimized versions of a program or for constructing data structures such as representations of types used for type-checking. to support interesting language extensions, the core host silver language must be turing complete and thus higherorder attributes are essential. the core language also includes forwarding, a feature we introduced that allows productions to implicitly define the value of attributes by translation. aspect productions allow new attributes to be defined for an existing production typically defined in a different grammar or file. core silver also has a module system used in composing host language and extension specifications. section 2.1 discusses core silver.



several general purpose and domain-specific language extensions have been made to core silver to create the full features version. these include pattern matching on trees(by production), type-safe polymorphic lists, collection attributes, and convenience constructs such as auto-copy inherited attributes. additional extensions provide constructs for building control flow graphs for imperative programs and performing dataflow analysis via model checking. these extensions are discussed in section 2.2 and 3. we will not provide formal definitions of attribute grammars, higher-order attributes, forwarding, or collection attributes but will instead describe their functionality through examples. formal descriptions can be found in the cited papers.



next a synthesized attribute c of type string is declared. it contains the translation of simplec constructs to c and decorates the non-terminals specified in the occurs on clause. the attribute typerep is a higher-order attribute that holds trees whose root is a non-terminal of type trep. the type of an expr is represented by these trees.



following are a few sample production declarations. productions with the concrete modifier are used to generate the input specification to a parser generator. different extensions to silver integrate different parser and scanner generators into silver. these extensions provide translations of concrete productions and terminal declarations to the input language of a parser/scanner generator. productions marked as abstract or aspect are not used in the parser specification. the first production is named program, its left hand side non-terminal is prog and is named tribute definitions are given between the curly braces({ and}). here, the attribute c on p is defined as indicated. definitions of other attributes that use features added as language extensions such lists([...]) and collections(:=) are also shown but described below in section 2.2. attributes can be defined on concrete and abstract



productions; for simplec we evaluate attributes on the concrete syntax tree since it is a simple language. for more complex languages, one may separate the concrete and abstract syntax so that the only attributes on the concrete productions are used to construct the ast over which attributes are evaluated. productions for conjunction and negation follow. these define the higher order attribute typerep to be the tree constructed by the abstract production booleantype to indicate that they are boolean expressions. following are the abstract productions used to construct different type representations.



we focus on the global transformation that adds attribute definitions for prodname and childlist to productions in the object grammar. the transformations that add the declarations and occurs-on declarations are done in a similar manner. these transformation is additive and do not impede or conflict with other additive global transformations since it only adds declarations and attribute definitions to productions.(it is the responsibility of the developer of the global transformation to ensure that it can in fact be composed with other extensions. name clashes are the primary concern but these are easily handled as the implementation of silver uses of fully-qualified names based on unique module names.)



this specification composes the attribute grammars that are imported and composes their concrete specifications(when imported with the with syntax clause). the semantics of import are as if the imported extension(but not what it imports) was textually included directly in the importing file. the hiding clause is a mechanism for excluding certain items from being imported into a grammar specification. this is used above to ensure that silver:full is type-safe by not importing into the grammar the concrete syntax of the type-unsafe constructs anytype and cast.



the main production plays a role that is similar to main in c and takes the command line arguments as its string-type parameter. this production forwards to the silver driver production that controls compilation of silver grammars. it passes this its arguments and the parser that recognizes the language composed of the concrete syntax specifications that are imported.



1.4, a subset of lustre, and silver itself. different full featured versions of silver are implemented as the composition of a core silver language and various general purpose and domain-specific language extensions. it supports the specification of composable local and additive global transformations. higher-order attributes, forwarding, and collection attributes have not previously been available in a single ag system and were initially developed by different research groups. while none of these features is themselves new, a framework in which one can easily combine different general purpose and domain specific features is. these general-purpose and domain-specific additions to core silver reflect the need for language evolution. in silver, the evolution is achieved by adding these new features as modular extensions to the host language, core silver.



