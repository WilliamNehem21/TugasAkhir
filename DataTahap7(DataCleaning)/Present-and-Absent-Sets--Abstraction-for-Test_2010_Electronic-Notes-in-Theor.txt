we present a new abstraction of reactive systems interacting with databases. this abstraction is intended to be used for model-based testing. we abstract the database into two sets: present set and absent set, and present a proof of this abstraction. we present two extensions of fsm, the dbfsm and pafsm. dbfsm are a form of fsm incorporating databases. pafsm are an abstraction of dbfsm using present-absent sets. depending on what type of testing is to be done, the translation is tailored to fit this purpose. we show how this translation is related to the present-absent abstraction. finally, we illustrate the approach through a small example and show how this can be used for testing with the model-based testing tool uppaal tron.



this paper presents one such abstraction. we model the database as two sets, the present set and the absent set. the present set is an under-approximation of the data present in the database, and the absent set is an under-approximation of the data not present in the database. this way we can abstract over an infinite amount of databases with two small sets.



to enable model-based testing using this abstraction we present two new forms of fsm: dbfsm and pafsm. we show that the present-absent abstraction is used to translate from dbfsm to pafsm, and how specifications for testing can be developed using pafsm. additionally we show an example and how test cases can be generated from this example.



in this paper we consider reactive systems which interact with databases in a shallow manner, meaning no complex operations on the data are performed. rather the system can insert or remove values to and from the database and the control flow of the systems can depend on the presence or absence of values. we refer to this simplistic view as databases althought databases are far more complex. the simplistic view in this paper is a starting point and is intended to be extended with a more complex view of databases.



the paper is structured as follows: section 2 describes some related work. section 3 describes model-based testing in its two forms, online and offline. section 4 through 7 describe the theoretical parts of this paper. first the present-absent abstraction is explained and proved. then extended finite-state machines are explained, and these are further extended to include databases and present absent sets. the abstraction and translation between dbfsm and pafsm is described in section 8. a short example is presented in section 10, and section 11 concludes the paper.



model-based testing originates in the formal approaches developed by tretmans[6,7], and implemented in the tool torx. these approaches have been extended to include real-time by hessel et al., and implemented in uppaal tron. also, a number of commercial uml-based tools are emerging, such as qtronic and atg.



online testing merges test-case generation and execution into one activity. the test cases are dynamically derived from a simulation of the model and sent to the implementation under test(iut) directly. output from the iut is observed and the state of the model is updated accordingly. the advantages of online testing include easier handling of non-determinism and the reduction in state-space. nondeterminism is easier to handle since the iut is dynamically observed, thereby revealing which non-deterministic choices have been taken, eliminating the need for the test tool to track unnecessary states. the state-space is reduced for the same reason. disadvantages include the difficulty to reason about coverage and the arbitrarily long traces complicating the process of linking an erroneous test case to an error in the iut.



we now introduce the present and absent set abstraction originally proposed in. the abstraction abstracts a database into two sets; the present set and the absent set. the present set is an under-approximation of the values which are present in the database and the absent set is an under-approximation of the values which are not in the database. this can be seen as a three-valued-logic, where if the value is in the present set it corresponds to true, if the value is in the absent set it corresponds to false, and if the value is in neither it corresponds to unknown. if the value is in both sets it corresponds to an erroneous state, this should be avoided. this abstraction allows us to abstract over an infinite number of databases and abstract away from the actual content of the database, using a relative small set of values.



we now present the translation from dbfsm to pafsm. two translations are presented, they differ in the way unknown values are handled. the first translation assumes full knowledge of the database, and enters an error state if at any time an unknown value is observed. the second assumes no knowledge and is allowed to nondeterministically choose whether an unknown value should be treated as present or absent.



if the value is in the present set this transition has no effect. if the value is in the absent set, it is added to the present set and removed from the absent set. if the value is in neither present nor absent the value is added to the present set.



if the value is in the present set, it is removed from the present set and added to the absent set. if the value is in absent set this transition has no effect. if the value is in neither present nor absent the value is added to the absent set.



online testing, the non-deterministic choices allow the model-checker to be in both states at the same time, and reduce the state space when observations from the iut reveal which choice was correct. when trees are generated for offline testing the tester can traverse the tree and follow branches according to the output observed. how the non-determinism is handled in practice is shown in more detail in the concrete example in section 10.



traditionally testing is not performed on the system in actual use, since the test cases can interact arbitrarily with the actual database. by proving correctness on the present-absent sets, and proving that the test cases will only interact with the specific test data, the tests can be executed on the actual running system. by observing the state of the database the state of the system can be entered into the sets, and the tests can be executed, only affecting the test data in the database.



to illustrate the abstraction and test-case generation, an example is presented. this example is manufactured by hand since no tool support has been developed yet. the specification of the iut is a network of timed automata in uppaal syntax. three network of timed automata are presented: one modeling the system using databases, one translation assuming no knowledge and one assuming full knowledge.



the system, the output channels are used to return to the user. the shared variable currentid is used to pass the id of the calling user to the system, and used by the user to ensure the result is returned to the correct user. the add and remove methods are used to add and remove cid to and from the database respectively.



the values. if the value is unknown a non-deterministic choice is available, either return ok and add the user to the present set, or return error and remove the user from the set. the methods login and logout handle this. this has the effect of updating the database when the correct choice is observed from the iut. notice that when the result of a login action is unknown both the ok and the error choice add the user. this is because, returning error means the user is in the database, therefore we add him. if we return ok the user is not in the database, and we should remove him, however, since the login was successful the user is now added to the database, therefore we add him.



this system has been tested against an implementation using uppaal tron. the systems was instantiated with ten users. a mutant is made, in which the login action has a 1/500 chance to fail to update the database. the system has been implemented such that the database is filled with random values at initialization. this way the tester has no way of knowing the state of the database when starting the test. the test was run ten times on the correct implementation and ten times on the mutant. each successful test executed about 22.000 action(input and output combined). one of the mutant runs failed to detect the mutant, this is due to the randomness of the mutant. the tests have shown us that the present-absent set approach has the capabilities to automatically test a system which interacts with a database without knowledge about the state of this database prior to testing.



static testing tool. to generate the traces the uppaal model checker can be asked whether a template can reach a specific location and get a trace of how to reach this location. this trace can be used as a test case.



we have introduced the abstraction from a database into present and absent sets and a proof of this abstraction. we have introduced two new forms of fsms, the dbfsm and pafsm and explained how to translate from dbfsm to pafsm. furthermore, we have explained two different translations and how these relate to the present-absent abstraction.



we are able to perform online testing of systems without taking any assumptions about the state of the database into account. as the test progresses, we gradually gain more knowledge about the state of the database. this increase of knowledge will reduce the state space of the simulation model, as well as enable us to potentially guide the testing in a desired direction.



we enable two forms of offline testing. one without assuming any knowledge about the state of the database. we are able to generate abstract traces which automatically learn the state of the database and make choices accordingly to reach the desired state. by examining the state of the database prior to generating the test cases, we are able to generate static traces which can be executed without any branching. this removes the problem of state dependency when performing offline testing on database systems. there are some potential performance issues with this approach, but we are hopeful as to finding a solution to these problems.



as future work we plan to extend the simplistic view of database presented in this paper. we plan to measure the effectiveness of this approach on larger examples, preferably industrial. we are currently working on extending the uppaal model checker to improve the effectiveness of model checking systems using present and absent sets.



