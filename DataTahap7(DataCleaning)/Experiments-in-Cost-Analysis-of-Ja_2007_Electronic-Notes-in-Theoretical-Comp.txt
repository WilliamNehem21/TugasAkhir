having information about the execution cost[17,11] of a piece of code is quite useful; in many cases, this aspect is crucial in choosing among different implementations of the same specification. moreover, this may allow certifying that the execution of an application meets the specified resource-consumption constraints. cost analysis is also(and especially) very useful in the context of mobile code, where resources are very limited and we may want to accept or reject code depending on its cost. in the limit, accepting mobile code without cost guarantees[6,12] can be a source of denial-of-service attacks, since execution can be very(or infinitely) costly. it is important to note that it is unlikely to have access to the source code in the above-mentioned situations; rather, we can only directly deal with the compiled



in general, cost analysis is far from being trivial; it takes a good amount of expertise for programmers to have an intuition about which implementation techniques might lead to more efficient programs. this is particularly difficult when we are dealing with a low-level, object-oriented language such as java bytecode. in some sense, it is to be expected that automating cost analysis of java bytecode will not always succeed in giving meaningful results, especially for very intricate code. thus, one of the main questions about the cost analysis framework we have recently proposed, and which we assess in practice in the present work, is whether the generated cost relations can be automatically simplified into a closed form solution when considering the simple cost model traditionally used in complexity analysis, which counts the number of execution steps(bytecode instructions).



the rest of this paper is structured as follows. sec. 2 provides an overview of our cost analysis framework for java bytecode. afterwards, we study three classes of benchmarks. in sec. 3, we analyze some well-known recursive procedures which, due to their structure, give rise to cost relations which can be easily handled



from the cfg we obtain a recursive representation of the method, where iteration is transformed into recursion. in this representation, each block in the graph is represented as a rule. in addition, the operand stack is flattened by converting its content into a series of additional local variables. note that this is possible since, in every valid bytecode program, the height of the local stack at each program point can be computed statically.



as for path length analysis, our analyzer does not support the analysis of arbitrary programs yet; in particular, the program is supposed to satisfy some correctness conditions:(1) data structures are not cyclic; and(2) whenever a reference is passed to a method, it is guaranteed that the corresponding structure(on the heap) is not updated by that method. in order to overcome these limitations, we should enrich our analyzer by sharing and cyclicity components. this is the subject of ongoing work.



moreover, it is important to identify the set of variables which are relevant to the cost, i.e., whose value may influence the execution time of the program. as an example, the index of a for-like loop is usually relevant since it affects the number of iterations; on the other hand, a variable which is used to store partial results has no effects in the cost, unless its value takes part in computations whose execution time is not fixed. relevant variables turn out to be those which are involved in guards or method calls, since(i) a guard affects the control flow of a program and, therefore, its execution time; and(ii) the cost of executing external methods can be clearly relevant to the overall cost. this analysis is similar, in its purpose, to program slicing; it is performed by propagating backwards through the control flow graph variables which are found to be relevant. in the end, when a fixpoint is reached, every block is labeled with the sets of input and output relevant variables which will be used to produce cost relations. the use of slicing in fib does not lead to the elimination of any variables from the relations, since, after the optimization described above, there is only one variable, n, which is clearly relevant to the cost. however, in the other examples(see section 3.1), several variables can be eliminated, thus leading to a simpler form for cost relations which could not be solved otherwise.



in this section, we infer the cost of two classical recursive procedures. in both cases, and in general for recursive procedures whose base case depends on constant values, the cost relations obtained by our analysis are directly solvable by mathematica. for simplicity, in the following the cost of all bytecode instructions is assumed to be 1; using a more refined cost model which assigns different costs to different bytecodes would not introduce further complications. for readability, we present only the original java code, instead of the bytecode.



we want to infer the cost of a simple reverse method which reverses the elements of an array. the recursive representation of reverse in our system takes the form reverse(a, i, r), where a represents the input array, i is the local variable and r is the resulting array. basically, the execution time depends on the number of loop iterations; therefore, relevant variables are those appearing in the guard of the recurrence relation for m2(which denotes the termination condition of the loop). only a and i appear in the cost relation yielded by our system, while r is removed. the size analysis abstracts the array a to its length and infers that the variable i decreases by one unit in each iteration.



in this section, we study several object-oriented features. first, we see how we deal with dynamic dispatching in the context of cost analysis. then, we analyze the cost of reversing a list implemented as a class with field attributes. finally, we infer the cost of a linear search algorithm over the list. to the best of our knowledge, these examples illustrate novel object-oriented features which are not studied in existing cost analyses for other languages and paradigms.



in order to assess the practicality of our cost analysis framework, we have implemented a prototype analyzer in ciao. the experiments have been performed on an intel p4 xeon 2 ghz with 4 gb of ram, running gnu linux fc-2, 2.6.9.



our experimental results are very preliminary, and there is still plenty of room for optimization(mainly in the size analysis phase). the main planned optimization is the use of abstract compilation techniques in order to avoid re-computation of abstract operations which are related to the bytecodes. this can be done since the analysis is denotational, so that those bytecodes will always have the same abstract approximations.



this work was funded in part by the information society technologies program of the european commission, future and emerging technologies under the ist-15905 mobius project, by the spanish ministry of education under the tin-2005-09207 merit project, and the madrid regional government under the s-0505/tic/0407 promesas project. s. genaim was supported by a juan de la cierva fellowship awarded by mec.



