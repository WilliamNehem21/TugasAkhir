since the seminal work by moggi in the late 80s, monads, more precisely, strong monads, have become a generally accepted tool for structuring effectful notions of computation, such as computation with exceptions, output, computation using an environment, state-transforming, nondeterministic and probabilistic computation etc. the idea is to use a kleisli category as the category of impure, effectful functions, with the kleisli inclusion giving an embedding of the pure functions from the base category. although finer and coarser accounts of effects based on lawvere theories(this reference is only the first in a series of papers; for more recent presentations, see[28,18]) and arrows/freyd categories[17,30] also exist, the monadic approach remains central and best known. in particular, monads are part of the standard libraries of haskell.



in functional programming, kieburtz was first to advocate comonads as tools for structuring context-dependent computations and gave some interesting examples. the specific application of comonads to environment-passing computation or implicit parameters has been discussed by lewis et al..



in this paper, we proceed directly from the motivation to treat some important notions of context-dependent computation, namely notions of dataflow computation(stream-based computation) and notions of computation on trees such as tree relabellings in attribute evaluation. we demonstrate that a rather elegant framework for working with these notions of computation is given by symmetric(semi)monoidal comonads. reassuringly, strong monads appear associated with symmetric monoidal comonads also in works on the categorical semantics of intuitionistic linear and modal logic[4,7]. we describe some aspects of the structure of cokleisli categories corresponding to symmetric(semi)monoidal comonads and describe then a general interpretation of languages for context-dependent computation into such categories.



we have previously described our proposal at work on language processors for dataflow computation and attribute evaluation implemented in haskell. in this paper, written with a different slant, we look into the underlying theory, concentrating on the issue of the most appropriate additional structure for comonads. the organization of the paper is the following. first, we present a compressed recap of strong monads, their kleisli categories and the semantics of effectful languages`a la moggi. then we develop our analogous account of context-dependent computation based on cokleisli categories of symmetric(semi)monoidal comonads. we emphasize the important differences resulting from the fact that, despite dualizing from monads to comonads, we are still interested in transferring as much of a given cartesian closed structure(possibly with coproducts and a uniform parameterized fixpoint operation) as possible. finally, we briefly comment on the relation to computational comonads and some important advanced issues that we intend to



in case of general or causal stream functions, an element of d1 is a list over 1, i.e., a natural number, for the time elapsed from the beginning of the history at a moment of interest. of course it identifies a stream position.



in what sense is this semantics correct? we could compare the generic cokleisli semantics to some other generic semantics, e.g., an operational semantics, if we had one available. unfortunately this is not the case: generic operational semantics for context-dependent languages is future work for us.



several of notions of context that we looked at do not correspond to strong symmetric monoidal comonads. rather, they correspond to lax symmetric semimonoidal comonads, for the reason that m should morally be partial and the total version fails to be an isomorphism and rules out the existence of a cohering e. here indexing in the form of use of comonads on presheaf categories can help.



it is feasible that a notion of computation combines both effectfulness and context-dependence. such combinations can correspond to distributive laws of a comonad over a monad in which case the category of impure functions is the bikleisli category of the distributive law. this design appeared already in the work of brookes and van stone. we have applied it to clocked causal dataflow computation, combining causal dataflow and exceptions. power and watanabe have given a definitive account of the mathematics of distributive laws between monads and comonads.



lawvere theories and arrows/freyd categories[17,30] 4 are finer and coarser approaches to effectful computation. lawvere theories make the effectful operations of a notion of effect explicit. arrows/freyd categories, generalizing strong monads/their kleisli categories, were proposed as an axiomatization of notions of impure computation reaching beyond moggi-style effects.



