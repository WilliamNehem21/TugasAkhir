this paper presents the integration of the optimization known as dynamic cut within the functional-logic system t oy. the implementation automatically detects deterministic functions at compile time, and includes in the generated code the test for detecting at run-time the computations that can actually be pruned. the outcome is a much better performance when executing deterministic functions including either or-branches in their definitional trees or extra variables in their conditions, with no serious overhead in the rest of the computations. the paper also proves the correctness of the criterion used for detecting deterministic functions w.r.t. the semantic calculus crwl.



nondeterminism is one of the characteristic features of logic programming shared by functional-logic programming. it allows elegant algorithm definitions, increasing the expressiveness of programs. however, this benefit has an associated drawback, namely the lack of efficiency of the computations. there are two main reasons for this:





the paper is organized as follows. the next section introduces the non-ambiguity criterion for detecting deterministic functions and the correctness theorem. section 3 shows by means of examples the cases where the optimization will be applied. section 4 presents the steps followed during the implementation of the dynamic cut in t oy, and section 5 finalizes presenting some conclusions.



the non-ambiguity condition characterizes a set of functions f as deterministic. this is because the value of a function may depend on other functions, and in general this dependence can be mutual. in practice the implementation starts with an empty set f of non-ambiguous functions, adding at each step to f those functions that satisfy the definition and that only depend on functions already in f. this is done until a fix-point for f is reached.



examining the code we find out easily the source of the redundant computation: the condition of function part includes two existential variables u and v. when the user asks for more solutions the backtracking mechanism looks for new values of the variables satisfying the conditions. but this is unnecessary because the rule already has returned true and cannot return any new value. the dynamic cut will avoid this redundant computation. here is the same goal running after activating the dynamic cut optimization in t oy:



now the system detects automatically that there are no more possible solutions after the first one, reducing the 40 seconds to 0. the interested reader can find in more experimental results. the experiments in that paper were tested introducing manually the code for the dynamic cut before the optimization was part of the system. however the results have been confirmed by the current implementation.



function calls f(e1,..., en) occurring in the first order t oy program rules are replaced by prolog terms of the form susp(f(e1,..., en), r, s) called suspensions. the logical variable s is a flag which is bound to a concrete value, say hnf, once the suspension is evaluated. r contains the result of evaluating the function call. its value is meaningful only if s==hnf holds.



after g' succeeds, i.e. after an or-branch has produced a result, the test for the dynamic cut is performed. this test, represented by predicate checkvarlist, checks if any of the variables in the list produced by varlist has been bound. this will mean that either an input logical variable has been bound or a nondeterministic function has been evaluated. in any of these cases the cut is avoided. otherwise the dynamic cut, which is implemented as an ordinary prolog cut, is safely performed. the definition of checkvarlist is simple:



the code of this example corresponds to the implementation of an orcut node. the two branches are represented here by the two clauses for multi'(corresponding to function g' in the case 3 of the previous subsection). the cut is introduced if the first alternative, which corresponds to a case node with two possibilities, succeeds.



in this paper we have presented the implementation of the dynamic cut optimization in the functional-logic system t oy. the optimization improves dramatically the efficiency of the computations in the situations explained in the paper. moreover, we claim that in practice it allows the use of some elegant and expressive function definitions that were disregarded due to their inefficiency up to now.



the definitional tree associated to each program function is examined. the or nodes occurring in deterministic functions are labeled during this process as or-cut nodes. also the try nodes corresponding to program rules including existential variables in the conditions are labeled as try-cut nodes.



