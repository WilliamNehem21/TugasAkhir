producing high quality software has always been an issue for software engineering community. model driven engineering(mde), as a new paradigm in software engineering, faces this issue as well. since models are the main artifacts which drive software development in mde, the quality of models is important.



using pattern languages, while building software in mde approach, is a key tool for designers. one benefit of using patterns is to help designers to communicate their idea. the term pattern language refers to the fact that patterns create a vocabulary, i.e., a common language, used by designers.



these issues have direct impact on the quality of models. that means, selecting a wrong pattern or incorrect usage of a pattern could result in inconsistent and inefficient design and therefore low quality software. the tool assistance for quality management and consistency checking is necessary since merely manual inspection or review is not enough. further, mde promotes usage of tools in the hope of minimizing the effort for maintenance of model, as well as maximizing the benefits of modeling.



the quality of uml models can be viewed from three different aspects: syntax, semantics, and aesthetic. in uml documents, e.g., uml 2.0 infrastructure, well-formedness rules(wfrs) are defined for validating the abstract syntax and identifying errors in uml models. as a formal language, uml uses the object constraint language(ocl) for expressing wfrs. however, the semantic and aesthetic checks, if described, are explained by natural language since they are contingent on the underlying domain of the model. here is where case tools come into play and help designers in finding the problems and checking the quality of the models.



scr is a process which helps designers find problems in the application of patterns in their design and follow the wizards for repairing the problems. we investigate how the scr process can be customized for some eaa patterns. as our case study, we have integrated scr into one of the state of the art modeling tools, argouml. we have defined critics in argouml for six eaa patterns and show how the tool(based on the wizards) can help the designer in repairing the problems and producing more consistent models.



the rest of the paper is organized as follows. in section 2, we briefly introduce the idea of pattern languages and discuss the patterns of eaa as a pattern language. section 3 introduces the overall process of verifying pattern languages as well as the scr process for detecting problems in using a single pattern. in section 4 the case study of integrating the scr process into a modeling tool is described. related works are discussed in section 5, and in section 6, we conclude the paper.



documenting patterns and the relationship among them, in fact the pattern author is defining a language, called pattern language, that could be used by designers in developing new software systems. if we consider each pattern as a recipe for a solution, a pattern language is a set of recipes for a whole system. pattern names play a crucial role in a pattern language, because designers can use those names as a vocabulary that helps them communicate more effectively.



the patterns of eaa are decomposed into three layers, based on the idea of three-tiered architecture for client-server platforms, i.e., presentation, domain, and data source. the presentation layer is responsible for user interface, the domain layer deals with domain logic and business rules, and the data source layer is related to communicating with database of the system.



the scr process is one of the core processes for pattern verification which focuses on single patterns. in this paper, we extend the idea of scr such that as well as verifying the correctness of the application of single patterns, it is able to deal with the issue of dependency between patterns. however, the whole process is still in its infancy. more discussion on the whole process of pattern language verification is given in section 6.



the scr process is a simple three-step process for verifying the application of a pattern in a design. the process aims to help the designer, by detecting and fixing the problems in using a pattern. the scr process consists of the following steps. it is worth noting that this process is based on using uml profiles(see section 3.2).



sign: the first and most important property of a pattern is its sign. each pattern has a unique sign. if the process is based on a profile, the sign is simply indicated by a class which has corresponding stereotype. checking the sign is the first step of applying the scr process. if the sign is present, we continue the process.



criteria: the second property of a pattern is a set of criteria that indicates sound and consistent usage of the pattern. if all the criteria are met, a message will be displayed to the designer to inform his/her about using the pattern and stating that the usage of pattern is correct. for each failed criterion, which reflects a problem in the design, a warning message will be reported to the designer.



as a simple example, the ocl excerpt in the appendix i-listing 1 shows the definition of a general-purpose operation which is useful in defining most of the wfrs for patterns of eaa. this ocl defines an operation, named hasopst, for finding an operation in a class based on its name or its stereotype. this operation, for instance, can be used in another operation that checks whether the context class has four operations for insert, delete, update, and find. as mentioned earlier, we have implemented all the wfrs in java. the java code corresponding to the above ocl code is shown in the appendix i-listing 2. note that the code uses model.getfacade() as a handler for accessing all the model elements that are related to the current model.



to integrate the scr process into an ide, we need to have facilities for describing the sign, the criteria, and the repair, and be able to invoke each of these parts from the ide. instead of building such environment, we decided to integrate the scr process into existing tools. as our case study, we have selected argouml, an open source state of the art modeling tool. in this section, we provide a brief overview of the tool, we discuss the implementation aspects of the scr process, and we give an instant evaluation of the suitability of the tool for the scr process.



second part of the implementations is for finding correct usage of a pattern and reporting it to the designer. for this purpose, a new tab called detected patterns is added to the details pane of argouml. correct usages of patterns will be shown in a tree-like format in this tab with two main branches: design patterns and patterns of eaa. the design pattern branch is dedicated to the gof patterns which are not the target of our discussion in this paper. by detecting a pattern in each branch, the name of the pattern is shown in the tree and by selecting the pattern, all classes that play a role in the pattern will be displayed.



dependent on the logic behind critics. the fact is that critics are triggered only when one of the criteria is violated. that means, critics are always trying to criticize a design, not to confirm its correctness. hence, there is no possibility to inform the user about correct usage of a pattern in argouml. as mentioned earlier, we have solved the last problem by looking for the correct usage of the pattern along with the criticizing process and by reporting the correct patterns in a new tab.



in the area of model quality assessment, breu and chimiak-opoka have introduced a framework for quality assurance of models based on the concepts of queries, checks, and views. liu et al. have introduced a classification for design inconsistencies, and then they have developed an expert system(a rule-based system) using jess for detecting inconsistencies in a given uml design. the system is able to give advice to the user and fix the problems automatically.



kolovos et al. have defined a language named epsilon wizard language(ewl) which has concepts very close to the scr process. each wizard has a title, a guard, and a body. the brilliant aspect of their work is that the user can define the specifications of wizards off line in ewl language. as a tool, ewl is integrated into argouml. that means, by running argouml and selecting model elements, if the guard of a wizard is true, the title is displayed to the user and the body part is executed. ewl has model modification capabilities that can be used in the body part of wizards to repair the problems in a model.



to evaluate the idea of scr and its applicability and usefulness in current modeling tools, we did experiments with the argouml modeling tool. we observed that the scr process is able to be integrated in argouml by writing java code, and it helps designer in detecting problems early in the design process. however, hard coding the process steps into the tool is not a convenient way of tool extension.



as part of our future work, we aim to work on the whole process of verifying the pattern language application in a design. completing the pattern profile, and guiding user in selecting the right pattern are parts of the whole process. as the completion of our work with argouml, we plan to implement critics and wizards for all patterns of eaa and encapsulate the knowledge that is embedded between the lines of the pattern books into wizard and todo parts of the tool to guide the user for selecting the right pattern. this support for verification of models, would help designers to see problems is their design, how far they are from a sound design, and how much progress they have made in fixing the problems. for the repair part, having the possibility of preview, such as what is available for code refactoring in ides would be another nice feature.



