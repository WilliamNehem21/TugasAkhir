we present an algorithm for the translation of security protocol specifications in the hlpsl language developed in the framework of the avispa project to a dialect of the applied pi calculus. this algorithm provides us with two interesting scientific contributions: at first, it provides an independent semantics of the hlpsl specification language and, second, makes it possible to verify protocols specified in hlpsl with the applied pi calculus-based proverif tool. our technique has been implemented and tested on various security protocols. the translation can handle a large part of the protocols modelled in hlpsl.



the hlpsl language is the input language of the avispa tool. in more detail, the avispa tool takes as input an hlpsl specification, translates it to if and analyzes the result by invoking state-of-the-art back-ends, which return attacks(if any) to the user. since different tools are suited for solving different problems, it is relevant to integrate hlpsl with other tools for verification of security protocols. so far the available back-ends of the avispa tool have been based on three different technologies that cover a large share of the research arena in security protocol verification:



in this paper we propose a way to translate specifications in a subset of hlpsl to the dialect of the applied pi calculus that is supported by the proverif tool. this makes it possible to verify secrecy, weak authentication, and strong authentication properties of hlpsl specifications by invoking proverif on the result of the translation. it completes the number of available formalisms and technologies available for hlpsl.



hlpsl that we use. in section 3 we describe the dialect of the applied pi calculus to which the translation is performed. section 4 describes the algorithm of the translation. section 5 explains how proverif can be used to verify the outcome of the translation while section 6 gives some details of the implementation and the experimental results on a selection of cryptographic protocols that were modelled in hlpsl in the framework of the avispa project.



protocol specifications in hlpsl are divided into roles. some roles(the so-called basic roles) serve to describe the actions of one single agent in a run of the protocol or subprotocol. others(composed roles) instantiate basic roles to model an entire protocol run, a session of the protocol between multiple agents, or the protocol model itself. this latter role is called the main role.



in hlpsl, both variables and constants are typed. we will use the following types: agent, channel, public key, text, nat, bool, symmetric key, message, function, protocol id. certain types(text and channel) may have attributes enclosed within parentheses. for example, text(fresh) represents the type of freshly generated nonces and channel(dy) the type of channels that correspond to dolev-yao(dy) intruder model. in our



a transition is defined by a label lbi, a trigger event evi, and an action acti. each transition is triggered whenever its guard event predicate is satisfied and fires immediately. in case when a few events are satisfied, one of the transitions corresponding to them is chosen non-deterministically and executed.



in addition, the main role must have declared a constant i of the type agent that represents the intruder. it may also have a declaration of the form knowledge(i)= k, which describes the initial knowledge of the intruder. here k is a set of hlpsl terms.



the instantiations of the composed roles in an hlpsl specification form a tree with the main role as the root. to translate the composed roles we flatten this tree by repeatedly substituting the texts of composed roles for their instantiations and actual arguments for formal arguments, and using the parallel composition operator of the pi calculus to translate parallel compositions of role instantiations. besides, we rename all the constants declared in the composed roles to avoid name clashes and declare them as free constants unknown to the intruder. in addition, for each basic role instantiation we introduce a constant representing an identifier for this instantiation. we add a formal argument sid to each basic role and assign the instantiation identifier to this argument in each instantiation. the instantiation identifier we be used while translating strong authentication goals.



for each of the values s of the state variable, assigned to it in the hlpsl text of the role we create a process bs acting as the role in the state s. let t r(s) be the set of all the transitions that have the conjunction state= s on their left-hand sides and let nk be the set of fresh variables updated by the k-th transition(i. e. the set of those variables that have the fresh attribute and are primed on the right-hand side of the transition). then



it is worth noting that currently the semantics of hlpsl is not clearly defined. therefore, in some cases we had to make the decision of how to interpret hlpsl constructs. in this cases we tried to follow the semantics that is implemented in the avispa tool.



for example, in our subset of hlpsl it is not possible to model a situation in which a role receives a private key through a channel and then decrypts a message using this private key, i. e. a role has static knowledge. this is due to the fact that the private key must be known to the role at the beginning of its execution and written in the text of the role using the inv constructor. this is compatible with the avispa tool, which does not support processing of such a situation at the moment.



proverif has not terminated on the specification of iso3 protocol. for all the other protocols we found known attacks against flawed protocols, and proved the correctness of the correct ones. the attacks were the same as the attacks found by the avispa tool(using ofmc as the back-end).



finally, we are working to identify more sophisticated protocols to assess the scalability of our approach and to use other verification engines for the applied pi calculus. a possible approach is to use the hal model checker[16,15]. this approach is particularly convenient since hal can handle fresh names generation in an effective way.



