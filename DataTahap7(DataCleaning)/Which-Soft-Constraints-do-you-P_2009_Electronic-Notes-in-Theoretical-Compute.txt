soft constraints are gaining popularity in diverse areas such as orchestration of web services or optimization of scheduling decisions. however, current approaches to soft constraints preclude them from modelling certain decision problems with multiple preference criteria. we propose a new approach to soft constraints which allows a natural expression of these problems, describe an implementation in the rewriting logic system maude, and prove its correctness.



soft constraints are gaining popularity in diverse areas such as orchestration of web services(see e.g.) or optimization of scheduling decisions(see e.g.). however, current approaches to soft constraints preclude them from modelling certain decision problems with multiple preference criteria.



the structure of the paper is as follows: in section 2 we introduce the theory of monoidal soft constraints. we describe the transformations that we perform on constraint systems before submitting them to the solver in section 3. in section 4 we describe the branch-and-bound algorithm and prove its correctness. the final two sections present related work and our conclusions.



a monoidal soft-constraint problem combines the grades of several soft constraints into a single rank which measures the overall quality of a solution. we use a family of c-operations, called the preference relation to specify this combination process. while the grades represent the quality of individual constraints the preference relation expresses the importance we assign to the individual constraints.



improve the efficiency of constraint solving, all recursive specifications are written in tail-recursive form. in the following we present shortly the implementation of the constraints for the meeting scheduling service and the branch-and-bound algorithm for solving soft constraints. the implementation is based on our earlier work for solving soft constraints over constraint semirings. the main changes are: solving soft constraints over partially ordered monoids instead of totally ordered constraint semirings, and a flexible approach for specifying preferences between constraints by dynamically constructing cartesian and lexicographic products of monoids instead of using a(possibly composite) fixed constraint semiring.



in some cases, it is also possible to use divide-and-conquer optimizations. if two lists of constraints cl1 and cl2 are combined lexicographically, it is possible to solve the first constraint independently and then process the second constraint for each solution of the first one. cartesian products can also be computed independently if they do not share variables.



a general observation is that the introduction of totally ordered preferences tends to speed up the search significantly whereas the introduction of indifferences(which lead to partial orders) slows down the search, often several orders of magnitude. the divide and conquer optimization separates the problem into several smaller ones which can be solved independently and thereby tends to reduce the time necessary to compute the solutions. however, there are certain problems where each of the preceding statements does not hold and the reverse effect can be observed.



the most direct influence on our work was the elegant theory of semiring-based constraint satisfaction problems(scsps)(see e.g.[5,6,4]); the constraint solver presented in this paper is an enhanced version of the solver for semiring-based constraints presented in. semirings are not closed under lexicographic products, therefore scsps cannot be used to directly express the preference relations described in this paper. other approaches to generalize scsps for preference relations are given in[8,7]. our approach was also inspired by where preferences are treated in an elegant algebraic way.



the separation into grades and ranks resembles the stratification of constraint problems in constraint hierarchies[10,9]. constraint hierarchies describe a hierarchical structure of crisp constraints where a comparator function computes values for the quality of solutions which are consistent with the hierarchy. there exist many algorithms for solving particular constraint hierarchies, and a number of constraint solvers for solving particular constraint hierarchies have been implemented[19,2,16]. it is an interesting problem to try to generalize some of these algorithms to work with our framework.



using maude as the implementation language simplifies the correctness proof for the implementation and allows us to easily integrate the solver into the pagoda system for software-defined radios. on the other hand, using the maude system entails some inefficiencies which are not incurred when implementing the solver in a lower-level language. we are currently working on a c# implementation which we expect to be competitive with other soft-constraint solvers.



in the maude implementation we flatten the constraint system and thereby remove the separation between grades and ranks before trying to solve the constraints. while this simplifies the constraint solver this preprocessing removes information that might be used to improve the performance of the constraint solver. further research is needed to find appropriate analysis methods that can exploit the two-level structure of the constraint problem to generate improved solvers.



currently we restrict constraints to finite support. it is straightforward to generalize the theory to constraints with infinite support and therefore to address problems that go beyond constraint satisfaction problems. however, further research is needed to develop efficient methods to solve these generalized problems.



