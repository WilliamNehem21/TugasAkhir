there are, however, well-known program transformation techniques which do address these issues. of particular interest to this paper are the deforestation techniques introduced by phil wadler and the fold/unfold program transformation techniques introduced by burstall and darlington. these techniques are shadows of an underlying cut-elimination procedure and, as such, should be more generally recognized as proof techniques.



an obvious alternative starting point, in which the symmetry between induction and coinduction is given by duality, uses the categorical universal property associated with inductive(initial) and coinductive(final) datatypes. this is familiar to category theorists who would claim that this the fundamental property expected of datatypes. the basic idea(see section 3) is that inductive(coinductive) datatypes are initial algebras(resp. final coalgebras) and as such have uniquely determined maps to all other algebras(resp. from all other coalgebras).



however, we should not loose sight of the fact that symmetry has been regained. furthermore, these notions do seem to capture the fundamental properties of these structural types. thus, any system we might choose to devise should, at a very minimum, satisfy the abstract categorical properties of initial and final datatypes.



in general, we shall not be punctilious about recording cuts as there is a significant notational overhead instead we will feel free to use the substituted(although often not derivable) term. however, we remark that the presence of a cut is often going to be an indication that something can be simplified. notice also that we will feel free to use names of previously defined circular functions.



there is another important way in which a regenerated type variable differs from the datatype from which it originated: we do not allowed the construction(or destruction) rules to be applied to a regenerated variable. this is because such an application would reverse the regeneration process. however, we do allow a regenerated variable to have the circular proof rule of the datatype applied to it. it is thus possible to have multiple regenerations, that is for a regenerated variable to be itself regenerated.



next we will illustrate how to remove simultaneous recursion within the circular proof system. this transformation uses the higher-order aspects of the language non-trivially: the transformation is well-known and was pointed out to me by both eric meijer and simon thompson. i shall illustrate the technique by transforming a proof which has a simultaneous recursion on two arguments. here is a typical such proof:



the first and most obvious cuts involving the datatypes are those which are concerned with the construction and destruction. both these cuts remove structure and so must be eliminated in any deforesting transformation. they are what we shall call deforesting cuts. a term with residual deforesting cuts will, by definition, not be deforested.



there are three ways this can happen: two inductive cases and one coinductive. for the inductive cases the cut formula can be on the left or the right. the case where the cut formula actually is the inductive type itself was handled above.



the difficulty with the idea of knot tying was to secure the termination of the search for knots. that is a guarantee that every path in the term will either be finite or go round a knot. while some special conditions are known it seems that in general the general recursive case there can be no guarantee that one can actually complete the tying of the knot.



there are two ways that demand can occur in a term. the first source of demand is expressed at an argument of a term. this can either be at the active arguments of an inductive circular definition(including a coproduct) or at the argument of a destructor(including projection). this is one reason why we carefully labeled the active(often recursive) arguments of the inductive circular definitions using:=. however, these two expressions of demand only become real demand when they can potentially be put together with a supplier. for an active argument of an inductive circular definition a supplier is a constructor or something which could potentially produce a constructor. for a destructor a supplier is a coinductive circular definition or someone who can supply such a definition.



below, through examples, i am describing an algorithm which can be implemented. if this algorithm terminates it will return a deforested term. of course, the problem concerns the termination(see also); i conjecture that this procedure does terminate and so will always return a deforested(finite) term, however, at the time of writing i do not have a proof.



we shall indicate the demand we are working on by a dot. this will usually be the demand nearest the root. however, the knot tying process may actually oblige us to calculate certain demands in order to secure the match it wants.



this is now deforested as all the demand has gone. however, we may make a further simplification: we can note that second argument can be obtained from the first at every call by xs= f@nil. this means we do not need the middle argument at all it can be replaced by the calculation. while this is a



now, in principle, this is easy to achieve. the idea is this: one unrolls the two programs in parallel. the demand to unroll arrives now from two sources. the first is because there are still deforesting cuts as usual. the second is because one wants to keep the programs unrolling in parallel. thus, if there is demand on the one program this must be transmitted to the second. finally knot tying must be done in parallel.



i hope that these discussions have underlined that arriving at an appropriate semantic and proof theoretic formulation for inductive and coinductive datatypes is an extremely important for the field of program transformation and optimization. furthermore, that a satisfactory semantic formulation(as given by mathematical induction or categorical initial and final datatypes) does not necessarily translate into a good manipulative system. in the case of inductive and coinductive datatypes, i would argue, the circular proof system provides a crucial insight and link between formal settings and the various techniques which have proved to be most useful in practice.



this paper has provided a walk through some of the ideas which underpin the development of good transformation and proof tools for the basic programming system provide by a cartesian closed category with datatypes. i have not attempted to provide detailed proofs and, indeed, i have introduced techniques, such as the deforestation algorithm, in a very informal way. i would be the first to admit that there remains alot of work to be done. therefore, what i have described should be regarded as a program for future work. i hope, however, that i have provided some indications that this program might be fruitful.



