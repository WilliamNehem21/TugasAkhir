the visitor design pattern is often applied to program traversal algorithms over abstract syntax trees(asts). it defines a visitor, an object with a visit method that is executed for each node in the ast. these visitors have the advantage that the order of traversal is explicitly under control of the programmer, which is essential to deal with side-effectful computations. unfortunately, the exchange of results between traversals is error-prone.



attribute grammars(ags) are an alternative way to write multi-traversal algorithms. an attribute evaluator decorates the ast with attributes in one or more traversals. the attributes form a convenient mechanism to exchange results between traversals. unfortunately, ags discourage the use of side effect. in this paper, we present ruler-front, a language capturing the combination of the above approaches. a ruler-front grammar can be translated to traversal algorithms in multiple languages. in this paper, we translate to the imperative, dynamically-typed language javascript.



algorithms for traversing tree-shaped data structures appear in many applications, especially in compilers. a lot of effort has been invested in proper abstractions for tree traversals, for example in the form of attribute grammars(ags). in the last years, we applied ags in many small projects(to teach compiler construction, master projects, etc.), and several large projects, including the utrecht haskell compiler, the helium compiler for learning haskell, and the editor proxima. the use of ags in these projects is invaluable, for reasons that become clear in section 2.



language to be learned. also, the ag formalism poses too severe restrictions to be used effectively in these areas, such as prohibition of side effect, or tool support may simply be absent for the programming language in question. the purpose of this paper and associated work is to treat the above two technical challenges.



considering the first challenge, for imperative languages like javascript, a programmer either writes recursive functions, or takes a more structured approach via the visitor design pattern[7,17,16]. tool support for the visitor design pattern is available for many languages. for example, the parser generator sablecc generates visitor skeleton code for the asts that the parser produces, and we used these once to write a type checker for minijava. we also used asm, a library used in many big java projects that provides visitor skeleton code to traverse java bytecode, to transactify java programs. with visitors, we use side-effect to carry results computed in one visit over to the next. in our experience, scheduling visits and side effect is an error-prone process, due to absence of the define-before-use guarantee. we elaborate on this in section 2.1.



attribute grammars offer a programming model where each ast node has attributes(named values per node). the programmer writes code that computes attributes in terms of other attributes. the attribute grammar evaluator automatically schedules this code over visits, and define-before-use can be verified with the circularity test of ags. the implicitness of scheduling is a serious advantage, because it saves us from writing this scheduling manually, and cannot do it wrong. unfortunately, the implicitness of scheduling comes with a severe restriction: side effect cannot be used reliably and should not be used in attribute computations. in web applications, for example, we typically would like to use a bit of side effect to influence the contents of a webpage. we elaborate on this in section 2.2.



to accomplish this goal, we also address the second challenge, which is to make our approach available for many target languages. we present ruler-front, a small but powerful language for tree traversals. we managed to isolate the languagedependent part into a small subset called ruler-core, and show the translation from ruler-core to javascript. in a related paper, we showed a translation to haskell. with these two languages, we cover the implementation issues regarding the full spectrum of mainstream general purpose programming languages available today.



plemented both in a single tool written in haskell using uuag 2. in section 2 we investigate the above challenges in more detail. in section 3 we present ruler-core, with a translation to javascript in section 4. in the extended version of this paper, we give a translation from ruler-front to ruler-core.



in this section, we motivate the claims of the introduction in more detail, and introduce the background information relevant for the remainder of the paper. we take as usecase the alignment of an html menu in a web application using javascript, based on a multi-visit tree traversal over an abstract description of the menu. we first show a solution using the visitor-pattern, then a near-solution using attribute grammars, finally followed by two solutions using ruler-front.



in the visitor design pattern, each node of the abstract syntax tree(ast) is modelled as an object, which stores references to the subtrees, and has an accept method. the accept method takes a visitor as parameter. a visitor is an object with a visit-method for each type of node. the accept method of the ast node calls the appropriate visit-method on the visitor and passes the node as an argument. this visit method consists of statements that manipulate the state of the visitor or the ast node, and can visit a subtree by calling the accept method on the root of a subtree, with the visitor-object as parameter.



furthermore, this data-type declaration introduces javascript constructor functions to construct asts. each production is mapped to a constructor function that gets as parameter an object corresponding to the symbols in the rhs of the production. each nonterminal is mapped to a constructor function that creates a base object that each of the objects corresponding to the productions inherits. due to the inheritance, we can verify at the point of construction that the ast matches



these attribute names are mapped to object properties named inh depth and syn gathmax. at some point during attribute evaluation, given a participating menu object m, the objects properties m. inh depth and m. syn gathmax will be defined. an inherited attribute may have the same name as a synthesized attribute: they are mapped to differently named properties. as an aside, nodes may define a number of local attributes, which can be seen as local variables.



similarly, the right-hand side consists of a javascript expression, with embedded attribute references. in this case, we may refer to the synthesized attributes of children, or with lhs to the inherited attributes of the current node. the terminals of a production are available as local attributes. in production menu, there is a terminal called name, which is available as attribute loc: name. the translation of attribute references is similar as described above.



evaluation of an attribute grammar corresponds to traversing the ast one or more times, and executing rules, according to an evaluation strategy. in this paper, we restrict ourselves to the class of well-defined attribute grammars, whose attribute dependencies can be statically proved to be acyclic. for those grammars, a traversal is possible that visits each subtree a bounded number of times. this corresponds precisely with typical uses of the visitor-design pattern.



out of the semantic definitions for e.g. menu, a function sem menu is generated containing the evaluation algorithm. furthermore, to interface with the decorated tree from javascript code, a function eval menu is generated that takes the ast, the function sem menu, and an object containing values for the inherited attributes. it applies the semantic value, and returns an object with the synthesized attributes.



to layout the html item, we need to execute a number of statements, and encode this as an expression. in javascript, this can be accomplished in a variety of ways. in the example, we choose to use a parameterless anonymous function.



the ag code has several nice properties. the order of appearance of the rules is irrelevant. this allows the rules for e.g. depth and count to be written separately and merged automatically. in the example, we give all the rules in one go to fit the page, however, for bigger projects the ability to write such rules separately is important to write coherent code.



finally, we check statically if there is an evaluation order of statements such that all attributes are defined before their value is accessed. the attribute declarations describe the attributes that must be defined, and those that are available. the rules describe what attributes must be available before computing an attribute, and an evaluation order is possible if the transitive closure of the dependencies is non-cyclic.



however, the above code has a number of problems, because the order of evaluation of rules is determined only by dependencies on attributes. in particular, the side-effect that rearranges the html items is not a dependency of any rule. thus it is not clear when it is evaluated, if it is evaluated at all. similarly, it is neither clear at what moment the widths of the html items are obtained. when there are other rules in play that have side effect that effects these widths, the interleaving of these side effects becomes even harder to predict. finally, the root of the tree does not have any attributes defined, so there is actually no reason to expect any of the rules to be executed in the first place.



the order of appearance of visit declarations dictates the order of visits to ast nodes with this interface. in order to visit a node, all previous visits must have occurred: the actual visits on a node must be a prefix of the declared visits. values for inherited attributes must be provided prior to the visit. values for synthesized attributes are only available after a visit has been performed.



scheduling constraints. rules can be constrained to visits. with a visit-block, we constrain rules to that visit, or a later visit. the example below illustrates the various possibilities. an attribute definition prefixed with the keyword match is an exception. it is constrained to the visit it appears in, and is executed even if the attribute it defines is never needed. we explain its precise meaning later.



in the above example, we combined both side effect and attribute evaluation. we retain the advantages that ags offer, such as the ease of adding attributes. furthermore, the extension is orthogonal to various optimizations for attribute grammars, including incremental evaluation and multi-core parallel evaluation.



we present sem-blocks of the form sem nonterm: interface, which introduces a nonterminal nonterm, with visits and attributes described by interface. the productions are not defined by a data-type definition, but through clauses and rules per visit, as we explain below. additionally, the code generated from a semanticsblock is a constructor-function that produces an ast node described by interface, which we can store in a variable, and may use in rules.



during attribute evaluation, the clauses of a visit are tried at runtime in the order of appearance. the next clause is tried when either a match-rule fails, or when there is no succeeding clause for a visit to a child. failure of any other form of rule simply aborts the entire evaluation. this way, the match-rules allow us to distinguish clauses cons and nil of ntmenus by matching on the length of the list. missing visits are implicitly defined with a single empty clause. a visit without clauses implicitly has a single clause. therefore, we neither have to specify the visit layout nor clauses for it in the semantics of ntmenus. also, due to the automatic ordering of rules, many of the rules defined in visit layout of ntmenu, could also be



there are some essential differences in contrast to ruler-front that we gradually introduced by example in the previous section. the order of appearance of rules the evaluation order, and each invocation of a visit must explicitly be stated through an invoke rule. special syntax for data-types is not part of ruler-core. through clauses and(match) rules, we have a general mechanism to inspect and perform case distinction on arbitrary javascript datastructures.



we make no assumptions about the syntax of j. the embedded blocks may occur anywhere in a javascript program. it is up to the programmer to ensure that semantic-blocks and attribute references occur at expression-positions, and that interface-declarations occur at statement positions. neither do we make any assumptions about scopes of j; instead, we assume that all embedded blocks are in the same scope.



the black nodes represent the state of the ast-node prior to a visit, and the white nodes indicate a branch point. upon creation, an ast node is in the state represented by the root node. with each edge are alternately associated the rules of a visit or of a clause. with each visit, an ast node tries to switch state to a next black node by executing the rules on the path to such a node. execution of all of the rules must succeed. at a branch-point, rules on edges of clauses are tried in order of appearance. results produced by executing rules are in scope of rules further along the path.



the pattern p must match the value of the right hand side. if the evaluation of e results in an exception, or the match fails, a backtrack is made to the next clause. if p represents an attribute, the attribute gets defined.



executes visit x of child c. the inherited attributes of x must be defined, and all prior visits to c must have been performed. the invocation may fail if no clause matches. in that case, it causes the current ast node to backtrack to the next clause. if successful, the synthesized attributes of x become available.



in this section, we describe how to translate ruler-core programs to javascript. we translate each semantics-block to a coroutine, implemented as one-shot continuations. each call to the coroutine corresponds with a visit. the parameters of the coroutine are the inherited attributes of the visit. the result of the call is an object containing values for the synthesized attributes, and the continuation to call for the visit.



to deal with continuations, we use closures. the function to be used for the next visit, we build in the previous visit. this function has access to all the results computed in the previous visit. furthermore, we store values for attributes in local variables. those values that are not needed anymore, are automatically cleaned up by the garbage collector.



the above translation is relatively straightforward. in practice, the selection of a clause is functionally dependent on the value of an inherited attribute, or a local attribute computed in a previous visit. in those cases, the selection of clauses can be implemented more efficiently using conventional branching mechanisms.



we verified that the above implementation runs in time linear to the size of the tree, when we use version of the slice operation that does not make a copy of the array. with a throughput of about hundred array elements per microsecond, and about a thousand per microsecond with the exception handling replaced by conventional branching, this is still about one or two orders of magnitude slower than using a hand-written loop. in our experience, however, performance is rarely an issue. in general, the asymptotic complexity of the traversal is linear in the size of the tree, and the actual time taken by traversing the trees is insignificant compared to the work performed by the right-hand sides of the rules in a real application.



in section 2.1, we discussed advantages and disadvantages of modeling traversals with this pattern. in particular, side effect is permitted, and used to store results for use in later visits. the side effect makes it hard to predict if results needed in a next visit are actually stored by a first visit. this is a fundamental problem of visitors. oliveira, et al., for example, show many enhancements with respect to the type safety of visitors, but do not address the transfer of results between visits. attribute grammars[11,12] were considered to be a promising implementation



recently, many attribute grammar systems arose for mainstream languages, such as silver and jastadd for java, and uuag for haskell. in contrast to the work in this paper, these systems strictly discourage or even forbit the use of side effect. the design of ruler-core is inspired by the language of execution plans of uuag. in certain languages it is possible to implement ags via meta-programming facilities, which obliviates the need of a preprocessor. viera, et al. show how to implement ags into haskell through type level programming. the ideas presented in this paper are orthogonal to such approaches, although the necessary dependency analysis may be difficult to express depending on the expressiveness of the meta language.



moreover, we presented ruler-core, a subset of ruler-front, which serves as a small core language for visitor-based attribute grammars. in ruler-core, the lifetime of attributes is explicit, as well as the evaluation order of rules and visits to children. a ruler-core program has a straightforward translation to many languages. in section 4, we showed a translation to javascript.



another direction of research is to allow destructive updates on attributed trees. for example, to support event-handling traversals over data structures that are dynamically changed based on user input or external events. in ruler-front, the visits performed on an attributed tree explicitly specify which attributes are defined. when we apply a destructive update to the tree, we thus know precisely what information is based upon the previous structure of the tree, which is beneficial when reasoning about mutations to the tree. incremental evaluation of attribute grammars received attention in the past, and may be used to efficiently recompute attributes after an ast change.



mars, because the effects are not visible in attribute dependencies. in the haskell version of ruler-front, the left-hand side of a rule can be a match against a data constructor. if this data constructor is a gadt, the match brings type assumptions in scope, to be used to coerce types in rules that follow. similarly to side effect, these type assumptions are implicit. however, with ruler-front, we can explicitly schedule rules to be after such a match. this allows us to combine gadt features with attribute grammars. this may be sufficient to target dependently-typed programming languages, and a direction towards verified compilers using ags.



