closer to our work is the use of deductive methods based on the calculus of weakest preconditions. the tools caduceus/why and caveat are used in verification of critical applications written in c. they offer a good tradeoff between automation and confindence. however they do not produce a proof of correctness of the original program that could be checked by an independent certified prover: caveat uses internal decision procedures and simplification rules and caduceus/why transforms the original program before generating verification conditions which entails the correctness. the generation of checkable proofs is addressed in the proof-carrying code architecture(pcc) and its foundational extension(fpcc): the formal proof of an untrusted program is checked before



our work has been inspired by studies on fpcc[1,9] but it differs on two important points that were dictated by criteria(i) and(vi) of convincing proofs: 1) we avoid the definition of an operational semantics for all constructions and operators of c; 2) optimized proof-checkers for compact proofs are very complex and will be difficult to certify. for this reason, this paper focuses on transparency of the proofchecker. the compactness of proofs is left for future work. as far as we know it is the first attempt to produce a checkable proof in foundational logic of a non trivial program(a protocol for event driven system) reasoning directly on non-transformed c code and reducing the tcb close to minimum: a compiler and a machine.



the rest of the paper describes our use of this framework to produce a convincing proof of correctness for a complex communication protocol written in c. first, the logical proof-system is enriched with derivation rules that define the semantics of the protocol. second, the validation of these rules by the evaluators and their translation in prolog furnish a certified proof-checker. finally, evaluators deliver



in this section we briefly present the protocol that will serve to illustrate our notion of convincing proofs. the protocol is used to implement multi-tasking real-time data-flow applications on an event-based operating system featuring priority and pre-emption. it has been designed for an avionics control system that consists in a pool of tasks running on a single processor. each task has an id i and is triggered by the environment on arrival of an event i. it then reads available inputs from other tasks, does some computation and outputs its results to all others tasks.



the development of the control system is conducted under the assumption that computations take no time, that is, the output of a task is available instantaneously after its triggering. this so-called synchronous or 0-delay assumption drastically simplifies the development since engineers need only focus on the data-flow between tasks. therefore, the actual implementation must ensure that a task r(a reader) which uses the output of a task w(a writer) gets the correct output with respect to the data-flow ordering independently of the computation time of each task(see section 2.2 and for details).



large parts of the proof were conducted automatically with the help of a symbolic interpreter of c programs developed for this occasion. the interpreter interacts with the user for conditional instructions and records the derivation steps in a proof-term that is built during the guided execution. the resulting proof-term contains proof-obligations which must be completed afterward. the inductions and the proof of independency were done by hand with the help of lemmata.5



by using a prover such as pvs or b we would have benefited from simplifications and decision procedures for arithmetic but it is not possible to produce an independent proof-term using these provers. therefore, we would have had to include the prover in the tcb. actually we started with the coq proof-assistant which produces proof-terms but the overhead, the complexity of formalization and the numerous proof-obligations revealed that coq was not inappropriate for our purpose, even if it provides tactics to reduce the proof activity. moreover, the coq proof-checker is not yet certified.



