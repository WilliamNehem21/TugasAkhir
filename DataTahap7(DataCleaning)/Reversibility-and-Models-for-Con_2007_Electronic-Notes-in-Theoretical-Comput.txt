ccs with communication keys(ccsk) is a reversible version of ccs which can be used to model and analyse bidirectional behaviour of systems, for example the binding and unbinding of molecules in biochemical reactions. the definition of ccsk is given in the structural operational semantics(sos) style, and the sos approach is also employed to give a procedure for converting operators of other process algebras into reversible operators. the main idea is that dynamic operators(which can be destroyed in the course of a transition) are converted by the procedure into static operators(which are preserved), using new auxiliary operators. for instance, both sides of a choice p+ q are retained. as a result process terms in the new reversible language do not change their overall structure during computation. a crucial component of the procedure is the notion of communication keys. these are unique identifiers that are assigned to, and are recorded in the syntax of, past actions and are vital for the communication mechanism to work correctly in the forward and reverse directions. in contrast, in rccs past behaviour, including communication, is stored on external devices such as memories.



in the literature, a labelled transition system, or lts for short, may or may not have an initial state. let us deem an ltr to be a structure that specifies a transition relation with no initial state and an lts to be an ltr with an initial state. thus an lts can be seen as a rooted ltr.



example 3.4 consider the parallel switch of[10, example 1.1.7], where the bulb will light if either of two switches is closed. this is an example of so-called orcausation where a disjunction of events causes an event. we have event b(bulb) respectively. they are clearly fr bisimilar, and they have auto-concurrency and auto-causation, respectively. note that ccsk processes a| a and a.a are not fr bisimilar: using the notation from we have that after performing a, a we get to



if one performs a and then b with the a| b component on the left, then these must be matched by the a and then the b of the((a+ c)| b) summand on the right.(matching it with the a of(a|(b+ c)) is wrong as after this a action is performed, no c is possible after a in a| b.) the right hand side can now reverse a and do a c(still using the same summand as all other summands are disabled). the left hand side cannot match this: the component a[m]| b[n] can regress by a[m] to a| b[n] but it cannot perform any c.



it remains to prove that is is order-preserving. we shall show a<c b if and only if a<d b for all appropriate events(identified by their labels) a, b. assume for contradiction that a<c b and not a<d b. the last means that there is a path involving transitions for all events of d such that it contains no a before b. hence, this path has a after b. we reverse the transitions in this path and, since s(c, d), we match them with the corresponding transitions from c. therefore, we get a path in c with a after b. since a<c b implies that every path that has b contains also a, we have that a path in c has two occurrences of a: contradiction.



