due to increasing demands in processing power on the one hand, but the physical limit on cpu clock speed on the other hand, multi-threaded programming is becoming more important in current applications. unfortunately, multi-threaded programs are prone to programming mistakes that result in hard to find defects, mainly race-conditions and deadlocks. the need for tools that help finding these faults is immanent, but currently available tools are either difficult to use because of the need for annotations, unable to cope with more than a few 10 kloc, or issue too many false warnings. this paper describes experiments with the freely available tool helgrind and results obtained by using it for debugging a server application comprising 500 kloc. we present improvements to the runtime analysis of c++ programs that result in a dramatic reduction of false warnings.



runtime-methods scale well, but only faults on the path of execution are taken into account. hence, detecting all possible data races is impossible. but it is possible to detect and report all apparent data races on the execution path. an efficient lock-set based runtime-algorithm called eraser was implemented in the opensource tool valgrind and is thereby available for all linux-x86 based environments. unfortunately, at least for c++ applications, the number of falsely reported possible data races is too large, making the tool difficult to use since every reported location has to be checked by hand.



the solution is to combine both static and runtime analysis, by annotating the program automatically and transparently to the programmer. the annotation provides the runtime method with additional knowledge gathered from the structure of the source code. while these hints reduce reporting of false positives, they are not necessary. therefore, it is still possible to analyze programs, where only parts of the source code are available.



this work presents results from experiments where the eraser implementation in the tool helgrind was applied to an existing network server application. two improvements were made: one to better simulate actual hardware behavior(i.e. bus locking). another to cope with effects introduced by c++ specific implementation issues. this drastically reduces the amount of false positives reported, making the tool usable for the debugging of large c++ applications. in particular, the amount of false positives removed by our improvements during our experiments was in the



this paper is organized as follows: section 2 contains an overview of runtime methods for fault detection in multi-threaded programs and presents the runtime detection implemented in helgrind in greater detail. in section 3, we present our method of source-code annotation in order to make runtime analysis more accurate and describe the general environment for the experiments. section 4 contains results from our experiments. finally, section 5 concludes the paper with a general discussion of our results.



in this section, we first present some definitions of faults unique to concurrent programs. then an overview of runtime methods for detecting these faults is given. this is followed by a more detailed description of the algorithms implemented in the freely available tool helgrind, which was used as a basis for our experiments.



suppose, we have a data structure containing two elements: let us say the dateof-birth and age of an arbitrary person. the two variables depend on each other because, the current age of the person could be calculated by counting the time elapsed from date-of-birth until now. in addition, there is a synchronization object protecting access to the data. two setter-methods exist, one to set the date-of-birth and the other to set the age. now, when updating the structure we first write the new date of birth followed by a call to set the new value for age. both methods use synchronization to protect their field accesses. therefore the rule, that every single access to the shared location is protected by synchronization, is satisfied. nevertheless, it is possible to reach an inconsistent state between two write accesses that depend on each other, because the lock is released in-between.



while usually not resulting in actual faults, the locking strategy itself has an impact on the performance of the application. at worst, all data are protected by a single(global) lock, resulting in unnecessary blocking of independent threads. generally, heavy usage of a global resource by all threads degrades performance and drastically reduces the speed-up in multi-processor systems.



a method that was developed to detect data races in the dsm system millipage is the algorithm djit. it utilizes vector time frames and access logging to check the happens-before relation between concurrent accesses to a shared location. it relies on the assumption of an underlying coherent system and detects only the first apparent data race.



the main advantage of the lock-set algorithm is the ability to detect all possible data races that exist on the execution path. on the other hand, it sometimes gives too many false detections. djit tries to locate only apparent data races. hence, it detects data races on a subset of shared locations that are reported by the lockset approach and misses some real data races. therefore, multi-race tries to improve the data race detection capabilities by combining enhanced versions of lock-set and djit into a common framework.



in the authors combine a lock-set based data race detector with a vector clock based happens-before relation check on java synchronization primitives. actions on these primitives are viewed as events that impose an order on memory accesses between them. unfortunately, neither their assumption that unsynchronized memory writes become visible in causal order is true on all smp systems, nor is the relation between signal and wait operations on conditions strong enough to impose the assumed order.



the basic synchronization object in posix-threads is a mutex(mutual exclusion), with methods to acquire(lock) and release(unlock) it. only one thread can hold a lock at any given time. all other threads that try to lock it are blocked until the mutex is released again.



there are cases where the algorithm is now incomplete because of its dependence on the actual interleaving. a data race occurs when the first read access by another thread occurs before the initialization of the shared memory is complete. it is not detected by the algorithm, because in the observed interleaving, all writes took place before the first(shared) read access.



instead of a thread being owner of a shared variable that is in exclusive state, it is now a thread segment that owns it. then, whenever another thread accesses the memory, it is checked whether the thread-segments overlap. if not, the new thread-segment becomes the new owner instead of the variable switching into shared state.



since the number of false positives due to polymorphic object destruction code is rather large and identifying them by hand is too much work, it is necessary to suppress them automatically. it is done by annotating every delete operation in the source code of the program in order to mark deleted memory for the race detection as exclusively owned by the running thread. that way, accesses by other threads during destruction are still detected.



when checking a program using the original helgrind algorithm, it is not necessary to compile the source code in a special way. symbol information is needed for convenience. without the debug symbols, helgrind is not able to print source line information or the function names on the call stack for locations where a fault is suspected. to check a program for errors, it can be run unmodified with helgrind.



the application is built from several hundred kloc of c++ code, hence experimental tools, only written as proof-of-concept, are not applicable. furthermore, there are no restrictions on the usage of c++ language constructs ruling out many of these experimental tools that rely on the usage of only a subset of the c++ language(e.g., to keep the parser simple).



for data races, an on-the-fly checker(helgrind) is used. deadlocks on mutex locks are detected by the application using a timeout while trying to acquire a lock inside the lock-function. since the race-checker also does dead-lock detection, application level detection is not needed.



during our experiments, we found a number of real bugs in the analyzed program. since the application has about 500 kloc, it is not always easy to decide whether a reported warning is a true defect, a false warning or just a benign race. nevertheless, we found a lot of real defects in the programa selection of bugs that seem to be common is presented here.



in a multi-threading environment, the use of some of the system functions is not safe. especially, all functions that use static data or, even worse, return a pointer to static data are not thread-safe. the usage of some of these functions in the application resulted in possible data races reported by the tool.



state. nevertheless, a thread should be the single owner of an object, when the thread deletes the object. hence, the data race checker could set the state of its memory to exclusive. this holds under the assumption that data is not accessed after calling delete and thereby invoking its destructor. actual violations of this assumption are detected by ordinary memory checking tools that are able to detect acesses to released memory blocks. therefore, it is not a special case for multithreaded programs and could be neglected during data race detection.



the detection algorithm does not take into account that the operations are atomic. the read and write operations of the reference counter are atomic, because it is an integer value and all writes are protected by a bus locking prefix. it is impossible to derive that from simple observations, as the reference counter is part of the structure that contains the data.



generally, most runtime techniques can execute on-the-fly or offline. both have their advantages. on-the-fly analysis usually has a significant negative impact on the execution speed of the analyzed program. offline analysis needs information logging which may result in heavy memory usage. on the one hand, on-the-fly



in our case, where each access to a memory location had to be logged, offline analysis would be almost impossible for long execution traces. thus, the time consumed by analysis directly reduces the execution speed of the observed program. furthermore, since valgrind executes binaries on a virtual machine, even without instrumentation program execution is slow.



nowadays, many implementations of on-the-fly race detection algorithms exist. unfortunately, most academic proof-of-concept implementations are not applicable to real-world applications. at least, the need to cope with more than a subset of c++ is a knockout criterion, because to our knowledge no parser is freely available that is able to generate an abstract syntax tree for the full iso c++ language.



