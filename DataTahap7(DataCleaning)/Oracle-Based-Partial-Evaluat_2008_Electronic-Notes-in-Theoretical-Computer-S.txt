partial evaluation(pe) optimizes programs by specializing them w.r.t. part of their input, which is known as the static data. those computations which only depend on the static data are performed at specialization-time, whereas those which depend on dynamic data remain in the specialized program. the idea, of course, is that the running-time of the specialized program should be smaller than that of



poly-controlled partial evaluation(pcpe) is a powerful approach to online partial evaluation of logic programs. rather than using a fixed control strategy(as done in traditional partial evaluation algorithms), pcpe allows considering a set cs of control strategies. for each call pattern, pcpe can choose any of the control strategies in cs. this allows using different control(or specialization) strategies for different call patterns. thus, pcpe can produce residual programs that are not directly achievable by traditional partial evaluation using any of the considered control strategies in isolation. this often results in hybrid solutions with better fitness value than any of the solutions achievable by traditional pe, for a number of different resource-aware fitness functions.



in this work we investigate the possibility of using an oracle which decides which is the most promising control strategy for each call pattern based on the specialization results for such call patterns using the different strategies. all other branches in the tree are pruned away. in our example, the oracle should be able to tell us: in t1, after specializing using the two control strategies, the most promising state between t2 and s5 is t2. then, between t3 and t4, the latter is preferable. then, t6 is preferable to s4. finally, from t6 we can only reach s3. the benefits of building such an oracle are twofold, since a single specialized program would be computed. first, we do not spend time generating multiple specialized programs. second, as in the case of pe, we do not need an evaluation phase, which can be very costly. however, this approach can only be useful in practice if the oracle makes good decisions, since some of the pcpe specialized programs outperform pe(such as s3), but others produce bad results(such as s5 or s2).



in charge of guaranteeing that the number of atoms which are specialized remains finite. this is done by replacing atoms by more general ones, i.e., by losing precision in order to guarantee termination. given an atom a and an set of atoms h, we use



in most existing control strategies, which are focused on time efficiency, observables c and s are not explicitly handled and most heuristics aim at maximizing d and e while keeping n with the value zero. observable s is an example of information which is just partial when applying the oracle: in order to obtain a covered program, the code for the new atoms in s may in turn need including code for other atoms not yet covered. perfect information can only be determined by actually expanding the pcpe-tree and observing it a posteriori.



given a pcpe-tree tree, we use c(tree) to denote the set of o-constraints which can be obtained from tree. the cardinality of c(tree) is usually quite large: for each intermediate node t in tree with p children we can build p constraints for t. thus, for a realistic tree tree it is not possible to find a vector of oracle constants which allow satisfying all constraints in c(tree) simultaneously. there are several reasons for this. first, we have restricted ourselves to linear functions. it could be the case that there exists a non-linear oracle function which satisfies all constraints. however, the advantage of linear functions is that there exist tools capable of handling them, whereas inferring non-linear functions is a rather complicated task. second, as already mentioned, a perfect oracle function does not exist in general, since it has to make decisions based on partial information, i.e., without expanding the complete tree below the current node.



we can formulate the process of finding a vector of oracle constants as a maximum constraint satisfaction problem(max csp): though the set of o-constraints is unsatisfiable, the goal is to find a vector of oracle constants that maximizes the number of satisfied constraints in c(tree). unfortunately, the cardinality of c(tree) is large in general, and finding an optimal solution to this max csp problem is quite costly. a simpler model results from collecting only(some of) the o-constraints occurring in a pcpe-path of maximal fitness.



after collecting a set{k1,..., kp} of oracle constants, one for each of the calibration benchmarks, we normalize the value of each vector kj by forcing the absolute value of the first constant kj1(in our case corresponding to the observable d) to be 1(written|kj1|= 1). this is done by multiplying all constants kj1,..., kjn in each vector by 1/|kj1|. note that this is a correct transformation since by multiplying a vector by a constant greater than zero, all constraints which were satisfied are again satisfied. finally, the calibrated oracle constants result from computing the arithmetic mean over each normalized constant kji.



we have run a series of experiments in order to both evaluate the quality of the specialized programs obtained by means of obpe and to compare the cost of this approach w.r.t. other specialization techniques. three different specialization techniques have been considered: standard pe(column pe), the optimized generate+evaluate pcpe presented in, which prunes the pcpe-tree using a combination of heuristics and branch and bound techniques(column pb-pcpe), and oracle-based pe(column obpe).



another reason for this is that, for efficiency, in the implementation abstraction functions are applied first, and then those generalized atoms which are different are unfolded, i.e., if after abstraction we obtain two identical generalized atoms, only two children states are generated, instead of four. column ties shows the number of times the oracle returns the same value for two children. if this number were too high, it would probably indicate that the set of observables chosen does not convey enough information, and the possibility of choosing the wrong path would increase. however, this happens only 7.69% of the total number of decisions taken.



control of pe has received considerable attention, but there is still plenty of room for improvement, especially in the context of resource aware specialization. many decisions have to be taken during pe and it is often not obvious which is the right choice. the main advantage of pcpe is that we do not need to restrict ourselves to a single control strategy, but rather we can use several ones. this opens up the door to obtaining hybrid specializations which often outperform pure ones. however, the main problem of the generate+evaluate approach to pcpe is that, even with the optimizations proposed in, it is too expensive in practice: it is an alternative only when the quality of the specialized program is of much importance, and the pcpe tree has a moderate size.



in this paper we have presented oracle-based pe. this approach, in contrast to previous work[13,11], introduces a constant overhead factor, instead of an exponential one, to the complexity of standard pe. at least in our experiments, obpe obtains specialized programs which are significantly better than those generated by standard pe and the constant overhead factor is quite reasonable.



