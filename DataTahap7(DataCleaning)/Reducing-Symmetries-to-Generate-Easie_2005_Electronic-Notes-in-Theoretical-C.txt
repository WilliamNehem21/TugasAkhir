finding countermodels is an effective way of disproving false conjectures. in first-order predicate logic, model finding is an undecidable problem. but if a finite model exists, it can be found by exhaustive search. the finite model generation problem in the first-order logic can also be translated to the satisfiability problem in the propositional logic. but a direct translation may not be very efficient. this paper discusses how to take the symmetries into account so as to make the resulting problem easier. a static method for adding constraints is presented, which can be thought of as an approximation of the least number heuristic(lnh). also described is a dynamic method, which asks a model searcher like sem to generate a set of partial models, and then gives each partial model to a propositional prover. the two methods are analyzed, and compared with each other.



compared with theorem proving, the subject of disproving false conjectures has been less studied. but it is actually very important, since for open questions, you do not know whether the conjecture holds or not. if you give a false conjecture to a typical resolution-based theorem prover, the prover either runs forever or terminates without producing any useful information. when this



currently, there are roughly two main approaches to finite model generation in the first-order logic. the first approach translates the problem into a satisfiability(sat) problem in the propositional logic, and uses a sat algorithm(e.g., the dpll algorithm) to solve it. see for example,[6,8,1,5]. the second approach treats the problem as a constraint satisfaction problem, and uses backtracking search to find the interpretations of the functions/predicates directly. tools like finder, falcon, sem and mace4 are based on this approach. gandalf implements both approaches.



each of the above two approaches has some benefits and weaknesses. for example, the translation approach may generate too many propositional formulas, and the constraint solving(or direct search) approach may not be so efficient on some problems. but using the first-order clauses directly leads to larger reasoning steps and also gives us opportunity to eliminate symmetrical subspaces.



we have been studying how to combine the two approaches. one way is to improve the direct search procedure by incorporating successful techniques developed in the sat community. alternatively, we can also improve the translation approach by combining it with first-order model searchers. this paper compares different ways of exploiting symmetries in the problem specification, so that the resulting sat problem instances are easier. some examples and experimental results will be given.



the paper is organized as follows. in the next section, we recall some basic concepts and notations, as well as two approaches to model finding. in section 3, we give an example showing the importance of reducing symmetries. then we present two approaches for adding constraints to the original problem so as to obtain easier propositional problem instance(s). the first one is static, which produces only one instance; and the second one is dynamic, which usually generates more than one instances. examples are given to show their strengths and weaknesses.



the finite model generation problem can be stated as follows. given a set of first order formulas and a non-empty finite domain, find an interpretation of all the function symbols and predicate symbols appearing in the formulas such that every formula is true under this interpretation. such an interpretation is called a model. usually we also assume that the formulas are all clauses, and every variable in a clause is(implicitly) universally quantified.



alternatively, we can also search for the values of the cells directly. a finite model generation problem may also be regarded as a constraint satisfaction problem(csp), which has been studied by many researchers in artificial intelligence. the variables of the csp are the cell terms, i.e., ground terms like f(0, 0) and f(0, 1). the domain of each variable is dn(except for predicates, whose domain is the boolean domain). the constraints are the set of ground instances of the input clauses. the goal is to find a set of assignments to the cells(e.g., f(0, 1)= 2) such that all the ground clauses hold.



typically backtracking search is used to solve the above problem. the basic idea of the search procedure is roughly like the following: repeatedly extend a partial model(denoted by p mod) until it becomes a complete model(in which every cell gets a value). initially p mod is empty. p mod is extended by selecting an unassigned cell and trying to find a value for it. of course, when no value is appropriate for the cell, backtracking is needed and p mod becomes smaller. such a procedure may be depicted as a search tree. each edge of the tree corresponds to choosing a value for some cell.



the propositional satisfiability(sat) problem has been studied for more than 40 years. many theoretical results have been obtained, and many efficient algorithms have been designed. in recent years, more and more highly efficient sat solvers are being developed, such as zchaff and berkmin.



when asked to find a 13-element model of the above formulas, mace 2.2 takes 9.34 seconds to conclude that such a model does not exist. most of the time is spent on sat solving rather than obtaining the propositional clauses(dpll time: 9.09 seconds). if we add the following two clauses to the input:



the above two clauses represent the initial two steps taken by sem. note that in the first step, there is only one branch, i.e., sem decides that only the value 1 can be assigned to c(0). similarly, in the second step, there is also one choice. so adding the two clauses does not change the satisfiability of the original problem.



when solving the quasigroup problems, fujita et al.[2,12] add a few clauses which eliminate quite many symmetrical subspaces. this greatly reduces the search time. but the additional constraints are domain-specific, namely, they can only be applied to quasigroup problems and other similar problems.



the lnh is a more general method. we can simulate it by adding certain constraints. this kind of static symmetry reduction is implemented in paradox. see section 6 of. a similar method is adopted in sage. for simplicity, we assume that no domain elements appear in the input and that there is only one binary function symbol f. sage adds the following constraints(denoted by cf):



it can prune the search tree greatly, since we now need to examine only 2(instead of n) values for f(0,0), only 3(instead of n) values for f(0,1),... to get an understanding of its effectiveness, let us look at the qg5 problem.



suppose we try to find all of its models. if we do not use any method for eliminating isomorphism, there are 120 models of size 7, and 720 models of size 8. if we add the above three cf formulas to the input, there are 24 models of size 7, and 24 models of size 8. but when we use the lnh, there is only one model of size 7, and one model of size 8.



if we use no additional constraints to eliminate symmetries, we will find 80 models. if we add the c1 constraints when generating the propositional clauses, 16 models will be found. if we add both c1 and c2 constraints, then only 9 models are found.



thus adding the above constraints is quite helpful for eliminating isomorphic subspaces. of course, we can ask sem to go beyond the 3 steps and more subspaces can be eliminated. in general, more than one sat instances are generated using this approach.



if we are just looking for one model, it is not necessary to generate all the partial models. in this case, it will be beneficial to combine sem with a sat solver more closely, as done in. then as soon as one partial model leads to a full model, sem can be terminated and no more partial models need to be generated.



in this paper, we discussed two different approaches. the first one is static, which adds some formulas to the input and then gets a set of propositional clauses in the conventional way. only one sat instance is generated. we presented a procedure for adding the formulas, which is an approximation to the least number heuristic. it can usually eliminate many isomorphic models, and makes the resulting sat instance easier.



the second approach is dynamic, which uses a first-order model searcher to derive some partial models, and then gets a number of sat instances(each corresponding to a partial model). comparatively speaking, this approach can usually eliminate more isomorphic models. but for some problems, there may be too many partial models.



