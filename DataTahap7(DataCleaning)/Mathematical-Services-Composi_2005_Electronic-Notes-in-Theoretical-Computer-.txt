this paper describes the definition and the use of a plan language in the context of mathematical web services. a plan is a document intended to describe how to use different mathematical web services to solve a particular problem. a plan is like a program in which most of the function calls have to be handled by web services. a plan is a multiple-state choreography document which could be either abstract, unresolved or resolved, depending on how much of the web services involved in the choreography is known. such a plan can be instantiated into a composition language such as bpel or to a mathematical routine(like a maple routine) for execution.



abstract plan is an algorithm involving mathematical functions described by ontologies or classifications such as gams. unresolved plans are abstract plans for which some but not all mathematical functions have been replaced by actual invocations of mathematical web services. resolved plans are abstract plans for which all mathematical functions have been replaced by actual invocations of corresponding mathematical web services.



mathematical computing has been a major branch of computer science since the early ages. both numerical and symbolic computation brought up many highly specialized and efficient pieces of software. this section first describes motivations for this work and then proposes a possible architecture for a web service-based framework to discover and invoke mathematical packages.



because mathematics are so fundamental, numerous packages have been developed for both numerical and symbolic computation. although created in an academic context, most of them are fully documented and regularly updated and some became well-known, commercial products, like maple and mathematica for symbolic computation, and the nag libraries for numerical computation. on hot topics, one can find many different packages solving the same problem. for example, macaulay, gb, and singular offer very efficient routines to compute groebner bases.



the primary application for web services in the world of mathematical software is to simplify point-to-point integration between systems, thereby allowing the use of one package from within another. typical examples include the use of a highly specialized package from a general purpose computer algebra system like maple or mathematica. for example, describes how to use the functions of a package called bernina from maple. this application, however, only scratches the surface of the true potential of mathematical web services. service oriented computing can enable users to access agile mathematical processes that can adapt and respond to high level queries, through the use of loosely coupled, standards-based mathematical services. unlike general web services, mathematical services can be organized according to the problem they are able to solve. these problems themselves can be organized as a tree structure reflecting the natural inheritance between mathematical problems.



another motivation for the use of web services is the commercial exploitation of mathematical packages. a natural exploitation plan for a company would be to sell access to mathematical routines or libraries. in this context, there would be concerns such as billing and transaction(see on this topic) and security(see ws-security, for example). however, this topic is outside the scope of this paper and we will mainly focus on the composition of services.



another aspect of the issue is similar to solving problems in the context of specialized libraries or interactive mathematical systems. there exists a number of routines available, but users almost never make just one call to such routines. they rather use a language provided by the systems to combine the calls in more complete algorithms suited to their needs. mathematical web services only offer interfaces to invoke one routine or another. we propose to get back the flexibility and usability of known interactive systems by using plans and the planning environment we setup in our architecture. a planning language would allow end-users to build programs combining routine calls. such programs would be analyzed for optimization by the planning manager and executed by the execution manager.



flexibility: our language should be flexible enough to allow the translation into a number of target languages. as we are going to see in section 3.3, one possibility would be to use a computer algebra system such as maple to execute plans.



the elements described above should be sufficient to function reasonably well with most mathematical services. as will be described in section 5, a(near) future work is to experiment with several users and services to understand more specific needs. a current issue is to decide whether an abstract plan may contain indications stating that such or such step should be carried out by a service with given characteristics. the advantage would be to further specify a plan, the drawback is that this would introduce the notion of web services inside an abstract document.



the resolved component of a plan contains instructions to associate service description language documents to each invocation statement. in the plan language, we simply add the possibility to annotate each invocation statement with the necessary contact information of services. in our architecture, this would mean that invocations are associated with service description documents(or at least with uris referencing such documents). unresolved plans are plans for which not all invocation statements are annotated(an abstract plan is a special kind of unresolved plan in which no invocation statement has been annotated). a specificity of resolved plans is that one should be able to translate them into an execution language without any more manipulation. this means that a plan is also deemed unresolved when an invocation statement is associated with several possible services. the only exception would be when the author of the plan wishes to execute the same step in parallel by several services.



ably be handled locally(within the execution engine). section 3.3 provides further details about local invocations. also, the creation of a new object is typically an abstract operation that should be instantiated depending on the formalism we choose for manipulating objects.



the monet architecture contains an execution manager(em). this entity is responsible for supervising the invocation of mathematical web services. the sophistication of the em is implementation-dependent and can range from a simple service invocation module to a secured, transaction-compliant, and plan-compliant system. the em itself is a web service similar to the way planning manager and service matcher are web services. in our prototype, the execution manager receives a resolved plan as an input and should take all necessary actions to execute it.



we distinguish two possibilities to achieve this result: either the execution manager directly executes a resolved plan handling, as needed, concerns such as transactions, security, and so on, or it relies on a third-party composition language such as bpel used to transform the resolved plan. an orchestration engine(e.g. bpws4j) can then proceed with the execution. once again, we see here the advantage of choosing an independent language: we are not tied to one standard, and the actual execution mechanism is a simple back-end that can be changed easily. one can also imagine to use execution environments that are not typical web services orchestration engines. in the context of mathematical services, a possibility would be to use maple(or mathematica, for example) as an execution engine: the resolved plan can be translated into the maple language, which is a kind of planning language, and submit it to a maple system. with a few added functions maple can call web services, and obtain and manipulate the results.



