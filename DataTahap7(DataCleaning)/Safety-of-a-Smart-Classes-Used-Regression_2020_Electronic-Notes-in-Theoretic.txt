testing is a crucial part of writing code. when writing programs it is important to run tests that demonstrate that the behavior of those programs is as expected and documented. when a program is modified, its tests are rerun to make sure changes have not introduced new bugs. this rerunning of tests is called regression testing.



1 this material is based upon work supported in part by the national science foundation under grants ccf-1439957 and ccf 13-18191. any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the nsf. we would like to thank milos gligoric and darko marinov for providing the motivating problem and for their insight into the importance of initialization timing. we are also grateful to the reviewers for their time, suggestions, and comments.



in practice, a body of code can be large and have a huge number of tests written over it. rerunning every single test can in some cases take hours or days, making it impractical to run them all after every small change. however, most changes will only even possibly affect a small number of tests. thus, algorithms and methods have been developed to select which tests to rerun after code changes. the process of selecting which tests to run(alternatively, deselecting tests that should not be affected) is called regression test selection(rts). an rts algorithm is safe if it only deselects tests whose previous results could be reproduced under the modified program.



gives a general isabelle definition for rts algorithms, including a formal definition of safety, then combines this with the collection semantics definition to define collection-based rts algorithms. the instantiations of collection semantics describing instrumented jinjadci jvm semantics are extended into collection-based rts algorithm instantiations using this combined definition. section 6 uses the general rts definition and the instrumented semantics to give proofs of safety of using the defined class collection functions as a basis for classes-touched rts algorithms. finally, sections 7 and 8 discuss some related work, recap, and suggest future directions.



in industry, many code bases are quite large, as are the test suites associated with them. these test suites can take on the order of days to run in full. regression test selection(rts) is the process of choosing which tests to rerun after changes have been made to a code base in order to decrease the time retesting takes. a test that is not run is said to be deselected. an rts algorithm is called safe if it only deselects tests whose results would be unchanged.



ekstazi is a java library for regression testing that employs an rts algorithm at the level of jvm bytecode based on the classes that are used or referenced by each test. we call these the classes touched by a test. when a test is run, the names of the classes it touches during its execution are collected. then, when changes are made to the code base, a test is only rerun if one or more of the classes it touched in its previous run have been modified. thus if, for example, only a couple of modifications are made to non-core classes in a large code base, generally very few tests need to be rerun.



the two extensions of jinja are jinjathreads and jinjadci; the former extends jinja with threads, while the latter extends it with static fields and methods and dynamic class initialization. the features of the latter are crucial uses of classes in java, with behavior that differs from the other uses described by the original jinja. for these reasons, these features are important to include in any proof of safety of ekstazi-like touched-class-collection rts algorithms like those discussed in this paper. on the other hand, threads should not create any complications with the safety of these algorithms as long as the synchronization of initialization is correct(as further justified in section 6.4). thus, we have chosen jinjadci as our semantic model for the proofs presented here.



in the jvm, class initialization methods are called dynamically. rather than initializing classes up front, java waits until the the class is actually used. when a class c is used, its initialization status is checked. if it is uninitialized, the class initialization procedure is run on it.



since the rts algorithms described in this paper function by collecting the names of classes touched by a test(i.e., those classes whose definitions could affect the monitored run), the initialization-called classes are a good portion of the classes that will be collected. in particular, other than these, it turns out that the only other classes touched in a run are those classes that call static methods or fields defined by one of their superclasses. these latter can easily be collected at the time of such calls.



as described in section 2.2.1, the procedure starts by creating a list of classes to be initialized including the triggering class c and its uninitialized superclasses. during this part of the procedure, the frame that called it has its initialization call status flag set to calling cl cs, where cs is the list uninitialized classes found so far(with cl being the most recently added). once this list is complete, the flag is set to called cl#cs and the class initialization methods are run for the classes in cl#cs in order. if any of these methods throw an uncaught exception a, the flag is set to throwing csj a, where csj is the list of classes whose methods were not run. if a frame is not in the middle of a class initialization procedure, the flag is no ics.



an algorithm using a naive collection function is easier to prove safe, as it is safe over each step of execution. once its safety is proved, it can be used to prove the safety of a correctly-defined smart collection function by showing it collects the same classes. for this reason, we will give instances of both, using proof of safety of the first to prove safety of the second.



from these observations it follows that many uses of a class by instructions can actually guarantee that the class has been used previously, and as such has already been collected. by not collecting at any point that can make this guarantee, the number of places where a class must actually be collected is significantly reduced. the result will be collecting the same set of classes, but each will be collected many fewer times, meaning less added overhead. the modified collection approach is as follows:



this algorithm is constructed by not collecting anywhere a class is guaranteed to have been collected by a previous use. furthermore, each of these previous uses is either still a collection point or is covered by its own previous use that is still a collection point. thus it can be seen that the above collects the same classes as the naive algorithm does. therefore, as long as the naive algorithm is safe, this smarter algorithm is as well. we will formally prove these observations in section 6. however, some informal reasoning follows, touching on each place where the naive algorithm collected classes.



first, the collection of error classes only happens once in this approach instead of during every step. the naive algorithm only needed to collect these classes at every step because it was designed in a way that made every individual step clearly safe by itself. for this algorithm, proving safety necessarily involves confirming that classes were collected at some point during execution, so collecting once at the start is sufficient. in practice, these classes would not necessarily need to be collected even then, as they would be initialized. collecting these classes up-front is only necessary here as an artifact of the way that jinja handles the error classes(by instantiating them up front).



such a function is best defined in isabelle by using a locale, a way to define a collection of components with a set of axioms on those components. this definition can then be instantiated, giving instances access to any theory developed from the axioms. further details about locales are given in section 4.3.



the pieces small and collect of a collectionsemantics are used to define a small-step instrumented semantics csmall, then extended with endset to an instrumented big-step semantics cbig. the former simply returns a set of pairs of results returned by applying small to the input, then applying collect to the input and output. the latter returns the result of applying csmall to the input as many times as it takes to reach an end state, using combine to combine the information collected across the steps. note that the resulting collection is the identity collect id if no steps are taken. as the states returned by csmall are the same as those returned by small, the states returned by cbig are also the same as those returned by big. then any proven instance of the definition will immediately be able to use both the derived cbig and the result that its output is the same as the derived big.



the instance of semantics given in section 4.1.1 can be extended to instances of collectionsemantics with the naive and smart class collection functions described in section 3. since these functions return sets of classes, the components combine and collect id are the set union operator and the empty set, respectively. it is easy to see that the axioms of associativity and leftand right-identity hold.



relation is the meat of the algorithm, choosing which tests not to run based on a pair of programs, plus an output. as given in the safety axiom, these would be instantiated with the original program, the new program, and the output of running a test over the original program. then deselection would be applied to the test that produced the given output. this function takes a test output instead of a test because deselection will be based on the achieved output, as there may be more than one.



the function make test prog takes a program and a test as might be given to out and returns a program for input into cbig. the function collect start returns a collection for each program representing the information that should be collected about it up-front. this represents any information that the rts algorithm takes into account on the basis of the program itself, and which the out function will include automatically.



lemma 6.1 can then be extended from one step to many. from this and the validity of the start state, it is straightforward to show that the end state reached from the start state will be the same under any two programs that agree on the classes collected over the full execution.



the backward-promised classes are designed to cover those classes that are known to have been collected based on information currently present in the state. these classes are most of those we had previously observed could be counted on having been previously collected: classes that have already been initialized, classes that have been instantiated, and so on. these promises, once proved, allow proof that instructions that, for example, use an initialized class or an existing object on the heap, do not have to collect those classes.



the two pieces of lemma 6.3 are proved separately: first the calling case is proved by induction over the steps of execution. the other case is then proved for each relevant instruction type, using the first case and that the next execution step after each will be to set the current initialization call status to calling c[].



in section 3.2.1, we described the differences between the smart collection algorithm and that used by ekstazi and presented a modified set of collection points for the latter. in order to achieve the safety guaranteed by the above proofs, ekstazi must at least collect in places that cover what we have outlined here. in particular, since ekstazi cannot collect directly during the class initialization procedure, it instead collects at each instance where the procedure will be calledin advance of the call. after the call would be too late, as class initialization does not return to the calling instruction if it fails. since this is what our modified set does, an algorithm using this modified collection function is safe.



collection semantics as presented here can be thought of as a labeled semantics with a built-in interpretation function over the label trace of an execution. labeled semantics are generally used for collecting information during execution(as we do here) and have seen many uses(those given in[8,9,6,2] are just some examples). labeled semantics itself is an instance of a labeled transition system, a construct formalized in isabelle in. connecting our collection semantics locale to this work(such as by proving it to be an instance of the lts locale) would be straightforward, but the result would not have advanced any of the goals of this paper. it could, however, prove useful in allowing simulation of one collection semantics by another, especially in attempts to prove that the labels could be correctly replaced by instructions(such as the print instructions used by ekstazi). we leave this connection and proof to future work.



