we evaluate energy consumption under unknown service demands using three policies: task assignment based on guessing size(tags), the shortest queue strategy and random allocation in a homogeneous environment. we modelled these policies using performance evaluation processing algebra(pepa) to derive numerical solutions. our results show that servers running under tags consumes more energy than other policies in terms of total energy consumption. in contrast, tags consumes less energy than random



the rest of this paper is organised as follows. in section 2, we analysed and modelled tags using the markovian process algebra pepa. in section 3, the numerical results to evaluate the performance metrics are presented. section 4 introduces the energy model and the energy consumption results. finally, section 5 contains a discussion of future work and concludes the paper.



this section illustrates the random allocation policy, the shortest queue strategy and tags algorithm. we modelled the three policies in pepa, a formal presentation of which can be found in. we assume that in all cases, jobs arrive into the system in a poisson stream and receive a single service before leaving the system.



jobs are assumed to be independent and identically distributed. we studied energy consumption and performance under two service demand types:(i) exponential service demand and(ii) a two phase hyper-exponential service demand. the queues are bounded as pepa(with a maximum capacity of 10 jobs) does not support infinite queues. as a result, queues can be full leading to rejecting new arrival jobs from joining the queue. we assume that all queueing is first-come-first-served. in section 2.3 we present the pepa specification of the model and its parameters.



the random allocation policy assigns arrival jobs to a queue randomly. so, it does not take into consideration how many jobs are already waiting in the queue. as a result, one queue might be overflowing with jobs while the other queue is empty or half full. moreover, the probability of losing jobs is high, as sending a job to a full queue results in dropping that job permanently. furthermore, short jobs might be delayed for a long time when getting stuck behind a long job, which is not detected by the random scheduler. however, random allocation can be an attractive option as no knowledge about the system is needed. hence it is relatively trivial to implement.



the shortest queue strategy overcomes the problem of load balancing between the queues. when jobs arrive the policy forwards them to the queue with the least waiting jobs, thus leading to no queue becoming full while other queues still have available capacity. so, the probability of losing jobs is less significant as long as the arrival rate does not exceed the system capacity. however, short jobs might be delayed for a long time when getting stuck behind a long job, as this strategy only counts the waiting jobs and not their service demands. the shortest queue involves a management overhead as the policy has to have knowledge of the states of the queues. if the latency in polling queues is long then this overhead might be significant, leading to poorer performance in practice. however, in this paper we do not consider this aspect.



the tags scheme was initially introduced by harchol-balter in order to address the problem of jobs with long service demands unduly delaying jobs with a short service. the main justification of this algorithm is to allocate jobs where the service demand is unknown before execution. in this approach, a job is sent to a single server queue. the server starts processing the first job in the queue until the job is completed and has departed successfully or until a fixed time out is reached. if the timeout is reached before the job is completed, then the job is transferred to the next server. when the job arrives at the next server, the same steps are repeated, but the timeout for this level is increased. the process is repeated with a longer timeout each time until the last server is approached. the job in this final



the queues are modelled in such a way that each job is represented as a separately named derivative of the queue. the timeout at the first node is modelled using an erlang distribution, and the number of ticks is fixed. while the queue is not empty, the timeout clock starts at the beginning of each derivative of the queue. this is done by introducing tick action at each derivative. a race exists between the timeout action and the service process service1. if the timeout action wins, the job is killed and transferred to the second node to restart service from the beginning. otherwise, the task departs the system since it finished before the timeout action triggered. in both situations, the timeout clock is reset. if a job is waiting in the queue, the race starts again; otherwise, if the queue is empty, the server enters an idle state until a new job arrives.



as a result both queues will become full and if any new job arrives to the system will be dropped from the queue leading to an increase in the job loss rate. in contrast, tags reduces the chance that both queues become full if the timeout is well-tuned. the first queue is unlikely to become full as the timeout mechanism will kill long jobs and transfer them to the second server. despite the fact that the processing time for each long job is 100 times longer than any short job, the



we have studied energy consumption by the tags policy and compared it with that of the shortest queue strategy and random allocation. we have focused on these policies in the case of the high variability in workload. in our model, we assumed we have a two-node system where servers are identical regarding energy consumption and performance. the downside is that in practice, data centres are heterogeneous environments in which energy consumption may differ from server to server. we rely on the processor performance states(p-states) value to calculate energy consumption. the main downside of this is that we neglect energy consumption by other components of the server, such as hard disk and memory.



our analysis of energy consumption under the exponential distribution and hyper-exponential distribution concluded that the tags mechanism consumes more energy than the other two policies regarding total energy consumption. the energy consumed per job followed the same trend under the exponential distribution. in contrast, under the hyper-exponential distribution, tags consumed less energy per job than random allocation when the arrival rate was high. the shortest queue was the optimal policy in that case.



in this paper, the primary focus was to evaluate and compare energy consumption by tags, shortest queue strategy and random allocation. no trade-off between energy consumption and performance metrics were introduced. it is vital to have a comparison mechanism between energy consumption and performance for each policy in order to have a clear decision regarding which policy should be chosen. we should develop a cost function that considers performance and energy in order to trade off energy and performance.



variations among server specifications and processing capabilities are other factors that we should consider. we assumed servers are homogeneous regarding performance and energy while in reality, the data centre has a heterogeneous environment. it is worth while to study energy consumption when servers are not identical. if we have one server with low performance and high energy consumption and another server with high performance and low energy consumption, it will be valuable to determine which server should be the first server or second server. we are also aiming to investigate the benefit of using a multi-scheduling approach that combines tags with the shortest queue or random allocation to evaluate energy consumption.



