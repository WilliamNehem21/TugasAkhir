in the last few years, parallel processing has claimed its niche in improving performance and power trade-off for general purpose computing. so, it is no surprise that multi-core architectures will make inroads into the embedded processor markets as well. currently, major processor vendors have already released products containing multiple cores on a single die, however, one must employ concurrent programming models when designing their programs to exploit the architecture with multiple cores in such products. one such programming model, and one that most designers are familiar with, is the multi-threaded programming model.



a recent enhancement of the signal compiler generates multi-threaded code with tight synchronization between atomically executing threads. we find this a valuable step towards managing concurrency, but multi-threading if not judiciously employed has severe performance drawbacks due to the usage of too many threads resulting in high context switching overheads. the current signal compiler, in our opinion, performs micro-threading that generates c programs with an unnecessary number of threads in relation to the parallel computation. we illustrate this with the following pseudo signal code example:



in this section we outline a few relevant related works on concurrent code generation from concurrent specification of computation. we discuss some of the models of computation(moc) used to express concurrency between processes. other than that, we reemphasize some of the issues we have with existing synchronous programming languages based multi-threading implementations.



kahn process networks(kpn) is a primary specification formalism for dataflow between processes. kpn model has been proposed to capture concurrent processes in a system. in a kpn, the processes(nodes) communicate by unbounded unidirectional fifo channels(arcs), with the property of non-blocking writes and blocking reads on channels. a kpn model when transformed to implementation level faces problems related to buffer sizing. several scheduling algorithms have been proposed for estimating the buffer sizes for kpn models and for validating their correct behavior[9,18]. another moc which closely resembles kpn model is dataflow networks. here the nodes represent actors which when fired takes in a finite number of tokens and put out another finite number of tokens. in contrast with kpn, this moc can calculate the buffer size with respect to the number of computations in the network.



many tools have been developed based on these various dataflow models. simulink is an environment for multi-domain simulation and model-based design for dynamic and embedded systems. simulink has a stateflow coder that generates highly readable code which can be easily traced back to the stateflow chart. recently, a method for multi-threaded code generation from simulink models with reduction of thread communication overhead was proposed. this work is similar to our current methodology in the sense that they also concentrate on larger granularity for threads to reduce overhead of thread synchronizations. lustre is a declarative synchronous dataflow language used for describing reactive systems. esterel is an imperative language for describing control. it consists of



supervisor and monitor entities. the supervisor is responsible for reacting to the major functions of flight control such as computing possible next coordinates to move to. the monitor on the other hand only focuses on maintaining the elevation of the starmac testbed by proposing adjustments to the elevation when below a certain threshold. labels x, y, and z represent the x, y and z coordinates of the starmac and the in and out suffixes the respective inputs and outputs from this supervisory control unit. zm is the allowable minimum elevation for a particular rotor.



in the current strategy, the programmer is kept away from decisions regarding the number of threads and how they should be grouped. in order to utilize multi-core architectures, it is important for the programmer to be aware of the implementation level details, so that he can tailor it according to the hardware resources available to him. therefore, we suggest an alternative multi-threading solution that may be inferred from the signal specification, which uses only two threads for the starmac example.



