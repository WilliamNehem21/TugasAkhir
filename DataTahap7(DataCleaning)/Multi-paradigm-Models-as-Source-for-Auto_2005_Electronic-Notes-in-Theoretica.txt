software engineering has developed a variety of techniques based on abstraction and various kinds of composition to construct complex software systems. they help to make the growth of effort needed for software construction more manageable. unfortunately, now we lack similar techniques for software verification and validation. so, we are able to verify or test thoroughly only systems smaller and simpler than the ones we can construct.



but theoretic advantages of model based testing do not lead straightforward to its usefulness in practical applications. it is not quite obvious that model based methods can be applied successfully to complex software systems produced in the industry. moreover, a single success in such an application does not mean that the techniques used can be easily extended to large variety of industrial software. all these problems can be solved only by experimentation and finding out the characteristics of the approach critical for its success in industrial practice.



industrial use of model based testing methods needs the full-scale support of all aspects of test development and testing. unitesk provides such a support as it is shown in the main part of the article. moreover, it seems that to obtain valuable practical results of formal models we need to combine different formal methods. unitesk is an example of multi-paradigm technology where different approaches to formal treatment of software live in symbiosis and only being used together they are able achieve the goals stated.



further sections of the article consider various problems related with test development and testing on all the phases of software lifecycle. the next section provides some description of problems to be solved by the test development technology claiming its applicability to industrial software. the section also briefly depicts existing solutions of these problems in various formal frameworks. its main conclusion is that no single formal approach gives all the features we want to have in the successful test development technology. the third section presents the main ideas of unitesk approach and shows how different formal techniques are integrated in it. the last section provides some conclusions and describes possible directions of future work.



there are a lot of formal methods that can be applied to description, construction, or analysis of concurrent systems. but authors do not know references on some formal and at the same time full-scale consideration of testing issues for concurrent and distributed systems. first, if we have a model of such a system, how to stimulate test actions for it in a way that explicitly check its concurrent behavior? and how to interpret observable system responses in order to check their conformance to the model given? here we face with unclear notion of concurrent actions and impossibility to introduce a full order on the input actions and system responses, if they are observed in different places, which is ordinary for concurrent and distributed systems.



the way to construct oracles from contract specifications is quite obvious: we can check the precondition, then, if precondition holds, call the target operation and obtain its results, and then check the postcondition. invariants can be checked as parts of both preand postconditions. the approaches similar to this one are used in[10,11,12]. one of the problems of the approach is concerned with storing the pre-state of the system, which can be used to check the postcondition after the operation execution. the other problem is description of active systems, which can provide actions without any external stimuli and may not terminate. nontermination problem is addressed by ld-relations introduced by d. parnas and used in.



examples of oracle construction methods based on temporal logics are given in the works[14,15,16]. trace specification methods are presented in[17,18]. test construction on the base on scenario-based specifications is dealt with in. oracles constructed from specifications of this kind usually evaluate some trace presenting the history of observable actions related with the target system. usually, there are no ways to produce an oracle to evaluate system behavior in response to a single call.



coverage criteria based on efsm-like models of the target system are considered in. they are divided in control flow-based, such as transition coverage, transition-pair coverage, and data flow-based, as all-uses coverage or du-path coverage. examples of such approaches based on asm specifications are given in.



probabilistic models. probabilistic usage models give a group of test quality metrics assessing not the degree of system features exploration during testing, but the degree of exploration of possible usage scenarios. such models may serve to estimate the reliability of the system under test. they are usually represented as markov chains describing the probability of external events depending on the history of previous system-environment interaction. probabilistic models are used mostly as guides to the test data selection.



model from contract specifications and partition of the domain of each operation under test. the predicates defining the partition elements for some operations are considered in the parameters-states space. each predicate corresponds to the set of pairs(parameters, state). the states of the resulting fsm are obtained as projections of such sets. the stimuli of this fsm correspond to the elements of the initial partitions for all operations. so, each operation gives rise to several stimuli. the transition tour on this fsm provides a complete coverage of the partitions chosen. the similar techniques are used in[43,44,45].



designers of test development methods in academic community pay attention to strict definition of conformance relation checked by their methods. examples of such relations for fsm-based approaches are given in. in the works of j. tretmans ioco-relation is defined as conformance relation for lts and iolts-based approaches to test construction.



the technology uses methods of test construction on the base of formal models of target software. but to make this process more effective, models of different kinds are used on different phases of development. the technology includes methods to construct one model on the base of others, thus seamlessly integrating them in the test development process. the main features of the technology, underlying test development process, and test architecture are described in the articles[45,52]. this section presents in more details



so, we can consider an automaton with states si and input symbols pj. an application of an input symbol can lead us other state. note, that this state in general depends both on the specific state a used to apply the symbol and values of arguments chosen. but in many cases we can iteratively split the generalized states, starting from the initial one, to impose determinism. the paper describes a procedure that always stops if in the beginning we have finite deterministic system and gives a deterministic fsm as a result.



rational testrealtime uses contract specifications in combination with fsm models. asml test tool developed in microsoft research uses asm specifications for behavior description, but includes both automatic fsm construction on the base of asm and user-defined definition of observable properties, which make up structure of states for some efsm model. gotchatcbeans tool[59,60] developed in ibm research uses efsm-like behavior specifications written in murphy language and test directives that rule the test construction process. torx and tgv tools both are based on lts models augmented with test purposes described in scenario language.



unitesk technology shows that integration of various formal techniques appears to be quite effective in test development for industrial applications. the technology is supported by tools developed in isp ras. now tools for testing java, c/c++ software, and.net components are developed. all of them are commercial products, free licenses available for educational organizations. the tool for testing c software was successfully used to test several implementations of ipv6 protocol. the report on one of these projects can be found in. the full list of projects conducted using the technology can be found on redverst web page.



