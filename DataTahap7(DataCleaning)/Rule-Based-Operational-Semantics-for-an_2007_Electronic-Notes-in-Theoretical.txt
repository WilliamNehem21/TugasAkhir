operational semantics for programming languages usually come in two flavours: big-step and small-step. both are defined using deduction rules with a congruence rule allowing reduction in certain contexts. for a description based on rewrite rules, known approaches consist in deriving an abstract machine, which is very close to implementation. in this paper, we describe the operational semantics of an imperative language in a rule-based style, arguably as abstract as the other kinds of semantics. moreover, we combine the approach with the store-based semantics, which puts the focus on memory states rather than values, which is more appropriate for imperative languages.



structural operational semantics(sos) has become the standard way of defining the operational meaning(or semantics) of programming languages. still, sos allows two different styles of specification: the big-step style defining a relation between programs and return values; and the small-step style defining a relation between program states. the big-step style is often preferred in the definition of the semantics of a programming language, but the small-step formulation is sometimes more convenient for certain applications(e.g., the proof of language properties[5,2]).



practice, small-step presentations of programming languages are indeed done in this way: the truly atomic steps are described as axioms, and a deduction rule allows reduction in a certain class of contexts. in general, this rule may effectively be applied an arbitrary number of times. moreover, the class of contexts in which reduction should be allowed may be very tricky to define; this is the main difficulty that arises when one tries to derive the small-step semantics from the big-step one. thereafter, we call contextual semantics this kind of presentation that heavily relies on contexts.



another defect of conventional descriptions of semantics is the emphasis on values, which may prove cumbersome when the object of study is instead a memory state. this is the case in imperative languages, but also for instance in proof languages where the state is the proof-tree under development. in this situation, the framework is usually adapted to deal with pairs of a program and a memory state: the programs no longer compute a value but a final memory state, so the definition of normal forms needs to be adapted. the use of pairs also creates an artificial asymmetry in the deduction rules, reflecting the fact that subterms of pairs are not pairs themselves.



we show that the two approaches can be combined in section 5, resulting in a truly rule-based semantics of an imperative language, where evaluation flow(reduction order) is made explicit at the syntactic level, and with emphasis on memory states. this could prove particularly useful to express the semantics of languages centred on state manipulation and for which the evaluation order is tricky to define in terms of contexts. it could also be useful to derive in a more or less automatic way small-step semantics and abstract machines from big-step specifications. moreover, this allows to borrow from well-known rewriting theory results, technologies and tools.



the traditional approach to express the semantics of a language in more atomic steps is called small-step semantics, but we prefer the term contextual semantics here, as the formalisms we introduce can arguably also be called small-step semantics. it will even be argued that the steps are somewhat smaller. in this section, we expose the traditional approach, adapted from.



where the state is unchanged and v is a value. in this note, the focus is on the evaluation of commands. hence from now on we assume expressions are correctly evaluated without giving more details; the interested reader may refer to.



the contextual rule has been put in the reduction relation, in an explicit way. all steps are thus truly atomic, and the number of steps gives a more reasonable account of the cost of evaluation. for instance, a compiled program will most probably not need to perform any context steps.



as in the conventional approach, there is only one reduction possible at a time. but now, this does not rely on a fine tuning of a class of contexts. this is rather enforced syntactically at the level of terms, in an explicit and extensible way.



we can now get rid of the context rule by restricting rewrite rules to atomic stores, which imposes a reduction strategy at the level of the rewrite system, so that only one reduction is possible at a time. intermediate notations, such as:= and if... then... else, are introduced to mark that evaluation of an expression has already been triggered, and the next step should happen after we get a value. this trick contributes to getting rid of the context rule. finally, we use the[,]



note that this way of dealing with expressions, i.e. as commands, is not as farfetched as it may seem: the contextual semantics of section 2.4 has a dual approach, in that it considered commands as a special kind of expressions(functions returning skip).



we have presented three original semantical frameworks for a minimalistic imperative language. while being at a higher level than abstract machines, they have many desirable properties compared to conventional approaches. these formalisms rely on a simpler model(term rewriting instead of deduction system), one of them gives an explicit status to the evaluation flow, another one improves the balance between memory state and values and the last one combines these benefits.



the approach has many other potential applications, still to be perceived. among others, results and tools from rewriting theory may be easier to apply to semantics. it is also a better candidate than regular approaches to bridge the gap between big-step specifications and implementations.



