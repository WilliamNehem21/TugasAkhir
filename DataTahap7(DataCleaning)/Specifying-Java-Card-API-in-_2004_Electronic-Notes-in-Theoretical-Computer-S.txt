we discuss the development of an ocl specification for the java card api. the main purpose of this specification is to support and aid the verification of java card programs in the key system. the main goal of the key system is to integrate object oriented design and formal methods. the already existing specification written in jml(java modelling language) has been used as a starting point for the development of the ocl specification. in this paper we report on the problems that we encountered when writing the specification and their solutions, we present the most interesting parts of the specification, we report on successful verification attempts and finally we evaluate ocl and compare it to jml in the context of java card program specification and verification.



this paper reports on the development of an ocl specification for the java card api. java card is a subset of the java programming language and is used to program smart cards. the java card api(application programming interface) is a set of library classes used in java card programs. java card api is a much smaller version of the standard java api and is specifically designed for smart card programming. the ocl specification is necessary to perform formal verification of such programs when the implementation of the api classes is not available. even if the api implementation is available, having the ocl specification helps to avoid repetitive work of proving the api implementation each time api method is used in a java card program. the secondary purpose of writing the specification is to document the behaviour of the java card api in a formal way. we discuss the problems we encountered when writing the specification in ocl and their solutions. we present some of the most interesting parts of the specification and report on successful verification attempts of the reference implementation of java card api w.r.t. our specification. finally, we evaluate ocl and compare it to jml in the context of this work. this paper summarises results from.



one of the purposes of the key system is the possibility to formally verify java card applications. to successfully verify a program that uses the java card api one has to have access to either the implementation of the api or its formal specification. since the implementation of the api is usually not available(especially when the methods are native), the latter is the solution we are aiming for. let us look at an example to illustrate how the java card api specification is used in the verification process. suppose we have implemented a method amethod in our java card program. we now want to verify that the implementation satisfies the formal specification(the pair of main difference is the specification language used. the loop tool presented in uses jml and pvs as the means to formally verify java card programs, thus the necessity for the api specification written in jml. as we use the industry standard ocl as a specification language in the key project we need to have the java card api specification formulated in ocl. we also made an effort to have more complete coverage of the java card api in our specification.



when comparing objects other than class attributes(e.g. method arguments) to the null value things are a bit more difficult. if such an object is an array or a collection type, one can use the same technique as described above. otherwise there is no way to specify that an object should(or should not) have the null value.



this still does not solve the problem of proper interpretation of overflow behaviour in ocl. luckily, the key system comes to the rescue again. when the ocl specification is translated to a java dynamic logic formula, the user can choose how the integer types are interpreted by the prover: either as finite java types short and byte, or as infinite arithmetic types arithshort and arithbyte. in both cases the issue of overflow is treated appropriately. more about handling arithmetics in the key system can be found in[5,17]. also,



this is not a good solution, though. suppose we have a class with 20 attributes and we want to express the fact that only one attribute is assignable. that means we have to write 19 expressions like the one above for all the remaining attributes. there is ongoing work that aims at solving this problem in the key system. the work is about how to properly specify attribute modification behaviour and how such specification can be used in proofs. in the current version of our work we left out the parts of the specification corresponding to the@assignable clause in jml.



the present work resulted in an ocl specification for all classes and interfaces of the java card api 2.2. this specification expresses, with a few exceptions(some of the signals clauses and the assignable clauses were not possible to be fully expressed in ocl), as much as the jml specification for java card api 2.1.1. in some cases the ocl specification expresses more than the jml specification. in the following we illustrate by example how our ocl specification was created and how it was improved(compared to jml).



compares pin against the pin value. if they match and the pin is not blocked, it sets the validated flag and resets the try counter to its maximum. if it does not match, it decrements the try counter and, if the counter has reached zero, blocks the pin. even if a transaction is in progress, the internal state such as the try counter, the validated flag and the blocking state must not be conditionally updated.



in the next example we show how the specification of method setkey in class deskey has been enriched compared to jml specification. the method setkey copies the data(an array of bytes) that is passed as an argument and constitutes the actual key to the internal attribute data. under certain circumstances, this data is not passed to the method in plain text but as a cipher and the method must then decrypt the data before it is copied into the internal representation. here is the jml specification for this method:



what we added in this specification is the following. if this particular instance of deskey is not an instance of javacardx.crypto.keyencryption or if this instance is not associated with a cipher object(the circumstances under which the input keydata have to be decrypted), then the input data is to be copied directly into the internal attribute data.



the version we used. since the arrays are present almost everywhere in the java card api this was a major obstacle. we can however report that a number of simple getreason/setreason methods in the exception classes of javacard.framework package have been verified. a more complicated successful proof attempt was the verification of the reset method in the ownerpin class. the specification is the following:



in this paper we presented our experience from the development of an ocl specification for the java card api 2.2. despite the mentioned problems with ocl we managed to specify the whole java card api to a reasonable extent. the specification is available on-line at:



the two main purposes of this work were to aid and support formal verification of java card programs in the key system and to document the java card api in a formal way. we tested our specification by formally verifying the reference implementation of the java card api with the key system, however, due to technical limitations, this was not done to the desirable extent. still, the proofs we attempted were successful and were performed automatically by the key system. in the near future the key system will cover the full java card standard. then we plan to continue in this direction and also, based on our specification, perform formal verification of real life java card case studies.



