many numerical programs, including those used for physics simulation[19,17] and image processing[19,10] are accelerated by graphics processing units(gpus) which support high parallelism. correctness checking is therefore becoming an important issue for gpu program development. previous tools have incorporated formal approaches for data race checking in the presence of a large number of threads, hierarchical memory spaces, and thread schedules[14,15,5,7]. one issue that directly affects the integrity of values is unsafe type-casting detection. however this aspect has not received much attention in the past. in this paper, we focus on this problem and offer simple practical solutions based on static typing.



our static analysis method tracks possibly negative values(for both integers and floating-point numbers) and checks if any of such values is used in fp2ui casting. our method is conservative. it means that false warnings of unsafe fp2ui may be raised. we employ two techniques for reducing false alarms: manual hints and pre-defined function contracts. manual hints allow our method to communicate with external sources of such as users or other analyzers. pre-defined function contracts allow our method to track possibly negative values in high-level abstraction instead of exploring source code level details. this greatly increases the analysis accuracy. furthermore, this technique allows our method to handle dynamic linked routines whose source code is not available. the contributions of our work can be summarized as follows:



dynamic tools instrument programs and set up conditionals to check casting arguments at run-time. ioc and brick are the examples of the dynamic approach. these tools generate no false alarms; however, the detection coverage depends on the testing inputs provided by the users.



dynamic symbolic analysis is similar to white-box fuzz testing which is driven by some initial inputs. these tools automatically generate new inputs for increased test coverage. smartfuzz belongs to this category. the test coverage and the scalability of these tools may be limited by the underlying constraint(smt) solvers.



we studied some usages of fp2ui casting in cuda sdk and categorized the examples into two scenarios: thread group size computation and information compaction. we manually analyzed all the usages of fp2ui casting and found that all of them are safe. our analyzer raised only one alarm(a false alarm) in all our examples from cuda sdk. in many examples, we observed that simple manual hints and pre-defined contracts help our analyzer avoid raising false alarm.



column unsafe fp2ui found by manual analysis indicates whether a benchmark contains any unsafe fp2ui casting. column unsafe fp2ui found with/without opt. indicates whether an unsafe fp2ui warning was raised by our static analysis with/without optimization techniques. y(n) indicates that an unsafe fp2ui was found(not found). column applied optimizations indicates the optimization techniques applied for the result shown in column unsafe fp2ui found with opt..



detecting unsafe type-casting is important for gpu program development. in this paper, we presented a static analysis based method for detecting unsafe type-casting and a prototype integration with a gpu program analyzer. we empirically showed that our method can avoid reporting many false alarms in practice. we plan to invoke symbolic analysis to increase detection accuracy and integrate with program synthesis to generate low-overhead safe programs in our future work.



