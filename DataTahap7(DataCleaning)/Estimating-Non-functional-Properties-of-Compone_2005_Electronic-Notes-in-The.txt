while the functionality is the most important factor in selecting a component for an application that is being developed, non-functional properties(nfps) are becoming more and more important, too. these nfps should not be determined afterwards, but must be considered in the design process from the beginning and thus influence the selection of components. the designer should be able to estimate the nfps of the system being built at any point in time.



storage, another predicate is ro is used which is more strict in expressing upper bounds. these predicates are in fact valued-based, as has been indicated above. hence, the resource specifications approximate the bounds using predicates, but rely on a detailed functional specification that exhibits the concrete implementation. they must be supplied by the developer of a component and obviously need a white-box view of the component. furthermore, how to obtain the base values used in the specifications(e.g. initialization of an entry in the stack example) is not clearly stated.



the compas project uses a matrix to describe the import-export relation of components. this matrix indicates for each pair of methods in the system the probability that method 1 calls method 2 in a particular transaction, that is, a particular workload. the information is extracted from traces. so the system must be complete before the evaluation can start. the purpose is to predict the behavior of the same system under new workloads from the measurements. but the development process itself is not modified to take care of performance issues while building the system.



for the purpose of this paper a quite general component model can be used. this model describes components mainly as software building blocks having declared interfaces of services a component offers and interfaces a component imports, that is the interfaces of other components it will call to implement its own functionality. an interface is a set of methods. we come from an enterprise-java-beans-like component model, focusing on the main prop-



to have this information is crucial when addressing the nfps of components. the relation at the moment does not show the dependence on the parameters of the methods. that would be even more useful, but it would make the relation much more complex. so we start with the elementary form with the clear intension to later extend it.



it has just been said that the implementor of a component decides which interfaces to import. in our setting, components and their exported methods are subject to annotations regarding nfps. these nfps must be consistent with the nfps of the components that offer the imported interfaces. as mentioned above, we use response time as an example here.



for response time, the resources considered to be most important are cpu and memory 10. in general, their usage depends on the platform and on the data processed. the data must be included if the relationship of resource usage and an nfp is to be identified. these data can be of a simple type like integer with its limited value range, or of more complex types like video or image. value-based specification may be feasible for the simple types, but for the complex types data values are much too large and too detailed, so the salient properties must be used instead, e.g. frame rate, compression format, and size in case of video. both is denoted by data in the following, meaning either values or properties depending on the type.



in the comquad project, an extension of cqml is used to describe the resource usages of nfps(for details see[16,24]). in addition to the qualities and profiles of cqml, cqml+ allows to specify the resource demands a component has. although in this paper we focus on cpu and memory usage, the extension is flexible enough to add arbitrary resource types, as the semantics are defined by the underlying resource manager.



bound referring to the approximation. of course, in order to be able to respond within the given time bound, squareroot must rely on the methods contained in the imported interface math of type math, which themselves have to return their answers within a given(smaller) bound. based on definitions of the quality characteristics response_time and square_error 13, three different qualities are defined, constraining response_time and square_error, respectively. two further qualities constrain the resource usage using intervals. finally, a profile associates those qualities with the component. as the component itself needs certain resources to offer medium response time and high error bound, this is stated in the resources clause of cqml+.



as the goal is to reason about non-functional properties of the whole system under construction, the properties of all components must be considered. taking again response time as a simple example, each component will have a response time for each of its methods(which depends on the available resources; see above). if one component calls another, the response time of the called method becomes part of the response time of the calling method. in total, the latter response time is accumulated from all calls to imported methods and the time used in the component itself.



of the response times can still be increased, and the testing of the resources can be repeated. if all that fails, the assembly chosen exceeds the resources available or a given resource limit for the assembly. so a alternative assembly has to be constructed.



the formalism also allows to go the other way. that means to enquire the available resources and then use ff2(mij) to calculate the values of tj,local and finally the response time of method instance mi1. however, this is considered to be less interesting, because the available resources are known only at runtime.



obviously, nfps other than response time must also be considered. at the moment, they must be investigated one by one, before a common treatment can be identified. their nature is very different, so most likely a common treatment can only be achieved for classes of similar nfps. however, we believe that the approach presented here is applicable to nfps other than time and space as well, as long as they are additive. we will investigate this issue in further work.





