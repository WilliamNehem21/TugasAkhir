static variables and methods are part of almost every modern object-oriented programming language. static elements are for instance indispensable for certain kinds of design patterns applied during programming. object-oriented specification formalisms on the other hand lack such concepts. this can prevent writing formal specifications close to the actual implementation, and can thus hamper a refinement-based stepwise development.



in this paper, we present such an enhancement of a formal specification language with static class elements. as language we use the object-oriented state-based method object-z[13,5], which already contains the main object-oriented features like object creation, inheritance and polymorphism. by making just a small extension of the language(and its semantics), we can incorporate static variables and methods into object-z. this extension essentially concerns the addition of information about the class an object belongs to: like self referring to the object identity, we now have a property classname referring to the class of an object. with this single new concept we can model static class elements in object-z specifications. as this always involves a number of additional class definitions(for instance, one class being the root of all objects, and another class being the root of all classes), we furthermore define a shorthand notation which allows to simply write static variables and methods within normal object-z classes. we then show that creation patterns(more specifically, the singleton pattern) can be modelled with this extension of object-z.



static variables and methods will most often be used during the final step of developing a model close to an object-oriented implementation. thus, during the development we will have a transition from a specification without to one with static elements. this transition should of course be a valid refinement step. hence, we furthermore study refinement in this new setting of object-z with static elements. as it turns out, refinement between classes with static elements can simply be patterns, more specifically the singleton pattern. we furthermore give a java code fragment to show how the pattern can be modelled with static variables. the next section will then present our extension of object-z. section 4 discusses the issue of refinement and compositionality, and the last section concludes.



each instance of this class c holds its own variable logfile, therefore, if we have multiple instances, each l.getmessage returns a subset of all messages generated. instead we would like the system to have just one instance of the logfile on which all instances of c write(more precisely, we would like one instance of log only).



this particular issue of single object instantiation is a well-known problem in ooprogramming languages and it can be solved with static variables. static variables are created only once per class, not once per instance like normal object variables of classes. static operations are similar, the operation is created once for a class and cannot use any internal information of an instance(unless it has a static variable with a reference to instances). in java code static variables and operations are marked with the keyword static.



in object-oriented programming languages the concept of static variables and operations thus allows to formulate the singleton pattern(and also other creation patterns). in object-z we would need to use global variables and/or functions to achieve the same effect. this would however break the object-oriented structuring: the unique log instance would not be attached to the log class anymore. this gets the more inappropriate the more such variables or methods we have. moreover, as object-oriented programming languages either do not have global variables or consider their usage to be bad style, a specification close to the implementation should not have global variables.



of a class. the variable classname will take values out of the universe of all possible names of classes cnames. a more formal definition could first define a new metafunction name(see for other meta-functions for classes), and use this to derive the name of the class of an object. the above definition can also be extended to cover polymorphism and class union.



i.e. every(object-side) class has to say what its class-side class is. this function classref, the classname construct and the constraint over the variable class are key to our framework: these constructs ensure that only one(and always the same)



with this we have finished the definition and usage of the framework. now we can use the singleton pattern. consider again the class c from the last section having a variable of type log. this class is next changed: the initialization of this variable now proceeds via an operation of class logclass. class c however does not need to know what the class-side of log2 is, this can be calculated by using function classref.



we are ultimately interested in using the concept of static elements in a refinementbased design, where we start with an abstract model and gradually refine it into a specification close to an actual implementation. being a programming concept, static elements will most likely appear in later stages when we introduce objectoriented programming structures into our design. thus we have to see what refinement means in this setting at all, and furthermore whether the introduction of static elements is a valid refinement step.



this means in particular that the class a may have references to objects of classes a1,..., an, i.e. have variables of type ai, i= 1,... n. in our framework we in particular have the object-side containing a reference to the class-side via the variable class, and possibly also vice versa. the appropriate notion of refinement is thus conditions of downward simulation essentially relies on this argument. moreover, we can also extend this result to non-empty class-sides, using exactly the same argument. here, we however need one small sidecondition: since the class-side can now also have variables, we have to make sure that there are valid bindings for the class-side. in particular, there must be a binding in the class-side that satisfies the init predicate. using the notation of above, but this time with an arbitrary class inside c, the condition is



the last step towards a proper usage of these elements would consist of changing the classes holding references to classes with static elements(in our log example, c). since this change essentially depends on the application itself, no general result can be established for it. instead, this last step always needs an individual proof of refinement.



