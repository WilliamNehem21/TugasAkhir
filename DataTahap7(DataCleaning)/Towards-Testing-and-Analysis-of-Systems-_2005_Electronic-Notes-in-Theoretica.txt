object serialization facilitates the flattening of structured objects into byte streams and is therefore important for all component-based applications that strongly rely on data-exchange among components. unfortunately, implementing and controlling the serialization mechanisms may expose the software to subtle faults. this paper paves the way towards testing and analysis techniques specifically tailored to the assessment of software that uses serialization. in particular, we introduce a taxonomy of abstractions and terms to semantically characterize and classify the main data-exchange cases, which serialization can be involved with. the resulting conceptual framework provides a means to forecast how erroneous implementations of serialization would look like in different cases, thus enabling the focusing of testing and analysis techniques to address serialization-related faults.



unfortunately, changing the default behavior of serialization exposes the software to subtle faults. consider for example the case in which two components exchange an object and this involves serialization. subtle faults and failures may show up if the receiving component assumes that the object structure is as defined in the sender component, but instead the structure was modified during serialization. the first part of this paper reports a number of sample cases of software faults that can be accounted to the use of serialization. however, to the best of our knowledge, in the current research and industrial practice there is lack of testing and analysis techniques that address correctness of the software in presence of serialization. this motivates our research



as a first milestone towards this goal, the main contribution of this paper is the definition of a conceptual framework for reasoning about serialization. we introduce a taxonomy of abstractions and terms to semantically characterize and classify the main data-exchange cases, which serialization can be involved with. we draw the link between the identified semantic cases and the linguistic support for serialization. our conceptual framework provides a means to forecast how erroneous implementations of serialization would look like in different cases. this enables focusing of testing and analysis techniques to address serialization-related faults. as preliminary evaluation of our research, we sketch how the defined conceptual framework may facilitate the adaptation of the ideas of traditional data-flow testing[6,5] for verifying serialization. we illustrate the framework and the examples referring to java, but we believe that the ideas can be easily ported to other programming language.



part of the work presented in this paper relates to the concepts presented by fuggetta, picco and vigna in. referring to mobile code systems, these authors distinguish mobility mechanisms for three elements of a program: code, execution state and data space. in particular, data mobility involves transfer of structured data across computing environments and is often practically accomplished by means of serialization. our taxonomy of dataexchange cases can be regarded to as an extension of the data mobility cases presented in.



the paper is organized as follows. section 2 illustrates some sample software faults that can be accounted to the use of serialization. section 3 proposes a conceptual framework for reasoning on testing and analysis techniques for serialization. section 4 exemplifies how our framework may support the definition of dataflow-based testing of serialization related faults. section 5 summarizes the contributions of this paper and sketches the future agenda of our research.



void readobject(object) of the class objectinputstream. by default, when an object is serialized, its whole object graph is serialized, i.e., all directly and indirectly referenced objects are recursively serialized as well. the default behavior of serialization can be altered by marking object references as transient, thus interrupting the recursion in the a branch of the object graph, or redefining the methods readobject and writeobject for specific classes of objects. serialization can be the source of subtle faults in a software system. referring to java, this section provides examples of faults that can be accounted to serialization in specific cases.



the state of a complex object is often composed of other objects. for instance the state of a person object might include an address object containing information like street, city, zip code and so forth. by default in java the serialization of a person object would imply the serialization of the corresponding address object. in general, the serialization of an object o is performed by recursively serializing all objects referenced in o.



static attributes address the definition of properties that are shared among all objects of a class. in java the values of the static attributes are not serialized by default. thus, when an object is resumed from a stream, its static attributes are inherited from the new runtime context. this however may be a potential source of faults if all possible bindings are not considered. for example, let us consider a class webpage that contains a static attribute style, which references an object of class pagestyle storing style attributes for all pages in a given context:



when a webpage object is serialized, the contained static reference is ignored. when the object is deserialized, style is set to the pagestyle object in the new environment. however, if the attribute is undefined in the new environment, the attribute style of a deserialized webpage object will inherit the default reference value, i.e., a null reference. this can produce undesired effects(e.g., a nullpointerexception) if the value of style is not checked before use.



replication of the code from constructors is often the case in practice for customizing the deserialization process in presence of static attributes. however, for complex programs, it can be difficult to correctly choose which constructor and which parts must be replicated. this generates a new source of potential faults.



in component based applications, it is likely that different components may refer to different versions of the same class, for instance because platforms have been updated at the different moments. it is possible that a component receives a serialized object that does not match the held version of the class. deserialization would fail in this case.



ject state variables, the metadata and the serialversionuid of the class. this latter is a static attribute assigned to classes at compile-time. it represents the class version as a long integer number. conversion can be accomplished during the serialization process in two ways:



the existence of a cycle in the transitive closure of the references of a given object could, in principle, cause the same object to be serialized multiple times in the same stream. to avoid this situation, the default serialization maintains memory of already serialized objects and inserts only a token into the stream when the same object occurs again. tokens are such that they uniquely identify the objects. this mechanism prevents infinite recursion, but also hinders the serialization of a new copy of an already serialized version, which sometimes can be the desired behavior.



after establishing the communication, the client sends to the server two objects of the class counter.(although not explicitly shown, the class counter is supposed to provide the functionality of a simple counter that is initialized to zero on construction and can be incremented of a unit with the method inc.) the client initializes a counter, serializes it and sends it to the server through the tcp socket. the operation is repeated twice and the counter is incremented in between. the server receives the objects and prints their values on the screen. in the showed example, the communication results in a failure: the server prints the number 0 twice, instead of printing 0 and 1 as expected. the reason for such faulty behavior is that the counter object is not serialized the second time that the client writes it into the stream. instead, a token that refers to the previous copy of the counter is inserted into the stream.



rebinding occurs when an object graph is excluded from the data-exchange with the semantics that the corresponding reference will be relinked in the target environment to an object of the same type. rebinding is possible in two different ways, depending on the identity of the relinked objects. rebinding to the original object occurs when the original subgraph is relinked through a link that spans across the target and the original environments. conversely, rebinding to a different object occurs when the actual relinked objects are different from the original object graph. for example, rebinding to the original object is used in java-rmi() when a remotely accessible object is passed as parameter to a remote method(i.e., a method of a remote component), resulting in the object remaining local and only a remote reference being passed to the remote component: the object graph is not transferred, while instead as a result of the invocation, it is relinked from within the remote component. rebinding to a different object happens for example in the case of a software agent that migrates across the network and links to resources in the reached hosts, after having detached the corresponding resources in the original host.



the definition of testing techniques addressing serialization is not straightforward since both semantics of current operation and semantics of the serialization must be taken into account. to support testing of serialization, we developed a reasoning framework based on our knowledge on the possible data exchange strategies that may occur with serialization. we do not claim this framework to be complete or exhaustive, but we investigated its usefulness by showing that it allows to tune and extend dataflow testing for systems that use serialization.



we are currently working to refine and complete our conceptual framework for reasoning on serialization. in particular, we are currently investigating the connection between the data-exchange cases classified in the framework and the implementation support provided in java for serialization. we are also conducting further research on testing and analysis techniques that can be defined based on our conceptual framework. we are refining the specialized dataflow testing approach that we preliminarily described in this paper. we are finally investigating assertion-based run time verification[7,11]. this latter could exploit our conceptual framework as a base for the definition of specialized assertions to address serialization.



