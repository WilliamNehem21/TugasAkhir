we consider systems comprised of many copies of a few basic building blocks. examples include collections of concurrent processes executing the same program, but also compositions of distinct kinds of homogeneous subsystems, such as the readers-writers protocol. systems of this type are a primary source of state explosion during temporal logic model checking, characterized by the potential to incur a state graph much larger than the description of the system.



the techniques can be applied algorithmically. they are efficient, since they operate on the source code, which is usually small compared to a kripke model. finally, the proposed reductions are exact, i.e. the reduced system has the same behavior as the original one(they are bisimilar).



we assume a system of concurrent process components with an interleaving model of computation. replicated processes are instantiations of a program template. any number of templates is allowed; each gives rise to a fully symmetric subsystem. each process has its own local variables, declared in its template. all variables and statements declared outside any template are referred to as global. we thus permit compositions of distinct fully symmetric subsystems, which allows us to model systems like readers-writers(two symmetric clusters) or microprocessors with separate symmetries in channels, memory addresses, registers, etc.



high-level modeling languages allow users to specify the behavior of processes in terms of(assignments to) global and local variables. the concept of local states is implicit and must first be extracted from the program. this is, at least in theory, straightforward. a local state is given by a valuation of the local variables. quantitatively, let m be the number of local variables declared in a program template, and let v1,..., vm be the ranges of those variables. it



the number of local states is an important factor for the efficiency of counter abstraction. with bdd-based symbolic model checking, bits need to be explicitly allocated for every counter, whether it is relevant for program execution or not. it is therefore crucial for the performance of counter abstraction to detect situations in which keeping a counter to monitor a local state is unnecessary. such a situation might arise because some variable values in a local state are unused in the program and hence do not matter(section 3.1), or because the local state is known to be unreachable(section 3.2).



case, the local state space of a process contains a program counter, indicating the statement to be executed next. an analysis of the program allows us to estimate the way data are manipulated. we can exploit this information by only keeping track of values of variables that can possibly be used in the future.



definition 3.1[e.g.] a variable x is live at a control point if there exists a path to a future moment 5 at which the value of x is used, and x is not assigned along the path. otherwise, x is dead at the control point.



the formal justification for not recording dead variables is as follows. assume each process has a program counter pc and m other local variables v1,..., vm. the concurrent execution of the program p by the processes in an interleaved fashion defines a kripke structure m=(s, r). recall that variables is a data flow analysis problem. a variety of solutions exist, of a complexity that is in practice usually low-degree polynomial in the size of the input program; see for example. the result is, for each value of the program counter, a list of the variables that are live just before the corresponding line. stepping through the program, we create a counter variable for each partial valuation of the local variables of the form(pc, x1,..., xk) such that xi is a value of local variable vi, and vi is live at the given pc. dead variables are not expanded into possible local states.



suppose l is a local state(i.e. a valuation of local variables) that is not reachable by any process. in the counter-abstracted program, the corresponding counter nl is invariably zero. if the unreachability of l is known a priori, we do not have to introduce nl as a variable in the abstract program, and the translation into counters does not have to consider l.



formally, we define the local reachability problem as follows. given a local state l and a system of concurrent processes, determine whether there is a reachable global state in which some process is in local state l. in general, this problem is of course a model checking problem by itself. however, in order to perform counter abstraction, we do not need to know the exact set of reachable local states; any over-approximation suffices. in fact, not performing such an analysis at all is tantamount to using all(conceivable) local states



another technique to approximate reachable local states is borrowed from compilers, which sometimes optimize program behavior by confining the number of values that a local variable can have at some program point. local states not satisfying these limits are unreachable. examples for such techniques are constant propagation, constant folding, copy propagation, integer interval arithmetic and perhaps even alias analysis(depending on the expressive power of the programming language).6 consider the following contrived program, which prints an input number a in some numerical base and the character with ascii code a, denoted by chr(a).



variables minprint and base degenerate to constants, since there is only one(dynamic) assignment to them. after replacing every occurrence by 32 or 16, resp.(constant propagation), these variables do not participate in the construction of local states. more interestingly, in line 4 we know after constant efficiency, an explicit-state model checker may use a compressed notation for all zero-valued counters. symbolically, zero-suppressed bdds may be applicable, but this technique does not capture the benefits of live variable analysis, where the counters shown to be irrelevant are non-zero. moreover, since the set of zero-valued counters varies over time, counters for all local states must still be declared initially. the advantage of the techniques in this section is that they reduce the number of counters before even building a symbolic model; irrelevant ones are simply not present.



in modeling languages intended for describing asynchronous systems, the granularity of interleaving is determined by whatever the programmer puts inside an atomic action. such languages therefore usually support constructs that change the local state of several processes at the same time. common examples are broadcasts to all processes in a symmetric subsystem instructing them to reset their local state in order to recover from a deadlock, or to invalidate their cache data. we call such statements synchronization constructs. we show that the straightforward way to implement them abstractly using counters can lead to complex bdds, and describe an alternative that allows for a more efficient solution.



the intuition for this complexity is an artifact of counter abstraction. in an assignment like for i: xi:= false, the current value of xi is overwritten and therefore normally not of further interest. with counter abstraction, however, we need to know this value since the counter for the future local state increases by the value of the counter for the current local state(l vs. l' in(5)). the solution to avoid the complexity is to disentangle steps(4) and(5) so as to



the final example illustrates the effect of serializing complex synchronous instructions when working with bdds. a communication bridge transports data between two ports, performing some operations on them in the middle. processes read the data from the output port. when the output port is full, and no process is ready to consume the data, the system is in a deadlocklike situation. it recovers from it by instructing all processes to interrupt and be ready to unburden the output port. the message is broadcast to all processes, rather than just sent to one, since the output port would likely be full again quickly if only one data item was read from it.



in, the use of compiler optimization techniques similar to ours is suggested to reduce the number of bdd variables to represent reachable states, with different bdds for different program points. in contrast, the goal of our work is to build a symbolic representation of the overall program, to enable symbolic model checking. this is possible since counter abstraction(which is of no concern in) allows us to incorporate live variable information into the abstract state representation, by creating local state counters judiciously.



