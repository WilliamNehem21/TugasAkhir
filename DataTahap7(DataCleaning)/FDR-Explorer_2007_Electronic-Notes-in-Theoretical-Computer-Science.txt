the soaring complexity in hardware and software systems has increased the demand for reliability and correctness, most noticeably in the high-integrity and safetycritical domains. one effective way of achieving this goal is through the use of formal specification and verification. nevertheless, no matter how useful those techniques might be, due to the sheer number of possible scenarios to investigate resulting from the concurrent interaction of different components, tool support is an imperative. for instance, the number of distinct behaviours to analyse can reach 107 distinct states on a parallel network of 1020 dinning philosophers and beyond. in this paper, we are particularly interested in providing further tool support for refinement model checking the process algebra csp using its automatic tool fdr, hence we assume previous knowledge of both. csp is a successful technology with industrial-strength tool support that has been used for two decades. in this scenario, all observable behaviours are characterised by a labelled transition system(lts) representing the(operational) semantics of csp specifications[17, chapter 4]. fdr is then used to exhaustively analyse those ltss for various purposes, mainly refinement checking, determinism, and deadlock and livelock freedom. due to the high-level of automation of model checking when compared with other formal verification techniques, such as theorem proving, the use of csp and fdr became very attractive in both academia and industry.



nevertheless, this kind of push-button technology, which enables automatic formal verification for correctness and refinement. this incurs quite some effort from the user in writing the appropriate csp for fdr, which usually implies abstractions towards bounded models. the problem is there is no thorough and definite guidance source, to the extent of our knowledge. instead, one needs to sift through many different(and unrelated) sources. assuming the user has good knowledge of csp, our tool can help the fdr user to generate more efficient csp code, as well as to find the cause of some obscure execution errors, such as communication outside a channel data type. perhaps it can be better exploited as bridge between fdr and more high-level tools which write csp code.



from the gui, the user loads a specification, adds/performs refinement checks, and investigates debugging information visually. from the batch interface, the user could perform the same operations, but with textual feedback logged to the standard output. the batch interface can be useful for noninteractive checks, or checks over a network.



most compact lts due to the structure of the process being described. nevertheless, bearing such structuring in mind proves very useful when checking complex or data intensive specifications[16,10]. this information might be interesting not only for the experienced csp user handling complex specifications, but also for other tools that automatically generate csp code, such as security analysis tools that use csp for test-case generation[10,18]. by inspecting the object-model methods that are hidden in both top level interfaces available, we are able to tell exactly how, and under which circumstances, one can improve the compactness or efficiency of compiled csp ltss.



they represent a compiled state machine, and are the core functionality of fdr: refinement checks of ltss compiled via a session object, usually from a csp specification. that is, the underlying fdr server is generic enough to represent and model check not only csp, but a particular category of ltss. obviously, the operational semantics of csp fits into this category. each ism implements three functionalities:(i) lts description;(ii) lts structure; and(iii) lts analysis. the lts description is a database containing the process name, its original ascii script, and the calculated alphabet of events used by the process it describes. more interesting is the lts structure, which contains a detailed characterisation of the lts, such as the refinement search root node, the initial events of each lts node representing outgoing transitions, the next nodes reached through particular events,(minimal)



once one model checking algorithm has been selected for a compiled ism, the fdr server returns a hypothesis object. it represents an assertion about an ism. a hypothesis object generates debugging information(or success reports) allowing the investigation of the cause of a refinement failure(or successful check). it also contains simple state defining whether the check has been performed or not, what the checking status is, and which parts of the lts structure will affect the check.



it has detailed descriptions of witness(es) for a refinement failure. this information is separated in three functionalities:(i) debug context;(ii) debug tree; and(iii) behaviour of lts nodes and their children. a debug context is the result of testing the assertion a hypothesis object represents, and is present in the fdr gui as a separate debugging window. it contains three kinds of information:(i) participant processes;(ii) debug trees of each participant; and(iii) witness(es) containing the flawed behaviour of each participant. a debug tree represents the lts of the flaw(or correct) process together with its characteristic behaviour. it is represented in the fdr gui as tree views of the participant processes. although debug contexts can represent successful checks, behaviour objects are always related to refinement failures, and they contain detailed information about the acceptances(and refusals) of a particular lts after some trace has taken place. they represent the allowed behaviours a debug tree characterises. this appears in the fdr gui as small windows with contrasting information regarding acceptances(or refusals) at particular debug tree nodes. for successful checks, no debugging information is available to the user.



it represents a compiled csp process as an lts. they are based on the automata theory described in. apart from the trivial methods about the textual script this object represents, there are three sets of methods related to structure[17, chapters 4, 8], algorithms[14,12], and compression. the structural methods are given below: transitions: returns the lts transitions. each transition is represented by three numbers between braces(e.g.,{10 3}), where the source node index(1) reaches the target node index(3) through an event number(0) placed between the two node indexes. this event number can be used in the event method to retrieve



divergences: returns the divergences of each node index as a list of boolean values. thus, if the lts contains four nodes, all of which are not divergent, the method returns a list of 4 boolean values set to false(or 0). for checks outside the failures-divergences(fd) model, this list is not calculated and every node index is assumed as not divergent.



afters(int, str): returns a list of target node indexes reached from the source node index through the event name in the process alphabet. as ltss are not complete, this is a partial method because not every node has transitions through every event. thus, in such(partial) cases, the method returns an empty set of nodes. the same empty result is returned for terminal nodes as well, such as those representing deadlock(e.g., stop), or successful termination(e.g., skip).



the inspection methods are the main methods one usually calls at the beginning of a refinement session. firstly, the current session details, such as known processes and assertions, is logged. next, a given list of processes(with actual parameters if needed) is compiled into isms, and detailed information about their structure are logged. after that, three hypotheses for determinism, and deadlock and livelock freedom are automatically generated and checked. finally, if these hypotheses are false, then information about the debug context they contain is logged. this includes not only the debugging context, but also all behaviours and debug trees in case of a refinement failure. if the script contains assertions about refinement checks, or if the user wants to perform any specific refinement, then the created hypothesis objects can be inspected in the same way. alternatively, if the script has no parameterised process that demands actual parameters instantiation, no process list is needed and all processes from the current session are inspected automatically.



compileprocinmodel(file,session,str,m): compiles the given process in the given model from a fdr session object printing the results on the given file handle. parameterised processes must be instantiated, otherwise the fdr server crashes. it returns the created ism object to the user.



as a result of executing the inspection methods, four files are created and named skipx.csp.exp, where x will be either a, b, c, or d. they contain detailed information about each process ism, as well as the 3 default hypothesis about determinism, and deadlock and livelock freedom already checked. if any of those checks fail, additional information about debug contexts, debug trees, and behaviours are also logged. finally, if one wants to perform operations over the fdr objects returned, it can be done directly by manually calling methods. the object name to use is the one fdr returns. thus, we could type a command, such as



in this paper we present a new interface to the csp refinement model checker fdr, which extends one of the available user interface apis. it allows extended control over debugging information, as well as investigation of hidden features of the lts data structure used to represent compiled csp specifications for refinement model checking. with this tool it was possible to carefully study the operational semantics of csp, hence develop an operational semantics for a concurrent language similar to csp. it has also been used by other people in test case generation using csp and fdr, and java code generation tools for this new concurrent language.



the main contribution of the fdr explorer api is that it enables better integration between csp script generation tools, as well as improved information to the user. this appears as the ability to investigate witness information at different points of the lts, or reasoning about more space-efficient representations of csp processes. these functionalities are not available from the original fdr interfaces. this also follows the trend of tool integration set out by one of the uk grand challenges in computer research.



finally, we explain how we transformed the available csp lts transitions into a graph notation format with visualisation tool support. this is the first step towards integration with a visualisation tool for csp. going further, one could provide the translation the other way round, hence enabling drawing graphs that would formally represent csp specifications and could be directly passed to fdr for refinement checks.



