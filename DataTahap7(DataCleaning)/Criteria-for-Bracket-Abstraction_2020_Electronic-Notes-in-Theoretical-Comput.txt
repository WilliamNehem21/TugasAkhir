a bracket abstraction is a syntactic operator to abstract variables in combinatory logic. there are different algorithms for different combinator systems. in this paper we present a recursive algorithm scheme, which generates a family of brackets abstractions, in which all the bracket abstractions referenced here are found. in addition, theorems with certain hypotheses are enunciated about the scheme, which state that the resulting abstraction operators, has one property or another. thus forming a criteria for designing bracket abstractions that comply with a given property.



the algorithms h, fab, abf, sh are not particularly efficient in terms of the size of the term[x]at with respect to the size of t. for example, fab and h are exponential and abf is o(n3), so they are not useful for implementing functional languages. in[10, 11], the size of[x]at for different algorithms is analyzed.



in the bracket abstraction algorithms presented in the introduction, it can be seen that[x]p depends on some sub-terms of p. and the position of the sub-terms to use depends on how it is p. for this reason it is convenient to formalize the concepts of positions and replacement in a subterm position.



each of the functions ti are homomorphisms with respect to[z|x]. for example in sh, is fulfilled t5(p, q, r, w)[z|y]=(bpw)[z|y]= bp[z|y]w[z|y]= t5(p[z|y], q[z|y], r[z|y], w[z|y]). for the rest of the ti, similar proves can be made.



