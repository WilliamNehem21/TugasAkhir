fire used appropriately has provided immeasurable benefits to humanity. however, we usually observe instances in which fires have spread out of control burning large areas of vegetation in different continents around the world. this type of phenomenon is known as wildfire.



currently, ess has two operating versions and one more is under development. in the first implementation of the method, the pea has used a scheme of unique population and parallel evaluation. in the second operational version of the method, the level of parallelism of pea has been increased with a scheme of multiple populations and migration[11,21] called ess with island model[17,18](essim). finally, there is an under development version of ess that uses differential evolution(de) as an optimization method, called differential evolutionarystatistical system(dess).



in the next section a brief description and classification of peas related to implemented versions of the ess are provided. next, a detailed description of the operation mode of ess and ess-im is presented. the details of the experiments performed to carry out the comparative study are also provided, the work environment is described, and then the results are presented. finally, conclusions and future work are presented.



evolutionary metaheuristics are optimizing algorithms that use a set of candidate solutions(usually called population) to create new search points within a space of solutions. these methods are often inspired by nature elements, such is the case of evolutionary algorithms(eas), which are based on the natural evolution theory of survival of the fittest. eas have been successfully applied to solve different optimizing problems in several areas of science.



each individual has a fitness value that represents the quality of the solution. in addition, the eas must guarantee that individuals with higher fitness values are more likely to reproduce, so they can take part in generating new solutions. this is achieved through the application of the aforementioned operators(crossover, mutation and replacement).



previously processed by os-worker must have been sent from the master node to the respective workers. the master node also performs the remaining operations of the pea(i.e., population generation, individuals selection, crossover, and mutation) and communication functions with each of the workers(tasks performed through the os-master stage). once the population reaches a certain level of fitness, it is entered into the calibration stage(cs-master). at this stage, the evolved population feeds a sub-stage called statistics stage(ss, see[7,8]). the output of ss is a probability map that is used in the sub-stage skign(search key ignition kign value) to determine the fire behavior pattern. the value found, kign, is used to make a prediction for the next time instant(ti+1). the fitness evaluation of the probability map is carried out in the stage that implements the fitness function(ff). in addition, the output of skign is combined to the probability map provided by ss to generate the prediction(pfl) at the fire prediction stage(fp).



as can be seen, ess is based on a master/worker model, in which the master process distributes individuals to the workers in each iteration. the workers are responsible for the parallel fitness evaluation of individuals and then for returning the results to the master. after, the whole population is evaluated, the master node evolves the population, includes the partial results and performs the prediction for the next time step.



in level 1(l1) the algorithm responds to an evolutionary coarse-grained multipopulation algorithm. this level consists of a monitor node responsible for controlling the whole prediction process by communicating with each of the islands. the monitor node carries out the initialization of the islands by sending the necessary information to each of them to perform the simulation in parallel. meanwhile, the low level l2 responds to a master/worker model as it is composed of a master node(in charge of controlling the operation of the island) and n workers. as in ess, the workers are responsible for evaluating the fitness of the population. however, in each execution of ess-im are executed in parallel j instances of l2.



are idle. it is worth mentioning that each island will be composed of at least two processing units. however, the islands usually use a greater number of nodes, and therefore, the number of idle processors or cores in a cluster can be considerable.



as mentioned earlier, ess and ess-im focus its operation in parallel evolutionary algorithms, this implies that both methods have non-deterministic behavior, because the individuals of each population are generated using stochastically generated seeds. therefore, in order to make a fair comparison between both methods, a set of 30 different seeds were used. that is to say, the three cases of real fires were executed 30 times each for each method. the experiments were performed in this way with the aim of determining an average of results for each experiment and each method.



by nature, there are threats to validity in any empirical study of this type. in this section, some threats and the way in which they have been addressed are discussed. it should be noticed that whenever a comparative study is made, it is of crucial importance to ensure that it is as reliable as possible. therefore it is necessary to analyze such threats to ensure that the conclusions are not wrong. one of the important factors is associated with the inherent stochastic behavior of pea used in both methods. therefore, for each method were carried out 30 runs for each experiment, just as discussed earlier. another potential source of bias is presented in the parameter settings used in each method, and the possibility that it may favor or harm the performance of one or both methods. in this case, we decided to take a standard set of parameters for both ess and ess-im so as not to benefit any particular method.



it is important to say that such analysis has been carried out in terms of quality of prediction and performance benefits in a parallel/distributed environment. the results show that the new implementation, ess-im in cs-monitor-1 mode, provides great improvement in quality of prediction. however, this result is slightly overshadowed by the decreased speed-up obtained in comparison with other operation modes of ess-im, which prioritize the processing time to the quality of prediction.



further studies will focus on considering alternatives to optimize the use of computational resources, with the aim of improving the performance gains in the mode that provides the best quality of prediction levels, i.e. ess-im in cs-monitor-1 mode. in addition, other metaheuristics will be evaluated, as is the case of dess, which is an ess version under development that incorporates differential evolution as optimization method.



