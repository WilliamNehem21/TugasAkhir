the rest of the paper is organized as follows. we discuss related works in section 2. in section 3, we present a novel join algorithm based on column-oriented databases and parallelism. the query performance of the proposed algorithm is compared with traditional join algorithms for sensor network in section 4. the conclusion is given in section 5.



the join region near the base station. one approach is the synopsis join (snj) algorithm [3]. the key idea is to use synopsis of sensor readings to prune those readings that are irrelevant to join results. another technique is the record filtering using bit-vector (rfb) algorithm [4]. the rfb algorithm uses bit vectors produced after semi-join is performed to prune unnecessary data before shipping data from each node to the join region.



important optimization techniques exist for column-oriented databases. materialization strategies, both early and late, are important during query reconstruction [5]. the invisible join [6] extends previous work on improving star schema queries using a column-oriented layout. a join algorithm based on column-oriented database was proposed to perform join processing of data in sensor networks [7]. the algorithm, which we refer to as em, is based on an early materialized strategy in column-oriented database.



in this paper, we assume that the sensor data are stored in a column-oriented database rather than a relational database. column-oriented databases store data column-wise (in columns) rather than row-wise (in rows) as in relational databases. column-oriented databases are more efficient for read-only queries since they read from disk only those attributes (or columns) accessed by the query. there are two materialization strategies, early and late, in column-oriented databases. materialization, also known as tuple stitching or tuple construction, is a process of combining single-column projections into wider tuples and is needed to output row-style tuples to support standards-compliant relational database interface such as odbc and jdbc. in early materialization strategy, each column is added to the intermediate query result to form tuples if the column is needed. in late materialization strategy, the accessed columns do not form tuples until after some part of the query plan has been processed.



the proposed algorithm is a distributed algorithm involving the r region, s-region, join region and the sink node. the r (s) region contains a number of sensor nodes, each storing a part of relation r (s). in addition, the join region f also contains several sensor nodes that collaborate to perform distributed join. the join algorithm, a late materialized strategy, executes in three phases, namely the selection phase, the join phase, and the result phase. in the selection phase, the join column values are sent to the join region f initially. in the join phase, a semi-join is performed between the join columns of r and s to ship only qualified column values from r region and s region to the join node f. in the result phase, the qualified column values of r and s are stitched together to construct tuples and shipped to the sink node.



the result phase of the proposed algorithm is composed of two steps. in the first step, at each node in f, the position list and the bitmap in the first step of the join phase is used to stitch together the column values of r and s to construct tuples. the tuple stitching is performed in parallel at each node in f. we assume that a metadata is present to map column values of r and s given the position list and bitmap. in the second step, the constructed tuples from each node in f are shipped to the sink node as the query result.



since the sensor nodes in the sensor network are independent, it provides a natural platform for a shared- nothing architecture to perform parallel processing. it is straightforward to convert the distributed algorithm just described to a parallel algorithm if we assume a shared-nothing architecture for the sensor network. the hash-based distribution scheme ensures that tuples with same join attribute value are always sent and joined at the same join node. this ensures that both join and tuple stitching can be performed in parallel at each designated node.



to test the cost-effectiveness of the join algorithm proposed in this paper, a performance analysis is made with the existing snj, rfb and em algorithms. snj and the rfb algorithms are based on relational databases while the em algorithm uses early materialization strategy in column-oriented databases. the different algorithms were compared in terms of the communication cost which is the number of bytes transmitted to various nodes to get the join result.



in order to simplify network traffic analysis, we assumed that no failure occurs during message transmission. the size of the message and the tuple was assumed to be 40 bytes each. for the given query, the size of the resulting join tuple (i.e. query result) was assumed to be 30 bytes. for column-oriented database, the size of each column was assumed to be 10 bytes.



we did not conduct experiments on the query response time for the different join techniques for sensor networks. the reason is because we believe that the most important performance criterion for sensor networks is the total communication cost. however, it is easy to observe that the query response time using the parallel version of our proposed algorithm is faster than the other algorithms that are not based on parallel computing. using our algorithm, the more sensor nodes are involved in query processing, the faster the query response time since the join and data shipment can be all done in parallel.



