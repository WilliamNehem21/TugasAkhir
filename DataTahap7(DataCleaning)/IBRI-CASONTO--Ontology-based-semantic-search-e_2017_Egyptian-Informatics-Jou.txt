the vast availability of information, that added in a very fast pace, in the data repositories creates a challenge in extracting correct and accurate information. which has increased the competition among developers in order to gain access to technology that seeks to understand the intent researcher and contextual meaning of terms. while the competition for developing an arabic semantic search systems are still in their infancy, and the reason could be traced back to the complexity of arabic language. it has a complex morphological, grammatical and semantic aspects, as it is a highly inflectional and derivational language. in this paper, we try to highlight and present an ontological search engine called ibri-casonto for colleges of applied sciences, oman. our proposed engine supports both arabic and english language. it is also employed two types of search which are a keyword-based search and a semantics-based search. ibri-casonto is based on different technologies such as resource description framework(rdf) data and ontological graph. the experiments represent in two sections, first it shows a comparison among entity-search and the classical-search inside the ibri-casonto itself, second it compares the entitysearch of ibri-casonto with currently used search engines, such as kngine, wolfram alpha and the most popular engine nowadays google, in order to measure their performance and efficiency.



ontology gets over from the issues of rdfs that makes this concept the nearest one to the semantic search. actually, the term ontology has been used for several years ago by the artificial intelligence and knowledge representation community. however, nowadays it is becoming a part of the standard terminology of a much wider community including information systems modeling. the concept of ontology is borrowed from philosophy, where it means a systematic account of existence, for instance ontological question like what are the fundamental parts of world and how



there are three types of ontology based on the degree of conceptualization into three types, which are top-level ontology, domain ontology and application ontology. each type have its range and capacity of information. for instance, the top-level ontology depicts very general notions, in which they are independent of a particular problem or domain. in addition, they are applicable across domains and includes vocabulary related to things, events, time, space, etc.



domain ontology represented data in a particular domain, and provides vocabularies about concepts and their relationships or about the theories governing the domain. moreover, it is rich of axiomatic theories whose focus is to clarify the intended meanings of terms used in specific domains. it is designed to not only fit the needs of specific community but also provides terminological structure that can share between different communities. therefore, the reference ontology sometimes called the foundation ontology. it helps developer to avoid build ontology from the scratch by using other references of ontology that built before in order to implement minimal modifications on it. however, the application ontologies could be generating from the reference ontologies.



there are different types of search nowadays, the classical search and semantic search. each type has its own view or technique of searching. the classical search is focused on popularized keywords, where it means the users can submit a set of keywords to the search engine and a ranked list of information is returned back to the user. there are different sites and applications that support the keyword-based search engines such as google, gmail and yahoo. the second type of search is a semantic search that clarifies the lack in the concept of keyword semantics in the previous examples and the classical search; because they give many irrelevant and inaccurate outcomes to the users. it is so far from the concept of understanding searcher intent and the contextual meaning of the user query. thus, it is a challenge that has been addressed and solved by many semantic search engines.



since there is a few of the ontological search engines that supports arabic language. it could be traced back to the natural language processing and gaps/challenges to solve syntactic search and produce synonym meaning of words. thus, this paper is focused on implementing the ontological search engine based on the ontological graph that is called ibri-casonto. although, ibri-casonto supports both arabic and english languages, we shall put our attention to discuss the arabic search in this paper. it uses both the keyword-based search as well as the semanticsbased search which also known as the ontological search.



the rest of this paper is structured as follows. the second section introduces the researcher efforts in order to build the ontological search engines, their techniques, domain, languages support, for instance, wolfram-alpha, kngine and google. the third section discuss the arabic language and its related to the ontology concept. whereas the fourth section highlights the ontology components. section five and six present our proposed engine, ibricasonto, in detail and the experimental evaluations that test the engine with simple and complex queries and compare the proposed engine with other common and popular semantic engines. at the end, section seven concludes the paper and gives some suggestions in order to improve the ibri-casonto in the future.



ontology is considered as a portal to make the engines more intelligent and powerful. it is a respectful mission for the current generation of the web which known as web 3.0 and the future mission for web 4.0. ontology is powerful and has a correct and reliable data that stores in its repositories that called the ontological graphs. it enables user to get and retrieve a direct answer without any complexities.



arabic language is considered as integral to the vast majority of the population of the middle-east and the rituals of muslims, because it is their mother tongue and the religious language of all muslims of a variety of ethnicities throughout the world. it is also a semitic language that has around 28 alphabets[19,20,29,21]. moreover, arabic is also one of the six official languages of the united nations and the mother language of more than 330 million people in earth.



classes are the core component of most ontologies. according to the different languages, which is used to implement ontologies, it is called a concept or a type. classes represent a collection of individuals that share common characteristics. sometime one class could be a subclass to another class. for example, if the class



college is a subclass of the class organization. then, every individual of the class college is also be individual of class organization. in addition, classes could share relationships that will describe how the individual of one class relate to another.



individual represents the objects of domain of interest. it is called instance of class. ontology is described the individual so that, it is considered as the base unit of ontology. individual could represent concrete objects like people, machine, or abstract object like article or function.



second step, determine the ontology representation language and the editor. we use the owl to develop our ontology that is more compatible with the world wide web. in addition, owl is based on the main elements of rdf in order to add more vocabularies to describe classes and properties.



fifth step, we define the instances for each class, which is called individuals. individual is considered as a member of the class. for instance, the class dean have only one individual that called dean. besides that, ibri-casonto instances reach to more than 1000 individuals.



a key feature of many triple-stores is the capability to do inference. it is essential to note that a dbms typically presents the capacity to deal with concurrency, security, logging, recovery, and updates, in addition to loading and storing data. however, some of the triple-stores offer all these capabilities while others not.



and retrieval of triples through semantic queries. a triple is a data entity composed of subject-predicate-object. there are different types of triple-stores such as jena sdb, jena tdb, owllim, sesame and others. in ibri-casonto, we decide to use the jena tdb because it is a component of jena for rdf storage and query. it supports the full range of jena apis. besides, tdb can be used as a high performance of rdf store on a single machine. it also includes automatic protection against multi-jvm usage, which prevents this under most circumstances. on the other hand, we decide to use the mysql as rdbms for the keyword searching purpose.



we use the tdb indexing which is built on the fuseki for jena tdb dataset. many of the persistent datasets in the tdb triplestore use a custom implementation of threaded b+ trees. the tdb triple-store implementation only provides for fixed length key and fixed length value. in addition, there is no use of the value part in triple indexes. the threaded nature is referred to the meaning of the long scans of indexes proceeds without needing to traverse the branches of the tree.



lucene is used for indexing the mysql database. the indexing process in lucene consists of a chain of logical steps after gain access to the original content you need to search. the steps are acquire the content, build content, analyze documents and index documents.



semantic searching of ibri-casonto is supported by apache jena fuseki. it provides a sparql server that can use the jena tdb for persistent storage. in addition, it provides with the sparql protocols for query, update and rest update over the http. moreover, the sparql query offers the searching over the triple-store and retrieve the needed results.



the user interface is one of the most important parts of any system. our ibri-casonto system provides with a usable interface that enables users to interact with the engine easily. thus, a powerful system with a poorly designed user interface has little value that could put the system in the trap.



recall: it is referred to the fraction of the documents that are relevant to the query which are successfully retrieved(i.e. sum of all true positives and false negatives). it is known as a lexical recall or a correct recall(rc):



precision= numberoftotalrelevant/numberoftotalretrieved accuracy: this metric gives a good overall view of the competency of a search engine and how accurate it is. it is computed by dividing the number of correct outputs(i.e. the sum of true positives and true negatives) by the total number of queries.



