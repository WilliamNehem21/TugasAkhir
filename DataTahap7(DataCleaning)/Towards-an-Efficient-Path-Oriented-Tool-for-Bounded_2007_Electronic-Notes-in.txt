the existing techniques for reachability analysis of linear hybrid automata do not scale well to problem sizes of practical interest. instead of developing a tool to perform reachability check on all the paths of a linear hybrid automaton, a complementary approach is to develop an efficient path-oriented tool to check one path at a time where the length of the path being checked can be made very large and the size of the automaton can be made large enough to handle problems of practical interest. this approach of symbolic execution of paths can be used by design engineers to check important paths and thereby, increase the faith in the correctness of the system. unlike simple testing, each path in our framework represents a dense set of possible trajectories of the system being analyzed. in this paper, we develop the linear programming based techniques towards an efficient path-oriented tool for the bounded reachability analysis of linear hybrid systems.



polyhedra computation, and their algorithm complexity is exponential in number of variables in the automata. in recent years, the bounded model checking has been presented as a complementary technique for bdd-based symbolic model checking, whose basic idea is to search for a counterexample in the model executions whose length is bounded by some integer k. several works[6,7] have been given to check linear hybrid systems using the bounded model checking technique. in these techniques, the model checking problems are reduced into the satisfiability problem of a boolean combination of propositional variables and mathematical constraints, but their experiment results show that the length of the checked model executions is still far from the practical problem size.



as the existing techniques cannot check all the paths for reachability analysis when attempting analysis of problem sizes that are of practical significance, a complementary approach is to develop an efficient path-oriented tool to check one path at a time where the length of the path being checked can be made very large and the size of the automaton can be made large enough to handle problems of practical interest. this approach of symbolic execution of paths can be used by the design engineers to check important paths and thereby, increase the faith in the correctness of the system. unlike simple testing, each path in our framework represents a dense set of possible trajectories of the system being analyzed. in this paper, we present the linear programming based techniques towards development of an efficient path-oriented tool for the bounded reachability analysis of linear hybrid systems.



the paper is organized as follows. in next section, we define the class of linear hybrid automata considered in this paper. in section 3, we use linear programming to present our solution for the path-oriented bounded reachability analysis of linear hybrid automata. section 4 presents some techniques to reduce the size of the linear programs corresponding to the paths that we are checking. the tool prototype and the case studies are described in section 5. we give the conclusion in the last section.



3.1. thus, in this case we can decompose the linear program corresponding to a path checking into two smaller linear programs. the resulting linear programs can be recursively decomposed by the same technique until the technique can no longer be applied.



phaver can not give any result when k= 40 after running for 20 hours, but even when k= 150 our tool can give the result in a tolerable duration. notice that for fairness, we use the unfolded path as the input of phaver for avoiding it doing the full reachability analysis. because of performing expensive polyhedra computation, the algorithm complexity of phaver is exponential in the number of variables of an automaton, which gives an intuitional explanation for the experiment result.



we would like to thank professor edmund m. clarke and the anonymous reviewers for their valuable comments and suggestions. the first and third authors are supported by the national natural science foundation of china(no.60425204, no.60233020), the national grand fundamental research 973 program of china(no.2002cb312001), and by the jiangsu province research foundation(no.bk2004080). the second author acknowledges the support of a graduate fellowship from the computer science department at carnegie mellon.



