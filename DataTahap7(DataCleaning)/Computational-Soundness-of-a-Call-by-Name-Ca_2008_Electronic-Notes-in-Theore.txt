in our earlier work[10,7], we proved computational soundness of a non-confluent call-by-value calculus of records similar to the one considered here. we developed and used a diagram-based proof method based on properties that we called lift and project. this approach has been further extended and generalized to a collection of abstract diagram-based proof methods in. however, the system considered 2 it is possible to add hidden components to records that cannot be referenced from outside of a record(see). records then are identified up to renaming of hidden labels. however, here we focus on computational soundness of mutually recursive components which is independent from the issue of hidden labels.



lemma 3.4 if e1{r1}= e2{r2}, where r1, r2 are redexes, then e1= e2 and r1= r2. if m= e1{l1}= e2{l2} then e1= e2 and l1= l2 and m/= e{r} for any e and r.



it follows from lemma 3.4 that there is at most one evaluation step in any record component. for instance, if a component is of the form e{r}, i.e. it has a term evaluation redex, it may not have a label in an evaluation context.



introduced in). two elements of the same class have the same meaning(however, they may be further distinguished by supplying a context that uses them). for instance, at the term level it is reasonable to make constants 2 and 3 be in different classes since their meaning is clearly different. however, it is common to group all lambda abstractions in the same class since a function by itself is not distinguishable from any other function until it is applied.



not mean that replacing an abstraction by any other one may be considered meaning preserving. one can always distinguish two semantically different abstractions by considering them in a record with a term that applies the abstraction to an argument. a transformation is provably meaning preserving if its results are the same no matter what other components appear in a record. since we can assume that any abstraction bound to a label is applied to arbitrary terms in other components, transformations must preserve the actual behavior of abstractions. formalizes this notion via record contexts which we do not present here due to lack of space.



lemmas 4.1 and 4.2 guarantee that the outcome is well-defined since every record either has a unique normal form or diverges on all evaluation paths(we identify a label bound to a black hole with divergence). the outcome formalizes the notion that the meaning of a term is the result of its evaluation.



applicability of other diagram-based methods. the lift and project method has been extended and generalized in. while it is possible that a form of the approach presented there, known as lift/project when terminating(or lpt), is applicable, we have not been able to construct such a proof.



meaning preservation of the term reduction. the meaning preservation property of a term reduction can be proven using the lift and project approach with the machinery of marked redexes and residuals. the proof is similar to that for the call-by-value calculus in. see for details.



meaning preservation of substitution. we show that substitution preserves the outcome of a record. a key idea of the proof is to use the efficient evaluation strategy(see definition 4.4) to guarantee that each component is only evaluated only once, the first time it is needed.



we have proven that the call-by-name calculus of recursively-scoped records is computationally sound. our system captures the essential features of mutually recursive components. we plan to study applicability of our proof method to more complex systems with possible cyclic dependencies, such as letrec calculi and more sophisticated systems that model modules and linking. we will also investigate how the context method compares to other methods of proving computational soundness.



