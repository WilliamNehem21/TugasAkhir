we demonstrate the application of the synthesis method by means of two examples. the first is a generalized buffer from ibm, a tutorial design for which a good specification is available. the second is the arbiter for one of the amba buses, a characteristic industrial design that is not too big. previous work on synthesis has only considered toy examples such as a simple mutual exclusion protocol, an elevator controller, or a traffic light controller[8,16,10]. this is the first time realistic industrial examples have been tackled.



this paper is a companion paper to. the current paper shows the details of the genbuf case study, whereas focuses on the amba example. this paper gives a detailed description of the algorithm we developed to construct a circuit from a bdd, describes some extensions that were not included in, and shows a major improvement in the amba example.



the paper continues as follows: in 2, we describe how to synthesize a circuit from specifications. in section 3, we describe the generalized buffer, give its formal specification, and show the results of synthesis. in section 4, we do the same for the amba ahb arbiter. we discuss lessons learned in section 5 and present our conclusions in section 6.



we briefly review the results presented in on synthesizing gr(1) properties. we are interested in the question of realizability of psl specifications(cf.). assume two sets of boolean variables x and y. intuitively, x is the set of input variables controlled by the environment and y is the set of system variables. realizability amounts to checking whether there exists an open controller that satisfies the specification. such a controller is a mealy machine that, at any step, reads values of the x variables and outputs values for the y variables.



initial state, and(3) a formula of the form always eventually!(b) to represent the fairness condition, where b is a boolean formula representing a set of states.(an example can be found in section 3.3.) it should be noted that even with these restrictions, all possible(finite state) designs can be expressed as a set of properties. we reduce the realizability problem of a psl formula to the decision of the winner in an infinite two-player game played between a system and an environment. the goal of the system is to satisfy the specification regardless of the actions of the environment. a game structure is a multi-graph whose nodes are all the truth assignments to x and y. a node v is connected by edges to all the nodes v'



we solve the game, attempting to decide whether the game is winning for the environment or the system. if the environment is winning the specification is unrealizable. if the system is winning, we synthesize a winning strategy. this strategy, a bdd, is a nondeterministic representation of a working implementation. formally, we have the following.



and one based on computing cofactors. the approach of yields a circuit that can generate, for a given input, any output allowed by the strategy. to this end, it uses a set of extra inputs to the combinational logic. note that this is more general than what we need: a circuit that always yields one valid output given an input. we will see later that this generality comes at a heavy price in terms of the



genbuf consists of a controller, a fifo, and a multiplexer. we synthesize the controller from its specification, while assuming that the implementation of the fifo and the multiplexer are given. fifos and multiplexers are standard pieces of logic and synthesizing them from specifications would make the task unnecessarily complex, especially because they involve 32-bit data buses.



initially, the buffer we synthesized from the specification above ignored the fifo. instead it would wait until it could send data to a receiver before accepting data from a sender. hence, we added the following property, which ensures that the fifo is used.



the ahb is an on-chip communication standard that connects such devices as processor cores, cache memory, and dma controllers. the bus allows up to 16 masters to communicate(read or write) with up to 16 clients. the bus consists of a data bus and an address bus. at any time, only one master is allowed to access each of the buses. access to the address bus is controlled by the arbiter, which is the subject of this section.



in our initial experiments, we were only able to synthesize arbiters for up to four masters, for larger arbiters the synthesis algorithm ran out of memory when building the strategy.(2gb of memory were available.) after rewriting the specification, without changing its meaning, we can handle up to ten masters. the time



the automatically generated arbiter implements a round-robin arbitration scheme. this can be explained from the construction of the strategy in the synthesis algorithm, but it is also the simplest implementation of a fair arbiter. we have validated our specification by combining the resulting arbiter with manually written masters and clients, with which it cooperates without problems.



the effort for a manual implementation of a parameterized circuit usually does not depend strongly on the parameter.(the parameter is the number of senders in case of genbuf and the number of masters in case of the arbiter). the same is not true for automatic synthesis: the time for synthesis and the size of the resulting circuit grow with the parameter. unfortunately, the generated gate-level output is complicated and cannot easily be changed by hand.



finding a small implementation for a given specification is hard. a specification corresponds to a(possibly infinite) set of open controllers that implement it. synthesis proceeds in two steps. first, the algorithm of prescribes a set of flipflops and constructs a strategy that corresponds to a finite(but typically large) set of combinational blocks that implement a correct open controller. second, we must pick one controller with a small representation from this set. not every small implementation that is allowed by the specification survives step one. even if it does, it is hard to find a small circuit from among the ones allowed by the strategy in step two. we are researching methods to improve each step and we expect that we will be able to significantly reduce the size of the resulting circuits.



on the upside, the resulting psl specification is short, readable, and easy to modify, much more so than a manual implementation in verilog. the synthesis algorithm was also a excellent tool to get the specifications consistent and complete. although the construction of the specifications was sometimes bothersome, we doubt we would have managed to write a complete and consistent specification without the synthesis tool.



have made it applicable to realistic examples. this paper, together with its companion, presents the first time that real-life blocks have been synthesized from their specifications. the circuits that we obtain are quite large, but the approach is still young and only a few avenues for optimization have been pursued. we attempted to generate circuits using an approach of. a second attempt using cofactors yielded circuits that are an order of magnitude smaller, and optimizations to that approach yielded a significant improvement. we expect that future research will yield further large improvements, making automatic synthesis a real alternative to manual coding of some types of circuits.



