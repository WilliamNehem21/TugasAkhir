the main contribution of this paper includes an algorithm to discover the performance anomaly behavior and identify bottlenecks in the distributed application using sdn. the proposed method monitors the application and network infrastructure performance in real-time without prior knowledge about the running application or the need for application instrumentation. the sdn controller collects data from various network switches and calculates the following performance metrics:(1) for the application, we calculate response time, throughput, and session number per application tier,(2) for the network, we calculate packet loss, delay, and available bandwidth per network link.



identify the root cause of the bottlenecks using the multi-class support vector machine(mcsvm) algorithm that decides the problem is due to network problems(packet loss, delay, or bandwidth) or an end-host problems. the algorithm enables selective monitoring only on the switch ports related to this application traffic to minimize the collected data and accelerate the identification process. finally, the algorithm notifies the administrator of the source of the bottleneck to take corrective action.



the rest of this paper is organized as follows. section 2 provides an overview of sdn technology and application performance detection methods. section 3 presents some previous work about anomaly detection methods of the distributed application. section 4 describes the design of the proposed algorithm. section 5 discusses and analyzes the simulation results. finally, section 6 concludes the paper.



management of network resources. it separates the network control plane of network devices from the underlying data plane that forwards network traffic. the sdn controller is the core element in the sdn technology that centrally manages the network devices to forward the traffic flow using the packet header information, as mac address, ip address, port number, protocol type, and much other information. while in traditional network architecture, individual network devices make traffic decisions using the destination ip address for routing packets between ip networks and the destination mac address for switching packets in lan networks.



monitoring of applications using network traffic relies on capturing traffic information and analyzing it to assess its performance. these methods are classified into two techniques.(1) passive monitoring methods observe the transmitted traffic across network nodes. these methods do not affect network performance as they do not inject additional network traffic and are commonly used in the operational data center network. however, they need to install multiple monitoring points that are difficult to implement, and it may take a long time to discover silent applications.



(2) active approaches inject packets into the network or modify the packets to monitor the performance. this additional load affects the accuracy of the measurements and may cause network overload. this method has a lower false-positive rate; however, it cannot be used in the production dc because it may degrade its performance.



chowdhury et al. focused on the trade-off between monitoring accuracy, timeliness, and network overhead. the proposed model supports various monitoring objectives like performance, fault-tolerance, and security. but their model did not correlate between the network and the performance metrics of the running application. they did not suggest a method to calculate the normal value of the performance metrics to detect anomalies.



peng et al. proposed a flow detection method based on the sdn to detect and classify distributed denial of service(ddos) attacks using the double p-value of the transductive confidence machines for the k-nearest neighbor algorithm. granby et al. proposed a centralized sdn-based platform to detect the dc anomalies and mitigate the limitations of existing distributed monitoring techniques by reactively identifying threats in realtime.



suarez-varela and barlet-ros proposed a scalable flow monitoring and classification solution for openflow switches using a sampling-based method. for the monitoring process, the sdn controller installs a set of rules in the network switches to enable traffic flow sampling. the dc switches match the incoming packets to check whether they are part of the flow monitoring entries. if it matches, the packet counters are updated. the flow classification method uses a combination of deep packet inspection and machine learning techniques, focusing on web and encrypted traffic identification. elsaadawy et al. proposed a network monitoring approach using custom port detection techniques and compare the different switch port mirror methods like a port mirror, selective mirror, tunnel mirror, and truncated mirror using quantitative comparison.



tahari et al. proposed a synchronization mechanism for aggregating traffic flow statistics from distributed sdn controllers that manage the dc networks. the proposed solution consists of two layers; the first layer collects flow statistics from the network switches and sends them to a coordinator, in the second layer, to aggregate the flow information.



liu et al. presented openmeasure as a flow measurement and inference framework with continuous online learning to track the most informative network flows. they proposed two online learning algorithms for designing adaptive flow measurement rules: an algorithm based on weighted linear prediction and another algorithm that adopts the strategy used in multi-armed bandit problems.



yang and yeung proposed the lonely flow first(lff) algorithm to monitor network flows that pass through only a single switch to minimize the bandwidth consumed by monitoring traffic. they divide the dc switches into, with or without the lonely flows. also, they used a weight function to decide the polling order and cost of flow polling and defined the distance and the message overhead as two communication costs to decide whether to use poll-single or poll-all switches. the proposed method compared the cost of each switch group to decide the polling method, pollsingle messages method are used if the poll-all is a higher cost and vice versa until all flows are covered.



tang and haque proposed a resilient monitoring framework named remon that can efficiently recover from link failure by merging the network packet measurement with the aggregated network statistics to improve the measurement accuracy and minimize the measurement cost. their solution consists of three algorithms.(1) the weight assisted selecting(was) algorithm selects a group of switches to be monitored to minimize the monitoring cost and polls the flow statistics from those switches using the sflow protocol.(2) anchor assisted recovery(aar) and weight assisted recovery(war) algorithms and integrated them in the remon framework to provide measurement resiliency in the case of link failure.



rezende et al. proposed sdnmon as an extension module of the sdn controller to monitor the network devices in the data plan and improve the control plan information about the network topology. sdnmon can monitor the bandwidth and latency per port and flow. sdnmon exploits threads to collect selected port



shen proposed a monitoring method based on sdn to observe a selected group of the openflow switches to reduce resource consumption. the proposed method consists of two phases. 1) the monitoring phase selects the monitored switches according to the following steps: scans all network switches, counts their flows, sorts them according to their number of flows, and selects switches with the highest number of flows. at the end of this phase, the covered flows are removed from the unselected network switches. 2) the flow re-routing phase tries to combine switches with the lowest re-routing cost to re-route the flows covered by the selected network switches.



the proposed method evaluates the distributed application performance using the support vector machine technique(svm) to detect the anomalies and identify the root causes of bottlenecks based on sdn. the sdn controller collects statistics from the sdn switches, and calculates the performance metric for both the distributed application components and network devices. we calculate response time, throughput, and session number per application tier while calculating packet loss, delay, and available bandwidth per network link. we train the svm algorithm using the performance metrics data and build a baseline model for normal application behavior under varying network and end-host load.



the proposed method monitors the front-end server response time and classifies its performance as normal or abnormal using the one-class support vector machine(ocsvm) algorithm. we select the response time, as it represents the overall performance of the application and the network. if performance is classified as normal, it means that all application components and network devices function efficiently. otherwise, the performance has deviated from the baseline model. this means that a network device or application component is operating improperly. in this case, we initiate the multi-class support vector machine(mcsvm) algorithm to identify the performance bottleneck and discover the responsible application tier or the network device that degrades the overall application performance. a detailed explanation of all the modules will be covered in the following parts.



this module proposed a dynamic baseline model to evaluate the application performance metrics instead of using a static and fixed threshold value to classify the application performance. we build the baseline model using the svm model and train it using the performance metrics data. the performance metrics data is collected using a varying workload to simulate the real data center as load changes from time to time.



tions divided by the total number of predictions. as a performance measure, accuracy is inappropriate for imbalanced classification problems. the main reason is that the overwhelming number of the majority class will overwhelm the number of the minority class, meaning that even unskillful models can achieve accuracy scores of 90 percent depending on how severe the class imbalance happens to be. an alternative to using classification accuracy is to use precision and recall metrics.



(h). during the run-time, we inject an increase in packet loss at time 25 min, an increase in the delay at time 50 min, a decrease in bandwidth at time 75 min, and high cpu usage at time 100 min. each anomaly lasts for 10 s.



in this paper, we proposed a new sdn-based monitoring algorithm to detect the performance anomaly and identify the bottleneck of the distributed application in the cloud data center using the support vector machine algorithm. the sdn controller collects data from network switches and calculates performance metrics for distributed application components and network devices. these performance metrics used to train the svm algorithm and build a baseline model of the normal behavior of the distributed application on dc. the svm model detects performance anomaly behavior and identifies the root cause of bottlenecks in two steps.(1) the one-class support vector machine(ocsvm) classifies the response time performance of the front-end server as normal or abnormal.



the proposed algorithm tries to minimize monitoring overload on the network devices using selective monitoring techniques. finally, the algorithm notifies the administrator of the source of the bottleneck to take corrective action. the benefits of the proposed method, including it has a lower false alarm rate and monitors the performance of the datacenter infrastructure in real time without prior knowledge about the running application or the need for application instrumentation.



for future work, we plan to increase the collected metrics of the data center infrastructure and mainly focus on end-host parameters. extend this solution by testing it to monitor the big data processing application like map reduces framework. additional machine learning models will be included in the comparison.



