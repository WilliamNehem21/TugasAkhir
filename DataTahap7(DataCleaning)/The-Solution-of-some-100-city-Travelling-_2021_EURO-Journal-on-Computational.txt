1 ailsa h. land sadly passed away on 16 may 2021; for an obituary see which needs a slight correction: in contrast to the statement in, the euro gold medal was, according to the guidelines, awarded to ailsa land before 16 may 2021, not posthumously. this unpublished typewritten manuscript with her handwritten annotations was typeset anew. any editorial remarks are contained in footnotes, and the last two references[8,9] added by the editor-in-chief in compliance with the original citation style. publication of this historic document in ejco was kindly authorized by professor frank land, lse, the widower of a. land. the editor-in-chief is indebted to professors gilbert laporte and panagiotis miliotis for pointing out the existence of this manuscript as well as for making a complete version of it readily available.



having failed to find any violated two-matching constraints, the algorithm will resort to the method of integer forms. however, it has proved to be most satisfactory to defer this to phase iii, when all variables which could possibly enter the optimal tour solution are explicitly present in the lp. hence step 14 checks whether the program is in phase iii. if it is, go to step 18. otherwise:



after re-optimization, some constraints are purged from the record. constraints of type(4) are not purged if any of those in the whole set imposed at one time are not candidates for purging. no constraint is a candidate for purging if it is currently effective(satisfied exactly and present in the current basis). since the various records associated with the constraints are identified by pointers, purging constraints is not a very time-consuming operation.



at every basis change the new value of the determinant is examined. if it exceeded 1,000,000 the computation would stop(as it did for some problems in earlier versions of the program). in the problems reported here the determinant never exceeded 36,192.



the algorithm has run out of new constraints and the solution is still not integer. if phase iii has been reached, all possible variables are explicitly present in the lp and mif constraints will be tried next. otherwise a search will be made through the entire set of variables in the global routine to discover if any variables from the inactive set violate the dual conditions.



of variables to discover for each new variable whether it was one already present. the method used is to organize as many as possible of the special variables and variables non-basic at their upper bounds into ordered trees, so that every new variable can be immediately skipped over if either of its vertices is the predecessor of its other vertex in the tree. those few variables which will not fit into a tree are recorded in a separate list, and an identifier of how many times a vertex appears in this list ensures that the list is inspected only when necessary. the number of these surplus variables never exceeded 50 in the problems reported here.



an earlier version of the algorithm sometimes failed after several mif constraints were applied because the value of the determinant exceeded the limit set by the word size of the computer. this is a typical result of using an exact arithmetic version of a cutting plane algorithm for general ilp problems. however, an alteration in the criterion used to select amongst possible mif constraints has proved to be remarkably effective in the tsp case.(the effect of using the new criterion remains to be tested on other types of ilp problems.) 0.0 to 100.0. the distances between pairs of points are rounded to the nearest integer. thus the cost matrix consists of integer elements in the range 0 to 141. in fact only those distances corresponding to variables in the current active set are stored: the others are computed each time the global routine is entered.



