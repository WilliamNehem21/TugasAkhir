data schema transformations occur in the context of software evolution, refactoring, and cross-paradigm data mappings. when constraints exist on the initial schema, these need to be transformed into constraints on the target schema. moreover, when high-level data types are refined to lower level structures, additional target schema constraints must be introduced to balance the loss of structure and preserve semantics.



we introduce an algebraic approach to schema transformation that is constraint-aware in the sense that constraints are preserved from source to target schemas and that new constraints are introduced where needed. our approach is based on refinement theory and point-free program transformation. data refinements are modeled as rewrite rules on types that carry point-free predicates as constraints. at each rewrite step, the predicate on the reduct is computed from the predicate on the redex. an additional rewrite system on point-free functions is used to normalize the predicates that are built up along rewrite chains.



must conform, but they also dictate the well-formedness of data queries and update functions. generally, schema definitions consist of a structural description augmented with constraints that capture additional semantic restrictions, e.g. sql and xsd schemas may declare referential integrity constraints, grammars include operator precedences, vdm specifications contain datatype invariants.



data schema transformations occur in a variety of contexts. for example, software maintenance commonly involves enhancement of the data formats employed for storing or exporting application data. likewise, evolution of programming languages brings along modification of their grammars between versions. more complex schema transformations are involved in data mappings between programming paradigms, such as between xml and sql.



in previous work, we and others have addressed the problem of transforming schemas together with the data instances and queries that are coupled with them. we have shown that data refinement theory can be employed to formalize schema transformation as well as the transformation of the corresponding data instances. in combination with point-free program transformation, this formalization extends to migration of data processors including structure-shy queries and update functions. we have harnessed this theoretical treatment in various type-safe rewrite systems and applied these to vdm-sl specifications, xml schemas and queries[11,5], and sql databases[1,5].



the paper is structured as follows. we introduce the problem of constraint-aware schema transformation with a motivating example in section 2. we provide background about refinement theory and point-free program calculation in section 3. theoretical support about constraints representation and rewriting is provided in section 4. in section 5, we explain how this theory can be made operational in the form of strongly-typed rewriting systems implemented in the functional programming language haskell. we return to the motivating example in section 6 to demonstrate the application of our rewriting system to schema-aware hierarchicalrelational mapping. we discuss related work in section 7 and conclude in section 8.



in xml schema, such uniqueness and referential integrity constraints are defined by so-called identity constraints, using the key, keyref, and unique elements. more constraints could exist, such as that value is always non-zero, or that the name of an episode is different from the title of the corresponding series. such constraints could be expressed by general queries, e.g. using xpath.



in this section, we will explain how schema transformation can be formalized by data refinement theory and point-free program transformation. we start in section 3.1 by providing background on data refinement theory and its application to two-level transformation. in section 3.2, we recapitulate point-free program transformation and show how it can be combined with data refinement to model query migration driven by schema transformation.



point-free program transformation can be used after schema transformation to simplify the calculated conversion functions and to migrate queries from source to target type or vice-versa. in section 5.4 we will use point-free program transformation to migrate and simplify constraints during schema transformation.



in this section we provide theoretical support about constraints representation and rewriting. the formalization of constraints is presented in section 4.1. section 4.2 discusses how constraints can be added to data refinement laws to formalize the propagation and introduction of constraints during schema transformation.



in this section, we show how the enhanced data refinement theory of the previous section can be captured in a rewriting system, implemented as a strategic functional program in the functional language haskell. in section 5.1 we recall how typesafe representations of types and functions can be constructed using generalized algebraic datatypes(gadts). in section 5.2 we extend the type representation to constrained types. in section 5.3 and 5.4, we explain how rewrite systems can be constructed to transform such constrained types.



the view constructor expresses that a type a can be refined toa type b if a pair of conversion functions between them exist. note that only the source type a escapes from the type constructor of view. the rule type expresses that, when rewriting a type representation we do not replace it but augment it with representation functions to translate between the source and the target types.



the primary key constraints of the original schema are captured structurally, by the employment of finite maps. the foreign key constraint is captured by imdb inv, which specifies that the values in the domain of played are contained in the domain of show, i.e. the year and title(defined in the domain) of played are references to the year and title defined in(the domain of) show. this constraint is expected to be propagated through the schema transformation process.



a notion of xml functional dependency(xfd) was introduced by chen et al, based on path expressions. mapping algorithms are provided that propagate xfds to the target relational schema and exploit xfds to arrive at a schema with less redundancy. davidson et al present an alternative constraint-preserving approach, also using path expressions. in contrast, our constraints are not restricted to relational integrity constraints. we have expressed constraints as point-free functions, which can be converted automatically to and from structure-shy programs including path expressions.



barbosa et al discuss generation of constraints on relational schemas that make xml-relational mappings information preserving, i.e. isomorphic. nonstructural constraints on the initial xml schema are not taken into account. constraints and conversion functions are expressed in(variations on) datalog, which can be(manually) rewritten to normal form in a mechanical way.



berdaguer et al. employ a type annotation mechanism to capture constraints. as a result, a smaller class of possible constraints is covered. nevertheless, the annotation mechanism allows for a compositional treatment of constraint-aware schema transformation. rather than path expressions or labels, our approach employs strongly-typed boolean functions to capture constraints. this has the advantage of being more expressive, and allowing a fully compositional treatment. also note that our approach is not limited to hierarchical-relational mappings, as it can be used for schema transformation in general.



