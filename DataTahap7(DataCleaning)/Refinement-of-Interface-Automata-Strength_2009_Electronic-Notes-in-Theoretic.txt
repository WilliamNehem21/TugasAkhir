composition of two compatible interfaces can be used together in at least one design thanks to the non-input-enabled property, which means that at every state, some input actions may not be enabled contrarily to i/o automata and csp. there interaction is made by synchronizing shared input an output actions, while the internal actions of concurrent automata are interleaved asynchronously. automatic compatibility verification and refinement checking can be made. the formalism of interface automata has been applied in several cases as a formal model to specify the interface behaviors of software components[4,9]. a path often taken in the literature is to check the interface compatibility of components at the semantic level of operations. in our previous work, we improve the model of interface automata to ensure a more reliable verification of components interoperability by taking into account the semantics of actions. the proposed method enrich transitions of interface automata by pre and post-conditions of actions which are atomic prepositions over a set of variables. the scope of our previous work do not cover the totality of interface automata by treating refinement. this paper is essentially written to expose the refinement our extended interface automata.



the role of refinement relation is to formalize the relationship between the abstract and the concrete versions of the same component. for i/o automata, refinement is usually defined as trace containment or simulation; this ensures that the output behaviors of the refined automaton are behaviors that are allowed by the abstract one. such definitions of refinement do not hold for non-input-enabled setting, such as interface automata: if the set of legal inputs of the refined interface is a subset of the inputs allowed by the abstract one, then the refined interface could be used in fewer environments than the interface abstraction. while a new approach is adapted to compose interface automata, an alternating approach is used to refine them.



alternating refinement simulation is defined to study refinement between alternating transition systems. they are introduced as a general model for component-based systems which allow the study of adversarial relationships between individual system components. unlike in labeled transition systems where each transition represents a possible step of the system, each transition of an alternating transition system corresponds to a possible move in a game between different components. the proposed refinement of interface automata is based on this approach by viewing them as alternating transition systems. explicitly, a refinement of an interface automata expresses that the refined component can offer more services(input actions) and fewer service demands(output actions). in this article, we adapt the alternating refinement simulation of interface automata by taking into account the relation between pre and post-conditions among the input and output transitions of an automaton and their correspondent refinements. in other word, a refined version uses more variables to formulate pre and post-conditions of the refined and added input actions. we suppose that the pre and post-conditions of the remaining output actions do not change. intuitively, while the offered services are local in the component, we have to strengthen their semantics constraints if which is not the case for demanded services because the component ignore if the demanded service was refined or not in the environment.



i/o automata have been introduced by nancy a.lynch and mark.tutle as labeled transition systems. commonly, they are used to model distributed and concurrent systems. labels of i/o automata fall into three categories of actions: input, output, and hidden actions where input actions are enabled at every state of an automaton.



our approach presented in extends interface automata by considering the action semantics to ensure a more reliable verification of component interoperability. in, the checking of the component compatibility uses only action signatures, which are not sufficient to decide if two interfaces are compatible or not. our contribution uses pre and post-conditions over a set of variables to annotate the actions of interface automata. these constraints on actions show their semantic effects which can be useful to strengthen the compatibility checking. the proposed algorithm to verify the composition and the compatibility between interface automata takes into account of pre and post-conditions of actions.



the composition condition is the same as the preexisting approach. the composition of two automata may take effect only if their actions are disjoint, except shared input and output actions between them. when we compose them, shared actions are synchronized and all the others are interleaved asynchronously.



the verification steps in this approach are the same as except that we consider the action semantics. the proposed algorithm verify the compatibility of two interface automata by checking if their composition is nonempty. we mention that our approach does not increase the linear complexity of the previous proposed one. finally, we add that the associative criterion of the composition operator between three automata is undefined when some of them are not composable.



the aim of the refinement relation is to concretize an abstract version of a component interface. it permits to move a component or an interface from a high-level understanding to a more concrete specification. contrarily to traditional types of i/o automata, refinement is defined as trace containment, the refinement of interface automata is based on an alternating refinement relation in the spirit of simulation. a more concrete version of an interface have to be used in stronger environments than its abstraction. in other words, the refinement of an interface must allow more legal inputs, and fewer outputs than the abstract version.



defining pre and post-conditions of actions of the refined interface must obey to some variant constraints. on the one hand, when we refine a component, we add to their provided services(input actions) some other new services by defining new signatures of actions and on the other hand, we strengthen their former operations by adding some other constraints on their pre and post-conditions. we take into account the principle that, in the refined interface, an old input action must have a fewer precondition than the precondition of the same corresponding action in the abstract one and its post-condition must be stronger than the corresponding post-condition in the abstraction.



we illustrate our works by applying refinement to the component vehicle of the cycab car component-based system studied in. the cycab car is a new electrical means of transportation conceived essentially for free-standing transport services. it is totally manipulated by a computer system and it can be driven automatically according to many modes.



