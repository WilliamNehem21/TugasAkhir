we develop another class of schedulers(the strongly distributed schedulers) that restricts the nondeterminism concerning the order in which components execute. we compare this class against previous approaches in the same direction, showing that our definition is an important contribution. for this class, we show that randomized and non-markovian schedulers are needed to attain worst-case probabilities.



overestimation of the correct value. in this example, in which t and g do not share all information, we would like that the supremum probability of guessing(i.e., of reaching any of the states(headst, headsg) or(tailst, tailsg)) is 1.



this observation is fundamental in distributed systems in which components share little information with each other, as well as in security protocols, where the possibility of information hiding is a fundamental assumption. the phenomenon we illustrated has been first observed in from the point of view of compositionality and studied in[8,9,6] in different settings. distributed schedulers are also related to the partial-information policies of.



roughly speaking, in previous literature there is no nondeterminism concerning the different interleavings in which the components execute(for a detailed comparison see sec. 5). if we allow interleaving nondeterminism, the schedulers can also be restricted to handle this nondeterminism in a realistic way. so, we motivate a restriction to distributed schedulers in this direction, and define the strongly distributed schedulers as the schedulers complying with such restriction.



the model checking problem considering only distributed schedulers has been proven to be undecidable in general. so, one may think that undecidability can be overcome by restricting the schedulers to have finite memory. in this case, an obvious question is how much memory the scheduler should have in order to accurately approximate the worst-case value. we show that the amount of memory needed to get an approximation of the worst-case value cannot be calculated. in addition, we show that nondeterministic schedulers are more powerful than deterministic schedulers given a fixed amount of memory. we also show that the problem of calculating the worst-case value among all markovian distributed schedulers is np-hard.



the probability of a set of executions depends on how the nondeterminism is resolved. a scheduler transforms a nondeterministic choice into a probabilistic choice by assigning probabilities to the available transitions. given a system and a scheduler, the probability of a set of executions is completely determined.



in the usual mdp setting, schedulers assign probabilities to the available transitions taking into account the complete history of the system, and hence historydependent schedulers are defined as functions mapping paths to distributions on transitions. as we have seen it may be unrealistic to assume that the schedulers are able to see the full history of all the components in the system. in the following, we define a restricted class of schedulers in order to avoid considering unrealistic behaviours.



in a distributed setting as the one we are introducing, different kinds of nondeterministic choices need to be resolved. an atom needs a corresponding output scheduler to choose the next generative transition. in addition, it may be the case that many reactive transitions are enabled for a single label in the same atom. hence, for each atom we need an input scheduler in order to choose a reactive transition for each previous history and for each label. output and input schedulers are able to make their decisions based only on the local history of the atom. so, we need the notion of projection.



the outcome as a secret(coins whose output are assumed to be secrets can be found in probabilistic security protocols such as the solution to the dining cryptographers problem, see). atom z models an attacker trying to guess the outcome of the coin. atoms a and b are two processes that z is able to observe.



note that the leak of information arises from the fact that the interleaving scheduler can look at the complete history of the system. in the following we derive restrictions on interleaving schedulers that prevent the leak presented above. then, strongly distributed schedulers are defined as distributed schedulers whose interleaving scheduler complies with such condition.



the probabilistic model checking problem has been proven to be undecidable in case the schedulers are restricted to be distributed. theorem 4.7 shows that the problem is still undecidable if we restrict to finite-memory schedulers. moreover, if we want to restrict to deterministic schedulers having at most n memory, the amount of memory n needed in order to get an accurate approximation of the probability cannot be calculated. formally, let detlfinmemn(p) be the set of deterministic locally n-markovian schedulers for p. then: atoms c and v. intuitively, c chooses a clause and a literal in the clause, and v chooses a variable and a value for this variable. atoms c and v do not synchronize at all. the set of states of c is



formula is satisfiable). note that the number of states of the system comprising atoms c and v is polynomial in the number n of variables. moreover, the system has no cycles, and so markovian schedulers attain the supremum probability. then, the problem is np-hard.



