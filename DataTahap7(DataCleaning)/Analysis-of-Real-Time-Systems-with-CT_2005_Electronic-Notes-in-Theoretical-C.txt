this new algorithm uses decision procedures for computing intersection, set difference and predecessors of classes, and testing whether a class is empty. also, the tctl specification is reduced to ctl logic extended with new atomic propositions to deal with the specification constraints. then, a tctl model checker has been developed based on techniques of the classic ctl model-checker. other techniques are based on abstraction of the constraints specified in the system and in the property, using the framework of predicate abstractions as abstract interpretation[7,14].



the rest of the paper is organized as follows. in section 2, we present the formalism of timed automata used to specify timed systems. the logic tctl and our approach of transformation of the tctl specifications to ctl specifications are presented in section 3. also, the proof of the transformation correctness is presented in this section. in section 4, we present our algorithm for generating finite bi-similar graphs of the timed systems. section 5 explains the method of using these graphs for ctl model checking and how the results can be projected back to original timed systems. at the end, a conclusion is given.



most algorithms used to solve the bi-simulation problem are based on some form of partition refinement, i.e. they perform successive iterations in which blocks of the current partition are split into smaller blocks, until no block can be split anymore. while splitting a block, states that cannot be distinguished are kept in the same block. two states can be distinguished if one of the states allows a transition with a certain label to a state in a certain block and the other state does not have a transition with the same label to a state in the same block.



at the end of this iteration, the edge e and the zone z will be removed and replaced by the new edges and the new sub-zones. the other outgoing and incoming edges from and to the zone z will be updated according to the new partition, see the algorithm for more details. the non-zenoness of the timed automaton and the convexity of its constraints guarantee that the produced partition has zones preserving the convexity and the non-zenoness. moreover, the algorithm terminates.



in this paper, we have presented a technique for model checking dense realtime systems. this method is based on the reduction of tctl specifications to ctl. the timed behavior of the tctl specification is captured and represented as a timed automaton. this timed automaton is composed with the original timed automaton modeling the timed system. then, a time abstraction technique based on strong bi-simulation, is used to generate a finite graph modulo the tctl specification. a number of branching-time verification tools can be used for performing ctl model-checking on this graph. the advantage of this technique is that there is no need to extend the logic ctl or its model-checking algorithm. our algorithm of time abstraction is very simple where complicated operations on sets are avoided. thus, it can be implemented easily.



