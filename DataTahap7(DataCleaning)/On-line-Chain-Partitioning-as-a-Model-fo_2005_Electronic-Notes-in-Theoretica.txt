we consider a set of tasks with some relations between them. single task has to be computed by a single processor. in a real-time situation we get one task at a time and immediately have to decide on which processor it will be computed. our decision is irrevocable. our objective is to minimize the number of used processors. we want to use the additional knowledge about the relations between tasks and therefore we add one rule to our scheduling. independent tasks have to be scheduled to different processors. it is because



this situation can also be interpreted as a two person game. the first person presents tasks and the second one assigns processors to them. a poset in which points are tasks is a perfect mathematical model for this problem. tasks calculated by a single processor form a chain. scheduling therefore can be considered as chain partitioning.



we prove that on-line chain partitioning of up-growing interval orders given by its representation has an optimal solution(nearest-fit algorithm), which is based on a greedy strategy. considering on-line chain partitioning of interval orders without representation the situation changes dramatically. the nearest-fit algorithm does not work. we show that there is no on-line algorithm constructing the representation of interval orders and graphs, which forces us to design new algorithms. we also prove that the lower bound for the up-growing version of the problem changes.



in section 2 we compile necessary basic facts about posets and chain partitioning. section 3 proceeds with the study of the on-line version of this problem and provide detailed description of our game. in the fourth section we study the class of interval orders. following section discusses problem of chain partitioning in this class. an exact nearest-fit algorithm for the upgrowing version is presented. finally, last section deals with problem when the representation of interval order is not given. we prove that there is no on-line algorithm constructing such representation. a lower bound(3w/2) for on-line chain partitioning of up-growing interval orders is presented.



we call a pair p=(x, p) partially ordered set(poset for short) if x is a set and p is a reflexive, antisymmetric and transitive binary relation on x. the set x is called ground set of p and elements of x are called points. relation p is called an order on x.



now we can settle the problem of chain partitioning. given p=(x, p) we want to find a partition of the set x into nonempty, non-intersecting chains ci such that x= ci. moreover, we want this partition to have minimal number of chains. we can clearly see, that there has to be at least width(p) chains because every element of a maximum antichain must belong to different ci. from next theorem we know, that this lower bound can always be achieved.



as mentioned in the introduction, on-line chain partitioning of a poset p=(x, p) can be used as a theoretical model for scheduling tasks. a set of tasks is the ground set x. relations between tasks are described by an order p on them. simply x< y means that task x has to be computed before task y, for example because task y uses the results of task x. on the other hand, x y means that tasks can be computed in parallel because they are independent. we can imagine that in a practical situation each task has to be calculated by a single processor. we want to schedule them by telling which processor in what order will compute which tasks. we assume that we do not know in advance the time needed to compute each task(we will relax this assumption in section 5). this is natural because if x< y and we have not computed task x then we do not know all the input, which could have effect on time of execution, for task y yet. moreover, we will only plan the computation and do not react later during computing in changing our schedule. this gives us one restriction to our scheduling: independent tasks have to be calculated be different processors. in a such environment, scheduling can be considered as chain partitioning. tasks computed by each processor form a chain. we want to partition the set of tasks into smallest number of chains thus using the smallest number of processors.



in a real-time situation we get one task at a time and irrevocably assign processor to it. this situation is a practical realization of our on-line game. alice is a spoiler of tasks and bob is an on-line scheduler of them.



after presenting interval orders, we can play our game on this class of posets. this assumes additionally, that in every round poset presented by alice has to be an interval order. we assume that alice gives poset by the representation. this means that we get new point x as a pair f(x)=[ax, bx]. in the next section we will see that the value of the game is different, if new points are presented without interval representation.



algorithm given in is even stronger. it colors broader class of circular arc graphs which we define in the last section. this completes the study of online chain partitioning of interval orders given by the representation, because we can use this algorithm and only change the interpretations of results as described.



proof. the result is achieved by using the nearest-fit algorithm by bob. it is a greedy algorithm, which means it does not use new color(construct new chain) until it is forced to. whenever there are many possibilities for a choice of a color, the algorithm apply the nearest-fit rule. it chooses such a color, which is represented by an interval with rightmost right end. this is shown on the picture below:



the algorithm chooses color number 1 from the available 1 and 2. the color number 3 is forbidden because our new interval intersects with interval colored by 3 and thus cannot form a chain. it is clear that algorithm will not work if the representation is not given. the representation makes the defense much easier, because bring more information about the poset.



no interval can be to the right of x, because of the up-growing rule. new element has to be maximal when it is given by alice. suppose an interval y is on the left of x and has color z. since it is the rightmost interval with color z, bob could choose z for coloring x which contradicts the assumption that bob was forced to generate a new color for x. this proves the claim.



this finishes our study of chain partitioning of interval orders. in our practical application this restriction is also interesting. we only need to consider scheduling tasks in a common environment with additional time dimension. in this case we get each task with an information about start and finish time of its execution. our nearest-fit algorithm gives us optimal scheduling for such presented tasks.



alice presents first two incomparable elements and bob is forced to use two different colors, say 1 and 2, for these points. now alice adds a new point that dominates both of the two old ones. bob either uses the third color for it(so we are done), or uses one of the old colors. without loss of generality this old color could be chosen to be 1. then alice add the fourth point that dominates only the one of the minimal points that was colored by 1. this obviously forces bob to use the third color at this point. it is easy to check that the width of the presented poset is 2, and it is interval.



this construction can be extended to get our theorem as follows. first an antichain a={a1,..., aw} of w= 2n elements is presented to bob, so that he is forced to use w different colors on them. then alice replies with an antichain of n new points b={b1,..., bn} that dominates all points in



our nearest-fit algorithm needs an interval representation of a poset(graph) to work. if we can construct(on-line) the representation it needs, we could apply first this on-line representation and then the nearest-fit algorithm. now we consider constructing representation for a poset as an on-line game. alice presents poset to bob point by point, but bob have to construct the interval representation of it. in view of theorem 6.1 there is no algorithm constructing interval representation of an interval order, as otherwise it would give enough information for bob to do optimal chain partitioning using nearest-fit strategy.



the circle gives us more possibilities for representing interval graphs. every interval graph is a circular arc graph. on the other hand, circular arc graph happens to be interval when in one of its representations on a circle there is an uncovered point. we can do a cut in this point and get an interval representation.



theorem 6.2 tells us that we need to design new algorithm for chain partitioning problem of interval posets when they are presented without their interval representation. we strongly believe that chain partitioning of interval orders without representation has an on-line linear algorithm for both upgrowing and general version. we know only a lower bound, so this is an open problem for now.



