this paper gives an overview of recent advances in real-time maude. real-time maude extends the maude rewriting logic tool to support formal specification and analysis of object-based real-time systems. it emphasizes ease and generality of specification and supports a spectrum of analysis methods, including symbolic simulation, unbounded and time-bounded reachability analysis, and ltl model checking. realtime maude can be used to specify and analyze many systems that, due to their unbounded features, such as unbounded data structures or dynamic object and message creation, cannot be modeled by current timed/hybrid automaton-based tools. we illustrate this expressiveness and generality by summarizing two



users of formal tools face a choice between expressiveness and generality of the modeling formalism on the one hand, and the availability of decidable and complete analysis methods on the other. for real-time systems, tools based on timed and linear hybrid automata, such as uppaal and hytech, have been successful in modeling and analyzing an impressive collection of systems. however, while their restrictive specification formalism ensures that interesting properties are decidable, such finite-control automata do not support well the specification of larger systems with different data types, communication models, and advanced object-oriented features.



the goal of this paper, as its title suggests, is to give an overview of recent advances in real-time maude. specific advances have been individually reported elsewhere[16,22,23,19], but no overview of the state-of-the-art exists. this paper tries to fill this gap and provide answers to questions such as:(i) what is real-time maude good for?;(ii) how is it different from uppaal and hytech?;(iii) what logical properties can be decided?; and(iv) what applications can real-time maude handle that other tools cannot handle? in particular, we emphasize expressiveness, generality, and completeness aspects, as well as challenging applications.



this latter feature is important when modeling advanced wireless sensor network algorithms. such algorithms pose many challenges to their modeling and analysis, as explained in section 4. in joint work with stian thorvaldsen, the first author recently modeled, simulated, and analyzed the sophisticated ogdc algorithm for density control in wireless sensor networks. to the best of our knowledge, our work on ogdc represents the first attempt at using a formal tool on advanced wireless sensor network algorithms. in section 4, we show how communication in wireless sensor networks, at the level of abstraction of ogdc, can be modeled, and briefly summarize the modeling and analysis of the ogdc algorithm.



the increasing sophistication of scheduling algorithms makes it challenging, if not impossible, to model such algorithms using automaton-based formalisms. in joint work with marco caccamo, we have modeled and analyzed the state-of-the-art cash scheduling algorithm and a proposed improvement of this algorithm. this work is reported in; here we give an overview.



we have specified(both versions) of the cash algorithm, for all possible task sets, by allowing a job to arrive at any time and to execute for any non-zero amount of time. we have specified the algorithm in an object-oriented style, where each task server is modeled by an object of a class server. the specifications are given in detail in. in what follows, we just give a flavor for the specification.



we represent a spare capacity as a term deadline: d budget: b, where d is its relative deadline and b is its remaining budget. the cash queue of spare capacities is represented by a term[cash: c1... cn], where c1... cn is a queue of spare capacities. the sorts and operators for this data type are specified as follows:



a wireless sensor network consists of a set of small, cheap, and low-power sensor nodes that use wireless technology to communicate with each other. most often, it is assumed that sensor nodes communicate by broadcasting using a radio transmitter with an undirected antenna. sensor nodes tend to have limited power supply(provided by a battery) that is virtually impossible to replace.



modeling and reasoning about time-dependent behavior. for example, longevity of the network is often a crucial goal, in which case power consumption must be modeled. in addition, wireless sensor network algorithms may use timers, message transmission may be subject to message delays, and so on.



jennifer hou recently suggested to us the state-of-the-art optimal geographical density control(ogdc) algorithm for wireless sensor networks as a challenging modeling and analysis task. ogdc has been simulated in the simulation tool ns2, where its performance was compared to the performance of similar algorithms. ogdc presents all the challenges(1) to(6) above.



we have modeled, simulated, and analyzed ogdc in real-time maude. to the best of our knowledge, our work on ogdc represents the first formal modeling and analysis effort of sophisticated wireless sensor network algorithms. we were able to do in real-time maude all the analyses that the developers of ogdc performed using the wireless extension of ns-2. in addition, we have subjected the algorithm to time-bounded reachability analysis and temporal logic model checking. such analyses normally explore all possible behaviors from a certain state, but in our case they were also relative to the sampling techniques used for simulating probabilistic behaviors.



this paper intends to give some high-level ideas on how to model wireless sensor network algorithms. the paper explains in more detail how sensor network algorithms in general can be modeled and analyzed in real-time maude. the report describes the ogdc case study in detail.



each sensor node can suitably be represented as an object of, say, a class called wsnode. a wireless sensor node usually does not have an explicit identifier, but can be identified by its location. in real-time maude, we let object identifiers be locations by giving the subsort declaration subsort location< oid.



in ogdc, the network lifetime is divided into rounds. a round begins with each node entering a volunteering process where it probabilistically chooses whether or not to volunteer to be a starting node. each node that volunteers sets its backoff timer to a small value. the node then becomes active when its backoff timer expires, and broadcasts a power-on message which contains the location of the node and a random direction(see rule startingnodepoweron below). when a node receives a power-on message, it checks if its entire coverage area is covered by the surrounding active nodes, in which case the node becomes inactive. otherwise, the node sets its backoff timer depending on how close the node is to the optimal position. when the backoff timer of a node expires, the node becomes active and broadcasts a power-on message. the network enters the steady state phase when each node is either active or inactive. when a round is over, the density control process starts over again.



we added to the initial state a new construction called analysis message to compute the appropriate performance metric of the state at the end of each round. timed rewriting could then simulate the ogdc algorithm with several hundred sensor nodes and could measure all performance metrics measured by the ogdc developers using ns-2. in our simulations, we generally got a larger number of active nodes than reported in. a plausible explanation is given in and essentially means that, in the ogdc algorithm, more nodes will become active if transmission delays are taken into account in the simulation(as was done in our case) than if such delays are ignored, which may have been the case in the simulations in. since transmission delays play a significant role in the definition of the ogdc algorithm, they should be taken into account in simulations. therefore, our formal model may provide a more appropriate simulation setting for ogdc than ns-2 with the wireless extension.



the previous sections show the expressive power and generality of the real-time maude formalism. the price to pay for such expressiveness is that real-time maude analyses are in general incomplete 7 for dense time, because all moments in time cannot be visited. for discrete time, completeness can be achieved by exhaustively visiting all time instants. this makes breadth-first search for violation of an invariant a complete semi-decision procedure. furthermore, time-bounded ltl model checking of systems in which only a finite set of states can be reached within a certain time becomes a complete decision procedure. however, visiting all discrete times typically leads to a state space explosion that renders many formal analyses unfeasible.



