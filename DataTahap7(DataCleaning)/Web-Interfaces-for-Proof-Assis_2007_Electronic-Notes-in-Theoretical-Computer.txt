

to use a proof assistant, one needs to install some software. often the installation process is complicated. for example to install isabelle, which is one of the most popular proof assistants, on a linux system, one needs a particular version of polyml, a hol heap and isabelle itself. to use an interface to access the prover, one needs proofgeneral and one of the supported emacs versions. with



this is a problem. it happens that computer scientists prefer to stick with installed old versions of provers, not to go through the same process to upgrade. mathematicians may even stay away from computer assisted proving, just because of the complexity of installation.



we want a fast interface, that is available with just a web browser. we want to access various proof assistants and their versions, in a uniform manner, without installing anything, not even plugins. the interface should look and behave like local interfaces to proof assistants.



the solution is a client-server architecture with a minimal lightweight client interpreted by the browser, a specialized http server and background http based communication between them. the key element of our architecture is the asynchronous dom modification technique(sometimes referred to as ajaxasynchronous javascript and xml or web application). the client part is on the server, and when the user accesses the interface page, it is downloaded by the browser, which is able to interpret it without any installation.



the user of the interface, accessing it with the browser, does not need to do anything when a modification is done on the server. every time the user accesses a prover, the version of the prover that is currently installed on the server is used. the user can access any of the provers installed on the server, even a prover which does not work on the platform from which the connection is made.



our approach is presented as an architecture to create web interfaces to proof assistants, but it is not limited to them. the problems solved are relevant to creating web interfaces programs that have a state, include an undo mechanism, and their interfaces can be buffer oriented. our architecture may be applied for example to buffer oriented programming languages, like epigram.



there are java applets having built-in proof assistant functionality. examples may include g4ip or logic gateway. the installation of a browser plug-in to support java is not simple in a unix environment and limiting provers to java applets is undesired.



the novelty of our architecture in comparison with existing web interfaces for theorem provers is that it allows the creation of an interface to a prover, that can look and behave very much like the ones offered by state-of-the-art local interfaces, but is available just by accessing a page with a web browser without installing any additional software, not even plugins. because of the architecture, the network used to transfer information does not slow down the interaction. the idea to use asynchronous dom modification to create an interface to a proof assistants has never been applied before.



in the rest of the paper we present the techniques for creation of web interfaces, that we will use(section 2) and the internals of a local prover interfaces which we try to imitate(section 3), followed by the presentation of the new architecture(section 4) and a description of its security and efficiency(section 5). we present our implementation prototype(section 6). finally we conclude and present a vision of future work(section 7).



javascript is a scripting programming language, created by netscape in 1995, for adding certain dynamic functionality to pages written in html. it has been quickly adopted by most browsers and nowadays it is supported even by some text mode browsers like w3m and links, and mobile phone browsers. it is very often used on internet websites.



dom(document object model) is an api(application programming interface) for managing html and xml documents that allows modifications of their structure and content. recent browsers support w3c dom accessibility by javascript. it is often used on web pages to add dynamic elements, for example drop-down menus or images that change when the mouse moves over them.



the current version of proofgeneral is implemented mostly in emacs lisp, and is strongly tied with the editor itself. it is easy to adapt proofgeneral to new proof assistants, by setting a number of variables. if this is not sufficient elisp code can be used.



interaction, but they are normal elements of web pages). buffers are implemented as html iframes 2. all keys that modify the iframe are assigned to a special function. locking of parts of the buffer is implemented by disallowing changes to locked parts of the buffer in this function.



the interface includes functionality for file interaction. files can be loaded and saved on the server. for interoperability downloading files and uploading files from the local computer may be provided. for proof development efficiency, insertion of templates and queries may be provided.



the special messages, mentioned above, include: passing a given complete expression to verify to the prover, issuing an undo command in the prover, saving a file, loading a file, and break(stopping the prover computation). the commands from the client for the prover are passed first to the server, which transmits them to the prover. prover replies are analysed by the server and only state changes are sent to the client. the state changes consist of two parts: changing of the markings of the edit buffer and the new contents of the prover state buffer.



in any centralized environment security, availability and efficiency of the server are important. standard security measures include a backup server prepared to take over network traffic in case of a primary server failure and regular backing up of user files. in this subsection we will describe only the issues and solutions particular to a server that runs a web interface to a prover.



when many users want to access the interface, the resources of a single server may be insufficient. it is simple to run the server on a set of machines, by calling provers as subprocesses through ssh on separate computers. a load balancing mechanism can be implemented.



to secure our prototype the server is run as nobody in a minimal chrooted environment. the prover sub-processes are reniced not to interfere with the main server process. dropping from coq to ocaml toplevel is disabled. the access to the interface is password protected, to avoid creating prover sessions for web-spiders. web spiders are able only to see the saved proof scripts.



our interface can be used to create interactive tutorials presenting proof assistants. we have created a special proof script, that includes a slightly modified version of the official coq tutorial. the descriptive parts have been put inside comments(including the html formatting), and commands to the proof assistant have been left outside comments. a user that enters such a page may just read the tutorial and execute the commands in coq environment, but may also do own experiments with it.



proof states. thus proofs presented on the web are usually accompanied with some of the proof states usually automatically generated by coqdoc or texmacs. a web interface can be used(even in a read-only mode) to present such proofs interactively. in this way, the user reading the proof chooses which proof states to see.



external proof assistant libraries can be included on the server. with our server we included c-corn(constructive coq repository at nijmegen). such libraries can be developed on the server. in such an approach visitors can always see and test the current version, without downloading and compiling the library.



we presented an architecture to create simple, lightweight and fast web interfaces to proof assistants. such interfaces are a novelty in the domain. our solution works with modern web browsers without installing any additional software. the installation and updating process is done only on the server, the users do not need to do anything. it is therefore completely platform independent.



we would like to see how well our solution fits with the general prover interaction protocol pgip. the protocol is xml-based, so parts of it may even be passed by the server directly to browsers, since they are already able to parse xml. on the other hand the protocol may include too much information, since it was designed as a local one.



