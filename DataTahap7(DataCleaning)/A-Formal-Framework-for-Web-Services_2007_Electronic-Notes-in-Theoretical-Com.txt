we refer to nonacid transactions as long running transactions. error handling in this context relies on the concept of compensation. most of the existing choreography languages use long running transactions and compensations as a mechanism for describing loosely-coupled activities. compensations are application-specific activities which attempt to reverse the effects of a previous activity carried out as part of a larger unit of work which is being abandoned. while for acid transactions in databases the transaction coordinator and the resource it controls know all the uncommitted updates and have the full control on the order in which they must be reversed, in the case of business transactions the compensation behavior is itself a part of the business logic and must be explicitly specified.



the problem of choreographing web services is tackled by a trio of standards that have been recently proposed to handle this next step in the evolution of web services technology. the standards that support business process orchestration are: business process execution language for web services(bpel4ws or bpel for short), ws-coordination(ws-c) and ws-transaction(ws-t). bpel is a workflow definition language that describes sophisticated business processes that can orchestrate web services. ws-coordination and ws-transaction complement bpel to provide mechanisms for defining specific standard protocols to be used by transaction processing systems, workflow systems, or other applications that wish to coordinate multiple web services. these three specifications work in tandem to address the business workflow issues implicated in connecting and executing a number of web services that may run on disparate platforms across organizations involved in business scenarios.



finally, it is worth to note that we can also dynamically define the event an event scope in interested in. consider, for instance, the process x(t).[p, q]t where the event scope name t is obtained as input on the channel x.



in this section an e-commerce scenario will be presented in order to show the potentiality of the event calculus for describing long running transactions and business activities. as we said, long running transactions can involve other transactions. for this reason, generally, a coordinator is needed in order to handle the state of the long running transaction and to activate compensations when some inner transactions fail. referring to we consider the example of a customer application which



ba, abort be the event name denoting that the involved activities(ba1, ba2, ba3 and ba4) should abort. we use abort han dler1, abort han dler2, abort han dler3, and abort han dler4 to denote the processes which manage this task for business activity ba1, ba2, ba3 and ba4, respectively. let notok be the event name representing that all the activities completed in a successful way must be cancelled(by executing the compensation processes). we use canc1, canc2, canc3, and canc4 to denote the processes which manage this task for business activity ba1, ba2, ba3 and ba4, respectively. let m be the event representing that the business activity ba2 has failed and then the alternative ba4 is to be considered.



the first extension allows an easier specification of complex coordination scenarios(such as e-commerce applications) with respect to the algebra we presented in our past work which was focused mainly on error handling mechanisms unification. we want to add some considerations about the notification mechanism: when an event is signalled, no operations are performed until the system has activated all the event scopes interested to that event. in the case of distributed web services and event scopes, in order to model in a more realistic way the mechanism it can be interesting to assume that scopes catch the event in an asynchronous manner. on the other hand, the signal mechanism already allows to express that the notification of events is asynchronous. the second extension also allows many new interesting behaviours which can be very useful in business scenarios, such as the opportunity of handling security and privacy issues or the dynamic event scope definition for managing multiple instances of the same application. this feature shares some similarities with the technique proposed by bpel for the same purpose. although we mainly presented e-commerce applications for our language, we consider that such a calculus represents a foundational framework able to deal with any aspect of web services coordination.



a last remark is about the need for timed transactions. presently, we believe that a notion of time in long running transactions can be useful in business scenarios(refer to). other researchers consider that the notion of time should be introduced both at the model level and at the protocols and implementation levels.



