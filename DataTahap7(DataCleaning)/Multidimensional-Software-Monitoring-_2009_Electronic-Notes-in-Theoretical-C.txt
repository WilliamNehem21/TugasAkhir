measuring the quality of software is gaining more and more attention from the industry, since high quality systems generally have a lower total cost of ownership. in order to give both managers and software developers insight in the quality of the software system they develop, a software quality monitoring system is needed. the metrics calculated on the software system need to give a comprehensive, yet meaningful report. the software improvement group has developed the software monitor, an analysis and on-line reporting tool for monitoring the quality of a software system during development.



at the software improvement group(sig), we specialize in reviewing and monitoring the quality of software systems. in our experience, most development teams can give a rough estimate of which parts of their system are difficult to maintain, but these estimates are no more than educated guesses. on a management level we see that the demand for a quality-review is often available, but the knowledge to perform such a review is lacking.



r3 furthermore, to easily navigate to problematic areas in the code, the reporting side must offer a drill-down functionality. to offer different views on a system this drill-down is preferably available on multiple dimensions, i.e. both over the file-system as well as over a logical(language-specific) hierarchy. for example, we imagine that a java-project has a package-hierarchy linking levels of package/file/class and methods.



olap-cubes are commonly used to store measurements, numeric facts, categorized by dimensions. the usual example is the tracking of sales of different types of products in stores across multiple countries. by keeping track of the sales and the properties of the products, the management of the company is able to get reports of the sales by product, by product-category or by store. additionally, olap-cubes provide aggregation on each dimension, making it possible to get reports on sales by city, region and the entire country. furthermore, dimensions and aggregation can be combined in order to generate a report on, for example, the number of items sold within a city grouped by product-color.



in our case the measurements are calculated metrics. the dimensions support the storing of metrics in, amongst others, a file-system dimension, a language dimension and language specific dimensions such as the package-dimension for java. by default, an olap-cube has a time-dimension, providing us with an easy way to store metrics of multiple versions in a single location.



by using an olap-cube as a data-store, the result of multiple calculations is stored in a single place. because the cube supports aggregation over dimensions, the data can be shown both on the system-level as well as the code-unit level. furthermore, the ability to combine multiple dimensions at will makes sure that the reporting side can be quite flexible.



ends with.java. the java-source-context knows which parser to use to process the file-node and determines which package a node belongs to. when the node for this package is already in the graph, the node is reused, otherwise a new package node is created. the file-node is linked to this package-node by creating a new edge representing the package-to-file-relation. furthermore, for each class within the file, a node is created and linked to the file-node. note that this process is not limited to file-nodes. the java-source-context also extracts method-nodes from a class-node and links these to the parent class-node.



...) to use and the dimension(file-system, package,...) to traverse. it is allowed to use the same technology in combination with several dimensions as well as to use the same dimension for several technologies.



just like software written in any other language, custom abap reports and forms have to be maintained. all the pitfalls that apply to development in e.g. java also apply to abap. maintaining the custom forms in a sap system should take as little effort as possible. to achieve this, one would need to write abap code that is as easy to maintain as possible.



can verify all programs, forms and reports written for a sap system. the code inspector is a static analysis tool which can check for errors in the abap code. the code inspector has access to meta information about the abap programs, and can check whether the code adheres to naming standards, or whether programs are unicode enabled(this allows the programs to be deployed globally) as well as many other checks.



during the development of the custom sap modules, the complexity of the system is changing constantly. the complexity, volume and amount of duplication in a system play important roles in influencing the maintainability of the software system. the maintainability model(mm) gives us insight in which source code properties of a system attribute to the maintainability of the software system. in this model, the source code properties are all mapped onto the iso 9126 standard.



are always calculated for the systems under analysis. furthermore, the volume per unit, cyclomatic complexity and duplication are related to the total size of the system, and grouped in bins. this shows for example the percentage of the system that has a mccabe value between 1 and 20, which percentage has a mccabe between 20 and 50, and which percentage has a mccabe of 50 and higher. similar grouping can be done for the size of the units in the system.



besides hard-coding, the number of deprecated keywords and statements used in the system are counted. during the development of a sap system, one expects the number of used deprecated keywords to decrease over time. an increase of this metric shows that developers are still actively using deprecated functionality. the sat also calculates a number of metrics that count bad practices in



in this section, we discuss related solutions for measuring the quality of a software system in terms of metrics. these solutions can roughly be divided into two separate groups. the first group contains the solutions that can serve as a complete replacement for our software monitor system. in section 5.1, we discuss the characteristics of these tools and the reasons for not using them. the second group of tools contains existing front-ends for olap-cubes which in theory can be used with the cube that is generated by our sat. the reasons for building our own front-end instead of using one of these existing solutions are given in section 5.2.



there exists a large collection of stand-alone programs that is capable of calculating metrics on source-level. a simple search on sites that index open-source programs, for example sourceforge 1, returns over 100 results. unfortunately, most of these tools do not support more than three languages. furthermore, the functionality of



a second set of solutions that is available is the editor-support for calculating metrics on source-files. this support can either be given by plug-ins or by the editor itself. the problem with this approach is again the lack of system-level overview. also, the results are usually only available within the editor itself, making it harder to share the results with others.



currently, a single interface for every user of the monitor is deployed. however, we imagine that different users are interested in different views on the system. also, more experienced users could benefit from a more dynamic and interactive interface. because of this, we are exploring the possibilities to differentiate the functionality of the monitor based on the role of the user.



furthermore, for most of the calculated metrics, the semantics on different levels can be defined by a relation to the numbers on lower levels. for example, the number of lines of code for a module is simply the sum of the lines of code of each file in the module. however, there are some metrics, such as the fan-in, that must be calculated differently based on the level in the dimension. currently, this type of metric is only available in a separate report instead of in the monitor.



finally, the relation between a project and other similar projects can also help to better interpret the results of the monitor. in order to support this we are building a benchmark application capable of relating the characteristics of several similar projects. finding out which metrics are relevant in this context is still work in progress.



