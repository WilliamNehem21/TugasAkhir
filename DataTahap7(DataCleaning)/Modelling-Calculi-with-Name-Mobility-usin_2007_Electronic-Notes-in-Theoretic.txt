however, the diffusion of the formalism raises unresolved issues concerning the analysis of its concurrency aspects. consider again the graphical encodings for nominal calculi mentioned above: a concurrent semantics for the graph rewriting formalism would provide a concurrent semantics for process reduction, but unfortunately these encodings fall outside the canon of dpo concurrent semantics. more specifically, the matching morphisms(those morphisms identifying the occurrence of the left-hand side of a rule into the graph to be rewritten) are forced to be injective. more importantly, the right-hand side of the rules resulting from the encoding are specified by non-injective morphisms(operationally, they force some node coalescing in the graph to be rewritten). on the one hand, such features prevents the development of a satisfactory partial order concurrent semantics of rewrites; on the other hand, they are general enough to deserve to be addressed.



we next define rewriting systems over e-graphs according to the algebraic doublepushout(dpo) approach to rewriting, as presented in[4,5]. for technical reasons it is convenient to work with typed e-graphs, which are e-graphs labelled over a structure that is itself an e-graph(see, e.g., for the idea of graph typing).



rules(r1) and(r2) characterise the communication between restricted processes. consider, for instance, rule(r2): the process xw is ready to communicate the(possibly global) name w along the channel x; it then synchronises with the process x(y), and the bound name y is thus substituted by w on all the occurrences inside the residual process p. hence, communication has a global effect affecting the process as a whole. rule(r3) expresses the fact that there is no reason to bind a name during a reduction, if no substitution has actually to occur. rule(r4) removes those matches that hold true. finally, rules(r5) and(r6) simply state the closure of the reduction relation with respect to the operators of restriction and parallel composition.



