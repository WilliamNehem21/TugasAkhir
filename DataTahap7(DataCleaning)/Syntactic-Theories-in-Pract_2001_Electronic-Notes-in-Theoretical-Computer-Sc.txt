the interpreter for a syntactic theory corresponding to its evaluation function naturally consists of a decompose-contract-plug loop. often, the only viable implementation of decomposition is a depth-first search in the abstract syntax tree. the decompose step therefore introduces a significant overhead, proportional to the program size. likewise, plugging can also take time linear in the program size, although it always takes at most as long as the following decomposition, if there is one, and as illustrated below.



first, we can assume some properties of the grammar of the language. we are working with abstract syntax, i.e., a program is an abstract-syntax tree where each node is created by a production in the language grammar. because the abstract syntax need not correspond to the concrete syntax, we can, without loss of generality, assume(1) that all productions are of the form



some syntactic categories contain only values, e.g., the syntactic categories of literals. we assume that there are no evaluation contexts for those syntactic categories, since such evaluation contexts could never occur in a decomposition into context and redex anyway, and as such they are irrelevant to the semantics of a language. likewise, there is no reason to distinguish between values and expressions, so we only represent the syntactic category by the term identifier and never by the associated value identifier.



unique decomposition is so fundamental to syntactic theories for deterministic languages that it is almost always the first property to be established. its proof is often technically simple, but because of its many small cases, it tends to be tedious and error-prone. this state of affairs motivated xiao, sabry, and ariola to develop an automated support for proving unique-decomposition properties.



if the syntactic theory satisfies a unique-decomposition property, then its redexes are exactly the non-value terms that can only be trivially decomposed. a decomposition, e[e] is trivial if either e is a value or e is the empty context. that redexes are exactly the non-value terms that can only be trivially decomposed follows from the following two inclusions.



let e be a non-value term that can only be trivially decomposed. then by unique decomposition e can be uniquely decomposed as e[r]. since this decomposition must be trivial, and r is a redex and thus not a value, it follows that e=[] and thus e= r is itself a redex.



in their work on reasoning about programs in continuation-passing style(cps), sabry and felleisen designed a new cps transformation[8, definition 5]. this cps transformation integrates a notion of generalized reduction and thus yields very compact cps programs. it is also unusual in the sense that it builds on the notion of a syntactic theory, rather than on operational semantics[1,7] or denotational semantics. therefore, and unlike all the other formalized cps transformations we are aware of, it is not defined by structural induction over its input. instead, it is defined as the transitive closure of decomposing, performing an elementary cps transformation, and plugging. therefore, its direct implementation incurs the same overhead as considered in section 2. in the rest of this section, we derive an implementation that operates in linear time over the source program.



the original specification is indexed with 0(section 4.1). we first make decomposition and plugging explicit, indexing this specification with 1(section 4.2). then, we present a version that explicitly uses a refocus function, indexing this specification with 2(section 4.3). using the construction of



olivier danvy and lasse r. nielsen. syntactic theories in practice. technical report brics rs-01-31, daimi, department of computer science, university of aarhus, aarhus, denmark, july 2001. extended version of an article to appear in the informal proceedings of the second international workshop on rule-based programming(rule 2001), firenze, italy, september 4, 2001.



