this paper proposes an extension to theorem proving interfaces for use with proof-directed debugging and other disproof-based applications. the extension is based around tracking a user-identified set of rules to create an informative program slice. information is collected based on the involvement of these rules in both successful and unsuccessful proof branches. this provides a heuristic score for making judgements about the correctness of any rule.



the extension is based on the assumption that the debugging process involves locating a program statement or, in the case of functional programs, function case which is incorrect. this incorrect statement will appear in a program slice which can be identified during verification. other program slices leading to correct deductions may also be identified during proof. this information can then be used to create appropriate syntax highlighting of function cases in an interface. a potential highlighting scheme is put forward and a simple case study based around isabelle/hol and proofgeneral is performed to show how this would work.



program slicing was first suggested by weiser. the key idea was to identify a variable of interest at some point in a program(called the slicing criterion) and then extract a fragment of the program(a program slice) either containing all those statements upon which the value of the variable at that point depended or that fragment whose values were effected by the value of that variable at that point. program slicing techniques for imperative languages have generally followed this work using control flow graphs, data flow graphs or other graph-based representations of programs with statements represented as nodes in the graph and a program slice as a set of nodes from the graph. in functional programs function application takes the place of program statements. the notion of a slicing criterion can also be generalised(e.g. to a projection as in).



is a real example submitted by a student as the solution to an exercise to provide a function, onceonly, that when applied to a list, l, returned a new list containing only one copy of each element in l. there are three errors in this program. firstly the basis case of the insert function is incorrect. secondly a case is missing in the definition of the once function(the case for lists of length one) and lastly in the else branch of the recursive case the expression should be x1:: once(x2:: xs).



it becomes clear, while attempting the above proof, that some independent lemmas need to be established about the sort function. this provides a good example of how the system behaves when a goal evaluates to false. let us consider a simple lemma to show that all members of a list, l, are also members of sort l.



assuming that insert_nil has been fixed, the last example we will consider picks up the main verification at a later stage. we will now assume that insert and sort have been removed from the suspect list. two new functions and a new lemma have been introduced. minl returns the minimum element of a list of naturals and-minl returns a list with one occurrence of its minimum element removed. among other things the following lemma has been established:



out intention is to provide an implementation in isabelle/isar using the proof general interface. this allows there to be a clean separation between the information used by the interface and that used by the underlying theorem prover. such an approach also creates some challenges however, since the necessary properties of goals and proof states will have to be inferred. on the whole it should be relatively straightforward to identify goals and key constants within goals although it there will be some challenges involved in keeping track of proof states, in particular the relationships between parent and child goals needed to make updates correctly. in isabelle successfully discharged goals are dropped from the proof state presented to the interface which again is likely to raise some challenges in the tracking of information.



although no examples have been shown here where a rule is used directly with a tactic(e.g. the rule method in isar) this also needs to trigger updates of tracking information. in general this should be relatively straightforward based on simple analysis of tactic calls.



