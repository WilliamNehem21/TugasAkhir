we believe, similarly to the claims in pullum and scholz, that modeltheoretic approaches to syntax represent an important aspect of the formal analysis of natural language formalisms. in the present context we try to circumvent the problems posed by the limited expressive power of mso by developing the model-theoretic description in terms of a two-step approach. we choose tree adjoining grammar(tag)[13,14,15] as maybe the prototypical mildly context-sensitive formalism 4 for natural languages to illustrate our proposal for a denotational approach towards a generative, non-context-free formalism.



initial trees are such that all interior nodes(including the root node) are labeled with nonterminals and all nodes on the frontier are labeled with terminal or nonterminal symbols; the nonterminals being marked for substitution. the same holds for the auxiliary trees with one exception. there exists one distinguished leaf-node which is labeled with the same nonterminal as the root node, which is called the foot node. furthermore, the nodes can be marked to allow or forbid adjunction. for simplicity, we only indicate nodes where no adjunction is allowed by putting a bar on top of them.



the algebraic perspective allows the uniform and natural extension from strings to trees by the simple technique of generalizing from unary to multiary operators. in this section, grammars working on strings are generalized to grammars working on trees. thus we have a natural counterpart to the chomsky hierarchy: regular tree grammars correspond to the known regular grammars and context-free tree grammars to the context-free grammars.



let us view grammars as a mechanism in which local transformations on trees can be performed. the central ingredient of a grammar is a finite set of productions, where each production is a pair of trees. such a set of productions determines a binary relation on trees such that two trees t and t' stand in that relation if t' is the result of removing in t an occurrence of a first component in a production pair and replacing it by the second component of the same pair. the simplest type of such a replacement is defined by a production that specifies the substitution of a single-node tree t0 by another tree t1. two trees t and t' satisfy the relation determined by this simple production if the tree t' differs from the tree t in having a subtree t1 that is rooted at an occurrence of a leaf node t0 in t. in slightly different terminology, productions of this kind incorporate instructions to rewrite auxiliary variables as a complex symbol that, autonomously, stands for an element of a tree algebra. recall that in context-free string grammars a nonterminal auxiliary symbol is rewritten as a string of terminal and nonterminal symbols, independently of the context in which it occurs. as long as the carrier of a tree algebra is made of constant tree terms the process of replacing null-ary variables by trees is analogous.



lifting mcftgs uses the same definitions for lifting as is used for general cftgs. the translation process for grammars has at its heart the liftmorphism for the translation of the alphabets of the operatives and inoperatives and the rhss of the production rules. since the rest of the translation follows trivially from this, we dispense with a formal definition. note that for better readability, we omit all the 0and 1-place composition symbols. to further illustrate the techniques, we present the continuation of example 2.5.



similarly to the tree-walking automaton for dominance, we also have to construct a tree-walking automaton for the intended precedence relation. since the rtgs in all the examples we have given are linear rtgs, i.e, they do not use a variable more than once on any rhs, we can present the definition for precedence in two steps as follows.



the classical technique of interpreting a relational structure within another one forms the basis for mso transductions. intuitively, the output tree is interpreted on the input tree. e.g., suppose that we want to transduce the input tree t1 into the output tree t2. the nodes of the output tree t2 will be a subset of the nodes from t1 specified with a unary mso relation ranging over the nodes of t1. the daughter relation will be specified with a binary mso relation with free variables x and y ranging over the nodes from t1.



