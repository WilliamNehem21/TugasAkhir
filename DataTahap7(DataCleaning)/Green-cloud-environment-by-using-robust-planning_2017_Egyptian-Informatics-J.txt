rithm by 70%, and it increases processors utilization by 10% with respect to the heft and triplet algorithms. in, the authors presented a hybrid cloud optimized cost scheduling algorithm that decides which resources should be leased from the public cloud and aggregated to the private cloud to reduce costs while achieving the established desired execution time. hcoc tried to optimize the monetary execution costs while maintaining the execution time lower than deadline.



updated information. the procedure helped to achieve considerable improvement in resource utilization and energy efficiency in any given resource contentious environment. in, authors had presented a thorough review of workflow scheduling algorithms under different classes. authors proposed a paradigm to classify the existing workflow scheduling algorithms and presented a useful concluding remark. in, authors presents a workflow schedule



consists of three major phases to first find the trade-off points between the minimum makespan increase and the maximum resource usage reduction, and to consolidate tasks and resources leading to significant improvement in resource efficiency. based on results from extensive experiments with five real-world scientific workflows confirm the claims. finally, this work study revealed that by allowing a small degree of makespan increase, such exploitation reduces resource usage far greater than any incurred makespan increase. based on results obtained from our extensive simulations using scientific workflow traces, we demonstrate mer is capable of reducing the amount of actual resources used by 54% with an average makespan increase of less than 10%.



in, authors identified& explained the aspects and classifications unique to workflow scheduling in the cloud environment in three categories, namely, scheduling process, task and resource. lastly, review of several scheduling techniques are included and classified onto the proposed taxonomies. the proposed taxonomies serve as a stepping stone for those entering this research area and for further development of scheduling technique. the present taxonomies of cloud workflow scheduling problems and techniques based on analysis of existing research literature, which classifies techniques in grid workflow scheduling, by adding new aspects unique to cloud computing and refining some existing ones. it is noticeable that almost every technique proposed so far has the assumption that resources are virtual machine instances(i.e. infrastructure-as-a-service).



most of the works reviewed in this section refers to scheduling with objective of reducing makespan, improving resource utilization and reducing financial liabilities. most proposals lack basic consideration like hybrid of scheduling techniques. with limited scope of improvement in scheduling schemes and without considering out-of-box alteration, this work presents a mathematical viable solution for improving the performance of scheduling algorithms.



heft is based on global approach on scheduling without taking into consideration the complete set of tasks in ready queue. this poor approximation of ready queue tasks affects the performance of heft in highly resource available environment. heft performs allocation of tasks to vms on the basis of ranks. heft is accepted widely in various projects of significant importance like askalon project to provide scheduling for a quantum chemistry application, wien2k, and a hydrological application, invmod on the austrian grid.



this section presents a hybrid planning algorithm for cloud environment which addresses the limitations of heft. section 3 discussed heft planning algorithm which is one of the most promising planning algorithm. heft works on the centralized approach and utilizes the ranks of the tasks as decision parameter while subjecting next tasks to some free vm. ranked tasks are arranged and scheduled in non-increasing order by their ranks. next-ranked task is assigned to next free vm. this assignment/ mapping of ranked task to free/available vm is random. no suitability criteria were used for this mapping. as a result heft could poorly approximate the ready queue. the schedules obtained from heft were not able to utilize the available resources in best possible way. these many limitations of heft provide motivation for some improvements in the functioning of heft.



dheft used the concept of distributed approach and maps the tasks without computing ranks. distributing the decision of taskvm mapping and considering earliest finish time first approach, dheft improves makespan characteristics in comparison to heft. in rheft, phase 2 identifies a subset of independent or free tasks which better approximates set of tasks in ready queue. in 50 to 100 utilization improved marginally at vm= 10 and vm= 20. for a given set of tasks, selection of tasks for execution is independent of available resources. extra resources are thus waste in heft. in case of dheft, no ranks were calculated. it was based on the principle of earliest finish time. in dheft, a better task-vm mapping was resulted. this improves the makespan characteristics in dheft as compared to that of heft.



when it comes to rheft, the performance is much better than other schemes. utilization in rheft is more than both heft and dheft, but utilization is falling with higher resource availability. the falling trend in utilization is best compensated with reduced makespan characteristics of rheft. rheft exploits the resources exhibits consistent utilization across different availability levels of resources. the resultant algorithm is thus named robust heft. the error analysis presented at ci= 95%, justifies the nomenclature of robust heft(rheft). the extension of rheft which approximates ready queue even better than rheft is future scope of this work.



