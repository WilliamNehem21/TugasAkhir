the specification language csp-casl allows one to model processes as well as data of distributed systems within one framework. in our paper, we describe how a combination of the existing tools hets and cspprover can solve the challenges that csp-casl raises on integrated theorem proving for processes and data. for building this new tool, the automated generation of theorems and their proofs in isabelle/hol plays a fundamental role. a case study of industrial strength demonstrates that our approach scales up to complex problems.



here, we develop theorem proving support for csp-casl and show that our approach scales up to practically relevant systems such as the ep2 standard. cspcasl comes with a simple, but powerful notion of refinement. csp-casl refinement can be decomposed into first a refinement step on data only and then a refinement step on processes. data refinement is well understood in the casl context and has good tool support already. thus, we focus here on process refinement. the basic idea is to re-use existing tools for the languages casl and csp, namely for casl the tool hets and for csp the tool csp-prover[8,9,10,11], both of which are based on the theorem prover isabelle/hol. this re-use is possible thanks to the definition of the csp-casl semantics in a two step approach: first, the data specified in casl is translated into an alphabet of communications, which, in the second step, is used within the processes, where the standard csp semantics are applied.



our paper is organised as follows: section 2 introduces the csp-casl semantics along with a case study from the ep2 system. section 3 describes the existing tools which we make use of. the overall architecture of csp-casl-prover is presented in section 4. first we discuss how to build an alphabet to be used as a parameter for



theorem 2.1 allows the decomposition of a csp-casl refinement(sp, p)~d(sp',p') into(1) a casl refinement step from sp to sp' and(2) a csp-casl refinement step from(sp',p)~d(sp',p'), where the data part remains constant, namely sp'. for(1), the tool hets already offers tool support. thus, we concentrate here on(2). concrete: we provide an automatic translation of csp-casl refinement over constant data parts into the input language of csp-prover.



can be discharged by various theorem provers, such as isabelle/hol or spass. hets is written in the functional programming language haskell. the hets code base defines a rich type system which captures mathematical notions such as logics, comorphisms, casl specifications, theories, etc. hets makes use of monadic programming in order to simulate states within haskell.



aim of the alphabet construction is to create an alphabet of communications(the new type alphabet) in isabelle/hol as set out in section 2.2. we then use this type within csp-prover to form the type alphabet proc of csp processes over the alphabet of communications.



