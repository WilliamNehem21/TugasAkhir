ontologies are used to support access to a multitude of databases that cover domains relevant information. het- erogeneity and different semantics can be accessed by using structured texts and descriptions in a hierarchical concept definition. we are interested in life sciences (ls) related ontologies including components taken from molecular biology, bioinformatics, physics, chemistry, medicine and other related areas. an ontology comprises: [41] or agbase [42]. gochase [43] corrects errors in gene product anno- tations through the gene ontology. the gopubmed application [44] also uses go to categorize millions of articles in pubmed [45]. it enables biology domain specialists to read, search and update open biomedi- cal ontologies (obo) [46] pertaining to anatomy, health, biochemistry or phenotype, including the cell ontology [47] and an increasing vari- ety of species specific anatomy ontologies, like uberon [48,49]. uberon comprises the terminology for the anatomical domains of an expand- ing range of existing and emerging research organisms, allowing com- parative evolutionary investigations. online ontology tools like amigo



[27] (now called ontoedit [131]) was the initial iteration of this widely used application for building and maintaining ontologies. neon toolkit [132], made public in 2006, was founded on it. it provides users with access to design pattern-based processes [133]. its utility seems to fade currently [133]. obo-edit [31], a particular ontology editor for biolo- gists, is another example of an ode that is currently available. other examples are vocbench [29], an open-source ode that is still used by many businesses, and fluent editor [28]. despite being advertised as a straightforward ontology editor on the w3c website, swoop [30] still lacks a project website. the following two odes emerged that have been crucial in the past: kaon2 [134] and webode [135]. we now report on some details of the graphical tools.



individuals by class: it lists all the individuals included in the ontol- ogy. individual annotations and individual usage are examined in this section. we can add types or show whether there are distinct or similar individuals in the description. the property assertions box also allows the user to report positive or negative assertions for ob- ject properties and data properties.



owldoc: it comprises two components: owldoc view and owldoc export. a dynamic view of any class, property, or selected individual can be created using owldoc view. when the presentation is over, owldoc export transfers it to a directory so that a browser can open it. owldoc gathers a collection of static html pages that can be given to other users or published on the internet.



the owl ontology browser and editor called swoop [30] was cre- ated at the american university of maryland. the w3c website, de- scribed it as a compact and straightforward ontology editor, fully im- plemented and accessible for owl. it has a web-oriented approach and includes many common browser features: address bar, history buttons, bookmarks and hypertext navigation. the primary panel of the appli- cation, which is divided into two tabs, is where most of the work is done. the ontology info panel provides general details about it, such as name, annotations, entity counts, and statistics on entity traits. the species validation panel depicts each entity and describes its traits or the nature it assumed in the ontology (class, property or individual). three different display options are available for the ontology entities. one can create a comprehensive list of all existing entities, arranged alphabeti- cally, or can examine class or attribute hierarchies, proposed with a tree structure. in addition, each phrase is linked to a symbol that designates the category (class, property or individual). swoop users have the option to build a brand-new ontology from scratch or to use an already-traced



ontology renderer plugin: it specializes in ontology interpretation and can read the expressiveness of the logic description and the number of entities. it can also read existing annotations and iden- tify them. finally, it can identify the logical structures that establish the place of the ontology within the owl species.



annotea framework: it accepts the idea of isolating the ontology annotations from the core; it permits the use of a particular rdf vocabulary that can be extended to the annotations and it offers a mechanism for their publication on servers inside the annotea group. the result is the creation of a new annotation class called the an- notea scheme. this class records ontology modifications and sends a warning message if anyone of them is not appropriate. the ontology graph visualization plug-in and natural language entity renderer are two additional plug-ins, helpful to the software as add-ons.



general characteristics and common knowledge regarding experimental studies, as well as to allow the communication among users, opening the opportunity to explore e-science concepts into the ls experimenta- tion domain. potential future research directions would be to automate the process of creating the ontology. beyond the creation of new on- tologies, another challenging area of work in the subject of ontologies is the evolution and mapping of current ontologies. due to the cost of cre- ation, abstraction, and reusability, this is significant. different types of ontologies can be derived from a core ontology to suit particular appli-



