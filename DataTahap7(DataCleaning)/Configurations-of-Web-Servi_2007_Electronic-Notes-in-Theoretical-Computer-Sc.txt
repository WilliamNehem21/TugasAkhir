in practice, web service composition is described in terms of either choreography or orchestration languages. the former specifies the conversation rules which govern interactions between all the services involved in a particular application, whereas the latter provides means to program a specific service, called the orchestrator, responsible for some form of external coordination of the services. these two approaches have been separately developed by industrial consortia and international organizations such as w3c and oasis. in particular, ws-cdl and bpel4ws specifications represent the most credited languages for the web services technology which deal with choreography and orchestration respectively.



this model is based on a notion of software connector which regulates the flow of data by relating data items present to its input and output ports. typically the coordinated entities are regarded as black-boxes, characterized by a set of ports through which data values are sent or received. ports have a polarity(either input or output) and, maybe, a type to classify the admissible values.



as mentioned before, in exogenous coordination models, like or, components are black box entities accessed by purely syntactic interfaces. the role of an interface is restricted to keeping track of port names and, possibly, of admissible types for data items flowing through them 3. for a web-service, however, the specification of the corresponding workflow pattern is as important as the description of the available actions or of the orchestration structure. this leads to the following definition:



ports are interface points through which messages flow. each port has an interaction polarity(either input or output), but, in general, connectors are blind with respect to the data values flowing through them. another particular characteristic is the ability to construct complex connectors out of simpler ones using a set of combinators.



a drain has two input, but no output, ports. therefore, it looses any data item crossing its boundaries. a drain is synchronous if both write operations are requested to succeed at the same time(which implies that each write attempt remains pending until another write occurs in the other end-point). it is asynchronous if, on the other hand, write operations in the two ports do not coincide. the formal definitions are, respectively,



its effect is to plug ports with identical polarity. the aggregation of output ports is done by a right join(c i> z), where c is a connector, i and j are ports and z is a fresh name used to identify the new port. port z receives asynchronously messages sent by either i or j. when messages are sent at same time the combinator chooses one of them in a nondeterministic way.



language semantics. whether formal models, like the one discussed in this paper, can be of use in providing precise semantic foundations of emerging languages for web services composition(e.g., bpel4ws, xlang or ws-cdl, among others) remains a challenge we intend to face in future work. its relevance, from the point of view of software engineering, cannot be underestimated.



