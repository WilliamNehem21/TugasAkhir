although the java code of an artificial environment can be written by hand, the preferred way is to generate it automatically from a high-level model of its behavior. the model can be written by hand or constructed automatically, e.g., based on the behavior of the component subject to checking.



in this paper, we aim at efficient detection of concurrency errors(deadlocks, race conditions) in java components using the java pathfinder model checker(jpf). therefore, in our case the challenge is to decide what the behavior of the artificial environment should be in order to make it possible for jpf to find at least some concurrency errors before it runs out of available memory or reasonable time due to state explosion. note that although state explosion is typically caused by a high number of parallel threads in the program and/or by big data domains, we focus only on the level of parallelism, since big data domains are not a problem in our case(see the end of sect. 1 for details).



method of a component for an arbitrary finite number of times, and in parallel with other calls of all the methods(including parallel calls of the same method). it allows jpf to find all the errors, and can be easily constructed in an automated way. on the other hand, it is not possible to use such an environment in most cases, since verification with jpf is then prone to state explosion due to high number of parallel threads, even if the well-known approaches for addressing state explosion are used.



currency errors in parallel execution of two or more instances of the same method. however, for simplicity we explain the algorithm only for a set s of methods. generalization to a list is straightforward, e.g. via adding different suffixes to elements that correspond to the same method. the actual process of model construction consists of the following four steps:



given a java class that implements a component, the analysis is applied separately on each method. it involves(i) construction of the control-flow graph of the method in a similar way to, and(ii) a linear scan of java byte code instructions in each control-flow path, which identifies all shared variable accesses in the paths. an access to a shared variable is represented by any instruction that either reads the content of a variable from the shared memory or writes to such a variable. since the number of shared variable accesses may differ over control-flow paths, we define the number of shared variable accesses for a method as an average of the numbers for all control-flow paths. typically, the numbers for different control-flow paths are roughly the same and thus the average is a good approximation.



to answer these questions, we have performed a number of experiments on two real-life java components. we have used the concurrenthashmap class(2000 lines of code(loc) in java) from the implementation of the java.util.concurrent package in gnu classpath(version 0.97.1) and the daisy file system(800 loc), which was used as an assignment for the challenge problem at the cav/issta 2004 event



the daisy file system contains concurrency errors prepared by author(s. qadeer) in advance for the purpose of evaluation of various verification tools. in case of concurrenthashmap, we have manually injected an error(race condition) via removal of calls of lock() and unlock() in the size method.



the characteristics of each experiment that we measured are total time in seconds and amount of memory(in mb) needed by jpf. total time includes the time needed to construct the artificial environment(and its behavior model, i.e. time needed to perform static analysis and compute the sva metric) and time needed by jpf to find an error.



best option with respect to efficient detection of concurrency errors would be to use ordered pairs or ordered lists with those combinations of values of the sva metric parameters that prefer extreme sharing(i.e. ees and een). again, since the sva metric is based on a heuristic, it is not realistic to expect that the combinations ees and een will give the best results for all components.



similarly, we are not aware of any concurrency-related complexity metrics for modern object-oriented programming languages(c++, java). although there exist several approaches to measuring the complexity of concurrent programs in ada(,), none of them could be used instead of our sva metric. in particular, they either measure the control-flow complexity of concurrent programs or aim at ada-specific constructs like active rendezvous.



although the technique proposed in this paper aims at components implemented in java, it can be ported to another programming language(e.g., c or c#), provided a model checker that supports verification of multi-threaded programs written in the language is available.



