generation of labelled transition systems from system specifications is highly dependent on efficient rewriting(or related techniques). we give an account of the implementation of two rewriters of the mcrl2 toolset. these rewriters work on open terms and use nonlinear match trees. a comparison is made with other commonly used efficient rewriters.



first, we introduce the part of the mcrl2 data language that is relevant for rewriting and the general architecture of our implementations in sect. 2. in sect. 3 we discuss the matching algorithm used and sect. 4 and sect. 5 contain the descriptions of the innermost and jitty rewriters, respectively. we conclude with an analysis of some benchmarks in sect. 6.



match trees determine the way a term is matched; each node of a tree represents a basic instruction and guides the path through the tree. we start at the root and walk up the tree, choosing branches based on the result of matching so far. for example, one node could be to check whether a(sub)term has a specific head symbol. matching continues with one branch if the symbol was found and with the other branch otherwise.



the first rule indicates that as soon as there is a tree indicating a positive match, we can just return that match and ignore the other trees. in the rule for s we introduce a fresh variable to avoid conflicts with variables in other trees. when applying the f rule for a symbol f, we consider all trees that have such a root node. this is done as the first subtree of an f processes arguments of the matched function symbol and this can only be done once(due to the matching function). also, during matching of the arguments(of the subterm), the other trees that do not participate need to be ignored until f and its arguments are completely matched. for this reason we add the necessary n nodes to these trees.



there are several optimisations to the above. for example, between two n nodes, we can ensure that matching a variable occurs only once and we can combine all s nodes into one, as they all store the same term. in case both subtrees of an m or c node are the same, we can replace it with the subtree itself. also, s nodes that bind a value to a variable that is never used in the subtree can be replaced by the subtree.



a specialised function for a function symbol f uses the match tree for f to see if any rule can be applied. if this is the case, the right-hand side of that rule is built and the generic rewrite function is called on this term. if no rule matches, then the original term is built and returned. an example of the code that would be generated of a function with rewrite rule f(c, x)= g(h(x), x) is as follows.



one important optimisation is that of avoiding needless traversal of normal forms. the main observation here is that one can assume that the arguments of a specific rewrite function are already in normal form. this is the case when called from the main rewrite function, as it first explicitly rewrites these arguments, and also needs to be the case when called from a specific rewrite function.



in our case we also have to consider applicative terms. this means that a function of arity n has at most n arguments(instead of exactly n). this is solved by generating specific rewrite functions for each function symbol and number of arguments allowed. so, for f we would have two additional rewrite functions(i.e. one for one argument and another for no arguments at all).



because we do not want to burden our users with supplying strategies themselves, we need to generate reasonable strategies from a given set of rewrite rules(i.e. one strategy per function symbol). this is done by observing which arguments need to be rewritten to be able to match a given rule. an argument that is needed for matching by most of the rules is added to the strategy, indicating it needs to be rewritten first. in the case that all arguments of a rule that are essential for matching are rewritten, this rule is added to the strategy. this process continues until all rules and arguments are in the strategy.



this translation adds the annotated function symbols and annotated copies of the rewrite rules. it makes sure that the right-hand side of rules correctly uses the annotations based on the annotation of the head symbol of the left-hand side and which arguments will be rewritten before application. it also adds rules to remove the annotations.



for these latter rules the code generation has to be adapted such that these are only applied in case no other rule matches. this way we make sure that normal forms are always without annotations, which ensures that matching does not have to consider annotations at all. the function symbols with an annotation indicating that none of the arguments are in normal form can be safely replaced by the unannotated version.



very expensive in our implementation. the memory extensive evaltree benchmarks, where jitty is about twelve times slower than our innermost rewriter, seems to support this. also note that the evalsym benchmark, meant to test pure calculation speed, favors those that use a lazy implementation(asf+sdf and the mcrl2 innermost rewriter are the only strict innermost rewriters).



benchmarks are given to illustrate the improvement this jitty rewriter is over the innermost rewriters used for lts generation. for closed term rewriting we have shown that our innermost rewriter can compete with the best rewriters currently available(ignoring the effects of lazy rewriting) and that jitty is a bit slower. the latter is likely due to the fact that in this implementation more intermediate terms have to be constructed, which is quite expensive.



the fact that the rewriters used for lts generation can clearly compete with the fastest rewriters for functional languages seems to suggest that adapting the latter to support open term rewriting(which is essential for lts generation) should not be a problem. that is, unless these functional languages support additional features with respect to the more basic languages used in process specifications that are fundamentally in conflict with efficient open term rewriting. in any case, such an adaptation would allow developers and users of tools centered around process behaviour and theorem proving(and most likely other fields as well) to have direct access to the functionality offered by the expertise of the functional programming community.



