this paper presents a non-intrusive method for objective caml code coverage analysis. while classic methods rewrite the source code to an instrumented version that will produce traces at runtime, our approach chooses not to rewrite the source code. instead, we use a virtual machine to monitor instructions execution and produce traces. these low-level traces are used to create a machine code coverage report. combined with control-flow debug information, they can be analyzed to produce a source code coverage report. the purpose of this approach is to make available a method to generate code coverage analysis with the same binary for testing and for production. our customized virtual machine respects the same semantics as the original virtual machine; one of its original aspects is that it is implemented in the objective caml, the very language we build the tool for.







the french company esterel technologies 6 decided in 2006 to base its new scade suite 6tm 7[4,5] certifiable code generator on objective caml. esterel technologies markets scade suite 6tm, a model-based development environment dedicated to safety-critical embedded software. the code generator(kcg 8) of this suite that translates models into embedded c code is do-178b compliant and allows to shorten the certification process of avionics projects which use it.



the do-178b standard applies to embedded code development tools with the same criteria as the code itself. this means that the tool development must follow its own coding standard. the certification standard originally targeted only embedded software, so its application for a development tool must be adapted. for instance, for a code generator it is accepted to use dynamic allocation and have recursive functions. the specificity of the certification process for tools is under discussion to be explicitly addressed by the forthcoming do-178c standard that should be effective soon.



among the numerous testing activities, one is making reports on code coverage. this activity has a set of constraints other than just showing whether some code is alive or dead: for instance, if a result is a complex boolean expression, it is not enough to show that it has been evaluated(to any value). neither is it enough to show it has taken both true and false values. indeed, a complex boolean expression is composed with sub boolean expressions, and these also have to have taken both true and false values. plus, if two subexpressions always return the same value, it is suspicious: are they duplicated?



mlcov is an open source code coverage measurement tool for objective caml developed by esterel technologies. mlcov only treats the functional and imperative features of objective caml, which correspond to the subset allowed by the coding rules of the scade-to-c compiler. this subset remains quite large, for instance, it is sufficient to compile the standard library of the objective caml distribution.



coverage is measured by instrumenting the source code of the program. with respect to objective caml, we state that an expression is covered as soon as its evaluation ends. the main idea of the instrumentation algorithm is to replace each expression expr with(let aux= expr in mark(); aux), where variable aux is not free in expr, and mark() is a side-effect allowing to record that this point of the program has been reached.



the new developed-in-objective-caml kcg is certified with respect to iec 61508 and en 50128 norms. it is used in several civil avionics do-178b projects(e.g., for the a380 airbus plane) and will be qualified simultaneously to the project qualifications(with do-178b, the tools are not qualified by themselves, but by their usage in a project).



for common traditional processors, qemu is used as a free-software emulator(power-pc,...) which can generate traces. this allows non-intrusive analysis on final target code with emulators running on development hosts. in this part, the adacore 9 company develops tools which are independent from the language, like ada or c, and from the compiler, by using source dwarf debug info. this independance implies additional yet several restrictions for mc/dc.



compiler in the debug mode. this information, called events, indicates the beginning or the end of an expression. with these events, the control flow graph of a program can be rebuilt during or after an execution. for mc/dc analysis more information is needed, so the original objective caml compiler has to be modified. this will be discussed in section 6.



zam is a stack-based virtual machine for a functional-based multiparadigm programming language. it only uses 7 registers: an accumulator to store a value, a code pointer(next instruction to interpret), a stack pointer, another stack pointer for the highest exception handler, an extra arguments counter, an environment(a value array) and a global data(a value array). zam interprets 146 different instructions, about 60% of which are shortcuts for several instructions combinations. 18 instructions are for arithmetic and boolean operations.



in java code: the java implementation, called cadmium, allows an objective caml program to be executed on any machine that has a java virtual machine, without having to install the whole objective caml system. for instance, this can be used to easily run objective caml programs on a web page. parts of its runtime library rely on java runtime library such as garbage collection, the other part is in java.



it is important to note that whereas objective caml is strongly statically typed, its virtual machine is untyped. this design was motivated by the guarantee that static type checking process frees the runtime process from making any type checks. writing an objective caml virtual machine in objective caml implies writing an untyped virtual machine for a strongly typed programming language in a strongly typed programming language. it is analog with the runtime library: objective caml runtime library has two parts: the low-level part is a set of c functions that may access low-level data representations, and the high-level part is a set of objective caml functions that may use functions implemented in c code.



the first case is not trivial with an alternative bytecode interpreter. in our case, with zamcov, c_call instructions will be interpreted by an objective caml function, and will mean calling an objective caml function. thus, for instance, when calling a i/o operation(or any operation that cannot be directly represented by some bytecode instructions), an indirection is added. the source code in objective caml is compiled to bytecode, which is then interpreted by an objective caml program. for instance, to call a c function foo from the original virtual machine, the c_call instruction is used with"foo" as first argument and it will call the c function. this c function cannot be called directly at the interpretation of a c_call



zamcov uses debug events and execution traces to check which expressions in the source code are covered or non-covered. debug events contain information to associate bytecode instructions addresses to their corresponding source code. so, to report source code coverage, for each debug event, if its associated bytecode instructions have been activated according to the execution traces, then its associated source code is covered. if a debug event cannot be related with the execution trace, it means that the associated expression is non-covered.



objective caml program(factorial). this report shows the source code files list of the coverage-measured program. each file has a expression coverage rate which shows the difference between the number of non-covered debug events and the total number of debug events. for each file, there is a link to its source code coverage. there is also an html link to the machine code coverage of the program.



x= 0 is never executed when calling fact 5, that is why the first 1 is noncovered. the structural coverage of this example is not complete. for function fact to be fully covered(expression coverage), we need to add more tests as shown in the screenshot on the left.



for more classical virtual machines, as the java virtual machine(jvm) or the common language runtime(clr) of the.net environment, we find a lot of libraries to build debug tools. they offer a set of services which exposes runtime events that occur during the execution. in java, jvmti(java virtual machine tool interface) 11 allows to write agents which can be notified of interesting occurrences through events. in.net, the clr profiling api can provide notification of many activities within the clr and managed code.



a good overview describing different ways to instrument java code is presented in. this bibliographical study compares different static and dynamic instrumentation techniques at source or bytecode level, including hybrid combinations, for java. examples using a specialized virtual machine are scarce, mainly for portability and efficiency criteria which can be important for monitoring or optimizing tools.



this work takes place in the coverage project which studies non-intrusive coverage tools for ada(to power-pc) and objective caml(to zam). in the first case the qemu emulator is used and in the second the zam virtual machine. but the compiler information needed by the modified runtime environment for the mc/dc measurement are similar for both languages.



