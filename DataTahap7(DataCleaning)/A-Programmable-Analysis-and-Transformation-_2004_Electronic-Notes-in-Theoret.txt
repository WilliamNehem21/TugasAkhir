reverse engineering refers to understanding an existing software system, and documenting the understanding in a desired format. depending upon the purpose, which can be problem diagnosis, impact analysis, functional enhancements, or re-engineering to newer technologies or newer design, the reverse engineering artifacts vary in their definition, the abstraction level, and contents. current state of practice relies on pre-cast tools, which extract a set of pre-defined information, with little or no inputs from the analyst. we propose a specification-based approach that allows analyst to specify and control the contents and abstraction level of the reverse engineering artifacts, while allowing user-interaction during extraction.



few frameworks exist, that are based on the extract-abstract-view principle. many allow querying over program sources and their structural properties, but do not support querying of semantic properties. some of these frameworks are exploratory, while others are built for specific modern languages like c, c++ and java. examples are acacia, cppanal, and dali.



our approach differs primarily in that it provides mechanisms to define abstractions, to query on semantic program properties, and enable displaying the results in different forms appropriate for the purpose. the subject programs are represented as models. this provides an inherent, first level of abstraction, and makes the framework to be language independent. in addition, the framework is based on a proven, flow-analysis framework for procedural languages, darpan. though the origin of this approach lies in our experience of building re-structuring and reverse engineering tools for cobol and rpg applications, few lessons are derived from the work of programmable reverse engineering. our work comes closest to the work by stan jarzabek and guosheng wang. however, we have imperative style of specifications as against their declarative style, we support program semantic properties and aim to provide code level transformations.



display specifications enable mapping between abstraction definition and pre-defined display types. these enable the abstractions to be viewed using the specified displays. alternately, user can view the abstractions in a manually programmed user-interface, or add new display types to the framework.



we view the source programs as models, thereby raising the level of abstraction of the input. core program analysis is viewed as a process of computing pre-defined program properties from program models. program properties, like control-flow graph, dataflow information can also be viewed as abstractions.



the framework makes program properties available as primitives. program properties like call-graph, def-use chains, alias information, copy constants, and others are computed by a data-flow analyzer, which is generated using darpan. new properties can be computed by writing new specifications for darpan or can be provided by the user. the idea is to apply these properties to the program elements of interest, and based on the property values, decide whether the program element can belong to the abstraction being constructed.



these specifications allow users to specify two kinds of information. one is how the user would see the results of transformation specifications; this part consists of window specifications. second is a mapping specification to map the abstraction types to pre-defined display types. they are specified as xml specifications. an example mapping specification to display error-handling statements is written as:



these specifications will allow analysts to specify transformation of the source programs to desired target programs. this will be based on analysis abstractions extracted earlier. one example is to separate the source programs into gui layer and business layer. code generation capability will need to generate concrete syntax of the target programs.at the moment, we are working on these specifications.



the analysis and transformation framework is designed to be interpretive. the sole purpose is that the analysts can build reverse engineering tools quickly, and explore by changing the tool specifications and viewing the changed behaviour of the tool. various engines are provided to support the execution environment: search engine, abstraction engine, display engine and data-flow analyzer.



having reused existing parsers, model representation of programs and analyzer generator, the framework is currently in a prototype stage. using the prototype, we are defining er(entity-relationship) model extraction from cobol programs. we propose to use this framework for dfd(data-flow) model extraction, both of these geared towards system documentation initiative.



we describe below the steps involved in defining and implementing a reverse engineering tool using the framework. the steps mentioned here are indicative. the analyst identifies the abstractions that are to be delivered(e.g. call graph report, error handling statements, entity-relations model, etc.). for



analyst starts execution of the framework, which has a pre-defined userinterface. in case of framework-based-tool, analyst builds the tool. this runs the specification processor, generates interpreter instructions, and adds the tool to the menus of the framework. in case of non-framework-based-tool, analyst uses the build menu to specify mapping between tool and the class that implements the tool. the build will add the tool to the menus of the framework.



based on our experience of building restructuring tools, we have evolved a specification driven reverse engineering framework that is independent of the programming language. the prototype has enabled tool builders to rapidly experiment with program analysis based, reverse engineering tools, and change the tool behaviour quickly. we believe that support for model generation, a proper balance between number of primitives and flexibility of specifications, and ability to integrate existing viewing tools, will go a long way to prove utility of this framework.



