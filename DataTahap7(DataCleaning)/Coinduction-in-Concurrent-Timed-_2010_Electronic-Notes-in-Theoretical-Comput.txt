universal coalgebra as a general theory of(dynamical) systems offers definitions and proofs by coinduction, which are complementary to classical approaches based on induction and turned out to be valuable in simplifying the definitions and proofs of many concepts and properties that are hard or even impossible to formulate within the algebraic framework. the techniques borrowed from coalgebra have proven their usefullness in many areas of theoretical computer science(e.g. functional and object orienting programming), but also in control theory, in particular of discrete state transition systems that are called in control community discrete-event systems. the reference model for discrete-event systems are partial automata, which are coalgebras of a functor on the category of sets. they have been studied in as the model for control of discrete-event(dynamical) systems(des) together with the partial automaton of(partial) languages as the final coalgebra. purely logical des in the form of partial automata have also been studied using coalgebraic techniques in.



as for timed transition systems, there are two basic ways of representing complex timed systems with concurrency(i.e. simultaneous occurrence of events) by wa: use of nondeterminism and synchronous product constructs. the first one relies on nondeterminism. indeed, it is well known that unlike logical automata, nondeterministic wa have significantly higher expressive power compared to deterministic ones. more specifically, it is known from that nondeterministic(max,+)automata have a strong expressive power in terms of timed petri nets: every 1-safe timed petri net can be represented by a special(max,+) automaton, called heap model. the advantage of nondeterministic wa is that these are typically much smaller than their deterministic counterparts with the same behavior(if these happen to exist at all as finite wa). however, this approach is not easy to apply, because of problems with determinization and decidability issues.



(max,+)-automata based on tensor linear algebra and extended(multi-event set) alphabet in. it turned out that there is no algebraic formula in terms of local(algebraic) behaviors(formal power series), but only using linear(automata) representations. in this paper a coalgebraic definition is given using coinductive definitions on stream functionals.



the paper is organized as follows. in section 2 mealy automata as coalgebras are recalled and partial mealy automata are proposed. final coalgebras of partial mealy automata are studied and two theorems of functional stream calculus are stated. section 3 is an introduction to deterministic(max,+) automata and their algebraic and coalgebraic behaviors. the notion of a timed language is recalled and compared to formal power series and causal stream functions. in section 4 coinductive definition of synchronous product of causal stream functions is proposed. an example is presented that illustrates the coalgebraic approach to concurrent timed systems. finally, section 5 proposes a discussion and hints for future investigations.



posed in. it is assumed that a distributed timed system is given by two deterministic(max,+)-automata. let g1=(s1, t1) and g2=(s2, t2) be two(max,+)automata defined over local alphabets a1 and a2. then associated natural projec-



in the logical setting trace theory has been developed, where events that may occur simultaneously are related by independence relation. however, it is not clear how to extend the trace theory into the timed transition systems setting. let us recall that classical composition of weighted automata is simply given by tensor product of their linear representations. this corresponds to classical synchronous product of underlying boolean automata, but the duration of a transition in the synchronous product is the product(i.e. conventional sum in rmax)of the durai.e. independent of the linear representation g1 of l1 and g2 of l2. a definition for behaviors is only possible if automata representations are fixed, but there is no algebraic definition independent of automata representation. yet, the formula for behavior of the synchronous product from is very complex and not practical



it is only possible to give automata definitions. it seems that there is no algebraic formula in terms of local(algebraic) behaviors(formal power series), but only using linear(automata) representations. coalgebraic framework makes it simpler due to the fact that final coalgebras are endowed with the same automaton structure as another automaton of a given functor. in fact, algebraic behaviors(formal power series) formal power series can also be endowed with a coalgebra structure, but only for the moore automata functor. maybe for this reason the algebraic definition of synchronous product is not so elegant and it seems to works on automata representations only: we could not find any definition for formal power series.



pia correspond to an important class of timed automata, where the clocks are read(i.e. compared to constants in transition guards) and reset in a particular fashion: there are n clocks(one per component) and during a transition in a pia only clocks that correspond to the components that are active in a transition are read and reset. this way the reading and reseting of clocks is compatible with the distributed event set structure. thus, the usage of clocks can be completely avoided and pia can be described by symbolic purely algebraic methods.



the main advantage of the coalgebraic approach is the possibility to use coinductive definitions and proofs that are known to be pertinent in many applications. moreover, final coalgebra itself is endowed with the same structure as another coalgebra of a given functor. this helps defining operations on behaviors of state transition systems, e.g. streams,(partial) languages or(partial) stream functions, because



in this work another application demonstrating power of coinductive definitions compared to definitions by induction is given: synchronous product of behaviors of deterministic weighted automata are defined by coinduction. the main advantage of our approach is that the composed automaton remains deterministic. on the other hand, the composed system has many states and decentralized approaches must be used in order to avoid the state explosion problem. since our approach is compositional by construction, it is tailored to decentralized(component-wise) techniques.



