today, the concept of service oriented architectures provides a way of building integrated solutions out of existing services. to this end, services from different providers are composed using advanced orchestration and choreography techniques. however, while this principle allows for greater flexibility at a smaller cost, the use of third party services also includes a risk: deployed services might not work as claimed by their providers. in this paper, we propose a technique for analyzing the expected reliability of service compositions based on ratings given by(previous) service users. every service thereby comes with a reputation, and the analysis computes an overall reliability of a service composition from the reputations of its constituent services. the proposed model-driven approach proceeds by translating statechart models of service compositions into input for a probabilistic model checker(prism) using state-of-the-art model transformations techniques. the approach has been implemented as an eclipse plug-in and is fully compliant with uml.



the rest of the paper is organized as follows: in section 2 we describe the modeling and analysis formalisms used throughout the paper. section 3 describes the transformation between the design and analysis models described in these formalisms. the tool support of the proposed approach is discussed in section 4. section 5 gives an overview of related work and section 6 concludes the paper and gives some directions for future work.



a model consists of one or more uml state machines that contain an arbitrary number of parallel composed statecharts representing services(separated by regions). each statechart is described by its states and transitions, that can be triggered by an internal, receiving, or sending event which is indicated through labels a, a?, and a! respectively. for modeling these events we use the specific kinds of events provided by the uml for inter-process communication: executionevent, receivesignalevent, and sendsignalevent.



the modeling notation chosen in this work and described above is fairly straightforward and familiar to most software architects. however, it is mostly not supported by existing formal analysis techniques including model checking. therefore, in order to analyze a choreography using model checking, its model has to be first transformed into the corresponding analysis model in accepted format. the model checker used in this work is the probabilistic symbolic model checker(prism), therefore, its modeling language has to be introduced first.



the prism modeling language is based on the reactive modules formalism. it allows description of a system as a discrete time markov chain(dtmc), continuous time markov chain(ctmc), or markov decision process(mdp) model. main elements of an analysis model are modules and variables. modules contain finite range local variables and commands. a prism command has the following



modules that represent different interacting processes within the model, can be composed together in a process-algebraic expression. this expression should feature each module exactly once, and contain csp-based operators including: parallel composition with full or partial synchronization over shared actions, asynchronous parallel composition, and operators for hiding and renaming of actions within the module. an analysis model described in prism modeling language is later translated by the model checker into a markov model.



the described language allows definition of analysis models which can be used to model check various system properties including its reliability. the question to be discussed next, is the transformation of a design model of a choreography(section 2.1) into a model in the prism language.



message receipts by a service are observed by other parties. services are assumed to always accept messages, possibly discarding them later. following this assumption, such transitions always occur, and also do not directly influence the observed reliability, i.e., have probabilities of 1.



the idea behind the proposed transformation rules is to create an analysis model, where each service is represented by its own prism module with the same name. these modules contain local variables needed to describe different states of their corresponding services, and commands to describe transitions between these states. a set of local variables of such a module always contains exactly one start variable and variables for unique final states of the service. the start variable initialized with 1 represents the start state of the service.



the commands within both modules can be derived by application of the discussed transformation rules to transitions, and usage of appropriate variables and synchronization actions. the resulting model can now be analyzed in prism to check various properties of the composition. these properties have to be formalized in the prism properties specification language. in this work, in order to obtain the expected reliability, we expressed it as a probability of not reaching a failure state during the lifetime of the system or formally, for an mdp system model containing k failure states:



the eclipse platform with its flexible plug-in based architecture and numerous useful third-party plug-ins has been chosen as a development and application platform for our approach. this choice allows the reuse of already existing uml2 conform modeling tools(e.g. uml2 tools, topcased) realized as eclipse plug-ins, to support the design model definition. the following steps of our approach are not directly supported in eclipse, however, various plug-ins significantly simplified the development process of our transformation tool.



first of all, we rely on the eclipse modeling framework(emf) for storing and retrieving our models. moreover, the atl transformation language(supported by a third-party plug-in) was used to define and apply the model transformation rules. finally, we used the jet-template model-to-text engine which allowed us to generate a textual representation of the transformed model. the prism model checker is, unfortunately, not integrated within the eclipse platform, therefore, the analysis model produced by our tool has to be imported manually. the last two steps of the model-to-model transformation and the model-to-text transformation have been integrated in our tool.



depending on the technique provided system models are either directly analyzed using reduction rules to compute qos[13,20,30], or transformed into some kind of stochastic model[29,31,8,14,26,27,12] for further analysis, like in our case. the most widely used stochastic models for this purpose include markov models and stochastic petri nets with corresponding analysis algorithms. for instance, zhong and qi consider bpel specifications and transform them into stochastic petri nets for analysis. gallotti et al. consider uml activity diagrams of an orchestration extended with qos properties, and transform them into markov models. our approach is similar to as it also uses markov model and prism model checker for reliability analysis, however, it is focused on service choreographies, and, therefore, considers different uml diagrams used for communicating services.



xia et al. propose the only other approach, that we are aware of except of our, that considers choreographies. it is based on wsci specifications of compositions, which are translated into a general stochastic petri net for reliability prediction. compared to our approach, the authors focus on models at a different abstraction



later, in the authors extend to estimate system reliability. this approach is based on a system model very similar to ours. it describes communicating components as a set of concurrent state machine containing interaction protocols of components. this model is transformed into a dynamic bayesian network that includes reliabilities of individual components. compared to, our approach does not associate service reliability with its probability of start, instead sending transitions are assumed to carry reliability-relevant probabilities. unlike, where component-based systems are considered, we assume that services have no failure dependencies.



in this paper we have proposed a technique for computing the expected reliability of service choreographies based on reputations of single services. the technique involved transforming metamodel instances of uml state machines into markov decision processes in the form of an input to prism. the probabilistic model checker prism could then be used to determine the expected reliability. the approach has been implemented on the basis of state-of-the-art model transformation techniques and is uml compliant.



