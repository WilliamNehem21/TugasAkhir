modeling is widely accepted to be essential to design activity. a major benefit is the use of formal methods for analysis and predictability. in polychrony, the tool-set of the signal language, a component-based approach have been defined to model avionics applications. this approach uses signal models of so-called apex services based on the avionics standard arinc 653. this gives access to the formal tools and techniques available within polychrony for verification and analysis.



in this paper, we illustrate the approach by considering a small example of avionics application. we show how an associated signal model is obtained for the purpose of temporal validation. this brings out the capability of the signal to seamlessly address critical issues in real-time system design.





the underlying theory of the synchronous approach is that of discrete event systems and automata theory. time is logical: it is handled according to partial order and simultaneity of events. durations of execution are viewed as constraints to be verified at the implementation level. typical examples of synchronous languages are esterel, lustre, or signal which is used here.



to check a signal program, one can distinguish two kinds of properties: invariant properties(e.g. a program exhibits no contradiction between clocks of involved signals), and dynamical properties(e.g. reachability, liveness). the signal compiler itself addresses only invariant properties. for a given program, it checks the consistency of constraints between clocks of signals, and statically proves properties(e.g. the endochrony property guarantees determinism). a major part of the compiler task is referred to as the clock calculus. dynamical properties are addressed using other connected tools such as the boolean model checker sigali. performance evaluation is another functionality of polychrony,



destination. a message remains in a source port until it is transmitted by the channel or overwritten by a new occurrence of the message. during transmissions, channels ensure that messages leave source ports and reach destination ports in the same order. a received message remains in the destination port until it is overwritten.



(e.g. buff1, sema). these mechanisms are created on the occurrence of the input signal initialize. the presence of this signal corresponds to the initialization phase of the partition. the input active_partition_id represents the identifier of the running partition selected by the module-level os 8, and it denotes an execution order when it identifies the current partition. whenever the



partition executes, the partition-level os designates an active process within the partition. this is represented by its output signal active_process_id. it is sent to all the processes. every process that completes notifies the os through a special signal(e.g. end_processing1 for the process position_indicator), so the os can take a decision about the next process to execute.



a process can be blocked during its execution, for instance, when it tries to send a message to a full buffer. a time counter may be initiated to wait for the availability of space in the buffer. the signal timedout produced by the partition-level os notifies processes of the expiration of their associated time counters.



the above small example aimed to show the feasibility of describing avionics applications using the synchronous language signal. modularity and abstraction are key features of the signal programming. they allow for the scalability of our approach. the description of a large application is achieved with respect to a well-defined design methodology which consists in specifying either completely or partially(by using abstractions) sub-parts of the



an interpretation of a signal process is a process that exposes a different view of the initial one. the structure of the interpretation process is essentially the same but its computations exhibit another aspect of its behavior. the temporal interpretation exposes the time aspect and allows to see how an implementation of a specified function will behave over time.



these date signals are some sort of time-stamps providing the availability times for the values of the corresponding signals in the functional specification, in respect to a global time reference. depending on the implementation context, time can be measured using either physical time units or full clock cycles. in the first case the date signals are positive real numbers and in the second positive integers. from a cycle count integer measurement we can go on to physical time measurement by multiplying the cycle count to the cycle period.



each operation in a signal specification is represented by a node in the hierarchical conditional dependency graph, which is the internal representation of a signal program. to each node in the graph, a delay is associated. this delay is represented by the same data type as the data type used to represent dates and is a function of several parameters. the actual node delay is obtained by giving values to these parameters. the delay depends on parameters like: the operation performed by the node, data types involved, the chosen implementation, etc. furthermore, a delay can be represented by a pair of numbers corresponding to the worst and best case delays. since delays are represented by intervals, dates will be represented as intervals too. computing these dates takes into account the processing delays. it is important to note that this date mechanism allows us to go from logical to physical time.



the temporal interpretation of a signal specification is just a special case of a general non-functional interpretation. the non-functional interpretations are signal processes and as such they can be decomposed into a control and a data part. the control computations are identical to those in the initial processes from which the interpretations are derived. what changes are the data computations since they extract the information related to the particular interpretation.



p computes output values(od) from input values(i). the computations are conditioned by activation events(h) computed in the control part(cp). to compute the activation conditions h, cp uses boolean input signals(ib) and intermediate boolean signals b computed by dp. finally, certain outputs are output events(ho) computed by cp. the control parts of the initial process and its interpretation are identical, but the data computations differ. the data computations in t(p) extract the information of interest, implicit in the initial specification p.



