predicting the reliability of a software system at an architectural level during early design stages can help to make systems more dependable and avoid costs for fixing the implementation. existing reliability prediction methods for component-based systems use markov models and assume that the software architect can provide the transition probabilities between individual components. this is however not possible if the components are black boxes, only at the design stage, or not available for testing. we propose a new modelling formalism that includes parameter dependencies into software component reliability specifications. it allows the software architect to only model a system-level usage profile(i.e., parameter values and call



we present a novel approach where component developers supply component reliability specifications based on so-called stochastic regular expressions(sre), which extend regular expressions with probabilistic attributes. an sre describes the call propagation through a component service in dependency to input parameter values. software architects can compose these parametrised specifications using tools and add their application specific system-level usage profile. a transformation tool then solves the parameter dependencies inside the component reliability specifications and thereby deduces the component transition probabilities based on the system-level usage profile. with our approach, the software architect does not need to estimate transition probabilities inside the architecture model making reliability predictions more accurate.



we demonstrate the applicability of our approach by modelling the reliability of the component services of a retail management system supported by tools for the palladio component model(pcm). they allow software architects to compose individual component specifications by different developers. we make predictions with varying system-level usage profiles and show the sensitivity of the overall system reliability to individual component failure probabilities and usage profile parameters.



elling parameter dependencies can potentially be added to any existing componentbased reliability prediction approach relying on the same assumptions thereby making it more accurate and flexible. furthermore, our approach can be used for other compositional quality attributes(e.g., performance).



the paper is organised as follows. section 2 surveys related work. section 3 describes the steps of our method and explains the involved developer roles. section 4 defines our formalism on stochastic regular expressions and shows the transformation algorithm to derive markov model from the formalism. section 5 demonstrates our approach in a case study, followed by a discussion of assumptions in section 6. section 7 concludes the paper.



the field of reliability prediction for component-based software architectures has been surveyed in[5,4,7]. the approach presented in this paper is in the class of state-based methods, which assume that the control flow between the components of a software architecture can be modelled using a markov chain. goseva et al. state that most approaches rely on estimations of the transition probabilities between components. in our approach, no estimation is necessary, as each component specifies its call propagation in dependency to its own usage profile.



one of the first approaches for architecture-based reliability modelling was presented by cheung in 1980. he emphasised the fact that a system is more reliable if the unreliable parts are rarely used. he introduced a markov model to describe the control flow through a component-based software architecture. cheung computes system reliability by analysing the markov chain and incorporating the transition probabilities between different components, so that seldom used components only marginally contribute to system reliability.



hamlet et al. specify reliabilities and call propagations for each individual component. thus, the resulting models for each component shall be reusable across different architectures and system-level usage profiles. however, the approach requires the software architect to execute each component against the desired usage profile, which essentially reduces the approach to testing. the dependency of transition probabilities and input parameters is not made explicit in this approach.



each software architect assembles the component specifications in the same manner as later the component implementations. additionally, each software architect provides a usage profile for the complete system(i.e., having direct interaction with the user or other systems). based on this information, a tool traverses the architectural model and resolves the parameter dependencies in the component specifications.



this section describes our model for component reliability specification(section 4.1), and system modelling(section 4.2). afterwards it explains the necessary transformation steps to deduce a markov model from the specification(section 4.3), and shows how to solve the markov model to get a reliability prediction(section 4.4).



the algorithm creates a markov model as a side effect while traversing the abstract syntax trees of the sres. this markov model contains a failure state, which is taken if an internal action fails. therefore, the transition probability from a state representing an internal action iai to the failure state is its failure probability f p(iai).



upon traversing an external call ej, the algorithm creates a new usage profile for the called sre. it first resolves the parameter dependencies on the inputs of the call defined by the function ei(ej). then it uses these values as new usage profile. after traversing the called sre, the algorithm resolves parameter dependencies on the outputs of the call defined by the function eo(ej). the parametric dependencies of these output values may refer to the return value rv of the called sre.



the control flow of the booksale() operation distinguishes several cases. first, an item may be rated as small goods that do not have to be declared in the inventory. a branch located in the loop body reflects this fact. if an item is small goods(which corresponds to y having value 0), there is no need for stock information update. rather, some internal calculations ia1 are done. the probability p(y= 0) is part of the usage profile. second, an item can be identified by a number or by a name, which results in two different types of database queries p3 and p4. again, the usage profile determines the probabilities of both alternatives through p(z= 0).



of loop iterations, leading to more stock update operations. only in the theoretical case that the stock update cannot fail at all, the reliability is nearly independent of the number of items. in that case, it is determined only by the potential failure of transaction setup and commit, as well as the internal calculation ia1.



besides individual failure probabilities, the parametric dependencies of the control flow also need to be given as an input to reliability prediction. the specification of the internal behaviour of components given by the component developer or determined through a reverse engineering process can serve as a source of information. if no specification exists and the source code is not available, it might be still possible to reconstruct the parametric dependencies by monitoring the inputs and outputs of the component by running it as a black box in a test-bed.



our method abstracts from the concrete faults that may cause a failure. a service execution may alter the state of a component, such as the values of variables owned by the component, in an invalid way. the faulty component state might not immediately result in a failure, but at a later point in time. such coherences cannot be explicitly expressed by our approach. the same is true for the probability of failure due to usage of certain resources or message loss over a certain communication link. also, failures caused by concurrency are not explicitly captured by the sres. our approach aggregates the distinct causes of failure into one probability value, which tends to decrease accuracy of prediction.



happened. furthermore, we assume the failure probabilities of internal actions to be stochastically independent. currently the failure probability values are fixed constants. they cannot be adapted to take factors like system or component state at run-time, previous service calls or the control flow of the current call into account. such considerations are left as a topic for future work.



our approach helps component developers by providing a language to specify component reliability. it helps software architects, who can quickly assemble component reliability specification, and parametrise them for different usage profiles without knowing the internals of the components. similar existing component reliability prediction approaches can adopt our method of modelling to make their prediction more accurate and more flexible. by assessing the reliability of a system design during early development stages, potentially high costs for late life-cycle fixings of a system can be avoided.



our approach is still in an initial stage. we plan to add information about the underlying hardware resources to our model to allow to make more refined predictions. furthermore, we will add reliability models for network connections and connectors between components. another important direction is the determination of valid failure probabilities. we plan to incorporate existing approaches for determining failure probabilities into our own method and validate it on a large real-life case study.



