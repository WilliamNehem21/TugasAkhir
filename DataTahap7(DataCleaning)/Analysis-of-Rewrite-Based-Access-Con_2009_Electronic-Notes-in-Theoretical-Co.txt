example 2.2 this example is taken from the netfilter how-to 2. suppose an internet user wants to set his firewall to block any traffic coming from the exterior to his local network. since the interface associated to internet connections is usually ppp0, a simple method is to reject all new packets coming from this source. in order to demonstrate the fact that it might be convenient for a policy to contain rules beyond those which directly compute decisions, we also give some additional rules which allow two different local computers to share the same external ip address: for each outgoing packet whose origin is a local machine, its head is rewritten to a single address.



the first rule says that packets concerning established connections have to be accepted. the second rule matches any packet whose origin is the local network, which are accepted. the third rule rejects any new packet coming from the external network(ppp0). the last two rules match the ip address of the local machines and rewrites them to a single ip address visible from the external network.



it is common to identify a rewrite system(i.e., a set of rewrite rules) with the abstract reduction system it generates(i.e., the set of all derivations allowed by r). to a rewrite system corresponds directly a unique abstract reduction system that can be seen as a generic way to describe the set of all derivations. the converse is not true since from a set of derivations, the generating rewrite system is not in general uniquely determined.



a strategy can be described by enumerating all its elements or more suitably by a strategy language. various approaches have been followed, yielding slightly different strategy languages such as elan[30,8], stratego, tom[6,5] 3 or more recently maude. all these languages share the concern to provide abstract ways to express control of rule applications, by using reflexivity and the meta-level for maude, or the notion of rewriting strategies for elan or stratego. strategies such as bottom-up, top-down or leftmost-innermost are higher-order features that describe how rewrite rules should be applied. tom, elan and stratego provide flexible and expressive strategy languages where high-level strategies are defined by combining low level primitives. we refer to for more details on these strategy languages.



in the context of security policies that we want to consider here, a few strategies are of main interest: the strategy universal(r) represents all derivations generated by a set of rewrite rules r, innermost(r) represents derivations where rules of r are applied only on terms whose all strict subterms are irreducible. ordered(r1,..., rk) represents derivations where rules r1,..., rk are tried in this order on terms whose all strict subterms are irreducible. this last strategy corresponds to innermost priority rewriting(ip-rewriting for short) that is defined below.



proof if t is normalized, t is indeed ip-normalized. let us prove the converse by contraposition. if t is not in normal form, there exist an innermost position and a non empty set of rules that apply at this position. by choosing a rule with the higher-priority between them, we get an ip-rewriting step and t is not ipnormalized.



considering innermost termination in particular, specific methods have been given for instance in[2,19,23]. techniques have also been studied for termination of outermost rewriting, for termination of lazy rewriting or for termination of priority rewriting[35,21]. moreover it is often possible to prove termination in general(i.e. for the universal strategy), which implies termination under any strategy.



there is then one more branch in the narrowing tree leading to accept with the substitution(8)(x= 123.123.1.1,y= ppp0,z= new). a complete set of queries leading to the decision accept is given by the set of substitutions{(1),(2),(6),(7),(8)}.





