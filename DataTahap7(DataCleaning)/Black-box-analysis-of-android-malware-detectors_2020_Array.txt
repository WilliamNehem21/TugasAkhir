if a malware detector relies heavily on a feature that is obfuscated in a given malware sample, then the detector will likely fail to correctly classify the malware. in this research, we obfuscate selected features of known android malware samples and determine whether these obfuscated samples can still be reliably detected. using this approach, we discover which features are most significant for various sets of android malware detectors, in effect, performing a black box analysis of these detectors. we find that there is a surprisingly high degree of variability among the key features used by popular malware detectors.



various android malware detectors. in this way, we can, in effect, reverse engineer these proprietary algorithms. that is, we can determine which features a detector relies on for its capabilities. through this process, we also gain some insight into the robustness of various detectors when faced with various obfuscations. while such information is obviously useful to a malware writer, as mentioned above, this information is also important to anyone who strives to build a better malware detector.



the remainder of this paper is organized as follows. in section 2, we discuss selected example of related previous work. then in section 3, we briefly consider relevant background topics. section 4 contains our experimental results, where we analyze the effectiveness of individual obfuscations and combinations of obfuscators with respect to a set of android malware detectors. finally, section 5 contains our conclusions and provides a brief discussion of future work.



an interesting evaluation of real-world antivirus products(as of 1996) is given by gordon and ford in ref.. in their seminal paper from 2001, barak et al. formalize the concept of code obfuscation and show that such obfuscation cannot be as strong as cryptography. nevertheless, malware writers have certainly found obfuscation to be useful for evading detection, which we empirically confirm for android malware in section 4 of this paper.



as far as the authors are aware, the most similar work to that presented here is. in this previous work, black box analysis techniques are applied to the drebin android malware detector. the research in ref. highlights relevant local features, and utilizes support vector machines(svm). this differs substantially from the present paper, as is focused on attacks that target the machine learning models, rather than specific detectors. in addition, the drebin detector is described in detail in ref., so drebin is not a black box in the same sense as the virustotal detectors that we consider in this paper.



in this section, we discuss the various obfuscators that we consider in the experiments presented in section 4. by systematically obfuscating different aspects of the code, we can gain insight into which features contribute most to a given android malware detector. this information can, in turn, be used to determine the most effective ways to make malware detectors more effective and more robust.



for this project, we developed a modified version of another android malware obfuscator(aamo), that we refer to as modified aamo, or simply maamo. our maamo tool is available to any researchers who would like to conduct experiment similar to those discussed in this paper. maamo implements a wide variety of obfuscators for android code.



the resigned obfuscator resigns the apk file prior to recompilation. although this obfuscator has essentially no effect on the code itself, it could serve to defeat a malware detector that relies on a specific signature that was applied to a known malware sample. in addition, if an application is expected to be signed, this obfuscation will serve to make it less obvious that the code has been modified.



call indirections is an advanced obfuscation technique in which various function calls are directed through different values. this obfuscator has a variety of effects, including changing the register count, changing method calls, and also redirecting all calls to methods. for typical code, this obfuscation will heavily alter control flow information. this would likely have a significant effect on many types of dynamic analysis, and hence should be a powerful obfuscation for detectors that rely on dynamic information.



the renaming obfuscation renames all variables in the source code. note that this is a far more extensive renaming than occurs with the fields obuscation, as all variable names can be affected. renaming could be expected to alter signatures and adversely affect other pattern matching techniques that rely on names of variables and functions.



the use of reordering changes the order of the code in the application. this obfuscator changes the location of certain parts of the code and adjusts the control flow accordingly, so that the code executes in the proper order. such reordering can make it possible to evade signature detection, since signature detection typically depends on the order of instructions.



the goto obfuscation changes the control flow by inserting forward and backward jumps into the code. such jumps can drastically alter program flow and should have a negative impact on any malware detection technique that relies heavily on control flow information. such information is often used in dynamic analysis.



the arithmetic branch obfuscator inserts a branch condition, where only one branch can actually execute. this can greatly complicate analysis that relies on control flow, and it has the effect of inserting dead code, which can negatively impact static analysis. as with all other obfuscations considered here, this operation leaves the function of the original code unchanged.



the reflection obfuscator takes advantage of the android dynamic code loading api. specifically, all static method calls are converted into reflection calls and the reflect method is invoked on a string that contains the target method. it is not clear that this would have a large impact on most malware detection techniques.



we use the virustotal website as our source for malware detection results. at the time of our experiments, virustotal included 64 applicable malware detectors that we tested on each sample. these detectors include products from virtually all of the leading anti-virus companies, including kaspersky, mcafee, microsoft, sophos, symantec, and trend micro. in a few sporadic instances, virustotal did not return a result for a particular detector.



the virustotal website uploads a malware file to its database and then performs a scan using the various malware detectors available at the website. each uploaded file is hashed and stored in the database to reduce duplicate effort and minimize scan times. we used virustotal to scan each malware sample, and each obfuscated variant of a given sample.



before giving our main experimental results, we briefly consider false positives. antivirus products are generally tuned so as to generate an extremely low false positive rate, in spite of the fact that this will tend to result in a significantly higher false negative rate. while this may seem counterintuitive, false positives can be disastrous for any antivirus product, since customers will lose confidence in a product that flags a known clean application as malware. another concern is that a developer whose application is incorrectly flagged as malicious might suffer a major financial loss, and thus any such developer has an incentive to publicize such failings. such cases would serve to damage the reputation of the offending antivirus product.



not surprisingly, the results in this section clearly show that obfuscation can be highly effective. we find that to a large degree, the optimal obfuscation depends on the specific malware detector, as well as the actual malware under consideration. this indicates that the malware detectors considered here are fairly diverse, in the sense that they apparently rely on different features or combinations of features for detection and, furthermore, the precise set of features appears to vary somewhat for different malware samples.



remarkably, one of the tested virus detectors(eset-nod32) was able to classify all obfuscated samples as malware, while two additional detectors(ikarus and kaspersky) also yielded impressively high detection results. at the other extreme, 19 of the 64 detectors available in virustotal failed to detect any of the original(unobfuscated) malware samples in our tests. these results indicate that there is an extremely wide range of capability among the detectors in virustotal.



perhaps more surprising than the range in detector capabilities is the range in the malware samples themselves. some samples(e.g., bankbot and tubemate) seem to be extremely easy to obfuscate, in the sense that virtually any obfuscation has a large impact. on the other hand, we found that some samples(e.g., copycat and sonicspy) were not effectively obfuscated with any combination of the obfuscators under consideration. and, for at least one application(operation electric powder), selected obfuscations were effective, while most obfuscations had only a limited effect.



another interesting area of related research would consist of carefully analyzing the strengths and weaknesses of various machine learning based malware detectors when facing obfuscations of the type considered in this paper. malware detectors based on hidden markov models(hmm), support vector machines(svm), deep learning, and a wide variety of other machine learning techniques have recently shown great promise. it would be useful to quantify the robustness of such techniques, while comparing machine learning based results to existing antivirus products. our maamo tool, along with the results presented in this paper, could form the basis for such research.



