we present the design and implementation of a framework for interchangeable distributed algorithms. the algorithms are drawn from the set which includes mutual exclusion, deadlock detection and agreement protocols, and we have implemented several examples of the first tonsiswo of these. algon cts of a library of algorithms, a framework for incorporating them into a new or existing system, and a tool for evaluating comparative performance. in this way, much of the complexity related to distributed systems can be isolated in its own component level and the programmer can choose from among different algorithms in the same class based on performance in a given application. incorporating many algorithms in a single framework was made possible by the observation that algorithms in a given class, e.g. mutual exclusion, almost always expose the same methods. these methods interface with an algon scheduler which maintains state and provides convenient hooks for the application to invoke the services of the algorithm.



in this paper we describe the structure of algon in detail, with a distributed deadlock detection algorithm as the case study. we then extend the notion of separation of concerns by creating an addition layer in algon, underneath which the middleware that runs on each node can be interchanged, for example from java-rmi to corba. challenges in the re-tooling of the system, related to multiple inheritance, exceptions and the automatic generation of stubs and skeletons in our implementation language, java, were overcome in novel ways. algon has the potential to be a framework with a long life, as it can adapt to new middleware, such as.net.



many programmers have been trained to develop on workstations and find the complexity of the distributed paradigm hard to handle. middleware technologies hide much of the detail involved in achieving language interoperability and simplify maintenance, but they also introduce easily missed complexities that isolated systems seldom exhibit. in addition to the normal cognitive and abstract nature of the programming activity itself, concerns in a distributed environment include non-determinism, contention and synchronisation issues. programmers may be faced with a need to guarantee distributed mutual exclusion, to achieve distributed termination, or to detect deadlock, for example. there already exists a rich base of research from the 1980s and 1990s for solving such problems. a range of algorithms has been classified according to their function and each algorithm achieves the expected result in a different way and with different performance characteristics. however, the exact implementation of the algorithms in a particular programming language is often left unspecified[26,27]. the programmer is therefore faced with responsibility and control. separation of concerns also allows the programmer to decompose software into smaller, more manageable parts that are easier to keep up to date with evolving needs. this technique has been applied to other aspects of distributed applications, and to separating algorithms from parallelism but not as yet to distributed algorithms.



section 2 describes the architecture and general design rationale of algon. section 3 describes how the algon framework has been used to make different kinds of algorithms available. section 4 describes the mechanisms used to make the middleware level interchangeable. section 5 explains how algon is used to support decisions about algorithm choice. section 6 considers related work, and section 7 concludes.



the algon system aims to directly support monitoring of the system. the developer needs to be able to monitor system activity from a central point. it is necessary to provide the developer with a central display and control interface so that he/she can not only observe but also directly control activity in the system.



the failure of the algonnameserver during system setup will cause the system to fail but failure after the initial setup will not affect the system in any way. we are aware that this single point of failure may be seen as a weakness in the system. it is, as is common in distributed systems, necessary to weigh up the advantages of having a dynamic registration mechanism with a single point of failure against a static inflexible failureresistant naming system. we felt the former to be the better design choice. it is a relatively simple matter to replicate the algonnameserver, and this will be done if the need arises.



the whole algon distributed layer and associated components have been developed with the philosophy that if an exception is caught the system will try to continue to function regardless so as to not interfere with the functioning of the application. algon will therefore run with reduced algon functionality in order not to sabotage the continued running of the controlling application. the following section shows how the algon principles have been applied to incorporate distributed deadlock-detection algorithms.



and zero or more optional resources, rsi. the scheduler used for this algorithm is different from the scheduler used for the mutual exclusion algorithms because of the specialised functionality that each scheduler has to support. the scheduler for deadlock detection algorithms is called the ddscheduler.



the algorithms and techniques that have been developed for use in distributed systems have been traditionally divided into five classes, namely mutual exclusion algorithms, deadlock detection algorithms, agreement protocols, resource management techniques and failure recovery techniques. an algorithm is placed in one of these classes based on the effect which the algorithm achieves. examining the implementation of the algorithms in a specific class reveals an interesting feature: they all expose the same methods. for example, the algorithms in the mutual exclusion class expose the methods entercriticalsection, executecriticalsection, and leavecriticalsection. deadlock detecting algorithms all expose the detectdeadlock method. by virtue of this feature, we can abstract away from the implementation details of all the algorithms in a class by having them all conform to one clean interface. this also simplifies the process of replacing the implementation that an application uses, without changing the application itself.



an attempt to make the remoteness of the invocation transparent is bound to fail, however, because of the very real difference in the failure semantics of local and remote invocation. the programmer is therefore forced to make provision for possible failure of distributed components of his/her system, or the network linking him/her with that system, for remote invocations. java forces the programmer to do this by ensuring that java.rmi.remoteexceptions are thrown by all methods in a class which will be used remotely.



in order to explain the problems experienced in making the system middleware-independent we will expand upon the inheritance structure of algon algorithms in section 4.1, then discuss the difficulties in section 4.2 and end off by introducing the algonrmic tool, which simplifies the process for the programmer, in section 4.3.



system the specialisations of the algorithm class also extends the java.rmi.server.unicastremoteobject and remote classes. this ensures that the algorithms can have stubs generated for them and that the stubs can be distributed via the java.rmi middleware infrastructure. however, if we want to make the system middleware independent we can no longer have a java.rmi-specific implementation at such a high level in the system. we need rather to become middleware-specific at as low a level as possible and to generalise the upper inheritance structure.



exception, or a subclass of that exception. on the other hand, a method in a subclass cannot throw an exception unless its superclass method throws an exception of the same type. this feature has both advantages and disadvantages. on the one hand it is valuable to know what exceptions could be thrown by the methods of a java class. on the other hand, the current restrictions prevent programmers from easily adapting systems in response to evolving needs.



there is a way to work around this problem. we cannot change the fact that the java rmi middleware-dependent algorithm throws a remoteexception. therefore we have to ensure that the the ment interface(which the algorithm implements) throws an exception of type exception, which is a supertype of remoteexception. exception is also a supertype of all other exceptions thrown in java so that it will also act as a supertype for exceptions thrown by any java-based middleware system. the implication of this is that the middleware-independent algorithm has to catch and process exceptions for each of the ment interface methods. this is not an unrealistic expectation, since the algorithms are essentially distributed components, and this fact will cause them to fail occasionally for different reasons. it is as well if the algon system accommodates this reality of distributed systems.



since the place holder classes(such as rmimentalgorithmimpl) are essentially middleware-dependent proxies for the actual algorithms, they are generated by a tool for java.rmi called algonrmic. for an interface such as ment, algonrmic compiles the interface, and runs rmic on it so that the stubs and skeletons are ready for use by any algorithm implementing that interface.



classifying algon in order to draw comparisons with related work is not trivial. it has some similarities to reflective systems, and certainly applies separation of concerns techniques. it is also a very specialised programmer tool. a reflective system typically reasons about itself, and then acts upon itself based upon such reasoning. this definition has been applied fairly loosely to identifying the specification of concerns and allowing the programmer to specify each concern in a separate object. this can be done using proxies at compile-time or by using reflection at runtime. another approach is the definition of aspects and the use of aspect-oriented programming[8,9]. aspects are designed to address cross-cutting concerns across code. an aspect weaver then merges the aspect with the code to generate code where the concern is dealt with in a uniform way. zhang and jacobsen have applied this to middleware architecture.



ing innovative for its time, garf has two shortcomings: it was implemented in smalltalk which limits its applicability, and it does not attempt to offer a choice between different implementation techniques. algon addresses distribution issues, as does garf, but from an algorithmic perspective. rather than providing a library of functions to be used blindly, algon recognises the differing nature of distributed systems and offers programmers the capacity to tailor their systems accordingly.



in the development of the algon framework, we have implemented three popular algorithms for achieving distributed mutual exclusion and for detecting deadlocks. these, however, form a very small subset of the algorithms proposed in the domain of distributed computing. future work will include the implementation of a representative number of algorithms and techniques from all the aforementioned categories.



we have also outlined a technique for allowing interchangeable middleware. we have reason to believe the we will be able to extend the techniques outlined to other types of middleware as well. this work is ongoing. thereafter we will extend the performance visualisation interface, currently tailored to reflecting algorithm performance, to assist in judging the performance impact of a specific middleware on an application. we also envisage a c# version of algon in which corba can be interchanged with.net or any other future middleware system. the lessons learnt through this research include practical aspects of software composition, the impact of language features on system design and issues associated with evaluating complex systems at runtime.



