code generation is an increasing popular technique for implementing software product lines that produces code from abstract specifications written in domain specific languages(dsls). this paper proposes to take advantage of the similitude among the products in a domain to generate them by analogy. that is, instead of synthesizing the final code from scratch or transforming the dsl specifications, the final products are obtained by adapting a previously developed domain product. the paper also discusses the capabilities and limitations of several currently available tools and languages to implement this kind of generators and introduce a new language to overcome the limitations.



code generation is an increasing popular technique for implementing software product lines(spls) that produces code from abstract specifications written in domain specific languages(dsls)[2,3]. the next paradox usually comes up when a dsl compiler is developed. a dsl is a specialized, problem-oriented language. from the point of view of the dsl user, it is interesting that dsl is as abstract as possible(supporting the domain terminology and removing the low-level implementation details). on the other hand, from the point of view of the compiler developer, the dsl abstraction makes harder to build the compiler. that is, the further dsl specifications are from the final code, the more difficult is to transform them into final code.



this paper introduces an intermediate solution, the exemplar flexibilization language(efl), that provides new operators to overcome the regular expressions limitations. efl also supports the integration with parsers to manage marginal complex exemplar modifications. besides, efl supports the implementation of crosscutting generators, that manage variability scattered over the exemplar, and the decomposition and combination of generators.



the rest of the paper is structured as follows. section 2 summarizes efl. section 3 introduces the efl capabilities to overcome important regular expression limitations. section 4 lists successful applications of efl to solve several examples taken from the generative programming literature and to develop real spls. finally, the section 5 summarizes the presented work.



a technique for developing a dsl interpreter quickly is embedding it into a dynamic general purpose language. this way, all the host language capabilities are implicitly available from the dsl. unfortunately, the pay-off is that the dsl concrete syntax has to fit in the host language concrete syntax. efl is currently implemented applying this technique: it is a library of the ruby object oriented language 6. as we will see, thanks to the ruby extensibility, the efl concrete syntax is reasonably usable.



there are two fundamentally types of regular expressions engines: the deterministic finite automaton(dfa) and the nondeterministic finite automaton(nfa). being irrelevant for dfa engines how the regular expressions are written, the behaviour of nfa engines, however, depends on the representations of the regular expressions 13. according to jeffrey e. f. friedl, most of the programming languages 14 implement nfa engines because give more control to the programmer, since the representation of a regular expression sets the way the nfa engine backtracks during the matching resolution. besides, nfa engines provide interesting features, such as capturing parentheses and the associated backreferences($1,$2...), and lazy quantifiers.



writing a complex and time-efficient regular expression for an nfa engine may be quite hard. to simplify this work, efl provides the zoom operator(>) that supports the step-by-step writing of regular expressions. thanks to this operator, regular expressions can be chained to specify progressively a text pattern; i. e., the expression:



writing a/[(]...[)]/ regular expression for each particular case is quite hard and repetitive. fortunately, this work can be automatized using the ruby metaprogramming capabilities. for example, the next nested parentheses method receives a levels number of balanced parentheses and generates the corresponding regular expression 16. internally, this method makes a string that contains the ruby code for the corresponding regular expression and, then, calls the eval method for asking to the ruby interpreter to evaluate the string 17.



we have discussed the capabilities and limitations of some currently available tools and languages(such as text templates, regular expressions, metaparsers and transformation languages) to implement this kind of generators. we have introduced the exemplar flexibilization language(efl) which overcomes some important limitations of the studied tools and languages. in addition, we have shown that, instead of being an exclusive alternative to these tools or languages, efl can easily be integrated with many of them.



