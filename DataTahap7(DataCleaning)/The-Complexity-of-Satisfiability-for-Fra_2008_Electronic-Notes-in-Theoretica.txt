since there are infinitely many finite sets b of boolean functions, we introduce some algebraic tools to classify the complexity of the infinitely many arising satisfiability problems. a set b of boolean functions is called a clone if it is closed under superposition, which means b contains all projections and b is closed under arbitrary composition[14, chapter 1]. for a set b of boolean functions we denote with[b] the smallest clone containing b and call b a base for[b]. in post classified the



finally for(iii), membership in exptime is due to theorem 3.1(iii). hardness for exptime is obtained from reducing the word problem for polynomial-space alternating turing machines to ctl-sat(t, bf). the reduction for t={ax, ag} is straightforward and can then be modified to prove hardness for the cases t={au} and t={eu}, too. the hardness of the remaining fragments follows.



that is, for the last case of theorem 3.4, the main complexity thus lies in checking the syntactical correctness of the given formula. in order to classify the complexity of ctl-sat(t, b) beyond the complexity of its syntactical correctness, we restrict our attention to syntactically correct input formulae: let ctl-satp(t, b) denote the promise problem of deciding whether a given syntactically correct ctl(t, b)-formula is satisfiable. the following theorem refines theorem 3.4 for subclasses of tc0.



