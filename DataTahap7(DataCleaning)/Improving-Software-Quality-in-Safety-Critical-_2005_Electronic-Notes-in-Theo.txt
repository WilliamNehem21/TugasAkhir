as an instance of the method, we present the mda-based tool environment of the hidoors project. in this environment, a real-time model checker is interpreted as a platform in the sense of mda. uml designs can be annotated with verification markup, which is not only compiled to code, but also to a design verification model of the verification platform, the model-checker. in this way, model-checking for real-time designs is integrated into the model-driven development process and allows for early verification.



the approach can easily be transfered to other verification techniques. we give a preliminary classification of the possible verification platforms and analyse their interplay. the analysis reveals that for quality-aware application areas, the standard mda approach should be extended by one or more mda stacks for model-driven verification(mdv). the resulting approach, quality-driven development(qdd), is, to our knowledge, the first systematic approach to integrate code generation and verification in model-driven development.



mda is a novel, promising development architecture and process for multiplatform development. it has a lot of advantages. for instance, it promises to reuse design models over many platforms. the design specifications(platform-independent models, pim) are transformed towards a platformspecific implementation models(psm), using parameterizations and other mapping technologies. mda also tackles the design aging problem. in development often the relation between code and specifications is lost after some time because the specifications are no longer updated when the implementations evolve. since mda maintains mappings between design and implementation levels, implementation changes can better be tracked in the designs, and designs can be updated easier.



this indicates that mda, although being targeted at quality-aware application domains, such as real-time and embedded systems, does not yet offer the necessary integrated verification technology. this paper attempts to fill this gap and proposes an extension of mda for model-driven verification(mdv). for the integrated method, mda+mdv, we use the notion of quality-driven development(qdd).



the paper summarises observations from the hidoors project, in which a design verification of a real-time uml model has been envisaged, in addition to the usual code generation and code verification. in hidoors, the real-time uml designs are verified with a real-time model checker(sec. 3). for the integrated development of verification and code generation we have developed a real-time uml profile, which refines the spt profile of omg. the profile is used for code generation, as well as for the design verification with the real-time model checker.



in this framework we have discovered that mda should be extended to support design verification. it is advantageous to introduce a second kind of platform stack for verification, in parallel to the traditional mda stack(sec. 3). this leads to the definition of new verification platforms for design and code verification, and platform stacks towards the final verification model of these platforms(sec. 4). we show that in hidoors, two verification platforms are used: the model checker and a worst-case execution time analysis(wceta), which analyses the generated java system. we give an overview of the interplay of the traditional mda stack and the verification stacks of the model checker and the wceta(sec. 4.2).



qdd has more advantages. due to the tight integration with mda, mdv supports early verification. the hidoors mdv supports model-checking for real-time designs early on in the development process, even before unit testing. if the model-checker verifies the design, the code has a much better chance to be correct, which implies that the code verification becomes simpler. secondly, due to the benefits of model-driven development, the employed verification platform can be easily exchanged for others. in the hidoors framework, the employed model checker can be exchanged for another. finally, there is a lot of cross-fertilisation of the mda and the mdv stacks. because the design verification aids the code verification, and the code verification supports the design verification, it pays off to keep and maintain the design. because the design is not only used for code generation, but also for design verification, developers are encouraged to keep design and code consistent always. hence, qdd reduces the effects of design aging.



model.(this implies that we identify the platform-specific implementation model with the code.) we summarize stereotypes and tagged values under the name markup tags, because they markup uml designs, i.e., assert nonstandard domain-specific information. as usual, a model stack is a layered set of models on different abstraction levels.



the hidoors mdv stack for model verification is for intended for verifying the constraints expressed in the uml model of a system. as opposed to mda where the final target always is an implementation the final target for the mdv stack for model verification is a verification model intended as input for a model-checker. the two first levels in the mda stack are the same for mda and verification. where the platform specific model for the mda consists of java code the platform specific model for the mdv is a timed automata[2,1]. the final level of the mdv model stack is the input model for the modelchecker. the model verification works on an abstract model of the system. on this level not all details are available about the target implementation and runtime platform. to make model verification feasible some assumptions must be made. during model verification it is assumed that the time budgets



the wceta utilizes the same stack as the mda but for different purposes. similar to the mdv stack for model verification the mdv stack for code analysis is intended for verification. in this case the target is a worst-case execution time analysis(wceta) engine. wceta and model-verification works on models of different abstraction levels. while the model verification verifies constraints in the model it makes assumptions about the final implementation and runtime platform. it is up to the wceta analysis to verify that these assumptions will hold for the final implementation on the selected runtime platform.



when the systems model has passed the model verification step the model represents a feasible system. the next thing to do is to select a target platform for the system. given a target platform and a systems model the system is implemented. next follows the second major step in the mdv-process, verifying the implementation of the model. the model-verification makes certain assumptions about the implemented system. now it is up to the implementation verification step to verify that the model is implemented in such a way that these assumptions hold. when the implementation verification fails this means that the implementation breaks one ore more assumptions made by the model-verification. this means that the implemented system will not full-fill the modeled constraints in some case.



the main objective in this example is to design the controller that opens and closes the gate at a train-crossing when a train passes. there are four objects involved in the example, a sensor that detects the train as it approaches, a gate that should be closed, a sensor that detects that the train has left the train-crossing and a controller which acts upon the signal from the sensors and handles the gate. from a real-time perspective there is a constraint on the response time of the controller. the response time must be for the gate to be closed by the time the train arrives at the gate. the idea is that the train has a maximum allowed speed when it passes the gate, which together with a fixed distance between the sensor and the gate yields a time budget for closing the gate.



since the goal of mda is to generate code automatically from the model, care must be taken in the interpretation and application of timing constraints in the model. the mda code generation process can introduce new subclasses with system dependent implementations(in the following called helper classes). the methods in the new helper classes must meet the same timing constraints as those in the original class. this parallels the general constraints for proper subtyping.



once this principle is established, validating the timing of the implementation can be reduced to demonstrating that the implementations of all methods execute within the timing constraints specified in the model. since the overall timing relationships have been validated by model checking, wceta can concentrate on validation the timing of individual method calls. these method calls need only fill the timing constraints given in the model.



standard mda builds on runtime platforms. since mda is a process, which reuses design specifications, models, for several platforms, its focus is reuse. as such, mda is not concerned with correctness of the designs, which is a major disadvantage for quality-aware applications. mdv, however, employs model-driven development for verification of models on verification platforms. its focus is not on reuse, but on verification of the design models and the code. mdv intends to aid the final code verification, by transforming the designs into a form that they can be checked, validated, or proven.



design verification platforms. verification platforms provide a formal language in which features of the system can be verified statically. design verification platforms, however, verify design models(design verification). a design model is more abstract than the code. examples are petri net models, csp models, or real-time state-chart models.



typical for this scenario is that a verification platform can be more abstract or higher-level than another. this means that the system model is represented in a more abstract form than the code. for instance, the modelchecking verification model assumes certain features of the code, which have to be proven or tested later, by other verification platforms, for instance the wceta. hence, model-checking platform is more abstract, seeing less detail of the system. on the other hand, in a more abstract verification it might be easier to prove features of the abstract system. model checking works because it assumes that the interactions correspond to regular language(which is usually an abstraction). and this is the reason why qdd is attractive: in order to prove system features, a set of abstract verification platforms is needed, which relate to each other and allow for conclusions about the quality of the system.



this section investigates the relationships of the verification platforms and the runtime platform. for verification and testing of a verification platform, information has to be added to the pim. this can be done by adding markup specifications. in the following, we investigate for the example of the hidoors qdd, how the different types of markup for verification interplay for code generation in the standard mda stack(which is well-known). then, the markup may verification knowledge for verification models. in the first place, the markup may assert assumptions about lower-level verification models and, finally, the code. these constrain the lower-level models, generating proof obligations for them. assertional assumptions are an effect of abstraction. since some details of the lower-level verification platform or the runtime platform are ignored, the proof on the higher level relies on assertions that must be proven in the later platform. essentially, assertional assumptions define lemmas for proofs in higher-level models, which are proven in a lowerlevel model. hence, the assertions provide an interface between proofs in higher-level models and proofs in lower-level models.



finally, there is a kind of dual effect in qdd. in a pim, assertions about design knowledge can be specified, encoding design knowledge that helps verification in later phases. usually, a designer has more information about a system than a code analysis can find out, or a code verification can prove. in general, full verification may be rather hard for a system, however, it can be aided by additional assertions of design knowledge. then, the code verification delivers a proof that is relative to the assertions on the design level. we call this effect a design-supported code verification.



firstly, proofs on each abstraction level support proofs on other abstraction levels. in particular, design knowledge assertions support code verifications. design verification can be done on the model, and assertional assumptions can simplify them. hence, applications can be checked early on on errors, and the trust of the developer into the system is greatly improved, even before the code verification is performed.



the idea that proofs about a system can be done on different abstraction levels which are coupled via lemmata, or mappings, is a central idea in abstract interpretation. however, in this context, abstract interpretations are created by hand and not derived from design models. qdd advances here, since it embeds the idea of several abstraction levels for verifications into model-driven development, in which the distinction of design and target models plays an important role. by identifying an abstract interpretation as a specific platform, mda and abstract interpretation can be unified. of course, this paper has only done a very first step in this direction, much more work is needed.



we have shown that mda for quality-aware software needs to be extended by model-driven verification(mdv) to quality-driven development(qdd). to our knowledge, qdd is the first method for mda in quality-aware application domains, with the following advantages. with integrated design verification in model-driven development, we are able to detect errors of real-time pims early. traditional methods, testing or code verification, discover mistakes very late. since the later a mistake is found, the more expensive it is to correct, qdd should give a leading edge to increase developer productivity.



next, verification should become easier, if done in parallel on several different abstraction levels. developers should be able to detect errors that are very hard to find using traditional testing. on the one hand, assertional assumptions in a pim facilitate the design verification and can be proven in the code verification later on. on the other hand, design knowledge asser-



lastly, qdd provides an elegant extension of mda for quality-aware application domains. when regarding a verification tool as a platform, the verification engine becomes rather similar to a runtime platform. this gives qdd the flavor of unifying verification techniques and platform-oriented development into one uniform model-driven framework.



