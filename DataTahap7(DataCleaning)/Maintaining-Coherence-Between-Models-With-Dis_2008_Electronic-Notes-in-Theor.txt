integrated development environments supporting software and model evolution have to deal with the problem of maintaining coherence between code and model despite changes which may occur on both sides. rather than going through model reingeneering or code regeneration, it would be better to build a full correspondence between the starting models and keep it updated in an incremental way after each evolutionary step. in a series of previous papers, it was shown how distributed graph rewriting could support such updates. here, we show how to construct a distributed graph from individual models, through the use of synchronized rules. in particular, we discuss the case of java code and uml models, and propose an eclipse implementation of the approach.



of distributed graph rewriting[3,4] for an integrated management of modifications in the code and in the global uml model underlying a software artifact. the approach is based on identifying mappings between software elements, represented by an abstract syntax tree(ast) derivable from the code, and model elements, expressed in uml terms. both ast and uml models are seen as instances of their respective metamodels, interpreted as graph types. in this context, the construction of the correspondence between them amounts to that of their(typed) interface graph. in such a graph, each node corresponds to some abstract concept common to the two models. at the instance level, morphisms between nodes in the interface graph and the corresponding nodes are constructed.



in this paper, we show how to construct the interface graph and the associated morphisms, based on the assumption that the two models(ast and uml) already exist and are coherent in the sense that elements with the same(qualified) name refer to the same concept. the approach can be easily extended to the case of two incoherent models, so that reasons for failure can be identified. on the other hand, by assuming one of the two models as correct, repair actions can performed on the other one.



the rest of the paper develops as follows. after a brief recall of theory in section 2, we present the general pattern of transformation some of its specific instantiations in section 3. section 4 presents the eclipse implementation and conclusions are given in section 5.



in this section, we illustrate the approach to the construction of the correspondence, by showing a general template for the used transformation units and illustrating it by an example. the complete construction is described in. while the identification of corresponding elements is based on type and name identities, the main problem lies in the identification of the context, i.e. the namespace, in which to check identities. a general search template has therefore been specifically devised to address this problem.



in general, we consider the java ast as the basis for the construction process, so as to exploit the facilities for tree visit provided by eclipse. for the sake of simplicity, a slightly abstract form of java and uml model elements are used in the rules. where necessary, adaptations of the rules to the real metamodels are discussed.



eclipse is a platform centric ide which offers tools to develop and maintain software taking into account various project aspects. the whole eclipse architecture is extensible and open. indeed, tools belonging to the platform are structured as plug-ins. each plug-in can define one or more extension-points, places where another plug-in can attach itself to provide new capabilities and offer an interface to the existing ones.



correspondence construction in c2mcm is started by a call to the method startengine(icompilationunit icu), where the actual value for icu is an instance implementing the icompilationunit interface, specified by the user through the plug-in gui. this is the root of an ast built from a.java file. besides loading the ast, this method evaluates the uri of the uml2 model on which to construct the mapping and passes it to the loadmodel(uri uri) method which actually loads it.



actually, visiting the tree according to the node types allows the interleaving of rules from different transformation units. however, this does not alter the final result with respect to the normal execution of these transitions. indeed, each transformation unit resulting from the instantiation of the template produces, as its net effect, the construction of a node in the interface graph and of the mappings to uml2 and ast models, without eliminating any existing node or edge. as a result, no derived rule for each such instantiation may disrupt the positive context for the application of another(i.e. to consume something in the left-hand side of a rule). hence, building a correspondence between some elements cannot prevent the construction of other correspondences between elements in their context. we can thus conclude that any interleaving of rules from different transformation units produces the same result, provided that any partial order between rules in the same transformation unit is respected.



loadmodel() returns a package model class instance with the same name as the package java class. to avoid namespace conflicts, we adopt the convention of always using the fully qualified name org.eclipse.uml2.package. the model is loaded through a call to an emf method, as the uml2 plug-in is an extension of the eclipse modelling framework.



the first step to the eclipse implementation of a transformation unit is to identify the nodes that should be visited in the ast. the visit is started on the nodes for which a transformation unit is defined. this results in the mappings prescribed by instantiations of mapchild, and possibly in those prescribed in the instantiations of mapparent, which are optionally applied. according to the ast eclipse api, it is necessary to override the appropriate visit() method for each node type that has to be visited by the framework 2 the steps below analyze the template core notions and show the skeleton followed to build the eclipse implementation:



context identification and applicability: the identification of the context(schematised in the template as parent) for the node under examination is done by navigating the tree starting from the current node and looking for the pattern described in the mapparent() rule, also checking the applicability conditions. in most cases, this is simply done by navigating upwards until a node of a specific type is found. as node visits proceed from the root downwards, a mapping for the found parent may have been constructed in the visit of some other type with the same context(e.g. fields and methods in a class).



