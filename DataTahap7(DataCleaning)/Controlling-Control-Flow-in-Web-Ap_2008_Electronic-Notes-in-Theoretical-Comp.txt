previous solutions used continuations as a model for user interaction. however continuations are insufficient as a model of all web interactions. we believe the protocol and browsers themselves are insufficiently powerful to represent the control flow desired in a web application.



we discuss how some of these ideas may be implemented within the existing http/1.1 protocol; and what modest extensions to the protocol would enable full implementation. we also discuss the interaction with web 2.0 and the security and privacy implications of our extensions.



the web was originally designed as a read-only, hypertext medium for publishing structured documents. since then, it has evolved, seemingly at random, to become one of the predominant user interface systems currently in use. web servers have become more powerful and quickly moved from providing read-only access to files to now providing write access to databases, stock markets and shipping companies. similarly, web client software has not stood still and has added such things as opening multiple windows, tabbed browsing, cookies and bookmarking. an increase in collaboration between web users has also led to a desire to share links that will continue to work for the foreseeable future.



the web application uses cookies to create the impression of a stateful protocol. however, the user has opened multiple browser windows, and so generates responses that the application misinterprets. for example, opening two windows containing products in an online store and clicking buy on the first one to be opened may result in the second one being bought. added to this, are two browser windows the same as two tabs in the same window? 3



we look practically at how these extensions may be implemented, both within the current protocol, and also as extensions to existing browsers. finally, we examine how these enhancements interact with web 2.0, and what security and privacy implications they have.



web applications can be seen from this perspective, however, there are a number of conceptual and implementation differences. we naturally consider the web application to be the server. if we consider the client to be the web browser, then the clients are no longer orthogonal, since a user can and will open multiple browser windows within the same application. this is the main conceptual difference between web applications and classical client-server applications.



many web applications are developed using the model-view-controller(mvc) pattern, which is designed to help decouple user interfaces from the logic of the application. in the mvc pattern, the application is divided into a model, which holds all the data of the application, and one or more views, which provide user interfaces to the model. the controller manages creation and destruction of the model and the views, and coordinates input from the views into the model. the controller is also responsible for serialising access to the model by the views. use of this design pattern in web applications, for example the apache struts framework, usually considers most of the code running on the server as the model and controller, and the view as the html pages sent to the client.



one problem with this use of the mvc pattern is that the controller is often marginalised and does not really exist at all. without a controller, the mvc pattern essentially degenerates to the client-server model described above. however, the mvc pattern is a good way to think about how web applications should be written. the model is a good match to the server and the data on the server, and the concept of the view matches well to the browser windows, each describing a portion of the model. where then is the controller? we believe the controller should be seen as part of and implemented on the browser, coordinating multiple views of the same application. this is a good abstraction, but is not perfect because it does not allow the controller to moderate access by different users to the same part of the model. generally, web applications use optimistic concurrency control or no concurrency control at all, so it is not really a problem that the controller is per-user instead of per-model. it is certainly better than the current solution, which has one controller per view, since integrating the controller with the view is the same as having no controller at all.



views in the mvc pattern observe the model, and update themselves when the model changes. this is typically done by the model notifying the views when it changes. this is not possible with http, so the user must manually refresh the views when they know something has changed, or the views must poll the model.



not shareable the user is informed that this link cannot be shared publicly. optionally, the application may provide a link to the user which will take them to a part of the application where they can acquire a link that is sharable. such a link may have to be paid for, or may have a time limit, extra advertising, or other restrictions.



there is already a standard for specifying supplemental links from a page[1, sec. 12.3]. a standard for naming alternate bookmark and sharing links would need to be created and then browsers could use these elements to support the functionality described.



being informed of window closing would be very useful, since it would allow any pending actions to be reverted or saved so the user can continue from where they left off when they return to the application. this is especially important in a web 2.0 application since there is likely to be a larger amount of uncommitted user data than in an ordinary web application.



we also feel there is more to be done in separating the model, view and controller in web 2.0 applications, and while web 2.0 has made it possible to view new data without downloading the view again(i.e. to update the model), it would also be good if the view could be updated without that necessitating the model also being reloaded.



the extra features we define in section 3 are not designed to increase the security of web applications. in fact, their use could lead to careless programmers making web applications less secure. for example, programmers may assume that certain actions can not happen, when in fact they have simply asked the browser for them not to occur, something which could easily be circumvented. we hope to address this in the future by having a framework by which servers can enforce constraints, like unclonable, that are advised to the browser.



additionally, these features have an impact on user privacy. however, this impact can be minimised in two ways. firstly, each distinct web application(defined as the domain part of the url) could be treated distinctly by the browser. for example, a different set of window identifiers could be used for each domain. this would prevent a user being tracked across multiple applications, even if the applications themselves are collaborating to try and see, for example, which users are using both applications. only elements of a page fetched from the domain of the current web application would be given access to these extra features, which would restrict abuse. secondly, in order to use these extensions, a server would send metadata saying this page was part of a web application with a certain base url(which would need to contain at least the full domain of the page). the browser could then ask users whether they are willing to treat this site as a web application.



