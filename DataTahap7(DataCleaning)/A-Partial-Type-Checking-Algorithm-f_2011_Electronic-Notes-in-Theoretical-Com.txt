our main contribution is that we show soundness and partial completeness. by partial completeness we mean that if the algorithm diverges, it will do only because the program or its type, or their combination, contains some loop; divergence because of an error in the algorithm is excluded. hence, for a given pts it is sufficient to establish termination to show that the algorithm is complete and does indeed decide the typing relation. we believe that this is a promising approach, because it means we can establish basic syntactic properties of the typing algorithm independently of termination.



we start by presenting type:type and verifying some basic properties. next we specify the type checking algorithm in relational form and show soundness of the inductive type checking relation. the completeness of the coinductive relation is then established using coinduction. finally we present an implementation of the algorithm in haskell and discuss further extensions of the present work.



evaluation is lazy, so values are closures clos t rho, pairs of an expression t and an environment rho. when type checking the body of an abstraction, the free variable is mapped a unique id, called a generic value gen by coquand. thus, the environment component rho may map variable names either to generic values or to closures in turn. the(haskell) type e of environments is passed as a



the weak head normal form(whnf) of a closure might either be an introduction, wtype, wpi, or wabs, or an elimination of a generic value, wne, i.e., an identifier applied to several closures. evaluation does not step under binders, thus, the whnf of a function closure clos(abs x t) rho is simply wabs x t rho.



which has to be evaluated recursively. or, it might be a generic value, in case x has become free by stepping under its binder. applications are the source of redexes, which are resolved lazily(cbn), using function app. expressions of the other shapes, abs, pi, and type, are already whnfs.



we hide the context in a monad of class monadcxt. the context provides both a type and a value for each name. bind extends the context with both type and value. new extends it with the given type, creating a new generic value. newj creates just a generic value, in situations where its type does not matter.



input to the type checker are declarations of the form x: a= t meaning name x has type a and definition t. the type checker will first ensure that a is a wellformed type, evaluate it(lazily), then check t against the value of a, and finally bind x to type value of a and the value of t in the current environment. then it will go on to the next declaration.



we implement contexts as finite maps from names to their type and value. they also handle the generation of fresh identifiers. to this end, the next unused generic value is store in field nextfree. cxtlookup just retrieves the type of a name, cxtext just binds a type to a name, and cxtbind binds both type and value to a name.



during type checking, we need to query the context and we need to raise errors. the type checking monad wraps a reader monad readert cxt(see module control.monad.reader) around an error monad either string. the implementation of the monadcxt operations access the context through the monadreader operation ask and modify it through local. the reader monad here is only used to hide the plumbing used in a standard implementation of static binding. in particular shadowing of variables is implemented by replacing the previous definition.



