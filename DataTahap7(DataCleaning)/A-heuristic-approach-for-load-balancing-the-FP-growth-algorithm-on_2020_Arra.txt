but, the fp growth algorithm has performance and scalability issues. the fp-tree, for very large data sets, will not fit in memory, making it difficult to process big data. a distributed and parallel implementation of the fp growth algorithm is needed to scale to large data sets. hadoop stated some parallelization techniques based on shared memory smp architectures for data mining algorithms. using these techniques, they parallelized the fp growth algorithm and scaled it to process datasets of few hundred megabytes(mbs). similarly, used two techniques:(i) a cache-conscious fp-array, which is a data reorganization of the fp tree and, and(ii) lock-free fp-tree construction, for parallelizing the fp growth algorithm on multi-core processors. these techniques aim to solve problems like poor data locality and insufficient parallelism of data mining algorithms on multi-core processors. implemented a multithreaded solution on the multi-core cpu and gpu. both implementations were based on fp-arrays.



fidoop-dp balances the load on the reducer nodes by using a voronoi based partitioning technique. the partitioning technique almost creates clusters of transactions and mines the clusters in parallel in different reducers. fidoop-dp not only aims to balance the load of the reducers, but also avoids duplicate transactions in the intermediate data. but fidoop-dp needs a pre-processing step. their experimental results do not account for this preprocessing step and hence the overhead of the pre-processing step is not known.



the flist by the number of items per group. hence, complexity of grouping in mpfp is o(1). though mpfp does not spend much time in grouping, it creates unbalanced groups. this penalizes some of the reduce tasks by slowing down the entire mapreduce job.



the fp-growth algorithm is implemented as a mapreduce job. it is similar to the parallel fp growth step of the mpfp algorithm. the flist and the map containing the groups are copied to all map tasks and reduce tasks using the distributed cache feature of the mapreduce framework. every map and reduce task reads them from the distributed cache. the group map is used in the map task to determine the group id for a given item, and is used in the reduce task to determine the items that belong to a given group id.



dataset, was built from about 1.7 million web documents. the html tags and the most common words(stop words) were filtered out of the web documents. each transaction represents a web document and the items in the transactions represent the set of distinct terms that appear in that document. the resulting dataset was 1.48 gb in size, containing 1,692, 082 transactions with 5,267,656 distinct items. the maximal length of a transaction was 71,472.



for example, for the reduce memory size of 8 gb, both bpfp and hbpfp successfully complete the jobs for the minimum support threshold of 6.5%, and hbpfp runs faster than bpfp for all minimum support thresholds except the 10% and 10.5% thresholds. mpfp cannot handle large datasets for minimum support thresholds of 6.5%, 7% and 7.5%, even at the 7 or 8 gb reduce task memory size. at the reduce task memory size of 7 gb, bpfp could not even handle large datasets of minimum support thresholds of 7%.



at the low 3 gb reduce task memory size, both hbpfp and mpfp ran successfully at a minimum support threshold of 11%. however, hbpfp ran faster than both bpfp and mpfp. bpfp could handle large datasets for minimum support thresholds of 11% and 11.5%.



vavilapalli vk, murthy ac, douglas c, agarwal s, konar m, evans r, graves t, lowe j, shah h, seth s, saha b. apache hadoop yarn: yet another resource negotiator. in: proceedings of the 4th annual symposium on cloud computing; 2013 oct 1. p. 5.



