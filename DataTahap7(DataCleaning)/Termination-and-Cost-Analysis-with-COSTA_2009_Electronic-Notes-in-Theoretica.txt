we start by describing the architecture of costa, an abstract-interpretationbased static analyzer for studying the cost and termination behavior of java bytecode programs. cost analysis deals with statically estimating the amount of resources which can be consumed at runtime(i.e., the cost), given the notion of a specific resource of interest, while the goal of termination analysis is to prove, when it is the case, that a program terminates for every input.



costa has a command-line interface for executing costa as a standalone application. different switches allow controlling the different options of the analyzer. it facilitates the implementation of other interfaces, as discussed below. they collect user information and interact with costa by making calls to its command-line interface.



the costa web interface allows users to try out the system on a set of representative examples, and also to upload their own programs, which can be in the form of either java source, or as java bytecode, in which case it can be given as a.class or a.jar file. as the behavior of costa can be customized using a relatively large set of options, the web interface allows two alternatives modes of use.



we analyze this example using the cost model that counts the number of calls(ncalls) to a particular method. we apply it to obtain an upper bound on how many times the send(message tmsg) method is called during the execution of commandaction method in a mobile device. costa outputs 1 as result, as it is to be expected.



intuitively, the cost of the calls to factorial cannot be bound because the value of x.elem is unknown at analysis time. however, we can still prove that the execution of the two methods always terminates by finding a socalled ranking function. the technical details about how costa deals with termination can be found in.





