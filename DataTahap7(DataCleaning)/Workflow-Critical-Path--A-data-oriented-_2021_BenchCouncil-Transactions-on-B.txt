on a target number of nodes in an hpc cluster. crux provides an api for building workflow pags and computing wcp. it also provides a user interface(ui) for visualizing wcp data. our crux prototype can be deployed in the cloud using amazon web services or locally using docker.



it was to expose traces at that particular level of granularity since end-users, i.e. facebook engineering teams, would not understand the mappings to higher-level concepts. to address this, canopy constructs a modeled trace of events, which are higher-level representations of lower-level performance data. wcp focuses on the end-to-end movement and transformation of data across an entire hpc workflow instead of performance within any particular workflow component. for example, wcp is not intended to diagnose one mpi application. like wcp, canopy also derives the critical path of its trace data and visualizes the critical path to the end user.



algorithm support optimized for that database. to this end, we chose a graph database, neo4j, with a large ecosystem of tools and support. neo4j uses a query language called cypher and uses a convention of referring to vertices as nodes and edges as relationships. cypher can be used to describe patterns of nodes and relationships and filter those patterns based on labels and properties. for example, the following cypher query returns all data state nodes with matching property values:



the crux ui is a user interface to visualize critical path data in the crux database. this includes visualizing program activity graphs, critical paths, and various metadata like workflow runtime. in addition, the crux ui provides features such as user authentication and profiles. the crux ui runs as a standalone application and communicates to the crux database via the api server. for users to access the crux ui, the ui application must be properly exposed so authenticated end users can reach it from their location. for example, if end users are outside of the hpc cluster environment, the crux ui can sit behind a public load balancer which routes public traffic to the ui instance.



we implemented the crux ui for our prototype with the neo4j browser. the neo4j browser is a general-purpose ui that lets users query, visualize, administrate and monitor a neo4j database. with this simpler approach, users can view a workflow pag being constructed during runtime and submit cypher queries against the graph database. to visualize wcp in the neo4j browser, we use the algo.



at least one instance of the crux api server installed on at least 1 node. depending on workflow size, it may be appropriate to install multiple instances over multiple nodes. we expect private load balancer(s) to distribute api calls from client hpc applications efficiently to an api instance.



through our tests we observed limitations with the capability of the neo4j browser for crux: inability to highlight a path within a graph; incorrect inclusion of one or more edges; and poor scaling to more than 2,000 vertices. also, neo4j browser did not offer ways for us to visualize results from previous workflow runs or easily export graph data. although sufficient for our initial prototype, a more comprehensive ui would be warranted for a production tool.



in this paper, we introduced a novel metric, workflow critical path(wcp) for holistic hpc workflows. we described a prototype tool called crux for calculating wcp. to evaluate crux we developed a set of simulators to simulate hpc workflows and workflow patterns; and designed a cloud-based, test environment on aws. early results suggest that crux can be used to efficiently calculate wcp. wcp shows promise as a useful diagnostic metric focused across an entire workflow.



david montoya was instrumental in the development of key insights and ideas contained in this work. sonja johanson performed testing and documented the crux tool, and yasodha suriyakumar provided the droughthpc example. psu students jaspar alt, kobe davis, and kristina frye participated in group discussions. portions of this work were conducted at the ultrascale systems research center(usrc) supported by los alamos national laboratory, united states under contract no. de-ac52-06na25396 with the u.s. department of energy. this work supported in part by the new mexico consortium.



