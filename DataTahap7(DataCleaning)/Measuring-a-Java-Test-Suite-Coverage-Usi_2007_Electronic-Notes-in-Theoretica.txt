we propose in this paper a way to measure the coverage of a java test suite by considering the jml specification associed to the java program under test. this approach is based on extracting a predicatebased graph from the jml method specifications. we then measure the coverage of this latter w.r.t. nodes of the graph that are visited by the test suite. in addition, we propose to check whether the test suite satisfies classical condition coverage criteria. we also introduce a tool, to be used as precompiler for java, that is in charge of measuring and reporting the coverage according to these criteria.



the essence of testing consists in executing the system under test in order to find bugs. nevertheless, testing can not be a complete approach since exhaustive testing is not applicable; the validation engineer is often left with a test suite that did not detect any bug in the program. how can he/she be sure that the test suite that was run is relevant enough to be confident in the program? one solution is to evaluate the quality of the test suite.



several works on test suite evaluation exist, such as exercising the test suite on mutations of a program. the most relevant technique is to measure the coverage of the test suite. usually, the coverage is measured on the control-flow graph of the program, or on the data-flow of the program. in addition, a specification coverage can possibly be measured.



model-based testing consists in computing test suites from a model of the considered program or system. model-based conformance testing consists in ensuring that the program does not have an unintended behavior w.r.t. its specification. this conformance can be observed through observation points or using a run-time assertion checking mechanism if the proximity of both the specification and the program makes it possible. in this context, the java modeling language(jml) has been introduced to act as a behavioral interface specification language(bisl) for java programs. jml can be used as an oracle for testing, considering that if no jml assertion is ever violated during the program execution, then the test succeeds, otherwise, it fails.



the paper is organized as follows. section 2 introduces the modeling possibilities provided by the java modeling language. the first coverage criterion, based on the method specifications, is presented in sect. 3. section 4 is dedicated to the condition coverage definition. the principles of the measure and especially the implementation and the experiments are detailed in sect. 5. section 6 presents the related work, before concluding and providing a glimpse of the future work in sect. 7.



the jml runtime assertion checker(rac) has been developed to check the jml specification clauses when running the program. this tool, provided in the jml releases, acts as a precompiler which modifies the source of the program to add the following verifications on the jml model:(i) checking of the preconditions and the invariant when a method is entered,(ii) catching exceptions that may be thrown and checking of the exceptional postcondition related to the considered exception before throwing the exception again,(iii) checking of the normal postconditions if the method terminates normally. notice that the invariant and history constraints are also checked during steps(ii) and(iii).



for practical reasons, all these rewritings are only applied on the positive preconditions of the method specification blocks. indeed, the application of these rewritings on negations of the preconditions would lead to a combinatorial explosion of the number of cases. nevertheless, it is possible to apply rw1 or rw2, which may be an indicator of whether the test suite tries to perform unauthorized actions, and the contexts these actions are tried to be activated.



the principle of checking the coverage of a jml specification is similar to the runtime checking of the assertions as performed in the rac. it is presented as a preprocessing which enriches the original java code with the verification of the jml predicates. in addition, we need to setup a coverage report manager(crm) dedicated to the measures must be performed.



we have experimented our approach on a case study, adapted from an industrial example, named demoney. demoney is an applet designed by trusted logics, implementing an electronic purse. for the experimental prupose, we have developed a simplified version of the implementation, which had been previously annotated with jml to describe its functional behavior. the classes of the application represent about 500 lines of jml spread in 4 classes.



first, we ran jartege on the demoney class. since jartege is a random testing tool, we were interested in evaluating the efficiency of such a tool. its use shows the practicability of our approach, as well as an interesting feedback on the produced test suites. indeed, the possibility to connect jartege with jmlcoverage to help has appeared to be an interesting option. in this context, jmlcoverage can be used to limit the number of generated test cases, by generating tests until a user-defined specification coverage rate is reached. second, we designed 5 testing schemas that tobias unfolded in 162 test cases. the resulting abstract tests were concretized to a java test program. we have been able to establish the overall coverage of our testing schema. here again, our tool can be used to master the combinatorial



the results show that the cost of executing jmlcoverage is very little, regardless to executing the rac. this is due to the fact that the rac performs lot more checkings than jmlcoverage, since it systematically checks invariants and history constraints. but, the additional cost of using jmlcoverage on top of the rac is minimal, even for larger test suites.



the jml runtime assertion checker is already able to report a partial coverage of a jml method specification, indicating if a precondition has been covered once, more than once, or never. nevertheless, it does not present the same granularity as our approach and can not be considered as a relevant coverage measure tool. vdmtools also adopt a dbc approach. they provide coverage tools which consider preand postconditions as ordinary statements and measure how much of the specification has been exercised. in other words, it provides an extended notion of statement coverage which is most of the time weaker than our measures. works have also been led on the coverage measure of uml specifications, especially based on the structural coverage of statecharts diagrams. simulink stateflow is also able to perform model coverage measurement on statecharts diagrams. a complementary view of test suite measurement is the code coverage measurement, that can be achieved with tools such as jcover, jcoverage, clover or emma.



the approach we have proposed is inspired of both classical control-flow graph coverage criteria, and classical condition coverage criteria. the novelty is the application of these criteria to a predicate-based graph extracted from a jml method specification. moreover, the interest of using a specification coverage tool instead of a code coverage is that the specification makes it possible to express properties independently from a specific implementation, and thus, allows more specific measurements, based on a black-box view of the program.



