rewriting steps of the environments generation by using a cache mechanism which is smarter than standard ones. this work can be seen as a dynamic completion of a set of rewriting rules. this completion increases the number of terms which are rewritten in normal form by the application of a single rewriting rule.



the main problem of fl-systems, compared to an exhaustive description, is the cost of the rewriting step. however, this cost can be reduced by reusing the result of previous rewriting processes. for example, in an urban environment, it is likely that two buildings appearing in different places will be represented by the same geometric object. it is even more likely that a geometric object representing a window will be reused in a lot of different places. it would then be interesting to be able to directly reuse a geometric object without going through the rewriting step if two modules representing elements of the environment are rewritten to the same geometric object. it is possible to implement this directly in the description of the environment. however this method complicates the work of the author of the fl-system and reduces the generality of the model obtained. another solution consists in using a cache. whenever a module has to be rewritten, if a key in the cache maps that module then the geometric object associated to that key is used as the result of the rewriting process.



this paper starts by presenting a simplified version of fl-systems. in sect. 3, the dynamic dependency analysis used is formalized. some properties of this analysis, relevant to the cache system, are stated in the same part. the following section presents the application of the theory to the practical case of the cache mechanism. finally, related works and conclusion come in sect. 5.



as stated before, an fl-system is a conditional rewriting system. it is a structural description of the geometric objects appearing in the environment. those descriptions are shorter than standard descriptions of 3d environments. they are also more generic and allow an easier reuse of previous work. this section proposes a grammar and a semantics for fl-systems.



in this paper, we assume that an fl-system is valid only if any module, whatever the value of the parameters, can be and is rewritten to a unique normal form. a term in normal form is a term composed only of terminals. we also assume that there is no overloading of the module names. this means that a module name is always followed by the same number of parameters.



this section formalizes the method used in order to compute dynamically a set, as big as possible, of terms structurally joinable with the term currently rewritten. the method used is inspired by some work on confidentiality. it is based on the modification of the semantics in order for it to manipulate labeled values. rewriting a module parameterized with labeled values will then return a term in normal form and a label. this label depends on the labels of the parameters which have influenced the structure of the resulting term.



corresponds to the value used in sect. 2. the first element of the pair(l) is a label. at the beginning of a rewriting process, a new label composed of a unique identifier is associated to the value of each parameter of the axiom(the initial module serving as starting point for the rewriting process).



this property is useful for the main goal of this paper, which is to develop a cache for the rewriting process of fl-systems. for each module rewritten, corollary 3.5 enables the cache system to characterize a set, potentially infinite, of modules for which it already knows the structure of the rewritten term in normal form. however, this corollary does not help to determine the values of the parameters of the terminals contained in the term in normal form. this is the subject of the next subsection.



as in sem1, the rewriting process of a module a(v) returns the characterization of a set of modules s and a term in normal form nt(values in this term are expressions of identifiers). to get the final term in normal form with numerical values, the function eval is called on nt with the value store which maps the identifiers of the parameters of a to their respective value in v. in fact, as shown by corollary 3.8, for any module in s with values w, the only thing to do to get the rewritten term is to call the function eval on nt with the value store which maps the identifiers of the parameters of a to their respective value in w.



proof(sketch) theorem 3.6 comes from the way the generated label is constructed. indeed, all the parameters influencing the selection of the rewriting rule to apply to a module to be rewritten belong to the generated label. as a consequence, rewriting the same module, with parameters into which the original parameters project themselves, will apply the same rewriting rule and then the same operations on the parameters. as there is no numerical evaluation of the values the two terms obtained are the same.



the main difference between corollary 3.8 and corollary 3.5 is that for corollary 3.5 only the structure of the two final term in normal form are identical, whereas for corollary 3.8 the two final term in normal form are exactly identical.



