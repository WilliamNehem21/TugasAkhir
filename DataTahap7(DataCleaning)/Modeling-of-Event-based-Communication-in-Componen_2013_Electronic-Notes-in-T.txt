large-scale business information systems. compared to synchronous communication using, for example, remote procedure calls(rpc), event-based communication among components promises several benefits such as high scalability and extendability. being asynchronous in nature, it allows a send-and-forget approach, i.e., a component that sends a message can continue its execution without waiting for the receiver to react on the message. furthermore, the loose coupling of components achieved by the mediating middleware system leads to an increased extensibility of the system as components can easily be added, removed, or substituted.



performance modeling and prediction techniques for component-based systems, surveyed in, support the architect in evaluating the system architecture and design alternatives regarding their performance and resource efficiency. however, most general-purpose performance meta-models for component-based systems provide limited support for modeling event-based communication. furthermore, existing performance prediction techniques specialized for event-based systems(e.g.,[16,5,26]) are focused on modeling the routing of events in the system as opposed to modeling the interactions and message flows between the communicating components. in the following, we present an overview on our approach enabling the modeling of event-based communication at the architecture-level combined with platform-aware performance predictions. for more details on our approach we refer to[17,21]. finally, we present the evaluation of our approach based on two case studies.



and platform-specific aspects of event-based communication into the prediction model. as an example of a representative mature meta-model for component-based software architectures, we consider the palladio component model(pcm). pcm is accompanied with different analytical and simulative analysis techniques, e.g.,[3,14,13] enabling quality predictions at system design time. similarly to most component meta-models for component-based architecture, pcm, in its original version did not provide support for modeling event-based communication. performance predictions are only possible using workarounds as demonstrated in. the modeling effort incurred by this workaround approach is very high and provides limited flexibility to evaluate different design alternatives.



separate middleware repository are woven into the final model. due to this separation, the influence of using different middleware systems can be analyzed by simply selecting another middleware repository and the system itself can be modeled independent of the underlying middleware.the transformation allows the modeling of event-based communication at the architetcure-level using the introduced metamodel elements while still supporting all existing prediction techniques such as simulation, lqns or qpns.



