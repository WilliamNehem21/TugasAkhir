in this work we explore the applicability of the programming method of feijen and van gasteren to the construction of security protocols. this method addresses the derivation of concurrent programs from a formal specification, and it is based on common notions like invariants and preand post-conditions. we show that fundamental security concepts like secrecy and authentication can nicely be specified in this way. using some small extensions, the style of formal reasoning from this method can be applied to the security domain. to demonstrate our approach, we discuss an authentication protocol and a public-key distribution protocol, and we deal with their composition. although this work does not contain any new protocols, it does offer a new view on describing, constructing and reasoning about security protocols.



the formal correctness of security protocols is generally considered to be important. the most common approach to establishing it is by means of verification after the protocols have been designed. the usual styles include automated state-space exploration and interactive theorem proving. however, actually designing and reasoning about security protocols is still considered to be complicated.



for the reasoning about security protocols, also various dedicated approaches have been proposed, e.g., in. in contrast, we study the use of a general method, which gives more flexibility, and enables the integration with techniques developed for other application domains. a similar approach has been explored in the context of data refinement, but its complexity seems to remain a problem.



simplicity of exposition is at the core of the method of feijen and van gasteren for constructing concurrent programs. it is based on the classical axiomatic theory of owicki and gries, where the reasoning about execution traces(like[28,30]) is replaced by the reasoning about assertions and invariants, i.e., predicate abstractions of states. this method has shown its merits in various application areas, e.g.,[18,17,20,24]. in this work we explore its applicability to the formal derivation of security protocols.



to demonstrate our approach we reconstruct the authentication protocol of needham and schroeder. the well-known attack that was once detected by lowe is avoided in our derivations in a natural way. apart from this classical authentication protocol, we also address a public-key distribution protocol, and we discuss their composition.



in section 2 we summarise the theories and methods that we use. our derivation approach is described in section 3, followed by our specification of authentication in section 4. we demonstrate them using an authentication protocol in section 5, and using a public-key distribution protocol in section 6. we use these results in section 7 to explore the composition of security protocols. finally we draw some conclusions and sketch some further work in section 8.



the programming language that we use for the components is based on the guarded command language from. the semantics of the atomic statements follows from the weakest liberal precondition, wlp,(and the weakest precondition, wp) predicate transformers. the weakest liberal precondition of a statement s and a predicate q, to be denoted by wlp.s.q, is the weakest predicate p that guarantees that each terminating execution of statement s starting from a state satisfying p establishes q; in contrast to the wp, the wlp does not guarantee termination of the statement. in particular we use the following two kinds of atomic statements:



the components can communicate using messages. the kinds of messages can be defined recursively. an atomic(plaintext) message is just a data value, where we assume that values from different data types are different. another view on it is assuming that the values are explicitly typed. in particular the data values include component identifiers, nonces(introduced later on) and keys.



{...} for assertions and to avoid the extra subscript for k. it is straightforward to generalise this kind of encrypted messages to containment of other numbers of messages, and to trivial encryption(i.e., just a tuple of messages). the usual models of encrypted messages distinguish explicitly between concatenating the messages y and z, and encrypting the result. we leave the intermediate concatenation step implicit, in order to emphasise the more-important encryption step, to simplify the descriptions of the intruders, and hence, to make the protocol derivations more effective.



tion, i.e., the intruders can intercept, read and create messages. based on the observed messages, the intruders can also derive new messages. if any key k and any two messages y and z can be derived, then the messages can be composed to derive the message[k: y, z]. if any encrypted message[k: y, z] and the key k can be derived, then the encrypted message can be decomposed to derive the messages y and z. the key k denotes the key that undoes the encryption with key k; in asymmetric encryption models the keys k and k cannot be derived from each other.



partial correctness(or safety) is specified by annotating the program with assertions. an assertion is a predicate on the state of the system and it is located between brackets{...} at a control point. the control points are the locations between the atomic statements in the components.



an important issue is whether these options endanger the correctness of the other assertions. introducing additional assertions cannot endanger the correctness of the other assertions, and typically the weakest possible strengthening that serves the goal is calculated. however, modifying the program may transform all assertions into queried assertions again. the typically-used modification of the program is inserting a new statement(to establish local correctness).



like its underlying theory, this method does not formally address progress. since the role of progress in the derivations is often limited, progress is usually discussed in a pragmatic ad-hoc manner. although in[15,16] we have shown how to integrate a full progress logic, in the current work we follow the original approach since progress plays no significant role.



our treatment of intruders will be based on a technique for faulty channels. faulty channels are channels that can duplicate, reorder and lose messages, but in contrast to intruders(see section 3.2) they cannot insert new messages or modify messages. such channels have been studied in relation to, for example, alternating bit protocols[18,17] and sliding window protocols. in this section we discuss an operational model, and an elegant rule for proving that an assertion is established by the receipt of a message.



to avoid explicitly reasoning in terms of this operational model, an elegant proof rule can be derived. we discuss this rule in detail in order to facilitate its reuse in section 3.2. moreover, it serves as a quick introduction to the style of program development, although we will refrain here from introducing any new statements.



the capabilities of the intruders are such that they can completely control the message flow in the system. hence we would like to model the intruders as a special type of communication channel. such a channel is similar to a faulty channel, as described in section 2.5, but with the extra capability of



to prove maintenance, we can directly apply the normal proof rules, but this may become quite complicated given the definition of d. in what follows we develop a simpler and sufficient proof approach, as far as the set dk in the antecedent is concerned. we will treat such a compound expansion of dk by showing that each of its expansions with a single message maintains the invariant.



usually we simplify and weaken the antecedent into only one of the conjuncts. in turn, term dk.y or dk.z in this new condition may need to be considered regarding composition, hence leading to a finite number of extra invariants. this number is usually very small, since the typical messages do not contain many nested layers of encryption.



notice that it is not useful to decompose any message that was created via composition; see also. hence we only need to consider the recursive decomposition of the transmitted messages. upon transmitting a new message, at least the new message must be decomposed recursively. however, in contrast to composition, decomposition may also derive new keys, in which case the earlier transmitted messages may become further decomposable. in what follows we discuss these two series of transmitted messages separately.



progress and termination of security protocols can mainly be hindered by the receive statements, which can be blocked. as the intruders may intercept and lose all sent messages, denial-of-service attacks cannot be prevented in our model, and hence in general progress cannot be guaranteed. in this work we will only consider progress in case the intruders behave like a proper communication channel. in particular we will rely on the following variation on the ground rule of progress from:



to demonstrate our formal reasoning approach, we present a derivation of the authentication protocol of needham, schroeder and lowe[26,21]. our derivation is based on the specification of authentication from section 4, but, for simplicity reasons, restricted to singleton sets of honest components, viz., a={a} and b={b}.



also this invariant can be initialised using the freshness of nonce nb, and it is trivially maintained under composition. although it can be simplified using the other invariant on d.nb, we prefer to maintain the structure and combine it with the original invariant on d.[k.b: nb] using disjunction in the antecedent of the implication.



this invariant can be initialised using the freshness of nonce na, but regarding composition the shape of the existing invariants is not very helpful. the last invariant on d.nb might become useful, and although nonce nb is not accessible in component a, we can try to exploit the term p= nb.



after separately studying the two message communications, i.e., the one from this section and the one from section 5.1, we must consider their combination. for the new invariants,(recursive) decomposition of the previous message[k.ma: p] leads to the following two proof obligations:



the hardest part of the construction was in fact the introduction of the nonces, in the beginning of the derivation. the problem is that our specification does not mention the possibility that the protocol might be run more than once by a single component. apart from running the protocol several times in succession, this could also include running it several times in parallel. to make this explicit in the specification of authentication, it must be possible to not only distinguish the different components, but also to distinguish the different runs of the components. we expect that such an identification mechanism would guide the derivation more easily towards the notion of a nonce.



it may seem to be more realistic to model the constants ma, mb, na and nb as variables that are explicitly assigned a value by the components. a disadvantage of such a more-dynamic model is the additional amount of proof obligations. in particular, the correctness proof would demand some additional assertions to address the cases in which the variables have not yet been initialised; see also the discussion about variables p and q at the end of the previous section. in our opinion this would primarily increase the amount of work and formulae, while adding nothing to the understanding of the essence of this protocol.



the remaining queried invariant can usually be initialised, and it is maintained under composition using the first invariant on d.k.s. for progress reasons, we must introduce in component s a send statement for a message[k.s: k.v, v], for any variable v.



there are no more queried assertions or invariants, but for progress reasons we must still ensure that variable v in component s can be set to ma. to this end we can safely introduce a message communication, without any invariants or security concerns. by assigning any value to v, the invariants must be strengthened again, but maintenance remains guaranteed. we use(c:: k.c) to denote the set of all public keys, and obtain the following final program:



notice that the first(plaintext) message does not contain the value a, which might be useful for sending the reply to the right component. however, as we only consider broadcasts, this is not needed in our model. moreover, we can easily extend this example to distribute keys to a series of components, for which a repetition(or a parallel composition) is likely to be introduced in the server component.



the protocol so far deals with an instance of the specification from section 4, viz., mutual authentication between one pair of components. given a common assumption on the keys and nonces, we present a reduction technique that shows that the same protocol can deal with the general specification from section 4, viz., mutual authentication between any number of disjoint pairs of components. although this more general case can also be addressed directly using our method, the reduction simplifies matters as it does not refer to the details of the annotation.



at the end of this exploration of the derivation of security protocols, we must assess what we have achieved. the general style of reasoning from the programming method of feijen and van gasteren also turns out to be effective for this application area. in particular it avoids the well-known attack on the original authentication protocol of needham and schroeder in a natural way. after introducing the notion of a nonce, this protocol practically develops itself. the annotation developed along the derivation can even be used for reasoning about the composition of protocols.



to achieve these results, we have developed simple specifications of secrecy and authentication, in a familiar style of preand post-conditions and invariants. for dealing with the interference caused by the intruders, we have slightly modified an existing approach to deal with traditional message communication. the resulting method benefits from such a well-understood basis, and it is flexible enough to address patterns for both public-key confidentiality and private-key authentication.



created in a demand driven way, and their correctness can easily be checked. their annotation records the design decisions, and it provides a safe basis for reasoning about the messages. to reduce the size of the annotation, some of the invariants have been combined. although this makes these invariants less appealing, they remain highly structured. a continued attention to notational concerns is an important piece of further work for effectively deriving and reasoning about protocols.



in contrast to automated approaches, we have already noticed that afterwards experimenting with minor variations of the protocols is a bit tricky, in which case the annotation should be checked carefully. in this sense it might be a useful piece of further work to develop an easy way to automatically verify the developed annotation using theorem provers, e.g., along the lines of[25,24]. nevertheless we want to stress the importance of keeping the derivation techniques manageable, in order to avoid the introduction of errors, and to emphasise the design decisions.



