in the classical euclidean steiner minimum tree problem, the input is just a set of points called the terminals. it has many applications and has been widely investigated since its introduction. the most efficient publicly available implementation is the geosteiner package of juhl et al.(2018), which implements a two-phase approach first introduced by winter(1985). in the first phase, a superset of so-called full components is generated, and in the second phase, the minimal subset of this superset is computed, leading to a steiner tree. algorithms for the first phase are based on an approach of winter and zachariasen(1997), whereas the second phase is based on an approach by warme(1998). alternatively, the second phase can be solved by using an algorithm for the steiner tree problem in graphs, as shown in polzin and daneshmand(2003). computational studies and several improvements are given in follow-up papers.



the authors mentioned above considered several variants of the euclidean steiner tree problem, such as obstacle-avoiding steiner trees(zachariasen and winter 1999), steiner trees in other metrics like the manhattan distance(warme 1997) and steiner trees that lie within polygons. to the best of our knowledge, the problem we are investigating has not been considered before.



our algorithm is based on a structural theorem of steiner minimum trees over segments that will allow us to use an algorithm that is very similar to the one implemented in geosteiner, so we can reuse their implementation of the second phase. our approach solves the problem exactly and is more efficient than the inexact solution when we sample the given segments(see sect. 5 for a description of the sampling approach used in the comparison).



the paper is organized as follows: in the following section, we formally define the problem and introduce necessary notations and definitions. in sect. 3, we prove our main theorem and discuss how the algorithm for the first phase in geosteiner has to be modified. in sect. 4, we show how to reduce the size of the computed superset of full components. we show some computational experiments in sect. 5 and finally conclude in sect. 6.



terminal segments and steiner points. hence, in a topology, the positions of the terminal points are fixed, the positions of the open terminal segments are on a segment but not on one of its endpoints and the positions of the steiner points are free. the topology represents the nodes and edges of a graph, but without an exact statement about the length of the edges or the positions of the nodes. they only specify adjacent nodes. notice that these definitions slightly differ from those of brazil and zachariasen(2016), as our problem is more general.



each such cycle to a single node, it becomes a tree, denoted as t|s. the contraction of an edge(u, v) of a graph g=(v, e) results in the graph gr=(v r, e r) in which u and v are replaced by a single node[uv] and each endpoint of an edge that is either u or v is replaced by[uv]. the contraction of a cycle is the contraction of all the edges on it.



label of one of the vertices is different(the vertex that attaches to the segment on the top left is a terminal point in this last topology and a open terminal segment in the first two). our structural theorem shows that we can restrict the full topologies to full topologies of at most one open terminal segment, i.e., we do not have to consider the first two, but only the third



in the second phase, we select a minimum cost subset of the enumerated full components whose union forms a steiner tree. it works exactly as in the classical smt. we interpret the superset of full components as weighted hyperedges in a hypergraph and compute the minimum cost spanning tree in the hypergraph. in our experiments, we used the implementation provided with juhl et al.(2018).



first, we can restrict the arc due to geometry, i.e., if the steiner point of the root lies within its feasible subarc, all other steiner points must lie on their feasible subarcs too(see e.g., brazil and zachariasen 2016). another example of a well-known pruning test is the lune property(see again brazil and zachariasen 2016), which works as



we implemented the algorithm to construct a superset of full components of an optimal steiner tree in java, using only the basic pruning tests that were known already for the classical smt problem. for the selection of the full components of the optimal tree, we used the implementation of geosteiner 5.1 of juhl et al.(2018). all experiments were done on a single core of an intel core i5 2430m processor with 2.40 ghz and 6 gb ddr3-sdram memory.



