this paper presents fixpoint calculations on lattice structures as example of highly modular programming in a dependently typed functional language. we propose a library of coq module functors for constructing complex lattices using efficient data structures. the lattice signature contains a well-foundedness proof obligation which ensures termination of generic fixpoint iteration algorithms. with this library, complex well-foundedness proofs can hence be constructed in a functorial fashion. this paper demonstrates the ability of the recent coq module system in manipulating algebraic structures and extracting efficient ocaml implementations from them. the second contribution of this work is a generic result, based on the constructive notion of accessibility predicate, about preservation of accessibility properties when combining relations.



we first present in section 2 the module signature that models the kind of lattice we want to build. in section 3 we motivate this library with a challenging example of lattice to be built in coq. sections 4 and 5 then present various lattice functors proposed in the library. section 4 discusses binary functors, in particular the product functor. section 5 deals with a functor of functions with various possible implementations. conclusions are given in section 6.



the last step concerns the new part of this functor: the proof that the widening operator satisfies its termination criterion. in our previous work the termination criterion for the product of noetherian poset(i.e. that satisfy the ascending chain condition) was proved using a classical result about lexicographic products, but it is not possible for widening operators. indeed, the key lemma to be established is:



another important functor concerns functions. static analyses make heavy use of functions during their computations. efficiency of the underlying data structures is hence crucial. however proof of termination properties on complex data structures can be hard. this section proposes an abstract notion of function implementation for which we prove termination properties. these proof can then be used for several efficient implementations. we now describe the functor which builds a poset with widening for functions.



we have presented a framework for programming fixpoint computations on lattice structures in a dependently typed functional language. in order to construct complex lattices, we propose a library of coq module functors. we focused our explanations on the product and the function functor, but other functors are available in our coq development.



we have more recently extend our library to handle narrowing operators. again the technical difficulty relies in the functor product. it is interesting to notice that termination criterion of the narrowing operator is proved with the theorem 4.6. it confirms that this theoretical result was a cornerstone for our work.



