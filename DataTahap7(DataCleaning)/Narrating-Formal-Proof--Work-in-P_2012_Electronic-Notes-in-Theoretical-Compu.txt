building on existing work in proxying interaction with proof assistants, we have previously developed a proof movie. we have now considered the problem of how to augment this movie data structure to support commentary on formal proof development. in this setting, we have studied extracting commentary from an online text by pierce et al..



the dynamic quality of original movies, combined with the narrative of a literate proof script. we have experimented with this first approach, using the course notes of pierce et al. on software foundations to achieve an almost identical set of pages, but augmented with the dynamic visualisation of the proof process.



the script itself, loaded in an interface to the pa such as coqide or proofgeneral. this gives an interactive view of the document, allowing the student to step through the tactics and see their effects, as well as fill in holes in exercises. the version displayed in the interface does not have the markup of the rendered version.



our original design for movies just contained plain text, not enriched with any rendering. to enhance the presentation of movies, we consider replacing the actual contents of the script with a pretty-printed version. in the case of coq, we do not write our own pretty printer, but use the coqdoc tool.



coqdoc is the coq version of the first approach. distributed together with the coq pa, the tool produces a rendered(in html or in latex) version of a proof script. this rendered document contains both a pretty-printed version of the commands, and special comments extracted from the proof script. these comments are



structuring a movie into scenes can be done automatically, based on the coqdoc output. we already mentioned that coqdoc sorts nodes into code and documentation nodes, and that documentation nodes can be either paragraphs or section headers. so, to create a scene from a coqdoc-annotated script, we only need to mimic the document structure using scenes and subscenes. each documentation node in the script creates a scene, with the frames referred by it the code beyond it.



the first design decision we make is how to allow an author to group text into scenes. as the resulting document structure is a tree, a tree editor could be used for adding or removing or reordering scenes to the document, and selecting scenes for further editing. the main advantage of this approach is that the structure can be seen at a glance, and edited easily.



leading up to this paper, we created a dynamic version of the software foundations course notes. we have applied our techniques to create handouts for a pa and type theory course geuvers teaches at the eindhoven university of technology. other documents that we could transform are the coq tutorial by huet et al. allows writing literal proof documents, from which both coq code and latex documentation can be extracted. the coq-tex tool in the coq distribution does something similar, executing coq commands within a latex document and returning the output in a latexsource file for further processing by the author. these approaches are mainly used for writing proof and documentation together, while our movie allows an author to first write a proof script, and then create a dynamic presentation of this script. the presentation can then be used in a narration of the proof.



