security protocols are, in general, composed by several agents running in parallel, where each agent computes information(bounded by polynomial-time on the security parameter) and exchange it with other agents. in the context of quantum processes, the computation is bounded by quantum polynomialtime and the information exchanged is supported by qubits. in this paper, the problem of defining quantum security properties is addressed using a quantum polynomial-time process algebra. this approach is highly inspired in[13,9].



thanks to the non-cloning theorem, quantum information cannot be copied without prior knowledge of its state. this observation imposes some design options in the process algebra, since it is necessary to know which agent possesses a qubit in order to know who can retrieve each piece of information. in order to deal with this fact, a set of agents is fixed and the qubits are partitioned among them.



most of the commands above are self-explanatory, but it is worthwhile to notice that all commands are deterministic with exception of measure. indeed, according to the measurement postulates of quantum mechanics(see for instance), when a quantum system is measured the outcome is stochastic, and moreover the state evolves accordingly to this outcome. note that we only consider measurements over the computational basis, nevertheless this is not a limitation since any other qubit measurement can be performed by applying a unitary transformation before measuring the qubit over the computational basis.



definition 2.1 a quantum polynomial machine is a triple m=(c, q, o) where c is a qram command, q is a positive step bounding polynomial and o is a positive output polynomial. we denote the set of all these triples by qpm.



one of the most successful ways for defining secure concurrent cryptographic tasks is via process emulation[1,2]. this definitional job boils down to the following: a process realizes a cryptographic task if and only if it emulates an ideal process that is known to realize such task. in this section, guided by the goal of defining secure functionalities, we detail the notion of emulation for the quantum process calculus defined in the previous section.



where an ideal adversary is an adversary which cannot corrupt i and a real adversary is any local process for agent a. this property asserts that given a real adversary(a: a), agent a cannot distinguish the information leaked by p||(a: a) from the information leaked by the well behaved process i||(a: b) for some ideal adversary(a: b), and therefore, we infer that p||(a: a) is also well behaved. this discussion leads to the concept of emulation with respect to a set of real adversaries a and ideal adversaries b.



any interactive proof system fulfills two properties: completeness and soundness. completeness states that if the assertion the prover wants to convince the verifier is true, then the verifier should be convinced with probability one. on the other hand, soundness is fulfilled if the verifier cannot be convinced, up to a negligible probability, of a false assertion. therefore, completeness and soundness allow the verifier to check whether the assertion of the prover is true or false.



so, a process(p: s) models a quantum zero-knowledge strategy if, from the point of view of the verifier, it is impossible to distinguish the final result of the interaction with(p: s) from the interaction with the 0 process. a clear corollary of theorem 3.2 is that, quantum zero-knowledge is compositional.



the contributions of this paper are multiple. first, we introduced a process algebra for specifying and reasoning about(quantum) security protocols. to restrict the computation power of the agents to quantum polynomial-time, we introduced the logarithm cost quantum random access machine, and incorporated it in the process language. due to the special aspects of quantum information, qubits were assumed to be partitioned among agents, and the(quantum) computation of an agent was restricted to its own qubits.



