we solve this efficiency problem by extending the execution mechanism for aspect-oriented programs. typically, aspect-oriented programs are executed by mapping aspect-oriented constructs to java bytecode which is then executed on a standard java virtual machine. recent approaches[6,7] investigate the extension of the executing java virtual machine by aspect-oriented features. concerning the optimization potential of these two approaches, it turns out that the first solution offers only restricted optimization gains because it is restrained entirely on the limited operations of the java bytecode. in contrast, the second solution offers much better optimization gains. supporting aspect dispatch mechanisms at the level of the jvm is more promising as this allows for efficient weaving policies tailored to the specific needs of static and dynamic weaving in systems with only limited memory and computation power.



bytecode, which is eventually executed by a java virtual machine. in our work presented in this paper, we are extending the jamvm virtual machine such that different parts of the aspect execution mechanism for ot/j are optimized. first experimental results show that we significantly reduce the execution time with our approach and, hence, improve run-time performance.



this paper is structured as follows: section 2 gives an overview of the foundations of aspect-oriented programming. in section 3, we present our optimizations of aspect execution. in section 4, we explain our implementation of selected optimizations in the existing execution environment of ot/j together with first experimental results. in section 5, we discuss related work and in section 6, we conclude and outline future work.



aspect-oriented programming(aop) provides for enhanced separation of concerns. it facilitates a modularization of crosscutting concerns, which would be scattered across the module structure in purely object-oriented designs. the core functionality is implemented in the base program, while the crosscutting concerns are defined in separate aspect modules. these aspects define the crosscutting functionality together with aspect bindings, specifying the points in the execution of the base program(join points) at which they should be executed.



there is no closed definition of aspect-orientation, resulting in a large variety of aspect-oriented programing languages. several of them allow for dynamic activation(and deactivation) of aspects. this also applies to objectteams/java(ot/j), which supports advanced modularization concepts. in ot/j, aspect functionality is defined in role classes which adapt individual base classes. roles are contained in team classes, which define a collaboration context for them.



the aspect code has to be woven into the base code at some point in time so that it can be executed at the defined join points of the base program. there are different approaches to accomplish aspect weaving: compile-time weaving statically weaves the aspect functionality into the base code. run-time weaving can be performed at class loading time, before the base classes are executed by the jvm, or even later during the execution of the program. this can be done by a run-time component outside the jvm or inside the jvm itself. the later the aspect weaving is performed, the more dynamically the aspects can be added to the base program allowing for more flexible context-aware adaption of the executed applications. unfortunately, dynamic aspect weaving suffers from more effort at run-time. static weaving, on the other hand, increases the code size, which is also critical for small devices.



such woven program code can be optimized by enhancing the functionality of the executing jvm. this pays off by a significant gain in execution time, as we have shown in our first experiments described in section 4. and moreover, it paves the road for our long-term goal, namely the dynamic weaving of aspects at run-time, instead of at class loading time, in order to also further optimize the code size of the executed applications.



purely additive realizations of aspect-oriented programming languages per se produce a certain amount of overhead, compared to the programming language they extend. in this section, we start by illustrating the overhead caused by the different tasks performed during aspect execution. in the succeeding subsection, we present our optimizations for the different kinds of overhead. the subsections in 3.2 propose optimizations for the overhead identified in the corresponding subsections in 3.1.



the overhead of aspect-oriented program execution is caused by additional control flow using additional data structures. furthermore, the overhead of the weaving process itself has to be considered, especially for languages that apply post-compile time weaving, like ot/j. one could argue that the execution time is more relevant because weaving is done only at an initial phase. nevertheless, dynamic class loading blurs the border between these two phases. thus the overhead of the weaving process can also be critical during program execution. taking this consideration into account, we can classify the sources of overhead for the language ot/j by the following categories.



adds additional dynamic method lookup(s). this is necessary if the aspect language supports polymorphic method overriding also at the aspect side. dynamic method dispatch is always expensive and should be avoided due to performance reasons, if possible. the identification of avoidable dynamic dispatch constitutes good potential for possible optimizations. the execution of aspectual code is subject to special conditions, which does not hold for method dispatch in general. possible optimizations could exploit these conditions.



in the current ot/j implementation, the infrastructure necessary for team(aspect) activation is added to every adapted base class. arrays for storing aspect instances and methods to access these data structures(addteam(team) and removeteam(team)) are added to the corresponding class files. these methods are called by the de-/activation methods of the teams.



we propose to develop a specialized aspect dispatch mechanism working on the vm-internal activation infrastructures introduced in 3.2.1. on the bytecode-level, this mechanism can be addressed via a new bytecode instruction(invokeaspect). thus, the current wrapper-based approach can be refined. furthermore, we plan to introduce a special(non-dynamic) method lookup calling the original base method during execution of replacing aspect functionality(base calls). this is possible



roles of a team implicitly inherit from roles with the same name in a super team. this inheritance relationship is no normal type inheritance and is only valid in the context of a surrounding team instance. we plan to add a reference to the implicit super role for role classes in the vm, analogously to the super class reference stored in class structures, avoiding code copying and additional interfaces.



the selected vm implementation had to fullfill a set of criteria: availability(opensource), extensibility, performance, target architectures and compatibility to the existing ot/j. we have selected the jamvm for implementing our optimizations. it supports the full jvm specification version 2, although it is extremely small and applicable for embedded devices. for example, the jamvm has been ported to ipaq 3950 and neo1973. the jamvm is implemented in c, with a small amount of platform dependent assembler code.



other candidates we considered were the kvm and the phoneme vm. in contrast to the jamvm, both only support java me. the kvm does not seem to be maintained during the last time. phoneme features a jit compiler, but this



in a first step, we have moved the team registration mechanism to the vmlevel. the data structure representing a class inside the jamvm was extended by a reference to the newly introduced registration data structure. in contrast to the previous weaving strategy of ot/j, now every class has this structure. initially, this causes a very small overhead(20 bytes on x86 architecture), and only if a class is actually adapted by an aspect(team) advanced initialization and memory allocation take place.



as before, an interface for adding and removing team instances to a base class is needed. additional functionality to access the array of active team instances is necessary because the remaining aspect execution mechanism resides at bytecodelevel at this stage of optimization. we were able to integrate this functionality into the interface of the jamvm very conveniently. the jamvm provides internal implementation of java mechanisms like class loading and reflection. at the javaside, a class with native method declarations serves as interface. calls to internal native methods are not executed via jni(java native interface), but directly implemented in the vm code. this approach was transfered to the team registration mechanism. finally, we have adapted the weaving strategy of the otre to use the new vm-internal mechanism.



with our experiments, we have shown that the time efficiency of aspect activation can be improved significantly. by implementing also the other optimizations that we have proposed in section 3.2, we expect to further improve the execution of aspect-oriented embedded applications.



as embedded software grows significantly, it becomes more and more important to apply software engineering methods in this area. in this paper, we have proposed optimizations of the aspect execution mechanism on the vm-level aiming for an applicability of aop for embedded mobile devices. our first results show a considerable performance gain for the aspect activation mechanism of ot/j. so far, the presented benchmarks did not involve actual aspect execution. in future work, we plan to implement more optimizations, particularly an aspect dispatch mechanism working on the vm-internal activation infrastructures, and to measure and to evaluate the overall benefit. we also plan to investigate hybrid approaches that combine compile-time and run-time weaving, e.g. by weaving large code dynamically and small code statically.



this work has been funded by the german science foundation(dfg) under the emmy noether grant no. gl 360/1-2. we also thank our student magdalena luniak for her assistance regarding the implementation of the optimization and the analysis of the measurement.



