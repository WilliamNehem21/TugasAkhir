there are two phases in the execution of the pema. in the first phase of the initial mining task, the mining agent logically divides i.e. horizontally segments the database into a number of non-overlapping partitions, when the database is relatively small as defined in previous sections. this depends solely on the number of available data sites in the system. this is simply number, that is, 33506 transactions from the above example. it is obvious in the example that the first twelve partitions will have exactly the same number of partitions while the last partition will have the rest of the transactions which is a little more than the first twelve. this will take care of the effect of the first approximation. this paper assumed that the database is located on secondary storage while the total available memories are also known in advance.



finally, it should be noted the system proposed in this work works in a dynamic fashion; in that it performs horizontal segmentation or partitioning of the database through the data agent whenever the average length of transactions in the databases is very small. for very large data with long transaction lengths, vertical partitioning of the data was deployed by the data agent to improve the performance of the mining algorithm. this hybrid component of pema is a typical representation of the novel method being preached in this work. it combined horizontal segmentation, vertical partitioning and incremental mining of datasets in one method. this was very necessary because real-life databases are usually fragmented in various locations. one major thing unique to this work is that, pema could be deployed to mine both real and synthetic datasets already vertically distributed in various data sites and/ or can as well dynamically and vertically partition very large datasets with very long transaction lengths e.g. covertype data form uci machine learning repository, while distributing them to the various sites depending on the available number of mining sites. this is one of the major tasks performed by the data agent in our architecture. pema is very flexible as it does not only perform the global mining task, also has provisions for partial global mining; a situation in which a data miner is not interested in mining all the parts of the data or all the data sites available. this was easily achieved by pema as shown in the results presented in section four.



the experiments were designed to analyze the effect of the following: the number of data sources, the size of the datasets in terms of number of records, and the size of the datasets in terms of number of items. all datasets described were used for one experiment or the other. all experiments were performed on four virtual machines running on intel(r) core(tm) i5-2450m cpu@ 2.50 ghz, 2501 mhz, 2 core(s), 3



logical processor(s) pentium(r) with 6 gb of main memory running on windows 7 home premium edition. datasets used for the experiment were distributed on the four virtual machines created. the following were measured for one or more of the experiments:(i) response time(seconds/milliseconds),(ii) the communication overhead(number and size of messages exchanged). the experiments were performed by varying the minimum support threshold between the ranges of 0% and 100% of total transactions depending on the particular dataset used. the arm results of the pema algorithm described in section three of this work were compared with the performance of other existing state-of-the-art algorithms such as apriori, aprioritfp and fp-growth.



darm experiments were also conducted on the remaining datasets, which are connect4 and covertype. the minimum support of 20% and a minimum confidence of 80% were used as default values for pema. the results of these experiments are also shown in the following subsections. it should be noted here that these values could be changed anytime by the user as the need arises.



results of this experiment showed that with connect4 dataset and 75% min_sup threshold, all the methods exchanged high number of exchanges except pema. also, for all the four methods, the size of messages exchanged improved considerably as the percentage minimum support threshold is gradually increased. pema had the best performance even at the 75% min_sup threshold and dropped a little as it increases.



