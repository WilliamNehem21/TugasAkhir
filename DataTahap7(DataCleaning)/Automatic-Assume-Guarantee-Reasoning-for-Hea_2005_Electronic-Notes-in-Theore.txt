assume/guarantee(a/g) reasoning for heap-manipulating programs is challenging because the heap can be mutated in an arbitrary way by procedure calls. moreover, specifying the potential side-effects of a procedure is non-trivial. we report on an on-going effort to reduce the burden of a/g reasoning for heap-manipulating programs by automatically generating post-conditions and estimating side-effects of non-recursive procedures. our method is sound. it combines the use of theorem provers and abstract-interpretation algorithms.



object oriented programs contain several challenging features, including intensive usage of the heap and the ability to redefine behavior using inheritance. in this paper, we address the problem of analyzing the heap, and rely on existing methods to handle inheritance, e.g.,. we make a simplifying assumption of working on single-threaded programs.



the process. in this paper, we restrict our attention to non-recursive procedures. this allows us to analyze procedures before they are used. every procedure is analyzed once on an abstract value that represents a superset of the stores fulfilling the precondition. the outcome of the analysis is a safe approximation to the post-condition including the potential side-effects of every procedure. the analysis can also verify safety properties, such as the absence of memory leaks and null dereferences, and user-defined assertions, including post-conditions. the analysis of every procedure uses the(computed) postconditions of invoked procedures.



symbolic operations. to realize the process described above, we implemented two operations with the use of a theorem prover: assert and assume. the assert operation takes a formula in first-order logic with transitive closure, and an abstract value, and returns true if all concrete stores represented by the abstract value satisfy the formula. the assume operation takes a formula in first-order logic with transitive closure and an abstract value. it returns an abstract value that refines the input abstract value by eliminating concrete stores that do not satisfy the formula. 2



notice that this analysis establishes the absence of memory leaks and null dereferences in append not only for this program, but for all programs in which the precondition of append is satisfied. the reason is that we conservatively analyzed append with an input abstract value that describes all stores that satisfy its precondition. also, the post-condition that has been generated describes the behavior of append in all such programs.



analyzing main. intraprocedural statements are analyzed as usual, and procedure calls are interpreted by checking the precondition and assuming the post-condition. a crucial issue is that we want to maintain information about the store before the call while allowing the procedure to mutate parts of the store.



we can model dynamic memory allocation using an additional unary relation active(v). conceptually, we assume that the number of nodes in a structure is always infinite; active is set to false for all nodes in an empty heap. allocation is modelled by setting active to true for the newly allocated node. to simplify the exposition, we omit the active relation in this paper.



specifications we use pre f and post f to denote the preand post-conditions of a procedure f. in our method, pre f and post f are formulas in first-order logic with transitive closure over a vocabulary that describes formal parameters and visible fields of the procedure f. the precondition is specified by the user, and the post-condition is generated by our system.



example 4.2 in our example, we do not represent the variables x, y, z of main while analyzing append. this way, we can use a more coarse representation of those data-structures that do not change during the execution of the procedure.



matically updates the value of change[n](and other instrumentation relations) during the analysis via differencing. note that the project operation does not remove change[n] because it is an instrumentation relation that is expressed in terms of variables that are visible in the caller. thus, change[n] becomes a part of the postcondition.



we use the standard notion of a two-vocabulary store, which relates the store before and after the call to a procedure. the two-vocabulary store contains two versions of each binary relation symbol, where the unprimed version describes the store before the call and the primed version describes the store after the call. we do not introduce primed versions of unary relation symbols, because these relation symbols denote program variables of the caller, whose values cannot be changed by the procedure call, as they are invisible to the callee. one exception is the return value of a procedure, which is described by a primed version of the corresponding relation symbol. 3



to evaluate the two-vocabulary formula post2 on p1, we need to extend p1 with primed version of relations, first initialized to unknown; this operation is called primed2unknown, and results in a new set of shape graphs, p2. then, we apply the symbolic operation assume, which generates from p2 a set of shape graphs p3. the assume operation refines the primed relations in p2 to more precise values, by excluding values that do not happen in any valid store.



to evaluate the feasibility of the method, we implemented our method using the tvla system and the simplify theorem prover. we established the correctness of the running example of this paper using tvla enhanced by a symbolic engine to compute assume and assert. we used the simplify theorem prover to discharge queries posed by the symbolic part. we modeled transitive closure using a binary relation and a set of simple axioms. currently, we are developing a java front end, and plan to perform more experiments in which we apply the approach to java methods.



