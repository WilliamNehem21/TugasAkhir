coordination in reo emerges from the composition of the behavioural constraints of the primitives, such as channels, in a component connector. understanding and implementing reo, however, has been challenging due to interaction of the channel metaphor, which is an inherently local notion, and the non-local nature of constraint propagation imposed by composition. in this paper, the channel metaphor takes a back seat, and we focus on the behavioural constraints imposed by the composition of primitives, and phrase the semantics of reo as a constraint satisfaction problem. not only does this provide a clear intensional description of the behaviour of reo connectors in terms of synchronisation and data flow constraints, it also paves the way for new implementation techniques based on constraint propagation and satisfaction. in fact, decomposing reo into constraints provides a new computational model for connectors, which we extend to model interaction with an unknown external world beyond what is currently possible in reo.



reo is generally presented as a channel-based coordination language wherein component connectors are compositionally constructed out of primitives, which are typically 2-ended channels. 4 the behaviour of connectors are described in terms of the constraints imposed by the channels and their composition, in terms of three of kinds of constraints:(1) data is accepted on an input channel end if by accepting it the channel can satisfy its behavioural constraints;(2) data is offered by an output channel end if by offering the data the channel can satisfy its behavioural constraints; and(3) nodes connecting the channel ends(1:1, in the direction of data flow) must pass on any data they receive, that is, data offered by one channel end must be accepted by the other. this is all achieved under the restriction that the only communication between entities occurs though the channels.



constraint automata and connector colouring provide the basis for both semantic models and implementations, as well as for model checking and visualisation tools for reo. constraint automata provide the semantics of each primitive and composition in reo, by representing the synchronisation possible in a connector, along with a description of the data flow, in an automata-based model. the actual constraints are based on the state of the primitives, and transitions in the automaton correspond to data flow in the connector. connector colouring is based on the simple idea that ends where data flows and data does not flow in a connector can be coloured with different colours. each primitive has a set of possible colourings describing its possible behaviours. the semantics of a connector is determined by plugging together the colourings of the primitives in such a way that the colours match, meaning that data flow into a node is the same as the flow out of the node.



challenge 3: limited support for external primitives research on reo focusses exclusively on the connectors, without much consideration on the interaction with the unknown outside world. indeed, constraint automata models preclude any external primitives. primitives of interest may include data transformers or filters whose details are externally computed.



in this paper, we address these challenges by adopting a different view of reo. the channel/circuit-view of a reo connector becomes a mere metaphor. instead, a reo connector is seen as a set of constraints, based on the way the primitives are connected together, and their current state, governing the possible synchronisation and data flow at the channel ends connected to external entities.



this paper is organised as follows. we elaborate on reo in section 2 using an example. section 3 describes our encoding of reo-style coordination as a constraint satisfaction problem. section 4 describes an extension of this encoding to incorporate state, so that connector semantics can be completely internalised as constraints. section 5 presents the main contribution of the paper, namely, a reformulation of reo as iterative and interactive constraint satisfaction. section 6 and 7 present related work and our conclusions.



fifoempty1 and fifofull(d)1 fifo1 is a stateful channel representing a buffer of size 1. when the buffer is empty it can only receive data on a, but never output data on b. when it is full with data d it can only output d through b, but cannot receive more data on a.



the assumption made thus far is that all state information for a primitive is known in advance. in this case, there is no need to actually supply an implementation of the primitives, as they are redundant. this is already the case with the constraint automata-based implementation of yeo.



on ends a and b are passed to the primitive p. in addition, the primitive may use the uninterpreted function symbol res to encode information to guide its external activity. note that this encoding and way of interacting with primitives means that data is not passed through the channel ends, but to the primitive directly.



here the engine asks the primitive to evaluate the function fp with arguments t1,..., tn, and the primitive returns result tres. external predicates are evaluated in a similar fashion. for consistency, we assume that primitive p returns the same answer to each call of fp or pp with the same arguments. this interaction with the primitive does not cause the primitive to change state, as this is achieved using the mechanism described in the previous section.



the timed concurrent constraint(tcc) programming framework was introduced by saraswat et al. to integrate the concurrent constraint(cc) programming paradigm with synchronous languages. time units are rounds, all the constraints are updated in each round, as ours are, whereas inside each round the constraints are computed to quiescence. cc programs are compiled into a constraint automata model, where states are cc programs and transitions represent evolution within a round while solving the constraints. in contrast, transitions in the constraint automata model for yeo describe the evolution between rounds. furthermore, the tcc approach avoids non-determinism as it targets synchronous languages, whilst yeo, as a coordination language, embraces non-determinism.



the constraint-based approach offers the possibility of using existing research and tools to develop an efficient implementation of yeo. constraints also provide a flexible framework, so it may be possible in the future to mix-in other constraint based notions, such as service-level agreements. future work will explore these directions, in particular, the increased expressiveness. we will also try to exploit the parallelism inherent in constraints.



