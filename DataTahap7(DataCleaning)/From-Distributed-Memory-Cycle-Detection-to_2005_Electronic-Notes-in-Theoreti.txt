in we proposed a parallel graph algorithm for detecting cycles in very large directed graphs distributed over a network of workstations. the algorithm employs back-level edges as computed by the breadth first search. in this paper we describe how to turn the algorithm into an explicit state distributed memory ltl model checker by extending it with detection of accepting cycles, counterexample generation and partial order reduction. we discuss these extensions and show experimental results.



the rest of the paper is organized as follows. in the next section we recall the main ideas of the graph algorithm as given in. the following sections deal with accepting cycle detection, counterexample generation, and partial order reduction, respectively. in a separate section, we summarize the experimental evaluation of the algorithm.



a distributed graph is such a graph whose vertices are divided into as many disjoint sets as there are participating workstations. in particular, a partition function is introduced to assign to each vertex a workstation the vertex belongs to(the workstation owns the vertex). the entire distributed computation is started and terminated by one of the workstations involved. this distinguished workstation is called the manager.



the graph is supposed to be given implicitly, i.e. by an initial vertex and a function that for a given vertex returns its immediate successors. during the computation of the algorithm all the generated vertices of the graph are stored on the corresponding workstations. thus each workstation keeps its own part of the distributed graph. if an exploration should proceed to a vertex that does not belong to the workstation, a message containing the vertex is sent to the workstation owning it and the local exploration of the vertex is skipped. the vertex is further processed by the destination workstation.



before explaining the idea of the algorithm we recall the definition of a back-level edge. in short, a back-level edge is such an edge in the graph that does not increase the distance from the initial vertex. for simplicity, we assume that all vertices of the given graph are reachable.



it is easy to see that for each cycle in the graph there is a maximal k such that the cycle contains a vertex from levelk. moreover, any edge on the cycle leading from a vertex in levelk has to be a back-level edge. since all vertices in the cycle have a successor it is obvious that each cycle in the graph contains at least one back-level edge.



the cycle detection algorithm works as follows. there are two procedures that the algorithm performs alternately. the task of the first procedure(henceforth called primary) is to find all the back-level edges by exploring the graph gradually level by level, while the task of the second procedure(henceforth called nested) is to test each discovered back-level edge for being a part of a cycle. the primary procedure is implemented as a level synchronized breadth first search of the graph. as soon as a level is completely explored, the nested procedures are initiated for all the back-level edges emanating from a vertex on the current level(called current back-level edges) in order to detect cycles. thus the goal of a nested procedure initiated for a back-level edge is to hit the vertex from which the back-level edge emanates(called target). if at least one nested procedure succeeds then the presence of a cycle is ensured and the algorithm is terminated. otherwise, the primary procedure continues with the exploration of the next level. each nested procedure searches for its target in a depth first manner. since there are many nested procedures performed concurrently, the target of each nested procedure has to be propagated by the procedure itself. unlike the standard dfs, the vertices are not marked as visited and so may be revisited. note that the search space of nested procedures can be limited to the vertices that have already been visited by the primary procedure.



the basic idea behind detection of accepting cycles in partially accepting components is to prevent the algorithm from detecting non-accepting cycles. for this purpose each nested procedure maintains an additional(accepting) bit to indicate that it has passed through an accepting state since its last pass through a current back-level edge. in particular, this accepting bit is set to true whenever the procedure reaches an accepting state and is set to false whenever the procedure passes a current back-level edge. the bit is set to false initially.



let us first assume that procedure[f, 0] arrives at state c before procedure[a, 0] or that a< f. in such a case procedure[f, 0] continues through states c and e and hits its target(the state f). while in the graph d) the procedure reaches its target with the accepting bit set to true, in the graph b) it reaches its target with the bit set to false. obviously, this can distinguish between accepting and non-accepting cycles.



let us assume now that a> f and procedure[a, 0] arrives at state c before procedure[f, 0] does. in such a case procedure[f, 0] is stopped when it arrives at state c, while procedure[a, 0] continues in the search. in the case of the graph b) procedure[a, 0] passes current back-level edge(f, b) without increasing its counter of passed current back-level edges because its accepting bit remains set to false. this means that the procedure does not change its identification and so it is stopped when it arrives at state c for the second time. in the case of the graph d) the[a, 0] procedure sets its accepting bit to true when it passes the accepting state e which allows the procedure to increase its counter of passed back-level edges when it passes the back-level edge(f, b). note that the accepting bit is reset to false when the counter is increased. the procedure then arrives at state c for the second time being identified as[a, 1]. this means that the procedure is not stopped but it continues in the search. at state e it sets its accepting bit to true and passes the back level-edge(f, b) changing its identifier to[a, 2]. then it goes through state c for the third time. at the state e it sets the accepting bit to true again and after passing the back-level edge(f, b) it exceeds the number of current back-level edges. hence, the existence of an accepting cycle is correctly detected.



the proof exploits the correctness of the algorithm for distributed backlevel edge detection as presented in. in addition, several facts have to be taken into account. if there is an accepting cycle in the graph then at least one(shallowest) cycle is explored completely by a nested procedure because either all queues bblq are emptied before the next level of the graph is processed or the presence of an accepting cycle is reported. another important fact is that no nested procedure can pass through a non-accepting cycle infinitely many times. for a more detailed proof see the full version of the paper.



model checking algorithms should be able to provide the user with a counterexample in the case the verified property is violated. in general, the computed counterexamples can be quite long which might make it difficult to locate an error. thus computing the shortest possible counterexample greatly facilitates the debugging process. in this section we present a technique to generate short counterexamples.



more precisely, for each vertex v the value par(v) is stored during the primary search which is the parent of the vertex v in the search(called bfs parent). note that it is assigned only once during the whole computation. in addition, we also store the value par-dfs(v) which is the parent of the vertex v in a nested search(called dfs parent). it is assigned every time a nested procedure is allowed to pass through the vertex. in both cases, the parents induce edges in the following way. if v is a vertex and par(v) is the bfs parent of v, then(v, par(v)) is the induced edge in the bfs parent graph, similarly the dfs parents define the dfs parent graph. in the following we show how the counterexample can be found by traversing the bfs and dfs parent graphs.



a significant positive feature of our algorithm is related to the length of counterexamples it provides. since the algorithm is primarily based on breadth first search exploration, the counterexamples tend to be short. see the section on experiments for a few examples.



the reduced state transition system is generated by a modified generation algorithm which explores only a subset of transitions, enabled at each state encountered during the generation, called an ample set. the ample set can be defined in a manner that does not depend on the particular way the state transition system is generated. this is accomplished by a set of conditions relating the full state transition system to the corresponding reduced one. note that there could be more than one ample set satisfying the conditions for a given state. we say that a state s is fully expanded whenever ample(s)= enabled(s).



to utilize partial order reduction within our distributed memory on-thefly algorithm we use the similar approach as implemented e.g. in the model checker spin. the approach combines the construction of the state space with checking that it satisfies the specification by exploring the product graph. the only condition that needs attention is obviously the cycle condition c3bfs. it can be shown that it is correct to check the condition with respect to cycles of the product. we have implemented the method and experimentally confirmed reductions in space and time.



as expected the counterexamples were very short compared to those returned by the nested dfs algorithm. this is due to the breadth first like nature of the state space generation. however, the time to find the counterexample was generally longer and more states had to be explored. we stress that the shortness of a counterexample is crucial in debugging.



