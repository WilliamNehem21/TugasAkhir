this paper briefly outlines the process of generating story diagrams, and describes a gxl schema to represent them. these diagrams result from a static, heuristic reverse engineering analysis and combine the data and behavioral information of uml activity and collaboration diagrams. this paper also summarizes potential issues in representing and visualizing story diagrams.



uml is a popular object-oriented modeling notation used in software development. the story diagram is a combination of the uml activity and object collaboration diagrams. this diagram was originally developed as a graph grammar language for forward engineering[6,7]. when used for reverse engineering, it can be used to better understand the control behavior and object-level dependencies of the software being analyzed. for example, the story diagram can present the notions of links being created and deleted between objects within the control flow of the program.



section 2 uses an example to illustrate how gxl is used to represent the method-level story diagram and how the information can be extracted from the source code to form the story diagram. section 3 summarizes some of the issues we encountered in designing a gxl schema. section 4 concludes the paper.



extract object collaborations: in the activity nodes(depicted as boxes), the specific actions are illustrated by object collaboration diagrams. the method calls or statements are marked by numbers according to the order in which they are invoked. for each method, start and end nodes depict the entry and exit points of the control flow.



extract link creation and deletion: knowing the data dependencies or links formed or destroyed between objects can help programmers understand the detailed object interactions. heuristics are used to extract these links statically. a green edge depicts a link that has been formed, and a red edge depicts one that is now broken. the following sub-section describes the current heuristics.



link creation and deletion are distinct features that separate story diagrams from normal uml collaboration diagrams. since the relationships between the objects are not always direct, and might occur through library routines, some heuristic rules are applied. the main approach considers the keywords of the method name at the site of a method call upon an object. if the call contains arguments, the referred objects are checked against the following rules to see if a link potentially exists between it and the receiving object of the method call.



link deletion rules are similar(with keywords such as remove, delete, etc.), with the added case of set*(null). for example, if anobj is discovered to be linked to some other object, then anobj.setcomponent(null) will break the link between the two objects.



currently, we are working towards a consistent schema for the representation and visualization of story diagrams at higher levels of abstraction. representation aspects include appropriate text labels with source code fragments. visual aspects include the shapes and colors of nodes and edges. at present, this information is stored as attributes of the corresponding nodes or edges.



in generating control flow diagrams in gxl format, we encountered the need for compound subgraphs where edges need to span the boundaries of two subgraphs at different levels(i.e., are not contained wholly within a nested subgraph). according to, we should put these edges in the least-commonancestor graph node. these kinds of dependencies create graph-layout challenges.



gxl can be used to represent method-level story diagrams using the schema outlined in this paper. xml markup over java code and the gxl representation can be used at the same time to present the code view and graph view of the story diagram. extending the schema for higher-level story diagrams is ongoing work. also, difficulties arise in the graph layout of complicated compound graphs such as story diagrams.



