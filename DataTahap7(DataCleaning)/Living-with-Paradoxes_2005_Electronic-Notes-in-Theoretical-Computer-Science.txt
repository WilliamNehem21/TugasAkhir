a good knowledge representation system has to find a balance between expressive power on the one hand and efficient reasoning on the other. furthermore it is necessary to understand its limitations and problems. a logic which contains strings is very expressive and allows for very natural representations, which in turn allow for appropriate reasoning patterns. however, such a system has the feature that it is possible to formulate self-referential paradoxes in it. this can be considered as a strength and as a weakness at the same time. on the one hand it is a positive aspect that it is possible to represent paradoxes, which can be formulated in natural language. on the other hand it is necessary to be careful and not to trivialise the logical system. in the paper different aspects of knowledge representation which allows self-referentiality will be discussed. a system will be presented which is a pragmatic compromise between expressive power on the one hand and simplicity and efficiency of the reasoning process on the other hand. it is built on a three-valued system that makes it possible to use reasoning techniques from classical first-order logic.



our system will be made more formal in the next section. in section 3 we make it clear what we mean by a paradox. section 4 is devoted to three-valued kleene logic, the system that will be used to deal with paradoxes. section 5 describes an efficient form of reasoning for the three-valued approach. some related work is presented in section 6. finally a summary is given.



the language we want to investigate is a standard first-order sorted language plus strings as terms. in addition to the standard setting, we use strings in the language. to this end we take characters as constant symbols in the language. following the description in we prefix characters by a colon, e.g.,



traditionally at this point the semantics of the language is discussed. in our case this is not so straightforward and the meaning of syntactic theory is one of the major problems with this language. hence we shall first try to get an intuitive idea of the semantics, then we discuss in more detail how such a system can be build up.



neither the attempt to remedy the problems with paradoxes by manyvalued logics nor the problems of an ad hoc solution by introducing a further truth value are new. in 1939 bochvar made such an attempt, but as church pointed out the same year, the problems can be easily reconstructed in the three-valued setting again(see[18, p.75]). actually, adding more and more truth values is a solution to the problem, but there is no intuitive meaning of these values any more.



however, if we restrict the language to a system, in which each function that can be built from the connectives has at least one fixpoint(conveniently, nn often plays that role), it is not possible to construct self-referential paradoxes. this restriction seems not to be a very serious one, since it is rarely desired to communicate paradoxicality. if one really liked to do so one would have to go to a four-valued setting(which would have paradoxes of a higher kind in itself, of course).



this forms a calculus for first-order kleene logic in general. in order to handle quoted expressions, we have to add axiom schemas that describe the semantics of the meta-predicates defined on them. in the case of the truth predicate true, which we have looked at more closely, this means we add the rules from remark 4.3, or corresponding axiom schemas.



summarising, we have presented a system for stating facts about truth. by adding further axiom schemas it is possible to extend the framework to deal with knowledge and belief as well. no unnatural restrictions on the expressive power are made in order to avoid self-referential statements. as shown in section 5 standard calculi can be used. in this work we have not produced a formal fixpoint construction for the true predicate, but only given an indication why such fixpoints exist. building on the work of kripke, barwise, etchemendy, and moss this should be possible, but is left as future work.



