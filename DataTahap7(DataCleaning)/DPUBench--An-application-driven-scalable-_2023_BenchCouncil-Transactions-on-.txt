in the past decade, the growth rate of cpu performance has been relatively slow due to the physical limitations it faces. as the size of transistor circuits approaches the scale of atoms, increasing challenges caused by physical limitations, such as leakage, have led to the failure of dennard scaling law. in contrast, many emerging computing fields, such as artificial intelligence(ai), big data, and the internet of things, are thriving as computing resources reach a threshold scale. the demand for computing resources in these fields is rapidly growing, resulting in cpu becoming increasingly incapable of meeting it in data centers. as a result, deploying specialized chips, such as gpu, tpu, and dpu, in data centers has become a new trend for both academia and industry.



benchmarking is a widely-used research method in computer science for evaluating the performance of systems. benchmarking evaluations can provide insights into the actual performance of the evaluated object and can guide future co-design and optimization of software and hardware. with the development of dpu and data centers, a dpu benchmark suite is necessary. however, to the best of our knowledge, there is currently no benchmark suite available for comprehensive



we evaluate nvidia bluefield-2 using dpubench and provide optimization recommendations. our experiments reveal that nvidia bluefield-2 can efficiently offload network applications from the cpu, particularly network storage protocol and dpi applications. in the end-to-end evaluation, we demonstrate that nvidia bluefield2 can effectively reduce the server cpu utilization ratio in network applications and allocate more cpu computing resources for computing applications.



the rest of this paper is structured as follows: section 2 provides the background and motivation. section 3 introduces the methodology of dpubench. section 4 presents the operator set in dpubench and the corresponding experimental results. section 5 discusses the endto-end evaluation programs in dpubench along with their respective experiment results. section 6 concludes with a discussion of related work, while section 7 outlines the conclusions and plans for further work.



in this section, we will first introduce the background of dpubench, including existing dpu benchmarks, dpu evaluation programs, and dpu characterization studies. next, we will have a brief introduction to the nvidia bluefield-2 dpu. based on the above discussion, we will provide the motivation for dpubench.



used for one specific dpu or dpu with one specific architecture. however, there is currently no dpu benchmark that can effectively evaluate dpus with different architectures, which is a significant gap in the field. furthermore, dpu architecture is rapidly evolving due to the increasing cpu computing resources that need to be offloaded in data centers, resulting in significant differences in dpu architectures between different dpu manufacturers or even the adjacent generations of the same manufacturer. therefore, a scalable dpu benchmark that can evaluate dpus of different architectures is needed, and it should be able to support the addition of new evaluation programs and metrics to accommodate the rapid development of dpus.



another motivation behind dpubench is to ensure the representativeness and coverage of the benchmark suite, as well as the effectiveness and reliability of the evaluation results. in terms of coverage, the benchmark programs should not only be at a certain scale to handle basic network application scenarios but also not impose excessive evaluation costs in terms of time and resource utilization. additionally, to ensure the reliability of the evaluation results, network-related metrics should be carefully selected, and dpus should be evaluated in a real network environment within data centers.



of problem definition, instantiation, and measurement. by providing a clear and detailed description of each step in the construction of dpubench, our methodology makes it easy to develop, maintain, and update. in this section, we will provide a detailed introduction to the various steps involved in constructing dpubench.



the problem definition of dpubench aims to determine the construction of the benchmark suite from an application perspective, specifically for network applications. in this regard, network-related metrics such as latency and throughput are selected as the evaluation metrics of dpubench, and the throughput acceleration ratio is chosen as the performance metric, along with the cpu utilization ratio. other approaches for problem definition in the problem space for conducting a dpu benchmark include determining the construction of the benchmark suite from an architecture perspective, a simulation perspective, and a real object perspective, among others.



by selecting these three scenarios, dpubench covers different aspects of network applications. the network scenario covers various network transmission protocols, the storage scenario includes compression and decompression algorithms as well as storage protocols, and the security scenario encompasses various encryption and decryption algorithms. as a result, dpu evaluation with dpubench is more comprehensive.



we then do the solution instantiation and implement dpubench. solution instantiation is to solve the instantiated problems and provide the research outcomes. it is a critical step in scientific research as it enables the provision of tangible research outcomes, such as tools, products, and research papers. and in dpubench, solution instantiation is one step of the methodology.



operator set is a component of the solution instantiation in dpubench, as mentioned in section 3. in this section, we will outline the process of extracting the fundamental operators from network, storage, and security scenarios for dpubench. we will then present the experimental results of the operator set, which include validating its representativeness and coverage, as well as evaluating the nvidia bluefield-2 using the micro-benchmarks of operator set. based on these evaluation results, we will provide optimization recommendations for utilizing dpu effectively.



16 gb of memory and runs ubuntu 20.04 os. the development and profiling tools used in the experiments are dpdk(version 20.11.3.1.18) and doca(version 1.2.1). each experiment is repeated more than three times, and the average values are reported for analysis.



we have conducted a performance evaluation on the nvidia bluefield-2 dpu, specifically the bluefield-2 model with encryption disabled and 25gbe capability. to ensure the micro-benchmarks, which are based on the operators in dpubench, are representative, we have implemented them using general optimizations commonly used in real dpu applications. these optimizations include multi-threading, resource pooling, and cache-line alignment.



workload on nvidia bluefield-2. the results indicate that offloading the application recognition to the dpu can result in a decrease of 10% to 15% in process delay. however, this reduction ratio is lower compared to the results obtained for the rxpmatch operator. this is because the packet processing procedure in the app-recognition workload involves both processing on the server cpu and on the dpu(nvidia bluefield-2), and the dpu can only accelerate the latter part of the processing procedure.



corporation(spec), which assesses single-core performance, and parsec provided by princeton university, which evaluates multi-core performance. the latest version of spec cpu is spec cpu2017, which is the sixth iteration of the benchmark. additionally, a new version of spec cpu, temporarily referred to as spec cpu v8, is currently in development.



for evaluating ai chips, there are representative benchmarks such as mlperf and aibench. mlperf focuses on selecting models from various ai tasks, including image classification, object detection, and machine translation, and constructs workloads for both training and inference evaluations. aibench, on the other hand, extracts 13 operators from typical ai scenarios and constructs micro-benchmarks using these operators. these benchmarks provide standardized and comprehensive evaluation metrics for assessing the performance of ai chips in different ai tasks.



