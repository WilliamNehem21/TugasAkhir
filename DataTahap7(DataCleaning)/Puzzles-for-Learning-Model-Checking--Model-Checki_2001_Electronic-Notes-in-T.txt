in spite of the importance of the formal approach for development of a reliable hardand software this research domain is not well acquainted to nonprofessionals. in particular, many undergraduate students of departments which are closely related to further progress of computer hardand software(i.e. pure/applied mathematics and electric/electronic engineering) consider formal methods in general to be out of scope of their interests, since they(formal methods) are puter scientists seem non-impressive. there are several popular world-wide known journals on mathematics for students as well as for researchers(ex., the american mathematical monthly). moreover, mathematicians become more concerned by popularity of the applied mathematics among students. in particular, society for industrial and applied mathematics(siam) recently launched a special section on education in the siam review(sirev). as is stated in the guidelines for sirev authors,



the above arguments can mislead to a conclusion that an attitude to popularization of formal methods theory is negative. this conclusion is invalid of course. really, let us just to remind international summer schools in marktoberdorf and european summer schools in logic, language and information. but let us also to remark that an auditory of these school is comparatively small(a couple of hundreds per year) and consists of graduate or postgraduate students, junior scientists or professors.



earlier and better teaching formal methods via popular(but sound) presentation of mathematical foundations of formal methods can be based on games and game-based puzzles. an educational role of games and gamebased puzzles is well acknowledged in the literature on logics of knowledge in computer science. for example, in a knowledge-based analysis of muddy children puzzle, synchronous attack and byzantine agreement motivate and illustrate basic theoretical ideas and concepts. may be the main lesson which educators/researchers should learn from is: for being attractive mathematical foundations of formal methods should be illustrated by challenging game-based examples.



both authors were trainers of teams of undergraduates for acm regional programming contests. so a question how to put the puzzle for programming arose naturally. finally a corresponding programming problem was designed and suggested to undergraduate students on training sessions. a brief form of the problem follows: where p is a power-set operation. we write im(p) and im(a) instead of pm(p) and rm(a) whenever it is implicit that p and a are propositional and action variables. models can be considered as labeled graphs with nodes and edges marked by sets of propositional and action variables respectively. for every model m=(dm, im)a validity relation|=m between states and formulae can be defined inductively with respect to the structure of formulae. for boolean constants, propositional variables and propositional connectives semantics is defined in a standard way while we have



in accordance with proposition 3.2 this design is correct. concrete models are quite good from pure mathematical viewpoint and an idea to implement, plug and play the above preliminary design seems to be natural. sorry, concrete models are too large from viewpoint of computer science since amounts of possible positions and possible moves are exponential functions of n.



an importance of teaching program logics and model checking discussed above in section 2 is based on importance of model checking applications. the main area of a model-checking applications is automatic verification of hardand software presented as finite state systems. new application domains include verification of high-level software specifications automatic test generation, etc. we suppose that in all cases a high-level reliability of model checkers is of extreme importance due to an automatic character of model checking.



due to complexity reasons mentioned above, a polyvariant approach to reliable model checking is time, space and cost expensive. the second approach seems to be problematic also since test-generation is a non-trivial problem itself. this problem is discussed in brief in the next paragraph. as far as a formal verification is concerned, then let us point out on a recent paper, where an automatically generated from a proof model checker is reported. to the best of our knowledge it is the first and unique paper on formally verified model checkers. this verified model checker is an implementation on caml of a model checking algorithm from, it is generated by an interactive logic framework coq from a formally presented proof of correctness of the algorithm.



