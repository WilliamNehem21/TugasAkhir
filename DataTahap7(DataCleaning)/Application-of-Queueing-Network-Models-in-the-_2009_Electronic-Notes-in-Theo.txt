in this paper, we model database designs using queueing networks, giving visibility to the dynamic behaviour of the database design and allowing the database designer to experiment with different design decisions. our approach is to abstract away the more detailed levels of the database system design by concentrating on the information that is available to the database designer at design time. it differs from other methods of database system performance evaluation in that the performance assessment is specifically targeted at the database design, not at the database system software architecture. we present a bottleneck evaluation of the transaction processing performance council tpc-c benchmark under different workload conditions and demonstrate how this affects database design decisions.



moreover, commercial database performance tuning tools advocate postdeployment tuning. these tools rely on query optimizers and statistics from working production databases to give recommendations for performance improvements[2, 7, 36]. to the best of our knowledge, there are no performance evaluation tools for database designs.



the intention of this paper is to establish the validity of our method in effectively modelling database designs as a first step in achieving a complete framework for the performance evaluation of database designs and database systems. in, we built the argument for the necessity of a performance evaluation model specifically targeted at database designs. in, we have shown that queueing network models are applicable to database designs. this was demonstrated through the validation of a queueing network model for the transaction processing performance council tpc-c benchmark against implementations of the benchmark, namely,,,, and. in this paper, using the tpc-c benchmark, we extend the work presented in to include the effect of more realistic transaction arrival rates. some of the results in are repeated for the sake of clarity.



the rest of this paper is organized as follows: in section 2, related work is discussed. the application of queueing networks to database designs is described in section 3. performance analysis of the tpc-c benchmark is in section 4. finally, conclusions and future work are in section 5.



on the other hand, in the performance evaluation discipline, the majority of methods and approaches are concerned with the performance evaluation of the software architecture of software systems, modeled on the physical hardware devices. an attempt in the performance evaluation field to evaluate database system performance at a more detailed level was a method for performance evaluation of client/server architectures using queueing networks for a propriety system. client/server system performance was calculated by estimating transaction service demands, using a model of a dbms query optimizer, to derive input parameters for a queueing network model of the underlying software architecture of the system. a similar attempt was conducted by.



database system performance is usually measured in terms of query and transaction response time; the major indicator of a system capacity problem. after a database system has exhibited a performance problem, the main effort of post-deployment performance tuning is concentrated on the revision of the design of the database and the transactions running against the database[16, 24, 27, 36]. hence, if the flaws of the database design had been discovered before system implementation and deployment, some of the post-deployment performance problems would have been avoided. the database design artifacts are the main contributors to performance problems; therefore, an early evaluation of their performance coupled with the knowledge of the application design is a major factor in the reduction of postdeployment database tuning.



at the design stage of database development, query optimization techniques are used as guidelines in designing efficient queries and transactions. these techniques can be adapted by a database designer to optimize a given sql statement, at design time, in isolation, but are very cumbersome to use when considering the effect of a query on the performance of other transactions, or the effect of concurrent access to the database of different transactions or different invocations of the same transaction. being so, the trend is to wait until database system deployment, when the effect of concurrency and the interaction of different transactions will be clearer to optimize the performance of problematic queries and updates[8, 24]. by using queueing networks to model the dynamic behaviour of the database design, the database designer can evaluate the dynamic behaviour of the design, before the physical deployment of the database system.



dbms use queues to control access to data objects; a new transaction is given access to a data object depending on the state of the current transactions waiting to access or currently accessing the data object. depending on the concurrency control mechanism implemented by the dbms, access is either granted immediately to the new transaction or it is forced to wait behind the current transactions. fcfs abstracts this in forcing all transactions to wait.



the information needed to build the performance model is easy to acquire during early database design phases. if the amount of detail that is available to the database designer at design time is considered, more detailed information would not be appropriate. however, this amount of information is sufficient for our performance modelling purpose.



query optimization techniques use query trees as an alternative representation of relational algebra expressions, which are a translation of a sql query. thus, a dbms query cost optimizer builds a query tree to represent the sql query based on the most efficient method to evaluate the query and in turn implement the relational operators. efficiency is measured in db i/o pages[8, 16, 24]. therefore, the optimized query tree provides the optimal access plan for the sql query, in



we have shown in, that the queueing network model of the tpc-c benchmark database design exhibits comparable performance behaviour and a similar transaction average response time pattern as the disclosed results of the implementations in,,,, and. the queueing network model was able to capture the expected behaviour of the database transactions, using the details of the database design, the transaction db i/o page costs, and the assumptions detailed in the appendix without considering the level of detail of the tpc-c benchmark disclosed implementations. this demonstrates the ability of the model to represent the database system.



