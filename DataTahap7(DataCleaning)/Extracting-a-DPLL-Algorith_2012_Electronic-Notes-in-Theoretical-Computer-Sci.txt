we formalize a completeness proof for the dpll proof system and extract a dpll sat solver from it. when applied to a propositional formula in conjunctive normal form the program produces either a satisfying assignment or a dpll derivation which shows that it is unsatisfiable. we use non-computational quantifiers to remove redundant computational content from the extracted program and improve its performance. the formalization is carried out in the minlog system.



program extraction aims at producing formally verified programs from a constructive proof. an example of early work with program extraction is that done in the nuprl system. examples of program extraction in minlog can be found in[5,3]. other mature interactive theorem provers that support program extraction are coq, which is based on the calculus of inductive constructions, and isabelle[22,21], a generic theorem prover with extensions for many logics. more recently, other interactive theorem provers based on dependent types[pm80], such as agda



significant work has also been performed in isabelle with several decision procedures having been verified and integrated into the system. the dpll algorithm has been formalized in. the automatic theorem prover metis was formally verified inside isabelle and is now used to reconstruct proofs from faster external procedures such as the ones used in sledgehammer.



the approaches[15,16] to formalizing a dpll sat-solver in both coq and isabelle involve explicitly stating the algorithm to be verified. in contrast, we prove a theorem that just states that each formula in cnf is either unsatisfiable or has a model, and synthesise the program from the proof. in the long run we would like to integrate automatic verification techniques into minlog. extracting a sat-solver in minlog is one step towards our end goal.



the program extraction procedure respects the different kind of quantifiers by omitting in the nc case any information corresponding to the quantified variable. the proof rules for the nc-quantifiers are subject to stricter variable conditions ensuring that the omitted information is indeed not needed in the extracted program. minlog is able to automatically detect the maximal set of occurrences of quantifiers in a proof that can be made non-computational without compromising the correctness of the proof.



in order to apply the solver practically we need to translate the extracted minlog term into a functional programming language such as scheme or haskell. currently a translation mechanism from minlog into scheme is available, however it does not extract inductive definitions and general recursion. we would like to extend this translation to cover these definitions. having our dpll solver as a haskell program would allow us to observe how lazy evaluation affects performance.



