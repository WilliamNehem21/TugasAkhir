fuzzy logic programming represents a flexible and powerful declarative paradigm amalgamating fuzzy logic and logic programming, for which there exists different promising approaches described in the literature. in this paper we propose an improved fuzzy query answering procedure for the so called multi-adjoint logic programming approach, which avoids the re-evaluation of goals and the generation of useless computations thanks to the combined use of tabulation with thresholding techniques. the general idea is that, when trying to perform a computation step by using a given program rule r, we firstly analyze if such step might contribute to reach further significant solutions(non tabulated yet). when it is the case, it is possible to avoid a useless computation step via a rule r by using thresholds and filters based on the truth degree of r, as well as a safe, accurate and dynamic estimation of the maximum truth degree associated to its body.



in what follows, we adapt the original tabulation procedure for propositional residuated logic programs described in to the general case of multi-adjoint logic programs. there are two major problems to address: termination and efficiency. on the one hand, the tp operator is bottom-up but not goal-oriented. furthermore, the bodies of rules are all recomputed in every step. on the other hand, the usual implementations of fuzzy logic programming languages(e.g.) are goaloriented, but inherit the problems of non-termination and recomputation of goals. in order to overcome these problems, the tabulation technique has been proposed in the deductive databases and logic programming communities. for instance, in one heading the tree. in this sense, the truth degree attached to the root of the tree, acts as a threshold for deciding which program rules can be used for generating new nodes in the tree. note also that this threshold is dynamically updated by rule value update: the more it grows, the less chances for root expansion to create new children of the root.



the main goal of thresholding is to reduce the number and size of trees in the forest. this way, although the order of application of the rules is irrelevant because they generate the same solutions, the refinements introduced by thresholding might produce different forests depending on how and when rules are applied. in this section we provide some heuristics in order to minimize as much as possible the complexity of the generated forest.



lazily it is applied, the less chances it has to generate new nodes. so, we assign it the lowest priority in our deterministic procedure. for a similar reason, it is also important to increase the threshold at the root of a tree as fast as possible. in order to do this, we propose:



as we have shown in the previous section, thresholding can be seen as an improvement performed on the core of the basic tabulation proof procedure. the general idea is that all nodes whose value of the body cannot surpass the current value of the root node can be safely removed, or directly, not generated. the thresholding technique described in section 4 was based on the truth degree of each program rule tried to expand the root of a given tree. however, there is at least two more opportunities for performing thresholding, thus avoiding the unnecessary expansion of trees, as we are going to see in this section.



expansion rule. this idea was initially proposed as a further refinement of the original tabulation method for propositional, residuated logic programs of. in the multi-adjoint logic setting, we also find a recent precedent: the same test was used in the pe-based reductant calculus proposed in, when collecting leaves of residual unfolding trees. in this paper we are interested in formalizing the same idea inside our thresholded tabulation method for multi-adjoint logic programs.



in this paper we were concerned with efficient query answering procedures for propositional multi-adjoint logic programs. we have shown that, by using a fuzzy variant of tabulation(specially tailored for the multi-adjoint logic approach) it is possible to avoid the repeated evaluation of redundant goals. moreover, in the same fuzzy setting, we have also combined tabulation with thresholding, thus safely avoiding other kind of non-redundant, but useless computations.





