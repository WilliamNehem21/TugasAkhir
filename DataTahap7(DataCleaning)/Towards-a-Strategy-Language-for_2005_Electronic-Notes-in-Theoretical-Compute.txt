we describe a first proposal for a strategy language for maude, to control the rewriting process and to be used at the object level instead of at the metalevel. we also describe a prototype implementation built over full maude using the metalevel and the metalanguage facilities provided by maude. finally, we include a series of examples that illustrate the main features of the proposed language.



in the maude system, this need for providing strategies for controlling the rewriting process has been satisfied by developing strategies at the metalevel. taking advantage of the reflective properties of rewriting logic, the meta-level module in maude provides basic operations(also called descent functions) that reflect at the metalevel the processes of rule application and rewriting. using these operations as basic building blocks, it is possible to define at the metalevel a whole variety of internal strategy languages[5,3], that is, the strategy language is defined inside the same rewriting logic framework, instead of being defined as an add-on extralogical feature. although reflection allows a complete control of the rewriting of a given term using the rewrite rules in a theory, for users unfamiliar with the metalevel there is a price to be paid both conceptually and notationally.



for the development of our language, including both ideas and examples, our design is quite different since, unlike elan, it is based on a strict separation between the rewrite rules and the strategy expressions, that are provided in separate modules. thus, in our proposal it is not possible to use strategy expressions in the rewrite rules of a system module. in fact, this separation makes possible defining different strategy modules to control in different ways the rewrites of a single system module.



as also mentioned above, a key modularity principle followed in our language design is the strict separation between strategies and rules. the language allows defining strategy modules that associate specific strategies with system modules. in a system module(at the object level) there are no strategy expressions at all. moreover, as already mentioned, we can have different strategy modules associated with the same system module.



a strategy expression of the form l[s]{b1... bn} denotes a basic strategy that applies anywhere in a given state term the rule l with variables instantiated by means of the substitution s and using b1,..., bn as search expressions to check the rewrites in the condition of l. the number of rewrites appearing in the condition must be n for the expression to be meaningful.



with the previous combinators, we cannot force the application of a strategy to a specific subterm of the given initial term. in particular the scope of the substitution in the(x)match combinators is only the corresponding condition. we can have more control over the way different subterms of a given state are rewritten by means of the(x)matchrew combinators.



the version matchrew works in the same way, but performing matching only at the top. in both versions, when the condition is true it can be omitted. in elan and stratego there is a strategy combination mechanism called congruence operators[2,13]. for each syntax constructor c there is a corresponding congruence operator, also denoted by c. if c is an n-ary constructor, then the corresponding congruence operator allows defining the strategy



recursion is achieved by giving a name to a strategy expression and using this name in the strategy expression itself or in other related strategies. this is done in strategy+search modules(see section 2.3). concrete examples will be shown in section 5.



a strategy expression denotes a function from terms(as states) to(possibly infinite) sets of terms, denoting the successful states. more specifically, the resulting set of terms is a subset of the set of nodes of the computation tree in module m whose root is the given initial term for the strategy. if the result set is empty, then the strategy has failed on the initial term. in particular, independently of the term t, for the constants idle and fail we have idle(t)={t}, and fail(t)={}, the empty set.



whole strategy e also fails. the strategy expression e= matchrew t s.t. c by t1 using e1,..., tn using en is the special case in which matching can only happen at the top, that is, the context c' is empty.



the function first receives a system module, a strategy+search module, and a path(initially this path is formed only by the root of the tree), and it returns the first successful path obtained from the given path. the function next receives initially a successful path and returns the path to the next solution in the tree(or fail if there are no more solutions). they are implemented in a mutually recursive way, distinguishing cases on the strategy expression in the last node of the given path, and with the help of the metalevel descent functions metaapply, metaxapply, metamatch, and metaxmatch[4, section 10.4].



input/output of strategy+search modules and of commands for execution is accomplished by the predefined module loop-mode, that provides a generic read-eval-print loop[4, section 11.1]. this module has an operator[_,_,_] that can be seen as a persistent object with an input and output channel(the first and third arguments, respectively), and a state(given by its second argument). our prototype user interface has been implemented as an extension of full maude. full maude maintains as the state of the loop object a database of modules entered into the system. we have extended this state to maintain values of sort path to remember the last result found. then, we defined rewrite rules that describe the behaviour associated with the new com-



the first example is a simple game. you have a blackboard on which several natural numbers have been written. a legal move consists in selecting two numbers in the blackboard, removing them, and writing their arithmetic mean. the objective of the game is to get the greatest possible number written on the blackboard at the end. the specification of the game in maude is also quite simple.



a player can choose the numbers randomly, or can follow some strategy. possible strategies consist in taking always the two greatest numbers, or the two smallest, or taking the greatest and the smallest. the following module extends the blackboard module with operations to get the maximum or minimum number in a blackboard, and for removing an element in the blackboard.



this example illustrates how a strategy map(s), that applies a strategy s once to every element in a list, can be defined in our language. first we define a system module declaring lists of elements and a conditional rewrite rule that decomposes a list in its head and tail and whose conditions rewrite these components. this rule has been defined only for the purpose of defining the strategy and, as we shall see below, can be avoided.



the first possible implementation of map(s)(strategy map1 below) uses an if-then-else to distinguish between the empty and nonempty lists. if the state list matches the nil constructor then the constant idle strategy is used. if the list is nonempty, then the rule list is used and the strategy says how: it has to be applied at the top and its first rewrite condition has to be solved using the strategy s to rewrite the head of the list, and the second rewrite condition has to be solved using recursively the list strategy map(s).



the problem with this kind of implementation is that a rewrite rule has to be included for the only purpose of separating the components of the state term that have to be rewritten in a controlled way. the matchrew constructor can be used to solve this problem. it is used in the second implementation(strategy map2 below). in this case the orelse constructor is used to distinguish cases(only for illustrating different possibilities). if the state list matches the nil constructor, then it is trivially successful. otherwise, the list is decomposed with the pattern e l, and then e is rewritten using s and l is



the module ccs-semantics below contains the ccs semantics representation without these tricks. 5 in this kind of representation, semantic transitions are represented as rewrites, and semantic rules are represented as conditional rewrite rules, where the main rewrite corresponds to the transition in the conclusion of the semantic rule, and the condition rewrites correspond to transitions in the premises. in ccs transitions are labelled with actions; in our maude representation this label is part of the righthand side term, built with the{_}_ operator.



this strategy first checks if it has already obtained a solution. if this is the case, it finishes. otherwise, it applies at the top the expand rule, using rules next to solve the condition; then, it checks if the extension is right, and continues recursively.



strategy sconf describes the correct protocol. the rules mcom, mcomns, linklistload, and portnode(in the network module) describe the behaviour of the network[9,8]. strategy smediator controls the mediator. first, it tries to apply rule chdemand-ok ensuring that sconf is used to rewrite the condition. if this is not possible, then there is an error. strategy checknoconn checks that the rules mcom or mcomns cannot be applied to the controlled network. this means that the desired connection does not exist, and the rule chdemand-noconn is applied. otherwise, the problem is the lack of capacity, and the rule chdemand-nocap is applied.



the algorithm keeps two indices, one pointing to the next element to be inserted between the already sorted elements, and another pointing to the element which is being inserted. so in this case the memory needed by the strategy consists of two natural numbers. the following module defines the memory and the needed operations to change it as rewrite rules.



we have described and illustrated by means of examples a first proposal for a strategy+search language for maude, to be used at the object level(as opposed to the metalevel) to control the rewriting process. we have also presented a prototype implementation built over full maude using the metalevel and the metalanguage facilities provided by maude. there is however much more work to do. to begin with, the current prototype has to be extended in order to implement the missing capabilities, such as breadth-first search and depth bounds. also, more examples need to be developed in order to validate the current proposal. since this is still work in progress, it is at present difficult to do a full comparison with other languages such as elan and stratego; this will be addressed in the future.



the current design of the strategy language could be extended by including new combinators; for example, congruence operators could be made available to the user, instead of having to simulate them by means of the matchrew combinator. stratego also provides combinators for composing generic traversals. the operator all(e) applies the strategy e to each of the direct subterms ti of a constructor application c(t1,...,tn). by using the all combinator generic traversals can be easily defined:



another extension we are studying is to consider strategy identifiers with parameters that can then be used in the corresponding strategy expressions. for example, using this idea we could rewrite the insertion sort strategy in section 5.6 as follows, where there is no need to use a memory structure.



