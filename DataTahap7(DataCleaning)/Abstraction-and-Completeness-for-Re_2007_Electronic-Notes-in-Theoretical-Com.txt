this paper presents criteria that guarantee completeness of real-time maude search and temporal logic model checking analyses, under the maximal time sampling strategy, for a large class of real-time systems. as a special case, we characterize simple conditions for such completeness for object-oriented real-time systems, and show that these conditions can often be easily proved even for large and complex systems, such as advanced wireless sensor network algorithms and active network multicast protocols. our results provide completeness and decidability of time-bounded search and model checking for a large and useful class of dense-time non-zeno real-time systems far beyond the class of automaton-based real-time systems for which well known decision procedures exist. for discrete time, our results justify abstractions that can drastically reduce the state space to make search and model checking analyses feasible.



in terms of expressiveness and the generality of the systems that can be specified, real-time maude is clearly in the same category as modeling and simulation tools. but in terms of analytic power, it is much closer to the above-mentioned automatonbased tools, although with some limitations. the limitations in question have to do with the fact that, since we are dealing with general classes of infinite-state real-time systems for which no decision procedures are known, some of the formal analyses are incomplete.



using such a method is a real counterexample in the system; that is, if the method does not yield spurious counterexamples. in this precise sense, all the formal analysis methods supported by real-time maude are indeed sound. we call an analysis method complete if the fact that a counterexample is never found using the method actually means that no such counterexamples exist for the analysis in question. for example,(timed) breadth-first search for a violation of an invariant property will be complete if the fact that the search never finds any such violation(assuming an idealized machine) actually means that no such violations exist. similarly, the ltl



of course, to guarantee completeness one has to check the time robustness of the specification and the tick-stabilizing nature of the relevant state properties. that is, a complete analysis decomposes into two tasks:(1) a standard formal analysis in real-time maude under the mte time sampling strategy; and(2) the checking of appropriate proof obligations ensuring time robustness and tick-stabilization. we address the pragmatic question of finding simple and easy-to-check proof obligations to accomplish task(2). specifically, we show that for a very large class of systems, namely, real-time object-oriented systems made up of objects that can communicate asynchronously by message passing, if one follows the specification methodology advocated in, there are indeed quite simple proof obligations that, if met, discharge task(2). we illustrate the ease of checking such proof obligations by means of several nontrivial examples. finally, since some of the systems that we have analyzed in the past involve the use of probabilistic algorithms, we also include a discussion of how our results can be interpreted for such systems.



however, we gain a lot in efficiency by advancing time as much as possible. for example, using the maximal time sampling strategy, it took real-time maude 1.5 seconds to find the bug in nominee selection component, while the same search took 160 seconds, i.e., about 100 times longer, when time was always increased by one time unit.



for a new variable x of the appropriate sort. in this way absolute completeness could be regained. alternatively, if the time domain is discrete, we could force time to stop at each moment in time that is within the desired time interval, and have a nondeterministic choice of whether or not to let the timer expire at that moment. both of these alternatives would lead to time-robust specifications, so that analyzing these versions with the maximal time sampling strategy would really be complete for all possible behaviors of the aer/nca protocol. finally, it is worth mentioning that the rate control component of aer/nca does not exhibit any probabilistic features, so that the maximal time sampling strategy analyses really cover all possible behaviors of this component.



we have recently modeled and analyzed the sophisticated ogdc density control algorithm for wireless sensor networks in real-time maude. our objectbased specification of ogdc uses the specification techniques given above. given the complexity of the specification, it is remarkable how easy it is to prove timerobustness by proving oo1 to oo4. for example, it follows directly that the



besides the fact that proving completeness of the analysis using maximal time sampling is almost trivial, we gain much by using maximal time sampling, since time is measured in milliseconds in this algorithm, while one round of the algorithm lasts for 1,000 seconds. an analysis based on visiting each moment in time would be unfeasible for such systems. indeed, none of the analysis commands in could terminate after several hours when we used the default time sampling strategy which increases time by one millisecond in each tick step.



