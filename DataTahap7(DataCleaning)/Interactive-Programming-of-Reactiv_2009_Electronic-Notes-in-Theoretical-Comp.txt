this paper presents rmltop, the reactiveml counterpart of the ocaml toplevel. this toplevel allows a programmer to interactively write reactiveml programs which are type-checked, compiled and loaded on the fly. the user can then progressively run concurrent processes and observe the interactions between them.



the main strength of rmltop is that all valid reactiveml expressions are accepted in the toplevel with the same semantics as in the compiler. this allows to use the reactiveml toplevel as a debugger. furthermore, the interpreted code is as efficient as if it was compiled. moreover, a toplevel interpreter being itself a reactive system, another originality of rmltop is its own implementation in reactiveml which makes it relatively light.



reactiveml phrases on the standard input, compiles them and executes them. moreover it provides control directives to run a process, suspend the execution of the running processes, execute only the next n reactions or resume the execution. those directives are directly launched in the toplevel. additionally, the suspension directive can be launched by processes. it allows to program an observer that decides to suspend the execution when a certain condition is verified.



any reactiveml program accepted by the compiler can be executed in the toplevel. moreover, the execution is as efficient as the compiled version of the program. the reactiveml toplevel does not interpret programs. it compiles them into bytecode and executes the bytecode.



notice that contrary to esterel, reactiveml follows the boussinot semantics: the reaction to absence of signals is delayed. this restriction ensures that programs are causal by construction(a signal cannot be present and absent during an instant). in the following, we assume that the reader has some notions of the ocaml language and of synchronous programming. we will not present the reactiveml language in details here, but only what is necessary for the following. for more details on reactiveml the reader can refer to[15,16].



the process planet creates a new random planet and enters in an infinite repetition of three parts. first it emits the position of the planet on the signal env to communicate it to other planets. then it waits for the value of this signal(the list of all planets) which is available at the next instant. finally, it uses this information to compute the new position of the planet. to summarize, all the planets emit their position on the signal env. it is used by the window process for display and by each planet to compute its position at the next instant. we now run the process planet.



it would be very difficult to suspend by hand the simulation exactly when a planet is in front of the sun, and tedious to execute the system step by step until an eclipse occurs. fortunately, the#suspend directive can be launched by processes. we can thus define a process eclipse_observer that suspends the simulation if a planet is at an eclipse position.



the process eclipse_observer is a synchronous observer. it can observe dynamic properties without modifying the behavior of the system. the combination of this feature with the possibility to suspend the simulation allows to set semantic breakpoints. these breakpoints are defined by arbitrarily complex conditions expressed in the language itself. this is an original and powerful way to suspend the execution of a program.



the reactive machine and its controller run in a separate thread of the ocaml toplevel. this software architecture allows the reactive machine to share the environment of the ocaml toplevel. the communication between the two threads is made through shared memory. so we use a lock rmltop_global.mutex to prevent data races. this lock is taken during the execution of reactiveml phrases(compiled into ocaml).



the execution of a directive sets a global reference in the execution environment. the controller can then access the reference to treat the directive. there is one reference by directive, defined in the module rmltop_global. let us now present the reactive machine.



machine_controller. it determines when the reactive machine must compute a new instant. it is composed of two modes:(1) the sampled mode and(2) the step by step mode. it must switch from the first one to the second one when the signal suspend is emitted, and from the second one to the first one when resume is emitted. when the machine is in the second mode, if the signal step is emitted, then a fix number of instants(given by the value associated to step) is computed. this computation can be interrupted if the signal suspend is emitted.



the controller is also in charge of the translation of directives into reactiveml signals. we have seen in section 3.1 that the reactive machine and the controller communicate through shared variables(suspend, resume and step) defined in the rml_global module. the controller monitors these global variables and emits the corresponding signal when the status of a variable changes. this behavior is implemented by the following generate_signals process.



due to the software architecture of rmltop, any valid reactiveml expression is accepted in the toplevel and has the same semantics and efficiency as the compiled version. indeed, the same reactiveml compiler is used for the two versions of the language and the ocaml toplevel is as efficient as the bytecode compiler. moreover this software architecture results in a light implementation.



first, we can remark that it is not possible to implement a reactive toplevel based on the semantics of esterel. in this model, processes cannot be dynamically added to a running program because causality loops may appear when two expressions are composed in parallel. for example, in the following expression, even if each present expression is causal, the parallel composition of the two is not causal.



here, with esterel semantics, if we suppose that s1 is absent we can deduce that it is emitted in the same instant. if we suppose that it is present, we can deduce that it is not emitted. hence, this program is absurd.



with reactiveml semantics, if we suppose that s1 is absent then we can deduce that it will be emitted at the next instant: there is no causality loop. with the reactive model of boussinot, all programs are causal by construction. so, contrary to esterel, it is always possible to add a process to a running machine.



the killable process is a higher order process. it associates a fresh identifier to p using the gen_id function and prints it such that the user can know it. then the body of the process executes p under the supervision of a kill_me signal: the presence of this signal interrupts the execution. kill_me is emitted when the identifier of the process belongs to the list of processes to kill(the value associated to kill) or when the execution of p is terminated.



the body of the function contains a join-definition(def/in) that introduces three channels(state, set and get). this join-definition is made of two reaction rules. the first one defines the behavior of set: it updates the state of the buffer. the second one defines the behavior of get: it returns the value contained in the buffer.



we have presented rmltop, an interactive mode for the reactiveml language. it can be helpful to design and debug reactive systems and for teaching purposes. it provides a way to execute a program in a sampled mode or step by step and to dynamically modify the behavior of a system. an originality of this toplevel lies in the fact that it is itself coded in reactiveml. it results in a light and elegant code, that could be even better if reactiveml would provide asynchronous tasks. this gives a good motivation to add such a feature to the reactiveml language.



