component based software has gained recognition as the key technology for building high quality and large software. in this setting, sharing collections of components has become common practice for component oriented applications. these components are independently produced and developed by different providers and reused as black boxes making it necessary to identify component dependencies to guarantee interoperability.



several techniques exist to ensure substitutability between components, see for example[12,13]. all these approaches are built upon the substitution principle of liskov introduced in in the context of object oriented programming. they use the interface type to define a subtyping relation between components and then authorize cnew to replace cold only if cnew is a subtype of cold. various forms of those types exist, starting with the classical interface type and enhancing them with behavioral description such as automata for example. some related research[12,13] show that the resulting condition of pure subtyping ensures safety of the replacement but is too restrictive. recent work has shown the limits of this approach and proposes a less restrictive notion of substitutability depending on the context. in this setting, cnew may safely replace cold in certain systems. in fact, all interfaces not used in the context are ignored when ensuring the subtyping.



the paper is organized as follows. section 2 introduces our dependencies description and illustrates it with the example of a mail server in linux gnu. in section 3, we present our substitutability approach with a progressive refinement of substitutability definitions. section 5 describes the substitutability checking algorithm. section 4 illustrates some substitutability examples. section 6 discusses related work. finally, section 7 concludes and discusses future work.



intra-dependencies are defined by the producer of the component and used to perform installation. inter-dependencies result from installation and are used to perform deinstallation and replacement. the two notions are briefly presented below, more details on these concepts are given in.



contextual substitutability is related to the context which represents the resources and the architecture of the target system. ideally, it could be the union of the dependencies of all components(part of the system). the resulting description of the context would be a huge logical term. its manipulation when deciding whether to authorize a deployment operation would be difficult and expensive(in calculation). thus, we have chosen instead a safe approximation of the context description. the context definition is presented in. it is summarized as follows:



compared to existing substitutability approaches, the condition(nc) is original because it enables to take into account various form of component effects on the context(potential conflicts that can occur due to the new component) and maintaining the safety of the system. in an extension of our system not presented here, we have the specification of non-functional properties. replacing a component by another may have an impact on the system properties and therefore may be forbidden. an example of a such substitution is further discussed in section 6.



