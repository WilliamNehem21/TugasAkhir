this paper introduces lemon, a generic open source c++ library providing easy-to-use and efficient implementations of graph and network algorithms and related data structures. the basic design concepts, features, and performance of lemon are compared with similar software packages, namely bgl(boost graph library) and leda. lemon turned out to be a viable alternative to these widely used libraries, and our benchmarks show that it typically outperforms them in efficiency.



the goal of the library is to provide highly efficient, easy-to-use and wellcooperating software components, which help solving complex real-life optimization problems. these components include graph implementations and related data structures, fundamental graph algorithms(such as graph search, shortest path, spanning tree, matching, and network flow algorithms) and various auxiliary tools(for example, flexible input-output support for graphs and associated data). furthermore, the library provides a common high-level interface for several linear programming(lp) and mixed integer programming(mip)[10,12] solvers.



lemon is designed to be cross-platform and supports a wide range of operating systems and compilers. up to now, it is tested on linux, windows, osx, and aix systems with the following compilers: gcc 3.3-4.4, intel c++, ibm xlc, visual c++ 2005, 2008, and 2010, mingw. due to the cmake based build environment, lemon integrates well with various ides, such as visual studio, codeblocks or eclipse.



the rest of this paper is organized as follows. section 2 provides an overview of the main features of lemon compared with similar c++ graph libraries. section 3 describes selected implementation details. section 4 compares the performance of the discussed libraries by benchmark tests of fundamental algorithms. section 5 outlines the main further plans for developing lemon. finally, the conclusions are drawn in section 6.



undirected graphs provide an edge type for the undirected edges and an arc type for the arcs. this separation makes the implementation of some algorithms simpler(e.g., planar graph algorithms) because we can distinguish the undirected edges from their directed variants. on the other hand, the arc type of an undirected graph is convertible to the edge type, thus the corresponding edge of an arc can always be obtained conveniently, without calling any functions. as a result, all methods and data structures that are designed for edges can be used directly with both edges and arcs. this could be quite practical in several cases. for example, a property map(see section 2.3) that assigns data to edges can be used with both edges and arcs, but an arc map can only be used with arcs.



the adjacency list class template of bgl implements both directed and undirected graphs by extensive use of template specializations. as a result, directed and undirected graphs have the same interfaces but different semantics in bgl. the edges of undirected graphs are usually considered undirected, but they have directions in some cases, for example, in iterations. such an inconsistency could be confusing. moreover, this design does not make it possible to define property maps whose keys are the directed variants of the edges, although it would also be important in certain algorithms.



various special purpose graph types are also implemented in the libraries, for example, full graphs, grid graphs or adjacency matrix graphs. furthermore, all of the three libraries provide an optimized static data structure for directed graphs, which stores the nodes and arcs in arrays or vectors in such a way that the arcs are sorted by their source nodes. as the crucial operations of most directed graph algorithms iterate on the outgoing arcs of the nodes, they typically run faster using these static implementations.



most graph libraries provide iterator classes for traversing through the elements of the graph data structures(i.e., the nodes and arcs). lemon defines a special iterator interface, which does not conform to the iterator concepts of the c++ standard template library(stl).



the iterators of lemon are initialized to the first element in the traversed range by their constructors, and their validity is checked by comparing them to a special constant invalid. furthermore, each iterator class is convertible to the corresponding graph element type, without having to use operator*(). this feature distinguishes lemon iterators from the standard c++ iterators and makes their usage slightly simpler.



note that this concept could not be applied to general iterators. for example, stl defines iterators for containers of arbitrary items. it means that the iterator type and the item type of the container could have conflicting functionality, for instance, both of them could support operator++(). therefore, an iterator object and the referred object must be distinguished: it++ affects the iterator it, while(*it)++ affects the referred object*it.



lemon iterator concepts, however, exploit the speciality of graphs, which can be viewed as containers of particular elements. the nodes and arcs themselves provide a strongly limited set of features, which does not conflict with the functionality of iterators. therefore, the program context always indicates whether we refer to an iterator or to a graph element, as we have already seen in the above example.



the most important operation of a map data structure is the access of its elements, that is, retrieving or overwriting the value assigned to a certain node or arc. in most graph libraries, time complexity of these operations is o(1). library designers have to deal with two additional performance considerations. first, map access operations should not be virtual functions because that forbids inlining. second, it is worthwhile to use continuous storage for maps since it usually induces faster data access due to better caching.



lemon features only external property maps that are stored separately from the related graph data structure, but they are updated automatically on the changes of the graph(see section 3.3). the main advantage of external maps is their great flexibility. they can be constructed and destructed freely, so their lifetimes are not bound to the lifetime of the graph. moreover, separate storage could result in better caching properties, especially using several maps for a large graph.



external property maps are also supported in bgl by wrapping standard container data structures. they are more flexible than interior properties since their lifetimes are not bound to the associated graph. however, we have to choose between efficiency and convenience if we use these maps in conjunction with a varying graph. we can apply a map that wraps a random access container(e.g., std::vector) to ensure rapid data access, but it must be updated manually each time the graph changes. alternatively, we can also use an external map that is based on an as-



although these data structures are external, leda makes it possible to allocate additional storage space for them in the graph objects. the newly created arrays and maps can be assigned to these slots, so the memory usage can be optimized. apart from these solutions, leda also provides parameterized graph data structures, whose node and edge objects can contain arbitrary additional data, just like the bundled properties in bgl.



lemon provides highly efficient implementations of numerous algorithms related to graph theory and combinatorial optimization. these algorithms include fundamental methods, such as breadth-first search(bfs), depth-first search(dfs), dijkstra algorithm, bellman-ford algorithm, kruskal algorithm, and methods for discovering various graph properties(connectivity, bipartiteness, eulerian property, etc.), as well as complex algorithms for finding maximum flows, minimum cuts, feasible circulations, maximum matchings, minimum mean cycles, minimum cost flows, and planar embedding of a graph. bgl and leda feature similar varieties of algorithms but with different interfaces.



bgl implements several algorithms with visitor-based interfaces instead of using special purpose graph maps. the visitor classes are the generalizations of function objects: they have more entry points by defining several callback functions. a visitor-based algorithm emits different events during its execution and calls the corresponding entry functions of the associated visitor. in some cases, this technique could be more convenient than the use of customized maps, because all event handler operations are implemented in the same class. for this reason, lemon also provides visitor-based solutions but only for the basic graph search algorithms, bfs and dfs.



another fundamental graph alteration is the hiding of nodes and arcs, which can be achieved using one of the subgraph adaptors in lemon. these classes store filter maps that are used by the iterators to skip the currently hidden items. therefore, subgraph adaptors are significantly less efficient than the original graph objects.



combinatorial optimization methods are usually based on more complex graph alterations. for example, the residual network is a particularly important model for flow and matching algorithms. residualdigraph implements this network by adapting a directed graph along with a capacity map and a flow map.



and an out-node in a directed graph. formally, the adaptor replaces each node v with two nodes vin and vout. each arc(u, v) of the original graph will correspond to an arc(uout, vin). the adaptor also adds an additional bind arc(vin, vout) for each node v of the original graph. the aim of this construction is to assign costs or capacities to the nodes of the graph when using algorithms which would otherwise consider only arc costs or capacities.



linear programming(lp) is one of the most important general methods of operations research. countless optimization problems can be formulated and solved using lp techniques. nowadays, various efficient lp solvers are available, including both open source and commercial software. therefore, lemon does not implement its own solver but features wrapper classes for several lp libraries providing a common high-level interface for them.



lemon provides a general file format for storing graphs and related node and arc maps. such a format should be versatile, that is, it should support storing arbitrary number of maps of arbitrary value types. furthermore, the file size and the ease of processing are also crucial to support working with huge graphs, which is a major goal of lemon. therefore, a flat text file format was designed instead of using structured hierarchical formats, such as graphml, gxl or gml.



the lemon graph format(lgf) comprises different sections, for example, a digraph is stored in a@nodes and an@arcs section. these parts use column oriented formats, in which each column belongs to a map in the graph. the first lines of the sections associate names to these maps, which can be used to refer them. note that this simple idea makes it possible to extend the files with new maps(columns) at any position without having to modify the processing codes.



the iteration on the outgoing arcs of a given node begins with the lookup of the corresponding nodet item, whose first out member stores the index of the first arc. after that, each step reads the next out value from the current arct object to obtain the index of the next arc, or-1 if the current arc is the last one. the incoming arcs are handled in the same way using the members first in and next in. it means that the incident arcs are recorded using simply-linked lists that are actually stored in a vector.



recall from section 2.3 that lemon graph maps are external, auto-updated data structures. they are implemented using arrays or std::vectors to ensure efficient data access, which is the most important design goal of maps. however, these data structures are extended when new nodes or arcs are added to the associated graph.



the graph and map types implement the observer design pattern, they signal the changes of the node and arc sets. the observed events are limited to adding and removing one or several items, building the graph from scratch, and removing all items from it. the observers are inherited from the corresponding alterationnotifier<graph, item>::observerbase class, and they have to override the event handler functions.



the graph maps are designed to be exception safe. in fact, they guarantee strong exception safety. if a node or arc is inserted into a graph, but an attached map cannot be extended, then each map extended earlier is rolled back to its original state.



let us consider the checking of the eulerian property for example. a directed graph is eulerian if it is connected and the number of incoming and outgoing arcs are the same for each node. on the other hand, an undirected graph is eulerian if it is connected and the number of incident edges is even for each node. therefore, the eulerian() function is specialized for undirected graphs using undirectedtag as follows.



with placement new when items are inserted into the graph. however, maps of pod value types are implemented with std::vectors because their constructors are cheap and do not have side effects. the values are reset when the items are removed from the graph.



lemon features various algorithms for the minimum cost flow problem. the two most efficient methods are the cost scaling algorithm[18,20] and the network simplex algorithm[1,12]. as leda also implements the cost scaling algorithm, the same method was chosen for lemon. the efficiency of this algorithm also depends on the application of various practical heuristics, in which the libraries differ. according to these tests, leda was slower than lemon by a factor between



numerous other experiments were also made using several compilers and more algorithms applied to various generated problems and real-life networks, but they are omitted in this paper due to page limit. all comparisons showed similar relations and suggested the same conclusions. the fundamental algorithms and data structures of lemon turned out to be measurably faster than the corresponding implementations of the other two libraries. this achievement is clearly one of the most important benefits of lemon. it could be a major reason for using this library.



along with this, work will be continued on porting and thoroughly revising all the features that exist in the 0.x series of lemon. an important group still waiting for porting is the bipartite graph concepts, implementations and bipartite graph related algorithms. this task is planned to be accomplished by the release of version 1.3.



the new language feature makes it possible to decide in compile time whether the parameter is a temporary object, thus a compilation error could be enforced in such cases. moreover, this feature also allows a smarter handling of map references. for example, the function nodemap() could be specialized for temporarily created parameters. this version of the function would store the passed object instead of setting a reference. this solution would support a more flexible usage without significant performance loss.



lemon is a highly efficient, open source c++ graph template library having a clear design and convenient interface. it provides a wide range of data structures, algorithms and other practical components, which can be combined easily for solving problems of various types related to graphs and networks. according to extensive benchmark tests, essential algorithms and data structures of lemon typically turned out to be more efficient than the corresponding tools of widely used similar libraries, namely bgl and leda. for these reasons, lemon is favorable for both research and development in the area of combinatorial optimization and network design.



