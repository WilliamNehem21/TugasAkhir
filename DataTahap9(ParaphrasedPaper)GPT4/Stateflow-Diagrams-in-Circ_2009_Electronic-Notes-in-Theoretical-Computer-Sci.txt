The paper discusses the utilization of MATLAB Simulink for building and analyzing control law diagrams, with an emphasis on enhancing analytical capabilities and ensuring the correctness of diagram implementations. The authors propose the use of Circus, a language that integrates Z (for data specification) and CSP (for process-oriented specification), to describe both the functionality and behavior of the diagrams and related programs.

They extend the semantics of discrete-time diagrams in Circus to include Stateflow blocks, defined in a Statechart-like notation. This extension aims to model the complexity of Stateflow diagrams, including the hierarchy of states and transitions.

The paper details the challenges in the semantics of Stateflow, the structure of Circus models for Stateflow diagrams, the formalization of Circus semantics with algebraic translation rules, and the use of refinement in verifying Stateflow block implementations.

Circus processes encapsulate state and behavior, with schemas from Z defining the state, and a main action incorporating Z operations, CSP constructs like choices and parallelism, and imperative commands to define behavior.

A practical example, the transmission of a vehicle, is handled by defining blocks for inputs and outputs, and capturing the system's behavior as a cycle that repeatedly samples inputs and produces outputs, using information from prior cycles.

Stateflow's complexity is tackled by proposing a Circus semantics covering state transitions, computations performed in active states, junctions, and backtracking of transitions. The paper outlines how these features are handled through examples.

The Circus models capture hierarchical state structures while managing non-hierarchical transitions. The cyclic behavior of states (enter, execute, sleep) is also described and controlled via channels.

Several concerns related to execution order and nonterminating behavior are addressed, with specific solutions proposed for these issues.

Finally, the paper compares its approach to other works that model Stateflow diagrams as finite state machines or automata, pointing out limitations and future work for expanding the verification techniques and automating model construction for stateflow blocks.