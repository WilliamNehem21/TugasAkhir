The paper discusses the challenges and solutions associated with applying model checking to software development, where high-level languages are preferred over the low-level languages traditionally used for specifying hardware circuits. The authors propose a transformation process that preserves semantics while minimizing additional complexity in the model checking task. This involves a transformation from high-level Abstract State Machines (ASM) to Multiway Decision Graphs (MDGs), and the paper outlines the steps and technology involved, namely:

1. Abstract State Machines (ASM): The paper introduces a method to exploit abstract data types within MDGs by using a syntactic feature that allows labeling sorts as abstract. This abstraction creates an "abstract" ASM model that includes all concrete models for potential interpretations of abstract sorts and functions.

2. Multiway Decision Graphs (MDGs): MDGs are an extension of Binary Decision Diagrams (BDDs) designed to represent formulas of many-sorted first-order logic. They distinguish between concrete and abstract sorts, allowing for compact representation and abstraction of multivalued data types.

3. Model Checking Using MDGs: The authors showcase how to transform ASMs into a representation compatible with MDGs and how to apply model checking algorithms to them. They also discuss how to handle uninterpreted functions within the model checking context.

4. Results and Further Research: The transformation yields an abstract model more efficiently than other suggested methods, potentially resulting in false negatives, but if no counter-examples are found, all instances are correct. The approach supports more compact data representations and simplifies the generation of abstract models, especially for large or infinite data types.

5. Comparisons and References: The paper concludes with comparisons to related work and references to foundational texts, emphasizing the advantages of using MDGs for verifying properties in ASMs, offering a robust method for model checking in high-level languages beyond existing tools and logics.