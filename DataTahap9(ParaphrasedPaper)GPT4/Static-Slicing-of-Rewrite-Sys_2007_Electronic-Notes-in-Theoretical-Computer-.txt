The academic paper discusses the application of rewrite systems to represent programs, particularly in the context of program slicing—the process of extracting parts of a program relevant to certain computations or variables, known as the slicing criterion. An approach for program slicing within functional programming is presented, addressing the dependency definition for the representation necessary for static slicing—a version of slicing that can be challenging to compute due to its undecidability.

To overcome this, the paper introduces the term "dependence graph," an analogue to program dependence graphs (PDGs) used in imperative programs, aimed at providing a method to approximate static slices in functional programs. This new structure facilitates the computation of static slices by mapping dependencies in term rewriting systems.

The paper is structured to introduce the relevant concepts of term rewriting, followed by an explanation of how static slicing is adapted to functional programming. It then details the term dependence graph, demonstrating its utility in computing static slices. Finally, the paper compares this approach to related work and offers concluding thoughts.

The authors refer to work by Rodrigues and Barbosa, who proposed functional dependence graphs (FDGs)—a structure designed to represent control relations in functional programs. However, the FDGs' purpose was for component identification rather than detailed slicing at the granularity level required for an effective static slicing definition.

To represent terms, the paper defines a "tree term," where terms are represented as labeled trees with directed edges connecting symbols to their argument roots.

The proposed algorithm for creating term dependence graphs is presented as complete and guaranteed to terminate. Completeness is established by showing that the term dependence graph can capture all possible computations relevant to the slice according to a given definition.