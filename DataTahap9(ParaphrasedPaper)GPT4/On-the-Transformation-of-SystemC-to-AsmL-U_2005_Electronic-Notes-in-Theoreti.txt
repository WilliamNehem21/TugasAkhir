This academic paper discusses the challenges of verifying SystemC designs via model checking or theorem proving due to the complexity of its object-oriented library and simulation environment. Previous work illustrated the success of using Abstract State Machines (ASM) languages, specifically the ASML variant, for model checking and generating assertion monitors for SystemC. This paper aims to validate the method by demonstrating the correctness of converting SystemC to ASML.

The process of transforming programs is rooted in the foundational work by Patrick and Radhia Cousot on abstract interpretation. The smart use of semantics to link the original and transformed programs enables a proof of soundness that aligns with observational semantics. This paper focuses on ASML's semantics relevant to the program transformation.

ASML, a newer language for ASM, enables object-oriented modeling at a higher abstraction level than C++ or Java. The paper restricts its discussion to the subset of ASML used in their transformation process.

Part of the proof involves a constructive approach similar to a previous theorem, focusing on ASML methods and their pre-conditions, rather than SystemC method threads and sensitivity lists. The proof outlines creating an ASML program corresponding to a SystemC program by mapping modules to classes and translating SystemC's sensitivity lists into ASML pre-conditions.

The paper discusses how updates in the ASML program should be made, considering both C++ variable updates and SystemC signal updates. They use ASML's constructs, like binders, for partial variable updates, and signal updates occur when all method pre-conditions are false. The construction ensures an equivalent ASML program exists, based on a theorem from Section 3.9.

In summary, the paper presents a sound method for transforming SystemC designs into ASML, providing a foundation for verifying these designs through methods like model checking.