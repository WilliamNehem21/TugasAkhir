Separation logic is a new method developed specifically for specifying and verifying characteristics of data structures dynamically allocated in memory, allowing for localized reasoning with concise specifications that focus solely on the memory areas affected by the code. This leads to simpler specifications and proof processes compared to other formal systems.

Notable works include Leroy and Blazy's formal verification of a low-level memory model for imperative programming languages such as C; Moy's approach to handling unions and casts via structural subtyping; and Norrish's extensive formalization of C semantics in the HOL theorem prover. Separation logic has shown to be effective in verifying both high-level procedural and object-oriented programs. The design of our verification tool is inspired by existing tools, while the constructs for specifying contracts are based on those from Spec# and VCC. Our work is conceptually akin to efforts verifying Cminor programs using separation logic, and to the broader research involving SMT solvers for the automatic verification of heap properties.

This paper is organized as follows: we illustrate our approach with an example in Section 2, describe the C memory model adopted for our approach in Section 3, outline our prototype verification tool in Section 4, detail the symbolic interpreter in Section 5, discuss the theorem prover in Section 6, and conclude with thoughts on future work in Section 7.

We demonstrate specifying, implementing, and verifying a queue data structure operation, highlighting the various elements involved. Our representation of the C memory model accounts for the intricate overlaps that can occur with C objects, which differs from type-safe languages like Java or C#. We adapt the model to track structural descendent relationships among objects for pointer-based operations.

Our symbolic interpreter processes a program's control flow graph, updating the heap's state with separation logic formulae, and relies on a theorem prover for support. The early-stage prototype tool is promising, verifying a queue example in about 8 seconds. A significant limitation is the absence of termination guarantees; the tool could potentially run indefinitely. We suggest incorporating abstraction, as seen in the JSTAR tool, to foster termination.

In summary, our study presents a method for automated, modular verification of C programs using a prototype tool based on separation logic, highlighting both the progress made and challenges to tackle going forward.