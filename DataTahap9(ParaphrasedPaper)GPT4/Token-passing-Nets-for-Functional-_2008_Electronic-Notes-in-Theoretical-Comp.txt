The paper begins by describing syntactical nets, which represent the structure of a language that includes variable binders. These nets are analogous to syntax trees that include additional links connecting variables to their respective binders. The paper defines syntactical nets as the result of a specific transformation function that converts language terms into interaction nets.

At the end of this section, the paper touches on how recursion is represented within the framework. It notes that the defined token-passing nets are capable of expressing recursive elements. Recursion can be implemented through computation rules that reintroduce syntactic symbols on the right-hand side, suitable for certain types of recursion like iteration or recursion through pattern matching. Alternatively, canonical rules can be used, which is a topic explored further in the subsequent section in the context of a universal recursion operator that binds variables.