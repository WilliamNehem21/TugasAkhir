This paper contributes to the academic dialogue on the differences and similarities between annotated logic programming and logic programming based on bilattices. The authors propose Bilattice-Based Annotated Logic Programs (BAPs) that incorporate the bilattice structures within annotated logic. These programs are capable of handling statistical knowledge and can operate with databases that may be incomplete or contain inconsistencies. BAPs extend the capabilities of two-valued negation by providing a quantitative, many-valued framework that retains desired properties of classical logic programming.

The authors define monotonic and continuous semantic operators for BAPs and develop proof procedures that are shown to be sound and complete. They achieve a milestone by presenting the first proof procedure for first-order logic programs interpreted over bilattices, which is sound and complete for infinitely interpreted systems.

In the paper, the authors also address the operational semantics of BAPs and their soundness and completeness. They ensure that BAPs accommodate not only constant annotations but also variables and functions within annotations, enhancing their expressiveness and utility. They demonstrate that BAPs mirror the model properties set out in their formal framework and prove that for these logic systems, correct answers can be considered instances of computed answers, analogous to classical two-valued logic programming. All of these advancements are aimed at supporting decision-making tasks in complex systems, such as managing airport flight delays and cancellations under the influence of inconsistent or incomplete data.