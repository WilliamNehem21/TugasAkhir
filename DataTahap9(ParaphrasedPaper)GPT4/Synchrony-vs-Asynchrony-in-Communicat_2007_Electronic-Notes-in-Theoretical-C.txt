The academic paper suggests that while encoding different processes, overlapping auxiliary data can occur, but this is not problematic since the auxiliary data's content only relates to the length of the actions being translated. For example, when translating input/output operations from a source language with arity k (meaning they accept k arguments), the translation results in operations with arity k+2.

The text also critiques the effectiveness of monadic and dataspace-based communication systems, noting that these systems lack the capability to link a piece of data with its originating process. Consequently, programming languages that utilize these communication primitives, such as Ambient or CCS (Calculus of Communicating Systems), find it difficult to interchangeably use their synchronous and asynchronous versions, even though both versions are computationally equivalent to a Turing machine.

The paper further mentions that the increase in arity from the source language to the translated form complicates the proof of full abstractionâ€”a property ensuring that two programs with the same observable behavior remain equivalent under translation. However, proving divergence freedom, which means that translated programs do not introduce infinite loops, is tackled with the same approach as in previous works and is not further elaborated on in the document.