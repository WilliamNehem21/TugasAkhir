Several formal methodologies for creating component-based software have been put forward, suggesting the use of formal specifications as the foundation for component retrieval. These methods are effective in providing accurate and relevant search results for components. Recently, the issue of modifying components has been considered to acknowledge the reality that off-the-shelf components might not fully align with a user's requirements. A limitation of current strategies is their focus on accommodating only a single modification step.

To remedy the time-consuming and monotonous nature of the adaptation process, this paper introduces "search tactics" which streamline the combination of several matching and adaptation phases. These tactics, inspired by theorem proving tactics, aim to automate the routine steps of component adaptation, freeing software engineers to focus on significant design choices.

This work lays out search tactics designed to assist with semi-automated component adaptation and retrieval. These tactics are crafted to be compatible with any formal matching and adaptation methods. The paper begins by presenting a general model for matching and adapting formally specified components, contemplating both individual units and modular components.

Next, it delineates a general format for search tactics and establishes a set of elementary tactics. Subsequently, it constructs "tacticals", combining these basic tactics into more intricate ones. An illustration using the CARE language and tools demonstrates how these tactics can be applied. A comparative review of this approach with others follows.

The paper also presents a universal framework for matching and adapting formally specified components, which extends traditional specification matching concepts. This framework uses the Z specification language to model the adaptation of components and units.

By distinguishing individual units such as functions, types, and theorems from modular components, the paper focuses on appropriate methods for adapting and matching. At the individual unit level, simpler automatic adaptations are supported, involving operations like variable renaming and instantiation.

A matching method is outlined for units, defined abstractly in the paper. Furthermore, modules are considered as collections of units, with matching strategies potentially involving recursive or object-inheritance traversal.

To allow for a chain of module adaptations, the concept of search tactics is introduced, serving to integrate multiple matching actions into a cohesive strategy. This concept is paralleled by proof tactics in theorem proving, where complicated proof stages are automated.

The paper discusses tactics that enable combining various search steps, following a breadth-first search strategy. It wraps up by explaining how tacticals can be utilized to construct complex search tactics, which include returning search histories upon completion.

In summary, this research proposes a systematized approach to streamlining the component retrieval and adaptation process through the strategic automation of matching and adaptation operations.