This paper discusses enhancing the efficiency of reachability analysis, a part of model checking in computational systems, by optimizing parallel operations of Binary Decision Diagrams (BDDs) on multi-core processors. Traditional methods concentrate on executing many BDD operations independently, rather than parallelizing individual operations, which has been challenged by communication overhead in memory sharing systems.

Symbolic model checking, which uses Boolean functions represented by BDDs to store sets of states efficiently rather than individually, benefits from parallelization. The paper measures performance improvements (speedup) using the number of workers, where the speedup compared to a single worker indicates the gains from parallelizing the algorithm.

Several task-based parallelism frameworks are considered, with the Wool framework chosen due to its demonstrated scalability and simplicity in implementing parallelism, especially for fine-grained parallel tasks. This framework utilizes randomization for load balancing between tasks, distributing work among processor cores without requiring strict coordination.

Conventional synchronization methods that use locks are dismissed in favor of non-blocking approaches to avoid the slowdown caused by process waiting. The authors design their algorithms without locks by employing atomic processor instructions to maintain data integrity.

For efficient data encoding, a 32-bit structure is used, combining a 15-bit hash, a 1-bit lock signifier, and a 16-bit reference counter, with a special 'saturated' state to prevent counter overflow.

Experiments were conducted on a 48-core server using models from the BEEM database and a parallel BDD package called Sylvan, developed as part of the research. Performance was tested with a symbolic breadth-first search (BFS) algorithm. The Wool framework was employed for its work-stealing feature to parallelize BDD operations and experimented with randomized load balancing to assess scalability and performance.

The findings revealed that parallelizing low-level BDD operations is effective on multi-core, non-uniform memory access (NUMA) architectures. Notably, using 48 cores, the experiments demonstrated speedups up to 32 times relative to single-core executions and up to 12 times faster than the established BDD package Buddy. In conclusion, the study validates that parallel implementation of BDD operations can result in substantial computational efficiency gains, potentially enhancing the practicality of symbolic model checking.

*Note: Some details as numerical values or citations like '[1,6]' from the original text were omitted to ensure the paraphrased content focuses on summarizing the core concepts and conclusions.