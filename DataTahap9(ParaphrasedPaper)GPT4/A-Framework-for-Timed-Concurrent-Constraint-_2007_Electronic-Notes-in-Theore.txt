The Timed Concurrent Constraint Programming (tccp) language was created to model reactive systems, incorporating elements like timeouts, preemptions, and other reactive behaviors. However, tccp is not well-suited for functional computations, like arithmetic, because each computation step is time-consuming and complex to integrate without disrupting the system's overall behavior.

De Boer et al. designed tccp as an extension of the ccp model by Saraswat, adding discrete time semantics and a new agent to handle negative information for modeling timeouts and preemptions. This paper proposes further tccp extensions to better handle arithmetic calculations, which are currently cumbersome and slow within the language, complicating process synchronization.

The authors argue that integrating instantaneous functions into tccp can enhance verification processes for concurrent systems. Since badly implemented calculations in tccp can lead to synchronization issues and obscure communication problems, these enhancements allow developers to independently verify reactive and functional components. This is done by letting external functions in functional languages serve as specifications for tccp functions, enabling assertion checks during execution to ensure correctness.

The paper discusses tccp's features, motivates the proposed extension, and provides the altered semantics. A coffee machine model exemplifies the improvements. The extensions allow checking programs for synchronization errors and meeting system invariants during execution. Finally, future work and conclusions are outlined, emphasizing the significance of the proposed enhancements in simple, clear tccp modeling of complex reactive systems, particularly for arithmetic computations.