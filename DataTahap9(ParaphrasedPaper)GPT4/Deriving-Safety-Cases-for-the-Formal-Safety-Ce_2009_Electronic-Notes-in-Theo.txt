We introduce a method for developing safety cases for code that is automatically generated by gathering data during a formal safety certification process based on the Hoare logic. This method elucidates both formal and informal lines of reasoning, as well as highlighting fundamental assumptions and external factors that need to be considered. Nevertheless, formal safety proofs remain the source of the safety evidence. The approach utilizes a universal goal-oriented argument framework which is tailored according to the specific safety properties in question.

One key aspect of our strategy is to affirm that safety regarding variables is preserved throughout all execution paths. This is followed by demonstrating that maintaining variable safety ensures the enforcement of the overall safety conditions. Each step may generate a multitude of verification conditions (VCs). Only if every VC is verified will the program's safety property be considered as upheld, the proof of which is based on formal demonstrations. Our goal is to convert these proofs into structured safety arguments.

Our work is currently ongoing. To this point, we have outlined the main features of a generic safety case for programs and applied it by hand. The example provided comes from code produced by our AutoFilter system. However, our annotation inference algorithm has also been effective when applied to code stemming from MATLAB models via the Real-Time Workshop, and we anticipate this method will be similarly applicable there. Present efforts aim to craft an extensive safety case that encompasses various components of the certification framework itself, including the formal system, the inference mechanism, its individual elements, and the safety proofs. Here, we base our confidence on the ability to trace trust in the more intricate parts of the system back to trust in its simpler components. Incorporating proof checking, for instance, helps mitigate risks associated with the automated theorem proving.