This academic work by Wai Wong discusses the development of Higher-order logic (HOL) theories to represent words as lists of bits. It addresses a type that encompasses all words of varying lengths, with subsets for words of specific lengths. Certain theorems incorporate word length as an integral condition. While these theories introduce various bit-wise operations, they exclude arithmetic operations.

The paper delves into the methodology behind defining machine word types and mentions the inclusion of several operations on words, such as concatenation, splitting, rotation, and shifting. Although these operations are not the main focus, they are briefly covered in the appendix, and the corresponding Isabelle code files are accessible online.

The section discussing the definitions of these theories might not be currently pertinent, as the definitions have been removed. Nonetheless, it serves to highlight the pros and cons of the 'obin' typeâ€”an earlier datatype-based definition of the 'bin' type. The 'obin' type, being a datatype, allows for primitive and general recursive definitions, which were not possible with the 'bin' type since it is not a datatype.

To circumvent this, functions for 'bins' were initially defined in reference to analogous functions for 'obins.' This was achieved through the functions 'onum_of' and 'int_to_obin,' connecting the 'int' (isomorphic to 'bin') and 'obin' types.

Automating the proofs for these functions was relatively simple for operations like 'bin_not' and 'bin_and,' with evidence for the latter's straightforward nature presented in referenced documents.

The simplification of binary expressions relies on the specific word length, demonstrated by converting, for example, (11:: word2) into 3, or evaluating 'iszero(4:: word2)' as 'true.' While a theorem like 'num_of_bintr' might be desirable for such transformations, it cannot be reversed as a simplification rule due to the potential of creating an infinite loop. However, simplifications could be achieved using the 'num_abs_bintr' theorem that derives from 'num_of_bintr' and 'word_number_of_def.'