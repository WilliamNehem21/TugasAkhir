The Java Modeling Language (JML) specifications utilize Java syntax and are incorporated into Java code within specially marked comments /*@...@*/ or following the marker //@. A fundamental JML specification for a Java class entails defining method preconditions and postconditions, along with class invariants that constrain the states of class instances. These specifications are placed within comments right before the method declarations. JML predicates, which are side-effect-free first-order logic constructs, consist of Java boolean expressions and certain JML-specific constructs. Side-effect-inducing Java operators such as '++' and '-' are prohibited in JML expressions due to these restrictions.

JML includes constructs for specifying both normal and exceptional behavior of methods. The 'signals' (also known as 'signals_only') notation is used to define what should happen when an exception is thrown during method execution: if an exception of type E occurs, the corresponding JML predicate must be satisfied.

The 'assignable' clause in JML stipulates the locations in the code that a method is allowed to modify. Any location not listed cannot be altered. The 'assignable \nothing' indicates no modification is permitted, while 'assignable \everything' allows any modification. JML allows the terms 'modifies' and 'modifiable' as alternatives to 'assignable'.

Class invariants, declared using 'invariant' in JML, must be established by constructors and maintained after any public method invocation. These invariants can temporarily be broken within method bodies but must be restored before the method returns.

A case study is presented, testing JML specifications within the AX-LIMS Project Manager plugin using a suite of JML tools, including jmlc for compilation, jmlunit for generating JUnit tests, and jmlrac for running tests with runtime assertion checks. Specifications were provided for main classes excluding the GUI, and tests were generated and run accordingly.

Indicating redundant properties is a technique for emphasizing certain aspects of specifications for readers and implementers. Formal specifications and systematic code correctness checking encourage programmers to consider the impact of their code on the application's consistency and correctness.

The paper also illustrates the correct implementation of methods 'setTasks', 'delTask', and 'addTask', emphasizing their interdependence for maintaining the project's state. JML assertions are employed to gain insights into method behavior, such as ensuring the 'setasd' method correctly sets project state with respect to the provided list of tasks. The JML 'set' command is used for manipulating 'ghost' variables representing the program state.

Finally, the paper compares JML to OCL (Object Constraint Language), noting that the engineers at Parquesoft found JML easier to use than OCL for constraint expression within UML models and plan to use JML in future Java-based software developments.