This paper recounts the process of redeveloping a domain-specific language (DSL) for image processing and low-level computer vision named APPLY. The authors focus on the use of source-to-source transformation with the Stratego/XT toolset as a method for implementing the DSL, comparing it to traditional compiler construction methods.

Over five months, the same developer who created the original implementation reengineered APPLY. The modern implementation began with parsing the language to an abstract syntax tree (AST). Hand-written C code was previously used to analyze the input and generate specialized code for different platforms; for instance, selecting between the Warp processor's W2 code or standard C code for Unix machines.

Conversely, using Stratego/XT allowed for more sophisticated optimizations tied to the specific syntax of APPLY, thus boosting the language's expressiveness without compromising performance. This was especially notable in the optimization enabled for uniprocessor systems, which surpassed what the first version of the compiler could achieve.

The paper outlines the domain for which APPLY is intended, showcases the language and its unique features, and discusses how the use of Stratego/XT influenced its design. It then examines the development of the latest APPLY compiler in relation to the original C-based compiler.

APPLY includes special constructs like the 'window' abstract data type for procedure parameters, which manages either a single element or a 2D array of primitive data type, with given index ranges. The language also deals with image edges through a 'border expr' modifier in parameter declarations.

The current version of APPLY introduces new metaprogramming language extensions, arising from the practical experiences gained through compiler implementation via transformation techniques. These extensions either guide potential compiler optimizations or simplify the writing of Stratego rules that produce code targeting specific APIs. Examples of such extensions are "@known expressions", "@apply statements", defined expressions, and assert statements, which allow for the assertion of variable properties that the compiler might not independently verify.

The implementation details include parsing the APPLY language and using Stratego/XT for advanced tasks like data-flow analysis for constant propagation and eliminating unreachable code. The transformation process is tailored to APPLY's needs and compiler objectives.

The paper also quantifies the work, describing a comparison between the codebase of the new compiler and the original, including a discussion of the complexity and effort involved. The latest compiler's capabilities exceed its predecessor's, particularly in its more advanced strategies for code simplification and optimization.

While the initial learning curve of using Stratego/XT was steep due to new grammar specifications and the need to rectify grammar ambiguities, it resulted in improved productivity, especially thanks to Stratego/XT's specialization over C.

Finally, the authors benchmarked the C code generated by the old and new compilers across different CPUs and C compilers. Measurements are based on median run times with precautions taken to mitigate cache and paging effects.

In summary, the paper shares insights into how source-to-source transformation with Stratego/XT simplifies the implementation of a non-embedded domain-specific language and can lead to a more expressive and efficient DSL for image processing and computer vision tasks.
