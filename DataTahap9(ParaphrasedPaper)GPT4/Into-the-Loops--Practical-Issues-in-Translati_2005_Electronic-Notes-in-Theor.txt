Translation Validation (TV) is a process that ensures the accuracy of target code generated by a compiler from source code. Rather than verifying the compiler as a whole, TV focuses on confirming the correctness of individual translations, producing a formal proof of their accuracy. This method has gained attention for verifying the correctness of both general compilation processes and specific code optimizations.

TV is employed to certify individual instances of compiler outputs, each time the compiler is run, by scrutinizing the relationship between the source and the translated target code. The technique is especially useful given the complexity of comprehensively verifying a compiler.

Significant progress has been made in TV approaches for both structure-preserving transformations—optimizations that maintain the program's structure, like dead code elimination and copy propagation—and structure-modifying transformations, such as loop reordering operations that substantially alter the program structure.

A prototype tool, Translation Validation for Optimizing Compilers (TVOc), was developed to perform TV on the Intel Open Research Compiler (ORC), which executes many types of transformations from both categories mentioned. However, TVOC lacks a single, unified proof rule for all loop reordering transformations; instead, it utilizes various proof rules tailored for specific optimizations such as interchange, tiling, and skewing, versus fusion and distribution.

TVOc operates by synthesizing potential intermediate code versions that could have been made by the compiler's transformations, even if the actual intermediate steps are not available. It then verifies the correctness of each translation from the source code to the first intermediate state, subsequently between each intermediate state, and finally to the target code.

To determine which optimizations were performed without relying on the compiler's output, a new set of heuristics was developed. These heuristics extend previous work done on TV for structure-preserving transformations and are now used for analyzing structure-modifying transformations, particularly loop reordering ones.

The paper is structured to first elaborate on the background necessary for understanding TV in the context of individual structure-modifying transformations. It then details how the authors' proof rule for loop optimizations such as interchange and tiling can be broadened to accommodate a larger array of loop transformations. Furthermore, it discusses how TVOC handles combinations of optimizations performed by the ORC using synthetic intermediate code versions. The paper also introduces the new heuristics developed for predicting performed optimizations without compiler guidance. Lastly, it concludes by summarizing the investigation.

The paper focuses on deterministic transition systems generated by programs and does not delve into those influenced by external, runtime inputs. These excluded types can nonetheless be integrated into the presented methods and theories.

The method introduces a rule, "val," which constructs a set of verification conditions for proving the correctness of the translation. Each condition specifies that if the target program can execute a given path under certain source-to-target correlations, these correlations must continue to hold upon the path's completion.

This approach is distinct from but shares similarities with comparison checking, where the output of optimized and unoptimized code is compared on specific inputs to identify mismatches and optimization errors. However, comparison checking is primarily useful for structure-preserving optimizations.

Structure-modifying transformations, unlike those that preserve the original program's structure, do not have obvious state mapping between the source and target code. Reordering transformations, a subset of structure-modifying changes, only alter the execution order of statements without introducing or removing any executions, maintaining the program’s semantics.

An example of detecting such transformations is given by comparing loop index variable ranges, where alignment might be indicated by changes to the upper or lower bounds of these ranges.

In summary, this academic paper presents TV as an advanced method for validating the correctness of compiler outputs on a case-by-case basis, offering a precise and thorough way to ensure the integrity of program code translations, particularly for complex optimizations.