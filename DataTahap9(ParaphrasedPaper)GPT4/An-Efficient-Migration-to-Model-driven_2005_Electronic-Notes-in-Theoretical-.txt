The academic paper discusses the importance of updating existing development environments to accommodate new technology, with a focus on keeping migration costs low, preserving knowledge contained in current applications, and maximizing the benefits of Model-Driven Development (MDD) and associated tools. For the most efficient migration, automation is key and can be achieved by leveraging techniques from software architecture, product line engineering, and reverse engineering, thereby avoiding typical issues related to technological change. These approaches share an emphasis on recognizing and applying patterns within MDD.

MDD has shown potential to enhance software development practices by allowing the reuse of application design and concepts across different platforms, separating business logic from technical details. Current MDD methodologies facilitate this separation through meta-models, which are essentially domain-specific languages, often standardized by organizations like the Object Management Group (OMG). However, these models can become overly general, incorporating concepts irrelevant to specific organizational needs, leading to successful MDD practices that are architecture-centric and aligned with specific implementation technologies, like J2EE. This reflects a disconnect between theoretical MDD, which suggests a top-down approach, and practical, bottom-up MDD approaches driven by the target platform rather than the intended system architecture.

Reverse engineering involves analyzing existing software artifacts and extracting information using techniques such as pattern matching and component identification. When an existing manual application and an MDD implementation rely on the same technology, there can be technical similarities and different approaches to the same technical challenges, like GUI, transactions, or persistence. The objective here is to transform an existing application.

The paper describes a case study involving a hypothetical mobile phone company, GoPhone Inc, created to test product line methods and tools. The case study utilized Pulse-MDD in a reengineering-driven mode, analyzing the architecture and manual implementations to identify patterns. These patterns were then used to generate code frameworks for additional components within the application layer. Through multiple iterations, an initial pattern set was established and implemented using the chosen technology, J2ME.