This paper addresses the challenge of developing test cases for automatic testing of a component within an asynchronous network-on-chip using a model-based approach. The authors begin with a component model designed in B Action Systemsâ€”a formal methodology that leverages both action systems and the B method. They generate a finite state graph by executing the model, followed by creating a test driver from abstract test cases. This driver can then automatically test any corresponding implementation. The paper's significant contribution lies in its use of hierarchical models for test generation and automatic testing, a departure from previous work that focused on flat models. Hierarchical models, which are prevalent in modular and parallel design, introduce issues of non-determinism that the paper also addresses.

The paper is structured to present related work, an introduction to B Action Systems, the network-on-chip (NoC) component model, the specific problem, the test generation process, addressing non-determinism, an analysis of the approach, and a conclusion.

Test cases are generated by traversing a finite state automaton where nodes represent machine states and edges represent operational instances. The paper compares this to other similar methods and also examines how model checking has been used in other formal languages.

The authors then describe how B Action Systems can model parallel systems and support system hierarchy, emphasizing the importance of maintaining the hierarchy in the implementation for testing to be effective.

The paper notes that while formal refinement processes are expected to render testing unnecessary, in practice, this is not always feasible, and model-based testing can often precede or replace certain aspects of formal refinement. This approach can significantly reduce time spent on proofs.

The authors also suggest that functional test cases can be generated using model checking tools like ProB, which can explore the state space of hierarchical B models to meet certain coverage criteria. This involves attaching trap variables to states or transitions and using LTL model checking to identify useful test case traces.

In summary, the paper presents a novel approach for test case generation and automatic testing using hierarchical models instead of flat models, and discusses how non-determinism and procedural adherence in implementation are critical to the process.