The paper organizes the subsequent sections as follows: Section 2 reviews key technical constructs employed throughout the paper. Section 3 introduces and evaluates a methodology for assessing epistemic aspects of multi-agent systems (MAS). Section 4 details the tool enabling such evaluations. Section 5 illustrates the application of this methodology to a well-debated example.

Over the past twenty years, the sophistication of data manipulation, including techniques like binary decision diagrams (BDDs), has significantly advanced the capabilities of model checking tools to handle extensive state spaces. Additionally, automata-based alternative approaches have been developed.

Many systems, from communication protocols to hardware components, have undergone verification using temporal languages, though these are not specifically agent systems, but rather standard distributed processes. To extend this methodology to agent verification, one must integrate it with an agent-based semantic framework, such as interpreted systems.

In this paper, we discuss Akka 4, a Kripke model editor by Lex Hendriks that facilitates model testing. Akka takes a model and an evaluation function as input and can check a variety of formulae with nested and multiple modal operators, with no restrictions on formula syntax. These inputs are provided to Akka in its syntax understood by the parser.

By feeding the specification into a translator, one can output SMV code, as seen in the provided example. Using NuSMV, one can then calculate the reachable states which, for this example, are 96 out of a potential 629,856 combinations of local states and actions as represented in NuSMV.

Logic plays a key role in analyzing communication in MAS, which applies to both human and computer interactions. Traditionally, the verification of these protocols has relied on theorem provers and model checkers tailored to temporal languages, suitable for basic networking communication protocols. However, MAS, which often adopt an intentional stance, require a more nuanced language. The rich languages necessary for verifying these protocols exceed the capabilities of current provers and checkers, which typically don't handle modalities such as knowledge. This paper ventures in this direction, outlining the journey from a tangible MAS specification to the generation of execution traces and the verification of properties.

We introduce a tool designed for model checking epistemic formulae in MAS. It utilizes interpreted systems for the MAS specification, and shows how a model checker for temporal models, like NuSMV, can be used for the verification of epistemic properties. The paper discusses a software tool that facilitates the necessary translation.

Although the paper's compilation process into SMV, the construction of global states, and testing of epistemic formulae scale reasonably well, it does not claim to match the speed of the fastest methods available. However, it highlights the value of forming a bridge between protocol specification and model checking through automatic compilation, thus enabling the verification of epistemic properties.