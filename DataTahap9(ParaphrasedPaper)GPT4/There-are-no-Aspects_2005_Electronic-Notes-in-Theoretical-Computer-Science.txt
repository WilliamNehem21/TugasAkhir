In the field of Component-Based Software Engineering (CBSE), there is no consensus on whether to use black-box, grey-box, or white-box approaches for composing software components. This paper adopts Szyperski's perspective on CBSE, which favors black-box component composition.

The paper's central argument is against the need for a specialized aspect module. Instead, it advocates for integrating aspect-oriented composition mechanisms into the existing module constructs, thereby negating any need to adjust software components for different composition methods. To support this idea, the paper introduces a modeling framework named "CoCompose" and a programming language called "FuseJ." These tools are designed to separate composition mechanisms from the behavior description of software, allowing for flexibility in software design and implementation.

CoCompose utilizes model-driven development (MDD) to refine a high-level design by applying various composition mechanisms to abstract design elements. It helps to delay the decision of choosing particular modularization constructs until the lower-level design stages. FuseJ, on the other hand, incorporates aspect-oriented programming principles, enabling the expression of all software concerns as JavaBeans. It also offers an advanced composition mechanism to describe both aspect-oriented and component-based compositions.

The paper explains CoCompose's framework in greater depth and discusses the advantages of using an explicit aspect-oriented composition mechanism over separate aspect modules during the design phase. FuseJ is then introduced as a language that aligns well with CoCompose's approach. Furthermore, the paper outlines ongoing tool support development for both CoCompose and FuseJ.

A model-driven architecture (MDA) style is proposed, which is in line with the Object Management Group's (OMG) standards. This architecture uses layered refinements to transform high-level platform-independent models (PIMs) to platform-specific models (PSMs). CoCompose fits into this approach by using meta-level patterns to define these transformations, and it also adapts generative programming techniques to manage different software features.

The paper concludes that there is no necessity for specialized aspect modules. Instead, it promotes a robust composition mechanism through CoCompose and FuseJ for aspect-oriented composition. While FuseJ's gate and connector language mechanism is still in the prototype phase and not fully expressive of all aspect-oriented composition possibilities, ongoing research aims to expand its capabilities.

Furthermore, the paper anticipates potential scalability challenges due to the multiple refinement possibilities with CoCompose but remains optimistic based on initial experiences. Future real-life experiments with CoCompose and FuseJ will be crucial in determining the viability of this approach.