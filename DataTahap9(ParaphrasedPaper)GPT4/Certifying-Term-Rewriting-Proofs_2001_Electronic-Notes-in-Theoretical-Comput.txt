Term rewriting is recognized as a suitable framework for both programming and proof construction. In this study, we introduce a formal approach for analyzing and debugging rule-based programs. This technique utilizes rewriting calculus that incorporates explicit substitutions, often referred to as the ρ-calculus. The approach facilitates the generation of proof terms for term rewriting processes, enabling these proofs to be shared among different systems by converting them into the respective system's language. Specifically, the method allows the certification of term rewriting proofs using proof checkers, and conversely, integration of term rewriting into proof assistants through an external system. The methodology is compatible with both standard syntactic rewriting and rewriting accounting for specific sets of axioms, such as associativity and commutativity.

Within proof assistants, formal proofs are built from steps that may be guided by tactics and need to be recorded for verification and interchange purposes. Some proof assistants, like Alf, Coq, and Lego, retain explicit proof terms for all deduction steps. Others, such as Isabelle or HOL, have pursued this feature with varied levels of priority.

To maintain trustworthiness, proof assistants must sometimes consider external program computations as axiomatic, which can be risky as these computations go unchecked. For high-stakes correctness, rule-based programs should ideally return computational proof terms.

This paper proposes a design for representing a proof term for term rewriting derivations based on ρ-calculus. We have created proof terms for syntactic and associative-commutative (AC) rewriting in ELAN and detailed how to translate these proof terms into Coq syntax, a process which has been proven sound and implemented in ELAN. Consequently, Coq proof terms are obtained and formally validated within the Coq proof assistant, allowing ELAN to certify term rewriting proofs and enabling the use of term rewriting in Coq via ELAN.

The paper outlines a lemma (Lemma 4.5) that describes how a proof term for an n-step rewriting derivation can be constructed from the proof terms of individual steps in the derivation. This lemma simplifies the procedure of proving rewriting derivations in Coq.

To integrate these concepts into ELAN, we first enact a tracing mechanism for catching syntactic and AC rewriting details. This trace is then transformed into a proof term for Coq, optimized for size, and further processed. A set of lemmas is derived from the normalized proof term following specific translation rules outlined in the study. Upon completion, the main assertion—that the start and end terms of a rewriting sequence are equal—is checked in Coq along with all supporting lemmas.

ELAN specifications naturally express term rewrite systems (TRS), detailing syntactic function symbols, their arity, and operation in rewriting. The study specifies how these various elements—function symbols, variable declarations, and rewrite rules—are outlined in the specifications and are integral to formulating Coq proof terms.

In summary, this paper discusses how term rewriting systems can be reliably integrated with proof assistants using formal proof terms generated from rewriting calculus, exemplified by bridging ELAN and Coq systems.