Developing robust communication protocols is a complex task that encompasses the difficulties of distributed and concurrent programming, with the added pressure of supporting the performance needs of dependent applications. For example, a slow-responding routing protocol can hinder network efficiency, and a congested network requires transport-layer protocols to still manage efficient data transmission. Therefore, understanding these protocols' performance characteristics is essential for their effectiveness.

Stochastic methods added to concurrency theory formalisms, like process algebras, have helped in addressing performance evaluation challenges. Specifically, Performance Evaluation Process Algebra (PEPA) models system behavior as Continuous Time Markov Chains (CTMCs), offering a more intuitive approach than manipulating these mathematical forms directly.

Despite advances in performance modeling, a gap still exists between models and actual implementations. There have been attempts to derive PEPA models from Unified Modeling Language (UML), but this does not reflect low-level implementation specifics. Typically, models are empirically validated against real-world data and refined as needed. However, having access to a system's source code can yield more accurate model validations.

This paper outlines initial efforts to bridge this gap, detailing a means of abstracting to a performance model straight from source code. The discussion includes presenting a transport protocol as a case study and considering only end-to-end communication protocols, excluding hop-by-hop protocols like routing due to their extensive state space complexities. Focusing on C language protocols, the paper acknowledges current limitations and anticipates future research to improve methodology.

The authors describe an approach where modeling functions either embed directly into the model for complexity or model as separate processes for more straightforward behaviors. An extended command syntax supports more sophisticated modeling, and the combination of control-flow and data abstractions enables construction of a PEPA model.

The probability of various paths and environmental transitions within the models are estimated using statistical techniques like Monte Carlo methods. When functions return, the model also accounts for the caller's context to maintain the abstract environment correctly.

This abstraction allows the performance model to use function rates expressed relative to the caller's state, aided by an additional component that records the calling context.

The paper ends by acknowledging that significant work remains in refining the approach and applying abstract interpretation to improve the accuracy and utility of the performance models. Additionally, it points out the need to address the potential for large model sizes, and suggests that simplification techniques and stochastic bounds could prove useful in managing model complexity.

Current findings indicate that the outlined abstraction techniques hold promise, and the paper sets the stage for ongoing research that could benefit both software engineering and performance evaluation fields, despite the many challenges ahead.