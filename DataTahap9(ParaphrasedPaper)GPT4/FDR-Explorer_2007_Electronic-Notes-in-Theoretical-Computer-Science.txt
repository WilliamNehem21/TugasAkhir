As hardware and software systems become increasingly complex, there is a growing need for reliable and correct system functioning, particularly in critical safety domains. Formal specification and verification have emerged as a method to meet this need. Despite their utility, formal techniques face challenges due to the vast number of scenarios to consider in concurrent system interactions, necessitating the use of tools for analysis. With many potential behaviors, some systems can exhibit an incredibly high number of states, which makes manual analysis nearly impossible.

This paper focuses on enhancing tool support for the refinement model checking of the process algebra CSP (Communicating Sequential Processes) using the established FDR (Failure-Divergence Refinement) automatic tool. It is pointed out that while CSP and FDR have been effective in practice for over 20 years, users must still undertake significant effort to produce suitable CSP code for FDR, often needing abstractions to create bounded models. The paper acknowledges a lack of comprehensive guidelines for users, despite assuming a good knowledge of CSP, and proposes a new tool to assist FDR users in generating more efficient CSP code and in troubleshooting execution errors, such as communication issues outside expected data types.

The interface provided by the tool allows users to manage specifications, conduct refinement checks, and access debugging information either through a graphical user interface (GUI) or a batch interface with textual feedback, useful for automated or remote checks.

Internally, the paper examines how the compactness and efficiency of CSP's labeled transition systems (LTSs) can be improved through structural insights, resulting in benefits not only to experienced users but also to other tools that automatically generate CSP code.

The core functionality of FDR, based on its ability to perform refinement checks on compiled LTSs, is explored, with an emphasis on the underlying serverâ€™s versatility in model checking a range of LTSs beyond purely CSP scenarios. Different functionalities of the tool's internal session model (ISM) are presented, including LTS description, structure, and analysis.

When a model checking algorithm is applied, FDR creates a hypothesis object that allows investigation into the cause of refinement check failures or confirms successful checks. This includes detailed information on the flawed behaviors and provides a mechanism for detailed debugging or verification of correct behavior.

The paper also outlines structural, algorithmic, and compression-related methods available in the tool, which allow users to interact with the LTSs at different levels, ranging from simple transitions overview to debugging and refinement verification.

Inspection methods are presented, which enable users to start a refinement session by compiling processes into ISMs and logging their structure, followed by automatic generation and checking of hypotheses for properties such as determinism, and deadlock and livelock freedom.

The contributions of the FDR Explorer API are highlighted, demonstrating improved integration with CSP script generation tools and enhanced debugging capabilities. This supports the trend towards tool integration, which is identified as a major goal in the UK's computer research challenges.

Lastly, the paper describes the transformation of CSP's LTS transitions into a graph notation suitable for visualization tools, laying groundwork towards a complete visual representation system for CSP specifications that could facilitate direct refinement checks in FDR.