The structure of the paper is as follows: Section 2 starts with an illustrative example. Section 3 introduces the B method and its supportive tools. A general B model for component structures is defined in Section 4. Section 5 demonstrates the application of this model to verify a specific architecture. Section 6 presents the FTPL, a method for automatic verification of temporal features, including its translation to LTL. The paper concludes in Section 7 after a review of related literature.

The B method is employed for modeling systems and ensuring consistent development. It relies on defining properties that remain valid with each update of the model, facilitated by B's operational procedures. Correct model verification involves proving these properties are consistently upheld.

Tools like B4free and AtelierB facilitate the generation of proof obligations to maintain B consistency. Some proof obligations are evident while others require interactive proof if not resolved by AtelierB's embedded provers. ProB is another tool that lets users simulate and debug B specifications and includes a constraint-based checker and a LTL model checker with unique features, both useful for detecting specification errors.

The `add(subcomponent, composite)` operation ensures that both components are instances, the composite is parameter-free, and the subcomponent is not already part of another composite or previously engaged. It also ensures that no cyclical dependencies are introduced.

The `unbinding` operation specifies that the interface in question must be supplied by an inactive instantiated component and must have a corresponding required interface bound to it. That interface is then detached from the binding.

An FTPL property example has been translated into LTL and tested using ProB within 126 milliseconds. The model checker produced many atoms and transitions during the verification process.

In contrast to other work based on the Fractal framework, which involves defining integrity constraints on a graph representation of Fractal for reliable component systems, this paper's model focuses on general architectural restrictions, thus offering an operational semantics to other component system frameworks. The FTPL logic enables the definition of architectural constraints that are more complex than invariants.

To add robustness and adaptability to software, another work proposes FRAcl, a formal Fractal component model framework. Similar to the B-based approach in this paper, FRAcl's static approach verifies architectural consistency. However, the B-based framework additionally offers automatic checking for model consistency and temporal property monitoring.