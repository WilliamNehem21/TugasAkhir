Each method in the system is defined by three components: a precondition that must be met prior to the method's execution; a list of attributes that might be changed by the method; and a postcondition that outlines the desired result of the method. Preconditions are conditions based on the values of attributes and inputs, while postconditions are conditions related to the inputs, outputs, and the state of values before and after the execution of the method.

For verifying that a generated implementation is correct, extra constraints might be included in the postcondition to guarantee the outcome of expressions fall within their valid ranges. For instance, to ensure the output value 'a' is an integer, the constraint integer(a) would be included. These constraints are not directly influential on the semantics of the program or the produced code.

There are ongoing discussions about evolving the method language further. One idea is to integrate it as an action language within the Unified Modeling Language (UML) class diagrams, serving as an alternative to the Object Constraint Language (OCL). Another consideration is the potential elimination of the change list, as its content can often be deduced from the postcondition. The language may also be expanded to permit complex nested quantifications in the postcondition.

However, the most significant opportunities for advancement lie in the broader aspects of the modeling language. The aim is to provide theoretical and applied support for a more extensive array of global invariants. Additionally, the integration of state diagrams to represent the intended process flow is being examined, along with the possibility of automatically incorporating the information they present into the system.