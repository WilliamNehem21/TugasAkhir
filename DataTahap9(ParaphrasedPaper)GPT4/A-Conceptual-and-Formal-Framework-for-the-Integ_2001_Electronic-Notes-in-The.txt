The paper provides a framework, known as the integration paradigm, that unifies data type and process modeling techniques across different layers. It builds upon previous work by the authors and others, aiming to review this framework and present a formal model. Here is a paraphrased summary:

The integration paradigm consists of four hierarchical layers: data type, data state and transformation, process, and system architecture, which are formalized through an integration of abstract data types and structured transition systems. This model encourages the use of both basic and sophisticated modeling techniques as it supports instantiations by various methods like algebraic high-level nets, attributed graph transformation, and certain UML (Unified Modeling Language) techniques.

The paper revisits typologies, identifying low-level variants with limited data type support through fixed data domains, and high-level variants integrating basic process with data type modeling techniques. This paradigm extends the authors' previous modeling approaches, harmonizing the data type and process perspectives across the four layers.

The paper introduces these four layers in Section 2, with formal modeling presented in Section 3. Section 4 demonstrates instantiation through different modeling techniques, such as CCS (Calculus of Communicating Systems) and Petri nets, while Section 5 compares the authors’ formal model to other transformation systems and discusses upgrades to system architecture concepts.

Acknowledgments are given to colleagues for discussions and contributions, with the paper being partially funded by the German DFG project IOSIP and the Spanish project HEMOSS.

The authors emphasize the integration of data type and process views into a unified framework. They examine well-known modeling techniques, like LOTOS and Petri nets, to illustrate the model’s broad applicability. They also introduce a formal specification formalism called SZ for safety-critical embedded systems, combining statecharts with the Z notation.

Processes at layer 3 are described as reactive behaviors of the system and can represent a single non-deterministic process or multiple processes covering different scenarios. The paper mentions that process composition and communication mechanisms will be addressed within the architectural layer 4.

In-depth explanations of how to transform these models for better software engineering practices and how to approach the composition of basic components are also provided. The paper discusses union and fusion as construction mechanisms for Petri nets, presenting them using the concept of fusion components.

Finally, the authors touch on the conceptual level modeling of attributed graph transformation systems and provide the main ideas for adapting them to conform with the formal framework established in Section 3.

Overall, the aim of the paper is to present a unified and formal approach to system specification and modeling that transcends the separate treatment of data type and process modeling, thus offering a more integrated and coherent methodology for managing complexity in system design and analysis.