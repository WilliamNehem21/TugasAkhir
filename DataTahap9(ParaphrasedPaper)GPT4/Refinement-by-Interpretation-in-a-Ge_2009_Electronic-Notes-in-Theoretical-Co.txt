This paper discusses the limitations of signature morphisms in software reuse and the evolution of new computing paradigms. It argues that these morphisms are often too inflexible for transforming specifications in these contexts. To address this, the paper introduces a more adaptable method termed "refinement by interpretation," which is described in depth in sections 3 and 4, along with examples and additional properties.

The key concept introduced in the paper is "translation," defined as a function that maps a formula to a set of possible formulas, offering greater adaptability. This contrasts with a signature morphism that maps one formula to a single corresponding formula. This broader concept of translation as multifunctional is believed to be critical for establishing relationships between specifications.

The paper further explores a specific type of translation, referred to as "functional translation," particularly between sentential languages. This has been extensively studied by Feitosa and Ottaviano, who term it "conservative translation." The authors present a practical sufficient condition, based on this work, that establishes when a translation can be considered an interpretation.

However, the paper acknowledges that there are many unresolved questions. One key issue is reconciling traditional refinement via signature morphism with the new approach. Signature morphisms implicitly translate variables, complicating their integration into the new framework. The paper suggests that to include classical refinement methods in this new setting, a logic must be parameterized based on the variables used to generate its formulas.

Lastly, the paper concludes with Section 5, which reflects on the research and points out problems that require further investigation.