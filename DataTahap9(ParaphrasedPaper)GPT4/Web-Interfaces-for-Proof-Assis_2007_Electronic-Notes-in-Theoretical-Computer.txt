Implementing a proof assistant typically requires installing software, which can be a complex process. For instance, setting up Isabelle on Linux necessitates specific versions of Poly/ML, a HOL heap, Isabelle itself, Proof General, and a compatible Emacs. This installation complexity discourages some users, including mathematicians, from using proof assistants and leads computer scientists to avoid updating their systems.

The aim is to develop a web-based, fast interface to access various proof assistants without installations or plugins, mirroring the functionality of local interfaces. This is achieved through a client-server model with a lightweight client run by the browser, a specialized HTTP server, and AJAX communication. The architecture allows the server to handle updates and changes without user intervention, providing access to different versions of proof assistants, even if they are incompatible with the user's local platform.

This approach is not limited to proof assistants and can be applied to other stateful, buffer-oriented programs with undo mechanisms. It contrasts with Java applets, which are difficult to install as browser plugins, especially on UNIX systems, and are not a preferred solution.

The proposed architecture differentiates by enabling the creation of interfaces similar to state-of-the-art local interfaces but accessible through a web browser without extra software or plugins. It uses asynchronous DOM modification, a process never applied to proof assistants before. The paper further discusses the creation of web interfaces, emulating local prover interfaces, details the new architecture, and considers the security and efficiency of the implementation and presents a prototype.

JavaScript, crucial for dynamic web functionality, and the DOM API for HTML and XML document manipulation are key technologies involved. ProofGeneral, mainly written in Emacs Lisp, serves as a local prover interface that the web-based approach seeks to replicate.

Security on the centralized server is a priority and is addressed with backups, minimal chrooted environments, and password protection to deter web spiders. Load balancing across multiple machines can sustain multiple users.

The web interface enables interactive tutorials and the display of proofs with selectable states. Inclusion of proof assistant libraries on the server allows up-to-date access for visitors without the need for local downloads and compilation.

Conclusively, this architecture offers a novel, simple, efficient, and platform-independent interface for proof assistants accessed through modern web browsers. This removes the need for installations on the user's part. Future work may involve aligning with the general pgip protocol, although the local nature of pgip might require adjustments for web suitability.