The paper discusses the enhancement of Service-Oriented Computing (SOC) through a new calculus within the Communicating Sequential Processes (CSP) framework. This calculus, designed to improve verification and the expressiveness of SOC calculations, is called CSP for Asynchrony (CSPA). It integrates built-in buffers into CSP to enable asynchronous communication without requiring the explicit management of buffers by designers.

To offer context, traditional process calculi in SOC, like SCC and CASPiS, focus on synchronous interactions. Other models like COWS and Conversation Calculus address only asynchronous communication because internet standards typically implement asynchronous protocols such as TCP/IP. However, existing formal calculi for SOC lack the provision for both synchronous and asynchronous communications in one framework.

CSPA introduces buffers implicitly, thus simplifying asynchronous communication channels by abstracting the buffer management for users. The paper further refines CSP to handle asynchronous alongside standard mixed synchronous and interleaving communications by enhancing the parallel composition operator. This extension aims to support a broad range of communication patterns.

In prior research, CSP extensions included primitives for dynamic compensations, but this paper focuses specifically on communication primitives. Future work is expected to include session management, mobility modeling, and additional expressive features.

The paper is structured as follows:

1. Section 2: Reviews basic CSP concepts.
2. Section 3: Introduces the CSPA calculus.
3. Section 4: Explores the relationship between CSP and CSPA.
4. Section 5: Implements CSPA within the FDR model checker.
5. Section 6: Demonstrates the practicality of CSPA using an example.
6. Section 7: Discusses related work in the field.
7. Section 8: Concludes with remarks on the work and outlines future directions.

The paper presents the theoretical foundations of CSPA, incorporating asynchronous communication within the CSP environment, which traditionally focused on synchronous communication. It highlights novel concepts, implementation details, and practical implications for the theory and practice of SOC systems by enabling more flexible communication patterns without complicating system design.