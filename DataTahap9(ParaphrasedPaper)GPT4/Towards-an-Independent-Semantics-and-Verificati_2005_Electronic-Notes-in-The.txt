In this study, we introduce an algorithm that translates security protocol specifications written in the High-Level Protocol Specification Language (HLPSL) from the AVISPA project into a dialect of the applied pi-calculus. This translation has two significant scientific contributions: it offers an independent interpretation of HLPSL and enables the verification of HLPSL-specified protocols using the ProVerif tool, which relies on the applied pi-calculus. The implemented translation technique has been successfully applied to various security protocols, covering a substantial portion of the protocols modeled in HLPSL.

HLPSL, the input language for the AVISPA tool, is translated into an Intermediate Format (IF) before being assessed by various state-of-the-art back-ends that detect possible attacks. As different verification tools excel in different areas, integrating HLPSL with additional tools enhances security protocol verification. Up until now, AVISPA back-ends have been based on three different technologies that collectively address a significant scope of security protocol verification research.

Our paper presents a method to translate a subset of HLPSL specifications to a version of the applied pi-calculus accepted by the ProVerif tool. By performing this translation, we can verify secrecy and authentication properties of HLPSL protocols using ProVerif. This expands the verification formalisms and technologies available to HLPSL.

The paper is organized as follows: In Section 3, we describe the particular dialect of the applied pi-calculus we translate to. Section 4 outlines the translation algorithm. Section 5 discusses how the outcome of the translation can be verified with ProVerif, while Section 6 provides implementation details and experimental results on a selection of cryptographic protocols modeled in HLPSL as part of the AVISPA project.

HLPSL protocol specifications are categorized into roles, with basic roles depicting individual agents' actions in a protocol run and composed roles representing entire protocol runs, sessions, or the overall protocol model. The main role serves as the protocol model itself. HLPSL types include agent, channel, public key, etc., with certain types like text and channel having attributes, such as text(fresh) for freshly generated nonces.

Transitions within roles are defined by labels, trigger events, and actions, executing nondeterministically when multiple events satisfy their guard predicates. The main role must declare a constant that represents the intruder and may also define the intruder's initial knowledge.

To translate composed roles, we convert their instantiation tree into a flat structure using pi-calculus parallel composition and avoiding name clashes by renaming constants. We employ an identifier for each basic role instantiation, adding an argument for this identifier to the basic roles, which helps in translating strong authentication goals.

We associate a process with each role state, creating transitions based on the state variable assignments in the HLPSL role description. We handle fresh variables updated by transitions by creating sets for these variables.

The semantics of HLPSL remains somewhat ambiguous, necessitating interpretation in some instances. Our work follows the semantics implemented in the AVISPA tool, which affects the modeling of certain situations, like receiving a private key through a channel during role execution.

ProVerif successfully terminated on most protocol specifications, identifying known attacks on flawed protocols and confirming the correctness of well-designed ones, with results similar to those found by AVISPA's OFMC back-end. However, ProVerif did not terminate on the ISO3 protocol specification.

We aim to test our translation technique on even more complex protocols to evaluate scalability and potentially integrate other verification engines for the applied pi-calculus, such as the HAL model checker, which efficiently manages fresh names' generation.