Experiments were conducted using PIPS and ASPIC, two program analysis tools, on 71 cases from various sources. Implementation of our heuristics increased the identified invariants for PIPS from 28 to 69 and for ASPIC from 44 to 62, while only slightly raising PIPS's execution time from 76 to 103 seconds. This demonstrates the efficiency of our optimization method.

Rather than generating state predicates, we computed affine transformers for each program element to approximate their functions and reused them for efficiency. This modular approach aids in reducing analysis time without sacrificing too much accuracy.

We introduced a node splitting algorithm in the control graph to improve invariant precision through convex analysis. Experiment results and related work discussions are covered in later sections of the article.

Using previously established partitions on control points, our technique assumes known memory states, which is mostly verified in our tests. However, the downside is the considerable increase in control points and transitions, limiting its application to systems with low control node transition averages.

PIPS and ASPIC were tested on well-known test cases, with PIPS directly solving 28 cases and ASPIC 44. After applying our restructuration technique, PIPS resolved 41 additional cases, and ASPIC 21 more, but both failed in a few instances.

Post-restructuration, control state numbers typically remained manageable, supporting our approach's feasibility. The subway example, though more complex, still yielded correct analysis, albeit slow without manual tuning.

Despite a 34% time increase for PIPS after restructuration, there was no exponential time blowup. Contrasting strategies for loop invariants, which do not require control flow restructuring, have been explored by other researchers.

We proposed a straightforward control node splitting algorithm to refine control flow graphs, ensuring program behavior remains unchanged, and presented heuristics for partition selection in convex transition systems. This method successfully analyzed 69 out of 71 cases.

Future work will focus on addressing the excessive complexity introduced by our heuristics, which limits practical application. We aim to find better partitioning strategies that are more broadly applicable and do not compromise the accuracy of simpler, manually restructured systems.