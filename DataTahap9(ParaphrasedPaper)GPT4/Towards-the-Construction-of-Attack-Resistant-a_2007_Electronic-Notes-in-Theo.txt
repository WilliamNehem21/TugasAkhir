Content distribution typically employs one of three main methods: client-server unicast, network layer multicast, or application layer multicast (ALM). The client-server model, while easy to implement and widely used, does not scale well as the number of clients grows and poses a risk of server-based failure. Network layer multicast improves scalability by replicating data across backbone routers, but it remains underutilized due to challenges like billing and limited scalability regarding the number of multicast groups.

ALM, also known as overlay streaming, leverages end-user resources to distribute network load differently and exhibits inherent resilience to node failures and attacks. In contrast to single-source systems that create a single streaming tree, multi-source systems rely on numerous trees or a network of disjoint multicast trees, distributed so that each node receives content from multiple other nodes, reducing dependence on any single predecessor.

To enhance failure resistance, system topologies can be designed with a large number of leaf nodes and only a few forwarding nodes. Strategies for quick recovery from node failures are crucial for resilience. Attacks on the system can be mitigated by limiting knowledge of the network's topology.

Probabilistic Resilient Multicast (PRM) extends the NICE protocol with randomized forwarding and packet retransmission. Each node, in addition to its regular child nodes, randomly selects additional nodes to forward packets to, thereby introducing redundancy and lowering the impact of node failures. Similarly, FatNemo improves upon NICE by employing a hierarchical clustered ALM approach.

When constructing ALM topologies—chains, trees, or graphs—multi-source systems can create multiple trees or even form directed acyclic graphs (DAGs) or cyclic networks based on the nodes' routing decisions. In the case of a node failure, child nodes within a DAG must locate alternative parent nodes while avoiding loops, a process which can reveal the importance of certain nodes within the hierarchy. Networks can more readily balance the importance of nodes through reorganization.

Lock situations can arise when a node is compelled to forward an additional data stripe, creating forwarding challenges that nodes will attempt to mitigate in subsequent routing decisions. Forwarding nodes track their child nodes and indirectly connected successor nodes, updating this information periodically to balance the topology while minimizing protocol overhead.

To evaluate the routing decisions and overall algorithm, system simulations were conducted in OMNeT++ to observe the emerging topologies and assess their stability using metrics such as node connectivity and packet reception after node removal. Unexpected results led to the discovery of deadlocks caused by large groups of nodes favoring the same stripe, limiting the anticipated stability improvements.

Currently, the study focuses on assessing the system's response to simulated attacks, looking at factors like messaging overhead and packet loss. Future work aims to refine the algorithm to prevent deadlocks and avoid the formation of lengthy network paths.