The paper introduces a specialized visual language tailored for creating metric definitions applicable to other domain-specific visual languages (DSVLs). This language for metrics is crafted using meta-modelling techniques and incorporates commonly used product metric types. The primary objective is to simplify the process of defining metrics for a DSVL, minimizing or altogether eliminating the need for traditional programming. This simplification is achieved through the utilization of visual patterns, which specify the attributes to be measured by each metric type.
 
These concepts have been realized through integration with the AToM3 tool, enhancing it to enable DSVL designers to create metric suites for their DSVLs. Consequently, this extension generates an interactive environment with various widgets that facilitate the actual measurement of the designed metrics on models. Illustrative examples are provided using the hypermedia design language named Labyrinth.

Diagrammatic notations are commonly used across various stages of software development, including planning, analysis, and design, as a means to define, comprehend, and analyze the system being developed. DSVLs represent a specialized subset of diagrammatic notations that focus on specific application domains, offering high-level and abstract functionality.

The paper describes an abstract 'Metric' class that serves as the foundation for all potential metrics conceived by the DSVL designer. Each metric possesses a unique name and 'VariableTypes' attribute that delineates the domain (i.e., the context) where the metric will be calculated. The calculation depends on the number of specified types, which could result in matrix values or scalar values if no type is specified. The 'SubtypeMatching' attribute determines whether objects in the domain should strictly match the listed type or if subtypes are also acceptable. Additionally, the 'Dependency' relationship allows metrics to leverage outcomes computed by other metrics, with a built-in constraint to prevent dependency cycles.

The taxonomy further categorizes metrics into classes like 'ElementOriented', for properties of single model elements, and 'RelatedElements', which counts related elements according to a specified pattern.

The paper also dives into describing hypermedia systems, where the focus is on nodes containing content like text and images, user navigation via links, and the establishment of roles and teams with permissions, functions, and hierarchical relationships.

Two user-defined metrics, 'Stratum' and 'Compactness', are proposed for the hypermedia domain. The 'Stratum' measures navigation path linearity, with values ranging from 0 to 1â€”the lower the value, the less linear the path. 'Compactness' evaluates the connectivity level of the navigation graph, also ranging from 0 to 1, where lower values indicate less connectivity. These metrics depend on calculating a distance matrix to determine the path lengths between nodes.

Lastly, the paper introduces three metrics generalized from the object-oriented domain. One is the 'Permission Inheritance Factor' (PIF), which gauges the inherited permission ratio and serves as a reuse indicator, adapted from the object-oriented metrics 'Method and Attribute Inheritance Factor' (MIF and AIF). The division factors for calculating PIF are derived from two auxiliary metrics, both of which depend on relationships with other metrics and do not produce buttons in the final environment.

In conclusion, the paper outlines a taxonomy of product metrics and introduces a DSVL (named Metrics) for specifying metrics for other DSVLs. This language streamlines metric customization using graph patterns and has been implemented using the meta-modelling tool AToM3, with practical examples in the hypermedia domain. The authors highlight the utility of metrics in early development phases for enhancing design and detecting quality issues before implementation. The approach presented is more comprehensive than other existing tools since it is not confined to UML and allows for visual, graphical, and declarative customization of metrics for any DSVL.