In our research, we aim to explore which characteristics of algorithm animations and other kinds of programming visualizations most effectively facilitate users' understanding of the concepts that these visualizations are designed to explain. It is our belief that successful program visualization (PV) systems require not only perceptually appropriate graphical design, layout, and animations, but also sound pedagogical principles. Our goal is to discover and assess the perceptual, attentional, and cognitive attributes of program visualizations that impact how well viewers comprehend them. This research takes place within the scope of a broader project that encompasses observational studies with instructors, empirical investigations into the perceptual effects of animation primitives using the VizEval software, and the creation of enhanced methods for presenting and interacting with program visualizations, specifically in the realm of computer science education.

The animation playback is designed to be user-controllable, with an animation control area where viewers can choose input data sets for the algorithms, adjust playback speed, and pause or restart the animations. Stepping through the animation is possible when it's paused, allowing for gradual execution. A progress slider shows and allows users to navigate through the animation's timeline.

When participants watch the animation, popup questions might appear and pause the animation until they are answered. These popups are tied to the animation running with specific data sets and are intended to prevent cheating by obscuring the pseudocode. Experimenters can opt to reveal the correct answer after response submission, and participants' answers are logged.

The graphical visualization is produced by separate algorithm and animator modules utilizing a threaded architecture that follows the producer-consumer design pattern. The algorithm thread provides data for the visualization, and the animator thread processes this data to create the visual output.

The visual display contains graphical objects (lines, rectangles, text labels, circles, and composite graphics) with multiple properties (color, fill, visibility, font, position, labels). The display canvas references a list of graphics, refreshing the display as the animation updates.

Participants were divided into four groups with different animation conditionsâ€”two factors being tested: cueing and exchange animation. No significant differences were found in the understanding of the animations across the different groups, even when cues like color and arrows were employed.

Finally, the SSEA environment has been effective for conducting empirical studies on program visualizations. Several have been carried out, with one presented here. The ability to incorporate sound actions has been a recent addition to the SSA package, and further studies examining the role of voice-overs and non-speech audio in animations are also in progress.