In this paper, the authors explore the topic of coverage checking in the context of dependently typed data, specifically focusing on data defined using higher-order abstract syntax. They differentiate between existing studies on coverage checking for closed data and their approach, which takes into account open data that depends on external contexts. Their research aims to enhance the understanding of coverage checking in the Twelf system and inform the development of coverage checking for functional programming languages like Delphin and Beluga. The paper is poised to contribute to how case analysis proofs are conducted in systems that manage higher-order abstract syntax data.

Furthermore, the authors define hereditary substitution in a recursive manner, analyzing both the term being substituted into and the type of the object being replaced. Due to space constraints, expansive details on hereditary substitution are assigned to an appendix. For clarity throughout the document, subscripts are omitted.