This paper examines the application of software composition and transformation techniques to domain-specific languages (DSLs), focusing on the Modelica language, which is commonly used for modeling and simulating physical systems. Specifically, the paper explores how to compose and transform the ModelicaXML dialect, which is an XML representation of the Modelica language.

The paper describes how the CompOSE concrete composition framework has been extended to include a component model for Modelica, thereby enabling the composition and transformation of Modelica-based systems. Modelica is an object-oriented language designed for multi-domain system modeling, encouraging a component-oriented approach to system construction.

The paper references the prevalent use of XML technologies in software engineering and cites examples from the literature, such as the SmartTools system, aspect-oriented programming using XML-based abstract syntax trees, and the OpenModelica project's code transformations.

The structure of the paper includes an introduction to Modelica, ModelicaXML, and the CompOSE framework, followed by a presentation of the CompOSE extension for Modelica, with illustrative examples of composition and transformation programs for the language. A conclusion and discussion of future work conclude the paper.

The Modelica code is translated into ModelicaXML by serializing its abstract syntax tree (AST) into XML format, validated against a Modelica Document Type Definition (DTD). The XML representation simplifies tasks such as documentation generation and language translation.

The paper describes the multi-layered architecture of CompOSE, which includes a transformation engine layer for transforming component representations using tools like the Java refactoring engine Recoder, and a concrete composition layer that adds information for specific component models like ModelicaXML.

Uniform inheritance and fragment components are central concepts in CompOSE, allowing for the sharing of components through copy-and-extend operations. The layered design facilitates easy addition of new component models.

The paper provides concrete examples of using the framework, which could be performed visually or programmatically, showing how classes can be split or composed for reuse or to adapt to different modeling contexts.

The paper concludes with a discussion on how Modelica can impose additional constraints on composition based on domain knowledge and expresses an interest in exploring how library developers can specify these constraints.