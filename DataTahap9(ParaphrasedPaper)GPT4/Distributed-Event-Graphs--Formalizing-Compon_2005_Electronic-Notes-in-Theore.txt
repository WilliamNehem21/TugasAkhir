The research presented utilizes the meta-modelling platform AToM3, developed with the help of Hans Vangheluwe from McGill University, to implement new concepts. AToM3 enables the definition of visual languages' syntax through meta-modelling and the execution of graph transformation rules. Custom modeling environments are automatically generated from these definitions. An environment for DEVS (Discrete Event System Specification) has been developed with an added feature that can generate standalone applications from a visual model, which is first designed and analyzed within AToM3 before being translated into code.

In graph grammar-based visual language definition, grammars can either generate all valid language models or parse valid models to an initial symbol. Maintaining model consistency, both within the same level (intra-level) and between specification and instance levels (inter-level), is crucial. In dual meta-level systems, consistency is inherently assured, whereas in single meta-level systems, it must be enforced using constraints - either textual, such as OCL, or graphical, in the form of graph transformation rules.

To ensure intra-level consistency at the specification level, it is important to verify that connections between input and output ports are compatible with the events they are designed to handle. Rules are defined that govern the automated behavior within the visual language. For example, one rule determines how outgoing transitions are processed for scheduling new events, potentially selecting connected processes at random to receive the event. Other rules address generating internal events in processes, modifying process behavior, or deleting execution pointers.

The authors also acknowledge similar research that has extended event graphs with features such as canceling edges and parameter passing, though they note no existing work to adapt event graphs for component-based simulation with event passing through specific ports.

Comparatively, their framework has similarities with the DEVS modeling and simulation methodology in how atomic models and composite models are defined and interact. DEVS models specify transitions for different event types and include timing functions, with additional translation functions for composite models, thereby promoting model reuse.

Lastly, the paper suggests that combining formal language definition using meta-modelling and graph transformations with code generation facilitates pre-implementation analysis of the model. Though the research currently implements only simulation, there exists potential for expanded analyses in areas like parallelism, deadlocks, non-determinism, and functional behavior through graph transformation theory.