In this paper, we introduce an algebraic framework for web services that helps users in composing web services and formally describing them. We utilize relation algebra concepts such as tests and iteration to automate the composition of web services with predefined objectives.

Numerous methods exist for web service composition, including agent-based, interaction protocols, symbolic transition systems, process algebras, Petri nets, and planning techniques from the semantic web community.

We provide an algebraic description of web services, considering a web service as comprising an interface (defined in WSDL with input and output messages) and its implementation. We simplify by knowing the message types upfront, but will explore semantically described or nested types and service binding details in future work.

We identify a specific issue with composition when the output of one web service does not match the input requirements of another. To solve this, we conceive a web service as a set of methods that retain certain information throughout execution, which supplements the output.

Further, we explore using tests for modeling assertions and define modal operators for handling service termination and an abstract version of the weakest liberal preconditions (WLP) operator. These are akin to propositional dynamic logic and temporal logics, and they aid in establishing the data a customer needs to provide to achieve their goals using web services.

Avoiding an in-depth discussion of Kleene algebra, which relates to the algebraic structure of web services, we illustrate our concepts through detailed examples and how the reflexive transitive closure within relations applies to our context.

We have applied our theory in a Haskell implementation, which aids in understanding web services and examining practical examples. In the case study, we modeled user behavior with arbitrary finite iterations, even though users might not recognize that, for example, two iterations of booking a flight result in two tickets.

Our research provides a foundational algebra for web services by incorporating them into relational structures that extend into i-semirings, allowing for composition and choice operations. This facilitates algebraic definitions of web service composition and enables us to impose conditions and use modal operators to ensure certain outcomes.

While our relational approach helps with input and output calculations, we have not extensively discussed execution order. However, our algebraic elevation permits substituting the relational model with another i-semiring model without revisiting properties, which is advantageous.

In future work, we consider the algebra of traces, a well-known i-semiring that preserves information about the execution order, as another tool for web service composition.