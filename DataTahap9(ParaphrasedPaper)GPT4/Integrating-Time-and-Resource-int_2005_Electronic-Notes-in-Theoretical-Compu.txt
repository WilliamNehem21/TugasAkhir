This paper presents an enhanced model for analyzing resource allocation and scheduling in real-time systems by extending an existing formal language, Circus, to include continuous time and resource management capabilities. Circus traditionally combines communication elements from CSP (Communicating Sequential Processes) and state-based specifications from Z notation. The extension enables accurate modeling of a system's temporal and resource-related behavior. The authors' model overcomes the limitations of previous timed models, which assume that resources are unlimited, by accounting for the reality that resources are often constrained.

In the initial parts of the paper, the authors describe using a simplified language called CT, which is a subset of Circus tailored for expressing timing behavior. This language is extended with time constructs while also maintaining healthiness conditions to ensure realistic and implementable specifications.

Two resource models are then introduced: an unlimited and a limited resource model, with the latter considering real-world constraints of resource availability. These models can analyze potential resource conflicts when parallel programs access the same resource.

The paper also explores the application of these models in co-design, a field that involves the integrated design of hardware and software components. It focuses on hardware/software partitioning, a crucial step that divides a system specification into separate hardware and software segments. The authors demonstrate how the resource models can be applied to ensure the behavioral correctness of a system after partitioning, addressing concerns that previous methods did not account for time and resources.

The authors conclude with intentions to develop proof-assistant tools based on their semantic models to facilitate the verification of real-time systems. Further work includes establishing a set of refinement laws for the resource-aware time models to enable easier development, refinement, and automatic verification of real-time systems.