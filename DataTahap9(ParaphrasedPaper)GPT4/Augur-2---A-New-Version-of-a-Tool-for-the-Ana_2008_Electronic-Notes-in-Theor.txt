In the paper, the authors explain the development and current status of a software tool named Augur 2, which is the successor of Augur 1. Augur 1 was a tool that transformed graph transformation systems (GTS) into Petri nets to facilitate analysis. The intention behind developing Augur 2 was to create a more open, flexible, and extensible environment for verification compared to its predecessor, adding more functional capabilities and new analytical methods.

The development of Augur 2 began with a small tool that could convert GTXL files into GXL files, which are both XML standards for representing graphs and graph transformation systems. The team continuously added features to this tool, such as algorithms for analyzing Petri nets using coverability graphs and backward reachability. To enhance the user experience, an interface with Graphviz was created for visualization, and the tool was given capabilities for specifying prohibited paths in graphs using regular expressions.

Augur 1's architecture was specialized for approximating the unfolding of GTS, making it difficult to integrate new changes. Consequently, Augur 2 was designed with a more general and modular architecture facilitating easier inclusion of additional analytical and visualization methods.

An upcoming feature of Augur 2 is its ability to work with attributed graphs, which have nodes and edges assigned integer and string attributes. The paper discusses plans to adapt existing analysis techniques to accommodate attributed graphs. The team is also enhancing support for various inputs and outputs, like developing an interface to another GTS tool called AGG. They have also created a simple pointer-manipulating programming language that can be mapped to graph rewriting to serve as an input method.

Hypergraph rewriting is employed, with constraints that include having a discrete interface graph in rules, forbidding node deletion, and ensuring rules are consuming (delete at least one edge). While the last two stipulations are crucial for the unfolding approach used, Augur 2 aims to remove the limitation requiring the interface graph to be discrete.

Since GTS are Turing-complete, the authors resort to over-approximation techniques when analyzing them, using Petri nets as an abstraction. They describe an approximate unfolding technique where the analysis includes over-approximation through folding steps. The outcome is an approximation represented using Petri graphs, which maintains a simulation relationship to the reachable graphs.

To refine these approximations, methods such as counterexample-guided abstraction refinement and depth-based refinement are employed, which can result in more concise approximations and quicker verification processes.

In terms of software design, Augur 2 emphasizes the concept of algorithms, which are developed as classes that can be integrated and work with common data structures throughout the software's lifecycle. These include different operations on Petri graphs and I/O operations.

The paper also mentions that while many tools exist for analyzing GTS, Augur 2 represents an approach that prefers developing specialized methods for graph rewriting over translating GTS to the model checker's input language, drawing a parallel to another GTS tool, GROOVE.

Finally, the authors note that while some of Augur 2's functions are already present in Augur 1, the core part of Augur 2, such as database management, is in place. Augur 2 will facilitate case studies that will inform and stimulate the future development of verification techniques.