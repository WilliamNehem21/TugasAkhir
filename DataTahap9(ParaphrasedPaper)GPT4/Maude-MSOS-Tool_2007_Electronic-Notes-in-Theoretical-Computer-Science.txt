Structural Operational Semantics (SOS) is a widely recognized framework used to define the semantics of programming languages and systems that involve concurrency. However, Plotkin's influential work at Aarhus University left the issue of modularity in such specifications unresolved.

The paper discusses an approach that divides the labels from SOS's transition relations into pre and post components. This involves constructing an element of the rewriting relation using an element from the labeled transition relation in the form of a two-pair structure: the first pair contains the program syntax alongside the pre-projection of the label (which can include aspects like the environment before the transition), while the second pair combines the post-transition program syntax with the post-projection of the label.

Attributes that are found within the function 'f', such as associativity ('assoc') and commutativity ('comm'), are replicated directly into the generated operators. If 'f' is presented in a mixfix format, the function symbol is created by retaining tokens that start with lowercase letters and replacing those starting with uppercase letters with underscores. The types of the domain for the generated operator are named after the tokens with uppercase letters in 'f'.

Constructive Modular SOS (MSOS) provides an abstract syntax for standard constructs in programming languages. The specifications for Constructive MSOS presented in the paper consist of 800 lines across 74 modules. These modules define abstract structures and basic data types that are commonly used in programming languages. For example, there's a specific module for the BNF notation and transition rules related to closure values. The modular nature of MSOS, enhanced by the encapsulation of semantic components, facilitates better modularization and increases the potential for reusability in programming language specifications.