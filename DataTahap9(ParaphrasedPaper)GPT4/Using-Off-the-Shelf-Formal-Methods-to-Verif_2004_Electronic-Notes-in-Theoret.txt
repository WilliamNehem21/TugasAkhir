The paper discusses methods for analyzing and verifying formal properties of attribute grammars within language processors and integrated development environments. The authors emphasize two functionalities: enhancing environments for attribute grammars and formally analyzing grammar properties. For the latter function, they have opted not to modify existing systems but to utilize off-the-shelf formal methods tools, which offer a generic platform to describe and assert software properties independent of programming notations. This allows for a flexible analysis tool compatible with different languages.

The authors propose using formal relational models, specifically the Alloy model finding and checking tool, which provides counterexamples when assertions about a grammar are violated. The Alloy tool operates on a first-order relational logic and is declarative, with automatic analysis capabilities similar to model checkers. Counterexamples are crucial for the attribute grammar development process because they pinpoint exact scenarios where the software fails to meet desired properties.

The paper illustrates the application of this method to attribute grammar constructs like 'including', 'constituent(s)', and 'chain', showing how Alloy can check these constructs. It also compares model checkers and proof assistants, two kinds of formal methods. Proof assistants require user-driven logical deductions and are powerful but offer little information if the proof fails. Model checkers, on the other hand, are less interactive, but they can identify counterexamples when assertions are false.

The paper provides an Alloy-based analysis for a specific problemâ€”a grammar that specifies semantic analysis for a subset of the Pascal language. Their evaluation demonstrated that the analysis of this grammar's 'including' constructs can be done in reasonable time, but the authors aim for better targeting of models to reduce diagnosis times for problematic cases. They also plan to refine scope settings for models to avoid redundant computation.

Lastly, the paper acknowledges contributions from experts in grammar analysis and logical modeling, who provided insights that informed their research and the application of the Alloy specification language.