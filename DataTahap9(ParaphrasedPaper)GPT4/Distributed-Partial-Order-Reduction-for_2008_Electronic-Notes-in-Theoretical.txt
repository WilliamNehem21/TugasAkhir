The essential point of this excerpt is emphasizing the use of an expanded set to prevent revisiting states in an algorithm. This set helps avoid redundancy but isn't crucial for ensuring that the algorithm terminates, as the label transition systems (LTSs) involved do not contain cycles. As a practical consideration, the expanded set can be offloaded from primary memory to disk storage if memory resources become limited, and this will not affect the algorithm's ability to conclude. The paper cites references [3,9] for readers who are interested in other memory management strategies that share similarities with this approach.

Furthermore, the paper discusses distributed algorithms for state space generation, which typically involve the coordination between client processes and a managing process. The clients run the core of the algorithm, while the manager oversees the overall progress and determines when to halt the state generation, based on whether new states continue to be discovered. In their specific illustration (Algorithm 2), the authors present the client-side component of their distributed partially ordered reduction (DPOR) algorithm, leaving out the details of the manager process as it doesn't interact with the state pruning aspect of the algorithm. However, those interested in the general structure of such a manager process can find a description in the referenced literature.