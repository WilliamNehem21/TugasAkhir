This article introduces a novel calling context profiler for Java named JP2. The profiler stands out for its ability to compile thorough profiles compatible with all standard Java virtual machines (JVMs) without needing JVM modifications, thus maintaining portability. Unlike other profilers that may use sampling or incomplete instrumentation, JP2 achieves full profiling by tracking the dynamic execution metrics, such as method invocations and executed bytecodes, in a platform-independent manner. A unique feature of JP2 is its capability to distinguish between different calling sites in the same method, as well as its support for selective profiling of specific method dynamic extents.

The paper highlights the limitations of existing calling context tree (CCT) profilers that cannot distinguish between calls originating from different sites within the same method. JP2 addresses this by enabling different representations of calls within the CCT.

The design of JP2 is explained in the paper, including a critique of an earlier version of the tool and the improvements made in JP2. Additionally, it discusses how JP2 handles native methods and avoids infinite recursion problems caused by the execution of instrumented Java class library methods. This is achieved through code duplication and conditional execution that selects the appropriate version of a method's bytecode.

Furthermore, the paper compares JP2 with the probabilistic calling context (PCC) approach, which offers lower overhead but does not always yield completely accurate profiles. The authors suggest that recent studies show it is possible to reconstruct significant context information offline even with the PCC's probabilistic nature.

The effectiveness of JP2 was assessed through benchmarks using standard Java and Scala programs across several JVMs. The overhead of using this profiling tool was also evaluated during these tests.

Overall, JP2 is described as a comprehensive, fully compatible profiling tool that provides enhanced insight into Java program execution without compromising performance or portability.