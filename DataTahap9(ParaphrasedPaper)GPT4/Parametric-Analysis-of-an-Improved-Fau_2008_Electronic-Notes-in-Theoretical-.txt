In this paper, we explore the optimization of a triple modular computer system used in aerospace to manage and distribute the decision-making processes across various subsystems. Drawing from our initial experimentations and modifications to a design provided by a practical engineer, we sought to enhance fault-tolerance and augment the capabilities of each system component. We offer a formal depiction of the enhanced system using the UPPAAL software framework and its network of timed automata. Although this framework lacks native parameter support, necessitating the specification of parameter values for distinct hardware settings, our contributions extend beyond these constraints. Our approach involves two significant advancements: first, determining parameter constraints that guarantee property T; second, rigorously proving that with these constraints, the system upholds correctness without relying on UPPAAL's fixed-parameter approach. Such methods have also found applications in different contexts, including a LEGO car system case study.

Our system is prone to a "large state space" issue, prompting us to utilize abstractions in our earlier modeling efforts and in our current manual proof process, where CPUs, voters, and arbitrators function independently, allowing for property T to be proven by focusing on a single instance of each.

The paper is structured in the following manner: Section 2 explains the original system and its improvements, particularly the expanded roles of the voter and arbitrator. Section 3 develops a formal model using UPPAAL's timed automata. Section 4 details the properties that require verification and the necessary constraints for their verification. Section 5 sketches out proofs of correctness. Finally, Section 6 concludes the discussion.

We describe the system's operation as follows: a CPU enters a reset phase for a set period (C) and then progresses to a startup phase (lasting up to "Rub" time). The transition between these phases is represented by a voltage change on a specific CPU pin, which is tracked using a boolean array.

CPUs process input data and send outputs to voter FIFO buffers for assessment. The system uses redundancy to avert voter failure from impacting system fault tolerance. Each CPU awaits a synchronization signal before transitioning between non-faulty and faulty states, as determined by a watchdog timer.

If a CPU exceeds the timer limit or an arbitrator signals it, the CPU resets immediately. A CPU may also be permanently shut down if it's deemed irreparably faulty. Similarly, the arbitrator operates autonomously, deciding when a CPU needs to restart.

UPPAAL's verification confirms that both the watchdog and arbitrator can prompt CPU restarts, addressing concerns raised. Despite the lack of direct interaction between CPUs, the independence of each voter is maintained.

The paper then addresses the influence of various timing parameters on the system's properties, like signal intervals and cycles, as well as CPU startup constraints. The paper highlights the role of the voter's fault check function in determining a CPU's status and need for restart, concluding with a reference to a relevant work by Gnesi, Lenzini, and Martinelli on fault-tolerant systems.

Overall, this study aims to prove systemic correctness through generalizable parameter constraints and manual proofs without the need for fixed-parameter restrictions inherent in existing verification tools like UPPAAL.