The academic paper discusses the historical discrepancy between the attention given to the functional analysis of software systems and the relative neglect of non-functional attributes such as performance and security. It emphasizes the recent trend towards integrating non-functional analysis throughout the software lifecycle, aiming to validate these attributes from the early stages of development.

The paper argues for two advancements in software analysis: combining functional and non-functional analysis, and automating the use of analysis results to improve software models. To address integration at the software architectural level, the authors introduce a framework that reveals interactions between functional and non-functional aspects, which may not be apparent when analyzed separately.

For example, changes made to address a deadlock might impact performance, or added security measures could alter a subsystem's behavior, necessitating revalidation. Typically, analysis methodologies translate software models into different notations, like formal languages or Petri nets. This paper proposes using an XML-based intermediate representation, serving as common ground for applying analyses and integrating results back into the software models.

Further, the paper talks about making stochastic process algebra (SPA) more accessible for software engineers. SPA allows for performance analysis of concurrent systems by describing entities executing actions with temporal information represented by continuous random variables.

In the framework's core, the paper describes the use of XML to represent different notations input from various analysis approaches, enabling integration of analysis results at the architectural level. Semantic relations, defined by rules in XML, link entities in different notations and transfer feedback between themâ€”an essential feature for analysis integration.

The paper outlines the use of an engine dedicated to applying these XML-based rules, which must be built for each pair of different analytical approaches. This incremental approach to implementation means only adding schemas and rules necessary to integrate new approaches as they are considered.

To demonstrate the practical use of the framework, the authors describe a simple example involving a user interacting with a set and counter architecture. The framework is built upon an XML-based core and designed to be implemented using the Eclipse platform, leveraging existing tools and potentially bridging the gap between models and code generation.

In conclusion, the paper suggests future research directions that involve incorporating additional methodologies for architectural-level analysis into the framework, potentially expanding it to cover other phases of the software lifecycle if initial results prove promising.