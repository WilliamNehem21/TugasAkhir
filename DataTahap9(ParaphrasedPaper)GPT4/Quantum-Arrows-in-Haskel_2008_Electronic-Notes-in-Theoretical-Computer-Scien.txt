The paper presents an argument for a comprehensive and realistic model of quantum computation that integrates both quantum and classical information processing. It proposes two models for such computations, one based on probability distributions of quantum state vectors and another on density matrices, and further develops these models with the help of a generalization of monads known as arrows.

The authors highlight their previous work where they used density matrices and superoperators as instances of arrows, but recognized a limitation in that approach because it solely relied on quantum data without the capacity to express the interaction between classical and quantum information.

The structure of the paper is as follows:
- Section 2 introduces indexed monads and indexed arrows within the Haskell programming language.
- Section 3 revisits the authors' prior work modeling superoperators as arrows.
- Section 4 outlines two alternative models for managing both quantum and classical computations, again structured as indexed arrows.
- The paper concludes with Section 5.

Monads in programming are used to encapsulate computation definitions, allowing programs to be seen as functions from values to computations, such as handling exceptions. Indexed monads, or Kleisli structures as the authors prefer to call them, allow for the selection of specific sets to apply the constructor T, offering more generality than monads.

The first proposed model involves measuring sections of the density operator representing the global quantum state, outputting a classical perspective, and then updating the state to a new density matrix. The second model employs probability distributions over quantum state vectors, associating each vector with a list of classical values, which are the results of measurements.

The paper explains how a quantum program is interpreted by a tracing superoperator, which accounts for the quantum state's classical components. Unitary transformations ignore classical inputs and do not provide classical outputs, thus illustrating a lack of interaction with the classical world at this stage.

The authors demonstrate how to handle quantum measurements that reduce the quantum state while outputting a classical probability distribution. The result involves calculating the probabilities of potential outcomes and adjusting the output density matrix based on these probabilities.

The paper proposes a comprehensive and expressive framework for quantum computations that incorporates both quantum and classical interactions, aimed at improving the structure and understanding of such computations within programming languages like Haskell. They intend for this work to guide the development of a quantum programming language that neatly separates classical, probabilistic, and quantum aspects to facilitate clearer reasoning about quantum programs.