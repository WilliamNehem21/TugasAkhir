The paper discusses the Unified Modeling Language (UML), which is widely recognized as a powerful visual modeling technique that has seen rapidly increasing use since its development, complemented by a variety of market-available tools to aid its application, such as Rational Rose, ArgoUML, and Rhapsody. Despite these tools, the paper notes that there is no guarantee of the correctness of UML specifications.

The main focus of the paper is to present a tool and its functionalities, as demonstrated through a case study. The tool is analyzed in terms of its ability to generate formal specifications from UML diagrams and to assist in verifying the properties of the system being modeled. The paper includes a literature review in the same area, followed by conclusions and potential future research directions.

The tool takes UML specifications in XMI format and automatically transforms them into SMV specifications, considering class, state, and activity diagrams to model the system's active behavior. Each active class in the system corresponds to an SMV module which together construct the specification of the behavior of the system.

The paper illustrates a basic example system where users interact with a credit card and PIN verification process, including allowances for retries and operation selection upon successful authentication.

Active class behavior is reflected in state machine and activity diagrams. For state machines, a separate variable records the current state ensuring accurate transition tracking. Activity diagrams model class operation control flows, and they are activated by calls to activities within states, using constructs like fork and join to manage concurrent evolution.

Properties to be verified are written in temporal logics such as CTL or LTL, which can be complex and require advanced logical understanding. The paper's tool addresses this difficulty by providing a guiding assistant for users to write properties correctly.

The paper defines various pattern types for expressing system properties, including occurrence patterns (like absence or universality) and order patterns (like precedence or response), which describe the relationships between different states or signals.

Comparisons are made between the tool presented in the paper and others such as VUML, ad HUGO, and TCM, noting the unique contributions of the presented tool, including the semi-transparent automatic verification process and comprehensive inclusion of state and activity diagram elements.

The paper concludes by positioning its tool as an integration of formal and informal methods, with user-friendly verification of active behavior in UML specifications using SMV. It claims uniqueness in jointly verifying activity and state diagrams, representing class operation behavior.