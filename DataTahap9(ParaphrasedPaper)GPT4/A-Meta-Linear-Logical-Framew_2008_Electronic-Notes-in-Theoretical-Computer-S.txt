Logical frameworks are versatile meta-languages that provide a structure for representing various formal systems commonly utilized in areas like programming language semantics, logics, and protocol design. Unlike foundational frameworks, logical frameworks are neutral when it comes to the foundational aspects of these systems, focusing instead on how they are described rather than analyzing their intrinsic characteristics.

These frameworks have evolved to incorporate new features to better represent complex systems. They now include linear types to track resource usage (which is particularly helpful for programming languages dealing with side effects), ordered types to represent systems that consume resources sequentially, and monadic types for handling concurrent computational models.

In this paper, we introduce L+, a first-order, intuitionistic, non-linear logical framework that enhances the existing LLF (Logical Framework with Linearity) by not being bound to foundational premises. L+ uniquely allows for induction over higher-order types without enforcing positivityâ€”this includes types that blend linear and intuitionistic elements. It also supports the inclusion of LLF contexts in quantifications.

L+ empowers users to examine meta properties of systems modeled in LLF, enabling them, for example, to affirm the type soundness in a basic programming language that uses references or validate cut elimination in the context of linear logic. To accommodate these capabilities, L+ includes dependent types.

It structures the representation of types and objects in a specific way: types can be constants, applications, dependent or linear function types, additive product types or the additive unit. Objects can be constants, variables, or intuitively or linearly applied functions, in addition to being linear additive pairs or projections, or constructors for the additive unit.

The paper further details how L+ deals with LLF contexts and outlines the meta logic, discussing its syntax, semantics, and proof theory, employing examples to demonstrate the underlying concepts.

Meta variables and context variables serve as the interface between LLF and the meta-level. This setup would be sufficient for closed LLF terms; however, the paper aims to address all higher-order LLF encodings, including open ones, which will influence the approach to LLF.

L+ is designed with an intent to provide a meta-logic framework that facilitates reasoning about LLF encodings. Proofs formulated within this meta-logic framework should be sufficient to convince a critical observer of their validity, be it a statement, lemma, or theorem. The paper opts to interpret proofs as total programs via a realizability interpretation rather than following a categorical or model-theoretic approach. As a result, a proof serves as a catalyst for transformation between LLF encodings, with its behavior being determined by its type, as the formula dictates.