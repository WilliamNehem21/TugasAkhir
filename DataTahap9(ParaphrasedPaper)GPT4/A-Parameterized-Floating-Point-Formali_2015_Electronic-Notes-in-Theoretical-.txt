Programmers require tools that provide automatic estimates of error ranges and that facilitate the automation of complex and error-prone correctness proof processes for floating-point algorithms. These algorithms typically adhere to the IEEE 754 standard due to its widespread support and efficient implementation across various hardware and software platforms, such as offering four levels of precision on Intel CPUs and three on NVIDIA GPUs. Additionally, there has been the development of software packages such as one by Cornea et al. for decimal floating-point numbers.

In their representation, IEEE floating-point numbers are viewed as a specific subset of real numbers. They include subnormal numbers and zero, which are depicted as a series of fixed-distance real numbers akin to fixed-point numbers. As for normal numbers, these are characterized by a subset of an infinite series of real numbers with variable spacing, which are similar to floating-point numbers. Regarding exceptionally large real numbers, any number exceeding a set significant threshold is treated as floating-point infinity in their model. However, this model does not include signed zeros or NaNs (Not a Number values), and each category is described in more detail in their respective sections.

The authors have introduced a new formalization of fixed and floating-point arithmetic within the HOL Light proof assistant's existing distribution. This contribution aims to integrate floating-point theory into the HOL Light community, thereby preventing the necessity of cross-proof assistant analyses, which are less supported and developed. They plan to examine the round-off errors in floating-point computations in future work, striving to accurately establish tight upper bounds on such errors. This subsequent project aims to verify proof certificates concerning reported errors, leveraging the foundational work described.