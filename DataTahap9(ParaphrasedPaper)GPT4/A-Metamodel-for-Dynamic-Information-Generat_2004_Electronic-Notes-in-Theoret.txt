The paper addresses the challenge of fully understanding object-oriented systems through static analysis alone and suggests the necessity for dynamic analysis techniques. It points out that while there are multiple tools available to analyze object interaction traces, the lack of a standard exchange format impedes tool interoperability.

To solve this issue, the authors propose a new graph-based exchange format called Compact Trace Format (CTF). CTF aims to represent object interaction traces efficiently by reducing the size of traces without losing content. The proposed format uses techniques to compress trace data, such as summarizing repetitive method invocations within loops.

The CTF schema is depicted using a UML class diagram and is flexible enough to accommodate different types of traces, including routine calls in procedural systems and method calls in object-oriented systems. The paper suggests extending this model to include other forms of interactions.

The schema includes an abstract Trace class for common information and specialized subclasses to handle various trace types. A TracePattern class is used to represent recurring patterns in traces, with an emphasis on those appearing across multiple traces as potentially more significant.

Although the paper suggests that the syntactic form of the file containing the exchangeable data can be separated from the schema, the authors argue that using an existing format like GXL (Graph Exchange Language) could lead to unnecessarily large file sizes. The authors demonstrate the use of CTF with an imaginary trace involving classes and method invocations, showing how repetition can be condensed for conciseness.

Finally, the paper outlines future work, which includes extensive testing with execution traces from a wide array of systems, encouraging tool builders to adopt CTF, and extending the format to accommodate additional types of execution traces.