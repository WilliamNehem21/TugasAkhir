This paper asserts that the success of the current approach to systems design is due to its approximation of a simpler, declarative model of interactive computing, despite being implemented differently. It argues that skilled software designers inherently apply this model to determine what constitutes appropriate system behavior and, contrary to some beliefs, declarative models are well-suited to interactive systems, even if certain techniques like monads may seem complex.

The author suggests that to resolve the disconnect between traditional algorithmic languages and interactive systems, the focus should not be on immersing in the complexities of imperative languages. Instead, the paper advocates for elevating declarative languages to accommodate interaction natively within their computational model. The primary goal of the paper is to lay the philosophical groundwork for this "declarative interaction model" and to encourage further research, rather than presenting novel findings. Future work will involve the formalization of this model's various components.