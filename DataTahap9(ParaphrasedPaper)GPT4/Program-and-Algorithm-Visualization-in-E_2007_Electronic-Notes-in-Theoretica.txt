In creating the Teaching Machine (TM), the developers aimed to address the common issue of novice programmers who approach coding by haphazardly stringing together lines of code, much like magical incantations, without understanding their significance. The goal was to foster a deep understanding of how each line of code translates into instructions that are executed by a machine. The TM is designed to help students form an accurate mental model of how a computational device operates, although it is not a conventional computer.

The TM processes standard C++ or Java code, but it does not fully implement either language, lacking features like threads in Java and templates in C++. Despite these limitations, the supported language subsets are broad, conform to standards, and have been used successfully in courses.

The TM's interface includes a window for evaluating expressions and another for console input and output. These views update in real time as the program runs.

At Memorial University, the TM is used in a series of courses within the Electrical and Computer Engineering discipline that cover structured programming, advanced programming, and data structures. The teaching pedagogy changed with the introduction of the TM, with less reliance on older teaching methods such as lecture transparencies and more emphasis on interactive examples using the TM. This evolution of the teaching approach also led to the adoption of web-based interactive notes, incorporating the TM as a Java applet, made possible by a new tool developed for this purpose called Webwriter++.

Moreover, at the University of Athens, the TM has been integrated into programming courses within a highly regarded master's program focused on principles of programming languages and programming techniques. The TM helps to illustrate computational concepts, supporting an analytical teaching approach that emphasizes recurring programming concepts rather than the specifics of any particular language.

The developers have found that the TM is a valuable teaching aid that not only helps to clarify common programming misconceptions, such as variable naming or understanding the differences in parameter passing, but also serves as a platform for future instructional enhancements. They consider the TM to be user-friendly, robust, and flexible, and it is structured for easy extensions, such as incorporating specialized input and output plugins for improved visualizations and interactivity. They believe adding these plugins will be simpler than creating new visualizers from scratch.