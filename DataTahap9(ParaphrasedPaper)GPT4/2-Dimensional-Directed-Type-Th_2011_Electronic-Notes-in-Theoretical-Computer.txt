In this paper, the authors focus exclusively on a two-dimensional version of directed type theory they refer to as 2DTT and present their foundational outline in section 2. This theory can be straightforwardly represented within the standard context of categories, functors, and natural transformations, as shown in section 3. The properties of the category of categories imply that 2DTT should naturally adopt strict characteristics, meaning the laws of associativity, identity, and functorial behavior are intrinsically established within the theory rather than needing additional propositions to be upheld.

Even though the current work doesn't require it, the authors believe that this two-dimensional theoretical framework could potentially be expanded into higher dimensions and could accommodate a wider range of models and applications. The primary application in view for 2DTT, elaborated in section 4, is to enhance the functorial syntax approach to incorporate dependent types and syntax with mixed variances.

Further speculation in the paper suggests additional areas where 2DTT might be applied. Firstly, it could potentially capture certain directed behaviors already observed in dependent type systems, such as type size variance, implicit conversions, and coercive subtyping. A specific instance to consider would be the translation of coercive subtyping to their framework, utilizing functorial properties to elevate coercion over subtyping rules. Their system's explicit mapping could also enable the handling of non-coherent coercion systems, and the authors express interest in the implications of such generalized uses. Even so, coherent coercion systems could provide insights on when to infer certain mapping instances.

Secondly, directed type theory might prove valuable as a meta-language, capable of formalizing directional notions like reduction steps in computation or the constructs of category theory itself. Lastly, directed type theory shows promise for conceptualizing and analyzing systems with side-effects or interactive components that inherently progress in a unilateral direction. Examples might include defining types representing interactive processes whereby the types of transformations reflect operational semantics, or types that depict process simulations. The paper also mentions the potential connections between homotopy theory, concurrency, and directed type theory, but details on that are flagged for future elaboration.