Concepts originally formulated by computer scientists for modeling interactive systems have been adapted for biological applications, with enhancements to provide detailed representations of biological behaviors. Model checking, which allows for the systematic verification of system properties through logical formulas by examining all potential system behaviors, has proven effective for analyzing biological systems. Established formal frameworks include those capable of modeling, simulating, and checking biological systems.

Yet, model checking faces a significant challenge known as the state explosion problem. One strategy to mitigate this issue relies on the system's natural decomposition—evaluating properties of isolated components and extrapolating their validity to the entire system. Properties that preserve their satisfaction from individual components to the overall system are discussed later in this text. The sync-automaton, which has two states, is an example model described here, where only the true atomic propositions of each state are considered.

Theoretically, a system's computation is represented as a complete pathway within a sync-program's semantics. It’s essential to demonstrate that any full path within one component's semantics corresponds to a full path within the other component's semantics when viewed from the perspective of the respective components.

The paper then references the lac operon in bacteria, which is activated in the presence of lactose. As lactose or an isomer like allolactose binds to the lac repressor, it releases the repressor from DNA operator sites, which then increases the transcription of lac genes. However, this system is also influenced by glucose availability; when glucose is scarce, cyclic AMP (cAMP) and the cAMP Receptor Protein (CRP) activate lac gene expression. The model focuses on the interactions between lactose, allolactose, and the lac operon, excluding the role of galactose as it is not involved in the operon's regulation.

The paper establishes that the truth of ACTL (a type of temporal logic) formulas is maintained when moving from smaller sync subprograms to the complete program. While failing to confirm a property in sync subprograms doesn't confirm it in the entire program, sometimes inspecting the model can identify a larger subprogram that successfully verifies the property. Subprograms can serve as program abstractions and there are various approaches to preserving properties including abstract interpretation and transition system reduction to maintain specific properties.

The authors propose that their theorem on property preservation could be extended to preserve all ACTL* properties and express intentions to refine their work by incorporating a weaker notion of fairness and allowing descriptions of dynamic systems with real-time sync-automata creation. They also suggest a quantitative expansion of their methodology for more accurately depicting systems.