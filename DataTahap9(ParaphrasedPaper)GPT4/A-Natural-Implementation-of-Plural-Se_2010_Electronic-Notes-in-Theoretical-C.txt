The academic paper discusses the challenges and solutions involved in computing with functional-logic programming languages and the application of reflection in rewriting logic, particularly with the Maude system. Here's a paraphrased version of the highlighted excerpts:

Firstly, to calculate expressions where choices must be made at call-time, as in the case of `c(0)? c(1)`, one computes an interim result before proceeding with functions `f(c(0))` or `f(c(1))`. Only specific combinations, `d(0, 0)` and `d(1, 1)`, are considered valid outcomes for these operations, as opposed to `d(0, 1)` or `d(1, 0)`, which do not correctly represent the value of `f(c(0)? c(1))` in this context. Languages such as Toy or Curry handle such situations by adopting the call-time choice semantics.

Maude, a programming language leveraging rewriting logic, stands out through its reflective capabilities and the provision of a systematic meta-level module enhancing its flexibility. This design allows for sophisticated metaprogramming applications by treating specifications and computations as standard data. Maude also includes a module for handling input/output interactions with users.

Despite its ability to execute expressions and conduct metasearch on state spaces, Maude's default strategy of evaluating all possible terms can be inefficient due to the highly non-deterministic nature of the transformed programs. To address this, an on-demand rewriting strategy has been developed for Maude system modules, improving performance by evolving only those terms necessary for expression execution. This approach is a significant step toward realizing on-demand execution for general rewrite theories.

The paper also refers to a tool that implements the PST transformation, enabling simulations of plural semantics using standard rewriting. Users can view the transformed module and switch from a default depth-first to a breadth-first strategy, ensuring the correctness of computations by employing guards that check for pattern matches. The tool facilitates computing final values of expressions under plural semantics, confirmed by evaluation variants leading to the expected results.

In summary, the paper covers technical details of functional-logic programming computation, the unique advantages of Maude's reflective capabilities for metaprogramming, strategies for efficient term rewriting, and a tool for implementing and verifying the plural semantics in a transformed module.