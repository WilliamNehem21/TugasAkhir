The paper discusses a model for strategic rewriting in computer programming, which introduces the concept of applying rewrite strategies to subterms of a term. This is accomplished by using the newly introduced strategy operator, denoted as `2()`. The operator applies a given strategy to all immediate subterms of a term.

For the framework to be useful across various programming languages (hence "generic"), it requires the definition of generic types that are not dependent on specific language signatures. The focus in this paper is on the generic type called `tp`, which represents all type-preserving strategies. These are strategies that do not change the type of the term they operate on.

Integrating the generic type `tp` into traditional many-sorted type systems requires another new operator, the left-biased type-driven choice operator `&`. This operator applies the left strategy (a many-sorted strategy) if the type matches the given term, and if not, it defaults to applying the right strategy (a generic default).

The paper is divided into sections. The first recalls untyped strategies and basics of traversal. The second discusses traditional types for strategies, while the third introduces the generic strategy type `tp`. The fourth section details how to construct typeful inhabitant strategies using the choice operator and modify existing typing rules to fit the generic context.

The authors demonstrate the usefulness and practicality of their type system from the perspective of strategic programming, particularly emphasizing its disciplined yet flexible nature for managing generic traversals in programs.

The research was supported by a project focused on generating program transformation systems and benefited greatly from collaboration and discussions with various colleagues and groups in the field.

The paper then provides a concise overview of the strategic rewriting approach, describes the new strategy combinators and the notion of strategy definitions, and discusses the relevant implementation issues.

In conclusion, the paper underscores the practical application of the type system and notes the possibility of integrating these concepts into existing rewriting calculi to enhance their capabilities, especially in the realm of generic traversals. The work hints at the potential expansion beyond the scope of the paper, including the consideration of type-changing strategies and further integration with existing frameworks.