The Timed Concurrent Constraint Programming (TCCP) language is an extension of the Concurrent Constraint (CCP) paradigm, which offers a framework for modeling reactive and embedded systems. In the work described, the authors introduce StructGenerator, a C++ implemented system that generates a symbolic representation—referred to as a TCCP structure—of a TCCP program's behavior.

- StructGenerator takes a TCCP program's specification and produces a TCCP structure.
- Unlike Kripke structures, TCCP structures account for the CCP model's unique aspects, including the store-as-constraint concept.
- The TCCP model replaces the typical notion of computational state with a conjunction of constraints, naturally compressing the search space for model checking and potentially enabling further optimization techniques.
- A model-checking algorithm specific to the TCCP framework, accounting for the differences from classical approaches, has been proposed.
- StructGenerator automates the construction of the TCCP structure, introducing improvements over earlier methods and taking advantage of the CCP's flexibility in handling streams and constraints.

The paper:
- Describes the TCCP language and its extensions from CCP, illustrating how temporal elements and the handling of negative information are integrated.
- Explains the importance of a global clock for synchronizing agents in TCCP and how the TCCP store works as a growing repository of constraints, recording the accumulation of information over time.
- Clarifies the semantics of the TCCP framework, emphasizing that the absence of information in the store does not imply its negation.
- Details the TCCP structure's symbolic representation, where states contain atomic constraints and are labeled with execution steps.

The authors present two practical examples to showcase StructGenerator's functionality, including a microwave oven controller and a scheduler. They conclude by discussing future work, which involves integrating new agents, adapting the model-checking algorithm to this structure, and improving the interface for visualizing node relationships.