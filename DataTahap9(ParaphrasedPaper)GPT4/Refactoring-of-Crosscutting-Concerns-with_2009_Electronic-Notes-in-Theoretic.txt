Aspect-Oriented Programming (AOP) introduces new programming constructs aimed at enhancing the modularity of design by separating concerns more effectively. It achieves this by encapsulating concerns that affect multiple modules of a system—referred to as crosscutting concerns—into new modular units known as aspects. Transitioning existing object-oriented (OO) systems to aspect-oriented designs is anticipated to improve their maintainability.

There's an increase in research on identifying and refactoring crosscutting concerns within software maintenance. However, integrating these techniques for improved refactoring based on concern analysis is still understudied. Additionally, work on classifying common crosscutting structures with metaphors and their management for maintenance activities such as refactoring is in its infancy.

This paper contributes in three main ways: It defines initial metaphors to describe crosscutting concern structures; it presents refactoring approaches for modularization of concerns identified as octopuses or black sheep using these metaphors; and it empirically evaluates these approaches using concerns from 23 design patterns to assess the accuracy of heuristic classification and the applicability of metaphor-based refactorings.

The paper reviews existing OO refactorings extended to be aspect-aware and those aimed at extracting and modularizing crosscutting concerns. It also identifies shortcomings in existing aspect-oriented refactoring approaches and illustrates these with an example.

Some limitations of OO refactorings in the context of aspects have been noted, such as changes to join points which could affect the interaction with aspects. Precondition-based refactoring and role-based refactoring have been proposed to address these limitations, but issues in terminology consistency and bad smell detection remain.

The paper presents a metaphor-driven heuristic classification system to identify crosscutting concerns, followed by detailed refactoring steps to modularize them using aspects. It also proposes new metaphors to describe structural patterns of crosscutting concerns and suggests using aspect-oriented refactorings to refine the internal structure of aspects for better reuse.

The research methodology includes evaluating the heuristic system using design patterns and applying the refactorings. It reflects on limitations of previous approaches and proposes extensions to existing metaphors. The study's results show a promising direction toward integrating concern classification and refactorings, with the heuristic classification having an accuracy rate of approximately 85%.

Going forward, the paper outlines plans to develop a refactoring tool based on the presented approach, further automate the refactoring process, and refine the method of classifying and refactoring crosscutting concerns. It emphasizes that the approach presented here, while initially applied to design patterns, is meant to have general applicability across various domains and programming languages.