High-level replacement systems (HLRS) are a refinement of graph transformation systems that extend their scope beyond just graphs, encompassing transformations across various types of structures. The essence of HLRS is in defining rules that govern how one structure within a certain category can be substituted for another, using morphisms specific to that category. As these systems evolve, they may undergo changes which can be minor (adjusting individual rules), combining elements (merging two systems to create a more extensive one), or comprehensive (overhauling a subsystem with a new one). Different methods of modification are studied, and research has yielded some findings on how changes to the system impact its original behavior. These findings are beneficial in many applications, from manipulating graph representations, to the schematic depiction in visual languages, to the modeling in high-level algebraic nets.

Originating as an expansion of graph grammars to include other structures, HLRS also harked back to the goal of adapting Chomsky's grammar for strings to graphs. Graph transformations have proven useful in depicting the progression of systems expressible via graphs. One algebraic approach centers on using categorical constructions known as pushouts from graph morphisms to substitute one graph with another within the overall structure. This concept of replacement has been embedded in a rule-based methodology for modular system design where each rule embodies the interface of a module.

In implementing HLRS across various domains, a particular category C is chosen along with a class of morphisms M paramount for setting up the rules. For instance, within the graph category, morphisms in M are characterized as injective graph morphisms, while in the algebraic specifications category, they are injective strict specification morphisms. While this summary touches on the foundational concepts of HLRS, more comprehensive details are available in specialized literature on the subject.