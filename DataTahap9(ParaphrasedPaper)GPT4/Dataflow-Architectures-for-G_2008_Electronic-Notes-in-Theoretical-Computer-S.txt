Our proposed design methodology for Globally Asynchronous Locally Synchronous (GALS) systems is as follows: Starting with a system description, we identify the system behaviors as concurrent processes communicating asynchronously, typically using unbounded FIFO buffers, in keeping with the Kahn Process Network (KPN) model of computation. We validate the KPN model by examining its decidability properties, such as compositionality and determinism. We then use architectural exploration to select a suitable GALS architecture informed by design constraints such as area and communication latency.

GALS components operate under their own independent clocks, which can be generated internally through local oscillators or obtained from an external source. We adopt a new GALS architecture that harnesses handshake signaling via valid and stall signals timed on component clocks, with each signal between components sporting its own valid and stall control lines.

An Input Interface Process with Barrier Synchronization (IIP) is key to our architecture, managing the synchronization of all valid inputs before a computational block can execute. Each IIP has a dual-buffer setup for each input to cater to the possible overflow that might occur when stalling the upstream components. The IIP operates in two stages, first collecting input data and then providing the inputs alongside valid signals to the computational block and stall signals to the source components.

This proposed architecture introduces more valid and stall signals compared to traditional handshake-based GALS designs but potentially reduces the frequency of component pauses between executions. Stalling occurs only when inputs are absent or output FIFO buffers are full, creating a backpressure mechanism to preserve data integrity during communication. This FIFO-based system improves throughput and parallelism relative to the handshake counterpart and is similar to static dataflow architectures with enhanced token storage on the channels.

We introduce a storage structure that keeps track of inputs and outputs. Divided into address and bound parts, the structure maintains pointers to data locations and allows for tracking the maximum store-able valid data from a starting position. This mechanism aids in managing data locations efficiently.

The data organization within the lookup storage uses 32-bit words with the most significant bit indicating the validity of the data. The Storage Mapping Unit (SMU) is responsible for associating input and output fields with the correct storage locations and extracting the validity bit for each piece of data.

In summary, the proposed GALS design methodology is a combination of modeling, validation, architectural exploration, and enhanced interface processes, all aimed at ensuring a robust and efficient asynchronous system operation.