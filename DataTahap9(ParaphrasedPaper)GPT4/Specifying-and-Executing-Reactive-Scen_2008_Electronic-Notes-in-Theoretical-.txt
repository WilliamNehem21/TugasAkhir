The paper discusses a programming approach for creating random systems by imposing constraints on chaotic behavior, rather than using a deterministic language with random procedures to achieve non-determinism. This method involves a relational language rather than a functional one, contrasting with traditional models for non-deterministic systems, such as input/output automata, process algebra, and concurrent constraint programming. Unlike these models, which are typically used for system analysis, the paper's proposed language, Lutin, is designed to be user-friendly for writing executable scenarios, although predicting specific behaviors or their probabilities may not be possible.

The paper provides an example where a program receives a boolean input (c) and a real input (t) and produces a real output (x) that either approaches t or zero based on the value of c. Atomic reactions defined by constraints create scenarios through temporal combinations of these constraints. The language uses operators that allow for nondeterministic behavior, stemming from initial conditions or system failures.

To avoid user frustration and restrictions, the paper introduces the "well-founded loop principle," whereby loops must contribute to progress and cannot just iterate without effect. Lutin's parallel composition is synchronous, where each branch's constraint must be satisfied collectively.

The paper further illustrates the behavior of the system over an extended period, showing a mostly correct response to inputs until an eventual breakdown. The environment in which execution occurs includes variable storage and handles constraint resolution, random selection, and weight evaluation, although specific capabilities may depend on the implementation.

The solver used is adept at resolving constraints involving boolean algebra and linear arithmetic, and emphasizes fairness in solution selection. The paper acknowledges the challenge of uniformly selecting solutions from a polyhedron and offers various approximation options.

Finally, the paper outlines future work that includes adding the concept of signals (events) to handle intermittently available values and introducing mutually tail-recursive traces, which would permit a new programming style with explicit concurrent, hierarchical automata.