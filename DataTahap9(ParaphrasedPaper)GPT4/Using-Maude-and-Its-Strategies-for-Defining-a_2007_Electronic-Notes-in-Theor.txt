In simplified terms, the academic paper describes how processes and communication in a concurrent computing environment are modeled using the Maude language, focusing on the Eden programming language kernel.

When a process "p" evaluates an expression "e1#e2", it spawns a new child process "q", along with two communication channels. Process "p" sends the value of "e2" to "q" through the input channel. Next, "q" evaluates "e1" with "e2" and sends the result back to "p" via the output channel.

The structure of Eden is formalized within Maude by defining types (sorts) to classify syntactic elements. There are sorts for variables, channels, expressions in a weak head normal form (WHNF), expressions not in WHNF, and a superset of variables and channels. Additionally, the paper addresses how the process constructors are designed to handle a process identifier, a heap, and two counters for managing the creation of child processes and variable renaming.

The paper outlines properties such as the union operator used for forming systems and references strategy rules that recursively apply transformations within a system until there are no processes left to evaluate. One specific strategy favors parallel execution.

A function called "nf" identifies any dependencies that might block execution due to required communications. As an example, after applying a local rule to a given expression, dependencies are tracked through an updated heap.

The authors suggest that by selecting definitions for certain functions, like "nf" and "et", different semantics for Eden can be experimented with by means of modularity in the Maude language.

Additionally, the paper discusses the need to integrate measures and update rules which count processes, work done, and thread parallelism within the environment. Rewrite rules, attributes, and strategies are employed to manage these metrics as processes execute and interact.

In essence, the paper details a way to express and simulate the concurrent execution of an expression in Eden and track its performance using the Maude system.