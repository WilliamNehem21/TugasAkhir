The paper describes an automated method for analyzing the behavior of real-time programs when operating under different scheduling algorithms. These algorithms are represented by generic timed automata, which are essentially templates that can be filled with task-specific data. Once instantiated, the network of timed automata can then be automatically scrutinized using the UPPAAL model-checker to ensure they comply with desired correctness properties and to evaluate various scheduling metrics. The process assumes that task-related information, such as worst-case execution times, periods, deadlines, and priorities, has already been established.

Traditionally, understanding how programs are scheduled has relied on methods like Rate Monotonic Analysis (RMA), which can be conservative in its predictions. While RMA's predictions are safe, they can sometimes be overly pessimistic. The paper aims to overcome the complexity of creating timed automata models for scheduled tasks by implementing generic automata to reflect the common behavior of tasks under specific scheduling strategies.

The main goal of the paper is to demonstrate how these generic automata, defined by parameters related to the tasks' timing and scheduling strategies, can aid in the analysis of task behaviors. Two specific scheduling strategies are examined: the Immediate Ceiling Priority Protocol (ICPP) and the Earliest-Deadline-First (EDF) algorithm. The paper assumes a uniprocessor environment where tasks switch between ready, running, and waiting states, depending on the scheduling policy.

Furthermore, the paper details the process of defining automata templates with parameters in UPPAAL and creating networks by instantiating these templates with actual data. The authors also describe a method for scheduling analysis that involves generating generic models for ICPP and EDF scheduling that includes task overheads. An idle task is presumed to keep the processor in constant use.

The paper emphasizes that any time one task starts running, another must stop to maintain system balance. If scheduling is not possible, UPPAAL will flag a potential deadlock. The paper concludes by discussing how to model communication via protected objects without rendezvous and suggests strategies to reduce the state space for more efficient model checking. These strategies include adjusting the model for less frequent clock checks and incorporating scheduling theory for better analysis.