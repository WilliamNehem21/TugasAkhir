This paper advances prior research by presenting a method for compiling higher-order imperative languages into digital circuits, while incorporating concurrency, a crucial aspect in hardware compilation. Drawing on an established game semantics model, the paper simplifies verification of the compilationâ€™s correctness. The compiled designs are asynchronous event-logic circuits, aligning naturally with the asynchronous nature of the language model.

A caveat arises because the semantic model is inherently asynchronous, while the compiled circuits are synchronous, for practical reasons. This discrepancy has resulted in challenges for ensuring compilation correctness, which were previously tackled in ad hoc ways. Consequently, the synthesis of synchronous circuits from asynchronous specifications is now considered a distinct research topic.

Within this context, any 'sci term' stands as an 'scc term', provided all its free identifiers are bound to 1. Despite that, an 'scc term' may not always be an 'sci term'. Since 'sci' is a subset of 'scc', its fully abstract game semantics model is suitable for defining the semantics of the compiled circuits. The 'scc' game model derives from 'idealized concurrent algol' (ICA).

Game semantics involve moves representing fundamental observable actions of a certain type, which can be distinguished as moves by either the opponent or the proponent, and as questions or answers. These moves are defined by enabling relations that establish causality, adhering to conditions such as questions needing no enabler if posed by the opponent, and the enabler and enabled moves having opposite party labels, with only questions being enablers.

Observable actions for commands consist of initiating 'q' and completing 'a' a command, while for boolean expressions, actions involve evaluating 'q', followed by producing a true 't' or false 'f' result. Variable actions include querying 'q' or updating 'wt' for true and 'wf' for false, with 't' and 'f' being the respective responses and acknowledgments 'a'.

The game model for 'sci' can be portrayed with a subset of event logic elements: exclusive or (xor), 'c', 'call', 'wire', and 'fork'. Each move corresponds to a port in an arena, with inputs being 'o' moves and outputs being 'p' moves. Assumptions about environmental behavior ensure that the compiled circuits do not generate failed traces, ensuring correct interaction under the model.