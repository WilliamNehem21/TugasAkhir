Novice programmers often struggle with managing their visual attention while using program visualizations, and this article outlines an ongoing effort to enhance the user interfaces of such visualization tools to help students with visual attention challenges. A proposed interface improvement called the "dynamic evaluation tree" aims to simplify the interface by reducing the number of separate windows, allowing users to focus their attention on a more confined area of the screen.

Current visualization tools typically have a uniform UI design, with standard components and placements that appear to be based on convention rather than design principles tailored to the users' needs. Not all the windows in a visualization tool are always necessary; for example, algorithm visualization tools, which operate at a higher level of abstraction than individual expressions, may not require an evaluation window at all.

The study suggests that expert programmers are better at processing information shown across multiple windows in a visualization tool. They adjust their visual attention strategies during a session, initially focusing on the code window and later integrating the code with other window presentations. Novice programmers, however, generally adopt one of two visual attention strategiesâ€”either frequently switching attention between different windows or focusing exclusively on one window.

Considering that visualization tools are primarily designed for novice programmers, UI design should cater to their specific visual attention strategies. One alternative method for displaying data dynamically would be to use tooltip windows that appear when the mouse hovers over an expression in the code window. This approach could be applied broadly, but it has limitations, such as when evaluations need to be displayed through user interaction with a "step" button.

Other UI features, such as using curly brackets to display expression values within code or highlighting executed lines, can help convey program execution as a whole. The dynamic evaluation tree concept, adapted for functional programming languages and offering solutions for handling function calls in imperative languages, could be particularly beneficial for novice programmers.

The article suggests that after implementing the dynamic evaluation tree, an eye-tracking study should be conducted to assess its effectiveness in aiding visual attention strategies. Students would still need to monitor the code and memory windows, and future research could explore whether tools like the dynamic evaluation tree can guide students toward developing improved visual attention strategies.