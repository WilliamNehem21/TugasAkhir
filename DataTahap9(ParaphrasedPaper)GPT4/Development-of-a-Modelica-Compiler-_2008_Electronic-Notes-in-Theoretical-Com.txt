The academic paper discusses the development of JModelica, an extensible compiler for Modelica, using the JastAdd compiler construction tool. JastAdd employs declarative features like reference attribute grammars and rewriting to facilitate the creation of extendable compilers. The paper elaborates on the process of building a JModelica prototype and how it efficiently resolves Modelica's complex compilation challenges.

The paper comprises six sections: an introduction to JastAdd, an overview of Modelica, an account of implementing Modelica's key features via JastAdd, a performance comparison of JModelica with other Modelica tools, and finally, conclusions and future work directions.

JModelica aims to address the limitations of current hand-coded compilers which lack the necessary extensibility for advanced developments. JastAdd, written in Java, generates Java code and is open-source. It shapes an object-oriented abstract syntax from a specified grammar, creating a Java class hierarchy with constructors and APIs for tree traversal.

The behavior of abstract syntax tree (AST) classes is defined using aspect modules and intertype declarations. JastAdd blends declarative and imperative coding, allowing attributes to define a public interface used by Java methods. For example, the construction of the flat model in JModelica is performed imperatively, utilizing the attribute APIs from declarative name and type analyses.

Furthermore, the paper touches on Modelica's background, its introduction in 1997, and its development to support complex systems' simulation, which pre-existing domain-specific languages couldn't efficiently handle.

A special mention is made of Modelica's mechanism for expressing instantaneous events, such as bouncing in a "bouncing ball" simulation.

JModelica's performance was checked against two other Modelica tools, Dymola and OpenModelica, through comparing the flat descriptions each produced. The design used in the JastAdd Java implementation guides the normal object-oriented name analysis in JModelica.

The paper also explains Modelica's type system, which isn't formally outlined in its specifications, and how it addresses subtyping in a safe manner. It details the implementation of environmental modeling within the compiler, allowing for ordered lists of modifications and reference-based context acquisition.

The authors reflect on their experience with JastAdd for building JModelica and its advantages in handling complex semantic rules, name analysis, type analysis, and the flattening procedure. The project underlines the benefits of using a declarative approach for extensibility.

Lastly, the authors highlight the swift development time of the JModelica compilerâ€”a noteworthy observation showcasing the suitability of JastAdd for efficient compiler development.