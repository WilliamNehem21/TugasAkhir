The academic paper discusses the importance of software testing, with a particular focus on selecting appropriate test inputs. Tools such as Pex and CUTE are mentioned for automatically generating test inputs for .NET applications and C programs, respectively. The paper highlights the evolution of techniques for automated test data generation, including symbolic execution, which uses symbolic rather than concrete values for inputs to track program execution alternatives.

The practice of concolic testing, which intertwines symbolic execution with concrete program execution, is spotlighted for its value in automatically generating test data. In this approach, the constraints of program paths are collected, with some replaced by concrete states to simplify the path constraints. The paper describes the parallelization of the concolic testing process, where the path space is dynamically divided among different computing units, allowing them to work without global synchronization.

A deterministic task scheduler is implemented to manage the computation of path constraints across multiple computing units efficiently. The scheduler faces challenges due to the varying conditions of path trees across different programs and the unpredictability of computation times across worker iterations.

Experiments were conducted, integrating the described algorithm into CAUT, a unit testing toolkit, with mixed results in performance due to disparities in path lengths which caused imbalances in task allocations across processors. The research was partially supported by different funds and grants, as acknowledged at the end of the paper.

Overall, the paper introduces a parallel algorithm for concolic testing, aiming to optimize the performance of software testing by better utilizing hardware resources. The implementation is designed to reduce synchronization overhead, thereby potentially improving testing throughput by leveraging additional processing power.