In our discussion, we explore the integration of Secure Information Technology Data Rights Management (SITDRM) with Trusted Computing (TC) technologies, and explain how TC can be utilized to craft a secure terminal based on these principles. We detail the creation of a prototype secure terminal, highlighting the challenges faced during its software development. We finalize by illustrating the incorporation of this prototype into a larger SITDRM system.

Objective 2 is to shield sensitive data from unauthorized access, ensuring that it remains encrypted when not actively in use. The secure management of memory where decrypted data resides is crucial, paralleling the safeguarding of cryptographic keys.

To secure data, we employ encryption, using a unique key (CK) for each data item. Access is granted through licenses containing CK, which is encrypted with the terminal's public key (PKT). By issuing licenses only to verified terminals, the safety of the data and its corresponding encryption keys is maintained.

The Trusted Platform Module (TPM) enables secure operations, including signing, encryption (binding), decryption (unbinding), and verification using RSA keys generated by the TPM itself. Such keys are generated and utilized within the TPM, an approach that bypasses any chance of them being exposed in the main memory.

Our objective with the TPM is to stringently manage the handling of secret keys and plaintext data within a SITDRM terminal. The TPM's limitations as a cryptographic processor prevent it from being an ideal medium for trusted data transfer to output devices; therefore, we focus on employing it within the structure of a specially designed SITDRM terminal.

The client software we created offers a straightforward user interface for server connection, license and digital content downloads, and the use of rights granted by these licenses. This client software extensively utilizes the TPM to secure its operations.

While our prototype demonstrates key aspects of TPM functionality, we have not yet achieved secure memory management due to limitations of our development platform, which relied on a TPM emulator and did not provision for isolated process memory, leaving potential for memory disclosure attacks.

The SITDRM enterprise resolves these issues by implementing role-based access control, pairing each role with distinct key pairs and leveraging a public key infrastructure for the verification of all user and role public keys.

When creating TPM keys, one must designate their purpose: signing, binding or general use. However, inconsistencies can arise when these keys, specifically signing and binding keys, are used with external software or if the key creation process lacks specific encoding details, leading to unexpected default behaviors as set by the TPM's compliance guidelines.

Lastly, the integrity of a terminal's trust level somewhat hinges on assumption without a proper public key infrastructure in place for credential distribution. In the absence of manufacturer-created credentials, trust in our certificates must be taken at face value until a robust infrastructure is established for credentials verification.