Creating distributed systems is complex due to concurrency issues and distribution concerns, such as node availability and communication delays, which are crucial for an application's success or failure.

Model-checking is crucial for early evaluation of non-functional traits like system availability and performance, since not all properties can always be assuredâ€”in such scenarios, assessing probabilities of properties' satisfaction is key.

Stochastic processes, particularly Markov chains, are used in computer science and engineering to model interactions with different probabilistic behaviors. These chains are state-based and memoryless, meaning future states depend only on the current state. Continuous-time chains use exponential distributions, while discrete-time chains use geometric distributions for the memoryless property. Analyzing a Markov chain gives the probability of each state at equilibrium.

The paper introduces stochastic analysis of graph transformation systems by tying probability distributions to rules, which allows the creation of a Markov chain for analysis using current tools.

The structure of the paper is outlined, with sections covering the OBGG model, token ring network example, stochastic automata network (SAN) characteristics, OBGG extension, OBGG-to-SAN translation, example analysis, and final comments.

Object-based systems are specified by graph grammars, and the paper introduces how these specifications are used for object-based systems. The token-ring protocol, which manages network access, operates by passing a token around stations on the ring, enabling a single station to transmit at a time.

In SAN formalism, systems compose of interacting automata, behaving independently or dependent on each other. SANs, similar to Markov chains in application, offer component-wise model construction with optimized state-space solutions. This paper focuses on continuous-time SANs with a simpler definition, as not all features are necessary for the paper's goals.

SANs define events for automata synchronization during execution. Event synchronizations and associated distribution probabilities allow SANs to analyze steady state probabilities, with SANs evolving through synchronizing events that coordinate multiple automata transitions.

Stochastic object-based graph grammars (SOBGGs) are then defined, using hypergraphs with edges (depicted as boxes) connecting to vertices through tentacles (thin lines). SOBGG behavior is derived from rule applications on a start graph, with state changes modeled by rules and associated occurrence rates. This results in a continuous-time Markov chain representation of the system state probabilities.

To build SANs, the paper outlines constructing automata states from the class graph and initial graph of a SOBGG. In the token ring network example, with four nodes and a static topology, a reduced number of states are actually reachable in comparison to the total theoretical state space.

Possible changes in rates could predict network throughput for various scenarios, intending future work to define rates reflecting real networks. Current analysis requires knowledge of the generated SAN model, but future work aims to enable analysis through SOBGG abstractions without exposing the underlying SAN, which is currently required to interpret results.

Case studies have shown that translating SOBGG models to SAN can lead to a large theoretical state space but a small, practical reachable state space. Tools like PEPS calculate the entire state space before assigning state probabilities, restricting model size. Development of a new version that directly computes the reachable state space will facilitate stochastic analysis of larger models.