This paper discusses property-oriented testing, a specialized form of conformance testing that targets certain properties of interest within a system, usually focusing on reactive systems. Conformance testing is used to verify that a system's implementation matches a formally verified specification. Traditional conformance testing may result in impractically large or even infinite test suites when dealing with complete specifications. Property-oriented testing, however, hones in on specific, perhaps critical, properties dictated by the specification to guide the testing process.

The goal is to create test suites that are efficient and practicable by concentrating on these selected properties. Multiple methods for test case selection have been suggested, where model-checking algorithms help generate test cases based on temporal logic properties, which form the basis of the testing objectives. This paper provides an overview of two main approaches to property-oriented testing: testing based on labelled transition systems (LTS) and on symbolic transition systems (STS).

Test suites are evaluated for their ability to differentiate between different system behaviors. An e-complete test suite can distinguish all behaviors that exhibit a certain property, while e-exhaustive and e-sound test suites offer partial checks—either detecting only non-exhibiting or only exhibiting implementations, respectively.

The paper presents theoretical foundations of conformance testing and test purposes, discussing LTS-based methods for property testing, including LTS's definition and the ways to generate sound and e-complete test cases. Specific attention is given to a tool named TGV, which synthesizes conformance test cases for non-deterministic systems by utilizing on-the-fly verification techniques.

Symbolic transition systems are introduced as an extension of LTS that handles data symbolically with first-order logic, allowing a more abstract representation that mitigates the state explosion problem. The paper discusses tools like STG that apply IOSTS models in the context of symbolic test case generation, and how this approach improves state space management and human readability of test cases.

Lastly, the paper highlights the challenges inherent in both LTS and STS approaches—LTS must manage state explosion, while STS must address computability and decidability of data specifications during test case generation. Test case selection remains a critical issue, with research ongoing to develop optimal selection strategies to manage the vast potential number of generated tests to ensure practical testing.

The paper concludes by emphasizing the potential interplay between specific property types and the strategies used to solve the inherently difficult problem of generating effective and feasible test suites for reactive systems.