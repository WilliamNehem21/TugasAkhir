Transformation systems, which use rewrite rules, are effective for mapping a single feature from a source language to a target language but struggle with complex transformations where one feature maps to multiple, dispersed features. Such local-to-global transformations are difficult to implement, creating tangled and tightly coupled rules that hinder maintenance and evolvability. The paper identifies four major issues with this approach and proposes an extended rewrite rule system to alleviate these problems, shifting towards a more automated and maintainable implementation process.

The paper discusses the challenges of integrating secondary rewrite rules and the necessity of precise scheduling to avoid conflicts. It emphasizes the importance of minimizing coupling within the implementation for easier evolution and maintenance, similar to other software development methodologies.

The authors propose a solution comprising a new architecture that supports semi-automatic composition, using abstract algorithms and mechanisms, which simplifies the transformation process. They suggest using unique identifiers and additional information to manage the complexities involved in relocating and integrating non-local elements.

Evaluation of the architecture, a discussion of related work, and a conclusion section are included. The proposed system allows parts of the transformation to be automated, especially for domain-specific languages (DSLs), while maintaining the necessity for manual intervention for complex cases.

The paper concludes that by decoupling the implementation and utilizing information-rich identifiers for guidance, the maintainability and evolvability of the transformations are greatly improved. This modular approach is validated through various experiments, including the development of DSLs, confirming that the new system offers a more sustainable path for handling local-to-global transformations.