The paper discusses an approach that relies on functions as the core elements in developing modular systems. These functions encapsulate behavior, distinguished by their external (data and control flow) and internal (implementation) properties. They interact with their surroundings through data signals and control locations, enabling the exchange of information and control.

The paper distinguishes between two types of function composition: disjunctive and conjunctive. Disjunctive composition considers the use of functions alternatively, while conjunctive composition involves using functions simultaneously. Neither simple disjunctive nor conjunctive composition is sufficient on its own to handle certain complexities, which necessitates a more advanced combination strategy that can manage priorities among functions.

Components are defined by their interfaces, with specified reactions to any given series of input messages. Unlike a component, a function does not need fully defined behavior; it can be partially specified, meaning there might be inputs with no defined response by the function. Functions are used for modularly specifying components with complete input behavior, adapting formalizations to include functions with partially defined behavior, especially when combining them.

In the development process, functions facilitate the assembly of complex functionalities from individual reactive behaviors. Although functional descriptions simplify combining, reusing, and reasoning about functionalities, the final implementation often utilizes more constructive descriptions, which ensure input enabledness either implicitly or explicitly.

According to the paper, the definition of power position controlled windows is more applicable for use with modern implementation tools. In the stages of development, the functional approach is preferred initially, while more constructive descriptions are better suited for later stages. Additionally, establishing an implementation relation between functions is critical for a cohesive development process.

For automatic proof support, the paper employs WS1S (Weak Second Order Monadic Logic with One Successor), which is supported by the model checker MONA. Functions are defined by predicates over trace sets, and the operators earlier discussed can be directly used, facilitating compositional trace set construction. Similarly, the implementation relation is a relation on trace sets, for which MONA can provide evidence or counterexamples.

In conclusion, the paper advocates for a functional modular development approach using basic transitions and compositional methods like disjunctive and conjunctive composition. This approach offers benefits such as simplified reasoning about behavior, reuse of modules, and the ability to construct variants of reactive behavior. Automatic proof supports helps assure correct implementation of modular behavior using more constructive descriptions.