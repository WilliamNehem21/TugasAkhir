Software specifications are often written in symbolic language or semi-formal diagrams like UML, which many find difficult to understand and use. Creating and refining these specifications is also challenging due to the complexity of the syntax. A more accessible notation for formal specification and reasoning could therefore be beneficial to a wider audience, which could be offered through diagrammatic notations.

In these diagrams, intersecting curves indicate separate sets, while a curve within another denotes a subset. Types are shown as labeled rectangles, and dots, or "spiders," signify the existence of elements within sets or act as variables when labeled. Arrows depict binary relations and their direction indicates the mapping from one element or set to another.

An example using these conventions presents three sub-diagrams: The first shows two separate sets, A and B, with a spider in A as a free variable connected by arrow f to a spider in B, indicating that f is a function from A to B. The second sub-diagram has two disjoint subsets, C and D, within A, but no spiders, indicating that C and D together make up A. The third sub-diagram illustrates a type and uses a distinguished alphabet for fully abstract sets. An arrow labeled r maps each element from one set to a subset in another.

Diagrammatic notations provide visual representations of set theory concepts like intersection, disjointness, and containment, which offer usability advantages over symbolic notations due to their intuitive set-theoretic semantics. For instance, the transitive nature of the subset relationship is mirrored by the transitive property of syntactic containment within diagrams.

Diagrams can also offer inferential benefits, where certain information is immediately apparent without the need for further explanation, known as "free rides." These benefits have been recognized and supported by empirical research from various scholars.

While there is considerable software support for symbolic notations, the support for advanced visualizations like those suggested here is less developed. However, research and tools already exist for automated generation and layout of diagrams such as Euler diagrams, and theorem provers exist for these and spider diagrams. Building upon this existing foundation would enable the advancement of tools for diagrammatic specification and reasoning.