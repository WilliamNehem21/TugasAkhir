This academic paper describes the methodology for modeling and verifying the behavior and communication of Body Control Modules (BCM) in automotive software applications.

The behavior of BCMs is characterized by discrete, reactive, and time-sensitive features. This calls for capturing the relationship between input and output, coordination across functionalities, and time constraints such as timeouts and deadlines.

The communication aspect covers the network structure, the exchange of signals, and protocols between an Electronic Control Unit (ECU) and its environment, commonly using automotive bus technologies (e.g., CAN, LIN, FlexRay, and MOST).

The paper also discusses architectural language elements like function prototypes, connectors (both delegate and assembly), and flow ports with specific data types. These components enable a structured approach to software development.

Timed automata, an advanced formalism encompassing time variables and timed invariants, model the temporally dependent behavior of systems. The paper opts for the UPPAAL variant of timed automata that allows using bounded integer variables and clocks to model complex conditions and behaviors.

From a software perspective within an ECU, signals are the primary interface with the environment. Different hardware and media are abstracted as transformers that convert environmental physical states into software-recognizable signals.

The paper utilizes the Generic Modeling Environment (GME) for setting up design constraints and model interactions, allowing the integration of tools like UPPAAL for model simulation and verification.

The proposed methodology has been applied to a BCM project, highlighting the necessity of tool support to manage complex models involving numerous functions, ports, and signals.

The simulation and verification involve transforming models into UPPAAL specifications, merging structural and behavioral elements. Channels and global variables in an UPPAAL specification correspond to the ports in the structural model.

The work builds on previous research in embedded system design (such as Metropolis), model-driven design (like the RCOS method), and component-based software representations. The authors adapt these approaches to automotive software development, choosing modeling notations like EAST-ADL2 that align with industry standards and effectively convey structure information.

Recognizing the limitations of using a single formalism for all aspects of complex software, integrated formal methods like CSP-OZ and its extension, CSP-OZ-DC, are considered for data structures, behavioral models, and timing properties. The paper employs timed automata and duration calculus formulas to respectively model the operational behavior and temporal signal value changes within the automotive software.

Finally, the paper references a body of related works, illustrating the evolution of component-based model-driven development in academia, specifically citing a paper by ZhiMing Liu, Charles Morisset, and Volker Stolz discussing the RCOS theory and related tool support.