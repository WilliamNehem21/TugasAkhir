Graph transformation systems, combined with certain rules, provide a computational model through which various structures can be expressed as graphs. This field, known as graph grammar theory, extends formal language theory by encompassing more complex structures in the form of graphs. Utilizing categorical principles, the algebraic approach to graph grammars was first introduced as the double-pushout (DPO) approach, due to its reliance on two pushout constructions within the category of graphs and total graph morphisms. Alternatively, the single-pushout (SPO) approach, uses one pushout construction in the category of graphs with partial graph morphisms and can handle both the addition and deletion of elements in a way that the DPO approach cannot, which is beneficial for distributed systems.

Graph grammars have been implemented for software system specification, where graphs represent system states and productions represent operations or transformations. Within the algebraic approach, concepts of parallel and distributed productions enhance the capacity to model concurrent access and synchronization in distributed systems.

The paper presents a structured methodology to represent object-oriented class structures through graph constructions that leverage order relations to depict inheritance relationships between objects and method overriding. Graph categories are used to formally define features typical to object-oriented languages like inheritance, aggregation, and system composition, with special colimits providing the semantics of these operations. Due to space constraints, this part of the paper does not include proofs, but the results are straightforward and can be verified independently.

To maintain mapping coherence when combining ordered sets with strict relations, certain restrictions are imposed. Upper sets of elements must be finite chains with a least and greatest element, ensuring that the strict relation structure is preserved upon set combination. Strict ordered sets and strict ordered functions constitute a category due to the closed and associative nature of strict ordered function composition.

Object-oriented systems are defined by classes with attributes and communicate through message passing. Graphs model these systems, with nodes representing class identifiers, hyperarcs for attributes, and services as methods. The paper describes an inheritance hierarchy reflected in the graph nodes' strict relationships, while hyperarcs' order structure represents the potential for derived objects to redefine inherited methods, providing a basis for dynamic binding semantics.

Class-model graph morphisms are restricted labelled hypergraph morphisms ensuring the coherence of order relations on nodes and edges, mapping elements from one state to another while preserving single inheritance structures. Graph compositions merge existing systems and subsystems, formalized to produce consistent results through modularity and the integration tools needed for systematic software development.

Finally, the paper emphasizes the importance of class-model graphs for specifying object-oriented systems in a familiar and maintainable format. Characterized by their alignment with standard programming practices, they offer direct translation between languages and ease of use for programmers. By structuring these specifications within category theory, the paper ensures precise and unambiguous definitions of object aggregation and class inheritance as colimits, exploiting categorical research and theory.