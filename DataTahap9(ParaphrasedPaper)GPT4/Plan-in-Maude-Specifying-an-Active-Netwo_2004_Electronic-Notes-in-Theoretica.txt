This paper discusses the programming of active networks using a language called PLAN, which is a model of mobile computation that expands on the imperative functional programming paradigm, allowing for recursion and remote function calls. PLAN ensures interaction between the local environment and mobile code through resource-aware programming, leading to guaranteed termination of programs.

The authors have specified PLAN in Maude, a rewriting logic language, by combining various techniques such as syntax-based semantics and CINNI calculus for binding and environments, as well as representing concurrency and distribution inherent in the active network concept. Maude also helps to execute and analyze PLAN programs, search, and model-checking capabilities, and facilitate proofs for both specific programs and the general properties of the language.

The paper delves into the specific features of active networks, where nodes can be fully programmable, in contrast to traditional fixed-function routers. Plan, an imperative functional language with features like remote function execution and awareness of computational resources, is described in detail. Remote function execution involves sending functions as chunks in packets to be executed on remote nodes.

The authors describe their Maude specification, which covers the syntax of the PLAN language, models of the basic network concepts like addressing and routing, and the semantics that reflect the concurrent nature of active networks. The paper also explains the use of the reduction machine in specifying the operational semantics for functional programming elements within PLAN and introduces representative examples for main types of transitions in active networks.

The explanation includes how the global network state is modeled and how processes are created when packets arrive at destination nodes. The resident data services on each node and the strategies for packet emission, delivery, and routing are discussed.

In the end, the authors highlight the importance of testing specifications, using the development process they followed for the Maude model of PLAN as an example of iterative refinement and abstraction to achieve a useful representation for both practical and theoretical work.