The paper addresses the enhancement of Maude, a programming language and high-performance system, by incorporating on-demand strategy annotations, which allow for a more flexible and efficient computation of normal forms in program execution. In Maude, local strategies that lack some indices pose a risk by failing to correctly compute normal forms. As an example, the authors demonstrate how evaluating an expression using Maude version 3 can lead to issues.

To address these problems, the authors have introduced new commands (norm and eval) to Maude that enable techniques for effectively executing Maude programs with on-demand strategies. They discuss how the integration of negative and on-demand indices can enhance Maude's strategy annotations to improve behavior and ensure program termination.

The upgrade leverages the reflective capabilities of Full Maude, an extension of the core Maude system that includes object-oriented modules and a module algebra, enabling the introduction of language features that are straightforward to use. The authors outline the process of using meta-level functions to define new commands and explain how the command red, which performs evaluations, can be redefined to handle on-demand evaluations using metareduceondemand, accounting for negative annotations.

The paper elaborates on the technical implementation details of processing strategies, the use of meta-level functions for matching and rule application, and the execution order for subterms under negative annotations. Additionally, the authors discuss modifications to Full Maude required to implement the extended functionality without needing new commands.

They describe the input/output process within Maude via a predefined loop-mode module and how Full Maude manages its database, modules, and interactions using object-oriented notation.

The paper also examines the transformation of the command norm, necessitated by scenarios where the red command cannot achieve the correct normal forms due to missing annotations. The solution involves performing a layered normalization of output from the on-demand evaluations.

The authors conclude that integrating these features into Full Maude was straightforward and conducive to rapid development, given Full Maude's flexible and extensible architecture. The improvements make Full Maude a powerful metaprogramming tool and facilitate the construction of formal tools within its environment.