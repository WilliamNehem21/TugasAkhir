Proof General, a widely utilized interface for numerous interactive proof systems, is the only option available in some instances and not significantly different from alternatives in others. Its limitations stem from its evolution from basic command-line interfaces. Proof General employs ASCII text (with some Unicode or TeX-like markup support) for both input and during interaction. Its proof-checking process is linear and only allows a single focus point, which complicates document management as users must manually undo and redo changes in different document sections.

As theorem provers have become more powerful and computers are better equipped to handle multi-threaded applications, there's a push to move away from this single-threaded, sequential user interface tightly coupled with the proof-checking process. Modern provers offer multiple focus points, and the idea of running several instances concurrently is now feasible. Text editors have also advanced, moving beyond simple ASCII layouts, as exemplified by the scientific WYSIWYG editor TeXmacs.

Communicating changes within documents now utilizes specialized commands that are asymmetric across the display and broker (the middle-man process). An alternative and potentially more efficient approach uses the standard, symmetric XUpdate language, enabling bundling multiple changes into a single transactional packet.

In the updated PGIP protocol, the broker must map document changes (communicated through XUpdate) onto changes in the prover state. This task is more complex with a multi-focus model compared to the simpler single-focus model. Menu systems for theorem provers have evolved to compute submenus on-demand to avoid delays, whereas traditional menus pre-calculate all possible options, which can be resource-intensive.

Menu interactions involve executing actions that modify the formal proof and propagate these changes through the broker to the display. The display may incorporate an XUpdate patch directly or rely on the broker to compute and forward the new document version, along with instructions for closing menus.

If conflicts arise that cannot be automatically merged, the broker must forward the merged document including conflict descriptions for user resolution.

For displays with sophisticated layout options, translators must be developed to accommodate these systems; for example, simplifying Word 2007 documents by removing formatting details before sending them to the broker and then reapplying layout heuristics based on broker annotations upon return.

The infrastructure of PGIP 2 enables mapping languages like Coq into other interfaces, allowing for simultaneous work in different systems. This concept of multiple views is already familiar in Integrated Development Environments (IDEs) for programming, where a single file can be presented in various ways across different windows and synchronized either continuously or at specific points during interaction.