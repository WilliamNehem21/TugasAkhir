Our methodology is to approximate up to tri-element associativity. However, this complication arises only when executing two protocol sessions simultaneously. Messages in the protocol move between strands through an intruder who learns each message upon receipt. Initially, the intruder has no knowledge, but can be equipped with any message it could know from the start by defining such strands.

Maude-NPA creates new grammar rules from remaining paths using four heuristics (H1, H2a, H2b, H3) aligned with two overarching strategies (S1 and S2). Specifically, heuristic H2b identifies partial information that could be obtained by the intruder and removes it from the proposed language. This involves introducing constraints on variable sequences.

The process repeats across three stages until either all paths are accounted for, at which point a language is successfully defined, or it is no longer possible to generate new rules, leading to a failure in defining a language. There is a risk of non-termination with a perpetual addition of new rules.

Finally, our tool detects the starting state of a protocol, with 'm' as a message variable, 'n' for nonce, and 'k' representing intruder knowledge. The differentiation of 'm' from nonce is critical for potential confusion attacks. The intruder knowledge variable 'k' plays a key role in the backward reachability process and is thus tailored precisely. Detailed explanations and examples are provided to illustrate grammatical failures and non-termination scenarios.