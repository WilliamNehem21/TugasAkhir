This academic paper discusses the integration of modularity from an object-oriented approach with the efficient execution and analysis provided by the Maude system. By utilizing an innovative tool, MooAT, the paper describes the creation of syntax-independent specifications for programming languages. This approach combines Object-Oriented Action Semantics (OOAS) with Constructive Action Semantics (CAS) to enhance the modularity of both denotational and operational semantics. In OOAS, semantic functions describe the meaning of language phrases through actions that define their denotation. The paper acknowledges that while action semantics provide good reusability, they lack syntactic support for creating libraries of reusable components. To address this, the authors propose a modular approach to action semantics, where modules of semantics allow for the isolated view of specification elements and their composition.

The paper is structured to introduce the Maude MSOS tool and provide overviews of OOAS and CAS. MooAT notation and implementation details are explained, followed by a discussion on how CAS can be applied to OOAS using MooAT, an extension of the Maude system. The syntax adopted by MooAT is derived from the Modular SOS Definition Formalism (MSDF), and despite some differences due to the Maude parser, it remains fairly similar to MSOS specifications.

Within OOAS, a programming language's semantics is depicted as a class hierarchy rooted in a predefined class called 'state'. The state class implements attributes and operations used in the specification of other classes, which are its subclasses. These subclasses then gain visibility to the state class's attributes and operations.

A library of OOAS classes has been proposed for improving reusability by allowing for the construction of programming language concept libraries. The paper further introduces the concept of constructive action semantics, emphasizing its role in reusable and syntax-independent formal specifications of programming languages. Constructs in programming languages are mapped to basic abstract constructs to foster reusability across different languages.

The paper concludes by presenting MooAT as a notable implementation of OOAS that leverages both the MSOS provided by MMT and Maude's class specification capabilities. MooAT allows for the specification of OOAS classes and offers the potential for describing syntax-independent specifications of programming languages. The authors acknowledge the contributions of MMT authors and appreciate the feedback from anonymous reviewers and financial support from the LSFA 2007 organizers.