An Erlang program is a collection of modules, each containing function definitions. In the case examined, the system comprises a single module initiated by the `start` function, which is the sole function exposed to other modules based on an export declaration. The `start` function triggers the creation of three new processes, one locker and two clients, via the `spawn` built-in function. This function takes the name of the module, the function to run, and its arguments, to create a new process.

Clients take on an inverse behavior compared to the locker. They send a request to gain access to a shared resource. The `self` built-in function provides the client's process identifier (PID), which the locker uses to interact with the client. The client waits for an "ok" message before using the resource, and releases it once done.

To analyze concurrent systems described by terms evolving via transitions, there are rules of deduction to apply transition rules, which outline local changes in the structured states of the system, and consider the overall system behavior.

Each process is ascribed a transition label, indicating the transition type leading to the current state, and an evaluation environment recording value bindings to Erlang variables, updated through assignment or pattern matching. Code syntax ensures all variable occurrences are within the scope of a binding operation.

Processes, whether active or inactive, are combined using a parallel composition operator that is associative and commutative, forming a concurrent process system. For coherence, each process must have a unique PID, and so a process system is deemed well-formed if all PIDs are unique.

The paper further addresses an integral concept of Erlang, asynchronous message sending, where messages are added to the recipient process's mailbox, with processes even able to send messages to themselves.

Process generation is executed using the `spawn` function with two inputs: a function atom and an argument list. The emerging process invokes this function with the provided arguments, beginning with an empty mailbox and environment.