The paper discusses the integration of aspect-oriented programming (AOP) and design-by-contract (DbC) principles within reactive systems. It introduces a new aspect language, Larissa, as an extension to the synchronous programming language Argos, aiming to manage crosscutting concerns and encapsulate contractual specifications.

Aspect-Oriented Programming (AOP) enhances a base language by allowing concerns that span multiple modules, which are not easily modularized, to be encapsulated as 'aspects'. These aspects can be woven into a program at defined points, called join points, specified by pointcuts, with the specific code to execute at these points outlined in an advice.

Design-by-Contract (DbC) for reactive systems maps traditional object-oriented contractual methods onto a reactive context by partitioning specifications into assumptions (inputs) and guarantees (outputs), using observers to monitor these without altering behavior.

This paper presents a methodology to apply an aspect to an existing contract resulting in a new derived contract (C') such that any program (P) fulfilling the original contract (C) would, when combined with the aspect (ASP), fulfill the new contract (C'). The approach is validated with a moderately complex example.

The essence of Argos, the base language, comprises input/output automata, the synchronous product, and encapsulation, with semantics rooted in trace semantics. Larissa extends this with two types of advice to modify program behavior at join points either by transitioning to existing target states or by introducing Argos programs as intermediary code.

The paper details the transformation of contracts into non-deterministic automata (NDAs), weaving aspects into these NDAs, and then determinizing the result. It also examines an example of a tramway door controller as an Argos observer, proving its compliance with safety contracts and the efficiency of verification via aspect-oriented modular approaches over direct controller verification.

In conclusion, the paper proposes a methodology for understanding the impact of aspects on contracts within reactive systems. This approach allows for verification against contracts during development, even before a final implementation is available. It also presents the advantage of not requiring re-verification of woven programs as long as the updated base program continues to fulfill the established contract, and supports modular verification for potentially larger programs.