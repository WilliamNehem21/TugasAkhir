This academic paper discusses the challenges and considerations in developing middleware systems using a service-oriented architecture (SOA) and proposes improvements to the process through a study of architectural principles and a methodological approach. It highlights the problems associated with evolving platforms, complex lifecycles, increased development complexity, and the vague definition of SOA concepts. The authors suggest studying the architectural principles that guide SOA designs, focusing on integrating business and organizational features, and adopting a model-driven approach to streamline SOA development.

The paper presents a UML (Unified Modeling Language) profile for service-oriented architecture at the PIM (Platform Independent Model) level, which is complemented by a corresponding metamodel. A case study, GESIMED—an information system for managing medical images—is used to illustrate and validate the model.

The authors differentiate between inner (internal to the system) and outer (external) service providers, as well as simple and composite services, with composite services having distinct coordination policies (orchestration or choreography). Services interact through contracts, which are illustrated using a metamodel concept called 'ServiceContract'.

Additionally, the paper argues for separating the notion of a service contract from the service itself to maintain flexibility and independence of service relationships. Pre- and postconditions for service communication are expressed with OCL (Object Constraint Language) as restrictions on the ServiceContract element.

The representation of messages in SOA does not include message format, which depends on the implementation technology and is left for PSM (Platform Specific Model) level models. Non-functional aspects like semantics are recognized, but are not a primary focus in the presented architecture model.

By comparing with other related works, the authors critique the limitations of various SOA modeling approaches that rely too heavily on web service principles or fail to support model-driven development (MDD) methodologies and automated processes.

The paper concludes by emphasizing the importance of model-driven approaches, specifically the MDA (Model-Driven Architecture) framework, in advancing SOA software development. By separating models into different levels of abstraction and defining transformation rules, MDA can facilitate SOA-based solutions. The authors acknowledge that architecture design is critical for SOA and propose their UML profile as a step towards a more effective development methodology, including future work on formalizing the concepts in an architecture description language (ADL) and representing them across various service execution platforms.