The research paper discusses the challenge and importance of formally verifying the correctness of entire computer systems, using the example of an academic operating system microkernel. It highlights the increasing need for comprehensive verification due to the critical role of computer system correctness, and how successful verification of individual components is shifting focus towards system-wide assurance.

The study outlines the use of formal verification methodologies, as developed in the Verisoft project, to assess the correctness of microkernel primitives coded in C with inline assembly. The paper defines these correctness criteria, explains what it means for a primitive to meet them, and offers a general approach for proving their correctness, including case study details.

The microkernel is designed according to the communicating virtual machines (CVM) model which separates the kernel's abstract interface and its lower-level functional implementation, requiring assembly language for handling processor registers and user processes. Primitives are written in a restricted version of C, called C0, which simplifies verification while eschewing features like certain arithmetic expressions, function pointers, and untyped pointers.

The paper then delves into the intricacies of the CVM semantics, memory management, and the transition between user and system modes during computation. It touches upon the formal specifications required to link the abstract kernel with its lower-layer implementation to create the concrete kernel, ensuring it operates correctly on the physical machine.

Verification is performed using the Isabelle/HOL theorem prover, where the source code of primitives is translated into C0 semantics. The verification strategy involves decomposing theorems into separate lemmas for the C0 code and embedded assembly instructions, thus managing complexity and ensuring consistent machine states post-verification.

The authors demonstrate their verification approach by analyzing a 'copy' primitive, which is crucial for process management and interprocess communication (IPC). The primitive's specification must reflect the intended effects on the modelâ€™s user processes, the concrete kernel, and the physical machine, with the verification confirming these effects under the correct preconditions.

In summary, the paper presents a methodical approach to verify computer system components using formal specifications, decomposition into lemmas, and simulation relations, with the goal of extending this robustness to all parts of a system for pervasive formal verification.