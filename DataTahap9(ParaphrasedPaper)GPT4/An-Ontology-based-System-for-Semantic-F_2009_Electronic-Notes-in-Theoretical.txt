This paper presents a system developed in Haskell that provides ontology-based, approximate filtering for XML data, enabling extraction of pertinent data and exclusion of unnecessary content from XML documents. The system utilizes a declarative language to define XML patterns and ontology queries for syntactic and semantic filtering criteria. Users can access the system through a web application featuring a user-friendly graphical interface, and the paper includes practical examples demonstrating the efficacy of the filtering approach.

Recent years have witnessed considerable efforts in developing query and filtering languages to manage the abundance of information in XML documents. Although W3C standards like XQuery and XPath exist for querying XML, numerous alternative proposals have been advanced. Programming languages like XCentric and functional languages like XDuce and CDuce have also emerged, focusing on exact matching of XML documents without considering semantics.

In this context, this paper advances a novel methodology that combines approximate pattern matching with ontology reasoning capabilities to enable semantic filtering of data. Unlike existing systems like DigXcerpt, which only perform exact query matching, the proposed system affords greater flexibility by ranking query results based on computed similarity degrees.

The paper describes how the filtering engine and ontology reasoner are linked through an extended version of the DIG interface, a standard API for description logic systems used by several ontology reasoners such as Pellet and RacerPro.

Additionally, the Resource Description Framework (RDF) has been employed to endow XML data with semantic annotations. While RDF complements XML data, the reasoning power afforded by more complex description logic formalisms accessible through the DIG interface surpasses that of RDF annotations alone.

The structure of the paper includes an introduction to the DIG interface languages for modeling ontologies and queries, an overview of the proposed filtering language, a description of the XPhil system architecture, a brief look at the web interface for system testing, and a concluding section. Examples illustrate the definition of ontologies, querying using the DIG formalism, and how the system applies filtering operators and tag selectors in finding approximate matches.

The paper concludes by discussing conditions for pattern searches in XML documents and provides examples illustrating the application of the proposed system in searching properties within an XML document containing academic information.