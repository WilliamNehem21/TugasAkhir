The paper discusses the introduction of a tactic calculus, which enhances the system of open terms by enabling the definition of proof-search procedures as terms within that calculus. Unlike the underlying calculus, this new tactic framework introduces constructs like unification, failure handling, and recursion. These enhancements facilitate interactive proof construction, ensuring the process is sound by relating results back to the open term calculus.

Soundness is established in two ways: tactics that evaluate successfully yield a well-typed result, and the theorem establishes a clear connection between a prover's state before and after executing a tactic. This ensures that solving a goal through a tactic is not simply achieved by adding new axioms arbitrarily but is rooted in formal reasoning.

The paper continues with a discussion of meta-variables and their instantiations for unknown values, suggesting these meta-variables have declarations in the form of 'm[x1: a1 ... xn: an]: a' and can be instantiated by instances 'm[t1 ... tn]'.

One significant aspect of the tactic calculus is that it permits tactics to be recursively defined without constraints that ensure termination. The rationale is that mandating termination would lead to incompleteness, and formulating a termination guarantee criterion in the presence of unification constraints is challenging.

Tacticals are explained as mappings that transform proof states by solving and adding meta-variables created by tactic terms. The basic form of a tactical is one that applies a tactic term to a current goal, managing the instantiation and introduction of meta-variables accordingly. Other tacticals deal with composition types, failure, naming, etc.

Due to space constraints, the paper does not elaborate on the semantics of tacticals but provides an overview of the tactic application tactical's intended semantics necessary for the ongoing discussion on tactic terms' semantics.

The paper touches on the evaluation of defined tactics, emphasizing the requirement that tactic arguments be well-formed before being processed further. Finally, the authors acknowledge the influence of pure pattern type systems (PPTSs) by Barthe et al., noting similarities and differences—particularly in instantiation and matching—to their own work, suggesting that their approach may have broader, non-local effects due to its use of unification over pattern matching.