In this paper, we expand our previous research by exploring how time can be integrated into multiset-based coordination languages, specifically focusing on relative time. Building on earlier work, we use the "two-phase" model found in real-time programming languages such as Lustre, Esterel, and Statecharts. This model operates in two phases: during the first phase, elementary actions or statements happen instantaneously, and the same is assumed for composition operators. The second phase allows time to advance by one unit only when no further actions can be executed or when all components engage in a special timed action. Despite its simplicity, this approach is quite effective for simulating reactive systems.

Existing proposals for incorporating time into coordination-like languages often emphasize relative time and have been applied to variants of the Linda language. For instance, time has been integrated into the concurrent constraint paradigm by pinpointing moments of computational quiescence—where no new information emerges—and by incorporating a mechanism to delay computations by one unit. At each quiescent moment, the dataspace is cleared. This paper advances the concept further by introducing an operation that can check and respond to the absence of information in the same time unit and by extending the delay facility to a construct that defines the continuous truth of a statement after a specified time, leading to the tcc and tdcc languages. 

Other works have also delved into the expressiveness of timed constraint systems, exploring extensions of tcc languages with replication, recursion, static scoping and providing decidability results alongside various encodings—not following the modular phased embedding concept discussed in this paper.

The paper is structured as follows: Section 2 presents the two language families being examined. Section 3 introduces a framework that allows for the comparison of language expressiveness, refining the notion of modular embedding to fit the context of time, resulting in what we call "phased-embedding." Section 4 analyzes how the expressiveness grows with the introduction of the primitives tell, ask, get, nask, and delay in each language family. Section 5 compares the two families of languages. The paper concludes with Section 6 summarizing the findings.

For comparison, we simplify notations for subsets of communication primitives in the srcom language to denote by m(x) a language with communication primitives from subset x. Two examples are given: m(x) with x={ask, nask} involving pairs that only consider the presence or absence of tokens, and m(x) with x={tell, get} including only pairs where each positive token aligns with a negative counterpart and vice versa, plus additional positive tokens.

The paper concludes that the two families of timed coordination languages based on the two-phase functioning approach successfully incorporate relative time. The first family extends Linda-like primitives, while the second employs multiset rewriting as previously used in the Gamma language.