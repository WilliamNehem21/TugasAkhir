The growing number and diversity of mobile device users necessitate the development of new testing methodologies to minimize software faults and enhance the quality of mobile applications. Muccini et al. emphasize that mobile application testing is influenced by several factors including connectivity, resource constraints, user interface, context awareness, and diversity in devices and operating systems.

One promising approach for quality assurance in software development is model-based testing (MBT), as outlined by Utting and Legeard. MBT automates the generation of test cases based on a model of the expected behavior of the software under test (SUT), offering benefits like automatic test case creation, effective fault detection, and time and cost savings in testing.

Test execution involves applying the generated test cases to the SUT, followed by analyzing the outcomes and taking corrective steps, with the potential for automatic validation if the test model includes both inputs and outputs.

Despite ongoing research, evolving technologies and platforms create new challenges for mobile application testing. Muccini et al. focus on the need for specialized testing methods that consider mobile-specific characteristics. Within this realm, researchers are developing strategies based on characteristic mobile application faults.

For example, Maji et al. analyzed failures in Symbian and Android platforms, Yang et al. explored a testing technique for Android app delays, and Amalfitano et al. introduced a tool called MobiGUITAR based on MBT and finite state machines for generating test cases from Android app interfaces.

In the cited study, participants were split into groups to generate diverse test models, which were then applied to the SUT using the Robotium platform and an Android Virtual Device (AVD) to simulate a real device environment.

The study aimed to evaluate the efficacy of MBT in mobile contexts and presented promising results. However, it highlighted potential limitations, such as the choice of MBT techniques and tools, raising concerns about representativeness and generalizability.

Nonetheless, the study found that MBT has benefits like automation potential, fault detection, cost reduction, and positive reception among professionals and students, while also noting challenges in test modeling and the need for expertise in specific tools.

To further advance automated mobile application testing, future research could focus on simplifying the generation of concrete test cases and comparing MBT's fault detection capabilities, time efficiency, and costs against manual tests. Planned future work includes evaluating fault detection rates, test design and execution times, and learning curves for tools like Robotium.