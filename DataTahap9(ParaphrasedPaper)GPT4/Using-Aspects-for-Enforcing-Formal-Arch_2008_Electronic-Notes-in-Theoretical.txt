The academic paper discusses issues with traditional control codes for constraints in software systems: they are manually written, tangled with functional code, and not always aligned with formal specifications, leading to lack of modularity and reusability, and challenges in adapting to specification changes.

The paper is structured into sections covering the Z specification language, Petri nets, and aspect-oriented programming. It presents the authorsâ€™ approach for managing architecture evolution in component-based applications using these tools. A case study on a collaborative authoring system is examined, and related work and conclusions are provided.

The Z specification language uses set theory and predicate logic to define system states and changes. The paper proposes using aspect-oriented programming (AOP) to separate the control code from functional code, enhancing code modularity and adherence to formal specification. AOP divides an application's code into base functionalities and aspects addressing crosscutting concerns, with aspects being composed of join points, pointcuts, and advices defined in AspectJ.

The authors' approach allows control constraints to be defined without modifying functional code by modeling new Z specifications and Petri nets. This modularization with AspectJ and the verification provided by Petri nets and the Z/Eves tool improves system design and maintenance.

The collaborative authoring case study shows how the approach can handle roles like writers and reviewers and enforce constraints to prevent issues like overlapping document sections, with control aspects managing architectural changes.

The paper's main contribution is the aspect-oriented and formally verified control of architecture evolution in component-based applications, enhancing modularity and reliability. Future work includes exploring more expressive pointcut languages and automatic aspect generation.