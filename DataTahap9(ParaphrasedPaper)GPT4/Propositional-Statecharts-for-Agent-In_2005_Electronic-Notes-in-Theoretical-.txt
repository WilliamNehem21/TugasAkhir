As the new millennium began, software agent research emerged as a thriving area in the field of computer science research and development. The concept of software agents holds the promise of mimicking human problem-solving capabilities through collaborative and negotiating behaviors, potentially automating tasks that presently require human involvement. A key aspect of this promise is the capacity for agents to communicate with purpose and coordination.

To facilitate effective agent communication, researchers like Greaves and colleagues have pinpointed three essential requirements: a standard message-passing infrastructure, a shared understanding or ontology, and a uniform agent communication language. Additionally, for more than the simplest interactions, agents need a shared knowledge of the interaction rules, which are usually defined using interaction protocols.

Agent UML, as an extension of the widely adopted Unified Modeling Language (UML), offers a framework particularly suited for representing these interaction protocols. Agent designers are inclined to adopt Agent UML because of its familiarity and the established success of UML in designing complex systems. This familiarity helps reduce the likelihood of designers avoiding standard protocols due to difficulties with unfamiliar notations. Moreover, Agent UML benefits from UML's extensive research and proven effectiveness.

Conventional software engineering uses UML for broad system overviews without detailing implementation specifics. UML contains the Object Constraint Language (OCL), which provides formal constraints but focuses on preconditions and postconditions related to object modeling. Full implementation details are typically omitted from UML to maintain its clarity and because a design stage isn't meant to provide a complete system specification.

The propositional statechart approach presented in this paper is based on David Harel's statecharts and extends the use of traditional Euler diagrams to offer a graphical methodology. Statecharts are chosen for their efficient, hierarchically structured representations and their clearer depiction of interaction protocols when compared to other methods like finite state machines.

The propositional statechart methodology has been refined to eliminate orthogonality and introduce intuitive yet precise labelling conventions to represent protocols unambiguously. By forgoing orthogonality, the complexity associated with combining the states of autonomous agents into a cohesive protocol is avoided, allowing the representation of each agent's sub-protocol using simpler statecharts. This simplification aids in the verification and implementation processes by focusing on the properties of simpler charts and their interactions.

To unambiguously identify states within a statechart, a robust labelling system is essential, where state names include their hierarchical context when represented in a "flattened" form, preventing duplication of state labels.

The approach to representing interactions circumvents dual hierarchies proposed by Harel and Politi for activity diagrams by considering information processing activities as distinct processing states with interactions expressed through the composition of primitive agent actions. Events within the propositional statecharts are therefore delineated by these compositions, which include testing actions generalizing the auxiliary conditions of statecharts. The protocol's events are captured in a formal dynamic logic resembling a language derived from ANML.

In summary, the paper discusses the importance of software agents at the turn of the millennium, outlines the requirements for effective agent communication, points to the advantages of using Agent UML and statecharts for protocol representation, and introduces a modified statechart methodology to clearly and unambiguously define interaction protocols.