This paper presents various examples that demonstrate algorithm creation through the 'lazy thinking' approach, showing how the resulting algorithm is influenced by the chosen algorithm framework. It details how the lazy thinking algorithm synthesis technique is implemented within the Theorema system, where the synthesis of example algorithms is fully automated, requiring no user interaction.

In this paper, all formal demonstrations will be formatted using Theorema’s system and syntax, with the method implementation exemplified specifically in Theorema’s environment.

It’s noted that for any given data type, which defines the problem, practical experience indicates there is a limited number of valuable algorithm schemes to include in a comprehensive library. Despite the multitude of algorithms, only a select few fundamental algorithm schemes exist for each data type. These core schemes offer basic strategies for problem-solving, with numerous variations and combinations of these schemes applied to sub-algorithms.

Furthermore, the paper remarks on the second formula provided as a natural specification for the split functions, stating that when a tuple ‘x’ is divided by functions 'l' and 'r', and subsequently recombined through concatenation, the resulting tuple accurately comprises the elements of the original 'x'.