This paper provides a comprehensive PVS (Prototype Verification System) development for studying nominal unification. This includes detailed specifications for all relevant concepts and the formal verification of all lemmas and theorems described within the paper. The formalized content is accessible for download from the PVS theory repository for term rewriting systems.

The nominal unification algorithm, initially specified in Isabelle/HOL, is also presented as a system of transformation rules. These rules iteratively simplify unification problems and their associated freshness contexts. This method is conceptually attractive and facilitates the examination of key properties such as termination and solution uniqueness, but it is less suited for practical implementations due to the non-deterministic nature of rule application.

In PVS, permutations are represented as lists containing pairs of atoms. The 'act' function applies a permutation to an atom using a recursive process based on swapping represented within the permutation. The 'ext' function, meanwhile, extends the effect of permutations to terms by applying the 'act' function to atoms and accumulating permutations in 'suspensions'.

The paper also introduces a novel nominal unification algorithm that operates directly on terms without requiring transformation rules or integrating freshness concerns within the unification problem. The proposed function independently computes freshness contexts, offering an algorithm that is simpler and more closely aligned with traditional first-order unification algorithms.