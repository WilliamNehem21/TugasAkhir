This academic paper discusses the role of the Object Constraint Language (OCL) in model processing tasks related to software engineering, such as model checking, merging, slicing, and synthesis. The authors argue that while OCL is designed for expressing constraints on UML (Unified Modeling Language) models, it can also be utilized for a variety of model processing activities. However, OCL's inherent characteristic of being side effect free—meaning it cannot directly alter the state of a model—limits its ability to perform certain operations like transformations.

The paper introduces a model processing tool called XUMLi that leverages OCL in tandem with programming languages to process UML models. The authors emphasize that a combined usage of OCL and general-purpose programming is essential for effective UML model processing.

Additionally, the paper highlights the importance of primitive model operations that can be combined using higher-level composition mechanisms to create complex task flows. Practical use cases include checking model conformity to well-formedness rules or specific heuristics.

Regarding extending OCL's functionality, the paper explains that OCL has predefined types and offers methods for defining new operations and types to meet specific needs. Nevertheless, changing the language to permit direct modification of models is complicated and would require a thorough reevaluation of other language aspects.

The paper critiques general-purpose programming languages for being too broad for model processing tasks as they lack direct support for UML models, often resulting in verbose and complex code. In contrast, a domain-specific language, while more limited in scope, can provide more elegant solutions for the tasks it targets.

The authors describe their experience using OCL, noting its challenges in readability and clarity, while also acknowledging improvements in the transition from OCL 1.4 to OCL 2.0.

They present observations and potential areas for improvement in OCL, such as advanced navigation expressions like transitive closure, and the notion of enhancing OCL's portability and extension capabilities.

The paper concludes by reporting positive practical experiences with the proposed approach, noting that clear separation of OCL expressions for queries has led to better organized and maintainable code. Future work includes adopting UML 2.0 and further developing the OCL support within the Visiome environment.