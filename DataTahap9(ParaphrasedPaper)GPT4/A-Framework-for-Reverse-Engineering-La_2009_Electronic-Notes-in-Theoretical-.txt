For assessing the quality and maintainability of substantial C++ codebases, tools that can extract and present various aspects of the source code are essential. These aspects include architecture, structural details, code smells, and quality metrics. Presentation methods should allow for correlation of extracted facts to identify deviations and irregularities. SolidFX is an integrated reverse-engineering environment (IRE) created for C and C++ that facilitates code parsing, fact extraction, metric computation, and offers an interactive visual analysis interface similar to what is available in forward engineering tools like IDEs. It has been crafted to handle codebases containing millions of lines by enhancing existing code analysis and data visualization techniques.

This paper explains the design choices behind SolidFX, showcases its utility through real-world industrial codebases analyses, and shares insights from its application in evaluations related to maintainability, modularity, coding pattern identification, and complexity analysis.

In recent years, various tools have emerged focusing on static analysis to support program comprehension and maintenance as well as reverse and reengineering tasks. While there are several C++ static analysis and reverse engineering tools, few are robust enough to handle the complexity of industrial-sized C++ codebases and integrate features like metric computation and visualization for scalability and simplicity of use.

SolidFX is presented as an IRE that offers an interactive user interface and incorporates novel visualization techniques for scalability. It supports a range of analyses from variable level details to system architecture and permits third-party plugin integration.

The paper discusses the components of SolidFX: the parser, the query and metric engine, and the data views that layer over the fact extraction and analysis engines. The application of SolidFX is demonstrated on three real-life codebases, and the experience of using SolidFX along with feedback from users is shared.

C++ static analyzers are categorized into ‘lightweight’ and ‘heavyweight’ based on the extent of parsing and type-checking. Lightweight analyzers quickly offer partial information but don't perform complete parsing. Heavyweight analyzers, in contrast, execute comprehensive compiler-like steps and can yield more accurate and complete static information, though at a higher performance cost.

SolidFX’s heavyweight analyzer is optimized for efficiency. It filters unreferenced symbols, employs a custom binary format for output, and utilizes optimized parsing components. As a result, SolidFX maintains noteworthy performance and scalability, functioning more rapidly than some other heavyweight parsers and managing large codebases effectively.

The paper also explains the interactive visualization aspect of SolidFX, offering layered overviews combining visuals and metrics which are integral for code quality and modularity assessments. Moreover, SolidFX includes a data exporter to facilitate integration with external software analysis and visualization tools, allowing for extensive, explorative analysis sessions with stakeholders.

The future development of SolidFX includes the enhancement of static information extraction for in-depth safety analyses, as well as the implementation of ready-to-use analysis packages for added productivity and ease, such as compliance checks for specific coding standards.