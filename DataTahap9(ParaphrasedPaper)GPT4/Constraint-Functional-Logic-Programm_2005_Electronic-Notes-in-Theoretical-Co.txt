In this paper, the authors introduce a new framework named CFLP(D), which represents a logical and semantic base for lazy constraint functional logic programming that builds upon a given constraint domain D. Similar to CLP(D) in constraint logic programming, the D in CFLP(D) is designed to handle domain-specific data values and constraints. CFLP(D) programs consist of sets of constrained rewrite rules that govern the behavior of possibly higher-order and/or nondeterministic lazy functions over D. A key innovation presented in this work is the development of a Constraint Rewriting Logic, CRWL(D), which offers a declarative semantics tailored for CFLP(D) programs. This logic advances the formalization of constraint domains and program interpretations, enabling a versatile merging of domain-specific data values, user-defined data constructors, and a functional perspective on constraints.

Functional logic programming is the fusion of functional and logic programming paradigms, which began in the 1980s. An early effort in this field was the LOGlisp language proposed by J.A. Robinson and E.E. Sibert. However, initial attempts had certain limitations, such as requiring functions to be first-order and deterministic, and needing special constraints to simulate patterns in function definitions. Over the years, enhancements to CRWL have been developed to incorporate higher-order functions, polymorphic types, algebraic data constructors, specific types of constraints, and finite failure handling, although a generic extension that included constraint reasoning had not been established until now.

The paper continues to detail the structure of the proposed CFLP(D) scheme, explaining how programs are interpreted within this framework, and providing results about the existence of least program models. It presents the CRWL(D) logic, including an inference system and correctness results related to the model-theoretic semantics. The authors discuss the benefits of using a universal signature as opposed to multiple domain-dependent signatures and address the translation of first-order syntax into applicative syntax using curried notation, assuming left-associative application.

The objective of the CFLP(D) framework and the associated CRWL(D) logic is to encompass all CLP(D) languages in a unified and sophisticated manner. This work builds upon previous CFLP schemes while distinguishing itself through the kind of semantic framework it provides, accommodating potentially nondeterministic functions and functions that produce possibly infinite data structures, which are indispensable for programming but do not conform to the radicality condition set forth in initial definitions.