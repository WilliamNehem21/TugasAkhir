In a non-recursive context within ATS/LF, one can use the keyword "prfn" without specifying a metric when declaring a function with the name "proofname". For examples of proof construction in ATS/LF, refer to sources [4,5].

This work contrasts the higher-order representation of typing judgments, as utilized in Twelf, with first-order representations that explicitly use contexts. The Twelf method inherits the convenience of substitutions from the metalanguage and does not require a separate typing substitution lemma. A first-order framework necessitates the separate handling of typing derivations but simplifies the proof of meta-theorems using total recursive functions. Despite this simplicity, the complications involved with substitution concerning typing derivations are minimal compared to issues related to syntax binders, which are not encountered due to the way higher-order abstract syntax (HOAS) is used.

In ATS/LF, the advantages of HOAS are significant, especially when proving related lemmas. With HOAS, there's no need for concern about variable freshness or proving that substitutions are compatible with lambda abstraction in regards to the handling of the lambda case. An example given, Lemma 4.9, is represented as a total function in ATS/LF and is not detailed here for conciseness.

The paper reference concerning the strong normalization for System F was formalized by Altenkirch using the Lego system, which employed de Bruijn notation for representing both terms and types. The formalization in ATS/LF, despite including complete proof terms, is about half the length and less complex than Altenkirch's tactic-script based approach. This comparison highlights the benefits of the proof methodology adopted in ATS/LF.