The paper discusses the interpretation and formalization of simple abstract data types (ADTs) as introduced in Definition 2.1. ADT operations may have unspecified behavior when applied outside their preconditions. Within their preconditions, operations might always produce a correct post-state (must terminate) or might do so but are not guaranteed to terminate (may terminate).

Further, the paper explores ADTs with lifted operations, where only semantics derived from lifting simple ADTs' operations are considered. When dealing with data types over lifted state, the well-known principles of forward and backward simulation apply â€“ these guarantee that one implementation of a data type can be correctly replaced by another. However, the completeness of these principles is challenged when considering operation-lifted ADTs with a must-terminate interpretation; the limitation on valid operations in the ADT means that it's not always possible to create simulation chains.

To address this, the paper suggests loosening the operation restrictions, thus aiding in regaining the completeness property. The requirements for simulation in this context involve preservation of preconditions (Clause ii) and the strengthening of postconditions (Clause iii). 

The paper also distinguishes between data types over lifted state and those with lifted operations, emphasizing that these are different concepts and that applying definitions for one type (Definition 3.4) might not be equivalent to applying a corresponding definition for another type (Definition 3.9) on a data type over a lifted state.