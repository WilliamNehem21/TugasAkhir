In efforts to maintain high student retention in computing education, educators frequently use educational technologies designed to aid in learning specific topics. These technologies often employ automated visualization, utilizing intuitive graphics and animations to explain various concepts. Among the most common visualization tools are Program Visualization (PV) and Algorithm Visualization (AV) tools. PV tools are particularly focused on visually representing code execution, while AV tools deal with illustrating how algorithms operate.

Education in computing covers standard topics such as program execution, algorithms, and data structures, and these tools can be grouped into three categories: program visualization, algorithm visualization, and others. This paper discusses these tools and introduces Piton, an educational resource serving as the foundation for a proposed tool in the study.

AV tools extend to domain-specific algorithms and data structures, like network optimization, SHA-512, and matrix multiplication. The increase in AV tools led to the creation of AlgoViz, a digital repository that facilitates feedback between tool creators and users, allowing for measuring the success of AV tools.

Learning programming can be challenging, which has prompted the introduction of Visual Programming (VP) tools as an alternative to PV tools. VP tools simplify the programming process by allowing learners to focus on the algorithmic aspect of their programs, by using features such as drag-and-drop for code constructs, as seen in educational environments like Greenfoot, Alice, Scratch, Raptor, and SFC Editor.

Tools have also been developed to teach the characteristics of algorithms. Complexitor helps learners understand algorithm time complexity, which inspired the development of JCEL, a similar tool tailored for Java programming language and focused on simpler inputs. Greedex, designed to explain the characteristics of greedy algorithms, has been expanded into GreedexCol with collaborative features.

The paper proposes a combination of PV and AV tools called DS-Piton, designed for visualizing seven data structures using Python. DS-Piton builds upon Piton, enhancing it with feedback mechanisms, including constant on-top pop-up windows for attention, enlarged data structure displays, and optimized visualization details.

The paper then addresses the importance of unsupervised learning, enabling students to learn independently through online courses or assessments. When employing this method, ensuring easy access to the learning tool through e-learning and providing detailed tutorials is crucial for effective student engagement.

The study compares textbook-based learning, as a traditional method, with the interactive DS-Piton tool to determine the effectiveness of DS-Piton in helping students understand data structure implementation. Experiments involve a control group using textbooks and an intervention group using DS-Piton. Statistical analysis, such as the two-tailed paired t-test, assesses the impact of DS-Piton on students' scores and completion times.

Tailoring assessments to the pace of students, the paper also conducts experiments with slow-paced students using a modified set of questions and time limits to prevent overwhelming them. Finally, the paper discusses feedback, advocating for further optimization to accommodate lower-spec computers and integration with textbooks for a more holistic learning experience.

The study concludes that integrating PV and AV tools, as exemplified by DS-Piton, can be beneficial for both moderate-paced and slow-paced students. It leads to improved assessment scores, faster completion times for moderate-paced students, and the potential for extended completion time for slow-paced students. Overall, students respond positively, indicating that DS-Piton enhances their understanding of data structure topics.