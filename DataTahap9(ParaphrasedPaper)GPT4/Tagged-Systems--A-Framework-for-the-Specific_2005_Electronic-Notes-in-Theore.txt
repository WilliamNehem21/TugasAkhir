Some security properties are dependent on a system's history and cannot be established by examining its current state alone, such as when a process requires prior authorization to access a resource. Past approaches to determine whether an error exists in computation have involved augmenting process information with additional historical data—often in a bespoke, ad hoc manner. This tended to result in specific proofs that are difficult to generalize or reuse, due to the disconnection between 'enriched' and original semantics.

In our paper, we offer a systematic method to address these errors by introducing a framework using tagged languages and a unary relation on these tagged processes. We define these tagged languages through the quotient of the reachability tree derived from the original language’s computations. We show that any property identified within the tagged language corresponds to a property of the original language, allowing for a unified analysis framework rather than property-specific ad hoc semantics. Moreover, our method enables us to apply type-based analysis to ensure that no tagged states with errors are reached during computation.

Our system for tagged processes adheres to two key conditions. First, a correctness property ensures that the tagged system does not create new transitions—each must have an equivalent in the untagged system. Second, a completeness condition guarantees each original transition has a corresponding unique tagged counterpart, precluding the separate retention of multiple interpretations of past events.