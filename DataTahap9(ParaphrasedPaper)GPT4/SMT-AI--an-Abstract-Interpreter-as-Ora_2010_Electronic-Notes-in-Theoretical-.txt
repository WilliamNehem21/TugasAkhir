Recent years have seen significant progress in the use of SMT (Satisfiability Modulo Theories) solvers for verifying inductive invariants of systems, enhancing the ability to prove functional properties and scaling to address industry-level problems. However, these verification techniques often require human intervention to provide manually written lemmas that aid the analytical process and complete proofs.

The upcoming section of the paper will propose integrating various analysis methods, while the remainder of the paper will focus on implementing one of these methods in particular. Section 3 will outline the syntax of the tool's input language. The subsequent two sections will explore the analysis conducted by the tool, and Section 6 will delve into implementation specifics. Section 7 will illustrate the approach using an example, and the final section will summarize the paper and discuss future work.

The paper details a method that computes abstract semantics using iterative processes. This process starts with an increasing iteration to calculate a least fixpoint, incorporating a widening technique with thresholds, followed by decreasing iterations utilizing narrowing, aiming at a greatest fixpoint. The process assigns memory predicates MEMI and MEMU to manage system memory variables, focusing mostly on analyzing these variables' expressions based on their values from the previous computational step.

In cases where the result is false, the backward analysis considers the different subexpressions to determine the overall conjunction's value, using a join of backward evaluations. Similarly, disjunction operates with the interchange of join and meet operations.

This backward analysis aligns with guarding constructs in imperative programming languages like C and often requires iterations to improve precision. The information learned in one part of an expression can refine the results in other parts.

Using a widening operator to expedite convergence isn't an option because it could lead to an underestimation of the greatest fixpoint. The approach seeks an overestimation instead. The only feasible way to ensure timely convergence is to limit iteration count through a narrowing operator. Fortunately, convergence is typically achieved after few iterations in the expressions processed by the tool (see Section 3.3 for more detail).

Even with basic abstractions, such as intervals, the proposed analysis yields promising outcomes. By computing simple, non-relational properties like variable bounds, optimizations for the SMT solver can be madeâ€”for instance, employing bit-blasting techniques. The abstract interpretation tool described uses widening with thresholds to efficiently infer bounds, demonstrating an advantage over k-induction analyses, which might require increasing induction depth to impractical levels.