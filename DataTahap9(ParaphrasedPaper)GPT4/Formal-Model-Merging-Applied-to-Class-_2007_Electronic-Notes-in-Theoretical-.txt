In the software engineering domain, the integration of various software artifacts occurs in multiple contexts, such as object-oriented modeling, databases, XML schemas, ontologies, and aspect-oriented programming. These artifacts are often treated as models within a framework known as model management, using generic operators like 'merge' to integrate them in an abstract, reusable manner. This paper introduces an automated strategy for generic model merging that adopts the QVT (Query/View/Transformation) relations language to facilitate conflict resolution and maintain links between software components, emphasizing the integration of class diagrams.

The paper proceeds to discuss how in model management, transformation and integration tasks are applied to models using generic operators. These avoid the limitations of specific metamodels by focusing on model mappings, elevating the degree of abstraction, and enhancing solution reusability.

Drawing on experiences in model transformation and data migration, the authors are applying model management within model-driven development, creating a framework named MOMENT, incorporated into the Eclipse platform. This framework uses the Eclipse Modeling Framework (EMF) and incorporates basic operators like union, intersection, difference, and transformation. Complex operations are built by composing these basic operators.

In model-driven development, UML-based software development methodologies use traceable use cases to progressively refine system models. However, mapping from a use case model to an analysis model remains challenging due to the high-level abstraction in use cases.

Models are abstract representations of realities, underpinned by metamodels that define the languages used for modeling. The model merging process blends model transformation with composition, with the MERGE operator in the MOMENT framework allowing for customization with QVT relations language, enabling both enforcement and check-only transformations.

The merging process within MOMENT is grounded in the Maude formalism and uses parameterized theories for specifying the MERGE operator generically. Models represented in metamodel-specific algebraic specifications can be merged, with duplicates removed to ensure a valid, disjoint union.

'C' models result from merging models 'A' and 'B', necessitating 'refreshments' to maintain proper references. MOMENT accommodates manual intervention within Eclipse to refine the resulting merged model, which can still preserve traceability through other operators like 'match'.

Furthermore, the paper addresses the modeling of links between EMF models using the Atlas Model Weaver (AMW), which automatically creates model weavings that contribute to model merging.

Lastly, the authors note that the current MERGE operator does not account for the order of elements in a model, which is a limitation they seek to address in further research, along with the development of a QVT relations language compiler targeting Maude code.