The paper explains that assessing software quality is becoming increasingly important in the industry due to the lower total cost of ownership associated with high-quality systems. To offer insights into software quality to both managers and developers, a system for monitoring software quality is necessary. The Software Improvement Group (SIG) has created a tool called the Software Monitor for analyzing and reporting software system quality in real-time during development.

SIG has found that development teams often make guesses about the maintainability of their software but lack robust tools for accurate assessment. At the management level, there is a need for quality reviews, but often not the expertise to conduct them. The Software Monitor uses OLAP (Online Analytical Processing) cubes to store and aggregate various metrics, like the complexity and duplication of code. These cubes allow users to examine the software at different levels of detail, from system-level overviews to specific code units.

Moreover, the system employs a multi-dimensional model to organize and navigate the code. For example, in Java projects, it would identify package hierarchies and organize source files accordingly. OLAP cubes' aggregation capabilities also allow the presentation of historical data, supporting the monitoring of software quality over time.

The tool is equipped to work with various programming languages and can conduct static code analysis, for instance, in SAP systems through the built-in code inspector tool. This tool checks for adherence to naming standards, Unicode compatibility, and other quality measures.

The metrics consider various aspects of the code, like complexity and volume, in relation to maintainability, drawing from the ISO 9126 standard. This model indicates how different source code properties affect software maintainability. Metrics such as cyclomatic complexity and code duplication are categorized and displayed to show their distribution within the software system, helping identify areas of potential concern.

The paper also touches on the shortcomings of current solutions for measuring software quality, noting that most standalone metric calculation tools support a limited range of programming languages and are not designed to offer a holistic system-level overview. Additionally, metrics support in editors and IDEs is often limited and not conducive to sharing results across teams.

The Software Monitor aims to provide different views for different users depending on their needs and expertise, with the potential for a more dynamic and interactive interface for advanced users. Although the paper notes that some metrics, like fan-in, require different calculation methods depending on the context, at present, these are provided in separate reports rather than integrated into the monitor. There is also an ongoing effort to benchmark software projects and establish relevant metrics for comparison.

The paper highlights the tools and methodologies SIG has developed to provide a comprehensive monitoring solution for software quality, showing how the industry can benefit from such detailed and systematic analysis.