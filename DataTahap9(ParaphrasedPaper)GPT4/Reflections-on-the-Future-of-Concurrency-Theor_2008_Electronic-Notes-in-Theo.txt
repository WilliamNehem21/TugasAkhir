This paper provides an overview of the development and impact of concurrency theory in the industry, focusing on process calculi and exploring both its accomplishments and limitations. The review covers historical aspects, addresses current trends, and looks ahead to future directions.

The paper is structured into five sections. The second section highlights some of the significant contributions of concurrency theory, particularly process calculi. The third section examines key barriers to the widespread adoption of process calculi in industrial settings. The fourth section points out two major shifts in the software and hardware industries, discussing how these changes create fresh challenges and opportunities for concurrency theory. The paper concludes with a summary and final observations in the fifth section.

The authors draw a parallel between the discussions of purity versus application in mathematics and similar debates in concurrency theory, with one faction focused on theoretical elegance and another concerned with practical applicability inspired by real-world problems.

The article underscores the existence of many companies in need of reliable concurrent systems, such as those in communication protocols, distributed systems, hardware architectures, embedded systems, and security protocols, where concurrency theory can play a critical role.

In the United Kingdom, researchers have continued to work with their preferred process calculi frameworks, such as CCS and CSP. Over time, the definitions of these calculi, especially CSP, have evolved to resemble others like LOTOS, while also inspiring the development of new languages and tools, such as FDR2 and Occam.

The paper cites two significant design missteps that limit the user-friendliness of process calculi and consequently their broader adoption—issues that connect back to the fundamental questions posed at the start of the paper.

From its inception, concurrency theory has relied on formal models—abstractions that capture the essential elements of real-world systems important for understanding concurrency. Despite being widely used in many scientific disciplines, formal concurrency models have had limited impact on computer science as a whole.

One analogy presented is the universality of linear algebra across diverse industries. The authors suggest that process calculi were intended to be similarly general and expressive, able to model concurrent systems across various domains.

Lastly, the paper examines the increasing interest in asynchronous logic for circuit design due to its potential benefits over synchronous designs, which can be energy-intensive and susceptible to security weaknesses. Asynchronous designs, however, are more error-prone and require robust verification, a domain where process calculi and model checking tools could be invaluable in ensuring the correctness of such circuits.