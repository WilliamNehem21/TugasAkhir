The paper discusses a novel approach to reverse engineering, a process used to gain insight into existing software systems for various objectives such as problem diagnosis, analyzing potential impacts of changes, implementing functional enhancements, or transitioning to new technologies or design patterns. The authors observe that conventional tools used for reverse engineering often provide limited flexibility, offering predefined sets of information without much input from the user.

To enhance the reverse engineering process, the authors suggest a specification-based method that empowers analysts to determine both the content and the level of abstraction in their reverse engineering outputs, including interactive components during information extraction.

The proposed framework adopts the "extract-abstract-view" principle with unique features that set it apart from existing frameworks. It allows for the definition of abstractions, querying based on semantic properties of programs, and presenting results in various forms suitable for the intended purpose.

Programs are treated as models, which inherently abstracts them, thus making the framework language-independent. The framework is built upon a solid flow-analysis framework for procedural languages called DARPAN, drawing on lessons from previous experiences in restructuring and reverse engineering, particularly for COBOL and RPG applications, and refined by insights from programmable reverse engineering. It resembles work by Stan Jarzabek and Guosheng Wang but differs by using imperative specifications, focusing on program semantics, and offering code level transformations.

Specifications within the framework enable customizable viewing of the refined abstractions, choosing from predefined display types or creating new ones. Additionally, core program properties such as control-flow graphs and data-flow information are seen as further abstractions, with these properties being made available as primitives.

The framework uses these properties to define abstractions, which users can create and refine using a data-flow analyzer generated by DARPAN. This allows for the transformation of source programs into target programs based on extracted analyses, such as segregating the programs into GUI and business layers.

Written in XML, these specifications guide the transformation process and the presentation of results. The goal is to develop rapid and iteratively adaptable reverse engineering tools, supported by an interpretive execution environment encompassing various engines for searching, abstraction, display, and data-flow analysis.

Currently in prototype stage, the framework is being tested to define an entity-relationship model extraction from COBOL programs, with plans to extend it for extracting data-flow models to aid system documentation.

An indicative process for creating reverse engineering tools with the framework includes identifying necessary abstractions, employing predefined interfaces or building new tools within the framework, and integrating them for use.

The authors conclude that the specification-driven reverse engineering framework they've developed offers rapid prototyping capabilities independent of programming languages. They anticipate that providing model generation support, finding a balance between primitives and specification flexibility, and allowing integration with existing tools will demonstrate the practical value of the framework.