This paper presents a distributed architecture for concurrency testing and introduces adaptations to existing algorithms to function within this system, as well as providing a new evaluation demonstrating effective distribution of testing multithreaded programs. The contributions of this article are twofold. Firstly, it provides a detailed account of the system's distributed nature alongside necessary adjustments to both the dynamic partial order reduction (DPOR) and sleep set algorithms for seamless integration into the described system framework. Secondly, it conducts a novel experimental assessment highlighting the tool's efficiency in distributed testing scenarios pertaining to multithreaded applications, where numerous testing paths emerge due to different scheduling sequences. The paper's structure begins with an overview of concolic testing and the DPOR algorithm, followed by an introduction of the LCT (concolic testing tool) with proposed changes to the algorithms, a comparison to related work, and finally an experimental analysis of the system in handling multithreaded program tests.

Concolic testing involves generating path constraints, which are logical conjunctions of symbolic constraints based on branch decisions during execution. To initiate test executions along new paths, a portion of these constraints is reused while the last one is negated, utilizing constraint solvers to determine the concrete inputs that fulfill these constraints. As the symbolic execution tree allows for independent exploration of its distinct subtrees, testing can be effectively parallelized.

For multithreaded programs, the execution path is influenced by the scheduling of threads. Concolic testing can take charge of the scheduler to accommodate the scheduling as a system input, and when used in conjunction with DPOR algorithms, it can efficiently manage the combinatorial complexity due to thread interleavings. These algorithms help pinpoint races and establish backtracking points to ensure the exploration of various thread interleavings.

The system uses TCP sockets for server-client communication, simplifying the distribution of testing across multiple machines. During test executions, constraints are formulated in bitvector theory, with the Boolector solver handling their resolution. The DPOR and sleep set algorithms are incorporated to circumvent unnecessary interleaving explorations in multithreaded testing, with a focus on a stateless implementation for DPOR which complements concolic testing's reliance on re-execution for backtracking rather than stored states.

Sleep sets work in tandem with DPOR to further narrow down exploration choices. They leverage the principle that once a thread operation has been examined from a particular state, examining other independent operations from the same state negates the need to repeat the already explored operation. Sleep sets for each state are determined based on the union of the explored operations and those in the state's sleep set, excluding operations not independent from the most recently executed operation.

The paper demonstrates the distributed architecture's scalability, performing effectively up to 20 clients. This efficiency is attributed to the demanding nature of individual test executions, which involve restarting the JVM, solving path constraints, and executing the program both concretely and symbolically â€“ tasks that are more time-consuming than the server's synchronized operations. The architecture also benefits from a large number of open paths in the execution tree, ensuring that there is sufficient work available for each client.