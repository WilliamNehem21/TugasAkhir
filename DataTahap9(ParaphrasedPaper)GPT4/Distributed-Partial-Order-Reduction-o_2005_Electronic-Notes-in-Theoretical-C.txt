This academic paper discusses the problem of state space explosion in the formal verification of concurrent systems and introduces a new approach to address this challenge by combining partial order reduction with distributed memory state exploration.

The paper starts by explaining that concurrent systems involve multiple components that operate simultaneously and can communicate with each other, leading to an extremely vast number of potential behaviors and making verification hard due to state explosion. To verify that a concurrent system adheres to certain properties, model checking—a technique where all possible system states are explored—is commonly used.

To address the state explosion problem, two main methods have emerged:

1. Partial order reduction: This technique attempts to simplify the verification task by reducing the size of the state space that needs to be explored, without compromising the accuracy of the verification process.

2. Distributed memory state exploration: This method aims to extend computational resources, particularly memory, by distributing the state space across multiple computers in a network, thus allowing a parallel exploration of the state space.

The paper proposes an integrated approach that combines these two methods into a distributed memory algorithm for partial order reduction. The underlying idea is to leverage the power of multiple nodes (workstations or computers) networked together without a global shared memory. Each node is responsible for a portion of the state space, and communication occurs solely through message passing.

In this setup, as nodes perform depth-first search, they exchange messages to coordinate the expansion of the state space. When a node finishes exploring a state, it moves to the next state in the waiting set, continuing this process until there is nothing left to explore and all messages have been processed. The algorithm completes when all nodes are idle, and there are no pending messages.

The paper discusses the theoretical efficiency of the computation, suggesting that every state and its outgoing edges are explored exactly once without the heuristic, and possibly more with the heuristic but in a controlled way due to the monotonically increasing nature of a state's exploration history.

Experimental tests examined models of mutual exclusion, token ring algorithms, and the alternating bit protocol with varying parameters. Interestingly, the authors mention an extension to their algorithm called 'fragmented depth first search' (FDFS). They conclude that their algorithm not only increases reduction efficiency compared to existing methods but can also be easily combined with existing distributed linear temporal logic (LTL) model-checking algorithms. Though still in need of further experimental validation for full LTL model checking, this represents an ambitious direction for future work in the field of formal verification.