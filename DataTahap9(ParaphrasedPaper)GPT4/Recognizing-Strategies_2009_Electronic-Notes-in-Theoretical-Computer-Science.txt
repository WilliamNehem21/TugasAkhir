In the paper, the authors describe an approach for incrementally solving various exercises, such as converting logical propositions to disjunctive normal form, simplifying matrices, or performing calculations with fractions, through the use of strategies. These strategies allow for automatic generation of step-by-step solutions, monitoring of student progress through stages of an exercise, and the provision of tailored suggestions if a student strays from the path outlined by the strategy. The automation of feedback generation through strategy specifications significantly reduces the effort required to create new exercises and domains.

The authors draw parallels between parsing and solving exercises incrementally, highlighting their work on implementing a strategy recognizer that can facilitate this process. They offer a full implementation of the recognizer and discuss several design decisions, such as using a fixed point combinator for repetitions and labels to mark positions within strategies.

They emphasize that strategies are crucial in domains like programming and theorem proving, and also play a key role in exercise assistants for mathematics and other disciplines. In the field of intelligent tutoring systems, the concept of a strategy is known as procedural knowledge or a procedural plan.

The strategy recognizer described in the paper is designed to provide detailed feedback, moving beyond simple correct/incorrect responses. It can determine where a student's input deviates from the strategy and what is expected at that juncture, which greatly improves the quality of feedback.

The paper is structured as follows: Section 2 introduces a language for specifying strategies and uses the process of adding fractions as an example. Section 3 covers the implementation of the strategy recognizer and outlines the major design choices. Section 4 presents extensions to the recognizer, and Section 5 explores how the strategy language can diagnose problems with user input. Related work and ongoing research are reviewed in Sections 6 and 7, which is followed by conclusions.

Key components like transformation rules, labels, and combinators are defined, with transformation rules serving as the smallest units for constructing composite strategies. Labels help mark positions within a strategy for feedback purposes.

The strategy recognizer library, written in Haskell, has been tested across different domains. It caters to handling recursive grammars and manipulating grammars easily, using smart constructors for simplification and normalization. Recognizer performance is depth-first by default, with a variant exposing breadth-first behavior.

The authors conclude that the strategy recognizer not only aids in providing improved feedback but can also be used in decomposing exercises into subproblems if a student provides an incorrect final answer. They compare their work with other tools, highlighting that while correct/incorrect feedback is common, diagnosing mistakes is often more complex and time-consuming, and their strategy recognizer offers a solution for this problem.

By treating strategy recognition as a parsing issue, the authors harness decades of parsing expertise and tailor it to the unique requirements of strategy-based exercise solving, resulting in a sophisticated tool for educational purposes.