The current development of new algorithms for the SPIN model checker is aimed at improving multi-core verification without significantly disrupting the established methods for verifying safety and liveness properties. These upcoming enhancements strive to maintain compatibility with existing verification modes and optimizations, such as partial order reduction and different state storage techniques. Importantly, the fundamental computational complexity of the procedure remains unchanged, preserving the linearity of the verification relative to the size of the state graph, even when the search is executed in parallel.

In this paper, we delve into one of the prospective algorithms, particularly for verifying safety properties. This algorithm, based on a concept called stack slicing, exhibits potential advantages that extend beyond its main objective of scaling performance with the number of CPU cores. We present an overview of the stack slicing method, provide performance results, and explore its unexpected features.

The algorithm kicks off by assigning each CPU core a unique identifier and starting the search process independently. The search is modified such that when a certain depth is exceeded, the algorithm attempts to hand off state exploration to another CPU by placing the state in a shared memory work queue. This allows for parallel exploration without interruption. However, handoffs are skipped if the recipient's work queue is full. A garbage collection process is incorporated to manage redundant stack frames, although it may introduce locking mechanisms that could adversely affect runtime.

The stack slicing algorithm demonstrates surprisingly effective performance, offering a straightforward load balancing mechanism with minimal disruption to the standard depth-first search. The handoff depth selection influences the search's independence between cores and the efficiency of load balancing, presenting interesting trade-offs for engineers.

The paper also emphasizes the difficulty in creating efficient translated models for different model checkers due to the specificity of optimal search strategies for each tool. Instead of focusing on the precise verification problem, a fair performance comparison of multi-core algorithms can be made by exploring the same statespace, represented by the models, across different tools.

The performance evaluation of SPIN's multi-core algorithms demonstrates that even when comparing SPIN 5.0's two-core liveness algorithm to an alternative algorithm on many more cores, SPIN often offers superior performance. However, the paper also reveals that SPIN's dual-core approach does not always lead to substantial improvements, implying that while the current search strategies are far from optimal, finding simple yet effective improvements remains challenging.

[Note: The provided text seems to be an excerpt from an academic paper discussing advanced algorithms for the SPIN model checker, focusing on multi-core verification of safety properties. It also mentions specific results and nuances of the performance in comparison to alternative methods. The original text likely contains references and technical details not fully captured in this paraphrased summary.]