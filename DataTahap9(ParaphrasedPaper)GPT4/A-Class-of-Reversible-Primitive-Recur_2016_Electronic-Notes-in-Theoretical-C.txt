The paper discusses the significance of reversible computation in both the fields of physics and computer science. It suggests that reversible computing can simulate classical computing and has various applications ranging from software verification to novel computing paradigms like quantum and molecular computing.

The authors focus on reversible functions (RF) and primitive reversible functions (PRF), which are interesting because they represent function composition and balance both conceptual and practical aspects of computation. RF handles partial functions, while PRF deals with total functions, both converging towards a functional programming approach.

The main objective of the research is to develop a formalism capable of describing a comprehensive class of first-order functions with effectively invertible graphs within the formalism. The authors propose a simple and effective inversion operation that benefits from the compositional nature of their computational model, allowing comparison with other reversible programming styles, like those in reversible Turing machines and the programming language JANUS.

The paper does not aim to recreate the full scope of RF, which encompasses Turing-complete functions, but instead focuses on a subset resembling PRF that captures mathematical algorithms from the pre-20th century, which are not Turing-complete.

The authors introduce reversible primitive recursive functions (RPRF), which are guaranteed to terminate and reduce semantic redundancies. A notable feature of RPRF is that it defines total functions that can be inverted effectively, in contrast to the full set of invertible partial recursive functions discussed in other work.

RPRF differs from earlier work by avoiding dependence on binary number representation, aiming for a more abstract, data representation-independent approach. In RPRF, functions operate on integers instead of natural numbers, as integers form a group with inverses under standard operations, unlike natural numbers.

The class RPRF is closed under inversion and makes use of embedding techniques to represent all primitive recursive functions. The concept of pairing and unpairing, used by Bernays and Robinson, is adopted in this formalism to consolidate information into a single argument, acting as a form of storage.

Composition in RPRF is similar to that in PRF, and their recursion scheme functions as an iterator. This iteratively applies a parameterized function based on the value of an argument, preserving the value during evaluation and ultimately including it in the result. This accommodates both positive and negative values by utilizing the absolute value to control the iteration process.