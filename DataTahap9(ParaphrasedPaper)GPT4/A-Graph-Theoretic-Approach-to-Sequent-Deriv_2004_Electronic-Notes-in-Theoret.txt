In the discussed paper on lambda calculus (lc) graphs, the authors describe how various types of nodes, such as plus-nodes, minus-nodes, and lambda-nodes, play distinct roles in proof net construction. Nodes are designated by their function: plus-nodes often coincide with terms needing substitution (redexes), minus-nodes typically represent terms that have been substituted, and lambda-nodes indicate abstraction. Terminal nodes are defined as those with no outgoing arcs.

The properties of these nodes are examined, particularly how plus-nodes can receive incoming arcs from either a negative occurrence linked by an axiom, or from a parent lambda-node. It is also outlined that if a node is not the child (minus-daughter) of a lambda-node, it will typically have one arc coming into it. For proof net construction, it's crucial to maintain certain integrity criteria in lc-graphs to ensure correct representation of substitutions.

Furthermore, the paper addresses the issue of avoiding the exponential growth in the number of lc-graphs during parsing and combining them efficiently. A conjecture is presented, suggesting that lc-graphs that produce the same integral spanning linkage may share the same sets of paths from the root nodes to the terminal nodes, hinting at redundancy that could potentially be optimized to reduce the computational complexity.

Overall, the paraphrased paper deals with the structural and functional integrity of lc-graphs in the context of proof nets and lambda calculus, as well as computational considerations in parsing and combining these graphs for efficient proof net construction.