This academic paper discusses the development of the TOM language, an extension of Java that incorporates the concepts of rules and strategies derived from the rule-based language ELAN. ELAN was notable for distinguishing between rules—the basic transformation mechanics—and control or strategy, the overarching guidelines for applying those rules. Through the design of TOM, the authors aimed to apply these concepts within the Java programming environment.

Rewrite rules serve as an abstraction to model various complex systems, offering a theoretical framework that enables the certification and verification of system properties like termination or confluence. While programming with rewrite rules may seem straightforward, achieving determinism can be challenging since natural systems generally lack confluence. Traditional solutions include assigning priority to rules or separating the control element from the rules into what are called strategies. These strategies specify the application of rules.

Prior attempts at strategy languages include Maude, which uses meta-level and meta-apply operators to control rules, enabling reflexivity across multiple levels. While this is expressively powerful, it can be complex to use. The paper reflects on a decade of experience with rule-based languages to identify key constructs and features for a new language design integrated with an object-oriented language like Java.

Key features of TOM suitable for integration in Java include labeling rewrite systems to define how they apply to given terms and maintaining terms in normal form automatically using unlabeled, confluent, and terminating rewrite rules. This automatic normalization simplifies programming and ensures data structure integrity.

Although Java's built-in control statements such as composition and repetition could manage rule applications, they complicate program reasoning and proof-making. Thus, an ideal strategy language should be expressive yet simple. Strategy languages like Stratego offer inspiration, with a small set of powerful combinators and the potential for elegant extension to support non-deterministic operations.

TOM allows the term data structure's implementation to vary based on the user's specification, maintaining flexibility. Labeled rules in TOM are handled as objects rather than functions, fitting the object-oriented model of Java.

By integrating formal definitions of logic systems with TOM into Java-based user code, TOM facilitates the use of formal methods in existing projects, striking a balance between elegance and practicality. The adoption of TOM's algebraic constructs can lead to more concise, readable, and robust code within standard programming practices.