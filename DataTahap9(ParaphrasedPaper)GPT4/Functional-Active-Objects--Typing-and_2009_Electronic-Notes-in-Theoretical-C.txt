The study presents a distributed calculus which guarantees that there are no side-effects in object copies; this allows processes to run independently on separate machines and enables asynchronous, RMI-like communication. From the original actor model, several programming languages have been created, including those that implement actors and distributed active objects, such as the ProActive library. The calculus, ASPfun, offers a simplified framework for these languages, which is abstract enough to serve as a foundation for analyzing similar languages. For instance, ASPfun helps analyze imperative ASP, focusing on communication strategies and the potential for static analysis.

The paper also discusses a type system for distributed active objects. It presents a simplified typing environment as a mapping and introduces a rule that prevents infinitely nested object types, asserting that the demonstrated properties hold without any additional assumptions on type formation.

Moreover, the authors note a communication model called AmbientTalk, which is suited for small, loosely-connected devices on an ad-hoc network. Although similar to the ASP calculus, AmbientTalk includes queues for message dispatch, asynchronous handler invocation, and non-blocking synchronization since it uses automatic asynchronous calls on futures. This model may lead to complex control flow issues since there's no certainty when a future will return within a program. AmbientTalk is believed to be deadlock-free, but without formal proof, as no formalization of the language has been documented. The authors suggest that their framework could be adapted to formally prove the absence of deadlocks in AmbientTalk by applying the progress property.