In Section 3, the paper outlines mechanisms for vertical structuring, which link different layers of reasoning. This involves defining abstractions, which show how reasoning elements at a higher level relate to those at a lower level, and introducing refinements, which explain how procedures at a higher level can be executed by those at a lower level. An example given is the refinement process in proof-planners, where the method's encapsulated tactic refines the abstract rule outlined by the methodâ€™s preconditions and postconditions. The paper presents a general framework for refining an abstract proof.

Section 6 introduces a basic programming language designed for defining reasoning and refinement processes, as well as their integration to guide proof search. These constructions utilize window inference rules that clearly define success and failure outcomes.

The paper then details the components of a reasoning level: the objects to reason about, basic reasoning rules, and the algorithms for proof search. Reasoning levels use signatures and formula sets of a logic to define reasoning objects and rules. A representation pair is composed of a signature and a set of "axioms," similar to specifications in formal languages used to define abstract data types.

An abstraction example given involves transitioning from a specific program state (x decreases by one) to a more abstract representation (TLA-States & Transitions) to facilitate proof planning for demonstrating a specific property (existence of an integer x equals 0).

Reasoning procedures, defined as algorithms enforcing basic inference rules, are equipped with success and failure semantics to enable backtracking in case of failure. These procedures include tactics from tactical theorem provers, algorithms from automated theorem provers, or proof-planning algorithms.

Refinement procedures are linked to higher-level reasoning procedures, taking abstract proof plans and refining them using lower-level tactics. These procedures incorporate knowledge of object abstractions and retain success and failure semantics to allow for potential backtracking and alternative refinements.

Window Inference is presented as an intuitive reasoning style, focusing the reasoning process on sub-expressions and supporting contextual reasoning within that focus. For robust reasoning procedure design, the system integrates window inference with indexed formula trees and case analysis mechanisms. Admissibility checks for variable instantiation in a focused window are based on an "l-admissibility" condition.

Overall proof search is organized by reasoning and refinement procedures along with language constructs to combine them, thus enabling modification of window content, case analyses introduction, and invocation of abstract reasoning procedures with subsequent refinement when successful.

The paper concludes by referencing a system by Richardson, Smaill, and Green that models proof planning in higher-order logic.