This paper introduces a novel conceptualization for reactive systems that interact with databases, aimed at improving model-based testing. The database is simplified into two subsets: the present set, which is an underestimation of data within the database, and the absent set, which indicates data not in the database. From this simplification, two modified versions of finite state machines (FSMs)—DBFSM and PAFSM—are introduced. DBFSM integrates databases into FSMs, and PAFSM is a further abstraction utilizing the present and absent sets. The authors demonstrate the translation from DBFSM to PAFSM, affected by the handling of unknown data values, and detail developing test specifications using PAFSM. The paper also explores reactive systems that have basic interactions with databases, involving simple insertions or deletions of values, without complex data operations.

The content of the paper is organized into several sections, where related work is first discussed, followed by explanations of model-based testing. Theoretical aspects, including the proof of the present-absent abstraction, are elaborated in subsequent sections. The paper also expounds the translation process between DBFSM and PAFSM and validates the approach using a small, manually crafted example with the UPPAAL TRON testing tool.

The authors outline two testing methodologies: online testing, which dynamically creates and conducts test cases, and offline testing, which generates test cases that can be executed later. Online testing has its advantages, such as easier non-determinism management and reduced state-space, but it complicates coverage analysis, while offline testing can be hindered by the complexity of state dependencies.

The paper presents a present-absent set abstraction as a novel way to simulate a database interaction within model-based testing and extends the existing approaches for real-time testing. The authors plan future work to refine the simplicity of the database view and to evaluate the effectiveness of this methodology with larger, potentially industrial examples. Specifically, they mention improving the UPPAAL model checker to better handle systems using the present-absent set abstraction.