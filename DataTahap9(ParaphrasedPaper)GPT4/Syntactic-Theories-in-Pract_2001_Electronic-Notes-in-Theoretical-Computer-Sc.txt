The interpreter aligned with a syntactic theory's evaluation function essentially performs a repeated cycle of decomposing, contracting, and reconnecting. The most practical approach to decomposition is typically using a depth-first search through the abstract syntax tree, which introduces significant overhead proportional to the program's size. Similarly, reconnecting processes might take time proportional to program size, but they won't exceed the time needed for the subsequent decomposition, if applicable.

The paper makes some assumptions regarding the grammar of the programming language being considered. It deals with abstract syntax, where each node in the abstract-syntax tree stems from a production rule in the grammar. Since abstract syntax doesn't have to directly reflect concrete syntax, the paper supposes for simplicity that productions are of a specific form and that some syntactic categories only contain literals and other values, which don't require evaluation contexts as they're not involved in decomposition.

A key principle in syntactic theories for deterministic languages is "unique decomposition," and proving this is often the first task in such theories. While the proof can be straightforward, it can also be a meticulous and error-prone process due to numerous small cases. This complexity led to efforts by Xiao, Sabry, and Ariola to develop automated tools to aid in proving unique-decomposition properties.

According to the paper, if a syntactic theory upholds a unique-decomposition property, then reducible expressions (redexes) are precisely those non-value terms that can only undergo trivial decomposition â€” either when the term is a value itself or when the term is within an empty context.

The paper also discusses work by Sabry and Felleisen on programs in continuation-passing style (CPS), where they formulated a new CPS transformation. Unlike other CPS transformations generally based on operational or denotational semantics, theirs is based on syntactic theory and is not defined by structural induction. This transformation involves the same decompose-recontract cycle, which adds overhead as noted earlier.

The report suggests a linear-time implementation for this CPS transformation process, expanding on the original specification, making the decomposition and reconnection steps explicit, and introducing a refocus function for efficiency. This work is part of a technical report by Olivier Danvy and Lasse R. Nielsen published by BRICS RS-01-31 from the Department of Computer Science, University of Aarhus, Denmark. An extended version was expected to appear in the proceedings of the second international workshop on rule-based programming.
