The academic paper describes Circus, a refinement language used for specifying concurrent system behavior and data aspects by integrating Z notation with CSP (Communicating Sequential Processes). Circus comes with a unique refinement theory and calculus. However, refinement processes can sometimes be tedious and complex. To mitigate this, authors present a language called ArcAngelC, designed to define and apply refinement strategies as tactics, which are essentially transformation rules that can simplify and streamline the refinement process. 

Despite many tactic languages in existence, none provides formal semantics or supports a refinement calculus tailored for concurrent systems. Additionally, these languages often lack advanced features like recursion and alternatives, limiting their expressiveness.

ArcAngelC enables tactic definition for verifying concurrent system implementations in Ada, using an existing informal strategy as an example. The paper demonstrates how to use these tactics for the formal verification of a simple control system.

The language includes constructs for conditional application of refinement laws, such as proof obligations that must be satisfied for a law's valid application. It also allows for the combination of tactics and their application to substructures within Circus programs. The paper illustrates tactics that promote local variables to state components based on the presence of existing state. 

Control systems, modeled as discrete-time with sampled inputs and outputs, are also discussed in the context of ArcAngelC's application. The language helps map these control models onto Circuz specifications, contributing to the formal verification process.

The paper also outlines refinement strategies through multiple phases, detailing tactics for each phase and how they contribute to the normalization of Circus programs. This approach aids in the verification of SPARK Ada programs against control systems modeled in Simulink.

Furthermore, the authors foresee automatic proof generation for ArcAngelC tactics in the future, suggesting an alignment with previous work on mechanizing Circus within ProofPower-Z, a theorem proving environment.

The use of free variables and local actions within tactics is explained, with particular attention to their references within main actions and local definitions, exemplifying how these references change when particular actions are introduced or substituted.

Overall, the development of ArcAngelC showcases how a formalized strategy can contribute to the automation and simplification of the refinement process in the specification and verification of concurrent systems.
