In this paper, the authors explore using logic programming, specifically Prolog, as a means to query OWL (Web Ontology Language) resources. They aim to develop a query language that can extract both data and meta-data from OWL ontologies. The process involves three steps: devising a query language from a subset of description logic (DL), translating this language into Prolog using logical rules, and identifying Prolog goals that correspond to the queries.

The Semantic Web framework suggests enriching web data, presented in HTML and XML, with meta-data using RDF (Resource Description Framework) and OWL, both endorsed by the W3C consortium. OWL is built upon RDF and facilitates complex relationships between entities. It relies on description logic, which is formed from various logics, or fragments, with varying levels of expressiveness. DL, a subset of first-order logic featuring decidable attributes, seeks to overcome the challenges of using first-order logic for knowledge representation and reasoning. OWL 2, based on the SROIQ DL fragment, provides a more expressive and standardised ontology language with both direct and RDF-based semantics.

The authors' work continues prior research that involved adapting logic programming to manage web data and represents an effort to utilize logic programming for both querying and reasoning within the Semantic Web context. This includes previous studies on converting XML query languages like XPath and XQuery to logic programming and extending XQuery for handling RDF and OWL.

Ontologies in OWL consist of the TBox (terminological box) and ABox (assertional box). While the TBox describes meta-data such as concept hierarchies and relationships, the ABox contains actual data about individuals, concepts, and roles. The paper distinguishes between reasoning tasks – such as instance and relation checking, subsumption, and consistency checks – and querying tasks like instance or property fillers retrieval, both relying on inference procedures to derive new relationships from existing ontologies.

The paper is organized into sections that define the chosen DL fragment, propose a query language from this fragment, explain how to encode the query language in Prolog, and conclude with a look at future work. The authors design an inference calculus for the DL fragment that can prove formulas associated with an ontology, implementing it in Prolog while considering system inference limitations.

The proposed query language introduces variables to DL formulas and supports conjunctions of these formulas, using variable names that start with lowercase letters to differentiate variables from non-variables. Formulas encapsulate the queries and are limited to a specific DL fragment for Prolog encoding.

In conclusion, the paper presents a Prolog-based query language for OWL that handles ontology data and meta-data. Looking forward, the researchers hope to expand this approach to cover more complex DL fragments and versions of OWL.