The paper discusses the unique security challenges that web services face, specifically focusing on cross-site scripting (XSS) attacks, which exploit existing vulnerabilities. The authors recommend a combined security testing strategy that leverages penetration testing and fault injection to emulate XSS attacks on web services. By implementing Web Services Security (WSS) and security tokens, it's possible to authenticate the sender and enforce proper access control of SOAP messages.

The authors utilize SoapUI, a widely-used penetration testing tool, and introduce a new fault injection tool named WSInject that induces faults to test the resilience of web services in adverse and non-robust conditions. The experimental results illustrate that WSInject is more effective at uncovering vulnerabilities, simulating XSS attacks, and creating new attack types than SoapUI alone.

The study acknowledges that web services are inherently prone to security risks due to their distributed and open nature, with injection attacks being a principal concern as they were among the most exploited weaknesses in 2012. These attacks can insert harmful scripts into web services through their parameters, endangering all users.

W3C has developed specifications, including WSS introduced in 2004, to safeguard web services by enforcing message integrity, confidentiality, and secure communication of various security tokens.

A vulnerability scanner's performance may vary, with commercial tools often missing many possible vulnerabilities and producing a high number of false positives. Fault injection, as a method to evaluate system dependability, simulates errors to understand systems' behavior under extraordinary circumstances.

The authors propose software fault injection as a way to test web services' reaction to non-standard conditions by using injectors to introduce faults either before or during runtime.

The paper compares this research with other literature where fault injection and penetration testing are applied to security protocols for mobile device communication and emulating soap message perturbations, highlighting the flexibility of their proposed injector to emulate and combine different attack types.

The authors describe the XSS attack emulation process using both WSInject and SoapUI, starting from identifying potential vulnerabilities to automatically generating attack scenarios and analyzing web service responses to script injections. While SoapUI can test for XSS vulnerabilities, it showed high rates of both false positives and negatives, and although WSS improved security, further enhancements could come from leveraging additional specifications.

In summary, the paper outlines the security challenges web services face, specifically against XSS attacks, and details an experimental approach that uses fault injection and penetration testing to analyze vulnerabilities and improve security protocol effectiveness.