The paper discusses the significant role of process mobility in global computing and the corresponding security challenges it poses. Mobile processes can exploit host resources or compromise their security, while hosts can likewise misuse mobile processes. To protect hosts from the threats associated with mobile processes, the authors propose using process abstractions, which abstract from local operations, rather than ready-to-run processes. This method involves remote communication and instantiation of received process code on the target host, ensuring local operations are performed securely.

The KLAIM programming model, which involves processes, nodes, and tuple spaces for asynchronous communication and process distribution, serves as the basis for the paper's approach. The paper introduces a variant called hotKLAIM, which provides process abstractions for better parameterization control and does not support autonomous process migration.

HotKLAIM distinguishes between global and local types and terms. Global types are unrestricted across the network, while local types are specific to individual hosts. The paper presents a process abstraction called gatherer, which searches for information and is parameterized with customized, secure communication operations based on an authorization key.

An execution process acts as a node guardian, managing process abstractions and their execution after ensuring security constraints are met through authorization functions. The paper also compares hotKLAIM to another process language (D), highlighting different approaches to managing process mobility and resource access.

In summary, the paper proposes a framework for securing hosts against mobile process-related threats by using process abstractions and tailored execution environments. This methodology aims to provide fine-grained control over mobile code behavior and can potentially apply to any system that allows code transmission and remote communications.