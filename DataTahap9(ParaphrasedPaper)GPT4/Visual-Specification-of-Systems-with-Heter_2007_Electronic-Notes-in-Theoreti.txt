The paper introduces a visual specification language named Visual Coordination Diagrams (VCD) for outlining the high-level design of concurrent systems that utilize varied coordination models. VCD's main feature is its clear distinction between the behavioral and coordination elements of system design. The language's versatility is evidenced by its ability to combine different coordination models within a single specification and to incorporate various formalisms for defining behavior.

VCD adopts an exogenous coordination model that separates coordination from behavior. It can be visualized as static architectural diagrams and showcases two levels of heterogeneity. First, it supports the integration of diverse coordination models, both synchronous and asynchronous. Second, it enables the use of different formalisms for behavioral specification, ensuring compatibility with the supported coordination models.

Contrasting GCCS and sGCCS, which are based on process algebra, VCD and another language called Architectural Interaction Diagrams (AID) achieve heterogeneity by not strictly adhering to the CCS process algebra. Despite their similarities, VCD differs from AID in that it allows for more complex behavioral specifications and supports both interactive and reactive components of system design. AID, on the other hand, offers more non-deterministic options at the coordination level.

Considering coordination languages that also function as architecture languages, VCD stands out for its simplicity as a visual formalism, distinct from more complex programming languages like Manifold and ToolBus, which focus on control-driven exogenous coordination. VCD's concept of ports is similar to that of Manifold's, although it currently doesn't support dynamic reconfiguration of components as Manifold does.

VCD semantics is founded on a state transition model, which consolidates component state transitions into a network-wide state transition model. A VCD network can be visualized as a graph with transitions of strongly connected components combined in either a synchronous (product) or asynchronous (interleaving) manner. The coordination model emerges from the buses' semantics within the graph.

The language allows for any compatible formalism to define component behaviors, using an input/output labeled transition system (LTS). This ensures that VCD remains flexible at the behavioral layer, supporting a range of specifications from statecharts to Petri-nets.

Buses are the fundamental coordination unit in VCD, representing various coordination mechanisms, such as message passing or synchronous broadcast. VCD can mix different bus types in a network design, each defined by its interface and class.

The paper also explains gates, which establish a link between ports of networks and components, portrayed as dashed lines in VCD. Finally, the semantics of VCD networks are elaborated upon, detailing how they combine local IO LTS into a global IO LTS respecting the coordination model represented by the buses within the network.

In summary, the paper describes VCD as a language for hierarchical, component-based, concurrent system design, allowing heterogeneous coordination models through buses. VCD is portrayed as an evolution of traditional software architecture modeling notations and as a framework for specifying coordination in reactive systems.