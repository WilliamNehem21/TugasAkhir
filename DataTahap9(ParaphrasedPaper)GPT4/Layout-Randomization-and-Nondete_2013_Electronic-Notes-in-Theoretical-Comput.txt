This academic paper discusses the technique of layout randomization, widely used in computer security to mitigate attacks, and explores how it works when combined with nondeterministic choice (or unpredictability in system behavior). The authors propose a semantic framework, which is less concerned with specific programming languages and their syntax, to understand the complex interplay between randomization and nondeterminism.

The paper introduces two levels of language: a high-level language using abstract symbolic locations, and a low-level language where these symbols are mapped to random memory addresses. Both languages allow for nondeterministic choices, and the authors provide models and contextual implementation relations for them. In security terms, these relations can be used to express how systems should behave under potential attack scenarios.

Key to the paper’s contributions is the use of simulation relations, sometimes called logical relations, which help map behaviors between the high and low-level representations. By establishing that simulation at one level leads to simulation at the other, they demonstrate that a secure implementation in the high-level language implies a secure implementation in the low-level language – this linking is crucial for proving security properties.

The authors point out some limitations of prior work in this area, notably the assumption that nondeterministic choices are resolved before any random choices, which does not account for dependencies between random events. They offer a more sophisticated model that considers random variables and their distribution across possible memory layouts, which is essential for accurately modeling systems where choices are not independent.

The approach outlined in the paper can potentially be applied beyond layout randomization to other areas in security that involve nondeterministic and probabilistic considerations. The models and simulation relations developed here also contribute to ongoing research into the semantics of programming languages that handle both randomness and unpredictability.

In conclusion, this paper advances the understanding of how layout randomization can be applied and analyzed in systems with inherent unpredictability and suggests future research paths in security analysis and higher-order computing that deal with nondeterministic scheduling and probabilistic choices.