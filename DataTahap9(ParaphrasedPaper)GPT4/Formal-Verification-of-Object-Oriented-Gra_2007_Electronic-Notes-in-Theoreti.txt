This academic paper discusses the translation of object-oriented graph grammars into PROMELA programs for model checking and verification, while respecting the object-oriented features of inheritance, polymorphism, and dynamic binding. The paper is structured into several sections:

Section 2 outlines the main components of object-oriented graphs and graph grammars, detailing how classes, messages, and attributes are represented within class-model graphs, and how inheritance hierarchies are defined.

Section 3 describes the process of formally translating object-oriented graph grammars into PROMELA, using auxiliary functions to handle inheritance and overriding relations.

Section 4 presents a translation example using the dining philosophers problem, a common concurrency issue, to demonstrate the application of the approach in verifying properties of object-oriented systems.

Finally, Section 5 offers concluding remarks on the semantic soundness of the translation approach, noting that a formal proof is underway for publication.

Key concepts include:

- The internal structure of object-oriented systems, consisting of objects with attributes, which communicate via message passing.
- Class-model graphs, which incorporate classes, attributes, and messages, using hyperarcs and strict relations to represent inheritance hierarchies.
- Typed graph morphisms, which maintain type consistency in the presence of inheritance, allowing for correct description of polymorphism.
- Observational semantics which focuses on system behavior—specifically, events like message exchanges—rather than the system structure.
- Translation procedures that ensure semantic integrity, meaning that the behavior of the graph system is accurately reflected in the PROMELA translation without introducing or omitting behaviors.

The paper emphasizes the importance of correct translation for property verification and demonstrates how this approach can effectively identify errors in the modeling of concurrent systems.