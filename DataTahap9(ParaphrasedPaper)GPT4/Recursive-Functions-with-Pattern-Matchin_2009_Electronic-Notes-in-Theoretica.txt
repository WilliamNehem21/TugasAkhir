The paper discusses interaction nets, which are a type of graph rewriting system that distinctly incorporates all computational steps into its own framework without reliance on any external mechanisms. This feature is useful for analyzing computational costs and comparing various evaluation strategies that are implemented using interaction nets. The inherent local and strongly confluent nature of reductions in interaction nets means that they can occur in any order, including parallel execution, which is beneficial for developing programming languages and rewriting systems.

The paper is structured as follows: Section 2 reviews basic concepts of interaction nets, Section 3 introduces a simple functional language with case expressions and recursion, Section 4 details the translation process of this language into interaction nets, and Section 5 provides a conclusion.

On a fundamental level, a net (N) is described as a graph that might be disjointed, consisting of nodes known as agents and edges that link pairs of ports. Ports not connected by an edge are free. Notable variations of nets include a wiring (only edges, no agents) and an empty net. The external ports of a wiring are regarded as free ports. Together, the free ports of a net constitute its interface.

The paper does not commit to a specific evaluation strategy but notes that since the rewrite rules are left-linear and non-overlapping, thus forming an orthogonal system, the described language is guaranteed to be confluent. However, it is not terminating due to the inclusion of recursion. The language operates with strict matching semantics similar to those found in the ML programming language, which means that function applications that do not match any case definition will lead to a runtime error.