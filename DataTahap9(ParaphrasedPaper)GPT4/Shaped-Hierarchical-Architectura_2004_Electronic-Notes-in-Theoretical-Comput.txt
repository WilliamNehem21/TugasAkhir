Checking the style or shape of a software architecture (SA) means verifying that the structure of the SA adheres to a recognized pattern common to a certain class of architectures, much like a type in programming. This paper expands the concept of style as a type by using the term "shape," which originates from research on graph grammars that type pointer-based structures in programming.

The study aims to address modeling challenges within SA by applying type systems and linear representations, drawing on existing research in programming languages and type checking. It presents a graphical representation for each part of the proposed approach, including a type inference system that can manage shapes with hierarchical structures and accommodate global references, building upon initial ideas from other works.

Graph-reduction (GR) specifications are suggested for defining classes of pointer data structures, with GR rules functioning as reversed grammar productions for graphs. Algorithms to check if a particular structure belongs to a shape type are explored, and the complexity of these algorithms is analyzed.

Hierarchical graph transformations extend the double-pushout approach by introducing new morphisms to describe the relationships between different levels of hierarchy, along with a 'flattening' operation to simplify the hierarchies. These hierarchies are strict; elements at different levels are not aware of each other (i.e., there's no border-crossing).

An airport case study is used to illustrate this concept. The study focuses on locations within hierarchies, such as countries containing airports, which, in turn, host planes and passengers.

Shapes are used to represent styles in terms of types, where a shape is a class of graphs generated by applying shape rules. These rules serve as the system's typing specifications. Different type systems can be derived from a set of inference rules tailored to specific needs.

Due to space limitations, the paper presents only one instantiation of the inference rules that can manage global references. This illustrates that the approach is a generalization capable of integrating shapes with hierarchies. It addresses the treatment of hierarchy and global references, highlighting differences with hyperedge replacement and the use of these references in programming and architectural/design languages like UML.

The paper defines a type system as a set of type judgments based on axioms and inference rules. Well-typed proof terms are those that can be generated within this system. It discusses graph terms, types, variables, and how they're used within the system.

While this paper mainly explores shapes with global references, it suggests that further research on different instantiations is necessary. Shape analysis techniques used in related work on pointer data structures could also be beneficial to this approach, as indicated by a stated theorem.