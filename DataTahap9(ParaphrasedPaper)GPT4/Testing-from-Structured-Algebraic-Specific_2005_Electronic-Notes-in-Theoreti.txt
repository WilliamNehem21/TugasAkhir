"Specification-based testing (SBT) involves generating test suites from formal program specifications. Recent research has promoted the integration of formal methods and testing as a cost-efficient approach to develop systems of high integrity. In the algebraic context, SBT aims to verify whether the implementation under test (IUT) adheres to the specified axioms. Test cases derived from these axioms are executed to check the operations, and an oracle assesses the outcomes. The challenge is to use testing effectively for verification, which requires automated, well-founded methods and strategies, still necessitating significant efforts for standardization within formal frameworks.

Veritas, a model checker developed in the SML language, addresses this by utilizing an object-oriented Petri nets language called RPOO and CTL temporal logic for property specification, without requiring Petri nets syntax. However, matching an IUT's signature with a specification does not ensure structural reflection and structured specifications require due consideration of their compositional semantics when testing.

Testing from structured specifications can be complex, especially considering the varied ways quantified properties should be approached. For intricate functions, even finite test sets might be impractical. To investigate such problems, a small set of operations has been isolated. More complex operations found in literature, like 'enrichment' or 'union', are composed using these primitive operations, with specification instantiation performed using union and translate.

The core component of Veritas is its evaluation module, responsible for checking specified properties against the state space, providing counter-examples or witness traces as needed. Results can be outputted as textual reports or graphical representations.

Implemented based on established CTL formula checking algorithms, Veritas was tested and verified prior to the experiment. To tackle different challenges, strategies such as focusing on specification-generated values and working with simple formulas were adopted.

Test interfaces were constructed for Veritas, translating CASL library constructs to SML equivalents and generating test data sets. Path construction was assessed indirectly through example and counterexample paths created by Veritas. This process improved Veritas's documentation and ensured accurate interface and algorithm utilization. Ultimately, a test code substantially larger than the IUT was produced, facilitating regression testing.

Testing exposed discrepancies between the IUT and specifications, underscoring the nuances between different abstraction levels. Test harnesses were mostly automated, with manually created sections being thoroughly verified, considering subdomains in the code for data selection.

This approach not only validates the code against the specification but also establishes a connection between the two. The generated tests are reusable and applicable to future versions of Veritas, optimizing algorithms or cooperating tools like a state space generator. Changes in the specification can be swiftly accommodated by regenerating test oracles."