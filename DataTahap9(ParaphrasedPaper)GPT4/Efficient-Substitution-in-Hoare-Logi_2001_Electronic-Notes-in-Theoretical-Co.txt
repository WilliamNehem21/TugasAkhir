Substitution is crucial in Hoare logic for interpreting assignment operations. When creating a digital version of Hoare logic, it is critical to implement substitution effectively. This paper evaluates various conceptions and implementations of substitution within a logical framework to enhance performance.

We introduce substitution as a formal logical construct, not merely through syntactic modification as traditionally done, but with a semantic perspective that captures the relationship between the initial expression and its modified form.

To simplify, we use[v/i]q to indicate replacing every instance of i with v in q. Semantically, this alteration corresponds to a change in state, and our goal is to implement substitution in a logical framework as efficiently as possible.

To clarify the explanation, we specify the logic used for writing the formula q, which is detailed in the appendix and drawn from our PCC (Proof-Carrying Code) applications. While this logic is a higher-order calculus rooted in polymorphic lambda calculus, we emphasize that our approach does not rely on type polymorphism and the same principles can be applied to other calculi, potentially even to an untyped one.