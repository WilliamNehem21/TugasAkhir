The UML's capability to offer multiple views and notation systems serves an essential purpose by dividing a complex system model into understandable, manageable pieces, each representing different facets of the system for ease of analysis and comprehension. This segmentation allows teams to distribute modeling tasks among members, and it simplifies the process for tools that might struggle with a single, intricate model. UML aims to facilitate different levels of system abstraction, though realizing this goal requires additional measures to improve information hiding, model transformation, and refinement.

Following this introduction, Section 2 delves into the refinement calculus for object systems, while Section 3 proposes an extension of the object system model to accommodate component systems. Section 4 examines the relationship between object systems and component systems.

The paper presents an approach to class specification in Java, with an assumption of protected attributes if not specified as private or public. The distinction among attributes illustrates how visibility can be handled and acknowledges different method types within a class, although specific method details like parameter types are omitted. It is assumed that the types, which could be primitive or class names, are declared at the program's outset and remain constant throughout.