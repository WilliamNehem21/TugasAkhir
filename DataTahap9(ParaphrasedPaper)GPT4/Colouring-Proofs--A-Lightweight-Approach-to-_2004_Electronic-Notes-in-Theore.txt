This academic paper describes an approach for enhancing the reliability and maintenance of formal proofs within the Coq proof assistant by providing a structured proof format. The process begins with a detailed handwritten proof, which serves as a reference for creating the proof script for Coq. As the script is developed, it is reorganized to improve reusability and robustness, while the paper proof is condensed for publication.

Drawing inspiration from verification condition generators like Why, the authors aim to implement a similar mechanism for paper proofs, where running a tool generates conditions that must be verified to ensure the proof's correctness. The format used is based on natural deduction style, avoiding specific proof assistant syntax to maintain long-term independence from any particular system. A textual format is chosen over MathML for the representation of formulae, providing greater flexibility in proof appearance.

Within this system, proofs and assumptions are introduced using specific tags, enhancing the clarity of their order and dependencies. The automated generation of conditions from proofs follows a top-down, left-to-right tag traversal, allowing for assumptions to be named consistently with their Coq counterparts.

A key feature of this format is its flexibility; it accommodates both forward and goal-directed proof styles and allows conclusions of subproofs to be visible within subsequent proofs but not outside their parent proof. Additionally, a color-coding system helps distinguish between assumptions, conclusions, and names.

The authors acknowledge other natural language efforts in interacting with provers, such as the Mizar project and Isar, but these systems often impose strict detail requirements on proofs. Their format aims at balancing detail with readability, integrating both procedural and declarative proof styles, and facilitating the extraction of proof texts from tactical or proof objects.

The proposed format ensures that every step in a published proof is machine-checked with a corresponding lemma in the formal development, thereby improving the connection between formal verification and paper proofs. It also supports the division of complex proofs into smaller, maintainable parts and offers the flexibility to experiment with variations in the proof's final statement.

For future work, the authors plan to apply their format to substantial proof developments, like the formalization of floating-point numbers, and to improve automation in Coq for generating conditions. They also consider integrating a scientific editor for writing proofs to benefit from better mathematical expression rendering.