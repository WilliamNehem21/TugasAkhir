In the realm of Model Driven Architecture (MDA), the prevalent method for model transformation is designed to be precise, unambiguous, and completely automated. However, we propose that these methods are not universally applicable across all software development scenarios. Particularly challenging situations in software development may benefit from more versatile and semi-automated approaches to transformation. In this paper, we introduce a system known as the "transformational pattern system." This system allows for a mixture of human input and deliberately indistinct and partial rules to facilitate transformations.

The process of automatic transformation doesn't eliminate complexity but rather shifts it. Instead of relying on a designer's skills to create a target model, one must depend on a transformation engineer to develop a more generalized transformation capable of being applied to various situations, which is inherently more complex. The development cost is justified only if the transformation is reused across multiple products. Otherwise, it might not be economical, especially for unique products or smaller organizations, to develop and maintain an additional software component.

In this paper, we propose a semi-automatic transformation mechanism that operates on "transformational patterns." Building upon our prior research, which focused on the individual application of transformational patterns, we introduce a methodology for combining these patterns. This mechanism is fully transparent and grants users control over task sequencing and the ability to manually adjust models. However, we do not address the issue of incremental changes to the source model in this paper. To demonstrate the mechanism's utility, we provide an example.

The provided example deals with the transformation of a structural model, such as a UML class diagram, into a relational database schema. While the process might seem straightforward, the transformation involves complex decisions about interpreting various relationships and properties within the source model, information that is not always fully present. The flexibility and interactive nature of transformational patterns aid in handling such complexities.

We discuss the concept of Triple Graph Grammars (TGGs), which encompass three interconnected graphs: the source model, the target model, and a graph describing the relationship between these two models. The production rules in TGGs simultaneously modify all three graphs, thus maintaining their synchronization. A transformational pattern system includes elements for both source and target models and their relationships, essentially serving as an abstract triple graph that represents a set of triple graphs because of its flexible binding.

Although we have not yet tackled incrementality in pattern systems, TGGs can handle modifications to models by applying additional productions. TGGs are bidirectional; although transformational patterns themselves are not directed, the tasks derived from them are. The assembly rules used also impose a directional bias.

A transformational pattern system ultimately represents a mapping between the source and target models once all the roles are defined, which is somewhat analogous to model mapping techniques that are typically bidirectional.

Incrementality plays a crucial role in open transformations and currently, any substantial change to the source model results in a need to reassemble the pattern system, discarding previous user decisions. Researching support for incremental transformations is necessary, as is better integration of the pattern assembly mechanism with the pattern tool to enhance user experience. Additionally, there is a need for a well-defined and intuitive notation for production rules.

Finally, we express the intention to further develop the theoretical framework of our approach, possibly through connections to graph grammars and graph processes, an area we find promising and plan to investigate in the future.