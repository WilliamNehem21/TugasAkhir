A paraphrased summary of the academic paper might read as follows:

The paper proposes an improvement to the way Structural Operational Semantics (SOS) rules are specified for programming languages. Unlike process algebra, specifying SOS for programming languages often requires auxiliary components like stores and environments, which can become cumbersome when they need to be explicitly carried through the premises and conclusions of SOS rules without change.

The authors suggest a new approach where auxiliary entities are implicitly carried over in rules unless they are directly mentioned. This offers a more streamlined notation and better rule reusability, building upon the foundations of Modular SOS (MSOS) but without the need for explicitly grouping auxiliary entities. This modification is akin to the familiar concept in imperative programming where unmentioned variables are naturally propagated.

This paper assumes readers are familiar with the conventional SOS framework and provides a re-examination of the pragmatic side of SOS, potentially leading to simplification and practical improvements. Explicit mention of unchanged entities is often necessary, although tedious. To tackle this, the paper introduces two conventions to simplify the propagation of entities where one, the 'exception convention', implicitly carries forward exceptions, while environment propagation is done explicitly.

Implicit propagation has seen use in various semantic frameworks before but the paper's contribution lies in formally including it in the operational semantics style. The paper first revisits SOS and MSOS foundations before showing how SOS can be interpreted as MSOS to allow for this implicit propagation. By referring to literature examples, the paper illustrates how existing SOS specifications are simplified using this approach.

Finally, the paper acknowledges that this technique is best suited for the static semantics of programming languages and less so for dynamic semantics that involve concurrency or complex effects. However, the two styles, known as small-step and big-step semantics, can be mixed within the same language's semantics. The paper concludes with a summary of its contribution and a mention of future development plans.

In essence, the paper aims to streamline the specification of operational semantics for programming languages by adopting implicit propagation of auxiliary entities in the rules, simplifying both the notation and the extension of language descriptions.