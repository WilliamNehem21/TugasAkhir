In modeling systems, using component-based architectures helps in organizing the various segments (and their subsections) of a system and in defining the interconnections amongst these segments, for instance, through communication protocols. This method is particularly crucial for maintaining a clear understanding of large and complex systems, including real-world systems and intricate protocols. The paper introduces a new process algebra named LOCO, which is designed as a practical language to support hierarchical modeling. This algebra accommodates not only the common asynchronous behaviors found in most languages but also synchronous behaviors, making it suitable for modeling electronic circuits (where the goal is to abstract from minor delays) or facilitating multiparty communications.

The standout feature of LOCO compared to other process algebras is its local communication mechanism and its support for multiactions. Local communication allows for specifying interactions precisely where needed within a system, rather than globally across the entire system. Multiactions refer to sets of actions happening simultaneously without inter-communication. These concepts enable an effective way to model synchronous behavior.

The introduction of multiactions was instrumental in shifting the focus to local communication, cementing LOCO as a truly compositional process algebra. The presence of local communication is essential for the language's compositional nature and also leads to the introduction of multiactions.

The Petri Box Calculus provides a more Petri-net-based method of integrating formalisms, utilizing CCS-like communication alongside multiactions to support multiparty communication. However, existing methods like SCCS and MEIJE, which incorporate synchrony into CCS, still find multiway communication tedious because components either need to anticipate their involvement in such communication or require a special component to manage it.

LOCO's syntax is introduced in Section 2 of the paper, with semantics provided in Section 3. Section 4 offers axiomatization for the algebra to support algebraic reasoning. As abstraction and data are often critical in systems, they are discussed in Sections 5 and 6. Section 7 provides illustrative examples of using LOCO to model a Petri net and a simple compositional system.

The paper stresses the importance of soundness and completeness in axiomatization. While the completeness of the axiomatization partially hinges on the completeness of derivability in the associated data algebra (which is not the focus of the paper), the authors claim that their axiomatization is relatively complete â€” assuming derivability completeness within the data algebra.

In the modeling of places within a system, LOCO uses recursive processes parameterized with the contents of the places, representing places as collections of natural numbers. Transitions, being memoryless, are modeled by recursive processes without parameters, consisting of single multiactions. Actions for receiving (rx) and sending (sx) tokens by a place or transition mimic the incoming and outgoing connections, respectively.

The entire system is represented as a parallel composition of places and transitions confined by communication constructs (modeling the links between them), combined with hiding and restrictions. Notably, some places may be bound by a blocking operator in cases where they lack incoming or outgoing connections.

In summary, the paper presents LOCO, a process algebra characterized by its compositional nature enabled by local communication and multiactions. It is further defined through its formal syntax, semantics, and has a sound and complete axiomatization. Demonstrative examples in the paper showcase the compositional capabilities of LOCO and how it can be used to model Petri nets.