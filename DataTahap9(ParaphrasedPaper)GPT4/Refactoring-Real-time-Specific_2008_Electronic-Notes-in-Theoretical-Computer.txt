The abstract system design often significantly differs from its implementation because the latter usually has many more interacting components. Including detailed architectural information in an initial specification could conceal core functions and complex reasoning. Moreover, the full implementation architecture can be unpredictable early in the development process.

Design elements are particularly crucial when specifying real-time embedded systems, in which software interacts with a constantly changing hardware environment. In such systems, essential components like clocks are omitted in abstract specifications, with sensors modeled as mere inputs, underscoring the need for a refactoring process in real-time system specifications.

The paper introduces Real-Time Object-Z, a language that extends Object-Z with the capabilities of the Timed Interval Calculus (TIC) to describe real-time constraints and interactions within a continuous environment. The authors adapt Object-Z refactoring techniques to Real-Time Object-Z, first establishing a semantics for object instantiation which is not inherently supported in the current language definition.

The study is structured as follows: Real-Time Object-Z concepts are introduced in Section 2 with a speedometer example. Section 3 details object instantiation and operation synchronization between objects. In Section 4, the Object-Z refactoring is adapted to the speedometer example. Section 5 discusses refinement and compositionality concerns. The paper concludes in Section 6.

Refinement of a class restricts possible real-time histories of class operations and the alignment of these with real-world operations such as clock pulses in clocks or wheel pulses in sensors. Implementing object instantiation in Real-Time Object-Z changes how operations are constrained temporally, increasing the potential real-time histories.

The authors illustrate how unnecessary elements from class definitions can be removed without impacting the specification, since they were introduced during the refactoring process and are not referenced in the original specification. Finally, the authors note that operation synchronization semantics do not capture exact timing or causality, which can be important in systems where operations need to occur in a specific order.