The paper discusses the rationale and approach for integrating formal methods into the software development process using the standard Unified Modeling Language (UML). The main challenge addressed is developing techniques to extract precise specifications into process calculi from UML descriptions that may contain either excessive or insufficient details. The ultimate objective is to create a design environment where users can interact with UML to formally analyze their applications without needing additional inputs or interactions.

In this process of translation from UML to formal specifications, the paper focuses on how information regarding decision points in software behavior is determined using state diagrams. The state diagrams depict the behavior of individual objects within the software. To simplify these diagrams, the authors propose concentrating on a subset of transitions specific to communications, referring to this as a restricted state diagram. Within such a diagram, a "branching point" is identified when a state has multiple outgoing transitions that correspond to a set of possible messages. Furthermore, the authors define a "skeleton" of a state diagram as a narrowed version of a restricted state diagram that includes only those transitions that are related to at least one branching point.