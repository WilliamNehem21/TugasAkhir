This academic paper introduces a new computational framework for rule-based programming that employs graphs and diagrams. Leveraging the concept of nesting within graphs, the framework offers a more intuitive approach to graph transformation through variable matching and instantiation. The introduction of shape rules serves to ensure structural consistency in nested graphs, establishing a type discipline that can identify and prevent malformed graphs.

The paper is divided into several sections. It begins with a review of nested graphs, followed by an expansion of the concept, applying it to graph transformations. Later sections focus on specifying graph shapes and refining transformation processes to align with the defined shape discipline. The paper also discusses the integration of the transformation model with DIAGEN, a diagram editor generator, providing insights into how diagrams can be automatically generated from graph representations.

The model also deals with concepts of shape analysis, a technique employed traditionally in programs that manipulate pointer structures—like doubly-linked lists or root-connected trees—to define graph shapes. While this cannot define all possible graph types, it allows a consistent and decidable type discipline for a certain class of graphs.

Although their shape discipline ensures transformations result in well-formed graphs, the authors acknowledge limitations in expressive power, such as the inability to delineate arbitrary control flow graphs without additional embedding rules. Despite this, the transformation framework maintains its consistency and the advantage of keeping graphs variable-free, an important aspect for most graphical computations.

The paper concludes by highlighting the potential applications of this model in programming and diagrammatic tools, outlining areas for future research to address challenges such as the non-determinism that can lead to computational inefficiencies. By designing rule patterns, nesting structures, and shapes effectively, the authors suggest that this non-determinism can be mitigated.