This academic paper addresses the development of multiple tools designed to aid in writing parallel programs, yet acknowledges that these tools can be obscure or difficult to utilize within the scientific community. Notably, existing tools were created for specific purposes and there is a recognized gap in tools that can effectively bring together different methods of parallel programming.

To resolve the issue of integration, the researchers employed a virtualization strategy using containers, also known as operating-system-level virtualization. This work features the deployment of three distinct containers: the first for a parallel programming skeleton tool, the second housing a parallelizing compiler, and the third containing an online code editor to facilitate the support of the other tools.

The paper is structured as follows: Section 2 introduces concepts essential to the research, including containers, microservices, and cellular automata. Section 3 examines studies similar to the one presented. Section 4 introduces a service-oriented architecture proposed for the creation of parallel programs. Section 5 demonstrates how the game of life is structured using this framework. Section 6 evaluates the microservice approach, and Section 7 wraps up with the conclusions and prospects for future research.

Parcel-6, a computing library implemented in C targeting multiprocessor computers, clusters, and grids, is discussed. It seamlessly integrates with C and C++ programs and can automatically parallelize source code for multiprocessor systems.

Distinct from tools like Parallware Trainer, which uses compiler directives (OpenMP and OpenACC) in a monolithic manner, this work provides functionalities as microservices. Each microservice operates as a separate entity connected to a central service, aiding in parallel programming particularly for cellular automaton (CA) models.

A stencil template for a CA model in C99 is provided by the parallel templates (PT) service, which users can modify through the code editor (CE) service and subsequently parallelize with the pragcc (PC) service. The collective prototype or application is referred to as 'Coder', with a detailed description of services and the operation of the full application provided within the paper.

The conducted experiment evaluates optimizations suggested by the tool across different cellular space sizes: 2502, 5002, 7502, 10002, 12502, and 15002, to examine the impact on performance as the size increases. Each grid size undergoes 100 CA generations, with the processing time for each size recorded over 10 iterations to minimize the effect of outliers. The time required to simulate 100 generations is measured in seconds, and details on the hardware and software used in the experiment are also supplied.