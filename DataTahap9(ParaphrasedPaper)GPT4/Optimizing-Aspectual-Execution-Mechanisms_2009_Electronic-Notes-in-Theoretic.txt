This paper addresses how to improve the efficiency of executing aspect-oriented programs (AOP) by enhancing the virtual machine they run on, specifically focusing on Java-based AOP.

Originally, AOP was implemented by translating aspect-oriented constructs into Java bytecode, which is then executed on a standard Java Virtual Machine (JVM). However, this method offers limited optimization opportunities because it's confined to the constraints of Java bytecode. Alternatively, modifying the JVM to include aspect-oriented features can lead to more substantial optimization gains, as it enables tailored weaving strategies considering memory and computational power constraints.

The authors present their method of optimizing aspect execution in the JamVM, a virtual machine compatible with Java, making it suitable for embedded devices with limited resources. They adjusted the virtual machine to optimize different parts of the aspect execution mechanism for ObjectTeams/Java (OT/J), an AOP language. Early results showed significant reductions in execution time.

The paper is organized into sections that introduce the basics of AOP, detail the optimization of aspect execution, describe the improvements made to the existing OT/J execution environment supported by experimental results, review related work, and finally, conclude with a discussion on future work.

AOP allows for better modularization by defining crosscutting concerns separately from the core functionality. Such concerns are implemented in aspect modules, which are then woven into the base program at specified join points. The weaving can be either static (at compile time), increasing code size, or dynamic (at runtime or during execution), offering more flexibility but also incurring more overhead.

To optimize the weaving process and the execution of aspect-oriented code, the authors proposed improvements such as introducing a new bytecode instruction for aspect dispatch and reducing the performance cost of dynamic method lookups. This involved technical changes to avoid unnecessary operations and make the dispatch mechanism more efficient.

The JamVM was selected for the implementation because it is open-source, extensible, performant, and compatible with OT/J, aside from being small enough for embedded devices. The authors extended the JamVM to support optimized team (aspect) registration mechanisms at the VM level and adapted the existing weaving strategy to utilize this new mechanism.

Their initial experiments confirmed a substantial enhancement in aspect activation performance. They anticipate that by implementing the full range of proposed optimizations, they will achieve even greater improvements for aspect-oriented applications in embedded systems.

The authors conclude by emphasizing the importance of applying software engineering methods such as AOP to the growing field of embedded software. They plan to further investigate and implement additional optimizations and consider hybrid weaving strategies.

The research was funded by the German Science Foundation and received additional support from a student assistant for the implementation and measurement analysis.