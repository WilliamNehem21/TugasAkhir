This paper introduces ProTest, an automatic test environment for B specifications that employs ProB, a model checker, and animation tool for B. ProTest extends the test case generation methods described by Dick and Faivre by using partition analysis of state invariants and operation preconditions to generate test cases. This process can be fully automated if the implementation adheres to certain guidelines provided by the authors. The methodology is exemplified through an industrial case study, and the results of their approach are summarized as follows:

1. ProTest automatically produces test cases by partitioning the state space, animating specifications, running implementations, and providing verdicts on whether the implementations pass the tests, with some current limitations on operation arguments and results.
2. The paper is organized into sections covering related work, the authors' approach, implementation, and an analysis of the test environment, concluding with final remarks.

Legeard et al.'s BZ Testing Tool (BZ-TT), which derives test cases from Z or B specifications, is highlighted for its similarities to ProTest. BZ-TT assumes finite enumerated sets and a single B machine. Test case generation is a multi-step process that culminates in a full state space exploration through ProB to create a finite state machine (FSM).

ProB itself ensures the consistency of B machines by model and constraint-based checking. It uses SICStus Prolog and pillow packages to translate B machines into a Prolog term representation suitable for systematic state space exploration. ProB can provide alerts for invariant violations and supports random animation of B machines.

ProTest currently handles Java implementations with some limitations, facilitating automatic verdict assignment and maintaining simple namespace mappings between specifications and implementations. The approach to testing includes simultaneous specification animation and code execution with strategic control points to compare the states and report mismatches.

Partition analysis is compared with work from other researchers, emphasizing the authorsâ€™ method of strengthening operation preconditions to create effective partitions. Unlike BZ-TT, ProTest does not currently use cost functions to further partition the input space but could integrate this enhancement in the future.

The paper also accounts for operation instances that may be unreachable in model checking but can be identified using constraint-based checking in ProB. ProTest's unique aspects include different approaches to partition analysis, simultaneous animation and code execution, automatic verdict assignment, and addressing non-determinism.

The U2B tool from Snook and Butler, which translates UML to B, is mentioned as a compatible tool for integrating with ProTest, allowing for mechanical test case generation from UML specifications and indirectly establishing the correspondence between UML specifications and implementations.

Finally, the paper concludes with affirming the efficacy of ProTest through a case study and discusses its support for handling non-determinism and generating robust test cases, albeit with some restrictions. Additionally, the authors provide some B specification code as an example.