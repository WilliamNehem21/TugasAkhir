In model-based testing, the use of formal models is crucial in specifying system specifications and for generating test cases based on specific criteria. Two commonly used models are Finite State Machines (FSMs) and Extended Finite State Machines (EFSMs). An FSM consists of a finite number of states and transitions, each transition being defined by an entering state, an exiting state, an input, and an output. This framework is, however, limited to modeling only the control aspects of a system. On the other hand, EFSMs build upon FSMs by incorporating variables, predicate (guard conditions), and operations (assignments), allowing them to specify both control and data aspects of the system. Owing to this ability to model data, EFSMs were selected in the discussed paper as the preferred modeling approach for generating test data from formal models.

When generating test data that meets specific constraints, search-based methods can be employed similarly to constraint-based techniques, which involve determining path constraints. The main distinction lies in search-based testing reformulating the test data generation process as a function optimization problem. Solutions to this optimization problem are sought using metaheuristic algorithms such as genetic algorithms, ant colony optimization, or particle swarm optimization, with the optimal individual (showing a fitness value of zero) being selected as the test data.

Symbolic execution is a static analysis approach that uses symbolic rather than actual values to execute a program. This leads to expressions that represent relationships between inputs and outputs, valuable for software testing.

Genetic algorithms (GAs), inspired by the laws of biological evolution, are a type of randomized search method with capabilities for parallel and global optimization. They can autonomously explore and navigate an optimized search space, adjusting the search direction as needed. Given their advantages, genetic algorithms have found widespread application in combinatorial optimization, machine learning, and notably in search-based software testing.

In search-based software testing, translating a software testing challenge into an optimization problem is key. For generating test data for EFSM paths, it firstly requires computing symbolic expressions for each path through data flow dependence analysis. Genetic algorithms are then used to find the optimal solution for these symbolic expressions, which are treated as functions. Test data are represented as individuals within the genetic algorithmâ€™s search process and are encoded using the algorithm's own encoding mechanisms.

The described method represents guard conditions on transitions not as nested if statements but in parallel form. Guard conditions connected by 'and' operators are also depicted in parallelism, as opposed to nested formats. When guard conditions are linked by 'or' operators, they are divided into separate transitions. The fitness of such a guard condition is determined by taking the minimum fitness value across these transitions.

Path constraints in the model are expressed via parallel "if" statements. These constraints consist of guard conditions on each transition connected by 'and' operators and are shown in parallel form, simplifying the complexity. Conditions within guard conditions connected by 'and' are represented similarly, while those connected by 'or' are broken down into individual transitions, each with its own fitness evaluation.