The concept of categorical trace was first introduced by Joyal, Street, and Verity in a notable paper whose inspiration stemmed from algebraic topology and knot theory. More recently, this work has found a variety of uses in computer science, as outlined in referenced documents [1,3,20].

Further developments in this area have explored the idea of partial traces. The transition from the abstract notion of trace to partial traces is not an entirely fresh idea. In the past, partial traces have been the subject of various investigations including Abramsky, Blute, and Panangaden's studies, Gordon Plotkin's unpublished lecture notes, work by Blute, Cockett, and Seely, among others. For an analysis comparing these different approaches, readers can refer to a specific source.

The paper revisits the concept of partial trace. It also provides a comparison between two different interpretations of formulas in a given semantics, the MGOI and denotational interpretations, which process formulas in contrasting ways. For example, in cut-free proofs, these two approaches yield identical results when interpreted within the category G(C), as stated in Proposition 4.4.

The category referenced is *-autonomous and consists of Girard types as objects with morphisms derived from the GOI interpretation of proofs. It's suggested that constructing a denotational model within this category could be more suitable than within the compact category G(C) used in the discussions above. This premise will be explored further in the complete version of the paper.

The paper also mentions that conventional denotational semantics does not explicitly represent cut-elimination, as it is implied by the compositional nature of the model category. The goal of this paper, however, is to integrate cut-elimination steps more overtly into the interpretation while allowing for direct comparison with the denotational perspective, as illustrated in Proposition 4.4.

The authors present a theorem (Theorem 6.2) in Section 6.1 offering a foundational result related to the untyped (or uni-object) GOI semantics for MLL (multiplicative linear logic), which ties into their previous research [20,21] and is connected to Danos and Regnier's investigations into path-based computing. The specifics of the GOI semantics applied here are left to be explained in other documents for thoroughness.

Lastly, the text provides a brief outline of the proof for Theorem 6.5, noting that a full proof will be available in a journal publication. In traced UDCs (uncertain data contexts), MGOI interpretations of proofs that are confined to a singular object 'u' can be illustrated using symmetric permutation matrices with zero diagonal entries, following Proposition 6.1.