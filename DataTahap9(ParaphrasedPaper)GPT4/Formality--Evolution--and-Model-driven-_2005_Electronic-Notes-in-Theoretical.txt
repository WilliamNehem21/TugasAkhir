This paper discusses a model-driven approach to software engineering using a novel object-based language designed to simplify software modeling without needing to account for external protocol design and concurrent data access. The language features two inherent data types, string and nat (natural number), and allows the introduction of additional types through sets, enumeration classes, or type synonyms.

The language structure includes attributes of primitive types that are declared straightforwardly. For strings, there is a specified length component. Set-valued attributes reference other object classes and may have their own methods, which can call local methods. Derived attributes are calculated from existing attributes, such as by concatenation in the given example.

Simplified notation is possible within the context of a method, allowing omission of root qualifications when attribute names are unique, easing the notation for referencing class objects or attributes.

Preconditions are used to express requirements for a method to operate, such as ensuring that the current object and input reference specific classes and that the input is not already part of a set that will be modified by the method. Postconditions define the expected outcome, such as the inclusion of an input in a set after the method's execution.

Methods are decorated to correspond with actions within a class, like creation and destruction, or for handling optional attributes (setting or clearing).

The paper reflects on the successful development and application of this object-based language, which was influenced by the Z notation and implemented utilizing the B method. The combination has been effective in large case studies, including commercial systems, demonstrating the practical potential of this model-driven and formally underpinned approach to software engineering.