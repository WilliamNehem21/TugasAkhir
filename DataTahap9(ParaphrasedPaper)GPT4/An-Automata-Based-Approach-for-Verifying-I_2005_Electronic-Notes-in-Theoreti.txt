This paper introduces an automated method for checking finite state systems against trace-based information flow properties. It leverages Basic Security Predicates (BSPs), first put forth by Mantel, and demonstrates that these can be defined through operations that preserve regular language characteristics. This foundation allows the authors to provide a fully effective decision-making process for determining whether a finite state system complies with a specific BSP. 

Unlike other approaches such as unwinding, which rely on the transition system's architecture and may not always be conclusive, this paper's language-based technique offers a comprehensive solution suitable for all BSP-expressible information flow properties.

The paper points out the limits of access control policies in safeguarding sensitive data, as they cannot handle potential information leakage through covert channels, like trojan horses or observable system performance. Prior research predominantly uses unwinding theorems, which, although generally adequate, are not always compulsory for validating security properties. This can be due to the fact that unwinding is focused on system structure instead of the trace language that the system generates.

The authors also discuss a decision procedure rooted in language inclusion, which manipulates multiple "copies" of a system's automaton to insert specific transitions and to alter labeled states, allowing verification of complex properties. 

Ultimately, the paper succeeds in presenting a novel, complete methodology for automatic verification of trace-based information flow properties, capturing these properties through trace language operations rather than just depending on the system's structural properties. This new approach broadens the verification capabilities for ensuring information security in computing systems.