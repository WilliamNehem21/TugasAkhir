In this academic paper, the authors investigate the suitability of the Feijen and van Gasteren programming methodology for devising secure communication protocols. This methodology, rooted in formal specifications and utilizing concepts like invariants, preconditions, and postconditions, is typically used for deriving concurrent programs. The authors propose that essential security properties such as secrecy and authentication can be effectively defined and reasoned about using this approach, with some minor adaptations allowing its application within the security field.

While not offering new protocols, the authors provide a new perspective on how security protocols can be described, constructed, and analyzed. To showcase their method, they analyze an authentication protocol and a public-key distribution protocol, focusing on how these different protocols can work together cohesively.

The paper critiques the traditional post-design verification process for validating the correctness of security protocols, which is mainly achieved through tools like automated state-space exploration or interactive theorem proving. Instead, this paper promotes a more general and flexible methodology that can be integrated with other techniques used across various application domains, while also focusing on simplicity and clarity in its exposition.

Feijen and van Gasteren's method builds on Owicki and Gries' axiomatic theory, replacing execution trace reasoning with assertions and invariant-based reasoning. The authors discuss how their approach naturally avoids known vulnerabilities in established protocols like the Needham-Schroeder authentication protocol. They summarize necessary theoretical underpinnings, describe their derivation approach, and offer specifications for authentication. The authors then proceed to reconstruct authentication and public-key distribution protocols, while also examining the protocols' interactions.

The programming language used for protocol components is based on the guarded command language with semantics dictated by the weakest liberal precondition and weakest precondition predicate transformers. The authors also consider communication via messages with defined types, including plaintext, component identifiers, nonces, and keys.

The paper details how intruders, or adversaries, can impact protocol correctness and specifies methods for addressing such effects. It emphasizes the importance of balancing simplification against the potential for complicating proofs when considering the actions of intruders.

Furthermore, the work touches on the concepts of partial correctness, progress, and termination in security protocols, acknowledging that the robustness of protocol operations against denial-of-service attacks cannot be guaranteed in the model used.

Ultimately, the paper concludes that by employing the Feijen and van Gasteren method, the design of security protocols can benefit from a more structured and clear reasoning approach. The authors suggest that continued attention to annotation and the development of automatic verification tools could further enhance the methodology's effectiveness in designing and understanding security protocols, providing designers with a robust and error-averse process.