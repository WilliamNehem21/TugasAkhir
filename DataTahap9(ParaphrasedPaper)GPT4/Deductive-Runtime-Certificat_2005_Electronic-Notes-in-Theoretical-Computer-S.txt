This paper presents the concept of certified computation, which involves an algorithm providing not only a result "r" for an input "x" but also a proof that the result is correct. If the reasoning framework (axioms and rules) used for the proof is trusted, the correctness of "r" can be assured. Usually, the proof is simpler than the computation itself. The paper provides two examples of such certifying algorithms.

The authors introduce Denotational Proof Languages (DPLs) as a platform to integrate computation and deduction, guaranteeing soundness, and providing flexible means for proof construction and proof-search. DPLs have been applied to various algorithms, including sorting, compiler optimizations, and logic programming, to produce reliable proofs of their correctness.

Complete verification of software is difficult due to the limitations of deductive technology and the complexity of software. While formal proofs enhance reliability, it's impractical to prove entire systems correct. However, using partial proofs can still be beneficial for improving trust in software.

The paper discusses an algorithm that implicitly depends on certain theorems; the authors argue that making this connection explicit through proofs, such as using induction, is important for static verification of correctness.

Athena, the programming language discussed, is a higher-order strict functional language similar to Scheme and ML. This allows for features such as higher-order proof continuations, which are useful for certified computation, though not essential; other languages like Java could be adapted for DPL proofs while remaining consistent with their own specifications.

Users of this framework can introduce axioms, rules, and decision procedures as they see fit, tailoring the proofs to each application's context. The paper exemplifies this with custom inference rules that offer a vastly simpler basis for trust than the complex algorithms they replace.

The paper contrasts certified computation with static program verification, highlighting that certified computation incurs a runtime cost as the program must justify each result. However, the authors find this cost acceptable in light of the trust and reliability benefits.

In conclusion, the paper advocates for certified computation and demonstrates its feasibility and value through DPLs and the development of Athena, which combines higher-order functional programming with natural deduction to reframe algorithms as theorem provers. This approach can significantly reduce the amount of trust placed in complex algorithms and has been shown to be realistically implementable.