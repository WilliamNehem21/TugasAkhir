The paper presents a two-tiered approach for visually representing and tracking the evolution of software architectures. This method involves employing two separate visual modeling languages. The first language is used for illustrating the overall software architecture, while the second one is for establishing the behavior of individual components within that architecture. To maintain formalism and enable model transformation, graph transformations are utilized at both the architectural and component specification levels.

GenGED, a visual modeling tool, is central to the approach, as it gives designers the ability to specify both the concrete and abstract syntax for the visual languages they wish to use. This allows for the creation of new visual languages tailored to specific requirements, instead of being limited to pre-existing Architecture Description Languages (ADLs) or modeling languages. GenGED also facilitates the generation of editors for these languages and ensures the consistency between the architecture and component specification by linking their abstract syntaxes.

The paper emphasizes that an effective architecture representation should support clear visualization of component interactions and provide tool support for syntactical checks, to ensure coherence between the architecture and its components. The authors cite existing work advocating for separation of component functions from architectural coordination and note the necessity of a methodological background to permit mathematical reasoning and tool support.

The authors propose a generic visual modeling approach that uses GenGED to specify syntax and allow model changes through rule-based transformations. GenGED has been used on a variety of visual languages, such as simplified UML class diagrams, statecharts, and Petri nets.

Changes to the system are categorized as local (within a component) or global (altering the architecture), but both require consistent updates at a corresponding level. The paper includes an example that demonstrates global changes like adding a component or updating connections.

The paper argues for the utility of this approach by discussing its independence from specific visual techniques, enabling developers to create custom languages for modeling their systems' evolution. GenGED provides a visual specification format, automatic diagram editor generation, and the use of graphical constraint-solving techniques for designing layout.

Summarizing their concept, the authors see architecture evolution as the application of graph transformation rules that ensure consistency during system changes. They note that while GenGED offers significant benefits, existing visual tools tend to be restricted to fixed languages and are not always user-friendly.

Looking forward, they suggest future development of the formal basis of GenGED to support more comprehensive modeling and verification of system behavior, including invariants of components and their interactions. The authors plan to refine the GenGED tool environment and test its effectiveness through more examples and larger case studies, aiming to create a rapid prototyping environment for visual modeling.