We developed a language add-on for various process calculi that helps model the secure exchange of data using cryptographic techniques. Initially focused on symmetric cryptography, our extension also supports asymmetric encryption and digital signatures.

Process calculi are instrumental in designing security protocols, but existing systems like Lysa and spi-calculus often intertwine cryptographic modeling with the communication model, which can be limiting. We've created a decoupled approach to allow independent development of cryptographic operations within any data-exchanging process calculus.

Our extension features a term language with pattern matching to intuitively represent perfect cryptography, which is well-suited for both terms and the patterns tasked with matching them. We've allowed some flexibility; for example, patterns can be matched in ways that would violate perfect cryptography to simulate potential attacks, although we also provide a well-formedness condition to enforce perfect cryptography when desired.

With 'sieves' as a syntax feature, we can match terms with extended variables and recursions, offering another means to enforce perfect cryptography in a model. However, any process calculus using our extension will need careful handling of communication semantics.

In practice, we suggest an extended protocol narration for formalizing protocols that denote outputs, inputs, and the encryption-decryption correspondences, while embedding source and destination information within a message to simulate network addressing.

Using Alice and Bob's protocol narration, we've shown how their basic interaction translates into an extended format that includes actions for sending, receiving, and decrypting messages, assuming the use of a secure key.

Finally, we verify important characteristics of our language extension, proving that well-formedness ensures perfect cryptography. By applying the same logic to both our basic and extended models, our results affirm the robustness of our approach in terms of security.

Our language extension is not only proof-checked for semantic integrity but also offers a flexible toolkit to model various cryptographic scenarios within the realm of process calculi.