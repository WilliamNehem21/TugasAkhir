Process algebras are often perceived as a dense collection of interrelated but distinct theories aimed at describing various computing concepts such as nondeterminism, parallelism, and timing, among others. Each aspect may be characterized in different ways across various subcalculi, which are studied by different researchers. Consequently, our understanding of the connections between these subcalculi is limited and dispersed.

In 1989, the author examined the expressibility of operators within a certain process algebra as introduced in the second section. This particular algebra featured asynchronous parallel composition with standard interleaving semantics, which meant that de Simone's construction methods were not applicable. Despite this, it was found that a considerable portion of de Simone format operators could be expressed, at least to the extent of weak bisimulation, especially those satisfying the so-called idling rules. These rules allow events to involve multiple components, which is essential for constructing the supervisory term and its interactions with other terms. Nevertheless, most process algebras are limited to binary communications. It's worth noting that at the time of writing, there is still no definitive way to measure the expressibility of operators in most algebras, including the original CCS.

The author also discusses the challenge of verifying whether chosen observables are indeed exhaustive, recognizing that different objectives may necessitate different observables. Since some observables may not fully capture the intended semantics, this evaluation is often combined with other criteria such as operational correspondence.

Moving from a high-level formalism to a lower-level one, when one formalism (B) is translated into another (A), the resultant terms will comprise combinations of protocols or 'snippets of compiled code'. However, the formalism A may contain elements that are not translations from B. Though these additional elements do not appear in translations, they do manifest in the contexts of A, influencing the definition of full abstraction. As such, it's potentially unreasonable to expect encodings e(B) and e(B') to behave identically across all possible contexts of A because they will not encounter the full breadth of these contexts, only those which are translations from contexts in B.