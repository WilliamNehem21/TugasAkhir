In the paper, a new construct called "loop ctct" is introduced, which augments a pre-existing "ds" pair by adding a clause "d" and a related link "ctds." This extension ensures the validation of the "ct" assertion. However, with the introduction of the new "d" clause, two new unmet requirements emerge, "ds" and "dt." To satisfy the "ds" requirement, a clause that supports the formula is necessary.

The paper also describes a semantics for programming that views formulas as indivisible entities. This approach to semantics serves as the foundation for a tool referred to as the regular reasoner, which operates independently of the propositional reasoner. This semantics is not only crucial to the operational integrity of the regular reasoner but also vital for establishing the legitimacy of the proofs of correctness for another tool called the modal reasoner. This semantics framework adapts the language theory associated with Kleene algebras with tests.

Furthermore, the paper discusses a concept known as "quasi-branches," which are conditional branches that satisfy all their respective requirements or claims. However, the mere fulfillment of all claims by a quasi-branch does not assure the existence of a representative model. To safeguard the existence of a model, certain conditions are imposed upon quasi-branches. These conditions function as consistency safeguards for the modal reasoner, and among these, one highlighted condition is the absence of loops, or "loop freeness."