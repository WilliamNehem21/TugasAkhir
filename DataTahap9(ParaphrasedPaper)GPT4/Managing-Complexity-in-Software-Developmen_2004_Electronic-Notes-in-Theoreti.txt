Our research group is studying two advanced systems aimed at ensuring high-level security and safety: a cryptographic device (CD) intended for US Navy applications and a Fault Protection Engine (FPE) designed as a critical safety component for NASA spacecraft. The CD belongs to a set of software instruments responsible for encrypting data across multiple channels, with each channel linked to a distinct host, each possibly holding data of various security levels. The CD's function is to maintain strict separation of this data, using a separation kernel to manage data access and ensure that information from one channel does not interfere with or become affected by another. We are in the process of developing a method to formally outline and validate the CD software's adherence to these data separation protocols.

Analysis using tools such as model checkers to review system specifications for crucial characteristics can often reveal violations of those characteristics. When a model checker pinpoints a violation, it provides diagnostic data like counterexamples which assist developers in identifying potential flaws in the specification or any overlooked assumptions. Sometimes, the definition of the property being checked, rather than the specification itself, could be incorrect. Regardless of the situation, such analysis is incredibly useful, with examples of model checking uncovering safety property infringements in weapon control system specifications by contractors. Nowadays, some researchers have also started employing model checkers in different ways.

Static analysis tools offer a method to assess software without running it, automatically flagging errors and weaknesses, including uninitialized variables, faulty pointers, and issues leading to arithmetic and buffer overflows within both source code and assembler code. Tools such as CodeSurfer and Safer C specifically identify errors within C code that can lead to significant vulnerabilities. Bishop and colleagues have documented ways in which static analysis can reveal vulnerabilities in commercially available software (COTS) that's integrated into various safety-critical systems.