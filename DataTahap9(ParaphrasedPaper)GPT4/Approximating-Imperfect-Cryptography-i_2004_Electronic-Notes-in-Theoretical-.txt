Alright, let's break this down into more casual language:

Imagine you've got this way of linking two things, say thing m and thing n, by just putting them in brackets together like (m, n). And if you want to keep something secret, like m, you can lock it up with a key k using this cool thing called symmetric encryption, which is like putting your secret m into a secure box that only the key k can open. You write that as {m}k.

Now, you can actually put these brackets inside each other like a set of Russian dolls. So, you could have a secret message m locked up with key k1, and then lock that whole thing up again with another key k2. It's like putting a secure box inside another secure box. That would look like this crazy string: ({{(m, k)}k1}k2, k1).

When people try to crack the code and get inside the boxes, they can make some educated guesses. These guesses are like probabilistic patterns that guess what's inside each box and assign chances of their guess being right. If some baddie, let's call them an adversary, tries to figure out what's in the box {m}k using their hacking skills (which are just some fancy math steps that don't take forever), we can describe how likely they are to get it right. Basically, we measure how much they can learn about the secret m.

Now, we often start by thinking the adversary doesn't know anything at all. That's like saying their initial 'cheat sheet' is totally blank. But if the adversary somehow learns new tricks or gets new info, they can update their cheat sheet. This makes their guesses better and ups the chances of their figuring out the secrets in the boxes. When we talk about this, if their cheat sheet is empty, we skip mentioning it. But it's pretty important to remember that more info for the adversary means a higher chance they'll crack the codes.