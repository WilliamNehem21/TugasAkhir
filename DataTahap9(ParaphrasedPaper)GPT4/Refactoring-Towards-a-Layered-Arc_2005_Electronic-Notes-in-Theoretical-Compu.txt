This research paper presents a formal approach to refactoring object-oriented programs using specifically defined refactoring rules and programming laws. By applying these rules and laws, the paper introduces a strategy to refactor programs to achieve a layered architectural structure, which enhances software qualities such as reusability and extensibility. The authors of this paper also identify and define new refactoring rules for the ROOL language and adapt their refactoring approach during the process.

The paper is structured into six sections, beginning with an overview of ROOL and its basic programming laws, followed by the presentation of new refactoring rules. The main strategy for program refactoring is explained in subsequent sections, with an emphasis on achieving a layered architecture. A case study illustrates the refactoring strategy, which undergoes several stages ranging from monolithic class breakdown to the separation of business and data code.

The authors also audit the related literature and compare their methodology with others, emphasizing that their laws-based approach yields guaranteed behavior preservation without the need for constant testing and recompilation. They contrast this with other practices which do not provide formal guarantees of semantics preservation. 

The paper concludes with an overview of the results and insights gained from developing a formal strategy for refactoring object-oriented programs. Looking towards the future, the authors express intentions to explore existing design patterns formally and to develop a tool for automating the transformation process using programming systems such as ELAN, ultimately leading to a formal reasoning environment for program transformations.