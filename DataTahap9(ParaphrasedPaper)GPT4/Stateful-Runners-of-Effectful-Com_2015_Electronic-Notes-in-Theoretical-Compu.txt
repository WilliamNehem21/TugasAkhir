This academic paper discusses the concept of "runners" as distinguished from "handlers" in the context of computations. The key distinction highlighted is that runners possess polymorphism with respect to value sets. In essence, when managing a nondeterministic computation, such as a well-founded binary leaf tree, handlers can extract a value by folding a binary operation across the leaf labels, provided the operation is associative if the computation is represented by a nonempty list of values. Runners, on the contrary, lack this capacity. The paper also notes a pragmatic difference: handlers are viewed as a construct of programming languages, while runners are considered compilation strategies.

The author expresses gratitude to several individuals—Gordon Plotkin, Alex Simpson, Tom Schrijvers, and Nicolas Wu—for their insights on the presented material and acknowledges the feedback from the MFP reviewers. The research received funding from various sources, which include the ERDF-funded projects EXCS and Coinduction, an institutional research grant from the Estonian Ministry of Education and Research (No. IUT33-13), and a grant (No. 9475) from the Estonian Science Foundation.