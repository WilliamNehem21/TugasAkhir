This academic paper discusses a proposed approach for specifying automated deduction methods using a declarative framework rather than procedural coding. Deduction methods are outlined as inference systems with proven correctness, independent of specific implementation considerations. Algorithms for these systems should be described as strategies for applying the set inference rules, which are expressed as (potentially conditional) rewrite rules.

A rewriting language and an accompanying strategy language are the tools suggested for modularly developing both the deduction procedures and the algorithms that control their application. Within Maude, a high-performance rewriting language, inference systems are specified in system modules, while strategies are designated in strategy modules. Additionally, the paper presents a semantics for the strategy language, introduces various combinators, provides examples, and elaborates on both a prototype built in Maude and the ongoing work on a C++ implementation.

The strategy language at Maude's object level (not metalevel) permits the creation of strategy expressions to guide term rewriting. This design has derived insights from previous strategy languages and emphasizes a clear demarcation between rewrite rules in system modules and the strategy expressions contained in distinct strategy modules.

The strategy language has been applied in areas such as automated deduction and programming language semantics, giving theoretical underpinning to the strategy language for tasks like the operational semantics of the Ambient Calculus, the two-level operational semantics of Eden, a parallel functional programming language, and fundamental completion algorithms. Additionally, the paper demonstrates the use of the strategy language in creating congruence closure algorithms.

Basic strategies involve applying a rule to a term, handling both unconditional rewrites and conditional checks through a breadth-first search. Strategies permit recursion by naming and referencing strategy expressions within themselves or other strategies. Different strategy modules can exist for the same system module, controlling the rewriting in varied manners. Strategy definitions and declarations can incorporate conditions and argument patterns, allowing for adaptable and specific strategy applications.

A practical example is provided through a game described in Maude, demonstrating how different strategies could dictate gameplay choices. Finally, the paper describes the prototype implementation of the proposed strategy language using Maudeâ€™s metalevel features and outlines plans for a C++ implementation to integrate it with the rest of the Maude system. The paper concludes by considering methods for enumerating solutions by applying strategies to state terms and details on process management during search execution.