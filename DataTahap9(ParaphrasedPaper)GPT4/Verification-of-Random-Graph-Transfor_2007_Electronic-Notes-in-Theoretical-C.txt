In this study, we explore the possibility of verifying Graph Transformation Systems (GTSs) through statistical analysis. Our chosen method of verification relies on using an over-approximation strategy with Petri nets to represent the GTSs. The verifications of system properties are determined through the analysis of Petri net markings, complemented by a counterexample-guided abstraction refinement process to refine the approximations as needed. A specialized software tool named Augur has been developed to assist with this verification process.

Despite the success in verifying some GTSs through the developed approach and tool, as exemplified in the case study of red-black trees, the general problem of verification for these systems remains unsolvable due to the Turing-completeness of GTSs. However, the key question we address is how many practical GTSs can be successfully verified using our Petri net over-approximation and conventional Petri net analysis techniques. This investigation represents an initial effort to provide insight into this question.

We focus on GTSs that are modeled with a basic version of the Double Pushout (DPO) graph rewriting approach. We restrict our analysis to discrete interfaces within these rules, meaning we do not account for edge preservation or node merging or deletion, though edges can be deleted. While extending our work to accommodate non-discrete interfaces is theoretically straightforward, handling deletions, which implicate negative application conditions, poses significant challenges and would require special features like inhibitor arcs in Petri nets.

The details of the algorithm used to compute the Petri graph approximation are not explained here; however, it's an approximate unfolding algorithm designed to maintain attractive features of the GTS model, such as local changes and concurrent operations. Readers looking for more in-depth information should refer to additional sources [2,3].

We constructed GTSs with hyperedges connecting one or two nodes, imposing restrictions on edge labeling and prohibiting node deletions, hence only new added nodes to rules' right-hand sides are discussed.

We created 100 GTSs for different classes where each class is a subset of the next, keeping the size of the systems manageable for statistical analysis. We record the number of refinement steps needed during verification for each class, which increases notably with each class progression.

Overall, the statistical outcomes of this study are encouraging and suggest that the technique of approximating GTSs with Petri nets is a viable direction for GTS verification. Nevertheless, it's important to further validate these findings by comparing them with results from other techniques, though presently, we lack published results for verifying random systems with other methods.