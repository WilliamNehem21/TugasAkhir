This academic paper discusses the importance of understanding and extracting coordination logic from software systems, specifically legacy systems that integrate with third-party services or components. The authors propose a method that utilizes program analysis techniques, including dependence graphs, program slicing, and graph pattern analysis, to extract this coordination logic based on pre-defined patterns. The extracted logic is represented in a specialized graph structure from which formal coordination specifications can be generated in various formalisms.

The paper extends System Dependence Graphs (SDGs) to include object-oriented features such as partial classes and methods, delegates, events, and lambda expressionsâ€”introducing the term 'MSDG' to reference this extended structure. An overview of MSDG is provided, explaining how it captures dependencies between different program nodes, like those for control flow and control dependencies, as well as formal and actual parameters.

A substantial part of the paper is dedicated to describing how coordination patterns are discovered within a given MSDG. The algorithm for this process involves removing certain nodes and edges from the graph and adding control edges that represent dependencies in the original graph. Matching conditions help to associate pattern nodes with nodes in the MSDG.

The paper also includes an example of their algorithm in action but has to omit some code details, including how parameters for server operations are constructed and the setup of the web service proxy class. Finally, the authors visually highlight instances of the asynchronous query pattern in the code snapshot provided in an appendix, showing how their method can identify coordination patterns in the source code.

Please note that this is a high-level summary and does not delve into the technical specifics or the formal descriptions found within the paper. For a comprehensive understanding, reading the full text is recommended.