The paper discusses the fragility of software systems, which can fail from minor errors. As software becomes increasingly complex, especially with the advent of distributed systems due to the reliability and bandwidth of the internet and the growth in devices connected to the web, there's a need for new development techniques. To address this, the authors suggest creating self-managing systems that can sustain functionality amidst environmental changes. They advocate for building these systems with hierarchies of interacting feedback loops and provide insights into the design rules required.

The challenge of programming large-scale distributed systems comes with complexity factors such as scale, partial failure, security, resource management, performance, and global behavior. While each factor has been studied individually, they have not been examined collectively. The paper contributes ideas on how to approach these properties in unison.

System theory in computer science is still nascent, with no systematic application found in textbooks. The authors argue for the application of system theory to software construction and explore how to design self-managing software systems focusing on feedback loops. Although no comprehensive design techniques exist yet, organizing feedback loops and understanding their interactions is critical.

The authors discuss properties like monotonicity and strict monotonicity, which are useful in building systems with feedback, noting that determinism and confluence may also be beneficial for a feedback program design theory. Designing distributed feedback loops is challenging due to the complexities introduced by system distribution and potential partial failures.

The paper describes structured overlay networks as an example of systems that can self-organize despite nodes joining or leaving the network, which must be efficient and handle asynchronous events. In the proposed programming language, each component handles input and output events asynchronously, simplifying the process of programming with feedback loops.

The proposed approach is to build large-scale distributed systems as self-managing systems with concurrent agents interacting asynchronously and components that are modular and combine easily. The project named Selfman within the European 6th Framework Programme, aims to develop a programming methodology and implementation for such self-managing systems based on feedback loops, utilizing the Oz kernel language extended with elements from the fractal model and implemented in Mozart. The goal is to make programming and reasoning about feedback loops as straightforward as with objects or components.