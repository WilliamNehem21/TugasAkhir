In this paper, we introduce an expansion to a formalism known as hiddenccs, which previously did not feature value-passing communication. Hiddenccs facilitates the synchronization of concurrent objects in computing. Combining hidden algebra, used to specify object-oriented systems, with the process algebra CCS (Calculus of Communicating Systems), this enhanced approach supplies a framework for integrating object specifications along with their communication and synchronization characteristics tied to their methods and attributes.

We have expanded the expressive power of the hidden algebra by incorporating elements that facilitate interaction through synchronization, where objects link up via resource demands and offers, as well as communication, where methods can access attributes mimicking value-passing from one object to another. We define the operational semantics of our system through the integration of hidden algebra's model semantics with CCS's reduction rules, interpreting these interactions as part of the process. This integration results in labeled transition systems, which we then translate into rewriting logic using Maude, a high-performance logical framework. The Maude system also helps us verify temporal properties of hiddenccs specifications, utilizing its implementation of linear temporal logic.

The paper follows a structure that begins with a review of hidden algebra, followed by an introduction to CCS. We then delve into our main contributions by outlining the new specification technique, hiddenccs, and its theoretical foundations. Furthermore, we illustrate how hiddenccs operational semantics is articulated in rewriting logic, showcasing the verification of the systems using Maude. We illustrate our framework with an example using triple modular redundancy and verify this example within Maude. 

Additionally, we discuss synchronization elements as pairs (a, a), representing the need and capacity for a shared resource at an abstract level, identifying them as behavioral methods of different object components. For communication, pairs (a, a) symbolize the receipt and transmission of values along a channel; here, a represents a method and a an attribute, enabling the transference of attribute values between object components as method arguments.

The voting system is used to demonstrate our concepts, where a voter receives values, corresponds with three modules, and acknowledges the majority response. This mechanism is described through operations with synchronization and communication elements.

Ultimately, our formalism renders computational structure to CCS actions, rendering the pure CCS model adequate for synchronizing and communicating between concurrent objects. This specialization of interactions through method-method or attribute-method pairs is clear and computationally meaningful.

We emphasize that the hidden algebra adds object-oriented dimensions absent in other formalisms like LOTOS, which merges CCS/CSP dynamics with algebraic specifications. Our approach, hiddenccs, offers the advantage of clear separation between coordination and object concerns, favoring better reusability compared to other existing formalisms.