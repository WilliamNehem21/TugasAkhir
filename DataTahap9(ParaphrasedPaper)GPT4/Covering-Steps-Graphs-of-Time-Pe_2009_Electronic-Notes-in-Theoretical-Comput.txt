The article discusses an extension of the covering steps graph (CSG) technique, which was initially introduced by Vernadat et al. for untimed Petri nets, to be applicable to Time Petri Nets (TPNs). The CSG technique aggregates multiple transitions into a single macro-transition to optimize the analysis of Petri nets. The primary goal of the paper is to explore how such an abstraction method can be adjusted for TPNs, which incorporate time into the Petri net model.

The authors study how to create a condensed version of the state space in order to maintain certain properties while reducing the complexity of the system. The desired abstraction should be minimal in size, consume fewer resources, and the preserved properties should be verifiable with standard techniques.

The paper is structured as follows: Section 2 explains the TPN model and its semantics, Section 3 addresses how to abstract the TPN state space, and Section 4 focuses on adapting the covering steps graph (CSG) technique for TPN application. The authors introduce the idea of removing unnecessary information to compute successor state classes and the significance of certain constraints during this process.

The paper also discusses the challenges of applying the concept of independence in TPNs, as it may not correctly represent the nuances of this model due to the possibility of different interleavings leading to distinct state classes.

The authors present Theorem 4.4 and Lemma 4.5, which provide sufficient conditions for ensuring the convexity of amalgamated state classes reached by different interleavings of the same set of transitions. Furthermore, they describe methods to compute the union of these state classes without having to determine intermediate state classes first.

In conclusion, the authors propose a modified version of the covering steps graph technique tailored for TPNs. They reveal that combining states after various transition interleavings doesn't always result in a convex set but they outline conditions that guarantee convexity for the abstracted state class graph. Additionally, they offer a mechanism to calculate this union directly, bypassing the need for computing intermediate states beforehand.

The results are published in the proceedings of the 7th International Conference on Application of Concurrency to System Design (ACSD), published by the IEEE Computer Society Press in 2007, with an extended version accepted for publication in a special issue of the Fundamenta Informaticae journal. This work is authored by H. Boucheneb and H. Rakkay.