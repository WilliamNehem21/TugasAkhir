We demonstrate that there is a lower boundary that exceeds polynomial time yet is less than exponential for the process of converting hierarchical statecharts into a simpler, non-hierarchical form when signal communication is not considered in the resulting language. This explains why common algorithms for this conversion often become inefficient. This limitation is particularly relevant to strategies for automatic program generation based on models where flattening is involved.

Our paper is organized in the following manner: Section 2 presents both hierarchical and simplified statecharts, introduces the concept of flattening, and makes the main argument. The proof and discussion of this point are found in Section 3. Section 4 reviews relevant literature and addresses unsolved issues. We wrap up our findings in Section 5.

In many scenarios where the end language permits signal communication, the flattening algorithms don't employ it. Signal communication is known to make symbolic model checking more difficult, so such methods are not practical for model checking tools. Our theorem 2.3 offers practical insight by detailing the degree of simplification that can be expected in these scenarios and explaining the reasons behind the complexity explosion noted in other studies, all of which consider languages with signal communication but avoid using signal communication in the flattening stage.

Previous work by David et al. supports our general finding that flattening hierarchical transitions using their method may lead to an exponential increase in model size. Drusinsky and Harel have assessed the efficiency of statecharts with cooperative concurrency without examining the influence of hierarchy, whereas our findings further elucidate this aspect. Additionally, although Alur et al. discussed the effects of hierarchy on model checking and efficiency, their work did not consider the complexity of converting between concurrent hierarchical and non-hierarchical models and they used a strategy of sharing subhierarchies not commonly employed by current tools.

We have defined flattening as the process of faithfully translating a hierarchical statechart into a collection of synchronized Mealy machines, excluding signal communication. Our research establishes a lower boundary for flattening that lies between superpolynomial and subexponential complexity and examines its generalizability to different statechart dialects, including UML statecharts. We've found that hierarchy and concurrency jointly contribute to the complexity of flattening. Our proof includes a method for mapping results applicable to statecharts defined over any set of inputs to those with binary inputs.