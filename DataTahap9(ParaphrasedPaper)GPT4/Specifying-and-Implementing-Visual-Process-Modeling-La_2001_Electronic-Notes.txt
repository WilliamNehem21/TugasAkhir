This paper outlines the process by which a diagram language can be defined using graphs, graph grammars, and transformation rules. It further discusses how Diagen, a diagram editor generator, can utilize this specification to create diagram editors. These editors can serve various visual languages, especially those used for visual process modeling, as showcased through an editor and animator tailored for statecharts.

Statecharts are widely recognized for modeling reactive systems and are also integrated into UML (Unified Modeling Language). Similarly, Petri nets are visual tools that facilitate model checking to ensure properties such as liveness and deadlock absence. However, developing tools for these visual languages remains challenging.

Previous research indicated that both statecharts and Petri nets could be represented using graph transformation systems. This paper takes it a step further, suggesting the practical use of graph transformation systems in defining visual process modeling languages and subsequently generating tools, such as an editor and animation tool for statecharts, using Diagen.

The paper includes a summary of the statechart editing tool specification and the principle steps in diagram analysis. It then details how animation was integrated into the editor to represent statechart semantics. The paper also reviews related work in the field and concludes with its findings.

Diagen editors allow developers to specify compound operations that directly affect the diagram's meaning, such as deleting a state along with its connected transitions in statecharts. Additionally, Diagen offers an optional automatic layout feature that is essential when syntax-directed editing operations are defined. This feature helps maintain the diagram's structure, automatically adjusting layout after modifications and aiding free-hand editing.

The paper briefly mentions the hypergraph representation for statecharts in the diagram syntax but acknowledges that discussing the detailed reduction step for creating this structure is outside its scope.

Diagen is contrasted with other methods for specifying and generating graphical editors, which mainly differ in their editing modes: free-hand or syntax-directed. While free-hand editing allows unrestricted creation and modification, which can lead to errors, syntax-directed editing uses predefined operations to ensure the diagram's correctness but limits user freedom. Other tools, notably Genged and Vispro, use graph transformation systems to enable syntax-directed editing.

Furthermore, the paper touches upon recent work integrating visual editor generation with animation, drawing parallels to Diagen's approach but highlighting the difference that Diagen supports both free-hand and syntax-directed editing.

In essence, the paper presents how Diagen leverages formal graph-based specifications to create versatile and correct diagram editors with the added capability of animating diagrams like statecharts.