The paper discusses the increasing relevance of concurrency in mainstream programming due to the proliferation of multicore systems and internet-based applications, and proposes a higher-level approach to manage concurrent programming. It introduces SIMPA, a Java library extension that adds agent and artifact abstractions to help organize and structure concurrent applications. SIMPA is based on the Agents and Artifacts (A&A) meta-model, which views agents as proactive, task-oriented components and artifacts as function-oriented components that aid individual and collective agent activities.

To explore a full language extension for SIMPA, the paper outlines a core calculus combining object-orientation and concurrency theory to provide a formal foundation that can analyze properties like typing, safety, and liveness.

The paper is structured into sections detailing the A&A meta-model, the SIMPA framework, a core calculus, and the broader implications of the work. It discusses how humans concurrently use artifacts in social activities, and how agents and artifacts within SIMPA model this interaction. Key features include observable events from artifacts, no return values for operation triggers, internal agent actions for memo-space manipulation, structured activity execution through agendas, todo management with preconditions, and cyclic behavior modeling.

SIMPA programs are executable using standard Java tools, though current implementations are limited by the lack of first-class language and virtual machine support for agents and artifacts. A subset of SIMPA is analyzed to provide a structured approach for language support. The paper concludes by examining related works and summarizing the findings.