In the research paper, the authors introduce an algorithm designed to address questions similar to those discussed previously. The algorithm originates from the principles of formal verification and involves analyzing a client-server system that has been characterized using a precise formal language. This involves constructing separate models for both the client and server components. The server model, in particular, can be constructed from several sub-models, each representing individual servers within the original system.

The algorithm operates on a combined model that includes an arbitrary number of client models along with a single server model. In scholarly discussions, this type of combined model is known as a parameterized system model. Within this context, the authors focus on solving the problem of determining the maximum number of clients, which can be viewed as calculating the highest value of 'k' for the system.

To illustrate their approach, the authors present an example section of a model designed for a hypothetical airport internet payment system, which serves multiple airline clients. In this model, clients, symbolized by the "token" component, are granted internet access either by authenticating or purchasing the service. Clients may enjoy either prepaid sessions or complimentary sessions if they hold a valid first-class or business-class flight ticket.

The payment system's control component is divided into three separate, parallel parts. The first part deals with recognizing invalid tokens at the conclusion of an internet session. The second manages the adjustment of prepaid time when a token becomes invalid. Lastly, the third part oversees the creation of tokens to initiate an internet session and their subsequent invalidation to mark session termination.

Additionally, the paper notes that systems with diverse user types can be expressed using so-called c-u models. These models can represent systems with a control part alongside a finite assortment of unique user types. In a c-u model, a user (or token) initially makes a non-deterministic selection among potential behaviors and then operates as the chosen user type. The payment system model example includes tokens choosing between prepaid access or free internet access.

The authors assert that it's essential for this client-server (c-u) system to support either an unbounded number of concurrent internet connections or have a limit higher than the potential number of clients, which could be a large number (such as 10^10).

The main goal of the paper is to propose an algorithm that can effectively compute a bound for c-u models applied to genuine client-server architectures. The described algorithm represents a refinement of an earlier algorithm, and a comparative analysis of the two can be found in the related work section.

Finally, the authors provide a more complex example, illustrating how a specific data tuple from the airport payment system model segregates into several 3+1 tuples, further detailing the working of the refined algorithm for real-world systems.