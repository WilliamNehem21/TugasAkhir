The academic paper presents the ASPIC input language grammar, which can be found in a research report. ASPIC language includes a non-deterministic operation (xj:=?), signifying that any information regarding the variable x is lost, this enhancement increases the language's expressivity by enabling the encoding of all affine relations.

A modified version of the Tarjan algorithm is employed with precomputation to utilize acceleration techniques. The automaton's structure is adjusted, including node splitting. The iteration process involves a standard fixpoint iteration, but when encountering accelerable loops, a (post) fixpoint is computed locally thanks to acceleration techniques.

The analysis begins with preprocessing transition functions, categorizing action types (identity, translation, etc.), guard complexities, and assessing transition's accelerability. Precomputed data such as postconditions and additional rays are stored in an internal structure.

After the modified automaton's fixpoint iteration, the final results are calculated with respect to the initial automaton's control points by merging (convex hull) the invariants of split control points.

ASPIC is built on a generic fixpoint analyzer, ANALYSEUR 4, with a polyhedral library, NewPolka 5, which includes an OCaml interface, all integrated into the APRON interface. The codebase, without NewPolka, is 20,000 lines of OCaml code.

The parser for C2FSM is written in OCaml using OCamlYacc, providing an XML representation of the abstract syntax tree. It has basic error detection and recommends using a standard C compiler beforehand. Since C assignments return values, which can lead to complex expressions, C2FSM unwinds these, possibly creating multiple states per statement, following an innermost-leftmost execution policy.

C2FSM expands control statements (while, for, if, etc.) into an automaton, opting for simplicity over minimization at this stage. It also implements a construct converting into a conditional goto to an error state, which may be verified or dismissed during automaton simplification.

Experiments with ASPIC suggest the proposed method is precise and effective. Results are available on the ASPIC website. Comparisons are made with other tools â€“ NBAC, LASH, FaSTer, STInG, and InvGen, each employing different techniques for invariant computation, with their own advantages and limitations.

C2FSM could potentially use existing C parsers, such as those of SUIF, but these parsers don't create automatons or perform the necessary approximations for static analysis. SUIF and related works focus on compilation rather than static analysis representation.

In summary, the research discusses improvements in static analysis using ASPIC, its integration with existing tools, comparison with other analysis techniques, and the adaptability of the ASPIC input language to enhance expressivity.