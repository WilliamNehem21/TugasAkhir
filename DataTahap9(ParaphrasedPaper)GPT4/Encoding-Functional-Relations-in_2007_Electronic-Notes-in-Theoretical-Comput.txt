The academic paper discusses the process of converting a Scunak signature into a Twelf or Automath signature for type-checking purposes. In both systems, one starts with the declaration of three fundamental type families that correspond to objects, propositions, and proofs. During the translation process, any occurrence of class types is addressed by currying to fit into the respective type systems.

For the conversion to work, the original Scunak signature should pass the type-checking using a simplified typing system that does not rely on proof irrelevance. Once this condition is met, the Twelf and Automath files created as a result of the translation should be correctly typed. The authors note that they have eliminated all critical uses of proof irrelevance to ensure the Twelf and Automath files type-check properly. Twelf, specifically, may require manual addition of `%abbrev` directives for certain abbreviations.

The paper goes further to describe how to build a mathematical infrastructure using axioms of set theory, including propositional connectives, bounded quantification, construction of pairs, and the definition of binary relations. These are the basics for creating functions at the object level.

A specific example is given with a Kuratowski pairâ€”a set defined by the existence of two elements u and v that satisfy a particularly structured set relation. Bounded quantification is utilized in this definition, and the paper explains that one can show the existence of such elements within a given set A.

Moreover, the document details object-level application by distinguishing between objects and their accompanying proofs that they fulfill certain conditions, a process which is managed differently in Scunak compared to Twelf. Specifically, in Twelf, an application function (`ap`) requires additional arguments to separate objects from their proofs.

Thus, when translating from Scunak to Twelf or Automath, it is noted that abbreviations in Scunak that return class types correspond to more abbreviations due to this separation between objects and proofs. For Twelf, there is also the need to declare certain abbreviations explicitly when some arguments are not strictly used.

The paper concludes by highlighting Scunak's benefits for specifying set theory and representing mathematics. One key advantage of Scunak is the use of class types, which facilitate treating arbitrary predicates as subtypes of a general type for mathematical objects. Additionally, Scunak's PAM (Predicate Abstract Machine) syntax is praised for providing a natural method to specify types and terms.