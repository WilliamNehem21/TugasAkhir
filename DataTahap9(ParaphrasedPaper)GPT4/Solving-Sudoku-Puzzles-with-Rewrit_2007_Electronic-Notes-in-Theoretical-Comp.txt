Rewriting logic is a system for defining concurrent and changing computational processes that can handle states and highly unpredictable computations. It is praised for being a versatile and comprehensive framework for defining the semantics of various languages and models of concurrency. Users have the autonomy to create syntax with full discretion over the choice of operators and structure to fit the specific problem at hand.

An academic paper describes the non-deterministic application of three standard processes—scanning, marking, and analysis—in Sudoku solving. These techniques must be strategically combined to avoid combinatorial explosion and to solve puzzles efficiently. Scanning stops when no new numbers can be identified, leading to marking candidate numbers in cells using subscript or dot notations, the latter being more suitable for small spaces.

In solving Sudoku, the paper focuses on an analytical elimination strategy, supported by three types of simplification rules that consider one, two, or three elements, in addition to scanning-related rules and two "what-if" split rules. Each rule's validity is inherent in its definition, but their application doesn’t always yield a consistent solution path; however, uniqueness in a Sudoku solution is guaranteed. Although rule 7 can introduce a new Sudoku puzzle, the system ultimately terminates because each rule application reduces the number of possible numbers in a cell.

The paper discusses specifying a Sudoku solving procedure using Maude and warns against blindly applying rewrite rules to prevent combinatorial explosions. To control rule application, Maude incorporates a strategic language framework, built upon an extension called Full Maude, simplifying parameterization and object-oriented module manipulation. The study only employs a limited subset of the strategic language, directing readers to external sources for comprehensive details.

The Maude module defined within the research implements three strategies. The first strategy sequentially attempts to apply the first six simplification rules. The second strategy attempts to use the two Sudoku split rules in sequence. The final strategy, 'solve,' combines the previous strategies, applying the first set of rules and then, if unsuccessful, employing the split rules, continuing iteratively as indicated by the 'bang!' notation.