Concepts of type coercion, which adapt values to different types, are common in various programming contexts, such as subtype compilation, unboxing, combined type systems, and contract programming. These typically occur in simpler type systems. Our work extends type coercions to more complex, higher-order polymorphic type systems that include singleton and dependent kinds. These complex kinds introduce challenges that require us to define new forms of coercion among higher kind levels, yet we've managed to encode these higher kind coercions.

The principles we use to define these theoretical frameworks adhere to conventional standards. Specifically, the rules regarding singletons and extensionality align closely with those proposed by Stone and Harper. While the full type system details are in the appendix, this paper focuses on the unique elements of our calculus.

Previous research, including our earlier studies, has explored dynamic type generation for abstract types. Similarly, the idea of higher-order coercion is not new. However, this paper is the first to investigate these concepts within a type system featuring both translucency and type analysis, as well as dependent kinds.