This academic paper describes the development of formalisms within SimThesys, a framework for defining and analyzing performance-oriented formal models. The paper outlines the process of implementing three well-known modeling languages and explains how the use of reusable solving engines facilitates the solution of models. SimThesys relies on a clear definition of syntax and semantics for the elements of a formalism and integrates with existing tools like DrawNet and the Osmosys framework.

The paper is structured to introduce SimThesys's multiformalism modeling approach, explain the Exponential Transition Based family of formalisms, detail the implementations of SPN, TFCQN, and GNQN modeling languages, and present the solution engines for these formalisms. It concludes with a discussion of future work and discoveries.

SimThesys formalisms are defined by their atomic components, with each element characterized by its properties and behaviors. A high-level programming language, resembling Java, is used to implement these behaviors. Models are crafted following a formalism's rules and can be hierarchically structured, even incorporating different formalisms.

Exponential Event Formalisms (EEFs) are a family of formalisms where entities generate events characterized by exponentially distributed occurrence times. Solution engines process these events through a behavior schedule, reflecting the model's evolution.

Two types of rewards—state and impulse—are introduced for evaluating the performance of models. State rewards compute averages, such as queue lengths, based on the model's state, while impulse rewards measure event-related metrics, like queue throughput.

TFCQN, a finite capacity queue network formalism, is detailed as an implementation example. It addresses the handling of blocking mechanisms in queues and service policies such as Blocking After Service (BAS), Blocking Before Service (BBS), and Repetitive Service (RS).

The simulation process involves rescheduling events after each occurrence and executing multiple runs until a defined global time is reached. Initial states are preserved, allowing each run to start identically, and statistics are compiled at the end.

The paper demonstrates the benefits of SimThesys's approach by showcasing how different formalisms can use identical solution engines. Future research aims to broaden the application of formalisms to various real-world problems, enhance the behavior mechanism, and potentially develop a dedicated scripting language.