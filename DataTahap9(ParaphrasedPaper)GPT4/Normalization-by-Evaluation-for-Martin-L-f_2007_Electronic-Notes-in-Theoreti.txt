We express our gratitude to Thierry Coquand for his valuable conversations and insights into type theory normalization and specific guidance on normalization by evaluation. He notably suggested a more refined approach for formulating the algorithm for lambda terms in the style of Curry, as opposed to the Church-style lambda terms utilized in our early drafts. Additionally, we are appreciative of the constructive critiques provided by anonymous reviewers on earlier versions of this paper.

Regarding the gap between the mathematical framework and the Haskell implementation, it could potentially be bridged by incorporating strictness annotations within the 'tm' and 'd' data types. This would allow for an exact representation of the construction of 'd'. However, we've outlined that the Haskell program operates effectively without these strictness annotations. An alternative remedy might be to employ a strict programming language like ML, which could achieve a direct match with the mathematical exposition.