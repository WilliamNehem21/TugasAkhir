This paper discusses high-level replacement (HLR) systems as a framework used to define rewrite rules for modifying systems. These rules consist of patterns to match within a system and associated templates describing how the system should be changed, along with optional conditions that can restrict when the rules are applied. This method allows abstract specification of the circumstances and nature of system transformations.

The paper uses service-oriented computing as an example to illustrate these concepts and introduces Reo connectors as a case study. Reo is an exogenous coordination language that uses connectors to facilitate interactions among components externally. Connectors are composed of channels, which can be primitive or stateful, and manage data flow with specific constraints. Nodes within Reo are used to route data flow, and the system defines operations to allow dynamic changes to the connector topology.

The paper also explains the use of Reo connectors in coordinating web services and complex business processes. To specify the transformations of these connectors, the paper applies the theory of high-level replacement systems, where rewrite rules are described using the concept of double-pushout (DPO) derivations, a categorical construction that defines how structures are combined.

To support Reo connector transformations, the paper leverages the Eclipse Coordination Tools (ECT) project, a Java-based set of plugins within the Eclipse platform. Transformations are defined visually using the tiger EMF Model Transformation framework, which is an extension of the HLR approach discussed.

The paper advocates for the importance of good tool support in coordination applications and outlines future work, which includes integrating runtime libraries of the transformation framework with Reo's implementation.