This paper introduces preliminary efforts toward formalizing the Architecture Analysis and Design Language (AADL) by focusing on representing its data model. The authors compare two formalization methods: a set-based approach using the B modeling framework and a higher-order logic approach using the Isabelle proof assistant. They also provide an example transformation, applied to a simplified part of the AADL metamodel that involves flows.

The paper notes the AADL's relevance in modeling and reasoning about complex software/hardware systems, particularly in aviation and automotive industries, highlighting the involvement of industry partners like Airbus in the TOPCASED project, which uses AADL as its main modeling language.

The authors acknowledge the incompleteness of their formalization efforts, presenting only an early stage of their work. They define certain fundamental classes, such as `AObject`, `NamedElement`, and `Connection`, within the AADL class hierarchy and discuss inherent challenges in giving precise meaning to Ecore constructs, particularly because AADL has additional constraints that Ecore cannot express.

The paper outlines a methodology to encode an Ecore description into set theory. The authors prefer a deep embedding strategy to represent language elements as encoded constructs, rather than direct expressions in the target language (in this case, Isabelle/HOL). This approach accommodates the fixed nature of AADL's class structure, which does not allow extensions as traditional object-oriented programs might.

They detail a transformation within the B framework as an example, where the transformation adds a filter to a flow, addressing object allocation and establishing connections within the model. The transformation specification enables verification of the model's static properties and the preservation of model well-formedness.

Concluding, the authors outline two approaches to translate Ecore into different formalisms and propose that while the set-based approach fits their needs, it might be pragmatic to leverage higher-order logic proof assistants for more comprehensive support. They also contemplate approaching AADL class structures and transformations as methods within an object-oriented program to prove correctness but suggest that their chosen method might be more practical. Future research will consider the scalability of these formalization methods and the usability of logical frameworks' abstraction mechanisms.