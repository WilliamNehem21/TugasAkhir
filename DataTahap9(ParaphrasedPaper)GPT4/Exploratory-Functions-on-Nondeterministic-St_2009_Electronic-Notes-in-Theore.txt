This paper explores a typed lambda-calculus framework that focuses exclusively on sum and product types, excluding function types, to represent strategic computations as closed terms. The authors introduce non-determinism into the mix and consider the comparison of strategies through lower bisimilarity, which does not account for diverging computations.

The main objective of the paper is to determine the conditions under which a function that operates on strategies can be represented by an open term, assuming that there is an adequate level of non-determinism available.

The paper is structured as follows:

1. Introduction to the lambda-calculus framework with sum and product types and the concept of strategy representation.
   
2. In Section 2, the authors propose a calculus tailored for programming with strategies. This precise framework is used to address the challenge of defining when a function can be expressed in terms of open terms within the calculus.
   
3. Section 3 presents an important result regarding the operational semantics called the Syntactic Exploration Theorem. This theorem is then used to establish criteria for determining the definability of functions on strategies, thereby answering the research question posed by the authors.
   
4. The calculus is then modified in Section 4 to become affine, drawing inspiration from established works in the field. The authors adjust their results to fit within the context of this modified, affine calculus.
   
5. Finally, in Section 5, the paper concludes with a discussion on future research directions and potential advancements in the study of strategies in the typed lambda-calculus without function types.