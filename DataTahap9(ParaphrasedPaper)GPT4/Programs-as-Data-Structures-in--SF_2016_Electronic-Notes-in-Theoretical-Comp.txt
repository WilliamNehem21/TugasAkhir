The academic paper discusses how certain data structures can be associated with closed normal forms, enabling the support for a wide range of queries. While typical interpretations of programs do not result in normal forms due to recursive aspects being represented through fixpoint functions, traditional combinatory methods can be used to equate even recursive programs to closed normal forms.

Though it is uncommon to equate programs with closed normal forms, particularly in untyped environments, there is an acknowledgment that such an approach cannot distinguish between halting and non-halting computations. Nevertheless, by separating programs from their inputs and applying combinatory methods, programs can be made to strongly normalize, allowing their association with closed normal forms.

The correctness of the paper's theorems and lemmas has been confirmed using the Coq proof assistant, with detailed verification available in the source files. A recap of fundamental definitions and theorems is provided to compare manual and automated verification processes.

Additionally, the paper notes that there is a trend among domain-specific language users towards creating languages tailored to their fields. This is because general-purpose languages may not meet all their specialized needs. One suggested strategy is to build such a language starting from a simple core, and further advancements are likely to depend on improved techniques for program analysis and evaluation strategy definition.