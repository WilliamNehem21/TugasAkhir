The paper discusses the complexity of validating software systems where multiple features may interact with and modify shared system components or actuators. It points out that features f1 and f2 could simultaneously alter a shared variable or actuator inadvertently. Even though these interactions are typically intentional and well-coordinated, for instance through control flags like the "cls status" in a door system example, it's critical to rigorously test these systems to prevent any unintended consequences. If both features are activated at the same time, they might introduce conflicting commands to an actuator. Moreover, the paper mentions the potential complication when distinct actuators are influenced by different features, leading to opposing effects in the physical environment. To identify such complex scenarios, additional knowledge about the environment may be needed.

For testing purposes, the paper highlights the need to transform hierarchical state automata into basic flow graphs. This flattening process enables the use of test case generation algorithms that require simpler test models. The construction of test models for features f1, f2, and f3 should contemplate all possible interactions between these features. This leads to a comprehensive test model that represents the entire system's behavior. The extent to which features should be combined in the test model depends on various factors such as the safety level of the features, the degree of interdependence between them, and the number of shared variables, among other considerations.