To modernize and refine the type systems used by widely-adopted, nominally-typed object-oriented (OO) programming languages such as Java, C#, C++, and Scala, it is essential to develop an accurate mathematical model of these languages. A detailed and precise model is necessary for proper analysis and reasoning, as imprecise models lead to flawed conclusions.

NOOP is a mathematical model of nominally-typed object-oriented programming, rooted in the principles of domain theory and denotational semantics, established by pioneers such as Dana Scott and Gordon Plotkin. Unlike other research, such as the work by Reus and Streicher that ignores type information in class-based OO programming, NOOP aims to capture the nominal typing details accurately.

In NOOP, records are modeled as finite mappings from labels to fields or methods, with tags to indicate the domain of these functions. The shape of a record is defined by its set of labels. The model introduces formal definitions for class signatures, which are syntactic constructs representing the nominal information related to the interfaces of classes and their instances. The signatures are carefully composed to avoid duplicate names, and they play a critical role in defining types within OO type systems, ensuring consistent and appropriate usage of objects.

Signature closures, another concept in NOOP, consist of a signature name paired with a signature environment, upholding certain conditions to remain minimal and free of redundant signatures. These closures and their environment allow for defining exact class types and understanding the relationship between classes and their subclasses following principles of nominal typing.

NOOP demonstrates a formal alignment between inheritance at the syntactic level and subtyping at the semantic level for nominally-typed OO programming. This congruence is a result of embedding signature closures into objects, emphasizing the importance of incorporating nominal information for any accurate model of nominally-typed OO software. The NOOP model serves as a solid base for further research, such as defining a minimal nominally-typed OO language and proving its type safety through denotational semantics.