In our study, we introduce the HIDOORS project's MDA-based tooling, illustrating how model-driven architecture (MDA) can be applied to integrate real-time model checking into the development process. By incorporating verification annotations into UML (Unified Modeling Language) designs, we facilitate the dual generation of both code and a verifiable model fit for a model checker. This approach embeds model checking directly into the modeling phase, supporting early verification and reducing the chances of errors persisting into later development stages.

We propose the concept of Quality-Driven Development (QDD)â€”a novel system that combines code generation with verification. This system represents the first deliberate attempt to blend these aspects within model-driven development. We suggest expanding the standard MDA process with additional model-driven verification (MDV) stacks tailored to quality-centric sectors like real-time and embedded systems.

MDA offers various benefits like multiplatform development and alleviation of design aging issues by maintaining a strong link between code and design over time. However, MDA falls short in offering integrated methods for model verification, which is crucial for ensuring quality.

Drawing from HIDOORS, we elaborate on how real-time constraints in UML models can be verified using a specialized model checker. Additionally, we propose enhancing MDA to include a secondary verification track that runs parallel to the traditional MDA transformation stack. This verification track would consist of multiple verification platforms, exemplified by HIDOORS using a model checker and a worst-case execution time analysis (WCETA) tool to examine the Java implementation.

Our QDD approach has several merits, including early verification of real-time designs before unit testing, flexibility in choosing verification tools, and reinforcing consistency between design and code. This enforces model maintenance and mitigates design aging, as the design serves the dual purposes of code generation and model verification.

The paper delves into the verification processes in MDA, highlighting that while MDA aims to produce code from models, it generally disregards the correctness of designs. Our concept of MDV, in contrast, focuses on validating both design models and generated code. Moreover, it provides a platform for statically verifying system features using various model types, such as Petri nets or real-time state charts.

QDD offers a systematic way to approach verification across different abstraction levels. It employs assertions to bridge proofs on higher levels with those on lower levels, thus leveraging a design-supported code verification approach. This facilitates early error detection and improves developer confidence.

Concluding, we argue that QDD represents a pioneering MDA methodology for quality-sensitive software development. By harmonizing design verification with code generation, QDD aims to significantly improve both developer productivity and software reliability. With QDD, verification no longer remains an isolated task but becomes an integral part of a unified, model-driven framework, expanding MDA to meet the demands of quality-centric applications.