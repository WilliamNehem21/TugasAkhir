The academic paper discusses advancements in the field of visual languages (VLs) and graph grammar systems. The limitations of Layered Graph Grammars (LGGs) are highlighted due to the lack of negative application conditions (NACs) and other necessary rule conditions. As a solution, a new version called Contextual Layered Graph Grammars (CLGGs) has been introduced, which supports vertex embedding, NACs, and complicated predicates, as well as ensures the termination of the parsing process through layering conditions.

CLGGs are compared to Reserved Graph Grammars (RGGs), which have some embedding capabilities but do not support predicates and NACs. RGGs require local confluence of rules to allow for the use of a polynomial time parsing algorithm without the need for backtracking.

The paper describes the GenGED environment, which is used for the visual specification of VLs. A VL specification is composed of a visual alphabet defining symbol and link types, and a visual grammar consisting of a start expression and context-sensitive grammar rules that direct the creation of language-specific graphical editors. The GenGED system utilizes algebraic graph transformation and graphical constraint solving, distinguishing between abstract syntax (logical structure) and concrete syntax (layout).

The environment includes an alphabet editor and a grammar editor, which outputs alphabet rules to ensure the creation of correct visual expressions. The Abstract Graph Grammar (AGG) system is used for transforming visual expressions according to the abstract syntax, while the ParCon constraint solver manages the layout.

The proposed parsing algorithm, derived from CLGGs and critical pair analysis, has been implemented with the AGG system, enabling both syntax-directed and free editing in GenGED-generated graphical editors. GenGED facilitates the definition of both editing rules and the parse specification, which includes the handling of parse grammar rules with a left-hand side (L) and a right-hand side (R), NACs, and a set of layering conditions to ensure termination.

The paper also exemplifies the process using simplified UML class diagrams, demonstrating the establishment of relationships between class symbols and packages. It emphasizes the unique assignment of class names within each package. The layer function is defined to ensure that parsing terminates by assigning deletion and creation layers, and the sequence of rule applications is ordered by rule layers.

Finally, the paper explains that critical pair analysis, performed by AGG, needs to be done only once to generate a parse specification. This specification, alongside the visual alphabet, enables users to freely manipulate visual expressions while having their syntax checked by the AGG parser. The graphical editor visually illustrates the results of this analysis.

The reference at the end cites a work by M. Löwe and J. Müller on critical pair analysis, a technique used in single-pushout graph rewriting, which is likely to have influenced the work described in the paper.