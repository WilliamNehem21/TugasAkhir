Researchers are increasingly adopting visual rewriting methods to model the dynamics of systems represented by diagrams, shifting the focus from defining static language elements to their dynamic behavior. Graph transformations are extensively used in this context, playing a role in parsing, model animations, and transformations. The widespread use of UML (Unified Modeling Language) brings additional challenges and opportunities, including the management of software and model evolution.

The concept of high-level replacement units within graph transformations is defined within a specific formal structure. These units involve a group of objects, rules, application operators, control expressions, and graph class expressions, all within a category referred to as 'cat'. High-level replacement units are specialized transformation units that use objects from 'cat' as their start and end points and do not include imported units. Their functionality is determined by sets of derivations.

However, the success of a replacement unit is not guaranteed. If the unit encounters a problem that prevents it from completing its task, it reverts the system to its previous state, ensuring no unwanted remnants remain after the process. This rollback mechanism emphasizes the transactional nature of the units.

A crucial concern is the termination of these units. A unit may fail to terminate if it contains a rule that can be applied perpetually. The paper proposes to establish criteria for ensuring that replacement units can successfully conclude their processes.

The paper also expresses an interest in incorporating negative application conditions (NACs) into the framework. NACs, which have been found valuable in practical graph transformation applications, add another layer of complexity to the challenge of formulating termination conditions for replacement units. The authors suggest building upon existing approaches that have integrated NACs into high-level replacement systems.