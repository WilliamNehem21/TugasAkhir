This paper details an approach for building model-checkers within a framework named Tom, which combines declarative and imperative programming features. The method is exemplified through the specification of the Needham-Schroeder public-key protocol in Tom, with a focus on establishing mutual authentication between agents over an unsecured network. The behavior of agents, intruders, and security invariants enforced by the protocol are defined using Tom's rewrite rules, while the exploration of the search space uses the language's imperative features. The paper discusses several optimizations and compares the performance with other approaches.

Tom serves as a language extension, allowing added matching primitives to existing imperative languages, which is particularly useful for handling structured entities like trees or XML documents. The flexibility of Tom lies in its language and data-structure independence. The paper describes the use of associative matching in Tom through the example of a sorting algorithm, demonstrating Tom's expressiveness.

The Needham-Schroeder protocol and an associated attack, as well as a corrected version of the protocol, are presented. Tom's rewrite rules mirror the transitions of agents as they send or receive messages, effectively enabling a model-checking process that can opt for either a depth-first or breadth-first exploration strategy. This specification enables finite state space exploration, suitable for detecting potential attacks rather than proving protocol correctness in an unbounded model.

The paper goes into detail about the state transitions of agents, the optimization strategies, and how the search space is explored. Invariants for protocol correctness are also expressed using rewrite rules. The process of protocol modeling in Elan and the distinct strategies for search space exploration are discussed, particularly the flexibility and specificity benefits when using Tom over other systems.

Finally, the paper compares the ease of modeling in different approaches and optimizes the execution of the model, reporting tests on a configured workstation. The study's outcomes support the effectiveness of Tom in verifying the Needham-Schroeder public-key protocol, leveraging the strength of incorporating both declarative and imperative paradigms in protocol verification.