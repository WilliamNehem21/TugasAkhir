In this paper, the authors propose an integrated design process for embedded reactive programs with a focus on non-deterministic specifications through assume-guarantee contracts, and demonstrate early execution of reactive specifications. They apply their method to an avionics case study to explore the impact on the design flow.

Reactive systems, like those in aircraft or power plants, interact with their environments in predictable ways, and synchronous languages are essential for programming them. These systems follow a design flow that guides the development process, which includes validation methods and simulation techniques that allow observation of system behavior before full implementation.

The paper outlines their approach as follows:

1. Introducing a subset of the Lustre language for the example.
2. Presenting a system example and detailing the progressive design flow.
3. Formalizing components and demonstrating a simulation approach for networks of deterministic and non-deterministic components.
4. Implementing the framework using existing tools and discussing practical issues.
5. Discussing related work.
6. Concluding with possible future research directions.

Languages like Lustre manipulate lists of variables and can model reactive systems using step-relations, which represent system states over time. For simulation, components are expressed operationally through functions that generate traces of value, allowing for the simulation of deterministic and non-deterministic behaviors in a system.

RML, an OCaml-based language, is used for reactive systems and now includes non-deterministic behavior handling via integration with the Lurette tool. Combining Lustre and Lurette via ad hoc translations demonstrates the system, highlighting a need for automating such translations.

This work is a step towards a contract-based design flow, suggesting extensions for probabilistic behaviors, expressing contracts, and applying the methodology to Globally Asynchronous, Locally Synchronous (GALS) systems. Interest also lies in automating translations from Lustre to RML and extending language expressiveness.