This study focuses on evaluating the testability of data-flow software, particularly examining software used in critical domains such as avionics. The authors leverage the SATAN (Software Analysis Tool for Avionics Networks) method to create a testability model from the source code that originates from data-flow designs. Initially, source code is converted into Static Single Assignment (SSA) form, which is then used to construct a testability model through an automated algorithm. Analyzing the testability model identifies software components that are difficult to test.

The importance of the testing phase in software validation and verification is highlighted, noting that despite thorough testing, it is impossible to guarantee fault-free software. Testability metrics have been developed to help assess the ease or difficulty of testing, which becomes particularly valuable for complex software to manage time and costs effectively.

The paper is structured to introduce related work and the fundamental principles of the SATAN tool for testability analysis of data-flow designs. It goes on to extend the SATAN tool for evaluating code testability and describes an algorithm for computing testability measures. A case study is discussed, followed by conclusions.

Testability in the SATAN tool relies on two measures: controllability, or how easily data can be forwarded to a component's inputs, and observability, or how easily data can be propagated from a component's outputs to the software's observable outputs. These concepts are evaluated using an Information Transfer Graph (ITG), which helps to identify information paths or flows within the software. Flows represent sub-graphs that are exercised independently from the rest of the software. Test objectives are derived from these flows according to a chosen test strategy, such as progressive structural strategy or cross-checking strategy.

The process of testability analysis begins by converting C program code into the SSA form using a compiler like GCC, which is then translated into an ITG. This ITG is equipped with module capacities to form an Information Transfer Net (ITN), allowing the SATAN tool to calculate testability measures.

The paper discusses a case study where the SATAN tool identifies flows and computes testability measures for each module within these flows. It concludes that while the coding process may not significantly impact testability, some modules still require modifications to enhance their observability.

This academic paper ultimately provides insights into how the SATAN method can assist in determining and improving the testability of critical software systems by focusing on controllability, observability, and information transfer within software components.