The paper focuses on creating an Object Constraint Language (OCL) specification for the Java Card API, with the primary goal of enhancing Java Card program verification within the KeY system. The KeY system seeks to merge object-oriented design with formal verification methods. Using an existing Java Modeling Language (JML) specification as a starting point, the authors develop the OCL version to support and complement program verification efforts. 

The paper outlines challenges encountered while writing the OCL specification and reveals solutions to these issues. It also highlights key elements of the specification and reports on successful verification experiments performed on the Java Card API's reference implementation. The paper concludes with an evaluation of OCL, comparing it to JML in the context of specifying and verifying Java Card programs.

Java Card technology is used to program smart cards and employs a specialized subset of Java. The creation of the OCL specification is critical for formally verifying Java Card programs in situations where API class implementations are not available, and it also serves to formally document API behavior.

An example is provided to illustrate the use of the Java Card API specification in verification. For instance, to verify a method 'amethod' in a Java Card program, one must have either the API's implementation or its formal specification. Since the implementation is often proprietary or when methods are native, the formal specification becomes crucial. Notably, the KeY system can handle integer overflow by allowing users to define how integer types are interpreted during the verification process.

The paper acknowledges that the OCL specification does not fully replicate every aspect of the JML specification, such as certain signals clauses and assignable clauses. Nonetheless, the OCL specification tends to cover the Java Card API to a comparable extent and, in some instances, provides more detail than the JML counterpart. It also demonstrates how the OCL specification was constructed and improved.

One example covered in the paper is the verification process for the 'setkey' method in the 'deskey' class, which revealed more details in the OCL specification than in JML by specifying the conditions under which input data is directly copied into the internal attribute.

Despite challenges in fully representing arrays, which are prevalent in the Java Card API, the authors report successful verification of simple methods and more complex cases, such as the 'reset' method in the 'ownerpin' class.

In conclusion, the paper presents the authors' development of an OCL specification for Java Card API 2.2 and notes that the complete specification is available online. They affirm that the specification aided in the formal verification of Java Card programs within the KeY system, even though technical limitations prevented extensive testing. The proofs attempted were successful and automated by the KeY system. Future work includes applying the specification to real-life Java Card case studies and further formal verification endeavors as the KeY system expands to cover the full Java Card standard.