This paper explains how the T-OY system facilitates cooperative problem-solving among different constraint domains. Developed as a part of a constraint functional logic programming framework, T-OY operates on a lazy narrowing-based cooperative goal-solving calculus. It efficiently manages solver invocation and constraint projections between corresponding domains through the use of intermediary constraints.

The cooperation has been successfully implemented for Herbrand, Real arithmetic, Finite Domain, and Set constraint domains. Two specific intermediary constraints have been introduced: one bridging the Finite Domain and Real arithmetic domains, and another connecting Finite Domain and Set domains.

T-OY operates by solving goals through a demand-driven lazy narrowing strategy coupled with constraint solving. Like in Prolog, answer constraints express variable bindings. T-OY always includes a Herbrand solver and can optionally include Real and Finite Domain solvers. A beta version, soon to be released, will incorporate a Set constraint solver for handling constraints on set intervals of integers.

Constraint projection occurs during goal resolution, where a constraint is given to the solver and a corresponding mate constraint is created and sent to the paired solver. For example, a Finite Domain solver would have a Real solver as its counterpart. Specific projection rules, as referenced in the paper, are used to generate mate constraints between the Finite and Real domains.

Furthermore, the paper illustrates with an example how projection can effectively reduce computational time by pruning the domains of variables. Notably, not all constraints go through projection; some, like the labeling constraint, do not.

The T-OY system's interface is command-driven, accepting commands, goals, and expressions through a prompt. Users can write T-OY programs in text files with a .toy extension and consult them before solving goals. The system offers simple commands for file compilation and loading, with an even more straightforward process provided by the ACIDE environment, which includes buttons for running solvers and loading programs.

Lastly, the paper presents an example problem solved using the Finite Domain and Set solvers in T-OY, demonstrating the use of specific constraint functions and operators within these domains. The paper emphasizes the practical advantages offered by T-OY's cooperation mechanism across four primary constraint computation domains and the intermediary domain for linking computations.

In summary, this paper highlights the T-OY system's user-oriented approach to cooperative problem-solving across multiple constraint domains, effectively leveraging a variety of solvers and projections to optimize computation within functional logic programming.