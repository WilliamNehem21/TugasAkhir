The paper discusses the advancements in the semantics of quantum programming languages. Initially, the first author provided denotational semantics for a quantum flowchart language known as QFC, utilizing a categorical approach based on superoperators, which are certain kinds of completely positive maps. This initial semantics was compositional but QFC lacked the concept of higher-order functions, a key feature of functional programming languages.

To remedy this, a typed lambda calculus for quantum computation was introduced, which extended QFC's capabilities by integrating quantum and classical data types with classical control structures and added lambda abstractions for handling function closures. The language incorporated a type system that clearly differentiated between data that could be duplicated and data that could not, resolving issues around duplicability.

The paper now focuses on the study of the linear quantum lambda calculus, a subset of the quantum lambda calculus that imposes a linearity constraint, mandating that each value, whether quantum or classical, is used exactly once. This linear version is notable for being less dependent on the order of term evaluation compared to its non-linear counterpart. The authors provide denotational semantics for the linear quantum lambda calculus within a category of completely positive maps and establish full abstraction in relation to operational semantics.

Prior work described an operational semantics for quantum computation using a lambda calculus with classical control. This paper redefines those earlier results within the context of the linear variant of the language. Despite these contributions, several open questions remain, including the precise characterization of denotational semantics as a subset of completely positive maps, the exploration of categorical semantics for the linear version, and the potential expansion of the language to include weakening and duplication to ultimately find a denotational semantics for the complete quantum lambda calculus.