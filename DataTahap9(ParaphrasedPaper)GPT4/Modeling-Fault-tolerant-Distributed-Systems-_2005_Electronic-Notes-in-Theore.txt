Due to the critical nature of embedded systems, it is vital to ensure they are resilient to processor failures, to the extent that such resilience could inform their distributed architecture. In the event of a processor failure, the system must continue to function without the loss of the entire application. The paper focuses on using formal methods to model systems with guaranteed fault tolerance, with particular attention to discrete controller synthesis (DCS). DCS offers advantages like system correctness and controller modifiability using automated tools, allowing for the evaluation of various fault-tolerance scenarios.

The authors follow a synchronous approach for designing reactive systems. This choice is informed by existing industrial results and tools within the synchronous model framework. Under the assumption that only processors can fail in a fail-silent mode, the authors propose leveraging the hardware redundancy in distributed systems. They suggest using existing processors for dynamic task reassignment in the event of failures, ensuring continued functionality despite reduced processor availability.

The paper describes modeling processors as labeled transition systems (LTSs) and defines objectives for fault tolerance, with controllers enabling the system to satisfy these objectives by restricting transitions. The set of inputs is divided into controllable and uncontrollable subsets, with the controller influencing only transitions tied to controllable inputs.

The authors highlight the interplay between system invariance and reachability objectives and suggest that optimization should be a final step that selects among correct solutions. Real-time constraints are factored into the system design, with worst-case execution time (WCET) analysis informing the CPU load assignments for each task on a processor.

The model combines LTSs representing each processor, which are bound by capacity limits. Failure patterns and assumptions are defined by the system designer, who models the behaviors and reactions to potential fault scenarios.

Properties and objectives are declaratively specified to enforce fault tolerance, where the synthesis process ensures the system's ability to move to safe states in response to failures. Constraints based on the system's architecture and task distribution can influence the synthesis outcome.

Finally, the paper showcases a modeling approach for real-time distributed systems that automatically generates controllers for fault tolerance, with DCS applied to LTS models. The controller adapts to failures by task migration, with the model accommodating different objectives such as execution consistency and functionality fulfillment. The method is constrained by current DCS tool capacities, but there is optimism for future advancements. The flexibility of this approach allows for the model's application across diverse circumstances, such as varying power requirements in different devices.