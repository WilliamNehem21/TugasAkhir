The Service-Oriented Architecture (SOA) is widely utilized for constructing distributed systems. Given the abundance of web services providing similar functionalities, it has become crucial to assess services based on both functionality and quality (non-functional attributes). Bass suggests applying quality scenarios to define application quality attributes with precision.

To identify the optimal service, one must define an optimization strategy that considers a client's specified quality attribute combinations. These are outlined through quality scenarios during the design phase. However, achieving these quality scenarios in real-time can be challenging due to external factors such as third-party service failures or issues in legacy systems providing the services.

The paper is structured as follows: Section 2 discusses self-adaptive systems, Section 3 introduces a case study for validating the proposal, Section 4 describes the proposal from development to implementation, Section 5 discusses the experimental results supporting the proposal, Section 6 reviews other similar proposals focused on quality attributes, and Section 7 concludes with the findings and closing thoughts on the proposal.

Self-adaptive systems can adjust autonomously to operating condition changes, minimizing or eliminating the need for human intervention to maintain their reliability, robustness, and availability. These systems actively monitor and respond to changes, continuing their lifecycle post-deployment.

The case study examines the property registry business process, with particular emphasis on the landlord risk scoring activity to ensure the potential provider has no legal constraints. This critical activity requires the system to self-adapt and find alternative service options to maintain uninterrupted operations should faults occur.

The utility repository contains data on adaptation preferences. Under the defined DSL, when a quality scenario fails, alternatives services are considered to substitute the faulty one. Preference is given to those offering the highest number of quality scenarios.

The self-adaptive system model integrates the domain and goal repository components, featuring the crucial element of a virtual service (VS). The VS acts as a layer shielding consumers from service specifics, enabling the search for better services during runtime and ensuring quality scenario compliance. If a scenario is violated, the VS applies adaptation rules and swaps the offending service with a suitable replacement.

Ensuring service alignment with quality scenarios involves assessing uncertain attributes such as response time, availability, and reliability, which can fluctuate.

A quality-scenario-based method is proposed for identifying self-adaptation opportunities in software architecture during design. This method extends the ABC/ADL architecture description language and employs the reflective middleware PKUAS to perform runtime adjustments. One limitation noted is the reliance on EJB components, which, while functional, impacts interoperability and scalability. The proposal also raises concerns about incorporating new components and the separation between design and actual implementation, which poses a risk of deviation from the proposed solutions.

This paper underscores the importance of considering both functional and quality attributes to select the best web services and introduces a self-adaptive system model that aims to ensure continued service quality throughout the system's lifecycle.