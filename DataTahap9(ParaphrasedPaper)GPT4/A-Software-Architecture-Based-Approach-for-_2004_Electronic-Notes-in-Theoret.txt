As the number and complexity of middleware systems and services grow, they are often described using APIs and informal written descriptions, which can be ambiguous and hinder a clear understanding. This paper proposes structuring middleware by using software architecture principles and formalizing behavior through the LOTOS language to overcome these challenges. The use of software architecture principles clarifies structural aspects of middleware, while LOTOS formalization allows for the verification of behavioral properties.

The approach begins by defining the middleware architecture using elements like components and connectors. Then, LOTOS is employed as an Architectural Description Language (ADL) to give a precise account of how the middleware behaves. This paper is not focused on any specific middleware product but rather on the approach itself.

Previous research has employed formal description techniques with middleware, such as in the RM-ODP's trader service. However, software architecture principles were not integrated into those formal specifications. Only a few ADLs, like Wright, include behavior descriptions, but the tools for verifying behavioral properties are lacking. The alignment of middleware with software architecture principles is noted, though not often formally approached.

The paper outlines the methodology by defining middleware architectures using software architecture constructs. LOTOS is then presented as the means for describing the software architecture of the middleware. The approach is exemplified through specifying CORBA and its transaction service in LOTOS. The communication service, uniquely functioning as a connector, is distinguished from other services, which are modeled as components.

LOTOS descriptions comprise a hierarchy of active components or processes, defining a system's behavior through internal and external actions, events, and ports. The paper specifically looks at decomposing middleware services into client and server parts, except for the communication service, which acts as a connector on both sides.

It highlights the CORBA standard, which lists various distributed services expected from middleware. The paper narrows in on the CORBA transaction service, describing it through six interfaces using LOTOS, with each interface modeled as a component within the software architecture.

The research demonstrates how using LOTOS to describe middleware allows developers to analyze behavior using tools like the CADP toolbox. Though LOTOS isn't initially designed as an ADL and has limitations (e.g., modeling components, connectors, interfaces, and architectural styles), its behavioral description capabilities and tool support offer significant advantages.