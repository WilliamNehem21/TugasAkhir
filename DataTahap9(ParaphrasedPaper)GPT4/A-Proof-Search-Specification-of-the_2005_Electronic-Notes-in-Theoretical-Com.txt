The paper discusses a formalism for concurrent computing where "p," "q," "r," "s," and "t" represent processes, and lower-case letters like "a," "b," "c," "d," "x," "y," "z" represent names. The use of "y" in "x(y).p" is an example of a variable binding, with "p" being the scope of this binding.

The paper then explores two types of bisimilarity linked to the late transition system: strong late bisimilarity and strong open bisimilarity. The main distinction between these two relates to whether the excluded middle axiom applies to names or not. The initial definitions of both bisimilarities are referenced from other works.

When implementing proof search based on late bisimulation, the challenge is to identify when to apply instances of the excluded middle axiom. Answering this could simplify proof search by aligning it with open bisimulation strategies. Two potential methods for implementation are mentioned:

1. The aggressive approach, which applies the excluded middle to all potential names in the process expression, although it could lead to an unnecessarily complex search with many cases.
  
2. The conservative approach, which only applies the excluded middle when necessary, such as when a mismatch between an eigenvariable and a constant suggests the need for this axiom.

The paper leaves the specifics of these strategies for future research.