To paraphrase the provided text:

As the outside world is constantly changing, software systems used to model it must be continuously updated and altered. Developing and managing these evolving software systems is a challenging task. The use of an organized process and a robust modeling notation is crucial for managing the construction and documentation of models at various stages of software development. The Rational Unified Process (RUP) has become a prominent software development methodology, and it uses the Unified Modeling Language (UML) as its primary modeling language, which is widely accepted for a range of software applications.

The paper outlines the RUP-related activities and UML models and provides an overview of the authors' approach. It introduces an object-oriented notation for use within their proposed formal method, illustrating how this notation can specify UML models using a library system example and how models evolve through RUP cycles. The paper includes a discussion on refining the design incrementally, assigning attributes, handling method calls, and specifying use cases with conceptual models.

The authors introduce an Object-Oriented Specification Language (OOL) to describe functional behaviors at varying abstraction levels. This language supports the precise description of concepts found in UML models and proposes a way to evolve these models iteratively and incrementally. The focus is on handling small parts of the system at a time, using an informal decomposition based on use cases rather than a traditional compositional approach. This makes maintenance more manageable, as the system can be updated as business rules change.

The paper references work by Cavalcanti and Naumann on object-oriented programming with subtypes and polymorphism, and by Mikhajlova and Sekerinski on a rich object-oriented language, noting that these approaches restrict reference types and mutual class dependencies.

The authors acknowledge the importance of tool support for the industrial adoption of formal methods and express interest in investigating their model's difference and relationship with separation logic. They conclude by thanking the reviewers, colleagues, and students who provided feedback on earlier versions of the paper and during seminars and training sessions on software engineering and object-oriented development.