Array 17 (2023) 100268










Evaluation of next-generation high-order compressible fluid dynamic solver on cloud computing for complex industrial flows
R. Al Jahdali a,‚àó, S. Kortas c, M. Shaikh c, L. Dalcin a, M. Parsani a,b
a King Abdullah University of Science and Technology (KAUST), Computer Electrical and Mathematical Science and Engineering Division (CEMSE), Extreme Computing Research Center (ECRC), 23955-6900 Thuwal, Saudi Arabia
b King Abdullah University of Science and Technology (KAUST), Physical Sciences and Engineering Division (PSE), 23955-6900 Thuwal, Saudi Arabia
c KAUST Supercomputing Core Laboratory, 23955-6900 Thuwal, Saudi Arabia


A R T I C L E  I N F O	A B S T R A C T

	

Keywords:
Cloud computing
Amazon Web Services Elastic Compute Cloud Fluid mechanics
Compressible Navier‚ÄìStokes equations Fully-discrete entropy stable algorithms
Industrially relevant computational fluid dynamics simulations frequently require vast computational resources that are only available to governments, wealthy corporations, and wealthy institutions. Thus, in many contexts and realities, high-performance computing grids and cloud resources on demand should be evaluated as viable alternatives to conventional computing clusters. In this work, we present the analysis of the time-to-solution and cost of an entropy stable collocated discontinuous Galerkin (SSDC) compressible computational fluid dynamics framework on Ibex, the on-premises cluster at KAUST, and the Amazon Web Services Elastic Compute Cloud for complex compressible flows. SSDC is a prototype of the next generation computational fluid dynamics frameworks developed following the road map established by the NASA CFD vision 2030. We simulate complex flow problems using high-order accurate fully-discrete entropy stable algorithms. In terms of time-to-solution, the Amazon Elastic Compute Cloud delivers the best performance, with the Graviton2 processors based on the Arm architecture being the fastest. However, the results also indicate that the Ibex nodes based on the AMD Rome architecture deliver good performance, close to those observed for the Amazon Elastic Compute Cloud. Furthermore, we observed that computations performed on the Ibex on-premises cluster are currently less expensive than those performed in the cloud. Our findings could be used to develop guidelines for selecting high-performance computing cloud resources to simulate realistic fluid flow problems.





Introduction

The process of predicting fluid flow (such as gases and liquids), mass transfer, chemical reactions, and other associated phenomena with a computer during the design or production process is known as computational fluid dynamics (CFD). State-of-the-art CFD is critical in modeling many physical phenomena, including biomedicine [1], plasma science [2], climate [3,4], weather [5,6], and aerodynamics [7,8], and for elucidating and analyzing the underlying mechanisms of these complex phenomena. In the aeronautics and aerospace fields, aggressive use of CFD has resulted in significant reductions in wind tunnel time as well as a reduction in the number of experimental rig tests. Thus, through the use of CFD, industries, governments and national laboratories have been able to produce products faster and at reduced costs [8], saving hundreds of millions of dollars. In addition to reducing testing requirements, CFD has the additional potential of providing superior understanding and insight into the critical physical
phenomena limiting component performance, thereby opening up new frontiers in a variety of fields.
Among the critical goals, NASA‚Äôs vision roadmap [9] indicates the computational procedure and algorithms to perform realistic aerody- namic simulations by 2030 with the next generation of computing architectures. The path to the final aerodynamic simulation goal in- cludes a scheduled demonstration of various critical technologies and production scalable entropy-stable solvers are one of them [9]. A prototype of these new solvers, named SSDC, where ‚Äò‚ÄòEntropy‚Äô‚Äô is represented in the acronym by its thermodynamic symbol, ‚Äò‚ÄòS‚Äô‚Äô, has been developed and deployed for industrial collaborations [10]. SSDC combines a state-of-the-art, provably stable, adaptive order solver, with software engineering that exploits hybrid shared-distributed memory capabilities.
High-performance computing (HPC) has had a significant influence on CFD. The demand for HPC systems increases with the increasing


‚àó Corresponding author.
E-mail addresses: Rasha.Aljahdali@kaust.edu.sa (R. Al Jahdali), samuel.kortas@kaust.edu.sa (S. Kortas), mohsin.shaikh@kaust.edu.sa (M. Shaikh), dalcinl@gmail.com (L. Dalcin), matteo.parsani@kaust.edu.sa (M. Parsani).
https://doi.org/10.1016/j.array.2022.100268
Received 25 October 2022; Received in revised form 1 December 2022; Accepted 5 December 2022
Available online 9 December 2022
2590-0056/¬© 2022 The Authors. Published by Elsevier Inc. This is an open access article under the CC BY-NC-ND license (http://creativecommons.org/licenses/by- nc-nd/4.0/).



complexity of the simulation, which is a primary element in fluid flow simulations. Owning high-performance computer facilities helps to process simulations faster and allows one to perform large-scale sim- ulations. Supercomputer centers and other HPC computing capabilities are being used to perform massive simulations in academia, national laboratories, and industry. Nevertheless, the cost of the computing cluster may be exorbitant to purchase and maintain, and therefore, it may not be able to keep up with today‚Äôs computational demands. Hence, on-demand grids and cloud resources should be viewed as alternatives to traditional computing clusters in various situations and circumstances. A major advantage of cloud resources is the opportunity to use cutting-edge hardware without the requirement for financial investment or IT maintenance costs. In addition, instead of an annual license, the software can be purchased on a pay-per-use basis. Be- cause the industry is interested in using on-demand computing services for engineering simulations, benchmarking the performance of next- generation of compressible CFD solver prototypes, such as SSDC, on cloud resources is essential.
Currently, the industry is experimenting with a variety of ways for incorporating cloud computing into CFD workloads. Thus, it is pivotal to evaluate the performance of parallel systems to determine whether they are capable of running complex industrial CFD problems with up- coming solvers. On one side, important studies in this direction for well established classic solvers based on finite volume, finite differences, and finite elements (up to second order accuracy) have been reported, for instance, by Pe√±a-Monferrer et al. [11], Ashton et al. [12] and Turner et al. [13] for complex industry problems. In particular, in early 2020, the results of the performance of the open-source OpenFOAM software on the Amazon Web Services (AWS) Elastic Compute Cloud (EC2) service for racing vehicles employing a hybrid RANS-LES model were presented by Ashton and co-authors [12]. The authors demonstrated that AWS might provide an HPC environment that would enable wider usage of high-fidelity CFD methods by permitting higher core counts and reducing turnaround time. In early 2021, in Pe√±a-Monferrer et al.
[11] presented a hybrid cloud solution for efficient simulation and analysis of drop dispersions by breaking down and study the CFD data analysis pipeline into small microservice-like processes. Turner and co-authors [13] gave an exhaustive analysis of how well GPU and CPU architectures work and how much they cost for a complete aircraft RANS simulation using the CFD code zCFD. On the other side,
studies on the performance of adaptive non-linearly stable (high-order)
Numerous commercial solvers are currently deployed and utilized on the cloud to simulate fluid flow problems based on the Reynolds- averaged Navier‚ÄìStokes (RANS) approach. However, there is no doubt that large eddy simulation (LES) has the potential to deliver results that are more accurate and reliable and will be one of the main approaches to solving challenging fluid flows problems. This study reports the first step towards high-performance CFD simulations on the AWS cloud
cluster for industrial workloads based on LES approaches with an ‚Ñéùëù-
adaptive compressible solver. The main contributions of this work are
as follows. First, we deploy and test a novel prototype of the next generation of compressible CFD solver ‚Äò‚ÄòSSDC‚Äô‚Äô on the HPC cluster on the cloud. SSDC is a prototype of the framework defined in the NASA CFD 2030 vision, and it has novel capabilities in terms of adaptivity in space and time. Second, we manage and operate the AWS cloud cluster by optimizing the PETSc library and SSDC framework for each of the architectures used in the study. The installation details of the op- timized PETSc library can be found in https://github.com/ecrc/petsc_ installation_aws_cloud_2022. The former step is done in conjunction with the Slurm scheduler to simplify the management of jobs. Since we are simulating the LES model, a large number of AWS EC2 instances is needed. Third, we compare the on-premises cluster and the most recent architectures on the AWS cloud in terms of performance and cost.
The paper is organized as follows. In Section 2, we present the key ideas and elements of the spatial and temporal algorithms implemented in SSDC, whereas in Section 3, we give a brief overview of the soft- ware implementation and infrastructure. Section 4 briefly describes the computing environments of the on-premise Ibex cluster and Amazon EC2 cloud computing environment. Section 5 presents the performance results of the test case studies to analyze the performance of the SSDC solver on Ibex and Amazon EC2 clusters. Finally, the conclusion and future work are drawn in Section 6.

The compressible Navier‚ÄìStokes equations

In this section, we give an overview of the discretization of the compressible Navier‚ÄìStokes equations. A detailed presentation of the key elements of the spatial discretization is presented for the advection‚Äì diffusion equation in multiple dimensions in Appendix A.
In the framework of the method of line approach, we first present the spatial discretization and subsequently describe the temporal inte- gration approach. The compressible Navier‚ÄìStokes equations in Carte- sian coordinates read

compressible algorithms on the HPC cloud computing is lacking. Those
ùúïùíí
+ ‚àë3
ùúïT ùêº	3
ùë•ùëö =
ùúïT ùëâ
ùë•ùëö ,  ‚àÄ
(ùë• , ùë• , ùë•
) ‚àà ùõ∫,  ùë° ‚â• 0,

spatial and temporal discretizations, in the wake of the final NASA 2030 CFD vision report [9], received an impetus from leading U.S.
ùúïùë°
(
ùëö=1
ùúïùë•ùëö
)
ùëö=1(
ùúïùë•ùëö
1  2  3
)	(	)
(1)

ùíí ùë•1, ùë•2, ùë•3, ùë°
= g(ùêµ)
ùë•1, ùë•2, ùë•3, ùë° ,  ‚àÄ
ùë•1, ùë•2, ùë•3
‚àà ùõ§ ,  ùë° ‚â• 0,

national laboratories, (e.g., NASA and Sandia National Laboratories),
ùíí (ùë• , ùë• , ùë• , 0) = g(0) (ùë• , ùë• , ùë• ) ,  ‚àÄ (ùë• , ùë• , ùë• ) ‚àà ùõ∫,

top-tier academic institutions in Europe, U.S., and the Middle East. In
1  2  3
1  2  3
1  2  3

particular, at the end of 2021, the first fully discrete entropy stable
solver of any order on unstructured for compressible CFD, named
where the vectors ùíí, T ùêº
ùëö
and T ùëâ
ùëö
denote the conserved variables, the

SSDC, was presented in [10]. The SSDC‚Äôs scalable algorithms have been proven to run fast and effectively on hardware ranging from laptops to supercomputers with more than 180,000 processors, such as the Shaheen XC40 supercomputer. However, no studies on the performance of these new solvers on the HPC cloud computing is available in literature.
Here, we provide a comprehensive cost analysis of the SSDC solver for simulating flow problems on AWS EC2. The purpose is to assess the viability of the HPC cluster on the Amazon cloud for solving complex
CFD industry flow problems and identify a set of AWS EC2 instances
g(ùêµ), and the initial condition, g(0), are assumed to be in ùêø2(ùõ∫), with inviscid fluxes, and the viscous fluxes, respectively. The boundary data, the further assumption that g(ùêµ) will be set to coincide with linear,
well-posed boundary conditions, prescribed in such a way that either entropy conservation or entropy stability is achieved. System (1) is closed with the assumption of the ideal gas model. The conserved variable vector can be written as
ùíí = [ùúå, ùúåT1, ùúåT2, ùúåT3, ùúå¬£] T,
where ùúå denotes the density, U = [T1, T2, T3] T is the velocity vector,
and  is the specific total energy. The inviscid fluxes are given as

that deliver the shortest time and the lowest possible price. We use four test cases [10,14,15]: the turbulent flow over two spheres in tandem at
T ùêº
ùë•ùëö
= [ùúåT , ùúåT T
+ ùõøùëö,1
h, ùúåT T
+ ùõø  h,

a Reynolds number and a Mach number of ùëÖùëí = 3.9√ó103
and ùëÄùëé = 0.1,
ùúåT T3
+ ùõø
ùëö,3
h, ùúåT Óà¥] T,

respectively; the flow past a delta wing with the experimental sting
where h is the pressure, Óà¥ is the specific total enthalpy and ùõø
is the

at ùëÖùëí = 106 and ùëÄùëé = 0.07; the NASA juncture flow experiment at
Kronecker delta. The required constituent relations are

ùëÖùëí = 2.4 √ó 106 and ùëÄùëé = 0.189; and the flow past the Imperial front wing at ùëÖùëí = 2.2. √ó 105 and ùëÄùëé = 0.036.
Óà¥ = ùëêh f +
1 U TU ,  h = ùúåùëÖf ,  ùëÖ =  ùëÖùë¢ ,
2	ùëÄùë§

where f is the temperature, ùëÖ is the universal gas constant, ùëÄ  is the molecular weight of the gas, and ùëêh is the specific heat capacity at
constant pressure. Finally, the specific thermodynamic entropy is given

The continuous entropy stability analysis is mimicked by approx- imating the derivatives of the inviscid fluxes as follows [27], i.e.,

as
 ùëÖ 
(  f  )
( ùúå )
ùëêùëù
ùúï fùêº
ùë•ùëö ‚âà 2ùñ£ùêº,ùúÖ ‚ó¶ùñ•
(ùíí , ùíí
) ùüèùúÖ ,	(7)

ùë† =	log
ùõæ ‚àí 1
‚Äì ùëÖ log
ùúå
,  ùõæ =
ùëê
‚Äì ùëÖ ,
ùúïùë•ùëö
ùë•ùëö	ùëö

‚àû	‚àû	ùëù
where ùñ£ùêº,ùúÖ is a differentiation matrix for the ùë•
direction, ‚ó¶ denotes the

where f‚àû and ùúå‚àû are the reference temperature and density. The
ùë•ùëö	(	)	ùëö

viscous fluxes T ùëâ
ùëö
are given by
Hadamard product, ùñ•ùë•ùëö
ùüèùúÖ is a vector of ones.
ùííùúÖ , ùííùúÖ
is a two-point flux function matrix, and

[	3	 f 
The differentiation matrix ùñ£ùêº,ùúÖ is constructed as

T ùëâ
ùëö
0, ùúè1,ùëö, ùúè2,ùëö, ùúè3,ùëö,
‚àë
ùëñ=1
ùëñ,ùëö  ùëñ
ùúï
ùúïùë•ùëö
T,	(2)
ùñ£ùêº,ùúÖ ‚â° 1 ‚àí1 ‚àë3 (
[J  ùúïùúâùëô ]
ùë•ùëö
[
J  ùúïùúâùëô ]	)


while the viscous stresses are defined as
ùë•ùëö
2 ùúÖ
ùëô=1
ùúâùëô
+
ùúïùë•ùëö ùúÖ
ùúïùë•ùëö
ùñ£ùúâùëô
ùúÖ
,	(8)

ùúè  = ùúá
( ùúïT
  ùëñ +
ùúïT
ùëó ‚àí ùõø  2
‚àë3 ùúïT )
,	(3)
where ùñ©ùúÖ denotes the determinant of the discrete Jacobian, ùñ£ùúâùëô
ùúï	ùúïùúâ
is an

ùëñ,ùëó
ùúïùë•ùëó
ùúïùë•ùëñ
ùëñ,ùëó 3
ùëõ=1
ùúïùë•ùëõ
SBP operator approximating
ùúïùúâ
, while
J   ùëô
ùúïùë•ùëö
indicates the discrete
ùúÖ

where ùúá(f ) is the dynamic viscosity and ùúÖ(f ) is the thermal conduc-
metric terms which must satisfy a discrete version of the geometric
ùëâ ,ùúÖ

conservation law (GCL) constraints [19,25,28]. In addition, ùñ£ùë•1  is the

tivity.
ùëö
differentiation matrix, constructed as

vex extension, that when integrated over the physical domain, ùõ∫, The compressible Navier‚ÄìStokes equations given in (1) have a con-
ùñ£ùëâ1 ,ùúÖ ‚â° ùñ©‚àí1 ‚àë ùñ£
[J ùúïùúâùëô ]
.	(9)

depends only on the boundary data and negative semi-definite dissi-
ùë•ùëö
ùúÖ
ùëô=1
ùúâùëô
ùúïùë•ùëö ùúÖ

pation terms. This convex extension depends on an entropy function,
, that is constructed from the thermodynamic entropy as
S
Furthermore, the derivative of the entropy variables, w, is approxi- mated as

= ‚àíùúåùë†,
and provides a mechanism for proving stability in the ùêø2
norm. The
ùúΩùëé
= ùñ£ùëâ2 ,ùúÖ ùíò
+ ùêíùêÄùêìùëâ2 ‚âà ùúïw .	(10)
ùúïùë•ùëé

entropy variables M are an alternative variable set related to the conservative variables via a one-to-one mapping. They are defined
T
The differentiation matrix ùñ£ùëâ2,ùúÖ in (10) is defined as
ùëó
‚àë3  [	]

in terms of the entropy function S by the relation M	= ùúïS‚àïùúïÓâó
ùñ£ùëâ2 ,ùúÖ
‚â° ùñ©‚àí1
J ùúïùúâùëé
ùñ£ .	(11)

and they are extensively used in the entropy stability proofs of the algorithms used herein; see, for instance, [16‚Äì19] and the references
ùë•ùëó
ùúÖ
ùëé=1
ùúïùë•ùëó
[
ùúâùëé
ùúÖ
]	[	]

therein. In addition, they simultaneously symmetrize the inviscid and the viscous flux Jacobians in all three spatial directions. Following
The metric terms
J  ùúïùúâùëô
ùúïùë•ùëö
and
ùúÖ
J ùúïùúâùëé
ùúïùë•ùëó
can be computed in different
ùúÖ

the analysis described in [16,20], we multiply Eqs. (1) by the (local) entropy variables M and arrive at the integral form of the (scalar) entropy equation
ways. In the SSDC solver, these metrics terms are computed based upon
conforming interfaces are given in [25]; for ùëù- and ‚Ñéùëù-nonconforming the optimization procedure of Crean et al. [28]. Algorithmic details for
interfaces, the interested reader is referred to [19,24].

d dùë°
ùëÜdùõ∫ =  d ùúÇ ‚â§
ùõ∫	dùë°
‚àë3
ùëö=1 ùõ§
(M TT ùëâ
ùë•‚àí
)
ùë• ùëõùë• dùõ§ ‚àí ùê∑ùëá ,	(4)
The entropy function of the semidiscretization (6) mimics closely Eq. (4). In fact, following closely the entropy stability analysis, the SBP operators and their equivalent telescoping forms yield [16,19,22,24‚Äì

where ùëõùë• is the ùëöth component of the outward facing unit normal to ùõ§
and
26]
 ùëë ùüè‚ä§ÃÇùñØ ùêí =  ùëë ùúÇ = ùêÅùêì ‚àí ùêÉùêì + Œ•,	(12)

‚àë3	( ùúïM )‚ä§
ùúïM
ùëëùë°
ùëëùë°

ùê∑ùëá =
ùëö,ùëó=1 ùõ∫
ùúïùë•ùëö
ùñ¢ùëö,ùëó ùúïùë• dùõ∫.	(5)
which is the semi-discrete analog of (4). Here ùêÅùêì is the discrete
boundary term (i.e., the discrete version of the first integral term on

More details about the continuous entropy analysis can be found [21‚Äì 23].

Spatial discretization of the compressible Navier‚ÄìStokes equations

The details of the algorithm for conforming and nonconforming interfaces can be found in [10,16,19,24‚Äì26]. Herein, we summarized the main steps of the algorithm for conforming interfaces.
main ùõ∫ is divided into ùêæ nonoverlapping elements. Then, following the To approximate the compressible Navier‚ÄìStokes equations, the do-
Eqs. (A.1), on the ùúÖth element, the generic entropy stable discretization procedure outlined for the spatial discretization of convection‚Äìdiffusion
of (1) reads
the right-hand side of (4)), ùêÉùêì is the discrete dissipation term (i.e., the
discrete version of the second term on the right-hand side of (4)) and
completeness, we note that the matrix ÃÇùñØ may be thought of as the Œ• enforces interface coupling and boundary conditions [16,20]. For mass matrix in the context of the discontinuous Galerkin finite element
method.
In our framework, the boundary conditions necessary to close sys- tem (1) preserve the entropy stability of the interior operators described above. Precisely, solid inviscid and viscous wall boundary conditions are imposed as described in [20,29] whereas, for the far-field, we use the approach described in [30]. The implementation of boundary conditions for a general framework (not necessarily entropy stable) can be found in [31].

dùííùúÖ dùë°
+ ‚àë3
ùëö=1
2ùñ£ùêº,ùúÖ ‚ó¶ùñ•ùë•
(ùíí , ùíí
) ùüèùúÖ =
‚àë3
ùëö,ùëó=1
ùëâ1 ,ùúÖ [
ùë•ùëö
ùñ¢ùëö,ùëó ]
ùúΩùëó
(6)

Temporal discretization of the compressible Navier‚ÄìStokes equations

+ ùêíùêÄùêìùêº + ùêíùêÄùêìùëâ + ùêùùê¢ùê¨ùê¨ùêº + ùêùùê¢ùê¨ùê¨ùëâ1 ,
where ùííùúÖ is the numerical solution vector at the mesh nodes, while ùêùùê¢ùê¨ùê¨ùêº and ùêùùê¢ùê¨ùê¨ùëâ denote the interface dissipation contributions for the inviscid
and viscous parts of the equations, respectively.
A general (explicit or implicit) ùë†-stage Runge‚ÄìKutta (RK) scheme
is composed of a matrix ùê¥ of dimensions ùë† √ó ùë† and two vectors ùëè and can be concisely encapsulated using its Butcher tableau [32], which
ùëê of length ùë†. The basic idea of the relaxation procedure is to enforce
conservation, dissipation, or other solution properties with respect to



a convex functional by scaling the weights ùëèùëñ of the RK method by a real-value parameter ùõæÃÉ. Hence, the time step from ùë¢ùëõ ‚âà ùë¢(ùë°ùëõ) is given by
‚àëùë†
Table 1
Details of the Ibex‚Äôs architectures.

ùë¶ùëñ = ùë¢ùëõ + ùõ•ùë°	ùëéùëñùëó ùëì (ùë°ùëõ + ùëêùëó ùõ•ùë°, ùë¶ùëó ),
ùëó=1
‚àëùë†

ùë¢ùëõ+1 = ùë¢ùëõ + ùõæÃÉùëõùõ•ùë°	ùëèùëñùëì (ùë°ùëõ + ùëêùëñùõ•ùë°, ùë¶ùëñ),
ùëñ=1
Table 2
Amazon EC2 instances feature details.

where the stage values of the RK method are denoted by ùë¶ùëñ. The
parameter ùõæÃÉùëõ is computed using the global relaxation procedure, i.e., ùõæÃÉùëõ is a root of a global nonlinear algebraic equation for ùúÇ [33]. We recover the step of the classic RK method if ùõæÃÉùëõ = 1.
In the SSDC solver, global relaxation RK schemes are used to in- tegrate in time systems of ODEs (6) such that Eq. (12) is fulfilled. For performance and robustness reasons, we select the secant method as the root finding algorithm for computing the relaxation parameter
ùõæÃÉùëõ [14,34].
Software implementation

The SSDC solver used in this work is being developed in the Ad- vanced Algorithms and Numerical Simulations Laboratory (AANSLab), which is part of the Extreme Computing Research Center (ECRC) at King Abdullah University of Science and Technology (KAUST). The SSDC framework is built on top of the highly-scalable Portable and Ex- tensible Toolkit for Scientific computing (PETSc) [35], its mesh topol- ogy abstraction (DMPlex) [36], and its scalable differential‚Äìalgebraic
equation solver components [37]. The spatial discretization features ‚Ñéùëù-
adaptive capabilities on unstructured quadrilateral/hexahedral meshes.
Support for nonconforming meshes relies on the p4est software library [38,39] and its bridge to PETSc‚Äôs DMPlex [40]. Leveraging the capa- bilities of the PETSc library allows support for different mesh formats including fluent, Exodus II, CGNS and GMSH. Triangle/tetrahedral meshes are converted on the fly into quadrilateral/hexahedral ele- ments; uniform and non-uniform mesh refinements algorithms are also available.

HPC cluster‚Äôs architectures

Amazon EC2 offers a variety of instance types that are suitable for a wide range of applications. It is possible to mix and match CPU, memory, storage, and networking resources by using different instance types. Depending on the workload, we can choose from a variety of instance sizes available for each type of instance. AWS Cloud provides highly flexible computing platforms that are suited for performing HPC applications in terms of resource availability and configurability. CFD usually necessitates a large amount of computer resources, and its software architecture makes it suited for parallel processing; this requires the use of an HPC or cloud computing infrastructure. In order to deal with parallel computation needs, an adequate resource management system is also necessary. AWS ParallelCluster is one of the possible solutions to the aforementioned requirements. Here, we will briefly describe the compute environments of Amazon EC2 cloud and on-premise resource Ibex cluster.

Ibex cluster

Ibex is a heterogeneous cluster composed of nodes with various CPU architectures and an assortment of GPUs hosted at KAUST. Ibex is made up of more than 400 nodes that are constantly monitored by the systems team. This heterogeneous cluster has a mix of CPU architectures, including Intel Xeon Platinum 8000 series (Skylake-SP) 1st generation, Intel Xeon Platinum 8276M (Cascade Lake-SP) 1st gen- eration, AMD EPYC 7642 (AMD Rome), and various GPUs nodes with P100s, V100s, GTX1080Ti, and RTX2080Ti, and with variable amounts



of RAM ranging from 360 GB to 700 GB. The network connectivity on Ibex depends on InfiniBand HDR Director Switch. It has the following features and benefits: Mellanox HDR Infiniband is capable of 200 Gbps, it uses in compute and storage nodes with HDR-100 at 100 Gbps speed. Table 1 summarizes the main features of the Ibex‚Äôs architectures used in this work. We highlight that Ibex has a daily occupancy of about 75%, with Intel architectures in high demand.

Amazon ParallelCluster

AWS ParallelCluster is an open source cluster management tool that is supported by AWS to deploy and manage HPC clusters in the AWS cloud. It enables the operation of HPC clusters in the AWS Cloud Environment and provides a wide range of configuration options. AWS ParallelCluster offers a variety of batch schedulers for manag- ing nodes, resources, and parallel workloads. Users can use them to run large-scale scientific and engineering tasks. AWS cloud has many data centers throughout the world. In this work, all the experiments were conducted on Amazon‚Äôs cloud data center in US East region in Northern Virginia. Our assessments cover the possible instance types which are similar to those available on KAUST‚Äôs Ibex cluster described in Section 4.1 with in addition one Arm architecture as described at the end of this section. Compute Optimized instances are suited for compute intensive applications that benefit from powerful CPUs. In this work, we have built AWS ParallelCluster and we included the following compute-optimized instances: C5d, C5a, and C6 g instances. This family‚Äôs instances are ideal for HPC. C5d will run on the Intel Xeon Scalable Processor 2nd generation or the Intel Xeon Platinum 8000 series (Skylake-SP) 1st generation with a sustained turbo frequency of up to 3.4 GHz and a single core turbo frequency of up to 3.5 GHz using Intel Turbo Boost Technology at launch. C5a instances provide the best x86 price/performance for a wide range of compute-intensive tasks, using 2nd generation 3.3 GHz AMD EPYC 7002 series processors built on a 7 nm technology node for greater efficiency. C5a instances can deliver up to 20 Gbps of network capacity as well as 9.5 Gbps of dedicated bandwidth to Amazon. EC2 C6 g instances are powered by AWS Graviton2 processors based on the Arm architecture. Table 2 shows the instances feature details.

Performance of the SSDC solver on Ibex and AWS EC2 clusters

The purpose of this study is to analyze the performance of the SSDC solver on Ibex and Amazon EC2 clusters for complex flow problems and provide the current cost per core hour. The default number of CPU cores for an EC2 instance depends on its type. We only allowed the instance to use the available physical CPU cores. This means we disabled hyperthreading. In the following sections, we report the arithmetic average of the wall-clock time (WCT) in seconds of three independent runs and the associated estimated cost in United States Dollars (USD).



/ig. 1. Upper panel: Illustration of the mesh. Lower panel: Contour plots of the velocity magnitude for the flow past two identical spheres in tandem at time ùë° = 100.



/ig. 2. Flow past two spheres in tandem: Wall-clock time in seconds for each simulation against the number of nodes for Intel CPU architectures. (For interpretation of the references to color in this figure legend, the reader is referred to the web version of this article.)





/ig. 3. Flow past two spheres in tandem: Cost performance in USD of Intel CPU architectures.



Flow past two spheres in tandem

D, held fixed in a rectangular domain located at a separation distance of We simulate the flow past two equally sized spheres with a diameter 10D [41]. The Reynolds and Mach numbers are set to ùëÖùëíùê∑ = ‚àûD‚àïùúà = 104 and ùëÄùëé‚àû = 0.1, respectively. The Prandtl number is set to ùëÉ ùëü = 0.7.
The quite upstream flow conditions of the first sphere are used to define the similarity parameters, e.g., ‚àû is the free-stream velocity.
Regardless of the geometry‚Äôs simplicity, capturing the flow in this regime is relatively difficult. The relevance of such flows around sev- eral bodies, specifically around two spheres, is considered significant in many practical applications, as it allows a better understanding of the effect of the wake behind a leading bluff body on the flow around a trailing one, for instance. A non-exhaustive list of important applications ranging from industrial fluidized beds to bio-reactors, to the combustion of aerosols, could be liquid‚Äìgas two-phase flows [42], suppression of icing on the solid surface [43], and oil droplets [44]. The complexity of the flow fields is shown in the lower panel of Fig. 1
by plotting the velocity magnitude at time ùë° = 100.
We perform the numerical simulations using one of the grids TandemSpheresHexMesh2Pm provided by Steve Karman of Point- wise for the HiOCFD5 [41]. An illustration of the grid structure is shown in the upper panel of Fig. 1. In this study, we use this mesh
in combination with a solution polynomial order of ùëù = 10 (leading to
degrees  of   freedom   (DOFs)   of   ‚âà  2.616  √ó  107. a formally eleventh-order accurate scheme), yielding a total number of
Figs. 2 and 4 show the WCT in seconds for the Ibex cluster and the
cluster, we simulated the flow problems using 40 (dark blue ‚Äî Ibex I) EC2 instances using various CPU architectures. On the on-premises Ibex and 20 (gray ‚Äî Ibex II) physical cores. Moreover, each processor is
responsible for one MPI thread. The wall-clock time for an on-premises cluster based on Intel‚Äôs Cascade Lake architecture grows proportionally
with the node count, as shown in Fig. 2. This pattern holds in the 40
and 20 physical core setups. On-premise cluster performance degrades
for several reasons, including the problem‚Äôs size and the fact that the
nodes are non-exclusive, with a daily occupancy of the Ibex cluster of approximately 75%. Thus, the more computing nodes, (1) the greater the likelihood that computing resources will be shared with other users, and (2) the more partitioned the job, the more likely it is that network bandwidth will be shared. We highlight that this behavior can also be observed in the case of exclusive access to the nodes. In fact, for a ‚Äò‚Äòsufficiently‚Äô‚Äô large number of CPU cores count and hence, sufficiently smaller local problems, communication between partitions cannot be hidden behind computations. Thus, the solver‚Äôs performance degrades and departs from the ideal behavior.
For the EC2 c5d instances and all orders of accuracy, the simulations are speeded up as the number of CPUs increases. Moving from one to





/ig. 4. Flow past two spheres in tandem: Wall-clock time in seconds for each simulation against the number of nodes for AMD & Arm CPU architectures. (For interpretation of the references to color in this figure legend, the reader is referred to the web version of this article.)



eight computing nodes, in particular, results in a speed-up factor of about 5.6 for both cases (8 being the perfect scaling factor). Overall, the c5d.9xlarge EC2 instance delivers the shortest time-to-solution. Notably, although the on-premises cluster‚Äôs wall-clock time increases as the number of compute nodes increases, up to two Ibex nodes running
40 and 20 MPI threads are still faster than EC2 instances. The executions
on the on-premises cluster with 20 MPI threads are marginally faster
or comparable to the executions on the c5d.4xlarge instance with four
computing nodes. Therefore, it seems that utilizing half of a node‚Äôs physically available cores has a favorable effect on wall-clock time. In fact, only half of the cores utilize the shared intra-node network, and more crucially, the workload per core permits better communications to be hidden behind computations.
As observed from Fig. 2, the results are favorable for simulations conducted on 8 EC2 nodes. In particular, the c5d.9xlarge EC2 instance delivers the results in the least amount of time. However, in terms of cost, Fig. 3 leads to a different conclusion: For any number of nodes and order of accuracy tested, it is cheaper to run on the Ibex cluster.
Specifically, the simulations run with 20 physical cores cost at least
two times less than those performed on AWS EC2 instances. Except for
the third-order accurate solver on 8 nodes, running in an on-premises
of    available    physical    cores    (i.e.,    40). cluster is always advantageous, even when using the maximum number
For the on-premises cluster with the AMD Rome architecture, the performance results are shown in Fig. 4. We observe that for the second- order accurate solver, the wall-clock time oscillates and does increase drastically when 8 nodes, and 40 cores per node are used. This is again the combined effect of the problem size and the network connectivity shared with other users ‚Äî a common scenario for a parallel cluster. On the contrary, for the third-, fourth-, and fifth-order accurate solvers, we observe that by increasing the number of nodes, the wall-clock time decreases substantially. Increasing the number of nodes of EC2 AMD EPYC (i.e., c5a instances) also leads to a reduction in time- to-solution. While the WCT decreases by around 35%-to-40% when moving from the c5a.4xlarge to the c5a.8xlarge. Thus, more on-chip cores are beneficial for this problem size. Fig. 4 also exhibits the performance of the Arm-based AWS Graviton2 processors (i.e., c6 g instances). As we can observe, the c6 g instances perform well and deliver the least wall-clock time. Additionally, the time to solution is roughly halved when the nodes are doubled‚Äîindicating that a nearly perfect scaling is achieved. Furthermore, using four Arm nodes, the time-to-solution is nearly identical to that required by eight AMD EPYC nodes. Nevertheless, as shown in Fig. 4, the WCT on the Arm- based architecture c6 g.8xlarge and the Ibex cluster with eight nodes using 40 MPI processes per node are almost identical. Thus, the AMD





/ig. 5. Flow past two spheres in tandem: Cost performance in USD of AMD & Arm CPU architectures.



Rome nodes of the on-premises cluster can deliver similar performance compared to the c6 g.8xlarge instance.
In Figs. 5, we show the cost of simulating the test case with AMD and Arm architectures. Compared to the AWS ParallelCluster, the Ibex cluster offers significantly more affordable computations. While between all AWS EC2 instances, the Arm nodes are the least expensive for c6 g.4xlarge and c6 g.8xlarge. Finally, it is worth noting that the cost and performance of the EC2 c6 g instances are similar to those of the AWS EC2 c5d instances for all orders of accuracy.

Flow around delta wing
We study the flow around a 65¬∞ swept delta wing. We use the geometry reported by Hummel and Redeker [45] for the Second In-
radius leading edge configuration, ùëüùêøùê∏ ‚àïùëêÃÑ = 0.0015, where ùëêÃÑ = 0.653 m. ternational Vortex Flow Experiment. In this work, we use the medium The delta wing has a mean aerodynamic chord of ùìÅ = 0.667 m, a root chord length of ùëêùëü = 1.47ùìÅ, and a wing span of ùëè = 1.37ùìÅ. Furthermore,
coordinate system is positioned at the delta wing‚Äôs apex with the ùë•1 the central region is flat, and it has no twist or camber. A Cartesian coordinate pointing downstream, the ùë•2 coordinate pointing in a span- wise direction, and the ùë•3 coordinate perpendicular to the flat plate. We consider the sting as part of the setup up to the position ùë•1‚àïùëêùëü = 1.758.
The grids consist of ‚âà 9.209 √ó 104 hexahedral cells. As shown in
a different solution polynomial degree, ùëù. Given the degree of the 6(a), the grid is divided into three blocks, where each block is assigned
is ‚âà 1.435 √ó 107. The simulations are carried out for an angle of attack solution and the number of cells in each block, the number of DOFs of AoA = 13¬∞, a Mach number ùëÄùëé = 0.07 and a Reynolds number of
ùëÖùëí = 106, based on the mean aerodynamic chord.
The performance of the simulation for both on-premises cluster Ibex using Intel Cascade Lake architecture and AWS ParallelCluster using EC2 c5d instances are present in Fig. 7. The performance of the on-premise cluster is degraded as the number of cores increases. This is because of the interplays of two factors: the high occupancy and non-exclusivity of the Intel Cascade nodes on the Ibex cluster, and the considerable increase of the fraction of the communication time on the overall computational time for smaller and smaller local problems (communication cannot be hidden behind computations). When the size problem becomes ‚Äò‚Äòsufficiently‚Äô‚Äô large, we observe that an increment of the number of nodes corresponds to a decrease in time- to-solution, as shown in Fig. 7(d). However, the performance degrades again for eight nodes, where we observe a growth of the time-to- solution. In contrast, for the AWS EC2 c5d instances, the simulation is speed-up as the number of nodes increases for all orders of accuracy.





/ig. 6. (a) Geometry (top) and solution polynomial degree distribution (bottom) for the 65¬∞ swept delta wing test case; ùëù = 2 in the far-field region (yellow), ùëù = 5 in the region surrounding the delta wing and its support (blue), and ùëù = 3 elsewhere (green). (b) Average flow field past the 65¬∞ swept delta wing: the ùëÑ-criterion colored by the normalized velocity magnitude (left) and mean axial velocity (right) at ùë•1‚àïùëêùëü = 0.2, 0.4, 0.6, 0.8, and 0.95; the wing surface is colored using the time-averaged pressure coefficient.  (For
interpretation of the references to color in this figure legend, the reader is referred to the web version of this article.)




/ig. 7. Flow around a delta wing: Wall-clock time in seconds for each simulation against the number of nodes for Intel CPU architectures.





/ig. 8. Flow around a delta wing: Cost performance in USD of Intel CPU architectures.



In particular, a speed-up factor of about 1.8 is delivered for both AWS EC2 c5d instances.
Fig. 8 shows the cost analysis of running on Ibex and the c5d instances. The runs performed with the on-premises cluster using 40 and 20 MPI threads show better cost-efficiency than the AWS EC2 c5d instances. In fact, Ibex provides up to 70% better pricing performance than c5d instances, regardless of solver accuracy and the number of nodes.
As done for the flow past the two spheres in tandem, we also study the performance of the solver and the cost of each simulation for the AMD and Arm architectures. Fig. 9 shows the wall-clock time in seconds for the on-premise cluster with the AMD Rome architecture, the EC2 AMD c5a instances, and the EC2 Arm c6 g instances. The performance results of the Ibex and AWS clusters is mostly matching the results obtained for the previous test case, i.e., the wall-clock time decreases substantially by increasing the number of nodes. In particular, by doubling the number of nodes we observe a speed-up factor of about
1.7 for all the runs. As for the previous application, moving from the c5a.4xlarge to the c5a.8xlarge instances lead to a reduction in the wall-clock time by around 35%-to-40%. Furthermore, the smallest wall- clock time is obtained using the EC2 Arm c6 g instances, for all orders of accuracy. In addition, almost perfect scaling is observed. Doubling
the nodes by switching from c6 g.4xlarge to c6 g.8xlarge leads to halves the solution time.
A detailed cost analysis is shown in Fig. 10. Among the EC2 in- stances, the compute-optimized c6 g instances perform better than the c5a instances for all the number of nodes and order of accuracy. However, on the on-premises cluster, using the largest number of physical cores possible is always the most convenient solution.
In the next section, we further assess the performance of the solver on-premises cluster Ibex and the AWS ParallelCluster by considering two more complex industrially-relevant flow problems. Precisely, we will simulate the NASA junction flow experiment and the flow past a Formula (1) front wing. The accurate simulation of these indus- trial problems via large eddy simulation (LES) is representative of the type of simulations that exascale will allow performing in a 24- hour turnaround, a typical requirement for industry standards (see, for instance, [46]). In our context, we use these test cases to explore the influence of the problem size on the performance of both clusters.

NASA juncture flow experiment

In this section, we simulate the NASA juncture configuration. This test case has a wing based on the DLR-F6 geometry and is equipped





/ig. 9. Flow around a delta wing: Wall-clock time in seconds for each simulation against the number of nodes for AMD & Arm CPU architectures.



with a leading edge horn to reduce the effect of the horseshoe vor- tex around the wing-fuselage juncture [47]. The Reynolds and Mach
numbers based on the freestream conditions are 2.4 √ó 106 and 0.189,
respectively. The angle of attack is ‚àí2.5‚ó¶. We perform simulations by
neglecting the sting and the mast. An overview of the mesh is shown
represents a different degree of approximation (ùëù) for the solution field. in Fig. 11(a). The grid is broken up into three blocks, each of which Specifically, we utilize ùëù = 1 in the far-field region (dark green), ùëù = 3 in the region surrounding the model (dark orange), and ùëù = 2 in the
is ‚âà 6.762 √ó 105, and the number of DOFs is ‚âà 4.091 √ó 107. In Fig. 11(b), remaining part (dark yellow). The total number of hexahedral elements
instantaneous   velocity,   i.e.,        1‚àï|     ‚àû|. we plot the Q-criterion using isocontours colored by normalizing the
In Fig. 12, we show the WTC for different numbers of nodes for the Ibex cluster and the AWS EC2 instances. For all the type of nodes except the Intel Cascade Lake, doubling the number of nodes yields an efficiency of about 95%. For the Intel Cascade Lake architecture with 40 MPI threads, moving from one to four nodes leads to a rapid decrease in efficiency. Eventually, for eight nodes, the time to solution increases. The fastest time-to-solution is delivered by the Cascade Lake with 20 MPI threads per node and the c6g8xlarge AWS EC2 instance. In terms of cost, the on-premise cluster simulations done on Intel architectures are much cheaper than the AWS EC2 cd5 instances, as illustrated in Fig. 13. For the AMD-Ibex nodes and the c5a and c6 g instances, the on-premises cluster still delivers the smallest cost.
Flow past a Formula (1) front wing

Here, we consider the flow past a Formula (1) front wing [48]. We refer to this test case as the Imperial Front Wing, based on the front
by ‚Ñé the distance between the ground and the lowest part of the front wing and endplate design of the McLaren 17D race car [49]. We denote wing endplate and by ùëê the chord length of the main element. The
angle of 1.094‚ó¶. Here we use ‚Ñé‚àïùëê = 0.36 which can be considered as position of the wing in the tunnel is further characterized by a pitch
higher loads on the wing. The corresponding Reynolds number is ùëÖùëí = a relatively low front ride height, with high ground effect and hence
2.2 √ó 105, based on the main element chord ùëê of 250 mm and a free stream velocity ùëà of 25 m‚àïs. The Mach number is set to ùëÄùëé = 0.036.
This corresponds to a practically incompressible flow.
The computational domain is divided into 3.4 √ó 106 hexahedral ele- ments with a maximum aspect ratio of approximately 250. The solution polynomial degree is set to ùëù = 2 ‚Äî a formally third-order accurate scheme. Thus, the total number of DOFs is approximately 9.18 √ó 107.
The grid is constructed using the commercial software Pointwise V18.3 released in September 2019; solid boundaries are described using a quadratic mesh. The panel of Fig. 14(a) illustrates an overview of the front wing geometry and the mesh, where the contour plot of the time- averaged pressure coefficient on the surface of the front wing is shown in Fig. 14(b).





/ig. 10. Flow around a delta wing: Cost performance in USD of AMD & Arm CPU architectures.



The variation of the wall-clock time against the number of nodes for different types of CPU architecture is shown in Fig. 15. Overall, we observe that the simulations speed up as the number of CPUs increases for all architectures on the on-premises cluster and the AWS EC2 instances. These results confirm that the problem size influenced the performance of the on-premises cluster Ibex presented in the previous sections. Fig. 15(a) shows the wall-clock time used by the Intel Cascade Lake architecture on the Ibex cluster and the AWS EC2 c5d instances. The simulation on 8 nodes of the on-premises cluster with 40 MPI threads produced favorable results. For all four computations, doubling the number of nodes reduces the time-to-solution by a factor of ap- proximately 1.8. However, for 8 nodes Intel Cascade Lake architecture and 40 MPI threads, this factor reduces to 1.7. In Fig. 15(b), we report the performance of the Ibex cluster using AMD processes and AWS ParallelCluster using c5a and c6 g instances. As we can observe, the c6 g.8xlarge AWS EC2 instance delivers the results in the least amount of time with a parallel efficiency of approximately 70%. By comparing Figs. 15(a) and 15(b), we observe that the c6 g.8xlarge AWS EC2 instance achieve the best performance among all the CPU architectures. Although parallel performance is important, the cost of the simu- lations is a significant concern. As illustrated in Fig. 16, the cost of computations on the on-premises cluster is much lower than that of the AWS ParallelCluster. Across all the AWS EC2 instances, the c6 g.8xlarge
Arm architecture is the cheapest one.
Conclusion


In this work, we evaluate the performance of a prototype of next generation high-order entropy stable solvers for compressible flows on unstructured grids on the Amazon Web Services Elastic Compute Cloud and the on-premise resource Ibex cluster hosted at KAUST. The study aims to establish the possibility of using Amazon‚Äôs cloud-based high-performance computing service to address complex computational fluid dynamics industry flow problems and propose a set of Elastic Cloud Computing instances that provide the fastest time to the solution and offer more affordable computations. In terms of time-to-solution, the Amazon Web Services Elastic Compute Cloud delivers the best performance, with the Graviton2 processors based on the Arm archi- tecture being the fastest. However, the results also indicate that the nodes based on the AMD Rome architecture of Ibex deliver very good performance, close to those observed for the Amazon Cloud service. In addition, we found that the simulations on the Ibex cluster are currently less expensive than those performed on the cloud for all orders of accuracy. Future work will demonstrate the performance at higher core counts and include post-processing elements of the computational fluid dynamics process.




/ig. 11. NASA juncture flow experiment. (For interpretation of the references to color in this figure legend, the reader is referred to the web version of this article.)




/ig. 12. NASA juncture flow experiment: Wall-clock time in seconds for each simulation against the number of nodes.



CRediT authorship contribution statement

R. Al Jahdali: Conceptualization, Data curation, Formal analysis, Investigation, Methodology, Project administration, Resources, Soft- ware, Validation, Visualization, Writing ‚Äì original draft, Writing ‚Äì review & editing. S. Kortas: Resources, Software. M. Shaikh: Re- sources, Software. L. Dalcin: Resources, Software, Review & editing.
M. Parsani: Conceptualization, Project administration, Supervision, Writing ‚Äì review & editing.

Declaration of competing interest

The authors declare that they have no known competing finan- cial interests or personal relationships that could have appeared to influence the work reported in this paper.
Data availability

Data will be made available on request.

Acknowledgments

The work described in this paper was supported by King Abdullah University of Science and Technology, Saudi Arabia through the award OSR-2019-CCF-3666. The authors are also thankful for the computing resources of the Supercomputing Laboratory and the Extreme Com- puting Research Center at King Abdullah University of Science and Technology.


	


/ig. 13. NASA juncture flow experiment: Cost performance in USD of Ibex, and AWS EC2 instances.


/ig. 14. Formula (1) front wing (Imperial Front Wing).



/ig. 15. Formula (1) front wing: Wall-clock time in seconds for each simulation against the number of nodes.


	


/ig. 16. Formula (1) front wing: Cost performance in USD of Ibex, and AWS EC2 instances.




Appendix A. An overview of the semidiscrete entropy stable spa- tial discretization

This Appendix gives some of the details of the spatial discretization implemented in the SSDC framework. As a model problem, we use the advection-diffusion equation in multiple dimensions.

Mapping

partition the physical domain ùõ∫ ‚äÇ R3 into ùêæ non-overlapping elements, In general, to solve partial differential equations numerically, we where ùêæ is a whole number greater than zero. Then, each element
in physical space is transformed using a local and invertible curvilin- ear coordinate transformation that is compatible at shared interfaces, meaning that the push-forward element-wise mappings are continuous
across physical element in(terfaces. )To achieve that, one maps from
the reference coordinates ùúâ1, ùúâ2, ùúâ3  ‚àà [‚àí1, 1]3 to the p(hysical e)le-
me(nt (see F)ig. A.17) by the push-forward transformation ùë•1, ùë•2, ùë•3 =

ùëã ùúâ1, ùúâ2, ùúâ3 , which, in the presence of curved elements, is usually
a high-order degree polynomial. This procedure requires no explicit
/ig. A.17. Example of mapping procedure of the reference element (left) to a physical element (right).

knowledge nor construction of the pull-back mappings in unstructured mesh schemes.
(	)
ùúâ	ùñ≤ùúâ	2 ùúâ
, ùñ≤ùúâ = ‚àí
( ) T
ùúâ
, ùñ§ùúâ =
(ùñ§ ) T,

ùñ§ = diag (‚àí1, 0, ‚Ä¶ , 0, 1) = ùíÜ
ùíÜ T ‚àí ùíÜ ùíÜ T, ùíÜ
‚â° [1, 0, ‚Ä¶ , 0] T, and


Summation-by-parts operators
ùúâ
ùíÜùëÅ
‚â° [0, 0, ‚Ä¶ , 1] T.
ùëÅ ùëÅ
1 1	1

The physical (spatial) domain ùõ∫ ‚äÇ R3 with boundary ùúïùõ∫ is dis-
cretized using tensor-product elements. In this work, the derivatives in each element are discretized using one-dimensional SBP operators [50, 51] which are given for completeness in Definition 1.
Definition 1.  A matrix operator, ùñ£ùúâ ‚àà RùëÅ√óùëÅ , is an SBP o[pera]tor of
An SBP operator of degree ùëù is hence an operator that differentiates
exactly monomials up to degree ùëù.
In this work, we use a collocated discontinuous Galerkin approach with diagonal norm SBP operators are constructed on the Legendre‚Äì Gauss‚ÄìLobatto (LGL) nodes [10]. The SBP operators used in this work are explicitly constructed in [22]. These operators are extended to
multiple dimensions by using tensor products (‚äó).

degree ùëù approximating the derivative  ùúï
ùúïùúâ
nodal distribution ùùÉ having ùëÅùëô nodes, if
1. ùñ£ùúâ ùùÉùëó = ùëóùùÉùëó‚àí1, ùëó = 0, 1, ‚Ä¶ , ùëù;
on the domain ùúâ ‚àà
ùõº, ùõΩ
with


Semidiscretization of the linear advection-diffusion equation

2. 
‚â° (ùñØ )‚àí1 ùñ∞ , where the norm matrix, ùñØ , is symmetric positive
The linear convection‚Äìdiffusion equation in Cartesian physical co-

ùúâ	ùúâ	ùúâ	ùúâ
definite;	ordinates reads



‚àÄ ùë•1, ùë•2, ùë•3
‚àà ùõ∫
ùëö=1	ùëö
1  3	ùúï
ùúÖ
ùúïùúâ
ùúÖ	ùëö	ùúÖ	ùëö

(	)	(ùêµ) (	)
(A.1)
ùúïùë°
2 ùëô,ùëö=1
ùúïùúâùëô
ùúïùë•ùëö
ùúïùë•ùëö ùúïùúâùëô

ùíí (ùë•1, ùë•2, ùë•3, ùë° = g
ùë•1, ùë•2, ùë•3, ùë° ,
1 ‚àë3  {
(	)}	‚àë3	(	)

‚àÄ ùë•1, ùë•2, ùë•3) ‚àà ùúïùõ∫,  ùë° ‚â• 0,
‚Äì	ùëé ùíí ùúï
ùêΩ ùúïùúâùëô	=
ùúï	ùêΩ
ùúïùúâùëô
ùúïùúâùëé ùúï(ùëèùëöùíí)
,

(	)	(	)
2	ùëö
ùúïùúâùëô
ùúÖ ùúïùë•ùëö
ùúïùúâùëô
ùúÖ ùúïùë•ùëö ùúïùë•ùëö
ùúïùúâùëé

ùíí ùë•1, ùë•2, ùë•3, 0
= g(0)
ùë•1, ùë•2, ùë•3, 0 ,
ùëô,ùëö=1
ùëô,ùëé,ùëö=1

‚àÄ (ùë•1, ùë•2, ùë•3) ‚àà ùõ∫,
where (ùëéùëöùíí) are the inviscid fluxes, ùëéùëö are the (constant) components of
(A.6)
where the last set of terms on the left-hand side are zero by the GCL

the convection speed, ùúï(ùëèùëöùíí) are the viscous fluxes, and ùëè
ùúïùë•ùëö
are the (con-
conditions (A.4). Then, a stable semi-discrete form can be constructed
similarly to the split form (A.6) by d[iscreti]zing the inviscid portion

stant and positive) diffusion coefficients. If the coefficients ùëèùëö are set
to zero, we will have a purely hyperbolic system. The boundary data,
of (A.2) and (A.5) using ùñ£ùúâùëô
, ùñ©ùúÖ , and
J  ùúïùúâùëô
ùúïùë•ùëö
, and by averaging the
ùúÖ

g(ùêµ), and the initial condition, g(0), are assumed to be in ùêø2(ùõ∫), with the further assumption that g(ùêµ) is prescribed so that linear stability (energy
results. The viscous terms are obtained from the discretization of the viscous portion of (A.5). This process leads to

stability) is achieved. Here, derivatives are approximated with SBP
differentiation operators defined in computational space. Therefore, we use the Jacobian of the push-forward mapping and the chain rule to
ùñ©ùúÖ
dùííùúÖ + dùë°
1 ‚àë3
2 ùëô,ùëö=1
ùëéùëö
{
ùñ£ùúâùëô
[J  ùúïùúâùëô ]
ùúïùë•ùëö ùúÖ
+ [J  ùúïùúâùëô ]
ùúïùë•ùëö ùúÖ
}
ùñ£ùúâùëô
ùííùúÖ

transform Eq. (A.1) from physical to computational space as
1 ‚àë3  {
(  )	[
 ùúïùúâ ]	}

ùúïùíí	‚àë3
ùúïùúâùëô ùúï
(ùëé ùíí)	‚àë3
ùúïùúâùëô
ùúï (
ùúïùúâùëé ùúï(ùëèùëöùíí) )
‚Äì
ùëô,ùëö=1
ùëéùëö diag
ùííùúÖ
ùñ£ùúâùëô
J
ùúïùë•ùëö
ùüèùúÖ	=
ùúÖ
(A.7)

ùêΩùúÖ ùúïùë° +	ùêΩùúÖ ùúïùë•
ùëô,ùëö
ùúïùúâ	=	ùêΩùúÖ ùúïùë•  ùúïùúâ
ùëô,ùëé,ùëö
ùúïùë•ùëö
ùúïùúâùëé
,	(A.2)
‚àë3
ùëè ùñ£
ùñ©‚àí1 [J  ùúïùúâùëô ]
[J ùúïùúâùëé ]

where ùêΩùúÖ is the determinant of the metric Jacobian. Moving the metric
ùëö
ùëô,ùëö,ùëé=1
ùúâùëô ùúÖ
ùúïùë•ùëö ùúÖ
ùúïùë•ùëö
ùñ£ùúâ ùííùúÖ + ùêíùêÄùêìùúÖ ,
ùúÖ

terms ùêΩ
 ùúïùúâùëô
ùúÖ ùúïùë•ùëö
inside the derivative, and using the product rule, leads to
where ùüèùúÖ
is a vector of ones of size ùëÅùúÖ . The semi-discrete form (A.7)

ùúïùíí
‚àë3	ùúï (
ùúïùúâùëô
)	‚àë3
ùúï (
ùúïùúâ )
highlights a set of discrete GCL conditions (the analog of the continuous GCL conditions (A.4))

ùêΩùúÖ ùúïùë° +	ùúïùúâ
ùëô,ùëö
ùêΩùúÖ ùúïùë• ùëéùëöùíí
‚Äì	ùëéùëöùíí
ùëô,ùëö=1	ùëô
ùêΩùúÖ ùúïùë•	=
‚àë3	[J  ùúïùúâùëô ]

‚àë3	ùúï (
ùúïùúâùëô
ùúïùúâùëé ùúï(ùëèùëöùíí) )
‚àë3	ùúïùúâùëé ùúï(ùëèùëöùíí) ùúï (
ùúïùúâùëô )
ùëô=1
ùúâùëô
ùúïùë•ùëö
ùüèùúÖ = ùüé,  ùëö = 1, 2, 3.	(A.8)
ùúÖ

ùëô,ùëé,ùëö=1
ùúïùúâùëô
ùêΩùúÖ ùúïùë•
ùúïùë•ùëö
ùúïùúâùëé
‚Äì
ùëô,ùëé,ùëö=1
ùúïùë•ùëö
ùúïùúâùëé
ùúïùúâùëô
ùêΩùúÖ ùúïùë•	.
The satisfaction of conditions (A.8) will result in the telescoping, prov- ably stable, semi-discrete form

(A.3)

ùñ© dùííùúÖ + 1 ‚àë
{
ùëé	ùñ£
[J ùúïùúâùëô ]
+ [J ùúïùúâùëô ]
}
ùñ£	ùíí =

The last terms on the left- and right-hand sides of (A.3) are zero via the
geometric conservation law (GCL) relations
ùúÖ dùë°
ùëö
ùëô,ùëö=1
ùúâùëô
ùúïùë•ùëö ùúÖ
ùúïùë•ùëö ùúÖ
ùúâùëô	ùúÖ
(A.9)

‚àë3   ùúï
(   ùúïùúâùëô
ùúÖ
)
= 0,  ùëö = 1, 2, 3,	(A.4)
‚àë3
ùëô,ùëö,ùëé=1
ùëèùëöùñ£ùúâùëô ùñ©ùúÖ
‚àí1 [J
 ùúïùúâ ] [J
ùúïùë•ùëö ùúÖ
ùúïùúâ ]
ùúïùë•ùëö ùúÖ
ùñ£ùúâ ùííùúÖ + ùêíùêÄùêìùúÖ .

ùëô=1 ùúïùúâùëô
ùúïùë•ùëö
At one of the ùëñth interfaces of the ùúÖth element, the ùêíùêÄùêì
ùúÖ,ùëñ
in the normal

yielding the strong conservation form of the convection‚Äìdiffusion equa-	direction is defined as

tion in computational space
ùêíùêÄùêì


= ‚àí 1 ùñØ‚àí1¬£ÃÇ(ùëé ùíí
‚Äì ùõΩùê∑ùíí
‚Äì ùüè ùëî) ,	(A.10)

ùúïùíí
‚àë3	ùúï (
ùúïùúâùëô
)	‚àë3
ùúï (
ùúïùúâùëô
ùúïùúâùëé ùúï(ùëèùëöùíí) )
ùúÖ,ùëñ	2
ùëõ ùúÖ
ùúÖ	ùëñ

ùêΩùúÖ
ùúïùë°
+
ùëô,ùëö=1 ùúïùúâùëô
ùêΩùúÖ
ùúïùë•ùëö
ùëéùëöùíí
=
ùëô,ùëé,ùëö=1 ùúïùúâùëô
ùêΩùúÖ
ùúïùë•ùëö ùúïùë•ùëö
ùúïùúâùëé
. (A.5)
where ùñØ is the norm-matrix of the SBP operator, and ¬£ÃÇ is a matrix that extracts from the solution vector only the solution values associated to

Now, consider the following differentiation matrices for the three- dimensional case:
ùñ£ùúâ ‚â° ùñ£ ‚äó I	‚äó IùëÅ , ùñ£ùúâ	ùëÅ ‚äó ùñ£ùúâ ‚äó IùëÅ , ùñ£ùúâ	ùëÅ ‚äó IùëÅ ‚äó ùñ£ùúâ ,
the LGL points that lie on the ùëñth interface. The scalar ùëéùëõ is the advection velocity projected in the normal direction, while the scalar ùõΩ is defined as ùõΩ = 2|ùëé|‚àïPe. The acronym Pe stands for the P√®clet number. The
symbol ùüè represents a vector of ones of size (ùëù + 1)ùëëùëñùëö‚àí1. For an interior

1	2	3	2	1
3	3	1	2
ùëñ
interface, ùëî contains the information of the adjoining solution element,

where IùëÅ is an ùëÅùëô √ó ùëÅùëô identity matrix and ùëÅùëô represents the number
of LGL points per direction in a given element. The diagonal matrix
containing the metric Jacobian is defined as
whereas ùëî is constructed using boundary data for a boundary interface.

References

ùñ© ‚â° diag (ùêΩ (ùùÉ(1)), ‚Ä¶ , ùêΩ (ùùÉ(ùëÅùúÖ ))) ,

ùúÖ	ùúÖ	ùúÖ
[  ùúïùúâ ]
Chung B, Cebral JR. CFD for evaluation and treatment planning of aneurysms:
review of proposed clinical uses and their challenges. Ann Biomed Eng

while the diagonal matrix of the metric terms, chosen to be a discretization of
J   ùëô
ùúïùë•ùëö
, has to be
ùúÖ
2015;43(1):122‚Äì38.
Tang WM, Chan VS. Advances and challenges in computational plasma science.

(	ùúïùúâ
ùúïùúâ	)
Plasma Phys. Controlled Fusion 2005;47(2):R1‚Äì34.

diag
ùêΩùúÖ   ùëô (ùùÉ(1)), ‚Ä¶ , ùêΩùúÖ   ùëô (ùùÉ(ùëÅùúÖ ))  ,
Schneider T, Teixeira J, Bretherton CS, Brient F, Pressel KG, Sch√§r C,

ùúïùë•ùëö
where ùëÅ  ‚â° ùëÅ ùëÅ ùëÅ
ùúïùë•ùëö
is the total number of LGL nodes in the ùúÖth
Siebesma AP. Climate goals and computing the future of clouds. Nature Clim Change 2017;7(1):3‚Äì5.

ùúÖ	1  2  3
element. To construct a stable scheme, we canonically split the inviscid
terms into one half of the inviscid terms in (A.2) and one half of the inviscid terms in (A.3) (see [22]), while the viscous terms are handled in strict conservation form. At the continuous level, this process leads
Neumann P, D√ºben P, Adamidis P, Bauer P, Br√ºck M, Kornblueh L, Klocke D, Stevens B, Wedi N, Biercamp J. Assessing the scales in numerical weather and climate predictions: will exascale be the rescue? Phil Trans R Soc A 2019;377(2142):20180148.
Bauer P, Thorpe A, Brunet G. The quiet revolution of numerical weather prediction. Nature 2015;525(7567):47‚Äì55.



Richardson LF. Weather prediction by numerical process. Cambridge University Press; 2007.
Anderson JD. Basic philosophy of CFD. In: Computational fluid dynamics. Springer; 2009, p. 3‚Äì14.
Spalart PR, Venkatakrishnan V. On the role and challenges of CFD in the aerospace industry. Aeronaut J 2016;120(1223):209‚Äì32.
Slotnick J, Khodadoust A, Alonso J, Darmofal D, Gropp W, Lurie E, Mavriplis D. CFD vision 2030 study: A path to revolutionary computational aerosciences. NASA-CR-2014-218178, 2014.
Parsani M, Boukharfane R, Nolasco IR, Del Rey Fern√°ndez DC, Zampini S, Hadri B, Dalcin L. High-order accurate entropy-stable discontinuous collo- cated Galerkin methods with the summation-by-parts property for compressible CFD frameworks: Scalable SSDC algorithms and flow solver. J Comput Phys 2020;424:109844.
Pe√±a-Monferrer C, Manson-Sawko R, Elisseev V. HPC-cloud native framework for concurrent simulation, analysis and visualization of CFD workflows. Future Gener Comput Syst 2021;123:14‚Äì23.
Ashton N, Sachs S, Foti L, Eberhardt S. Towards high-fidelity CFD on the cloud for the automotive and motorsport sectors. In: WCX SAE world congress experience. SAE International; 2020.
Turner M, Appa J, Ashton N. Performance of CPU and GPU HPC architectures for off-design aircraft simulations. In: AIAA scitech 2021 forum. 2021, p. 1‚Äì7.
Al Jahdali R, Dalcin L, Parsani M. On the performance of relaxation and adaptive explicit runge‚Äìkutta schemes for adaptive high-order compressible flow simulations. J Comput Phys 2022;In press.
Ranocha H, Dalcin L, Parsani M, Ketcheson DI. Optimized Runge-Kutta methods with automatic step size control for compressible computational fluid dynamics. Commun Appl Math Comput 2021;1‚Äì38.
Carpenter MH, Fisher TC, Nielsen EJ, Frankel S. Entropy stable spectral colloca- tion schemes for the Navier‚ÄìStokes equations: Discontinuous interfaces. SIAM J Sci Comput 2014;36(5):835‚Äì67.
Parsani M, Carpenter MH, Fisher T, Nielsen E. Entropy stable staggered grid discontinuous spectral collocation methods of any order for the compressible Navier‚ÄìStokes equations. SIAM J Sci Comput 2016;38(5):3129‚Äì62.
ter MH. An entropy stable ‚Ñé‚àïùëù non-conforming discontinuous Galerkin method [18] Friedrich L, Winters AR, Del Rey Fern√°ndez DC, Gassner GJ, Parsani M, Carpen-
with the summation-by-parts property. J Sci Comput 2018;77(2):689‚Äì725.
stable ‚Ñé‚àïùëù-nonconforming discretization with the summation-by-parts property [19] Fern√°ndez DCDel Rey, Carpenter MH, Dalcin L, Zampini S, Parsani M. Entropy
for the compressible Euler and Navier‚ÄìStokes equations. SN Partial Differ Equ Appl 2020;1(2):1‚Äì54.
Parsani M, Carpenter MH, Nielsen EJ. Entropy stable wall boundary conditions for the three-dimensional compressible Navier‚ÄìStokes equations. J Comput Phys 2015;292:88‚Äì113.
Dafermos CM. Hyperbolic conservation laws in continuum physics. Berlin: Springer-Verlag; 2010.
Carpenter MH, Parsani M, Fisher TC, Nielsen EJ. Entropy stable staggered grid spectral collocation for the Burgers‚Äô and compressible Navier-Stokes equations. NASA TM-2015-218990, 2015.
Sv√§rd M. A convergent numerical scheme for the compressible Navier‚ÄìStokes equations. SIAM J Numer Anal 2016;54(3):1484‚Äì506.
Gassner GJ, Parsani M. Entropy-stable ùëù-nonconforming discretizations with [24] Fern√°ndez DCDel Rey, Carpenter MH, Dalcin L, Fredrich L, Winters AR,
the summation-by-parts property for the compressible Navier‚ÄìStokes equations. Comput & Fluids 2020;210:104631.
Nolasco IR, Dalcin L, Fern√°ndez DCDel Rey, Zampini S, Parsani M. Opti- mized geometrical metrics satisfying free-stream preservation. Comput & Fluids 2020;207:104555.
Parsani M, Carpenter MH, Nielsen EJ. Entropy stable discontinuous interfaces coupling for the three-dimensional compressible Navier‚ÄìStokes equations. J Comput Phys 2015;290:132‚Äì8.
stable ‚Ñé‚àïùëù non-conforming discretization with the summation-by-parts property [27] Del Rey Fern√°ndez DC, Carpenter MH, Dalcin L, Zampini S, Parsani M. Entropy
for the compressible Euler and Navier‚ÄìStokes equations. SN Partial Differ Equ Appl 2020;1(2):1‚Äì54.
Crean J, Hicken JE, Del Rey Fern√°ndez DC, Zingg DZ, Carpenter MH. Entropy- stable summation-by-parts discretization of the Euler equations on general curved elements. J Comput Phys 2018;356:410‚Äì38.
Dalcin L, Rojas D, Zampini S, Del Rey Fern√°ndez DC, Carpenter MH, Parsani M. Conservative and entropy stable solid wall boundary conditions for the com- pressible Navier‚ÄìStokes equations: Adiabatic wall and heat entropy transfer. J Comput Phys 2019;397:108775.
Sv√§rd Magnus, √ñzcan Hatice. Entropy-stable schemes for the Euler equations with far-field and wall boundary conditions. J Sci Comput 2014;58(1):61‚Äì89.
Mengaldo Gianmarco, De Grazia Daniele, Witherden Freddie, Farrington Antony, Vincent Peter, Sherwin Spencer, Peiro Joaquim. A guide to the implementa- tion of boundary conditions in compact high-order methods for compressible aerodynamics. In: 7th AIAA theoretical fluid mechanics conference. 2014, p. 2923.
Butcher JC. Numerical methods for ordinary differential equations. Chichester: John Wiley & Sons Ltd; 2016.
Ranocha H, Sayyari M, Dalcin L, Parsani M, Ketcheson DI. Relaxation Runge-Kutta methods: Fully-discrete explicit entropy-stable schemes for the compressible Euler and Navier‚ÄìStokes equations. SIAM J Sci Comput 2020;42(2):A612‚Äì38.
Rogowski M, Dalcin L, Parsani M, Keyes DE. Performance analysis of relaxation runge‚Äìkutta methods. Int J High Perform Comput Appl 2022;10943420221085947.
Balay S, Abhyankar S, Adams MF, Benson S, Brown J, Brune P, Buschelman K, Constantinescu E, Dalcin L, Dener A, Eijkhout V, Gropp WD, Hapla V, Isaac T, Jolivet P, Karpeev D, Kaushik D, Knepley MG, Kong F, Kruger S, May DA, McInnes L Curfman, Mills R Tran, Mitchell L, Munson T, Roman JE, Rupp K, Sanan P, Sarich J, Smith BF, Zampini S, Zhang H, Zhang H, Zhang J. PETSc/TAO users manual. Technical report ANL-21/39 - revision 3.16, Argonne National Laboratory; 2021.
Knepley MG, Karpeev DA. Mesh algorithms for PDE with Sieve I: Mesh distribution. Sci Program 2009;17(3):215‚Äì30.
Abhyankar S, Brown J, Constantinescu EM, Ghosh D, Smith BF, Zhang H. PETSc/TS: A modern scalable ODE/DAE solver library. Technical report, 2018.
Burstedde C, Wilcox LC, Ghattas O. p4est: Scalable algorithms for par- allel adaptive mesh refinement on forests of octrees. SIAM J Sci Comput 2011;33(3):1103‚Äì33.
Isaac T, Burstedde C, Wilcox LC, Ghattas O. Recursive algorithms for distributed forests of octrees. SIAM J Sci Comput 2015;37(5):C497‚Äì531.
Isaac T, Knepley MG. Support for non-conformal meshes in PETSc‚Äôs DMPlex interface. 2015, arXiv preprint arXiv:1508.02470.
Cenaero. HiOCFD5, 5th international workshop on high-order CFD methods. 2018, URL https://how5.cenaero.be.
Kimball E, Whitaker T, Kevrekidis YG, Benziger JB. Drops, slugs, and flooding in polymer electrolyte membrane fuel cells. AIChE J 2008;54(5):1313‚Äì32.
Cebeci T, Kafyeke F. Aircraft icing. Annu Rev Fluid Mech 2003;35(1):11‚Äì21.
Madani S, Amirfazli A. Oil drop shedding from solid substrates by a shearing liquid. Colloids Surf A 2014;441:796‚Äì806.
Hummel D, Redeker G. A new vortex flow experiment for computer code validation. In: RTO/AVT symposium on vortex flow and high angle of attack aerodynamics, meeting proc. RTO-MP-069. 2003, p. 8‚Äì31.
Mengaldo Gianmarco, Moxey David, Turner Michael, Moura Rodrigo Costa, Jassim Ayad, Taylor Mark, Peiro Joaquim, Sherwin Spencer. Industry-relevant implicit large-eddy simulation of a high-performance road car via spectral/hp element methods. SIAM Rev 2021;63(4):723‚Äì55.
Rumsey CL, Morrison JH. Goals and status of the NASA juncture flow experiment. NATO, STO-MP-AVT-246, 2016.
Pegrum JM. Experimental study of the vortex system generated by a formula 1 front wing (Ph.D. thesis), Imperial College London; 2007.
Buscariolo FF, Hoessler J, Moxey D, Jassim A, Gouder K, Basley J, Murai Y, Assi GRS, Sherwin SJ. Spectral/hp element simulation of flow past a formula one front wing: validation against experiments. 2019.
Sv√§rd M, Nordstr√∂m J. Review of summation-by-parts schemes for initial boundary‚Äìvalue problems. J Comput Phys 2014;268:17‚Äì38.
Del Rey Fern√°ndez DC, Hicken JE, Zingg DW. Review of summation-by-parts operators with simultaneous approximation terms for the numerical solution of partial differential equations. Comput & Fluids 2014;95:171‚Äì96.
