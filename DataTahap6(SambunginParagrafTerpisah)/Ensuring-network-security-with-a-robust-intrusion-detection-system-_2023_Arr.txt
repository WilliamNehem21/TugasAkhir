A variety of machine learning-based intrusion detection methods has been presented to researchers in recent years utilizing a variety of publicly accessible datasets. While some machine learning models might perform well on a particular dataset, they might have difficulty gener- alizing to new data from different sources [14]. For example, Jain et al.

KDDCUP, CICIDS, Cyber Clean Center (CCC), etc. The model accuracy is more than 99% for all the datasets. This proposed model addresses the limitations of existing intrusion detection systems and provides a framework tested with multiple datasets, making it more reliable and accurate in detecting intrusions.

This section presents a quick summary of earlier research on machine learning and detection systems for intrusions, emphasizing their ad- vantages and disadvantages. This sets the context for the proposed ensemble-based machine learning approach, which is the focus of the research paper. Researchers make numerous machine learning-based model approaches at different times over the years. To better compre- hend the significance of our proposed ensemble-based approach to detect intrusion and ensure network security, we discussed fairly current models with their strengths and drawbacks.

Papamartzivanos et al. developed a method for the detection of network intrusions in 2018. They introduced Dendron, a novel approach for creating Decision Tree (DT) classifiers using Genetic Algorithm (GA), in order to give detection criteria in the context of abuse systems for detection. They employed three distinct publicly available datasets to

NB15, whereas the average accuracy was only 52% [18]. As a result, the detection efficiency of various datasets varies significantly. From here, it is obvious that this kind of model can only be used with particular kinds of datasets or cyberattacks. When a new intrusion oc- curs, it will be unable to identify attacks.

significantly differ. A different dataset indicates a different attack or intrusion pattern. In both situations, detection is not completely effec- tive. For network intrusion detection, another model employed by Elmasrya et al. [22] is a dual Particle Swarm Optimization (PSO)-based approach to choose feature subsets and hyperparameters simulta- neously. It is essential to consider that the proposed approach is only tested on two popular IDS datasets, and it could not be adapted well to other datasets. Using deep learning models and the double PSO-based method in the suggested technique may also necessitate utilizing sub- stantial computer resources. Using the CNN technique, Turaiki et al.

datasets, the model is evaluated. Even though both datasets have ac- curacy levels above 96%, the error rate is higher and the true positive rate is lower. Prasada et al. [24] proposed a novel Bayesian-Rough Set (BRS) feature selection-based model for intrusion detection with the CICIDS2017 dataset and attain an accuracy of 97%. But in respect of this

Datasets are essential for machine learning-based models because they provide the data that the model needs to learn and make accurate predictions or decisions. Besides that, a high-quality dataset with ac- curate and relevant examples will lead to a more accurate and reliable model. The suggested model is trained and evaluated using a variety of publicly available datasets. The following is a short summary of these datasets:

In 2021, Sarhan et al. [39] analyzed information and created the NF-UQ-NIDS dataset for network intrusion detection. The datset has 43 features. 11,994,893 entries comprise the NF-UQ-NIDS dataset, of which 2,786,845 (23.23%) are attacks and 9,208,048 (76.77%) are benign flows. In addition to the benign, normal flow Attacks are classified into the following categories: DoS, DDoS, Injection, Reconnaissance, Brute Force, Infiltration, Password, XSS, Ransomware, Exploits, Scanning, Backdoor, Fuzzers, Bot, Analysis, Theft, MITM, Shellcode, Worms, and Generic. In this research, the attacks category is regarded as an intrusion.

As a NetFlow-based Internet of Things dataset for IoT intrusion detection, Sarhan developed NF-ToN-IoT in 2021. There are 1,379,274 data flows in total, of which 1,108,995 (80.4%) are attack samples and 270,279 (7.9%) are benign data flows [39]. In addition to the regular flow, intrusions include Backdoor, Injection DoS, MITM, DDoS, Pass- word, Scanning, Ransomware, and XSS.

In 2021, Al-Daweri et al. [26] presented a model dataset for an intrusion detection system called UKM-IDS20. This dataset has 46 characteristics that cover four different forms of attacks: DoS, scans, ARP poisoning, and exploits. These four attacks are regarded as intrusions into our analysis.

collaboration between The Communications Security Establishment and The Canadian Institute for Cybersecurity. It uses the notion of profiles to methodically compile cybersecurity datasets. When coupled with ab- stract distribution models for apps, standards, or entry-level network components, it provides a thorough explanation of attacks. Seven different attack scenarios are included in the dataset: botnet, brute force,

The WSN-DS dataset, a particular dataset for detecting intrusions in wireless networks of sensors, was developed in 2016 by Almomani et al. [41]. This dataset has 17 characteristics and 374661 records, covering DoS attacks including Flooding, Blackhole, Scheduling, and, Grayhole. This dataset was used to test our model, which treats all DoS attacks as intrusions while treating all other attacks as part of the regular flow.

The NSW-NB 15 dataset was produced in 2015 using the IXIA Per- fectStorm tool at the Cyber Range Lab at UNSW Canberra to develop a blend of actual modern day routine activities and fabricated modern day assault behaviors [42]. Reconnaissance, Fuzzers, Backdoors, Analysis, DoS, Generic, Shellcode, Exploits, and Worms are among the nine types of attacks in this dataset. In addition to the regular traffic flow, all at- tacks are considered as intrusions. This dataset is now widely used for testing intrusion detection models. In our experiment, 45 features from this dataset were employed.

We use the C08, C09, C10, and C13 datasets from the publicly available Cyber Clean Center (CCC) dataset [34,43]. IRC port 6667 and HTTP port 80 traffic packets are included in this dataset. A C&C server connection is necessary for the bot. In this dataset, there are 56 features records are resolved. It has been widely used in the field of network detection for intrusions. The NSL-KDD data set categorizes each network connection as normal or abnormal. In this research, 43 characteristics were both available and utilized. We employed this dataset for multi-class classification in our research. Where back, buffer overflow, imap, ftp write, guess passwd, ipsweep, land, loadmodule, multihop, nmap, perl, phf, pod, portsweep, rootkit, satan, warezclient, smurf, spy, teardrop, and warezmaster are classified into several intrusion classes in addition to the non-attack class.

suited to machine learning, data analysis, and instructional purposes. Colab is a hosted Jupyter Notebook service, to be more specific. StandardScaler, LabelEncoder, and other preprocessing modules from the Scikit-Learn package are implemented. SelectKBest, mutual_info_- classif, PCA, and other methods are used to choose the features. Bag- gingClassifier,	AdaBoostClassifier,	RandomForestClassifier, GradientBoostingClassifier, XGBClassifier, StackingClassifier, and more

In order for machine learning models to utilize the data effectively, it must first be cleaned up and transformed, which is why data preliminary processing is a crucial stage in the entire procedure. The accuracy and effectiveness of the final model depend greatly on the quality of the input data, and data preprocessing makes it possible to guarantee the consistency, accuracy, and usefulness of the input data. It helps to remove inconsistencies and errors in the data, it can help to normalize the data, which can make it easier to compare and analyze, and it can help to make the data more manageable and useable for machine learning models [47].

Ensemble-based machine learning models are a promising approach for intrusion detection systems, offering improved detection rates and resilience to attacks. These models combine multiple individual models to improve the overall accuracy and robustness of the prediction, especially for the intrusion detection system (IDS). The diversity of in- dividual classifiers in the ensemble ensures that the IDS can detect a wide range of attack types and patterns [52]. Various ensemble tech- niques are applied in the proposed model. A very short description of those is given below:

Ensemble-based bagging is a machine-learning algorithm that com- bines multiple models to improve the overall performance and robust- ness of the classifier. The bagging algorithm involves training multiple models on different subsets of the training data and then aggregating their predictions to make a final classification decision [54]. The training process for bagging can be summarized as follows in Algorithm 2.

An ensemble-based machine learning approach called gradient boosting combines a number of weak learners to produce a strong learner. Unlike Adaboost, Gradient Boosting uses decision trees as weak learners and focuses on improving the performance of the model by minimizing the loss function at each iteration [56]. The training process for Gradient Boosting can be summarized as follows in Algorithm 4.

prevent overfitting. The algorithm computes the negative gradient of the regularized loss function, fits a weak learner to the negative gradient values, computes the weight for the new model, and updates the model by adding the new weak learner. The final prediction is computed by summing up the predictions of all weak learners [57].

A machine learning procedure called stacking, which uses an ensemble approach, integrates many base models by using their outputs to build a meta-model. The original dataset is used to train the base models, and the predictions from the base models are used to train the meta-model [58]. The training process for Stacking is summarized as follows in Algorithm 5.

In this part, we evaluate the performance of our proposed intrusion detection model. At first, using a dataset named SIMARGL21 and the model with random forest ensemble technique, we visualize the model. In the SIMARGL21 dataset, there are 50 features available. The features description is given in the appendix section. Moreover, in our experi- ment, we used 1330692 initial samples. It is a multi-classification dataset because the label column contains three types of values, Normal flow, XMAS Scan, NULL Scan. The XMAS Scan and the NULL Scan entries are considered intrusions. The evaluation metrics are then presented along with the other datasets and ensemble methods, including simple stacking, adaboost, gradient boosting, gradient XGBoost, and bagging. The same processes, which are described in detail

FPR (False Positive Rate). The Model with Random Forest Ensemble Method has an accuracy of 1.00000, precision of 1.00000, recall of 1.00000, F1-score of 1.00000, and an FPR of 0.00000. According to these performance measures, the Random Forest ensemble method- based model is doing incredibly well and is able to accurately identify all the positive and negative samples in the dataset without producing any false positive or false negative mistakes. This suggests that this model is a strong contender for the detection of intrusion.

Kappa score, indicating perfect agreement between predicted and actual labels. Additionally, it has a perfect observed accuracy of 1.00000 and expected accuracy of 0.99897, suggesting that it can classify the samples with a high degree of accuracy. Finally, it has the lowest training and testing times, indicating that it is efficient and scalable.

So, considering all the evaluation metrics, the proposed approach with the Random Forest ensemble method can be used as a robust and accurate model for the detection of intrusion. The method works by combining multiple decision trees and aggregating their outputs to make the final prediction. This approach can lead to better generalization and improved performance compared to other models. Additionally, the short training and testing times make this model an attractive option for large-scale classification tasks.

Following the selection of the n_trees bigger than 10, the model looks to perform incredibly well, obtaining a training accuracy score of 1.0 and a test accuracy score of 1.0 for all values of n_trees tested. Because the random forest ensemble classifier performs well on both the training and testing data for each example, it may generalize effectively to new, unexplored data without overfitting or underfitting.

Overall, the proposed ensemble based machine-learning model achieved very high accuracy and AUC scores for most of the datasets, indicating its effectiveness in detecting intrusions. However, the false positive rate is very low for most of the cases. The results of the evalu- ation metrics are better for most of the cases and most of the existing models. Therefore, the model shows promising outcomes and has the potential as an intrusion detection tool.

In the subject of network security, intrusion detection systems are essential considering the increasing number of network threats and advancements in technology. IDSs have attracted a lot of interest because of their ability to increase network security. The Random Forest-based ensemble model outperformed other strategies and attained excellent accuracy and detection rates, according to the results of our proposed IDS evaluation after that on various public datasets. The results we obtained show that the recommended approach is capable of identifying different attack types with accuracy and has the potential to be a helpful tool for enhancing the security of computer systems and networks against new cyber threats. Overall, the proposed approach has shown promising outcomes and has the potential to aid in the creation of intrusion detection systems for network security that are more effective.

The authors declare that there are no conflicts of interest that could potentially influence the objectivity or integrity of the research findings. We have no financial, professional, or personal relationships with any individual, organization, or entity that could bias the interpretation or reporting of the research results. We affirm that the submitted manu- script is original, not previously published, and not under consideration elsewhere.

FLOW_ACTIVE_TIMEOUT	Time interval after which the flow is considered active, important for network performance and security. FLOW_DURATION_MICROSECONDS	Duration of the flow in microseconds, useful for understanding the context of the flow data at a more granular level. L4_SRC_PORT	Source port number of the flow, which can help identify the type of traffic and potential attacks.

FRAME_LENGTH	Length of the frame in bytes, which can help identify network performance issues or potential attacks. FLOW_START_SEC	Timestamp of when the flow started, useful for correlating events and identifying suspicious behavior. DIRECTION	Direction of the flow (inbound or outbound), important for network analysis and security.

