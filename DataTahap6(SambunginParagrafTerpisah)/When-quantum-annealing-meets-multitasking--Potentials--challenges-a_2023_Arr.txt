Quantum computers have provided a promising tool for tackling NP hard problems. However, most of the existing work on quantum annealers assumes exclusive access to all resources available in a quantum annealer. This is not resource efficient if a task consumes only a small part of an annealer and leaves the rest wasted. We ask if we can run multiple tasks in parallel or concurrently on an annealer, just like the multitasking capability of a classical general-purpose processor. By far, multitasking is not natively supported by any of the existing annealers. In this paper, we explore Multitasking in Quantum Annealer (QAMT) by identifying the parallelism in a quantum annealer from the aspect of space and time. Based on commercialised quantum annealers from D-Wave, we propose a realisation scheme for QAMT, which packs multiple tasks into a quantum machine instruction (QMI) and uses predefined sampling time to emulate task preemption. We enumerate a few scheduling algorithms that match well with QAMT and discuss the challenges in QAMT. To demonstrate the potential of QAMT, we simulate a quantum annealing system, implement a demo QAMT scheduling algorithm, and evaluate the algorithm. Experimental results suggest that there is great potential in multitasking in quantum annealing.

In the modern computing era, general-purpose processors, e.g., CPU and GPU, mostly have multitasking capability. That is, it concurrently executes multiple tasks over a certain period of time. This can be realised by either quickly switching between multiple tasks (time- sharing) or running multiple tasks simultaneously (space-sharing) on a single processor. Multitasking capability effectively improves processor resource utilisation.

thousand times in the past two decades. We believe that the need for QAMT also increases along with the capacity of a quantum annealer. Time-critical applications such as automation control and autonomous driving would benefit from QAMT, as the execution time of tasks is known. Multitasking would also enable virtualisation of quantum annealers, allowing multiple users to share a quantum annealer without knowing the existence of other users. The sharing of quantum anneal- ers would reduce the cost of usage and spark new applications and opportunities.

Multitasking is not natively supported by existing commercialised quantum annealing systems. For example, in a D-Wave quantum an- nealer, an instruction always resets the annealer before executing a task, such that the task always occupies all resources in the annealer. There is no scheduling or preemption of tasks according to their priority in timing. The feasibility of multitasking on existing annealers has not been explored. To the best of our knowledge, Pelofske et al. [2] is the only effort that exploits parallelism in quantum annealing. Instantiates multiple copies of a task so that the annealer can produce multiple

In this paper, we explore multitasking in Quantum Annealer by identifying task parallelism in a quantum annealer from the aspect of space and time. We propose an instruction-based scheme, which emu- lates multitasking. To our best knowledge, we are the first to explore the potential of multitasking in quantum annealer. Our contributions can be summarised as follows.

The rest of the paper is organised as follows. Section 2 describes the position of this work in the history of the literature. Section 3 defines the model of a task, a processor, and the execution of the task on the processor. Section 4 defines a multitasking model based on quantum annealer from a hardware point of view. Section 5 formalises the QAMT scheduling problem and reviews existing algorithms that can be adapted for space allocation and time scheduling in QAMT. It also identifies some possible challenges in QAMT scheduling. Section 6 proposes a simulator and performs experiments to demonstrate the potential of QAMT. Section 7 draws a conclusion and discusses the possibility of performing multitasking on other quantum computers.

Classical general-purpose processors, e.g. CPUs, can do multitask- ing very well. Task parallelism is a well-established research field based on modern computing architecture design [3,4] and scheduling algorithms [5,6]. This paper does not propose new classical comput- ing architectures or new scheduling algorithms for classical comput- ing architectures. Our focus is on realising task parallelism on an annealing-based quantum computer.

Parallel quantum annealing [2] addressed the issue of low re- source utilisation in quantum annealing. The authors instantiate mul- tiple copies of a problem instance so that an annealer produces more samples at a time and completes the task faster. Parallel quantum an- nealing has found its utility in a few applications [9,10]. Niu and Todri- Sanial [11] is a similar work based on gate-based models, which imple- ments multiple quantum circuits on one quantum device. Both Pelofske

There is also literature [12,13], which sees the quantum computing system as an accelerator in a modern High-Performance Computing (HPC) infrastructure. The focus is on the design of architectures and programming models needed to integrate near-term quantum comput- ers with supercomputers, and the workflows for potential applications. In-device task-level parallelism is not their focus.

In this paper, we realise multitasking on a quantum annealer. We will point out that the existing implementation is not explicitly designed to share resources among multiple tasks at the same time. We explore the possibility of carrying out multiple tasks on a quantum annealer in a time-sharing and space-sharing manner. We demonstrate the potential of QAMT through simulation-based experiments.

The QUBO matrix is the representation of the problem and is passed to a quantum annealer to be solved. Apart from the most important QUBO matrix, a task also includes a few more parameters to solve the problem on the quantum device. A common but incomplete list of parameters includes embedding, number of samples, global annealing control parameters such as annealing time, annealing schedule, and per-resource annealing control parameters, such as offsets and initial states.

qubits is discouraged. The involvement of the duplication is termed as chain technique by D-Wave. Without the chain technique, the Chimera architecture cannot even handle a complete graph with three vertices. Although Chimera has 2048 qubits, the size of a problem that can be mapped onto the device is usually much smaller than 2048, due to the limited number of couplers on the device. With the chain technique, the largest complete graph that can be mapped onto the Chimera

Due to manufacturing imperfections, not all qubits and couplers are available to users. For example, Chimera has 2048 qubits and 6016 couplers in its blueprint, but at the time this paper is written, there are 2041 qubits and 5974 couplers available in the DW_2000Q_6 sys- tem, which employs the Chimera architecture. The missing qubits and couplers are distributed throughout the annealing device. We speculate that some resources are not in working condition and are masked and hidden from users. Device maintenance could alter the availability of resources as well. One has to consider defects in graph embedding.

Task Parallelism + Sample Parallelism We can have task paral- lelism and sample parallelism at the same time. This is useful twofold. First, some tasks could have higher priority over others. We can du- plicate such tasks multiple times for expedition purposes. Second, sometimes an embedding comes with an irregular shape. Having such a task in the annealer results in an irregular-shaped idle space. One can use tasks with small and regular-shaped embedding to fill the irregular

Sample parallelism has its advantages. Since all duplicated instances come from the same task, these instances share almost the same param- eters and are mostly compatible with each other. The only non-trivial effort is to embed multiple instances onto the device. The feasibility of duplicating a task is based on the assumption that the annealer employs a homogeneous topology globally so that the embedding can be easily applied to different parts of the annealer.

i.e. the blocking feature that we mentioned in Section 3.3. Additionally, the concept of preemption mentioned in Section 4 is not natively sup- ported by the quantum annealer. Many of these constraints/limitations are unique to QAMTS and are not commonly seen in the scheduling

ing assumptions. The orientation of items is fixed, i.e., they cannot be flipped or rotated. The edges of the items are parallel to those of the rack. An atomic property applies to all items so that each individual cannot be divided into smaller parts.

patibility between them. Items in a subset are tasks combined in a QMI. Multiple tasks can be combined in a QMI and share a programming cycle, as long as they are compatible, and their embeddings can be fit into a resource map without overlapping. A shelf corresponds to the programming cycle of a QMI, shared by multiple tasks. Device programming takes time, which is expressed as the height of a shelf

3DCCRP naturally reflects the mutual exclusion between program- ming and annealing cycles, as items are never overlapped with shelves. The class constraint also captures the restriction on the tasks combined in a QMI. We do not find similar settings in the scheduling problems on classical processors. 3DCCRP can be seen as a generalised problem setting for QAMTS, as it is a minimal set of constraints that realise multitasking on quantum annealing. One can find its variants by adding more constraints or giving different objectives. In reality, we can have many opportunities and challenges in optimising the performance of a QAMTS algorithm. We discuss these opportunities and challenges from the aspect of space and time.

the same topology. Transformations include a cell-aligned shift, a flip along length and width, and a rotation of 90,180,270 degrees along height. The regular structure in the topology gives us more flexibility in the arrangement of tasks, such that we can combine more tasks into a QMI and improves resource utilisation.

Resource utilisation is a typical metric for evaluating the quality of a space allocation. Within the scope of space allocation, we define it as the ratio between the unit cells used and the total unit cells available in the device. The time used to find a space allocation should also be considered an important metric. Find and reuse embeddings are at the opposite end of the speed spectrum of space allocation algorithms. There are a few algorithms that can fit 2D items in a container, most of which have a focus on resource utilisation. For example, Next-fit decreasing-height (NFDH), First-fit decreasing-height (FFDH) Best-fit decreasing-height (BFDH) [31] and meta-heuristic al- gorithms [32]. As the annealing system becomes larger and more complicated, we can also borrow ideas and algorithms from memory management systems [33] to facilitate resource management.

Due to the limitations in existing design and manufacturing technol- ogy, there is a mismatch between an intended problem and one that is actually implemented on a quantum annealing device [34]. Through characterisation, verification, and validation tools for quantum anneal- ing (QAVV) [35], one can find that some resources have higher fidelity than others in a quantum computer. We would expect better results from the placement of a task in a high-fidelity area. In a fidelity-aware QAMTS, we can use QAVV tools to obtain a profile of the fidelity of resources and allocate tasks accordingly.

Apart from the fidelity issue, manufacturing defect also leads to a gap between the original architecture design and the actual resource available in an annealing device, which we have already described in Section 3.2. A QAMTS algorithm should also be aware of the avail- ability and handle the manufacturing defect in quantum annealers accordingly.

In a static scheduling, a scheduler has the knowledge of tasks, as well as sufficient time to find an optimal schedule of tasks. If the static schedules are used in a recurring situation, e.g., periodic tasks, then it makes sense to use the time-demanding minor embedding algorithms to find an optimised allocation of the resource to the tasks. Otherwise, many of the bin packing algorithms mentioned in Section 5.2 can also be repurposed for static scheduling, if we extend these algorithms to 3D space and treat the third dimension as time.

For dynamic scheduling, a processor does not know about a task before its presence. This includes the time of arrival, sampling time, the shape of embedding, other annealing-related parameters, and user- specified priority. The situation is similar to what a modern OS sched- uler is facing. Classical scheduling algorithms, such as First-Come First- Served (FCFS), Shortest-Job-Next (SJN) and Round Robin (RR) [43] are potential candidates for the time scheduling aspect of QAMTS. The time

We see task preemption (or context switching) as an integral part of dynamic scheduling. A scheduler on a general-purpose classical processor can temporarily interrupt an executing task and resume it at a later time. There is usually dedicated hardware mechanism that support the switches between tasks [44]. However, a QMI in D-Wave annealer is, by its nature, non-preemptive. There is no hardware for switching annealing tasks. A QMI can last a long time. There is no way for an urgent task to preempt the next time slice occupied by another task.

In this paper, we explore the possibility of implementing multitask- ing in quantum annealing systems. We compare the difference between quantum annealing systems and classical computing systems. We dis- cuss the feasibility of task parallelism from the aspect of space and time and discuss existing algorithms that can be adapted to scheduling and challenges in scheduling. We also develop a simulator to facil- itate research on QAMT scheduling and demonstrate the capability of preemptive task parallelism + sample parallelism on a synthetic dataset.

Apart from annealing-based quantum computers, we also see po- tential in gate-based quantum computing systems as well. Due to the limitations in existing manufacturing techniques, the probability of de- coherence increases rapidly as the scale of a quantum circuit increases. This limits the size of a practical quantum circuit and puts a restriction on the resource utilisation of universal quantum computers. One way is to share a quantum computer among multiple quantum circuits [11].

