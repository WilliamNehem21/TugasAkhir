The greedy coloring algorithm chooses the next vertex and assigns it the first (minimum) available color [9]; the first available color for each vertex v V is the minimum non-negative color that has not been assigned to v's neighbors, where V includes all vertices of the graph and n V . The greedy coloring algorithm can use a heuristic method to choose the next vertex. Using heuristic methods increases the efficiency (using fewer colors). First fit, largest degree ordering, saturation degree ordering, incidence degree ordering, and their combinations are heuristic methods that have been proposed [4,12].

their neighbors, which we refer to them as assigning vertices. Each assigning vertex assigns the first available color to itself and its neighbors. Assigning vertices can also use heuristic methods. There- fore, GDVCA reduces the number of colors and increases the efficiency;                            While DVCA cannot be extended to solve BCP or BMCP, and there are no other distributed algorithms for these problems, GDVCA solves these problems in a distributed manner without increasing time and communication complexities. In other words, time and communica- tion complexities of GDVCA are independent of the number and weights of vertices and edges' weights;

Communication costs usually outweigh the costs for (local) compu- tation [30]. Message exchange includes composing a frame, listen to the channel before transmission, transmission, listen to the channel and receive a frame, and decomposing a frame. It usually consumes time and energy more than computations [35,36]. In GDVCA, the

In summery, the efficiency of GDVCA is high. Moreover, the communication cost and thereby power consumption of GDVCA is very low, which is among the most important objective in wireless networks [36]. The rest of this paper is organized as follows. The next section re- views related works on vertex coloring algorithms. In Section 3, the four coloring problems are defined and formulated. GDVCA algorithm is described in Section 4. Section 5 shows the efficacy of GDVCA over 33 benchmark instances for the four vertex coloring problems. The paper concludes with Section 6.

Nodes (vertices) access to the channel using slotted Carrier Sense Multiple Access (CSMA). CSMA is used to determine the availability of the channel before a node begins its transmission. The channel is checked first whether it is busy (channel is being accessed by other nodes) or it is in idle state (channel is available) before transmission [42]. Every time

In the first time slot, an NH vertex tries to access the channel and broadcast CMSG; a non-NH vertex listens to the channel for the whole time slot. If a non-NH vertex senses the channel as busy, it waits to receive CMSG. Otherwise, it tries to access the channel and broadcast CMSG at the second time slot. In any situation, if a vertex wants to broadcast CMSG and senses the channel as busy, it waits for the next time slot. If a vertex still (at the beginning of the next time slot) has to broadcast CMSG, it broadcasts CMSG if the channel is idle. The vertex continues this procedure until the channel becomes idle and it broadcasts CMSG.

CMSG includes a field that shows the time slot number of its sender. If a vertex has not received any CMSG yet, it sets this field to zero. Otherwise, it uses the sender's timing; if a vertex received more than one CMSG with different timings, it would use the timing of the last CMSG's sender. A recipient vertex knows the beginning of the received message and the chosen mini slot by its sender; so it knows the beginning of the current time slot and its number. The length of time slot is constant, so the recipient knows the end of the current time slot and the end of the algorithm. Vertex v can finish the coloring algorithm if: length of payload is less than the overhead. Thus, the first and the most important step to reduce the number of bits is to reduce the number of messages, and the second step is to reduce the number and length of fields that must be present in the MAC frame body. GDVCA does the first step excellently and each vertex broadcasts at most one CMSG. The number of bits transmitted by a vertex is zero if it is not an assigning vertex. Other- wise, it is the length of the message transmitted by the assigning vertex.

limited. In other words, the number of interfering/conflicting nodes for each node is limited. According to Theorem 1, coloring the graph of this network using GDVCA takes a finite time even if the number of vertices approached infinity. Moreover, coloring Special graphs using GDVCA has interesting features.

Proof. If there is only one vertex (v) that is connected to all other vertices, then and according to NH definition, v is the only NH in the graph. If there are some vertices that are connected to all other vertices, then only one of them is an NH (v), because from any two adjacent vertices, at most one of them is an NH. The NH is connected to all other vertices. After it broadcasts CMSG, all vertices of G are assigned colors, and there is no need any vertex to broadcast CMSG. Moreover, coloring G by the NH is similar to a centralized algorithm and can be done with the minimum number of colors.

Algorithm 2 shows how v assigns colors to the uncolored set UCV; or how v implements line 17 of Algorithm 1. At first, v finds the next vertex for color assignment using a heuristic method. The heuristic method is the combination of saturation degree, largest-degree first, and largest-ID first; it has been proposed by Ref. [4,45]. Saturation degree of a vertex is the number of different colors assigned to the vertex's neighbors. v does not have complete knowledge of colors assigned to the neighbors of its neighbors, so it computes the saturation degree of its neighbors based on

Algorithm 3 shows how v assigns colors to UCV. At the beginning of the algorithm, v selects the next vertex in UCV using the heuristic method (line 2 of the algorithm). Then, v assigns the minimum allowed colors to the chosen vertex.

soon as a legal k-BCP is found, they decrease k to k 1 and solve the new k-BCP problem. This process is repeated until no legal k-coloring can be found and the result is the last k for which a legal k-coloring is reached [13,17,19,21]bib21. GDVCA can be used as a distributed solution for the BCP. Any presented algorithm for BCP to color G can be used by v to color G v .

To evaluate GDVCA performance, we use 33 benchmark geometric instances given by Trick. They have been used by related work to assess their proposed algorithms for MCP, BCP, and BMCP problems [9,13,14, 16,17,20,21]. These instances belong to three kinds: GEOMn, GEOMna, and GEOMnb, where n represents the number of vertices in the graph. In these graphs, the vertices are randomly generated in a 10,000 by 10,000 grid and are connected if they are close enough together. Edge weights are inversely proportional to the distance between the corresponding vertices. The weights of vertices are uniformly randomly generated

The vertex coloring problem and its generalizations have a lot of applications in computer networks. But proposed algorithms have serious issues that prevent them from being usable in real world especially in wireless networks. We have proposed a distributed vertex coloring al- gorithm (GDVCA) for vertex coloring problems in wireless networks.

