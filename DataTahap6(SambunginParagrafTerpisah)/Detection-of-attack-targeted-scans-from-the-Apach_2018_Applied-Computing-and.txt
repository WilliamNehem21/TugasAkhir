A web application could be visited for different purposes. It is possible for a web site to be visited by a regular user as a normal (natural) visit, to be viewed by crawlers, bots, spiders, etc. for indexing purposes, lastly to be exploratory scanned by malicious users prior to an attack. An attack targeted web scan can be viewed as a phase of a potential attack and can lead to more attack detection as compared to traditional detection methods. In this work, we propose a method to detect attack-oriented scans and to distinguish them from other types of visits. In this context, we use access log files of Apache (or ISS) web servers and try to determine attack situations through examination of the past data. In addition to web scan detec- tions, we insert a rule set to detect SQL Injection and XSS attacks. Our approach has been applied on sam- ple data sets and results have been analyzed in terms of performance measures to compare our method and other commonly used detection techniques. Furthermore, various tests have been made on log sam- ples from real systems. Lastly, several suggestions about further development have been also discussed.

malicious activities. Actually, all machine learning algorithms have training phase and training data to built a classification model. In order to increase accuracy of machine learning classi- fier model, a large scale input training data is needed. In turn, an increase in memory consumption would occur. As a result, either the model would turn out to be not trainable, or training phase would last for days. On the other hand, executing the pro- posed rule set on access logs does not cause any memory con- sumption problems. Our script simply runs on Ubuntu terminal with a single line of code.

The rest of the paper is organized as follows: The related work is presented in Section 2. Section 3 presents our system model in details. Our model evaluation and real system test results are pre- sented in Section 4. The concluding remarks are given in Section 5.

Auxilia and Tamilselvan suggest a negative security model for intrusion detections in web applications [7]. This method is one of the dynamic detection techniques that is anomaly-based. The authors propose to use Web Application Firewall (WAF) with a rule set protecting web applications from unknown vulnerabilities. When analyzed their rules for Hypertext Transfer Protocol (HTTP) attacks detection, the rules appears to be generated by checking the values of some important HTTP header fields, Uniform Resource Identifier (URI) strings, cookies, etc. Associating WAF, Intrusion Detection System (IDS), rule engine reasoning together makes this article interesting.

Goseva-Popstojanova et al. [8] propose a method to classify malicious web sessions through web server logs. Firstly, the authors constitute four different data sets from honeypots; on which several web applications were installed. Afterwards, 43 dif- ferent features were extracted from web sessions to characterize each session and three machine learning methods that are Support Vector Machine (SVM), J48 and Partial Decision Trees (PART) were used to make the classifications. The authors assert that when all 43 features used in learning period, their method to distinguish between attack and vulnerability scan sessions attains high accu- racy rates with low probability of false alarms. This comprehensive research provides significant contribution in the area of web security.

In their work, Stevanovic et al. [13] use SOM and Modified Adaptive Resonance Theory 2 (Modified ART2) algorithms for training and 10 features related to web sessions for clustering. Then, the authors label these sessions as human visitors, well- behaved web crawlers, malicious crawlers and unknown visitors. In addition to classifying web sessions, similarities among the browsing styles of Google, MSN, and Yahoo are also analyzed in this article. The authors obtain lots of interesting results, one of which is that 52% of malicious web crawlers and human visitors are similar in their browsing strategies; which means that it is hard to distinguish each other.

There are several differences between our work and the above mentioned works. Firstly, as in the most of the related works, checking only the user-agent header field from a list is not enough to detect web crawlers in the correct way. Correspondingly, we add extra fields to check to make the web crawler detection more accu- rate. Additionally, unlike machine learning and data-mining, rule-based detection has been used in the proposed model. Finally, in contrast to other works, we prefer to use combined log format in order to make the number of features larger and to get more con- sistent results.

HTTP Server. As mentioned earlier, Apache/2.4.7 (Ubuntu) Server is chosen as a web server. Apache is known to be the most commonly used web server. According to the W3Techs (Web Tech- nology Surveys) [15], as of December 1, 2016; Apache is used by

In this work, DVWA 1.0.8 version (Release date: 11/01/2011) is used. To install this web application, Linux Apache MySQL PHP (LAMP) Server; including MySql, PHP5, and phpMyAdmin, has been installed. The reasons for studying with DVWA are to better understand XSS and SQL Injection attacks and to find out related payloads substituted in query string part of URIs. In this way, rule selection to detect these attacks from access logs could be correctly determined. Also, web vulnerability scanners used in this work, have scanned this web application for data collection purposes.

As mentioned earlier, our script runs on access log files. The main reason for this choice is the opportunity for detailed analysis about users actions. By examining past data, information security policies for the web applications could be correctly created and implemented. Additionally, further exploitations could be pre- vented in advance. Unlike the proposed model, Network Intrusion trators might run our script every day to check for an attack. Lastly, real-time detection and prevention is not possible with the pro- posed method which runs off-line. Thus, we could not guarantee to run on-line. In fact, this approach is conceptually sufficient for the scope of this work. Differently from the test environment; an extra module that directly accesses logs, or a script that analyses logs faster could be developed to use our approach in a live or real environment.

Afterwards, we continue by separating IP addresses of Type 2 from the rest of the access log file in Phase 2. To do this, two differ- ent approaches are used. Firstly, user-agent part of all log entries is compared with the user-agent list from robots database that is publicly available in [18]. However, since this list may not be up- to-date, another bot detection rules are added. In order to identify these rules, we use the following observations about web robots:

Since there are not any actual, publicly available and labelled data sets to evaluate our model, we create our data sets. In fact, we deploy two different web applications on two different web servers to form Type 1 and Type 3 traffics. Details are expressed in Section 3.2.2.

More specifically, the accuracy provides the percentage of Type 3 that are detected correctly. The precision determines the fraction of IP addresses correctly classified as Type 3 over all IP addresses classified as Type 3. The recall (a.k.a. sensitivity) is the fraction of IP addresses correctly classified as Type 3 over all IP addresses of Type 3. Finally, the F1-score is a harmonic mean of precision and

In this work, we studied web vulnerability scans detection through access log files of web servers in addition to detection of XSS and SQLI attacks. In accordance with this purpose, we used rule-based methodology. Firstly, we examined the behavior of the automated vulnerability scanners. Moreover, we implemented our model with a Python script. Afterwards, our model has been evaluated based on data we have collected. Finally, we tested our model on the log samples from real systems.

It is clear that our method has very high probability of detection and low probability of false alarm. More specifically, the accuracy and the precision rates of our model are 99.38%, 100.00% respec- tively. More importantly, malicious scans can be captured more precisely because different types of scanning tools including both open source and commercial tools were examined. Therefore, our results indicates that static rules can detect successfully web vul- nerability scans. Besides, we have observed that our model func- tions properly with larger and live data sets and correctly detects Type 3 IP addresses.

Future work considerations related to this work are twofold. In the first place, one could make our model possible to analyze other log files such as audit log and error log. Secondly, in addition to the scope of this work; different from SQLI and XSS attacks, other well- known web application attacks like CSRF could be addressed too.

