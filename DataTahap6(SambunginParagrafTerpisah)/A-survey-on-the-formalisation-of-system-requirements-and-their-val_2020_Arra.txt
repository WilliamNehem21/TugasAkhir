First, in the main boilerplate, we refer to two different systems (i.e. the writer and the FIFO). This specification style, due to the used boilerplate, entails the invocation of two different functions; it is there- fore represented with the invokes relationship between the push function (in main), and a new function, say function_001. For the sake of understandability, we name function_001 as add, to express that where beg(M), occ(e1), obs(s1) are mapped to events (component ports) corresponding to the occurrence of the main specification (beg(M)), the occurrence of e1 and the observation of s1 in execution traces of the model of system design. P2.1 is a safety property, whereas P2.2 is a liveness property; for both, a formal semantics has been defined

A widely used repository of patterns for functional properties is re- ported in [31]. The semantics of these patterns [34] is defined in Computation Tree Logic (CTL) [35] and in other logic languages. Ac- cording to this approach, every property is specified using a scope (optional) and a property pattern. The scope (six different patterns) se- lects the subset of the model state-space, where the property is expected to hold; for the rest of the state-space, the property is undefined. The property pattern defines an expected occurrence of a given event/state (four different patterns) or the relative order of multiple events/states (four patterns) during system execution.

For extra-functional properties, the authors of [36,37] were based on the repository of [31], to introduce patterns for real-time specifications, while in [38] the authors organized them in a unified framework and introduced some additional patterns, which complete this repository. A different set of patterns for timing properties has been also proposed in [39]. Finally, in [40] the author has presented a repository of patterns for probabilistic properties, which have been used for real-world re- quirements focused on reliability, availability, performance, safety, se- curity, and performability.

(properties derivation). Due to the creative nature of this process, its obvious dependencies on two types of models and the form of the system design process (top-down vs. bottom-up design), human involvement cannot be vanished and therefore it can be only partially automated. In next section, we survey some noteworthy proposals of tool-support in recent bibliography.

