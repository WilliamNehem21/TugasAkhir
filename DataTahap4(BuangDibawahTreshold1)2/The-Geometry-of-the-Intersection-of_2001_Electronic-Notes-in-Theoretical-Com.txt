This question of fusion of two 3D images is still an issue in Medical Imaging, mainly when small crucial parts of these images have to be matched, as it is the case, for example, with brain areas like caudate nuclei and putamen (see [2]). Several similar areas of interest for the pathologist are contained in rather small boxes, sometimes not larger than 10 pixels in each direction and the precision of medical facilities being fixed for technological reasons, there is no way of zooming in to get better views. Only a detailed mathematical study of the situation may help the surgeon.

The 2D situation is instructive because the underlying intersection prob- lem is simple and the benefit of lattice periodicity can be easily explained with the help of continued fractions. Unhappily such lattice properties do not gen- eralize such as in higher dimensions. This 2D case nevertheless gives precious indications about which higher dimensions notions are worth introducing, like plane sections of voxels spaces studied in parts 5,6, formulas giving plane sections of cubes of part 8 and quadratic cubes of part 13.

Accuracy of these simple digital coordinate change formulas is sufficient when the euclidean norm (a, b)  /m is not to small (i.e. greater than 10), but is to rough when  (a, b)  /m is small, which means that both grids have similar sizes. In this case one has to compute areas of intersections of small and large pixels and take account of them into interpolating formulas.

General Computational Geometry algorithms, which use rather sophisti- cated data structures to describe convex polyhedra are not well adapted to the present situation for two principal reasons. The first is that they avoid degenerate cases: vertex of the first cube belonging to a face or an edge of the second, colinear edges, edges coplanar to a face, coplanar faces and so on. The second is that implementing them in exact arithmetic or in Computer Algebra Systems is still ahead ([11]) and current implementations with floating point systems destroys lattice properties, which forbids their study.

Working Computer Scientists know the long way between theoretical algo- rithms and their coding. This paper is not only concerned with the geometry of voxels intersection algorithm but also with the issues in its coding. Effi- ciency of this code, mainly the deletion of almost all control tests occurring in main loop, is the first reason of our way of doing; the second one is to stay within a convenient numbers system: quadratic algebraic ones.

when parameters tend toward special values. This implies that these formulas also give particular cases of cubes plane sections. For example vertices of a parallelogram parallel to an edge will converge to it if the section plane tends to this edge. Then we shall rely on cube symmetries to get (C) plane sections for any normal vector (a, b, c), using some elementary group theory.

There are several way of extracting plane sections from a 3D image. First one was indicated above and starts cutting all voxels with a given plane leading to the plane tiling already studied. Second step of this approach consists in mapping these tiles to pixels overlapping this tiling. A precise treatment of this correspondence supposes determining all intersections of tiles and pixels, which can be done using an algorithm for the intersection of two convex polygons

As mentioned in the introduction our main interest lies in the intersection of two sets of voxels each one tiling R3 space. Tiles of each partition are identical cubes. First one can be seen as unit cube of R3 and second one as a cube of arbitrary size and orientation.

Both convex polygons being positively oriented, one edge is chosen on each curve and an alternate pursuit is opened. Each time the pursuit is stopped, the intersection point of the two current edges is computed and if it is non trivial, (segments may have a void intersection even if their support do not), it is supposed that curves cross at this point. It is easy with the help of a boolean variable to follow which of the two curves lies inside the other one. Once all edges have been traversed the algorithm is over.

It occurs that Arnold (cf. [1]), for much different motivations, showed that convex hulls of integer points contained in 3D cones, (his theory has even sense for any dimension), are the natural generalization of ordinary continued fractions. Such hulls are now called Arnold-Klein sails. Thus intersection schemes of two voxels spaces and Arnold-Klein sails are in fact the same thing.

Implementation of intersection of two digital views of a same object having neighboring resolutions needs to compute intersections of overlapping voxels. A formal approach of this question using as much as possible particular struc- ture of cubes, and specially their symmetries, shows that their plane sections can be described by exact formulas which are still valuable for degenerate cases. This avoids the complicated coding generally met in such situations.

