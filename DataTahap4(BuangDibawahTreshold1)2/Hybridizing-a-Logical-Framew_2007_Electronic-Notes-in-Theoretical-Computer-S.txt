Logical connectives familiar from the study of hybrid logic can be added to the logical framework LF, a constructive type theory of dependent functions. This extension turns out to be an attractively simple one, and maintains all the usual theoretical and algorithmic properties, for example decidability of type-checking. Moreover it results in a rich metalanguage for encoding and reasoning about a range of resource-sensitive substructural logics, analagous to the use of LF as a metalanguage for more ordinary logics.

This last application, discussed in Section 3.3, was in fact the principal motivation that led us to design the present system. We did not set out in the beginning to find out what could be expressed when hybrid connectives were added to LF; rather, we searched for a system in which linear metatheorems could be formulated. Hybridization was, in effect, then forced upon us, as we discovered it to be by far the most natural way of achieving our goal, and furthermore it also supports the other applications mentioned.

As another argument for the naturalness of the extension, all three hybrid con- nectives mentioned are related in a way that arises from considerations of focused proofs [1] in that they are all right asynchronous. In particular, the natural deduc- tion introduction rules for each connective are invertible, i.e. inference from the

terms than it could before. In this proposed alternative, the reason that terms are type-correct is suddenly more fully manifest in the terms themselves, and so different reasons amount to different terms, leading to a system that no longer is, for instance, a proper extension of LLF. It is possible that explicitly quotienting out this extra information via the idea of proof irrelevance [23] could solve this issue, but we leave this to future work.

As mentioned, the application that motivated our work was trying to achieve a clean encoding into a logical framework of the statement of theorems about substructural logics. Ideally this we would be able to adapt of the body of metatheoretic algo- rithms developed for LF[25,28,30] and we would then be able to formally state and mechanically check in software properties of substructural logics and languages in a far more natural way. We can presently do this, but only with much greater ef- fort, in existing software systems such as Twelf, which are more suited to languages without substructural features.

This goal is not a recent innovation; previous systems such as LLF [7], RLF [17], and CLF [8,9] are significant milestones in the development of substructural logical frameworks. They are already languages in which one can write proofs (and, being constructive proofs, these are essentially programs) but what is missing is a language for stating with sufficient precision what theorems these proofs actually prove, and tools for checking such claims. We claim that HLF is such a language, and we plan to develop appropriate tools.

A common use for LF and its implementation Twelf is to encode logics and proofs of properties about them by writing recursive functions in relational style that trans- form derivations of the logic being studied. For example, a cut elimination proof for intuitionistic logic can be stated by making the declaration of a type family (i.e. a three-place relation)

determine whether existing conservative termination checking algorithms [25] still apply. We expect most of the difficulty to arise in understanding the right way to adapt coverage checking [30], which is critical in the mechanization of proofs represented as programs that compute (generally partial) functions. A function that works by case analysis must cover all cases to be total, and it must be a total function to represent a correct proof.

We would like to exhibit a categorical semantics and prove soundness and com- pleteness with respect to the current system. Progress in this direction consists of the observation that the addition of the hybrid features described above to a dependent type system appears to be well modelled by taking a locally cartesian closed category (well-known to canonically model dependent types) and adding a monoid object. However, the behavior of the universal quantifier over worlds does not quite match up with its natural interpretation as a dependent function type whose domain is the carrier type of the monoid object, i.e. the type of worlds. The reason for this is that the system given syntactically treats worlds in a proof irrelevant fashion [23], so we may need to use the techniques developed by Awodey and Bauer [3] to express this categorically.

