Since our focus is on development of distributed algorithms with formal model support, we first create a formal model of the initial design idea. By model we mean a system with a clear semantics, in this paper a finite state system. Afterwards we verify the model against a correctness specification.  In this paper verification is

[5] as the underlying case study. The aim of that paper was to evaluate different proof strategies on a concrete distributed agreement algorithm, i.e. different ways of proving already known theorems. In this paper we extend and improve the algo- rithm by iterative development. In the end we provide a correctness proof for the extension.

We use communicating finite state automata with asynchronous fair message passing as the basic model. Fairness ensures that agents cannot wait forever to receive messages already sent. All n agents communicates over a medium where messages are not lost or altered under transmission.

Initially the automaton is in its Idle location. It initializes by a transition to location Phase1. From there it may either crash or move to location Wait1 waiting for a message or suspecting. It loops through all agents, moves up a round, and returns to location Phase1. When all rounds are complete it moves to Phase2. At location Wait2 all agents are looped through again. When finished it moves to Phase3 selecting the final value.

The synchronous communication primitives of UPPAAL is not usable since we need asynchronous communication. Instead we use shared buffers. There are no test- and-set race conditions since the semantics of UPPAAL is interleaved and agents write to different places of the shared memory. We introduce the boolean arrays SENT1[][] and SENT2[]. If SENT1[q][r] is true, then agents q has made a broad- cast of a message in round r in Phase 1. If SENT2[q] then agents q has made a broadcast of a message in Phase 2. The message is retrieved by an array lookup v = MSG1[q][r][i]. Here v is the integer value at index i of the message tuple sent from agent q in round r. Similarly v = MSG2[q][i] is a broadcast of a message with value v at index i from agent q.

We use model checking on a bounded number of agents and fix the number of agents to three which turns out to be enough for revealing errors. The check of (1) and (2) succeeds as expected (in total 278316 states explored, 5.2 seconds of time used).

We model-check this model against the specification with n = 3 agents. That gives a total of 154592 states explored and a time usage of 4.7 seconds. For n = 4 agents we have not been able to complete the model check due to insufficient memory) and UPPAAL finds this counter example to the termination property: Assume TI = 1 and that Agent 1, 2, and 3 cooperate such that Agent 1 and 2 discover a match

and terminate (by jumping to Phase 3) while Agent 3 waits at location Phase2. When Agent 3 then moves to location Wait2 a deadlock occurs. Agent 3 waits for a message from Agent 1. Since it cannot suspect Agent 1 (it is the TI) it will block until a message is sent. The problem is that Agent 1 has bypassed Phase 2, so it will never send the knowledge-vector to Agent 3 and Agent 3 waits forever.

The termination, agreement and validity property are now satisfied for three agents (in total 514084 states explored in 12.3 seconds). Even though we cannot check the model for n = 4 (due to lack of memory) we still have an indication that the algorithm might be correct. We therefore proceed with a general correctness proof for any fixed number of agents.

Now, p waits for q and q will not block. This means that q will send the message p is waiting for. That might either be a Phase1, Phase2 or Phase 3 message. Due to the fairness assumption (sent messages should eventually be received) p will

