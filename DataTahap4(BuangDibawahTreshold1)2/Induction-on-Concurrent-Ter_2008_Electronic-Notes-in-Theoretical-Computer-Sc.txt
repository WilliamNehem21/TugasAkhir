The presence of concurrent terms in CLF allows for a new representation methodology compared to the way e.g. operational semantics has been represented in Twelf. In Twelf the methodology is a goal-oriented approach focusing on proof- search via backward chaining bearing much resemblance to logic programming, whereas in CLF the canonical representation methodology is context-oriented, em- ploying forward chaining inside the monad. As CLF is a conservative extension to LF it allows both styles of representation to coexist.

So the important question is whether the methodology of meta-theory represen- tation and proof representation known from Twelf can be conservatively extended to deal with the new CLF representations and how. The CLF extensions over LF are linear and concurrent terms, so a conservative meta-logic for CLF would need to extend Twelf with induction on linear and concurrent terms. The importance of this question is emphasized by the fact that it is a main part of the uncharted CLF-territory and contains valuable insight on the directions in which CLF could be further developed.

In Twelf, proofs are by structural induction since whatever is represented in Twelf is represented as an inductively defined LF-term. Furthermore the proof objects themselves are inductively defined LF-terms. We expect this meta-level representa- tional methodology to extend to CLF as well, since it is a conservative extension at both the object level and the semantic level. There are however several challenges, and the one we will focus on is how to extend the structural induction known from Twelf to one working with terms with implicit concurrency. 3

Since the above proof only relies on straigtforward induction on LF-terms it should be easy to represent in CLF for any conservative extension of the Twelf meta-theory to CLF. This is however still very speculative. More on this below in section 4.2.2.

In order to complete the proof we will need to come up with a much stronger induction hypothesis. We will need to reason about the continuations that can occur in the linear context, and in order to make this precise, we will start with a definition of normal linear contexts to be the relevant linear implications from return ... into a monadic type:

If let-floating has to be reasoned about explicitly in CLF then we could probably just as well have represented the concurrent features explicitly as it would be done in Twelf. To get actual benefit from CLF it therefore seems likely that we would have to come up with a let-floating aware coverage-checker, such that the let-floating would be handled behind the scenes, much like substitution is handled behind the scenes in Twelf. More specifically, in a trace where A and B can occur in either order, we want to be able to implicitly assume that for instance A occurred first.

A conservative approximation of this restriction which is easy to compute, is to simply start the proof search semantics looking for a term of type {1}. The first step after entering the monad is a nondeterministic choice depending on the signature. Now if the only option for this nondeterministic choice is to terminate the forward-directed mode and construct 1 directly then we are certain that the signature is legal, otherwise we reject the signature.

