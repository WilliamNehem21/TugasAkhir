In the embedded, multimedia community, designers deal with data management at different levels of abstraction ranging from abstract data types and dynamic memory management to physical data organisations. In order to achieve large reductions in energy consumption, memory footprint, and/or execution time, data structure related optimizations are a must. However, the complexity of describing and implementing such optimized implementations is immense. Hence, a strong, prac- tical need is present to unambiguously (i.e. mathematically) describe these complicated dynamic data organisations.

The traversal operation, used in the above example, is an access operation in which all stored records (r) in the data structure need to be consulted. Due to the dynamic behaviour of the multimedia application, it is not a priori known which records are stored in the data structure. Traversal is a very dominant access operation in multimedia applications as is demonstrated in various case studies in [4]. This implies that memory-related energy con- sumption can decrease drastically for data structure 2 (in comparison to data structure 1) due to the decrease in number of data accesses, even though the memory footprint has increased.

The exact problem we address in this paper is the development of a formal model that allows a designer to compactly and unambiguously express the exact behaviour of nontrivial but low cost dynamic data structures. Our con- tribution is the extension of Separation Logic [9,10,11] in terms of syntax and semantics and using it as a specification language for dynamic data structures. In the rest of this section we demonstrate our two main contributions in terms of formalisation: (i) sparseness and (ii) access operations. We do so by using data structure 1 as an example. We use the term data structure and heap interchangeably. For instance, data structure 1 is a synonym for heap 1.

The specification states that the data structure contains eight consecutive heap cells starting at location l. The sparseness of the data structure is two (out of a total of eight elements). However, the specification is too strict for it specifies exactly which two heap cells contain a record (i.e. v1 and v7) as opposed to expressing that any two of the eight heap cells can contain a record. It is exactly this characteristic which needs to be modelled because it is the main source of complexity in dynamic data structures for embedded, multimedia applications. We will later show how to deal with sparseness formally.

data structure changes) such as these, we need to extend the original syntax and semantics to incorporate notions of input heap and output heap. The input heap corresponds to the original data structure (i.e. before the insertion has taken place). The output heap corresponds to the data structure that contains the record v3. Insertion is only one of the access operations that we define formally in this paper.

Besides the references given in the introduction, other sources of inspiration from the verification literature are [15,1]. Yang [15] discusses soundness and completeness of Separation Logic. Ahmed et al. [1] use type systems in conjunction with a variant of Separation Logic in order to describe hierarchical memory layouts.

When designing and implementing an embedded (e.g. hand-held) device, reduction of energy consumption for a given task is the main objective [2,3,6]. In the subdomain of multimedia, embedded systems, data management is a main contributor to power consumption [3,6,12,13]. Polyhedral models [8,3] are often used in this community (e.g. in optimization tools) to mathemati- cally model data storage and data accesses.

In each of the following two sections, we start off with the original syntax of Section 3.2 and the original semantics of Section 3.3 and extend both syntax and semantics in order to model realistic problems that we have encountered in our applications (see [4]).

Even though Formula (3) follows naturally from Formula (2), we still state Formula (3) explicitly. Recall that our objective is to describe specific proper- ties of a data structure regardless of whether these properties can be derived from other logical formulae (cf. Section 2 in which we relate our work to the program verification community).

inductive definition 4 . It describes how to traverse an array. The boundary of the traversal is defined by l and n, the current heap cell (of the traversal) that is being consulted is characterized by i, function f is applied to the value v that is stored in the current heap cell, and ves is the result which represents the sum of all the function applications during the traversal.

We extend the original syntax (Section 3.2) and semantics (Section 3.3) to model change. We do this by changing the relation s, h |= P to s, hi, ho |= P . We use hi to denote the input heap (i.e. the heap before the change has occurred) and ho to denote the output heap (i.e. the heap after the change). We do not split the stack s into an input stack si and an output stack so.

Since we are dealing with an input heap hi and an output heap ho in order to model heap changes, we extend the concept of disjointness of heaps (cf. Section 3.3) to disjointness of heap changes. Similarly, we extend the concept of the union of disjoint heaps to the union of disjoint heap changes and the

