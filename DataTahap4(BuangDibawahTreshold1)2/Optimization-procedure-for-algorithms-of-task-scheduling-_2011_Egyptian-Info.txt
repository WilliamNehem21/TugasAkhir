Abstract In distributed computing, the schedule by which tasks are assigned to processors is crit- ical to minimizing the execution time of the application. However, the problem of discovering the schedule that gives the minimum execution time is NP-complete. In this paper, a new task schedul- ing algorithm called Sorted Nodes in Leveled DAG Division (SNLDD) is introduced and developed for HeDCSs with consider a bounded number of processors. The main principle of the developed algorithm is to divide the Directed Acyclic Graph (DAG) into levels and sort the tasks in each level according to their computation size in descending order. To evaluate the performance of the devel- oped SNLDD algorithm, a comparative study has been done between the developed SNLDD algo- rithm and the Longest Dynamic Critical Path (LDCP) algorithm which is considered the most efficient existing algorithm. According to the comparative results, it is found that the performance of the developed algorithm provides better performance than the LDCP algorithm in terms of speedup, efficiency, complexity, and quality. Also, a new procedure called Superior Performance Optimization Procedure (SPOP) has been introduced and implemented in the developed SNLDD

Examples of existing task scheduling algorithms are; Heter- ogeneous Earliest Execution time (HEFT) [11], Critical Path On a Processor (CPOP) [6], Critical Path On a Cluster (CPOC) [6], Dynamic Level Scheduling (DLS) [5], Modified Critical Path (MCP) [5], Mapping Heuristic (MH) [11] and Dynamic Critical Path (DCP) [4]. Topcuoglu et al. [11] have presented a compar- ative study among the HEFT, CPOP, DLS, and MH algorithms for different values of DAG size. According to their study, the performance of the HEFT algorithm outperforms the CPOP, DLS, and MH algorithms. Moreover, the performance of the DLS algorithm outperforms the MH algorithm. The CPOP algorithm and the DLS algorithm are achieved comparable re- sults. Also, the performance of the HEFT and Heterogeneous N-predecessor Decisive Path (HNPD) algorithms is compared in [6], where the latter combines both list-based scheduling

Recently, a new algorithm called Longest Dynamic Critical Path (LDCP) has been introduced [6]. According to the LDCP algorithm, a new attribute has been used to accurately identi- fying the priorities of tasks in the HeDCSs. The performance of the LDCP algorithm is compared to the HEFT [11] and the DLS [5] algorithms.

In this paper, a new algorithm called Sorted Nodes in Leveled DAG Division (SNLDD) is introduced for static task scheduling for the HeDCSs with limited number of processors. The motivation behind this algorithm is to generate the high quality task schedule that is necessary to achieve high perfor- mance in the HeDCSs. The main principle of the developed algorithm is to divide the Directed Acyclic Graph (DAG) into levels and sort the tasks in each level according to their com- putation size in descending order. So, to evaluate the SLNDD algorithm, a comparative study has been done between the developed SNLDD algorithm and the LDCP algorithm. According to the comparative results, the SNLDD algorithm outperforms the LDCP algorithm in terms of schedule length, speedup, efficiency, and quality of system behavior.

The remainder of this paper is organized as follows; in Sec- tion 2, the task scheduling problem and some necessary terms are defined. In Section 3, the LDCP algorithm for task sched- uling in the HeDCSs is introduced. The new developed algo- rithm SNLDD is introduced in Section 4. Section 5 represents the new procedure SPOP which is applied on both LDCP and SNLDD algorithms. The comparative study be- tween the developed algorithm and the existing LDCP algo- rithm is presented in Section 6, and finally, conclusions are given in Section 7.

A set of tasks that play an important role in determining the pro- visional schedule length is identified. To compute the LDCPs, a directed acyclic graph that corresponds to a processor (DAGP) is constructed for each processor in the system according to Defi- nition 1. These DAGPs are constructed at the beginning of the scheduling process.

identify ti are set to the computation cost of ti on pj on all DAGPs. Moreover, a value of zero is assigned to all edges that extend between the nodes that identify ti and the nodes that identify its parents that are scheduled on processor pj. This must be done for all DAGPs to indicate the zero communica- tion cost between tasks scheduled on the same processor. The insertion of task ti into processor pj will result in new execution constraints.

According to the LDCP algorithm, the tasks of DAG based on the longest path computation. These computations are re- peated after assigning each task which is caused a lot of arithme- tic computations of communication overheads [6]. Therefore, the developed SNLDD algorithm is based on dividing the DAG into levels and the tasks in each level are assigned to pro- cessors. So, the computations of communication overhead are elevated. By dividing the DAG into levels based on dependency conditions and the tasks in each level are sorted according to computation sizes in the developed (SNLDD) algorithm, this leads to simplify the classification of tasks according to the pri- ority, which is considered more efficient than the LDCP algo- rithm because the time for choosing the returned task to be assigned will be computed in each step. A high quality schedule is created without introducing runtime overheads which could be resulted from updating the extracting valuable task at every assigning step as in the LDCP algorithm.

A comparative study has been done between the developed SNLDD algorithm and the LDCP algorithm. Two sets of par- allel application graphs, which correspond to both random application DAGs and DAGs of parallel numerical applica- tions are used. Also, the Standard benchmark Task Graph Set (STG) has been used [16].

Generally, the performance improvement ratio of the SNLDD algorithm outperforms the LDCP algorithm by 16% according to schedule length parameter, and 21.3% according to speedup parameter, but after adding (SPOP) procedure the performance improvement ratio of the SNLDD algorithm out- performs the LDCP algorithm by 22% according to schedule length parameter, and 28.6% according to speedup parameter.

