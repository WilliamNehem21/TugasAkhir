Service-Oriented Computing (SOC) has seen an ever increasing adoption by provid- ing support for building distributed, inter-organizational applications in heteroge- neous environments [14]. Mostly, the software industry has adopted SOC by using Web Service technologies. A Web Service is a program with a well-defined interface that can be located, published, and invoked by using standard Web protocols [5].

Our proposal models a Case-based Reasoner for Service Selection, where the main contribution is threefold. We define a case representation capturing informa- tion in Web Services functional descriptions (typically WSDL). Moreover, we draw a parallel among the key steps in CBR and the problem of Web Service Discovery and Selection. Finally, we provide three implementations for the similarity function, concerning structural and semantic aspects from functional service descriptions.

The rest of the paper is organized as follows. Section 2 details the service selection process. Section 3 presents the application of CBR in the context of service selection. Section 4 details the alternatives for the similarity function. Section 5 presents the experimental validation of the approach. Section 6 discusses related work. Conclusions and future work are presented afterwards.

Finally, the last step decides whether or not to include the confirmed solution (tested case) in KB. The learning case decision can rely upon different criteria. In this approach, we use a threshold value (th) over the similarity function: if the similarity function returns a value higher than the threshold, then the case is added to the KB.

The operations evaluation calculates similarity between this complex attribute in the new case, and the analogous attribute in the problem part of each case in KB. Since the main criterion of our service selection approach is functional similarity, this attribute presents the highest weight (w = 0.6) and the most complex similarity function in this Case-based Reasoner. Details of the similarity function for the operations attribute are presented in Section 4.

On the one hand, too many retrained cases can generate noise in the evaluation, decreasing the performance of the reasoner in the long term. On the other hand, if no new cases are added, no learning occurs, so the reasoner will not be capable to deal with new cases. In order to prevent these problems, we have defined a threshold value (th) over the similarity function (DIST ). The threshold value determines

To evaluate semantic aspects the similarity functions compare terms and identifiers from operations. We implemented three alternatives for these functions. The first two make use of WordNet [30]. WordNet is a domain-independant lexical database of the english language that is structured as a lexical tree. WordNet groups terms in synsets (synonym sets) that represent the same lexical concept. Several relation- ships connect different synsets, such as hypo/hyperonyms, holonyms/meronyms and antonyms. All hierarchies ultimately go up the root node {entity}. The WordNet

structure can be accessed through different Java libraries, each one implementing different metrics and features [15]. Particularly, in this work we used JWI 6 (in the first similarity function) and JWNL 7 (in the second similarity function). These libraries are among the most complete and easy to use for WordNet lexical tree manipulation [15].

Stop words are meaningless words that are filtered out prior to, or after, pro- cessing natural language data (text) [3]. We defined a stop words list containing articles, pronouns, prepositions, words from other stop words lists and each letter of the alphabet. The terms lists obtained from the previous step are analyzed to remove any occurrence of a word belonging to the stop words list.

Stemming is the process for reducing words to their stem, base or root form. Due to common problems of standard syntactical stemmers [39], we adapted the semantic stemmer provided by WordNet. The Stemming step receives as input a terms list. For each term in the list is verified that it belongs to the WordNet dictionary. If it does so, the corresponding stems are added to the result list. Otherwise, the original term is added to the result list, considered as an abbreviation or acronym. After generating both lists of stems, their compatibility is calculated considering semantic information. This information is expressed as a vector of integers v =

{t, e, s, h1, h2} including: the total terms between both lists (t), the identical (exact) terms (e), synonyms (s), hyperonyms (h1) and hyponyms (h2). For example, let be the identifiers GetReservation and GetCurrentBooking extracted from the cases of the Car Rental example in Section 4.1. According to the term lists semantic comparison, these identifiers present:

First, the Normalized Depth matrix (ND) is generated. The depth is defined as the shortest path between two terms in the WordNet hierarchy. These values are normalized by the maximum depth of the WordNet hierarchy (16). Formally, the normalized depth is calculated according to Formula 4.

The considered data-set consisted in 62 services extracted from the data-set of [20]. We have generated (through a tool developed in our group) one case for each ser- vice to settle the initial KB, according to the Object-oriented case representation presented in Section 3.1.

To execute the CBR for service selection, we have defined one scenario consider- ing three implementations according to the similarity functions presented in Sec- tion 4, and the 506 new cases generated by mutating operation signatures. Consid- ering traditional techniques of service retrieval and selection, we also populated the EasySOC service registry [10] with the relevant services, and then queried such reg- istry with the operation signatures. EasySOC leverages Vector Space Model (VSM) and Web Service query-by-example (WSQBE) to represent Web Service descriptions and queries.

The work in [24] presents an approach for WSC using CBR. This approach combines CBR with semantic specifications of services in the OWL-S language [27] to firstly reduce the search space of Web Services (i.e., improve service discovery), and then build an abstract composite process. Authors assume that Web Service providers are in charge of semantically annotating functional service descriptions according to the OWL-S ontology. However, this hardly occurs in practice, and most domains currently lack a descriptive ontology [6]. Our work exploits the most possible information in the (always available) service functional descriptions, to build the case representation.

Web Service similarity is addressed in [37] as a key solution to find relevant sub- stitutes for failing Web Services. The approach calculates lexical and semantic similarity between identifiers comprising service names, operations, input/output messages, parameters, and documentation. To compare message structures and complex XML schema types, authors make use of schema matching. However, a straightforward comparison of complex types can be performed without dealing with

The Woogle search engine for Web Services is presented in [13]. Based on similar- ity search, Woogle returns similar Web Services for a given query based on operation parameters as well as operations and services descriptions. Authors introduced a clustering algorithm for grouping descriptions in a reduced set of terms. After that, similarity between terms is measured using a classical IR metric such as TF/IDF. The provided solution is limited to evaluating similarity using semantic relations between clustered terms.

The work in [33] extends UDDI with UDDI Registry By Example (URBE), a Web Service retrieval algorithm for substitution purpose. The approach considers the relationships between the main elements composing a service specification (port- Type, operation, message, and part) and, if available, semantic annotations. The weak point of the approach is, as we stated earlier, that providers do not annotate their services often in practice, even when introducing annotations provides a more accurate description of the service.

