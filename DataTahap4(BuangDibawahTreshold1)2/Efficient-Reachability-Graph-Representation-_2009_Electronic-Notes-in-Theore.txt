To do so, we define a class of Petri nets, called Petri nets with counters (PNZ ). They are place/transition (P/T) Petri nets enriched with data in a global vector of integer variables, manipulated through linear transformations. The places, arcs and tokens in PNZ are like in P/T nets, while each transition carry an annotation encoding the linear transformation to perform at each firing. A PNZ can be understood as coding the control state in its places and the data state in its variables. It may also be seen as a special case of coloured Petri nets, that implement the integer variables as integer marked places. Its semantics usually leads to produce infinite reachability graphs.

A more compact state graph construction is defined next. This is made possible by detecting executions that change the data state but not the control one, and executing them as a meta-transition. The result is a compact graph in which each state possibly encodes a huge or infinite number of reachable markings.

represented as a (possibly infinite) reachability graph which is the directed graph whose nodes are all reachable markings and where each arc represents a transition and a binding producing one marking from another. In this context, the reachability graph can be considered as a compact representation of trace(N, M0). In particular, it may remain finite (i.e., have a finite number of reachable markings) even if it admits infinite traces.

We have produced a prototype implementation that computes a compacted state graph for a PNZ. The sets of integer vectors are stored using the NDD structure defined in [1] and implemented in the library Lash [2]. In some cases, our implemen- tation ends up with an error, when a transformation cannot be iterated by Lash (as explained in the introduction, this approach is not complete). Moreover, we cannot guarantee that it will terminate as this is a problem that is undecidable in general. However, sufficient conditions for the termination have been given in [1] and it is left as a future work to study how they could be applied in our setting.

We presented here the class of Petri nets with counters (PNZ ) as P/T nets enriched with unbounded (both ends) integer variables on which linear operations may be applied. The semantics of a PNZ is given by that of a family of coloured Petri nets that implement the integer variables as integer marked places. We have presented a compact state graph construction allowing to aggregate many reachable markings (possibly infinitely many) into a single state. This graph has been proved to preserve the trace semantics and to encode exactly the set of reachable markings. Finally, we introduced optimisations allowing to produce even more compact state graphs. Our next step will be a series of case studies in order to show that, even if not complete, this approach is usable and efficient in practice; in particular for systems with finite but large state spaces. Our first experiments show that it is the case for instance for the nets with causal time [5], even when we consider unbounded

