One of the great advantages of programming languages inheriting the Hindley- Milner type system [6,17] such as OCaml [12] or Haskell [11] is the conciseness and expressiveness of their type language. For example, sum types in these languages are very natural to express and use when coupled with pattern-matching. These concepts can be translated to C or Java, but at the price of a costly and unnatural encoding. Parameterised types and mutually recursive types can also be used in OCaml or Haskell to let the user define arbitrary complex data-types: part of the art of programming in such languages is to encode invariants of the problem being resolved into the types, and let the compiler statically ensure these invariants are met during the whole execution of the program.

generate efficient code with compact runtime support [9,15]. The lack of runtime type introspection does make some tasks more difficult to perform than with more dynamically-typed languages such as Python or Java. Pretty-printing, conversions between different types, or value persistence is a largely manual process in ML-like languages, and can be tedious and error-prone. Haskell solves these problems by using type-classes [4,22], which is a natural concept but difficult to implement. The type-inference algorithm becomes more complex and the runtime implementation suffers some performance penalties. In this paper, we concentrate on dynamic types, but our work is influenced by ideas coming from type-classes.

Such constructions are very powerful but difficult to implement correctly when combined with a rich type environment. Moreover, their implementation is quite intrusive in the compiler source code, as they modify the host type-system and language constructs. Possibly as a result of this complexity, modern versions of OCaml no longer have dynamics as a language feature.

In this paper, we describe a simplified implementation of dynamics in OCaml, based on staged programming to generate and execute code fragments as part of the compilation process [21]. We describe a 2-stage transformer that is sufficient for generating information about dynamic types, and we illustrate the use of that information to show how to build a storage layer which can easily persist ML values. A key benefit of our approach is that it does not need to modify the core OCaml compiler, and instead uses the camlp4 AST transformer to generate extra code at compilation time. Our implementation: (i ) parses a large subset of OCaml types to a more succinct and expressive form than the syntax tree which camlp4 provides; (ii ) implements an Object-Relational Mapping (ORM) which defines an efficient conversion to and from SQL; and (iii ) provides a syntax extension to augment type

The type t is a standard OCaml type, with an annotation to mark it as a stor- age type. Variables of type t can be saved and queried via the t open, t save and t get functions. The backend uses the SQLite database library, and SQL is automatically generated from the applications datatypes and never used by the programmer directly.

In this case, type of x has to be defined previously for the program to compile. This definition may have either been automatically generated previously using the type-of library, or been defined previously by the user. The latter option makes the type-of library easily extensible, especially for abstract types.

The only constructs are unbounded product and sum constructors. Values cor- responding to named sum types are built by remembering the name of the tag and the corresponding value. Functional values have no (explicit) runtime representa- tion and are represented by the symbol T.

As for types, our goal is to provide at runtime to the programmer a finite and easy-to-use representation of the values. However, unlike types, values are built and modified at runtime. It is thus impossible to build a translation at preprocessing time, as the program needs to run to actually produce values. We solve this by

