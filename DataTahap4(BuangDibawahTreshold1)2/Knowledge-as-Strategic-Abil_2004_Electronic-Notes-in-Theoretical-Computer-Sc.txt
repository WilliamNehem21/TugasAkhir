The ultimate goal of our research is to develop techniques for model checking knowl- edge properties of multi-agent systems. ATEL, an extension of the Alternating-time Temporal Logic of Alur et al, is a logic for specifying epistemic and strategic proper- ties of such systems. We present a technique for reducing the ATEL model checking problem to one of model checking in ATL, whereby epistemic relations are explicitly encoded in ATL models as as dynamic transitions. The techniques is illustrated by means of a knowledge game, which is used as a running example throughout the paper.

Alternating-time Temporal Logic (ATL) is a powerful logic for reasoning about the abilities ofcoalitions in multi-agent systems [2,3]. ATL has been extended to Alternating-time Temporal Epistemic Logic (ATEL) in which the knowl- edge of agents, (in the sense ofthe Fagin-Halpern-Moses-Vardi model ofknowl- edge [6]), is also considered [11]. ATEL can be used to express properties of agent communication, for instance whether communication is necessary in a certain situation, and whether communication has been successful.

Model checking is a widely used, and highly successful method for evalu- ating logic formulas on finite state systems [5]. A general method for ATEL model checking would clearly be ofgreat interest for the verification ofagent communication protocols and the planning of communication in multi-agent systems. While automatic model checkers for ATL exist [1], no such model checkers yet exist for ATEL. In the line of a previous approach [10], this paper

An argument for the existence of such reductions is that epistemic logic is a modal logic like ATL [4]. Both have a Kripke semantics, and thus can be evaluated on a transition system. In ATL, transitions correspond to compu- tation steps, while ATEL contains transitions corresponding to computations and epistemic uncertainty. In order to evaluate epistemic formulas, one may extend the transition system with additional transitions modelling the epis- temic relations. If these alterations to the transition system are manageable, (in that there is no exponential blow-up in the number of transitions), then this might be a good way to model check.

Ofcourse, we do not claim that all knowledge-related model checking prob- lems can be solved using existing model checkers. But, nevertheless, we think it is useful to investigate which problems can be solved using existing tools. In this paper we show one approach to model checking knowledge and evaluate the relative merits ofthis method.

In section 2 we introduce the example protocol and the logic ATEL used to reason about the protocol. Section 3 informally presents the main idea of this paper. Section 4 explains the theory underpinning the technique. Section 5 formally defines the method and contains a correctness proof. In section 6, the illustrate the technique by using it to prove all the properties introduced in section 2. Section 7 presents some conclusions.

the Russian Cards Problem [13]. It involves three agents, sharing five cards. Assume agent A holds cards 0 and 1, agent B has cards 2 and 3, while agent C holds card 4. We denote this deal by 01|23|4. All agents know their own cards, which cards exist and how many cards each agent has. All of this is common knowledge, and nothing else is known. Thus, for agent A the deal 01|34|2 is a possibility, while 01|2|34 is not (it knows B has two cards), and neither is 04|23|1, because A knows its own cards. Agent B, however considers 04|23|1 a possibility.

All formulas are evaluated with the card deal 01|23|4. Epistemic formulas are evaluated before anything has been communicated. To make this a dy- namic scenario, we introduce one action: A is allowed to make one of three statements, each corresponding to a logical formula. However, A can only make true statements. The whole structure of this situation, i.e., which card deals are possible, which statements A is allowed to make, that only A can say something, that each agent only knows its own cards, is assumed to be common knowledge. The possibilities are as follows.

The semantics we use for ATEL is one in which no knowledge restrictions are placed upon strategies. This is the simplest semantics and the one pro- posed originally [11]. In this semantics, players can base their decisions upon things they are supposed not to know. This may seem counter-intuitive in certain situations. If needed it can be solved by assuming a different seman- tics [8,7].

In this section we define the languages that are used in the remainder of the paper, and the semantic models over which these languages are interpreted. The most important languages we deal with are ATL and ATEL. A common subset ofthese languages is propositional logic, which will be defined as well.

The intended meaning oflabels on transitions is that these labels indicate the agent that can decide which transition will be the next step in the compu- tation. Thus this kind of system models a game-like situation, such as chess or checkers. We will use T as a variable for TBS.

It is possible to attach labels to positions instead of states. This does not result in important differences but some details will be different. In our formalisation no labels are attached to nodes from which no transitions leave. We see this as an advantage. The domain ofthe label function is the relation a, so only pairs (s, t) between which there is a transition get a label attached.

It may seem that the fact that we add agents might interfere with our appliation of the above theorem. This is not the case because the reduction method carefully constrains the actions ofthe new agents. This proofand the correctness proofofthe reduction method do not depend on each other.

The function t2 is defined in terms of t3. We will abuse notation slightly by writing t2(s, p) instead of t2((B, s), p), and by writing t3(s, p, j) instead of t3((B, s), p, j). In the following definition, the symbol S refers to the set of states of B and a refers to the transition relation of B.

In this section we demonstrate how the technique we have described can be applied to the Russian cards scenario. The example code has two goals. The first is to show how a turn-based system can be modelled in Mocha [1] using a controller or scheduler module. Secondly it shows how the reduction method from this paper can be implemented in Mocha. The first part of this section explains how the protocol has been modelled in the first place. The second part

The state of the world in the example consists of the deal of cards and all announcements made. The deal of cards can be stored in five variables d, e, f, g, h each containing one card. Agent A holds the cards contained in d, e, B holds f, g and C holds h.

In turn-based systems it is possible that more than one module is in certain situations allowed to change the value ofa variable. In ReactiveModules this cannot be implemented directly. This issue of write-shared variables can be solved by giving Control write-access to these variables. Modules X that need to alter the value of such a variable y are in control of their own copies of this variables, called xy. The x is some identifier unique for module X to make sure all variables have a unique name. When the module Control ends the turn ofa certain module X, it copies the value of xy into the real variable y.

The specification given contains some redundant variables and values. These variables will be used later on. In order to avoid having to include almost similar code later on we have not stripped the code from unused vari- ables (af,ag,ah,bd,be,bh,cd,ce,cf,cg) or values (epA,epB,epC,actB).

For each ofagent X an extra module called epistemicX was created. From the definition ofknowledge in an interpreted system [6] it follows that an agent knows its own variables. Each epistemic module reassigns all other variables in any consistent manner. For most systems, including the example system this is straightforward to implement.

Agent A has access to its own cards. The module epistemicA should therefore rearrange the cards of B and C. The next module implements the rearrangements. The variables af, ag, ah are copies of f, g, h allowing this module to suggest new values for these variables.

For each formula to check, we must alter the game structure: the epistemic modules ofthe agents involved must be used. In the program prior to modifi- cation, a comment appears saying -- insert here. At this point, the turns of the game are determined. In the original scenario, the module actionA was allowed to do one action (to make an announcement). This is modified to include epistemic transitions, matching the order ofepistemic operators in the formula to check.

The next ATL formulas and modifications correspond to the first three example formulas (page 3). The first line is the original formula. The following lines must be included in the Control module. The line starting with atl contains the resulting ATL formula, and the last line indicates the model checking result (either passed or failed).

Again the true formula passes and the false formula fails. This illustrates how one can check knowledge at different points than the initial situation. The selection oftests to use in the formulas seem somewhat ad hoc. We have opted not to introduce extra variables to act as fresh propositions, but to use tests on existing variables. Enough variables are already available to create a simple test for any interesting point in a run.

We have demonstrated a technique for model checking ATEL, a logic for ex- pressing properties involving both knowledge and strategies, using an ATL model checker. The approach can be used for arbitrary ATEL formulas on any turn-based acyclic transition system. Since ATL model checkers already exist, we believe this is a useful result of immediate practical value.

