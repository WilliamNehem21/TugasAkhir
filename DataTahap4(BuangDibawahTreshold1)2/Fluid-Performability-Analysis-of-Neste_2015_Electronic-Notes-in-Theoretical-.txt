entity can be described by an automaton. Note that the hierarchical nesting in these systems is genuinely structural and not an abstraction used to hide detail as is done, for example, in UML state machines. The organisational complexity of these systems means that it is hard to predict their behaviour and it is imperative that performance and reliability characteristics are investigated prior to deployment. When formal reasoning about these systems is performed with reactive models based on a discrete state-space representation, the problem size grows extremely quickly with the population of components, making the analysis infeasible in practice.

Nested Markov models have previously been proposed as a good model for hier- archically organised software systems, but limited progress has been made against the heavy computational costs due to layering and large multiplicities. Previously proposed techniques seek to exploit symmetries but still yield a Markov chain. For example, Buchholz exploits Kronecker algebra with hierarchical models that can express certain classes of stochastic Petri nets and queueing networks, but his work is limited to only two levels of nesting [4, 5]. Lanus and Trivedi consider a class of hierarchical Markov models where the states of automata of arbitrary size can be partitioned in such a way that a reduced model can be constructed which preserves steady-state reward measures of availability and performance [11]. However, the state space size of the CTMC is still dependent (exponentially in the worst case) on the number of so-reduced automata.

Section 2 presents our Markov model of systems of systems, helped by a simple running example that illustrates the main definitions. Section 3 discusses the fluid approximation and presents the result of ODE symmetry reduction. Section 4 uses a case study of a performability model for a hierarchical distributed computing system, for the purposes of an extensive numerical validation which considers the accuracy of the fluid approximation and its computational advantage over stochastic analysis. Finally, Section 5 concludes the paper.

We now turn to describe the structure of a system of systems model. The idea is that we will describe at each level of the hierarchy a prototype agent for each type of agent populating that level. This is captured in the notion of agent class. Then, such classes will be instantiated, specifying how many agent instances there are for each class in the system.

Let A be the set of all automata classes of a model. We can think of each class as a type of element or agent within the system. So, for example, in a server farm, farms, computers and jobs, may all be distinct automata classes within the system description. A system of systems is specified by a tree with nodes A describing the hierarchical organisation of such classes. Thus in the server farm example, a computer will be the child of a farm and be parent to several jobs.

An event specifies which automata are affected by a synchronisation, and how fast this happens. However, it says nothing about what actually happens their child nodes. Let us recall that describing this behaviour can be useful to model situations where an event in a system affects the behaviour of its inner components, e.g., a power outage for a computer will abort all of its software processes. Such a form of vertical interaction is instead captured by the notion of causal map, which defines how the transition of a parent automaton impacts on its child automata.

and child nodes) and the update vector, specifying the net change in the CTMC state descriptor. Furthermore, each event propagates its effects downstream in the automata hierarchy, according to the causal rules associated with a state change in the automata involved in the transition. Hence, we also need to specify at what rate child automata perceive the event that happened at their parent level, and how their state is modified.

There are several directions for future work. An interesting area of applicability could be biological processes. but for this the model will need to be extended to ex- plicitly treat birth and death events, in order to describe and investigate systems in which the populations of automata are not static throughout the life of the system. Second, we will consider how lumpability can be extended to higher-order moment approximations. Finally, we would like to lift convergence results for Markov pop- ulation models to our setting of nested automata, for instance by studying which scaling of replica sizes leads to decrease in the approximation error.

