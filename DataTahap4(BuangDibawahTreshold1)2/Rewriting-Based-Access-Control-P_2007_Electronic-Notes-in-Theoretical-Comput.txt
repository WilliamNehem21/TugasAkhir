Term rewriting [1] is a well-established paradigm for specifying and prototyping systems. It has been proved useful in theorem proving, program transformation, and algebraic specification. In many practical situations, its straightforward formal background allowed to rapidly prototype and verify diverse kinds of systems. In the domain of computer security, term rewriting has been successfully applied to help reasoning about some of its aspects, notably in verification of security proto- cols [17,7].

Some fundamental models for access control rely on modified variants of the access control matrix. For example, military security policies [4] add confidentiality levels to subjects and objects. Then the fixed security policy states that a subject cannot write to an object with inferior security level, and that it cannot read from objects with superior security levels - no reads-up, no writes-down. Even though the access control matrix is a support for a number of formalizations of access control policies, it is not appropriate to capture more dynamic policies, such as policies that depend on time, location, and many other possible attributes of the policy environment.

Example 4.1 We use the signature below for the medical application described in Section 3, where a patient is represented by a term containing name, number, age, and a guardian, in this order. The keyword ctor indicates that the operator it follows is a constructor.

monitor, which would not be able to compute an authorization in finite time. We suggest that a refinement discipline for policy specification should be followed, such that verification steps for checking a number of important properties are performed before enforcing some policy. In the next section we discuss what are the desired properties for rewriting-based policies.

Readers must be aware that policy combination may lead to problems, since termination is not a modular property [24]. This means that the union of the sets of rules of two terminating term rewriting systems may not produce a terminating one. Most of the positive results on the union of term rewriting systems assume the signature of the composed systems to be disjoint. A survey on modularity of various properties of term rewriting systems is found on [15].

For example, consider the consistency problem under policy composition. We know that in the case of access control policies based in logics, this property can be preserved by restricting the form of the rules, as discussed in [16]. In the other hand, the rewriting-based approaches can profit from existing results concerning the modularity of the confluence property. Under the same perspective, some necessary conditions under which the termination of term rewriting systems is preserved, are known [22,19]. This makes rewriting an interesting approach for defining policies in a declarative manner.

We have discussed in this paper a formalization for access control policies using term rewriting. The resulting language allows us to express access control rules which capture dynamic conditions of the policy environment, providing a flexible way to encode authorizations. Rewrite specifications of access control written according this proposal can be employed to rapidly prototype policies, since several efficient implementations of term rewriting systems are available. Reasoning about some key properties of access control policies is also made possible, thanks to the corres- pondence we have established between the properties of policies, like consistency, and those of term rewriting systems.

