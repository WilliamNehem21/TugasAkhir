Interruption is a useful feature in programming and specification languages. Therefore, process algebras has been extended with an additional interrupt operator. We invent a class of event structures, called interrupt event structures, to give a true concurrent semantic to process algebras containing interruption. Interrupt event structures are more expressive than other event structures with respect to event trace execution. Furthermore, interrupt event structures can also distinguish simultaneous event executions from event interleaving. We show consistency, based on bisimulation, between the operational and the denotational semantics of a process algebra that contains an interrupt operator.

A useful feature in programming and specification languages is the ability to de- scribe the interruption of a normal execution of the system. Interrupt mechanisms are, for example, increasingly used to perform memory management. It is already the case that some modern, general-purpose CPUs have sophisticated ways of han- dling interrupts. See for example [26], where an interrupt calculus is invented to analyze such CPU-based interrupts. See also [24,29], where precise interrupts are discussed. Since it is also essential to have interrupt mechanisms in reactive, con- current systems (for example the downloading from the internet can be interrupted and continued by the user), various interrupt mechanisms are added to process al- gebras, see e.g. [3,4,11,12]. A common approach is to use an interrupt operator (>>) where process B1 >> B2 behaves like process B1, except that it may be inter-

True concurrency models are important to describe the independence of events (actions). Event structures (e.g. [9,21,30]) are typical true concurrency models. They are especially used to give truly concurrent denotational semantics to process algebras. Standard event structures still lack the possibility to describe interrupts: an event that gets interrupted has to become disabled, and later it has to become enabled again (when the interrupting process has terminated). But standard event structures cannot undo the disabling 1 . Exceptions are the inhibitor event structures [5]. Nevertheless, in general they are not sufficient to give denotational semantics to process algebras that contains an interrupt operator (more precisely, to the pro- cess algebra presented here), since the disabling of these event structures is too restrictive.

The cancellation of the disabling is modelled in our event structures, which we call interrupt event structures, as follows: We collect a set X of events that disables event e, i.e. e is disabled if all events of X are executed. Then we connect

It turns out that some event structures are special cases of interrupt event struc- tures. Furthermore, the other standard event structures have less expressive power than interrupt event structures with respect to event traces. Interrupt event struc- tures can also distinguish event interleaving from simultaneous event executions. More precisely, it is possible that two events may interleave but they cannot be exe- cuted simultaneously. We classify the sets of step event traces that can be described by interrupt event structures. A process algebra that contains an interrupt operator is also introduced. We give an operational semantics in terms of (labelled) transi- tion systems and a denotational semantics in terms of interrupt event structures. A consistency result between the two semantics is given.

The paper is organized as follows: In Section 2 we introduce the interrupt event structures. Their expressive power is examined in Section 3. Section 4 introduces our process algebra together with the two semantics and the consistency result. Related works are discussed in Section 5.

Remark 2.2 Interrupt event structures have to be extended with an additional con- straint (called approximation closedness) in order to obtain a complete partial or- der 3 (if the standard approach is used to define the order) [14,13]. This technical constraint is omitted here in order to increase the readability.

to true concurrency. Please note that we have considered interleaving with respect to event execution and not with respect to action execution (where the action de- noted to the event, see Subsection 4.2, is only observable and not the event itself). Of course it is possible to distinguish independence and interleaving with respect to action execution in the standard event structures (to some amount).

where x  Var, a   ct and A   Obs. A process with respect to EXP is a pair decl, B consisting of a declaration decl : Var  EXP and an expression B  EXP. Let PA denote the set of all processes. We sometimes call an expression B  EXP a process if decl is clear from the context.

disruption of B1 by B2, i.e. any action from B2 disables B1 as long as B1 has not terminated. On the other hand, the termination of B1 disables B2. The interrupt process B1 >> B2 behaves like B1, except that it may be interrupted by B2 at any time before the termination of B1. Furthermore, B1 continues its execution after the termination of B2. B1  AB2 describes the parallel execution of B1 and B2 where both processes have to synchronize on actions from A. The process terminates if both sides terminate in the case of synchronization or if one of them terminates and

the other one has already terminated. The restriction process B A executes action a if B executes action a, provided a is not contained in A. The behavior of x is given by the declaration, i.e. it allows the description of recursion.

We extend the interrupt event structures by termination and action labelling infor- mation in order to give a denotational semantics to PA. We use an additional set of event sets (T) to model termination. A system run is terminated if every element of T contains an event of the system run. Furthermore, an event structure can only terminate by executing an event, i.e. we demand that T = . However, T might

Our causality result is based on bisimulation [22]. Please note that bisimulation is a congruence for our process algebra, which follows from the format of the transition rules [2]. Before we present our consistency result, we introduce action execution (including termination information) for labelled interrupt event structures.

Proof. [Sketch] The proof uses the techniques presented in [13]: An event based transition relation is defined such that the events correspond to the events of the denotational semantics. This technique is used especially to handle unguarded recursion. Then we show that its corresponding transition system is bisimilar to

