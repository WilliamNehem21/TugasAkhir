logics for bisimulation. The resulting logics are generic in coalgebraic types, and employ a single modal operator derived directly from the coalgebraic signature. These logics are, however, difficult to use in actual specification, as their syntax does not reflect the structure of the underlying types.

The present paper describes a compositional method for defining logics which capture simulation. This method allows logics for combinations of coal- gebraic types to be derived from logics for the types being combined. Thus, the structure of the underlying types is reflected in the modal operators employed by the resulting logics.

A similar approach to defining logics was taken in [5], where logics captur- ing bisimulation were investigated from a compositional perspective. Specif- ically, it was shown in [5] that the expressiveness w.r.t. bisimulation of an inductively-defined language for coalgebras follows from an expressivity con- dition referring to one step in the definition of the language. In the case of logics for simulation, the situation is more complex. On the one hand, ways to combine notions of simulation for different coalgebraic types are needed. On the other hand, the sought logics must be tailored to particular notions of simulation, and therefore the expressivity condition used in [5] must be adapted accordingly.

Remark 2.1 This is not the only way of defining a category of relations. One can also consider the category having, as objects, pairs consisting of a set and a binary relation on it, and as arrows, functions between sets which preserve the relations. Yet another possibility is to consider the category having sets as objects and relations as arrows. All these categories are usually denoted Rel. Our own definition of Rel follows [10].

what it means for a weak monotonic relator to extend an endofunctor T. A result in [4] then shows that a minimal relator extending T exists precisely when T preserves weak pullbacks. A notion of simulation induced by a weak monotonic relator was also defined in [1]. This notion is essentially the same as that of Definition 2.11. However, since the two definitions involve different categories of relations, it is not possible to directly transfer results between the two approaches.

Here we give an alternative characterization of monotonic relators. This char- acterization will prove more convenient for our purposes; in particular, it will allow us to define a notion of simulation for probabilistic transition systems. The alternative characterization has a more categorical flavour than the orig- inal definition, as it replaces the preservation of relational composition by a monotonic relator by preservation of a property of arrows in Rel.

We now describe an inductive method for defining logics which capture sim- ulation. We use a notion of language constructor to capture one step in the definition of a language for coalgebras, and show that the expressiveness of the resulting language w.r.t. a given notion of simulation follows from an ex- pressivity condition involving the language constructor and the given relator.

In this section we show that various operations on coalgebraic types induce operations on relators on the one hand, and on language constructors on the other. Moreover, the expressiveness of language constructors w.r.t. given rela- tors is preserved by the induced operations. As a result, notions of similarity for complex coalgebraic types, as well as logics capturing them can be derived in a compositional manner.

in order to derive both a notion of simulation for T-coalgebras, and a logic which captures this notion of simulation. This yields notions of simulation and corresponding logics for a variety of probabilistic system types (see e.g. [2] for a survey of probabilistic system types studied in the literature).

We have also shown that various operations on coalgebraic signatures in- duce corresponding operations on relators as well as on language constructors, with the expressivity condition being preserved by the induced operations. This has resulted in compositional techniques for defining notions of simula- tion and logics which capture simulation. Such techniques were used to obtain a coalgebraic characterization of simulation on discrete Markov processes, as well as a logic which captures this notion of simulation.

