We consider opacity as a property of the local states of the secure (or high-level) part of the system, based on the observation of the local states of a low-level part of the system as well as actions. We propose a Petri net modelling technique which allows one to specify different information flow properties, using suitably defined observations of system behaviour. We then discuss expressiveness of the resulting framework and the decidability of the associated verification problems.

The notion of secrecy has been formulated in various ways in the computer security literature. One well known formulation is that of non-interference, generally attributed to Goguen and Meseguer in [5] and [6], but the idea can be traced back to earlier work of Feiertag [3] and Cohen [2]. This seeks to formalise the absence of any information flow or more precisely, the absence of any causal flow from one process to another. A reformulation of this notion in terms of structural characteristics of Petri nets has recently been given by Busi and Gorrieri [1].

that whatever observations an uncleared user may make of the system, the space of possible high level (secret) inputs consistent with those observations is unchanged. In other words, the uncleared user should be unable to make any useful deductions about the interactions of a secret user with the system. A number of problems and limitations of the original formulation have been noted over the years and several variants proposed. An overview can be found in [9].

Later on, initial-opacity is illustrated by the dining cryptographers ex- ample. It would appear that it is suited to modelling situations in which initialisation information such as crypto keys, etc., needs to be kept secret. More generally, situations in which confidential information can be modelled in terms of initially resolved non-determinism can be captured in this way. On the other hand, always-opacity would seem more appropriate to capture

So far we have tacitly assumed that it is always possible to observe in some way every step of executed transitions (i.e., some label is always generated). However, one might also wish to deal with totally invisible transitions and steps. We now will outline how such a feature could be incorporated within our present framework.

To illustrate our approach, we use a simplified (and more intimate) version of the dining cryptographers with just two dining companions. This version is also used in [4]. The standard dining cryptographers involves three diners and admits some further anonymity properties, e.g., a paying cryptographer

Two cryptographers, Anne and Bob, enjoy a meal in a restaurant. When they call for the bill, the waiter tells them that it has already been paid. Anne and Bob each wish to know whether the bill was paid by the NSA, or if it was one of them. However, if one of them paid, they do not want an eavesdropper,

represented by placing tokens in place c1h, and tails is represented by placing tokens in place c1t), and the bottom two places represent the second coin. For each pair, the marked place must contain two tokens. This is because both Anne and Bob must see each coin. The possible initial markings for the coins are therefore

