using temporal logic [11,18] (for instance, to establish the validity of security properties of protocols). However, it is well known that verifying a temporal logic formula against a model, in particular finding all the system states that verify the formula, is in general a hard problem. Recall that in the case of fi- nite states this problem is decidable both for CTL* and for the simpler case of CTL. The complexity of this problem is PSPACE complete for CTL* [11] and linear running time for CTL [1]. Model checking is usually applied to programs that consist of several concurrent processes; the number of states represent- ing the whole program behaviour may grow exponentially in the number of such processes. This problem (known as state explosion problem) and the huge complexity for verifying temporal formulae against a model, especially for CTL*, are limiting factors that have to be tackled for any practical use of this technique.

Temporal Logic appears appropriate for describing the time-varying behaviour of reactive systems, e.g. universal properties (properties that have to hold along all executions of a program) and existential properties (properties that have to hold along some executions), as well as safety properties (nothing bad may happen) and liveness properties (something good has to happen) [18,19].

Example 4.6 By considering the example in Section 3 and by abstracting C with SignV we obtain the model A. On the contrary, if we consider the example 5.6 we note that the model computed with Sign is less precise than A because the Z element is not join irreducible.

The relevance of compression with respect to disjunction relies upon Theo- rem 4.5 above. In this case it is natural to state the following question: Is it possible to minimize the disjunctive information in domains in such a way the abstract model be minimal with respect to this information? In the follow- ing we consider the notion of least disjunctive bases introduced in [15]. This

Note that if the cells to be sorted by the linear sorting array algorithm are n then the number of abstract states is 2n+1, while the number of concrete states is infinite or 2rn, considering a range r of integer number (e.g. r ' 2maxint).

