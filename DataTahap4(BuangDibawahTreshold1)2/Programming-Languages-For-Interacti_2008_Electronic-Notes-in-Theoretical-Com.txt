exists in the service of essentially declarative ends. A key claim I will be making in this paper is that the reason the current paradigm works at all is that systems implemented in this way approximate a much simpler, declarative model of inter- active computation. Experienced software designers rely tacitly on something like this declarative model in order to make decisions about what counts as reasonable behaviour. Indeed, rather than being ill-suited to interaction, as is sometimes as- sumed, perhaps because of the somewhat arcane feel of techniques such as monads

I propose therefore that the best way to address the impedance mismatch be- tween algorithmic languages and interactive systems is not to wallow in the tar- pit of imperative languages, but to lift declarative languages into a computational model which supports interaction directly. The aim of this paper is to set out the conceptual foundations of such a model, which I shall refer to as the declarative interaction model. No new results are presented; instead the paper attempts to provide the philosophical framework and motivation for further research. Future work will formalise various aspects of the model.

One way to visualise an unfolded computation is to consider execution as a process more akin to (hygenic) macro-expansion than to reduction. Reduction discards in- termediate terms, whereas unfolding integrates them into a unified static structure. Recursive calls expand into nested structure, with laziness allowing the unfolded structure to remain finite. (Grey text above indicates arguments which are un- needed.)

Crucially, clients are unable to distinguish disconnection from an observed sys- tem, from the observed system deciding to batch up changes before publishing them. In fact the synchronisation policy can lie anywhere on the continuum between fully incremental and full batch-mode. The upshot is that transactions serve not only as a concurrency mechanism, but also as a mechanism for tolerating unbounded disconnection times by allowing micro-changes to batch up into larger deltas. How this approach relates to other asynchronous interaction models suited to distributed computing is an important topic for future study. In allowing only declarative inter-

