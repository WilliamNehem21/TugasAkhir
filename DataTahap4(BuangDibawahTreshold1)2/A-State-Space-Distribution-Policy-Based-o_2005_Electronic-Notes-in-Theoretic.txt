We aim at improving the performance of distributed algorithms for model checking and state space reduction. To this end, we introduce a new distribution policy of states over workers. This policy reduces the number of transitions between states located at different workers. This in turn is expected to reduce the communication costs of the distributed algorithms.

The main idea is to use Abstract Interpretation techniques to compute a small approximation of the state space, starting from some high level description of the system. Based on this approximation, the connectivity of concrete states is predicted. This information is used to distribute states with expected connectivity to the same worker. Experiments show a considerable reduction of cross transitions, at the expense of a modest unbalance of nodes per worker.

The behaviour of a reactive system can be represented as a state space or labelled transition system (LTS). Nodes of the LTS correspond to states, edges to transitions between states, and labels on edges correspond to events. In enumerative model checking, an LTS is generated from a system specification, and desired properties are checked by a model checking algorithm.

Most algorithms above are based on reachability procedures, in which in- formation is transfered between states that are connected by transitions. So, in order to reduce the communication costs, we must minimize the number of cross transitions, i.e., edges between states on different workers. At the same time, the number of nodes per worker must be balanced, in order to maximally exploit the parallelism possibilities.

As a solution, we propose to compute a small approximation of the state space by an abstract interpretation [8,15] of the system specification. The connectivity of abstract states is used to predict connectivity between the corresponding concrete states. In particular, the abstraction function is used, in order to assign the states to a worker.

As a feasibility study, we implemented this distribution policy. We mea- sured the number of nodes per worker and the number of cross transitions. We compared the results with the random distribution on a number of large state spaces (millions of states). The improvement on the cross transitions are impressive, while the penalty of unbalanced number of nodes per worker remains modest. So, even though our ideas have not yet been inserted in the

Related work. Many papers presenting distributed model checking algo- rithms and other distributed applications on large graphs, acknowledge the importance of a good graph partitioning method. Graph (bi-)partitioning is an NP-hard optimization problem [9], therefore near-optimal solutions are computed using specialized heuristics or general stochastic procedures (like simulated annealing, genetic algorithms). Our approach is an heuristics espe- cially designed for graphs representing behaviours (LTSs).

Our approach has similarities to the one presented in [7], where a partition- ing function is defined taking into account the structure of the original (Petri net) specification. This gives a small number of cross transitions at the risk of bad balance. However, our experiments show that the abstract interpretation distribution algorithm produces a much lower proportion of cross transitions. The partitioning problem shows up in symbolic model checking as well.

All our distributed tools perform on an iterative basis, alternating computa- tion and communication phases. The good performance of computation phases relies on the balanced workload, that is on a balanced assignment of states to workers. The communication phases consist mostly of exchanging information about neighbour states. Therefore the communication performance depends on the amount of transitions that cross worker boundaries (cross transitions). Our algorithm for branching bisimulation reduction [4] walks, in every iteration, through whole subgraphs of silent steps. This operation is especially expensive if these subgraphs are scattered on more workers, as it is usually

balance, i.e., more-or-less the same number of states on each worker. To measure this, we introduce the notion of worst case balance (WCb), as being the difference (in %) between the biggest load (number of states) assigned to a worker and the average load. Since the sets of states assigned to different workers are disjoint, the average load is the total number of states divided by the number of workers.

As we have presented above, computing an abstract approximation of a system gives a prediction about the shape of the state graph and the connections among the states. We use the abstract transition system to optimize the number of cross transitions. However, the abstract graph does not contain information about the number of concrete states that are related to every abstract state, therefore the minimization of the cross transitions may have the drawback of the loss of balance of the system. To attack this problem, we first distribute the abstract states over C classes. The partitioning algorithm is:

For a feasibility study of our distribution policy, we implemented the steps above with minimal effort. We added code to our existing tools, to measure the effect on balance and cross transitions, but the implementation leaves still space for improvements. The results are compared with an existing and widely used implementation.

The selection of the initial abstraction is a crucial point in order to obtain satisfactory results. In our preliminary experiments, we hide the main part of the systems. We let unhidden some variables that control the flow of the system. This technique has the advantage that it can be completely automatized since the control flow variables can be easily detected. Typically, the control flow represents accurately the shape of the final graph. This technique generates rather small abstractions which mainly contain may transitions. We believe that by increasing the size of the abstractions the results can be better. Moreover, we think that the abstractions have to contain not only information about the control flow but also about data.

In all the cases but one the percentage of internal transitions is much higher using the abstract distribution than using the random one. In the case of the Leader specification it is 6.5 times better. The only non-positive result is given by the Bad Client protocol. In this case the number of internal transitions is slightly worse than in the random case. This bad result may come from the fact that the number of abstract states of the initial abstraction is too small in relation with the number of concrete states or from a wrong selection of the initial abstraction. Even though the last non-positive result, in the rest of the cases the gain is considerable.

The random distribution maximizes the balance of the system, the worst case balance is typ- ically very close to the average. For the abstraction guided distribution the balance is not that perfect. The only case that the loss of balance is important is for the Splice system in which one worker receives more than half of the states. This is due to the very small number of abstract states of the selected abstraction, which, however, leads to a very good transitions ratio.

The abstractions are computed in few seconds and the complexity of the state space generation is not incremented by performing the abstraction guided distribution. It is only needed to compute the mapping function from concrete states to abstract classes for every new state. The final redistribution is quickly computed due to the very small number of classes.

The next phase of the experiments will consist in doing some tests about the performance speed-up of the distributed model checking tools. For this purpose, we have to integrate the methodology in the existing distributed tools. We consider that the measurements presented above are a good indication about the final results, therefore we expect to increase the performance, specially for the cycle reduction algorithm in which the distribution of transitions plays a very important role. Our method is completely scalable and has no extra cost for bigger instances of systems.

As we have seen, the algorithms used on the experiments are very simple. We believe that using more sophisticated algorithms may produce better distributions of states and transitions. We are currently working on an interface of our implementation with the software package Chaco [12], which provides a collection of efficient graph partitioning algorithms.

