In the next section we give some background material on interaction nets. We discuss our source language in Section 3. In Sections 4 and 5 we define the compila- tion schemes from our source language to C. In Section 6 we give the implementation details before concluding the paper in Section 7.

The introduction of agents with values provide us with an efficient representation of data types in interaction nets. For example, we can represent numbers in a way that is directly supported by hardware rather than using S and Z agents. We also introduce a set of deterministic operations on the built-in data types: booleans, integers and characters. The example rule below shows how we can encode the addition operation in a way that is directly supported by hardware.

A net may contain more than one active pair, so reduction can proceed by alternative routes. In order to guarantee uniqueness of normal forms (in the sense that the same net will always give the same result), we give one simple reduction strategy which reduces a net to full normal form using a last-in-first-out (LIFO) order. We keep all active pairs in a stack and reduce them according to LIFO. We simulate this strategy using a big-step structured operational semantics:

In this section we define the compilation schemes from our source language to C source code. We use existing C compilers to translate the generated C source files to native codes. When executed, the generated codes will build the corresponding net in memory and reduce it to full normal form.

The basic model is that we compile each rule and each net to a C function. The functions generated for rules take a pair of (active) agents as parameters. They contain code that will build the rhs net of a rule and wire it to the agents that are connected to the auxiliary ports of the active pair.

web page: http://www.interaction-nets.org/, and is one of the main building blocks for building a programming environment for interaction nets. Current work is focussed on giving a formal operational semantics of this language, and also building a richer set of programming tools.

