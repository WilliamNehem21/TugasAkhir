language [11] for programming tuple centres in the context of TuCSoN coordination infrastructure for multiagent systems (MAS) [14,13]. Tuple centres can be seen as coordination virtual machines, namely, engines, which can be programmed by coordination rules governing the interactions between agents acting in a distributed setting. Accordingly, A&A ReSpecT is a scripting language that can be used to change the default, Linda-like behaviour of a tuple centre, in terms of rules that intercept events and accordingly modify the tuple dataspace, thus implementing any coordination policy [6]. Our Maude specification of A&A ReSpecT is developed in a multiset rewriting style inspired by process algebraic approaches as in [2], and can be seen as a prototype implementation of a tuple centre. Its main applications include the ability to act as a reference specification for the language syntax and semantics, as a tool to verify the correctness of A&A ReSpecT programs in terms of intended behaviour, and as a basis for evaluating extensions of A&A ReSpecT to tackle new domains such as e.g. the stochastic-oriented setting.

Tuple centres [13] are coordination media that can be described as programmable tuple spaces. In fact, the behaviour of a tuple centre can be defined through a specification language determining its coordinating behaviour. Tuple centres are adopted by MAS coordination infrastructures such as TuCSoN [14] and MARS [4].

where EvtOp is the logic term denoting the tuple-centre operation that generates the event, while Src and Target are identifiers representing the source and the target of EvtOp, respectively. The Time variable denotes the time at which EvtOp was first emitted by Src on the tuple centre. As pointed out in [11], both the source and the target of a tuple-centre operation can be either an agent or a tuple centre.

To model the environment where all the reaction goals in a reaction body are executed, we introduced the ReactionState sort by adopting the syntax < El >, where El denotes the multiset of the tuple-centre elements necessary to perform the execution of the reaction goals. For instance, El has to contain both the tuple- centre element denoting the temporary multiset of tuples target of the reaction-goal execution, and the tuple-centre element denoting the reactions triggered during the execution of the reaction goals. The noReactionExec constant represents the empty reaction execution environment, that is, the tuple-centre condition where no pending reactions are to be executed.

