Generalization, also called anti-unification, is the dual of unification. Given terms t and t', a generalization is a term t'' of which t and t' are substitution instances. The dual of a most general unifier (mgu) is that of least general generalization (lgg). In this work, we extend the known untyped generalization algorithm to an order-sorted typed setting with sorts, subsorts, and subtype polymorphism. Unlike the untyped case, there is in general no single lgg. Instead, there is a finite, minimal set of lggs, so that any other generalization has at least one of them as an instance. Our generalization algorithm is expressed by means of an inference system for which we give a proof of correctness. This opens up new applications to partial evaluation, program synthesis, and theorem proving for typed reasoning systems and typed rule-based languages such as ASF+SDF, Elan, OBJ, Cafe-OBJ, and Maude.

Generalization, also called anti-unification, is the dual of unification. Given terms t and t', a generalization of t and t' is a term t'' of which t and t' are substitution instances. The dual of a most general unifier (mgu) is that of least general gener- alization (lgg), that is, a generalization that is a substitution instance of any other one. Generalization is a formal reasoning component of many program analysis and transformation methods, including theorem provers, and program analysis and transformation tools (see, e.g., [12,22,8,24]).

As it is usual in current treatments of different formal deduction mechanisms, and has become standard for the dual case of unification algorithms since Martelli and Montanari (see, e.g., [18,15]), we specify the generalization process by means of an inference system rather than by an imperative-style algorithm. Even for the known untyped generalization case, which we present as a special case to motivate its order-sorted extension, this has several expository and conceptual advantages, and we give an inference system that to the best of our knowledge is new. After this, we show how our unsorted calculus naturally extends to the new order-sorted generalization algorithm. We illustrate the use of the inference rules with several examples. Finally, we give a proof of correctness of our inference system.

