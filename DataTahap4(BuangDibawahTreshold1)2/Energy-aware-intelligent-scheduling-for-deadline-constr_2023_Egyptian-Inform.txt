The rest of this paper is as follows: Section 2 introduces the models for power consumption and workflows, and then formu- lates the workflow scheduling problem as a single-objective con- strained problem. Section 3 develops the energy-aware intelligent algorithm, followed by its numerical validations in Sec- tion 4. Section 5 concludes this paper and points out two research directions.

In this paper, we encode a solution as two n-dimensional vec- tors. The first vector corresponds to the mapping from tasks to vir- tual machines, where an index denotes a task, and its value denotes the virtual machine where this task will be executed. The second segment corresponds to the mapping from tasks to execution time, where an index denotes a task, and its value denotes the execution time of this task.

For the proposed energy-aware intelligent scheduling algorithm (EIS), its main process is summarized in Algorithm 1. Its elemental inputs contain the data about the workflow, candidate resource pool, population size of the algorithm, and the maximum function evaluations as stop condition. When the EIS meets the stop condi- tion, it will select and output a scheduling solution with the min- imum energy consumption.

functions are to optimize the execution time of each task, i.e., the second encoding segments of solutions. These two functions are detailed in Algorithm 2 and Algorithm 3, respectively. Based on the mappings from workflow tasks to cloud resources and the mappings from workflow tasks to rutime, the proposed algorithm evaluates the energy consumption of each scheduling solution to generate an offspring population (Line 7). Also, the number of func- tion evaluations used FEs is updated (Line 8).

The main component difference between variant Non-STA and EIS is that Non-STA does not employ Function SlackTimeAssignment(). Then, the amount of energy reduced by EIS over Non-STA can be attributed to the performance contribu- tion of Function SlackTimeAssignment(). Similarly, the energy reduction of EIS over Non-ITG corresponds to the performance con- tribution of Function IdleTimeGrab(). According to the comparison results on the four workflows, we can see that Function SlackTimeAssignment() contributes more to energy saving. For example, on workflow Montage_100, Function.

