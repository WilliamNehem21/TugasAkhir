We design a security model that guarantees data confidentiality within an application; this security model takes advantages of both mandatory and discretionary access models. We extend the semantics of ASP with predicate conditions that provide a formal security framework, dynamically checking for unauthorized information flows. As a final result, all authorized communication paths are secure: no disclosure of information can happen. This theoretically-founded contribution may have a strong impact on distributed object-based applications, that are more and more present and confidentiality-demanding on the Internet, it also arises a new issue in data confidentiality: authorization of secured information flow transiting (by

The main contribution of this work is to provide data confidentiality and secure infor- mation flows for asynchronous distributed object-based applications. The proposed security model heavily relies on security policy rules with mandatory enforcements for the control of information flow. While information flows are generally verified statically [20,3,15,14,25,22,16,10], our attention is focused on dynamic verifications. To achieve it, our model has an information control policy that includes discretionary rules, and because these rules are by nature dynamically enforceable, we can take advantage of the dynamic checks to carry out at the same time all mandatory checks.

a sound foundation. This security model is founded on a strong theoretical back- ground, the ASP calculus [7,6], related to well-known formalisms [14,13,10,9]. We extend the formal semantics of ASP with predicate conditions. This provides a formal basis to our model, and makes it possible to dynamically check for unau- thorized accesses. Finally, in order to prove the correctness of our security model, an intuitive secure information flow property is defined and proved to be ensured by the application of access control model.

scalability and flexibility. We also target practical use of this model, with an implementation into middlewares, e.g. ProActive [21]. The granularity of our security model is defined in order to make it both efficient (because there is no security check inside an activity) and finely tunable: levels can be defined on activities but a specific level can be given to communicated data.

distributed over (single threaded) activities, without shared memory. Activities communicate by asynchronous method calls, and reply by means of futures, thus leading to a data-flow synchronization. Futures allow latency hiding without loosing, neither ease of programming nor efficiency. This paper will soundly formalize the security of information flow for this recent programming methodology: asynchronous service-oriented programming.

Next, system-wide information flows are described by a path. The path is the route along which the information travels, it is constructed by a chain of communi- cating activities where a subject activity is the starting-point and a target activity is the end-point of the path. Each information transmission observed on each activity will serve for the construction of a path. This path will be called flow-path.

The proof of this property is straightforward; it is obtained by induction on the length of the information flow path and by a case analysis on the rules of Definition 4. This property does not take advantage of the MAC aspect of our model. Indeed, the same property could have been obtained with a purely DAC approach. This property rather shows that our specific and somehow less restrictive definition of information flow does not compromise secured information flow. A secured infor- mation flow property using the MAC aspect of our security policy is beyond the scope of this study. More generally, the study of the relation between mandatory

Compared with other solutions, our secure information flow is the simple compo- sition of a complex elementary flow. This results from the adaptation of the security formalism to a specific service-oriented framework. Complexity of the elementary flow comes from the asymmetric and asynchronous nature of ASP communications. Once such basic secure communications are ensured, the security of information flows is verified in a simple and intuitive manner. The soundness of secure infor- mation flow is thus ensured by a precise definition of information in the previous section and the fact that secure communications defined in Section 3.1 ensure that every information flow must verify the security policy.

Bertino et al. [5] treat exception-based information flow controls in object- oriented systems. They extend close work from Jajodia, Kogan, Sandhu [17] and Samarati et al. [23] to include operations (exceptions) normally not allowed by the strict security policy. They use an ACL (discretionary control) to operate on write and create actions, and with the permissive exceptions, they relax the strict policy imposed on those same actions. The use of exceptions to alter the strict appli- cations mandatory rules of [5] is similar to the use of discretionary conditions in our framework. Both mechanisms allow one to bypass the rigorous application of strict/mandatory access controls.

Attali, Caromel and Contes present high-level rules which define a security policy for GRID applications built upon ProActive [2]. It is based on a discretionary approach where entities follow a hierarchical structure and relies on a Public Key Infrastructure. By comparison, our work focuses only on the communication actions, studies confidentiality in information flows specific to service-oriented applications, and uses both discretionary and mandatory approaches.

We focus an a financial application specifically oriented to the stock market. The global scenario has the following actors: a stock exchange market, a few banks, and some clients. In this scenario, the main idea is to transform some source information in order to produce another type of information latter used as support in a trade decision process (e.i. decisions to make with respect to the buying and selling of actions in the stock market). In this sense, the stock exchange market will act as the provider of the raw or source information, transferring it to its direct clients, which in this case are the banks.

Information from C1 to I and B is provided on demand, hence the respective pairs Rq5-Rp5 and Rq6-Rp6. Rq7 between C2 and Clnt follows the same methodol- ogy as Rq1. Finally, transactions of trade orders between C1 and S are accomplished with Rq8-Rp8.

