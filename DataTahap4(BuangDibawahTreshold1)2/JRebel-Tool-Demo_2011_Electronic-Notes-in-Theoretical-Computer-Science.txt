JRebel started as an academical project that became a successful commercial product used by thousands of developers worldwide. It extends the Java Virtual Machine with a mechanism that allows seamless class reloading. It uses bytecode manipulation extensively, both for the just-in-time class translator and numerous integrations with the Java SE and EE APIs. In this live demo we will show how it can be used in real-life projects to cut development time by 8 to 18 per cent.

Java EE development day-to-day activities involves deploying the application to the Java EE server. This step is necessary after the application has been compiled and packaged into an archive as per Java EE specification. Every time developers want to make changes to the running application they need to deploy it, which can take from a few seconds in the best case to several minutes in the worst.

An alternative way to update an application is using the HotSwap protocol [1], available from the Java EE debugger. This allows to update the application classes without redeploying it. Unfortunately only a very restricted set of changes is al- lowed; namely HotSwap allows changes to the method bodies, but does not allow changing the class signature or inheritance hierarchy. Thus no new methods, fields or constructors are allowed.

The average is about 10.5 minutes per hour, accounting for 17.5% of total development time. The standard deviation is 8, which means that the actual per cent varies quite a lot. The estimated number of Java developers worldwide is nine million. Estimating conservatively that only half of them develop for Java EE we have an estimate for the annual worldwide cost to the economy of $56,700,000,000 a year (assuming 48 working weeks a year, 5 hours of coding per day and a $30 per hour salary).

JRebel works by rewriting the bytecode of Java classes to enable versioning. To do that we use just-in-time bytecode translation in a manner akin to dynamic languages compilation and runtime support. This enables us to support changes to Java class schema, though not to the type hierarchy.

Fortunately object relocation is something that Java does all the time. Java garbage collectors relocate objects every time they compact the heap. However the problem is that the abstraction of one heap is just that, an abstraction. The actual layout of memory depends on the garbage collector that is currently active and, to be compatible with all of them, the relocation would have to be implemented in the active garbage collector. This, however, presents quite a challenge, as the Sun JVM features at least four garbage collectors (some of them multi-threaded), two JIT compilers and a multitude of hardware platforms and operating systems it supports. Implementing this functionality in each of the garbage collectors and en- suring compatibility with the other components of the environment is a challenging enough task that since the 2001 when the initial HotSwap implementation the full schema update has yet to make it into the Sun JVM.

fields and methods (albeit named differently). JRuby implements those features on the JVM, by treating objects as not much more than a runtime map from method names to their implementations and from field names to their values. The implementations for those methods are contained in anonymously named classes that are generated when the method is encountered. When a method is added, JRuby generates a new anonymous class that includes the body of that method. As each anonymous class has a unique name there are no issues loading them and as a result the application is updated on-the-fly.

Perfomance Such a setup would mean that each method invocation would be subject to indirection. We could optimize, but the application would be at least an order of magnitude slower. Memory use would also skyrocket, as so many classes are created.

Therefore, JRebel does not take such an approach. Instead we transform the class into a frontend class with a signature compatible to the original and an anony- mous backend class, a new version of which can be loaded when the original class is updated. We rewrite all invocations among transformed classes introducing a level of indirection where necessary. However we use advanced Just-In-Time compila- tion techniques to inline as many indirections as we can, so as to keep performance overhead to a minimum.

