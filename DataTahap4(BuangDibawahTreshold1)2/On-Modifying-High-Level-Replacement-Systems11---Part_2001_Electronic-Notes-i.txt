High Level Replacement Systems generalize the concept of graph transformation systems from graphs to other types of structures. Transformation rules to replace a structure with another structure in the same category are defined using morphisms in that category. As with other specification formalisms, replacement systems are subject to modifications during their development process. These modifications could be local changes (individual rules are modified), modular changes (two re- placement systems are combined to form a larger system) and global changes (the replacement of a replacement subsystem with another one). These different ways are analyzed and some results are presented to express the behavior of the modified system in terms of the behavior of the original one(s). Applications range from graph transformations to diagrams in visual languages and modelling to algebraic high level nets.

High Level Replacement Systems (HLRS) [4] have been devised as a gener- alization of graph grammars to structures other than graphs. Besides the original motivation of extending to graphs the notion of Chomsky grammar for strings, graph transformations have been used to model the evolution of systems where the state of the system could be described by a graph. The basic idea of the algebraic approach [1] is to use the categorical construction of pushout of graph morphisms to replace, within a graph, a subgraph with another graph. The idea ofreplacing a substructure with another structure of the same kind has been adopted in a rule-based approach to modular system design, in which a rule represents the visible interface of a module and a direct

High Level Replacement Systems (HLRS) have been formalized for an arbi- trary category C in which a distinguished class Mofmorphisms is used in the construction of the rules. In the category of graphs, the morphisms in Mare the injective graph morphisms, in the category ofalgebraic specifications they are injective strict specification morphisms. We review the basic notions of HLR systems, referring to [3] for details.

