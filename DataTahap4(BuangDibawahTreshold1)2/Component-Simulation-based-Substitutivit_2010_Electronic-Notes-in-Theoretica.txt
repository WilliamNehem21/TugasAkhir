Bisimulation relations over max/plus automata were investigated in [5]. In that paper authors consider that a max/plus automaton simulates another one if it can perform at the same moment the same action with the same weight. Our main purpose is to handle QoS aspects which are global notions over components. This is why in our paper, unlike [5], weights are related to successful paths of max/plus automata.

Layout of the paper. The remainder of the paper is organised as follows. A moti- vating example is given in Sect. 2. Section 3 recalls max/plus automata and defines four simulation-oriented substitutivity notions based on them. The verification is- sues on components substitutivity are presented in Sect. 4 and 5 before concluding in Sect. 6.

An automaton is trim if its states are all both accessible and co-accessible. It is well known that for every automaton A, there exists a trim automaton with the same set of successful executions. Moreover, computing this trim automaton can be done in polynomial time. An automaton A is finitely ambiguous if there exists a positive integer k such that for every word w there exists at most k successful paths in A labelled by w.

The proof is quite similar to the one of Theorem 4.2: if A1 and A2 satisfy the partial strong substitutivity problem, then using the property on paths of length 1, each transition of B has to be positively weighted. Conversely, if every transition of B has a positive weight, it is clear by a direct induction on paths lengths, that A1 and A2 satisfy the partial strong substitutivity problem.

In this paper we proposed to manage both functional and non functional aspects of components. To sum up, this paper exposes how max/plus automata can be used to address substitutivity issues in the context of component-based applications. We defined four kinds of substitutivity managing QoS aspects. Several complexity results were provided.

On the implementation side, following our work in [15,16], an automatic transla- tion of Web services description files into max/plus automata has been implemented, as well as an algorithm for the trace-based substitutivity problem. The prototype has been tested on a Dell Latitude D600 with an Intel Pentium M 1.4Ghz and 512Mo of RAM. The tests have been performed on different versions of a movie store example, a book store example provided by Oracle [20], and the classical loan approval example. For the book store example specified in BPEL/WSDL, the au- tomaton is built in less than 3 seconds, and it has 67 states and 101 transitions due to the flow activities putting in parallel three activities. We intend to continue the implementation and extend that work to simulation-based substitutivity problems presented in this paper. It would necessitate considering, e.g., correlation sets which are currently not supported in the translator.

To go further, more expressive formalisms like Mealy machines, process algebra or Petri nets would provide more precise component abstractions. In this context, ex- tending substitutivity definitions to these formalisms is easy, but algorithmic studies have to be performed again. In other respects, the problem of whether the substi- tutivity problem is decidable in the general case, remains open. In the context of the trace-based substitutivity, this problem is undecidable. We conjecture the same result holds for the simulation-based substitutivity.

Polynomial time decidability shows the substitution notion presented in the pa- per is reasonable and practical. For example, it would be possible to include into consideration the fact that performance/reliability metrics of a component service are not only a function on the service or the service trace, but also on parameters such as the execution environment, the performance/reliability of externally called services and the usage profile. In fact, the decidability being polynomial time, it could be possible to apply the algorithms for each of that parameters.

In a more general context, modelling quantitative aspects is of great interest for modelling and verifying component-based applications. Work continues on mod- elling and verifying properties simpler than substitutivity, and on considering other applications, e.g. business protocols. In addition, the proposed framework seems to be well-adapted to handle energy dispersion associated with actions, that is partic- ularly relevant for embedded systems or sensor networks (see for instance [32]).

