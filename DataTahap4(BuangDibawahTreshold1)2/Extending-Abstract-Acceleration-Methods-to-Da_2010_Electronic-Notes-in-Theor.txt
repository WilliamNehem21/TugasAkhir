states in order to obtain a control graph with numerical variables only. Secondly, acceleration methods have to deal with the non-determinism introduced by numerical input variables. In this article we address the latter problem by extending the concept of abstract acceleration of Gonnord et al. to numerical input variables.

Contributions and outline. Our contribution is to extend the abstract acceler- ation concept as introduced in [15] to systems with numerical inputs, which raises some subtle points. In particular we show how to accelerate loops composed of a translation with resets and inputs, provided that the guard of the loop constrains separately state and input variables. Without this restriction indeed, one can em- ulate any affine transformation without inputs. After some preliminary notions in Section 2 about the considered program model, the operations on convex polyhedra and the general verification framework that we use for analysis, we recall the main results of abstract acceleration in Section 3. Section 4 details our contribution. We conclude in Section 6.

This program model corresponds for example to the output of the front-end compilation of synchronous data-flow programs like Lustre and includes various models of counter automata (by emulating locations using Boolean variables) [3]. A control graph manipulating only numerical variables can be generated from this program model by performing a partial evaluation [20] of all Boolean state vari- ables (which are then encoded in control locations) and eliminating Boolean input variables by non-deterministic choices. The partition refinement mechanics imple- mented in the NBac tool [18] are capable of achieving this task and have been employed for connecting the Aspic tool [14,13] to Lustre, for example.

Convex Polyhedra. We use in this paper the abstract domain of convex polyhe- dra for representing invariants on numerical variables. Besides classical operations (intersection, convex hull, assignments of variables by linear expressions, . . . ) de- scribed e.g. in [17], we will use the following operations:

This case can be handled in a way similar to Section 4.1: We combine Theo- rem 3.2 and Proposition 4.3 reducing translations/resets with inputs to generalized translations/resets without inputs. Mind, however, that remark 3.3 does not apply any more and cannot be exploited in the presence of inputs, because the variables being reset may be assigned a different value in each iteration.

Future work. As mentioned in the introduction, finding an appropriate control graph is the second issue (we have not dealt with in this article) in applying ac- celeration to logico-numerical programs, such as synchronous data-flow programs without explicit control flow. On the one hand the control graph should allow for a reasonably precise reachability analysis, on the other hand it should enable the use of abstract acceleration of numerical variables, while remaining sufficiently sym- bolic w.r.t. Boolean variables in order to prevent a combinatorial explosion. Our idea is to heuristically identify sets of states which behave like timed or linear hybrid automata, such that abstract acceleration can be applied.

