In this paper, we present Hybrid Event B, a formal language for modeling hybrid systems. Specifically, Hybrid Event B is an extension of Event B associating with differential dynamic logic. The main contribution of this paper is that we give the definition of a differential event in Hybrid Event B, which makes it possible using differential dynamic logic in modeling continuous dynamical systems and discrete dynamical systems. In addition, we show the proof obligations of each refinements on differential events, which supports the stepwise development of refinement. We also show the transformer semantics of the differential events and the weakest precondition refinement approach applied to hybrid systems, both of which support our stepwise development of hybrid systems.

Hybrid systems are dynamical systems that combine discrete and continuous dynamics[1]. They are important for modeling embedded systems and Cyber- Physical Systems. Hybrid systems are very natural models for many application scenarios, because each part of the system can be modeled in the most natural way[2,3]. Discrete aspects of the system, such as discrete switching, computing, and control decisions can be modeled by discrete dynamics, while continuous aspects of the system, such as motion or continuous physical processes can be modeled by continuous dynamics. And hybrid systems simply combine either kind of dynamics with each other as one hybrid system in very flexible ways. The formal development of such embedded systems should then consider two different frameworks: the dis- crete framework of the controller and the continuous framework of the environment. As the purpose of Hybrid systems, the formal development of such closed systems

should be able to deal with these dual frameworks. In this short paper, We present some ideas and principles underlying the realization of a new project called Hybrid Event B. This project certainly absorbs the main ideas and principles already at work in Event B [4], but the kernel mathematical language of this project contains differential dynamic logic[5].

From differential dynamic logic, it borrows flexible power in handling symbolic parameters with logical variables about hybrid systems. After continuous deduc- tion and development, it finally forms a single specification language, which is a combination of differential dynamic logic descriptions and descriptions of system behavior and correctness statements about the system state[12]. In particular, it extends discrete dynamic logical by differential actions such that it can display con- tinuous evolution. Due to the symbolic nature of logic, it is beneficial to use simple system actions of an isolated effect in behavior.

This paper is organized as follows. The next section introduces the necessary background on Event B and differential dynamic logic. Section 3 presents formal syntax, semantics and refinement of the Hybrid Event B. We give an application example of train control system in section 4 which shows the usage of our model language in specifying properties of hybrid systems. Section 5 introduces related work. We draw conclusions and discuss future work in Section 6.

Event B is a specification language based on set theory and standard first-order predicate logic applied in large reactive and distributed systems. Its platform sup- ports writing and proving of specifications. The basic concept of the specification development process is the refinement, which finally construct a precise model by steps. Machine is an important component of social Event B. It defines the dy- namic behavior of the model, which consists of variables, invariants, variants, and events. Variable are divided into various types whose values may be integers, sets, relations, functions etc. Invariants refer to the system safety properties which re-

A Hybrid Event B model is composed of two components: machine and contexts. Machines contain the system variables, invariants, variants, and events, which define the dynamic behavior of the model. Contexts contain carrier sets, constants, axioms, and theorems, which define the static elements of the model.

