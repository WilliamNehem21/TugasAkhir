The notation we propose is centered on architectural diagrams that corre- spond to UML-RT collaboration diagrams. System components are modeled, along with the relations of mutual inclusion and communication, via a small set of fundamental constructs: capsules correspond to components; ports and protocols model abstract interfaces; and connectors correspond to communi- cation relations. The partitioning of a complex system into a set of parallel components (i.e., parts) that communicate via connectors results in a com- position hierarchy, where the leaves correspond to the components that are directly modeled in an operational style with a state-transition machine.

This paper is organized as follows. Section 2 describes OTL, Section 3 describes the application of our dual-language approach to a case study, while Section 4 concisely compares our approach with the ones existing in the liter- ature. Conclusions are in Section 5.

of programming languages. In the OTL language, instead, the semantics of quantification over time cannot be based on finite iteration, but must be defined in the same way as in more conventional mathematical logics that include arithmetic. We do not expect any technical difficulty in providing this kind of semantics for OTL, but we do not include this in the present work, mainly for space reasons, and leave it as a further development.

pos F() is also a method of the disk: it is a boolean function that states if the disk (i.e., Phi) is in a position that will be read by the photocell as full, and false otherwise. It is formalized by the following OCL statement

