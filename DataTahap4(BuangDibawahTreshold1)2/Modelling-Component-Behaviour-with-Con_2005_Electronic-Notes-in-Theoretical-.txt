We study discrete models of interactive systems and, naturally, our inter- est lies with the observable behaviour of components rather than their internal structure. In this context, it proves crucial to describe behaviours as experi- enced on interfaces of the component. We present an automata-based language for describing such behaviour of a component. This allows to capture assump- tions about the order in which the operations of a component are called, and the order in which the component (in response) calls external operations. In a certain important sense, we are inherently also modelling the environment of a component and when it comes to composition, two components can be put together if there is some environment that satisfies all assumptions of both. This is in line with the optimistic view prescribed in [6].

Additionally, in previous work [19,18] we have been concerned with the development of a formal model of components which allows for reasoning about generic properties of components and their composition. In this paper, we are concerned with deriving from that model a class of automata which generates the objects of the model and only them. The corresponding automata can be seen as an extension that brings the model a step closer to automation and eventually tool support.

The definition is motivated by the fact that behaviours u and v may take place independently so long as they engage different interfaces of the compo- nent. It might be worth pointing out that independence alone is not enough to guarantee concurrency. This should become clear by examining the following definition.

its notation can be useful in bringing our component model closer to more conventinoal approaches to software design. With regard to UML 2.0 state machines and the notion of a compound transition defined therein (pp 500-1 in [21]), condition (iv) can be seen as a formalisation of the case where the head of a compound transition has multiple transitions to a set of orthogonal states (fork). Also, by applying condition (iv) to the conclusion of condition

Second, we need to establish a relationship between local concurrency in the constituents and that of the composite automaton. We start by addressing independence. It is relatively straightforward to show that behaviours u, v  of the composite automaton can take place independently iff their projections onto the constituent automata are independent. Put formally,

Further work on composition is in progress and in particular, preservation of normality under automata composition. Preliminary results are encourag- ing. An interesting side effect of pursuing the dual aspects of composition - in terms of automata - has to do with relaxing the compatibility conditions that ensure preservation of normality in component composition [18].

In [17], we considered a scenario-based description of behaviour, in terms of LSCs [4], as the starting point for our component model. In particular, we showed how component interactions within a given scenario can give rise to an algebraic representation of behaviour, in terms of component vectors. Associating components with automata, as described in this paper, builds a bridge between algebraic and order-theoretic representation of component behaviour. This offers interesting perspectives concerning the move from a scenario-based specification to a state-based specification which we are keen

