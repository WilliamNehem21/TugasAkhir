Analysis of resource consumption of embedded systems is a major challenge in the industry since the number of components that can be included in a single chip keeps getting bigger. In this paper, we consider simple models of embedded systems and the automated analysis about timing and memory access costs of those models. In order to achieve this, a basic model is built using priced timed automata and some resource consumption scenarios are verified. Even though the experiments are performed on small and basic models, we believe we have taken a basis step in showing that it is promising to use priced timed automata and Uppaal Cora as a model checking tool in reasoning about resource consumption of embedded systems.

There exist different frameworks for modelling and analysis of hardware-software systems. ARTS [8], for example, is a simulation framework that supports designers in analyzing designs before the system is implemented. However, ARTS cannot be used to guarantee properties as it does not investigate the full state space. Other approaches exists for analysis of designs for system on chips (SoC), e.g. [5,2], but ARTS is the main inspiration for our work, where we experiment with Priced Timed Automata [10] for modelling simple components having costs and we use Uppaal Cora [6] for automated reasoning about costs. Uppaal Cora is a member of the Uppaal[3] family that supports simulation as well as verification in terms of model checking. There exist other work on modelling Multiprocessor System on Chips (MPSoC) using Uppaal [4] and optimization work on task graph scheduling using Uppaal Cora [10].

The rest of the paper is organized as follows: The next section introduces a simple embedded system with some scenarios we would like to analyze. Section 3 gives a brief summary of priced timed automata. Section 4 introduces our formal model for systems. In Section 5 the experiments and formal analysis of the scenarios are presented, and the last section contains a conclusion of the study.

Memory usage: The local memory is cheaper to use than the external memory, i.e. if the data for a task already exists in the local memory then the cost of executing the task is cheaper than if it first has to access the external memory. We want to schedule tasks so that they meet their deadlines as cheaply as possible, and therefore, the best scheduling strategy will not necessarily be earliest deadline first [7], but rather it would depend on the data dependencies among tasks.

Optimization of costs: The goal is to find cost-optimal use of resources. The cost criteria may involve waiting time of tasks, running time and memory usage. We use Uppaal Cora to find the optimal schedule with respect to given cost criteria. Our general aim is to show that priced timed automata can be used for modelling embedded systems and Uppaal Cora can be used for design space exploration.

The assignment next t=scheduleEDF() indicate on which transition the os would make a scheduling decision. In our experiments we want Uppaal Cora to find the optimal schedule. Therefore, the assignment next t=scheduleEDF() is removed in order to allow a non-deterministic choice of any ready task as its schedul- ing decision. Using the best -trace generator the optimal schedule is extracted.

We will now experiment with the model. In one experiment we will focus on waiting time and memory accesses. Another experiment will consider optimization over the scheduling of the three tasks and produce a unique schedule that minimizes the costs. Our system definition for these experiments is:

With a 2 GHz Pentium 4 machine with 512 MB of RAM, it takes about 1 second running verifications on our model. This duration applies for experiments without optimization in Sections 5. It takes about 25 seconds to perform verification on the same model when optimization is performed by Uppaal Cora.

