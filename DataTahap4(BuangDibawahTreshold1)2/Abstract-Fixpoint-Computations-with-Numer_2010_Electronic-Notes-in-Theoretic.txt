This article is organized as follows. In Section 2, we explain on a simple example how acceleration methods may be used to speed-up the fixpoint computation. In Section 3, we recall the theoretical basis of this work and present our main theoret- ical contribution in Section 4. Section 5 presents some early experiments on various floating-point programs that show the interest of our approach, while Sections 6 and 7 discuss related works and perspectives.

In this section, we combine acceleration methods with the abstract fixpoint com- putation. Our goal is to be as non-intrusive as possible in the classical iterative scheme. In this way, our method can be implemented with minor adaptations in current static analyzers.

Most of the work in abstract interpretation based static analysis concerned the definition of new abstract domains (or improvements of existing ones), and the ab- stract fixpoint computation remained less studied. Initial work from Cousot and Cousot [10] discussed various methods to define widening operators. Bourdoncle [4] presented different iteration strategies that helps to reduce the over-approximation introduced by widening. These methods are complementary to our technique: as explained in Section 4, acceleration should be done at the same control point as the one chosen for widening, and does not replace standard widening as the termina- tion of the fixpoint computation is not guaranteed. However, acceleration methods greatly improve widening by dynamically and automatically finding good thresh- olds.

Gopan and Reps in their guided static analysis framework [12,13] also used the idea of computing in parallel the main iterates and a guide that shows where the iterates are going. In their work, the precision of the fixpoint computation is in- creased by computing a pilot value that explores the state space using a restricted version of the iteration function. Once this pilot has stabilized, it is used to accel- erate the main iterates; in a sense, this pilot value is very similar to the value yi of Algorithm 1, but we do not modify the iteration function as done in [13].

The authors want to thank X. Allamigeon and E. Goubault for their helpful dis- cussions and precious advices and S. Zennou for her technical help on the analyzer based on Newspeak. The authors are also thankful to the anonymous reviewers for their helpful comments and suggestions.

