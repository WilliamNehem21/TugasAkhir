Game theory comprises a powerful set of techniques to reason about situations involving conflict and competition. The subject of this paper is the applica- tion of game theoretic techniques to the analysis of ad-hoc routing protocols. We believe this to be a novel use of such techniques. The particular way in which we have applied game theory to this problem is described in Section 3.

The primary analytical technique is based on simulation, a number of sim- ulation tools are in use such as OPNET Modeller [2], NS-2 [3] and GloMoSim [4]. However, these tools do not appear to provide consistent results [5]. Fur- thermore, [6] and [7] find a discrepancy between the results of simulation and field trials deploying actual ad-hoc networks. The question may be asked: why does simulation give inconsistent and unreliable results? Two answers come to mind:

This paper concerns the first step in this programme: how we are analysing low fidelity models rigorously. Section 2 discusses the level of abstraction at which we model routing protocols. That section also discusses the first approach that comes to mind for high coverage analysis of the protocol, namely model-checking, and why we chose not to use model-checking. We believe that game theory provides an approach to analysing routing protocols that is both natural and powerful. In Section 3 we give a very brief description of game theory and how it can be used to analyse routing protocols. Section 4 highlights some generic issues that arise when mapping routing protocols to games. The results we have achieved to date with game theory are presented in Sections 5, 6 and 7. This is still an early phase of our proposed programme and there are various limitations to our current game theoretic analysis technique; we conclude in Section 8 with a discussion of what these limitations are, how they may be addressed and the way ahead.

Routing techniques can be regarded as abstractions of specific routing pro- tocols; clearly there are several protocols for each technique. Furthermore, it is possible to model just the routing technique, rather than a protocol instance of a technique (we discuss this in Section 3). In our opinion the most abstract level at which a routing protocol can usefully be modelled is that of the routing technique it instantiates.

The subject of soundness is of interest to routing protocol designers (the ARPANET bug [9] makes soundness impossible to ignore!), but most of the effort, on the part of engineers and ad-hoc protocol researchers, goes into achieving and improving performance. Hence both convergence and network overheads are well known, and standard texts that cover routing (such as [9]) discuss them in detail. However, we have not found in the literature a clear analysis of how the various routing techniques compare with respect to these two performance characteristics. A key objective of our work, the first stage of which is reported in this paper, is to understand this issue.

We are aiming for high coverage in our exploration of the behaviours of a model of a routing technique. Over the last ten years, the use of model-checking [10,11] has increased substantially, essentially as a branch of formal methods, based on the results it has been able to deliver from its exhaustive analysis of models. The primary use of model-checking is to verify that a design is correct by creating a model of that design and then checking the complete behaviour of the model against a specified property. Model-checkers mainly verify safety and liveness properties [12] of which the soundness properties of routing are an instance. However, there are model-checking tools that analyse models with timing and probabilistic behaviour [13]; could these be used to study performance of routing techniques?

We believe it is unlikely that probabilistic model-checkers will provide an effective technology for analysing routing protocol performance; rough calcu- lations on the size of the space of behaviours (usually called the state space) that the model-checking tool must check shows why. In a model of 5 nodes, with each node a router, there are 10 links, under the simplifying assump- tion that all links are bi-directional. To model the technique of proactive link state unicast, each router will need to retain at least one piece of information for each link, viz. whether it is up or down. This means that each router in the model has at least 210 states (two states for each of 10 links), so a 5 node model has at least (210)5 or 250 states. This simple calculation assumes that the routers are able to learn about, or become confused about, network topology independently of each other. 4

Game theory [14] was invented to provide a mathematical foundation for rea- soning about conflict and competition. It has grown into a rich theory, with powerful mathematical and computational tools. It also has the advantage of retaining its intuitive appeal, which is what first attracted us to it. Two insights enabled us to turn this pool of theory and tools into a potentially powerful analytical capability for analysing routing:

5 When it is not feasible to explore the whole game tree, the cost function must sometimes be applied to truncated runs; in such cases it effectively judges the state of the game using a heuristic. We discuss this in Section 4.5.

In all our uses of game theory the two players will be same. All the routers together form one player, which is referred to henceforth as the set-of-routers player; the other player is the set of links, which is called the network player. Game moves for the set-of-routers player are, in essence, to execute the routing protocol. And for the network player game moves are to change the network topology. This is the basic insight behind our mapping to model routing protocols as games; the sections below expand on this to describe the mappings in more detail. The cost function depends on the property being studied, and is discussed, below, for each property separately.

Once the game has been defined the game tree can be constructed and explored. The minimax strategy searches through the game tree to find the minimax path; the minimax value (or minimax outcome) is the cost function applied to this path. The meaning of the minimax value can be interpreted in the following way: within the constraints provided to the game, if the routers behave optimally, then whatever changes in the network occur, the routers are guaranteed to do no worse than the minimax value.

To turn this into a game we first note that the network can be understood to have won if the routers are unable to gain a correct view of the network. In our game theoretic model the game ends when the network has stopped changing and one of the two players has won. The set-of-routers wins if all routers have succeeded in gaining a correct view of the network, and the network wins if the routers are mistaken about the state of the network, and are unable to rectify this state.

So, the network player aims to maximise the cost function, which records how confused the routers are about the state of the network, and how much traffic they have used; the set-of-routers player aims to minimise this same func- tion. The lexicographic cost function described here gives the cost functions described in Sections 3.3, 3.4 and 3.5 for the three types of analysis; in partic- ular, the inconsistency part can be ignored when the cost function is evaluated in a state of the game where the routers have correct views of the network.

As we are considering routing techniques rather than specific routing protocols, we have begun by analysing low fidelity models of real protocols. As a result we have been forced to make a number of modelling decisions regarding the mapping of routing protocols to a minimax game. We describe the most important issues here. In some cases the same decision has been taken in each of our analyses, and in some cases we have found it necessary to make different decisions according to the kind of analysis being performed.

them less accurately as individual link state updates or distances. There are computational efficiency reasons for using individual link state updates or distances, but it would clearly be preferable to use a more accurate represen- tation. We explain later which option we chose in each of our analyses.

A further issue we had to address was how to model the scheduling of routers. All the routers together form the set-of-routers player, who decides which router should send routing updates in each atomic move. In effect we are assuming that the routers are under the control of a global controller that can enforce optimal scheduling. We use fairness constraints to deal with this unrealistic optimal scheduling assumption. A fairness constraint imposes a restriction on which routers are permitted to perform atomic moves at any given point in the game. When we say that we are using an n + k fairness constraint, this means that each of the n routers must perform a set-of-routers atomic move at least once in every n + k set-of-routers atomic moves. (We also refer to this by saying that each router must be scheduled at least once in every n + k set-of-routers atomic moves.) We indicate in the appropriate sections where fairness constraints are being used.

The atomic moves and game moves for the network are (we hope) reason- ably clear. The game moves for the set-of-routers are rather more complex, so we elaborate on them here in some detail. This section is not vital for understanding the approach, so the reader may choose to skip to Section 4.4. In each atomic move one router is chosen (the choice being determined by the need to minimise the cost function that records inconsistency and network traffic). Let us say that router n is chosen, then the atomic move consists of

In link state routing, when a router receives an LSP it updates its view of the network accordingly. It then puts the LSP on its outgoing queue, but only if its timestamp is more recent than that of any LSP already in the outgoing queue, originating from the same source and with the same destination. (In reverse-path forwarding, the router does none of this unless it believes the sender of the LSP is on the shortest path between itself and the source of the LSP.)

We implemented a simple Java tool that uses the above mappings to model, as a minimax game, three different routing techniques, namely link state routing [9], the reverse path forwarding (RPF) algorithm [17] for link state routing, and distance vector routing [9]. The tool allows the user to specify the number of atomic moves that comprise each game move. It then generates the game tree for that game, and searches it for the result according to the minimax algorithm.

The answers lay in the inconsistency part of the cost function. A non-zero inconsistency value indicates that at least one router has, at that point in the game, been unable to gain a correct view of the network. It is to be expected that routers will become confused about the state of the network at times during the game. However, if a routing protocol is to be considered sound, one would expect that if, at any time, the network were to be fixed at any particular state, each router should eventually converge to a correct view of at least the partition of the network in which it is located.

We carried out a number of experiments with two routing protocols, namely link state RPF and distance vector routing. We provided the tool with var- ious numbers and combinations of network and set-of-routers atomic moves, trying to find victories for the network, i.e. situations where routers become irretrievably confused. Our results are detailed below.

We then investigated distance vector routing. It is well known in the routing community that distance vector routing in its most simple form suffers from the Count to Infinity Problem [9], whereby routers can forward packets to each other infinitely often because of mistaken local beliefs about the state of the network. (For example, router A might believe the shortest route to C is via next hop B, while B believes the best route to C is via A.)

In this case, the tool reported that the network could force a win, so we were able to conclude that such confusion could eventually arise. Inspection of the state reached on the path to the minimax solution revealed that counting to infinity was possible, which we had not expected for the particular initial state and operating assumptions modelled. Similarly, the tool found an example of counting to infinity occurring even for the Split Horizon [9] variant of distance vector routing.

Perfect information. The minimax game is a game of perfect information, as in chess. In simple terms this means that each player is assumed to have full knowledge of the state of the game. This is clearly a strong assumption. Our current research is investigating mapping to games of imperfect information.

Optimal scheduling of routers. The assumption that routers are opti- mally scheduled is certainly a limitation of the approach; it makes it a refutation procedure. However, we believe this can be addressed within the current framework by imposing fairness constraints, or considering games of chance.

Finite number of nodes. Our ability to model only about 7 or 8 routers is much better than we would expect with a model-checker, but it is still a far cry from the thousands of nodes found in a real network. There are various approaches to this problem, which will be reported in a future paper.

This paper has argued that rigorous analysis of ad-hoc routing protocols can be achieved by mapping the protocols to simple games and calculating their minimax outcomes. We have illustrated the approach by analysing key cor- rectness and performance characteristics of some basic routing techniques. Our main motivation has been to understand the bounds on performance of routing protocols. We feel that game theory has all the conceptual tools nec- essary for the rigorous analysis of ad-hoc routing protocols. In addition, game theory has the advantage of scaling rather better than might be expected with model-checkers.

