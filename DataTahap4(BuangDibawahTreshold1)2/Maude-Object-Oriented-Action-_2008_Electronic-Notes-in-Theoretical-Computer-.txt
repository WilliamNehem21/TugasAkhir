Semantics syntax. In addition to it, the tool combines the modularity aspects observed in the object-oriented approach with the efficient execution and analysis of the Maude system. We use MOOAT to describe syntax- independent specifications of programming languages. In this way, we show how Constructive Object- Oriented Action Semantics (COOAS) may be achieved as a combination between Object-Oriented Action Semantics and Constructive Action Semantics (CAS) using MOOAT, in order to increase the modularity

characteristics of both Denotational Semantics and Operational Semantics. In Ac- tion Semantics, semantic functions specify the meaning of the phrases of a language using actions. These actions represent the denotation of the phrases. The Action Notation is defined operationally and contains basic actions and action combinators. Altough Action Semantics inherently presents good reusability, the standard Action Notation lacks of syntactic support for the definition of libraries and reusable components [9]. In order to overcome this problem, a modular approach for Action Semantics has been proposed in [7], where Action Semantics modules allow isolated specifications elements viewing and modules composition. In this way reusability

This work is organized as follows: the next section briefly introduces Maude MSOS Tool. Section 3 gives an overview of Object-Oriented Action Semantics. Constructive Action Semantics is summarized in section 4. MOOAT notation and implementation are explained in section 5. In section 6 we discuss how Constructive

The syntax adopted by MMT is based on the Modular SOS Definition Formalism (MSDF) created by Mosses to be used in MSOS specifications. Both languages are fairly similar, in this way, those that use MSOS probably would easily understand a MSOS specification in MMT. Nonetheless, small differences exist between them due to peculiarities in the Maude parser [5,6].

Command is the abstract class. The syntax section introduces the syntactic tree Cmd. The semantics section introduces the semantic function execute, establishing a mapping from commands to actions. In OOAS, semantic functions are seen as methods. Now, every particular Command behavior should be defined. The tactic is to define any specific command as a specialized class, as follows:

Notice that While is a subclass of command. Reusability can be achieved em- ploying object-orientation concepts. The extending directive states a particular com- mand behavior (Iteration). The using directive allows us to reuse existing classes (as E:Expression and C:Command). In the semantics section, While is specified, as a plain Action Semantics action.

OOAS has shown to be a practical alternative to modularity. OOAS Notation is simple, inspired by the notions from object-oriented programming and similar to the original Action Notation. Instantiation and extension permit the construction of libraries of programming languages concepts, improving reusability. In fact, OOAS Notation is a mixture of the original Action Notation with the Class Notation created by the object-based approach. OOAS semantics has been specified by SOS rules and it has been reported in [3].

In OOAS, the semantics description of a given programming language is a hi- erarchy of classes. In this regard, all defined classes belong to a pre-defined root class called State. Such class is the base-class for all OOAS classes and it is re- sponsible to implement the attributes and operations that are used in those classes specifications.

In other words, the classes defined in the object-oriented formalism are sub- classes of State, turning visible both attributes and operations to its sub-classes. The State attributes are concerned with the information processed by actions, such as: transients, bindings and storage. Some operations are available to handle State attributes. Such operations are all basic actions and action combinators.

A complete OOAS description as well as its SOS specification can be found in [3]. In addition to it, an OOAS library of classes has been proposed in [1,12], intensely using this method. In the following section we introduce Constructive Action Semantics. A constructive approach concerned with reusability and focused on the formal specification of programming languages syntax independently.

It is common to find semantically similar constructors in programming languages, even if these constructors have very different syntax. In this regard, it is interesting to reuse parts of the programming languages specifications that represent the same behavior. The constructive approach introduced in [18] helps with the code reuse by supporting independent definitions and using named modules to describe individual languages features.

Constructive Action Semantics [10,18] is based on the idea that each language feature is defined by a separate and independent basic abstract construct. The semantics of a complete language is achieved by translating its constructs into the basic abstract constructs. That is, the main idea of this approach consists in map- ping concrete language constructs to combinations of basic abstract constructs.

Constructs might be considered as basic or derived due to the several constructs present in the developed programming languages. Basic constructs represent com- mon features that have the same interpretations and are found in many program- ming languages. The constructs that have a specific behavior regarding the pro- gramming language are classified as derived constructs, they are included in few languages and specified by combining basic constructs.

In the module Cmd/While we have a derived module from Cmd module. Notice that the individual basic abstract construct cond-loop(Exp, Cmd) was used to specify the semantics of a while-loop command with a boolean condition independently of its syntax. In this way, such a module could be used in any project that needs a while-loop. The specification of a whole language in Constructive Action Semantics is achieved by combining modules that implement the necessary basic individual constructs into a single module.

We have introduced the constructive approach proposed in [18], focused on its usage with Action Semantics. However, it also can be used with Modular SOS. The concrete constructs of Core ML have been translated to basic constructs as a Constructive Action Semantics case study in [10] and the formalism has been successfully validated to describe programming languages semantics syntax inde- pendently. Motivated by these results, in section 6 we will present how constructive semantics can be applied to Object-Oriented Action Semantics using the tool de- scribed in next section.

A formal specification in Object-Oriented Action Semantics is a finite set of classes. Such classes create the necessary hierarchy to represent the formal specification of a language or library. The relationship among these classes is defined according to the instantiated objects, as well as the position where classes are found in the specified hierarchy.

The class structure is defined in the rules (1) to (3). A class begins with the directive class and ends with endclass. The body class is composed basically by the declaration of base classes and by the class definition. Notice that more than one class can be specified as a base class.

If the tool notation is compared to the OOAS notation introduced in [3], some differences might be found. Amongst which we point out the changing of extending to extends and the exclusion of the directive using. The former was done for the reason that the directive extending already exists in Maude and if we redefined it we would have the pre-regularity problem discussed in [4]. The latter was done for the fact that now object declarations are done automatically in the methods definition.

An abstract method works as a signature of a method that will be specified in a class or in a sub-class and may result in an action or in a data sort. A method implements the semantics of a programming language concept using actions and action combinators. Methods must be used to give the semantics of the abstract syntax defined in the class. When such abstract syntax is used in the method declaration, syntactic sorts must be changed by object declarations.

The While class is the sub-class of Cmd and a while-loop is implemented in it. The syntactic sort Cmd is overloaded with the command syntax and the semantics is given in the overloaded method execute. The objects E:Exp and C:Cmd were used to give the while semantics, that is, the command in the object C:Cmd is executed until the expression in the object E:Exp is true.

Notice that, previously an object was declared by an identifier and its respective class in the directive using. However, now it is directly declared by an identifier and its respective syntactic sort in the method definition. In this way we have introduced the automatic object creation concept.

Data Notation has been specified by reusing datatypes that are provided by both Maude and MMT. For instance, the sorts Int and Boolean defined by MMT were used to represent integers and truth-values respectively. However, some coercion functions were needed to avoid the ad-hoc overloading problem in these datatypes specification. It can be observed in the rule (15) in section 5.1.

Notice that the MSDF modules BasicOutcomes and FunctionalData were in- cluded in FunctionalOutcomes. In such module the Terminated sort is redefined to accept the values introduced by the sort Completed, which are: completed, to determine that an action is completed, and gave (Data), to specify a transient data production. When no data is given then the action is simply completed.

In the Cmd/While class we have a specialized class of Cmd that implements the construct of a while-loop, cmd-while (Exp, Cmd). Notice that the main difference between Object-Oriented Action Semantics and Constructive Object-Oriented Ac- tion semantics is in overloading the syntactic sort with a basic abstract construct instead of using the language concrete construct. This basic abstract construct is also used when the method execute is overloaded in order to give its semantics.

For expressions constructs we have Exp class and its respective sub-classes that deal with arithmetical and logical values and expressions. As well as in the examples mentioned in this section, the class Cmd and its sub-classes are related to commands constructs. The class Dec introduces declarations constructs which will be used in its specialized classes of declarations. A class to specify a program construct was also implemented and it was called Prog.

In this paper we have presented MOOAT, the first implementation of Object- Oriented Action Semantics. Our first idea consisted on developing an isolated OOAS tool from scratch. However, it seemed impracticable knowing the existence of MAT. The better choice, in our view, was creating an extension of MMT. The idea was to aggregate the object-oriented apparatus to a brand new tool based on MAT and developed using MMT. In MOOAT, the user can create OOAS specifications, and perform the necessary tests, inside the standard Maude environment. This is interesting, considering that the user can create Maude, MMT, and MOOAT specifications using the same tool.

This implementation has contributed to the formal specification of OOAS since a Modular SOS definition has been provided to its Action Notation using MMT and the Maude system has been used to define its Classes Notation. It means that the previous specification of OOAS using SOS has been rewritten using MSOS and implemented using the MSOS language provided by MMT. Also, that a language to specify OOAS classes has been built in Maude.

Moreover, the introduction of constructs in OOAS has contributed to improve the modularity aspects observed in the object-oriented approach. Since such com- bination is capable to describe syntax-independent specifications of programming languages. This happens due to the fact that we see the constructive approach as an idea that helps with code reuse when adopted into existent formalisms, as well as it happened with MSOS, AS and now OOAS. Notice that COOAS has been shown using MOOAT though it could be used as a specification approach independently of the tool usage.

We would like to thank MMT authors, Christiano Braga and Fabricio Chalub, for the interest in this work and for the helpful support while we were using their tool to develop MOOAT. Also, we would like to thank the anonymous referees for the comments that helped to improve this paper. We are most greatful with LSFA 2007 organizers for funding the presentation of this research at such nice event.

