Service Oriented Computing (SOC) is based on service composition, that is, loosely coupled autonomous heterogeneous services, which are collectively composed to implement a particular task. We develop a new calculus for SOC within the framework of CSP process algebra, aiming to improve the verification techniques and to enhance the expressiveness of SOC calculi. This paper presents the part of the calculus that extends CSP with built-in buffers to facilitate direct asynchronous communications. We provide the operational semantics of the calculus and extend the FDR (a CSP model checker) by implementing functions for asynchronous communications.

Process calculi, such as SCC [5] and CaSPiS [6], provide a formal specification of interaction patterns with synchronous communications, allowing designers to reason about the correctness of SOC systems. Other formal systems, such as COWS [16] and Conversation Calculus [24], consider only asynchronous communications, since synchronous communications in the internet standards are usually implemented by network protocols such as TCP/IP [12], which are by default asynchronous. To the best of our knowledge, none of the formal calculi developed for SOC supports both synchronous and asynchronous communications.

The novelty in CSPa is the introduction of implicit buffers, which are used in the channel semantics to facilitate asynchronous communications in a transparent way. In other words, CSPa includes asynchronous communication primitives, which rely on buffers, but designers do not need to create, maintain or terminate buffers. We provide an operational semantics that explains how buffers work.

In previous work, we extended CSP with primitives to model dynamic com- pensations [1]. Here we focus on communication primitives solely: we enhance CSP by allowing asynchronous communications in addition to its standard mixed synchronous/interleaving communications. More precisely, we extend the parallel composition operator in order to permit mixed synchronous, interleaving and asyn- chronous communications. In future work, we plan to include also primitives to create and maintain sessions and to model mobility, to obtain an expressive calcu-

Paper overview: Section 2 recalls some basic CSP notions. Section 3 introduces CSPa. Section 4 discusses the relationship between CSP and CSPa. Section 5 presents the implementation of CSPa in FDR. Section 6 illustrates the usability of this extension with an example. Section 7 discusses related work. Finally, Section 8 concludes and discusses future directions.

where a can be the name of an atomic action, inputting through channel a (written as a?x), outputting through channel a (written as a!x), or a combination of them (e.g. a!x?y). The interleaving (|||) and the parallel composition (  A) operators have

In two-way communications (between two processes) if buffers are introduced in the middle of a communication then the sent message from the first process will be stored in the buffer until the receiver process is ready to get the message. How- ever, in multi-way communications (multiple processes communicate) as in CSP, we should explain what asynchronicity means. In our model, we want to retain the CSP model of multi-way communications with the addition of asynchronicity. In multi-way communications, buffered channels may introduce non-determinism, as Example 3.2 shows.

According to our model the communications can happen in any order. If the output is done first then the value 3 will be stored in Ba then retrieved by the input event. However, which input event will get the value from the buffer (a? >x or a? >y) is not specified. Either a? >x gets the value and a? >y will be waiting for a new value, or the other way around.

Synchronous communication, but with a delay between inputting and out- putting values. This can be achieved by synchronising on input events and output events. Thus, if buffers are empty, then all output events happen at the same time and upload data to buffers, then all input events get the same value from the buffers. Note that, CSPa adheres to CSP synchronisation rules, where the whole a.n event is considered in synchronisation. For instance, in CSP, an event a.3 can only be synchronised with a.3 or a.x if x is an input variable (in the latter case, x will be substituted by 3).

Buffered channels within CSP have been discussed also in [20], where all or a set of channels can be selected to be buffered between two processes. Installing buffers in two-way communications was enough for the purpose of this model which is proving that the correctness of a network of processes is independent of the amount of buffering added. However, in our model, we aim to provide a practical model where asynchronous communications are available as primitive communications in addition to the standard synchronous and interleaving communications. Therefore, we extend CSP with built-in buffers which can be used anywhere in the system. Additionally, our model retains the multi-way communication mode of CSP.

