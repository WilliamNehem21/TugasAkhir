It is important to note that constructing the visualization does not always entail having the student code the algorithm. Systems such Animal [5] and ALVIS [1] provide visualization designers with a collection of modeling tools that are particu- larly well-suited to algorithm visualization. In effect, they allow the user to create a movie about the algorithm working strictly from a conceptual perspective, without ever having to code the algorithm.

Information and pseudo-code windows. These are essentially HTML windows where visualization designers can author static or dynamically generated content to help explain the significance of the graphical rendering of the algorithm. The information window is used for higher-level conceptual explanations. The pseudo- code window may display a pseudo-code description of the algorithm complete with highlighting of lines that are particularly relevant for the picture currently being displayed.

Input generators. These objects gather input data from a student, if the visual- ization supports the changing category described in the previous section. This input data can be fed to the visualization, allowing the student to learn whether or not their data set drives the pictures in the anticipated fashion.

The server application manages the available algorithms and generates the visual- ization scripts that the client can display. In a standard session, a student first launches an instance of the client application, which displays a listing of available algorithms, tailored to the particular subject that the viewer is studying. The AV engines are included in the client distribution.

Animation mode. A Visualizer object that supports this mode is capable of delivering its visualization as a smoothly animated motion picture instead of as a slide show consisting of discrete snapshots. Slide show mode is the default unless a visualizer declares otherwise. Gaigs-ML operates in slide show mode, whereas Animal and AnimalScript offer richer animation capabilities.

