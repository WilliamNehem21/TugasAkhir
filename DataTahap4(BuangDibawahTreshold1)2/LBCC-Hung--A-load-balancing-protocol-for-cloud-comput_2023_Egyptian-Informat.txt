The Effective Load Balancing Algorithm with Deadline con- straint (ELBAD) was proposed by K.I.Arif in [3]. It allocates the nearest deadline tasks to the highest speed virtual machines, then it balances the workload among the virtual machines. The algo- rithm arranges the arrived according to their deadline constraint, and the sorts available VMs in terms of their speeds. It then dis- tributes the tasks to VMs with respect to task deadline time and VM capacity. For load balancing; VMs are classified as; underload, load and overload. The overloaded VMs transfer some of their tasks with longest deadline to underload VMs. To prove the superiority of ELBAD efficiency; it is compared with FCFS, SJF, Min-Min and EDF. It minimizes the Makespan and maximizes the resource utilization.

A distributed dynamic load balancing method based on hybrid approach named EDLBHA was proposed in [4]. Its main idea is to identify unused machines and resources earlier in shortest access time. The cloud is dynamically divided into partitions. Depending on the load, the queue length and processing time the status of each cloud partition is defined; idle or normal or overloaded. When a new task arrived, the right partition is selected. Priority may also be used. Using cloud simulator; the proposed method is compared with existing Load balancing algorithm. Simulation results proved that the proposed method outperforms the others in terms of energy utilization, waiting time, response time and turnaround time.

S. Jeyalaksshmi et al. proposed a modified round robin and modified honey bee algorithms to gain effective load balancing [5]. Virtual machines are considered as overburdened and under burdened according to their status. Operations are uninstalled from overburdened, and given priority to serve. The authors also suggest assigning weights to virtual machines depending on their computer power. For tasks with priority, they employ the Honey- bee Influenced load balancing algorithm to use virtual machine weight and delegate non-preemptive tasks to underused virtual machines. They perform proactive tasks where there is no prioriti- zation. Experimental results proved that the proposed algorithm accelerates reaction and loading time of the data center.

K.R. Remesh et al. proposed modifying the bee colony algorithm to solve the load balancing problem in cloud [6]. The tasks with lowest priority are migrated from overloaded to underloaded vir- tual machines. The honey bees foraging behavior is used to balance load across virtual machines. The migrated tasks are considered as honeybees, while the underloaded virtual machines are considered as the food sources. The minimization of both the Makespan and the number of migrations are the main goals. Experimental results proved that the proposed algorithm outperforms the existing bee colony algorithm. It minimizes both the Makespan and number of migrations, this leads to better QoS to the end users.

In [8], A. Pradhan et al. used Particle Swarm Optimization (PSO) algorithm to solve the problem of load balancing and task schedul- ing in cloud computing. They proposed a protocol named Load Balancing Modified PSO (LBMPSO). They utilized a fitness function to evaluate the ideal arrangement of every particle. The fitness value of each particle computes the execution time of each VM and returned the most elevated execution time. The proposed pro- tocol was implemented using CloudSim simulator and compared with other existing techniques that used PSO to solve the same problem, but with different fitness function. Simulation results showed the superiority of the LBMPSO protocol in terms of Make- span and the resource utilization.

Self-adaptive salp swarm optimization was used by A. Rath et al. in [9] to reach load balancing in cloud computing. As the salp swarm optimization is a continuous phenomenon, in contraire of the task assignment to VMs, so first a sigmoid transfer function has been integrated to the salp swarm optimization to produce a binary self-Adaptive salp swarm optimization algorithm. Then a task fitness function was proposed that merge the Makespan, the response time, the degree of imbalance and VM utilization, all with aims of minimization except for the VM utilization that needs to be maximized. The efficiency of the proposed algorithm was proposed by comparing its performance with recent metaheuristic approaches used to solve the same problem. Results proved that it outperformed the other protocols in terms of Makespan, response time, degree of imbalance and VM utilization.

The problem can be formulated as follows; having a number of independent tasks, each of a specific length, and a number of vir- tual machines, each can execute up to a number instructions per second. The goal is to distribute the tasks over the virtual machi- nes, such that: 1) each task is executed on only one virtual machine. 2) Each virtual machine executes only one task t at a time. 3) Considering the length of the tasks, they must be dis- tributed in a fair way over the virtual machine, taking into consid- eration the whole network performance.

machine. And as the number of tasks may be greater than the number of virtual machines, so each virtual machine can be assigned more than one task. Those tasks are queued. Each vir- tual machine serves the queued tasks one by one. Of course, if the number of tasks is less than the number of virtual machines, one or more virtual machine may have not assigned any tasks.

The Hungarian method is a computational optimization tech- nique, it solves the assignment problem in polynomial time. It is used to solve weighted matching problems to find a perfect match- ing between resources and competing alternatives so that mini- mum cost / maximum profit is obtained. The cost/profit is calculated using the weight defined between the resources and competing alternatives.

In this section, the proposed load balancing technique (LBCC- Hung) is evaluated. Using simulation, the performance of LBCC- Hung is measured and compared with two well-known used meth- ods; MIN-MIN [17] and First Come First Serve FCFS methods. This section is composed of three subsections. The first one states the performance metrics used for the evaluation. The second one illus- trates the simulation parameters. The third part presents and anal- yses the obtained simulation results.

to serve more tasks in a shorter time, i.e. all the cloud will be able to serve more tasks in a shorter way, so it takes less time to serve the existing tasks, so less Makespan and more throughput, this holds for the three techniques, but with different rate.

