This paper proposes a rule format for Structural Operational Semantics guaranteeing that certain constants act as left or right zero elements for a set of binary operators. Our design approach is also applied to reformulate an earlier rule format for unit elements developed by some of the authors. Examples of left and right zero, as well as unit, elements from the literature are shown to be checkable using the provided formats.

of) the operational semantics of a language has a certain form then some semantic property is guaranteed to hold. The literature on SOS provides rule formats for basic algebraic properties of operators such as commutativity [16], associativity [12] and idempotence [1]. The main advantage of this approach is that one is able to verify the desired property by syntactic checks that can be mechanized. Moreover, it is interesting to develop rule formats for establishing semantic properties since results so obtained apply to a broad class of languages.

In this paper, we formulate our zero-element format within the GSOS languages of Bloom, Istrail and Meyer [11]. In particular, we benefit from the logic of transition formulae developed by some of the authors in [2], which is tailored for reasoning about the satisfiability of premises of GSOS rules. (The full version of the paper [3] offers also a syntactic rule format for left and right zero elements that applies to SOS rules that are more general than GSOS ones.)

Section 2 repeats some standard definitions from the theory of SOS and from the logic of initial transitions from [2]. Section 3 provides the format for left and right zero elements and Section 4 shows how several examples of left and right zero elements from the literature fit the format. In Section 5 we provide a rule format for unit elements adapting the ideas from Section 3. We conclude the paper in Section 6 with an overview of its main contributions and with a mention of further results that may be found in the full version of the paper [3].

remainder of the paper. Our definition of the rule format for left and right zero elements makes use of the logic and especially of these two kinds of entailment. The semantic entailment is, moreover, used in a simplified fashion where one does not need to check all the closed substitutions, but only those that map one variable to the left or right zero element constant under consideration. We now proceed to formalize this notion.

Let G be a GSOS language over a signature including at least one constant. Since hyps(J ) is a disjunctive formula, condition 1.a.i. in the above definition implies that the set J is non-empty. On the other hand, condition 1.b.ii. says that the premises of the rule under consideration cannot be satisfied by any closed substitution that maps the variable x0 to the constant c.

In condition 1.a. and its symmetric counterpart, one must identify a set J of rules. To understand why, the reader should consider the following TSS with con- stants 0 (with no rule) and RUNa, and a function symbol f defined as follows

met for both the c-defining axioms by taking J to contain both f -defining rules. Observe that condition 1.a.ii. fails for this J , but condition 1.b.i.B. is met for both f -defining rules by matching the first f -defining rule with the first rule for c and the second f -defining rule with the second rule for c.

We know that the inaction constant 0, with no rules, is a left and right zero element for  L. Let L = R = {(  L, 0)}. Since the constant 0 has no axioms, condition 1.a. is vacuously satisfied. In order to see that also condition 1.b. is satisfied, it is sufficient to notice that the only rule for L can never fire because 0 has no transitions.

in condition 1.b.i.A. of Definition 5.3 is necessary for the validity of Theorem 5.4. To see this, consider, for instance, the TSS over set of labels {a} with constants 0, RUNa and c, and the binary operator  L defined in Example 4.1. The rules for the constant c are

closed term is a left unit element for f . This holds true because each closed term is bisimilar to one of the constants RUNa and RUNb. Therefore, every process is either able to perform initially an a-transition or is able to perform initially a b-transition, but never both.

Example 5.8 [Synchronous Parallel Composition] Assume that a is the only ac- tion in L. Consider the constant RUNa and the synchronous parallel composition operator  L from Example 4.1. For ease of reference, we recall that  L is specified by the rule

In [3], the full version of this paper, we also give a format for zero elements that is not restricted to GSOS languages, but follows the approach of [6] more closely, and apply it to a variety of examples from the literature. In this paper we have not included any material about the use of premises in deduction rules. In [3] we show that predicates can easily be dealt with.

