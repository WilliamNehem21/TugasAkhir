The mutual exclusion problem asks one to find sections of code that will allow two threads to share a single-use resource without conflict. It turns out that shared memory (with atomic reads and writes) can be used to solve it without any addi- tional synchronization primitives. A typical solution consists of two sections of code (called entry and exit protocols respectively) that each of the two processes can use to enter and exit their designated criticial sections respectively.

First we proceed to establish the left-to-right implication of Theorem 4.5, for which we need to prove a definability result. Recall from [4] that, for any complete play s, it is possible to construct a PA-term such that the corresponding strategy is the least saturated strategy containing s. This property no longer holds for IA||-terms (this will follow from the next section in which we identify a closure property of strategies corresponding to IA||-terms). Instead we shall prove a weakened result for IA|| (Lemma 5.2).

