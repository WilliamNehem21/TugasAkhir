influenced by time and not only by the hashpower used to produce blocks of hashes, and (ii) algorithmic experimentation comparing these models against existing well-known hashrate-based attack models that do not consider time advantage. As a conclusion, this paper presents evidence on the fact that advantages are not negligible for cases in which an attacker has had enough time for secretly mining fraudulent blocks or significant control over the network. Also, the models presented in this paper help in supporting previous claims in the literature about how to correctly model and detect double-spend attacks in the Bitcoin network.

using hashes through a distributed time-stamping service. Since electronic files can be duplicated and Bitcoin does not have a trusted third-party that can verify whether a digital coin has been spent, fraudulent transactions with users spending the same money at least twice can happen. These fraudulent schemes are known as double-spend attacks and have taken place already in the Bitcoin network [6].

Some mathematical models have been proposed to analyze how feasible really are double-spend attacks in Bitcoin. In particular, S. Nakamoto [7] and M. Rosenfeld [9] have proposed hashrate-based attack models in which, overall, an attack is successful whenever the number of confirmations of a honest transaction is surpassed by the number of confirmations of a fraudulent one. In this setting, hashrate means that the model considers how fast a block header can be hashed, while the number of confirmations refers to the number of blocks of transactions claiming a transaction to be valid. In particular, these two models are used to answer the following question:

One important aspect of the models of S. Nakamoto and M. Rosenfeld is the fact that blocks of transactions are considered either non-existent or complete, but never partially complete. That is, these models do not consider blocks to be partially built, neither by honest nor attacker nodes. More importantly, these models lack the expressiveness needed to analyze situations in which an attacker has probably already built fraudulent blocks because it had some time advantage. These features seem important in an attack model given the fact that, at some point, a honest block might just start being built from scratch while competing against an attacker that may have been already mining for a certain period of time. In this case, for instance, such a situation could result in an undetected attack in the attack models of S. Nakamoto and M. Rosenfeld.

For answering Question (ii), this paper presents two double-spend attack models for Bitcoin in which an attacker can be assigned some advantage in terms of time units. The first model presented in this paper results from generalizing the model of M. Rosenfeld by adding an extra parameter denoting some time advantage assigned to the attacker, assumed to be used in producing and mining fraudulent blocks. The second model, following a completely different approach, is a purely time-based model that takes into account the times at which both honest and attacker nodes last mined a block, in addition to their relative progress in terms of the length of chains already mined. In this paper, the former model is called the generalized model and the latter is called the time-based model.

Paper outline. The paper is organized as follows. Section 2 presents a technical overview of the Bitcoin digital currency network. Section 3 briefly explains what a double-spend attack is. Section 4 presents an overview of the double-spend attack models of S. Nakamoto and M. Rosenfeld. Section 5 presents the main contribution of this paper, namely, the generalized and time-based attack models proposed by the authors. Section 6 gathers some information obtained from experimentation on the double-spend attack models and establishes some properties about these models. Finally, Section 7 gathers some concluding remarks and future work.

Anyone can create a Bitcoin account, even offline or without the purpose of becom- ing a miner. Because accounts can be created offline, it is not possible to know how many user accounts are there. BTCs can be sent to any account, even to those cre- ated offline with the network confirming, in this case, that such a Joe Doe is entitled to spend that money. With an account, an user can create a transaction. A trans- action can have more than one input account and more than one output account; it can also include a small tip for the miner that fully mines a block containing it.

The balance of BTCs in a Bitcoin account is not represented by a single number. Instead, any balance is represented by pointing to the previous transactions in the blockchain that justify the ownership of the money. That is, a balance is a trace to the time in which each of its BTCs was first created.

miners that include a transaction in a block of transactions to be mined. For example, Transaction 987 tips 0.01 BTC to those miners who successfully mine a block containing that transaction. However, as show by Transaction 1005, fees are optional. In this latter case, the miner who first mines the block will receive exactly the standard 25 BTC for mining a block but will not be tipped. The standard reward of 25 BTC for mining a block is likely to change in the future, when bitcoins will not to be issued by the system for mining a block.

Finally, note that the system somehow needs to identify if the output of a trans- action has been already spent. Otherwise, an user could create multiple transactions from the same source of income. In the Bitcoin network, miners will check from the blockchain that there are enough funds for the transaction, before mining a block with such a transaction.

As mentioned earlier in this section, mined blocks contain a hash-pointer to their previous block. Therefore, the blockchain can be seen as a collection of linked lists with hash-pointers acting as back-pointers. Note that this helps in preventing any updates from easily happening to the internal tree structure of the blockchain.

Additionally, functions exclusively used in the model of S. Nakamoto will have N as subscript, while those exclusively used in the model by M. Rosenfeld will have R as subscript. Functions shared between these two models can be written without any subscripts.

This section presents the generalized model and the time-based model for double- spend attacks proposed by the authors. Some of the notation, conventions, and functions used in this section are borrowed from Section 4. In addition, functions defined exclusively for the time-model have T as a subscript.

This is the first double-spend attack model proposed by the authors. This model results from generalizing the model of M. Rosenfeld by adding an extra parameter denoting some time advantage assigned to the attacker, i.e., time in which the attacker has been secretly trying to mine blocks. Henceforth, this extension is called the generalized model.

This section presents the time-based model, the second double-spend attack model proposed by the authors. On the one hand, this model is as flexible as the general- ized model in Section 5.1, and thus more general than the models of S. Nakamoto and M. Rosenfeld in Section 4. On the other hand, it uses a completely differ- ent approach to compute the probability of an attacker successfully performing a double-spend attack.

This section summarizes experimental results obtained on the two attack models proposed by the authors in Section 5, namely on the generalized model and the time-based model for double-spend attacks in the Bitcoin network. In particular, the experimental results presented in this section are compared against the models of S. Nakamoto and M. Rosenfeld in Section 4. Additionally, this section includes snippets with the code, in the Python 3 programming language, used to run all the experiments.

The way in which the model of M. Rosenfeld was generalized in Section 5.1 allows for new properties to be studied. In fact, the generalized model as well as the time-based model are still consistent if n0 < 0, which corresponds to the scenario in which the attacker nodes are not mining at the top of the blockchain, but in a branch |n0| blocks behind of the valid branch.

The first model, called the generalized model, extends an attack-model developed by M. Rosenfeld [9] by adding a time parameter, enabling the model to assign time advantage to an attacker trying to achieve a double-spend attack. The second model, called the time-based model, follows a completely different approach by taking into account the times at which the honest and attacker nodes last mined a block, in addition to their relative progress in terms of the length of chains already mined. The two models proposed by the authors are more general than existing double- spend attack models.

As usual, some work remains to be done. Proving that the generalized model and the time-based model coincide is an important and challenging task. Further- more, it seems promising to specify the attack models in a language with a formal mathematical semantics and exercise them against temporal formulas, perhaps fol- lowing some of the ideas in [11]. More precisely, it will be interesting to formally specify the models proposed by the authors in the rewrite-based specification lan- guage PMaude [1] and then use a statistical model checker such as MultiVeStA [10] to formally verify probabilistic temporal properties related to possible scenarios for double-spend attacks with time advantage in the Bitcoin network. Finally, the two models proposed by the authors in this paper can be used for comparing the effec- tiveness of double-spend attacks with time advantage against other types of attacks in the Bitcoin network.

