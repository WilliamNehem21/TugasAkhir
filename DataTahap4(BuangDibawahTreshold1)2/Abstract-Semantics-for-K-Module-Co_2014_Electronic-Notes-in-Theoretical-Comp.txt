A structured K definition is easier to write, understand and debug than one single module containing the whole definition. Furthermore, modularization makes it easy to reuse work between definitions that share some principles or features. Therefore, it is useful to have a semantics for module composition operations that allows the properties of the resulting modules to be well understood at every step of the composition process. This paper presents an abstract semantics for a module system proposal for the K framework. It describes K modules and module transformations in terms of institution-based model theory introduced by Goguen and Burstall.

Probably the first module system for specification languages was described by Bergstra et. al. [11]. Their system is not based on institutions, but their mod- ule operations were used in a similar manner in most institution-based module systems to follow. They do not describe parametrization and, while not directly specifying a visible sub-signature, parts of the signature can be hidden using the hiding operation.

The first abstract module system using institution-based model theory was pro- posed by Diaconescu et. al. [2]; here, a module was just a presentation, consisting of a signature in a certain institution, and a set of sentences of the signature, spec- ifying the behaviour of the constructs. Operations for sum, renaming and hiding are defined on modules and some properties of those operations such as distributive laws are analyzed.

The system proposed by Goguen et. al. [8] allows a module to specify its imported modules, as well as its visible part. The modules are defined here using partial signatures. The notion of an implementation module, for a specification module, is introduced. Hiding, enriching, renaming and aggregation operations are defined for specification modules, and renaming and aggregation of implementation modules are also introduced.

The module system of the CASL specification language [13] allows hiding and revealing sorts from a specification. These operations are supported by our module system as hiding and a particular type of enriching. CASL also support the free operation, that changes the semantics of a module to the initial/free model.

As previously stated, a hiding operations retracts a part of the visible signature back into the hidden signature. For example, one may define natural numbers on top of integers by first retracting the substraction operation, renaming and then adding a total order on numbers and some properties of the numbers with respect to this order. This translated as a hiding, followed by a renaming and an enriching.

