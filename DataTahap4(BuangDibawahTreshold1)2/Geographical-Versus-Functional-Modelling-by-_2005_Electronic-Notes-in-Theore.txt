We can observe however a new trend of the last years in the area of inter- locking systems. The recent opening of markets inside Europe has seen the end of the traditional strict collaboration between national railway companies and national railway industries, in which in a sense there was a limited need of precise specifications, since every misunderstanding ended up to be resolved by phone. In the case of RIS, the principle schemata, a sort of ladder-like, relay based language, widely known by railway engineers, constituted the common reference language by which to describe interlocking systems, since the times interlockings were relay based [8]. In the introduction of computer-based RIS some industries had defined their own approach to produce computer based interlockings, more or less formalized, often based on some logic formalism or language, but they were anyway constrained to relate their own develop- ment/specification method/language to principle schemata, understood by the

e.g. by an extensive testing program, due to the changes done to a single central structure used by all the software modules. We show how the geo- graphical approach may reduce this effort by allowing the re-validation only of those software modules that are actually affected by the changes.

Interlocking rules are obviously the core of the system, so their correctness is the main objective to be addressed by a formal specification. The rules aim at allowing only the safe combinations of switches positions, signals and trains in a station in order to avoid collisions. The signal indications, handled by the interlocking system, govern the correct use of the routes, authorizing the movement of train within interlocking limits.

The Statecharts formalism [9] is an extension of the classic formalism of Finite State Machines (FSM), to allow hierarchical parallel interacting state machines to be specified. Transition from a state to another of a single machine (a statechart ) is driven by trigger events, which can refer to the state of other machines or to global variables; therefore, the communication activity between statecharts is performed using broadcasting: every event is sent to the whole system, and can be received from any other part of the system. During a transition the actions generate events, which are triggered by conditions on other transitions or on global variables. Chains of internal events generated by only one external event are possible.

We suggest a way to design an interlocking system starting from its layout and ending in its operational specification. This approach is similar to the one used in EURIS language [2]. In this work we focus on a methodology that does not use any sort of global summarizing variables, which is usual instead for a functional approach.

With the term summarizing variable we mean a variable whose values depend from the values of a set of other single variables, each related to a physical entity of the layout. As an example we can consider a variable associated to a route, that is true if and only if at least one of the variables recording the occupancy of the track circuits belonging to the route is set to true. The use of summarizing variables, though useful for abstracting certain global aspects of the system, makes the model more distant from the physical topology.

manded routes. In the same way, all the activities performed by functional objects have been distributed to these geographical objects. Hence, the control for example of the correct position of a particular switch point is performed from all the interested elements and not by a single object dedicated to the management of all the switch points.

From the statechart model it is also possible to generate C or ADA code by using the automatic code generator tool, which is part of the Statemate tool. Because of the detailed nature of the model, the code generated is immediately usable without need of any other translation into lower level languages. The resulting code shares with the geographical model the correspondence between software modules and yard devices.

Actually, in the geographical approach, in case of a change to some parts of the interlocking system there may be some modules that do not need to be changed because they are not affected by the modification done, neither directly nor by propagation. Since each object performs its controls indepen- dently and the system does not use global summarizing variables, we can assert that those objects do not have to be revalidated. The objects affected by the modification need instead to be revalidated, e.g. using new test scenarios or modifying the already existing ones.

The experience we have presented is part of a wider research project aiming at investigating the design of RIS by means of different Statechart dialects and different commercial tools that support Statecharts, such as for example State- flow (MathWorks), Telelogic TAU Generation 2 (Telelogic), Real-Time Studio (Artisan Software), visualSTATE (IAR Systems). We have concentrated in this paper on the possibility of adopting a geographical approach, with the main aim of investigating the reduction of revalidation effort in case of change. In this direction we need to verify the scalability to larger designs. Moreover, we need to assess the suitability of this approach to formal verification on one side (by means of model checkers such as the one integrated in Statemate, or such as other academic tools), and, on the other side, to automatic generation of the statechart model from a specification of the physical layout.

U. Foschi, M. Giuliani, A. Morzenti, M. Pradella, P. San Pietro. The role of formal methods in software procurement for the railway transportation industry, Symposium on Formal Methods for Railway Operation and Control Systems (FORMS 2003), Budapest, Hungary, 15-16 May 2003.

