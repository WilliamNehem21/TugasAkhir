In this paper, we discuss in detail the alternative ways that exist for the re- construction of Java types by bytecode analysis and run-time introspection. The following Section 2 focuses deeply on the motivating problem with real life exam- ples. The features which are utilized in component dependencies actually depend on the component model used. Since we work mainly with the OSGi component model, we will provide short description of OSGi in subsection 2.3.

The proposed method of Java type reconstruction is described in the next two sections. Section 3 describes a Java type system representation employed by our method. The generality of its design allows the representation to be used in other projects to ensure Java language type compatibility. Section 4 describes the ap- proach to deciding on component compatibility which uses algorithms working on the type system representation. The merits of these methods are discussed in the end of the work.

dencies between its parts (let say classes) are created at build time when they are also checked by the compiler to be type compatible. In case of problems found by the compiler, the resulting code is not created; when language types (classes and interfaces) are compatible, the application can be built and deployed to a produc- tion site. When a new version of software is developed, the whole monolithic code package is again moved to the production site for application upgrade.

In this section we describe a concrete example of the problem with component compatibility, showing how the user can be affected by this issue. It is one instance of a set of runtime failures which take hours to track down. Methods which prevent such runtime exceptions can therefore save valuable amounts of development time. To develop a frontend for a research project we decided to extend the Apache Felix Webconsole [2] bundle.	This Webconsole is an extendable web- page for managing a running OSGi framework.	It embeds a servlet con- tainer which can be extended by registering a service implementing an interface

We have designed this layer according to the Java Language Specification, Third Edition [14]. The JavaTypes layer is very similar to the Java reflection API [13] but is more general because the contents can be obtained from other sources than just reflection. For reasons described below, the unique feature of JavaTypes is the ability to create the type representation also from component bytecode or the possibility to create representation of nonexisting classes by manipulation.

When creating the representation from bytecode, we use the ASM and BCEL bytecode analysis frameworks. ASM [3] provides a Visitor pattern approach for accessing all parts of class data. We have implemented visitors for the particular JavaTypes classes. BCEL [6] is used for historical reasons (introduced earlier than ASM to the project).

To be able to compare bundles, we have to create the representation of those bun- dles. This is performed in three steps. The first one is reading the bundle metadata information, in the second and third steps we follow the pointers from this metadata and go to bundle implementation to get the Java layer representation.

The type reconstruction starts at the bundle level. For each exported package and service we create the corresponding JPackage or JService objects. Then, their JClass contents needs to be filled in. The situation is trivial for the service case when only one class (the service interface) is referenced. For packages, the list of all contained classes is first obtained by querying the classloader and then expanded by creating JClasses using the reflection type loader.

Next we have to create the representation of all types referenced by public meth- ods or fields of these classes because they will be used in the type-based bundle comparison. This process is bootstrapped by adding the JClasses from exported packages and services to the knownTypesList queue. Then an iterative algorithm for creating the whole transitive closure of interface types starts. All unprocessed types from knownTypesList are handled consecutively. For each type T from knownType- sList, the JTypes referenced by its members are retrieved. For each type R from these referenced types one of these possibilities is true:

In this section we describe the algorithm of component type-based comparison. Because the focus of this paper is on type representation reconstruction, only the main principle will be illustrated through an example. We first describe a function used to compare type structures, then show some typical use cases for this method.

In the second version one method (void setSize(int)) in interface Logger was deleted and at the same time one method (void flushAllLoggers()) of an- other interface LogService was added. Whereas the Logger was generalized the LogService was specialized. These two changes in the same package are contravari- ant, so that the resulting difference is a Mutation of the type.

As described in detail in previous work [5], the bundle comparison method can be used for automated versioning of components. This process can simplify the error-prone task of assigning version identifiers to components and their features. The type differences described above can be used as an input to an automatic creation of version identifiers describing the real evolution of component interface. In the case of OSGi for example, the version numbering scheme is governed by rules which nicely map to the difference values. When using such automated versioning in a component system, its administrators can rely on the reliability of the version identifiers.

This use case applies the method at the bundle release time, when bundle type representations obtained by bytecode inspection of two last component revisions are compared. The first bundle in the comparison is the last previously released component with version identifier. The second bundle is the next release candidate for which we want to determine the version identifier.

Another use case of the method is applicable at the deployment time of com- ponents. In this case we can use the subtyping comparison to ensure that the new version of a bundle is compatible with the previous one, regardless of the version numbers assigned to both (taking the conservative stand that their reliability is low and that a robust method is needed to ensure application type consistency). Alternativelly, the method can be similarly applied to comparing a new version to the actual context of its deployment.

In this use case the method is applied at component deployment time. The representation of the old bundle version is obtained from reflection, including the imported side (resolved to existing package exporters). The representation of the new bundle version is obtained via bytecode analysis.

When using Safe Updater as an updating tool we can prevent the situation from introductory example in Section 2.4. The Safe Updater searches the interfaces of providers and importers recursively and verifies if types referenced by these two sides of the contract are compatible. The subtyping rules applied recursivelly guarantee those errors preclusion.

The last application scenario we mention is the process of resolving the compo- nents with additional subtyping checks. Resolving, similar to the linking stage of a compilation process, is used to bind imported packages to corresponding exporters. These bindings are made only on matching names of imports and exports.

The additional checks ensure that all mutual component interfaces in a compo- nent system are compatible with each other. Here, our method is applied at the start time of the component framework, after component installation or update. Both compared interface sides are loaded via reflection.

In both research and industry world bytecode analysis and manipulation techniques are common. The ASM library [11] can be used to modify existing classes or dy- namically generate classes and it is focused on simplicity of use and performance. Other frameworks with similar functionality are JMangler [15] or JavaAssist [10]. Classes are represented by objects which contain all the symbolic information of the given class: methods, fields and byte code instructions, in particular. This approach is less efficient than ASM visitor design pattern, thus ASM is the best choice for dynamic systems.

A distinct class of frameworks uses XML for bytecode representation and ma- nipulation [17,19]. They are comparable in features to the above approaches and support advanced operations including crosscompilation. The latter work discusses the need to transform or wrap API calls embedded in the bytecode.

Unlike JavaTypes, none of these approaches deals with the problems of recon- structing the referenced types not found in the analysed bytecode, which is a key need in the CBSE context. Another advantage of JavaTypes is the ability to com- pare the reconstructed types by subtyping rules. On the other hand, JavaTypes is not intended for bytecode manipulation and intentionally supports only a limited subset of Java language features.

The ability to perform type-based compatibility checks is important for enhanced robustness of component applications. In this paper, we have described a supporting representation of the Java language types which constitute the interface of compo- nents together with a set of methods for obtaining this representation. Our system allows to use a mixed set of sources in these methods, including the Reflection API and bytecode analysis using the ASM tool.

