We are interested in what new issues arise, and how to take advantage of the fact that interaction goes beyond turing computability in designing interactive agents. For example, interactive agents can be concerned with issues such as survivability and situation awareness that are not relevant to an algorithm. An interactive agent may not only be aware of its surroundings, it may also affect its environment. It may need to negotiate, cooperate, or compete. We propose the following features to consider in the design of interactive agents.

An agent has a boundary consisting of points of interaction with the environ- ment. From the outside only what crosses the boundary is visible. Interaction points could be sensors, such as light detectors or thermometers, effectors such as switches or dials, or message queues for exchange of messages with other agents.

This richness of concerns and features leads to the questions of principles for de- signing interactive agents. In this paper we present initial ideas for an architecture and formal framework for design, specification, and analysis of interactive agents. The framework is based on rewriting logic and a reflective model of coordination for managing an agents activities. New forms of interaction are introduced to model both message and channel/signal based interactions, and to pave the way for mod- eling continuous interactions. The compositional interaction semantics of [18,7] is extended. The aims of the framework include:

Section 2 is a brief overview of motivations and formal foundations for the frame- work. Section 3 describes the formal architecture and section 4 briefly describes the interaction semantics. In section 5 we analyze two agent systems using the formal framework. Section 6 summarizes and discusses future directions.

A PAGODA system is a collection of PAGODA nodes under the control of a distributed node coordinator (DC). A PAGODA node is a collection of components coordinated by a node coordinator (NC). Both coordinators are policy-based. The job of the NC is to make sure components only get the messages they need and expect, and in the order expected. It also takes care of event notification, and logging certain events for self-evaluation and diagnostics. The job of a DC is to control dissemination of knowledge collected locally, deciding what to share, when, with whom. Coordination in PAGODA is discussed in more detail in [17]. A PAGODA reasoner based on soft constraint solving is described in [21].

An alternating display, adapted from [1], is used as a running example to illus- trate the structure and rules for interactive agents. This agent has three interaction points, two from which it reads sensors (say time and temperature) and one on which it writes a bitmap for display. The coordinator ensures that the display alternates between the two sensors. This example illustrates basic object behav- ior and use of sensors and effectors as well as message passing. We also use it to illustrate interaction patterns and different forms of composition.

We consider four types of interaction point: i(id,mQ) (message input), o(id,mQ) (mes- sage output), r(id,v) (read a value), and w(id,v) (write a value). Here id is the name or identifier, mQ is a message queue, and v is a value. This notation is also used to denote interactions that label transitions and form the basis of the interaction semantics.

The activities of an alternating display are instances of sensor reader and display writer objects. A reader, or, knows the name of its sensor, sid, and to whom it should report, od. When or receives a tick message or<-tick it sends the sensor reading, and sends itself another tick. This is expressed by the following rule.

where P is a policy, pS is a policy state, and pQ is a queue of interactions pending processing. These interactions are of the form u(o,ix,msg) (up from the output o(ix,-) of object o) or i(ix,msg) (a message received in the coordinators input queue i(ix,-)). On the right, dnQ and outQ are lists of delivery actions of the form (o,ix,mQ). Those in

According to the coordination and behavior rules, o1 and o2 will output sensed messages. The message from o1 will be delivered to od first, then the message from o2. Tick messages will be delivered to o1 (o2) after their sensed messages are delivered, and the process repeats.

Read/write interaction points are for sensing and effecting the agents exterior. An agent may silently read values from read interaction points. The value is only changed by the environment. This change is seen by all nested agents with this interaction point.

Stream semantics for the Reo coordination model [2] and signal event semantics [12]. Interaction semantics is similar in spirit to the Interactive Stream Languages of [10]. The ideas are also related to work on interfaces of reactive and concurrent systems such as, for example, [5,6]. As an example, a possible interaction path of the alternating display is

As a small step towards using the interactive agent framework to analyze agent structure we consider the kinds of activities that might make up a goal-based au- tonomous agent and related design points. We use these to analyze two autonomous agent systems. The activities we consider are: knowledge manager (KM), estimator, controller, goal achiever, analyzer, and monitor.

We have described an architecture and formal framework for specifying and ana- lyzing interactive agents. The main ideas are policy-based coordination of multiple agent activities and the notion of interaction points. The compositional semantics of actors and reflective objects is extended to the richer interaction mechanisms.

There are several interesting directions for future work. The extension of actor interaction semantics drew on ideas from Timed Data Streams [2] and work on signal semantics and causal interfaces [12]. An in depth comparison of these and other semantic models for interaction is needed.

Last but not least is developing logical rules and principles for inferring emerg- ing behavior of interactive agents. This goes hand in hand with developing design principles. One of the motivations for policy based coordination is to set the stage for compositional reasoning, that is being able to use constraints enforced by coor- dination policies to be able to simplify reasoning about the coordinated activities.

