Separation of concerns or aspects is nowadays recognized as an important issue in software engineer- ing, both at the programming and at the design/specification level. The goal of mixed specification languages (e.g. SDL, value-passing process algebras such as extensions of CSP or full-LOTOS, Ko- rrigan) is to take into account all - or at least several - aspects of systems. We found out from our experience that a lot of mixed specification languages do share most of their features. However, specific theories, such as the symbolic transition systems one, still have to be studied for several families of mixed specification languages. In this paper we propose a logic with an expressive temporal gluing mechanism. This logic aims at providing an abstract denotational semantics for mixed specification languages. This logic enables one to reason about mixed specifications at a high level, without targeting a specific model or language. We show how our logic can be seen as an institution, which has the benefits of enabling a common refinement theory for mixed specification languages.

In the last few years, the need for a separation of concerns with reference to dif- ferent aspects of systems to be specified (datatypes, behaviours, architectures, communications, real-time constraints, ...) appeared at both the programming and the specification level [1]. Systems are said to be mixed when they have more than one aspect. A lot of languages have been defined to deal with

mixed specifications, but may be classified within two groups (see [2] for more references we cannot give here by lack of space). The homogeneous approach (CASL-LTL, TLA) uses a single formalism (often extending it in a syntactical way) to specify both aspects. The heterogeneous approach (LOTOS, SDL, PSF) uses different formalisms. We think this last approach is well suited to the mixed specification as it enables one to use the more adapted formalism for each aspect - adapted eventually meaning the formalism one knows well or the formalism of a given component one wishes to reuse. Therefore this is the approach we followed in previous works on Korrigan [9,10,11], integrating al- gebraic specifications (for datatypes), Symbolic Transition Systems (STS, for behaviours and interfaces) and temporal logic (to glue components). However, we also think that the homogeneous approach is better suited (i.e. simpler) to the verification part of the specification process: no integration problems arise as the verification may be done in a unique framework.

We found out from our experience [3] that mixed specification languages do share a lot of features, both in their syntax and their semantics. As far as semantics are concerned, the important issue is now to stay symbolic, that is avoid the state explosion problem that arises either when one has value- passing events (the domain of the exchanged values may be infinite) or when components encapsulate some non finite datatype (e.g. a buffer may contain any number of elements). This problem has been studied in the value passing process algebras framework, leading to the definition of Symbolic Transition Graphs, symbolic bisimulation and symbolic modal logics [5]. More recently, the previous works had to be modified and extended to deal with LOTOS specificities [8,7].

In this paper, we present such a logic for mixed specification languages with expressive gluing mechanisms, and give a refinement theory for it. We herein address the theoretical aspects of this logic. More syntactical/expressiveness elements and examples can be found in [10] where we address the definition of components, patterns and architectures using Korrigan, the specification language that led us in the design of this logic. The paper is structured as follows. Section 2 presents the single-component part of the logic and its denotational semantics. Then, in Section 3, we extend the logic to the specification of components and compositions of components. In Section 4 we propose an institution for our logic and present some fundamental results on refinement this institution enables. To end, Section 5 concludes and gives some perspectives.

transition terms are used as transition formulas denoting sets of transitions. Such a set-theoretical interpretation is usual in temporal logics as it enables one to use usual set-theoretical operations (union, intersection, ...) which are syntactically denoted by propositional connectors and first-order quantifiers.

To complete our logic for the behavioural aspects, we now have to define how dynamic properties may be expressed, that is dynamic formulas. These formulas correspond to some form of value-passing extension of HML. Such formulas exists in Korrigan [9] or, as far as LOTOS is concerned, in FULL [7].

The pair (D, <D) can be seen as a Kripke structure where states are valua- tion of variables (MV ) and where the reachability relation is naturally denoted by the <D pre-order which contains the execution of events. Therefore, the semantics of view specifications can be seen as a possible worlds semantics. The satisfaction of formulas depends on states (i.e. partial functions of MV ) in which they are evaluated (they are contingent).

We now define the way to express properties on our composed specifica- tions. Projected formulas and projected state formulas enable one to express properties of the systems in terms of properties on the elements that compose it. They are used to restrict the set of models of composed mixed signatures.

In this Section we have defined a logic which enables one to reason on concrete mixed specification languages (e.g. Korrigan, LOTOS, SDL) in an abstract way (defining a denotational semantics for them). This logic could also be used to deal with multi-languages issues as long as the languages are defined using it. In the next Section we will see that another benefit of this logic is to be granted with a generic refinement theory for such languages.

Here, we are going to show that our mixed specification logic is an institu- tion in order to define a refinement theory for views. We will show that results on horizontal and vertical refinements for institutions hold for composed mixed specifications. For this purpose, we will use notations and results established in [6] and [14]. By lack of place, we do not give proofs nor definitions of cat-

A track of research is actually devoted to the study of symbolic models (STS). Our next work will be to study symbolic bisimulation and symbolic temporal logics (with actions) in the context of our logic, and to see if current proposals done specifically for CSP with value passing or for LOTOS may be generalized for a class of mixed specification languages such as Korrigan and our generic framework proposal for the integration of formal datatypes within state diagrams [4]. Further on, we are beginning a work on the categorization of notions of aspects and aspect combination operators. We already noticed common points between the definition of static and dynamic aspects within our logic and we think this can be investigated.

