The C++ Standard Template Library is a widely-used library that is based on the generic programming paradigm. The usage of this library does not warrant bug-free programs. Furthermore, many new errors may arise from the inaccurate use of the generic programming paradigm, like dereferencing invalid iterators or misunderstanding remove-like algorithms.

The C++ Standard Template Library (STL) was developed by generic program- ming approach. In this way containers are defined as class templates and many algorithms can be implemented as function templates. Furthermore, algorithms are implemented in a container-independent way, so one can use them with differ- ent containers [21]. C++ STL is widely-used because it is a very handy, standard C++ library that contains beneficial containers (like list, vector, map, etc.), a lot of algorithms (like sort, find, count, etc.) among other utilities.

The STL was designed to be extensible. We can add new containers that can work together with existing algorithms. On the other hand, we can extend the set of algorithms with a new one that can be work together with existing containers.

objects too. These techniques is quite typical in STL: different function templates for standard behaviour and for arbitrary one. Developing function templates for parameter deduction is very common in the STL. However, there is a problem in this case: when we have an iterator as an argument of lower bound, we cannot use these template functions.

Legacy STL-based codes can be easily transformed to use this vector container with extra checks. Just an extra parameter should be passed to the vector type. However, there is no trivial assignment and copy between an untested and tested vector container, but a special template copy constructor and assignment operator can be added.

Another approach is that the list is maintained when the iterators are destructed. It is easy to erase the iterator from the list in the destructor of vector::iterator. The advantage of this approach is that in the list only the existing iterators can be found. This is marked with 2nd variant in the comparisons.

In the future we consider how the invalidation can be passed as a trait. It would be quite useful if one can parametrize the strategy of invalidation and pass it to containers. Maintenance of contained iterators is also can be more sophisiticated, and it also should be a trait. Another direction can be mentioned according to the type system. It would be elegant to support checks with the type system of C++ to caching the results and avoid unnecessary runtime checks.

