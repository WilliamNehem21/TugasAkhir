Data in description logic knowledge bases is stored in the form of an ABox. ABoxes are often confusing for developers coming from relational databases because an ABox, in contrast to a database instance, provides an incomplete specification. A recently introduced assertional component of a description logic knowledge base is a DBox, which behaves more like a database instance. In this paper, we study the data complexity of query answering in the description logic DL-LiteF extended with DBoxes. DL-LiteF is a description logic tailored for data intensive applications and the data complexity of query answering in DL-LiteF with ABoxes

Description Logics (DLs) constitute a family of logics commonly used in knowledge representation; and they are the logical underpinning of the OWL 2 Web Ontology Language [3]. A standard use case for DL-based systems is to store the facts about the application domain in a knowledge base (KB) and then query the KB. Tradi- tionally, a DL KB consists of two components: a TBox and an ABox [3]. The TBox is the intensional part of the KB. For example, in a TBox one can assert that a

father is a man with at least one child. The ABox on the other hand is for asserting facts about individuals, e.g., John is a father, Mary is a daughter of John, etc. As for querying the KB, a popular query language is conjunctive queries (CQs) which originate from database theory [1].

A = {Employee(john), Project(prja)}. In the TBox T , we assert that every em- ployee works for a project; in the ABox A, we assert that john is an employee and prja is a project. By the semantics of an ABox, we have that there are some models of K for which somebody works for prja and some models for which nobody works for it. Therefore, the certain answers of the query worksFor(x, prja), which asks for all employees working for prja, is empty.

This semantical difference between ABoxes and database instances is often con- fusing for developers with experience in relational database management systems. In order to avoid such problems, DBoxes were introduced recently as an alternative assertional component of DL KBs [16]. Syntactically, a DBox looks very similar to an ABox. For example, the set of assertions above also constitute a DBox D. The difference between A and D is in the semantics because a DBox is similar to a database instance in that the absence of information is interpreted as negative information. In particular, if we replace A by D in K, then the certain answers of the query worksFor(x, prja) is john. DBoxes are closely related to nominals from hybrid logics [2]. In this respect, we think that they provide a nice connection between hybrid logics, DLs, and databases.

DL-LiteF with DBoxes is closely related to the expressive DL ALCFIO, i.e., ALC with Functional and Inverse roles, and nOminals. This is because DL-LiteF with DBoxes contains all these three constructs in a restricted way. Since the exact (combined) complexity of query answering in ALCFIO is an open problem in the DL literature, our result about DL-LiteF with DBoxes is also interesting in this sense. As another contribution, we identify an expressive DL, namely ALCFI extended with DBoxes, such that query answering in this logic is polynomially

The paper is structured in the following way. In Section 2, we review some basic notions from description logics and conjunctive queries. In particular, we define the syntax and semantics of the logics we are interested in, as well as, how conjunctive queries are matched in models. Section 3 introduces the notion of DBoxes as an alternative way of representing extensional knowledge in description logics; together with the notion of query entailment with DBoxes. In Section 4, we establish the main results regarding the data complexity of query entailment in DL-LiteF with DBoxes. Finally, in Section 5 we show that query entailment in ALCFIO and query entailment in ALCFI with DBoxes are problems that are polynomially reducible to each other.

The language of ALCFIO contains concept names NC = {A0, A1,..., }, role names NR = {P0, P1,.. .}, and individual names NI = {a0, a1,.. .}, such that NC, NR and NI are countably infinite and mutually disjoint sets. Complex roles R and concepts C of this language are defined as follows:

The variables in x are called distinguished variables; and the ones in y are undis- tinguished. We call the query k-ary if there are k distinguished variables. For a CQ q, we denote by terms(q) the set of terms in q.

Intuitively, the semantics of a DBox D, enforces the UNA for the individual names in adom(D), and that the extensions of the concepts and roles occurring in D, i.e., sig(D), are given by the assertions in D, and coincide in every model I of D.

The CQ answering problem can be formulated as follows: given an L -KB K = (T , D) and a CQ q, to compute cert(q, K). The CQ entailment problem is given an L -KB K = (T , D) and a boolean CQ q, i.e., a CQ without any distinguished variables, to decide whether K |= q.

In this section, we study the data complexity of query entailment in DL-LiteF with DBoxes. Data complexity is a common measure of complexity in databases [1]. When considering data complexity, the only input considered is the database in- stance, while the query is assumed to be fixed.

Data complexity of query answering in DLs (w.r.t. KBs with ABoxes) is well- studied [5,12]. In this setting, the only input is the ABox, while the TBox and the query are regarded as fixed. As stated in the previously, we are interested in studying the data complexity of query answering in DL-LiteF with DBoxes. In this setting, we consider the DBox as the input, and again the TBox and the query are regarded as fixed.

entailment in DL-Lite7 with ABoxes is in AC0, for data complexity [6]. However, as we show in Lemma 4.1, the problem becomes coNP-hard for data complexity, when DBoxes are considered. Moreover, we show that this complexity bound is tight (Theorem 4.16). In particular, we show a match with the data complexity of CQ entailment in expressive DLs such as SHIQ, SHOI, and SHOQ [12].

The key observation for establishing a bound on the number of new nominals is that they belong to concepts whose instances are bounded in every model of the KB. Clearly, DBox concepts have a bounded extension in every model. However, TBox axioms may enforce some other concepts, not occurring in the DBox, to have a bounded extension as well. We formalize this in the following definition.

is called the f-pruning of M. We call M a K-forest if its f -pruning is a forest. The roots of a K-forest M is the roots of its f -pruning and it is denoted by roots(M). The branching degree of a K-forest M is the branching degree of its f -pruning and it is denoted by bdegree(M).

Every uniform K|q|-forest model M has a finite size. This is easy to see because there are finitely many |q|-trees in M that are distinct up to isomorphism. For bounds on the size of K|q|-forest models, the reader is referred to [11,12,14]. Here the interesting observation is that the size of |q|-trees in M depend on the size of the f and q. This can be explained as follows. Since the branching degree of M is bounded by |f |, the branching degree of a |q|-tree in M is also bounded by |f |. Moreover, the height of a |q|-tree is bounded by |q|. This means, if we take |f | and

The exact (combined) complexity of CQ entailment in ALCFIO (and its extensions above) is a major open problem in DLs: it is known to be decidable [14] (without any upper complexity bound) and coN2ExpTime-hard [7]. In this section, we prove Theorem 5.1, which gives a new perspective to this problem in terms of DBoxes. We believe that this may be useful for tackling the problem.

