satisfy balance >= limit. According to the contract view, no transition system should be a model of this operation specification. When, however, the pre- condition of withdraw is strengthened to balance >= limit and balance-a >= limit, the operation specification becomes satisfiable.

We first define the particular notion of labelled transitions with output that forms the general semantic domain of the semantics of OCL operation specifications. Then we define the sets of states where a given precondition or postcondition is satisfied. With these tools, we define the models of an operation specification and the notion of satisfiability of an operation specific- ation. The models of an operation specification allow the precondition to be weakened and the postcondition to be strengthened. However, we prove that a canonical model can be chosen as the semantics of a satisfiable operation specification. This canonical model exactly reflects the contract view. Finally, we define the possible implementations of a satisfiable operation specification.

where the OCL expression P may contain as free variables fv(P ) only self and x1,..., xn, the OCL expression Q may contain as free variables fv(Q) only self, result, and x1,..., xn. The reserved variable result is used to refer to the result value of a method call. (This is in contrast to constructors where self denotes the newly constructed object and thus the result of a constructor call.)

Operations may be specified not by a single OCL operation specification only, but by several operation specifications. The contract view can be extended to include sets of operation specifications for a single operation by the following reasoning: As every single operation specification forms a contract, the client may choose to fulfil the precondition of some operation specification out of the set in order to meet his duties and may expect the postcondition of the chosen contract. The supplier, however, is bound by all contracts simultaneously, i.e., when the operation is called in a state of the precondition domain of some contract, he has to establish all postconditions of the contracts whose preconditions the state satisfies. Inheritance of operations forms a special case of sets of operation specifications, if both the superclass and the subclass define an operation specification for an operation. The operation specification of the superclass yields a contract for the operation in the subclass, too, since all instances of the subclass are also instances of the superclass.

In our account of the semantics of OCL operation specifications, we have striven to be precise on at least the essential features and peculiarities of OCL. However, though the definitions distinguish between methods with and without result, constructors, and queries and respect queries as integral part of OCL, we have not included all different kinds of parameters, like in-out- parameters, and also have neglected feature overloading. Notwithstanding these omissions, an integration into a formal proof environment like HOL- OCL [3] may seem of interest. More importantly from a modelling perspective, we have not included a discussion of the proof obligations that result from operation specifications. Here, integration in the KeY environment [1] or the USE tool [16] remains future work.

