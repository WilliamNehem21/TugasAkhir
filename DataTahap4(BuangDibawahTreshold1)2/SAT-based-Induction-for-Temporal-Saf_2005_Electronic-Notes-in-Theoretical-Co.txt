The work presented in this paper addresses the challenge of fully verifying complex temporal properties on large RTL designs. Windowed induction has been proposed by Sheeran, Singh, and Stalmarck as a technique augmenting Bounded Model Checking for unbounded verification of safety properties. While induction proved to be quite effective for combinational properties, the case of temporal properties was not handled by previously known methods. We introduce explicit induction, a new induction scheme targeted to temporal properties, and to interactive development of inductive proofs. The innovative idea in explicit induction is to make the induction scheme an explicit part of the specification, where it can be easily controlled, using a highly expressive language like ForSpec. We show how explicit induction was implemented with minor modifications in the ForSpec compiler and in Thunder, a bounded model checker. Finally, we describe how explicit

theoretical completeness is demonstrated by having the property Q describe the set of reachable states of M . Note that induction hypotheses are typically much simpler than a full reachable state description. When it succeeds, induc- tion is able to handle larger models than bounded model checking, since the induction step has to consider only paths of length 1, whereas bounded model checking needs to check sufficiently long paths to get a reasonable confidence [3].

ening P , if we restrict the induction step only to loopfree paths, completeness can be proved by choosing N to be the recurrence diameter of the transition system M , i.e., the maximum length of a loopfree path in M . The advantage of windowed induction over classical induction is that it provides the user with two ways of strengthening the induction hypothesis: strengthening the invariant Q or lengthening the window N . (For simplicity, we do no mention the loopfreeness condition in the rest of our discussion, but it is implemented in our tool.)

Windowed induction is used in [13], and is considered more abstractly in [5]. The formal verification environment in Intel offers this induction scheme as an automatic mode in the SAT-model checker Thunder. The bound N is iteratively increased until either the proof succeeds or a given limit is reached. Windowed induction and standard induction have the same theoretical ca- pabilities, but windowed induction often permits much simpler induction hy- potheses. In many cases the size of windows is relatively small. As with simple induction, we get the best of both worlds: we get a correctness proof and we get the ability to handle very large models.

a loopfree path in the product MP = M  AP . In the worst case, the minimal window N for which the induction succeeds is the recurrence diameter of the system M (the minimal length of loopfree paths in M ), which usually exceeds the capacity of the tool. (It might seem that the problem is caused by the specific automaton used in the example, but this is not the case.)

This limitation is in fact what motivated our work. We want to perform the inductive reasoning directly on the original temporal formula, rather than on the results of its compilation. To this end, we encode the induction scheme explicitly as part of the specification. A failure to prove the induction produces a meaningful counterexample, which reflects the real reason of the failure and is not due to compilation artifacts anymore. Understanding the induction failure is a crucial hint for strengthening the inductive property.

model checking, as we discuss later. For readers not familiar with the ForSpec language, the formula ALWAYS[0,N ] Q means that Q holds in the first N +1 states of a path. Similarly, NEXT[N + 1] Q means that Q holds in the N + 2-nd state of a path.

This section examines the tool support necessary to implement the induction checks (ii-a) and (ii-b) described in Subsection 1.4. Note first that (ii-a) comes down to checking the assertion ALWAYS Q until bound N (see discussion below for the impact of formula depth on the bound). This is a plain bounded model checking problem.

INDUCTION HYPOTHESIS, that he can use to mark the assumption ALWAYS[0,N ] Q. This way, one can distinguish between assumptions that strengthen the induc- tion proof and regular assumptions that specify the interface with neighbor RTL blocks. Based on the new keyword, the ForSpec compiler marks every one of the automata it generates as an assertion, assumption, or induction hypothesis. This information is passed to the model checker that makes sure to use only the initial constraints from the assertion and the induction hy- pothesis.

Finally, note that the bounds N and N +1 used in the two checks above are appropriate for the case where Q is a combinational property. We mentioned earlier that P (and hence Q) can be a bounded safety property. In this case, the bounds used depend on the length of the time windows employed in P . Usually, we end up choosing an offset k, such that the induction base (ii-a) is

In implicit induction, the invariant is the result of automatic translation of the property. Hence, the user may find it difficult to strengthen the invariant (as explained above) and his most probable strategy would be to increase the window size. In explicit induction, the strengthening can be achieved by changing both the invariant and the window size.

The ForSpec directives needed to express explicit induction proofs are ASSERT, ASSUME, and INDUCTION HYPOTHESIS. The keyword ASSUME is used to give auxiliary assumptions (e.g., assumptions about inputs etc.). The explicit in- duction technique does not depend on the usage of ForSpec, the ForSpec constructs described below help expressing and maintaining the induction hy- potheses.

We then check these two directives in a model checking run of N + 1 cycles. Not only does the block template give us a compact notation, it also keeps the low level formulas denoting assertions and inductive hypotheses synchronized. They refer to the same property Q and the same bound N , which prevents false positives.

In some cases it is convenient to use a different window size for different in- duction hypotheses. This provides useful insight into the pipeline/logic depth that each property depends on, and also helps select minimal sufficient model checker bounds to control complexity. It is a strength of this methodology that it is flexible enough to use either independent or identical induction window sizes for different specs.

For any property that can be proved inductively, there will be some in- duction window size for which it and all larger window sizes yield a successful proof, and all smaller window sizes fail with a counterexample in the formal model. Initially it is not known what window size is needed, so starting with larger window sizes can be beneficial. On the other hand, shorter window sizes find counterexamples more quickly, and shorter counterexamples are easier to debug.

As a general rule, we estimate an induction window size N that might work and try to prove the property Q. If we get a failure, we examine the counterexample. If the counterexample looks like it could be due to out-of- sync initialized pipelines, the induction window size needs to be increased. If the counterexample looks like it is caused by some state in the formal model that should not be reached in the actual circuit, the inductive hypothesis prob- ably needs strengthening. The strengthened hypothesis typically adds a new constraint that forbids some problematic state combination that contributes to the counterexample.

The lock protocol is used in the PentiumTM4 to allow different threads to execute atomic operations on several shared resources. The lock protocol is important to verify because it interacts subtly with several other microarchi- tectural features, making its functional correctness crucial. The lock protocol interacts with the cache coherence protocol, as well as with several other per- formance optimizations.

When trying to prove the mutual exclusion property, we quickly get in- duction failures. The model checker provides a witness trace for which the inductive step does not hold. Usually this is due to starting in states that are unreachable in the real model. For instance, the control part of the protocol is modeled as a finite state machine. Some induction failures are traces that include concurrent occurrence of certain events that cannot actually happen together in the real model. Adding a simple induction hypothesis eliminates such trivial failures.

Developing the inductive proof is therefore an iterative process, where we keep strengthening the induction hypothesis based on the failures of previous attempts to establish induction. Overall, we had to add about twenty con- straints before the hypothesis was sufficiently strong to establish induction. The window size of the inductive proofs differed from property to property. Only three properties were provable with a window size of one cycle. All the other properties were proved with a window size of six to twelve cycles.

The model we verified is quite large, containing about 12,000 state ele- ments. This is considerably beyond the capacity (a few hundred state ele- ments) of BDD-based model checkers. The verification effort for the proved properties described here took three to six person-months. Most induction- step runs completed within 20 minutes, checking 36 steps, using under 600M of memory. All induction-step runs completed within 3 hours, checking 48 steps, using under 1G memory.

Another comparison with our approach is induction using STE instead of SAT as the bounded model checker. Induction with STE [12] has been used successfully at Intel for several years, particularly for datapath logic and floating-point property proofs. Sajid and Kaviola pioneered the extension of STE induction to a moderately complex control logic property [11]. Direct comparisons between the STE and SAT induction approaches are not easy because of tool differences. Our 12000 state element model, even reduced to the critical latches, is likely more than twice the size of the 3000 state element model in [11]. Perhaps the largest distinction between SAT induction and STE induction is the apparent difficulty or impracticality of doing windowed induction (vs. simple induction) with STE. Windowed induction using STE is theoretically possible, but it has problems with rapid variable blowup and/or antecedent conflicts. The work of [11] includes simple induction for exactly this reason.

The methodology and tool support presented in this paper address the chal- lenge of fully verifying complex temporal properties on large RTL designs. The methodology advocated here is interactive development of inductive proofs. There is much ongoing research for automating induction proofs, but no sat- isfactory technique has been found, even for combinational properties. We believe that for proofs of the complexity encountered in our work, user guid- ance is needed for finding the correct induction invariants.

