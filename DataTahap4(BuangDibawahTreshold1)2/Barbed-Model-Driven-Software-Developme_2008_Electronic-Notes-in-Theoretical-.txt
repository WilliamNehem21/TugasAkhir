1 This work is partially supported by the EU project SENSORIA IST-2005-16004. The first author was also partially supported by the Joint PhD program: Department of Informatics, University of Pisa and International Institute for Software Technology, United Nations University, Macao. Thanks to J. Vital,

Without explicit recognition, the BMDSD idea has been around for some time, and pursued in major projects, like AGILE [1], DEGAS [2], and SENSORIA. In the latter, several barbs are being developed to permit early analysis to guarantee a better quality of the products, in this case with a Service Oriented Architecture. There are interesting issues with respect to BMDSD in general, related to un- derstanding how much, and how, the barbs should influence the structure of the spine, i.e. how much the models introduced for the analysis should influence the

With respect to the technologies, the issue is that they should be such as to ease both the vertical development (along the spine) and the integrations of the tools in the barbs. In this paper we experiment with UML2 as the modelling notation and VIATRA [6] as transformation engine to develop a barb for the static verification that a service oriented application satisfies given policies. We think that UML is a good candidate for BMDSD, thanks to the wealth of modelling approaches it supports, most of which are based on well established and popular concepts, and can be fruitfully exploited in the main development. The extension capabilities of UML have already proved able to support the integration of barbs [14].

On its side, VIATRA has built-in facilities to import/export UML models that support the smooth integration with UML modelling tools. Besides, the designer can express the transformations in a declarative style that eases the development of the barb. VIATRA is integrated in Eclipse, and using Rational Software Architect for UML, which is also an Eclipse plug-in, we get a uniform development environ- ment. Finally, using the Eclipse based SENSORIA case tool, we can deploy the verification tool as a service, in the same environment.

support different views of the models under development, and to integrate various modelling concerns thanks to its stereotype extension mechanism. The obvious way to lower the cognitive burden is to distribute it among several developers, each with his own expertise. However, the issue of keeping the model needed for the various concerns consistent, still remains, and we want to assess how much the aforementioned characteristics of UML can help in facilitating the development of consistent models.

In the OSGi platform, the exchange of data between services is based on Java objects, which should instantiate a meta model in EMF. This is not a strict con- straint for the SENSORIA tools, since any XML based representation of data will serve. However, the EMF allows one to directly use EMF based transformation tools like VIATRA.

Despite the just mentioned advantages, a UML model usually has a major defect, when exported from a tool like RSA: it is a huge beast, since it has to cater for the many concerns of the development process. Instead, the analysis tools usually work on models built on a small set of concepts, with ad hoc notations. Hence the need of extracting from the UML model the input for the analysis tool, nowadays usually some form of XML presentation. This could be done in one step, directly transforming the UML models into some linearized form that the relevant analysis tools can accept. This was done in some previous work, but lacks of flexibility and open-ness. The approach we are following, which is also coherent with the SENSORIA main stream with respect to model representation, is to pass from the UML model to another model, which abides to a suitably defined, as simple as possible meta-model. This makes almost straightforward the linearization of the target model for tool input, and also paves the way to other utilizations of the target model by transformation tools. The SENSORIA context suggests the adoption of EMF as the modelling framework for PCU.

e.g. avoiding garages that did not service well in the past, as well as other global constraints, e.g. the truck should be close enough to both the damaged car and the garage. The design naturally leads to identify the need of three kinds of services:

starts and ends with UML model descriptions [14]. A UML project is presented to the platform for analysis, formal content is extracted in the form of process cal- culi descriptions, analysed with the analysers of the calculi, and the results of the analysis are reflected back into a modified version of the input UML model. The methodology integrates the use of ForLysa, a tool for security analysis [13] based on the LySa approach [12], and the PEPAWorkbench [3], based on PEPA [17]. The goals are very similar to ours, but the model transformations are built with ad hoc Java programs: we expect to benefit from the flexibility gained by using VIATRA in our experiments in generalizing the approach toward BMDSD.

it may lead to a general framework to simplify the construction of the barbs on one side, and support the formalization of the BMDSD approach, e.g. in an algebraic setting [25,23], on the other. Besides, an algebraic formalization may also help in structuring the approach to the backward transformations, from the analysis results to the UML model. This is especially needed from a pragmatical point of view, when the analysis finds some errors. Preliminary results, rather ad hoc, are available, e.g. in [14], but a general theory of error reflection is still missing.

