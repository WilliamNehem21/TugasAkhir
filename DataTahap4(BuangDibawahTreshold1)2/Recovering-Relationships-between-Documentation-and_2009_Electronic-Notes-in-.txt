work. For instance, latent semantic indexing converts documents and source code to a series of term-document matrices, which represent the underlying meaning of those texts, and then the term-document matrices are used to compute the simi- larity between documentation and source code. Source code contains many special tokens, such as class names, method names, namespace names, and comments, and documentation can be categorized into different hierarchies, such as summary de- sign documents and detailed design documents. Those special tokens in source code and the hierarchical structure of documentation can be regarded as useful charac- teristics of software engineering, and then we can use such characteristics to refine the traceability links extracted by IR approaches.

The paper is organized as follows: Section 2 gives an overview of recovering methods based on IR techniques. The main framework of recovering process is shown in section 3. Section 4 presents the special characteristics of documentation and source code and proposes four strategies to improve current recovery model. Section 5 compares our approach with previous work through two experiments and gives the detailed analysis of parameter tuning. Finally, section 6 draws conclusion and outlines future work.

Extracting the relationships between documentation and source code can be re- garded as an IR query process, in which source code is converted to query terms and software documentation constitutes literature library. First, documentation and source code need to be preprocessed for information retrieval, such as retrieval items extraction, conversion between lowercase and uppercase, stop words removal, and etyma generation. Second, similarity is computed by applying some IR models, and then a list of documents sorted descendingly by correlation degree is gener- ated. Finally, the records with the correlation degrees above the threshold value are selected from document list. When IR approaches are applied to the recovery of traceability links, there must be an important premise that most of the identifiers in source code should be named with meaningful words, which also exist in software documentation. To validate the hypothesis, we manually checked 50 source code files from Linux software repository and 5 commercial software products, respec- tively. Almost 97% of identifiers in source code are meaningful except some local variables.

When we use PM to recover traceability links, query terms consist of the charac- teristic items extracted from source code. Here, the characteristics mean the meta data of free text, which contains words, phrases, or sentences. According to PM approach, the similarity between documentation and source code can be computed as a conditional probability. Suppose that there are n documents, let D denotes

Vector space model was proposed by Salton for SMART information retrieval system at Cornell [8]. Either a query or a document is viewed as a vector of terms (or words), and the lingual similarity of free text is transformed to spatial similarity, that is to say, the similarity among text vectors is applied to document retrieval. Theoretically, the smaller the vector angle is, the higher similarity between a query and a document is. When VSM is applied to recovering the relationships between documentation and source code, every characteristic of documentation or source code can be viewed as one dimension of text space, and then the vector space is the set of those characteristics. Any retrievable document is expressed as a vector in the

The low rank approximation of term-document matrix provided by LSI can filter a lot of noises and has a better spatial and temporal efficiency. LSI takes the relationships among words into account, so synonymies and polysemies can be processed correctly. Moreover, etyma generation is unnecessary, which simplifies the preprocessing step.

The experiments conducted by Antonial et al. showed that probabilistic model was better than vector space model with 30% precision and 70% recall [1]. Then, Mar- cus et al. applied LSI model to the recovery of traceability links, and precision can even reach 70% while recall is about 60% [10]. When the recall keeps invariant, the

recover traceability links, the results are not as good as applied them to information retrieval. Documentation and source code are different from plain text, and they have many special characteristics with respect to software engineering, for instance, documentation might contain data dictionary, UML diagrams, and class explana- tions; structural entities in source code also have call relationships, inheritance relationships, and dependence relationships. Previous recovering methods based on IR techniques treat documentation and source code as plain text, but those special characteristics can be used to make improvement on the precision and the recall of traceability recovery. Our recovering process of traceability links is divided into

Firstly, the identifiers, such as class names, method names, field names, and com- ments, are extracted from source code. Then, the identifiers that contains more than one word, for example, list polygon unite, height of window, are broken into a list of words, here, two lists are L1 = (list polygon unite) and L2 = (height of window). In addition, the keywords corresponding to specific programming language and stop words must be removed in the preprocessing step, while capital characters are con- verted to lowercase.

Secondly, all the documents with multiple formats, such as WORD, HTML, RTF, and PDF, will be converted to plain text files. Moreover, in order to achieve better results, the text files are partitioned into small documents with approximately same size. Documents can also be partitioned according to chapters, sections, or paragraphs, and then stop words removal and uppercase conversion are operated on the small documents as same as on source code.

Low-level documents are usually closely related to source code. Class names, method names, or comments are often included by low-level documents. Moreover, low-level documents can be considered as further detailed versions of high-level documents, such as, algorithm designs, concept explanations, and implementation details. Therefore, low-level documents can be regarded as a bridge between source code and high-level documents, and an iterative refining process can be constructed according to the hierarchical structure of documentation. First of all, the trace- ability links of low-level documents and source code are extracted, and then they

are used as feedback to revise current IR model. New query vectors are generated through learning and accumulating the concepts of low-level documents, and then those concepts will be used to retrieve relationships from higher-level documents. That iterative process will be terminated when the highest-level documents are processed.

relationships in source code. As a result, there are only 88 and 144 correct traceability links, respectively. However, our approach does not have those restrictions, and there are totally 150 correct links retrieved. The decrease of recall is due to the different constraints of experiments accordingly.

When threshold value method is applied to filter result list, we used 0.5 as initial threshold. There are 143 correct links out of 247 links retrieved, and 57.89% precision and 95.33% recall are reached. In [9], when threshold was set to 0.6, LSI module can get 71.01% recall and 42.98% precision. Therefore, compared to traditional LSI method, ALSI can improve precision and recall greatly.

Different weights are assigned to comments according to their types, such as, class comments, method comments, and general comments. When the weight of class comments is increased, precision and recall will fall after rising, which is the same as method comments and general comments. When the weight of class com- ments is set to 2 and all the other weights keep invariant, peak value of precision and recall is reached. Moreover, the weights of peak values of method comments

and general comments are 1.5 and 1.5, respectively. The weight of comments can not be increased arbitrarily. tf -idf weight calculator computes the weight of a word not only in current document but in whole corpus, so any weight that is relatively too high will make tf -idf algorithm fail.

Though similarity thesaurus can process synonymies and abbreviations, it still needs some manual efforts. If a developer is not familiar with the legacy system that he/she is maintaining, it is very difficult for him/her to input correct entries to the thesaurus. Moreover, the preprocessing step of documentation and source code is still a tricky and challenging job, and the classifying of documents according to the hierarchical structure of documentation also needs manual interventions. Therefore, more attention should be payed on the preprocessing step, and the automatic classi- fication of documents is necessary. In the future, we will exploit more characteristics of documentation and source code with respect to software engineering to improve the precision of retrieving traceability links. In addition, more experiments on large open source projects, for instance, Apache, Eclipse, and GCC, will be performed with our improved IR approach.

