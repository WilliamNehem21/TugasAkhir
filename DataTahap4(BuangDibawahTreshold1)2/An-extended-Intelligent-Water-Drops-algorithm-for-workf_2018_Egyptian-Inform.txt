Cloud computing is emerging as a high performance computing environment with a large scale, hetero- geneous collection of autonomous systems and flexible computational architecture. Many resource man- agement methods may enhance the efficiency of the whole cloud computing system. The key part of cloud computing resource management is resource scheduling. Optimized scheduling of tasks on the cloud virtual machines is an NP-hard problem and many algorithms have been presented to solve it. The variations among these schedulers are due to the fact that the scheduling strategies of the schedulers are adapted to the changing environment and the types of tasks. The focus of this paper is on workflows scheduling in cloud computing, which is gaining a lot of attention recently because workflows have emerged as a paradigm to represent complex computing problems. We proposed a novel algorithm extending the natural-based Intelligent Water Drops (IWD) algorithm that optimizes the scheduling of workflows on the cloud. The proposed algorithm is implemented and embedded within the workflows simulation toolkit and tested in different simulated cloud environments with different cost models. Our algorithm showed noticeable enhancements over the classical workflow scheduling algorithms. We made a comparison between the proposed IWD-based algorithm with other well-known scheduling algorithms, including MIN-MIN, MAX-MIN, Round Robin, FCFS, and MCT, PSO and C-PSO, where the pro- posed algorithm presented noticeable enhancements in the performance and cost in most situations.

e.g. grids and clouds for their powerful capabilities in modeling a wide range of applications, including scientific computing, multi- processors system [2], multi-tier Web [3], and big data processing applications [4]. The problem of workflow scheduling in cloud has become an important research topic due to the development of cloud technology.

fashion. In general, the two most important objectives of workflow schedulers are the minimization of both cost and makespan. The cost involves not only the computational costs incurred from pro- cessing individual tasks, but also data transmission costs, where potentially large amounts of data must be transferred between compute and storage sites.

as they collect some soil from the path; this increase is inversely proportional to their travel time, where the travel time duration depends on both the velocity of the stream and the distance trav- elled. The amount of soil in the path is a major concern when deciding the chosen path to go through; where water drops always prefer the easier path, i.e. the path with less soil. The IWD algo- rithm constructs probabilistic solutions for the best path(s), where the parameters of the algorithm are updated iteratively in order to converge to high-quality solutions. Optimum approximation algo- rithms are used for finding approximate solutions to optimized solution. Authors of [18] identified three reasons for the signifi- cance of the IWD algorithm: (I) It converges to the solution faster than other techniques, (II) It converges to high quality solutions using average values, (III) it is flexible with the dynamic environ- ment and incorporates pop-up threats easily.

Authors in [25] proposed a market-oriented hierarchical scheduling, which considers and optimizes both the Task-to- Service assignment, and the Task-to-VM assignment in local cloud data centers. The Cat Swarm Optimization (CSO) was used by the authors of [26] for workflow scheduling in the Cloud. The algo- rithm aims at reducing wastage of energy, where its policy is based on updating positions of cats. The algorithm proved to be more efficient than PSO as it converges to the optimal solutions in less number of iterations. In [27], a resource-aware hybrid algorithm was proposed to schedule both batch jobs and workflows in the cloud, where tasks are first assigned to group of cloud resources; then classical scheduling is applied for each group to schedule its assigned tasks.

from node i to node j. Condition (j) identifies whether the node j has child node(s) or no. If it has one or more child; then, it is assigned a value of 1; otherwise, it is assigned 0. The method sub- graph (j) counts the number of nodes below that particular node

This phase represents an extension to the original IWD algo- rithm, it starts after finishing the second phase, in which the whole workflow is traversed and all the IWD paths are discovered. In this phase, in order to assign the workflow tasks to the cloud VMs, the scheduler assigns the workflow tasks level-by-level guided by the best discovered IWD paths in order. As shown in the algorithm, the scheduler traverses all the tasks tpath on the best discovered path PIWD_best from its root to its leaves one by one. For the task at the root, i.e. first level, of the PIWD_best, the algorithm searches for the fastest idle machine VMselected and selects it to be assigned it to this task; if no idle VM exists, the algorithm finds the next VM to be free and selects it for executing this task. In the next levels, all descendent tasks in the same path are assigned by default to the same VMselected of the task at their root, as it remains always the fastest free VM. At each level of the best path, after assigning the task tpath on the PIWD_best at this level, the algorithm assigns all tasks tlevel on its level belonging to other connected paths as

well from left to right, where for each task tlevel, the next fast idle VM is assigned to it; otherwise, if no free VM is available, the schedule finds the next VM to be free and assigns it to this task. This important as it ensures the respect of the precedence relation- ship among the tasks, i.e. no task at any level is assigned to be executed by a VM before its parent task. It is possible that after finishing the above steps some tasks remains unscheduled in the workflow, e.g. if the workflow has several unconnected paths, once the whole PIWD_best is completely traversed, the same steps are repeated on the next best IWD path containing unscheduled tasks in the same workflow.

IWDC algorithm, PIWD_best, is: 0 ? 2 ? 4 ? 6. Next, the same above calculations is repeated in a second iteration, where the IWDC restart again from Node (0) after purging the pre-visited paths. This results in the second best path which is: 0 ? 2 ? 4 ? 7. Then the process is repeated again until all paths in the workflow graph is discovered, which results in the following best paths in order: 0 ? 2 ? 4 ? 8, 0 ? 2 ? 3, 0 ? 2 ? 5 and finally 0 ? 1.

In the previous sections, we compared our algorithm with a set of common heuristic algorithms. In this section, we compare it with schedulers based on the meta heuristic optimization tech- niques PSO and its variant C-PSO [36]. PSO and C-PSO are workflow cloud-scheduling algorithms that rely on the social behavior of a swarm of particles and C-PSO a variant of PSO that is inspired by the catfish effect observed by Norwegian fishermen when catfishes were introduced into a holding tank of sardines. We used Work- flowSim to run our scheduler to schedule 16 different workflows on a cloud environment with 6 VMs similar to the environment

paying around the double price which is fair enough for people which want to balance between the speed and the cost. Hence, from these results, it can be seen that using m1.small and c4.large instance types can be the best choice for scheduling many work- flows, where m1.small can be better for workflows that have the cost as a main concern over the makespan, while c4.large instance type is better for workflows that have the makespan as a main concern over the cost.

