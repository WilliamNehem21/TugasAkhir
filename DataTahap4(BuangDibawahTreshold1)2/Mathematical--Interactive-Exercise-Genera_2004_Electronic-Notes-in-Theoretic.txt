Authoring content for any system is time consuming and often conducted in a proprietary format that makes reusability hard if not impossible. Appropriate specifications, such as the IMS QTI [17], are being developed to represent questions, tests, and activities and enable their exchange between educators, and interoperability among different learning management systems. However, QTI was not explicitly developed with mathematics in mind (see [3,10,16]) and ignores many significant problems that authors of mathematical activities face; the fact that they are often complex with multiple parts, the need to use multiple notations and allow entry of mathematical expressions, the fact that answers often entail mathematical entities beyond simple numbers or strings yielding the need to handle accuracy and precision of numbers.

Fortunately, representations such as OpenMath[5], MathML[6] and OM- Doc [11] help in publishing mathematics and provide support for delivering, re-using and exchanging mathematical expressions. OMDoc, in particular, covers some of the limitations mentioned before since, apart from the repre- sentation of the mathematical entities, it provides structures for the meaning of the document itself, thus offering machine understandable mathematical documents. This is something very important for systems which are becom- ing more adaptive and intelligent.

amount of unnecessary explanation 3 . Doing so, would be like proposing a new standard, which is not our intention. Our aim is to motivate discussion with other interested parties to reach a common structure that would, at least, permit transformations from one format to the other without loss of functionality.

<response>: Contains information about the type of response expected for this item. Multiplicity represents exercises where the user is expected to pro- vide more than a simple answer (e.g. a matrix, a fraction etc). <response> elements have a for attribute which can be used to match identified parts of the text and to be replaced by interactive elements (blanks, combobox etc.) (see example in section 3.1)

<response> element it has a for attribute to match each response. This is not to be confused with the solution of an exercise as the latter can be a whole new item as declared in the map action type="onSolution" element (see section 3.3).

By separating the content from the presentation we have managed to ease authoring. Using for instance a LATEX to OpenMath or MathML converter one can use previously written material and then by hand match the blanks. In the future this format could help tools such as QMath (http://www.matracas.org)

Note that due to the lack of a standard for such expressions, at the moment, we still use common programming expression syntax (e.g. 2*a^2) (although in anticipation of a more widespread use, MathML or better OpenMath should be used to define these).

variables (the ones defined under the root of the exercise element) . These are rather subjective decisions which should be thought carefully with other interested parties. On the other hand, having an appropriate way to repre- sent them is a necessary precursor for further discussions in order to achieve a general format that could help in exchanging questions.

As we mentioned before, presenting all the details of the information model here is considered beyond the scope of this paper especially at this preliminary phase. We are still working on finalising some of the aspects that fit the activites in WaLLiS and other systems. We provide the examples and the discussion as inspiration for further collaboration with interested parties that could lead in a shared format. For instance, the exercise description module of OMDoc could benefit from the ideas proposed here, namely the way we match OpenMath expressions, how we link items instead of nesting them, the variable support and the conditional executions that can provide adaptive exercises.

Similarly, the 2nd version of QTI is currently under development, and we strongly believe that the issues raised here are important and can be easily taken into account in order to be able to provide exercises that are trans- formable, if not exchangeable, between systems. First of all, there is an ap- parent need for supporting mathematical notation as we do here and the use of variables for randomising questions as in [2]. Without this support, the questions that contain mathematics are susceptible to an enormous semantic reduction that would make further authoring and maintenance impossible.

The needs of interactive exercises as presented here have much in common with those of other systems which involve the manipulation and evaluation of mathematical input. With the use of such external systems we can check for all sorts of errors that students manifest and provide adaptive feedback. We briefly showed an example with a CAS but similar communication could be achieved with other intelligent systems or automated provers.

We described an information model that achieves a clear separation between the mathematical entities, and the interactive and presentation layer of the generated questions, thus overcoming the inefficiencies that other formats have. The use of variables makes authoring even easier and the fact that the interactive exercises are generated from static documents helps interoper- ability, reusability and ease of maintenance. The shallow tree structure helps in managing and databasing the document as well as reusing the feedback elements or independent parts of the exercise in different exercises. Simul- taneously, the format allows authoring any complex exercise structure, and provides the ability to deliver feedback and steps of the exercise in an adap- tive manner. These could not be represented with any other information model so far. Of course, the format presented here needs further refinement

