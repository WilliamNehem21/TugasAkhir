Many modern program verifiers translate the program to be verified and its specification into a simple intermediate representation and then compute verification conditions on this representation. Using an intermediate language improves the interoperability of tools and facilitates the computation of small ver- ification conditions. Even though the translation into an intermediate representation is critical for the soundness of a verifier, this step has not been formally verified. In this paper, we formalize the translation of a small subset of Java bytecode into an imperative intermediate language similar to BoogiePL. We prove soundness of the translation by showing that each bytecode method whose BoogiePL translation can be verified, can also be verified in a logic that operates directly on bytecode.

Many modern program verifiers such as ESC/Java [10], Boogie [2], Krakatoa [12], and Caduceus [9] verify programs in two steps. First, they translate the program and the specification into an intermediate representation such as guarded com- mands, BoogiePL [7], or the Why language [8]. In the second step, they compute verification conditions for the intermediate representation and pass them to a theo- rem prover. Using an intermediate language improves the interoperability of tools. For instance, Krakatoa and Caduceus translate Java and C code to the Why lan- guage, which allows them to share the Why back end. Moreover, simple intermedi- ate representations facilitate the generation of small verification conditions through passification [11].

In this paper, we formalize the translation of Java bytecode into an untyped version of the intermediate language BoogiePL and prove soundness of the transla- tion by showing that the verification conditions for the intermediate program are at least as strong as the corresponding verification conditions for the original program. Our formalization and proof [6,14] cover a large subset of Java bytecode. Due to space limitations, we focus on a small, but interesting subset in this paper.

In this section, we give a brief overview of BoogiePL and present a wp-calculus. For details, we refer to a report by DeLine and Leino [7]. To focus on the essentials of the bytecode translation, we use an untyped version of BoogiePL in this paper. However, our full formalization [6] works with the typed language.

BoogiePL programs consist of a prelude and a list of procedures. The prelude specifies a background theory in first-order logic using global variables, constants, axioms, and uninterpreted functions. The procedures contain a specification and an implementation. In our translation, we do not use the procedure specifications. The implementation of a procedure starts with the declaration of all local variables, followed by one or more blocks. A block has a unique ID, a body consisting of BoogiePL commands, and ends with a non-deterministic goto, which specifies all possible successor blocks in the control flow graph. A goto with an empty list of block IDs terminates the execution. BoogiePL provides the following commands: assignment, call, assume, assert, and havoc. The havoc command assigns an arbitrary value to a given variable. In the following, we will reuse sort Method for procedure names.

sh(m, l) yields the index of the top element of the operand stack before execution of the instruction at label l of method m. isEdge(m, l1, l2) yields true iff there is an edge from label l1 to label l2 in the control flow graph of method m. If this is the case, isEdgeTarget (m, l2) yields true. The functions isBackEdge and isBackEdgeTarget are analogous to isEdge and isEdgeTarget , but consider only backward edges in the control flow graph.

Local State: We use the global variable heap to model to heap of the current execution state. The operand stack is modeled by the variables stacki, where i denotes the height of the stack (starting with 0). The registers (representing the local variables and parameters) are modeled by variables regi. Since the maximum height of the operand stack and the number of used registers is given in the class file, we know statically how many of the stacki and regi variables we have to declare in the BoogiePL procedure.

A transition along a back-edge always closes a loop in the control flow graph. Therefore, we can assume that the target of the back-edge has a local annotation for the loop invariant. In the translation, we eliminate the back-edge and instead gen- erate an assertion that the loop invariant holds. A forward-edge is simply translated into a goto. This is done by the translation function TrEdge. Which is defined for a list of possible successor labels ls.

ifgt: A branch instruction is translated into a non-deterministic goto to two suc- cessor blocks that assume the branch condition to be true or false, respectively. The true-block then jumps to the target label l'. To eliminate back-edges, we apply TrEdge at this point. The false-block is continued with the translation of the next

The actual method call is translated as follows: We assert that the receiver is not null and that the precondition of the callee holds. Possible side effects of the callee are accounted for by havocing the heap. Since the callee may terminate normally or abruptly, we continue with a non-deterministic goto.

For abrupt termination, we erase all information about stack0, which now con- tains the exception object. For simplicity, we do not consider the throws clause of the callee here, but simply assume that the exception is an allocated object of type Throwable (typeof yields the runtime type of a value and <: denotes the subtype relation). We then assume the exceptional postcondition of the callee and jump to all possible handlers of the exception. A more fine-grained handling of exceptions using throws clauses is straightforward.

not considering back-edges. The base case covers all instructions that terminate the method, in particular, ireturn. All other instructions are covered by the induction step. In the following, we show one case of the induction step, namely the case where the instruction at label l is iload n.

By definition, instrpos yields the first position of part (2). Part (1) is needed to show the proof obligations stemming from loop invariants (see last paragraph of Sec. 2.4), but not relevant for this lemma. Therefore, we consider the output of TrInstr (Tr(m), l) in the following. We start by expanding the left-hand side of the implication:

Case (d): This case does not generate any suffix after the translation of the instruction. Thus, we have pos (Tr (m), l + 1 )= instrpos (Tr (m), l)+ 1. The rest of this case is analogous to case (c).	 

The Boogie verifier [2] translates annotated CIL code to BoogiePL. Some aspects of this translation have been proven sound, for instance, the back-edge elimination and the translation of the statements that manipulate the heap. Our formalization and proof cover a much larger language subset, in particular, exceptions, which are not yet handled by Boogie.

We have formalized a translation of a small subset of Java bytecode to BoogiePL and proved soundness of this translation. This work closes a gap in the soundness argument of several program verifiers. We managed to keep the complexity of the translation and proof reasonable by using the identical heap model and a very similar state model for bytecode and the BoogiePL translation. Moreover, our translation relies on the guarantees and information given by the bytecode verifier.

