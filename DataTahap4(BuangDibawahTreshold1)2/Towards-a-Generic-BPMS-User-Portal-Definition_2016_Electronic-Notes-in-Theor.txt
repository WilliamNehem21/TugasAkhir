A key aspect that organizations need to take into account in order to be more effi- cient and effective is to be able to manage their Business Processes (BPs). Business Process Management (BPM) [18,20,6] provides support to the complete BPs lifecy- cle, from modeling, through developing, deploying, executing and evaluating their execution, regarding both the organizational and technical environments. In this context, Process Aware Information Systems (PAIS) [7] and in particular, Business Process Management Systems (BPMS) [2] arise as the technology to support the BPs lifecycle.

In this paper we present the definition of a generic BPMS user portal based on a unified data model and a generic process engine API, which can be integrated with potentially any process engine for the execution of business processes. Its definition was based on a comparative evaluation of three different BPMS (Activiti 4 , Bizagi 5 and Bonita 6 ) with respect to the functionalities they provide in their user web portals and process engine APIs. Moreover, we modeled our generic BPMS user web portal using the Interaction Flow Modeling Language (IFML) [13], as standard language designed for expressing the content, user interaction and control behavior of the front-end, which allow us to provide a platform-independent front-end model to be used as basis for the development or automatic generation of BPMS user portals.

The rest of this paper is structured as follows. In Section 2 we present related work. In Section 3 we introduce general and key components in a BPMS architec- ture, as well as a comparative evaluation of the selected BPMS. In Section 4 we detail the architectural definition of the generic BPMS user portal, the underlying unified model and the generic process engine API from which to access any process engine. In Section 5, we introduce the IFML standard and the IFML-based generic user portal we have defined. In Section 6, we show a prototype we have developed as a proof of concept and finally, in Section 7 we present conclusions and future work.

There have been approaches that tried to unify the concepts of BPM right from the beginning of workflow management as the Workflow Reference Model and the Workflow Management Facility Specification [21,11] in which key functionalities for a workflow engine are defined. In particular, in [21] five functional interface areas are defined: (1) process definition, (2) workflow access from a client, (3) workflow access from other applications, (4) workflow interoperability and (5) management and monitoring, with a common set of API calls and related interchange formats. Although this model defined key functionalities for process engines (which served as a basis for many workflow and BPMS systems) the approach is of a high level of abstraction with no specific operations, which in our approach are defined in detail. In [8] the authors present a metamodel defining the main concepts of a process model. Besides it is not focused on process execution but on process modeling, the metamodel has some related aspects. In [24] three perspectives for the run-

time of a workflow management system are taken: participants, administrators and customers, and some workflow systems functionalities are also analyzed with focus on defining a reference model for the interface (5) of management and monitoring. We also take these three perspectives but our unified data model and API covers a wider set of interfaces from (2) to (5). In [3] the authors describe an effort to define common APIs for structured peer-to-peer overlays and the key abstractions that can be built on them. Although the work is not focused on BP, it also defines a generic API which is validated by implementing some communication protocols. Finally, in [15] the authors define a BP execution needs at least five types of data:

Compared to these works, our proposal provides a unified view of concepts and relationships regarding the execution of BPs, along with a highly decoupled view of the main components of a BPMS for process execution i.e. the user portal and the process engine: (i) a generic user web portal specified as an IFML model, with defined functionalities based on the concepts from the unified model; (ii) a unified model which provides an integrated vision of BPs and activities definition and instances concepts along with their relationships as a basis for process execution; and (iii) a generic process engine API which allows managing the concepts defined in the unified model, providing the means to access potentially any process engine. Although the unified model is based on a primary analysis of concepts from three BPMS, we have identified a core set of concepts and relationships based on the concepts analyzed, which provide the basis for process execution and user worklist management, role and users management, among other functionalities. To the best of our knowledge there is no other proposal in this specific direction.

Also, as defined in [6] three categories of BPMSs can be identified with respect to their support for BPMN process model execution: Pure BPMN, Adapted BPMN and Non BPMN, where in the first case the tools support BPMN natively e.g. Activiti, in the second they use a BPMN skin but use another representation to execute the process model such as XPDL e.g. Bonita and Bizagi, and finally tools which do not support BPMN and use their own proprietary language and semantics

tion. Bonita names a process definition as Application, and process instances as Cases. Applications contain tasks definition, and Cases contain tasks instances. Variables instances can be defined which maintain the task state for a particular case. Variables can be also defined at the application level so variable instances can be also related to cases. Users can add comments to both cases and tasks instances in which they are working.

User web Portal. It is also organized in three main columns, and a menu above them: left, shows the tasks working list for the logged user; central shows the detail information for the selected elements on the left, and right where events and comments are shown. The menu provides sub-menus to manage tasks, processes, reports, and an option for management, only available for administrators.

SOAP API. Differently to the previous analyzed BPMS, Bizagi provides a SOA layer with SOAP WS to access the process engine. It is organized in four services categories, similar to the sub APIS defined in the others: Workflow Engine, En- tity Manager, QuerySOA and RenderSOA. The workflow engine allows managing the control flow of processes executing actions such as start processes or perform activities; the entity manager provides access to the data model allowing adding, retrieving or updating information on entities; the querySOA allows to obtain in- formation regarding cases, tasks or entities; finally, the renderSOA allows querying information regarding the metadata of defined user forms, such as data fields. Each service defines several methods that will be invoked in order to obtain the corre- sponding data, and for each of them the XML documents which are used as input and output are defined. The definitions in each category can be seen obtaining the corresponding WSDL http://[Server]:[port]/BizAgi-war/WebServices/[category]?wsdl where category is one of the sub-APIS defined. The invocation is via a SOAP WS method.

The Access layer is composed of two sub-layers: the Service layer where the generic process engine API is defined exposing functionalities to the user portal, and the Integration layer which provides the means to actually implement the interaction with the selected process engine. Examples of functionalities provided by the generic API to the Portal goes from general services such as logging facilities, to specific services for the portal such as listing pending tasks for a given user. The Integration Layer is responsible for providing the functionalities exposed by the generic process engine API by invoking the specific methods from the selected process engine, since each process engine has different operation signatures and ways of exposing the same functionality. It comprises two main components: (i) the interface IEngineAdapter component which defines the functionalities that have to be provided, and (ii) the specific adapter component such as the ActivitiEngineAdapter which have to be implemented for each selected process engine. Each adapter has the responsibility of providing the functionalities defined in the interface by invoking the corresponding process engine and translating the response to the one expected by the generic API. This layer decouples the definition of functionalities of the portal from the im- plementation of these functionalities, which can be provided by any process engine via the Integration layer. In the case that the selected process engine does not provide the selected functionality, it can be disabled in the user portal. In this way, our BPMS generic portal does not provide yet another implementation of a process

The language defines specific view containers, e.g. site views representing a set of pages and/or areas forming a coherent view of the site such that it can be differ- ent site views for different types of users, areas representing a set of pages (possible nested), and pages representing a container of one or more pieces of information shown to the user at the same time. View components are also detailed, e.g. for representing detailed information of an entity, selecting a list of entity keys, repre- senting a form, and expressing database operations for entity creation or deletion.

user and public. The administrator site is composed of pages to provide function- alities regarding administration of groups, user and processes, among others. To access this site the user must login with valid administrator credentials. The com- mon user site is composed of the pages providing the functionalities for users of the BPMS, e.g. list assigned tasks, take or work on a task, among others. To access this site the user must also login with valid credentials. The public site view is for people not identified within the system, and contains public pages as the login page.

Actions that can be performed over a selected task include: take, release, reassign or execute. The take action can be only performed over tasks assigned to the user role. For the reassign process once the task is selected the user to whom it will be assigned has to be selected. To do so, a link is defined between the Task list and a component for the user selection, which is placed in a new page Select User. This component is also linked to the Task component which will be finally updating the task, changing the assigned user. As an example, we describe the options Take task and Execute task.

We develop a partial implementation of the generic process engine API. In par- ticular, we omitted those used for addressing administrative tasks, and we focused on those related with process execution, e.g. list installed processes, init a process case, list pending tasks for a given role, and perform a task.

of selected BPMS (Activiti, Bizagi and Bonita) with the purpose of unifying the concepts defined within their portals and process engines, based on their being representative of selected categories we have defined. Based on this analysis we have defined a generic BPMS user portal based on a unified data model and a generic process engine API for interoperability between process engines. We found that although these BPMS provides similar concepts, they differ in the way they provide access to the process engine and the functionalities they provide in the APIs.

We also defined a platform-independent front-end model for our BPMS portal using IFML. This model provides a sound basis for the generation of BPMS portals using different technologies. The example of application we presented shows the usefulness of our definitions. Next steps involves the application of model-driven

engineering techniques to generate BPM portals automatically from the IFML mod- els in different technologies, in such a way that usability patterns and best practices are considered in advance. Differently to other proposals such as WebRatio [19], we want to decouple the user interface from the process engine to execute processes, i.e. generate only the web site including the invocations to the generic process engine API we have defined.

We plan to continue improving this model in two main directions: i) comparing our definitions to other existing BPMS such as Camunda, jBPM, Intalio, among others, to enhance the generic API and model, in order to cover as many existing engines as possible, and ii) by considering areas for visualizing other elements such as BPs measures. For the latter, we can extend the unified model adding an engine- independent repository tailored for BPs execution measures analysis, both in real time and post execution. In fact, we can define an extension of the model in order to support the execution measures defined within the BP Continuous Improvement Process methodology (BPCIP) [5].

