The paper is structured as follows. In Section 2, we give a brief overview of two diagrams in UML 2.0 used for component-based modelling. In Section 3 we intro- duce our underlying semantic model, namely concurrent automata. In Section 4, we introduce our concurrent logic. The paper finishes with some concluding remarks and ideas for future work.

The connection between our model and behavioural presentations follows that described in [14]. We may impose an ordering on behaviours and associate occur- rences with primes [5], based on the fairly standard techniques found in [16,21]. In this case, we have seen that vectors are related by coordinatewise prefix ordering, and a prime is a vector which covers precisely one other vector. A vector is then associated with the set of primes beneath it, and this gives a set which inherits the ordering between vectors and allows the formal treatment of phenomena such as concurrency and nondeterminism.

Another strength of our approach concerns the true-concurrent hierarchical logic which allows us to express concurrency explicitly but also reflect properties of com- ponents at different levels of abstraction. As mentioned earlier in the paper, we have to clarify how and when formulae can be translated from one view to another. To the best of our knowledge, from the existing logics that address concurrency, none have the means to explore different levels of abstraction in quite the same way. This is a crucial feature to address complex component-based systems. Finally, the logic

We are currently working on the integration of our concurrent logic and con- current automata into the Edinburgh Concurrency Workbench (CWB). Since con- current automata are an extension of ATS, we expect the CWB extension to be fairly straightforward given previous work on defining an ATS semantics for CCS (see e.g., [15]). Ultimately, our aim is to establish a connection between UML 2.0 and CWB enabling the verification of component-based systems.

