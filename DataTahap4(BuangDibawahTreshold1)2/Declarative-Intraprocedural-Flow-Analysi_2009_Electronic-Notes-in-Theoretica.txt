We have implemented intraprocedural control-flow and data-flow analysis of Java source code in a declarative manner, using reference attribute grammars augmented with circular attributes and collection attributes. Our implementation is built on top of the JastAdd Extensible Java Compiler and we have run the analyses on medium-sized Java programs. We show how the analyses can be built using small concise composable modules, and how they provide extensible frameworks for further source code analyses. Preliminary measurements indicate that there is little difference in execution time between our declarative data-flow analysis and an imperative implementation.

In this paper we show how control-flow and data-flow analysis can be performed directly on the AST used in a compiler frontend while retaining good performance and compact specification size. Moreover, our approach is completely declarative, enabling both modular and extensible specifications. We have implemented the analyses on top of the JastAdd Extensible Java Compiler [7], using an approach based on extended attribute grammars. The analyses reported in this paper are intra-procedural, i.e., local to a method. Extending the technique to support inter-procedural analysis is part of our ongoing work.

To evaluate the efficiency and scalability of our presented approach we im- plemented an analysis for Java to detect dead assignments to local variables. The control-flow framework is less than 300 lines of code (LOC), and the data- flow framework is less than 30 LOC. The dead-assignment analysis adds an additional 8 LOC which gives us all in all less than 340 LOC. We ran the dead- assignment analysis on real Java applications of sizes around 40000 LOC, with execution times less than 9 seconds, including static-semantic checking, e.g., name binding, type checking, etc. Initial experiments indicate that there is little difference in execution time when comparing our declarative implemen- tation of data-flow analysis to an imperative implementation using explicit fixpoint iteration.

The rest of this paper is structured as follows. We first describe the im- plementation of the control-flow analysis in Section 2. Then we present the data-flow analysis in Section 3 and show how both analyses can be used to analyze real-life applications in Section 4. We compare our work to related approaches in Section 5 and conclude and outline future work in Section 6.

its children. An IfStmt has a condition Expr,a Then branch, and an optional Else branch. A WhileStmt has a condition Expr and a Stmt which is executed each iteration in the loop. Certain Exprs can act as Stmts and we therefore introduce an ExprStmt turning an expression into a statement. The value of an AssignExpr is its RValue and the LValue is assigned that value as a side- effect. A VarAccess refers to a variable and can act as both an LValue and an RValue. A MethodAccess is a method invocation with a list of arguments. A more thorough introduction to the abstract syntax definition is available at [2].

The successor to a BlockStmt is the first contained statement or the following set if the block is empty. The BlockStmt acts like a mediator giving each contained statement permission to execute in order. If statement i in a Block completes then the successor is statement i + 1, unless i is the last statement in which case the block completes and gives control to the following set.

The first rule declares a collection attribute (coll) called pred for Stmt nodes. Its value is of type Set, and is defined as the call to empty (a method on Set) combined with a number of contributions, each added by a call to add (also a method on Set). (The contributing method of a collection attribute, add in this case, must be such that the order of adding the contributions does not matter.)

The second rule defines the contributions (contributes ... to ... for each). This rule says that a Stmt contributes itself (this) to the predecessor set (Stmt.pred) of each of its successors (succ). A more detailed presentation of collection attributes and their evaluation in JastAdd is available in [11].

We use synthesized attributes to propagate information upwards in the AST. For example, sets of unmatched throw statements can be acquired via an attribute called uncaughtThrows defined for all nodes of type Stmt. In- formation about, e.g., enclosing TryStmts, are broadcasted downwards in the AST using inherited attributes such as enclosingTryStmt. These synthesized and inherited attributes are matched against each other. For example, the set given by the uncaughtThrows attribute is matched against catch clauses in the closest enclosing try statement given by the enclosingTryStmt attribute. If no match is found, the control flow is directed to the finally block of the enclosing TryStmt, if there is such a block, otherwise it is passed on to the next enclosing TryStmt, and so on.

Similar techniques are used to deal with break, continue and return statements. For example, after a break statement has been executed, all enclosing finally blocks between the break statement and its enclosing target statement, e.g., a while statement, need to be executed before the target statement. The control flow for a return statement is just a special case of this scenario, with the exit node as the constant target statement.

To evaluate the efficiency and scalability of our approach, we have imple- mented a simple analysis for Java which detects dead assignment of local variables, i.e., the assignment of variables whose values are not used later in the program. This analysis can easily be added as an extension to the liveness analysis described in the previous section. We use the following definition to detect dead assignments:

To collect all dead assignments in a compilation unit, we add a collection attribute deadCode() to the CompilationUnit AST node. The dead assign- ments contribute themselves to the collection of their compilation unit using a contributes clause. The reference to the compilation unit is propagated to the statement nodes using an inherited attribute called enclosingCompilationUnit.

Soot, [14], is a framework for optimizing, analyzing, and annotating Java bytecode. The framework provides a set of intra-procedural and whole pro- gram optimizations with a wider scope than the analyses presented in this paper. Soot is based on several kinds of intermediate code representations, e.g., typed three-address code, and provides seamless translations between the different representations. Java source code is first translated into one of these representations in which some high-level structure is lost. The control-flow and data-flow frameworks in Soot are indeed quite powerful with reasonably small APIs. A major difference, as compared to our approach, is that the Soot approach is not declarative and therefore relies on manual scheduling when combining analyses, or adding new analyses as new specializations of the framework.

We have shown how reference attributed grammars augmented with cir- cular attributes and collection attributes provide an excellent foundation for declaratively specifying control-flow and data-flow analysis. The specifications are concise and close to text book definitions, yet the generated analyzers are sufficiently efficient for real applications. The specifications are also extensible in that the analyses can be extended modularly when new features are added to a language.

There are several interesting ways to continue this work. The design ideas and frameworks presented in this paper are general and it would be interesting to see how they extend to more advanced analyses, e.g., object-oriented call graph construction and inter-procedural points-to analysis. We already have promising work in this direction, for example simple whole program devirtual- ization analysis [11]. We would also like to design and implement declarative frameworks for other traditional backend analyses such as translation to SSA- form. Another interesting area would be to apply the same techniques to do domain-specific source level analyses, for example, enforcing framework conventions.

