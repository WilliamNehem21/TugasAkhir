The use of Frege-Russell style definite descriptions for giving meaning to functions has been long established and we investigate their use in the development of Functional Programs and from these to the development of correct imperative programs. In particular, we investigate the development of a functional program for a problem, "Odd powers of odd integers", discussed by Dijsktra. If the correctness of termination is not a concern then it is straightforward to develop a partially correct program. Further properties of the specification are needed to develop a totally correct program.

The use of definite descriptions dates back to Frege and Russell [13] and also to fur- ther development by Quine [12] and Scott [14]. The use and definitions of definite descriptions are explained in Kalish and Montague [9]. In this article we consider reusing definite descriptions in the development of functional programs. As asser- tions have a central role in the development of imperative programs as promoted by Dijkstra [5] and Gries [8] and the Refinement Calculus [11], we consider the role of definite descriptions in the development of functional programs which can then be further developed to imperative programs.

If proof of termination is not a concern then a very straightforward partially correct program can be easily developed. Proving termination uses induction and from the induction proof a simple functional program is derived. Based on this functional program, a totally correct imperative program is developed similar to that given by Dijkstra. Further properties of the specification are derived using the functional program and an alternative functional program is derived. While the alternative functional program is straighforward, its development into an imperative program is not. This development involves the tranformation of linear recursion to an appropriate tail recursive form which can then be directly transformed to imperative programs with the tail recursive programs providing the invariants for the associated loops.

The loop in this imperative program iterates through the odd integers until it reaches an x such that 2k (xp  r) x < 2k. When tested the program halts for the given inputs but testing is not enough to prove correctness. If the loop terminates then the program will give the correct result.

