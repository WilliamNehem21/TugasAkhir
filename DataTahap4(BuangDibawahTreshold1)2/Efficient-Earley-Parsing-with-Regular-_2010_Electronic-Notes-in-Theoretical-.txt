We present a new variant of the Earley parsing algorithm capable of efficiently supporting context-free grammars with regular right hand-sides. We present the core state-machine driven algorithm, the translation of grammars into state machines, and the reconstruction algorithm. We also include a theoretical framework for presenting the algorithm and for evaluating optimizations. Finally, we evaluate the algorithm by testing its implementation.

Theoretically, our parsers are most closely related to the augmented transition networks (ATNs) of Woods [13], which also handle regular right sides directly, and which have previously been used for Earley parsing [2]. Our formalism uses a new kind of finite-state transducer which allows us to express some optimizations which significantly improve performance over ATNs. Some of these optimizations are similar to ones used by the Earley parsers of Aycock and Horspool [1], which do not directly handle regular right sides.

tomaton. We formalize the relationship between grammars and parsing transducers and specify sufficient conditions under which a given transducer will parse the lan- guage of a given grammar. In Section 3, we present an algorithm for constructing an appropriate transducer given a grammar as input. In Section 4, we present a deter- ministic, Earley-style, recognition algorithm based on parsing transducers and show that, for a given transducer, it recognizes the same language as the nondetermin- isitic pushdown algorithm. We describe how to adapt the algorithm for parsing and present an algorithm for parse reconstruction in Section 5. We evaluate the parsing algorithm by comparing its performance to previous approaches in Section 6, and discuss related work in Section 7.

Earley parsing is a top-down parsing method that can parse any context-free lan- guage [5]. It performs a breadth-first search of all possible leftmost derivations of the input string. Earley parsing has an upper bound of O(n3), where n is the size of the input, and Earley showed that his algorithm works in O(n2) time for unam- biguous grammars, and in linear time for a large class of grammars. Our version of Earley retains the O(n3) upper bound.

[1] to handle regular right sides. It is also similar to the work of Scott [10], who showed how to efficiently modify the traditional Earley algorithm to construct a shared packed parse forest (SPPF). We discuss forest reconstruction in Section 5.3.

The first step in reconstruction comes during the parsing process itself. We extend the algorithm of Section 4 to construct an (Earley) parse graph during parsing. Each node of the graph corresponds to an Earley item in an Earley set. Directed edges from a node describe how rules were used during parsing to add the Earley item to the Earley set.

predecessor links until reaching an item with no links, which must be a callee of some call. While traversing links, complete_children reconstructs subtrees when nonterminal links are encountered. Subtree reconstruction is accomplished with a recursive call to mk_parse_tree. Some items may have been the target of more than one transition, resulting in multiple links. In this case, the algorithm nonde- terministically chooses a single link to follow with the abstract CHOOSE function.

We have argued that the Earley graph embodies all of the parse trees for an input, and have just described how to reconstruct a parse tree from the Earley graph. However, we may wish to have a more accessible representation of the parse trees than the Earley graph: a parse forest. We have implemented a parse forest recon- struction algorithm, but do not have space to describe it here in full. Instead, we will discuss some subtleties that arise due to our use of parsing transducers.

