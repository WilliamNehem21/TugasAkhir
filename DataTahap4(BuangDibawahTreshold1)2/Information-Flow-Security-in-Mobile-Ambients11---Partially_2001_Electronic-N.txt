In this paper, we focus on Multilevel Security, a particular Mandatory Access Control security policy: every entity is bound to a security level (for simplicity, we consider only two levels: high and low), and information may just flow from the low level to the high one. Typically, two access rules are imposed: (i) No Read Up, a low level entity cannot access information of a high level entity; (ii) No Write Down, a high level entity cannot leak information to a low level entity. Sometimes, these two access controls are not enough as information may be indirectly leaked, through, e.g., some system side-effect: a typical example is represented by a resource shared among the security levels

The scenario. We will consider information flow security in the scenario of mobile systems. This particular setting, where code may migrate from one security level to another one, complicates even further the problem of capturing all the possible information leakages. As an example, confidential data may be read by an authorized agent which, moving around, could expose them to unexpected attacks. Moreover, the code itself could be confidential, and so not allowed to be read/executed by lower levels.

Verification. The information flow property of interest is defined in terms of the possibility for a confidential ambient/data to move outside a security boundary. We then give a very simple syntactic property and we prove, by exploiting the control flow analysis proposed in [8], that it is sufficient to imply the absence of unwanted information flows.

data hdata (note that data are abstractly represented as ambients). This process is an example of a direct information flow. Indeed, P may evolve to containerb[ ] | hdatah[ ] | Q, where the high level hdata is out of any boundary ambient, thus vulnerable and potentially accessible by any ambient or process in Q. 3 This flow of high level data/ambients outside the security boundaries is exactly what we intend to control and avoid.

In distributed and mobile systems, it is unrealistic to consider a unique boundary, containing all the confidential information. As an example con- sider two different sites venice and lipari, each with some set of confidential information that need to be protected. This can be modelled by just defining two boundary ambients, one for each site: veniceb[ P1 ] | liparib[ P2 ] | Q. In order to make the model applicable, it is certainly needed a mechanism for moving confidential data from one boundary to another one. This is achieved through another boundary ambient which moves out from the first protected area and into the second one. An example follows:

3 Note that the presence of an ambient may be tested by trying to open it or by entering and then exiting from it. A low level ambient may thus test if hdata is present. This may be seen as reading such high level information.

Note that the filter behaves correctly with respect to multilevel security rules, i.e., it only enters boundaries. In particular, this means that it will never transport high level data outside the security boundaries. However, if we perform the control flow analysis we obtain the following least solution:

Note that h appears at the environment level, showing a potential attack. However, as observed before, there is no execution leading to such a situation. The reason why the analysis looses precision here, is due to the fact that h enters a m ambient which might be opened at the environment level, but the analysis does not capture the fact that h enters m only after it has crossed the boundary and can never return back.

