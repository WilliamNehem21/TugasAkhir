Autowrite is an experimental software tool written in Common Lisp Oriented System (CLOS) which handles term rewrite systems and bottom-up tree automata.  A graphi- cal interface written using McCLIM, (the free implementation of the CLIM specification) frees the user of any Lisp knowledge. Software and documentation can be found at http://dept-info.labri.u-bordeaux.fr/~idurand/autowrite. Autowrite was initially de- signed to check call-by-need properties of term rewrite systems. For this purpose, it implements the tree automata constructions used in [11,4,6,14] and many useful operations on terms, term rewrite systems and tree automata.

Autowrite was initially designed to check call-by-need properties of most of the examples presented in [7]. Most of the time no alternative proofs exists. It implements the tree automata constructions of the call-by-need theory and many operations on terms, term rewrite systems and tree automata.

In the first version of Autowrite [5], only the call-by-need properties and a few other simple properties were available from the graphical interface. This new version of Autowrite includes many new functionalities. There are new functionalities related to TRSs, but the most interesting new feature is the possibility to directly handle (load, save, combine with boolean operations) bottom-up tree automata. In addition, we have added on-line timing informa- tion. Since the first version the run-times have been considerably improved due to better choices of data structures. The new features allowed testing many properties of examples presented in [8] for which no easy proof can be written.

A ground term does not contain variables. A linear term does not contain multiple occurrences of the same variable. A redex is an instance of the left- hand side of a rewrite rule. A normal form is a term without redexes. The set of all ground normal forms of a TRS R is denoted by NF(R). An eTRS is left-linear (right-linear, linear ) if the left-hand sides (right-hand sides, both

left and right-hand sides) of its rewrite rules are linear terms. An eTRS is right-ground (ground ) if the right-hand sides (left and right-hand sides) of its rewrite rules are ground terms. A left-linear TRS without critical pairs is orthogonal. Orthogonal TRSs have the property that every term has at most one normal form.

Next we define the approximation mappings s, nv, and gr. Let R be a TRS. The strong approximation [10] s(R) is obtained from R by replacing the right-hand side of every rewrite rule by a variable that does not occur in the corresponding left-hand side. The non-variable approximation [15] nv(R) is obtained from R by replacing the variables in the right-hand sides of the

Then we check that the current term is not recognized by the current au- tomaton (as it is not a normal form). Next we compute the complement of the current automaton (which recognizes reducible terms) and check that the current term is recognized by the complement automaton. Finally, we check that the complement automaton does not recognize the empty language.

The main idea is to compute the automaton incrementally. We start build- ing the rules having a constant left-hand side. This gives the first set of ac- cessible states. Then we compute the rules whose left-hand sides contain the current accessible states which may give new accessible states. We stop when no new accessible state is created.

