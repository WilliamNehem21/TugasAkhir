The concept of parser combinators has a long history in functional pro- gramming [11,13,21]. From an object-oriented perspective, the basic idea is to view the operators of BNF as methods, known as combinators, that oper- ate on objects representing productions of a grammar. Each such object is a parser that accepts the language generated by a particular production. The results of the combinator invocations are also such parsers.

Here slots are initialized to their corresponding parser, so each slot defi- nition gives a production rule of the grammar. The rules for digit and letter are in direct correspondence to the grammar. They use the inherited util- ity method charBetween:and: that produces a parser that accepts characters within a given range.

The rule for id is the same one we saw before. At this point, however, it becomes evident that the lack of distinction between lexing and parsing is a bit of a problem. Traditionally, we rely on a lexer to tokenize the input. As it does that, it does away with whitespace (ignoring languages that make whitespace significant) and comments. This is dealt with by the operator, tokenFor:, that takes a parser p and returns a new parser that skips any leading whitespace

and comments and then accepts whatever p accepts. This parser will also attach start and end source indices to the result, which is very handy when integrating a parser into an IDE. It is useful to define a production identifier that produces such tokenized results.

One complaint about using closures as arguments for parser combinators is that programmers may mistakenly pass parsers as arguments directly. In fact, this is a non-issue. Such mistakes were dynamically detected by our earlier framework. Even though detection was dynamic, it occurred during the construction of the grammar, not during actual parsing. The effect was essentially the same as with static checking. Moreover, it would be trivial to allow combinators to accept either parsers or closures.

Nevertheless, the use of closures detracts from the clarity of the grammar. We are fortunate that the closure syntax in Smalltalk (and hence Newspeak) is very lightweight, but we still prefer to avoid closures altogether. The use of closures introduces a disturbing asymmetry, where the receiver of a combinator is a parser, but its argument is a closure that evaluates to a parser.

The ability to define a parser by writing a program that so closely corresponds to the grammar is attractive. However, just accepting a language is not all that useful. Typically, some processing needs to be performed (e.g., to produce an AST as a result).

To address the need for processing, we introduce a new operator on parsers, wrapper:. The result of this operator is a parser that accepts the same language as the receiver. However, the result it produces from parsing differs; during parsing, the results produced by the receiver are passed to a closure which wrapper: takes as its sole parameter. The overall result is the the result returned by the closure - typically an abstract syntax tree.

This is illustrated above. The grammar productions for id, identifier and returnStatement have been augmented with processing using wrapper:. The grammar remains clearly distinguishable, with the AST generation on separate lines. However, it is preferable to keep the grammar completely separated. We will therefore move the AST generation code to a subclass, where the grammar production accessors will be overridden as shown below.

Some parser combinator libraries offer support for naming parsers. This makes it easier to debug errors in the grammar. It can also be useful to print out the name of the production when reporting errors. Unfortunately, naming the productions in this way adds clutter and obscures the grammar. It also forces the programmer to repeat information already given in the specification, for example:

Consider that ExampleParser1 is not a subtype of ExampleGrammar1. For example, in ExampleParser1, returnStatement returns a parser that returns Re- turnStatAST, whereas in ExampleGrammar1 the returnStatement method re- turns a parser that returns a collection. These types are unrelated. In general, every production in the grammar has a corresponding method, and in most cases, the type of the subclass method is not a subtype of the type in the superclass. In most statically typed object-oriented programming languages, this situation is illegal. Despite this, our design is correct and causes no type errors during execution.

In our first formulation, the grammar is represented by class ExampleGram- mar1, which has one type parameter for each production in the grammar. To keep our example short, we have only two non-lexical productions, and two type variables. A realistic grammar would include dozens of productions, with dozens of type variables.

The type of this, This in ExampleGrammar1 is declared to be an instance of AbstractGrammar. The type variables are passed through; ExampleGrammar1 does not depend on the return types of the parsers it creates, so these type variables play the role of wildcards. Naming them explicitly will allow us to typecheck the subclass that creates the AST, ExampleParser1.

Below we illustrate an approach that eases the notational burden some- what. We can typecheck the superclass against a self type that returns parsers with an unknown return type, using the wildcards construct of Java 5 [19]. We use type selection on the type this in the return type ExampleGram- mar1.returnStat() to make that type vary according to the return type actually declared by the expression() method in subclasses. This enables us to obtain an accurate type for super in ExampleParser1. Selection on this provides us implicitly with the necessary type parameterization, allowing this approach to scale to real grammars where the previous one does not.

level, from lowest to highest. The base case is given as the second parameter. Another possible solution is for the parser to refactor itself dynamically to eliminate left recursion. Dynamic refactoring is relatively easy in Smalltalk- like languages, thanks to the rich reflective system and the absence of manda-

In principle, parser combinators can be used to parse context-sensitive gram- mars as well. In a functional setting, monadic parser combinators [11] are necessary to achieve such behavior, but in an imperative language, parsers can communicate shared state. Hence we see no serious difficulty supporting context sensitive parsing, though we have not yet had a need to implement one.

Andrew Black developed a parser combinator framework in Smalltalk [2]. That framework was designed to be as similar as possible to a monadic parser combinator framework in Haskell for pedagogical reasons. It does not support the separation of the grammar from processing.

