We are particularly interested in studying the Pure Pattern Calculus (PPC) [15] and the novel features it introduced in the field of pattern calculi, namely path poly- morphism and pattern polymorphism. The former refers to the possibility of defining functions that uniformly traverse arbitrary data structures, while the latter allows to consider patterns as parameters that may be dynamically generated in run-time. Developing such a calculus implies numerous technical challenges to guarantee well- behaved operational semantics in the untyped framework. Recently, a static type system has been introduced for a restriction of PPC called Calculus of Applicative Patterns (CAP) [28], which is able to capture the path polymorphic aspect of PPC. Moreover, type-checking algorithms for such a formalism has also been studied [10], as a first step towards an implementation of a prototype for a typed functional pro- gramming language capturing such features. Following this line of research, studies on the definition of normalising strategies for PPC have been done as well [3,4]. Such results are ported to CAP by means of a simple embedding [27] where the static typing discipline gives further guarantees on the well-behaved semantics of terms.

vice-versa. Moreover, the correspondence between HRS and ERS has already been established [25]. The composition of such translations might derive a higher order system `a la de Bruijn capturing the features of PPC. However, this would result in a rather indirect solution to our problem where many technicalities still need to be sorted out.

Proper translations from PPC to PPCdB and back are introduced. This functions preserve the matching operation and, hence, the operational semantics of both calculi. Moreover, they turn out to be the inverse of each other. This leads to a crucial strong bisimulation result between the two calculi, which allows to import many known properties of PPC into PPCdB, for instance confluence and the existence of normalising strategies.

ever, the occurrence of x in x y is not bound by the inner abstraction, as it is excluded from [y], acting as a place-holder in that pattern. It is the outermost abstraction that binds both x in the inner pattern and x in the outermost pattern. This is graphically depicted above.

It is worth noticing that this substitution should be interpreted in the context of a redex, where a binder is removed and its bound index substituted. This forces to update the free indices, that might be captured by an outermost abstraction, as done by the first case of the substitution over a variable ij . Hence, preserving the correct bindings.

This section introduces the novel Pure Pattern Calculus with de Bruijn indices (PPCdB). It represents a natural extension of de Bruijn ideas to a framework where a binder may capture more than one symbol. In the particular case of PPC there are two kinds of captured symbols, namely variables and matchables. This distinction is preserved in PPCdB while extending indices to pairs (a.k.a. bidimensional indices) to distinguish the binder that captures the symbol and the individual symbol among all those captured by the same binder.

We start with the translation from PPC to PPCdB. It takes the term to be translated together with two lists of lists of symbols that dictate how the variables and matchables of the terms should be interpreted respectively. We use lists of lists since the first dimension indicates the distance to the binder, while the second identifies the symbol among the multiple bound ones.

In this section we prove the simulation of one calculus by the other via the proper translation and, most importantly, the strong bisimulation that follows after the invertibility result (cf. Thm. 4.9). This strong bisimulation result will allow to port many important properties already known for PPC into PPCdB, as we will discuss later.

We start by simulating PPC by PPCdB. The key step here is the preservation of the matching operation shown for J ) in Lem. 4.4. It guarantees that every redex in PPC turns into a redex in PPCdB too. Then, the appropiate definition of the operational semantics given for PPCdB in Sec. 3 allows us to conclude.

van Oostrom, V. and F. van Raamsdonk, The dynamic pattern calculus as a higher-order pattern rewriting system, in: 7th International Workshop on Higher-Order Rewriting, HOR 2014, Held as Vienna Summer of Logic, VSL 2014, Vienna, Austria, July 9-24, 2014. Proceedings, 2014.

