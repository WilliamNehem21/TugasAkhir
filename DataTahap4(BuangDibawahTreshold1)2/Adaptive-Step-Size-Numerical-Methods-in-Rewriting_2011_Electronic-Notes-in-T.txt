In this paper we describe the integration of adaptive-step-size numerical meth- ods, where the duration of the small time steps is chosen dynamically. Adaptive- step-size approximations have the advantages of: (i) making the analysis more pre- cise by making the time step smaller when needed either to come close to a time instant when a discrete transition must be taken or when it is needed to maintain a desired precision of the approximation, and (ii) making the analysis more efficient by increasing the step size whenever the approximation allows it. In particular, adaptive step-size gives the user to possibility to define his/her own error tolerance to balance between desired precision and computational efficiency.

We develop an adaptation of the Runge-Kutta-Fehlberg 4/5 method (see e.g. [8]) that allows us to approximate the continuous behavior of our models with dynamic step-size, based on the error tolerance provided by the user. We describe the imple- mentation of the adapted method in Real-Time Maude. Furthermore, we compare the results and execution times of both simulation and model checking using differ- ent error tolerances on two thermal systems with realistic parameters.

The paper is structured as follows: Section 2 gives an overview of Real-Time Maude. Section 3 briefly explains our approach for modeling hybrid systems in rewriting logic. Section 4 presents the adaptation of the Runge-Kutta-Fehlberg 4/5 method for our purposes, and Section 5 describes its implementation in Real-Time Maude. The case studies are summarized in Section 6 and concluding remarks are given in Section 7.

There are two sources of errors in the above approach. Round-off errors are due to the limitations of computers in representing numbers. Discrete-time approx- imation errors originate from the fact that the approximations y1, y2, ..., yN deviate from the exact values y(t1), y(t2), ..., y(tN ). If we assume that an exact arithmetic

Given a numerical method of a certain order, any other numerical method of a higher order can be used to obtain an estimate of the local error. However, com- puting a second approximation using a second methods in each time step may be computationally expensive [1]. This problem can be avoided by using methods that share function values which are known as embedded pairs.

The Runge-Kutta-Fehlberg order 4/5 method (RKF45) [8] makes use of such embedded pairs. It uses a 5th order method to estimate the local error of a 4th order method. In each step, for the approximation with the 4th order method 5 values (slopes) must be calculated that are used to compute yn+1 as a weighted sum. The 5th order method, used for the error estimation, needs 6 slope values. However, 5 of them are already computed by the 4th order method, thus only one slope must additionally be determined.

evaporating, or condensing. The change from a main phase to a phase transition occurs when the temperature reaches a given value, whereas a change from a phase transition to a main phase happens when the value of the heat accumulated during the phase transition divided by the mass of the entity reaches a given value called the latent heat. The attribute heatTrans stores the accumulated heat of the water in the phase transitions. The remaining attributes are needed for the computation of the approximations.

The mode determines the computation mode for the continuous dynamics. For water, the continuous dynamics of the temperature is the same in all three main phases, whereas the temperature does not change during phase transitions. In addition to the default computation mode for the main phases, we add the mode phaseTrans for phase transitions.

tion; area is the area of the interaction; hfr-p1 to hfr-p5 are auxiliary attributes used for the computation by the RKF45 method. The subclasses have additional interaction-specific attributes. For conductivity, thermCond is the thermal conduc- tivity of the material and the thickness is the thickness of the material through which the conduction occurs.

The attribute numMethod specifies which numerical method is used. The at- tribute stepSizeDef stores the initial step-size, and stepSizeCur the current step- size. The stepSizeType determines if fixed or adaptive step-size is used. The errorTol defines the error tolerance in adaptive-step-size computation (assuming that we use a single tolerance value). The compStepSize defines which step-size computation technique is used. The safetyFactor defines a fraction of the lo- cally optimal step size which may be used to reduce the approximation error. The limitStepSize, stepSizeMin, and stepSizeMax limit the value of the step size. The limitAdjustRate, adjustRateMin, and adjustRateMax are used to limit increasing or decreasing rate of the step size. The errorControl chooses either error per step or error per unit step for controlling the step size. The localExtrapolation specifies whether to use the extrapolation technique in the numerical computation.

The results shows that the changes of the coffee temperature value from one time point to another correlate to the error tolerances. However, the execution of a discrete event depends on the execution strategy for hybrid behaviors. For the implementation presented in this paper, the check of the occurrence of a discrete event is performed before the time step is taken, but a discrete event that should occur between time tn and tn+1 is executed at tn+1.

In this paper we describe how the adaptive-step-size technique based on the Runge- Kutta-Fehlberg 4/5 method can be adapted to an effort-flow-based modeling of interacting physical systems, and how the methods can be implemented in Real- Time Maude. We have compared the precision and execution times for some thermal systems, and showed that decreasing the error tolerances increases both the accuracy of the approximation of the continuous behavior and the computational effort. We also found a weakness in our execution strategy of the hybrid behavior when using adaptive step size techniques.

