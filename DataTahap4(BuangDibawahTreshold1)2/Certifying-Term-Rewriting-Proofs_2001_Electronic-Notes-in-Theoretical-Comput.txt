Term rewriting has been shown to be a good environment for both programming and proving. For analysing and debugging rule-based programs, we propose in this work a formalism based on the rewriting calculus with explicit substitutions (  -calculus). This formalism also allows us to build the proof terms of rewrit- ing derivations. Therefore, term rewriting proofs can be exported to other sys- tems by translating them into the corresponding syntaxes. That is, using a proof checker, one can certify these proofs and vice versa, this method allows us to get term rewriting in proof assistants using an external system. Our method not only works with syntactic rewriting but also with rewriting modulo a set of axioms (e.g. associativity-commutativity).

In a proof assistant, formal proofs are composed of deduction steps performed by the user with the possible help of tactics. These steps should be memo- rised if one wants to check the proofs and to communicate them with other systems [24,14]. In some proof assistants (e.g. ALF, Coq, LEGO), the proof terms of all deduction steps are explicitly stored. In other systems, proof term memorising was not given the rst priority but some attempts have been done to get this feature, for example, in Isabelle [6] or in HOL [35].

Hence, proof assistants must, in this situation, trust programming en- vironments and consider the computations they perform as axioms in their proofs. This approach is not completely reliable since these computations are not checked. In other words, when correctness is crucial, rule-based programs should return the proof terms of their computations.

In this paper we present a representation of the proof term of rewriting derivation based on  -calculus. We have generated the proof term of syntactic rewriting and AC rewriting in ELAN. The translation of this proof term into Coq-syntax is described and is proved sound. This translation has also been implemented in ELAN. As a result, we get the corresponding proof term for Coq proof assistant. This proof term is then formally checked by Coq to ensure correctness. This work allows one to certify term rewriting proofs in ELAN and hence, to get term rewriting in Coq using ELAN.

Var(l). We call l and r respectively the left hand side (LHS) and the right hand side (RHS) of rule. A set of rewrite rules R is called a term rewriting system (TRS). Let R be a TRS. The term t rewrites to the term s in one rewrite step if there exist some rule l ! r in R, position p in t and substitution such that: tjp = l and s = t[r ]p. If p is not empty, then this step is called non-root. We denote a rewrite step in R by t !R s and the re exive-transitive

In the term syntax, t ! u denotes a rewrite rule (a.k.a. -abstraction), [t](u) represents the application of t on u, the application of substitution s on t is denoted by binary operator thsi. The substitution syntax is composed of the

Lemma 4.5 (Rewriting derivation) If 1; :::; n are respectively a proof term of the derivations t1 ! t2,...,tn ! tn+1, then x ! [ n](::: [ 1](x) :: :) is a proof term of the n-steps derivation t1 ! ::: ! tn+1

The proof of this lemma consists simply in applying the tactic Rewrite x = y on t. After being proved, this lemma can be used as a new constant for building Coq proof terms. Let s and v be two terms of type A. If  is a proof of s = v, then (ctx t s v ) is a proof of t[s]p = t[v]p.

where s is any  -term which represents the proof term of a rewrite step (see section 4); CT X is a fresh constant representing the hole in a context; concat f inherits the arity from f 2 F and combines the proof terms at disjoint branches of f ; trans concatenates the proof terms of two consecutive derivations; ref l represents a proof by re exivity; ctx represents the proof term of a non-root rewrite step. The introduction of ctx aims to separate the context from the proof term of a rewrite step and hence, to reduce the size of proof terms in Coq-syntax as described in section 5.3.

in ELAN a proof term of proposition t = s in Coq. We rst implement a tracing mechanism for syntactic rewriting and AC rewriting in ELAN. The generated trace includes the rewriting context, the used substitution and the applied rule in each rewrite step. We next transform the trace into a proof term in

this proof term in order to reduce its size by the rules in gure 2. A set of lemmas and their proofs in Coq is then generated from this normalised proof term via the translation described in section 6. These lemmas include the main claim which states that t = s. Finally, all generated lemmas are automatically checked in Coq.

This TRS is expressed in a natural way by the ELAN speci cation in g- ure 5. Syntactic function symbols and their arity are described in section Ops. Section ACOps contains the AC function symbols (with arity 2). In section Type, we need to precise the carrier type used in Coq since this type is re- quired in building Coq proof terms. Section Vars declares the variables used in de ning rewrite rules. These rules are given in section Rules with their label in the following syntax: [label] LHS ! RHS.

Another use of proof terms is to analyse and to debug ELAN programs. To this end, not only the proof terms of successful rewrite steps but also that of failure should be stored in order to understand why a rule or a strategy failed to apply on some term. At this stage, we need to deal with the space problem due to the size of proof terms. Sharing gives a means to overcome

