Reliable multicast protocols have been developed as a means to provide reliable ordered delivery of messages and membership services to a group of processes. One challenge in building a multicast protocol for use over a public network is security. Services such as confidential authenticated communication among coalition members,authenticated group decisions,or the secure administration of group membership and access control are at the core of secure and reliable group management. New protocols and frameworks have been designed to create multicast groups on a network and support secure group communication

There have been only a few results on the formal analysis of group man- agement protocols (e.g., Pereira and Quisquater analyzed A-GDH [12] and Meadows discovered security flaws in early versions of GDOI [11]). The anal- ysis of group management protocols poses new challenges for formal analysis techniques. New language features and models are necessary to appropriately capture the concepts of such protocols. MuCAPSL (Multicast Common Au- thentication Protocol Specification Language) and its intermediate language MuCIL (MuCAPSL Intermediate Language) have been designed to meet these needs. The underlying design principles are

MuCAPSL and MuCIL are extensions of the CAPSL and CIL protocol analysis effort for unicast protocols [5,6,4].	MuCAPSL provides high-level specification concepts for multicast security protocols,such as message passing using unicast and multicast addressing, group membership data, and basic cryptographic operators. MuCIL is closer to state-transition representations of protocols. It serves two purposes: to help define the semantics of MuCAPSL in terms of multiset term rewriting,and to act as an interface through which protocols specified in MuCAPSL can be analyzed by using a variety of tools. The emphasis in this paper is on MuCIL and its term rewriting semantics.

We will illustrate the ideas of modeling group communication protocols with the help of the Group-Diffie-Hellman (GDH) protocol suite. An overview of GDH is given in Section 2. A semantic framework for multicast protocols is provided in Section 3. Rewrite rule generation is covered in Section 4. Section 5 describes future work.

We illustrate the semantic model with the help of the Group Diffie-Hellman (GDH) protocol, which served as the basis for the Cliques protocol suite [13,14]. GDH [13] is an extension of the two-party Diffie-Hellman key agree- ment scheme to an arbitrary group size. The GDH protocol suite consists of a key distribution algorithm and protocols for member addition and deletion. For the purposes of this paper, we chose the key distribution protocol as an example because it incorporates unicast messages addressed to a particular group member as well as broadcast messages addressed to all group members. The group key in GDH is computed from secret contributions from each

These diagrams abstract away many important details, such as how re- ceived messages are stored, when new key contributions Ni are computed, and how messages are composed. Those details are part of the MuCAPSL specification and can be found in [7]. The graphical notation is only meant to give an overview of the relevant protocol roles and to illustrate the main message flow and message content.

A message fact has the form mmsg([...]), where the terms represent the message fields. We do not keep sender or receiver addresses in message facts because these addresses make no difference from the viewpoint of security analysis, since an active attacker can always forge addresses. There is also no difference between a unicast message and a multicast message, since an attacker can either rebroadcast a unicast message, or prevent any message, multicast or not,from reaching more than one,or any,destination.

Here, M1 is not a role name, but rather a variable of type GDHAgent, even though this identifier was borrowed from the role name given in the specifi- cation. The role name KeyDistM1 is a constant produced automatically by combining the protocol and role names. We have to do this because role names are not unique across protocols. This example has no component terms be- cause the role does not need any session-specific memory; it uses and modifies the group member memory only.

Because group member state components persist across protocol sessions, they are never considered undefined, but are always treated as held. How- ever, unlike agent state variables, they may be updated during any protocol session. In fact, they could conceivably be updated several times by one role or concurrently by two or more agents of the same group member.

In both cases, the agent state label is incremented. A receive transition may also modify components of the member and agent states. Note that the mem- ber and agent state facts are tied together by reference to the same group member.

According to the semantics of rule firing, a receive rule removes the mes- sage fact from the multiset. If the message is supposed to be multicast, how does more than one group member receive it? There are three choices for the answer. One possibility is to change the rule to include the same message fact on the right,so that it will be preserved for other recipients. This redundancy was considered undesirable because it clutters the rule generator output. Al- ternatively, we could just make an exception in the MuCIL rule semantics for message facts. Finally, we observe that no exception is necessary to pre- serve state reachability, since the standard attacker is assumed to be able to duplicate messages.

The implementability algorithm determines what an agent must do to send or receive a message (multicast or unicast), and passes judgment on whether the explicit and implied actions are possible, given the current state of the agent. The state transition rules are, in effect, the product of the implementability algorithm. A failure of implementability implies that a rule cannot be generated that correctly models the event.

where M is of a subtype of GroupMember having attributes A,B,..., and so on. We assume that there is only one member state per principal and group. This assumption is important because it eliminates ambiguity as to which member state is affected by role transition rules. This uniqueness assumption should be expressed by the if-condition. It is awkward to express because it refers to the entire multiset of facts. The rule generator does not attempt to produce member initialization rules.

An assumption on member attributes serves the purpose of identifying which roles it may execute. For example, in GDH, role M1 is the only role possible when pos = 1. Assumptions constraining attribute values become if-conditions for the initialization rule for that role.

One might also ask whether it is possible to create more than one agent instance for the same role. This is possible with the formalism but usually considered undesirable. The protocol specification can prevent concurrent role duplication by explicitly adding a semaphore attribute to the member state. This sort of concern is described further below when we discuss the ABORT operation.

In the prelude, the most general object type is Object, and its most im- portant subtypes are Boolean and Field. An object of type Field can appear as a message content field. Field has a subtype Atom containing familiar ob- ject types such as Principal, Nonce, and Nat (natural numbers), and some cryptography-specific types such as Pkey (public key). Nonatomic fields are formed, for example, by concatenation using the constructor cat. The pre- lude declares the public-key encryption operator ped and the symmetric-key encryption and decryption operators se and sd. Arithmetic operations are defined on type Skey for finite-length symmetric keys.

where V in mmsg takes the place of at(A,N) in the message,and with updates an array by replacing one element at a given index. Notice that V is a new dummy variable of type Field. It is not allowable to receive an event at(A,N) if A is a state variable because state variables can be set only once, and that must be with an entire array object.

However,this is cheating,because there is no function type in MuCAPSL. Function symbols like F do not have a type,so update is not a real function, because it does not have a legal signature. Depending on the expressiveness of a tool or analysis technique,means to handle update predicates in rules have to be found individually in the context of each analysis technique or tool.

where M, R, N, and T are all variables,so that any single nonabort agent state is matched and terminated. The single-threaded property can be guaranteed by adding an invisible semaphore attribute,and modifying initialization tran- sitions (except for the Abort role) to test and set it, and terminating transi- tions to reset it. In MuCAPSL, giving a GroupMember subtype a MUTEX property causes the semaphore to be added by the translator.

To make MuCAPSL useful to protocol analysts,we need to make translation tools as well as documentation available. We are currently in the process of finishing the MuCAPSL-MuCIL translator that parses and typechecks Mu- CAPSL specifications and generates MuCIL rules for the protocol. In partic- ular, we will add an optimization stage to combine successive MuCIL rules when possible,as we have done for CIL.

