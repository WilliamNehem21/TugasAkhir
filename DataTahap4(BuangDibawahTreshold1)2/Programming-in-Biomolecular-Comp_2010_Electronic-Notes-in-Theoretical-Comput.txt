We put our contributions in context by quickly summarising some other computa- tional completeness frameworks. Key dimensions: uniformity; programmability; efficiency; simplicity; universality; and biological plausibility. (Not every model is discussed from every dimension, e.g., a model weak on a dimension early in the list need not be considered for biological plausibility.)

Biomolecular computation frameworks. We will see that the Turing- typical asymptotic slowdowns can be avoided while using a biomolecular computing model. This provides an advance over both earlier work on automata-based com- putation models (Turing machines, counter machines, etc.), and over some other

A number of contributions exist in this area; a non-exhaustive list: [1,3,7,10,8,11,12,17,20,21,25,26,30,31,5,33] The list is rather mixed: Several of the articles describe concrete finite-automaton-like computations, emphasising their re- alisation in actual biochemical laboratory contexts. As such their emphasis is not on general computations but rather on showing feasibility of specific computations in the laboratory. Articles [7,8,12,20,33] directly address Turing completeness, but the algorithmic or programming aspects are not easy to see.

What do we mean by a program (roughly)? An answer: a set of instructions that specify a series (or set) of actions on data. Actions are carried out when the instructions are executed (activated,. . . ) Further, a program is software, not hardware. Thus a program should itself be a concrete data object that can be replaced to specify different actions.

The program is activated (run, executed) by applying the semantic function [ ]]. The task of programming is, given a desired semantic meaning, to find a program that computes it. Some mechanism is needed to execute program, i.e., to compute [[program]]. This can be done either by hardware or by software

How to show Turing completeness of a computation framework. This is typically shown by reduction from another problem already known to be Tur- ing complete. Notation: let L and M denote languages (biological, programming, whatever), and let [p]]L denote the result of executing L-program p, for example an input-output function computed by p. Then we can say that language M is at least as powerful as L if

A popular choice is to let L be some very small Turing complete language, for instance Minsky register machines or two-counter machines (2CM). The next step is to let M be a biomolecular system of the sort being studied. The technical trick is to argue that, given any L-instance of (say) a 2CM program, it is possible to construct a biomolecular M -system that faithfully simulates the given 2CM.

There can be no pointers to data: addresses, links, or unlimited list pointers. In order to be acted upon, a data value must be physically adjacent to some form of actuator. A biochemical form of adjacency: a chemical bond between program and data.

On the other hand there exist available biochemical resources to tap, i.e., free energy so actions can be carried out, e.g., to construct local data, to change the program control point, or to add local bonds into an existing data structure. Biological analogs: Brownian movement, ATP, oxygen.

The above constraints suggest how to structure a biologically feasible model of computation. The main idea is to keep both program control point and the current data inspection site always close to a focus point where all actions occur. This can be done by continually shifting the program or the data, to keep the active program blob (APB) and active data blob (ADB) always in reach of the focus. The picture illustrates this idea for direct program execution.

In addition each blob has 8 cargo bits of local storage containing Boolean values, and also identified by numerical positions: 0, 1, 2,..., 7. When used as program, the cargo bits contain an instruction (described below) plus an activation bit, set to

A specific instruction set (a bit arbitrary). The formal semantics of instruc- tion execution are specified precisely by means of a set of 128 biochemical reaction rules in the style of [12]. For brevity here, we just list the individual instruction formats and their informal semantics. Notation: b is a 2-bit bond site number, c is a 3-bit cargo site number, and v is a 1-bit value.

Note: the APB-ADB bond * has moved: Before execution, it connected APB with ADB. After execution, it connects APBj with ADB, where APBj is the next instruc- tion: the successor (via bond S) of the previous APB. Also note that the activation bit has changed: before, it was 1 at APB (indicating that the APB was about to be executed) and 0 at ADBj. Afterwards, those two bit values have been interchanged.

data may move about, e.g., rotate as needed to keep their contact points adjacent (the APB and the ADB). For now, we shall not worry about the thermodynamic efficiency of moving arbitrarily large program and data in this way; for most realistic programs, we assume them to be sufficiently small (on the order of thousands of blobs) that energy considerations and blob coherence are not an issue.

There is certainly a close analogy between blob programs and a rudimentary machine language. However a bond is not an address, but closer to a two-way pointer. On the other hand, there is no address space, and no address decoding hardware to move data to and from memory cells. An instruction has an unusual format, with 8 single bits and 4 two-way bonds. There is no fixed word size for data, there are no computed addresses, and there are no registers or indirection.

The usual programming tasks (appending two lists, copying, etc.) can be solved straightforwardly, albeit not very elegantly because of the low level of blob code. Appendix A shows how to generate blob code from a Turing machine, thus estab- lishing Turing-completeness.

All instructions are currently in use in the self-interpreter, indeed all instructions appeared to be necessary in programming it. With the possible (but, we believe, unlikely) exception of the various swap instructions (SWL, SBS, SWP1, SWP3), we conjecture the instruction set to be parsimonious in the sense that no proper subset of the instruction set can be used to simulate the remaining instructions. A possible formal proof is being investigated.

The usual Turing machine has a fixed number of 1-dimensional tapes (though k- dimensional versions exist, for fixed k). Cellular automata as in [29,8,32] havea fixed 2-dimensional architecture. Dimensionality questions are not relevant to Minsky- style machines with a fixed number of registers, e.g., the two-counter machine.

indeed so large that dimensionality makes no difference: on any traditional model where data dimensionality makes sense, it would be an easy exercise to show that ptime = ptime3D. What if instead we study the class lintime of problems solvable in linear time (as a function of input size)? Alas, this smaller, realistically motivated class is not very robust for Turing machines, as small differences in Turing models can give different versions of lintime (Sections 18, 19, 25.6 in [19]). It seems likely though that the lintime class for blob machines is considerably more robust.

