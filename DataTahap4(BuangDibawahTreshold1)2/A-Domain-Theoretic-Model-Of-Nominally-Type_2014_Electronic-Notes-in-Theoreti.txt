To evolve and improve the type systems of mainstream object-oriented program- ming languages such as Java [18], C# [1], C++ [2], Scala [24] and others that utilize class name information in defining object types and OO subtyping, a precise math- ematical model of these languages is needed. A precise model of nominally-typed OOP allows accurate reasoning and analysis of these mainstream OO programming languages. Imprecise models, on the other hand, lead to inaccurate conclusions.

NOOP is a denotational model of nominally-typed OOP. Dana Scott invented and developed, with others including Gordon Plotkin, the fields of domain theory and denotational semantics (e.g., see [29,32,30,25,12,19,16]). The development of deno- tational semantics has been motivated by researching the semantics of functional programming languages such as Lisp [21,22] and ML [17,23].

Other research that is similar to one presented here, but that had different research interests and goals, is that of Reus and Streicher [27,28,26]. In [26], an untyped denotational model of class-based OOP is developed. Type information is largely ignored in this work (object methods and fields have no type signatures) and some nominal information is included with objects only to analyze OO dynamic dispatch. The model of [26] was developed to analyze mutation and imperative

A record can be viewed as a finite mapping from a set of labels (as member names) to fields or methods. Thus, we model records using explicitly finite record functions. A record function is a finite function paired with a tag representing the input domain of the function. The tag of a record function modeling a record represents the set of labels of the record. In agreement with the definition of shapes of objects, we similarly call the set of labels of a record the shape of the record. The tag of a record function thus tells the shape of the record.

In this section we present formal definitions for class signatures and related con- structs. Class signatures and other signature constructs are syntactic constructs that capture nominal information found in objects of mainstream OO software. Embedding class signature closures (formally defined below) in objects of NOOP makes them nominal objects, thereby making NOOP objects more precise models of objects in mainstream OO languages such as Java [18], C# [1], C++ [2], and Scala [24].

Not all members of set S are class signatures. To agree with our intuitions about describing the interfaces of classes and their instances, a member s of S is a class signature if its supersignature names component, its field signatures component and its method signatures component (i.e., the second, third and fourth components of s) have no duplicate signature names, field names, and method names, respectively (for simplicity, method overloading is not modeled in our model of OOP). It should be noted, however, that field names and method names are in separate name spaces and thus we allow a field and a method to have the same name.

Information in class signatures is derived from the text of classes of OO pro- grams. Given that interfaces of objects are the basis for defining types in OO type systems, class signatures are the formal basis for nominally-typed OO type systems, so as to confirm that objects are used consistently and properly within a program (Ch. 2 of [5], and [7], give more details on types and typing in OOP).

A signature closure is a pair of a signature name and a signature environment. A pair sc = (nm, se) of a signature name nm and a signature environment se is a signature closure if and only if there exists a class signature s in se with signature name nm and if the direct-reference (adjacency) relation corresponding to se is referentially-closed relative to s, and if this relation is the smallest such relation. Class signature s is then called the root class signature of sc. Relative to the root class signature, a signature environment is minimal, i.e., contains no unnecessary class signatures. This minimality condition ensures that all class signatures in the signature environment of a signature closure are accessible via paths in the adjacency graph of the signature environment starting from (the node in the graph corresponding to) the root signature name, i.e., that the signature environment has no redundant class signatures unnecessary for the root class signature.

First, we define exact class types. The exact class type corresponding to a class C is the set of all objects tagged with the signature closure for C. 6 Next, it should be noted that a cardinal principle of nominally-typed mainstream OOP is that objects from subclasses of a class C conform to the contract of class C and can be used in place of objects constructed using class C (i.e., in place of objects in the exact class type of C). Hence, the natural type associated with class C, called the class type corresponding to or designated by C, consists of the objects in class C plus the objects in all subclasses of class C. In nominally-typed OO languages, the class type designated by class C is not the exact class type for C but the union of all exact types corresponding to classes that subclass (i.e., inherit from) class C, including class C itself.

mainstream OO type systems to completely identify inheritance and subtyping. We express this statement formally as follows: Two signature closures corresponding to two classes are in the subsigning relation if and only if the class types denoted by the two signature closures are in the subset relation (i.e., the two classes are in the inheritance relation if and only if the corresponding class types are in the nominal subtyping relation). We prove the correspondence between inheritance and subtyping in the following theorem.

We should notice in the proof above that it is the nominality of objects of NOOP (i.e., the embedding of signature closures into objects) that makes S[sc2] being a superset of S[sc1] imply that sc1 has sc2 as one of its supersignatures, and vice versa. The simplicity of the proof is a clear indication of the naturalness of the definitions for class signatures and class types.

In this paper we presented NOOP as a model of OOP that includes nominal infor- mation found in nominally-typed mainstream OO software. This led us to readily prove that inheritance, at the syntactic level, and subtyping, at the semantic level, completely agree in nominally-typed OOP. It is necessary, we thus believe, to include nominal information in any accurate model of nominally-typed mainstream OOP. By its inclusion of nominal information, NOOP offers a chance to understand and advance OOP and current OO languages based on a firmer semantic foundation.

The possibilities for research that can be built on top of research presented in this paper are many. One immediate possible future work is to define a minimal nominally-typed OO language, e.g., in the spirit of FJ [20], then, in a standard straightforward manner, give the denotational semantics of program constructs of this language in NOOP. The type safety of this language can then be proven using the given denotational semantics.

