Contract-based design is an expressive paradigm for a modular and compositional specification of programs. It is in turn becoming a fundamental concept in mainstream industrial computer-aided design tools for embedded system design. In this paper, we elaborate new foundations for contract-based embedded system design by proposing a general-purpose algebra of assume/guarantee contracts based on two simple concepts: first, the assumption or guarantee of a component is defined as a filter and, second, filters enjoy the structure of a Boolean algebra. This yields a structure of contracts that is a Heyting algebra.

of contract to define a component-based validation technique in the context of a synchronous modeling framework. In our model, a component is represented by an abstract view of its behaviors. It has a finite set of input/output variables to cooperate with its environment. Behaviors are viewed as multi-set traces on the variables of the component. The abstract model of a component is thus a process, defined as a set of such behaviors.

The article is organized as follows. Section 2 introduces a suitably general alge- bra of processes which borrows its notations and concepts from domain theory [1]. A contract (A,G) is viewed as a pair of logical devices filtering processes: the as- sumption A filters processes to select (accept or conversely reject) those that are asserted (accepted or conversely rejected) by the guarantee G. Process-filters are defined in Section 3 and contracts in Section 4. Section 5 discusses application of our model to the synchronous Signal language. Related works are further discussed in

In addition to the above safety properties, contracts can also be used to express liveness properties. For instance, consider the protocol for starting the engine. A battery is used to initiate its rotation. When the engine has successfully started, the battery can be turned off. We can specify a contract to guarantee that engine cycles are properly counted. We write cycle' for the next value of the variable cycle.

In [7], a system of assume-guarantee contracts with similar aims of genericity is proposed. By contrast to our domain-theoretical approach, the EC Speeds project considers an automata-based approach, which is indeed dual but makes notions such as the complementary of a contract more difficult to express from within the model. The proposed approach also leaves the role of variables in contracts unspecified, at the cost of some algebraic relations such as inclusion.

Our main results are that the structure of process-filters is a Boolean algebra and that the structure of contracts is a Heyting algebra, respectively. This rich structure allows for reasoning on contracts with great flexibility to abstract, refine and combine them. Moreover, contracts are not limited to expressing safety prop- erties, as is the case in most related frameworks, but encompass the expression of liveness properties. This is all again due to the central notion of process-filter.

