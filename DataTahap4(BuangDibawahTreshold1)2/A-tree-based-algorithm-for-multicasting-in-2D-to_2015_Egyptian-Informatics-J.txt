set of input/output devices and a large local memory. New- generation interconnection networks use hardware routers to enter, leave, and pass messages, where each node is attached to each router. Several pairs of channels connect each router to neighboring routers; the pattern in which they are connected defines the network topology [1]. Torus networks are widely used in high performance parallel computers because of their many properties including constant node degree, constant length channel wires, higher channel bandwidth, lower conten- tion latency, and can be partitioned into meshes. In torus net- works, wraparound channels have been added to connect each edge node to the corresponding node on the opposite edge. Under random traffic, the symmetry of torus networks leads to a more balanced utilization of communication channels

The multicast communication, in which one source node sends the same message to multiple destination nodes, is essen- tial in a wide variety of parallel applications. An effective mul- ticast routing should minimize communication latency which consists of startup latency, network latency, and blocking latency [9]. The startup latency is the amount of time incurred by the operating system in preparing the message for injection into the network. The network latency consists of channel propagation and router latencies. The blocking latency accounts for all delays associated with contention for routing resources among the various worms in the network. Existing multicast routings can be classified as unicast-based [10], path-based [1,11,12] and tree-based [7,13]. In unicast-based algorithms, the multicast operation is performed by sending a separate copy of a message from a source to every destina- tion or, alternatively, by sending unicast messages to subset of destinations. The drawback of this scheme is the fact that multiple copies of the same message are injected into the net- work, leading to increased traffic in the network. Furthermore, each copy of the message loses considerable startup latency at the source.

In path-based algorithms, a source node prepares a message for delivery to a set of destinations by first sorting the addresses of the destinations in the correct order in which they are visited in the path, and then placing this sorted list in the header of the message [14]. They use a simple hardware mech- anism to allow routers to absorb flits on internal channels (to the local processor) while simultaneously forwarding copies of the flits on output channels enroute to the remaining destina- tions. When the header entered a router with address A, the router checked to see if A is the next address in the header. If so, the address A is removed from the message header and a copy of data flits will be forwarded both to the local core and the next node on the path. Otherwise, the message is for- warded only to the next node on the path. The path-based multicast algorithms are inefficient because the network has to be traversed multiple times, and flits of the message have to be copied and forwarded by the network interface associ- ated with the nodes.

The critical issue to implement multicast techniques is dead- lock. Deadlock in the interconnection network occurs when a set of messages is blocked forever because each message in the set holds one or more resources needed by another message in this set. The development of theories and methodologies for deadlock-free routing in wormhole networks has been a fruit- ful research area for many years. Duato [15] defined a neces- sary and sufficient condition guaranteeing the absence of deadlock. The methodology associated with this condition starts from a deadlock-free routing function and allows exten- sions provided that messages eventually are routed back to and stay in the deadlock-free subnetwork.

This paper is organized as follows. Section 2 presents related research. Section 3 presents the proposed multicast algorithm. Section 4 compares the performance of the pro- posed algorithm to some well known existing multicast algo- rithms. Finally, conclusion is given in Section 5.

conforms to the base routing algorithm and covers as many destinations as possible. This feature allows the multicast oper- ations to be completed in at most two communication steps in 2D Torus. A message is forwarded by a special routing func- tion to a neighboring node if the current node is not a destina- tion node. If the current node is a destination, the associated multicast flag is used to determine the multicast operation to be performed.

In [20], a path-based multicast algorithm for 2D torus net- works, Torus with Two Wraparound channels, T2W, was pro- posed. T2W algorithm defines a path called the horizontal main path starts from the source node to the last node such that the nodes on the horizontal main path can cover all des- tination nodes on columns of the torus network. In the first startup step, the horizontal main path is selected such that it may use the horizontal wraparound channels to cover as many destinations as possible. The message is sent from the source node to the last node of the horizontal main path according to a deterministic routing function which supplies a unique minimal path. In the second startup step, some intermediate nodes along the horizontal main path (HMP) retransmit the message to the remaining destination nodes through vertical paths. In T2W algorithm, the multicast is divided into sub- multicasts that can be carried out in parallel by many indepen- dent paths which branch from HMP.

In [22], the multipath-HCM routing algorithm divides the torus network into two subnetworks. The high-channel net- work (low-channel network) contains all of the directional common channels with nodes labeled from low to high (from high to low) and the directional boundary channels with nodes labeled from high to low (from low to high). The algorithm gen- erates four outgoing messages to implement a multicast. So, the destination nodes are partitioned into four destination subsets each of them contained in the header of the message. Two mes- sages are assigned to route along the high-channel network (to up) and the other two messages are assigned to route along the low-channel network (to down). The first flit of the message contains the offset of the next destination. The second flit contains the number of remaining destinations. The later flits contain the offsets for each of these destinations. The algorithm uses a routing function in terms of the (x, y)-coordinates of the current node and destination node, rather than in terms of node labels.

source node and n is the number of rows of the torus net- work. The second mesh subnetwork contains the remaining nodes of the torus network. It entails shifting the origin of torus network so that the source node always appears to be in (or closer to) the center of torus network. This is possible because the torus network has a symmetric topology. TAS- NEM algorithm uses the advantage of this structure to dis- tribute the traffic load over these meshes. These meshes, in turn, implement the multicast independently in a parallel fashion, and nearly balance the traffic load in the network to avoid the congestion problem, and thus considerably reduce the overall communication latency. This leads to an important issue of making each mesh subnetwork less depen- dent on the other one.

TASNEM algorithm is a tree-based multicast routing tech- nique for 2D torus networks. It delivers the message from the source node to all destination nodes in a single multi-head worm that splits at some routers and replicates the data on multiple output ports. It allows two messages simultaneously going out from the source node to implement the multicast. The source node prepares the message for delivery to the des- tination nodes and places their addresses in the header flits of the message. In each mesh subnetwork, the main message path starts at the source node and forwards to the nodes which have labels higher (or lower) than the label of source node. At the nodes which their vertical neighboring nodes are destinations, several horizontal message paths may be branched from the main message path to deliver the message to the destination nodes in the same horizontal level.

as two subnetworks. A high-channel subnetwork contains all of the channels whose direction is from lower-labeled nodes to higher-labeled nodes, and a low-channel subnetwork contains all of the channels whose direction is from higher-labeled nodes to lower-labeled nodes. The destinations are placed into two groups. One group contains all the destinations that could be reached using the high-channel subnetwork, and the other con- tains the remaining destinations that could be reached using the low-channel subnetwork. TASNEM algorithm uses the node labels and (x, y)-coordinates of the nodes to divide the set of destination nodes into two subsets.

The Dest_Prep algorithm uses the function SendS(M, D, dx, dy) to make the processor of source node sends the message body, the list of destination nodes, the horizontal direction dx, and the vertical direction dy, to its router. The proposed multicast routing algorithm allows two packets simultaneously going out from the source node. So, the Dest_Prep algorithm calls the function SendS twice, one for each mesh subnetwork.

Each current node in the message path determines its vertical neighboring node and computes the set D1 which contains the horizontal destination nodes which are between the current node and its vertical neighboring node. If the set D1 is empty then the current node forwards the message together with the set of des- tination nodes to its vertical neighboring node. If the set D1 is not empty then the current node examines its vertical neighboring node. In case where the vertical neighboring node is not a desti- nation, the current node forwards the message together with the set of destination nodes to its horizontal neighboring node. If the vertical neighboring node is a destination, then the current node forwards the message together with the set of destinations D1 to its horizontal neighboring node and forwards the message together with the remaining destination nodes to its vertical neighboring node.

The thin line represents the main message path and the thick (bold) lines represent the horizontal message paths in each subnetwork. The longest path of channels used to deliver the message to the destination nodes in D1 is 16 and to the des- tination nodes in D2 is 15. The total number of channels used to deliver the message to the destination nodes in D1 is 37 and to the destination nodes in D2 is 38. Hence, the network latency and the network traffic of TASNEM algorithm are 16 and 75, respectively.

adjacent nodes has been set at 25ns [21]. Various numbers of random networks that contain two virtual channels per each physical channel are used. In the following two subsections, the network latency and the traffic obtained by of the four algorithms are plotted versus the next parameters. The param- eter Tn refers to the torus network size, and n is ranging between 5 and 40, for example, T5 means that the torus net- work with 5 columns and 5 rows. The parameter PD refers to the percentage of destination nodes to the total number of nodes in the torus network.

Darwish MG, Radwan AA, Abd El-Baky MA, Hamed K. Ready groups: a path-based multicast algorithm for 2D torus networks. In: The 7th international conference on informatics and systems (INFOS 2010), NGBN(98-106), Faculty of Computers and Information, Cairo University, Egypt; 2010 <http://infos2010.f- ci.cu.edu.eg/Sessions_3rd_day/Session_3D.htm>.

