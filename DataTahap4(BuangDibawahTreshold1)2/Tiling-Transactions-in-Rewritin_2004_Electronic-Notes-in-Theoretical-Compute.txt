sources. This separation of concerns makes it possible to select different flavors of TL simply by fine tuning the algebraic structure of the elements in space and time and by fixing their interplay. Recent applications of TL concern an interac- tive view of Logic Programming [7] and a meta-theory of concurrent semantics centered around causal and spatial aspects [6]. This paper proposes a further appli- cation area, namely the semantics of distributed transactions.

Tiles extend ordinary rewrite rules with the possibility of changing the input and output interfaces during system evolution. The way in which they are changed is ex- pressed by arrows in a vertical category. More generally, vertical arrows model the information passed between interfaces. Graphically, this amounts to representing

However, at the morphism level, DComp is more permissive than ZPetri, be- cause the images of two distinct vertical arrows (e.g. zero places) are not neces- sarily disjoint multisets. This property is central to the lifting of refinement mor- phisms used in ZSN for arrow composition. Thus ZPetri is strictly included in the full subcategory of DComp whose objects are all the D-computads of the form

Proposition 4.4 There is an obvious adjunction between ZComp and HCatZComp that builds the horizontal computations of tiles. We let D denote the free functor. Analogously, there is an adjunction between ZCompc and HCatZCompc and we let D c denote the corresponding free functor. Then, the diagram of functors and obvious embeddings

just the rewrite rules of D. This means that, given any 2-computads D1 and D2, any computad refinement morphism is just a 2-computad morphism. On the other hand, it is obvious that any 2-computad morphism is also a computad refinement morphism, because it maps transitions into transitions. Next, we must show that I has a right adjoint Ad. Given a D-computad D = (H, V, T, n, s, w, e), let Ad[D]

We have extended the zero-safe approach of [5] to the more general framework of tile and rewrite theories. The coreflection between the abstract and the specification view relates the two principal operational models based on LTS and reductions and provides a systematic general approach to the definition of transactions. In fact, the universal property of coreflections guarantees that the abstract system is the best possible representation (among rewrite theories) of the concurrent transactions of its corresponding tile theory. It is worth noting that the representation results for zero-safe nets presented in [5] now follow from the more general constructions de- fined here. Let us finally mention that the horizontal composition of D-computads has some analogies with conditional rewriting logic, but we leave the study of the precise correspondence between these two specification options for future work.

Reflection and coreflection are two particularly kinds of adjunction, where, re- spectively, the counit and the unit define natural isomorphisms, yielding optimal approximations. When the unit is a natural isomorphism, then A can be seen just as subcategory of B, with the left adjoint F being the inclusion functor. Thus, core- flection is the ideal situation from the semantics point of view. In fact, the typical situation involves a category of operational models B that contains a subcategory of abstract models A, with G (b) being the abstraction of b. Then, the universal property of coreflections means that there is a natural isomorphisms between the observations of any concrete model b and of its abstract counterpart G (b), i.e. that b is the same as G (b) when observed from the abstract point of view defined by A.

