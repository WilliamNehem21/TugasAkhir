A fifth property that makes OOPS particularly attractive for educational use is its Graphical User Interface (GUI). Although simple, its GUI allows students to input formulas in an easy and intuitive format, or to save and load files. LoTReC, MSPASS and the the Logics Workbench also offer GUI-based access.

be both sound and complete for S5n [14]. Furthermore, in the same work, the implementation (Section 2.2) was shown to correspond to the formal description of the proof method. Unfortunately, this work also shows that the algorithm used by OOPS needs exponential time in the worst case, whereas satisfiability for S5n is known to be pspace-complete [9]. However, we believe that for educational purposes the functionality offered by OOPS (see Section 3) easily makes up for this shortcoming. Moreover, the implementation of these features does not depend on the specific proof algorithm used. Thus, as future work, the current algorithm may be replaced by one that is in pspace.

In addition to this, the language allows the input of variables as placeholders for either (sub-)formulas or agent identities. This is useful in the definition of rules and allows one to create template formulas that can be instantiated in different ways, by substitution. Variables are strings of characters and digits that start with an uppercase character.

The above outlines our reasons for integrating OOPS with Lua. Now we briefly describe how OOPS can be used through its Lua interface. All OOPS methods are encapsulated in the oops namespace. The basis for interaction with OOPS through Lua is the theory concept. A theory is, simply put, a collection of formulas. The following example code creates a theory and adds a formula to it:

This completes our description of how OOPS is called from Lua. It must be noted that Lua is a very powerful and complete language and that much more can be achieved than is suggested by the above examples. For example, command-line interaction with the user is readily available through Lua.

As we noted in Section 1, most current proof tools have problems related to either platform dependence, aging dependencies, lack of maintenance or difficult instal- lation procedures. OOPS addresses these problems in several ways. First, OOPS is implemented in pure Java, which means that OOPS will run on any operating sys- tem for which a Java virtual machine is available. This is true for most operating

systems available today. Second, OOPS is distributed as a ZIP file that includes all dependencies. No installation is needed, one simply extracts the ZIP file and double-clicks the resulting oops.jar file. Hence, OOPS is platform independent and easy to run, having no dependencies apart from the Java VM and what is provided in the OOPS distribution.

