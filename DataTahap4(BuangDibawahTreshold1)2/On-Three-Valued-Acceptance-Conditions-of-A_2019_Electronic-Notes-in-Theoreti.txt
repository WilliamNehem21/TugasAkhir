[15] models arguments as abstract entities among which an attack relation is de- fined. Dung proposed important concepts widely adopted by the computational argumentation community, such as the concept of argument admissibility. This concept builds on the intuition that to accept a claim c, one needs both to have an argument A supporting c and to justify the rejection of all other arguments that conflict with A. In short, while in Logic the reasoning process is focused on the inference within an argument, in argumentation the reasoning process also involves the interactions between arguments.

In this section we overview the main definitions connected with (Abstract) Argu- mentation Frameworks [15]. We are particularly interested in how abstract argu- mentation semantics can be formulated in terms of labellings. In this piece of work, we will restrict ourselves to finite argumentation frameworks.

We write in(L) for {A | L(A)= in}, out(L) for {A | L(A)= out} and undec(L) for {A | L(A)= undec}. Sometimes, we write a labelling L as a triple (Ar 1, Ar 2, Ar 3) where Ar 1 = in(L), Ar 2 = out(L) and Ar 3 = undec(L). The label in is intended to express the argument is explicitly accepted; the label out is intended to express the argument is rejected, and the label undec is intended to express the status of the argument is undecided, i.e., no verdict is achieved about whether the argument should be in or out. We proceed by recalling the definition of admissible labelling:

Abstract Dialectical Frameworks were introduced in [6] to treat arguments (called statements there) as abstract and atomic entities. It can be seen as a directed graph whose nodes represent statements which can be accepted or not. In addition, the links between nodes represent dependencies: the status of a node s only depends on the status of its parents (denoted par (s)), that is, the nodes with a direct link to s. In this paper, we will propose a slight change to that approach: instead of resorting to subsets of par (s) to assess the status of s, we will make this dependency

