The rest of the paper is organized as follows. Section 2 explains the concrete semantics and leakage computation used in our earlier work. In Section 3, we present a method to approximate our concrete leakage analysis and prove some properties of this. Finally, we present related work and draw conclusions in Section 4 and 5.

i.e. the conditional mutual information between the output and the high input given knowledge of the low output. Note that for deterministic programs, we have I(L'; H|L)= H(L'|L), i.e. interference between the uncertainty in the public output given knowledge of the low input.

It is clear that this example just releases a little bit information to the public. The leakage analysis result also agrees with our intuition: the possibility of h =0 is quite low and the uncertainty of h under condition h /= 0 is still big, i.e. only small information released to the public.

the events P0,... , Pk build the out-going partitions of the states for a while loop. The leakage computation of the loop given by addition of the entropy of the union of the boolean test for each iteration and the sum of the entropy of the loop body for each weighted sub-probability measures by applying the definition of entropy of partitions [29,27]:

Furthermore, it is easy to get that the exact leakage due to this simple example is L = 7(0.3, 0.4, 0.1, 0.1, 0.1) = 2.0464. This simple example suggests that unifor- malization on abstract objects preserves the safety of leakage computations, and the strategy of partition may affect the precision of the computation: the first strategy of partition in this example is much better than the second one since the first one is closer to the exact leakage. But both of them provide safe leakage computation,

i.e. never underestimate the leakage analysis. The precision of partitioning strategy depends on the initial distribution of high security inputs and also the programs, but not in general. One can image that the analyzer can produce more precise result if the partitions produced by the partitioning strategy and abstract operations in the abstract lattice is closer to the concrete partitions produced by the programs (especially conditional tests and loops) in the concrete lattice.

but still offers a reasonable upper bound. This example also shows our abstraction techniques improves the time consuming problem of leakage analysis. Note that the concrete analysis needs 8 time-unit(iteration) to get the result while the abstract analysis needs 2 units.

