There are various control mechanisms in membrane systems inspired by some biological entities. Each membrane may have its own control mechanism and a different task, and all membranes must work simultaneously to accomplish a more general task for the whole system. In this paper we consider the control mechanisms given by maximal parallel rewriting (mpr) and maximal parallel rewriting with pri- orities (pri). Other available control mechanism are defined in the literature for the membrane systems like for instance: maximal parallel rewriting with promoters or inhibitors [22] where promoters and inhibitors are represented as multisets of objects associated to rules, and such a rule can be used only if all the promoting objects are present, and none of the inhibiting object is present in its membrane; the minimal parallel rewriting [8] saying that if at least a rule from a set of rules associated with a membrane can be used, then at least one rule from that membrane must be used, without any other restriction; non-synchronized rewriting [13] where any number of rules is used in any step; or cooperative rewriting [10] where, for a given k, we can use exactly k, at least k, or at most k rules.

The solution we propose in this paper is based on the combination between rewrite theories, strategies, and strategy controllers. The intuition behind a strat- egy controller is that it decides which strategy is applied in the current state. We refer to the set of evolution rules of a membrane as a control-free membrane. Sim- ilarly, by a control-free membrane system we refer to the set of evolution rules of a membrane system. A control-free membrane (system) is specified by a rewrite theory in RL. Based on the current state, a strategy controller produces a strategy (called evolution strategy ) describing the possibly next one-step evolutions. For in- stance, if the strategy controller for M1 is pri, then strategy computed by pri for

The structure of the paper is as follows. Section 2 gives the main notations and concepts related to Rewriting Logic. Section 3 is the main part of the paper. Here we describe why the membrane systems are not rewrite theories and we present the strategy-based rewriting logic for membrane systems. Both the syntax and the semantics are presented as MEL theories. Soundness and completenes results are also included. In Section 4 an implementation based on the Maude strategy language is discussed. The case of communicating and dissolving membranes is discussed in Section 5.

We can think of a rewriting strategy as an algorithm for defining a computation step induced by a set of rules. In particular, the rewriting rules are elementary strategies. In general, a rewriting strategy language consists of expressions built using rewriting rules and strategy operators. Various approaches have been followed, yielding slightly different strategy languages such as ELAN [16,6], Stratego [23], TOM [4], or Maude [18]. All these languages provide flexible and expressive strategy languages where high-level strategies are defined by combining low level primitives, and they all share the concern to provide abstract ways to express control of rule applications, by using reflexivity and the metalevel for Maude, or the notion of rewriting strategies for ELAN or Stratego. Strategies such as bottom-up, top-down or leftmost-innermost are higher-order features that describe how rewrite rules should be applied.

The definition of the semantics for strategies can be given in various ways, see, e.g., [24,23,6,5,18,11]. We proceed here on a slightly different approach and give the semantics of the strategies by means of a MEL theory. This helps us later when we define the algebraic semantics of the membrane systems.

The above theorem shows that for each state t and appropriate strategy con- troller ctrl, getStrat (ctrl, t ) returns a unique strategy. If from t more than one evolution step are possible, then these are given by a sum of strategies. If no evo- lution step is possible from t, then getStrat (ctrl (RS ), t ) returns fail. Since this strategy describes the possible evolutions from the current state, it is called evolu- tion strategy.

One of the best candidate for implementing membrane systems, using the approach presented in this paper, is Maude system [9]. This is mainly motivated by the following two reasons: Maude already has implemented a strategy language and Maude language is reflective allowing us to work with operators at metalevel, as it is the case of getRules. A prototype of this implementation is already working. The development of this application uses Maude patterns described in [15].

The current version of the prototype 4 is not a complete system for handling and analyzing membrane systems. Only the control mechanisms mpr and pri are implemented. The main goal was to demonstrate that the strategy controllers are appropriate for describing the behavior of the membrane systems in terms of the strategy-based rewrite theory. We claim that the other features of the membrane systems can be easily added to the actual prototype.

