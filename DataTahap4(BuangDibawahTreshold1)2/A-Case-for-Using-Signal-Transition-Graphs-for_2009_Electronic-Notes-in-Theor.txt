Boolean networks [1, 2] are a qualitative modelling technique that has received much attention in the literature. A Boolean network consists of a set of regulatory entities {g1,... , gn} which can be in one of two possible states, either 1 representing the entity is active (e.g., a gene is expressed or a protein is present) or 0 representing

While Boolean networks have proved successful in modelling GRNs [9, 16], their application in practice is hindered by a number of shortcomings. Historically, the synchronous semantics has been favoured, since they are easier to work with due to their deterministic behaviour. However, the assumption of synchronous updates can be argued to be biologically unrealistic [17], which leads to reservations about the results obtained from such models.

Hence the asynchronous semantics seems to be more realistic. However, asyn- chronous networks also have shortcomings. In particular, they tend to have too rich behaviour, not all of which is realisable in practice. This behaviour also tends to be highly non-deterministic, i.e., (non-converging) choices are common when choosing the next state.

In practice, many such choices are resolved either by assuming that the envi- ronment of the biological system is slow (i.e., the system always has enough time to react to its changes), or by relative speeds of chemical reactions; that is, the behaviour in fact has much less non-determinism than such models suggest. (This may explain why synchronous networks, which are always deterministic, were often favoured over asynchronous ones, in spite of synchronous updates being biologically unrealistic.)

It turns out that whether a circuit is SI or not almost always depends on its environment, i.e., a circuit can be SI in one environment and non-SI in another one. That is, whether the circuit is SI or not cannot be deduced solely from the structure of the circuit! This suggests that traditional asynchronous Boolean networks lack some important information (viz. the behaviour of the environment).

In this paper, we make a case for using another formalism, viz. Signal Transition Graphs (STGs) [5, 14], which allows one to capture in a natural way the behaviour of both the circuit and its environment. STGs are Petri nets in which transitions are labelled with the rising and falling edges of circuit signals. They have been used extensively for the design of asynchronous control circuits.

Intuitively, an STG represents a contract between the system and its environ- ment, and is interpreted in the following way. If an input signal transition is enabled, then the environment is allowed (but is not obliged) to send this input, and vice versa, the environment is not allowed to send inputs which are not enabled. If a local transition is enabled, then the system is obliged eventually to produce this signal (or it is eventually disabled by another transition, in which case the output- persistency (discussed later) is violated), and vice versa, it is not allowed to produce outputs which are not enabled. That is, an STG specifies the behaviour of a system in the sense that the system must provide all and only the specified outputs, and that it must allow at least the specified inputs (in fact, it could optionally allow more inputs, which means that it could work in a more demanding environment).

In this section, we describe the relationship between asynchronous Boolean networks (or circuits) and STGs. We show that a circuit can be translated into an STG, and the latter can be semi-automatically refined into an SI model. To gain an initial insight into the proposed method, we start off informally, by considering an example; then we formalise our approach.

Visually, if OP is violated then there are two transitions with different labels in the STG with at least one of them marked by a local signal, which share some pre- places and can be enabled simultaneously (unless both transitions are connected to these shared pre-places in the read-only way, i.e., by pairs of arcs going in opposite directions).

Note that STGs produced from circuits by the circuit-STG construction always have CSC. In fact, they satisfy a stronger property, called the Universal State Coding (USC), meaning that no two different states have the same values of all the signals, as in STGs derived from circuits using the described circuit-STG construction there is a one-to-one correspondence between the reachable markings and encodings. Fur- thermore, the FOE transformation preserves USC, as it can only eliminate reachable states, and never adds new ones. Though the FOE transformation does not in gen- eral preserve CSC (it can turn a USC conflict that is not a CSC conflict into a CSC conflict), the fact that USC implies CSC mean that all the STGs constructed during the proposed refinement procedure have CSC, if the initial STG was built from a circuit. Of course, if the initial STG has some other origin (e.g., it was constructed directly by the user) then CSC has to be separately checked.

Deadlock-freeness A reachable state is called a deadlock if no transition is enabled at it. It indicates that the system can stop functioning, which is probably not an intended behaviour in most realistic systems. 1 Note that the STGs produced from circuits by the circuit-STG construction are deadlock-free if there is at least one input, since inputs are allowed to oscillate freely. Moreover, the FOE transforma- tion does not introduce new deadlocks, as it can disable only some (but never all) transitions enabled at any reachable state. 2 Of course, if the initial STG has not been generated from a circuit, but has some other origin (e.g., it was constructed directly by the user), then deadlock-freeness has to be separately checked.

Component 2 (right) is a simple flip-flop for signal Intg , which is controlled by the values of the signals Int and Xis in the first component. Note that the only connections between the two components are the pairs of arcs going in opposite directions between places of the former component and transitions of the latter one, i.e., the latter component accesses the former one in the read-only fashion and hence does not affect its behaviour.

and, importantly, making it more amenable to automated analysis techniques, e.g., model checking [6]. Thus, STGs can be seen as providing a well supported formal framework for GRNs that allows realistic qualitative models to be developed and incrementally refined. We note that while the application of Petri nets to modelling biological systems has been widely considered (see for example [4]), our approach based on STGs and asynchronous circuit techniques appears to be new.

We would like to thank the Epsrc for supporting R. Banks and the Bbsrc for their support via the Centre for Integrated Systems Biology of Ageing and Nutri- tion (Cisban). This research was also supported by the Royal Academy of Engi- neering/ Epsrc post-doctoral research fellowship EP/C53400X/1 (Davac) and the Newcastle Systems Biology Resource Centre. Finally, we would like to thank the anonymous referees for their useful comments and suggestions.

