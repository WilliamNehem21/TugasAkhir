When giving denotational semantics of programming languages using domain theory, use is often made of metalanguages in which to phrase the seman- tic descriptions [16,14]. The attraction of such an approach is that it allows the semantically relevant constructs and proof principles inherent in the do- main theory to be abstracted from the often quite complicated mathematical details. Restricting attention to the denotational semantics of deterministic languages (i.e. excluding the use of various kinds of powerdomain), Plotkin [23] makes a convincing case for polymorphic linear lambda calculus with recursion as an expressive denotational metalanguage. In particular, the powerful na- ture of impredicative polymorphism permits the plethora of domain-theoretic constructs to be defined in terms of remarkably few primitive type-forming

