The concrete semantics of a program yields possibly infinite computations, hence an- swering any non trivial questions may be infeasible. A simpler, yet not fully precise, model can be employed to reason about program properties. Abstract Interpreta- tion [6] is a widely used technique that simplifies the process of computation so that its vital properties can be captured within finite resources (time, space etc.) of a computing machine. This technique has been successfully applied in various fields, including program verification [2], error discovery and debugging [3], specification

Section 2 describes the representation of elements of the abstract domain and defines the join and meet operators and introduces a lattice structure using these operators. Section 3 presents an algorithm for checking satisfiability and computing a normal form of a given element of our domain. In Section 4 we provide a widening operator. The transfer function for the domain is discussed in Section 5. We conclude in Section 6.

To apply an abstract domain to program analysis, one needs to specify how an abstract state is altered by each type of instruction. The transfer function must over-approximate the concrete semantics [6]. We show a few examples of how to model a test in the Weighted Hexagons. Let a represent a set of states before a test

