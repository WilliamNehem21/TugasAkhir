A higher-order strategic programming framework called TL is described. In TL it is possible to dynamically construct strategic expression of the kind mentioned in the previous paragraph. A demonstration follows showing how the higher-order constructs available in TL can be used to solve several problems common to the area of program transformation.

1 This work was in part supported by the United States Department of Energy under Contract DE-AC04-94AL85000. Sandia is a multiprogram laboratory operated by Sandia Corporation, a Lockheed Martin Company, for the United States Department of Energy. Victor Winter was also partially supported by NSF grant number CCR-0209187.

as the distributed data problem (DDP). When the data to be distributed is independent of the input (i.e., constant for all input terms), simple strategies for distributing data can oftentimes be constructed statically. For example, consider constructing a strategy that will rewrite every integer in a term to the integer 2. Here the objective is to distribute the integer 2 throughout a term structure by rewriting every integer encountered. This is an example of data distribution involving data that is independent of any specific input term.

Strategic/rewriting systems are often provided with extensions in order to enhance their ability to describe the distribution of data. Parameterization is one extension that is widely used as a mechanism for data distribution. For example, ASF+SDF [1] has been extended with a fixed collection of parame- terizable traversal functions [4]. Another extension is to allow rule instances to be dynamically constructed using problem dependent data. In Stratego [10] for example, a mechanism is provided making it possible to alter rule bases at runtime through the dynamic construction and destruction of rules.

In this paper we look at higher-order extensions to strategic program- ming. Specifically we will describe how the higher-order rules, strategies, and traversals of a strategic programming language called TL can be used to ef- fectively distribute (dependent) data throughout term structures. Though TL is presently a theoretical framework, a restricted dialect of TL has been in implemented in the HATS 3 system [6] and is freely available. All of the examples presented in this paper have been implemented in HATS.

The remainder of the paper is organized as follows. Section 2 gives an overview of TL. Section 3 takes an in-depth look at the inner workings of a strategic implementation of set union in TL. Section 4 looks at two manip- ulations common in the area of program transformation. Section 5 discusses some related work, and Section 6 concludes.

TL [14] is an identity-based higher-order strategic system for rewriting parse trees. We use the term identity-based to denote rewriting systems in which the failure of rule application to a term leaves the term unchanged. We use the term failure-based to denote systems where the unsuccessful application of a rule to a term yields a special failure value. In contrast to TL, the strategic programming systems Stratego [11] and Elan [2] are failure-based.

When the dominating symbol and specific structure of a parse expression is unimportant the parse expression will be denoted by variables of the form t, t1, ... or variables of the form tree, tree1, tree2, and so on. Parse expres- sions containing no schema variables are called ground and parse expressions containing one or more schema variables are called non-ground. And finally, within the context of rewriting or strategic programming, trees as described here can and generally are viewed as terms. When the distinction is unim- portant, we will refer to trees and terms interchangeably.

TL provides support for user-defined higher-order traversals. TL also pro- vides a number of standard generic higher-order traversals. There are four degrees of freedom for a generic higher-order traversal: (1) whether a term is traversed bottom-up or top-down, (2) whether the children of a term are tra- versed from left-to-right or right-to-left, (3) which binary combinator should be used to compose the result strategies, and (4) which unary combinator should be used to wrap each resulting strategy.

In this section we look at how the union benchmark can be solved in TL. Our approach is to lift basic operations on data (e.g., insertion of an element into a set, etc.) to the strategy level. For example, when implementing union, we wish to create a strategy that inserts a particular element into our union set only if the element does not already occur in the set. In TL the construction of these types of problem specific first-order strategies can be accomplished though higher-order strategies.

Another difficulty in this example results from the structure of a block as defined by the grammar. Specifically, a block has intentionally been defined to consist of a declaration list followed by a statement list. Note that renaming must occur both within the declaration list as well as the statement list.

Note that this transient strategy that can only be applied once and will perform either a restricted or free rename. During the course of a top-down traversal, the idea is to have this transient apply to the declaration which generated it after which it will reduce to skip for all subtrees of that declara- tion. If this can be accomplished, then any traversal that continues on to the initialization expression will leave all occurrences of the declared variable un- changed. In addition to this behavior, we would like the renaming to continue for the rest of the block (e.g., the remaining declarations and statements). It is precisely this behavior that can be accomplished by TD BR.

Given this understanding of the interaction between TD BR and the transient combinator, let us consider the parse expression dec list[[ dec1; dec list1 ]]. When applied to this term, the strategy TD BR s will first apply s to dec list[[ dec1; dec list1 ]] yielding the strategy s'. A copy of the strategy s' is then broadcast to each of the children of dec list[[dec1; dec list1]]. In par- ticular, both dec1 and dec list1 will receive their own copy of s'. More specif- ically, let us consider what happens when s is transient( (restricted id1 id2)

<+ (free id1 id2)). In this case, the application of s to dec list[[dec1; dec list1]] will leave s unchanged (e.g., s = s'). Next a copy of s' will be broadcast to both dec1 and dec list1. If dec1 is the declaration responsible for generating

s', then s' will apply to dec1 but will not apply to any subterm below dec1 (e.g., the initializing expression in dec1). In contrast, within dec list1 s' will continue attempting to apply and broadcast its own copy of s' to its chil- dren. This will enable the strategy (free id1 id2) within the transient s' to rename all remaining occurrences of id1 to id2 within the block which is what is desired.

The strategy fun inline uses matching to split a block into its declaration list and statement list. The declaration list is then processed by the strategy fun dec which creates an in-lining strategy for each function declaration and composes the results into a strategic expression. This strategic expression is then applied to the original declaration list in order to in-line all the function calls within the declaration list. Then this in-lined declaration list is again processed by the strategy fun dec. This time the resulting strategy is applied to the statement list which has the effect of in-lining all function calls. The resulting statement list is then cleaned up (e.g., excess parenthesis are removed from expressions) by the strategy remove parens whose implementation is not shown. Finally, the resulting statement list is substituted for the statement list in the original block, as is the in-lined declaration list.

The strategy fun dec accomplishes its transformational objective through the help of the strategy inline. This strategy is given the name of a function id1, its formal parameter list id list1, and its body expr1 in curried form. With this information, the strategy inline is capable of rewriting a function call F [[ id1(expr list1) ]] to an appropriately in-lined body F [[ (expr2) ]]. It accomplishes this with the help of the strategy zip.

the formal parameter list of a function. This traversal will create one transient strategy for each formal parameter id in id list. Let s denote the resulting strategic expression. Next, a traversal on the actual parameter list expr list is performed with the strategy s. This will result in a strategic expression

The higher-order nature of TL rules can be understood as a form of currried rewrite rule. In this context, curried arguments can be bound during the course of a higher-order generic traversal. The composition of strategies cre- ated during such generic traversal is related to a morphism. Specifically, the one-layer generic traversal combinators that are used to construct full traver- sals are similar but not identical to hylomorphisms over rose trees found in functional programming frameworks [8][9]. Similar observations have been

this strategy. Stratego views the dynamic instantiation of rules as a rule base (i.e., a strategy where rules are composed using the left-biased com- binator and newly created rules are placed on the left-most end of the rule base). It would be interesting to extend the dynamic rule genera- tion mechanism of Stratego to enable more control over the structure of dynamically generated rule bases. This idea has been recently proposed by Martin Bravenboer [13].

