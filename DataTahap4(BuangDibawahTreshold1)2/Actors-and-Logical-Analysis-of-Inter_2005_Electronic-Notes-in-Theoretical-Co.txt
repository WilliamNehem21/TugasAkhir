In [27] an actor component algebra is defined to study the composition- ality of the different forms of specification and semantics of actor systems. The algebra makes minimal assumptions about what is being composed, lim- iting the operations to interface restriction, parallel composition, renaming, and an identity component. In particular the ability to prefix an action to a component behavior is not assumed. Using morphisms between the dif- ferent syntactic and semantic structures, compositionality of computational and interaction semantics was shown, thus justifying thinking of interaction semantics as a denotational semantics (without need for CPOs and limits!).

To spare the reader more formalities we illustrate the formalization of the actor behaviors and operational semantics by some simple examples. that will be useful later on. The simplest actor behaviour is perhaps the sink. A sink simply accepts any message sent it, doing absolutely nothing in response.

We now have enough of the formalization to illustrate mathematical specifica- tions and discuss the structure of models of the theory. We first make precise our notion of satisfaction. As discussed above, an actor system specification is a predicate on interaction paths. An actor system satisfies a specification just if the predicate holds for each of its interaction paths.

Line 1 says that the interaction path has the right interface. Line 2 defines the set of input events D. The function msg extracts the message content of an event: msg((n, in(a a M ))) = M , and the function Cust (ip) is the set of names actors that are not receptionists at any stage of ip. In the case of

From classic recursion theory: a set of natural numbers A is said to be simple if A is recursively enumerable, the complement of A is infinite, and no infinite subset of the complement of A is recursively enumerable. Emil Post constructed the first simple set [20] in order to show that not all non-recursive, recursively enumerable sets, were creative. Choose A simple. By definition, let f be a partial recursive function such that

There are several additional directions for future work. One is formalizing the component algebra operations to help modularize specification and rea- soning, and looking for a set of reasoning principles, including for example principles for reasoning about coordination abstractions. Another is working out a more detailed proof-theoretic analysis of interactive computation mod- els. Finally, we intend to explore variants of the actor model that incorporate notions of time and uncertainty.

