Structural operational semantics (SOS) [16] is a well known formalism for the speci- fication of programming language semantics (e.g. [16]) and concurrent systems (e.g. [10]). However, an important aspect of specifications [12] was left open by Plotkin in his seminal lecture at Aarhus: modularity.

transition relation, the label from the transition relation is split into its pre and post projections, which are defined below. An element of the rewriting relation, built from an element from the labeled transition relation, is then given by a pair of pairs: the first pair is given by the first projection of the element from the la- beled transition relation (e.g. the program syntax), and the pre-projection of the label, (e.g. the pre-projection of the environment); and the second pair is given by the second projection of the element from the labeled transition relation (e.g. the program syntax), and the post-projection of the label (e.g. the post-projection of the environment).

Any attribute in f , such as assoc or comm, is moved verbatim to the generated operator. The function f may be in mixfix format. In this case, the functional symbol is constructed by keeping all the tokens beginning with lowercase identifiers and substituting all tokens beginning with uppercase letters by underscores. The sorts in the domain of the generated operator are named after the tokens beginning with uppercase letters in f .

Constructive MSOS is an abstract syntax for usual programming languages con- structs. Our MSDF specifications for Constructive MSOS consist of 800 lines, divided into 74 modules that define abstract constructs and basic data types commonly found in programming languages. (For instance, there is a module Cons/Abs/closure with the BNF and transition rules for closure values.) The fine-grained modularization of the specification is only possible due to encapsula- tion of the semantic components provided by MSOS, a modularization that greatly improves reusability.

We wrote two specifications using Constructive MSOS to exemplify its reusabili- ty. The semantics of two languages, MiniJava and a subset of CML were developed based on a translation from their concrete syntax into Constructive MSOS abstract constructs. The semantics of a complete programming language, such as MiniJava, is given by a MSDF module that gathers all necessary constructs and defines an initial environment for the beginning set of bindings. The conversion from MiniJava to the abstract constructs is performed, in our implementation, by the SableCC parser generator. (An external parser was used for a fine-grained lexical control during the parsing process.)

