ing, process calculi, dependent types, to mention a few. Furthermore intersection types are an increasingly important feature in modern programming languages, such as TypeScript, Flow and Scala. For an overview on intersection types and some of their applications we refer to [25,10,5,14,1]. Type inhabitation for finite rank intersection types was proved undecidable for ranks over 2 [22,23], and decid- able for rank 2 [17], although exponentially hard. In recent years, the problem of type-inhabitation has been further explored for bounded ranks of non-idempotent intersection types [7,12,11].

We studied the notion of pre-grammar in the realm of rank 2 intersection types and addressed the emptiness problem for a rank 2 subsystem. We consider types in T2 without positive occurrences of intersections, for which the previous methods defined for simple types extend in an elegant way. As future work we aim at extending our methods to the full rank 2 type system as well as exploring other, more expressive, related type systems.

