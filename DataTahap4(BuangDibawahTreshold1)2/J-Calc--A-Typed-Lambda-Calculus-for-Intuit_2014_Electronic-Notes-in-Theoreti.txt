and T j with corresponding types (P and Just P). For that reason we introduce a linking witness constructor Link. This is how necessity is introduced: by proof- checking deductions of T with deductions of T j, we reason constructively about admissibility of valid (via T j) statements in T . The principle thus becomes:

The server might provide different implementations of the instack module signa- ture. The two textbook approaches use lists or arrays of integers. Given different implementations, the initial source code has different computational value since the links that it induces change. Schematically:

For future work, we plan to extend the computational relevance of the full cal- culus (JCalc) by establishing its connection with higher-order module systems (e.g. where module signatures can refer to other module signatures which, in turn, are implemented by a third module). Linking processes in such systems would utilize our type system in full. Cut-elimination results are currently under development.

