When developing systems based on COTS, components need to be adapted in most of the occasions to work under certain conditions which were not initially predicted by their developers. Thus, it is very important to provide systems with the skill to dynamically alter their behaviour while running, depending on the changing conditions of the environment. In this work we describe a context-dependent, dynamic mapping between the interfaces of the components being adapted, overcoming some of the limitations of the static mappings presented in previous works. This is achieved by means of contextual environments, which define flexible adaptation policies. We also present a case study, illustrating the proposal, and discuss the improvements these mappings represent in comparison with previous works, as well as some open issues.

Protocol Level : Interfaces at this level specify the protocol describing the interactive behaviour that a component follows, and also the behaviour that it expects from its environment. Indeed, mismatch may also occur at this protocol level, because of the ordering of exchanged messages and of blocking conditions. The kind of problems that we can address at this level is, for instance, compatibility of behaviour, that is, whether the components may deadlock or not when combined.

Adaptors already available in different component-oriented platforms like CORBA, J2EE or .NET address several adaptation issues at the signature level, allowing a certain degree of interoperability between software components. Indeed, they pro- vide convenient ways to describe signatures using Interface Description Languages (IDLs), but they offer a quite limited and low-level support to describe the concur- rent behaviour of components, since solving all signature problems does not guaran- tee that the components will interoperate properly. Recent research efforts [1,6,11] concentrate on the interoperability of reusable components at the behavioural level. This work deals with the problem of adapting mismatching behaviour that compo- nents may exhibit in a dynamic way, particularly tackling the signature and protocol levels. Regarding mobile and pervasive computing, this proposal will also enable in- frastructures supporting automated software adaptation by extending applications at run time to adapt behaviour in a context-sensitive way as devices cross different networks and the environment changes.

State Machines (FSM) [13], we have chosen process algebras because they allow the specification of behavioural interfaces concisely, and at a higher level. The issue of typing component behaviour and service specification applied have been discussed in recent works [1,9,10]. For the example, we assume a typical scenario where a Client component wishes to use some of services offered by the VoD system.

On the other hand, the VoD server waits for an incoming connection. Once a client connects issuing a hello message (received in the server as login), a session is opened. When a client opens a session with the VoD system, it follows a connec- tion procedure which associates the initial profile with Guest. As we have already mentioned, the user profile may be changed during interaction between the server and a client (we want to get an adaptation between both components). Depending on the current profile, the server offers a variety of services to the client:

Subscribers: a play action is interpreted by the server as a view message. In the case of record, the server allows users to download the movie into their computers. If the client issues a switch message to the server, this may unsubscribe the user from the service.

Following this example, we observe that, apart from solving both syntactical and behavioural mismatch, adaptation has to distinguish between the two available user profiles when translating the messages to the VoD server. Using a static approach, message correspondences are fixed, so independently of the current user profile, a record message, for instance would have to be always translated to the same target message (either preview or download ). This motivates the need to provide new capabilities for adaptation in order to achieve context-aware message translation. In our proposal, we advocate for the use of contexts for adaptation. In the example, the two user profiles available will be associated to two different contexts in the system, being able to change between them through certain actions (switch in this case study).

We have presented throughout this paper a description of a formal notation for contextual component adaptation. The purpose of this new technique is to obtain dynamic mappings between the interfaces of the components being adapted, through contextual environments that define flexible adaptation policies. In previous works, this idea was presented, although from the point of view of subservicing. However, this approach lacked the flexibility of the current work, where we intend to overcome some of the previous limitations, making a significant advance to find a solution for issues like dynamic access rights (user privileges) by means of contextual adaptation, as we can see in our example.

In order to exemplify our proposal we have presented a case study in this paper relative to a Video-on-Demand (VoD) system with different client profiles (used as contextual environments). Having a contextual mapping available, we have pre- sented an algorithm to build the specification of the contextual adaptor based on a graph representing the contexts present in the mapping, and the transitions be- tween them. Finally, we have sketched the procedure to deploy an actual contextual adaptor based on the aforementioned specification and the algorithm described in [4].

It would also be interesting to introduce security policies for the dynamic adap- tation which we have proposed in this work. The adaptor must guarantee the safe interaction of the adapted components (i.e. verification of properties), making sure that they will never deadlock during an interaction session.

