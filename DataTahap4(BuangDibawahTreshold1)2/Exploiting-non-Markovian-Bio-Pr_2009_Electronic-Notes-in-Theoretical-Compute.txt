The Stochastic Simulation Algorithm (SSA) is a milestone in the realm of stochastic modeling of biological systems, as it inspires all the current algorithms for stochastic simulation. Essentially, the SSA shows that under certain hypothesis the time to the next occurrence of a biochemical reaction is a random variable following a negative exponential distribution. Unfortunately, the hypothesis underlying SSA are difficult to meet, and modelers have to face the impact of assuming exponentially distributed reactions besides the prescribed scope of applicability. An opportunity of investigation is offered by the use of generally distributed reaction times.

The paper is organized as follows. Sect. 2 gives a brief tutorial on BlenX [10], a process calculi inspired programming language designed for modeling biological systems, and we comment on how general distributions have been managed. Then, Sect. 3 discusses the impact of assuming abstract reactions as exponentially dis- tributed through a few biological examples of increasing complexity. Finally, Sect. 4 exploits the capability of models including generally distributed reaction times.

The BetaWB framework [18] is a computational tool that supports textual and vi- sual programming with BlenX. The BetaWB can be seen as an in-silico laboratory, where (in-silico) experiments can be designed (i.e., a BlenX program is written), sim- ulated and analyzed. The quantitative component of the experiments is guaranteed by the stochastic capability of BlenX, on the line of [9], where a continuous-time Markov process is taken as foundational quantitative model. This section provides an introduction to the visual version of BlenX and introduces the formal tools for managing non-Markovian processes.

The primitive x !(sig ) sends a signal sig through interaction site x : IdE . Replication rep assures that the process sends a signal each time it is needed, i.e., each time sub- strate and enzyme interact. The primitive x ?(sig ) waits a signal on the interaction site x : IdS that enables the change of the type in IdP by means of ch(x, IdP ).

means that type IdE and IdS , expressed by boxes E and S respectively, may bind with a rate of 0.5. The rate is the unique parameter of a negative exponential distribution that describes the stochastic behaviour of the action. The other two values in the tuple (1) are the rates for decomplexing and interacting and will be commented later in this section. The tuple (1) allows inferring the following evolution of the system E S:

that prescribes that each time the types IdE and IdP are bound they have to unbound immediately, represented by the key-word inf (i.e. infinite rate). The zeros in the third and fifth position means that types IdE and IdP cannot bind and cannot interact if they are bound. The tuple (2) allows inferring transition [T5]:

We conclude this brief tutorial on the BlenX language introducing events. The primitives we describe above work with elementary reactions, but, as we already pointed, it is difficult to describe biological systems only in terms of elementary reactions. Events specify transitions that are not elementary reactions. Here we consider two classes of events, namely join and split. The join event [E1]

is enabled when a box B1 and a box B2 are available. The left part in brackets of the event is called condition, while join(B) is called verb. [E1] removes boxes B1 and B2 and adds a box B. The duration of the transition is specified by the rate parameter E1 value, as usual, the unique parameter of a negative exponential distribution. The split event [E2]

Event [E3] uses a tricky version of event [E2]. In fact, the second output box Nil is the BlenX representation of an empty system and therefore event [E3] transforms box B into box S with rate 0.0078. Note that the BlenX language offers a richer set of primitives w.r.t. the ones presented here; for a detailed description of the full language we refer the reader to [10].

Since BlenX is rooted into process calculi theory, we look at process calculi for including general distributions support. General distributions are not memoryless, that is the probability distribution of a transition is not independent from the tran- sitions already happened. Therefore, general distributions introduce the problem of tracking the time consumed by each transition, since this influences the probability distributions of the transitions that are going to be executed. The problem was faced by the process calculi community following three main approaches, namely, counters, ST semantics, and enhanced operational semantics.

The semantics of TIPP [14] uses counters to track how many times an action has not been selected to happen, and adjusts probability distribution accordingly. The approach taken in [5] integrates clocks into models and expresses clocks start and clocks termination events through the use of an ST semantic; in this way dependency between transitions can be considered. Finally, in [25] the reach labels of the enhanced operational semantics allow to derive the firing distributions of enabled transitions.	We adopt this last approach mainly because enhanced operational semantics can be also used besides the scope of general distributions to retrieve interesting biological information as causality and locality [8]. The details about the enhanced semantics of BlenX and how general distributions are derived can be found in [24]. Here we only sketch the general ideas rephrasing the example above. Suppose to have a system with two instances of product box P, say P1 and

chosen and executed. Memoryless property of exponential distributions assures that the time of transition [T6]2 does not depend on the time t1 consumed by [T6]1. In a general setting memoryless does not hold and the time distribution of [T6]2 is influenced by the time consumed by [T6]1. Enhanced operational semantics allows defining causality: a transition [Ti] causes a transition [Tj] if [Tj] cannot be executed before [Ti]. The notion of causality supports enabling memory discipline [19], namely the stochastic distribution of the time consumed by a transition [T] must be influenced by all the transitions fired from the states where [T] was first enabled. Therefore, the runtime support of BlenX is extended to support causality and enabling memory discipline. In particular, inspired by [11], we implemented an ad-hoc extension of the BlenX stochastic simulator engine based on classical optimized discrete event simulator solutions. From a user point of view, the extended version of BlenX allows to specify also general distributions and not only unique rate parameters. For instance, event [E3] can be extended as:

events [E3 1] and [E3 2] have the same qualitative behaviour of [E3], but different time distributions. In particular [E3 1] has associated a Gamma distribution with shape 2 and scale 64.1, while [E3 2] is distributed as an Hyperexponential, i.e., the sum of two exponentials with rates 0.003 and 0.01, and weight 0.12879 and 0.87121,

respectively. Playing with general distributions lets to test different hypothesis for, e.g., the pathway that leads to box S from box P. Next section builds on this example and gives some insight about the use of general distributions for modeling complex biological systems.

In this section we introduce a few examples of biological systems that include ab- stract reactions. We present their modeling within the extended BlenX language and the results obtained via the extended stochastic simulator 3 . The purpose of this few case studies is twofold: they allow quantifying the impact of assumptions such as supposing all the reactions as elementary; and they provide the basis for further discussing the advantages offered by the inclusion of generally distributed reaction times into models.

For simplicity we set the internal process as nil but in general we can imagine a complex internal process. All the three kinds of transformations can be modeled using split events and since split event verbs refer to box definitions, then we also model the modified protein B as the box B above. The main difference w.r.t. to

In particular, we refer to one of the models presented in [6] from which we take all the quantitative parameters. In the BlenX model we implemented, each element composing the network is represented as a box; we have a box D representing the DNA string, a box DR representing the complex of the DNA with a DNA polymerase R,a box M representing the mRNA, the box P representing the protein P expressed, a box P2 representing the protein P dimer and finally a box Q representing the complex of the dimer and the DNA, i.e., the DNA inhibition. All the chemical reactions reported in [6] can be translated simply in BlenX using events. We have the transcription, translation, and the decay of the mRNA and of the protein P which we describe using, respectively, events:

It is an easy guess to conjecture that complex non-linear systems such as the biochemical ones can be sensitive to variances of event occurrence times: we pro- vided some evidence for it with three simple examples. Unfortunately, assuming a negative exponential distribution of every reaction occurrence time limits the pos- sibility of defining accurate models of non-elementary transformations, as there is no lever to match statistical properties of phenomena beyond their expected occur- rence times. An important implication of this limitation is that, to make models to fit wet-lab data, the rates of reactions may need to be changed to unrealistic values. Consider for instance the third example provided in the previous section. In the gene regulatory network model that uses general distributions, to fit an observed steady-state level of protein expression, one can tune the variance of a transcription distribution without changing its expected value. However, if modelers assume ele- mentariness of every reaction, the only possibility left to match experimental data is to change their rate constants.

An interesting modeling facet that surely deserves to be subject of future work is the exact representation of the competition among reactions. In fact, this is quite a delicate area of modeling, whose importance becomes evident when deal- ing with general distributions. Consider for example the transcription relation in Example 3.3. Obviously, the first stage of the transcription process is in competi- tion with the polymerase decomplexation reaction. However, if we model the whole transcription process as a single elementary reaction, we cannot limit the scope of this competition to the first stage only. Thus, it would be like saying that the poly- merase could decomplex from DNA and stop gene transcription at any time during the process, which is not realistic. Indeed, this extended competition is what is actually modeled for the Example 3.3 in the literature [7] as well as in the model variants presented in this paper that used generally distributed transcription times. This shortcoming of abstract reaction modeling is encountered whatever is the distribution used to model the transcription time. However, when we explicitly consider the multi-stage nature of the transcription process, for instance in the form of an Erlang distribution, we have a degree of freedom in playing with the

preemption at the various stages of the process. Thus, we could specify that only the first stage of the Erlang can be preempted because of the competition with the polymerase unbinding reaction. It is clear that the opportunities offered by this refined modeling only become available when considering the details of the staged nature of abstract reactions, and thus only in a framework that allows going beyond the pure elementariness of biochemical reactions.

The SSA algorithm is the de-facto standard for simulating the dynamic evolution of systems of stochastic reactions. SSA assumes elementary reactions and therefore the time to the next reaction is a random variable following negative exponential distribution. However, it is difficult to describe complex biological systems only in terms of elementary reactions. Quite often there is an incomplete knowledge of the full set of reactions comprising the systems under inspection. Thus, researchers have to introduce abstract reactions in their models, without considering the impact of using SSA like algorithms with abstract reactions. This calls for an investigation of the dichotomy of the qualitative abstract reactions and the quantitative elemen- tariness assumed in the simulation algorithms.

We started by extending the modeling language BlenX and the associated com- putational framework BetaWB with general distributions. BlenX allows including in the same model different levels of (qualitative) abstraction and so it is well suited to be tested in an environment with general distributions. Here we described the general ideas underlying BlenX and its extension in a tutorial fashion, pointing the interested reader to [10]. Then, we described three examples that present an increas- ing complexity. The examples resulted sensitive to variances of reaction occurrence times as non-linearity and complexity of the system increase. Moreover, the exten- sion presented can help in providing better matching between wet-lab experiments and in-silico results.

