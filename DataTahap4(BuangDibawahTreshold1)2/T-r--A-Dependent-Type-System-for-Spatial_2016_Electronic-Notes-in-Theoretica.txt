This work proposes a dependent type system for the LLVM Intermediate Representation language for keeping track of pointer bounds information. The system employs a combination of static analysis and runtime checks to avoid spatial memory safety violations, such as buffer overflows. By working on LLVM IR, the system serves a foundation for ensuring spatial memory safety in languages which can be compiled to LLVM, such as C and C++.

A number of techniques have been proposed to provide memory safety in C [8,11,10]. Typically such systems keep their own bounds information and instrument the program to ensure that memory safety is not violated. A different approach, named Deputy [6], employs dependent types to enable the programmer to annotate the already existing bounds information kept manually in C programs, so that the compiler can identify it and insert checks which ensure its correct usage. Because the compiler-inserted checks use the same metadata as the checks written by the

This paper is organized as follows. Section 2 presents background for this work. Section 3 describes the LLVM IR language. Section 4 describes the proposed system, how it fits in the LLVM environment, and the type rules and transformations it implements. Section 5 presents conclusions and future work.

There are different kinds of memory safety. Temporal memory safety refers to the property of not attempting to access memory that has been deallocated or not allocated yet, while spatial memory safety refers to the property of not attempting to access memory outside of the bounds of an object. The methods for ensuring each kind are different. This work addresses only spatial memory safety. Other mecha- nisms, such as conservative garbage collection [4], can be used complementarily to ensure temporal memory safety in C.

Works also vary in the granularity at which memory safety is considered. Some works, such as [3], consider whole data structures as the basic unit for memory, so that access past the limits of a field in a data structure is not considered a violation if the access is still within the same data structure. This limits the damage caused by buffer overflows or overreads, but does not completely eliminate them. Other works, such as Deputy, address memory safety at the level of single variables and structure fields. The present work uses this more strict version of memory safety.

Dependent type systems vary in their degree of expressivity. Some dependently- typed programming languages allow any expression to appear in types, which may lead to undecidability because an expression may fail to terminate [2]. Other lan- guages allow a subset of expressions to be used in types, thus avoiding undecidability at the expense of expressivity.

meaning that the array parameter of function f is a pointer to a region of len integers. When the program is compiled, Deputy inserts assertions in the code which ensure that pointers are within the declared bounds before they are used. A second compilation pass then looks for assertions which can be proven true at compile time, and thus can be safely removed, thus reducing the performance impact of the checks. It also looks for assertions which can be proven false at compile time, which are reported as compile-time errors to the programmer, thus providing static checks when possible. Expressions which can appear in a dependent type are limited to local variables, constants, and arithmetic expressions, which is usually sufficient for describing bounds in C programs.

LLVM is a widely used language-agnostic framework for program compilation, anal- ysis and transformation designed around a uniform Intermediate Representation (LLVM IR), a typed assembly-like language for an abstract machine. Various back- ends exist for translating LLVM IR to machine code of different architectures. The use of a uniform, well-defined language for code representation makes it relatively easy to extend LLVM with new analysis and transformation passes.

LLVM IR is a typed assembly-like language for an abstract machine with an infinite number of registers. The LLVM IR language is in Static Single Assignment (SSA) form with respect to its registers: each register is assigned exactly once, and each definition dominates all of its uses. Memory access is done through typed pointers. The SSA restriction applies only to registers, not to memory locations.

The branching instruction (br) takes a boolean and two labels, and jumps to either label depending on the value of the boolean. br lab is an unconditional branch to lab, and can be regarded as syntactic sugar for br true, lab, lab. ret returns to the function caller with the specified value.

