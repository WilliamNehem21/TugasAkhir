A modeling language for hybrid systems HydLa and its implementation HyLaGI are described. HydLa is a constraint-based language that can handle uncertainties of models smoothly. HyLaGI calculates trajectories by symbolic formula manipulation to exclude errors resulting from floating-point arithmetic. HyLaGI fea- tures a nondeterministic simulation algorithm so it can calculate all possible qualitative different trajectories of models with uncertainties.

A precursor of HydLa was Hybrid cc [2,5], but its implementation did not com- pletely guarantee the correctness of results. Another approach was CLP(F) [7], constraint logic programming over real-valued functions. It aimed at rigorous simu- lation and handled interval constraints, but its control structure was very different from that of HydLa.

We have been developing an implementation of HydLa named HyLaGI (HydLa Guaranteed Implementation) [9] 2 . HyLaGI computes trajectories of given HydLa programs. HyLaGI is written in C++ and currently uses Mathematica as its back- end solver. The C++ part consists of the parser and the high-level part of the simulation algorithm including case analysis. Mathematica is used for checking the consistency of conjunctions of constraints, solving ODEs, solving minimization problems and transforming both arithmetic expressions and logical formulas. We have also developed a frontend system for HyLaGI, which can visualize simulation results of HyLaGI by two dimensional plots and animations.

Firstly, the results are free from errors caused by floating point arithmetic be- cause HyLaGI calculates trajectories by formula manipulation. Outputs are sym- bolic representation of state variables at each time point and each time interval. Since errors in the simulation of hybrid systems can lead to qualitatively different results, this feature is more important than in ordinary dynamical systems. There are other rigorous tools for hybrid systems, but most of them are based on numerical methods [3,4,13] or theorem proving [10].

algorithm. The simulation repeats Point Phases and Interval Phases until a termi- nation condition (time limit or the number of phases) is satisfied. At each phase, maximal consistent sets of modules are calculated by checking consistency and guard conditions. A Point Phase is concerned with discrete change at a time point, while an Interval Phase is concerned with continuous change for a time interval. Cal- culation of Interval Phases is more complex than that of Point Phases because it includes solving ODEs and minimization problems.

The first idea is to analyze the dependency of constraints. The dependency can be represented by a bipartite graph consisting of variable nodes and constraint nodes. Graph edges correspond to the references of variables from constraints. The dependency between constraints changes dynamically in the simulation of HyLaGI because (i) a guarded constraint may be switched on and off, (ii) constraint modules not chosen for a particular phase have no effect, and (iii) the left-hand limit of a variable in a Point Phase is regarded constant and has no relation with the variable itself. HyLaGI manages the effectivities of nodes and edges of a dependency graph dynamically and calculates minimal sets of related constraints.

