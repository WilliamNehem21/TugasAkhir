The web application can be accessed for various purposes, including by regular users, web crawlers for indexing, and malicious users for exploratory scanning before an attack. Detecting attack-oriented scans is crucial for improving attack detection compared to traditional methods, and this paper proposes a method to achieve this using access log files of Apache or ISS web servers. The approach also includes a rule set to detect SQL injection and cross-site scripting (XSS) attacks. The method's performance is evaluated and compared to other detection techniques using sample datasets and real system log samples, and recommendations for future development are discussed.

Machine learning algorithms typically require a large training dataset to build a classification model, which can lead to high memory consumption and lengthy training periods. In contrast, the proposed rule set for detecting attack-oriented scans in access logs does not entail memory consumption issues and can be executed with a single line of code in an Ubuntu terminal.

The paper is structured as follows: Section 2 presents related work, Section 3 details the system model, Section 4 presents model evaluation and real system test results, and Section 5 provides concluding remarks.

Other related works discussed in the paper include a negative security model for intrusion detection in web applications, a method for classifying malicious web sessions through web server logs using machine learning techniques, and the use of self-organizing maps and modified adaptive resonance theory 2 algorithms for clustering web sessions.

The paper highlights differences between the proposed model and previous works, such as the use of additional fields for more accurate web crawler detection, the use of rule-based detection instead of machine learning, and the utilization of a combined log format to increase the number of features.

The chosen web server for the study is Apache/2.4.7 (Ubuntu), and the Damn Vulnerable Web Application (DVWA) version 1.0.8 is used for studying XSS and SQL injection attacks. The paper also discusses the usage of the script on access log files and the importance of detailed analysis for creating and implementing effective information security policies for web applications.

The paper outlines the methods used to create datasets for evaluating the model's performance and describes the metrics used for evaluation, including accuracy, precision, recall, and F1-score.

The proposed model demonstrates high detection probability and low false alarm probability, with high accuracy and precision rates. The results indicate that static rules can successfully detect web vulnerability scans and that the model functions effectively with larger and live datasets.

Future work considerations include expanding the model to analyze other log files and addressing other web application attacks such as cross-site request forgery (CSRF) in addition to SQL injection and XSS attacks.