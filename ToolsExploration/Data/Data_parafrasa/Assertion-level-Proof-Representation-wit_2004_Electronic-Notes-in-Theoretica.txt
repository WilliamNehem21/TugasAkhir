We propose a format for representing human-oriented proofs at the assertion level with underspecification. This work is aimed at addressing challenges identified in empirical studies conducted within the dialog project at Saarland University. Specifically, we seek to bridge the gap between the human-oriented proof representation format with underspecification used in the tutorial dialogue system's proof manager and the calculus and machine-oriented representation format of the domain reasoner.

An experiment was conducted with a human mathematician to construct proofs in naive set theory, where neither the tutor system nor the subjects were limited to specific proof formats. The resulting analysis of the obtained corpus has provided valuable insights into the nature of proofs constructed by humans in this field. One significant finding was the differences in the level of granularity and underspecification in these proofs, such as missing references to premise assertions, rules, and instantiation specifications.

The concept of underspecification, derived from computational linguistics, refers to leaving aspects in the semantic representation of a natural language utterance uninterpreted to allow their treatment at later processing stages with more contextual information. This approach is particularly relevant when considering proof representations from a mathematical and logical perspective.

The clarification of human-oriented proofs is crucial for designing user-interfaces for theorem provers. We assert that there is a need to distinguish between user-oriented and machine-oriented proof representations, and this differentiation is becoming increasingly important for the design of user interfaces in theorem provers.

In this paper, we primarily focus on defining a data structure for representing the proof developed by the system user. The communication between the user and the system is conducted in natural language, necessitating the development of an interpretation component to map the user's natural language descriptions of the proof into a formal representation.

Additionally, we restrict our investigation to the domain of naive set theory for the initial stage, as it is a basic mathematical theory suitable for current automated theorem provers. Further experiments will explore more complex mathematical theories.

Challenges identified in the experiment include the correctness, granularity, and relevance of the proposed proof steps. We propose representing the uttered proof step as a hypothetical step in an appropriate proof representation format to facilitate analysis tasks.

Furthermore, we address the accuracy and relevance of proof steps, with the former determined by verifying the correctness of the inference, and the latter requiring additional research. We also consider the resolution of non-determinism in linguistic analysis through proof checking.

The paper concludes with a discussion on proof checking rules and strategies and their relevance in achieving a complete strategy, which remains a challenging research problem. Additionally, it addresses the situation where a strategy proves a lemma, but fails to find a proof object containing all the references indicated by the student.