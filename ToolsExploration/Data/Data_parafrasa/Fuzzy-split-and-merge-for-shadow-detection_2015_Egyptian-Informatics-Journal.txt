The presence of shadows in an image can pose challenges in computer vision tasks, such as object recognition and image segmentation. This study introduces a method to identify shadows in a single image using a fuzzy split and merge approach, a variation of the classical split and merge algorithm commonly used for image segmentation. In the proposed approach, a fuzzy predicate is employed in place of the predicate function used in the classical method. The method follows a top-down approach by recursively dividing the image into homogeneous quadtree blocks, and then a bottom-up approach by merging adjacent unique regions. Experimental comparisons with existing methods show that the proposed approach outperforms others in terms of accuracy.

Shadows are formed when light from a source is partially or totally obstructed, making it challenging to capture shadow-free images and videos. Failure to account for shadows in images can lead to significant issues such as altering object shapes, merging objects, and losing objects in various visual processes. While previous research has focused on reducing the impact of shadows, accurately detecting shadow-affected regions requires intelligent shadow segmentation methods due to the complexities introduced by factors such as self-shading, inter-reflection, non-uniform shadows, object geometry, and artifacts in image capture.

The remainder of the paper is structured as follows: a brief review of relevant shadow detection and removal work is presented in section 3, followed by the introduction of the proposed fuzzy split and merge approach and ANFIS architecture in sections 4 and 5, respectively. Implementation details and experimental findings are outlined in sections 6 and 7, and the paper concludes in section 8.

Zhu et al. developed a learning-based technique for detecting shadows in monochromatic images using shadow invariant, shadow variant, and near-black features. The method integrates a boosted decision tree classifier into a conditional random field (CRF) by utilizing a Markov random field (MRF) model for labeling.

Ruiqi et al. proposed a shadow detection method based on a relational graph of paired regions, but it is unable to distinguish between shading differences caused by surface orientation changes and those due to cast shadows. Additionally, the method fails in the presence of multiple light sources.

In another approach, a decision tree classifier is trained to detect ground shadow edges in outdoor images, and the shadow edges are grouped using a conditional random field (CRF) optimization. This method specifically targets shadows cast by objects onto the ground plane.

Murali and Govindan introduced a shadow detection method based on the mean values of the a and b planes of an LAB image. By combining values from the L and B channels, pixels with values below a certain threshold are identified as shadow pixels, with the remaining pixels classified as non-shadow pixels. However, this method is effective only for images with a maintained yellow-to-blue ratio within a specific range.

The present paper introduces a split and merge approach that utilizes a fuzzy predicate for shadow detection from a single image. The method begins by dividing the image into four quadtree blocks in a top-down manner, resulting in a sparse tree representation of the image. A fuzzy predicate is then used to identify adjacent homogeneous regions that can be merged within the quadtree blocks. The process of recursive splitting and merging is repeated, and the fuzzy predicate is trained using adaptive neuro-fuzzy inference system (ANFIS).

In contrast to the predicate function in the classical split and merge algorithm, which takes the mean and standard deviation as input, the fuzzy predicate in this approach also incorporates local maximum, entropy, and edge information of the quadtree blocks to detect shadows. The fuzzy predicate is implemented using ANFIS.

The training of the network involves both a forward pass and a backward pass. In the forward pass, the input vector is propagated through the network layer by layer, while in the backward pass, the error is back-propagated through the network.