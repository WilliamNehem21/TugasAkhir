The abstract model checker generates a transition system from an abstraction that represents a double approximation of the original system. It employs a 3-valued logic to determine the satisfaction or refutation of properties, and this 3-valued model checking problem can be transformed into two standard 2-valued problems, thus enabling the use of existing model-checking tools.

The tool supports two mainstream techniques, homomorphisms and Galois connections, to relate concrete and abstract domains. In the homomorphic approach, a concrete data value is related to a single abstract value through a mapping function, while the Galois connection approach allows a concrete data value to be related to several abstract values. The abstractor tool supports the use of both approaches and the combination of them, which involves lifting a homomorphism to a Galois connection. This enables users to provide the mapping between the concrete and abstract data domains as well as the definition of abstract functions, with the tool automatically lifting the structure to a Galois connection.

The abstractor returns the skeleton of the abstraction, and in order to generate the corresponding modal-lts, the user needs to complete the modal-lpe by providing the abstract domains and the definition of the abstract functions. The abstraction loader assists the user in managing abstract domains by providing import/export mechanisms and an automatic abstraction generator.

The export mode of the loader lists the functions needed to complete the specification, noting that the functions needed to manipulate sets are automatically generated by the tool, while the load mode is used to import the definitions. The auto mode performs the pointwise abstraction of the sorts and functions.

Subsequently, an abstract formula is interpreted dually over a modal-lts, resulting in two sets of states that satisfy the formula: one that necessarily satisfies the formula and another that possibly satisfies it. This duality allows the 3-valued model checking problem to be converted into two standard 2-valued problems, facilitating the use of existing model checking tools.

These transformations are performed in linear time. The approach differs from a previous one in that a single model and two versions of the formula are used instead of generating two different models and using a single formula. Furthermore, the tool has been applied to the verification process of several case studies, including the study of javaspaces applications, where it was used to prove safety and liveness properties for over 100 parallel processes. The tool has also been applied to perform simple abstractions for various systems.

In addition, Feaver and ABC abstract C programs by concealing variables, with the former translating the code to Promela and allowing users to define their own abstractions, and the latter directly abstracting the C code by extending the GCC compiler. Other tools such as Java Pathfinder, Bebop, and SLAM use predicate abstraction. Further details and an extended overview of tools and techniques for abstract model checking can be found in the cited references [11, 33].