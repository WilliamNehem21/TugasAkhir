the type system we propose for mil closely follows the tradition of typed assembly languages[20,21,22], extended with support for threads and locks, following flanagan and abadi. with respect to this last work, however, our work is positioned at a much lower abstraction level, and faces different challenges inherent to non-lexically scoped languages. lock primitives have been discussed in the context of concurrent object calculi, jvm[9,10,16,17], c, c--, but not in the context of typed assembly(or intermediate) languages. in a typed setting, where programs are guaranteed not to suffer from race conditions, we



tuple creation in registers. in order to initialize read-only tuples, these are created directly in registers. as long as the tuple remains local to the(single threaded) processor there is no need to protected it with a lock nor to gain permission to manipulate it. if the tuple is to be shared, the share instruction allocates memory in the heap, copies the tuple in the register to the heap, while protecting it with a lock or marking as read-only.



polymorphic types. we discussed how to introduce universal and existential types in. here we incorporate both kinds of polymorphism, in particular existential types over locks. universal and existential types over locks allow a lock variable to escape the static scope where it was declared.



whenever the buffer is empty, as in the initial state of the monitor, the operation that removes the first element from the queue is undefined. we make sure that the consumer waits until the producer has made the queue nonempty. the queue is assumed to be infinitely large, thus there is always room in the queue for producers to append new elements. for this reason, and contrasting with removing from the buffer, appending does not block.



