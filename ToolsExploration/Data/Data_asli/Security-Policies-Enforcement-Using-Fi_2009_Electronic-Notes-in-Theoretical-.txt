security enforcement mechanisms are used to prevent violation of a policy which must guarantee protection of an extensible system and its user. web browsers which upload and run applets programs or a database that allows users to submit their own queries have to ensure that the behavior of the system is not dangerous. this goal can be reached by means of a program monitor which enforces the security policy.



schneider[7,3] defined the first formal model of program monitor and studied what properties are enforceable with respect to this model. ligatti and al.[4,5,2] propose a more general model based on edit automata. the monitor is not only able to interrupt a program execution in the case when it violates the security policy but it also can modify its behavior using suppression and insertion mechanisms.



our goal is to characterize policies which can be enforced by edit automata having limited capabilities namely a finite memory. in a family of edit automata named bounded history automata is introduced and policies enforceable by these automata are characterized, but the framework is different, the input alphabet and the set of states are not necessarily finite. our results depend crucially on the finiteness of these two parameters.



let us suppose that a satisfies properties s0, s2, s4 but not property s3. there exists a cycle ci in j' which has an outgoing edge. in that case, since the automaton is pruned, this edge can be extended either in a path which reaches f, or ina path which reaches another cycle cj. because of proposition 2 and lemma 5 ci cannot reach f. so it reaches another cycle cj.



