jgrasp 1.8.7 has integrated three approaches for interacting with its dynamic viewers for data structures: the debugger, the workbench, and a new text-based interactions tab that allows individual java statements to be executed and expressions to be evaluated. while each of these approaches is distinct and can be used independently of the others, they can also be used together to provide a complementary set of interactions with the dynamic viewers. in order to integrate these approaches, the jgrasp visual debugger, workbench, and viewers had to be significantly redesigned. during this process, the structure identifier, which provides for the identification and rendering of common data structures, was also greatly improved by examining the examples from 20 data structure textbooks. the overall result of this integration effort is a highly flexible approach for user interaction with the dynamic data structure visualizations generated by a robust structure identifier.



jgrasp 1.8.7 provides numerous ways for the user to interact with the data structure visualizations:(1) the debugger,(2) the workbench, and(3) a new textbased interactions tab. each of these is briefly described below and then more fully with examples in the sections that follow.



the most common way to open a viewer on a data structure object is via the debugger. the user simply sets a breakpoint on a statement near the creation of the data structure, and runs the program in debug mode. after the program stops at the breakpoint, the user single steps as necessary until the object is created, and then opens a viewer on the object by dragging it from the debug tab. as the viewer is opened, the structure identifier determines the particular type of data structure and then renders it appropriately. when the user steps through the executing program, the viewer is updated to show the effects.



in addition to interacting with the data structure visualizations via the debugger, jgrasp allows the user to interact with viewers via the workbench. objects can be created and their methods invoked via menus and buttons on the uml class diagram and/or the source code edit windows. when the user invokes a method on the object(e.g., to insert a node into the data structure), the visualization is updated to show the effect of the method.



both the method and degree of user interaction with software visualizations have been shown to be primary contributors to effectiveness. research indicates that passive modes of interaction with visualizations, e.g., only watching an animation of an algorithms behavior, are not as effective as more active engagement strategies, e.g., having the user manipulate elements of the visualization or respond to prompts[12,7]. the context in which the visualization appears has also been shown to play a vital role in effectiveness. these issues are now widely seen as fundamental to(2) using the workbench menus and dialogs from the uml window or the edit window, and(3) entering source code into the interactions tab for direct execution. in each of these approaches, the viewer is opened on an instance by dragging it from the debug or workbench tab. below, we will begin by using the debugger approach and then we will show how the user can interact with the visualization using both workbench and text-based approaches.



