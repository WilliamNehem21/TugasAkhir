The commercialization of concurrent software, e.g. operating systems, has ensued in their design gaining more importance. System software such as operating systems is constantly extended for improvements as well as to support new features and hardware. During the design of concurrent system software, certain decisions such as reusability and adaptability are essential [2].

The necessity in the principle of separation of concerns deals with one issue at a time, originally addressed by [3, 4]. The principle of separation of concerns is the major of concurrent software development. Separation of concerns leads many benefits. Although reusability and adaptability recognized, nowadays there is none commonly acknowledged approach tips programmers and developers how preeminent achieve reusability and adaptability. Developers and programmers have to deliberate how separation of concerns can address and how a quantity of aspects in the system can take [5] not only in the design, but also in an implementation of the system software. The better separation of concerns is, the better reusability and adaptability of both functional components and aspects in the system is.

Design patterns played roles in the concurrent aspect framework. We use abstract a factory pattern and a bridge pattern to create aspect components. A factory pattern uses to isolate between an asset abstraction and the asset objects. The obligation and the process of creating asset objects have been responded by a factory pattern. The asset object appears only once in a functional component instantiated. When an asset object has been modified, the framework promotes consistency. A bridge pattern helps to prevent a permanent binding between an asset abstraction and an asset implementation. Using a bridge pattern, asset abstractions and asset implementations can freely association and extend. Changing in the implementation of an asset object or an asset abstraction does not result any effects on functional components. A proxy pattern uses to control access asset components and allow organization responsibilities when an asset component is retrieved.

The concurrent aspect framework does not only support adaptability, but also reusability. The functional components and asset components are independently thought and designed. The framework can achieve both a vertical and horizontal reusability of both functional components and asset components. The moderator uses design patterns that weave functional components and system assets together. Adaptability can achieve by using design pattern [2]. The pros of using the moderator are when a new system asset added to the system. There is no need to make any modification of the moderator. Reusability can achieve in two ways: - a vertical adaptability or a horizontal reusability.

First, a vertical reusability can achieved. Asset components on the higher layer can use abstractions of asset components on the lower layers to implement. To develop rapid concurrent software, this promotes not only reusability, but also cost and time reduction. Asset object in the upper layer can specify and reuse asset object in the lower layer that provide a generally specified asset. Channing of specification of asset object in the lower layer will have affected asset objects in the upper layer. This would make asset objects in the concurrent system consistent by separately relatively designed. Second, a horizontal reusability can achieved. To develop various asset objects in different domain in the same layer, asset interface of that layer can

We achieve extraction both functional components and spreading concerns through a single component, called an asset component. A moderator component can coordinate the interaction of functional components and aspect components via joinpoints. System assets can reuse and adapt without interfering any functional components. Functional components can reuse and adapt without interfering any system assets as well. The concurrent aspect framework not only promises reusability and adaptability, but also lets developers find any proper language for the system. The framework can address various asset and functional components. This technique can reduce time and cost to develop concurrent software. A weakness of this approach is an increasing number of classes.

