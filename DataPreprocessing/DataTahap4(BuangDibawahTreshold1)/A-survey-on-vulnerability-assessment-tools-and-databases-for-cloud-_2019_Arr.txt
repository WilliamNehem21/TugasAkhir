Cloud computing is a novel computing paradigm that has revolu- tionized the way applications are designed and provisioned. It promotes the use of computational and networked resources on demand to support application provisioning. As such, resource management is outsourced to cloud providers enabling to reduce or diminish operational and man- agement costs.

The cloud computing success has also led to raising the abstraction level via the supply of extra service types above the infrastructural ones. In particular, platform services are offered to reduce the burden in creating and managing the execution environments within the leashed resources. Further, the scope of such services has been also extended to facilitate cloud application design and development.

Virtualisation also impacts security as physical hosts are shared by users in the form of virtual machines (VMs). This can raise issues where malicious users can see the data stored in a VM or take control over all VMs by attacking the hypervisor. Further, as applications are distributed over public clouds, networked attacks can be performed over them which can, e.g., cause crucial information to be leaked during transmission or application overload based on denial-of-service attacks.

Security services can be of a different nature, while they be also reactive or preventive. Reactive services can detect an attack and possibly address it. For example, intrusion detection and protection systems can be used to protect applications from network attacks by, e.g., detecting denial-of-service attacks and blocking their origin IPs. Preventive ser- vices prevent a security incident from happening by detecting application areas that are vulnerable to certain attacks. The latter service kind can take different forms.

This article focuses on vulnerability scanning tools and databases. The reason for this is that, while malware and antivirus software is well- known and adopted by both organisations and individuals, vulnera- bility scanning tools are not widely used in practice. Further, it is hard for a practitioner to choose the right vulnerability scanning tool due to the great tool diversity and varied coverage. As such, this article aims to guide the practitioner in making an informed decision about which vulnerability scanning tool and database to select for his/her application. Such a selection relates also to particular challenges which have not been currently confronted in research, thus supplying an invaluable contri- bution to the academic community. In addition, this article contributes towards the identification of those places in the application lifecycle where vulnerability scanning can be performed and supplies valuable insights towards better securing cloud applications. Finally, this article investigates and proves that vulnerability scanning tool orchestration can be the answer towards higher vulnerability detection coverage.

The scanning via a tool can be performed in two different modes. In the internal mode, the tool is installed inside the application and attempts to scan its components, hosted in VMs or containers. Such a mode can address any application component kind due to the potential use of both static and dynamic scanning methods. Thus, its scanning accuracy is increased. Further, it leads to reduced communication overhead as most of the communication occurs within the same hosting environment. However, it can have the greatest impact in terms of interfering with the application performance as it can steal precious resources from the same hosting environment. In the external mode, the scanning is performed externally to the application and relies on the endpoints on which the application web-based components reside. As such, only the latter component kind can be confronted. This scanning mode has the advan- tage of conducting the scanning without interfering internally with the application hosting environment. However, it might not be able to attain the highest possible scanning accuracy as it cannot exploit static scanning methods while it increases the communication overhead in the applica- tion system.

In a client-server architecture, a server remotely orchestrates the execution of different agents, either residing on the application VMs/ containers to perform the scanning internally or on different VMs to conduct an external scanning. Such an architecture can more easily scale while it can accelerate the scanning by orchestrating the parallel agent execution. In a standalone architecture, the scanning tool is installed in one place, either internal or external to an application, and then initiated to perform the scanning. Such an architecture variant/class has the main deficit that the orchestration of the installation, execution and report merging of the respective vulnerability reports burdens the user.

architecture classes, i.e., client-server and standalone, are orthogonal to this mode. This is depicted through the use of different colours in the respective components involved mapping to the four possible architec- ture scenarios (associated with all possible combinations between the two scanning modes and architecture classes).

As such, vulnerability databases (VDBs) are usually employed to cover the information to be included in a vulnerability scanning report. VDBs usually include some common attributes dedicated to properly identifying and explaining vulnerabilities. They might also include extra information, like which artefact is affected and how the vulnerability could be addressed. Many VDBs also conform to standards that support a kind of standardised identification or determination of the information to be covered.

executor needs not be solely the system admin. The admin is mostly responsible for application deployment and provisioning, e.g., on vulnerabilities covering the OS level or the application execution environment in general. However, the application devop can also be involved, when issues regarding the application code must be confronted.

vulnerabilities only affect the application component code. As such, only certain application components will need to be modified, thus going back to the Development lifecycle activity. Then, the physical management flow will be followed leading to application redeployment and testing to check whether the vulnerabilities have been properly addressed without breaking the application integration.

Based on this manual and time-consuming practice, this paper aims at evaluating vulnerability scanning tools against a criteria-based frame- work. Such an evaluation can unveil which tools prevail and according to which aspects. We put special focus in the latter case on the trade-off between scanning accuracy and time to which we add the vulnerability coverage dimension.

A certain procedure for tool search and selection was followed, comprising two main steps: (a) actual search of the tools; (b) selection of the right tools from those discovered based on a set of inclusion criteria. The search relied on a two-front approach. In both fronts, we have relied on a set of keywords deemed as most relevant for the search. This set was slightly differentiated depending on the concerned artefact

The second search front was formulated to cover prototype tools or databases from academia that cannot be found easily from a web search. Such tools could be increasingly improved and extended due to the relative research and development tasks conducted by the research or- ganisations producing them. To discover such tools, we employed well known academic data sources, i.e., Web of Science and Scopus, enabling us to have a full literature coverage.

For the survey on vulnerability databases, we focused on a compar- ative evaluation based on the very nature of research question Q1. Thus, we created a set of evaluation criteria which were either devised by us or drawn from the literature. All criteria were produced by considering two aspects: information coverage, capabilities & support. More details are supplied in Section 4.

Most VDBs focus on any kind of vulnerability; very few have a more restrained scope. For risk assessment, many VDBs adopt Common Vulnerability Scoring System (CVSS) while very few just provide an impact measure. Some VDBs supply both impact and risk information for each vulnerability.

Access control mode: A tool might need to be executed based on certain access control rights to be operationally successful. Thus, if the goal is to find OS issues, the tool should have privileged access to check the OS-specific part of the hosting component (e.g., VM). This criterion also correlates to the usage level as when that level is non-intrusive, the access control mode can be the least critical.

Standards. Both CVE and CWE seem to be mostly supported. This is logical as these standards enable to better characterise a certain vulner- ability and classify it. Next comes CVSS followed by CPE which have slightly more than one third of support. This indicates that the need to associate vulnerabilities to the components concerned has not been well recognised yet while the capability to assess the risk related to a vulnerability seems to be neglected.

Community. We have found that most tools have their own commu- nities, usually maintained by the tool provider. Such communities can interact with the tool provider via emailing lists and blogs, while they can also participate in the tool development. The latter is the cornerstone of open-source communities, usually built around interesting or innovative tools that become sustainable via their participation. As such, security software providers follow faithfully this model which is widely adopted in the software world.

We must appraise the existence of certain organisations, i.e., NIST and OWASP, that promote in the best possible way security software. NIST focuses more on developing standards aiming to bridge interoperability issues, while OWASP focuses on promoting innovative tools, creating tool benchmarks plus classifying both tools and vulnerabilities. Both organisations appear twice as community members in two respective scanning tools. This also indicates that these organisations have a great belief in the dynamics and capabilities of the tools they support.

Similarly, more than half of the tools support information gathering. This is also logical as before any kind of vulnerability assessment is performed, the target object needs to be scanned to find the right places where vulnerability assessment will focus, collected in an information gathering step. Depending on the object of focus, information gathering can take different forms. For pure web application scanners, spider software is exploited to find all actual web pages from which the scan- ning can be performed. For more sophisticated scanners, information gathering involves checking the whole host, finding open ports and attempting to infer the components that run on such ports.

Object. Almost all vulnerability scanners can operate over a web application. However, as the next paragraph and Section 5.2 will show, each scanner might have a different focus on the web application vul- nerabilities by, e.g., concentrating only on specific kinds, like the most usual ones.

Most old scanners focus solely on web applications as the target scanning object. The main rationale is that application developers would care most how web applications are vulnerable in their operation space (e.g., set of web pages) from the outside. However, as an application might comprise multiple components and might run on vulnerable media, it is apparent that the focus should now move to holistically cover the whole application system. This is actually grabbed by both recent scanners and academic approaches. A good example for the former case is OpenSCAP that covers not only pure web application but also cross-level system vulnerabilities. In the latter case, academic approaches extend an almost complete vulnerability scanner, like OpenVAS, to make it perfect. Vulnerability Coverage. By considering all tools, it seems that only OpenVAS and OpenSCAP have the highest vulnerability coverage along with tools that re-use them. By considering that: (a) the percentage of these tools is less than half of the overall tools; (b) OpenVAS and OpenSCAP do not focus on scanning the whole web application opera- tional space, it is easy to understand that such a result marks the need to

In fact, this might signify that security experts must now move to a new direction: as there exists a sophisticated state-of-the-art tool, the community must focus on both improving and evolving it over time to also detect new vulnerabilities via the production of respective plugins. In fact, this already occurs for the 2 aforementioned tools. In the context of Network Vulnerability Tests (NVTs) or OVAL definitions, OpenVAS and OpenSCAP, respectively, rely on a huge community effort, involving a great amount of OS and software providers contributing to the defini- tion and detection of vulnerabilities.

Inferencing. Only one tool, Vulcan, supports some kind of inferencing. This academic tool employs ontology-based reasoning to support infer- encing. Restricted to the current tool functionality, this inferencing takes the form of discovering vulnerabilities of component agglomerations apart from those of individual components. However, this ontology- based reasoning approach is quite promising as it could be extended to cover the derivation of extra kinds of vulnerability-related knowledge; these kinds are explained in Section 6.

Counter-Measures. Also correlated to mitigation plan production, this criterion highlights the need to associate vulnerabilities with the ways they can be addressed known as counter-measures. In contrast to the previous criterion, though, the situation is much better as almost half of the tools support this criterion. This means that the need to report this correlation kind to users has been well recognised and realised. Further, most tools exhibiting this feature support standards like CVE or CWE which do provide counter-measure information. This is another benefit related to the support of standards.

OpenSCAP seems to be the sole tool going beyond counter-measure reporting to counter-measure enforcement. In particular, through sup- porting SCAP, this tool can mitigate the vulnerabilities found in some cases via automatic path application. This is the right direction to be followed by all other scanners to really advance their usage and increase their added-value.

Tool Coverage. Scanning tools re-use a great variety of sub-tools, spanning many OWASP taxonomy categories, including antivirus pro- tection, information gathering, network scanning, and data validation testing. From these categories, we can discern Nessus and OpenVAS, as those sub-tools mostly re-used due to their almost perfect coverage extent, as well as nmap, as the most popular and well-adopted informa- tion gathering/network scanning tool.

Best Tool Nomination for the Functionality Category. In this criteria category, there is not a clear winner. We can actually see 2 main tool partitions: (a) top approaches which do not support inferencing; (b) the Vulcan academic approach which supports inferencing but has a very low coverage and focuses only on web applications as target objects. The latter also indicates that if Vulcan was able to use Nessus or OpenVAS, we would surely nominate it as the best in this category, as this would immediately improve in an ultimate manner its two main deficits.

In the first partition, the academic tool AWS-Vuln is the clear winner. It not only has the best possible categorisation and vulnerability coverage but also re-uses a great sub-tools set, which constitutes another proof of its completeness. From the pure tool world, we can discern OpenVAS, which, however, does not cover additional security scanning categories. From the 2 best result partitions, academic tools can be discerned.

Tools that employ a client-server architecture are about one third in number. They usually exhibit a better vulnerability coverage and focus on more advanced, IT-security expert users. As such, in contrast to the previous paragraph argumentation, these tools should employ a client- server architecture as the most natural way to completely cover vulner- abilities across the whole application plus the most flexible and capable way in terms of administering the scanning. Due to these advantages, it is worth sacrificing slightly the simplicity to better attract the main target users, i.e., IT-security experts.

Modularity. A modular tool can be individually extended as needed. It also allows making a focused scanning by using only those modules necessary for detecting the right vulnerabilities for an application. This need for modular tools seems to be picked up by the tool providers as most tools are modular.

exhibited by particular kinds of applications or their components. Partial modularity, on the other hand, is a limited modularity form that implies the existence of one profile from which the user can select some of the scanning rules contained. In some cases, the addition of new rules might be also possible in such a profile.

The evaluation results with respect to the first OSsupport type signify that most tools support Linux-based OSs. This is well expected by considering that such OSs have been deemed more secure (at initial deployment time without any extra hardening support [48]). Windows come next with around two third of tools able to operate in Windows environments. OS-X comes third but still having more than half of the tools supporting it.

coverage plus its administration. It might also raise security concerns about how safe are clients operating in admin mode in a client-server architecture. Thus, tools operating in a normal, user mode are less intrusive and do not access critical assets via internal scanning. However, as such assets are uncovered, vulnerability coverage is low. On the other hand, an admin mode enables accessing (possibly infected) critical sys- tem assets and thus caters for a better vulnerability coverage. However, acting in this mode comes with issues that might involve the incautious exchange of credentials and the possible scanner infection thus exposing the respective system to great vulnerability.

overall evaluation results of this criteria category, OpenVAS and OpenSCAP can be considered as the best. OpenVAS seems better in terms of OS support while OpenSCAP is better with respect to hardware re- quirements. As the OS support can be less important than hardware re- quirements, we might then nominate OpenSCAP as the best. In both cases, both tools seem to support only one kind of architecture (deploy- ment). Thus, we can deduce that there is still room for improvement of these tools.

Based on the above results, the best tool with respect to the overall scanning accuracy and time is FindSecurityBugs. In fact, this tool ach- ieves a high accuracy on many vulnerability areas. This might be regar- ded as unexpected as this tool only includes a small set of security rules. However, it can be well justified by the fact that this tool operates directly on the source code so it can indicate with a higher accuracy if a certain issue holds.

The FindBugs tool [82] enables conducting static analysis to assess Java source code quality. This extension enhances FindBugs with the capability to find security bugs. However, it does not enable filtering the security bug detection rules. Only explored possibility is to either apply only the security rules or all bug detection rules, i.e., including those originally

areas but exhibits good accuracy performance only in two of them. Compared to FindSecurityBugs, it is slightly better in two vulnerability areas: command injection and path traversal while much better in cross-site scripting and SQL injection. This signifies that the agglomeration of these two tools will enable to have a better vulnerability area coverage and thus reach a much higher overall accuracy level. However, some vulnerability areas are not yet deeply covered, including: command in- jection, LDAP injection, path traversal, trust boundary violation and XPath injection. This outlines the need to consider another scanning tool to complementarily cover more deeply these areas.

Due to the main benefits that semantic technology brings about, we expect a proliferation of semantic VDBs in the near future. Currently, only Vulcan offers a semantic VDB. However, this VDB is not rich enough and coupled with the right rules to allow inferring various knowledge kinds. Further, it seems to manually and not automatically integrate

CWE seems to propose a rich vulnerability and threat taxonomy. However, this taxonomy should be extended accordingly to become a semantic security meta-model able to both cover the most important security concepts and their relations. This coverage along with semantic rules incorporation would then enable inferring further relations be- tween security concepts which would never be acquired by a syntactic modelling approach. Apart from this, such relations would improve the scanning accuracy as explicated below.

The first direction indicates that, as there are many special-purpose standards, most of them must be supported by the scanning tools so as to become more complete. Further, this promotes interoperability, especially in terms of tool re-use or orchestration, as it will be shown in the next sub-section. For instance, support to CVE and CVSS can enable to merge vulnerability reporting results from different scanning tools. However, as some standards seem already prevailing while others promising, possibly different priorities must be given to different stan- dards for their adoption. In our opinion, apart from supporting CVE, CWE and CVSS, there is a great need to also support OVAL and SCAP. The first can enable a uniform way to specify and address vulnerabilities while the second their automatic mitigation. The support to SCAP will be further elaborated in a later sub-section.

the use of scanning tools and highlight the criticality of addressing application vulnerabilities; (b) organisation of conferences, workshops and competitions to highlight recent vulnerability scanning advance- ments as well as the top tools possibly categorised under different competition areas; (c) supply of benchmarks or scanner selection tools to assist users in evaluating and selecting the right scanners; (d) supply of interfaces and mechanisms via which valuable user input (e.g., feedback, plugins) can be provided in a more natural and user-intuitive way.

While most tools provide some engagement support, this is not necessarily the case for academic tools. Such tools, while presented in academic forums, are not always made publicly available or offered as open-source. Further, such tools do not supply usual engagement facil- ities like mailing lists and code development portals which hinders their sustainability and further evolution.

Second, as witnessed by the empirical evaluation, even web appli- cation scanners are not so good and must be complemented by source code analysis tools. If fact, as advocated in AWS-Vuln, extra tools (e.g., antivirus) apart from vulnerability scanners are needed. Thus, it is actually advocated that there is a need to orchestrate a great number of different tool kinds to achieve the best possible coverage against the whole application system in a continuous manner. Only in this way, applications can be permanently and fully protected during their whole lifetime as both applications, their components plus penetration methods and techniques continuously evolve over time.

There is a need for a proper agglomeration strategy encompassing the appropriate use of the right tools of the right kind at the right moment. For instance, vulnerability scanning might be decided not to be performed in conjunction with application protection as a very heavy load could be put on the application, especially as protection testing is performed in an intrusive mode. Further, it could be decided that source code analysis could be performed each time the applica- tion is modified and in random moments in case we need to detect unexpected and irregular modifications in the application source or binary code.

pattern mining techniques over security logs. While this is a practice currently followed in a manual manner by well-known software pro- viders, it could be an added-value to automate and integrate it in the cloud application management system. This automatic rule production would reduce detection costs and accelerate application evolution to- wards resolving the vulnerabilities detected. By also employing an approach towards properly identifying and publishing vulnerabilities, the community will benefit via: (a) the reduction in effort and time in vulnerability publishing; (b) the rapid addressing of new vulnerabilities.

The vulnerability world is dynamically evolving constantly such that new vulnerabilities are detected each day. As such, a user is usually faced with a great number of vulnerabilities inferred just for a single applica- tion. While a prioritisation of vulnerabilities based on their risk could enable the user to focus more on the most critical ones, we believe that this should be complemented with the capability for automatic vulner- ability mitigation. The latter can enable the user to be burdened only by those vulnerabilities still critical and not automatically solvable.

Going beyond topology models, there can be cases where different user applications communicate to each other. Thus, one serious vulner- ability in one application might have the risk to be propagated to another. However, by knowing the topology models of applications that communicate to each other, the scanning process can focus on also checking cross-application vulnerabilities (e.g., side effects of wrong transactions initiated by one, already infected application and handled by another application). This is a novel research direction, not considered before in the literature.

The way this can be resolved is twofold. First, by usually inspecting each application from the pair in an individual manner. This relies on the rationale that each application could be considered as an end-user for the other. As such, this end-user could be considered as one source of vul- nerabilities, usually checked by data validation testing and other scan- ning technique kinds. Second, by allowing users to supply their own checks that focus on detecting those inconsistent system states which could make the whole system or an application as vulnerable. This can be considered as a kind of user-specific vulnerability detection, enabling a scanning tool to go beyond the detection of known vulnerabilities to- wards application/domain-specific ones. This would certainly contribute to a better tool completeness and suitability. Coupled also with the ability to define certain mitigation actions when anticipating such in- consistencies would make the vulnerability scanning tool a full, advanced application security protection software, further enhancing its added- value and applicability.

Malware and antivirus software is widely adopted by both organisa- tions and individuals due to the continuous and, in many cases, sophis- ticated risk mitigation support that it features. However, such software takes a reactive approach in dealing with security issues. On the other hand, while vulnerability scanning tools follow a proactive approach by identifying those places in the application system that need improvement to avoid security issues from happening, they are not widely used in practice. Further, even when decided to be adopted, the great tool di- versity and varied coverage makes it hard for a practitioner to choose the right vulnerability scanning tool. To this end, this article offers the following contributions: (a) it guides practitioners towards making an informed decision about which vulnerability scanning tools and data- bases to select for their applications. Such a guidance is supplied through a comparative evaluation approach that relies on a two-level, hierar- chical comparison criteria framework for both scanning tools and data- bases. The evaluation results supplied unveil which are the best scanning tools and databases per each criterion, category of criteria and in overall;

Once the right set of vulnerability categories was identified, the second step of the followed approach involved the assessment of each vulnerability scanning tool considered based on whether it covers each of the categories identified. Towards this goal, we have relied both: (a) on the actual findings2 from a previously conducted research that is reflected in sectoolmarket. com about the coverage of a certain set of open-source vulnerability scanners as well as (b) on an individual evaluation, conducted by us, of those scanners which were not included in the aforementioned evaluated set.

It might be observed that some scanning tools have the same coverage. This is due to the fact that all these tools rely on OpenVAS. As we were not able to assess them easily over their actual coverage, we have considered that their accuracy could not be less than that of the sub-tool that they exploit. In this sense, as the coverage of OpenVAS is the best possible, mapping to the top coverage partition, our consideration is precise according to the scale that has been adopted. Further, we should also note that we were not able to assess Vulcan as its code was not available. However, based on its respective documentation, it relies on a certain limited scanning framework which is expected to have a very low coverage. So, our estimation should be correct here.

