Being a vital element for the different domains such as communication system, authentication, and payment, multiple attackers manipulate the Card fraudulently in order to access to the services offered by this one. Smartcards are often the target of software and hardware attacks. The most recent attacks are based on fault injection which modifies the application behavior. By disrupting the Java Card operation, the fault attack modifies the compiled code intended to be executed in order to meet what the attacker wants instead of the initial program. So, to tackle this problem, we suggest two classification and detection methods based on artificial intelligence, especially the neural and Bayesian networks. Then, we compare between the obtained results of these two methods in terms of the detection rate.

chip operating system is contained in ROM and the applications are stored in the EEPROM. A smartcard can also be viewed as an intelligent data carrier which can store data in a secure manner and ensure the integrity, the confidentiality and the availability, then the security of data during transactions. Security is one of the important issues in smartcard development and the level of threat imposed by malicious attacks on the integrated software is of high concern. Multiple means are operated to return the secret information, fault injection seems to be the most efficient and effective one. In order to prevent and detect such attacks, smartcard manufacturers try to implement new options in their operating systems. Software fault injection is a technique of producing errors into the program, this technique allows attackers to analyze the system behavior, study its internal state and modify the application execution in order to deduce secret information.

Smart cards are nowadays used throughout the world on a daily basis, wherever the notion of digital security appears. Smart cards have strong constraints as for computing power and for memory size. Based on the Java technology, the Java Card architecture is compound of different layers on top of the smart card hardware and the operating system. The most important component is the Java Card Runtime Environment which includes the Java Card Virtual Machine (JCVM) and the API. The JCVM can somehow be seen as an abstract processor with its own instruction set and internal mechanisms. The JCVM provides several mechanisms enforcing the security of the system, based on the security mechanisms inherited from the standard Java specifications and some specific to this platform. As specific component dedicated to the security the firewall enforces applications isolation with the concept of security context. Due to limited memory an important component for the security the Byte Code Verifier (BCV) must be executed on a host platform. Because of the sensitivity of the data they contain and of their inherent robustness, smart cards are the target of particular kinds of attack: hardware attacks.

Developed by Bonech, DeMillo and Lipton [3], the fault attack aims to disrupt the physical environment of the processor in order to produce errors. Initially, the fault attack targeted public-key cryptographic algorithms such as RSA and DES. Faults are injected into the chip by perturbing its environment execution.

The strengths of the neural network reside in learning, objects identification and a better interpretation. Because of that, there has been a reason for using it to detect intrusions [13]. Since, a strong and intelligent neural network is not necessary large, we thought to implement it into a smartcard in order to detect the fault attacks.

This is what we have done previously when we have used the physical parameters of the card to aliment the network. Theoretically, the principle of implementation is possible and the system designed in [14] is able to detect any changes made in the electrical properties. But practically, these parameters are under the control of the attacker. Therefore, it is necessary to change the entry points of the network.

To test the network, it is necessary to pass on new patterns, in our case, new attacks. If the network returns the expected values in most cases, we say that the network can detect attacks. In the case of the debit() function, the network was able to detect 126 invalid paths from 131 and no false alarms (from 7 valid paths) was mounted.

