Plants are often exposed to environmental stresses that can cause a vast impact on growth and production. Plant stresses can be biotic and abiotic. Biotic stresses are caused by pathogens such as fungi, bacteria, viruses. They can also be caused by pests. On the other hand, abiotic stresses are caused by heat, drought, cold, salinity, among others (Suzuki et al., 2014).

Classifying plant biotic stresses and estimating their severity is a complex task due to several factors: lack of precise delimitation of the lesion area; variation of characteristics between lesions of the same type (such as color, shape, and size); the presence of multiples lesions on the same leaf; and the fact that different stresses may have similar symptoms (Barbedo, 2016). In the last few years, deep learning tech- niques have been presenting promising results in image classification and recognition (Goodfellow et al., 2016). These techniques have even been used successfully in the classification of plant diseases (Boulent et al., 2019), emerging as a useful tool to assist farmers and agriculture professionals.

However, traditional machine learning and deep learning tech- niques present some limitations, among them is the need for large- scale datasets to the models generalize well (Wang et al., 2020). So, new methods were proposed aiming to create models that generalized well with fewer data. This led to the proposal of meta-learning methods (Hospedales et al., 2020), and in particular, the few-shot learning methods.

As pointed out, there are several works in the literature that applied deep neural networks for plant disease recognition. Most of them make use of traditional convolutional neural networks in different crops, obtaining accuracy values over 90% (Mohanty et al., 2016; Rahman et al., 2018; Elhassouny and Smarandache, 2019; Geetharamani and Pandian, 2019; Barbedo, 2019).

In this work, we explore the use of few-shot learning and feature extraction for plant stress recognition and severity estimation. To experiment, we will use a dataset of biotic stresses in coffee leaves. The remainder of this paper is organized as follows. Section 2 pre- sents some fundamental concepts on deep learning and few-shot learning. Moreover, we also describe the methods Triplet Network and Prototypical Network used in this work. Section 3 presents the experimental setup and results. Finally, in Section 4, we draw some conclusions.

In the pooling layer, the feature maps from the convolution layer are spatially reduced by a pooling (also known as downsampling) opera- tion. The pooling operation statistically summarizes regions from the activation maps, reducing their size while maintaining their main fea- tures (Goodfellow et al., 2016). Two common ways of performing the pooling operation are maximum and average polling. In the maximum pooling, we summarize the set of values by its higher value. On the other hand, in the average pooling, we summarize the set of values by calculating the average value.

The fully connected layer consists of a typical feedforward net- work, also known as multilayer perceptrons (MLPs) (Goodfellow et al., 2016). They usually act as the classifier in the CNNs, using the features extracted by the previous layers as input. In the con- text of CNNs, the inputs fed to a fully connected network are the feature maps from the convolution and pooling layers. Since the feature maps are tensors and the fully connected network receives a vector as input, a flatten operator is applied to the maps, returning a vector.

A CNN architecture can also be used without a fully connected layer, returning the flattened vector as output. This vector is sometimes re- ferred to as an embedding. This kind of architecture that produces em- beddings is extensively used in the few-shot learning context, as presented in the next section.

One of the main shortcomings in machine and deep learning is the need of large-scale data to properly generalize (Wang et al., 2020). To address this issue, the meta-learning paradigm was proposed (Hospedales et al., 2020), and, in particular, the few-shot learning methods (Wang et al., 2020).

Most FSL methods proposed are for supervised learning problems such as image classification and object recognition. Although not ex- plored in this work, one of the main uses of few-shot learning is learning to generalize to new classes unseen during training (Wang et al., 2020; Hospedales et al., 2020; Chen et al., 2020).

Address the few-shot learning problem by learning to fine tune. There are two main approaches to this. One of them attempts to learn good model initialization (i.e. parameters of the network) and the other fo- cuses on learning the optimizer. Both approaches diminish the need for data or the number of gradient steps to train the network.

Address the few-shot learning problem by learning to compare. These methods attempt to decrease the need for data by training a model to learn the similarity between images, instead of training the model to sim- ply classify the input image. Intuitively, if a model can distinguish two dif- ferent images, it can learn to classify unseen classes with few data. These methods are also known as embedding learning methods.

In our work, we focus on distance metric learning-based, also known as embedding learning, methods. This class of methods was chosen due to the promising results in image classification tasks. In the next section, we provide more insight and definitions about this class of methods.

Specifically, in the image classification task, the embedding function is usually a CNN without the fully connected layer, since the flattened vector is a lower-dimensional representation of the input data. We may also refer to the embedding function as feature extractor. The sim- ilarity function is usually a distance function like the Euclidean or cosine distance, depending on the model used.

The Triplet Network (TripletNet) (Schroff et al., 2015) consists of a few-shot learning model that uses three images as input (thus the name triplet): anchor, positive, and negative. The anchor consists of the image that we want to classify. Next, the positive consists of an image that is from the same class as the anchor. Lastly, the negative consists of an image from another class (that is not the anchor's class). The ob- jective is to produce a representation of the inputs, so that the anchor is similar to the positive and different from the negative.

(Koch et al., 2015), Triplet Network (Schroff et al., 2015), Matching Net- works (Vinyals et al., 2016), Prototypical Network (Snell et al., 2017), and Relation Network (Sung et al., 2018). In our work, we only used the Triplet Network and Prototypical Network. The Prototypical Network was selected because, despite being a relatively straightforward method, it still achieves competitive performance when compared to more

embedding for each example xi from class n. After computing the prototypes, the embedded query sample f(x) is compared with the prototypes using a distance function. Unlike the TripletNet, the ProtoNet can produce an output without the addition of another classifier. Given the distance function d, the ProtoNet can produce a distribution over classes for a query x based on a softmax over distances to the prototypes (Snell et al., 2017):

In this section, we present and diwescuss the experimental results ob- tained by the few-shot learning methods Triplet Network (Schroff et al., 2015) and Prototypical Network (Snell et al., 2017) in the context of plant stresses classification and severity estimation. Besides using the TripletNet, and ProtoNet we also evaluated several backbones (feature extractors) in each method to assess the contrast among different feature extractors. First, Section 3.1 presents the datasets used in the experiments. Next, Section 3.2 presents the experimental setup used. Section 3.3 presents and discusses the results obtained by the methods used in the experiments.

The datasets used in this work were developed by Krohling et al. (2019). The data consists of images of arabica coffee leaves affected by common biotic stresses. The images were captured using smartphones. The datasets are divided in two sets: Leaf Dataset and Symptoms Dataset. The data used is available for download in GitHub.1

The experiments performed were divided in three: Experiment I, Ex- periment II, and Experiment III. Experiment I consists of the biotic stress classification in the Leaf Dataset. Experiment II consists of the biotic stress classification in the Symptoms Dataset. Finally, Experiment III consists of the severity estimation in the Leaf Dataset.

In order to evaluate the models' performance we computed the fol- lowing metrics: accuracy (ACC), precision (PR), recall (RE), and F1-score (F1). Since the metrics precision and recall are only defined for binary classification, we computed the macro average over the five classes. We also computed the average training time per epoch.

The experiments were carried out in the Google Colab3 environment with 16GB RAM and a Tesla T4 GPU. All the code was written in Python, with the help of several open-source libraries: PyTorch (Paszke et al., 2019), Learn2Learn (Arnold et al., 2020), NumPy (Harris et al., 2020), Seaborn (Waskom, 2021), Matplotlib (Hunter, 2007), and Scikit-learn (Pedregosa et al., 2011). The source code used in these experiments is available in GitHub.4

The best result reported by Esgario et al. (2020) in the biotic stress classification task using the Leaf Dataset was 95.63%, using a ResNet50 as classifier. This result is similar to ours, and the 5-way 5-shot ProtoNet with MobileNetv2 backbone even slightly outperformed it, with an ac- curacy of 96.03%.

interesting thing to note is that the results obtained in the biotic stress classification task were better in the Symptoms Dataset than the ones obtained in the Leaf Dataset. This is in agreement with those provided by Esgario et al. (2020) and Barbedo (2019). Since the images in the Symptoms Datasets focus only on the lesion itself, the network has an easier task of detecting the region of interest. For example, in the Leaf Dataset, the networks have to deal with background and non-injured areas in the leaf, which makes the classification task harder.

The best result reported by Esgario et al. (2020) in the biotic stress classification task using the Symptoms Dataset was 97.07%, using a ResNet50 as a classifier. This result is similar to ours (96.72%). This dif- ference is about 0.35% and it may be due training variation.

The best result reported by Esgario et al. (2020) in the severity esti- mation task using the Leaf Dataset was 86.51%, using a ResNet50 as a classifier. In this particular task, the few-shot learning methods achieved a better result, with an accuracy of 93.25%.

