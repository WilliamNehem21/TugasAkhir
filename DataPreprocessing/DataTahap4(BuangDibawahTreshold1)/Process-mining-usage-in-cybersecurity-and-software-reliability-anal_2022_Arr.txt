The digitalization of our society is only possible in the presence of secure and reliable software systems governing ongoing critical processes, so-called critical information infrastructures. The understanding of mutual interdependencies of events and processes is crucial for cybersecurity and software reliability. One of the promising ways to tackle these challenges is process mining, which is a set of techniques that aims to mine essential knowledge from processes, thus providing more perspectives and temporal context to data interpretation and process understanding. However, it is unclear how process mining can help and can be practically used in the context of cybersecurity and reliability.

Therefore, in this work, we investigate the potential of process mining to aid in cybersecurity and software reliability to analyze and support research efforts in these areas. Concretely, we collect existing process mining applications, discuss current trends and promising research directions that can be used to tackle the current cybersecurity and software reliability challenges. To this end, we conduct a systematic literature review covering 35 relevant research approaches to examine how the process mining is currently used for these tasks and what are the research gaps and promising research directions in the area. This work is an extension of our previous work, which focused solely on the cybersecurity area, based on the observation of relative closeness and similar goals of those two fields, in which some approaches tend to overlap.

process model or how a bottleneck activity results in the final delays of a service/product. Moreover, it is designed to discover, monitor, and enhance processes by extracting knowledge from event data (i.e., event logs). Process mining has already proven successful in many domains, aiding with challenging tasks such as fraud detection [15], robotic process automation [16], or learning analytics [17]. Furthermore, pro- cess mining became also favored in governing safety-critical processes, such as in healthcare, where it supports critical hospital processes and patient treatment [18]. In [19], it is explained why process mining can be beneficial for advanced analysis and provides several use cases of it in different fields.

The remainder of this paper is structured as follows. Section 2 con- tains a background of process mining. Section 3 provides an overview of existing literature reviews on process mining in other areas. Then, in Section 4, we formulate the research questions and describe our methodology. The usage of process mining to ensure cybersecurity is then detailed in Section 5, followed by Section 6, which focuses on the application of process mining for software reliability. The results of the review and the answers to our research questions are in Section 7. Section 8 discusses the threats to the validity of our review. Finally, Section 9 concludes the paper.

Process mining techniques have proved to be very successful in (1) process discovery, which aims to find a descriptive model of the under- lying process from event logs, (2) conformance checking, i.e., monitoring and inspecting whether the real execution of the process conforms to the corresponding designed (or discovered) reference process model, and (3) process enhancement, which improves and enriches a process model based on the related event data [10].

Several publications have performed a literature review on the usage of process mining. These reviews are typically domain-specific, with healthcare [41,42] and education [43] being the most popu- lar domains. In [18], Garcia et al. employed a general multi-domain systematic literature review to map the applications of process min- ing. They identified 19 application domains of process mining and sorted them by the number of published papers. For the top six areas, i.e., healthcare, ICT, manufacturing, education, finance, and logistics, they described the main contribution of process mining. As the se- curity was placed in eighth place among the domains, the detail of its contributions was not discussed. Moreover, reliability has not been considered at all.

Within the healthcare domain, Kurniati et al. [41] performed a liter- ature review of process mining usage in oncology. Moreover, Williams et al. [42] reviewed the application of process mining in primary care, and Yang and Su [44] reviewed the studies on process mining techniques for clinical pathways. Lastly, Rojas et al. [45] performed a more general literature review about the applications of process mining in the healthcare domain.

present events. The goal is to identify those commonly utilized for cy- bersecurity and software reliability, those that are not, and those rarely considered. Comparing results from the first two research questions with the typical process mining research trends can provide valuable insights. Concretely, the focus is placed on the used technique, target

be found in the review by Leitner and Rinderle-Ma [46], which fo- cuses on security in Process-Aware Information Systems (PAIS), where process mining is however only one of many methods considered. Moreover, as the review covered results from 1993 to 2012, many recent approaches are missing. In [47], Kelemen provided an overview of the usage of process mining for security in the public sector domain, published between 2000 and 2016. Based on this review, the author provides a set of topics that are dominant in the identified research papers, together with challenges and future research directions. The paper, however, only considers the public sector domain (explicitly in its inclusion criteria). Hence, our work, which is an enhancement to our previous study [26], which was limited in scope to the cybersecurity area, continues this research path with a broader study, including more recent publications and a wider spectrum of domains.

With the missing comprehensive systematic literature review of process mining usage for cybersecurity and software reliability, it is hard to understand where and how the process mining could help the researchers and practitioners. The focus on process mining applications for these tasks in different research directions is an important aspect to consider. Moreover, none of the existing reviews covers the application of process mining in software reliability, which makes the systematic literature review presented in this paper a valuable complement of the current state of the art.

Primary collection To establish a base collection of papers, we searched in several digital libraries, specifically IEEE Xplore,1 Elsevier ScienceDirect,2 Springer Link,3 ACM Digital Library,4 Web of Science,5 and Scopus.6 The search was limited to the recent research over the last six years, from 2014 to 2020. Furthermore, we only considered papers written in English.

Each filtering step was done by a different researcher. In case of any doubts, the paper was marked and discussed by two more researchers to reach the consensus. To further avoid bias in filtering, a sample of 10% papers filtered out in the first phase was revived by another researcher. Snowballing The last stage is the snowballing, which includes papers referred by papers kept after the second step of filtering. Each snowballed paper was considered in terms of inclusion and exclu- sion criteria, and within the 2014-to-2020 limit, and English-written

Cybersecurity classification. We classified papers that consider cybersecurity into clusters representing the found research directions based on the keywords used in their title, abstract, and possibly full text if ambiguous. The identified research directions and their keywords are security of Industrial Control Systems (ICS, SCADA, smart grids), security of smartphones (mobile, phone, Android), web-application se- curity (web, information system, website), network traffic security (DNS, IDS), attack inspection (attack inspection, identification, extraction, ob- servation), outlier user behavior (outlier, behavior ) and fraud detection (fraud detection).

Reliability classification. For the reliability classification, we used the same principle as with the cybersecurity part of the literature review. The papers were classified based on the keywords used in their title and abstract. If the direction was not explicitly specified, we looked into a broader context of the paper at hand. The identified direction and the keywords used for their classification The identified directions and the keywords used for their classification are the quality assurance (bug, defect, testing ) and error detection (failure, error, runtime, monitoring, auditing ).

Industrial control systems (ICS) are present in critical domains like manufacturing, transportation, and energy sector, where they are responsible for production, monitoring, and control. Naturally, security in these domains is vital as successful attacks could cause significant money loss, physical damage, or injury. The domains are often paired with the term critical infrastructures, emphasizing extensive need for dependability.

Surprisingly, not many work was found in this direction. All iden- tified approaches utilize automatic analysis of past events, but the techniques and use cases widely differ. It is evident that process mining is indeed helpful in this direction. However, the coverage is currently lacking. Future research in this direction could either improve current use cases or extend the usage of process mining for other use cases.

The approach for malware detection and phylogeny analysis in smartphone applications was proposed by Bernardi et al. [56]. It ap- plies the process mining on systems call traces to characterize the application behavior. The authors defined Syscalls Execution Finger- print (SEF), which contains the behavioral model. This behavioral model is a set of declarative constraints between system calls rep- resented by the Declare declarative constraint language [86]. SEF is used as a fingerprint for malware detection, so to detect malware, they compute SEFs of known malware families. These SEFs are then compared to the SEF of the examined application. This approach can recognize malicious behavior based on this comparison. It was eval- uated on a dataset of 1200 infected applications across ten malware

families. It was also proven that it could be used in phylogeny tracking because it could identify variants of the same malware family. They also performed the evaluation on the transformed dataset, where they did current anti-malware obfuscations. Their approach greatly reduced the number of false negatives in this case.

Phylogenic analysis and malware family detection were also per- formed by Cimino et al. [57]. In this work, process discovery was used to obtain temporal logic formulae which were used in formal model verification. Each path of the discovered process model is transformed into a temporal logic formula. This approach was also evaluated and confirmed to offer an effective solution for this problem in smartphone applications.

The process data from activity logs of Android devices were also used by process mining analysis by Hluchy and Habala [58], who applied conformance checking in addition to process discovery. From the phone logs, they chose OS-generated information about specific performed actions, browser history, and network connection log. Then, they performed an attack in which the user activated a malicious URL, which resulted in downloading personal user data via a known vul- nerability, and its discovered model. The used conformance checking technique considers this process model for the offline detection of that attack from examined smartphone logs. This approach raised many false positives, which they concluded is caused because of the simplicity of the attack and the low quality of Android logs.

All the approaches within this direction deal with the automatic analysis of past events. Notably, there is an interesting usage of the declarative approach in two approaches [56,57], which can be at- tributed to diverse options in smartphone usage. This is further sup- ported by the third work [58], where the focused model covers mali- cious usage instead of more traditional non-malicious. It is shown that process mining neatly exploits the available data but the number of approaches is surprisingly low given the wide range of available data discussed in the papers.

In this direction, the focus is put on network traffic data, one of the prime data sources for security analysis. For process mining, there is a dominance of process discovery techniques in found papers. It is usually paired with the manual analysis where the discovered visualized model is analyzed by an assigned expert [22,59]. Notably, one approach performs real-time process discovery for the visualization of a global attack model and conformance checking for the attack classification [60].

Another approach that used visual analysis was proposed by Al- varenga et al. [59], who applied the process mining discovery tech- nique on logs of alerts from Intrusion Detection Systems to create visual models. Complex and large event logs are clustered using hierarchical clustering to provide better user-friendly visualization. This method should help with the manual evaluation of raised alerts from Intru- sion Detection Systems. They performed a case study of the proposed approach on an alert dataset from a university.

The approach of Coltelese et al. [60] is the only one in this category that performs analysis in real-time. They aim to filter the amount of IoT attacks that need to be handled by security operators, while at the same time providing them the global attack model that updates automatically using online process discovery. The filtering is done by conformance checking that outputs the fitness of an incoming attack trace with the global attack model. If the fitness value is low, which means that this attack is new, then the attack is sent to the security operator for inspection. In their approach, they assume that as input, they have traces of attacks, so they do not deal with the attack detection.

In [62], the authors proposed the approach for detecting abnor- mal user behavior in social network websites to prevent cybercrime. Firstly, they discover a model for normal user behavior using genetic process mining. Then, they identify the abnormal behavior of users by conformance checking. They performed a case study on the Facebook community.

Web-application security direction contains several approaches, all utilizing process discovery but often combined with other techniques. Remarkably, there is greater utilization of process enhancement [24, 63], mainly regarding the time perspective, but only for manual anal- ysis. This direction shows a wide variety of process mining usage for cybersecurity, prompting to utilize the ideas for different domains.

Viticchie et al. [64] used process mining for the investigation of the process of the attacks on a small application with different levels of protection, which was performed as an experiment. Every participant filled the report in which their attack strategy was described. These texts were annotated, and process discovery was used on the traces of annotations. The discovered model was used to find out the attack process, the differences between successful and unsuccessful attack processes, and whether this process was influenced by the level of protection used in the application software.

Attacks were also inspected by Macak et al. [66], but a the different point of view. This work is focused on the unintentional insider attack vector identification. Process discovery is used on the event logs pro- duced by the simulation games platform which simulate the working environment for players.

For the attack inspection, all found approaches analyzed attacks in the past using process discovery. Automatic analysis was performed in one work [65] but without any expert knowledge. This might indicate that it might be hard to transfer the expert knowledge into the auto- matic system for process-aware analysis of attacks. Future research in this direction could tackle the problem with expert knowledge transfer.

The exploration of process mining potential for security was per- formed in multiple approaches. Genga and Zannone [9] designed a methodology for behavior analysis using process mining and applied it to a real event log, while Macak et al. [67] focused on the process mining behavior analysis of insiders in organizations. Both approaches present a set of challenges of a process mining application for security based on their experience, e.g., dealing with the data collection, pre- processing, and selection of the proper features and technique for the analysis.

A conformance checking technique was also employed in a proposed method by Salnitri et al. [70] to identify the security deviations in process executions. This approach is implemented in the loan manage- ment process of a financial institute. It aims to automatically analyze process executions and identify deviations from a previously defined process model using conformance checking. Then, it determines which deviations are security-critical, based on predefined security policies, and visualize them. For the definition of business processes and security policies, they use the SecBPMN2 modeling language. However, to realize the conformance checking step, they convert the process model to the Petri net notation. After this step, the discovered deviations are transformed back to the SecBPMN2 modeling language. Their approach is fully supported by an extended version of the STS-Tool, which is a software that helps in maintaining a high level of security in socio-technical systems [91].

There are several papers that are detecting the outliers in the processes. However, in this literature review, we exclude those that do not have the security as their primary goal in their proposed approach. Alizadeh et al. [23] proposed an auditing approach that combines data and process perspectives to detect non-conforming user behavior with conformance checking. This approach can identify the previously undiscovered deviations.

Fraud detection is a specific research direction aiming to detect false pretenses of entities. Typical examples are unusual processes, violating a rule or policy. The found approaches utilizing process mining in the cybersecurity context tend to employ conformance checking with expert knowledge.

Fazzinga et al. [92] proposed a method for online and offline classification of event log traces as potential security breaches. They create a security breach model, which is used later in conformance checking. In their work, they are trying to solve the problem with the mapping between high-level and low-level operations. It is important in this scenario because they claim that security breach models are typically described as high-level activities, but log traces are typically performed as low-level operations. They used a probabilistic approach in the created model and the following conformance checking. In their following paper [93], they proposed a classification framework that combines their previous work [92], a model-driven method with an example-driven classification. In a model-driven approach, a security breach model is created, and incoming traces are classified based on conformance checking. In the example-driven approach, a set of previously labeled traces is used for later classification. This approach was experimentally validated in their next paper [71].

Baader and Krcmar [74] were also using process mining for fraud detection. Specifically, they present a method for reducing the number of false positives in this detection. They combine the red-flag approach and process mining for identification and visualization of possible undesired process instances. Potential frauds are identified and then visualized with the fuzzy miner. Their approach was compared to two other approaches, and they got a lower number of false positives. However, they detected over half fewer frauds than one chosen variant. They discuss that process mining gives several other advantages to a classical red flag approach, such as easier dashboard analysis and visualization.

In particular, Huda et al. [73] proposed a method for the identifi- cation of process-based frauds in a credit application. After discovering a process model, they perform conformance checking analysis to check how many events were skipped. Additionally, they also perform analy- ses from different angles, like performance, segregation of duty, and role analysis. Furthermore, they proposed ten attributes that can be used as an output of the log analysis. Based on the occurrences of violations in these attributes, the type of fraud can be obtained.

In this research direction, there is a clear motivation for easing the manual analysis and automation. Indeed, all approaches but one employed automated conformance checking. The remaining approach introduced a method for reducing the number of detected false posi- tives, making it easier for the person to analyze the rest manually [74]. Remarkably, the prevalent approach is the creation of a custom algo- rithm which is then used in the analysis itself. This fact might be caused by the specificity and variability of frauds that might exist, encouraging a further investigation in the area.

Error detection is the most prevalent domain when it comes to the application of process mining for software reliability. The prevalence might be caused by the fact that in the case of software reliability, au- thors seem to focus on generic methods and frameworks [80,82], with- out strict application-domain focus. On the other hand, some trends like service-oriented architectures [81], adaptive middleware [25], blockchain [83], or cloud [78], can be seen. Generally, the error de- tection direction is concerned with runtime behavior analysis to detect bugs in the implementation [25] or assisting the deployment [78], maintenance [79], and monitoring [82].

The work by Xu et al. [78] presents an error detection method aimed at sporadic operations like software deployment. The specific use case presented in the paper is a rolling upgrade in a cloud environment. In order to achieve accurate detection, the method first creates a process model of the operation from regular, un-anomalous logs using process discovery. Afterward, the conformance checking is used as part of the analysis to determine if the process is running correctly. Here, process mining is just one step in a more sophisticated analysis.

algorithms. Out of the models, only one is chosen based on the quality characteristics. The resulting model is then used in the last step to find discrepancies with the specification. The conformance is assessed manually, with the hints to use model checking techniques.

In summary, the process mining techniques utilized for error de- tection focus on either analyzing the runtime behavior and providing assistance during operations. Overall, the trend inclines towards au- tomation, which seems to be the primary motivation apart from taking advantage of process events. In this regard, comparing previous and current behavior is a very appealing usage of process mining employed by [78,80]. Another trend is to use process mining to continuously check defined nominal behavior, as used by [25,81,82]. Still, the cover- age of application domains, leaving many possibilities for future work. Furthermore, while several approaches utilized artifacts from opera- tions, the area is not fully explored, for instance, cloud provisioning or continuous integration. Possible process mining utilization in software operations is provided by [79], but most presented cases are out of the scope for this review.

The topics in the quality assurance direction could be summarized as aiding the developers with software reliability before deployment. It focuses on identifying issues before the software is put into production. In this direction, both direct (validation and verification) and indirect (QA process) support is relevant. Papers within this typically aim at giving hints and pinpointing bugs [77] or outright generation of test cases [76]. The human-centric development aids, like [96] focusing on agile development, were only considered if the software product itself was part of the consideration.

A common trend in quality-assurance research direction utilizing process mining is to either minimize the introduction of bugs into soft- ware [75] or to diagnose them [76,77]. While quality assurance con- sists of many processes generating artifacts, they are not explored from a process mining perspective. For example, code reviews or analyzing changes in the codebase leaves space for future work. Furthermore, providing the developers with various process models could assist in software understanding and diagnosis, as proposed by [77].

Within our review, we have identified 35 approaches employing process mining in cybersecurity or software reliability, which we have structured according to the direction of the research problem they are addressing. These include the security of industrial control systems, security of smartphone devices, web-application security, network traf- fic security, attack inspection, outlier user behavior, fraud detection, error detection, and quality assurance. Although this division is by no means perfect, it gives a useful understanding at what research problems the process mining is directed in terms of cybersecurity and software reliability.

In the case of cybersecurity, the most popular research approaches (with the highest number of publications) were targeting general di- rection towards either detection of outlier user behavior or frauds. The next most popular direction was the cybersecurity of network elements, namely focusing on the applications related to networking in connection with websites, information systems, and other technologies that primarily communicate through networks. The research in the remaining directions is rather sparse.

The most popular research direction in the case of software relia- bility is the error detection. In this case, process mining is typically utilized to monitor runtime behavior in search of errors or abnormal behavior. Curiously, in the quality assurance research direction, the utilization is very similar, however focusing on aiding the development of the systems, rather than its operation and maintenance. Indeed, some outlier approaches can be found, like generating test cases. Overall, in software reliability, process mining is primarily used in a very narrow sense to detect faults, errors, and failures. The usage for analysis of reliability attributes is, barring one paper, unexplored.

Surprisingly, we did not discover a holistic approach combining both fields, as stressed by [2]. However, the work by van der Werf and Verbeek [81] contains features of both fields. For the rest of the papers, there are some significant similarities where researchers took analogous approaches across the fields. The most significant overlap lies in detecting various anomalous or undesired behavior, which shares a similar impact while having different root causes. Indeed, utilizing process mining to analyze behavior is a major strength of process mining. Additionally, process mining is utilized for inspection and diagnosis across the fields, focusing on attacks and errors, respectively. This hints towards similar techniques for general faults regardless of cause.

On the other hand, we noticed some differences regarding the use of process mining between the two fields. First and foremost, cyber- security seems to be more popular with more than twice the number of papers compared to software reliability. Furthermore, we found out that the application domains (e.g., smart grids, mobile devices, finan- cial systems) in the cybersecurity field are more diverse. In contrast, the distinguishing factor within software reliability is technology or platform.

Domains that are generally dominant in process mining fields in the general process mining realm were surprisingly not found among the results. Those domains include healthcare, manufacturing, education, finance, and logistics. Thus, we assume that in these domains, even though they are generally popular, the process mining techniques have not yet been properly explored for the purpose of cybersecurity or software reliability. Alternatively, they could be employing general domain non-specific techniques and thus not published mentioning a particular domain.

An exception to the claim is a paper, removed from the results due to the exclusion criterion on full paper. The work is dealing with software reliability in the healthcare domain. It is a short, workshop paper presenting potential filed and future research focus [97].

Regarding the analysis, the majority of the papers analyze the obtained model automatically, partly because the process mining tech- nique is very often used as a part of a more sophisticated method [57, 65]. It seems as automation is a motivation of numerous approaches [25,60,78]. However, there exist papers that utilize only manual anal- ysis based on the discovered model. In this case, the goal is to employ visual analytics to discover unexpected anomalies [22,59], or the pa- per [83] that presents an early stage of research where the analysis is not yet automated.

Research gaps and possible research directions can be observed in multiple aspects. First, there is a gap in the usage of process mining in cybersecurity and software reliability in several domains that otherwise do utilize process mining (for other applications), like healthcare, man- ufacturing, education, and logistics. Although we found some research papers focused on these areas, they were dealing with safety-critical processes involving humans and not computer systems [98,99], or just presented upcoming research direction [97]. Secondly, we detected a substantial untapped potential in the application of process mining within a larger context of cybersecurity and software reliability. Areas such as availability, robustness, or resilience are rather unexplored with respect to process mining, although they are implied in literature or applied in a non-IT field. In summary, and based on the found papers, we see a great potential of process mining for cybersecurity and software reliability. Daunting future directions could utilize the good practice from non-IT areas, where faults, anomalies, safety, or robustness of a process is evaluated.

Finally, as the number of publications is very sparse, there are likely many uninvestigated use cases of process mining in cybersecurity and software reliability. Some of the use cases are pointed out in the discussion of respective research directions. Prime examples include analysis of software changes and behavior, as well as supporting the diagnosis of software issues (both malicious and non-malicious). It may be especially worthy of considering the process mining in critical infrastructures, as they need to be highly reliable and have a strong defense against cyberattacks, which might take advantage of seemingly minor vulnerabilities, yet combined into malicious processes. The pro- cess mining might be valuable in the analysis and diagnostics of already running or legacy systems. Specifically, the streaming-based process mining techniques [101,102] can be used in this regard.

For the evaluation of threats to validity, we followed the strategy by Zhou et al. [103] for systematic literature reviews. In this section, we assess the potential threats to validity and discuss the precautions that we used to mitigate them through our review. Concretely, the threats are grouped into four categories, i.e., construct, internal, external, and conclusion validity.

We divided the filtering of papers into multiple phases. Each phase was performed by a different researcher. In case of any doubts, the paper is marked and discussed with two more researchers to reach the consensus. To further avoid bias in filtering, a sample of 10%

papers filtered out in the first phase was double-checked by another researcher. In this review, we formulated a strategy to guide the re- view, which is based on the existing guideline for systematic literature reviews [53]. In the reliability search, we included all popular terms which are connected to the reliability and software dependability.

The search is limited to the up-to-date papers over the last six years, from 2014 to 2020. The primary motivation for the restriction to this period is to focus on the most recent research and applications. Secon- darily, we expected the more mature approaches among these recent publications. Lastly, the lower bound, the year 2014, also corresponds to a local peak in the number of publications within the Dimensions8 dataset, showing a slight change of trend.

To ensure the correctness of the extracted data, we formulated the strategy of this literature review and established categories of interest which had to be described for each relevant research paper. The popularity of identified domains was also cross-checked with more general reviews on process mining. Moreover, the interpretation of the data was extensively discussed. Despite our systematic approach, some trends, patterns, and research gaps could have been missed in the review. On the other hand, we believe that the value of the provided summary in this work is not primarily in the research gaps, but in overview of the existing body of knowledge in applying process mining in the area of cybersecurity and software reliability. In this way, we believe we can facilitate the understanding of what attempts exist so that it is easier for the reader to see where they can build on what is existing and where they need to start building their approach from scratch.

reliability. Primarily, we would encourage the research community to deeper investigate the domain of critical information infrastructures, which might benefit significantly from more advanced cybersecurity and software reliability techniques. The real-time analysis of systems has a strong potential to utilize the advantages of process mining techniques. Furthermore, it would be indeed beneficial in the advanced detection and prevention of cyberattacks and incidents, enhancing it with a process-oriented approach.

