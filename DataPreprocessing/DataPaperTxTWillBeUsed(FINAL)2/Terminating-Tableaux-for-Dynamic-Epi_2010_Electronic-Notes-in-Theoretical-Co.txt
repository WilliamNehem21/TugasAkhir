

Electronic Notes in Theoretical Computer Science 262 (2010) 141–156
www.elsevier.com/locate/entcs

Terminating Tableaux for Dynamic Epistemic Logics
Jens Ulrik Hansen 1,2
Programing, Logic and Intelligent Systems/Philosophy and Science Studies Roskilde University
Roskilde, Denmark

Abstract
Throughout the last decade, there has been an increased interest in various forms of dynamic epistemic logics to model the flow of information and the effect this flow has on knowledge in multi-agent systems. This enterprise, however, has mostly been applicationally and semantically driven. This results in a limited amount of proof theory for dynamic epistemic logics.
In this paper, we try to compensate for a part of this by presenting terminating tableau systems for full dynamic epistemic logic with action models and for a hybrid public announcement logic (both without
common knowledge). The tableau systems are extensions of already existing tableau systems, in addition to which we have used the reduction axioms of dynamic epistemic logic to define rules for the dynamic part of the logics. Termination is shown using methods introduced by Brau¨ner, Bolander, and Blackburn.
Keywords: Dynamic epistemic logic, public announcement logic, terminating tableau systems, decision procedures, hybrid logic, reduction axioms.


Introduction
Classic epistemic logic has played an important role in both philosophy and com- puter science. However, recent years have witnessed the importance of also looking at the dynamics of knowledge, i.e. how knowledge of different agents can change due to the development of a system. There are two ways of adding dynamics to epistemic logic. One can either combine it with a temporal logic or combine it with some dynamic logic of actions. The latter approach has become increasingly common and has resulted in what is now called Dynamic Epistemic Logic (DEL), which includes operators for so called epistemic actions (cf. [13]). The interest in DEL has mostly been related to applications, and has mainly been semantically

1 Thanks to Torben Braner and Sine Zambach for comments on a draft of the paper. Also thanks to anonymous reviewers for valuable comments. The author is partially funded by the Danish Natural Science Research Council through the HYLOCORE project.
2 jensuh@ruc.dk

1571-0661 © 2010 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2010.04.011

driven. Thus, only very few attempts to develop a rich proof theory for DEL beyond standard Hilbert style systems have been performed. This work attempts to make up for some of this by discussing terminating tableau systems for different kinds of dynamic epistemic logics.
The simplest form of dynamics one can add to classical epistemic logic is a pub- lic announcement operator. The language is extended with formulas of the type [ϕ]ψ, which are read as “after public announcement of ϕ, ψ holds”. At the seman- tic level, the operator [ϕ] corresponds to moving to the submodel consisting only of states where ϕ is true (thus we are exclusively concerned with truthful public announcements here). This simple extension, called Public Announcement Logic (PAL), is, nevertheless, quite useful as shown by the many applications presented
in [13]. Having left out common knowledge, operators 3 , this logic is fairly simple
and a few tableau systems do already exist, see [1] and [7]. The approach in this paper is different from these in the sense that we try to avoid constructing new complicated and tailor made tableau systems by instead using the existing systems. This is possible due to reduction axioms. Reduction axioms have, from the be- ginning of DEL’s short history, played an important role in showing completeness and expressiveness results. It was proved that Public Announcement Logic is no more expressive than the underlying epistemic logic. Using reduction axioms, it is possible to translate a public announcement formula into an equivalent one without any public announcement operators.
There are a lot of other possible epistemic actions, moving beyond bare pub- lic announcements: announcements to subgroups, private communications, secret announcements and more. The insight of Baltag, Moss and Solecki (in [2]) is that all these epistemic actions, considered as action modalities, can also be represented by a form of Kripke models. Using a general product operation on Kripke models, they can be given a semantic. More surprisingly, it was shown that also formulas with these more complicated action modalities can be reduced to basic epistemic formulas without any action modalities. This, of course, required more advanced reduction axioms than in the case of public announcements.
When one wants to prove a validity of DEL, one can simply translate the valid- ity into an epistemic formula without action modalities and then use the existing tableau (or other) systems. However, the translation might result in an exponential increase in the size of the formula. As is shown in [10], this exponential increase cannot be avoided for public announcements. This fact provides another motivation for using DEL, since it offers us the opportunity to express things much more com- pact than in classical epistemic logic. It is also shown in [10] that the complexity of validity checking for PAL is no higher than for the underlying epistemic logic. Thus, the method of first translating and then using known proof methods for classical epistemic logic may be unfeasible. This justifies the direct tableau systems for PAL given in [1] and [7]. In DELs with arbitrary epistemic actions, the matter becomes much more complicated. Here, the challenge is how to represent the action modal- ities. Since PAL is part of DEL, [10] also shows that the blowup of the translation

3 In the rest of this paper, at least until the conclusion, we will disregard common knowledge.

may be exponential in the general DEL case. However, it is currently unknown to the author exactly what the complexity of deciding DEL validities is. 4 When adding the global modality to the underlying epistemic logic, the complexity of this will already be exponential [11]. In this case, the exponential increase caused by the translation therefore does not destroy the worst-case complexity.
The work in this paper is based on the idea of using reduction axioms as rules to make the translation on the fly in the tableaux. In practice, this is more efficient than performing the whole translation at the beginning 5 , but in the case of public announcement, it might not be as fast as the methods of [1] and [7]. However, their tableau systems only work for public announcement logic, while the method presented here further works for full dynamic epistemic logic and for a hybrid version of public announcement logic. Our tableaux in this paper are kept terminating using the methods of Brau¨ner, Bolander, and Blackburn ([5], [6], and [4]). The presentation here will be based on the approach in [4]. For basic modal logic, they show termination by noticing that the maximal formula complexity drops as new prefixes are introduced, which makes infinite tableaux impossible. In this paper we show that, essentially, this argument can be adapted in the setting where reduction axioms are used as extra tableau rules.
The paper is structured as follows: first we introduce public announcement logic, a hybrid public announcement logic, and full dynamic epistemic logic (section 2). Then, we present a terminating tableau system for full dynamic epistemic logic in section 3. Following this, we demonstrate how the approach can also be used to create a terminating tableau system for the hybrid public announcement logic. Finally, we present some concluding remarks and discuss further research.

Dynamic epistemic logic
We will first present the formal definitions of public announcement logic. Public announcements are added to the normal modal logic K, but it can easily be extended to the case of S5, which is often used for modeling knowledge. We will leave out common knowledge. First, we assume a finite set of agents A and a countable infinite set of propositional variables PROP. Using the terminology of [13] the language of the Public Announcement Logic will be denoted by LK[], and is given by the following syntax:
ϕ ::=	p | ¬ϕ | ϕ ∧ ψ | Kaϕ | [ϕ]ψ,

4 When dealing with arbitrary formulas of DEL, the question is how to measure the size of the action modalities. On the one hand, an action modality could be counted as one symbol, but when deciding validity, the finer structure of the action modality is needed. Thus, this may result in a high complexity for validity checking in this size of the formula. On the other hand, using another size-measure of action modalities, it may become possible to decide validity in lower complexity in that size.
5 In worst case scenario doing the translation on the fly may not be more efficient. But there seems to be at least two cases where translation on the fly will speed up the process of deciding a formula. The first case is where only few steps of translation are needed to detect an inconsistency, as for instance in the formula [¬[¬(q ∧ r)]Ka(p → q)](p ∨ r) ∧¬ ([¬[¬(q ∧ r)]Ka(p → q)] → (p ∨ r)). The other case is where the need for a translation may only occur at the very end of the tableau construction process, as for instance in the formula Ka[p]p ∧ ¬Ka¬[q]¬q ∧ Ka([q]p ∧ [p]q).

where p ∈ PROP and a ∈ A. The connectives ∨, → and ↔ are defined from ¬ and
∧ in the usual way, and the dual operators ¬Ka¬ and ¬[ϕ]¬ are abbreviated by Kˆa and ⟨ϕ⟩. The interpretation of Kaϕ is that “agent a knows that ϕ” and of [ϕ]ψ that “after (truthful) public announcement of ϕ, ψ is the case”. These interpretations are captured by the following formal semantic: A Kripke frame (or just a frame) is a pair F = ⟨W, (Ra)a∈A⟩ consisting of a non-empty set W of states (or possible worlds) and for each a ∈ A a binary relation Ra on W (i.e. Ra ⊆ W ×W ). A model M is a pair consisting of a frame F and a valuation V that assigns a set of states in W to every propositional variable of PROP (i.e. V : PROP → P(W )). Given a formula ϕ of LK[], a model M = ⟨w, (Ra)a∈A,V ⟩, and a state w ∈ W , the truth of ϕ at w, notation M,w |= ϕ, is defined as standard in modal logic, taking Ka to be the box modality corresponding to Ra. In addition we add the following clause for [ϕ]ψ:
M,w |= [ϕ]ψ iff M,w |= ϕ implies that M|ϕ,w |= ψ,
where the model M|ϕ = ⟨W|ϕ, R|ϕ,V |ϕ⟩ is defined by:
W|ϕ	= {v ∈ W | M,v |= ϕ} Ra|ϕ	= Ra ∩ (W|ϕ × W|ϕ)
V |ϕ(p) = V (p) ∩ W|ϕ.
We write M |= ϕ if M,w |= ϕ for all w ∈ W and we say that ϕ is valid if M |= ϕ for all models M. The logic of this semantic will be denoted by PA and be call Public Announcement Logic. It is not hard to prove the following validities in this logic:
[ϕ] p ↔ (ϕ → p)
[ϕ] ¬ψ ↔ (ϕ → ¬[ϕ]ψ)
[ϕ] (ψ ∧ χ) ↔ ([ϕ]ψ ∧ [ϕ]χ)
[ϕ] Kaψ ↔ (ϕ → Ka[ϕ]ψ)
[ϕ] [ψ]χ ↔ [ϕ ∧ [ϕ]ψ]χ.
These are the reduction axioms for public announcement ([13]). Adding these ax- ioms together with necessitation of [ϕ] to a Hilbert style proof system for multi modal K will result in a sound and complete proof system for PA (for details see [13]).
Note that the complexity of the formula occurring within the scope of the public announcement operator is greater on the left than on the right side of “↔” in these reduction axioms. This can be used to define a translation T : LK[] → LK, where LK is the standard multi-modal language. The translation “commute” with all logic operators beside the public announcement operator (e.g. T (¬ϕ) = 
¬T (ϕ)). In the case when the translation encounter a [ϕ] operator it uses the reduction axioms to decrease the complexity of the formula within the scope of the operator, e.g. T ([ϕ](¬ψ)) = T (ϕ) → ¬T ([ϕ]ψ). This translation can be shown to be a truth preserving translation of PA into multi modal K, which shows that adding the public announcement operator does not increase the expressiveness of

the language. 6 This recursive translation is not recursive in the normal way, since going from left to right (of ↔) in the reduction axioms (1)–(5) does not reduce the standard formula complexity. Therefore, to prove the correctness of the translation, a new complexity measure the formulas is needed. One possible measure is (taken from [13]):
Definition 2.1 Define a complexity measure c : LK[] → N by the inductive clauses:

What can be shown about this complexity measure is that it decreases when moving to subformulas and, furthermore, that the c complexity of the left hand sides of the reduction axioms (1)–(5) are higher than the c complexity of the right hand sides. This fact will be important when we consider the tableau system in the next section.
We will not present a tableau system for PA, but for a hybrid extension of this, namely the Hybrid Public Announcement Logic of [8]. To obtain this new logic we will first extend the language. For this we fix a countable infinite set of
nominals NOM disjoint from the propositional variables. The language of hybrid
public announcement logic LHP A is defined by:
ϕ ::=	p | i | ¬ϕ | ϕ ∧ ψ | Kaϕ | [ϕ]ψ | @iϕ | Eϕ,
where p ∈ PROP, i ∈ NOM and a ∈ A.
The nominals will function as names for states. The formula @iϕ states that ϕ is true at the state that i denotes and Eϕ express that there is a state where ϕ is true. The semantic is specified somewhat different from what is standard in hybrid logic. The reason is that the semantic of the public announcement operator takes us to submodels where states denoted by nominals may disappear. To deal with this, we extend the class of models such that the valuation assigns at most one state instead of exactly one state to each nominal (for more on these issues, see [8]). The definition of a model M = ⟨W, (Ra)a∈A,V ⟩ is thus the same as for PA, but with the further requirement on the valuation V : PROP ∪ NOM → P(W ) that |V (i)|≤ 1 for all i ∈ NOM. For the part of the language that coincide with LK[] the semantic clauses are the same as for PA. For the new part of the language we define:


6 This also works when the underlying logic is S5, however, if one wants to models beliefs using the logic KD45 a problem arise. The problem is that the frame properties defined by the axioms of KD45 are not preserved under the operation of taking submodels. Thus one cannot get completeness with respect to the class of models where beliefs are always interpreted as KD45. In other words the given semantic for the public announcement operator can result in agents having inconsistent beliefs after a public announcement.

The logic, this semantic give rise to, will be called “Hybrid Public Announcement Logic” and will be denoted by HPA. The dual operators of E and @i will be denoted by A and @i. Note, that since nominals only partially denote states, @i is no longer its own dual. We still have the equivalences @iϕ ≡ E(i ∧ ϕ) and @iϕ ≡ A(i → ϕ) though, but now these might not be equivalent anymore. 7 Thus the satisfaction operator has been split into an existential quantifier @ and an universal one @. The fact, that the nominal i denotes something in a model (i.e. |V (i)| = 1) can be expressed by the formula Ei.
Completeness with respect to a Hilbert style proof system can also be shown using reduction axioms, as the following from [8]:
[ϕ] i ↔ (ϕ → i)
[ϕ] @iψ ↔ (ϕ → @i(ϕ ∧ [ϕ]ψ))
[ϕ] Eψ ↔ (ϕ → E(ϕ ∧ [ϕ]ψ))
Since we extended the language of LK[] we also need to extend the definition of the measure c. This done by adding the following clauses to definition 2.1:
c(i)	=	1
c(@iϕ) =	1 + c(ϕ)
c(Eϕ)  =	1 + c(ϕ).
With this complexity measure, the left hand sides of the new reduction axioms
(6)–(8) still have higher c complexity than the right hand sides.

Public announcements are just one kind of epistemic actions though.  To deal with a larger amount of epistemic actions in a uniform way, the notion of action models was introduced by Baltag, Moss and Solecki ([2]). The intuition behind epistemic action models is that the agents may be unsure about exactly which action takes place and that each action has a precondition that has to be satisfied for that action to take place. Epistemic actions can be represented by Kripke structures where each state is an event/action and instead of a complete valuation each event is assigned a formula of the language as a precondition.
We now turn to the formal details. An action model M = ⟨S, (Qa)a∈A, pre⟩ consists of a finite set of events S, accessibility relations Qa on S for all agents a ∈ A, and a precondition function pre : S → L assigning a precondition to every event (for some logical language L). The language of formulas, LK⊗, and the action model language, Lact , have to be defined at the same time using mutual recursion.
The action model language Lact is defined by:
α ::=	(M, s),
where M = ⟨S, (Qa)a∈A, pre⟩ is an action model such that s ∈ S and pre : S → LK⊗. At the same time the formula language LK⊗ is defined by:
ϕ ::=	p | ¬ϕ | ϕ ∧ ψ | Kaϕ | [α]ψ,

7 These equivalences also show that we do not need the @i operator in the language, since it is definable in terms of E and i. However to ease the adaption of the tableau system from [4] we keep @i in the language.

where p ∈ PROP, a ∈ A, and α ∈ Lact . 8 The reading of the formula [M, s]ϕ is “after the epistemic action (M, s), ϕ is the case”. M represent the uncertainty among the agents about what event is taking place, and s is the event that actually takes place.
For general epistemic actions a little contemplation shows that they can actually result in an enlargement of a Kripke model. The way we reflect this in the semantic is by defining a product update between a Kripke model and an action model. For a Kripke model M = ⟨W, (Ra)a∈A,V ⟩ and an action model M = ⟨S, (Qa)a∈A, pre⟩ define the restricted product M⊗ M = ⟨W', (R' )a∈A,V '⟩ by:
W'	=	{(w, s) ∈M × M | M,w |= pre(s)}
R' ((w, s), (v, t))	iff	Ra(w, v)  and Qa(s, t)
V '(p)	=	{(w, s) ∈ W' |w ∈ V (p)}.
We can now define the semantic of the action modality [M, s] as:
M,w |= [M, s]ϕ iff M,w |= pre(s) implies that M⊗ M, (w, s) |= ϕ.
The other logical operators have the normal semantic and validity is also defined in the standard way. This logic will be called Dynamic Epistemic Logic and be denoted by AM. Note that we have now left out the hybrid machinery since it is not obvious how exactly to combine it with action models. 9
As in the case of public announcement, adding action modalities does not in- crease the expressive power of the language. Again this is shown by providing reduction axioms (see for instance [13]). The reduction axioms, which are now a little more complex, are:
[M, s] p ↔ (pre(s) → p)
[M, s] ¬ϕ ↔ (pre(s) → ¬[M, s]ϕ)
[M, s] (ϕ ∧ ψ) ↔ ([M, s]ϕ ∧ [M, s]ψ)

​
[M, s] Kaϕ ↔ (pre(s) → 
Ra(s,t)
Ka[M, t]ϕ)

[M, s] [M', s']ϕ ↔ [(M; M'), (s, s')]ϕ,
where, in the last formula ,the “;” operation is a semantic operation on action models. Given two action models, M = ⟨S, (Qa)a∈A, pre⟩ and M' = ⟨S', (Q' )a∈A, pre'⟩,
the composition (M; M') = ⟨S'', (Q'')a∈A, pre''⟩ is defined by:
S''	=	S × S'
Q''((s, s), (t, t'))	iff	Qa(s, t)  and Q' (s', t')
a	a
pre''((s, s'))	=	⟨M, s⟩pre'(s').

8 By this definition we load the syntax of the language with heavy semantic machinery, however, since we only deal with finite action models it is possible to list and name them all. For more on this discussion see [13].
9 The interpretation of nominals is none obvious when modalities capable of expanding states are present. Normally, nominals in hybrid logic are a special kind of propositional variables, which are true in exactly one state. However, when taking a product of an epistemic model with an action model, single states of the epistemic model can turn into several states in the resulting product model. Thus, if one keeps the original definition of the valuation for the product model, one breaks the requirement of nominals only being true in one state. On the other hand, there seems to be no obvious alternative definition of the valuation.

See [13] for the validity of the reduction axioms. As for HPA a new complexity measure is needed. A such, taken from [13], is:
Definition 2.2 The complexity measure d : LK⊗ → N is defined inductively by:

As for public announcement it can be shown that this complexity measure de- creases when moving from the left hand sides to the right hand sides (of ↔) of the reduction axioms (9)–(13), as well as when moving to subformulas.

A tableaux system for AM
In this section we introduce a tableau system for AM build on an existing tableau system for multi modal K, where we add the reduction axioms as tableau rules. This is done without violating termination or completeness of the original system. Formally, we will take a tableau to be a finitely branching three, where each node is labeled by a formula of our language. As basic tableau system for the underlying multi modal K logic we will use the one from [4], which is a standard one. The tableau system is a prefixed tableau system, thus all formulas occurring on the tableaux have the form σϕ, where σ comes from some fixed countable infinite set of prefixes. The intuition behind the prefixes is that they represent states in a possible Kripke model. Thus the intuition behind σϕ is that ϕ holds at σ. Additionally, we also have formulas of the form σRaτ on the tableaux representing that τ is accessible from σ by agent a. These will be called accessibility formulas. The rules of the tableau system applies to branches of tableaux and are presented in Figure 1.
In the rules ([AM ]) and (¬[AM ]), t is the operation that uses the reduction axioms to translate the formula [M, s]ϕ to a formula of less d-complexity. For in- stance t([M, s](ϕ∧ ψ)) = [M, s]ϕ∧ [M, s]ψ. 10 Ignoring the accessibility formulas, the formula above the line in a rule will be called the premise and the formula(s) below the line the conclusion(s). When constructing a tableau, we never add a formula
to a branch if it already occurs on the branch, and we never apply the (¬Ka) rule twice to the same formula on a branch. If a branch contains both σϕ and σ¬ϕ for some formula ϕ and some prefix σ, then the branch is called closed, otherwise open. A closed tableau is one in which all branches are closed. A tableau proof of a formula ϕ is a closed tableau with σ¬ϕ as the root formula.

10 t is not to be confused with a full translation for the language LK⊗ as discussed in section 2. Here t only translate/reduces one level.



Fig. 1. Tableau rules AM.
Termination of the tableau system
Two important properties for ensuring termination in the work of [4] are; all for- mulas occurring on the tableau are subformulas or negation of subformulas of the root formula, and every rule only generates something of less formula complexity. These two properties are essential for ensuring finiteness of the tableaux. However, these properties fails for our tableau system because the rules ([AM ]) and (¬[AM ]) can generate formulas that are not subformulas of the premise and may have higher formula complexity. But using the notion of d-complexity and stretching the notion of a subformula we can retain finiteness. Before a new notion of subformula can be defined a lemma is needed. For an action model M = ⟨S, (Qa)a∈A, pre⟩, let D(M) denote the domain, i.e. D(M) = S.
Lemma 3.1 Let σ0ϕ0 be the root formula of a tableau T and assume that [M, s]ϕ occurs on T . Then, there are an n ≤ d(ϕ0) and action models M1, ..., Mn occurring in ϕ0, such that D(M) = D(M1) × ... × D(Mn).
Proof. The proof goes by induction on the construction of T . The claim is obvious for [M, s]ϕ being ϕ0. It is also obvious that when applying any rule, besides ([AM ]) and (¬[AM ]) to a formula of the form [M, s][M', s']ψ or ¬[M, s][M', s']ψ, the action modalities in the conclusions and the premises have the same domains (or the action modality have completely been removed). Now for the rules ([AM ]) and (¬[AM ]) applied to two consecutive modalities [M, s] and [M', s']. Assume that the claim of the lemma is true for [M, s] and [M', s']. Then
D (M; M'), (s, s')  = D(M1) × ... × D(Mn) × D(M'1) × ... × D(M'm),
where Mi and M'j occur in ϕ0 for all 1 ≤ i ≤ n and 1 ≤ j ≤ m. Thus, the only thing that remains to be shown is that n + m ≤ d(ϕ0). Note, that the complexity measure d is an upper bound for how deep the action modalities can be nested. Furthermore, for every number of nested action modalities, only one more “×D(Mi)” can be added

by the rules ([AM ]) and (¬[AM ]) to (14), which also decrease the number of nested modalities by one. Thus n + m must be less than d(ϕ0).	 
Definition 3.2 A formula ψ is said to be a d-subformula of a formula ϕ if
d(ψ) ≤ d(ϕ),
Every propositional variable p that occurs in ψ also occurs in ϕ.
If an action modality [M, s] occurs in ψ, then there are action models (M1, s1), ..., (Mn, sn) for which Mi occurs in ϕ for 1 ≤ i ≤ n ≤ d(ϕ), and D(M) = D(M1) × ... × D(Mn),
Note that if the action modality [M, s] occurs in a formula ϕ, then all the precon- ditions of M are also counted as occurring in ϕ and by definition of the d-complexity we automatically have that d(pre(t)) < d(ϕ) for all t ∈ D(M). Using the reduction axioms as rules result in a decrease in d-complexity, since
d([M, s]ϕ) > d(t([M, s]ϕ))
Furthermore the d-complexity decreases when moving to a strict subformula. Thus we get the following lemma and from it a subformula property.
Lemma 3.3 For every tableau rule the d-complexity of the conclusion is strictly less than the d-complexity of the premise.
Lemma 3.4 (d-subformula property) Let T be a tableau with σ0ϕ0 as root for- mula. Then for every preﬁxed formula σϕ on T , ϕ is a d-subformula of ϕ0.
Proof. Let T be a tableau with σ0ϕ0 as root formula. The proof goes by induction on the tableau construction. By lemma 3.3 it follows that the d-complexity of any formula occurring on T is less than d(ϕ0). Moreover it is obvious that none of the rules can introduce propositional variables that do not already occur in the root formula. The only rules that can introduce new action modalities are the ([AM ]) and (¬[AM ]) rule applied to formulas [M, s]Kaϕ, ¬[M, s]Kaϕ, [M, s][M', s']ϕ, and
¬[M, s][M', s']ϕ. For the first two cases, a new action modality of the form [M, t] may be introduced, but M must be the same action model as in the premise. Thus, these cases are just special cases of the third bullet in definition 3.2. For the last two cases it follows from lemma 3.1 that also these two preserve d-subformulas. 
Definition 3.5 Given a tableau branch Θ and a prefix σ that occurs on Θ, let
T Θ(σ) := {ϕ | σϕ is on Θ},
Lemma 3.6 Let Θ be a branch of a tableau and σ a preﬁx occurring on it. Then the set T Θ(σ) is ﬁnite.
Proof. By lemma 3.4, all formulas on Θ are d-subformulas of the root formula. Thus,l the lemma follows if we can show that for all formulas ϕ, the set of d- subformulas of ϕ is finite. This can be proved by induction on n = d(ϕ) given a fixed number of propositional variables N . For n = 1: It is obvious that there can only be N many different d-subformulas of ϕ, for all formulas ϕ with complexity c(ϕ) = 1. For the induction step, assume there are only finitely many d-subformulas of ϕ, for

all ϕ with d(ϕ) ≤ n. Given a formula ϕ with d(ϕ) = n + 1, it is easy to see that any d-subformula of ϕ is also a d-subformula of a formula with d-complexity less than or equal to n or constructed from one of these. By induction there can only be finitely many of the first kind. For the second kind, we divide into cases depending on the structure of ϕ. It is easy to see that given finitely many formulas only finitely many new formulas can be constructed using the logical connectives and the Ka operators (since there are only finitely many a’s). In the case of the action modalities, note that point 3 of definition 3.2 only allows for finitely many domains of action models, and the limitation on the d-complexity of the preconditions ensures ,that we can only construct finitely many different action modalities. This completes the proof of the lemma.	 
Definition 3.7 Let Θ be a tableau branch and σ a prefix occurring on Θ, then define mΘ(σ) by
mΘ(σ) = max{d(ϕ) | σϕ ∈ Θ}.
Note that the d-subformula property justifies that this is well-defined. We can now adopt the method of [4] to show that AM tableaux always terminates.
Definition 3.8 When a prefix τ has been introduced on a branch Θ by the rule (¬Ka) to a formula σϕ, we say that τ is generated by σ and denote it by σ ≺Θ τ .
Following this we can easily prove, as in [4], that:
Lemma 3.9 If Θ is a tableau branch, then Θ is inﬁnite if and only if there exist an inﬁnite chain of preﬁxes on Θ
σ1 ≺Θ σ2 ≺Θ σ3 ≺Θ ...
Proof. See [4].	 
Lemma 3.10 Let Θ be a tableau branch and σ and τ two preﬁxes occurring on Θ. Then σ ≺Θ τ implies that mΘ(σ) > mΘ(τ ).
Proof. The proof carries through just as in [4], once it have been noted that the rules ([AM ]) and (¬[AM ]) decrease the d-complexity from the premise to the con- clusion, and that none of these rules introduce new prefixes.	 
As in [4] termination now easily follows from the lemmas 3.9 and 3.10:
Theorem 3.11 (Termination of the tableau system) Any	tableau	con- structed for a LK⊗-formula is ﬁnite.
Soundness and completeness of the tableau system
Soundness is not hard to prove. The rules for the underlying multi modal logic are standard and easily seen to be sound. By the validity of the reduction axioms (9)–(13), the soundness of the rules ([AM ]) and (¬[AM ]) follows.
The completeness for the underlying multi modal logic using only the rules involving this part of the language is already well known (see for instance [4]). Given

an open saturated branch Θ, a canonical model M is constructed from the prefixes occurring on Θ and the accessibility relations are defined by which accessibility formulas σRaτ occur on Θ. The valuation of a propositional variable p is defined relative to which of σp and σ¬p (if any) occurs on Θ. It is then straightforward to prove a truth lemma stating that; for all prefixed formulas σϕ on Θ,
M,σ |= ϕ.
For our tableau system this construction and the formulation of the truth lemma are identical. However, instead of proving the truth lemma by induction on formula complexity, we prove it by induction on the d-complexity and add two new cases for [M, s]ϕ and ¬[M, s]ϕ. These cases are, however, quite straightforward: Assume that σ[M, s]ϕ occurs on Θ. Then by saturation of Θ, σt([M, s]ϕ) also occurs on Θ and since t([M, s]ϕ) has less d-complexity than σ[M, s]ϕ, it follows by induction that M,σ |= t([M, s]ϕ). But then, by the validity of the reduction axioms (9)–(13), it follow that also M,σ |= [M, s]ϕ. The case for ¬[M, s]ϕ is similar. Thus we get:
Theorem 3.12 The tableau system of ﬁgure 1 is sound and complete with respect to the logic AM.
A tableau for hybrid public announcement logic
In this section, we introduce a tableau system for HPA. It is both simpler and more complicated than the tableau system of the previous section. The simplification consist in looking purely at public announcement, where as the complication consist in extending the underlying epistemic logic to a hybrid logic. The simplification shortens the proof of the lemmas 3.4 and 3.6 considerably, but the hybrid machinery makes us in need of a more advanced termination proof as in [4]. Our tableau system will be based on a small modification of the one in [4], further extended with reduction axiom rules for public announcement. We reuse all of the terminology of section 3. The tableau rules are given in figure 2.
In the rules ([]) and (¬[]), the operation t is defined via the reduction axioms for HPA, in the same way as in the previous section. Compared to [4] one rule has also been left out, and the rule (¬@) has been alternated. Both changes have been made to deal with the fact that nominals in our logic only partially denote states. The rules (¬Ka), (@), (¬@) and (E) are called preﬁx generating rules. The construction of a tableau is done with the constraints that no prefix generation rule is applied twice to the same premise on the same branch, and a formula is never added to the branch if it already occurs on that branch. Furthermore, to make the tableaux terminate, we introduce (as in [4]) a loop-checking mechanism. Before this we need the notion of an “urfarther”.
Definition 4.1 Given a branch Θ, the prefix τ is an urfather 11 of the prefix σ if τ is the earliest introduced prefix on Θ such that T Θ(σ) ⊆ T Θ(τ ). We denote this by uΘ(σ) = τ .

11 This notion of an urfarther used here is called an inclusion urfarther in [4].



Fig. 2. Tableau rules for HPA.
The construction of a HPA tableau is subject to the following constraint:
A preﬁx generating rule is only allowed to be applied to a formula σϕ on a branch if σ is an urfather on that branch.
Termination of HPA tableaux
As in the general action model case, we need an extended notion of subformulas based on the complexity measure c of definition 2.1.
Definition 4.2 A formula ψ is said to be a c-subformula of a formula ϕ if
c(ψ) ≤ c(ϕ)
Every propositional variable and all the nominals that occur in ψ also occur in
ϕ.
In the case of HPA tableaux, the following can straightforwardly be proven:
Lemma 4.3 For every tableau rule the c-complexity of the conclusion is less than the c-complexity of the premise.
Lemma 4.4 (c-subformula property) Let T be a tableau with root formula σϕ. If the preﬁxed formula τψ occurs on T , then ψ is a c-subformula of ϕ.
Proof. By lemma 4.3 and the fact that no rules can introduce new nominals or propositional variables, it is easy to check for all the rules that if they have c- subformulas as premises, the conclusions will also be c-subformulas.

Note that the rule (¬@) can only be applied if a prefixed formula τ¬@iχ occurs on the tableau, in which case, by induction c(¬@iχ) ≤ c(ϕ). Thus, it follows that c(¬Ei) ≤ c(ϕ), and hence all formulas of the form τ¬Ei occurring on T will, also be c-subformulas of the root formula ϕ.	 
The following lemma, on the other hand, is easier to prove in the case of HPA. Lemma 4.5 For all tableau branches Θ and preﬁxes σ occurring on Θ, the set
T Θ(σ) is ﬁnite.
Proof. From lemma 4.4 it follows that T Θ(σ) is a subset of the set of all c- subformulas of the root formula of Θ. Thus the lemma follows if we can show that for all formulas ϕ, the set of c-subformulas of ϕ is finite. The proof of this is similar to the proof of lemma 3.6, but easier, since the public announcement operator is not as complicated as the action modalities.	 
We now extend the ordering ≺Θ introduced in the previous section. Let Θ be a tableau branch. If a prefix τ has been introduced to the branch using a prefix generating rule on a formula of the form σϕ, we say that τ is generated by σ and write σ ≺Θ τ . It is straightforward to show that lemma 3.9 remains true in this case.
The rest of the proof of termination is identical to the proof of Theorem 5.4 in [4]. The only difference is that their notion of quasi-subformula has to be replaced by our notion of c-subformula. Thus we get that:
Theorem 4.6 Any tableau constructed using the given rules for HPA is ﬁnite, and the logic HPA is thus decidable.
Soundness and completeness of the tableau system for HPA
Again, as for AM, the proof of soundness is simple. The completeness is also almost as in [4]. The only modification needed is because nominals only partly denote in HPA. The reduction axiom rules are dealt with as for the tableau system for AM. Given an open saturated branch Θ, a model MΘ = ⟨W Θ, RΘ,V Θ⟩ is constructed as in [4] by:
W Θ = {σ | σ is an urfather on Θ}
RΘ = {(σ, uΘ(τ )) ∈ W Θ × W Θ | σRaτ occurs on Θ}
V Θ(x)= {uΘ(σ) ∈ W Θ | σx occurs on Θ}, for all x ∈ PROP ∪ NOM.
For V to be well-defined, we have to make sure that |V Θ(i)|≤ 1 for all nominals
i. If there were two different urfathers σ and τ and a nominal i, such that both σi and τi occurred on Θ, then using the saturation of the branch and the rule (Id), we would get that T Θ(σ) = T Θ(τ ). However, since they were both urfathers, this would imply that σ = τ , which is a contradiction. Thus V is well-defined. Now
completeness follows from the theorem:
Theorem 4.7 Let Θ be an open saturated branch for the tableau system. For any formula σϕ occurring on Θ, with σ an urfather, it holds that MΘ,σ |= ϕ.

Proof. The proof goes by induction on the complexity of ϕ. The basic cases follow from the definition of V Θ. The cases ϕ = Kaψ, ϕ = ¬Kaψ, ϕ = Eψ, ϕ = ¬Eψ, and ϕ = @iψ are as in [4].
In the case of ϕ = ¬@iψ a little more work is required. Assume that σ¬@iϕ occurs on Θ and that σ is an urfather. Then by the closure of the rule (¬@) either σ¬Ei or τi and τ¬ϕ occur on the branch. In the first case, there can be no prefix σ' such that σ'i is on Θ. This is because the rule ¬E gives that σ'¬i is also on Θ, which contradicts the assumption that Θ is an open branch. But then there can be no state in MΘ, which i denotes. Thus by the semantic MΘ,σ |= ¬@iϕ. On the other hand if τi and τ¬ϕ are on Θ for a prefix τ , then by urfather closure, also uΘ(τ )i and uΘ(τ )¬ϕ are on Θ, which by the induction hypothesis gives that MΘ, uΘ(τ ) |= i and MΘ, uΘ(τ ) |= ¬ϕ. Thus we get that MΘ,σ |= ¬@iϕ.	 
As a consequence of this we get that.
Theorem 4.8 The tableau system of ﬁgure 2 is sound and complete with respect to the logic HPA.

Concluding remarks and further research
In this paper, we have presented two tableau systems; one for dynamic epistemic logic with action models and one for a hybrid public announcement logic (both without common knowledge). These were based on already existing tableau systems to which we simply added tableau rules corresponding to the reduction axioms of the two logics. Following this, we showed that the method used to prove termination in [4], can also be extended to our new tableau systems.
There are already tableau systems for PA, [7] and [1], of which the one in [1] is shown to be optimal with respect to complexity. However, these only work for PA and cannot be generalized to other DELs in an obvious way. The aim of this paper has not been to construct complexity optimal tableau systems, but to show how tableau systems can be obtained in a more general way for various DELs.
Due to the unknown complexity status of AM and the problem of how exactly to measure the length of formulas, it is unknown whether the tableau method here presented is optimal with respect to complexity. However, it does seem to provide some kind of exponential upper bound. In the case of HPA, the underlying hybrid logic has an EXPTIME complexity as it contains the global modality [11]. Again, the system here presented seems also to yield an exponential upper bound in this case. The exact complexity details are left for further research.
Presently, there exist no tableau systems (known to the author) for DELs ex- tended with common knowledge, and, due to the lack of reduction axioms, our method cannot be used. However, in [12] it is shown that a generalization of com- mon knowledge called “relativized common knowledge” allows for reduction axioms for the public announcement operator. Thus, if tableau systems can be constructed for a multi-modal logic extended with relativized common knowledge, the method here presented may be extendable to give a terminating tableau system for a public

announcement logic with a form of common knowledge. The relativized common knowledge is actually nothing else than the until operator from temporal logics inter- preted over arbitrary Kripke frames. Hence, it might be possible to extend tableau systems from temporal logics to public announcement logics with relativized com- mon knowledge.
An even more general setting for reduction axioms has been given by Barteld Kooi in [9]. A further direction of research would be to extend the methods presented here in order to make them work in that setting.
A final matter of concern is the choice to only deal with logics where the under- lying modal logic is multi modal K. In epistemic logics, you usually add extra re- quirements to the agents’ accessibility relations, which causes the underlying modal logic to change into for instance S5 or KD45. It is therefore important to be able to extend the presented tableau systems to also deal with these cases. The methods here presented are based on the paper [4], which fortunately has a follow-up paper ([3]) that deals with the problems of adding extra conditions to the accessibility relations. It seems possible to use that work in connection with the tableau systems presented in this paper, but the exact details are left for further research.

References
Balbiani, P., H. Van Ditmarsch, A. Herzig and T. De Lima, Tableaux for Public Announcement Logic, Journal of Logic and Computation (2008), p. exn060.
URL http://logcom.oxfordjournals.org/cgi/content/abstract/exn060v1
Baltag, A., L. S. Moss and S. Solecki, The logic of public announcements, common knowledge and private suspicious, Technical Report SEN-R9922, CWI, Amsterdam (1999).
Bolander, T. and P. Blackburn, Terminating tableau calculi for hybrid logics extending K, in: C. Areces and S. Demri, editors, Workshop Proceedings of Methods for Modalities 5, E´cole Normale Sup´erieure de Cachan, France, 2007 pp. 157–175.
Bolander, T. and P. Blackburn, Termination for hybrid tableaus, Journal of Logic and Computation
17 (2007), pp. 517–554.
Bolander, T. and T. Brau¨ner, Two tableau-based decision procedures for hybrid logic, in: Proceedings of M4M (Methods For Modalities) 4, Humboldt University, Germany, 2005 pp. 79–96.
Bolander, T. and T. Brau¨ner, Tableau-based decision procedures for hybrid logic, Journal of Logic and Computation 16 (2006), pp. 737–763.
de Boer, M. S., KE tableaux for public announcement logic, in: Proceedings of Formal Approaches to Multi-Agent Systems Workshop (FAMAS 07), Durham, UK, 2007 .
Hansen, J. U., Hybrid public announcement logic, submitted (2009).
Kooi, B., Expressivity and completeness fir public update logics via reduction axioms, Journal of Applied Non-Classical Logics 17 (2007), pp. 231–153.
Lutz, C., Complexity and succinctness of public announcement logic, in: AAMAS ’06: Proceedings of the fifth international joint conference on Autonomous agents and multiagent systems (2006), pp. 137–143.
Spaan, E., “Complexity of modal logics,” Ph.D. thesis, Institute for logic, Language and Computation, Universiteit van Amsterdam, Amsterdam, The Netherlands (1993).
van Benthem, J., J. van Eijck and B. Kooi, Logics of communication and change, Information and Computation 204 (2006), pp. 1620–1662.
van Ditmarsch, H., W. van der Hoek and B. Kooi, “Dynamic Epistemic Logic,” Syntese Library volume 337, Springer, The Netherlands, 2008.
