Available online at www.sciencedirect.com


Electronic Notes in Theoretical Computer Science 350 (2020) 57–71
www.elsevier.com/locate/entcs
Toward Model Selection by Formal Methods
Matej Hajnal1 and Samuel Pastva2,3
Faculty of Informatics Masaryk University Brno, Czech Republic

Abstract
We address the problem of selecting a model from a list of potential models in the field of dynamical systems. The selection is based on model behaviour specified in temporal logic rather than time series. This provides more global constraints on the system dynamics. Not only to select one model but also to create an ordered structure, we propose the model ordering problem. We suggest and apply several ordering relations comparing models given property specification. To provide a formal method with global results for the proposed setting we employ and adapt model checking and parameter synthesis methods. To evaluate the method, we apply the proposed method to several qualitative models of regulatory networks.
Keywords: model checking, parameter synthesis, model selection, FFL


Introduction
Models trying to unveil the underlying biological mechanisms are increasing in com- plexity, size, and number. Thus answering the question of which model represents the system of interest better becomes a challenging task as the models are often incomplete (depicting only a part of the system), heterogeneous (unlike in sub- stance or nature), or mutually inconsistent (contradictory in the network or de- ducted hypotheses). To address this problem, two approaches are usually used: model discrimination, which excludes unsuitable models; and model selection, the counterpart approach which selects most potential models. Result models serve as a perfect candidate list for further use, prediction making and wet-lab experimental testing, completing the full circle of the standard workflow. Reducing the set of potential models saves the precious time and costs of experimental biologists. In

1 Email: xhajnal@fi.muni.cz
2 Email: xpastva@fi.muni.cz
3 This work has been supported by the Czech Science Foundation grant No. 18-00178S and by the Czech National Infrastructure grant LM2015055. The authors acknowledge Lo¨ıc Paulev´e et al. for swift work completing one of the used libraries – minibn.

https://doi.org/10.1016/j.entcs.2020.06.004
1571-0661/© 2020 The Author(s). Published by Elsevier B.V.
This is an open access article under the CC BY-NC-ND license (http://creativecommons.org/licenses/by-nc-nd/4.0/).

consequence, a proper understanding of the system and discovery of possible alter- nations in order to cure undesired behaviour can be achieved faster and cheaper.
In this work, we propose model ordering, an approach capable of solving dis- crimination and selection by creating an ordered structure of models. Further, we present a method for model ordering comparing behavioural aspects of the models as it is the most valuable resource to understand biological mechanisms. In compar- ison to the standard approaches of model selection [17,18,11], the system behaviour is specified using properties of temporal logic, allowing a more general class of be- haviour compared to time series data. Choice of specific logic is not strict as long as it provides adequate reasoning about the system behaviour and sufficiently efficient parameter synthesis procedures. In this work, we employ computational tree logic (CTL) – a computationally attractive logic adequately describing non-deterministic behaviour of real dynamical systems.
To verify the behaviour of the models and estimate satisfying parameters we employ model checking techniques focusing on parameter synthesis. The model checking techniques provide global guarantees and time unbounded results over- coming the limitations of approximative, sampling [9], and simulation methods.
To compute an ordering over the set of models, pairs of models are compared based on the given specification by model ordering relation. We propose several options for the relations including qualitative measure suitable for division into two groups and also quantitative robustness measures [16]. In this work, we focus on one element of the models – parameter space. For example, the models can be compared by volume or proportion of the satisfying parameter space. Similar orderings may be applied to the state space. The model ordering relations are applicable to any class of specification and modelling formalism underlining generality of the approach.
We examine the applicability of the method by applying the model ordering to models with known behaviour [1] – feed-forward loop (FFL) network motifs. Ac- quired ordering, an assessment of the quality of the respective network structure, is compared with the real-life incidence. To guarantee the reproducibility, the analy- sis is available to view at http://biodivine.fi.muni.cz/paper/SASB2018/FFLs. html or to edit and run as a jupyter notebook at http://biodivine.fi.muni.cz/ paper/SASB2018/FFLs.ipynb.
To conclude, model ordering is an approach applicable to many model for- malisms, forms of specification, and analysis frameworks. We believe this approach can greatly simplify the model inference workflow while providing a reliable method for evaluating models across formalisms. We are keen on expanding the usability of the proposed method as its reproducibility.

Preliminaries
To discriminate, select, or order a set of models, M, the models are compared based on the specification S. To create an ordered structured over the given models, a relation comparing a pair of models is used – model ordering relation.

Model ordering relation
Let M be a set of models and S a specification. A model ordering relation, ≤S , is reflexive and transitive binary relation 4 over M.
If a binary relation is also reflexive and transitive then it is a preorder. If a preorder relation is also antisymmetric then it is a partial order. The partial order allows the possibility to create a lattice.

Example 2.1 Consider two arbitrary models – M1 and M2. Let specification, #var, denote the number of variables of a model. Let ≤#var, be a model ordering relation which prefers a model with more variables – M1 ≤#var M2 iff M2 has at least as many variables as M1.

Problem deﬁnition
We consider the following three problems, with model selection and discrimination defined based on the results of model ordering.
Model ordering problem reads as follows: Given a set of arbitrary models M, a specification S, and a model ordering relation ≤S , order the models with respect to ≤S .

Model selection problem: Given models ordered by ≤S , select maximal model(s) with the respect to ≤S .

Model discrimination problem: Given models ordered by ≤S , exclude models lower than a threshold – an element in the ordering relation.
Since we are focused on a behavioural comparison using temporal properties employing model checking techniques, the type of models, specification, and or- dering relation applicable to the proposed method are discussed in the following subsections.

Modelling Formalisms
To harness the advantages of the model checking approach, the model is represented by a transition system (TS). To reach this goal, several formalisms of discrete dy- namical systems such as Boolean Networks, Petri Nets, and Thomas Networks can be represented in the form of TS by generating the state transition graph. For continuous models a finite discrete abstraction of the state space is necessary. For example, a significant class of ODE (ordinary differential equation) models can be discretised by the rectangular abstraction [4]. The main disadvantage of the ab- straction is the fact that it typically leads to over- or under-approximation (or a

4 a subset of possible pairs – M×M 

mixture of both) of the dynamics of the original system. A standard TS to represent dynamical systems and employ model checking is a Kripke structure.
Definition 2.2 Given AP , a set of atomic propositions, Kripke structure is a tuple
K = (S, S0, →, L), where
S is a finite set of states,
S0 ⊆ S is a set of initial states,
→ ⊆ S × S is a transition relation,
L : S → 2AP is a labelling function.
Observing real systems is a challenging task and usually contains an uncertainty – e.g. of its dynamics. Such uncertainty is represented in the model by a parameter, which can be applied in the transition graph by a parametrised Kripke structure [3].
Definition 2.3 Given AP , a set of atomic propositions, parametrised Kripke struc- ture is a tuple K = (S, S0, P, →, L), where
S is a finite set of states,
S0 ⊆ S is a set of initial states,
P is a finite set of parametrisations,
→ ⊆ S × P × S is a transition relation,
L : S → 2AP is a labelling function.
Fixing a parametrisation p ∈ P reduces the parametrised Kripke structure K to
p
the standard (non-parametrised) Kripke structure Kp = (S, →, L).
This work assumes each parametrisation is given as a valuation of model param- eters, such that each parameter is identified using a parameter index. The index uniquely identifies the parameter across all considered models. These indices are written using Roman numerals. In Example 3.1, we consider three models with three parameters, indexed as I, II, and III. Here, the first model contains only parameters I and III, the second model contains parameters I and II, and the third model contains parameters II and III.

Speciﬁcation
In this work, we compare the models based on their behaviour using temporal properties. To express the properties about the dynamics of systems, we consider formulae of computational tree logic (CTL) [8] defined by the following abstract syntax:
ϕ ::= Q | ¬ϕ | ϕ1 ∧ ϕ2 | AXϕ | EXϕ | A(ϕ1 U ϕ2) | E(ϕ1 U ϕ2),
where Q ranges over atomic propositions taken from the set AP . The standard abbreviations EFϕ stands for E(true U ϕ) and AGϕ means ¬EF ¬ϕ. Examples of some typical CTL formulae are [10]:

EF ϕ expresses reachability of a state where the condition ϕ holds,
AG ϕ expresses a stabilisation with ϕ being continually true,
EFAGϕ1 ∧ EFAGϕ2 expresses a bistable switch (two different stable situa- tions ϕ1, ϕ2 can be reached).
In order to compare the models with respect to property ϕ we first have to determine which models satisfy the property. In case of a parametrised model also to find the maximal set from the parameter space for which the property holds. Formally, the model checking problem for Kripke structures reads as follows: Given parametrised Kripke Structure K and temporal property ϕ is to check whether K meets the property – K |= ϕ. The parameter synthesis then refers to a problem: Given parametrised Kripke Structure K and temporal property ϕ

to compute satisfying parameter space,
P¯ϕ. In the case of a CTL property ϕ,

Synth(K, ϕ)= {p ∈ P | ∃s0 ∈ S0 s.t. Kp, s0 |= ϕ}.

Remark 2.4 In this paper, we consider a specific variant of the model ordering problem:
Given a set of parametrised Kripke structures, K, a CTL formula ϕ, and a model ordering relation ≤ϕ, order the models with respect to ≤ϕ.


Method
In this section, we propose a method for model ordering of parametrised Kripke structures with respect to temporal properties and ordering relations. As an input, our method assumes a finite set of models represented by parametrised Kripke structures K = {Km = (Sm,Im,Pm, →m, Lm)|m ∈ {1 ... n}} and a property ϕ. These structures are then analysed by the parameter synthesis procedure which
returns the satisfying parameter subspace P¯ϕ for each structure Km. Finally, a
chosen ordering relation ≤ϕ is applied in order to compare the models regarding the results of parameter synthesis, see Figure 1. The variations and extensions of the proposed method are discussed in Section 5.


Speciﬁcation
As introduced in Section 2.4 we employ CTL [8], computationally attractive tem- poral logic adequately describing non-deterministic behaviour of real dynamical systems. Moreover, there are plenty of tools providing model checking and param- eter synthesis for CTL [7,13,6,2]. However, choice of specific logic is not strict as long as it provides adequate reasoning about the system behaviour and sufficiently efficient parameter synthesis procedures.



Fig. 1. Workflow of the method. Input models are represented by parametrised Kripke structures (dashed lines). Parameter synthesis for property ϕ is run. Given ordering relation ≤ϕ, the structures are ordered.

Model ordering
An intrinsic method to compare the models against each other based on given specification is to sort them. In this work, we provide several options for model ordering relation given specification in the form of a CTL formula, ϕ, over the models represented by a Kripke structure, K ≤ϕ Kj, with a meaning that Kj respects ϕ at least as good as K. The proposed orderings consider temporal properties focusing on the satisfying parameter subspace for given property, ϕ, of the individual structure
– P¯ϕ.

Model discrimination
Model discrimination requires only qualitative comparison. We offer the following model orderings separating the models by the satisfaction of the given criterion. Ordering employing such division creates two equivalence classes.

Model satisfies the property: Km |= ϕ.
This naive criterion is the cornerstone of the behavioural discrimination. The model is simply excluded if it does not satisfy the property. With introduced parametrisations, more specific representation is needed.
Exists a parametrisation: P¯m /= ∅.
Let us say we observe a property of a system. Therefore the model of the system must contain a parametrisation satisfying the property. The model of the system must satisfy this property for at least one parametrisation. Hence the models without any parametrisation satisfying ϕ are not suitable.
For all parametrisations: P¯m = Pm.
Let us say we observe a property which is a necessary condition for the system, ϕ. The model of the system must satisfy this property for each parametrisation. Hence the models with any parametrisation not satisfying ϕ are not suitable.

Model selection.
Here we provide several quantitative model ordering relations dividing the models into more groups suitable for model selection. Based on the property or the models, one model ordering relation may be more suitable than another. In this section, we propose model ordering relations focusing on parameter space of respective models, while similar orderings may be applied to the state space or structural properties of the model.
The models are primarily compared by the volume or proportion of the satisfy- ing parameter space. However, different models typically contain different parame- ters, which makes the comparison challenging. To compare such parameter spaces, we propose a restriction of the parametrisations only to the parameters common across all models using a projection πcom. This function takes an arbitrary set of parametrisations and restricts each parametrisation to the common parameters. Alternatively, a pairwise projection for two models, Km; Km′ ∈ K, is also available – πcom(m,m′). Note that in case of non-trivial relationships between the model pa- rameters, a more sophisticated procedure may be necessary to meaningfully unify the parameters.
The provided list of the orderings is not complete. For specific applications, new, more suitable orderings can be proposed. To compare the applicability of individual model ordering relations is a difficult task which we plan to tackle in our future work.
Number of satisfying common parametrisations:
Km ≤1 Km′ ⇔ |π	(P¯m)|≤ |π	(P¯m′ )|.
ϕ	com	ϕ	com	ϕ
A model with more satisfying parametrisations provides higher robustness by
means that the property holds for more parameter perturbations.
Satisfying parametrisations are a subset of common parameters:
Km ≤2 Km′ ⇔ π	(P¯m) ⊆ π	(P¯m′ ).
ϕ	com	ϕ	com	ϕ
≤2 is more strict version of ≤1 – Km ≤2 Km′ ⇒ Km ≤1 Km′ . It also provides
ϕ	ϕ	ϕ	ϕ
a similar notion of robustness as the previous ordering ≤1 . The satisfying pa-
rameterisation set of the greater structure also contains all parameterisations of the lesser structure, meaning the property holds for at least as many parameter perturbations.
Pairwise common parameters cannot be used to create an order since the or- dering relation would not be transitive – see Example 3.1 below.
Example 3.1 A counterexample for transitivity of variations of model orderings ≤1 and ≤2 with pairwise common parameters on the following three
ϕ	ϕ
models (Figure 2):


m	1′	m′	¯m
¯m′

K	≤ϕ K
⇔ |πcom(m,m′)(Pϕ )|≤ |πcom(m,m′)(Pϕ  )|.

Not transitive: The pairwise common satisfying space of K1 and K2 is one
parametrisation - (1), for both models hence (K1, K2) is in relation. In the case of K2 and K3 it is parametrisation (2) hence (K1, K2) is also in relation. But (K1, K3) is not in the relation, because the common parameter space of

(K1, K3) consists of two parametrisations, (4);(5), in the case of K1 and only one parametrisation in the case of K3 - (3).
Not antisymmetric: (K1, K2) is in relation, but also (K2, K1) and K1 /= K2.


m	2′	m′	¯m
¯m′

K	≤ϕ K
⇔ πcom(m,m′)(Pϕ ) ⊆ πcom(m,m′)(Pϕ  )

Not transitive: (K1, K2) and also (K2, K3) are in relation, but (K1, K3) is
not.
Not antisymmetric: (K1, K2) is in relation, but also (K2, K1) and K1 /= K2.

Fig. 2. Satisfying parameter subspace of three models. P¯m represents satisfying parameter space of model
m. pi indicates parametrisation in the parameter space and k indicates the index of the respective parameter – parameters with the same index are common.

Number of satisfying parametrisations:
Km ≤3 Km′ ⇔ |P¯m|≤ |P¯m′ |.
ϕ	ϕ	ϕ
Similarly, as in ≤1 , a model with more satisfying parametrisations provides
higher robustness by means that the property holds for more parameter per-

turbations. Since ≤3
is not strained to common parameters, in the case of

uneven parameters of the models the ordering may be unfair (an example in Figure 3).

Fig. 3. Satisfying parameter subspace of two models; K1,K2; and a property ϕ. Based on the number of satisfying parametrisations K1 ≤3 K2. It is only because the parameter space of the first model contains dimension I with two additional satisfying elements.

Satisfaction Degree:

Km  ≤4
Km′
⇔ sd(Km, ϕ) ≤ sd(Km′ , ϕ), where sd(K , ϕ)) is satisfaction

p	ϕ	r	p	r	p
degree as defined in [9].
Satisfaction degree mimics evaluation function D [12] by depicting how well the model preserves property ϕ for a given parametrisation. This option can be extended for whole parameter space - e.g. by minimal or average satisfaction degree through the parameter space.

Proportion of satisfying parametrisations – Global Robustness:
Km ≤5 Km′ ⇔ R(Km, ϕ) ≤ R(Km′ , ϕ), where R(K, ϕ)= |P¯ϕ| .
ϕ	|P|

Model with a greater proportion of satisfying state space provides higher global robustness, where the result is normalised by the volume of the whole parameter space instead of a number of parameters as in [11]. The normalisation enables comparison also for distinct dimensions.

Minimal parametrisation perturbation – Local Robustness:

m	6	m′
p	ϕ	r
⇔	R(Km, p, ϕ)	≤	R(Km′ , r, ϕ),  where R(K, p, ϕ)	=

min({dist(p, pj)|pj ∈ P ∈ K ∧ Kp′ $ ϕ}).
A parametrisation with greater (minimal) distance from not satisfying param- eter space provides higher local robustness. Also, this option can be extended for whole parameter space - e.g. by minimal or average distance through the parameter space. Note that in ≤4 , the is distance measured in the state space and here in the parameter space.
The proposed model ordering relations are not antisymmetric, hence do not create posets. It is because two models can achieve the same characteristic compared by the ordering relation, e.g. set of satisfying parametrisation, while having different transition systems. The poset can be obtained by merging the equivalent models.

Case Study
To examine the applicability of the method, we apply the model ordering to models with known behaviour [1] – feed-forward loop (FFL) which is one of the central motifs of gene regulatory networks. There are 13 possible ways to connect three nodes with directed edges. The FFL is the only network motif of the 13 possible three-node patterns. From eight sign combinations of the FFL motif (listed in Figure 4), only two are significant. In the case of the coherent group, it is type 1 – C1-FFL. And for the incoherent group, it is also type 1 – I1-FFL. The six other FFL types seem to appear much less frequently than the C1-FFL and the I1-FLL. [1] To understand the dominance of the two types we examine two dynamic properties of protein Z studied in [1]:
Sign-sensitive delay. There is a delay of activation of protein Z in switching on the signal, but no delay in switch off and vice versa.
Pulse generator. In the pulse, Z level first increases and then declines to a low level.
To assess the quality of the competing FFL types, the ordering is computed for each property. The result orderings are compared with the real-life incidence.

Models and Temporal properties
Firstly, we exhibit the method on the Boolean Network models. Each model contains five variables – three proteins, X, Y, and Z, and two signals, sx and sy, obligatory to turn on the proteins representing enzyme activating specific protein. Each one of the 8 FFL subtypes is modelled with two boolean functions joining two regulations

type 1	type 2	type 3	type 4


Coherent





Incoherent





Fig. 4. The eight sign combinations (types) of feed-forward loops. Coherent group possess indirect path with a same overall sign as the direct path. Incoherent, on the other hand, posses indirect path with opposite overall sign to that of the direct path. The arrow symbol d denotes activation and the E symbol denotes repression.

for protein Z, AND/OR, creating 16 models.
Secondly, we use Multivalued Network models, which are enhanced with multi- valued protein X and thresholds for regulation of the proteins Y and Z, xy and xz respectively, creating 48 models. 5 To evaluate the method we compare the previous results of [1] with the results of our method.
In the analysis, we have employed model checking using [5] to synthesise parame- ters one-by-one for the following three properties (with an example of the respective behaviour in Figure 5):
A delay which occurs only in switching on is conjunction of two properties:
s0 = (sx = 1, sy = 1,X = 0,Y = 0,Z = 0),  delay on = A(Z =0 U Y = 1)
no delay off = AF(((sx =0 ∧ sy =1 ∧ Z =1 ∧ Y = 1) ∧ EX(Y = 0)) =⇒ EX(Y =0 ∧ Z = 0))

delay on from the initial state s0 which expresses a delay in switching on the protein Z after the signal appears and no delay off – no delay in switching off the protein Z.

s0 = (sx = 0, sy = 1,X = 1,Y = 1,Z = 1),  delay off = A(z =1 U y = 0)
no delay on = AF(((sx =1 ∧ sy =1 ∧ Z =0 ∧ Y = 0) ∧ EX(Y = 1)) =⇒ EX(Y =1 ∧ Z = 1))

A delay which occurs only in switching off is conjunction of two properties: delay off from the initial state s0 which expresses a delay in switching on the protein Z after the signal disappears and no delay on – no delay in switching on the protein Z.

5 we consider 3 cases, xy < xz, xy > xz, and xy = xz


  

Fig. 5. Example of two behaviours of protein Z – sign-sensitive delay, delay in switching on (left) and no delay in switching off (middle), and pulse generator (right). TON denotes the length of the delay and kyz denotes the threshold of concentration Y to regulate Z.



Fig. 6. Enumeration of satisfied properties for multivalued models of respective logic – AND (up), OR (down), FFL subtype (column), and threshold setting (row).



s0 = (sx = 1, sy = 1,X = 0,Y = 0,Z = 0), peak gen = AF(Z =1 ∧ AF(AG Z = 0))
The pulse generator is expressed by peak gen property.

Results
The previous analysis [1] unveiled that the C1-AND type satisfies the first property, the C1-OR satisfies the second property, and the I1-AND satisfies the third property. Our analysis uncovered the following results for the BN models:
In the case of the first property, only for C1-AND and I3-AND subtypes the property holds.
The second property holds for C1-OR and I3-OR subtypes.
And the last property holds for I1-AND, C3 both, I4-AND, C2-OR, and I2- AND.
Furthermore, we have analysed multivalued networks using the same properties

and initial state with the results shown in Figure 6. The results are compliant with the analysis summarised in [1] since all of the three studied models exhibit the respective property. Also in the case of the third property, models I2-AND and I4-AND can be easily discriminated since the stable state of protein Z is not sensitive to the signal on the protein Y – sy and therefore has reduced functionality. This property was verified by static analysis. However, it is also possible to express it as a temporal property. Since the remaining models satisfy a given property, they serve as the candidate models for a further study – e.g. finding a property explaining their low occurrence.
Using these results, we can easily discriminate and select several models, for example, remove models with no satisfying parametrisation. Furthermore, a model with a superset of satisfying parametrisations in comparison with other models can be selected as more robust.
Since all the models share the same parameter space, the same conclusion can be deduced using the number of satisfying results. Due to the simple nature of our models (small state and parameter space) more advanced orderings are futile.
To view the case study analysis with results use http://biodivine.fi.muni. cz/paper/SASB2018/FFLs.html. The analysis is also available as a jupyter note- book at http://biodivine.fi.muni.cz/paper/SASB2018/FFL.ipynb. The note- book is editable and runnable using CoLoMoTo docker [14] – image available at https://hub.docker.com/r/colomoto/colomoto-docker/ with installation in- structions. It uses available python libraries for modelling, editing, and analysis of networks – minibn, ginsim, and biolqm. Advantages of the executable notebook are that the models are created on the fly, hence can be easily edited and adapted to analyse other models, and so does the analysis, which can also be run by only selecting parts of it. Moreover, the whole workflow including the results can be presented in a unified form.
4.3  Used frameworks - Jupyter, Docker, and CoLoMoTo-docker
In the analysis we have used following frameworks:
Jupyter (http://jupyter.org) provides an interactive web interface for creat- ing documents, named notebooks, which contain code, equations, and formatted texts. A notebook typically describes a full workflow of analysis, both with textual explanations and the full code and parameters to reproduce the results. A note- book is a single file which can be easily modified, shared, re-executed, and visualised online.
Docker (https://www.docker.com/) is a computer software that performs operating-system-level virtualisation also known as containerization. Containers are software packages which are isolated from each other and use their own set of tools and libraries; they can communicate through well-defined channels. All containers are run by a single operating system kernel and are therefore more lightweight than virtual machines.
CoLoMoTo-docker	(https://hub.docker.com/r/colomoto/ colomoto-docker/) is a docker image which provides interactive web with a

ready-to-use Python environment using Jupyter.  It contains libraries aimed on creating, editing, simulation, and analysis of logical networks. It is a joint distribution of several logical modelling software tools easing the chaining of complementary analyses. [15]
Discussion
We have presented model ordering as a general concept for comparing models. In this work, we preferred the behavioural comparison to the static attributes and system properties to data. In this section, we discuss three hierarchically different aspects – enhancements and extensions of the current method, variations of the chosen method concerning temporal properties, and an outline of other approaches for model selection while still using system properties rather than data.

Enhancements and extensions of the current method
The computational bottleneck of the proposed method is the model checking and parameter synthesis procedure due to state space explosion. Moreover, a transition system has to be computed for each model. We propose a way to reduce this computation time.
Since the models are usually very similar to each other in state space and parameter space, the computation of state transition graph for individual model can be optimized by computing one joint parametrised transition graph.
The size of the transition system can be in some cases greatly reduced using symbolic data structures.
Parallel computation – analysis and computation of the transition systems can be often parallelised to better utilise modern multi-core and cloud architectures.
The implementation proposed in this paper is focused on boolean and multivalued networks and properties given in CTL. Next natural step would be to extend the possible applications with new:
modelling formalisms such as Petri Nets or ordinary differential equations;
temporal logics such as LTL or STL;
model ordering relations using more sophisticated parameter unification or domain-specific properties.

Variations of the approach using temporal properties
When presented with multiple properties, different approaches to ordering are possible:
Apply chosen ordering relation for each property separately and create an intersection of these relations.
Order the models by the number of satisfied properties, possibly prioritising or weighting the properties.

Apply a new specific ordering relation over the separate model orderings.
Model ordering relations focusing on the state space instead of parameter space.
Other approaches based on systems properties
There are approaches for model selection/ordering based on dynamical aspects of the system which do not require exact temporal property, thus do not need to be bound with the variables of the system. One of the approaches uses general properties of dynamics and the second compares the dynamics with other systems rather than the property itself.
General behavioural properties
Number of attractors/stable states/etc.
Oscillation, plateau, peak generation, liveness, etc.
System equivalence
Bisimulation
Topological equivalence (homeomorphism on orbits)
Dynamical equivalence (isomorphism)
Conclusions
To unveil biological mechanisms, we propose model ordering approach in order to reduce the set of candidate models. We start with the problem definition of three problems – model discrimination, selection, and ordering in Section 2.2. Further- more, a method for model ordering based on the behavioural comparison with focus on the satisfying parameter space is proposed in Section 3. A list of ordering rela- tions with respect to given specification is provided in Section 3.2. Based on this result maximal models can be selected. Finally, the method is applied to a case study of FFL motifs with known behaviour using Boolean and Multivalued Net- works in Section 4. The acquired orderings are compared with real-life incidence. The whole analysis is replicable using CoLoMoTo Interactive Notebook [15]. We dis- cuss the possible extensions, adaptation, and variations of the method in Section 5 from which we will work on the following:
Optimising the method by using parametrised models and structures compris- ing multiple models.
Expanding eligible specification by adding other temporal logics.
Expanding, analysing, and creating methods to compute usable ordering rela- tions.
As the most important part, we will study the applicability of the method.

References
Alon, U., “An Introduction to Systems Biology: Design Principles of Biological Circuits,” Chapman & Hall/CRC Mathematical and Computational Biology, 2006.

Beneˇs, N., L. Brim, M. Demko, S. Pastva and D. Sˇafr´anek, Pithya: A parallel tool for parameter synthesis of piecewise multi-affine dynamical systems, in: R. Majumdar and V. Kunˇcak, editors, CAV 2017, LNCS 10426 (2017), pp. 591–598.
Brim, L., M. Demko, M. Cˇeˇska, S. Pastva and D. Sˇafr´anek, Parameter synthesis by parallel coloured CTL model checking, in: O. Roux and J. Bourdon, editors, CMSB 2015, LNBI 9308 (2015), pp. 251– 263.
Brim, L., M. Demko, S. Pastva and D. Sˇafr´anek, High-performance discrete bifurcation analysis for piecewise-affine dynamical systems, in: A. Abate and D. Sˇafr´anek, editors, Hybrid Systems Biology 2015, LNBI 9271 (2015), pp. 58–74.
Cimatti, A., E. Clarke, E. Giunchiglia, F. Giunchiglia, M. Pistore, M. Roveri, R. Sebastiani and
A. Tacchella, NuSMV Version 2: An OpenSource Tool for Symbolic Model Checking, in: Proc. International Conference on Computer-Aided Verification (CAV), LNCS 2404 (2002).
Cimatti, A., E. Clarke, F. Giunchiglia and M. Roveri, Nusmv: A new symbolic model verifier, in:
International conference on computer aided verification, Springer, 1999, pp. 495–499.
Clarke, E. M. and E. A. Emerson, Design and synthesis of synchronization skeletons using branching time temporal logic, in: Workshop on Logic of Programs, Springer, 1981, pp. 52–71.
Clarke, E. M., E. A. Emerson and A. P. Sistla, Automatic verification of finite-state concurrent systems using temporal logic specifications, ACM Trans. Program. Lang. Syst. 8 (1986), pp. 244–263.
Fages, F. and A. Rizk, From model-checking to temporal logic constraint solving, in: International Conference on Principles and Practice of Constraint Programming, Springer, 2009, pp. 319–334.
Fages, F. and S. Soliman, Formal cell biology in biocham, in: SFM, LNCS 5016 (2008), pp. 54–80.
Hafner, M., H. Koeppl, M. Hasler and A. Wagner, ‘Glocal’ robustness analysis and model discrimination for circadian oscillators, PLoS computational biology 5 (2009), p. e1000534.
Kitano, H., Towards a theory of biological robustness, Molecular systems biology 3 (2007), p. 137.
McMillan, K. L., Symbolic model checking, in: Symbolic Model Checking, Springer, 1993 pp. 25–60.
Naldi, A., C. Hernandez, N. Levy, G. Stoll, P. T. Monteiro, C. Chaouiya, T. Helikar, A. Zinovyev,
L. Calzone, S. Cohen-Boulakia, D. Thieffry and L. Paulev´e, The CoLoMoTo Interactive Notebook: Accessible and Reproducible Computational Analyses for Qualitative Biological Networks, bioRxiv (2018).
Naldi, A., P. T. Monteiro, C. Mu¨ssel, C. for Logical Models, Tools, H. A. Kestler, D. Thieffry, I. Xenarios,
J. Saez-Rodriguez, T. Helikar and C. Chaouiya, Cooperative development of logical modelling standards and tools with colomoto, Bioinformatics 31 (2015), pp. 1154–1159.
Rizk, A., G. Batt, F. Fages and S. Soliman, A general computational method for robustness analysis with applications to synthetic gene networks, Bioinformatics 25 (2009).
Silk, D., P. D. Kirk, C. P. Barnes, T. Toni and M. P. Stumpf, Model selection in systems biology depends on experimental design, PLoS computational biology 10 (2014), p. e1003650.
Toni, T. and M. P. Stumpf, Simulation-based model selection for dynamical systems in systems and population biology, Bioinformatics 26 (2009), pp. 104–110.
