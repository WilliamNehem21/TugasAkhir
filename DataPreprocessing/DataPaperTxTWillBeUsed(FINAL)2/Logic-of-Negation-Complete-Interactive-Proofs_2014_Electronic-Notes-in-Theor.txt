Available online at www.sciencedirect.com


Electronic Notes in Theoretical Computer Science 300 (2014) 47–70
www.elsevier.com/locate/entcs

Logic of Negation-Complete Interactive Proofs (Formal Theory of Epistemic Deciders) ?
Simon Kramer
simon.kramer@a3.epfl.ch

Abstract
We produce a decidable classical normal modal logic of internalised negation-complete and thus disjunc- tive non-monotonic interactive proofs (LDiiP) from an existing logical counterpart of non-monotonic or instant interactive proofs (LiiP). LDiiP internalises agent-centric proof theories that are negation-complete (maximal) and consistent (and hence strictly weaker than, for example, Peano Arithmetic) and enjoy the disjunction property (like Intuitionistic Logic). In other words, internalised proof theories are ultrafilters and all internalised proof goals are definite in the sense of being either provable or disprovable to an agent by means of disjunctive internalised proofs (thus also called epistemic deciders). Still, LDiiP itself is clas- sical (monotonic, non-constructive), negation-incomplete, and does not have the disjunction property. The price to pay for the negation completeness of our interactive proofs is their non-monotonicity and non- communality (for singleton agent communities only). As a normal modal logic, LDiiP enjoys a standard Kripke-semantics, which we justify by invoking the Axiom of Choice on LiiP’s and then construct in terms of a concrete oracle-computable function. LDiiP’s agent-centric internalised notion of proof can also be viewed as a negation-complete disjunctive explicit refinement of standard KD45-belief, and yields a disjunctive but negation-incomplete explicit refinement of S4-provability.
Keywords: agents as proof checkers, constructive Kripke-semantics, disjunctive explicit doxastic and epistemic logic, epistemic deciders as decisive evidence, interactive and oracle computation, multi-agent systems, negation as failure, proofs as sufficient evidence, proof terms as truth values.


Introduction
The subject matter of this paper is classical normal modal logic of non-monotonic interactive proofs, i.e., a novel modal logic of negation-complete and thus disjunctive interactive proofs (LDiiP) and an existing modal logic of non-disjunctive and thus negation-incomplete interactive proofs (LiiP) (cf. [20] and [19]). (We abbreviate interactivity-related adjectives with lower-case letters.)
Our goal here is to produce LDiiP axiomatically as well as semantically from LiiP. Note that like in [20,19,17], we still understand interactive proofs as sufficient evidence for intended resource-unbounded proof-checking agents (who are though

٨ Work partially funded with Grant AFR 894328 from the National Research Fund Luxembourg cofunded under the Marie-Curie Actions of the European Commission (FP7-COFUND) [18].

1571-0661 © 2013 Published by Elsevier B.V. Open access under CC BY-NC-ND license.
http://dx.doi.org/10.1016/j.entcs.2013.12.011

unable to guess), and leave probabilistic and polynomial-time resource bounds for future work.

Motivation
Our immediate motivation for LDiiP is first the theoretical concept and second the practical application of a negation-complete variant of our interactive proofs [20,19,17]. The overarching motivation for LDiiP is to serve in an intuitionistic foundation of interactive computation. See [17] for a programmatic motivation.
Theoretical concept
Like in the non-interactive setting of a single prover-verifier agent, the motivation for negation-complete (maximal) and consistent logical theories (or ultrafilters [6]) and their external and internalised notions of proof is to gain cognitive, constructive, and computational content.
Recall that a logical theory T is negation-complete by definition if and only if (written “:iff” hereafter) for all formulas φ in the language (say L) of T, φ ∈ T or чφ ∈ T, and that T is consistent :iff ⊥ /∈ T (so T /= L), where ‘ч’ designates nega- tion (complementation) and ⊥ falsehood (bottom). Notice that each such logical theory (a filter 1 of propositions) is defined in terms of a characteristic property and thus independently of how it is generated (e.g., based on some proof system or sat- isfaction relation), and that inconsistent theories are trivially negation-complete as well as classical. Classic examples of non-trivial negation-complete (first-order) the- ories (with equality, but without sets) are: Tarski’s fragment of Euclidean Geometry, Presburger (natural-number) Arithmetic, and elementary real-number arithmetic. Given a recursive axiomatisation 2 of and thus an external notion of proof for T, negation completeness and consistency corresponds to the meta-theorem schema
▶T φ or ▶T чφ (NC) and /▶T ⊥ , respectively. That is, for all φ ∈ L, φ or чφ is
a theorem of T, or, model-theoretically speaking, a validity, i.e., a universal truth. For negation-complete consistent modal theories, this incidentally means that there is no local truth that is not also a global truth, and thus the point of their modality (which is non-trivial local truth, i.e., truth in some but not all of their pointed models) is nullified. (If ▶T φ then φ is a universal and thus global truth; if /▶T φ then ▶T чφ by the negation completeness of T, and thus чφ is a universal and thus global truth, and hence φ cannot be a local truth by the consistency of T.) So in some sense, negation-complete modal theories are trivial, even if they are consistent. Fortunately here, our modal LDiiP is negation-incomplete. It is only the notion of proof that LDiiP internalises that is negation-complete. Compared with LDiiP’s internalised agent-centric notion of proof, negation completeness and consistency corresponds to the axiom schema ▶LDiiP (M Va φ) V (M Va чφ) and
▶LDiiP ч(M Va ⊥), respectively, where M designates a proof (message) and a an

1 A subset in a (logical) lattice is a filter by definition if and only if it is closed under meet (conjunction) and the lattice ordering (implication) [6, Lindenbaum-Tarski algebra].
2 I.e., T has an algorithmically decidable set of axioms. This is a minimal requirement for any practical logical theory; it guarantees the recognizability of its axioms.

intended proof-checking agent. Notice how meta-logical negation and disjunction internalise as their object-logical counterparts. Also, observe that our internalisa- tion is more concrete than its external counterpart in the sense that the first speaks about a concrete (internalised) proof (sufficient evidence) M whereas the latter only speaks about an abstract (external) provability ▶T. Negation completeness means that M represents sufficient data (e.g., a completion of the local system history recorded as a log file) for deciding whether some statement (e.g., about the cur- rent system state given by the global history) is true or false. Hilbert hoped for a negation-complete consistent theory for the whole of mathematics, because, in his word, there is no ignorabimus in negation-complete consistent theories; in some sense, they are cognitively ideal: All (internalised) proof goals are deﬁnite [23], here in the sense that their truth or falsehood can be determined unambiguously (and here even effectively by an agent) by means of (internalised) proofs (thus also called epistemic deciders). Moreover, negation-complete theories, though necessarily non- intuitionistic (!), nevertheless enjoy the disjunction property of Intuitionistic Logic (IL), 3 which is that if ▶IL φ V φj then ▶IL φ or ▶IL φj (DP) [30]. Thus they have considerable constructive content, and this even by conserving the deductive conve- nience of the law of the excluded middle! To see why negation-complete theories are necessarily classical, suppose that there is a non-classical negation-complete theory T (i.e., /▶T φ V чφ, and ▶T φ or ▶T чφ) and derive an immediate contradiction therefrom by considering the law of right and left V-introduction (set φj := чφ), which asserts that if ▶T φ or ▶T φj then ▶T φ V φj (and is also valid in IL). In fact, for classical logical theories, negation completeness is classically equivalent to the disjunction property. This is a well-known result, which we recall here.
Theorem 1.1 For classical logical theories (ﬁlters in Boolean algebras or lattices), negation completeness (maximality or being an ultraﬁlter) is classically equivalent to the disjunction property (the property of being a prime ﬁlter).
Proof. See Appendix A.1.	2
Internalising negation-complete proof theories, LDiiP thus internalises their disjunc- tion  property,  as  the  theorem  schema  ▶LDiiP  (M Va (φ V φj))  → ((M Va φ) V (M Va φj)), which is why we call our internalised proofs also disjunctive. Yet given first, the classicality (and normality) of LDiiP, and second, Theorem 1.1, which applies to the theories that LDiiP internalises, we could as well have stipu- lated the internalised disjunction property as axiom schema and then derived the internalised negation completeness therefrom as theorem schema. That is, in ar- bitrary classical normal modal logics, we can make the following deduction, where the universal meta-quantification over φ and φj in Line 1 is left implicit:
▶ 2(φ V φj) → (2φ V 2φj)	assumed internalised disjunction property
▶ 2(φ V чφ) → (2φ V 2чφ)	1, particularisation (set φj := чφ)
▶ φ V чφ	classical tautology

3 See [5] for a survey of other, so-called super-intuitionistic or intermediate logics strictly below classical propositional logic that also enjoy the disjunction property.

▶ 2(φ V чφ)	3, necessitation (normality)
▶ 2φ V 2чφ	2, 4, modus ponens. (internalised negation completeness)
To see also the computational content in negation-complete consistent theories with a recursive axiomatisation as previously claimed, recall from classical recursion the- ory [22] that such theories are actually also recursive (algorithmically decidable) as a whole, i.e., not only in their set of axioms: The recursiveness of the axioms of a theory implies the recursive enumerability of its theorems. So in order to decide whether or not φ ∈ T for a given φ ∈L in the language L of such a theory T, start the enumeration process of the members of T. By the negation completeness of T, either φ or чφ will pop up in the process. If φ pops up then stop, and conclude that φ ∈ T; if чφ pops up then stop, and conclude that φ /∈ T by the consistency of T.
In summary, the cognitive, constructive, and computational content of recur- sively axiomatised negation-complete consistent theories is distilled in their max- imal consistency, disjunction property, and algorithmic decidability, respectively. However, their scope is far from the one of Hilbert’s hope: G¨odel ascertained the negation-incompleteness of any recursively axiomatised consistent theory contain- ing the Peano-Arithmetic (PA) part of mathematics [22,10]. 4 Worse, consistent theories containing PA are also algorithmically undecidable [22]. Notwithstand- ing, recursively axiomatised negation-complete consistent theories, which are thus strictly weaker than PA, are crucial for practical applications. (Maximally consis- tent sets are also crucial for theoretical applications such as the canonical-model construction for axiomatic completeness proofs, cf. Appendix A.4.2.)
Practical application
Both the external as well as the internalised form of negation completeness have important practical applications. Important practical applications of the external form “ ▶ φ or ▶ чφ ” of negation completeness, which have become classics in computer science and engineering, are logic databases and programming. There, the external form “ ▶ φ or ▶ чφ ” classically corresponds to the principle of negation as failure “ /▶ φ implies ▶ чφ ”, i.e., чφ can be inferred if every possible proof of φ fails [4,27]. Another important practical application of a modal-logical variant “ /▶ Ka(φ) implies ▶ чKa(φ) ” of negation as failure is artificial intelligence [25], where Ka(φ) reads as “agent a knows that φ (is true).” There, this epistemic variant of negation as failure produces a non-monotonic logic of knowledge for multi-agent distributed systems. (This is also the only piece of related work that we are aware of.) An important practical application of our internalised form ▶LDiiP (M Va φ) V M Va чφ of negation completeness is accountability for dependable multi-agent distributed systems (e.g., electronic voting systems [16], and, more generally, the whole Internet [21]). A multi-agent distributed system S is accountable by definition if and only if S is abuse-free and auditable [15]: For all agents b in S, (abuse-freeness), whenever b behaves correctly (as an agent in S), b can prove to all agents a (including to

4 Although the natural numbers form a strict subset of the real numbers, the negation-incomplete PA cannot be a subset of the negation-complete elementary real-number arithmetic (R) mentioned earlier; the natural numbers are not definable in the language of R [11].

herself) in S that she does so, and, (auditability ), whenever b behaves incorrectly (and thus is faulty), every or at least one other agent c in S will eventually be able to prove to all agents a in S (including to herself and b) that b is faulty, (cf. [15] for a formal transcription of this natural-language formulation). In such a system S, each agent b’s behaviour in terms of her past actions can be recorded in a log ﬁle [3] (say M ) that is broadcast; and it is this log file M that must be constructed so as to have sufficient evidential strength to constitute a negation-complete proof with respect to the proof goal of b behaving correctly (expressed with an atomic formula correct(b)):
(M Va correct(b)) V M Va ч correct(b)
In other words, M must constitute decisive evidence or, in yet other words, be an epistemic decider to a about the (ephemeral) issue of b’s correctness. (b can change her behaviour!) That is, LDiiP is a formal theory of epistemic deciders. For abuse- freeness (auditability), the prover b (c) must (eventually) know such an M , written b k M (c k M ). We will present formal definitions in Section 2 and a full formal case study in future work (cf. [15] for a preliminary, non-axiomatic accountability case study). Finally, note that a piece of decisive evidence M for correct(b) brought to the attention of a judge a can be viewed as a kind of forensic trace, since M allows a to decide whether or not b is correct and thus to decide whether or not b is guilty of behaving incorrectly.
Contribution
Conceptual contributions
Our conceptual contributions in this paper are the following. First, we produce a novel modal logic of negation-complete and thus disjunctive interactive proofs (cf. Theorem 2.17), which internalises agent-centric negation-complete consistent proof theories (enjoying the disjunction property) and has important theoretical and prac- tical applications. Second, we offer the insights that the price to pay for negation completeness and disjunctiveness is the non-monotonicity and non-communality of the resulting agent-centric notion of proof (cf. Fact 2.5 and 2.14, respectively), which turns out to be also a negation-complete disjunctive explicit refinement of standard KD45-belief (cf. Corollary 2.9). Third, we contribute a disjunctive but negation- incomplete explicit refinement of S4-provability (cf. Corollary 2.10), constructed from our notion of proof.
Technical contributions
Our technical contributions are the following. First, we provide a standard but also oracle-computational and set-theoretically constructive Kripke-semantics for LDiiP (cf. Section 2.2). Like in [20,19], we endow the proof modality with a standard Kripke-semantics [1], but whose accessibility relation MRa we first define constructively in terms of elementary set-theoretic constructions, 5 namely as MRa,

5 in loose analogy with the set-theoretically constructive rather than the purely axiomatic definition of num- bers [7] of ordered pairs (e.g., the now standard definition by Kuratowski, and other well-known definitions [23])

and then match to an abstract semantic interface in standard form (which abstractly stipulates the characteristic properties of the accessibility relation [9]). We will say that MRa exempliﬁes (or realises) MRa. (A simple example of a set-theoretically constructive but non-intuitionistic definition of a modal accessibility is the well- known definition of epistemic accessibility as state indistinguishability defined in terms of equality of state projections [8].) The Kripke-semantics for LDiiP is oracle- computational in the sense that (cf. Definition 2.11) the individual proof knowledge (say M ) can be thought of as being provided by an imaginary computation oracle, which thus acts as a hypothetical provider and imaginary epistemic source of our interactive proofs. Second, we prove Theorem 2.8, which establishes the proof- terms-as-truth-values view as well as a normal form for the special case of a singleton agent universe. Third, we prove the finite-model property (cf. Theorem 2.18) and the algorithmic decidability of LDiiP (cf. Corollary 2.19). (Negation completeness implies algorithmic decidability as seen in Section 1.1.1, but not vice versa as LDiiP testifies.)

Roadmap
In the next section, we introduce our Logic of Disjunctive instant interactive Proofs (LDiiP) axiomatically by means of a compact closure operator that induces the Hilbert-style proof system that we seek. We then gain the (syntactic) insight that negation completeness implies non-monotonicity (cf. Fact 2.5), and prove the above- mentioned Theorem 2.8 as well as Corollary 2.9 and 2.10 within the obtained system. Next, we introduce the concretely constructed semantics as well as the standard abstract semantic interface for LDiiP (cf. Section 2.2), and prove the axiomatic adequacy of the proof system with respect to this interface (cf. Theorem 2.17). We justify the existence of the constructive semantics of LDiiP by invoking the Axiom of Choice on LiiP’s (cf. Table 1) and then also construct it in terms of a concrete oracle-computable function, from which we gain the (semantic) insight that negation completeness implies non-communality (cf. Fact 2.14). Last but not least, we prove the finite-model property (cf. Theorem 2.18) and, therefrom, the algorithmic decidability (cf. Corollary 2.19) of LDiiP.

LDiiP
Syntactically
Like the Logic of instant interactive Proofs (LiiP), the Logic of Disjunctive in- stant interactive Proofs (LDiiP) provides a modal formula language over a generic message term language. The formula language of LDiiP offers the propositional constructors, a relational symbol ‘ k ’ for constructing atomic propositions about individual knowledge (e.g., a k M ), and a modal constructor ‘ Va ’ for propositions about proofs (e.g., M Va φ). In brief, LDiiP is a minimal extension of classical propositional logic with an interactively generalised additional operator (the proof modality) and proof-term language. Note, the language of LDiiP is identical to

the one of LiiP [20,19] modulo the proof-modality notation, which in LiiP is ‘ ::C ’, where a acts as proof checker, like in LDiiP, and C as a’s peer group, unlike in LDiiP (non-communality).
Definition 2.1 [The language of LDiiP] Let
A /= ∅ designate a non-empty finite set of agent names a, b, c, etc.
M designate a language of message terms M such that a ∈M 
P designate a denumerable set of propositional variables P constrained such that for all a ∈ A and M ∈ M, (a k M ) ∈ P (for “a knows M ”) is a distinguished variable, i.e., an atomic proposition, (for individual knowledge)
(So, for a ∈ A, a k · is a unary relational symbol.)

L e φ ::= P  чφ  φ Λ φ 
designate our language of logical formulas

φ, where M Va φ reads “M can disjunctively prove that φ to a” in the sense that “M can prove whether or not φ (is true) to a.”
Note the following macro-definitions: T := a Va a k a, ⊥ := чT, φ V φj := ч(чφ Λ чφj), φ → φj := чφ V φj, and φ x φj := (φ → φj) Λ (φj → φ).
Then, LDiiP has the following axiom and deduction-rule schemas, where grey- shading indicates the remaining essential differences to LiiP (cf. [20] and [19]).
Definition 2.2 [The axioms and deduction rules of LDiiP] Let
Γ0 designate an adequate set of axioms for classical propositional logic


Γ2 := Γ0 ∪ Γ1 ∪{ 
·
(M Va (φ → φj)) → ((M Va φ) → M Va φj)	(Kripke’s law, K)
(M Va φ) → (a k M → φ)	(epistemic truthfulness)


}
designate the axiom schemas of LDiiP.

Then,


Cl0(Γ) := Γ2 ∪ Γ
:=  n∈N Cln(∅), where for all Γ ⊆ L:

Cln+1(Γ) := Cln(Γ) ∪
{ φj | {φ, φ → φj}⊆ Cln(Γ) }∪	(modus ponens, MP)
{ M Va φ | φ ∈ Cln(Γ) }∪	(necessitation, N).
We call LDiiP a base theory, and Cl(Γ) an LDiiP-theory for any Γ ⊆ L.

Notice the logical order of LDiiP, which like LiiP’s is, due to propositions about (proofs of) propositions, higher-order propositional. From LiiP (cf. [20] and [19]), we recall the discussions of Kripke’s law (K), the law of epistemic truthfulness, and the law of necessitation (N): The key to the validity of K is that we understand inter- active proofs as sufficient evidence for intended resource-unbounded proof-checking agents (who are though still unable to guess). Clearly for such agents, if M is suf- ficient evidence for φ → φj and φ then so is M for φj. Then, the significance of epistemic truthfulness to interactivity is that in truly distributed multi-agent sys- tems, not all proofs are known by all agents, i.e., agents are not omniscient with respect to messages. Otherwise, why communicate with each other? So there being a proof does not imply knowledge of that proof. When an agent a does not know the proof and the agent cannot generate the proof ex nihilo herself by guessing it, only communication from a peer, who thus acts as an oracle, can entail the knowledge of the proof with a. Next, the justification for N is that in interactive settings, validities, and thus a fortiori tautologies (in the strict sense of validities of the propositional fragment), are in some sense trivialities [17]. To see why, recall that modal validities are true in all pointed models (cf. Definition A.1), and thus not worth being communicated from one point to another in a given model, e.g., by means of specific interactive proofs. (Nothing is logically more embarrassing than talking in tautologies.) Therefore, validities deserve arbitrary proofs. What is worth being communicated are truths weaker than validities, namely local truths in the standard model-theoretic sense (cf. Definition A.1), which may not hold universally. Otherwise why communicate with each other? We continue to discuss the remain- ing, new axioms and rules. As mentioned, the message language M of LDiiP is generic, and thus a k M will require axioms that are appropriate to the term struc- ture of the chosen M ∈M (such as those required for LiiP [20,19]). The validity of the axiom schema of self-knowledge is justified by oracle computation: “if a were to receive M , e.g., from an oracle, then a would know M ” (cf. Definition 2.11). (The law of self-knowledge is also valid in LiiP, where it corresponds to the theo- rem [but not axiom] schema M ::$ a k M .) The axiom schema of proof consistency and negation completeness internalises (external theory) consistency and negation completeness, respectively (cf. Section 1.1.1). Observe that internalised negation completeness is defined independently of the proof-term structure (M is abstract), just as (external) negation completeness of a logical theory is defined independently of its possible proof-system structure. However, this abstract definition is an in- direct, structural constraint: after all, not any proof-system structure generates a negation-complete theory.
Proposition 2.3 (Hilbert-style proof system) Let
Φ ▶LDiiP φ :iff if Φ ⊆ LDiiP then φ ∈ LDiiP
φ E▶LDiiP φj :iff {φ} ▶LDiiP φj and {φj} ▶LDiiP φ
▶LDiiP φ :iff ∅ ▶LDiiP φ.
In other words, ▶LDiiP ⊆ 2L ×L is a system of closure conditions in the sense of [28, Deﬁnition 3.7.4]. For example:

for all axioms φ ∈ Γ2, ▶LDiiP φ
for modus ponens, {φ, φ → φj} ▶LDiiP φj
for necessitation, {φ} ▶LDiiP M Va φ.
(In the space-saving, horizontal Hilbert-notation “Φ ▶LDiiP φ”, Φ is not a set of hypotheses but a set of premises, cf. modus ponens and necessitation.) Then ▶LDiiP can be viewed as being deﬁned by a Cl-induced Hilbert-style proof system. In fact Cl : 2L → 2L is a standard consequence operator, i.e., a substitution-invariant compact closure operator.
Proof. Like in [17]. That a Hilbert-style proof system can be viewed as induced by a compact closure operator is well-known (e.g., see [12]); that Cl is indeed such an operator can be verified by inspection of the inductive definition of Cl; and substitution invariance follows from our definitional use of axiom schemas. 6	2
Corollary 2.4 (Normality) LDiiP is a normal modal logic.
Proof. Jointly by Kripke’s law, modus ponens, necessitation (these by definition), and substitution invariance (cf. Proposition 2.3).	2
Note that in LDiiP, an analog of the primitive LiiP-rule
{a k M x a k Mj} ▶LiiP (Mj ::C φ) x M ::C φ	(see [20,19])
a	a
would be invalid (because incompatible with negation completeness) and thus is not admitted in LDiiP. A fortiori, an analog of the stronger primitive LiP-rule
{a k M → a k Mj} ▶LiP (Mj :C φ) → M :C φ	(see [20,17])
a	a
by which proof monotonicity ▶LiP (M :C φ) → (M, Mj) :C φ under paired data Mj
a	a
can be deduced, would be invalid and thus is not admitted in LDiiP either. We
thus assert the following negative fact about our negation-complete proofs.
Fact 2.5 Negation completeness implies non-monotonicity.
Note that if we introduced a pairing constructor for proof terms into the message language M of LDiiP (as with LiiP, cf. Table 1), Fact 2.5 would mean that
/▶LDiiP (M Va φ) → (M, Mj) Va φ. 
Fact 2.6
{φ → φj} ▶LDiiP (M Va φ) → M Va φj	(regularity)
▶LDiiP ч(M Va ⊥) x ((M Va φ) → ч(M Va чφ))
▶LDiiP (M Va чφ) x M Va (φ → ⊥)

6 Alternatively to axiom schemas, we could have used axioms together with an additional substitution-rule set { σ[φ] | φ ∈ Cln(Γ) } in the definiens of Cln+1(Γ).

Proof. 1 and 2 are well-known for necessity modalities in arbitrary normal modal logics. For 3, consider that ▶LDiiP чφ x (φ → ⊥) since чφ x (φ → ⊥) is a classical tautology, and then deduce the conclusion by 1.	2
Lemma 2.7
▶LDiiP M Va ((M Va φ) → φ)	(self-proof of truthfulness)
▶LDiiP (M Va (M Va φ)) → M Va φ	(proof density)
Proof. See Appendix A.2	2
The laws of self-proof of truthfulness and proof density also hold in LiiP [20,19]. We continue to present the first important result about LDiiP.
Theorem 2.8 (Proof terms as Truth values)
▶LDiiP (M Va чφ) x ч(M Va φ)	(maximal consistency)
▶LDiiP (M Va (φ Λ φj)) x ((M Va φ) Λ M Va φj)	(proof conjunctions bis)
▶LDiiP (M Va (φ V φj)) x ((M Va φ) V M Va φj)	(IDP bis)
▶LDiiP (M Va (φ → φj)) x ((M Va φ) → M Va φj)	(K bis)
▶LDiiP (M Va (φ x φj)) x ((M Va φ) x M Va φj)	(Bi-K)
▶LDiiP (M Va (M Va φ)) x M Va φ	(modal idempotency)
▶LDiiP b k M → ((M Vb (M Va φ)) x M Va φ)	(modal idempotency bis)
Proof. See Appendix A.3	2
“IDP” abbreviates “Internalised Disjunction Property.” The laws are enumerated in a (total) order that respects their respective proof prerequisites. Notice that The- orem 2.8.2–2.8.5 are modal distributivity laws. They assert that the proof modality of LDiiP is fully distributive over (binary) Boolean operators. While the laws of proof conjunction bis and modal idempotency also hold in LiiP [20,19], only the if-direction of the laws IDP bis and K bis hold in LiiP. Notice also that modal idempotency combines proof density (cf. Lemma 2.7.2) and proof transitivity (cf. Line l of the proof of modal idempotency). Like in LiiP and LiP, the key to the validity of modal idempotency is that each agent (e.g., a) can act herself as proof checker, see [17, Section 3.2.2] for more details. The law of modal idempotency bis is a generalisation of modal idempotency. Observe that when |A| = 1, Theorem 2.8 implies that all occurrences of the proof modality in a compound LDiiP-formula can be compiled away in the sense that all these occurrences can be pushed in front of possibly negated atomic sub-formulas (i.e., literals) of the compound formula, with the axiom formula M Va a k M acting as base case. Hence in this case, we can understand proof terms as truth-values in the spirit of a form of realizability interpretation of constructive logic [29, Section 7.8]. Otherwise, i.e., when |A| > 1 (recall from Definition 2.1 that A /= ∅), it is possible that not all such occurrences in a compound formula can be compiled away (cf. Theorem 2.8.7).
The following corollary asserts that our negation-complete and thus disjunc- tive proof modality is also an explicit reﬁnement of the standard (implicit) belief

modality [24].
Corollary 2.9 (Negation-complete Disjunctive Explicit Belief)
‘M Va ·’ is a negation-complete disjunctive KD45-modality of explicit agent belief, where M represents the explicit evidence term that can justify agent a’s belief.

Proof. Consider that ‘M Va ·’ satisfies Kripke’s law (K, cf. Definition 2.2), the D- law (called “proof consistency” in Definition 2.2), the 4-law (cf. the only-if part of Theorem 2.8.6), necessitation (cf. Definition 2.2), and negation completeness (cf. Definition 2.2), and thus the internalised disjunction property (cf. the if-part of Theorem 2.8.3). That ‘M Va ·’ also satisfies the 5-law can be proved as follows:
▶LDiiP ч(M Va φ) → (M Va чφ)	only-if-part of Theorem 2.8.1
▶LDiiP (M Va чφ) → M Va (M Va чφ)	only-if-part of Theorem 2.8.6[чφ]
▶LDiiP ч(M Va φ) → M Va (M Va чφ)	1, 2, transitivity of →
▶LDiiP (M Va чφ) → ч(M Va φ)	if-part of Theorem 2.8.1
▶LDiiP (M Va (M Va чφ)) → M Va ч(M Va φ)	4, regularity
▶LDiiP ч(M Va φ) → M Va ч(M Va φ)	3, 5, transitivity of →.
2

Thanks to epistemic truthfulness, a k M is a sufficient condition for ‘M Va ·’ to behave like a standard S5-knowledge modality [24,8,14], which not only obeys the D-law but also the stronger T-law, in the sense that

▶LDiiP a k M → ((M Va φ) → φ).
`	T˛-l¸aw	x

In the following corollary, we construct also a disjunctive but negation-incomplete explicit refinement of (implicit) S4-provability.
Corollary 2.10 (Disjunctive Explicit Provability) ‘a k M Λ M Va ·’ is a dis- junctive but negation-incomplete S4-modality of explicit agent provability, where M represents the explicit evidence term that does justify agent a’s knowledge.
Proof. By Corollary 2.9 and the fact that the truth law ▶LDiiP (a k MΛM Va φ) → φ for the modality ‘a k M Λ M Va ·’ is equivalent to the law of epistemic truthfulness (cf. Definition 2.2). Note that although the modality ‘a k M Λ M Va ·’ is evidently disjunctive, i.e., ▶LDiiP (a k M Λ M Va (φ V φj)) → ((a k M Λ M Va φ) V (a k M Λ M Va φj)), it is negation-incomplete in that /▶LDiiP (a k M Λ M Va φ) V (a k M Λ M Va чφ), because /▶LDiiP a k M , in turn because of the arbitrariness of Γ1 (cf. Definition 2.2). Fixing Γ1 so that a resource-unbounded agent a unable to guess knows all messages M could only make sense for A = {a}. Otherwise, i.e., when all agents know all messages, why interact with each other?	2

Semantically
We continue to present the concretely constructed semantics as well as the standard abstract semantic interface for LDiiP, and prove the axiomatic adequacy of the proof system with respect to this interface. We justify the existence of the constructive semantics of LDiiP by invoking the Axiom of Choice on LiiP’s [20,19] and then also construct it in terms of a concrete oracle-computable function.


Concretely
The ingredients for the concrete semantics of LiiP, from which we will construct the concrete semantics of LDiiP, are displayed in Table 1. Therefrom, we will only need a concrete instance of £ and msgsa, and an abstract instance of cls as ingredients for LDiiP. Observe there that the concrete accessibility MRC of LiiP is a totally defined proper (non-functional) relation. Yet we do need a concrete accessibility relation for LDiiP that is functional, because LDiiP’s negation-completeness axiom corresponds to the functionality property of such a relation. (LDiiP’s proof consistency axiom corresponds to the totality property of such a relation.) Fortunately, the concrete accessibility MRC of LiiP is totally defined, and so we know by the Axiom of Choice AC[MRC ], which we may thus apply to MRC , that MRC can be “functionalised,” that
a	a	a
is [23],

for all s ∈ £, there is sj ∈£ such that s MRC sj implies
`	MRC is to˛ta¸lly defined	x
there is f : £ → £ such that for all s ∈ £, s MRC f (s) .  (AC[MRC ])
`	MRC can be “˛f¸unctionalised”	x

Notice that the Axiom of Choice is non-constructive in that it abstractly asserts the conditional existence of a certain f but without actually providing a concrete example of such an f . Thus our problem now is to find such an f for MRC , which will allow us to construct a functional concrete accessibility for LDiiP. In Definition 2.11, we construct such an f as an oracle-computational function σM on concrete states constructed inductively in terms of certain generalised successor functions. The essential differences in Definition 2.11 to Table 1 are grey-shaded.

Definition 2.11 [Semantic ingredients] For the set-theoretically constructive, model- theoretic study of LDiiP let


£ e s
senti
, where 0 can be understood as a zero data point (repre-
example), and succM can be read as “agent a receives

message M (for example from another agent acting as an oracle)”



Table 1
Semantic ingredients for LiiP [20,19] (partially reused here for LDiiP)

msgsa : £ → 2M be such that
msgsa(0) := ∅
msgs (succM (s)) :=  msgsa(s) ∪ {M}	if a = b, and

cla : 2M → 2M designate a compact closure operator and define cls : 2M → 2M





MRa ⊆£ × £ designate a concretely constructed accessibility relation—short,
concrete accessibility —for the negation-complete disjunctive proof modality such

that for all s, sj ∈ £,
Fact 2.12
σM (and thus MRa) is oracle-computable.

If cla is polynomial-time computable then so is σM
(and thus MRa).

Proof. Clearly, if cla is computable then σM is computable, and similarly for 2. 2
In particular when cla = id2M , that is, when cla is the identity function on 2M (a performs no data-mining operations), MRa is polynomial-time computable.

Fact 2.13 For σM , ﬁx cla
as in Table 1. Then:

for all s ∈ £, s MRC σM (s); 
a  a
MRa ⊆ MR$ (and MR$ ⊆ MRC [20,19]).
Proof. Fix cla as in Table 1. For 1, consider that s <M σM (s) and thus s <M
a	a	C∪{a}
σM (s), M ∈ clσM (s)(∅), and σM (s) ≡ σM (s) in Table 1. Hence there is s˜ ∈£ such
a	a	a	a  a
that s <M	s˜ and M ∈ cls˜(∅) and s˜ ≡a σM (s). (In reverse, σM can be used as a
C∪{a}	a	a	a
Skolem-function for the existential quantifier in the previous statement and thus in
the definiens of MRC in Table 1.) For 2, inspect 1 and definitions.	2

Hence we have indeed found in σM
an instance of an f for MRC
whose existence

AC[MRC ] postulates and thus indeed constructed a functional totally defined sub- relation MRa of MRC —from MRC itself (as a Skolemnisation of its definiens). How-

ever notice that we have lost C in MRa (non-communality), because σM
simply

disregards C. This is the price for the functionality of MRa. Actually, MRa (for

LDiiP) is a functional analog of <M
(for LiiP, see Table 1). And it is impossible

to construct a functional analog of MRC from a union of MRa
over C, because such

a union of functions need not be a function anymore. In contrast, it is possible

to construct a functional analog of MRC from an intersection of MRa
over C, since

such an intersection of functions is again a function. Yet unfortunately it then need
not be total anymore! We can thus assert the following negative fact about our negation-complete proofs.
Fact 2.14 Negation-completeness implies non-communality.
This fact could be useful to establish the theoretical and thus also practical impos- sibility of engineering social procedures [26] for which negation completeness would be a necessary condition. Due to the same fact, there is no community parameter C in ‘ Va ’ and, in particular, no LDiiP-analog of the LiiP-axiom
▶	(M ::C∪C′ φ) → M ::C φ	(see [20,19]).
LiiP	a	a
Note that if we were to mix LiiP- and LDiiP-modalities in a single logic, the formula

(M ::$ φ) → M V
φ would be a sound axiom in that logic due to Fact 2.13.2.

a	a

Table 2 Satisfaction relation

Proposition 2.15
there is sj ∈£ such that s MRa sj	(seriality/totality)
if s MRa sj and s MRa sjj then sj = sjj	(determinism/functionality)

if M ∈ cls(∅) then s MRa
s	(conditional reflexivity)

if s
MRa
sj then M ∈
′
cla (
∅)	(epistemic image)


succM (s)

Proof. By inspection of definitions. (For 4, consider that M ∈ cla	a	(∅).)	2

Abstractly
We now continue to present the abstract semantic interface for LDiiP, and prove the axiomatic adequacy of the proof system with respect to this interface.
Definition 2.16 [Kripke-model] We define the satisfaction relation ‘ |=’ for LDiiP in Table 2, where
V : P → 2E designates a usual valuation function, yet partially predefined such that for all a ∈A and M ∈ M,
V(a k M ) := { s ∈£ | M ∈ cls(∅) }
for £ assumed abstract (and thus general) like in Table 1 and cls like in Defini- tion 2.11 but with msgsa abstract (and thus general) like in Table 1
S := (£, {MRa}M∈n,a∈A) designates a (modal) frame for LDiiP with an ab- stractly constrained accessibility relation—short, abstract accessibility —MRa ⊆
£ × £ for the negation-complete disjunctive proof modality such that—the se- mantic interface:
there is sj ∈£ such that s MRa sj	(seriality/totality)
if s MRa sj and s MRa sjj then sj = sjj	(determinism/functionality)
if M ∈ cls(∅) then s MRa s	(conditional reflexivity)

if s
MRa
sj then M ∈
′
cla (
∅)	(epistemic image)

(S, V) designates a (modal) model for LDiiP.
Looking back, we recognise that Proposition 2.15 actually establishes the im- portant fact that our concrete accessibility MRa in Definition 2.11 realises all the properties stipulated by our abstract accessibility MRa in Definition 2.16; we say

that

MRa exempliﬁes (or realises) MRa.

Theorem 2.17 (Axiomatic adequacy) ▶LDiiP is adequate for |=, i.e.,:
if ▶LDiiP φ then |= φ	(axiomatic soundness)
if |= φ then ▶LDiiP φ	(semantic completeness).
Proof. Both parts can be proved with standard means: soundness follows as usual from the admissibility of the axioms and rules (cf. Appendix A.4.1); and com- pleteness follows by means of the classical construction of canonical models, using Lindenbaum’s construction of maximally consistent sets (cf. Appendix A.4.2).  2
Theorem 2.18 (Finite-model property) For any LDiiP-model M, if M, s |= φ then there is a ﬁnite LDiiP-model Mfin such that Mfin,s |= φ.
Proof. By the fact that the minimal ﬁltration [13]


Mmin,Γ := (£/~
, {MRmin,Γ}M ∈n,a∈A, VΓ)

of any LDiiP-model M := (£, {MRa}M∈n,a∈A, V) through a finite Γ ⊆L is a finite

LDiiP-model such that for all γ ∈ Γ, M,s |= γ if and only if Mmin,Γ, [s]~
|= γ.

Following [13] for our setting, we define
∼Γ := { (s, sj) ∈£ × £ | for all γ ∈ Γ, M,s |= γ iff M, sj |= γ }

MRmin,Γ := { ([s]~
, [sj]~
) | (s, sj) ∈ MRa }

VΓ(P ) := { [s]~Γ | s ∈ V(P ) } .
We further fix M ∈ cl[s]∼Γ (∅) :iff [s]	∈V (a k M ), and choose Γ to be the (finite)
a	~Γ	Γ
sub-formula closure of φ. Hence, we are left to prove that Mmin,Γ is indeed an LDiiP-
model, which means that we are left to prove that	Rmin,Γ has all the properties
M  a
stipulated by the semantic interface of LDiiP:
Rmin,Γ inherits seriality/totality as well as determinism/functionality from  R ,
M  a	M  a

as can be seen by inspecting the definition of
Rmin,Γ;

M  a
for conditional reflexivity, suppose that M ∈ cl[s]∼Γ (∅).	Thus consecutively:
s
[s]~Γ ∈ VΓ(a k M ) by definition, s ∈ V(a k M ) by definition, M ∈ cl (∅) by defi-

nition, s
R s by the conditional reflexivity of
R , and finally [s]
Rmin,Γ

M  a	M  a	~Γ M  a

[s]~Γ by definition;
for the epistemic-image property, suppose that [s]

Rmin,Γ [sj]

. Thus con-

~Γ M  a	~Γ

secutively: s
MRa
sj by definition, M ∈
′
cla (
∅) by the epistemic-image property

of MRa, sj ∈ V(a k M ) by definition, [sj]~
M ∈ cl[s′]∼Γ (∅) by definition.
∈ VΓ(a k M ) by definition, and finally

2

Corollary 2.19 (Algorithmic decidability) If the sub-theory generated by Γ1
(cf. Deﬁnition 2.2) is algorithmically decidable then LDiiP (over Γ1) is so too.

Proof. In order to algorithmically decide whether or not φ ∈ LDiiP (that is, ▶LDiiP φ), axiomatic adequacy allows us to check whether or not чφ is locally satisfiable (that is, whether or not M,s |= чφ for some LDiiP-model M and state s; by assumption, M ∈ cls(∅), modelling membership in the theory generated by Γ1, is decidable.). But then, the finite-model property of LDiiP allows us to enumerate all finite LDiiP-models Mfin up to a size of at most 2 to the power of the size n of the sub-formula closure of чφ and to check whether or not Mfin,s |= чφ. (There are at most 2n equivalence classes for n formulas.)	2
So in some sense, we have proved the algorithmic decidability of the epistemic decisiveness of the evidence terms in LDiiP. Note that the algorithmic complexity of LDiiP will depend on the specific choice of Γ1 in Definition 2.2.
Conclusion
We have produced LDiiP from LiiP with as main contributions those described in Section 1.2. In future work, we shall work out dynamic and first-order extensions of LDiiP as well as the preliminary case study [15] mentioned in Section 1.1.2.

References
P. Blackburn and J. van Benthem. Handbook of Modal Logic, chapter Modal Logic: A Semantic Perspective. Volume 3 of Blackburn et al. [2], 2007.
P. Blackburn, J. van Benthem, and F. Wolter, editors. Handbook of Modal Logic, volume 3 of Studies in Logic and Practical Reasoning. Elsevier, 2007.
A. Chuvakin. Beautiful Security: Leading Security Experts Explain How They Think, chapter Beautiful Log Handling. O’Reilly, 2009.
K.L. Clark. Logic and Databases, chapter Negation As Failure. Plenum Press, 1978.
A. Chagrov and M. Zakharyashchev. The disjunction property of intermediate propositional logics.
Studia Logica, 50(2), 1991.
B.A. Davey and H.A. Priestley. Introduction to Lattices and Order. Cambridge University Press, 1990 (2002).
S. Feferman. The Number Systems: Foundations of Algebra and Analysis. AMS Chelsea Publishing, second edition, 1964 (1989). Reprinted by the American Mathematical Society, 2003.
R. Fagin, J.Y. Halpern, Y. Moses, and M.Y. Vardi. Reasoning about Knowledge. MIT Press, 1995.
M. Fitting. Handbook of Modal Logic, chapter Modal Proof Theory. Volume 3 of Blackburn et al. [2], 2007.
M. Fitting. Incompleteness in the Land of Sets, volume 5 of Studies in Logic. College Publications, 2007.
T. Franz´en. G¨odel’s Theorem: An Incomplete Guide To Its Use and Abuse. A K Peters, Ltd., 2005.
D.M. Gabbay, editor. What Is a Logical System? Number 4 in Studies in Logic and Computation. Oxford University Press, 1995.
V. Goranko and M. Otto. Handbook of Modal Logic, chapter Model Theory of Modal Logic. Volume 3 of Blackburn et al. [2], 2007.
V.F. Hendricks and O. Roy, editors. Epistemic Logic: 5 Questions. Automatic Press, 2010.


S. Kramer and A. Rybalchenko. A multi-modal framework for achieving accountability in multi-agent systems. In Proceedings of the ESSLLI-affiliated Workshop on Logics in Security, 2010. http://www. simon-kramer.ch/papers/ESSLLI-10_proceedings.pdf.
S. Kramer and P.Y.A. Ryan. A modular multi-modal specification of real-timed, end-to-end voter- verifiable voting systems. In Proceedings of the RE-affiliated Workshop on Requirements Engineering for Electronic Voting Systems. IEEE, 2011. http://ieeexplore.ieee.org/xpl/articleDetails.jsp? arnumber=6045911.
S. Kramer. A logic of interactive proofs (formal theory of knowledge transfer). Technical Report 1201.3667, arXiv, 2012. http://arxiv.org/abs/1201.3667.
S. Kramer. Logic of negation-complete interactive proofs (formal theory of epistemic deciders). Technical Report 1208.5913, arXiv, 2012. http://arxiv.org/abs/1208.5913.
S. Kramer. Logic of non-monotonic interactive proofs (formal theory of temporary knowledge transfer). Technical Report 1208.1842, arXiv, 2012. http://arxiv.org/abs/1208.1842.
S. Kramer. Logic of non-monotonic interactive proofs. In Proceedings of ICLA, volume 7750 of LNCS. Springer, 2013. http://link.springer.com/chapter/10.1007/978-3-642-36039-8_16.
C.E. Landwehr. A national goal for cyberspace: Create an open, accountable Internet. IEEE Security & Privacy, 7(3), 2009.
R. Lassaigne and M. de Rougemont. Logic and Complexity. Springer, 2004.
Y. Moschovakis. Notes on Set Theory. Springer, 2nd edition, 2006.
J.-J. Meyer and F. Veltman. Handbook of Modal Logic, chapter Intelligent Agents and Common Sense Reasoning. Volume 3 of Blackburn et al. [2], 2007.
R. Parikh. Monotonic and non-monotonic logics of knowledge. Fundamenta Informaticae, 15(3–4), 1991.
E. Pacuit and R. Parikh. Interactive Computation: The New Paradigm, chapter Social Interaction, Knowledge, and Social Software. Springer, 2006.
R. Reiter. Logic and Databases, chapter On Closed World Databases. Plenum Press, 1978.
P. Taylor. Practical Foundations of Mathematics. Cambridge University Press, 1999.
A.S. Troelstra. Handbook of Proof Theory, volume 137 of Studies in Logic and the Foundations of Mathematics, chapter Realizability. Elsevier, 1998.
A.S. Troelstra and D. van Dalen, editors. Constructivism in Mathematics—An Introduction, volume 121 of Studies in Logic and the Foundations of Mathematics, chapter Logic. Elsevier, 1988.
Y. Venema. Handbook of Modal Logic, chapter Algebras and Coalgebras. Volume 3 of Blackburn et al. [2], 2007.

Remaining proofs
Proof of Theorem 1.1
Suppose that T is a classical logical theory with language L (i.e., for all φ ∈ L,
▶T φ V чφ).
For the if-direction, suppose that for all φ ∈ L, ▶T φ or ▶T чφ, and let φ, φj ∈ L. Thus ▶T φ or ▶T чφ. Let us proceed by case analysis of this disjunction:
So first suppose that ▶T φ. Hence ▶T φ or ▶T φj (from A infer A or B), and thus
▶T φVφj (vacously) implies ▶T φ or ▶T φj (from A or B infer C implies A or B).
Now suppose that ▶T чφ. Further suppose that ▶T φ V φj (that is, C). Hence
▶T φj (that is, B), and thus ▶T φ or ▶T φj (from B infer A or B). (Thus inferring C implies A or B.)

For the only-if direction, suppose that for all φ, φj ∈ L, ▶T φ V φj implies ▶T φ or
▶T φj, and let φ ∈ L. Hence ▶T φ Vчφ implies ▶T φ or ▶T чφ (particularising the universally quantified φj with чφ). Hence ▶T φ or ▶T чφ, since we have initially supposed T to be classical.
(See also [6].)

Proof of Lemma 2.7
(a) ▶LDiiP (M Va φ) → (a k M → φ)	epistemic truthfulness
▶LDiiP a k M → ((M Va φ) → φ)	a, PL
▶LDiiP (M Va (a k M )) → M Va ((M Va φ) → φ)	b, regularity
▶LDiiP M Va a k M	self-knowledge
▶LDiiP M Va ((M Va φ) → φ)	c, d, PL.
(a) ▶LDiiP M Va ((M Va φ) → φ)	Lemma 2.7.1
▶LDiiP (M Va ((M Va φ) → φ)) → ((M Va (M Va φ)) → M Va φ)	K
▶LDiiP (M Va (M Va φ)) → M Va φ	a, b, PL.

Proof of Theorem 2.8
(a) ▶LDiiP ч(M Va ⊥)	proof consistency
▶LDiiP ч(M Va ⊥) x ((M Va φ) → ч(M Va чφ))	Fact 2.6
▶LDiiP (M Va φ) → ч(M Va чφ)	a, b, PL
▶LDiiP (M Va чφ) → ч(M Va φ)	c, PL
▶LDiiP (M Va φ) V M Va чφ	negation completeness
▶LDiiP ч(M Va φ) → M Va чφ	e, PL
▶LDiiP (M Va чφ) x ч(M Va φ)	d, f, PL.
(a) ▶LDiiP φ → (φj → (φ Λ φj))	tautology
▶LDiiP (M Va φ) → M Va (φj → (φ Λ φj))	a, regularity
▶LDiiP (M Va (φj → (φ Λ φj))) → ((M Va φj) → M Va (φ Λ φj))	K
▶LDiiP (M Va φ) → ((M Va φj) → M Va (φ Λ φj))	b, c, PL
▶LDiiP ((M Va φ) Λ M Va φj) → M Va (φ Λ φj)	d, PL
▶LDiiP (φ Λ φj) → φ	tautology
▶LDiiP (M Va (φ Λ φj)) → M Va φ	f, regularity
▶LDiiP (φ Λ φj) → φj	tautology
▶LDiiP (M Va (φ Λ φj)) → M Va φj	h, regularity
▶LDiiP (M Va (φ Λ φj)) → ((M Va φ) Λ M Va φj)	g, i, PL
▶LDiiP ((M Va φ) Λ M Va φj) x M Va (φ Λ φj)	e, j, PL.
(a) ▶LDiiP (M Va (φ V φj)) x M Va ч(чφ Λ чφj)	definition
▶LDiiP (M Va ч(чφ Λ чφj)) x ч(M Va (чφ Λ чφj))	Theorem 2.8.1
▶LDiiP (M Va (φ V φj)) x ч(M Va (чφ Λ чφj))	a, b, PL
▶LDiiP (M Va (чφ Λ чφj)) x ((M Va чφ) Λ M Va чφj)	Theorem 2.8.2
▶LDiiP ч(M Va (чφ Λ чφj)) x ч((M Va чφ) Λ M Va чφj)	d, PL
▶LDiiP (M Va (φ V φj)) x ч((M Va чφ) Λ M Va чφj)	c, e, PL
▶LDiiP ч((M Va чφ) Λ M Va чφj) x (ч(M Va чφ) V ч(M Va чφj))	PL

▶LDiiP (M Va (φ V φj)) x (ч(M Va чφ) V ч(M Va чφj))	f, g, PL
▶LDiiP (M Va чφ) x ч(M Va φ)	Theorem 2.8.1
▶LDiiP ч(M Va чφ) x (M Va φ)	i, PL
▶LDiiP (M Va чφj) x ч(M Va φj)	Theorem 2.8.1
▶LDiiP ч(M Va чφj) x (M Va φj)	k, PL
▶LDiiP (M Va (φ V φj)) x ((M Va φ) V M Va φj)	h, j, l, PL.
(a) ▶LDiiP ((M Va φ) → M Va φj) x (ч(M Va φ) V M Va φj)	definition
▶LDiiP (M Va чφ) x ч(M Va φ)	Theorem 2.8.1
▶LDiiP ((M Va φ) → M Va φj) x ((M Va чφ) V M Va φj)	a, b, PL
▶LDiiP (M Va (чφ V φj)) x ((M Va чφ) V M Va φj)	Theorem 2.8.3
▶LDiiP ((M Va φ) → M Va φj) x M Va (чφ V φj)	c, d, PL
▶LDiiP ((M Va φ) → M Va φj) x M Va (φ → φj)	e, definition.
by Theorem 2.8.2 and 2.8.4.
(a) ▶LDiiP (M Va (M Va φ)) → M Va φ	Lemma 2.7.2
▶LDiiP (M Va (M Va чφ)) → M Va чφ	Lemma 2.7.2
▶LDiiP ч(M Va чφ) → ч(M Va (M Va чφ))	b, PL
▶LDiiP (M Va чφ) x ч(M Va φ)	Theorem 2.8.1
▶LDiiP ч(M Va чφ) x (M Va φ)	d, PL
▶LDiiP (M Va φ) → ч(M Va (M Va чφ))	c, e, PL
▶LDiiP (M Va (M Va чφ)) x M Va ч(M Va φ)	d, regularity
▶LDiiP ч(M Va (M Va чφ)) x ч(M Va ч(M Va φ))	g, PL
▶LDiiP (M Va φ) → ч(M Va ч(M Va φ))	f, h, PL
▶LDiiP (M Va ч(M Va φ)) x ч(M Va (M Va φ))	Theorem 2.8.1
▶LDiiP ч(M Va ч(M Va φ)) x M Va (M Va φ)	j, PL
▶LDiiP (M Va φ) → M Va (M Va φ)	i, k, PL; (proof transitivity)
▶LDiiP (M Va (M Va φ)) x M Va φ	a, l, PL.
(a) ▶LDiiP b k M → ((M Vb (M Va φ)) → M Va φ)	epistemic truthfulness, PL
▶LDiiP b k M → ((M Vb (M Va чφ)) → M Va чφ)	dito a
▶LDiiP b k M → (ч(M Va чφ) → ч(M Vb (M Va чφ)))	b, PL
▶LDiiP (M Va чφ) x ч(M Va φ)	Theorem 2.8.1
▶LDiiP ч(M Va чφ) x (M Va φ)	d, PL
▶LDiiP b k M → ((M Va φ) → ч(M Vb (M Va чφ)))	c, e, PL
▶LDiiP (M Vb (M Va чφ)) x M Vb ч(M Va φ)	d, regularity
▶LDiiP ч(M Vb (M Va чφ)) x ч(M Vb ч(M Va φ))	g, PL
▶LDiiP b k M → ((M Va φ) → ч(M Vb ч(M Va φ)))	f, h, PL
▶LDiiP (M Vb ч(M Va φ)) x ч(M Vb (M Va φ))	Theorem 2.8.1
▶LDiiP ч(M Vb ч(M Va φ)) x M Vb (M Va φ)	j, PL
▶LDiiP b k M → ((M Va φ) → M Vb (M Va φ))	i, k, PL
▶LDiiP b k M → ((M Vb (M Va φ)) x M Va φ)	a, l, PL.

Proof of Theorem 2.17
Axiomatic soundness
Definition A.1 [Truth & Validity [1]]
The formula φ ∈ L is true (or satisﬁed ) in the model (S, V) at the state s ∈ £ 
:iff (S, V),s |= φ.
The formula φ is satisﬁable in the model (S, V) :iff there is s ∈ £ such that (S, V),s |= φ.
The formula φ is globally true (or globally satisﬁed ) in the model (S, V), written (S, V) |= φ, :iff for all s ∈ £, (S, V),s |= φ.
The formula φ is satisﬁable :iff there is a model (S, V) and a state s ∈ £ such that (S, V),s |= φ.
The formula φ is valid, written |= φ, :iff for all models (S, V), (S, V) |= φ.
Proposition A.2 (Admissibility of LDiiP-specific axioms and rules)
|= M Va a k M
|= (M Va (φ → φj)) → ((M Va φ) → M Va φj)
|= (M Va φ) → (a k M → φ)
|= ч(M Va ⊥)
|= (M Va φ) V M Va чφ
If |= φ then |= M Va φ
Proof. 1 follows directly from the epistemic-image property of MRa; 2 and 6 hold by the fact that LiiP has a standard Kripke-semantics; 3 follows directly from the conditional reflexivity of MRa, and 4 and 5 from the seriality/totality and the determinism/functionality of MRa, respectively.	2

Semantic completeness
For all φ ∈ L, if |= φ then ▶LDiiP φ.
Proof. Let
W designate the set of all maximally LDiiP-consistent sets 7
for all w, wj ∈ W, w MCa wj :iff { φ ∈L | M Va φ ∈ w }⊆ wj
for all w ∈ W, w ∈ VC(P ) :iff P ∈ w.

7 * A set W of LDiiP-formulas is maximally LDiiP-consistent :iff W is LDiiP-consistent and W has no proper superset that is LDiiP-consistent. A set W of LDiiP-formulas is LDiiP-consistent :iff W is not LD iiP-inconsistent. A set W of LDiiP-formulas is LDiiP-inconsistent :iff there is a finite W ′ ⊆ W such that

means of the Lindenbaum Construction [9, Page 90]. A set is maximally LDiiP-consistent if and only if the set of logical-equivalence classes of the set is an ultrafilter of the Lindenbaum-Tarski algebra of LDiiP [31, Page 351]. The canonical frame is isomorphic to the ultrafilter frame of that Lindenbaum-Tarski algebra [31, Page 352].

Then MC := (W, {MCa}M∈n,a∈A, VC) designates the canonical model for LDiiP. Following Fitting [9, Section 2.2], the following useful property of MC,

the so-called Truth Lemma, can be proved by induction on the structure of φ:
Base case (φ := P for P ∈ P). For all w ∈ W, P ∈ w if and only if MC,w |= P , by definition of VC.
Inductive step (φ := чφj for φj ∈ L). Suppose that for all w ∈ W, φj ∈ w if and
only if MC,w |= φj. Further let w ∈ W. Then, чφj ∈ w if and only if φj /∈ w
w is consistent — if and only if MC,w |= φj — by the induction hypothesis
if and only if MC,w |= чφj.
Inductive step (φ := φj Λ φjj for φj, φjj ∈ L). Suppose that for all w ∈ W,
φj ∈ w if and only if MC,w |= φj, and that for all w ∈ W, φjj ∈ w if and only if MC,w |= φjj. Further let w ∈ W. Then, φj Λ φjj ∈ w if and only if (φj ∈ w and φjj ∈ w), because w is maximal. Now suppose that φj ∈ w and
φjj ∈ w. Hence, MC,w |= φj and MC,w |= φjj, by the induction hypotheses, and thus MC,w |= φj Λ φjj. Conversely, suppose that MC,w |= φj Λ φjj. Then, MC,w |= φj and MC,w |= φjj. Hence, φj ∈ w and φjj ∈ w, by the induction hypotheses. Thus, (φj ∈ w and φjj ∈ w) if and only if (MC,w |= φj and MC,w |= φjj). Whence φjΛφjj ∈ w if and only if (MC,w |= φj and MC,w |= φjj), by transitivity.
Inductive step (φ := M Va φj for M ∈ M, a ∈ A, and φj ∈ L).
for all w ∈ W, φj ∈ w if and only if MC,w |= φj	ind. hyp.
w ∈W	hyp.
M Va φj ∈ w	hyp.
wj ∈W	hyp.
w MCa wj	hyp.
{ φjj ∈L | M Va φjj ∈ w }⊆ wj	4.5
φj ∈{ φjj ∈L | M Va φjj ∈ w }	4.3, 4.6
φj ∈ wj	4.6, 4.7
MC, wj |= φj	4.1, 4.4, 4.8
if w MCa wj then MC, wj |= φj	4.5–4.9
for all wj ∈ W, if w MCa wj then MC, wj |= φj	4.4–4.10
MC,w |= M Va φj	4.11
M Va φj /∈ w	hyp.
F = { φjj ∈L | M Va φjj ∈ w }∪ {чφj}	hyp.
F is LDiiP-inconsistent	hyp.
there is {M Va φ1,.	,M Va φn}⊆ w such that
▶LDiiP (φ1 Λ ... Λ φn Λ чφj) →⊥	4.14, 4.15

{M Va φ1,...,M Va φn}⊆ w and
▶LDiiP (φ1 Λ ... Λ φn Λ чφj) →⊥	hyp.
▶LDiiP (φ1 Λ ... Λ φn) → φj	4.17
▶LDiiP (M Va (φ1 Λ ... Λ φn)) → M Va φj	4.18, regularity
▶LDiiP ((M Va φ1) Λ ... Λ (M Va φn)) → M Va φj	4.19
M Va φj ∈ w	4.17, 4.20, w is maximal
false	4.13, 4.21
false	4.16, 4.17–4.22
7 is LDiiP-consistent	4.15–4.23
there is wj ≥7 s.t. wj is maximally LDiiP-consistent	4.24
7 ⊆ wj and wj is maximally LDiiP-consistent	hyp.
{ φjj ∈L | M Va φjj ∈ w }⊆7	4.14
{ φjj ∈L | M Va φjj ∈ w }⊆ wj	4.26, 4.27
w MCa wj	4.28
wj ∈W	4.26
чφj ∈7	4.14
чφj ∈ wj	4.26, 4.31
φj /∈ wj	4.26 (wj is LDiiP-consistent), 4.32
MC, wj /|= φj	4.1, 4.33
there is wj ∈W s.t. w MCa wj and MC, wj /|= φj	4.29, 4.34
MC,w |= M Va φj	4.35
MC,w |= M Va φj	4.25, 4.26–4.36
MC,w |= M Va φj	4.14–4.37
M Va φj ∈ w if and only if MC,w |= M Va φj	4.3–4.12, 4.13–4.38
for all w ∈ W, M Va φj ∈ w if and only if MC,w |= M Va φj	4.2–4.39
With the Truth Lemma we can now prove that for all φ ∈ L, if /▶LDiiP φ then
|= φ. Let φ ∈ L, and suppose that /▶LDiiP φ. Thus, {чφ} is LDiiP-consistent, and can be extended to a maximally LDiiP-consistent set w, i.e., чφ ∈ w ∈ W. Hence MC,w |= чφ, by the Truth Lemma. Thus: MC,w |= φ, MC /|= φ, and |= φ. That
is, MC is a universal (for all φ ∈ L) counter-model (if φ is a non-theorem then MC
falsifies φ).
We are left to prove that MC is also an LDiiP-model. So let us instantiate our data mining operator cla (cf. Page 13) on W by letting for all w ∈W 

msgsa(w) := { M | a k M ∈ w },
and let us prove that:
there is wj ∈W such that w MCa wj
if w MCa wj and w MCa wjj then wj = wjj
if M ∈ clw(∅) then w MCa w

if w
MCa
wj then M ∈
′
cla (
∅).

For (1), let w ∈ W and φ ∈ L, and suppose that M Va φ ∈ w. For the sake of deriving the contrary, further suppose that φ /∈ w. Hence чφ ∈ w because w is max- imal, and thus φ → ⊥ ∈ w. Hence (M Va φ) → M Va ⊥ ∈ w by regularity. Hence M Va ⊥∈ w by the first supposition and modus ponens. Hence ч(M Va ⊥) /∈ w be- cause w is consistent. Yet since w is maximal, ч(M Va ⊥) ∈ w (proof consistency). Contradiction. Hence w is actually a wj such that φ ∈ wj.
For (2), let us first prove the following, so-called Reflection Lemma:
M Va φ /∈ w if and only if M Va чφ ∈ w.
So suppose that
M Va φ /∈ w. Hence ч(M Va φ) ∈ w because w is maximal. Since w is maximal, ч(M Va φ) → M Va чφ ∈ w (negation completeness). Hence M Va чφ ∈ w by modus ponens.
M Va чφ ∈ w. Since w is maximal, (M Va чφ) → ч(M Va ччφ) ∈ w (proof consistency). Hence ч(M Va ччφ) ∈ w by modus ponens. Since w is maxi- mal, φ → ччφ ∈ w. Hence (M Va φ) → M Va ччφ ∈ w by regularity. Hence ч(M Va ччφ) → ч(M Va φ) ∈ w by contraposition. Hence ч(M Va φ) ∈ w by modus ponens. Hence M Va φ /∈ w because w is consistent.
Now for (2), let w, wj, wjj ∈ W and suppose that w MCa wj and w MCa wjj. That is, (for all φ ∈ L, if M Va φ ∈ w then φ ∈ wj) and (for all φ ∈ L, if M Va φ ∈ w then φ ∈ wjj). Now let φ ∈L and suppose that
φ ∈ wj. Hence чφ /∈ wj because w is consistent. Hence M Va чφ /∈ w by particu- larisation of the first supposition with чφ and modus tollens. Hence M Va φ ∈ w by the Reflection Lemma. Hence φ ∈ wjj by the second supposition and modus ponens.
φ ∈ wjj. Hence φ ∈ wj—symmetrically.
For (3), let w ∈W and suppose that M ∈ clw(∅). Hence a k M ∈ w due to the maximality of w. Further suppose that M Va φ ∈ w. Since w is maximal,
(M Va φ) → (a k M → φ) ∈ w	(epistemic truthfulness).
Hence, a k M → φ ∈ w, and φ ∈ w, by consecutive modus ponens.
For (4), let w, wj ∈ W and suppose that w MCa wj. That is, for all φ ∈ L, if
M Va φ ∈ w then φ ∈ wj. Since w is maximal,
M Va a k M ∈ w	(self-knowledge).

Hence a k M ∈ wj by particularisation of the supposition, and thus M ∈
′
the definition of cla .

′
cla (
∅) by
2
