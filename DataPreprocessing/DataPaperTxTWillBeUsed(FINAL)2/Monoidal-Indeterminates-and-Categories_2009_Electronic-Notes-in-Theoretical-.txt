

Electronic Notes in Theoretical Computer Science 249 (2009) 39–60
www.elsevier.com/locate/entcs

Monoidal Indeterminates and Categories of Possible Worlds
C. Hermidaa,1 and R. D. Tennenta,2
a School of Computing Queen’s University
Kingston, Canada K7L 3N6

Abstract
Given any symmetric monoidal category C, a small symmetric monoidal category Σ and a strong monoidal functor j: Σ → C, it is shown how to construct C[x: jΣ], a polynomial such category, the result of freely adjoining to C a system x of monoidal indeterminates for every object j(w) with w ∈ Σ satisfying a naturality constraint with the arrows of Σ. As a special case, we show how to construct the free co-affine category (symmetric monoidal category with initial unit) on a given small symmetric monoidal category. It is then shown that all the known categories of “possible worlds” used to treat languages that allow for dynamic creation of “new” variables, locations, or names are in fact instances of this construction and hence have appropriate universality properties.
Keywords: indeterminates, symmetric monoidal categories, possible-world semantics, universality

Introduction
The concept of a polynomial algebra R[x], constructed from an algebra R by freely adjoining an indeterminate element x, is familiar from algebra. Similarly, Lambek and Scott [12, Part I, Section 5] show how to construct a cartesian (or cartesian closed) polynomial category C[x: c] from a base cartesian (closed) category C by freely adjoining an indeterminate arrow x:1 → c.
The polynomial algebra R[x] is the “most general” such extension of R. Simi- larly, the polynomial category C[x: c] is the most general cartesian (closed) exten- sion of C containing indeterminate x. Such properties are proved as universality results. For example, consider the embedding Rx: C → C[x] of C into C[x: c], any

1 chermida@cs.queensu.ca
2 rdt@cs.queensu.ca
3 This research was supported by a Discovery grant from the Natural Sciences and Engineering Research Council of Canada.


1571-0661 © 2009 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2009.07.083

cartesian (closed) functor F : C → D, and any d:1 → F (c) in D; then there exists a unique cartesian (closed) functor F|d from C[x: c] to D such that (F|d)(x) = d

and F|d · Rx = F :
x	x

C[x: c]




In this work, we develop comparable technology for symmetric monoidal cate- gories [14]. Given a symmetric monoidal category C, a small symmetric monoidal category Σ, and a strong monoidal functor j: Σ → C, we show how to construct C[x: jΣ], the symmetric monoidal polynomial category that results from freely ad- joining, for every object j(w) for w ∈ Σ, indeterminates xj(w): I → w satisfying a naturality constraint with respect to the arrows of Σ. When Σ is the sub-symmetric monoidal category freely generated by some set of C objects 4 the indeterminates are completely “free,” as in the examples described above.
We believe this construction has many applications. As our leading exam- ples, we consider the categories of “possible worlds” that have been used in the semantics of imperative programming languages. John Reynolds and Frank Oles [31,23,24,25,19] show how block-structured storage management in Algol-like lan- guages [22] may be explicated using a semantics based on functor categories W ⇒ S, where W is a suitable category of “worlds” characterizing local aspects of storage structure, and S is a conventional semantic category of sets or domains. Every programming-language type θ is interpreted as a functor [θ]]: W → S and every programming-language term-in-context π ▶ X: θ is interpreted as a natural trans-
formation [π ▶ X: θ]]: [[π]] . [[θ]].
Oles gives two presentations of his category of worlds and shows that they are equivalent. Reynolds presents what seems to be a different category of worlds; how- ever, it has recently been shown [7] that, under reasonable closedness assumptions, it is in fact equivalent to Oles’s category.
The functor-category framework has also been exploited to analyze noninterfer- ence in Reynolds’s specification logic [30,32,36,16,20], block expressions in Algol- like languages [35], and passivity in a variant of Reynolds’s Syntactic Control of Interference [29,17]. These applications used a related but significantly different category of worlds, due to Tennent.
Several authors [15,28,33,34,3] have used ﬁnite sets (of locally available “loca- tions” or “names”) as worlds, with injections as the morphisms.
What is noteworthy about all of this work is that the categories of worlds in- volved have been developed in ad hoc fashion and their properties have not been well understood. We show here that all of these categories of worlds are instances
of our monoidal polynomial construction and have universality properties.
The construction of C[x: jΣ] and its key properties, such as universality, and

4 i.e., the sub-symmetric monoidal category consisting of all tensorings of the objects, with arrows being the relevant structural isomorphisms of C.

an important special case (Σ generated by a single object) are presented in §2. Our applications are discussed in §4. Some additional properties of C[x: jΣ] not directly relevant to our applications are treated in §3; this may be skipped by readers more interested in the applications.


Monoidal Polynomial Categories
The Categories C and Σ
Consider a symmetric monoidal category C with unit I and structural isomorphisms
λx: I ⊗ x ∼= x ρx: x ⊗ I ∼= x
αx,y,z: (x ⊗ y) ⊗ z ∼= x ⊗ (y ⊗ z) σx,y: x ⊗ y ∼= y ⊗ x
subject to the usual coherence axioms [14]. See [10] for explanations of addi- tional monoidal-categorical concepts, such as monoidal transformation and strong monoidal functor, and [8] for detailed considerations of coherence issues.
We want to add indeterminates (generic global elements) to some objects of C subject to a naturality constraint. We therefore parameterize our construction with an auxiliary small symmetric monoidal category Σ and a strong monoidal functor j: Σ → C, with structural isomorphisms δv,w: j(v) ⊗ j(w) → j(v ⊗ w) and γ: I → j(I).
Two boundary cases will be of particular interest:
Σ = F ( ) the free symmetric monoidal category generated by one object and j the canonical mapping picking one object in C; the only commutativity constraints are those imposed by structural isos.
Σ = C, j = id, when C is itself small; commutativity with all C morphisms will be required.
In the following, we describe the construction of a category with the same objects as C and morphisms (f, w): x → y for every w ∈ |Σ| and f : x ⊗ j(w) → y in C. We do this in two steps: firstly, we set up a bicategory [1] C(x: jΣ), and, secondly, we obtain our desired category C[x: jΣ] by taking connected components of the hom-categories of this bicategory.


The Bicategory C(x: jΣ)
the objects are those of C;
for any w an object in Σ and f : x ⊗ j(w) → y a morphism in C, (f, w): x → y
is a morphism in C(x: jΣ);
a 2-cell h:(f, w) ⇒ (f', w') is a morphism h: w → w' in Σ such that

y
 
x ⊗ j(w)	x ⊗ j(w')
x ⊗ j(h)
the identity for x is  ρx · (x ⊗ γ−1),I : x → x.
given morphisms (f, w): x → y and (g, w'): y → z their composite is the mor- phism (h, w ⊗ w'): x ⊗ j(w ⊗ w') −→ z defined as follows:
x ⊗ j(w ⊗ w')
x ⊗ δ−1
x ⊗ j(w) ⊗ j(w')
α−1
`x ⊗ j(w)´ ⊗ j(w')
f ⊗ j(w')
y ⊗ j(w')
g
z
the structural isomorphisms are inherited from the monoidal structure of C:
given (f, w): x → y, (g, v): y → z and (h, u): y → z, define αf,g,h to be
αw,v,u: h(gf ) −→ (hg)f , and similarly for λ and ρ.

The Category C[x: jΣ]
Recall that the connected components functor π0: Cat → Set, left adjoint to the discrete category functor from Set to Cat, preserves products. Therefore, by ap- plying it to the hom-categories of C(x: jΣ) we obtain a category, 5 our intended C[x: jΣ]:
(1)	C[x: jΣ](x, y) = π0 C(x: jΣ)(x, y) ∼=    C x ⊗ j(w), y 

so that (f : x ⊗ j(w) → y, w)  (g: x ⊗ j(v) → y, v) iff there is a zig-zag path of 2-cells between them in C(x: jΣ)(x, y):
y



x ⊗ j(w)
x ⊗ j(h1)
x ⊗ j(w1)
··· 
x ⊗ j(wn)
x ⊗ j(hn)
x ⊗ j(v)

Proposition 2.1 C[x: jΣ] has a symmetric monoidal structure.

5 Because we collapse the structural-isomorphism 2-cells, composition becomes strictly associative and unitary.

Proof. The tensor product of objects x and y is x⊗y, as in C, and the same is true for the unit I. The tensor product of morphisms [f, w]: x → y and [f', w']: x' → y' is the morphism [g, w ⊗ w']: x ⊗ x' → y ⊗ y' where g is defined as follows:
x ⊗ x' ⊗ j(w ⊗ w')

x ⊗ x' ⊗ δ

x ⊗ x' ⊗ j(w) ⊗ j(w')
x ⊗ σx',j(w) ⊗ j(w )
x ⊗ j(w) ⊗ x' ⊗ j(w')

f ⊗ f'

y ⊗ y'
(omitting associativity isos). Verification that this action is functorial involves only functoriality of ⊗, naturality of σ, and the coherence conditions on σ. The structural isomorphisms are given by those in C suitably composed with λs to discard the unit parameter, e.g., associativity isomorphisms are of the form
 αx,y,z · λ(x⊗y)⊗z·γ−1 : (x ⊗ y) ⊗ z −→ x ⊗ (y ⊗ z),I	 
Note that a symmetry (or, more generally, a braiding) is needed to tensor morphisms as above.

Raw morphisms
There is a natural mapping of C into C[x: jΣ] that takes f : x → y into
[f · ρx · (x ⊗ γ−1),I]: x → y
As a consequence of the coherence axioms, ρI = λI: I × I ∼= I [8, Prop. 1.1], and this mapping yields a functor RΣ: C → C[x: jΣ].
A morphism [f, w]: x → y with w ∼= I is termed raw. Raw morphisms yield a
broad sub-category (i.e., with the same objects as the ambient category) of C[x: jΣ], the essential image of RΣ.
Proposition 2.2 RΣ: C → C[x: jΣ] is (strongly) symmetric monoidal; i.e., it preserves the structure up to coherent isomorphism.
Proof. The coherent structural isomorphisms are the “raw” images of those in C under RΣ and functoriality ensures that the coherence axioms hold as well; this makes RΣ strongly symmetric monoidal.	 
To clarify the presentation, we will write the raw images of α, ρ, λ and σ underlined, so that, for example, α will denote an associativity isomorphism in C[x: jΣ].

Monoidal Indeterminates
The most significant feature of C[x: jΣ] is that it has, for every w ∈ |Σ|, a “global element” xw = [λj(w), w]: I → j(w). These morphisms will be termed (constrained) monoidal elements.
Definition 2.3 Given a strong monoidal functor F : C → D and a small symmet- ric monoidal category Σ with a strong monoidal functor j: Σ → C, a system of constrained monoidal elements for F (with respect to Σ) is a monoidal transforma- tion d: I D =⇒ F · j, where I D: Σ → D is the strong monoidal functor constantly
Σ	Σ
I. When Σ is free on a set of objects, we talk simply of monoidal elements; these are free or unconstrained, as in our original scenario of polynomial algebras and categories in §1.
The xw defined above form a system of constrained monoidal elements for RΣ with respect to Σ, x: I C[x:jΣ] =⇒ RΣ · j. Because Σ includes the relevant structural isomorphisms, naturality of x entails the following three commutativities:
I
x(u⊗v)⊗w	xu⊗(v⊗w)


j`(u ⊗ v) ⊗ w´ I


RΣjαu,v,w
j`u ⊗ (v ⊗ w)´
I




j(I ⊗ w)
RΣjλw
j(w)
RΣjρw
j(w ⊗ I)
j(u ⊗ v)

RΣjσu,v
j(v ⊗ u)

while the monoidal condition entails xI = RΣγ: I → j(I) and
I ⊗ I


xu ⊗ xv	xu⊗v


j(u) ⊗ j(v)

δu,v
j(u ⊗ v)

Proposition 2.4 x = [λj , ( )]: I C[x:jΣ] =⇒ RΣ · j is natural in Σ and monoidal.
Proof. For naturality, consider h: w → w' in Σ and the following diagram:


I ⊗ j(w ⊗ I)
str
I ⊗ `j(w) ⊗ I´
α−1
`I ⊗ j(w)´ ⊗ I
λj(w)⊗I

j(w) ⊗ I
ρj(w)
j(w)


I ⊗ j(h ⊗ I)
I ⊗ `j(h) ⊗ I´

j(h)

I ⊗ j(w' ⊗ I)
str
I ⊗ `j(w') ⊗ I´
α−1
`I ⊗ j(w')´ ⊗ I
λj(w' )⊗I

j(w') ⊗ I
ρj(w' )
j(w')


I ⊗ ρj(w' )  ρI⊗j(w' )
I ⊗ j(ρw' )		λj(w' )
I ⊗ j(w')

I ⊗ `(j(v) ⊗ I) ⊗ j(w)´
I ⊗ α−1
I ⊗ `j(v) ⊗ (I ⊗ j(w))´


I ⊗ σI,j(v) ⊗ j(w)


I ⊗ `(I ⊗ j(v)) ⊗ j(w)´
I ⊗ `ρj(v) ⊗ j(w)´
⊗ `I ⊗ j(w)´




I ⊗ α−1
I ⊗ `j(v) ⊗ λj(w)´
`I ⊗ j(v)´ ⊗ λj(w)



I ⊗ `I ⊗ `j(v) ⊗ j(w)´´
I ⊗ `λj(v) ⊗ j(w)´
`I ⊗ j(v)´ ⊗ j(w)

 

α−1
I ⊗ λj(v)⊗j(w)
α−1
λj(v) ⊗ j(w)



(I ⊗ I) ⊗ `j(v) ⊗ j(w)´

ρI ⊗ `j(v) ⊗ j(w)´
I ⊗ `j(v) ⊗ j(w)´  j(v) ⊗ j(w) λj(v)⊗j(w)


Fig. 1. Monoidality Diagram

where str denotes the coherent structural isomorphism I ⊗ j( ) ⊗ γ−1 · I ⊗ δ−1 associated to j. The leftmost bottom triangle commutes by [8, Prop. 1.1] and the rest by naturality of the λ, ρ and α. We conclude that ρw' · (h ⊗ I): w ⊗ I → w' is a 2-cell in C(x: jΣ) from RΣ(h) · λw to λw' , and therefore RΣ(h) · xw = xw' in C[x: jΣ].
For monoidality, xI = [λjI ,I] = γ = γ · ρI · I ⊗ γ−1, because λI = ρI by [8, Prop. 1.1], and in the diagram in Figure 1, the leftmost-top triangle and the rightmost-bottom one commute by [8, Prop. 1.1]; the top triangle involving σ com- mutes by [8, Prop. 2.1]; and the remaining ones commute by the coherence axiom re- lating α, λ and ρ, and naturality of α. Using once again the coherence axiom relating α, λ and ρ and naturality of λ it may be concluded that λv,w: I ⊗ (v ⊗ w) → v ⊗ w realizes a 2-cell in C(x: jΣ), which identifies δv,w · (xv ⊗ xw) · RΣ(λ−1) and xv⊗w in C[x: jΣ].	 
We will show below (Theorem 2.7) that C[x: jΣ] is freely generated by this system of constrained monoidal elements. In other words, the x( ) form a generic such system; we call them monoidal indeterminates.
Definition 2.5 For any object y ∈ C, ew: [idy⊗j(w), w]: y → y ⊗ j(w) is termed the
expansion morphism at y (with respect to w).
The terminology will be justified in §4.1.
Lemma 2.6 (Expansion–Raw Morphism Factorization)
Interdefinability of expansions and indeterminates:
ew = (y ⊗ xw) · ρ−1: y → y ⊗ j(w) and xw = λj(w) · ew.
y	y	I

The expansion morphisms ew are natural in y, and natural in w with respect

to Σ-morphisms.
Expansions compose: ey

= α−1

· ey⊗j(v) · ey .

v⊗w
y,j(v),j(w)	w	v

Every C[x: jΣ] morphism [f, w]: y → z factors uniquely (up to isomorphism) as an expansion ew: y → y ⊗ j(w) followed by a raw morphism
[f · ρy⊗j(w) · (y ⊗ j(w) ⊗ γ−1),I]: y ⊗ j(w) → z
This factorization is unique in the following sense: if [f, w] = RΣ(g) · ey ' for
some g: y ⊗ w' → z, then [f, w] = [g, w'].
Proof.
By [8, Prop.2.1], ρI · σI,I = λI; hence, because λI = ρI, we have that σI,I = idI⊗I. Since j is strongly symmetric monoidal, σjI, jI = idjI⊗jI. Therefore, the composite (y ⊗ x ) · ρ−1 reduces to the morphism
y


−1
y,I,I⊗j(w)
· „y ⊗ “γ−1 ⊗ `γ−1 ⊗ j(w)´”« · `y ⊗ j(I) ⊗ δ−1´ · `y ⊗ δ−1,I ⊗ (I ⊗ w)´

in C(x: jΣ). Consider the following diagram:
y ⊗ λ


y ⊗ λ

y ⊗ `I ⊗ `I ⊗ j(w)´´	I⊗j(w) y ⊗ `I ⊗ j(w)´
j(w)
y ⊗ j(w)


−1
y,I,(I⊗j(w))
ρy ⊗ `I ⊗ j(w)´
(y ⊗ I) ⊗ `I ⊗ j(w)´


ρy ⊗ λj(w)

The left triangle commutes by the coherence axioms for α, λ and ρ, and the right triangle by functoriality of ⊗. We conclude that λw ·λI⊗w: I⊗(I⊗w) → w is a 2-cell in C(x: jΣ), which yields the identity ew = (y⊗ xw) · ρ−1: y → y⊗w.

The diagram

I ⊗ str
y	y

I ⊗ ρj(w)

I ⊗ `j(w) ⊗ I´  I ⊗ j(w ⊗ I)	I ⊗ j(w)


αI,j(w),I


I ⊗ ρj(w)
I ⊗ j(ρw )

λj(w)

`I ⊗ j(w)´ ⊗ I


ρI⊗j(w)
I ⊗ j(w)


λj(w)
j(w)

in which the bottom left triangle commutes by [8, Prop.1.1], and the top left one for coherence for j, shows that ρw: w ⊗ I → w realizes a 2-cell in C(x: jΣ), which identifies λwew with xw in C[x: jΣ].
Follows from (1), because xw is natural with respect to morphisms in Σ.
The morphism v ⊗ ρw: v ⊗ (w ⊗ I) → v ⊗ w realizes a 2-cell in C(x: jΣ) which
identifies (α−1	· ey⊗v) · ey with ey	in C[x: jΣ].

y,v,w	w	v
v⊗w

The morphism ρw: w ⊗ I → w realizes a 2-cell in C(x: jΣ) from
„f · ρy⊗j(w) · “`y ⊗ j(w)´ ⊗ γ−1” · α−1	· (y ⊗ δ−1), w ⊗ I«
to (f, w) which yields the required identification. Given another expansion-

raw factorization, e.g., [f, w] = RΣ(g) · ey ' , we have to argue by induction by the length of the zig-zag path of 2-cells in C(x: jΣ)(y, z) realizing the identification. Clearly, it suffices to consider the case of a basic path of length one (the inductive step): assume a morphism h: w' ⊗ I → w such that f (y ⊗
jh) = g · ρ	' · str . Then, setting h¯ = h · ρ−1, we have f · (y ⊗ jh¯) = g, hence
y⊗jw	w'
[f, w] = [g, w'].	 



Universality of C[x: jΣ]

Theorem 2.7 (Universality) Given a symmetric monoidal category D, a strong symmetric monoidal functor F : C → D, and a system d: I D =⇒ F · j of monoidal elements for F with respect to Σ, there exists an essentially unique strong symmetric monoidal functor F|d: C[x: jΣ] → D and a monoidal iso 2-cell θ: (F|d · RΣ) =⇒ F

x
such that F|d · x ∼= d:




Σ	j
x

C[x: jΣ]


The isomorphism F|d · x ∼= d here is a convenient abbreviation for the following commutativity of monoidal transformations on functors from Σ to D:
F|d · I C[x:jΣ]	γ	I D
x	Σ	Σ

F|d · x	d


F|d · RΣ · J C	F · J C
x	Σ	θj	Σ
where γ is the structural isomorphism associated with F|d.


Proof. It is clear that the action of F|d on objects should be (F|d)(y) = F (y).
For a morphism [f, w]: y → z factored as [f · ρy⊗jw · ((y ⊗ jw) ⊗ γ−1),I] · ew, with
ew = (y ⊗ xw)ρ−1 by Lemma 2.6.(1), we get (F|d)[f, w] = 

y	y


−1
Fy 
Fy	Fy ⊗ I

Fy ⊗ dw
x

Fy ⊗ F `j(w)´ ∼= F `y ⊗ j(w)´	Ff	Fz 

In order to show the value of (F|d)[f, w] is independent of the choice of repre- sentative, consider (f, w)  (g, v) with g: y ⊗ v → z via h: w → v in Σ and the diagram







ρ−1


Fy ⊗ dw
Fy ⊗ F `j(w)´ δy,w

F y ⊗ j(w)
Ff 

Fy 
Fy	Fy ⊗ I
Fy ⊗ F `j(h)´	F `y ⊗ j(h)´	Fz 

Fg 

Fy ⊗ F `j(v)´

δy,v
F (y ⊗ j(v))

where the leftmost triangle commutes by naturality of d, while the rightmost one commutes because F is a functor.
Functoriality of (F|d) follows from the coherence axioms for the structural iso- morphisms associated with F and the monoidality of the transformation d. F|d is strong monoidal, with the same structural isomorphisms as F . We can take θ = id, but the general statement requires a general θ as we want F|d characterized only
up to strong monoidal isomorphism.
The coherence conditions on F imply that  F|d (xw) =  F|d [λj(w), w] = dw ·γw
(with θ = id), and F|d [f · ρy · (y ⊗ γ−1),I] = F (f ) for any morphism f : y → z in
C.	 
Remark 2.8 There is a 2-dimensional aspect to the universality of C[x: jΣ]. Given strong symmetric monoidal functors F, G: C → D with systems of monoidal ele- ments d: I D =⇒ F · j and e: I D =⇒ G · j, there is one-to-one correspondence be-
Σ	Σ
tween monoidal transformations β: (F|d) =⇒ (G|e ) and monoidal transformations
x	x
β: F =⇒ G such that βj · d = e. This aspect is illustrated in Example 4.7.
The following special case will prove useful in §4.6 in characterizing the “states” functor in the semantics of imperative languages:
Corollary 2.9 If the unit 0 of the symmetric monoidal category D is an initial object, there is an essentially unique strong monoidal functor F : C[x: jΣ] → D extending a strong monoidal functor F : C → D:
C[x: jΣ]
...
...

RΣ


Σ	C	C
Σ
... F
⇓	...
..
.
F	D

Proof. The unit 0 is initial, so there is a unique way to choose a global element
!w:0 → F (w) for any w ∈ Σ, and F = F|!w , natural in w with respect to C. 

The Co-Affine Envelope of C
When C is small, we can consider the important special case that Σ = C and j = id. The examples in §4 will be instances of C[x: C] for suitable small categories C; to simplify the notation, we will use [C| as an abbreviation for C[x: C].

Proposition 2.10 For any small symmetric monoidal C, the unit is initial in
[C|.
Proof. For any object w of [C|, we have a morphism xw = [λw, w]: I → w. Given another morphism [f : I ⊗ v → w, v] in [C|, consider the following diagram:
I ⊗ v

I ⊗ λ−1
I ⊗ (I ⊗ v)
id
λI⊗v


I ⊗ v

I ⊗ f	f
I ⊗ w	λw	w
The bottom part of the diagram commutes by naturality and the triangle commutes by the following:



I ⊗ (I ⊗ v)



α−1
id
(I ⊗ I) ⊗ v

ρI ⊗ v = λI ⊗ v




α−1

I ⊗ (I ⊗ v)

I ⊗ λv	λI ⊗ v

I ⊗ v
where the left triangle commutes by the coherence axiom for α, ρ and λ, and the remaining two equalities are given in [8, Prop. 2.1]. We conclude that f · λ−1: v → w is a 2-cell in C(x: C), which identifies xw and [f, v] in [C|.	 

Alternatively, we can prove it as follows:
Proof. Recall that for a small category D, an initial object amounts to a limit of the identity functor id: D → D, that is: a cone {ιd : I → d}d∈D such that ιI = idI. Using Lemma 2.6.(1) and monoidality of x, we conclude that our system of indeterminates is natural with respect to expansions: ew · xv = xv⊗w: I → v ⊗w. Because they are natural with respect to all raw morphisms (by construction of [C|), the {xv: I → v}v∈|[C | form a cone, and by monoidality of x, xI = idI. 

Combining Corollary 2.9 and Proposition 2.10, we conclude that the construction
C '→ [C| provides the universal way of forcing the unit I to be initial:
Corollary 2.11 For C a small symmetric monoidal category, functor R: C → [C| is universal among strong symmetric monoidal functors into symmetric monoidal categories whose unit is an initial object.
Symmetric monoidal categories with an initial unit are called co-affine in [27]. Therefore the above corollary provides an explicit construction of the free co-affine category on a symmetric monoidal category, which we call the co-affine envelope of C.

Indeterminate on a Single Object
A special case of interest is the construction of the symmetric monoidal category generated by a category C and an indeterminate xw: I → w for a single object w. By tensoring such an indeterminate with itself and using the isomorphism λI =
ρI: I ⊗ I ∼= I, one obtains indeterminates for all tensor powers wi of w, and more
generally, all i-ary bracketings of w. We are led to consider Σ٨, the free symmetric monoidal category on one generator, and the strong symmetric monoidal functor jw: Σ٨ → C, which takes  to w.
Remark 2.12 We recall that Σ٨ can be explicitly described as the category Fbij
of finite sets and bijections, see §4.7.

Given a symmetric monoidal category D and a strong symmetric monoidal func- tor F : C → D, a monoidal transformation d: I D =⇒ F · jw amounts precisely to an element d٨: I → Fw. Therefore, C[x: jwΣ٨] is the free symmetric monoidal category with an indeterminate x: I → w.

Monoidal Indeterminates in a Cartesian Setting
When the monoidal structure on C is given by finite products so that v ⊗w = v ×w and I = 1, each object w carries a comonoid structure given by !w: w → 1 and δw: w → w × w. Furthermore, each morphism in C is a comonoid morphism, by naturality of ! and δ. In particular, a global element x:1 → w satisfies

1	δ1
x

δw
1 × 1
x × x w × w

Therefore, if we want a monoidal indeterminate xw:1 → w to be a cartesian one, we must enforce naturality with respect to Σ×, the free symmetric monoidal category on one generator with a comonoid structure ( , δ٨, !٨). Equivalently, Σ× is the free cartesian category on one generator , since all tensor powers of come equipped with natural comonoid structures, using repeatedly δ٨ and !٨. Once again, we consider the strong symmetric monoidal functor jw: Σ× → C which takes ( , δ٨, !٨) to (w, δw, !w). It is easy to see that jw is actually cartesian.
Remark 2.13 We recall that Σ× can be explicitly described as Fop, the dual of
the category of finite sets.
As we mentioned in our introduction, Lambek and Scott [12, Part I, Section 5] show that C[x:1 → w], the free cartesian category obtained from C by adjoining an indeterminate x:1 → w, can be explicitly described by the Kleisli category of the comonad ( ) × w: C → C, which we write C×w, with associated functor Jw: C → C×w. Given a morphism f : y × w → z in C×w, we write J (f ) = [f, ] and interpret it as a morphism in C[x: jwΣ×].

Proposition 2.14 The assignment f '→ J (f ) is an identity-on-objects isomor- phism of categories J : C×w → C[x: jwΣ×] and the following diagram commutes:
C[x: jr Σ×]
Proof. The isomorphism

C(y × w, z) ∼=	C(y × wi, z) 
i≥0
induced by J on homs is verified by setting up morphisms φi :  → i which yield
a 2-cell inducing the required identification in C[x: jwΣ×]; the φi are defined by

induction on i:
٨	٨

φ0 =!٨	φi+1 = (δ٨ × i−1) · φi

٨	٨	٨
Functoriality of J requires preservation of identities and composition, which is also achieved via !٨ and δ٨ respectively. The identity J · jw = RΣ× requires identifying

'
y,w
: y × w → w with π'
: y × 1 → y, via !٨:  → 1 (the same way in which J

preserves identities).	 


Further Properties of C[x: jΣ]
In this section, we describe additional properties of C[x: jΣ], with a view to the role this structure plays in categorical logic and semantics. Some readers might prefer to skip ahead to the applications in §4.

Closed Structure and Duals
Proposition 3.1 If C is a closed symmetric monoidal category, so is C[x: jΣ]; furthermore, RΣ: C → C[x: jΣ] preserves the closed structure.
Proof. Given the formulation of the hom-sets of C[x: jΣ] in equation (1), C[x: jΣ]
inherits closed structure from C via the isomorphism
w∈Σ C (x ⊗ y) ⊗ jw, z ∼=	w∈Σ C(x ⊗ jw, y ⇒ z)
which is compatible with the equivalence relation  .  It is then clear that RΣ
preserves the closed structure.	 
Corollary 3.2 If C is compact closed (i.e., every object c admits a dual c∗ such that C(x ⊗ c, y) ∼= C(x, c∗ ⊗ y)), so is C[x: jΣ]; furthermore, RΣ preserves duals.

Traces
The notion of trace [9,5] in a monoidal category is also compatible with the addition of monoidal indeterminates.
Proposition 3.3 If C admits a trace, so does C[x: jΣ]; furthermore, RΣ preserves traces.
Proof. A trace function

u x,y
: C(x ⊗ u, y ⊗ u) → C(x, y)

for C is compatible with the equivalence  by dinaturality


w∈W
u
x⊗jw,y
: 

w∈W
C (x ⊗ jw) ⊗ u, y ⊗ u 
→ 

w∈W
C(x ⊗ jw, y) 

and therefore induces a trace function on C[x: jΣ], evidently preserved by RΣ. 

Applications
The Oles Category of Possible Worlds
The following category is described in [23,25]. Let set be a small sub-category of the usual category of all sets and functions, interpreted as (products 6 of) “data types.” The objects of Oles’s category are those of set, interpreted as the sets of states allowed in each possible world, and a morphism from X to Y is a pair f, Q such that
f is a function from Y to X;
Q is an equivalence relation on Y with Y/Q an object of set; and

X	f
y '→ [y]Q
Y
Y/Q is a product diagram in set.

Intuitively, f extracts the small state embedded in a larger one, and Q relates large states with identical “extensions.” Note that the restriction of f to any Q-equivalence class is bijective.
The identity morphism idX on an object X has as its two components: the identity function on X and TX, the universally-true binary relation on X. The composition of morphisms f, Q: X → Y and g, R: Y → Z has as its two components:
the functional composition of f and g, and the equivalence relation on Z that relates z0, z1 ∈ Z just if they are R-related and Q relates g(z0) and g(z1); in short, R ∩ g−1(Q).
We will refer to this category as O(set). Oles gives another description which may be interpreted in any category C with finite products; see [21, Section 10]. So we have a construction O(C) that agrees with Oles’s category when the ambient category C is set.

6 Note that procedure types are not “data” types in Algol-like languages.

The Tennent Category of Possible Worlds
To model noninterference in Reynolds’s specification logic [30,32,36,20], the product condition on the f component of morphisms f, Q in Oles’s category was weakened in [36] to the requirement that it be injective on Q-equivalence classes (with the same definitions of identities and composites); we will refer to the resulting category as T(set).

Universality of Tennent Categories
We now apply our theory of monoidal indeterminates; we begin by characterizing T(set) as a polynomial category. The description may be re-formulated as follows. Recall that, for any function f : X → Y , ker(f ), the kernel of f , is the binary relation {(x, x') ∈ X × X | fx = f x'}.
Proposition 4.1 Given sets X and Y , there is a one-to-one correspondence be- tween the following sets of data:
equivalence classes of pairs [m, W ]  where W  is an object of set, m: Y ‹→ X × W is a monomorphism and (m, W )  (n, V ) if π · m = π · n and ker(π' · m) = ker(π' · n), where π and π' denote the ﬁrst and second pro- jections of a product;
T(set)(X, Y ).

Proof. From (1) to (2): Let f : Y → X be the composite Y

m
‹→ X ×

π
W → X

and

Q be the kernel of Y
m
‹→ X × W
π  W ; i.e., yQy' iff π'(my) = π'(my'). To show

that f is injective on each equivalence class, assume yQy' and f (y) = f (y'); then π(my) = π(my') and π'(my) = π'(my') and so my = my'. But then y = y' because m is monic. Notice that, by construction, f and Q are independent of the choice of representative (m, W ).
From (2) to (1): Take [m, W ] , where W is Y/Q and m: Y → X × W maps y to the pair (fy, [y]Q). To show m is monic, assume my = my'; then fy = fy' and yQy', and so y = y'.	 
Corollary 4.2 The above correspondence restricts to one between O(set)(X, Y )and equivalence classes of pairs [i, W ]  where W is an object of set and i: Y ∼= X × W is an isomorphism.
These correspondences are applicable to any category in which we can reason about “quotients of equivalence relations”; for instance, the argument can be carried out in any exact category. We now give an equational characterisation of the relation
  in Proposition 4.1.
Lemma 4.3 In any regular category,
given morphisms f : x → y, g: x → z and a monomorphism m: z ‹→ y such that
f = m · g, we have that ker(f ) = ker(g);

given morphisms f : x → y and g: x → z, ker(f ) = ker(g) iff there exists q: x → w and monomorphisms m: w ‹→ y and n: w ‹→ z such that f = m · q and g = n · q.
Proof.
Reasoning by elements, ker(g) ⊆ ker(f ). For the converse,

f · x = f · y =⇒ m · g · x = m · g · y =⇒ g · x = g · y

the last step justified by m being a monomorphism.
Given ker(f ) = ker(g) take the (common) quotient of these kernels q: x → w. Both f and g factor through q via monos m: w ‹→ y and n: w ‹→ z. The converse follows from (i).	 
Let setmn be the broad sub-category of set consisting of monomorphisms. Finite products in set endow setmn with a symmetric monoidal structure, so we can apply our construction of constrained monoidal indeterminates to it.
Theorem 4.4 T(set) ≡ [setop |,
where, as mentioned at the end of §2.7, [setop | = setop [x: jΣ] for Σ = setop and

j = id.
mn	mn	mn

Proof. By Lemma 4.3, we see that the equivalence relation (m, w)  (n, v) involved in forming the hom-sets of setop [x: jΣ] is exactly the equivalence of Proposition 4.1, part (2), because π·m = π·n by the definition of 2-cells in setop (x: jΣ). Therefore, the underlying graphs of both categories are the same. All we need to verify is that the compositions in the two categories agree: given [m, w]: x → y and [n, v]: y → z, i.e., m: y ‹→ x × w and n: z ‹→ y × v, their composite is [α · (m × v) · n, (w × v)] and we verify that
ker π' · α · (m × v) · n  = ker(π' · n) ∩  π · n)−1(ker(π' · m)	 

Having identified T(set) as a free addition of constrained monoidal indetermi- nates, it seems worthwhile to point out the ingredients of [setop | in the former:
An indeterminate xW in T(set) is (!: W → 1, ΔW ), where ΔW is the equality relation on W .
Raw morphisms are of the form (m: W → V, TW ). By the injectivity require- ment, m must be a monomorphism.
The naturality constraint for the indeterminates is satisfied: (m, TW )·xV = xW because m−1(ΔV ) = ΔW by injectivity of m. Notice that this is a necessary, as well as a sufficient, condition on m for commutativity with indeterminates.
Any morphism (f : Y → X, Q) factors as (π: X × Y/Q → X, TX × ΔY/Q) (expansion) followed by (⟨f, q⟩: Y → X × Y/Q, TY ) (raw monomorphism).

Universality of Oles Categories
In a category with finite products, we say an object X is internally non-empty if the unique arrow into a terminal object, X → 1, is a regular epi (necessarily a coequalizer of the two projections π, π': X × X → X).
For a small regular category C, let Ciso be the broad sub-category of C whose arrows are all of the isomorphisms. Then,
Theorem 4.5 O(C) ≡ [Cop |, provided every object of C is internally non-empty.
Proof. Oles’s category is essentially the broad sub-category of the Tennent category where we restrict the raw morphisms to be (equivalence classes of) isos, rather than monos. Given isomorphisms m: y ∼= x × w and n: y ∼= x × v, and a mono h: w ‹→ v such that n = m· x×h, it follows by cancellation that x×h is an isomorphism, and
x non-empty implies then that h is itself an isomorphism. Thus, we conclude that,
whether Σ is Cop or Cop , the hom-categories Cop (x: jΣ)(x, y) agree, provided x

mn	iso
iso

is non-empty. The result now follows from Theorem 4.4 and Corollary 4.2.	 
The reason that we restrict to non-empty objects above is that the identification in O(C)(x, y) should be achieved as in Proposition 4.1. This would require taking monos as the identifying arrows, but the base category of raw morphisms only provides isos. As argued in the above proof, if x is non-empty, (x × m) iso implies m is an iso, and hence isos suffice to provide the required identifications in this context.
The empty set could be added to O(C) above as a terminal object, should it be needed in any application. The universality property should then be suitably extended by demanding that the target categories have terminal objects, and the mediating ‘substitution’ functors between them preserve such.

Symmetric Monoidal Generalizations of Oles and Tennent Categories
Consider now any small symmetric monoidal category C where x ⊗  : C → C pre- serves monomorphisms, e.g., when C has cartesian monoidal structure. We may now describe T(C), a category of worlds with data types in C, which agrees with Tennent’s category when C is set with its cartesian monoidal structure, and can therefore be seen as a symmetric monoidal generalization of Tennent’s construc- tion. Let Cmn be the broad sub-category of C spanned by the monomorphisms. It inherits the symmetric monoidal structure of C by our assumption on x ⊗ ; then define T(C) = [Cop |.
We may also describe an analogous symmetric monoidal generalization of Oles’s construction. For any small symmetric monoidal category C, let Ciso be the broad sub-category of isomorphisms, which retains the symmetric monoidal structure of C. Then, [Cop | agrees with O(C) when C is any small category of non-empty sets. Thus, we obtain a version of Oles’s construction that applies to any symmetric monoidal category, in line with the later developments of O’Hearn and Reynolds [18].

The States Functor
In [19], a functor mapping worlds to the sets of states available in that world is discussed. This functor can be seen to be a direct consequence of the universality of Oles’s category of worlds. It is induced as follows: to give a strong monoidal functor Sop: O(C) → setop with respect to the cartesian monoidal structure in set, we have to pick objects S(c) for every c ∈ C together with “global elements” setop 1, S(c) . But, as noted in the proof of Corollary 2.9, there is only one such global element, namely the unique map ! from S(c) into the terminal 1.
Therefore, the resulting contravariant functor S: O(C) → set sends “expan- sions” (tensors of identities and indeterminates) to projections (cartesian tensor of identities and !s), which is the action of S via Oles’s description of O(set) [24].
It is worth pointing out that the remaining basic semantic functors for Algol, namely those corresponding to expressions, commands, and variables, are defin- able from S and constant functors via the contra-exponentiation of [19]. The only other noteworthy ingredient in the semantics of Algol (besides the cartesian closed structure of the functor category) is the use of “initial values” for local variables in the definition of the binder new, which come from the presence of monoidal indeterminates in O(C) as indicated above.

The Category of Finite Sets and Injections
Several authors [15,28,33,34,3] have used the category Finj of ﬁnite sets (of locally available “locations” or “names”) with injections as the morphisms. Fiore [4] has observed that Finj is equivalent to the free symmetric (strict) monoidal category with an initial unit on one generator. We will exhibit this category as an instance of (our generalization of) the Oles construction described in §4.4.
Consider the category Fbij of finite sets and bijections (or permutations). This is known to be the free symmetric monoidal category on one generator [11], the generator being any one-point set 1, and the monoidal structure being disjoint union (finite co-product). Applying the Oles construction to Fbij freely adds a monoidal indeterminate x1: ∅ → 1.
Proposition 4.6 There is an identity-on-objects isomorphism Finj ∼= [Fbij| and so (Finj, +, ∅) is the free symmetric monoidal category on one generator 1 with a monoidal indeterminate x1: ∅ → 1.
Proof. An injection f : X ‹→ Y corresponds to a identity-on-objects isomorphism X + W ∼= Y with W = Y \ f (X) and this correspondence is compatible with permutations of W . The universal characterization of (Finj, +, ∅) now follows from those of (Fbij, +, ∅) and the Oles construction.	 
Although we are using the [·| construction, these indeterminates are in fact free, as Fbij is a free sub-symmetric monoidal category. In contrast to the characterization mentioned by Fiore, we do not assume initiality of the unit, only the presence of a global element on the generator (to map the “monoidal indeterminate” given by the inclusion ∅ → 1). In fact, initiality of the unit is a consequence, as explained in

Proposition 2.10. The following example illustrates the different strengths of these two characterisations:
Example 4.7 Let SNCffi1 denote the large 2-category of symmetric monoidal cat- egories, strong symmetric monoidal functors and monoidal transformations.
SNCffi1 (Finj, +, ∅), (Set, ×, 1) ∼= 1/Set
To give a strong symmetric monoidal functor H: Finj → Set is to give a set and an element x ∈ H({ }), while a monoidal transformation β: H =⇒ H': Finj → Set amounts to a function h = β{٨}: H({ }) → H'({ }) such that hx = x'. Notice that the freeness of Finj as a co-affine category tells us nothing in this situation, since (Set, ×, 1) is not co-affine.
A straightforward consequence of our identification is that the formula
BA(s) = setFinj A(s + ·), B(s + ·)
for functor exponentiation in [34, Section 5] is an instance of the Exponent Repre- sentation Lemma of [18, Lemma 4], which in fact holds for any O(C) category.

Discussion
We have described here the construction of a polynomial symmetric monoidal (closed) category, obtained from a symmetric monoidal (closed) category by freely adjoining a system of monoidal indeterminates. The construction was motivated by our desire to understand the categories of possible worlds that have been used in semantical analyses of languages allowing creation of “new” variables or names. These categories, though originally presented in fairly ad hoc fashion, have all been shown here to be polynomial monoidal categories, with corresponding universality properties. Intuitively, the indeterminates represent uninitialized “new” compo- nents of the state or name context; the substitution functor F|d then provides the means to produce an “expanded” state or context with initialized new variables, for any appropriate choice of initial values d:
RΣ
C  C[x: jΣ]
F|d
We expect that the methodology introduced here will be useful in other appli- cations. For example, it is tempting to consider “contextual (or functional) com- pleteness” [6] in the symmetric-monoidal setting by requiring RΣ to have a left (resp. right) adjoint. However, we have not yet been able to identify reasonable conditions under which the adjunctions would be Kleisli or co-monadic.

Related work
After our initial submission of this work, it came to our attention that the construc- tion of a category generated by an indeterminate for a single object (cf. §2.8) in the

strict symmetric monoidal case and its universal property were briefly described in the Appendix of Richard Wood’s dissertation [37].
Pavlovi´c [26] considered an application of monoidal indeterminates in relation to Milner’s action calculi. Only the evident “syntactic” construction is considered, together with the well-known special case when the object under consideration admits a comonoid structure, whereby the addition of an indeterminate can be realised by taking the Kleisli category of the resulting comonad, see §2.9. This latter identification is further analyzed in [6], where it is shown that, in the cartesian setting, C×w has the universal property of C[xw: w] based merely on its 2-categorical universal characterisation as a lax colimit, regardless of any explicit description.
The above mentioned “syntactic” construction corresponds to the fact that the categorical structures under consideration are monadic over the category of graphs [2], and therefore admit presentations by generators and relations. Thus, given a symmetric monoidal category C, we consider its underlying graph G(C), add whichever elements W we require, freely generate a symmetric monoidal cate- gory on the extended graph F G(C)+W , and then impose the existing relations in C so as to obtain a strong symmetric monoidal functor R: C → F G(C)+ W  . As far as the structure of categories of possible worlds is concerned, the promi-
nent role of expansion morphisms and an associated notion of quotient are consid-
ered in [13].
Acknowledgement
We are grateful to Paul Levy for pointing out to us that the empty set was prob- lematic in an earlier version of our re-interpretation of Oles’s category of worlds using indeterminates; see §4.4. He also pointed out that considering Σ merely as a subcategory of C in order to obtain the addition of a single indeterminate was problematic; in this revised version we consider the more general situation with j: Σ → C, crucial in §2.8 and 2.9.

References
Borceux, F., “Handbook of Categorical Algebra 1, Basic Category Theory,” Encyclopedia of Mathematics and its Applications 50, Cambridge University Press, 1994.
Burroni, A., Alg`ebres graphiques: sur un concept de dimension dans les langages formels, Cahiers Topologie G´eom. Diff´erentielle 22 (1981), pp. 249–265, third Colloquium on Categories, Part IV (Amiens, 1980).
Fiore, M., E. Moggi and D. Sangiorgi, A fully abstract model for the π-calculus, Information and Computation 179 (2002), pp. 76–117.
Fiore, M. P., Mathematical models of computational and combinatorial structures, in: Foundations of Software Science and Computational Structures, 8th International Conference, FOSSACS 2005, Lecture Notes in Computer Science 3441 (2005), pp. 25–46.
Hasegawa, M., The uniformity principle on traced monoidal categories, Publications of the Research Institute for Mathematical Sciences, Kyoto University 40 (2004), pp. 991–1014.
Hermida, C. and B. Jacobs, Fibrations with indeterminates: contextual and functional completeness for polymorphic lambda calculi, Math. Structures Comput. Sci. 5 (1995), pp. 501–531.


Hermida, C. and R. D. Tennent, A fibrational framework for possible-world semantics of algol-like languages, Theoretical Computer Science 375 (2007), pp. 3–19.
Joyal, A. and R. Street, Braided monoidal categories, Advances in Mathematics 102 (1993), pp. 20–78.
Joyal, A., R. Street and D. Verity, Traced monoidal categories, Mathematical Proceedings of the Cambridge Philosophical Society 119 (1996), pp. 447–468.
Kelly, G. M., Doctrinal adjunction, in: Category Seminar (Proc. Sem., Sydney, 1972/1973), Springer, Berlin, 1974 pp. 257–280. Lecture Notes in Math., Vol. 420.
Kelly, G. M., “On clubs and doctrines,” Lecture Notes in Mathematics 420, Springer-Verlag, Berlin, 1974 pp. 181–256.
Lambek, J. and P. J. Scott, “Introduction to Higher-Order Categorical Logic,” Cambridge Studies in Advanced Mathematics 7, Cambridge University Press, Cambridge, England, 1986.
Levy, P. B., Global state considered helpful, in: Proceedings of the 24th Conference on the Mathematical Foundations of Programming Semantics (MFPS XXIV), Electronic Notes in Theoretical Computer Science 218 (2008), pp. 241–259.
Mac Lane, S., “Categories for the Working Mathematician,” Graduate Texts in Mathematics 5, Springer-Verlag, 1971, second edition, 1998.
Moggi, E., An abstract view of programming languages, Technical report, Laboratory for Foundations of Computer Science, Department of Computer Science, University of Edinburgh (1990), available here: http://www.lfcs.informatics.ed.ac.uk/reports/90/ECS-LFCS-90-113.
O’Hearn, P. W., “The Semantics of Non-Interference: A Natural Approach,” Ph.D. thesis, Queen’s University, Kingston, Canada (1990).
O’Hearn, P. W., A. J. Power, M. Takeyama and R. D. Tennent, Syntactic control of interference revisited, Theoretical Computer Science 228 (1999), pp. 211–252, preliminary version published as Chapter 18 of [22].
O’Hearn, P. W. and J. C. Reynolds, From algol to polymorphic linear lambda-calculus, Journal of the ACM 47 (2000), pp. 167–223.
O’Hearn, P. W. and R. D. Tennent, Semantics of local variables, in: M. P. Fourman, P. T. Johnstone and
A. M. Pitts, editors, Applications of Categories in Computer Science, London Mathematical Society Lecture Note Series 177, Cambridge University Press, Cambridge, England, 1992 pp. 217–238.
O’Hearn, P. W. and R. D. Tennent, Semantical analysis of specification logic, 2, Information and Computation 107 (1993), pp. 25–57, reprinted as Chapter 14 of [22].
O’Hearn, P. W. and R. D. Tennent, Parametricity and local variables, J. ACM 42 (1995), pp. 658–709, reprinted as Chapter 16 of [22].
O’Hearn, P. W. and R. D. Tennent, editors, “Algol-like Languages,” Progress in Theoretical Computer Science, Birkh¨auser, Boston, 1997, two volumes.
Oles, F. J., “A Category-Theoretic Approach to the Semantics of Programming Languages,” Ph.D. thesis, Syracuse University, Syracuse, N.Y. (1982).
Oles, F. J., Type algebras, functor categories and block structure, in: M. Nivat and J. C. Reynolds, editors, Algebraic Methods in Semantics, Cambridge University Press, Cambridge, England, 1985 pp. 543–573.
Oles, F. J., Functor categories and store shapes, in: O’Hearn and Tennent [22] pp. 3–12 of Volume 2.
Pavlovi´c, D., Categorical logic of names and abstraction in action calculi, Math. Structures Comput. Sci. 7 (1997), pp. 619–637.
Petri´c, Z., Coherence in substructural categories, Studia Logica 70 (2002), pp. 271–296.
Pitts, A. and I. Stark, Observable properties of higher order functions that dynamically create local names, or: What’s new?, in: A. M. Borzyszkowski and S. Sokolowski, editors, Mathematical Foundations of Computer Science, Lecture Notes in Computer Science 711 (1993), pp. 122–141.
Reynolds, J. C., Syntactic control of interference, in: Conference Record of the Fifth Annual ACM Symposium on Principles of Programming Languages (1978), pp. 39–46, reprinted as Chapter 10 of [22].

Reynolds, J. C., “The Craft of Programming,” Prentice Hall International, U.K., 1981.
Reynolds, J. C., The essence of algol, in: J. W. de Bakker and J. C. van Vliet, editors, Algorithmic Languages, Proceedings of the International Symposium on Algorithmic Languages (1981), pp. 345–372, reprinted as Chapter 3 of [22].
Reynolds, J. C., Idealized Algol and its specification logic, in: D. N´eel, editor, Tools and Notions for Program Construction (1981), pp. 121–161, reprinted as Chapter 6 of [22].
Sieber, K., Full abstraction for the second order subset of an algol-like language, in: Mathematical Foundations of Computer Science, Lecture Notes in Computer Science 841 (1994), pp. 608–617, reprinted as Chapter 15 of [22].
Stark, I., Categorical models for local names, Lisp and Symbolic Computation 9 (1996), pp. 77–107.
Tennent, R. D., Functor-category semantics of programming languages and logics, in: D. Pitt,
S. Abramsky, A. Poign´e and D. Rydeheard, editors, Category Theory and Computer Programming, Lecture Notes in Computer Science 240 (1985), pp. 206–224.
Tennent, R. D., Semantical analysis of specification logic, Information and Computation 85 (1990),
pp. 135–162, reprinted as Chapter 13 of [22].
Wood, R., “Indicial methods for relative categories,” Ph.D. thesis, Dalhousie University, Halifax, Nova Scotia (1976).
