Available online at www.sciencedirect.com


Electronic Notes in Theoretical Computer Science 322 (2016) 181–195
www.elsevier.com/locate/entcs


Bounds and Fixed-Parameter Algorithms for Weighted Improper Coloring
Bjarki Agust Gudmundsson 1  Tomas Ken Magnusson 2
Bjorn Orri Saemundsson 3
ICE-TCS, School of Computer Science Reykjavík University Reykjavík, Iceland

Abstract
We study the weighted improper coloring problem, a generalization of defective coloring. We present some hardness results and in particular we show that weighted improper coloring is not fixed-parameter tractable when parameterized by pathwidth. We generalize bounds for defective coloring to weighted improper coloring and give a bound for weighted improper coloring in terms of the sum of edge weights. Finally we give fixed-parameter algorithms for weighted improper coloring both when parameterized by treewidth and maximum degree and when parameterized by treewidth and precision of edge weights. In particular, we obtain a linear-time algorithm for weighted improper coloring of interval graphs of bounded degree.
Keywords: graph coloring, improper coloring, defective coloring, weighted improper coloring, coloring bounds, fixed-parameter algorithms


Introduction
Graph coloring is a classic subject of both mathematics and computer science with many practical applications. It was one of Karp’s 21 original  -complete prob- lems. Many generalizations of graph coloring, such as defective coloring, have been studied, but most of those apply to undirected graphs. In this paper we consider weighted improper coloring, a generalization of graph coloring for weighted digraphs. Weighted improper coloring has not received much attention until recently in the context of wireless networks. In some models for wireless networks, such as the SINR model, communication over one wireless link can disturb communication over other wireless links. This disturbance can vary from link to link, and depends on

1 Email: bjarkig12@ru.is
2 Email: tomasm12@ru.is
3 Email: bjorn12@ru.is

http://dx.doi.org/10.1016/j.entcs.2016.03.013 1571-0661/© 2016 Published by Elsevier B.V.
This is an open access article under the CC BY-NC-ND license (http://creativecommons.org/licenses/by-nc-nd/4.0/).

signal strength and other variables of the surrounding environment. Furthermore the disturbance does not need to be symmetric. A scheduling of communications in such a network can be modeled as a weighted improper coloring, and this is where the generalization stems from.
In this paper we provide some new bounds, fixed-parameter algorithms and hard- ness results for weighted improper coloring, some of which are generalizations of existing results for defective coloring.
Preliminaries
Let G = (V, E) be an undirected graph. For a vertex v  V let d(v) denote the degree of v in G, and dS(v) denote the degree of v in the subgraph induced by a subset S  V . A k-coloring c : V    1,..., k  of G is a partition of the vertex set V into k vertex-disjoint subsets, and c[v] denotes the set of vertices that have color c(v). A k-coloring c is d-defective if for each v  V , dc[v](v)  d. A d-defective k-coloring is also called a (k, d)-defective coloring. Note that ordinary coloring is a special case of defective coloring where d = 0, so defective coloring is a proper generalization of ordinary coloring.
Let G = (V, E, w) be a weighted digraph, where w : E  [0, 1] is an associated weight function. For a vertex v ∈ V let d—(v)=  (u,v)∈E w(u, v) denote its weighted indegree, and d—(v) denote the weighted indegree of v in the subgraph induced by a subset S ⊆ V . Let Δ— denote maximum of any weighted indegree.
Definition 1.1 A k-coloring c of a weighted digraph G = (V, E, w) is a weighted
improper k-coloring if for each vertex v ∈ V , d— (v) < 1. The weighted improper
chromatic number χw(G) is the minimum number k such that G has a weighted improper k-coloring with respect to the weight function w.

0.9	0.9


0.7	0.7



Fig. 1. A valid weighted improper coloring of the graph to the left. The graph on the right has an invalid coloring as the upper left corner vertex has indegree 1 from same-colored neighbors.

Now notice that weighted improper coloring is a generalization of defective col- oring, and by extension a generalization of ordinary coloring, as is captured by the following lemma.
Lemma 1.2 Defective (k, d)-coloring can be reduced to weighted improper k-coloring in polynomial time.
Proof. Let G be an undirected graph. In a valid defective (k, d)-coloring of G any vertex v ∈ V (G) can have at most d adjacent vertices of the same color. Let Gj be the weighted digraph obtained by replacing every edge {u, v} ∈ E(G) with two

directed edges (u, v) and (v, u) with weight  1  . Clearly, any vertex vj  V (Gj) cannot have more than d adjacent vertices of the same color because then we would have d— ′ (vj) ≥ d+1 = 1. However, vj can have up to d adjacent vertices of the same
color because that yields d— ′ (vj) ≤  d  < 1. Thus, any valid weighted improper
k-coloring of Gj is also a valid defective (k, d)-coloring of G and any invalid weighted improper k-coloring of Gj is an invalid defective (k, d)-coloring of G. The reduction has time complexity O(|E(G)|) and is thus a polynomial-time reduction.	2
As this reduction does not change the underlying structure of the graph, but only adds weights to it, we get the following corollary.
Corollary 1.3 Defective (k, d)-coloring of any specific class of graphs has a poly- nomial time reduction to weighted improper k-coloring of the same class of graphs.
Finally we define a tree decomposition as follows:
Definition 1.4 A tree decomposition of a graph G = (V, E) is a pair (X, T ), where X = X1,..., Xn is a collection of subsets of V , and T is a tree whose vertices are the subsets in X, which we will refer to as super-vertices. Additionally, the following properties must hold:
if v ∈ V , then there exists a subset Xi such that v ∈ Xi,
if (u, v) ∈ E, then there exists a subset Xi such that u ∈ Xi and v ∈ Xi, and
if v V and Xv  X is the set of subsets that contain v, then Xv forms a connected subtree of T .
The width of a tree decomposition (X, T ) is maxi Xi  1. The treewidth of a graph G is the minimum width of any tree decomposition of G. A path decompo- sition is a tree decomposition (X, T ) where T is a path graph. The pathwidth of a graph G is the minimum width of any path decomposition of G. Finally, path and tree decompositions can be extended to digraphs by using the underlying graph (i.e. by treating directed edges as undirected).

Previous work
Defective coloring and the related t-improper coloring were first introduced by Andrews and Jacobsen [1], Harary and Frank [14] and Cowen et al. [10]. Graphs on embeddable surfaces were the main focus of Cowen et al. [10] and Cowen, Goddard and Jeserum [9] and they characterized all (k, d) such that planar graphs are d- defective k-colorable and produced results for surfaces of higher genus. Frick and Henning [12] gave extremal results on the defective chromatic number and Kang and McDiarmid [17] proved bounds on the growth of the defective chromatic number of random graphs. Other properties than degrees of vertices have been researched regarding defective coloring and Frick [11] gives a good survey on such variations of the problem.
The first to propose this edge weighted variation for undirected graphs were Hoefer, Kesselheim and Vöcking [16]. Araujo et al. [3] defined the problem with

a variable threshold on the degree of a vertex with respect to its coloring and ex- plored the dual of the problem of finding such a threshold, in addition to producing results on various grid graphs. Similar channel assignment problems have also been considered and modeled as colorings on vertex weighted graphs [6].
Tamura et al. [22] and Archetti et al. [4] present a clear formulation of wireless scheduling of the SINR model systems as directed weighted improper coloring and most of the work has assumed geometric restrictions on the interference, while some general results have been published. Recently Halldórsson and Bang-Jensen [5] gave the essentially tight bound χw(G) ≤ [2Δ— + 1♩.

Hardness
Some hardness results about defective coloring have been established. Cowen and Jeserum [9] proved that (2, d)-defective coloring is NP-complete for d ≥ 1, even for planar graphs, and that (3, 1)-defective coloring is also NP-complete for planar graphs. Furthermore they show that (k, d)-defective coloring is NP-complete for any k ≥ 3,d ≥ 0.
These results can be carried over to weighted improper coloring, as we show in the following corollaries.
Corollary 2.1 Weighted improper k-coloring is NP-complete for k ≥ 2.
Proof. This follows from Lemma 1.2 and the fact that defective (k, d)-coloring is
NP-complete for k =2 and d ≥ 1, as well as k ≥ 3 and d ≥ 0.	2
Note that, as there is a simple polynomial-time algorithm for 2-coloring, it is a bit surprising that defective 2-coloring and weighted improper 2-coloring are  - complete.
Corollary 2.2 Weighted improper k-coloring is NP-complete for planar graphs when k ∈ {2, 3}.
Proof. This follows from Corollary 1.3 and the fact that (2, d)-defective coloring is NP-complete for planar graphs when d ≥ 1, as well as the fact that (3, 1)-defective coloring is NP-complete for planar graphs.	2
Since any planar graph is 4-colorable [2], which is a stricter requirement than being weighted improper 4-colorable, and as 1-colorability is trivial, this, along with Corollary 2.2, gives complete hardness results for weighted improper coloring of planar graphs.
Now consider a graph G, and say we add any amount of 0-weight edges to this graph to make a new graph Gj. As these 0-weight edges impose no new restrictions, it is clear that G is k-colorable if and only if Gj is k-colorable. In fact, we can add 0- weight edges until the graph is complete without adding any restrictions, and hence, in a sense, we can always assume that the graph is complete. This observation gives rise to the following lemma.

Lemma 2.3 Let G be a family of graphs such that for each n the complete graph
Kn ∈ G. Then weighted improper k-coloring for G is NP-complete.
Proof. We show this by reducing general weighted improper k-coloring, which is
-complete by Corollary 2.1, to weighted improper k-coloring for . Take any weighted digraph G = (V, E, w). Create a complete weighted digraph Gj from G by adding 0-weight edges between pairs of vertices that are not connected by an edge in G. Clearly G is k-colorable if and only if Gj is k-colorable. Since Gj is a complete graph, we see that Gj ∈ G, which concludes the reduction.	2
In particular, this lemma implies the -completeness of weighted improper coloring for interval graphs, Cn  Kt, and kth powers of paths and cycles, where t and k are unbounded. Later we will give fixed-parameter algorithms for these and other graph classes.
This lemma can be further generalized by noticing that vertices with 0-weight edges can also be added to a graph without adding any restrictions, and hence graphs with large enough complete subgraphs can be used instead of complete graphs in the reduction.
Theorem 2.4 Weighted improper coloring is -complete for graphs of bounded pathwidth.
Proof. Given a multiset S = x1,..., xn of positive integers, the partition problem is the task of deciding whether S can be partitioned into two sets S1, S2 such that x∈S1 x =	x∈S2 x. We show that weighted improper coloring is	-complete for graphs of bounded pathwidth by reducing the partition problem to weighted
improper coloring of a graph with bounded pathwidth.
We construct an undirected graph G = (V, E) such that for every integer xi  S we add a corresponding vertex vi to V , along with two additional vertices A and B. We add an undirected edge A, B with weight 1 and for each vertex vi we add two undirected edges A, v  and v , B to the graph with weights w = 2x /X  ϵ/ S
where X = Σx∈S x. The graph is depicted in Figure 2.
Fig. 2. Subset sum modeled as a weighted improper coloring.
We claim that S can be partitioned into S1 and S2 if and only if there exists a valid weighted improper 2-coloring of G.
Given a partition of S into S1, S2 we assign to every vertex vi corresponding to an integer xi ∈ S1 the color 1 and conversely we assign the color 2 to every vertex corresponding to an integer xi ∈ S2. In addition we assign 1 to A and 2 to B. For

every vi we have dc[vi](vi) = wi = 2xi/X  ϵ/ S < 1 as a single integer cannot exceed half of the total sum of the integers, otherwise the partition would not be valid. For A we get

d	(A)= Σ w =  2
Σ x − |S1| ϵ =  2	X
|S1| ϵ =1 − |S1|ϵ < 1.

c[A]
i
xi∈S1
X	i
xi∈S1
|S|
X · 2 −
|S|
|S|

The same argument holds for B.	Hence the partition yields a valid weighted improper 2-coloring of G.
Given a valid weighted improper coloring of G, we let S1 be all those vertices in the same color class as A and S2 be all those in the same color class as B. Then

Σ x = Σ
X  w
+ ϵ  = X , Σ
w + |S1|ϵ⎞ ≤ X  1 − ϵ + |S1|ϵ  ≤ X ,

i
xi∈S1


2
vi∈c[A]


|S|


2	i
vi∈c[A]
|S| ⎠	2
|S|	2

and the same holds for S2. For both S1, S2 we get Σx∈S
x ≤ X
and by definition

Σx∈S1
x + Σ
x∈S2
i	2
x = X, hence equality holds.
... 

Fig. 3. Path decomposition of the graph constructed from an instance of the partition problem.
The graph G has pathwidth 2 as can be seen by an optimal path decomposition of G depicted in Figure 3. Using the fact that the partition problem is -complete [15], we conclude the proof.	2
Bounds
Prohibiting edges of weight 1 can make a difference when coloring weighted graphs. The 3-regular graph in Figure 4 has weighted improper chromatic number 3, even though every vertex has an incident edge with weight less than 1. However, 3-regular graphs with no edges of weight 1 have weighted improper chromatic number at most 2, as is shown by the following lemma.

Fig. 4. A 3-regular graph where each vertex has an incident edge with weight less than 1.

Lemma 3.1 If G = (V, E, w) is a weighted graph such that w(e) < 1 for every
e ∈ E and every vertex has at most 3 neighbors, then χw(G) ≤ 2.

Proof. Start with any 2-coloring c : V  1, 2 of G. While we have some vertex with at least two same-colored neighbors, pick such a vertex v and flip the color of v to the opposite color. This step reduces the number of monochromatic edges by at least 1 and as there are at most E monochromatic edges to begin with, the procedure halts after a finite number of steps. When the procedure halts, every vertex has at most one incident monochromatic edge and as the weights are less than 1, the degree of the vertex with respect to its color is less than 1.	2
We can extend the results of Lovász [20] to our version of the problem. It is clear

 χ(t)
(d+1)
≤ χd(G) [18], where χd(G) is the d-defective chromatic number. Similar

results hold for undirected weighted improper coloring.
Lemma 3.2 If G = (V, E, w) is an undirected weighted graph with the minimum positive edge weight wmin, then
⎡	χ(G)	 ⎤


1—є wmin
≤ χw(G).
+ 1 ⎥

Proof. We start by removing all edges e ∈ E with w(e) = 0. Given a we ighted 
neighbors with the same color. Hence, by Brooks’ theorem, each of the subgraphs induced by the coloring can be properly colored with at most	 1—є	+1 colors.
Therefore χ(G) ≤   1—є  + 1 χw(G), which yields the lemma.	2
Theorem 3.3 If G = (V, E, w) is a weighted digraph, where the underlying graph
of G has maximum degree Δˆ and maximum edge weight wmax, then
⎡	Δˆ	⎤

χw(G) ≤	1—є
wmax
+ 1.
+ 1 ⎥

Proof. We construct a weighted undirected graph Gj = (V j, Ej = {{u, v} : (u, v) ∈ E or (v, u) ∈ E}, wj) where wj(e)= wmax for every e ∈ Ej. Clearly χw(G) ≤ χw′ (Gj) as we are addin g edges and increasing the weights. Notice that each v ∈ V j can have

k = Δˆ /  1—є
+ 1  +1 and start with any k-coloring of Gj.

Say there exists a vertex v with more than  1—є  neighbors of the same color. First assume that v has more than  1—є  neighbors of every color class. But then
 , 1 − ϵ ,	 ⎡	Δˆ	⎤	ˆ	Δˆ

dt′ (v) ≥	w
+1 ⎢  1—є 

⎥ ≥ Δ+  1—є	,


which contradicts the fact that Δˆ is the maximum degree in the underlying graph
of G. Hence there exists a color class where v has at most  1—є  neighbors, and we will change the color of v to the color of any such color class.
We can repeat the previous procedure while there exists a vertex with more than
 1—є  neighbors of the same color. Now consider the monochromatic edges in the graph, which are at most E to begin with. Every time we change the color of a vertex during this process, the number of monochromatic edges decreases by at least
one. Hence this process must terminate, and at that time each vertex has at most
 1—є  same-colored neighbors, so we have a valid k-coloring.	2
As the previous proof is constructive, we get the following corollary:
Corollary 3.4 For a weighted digraph G  = (V, E, w) with maximum weight
wmax and maximum degree Δˆ in the underlying graph, a weighted improper

  Δˆ /  1—є
+ 1  + 1 -coloring can be found in O Δˆ |E|  time.

Halldórsson and Bang-Jensen [5] proved the essentially tight bound of χw(G) 2Δ—1 + 1 in terms of maximum weighted indegree. This bound is used in the following theorem to give a bound in terms of sum of edge weights.
Theorem 3.5 If G = (V, E, w) is a weighted digraph and W = Σe∈E w(e), then
≤

sum of indegrees of those vertices is at least t ·	W/2 ≤ W , we get t√hat t ≤	2W .
the rest of the graph G \ Gj has chromatic number χw(G \ Gj) ≤ 2√W/2+ 1 =
 √2W + 1 . By coloring Gj with  √2W  colors, we get a coloring using at most
 √2W  +  √2W + 1  colors, and the theorem follows.	2
Fixed-Parameter Algorithms
Both ordinary graph coloring and defective coloring are fixed-parameter tractable when parameterized by treewidth [19,21]. Thus it is natural to ask whether the same holds true for weighted improper coloring. Theorem 2.4 shows that this is not the case.

... 
...    v
. .. 

Fig. 5. A weighted digraph and its tree decomposition.

Figure 5 shows a small part of a graph (on the left) and what the relation between these vertices might look like in a tree decomposition of the same graph (on the right). The classic fixed-parameter algorithm for ordinary coloring would at some point visit the vertex corresponding to the subset v, u and choose colors for v and u. Then it would proceed down the tree decomposition, possibly visiting multiple vertices, and then finally arrive at the vertex corresponding to the subset v, w . At that point w needs to be assigned some color, and it is immediately clear that it cannot be the same color as is assigned to v. On the other hand, if this was weighted improper coloring, then it may or may not be valid to assign v’s assigned color to w. This depends on which neighbors of v have the same color as v does. In this example it depends on the color of u, and possibly other vertices. This shows that valid colors for a vertex may depend on multiple decisions that are not local to its closest ancestors in the tree decomposition, possibly giving some intuition into why weighted improper coloring is not fixed-parameter tractable when parameterized only by treewidth.
However, we now show that weighted improper coloring is fixed-parameter tractable when parameterized by treewidth and either the maximum indegree in a graph or the precision of edge weights. As a first step towards this, we present the following fact.
Fact 4.1 [8, Theorem 6] The chromatic number of a graph G of treewidth k is at most k + 1.
As ordinary coloring is a stricter requirement than weighted improper coloring, it follows that the weighted improper chromatic number of a graph G of treewidth k is also at most k + 1.
The following algorithms operate on an optimal tree decomposition, which can be constructed in linear time (when the treewidth is bounded) by Bodlaender [7].

Bounded Treewidth and Bounded Maximum Indegree
If we additionally restrict the maximum unweighted indegree of the graph, then it is possible to keep track of the colors of all vertices and all their in-neighbors within a given super-vertex in the tree decomposition, which is exactly the information needed to check if the coloring restrictions for a given vertex within that super-vertex are fulfilled.
Now consider any weighted digraph G = (V, E, w) with bounded treewidth k and bounded maximum indegree. Algorithm 1 is an adaptation of the classic fixed- parameter algorithm for ordinary graph coloring. It additionally keeps track of colors of the in-neighbors of the vertices being colored to be able to check weight restrictions.
A call to Color(Xi, c¯) returns the minimum l such that the subgraph induced by the vertices contained in the super-vertices in the subtree rooted at Xi is l-colorable with respect to the partial coloring c¯. To answer the query Color tries all possible colorings c of the vertices and their neighbors using the same colors for those vertices that have already been colored with the coloring c¯. Then it recursively calls itself

to answer further subproblems.

Algorithm 1 A fixed-parameter algorithm for graphs of bounded treewidth and bounded maximum indegree.
1: function Color(Xi, c¯)
2: begin
3:	Let Xp be the parent of Xi in T , or the empty set if Xi is the root
4:	Let Vi be the set of vertices in Xi and all their in-neighbors, and let Vp
be defined similarly for Xp
5:	χ → +∞
6:	for each coloring c : Vi → {1,...,k + 1} with c(v)= c¯(v) for v ∈ Vi ∩ Vp do
7:	if d— (v) < 1 for each v ∈ Xi then
8:	χj	highest index of a color used by c
9:	for each child Xj of Xi do
10:	χj	max(χj, Color(Xj, c))
11:	end for
12:	χ	min(χ, χj)
13:	end if
14:	end for
15:	return χ
16: end

17: Construct a tree decomposition (X, T ) of G of width at most k
18: Root the tree T at super-vertex X1
19: return Color(X1, ∅)

In order to argue the correctness of this algorithm, there are essentially three properties that need to be shown:
the assignment of colors to vertices is consistent, that is, exactly one color is assigned to a given vertex, and this color is used throughout the duration of the algorithm,
any coloring that the algorithm discovers is valid, and
any valid coloring can be discovered by the algorithm.
The following two lemmas are proved in Section A.1 of Appendix A in the ex- tended version of this paper [13].
Lemma A.4 [13] Any coloring that Algorithm 1 discovers is valid.
Lemma A.5 [13] Any valid coloring of at most k +1 colors can be discovered by Algorithm 1.
These lemmas give us the following theorem.
Theorem 4.2 Weighted improper coloring is fixed-parameter tractable when param- eterized by treewidth and maximum indegree.

Proof. Lemmas A.4 and A.5 show that the colorings discovered by Algorithm 1 are exactly the valid colorings using at most k +1 colors. In particular, as the weighted improper chromatic number is at most k +1 by Fact 4.1, it will discover all colorings that have the minimum number of colors. And as the algorithm returns the minimum number of colors in any coloring found, it will return the weighted improper chromatic number of the input graph G.
Algorithm 1 has exponential time complexity, as it is essentially a backtrack- ing algorithm that explores all valid colorings of at most k +1 colors. Now no- tice that the results of the Color function only depend on the values of its input parameters. Also notice that the call hierarchy of the recursive calls is acyclic. Therefore the results of these function calls can be computed efficiently using dy- namic programming. That is, by computing the results of the function calls for all possible input parameters, storing all results, and then re-using the stored results
when needed. Let n = |V (G)|, k be the treewidth and Δˆ — denote the maximum
unweighted indegree of G. As there are (k + 1)(k+1)Δˆ− possible maps from a set of (k + 1)Δˆ — elements to a set of k +1 elements, there are O n(k + 1)(k+1)Δˆ− possible input parameters to the Color function. As the result for each of them can be computed in O  n(k + 1)(k+1)Δˆ−	time, this gives us total time complexity
O n2(k + 1)2(k+1)Δˆ− . Although unnecessary for this result, noticing that each super-vertex is actually only referenced twice reduces the time complexity down to O n(k + 1)2(k+1)Δˆ− . This time complexity along with the correctness of the al- gorithm proves that weighted improper coloring is fixed-parameter tractable when parameterized by treewidth and maximum indegree.	2
The algorithm has memory complexity O n(k + 1)(k+1)Δˆ− . It may also be of interest that, using common dynamic programming techniques, it is possible to construct an optimal coloring, or count the number of optimal colorings.
There are many graphs of bounded treewidth and bounded maximum degree, and this algorithm is linear when applied to these graphs. This includes bounded degree interval graphs, Cn  Kt where t is bounded, and kth powers of paths and cycles where k is bounded. Remember that it is  -complete to weighted improper color the unbounded versions of these graph classes by Lemma 2.3.
Bounded Treewidth and Bounded Precision Weights
Another possibility is to additionally restrict the precision of weights in the graph. Consider the process of assigning colors to vertices one at a time. Initially, when no vertex has been colored, all vertices have weighted indegree zero from same-colored vertices, and are allowed to have an additional weighted indegree of 1	ϵ of same- colored vertices. We will call this the budget of the vertex. As more vertices are assigned colors, the budget of a given vertex gradually decreases. If the weights have bounded precision, then it is possible to keep track of the budgets in such a process. Now consider any weighted digraph G = (V, E, w) with bounded treewidth k

and edge weights with bounded precision of b bits. Let R denote the set of b-bit fixed precision real numbers. Algorithm 2, similar to Algorithm 1, is an adaptation of the classic fixed-parameter algorithm for ordinary graph coloring, but instead of the coloring of the neighbors, it keeps track of vertex budgets to check weight restrictions.
A call to Color(Xi, c¯, r¯) returns the minimum l such that the subgraph induced by the vertices contained in the super-vertices in the subtree rooted at Xi is l- colorable, provided that
the partial coloring given by the parameter c¯ is the coloring done at the parent of
Xi (which could share some vertices with Xi), and
the second parameter r¯ gives the remaining budgets of the vertices in Xi’s parent.
To answer this query Color tries all possible colorings c of the vertices in Xi
while maintaining the colors given by c¯. However, it cannot directly call itself
recursively to solve further subproblems. The reason is that the budget of a given vertex is not independent amongst the children super-vertices. In order to break up this dependency, the Distribute function distributes the budget of a given vertex amongst the children super-vertices. This is done by recursively going over all child super-vertices of super-vertex Xp and deciding how much of the budget may be spent in the subtree rooted at the i-th child. Then Color can be called with this budget, r, on the i-th child to solve further subproblems.
In order to argue the correctness of this algorithm the same three properties as with Algorithm 1 need to be shown.
The following two lemmas are proved in Section A.2 of Appendix A in the ex- tended version of this paper [13].
Lemma A.8 [13] Any coloring that Algorithm 2 discovers is valid.
Lemma A.9 [13] Any valid coloring of at most k +1 colors can be discovered by Algorithm 2.
These lemmas give us the following theorem.
Theorem 4.3 Weighted improper coloring is fixed-parameter tractable when param- eterized by treewidth and precision of weights.
Proof. Lemmas A.8 and A.9 show that the colorings discovered by Algorithm 2 are exactly the valid colorings using at most k +1 colors. In particular, as the weighted improper chromatic number is at most k +1 by Fact 4.1, it will discover all colorings that have the minimum number of colors. And as the algorithm returns the minimum number of colors in any coloring found, it will return the weighted improper chromatic number of the input graph G.
Algorithm 2 has exponential time complexity, as it is essentially a backtrack- ing algorithm that explores all valid colorings of at most k +1 colors. Now notice that the results of the Distribute and Color functions only depend on the val- ues of their input parameters. Also notice that the call hierarchy of the recursive



Algorithm 2 A fixed-parameter algorithm for graphs of bounded treewidth and bounded precision weights.
1: function Distribute(Xp, c¯, r¯, i)
2: begin
3:	if Xp has less than i children then
4:	return 0
5:	else
6:	Let Xi be the i-th child of Xp
7:	χ → +∞
8:	for each possible r : Xp → R where 0 ≤ r(v) ≤ r¯(v) do
9:	χj → max(Distribute(Xp, c¯, (r¯ − r), i + 1), Color(Xi, c¯, r))
10:	χ	min(χ, χ )
11:	end for
12:	return χ
13:	end if
14: end

15: function Color(Xi, c¯, r¯)
16: begin
17:	Let Xp be the parent of Xi in T , or the empty set if Xi is the root
18:	χ → +∞
19:  for each coloring c : Vi → {1,...,k + 1} with c(v)= c¯(v) for v ∈ Vi ∩ Vp do 20:	Let r : Vi → R such that r(v)= r¯(v) if v ∈ Vp and r(v)= 1 − ϵ otherwise 21:	for each (u, v) ∈ E(G) do
22:	if {u, v}⊆ Xi and (u /∈ Xp or v /∈ Xp) then
23:	r(v)	r(v)	w(u, v)
24:	end if
25:	end for
26:	if r(v)	0 for each v	Xi then
27:	χ	min(χ, Distribute(Xi, c, r, 1))
28:	end if
29:	end for
30:	return χ
31: end

32: Construct a tree decomposition (X, T ) of G of width at most k
33: Root the tree T at super-vertex X1
34: return Color(X1, ∅, ∅)

calls is acyclic. Therefore the results of these function calls can be computed ef- ficiently using dynamic programming. That is, by computing the results of the function calls for all possible input parameters, storing all results, and then re- using the stored results when needed. Let n = V (G) , k be the treewidth, and b be the precision of weights (i.e. the number of bits used to represent them). As there are (k + 1)k+1 possible maps from a set of k + 1 elements to a set

of k + 1 elements, there are O n2(k + 1)k+12b(k+1) possible input parameters to the Distribute function. The result for each of them can be computed in O 2b(k+1) time. Similarly we can see that there are O n(k + 1)k+12b(k+1) pos- sible input parameters to the Color function and the result for each of them can be computed in O n2(k + 1)k+1 time. This gives us total time complexity O n2(k + 1)k+122b(k+1) + n3(k + 1)2(k+1)2b(k+1) . This time complexity along with the correctness of the algorithm proves that weighted improper coloring is fixed- parameter tractable when parameterized by treewidth and precision of weights. 2

Conclusion
In this paper we defined the weighted improper coloring problem and presented some hardness results for it. In particular we showed that weighted improper coloring is not fixed-parameter tractable when pathwidth is fixed. We generalized some bounds for defective coloring to weighted improper coloring, and used a bound by Halldórsson and Bang-Jensen [5] to derive a bound for weighted improper coloring in terms of the sum of edge weights. As this bound is not tight, it would be interesting to find a tight bound in terms of the sum of edge weights.
We also showed that 3-regular graphs that have edge weights strictly less than 1 are 2-colorable, and that two colors may not be sufficient when each vertex has at most two incident weight-1 edges. It would be interesting to find necessary and sufficient conditions on edge weights for a 3-regular graph to be 2-colorable. In particular we conjecture that sub-cubic graphs with at most one incident weight-1 edge are 2-colorable.
We gave fixed-parameter algorithms for weighted improper coloring when either treewidth and maximum degree are fixed or when treewidth and precision of edge weights are fixed. These algorithms also imply a linear-time algorithm for certain graph classes such as interval graphs with bounded degree. A combination of round- ing edge weights with the fixed-parameter algorithm for bounded treewidth and bounded precision weights might imply an approximation algorithm for weighted improper coloring of graphs of bounded treewidth.
This paper presents the results of our final project in our Bachelor studies in Computer Science and we want to thank our instructor, Magnús Már Halldórsson, for his guidance, advice and helpful hints. We would also like to thank Henning Úlfarsson for reviewing.

References
Andrews, J. A. and M. S. Jacobson, On a generalization of chromatic number, Congressus Numerantium
47 (1985), pp. 33–48.
Appel, K. and W. Haken, Every planar map is four colorable, Mathematical Solitaires & Games (1980),
p. 145.
Araujo, J., J.-C. Bermond, F. Giroire, F. Havet, D. Mazauric and R. Modrzejewski, Weighted improper colouring, in: C. Iliopoulos and W. Smyth, editors, Combinatorial Algorithms, Lecture Notes in Computer Science 7056, Springer Berlin Heidelberg, 2011 pp. 1–18.

Archetti, C., N. Bianchessi, A. Hertz, A. Colombet and F. Gagnon, Directed weighted improper coloring for cellular channel allocation, Discrete Applied Mathematics 182 (2015), pp. 46–60.
Bang-Jensen, J. and M. M. Halldórsson, Vertex coloring edge-weighted digraphs, Inf. Process. Lett. 115
(2015), pp. 791–796.
Bermond, J.-C., F. Havet, F. Huc and C. L. Sales, Improper coloring of weighted grid and hexagonal graphs, Discrete Mathematics, Algorithms and Applications 2 (2010), pp. 395–411.
Bodlaender, H. L., A linear time algorithm for ﬁnding tree-decompositions of small treewidth, in: Proceedings of the twenty-ﬁfth annual ACM symposium on Theory of computing, ACM, 1993, pp. 226–234.
Chlebíková, J., Partial k-trees with maximum chromatic number, Discrete mathematics 259 (2002),
pp. 269–276.
Cowen, L., W. Goddard and C. E. Jesurum, Defective coloring revisited, Journal of Graph Theory 24
(1997), pp. 205–219.
Cowen, L. J., R. H. Cowen and D. R. Woodall, Defective colorings of graphs in surfaces: Partitions into subgraphs of bounded valency, Journal of Graph Theory 10 (1986), pp. 187–195.
Frick, M., A survey of (m, k)-colorings, Annals of Discrete Mathematics 55 (1993), pp. 45–57.
Frick, M. and M. A. Henning, Extremal results on defective colorings of graphs, Discrete Mathematics
126 (1994), pp. 151–158.
Gudmundsson, B. A., T. K. Magnusson and B. O. Saemundsson, Bounds and ﬁxed-parameter algorithms for weighted improper coloring (extended version) (2015).
Harary, F. and K. Jones, Conditional colorability ii: Bipartite variations, Congressus Numerantium 50
(1985), pp. 205–218.
Hayes, B., Computing science: The easiest hard problem, American Scientist (2002), pp. 113–117.
Hoefer, M., T. Kesselheim and B. Vöcking, Approximation algorithms for secondary spectrum auctions, ACM Transactions on Internet Technology (TOIT) 14 (2014), p. 16.
Kang, R. J. and C. McDiarmid, The t-improper chromatic number of random graphs, Combinatorics, Probability and Computing 19 (2010), pp. 87–98.
Kang, R. J., T. Müller and J.-S. Sereni, Improper colouring of (random) unit disk graphs, Discrete Mathematics 308 (2008), pp. 1438 – 1454, third European Conference on Combinatorics Graph Theory and Applications Third European Conference on Combinatorics.
Kolman, P., B. Lidicky` and J.-S. Sereni, Fair edge deletion problems on tree-decomposable graphs and improper colorings, Manuscript. Available from http://orion. math. iastate. edu/lidicky/pub/kls10. pdf (2010).
Lovász, L., On decomposition of graphs, Studia Scientiarum Mathematicarum Hungarica 1 (1966),
pp. 237–238.
Rao, M., MSOL partitioning problems on graphs of bounded treewidth and clique-width, Theoretical Computer Science 377 (2007), pp. 260–267.
Tamura, H., M. Sengoku, S. Shinoda and T. Abe, Channel assignment problem in a cellular mobile system and a new coloring problem of networks, IEICE Transactions on Fundamentals of Electronics, Communications and Computer Sciences 74 (1991), pp. 2983–2989.
