Electronic Notes in Theoretical Computer Science 40 (2001)
URL: http://www.elsevier.nl/locate/entcs/volume40.html 16 pages


A graphical approach to monad compositions

P. Eklund a M.A. Gal´an a,1 J. Medina b M. Ojeda-Aciego b
A. Valverde b
a Ume˚a University, Department of Computing Science, SE-901 87 Ume˚a, Sweden
b Universidad de Ma´laga, Dept Matem´atica Aplicada, E-29071 Ma´laga, Spain 2


Abstract
In this paper we show how composite expressions involving natural transformations can be pictorially represented in order to provide graphical proof support for pro- viding monad compositions. Examples are drawn using powerset monads composed with the term monad.


Introduction
Monads have shown to be useful in different fields related to computer science. In functional programming monad compositions are applied to structuring of functional programs [11]. In particular, in functional programs like parsers or type checkers the monad needed is often a composed monad [13]. In logic programming, unification has been identified as the provision of co-equalisers in Kleisli categories of term monads [12].
The foundational understanding of monads has been well-known for decades, but proof techniques, especially related to monad compositions have not been developed.	As monad compositions are basically built upon operations of corresponding natural transformations, proof techniques require an adequate handling of the basic combinatorial properties of functors and natural trans- formations (Godement rules). In [4,7] it was discovered that these combinato- rial properties can be represented more visually, in that the basic observation relates to distributivity of the star product of natural transformations with respect to composition of natural transformations.
This improves readability of expressions involving compositions of natural transformations and supports proofs involving more complex properties. This visual technique is not widely known and has been used mainly in purely algebraic contexts [1].

1 Supported by the Swedish Research Council for Engineering Sciences.
2 Partially supported by Spanish DGI project BFM2000-1054-C02-02
◯c 2001 Published by Elsevier Science B. V. Open access under CC BY-NC-ND license.


The aim of this paper is to further develop these ideas about graphical representation, and to demonstrate the use of this technique on a case study for providing some concrete examples on generalised terms where various set functors are composed with the conventional term functor [6,5].
The structure of the paper is the following: in Section 2, the basic defi- nitions and notation of the graphical approach are given. In Section 3, some conditions for extending the composition of monads to a monad are presented and proved using the graphical approach. As an example, in Section 4 we introduce the problem of generalising sets of terms as the composition of suit- able powerset monads and the term monads, which raise our interest in the problem of composing monads and in a visual interface to make the corre- sponding calculations. Some conclusions are presented in Section 5. Finally, an appendix is introduced containing a standard proof of Proposition 3.2, just to see how the properties of natural transformations are more naturally han- dled in the graphical approach, so that one can abstract them from the main line of reasoning.

Notations and pictorial representations
The notational conventions followed in this paper are those presented in [2]. Let C be a category and consider (covariant) endofunctors, denoted with capi- tal letters F, G, H,... : C → C, together with natural transformations, denoted with greek letters τ, σ,.. ., between such endofunctors. For τ : F → G and σ: G → H, let σ ◦ τ : F → H be the usual vertical composition of natural transformations, and for τ ': F ' → G', let τ ' * τ : F ' ◦ F → G' ◦ G be the star product given by
τ ' *τ = τ 'G ◦ F 'τ = G'τ ◦ τ 'F.
The star product, like composition, is associative.
For the identity transformation idF : F → F , also written as 1F or 1, note that
1F * 1G = 1F◦G.
For a natural transformation τ : F → G, and a functor H, (Hτ )X = HτX and (τH)X = τHX, or equivalently, Hτ = 1H *τ and τH = τ * 1H . The following distributivity laws hold:
1 * (σ ◦ τ )= (1 * σ) ◦ (1 * τ ),
(σ ◦ τ ) * 1= (σ * 1) ◦ (τ * 1).
A natural transformation τ : F → G as a basic building block is depicted as
F
.

Blocks τ : F → G and σ: G → H are built, or composed, vertically as

F	F

=	.


For τ : F → G and τ ': F ' → G', the horizontal composition of τ ' followed by τ , denoted by the star product τ ' *τ is visually denoted by the juxtaposition of two building blocks.

F '	F
=
F '	F
.


Note in particular that the juxtaposition order reflects the syntactic order of τ ' * τ . As an application of the previous construction, note that equation
(1) can be pictorially represented by


F '	F
F '	F

=	=
F '	F

.




Equation (3) can be written as
K	F	K	F

=	,


i.e., in this case building blocks can be applied in any order. The same holds for equation (4).

For natural transformations F →τ
G →σ
H and
' τ'
' σ'
' we then

F  → G → H
have





F '	F








(1)
=
F '	F








(3)
=

F '	F
















(1)
=
F '	F






(4)
=

F '	F






(1)
=


F '	F
,





i.e., we have (re)proved the Interchange Law

(σ' ◦ τ ') * (σ ◦ τ )= (σ' * σ) ◦ (τ ' * τ )

which can be summarized as


F '	F

=
F '	F

=
F '	F





showing how blocks with particular positions generally can be attached ver- tically and horizontally in any order without changing the resulting transfor- mation.
Note in the transformation

F	F	F

that the composition (σ* τ ) ◦ (τ * σ) indeed exists, but neither τ ◦ σ nor σ ◦ τ do. This indicates how the applicability of the Interchange Law is more easily seen in the pictorial representation of the transformation.
In order to further improve readability of transformation expressions, iden- tity transformations 1F : F −→ F as blocks within transformation expressions are depicted as
F
or	or
	F			F	
This choice for the representation of identity transformations will allow the use of asymmetric stacking of boxes.
Monad compositions
A monad (or triple, or algebraic theory) over C is written as F = (F, η, µ), where F : C → C is a (covariant) functor, and η: idC → F and µ: F ◦ F → F are natural transformations such that
µ ◦ (η * 1F )= 1F ,
µ ◦ (1F * η)= 1F ,
µ ◦ (1F * µ)= µ ◦ (µ* 1F ).
We say that η is respectively a left and right unit, and that the multiplication µ is associative. These monad conditions, with the identity functor idC: C → C written as 1, can be depicted as


1	F	F
F	1	F
F	F	F	F	F	F



=	,
=	,
=	.



The following proposition appears in [5]. Similar results concerning com- posability of monads appeared in [4,6,9], and originally also in [3].
Proposition 3.1 Let F = (F, ηF , µF ) and G = (G, ηG, µG) be monads. Let σ: G ◦ F → F ◦ G, called a ‘swapper’, be a natural transformation such that the following properties hold:






1	F
F	1
=













G	1






1	G
=












G	F	G	F




=
G	F	G	F








Then F • G = (F ◦ G, ηFG, µFG) is a monad, where

ηFG = ηF * ηG,
µFG = (µF * µG) ◦ (1F *σ * 1G).


Proof. The following proof demonstrates the use of our pictorial representa- tions.
Firstly, we show that ηFG is a left unit.




1	F	G






(12),(13)
=
1	1	F	G












(9)
=
1	F	1	G




(6)
=

F	G
(2)
=

FG 
.




Note how the ‘highlighting’ of subexpressions is due to the Interchange Law. The right unit property is shown similarly.
Secondly, we show that µFG is associative.




F	G	F	G	F	G








(13)
=
F	G	F	G	F	G













(1)
=











(1)
=
F	G	F	G	F	G
F	G	F	G	F	G

F	G	F	G	F	G










(5)
=











(5)
=
F	G	F	G	F	G

F	G	F	G	F	G
F	G	F	G	F	G








(8)
=
(5)
=

F	G	F	G	F	G



F	G	F	G	F	G


(11)
=
re=vert 3	✷








A converse result can be partially achieved under some additional assump- tions on the behaviour of the multiplication of the composite monad w.r.t. ei- ther the multiplications or the units of the base monads.
Proposition 3.2 If F • G = (F ◦ G, ηF * ηG, µ) is a monad, then a natural transformation σµ: G ◦ F → F ◦ G can be deﬁned by
σµ = µ ◦ (ηF * 1GF * ηG)
such that conditions (9) and (10) are satisﬁed. In addition, condition (11) holds and µ = µFG, with µFG related to σµ given by (13), under the assumption that at least one of the conditions











F	F	G	F	G

=



F	1	G	F	G

=
F	F	G	F	G



1	F	G	F	G




hold together with at least one of the conditions

3 Simply apply the same steps in reverse ordering.













F	G	F	G	G

=




F	G	F	1	G

=
F	G	F	G	G





F	G	F	G	1






Proof. Condition (9) follows from



1	F

(14)
=
1	1	F	1


=
1	F	1










(6)
=
F	1

(2)
=

F	1
,




and condition (10) can be shown similarly.
Now, required combinations of conditions (15)-(18) imply condition (11), as shown by

1	G	F	1	G	F	1


G	F	G	F








(14)
=








1	G	F	1	G	F	1


1	G	F	G	F	1



(16),(17)
=
(6)
=

G	F	G	F
1	G	F	G	F	1



(8)
=
re=vert	.






This provides a proof sketch. Other combinations of conditions can easily be applied in a similar way, also likewise in order to prove µ = µFG.	✷

4	Examples of monad compositions
In this section we refer to some examples of monads and swappers that provide monad compositions. This example is interesting in that sufficient conditions for a composition of monads to be a monad were obtained using the graphical approach introduced above, and it illustrates how the complexity of checking monad conditions can be reduced to checking only a few sufficient conditions. Let L be a completely distributive lattice. For L = {0, 1}, write L = 2.
The covariant powerset functor Lid is obtained by LidX = LX, i.e., the set of
mappings A: X → L, and following [8], for a morphism f : X → Y in Set, by defining

Lidf (A)(y)=	 
f (x)=y
A(x).

Further, define η:1 → Lid by
ηX

(x)(x')=	1	if x = x'
0	otherwise

and µ: Lid ◦ Lid → Lid by
µX(M)(x)=	 
A∈LidX

A(x) ∧ M(A).

Then, Lid = (Lid, η, µ) is a monad [10], and 2id is the usual covariant powerset monad P = (P, η, µ), where PX is the set of subsets of X, ηX(x)= {x} and µX(B)=  B.
These powerset monads are suitably composed with the term monad TΩ = (TΩ, ηTΩ , µTΩ ) [10], where TΩX is the usual set of terms over an operator
domain Ω and variables in X, i.e., TΩX =  ∞  Tk(X), where T 0(X) = X
and Tk+1(X) = {(n, ω, (mi)i≤n) | ω ∈ Ωn,n ∈ N, mi ∈ Tk(X)}.	In [6],
Ω	Ω
a swapper σ: TΩ ◦ Lid → Lid ◦ TΩ was given by σX|T 0LX = (1Lid )X and for

l = (n, ω, (li)i≤n) ∈ TαLX, α > 0, li ∈ Tβi LX, βi < α, by
  i≤n σX(li)(mi)	if n = n' and ω = ω',

σX(l)((n', ω', (mi)i≤n)) =
 0	otherwise,

and it was shown that Lid and TΩ together with σ satisfy conditions in Propo- sitions 3.1 and 3.2.
5	Conclusions
The impact of the paper is two-fold. On one hand, we contribute to meth- ods and tools for generating monad compositions. In particular, we focus on composing various powerset monads with the term monad in order to pro- vide generalised terms for extended many-valued logic programming. On the other hand, we provide a categorical instrumentation for unification in the framework of using generalised terms.
We have shown how compositions and star products of natural transfor- mations can be pictorially represented in order to provide proof support. Han- dling conditions for monad compositions involve manipulations of rather com- plicated expressions involving natural transformations, and it is important to continue investigations on how to construct new monads from given ones.
Proving composability conditions is complicated as the complexity of the functors increase. The graphical support is beneficial in that composability proofs are expected to reveal further examples of monad compositions that provide useful scenarios for generalised terms. Not only is the graphical ap- proach a theoretical tool for a better understanding of the composition of natural transformations, but computing with natural transformations could be, to some extent, automatised and managed with such a graphical interface.

References
Barja P´erez, J., Personal communication, april, 2000.
Barr, M. and C. Wells, “Category Theory for Computing Science,” Prentice Hall, 1990.
Beck, J., Distributive laws, in: Seminar on Triples and Categorical Homology Theory, number 80 in Lecture Notes in Mathematics, Springer-Verlag, 1969 pp. 119–130.
Caruncho Castro, J., Triples theory, Technical Report 5, Department of Algebra of the Univ. de Santiago de Compostela (1971), in Spanish.
Eklund, P., M. A. Gala´n, J. Medina, M. Ojeda-Aciego and A. Valverde, Generalised terms and composition of monads, in: Proc. of ESTYLF 2000, Spanish Congress on Fuzzy Logic and Technology, 2000, pp. 155–160.


Eklund, P., M. A. Gala´n, M. Ojeda-Aciego and A. Valverde, Set functors and generalised terms, in: Proc. of IPMU 2000, Information Processing and Management of Uncertainty in Knowledge-based Systems vol. III, 2000, pp. 1595–1599.

Freire Nistal, J., Universal properties in higher order triples, Technical Report 11, Department of Algebra of the Univ. de Santiago de Compostela (1971), in Spanish.

Goguen, J., L-fuzzy sets, J. Math. Anal. Appl. 18 (1967), pp. 145–174.

Jones, M. P. and L. Duponcheel, Composing monads, YALEU/DCS/RR-1004 Tech. Rep., Yale University (1993), available at the following web address http://www.cse.ogi.edu/ mpj/pubs/composing.html.

Manes, E., “Algebraic Theories,” Springer-Verlag, 1976.

Moggi, E., Notions of computation and monads, Information and Computation
93 (1991), pp. 55–92.

Rydeheard, D. and R. Burstall, A categorical uniﬁcation algorithm, in: Proc. Category Theory and Computer Programming (1986), pp. 493–505.

Wadler, P., Comprehending monads, Mathematical Structures in Computer Science 2 (1992), pp. 461–493.

6	Appendix: A standard proof of Proposition 3.2
For comparison purposes, we present here a standard proof of the result stated in Proposition 3.2. Firstly, the statement in rephrased in more conventional terms; then, the proof itself is given.
Proposition 3.2 If F • G = (F ◦ G, ηF G ◦ ηG, µ) is a monad, then a natural transformation σµ: G ◦ F → F ◦ G can be deﬁned by σµ = µ ◦ F GF ηG ◦ ηF GF such that conditions (9) and (10) are satisﬁed. In addition, condition (11) holds and µ = µ(σµ) under the assumption of any pair of properties (Ai, Bj) with i, j ∈ {1, 2}, where
(A1) µF G ◦ Fµ = µ ◦ µF GF G
(A2) Fµ ◦ FηF GF G = Fµ ◦ ηF F GFG 
(B1) FµG ◦ µG = µ ◦ F GF µG
(B2) µG ◦ F GF ηGG = µG ◦ F GF GηG
Proof.
Condition (9) follows from the fact that the unit transformation of the

composed monad is the composition of the units of F and G.
σµ ◦ ηGF = µ ◦ F GF ηG ◦ ηF GF ◦ ηGF
= µ ◦ F GF ηG ◦ ηFGF
= µ ◦ ηFGFG ◦ FηG
= idFG ◦ FηG
= FηG.
and condition (10) can be shown similarly.
Unfolding the definition of σµ, the left hand side (LHS) of equation (11) can be written as
µF G ◦ Fµ ◦ FηF GF G ◦ F GF ηG ◦ FµGF ◦ µGF ◦ F GF ηGGF ◦ ηF GF GF
and the right hand side (RHS) as
F µG ◦ µG ◦ F GF ηGG ◦ ηF GF G ◦ GµF G ◦ GF µ ◦ GF ηF GF G ◦ GF GF ηG
Assume, for instance, the properties (A2, B1).
For the LHS of equation (11) we have
µF G ◦ Fµ ◦ FηF GF G ◦ F GF ηG ◦ FµGF ◦ µGF ◦ F GF ηGGF ◦ ηF GF GF A2,B1
µF G ◦ Fµ ◦ ηF F GFG ◦ F GF ηG ◦ µF ◦ F GF µGF ◦ F GF ηGGF ◦ ηF GF GF =
= µ ◦ µF GF G ◦ ηF F GFG ◦ F GF ηG ◦ µF ◦ ηF GF GF
= µ ◦ F GF ηG ◦ µF ◦ ηF GF GF.
For the RHS we have
F µG ◦ µG ◦ F GF ηGG ◦ ηF GF G ◦ GµF G ◦ GF µ ◦ GF ηF GF G ◦ GF GF ηG B1,A2
µ ◦ F GF µG ◦ F GF ηGG ◦ ηF GF G ◦ GµF G ◦ GF µ ◦ GηF F GFG ◦ GF GF ηG
= µ ◦ ηF GF G ◦ Gµ ◦ GµF GF G ◦ GηF F GFG ◦ GF GF ηG
= µ ◦ ηF GF G ◦ Gµ ◦ GF GF ηG.

Note that, in fact, assuming any of the combinations (Ai, Bj), it can be proved that the LHS of equation (11) is equivalent to
µ ◦ F GF ηG ◦ µF ◦ ηF GF GF
whereas the RHS is equivalent to
µ ◦ ηF GF G ◦ Gµ ◦ GF GF ηG


The equivalence of the two previous equations follows directly from the graphical representation, although at the level of equational representation it cannot be easily observed. The proof follows as a consequence of the properties of natural transformations, as shown below:
µ ◦ F GF ηG ◦ µF ◦ ηF GF GF = µ ◦ µFG ◦ F GF GF ηG ◦ ηF GF GF
= µ ◦ F Gµ ◦ ηF GF GF G ◦ GF GF ηG
= µ ◦ ηF GF G ◦ Gµ ◦ GF GF ηG.

✷
