

Electronic Notes in Theoretical Computer Science 218 (2008) 33–51
www.elsevier.com/locate/entcs

HYPE Applied to the Modelling of Hybrid Biological Systems
Vashti Galpin1,4
LFCS, School of Informatics University of Edinburgh, Scotland
Jane Hillston2,5,6
CSBE and School of Informatics University of Edinburgh, Scotland
Luca Bortolussi3,7
Department of Maths and Computer Science, University of Trieste Center for Biomolecular Medicine, Area Science Park, Trieste, Italy

Abstract
HYPE is a process algebra developed to model hybrid systems – systems that show both continuous and discrete behaviour. It is novel because it allows for the modelling of individual flows which means that subcomponents can be modelled in terms of these flows and do not need to be described monolithically. Biological systems display discrete behaviour inherently, but modellers may choose to model systems in a hybrid fashion, often to deal with differences in scale. We demonstrate how HYPE can be used to model the Repressilator.
Keywords: systems biology, hybrid systems, process algebra

Introduction
Systems biology has provided a productive field of endeavour for theoretical com- puter science research, both in the area of algorithms and modelling. Stochastic

1 Email: Vashti.Galpin@ed.ac.uk
2 Email: Jane.Hillston@ed.ac.uk
3 Email: luca@dmi.units.it
4 Supported by the EPSRC SIGNAL Project, Grant EP/E031439/1
5 The Centre for Systems Biology at Edinburgh is a Centre for Integrative Systems Biology (CISB) funded by the BBSRC and EPSRC in 2006
6 Supported by the EPSRC under ARF EP/c543696/01
7 Supported by PRIN “Sistemi e calcoli di ispirazione biologica e loro applicazioni” and FIRB LIBi

1571-0661 © 2008 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2008.10.004

process algebras such as PEPA [13,6,7] and the stochastic π-calculus [15,17] have been applied successfully to the modelling of biological systems resulting in both stochastic models and deterministic continuous models based on ODEs, and many other process algebra approaches have been developed [3,9,16,18]. One advantage of a process algebra approach is a compositional language which allows for the con- struction of models of systems by the composition of models of smaller components, which avoids the need to start from a monolithic view of the system. Another ad- vantage is the provision of various ways in which to analyse the system once it has been constructed.
Biological systems are inherently discrete and stochastic in behaviour. Due to the difficulty of modelling systems in this manner, continuous deterministic approx- imations are frequently used. A third approach is to model these systems as having hybrid behaviour. Hybrid behaviour contains both discrete elements and continu- ous elements. In the case of gene activation, a single gene is either on or off and hence it is difficult to model this as a continuous value that varies between zero and one. Meanwhile, in the same system other species may exist in such abundance as to make discrete modelling impracticable. Therefore, taking a hybrid approach allows the gene status to be modelled as a discrete component of the system and for other species to be modelled continuously.
Other aspects of a system can also be modelled as discrete. For example, a system where continuous behaviour can be viewed as changing after a threshold concentration of a specific reagent has been reached, can be modelled as having two distinct modes of operation, one where the concentration is below the threshold and one where it is over the threshold. For each mode, appropriate ordinary differential equations (ODEs) describing the continuous behaviour can be defined. In the case that one reagent has a significantly lower concentration than the other reagents then the results of an ODE model may not be reliable. Taking a hybrid approach, this reagent can be modelled in a discrete fashion (in terms of molecules or in terms of present versus absent ). Behaviour described by sigmoidal curves is common in biology and this can simulated by a hybrid system with modes that give piecewise constant and piecewise linear continuous behaviour [14].
HYPE is a process algebra for modelling hybrid systems. It is novel because unlike other process algebras for hybrid systems [2,8,19,21] it does not require a monolithic view of subsystems. This means that the continuous behaviour of a sub- system does not need to be understood in advance of the modelling process. HYPE achieves this by allowing the modelling of flows, which can be seen as influences on continuous variables. In systems biology, this involves identifying the different bio- logical processes that lead to changes in the concentration of a species. For example, the following are usually considered: production, degradation, transformation and transportation. Using HYPE these can be modelled as separate subcomponents which are then composed to obtain the whole system.
In HYPE, a transition system of a model is determined by the operational se- mantics of the process algebra terms. In this transition system, each node is a pair or configuration consisting of a process term and a state. A state maps influence

names to influence strengths and influence types (unlike the typical notion of state which maps variables names to values) and records what influences are in effect in that state. A configuration identifies a mode, and the state of that configura- tion is used to obtain the ordinary differential equations that apply in that mode. There are three levels of semantics: the operational semantics which describe the behaviour of the system in terms of discrete events where information about con- tinuous behaviour is recorded in the configurations, the hybrid semantics which use the recorded behaviour to obtain the ODEs, and finally equivalence semantics which describe notions of similar behaviour. A bisimulation equivalence has been defined and it has been shown that bisimilar systems have the same ODEs [11]. It is also possible to map the transition system and ODEs to a hybrid automata. Hence, this process algebra provides a useful modelling front-end to an existing formalism with numerous tools. HYPE is also important because it could be the basis of a first-pass modelling tool where different flows could be described directly by biologists. Cur- rently modelling is a bottleneck with respect to the amounts of data now available and a formalism that can speed up the process of modelling would be advantageous.
The usefulness of this process algebra for hybrid modelling will be shown through an example. The Repressilator is a well-known synthetic genetic regulatory network [10]. It consists of three genes tetR, cI and lacI. Each gene expresses a protein that affects the expression of one of the other genes. The protein from tetR represses the expression of cI, the protein from cI represses the expression of lacI and the protein from lacI represses the expression of tetR. This forms a negative feedback loop and demonstrates oscillatory behaviour. We will express this network in HYPE and show various analyses.
The next section introduces the process algebra HYPE together with its opera- tional and hybrid semantics. After that the Repressilator is modelled in HYPE and its analysis is given. Finally, we discuss related work in hybrid biological systems modelling and we finish with a discussion of topics for future work.


HYPE definition
This section will present HYPE by way of a simple running example of a gene and the protein it produces to illustrate the necessary concepts. This gene has a negative feedback cycle. Once a certain amount of protein is produced, the gene switches off, the protein production stops and the protein concentration drops as a result of the stopping of production. Once it has dropped sufficiently, the gene switches back on and protein production resumes until it reaches the threshold.
The modelling spirit of HYPE focusses on flows. In our example, we can identify two flows affecting the concentration of a protein. There is one for the production of the protein and one for the degradation of the protein. The strength and form of a flow can be modified by events. So the production activity depends on whether the gene, called Gene A, is switched on or off. In HYPE, we model the production of Protein A by the following subcomponent.




P prod

d=ef
init : (p
,k , const ).P prod + express
: (p
,k , const ).P prod+

A	A	p	A
A	A	p	A

prod
inhibitA : (pA, 0, const ).P

This is a summation of prefixed actions. Each prefix consists of two actions. Events (a ∈ E ) are actions which happen instantaneously and trigger discrete changes. They can be caused by a controller or happen randomly and can de- pend on the global state of the system, specifically values of variables. For Protein A, the events are init, the initialisation event; expressA, the switching on of the expression of Gene A when the protein concentration goes below the threshold and on1, the switching off of the expression of Gene A when the protein concentration goes over the threshold.
Activities (α ∈ A) are influences on the evolution of the continuous part of the system and are used to define flows. An activity is defined as a triple and can be
parameterised by a set of variables, α(−→) = (ι, r, I (−→)). This triple consists of an
influence name ι, a rate of change (or influence strength) r and an influence type
X ) which describes how that rate is to be applied to the variables involved, or the actual form of the flow 1 . In P prod, there are two distinct activities, (pA, kp, const ) and (pA, 0, const ). The first one captures the effect of the gene being switched on
and protein being produced. It affects influence pA which represents the influence of protein production on the concentration of the protein, it has strength kp and it is associated with the function called const . The second gives the effect of the gene being switched off and no protein being produced: the influence name is again pA, 0 is the strength of the protein production since none is being produced, and the form it takes is const . We assume that in the initial state, protein is being produced, hence the activity after init is the same as that after expressA.
Notice that no actual function has been specified for const . The interpretation of influence types will be specified separately, so that experimentation with different functional forms of the protein flow can occur without modifying the protein sub- component. Hence, in HYPE we separate the description of the logical structure of flows from their mathematical interpretation.
We also require a subcomponent to represent the degradation of the protein.
Pdegr(X) d=ef init : (d , −k , linear (X)).Pdegr(X)
A	A	d	A
The only event in this definition is the initialisation event, as degradation is an ongoing process. The influence is named dA and its strength is −kd. The influence type linear (X) will be interpreted as a linear function of its formal variable X. This subcomponent must be parameterised by a variable since degradation is affected by how much of the degrading substance is available.
These two subcomponents are composed and cooperate on their only shared

1	−→	−→
For convenience, we will use I for I (X ) when X can be inferred.

event init. The formal variable X can be instantiated with the actual variable A to give the overall model of a protein.

Pr (A) d=ef (Pdegr(A) D  P prod)
A	A	{init} A

Here  D 
L
represents parallel synchronisation.  L is the set of events for which

synchronisation must occur. Events not in L can occur independently. The way in which HYPE subcomponents are defined means that they are responsive to any event. However, we may wish to order the events in our models. The component ConA does this by requiring that expressA and inhibitA events alternate.

ConA = inhibitA.expressA.ConA
In the modelling of computer systems, we call this a controller and we will use this terminology here. The system without a controller is called the uncontrolled system because all events are possible and no causal or temporal constraints have been imposed. Controllers only have event prefixes. The controlled system is constructed from synchronisation of the controller and the uncontrolled system and the controller must be prefixed by the initialisation event init.
For the protein , the full system is described by


P d=ef Pr 
D  init.Con
M
with	M = {init, expressA
, inhibitA}.


This has defined the structure of our protein but we require some additional def- initions to capture further details. We need to link each influence with a specific actual variable. This is done using the function iv and for the example, iv (pA) = A and iv (dA) = A. Note that an influence can only by associated with one variable, in agreement with the interpretation of influences as flows. We also need to define the two influence types and we choose const ) = 1 and linear (X)) = X. Finally, we need to capture what triggers an event, and what happens to variables imme- diately after an event. This is done by defining appropriate event conditions via the function ec. Each event condition consists of an activation condition which is a positive boolean formula containing equalities and inequalities on system variables or the symbol ⊥, and a variable reset which is a conjunction of equality predicates on variables V and V ' where V ' denotes the new value that V will have after the reset, while V denotes the previous value. Resets of the form V = V ' can be left implicit. Events are urgent – the event must occur as soon as its event condition is satisfied. For events that can happen randomly such as breakdowns, we introduce an special event condition ⊥ which means that the event can happen at some point in the future 2 . For the example, the function ec and associated event conditions are

2 We have not done so here but probabilistic resets can be used. Tuffin et al [20] use a value drawn from a exponential distribution for the time until the next event.

ec(init) = (true, (A = A0)) ec(expressA) = ((A = 5), true) ec(inhibitA) = ((A = 20, true)
The init event has an associated event condition of true and so this must happen immediately. The event expressA must happen when the concentration of A drops to 5, and inhibitA must happen as soon as the concentration reaches 20. The event
init has a reset that defines the new value of A as the initial value A0. Both expressA
and inhibitA have a reset of true meaning that no values are changed.
In the preceding informal discussion, we have introduced the main constituents of a HYPE model including the combination of flow components with a controller component, formal and actual variables, association between influences and vari- ables, conditions that specify when events occur, and definitions for the influence type functions. To understand the dynamics of this system, we need to derive ODEs to describe how the variables change over time. To do this we present operational semantics that define the behaviour of our controlled system. Before that we present the formal definition of HYPE.
Definition 2.1 A controlled system is constructed as follows.
Subcomponents are defined by Cs(X ) = S, where Cs is the subcomponent name
and S satisfies the grammar S' ::= a : α.Cs | S' + S' (a ∈ E, α ∈ A), with the free variables of S in −→.
Components are defined by C(X ) = P , where C is the component name and P
satisfies the grammar P' ::= C (−→) | C(−→) | P' D  P', with the free variables of

P in X and L ⊆ E .
X	X
L

An uncontrolled system Σ is defined according to the grammar Σ'	::=
C (−→) | C(−→) | Σ' D Σ', where L ⊆ E and −→ is a set of system variables,
V	V	V
L
instantiating the formal variables of C or Cs.
Controllers only have events: M ::= a.M | 0 | M + M with a ∈ E and Con ::=
M | Con D  Con with L ⊆ E .
L
A controlled system is ConSys ::= Σ D  init.Con where L ⊆ E .  The set of
L
controlled systems is CSys .

A controlled system together with the appropriate sets and functions give a HYPE model.
Definition 2.2 A HYPE model is a tuple (ConSys, V, X, IN , IT, E, A, ec, iv, EC , ID ) where
ConSys is a controlled system as defined above.
V is a finite set of variables and X is a finite set of formal variables.
IN is a set of influence names and IT is a set of influence types.
E is a set of events of the form a and ai.

Prefix with influence:

 a : (ι, r, I)

.E, σ

a  E, σ

[ι '→ (r, I)] 



Prefix without influence:

 a.E, σ
a  E, σ

  a	'	' 
  a	'	' 

Choice:
E, σ  −→ E ,σ 


F, σ  −→ F ,σ 



  	  
  a	'	' 

Parallel without

E, σ  −→ E ,σ 

  
 (a /∈ M )

  a	'	' 

F, σ  −→ F ,σ 
(a /∈ M )



  a	'	  a	'	' 

Parallel with
E, σ  −→


E ,τ 


F, σ −→
F ,τ  (a ∈ M, Γ defined)

  a	'	' 
  a	'	' 


Table 1
Operational semantics for HYPE
−→	−→
A is a set of activities of the form α(X ) = (ι, r, I (X )) ∈ (IN × R × IT ).
ec : E → EC maps events to event conditions.
iv : IN →V maps influence names to variable names.
EC is a set of event conditions.
ID is a collection of definitions consisting of a real-valued function for each influ- ence type I (−→)) = f (−→) where the variables in −→ are from X .
E , A, IN and IT are pairwise disjoint.
When referring to a HYPE model, a term for the controlled system will be used, such as P , and the tuple will be implied. In the case of two HYPE models P and Q without reference to the tuple, we will assume two implied tuples with identical elements except for the first elements.

Operational semantics
To define the operational semantics, a notion of state is required.
Definition 2.3 A state of the system is a function σ : IN → (R × IT ). The set of all states is S. A conﬁguration consists of a controlled system together with a state

 ConSys, σ  and the set of configurations is F .
For convenience, states may be written as a set of triples of the form (ι, r, I (−→)). This is the same form as an activity to reflect the fact that the state captures the activities that are currently in effect. The notion of state here is not a valuation of system variables but rather a collection of flows that occur in the system.
The operational semantics give a labelled transition system over configurations

(F, E, → ⊆ F × E × F ). We write F
a
−→ F
' for (F, a,F') ∈ →. In the following,

E, F ∈ CSys . The rules are given in Table 1 and are fairly standard. In Choice,
Prefix without influence, Parallel without synchronisation and Constant, states are not changed by the application of the rule. For Prefix with influence, the state needs to be updated, and for Parallel with synchronisation, the two new states in the premise of the rule need to be merged using the function Γ.
The updating function σ[ι '→ (r, I)] is defined by σ[ι '→ (r, I)](x) = (r, I) if x = ι and σ[ι '→ (r, I)](x) = σ(x) otherwise. The notation σ[u] will also be used for an update, with σ[u1 ... un] denoting σ[u1] ... [un].
The partial function Γ : S × S × S → S is defined as follows.
⎧⎪⎨τ (ι)	if σ(ι) = τ '(ι),
⎪⎩undefined	otherwise.
When synchronisation occurs, two states must be merged and the function uses the previous state and the new states to determine which values have changed and then puts these changed values into the new state. Γ will be undefined if both the second and third argument differ from the first argument, namely if the values in the new state both differ from the old state since this represents conflicting updates. The following definition will be useful.
Definition 2.4 The derivative set of a controlled system P , ds(P ) is defined as the smallest set satisfying

if
init	'	'	'	'

if ⟨P ', σ'⟩∈ ds(P ) and
'	'	a
''	''
then ⟨P '', σ''⟩∈ ds(P ).

In the protein model, there are two states. Each state captures the influences that are currently active. State σ0 reflects that the protein is being produced and degrading and σ1 reflects that the protein is degrading only.
σ0 = {dA '→ (−kd, linear (A)), pA '→ (kp, const )}
σ1 = {dA '→ (−kd, linear (A)), pA '→ (0, const )}


Hybrid semantics
We extract a set of ODEs for each state which appears in a configuration in the labelled transition system. We will label this set as CSσ where CS is the constant used for the controlled system and σ is the state.

Given a controlled system CS, and a derivative ⟨CS', σ⟩ ∈ ds(CS), the ODEs associated with the state σ are defined as follows.
CS = dV = Σ r I (−→)) iv (ι) = V and σ(ι) = (r, I (−→))} V ∈ V,

So for each state, we have a collection of ODEs, one for each variable V . When protein is being produced, we obtain the following ODE from σ0.
P	= dA = −k A + k ,
σ0	dt	d	p
Therefore, this process enables us to obtain ODEs describing how the continuous part of the system evolves, and we have different sets of ODEs to describe the differ- ent dynamics that can be in operation. We wish to combine this information with the event conditions already defined and an obvious way to do this is to translate this information into a hybrid automaton, thus allowing our modelling language to be a front-end to a well-known formalism. Hybrid automata are dynamic sys- tems presenting both discrete and continuous evolution. They consist of variables evolving continuously in time, subject to abrupt changes induced by discrete in- stantaneous control events. When discrete events happen the automaton enters its next mode, where the rules governing the flow of continuous variables change. See
[12] for further details.
Definition 2.5 A hybrid automaton is a tuple
H = (V, E, X, E, flow, init, inv, event , jump, reset , urgent ), where:
X = {X1,..., Xn} is a finite set of real-valued variables. The time derivative of
Xj is X˙j , and the value of Xj after a change of mode is X' .
the control graph G = (V, E) is a finite labelled graph. Vertices v ∈ V are the (control) modes, while edges e ∈ E are called (control) switches and model the happening of a discrete event.
Associated with each vertex v ∈ V there is a set of ordinary differential equations
X˙ = flow (v) referred to as the flow conditions. Moreover, init (v) and inv (v) are
two formulae on X specifying the admissible initial conditions and some invariant conditions that must be true during the continuous evolution of variables in v.
Edges e ∈ E of the control graph are labelled by an event event (e) ∈ E and by jump(e), a predicate on X stating for which values of variables each transition is active, and by reset (e), a predicate on X ∪ X' specifying the change of the variables’ values after the transition has taken place. Moreover, each edge e ∈ E can be declared urgent, by setting to true the boolean flag urgent (e), meaning that the transition is taken at once when jump(e) becomes true. Otherwise, the transition can be taken nondeterministically whenever jump(e) is true.
Consider a HYPE model (P0, V, X, IN , IT, E, A, ec, iv, EC , ID ) and suppose its initial configuration is ⟨P0, σ0⟩∈ F. For P0 the only possible transition is the event

init. Let ⟨P, σ⟩ be the configuration reached after its occurrence,
init	.

⟨P0, σ0⟩−→⟨P, σ⟩

Moreover, we denote by acta and resa the activation conditions and the resets associated with an event a ∈ E , so ec(a) = (acta, resa).
Definition 2.6 The hybrid automaton
H = (V, E, X, E, flow, init, inv, event , jump, reset , urgent ) can be obtained from the HYPE model (P0, V, X, IN , IT, E, A, ec, iv, EC , ID ) as follows.
The set of modes V is the set of configurations reachable in 0 or more steps from
⟨P, σ⟩, namely ds(P0).
The edges E of the control graph connect two modes (v1, v2) iff v1 = ⟨P1, σ1⟩, v2 = ⟨P2, σ2⟩ and ⟨P1, σ1⟩−→⟨P2, σ2⟩ is a derivation for some a.
X = V is the set of variables of the HYPE system.
E is the set of events E of P0.
Let vj = ⟨Pj, σj⟩, then
flow (v )[X ] = Σ{r I (−→)) | iv(ι) = X and σ (ι) = (r, I (−→))}

init (v) = ,⎨ resinit, if v = ⟨P, σ⟩
false,  otherwise
inv (v) = true.

with primes removed from variables 3 .


a

Let e = (⟨P1, σ1⟩, ⟨P2, σ2⟩) with ⟨P1, σ1⟩−→⟨P2, σ2⟩.  Then event (e) = a and reset (e) = resa. Moreover, if acta /= ⊥, then jump(e) = acta and urgent (e) = true, otherwise jump(e) = true and urgent (e) = false.
Additionally, bisimulation has defined over HYPE models and congruence has been shown [11]. Under conditions of well-definedness, it can be shown that bisimilar HYPE models P and Q have identical ODEs [11].
The Repressilator
As mentioned above, the Repressilator is a synthetic genetic regulatory network [10] with a negative feedback loop and oscillatory changes in protein concentrations. It consists of three genes tetR, cI and lacI, and these genes code for proteins that can then affect the expression of another gene negatively. We will model the network in an abstract fashion and consider three genes, namely Gene A, Gene B and Gene
C. Figure 1 illustrates the network. For Gene A, there is a mRNA transcription reaction with rate trsA which creates mRNAA and this mRNA is then translated into the protein PrA with rate trlA. Both the mRNA and the protein can degrade with rates dmA and dpA respectively. Genes B and C have similar reactions. The dashed lines indicate the inhibition of mRNA transcription by the relevant protein.
In modelling this network with HYPE, we will apply further abstraction as de- scribed in Figure 2. We abstract away from the details of transcription and trans- lation and replace this by a single abstract reaction that represents the production

3 resinit is a reset so uses primed variables to refer to the new values of variables whereas init (v) is an initialization condition and refers to variables without primes.





GeneA−−−→ mRNAA−−→ PrA

trsA
↓ dmA
trlA
↓ dpA




GeneC −−−→ mRNAC −−→ PrC

trsC
↓ dmC
trlC
↓ dpC


GeneB −−−→ mRNAB −−→ PrB

trsB
↓ dmB
trlB
↓ dpB




Fig. 1. The detailed Repressilator network with abstract names

of protein from the gene. Furthermore, we will assume that there are no differences between the different reaction rates for the different genes and use kp and kd as the reaction rates for production and degradation respectively. The dashed lines now represent the inhibition of the production of protein by another protein.
The HYPE model of a protein has been presented in Section 2 and is restated in a more general form in Figure 3.
The HYPE model of the Repressilator in Figure 4 consists of three proteins and their associated event-ordering components. Each protein has been instantiated with a variable representing the concentration of the protein. For clarity, each protein has a subscript indicating the protein whose production it inhibits. So the protein produced by Gene A is AB which shows that this protein inhibits the production by Gene B of protein BC, and similarly for the others. There is no cooperation on events apart from on the init event between proteins, and the event- ordering components for each proteins have no shared events. However, the proteins and the event-ordering components must cooperate over all events in the model.
We also need to define the other elements of the tuple for the HYPE model. The variables that measure the concentration of the three proteins make up the set V, and the two influence types are defined to be the obvious functions:  const) is 1 and  linear(X)) is X as before.  It is also necessary to associate the influence
names with variables and this is done using the function iv – dA and pA are related
to the production of the protein AB, and likewise for the other proteins. Finally, we need to give conditions for the events. For init, it must happen immediately the system starts, hence the value true. The reason for having an event init is to initialise the system, hence it sets the initial values for the proteins. For protein AB, the event inhibitA occurs when the concentration of the protein CA that inhibits its production reaches a certain concentration. Likewise the event expressA occurs






GeneA −−−−−−−−−−−−→ PrA
kp	↓ k



GeneC −−−−−−−−−−−−→ PrC
kp	↓ k

GeneB −−−−−−−−−−−−→ PrB
kp	↓ k


Fig. 2. The abstract Repressilator network

Pdegr(X) d=ef init : (d , −k , linear (X)).Pdegr(X)
x	x	d	x


P prod d=ef init : (p ,k , const ).P prod
x	x	p	x

+ inhibitx
: (px
, 0, const ).P prod

+ express
: (p ,k , const ).P prod

x	x	p	x

Pr (X) d=ef (P degr(X) D  P prod)
x	x	{init} x


Conx = inhibitx.expressx.Conx

Fig. 3. Proteins in HYPE for x ∈ {A, B, C}

when the concentration of the protein CA is sufficiently low. The remaining events are defined in a similar way. No resets of variable values occur for any of these events, except init.
Once the model is defined, the operational semantics can be used to obtain the labelled transition system of the model. Figure 5 shows part of a transition derivation when init occurs at the start of the system. The symbol ∗ is used to show an undefined value. This example shows how the function Γ is used to select
the new value of an influence. In the case of dA, τ (dA) is undefined as is τ2(dA) hence
Γ selects the value of τ1(dA) to use in the state that results after the transition.
There are eight configurations in the labelled transition system, each with a

Rep = (Pr (A ) D  Pr (B
) D  Pr (C )) D  init.(Con
Con	Con  )

B  init
C	init	C	A	L
A	B	C

L = {init, inhibitA, inhibitB, inhibitC, expressA, expressB, expressC}

V = {AB, BC, CA}
 const ) = 1	 linear (X)) = X

iv (dA) = AB	iv (pA) = AB
iv (dB) = BC	iv (pB) = BC
iv (dC) = CA	iv (pC) = CA

ec(init) = (true, (AB = A0 ∧ BC = B0 ∧ CA = C0)) ec(inhibitA) = (CA > p, T )	 ec(expressA) = (CA ≤ p, T ) ec(inhibitB ) = (AB > p, T )	ec(expressB ) = (AB ≤ p, T ) ec(inhibitC ) = (BC > p, T )	 ec(expressC ) = (BC ≤ p, T )
Fig. 4. The Repressilator in HYPE


⟨Pdegr(A  )
init
degr (A
),τ ⟩  ⟨P prod
init
prod,τ ⟩

A	B ,τ⟩ −→ ⟨PA	B	1	A	,τ⟩ −→ ⟨PA	2

⟨Pdegr (A
) D  P prod
init
degr (A
) D  P prod,τ ⟩

A	B init
A	,τ⟩ −→ ⟨PA
init
B init  A	3

⟨P rA(AB),τ⟩ −→ ⟨P rA(AB), τ3⟩

τ = {dA '→ ∗, pA '→ ∗} ∪ S
τ1 = τ [dA '→ (−kd, l(AB))] = {dA '→ (−kd, l(AB)), pA '→ ∗} ∪ S
τ2 = τ [pA '→ (kp, c)] = {dA '→ ∗, pA '→ (kp, c)}∪ S
τ3 = Γ(τ, τ1, τ2) = {dA '→ (−kd, l(AB)), pA '→ (kp, c)}∪ S S = {dB '→ ∗, pB '→ ∗, dC '→ ∗, pC '→ ∗}
Fig. 5. An example transition derivation

unique state and these states are give in Figure 6. Here, c is used as an abbreviation for const and l for linear . Each gene can be on (producing protein) or off (not producing protein). The eight states represent all possible combinations of the three genes being on or off. These states then give rise to the ODEs that are given in Figure 7. In these equations, the presence of the term kp represents the gene being on, and its absence the gene being off. Again, these sets of equations cover all possible combinations of the three genes being on or off. How do these ODEs relate to the ones proposed in the original deterministic model [10]? The original model describes explicitly both the transcription and translation phases,

σ0 = D ∪ {pA '→ (0, c), pB '→ (0, c), pC → (0, c)}
σ1 = D ∪ {pA '→ (0, c), pB '→ (0, c), pC '→ (kp, c)}
σ2 = D ∪ {pA '→ (0, c), pB '→ (kp, c), pC '→ (0, c)}
σ3 = D ∪ {pA '→ (0, c), pB '→ (kp, c), pC '→ (kp, c)}
σ4 = D ∪ {pA '→ (kp, c), pB '→ (0, c), pC '→ (0, c)}
σ5 = D ∪ {pA '→ (kp, c), pB '→ (0, c), pC '→ (kp, c)}
σ6 = D ∪ {pA '→ (kp, c), pB '→ (kp, c), pC '→ (0, c)}
σ7 = D ∪ {pA '→ (kp, c), pB '→ (kp, c), pC '→ (kp, c)}

where D = {dA '→ (−kd, l(AB)), dB '→ (−kd, l(BC)), dC '→ (−kd, l(CA))}.
Fig. 6. The states of the Repressilator


Repσ
= { dAB = −kdAB,	dBC  = −kdBC,	dCA = −kdCA}

0	dt	dt	dt

Repσ
= { dAB = −kdAB,	dBC  = −kdBC,	dCA = −kdCA + kp}

1	dt	dt	dt

Repσ
= { dAB = −kdAB,	dBC = −kdBC + kp, dCA = −kdCA}

2	dt	dt	dt

Repσ
= { dAB = −kdAB,	dBC = −kdBC + kp, dCA = −kdCA + kp}

3	dt	dt	dt

Repσ
= { dAB = −kdAB + kp, dBC = −kdBC,	dCA = −kdCA}

4	dt	dt	dt

Repσ
= { dAB = −kdAB + kp, dBC = −kdBC,	dCA = −kdCA + kp}

5	dt	dt	dt

Repσ
= { dAB = −kdAB + kp, dBC = −kdBC + kp, dCA = −kdCA}

6	dt	dt	dt

Repσ
= { dAB = −kdAB + kp, dBC = −kdBC + kp, dCA = −kdCA + kp}

7	dt	dt	dt

Fig. 7. The ODEs for the Repressilator
using two kinds of variable, one for protein concentrations (AB,BC,CB) and one for mRNA concentrations (MA,MB,MC). Translation is assumed to be proportional to mRNA concentration, while transcription is modelled using an inhibitory Hill-like kinetics with exponent 2. The transcription of protein A, for instance, has speed α/(1+C2 ). The exponent 2, in particular, assumes a cooperative effect of repressor- binding. The authors also assume a “leakiness” of translation; even in the presence of a saturating amount of the repressor, there is still production of the protein with rate α0. With degradation mechanisms for proteins and mRNA, the original model has the following equations for protein AB and mRNA MA.
dMA = −M  +	α	+ α	dAB = −βA  + βM
dt	A	1+ C2	0	dt	B	A
Our model can be seen as an approximation of this model. We have abstracted away from the intermediate step of mRNA, assuming proteins to be produced di- rectly. In addition, our production rate equals kp when the repressor is below the



























Fig. 8. The Repressilator as a hybrid automaton

critical threshold p, and equals zero for when repressor is above p. Inspecting the transcription rate in the original model [10], and setting the leakiness rate α0 to zero, we can observe how the term α/(1 + C2 ) has a sigmoid shape, approximately equal to α when the repressor is low, and to zero when the repressor is high. There- fore, by assuming an activation threshold, we are simply discretizing this sigmoidal behaviour.
As described earlier, it is possible to obtain a hybrid automata from a HYPE model by considering the operational and hybrid semantics. The hybrid automata obtained from the HYPE model of the Repressilator is given in Figure 8. Each node in the figure is labelled with the name of a set of ODEs from Figure 7. The arcs are labelled with event conditions, followed by events. The obvious abbreviations have been used for event names. The arc for the init event has no event conditions but it does have the appropriate resets. In the following, the name of the set of ODEs on a mode will be used as the name of the mode.

Analysis
Given a set of starting values, as well as parameter values for kp, kd and p, we can draw a graph of how the concentration of each protein changes over time. The graph in Figure 9 has kp = 1, kd = 0.01, p = 1, and initial values A0 = 95, B0 = 5 and C0 = 0, and is similar to the graphs in [3] and [5]. A second graph is given in Figure 10 using the parameters kp = 150, kd = 0.07, p = 100, A0 = 1500, B0 = 500 and C0 = 0 and is similar in amplitude and period to the graph presented in the original paper [10]. Both graphs show the oscillations we expect.
The behaviour shown is deterministic after the first two mode changes. The system starts in mode Repσ7 and immediately follows a two-edge path to mode


120




100




80




60




40




20




0
0	1000	2000	3000	4000	5000



Fig. 9. Changes in protein concentration over time for kp = 1, kd = 0.01, p = 1, A0 = 95, B0 = 5 and
C0 =0 






2000





1500





1000





500





0
0	200	400	600	800	1000



Fig. 10. Changes in protein concentration over time for kp = 150, kd = 0.07, p = 100, A0 = 1500, B0 = 500 and C0 =0 

Repσ4 representing Gene B and Gene C being off, so the concentration of proteins BC and CA are decreasing. Once the concentration of BC goes below the threshold p, Gene C can switch on and the concentration of CA starts to increase, and the system is now in mode Repσ5 . As the concentration of CA goes over the thresh- old, Gene A switches off taking the system to mode Repσ1 . Continuing in this manner, it can be seem that the deterministic and repeating path in the hybrid



		

Fig. 11. The deterministic and repeating path of the Repressilator

automata is Repσ4 , Repσ5 , Repσ1 , Repσ3 , Repσ2 , Repσ6 , Repσ4 . This is demonstrated in Figure 11.
When at least one of the initial values differs from the other two, it can be shown that the model will eventually demonstrate deterministic behaviour for those given initial values and parameters. This occurs since one of the modes in the above sequence will always be reached even if the system starts in mode Repσ7 or Repσ0 . When the initial values are identical, pathological behaviour can occur. If the systems starts in the mode Repσ7 , the protein values will increase simultaneously until they become greater than p, then nondeterministically, a path (consisting of three modes) from Repσ7 to Repσ0 will be taken with each event happening imme- diately. Then almost immediately, the values will drop to p and a nondeterministic path over three modes will be taken back to Repσ7 and this will repeat infinitely.
Since identical quantities do not occur in nature, it would be unrealistic to use them
in the model and hence the pathological case cannot occur.

Related work
As mentioned earlier, there are other process algebras that have been developed for hybrid systems: ACP srt [2], HyPA [8], Φ-calculus [19] and hybrid χ [21]. The main difference between modelling the Repressilator in HYPE versus any of these other process algebras is that in HYPE we do not need to explicitly embed the ODEs in the syntax of the model. So to model a single protein, say AB, in one of these other process algebras, the model would require the equations
dAB = −k A	and	dAB = −k A  + k

dt	d  B
dt	d  B	p

to both appear in the text of the model – this can be viewed as a monolithic approach. In contrast, with HYPE the idea is to identify possible influences on a variable of interest and construct a more fine-grained approach based on these influences, as can be seen by the use of the influences, pA and dA which both can contribute to the change in value of the variable AB. Moreover equations can be derived from the model rather than added a priori. This gives a more natural modelling technique.
Other hybrid approaches from computer science have been applied to the mod- elling of biological systems but differ significantly from our approach. An example is Alur et al [1] who used the hybrid systems language Charon to model regulatory networks. Rather than considering some aspects of the system as having discrete behaviour and some having continuous behaviour as with HYPE, they use a contin- uous deterministic ODE model of the species when the concentration is sufficiently high and a discrete stochastic model and simulation when the concentration is not high enough. Ye et al [22] model excitable cells using cycle-linear hybrid automata which are linear within a cycle but overall show non-linear behaviour. Excitable cells tend to be either in the excited state or not whereas other aspects of the model such as voltage change continuously. The piecewise linear nature of the model allows for analytical solutions.
Finally, Bortolussi and Policriti [5] discuss a hybrid system for the Repressila- tor similar to ours, mainly differing in the activation conditions for the “express” and “inhibit” events. They start from a model of Repressilator written in sCCP
[4] and obtain a hybrid automaton via a hybrid semantics defined for sCCP. Acti- vation conditions are more complicated: they are derived automatically from the stochastic program and they use clocks to fire the event at the expected time of the corresponding stochastic events. However, the behavior of their model is basically the same as the one presented here. The Repressilator has also been modelled in a non-hybrid manner using the π-calculus and stochastic simulation [3].



Conclusions and further work
We have presented a process algebra for modelling the hybrid behaviour of biological systems. The process algebra has novel features that include a fine-grained approach to modelling flows and an explicit controller, and the ability to map the model to hybrid automaton in a direct manner.
Considering further work, we wish to do more modelling of both biological and computer systems. For the Repressilator, we also to build a more concrete model that demonstrates the production and use of mRNA and “leakiness” where some mRNA is produced even though the gene appears to be switched off [10]. An important step after this would be to show equivalence between the abstract and concrete models. We also wish to develop models of actual biological systems as well as synthetic systems.

References
Alur, R., C. Belta, F. Ivanˆci´c, V. Kumar, M. Mintz, G. J. Pappas, H. Rubin and J. Schug, Hybrid modeling and simulation of biomolecular networks, in: M. D. D. Benedetto and A. L. Sangiovanni- Vincentelli, editors, Hybrid Systems: Computation and Control, 4th International Workshop (HSCC 2001), Rome, Italy, LNCS 2034 (2001), pp. 19–32.
Bergstra, J. A. and C. A. Middelburg, Process algebra for hybrid systems, Theoretical Computer Science
335 (2005), pp. 215–280.
Blossey, R., L. Cardelli and A. Phillips, A compositional approach to the stochastic dynamics of gene networks, in: C. Priami, L. Cardelli and S. Emmott, editors, Transactions on Computational Systems Biology IV, LNCS 3939 (2006), pp. 99–122.
Bortolussi, L. and A. Policriti, Modeling biological systems in concurrent constraint programming, Constraints 13 (2008), pp. 66–90.
Bortolusssi, L. and A. Policriti, Hybrid approximation of stochastic process algebras for systems biology, in: IFAC World Congress, Seoul, South Korea, 2008.
Calder, M., S. Gilmore and J. Hillston, Modelling the influence of RKIP on the ERK signalling pathway using the stochastic process algebra PEPA, in: C. Priami, A. Ing´olfsd´ottir, B. Mishra and H. R. Nielson, editors, Transactions on Computational Systems Biology VII, LNCS 4230 (2006), pp. 1–23.
Ciocchetta, F. and J. Hillston, Bio-PEPA: a framework for the modelling and analysis of biological systems, Report EDI-INF-RR-1231, School of Informatics, University of Edinburgh (2008).
URL http://www.inf.ed.ac.uk/publications/report/1231.html
Cuijpers, P. J. L. and M. A. Reniers, Hybrid process algebra, Journal of Logic and Algebraic Programming 62 (2005), pp. 191–245.
Danos, V. and C. Laneve, Formal molecular biology, Theoretical Computer Science 325 (2004), pp. 69– 110.
Elowitz, M. B. and S. Leibler, A synthetic oscillatory network of transcriptional regulators, Nature 403
(2000), pp. 335–338.
Galpin, V., L. Bortolussi and J. Hillston, HYPE: hybrid systems modelled with flows, Report EDI-INF- RR-1251, School of Informatics, University of Edinburgh (2008).
URL http://www.inf.ed.ac.uk/publications/report/1251.html
Henzinger, T. A., The theory of hybrid automata, in: LICS, 1996, pp. 278–292.
Hillston, J., “A compositional approach to performance modelling,” Cambridge University Press, 1996.
Lincoln, P. and A. Tiwari, Symbolic systems biology: hybrid modeling and analysis of biological networks, in: R. Alur and G. J. Pappas, editors, Hybrid Systems: Computation and Control, 7th International Workshop (HSCC 2004), Philadelphia, PA, USA, LNCS 2993 (2004), pp. 660–672.
Priami, C., Stochastic π-calculus, The Computer Journal 38 (1995), pp. 578–589.
Priami, C. and P. Quaglia, Beta binders for biological interactions, in: V. Danos and V. Schachter, editors, Computational Methods in Systems Biology, International Conference (CMSB 2004), Paris, France, LNCS 3082 (2004), pp. 20–33.
Priami, C., A. Regev, E. Shapiro and W. Silverman, Application of a stochastic name-passing calculus to representation and simulation of molecular processes, Information Processing Letters 80 (2001),
pp. 25–31.
Regev, A., E. Panina, W. Silverman, L. Cardelli and E. Shapiro, BioAmbients: an abstraction for biological compartments, Theoretical Computer Science 325 (2004), pp. 141–167.
Rounds, W. C. and H. Song, The Φ-calculus: A language for distributed control of reconfigurable embedded systems, in: O. Maler and A. Pnueli, editors, Hybrid Systems: Computation and Control, 6th International Workshop (HSCC 2003), Prague, Czech Republic, LNCS 2623 (2003), pp. 435–449.
Tuffin, B., D. S. Chen and K. S. Trivedi, Comparison of hybrid systems and fluid stochastic petri nets, Discrete Event Dynamic Systems: Theory and Applications 11 (2001), pp. 77–95.
van Beek, D., K. Man, M. Reniers, J. Rooda and R. Schiffelers, Syntax and consistent equation semantics of hybrid Chi, Journal of Logic and Algebraic Programming 68 (2006), pp. 129–210.
Ye, P., E. Entcheva, R. Grosu and S. A. Smolka, Efficient modeling of excitable cells using hybrid automata, in: G. Plotkin, editor, Proceedings of Computational Methods in Systems Biology (CMSB 2005), Edinburgh, Scotland, 2005, pp. 216–227.
