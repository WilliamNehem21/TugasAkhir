Available online at www.sciencedirect.com


Electronic Notes in Theoretical Computer Science 293 (2013) 17–34
www.elsevier.com/locate/entcs

Simulating Signalling Pathways With BioWayS
Davide Chiarugi 1 Moreno Falaschi2 Diana Hermith3
Dipartimento di Ingegneria dell’Informazione e Scienze Matematiche Universit`a degli Studi di Siena. Italy.
Michell Guzman4
Escuela de Ingenier´ıa de Sistemas y Computaci´on.
Universidad del Valle Cali. Colombia.
Carlos Olarte5
Departamento de Electr´onica y Ciencias de la Computaci´on.
Universidad Javeriana Cali. Colombia.

Abstract
We report on a technique for modelling biological systems based on the ntcc calculus, a model of concurrency where systems are specified by means of constraints (i.e., formulae in logic). We show that the ability of ntcc to express partial information, concurrency, non-determinism and timed behaviour makes it well- suited model and simulate biochemical reactions networks. Based on this technique, we introduce BioWayS (BIOchemical pathWAY Simulator), a software tool for the quantitative modelling and analysis of biological systems. We show the applicability of BioWayS in the context of two well-studied biological systems: the glycogen breakdown pathway and the life cycle of the human immunodeficiency virus.
Keywords: Signaling pathways, Concurrent Constraint Programming, biological systems.


Introduction
Computational biology aims at using methods and techniques from computer sci- ence to integrate the existing knowledge concerning individual genes, proteins and

1 Email: chiarugi3@unisi.it
2 Email: moreno.falaschi@unisi.it
3 Email: diana.hermith@unisi.it
4 Email: michell.guzman@correounivalle.edu.co
5 Email: carlosolarte@javerianacali.edu.co

1571-0661 © 2013 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2013.02.016

molecules and to investigate the behaviour and relationships among the various el- ements composing a biological system. A technique widely used in computational biology consists in the construction of executable models (EMs) [15] describing the studied systems as computer programs. EMs are typically specified through formal languages based either on process algebras (e.g. [10,12,11,25,3]) or other formalisms such as logic [9] or rewriting logic [14], constraint programming [21,13] or Petri nets [6]. These models can be used for analyzing either static, qualitative properties of biological systems [7] or their quantitative, dynamical behaviour. In the latter case, for taking into account dynamical aspects, the evolution of the model is driven by algorithms that, given the state of the system at one initial time t0, allows to compute the state of the system at a subsequent time t. Depending on the chosen algorithm the model results to be stochastic or deterministic.
Recently there has been a significant interest in (executable) discrete stochastic (DS) models of biological systems, mainly because experimental data are provid- ing evidences that stochasticity arising at the molecular level plays an important role in determining the overall behaviour of living organisms [30]. In DS models the evolution of the system is driven by a stochastic algorithm which computes the probability of state transitions according to given probability density functions (PDFs). Biochemical reactions are often modelled through DS approaches, typi- cally by describing the reaction system in hand as a discrete-state continuous-time Markov process (DCMP) (see e.g. [4]). Gillespie’s Stochastic Simulation Algorithm (SSA) [17], based on previous proposals (e.g. [4]), is the most widespread algo- rithm used for implementing DS simulations of biological systems. Gillespie’s SSA requires that some hypotheses are satisfied, namely solutions are well stirred and in thermal equilibrium and, more importantly, it holds only for elementary chemical reactions i.e., those reactions occurring in one reactive event. Even though it has been shown that the SSA can work besides the prescribed scope of applicability as proved by the success of various stochastic models against experimental data, it is difficult to describe biochemical systems in terms of elementary reactions: often there is an incomplete knowledge of the full set of elementary reactions and meso- scopic or macroscopic transformations are the only observable ones. Most commonly this problem is circumvented abstracting away the unobservable elementary steps, lumping them in a single reaction event modelled as a single “Markov jump” with the waiting time τ sampled from a negative exponential distribution depending on an overall rate constant. However, abstractions usually introduce approximations in the behaviour of the models. The impact of these approximations is not easy to evaluate or estimate, as noticed by Gillespie in [31] for enzymatically catalyzed reactions. One crucial point in this abstraction approach concerns the modelling of the waiting time, i.e. the time needed for a reaction to occur: even though the elementary reactions underlying a given biochemical process can be modelled as a DCMP (and, thus, with waiting times distributed according to a negative exponen- tial PDF) on a mesoscopic or macroscopic scale the process may exhibit different dynamics such as non-Markovian behaviours, as pointed out also in [26] and [10] and shown by various experimental evidence, e.g. [24]. These arguments suggest the

need of proposing modelling approaches embedding a more general notion of tran- sition time allowing to describe the observed time courses of biological phenomena without assuming a memoryless process. Various approaches have been proposed for addressing this issue. In [6] an extension for Petri Nets is proposed, while in [26] the Beta Workbench toolkit is enhanced allowing the sampling of transition times from non-exponential PDFs. BioPEPAd [10] allows to add deterministic delays to the duration of a reaction. The work mentioned above propose different approaches in modelling reaction’s waiting times t. In [26] and [6], similarly to the Gillespie’s SSA, t represents the time needed for the event reaction to be enabled, i.e. the time needed for the reactants to collide effectively and react. In these cases, the effects of the reactions (i.e. the formation of the products) are considered instantaneous. Conversely, in [10] the enabling and the completion of the reactions are rendered as two separated events and products formation is not instantaneous. As it will be de- tailed in Sections 2 and 3 we consider t as the interval between two reactive events,
i.e. the time separating two subsequent events of product formation. In this way we
abstract the difference between the enabling and the effects of a reaction without subsuming whether product formation is instantaneous or not. This choice allow us to model more faithfully experimental evidences. Indeed in (bio)chemistry and biol- ogy the kinetics of reactions are measured observing product formation during time,
i.e. ”counting” the amount of molecules produced in given time intervals. Usually these experiments do not provide information about which part of the time needed for a reaction to occur is spent for the enabling or completion phase. Thus, focusing on a more abstract notion of waiting time, we aim at preventing the insertion of artifacts in modelling reaction dynamics.
In this paper we propose an approach based on the ntcc calculus [28], a tem- poral extension of Concurrent Constraint Programming (CCP) [32], designed for specifying and verifying timed and reactive systems. In particular we report on BioWayS (BIOchemical pathWAY Simulator), a PHP based application designed for specifying and executing ntcc models of biological systems. Other authors (see e.g. [8]) used (extensions of) CCP for modelling biological systems. Anyway, up to our knowledge, only a few of them (see e.g., [2,20]) focus on timed extensions of CCP such as the ntcc calculus. In [2] the methods for describing living systems through ntcc are presented at the theoretical level. In [20] the ntcc approach is applied for specifying biological phenomena. This work integrates these propos- als in three directions: (1) providing a systematic discussion of the features of the ntcc-based modelling approach for biology; (2) presenting a ntcc-based working software; (3) modelling and analyzing two complex biological scenarios, namely, the glucagon-induced glycogen breakdown and the life cycle of the human immunodefi- ciency virus (HIV).
As we shall show, ntcc offers several advantages in the modelling of biochemical reaction systems: (1) the timed nature of the calculus allow us to faithfully model temporal information about interactions, information about the temporal occurrence of an event (e.g., when a binding occurs), and information about the relative ve- locities of reactions (e.g., the duration of an interaction) thus allowing to take into

account non-markovian dynamics. (2) Constraints in ntcc provide a compact rep- resentation of the state of the system, (e.g., the concentration of the components along the time). (3) ntcc models can be seen as executable: ntcc processes can be straightforwardly executed and the evolution of the system can be observed. Finally, (4) the ntcc calculus is equipped with an underlying temporal logic that allows to formally specify and verify properties of the model. Notice that, with respect to the process algebra-based approaches, CCP allows an explicit notion of states based on constraints as well as an explicit notion of time. Summing up, the contribution of this paper is twofold: on the one hand we present both a systematic discussion of the main features that makes ntcc suitable for modelling biological systems and; the software tool designed for simulating biological phenomena en- joying the features of the ntcc based approach. On the other hand we apply our technique for modelling and analyzing two complex biological systems.
The rest of the paper is structured as follows: In Section 2 we describe the ntcc calculus. In Section 3 we present our software tool (BioWayS) on two examples (the glycogen breakdown pathway and the HIV life cycle). Section 4 concludes the paper.

Timed Concurrent Constraint Programming
Process calculi such as CCS and the π-calculus among several others have arisen as mathematical formalisms to model and reason about concurrent systems. They treat concurrent processes much like the λ-calculus treats computable functions. They then provide a language in which the structure of terms represents the struc- ture of processes together with an operational semantics to represent computational steps.
In this paper we shall use as modelling language Concurrent Constraint Pro- gramming (CCP) [32], a model for concurrency that combines the traditional oper- ational view of process calculi with a declarative view based on logic. This allows CCP to benefit from the large set of reasoning techniques of both process calculi and logic [32,28].
Agents in CCP interact with each other by telling and asking information rep- resented as constraints to a global store. Constraints (e.g., x > 42) can be thought of as formulae in a first-order language and they represent (partial) information about the variables of the system. Partial must be understood here as the fact that constraints do not necessarily determine completely the values of the variables.
The basic constructs in CCP are the tell agent tell(c) that adds the constraint c (via logical conjunction) to the store, thus making it available to the other pro- cesses; and the ask process when c do P that queries if the current store d can entail (deduce) the guard c, written d |= c; if so, it behaves like P . Otherwise it remains blocked until more information is added. Hence, ask processes define a synchronisation mechanism based on entailment of constraints. CCP features also constructs for declaring local variables as in (local x) P and for executing processes in parallel as in P  Q.

The ntcc calculus [28] extends CCP with the notion of discrete time-units to model timed and reactive systems. Roughly speaking, a CCP-like process is exe- cuted in a time-unit. When the resting point is reached, i.e., no further evolution is possible, the store is output and a new time-unit is created to later execute the continuation of the process. In order to specify this kind of behaviour, ntcc extends CCP with operators such as next P that delays the execution of P one time-unit; the replication ! P that executes P in all the time-units; and unless c next P that executes P in the next time-unit if c cannot be deduced from the store. Further-
more, ntcc introduces non-deterministic choices of the form Σi∈I when ci do Pi
where one Pi is chosen for execution if the guard ci can be entailed from the store. When this happens, the other alternatives are precluded from execution. Asyn- chronous behaviour is introduced by adding to the syntax a finite delay operator: the process P represents a finite but unbounded delay for the activation of P .
The notion of constraint and the language of processes in ntcc are expressive enough to specify the biological behaviour we are interested in modelling:
Quantitative information can be naturally expressed by means of constraints. For instance x > y states that the concentration of x is greater than that of y.
Constraints provide also an elegant mechanism to represent partial information. For instance, x > 42 gives some information regarding the concentration of x but it does not give a specific value for it. This can be helpful when some compo- nents of the system are not well known or we do not have enough quantitative information about them.
Synchronisation of ask processes via constraint entailment allow us to trigger actions when some information can be derived from the system. For instance, it is natural to express in the language that a given reaction occurs only when certain component is present in the system.
The ability of CCP to compose models (i.e., components) by parallel composition leads to a robust modelling strategy: we can study separately components of a system and then, observe the behaviour of the whole system.
Timed operators as next P allow us to describe reaction (or interactions) that can take several time-units to be completed.
Furthermore, since ntcc is a model of concurrency, we can use several techniques to reason about the models we build. For instance, operational and denotational semantics, model checking techniques and logical interpretation of processes (see e.g., [32,28] ).

BioWayS: a ntcc model of biochemical reactions
The tool we propose here models biological systems by means of a set of reaction rules of the form
a1X1 + ...anXn −−· b1Y1... + bmYm	(1)
The constants a1, ..., an and b1, ..., bm are the stoichiometric coefficients. There- fore, a1X1, a2X2, ..., anXn are reactants that interact (and then consumed) yielding

to the products b1Y1, b2Y2, ..., bmYm.
In order to represent the reaction above, we model in ntcc each type of molecule as a variable (e.g., Xi) and Equation (1) as the process


eq-proc = when X1 ≥ a1 ∧ ... ∧ Xn ≥ an do
next (t) (tell(Y1 = Y j + b1 ∧ ... ∧ Ym = Y j + bm))

(2)

1	m
next tell(X1 = Xj − a1 ∧ ... ∧ Xn = Xj − an)
1	n
We use primed variables to represent the value of the variables in the previous time unit as in X1 = Xj . The process above can be read as “when the reactants are available, they are consumed and the right-hand components are produced t time units later”. Hence, the kinetic parameter t allow us to represent the speed of reactions.
Assume now a set of n stoichiometric equations. We need a process that chooses one of the reaction to occur at a given time-unit. This can be done by composing each process eq-proci in a non-deterministic choice of the form:

Σ

i∈1..n

eq-proci

Furthermore, if the propensity of each reaction to occur is available, it is possible to consider probabilistic extensions of CCP as the one studied in [19]. Then, instead of performing a non-deterministic choice, we can consider a probabilistic process of the form:
new(p, F ) in Σ when p = i do eq-proci
i∈1..n
where the value of p is chosen according to the probability mass function F for
{1,..., n}. For instance, for a system of two reactions, the process
new(p, F : F (1) = 0.2,F (2) = 0.8) in Σ when p = i do eq-proci
i∈1..2
will choose with a probability of 0.2 the first reaction and with a probability of 0.8 the second reaction.
Summing up, in BioWayS it is possible to express two important features of biochemical reactions: the propensity (i.e. the probability of occurring) and the duration, i.e. the time steps needed for the products to appear in the system. This is an abstraction to represent the speed of a chemical reaction (i.e. the reaction rate constant).

The model as a runnable specification
Processes in ntcc can be seen as runnable specifications of a system: the model can be directly simulated by using the operational semantics (SOS) of the calculus.

The SOS dictates how processes evolve along time units. For instance, a process
tell(c) evolves into skip (the inactive process) by adding c to the current store d:
RTELL ⟨tell(c), d⟩ −→ ⟨skip,d ∧ c⟩

Similarly, for the rest of the processes. The reader may refer [28] for a complete description of SOS rules of ntcc.
Following the operational rules of the calculus, we built an interpreter of ntcc on top of the Mozart programming language (http://www.mozart-oz.org/). Central to this implementation is the Mozart abstraction of a computation space (CS). A CS is a constraint store where multiple threads can access (concurrently) the shared variables and impose constraints on them. In Mozart, different constraint systems are available. Here we used the Finite Domain Constraint System (FD). In FD variables are assumed to range over finite domains and, in addition to equality, we may have predicates that restrict the possible values of a variable to some finite set as in x > y. We thus model ntcc processes as threads that post and query constraint in the CS until a resting point is reached. When this happens, we output the final store that contains the information about the variables of the model. This gives a simple way to “execute” the ntcc model and observe the behaviour of the modelled system in each time-unit.
In order to make the tool available on Internet, we embedded the ntcc interpreter into BioWayS, a PHP based application freely available at http://avispa.puj. edu.co. Users can build models of biological systems in BioWayS through a wizard that comprises the following steps:
Variables: Define the reacting species and their initial concentration.
System’s reactions: Define the type of reaction that describes how molecules interact.
Propensity of reactions: Define the probability of each reaction to occur.
Duration of reactions: Define the duration of each type of interaction.
Number of time-units: Time-window for the simulation.
Modelling
In this section we outline the use of our toolkit through the specification and sim- ulation of two well-studied biological scenarios: (i) the signalling pathway leading to the glycogen breakdown into glucose 1-phosphate, and (ii) the life cycle of the HIV. During the discussion we also highlight the features of our approach in these specific cases.

The glycogen breakdown pathway: A model of intracellular processes
In higher organisms such as mammals glycogen is stored in the liver as a reservoir of glucose. When the concentration of glucose in the blood is low the α cells of the

pancreas secrete glucagon, a polypeptidic hormone which triggers the process of glycogen breakdown (glycogenolysis). This process is started by the interaction of glucagon with its receptor expressed by liver cells [1]. Once the glucagon receptor embedded in the cell membrane binds its ligand, it activates a signal transduc- tion pathway inside the cell leading to a glycogenolysis. More precisely, the signal transduction system for the glycogen degradation pathway is modular and is made of three type of proteins: (i) a receptor, (ii) a transducer, and (iii) an effector. Glucagon recognises and binds to its receptor causing an allosteric change [16]. Responding to this structural modification, the transducer (a G-protein –guanine nucleotide-binding protein– located in the inner side of the cell membrane) inter- acts with the hormone-receptor complex stimulating a reaction in which a GDP (guanosine diphosphate) molecule bound to the G-protein is replaced by GTP (guanosine-5j-triphosphate). This reaction activates the G-protein, which then interacts with the effector, the enzyme adenylyl cyclase. This protein catalyses the conversion of ATP (adenosine-5j-triphosphate) to cAMP (cyclic adenosine monophosphate), an intracellular second messenger. Thus, the binding of glucagon at the cell-surface stimulates the synthesis of a second messenger inside the cell, which in turn stimulates a metabolic response (see Figure 1). The first interaction triggers a cascade of biochemical reactions in a signal transduction pathway through the activation of G-proteins [1].
In order to model the system described above we apply a compositional approach by adding iteratively biochemical interactions. This is particularly straightforward in our framework: new information can be added to the system by posting con- straints and the subsystems can be easily composed by sharing variables. Compo- sitionality allows to build complex biological models combining partial information coming from different sources. This result is certainly more difficult to achieve, for example, in models based on ordinary differential equations (ODE) because the large number of parameters needed and, in general, ODE are not compositional. Moreover, the idea of partial information represented as constraints makes CCP appropriate for this aim.
Note that our technique allows the description of the biological scenario at differ- ent levels of abstraction. For instance, in [21] we considered the interactions between the transmembrane receptor and G-proteins in three different environments (extra- cellular, transmembrane, and intracellular). Now, we expand this perspective by zooming into the intracellular domain with the aim to analyse the system’s be- haviour at this level. This should allow us to gain a better understanding of the system dynamics in response to the presence or absence of signalling molecules.
We describe the glycogen breakdown pathway through a set of reaction rules resembling [13,21] and we considered the actions of binding, dissociation, complex formation, and transfer of molecule groups. The full specification of the model is reported in Appendix A. For each reaction we specified the initial concentration c of reactants , the probability p to occur and the time t (see parameter t in Equation
(2)) between two subsequent events of product formation. These parameters were estimated accordingly to literature data [5,22,23,27,34]. In particular t is estimated




Fig.	1.	A	reaction	pathway	for	the	glycogen	breakdown	(taken	from	[5]	and
https://files.nyu.edu/gcl1/public/).

from reaction rates: the highest the reaction rate, the shortest t. We used c to set the experimental conditions. Indeed we simulated different scenarios (called modes in the Appendix) in which c can be low, medium or high. For the simulations performed here, we assumed that all reactions have the same propensity to occur. Thanks to the timed nature of our modelling language, we are able to emphasise the interactions between different species during time.
Our in silico experiments show that the behaviour of our model is consistent with that of the real counterpart. In particular, in liver cells, in response to the hormone glucagon, the transmembrane protein adenylyl cyclase is stimulated and catalyses the conversion of ATP into cAMP , an intracellular second messenger (see Tables A.1 and A.2). This step of the signal transduction pathway is called amplification of the signal, since in response to a small amount of glucagon, a large quantity of cAMP is produced (see Figure 2). The amplification process is mediated by subsequent molecular interactions. Indeed, before glucagon unbinds from its



Fig. 2. Temporal trace of cAMP involved in the glycogen breakdown cascade. It can be observed an increased formation of cAMP in presence of lower values of concentrations and rate constants, particularly in terms of the extracellular ligand (see details in Appendix A.)

(a)	(b)
Fig. 3. 3a Temporal trace for enzyme protein kinase A (cAMP dependent protein kinase (cAPK)) and 3b
glucose 1-phosphate.

receptor, several G-proteins can be activated. The activated proteins migrate along the inner side of the plasma membrane and may enhance, in turn, the catalytic capabilities of many adenylyl cyclases. Moreover, during the life-time of the G- protein-adenylyl cyclase complex, several ATP molecules are converted into cAMP , thus leading to further amplification.
Throughout the signal cascade, cAMP is capable to activate the enzyme protein kinase A (cAMP dependent protein kinase (cAPK)). Thus, high levels of cAPK are observed in the system (see Figure 3a). This environment is a requirement for the activation of others intracellular signalling molecules (see Equations EQ8-EQ12.1 in Appendix A) and to promote the degradation of glycogen into molecules of glucose 1-phosphate (see Figure 3b). Therefore, the processing of information from the external environment to the intracellular medium, starts at the level of the cell membrane through the binding of the hormone glucagon to its respective receptor in a “physical interaction” followed by a set of biochemical reactions (transduction pathway) in which the initial stimulus is greatly amplified.
Our representation of the interactions is in agreement with [33]: the following enzymes must be both present and available for activation: glycogen phosphorylase


	
(a)	(b)
Fig. 4. 4a Temporal trace for proteins glycogen synthase (active form) and 4b glycogen phosphorylase
(inactive form).

kinase and glycogen phosphorylase, as well as protein kinase A must be available for activation by cAMP . The enzyme adenylyl cyclase must be present according with [29]. In line with [33,29] in almost all species the activity of glycogen synthase increases rapidly while glycogen phosphorylase remains low, and the ratio of the active forms of glycogen phosphorylase and glycogen synthase might be of major importance in the regulation of metabolism. Our simulations (see Figure 4) repro- duce this behaviour: enzyme glycogen synthase (active) increases in an overshoot and afterwards decreases and remains in a constant level especially when we con- sider the configuration “medlimMode2” (see the blue arrow in Figure 4a) to perform the simulations (see Tables A.1 and A.2). In such configurations the mid values of concentrations and rate constants of the molecules and reactions in the network are taken. When we consider the configuration “medlimMode3” (see Tables A.1 and A.2), the glycogen phosphorylase (inactive) decreases to lower levels of con- centration (see the blue arrow in Figure 4b). Moreover, we can notice that the ratio and behaviour of the inactive/active forms of glycogen phosphorylase and glycogen synthase affects not only the degradation of glycogen to glucose 1-phosphate (the active form of the glycogen phosphorylase degrades glycogen –see Equations EQ11-
11.1 in Appendix A) but also the glycogen synthesis (the active form of glycogen
synthase catalyses the formation of glycogen polymers –see Equations EQ12-12.1 in Appendix A). The ability of our modeling strategy and tool to easily adjust pa- rameters and compose subsystems was crucial here to identify the above mentioned behaviours and also to gain insights on the regulation of glycogenolysis.

The HIV life cycle: A representation based on biochemical interactions
Since the discovery of the human immunodeficiency virus (HIV), the etiologic agent of the acquired immune deficiency syndrome (AIDS), scientists have studied the dynamics and details of the HIV life cycle in order to develop efficient antiviral therapies. In the context of computational biology the dynamics of cell-virus in- teractions have traditionally been investigated through both ODEs and EMs. In the latter case the proposed modelling approaches mainly focus on membrane in- teractions (see e.g. in [11]). We shall use here BioWayS for building a model of the

HIV infection cycle shifting the focus on quantitative issues. Our aim is to track the time course of a set of molecules during the various steps of the infection cycle. Our investigation is driven by the available observations describing the progression throughout the infection cycle as conditioned by the presence of certain molecules in each phase. In other words, each stage of the infection cycle is characterised by a precise set of molecules which are necessary for bootstrapping the following step. Our interest in modelling the timing of this process reflects one research strategy in drug discovery, aiming at blocking the infection cycle by interfering with the bootstrapping molecules. Our framework promises to be particularly suited for this purpose since time rates can be taken into account and ntcc processes can be pro- gressively composed in order to build a model integrating information coming from different sources.
The various steps of the HIV infection process can be described as follows (see [18] for a detailed description and Figure 5):
Binding and Fusion: HIV binds to a specific receptor CD4 (cluster of differentia- tion 4) and one of two co-receptors on the surface of a CD4+ T-lymphocyte and fuses with the host cell releasing its RNA genome.
Reverse Transcription: reverse transcriptase converts the single-stranded HIV RNA to double-stranded HIV DNA.
Integration: the HIV DNA enters the host cell’s nucleus where it may remain inactive producing few or no new copies of HIV.
Assembly: new virus particles are assembled in the host cell.
Budding: the newly assembled virus pushes out (“buds”) from the host cell.
We used BioWayS to describe the interactions amongst the molecules of both the virus and the host cell involved in the infection cycle. For this, we specified for each reaction its duration and the initial amount of reactants. The equations composing the model and the chosen parameters are reported in Appendix B. An interest- ing observation that can be abstracted from the simulation results, is the cyclical behaviour of the system based on the availability of the following molecules: ccr5 (C-C chemokine receptor type 5), cd4, gp41 (glycoprotein-membrane anchored fu- sion protein subunit) and gp120 (glycoprotein-receptor binding domain) (see Figure 5). These molecules set a sort of boundary condition for the reaction scheme: if they are not available to feed the system, the cycle is stopped.
BioWayS then allowed us to correctly identify a set of molecules whose presence is a necessary condition for proceeding throughout each step of the infection cycle. Consistently with available data, for instance, we found that in our model the presence of the complex gp120/gp41 is necessary for both the Binding and Fusion and the Budding phases. Without this complex, the virus is unable to infect the host cell. Interestingly, drugs called Fusion Inhibitors, such as Maraviroc, block the fusion phase interfering with the binding of the host-cell co-receptor ccr5 and the complex gp120/gp41 : cd4 thus avoiding the HIV life cycle to continue.


	
(a)	(b)
Fig. 5. Steps of the replication of the virus (taken from http://www.niaid.nih.gov) (left) and the time course of gp120/gp41 : cd4: ccr5 necessary to initiate membrane fusion in the HIV life cycle (right).
Conclusions and future work
We have defined a technique based on a temporal extension of Concurrent Con- straint Programming (CCP) for modelling biological systems that allows us to rep- resent straightforwardly transition times and partial information. In this paper we have presented also a software tool (BioWayS) for modelling and analysing bio- chemical interaction networks. Through two working examples we have illustrated how our method can be used for gaining insights on the dynamics of biological phenomena.
We are currently developing an extension of our toolkit allowing us to consider also stochastic waiting times distributed according to non-exponential probability distribution functions. This will lay the ground to describe a larger set of biological scenarios.

References
John L. Tymoczko adn Jeremy M. Berg and Lubert Stryer. Biochemistry. W. H. Freeman, 5th edition, 2002.
Alejandro Arbelaez, Julian Gutierrez, and Jorge A. P´erez. Timed concurrent constraint programming in systems biology. Newsletter of the ALP, 19(4), 2006.
Roberto Barbuti, Giulio Caravagna, Andrea Maggiolo-Schettini, Paolo Milazzo, and Giovanni Pardini. The calculus of looping sequences. In Marco Bernardo, Pierpaolo Degano, and Gianluigi Zavattaro, editors, SFM, volume 5016 of Lecture Notes in Computer Science, pages 387–423. Springer, 2008.
A. F. Bartholomay. Molecular set theory: A mathematical representation for chemical reaction mechanisms. Bulletin of Mathematical Biology, 22(3):285–307, 1960.
John W. Baynes and Marek H. Dominiczak. Medical Biochemistry. Mosby, 2004.


Andrea Bobbio and Mikl´os Telek. Computational restrictions for SPN with generally distributed transition times. In Klaus Echtle, Dieter K. Hammer, and David Powell, editors, EDCC, volume 852 of Lecture Notes in Computer Science, pages 131–148. Springer, 1994.
Chiara Bodei, Andrea Bracciali, Davide Chiarugi, and Roberta Gori. A taxonomy of causality-based biological properties. In Emanuela Merelli and Paola Quaglia, editors, FBTC, volume 19 of EPTCS, pages 116–133, 2010.
Luca Bortolussi and Alberto Policriti. Modeling biological systems in stochastic concurrent constraint programming. Constraints, 13(1-2):66–90, 2008.
Laurence Calzone, Fran¸cois Fages, and Sylvain Soliman. Biocham: an environment for modeling biological systems and formalizing experimental knowledge. Bioinformatics, 22(14):1805–1807, 2006.
Giulio Caravagna and Jane Hillston. Bio-PEPAd: A non-markovian extension of Bio-PEPA. Theor. Comput. Sci., 419:26–49, 2012.
Luca Cardelli. Brane calculi. In Vincent Danos and Vincent Sch¨achter, editors, CMSB, volume 3082 of Lecture Notes in Computer Science, pages 257–278. Springer, 2004.
Davide Chiarugi, Pierpaolo Degano, and Roberto Marangoni. A computational approach to the functional screening of genomes. PLoS Computational Biology, 3(9), 2007.
Davide Chiarugi, Moreno Falaschi, Carlos Olarte, and Catuscia Palamidessi. Compositional modelling of signalling pathways in timed concurrent constraint programming. In Aidong Zhang, Mark Borodovsky, Gultekin O¨ zsoyoglu, and Armin R. Mikler, editors, BCB, pages 414–417. ACM, 2010.
Steven Eker, Merrill Knapp, Keith Laderoute, Patrick Lincoln, and Carolyn L. Talcott. Pathway logic: Executable models of biological networks. Electr. Notes Theor. Comput. Sci., 71:144–161, 2002.
Jasmin Fisher and Thomas A. Henzinger. Executable cell biology. Nature Biotechnology, 25(11):1239– 1249, 2007.
Keith Frayn. Metabolic Regulation: A Human Perspective. Wiley-Blackwell, 2nd edition, 2003.
Daniel T. Gillespie. Stochastic simulation of chemical kinetics. Annu Rev Phys Chem., 58:35–55, 2007.
T. Goto, M. Nakay, and K. Ikut. The life-cycle of human immunodeficiency virus type 1. Micron., 29(2-3):123–138, 1998.
Vineet Gupta, Radha Jagadeesan, and Vijay A. Saraswat. Probabilistic concurrent constraint programming. In Antoni W. Mazurkiewicz and J´ozef Winkowski, editors, CONCUR, volume 1243 of Lecture Notes in Computer Science, pages 243–257. Springer, 1997.
Juli´an Guti´errez, Jorge A. P´erez, Camilo Rueda, and Frank D. Valencia. Timed concurrent constraint programming for analysing biological systems. Electron. Notes Theor. Comput. Sci., 171(2), 2007.
Diana Hermith, Carlos Olarte, Camilo Rueda, and Frank D. Valencia. Modeling cellular signaling systems: An abstraction-refinement approach. In Miguel P. Rocha, Juan M. Corchado Rodr´ıguez, Florentino Fdez-Riverola, and Alfonso Valencia, editors, PACBB, volume 93 of Advances in Intelligent and Soft Computing, pages 321–328. Springer, 2011.
Vladimir L. Katanaev and Matey Chornomorets. Kinetic diversity in G-protein-coupled receptor signalling. Biochem J., 401(2), 2007.
Yumiko Kawai and Ifeanyi J. Arinze. Activation of glycogenolysis in neonatal liver. The Journal of Biological Chemistry, 256(2):853–858, 1981.
S. C. Kou, Binny J. Cherayil, Wei Min, Brian P. English, and X. Sunney Xie. Single-molecule michaelismenten equations. The Journal of Physical Chemistry B, 109(41):19068–19081, 2005.
Roberto Larcher, Corrado Priami, and Alessandro Romanel. Modelling self-assembly in BlenX. T. Comp. Sys. Biology, 12:163–198, 2010.
I. Mura, Davide Prandi, Corrado Priami, and Alessandro Romanel. Exploiting non-markovian bio- processes. Electr. Notes Theor. Comput. Sci., 253(3):83–98, 2009.
Vivek K. Mutalik and K.V. Venkatesh. Quantification of the glycogen cascade system: the ultrasensitive responses of liver glycogen synthase and muscle phosphorylase are due to distinctive regulatory designs. Theoretical Biology and Medical Modelling, 2(1):19, 2005.
Mogens Nielsen, Catuscia. Palamidessi, and Frank D. Valencia. Temporal Concurrent Constraint Programming: Denotation, logic and applications. Nordic Journal of Computing, 9(1), 2002.


E. Novak, G.I. Drummond, J. Skala, and P. Hahn. Developmental changes in cyclic AMP, protein kinase, phosphorylase kinase, and phosphorylase in liver, heart, and skeletal muscle of the rat. Arch. Biochem. Biophys., 150(2):511–518, 1972.
Arjun Raj, Scott A. Rifkin, Erik Andersen, and Erik van Oudenaarden. Variability in gene expression underlies incomplete penetrance. Nature, 463(7283):913–918, 2010.
K.R. Sanft, D. Gillespie, and L.R. Petzold. Legitimacy of the stochastic Michaelis-Menten approximation. IET Systems Biology, 5(1):58–69, 2011.
Vijay A. Saraswat. Concurrent Constraint Programming. MIT Press, 1993.
A. L. Schwartz and T. W. Rall. Hormonal regulation of glycogen metabolism in neonatal rat liver.
Biochem J., 134(4):85–993, 1973.
M. Vardanega-Peicher, R. Galletto, and S. Pagliarini. Comparative effect of glucagon and isoproterenol on hepatic glycogenolysis and glycolysis in isolated perfused liver. Brazilian Archives of Biology and Technology, 46:563–568, 2003.

Glycogen breakdown pathway
Below we list the reactions we considered for the simulation of the signaling pathway of glycogen breakdown. In Table A.1 we describe the experimental conditions, i.e., the rate constants for each reaction. Table A.2 describes the component of the system along with the molar concentration we considered in each simulation.
EQ1	Rglcgn [Gα GDP ]+ Lglcgn  Rglcgn[Gα GTP ]Lglcgn EQ2	Rglcgn [Gα GTP ]Lglcgn  Gα GTP + RglcgnLglcgn EQ3	Gα GTP + GAP  GAP −→Gα GDP + GAP + Pi
EQ4	Gα GDP + Rglcgn  Rglcgn [Gα GDP ] EQ5	Rglcgn Lglcgn   Rglcgn + Lglcgn EQ6	Gα GTP + AC  AC[Gα GTP ]
EQ7	AC[Gα GTP ]+ ATP   [AC[Gα GTP ]]ATP −→ cAMP + 2Pi + AC[Gα GTP ]
EQ8	4cAMP + 2cAP Kinact  2cAPKact
EQ9	cAPKact + GPKinact   [cAPKact GPKinact ]
EQ9.1 [cAPKact GPKinact ]+ ATP −→(GP K − P )act + ADP + cAPKact EQ10	(GPK − P )act + GPinact  [(GPK − P )act GPinact ]
EQ10.1 [(GPK − P )act GPinact ]+ ATP −→(GP − P )act + ADP + (GP K − P )act
EQ11	(GP − P )act +  Glycogen  (GP − P )act Glycogen
EQ11.1 (GP − P )act Glycogen + Pi −→ Glucose1 − P + (GP − P )act
EQ12	(GPK − P )act + cAPKact + GSact   [cAPKact GSact (GPK − P )act ]
EQ12.1 [cAPKact GSact (GPK − P )act ]+ ATP −→(GS − P )inact + ADP + cAPKact + (GP K − P )act

Table A.1
Reaction scheme in the signaling pathway of glycogen breakdown. The total time of the simulation was
1.000.000 time-units. The corresponding rate constant of a reaction is represented as its duration in discrete time units. Adapted from [5,22,23,27,34].


Table A.2
Reacting species, their initial amount, and a model of biochemical reaction rules for the signaling pathway of glycogen breakdown. For each mode of simulation, we use the lower, medium and upper limit of the molar concentration of the variables: InfLim, MedLim, MaxLim, respectively. Adapted from [5,22,23,27,34].

HIV infection cycle
Table B.1 describes the components of the system and the reactions considered for the simulation of the HIV cycle.

Table B.1
Reacting species, their initial amount, and a model of intracellular processes for the HIV life cycle. Our simulation considers the parameter t = 1 (see Equation 2) and all the reactions have the same probability to occur. Initial concentrations were set up to 100 copies for ccr5, cd4, gp120, gp41, and 0 for complexes.
Adapted from [18].
