	Electronic Notes in Theoretical Computer Science 201 (2008) 255–264	
www.elsevier.com/locate/entcs


Refinement in the Presence of Unknowns
Heike Wehrheim1 ,2
Institut fu¨r Informatik Universit¨at Paderborn 33098 Paderborn, Germany

Abstract
The standard theory of refinement assumes the systems/specifications/programs under consid- eration to be completely known: states and transitions are explicitly or implicitly given. This assumption fails to hold for systems that dynamically evolve over time, changing their composition as well as their components due to new requirements or new environmental conditions.
In this paper, we study refinement for such partially known systems. In our setting, partiality refers to transitions: transitions between states may be present or not present (the standard case) as well as unknown. This third possibility is expressed by using a three-valued logic for reasoning. We define a simulation relation on such partial transition systems, and show that the simulation problem on partial transition systems can be rephrased in terms of two simulation problems on complete transition systems, employing an optimistic and a pessimistic completion.
Keywords: Partial transition systems, simulation, three-valued logic, completions.


Introduction
Refinement is the central concept in a formal model-based development of systems involving a stepwise design on different levels of abstraction. In this setting, refinement takes on the role of a correctness criterion: a transfor- mation of a model needs to preserve the overall behaviour; for a user the same functionality should be available after the change. Refinement is usually shown via simulation relations between the models/specifications before and after the transformation.

1 This work was partially funded by the German Research Council DFG under grant WE 2290/6-1.
2 Email: wehrheim@upb.de



1571-0661© 2008 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2008.02.023

While there are different forms of refinement depending on the specification formalism used (e.g. data refinement for state-based specifications [5], process refinement or (bi-)simulation for behaviour-oriented formalisms [12],[10]), all these notions of refinement assume to have complete specifications of the sys- tem. This general assumption fails to hold for some classes of systems, for instance for certain kinds of self-* systems (e.g. self-organising, self-adapting, self-healing). Self-organising systems [8] can adapt to changing system states (e.g. failures) or environmental conditions, and thus may dynamically evolve over time reaching initially unknown states. This adaption concerns both sin- gle components as well as the composition of systems. It may lead to system models or specifications, which are only partially known. The partiality may concern both states (unknown values of some of the variables) as well as tran- sitions (unknown transitions between states). This kind of partiality differs from the one investigated in [1], which refers to views. A view is describing one part or aspect of a system; views themselves are however complete in that everything is known about their states and/or transitions.
The phenomenon of partial specifications has already been studied in the area of model checking [4,2]. The underlying system models for model checking are (usually) Kripke structures, and partiality in Kripke structures might con- cern both the atomic propositions (in [2]) and the transitions (in [4]). Model checking algorithms on partial Kripke structures use three-valued logics (most often Kleene’s logic L3 [6]) to formalise the unknown value: true, false plus ⊥
for unknown. In [4,3] this setting is even generalised to arbitrary multi-valued
logics.
While model checking partial models is thus already a well-researched area, this is different for refinement. Bruns and Godefroid [2] define completeness preorders among Kripke structures via (bi)simulation-like relations in order to be able to compare partial structures (where partiality concerns atomic propositions only), with the objective to preserve temporal logic properties. However, refinement aiming at deriving an implementation out of an abstract specification is not their target. A bisimulation relation over multi-valued transition systems is also given in [7]. Refinement for partial specifications is studied in [11]. There, refinement relations are defined for the modal transition systems of [9] containing two kinds of transitions: must and may transitions. In contrast to the partial specifications treated here, may transitions do not correspond to unknown transitions, but to transitions which are allowed but do not have to be present in an implementation. Unknown transitions are transitions which – once their actual value becomes known - are either defi- nitely there or definitely not there.
In this paper, we define a simulation relation between transition systems

with unknown transitions. Since we do not know whether unknown transitions will actually be present, we might not succeed in showing that a fixed relation is or is not a simulation relation. Thus the outcome of a test for simulation also takes values of a three-valued logic: true, false or ⊥ (unknown). We fur-
thermore show that a test for simulation between partial transition systems
can be reduced to two tests on complete transition systems, employing one completion which makes all unknown transitions true (an optimistic comple- tion) and another one making all unknowns false (a pessimistic completion). This in in line with corresponding results about reducing multi-valued model checking problems to two (in case of three-valued logics) or more standard model checking problems.

Background
Before treating partial specifications we give the corresponding definitions for the complete case. /The behaviour of) our specifications is given by transition systems over a fixed set of actions Act . Transitions describe execution of actions, viz. operations of the system.
Definition 2.1 A (complete) transition system T = (S , s0, −→) consists of
a set of states S ,
an initial state s0,
and a transition relation −→ ⊆ S × Act × S .
We use the notation Ti to stand for (Si , s0,i , −→i ). Simulation between transi- tion systems is simply defined as one half of a bisimulation [10]: if T2 simulates T1 then it should be able to follow every step that T1 is making. The similar-
ity of T1 and T2 is recorded in a simulation relation S between the states of
T1 and T2.
Definition 2.2 Let T1, T2 be complete transition systems, S ⊆ S1 × S2 a relation connecting states of T1 with states of T2.
S is a simulation relation between T1 and T2, T1 ≤S T2, if
(s0,1, s0,2) ∈ S and
∀(s1, s2) ∈ S, a ∈ Act :

if s1 −→a
s' then ∃ s' : s2 −→a
s' ∧ (s' , s' ) ∈ S.

As an example, consider the following three transition systems T1, T2 and T3 representing the behaviour of the CCS terms a.(b.d + b.c), a.b.(d + c) and a.b.c, respectively.


T1


T3	a	b	c


T2


T2 can simulate T1 (but not vice versa) using the simulation relation depicted by dotted lines. Simulation is different from failures refinement [12]: T2 is also a (stable) failures refinement of T1 but T3 being a failures refinement of T1 as well cannot simulate T1.
A given relation S ⊆ S1 × S2 can be checked for the simulation property: it either is or is not a simulation relation. We can thus rephrase the last definition as follows: for a pair (s1, s2) ∈ S we define

⎧⎨ true	if ∀ a ∈ Act : s1 −→a
s1 ⇒ ∃ s' : s2 −→a	s' ∧ (s' , s' ) ∈ S 

1
[s1 ≤S s2]= 
⎩ false else
and for transition systems we define
2	2  2	1	2

[T1 ≤S T2]= min{[s1 ≤S s2] | (s1, s2) ∈ S} ∧ (s0,1, s0,2) ∈ S 
Here, min refers to the minimal value in the ordering false < true. Thus min computes the conjunction over a set of boolean values which is then conjoined with the evaluation of the predicate (s0,1, s0,2) ∈ S. In the next section we will generalise this to three-valued logics.

Simulation on partial transition systems
Next, we generalise this definition to partial transition systems. In a partial transition system we in addition have unknown transitions. This is described by assigning values {false, ⊥, true} from a three-valued logic to triples (s, a, s'). The third value ⊥ stands for unknown: the transition might or might not be present in the real system, we just do not know. This is different to the symbol
⊥ used as ”undefinedness” in data refinement. There, ⊥ stands for (the result of) a not yet specified operation which can be refined into a more specific one (even refined into an undefined operation again). Here, transitions labelled
⊥ are in reality either present or not present, just from our point of view they are currently unknown (and in particular, unknown transitions cannot be simulated by unknown transitions, see below).


		

Fig. 1. Truth tables for L3
Definition 3.1 A partial transition system T = (S , s0, R) consists of
a set of states S ,
an initial state s0,
and a partial transition relation R : (S × Act × S ) → {true, false, ⊥}.

For simplicity, we write s −→a
s' for R(s, a, s') = true and s
−−a · s' for

R(s, a, s') = ⊥ (and omit arrows for R(s, a, s') = false). Figure 1 gives the truth tables for conjunction, disjunction and implication in the three-valued logic (using 0 for false and 1 for true). It can be seen that conjunction com-
putes the minimal value of its arguments and disjunction the maximal value using the ordering false < ⊥ < true. Thus we also write min and max for conjunction and disjunction, respectively.
Partial transition systems can be completed by making decisions for un- known transitions. There are two such completions we will be particularly interested in: an optimistic completion assuming that there are indeed transi- tions wherever we have suspected so, and a pessimistic completion assuming the contrary.
Definition 3.2 Let T = (S , s0, R) be a partial transition system.
Its optimistic completion is T 0 = (S , s0, −→) with (s, a, s') ∈ −→ ⇔ R(s, a, s') ∈
{true, ⊥}, its pessimistic completion is Tp = (S , s0, −→) with (s, a, s') ∈ −→ ⇔
R(s, a, s')= true.
The simulation relation should now - like in the complete case - guarantee that steps of T1 can be matched by T2. In case of unknown transitions, we can only have true as a result if under all possible values for the unknowns simulation is possible. Since this cannot always be guaranteed, one possible outcome of
evaluating a given relation for simulation is also ⊥. The outcome false on the other hand signals that the given relation can never be a simulation relation.
Figure 2 shows some simple examples of different forms of simulation re- lationships.



Fig. 2. Examples of different simulation relationships

Cases (1) and (2) are the standard ones: a true-transition in T1 can be matched by a true-transition in T2 and cannot be matched by a false- transition.
Case (3): if a true-transition in T1 only has a ⊥-transition in T2,a simula- tion relationship is unknown (since we do not know whether the unknown transition is actually there).
Case (4): an unknown transition in T1 can also not be truely matched by an unknown transition in T2 since it might turn out later that the transition in T1 is present while that in T2 is not. Thus the result is undetermined (⊥).
A similar argument holds for case (5): we cannot definitely say that there is no simulation relation here, since the unknown transition in T1 might not be present and then T2 is able to simulate it (hence outcome ⊥ again).
Finally, case (6) is the positive outcome: an unknown transition can be simulated by an existing one.
Note that the outcome of evaluating for simulation is the implication between the truth value of the transition in T1 and the transition in T2.
This is now to be formally captured. We start with evaluating pairs of states under a given relation S ⊆ S1 × S2. Informally, given a pair (s1, s2) we have to check the matching for every transition (s1, a, s' ). The result of these checks have to be conjoined (we take the minimal value of the outcomes).
While checking for one transition (s1, a, s' ) we have to see what the best match is that we can find under all transitions (s2, a, s' ). Thus, here we take
the maximal value of all results.

Definition 3.3 Let T1, T2 be partial transition systems, S ⊆ S1 × S2 a pro- posed matching relation and (s1, s2) a pair in S.
[s1 ≤S s2]= 
min {max {R1(s1, a, s' ) ⇒ (R2(s2, a, s' ) ∧ (s' , s' ) ∈ S) | s' ∈ S2}

1
| a ∈ Act , s' ∈ S1}
2	1	2	2

Lifting this to transition systems we get
[T1 ≤S T2]= min{[s1 ≤S s2] | (s1, s2) ∈ S} ∧ (s0,1, s0,2) ∈ S 
The result of evaluating for simulation on partial transition systems can also be obtained on complete transition systems, by looking at their optimistic and pessimistic completions.
Theorem 3.4 Let T1, T2 be two partial transition systems. Then the follow- ing holds:

⎪⎨	1	2
1	2
⎪⎪⎩ ⊥	else
A simple reasoning can show that the simultaneous holding of [To ≤S Tp]= 
true and [Tp ≤S To]= false is not possible. We can thus use ordinary simula-
tion to check for simulation relations on partial transition systems. Note that
this result does not hold if we would let unknowns be simulated by unknowns. As an example consider the following two transition systems:

If unknowns could be simulated by unknowns, T2 could simulate T1 ([T1 ≤ T2] would be true). Using the above completions, the optimistic completion of T1 contains an a-transition, the pessimitic completion of T2 does not, hence
[To ≤ Tp]= false which would then contradict the above result.
1	2
Proof of 3.4. 1. [T1 ≤S T2]= true iff To ≤S Tp.
1	2
(s0,1, s0,2) ∈ S has to hold for both sides.
The only transitions of interest are the unknown ones. From the left side
we get for every (s1, s2) ∈ S, a ∈ Act and s1 −→a 1 s2 that there is some s'

with s2 −→a	s' and (s' , s' ) ∈ S. Hence there is a transition s1 −→a
s' in

To and a transition s2 −→a
Reverse direction: if s1 −→a
' in Tp.
s' in To
is matched by s2 −→a
s' in Tp, then

1
there is either a transition s1 −→a 1
1
' or s1 −−·1
2	2
' in T1 and s2 −→a 2
' in

T2. This holds for all (s − 1, s2) ∈ S and all a ∈ Act . Hence [T1 ≤S T2].
[T1 ≤S T2]= false iff Tp ≤S To.
(s0,1, s0,2) ∈ S either holds for both sides or no side.
From left to right: [T1 ≤S T2]= false means: ∃(s1, s2) ∈ S, a ∈ Act such

that s1 −→a
s' and ¬∃ s'
: (s2 −→a
s' ∨ s2 −−a ·
s' ) ∧ (s' , s' ) ∈ S. Then

there is a transition s1 −→a
in To.
' in Tp but still no corresponding transition

The reverse direction follows with a similar reasoning.

Finally, we come to the general definition of simulation, independent of par- ticular representation relations.
Definition 3.5 Let T1, T2 be two partial transition systems. Simulation be- tween T2 and T1 is defined as
[T1 ≤ T2]= max {T1 ≤S T2 | S ⊆ S1 × S2}
Again, we use conjunction for composing the results of evaluating different relations for simulation: if one is suitable, T2 can simulate T1. Thus the question about simulation between partial transitions systems can be answered in three different ways: ”definitely yes”, ”definitely no” or ”don’t know”.

Example
Finally, we take a look at some examples. First of all, we have to see where the ”unknowns” are actually coming from. There are several possibilities which can be thought of:
A transition might be unknown because the specification/model of the system consists of different views, and these are contradictory as far as the specific transition is concerned: in one view it might be present, in another one it might not. The transition system for the complete system can thus only mark this transition as unknown.
The transition system describes a self-adapting system. Initially, when the system is started, its behaviour can be described by a complete tran- sition system, but afterwards it evolves (according to certain rules). This

evolution might change certain transitions, but since we have no control over this change, we can only mark these transitions as unknown.
Our system is a parallel composition of a large number of components but we only know one component. This component shares variables and/or communication channels with other components. The behaviour of our component thus depends on other components (e.g. the possibility of a communication), and hence we can only partially determine its transition system.
We take the latter view as starting point for the following example. Our system consists of 3 components, out of which we only know one. The components communicate over channels using a CSP-like synchronisation. The first system T1 is
[?1 ||{a} a.(b + c) ||{b} ?2]
The transition system of the known component, in the context of the other two unknown components ?1, ?2 is depicted below.

Next consider the following system T2

[?3 ||{a} a.c ||{b} ?4]
The semantics of the known component in the context of ?3 and ?4 is
a	c
The check for a simulation relation gives us ⊥ as result: we cannot definitely say that the second component can, nor that it cannot simulate the first (and a similar result is obtained if we just keep the first specification). This is different, if we instead take T3 as system
[?5 ||∅ a.(b + c) ||∅ ?4]
Now synchronisation can never fail (since there is essentially no action to synchronise over), and thus all three transitions a, b and c are known to be there and a comparison with the first component according to simulation can be shown to yield true.

Conclusion
In this paper, we have defined a simulation relation between partial transition systems, where partiality refers to transitions. Both the transition systems and the outcome of a simulation check are formulated via a three-valued logic. We have discussed two different possibilities for simulation of unknowns: un- knowns being simulated by unknowns, or unknowns only being simulated by knowns. The latter has been adopted as the definition (due to it being more realistic), and for this definition we have shown simulation on partial tran- sition systems to coincide with two simulation checks on complete transition systems, using an optimistic and a pessimistic completion.

References
Eerke Boiten, John Derrick, Howard Bowman, and Marten Steen. Consistency and refinement for partial specification in Z. In M.-C. Gaudel and J. Woodcock, editors, FME’96: Industrial Beneﬁt of Formal Methods, Third International Symposium of Formal Methods Europe, volume 1051 of Lecture Notes in Computer Science, pages 287–306. Springer-Verlag, 1996.
Glenn Bruns and Patrice Godefroid. Model checking partial state spaces with 3-valued temporal logics. In Nicolas Halbwachs and Doron Peled, editors, CAV, volume 1633 of Lecture Notes in Computer Science, pages 274–287. Springer, 1999.
Glenn Bruns and Patrice Godefroid. Model checking with multi-valued logics. In Josep D´ıaz, Juhani Karhuma¨ki, Arto Lepist¨o, and Donald Sannella, editors, ICALP, volume 3142 of Lecture Notes in Computer Science, pages 281–293. Springer, 2004.
Marsha Chechik, Steve M. Easterbrook, and Victor Petrovykh. Model-checking over multi- valued logics. In Jos´e Nuno Oliveira and Pamela Zave, editors, FME, volume 2021 of Lecture Notes in Computer Science, pages 72–98. Springer, 2001.
John Derrick and Eerke Boiten. Reﬁnement in Z and Object-Z. Springer-Verlag, 2001.
Melvin Fitting. Kleene’s three valued logics and their children. Fundam. Inform., 20(1/2/3):113–131, 1994.
Beata Konikowska and Wojciech Penczek. On Designated Values in Multi-valued CTL* Model Checking. Fundam. Inform., 60(1-4):211–224, 2004.
Jeff Kramer and Jeff Magee. Self-Managed Systems: an Architectural Challenge. In ICSE 2007 - Future of Software Engineering Track. ACM Press, 2007.
Kim Guldstrand Larsen and Bent Thomsen. A modal process logic. In LICS, pages 203–210. IEEE Computer Society, 1988.
Robin Milner. Communication and Concurrency. Prentice Hall, 1989.
Shiva Nejati. Refinement Relations on Partial Specifications. Master’s thesis, University of Toronto, 2003.
A. W. Roscoe. The Theory and Practice of Concurrency. Prentice Hall, 1998.
