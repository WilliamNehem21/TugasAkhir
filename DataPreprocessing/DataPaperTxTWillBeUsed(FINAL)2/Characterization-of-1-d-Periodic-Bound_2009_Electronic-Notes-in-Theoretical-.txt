

Electronic Notes in Theoretical Computer Science 252 (2009) 205–227
www.elsevier.com/locate/entcs

Characterization of 1-d Periodic Boundary Reversible CA
Sukanta Das 1
Department of Information Technology Bengal Engineering and Science University, Shibpur
Howrah, West Bengal, India 711103
Biplab K. Sikdar 2
Department of Computer Science & Technology Bengal Engineering and Science University, Shibpur Howrah, West Bengal, India 711103

Abstract
This paper reports characterization of one dimensional 3-neighborhood periodic boundary cellular automata (CA). It targets characterization of CA rules for efficient synthesis of reversible CA. The concept of reachability tree, as it has been proposed in [5,6,7], is redefined to classify the CA rules that can form a reversible CA. Such classification also enables synthesis of a reversible periodic boundary CA in linear time.
Keywords: Non-uniform cellular automata, reversible CA, reachability tree, periodic boundary, rule class.


Introduction
Since its inception [15], the homogeneous structure of Cellular Automata (CA) has been employed for modeling physical systems. The CA structure is signifi- cantly simplified during 1980s [16]. An 1-dimensional structure of CA, each cell having two states (0/1), has been proposed with the target to efficient analysis of CA state space. The uniform 3-neighborhood (self, left neighbor and right neigh- bor) dependency of the CA cells introduces the structural modularity. Though, it has been shown [17] that the 1-dimensional 3-neighborhood CA exhibits excellent

1 Email: sukanta@it.becs.ac.in
2 Email: biplab@cs.becs.ac.in
3 This research work is supported by the Sponsored Cellular Automata Research Projects, Bengal Engi- neering and Science University, Shibpur, India-711103.

1571-0661 © 2009 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2009.09.022

performance while modeling the physical systems, it is hard to view that the inter- acting objects in a dynamical system obey the same local rule (homogeneity) during its evolution. To model a wide variety of physical systems, non-homogeneous CA structure (also called as hybrid/non-uniform CA) is evolved as an alternative.
A number of researchers have set their attention to hybrid CA [3,4,8] since 1980s. Specially in V LSI domain [4], the 1-dimensional hybrid CA have gained a wide acceptance. A detail characterization of hybrid CA and its applications in V LSI domain [2,8] have been reported in [4].
In spite of its wide variations, the reversible CA was the main focus of CA research. The interesting properties of reversible CA had attracted researchers for a long time to model a number of applications in hydrodynamics, dynamical systems, heat conduction, wave scattering, nucleation, dendritic growth, physical system modeling, etc. [14]. The dynamical properties of reversible cellular automata were investigated in [9,10]. For V LSI applications, the reversible linear/additive CA structure had also been developed [4].
The issue of reversibility in CA states was addressed in [1,13]. In this work, we propose an alternative method to characterize reversible CA. The proposed characterization facilitates efficient analysis and synthesis of this class of CA. The set of 256 3-neighborhood CA rules are classified based on its potential to form the reversible CA. This effectively enables synthesis of such a CA in linear time.
The paper is organized as follows. The following section provides the prelimi- naries of cellular automata. Section 3 introduces the concept of reachability tree. Whereas Section 4 identifies the reversible CA, and Section 5 synthesizes reversible CA utilizing the structure of reachability tree. The rules that take part in forma- tion of reversible CA are identified in Section 6. The classification of such rules for efficient synthesis of reversible CA are reported in Section 7.

Preliminaries of Cellular Automata
A Cellular Automaton (CA) consists of a number of cells organized in the form of a lattice. It evolves in discrete space and time. Each cell of a CA stores a discrete variable at time t that refers to the present state of the cell. The next state of the cell at (t + 1) is affected by its state and the states of its neighbors at time t. In this work, we concentrate on such 3-neighborhood (self, left and right neighbors) CA, where a CA cell is having two states - 0 or 1. Therefore, the next state St+1
of the ith CA cell is specified by the next state function fi as

(1)
St+1 = fi(St	, St, St	)

i	i−1	i	i+1

St	, St and St
are the present states of left neighbor, self and right neighbor of

i−1	i	i+1
the ith CA cell at time t.
The collection of states of the cells St = (St, St, ··· , St ) at time t is the present
1	2	n
state of a CA. Therefore, the next state of an n−cell CA is determined as

(2)
St+1 = (f1(St, St, St), f2(St, St, St ), ··· , fn(St
, St , St	))

0	1	2
1	2	3
n−1
n	n+1



Fig. 1. Block diagram of an n−cell periodic boundary CA

0	 	0

Fig. 2. Block diagram of an n−cell null boundary CA

Table 1
Truth table for rule 90, 150 and 75
Present state : 111 110 101 100  011 010 001 000 Rule

Note: RMT stands for Rule Min Term. The value 0/1 noted on 3rd/4th/5th row shows the output of the three variable switching function.
If St = St and St	= St (that is, left neighbor of the left most cell is the right most
0	n	n+1	1
cell and vice versa), then the CA is referred to as periodic boundary CA (Fig. 1).

On the other hand, if St = 0 (null) and St
= 0 (null), the CA is null boundary

0	n+1
(Fig. 2). In this work, we concentrate on the characterization of periodic boundary
CA.
If the next state function of the ith cell is expressed in the form of a truth table, then the decimal equivalent of its output is conventionally referred to as the ‘Rule’ Ri [16]. In a two-state 3-neighborhood CA, there can be a total of 28 (256) rules. Three such rules 90, 150, and 75 are illustrated in Table 1. The first row of the table lists the possible 23 (8) combinations of the present states of (i − 1)th, ith and (i + 1)th cells at time t. The last three rows indicate the next states of the ith cell at (t + 1) for the rules, 90, 150 and 75 respectively.
Definition 2.1 The set of rules R =< R1, R2, ··· , Ri, ··· , Rn > that configure the cells of a CA is called the rule vector.
Definition 2.2 A CA is uniform if R1 = R2 = ··· = Rn; otherwise the CA is
hybrid/non-uniform.
Rule Min Term (RMT ): From the view point of Switching Theory, a combination of the present states (as noted in the 1st row of Table 1) can be viewed as the Min

Term of a 3-variable (St	, St, St
) switching function. Therefore, each column of

i−1	i	i+1
the first row of Table 1 is referred to as Rule Min Term (RMT ). The column
011 in the truth table (Table 1) is the 3rd RMT . The next states corresponding






	
Fig. 3. State transitions of a reversible CA < 202, 195, 105, 165 >

to this RMT are 1 for Rule 90 and 75, and 0 for Rule 150. The characterization reported in the following section is based on the analysis of RMT s of the CA rules. The next state functions fis for the rules 90 and 150 employ XOR logic. These rules are called linear rules. On the other hand, rule 75 is a non-linear one. Out of total 256 rules, 14 employ only XOR/XNOR logic. These are referred to as linear/additive rules. Other rules employ nonlinear logic functions (AN D, OR,
etc.).
Definition 2.3 Whenever all the Ris (i = 1, 2, ··· , n) of a rule vector R are lin- ear/additive, the CA is referred to as Linear/Additive CA, otherwise the CA is a Nonlinear one.
Definition 2.4 A rule is Balanced if it contains equal number of 1s and 0s in its 8−bit binary representation; otherwise it is an Unbalanced rule.
The rules shown in Table 1 are the balanced rules. On the other hand, rule 171 with five 1s in its 8-bit representation (10101011) is an unbalanced rule.
The sequence of states generated (state transitions) during its evolution with time directs the CA behavior (Fig. 3 and Fig. 4). The state transition diagram of a CA may contain cyclic and non-cyclic states (a state is called cyclic if it lies
in a cycle) and based on this, the CA can be categorized as either reversible or
irreversible CA.
Definition 2.5 A CA is reversible if it contains only cyclic states in its state transition diagram; otherwise the CA is irreversible.
In a reversible CA, the initial CA state repeats after certain number of time steps (Fig. 3). Therefore, all the states of a reversible CA are reachable from some other states and each state has exactly one predecessor. On the other hand, in an irreversible CA (Fig. 4), there are some states that can not be reachable (non- reachable states) from any other state. Moreover, some states of such a CA are having more than one predecessor [11,12]. For example, the states marked as 2, 4, 5, 10 and 15 of Fig. 4 are the non-reachable states, whereas 3, 6, 11 and 14 have more than one predecessor.


	
Fig. 4. State transitions of an irreversible CA < 165, 171, 75, 202 >
Reachability tree
Reachability Tree, we proposed in [5,6,7], is a binary tree that represents the reach- able states of a CA. Each node of the tree is constructed with RMT (s) of a rule (Section 2). The left edge of a node is referred to as the 0-edge and the right edge is as 1-edge (Fig. 5). The number of levels in a reachability tree, for an n−cell CA, is (n + 1). The root node is at Level 0 and the leaf nodes are at Level n. The nodes at Level i are constructed from the RMT s of (i + 1)th CA cell rule Ri+1. The number of leaf nodes in the reachability tree denotes the number of reachable states of the CA. A sequence of edges from the root to a leaf node, representing an n−bit binary string, is the reachable state, the 0-edge represents 0 and 1-edge represents 1.
The RMT s of any two consecutive cell rules Ri and Ri+1 influence the formation of next state of a CA. Since the RMT s are of 3-bit, a three bit window can be considered to get next state of the CA [6]. For example, a window with value (101) at ith cell corresponds to RMT 5 of Ri. If the window for ith cell is (bi−1bibi+1), bi = 0/1, then the window for (i + 1)th cell is either (bibi+10) or (bibi+11). In other words, if the ith CA cell changes its state following the RMT k (decimal equivalent of bi−1bibi+1) of rule Ri, then the (i + 1)th cell can generate the next state based on the RMT 2k mod 8 (bibi+10) or (2k + 1) mod 8 (bibi+11) of rule Ri+1. All such relationships between the RMT s of Ri and Ri+1, while computing next state of a CA, is shown in Table 2. The relations, noted in the table, play an important role in characterizing the CA behavior configured with different cell rules.
Definition 3.1 Two RMT s are sibling at level i + 1 if these are resulted in from the same RMT s at level i of the Reachability Tree.
The RMT s 0 and 1 are the sibling RMT s as these two are resulted in either from RMT 0 or from RMT 4 (Table 2), and these sibling RMT s are associated with a single node. Therefore, if a node of Reachability Tree associates an RMT k, it also associates the sibling of k.
The reachability tree for a CA < 165, 171, 75, 202 > is shown in Fig. 5. The RMT s of CA rules are noted in Table 3. The decimal numbers within a node of Fig. 5, at level i, represent the RMT s of the CA cell rule Ri+1 following which the

Table 2
Relationship between RM T s of cell i and cell (i + 1) for next state computation




A
{1}, {3} 0
{4}, {6}



1 {0}, {2}
{5}, {7}
Level 0




{2}, {6} 0
{}, {4}


B	{3}, {7}
1 {0,1}, {5}


{}, {4}
{2}, {6} 0


C

Level 1


{6,7},{6,7},{0,1,2,3},{2,3}	Level 2

{4}, {4}
{}, {} 0
D  {}, {}
1 {}, {1}
{}, {}
{}, {}

J
E {6}, {6}	{}, {}	F
1 {1,3}, {3} {5},{5}

{}, {0}
{}, {}
{2}, {2}	G
{7}, {7}

{0}, {}
{}, {}




Level 3


{0}, {}
H 1 {}, {1} {}, {} I

{}, {}
{4}, {5} 0 K 1 {},{}
{},{} 0 L 1{},{}
{}, {} M 1 {},{1} {4},{5}0 N 1 {},{}
{0},{}0 O

{},{}

{}, {} 0
{},{} {},{}
1 {}, {3}
{2}, {}
{6},{7}{2},{}
{},{3}{}, {}
{},{} {},{}
{6},{7} {},{}
{},{}

{0,1},{}	{},{2,3} R
{},{},
{0,1},{2,3}
{}, {}
{},{}
{},{}	X
{},{}
{0,1},{}

C’ Level 4

{},{}
{},{}
{},{6,7}
{4 5},{}
{4,5},{6,7} {4 5},{}
{},{6,7}
{4,5},{6,7}  {},{}

P	O	S	T	U	V	W
Y	Z	A’	B’



Fig. 5. Reachability Tree for the CA < 165, 171, 75, 202 >

cell (i + 1) can change its state. For example, the root node (level 0) is constructed with all the 8 RMT s – 0, 1, 2, 3, 4, 5, 6 and 7. The sibling RMT s (Definition 3.1)
of root are grouped to form the sets – {0, 1}, {2, 3}, {4, 5} and {6, 7}. The RMT s (of a rule) for which we follow an edge (0-edge or 1-edge) are noted at the edge.
An RMT of a rule is a member of ith set, implies that the RMT is derived from set i of the root (0 ≤ i ≤ 3 and set0 is {0, 1}, set 1 is {2, 3}, set 2 is {4, 5} and {6, 7} is the set 3). Such grouping facilitates the characterization of periodic boundary CA.
For the RMT s 1 (set 0), 3 (set 1), 4 (set 2) and 6 (set 3) of 165 (Table 3), the

Table 3
Binary values of the CA < 105, 128, 171, 65 > cell rules
RMT	111 110 101 100 011 010 001 000 Rule

next states are 0 and it is 1 for the RMT s 0 (set 0), 2 (set 1), 5 (set 2) and 7 (set 3). Therefore, at level 1, the node following 0-edge of level 0 (node B of Fig. 5) contains the RMT s {2, 3}, {6, 7}, {0, 1} and {4, 5} (Table 2). Similarly, the node
C following 1-edge of level 0, contains the RMT s {0, 1}, {4, 5}, {2, 3} and {6, 7}. The dotted edge from a node (node E, node I, ·· ·) indicates that the node does not have the corresponding edge (0-edge). The dotted 0-edge at node E signifies
that any state started with 010 is non-reachable.
A number of RMT s are dropped from the nodes at level (n−2) (level 2 of Fig. 5) and level (n − 1) – that is, level 3 of Fig. 5. The RMT s of the nodes at level (n − 2) correspond to the CA cell rule Rn−1. The RMT s of set 0 and set 1 assume that the cell n is always 0 while we computing the next state, whereas the RMT s of set 2 and set 3 assume that the cell n is always 1. Therefore, odd RMT s of set 0 and set 1, and even RMT s of set 2 and set 3 are invalid, and so striked out. Similarly, the RMT s of the nodes at level (n − 1) correspond to the CA cell rule Rn. Therefore, the RMT s of set 0 for Rn (at level (n − 1)) should generate the RMT s of set 0 for R1, since next to the last cell is the first cell. However, few RMT s of set 0 at level (n − 1) may not generate set 0 for R1, these are marked as invalid, and striked out. Similar action is taken for other sets. In node H (Figure 5), RMT 1 of set 0 is striked out as it can not generate set 0 for R1 ({0, 1}). Similarly, RMT 0 of set 1 is striked out.
The reachability tree was defined originally to characterize null boundary CA [5,6,7]. However, the structure shown in Fig. 5 can model a periodic bound- ary CA considered in this work. This redefined structure of the reachability tree provides means to characterize the reversibility periodic boundary CA.
Identification of reversible CA
This section reports the theoretical background for identification of a reversible pe- riodic boundary CA. The concept of reachability tree, introduced in earlier section, is utilized to develop the theoretical framework.
Theorem 4.1 The reachability tree of a reversible CA is balanced.
Proof. Since all states of a reversible CA are reachable, the number of leaf nodes

in the reachability tree, for the n−cell reversible CA, is 2n (number of states). Therefore, the tree is balanced as it is a binary tree of (n + 1) levels.	 
The above theorem points to the fact that the identification of a reversible CA can be done by constructing the reachability tree of the CA. If there is no non- reachable state in a tree, the CA is reversible.
Theorem 4.2 The reachability tree of a 3-neighborhood periodic boundary CA is balanced iff:
each leaf edge is resulted from single RMT ,
each immediate predecessor (edge) of the leaf edge is resulted from two RMT s, and
all other edges are resulted from 4 RMT s.
Proof. Let consider, the number of RMT s, dictates an edge, is lesser than that is mentioned in (i) to (iii). That is,
there is no RMT to dictate a leaf edge. It implies the tree is unbalanced.
an edge predecessor of the leaf edge is resulted from single RMT . Therefore, the next node to that edge is constructed with 2 RMT s. Since the node is at level (n − 1), one RMT must be striked out since it is sibling of the other and both are the member of a single set. This single valid RMT can generate single edge. Hence the other is empty. Therefore, the tree is unbalanced.
Say, an intermediate edge is resulted from 3 RMT s. Therefore, the next node
(N) to that edge is constructed with 6 RMT s. At the next level, the node N may have two edges that may be resulted from 1 and 5, 2 and 4, or 3 and 3 RMT s. In best case, the tree may remain balanced up to level (n − 2). In level (n − 2), one can find at least one node that comes from the edge which is resulted from 1 or 2 or 3 RMT s. Therefore, the node is constructed from 2, 4 or 6 RMT s. Since the node is at level (n − 2), half of the RMT s are invalid. Hence, effectively the node is constructed with 1, 2 or 3 RMT s. If the number of RMT is one, then obviously the tree is unbalanced. Otherwise, at least one edge of that node is resulted from single RMT , which results in an unbalanced tree (ii).
If an intermediate edge, on the other hand, is resulted from more than 4 RMT s, then an edge can be found which is resulted from less than 4 RMT s. This implies, the tree is unbalanced (iii). Now if a predecessor edge of the leaf edge is resulted from more than two RMT s, then the other edge is resulted from less than two RMT s, as the half of the RMT s that construct nodes at level (n − 1) are striked out. Hence the tree is unbalanced (by ii). Similarly, if a leaf edge is resulted from more than 1 RMT , then the tree is also unbalanced. Therefore, if the number of RMT s, that dictate an edge, is not same as it is mentioned in (i) to (iii), the reachability tree is unbalanced. Hence the proof.	 
Corollary 4.3 The nodes of a reachability tree corresponding to 3-neighborhood reversible periodic boundary CA are constructed with
2 RMT s if the nodes are leaf nodes,
4 RMT s if the nodes are immediate predecessors of the leaves, and

Table 4
Binary values of the CA < 202, 195, 105, 165 > cell rules
RMT	111 110 101 100 011 010 001 000 Rule

8 RMT s for all other nodes;
where the RMT s of a node may not be unique.
Proof. According to Theorem 4.2, for a reversible CA
leaf edges are resulted from single RMT ,
the predecessors of the leaf edge are resulted from 2 RMT s, and
all other edges are resulted from 4 RMT s.
Hence, (i) the leaves are constructed with 2 RMT s, (ii) the immediate prede- cessors of the leaves are constructed with 4 RMT s, and (iii) all the other nodes are resulted from 8 RMT s.	 
Corollary 4.4 The nodes of the reachability tree of a reversible CA are balanced over their RMT s.
Proof. Since the reachability tree for a reversible CA is balanced, each node has a left child (0-edge) and a right child (1-edge). It is obvious from Theorem 4.2, if a child is resulted from k number of RMT s, another child is also resulted from k RMT s. Hence the node is balanced over its RMT s.	 
Example 4.5 Consider the 4-cell CA R =< 202, 195, 105, 165 >. Figure 6 is the reachability tree of the R. The CA is reversible. Figure 6 is balanced. Each node of the tree is also balanced over its RMT s.
Based on the above discussion, we next propose a method to identify a reversible CA. The following algorithm (CheckReversible) scans a CA rule vector from left to right, and virtually constructs a reachability tree. It then verifies whether Theorem
4.2 is satisfied for the given CA rule vector – that is, whether the edges are resulted from 4 RMT s (or in some special cases, 2 or 1 RMT ) or not. If such an edge is found, it is an irreversible CA. The algorithm replaces the duplicate nodes having same RMT sets, if any.
Algorithm 1 CheckReversible
Input: < R1, R2, ··· , Ri, ··· , Rn > (an n-cell CA)
Output: reversible or irreversible.
Step 1: Let S0 = {s0, s1, s2, s3} and S1 = {s0, s1, s2, s3} be the two sets of RMT
0	0	0	0	1	1	1	1
sets where (i) the RMT s of S0 and S1 are 0 and 1 respectively for R1, and (ii) the







{0,1},{}
{0,1},{}


{2,3},{}
{},{4,5}
Level 1



Level 2

{},{2}
{},{0}
{2}, {}
{0},{}
{4},{}	{6},{}
{},{4}
{},{6}

{7},{}
{5},{}
{1}, {}
{3},{}
{},{1}
{},{3}
{},{7}
{},{5}


 Level 3

{},{}
{},{5}

{},{1}
{},{}

{4},{}

{},{}
{},{}
{0},{}
{},{}
{0},{}
{4},{}

{},{}

{},{5}

{6},{}
{},{}
{},{}
{2},{} {},{}
{2},{}
{6},{}
{},{}
{},{3}
{},{}
{},{}
{},{3}
{},{}

{1},{}
{4,5},{}
{},{2,3}
{},{}
{},{2,3}, {},{},
{},{}	{4,5},{}
{0,1},{},
{},{}
{0,1}, {}
{},{}
{},{}
{},{6,7}
{},{}
{},{6,7}
{},{2,3}
{},{}



Fig. 6. Reachability tree of a reversible CA < 202, 195, 105, 165 >


members of sk
are either φ, RMT 2k, RMT (2k + 1) or RMT s 2k & (2k + 1),

j = 0/1 and k = 0, 1, 2, or 3.
If |s0| + |s1| + |s2| + |s3| /= |s0| + |s1| + |s2| + |s3|, report the CA as irreversible

0	0	0	0
and return.
1	1	1	1

Step 2: For i =2 to n repeat Step 3 to Step 6 Step 3: For each set of RMT sets,
ﬁnd the RMT s that construct next level nodes of the reachability tree considering Table 2.
Step 4: (i) If i = n − 1, remove the odd RMT s from s0 and s1, and even RMT s
j	j
from s2 and s3.
j	j

(ii) If i = n, remove those RMT s from sk
that can generate RMT s 2k,

(2k + 1) for R1.
Step 5: Remove the duplicate nodes having same RMT sets, if any.

Step 6: Distribute the RMT s of each node into two sets S'
and S'
based on Ri,

'	0'	1'
2'	3'
'	0'	1'
2'	3'	k'	k

where S0 = {s0 , s0 , s0 , s0 } and S1 = {s1 , s1 , s1 , s1 }, sj  is derived from sj and
the RMT s of S' and S' are 0 and 1 respectively.

0'	1'	2'	3'
0'	1'
2'	3'

If |s0 |+|s0 |+|s0 |+|s0 | /= |s1 |+|s1 |+|s1 |+|s1 |, report the CA as irreversible
and return.
Step 7: Report the CA is a reversible CA and return.
Complexity: Since the maximum number of possible RMT sets is fixed, the exe- cution time of Algorithm 1 depends on n only (step 2). Therefore, the complexity of Algorithm 1 is O(n).
Example 4.6 This example illustrates the execution steps of Algorithm 1. Con- sider the 4-cell CA < 202, 195, 105, 165 > as input to Algorithm 1.  For rule

202 (R1), s0
= {0}, s1
= {2}, s2
= {4, 5} & s3
= {}, and s0
= {1},

s1 = {3}, s2 = {} & s3 = {6, 7} (Table 4). Here, S0 = {{0}, {2}, {4, 5}, {}} and
1	1	1
S1 = {{1}, {3}, {}, {6, 7}}. Hence, |s0| + |s1| + |s2| + |s3| = |s0| + |s1| + |s2| + |s3|.
0	0	0	0	1	1	1	1

As next step, for both the sets S0 and S1, the algorithm finds the RMT s for nodes at level 1 (step 3). The nodes are {{0, 1}, {4, 5}, {0, 1, 2, 3}, {}} and {{2, 3}, {6,

7}, {}, {4, 5, 6, 7}} (level 1 of Fig. 6). For each node, S'
and S'
are constructed

(step 6). Since the number of RMT s in S'
& S'
are same (4) for both the nodes,

no conclusion can be drawn. In the next step, we get 4 nodes as shown in level 2 of Fig. 6. The nodes correspond to Rn−1 = 105. So half of the RMT s of each node are striked out (step 4 (i)). Based on rule 105, we get the nodes of level 3. A number of RMT s are then removed (step 4 (ii)). However using rule 165, the leaf nodes are obtained. It is, therefore, declared in step 7 that the CA is reversible.
Synthesis of reversible CA
Synthesis of reversible CA is the reverse process of analysis/ identification reported in the earlier section. The algorithm SynthesizeReversibleCA 1 proposes an efficient synthesis scheme. Input to the algorithm is n, the number of cells/ size of the CA to be synthesized, and the output is an n-cell reversible CA. It determines the (i+ 1)th cell rule of the reversible CA through inspection of RMT s of the rule Ri, selected for the CA cell. The RMT s are set in such a way that each edge of the reachability tree is resulted from four RMT s (in some special cases, two or one RMT ) as guided by Theorem 4.2.
Algorithm 2 SynthesizeReversibleCA 1 Input: n (the number of CA cells).
Output: < R1, R2, ··· , Ri, ··· , Rn > (an n−cell reversible CA).
Step 1:	Select a balanced rule as R1.	Let S0 = {s0, s1, s2, s3} and S1 =

{s0, s1, s2, s3} be the two sets of RMT sets, where
0	0	0	0

1	1	1	1
the RMT s of S0 and S1 are 0 and 1 respectively for R1, and

the members of sk
are either φ, RMT 2k, RMT (2k + 1), or RMT s 2k &

(2k + 1), for j = 0/1 and k = 0, 1, 2, or 3. Step 2: For i =2 to n repeat Step 3 to Step 6 Step 3: For each set of RMT sets
ﬁnd the RMT s that construct next level nodes of the reachability tree, considering Table 2.
Step 4: (i) If i = n − 1, remove the odd RMT s from s0 and s1, and even RMT s
j	j
from s2 and s3.
j	j

(ii) If i = n, remove those RMT s from sk
that can generate RMT s 2k,

(2k + 1) for R1.
Step 5: Remove the duplicate nodes, if any.
Step 6: Find a rule Ri which partitions the RMT s of each node into two sets S'

'	'	0'
1'	2'	3'
'	0'	1'	2'	3'
0'	1'

and S1, where S0 = {s0 , s0 , s0 , s0 } & S1 = {s1 , s1 , s1 , s1 }, and |s0 | + |s0 | +

2'	3'
0'	1'	2'
3'	k'	k	'

|s0 | + |s0 | = |s1 | + |s1 | + |s1 | + |s1 |; sj  is derived from sj and the RMT s of S0
and S' are 0 and 1 respectively.
Step 7: Report < R1, R2, ··· , Ri, ··· , Rn > as an n−cell reversible CA.
Complexity: Since the maximum number of possible RMT sets is fixed, the exe- cution time of Algorithm 2 depends on n only (step 2). Therefore the complexity

of Algorithm 2 is O(n).
From Theorem 4.2 and Algorithm 1, it can be observed that each rule of a CA
plays an important role in determining the reversible behavior of a CA.
Definition 5.1 [6] A rule is a irreversible rule if its presence in a rule vector makes the CA irreversible. Otherwise, it is a reversible rule.
Example 5.2 The 4−cell CA with rule vector < 202, 195, 105, 165 > is a reversible CA. Therefore, all of the four rules are reversible rules. On the other hand, a CA with rule vector < 202, 196, 105, 165 > is an irreversible CA. The rule 196 makes the CA irreversible. That is, 196 is an irreversible rule. 196 (11000100) is an unbalanced one. The number of 0s in the RMT s of 196 is 5.
Characterization of reversible rules also enables efficient synthesis of a reversible CA of an arbitrary length. The following section reports such characterization. The reversible CA synthesis scheme based on this characterization is introduced in Section 7.

Reversible rules
The reversible rules are considered to be the basic building blocks while synthe- sizing a reversible CA. This section explores the properties of reversible rules in 3-neighborhood dependency.
Theorem 6.1 An unbalanced rule is an irreversible rule.
Proof. Let us consider a CA R =< R1, R2, ··· , Ri, ··· , Rn >, where Ri is an unbalanced rule and R'' =< R1, R2, ··· , Ri'', ··· , Rn > is a reversible CA. All the rules of R and R'' are same except the ith rule.
The reachability tree of R is balanced up to (i − 1)th level as R'' is reversible
CA and having the same rules in R for 1 to (i − 1)th cells.
Case 1: i < n − 1: Since Ri is unbalanced, there exists at least one node at (i − 1)th level with a child that is not resulted from exactly 4 RMT s.
Case 2: i = n − 1: There exists at least one node at (n − 2)th with a child which is resulted from 1 (or 3) RMT s.
Case 3: i = n: Since Rn is unbalanced, a few leaf edges are not resulted from exactly single RMT .
The above discussion implies that the tree is unbalanced (Theorem 4.2). Therefore, the CA with rule vector R is irreversible. Hence the proof.	 
There are 8C4 = 70 balanced CA rules in 3-neighborhood dependency. All the balanced rules are reversible rules in case of 3-neighborhood periodic boundary CA. These are listed in Table 5. The reversible rules can only form the reversible CA. However, any sequence of reversible rules in a CA rule vector does not necessarily imply that the resulted CA is a reversible CA.
Theorem 6.2 Only the speciﬁc sequence of reversible rules forms a reversible CA.

Table 5
List of reversible rules in periodic boundary 3-neighborhood dependency







{
{0,1},{}
{0,1},{}
{2,3},{}
{},{4,5}







Fig. 7. Reachability tree for an irreversible CA < 202, 195, 165, 105 > designed with reversible rules

Proof. Let us consider the reversible rules of an n-cell CA are configured in such a way that the CA loaded with any seed produces two types of states –
{··· didi+1 ·· ·} and {··· d'd'	·· ·}, where di(= 0/1) is the state of ith cell while
i i+1
' is its complement. Therefore, for 2n number of current states, the next states

are S = {··· didi+1 ··· , ··· d'd'
·· ·}. The maximum possible cardinality of S is

i i+1
2 × 2n−2 = 2n−1. Since the number of next states is lesser than that of current
states, there exists at least a state in S with more than one predecessor. Therefore, the CA is irreversible. Hence any sequence of reversible rules can’t form reversible CA.	 
Example 6.3 The CA < 202, 195, 105, 165 > is reversible (Example 4.6). However, the CA R =< 202, 195, 165, 105 > is an irreversible CA even though each of the rules in R is a reversible rule (Table 5). The reachability tree for R is shown in Fig. 7.
Theorem 6.2 directs that the reversible rules are interrelated. The sequence of reversible rules that form a reversible CA follows a specific relation. The next section reports classification of 70 reversible rules based on the relation that must be followed to form a rule sequence for the reversible CA.

Table 6 Combinations of RM T s for nodes

Classification of reversible rules
It is reported in the earlier section that there are some specific relations among the reversible rules and that should be considered while synthesizing a reversible CA. This section identifies the relations and reports classification of reversible rules to find the desired sequence of rules for a reversible CA rule vector. To facilitate the classification, the next subsection reports the characterization of reachability tree for reversible CA, whereas the classification of rules is presented in Section 7.2. Section 7.3 establishes the relationship among the rules of different classes.
Reachability tree for reversible CA
Since the reachability tree for a reversible CA is balanced (Theorem 4.1), there are 2i nodes at level i of the tree. However, all the nodes may not be unique. Two or more similar nodes at a level produce the same subtree. Moreover, since the nodes of level i (i < n − 1) are constructed with 8 RMT s (Corollary 4.3), the combinations of RMT s can be found same for a number of nodes at that level. The following lemma fixes the number of unique RMT combinations that construct the nodes.
Lemma 7.1 Maximum possible unique RMT combinations at level i nodes of a reachability tree for n-cell reversible CA is 35, where i < n − 1.
Proof. Since the sibling RMT s (Definition 3.1) are associated with the same node in the reachability tree and there are 4 sets of sibling RMT s (0 & 1, 2 & 3, 4 & 5, and 6 & 7), 44 combinations of RMT s are possible for the nodes. However, out of these a number of combinations are the same. For example, the RMT combinations
{2, 3, 4, 5, 0, 1, 6, 7} and {0, 1, 2, 3, 4, 5, 6, 7} are similar. Therefore, unique combinations of RMT s are lesser than 44 combinations. The unique combinations of RMT s are noted in Table 6. Only even RMT s are recorded in the table and odd RMT corresponding to each even RMT is omitted for simplification. Number of combinations found in Table 6 is 35.	 
The nodes of reachability tree for a reversible CA are balanced over their RMT s (Corollary 4.4). Now if a node is constructed with a set of single sibling RMT s (for

example, [0, 0, 0, 0], [2, 2, 2, 2], etc.), then that particular sibling RMT is to be
balanced (balanced over [0, 1], [2, 3], etc). Similarly, if a node, constructed with 4 sibling RMT s (that is, 8 RMT s), consists of 3 same sibling RMT s (for example, [2, 2, 2, 4], [4, 4, 4, 6], etc.), then the sibling RMT s are balanced (balanced over [2, 3]
& [4, 5], [4, 5] & [6, 7], etc). Table 7 shows the RMT groupings that are balanced over {0, 1} while a particular RMT combination for a node is given. It is to be noted that in Column 2 only even RMT of each sibling RMT pair is reported for simplicity.
Table 7 Combinations of RM T s for nodes


Table 7 points out that a few RMT combinations, like 2nd and 11th combina- tions, result in the same type of RMT groupings. Therefore, this kind of combina- tions can be supported by the same CA rules. Hence, if we concentrate on groupings of RMT s instead of nodes, we can get lesser number of such groupings of RMT s. The following lemma directs us to reach unique RMT combinations.
Lemma 7.2 There exists a node at any level of reachability tree that dictates the RMT set {0, 1} is to be balanced iff there is another node for which RMT set {2, 3} is balanced. Similarly, there exists a node at any level of reachability tree that dictates the RMT set {4, 5} is to be balanced iff there is another node for which RMT set {6, 7} is balanced.
Proof. The RMT set {0, 1} of a rule is to be balanced while the node is [0, 0, 0, 0, 1, 1, 1, 1] (Table 7). Therefore, the edge that connects the node with its parent is resulted from RMT 0 or4 (Table 2). Hence the other edge from the parent is to be resulted from 1 or 5. That is, the other child node of the parent is constructed with RMT s [2, 2, 2, 2, 3, 3, 3, 3]. Therefore, the RMT set {2, 3} is to be balanced

since the reachability tree is for a reversible CA. The reverse is also true. Hence the proof. Similarly, it can be proved that, a node dictates the RMT set {4, 5} is to be balanced iff there is another node for which RMT set {6, 7} is balanced. 
The lemma guides that if RMT combinations for node 1 (Table 7) are supported by a reversible rule Ri, then Ri also supports node 21. Similarly, if node 31 is supported by Ri, then node 35 is also supported by Ri.
Lemma 7.3 There exists a node at any level of reachability tree that dictates each of two sibling RMT sets is balanced iff there is another node for which each of another two sibling RMT sets is balanced.
Proof. Let us consider two sibling RMT sets – {0, 1} and {4, 5}. Now, each of these two sets is to be balanced while the node is either [0, 0, 0, 1, 1, 1, 4, 5] or
[0, 1, 4, 4, 4, 5, 5, 5]. If the node is [0, 0, 0, 1, 1, 1, 4, 5], the edge that connects the node with its parent is resulted from RMT 0 or 4, and 2 or 6 (Table 2). Hence the other edge from the parent is to be resulted from 1 or 5, and 3 or 7. That is, the other child node of the parent is constructed with RMT s [2, 2, 2, 3, 3, 3, 6, 7]. Hence, each of the sibling RMT set {2, 3} and {6, 7} is to be balanced. On the other hand, if the node is [0, 1, 4, 4, 4, 5, 5, 5], the other child node of its parent is
constructed with [2, 3, 6, 6, 6, 7, 7, 7]. Then also, each of the sibling RMT set {2, 3} and {6, 7} is to be balanced. Therefore, the theorem holds for two sibling RMT sets – {0, 1} and {4, 5}. In similar fashion it can be shown that the theorem holds for another two sibling sets {0, 1} and {6, 7}.
Now consider another two sibling RMT sets {0, 1} and {2, 3} are balanced. In this case, the node is either N1 =[0, 0, 0, 1, 1, 1, 2, 3] or N2 =[0, 1, 2, 2, 2, 3, 3,
3]. If the node is of type N1 =, then its one possible parent is P1 =[0, 1, 2, 3, 4, 4, 5, 5]. RMT s 0, 1 and 4 of P1 are grouped with the same RMT value (d, d = 0/1) to form the N1 =. That is, RMT s 2, 3 and 5 are also grouped with d'. It implies, there is another node of type P2 =[0, 1, 2, 3, 6, 6, 7, 7] at the same level of P1 (Lemma 7.2). To make P2 balanced, RMT s 2, 3 & 6 or RMT s 2, 3 & 7 are to be grouped with d'. Therefore, one child of P2 is either [4, 4, 4, 5, 5, 5, 6, 7] or [4, 5,
6, 6, 6, 7, 7, 7]. Hence, each of the sibling RMT set {4, 5} and {6, 7} is balanced. The same is true for all possible parents of N1. Similarly, if the node is N2 instead of N1, it can be shown that {4, 5} and {6, 7} are balanced. That is, the proposition – if {4, 5} and {6, 7} are balanced, then {0, 1} and {2, 3} are also balanced, can be proved following the similar logic. Hence the proof.	 
The above lemma states that the rules, for which each sibling RMT set is balanced, can support all the nodes where a single set of sibling RMT s appears thrice.
Lemma 7.4 If RMT s [i, i, j, k] construct a node (sibling of each RMT is omitted for simplicity) which is supported by a reversible rule Ri, then the rule also supports another node with RMT s [l, l, j, k], where i, j, k and l are the representative RMT s for sibling RMT s.

Proof. Since Ri is a reversible rule, so RMT s of S1 =[i, i+1, j, j+1, k, k+1, l, l+1] are balanced over {0, 1}. Again, the RMT s of S2 =[i, i+1, i, i+1, j, j+1, k, k+1] of a node are balanced (Corollary 4.4). Therefore, S1 + S1 − S2 = [j, j+1, k, k+1, l, l+1, l, l+1] is also balanced. Hence, the rule can support the node with RMT s [l, l, j, k] (sibling RMT s are omitted for simplicity).	 
Since our target is to classify reversible rules and to establish the relationship among the rules, we shall concentrate on rules, rather than individual nodes. It is evident from Lemma 7.2, Lemma 7.3 & Lemma 7.4 and Table 7 that to support all the unique nodes, lesser number of groupings of RMT s are sufficient. These groupings are noted in Table 8.
Table 8 Combinations of RM T s for nodes


Formation of class
Let us consider, the rules R1, R2, ·· ·, Ri are selected for the cell 1, cell 2, ·· ·, cell i respectively to form an n−cell reversible CA satisfying Theorem 4.1 and Theorem 4.2. Further, consider S is the set of all reversible rules (|S| = 70). Now, the CA cell (i + 1) can support a set of rules Sj ∈ S so that any rule of Sj can be selected as Ri+1, satisfying the theorems 4.1 and 4.2. We refer the class of (i + 1)th cell as C that supports the rules of Sj. The term class for cell (i + 1) as well as for the Sj is used interchangeably.
Lemma 7.5 There are 15 possible classes of reversible CA cells in 3-neighborhood dependency.
Proof. There are 2i nodes at the ith level of reachability tree of a group CA. However, the RMT combinations for all the nodes may not be unique. Since there are 12 possible unique group of RMT s (Table 8), the rule Ri+1, selected as (i + 1)th CA cell rule, can support any one of the 12 groups or the combination of two or more unique groups. Therefore, if only individual grouping is supported by Ri+1, 12 classes are possible. The classes are marked as class 1, class 2, ..., class 12 in

Table 9. If Ri+1 is the combination of two unique groupings, another 3 classes are possible which support the combination of 4 & 5, 4 & 6 and 5 & 6 (these are as class 13, class 14 and class 15 of Table 9). Any other combination is the duplication of these 15 combinations. Therefore, there are 15 classes of reversible rules. 

Table 9 Class Table


Relationship between Ri and Ri+1
The relationship between Ri and Ri+1 signifies the identification of the class of Ri+1 from the known Ri and its class. For example, let us consider the class of Ri is 4 (Fig. 8). Therefore, two unique nodes having RMT s {0, 1, 2, 3} and {4, 5, 6, 7} are available at the (i − 1)th level of the reachability tree. Now consider the RMT s of Ri are clustered as {0, 1, 4, 5} and {2, 3, 6, 7}, where the RMT s of a set
are the same, either 0 or 1. In Fig. 8(a), the RMT s {0, 1, 4, 5} are considered as 0,
and the RMT s {2, 3, 6, 7} as 1. Therefore, the RMT s are grouped as (0, 1), (2, 3), (4, 5) and (6, 7). Each edge of the nodes is resulted from any one of these groups. Hence two edges connecting the node having RMT s {0, 1, 2, 3} with its children are resulted from (0, 1) and (2, 3). Therefore, the two children (for next level) of

Ri :
Level i−1





Level i



Nodes of Ri+1
(two unique nodes − Class I)

Next rule class is 4
Ri :	Level i−1


Nodes of Ri+1 (four unique nodes − Class IV)


Next rule class is 13
Fig. 8. Determination of class relationship





that node are having RMT s {0, 1, 2, 3} and {4, 5, 6, 7} (Table 2) (Fig. 8(a)). Similarly, the children of another node having RMT s {4, 5, 6, 7} are constructed with RMT s {0, 1, 2, 3} and {4, 5, 6, 7} – that is, the nodes are same with the other two children. Therefore, the next level of the reachability tree contains two unique nodes having RMT s {0, 1, 2, 3} and {4, 5, 6, 7} (Fig. 8(a)). Hence the class of
Ri+1 is 4.
Further, if the RMT s of Ri are grouped as (0, 1), (2, 3), (4, 6), and (5, 7) (Fig. 8(b)), the nodes of level i, generated from the node of level (i − 1) with RMT s
{0, 1, 2, 3}, are having RMT s {0, 1, 2, 3} and {4, 5, 6, 7}. The other two nodes at level i, generated from the node with RMT s {4, 5, 6, 7}, are having RMT s {0, 1, 4, 5} and {2, 3, 6, 7} (Fig. 8(b)). In this case, the next level of reachability tree
contains four unique nodes having RMT s {0, 1, 2, 3}, {4, 5, 6, 7}, {0, 1, 4, 5}, and
{2, 3, 6, 7} (Fig. 8(b)). Therefore, the organizations of RMT s support the property of both the Class 4 and Class 5. Therefore, the class of Ri+1 is 13.

Table 10
Formation of class relationship between Ri and Ri+1




Table 10 partly displays the formation of relationship between reversible rules. Only 5 classes, 1, 4, 5, 8 and 13 are selected to illustrate the relationship. The first column shows the class of Ri. Column 2 notes the RMT s of nodes at level (i − 1). The grouping of RMT s for Ri is shown in column 3. RMT s within the braces are balanced over {0, 1} and RMT s within each bracket are having the same value (0/1). The RMT s of nodes at level i are shown in Column 4. Based on the nodes at level i, the class of Ri+1 is decided and is reported in Column 5. The ’*’ in column 2 indicates any combination of remaining RMT s.
The details of relationship among the classes are reported in Table 11. The first and second columns of the table represent the class of ith cell and the rule Ri respectively, whereas the class of the (i + 1)th cell corresponding to this pair (the class of ith cell and Ri) is noted in the last column. It can be observed that a rule can be the member of more than one class. For example, rule 15, 240 are the members of class 5, 6, 9, 10, and 15. Moreover, there are a few rules which are the member of all classes. For example, the rules of class 3 are the member of all 15 classes. Such rules are referred to as the complete rules.


Table 11
Class relationship of Ri and Ri+1


Definition 7.6 A rule is complete if it is the member of all classes.

Synthesis of R
The reversible CA synthesis scheme is proposed in Algorithm 2 (Section 5) directly utilizing the structure of reachability tree. This subsection reports a relatively simpler method to synthesize an n−cell reversible CA R =< R1, R2, ··· , Rn >, based on the class relationship noted in Table 11. However, an additional table is required to select the first rule R1. A part of all the possible R1 is shown in Table 12. The details on formation of Table 12 are beyond the scope of this work. The synthesis scheme selects R1 from Table 12 randomly and then class of R2.
The Ri+1s, for i =0 to n − 1, are selected from Table 11. Now based on the class of Rn and Table 11, the class of first rule is further determined. If this matches with the initially selected R1, then R = R1, R2, ··· , Rn is a reversible CA.

Table 12 First rule table

Conclusion
This work proposes the characterization of one dimensional 3-neighborhood periodic boundary reversible cellular automata (CA). The classified CA rules that can form reversible CA with the target to synthesize such a CA in linear time.

References
S. Amoroso and Y. N. Patt. Decision procedures for surjectivity and injectivity of parallel maps for tesselation structures. Journal of Computer and System Sciences, 6:448–464, 1972.
P. H. Bardell.  Analysis of Cellular Automata Used as Pseudo-random Pattern Generators.  In
Proceedings of International Test Conference, pages 762–768, 1990.
Kevin Cattel and J. C. Muzio. Synthesis of One Dimensional Linear Hybrid Cellular Automata. IEEE Trans. on CAD, 15:325–335, 1996.
P Pal Chaudhuri, D Roy Chowdhury, S Nandi, and S Chatterjee. Additive Cellular Automata – Theory and Applications, volume 1. IEEE Computer Society Press, USA, ISBN 0-8186-7717-1, 1997.
Sukanta Das, Anirban Kundu, Biplab K. Sikdar, and P. Pal Chaudhuri. Design of Nonlinear CA Based TPG Without Prohibited Pattern Set In Linear Time. JOURNAL OF ELECTRONIC TESTING: Theory and Applications, 21:95–109, January 2005.
Sukanta Das and Biplab K Sikdar. Classification of CA Rules Targeting Synthesis of Reversible Cellular Automata. In Proceedings of International Conference on Cellular Automata for Research and Industry, ACRI, France, pages 68–77, September 2006.
Sukanta Das, Biplab K Sikdar, and P Pal Chaudhuri. Characterization of Reachable/Nonreachable Cellular Automata States. In Proceedings of Sixth International Conference on Cellular Automata for Research and Industry, ACRI, The Netherlands, pages 813–822, October 2004.
P. D. Hortensius, R. D. McLeod, W. Pries, and H. C. Card. Cellular Automata Based Pseudorandom Number Generators for Built-In Self-Test. IEEE Trans. on CAD, 8(8):842–859, August 1989.
P. Kurka. Zero-dimensional dynamical systems, formal languages, and universality. Theory of Computing Systems, 32:423–433, 1999.
L. Margara, G. Mauri, G. Cattaneo, and E. Formenti. On the dynamical behavior of chaotic cellular automata. Theoretical Computer Science, 217:31–51, 1999.
Edward F. Moore. Machine models of self reproduction. In Arthur W. Burks, editor, Essays on Cellular Automata. University of Illinois Press, Urbana, 1970.
J. Myhill. The converse of moore’s garden of eden theorem. In Proceedings of American Mathematical Society, volume 14, pages 685–686, 1963.
T. Toffoli and N. Margolus. Invertible cellular automata: A review. Physica D, 45:229, 1990.
T. Toffoli and N. H. Margolus. Invertible cellular automata : A review. Physica D, 45:229–253, 1990.
John von Neumann. The theory of self-reproducing Automata, A. W. Burks ed. Univ. of Illinois Press, Urbana and London, 1966.
S. Wolfram. Statistical mechanics of cellular automata. Rev. Mod. Phys., 55(3):601–644, July 1983.
S. Wolfram. Cellular Automata and Complexity — Collected Papers. Addison Wesley, 1994.
