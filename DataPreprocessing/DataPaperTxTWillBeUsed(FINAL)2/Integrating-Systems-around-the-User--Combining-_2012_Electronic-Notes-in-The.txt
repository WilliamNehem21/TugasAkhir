Available online at www.sciencedirect.com


Electronic Notes in Theoretical Computer Science 285 (2012) 115–119
www.elsevier.com/locate/entcs

Integrating Systems around the User: Combining Isabelle, Maple, and QEPCAD in the Prover’s Palette
Laura I. Meikle1 Jacques D. Fleuriot2
CISA, School of Informatics University of Edinburgh
UK

Abstract
We describe the Prover’s Palette, a general, modular architecture for combining tools for formal verification, with the key differentiator that the integration emphasises the role of the user. A concrete implementation combining the theorem prover Isabelle with the computer algebra systems Maple and QEPCAD-B is then presented. This illustrates that the design principles of the Prover’s Palette simplify tool integrations while enhancing the power and usability of theorem provers.
Keywords: theorem proving, computer algebra, UI, Isabelle, Eclipse, QEPCAD, Maple.


Introducing the Prover’s Palette
Interactive theorem proving today permits the verification of sophisticated theo- rems and complex algorithms, although the process remains cumbersome and time- consuming. We believe that in many instances, access to other tools such as Com- puter Algebra Systems (CAS) can accelerate this process. Whilst there have been significant advances in combining provers with external tools, as described in pre- vious work [6], the increased complexity of current proof developments places new demands and challenges on tool integrations.
We begin with the premise that an integration’s primary goal is to accelerate the proof development process. To date, this has been achieved primarily by integra- tions which can automatically simplify expressions and discharge subgoals [8][11]. With more complicated verification tasks—and with more mathematicians using

1 Email: lauram@dai.ed.ac.uk
2 Email: jdf@inf.ed.ac.uk

1571-0661 © 2012 Published by Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2012.06.010

provers—we believe that the process of formal proof can also benefit from tool inte- grations which are able to enhance a user’s understanding of a problem. To achieve this, it is important that integrations support multiple modes of interaction: the user should be given the option to use external systems in a fully automated way, but they should also have the option to modify how that system is being used. A novice user can then benefit from a variety of proof assistants, even if he is not familiar with them, while the expert user is not hindered from accessing the full richness of these tools. This can be essential for some problems, as even the best fully automated integrations cannot always tune the parameters appropriately. Furthermore, by allowing visibility and modifiability to more aspects of the tool integration, the user is given greater flexibility in exploring the problem. We be- lieve that a semi-interactive integration framework now has a vital role to play: the framework should support automatically configuring settings appropriate to a spe- cific problem but also emphasise usability in exploring and changing these values, all while maintaining consistency between systems.
This philosophy has led us to develop the Prover’s Palette, a user-centric ap- proach to tool integrations. A concrete implementation that combines Isabelle and QEPCAD-B, assisting the user in reasoning about real nonlinear polynomials, has already been achieved [6]. In this paper, we apply our approach to a further sys- tems integration in order to show that the design principles apply more generally and that our architecture can be easily extended to support more tools. In particu- lar, we present an integration of Maple [10] into the Prover’s Palette and show how its plotting capabilities can provide significant insight into theorems being proven. Our framework is available for download at www.cognetics.org/proverspalette.


System Design
The key idea of our approach is to unify multiple tools through a cohesive user interface (UI), allowing any relevant tool to be used at any point in the proof process. This is accomplished by constructing a UI “View” widget for each external tool. These Views sit alongside the proof script in the IDE, and:
When the proof state changes, each View is notified by the framework and is up- dated appropriately, automatically acquiring a translation in its native language and a choice of appropriate default settings.
Each View can be configured to run in “novice” mode, using sensibly-chosen de- fault settings and running with a single user-click (some can be further configured to run automatically, appearing only when they yield a result).
By exposing an optional sequence of “tabs”, each View also allows full inspectabil- ity and customisation of the translation and settings.
Each View presents the results of the external system’s computation in an inte- grated form, commonly a command in the prover’s language which can then be automatically inserted into the proof script.

We have implemented this design in Java, making each View a plug-in to the Eclipse Proof General Kit [1], leveraging its broker structure, and targeting the Isabelle theorem prover [9]. The Prover’s Palette framework also uses libraries from the Feature Wizard [5] to support translation and the PG ProofScriptEditor API for post-processing insertion into the proof script 3 .
The implementation supplies abstract superclasses which encapsulate common functionality, including defining the View and tabs, tracking and translating the proof state, modifying the proof state where necessary (e.g. expanding definitions, converting to PNF), and inserting results in various ways (via an oracle, by instanti- ation, etc). This minimises the additional code required to integrate a new tool with the Prover’s Palette. We demonstrate this next by describing our implementation which adds Maple support to our system.

Using Maple in the Prover’s Palette

Figure 1. Reasoning with the Prover’s Palette: Isabelle, QEPCAD and Maple in the IDE

As Maple is a powerful and popular CAS we selected it for integration into the Prover’s Palette. We illustrate our approach—and this integration— through a real-world example making use of Maple’s plotting capabilities. Figure 1 shows a screenshot of the prover IDE with the new Maple view.
The proof script in Figure 1 revisits a collision problem described by Collins and Hong [3]. This involves robot motion planning and queries whether a moving circle (1) and a moving square (2) will ever collide, specifically asking whether
∃ t x y. t ≥ 0 ∧ (1) ∧ (2):

3 The Prover’s Palette currently inserts commands using Isabelle’s “tactic“ procedural mode, but support for the declarative “Isar” mode would be easy to add.

(x − t)2 + y2 ≤ 1
−1 ≤ x − 17 t ≤ 1 ∧ −9 ≤ y − 17 t ≤ −7
16	16
Relying solely on a theorem prover, this can be a difficult proof, with the user having to contend with questions ranging from how the myriad lemmas should be applied through to whether the objects are defined correctly and whether the the- orem is provable. Maple can give reassurances with regard to the latter two. With the Prover’s Palette, the Maple View continually updates to reflect the current proof goal state: the user can then, for example, choose to plot these equations (on the “Problem” tab of the Maple View, as shown in Figure 1). The integration automatically converts the problem—stripping away quantifiers, breaking up con- juncts, and converting inequalities—then determines which equations are suitable for inclusion and which plot type and command is appropriate (e.g. ImplicitPlot, ImplicitPlot3D, animate) 4 .
With the collision problem, the Maple integration defaults to a 2D animation. It has automatically determined the variables for each axis and deduced that five out of the six constituent equations should be plotted. In this plot configuration, t = 0 does not make sense; however the user is free to change the variables-to-axes mappings, and if t and x are swapped — so that t is plotted along the x-axis and we animate over time x — then the list of enabled equations is updated to include t = 0, although the plots may be unintuitive!
The user can then select the “Finish”
button to send the plot command to Maple. Alternatively the user can go to the “Pre- view” tab to inspect the script to be sent, making edits where desired: applying colours or labels, or even adding additional equa- tions. This tab also allows cancelling the ex- ternal process at any time. Asking Maple to plot the collision problem results in a new window containing an interactive animation of the circle and square moving over time. Figure 2 shows a still of this animation where the circle and square are colliding, confirming that the problem is provable.
Figure 2. Maple Animated Plot
Following the visual insight afforded by Maple, the user could also invoke QEP- CAD within the Prover’s Palette environment. Previously we showed how QEPCAD can be used to confirm that the problem is “True” [6]. It can also generate witnesses (t= 96 , x= 96 and y = −1) which the integration can instantiate into the proof with
17	17
a single click.

4 Due to space limitations, the automatic conversion and configuration to make problems suitable for use with Maple is not covered here. The interested reader is referred to [7].

Conclusion
By integrating Maple into the Prover’s Palette we have shown that the framework can generalise to support other external tools. It would be interesting to further extend the system to support other theorem provers that can be made compatible with PG Kit; and with the advent of new Java-based prover IDEs such as I3P [4], we believe our system has promise for even wider integration. We have also shown that an interactive integration framework is capable of enhancing the user’s understanding of proof problems. This supports our hypothesis that the user is most empowered when a palette of tightly integrated—yet customisable—tools is conveniently at their disposal. A successful integration framework enables a deeper understanding of proof obligations, freeing the user from the burden of tedious, mundane proof details, but without overly restricting what is possible.
Acknowledgement
We would like to thank the reviewers for their useful comments. This work was funded by the EPSRC grant EP/E005713/1.

References
Aspinall D., C. Lu¨th, and D. Winterstein, A Framework for Interactive Proof. Towards Mechanized Mathematical Assistants, Springer LNAI 4573 (2007), 161-175.
Brown C. W., QEPCAD B: a program for computing with semi-algebraic sets using CADs, SIGSAM Bulletin, 37 (2003), 97-108.
Collins G. E., and H. Hong, Partial Cylindrical Algebraic Decomposition for Quantifier Elimination, Journal of Symbolic Computation 12 (1991), 299-328.
Gast H., I3P, www-pu.informatik.uni-tuebingen.de/i3p

Heneveld A., Using Features for Automated Problem Solving, PhD Thesis, University of Edinburgh, 2007.
Meikle L. I., and J. D. Fleuriot, Combining Isabelle and QEPCAD-B in the Prover’s Palette, AISC/MKM/Calculemus (2008), 315-330.
Meikle L. I., The Formal Verification of Geometric Algorithms, to appear as PhD Thesis, University of Edinburgh.
Meng J., C. Quigley, and L. C. Paulson, Automation for interactive proof: first prototype, Inf. Comput.,
204: 10 (2006), 1575-1596.
Paulson L. C., Isabelle: A Generic Theorem Prover, LNCS 828 (1994).
Redfern M., and D. Betounes, “Mathematical Computing: An Introduction to Programming Using Maple”, Telos Press, 2002.
Tiwari A., PVS-QEPCAD, www.csl.sri.com/users/tiwari/qepcad.html.
