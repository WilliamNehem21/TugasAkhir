Egyptian Informatics Journal 24 (2023) 100420








Full Length Article
A hybridization of granular adaptive tabu search with path relinking for the multi-depot open vehicle routing problem
Wenhan Shao, Tuanyue Xiao, Zhouxing Su, Junwen Ding ∗, Zhipeng Lü
School of Computer Science and Technology, Huazhong University of Science and Technology, 1037 Luoyu Road, Wuhan, 430074, China


A R T I C L E	I N F O	A B S T R A C T

	

Keywords:
Multi-depot open vehicle routing problem Granular neighborhoods
Solution-based tabu search Adaptive neighborhood selection Path relinking
The multi-depot open vehicle routing problem (MDOVRP) differs from the classical VRP in that there is more than one depot and the vehicle does not need to return to a depot after serving the last customer. For solving this challenging problem, we propose a hybrid metaheuristic algorithm (GATS-PR) which integrates the granular adaptive tabu search with path relinking. The main contributions of this work consist of introducing a solution- based tabu search technique in granular tabu search, designing an adaptive neighborhood selection method for the large neighborhoods with 22 kinds of move types, and adopting path relinking with a new similarity definition to the MDOVRP for the first time. Computational results on 24 public instances demonstrate that GATS-PR outperforms the previous state-of-the-art algorithms in the literature. Specifically, GATS-PR improved and matched the previous best known results on 4 and 19 instances, respectively.





Introduction

Since the vehicle routing problem (VRP) was proposed in [1], its variants have been introduced to model various practical applications, including but not limited to city logistics [2], online food ordering de- livery [3], multi-robot exploration [4], hazardous waste collection [5] and telecommunications [6]. As a VRP variant, the multi-depot open vehicle routing problem (MDOVRP) was first formulated and solved to distribute fresh meat in an area of the city of Athens [7]. However, it received little attention until the public MDOVRP instances originat- ing from the multi-depot VRP benchmarks were proposed [8]. Because the VRP and its variants are NP-hard [9], it is diﬃcult for an exact al- gorithm to obtain optimal solutions in a reasonable time on large-scale instances of the MDOVRP [10–12]. In order to solve the MDOVRP effec- tively and eﬃciently, we propose the hybridization of granular adaptive tabu search with path relinking (GATS-PR). The main contributions of this study include:

The solution-based tabu search instead of attribute-based tabu search is devised in our granular tabu search.
The adaptive neighborhood selection method is developed for the large composite neighborhoods with 22 kinds of move types.
Path relinking is introduced to solve the MDOVRP for the first time and a new similarity definition is designed for the MDOVRP to guide the path generation.
We validate the performance of GATS-PR on 24 public instances. Computational results indicate that GATS-PR outperforms the pre- vious state-of-the-art algorithms.

The remaining of the paper is organized as follows. In Section 2, related work about the MDOVRP is presented. The definition of the MDOVRP is given in Section 3. Section 4 describes the proposed GATS- PR in detail. In Section 5, parameter tuning, computational results and importance analysis of the proposed algorithmic components are re- ported. Conclusion is given in Section 6.

Related work

In this section, we first review the state-of-the-art algorithms for the MDOVRP. Then, we introduce the application of granular tabu search and path relinking in the VRP related field, which are important com- ponents of our proposed algorithm.
It is common to solve a problem by proposing its mixed-integer programming model and solving the model with commercial solvers [13–15]. This method is also widely used to solve the MDOVRP. In [8],



* Corresponding author.
E-mail addresses: shaowenhan95@hust.edu.cn (W. Shao), ty_xiaohust@hust.edu.cn (T. Xiao), suzhouxing@hust.edu.cn (Z. Su), junwending@hust.edu.cn (J. Ding), zhipeng.lv@hust.edu.cn (Z. Lü).
https://doi.org/10.1016/j.eij.2023.100420
Received 31 August 2023; Received in revised form 8 November 2023; Accepted 14 November 2023
Available online 24 November 2023
1110-8665/© 2023 THE AUTHORS. Published by Elsevier BV on behalf of Faculty of Computers and Artificial Intelligence, Cairo University. This is an open access article under the CC BY-NC-ND license (http://creativecommons.org/licenses/by-nc-nd/4.0/).



a mixed integer programming (MIP) formulation of the MDOVRP was proposed and solved with CPLEX. In [11] and [16], subtour elimina- tion constraints of [8] were improved and constraints related to the minimum vehicle number and the first customer to visit were added. In [10], a two-index vehicle flow formulation was proposed to solve the open location routing problem and the MDOVRP. In [12], the MIP model designed for the multi-depot open location routing problem with a heterogeneous fixed-charge fleet was adapted for the MDOVRP and solved with CPLEX.
In order to eﬃciently obtain high-quality solutions for combinato- rial optimization problems, numerous metaheuristic algorithms have been proposed, such as tabu search [17], evolutionary algorithms [18–20], hybrid genetic algorithms [21–24]. They are also applied for the MDOVRP. A hybrid genetic algorithm was proposed in [8], where a solution is encoded as a giant tour of all routes without trip delim- iters, the classic order crossover [25] is used to generate a new child solution from the chosen parent solutions, and three move types includ- ing 1-0 Exchange, 1-1 Exchange and 2-Opt are applied to improve the child solution. Tabu search with multiple neighborhood search were hy- bridized to solve the MDOVRP in [26], where multiple neighborhoods are generated by path moves and ejection chains. A memory-based it-
erated local search algorithm was presented for the MDOVRP in [27],



Fig. 1. An example of the solution of an MDOVRP instance.

Problem definition

The MDOVRP is defined on an undirected complete graph 𝐺 = (𝑉 , 𝐸), where 𝑉 is the set of nodes and 𝐸 denotes the set of edges. 𝑉 consists of two exclusive subsets 𝑉 𝐷 and 𝑉 𝐶 which include |𝑉 𝐷| depots and |𝑉 𝐶 | customers, respectively. A fleet with an unlimited number of homogeneous vehicles with capacity 𝑄 is based on each depot. Each customer 𝑣𝑖 ∈ 𝑉 𝐶 is characterized by a positive demand 𝑞𝑖 (𝑞𝑖 ≤ 𝑄). Each edge 𝑒𝑖𝑗 ∈ 𝐸, 𝑖 ≠ 𝑗 is associated with a positive cost 𝑐𝑖𝑗 represent- ing the traveling time from node 𝑣𝑖 to node 𝑣𝑗 . The costs are symmetric
and satisfy the triangular inequality.
A route 𝑅 = {𝑣0 , 𝑣1 , … , 𝑣𝑚𝑅 } consists of 𝑚  different customers and

𝑅  𝑅	𝑅	𝑅

which records moves performed during the local search phase and uses
depot 𝑣0 , where 𝑚𝑅 is the number of customers in 𝑅. The traveling time

historical search information to guide the perturbation procedure. A variable tabu neighborhood search algorithm was proposed in [28],
𝑅
𝑇𝑅 of 𝑅 is equal to
∑𝑚𝑅 −1
𝑖=0
𝑐𝑣𝑖 ,𝑣𝑖+1 . The load 𝐿𝑅 is the total demand of
𝑅∑𝑅

all customers of 𝑅, i.e., 𝐿 =  𝑚𝑅 𝑞 𝑖 . If 𝐿 ≤ 𝑄, 𝑅 is a feasible route.

which applies granular local search in the intensification phase and the tabu shaking mechanism in the diversification phase. A multi-start metaheuristic algorithm was designed in [12], which consists of a con- structive heuristic and an iterated local search algorithm to solve the MDOVRP. In [29], a tabu search algorithm was designed for the simul- taneous scheduling of multi-project construction and vehicle routing, and it was adapted to the MDOVRP.
Granular neighborhoods [30] and tabu search [31] are common in the field of the VRP, which are often adopted together to eﬃciently obtain high-quality solutions [32–34]. By excluding unsuitable moves in the current search phase, granular neighborhoods can improve the search eﬃciency without sacrificing the solution quality. To leverage the characteristic of granular neighborhoods, we design different granu- lar neighborhoods for each move type. Although the review shows that many studies have used tabu search to solve the MDOVRP and other VRP-related problems, all these studies choose the attribute-based tabu search strategy. Because it is diﬃcult to rapidly calculate hash values of solutions and quickly identify whether two solutions are identical, the solution-based tabu search strategy is rarely applied to the VRP and its variants. These challenges are addressed for the MDOVRP by designing the suitable hash function, adopting open addressing hashing with dou- ble hashing to handle hash collisions, and recording the characteristics of the visited solution rather than the solution itself.
Due to the diﬃculty in defining the similarity between solutions, there are few studies applying path relinking in the field of the VRP. In [35], the number of the same customers that appear in matched routes is defined as the similarity of two solutions for the VRP. Because the sequence of nodes on a route is ignored, the solution at the end of the path may not be the same as the guiding solution. Hence, the child solution may not be able to inherit good attributes of the guiding so- lution. In [36], the minimum number of relocating moves needed to transform one solution to another is defined as their similarity for the VRP. Therefore, the final solution is the same as the guiding solution af- ter path relinking. However, the diversity of the child solution is limited because only one move type is used. To overcome these disadvantages and take advantage of the characteristic that there is more than one de- pot in the MDOVRP, we design a new similarity definition and consider all the proposed move types at each step of the path generation.
𝑅	𝑖=1 𝑣	𝑅
The goal of the MDOVRP is to determine a set of feasible routes to serve
each customer exactly once with the minimum total traveling time of all routes.
Fig. 1 depicts an example of the solution of an MDOVRP instance, where seven customers are served by three routes beginning from de-
pots 𝐷1 and 𝐷2 , while depot 𝐷3 is not used.
The hybridization of granular adaptive tabu search with path relinking for the MDOVRP

To explore promising solution space systematically, we propose the GATS-PR algorithm which hybridizes granular adaptive tabu search
(GATS) with path relinking. GATS-PR manages population 𝑃 with 𝜇
lution 𝑐ℎ𝑖𝑙𝑑 is generated by path relinking from two parent solutions feasible solutions as shown in Algorithm 1. At each iteration, a new so- randomly chosen from 𝑃 (lines 4-5) and is improved by the local search procedure GATS (line 6). If 𝑐ℎ𝑖𝑙𝑑 is feasible and does not belong to 𝑃 , its objective function value 𝑓 (𝑐ℎ𝑖𝑙𝑑) is compared with that of the worst parent solution 𝑝𝑤𝑜𝑟𝑠𝑡 (lines 7-8). If 𝑐ℎ𝑖𝑙𝑑 is better than 𝑝𝑤𝑜𝑟𝑠𝑡 , it re- places 𝑝𝑤𝑜𝑟𝑠𝑡 (lines 9-10). If 𝑐ℎ𝑖𝑙𝑑 is better than the best solution 𝑠∗ found so far, it replaces 𝑠∗ (lines 11-12).

Algorithm 1 General framework of GATS-PR.


Input: Instance
Output: Best solution 𝑠∗ found so far
1: Initialize population 𝑃 with 𝜇 feasible solutions (Section 4.2) 2: 𝑠∗ ← argmin𝑠∈𝑃 𝑓 (𝑠)
3: while the time limit is not reached do
4:  𝑝1 , 𝑝2 ← Randomly choose two solutions from 𝑃
5:	𝑐ℎ𝑖𝑙𝑑 ← Apply path relinking to 𝑝1, 𝑝2 (Section 4.3) 6:	𝑐ℎ𝑖𝑙𝑑 ← Apply GATS to 𝑐ℎ𝑖𝑙𝑑 (Section 4.1)
7:	if 𝑐ℎ𝑖𝑙𝑑 is feasible and 𝑐ℎ𝑖𝑙𝑑 ∉ 𝑃 then
8:	𝑝𝑤𝑜𝑟𝑠𝑡 ← argmax𝑠∈{𝑝1 ,𝑝2 } 𝑓 (𝑠)
9:	if 𝑓 (𝑐ℎ𝑖𝑙𝑑) < 𝑓(𝑝𝑤𝑜𝑟𝑠𝑡 ) then
10:	𝑝𝑤𝑜𝑟𝑠𝑡 ← 𝑐ℎ𝑖𝑙𝑑
11:	if 𝑓 (𝑐ℎ𝑖𝑙𝑑) < 𝑓(𝑠∗) then
12:	𝑠∗ ← 𝑐ℎ𝑖𝑙𝑑
13:	end if
14:	end if
15:	end if
16: end while






Fig. 2. Move types used in GATS-PR.


Granular adaptive tabu search

Algorithm 2 presents the main framework of granular adaptive tabu search (GATS). GATS iteratively improves the initial feasible solution
𝑠 until the termination condition is satisfied (line 2), where 𝑖𝑡𝑒𝑚𝑎𝑥 is
nate GATS. At each iteration, 𝛿 customers are randomly chosen from the maximum consecutive iterations without improvement to termi- all customers (line 3) and a set 𝑀 of move types is determined by the
neighborhood solutions of 𝑠 generated according to 𝑀 , 𝐶𝑢𝑠 and granu- adaptive neighborhood selection method (line 4). After evaluating all
𝑠, 𝜌(𝑠) defined in Eq. (2) is a normalization factor for relating the order
penalty, 𝑝𝑐𝑎𝑝 is the factor for penalizing the violation of vehicle capacity of magnitude of the objective function value and the vehicle capacity constraints, and 𝑣𝑐𝑎𝑝(𝑠) is the cumulative violation of vehicle capacity
of constraint violations timely, 𝑝𝑐𝑎𝑝 is updated at each iteration in the constraints of all the tours as shown in Eq. (3). To control the degree
same way as in [37].
𝑓 ′(𝑠)= 𝑓 (𝑠)+ 𝜌(𝑠)× 𝑝𝑐𝑎𝑝 × 𝑣𝑐𝑎𝑝(𝑠)	(1)
|𝑉 𝐶 | × 𝑓 (𝑠)

lar neighborhoods of 𝐶𝑢𝑠, we set 𝑠 to the best unvisited neighborhood
solution in terms of the generalized objective function value (line 5),
𝜌(𝑠)= 
∑
𝑖∈𝑉 𝐶 𝑞𝑖
(2)

record 𝑠 as a tabu solution (line 6), and update the best solution 𝑠∗
found so far (lines 7-11).
𝑣𝑐𝑎𝑝
∑
(𝑠)=	𝑚𝑎𝑥(𝐿𝑅
𝑅∈𝑠
– 𝑄, 0)	(3)



Algorithm 2 General framework of GATS.

Input: Initial feasible solution 𝑠 Output: Best solution 𝑠∗ found so far 1: 𝑖𝑡𝑒𝑢𝑛𝐼 𝑚𝑝 ← 0, 𝑠∗ ← 𝑠
2: while 𝑖𝑡𝑒𝑢𝑛𝐼 𝑚𝑝 ≤ 𝑖𝑡𝑒𝑚𝑎𝑥 do
3:	𝐶𝑢𝑠 ← Randomly choose 𝛿 customers
4:	𝑀 ← Choose move types with the adaptive neighborhood selection mechanism 5:	𝑠 ← Choose the best unvisited neighborhood solution of 𝑠
6:	 Record 𝑠 as a tabu solution in hash tables 7:	if 𝑠 is feasible and 𝑓 (𝑠) < 𝑓(𝑠∗) then
8:	𝑖𝑡𝑒𝑢𝑛𝐼 𝑚𝑝 ← 0, 𝑠∗ ← 𝑠
9:	else
10:	𝑖𝑡𝑒𝑢𝑛𝐼 𝑚𝑝 ← 𝑖𝑡𝑒𝑢𝑛𝐼 𝑚𝑝 +1 
11:	end if
12: end while





Generalized objective function
In GATS, it is allowed to visit infeasible solutions which violate ve- hicle capacity constraints to explore wider search space. In order to
design a generalized objective function 𝑓 ′ for the MDOVRP as shown compare the quality of feasible solutions with that of infeasible ones, we in Eq. (1), where 𝑓 (𝑠) denotes the objective function value of solution

Move types
Let 𝑣 and 𝑤 represent two nodes, 𝑣𝑘− and 𝑣𝑘+ stand for the 𝑘th predecessor and successor nodes of 𝑣 (𝑘 is omitted when 𝑘 = 1). When
𝑣 is a customer, 𝑣𝑓 and 𝑣𝑙 denote the first and the last customers of the tour including 𝑣, and 𝑣𝑑 represents the depot serving 𝑣. A total of
22 move types in 6 categories are depicted in Fig. 2 and described as follows:
𝐸𝑥𝑐ℎ𝑎𝑛𝑔𝑒 interchanges distinct customers. Exchanged customers
are served by the same depot but belong to different tours in 2-
Opt* and by different depots in Exchange-b and Exchange-f. For Exchange-1, Exchange-2 and Exchange-2With1, there is no limita- tion for exchanged customers.
𝑅𝑒𝑙𝑜𝑐𝑎𝑡𝑒 moves one or several consecutive customers into a new
reversed and it is unchanged for other 𝑅𝑒𝑙𝑜𝑐𝑎𝑡𝑒 move types. After position. For Relocate-Reverse2, the order of relocated customers is
𝑅𝑒𝑙𝑜𝑐𝑎𝑡𝑒, there must be at least one customer left on the affected
tours.
𝑅𝑒𝑣𝑒𝑟𝑠𝑒 reverses a route segment and it includes 2-Opt.
𝑆𝑝𝑙𝑖𝑡 extracts a route segment of a tour to construct a new tour
served by the same or a different depot. After the operation, there



is at least one customer left on the affected tours. Hence, the tour number is increased by one.
𝑀𝑒𝑟𝑔𝑒 combines two tours into one, which reduces the tour num-
ber by one.
𝑇𝑟𝑎𝑛𝑠𝑓 𝑒𝑟 changes the depot of a tour to another.
Although a vehicle does not return to a depot in the MDOVRP, we add an auxiliary edge linking the last customer with the departing depot to simplify the design of move types. The edge cost from a customer to a depot is set to zero.
lution. 𝐸𝑥𝑐ℎ𝑎𝑛𝑔𝑒 swaps customers, 𝑅𝑒𝑙𝑜𝑐𝑎𝑡𝑒 changes the position of These six categories of move types differ in how they modify a so- customers, 𝑅𝑒𝑣𝑒𝑟𝑠𝑒 changes the direction of a route segment, 𝑆𝑝𝑙𝑖𝑡 ex-
tracts a route segment from the original tour and serves it with a depot,
𝑀𝑒𝑟𝑔𝑒 combines two tours into one, and 𝑇𝑟𝑎𝑛𝑠𝑓 𝑒𝑟 severs the tour with
another depot. Additionally, the impact degree on the solution varies
for distinct move types within each category. For example, relocating one customer has a smaller impact on the solution than relocating a lot of customers. By designing large composite neighborhoods with differ- ent functions and impact degrees, the algorithm can select appropriate move types in different search phases and achieve the balance between intensification and diversification of the search.

Adaptive neighborhood selection
If evaluating neighborhood solutions generated by all the move types at each iteration, it will be too time-consuming. Hence, we de- velop an adaptive neighborhood selection (ANS) strategy to choose suitable move types and group all the move types into four neighbor-
hoods 𝑁 = {𝑁1, 𝑁2, 𝑁3, 𝑁4} in ascending order of the degree of change
to a solution as follows:

𝑁1 = {Exchange-1, Relocate-1, Relocate-2, RelocateWithReverse- 2, 2-Opt}
𝑁2 = {2-Opt*, Exchange-2, Exchange2With1}
𝑁3 = {Exchange-b,	Exchange-f,	Relocate-b,	Relocate-f, TransferBySplit-b, TransferBySplit-f}
𝑁4 = {MergeBy2-Opt*, MergeByRelocate-b, MergeByRelocate-f, Split-0, Split-1, Split-2, Split-b, Split-f}
At each iteration, ANS selects neighborhood 𝑛𝑒𝑖 ∈ 𝑁 with probabil- ity 𝑝𝑛𝑒𝑖 as shown in Eq. (4), where 𝑤𝑛𝑒𝑖 is the weight of selecting 𝑛𝑒𝑖.
To avoid too large weig[ht differenc]e among neighborhoods, weights are
intensification of the search because the neighborhoods whose general- ized objective function value improvements are sub-optimal are likely to be frequently selected. 2) If a move type is chosen at an unsuitable time, its weight will be set to a small value and it is hard to select it again when there are too many neighborhoods. This reduces diversifi- cation brought by various move types.
high for move types in 𝑁1 and 𝑁2 in the early stages of the search, these Due to the fact that the probabilities of improving the solution are
two neighborhoods have high weights and are frequently selected. Be- cause a lot of move types among these neighborhoods are compared to obtain the best improvement move, it guarantees intensification of the search. When the search falls into a local optimum, weights of selecting
𝑁1 and 𝑁2 are decreased because move types in 𝑁1 and 𝑁2 are un-
of choosing 𝑁3 and 𝑁4, and diversifies the search at suitable time. likely to improve the solution quality. This increases the probabilities

Granular neighborhoods
choosing a move type, a customer 𝑐𝑢𝑠, and a neighboring node of 𝑐𝑢𝑠 As shown in Fig. 2, a neighborhood solution is determined when
orating solution quality, we define granular neighborhoods of 𝑐𝑢𝑠 after after the move. In order to further speed up the search without deteri- the move by considering only proximate nodes of 𝑐𝑢𝑠 to limit the num-
ber of neighborhood solutions as follows:

All depots.
The first ⌊𝑔𝑡 × |𝑉 𝐶 |⌋ closest customers of 𝑐𝑢𝑠, where 𝑔𝑡 is the gran- ularity threshold and its value is between 𝑔𝑡𝑚𝑖𝑛 and 𝑔𝑡𝑚𝑎𝑥 .
Neighboring nodes of 𝑐𝑢𝑠 in the best solution found so far.
We update 𝑔𝑡 in the same way as mentioned in [37].

Solution-based tabu search
For a population-based hybrid evolutionary algorithm, when the attribute-based tabu search strategy is used, a solution may be visited many times in the local search even if initial solutions are different. Thus, we design a solution-based tabu search strategy which records all visited solutions and avoids revisiting them to further enhance diversi- fication of the search.
Let 𝑙 represent the list with |𝑉 𝐶 |+|𝑉 𝐷| random numbers and 𝑙𝑖 the
value of the 𝑖th element of 𝑙. The hash value ℎ of solution 𝑠 is calculated by the hash function 𝐻 as shown in Algorithm 3. For each edge of 𝑠, corresponding values of its two ends in 𝑙 are multiplied to XOR with

limited to the interval
𝑤𝑚𝑖𝑛, 𝑤𝑚𝑎𝑥
and their initial values are 𝑤𝑚𝑖𝑛 . Let
ℎ (line 5), where ℎ is initially set to zero (line 1). The hash value of 𝑠

𝑠 denote the current solution, 𝑠′ stand for the solution after the move, and 𝑠𝑒𝑙 represent the selected neighborhood. After the move, ANS up- dates weight 𝑤𝑠𝑒𝑙 as follows:

The accumulative generalized objective function value improve-
and inserted edge of the move, the corresponding values in 𝑙 of its two after a move is calculated as shown in Algorithm 4. For each deleted ends are multiplied to XOR with ℎ to obtain the hash value of 𝑠 after the
time complexity of Algorithm 4 is 𝑂(1), which ensures the eﬃciency of move (lines 3 and 7). Due to the characteristics of the XOR operator, the

∗
𝑠𝑒𝑙
of 𝑠𝑒𝑙 is updated as shown in Eq. (5), where discount
the neighborhood evaluation.

factor 𝛼 is introduced to balance historical and current contribu-
tions of neighborhoods.
ANS adjusts 𝑤𝑠𝑒𝑙 by comparing Δ∗	with the median value


Algorithm 3 Hash value of a solution.
Input: Solution 𝑠

𝑚𝑒𝑑(Δ∗) of Δ∗
𝑠𝑒𝑙
as shown in Eq. (6), where factor
𝜆 is used to con-
Output: Hash value ℎ of 𝑠

trol the convergence speed of weights. If the former is less than the
latter, it indicates that 𝑠𝑒𝑙 is more likely to improve the solution.
1: ℎ ← 0
2: for 𝑡𝑜𝑢𝑟 ∈ 𝑠 do


𝑝𝑛𝑒𝑖
Therefore, 𝑤
= ∑𝑤𝑛𝑒𝑖
𝑤
𝑠𝑒𝑙
is increased. Otherwise, 𝑤𝑠𝑒𝑙
is reduced.


(4)
3:	for 𝑒𝑑𝑔𝑒 ∈ 𝑡𝑜𝑢𝑟 do
4:	𝑛𝑜𝑑𝑒1 , 𝑛𝑜𝑑𝑒2 ← Two nodes of 𝑒𝑑𝑔𝑒
5:	ℎ ← (𝑙𝑛𝑜𝑑𝑒1 × 𝑙𝑛𝑜𝑑𝑒2 ) ⊕ℎ 
6:	end for

𝑖∈𝑁
Δ∗  = 𝛼 × Δ∗
𝑖
+ (1− 𝛼)× (𝑓 ′(𝑠′)− 𝑓 ′(𝑠))	(5)
7: end for




𝑠𝑒𝑙	{
𝑤𝑠𝑒𝑙 =
𝑠𝑒𝑙
𝑤𝑠𝑒𝑙 + 𝜆 × (𝑤𝑚𝑎𝑥 − 𝑤𝑠𝑒𝑙 ) Δ∗
𝑤𝑠𝑒𝑙 + 𝜆 × (𝑤𝑚𝑖𝑛 − 𝑤𝑠𝑒𝑙 ) Δ∗
< 𝑚𝑒𝑑(Δ∗)
≥ 𝑚𝑒𝑑(Δ∗)
(6)
To handle hash collisions, we adopt classic open addressing hash- ing with double hashing. In open addressing hashing, probing refers to obtaining offsets of the hash value calculated by the hash function

If we define a neighborhood for each move type, there will be two disadvantages: 1) Weights of many move types are comparable and the neighborhood selection is random for these move types. This reduces
𝐻 when a collision occurs. Due to probing, open addressing hash-
ing is able to place items with the same hash value in different po-
sitions. Double hashing is one of the probing methods, which uses



Algorithm 4 Hash value of a solution after a move.
Input: Hash value ℎ of the current solution, all deleted and inserted edges 𝐸𝑑 and 𝐸𝑖 of
1: for 𝑒𝑑𝑔𝑒 ∈ 𝐸𝑑 do the move, respectively
2:	𝑛𝑜𝑑𝑒1 , 𝑛𝑜𝑑𝑒2 ← Two nodes of 𝑒𝑑𝑔𝑒
3:	ℎ ← ℎ ⊕ (𝑙𝑛𝑜𝑑𝑒1 × 𝑙𝑛𝑜𝑑𝑒2 )
4: end for
5: for 𝑒𝑑𝑔𝑒 ∈ 𝐸𝑖 do
6:	𝑛𝑜𝑑𝑒1 , 𝑛𝑜𝑑𝑒2 ← Two nodes of 𝑒𝑑𝑔𝑒
7:	ℎ ← ℎ ⊕ (𝑙𝑛𝑜𝑑𝑒1 × 𝑙𝑛𝑜𝑑𝑒2 )
8: end for


the second hash function 𝑆𝐻 to calculate offsets. In our experiment,
𝑆𝐻(𝑠) = 𝐻 (𝑠) mod 97 + 1.
Let 𝑙𝑒𝑛 = 999983 represent the size of hash table 𝐻𝑇 , 𝑚 stand for
Solution construction: For each depot 𝑑, customers assigned to 𝑑
are randomly selected and inserted into a tour served by 𝑑 one at
a time according to the following rules:
The customer is inserted into a tour with the minimum cost if it does not violate vehicle capacity constraints;
Otherwise, the customer is served by a new tour.

4.3. Path relinking for the MDOVRP

Let 𝑆𝐷𝑖,𝑗 (𝑆𝑁𝑖,𝑗 ) represent the number of customers served by the same depot (with the same neighbors) in solutions 𝑠𝑖 and 𝑠𝑗 . The simi- larity 𝑠𝑖𝑚𝑖,𝑗 between 𝑠𝑖 and 𝑠𝑗 is defined as the weighted sum of 𝑆𝐷𝑖,𝑗 and 𝑆𝑁𝑖,𝑗 as shown in Eq. (9), where 𝑤𝑆𝐷 is the weight factor of 𝑆𝐷𝑖,𝑗 .

the number of solutions in 𝐻𝑇 , and 𝑙𝑓 = 𝑚∕𝑙𝑒𝑛 denote the load fac- tor of 𝐻𝑇 . If solution 𝑠 is recorded in the 𝑖th row of 𝐻𝑇 , 𝐻𝑇𝑖 =
𝑠𝑖𝑚𝑖,𝑗
= 𝑤
𝑆𝐷
× 𝑆𝐷𝑖,𝑗
+ (1− 𝑤
𝑆𝐷
)× 𝑆𝑁𝑖,𝑗
(9)

(𝑓 (𝑠), 𝑣𝑐𝑎𝑝(𝑠)), where 𝑓 (𝑠) is the objective function value of solution
𝑠 and 𝑣𝑐𝑎𝑝(𝑠) is the cumulative violation of vehicle capacity constraints of 𝑠. The initial mapped position 𝐼𝑃 (𝑠) of solution 𝑠 and the 𝑖th mapped position 𝑃𝑖(𝑠) after double hashing are shown in Eq. (7) and Eq. (8), re- spectively. When searching for an empty position to record solution 𝑠 or determining whether 𝑠 has existed in 𝐻𝑇 , we check values recorded in rows 𝑅 = {𝐼𝑃 (𝑠), 𝑃1(𝑠), 𝑃2(𝑠), …} of 𝐻𝑇 in turn until finding a row
𝑟 ∈ 𝑅, where 𝐻𝑇𝑟 is empty or equal to ((𝑓 (𝑠), 𝑣𝑐𝑎𝑝 (𝑠)).
𝐼𝑃 (𝑠)= 𝐻 (𝑠) mod 𝑙𝑒𝑛	(7)
𝑃𝑖(𝑠)= (𝐻 (𝑠)− 𝑖 × 𝑆𝐻(𝑠)) mod 𝑙𝑒𝑛, 𝑖 ∈ ℕ+	(8) For the current row 𝑟 ∈ 𝑅:
If 𝐻𝑇𝑟 is equal to (𝑓 (𝑠), 𝑣𝑐𝑎𝑝(𝑠)), we consider that solution 𝑠 has been visited;
If 𝐻𝑇𝑟 is empty, it indicates that 𝑠 is an unvisited solution;
Otherwise, the value in the next row of 𝐻𝑇 is checked.

When load factor 𝑙𝑓 is large, the search eﬃciency of the hash table will significantly decrease. Hence, when 𝑙𝑓 > 0.75: An unvisited solu- tion 𝑠 will be recorded in 𝐻𝑇𝐼𝑃 (𝑠) if its objective function value 𝑓 (𝑠) is better than that recorded in 𝐻𝑇𝐼𝑃 (𝑠) ; Otherwise, 𝑠 is discarded.
acceptable computational cost, we use three hash tables 𝑇𝐵1, 𝑇𝐵2 and To avoid identifying an unvisited solution as a visited one under
𝑇𝐵3 with different values in 𝑙 to record solutions. Only when the pair of 𝑓 (𝑠) and 𝑣𝑐𝑎𝑝(𝑠) exists in the mapped positions of all the tables, 𝑠 is
regarded as a tabu solution. Fig. 3 illustrates an example of determining
three customers 2, 3 and 4. Solution 𝑠 includes one tour departing from whether a solution is in tabu state. There are two depots 0 and 1 and depot 0, visiting customers 2, 3 and 4 in turn. The pair 𝑝 of 𝑓 (𝑠) and
𝑣𝑐𝑎𝑝(𝑠) is (9, 2) for solution 𝑠. For 𝐻𝑇 1, 𝐼𝑃 (𝑠) = 22 and 𝐻𝑇 1 is equal
tial solution 𝑝1 and guiding solution 𝑝2 , the similarity 𝑠𝑖𝑚𝑐𝑢𝑟 between Algorithm 5 presents the pseudo-code of our path relinking. For ini-
them is calculated (line 1). A high-quality solution is more likely to be obtained from solutions in the middle part of the path after applying the GATS procedure because it inherits good attributes of parent solutions.
Consequently, parameters 𝑟𝑎𝑡𝑖𝑜𝑏𝑒𝑔 and 𝑟𝑎𝑡𝑖𝑜𝑒𝑛𝑑 are used to limit the
interval of the path where the final result is selected (line 2). In the
ing vehicle capacity constraints too much and push 𝑝1 toward 𝑝2, only path construction (lines 3-12), to avoid the final solution from violat- feasible neighborhood solutions whose similarities to 𝑝2 are larger than
𝑠𝑖𝑚𝑐𝑢𝑟 are considered (lines 4-5). We sort solutions of 𝑁𝑒𝑖 in an as-
cending order of the sum of their rankings in terms of similarity and
dom solution from the first 𝛾 ones of 𝑁𝑒𝑖 as new 𝑝1 (line 7), 𝑠𝑖𝑚𝑐𝑢𝑟 and objective function value improvements (line 6). After choosing a ran-
the reference solution are updated (lines 8-11).

Algorithm 5 Path relinking for the MDOVRP.
Input: Initial solution 𝑝1, guiding solution 𝑝2
Output: Reference solution 𝑠𝑟𝑒𝑓
1: 𝑠𝑖𝑚𝑐𝑢𝑟 ← Calculate similarity between 𝑝1 and 𝑝2
2: 𝑠𝑖𝑚𝑏𝑒𝑔 ← 𝑠𝑖𝑚𝑐𝑢𝑟 × 𝑟𝑎𝑡𝑖𝑜𝑏𝑒𝑔 , 𝑠𝑖𝑚𝑒𝑛𝑑 ← 𝑠𝑖𝑚𝑐𝑢𝑟 × 𝑟𝑎𝑡𝑖𝑜𝑒𝑛𝑑 , 𝑓 (𝑠𝑟𝑒𝑓 ) ← +∞
3: while 𝑠𝑖𝑚𝑐𝑢𝑟 ≤ 𝑠𝑖𝑚𝑒𝑛𝑑 do
4:  𝑁𝑒𝑖 ← Generate all the feasible neighborhood solutions of 𝑝1 with all the move
types defined in Fig. 2
5:	𝑁𝑒𝑖 ← Retain 𝑠 ∈ 𝑁𝑒𝑖 whose similarity to 𝑝2 is greater than 𝑠𝑖𝑚𝑡𝑚𝑝
6:	𝑁𝑒𝑖 ← Sort 𝑁𝑒𝑖 according to the sum of rankings of 𝑠 in 𝑁𝑒𝑖 in terms of similarity
and objective function value improvements
7:	𝑝1 ← Randomly pick a solution from the first 𝛾 ones of 𝑁𝑒𝑖
8:	𝑠𝑖𝑚𝑐𝑢𝑟 ← Calculate similarity between 𝑝1 and 𝑝2
9:	if 𝑠𝑖𝑚𝑐𝑢𝑟 ≥ 𝑠𝑖𝑚𝑏𝑒𝑔 and 𝑓 (𝑠𝑟𝑒𝑓 ) > 𝑓(𝑝1 ) then
10:	𝑠𝑟𝑒𝑓 ← 𝑝1
11:	end if
12: end while




to 𝑝. Therefore, solution 𝑠
22
is considered as a visited solution in
𝐻𝑇 1.

The pairs of 𝐻𝑇 2 and 𝐻𝑇 3 are different from 𝑝, so we check the first
5	40	5. Experimental results
mapped positions after double hashing in these tables, which are both
999982. Because 𝐻𝑇 2	and 𝐻𝑇 3	are both empty, solution 𝑠 is

999982
999982 2	3
We tested GATS-PR on the public MDOVRP instances introduced

regarded as an unvisited solution in 𝐻𝑇
unvisited solution.

Population initialization
and 𝐻𝑇 . Hence, 𝑠 is an
in [8].1 Table 1 presents the notations used in this section. In the fol- lowing subsections, we first present the parameter tuning process of GATS-PR. Then, the results obtained by GATS-PR are compared with those obtained by the state-of-the-art reference algorithms in the liter-

Population 𝑃 is initialized with 𝜇 feasible solutions, each of which
is generated after the following two steps and is improved by the local
search procedure GATS.

1. Customer assignment: Each customer 𝑐𝑢𝑠 is assigned to its nearest depot for 0.7 × 𝜇 solutions and randomly assigned to one of its two
nearest depots according to the probability 1 −   𝑐𝑑,𝑐𝑢𝑠	 for the
ature. Finally, the importance of the proposed algorithmic components is analyzed.

Parameter tuning

For instances which are easy to solve, it is not sensitive to parame- ter settings. Hence, instances p09, p10 and pr05 which are hard to solve

∑
𝑐 𝑖

remaining 0.3 × 𝜇 solutions, where 𝑑𝑖
𝑐𝑢𝑠.
𝑖=1 𝑑𝑐𝑢𝑠 ,𝑐𝑢𝑠
is the 𝑖th nearest depot of		
1 http://neo.lcc.uma.es/vrp/vrp-instances/multiple-depot-vrp-instances/.




Fig. 3. An example of determining whether a solution is in tabu state.


Table 1
Notations.


Notation	Meaning


Ins	Instance name
BKS	Objective function value of the best known solution
Ref	Reference to the algorithm which obtained BKS for the first time
𝑓𝑏𝑒𝑠𝑡	Objective function value of the best solution
𝑓𝑎𝑣𝑔	Average 𝑓𝑏𝑒𝑠𝑡 among multiple experiments
The number 𝛾 of elite solutions from which the neighborhood move
is picked at each step of path generation. Its default value is 3.
The weight factor 𝑤𝑆𝐷 of 𝑆𝐷𝑖,𝑗 . Its default value is 0.7.
The combination of the population size 𝜇 and 𝑖𝑡𝑒𝑚𝑎𝑥 . Its default
value is (10, 2).
The combination of 𝑟𝑎𝑡𝑖𝑜𝑏𝑒𝑔 and 𝑟𝑎𝑡𝑖𝑜𝑒𝑛𝑑 determining the path seg-
ment of interest. Its default value is (0.6, 0.4).

The maximal run time was 600 seconds for tuning path relinking-related

𝐺𝑎𝑝
𝑏𝑒𝑠𝑡
(𝑓𝑏𝑒𝑠𝑡
-BKS)/BKS reported as ‰ values
parameters. Based on 𝑆𝐺𝑏𝑒𝑠𝑡 presented in Table 3, 𝛾 was set to 5, 𝑤𝑆𝐷

𝐺𝑎𝑝
𝑎𝑣𝑔
(𝑓𝑎𝑣𝑔
-BKS)/BKS reported as ‰ values
to 0.7, 𝜇 to 10, 𝑖𝑡𝑒𝑚𝑎𝑥 to 1, 𝑟𝑎𝑡𝑖𝑜𝑏𝑒𝑔 to 0.5 and 𝑟𝑎𝑡𝑖𝑜𝑒𝑛𝑑 to 0.2.

𝑡𝑎𝑣𝑔	Average run time of obtaining the best solutions in seconds
𝐴𝑣𝑒	Average 𝐺𝑎𝑝𝑏𝑒𝑠𝑡 , 𝐺𝑎𝑝𝑎𝑣𝑔 or 𝑡𝑎𝑣𝑔
-	Corresponding value is not given in the literature






were selected to tune parameters. Note that similar statistics can be ob- served on the remaining instances. Because the local search procedure GATS and the path relinking operator are relatively independent, their parameters were tuned by applying GATS and GATS-PR to these in- stances, respectively. For each parameter, a default value and possible values were given. When tuning a parameter, other parameters were fixed to default values to avoid explosions in the number of parame- ter combinations. We first tuned GATS-related parameters and set their default values to the selected values when tuning path relinking-related parameters. Three independent runs were performed for the selected in- stances. In order to normalize the results of different instances, the sum
𝑆𝐺𝑏𝑒𝑠𝑡 of 𝐺𝑎𝑝𝑏𝑒𝑠𝑡 of each selected instance is introduced. The parame-
ter value whose corresponding 𝑆𝐺𝑏𝑒𝑠𝑡 is the minimum was selected as
Comparison of GATS-PR with the state-of-the-art algorithms

In Tables 4 and 5, the detailed experimental environment of the reference exact and metaheuristic algorithms are given, where column Name represents the name of the reference algorithms, column Num lists the number of independent runs, column CPU gives the compu- tational configuration, and column Score is the single-thread rating2 of each computational configuration. GATS-PR was implemented in
processor whose single-thread rating 𝑠𝑏𝑎𝑠𝑖𝑐 is 2635 MOps/Sec. All CPU C++11, built and executed on an Intel Core i3-10100 @ 3.60 GHz times reported in this section are multiplied by 𝑠𝑎𝑙𝑔 ∕𝑠𝑏𝑎𝑠𝑖𝑐 , where 𝑠𝑎𝑙𝑔 is the single-thread rating of the CPU used by the algorithm 𝑎𝑙𝑔. For
GVTS-PR, each instance was independently tested three times with the time limit of one hour.
In terms of 𝑡𝑎𝑣𝑔 , the result of an algorithm is better than/worse
than/equal to that of GATS-PR when:
Its quality is not worse than/not better than/equal to that of GATS- PR. Because HGA, VTNS and MILS were run multiple times, we use

the final value of the parameter and it is indicated in bold in Tables 2
and 3.
𝑓𝑎𝑣𝑔
as the evaluation criterion of the solution quality. For other

Five parameters are critical to the performance of GATS:

The number 𝛿 of customers considered at each iteration. Its default value is 0.3 × |𝑉 𝐶 |.
The combination of the lower and upper bounds 𝑤𝑚𝑖𝑛 and 𝑤𝑚𝑎𝑥 of
neighborhood weights. Its default value is (1, 100).
The discount factor Θ of accumulative generalized objective func-
tion value improvement. Its default value is 0.7.
The convergence speed factor 𝜆 of weights. Its default value is 0.05.
thresholds  𝑔𝑡𝑚𝑖𝑛  and  𝑔𝑡𝑚𝑎𝑥 .  Its  default  value  is  (0.05,  0.2). • The combination of the minimum and maximum granularity

ber 𝑖𝑡𝑒𝑢𝑛𝐼 𝑚𝑝 of the consecutive iterations without improvement reached The termination condition of the GATS procedure is that the num-
100 × |𝑉 𝐶 |. The results of tuning GATS-related parameters are shown
reference algorithms except for TS, we use 𝑓𝑏𝑒𝑠𝑡 because they were
in the literature, so we do not compare its 𝑡𝑎𝑣𝑔  with ours. run only once. The computational configuration of TS is not given
Its 𝑡𝑎𝑣𝑔 is smaller than/larger than/equal to that of GATS-PR.
In Tables 6 and 7, results in column BKS with an asterisk indicate that they are the optimal solutions proved by [11] and [12]. Results
tained by GATS-PR. If 𝑓𝑏𝑒𝑠𝑡 or 𝑓𝑎𝑣𝑔 obtained by an algorithm is equal to with an underline indicate that they are new best known results ob- BKS, it is indicated in bold. If 𝑓𝑏𝑒𝑠𝑡 , 𝑓𝑎𝑣𝑔 or 𝑡𝑎𝑣𝑔 obtained by an algorithm
is better than that of GATS-PR, it is shown in italics. Rows Better, Equal
and Worse represent the number of results whose 𝑓𝑏𝑒𝑠𝑡 , 𝑓𝑎𝑣𝑔 or 𝑡𝑎𝑣𝑔 is
better than, equal to or worse than that of GATS-PR, respectively.
Table 6 presents 𝑓𝑏𝑒𝑠𝑡 and 𝑡𝑎𝑣𝑔 of GATS-PR and the state-of-the-art
exact algorithms. Except for controversial results produced by IMIP on
instance p15 and Model on instance pr02, 𝑓  obtained by GATS-PR

in Table 2. According to 𝑆𝐺𝑏𝑒𝑠𝑡
, we set 𝛿 to 0.5 × |𝑉 𝐶 |, 𝑤
𝑚𝑖𝑛
to 1, 𝑤
𝑚𝑎𝑥
𝑏𝑒𝑠𝑡

to 50, Θ to 0.9, 𝜆 to 0.1, 𝑔𝑡𝑚𝑖𝑛 to 0.05 and 𝑔𝑡𝑚𝑎𝑥 to 0.2.		
There are four key parameters for the path relinking operator:	2 https://www.passmark.com/.


Table 2
The results of the selected instances to tune GATS-related parameters.



Table 3
The results of the selected instances to tune path relinking-related parameters.



is not worse than that of the state-of-the-art exact algorithms on all the instances. Specifically, GATS-PR improved BKS on four instances
p09, p10, p11 and pr05. In terms of average 𝐺𝑎𝑝𝑏𝑒𝑠𝑡 and 𝑡𝑎𝑣𝑔 , GATS-PR
obtains significantly better results than the reference algorithms in less
than 30% run time of Model, which is the most eﬃcient exact algorithm among the reference algorithms. Hence, GATS-PR outperforms these state-of-the-art exact algorithms.
Tables 7 and 8 report 𝑓𝑏𝑒𝑠𝑡 , 𝑓𝑎𝑣𝑔 and 𝑡𝑎𝑣𝑔 of GATS-PR and the state-
of-the-art metaheuristic algorithms.

In terms of 𝑓𝑏𝑒𝑠𝑡 , MNS-TS obtains 6 worse solutions than GATS-PR and its average 𝐺𝑎𝑝𝑏𝑒𝑠𝑡 (i.e. 0.43) is worse than that of GATS-PR
on instances p12, p15 and p18, GATS-PR obtains better 𝑓𝑏𝑒𝑠𝑡 than (i.e. -0.60). Except for controversial results produced by MNS-TS


Table 4
Experimental environment of the state-of-the-art exact algo- rithms.


Table 5
Experimental environment of the state-of-the-art heuristic algorithms.



Table 6
The comparison of the solution quality of GATS-PR and the state-of-the-art exact algorithms.

1 The same author reported that the objective function value of the optimal solution on p15 is 1885.81 in the subsequent paper [11].
2 The objective function value of the optimal solution on pr02 is proved to be 979.82 in [11] and [16].


HGA, MNS-TS, MBILSA, MILS and TS on all the instances and the values of Worse exceed 15 for these algorithms. It indicates that GATS-PR obtains more high-quality solutions than the state-of-the- art metaheuristic algorithms.
In terms of 𝑓𝑎𝑣𝑔 , GATS-PR obtains significantly better results than
HGA and VTNS in terms of average 𝐺𝑎𝑝𝑎𝑣𝑔 . Specifically, not only
our 𝑓𝑎𝑣𝑔 on these instances was better than BKS. Although VTNS we improved BKS on instances p09, p10, p11 and pr05, but also
terms of 𝑓𝑏𝑒𝑠𝑡 , its 𝑓𝑎𝑣𝑔 (i.e. 3036.02) is significantly worse than that obtains a slightly better solution than GATS-PR on instance p08 in
of GATS-PR (i.e. 2778.26). It indicates that GATS-PR can obtain high-quality solutions frequently and GATS-PR is quite robust.
In terms of 𝑡𝑎𝑣𝑔 , no reference algorithms can obtain better results in
less time than GATS-PR. The values of Worse are 16, 8, 15, 16 and 13 for HGA, MNS-TS, MBILSA, VTNS and MILS. It shows that GATS- PR is more eﬃcient than them. Although GATS-PR spends a lot of time on large-scale instances, such as p08 and p10, it indicates that GATS-PR has better search capability than the reference algorithms because GATS-PR can obtain better results than them.


Table 7
The comparison of the results of GATS-PR and the state-of-the-art metaheuristic algorithms.

1 These two values are probably recorded in reverse in [8].
2 The results are better than the optimal ones proved by [10] and [11].
3 We round the results in [12] because results in other literature are only retained to two decimal places.
4 The value is missing because TS cannot obtain feasible solutions on a lot of instances.





Table 8
The comparison of 𝑡𝑎𝑣𝑔 of GATS-PR and the state-of-the-art metaheuristic
algorithms.



	

Fig. 4. Evolution process of 𝑓𝑏𝑒𝑠𝑡 for GATS-PR, No-PR, No-Gra and No-Tabu over time on a logarithmic scale.


These comparisons demonstrate that GATS-PR outperforms these state- of-the-art metaheuristic algorithms for solving the MDOVRP.

Importance analysis of algorithmic components

In order to analyze the importance of the proposed algorithmic com- ponents, we disable one of them from GATS-PR at a time and compare the results obtained by the variant algorithm with those of GATS-PR. The No-PR version only uses the granular adaptive tabu search pre- sented in Algorithm 2 to verify the effectiveness of path relinking. The
number of neighboring nodes of a given customer by setting both 𝑔𝑡𝑚𝑖𝑛 No-Gra version disables granular neighborhoods, which considers fixed and 𝑔𝑡𝑚𝑎𝑥 to 0.2. The No-Tabu version chooses the move with the best
improvement of the generalized function value at each iteration to val- idate the role of the solution-based tabu search. The No-ANS version does not use the adaptive neighborhood selection (ANS) but considers all the move types described in Fig. 2 at each iteration. The No-Group version regards each move type as a neighborhood to verify the effec- tiveness of grouping move types into four neighborhoods in ANS.
For GATS-PR and its variants, each instance was independently run three times and the time limit was one hour. The results of these algo- rithms are shown in Table 9. Although No-Tabu converges quickly, its results are significantly worse than those of GATS-PR. It indicates that the solution-based tabu search enables the search to escape from the local optima. GATS-PR obtains better results with less run time than No-PR and No-Gra. It demonstrates that path relinking and granular neighborhoods can improve the search eﬃciency without sacrificing the solution quality. No-Group obtains better solutions than No-ANS with less run time and GATS-PR obtains better solutions than No-Group with less time. It demonstrates that ANS can improve eﬃciency and ef- fectiveness of the search and grouping multiple move types into one neighborhood contributes to ANS when the number of move types is large. Therefore, all these algorithmic components are important for GATS-PR.
variants, Figs. 4 and 5 plot the evolution process of 𝑓𝑏𝑒𝑠𝑡 obtained by In order to intuitively show the convergence of GATS-PR and its
each algorithm on four representative instances p08, p09, pr05 and pr10 over time on a logarithmic scale. As shown in Figs. 4 and 5, we observe that:

Although GATS-PR obtains slightly worse solutions than No-PR and No-Tabu at the early stage of the search, GATS-PR outperforms them on instances p08 and p09, and match them on instances pr05 and pr10 at the end of the search. It indicates that GATS-PR con- verges slightly slower than No-PR and No-Tabu but it has a better search capability.
After excluding solutions obtained at the earliest stage of the search which are heavily influenced by initial solutions and with cer- tain randomness, GATS-PR outperforms No-Gra on the selected instances. It shows that the granular neighborhoods can improve the eﬃciency of the search without sacrificing the solution quality.
After excluding solutions obtained at the earliest stage of the search, GATS-PR always outperforms No-ANS on these four in- stances. Although No-Group obtains better solutions than GATS- PR at the middle stage of the search on instance pr05, it obtains worse solutions at the end of the search. On other three instances, No-Group is outperformed by GATS-PR. These observations demon- strate the importance of ANS again.

To further explore the effectiveness of ANS on the neighborhood se- lection mechanism, we record the frequency of performing each move type when the best solution is obtained by No-ANS, No-Group and
GATS-PR, respectively. Let 𝑟𝑖, 𝑖 ∈ 𝑁 represent the ratio of the number
of chosen move types that belong to neighborhood 𝑖 to the total num- ber of iterations. Fig. 6 presents 𝑟𝑖 of these three algorithms on all the
instances.








Table 9
Results of the GATS-PR and its variants.



	

Fig. 5. Evolution process of 𝑓𝑏𝑒𝑠𝑡 for GATS-PR, No-ANS and No-Group over time on a logarithmic scale.


For No-ANS, 𝑟𝑁1 exceeds 50% on 19 out of 24 instances and it ex- ceeds 70% on 10 ones. For GATS-PR, although 𝑁1 is also the most frequently performed neighborhood except for instance p02, 𝑟𝑁1
is only about 45%. Because GATS-PR obtains better solutions than No-ANS, it indicates that ANS diversifies the search at the suitable
time by selecting neighborhoods 𝑁3 and 𝑁4 more frequently than
No-ANS to help the search to escape from the local optima.
For No-Group, the sum of 𝑟𝑁1 and 𝑟𝑁2 exceeds 45% on 12 out of
24 instances and it is below 50% on all the instances. However, it
exceeds 50% on 19 out of 24 instances for GATS-PR. Because GATS- PR obtains better solutions than No-Group, it indicates that when the number of move types is large, grouping multiple move types into one neighborhood intensifies the search and thus enhances the search capability.


6. Conclusion and future research

In this paper, we propose the GATS-PR algorithm which hybridizes granular neighborhoods, adaptive neighborhood selection and solution- based tabu search with path relinking to solve the MDOVRP. This is the first time that path relinking is used for the MDOVRP to the best of our knowledge and a new similarity definition is designed for this prob- lem. We develop the adaptive neighborhood selection strategy to select suitable move types from a total of 22 ones and exclude unpromising neighborhood solutions by the granular neighborhoods. By forbidding accessing visited solutions, the solution-based tabu search can further enhance diversification of the search.
GATS-PR improved and matched the previous best known results on 4 and 19 out of 24 instances, respectively. By comparing the results obtained by GATS-PR with those of the state-of-the-art algorithms, we can observe that GATS-PR outperforms them for solving the MDOVRP. Importance analysis of the proposed algorithmic components demon- strates that granular neighborhoods, adaptive neighborhood selection,
solution-based tabu search and path relinking all play essential roles in obtaining high-quality solutions eﬃciently.
In future research, we intend to apply GATS-PR to other VRP-related problems, such as the multi-depot VRP and the multi-depot green VRP. The advanced population management mechanism is another topic that deserves to be investigated. We are also going to design other similarity definitions between solutions and integrate them to improve the search capability of path relinking to solve the MDOVRP.

CRediT authorship contribution statement

Wenhan Shao: Investigation, Conceptualization, Methodology, Data collection, Software, Validation, Visualization, Writing – origi- nal draft, Writing – review and editing. Tuanyue Xiao: Investigation, Methodology, Data collection, Software, Validation, Writing – original draft, Writing – review and editing. Zhouxing Su: Conceptualization, Methodology, Writing – review and editing, Funding acquisition. Jun- wen Ding: Conceptualization, Methodology, Writing – review and edit- ing, Supervision, Project administration, Funding acquisition. Zhipeng Lü: Conceptualization, Methodology, Writing – review and editing, Funding acquisition.

Declaration of competing interest

The authors declare that there is no competing interest.

Acknowledgements

This work was supported in part by the National Natural Science Foundation of China (NSFC) under Grants 72101094 and 62202192, and the Special Project for Knowledge Innovation of Hubei Province under Grant 2022013301015175.

























































Fig. 6. Statistics on the ratios of the neighborhood selection of No-ANS, No-Group and GATS-PR.

References

Dantzig GB, Ramser JH. The truck dispatching problem. Manag Sci 1959;6(1):80–91.
Xidias E, Zacharia P, Nearchou A. Intelligent fleet management of autonomous ve- hicles for city logistics. Appl Intell 2022;52(15):18030–48.
Zou G, Tang J, Yilmaz L, Kong X. Online food ordering delivery strategies based on deep reinforcement learning. Appl Intell 2022;52(6):6853–65.
Alitappeh RJ, Jeddisaravi K. Multi-robot exploration in task allocation problem. Appl Intell 2022;52(2):2189–211.
Kaabi J, Harrath Y, Mahjoub A, Hewahi N, Abdulsattar K. A 2-phase approach for planning of hazardous waste collection using an unmanned aerial vehicle. 4OR Nov. 2022.
Vidal T, Crainic TG, Gendreau M, Lahrichi N, Rei W. A hybrid genetic algorithm for multidepot and periodic vehicle routing problems. Oper Res 2012;60(3):611–24.
Tarantilis CD, Kiranoudis CT. Distribution of fresh meat. J Food Eng 2002;51(1):85–91.
Liu R, Jiang Z, Geng N. A hybrid genetic algorithm for the multi-depot open vehicle routing problem. OR Spektrum 2014;36(2):401–21.
Garey MR, Johnson DS. Computers and intractability: a guide to the theory of NP- completeness. USA: W. H. Freeman & Co.; 1990.
Granada M, Toro EM, Gallego R. An MIP formulation for the open location-routing problem considering the topological characteristic of the solution-paths. Networks 2019;74(4):374–88.
Lalla-Ruiz E, Mes M. Mathematical formulations and improvements for the multi- depot open vehicle routing problem. Optim Lett 2021;15(1):271–86.
Nucamendi-Guillén S, Padilla AG, Olivares-Benitez E, Moreno-Vega JM. The multi- depot open location routing problem with a heterogeneous fixed fleet. Expert Syst Appl 2021;165:113846.
Lambert M, Hassani R. Diesel genset optimization in remote microgrids. Appl Energy 2023;340:121036.
Xiong Z, Zhao M, Tan L, Cai L. Real-time power optimization for application server clusters based on mixed-integer programming. Future Gener Comput Syst 2022;137:260–73.
Vardhan BVS, Khedkar M, Srivastava I. Effective energy management and cost effec- tive day ahead scheduling for distribution system with dynamic market participants. Sustain Energy Grids Netw 2022;31:100706.
Lalla-Ruiz E, Expósito-Izquierdo C, Taheripour S, Voß S. An improved formulation for the multi-depot open vehicle routing problem. OR Spektrum 2016;38(1):175–87.
Wang H, Li R, Gong W. Minimizing tardiness and makespan for distributed het- erogeneous unrelated parallel machine scheduling by knowledge and Pareto-based memetic algorithm. Egypt Inform J 2023;24(3):100383.
Cui Z, Li B, Lan Z, Xu Y. Many-objective evolutionary algorithm based on three-way decision. Egypt Inform J 2023;24(3):100388.
Zakaryia SA, Ahmed SA, Hussein MK. Evolutionary oﬄoading in an edge environ- ment. Egypt Inform J 2021;22(3):257–67.
Utamima A. A comparative study of hybrid estimation distribution algorithms in solving the facility layout problem. Egypt Inform J 2021;22(4):505–13.
Lin A, Li S, Liu R. Mutual learning differential particle swarm optimization. Egypt Inform J 2022;23(3):469–81.
Chen W-N, Tan D-Z. Set-based discrete particle swarm optimization and its applica- tions: a survey. Front Comput Sci 2018;12(2):203–16.
Yang W, Ke L. An improved fireworks algorithm for the capacitated vehicle routing problem. Front Comput Sci 2019;13(3):552–64.
Liu G, Guo W, Li R, Niu Y, Chen G. XGRouter: high-quality global router in X- architecture with particle swarm optimization. Front Comput Sci 2015;9(4):576–94.
Liu S, Huang W, Ma H. An effective genetic algorithm for the fleet size and mix vehicle routing problems. Transp Res, Part E, Logist Transp Rev 2009;45(3):434–45.
Soto M, Sevaux M, Rossi A, Reinholz A. Multiple neighborhood search, tabu search and ejection chains for the multi-depot open vehicle routing problem. Comput Ind Eng 2017;107:211–22.
Brandão J. A memory-based iterated local search algorithm for the multi-depot open vehicle routing problem. Eur J Oper Res 2020;284(2):559–71.
Sadati MEH, Çatay B, Aksen D. An eﬃcient variable neighborhood search with tabu shaking for a class of multi-depot vehicle routing problems. Comput Oper Res 2021;133:105269.
Abdzadeh B, Noori S, Ghannadpour SF. Simultaneous scheduling of multiple con- struction projects considering supplier selection and material transportation routing. Autom Constr 2022;140:104336.
Toth P, Vigo D. The granular tabu search and its application to the vehicle-routing problem. INFORMS J Comput 2003;15(4):333–46.
Glover F. Future paths for integer programming and links to artificial intelligence. Comput Oper Res 1986;13(5):533–49.
Escobar JW, Linfati R, Baldoquin MG, Toth P. A granular variable tabu neigh- borhood search for the capacitated location-routing problem. Transp Res, Part B, Methodol 2014;67:344–56.
Schneider M, Schwahn F, Vigo D. Designing granular solution methods for routing problems with time windows. Eur J Oper Res 2017;263(2):493–509.
Shahmanzari M, Aksen D. A multi-start granular skewed variable neighborhood tabu search for the roaming salesman problem. Appl Soft Comput 2021;102:107024.
Máximo VR, Nascimento MCV. A hybrid adaptive iterated local search with di- versification control to the capacitated vehicle routing problem. Eur J Oper Res 2021;294(3):1108–19.
Sörensen K, Schittekat P. Statistical analysis of distance-based path relinking for the capacitated vehicle routing problem. Comput Oper Res 2013;40(12):3197–205.
Schneider M, Löﬄer M. Large composite neighborhoods for the capacitated location- routing problem. Transp Sci 2019;53(1):301–18.
