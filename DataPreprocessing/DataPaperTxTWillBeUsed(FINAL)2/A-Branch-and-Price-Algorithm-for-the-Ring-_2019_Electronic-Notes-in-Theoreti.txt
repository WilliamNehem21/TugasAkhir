Available online at www.sciencedirect.com


Electronic Notes in Theoretical Computer Science 346 (2019) 3–14
www.elsevier.com/locate/entcs

A Branch-and-Price Algorithm for the Ring-Tree Facility Location Problem
Fabio H. N. Abea,1, Edna A. Hoshinob,2,5, Alessandro Hillc,3 and Roberto Baldaccid,4
a Instituto Federal de Mato Grosso do Sul Dourados, Brazil
b Faculdade de Computa¸c˜ao Universidade Federal de Mato Grosso do Sul
Campo Grande, Brazil
c Department of Industrial and Manufacturing Engineering California Polytechnic State University
San Luis Obispo, USA
d Department of Electrical, Electronic, and Information Engineering “Guglielmo Marconi” University of Bologna
Bologna, Italy

Abstract
The ring-tree facility location problem is a generalization of the capacitated ring-tree problem in which additional cost and capacity related to facilities are considered. Applications of this problem arise in the strategic design of bi-level telecommunication networks. We investigate an extended integer programming formulation for the problem and different approaches to deal with the NP-hardness of the pricing problem that appears in a branch-and-price algorithm to solve it. Computational experiments show how heuristics and relaxations improved the performance of a branch-and-price algorithm.
Keywords: capacitated ring-tree problem, network design, integer programming, column generation, q-routes.


Introduction
The ring-tree facility location problem (RTFLP) is related to the capacitated ring- tree problem (CRTP), that was first described in [13]. The goal of both problems consists in designing a centralized two-level network of minimal cost in order to

1 Email: fabio.abe@ifms.edu.br
2 Email: eah@facom.ufms.br
3 Email: ahill29@calpoly.edu
4 Email: r.baldacci@unibo.it
5 Partially supported by Fundect, Brazil.

https://doi.org/10.1016/j.entcs.2019.08.002
1571-0661/© 2019 The Author(s). Published by Elsevier B.V.
This is an open access article under the CC BY-NC-ND license (http://creativecommons.org/licenses/by-nc-nd/4.0/).

connect customers to a central depot. Customers are connected to the central depot by rings (or cycles), on the inner level, and by trees that intercept the depot or one node of a ring, on the outer level. The structure on the inner level provides redundancy and, usually, is more expensive. Customers are also classified into two types, depending on the required level of connection. Customers of Type 1 can be connected by rings or trees whereas customers of Type 2 must be connected by rings. Additionally, Steiner nodes can be used as optional intermediate connections to reduce the overall network cost and they can be used in rings or trees. A ring- tree is a tree intercepting the depot or a ring passing throught the depot plus all trees intercepting its ring nodes. Motivated by real applications, the RTFLP and the CRTP consider a capacity for the total number of customers in each ring-tree and also for the number of ring-trees used to connect all customers to the depot. In [1], the RTFLP was introduced to deal with a broader class of applications. It generalizes CRTP by considering two different costs to each connection (ring and tree connection costs), an additional facility installation cost that must be payed when a tree is connected to a ring node, and also a tree capacity that defines an upper bound to the number of customers that can be served by each facility.
There are a few works in the literature directly related to the CRTP and the RTFLP. A multi-exchange local search heuristic and a matheuristic based on gen- eralized local branching for CRTP were described in [10,14]. Exact approaches for CRTP were proposed in [13,16]. In [12], different bi-objective functions for CRTP are discussed to minimize the risk of service loss due to single-edge failure. Profit- oriented versions of the CRTP were recently introduced in [11], in which models, heuristic, valid inequalities, and exact algorithms were proposed. The RTFLP is also related to the capacitated ring-star problem (CRSP). Basically, a ring-star refers to a ring-tree, whose trees have depth one. In the CRSP, there are no required levels for customers, tree capacity and facility installation costs. Notice that a CRSP solution could not be feasible for a RTFLP and vice versa. Thus, the RTFLP and the CRSP are similar but each one does not generalize the other. Exact algorithms for the CRSP were proposed in [3,15]. The CRSP has many applications and it is related to school bus routing problems, whose review can be found in [18]. The mul- tiple vehicle traveling purchaser problem (MV-TPP) is a school bus routing problem very close to the CRSP. In the MV-TPP, bus stops are selected simultaneously with the generation of routes. Branch-and-cut and branch-and-cut-and-price algorithms were proposed for the MV-TPP in [19] and [20], respectively. A review of other integrated two-level network design problems is given in [17]. Motivated by appli- cations of hub location problems in [17], the first level is called backbone network and the second level tributary network. Considering 2-edge connected networks and rings as structures in both levels, a branch-and-cut algorithm is proposed in [21] to design a two-level survivable network. In [1], two integer linear programming (ILP) formulations and preliminary results of a branch-and-price (B&P) algorithm for the RTFLP are presented. These preliminary results show that the set covering formulation provides very tight lower bounds but at very expansive processing time. In this work, we investigate an extended ILP formulation for the RTFLP and dif-

ferent approaches to deal with the NP-hardness of the pricing problem that appears in a branch-and-price algorithm to solve it. To accelerate the exact approach for the pricing problem, we consider a relaxation that allows vertex repetition inside the ring-trees. This relaxation is similar to the idea of ng-routes and q-arbs which were successfully used in variants of vehicle routing problems [4,5,22]. We also propose a primal heuristic to populate the initial basis and a heuristic for the pricing prob- lem. The remainder of this paper is organized as follows. In Section 2 we provide a formal description of the problem, additional definitions and notation. Section 3 is devoted to our algorithmic approaches, including a primal heuristic, heuristics and relaxations for the pricing problem. These methods are analyzed on instances from the literature and the computational results are reported in Section 4. Finally, we discuss some conclusions and address future work in Section 5.

Problem Definition
Let G = (V, E) be a simple undirected graph and V = U1 ∪ U2 ∪ W ∪ {d}, where d denotes the central depot, U2 is the set of customers of Type 2, U1 the set of customers of Type 1 and W the set of Steiner nodes. We denote the set of all customers U1 ∪ U2 by U and the set of vertices induced by an edge set X ⊆ E by V [X].
We define a ring-tree as a pair (R, T ), where R ⊆ E induces a cycle in G and T ⊆ E induces a forest in G, such that either R = ∅ and T is a tree in which d is a leaf, or; R /= ∅ is a cycle including d and each maximally connected component induced by T has exactly one vertex v /= d in V [R]. In the latter case, we assume that certain equipament must be installed in each vertex v to provide service to all customers of the corresponding connected component. In this case, we say that the vertex v has a facility associated to it and those customers in the connected component are served by this facility. Finally, we say that a customer u is covered by a ring-tree (R, T ) if u ∈ V [R] ∪ V [T ].
Consider a ring edge cost function cr : E '→ N, a tree edge cost function ct : E '→ N and a facility installation cost function cf : V '→ N. Moreover, let m, Q and Qt be integers that represent the maximal number of ring-trees, the ring-tree capacity, and tree capacity, respectively. Then a ring-tree p = (R, T ) is (Q, Qt)- capacitated if |V [R ∪ T ] ∩ U| ≤ Q and the number of customers served by each facility is less than or equal to Qt. The ring-tree cost of p is given by cp =
Σ cr + Σ ct +	Σ	cf.
e	e	v
e∈R	e∈T	v∈V [R]∩V [T ]
The ring-tree facility location problem consists in finding at most m
(Q, Qt)-capacitated ring-trees p1,..., pk, such that (i) each customer of Type 1 is covered by one ring-tree; (ii) each customer of Type 2 belongs to the cycle of one
ring-tree; and (iii) the overall network cost Σk	cp is minimized.
i
RTFLP is NP-hard since it generalizes the traveling salesman problem when m = 1, Q = |V |, and U2 = V \ {d}. It is also related to other well-known optimization problems such as vehicle routing problems, Steiner tree problems, and ring-star

problems. For more relationships regarding ring-tree topology, we refer to [13].
Algorithmic Approaches
Two ILP formulations for the RTFLP were proposed in [1]. The first one is a com- pact formulation based on multi-commodity flows (MCF) and the second one con- siders (Q, Qt)-capacitated ring-trees as columns in a set partitioning model (SPF). The lower bounds provided by the linear relaxation (LR) of (SPF) were 51% tighter than those obtained by the compact formulation [1]. Since (SPF) has an expo- nential number of variables, usually the column generation (CG) approach is used to solve its LR. In this approach, two subproblems must be solved: the restricted master problem (RMP) and the pricing problem. The RMP is the linear relax- ation restricted to a small subset of the columns and the pricing problem consists in identifying a column, with negative reduced cost to be added to the RMP, which is re-optimized. This procedure repeats until no column with negative reduced cost can be found. The pricing problem that arises when solving the LR of (SPF) by CG consists of finding a ring-tree with minimum reduced cost. In [1], (MCF) and (SPF) consider an auxiliary oriented graph Gj = (V, A) with A = {(i, j), (j, i) : ij ∈ E} to model a directed ring-tree. Notice that a directed ring-tree uniquely induces an undirected counterpart. Hereafter, Gj will be used as G. Thus, edges and trees can be also mentioned as arcs and arborescences. For the sake of notation, an arc (i, j) will be denoted by ij.
Let P be the set of all (Q, Qt)-capacitated ring-trees for an instance of the
RTFLP. A ring-tree p = (R, T ) can be represented by two characteristic vectors r and t of dimension (|V | + |A|) × 1. The components of r are such that rp equals to one if and only if vertex i belongs to V [R] and rij is one if and only if arc ij is in R. Similarly, the components of t are such that tp equals to one if and only if vertex i belongs to V [T ] \ V [R] and tij is one if and only if arc ij is in T . We associate a variable λp to each ring-tree p ∈ P to decide if p is part of the solution. We also use binary variables yi and xe for each vertex i ∈ W and each arc e that assume value 1 if and only if they belong to the solution. A set partition formulation for the RTFLP is described next.
(SPF )  min Σ cpλp
p∈P
subject to Σ λp ≤ m	(1)
p∈P
Σ (ap)λp =1	∀i ∈ U	(2)
p∈P
Σ (ap)λp = yi	∀i ∈ W	(3)
p∈P
Σ (rp + tp)λp = xe	∀e ∈ A	(4)
e	e
p∈P
y ∈ {0, 1}|W |,x ∈ {0, 1}|A|, 0 ≤ λp ≤ 1	∀p ∈ P	(5)
where ap = rp, if i ∈ U2, otherwise, ap = rp + tp.
i	i	i	i	i
Constraint (1) limits the number of ring-trees while Inequalities (2) ensure that
each customer of Type 1 is contained in exactly one ring-tree and each customer

of Type 2 belongs to exactly one ring. Constraints (3), (4), and (5) forbid Steiner nodes and arcs to appear in two or more ring-trees. Let π, α, γ and β be the dual variables associated with constraints (1), (2), (3), and (4), respectively. The
reduced cost of a ring arc is c¯r	r − βij − kj and the reduced cost of a tree arc
is c¯t	t − βij − kj, where kj is 0, αj, or γj depending on whether j is d, or j
in U , or W , respectively. Thus, the reduced cost of a ring-tree p = (R, T ) is
given by c¯p = Σ	c¯r rp + Σ	c¯t tp + Σ	cfθv − π, where θv is equal to1 if
v ∈ V [R] ∩ V [T ] and 0, otherwise.
The pricing problem for (SPF) consists in finding a ring-tree p ∈ P that minimizes c¯p, which is NP-hard since it generalizes the profitable tour problem [8] when U1 = W = ∅ and Q = |V |. We discuss next our approaches to cope with the hardness of this subproblem.

The relaxed pricing problem
Instead of finding the ring-tree with minimal reduced cost, we consider a relaxation for the pricing problem that allows some vertex repetitions. Our idea consists of combining two successful relaxations: ng-route and qarb relaxations, proposed in [5] and [22] for the capacitated vehicle routing problem and capacitated minimum spanning tree problem, respectively. This approach was also successfully applied to the CRSP [4].
A ng-route consists of non-necessarily elementary routes (or rings) that consider a set of prohibited vertex. This set is dynamically built and is based on sets called ngsets that are associated with each vertex. Basically, the ngset of vertex i, denoted by NG(i), contains i and a limited size subset of selected vertices, for example, Δ closest neighbor of vertex i. As higher as the parameters Δ, more elementary is the route. Usually, routes are built as paths starting from the depot d, ending in a vertex, say i, and including an arc (i, d). Thus, all routes can be obtained by dynamic programming (DP) just extending paths over all vertices that are not prohibited. Consider a path P = (v0 = d, v1,..., vk) starting from the depot and ending at vertex vk. The set of prohibited vertices to extend the path P is denoted
by π(P ) and is given by π(P )= {vr : vr ∈  k	NG(vi), 1 ≤ r ≤ k − 1}∪ {vk}.
Now, a qarb rooted at vertex i, i /= d, is the vertex i alone or the vertex
i connected to other qarbs rooted at distinct vertices v1,..., vk by arcs (i, vj),
j = 1,..., k. We combine ng-route and qarb to obtain a relaxation of the pric- ing problem. To explain this idea consider a few more definitions. A relaxed qarb isa qarb rooted at vertex i plus the arc (d, i). An ng-path is a non-necessarily ele- mentary path P = (v0 = d, v1,..., vk) starting from the depot in which vk /∈ π(Pj) where Pj = (v0, v1,..., vk—1) is also an ng-path. In other words, each vertex vi in P is not a prohibited vertex to extend the path (v0,..., vi—1). An ng-pathtree is an ng-path P = (v0 = d, v1,..., vk), k ≥ 2, plus qarbs rooted at vertices in P , except the depot. An ng-ringtree is an ng-pathtree ending at a vertex i plus the arc (i, d). We call both, a relaxed qarb and an ng-ringtree, as a relaxed ring-tree. Noticed that a ring-tree is also a relaxed ring-tree. The relaxed pricing problem consists of finding the relaxed ring-tree of minimal reduced cost.

The algorithm to solve the relaxed pricing problem consists of two DP proce- dures. Consider an order v1 < v2 < ... < vl to the vertex set U1 ∪ W in which l = |U1 ∪ W|.
Let g(i, j, q, s) be the cost of a minimum cost qarb rooted at vertex vi in which the number of customers is equal to q, the number of Steiner nodes is exactly s, and each child vk of the root node is such that k ≤ j. Functions g(i, j, q, s), for each i ∈ V \ {d}, j ∈ U1 ∪ W , q ∈ {0,..., Qt}, and s ∈ {0,..., |W|} can be computed in pseudo-polynomial time using the DP functions similar to the ones described in [22] as follows. g(i, j, q, s)= min{g(i, j− 1, q, s), c¯t + g(j, l, q−a, s− (1 −a)), min{g(i, j− 1,q − qj,s − sj)+ c¯t + g(j, l, qj, sj): aj ≤ qj ≤ q − a, 1 − aj ≤ sj ≤ s − (1 − a)}, where the constant a = 1, if i ∈ U1, otherwise a = 0 and aj = 1, if j ∈ U1, otherwise aj = 0. We initialize g(i, 0, 0, 0) = ∞ and g(i, 0, a, 1 − a)= 0, for all vertex i ∈ U1 ∪ W and compute g(i, j, q, s) in increasing order of j, q and s. The cost of a minimum cost

relaxed qarb can be computed as mini∈U ∪W,a≤q≤Q ,1—a≤s≤|W | c¯t
+ g(i, l, q, s).

1	t	di
Let f (π, i, q, s) be the cost of a ng-pathtree of minimal cost whose ng-path P
ends at the vertex i and such that (i) π = π(P ); (ii) the number of customers in the ng-ringtree is equal to q, and (iii) the number of Steiner nodes is exactly s. The DP recursion for computing function f (π, i, q, s), for each vertex i ∈ V \ {d}, q ∈ {0,..., Q}, and s ∈ {0,..., |W|} is as follows. f (π, i, q, s)= min{f (πj, j, qj, sj)+ 
r + g(i, |U1 ∪ W|,q − qj,s − sj)+ b : i /∈ πj, 0 ≤ qj ≤ q − a, 0 ≤ sj ≤ s − (1 − a)}.
where a = 1 if vertex i ∈ U , otherwise a = 0 and b = cf if q − qj + s − sj > 1, otherwise b = 0. We initialize f ({0}, 0, 0, 0) = 0 and f ({0}, 0, q, 0) = ∞, ∀1 ≤ q ≤ Q. Thus, the cost of a minimum cost relaxed ng-ringtree can be computed as mini∈V \{d},0≤q≤Q,0≤s≤|W | f (π, i, q, s)+ c¯r .
Consider two ng-ringtrees Ri, i ∈ {1, 2}, whose corresponding ng-path Pi ends at the same vertex. Let qi and si the number of customers and Steiner nodes in Ri, respectively. Ng-ringtree R1 dominates R2 (and R2 is dominated by R1) if its cost is less than R2’s cost, q1 ≤ q2, s1 ≤ s2, and π(P1) ⊆ π(P2). Since dominated ng-ringtrees are unnecessary to construct a relaxed ring-tree of minimal cost, we discard all of them.
Partial pricing
Partial pricing consists of using a heuristic to identify an approximate solution for the pricing problem quickly. Wherever the heuristic fails to find a column with negative reduced cost, an exact algorithm must be used.
Our heuristic consists of two layers. At the outer layer, a greedy randomized adaptive search procedure (GRASP) [9] is used to build a ring R passing through the depot and some customers. At the inner layer, arborescences connecting customers in U1∪W −V [R] are constructed, and further attached to the ring R to obtain a ring- tree. In each iteration of the construction phase at the outer layer, we increase the ring R = {(v0, v1), (v1, v2),..., (vk, vk+1 = v0)} by randomly selecting an element of a list of restricted candidates (RCL) and including one vertex in V [R]. Each element in RCL consists of a pair (u, i) where u is a vertex in V − V [R] and i ∈ [0, k] is a position in R.  A greedy adaptive function f provides the contribution of

each candidate (u, i) for the reduced cost of R and it is given by f (v, i) = c¯r	+

r
uvi+1
r
vivi+1
. This function is used to construct the RCL with the most promising

candidates based on a greedy parameter α.
After each change in R at the outer layer, the procedure at the inner layer is called to construct arborescences and join those with negative reduced cost to the current R. Notice that each arborescence T has a reduced cost that we will denote by c¯(T ) and it is given by the sum of reduced cost of their arcs and an additional facility installation cost, if needed. To construct the set of arborescence, we used Edmond’s algorithm [7] by successively selecting arcs (i, j), in non-decreasing order of reduced cost, with additional condition |V [Ti∪Tj]∩U1|≤ min{Qt, Q−|V [R]∩U|}, where Ti (Tj) is the arborescence that contains vertex i (j). We consider three ways to join an arborescence rooted at node k to R: (1) directly connecting the root k at depot node, (2) connecting it to a ring node of V [R]; or (3) including k as a ring node in R.
Considering all arborescences built, we construct another RCL to select arbores- cences to be joint to R. Each element of this RCL consists of a triple (T, i, l), where T is an arborescence, i refers to the position in R where T should be attached and l defines one of ways, 1, 2, or 3, of join T to R. We compute the contribu- tion of each candidate (T, i, l) for the reduced cost of the ring-tree which is given

by c¯(T )+ g, where g = c¯t
, g = c¯t
i
+ cf , if no facility was installed in vi, or

g = c¯r
i
+ c¯r
i+1
r
vivi+1
+ cf, depending on l = 1, 2, or 3. To reduce the number of

candidates, we only consider (T, i, l) that minimizes c¯(T )+g and whose contribution
is non-negative. The inner layer interactively and randomly selects a triple in RCL and finishes when no more arborescence can be joint to R. On the other hand, the outer layer finishes when the number of customers in V [R] reaches the limit Q. At the local search phase, we apply the well-known 2opt [6] to improve the reduced cost of the ring-tree. All ring-trees with negative reduced cost found are included as columns into the RMP.
A primal heuristic
We proposed a primal heuristic to construct a set of solutions for the RTFLP. These solutions are used to populate the initial basis of the RMP and the best one is used to define the first primal bound.
Our heuristic is based on GRASP without the local search phase. Firstly, we construct a set S = {(R1, T1), (R2, T2),..., (Rs, Ts)} of empty ring-trees to cover all customers. Then, we iteratively include each customer U2 in the ring of some ring-tree in S. After that, each customer U1 is included in some ring-tree, and, finally, we try to include Steiner node of W in some ring-tree, only if the overall cost is reduced. To select a vertex to be included in a ring-tree, we construct a RCL in the same fashion used in the heuristic of pricing. For the first step, each element in the RCL consists of a triple (u, i, l) where u is a vertex in U2 − V [Rl], l is the index of one ring-tree (Rl, Tl) of S, and i ∈ [0, k] is a position in Rl. In this case, the function f that provides the contribution of (u, i, l) for the cost of S is

given by f (v, i, l)= cr
r
uvi+1
r
vivi+1
. We consider four ways to include a vertex

k of U1 into a ring-tree: (1) inserting into a cycle by removing ring arc (i, j) and adding (i, k) and (k, j) , (2) appending to a ring node j, (3) inserting into a tree by removing tree arc (i, j) and adding (i, k) and (k, j), or (4) appending to a vertex j of an existing tree. In the last cases, the tree capacity has to be checked and the facility installation cost has to be considered in the second case.
Computational Experiments
All experiments were carried out on a desktop computer with an Intel i7-4790
3.6GHz processor, 32GB RAM, under Linux. The algorithms were implemented in C and compiled with gcc 4.9.2. We used the SCIP (v3.1.0) framework [2] and Cplex (v12.6.1.0) as the linear programming solver. 6 For the primal heuristic de- scribed in Section 3.3, we fixed α = 0.6. In all experiments, we fixed the time limit to 1800 seconds and considered the following configurations: best node selec- tion in the branch-and-bound (B&B) procedures, branching on variables, and all preprocessing, heuristic, cutting, and multithread of SCIP and Cplex were disabled. We derived four instance classes 7 A, B, C, and D from the TSPlib-based CRTP instances proposed in [13]. All CRTP instances (called Q-1, Q-2, .. ., Q-45) and the type 1 customer rates in {0, 0.25, 0.5, 0.75, 1} were considered. Each class differs in tree edge costs, facility installation costs, and tree capacities. Let we be the cost for an edge e ∈ E in the CRTP instance. For each edge e, we set cr = we and ct = [we/2♩. In instance classes A and B cf = 0, while in classes C and D, cf = [(mine∈E we + maxe∈E we)/2|. Qt = 1 in classes A and C while, in other classes, Qt = 2 [Q/3♩. The capacities m and Q, and the sets U1, U2, and W are the same as in the CRTP. We consider small instances with 26 vertices and large
instances with 51, 76, and 101 vertices.
We analyzed the performance of different B&P implementations. Consider (SPFr) a model similar to (SPF) whose columns are relaxed ring-trees. SPF-, SPF+, and SPF* are B&P implementations to solve (SPF) using a B&B to solve the exact pricing whilst SPFr+ and SPFr* solve (SPFr) using the DP described in Section 3.1. We also consider implementations (MCF- and MCF+) of a B&B for the (MCF). The signal “-” is used to indicate that no heuristics are enabled while “+” denotes that the primal heuristic described in Section 3.3 is used, and “*” indicates that the heuristic of pricing described in Section 3.2 is used in addition to the primal heuris- tic.
First, we analyzed the quality of primal solutions found by the primal heuristic in small instances. In Table 1, column BestUB presents the percentage of heuristic solutions that were equal to the best upper bound found by B&P and B&B imple- mentations. Column Optimal shows the percentage of these solutions that were also optimal and column Gap provides the relative objective function gap of the primal solutions compared to the best known solution. We also analyzed which procedure generated the columns in the best solution found by SPF* code. Columns Primal,

6 The authors thank IBM and SCIP for the academic licenses.
7 The set of test instances is available upon request from the corresponding author.

ExactPric, and HeurPric show the percentage of columns in the best solution that were generated by primal heuristic, exact pricing procedure, and pricing heuristic, respectively. As shown in Table 1, the primal heuristic provided the best upper bound in many instances and also was responsible for 86% of columns in the best solution.
Table 1
Results for Primal Heuristics

Next, we analyzed the performance of all implementations. Table 2 summarizes the results for each class of instances for |V | = 26 and |V | = 51. Line optimal gives the percentage of instances solved to optimality and time shows the average time spent to reach it. Line solved shows the percentage of instances which were not solved to optimality, but whose primal and dual bounds could be calculated, and gap presents the final duality gap, on average, restricted to these instances. Finally, line root lb shows the average duality gap reached at the root node, defined as (ub − lb0)/ub, where ub refers to the best upper bound found and lb0 to the root lower bound (LB). The symbol ∗ is used to indicate that the time limit was reached.

Table 2
B&P and B&B performance for instances with |V | = 26 and |V | = 51

As shown in Table 2, SPFr+ and SPFr* presented better performance than other implementations. For example, on small instances, SPFr+ solved 28% of instances at optimality and reached a final duality gap of around 10%, on average. Moreover, the processing time spent by both codes was smaller than the others. With respect

to the root LB, the usage of the relaxed pricing problem decreased the initial LB quality only by 3% whilst (MCF) provided LB around 32% worse. Based on these results, we decided to analyze the performance to solve large instances (|V | = 51) only for three implementations (MCF+, SPFr+, and SPFr*). On large instances, MCF+ could not solve any instance at optimality while SPFr+ solved 3.3%. Both codes could compute a final duality gap for almost of instances, however the final duality gap reached by MCF+ was around 45%, on average, while SPFr+ reached around 14%.
We made a pairwise comparison to analyze the results only on instances solved by both codes. We compare SPF+ × SPF* (Table 3) to analyze the B&P performance when the partial pricing is used. Table 4 reports the comparison between SPF+ and SPFr+ to analyze the usage of the relaxed pricing problem. Finally, Table 5 compares B&B and B&P performances. In these tables, columns solved and optimality show values in the form XX/YY(ZZ) where XX indicates the amount of instances solved by the first code (or solved to optimality, in the second case) whereas YY refers the same for second code, and ZZ gives the amount of instances solved by both codes (or equivalently, solved to optimality by both codes). Columns gap and time give the final duality gap and the processing time, on average, for each code, restricted to the instances solved by both codes.
Table 3 Comparative SPF+ × SPF*

solved	gap	optimality	time

Concerning partial pricing, the pricing heuristic proposed in Section 3.2 could not improve the B&P performance as expected. Although no improvements of using partial pricing on (SPFr) could be verified, SPFr+ and SPFr* solved different instances at optimality. In the other hand, as shown in Table 3, the heuristic of pricing improved the B&P performance for (SPF).
Considering the relaxation of the pricing problem, Table 4 shows that the relaxed pricing proposed in Section 3.1 was effective to deal with the NP-hardness of the pricing problem. SPFr+ doubled the total of instances solved to optimality and also speeded up the B&P. Although SPF+ provides better duality gaps than SPFr+, the relaxed pricing procedure could provide duality gaps for all instances. SPFr+ finished with a larger duality gap than SPF+, possibly due to the lower bound quality provided by the relaxed model.

Table 4 Comparative SPF+ × SPFr+

solved	gap	optimality	time

Finally, we compare the B&P and B&B codes. As shown in Table 5, SPFr+ could solve significantly more instances at optimality than MCF+. Since none of the instances was solved to optimality simultaneously by both codes, processing time could not be verified. However, the duality gap was reduced by a factor 7, on average. These results are due to the tight LBs provided by (SPFr).
Conclusions
We analyzed different approaches to improve the performance of a branch-and-price algorithm to solve a set partitioning formulation for the ring-tree facility location problem. Computational experiments show that the improvements were due to the primal heuristic and the relaxation of the pricing problem. The primal heuristic provided good upper bounds and also columns to populate the initial basis, which were responsible for almost of columns in the best solution. In our experiments, only small instances (up to 51 vertices) could be treated by the current implementations. As further work, we intend to adapt valid inequalities from related problems and

analyze their efficacy in a branch-and-cut-and-price algorithm.

References
Abe, F. H. N., E. A. Hoshino and A. Hill, The ring tree facility location problem, Electron Notes Discret Math 50 (2015), pp. 331 – 336, LAGOS’15 — VIII Latin-American Algorithms, Graphs and Optimization Symposium.
Achterberg, T., SCIP: Solving constraint integer programs, Math Progr Comput 1 (2009), pp. 1–41.
Baldacci, R., M. Dell’Amico and J. Salazar, The capacitated m-ring star problem, Oper Res 55 (2007),
pp. 1147–1162.
Baldacci, R., A. Hill, E. A. Hoshino and A. Lim, Pricing strategies for capacitated ring-star problems based on dynamic programming algorithms, Eur J Oper Res 262 (2017), pp. 879 – 893.
Baldacci, R., A. Mingozzi and R. Roberti, New route relaxation and pricing strategies for the vehicle routing problem, Oper Res 59 (2011), pp. 1269–1283.
Croes, G. A., A method for solving traveling-salesman problems, Oper Res 6 (1958), pp. 791–812.
Edmonds, J., Optimum branchings, J Res National Bureau of Standards 71B (1967), pp. 233–240.
Feillet, D., P. Dejax and M. Gendreau, Traveling salesman problems with profits, Transp Sci 39 (2005),
pp. 188–205.
Feo, T. A. and M. G. Resende, Greedy randomized adaptive search procedures, J Global Optim 6 (1995),
pp. 109–133.
Hill, A., Multi-exchange neighborhoods for the capacitated ring tree problem, in: I. Dimov, S. Fidanova and I. Lirkov, editors, Numerical Methods and Applications, Lecture Notes in Computer Science, Springer International Publishing, 2015 pp. 85–94.
Hill, A., R. Baldacci and E. A. Hoshino, Capacitated ring arborescence problems with profits, OR Spectrum (2018).
Hill, A. and S. Schwarze, Exact algorithms for bi-objective ring tree problems with reliability measures, Comput Oper Res 94 (2018), pp. 38 – 51.
Hill, A. and S. Voß, Optimal capacitated ring trees, EURO J Comput Optim 4 (2016), pp. 137–166.
Hill, A. and S. Voß, Generalized local branching heuristics and the capacitated ring tree problem, Discret Appl Math 242 (2018), pp. 34 – 52.
Hoshino, E. A. and C. C. De Souza, A branch-and-cut-and-price approach for the capacitated m-ring– star problem, Discret Appl Math 160 (2012), pp. 2728–2741.
Hoshino, E. A. and A. Hill, Column generation approach for the capacitated ring tree problem (2014), ALIO/EURO 2014.
Klincewicz, J. G., Hub location in backbone/tributary network design: a review, Locat Sci 6 (1998),
pp. 307 – 335.
Park, J. and B.-I. Kim, The school bus routing problem: A review, EurJ Oper Res 202 (2010), pp. 311 – 319.
Riera-Ledesma, J. and J.-J. Salazar-Gonza´lez, Solving school bus routing using the multiple vehicle traveling purchaser problem: A branch-and-cut approach, Comput Oper Res 39 (2012), pp. 391 – 404.
Riera-Ledesma, J. and J. J. Salazar-Gonz´alez, A column generation approach for a school bus routing problem with resource constraints, Comput Oper Res 40 (2013), pp. 566 – 583.
Rodr´ıguez-Mart´ın, I., J.-J. Salazar-Gonz´alez and H. Yaman, A branch-and-cut algorithm for two-level survivable network design problems, Comput Oper Res 67 (2016), pp. 102 – 112.
Uchoa, E., R. Fukasawa, J. Lysgaard, A. Pessoa, M. P. de Arag˜ao and D. Andrade, Robust branch-cut- and-price for the capacitated minimum spanning tree problem over a large extended formulation, Math Progr 112 (2008), pp. 443–472.
