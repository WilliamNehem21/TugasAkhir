Egyptian Informatics Journal 21 (2020) 169–182











Formal verification for a PMQTT protocol
Eman Elemam a,⇑, Ayman M. Bahaa-Eldin b, Nabil H. Shaker c, Mohamed Sobh a
a Computers and Systems Eng. Dept., Faculty of Engineering, Ain Shams University, 1 El Sarayat St., Abbasseya, Cairo, Egypt
b Misr International University, On Leave from Ain Shams University, 1 El Sarayat St., Abbasseya, Cairo, Egypt
c Electronics and Comm. Dept., Faculty of Engineering, Misr International University, Gamaiet Ahmed Orabi, Al Obour, Cairo, Egypt



a r t i c l e  i n f o 


Article history:
Received 16 October 2019
Revised 7 December 2019
Accepted 21 January 2020
Available online 13 February 2020


Keywords:
IoT MQTT
Elliptic Curve Digital Signature Algorithm Elliptic Curve Diffie Hellman
Formal verification ProVerif
a b s t r a c t 

The future of Internet of Things (IoT) foresees a world of interconnected people with every physical object in a seamless manner. The security related aspects for the IoT world are still an open field of discussion and research. The Message Queue Telemetry Transport (MQTT) application layer protocol is widely used in IoT networks. Since, MQTT standard has no mandatory requirements regarding the security services, therefore, manipulating the security related issues is different in MQTT platforms. This paper proposes a novel security protocol. It is the Protected Message Queue Telemetry Transport (PMQTT) protocol which is based on MQTT with added cryptographic primitives to offer security services for IoT systems. Moreover, a formal verification for a PMQTT protocol is conducted using the ProVerif cryptographic auto- mated verifier tool to prove that the PMQTT protocol satisfies the intended security properties.
© 2020 Production and hosting by Elsevier B.V. on behalf of Faculty of Computers and Artificial Intelli-
gence, Cairo University. This is an open access article under the CC BY-NC-ND license (http://creative-
commons.org/licenses/by-nc-nd/4.0/).





Introduction

The Internet of Things (IoT) is a brand new wave of technol- ogy that promise to make our lives better and easier. Although the current focus in the IoT industry is on the ease of use, func- tional properly, and low cost, there is urgent need to define, as quickly as possible, security standards in the IoT world capable of dealing with the heterogeneous requirements of the IoT environment [1].

MQTT components

The Message Queue Telemetry Transport (MQTT) protocol is considered one of the best candidate protocols for the IoT platforms since it is a real time lightweight publisher/


* Corresponding author.
E-mail addresses: eman.elemam@gmail.com (E. Elemam), ayman.bahaa@eng. asu.eg (A.M. Bahaa-Eldin), nabil.hamdy@miuegypt.edu.eg (N.H. Shaker), Mohamed. sobh@eng.asu.eg (M. Sobh).
Peer review under responsibility of Faculty of Computers and Information, Cairo University.


subscriber protocol [2]. The MQTT has five main components, they are [3]:

The Broker: It is the server that receives and publishes mes- sages between clients.
The Message: It is the container of the data that has been sent to the broker by the publisher or has been received by the subscriber from the broker.
The Publisher: It is the device which sends messages to the broker to update the data of certain topic(s).
The Subscriber: It is the device which receives messages from the broker that carry the updated status of the broker’s topic(s).
The Topic: It is an entity on the broker where the publisher sends messages to it and the subscriber receives messages from it.
The official MQTT standard [4] released by the Organization for the Advancement of Structured Information Standards (OASIS) does not have mandatory requirements regarding the security ser- vices like authentication, confidentiality, data integrity, and access control. Currently, solving the security related issues is a project and/or implementation specific matter and there is no specific standardization to handle these issues. This paper presents a Pro- tected MQTT (PMQTT) protocol that is based on the MQTT in con- junction with the PMQTT formal verification using the ProVerif
2.00 cryptographic protocol verifier tool to demonstrate that it sat- isfies the intended security properties.


https://doi.org/10.1016/j.eij.2020.01.001
1110-8665/© 2020 Production and hosting by Elsevier B.V. on behalf of Faculty of Computers and Artificial Intelligence, Cairo University. This is an open access article under the CC BY-NC-ND license (http://creativecommons.org/licenses/by-nc-nd/4.0/).






Fig. 1. The Structure of the ProVerif Tool.


Structure of ProVerif

ProVerif is an efficient automated tool used during the verifica- tion testing stage of the security protocols [5,6]. It is based on Pi calculus and it has the ability to verify the authenticity and the secrecy properties of the cryptographic security protocols. It can handle an unbounded number of sessions for the protocol under test [7]. Besides, using ProVerif, the intruder has the power to vig- orously monitor the communication channel between the commu- nicating parties where he can capture, modify, inject, and resend messages to maliciously attack the system [8]. Furthermore, Pro- Verif provides a tracing for the adversary attack to the system to clarify whether the protocol has security problems or not.
The inputs to the ProVerif are a model for the security protocol under verification testing in the form of Pi calculus, in conjunction with the security properties that the user needs to prove, As illus- trated in Fig. 1 [7]. ProVerif takes these inputs and translates them into protocol clauses and security queries required to be verified using the automatic translator. The protocol clauses clarify the computational abilities of the adversary and the messages of the protocol. After that, ProVerif makes use of the facts – that are the initial info possessed by the attacker – to check whether the secu-
rity queries are derivable from the protocol clauses or not. If the security queries can be resolved, then the protocol under test is susceptible to an attack possibility, else the modelled protocol is secure against malicious attacks.
The rest of the paper is organized in the following sections: Sec- tion 2 summarizes the previous work done to enhance the security aspects of the MQTT protocol. After that, Section 3 presents the proposed PMQTT protocol and its suggested cryptographic primi- tives to offer security services in IoT platforms. Then, Section 4 dis- cusses the details of the formal verification for PMQTT to prove that it securely offers the intended security services. Finally, Sec- tion 5 summarizes the conclusions of the conducted work in con- junction with the future research directions to clarify the added values of using PMQTT in real MQTT based IoT platforms.

Previous work

Bhawiyuga et al. in 2017 [9] proposed a token based authenti- cation for MQTT using a JSON Web Token (JWT) server as an authentication server [10]. They select the JWT because it has a small message size. They proposed a system architecture in which the user sends his/her username and password to the JWT authen- tication server. Then, the server checks its database for the validity of the user credential. If they are valid, the server sends the token to the user who saves that token in his/her local storage. When the user wants to connect to the Broker, he/she sends his/her token during the connection establishment phase to the Broker who checks the validity of the token with the JWT server. If it is valid, the Broker will allow the user to publish/subscribe to the required topics. The sequence diagram of their system is indicated in Fig. 2. It is as follows:

The client requests a token from the authentication server using its username and password to authenticate itself.
The authentication server grants token to the client after validating its credentials.
The client makes use of the token in the connection estab- lishment phase with the MQTT Broker.
The Broker checks the validity of the token presented by the client with the authentication server.
The authentication server replies with the validity status of the token to the MQTT Broker.





Fig. 2. The Sequence Diagram of the Token Based MQTT Publisher/Subscriber System [9].




Fig. 3. Proposed Authorization Mechanism in MQTT System [3].



In case of valid token, the Broker approves the connection request from the client.
The client starts to access the topics of the Broker.
Niruntasukrat et al. [3] presented an authorization mechanism for MQTT using OAuth 1.0a [11] authorization standard. They sta- ted that since OAuth 2.0 [12] does not support any security on top of the TLS/SSL, OAuth 1.0a is more suitable for the IoT environment than OAuth 2.0. Their idea can be summarized in that the user — who has the access credentials — will delegate some of his/her authority to some devices. Their proposed mechanism is presented in Fig. 3. It has the following steps:

The user sends an HTTPS message to the AuthServer to request the Device ID and its secret.
The AuthServer grants the device credentials to the user (Device ID and its secret).
The user manually embeds the device credentials into the device local memory.
The device sends to the AuthServer to request a Request Token. This message is digitally signed using the HMAC- SHA1 algorithm where the HKey is the Device Secret.
The AuthServer issues a Request Token and its secret after validating the device credentials.
The device sends to the AuthServer to request an Access Token. This message is digitally signed using the HMAC- SHA1 algorithm where the HKey is the Request Token Secret and the Device Secret.
The AuthServer requests user approval using e-mail or Short Message Service (SMS).
The user approves the Device ID and the access privilege scope.
The AuthServer grants the Access Token and its secret to the device.
The device can access the MQTT broker where the username will be the Device ID with concatenated timestamp and the password will be generated from the access token and the username with an HMAC-SHA1 where the HKey will be the Access Token Secret and the Device Secret.
Rahman et al. in 2018 [13] offered the usage of Key Policy/ Cipher Policy Attribute Based Encryption (KP/CP ABE) using Ellip- tic Curve Cryptography (ECC) to get a modified MQTT protocol capable of delivering secure communication between end devices. The sequence diagram of their proposed system archi- tecture is shown in Fig. 4. This architecture has the following stages:

After system initialization, both the Device and the Web Server will register in the MQTT Broker.
The key management phase is performed between the MQTT Broker and the IoT Device and the Web Server.
Both the Device and the Web Server will subscribe in the required topics of the MQTT Broker.
When an authorized client sends a command to the Web Server, it will encrypt this command and publish the encrypted message to the MQTT Broker.
The Broker will pass the encrypted message to the Device where the decryption process will be performed and the appropriate action(s) will be taken.




Fig. 4. The Sequence Diagram of the Proposed System Architecture [13].

The device will encrypt the prepared response and publish the encrypted message to the MQTT Broker.
The MQTT Broker will pass the encrypted response to the Web Server.
The Web Server will decrypt the received response.
The received decrypted response is delivered to the client.
Bali et al. in 2019 [14] tackled a lightweight mechanism for authentication in MQTT platforms using chaotic algorithm with block cipher. Their presented simulation model is shown in Fig. 5. They mentioned that their proposed approach depends on the high diversity of the chaotic algorithm. Also, they stated that as the diversity of the keys are high as the mission of the attacker is difficult since it will be a hard job to get back the plaintext. Thus, a more secure system is achieved. Besides, they clarified that they maintained the high diversity between the consecutive keys by properly selecting the chaotic parameters and they depends on the distance entropy when selecting these parameters.
Approaching rigorous analysis for the presented studies in this section, one can figure out that each system from the previous work covers one or two of the required security aspects in IoT envi- ronment like authentication, authorization, confidentiality, data integrity, secure key establishment and distribution, etc. Thus, there is a need for a protocol that offers a comprehensive security solution to cover the heterogeneous security requirements of the MQTT based IoT platforms.

Overview of the PMQTT protocol

The proposed PMQTT protocol maintains a secure communica- tion environment for an MQTT based IoT networks. The suggested system architecture is shown in Fig. 6. It has three doctors (Dr1, Dr2, and Dr3), three Patient Controllers PC (PC1, PC2, and PC3) and a Broker. Some topics are recommended on the Broker. They are: PC1 Status, PC2 Status, PC3 Status, Dr1 Status, Dr2 Status, Dr3 Status, PC1 Data, PC2 Data, and PC3 Data.
The proposed secure PMQTT protocol has three stages as indi- cated in Fig. 7. The first stage is the authentication stage in which the client whether it is a publisher or a subscriber proves its iden- tity to the Broker during the MQTT connection establishment
phase. If the client fails to prove its identity to the Broker, the Bro- ker will reject the connection request. Else, the Broker will accept the client’s connection and the second stage will start. During the second phase the PC and the Dr are going to jointly establish and share a session key. Then, in the last stage, they will exchange end-to-end encrypted data using the shared session key. The flow chart of these stages is depicted in Fig. 8.

The authentication stage of the PMQTT protocol

The first stage of the proposed secured PMQTT based IoT plat- forms is the authentication stage where in this phase the Broker checks the claimed identity of the client whether this client was a Dr or a PC during the connection establishment phase of the MQTT protocol. If the claimed identity is true, the Broker accepts the client’s connection request. Else, the Broker rejects the connection request. The proposed authentication protocol is based on the Elliptic Curve Digital Signature Algorithm (ECDSA) [15]. Its sequence dia- gram is depicted in Fig. 9 and its flow chart is shown in Fig. 10. The
authentication process starts at the client side with the following:

The client selects a random K where 1 ≤ K ≤ n and n is the order of the elliptic curve.
The client calculates KG = (x1, y1) where G is the generator point of the elliptic curve, x1 is the x-coordinate of the mul- tiplication result, and y1 is the y-coordinate of the multipli- cation result.
The client calculates r = x1 mod n to be the first part of the digital signature.
The client calculates K—1 mod n.
The client calculates SHA-1(MQTT_Connect_Packet) = e where the inputs to the SHA-1 are the client username and its password.
The client calculates s = K—1 (e + dr) where d is the private key of the client and the resultant s is the second part of the digital signature.
The client attaches the digital signature (r,s) to its username to construct the modified MQTT connect packet where the client password is not added to this packet.




Fig. 5. The Proposed Authentication Scheme Model in the MQTT Environment [14].







Fig. 6. The Proposed System Architecture for the PMQTT Network.


The Broker then receives the Modified_MQTT_Connect_Packet and verifies the identity of the client as follows:

The Broker calculates SHA-1(MQTT_Connect_Packet) = e where the payload of the MQTT_Connect_Packet is the cli-
Fig. 7. The Stages of the PMQTT Based IoT Environment.

ent username and its password that is retrieved from the database of the Broker.
The Broker calculates w = s—1 mod n where s is the second part of the digital signature that is attached to the received Modified_MQTT_Connect_Packet.
The Broker calculates u1 = ew mod n and u2 = rw mod n where r is the first part of the digital signature that is attached to the received Modified_MQTT_Connect_Packet.




Fig. 8. Flow Chart for the Stages of the PMQTT Based IoT Platform.


The Broker calculates X = (x1, y1) = u1 G + u2 Q where Q is the Public key of the client that is pre-embedded in the Broker.
The Broker checks if v = x1 mod n = r then the claimed client identity is true and the Broker accepts the client’s connec- tion request. Else, the Broker rejects the client’s connection request.

Conducting careful investigations for the proposed authentica- tion protocol, one can deduce that the Modified_MQTT_Con- nect_Packet has only the username and it has no password field. Although the password is used at the client side in the generation of the digital signature when hashing the MQTT_Connect_Packet using SHA-1 in step 5. Moreover, the client password is used at the Broker side when hashing the MQTT_Connect_Packet at step 8 where the client password is retrieved from the Broker internal database and the username is extracted from the received Modi- fied_MQTT_Connect_Packet. Accordingly, the username may be transferred from the client to the Broker in plain text without the need for the burden of the Secure Socket Layer (SSL) in the transport layer.
The key establishment and distribution stage of the PMQTT protocol

The second stage of the proposed secured protocol for the PMQTT based IoT platforms is the key establishment and distribu- tion stage. Through this phase, the PC and the Dr are going to share in the establishment of a symmetric secret session key based on the Elliptic Curve Diffie Hellman (ECDH) key agreement proto- col [16]. This shared secret key will be used in encrypting and decrypting the specific data related to the patient to whom this PC is attached.
The suggested sequence diagram of the proposed key establish- ment and distribution protocol between PC1 and Dr1 is illustrated in Fig. 11. It adheres to the following steps:

The PC1 and the Dr1 subscribe to the Dr1 Status and the PC1 Status topics on the Broker respectively.
PC1 selects a and Dr1 selects b where 1 ≤ a ≤ n-1;
1 ≤ b ≤ n-1 and n is the order of the elliptic curve.
PC1 calculates A = a G and Dr1 calculates B = b G where G is the generator of the elliptic curve.




Fig. 9. The Proposed Authentication Protocol for the PMQTT Based IoT Networks.


PC1 publishes A to the PC1 Status topic on the Broker and Dr1 publishes B to the Dr1 Status topic on the Broker.
PC1 receives B and Dr1 receives A.
PC1 produces the shared secret key by multiplying the received B by a that is picked in step 2 and Dr1 produces the shared secret key by multiplying the received A by b that is picked in step 2.

Approaching rigorous examinations for the suggested key agreement protocol, one can conclude that, following this proto- col the Dr and the PC are able to share a secret key over an insecure channel. Thanks to the elliptic curve discrete logarithm problem, the Broker cannot discover the shared secret between the PC and the Dr. Consequently, the transactions of this proto- col may securely occur over untrusted network. Moreover, the Broker of the PMQTT network may reside over the cloud and no need to have it in-house at the medical center. Accordingly, the burden of the network cost can be reduced without affecting the quality of the offered service of the proposed system.

The confidentiality stage of the PMQTT protocol

The third stage of the proposed protocol for the PMQTT based IoT platforms is the end-to-end encrypted data exchange stage. During this phase, the Dr and the PC are interchanging ciphered details related to the status of the patient through the Broker. The Dr and the PC are using symmetric cipher Advanced Encryp- tion Standard (AES) encryption scheme [17] based on the estab- lished shared secret key of the key establishment and distribution stage of the suggested secure protocol.
The suggested sequence diagram of the proposed end-to-end symmetric cipher between PC1 and Dr1 is demonstrated in Fig. 12. It passes through the following steps:

Both the PC1 and the Dr1 subscribe to the PC1 Data topic on the Broker.
The PC1 encrypts the particular data related to the status of the patient to whom PC1 is attached using the AES symmetric
encryption algorithm based on the resultant shared secret key of the key establishment and distribution phase between PC1 and Dr1.
The PC1 publishes its encrypted data to the PC1 Data topic on the Broker.
The Dr1 receives the published data from the PC1 Data topic of the Broker.
The Dr1 decrypts and analyzes the received data using the AES symmetric decryption algorithm based on the resultant shared key of the key establishment and distribution phase between PC1 and Dr1.

Conducting attentive examinations for this system, it worth noting that, the Broker has no idea about what is the shared key between the Dr and the PC as indicated in the key establishment and distribution phase of the PMQTT protocol. Accordingly, the hospital or the medical center may safely choose to build their Bro- ker over the cloud and the communication channel between the Dr and the PC may securely pass through untrusted network. Of course, this will have a great influence on the cost reduction of the establishment of the network infrastructure of the medical center. As a consequence, this emphasizes the practical importance of the proposed PMQTT for IoT networks.


Formal modeling for the PMQTT protocol using ProVerif

The formal verification of the PMQTT protocol is done using Pro- Verif 2.00. The protocol model verification is divided into two stages:

The first stage is to prove that the Broker can successfully authenticate the client whether it is a PC or a Dr using ECDSA algorithm.
The second stage is to prove:
The secrecy of the session key generated by the PC and the Dr using the ECDH algorithm.
The secrecy of the message encrypted with the generated session key using a symmetric encryption algorithm.




Fig. 10. The Flow Chart of the Proposed Authentication Protocol for the Telemedicine MQTT Based IoT Networks.



Fig. 11. The Proposed Key Establishment and Distribution Protocol for the PMQTT Based IoT Networks.




Fig. 12. The Proposed End-to-End Symmetric Cipher Protocol for the PMQTT Based IoT Platforms.



Fig. 13. The Declarations of the Authentication Formal Verification Stage.


The details of the conducted formal verification process is described in the following sub-sections.

The authentication verification stage

The declarations, the processes and the main process of the authentication formal verification stage are shown in Figs. 13–15 respectively. Two processes are needed to formally check the secu- rity of the client authentication in the PMQTT protocol. They are the client process and the Broker process as illustrated in Fig. 14.
In the main process of Fig. 15 the client public key is created and is used as input to unbounded number of the client process and unbounded number of the Broker process. In the client process and the Broker process the messages of the ECDSA is constructed
and exchanged between the two parties using the constructors declared in Fig. 13.
The authentication query is checked to verify that the endAuthenticationCheck event is reached securely without any attack possibility after the beginAuthenticationCheck event is injected. The Proverif results to verify this query are depicted in Fig. 16. Tracing the results, one can conclude that the tested authentication query is true.

The verification stage of the session key secrecy and the encrypted message secrecy

The declarations, the processes and the main process of the for- mal verification for the session key secrecy and the encrypted mes-




Fig. 14. The Processes of the Authentication Formal Verification Stage.



Fig. 15. The Main Process of the Authentication Formal Verification Stage.




Fig. 16. The Results for the Authentication Formal Verification Stage.




Fig. 17. The Declarations of the Formal Verification for the Session Key Secrecy and the Encrypted Message Secrecy.



sage secrecy are shown in Figs. 17–19 respectively. Three processes are needed to formally check the secrecy of the generated session key and the secrecy of the encrypted message in the PMQTT protocol. They are the PC, the Dr and the Broker process as illustrated in Fig. 18.
In the main process of Fig. 19 unbounded number of the PC pro- cess is created in parallel with unbounded number of the Dr pro- cess in parallel with unbounded number of the Broker process. In the PC process, the Dr process and the Broker process the messages of the ECDH is constructed and exchanged between the PC and the Dr through the Broker using the constructors declared in Fig. 17. Hence the session key is generated between the PC and the Dr. After that, the message is symmetrically encrypted using the cre- ated session key.
The session key secrecy query is verified to check whether the created session key is kept secret between the PC and the Broker or an adversary can reveal it. Moreover, the message secrecy query is tested too to verify that only the Dr is the one who can read the messages sent by the PC and vice versa. The Proverif results to ver- ify those queries are illustrated in Fig. 20. Conducting attentive investigation for the results, one can deduce that both the message secrecy and the session key secrecy queries are verified by Proverif as true. So, the channel between the Dr and the PC through the Bro- ker is reliable from a security point of view and they can exchange data securely over it.

The security goals of the PMQTT protocol

Approaching rigorous examination for the security queries results of the automated verifier tool ProVerif, it is clear that the following security goals are attainable by the PMQTT protocol:

The Client Successful Authentication: The client identifi- cation is successfully authenticated by the Broker. This is cleared by the correctness of the following query: inj-event(endAuthenticationCheck(id)) ==> inj-event(begi nAuthenticationCheck(id))
The Session Key Secrecy: The value of the session_key is only known to the PC and the Dr. This is illustrated by the attacker failure to resolve the session key as indicated by the following query: query attacker(session_key)
The Message Secrecy: The msg contents can only be read by the PC and the Dr. This is depicted by the adversary failure to reveal the contents of the exchanged messages between the PC and the Dr as displayed by the following query: query attacker(msg)

Consequently, the proposed PMQTT protocol is formally verified and the security of the channels between the PCs and the Drs. over the Broker are maintained. Thus, the proposed PMQTT protocol can be implemented over untrusted network offering secure transac- tions between the PCs and their Drs. Even the Broker may reside over the cloud and of course this will have a great effect on the cost reduction for applying the proposed PMQTT protocol on a real MQTT based IoT network.

Conclusions and future work

Approaching careful analysis for the presented protocol, one can conclude that it has the following strength points:

It comes up with an authentication approach without intro- ducing extra server for the MQTT based IoT network. So, there is no server dedicated for the authentication process. Instead, the already found Broker of the MQTT system can handle the proposed authentication scheme.
It comes up with an authentication scheme in which a sig- nature is attached to the username to construct a new mod- ified MQTT connect packet. The payload of this modified connect packet has no user password and this password is used in the production of the digital signature. Accordingly, the username of the payload can securely transferred from the client to the Broker in plain text without the need for the burden of the SSL in the transport layer.




Fig. 18. The Processes of the Formal Verification for the Session Key Secrecy and the Encrypted Message Secrecy.





Fig. 19. The Main Process of the Formal Verification for the Session Key Secrecy and the Encrypted Message Secrecy.


It satisfies the requirements of the confidentiality service by presenting an end-to-end encryption scheme over PMQTT environment.
It gives an opportunity for the Broker to reside over the cloud and extend the PMQTT system over untrusted network where the two communicating parties can exchange
encrypted data using a session key that is hold only by those communicating parties.
The presented PMQTT security protocol is formally verified using the cryptographic automated verifier ProVerif and the queries regarding the authenticity and the secrecy are proved to be true such that following the proposed protocol, the Broker can successfully authenticate the identity of the client. Furthermore, the secrecy of the session key and the encrypted message are maintained.

Consequently, the presented PMQTT protocol is suitable for pro- viding secure services for the MQTT based IoT platforms. Future research directions may be explained as follows:

The performance of the presented PMQTT need to be ana- lyzed in a practical MQTT network.




Fig. 20. The Results for the Formal Verification of the Session Key Secrecy and the Encrypted Message Secrecy.


Since the Broker is a single point of failure in the presented system, another hot redundant backup Broker may be added to the PMQTT based IoT system. Consequently, there must be some sort of database synchronization between the two Brokers.


References

Riahi Sfar A, Natalizio E, Challal Y, Chtourou Z. A roadmap for security challenges in the Internet of Things. Digit Commun Netw, Apr 2018;4 (2):118–37.
MQTT IoT Protocol complete Tutorial – How it Works with a demo, 1Sheeld | All Arduino shields on your Smartphone, 04-Jul-2018.
Niruntasukrat A, Issariyapat C, Pongpaibool P, Meesublak K, Aiumsupucgul P, Panya A. Authorization mechanism for MQTT-based Internet of Things. In: 2016 IEEE International Conference on Communications Workshops (ICC), Kuala Lumpur, Malaysia; 2016, pp. 290–295.
MQTT Version 5. [Online]. Available: https://docs.oasis-open.org/mqtt/mqtt/ v5.0/mqtt-v5.0.html. [Accessed: 26-Aug-2019].
Mahmood K, Chaudhry SA, Naqvi H, Kumari S, Li X, Sangaiah AK. An elliptic curve cryptography based lightweight authentication scheme for smart grid communication. Future Gener Comput Syst 2018;81:557–65.
Ryu J, Lee H, Kim H, Won D. Secure and efficient three-factor protocol for wireless sensor networks. Sensors 2018;18(12):4481.
Blanchet B, Smyth B, Cheval V, Sylvestre M. ProVerif 2.00: Automatic Cryptographic Protocol Verifier, User Manual and Tutorial.



Usha S, Kuppuswami S, Karthik M. A new enhanced authentication mechanism using session key agreement protocol. Cybern Inf Technol 2018;18(4): 61–74.
Bhawiyuga A, Data M, Warda A. Architectural design of token based authentication of MQTT protocol in constrained IoT device. In: 2017 11th International Conference on Telecommunication Systems Services and Applications (TSSA), Lombok, 2017, pp. 1–4.
JSON Web Token (JWT). [Online]. Available: https://tools.ietf.org/html/ rfc7519. [Accessed: 26-Aug-2019].
The OAuth 1.0 Protocol. [Online]. Available: https://tools.ietf.org/html/ rfc5849.
Hardt D., The OAuth 2.0 Authorization Framework, RFC Editor, RFC6749, Oct. 2012.
Rahman A, Roy S, Kaiser MS, Islam MdS. A Lightweight Multi-tier S-MQTT Framework to Secure Communication between low-end IoT Nodes. In: 2018
5th International Conference on Networking, Systems and Security (NSysS), Dhaka, Bangladesh; 2018. p. 1–6.
Bali RS, Jaafar F, Zavarasky P. Lightweight authentication for MQTT to improve the security of IoT communication. In: Proceedings of the 3rd International Conference on Cryptography, Security and Privacy – ICCSP ’19, Kuala Lumpur, Malaysia; 2019. p. 6–12.
Deterministic Usage of the Digital Signature Algorithm (DSA) and Elliptic Curve Digital Signature Algorithm (ECDSA). [Online]. Available: https://tools. ietf.org/html/rfc6979. [Accessed: 27-Aug-2019].
Use of the Elliptic Curve Diffie-Hellman Key Agreement Algorithm with X25519 and X448 in the Cryptographic Message Syntax (CMS). [Online]. Available: https://tools.ietf.org/html/rfc8418. [Accessed: 27-Aug-2019].
Use of the Advanced Encryption Standard (AES) Encryption Algorithm in Cryptographic Message Syntax (CMS). [Online]. Available: https://tools.ietf. org/html/rfc3565. [Accessed: 27-Aug-2019].
