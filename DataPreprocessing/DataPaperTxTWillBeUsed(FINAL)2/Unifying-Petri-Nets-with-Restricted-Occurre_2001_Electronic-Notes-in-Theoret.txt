Electronic Notes in Theoretical Computer Science 44 No. 4 (2001)
URL: http://www.elsevier.nl/locate/entcs/volume44.html 25 pages


Unifying Petri Nets with Restricted Occurrence Rule Using Partial Algebra

J¨org Desel, Gabriel Juha´s and Robert Lorenz 2
Lehrstuhl fu¨r Angewandte Informatik
Katholische Universita¨t Eichst¨att, 85071 Eichst¨att, Germany 1


Abstract
The aim of this paper is to present a unifying concept for Petri nets with restricted occurrence rule, to obtain non-sequential semantics in a systematic way. It is shown that partial algebra is a suitable basis for process construction. Restrictions of the occurrence rule are translated into restrictions of concurrent composition of pro- cesses. We illustrate this claim on several well-known examples, including context and capacity restrictions. For elementary nets with context we show the one-to- one correspondence between processes constructed using partial algebra and partial order based processes.


Introduction
Petri nets are applied in an increasing number of areas. As a consequence, numerous different variants of Petri nets have been developed, many of them based on the same behavioral principles but with slightly different occurrence rules. Examples include Petri nets extended by capacities, inhibitor arcs, read arcs or asymmetric synchronization of transitions.
The restrictions of the occurrence rule can be expressed by restricting the set of legal markings in the case of nets with capacities or by means of different kinds of arcs in the case of nets with inhibitor arcs, read arcs or asymmetric synchronization. Whereas the definition of sequential semantics for these variants can be obtained in a straightforward way from the occurrence rule, partial order semantics providing an explicit representation of concurrent transition occurrences is usually constructed in an ad-hoc way. The aim of this paper is to present a unifying concept for generalized Petri nets, i.e. for Petri nets with restricted occurrence rule, to obtain non-sequential semantics in a systematic way.

1 E-mail: {joerg.desel,gabriel.juhas,robert.lorenz}@ku-eichstaett.de
2 supported by DFG: Project ”SPECIMEN”
◯c 2001 Published by Elsevier Science B. V. Open access under CC BY-NC-ND license.



m	=	x	+	pre(t)


t	=


m’	=
x	||


x	+
t


post(t)


Fig. 1. Occurrence of a transition t from a marking m to a marking m' and its interpretation as a concurrent rewriting of the transition t and the marking x.
In [24,25] and in [18] the authors realized that non-sequential semantics of elementary nets and place/transitions nets can be expressed in terms of concurrent rewriting using partial monoids and total monoids, respectively. In such an algebraic approach, a transition t is understood to be an elementary rewrite term allowing to replace the marking pre (t) by the marking post (t). Moreover, any marking m is understood to be an elementary term, rewriting m by m itself. A single occurrence of a transition t leading from a marking

m to a marking m' (in symbols m −→t
m') can be understood as a concurrent

composition of the elementary term t and the elementary term corresponding
to the marking x, satisfying m = x + pre (t) and m' = x + post (t), where + denotes a suitable operation on markings (see Figure 1). For example, in [18]
+ is the addition of multi-sets of places, and hence this approach describes place/transition nets. The non-sequential behaviour of a net is given by a set of process terms, constructed from elementary terms using operators for sequential and for concurrent composition, denoted by ; and , respectively.
Now, assume that for some class of Petri nets a suitable operation + over the set of markings M is given such that for each transition occur-

rence m
−→t
m' there exists a marking x satisfying x + pre (t) = m and

x + post (t) = m'. Then the occurrence of t at m is expressed by the term
x  t. Conversely, t cannot necessarily occur at any marking x+ pre (t) but its enabledness might be restricted. Such restrictions of the occurrence rule will be encoded by a restriction of concurrent composition, i.e. if x + pre (t) does not enable t, then x and t are not allowed to be composed by . To describe a restriction of , we use an abstract set I of information elements, together with a symmetric independence relation dom+ on I. Every marking x as well as every transition t has attached an information element. A marking x and a transition t can be composed concurrently if and only if their respective information elements are independent. For independent information elements
we define an operation +, called concurrent composition, with the intended meaning that the information of the composed term is the concurrent compo-
sition of the information elements of its components. Because the operation of concurrent composition between elementary terms and information elements is defined only partially, i.e. partial algebra is employed, such nets are called




p1	p2

p3	p4


{p1,p5}	{p4}
	

a
{p1,p3,p5}
d
{p2,p4}


	
{p3}	{p2}
	

c
{p1,p3}

{p1}
b
{p2,p4,p5}

{p4,p5}



Fig. 2. An elementary net with places p1, p2, p3, p4, p5 and the elementary terms corresponding to transitions.  For example, transition a rewrites its pre-set
pre(a) = {p1, p5} by its post-set post(a) = {p3}. It has the attached information element {p1, p3, p5}, given by the union of its pre- and post-set.
Petri nets over partial algebra [14,15].
For example, in the case of elementary nets, where markings are sets of places, we attach to a transition t as information element the union of pre(t) and post(t), while the information element for a marking m is the marking m itself. Two information elements are independent if they are disjoint. The concurrent composition of independent information elements is their union. For an illustrating example see Figure 2.
Given a restriction of the occurrence rule, encoded by means of a partial algebra of information, we will build non-sequential semantics of nets over partial algebra. This semantics is given by process terms generated from the elementary terms (transitions and markings) using the partial operations sequential composition ; and concurrent composition  . Each process term has associated an initial marking, final marking and a set of information el- ements. For elementary process terms, the set of information elements is the one-element set containing the attached information element. A process term α transforms its initial marking m to its final marking m' (in symbols

α : m → m'). Process terms α : m1 → m2 and β : m3 → m4 can be sequen- tially composed, provided m2 = m3, resulting in α; β : m1 → m4. This notion represents the occurrence of β after the occurrence of α. The set of infor- mation elements of the sequentially composed process term is the union of the sets of information elements of the composed process terms. The process terms can also be composed concurrently to α  β : m1 + m3 → m2 + m4, pro- vided each element of the set of information elements of α is independent from each element of the set of information elements of β. The set of information elements of α  β contains the concurrent composition of each element of the set of information elements of α with each element of the set of information elements of β. Two sets of information elements A and B do not have to be distinguished if for each set of information elements C either both A and B are independent from C (that means each element of A, resp. B, is indepen- dent from each element of C) or both A and B are not independent from C. Therefore we can use any equivalence ∼= ∈ 2I × 2I that is a congruence with respect to the operations concurrent composition and union (for sequential composition) and satisfies: If A ∼= B and A is independent from C, then B is independent from C. That means, we can use any equivalence ∼= ∈ 2I × 2I which is a closed congruence w.r.t. the operations concurrent composition and union. The equivalence classes of the greatest (and hence coarsest) closed con- gruence represent the minimal information assigned to process terms necessary for concurrent composition. This congruence is unique ([4]). Thus, instead of sets of information elements we associate to process terms equivalence classes
w.r.t. the greatest closed congruence.
There is a strong connection between the process term semantics described above and the usual partial order based semantics. Consider, for example, the process given in Figure 3 (p5 means that p5 is not marked). It determines that a occurs before b and c, and that d occurs before b. This process can be decomposed into the sequence a c occurring at the marking {p1, p4, p5} (described by the process term (a; c)  {p4}), followed by the sequence d b occurring at the marking {p1, p4, p5} (described by the process term (d; b) 
{p1}). The resulting term is ((a; c)  {p4}); ((d; b)  {p1}) (see Figure 4). Another interpretation of this process is the following: Transitions a and d occur concurrently at the marking {p1, p4, p5} replacing this marking by marking {p2, p3, p5}. At this marking, transitions c and b occur concurrently. The corresponding term is (a  d); (c  b)(see Figure 5). Each process term α defines a partially ordered set of events representing transition occurrences in an obvious way: an event e2 depends on another event e1 if the process term α contains a subterm α1; α2 such that e1 occurs in α1 and e2 occurs in α2. For example, the process term α = ((a; c)  {p4}); ((d; b)  {p1}) generates the partial order given in Figure 6, while the process term β = (a  d); (c  b) generates the partial order given in Figure 7.
Unfortunately not all reasonable partial orders can be generated in this way. For example, consider the partial order shown in Figure 3, which is de-





p1	p2

p3	p4



p1	p3	p1



a	c



d	b

Fig. 3.  The elementary net from Figure 2 with the initial marking {p1, p4, p5}
together with a process and the corresponding partial order of the occurring tran-
sitions. The place p5 denotes the co-place of the place p5 generated to avoid con- tact-situations.

termined by the process from Figure 3. It is easy to show by induction on the structure of process terms that this partial order cannot be generated by any process term. However, this partial order can be constructed from the partial orders generated by the process terms α and β, i.e. by two possible decompo- sitions of the process from Figure 3, removing the contradicting connections between c and d. We will define an equivalence of process terms identifying exactly those process terms representing the same process. Then each process is represented by an equivalence class of process terms.
The paper is organized as follows. Section 2 gives mathematical prelim- inaries. After introducing formally our concept in Section 3, we provide a







{p3}


a
{p1,p3,p5}


c
{p1,p3}
{p1,p5}



a;c
{p1,p3,p5}	||
{p4}



{p4}
{p4}
{p1,p4,p5}



(a;c) || {p4}
=	{p1,p3,p4,p5}









d
{p2,p4}
{p1}


{p4}
{p4}


{p1}

{p1,p4}

((a;c) || {p4}) ; ((d;b) || {p1})
{p1, p2,p3,p4,p5}

d;b
{p2,p4,p5}	||
{p1}
{p1}
(d;b) || {p1}
=	{p1,p2,p4,p5}

b
{p2,p4,p5}



{p4,p5}
{p1}
{p1,p4,p5}



Fig. 4. Derivation of a process term of the elementary net from Figure 2. Instead of the whole set of information elements, each process term has attached only the set of all involved places, i.e. the set of places characterizing the greatest closed congruence class of the related set of information elements. For example, the process term a; c
has attached information {p1, p3, p5} instead of the set of two information elements
{{p1, p3, p5}, {p1, p3}}.
couple of examples in Section 4 and Section 5.

Mathematical preliminaries
We use N to denote the nonnegative integers and N+ to denote the positive integers. Given two arbitrary sets A and B, the symbol BA denotes the set of all functions from A to B. Given a function f from A to B and a subset C of A we write f |C to denote the restriction of f to the set C. The symbol 2A denotes the power set of a set A. Given a set A, the symbol |A| denotes the cardinality of A and the symbol idA the identity on the set A. We write id to denote idA whenever A is clear from the context. The set of all multi-sets over a set A is denoted by NA. Given a binary relation R ⊆ A × A over a set A, the symbol R+ denotes the transitive closure of R.
A partial groupoid is an ordered tuple I = (I, dom+, +) where I is the



{p1,p5}

a
{p1,p3,p5}	||
{p4}

d
{p2,p4}
{p1,p4,p5}

a || d
=	{p1,p2,p3,p4,p5}


	

{p3}



{p3}

c
{p1,p3}

{p1}
{p2}



{p2}

b
||	{p2,p4,p5}

{p4,p5}


{p2,p3}



c || b
=	{p1,p2,p3,p4,p5}

{p1,p4,p5}


(a || d) ; (c || b)
{p1,p2,p3,p4,p5}



Fig. 5. Derivation of another process term of the elementary net from Figure 2.


a  c  d  b

Fig. 6. Partial order generated by the process term α = ((a; c)  {p4}); ((d; b)  {p1})


a	c



d	b


Fig. 7. Partial order generated by the process term β = (a  d); (c  b)

carrier of I, dom+ ⊆ I × I is the domain of +, and + : dom+ → I is the groupoids  (I, dom+, +)  which  fulfil  the  following  conditions: partial operation of I. In the rest of the paper we will consider only partial
If a + b is defined then b + a is defined and a + b = b + a.
If (a + b) + c is defined then a +(b + c) is defined and (a + b) + c = a +(b + c).
ementary terms and the operation + to express concurrent composition of We use the set I as a set of information elements associated to the el-

information elements. Not each pair of process terms can be composed, hence
+ is a partial operation. The relation dom+ contains the pairs of elements which are independent and can be composed.
information elements. So, the partial groupoid (I, dom+, +) is extended to As explained in the introduction, generated terms have associated sets of the partial groupoid (2I, dom{+}, {+}), where
dom{+} = {(X, Y ) ∈ 2I × 2I | X × Y ⊆ dom+}.
X{+}Y = {x + y | x ∈ X ∧ y ∈ Y }.
We will use more than one partial operation on the same carrier. A partial
algebra is a set (called carrier) together with a couple of partial operations on this set (with possibly different arity). Given a partial algebra with carrier X, an equivalence ∼ on X satisfying the following conditions is a congruence: If op is an n-ary partial operation, a1 ∼ b1,..., an ∼ bn, (a1,..., an) ∈ domop and (b1,..., bn) ∈ domop, then op(a1,..., an) ∼ op(b1,..., bn). If moreover
a1 ∼ b1,..., an ∼ bn and (a1,..., an) ∈ domop imply (b1,..., bn) ∈ domop for each n-ary partial operation then the congruence ∼ is said to be closed. Thus, a congruence is an equivalence preserving all operations of a partial algebra, while a closed congruence moreover preserves the domains of the operations. For a given partial algebra there always exists a unique greatest closed con- gruence. The intersection of two congruences is again a congruence. Given a binary relation on X, there always exists a unique least congruence contain- ing this relation. In general, the same does not hold for closed congruences. Given a partial algebra X with carrier X and a congruence ∼ on X , we write [x]∼ = {y ∈ X | x ∼ y} and X/∼ =  x∈X [x]∼. A closed congruence ∼
defines the partial algebra X /∼ with carrier X/∼, and with n-ary partial op-
eration op/∼ defined for each n-ary partial operation op : domop → X of X
as follows: domop/∼ = {([a1]∼,..., [an]∼) | (a1,..., an) ∈ domop} and, for each
(a1,..., an) ∈ domop, op/∼([a1]∼,..., [an]∼) = [op(a1,..., an)]∼. The partial algebra X /∼ is called factor algebra of X with respect to the congruence ∼.
Let X be a partial algebra with k operations opX ,i ∈ {1,..., k}, and let
Y be a partial algebra with k operations opY ,i ∈ {1,..., k} such that the

arity nX
of opX
equals the arity nY
of opY
for every i ∈ {1,..., k}. Denote

by X the carrier of X and by Y the carrier of Y. Then a function f : X →
Y is called homomorphism if for every i ∈ {1,..., k} and x1,... x X ∈ X
i
X	Y
we have: if opi (x1,..., xnX ) is defined then also opi (f (x1),...,f (xnX )) is
i	i
X	Y
defined and f (opi (x1,..., xnX )) = opi (f (x1),...,f (xnX )). A homomorphism
i	i

f is called closed if for every i ∈ {1,..., k} and x1,... x X
i
∈ X we have: if

Y	X
opi (f (x1),...,f (xnX )) is defined then opi (x1,..., xnX ) is also defined. If f is
i	i
a bijection, then it is called an isomorphism, and the partial algebras X and
Y are called isomorphic.
There is a strong connection between the concepts of homomorphism and congruence in partial algebras: if f is a surjective (closed) homomorphism from X to Y, then the relation ∼⊆ X × X defined by a ∼ b ⇐⇒ f (a)= f (b)

is a (closed) congruence and Y is isomorphic with X /∼. Conversely, given a (closed) congruence ∼ of X , the mapping h : X → X/∼ given by h(x)= [x]∼ is a surjective (closed) homomorphism. This homomorphism is called the natural homomorphism w.r.t. ∼. For more details on partial algebras see e.g. [4].

The General Approach

M = (M, +) be a commutative monoid and let I = (I, dom+, +) be a par- Definition 3.1 [Algebraic (M, I)-net and its process term semantics] Let tial groupoid satisfying the properties defined in the previous section. Let
∼= ∈ 2I × 2I be the greatest closed congruence of the partial algebra X = (2I, dom{+}, {+}, ∪). An algebraic (M, I)-net is a tuple A = (T, pre : T → M, post : T → M ) together with a mapping inf : M ∪ T → I satisfying
∀x, y ∈ M : ( inf (x), inf (y)) ∈ dom+ =⇒ inf (x+y)= inf (x)+ inf (y).
∀t ∈ T : { inf (t)} ∼= { inf (t), inf ( pre (t)), inf ( post (t))}.
Out of an algebraic net A we can build process terms that represent all abstract concurrent computations of A. Every process term α has associated an initial marking pre (α) ∈ M , a final marking post (α) ∈ M , and an information for concurrent composition Inf (α) ∈ 2I/∼=. In the following, for a process term α we write α : a −→ b to denote that a ∈ M is the initial marking of α and b ∈ M is the final marking of α. The elementary process terms are
ida : a −→ a
with associated information Inf (ida)= [{ inf (a)}]∼= for each a ∈ M , and
t : pre (t) −→ post (t)
with associated information Inf (t)= [{ inf (t)}]∼= for each t ∈ T . These can be composed by means of concurrent and sequential compositions, two partial operations denoted by  and ;, respectively.
If α : a1 −→ a2 and β : b1 −→ b2 are process terms satisfying
( Inf (α), Inf (β)) ∈ dom{+}/∼=,
their concurrent composition yields the process term
α  β : a1 + b1 −→ a2 + b2
with associated information Inf (α  β)= Inf (α) {+}/∼= Inf (β).
If α : a1 −→ a2 and β : b1 −→ b2 are process terms satisfying a2 = b1,
their sequential composition yields the process term
α; β : a1 −→ b2

with associated information Inf (α; β)= Inf (α) ∪/∼= Inf (β).
The partial algebra of all process terms with the partial operations concur- rent composition and sequential composition as defined above will be denoted by P(A).
We consider the used factor algebra X /∼= up to isomorphism. Hence one can freely use any partial algebra isomorphic to X /∼=.
Requirement (a) in the previous definition means that the concurrent com- position of information elements attached to markings respects the concurrent composition of the markings. Requirement (b) means that the information about the initial and the final marking of a transition is already included in the information associated to the transition.
Definition 3.2 [Congruence of process terms] We define a congruence rela- tion ∼ on the set of process terms of an algebraic (M, I)-net as the least congruence on process terms with respect to the partial operations  and ; given by the following axioms for process terms α1, α2, α3, α4 and markings x, y ∈ M :
(α1  α2) ∼ (α2  α1), whenever  is defined for α1 and α2 .
((α1  α2)  α3) ∼ (α1  (α2  α3)), whenever these terms are defined.
((α1; α2); α3) ∼ (α1; (α2; α3)), whenever these terms are defined.
α = ((α1  α2); (α3  α4)) ∼ β = ((α1; α3)  (α2; α4)), whenever these terms are defined and Inf (α)= Inf (β).
(α; id post (α)) ∼ α ∼ (id pre (α); α).
id(x+y) ∼ (idx  idy), whenever these terms are defined.
α  idx ∼ α whenever the left term is defined, pre (α)+ x = pre (α) and
post (α)+ x = post (α).
In the sequel we will write x to denote the elementary term idx. By construction, α ∼ β implies pre (α) = pre (β), post (α) = post (β) and Inf (α)= Inf (β).
Axiom (1) represents commutativity of concurrent composition, axioms
(2) and (3) associativity of concurrent and sequential composition. Axiom
(4) states distributivity whenever both terms have the same information. It is also used in related approaches such as [18]. Notice that the partial order induced by β is a subset of the partial order induced by α. Therefore, the partial order induced by α can be understood as a partial sequentialization of the partial order induced by β, i.e. it is a partial sequentialization of the run represented by the corresponding equivalence class of process terms. Axiom
(5) states that elementary terms corresponding to elements of M are partial neutral elements with respect to sequential composition. Axiom (6) expresses that composition of these neutral elements is congruent to the neutral element constructed from their composition. Finally, axiom (7) states that elements of M which are neutral to the initial and final marking of a term are neutral

to the term itself.
For example, the process term ((a; c)  {p4}); ((d; b)  {p1}) of the el- ementary net from Figure 2 generated in Figure 4 and the process term (a  d); (c  b) of the elementary net from Figure 2 generated in Figure 5 are congruent:

((a; c)  {p4}); ((d; b)  {p1})
(4),(5)
~	((a {p4}); (c	{p4})); ((d	{p1}); (b	{p1}))

(1),(3),(4)
~	(a {p4}); ((c; {p1})	({p4}; d)); (b	{p1})
(1),(5)
~	(a {p4}); (d	c); (b	{p1})
(5)
~ (a {p4}); ((d; {p2})	({p3}; c)); (b	{p1})
(4)
~ (a {p4}); ((d	{p3}); (c	{p2})); (b	{p1})
(1),(3),(4),(5)
~	(a d); (c	b).
Note that given a transition t of a (M, I)-net, the elementary term t represents the single occurrence of the transition t leading from the marking m = pre(t) to the marking m' = post(t), and any term in the form t  x, where x ∈ M , represents the single occurrence of the transition t leading from the marking m = x + pre(t) to the marking m' = x + post(t).
Despite the differences between different classes of Petri nets, there are some common features of almost all net classes, such as the notions of marking (state), transition, and occurrence rule (see our contribution [8]).
Thus, in the following definition we suppose a Petri net with a set of markings, a set of transitions and an occurrence rule characterizing whether a transition is enabled to occur at a given marking and if yes determining the follower marking. We suppose that the considered Petri net has no fixed initial marking.
Definition 3.3 [Corresponding algebraic (M, I)-net] Let N be a Petri net

with a set of markings M , and a set of transitions T . Let m −→t
m' denote

that a transition t is enabled to occur in m and that its occurrence leads to
the follower marking m'.
Let M = (M, +) and I = (I, dom+, +). Then an algebraic (M, I)-net
A = (M, T, pre : T → M, post : T → M )
together with a mapping inf : M ∪T → I is called the corresponding algebraic (M, I)-net to the net N iff:
A has the same domain for markings as N , i.e. M = MN
transitions of A are those transitions of N which are enabled to occur in

some marking, i.e. T = {t ∈ T	| ∃m, m' ∈ M : m −→t
m'}, and

the occurrence rule is preserved, i.e. ∀m, m' ∈ M, t ∈ T : m −→t
m' ⇐⇒

((m = pre(t) ∧ m' = post(t)) ∨ (∃x ∈ M : ( inf (x), inf (t)) ∈ dom+ ∧ x +

pre(t)= m ∧ x + post(t)= m')).
In the following sections we construct the corresponding algebraic (M, I)- nets for several classes of Petri nets using the following scenario:
We give a classical definition of the considered net class including the oc- currence rule.
We identify M and construct I such that the requirements from Section 2 are satisfied.
We construct functions pre, post, inf in such a way that condition (a) of Definition 3.1 is valid and that dom+, the independence relation of I, en- codes the restriction of the occurrence rule.
We construct the greatest closed congruence ∼= of the partial algebra (2I, dom{+}, {+}, ∪). Then, we construct a partial algebra isomorphic to (2I, dom{+}, {+}, ∪)/∼=.
We show that property (b) of Definition 3.1 is satisfied.

Elementary Nets with Context
In this section we construct algebraic (M, I)-nets for elementary nets with context, defined according to [19].
Definition 4.1 [Elementary net with context] An elementary net with context is a five-tuple N = (P,T, F, C+, C−), where P (places) and T (transitions) are disjoint finite sets, F ⊆ (P × T ) ∪ (T × P ) is a relation (flow relation), and C+, C− ⊆ P × T are relations (positive and negative context relations) satisfying (F ∪ F −1) ∩ (C+ ∪ C−) = C+ ∩ C− = ∅. For a transition t, •t =
{p ∈ P | (p, t) ∈ F } is the pre-set of t, t• = {p ∈ P | (t, p) ∈ F } is the
post-set of t, +t = {p ∈ P | (p, t) ∈ C+} is the positive context of t, and
−t = {p ∈ P | (p, t) ∈ C−} is the negative context of t.
Each subset of P is called a marking. A transition t is enabled to occur in a marking m iff ( •t ∪ +t) ⊆ m ∧ (m \ •t) ∩ ( −t ∪ t• )= ∅. Its occurrence leads to the marking m' = (m \ •t) ∪ t• .
The positive context of a transition is the set of places which are tested on presence of a token for the possible occurrence of the transition. The negative context of a transition t is the set of places which are tested on absence of a token for the possible occurrence of the transition.
As usual, places are graphically expressed by circles, transitions by boxes and elements of the flow relation by directed arcs. Elements of the positive context relation are expressed by arcs ending with a blackbullet (so called read arcs). Elements of the negative context relation are expressed by arcs ending with a circle (so called inhibitor arcs). A marking of the net is represented by tokens in places. An elementary net with context is shown in Figure 8.
We have M = (M, +) = (2P , ∪). An information element consists of



p4




Fig. 8.  An elementary net with context.  Observe that •a = {p1}, a• = {p2},
+a = {p5}, −a = ∅, and therefore transition a is enabled to occur if p1 and p5 are marked and p2 is unmarked. Its occurrence removes a token from p1 and adds a token to p2. Furthermore •h = {p7}, h• = p6, +h = ∅, −h = {p2}. Transition h is enabled to occur if p7 is marked and p2 and p5 are unmarked, and its occurrence
removes a token from p7 and adds a token to p6.
three disjoint components: the set of write places (places used by the pre- set or the post-set of involved transitions), the set of positive context places and the set of negative context places. Information elements are independent if each component of the first element is disjoint from each component of the second element, except positive contexts (the second components) and negative contexts (the third components). This reflects that concurrent testing on presence of a token as well as concurrent testing on absence of a token is allowed. Hence we define the set of information elements I = {(w, p, n) ∈ 2P × 2P × 2P | w ∩ p = w ∩ n = p ∩ n = ∅}, together with the independence relation dom+ = {((w, p, n), (w', p', n')) | w ∩ w' = w ∩ (p' ∪ n') = w' ∩
(p ∪ n) = p ∩ n' = p' ∩ n = ∅}, and the operation (w, p, n) + (w', p', n') = (w ∪ w',p ∪ p',n ∪ n'). For I = (I, dom+, +) the requirements from Section 2 are fulfilled. To define a (M, I)-net corresponding to an elementary net with
context N = (P,T, F, C+, C−), we need to define the mappings pre , post : T → M attaching an initial and final marking to every transition t, and the function inf : M ∪ T → I assigning an information element to every marking m and every transition t:
A transition t has the initial marking pre (t)= •t∪ +t and the final marking

post (t)= t• ∪ +t.
A marking m carries the information inf (m)= (∅, m, ∅).
A transition t carries information about write places and extra information about positive and negative context, i.e. inf (t)= ( •t ∪ t• , +t, −t).
For example, transition a from the net in Figure 8 has attached the infor- mation element inf (a)= (w, p, n)= ({p1, p2}, {p5}, ∅), while transition h has attached the information element inf (h) = (w', p', n') = ({p6, p7}, ∅, {p2}). These information elements are not independent, because the write place p2 of a is the negative context place of h, i.e. w ∩(p' ∪n') /= ∅. The only transition with information element independent from the information element of a is transition g. They have the common positive context place p5, but concurrent testing of presence of a token is allowed.
The mapping inf satisfies property (a) of Definition 3.1. The following lemma shows that, taking the mappings pre , post and inf defined above, the partial groupoid I encodes the occurrence rule.
Lemma 4.2 Given an elementary net with context, a transition t is enabled to occur in a marking m and its occurrence leads to the marking m' iff there exists a marking x such that ( inf (x), inf (t)) ∈ dom+, x + pre (t) = m and x + post (t)= m'.
Proof. ⇒: Choosing x = m \( •t ∪ +t) we have that ( inf (x), inf (t)) ∈ dom+ and m = x + pre (t)= x ∪ ( •t ∪ +t). We have to show that x + post (t) equals m', i.e. x ∪ (t• ∪ +t)= ((x ∪ ( •t ∪ +t)) \ •t) ∪ t• . This follows from the fact that by definition of elementary nets with context •t ∩ +t = ∅.
⇐: Taking any x such that x ∩ ( •t ∪ t• ∪ −t) = ∅, we have ( •t ∪ +t) ⊆ x ∪ ( •t ∪ +t) = m and (because +t ∩ −t = +t ∩ t• = ∅) we also have ((x ∪ ( •t ∪ +t)) \ •t) ∩ ( −t ∪ t• )= ∅. Furthermore (because +t ∩ •t = ∅) we have x ∪ +t ∪ t• = ((x ∪ +t ∪ •t) \ •t) ∪ t• . Therefore t is enabled to occur in x ∪ ( •t ∪ +t) = x + pre (t) and its occurrence leads to x ∪ (t• ∪ +t) = x + post (t).	✷
Finally, we have to find the greatest closed congruence ∼= of the partial algebra (2I, dom{+}, {+}, ∪). We define a mapping supp which turns out to be the natural homomorphism of this greatest closed congruence. Define three
mappings s1, s2, s3 : 2I → 2P by


s1(A)= 
(w,p,n)∈A
w,	s2(A)= 
(w,p,n)∈A
p	and	s3(A)=	n.
(w,p,n)∈A

Define s : 2I → 2P by s(A)= s1(A) ∪ (s2(A) ∩ s3(A)). Finally, define supp : 2I → I by supp (A)= (s(A), s2(A) \ s(A), s3(A) \ s(A)).
Lemma 4.3 Let ◦ be the binary operation on I deﬁned by
(w, p, n) ◦ (w', p', n')= supp ({(w, p, n), (w', p', n')}).


Then the mapping supp : (2I, dom{+}, {+}, ∪) → (I, dom+, +, ◦) is a surjective closed homomorphism.
Proof. First we show the closedness of supp , i.e.
(A, A') ∈ dom{+} ⇐⇒ ( supp (A), supp (A')) ∈ dom+.
We write shortly s1, s2, s3 and s to denote s1(A), s2(A), s3(A) and s(A)
resp. s' , s' , s' and s' to denote s1(A'), s2(A'), s3(A') and s(A').
1	2	3
⇒: Suppose that (A, A') ∈ dom{+} but ( supp (A), supp (A')) ∈/ dom+.

Case 1: s ∩ s' /= ∅, i.e. (s1 ∪ (s2 ∩ s3)) ∩ (s'
∪ (s'
∩ s' )) /= ∅.

s1 ∩ s' /= ∅ contradicts ∀(w, p, n) ∈ A, (w', p', n') ∈ A' : w ∩ w' = ∅,
s1 ∩(s' ∩ s' ) /= ∅ contradicts ∀(w, p, n) ∈ A, (w', p', n') ∈ A' : w ∩(p ∪ n)= ∅,
2	3
(s2∩s3)∩(s' ∩s' ) /= ∅ contradicts ∀(w, p, n) ∈ A, (w', p', n') ∈ A' : p∩n' = ∅.
2	3

Case 2: (s2 \ s) ∩ s' /= ∅, i.e. (s2 \ (s1 ∪ (s2 ∩ s3))) ∩ (s'
∪ (s'
∩ s' )) /= ∅.

(s2 \ (s1 ∪ (s2 ∩ s3))) ∩ s' /= ∅ contradicts ∀(w, p, n) ∈ A, (w', p', n') ∈ A' :
p ∩ w' = ∅.
(s2 \ (s1 ∪ (s2 ∩ s3))) ∩ (s' ∩ s' ) /= ∅ contradicts ∀(w, p, n) ∈ A, (w', p', n') ∈
2	3
A' : p ∩ n' = ∅.
All remaining cases are similar.
⇐: Suppose that (A, A') ∈/ dom{+} but ( supp (A), supp (A')) ∈ dom+. Case 1: ∃(w, p, n) ∈ A, (w', p', n') ∈ A' : w ∩ w' /= ∅ contradicts s ∩ s' = ∅.
Case 2: ∃(w, p, n) ∈ A, (w', p', n') ∈ A' : p ∩ w' /= ∅:


−(p ∩ w') ∩ ((
(x,y,z)∈A)
−(p ∩ w') ∩ ((
(x,y,z)∈A)
x) ∪ (
(x,y,z)∈A
x) ∪ (
(x,y,z)∈A
z)) /= ∅ contradicts s ∩ s' = ∅,

z)) = ∅ contradicts (s2 \ s) ∩ s' = ∅.

All remaining cases are similar.
Now we show that supp (A{+}A')= supp (A) + supp (A'), whenever defined.
Let supp (A{+}A') = (w, p, n), where w = s1 ∪ s' ∪ ((s2 ∪ s' ) ∩ (s3 ∪ s' )),
1	2	3
p = (s2 ∪ s' ) \ w and n = (s3 ∪ s' ) \ w. Since ( supp (A), supp (A')) ∈ dom+,
2	3
we have
(s2 \ s) ∩ (s' \ s')= s ∩ s' = (s' \ s') ∩ (s3 \ s)= ∅,	(1)
(s2 \ s) ∩ s' = s ∩ s' = (s' \ s') ∩ s = ∅.	(2)
Equations (1) and (2) imply (s2 ∩ s' ) = (s' ∩ s3) = ∅. This gives w = s1 ∪
3	2
(s2 ∩ s3) ∪ s' ∪ (s' ∩ s' )= s ∪ s'. Together with equation (2) this gives s2 ∩ s' =
1	2	3

' ∩ s = ∅. Then p = (s2 \ s) ∪ (s'
Finally, we have to show that
\ s'). Similarly, n = (s3 \ s) ∪ (s'
\ s').

supp (A ∪ A')= supp (A) ◦ supp (A')= supp ({ supp (A), supp (A')}).



We have s = s1 ∪ (s2 ∩ s3) and s' = s'
∪ (s'
∩ s' ), and therefore

s1 ∪ s' ⊆ s ∪ s' ⊆ s1 ∪ s' ∪ ((s2 ∪ s' ) ∩ (s3 ∪ s' )) = s(A ∪ A').
1	1	2	3
Since s({ supp (A), supp (A')})= s∪s'∪(((s2\s)∪(s' \s'))∩((s3\s)∪(s' \s'))),
2	3
we have s(A ∪ A')= s({ supp (A), supp (A')}). Similarly
s2(A ∪ A') \ s(A ∪ A')= s2({ supp (A), supp (A')}) \ s({ supp (A), supp (A')}) and
s3(A ∪ A') \ s(A ∪ A')= s3({ supp (A), supp (A')}) \ s({ supp (A), supp (A')}).
To show surjectivity, let (w, p, n) ∈ I. Then supp ({(w, p, n)})= (w, p, n). ✷
Lemma 4.4 The closed congruence ∼= ⊆ 2I × 2I deﬁned by A ∼= B ⇐⇒
supp (A) = supp (B) is the greatest closed congruence on the partial algebra
X = (2I, dom{+}, {+}, ∪).
Proof. Assume there is a closed congruence ≈ on X with ∼= Ç ≈. Let A, A' ∈
2I with A ≈ A' but A /∼= A'. This means supp (A) /= supp (A'). We will define a set C ∈ 2I with (A, C) ∈ dom{+} and (A', C) /∈ dom{+} or vice versa, what contradicts the closedness of ≈.
Let supp (A) = (w, p, n) and supp (A') = (w ', p ', n '). Then w /= w ' or
p /= p ' or n /= n '.
Assume first that w ' \ w /= ∅. Set C = {(∅, w ' \ (w ∪ n), n)}. Clearly, (A, C) ∈ dom{+}. If w ' \w ⊆ n then w ' ∩ n /= ∅ and therefore (A', C) ∈/ dom{+}. If w ' \ w /⊆ n then w ' ∩ (w ' \ (w ∪ n)) /= ∅ and therefore (A', C) ∈/ dom{+}.
Now assume w = w ' and p ' \ p /= ∅. Set C = {(∅, ∅, p ' \ p)}. Assume finally w = w ' and n ' \ n /= ∅. Set C = {(∅, n ' \ n, ∅)}. In both previous cases (A, C) ∈ dom{+} but (A', C) ∈/ dom{+}.	✷
The partial algebra (2I, dom{+}, {+}, ∪)/∼= is isomorphic to the partial al- gebra (I, dom+, +, ◦). For elementary nets with context we only have to use one element of the set I as the information of a process term. This element
consists of three sets of places - the set of write places, the set of positive con- text places which are not write places, and the set of negative context places which are not write places.
For example, the process term α = a  g : {p1, p5, p6} → {p2, p5, p7} of the net in Figure 8 has the information Inf (α) = ({p1, p2, p6, p7}, {p5}, ∅) and the process terms β = f ; e : {p5}→ {p5} has the information Inf (β)= ({p4, p5}, ∅, ∅). Consider further the process term γ = (b  {p7}); (c  h) :
{p2, p7}→ {p1, p6}. It has the information Inf (γ)= ({p1, p2, p3, p6, p7}, ∅, ∅). Observe, that the place p2, which is a write place of b and the negative context place of h appears as a write place of γ. The process term α can be concur- rently composed neither with β nor with γ, while β and γ can be composed

concurrently.
Property (b) of the Definition 3.1 is valid, and therefore we can give the theorem:
Theorem 4.5 Given an elementary net with context N = (P,T, F, C+, C−) together with M, I, pre, post, inf deﬁned in this section, the corresponding (M, I)-net is the quadruple AN = (2P ,T, pre, post) together with the mapping inf .
Moreover, for process semantics of elementary nets with context defined in [19] the following result is valid.
Theorem 4.6 Given an elementary net with context N, there is a one-to-one correspondence between its partial-order based process semantics introduced in
[19] and the process term semantics modulo the axioms from Deﬁnition 3.2 of the corresponding (M, I)-net.
For a proof see the extended version of this paper [7].

Place/Transition Nets
In this section we give algebraic definitions of place/transition nets with in- hibitor arcs (negative context) and place/transition nets with capacities.
Here we provide semantics corresponding to collective token philosophy [2]. In this case an equivalence class of process terms corresponds to an equivalence class of partial orders, according to collective token semantics of place/transition nets without capacity restriction (see [1] and [5]). In the case of individual token philosophy one can use more sophisticated algebras, such as concatenated processes [23].
Clearly, one can combine restrictions given by inhibitor arcs and capacities and extend them further, or combine them with other approaches such as positive context to get a more complicated enabling rule. In such cases one could use more complicated algebras, see e.g. [11,3].
Definition 5.1 [Place/transition net] A place/transition Petri net (shortly a p/t net) is a quadruple N = (P,T, F,W ), where P, T and F are defined as for elementary nets, and W : F → N+ is the weight function. Given a transition t, define •t, t• ∈ NP as follows:
t(p)=	W ((p, t))	if (p, t) ∈ F,
0	otherwise,
t• (p)=	W ((t, p))	if (t, p) ∈ F,
0	otherwise.


Place/Transition Nets with Inhibitor Arcs
Definition 5.2 [Place/transition net with inhibitor arcs] A p/t net with in- hibitor arcs is a five-tuple N = (P,T, F, W, C−), where (P,T, F,W ) is a p/t net, and C− ⊆ P × T is a negative context relation (set of inhibitor arcs) satis- fying (F ∪ F −1) ∩ C− = ∅. As usual, for a transition t, −t = {p | (p, t) ∈ C−} is the negative context of t. A marking of N is a multi-set m ∈ NP . A transition t
is enabled to occur at m iff ∀p ∈ P : m(p) ≥ •t(p) ∧ ((p, t) ∈ C− ⇒ m(p)= 0). Its occurrence leads to the marking m' = m − •t + t• .
For p/t nets with inhibitor arcs the cardinality of the set of information elements I is smaller than the cardinality of the marking set of the net:
M = (M, +) = (NP , +), where + is multi-set addition. For concurrent composition it is obviously enough to check that one process does not use negative context places of the other process as write places. Therefore, the necessary information for concurrent composition consists of the set of those places which appear in a marking of the process term and the set of negative context places. For a marking m we write ms = {p ∈ P | m(p) /= 0}. It follows
I = (I, dom+, +) with I = 2P × 2P , dom+ = {((w, n), (w', n')) | w ∩ n' =
w' ∩ n = ∅} and ∀((w, n)(w', n')) ∈ dom+ : (w, n) + (w', n')= (w ∪ w',n ∪ n').
The partial groupoid I satisfies the requirements given in Section 2.
For a transition t and a marking m define pre (t) = •t, post (t) = t• , inf (m) = (ms, ∅) and inf (t) = (( pre (t))s ∪ ( post (t))s, −t). The function inf preserves property (a) of Definition 3.1. One can easily prove that the independence relation of I encodes the restriction of the occurrence rule by restricting concurrent compositions of a transition and a marking.
Lemma 5.3 Let supp : 2I → I be deﬁned by

supp (A)= 
(w,n)∈A

w,
(w,n)∈A
n .


Then the relation ∼= deﬁned by x ∼= y ⇐⇒ supp (x)= supp (y) is the greatest closed congruence on the partial algebra (2I, dom{+}, {+}, ∪).
Proof. For (w, n), (w', n') ∈ I define (w, n) ◦ (w', n')= (w ∪ w',n ∪ n'). It is a straightforward observation that supp is a surjective closed homomorphism
from (2I, dom{+}, {+}, ∪) to (I, dom+, +, ◦), Hence ∼= is a closed congruence.
To prove that ∼= is the greatest closed congruence it suffices to show that
any congruence ≈ satisfying ∼=Ç≈ is not closed. The proof is similar to the proof of Lemma 4.4. Assume there are A, A' ∈ 2I such that A ≈ A' but A /∼= A'. Then supp (A) /= supp (A').
We construct a set C ∈ 2I such that (A, C) ∈ dom{+} but (A', C) ∈/ dom{+} or vice versa (which implies that ≈ is not closed). If supp (A) = (w, n) and supp (A')= (w ', n ') then w /= w ' or n /= n ' (since supp (A) /= supp (A')).




p1	p2

p3	p4

Fig. 9. An example of a p/t net with inhibitor arcs. A possible process term is (a  b  p1); (c  (p1 + p4 + p5); d  (2p1 + p5).
Let w /= w '. Without loss of generality assume w ' \ w /= ∅. Set C =
{(cw, cn)} with cw = ∅ and cn = w ' \ w. Then cw ∩ n = cn ∩ w = ∅, but
cn ∩ w ' /= ∅, i.e. (A, C) ∈ dom{+}, but (A', C) ∈/ dom{+}.
Now let n /= n '. Without loss of generality we have n ' \ n /= ∅. Set C = {(cw, cn)} with cw = (n' \n) and cn = ∅. Then cw /= ∅, cw ∩n = w ∩cn = ∅ and cw ∩ n ' /= ∅, and we are finished.	✷
The partial algebra (2I, dom{+}, {+}, ∪)/∼= is isomorphic to the partial al- gebra (I, dom+, +, ◦), where ◦ is defined in the previous proof. Hence, for p/t nets with inhibitor arcs we only have to use one element of the set I as the
information of a process term. This element consists of two sets of places - the set of write places, and the set of negative context places.
Since also property (b) of Definition 3.1 is preserved, we can formulate the following theorem.
Theorem 5.4 Let N = (P,T, F, W, C−) be a p/t net with inhibitor arcs and ł, f, pre , post and inf be deﬁned as above. Then AN = (T, pre , post ) together with the mapping inf is the corresponding (ł, f)-net.
Figure 9 shows an example of a p/t net with inhibitor arcs.
Place/Transition Nets with Capacities
There are two different interpretations of consuming and producing tokens for Petri nets with capacities (for more details see e.g. [9,10,15]). According to the order of consuming and producing tokens one can distinguish the following situations:
A transition t first consumes the tokens given by pre (t) and then produces tokens post (t). This interpretation corresponds to classical rewriting and such capacities are said to be weak[9].
A transition t first produces tokens (given by post (t)) and then consumes tokens (given by pre (t)) yielding the marking post (t). Such capacities are

said to be strong [9].
Definition 5.5 [Place/transition net with capacities] A p/t net with capac- ities is a tuple N = (P,T, F, W, K), where (P,T, F,W ) is a p/t net, and K : P → N+ is a partial function with domain PK ⊆ P .
A marking of a net with capacities is a multi-set m ∈ NP such that ∀p ∈ PK :
m(p) ≤ K(p).
A transition t is said to be weakly enabled at a marking m iff ∀p ∈ P :
m(p) ≥ •t(p) and ∀p ∈ PK : K(p) ≥ m(p) − •t(p)+ t• (p). A transition t is said to be strongly enabled at a marking m iff ∀p ∈ P : m(p) ≥ •t(p) and
∀p ∈ PK : K(p) ≥ m(p)+ t• (p). The occurrence of an enabled transition t at
a marking m leads to the marking m' = m − •t + t• .
The concurrent occurrence of transitions and, more general, concurrent composition of processes have to respect capacities.
Thus, as the set of markings we set
ł = ({a ∈ NP | ∀p ∈ PK : a(p) ≤ K(p)}, +˜ ),
where the operation +˜ is defined by a(p)+˜ b(p) = min{a(p)+ b(p), K(p)} for
all p ∈ PK and a(p)+˜ b(p)= a(p)+ b(p) for all p ∈ P \ PK.
The partial groupoid of information f = (I, dom+, +) is defined by
I = ({w ∈ NPK | ∀p ∈ PK : w(p) ≤ K(p)},
dom+ = {(w, w') ∈ I × I | ∀p ∈ PK : w(p)+ w'(p) ≤ K(p)}
+ = +|dom+ .
This partial groupoid satisfies the requirements from Section 2.
Define pre (t) = •t, post (t) = t• for every transition t. Moreover, for weakcapacities define a mapping infw : M ∪ T → I by:
For a marking m, infw (m)= m|PK .
For a transition t and a place p ∈ PK, infw (t)(p)= max( pre (t)(p), post (t)(p)). For strong capacities define a mapping infs : M ∪ T → I by:
For a marking m, infs (m)= m|PK .
For a transition t and a place p ∈ PK, infs (t)(p)= ( pre (t)(p)+ post (t)(p)) 3 .
Again, property (a) of Definition 3.1 is satisfied. The considered independence relation encodes the restriction of the occurrence rule.
In the sequel, we define a mapping supp : 2I → I and prove that supp is
the natural homomorphism of the greatest closed congruence ∼= of the partial algebra (2I, dom{+}, {+}, ∪).

3 In the case of strong capacities we implicitly suppose for each transition t and each place
p ∈ PK that pre (t)(p)+ post (t)(p) ≤ K(p).







Fig. 10. An example of a p/t net with capacity
Lemma 5.6 Given f as above, let supp : 2I → I be deﬁned for all p ∈ PK
by
supp (A)(p)= maxa∈Aa(p).
Then the relation ~= deﬁned by A ~= A' ⇐⇒ supp (A) = supp (A') is the greatest closed congruence on the partial algebra (2I, dom{+}, {+}, ∪).
supp , supp is a surjective closed homomorphism from (2I, dom{+}, {+}, ∪) to Proof. By the properties of maximum and the definition of the mapping (I, dom+, +, ◦), where 6a, a' ∈ I : a ◦ a' = supp ({a, a'}), and therefore ~= is
a closed congruence. To prove that ~= is the greatest closed congruence we
show that any congruence ≈ satisfying ~=Ç≈ is not closed. We construct a set C ∈ 2I such that (A, C) ∈ dom{+} but (A', C) ∈/ dom{+} or vice versa. Assume there are A, A' ∈ 2I such that A ≈ A' but A /~= A'. Then there is a place p ∈ P such that maxa∈Aa(p) /= maxa'∈A' a'(p). Without loss of generality let maxa'∈A' a'(p) > maxa∈Aa(p). It suffices to take, for example, C = {c}, where c is the multiset defined by c(p) = K(p) — maxa∈Aa(p) and c(p') = 0 for all p' ∈ PK such that p' /= p.	✷
The partial algebra (2I, dom{+}, {+}, ∪)/∼= is isomorphic to the partial al- gebra (I, dom+, +, ◦) , where ◦ is defined in the previous proof. Hence, for p/t nets with capacities we only have to use one element of the set I as the
information of a process term. This element is the multi-set containing for each place the maximal number of tokens which appear in this place during the execution of the process term.
The property (b) of the Definition 3.1 is satisfied for both infw and infs . Thus, we have the following theorem for place/transition nets with capacities.
Theorem 5.7 Let N = (P,T, F, W, K) be a p/t net with capacity and ł and f be deﬁned as above. Then AN = (T, pre , post ) together with infw for weak capacities and infs for strong capacities is the corresponding (ł, f)-net.
Notice that in the case that there are no self-loops in the net, as it is in Figure 10, weakand strong capacities coincide. Nets with capacities represent a class of (ł, f)-nets where information can violate distributive law (see

Definition 3.2, (4)). For example, we have the following process terms of the net from Figure 10: α = (b  p1); (p3  a) with inf (α)= p2 and β = (b; p3)  (p1; a) with inf (β)= 2p2. The information of the term α corresponds to the fact that during the execution of α there is at most one token in place p2, while the information of β expresses the fact that during the execution of β place p2 can obtain two tokens. Because terms α and β have different information, they are not equivalent. As a consequence of the difference of information, α can run concurrently with c, but β cannot. If the place p2 had no capacity restriction, then α and β would be equivalent according to the distributive law and α and β would represent the same run.

Conclusion
There are several approaches to unifying Petri nets (see e.g. [22,20,21,16]). They enable to unify different classes of Petri nets which use different un- derlying algebras and different treatment of data-type part, defining them as formal parameters which can be actualized by choosing an appropriate struc- ture. However, in these approaches enabling condition of the occurrence rule is not a parameter, but it is fixed. Both definitions in [20,16] capture elementary nets but they let open more complicated restrictions of enabling condition in occurrence rule, such as inhibitor arcs or even capacities.
In our paper we have focused on unified description of Petri nets with modified occurrence rule. Namely, we have described a unifying approach to non-sequential semantics of Petri nets with modified occurrence rule. We have demonstrated that methods of partial algebra represent a suitable mathemat- ical tool for such an approach. By restricted domains of operations we were able to generate precisely just those processes of the net which are allowed. In comparison with methods based on partial order - where concurrency is defined implicitly if there is no causal connection between transitions, we de- fine explicitly when processes can be composed concurrently. Thus, in our approach causality is defined using two partial operations to generate process terms, namely concurrent and sequential composition.
The idea to unify Petri nets using partial algebra already appeared in our paper [6]. There we have shown, that the information used by Winkowski in [24,25] for elementary nets correspond to the equivalence classes of the greatest closed congruence. However, there is a substantial difference between the present paper and [6]. Namely, in [6] we suggest to define an independence relation between markings of the net and to allow concurrent composition of two process terms if all markings reachable during the execution of the first process term are independent with all markings reachable during the execution of the second. However, in general it is not enough to define independence relations only between markings. Some information, necessary for the decision whether concurrent composition is allowed or not, is attached to transitions and cannot be derived from initial and final markings of transitions. Typical

examples are elementary nets with context and p/t nets with inhibitor arcs.
The presented approach opens many interesting questions. We can also distinguish between synchronous and concurrent occurrences of transitions. In such an extension of our approach, one first needs to generate steps of transitions using a partial operation of synchronous composition and then can use these steps to generate process terms using partial operations of concurrent and sequential composition. In terms of causal relationships, such an extension corresponds to the approach described in [13,17], where two kinds of causalities are defined. The first states (as usual) which transitions cannot occur earlier than others, while the second indicates which transitions cannot occur later than others. In [13,17] this principle is illustrated for a variant of nets with inhibitor arcs, where testing for zero precedes the execution of a transition. Thus, if a transition t tests a place for zero, which is in a post-set of another transition t', then t cannot occur later than t' and therefore they cannot occur concurrently - but they still can occur synchronously. There are also other net extensions employing steps of transitions (distinguishing between synchronous and concurrent composition), such as nets with asymmetric synchronization [12]. We are currently working on the extension of our approach using a partial operation for synchronous composition to cover such cases.
Another area of further research is to investigate whether the presented framework would lead to a unifying and mathematically elegant way of pro- ducing the causal semantics for nets with restricted occurrence rule. Namely, as it was discussed in Introduction, any process term defines naturally a partial order of events labeled by transitions. Thus, an equivalence class of process terms defines a set of partial orders. As we have illustrated in the example from Introduction, one can modify these partial orders comparing each other and removing causalities which are not defined by the net itself. The idea for further research is to generalize this modification procedure in order to obtain the set of partial orders containing only those causalities which are given by the net itself.

References

E. Best and R. Devillers. Sequential and Concurrent Behaviour in Petri Net Theory. Theoretical Computer Science, 55, pp. 87–136, 1987.
R. Bruni, J. Meseguer, U. Montanari and V. Sassone A Comparison of Petri Net Semantics under the Collective Token Philosophy. Proc. of ASIAN 1998, Springer, LNCS 1538, pp. 225–244, 1998.
R. Bruni and V. Sassone Algebraic Models for Contextual Nets. Proc. of ICALP 2000, Springer, LNCS 1853, pp. 175–186, 2000.
P. Burmeister. Lecture Notes on Universal Algebra – Many Sorted Partial Algebras. Technical Report, TU Darmstadt, 1998.


E. Degano, J. Meseguer and U. Montanari. Axiomatizing the Algebra of Net Computations and Processes. Acta Informatica, 33(7), pp. 641–667, 1996.
J. Desel, G. Juh´as and R. Lorenz. Process Semantics of Petri Nets over Partial Algebra. In M. Nielsen and D. Simpson (Eds.) Proc. of 21th International Conference on Application and Theory of Petri Nets, Springer, LNCS 1825, pp. 146–165,2000.
J. Desel, G. Juh´as and R. Lorenz. Petri Nets over Partial Algebra. To appear in H. Ehrig, G. Juha´s, J. Padberg and G. Rozenberg (Eds.) Unifying Petri Net, Advances in Petri Nets, Springer, LNCS, 2001.
J. Desel and G. Juh´as. What is a Petri Net? To appear in H. Ehrig, G. Juha´s,
J. Padberg and G. Rozenberg (Eds.) Unifying Petri Net, Advances in Petri Nets, Springer, LNCS, 2001.
J. Desel and W.Reisig. Place/Transition Petri Nets. In Lectures on Petri nets I: Basic Models, LNCS 1491, pp. 123–174,1998.
R. Devillers. The Semantics of Capacities in P/T Nets. In Advances in Petri Nets 1989, LNCS 424, pp. 128–150,1990.
F. Gadducci and U. Montanari. Axioms for Contextual Net Processes. In Proc of. ICALP’98, Springer, LNCS 1443, pp. 296-308, 1998.
H-M. Hanisch and A. Lu¨der A Signal Extension for Petri nets and its Use in Controller Design. To appear in Fundamenta informaticae, 2000.
R. Janicki and M. Koutny. Semantics of Inhibitor Nets. Information and Computations, 123, pp. 1–16, 1995.
G. Juha´s. Reasoning about algebraic generalisation of Petri nets. In S. Donatelli and J. Klein (Eds. ) Proc. of 20th International Conference on Application and Theory of Petri Nets, Springer, LNCS 1639, pp. 324-343, 1999.
G. Juha´s. Petri nets over partial algebra. In J. Pavelka, G. Tel and M. Bartosek (Eds.) Proc. of 26th Seminar on Current Trends in Theory and Practice of Informatics SOFSEM’99, Springer, LNCS 1725, pp. 408-415, 1999.
E. Kindler and M. Weber. The Dimensions of Petri Nets: The Petri Net Cube.
EATCS Bulletin, No. 66, pp. 155-166, 1998.
H.C.M. Kleijn, M. Koutny. Process Semantics of P/T-Nets with Inhibitor Arcs. In M. Nielsen and D. Simpson (Eds.) Proc. of 21th International Conference on Application and Theory of Petri Nets, Springer, LNCS 1825, pp. 261–281,2000.
J. Meseguer and U. Montanari. Petri nets are monoids. Information and Computation, 88(2):105–155, October 1990.
U. Montanari and F. Rossi. Contextual Nets. Acta Informatica, 32(6), pp. 545–596, 1995.
J. Padberg. Abstract Petri Nets: Uniform Approach and Rule-Based Refinement, Ph.D. Thesis, TU Berlin, Germany, 1996.


J. Padberg. Classification of Petri Nets Using Adjoint Functors Bulletin of EACTS No. 66, 1998.
J. Padberg and H. Ehrig. Parametrized Net Classes: A uniform approach to net classes. To appear in H. Ehrig, G. Juha´s, J. Padberg and G. Rozenberg (Eds.) Unifying Petri Net, Advances in Petri Nets, Springer, LNCS, 2001.
V. Sassone An Axiomatization of the Category of Petri Net Computations.
Mathematical Structures in Computer Science, vol. 8, pp. 117–151, 1998.
J. Winkowski. Behaviours of Concurrent Systems. Theoretical Computer Science, 12, pp. 39–60, 1980.
J. Winkowski. An Algebraic Description of System Behaviours. Theoretical Computer Science, 21, pp. 315–340, 1982.
