Available online at www.sciencedirect.com


Electronic Notes in Theoretical Computer Science 301 (2014) 117–129
www.elsevier.com/locate/entcs

Representations of Algebraic Domains and Algebraic L-domains by Information Systems 1
Mingyuan Wu, Qingguo Li, Xiangnan Zhou2
College of Mathematics and Econometrics Hunan University
Changsha, P.R. China

Abstract
Information systems play an important role in characterizing order structures. In this paper, we introduce the notions of the algebraic information system and algebraic L-information system. They are of the same logic-oriented style as the information system introduced by Scott(1982). But the axioms in this paper are briefer than reported in existing work. We also prove that the two new information systems exactly represent the algebraic domains and algebraic L-domains respectively. Based on the notion of approximable mapping between the algebraic information systems and the algebraic L-information systems, we obtain the result that the corresponding categories of algebraic information systems and algebraic L-information systems are equivalent to the category of algebraic domains and algebraic L-domains respectively.
Keywords: Algebraic domain; Algebraic L-domain; Information system; Category equivalence


Introduction
In 1982, Scott [13] introduced the notion of information system and approximable mapping as a logic-oriented approach to denotational semantics of programming languages. Later on, Larsen and Winskel [11] proved the category of information systems is equivalent to that of Scott domains with continuous functions as mor- phisms. This category is also equivalent to that of algebraic ∩-structures with continuous functions as morphisms. In 1993, Hoofman [8] introduced the informa- tion systems that represent bounded complete continuous domains. By considering transitive and interpolative relations, Vickers [16] built an information systems rep- resentation for continuous posets. Vickers’s approach is more general and can be used to represent all continuous domains, but it is not Scott-style. In 2008, Spreen and Xu [14] first introduced the notion of general continuous information system of

1 This work is supported by the National Natural Science Foundation of China (NO. 11071061, 11101135) and the National Basic Research Program of China(NO. 2011CB311808).
2 Corresponding author: xnzhou81026@163.com

http://dx.doi.org/10.1016/j.entcs.2014.01.010
1571-0661 © 2014 Elsevier B.V. Open access under CC BY-NC-ND license.

Scott style which exactly captures continuous dcpos. They also gave the notion of general algebraic information system which captures algebraic domains by adding other rules on general continuous information system. But there were many rules in their general algebraic information system. In this paper we will introduce a new class of algebraic information system in which there are only four rules.
L-domains were independently introduced by Coquand [2] and Jung [9]. Jung [9,10] showed that L-domains form a maximal cartesian closed full subcategory of the continuous domains. This is the same for algebraic case. Spreen [14] gave a subclass of continuous information systems which can represent L-domains. But the information system has many conditions so it is not easy to judge.  Zhang
[18] presented a logic-oriented approach to algebraic L-domains with Gentzen-style proof systems so it is different from Scott’s original approach. More articles about information systems can be found in [20,21,17,5,6,7].
Based on our new algebraic information system, we introduce algebraic L- information systems. Our method of constructing algebraic L-information systems is skillful and completely different from Spreen’s. Our definition of algebraic L- information systems is brief. The paper is organized as follows: Section 2 recalls some basic notions of domain theory and gives the definition of algebraic informa- tion systems. We show that the states of an algebraic information system form an algebraic domain with respect to set inclusion. Algebraic L-information systems are introduced in Section 3. It is shown that algebraic L-information systems and algebraic L-domains correspond to each other under the relationship between al- gebraic information systems and algebraic domains. In Section 4, we propose the approximable mappings among the algebraic information systems and algebraic L- information systems respectively. It is shown that the corresponding categories of algebraic information systems and algebraic L-information systems are equivalent to the categories of algebraic domains and algebraic L-domains with Scott continuous functions as morphisms respectively.

Domains and information systems
Domain theory is the interdiscipline of theories of lattice, topology, category and computer science. The main purpose of the domain theory is to give models for spaces on which to define computable functions. In high-level denotational seman- tics, the spaces of higher type (e.g. function spaces) and spaces defined recursively (e.g. reflexive domains) are needed. Many special domain constructs (or functors) are also required in order to create the desired structures. In this paper we mainly introduce the algebraic domains and algebraic L-domains.
For any set A, we write F ± A to mean that F is a finite subset of A. Let P be a poset, a nonempty subset D of P is said to be directed if for two arbitrary elements
a and b of D, there exists c ∈ D such that a ≤ c and b ≤ c. We use X = .i∈I di to
mean that X is the supremum of a directed set. A poset is called a dcpo if every directed subset has a least upper bound. Let x, y ∈ P , x is said to approximate y
(in symbol x   y) if and only if for every directed set D ⊆ P , y ≤ . D means that

there is a d ∈ D such that x ≤ d. x is said to be compact if x  x (We use K(P ) to denote the set of all compact elements of P ). Let ⇓ x = {a | a ∈ P ; a  x} for every x ∈ P . A subset B of P is said to be a basis of P if for every x ∈ P , ⇓x  B
is a directed set and x = .(⇓x  B). A dcpo is called a domain if it has a basis. In
particular, a dcpo is called an algebraic domain if all compact elements of it form a basis. A domain D is pointed if it contains a least element ⊥.
A function f between two domains P1 and P2 is called Scott continuous if f
preserves all joins of directed sets, that is, for a directed set D of P1,
f (. D)= . f (D).
A pointed algebraic domain in which every ideal ↓ x is a complete lattice(in its induced order) is called an algebraic L-domain.
The algebraic domain category is denoted by AlGDOM in which algebraic domains are objects and Scott continuous functions are morphisms. The algebraic L-domain category as the full subcategory of AlGDOM is denoted by AlGLDOM in which all objects are algebraic L-domains. More results about domain theory can be found in [1,3,4]. The category theory in this paper can be found in [12,19].
In computer science, the notion of information systems was introduced as a logic-oriented approach to denotational semantics of programming languages. With the aid of information systems, the domains of elements are represented set theoretically by Scott[13]. Information systems are very familiar from mathematical logic and can construct concrete domains. The information systems introduced by Scott[13] represented the Scott domains. In 2008, Spreen and Xu [14] introduced the notion of general continuous information system which exactly captures continuous domains. In section 5 of [14], they characterize general algebraic information system by adding another requirement to the definition of a continuous information system. However, we think this is not the best construction since the algebraic domains has its particular properties. The general algebraic information system is defined as follows:

Definition 2.1 [14] Let A be a set, Con is a collection of nonempty finite subsets of A and ▶⊆ Con×A, a general algebraic Information system is a triple (A,Con,▶), and the following rules hold for all sets x, y ∈ Con and all elements a ∈ A.
{a}∈ Con,
x ▶ a ⇒ x  {a}∈ Con,
x ⊆ y and x ▶ a ⇒ y ▶ a,
x ▶ y ▶ a ⇒ x ▶ a,
x ▶ y ⇒ ∃z ∈ Con, x ▶ z ▶ z ▶ y,
x ▶ F ± A ⇒ ∃z ∈ Con, s.t. F ⊆ z and x ▶ z.
In this information system, X is a state of (A, Con,▶) if X satisfies the next three conditions:
X = X,
∀F ⊆ X, ∃y ∈ Con and y ⊆ X, s.t. F ⊆ y,

∀a ∈ X, ∃y ∈ Con and y ⊆ X, s.t. y ▶ a.
For a general algebraic information system, with respect to set inclusion, the states of A form a poset for which they denoted |A|.
Intuitively, for an information system (A, Con, ▶), the set A should be thought of as atomic propositions giving information about data and a set Con of finite sets of mutually consistent (i. e. non-contradictory) propositions. Furthermore, the entailment relation then tells us which propositions are derivable from what. The general algebraic information systems is a concrete representation of algebraic domain.

Proposition 2.2 [14] Let (A,Con,▶) be a general algebraic information system, then |A| is an algebraic domain.
Definition 2.3 Let L be an algebraic domain. Then a general algebraic informa- tion system IS(L) can be constructed as follows:
A = L,
Con = {x | x ± A, x directed with respect to ≤ (a ≤ b if a = b or a  b)},
If x ∈ Con, then x ▶ a ⇔ (∃b ∈ x)a  b.
Proposition 2.4 Let L be an algebraic domain. Then L is order isomorphic to
|IS(L)|.
AL information systems
In this section, we introduce a new notion of algebraic information system(AL in- formation system). Our method of constructing algebraic information system is different from Spreen’s because we obtain the AL information systems based on the bases of algebraic domains. We also obtain a bijective correspondence between AL information system and algebraic domain.
Definition 3.1 Let A be a set, Con is a collection of nonempty finite subsets of A and ▶⊆ Con × A. Then an algebraic Information system (simply call AL information system) is a triple (A, Con, ▶), and the following rules hold for all sets x, y ∈ Con, elements a, b ∈ A.
{a}∈ Con,
x ▶ a ⇒ x  {a}∈ Con,
a ∈ x ⇒ x ▶ a,
x ▶ y and y ▶ a ⇒ x ▶ a.
Where x ▶ y means that x ▶ b for all b ∈ y.

In an AL information system, for any subset X ⊆ A , X := {a ∈ A |
(∃x ± X)x ▶ a}.

Definition 3.2 X is a state of (A, Con, ▶) if X satisfies the following two condi- tions:
1.X = X,
2.∀F ± X, ∃y ± X and y ∈ Con, such that y ▶ F .
Since we define the states of an AL information system, with respect to set inclusion, the states of A form a poset for which we denote |A|. Using rules (2) (3) of AL information system, we can easily prove that the condition (2) of state is equivalent to that ∀F ⊆ X, ∃z ± X and z ∈ Con, such that F ⊆ z. Notice that if X ∈ |A|, y ∈ Con and y ± X, then it is trivial to check that y ⊆ X.
In the following steps, we prove that the states of an AL information system (A, Con, ▶) is an algebraic domain.

Proposition 3.3 |A| is a DCPO.
Proof. Assume D={Xi}i∈I is a directed subset of |A| and X =  i∈I Xi. If a ∈ X, by the definition of state, there exists x ± X, such that x ▶ a. For x ± X and D is directed, there exists i0 ∈ I such that x ⊆ Xi0 . Since Xi0 ∈ |A|, so a ∈ Xi0 ⊆ X, we get X = X. If F is any finite set of X, because {Xi}i∈I is directed, then there exists i1 ∈ I such that F ⊆ Xi1 . Since Xi1 ∈ |A|, so ∃y ∈ Con and y ± Xi1 such that y ▶ F , also y ± X. We have completed the proof.	2
Proposition 3.4 Let (A, Con, ▶) be an AL information system, x ∈ Con. Then
x ∈ |A|.
A subset X of A is a state if and only if there exist a family of {xi}i∈I ∈ Con
such that {xi}i∈I is directed and X =	i∈I xi.
Proof. By the rules (4) of AL information system, we can easily get that for any y ∈ Con, y = y, so x satisfies the condition (1) of the state. Since x also satisfies the condition (2) of the state is obvious as x ▶ a for any a ∈ x, it implies x ∈ |A|.

Next, suppose a set {xi}i∈I ⊆ Con, {xi}i∈I is directed and X =  i∈I xi. If y1 ± X and y1 ▶ a, because {xi}i∈I is directed, then there exists an i1 ∈ I, such that y1 ⊆ xi1 . It implies a ∈ xi1 ⊆ X, so X = X. If ∀F ± X, then there exists an i2 ∈ I, such that F ⊆ xi2 , thus xi2 ▶ F and xi2 ⊆ X. By the above steps, we get X ∈ |A|.
Conversely, suppose X ∈ |A|, consider the family = {x | x ∈ Con and x ⊆ X}. From the rule (1) of AL information system, we only need to prove X =  A . If xi1 ∈ A , xi2 ∈ A ,then xi1  xi2 ± X, by the properties of X, there exists x such that x ± X and x ▶ xi1  xi2 . This means that x is an upper bound of xi1 , xi2 , so A is directed.	2
Corollary 3.5 Let A be an AL information system, then for any states X, Xj ∈ |A|,
X  Xj ⇔ (∃x ∈ Con)X ⊆ x ⊆ Xj
Hence, the compact elements of |A| are x(x ∈ Con).

Proof. Suppose X, Xj ∈ |A|, X   Xj. By Proposition 3.4, Xj =  i∈I xi(xi ∈ Con
and xi ± Xj). Since {xi}i∈I is directed, there exists i0 ∈ I such that X ⊆ xi , thus
j		j	j	.	0

Since x ⊆ x ⊆ Xj ⊆ .

j∈J
Xj, there exists j0 ∈ J , such that x ⊆ Xj0 , so X ⊆ x ⊆

Xj . It implies X  Xj.	2
Theorem 3.6 Let A be an AL information system. Then |A| is an algebraic do- main. Conversely, for any algebraic domain (L, ≤), we can construct an AL infor- mation system IS(L) as follows:
A = K(L),
Con = {x | x ± A and x has a greatest element},
If x ∈ Con, then x ▶ a ⇔ a ∈↓x. Then L is order isomorphic to |IS(L)|.
Proof. We can easily prove that |A| is an algebraic domain using the conclusions above.
Now we prove the second part. Let L be an algebraic domain, consider IS(L)=(K(L), Con, ▶). By the definition of Con, {a} ∈ Con. Suppose x ∈ Con, x ▶ a, then by definition, x has a greatest element b and a ∈↓ x =↓ b, thus b is the greatest of x ∪ a, therefore x ∪ {a} ∈ Con. Suppose x ∈ Con, and a ∈ x, then a ∈↓ x, thus x ▶ a. If x, y ∈ Con, x ▶ b for all b ∈ y, this means y ⊆↓ x. If y ▶ a, then a ∈↓y ⊆↓x, hence x ▶ a.
Now we only need to prove that IS(L) is an AL information system. We prove that for any subset X of K(L), it is a state of IS(L) if and only if there exists some directed subset {bi}i∈I of (K(L), ≤) such that X = i∈I{↓ bi}: On the one hand, suppose X is a state of IS(L). For any F ± X, by the definition of X, there exists a subset x of X, x ∈ Con and x ▶ F . By the definition of IS(L), x has a greatest element a and F ⊆↓ x =↓ a, so a is an upper bound of F , this means that X is directed. If b ≤ c ∈ X, then {c} ▶ b, hence b ∈ X, this means that X is a down set, so X =  b∈X{↓b}. On the other hand, if {bi}i∈I is a directed set in K(L) and X =  i∈I{↓ bi}. For any x ∈ Con, x ⊆ X , x ▶ a ⇔ a ∈↓ x ⇒ a ∈ X, so X = X. For any F ± X, because {bi}i∈I is a directed set, there exists a bio ∈ {bi}i∈I such that F ⊆↓ bio . By the definition of IS(L), {bio } ∈ Con and {bio } ▶ F , thus X is a state of IS(L).
The order isomorphisim between (L, ≤) and |IS(L)| just follows immediately from the definition of algebraic domains.	2
Our AL information systems have some benefits:
Brief definitions and rules: Our rules of AL information systems and the conditions of states are briefer than general algebraic information system, so it is easy to construct and operate.
We can directly construct the AL information system based on the basis of an algebraic domain.
Convenient generalization: Basing on our AL information system, we can obtain some brief information systems of subclasses of algebraic domains. Our AL information systems are different from the general algebraic information systems

and have some advantages. We show them in the following examples.


Example 3.7 Let L be an algebraic domain, L = (a1, a2, a3, ··· an, ··· , T) and a1 < a2 < a3 < ··· < an < ··· < T. And the general algebraic information system of L can be constructed as in Definition 2.1, x = {T, a1} ∈ Con, but x b x, and x ¢ x, so it is not an AL information system.

Example 3.8 Let [0, 1] be an unit interval with order and B = [0, 1] be a basis of an algebraic domain L. Then we can construct the AL information system of L directly:
A = B,
Con = {x | x ± A},
If x ∈ Con, then x ▶ a ⇔ a ∈↓ x. Then L is order isomorphic to |IS(L)|.
We construct the general algebraic information system of L. We know that L ∼= IdB, so L = {xa | x ∈ (0, 1],a ∈ {1, 2}} {0}, this means L double every element of B except 0, the order of L is defined as follows: xa ≤ yb if x < y or x = y, a ≤ b. The general algebraic information system of L:
A = L,
Con = {x | x ± A},
If x ∈ Con, then x ▶ a ⇔ (∃b ∈ x)a  b.
Because L is more complex than B, the set of Con of Al information system is briefer than the general algebraic information system’s. We don’t need to consider the way-below relation of L is another advantage of our approach.

Observing this example we can find that If an algebraic domain is complicated, AL information system is simpler than existing ones since our method of construct- ing information system do not need to consider the way-below relation.


Proposition 3.9 Let A=(A, Con, ▶) be an AL information system. If A satisﬁes the condition (SEMI), then |A| is an algebraic semilattice.

x1, x2 ∈ Con, x1 ▶ F, x2 ▶ F ⇒ (∃y ∈ Con)x1 ▶ y, x2 ▶ y, y ▶ F	(SEMI)

The proof of Proposition 3.9 is obvious by the property of algebraic semilattice. Proposition 3.9 is a simple example of generalization of AL information systems. By adding the other conditions there are easy to obtain some other information systems of subclasses of algebraic domains (e. g. algebraic lattice, algebraic Scott domain). In the next section, we get a brief representation of information system
of algebraic L-domain, it is an important work of information system.

An Information systems representation of algebraic L-domains
Algebraic L-domains is very important in Domain theory because they form a maximal Cartesian closed full subcategory of the algebraic continuous domains. However, a brief representation of algebraic L-domain by information system is hard. The main problem in finding an information system description of algebraic L-domains is the characterization of those consistent sets that represent local supremum. In this section a subclass of AL information systems is defined capturing exactly the algebraic L-domains.

Lemma 4.1 [4] Let P be a poset. For P to be a compete lattice, it is sufficient to assume the existence of sups of ﬁnite sets and that of directed sets.
Definition 4.2 An algebraic information system (A, Con, ▶) is said to satisfy Prop- erty L if z1, z2 ∈ Con and x ▶ z1 ∪ z2, there exists z such that for any y, x ▶ y ▶ z1 ∪ z2, then y ▶ z ▶ z1 ∪ z2. We call z that x-sup of z1, z2, or we say z1, z2 has a x-sup z.
Remark 4.3 We can see that in Definition 4.2 z is not unique because if z ▶ a, then z ∪ {a} and z can ▶ each other, hence z can be replaced by z ∪ {a}. In particular, z ∪ z1 ∪ z2 also satisfies the condition.
Lemma 4.4 Let (A, Con, ▶) be an algebraic information system satisfying the Property L. If z1, z2 ∈ Con, x ▶ y ▶ z1 ∪ z2, then the set of x-sup of z1, z2 is the same as that of y-sup of z1, z2. In particular, if X ∈ |A| and x1, x2 ⊆ X, then the set of x1-sup of z1, z2 is the same as that of x2-sup of z1, z2.
Proof. Suppose zx is a x-sup of z1, z2 and zy is a y-sup of z1, z2. Then we can deduce x ▶ y ▶ zy ▶ z1 ∪ z2, it implies zy ▶ zx, x ▶ y ▶ z1 ∪ z2, thus y ▶ zx ▶ z1 ∪ z2, it implies zx ▶ zy. That means the set of x-sup of z1, z2 is the same as that of y-sup of z1, z2. If x1, x2 ⊆ X, x1 ▶ z1 ∪ z2, x2 ▶ z1 ∪ z2, then x1 ∪ x2 ± X, hence we can find x ⊆ X, such that x ▶ x1 ∪ x2. By the above discussion, z is a x1-sup of z1, z2 iff z is a x-sup of z1, z2 iff z is a x2-sup of z1, z2. We have completed the proof. 2
Theorem 4.5 Let (A, Con, ▶) be an algebraic information system with ∅ ∈ Con. If (A, Con, ▶) also satisﬁes the Property L, then |A| is an algebraic L-domain.

Proof. Because ∅ ∈ Con, ∅ is a bottom of |A|. Since |A| is an algebraic domain, we only need to prove that for any X ∈ |A|, ↓ X is a complete lattice. By Lemma 4.1, we only need to prove that for every finite set, there exists sup in ↓X.
Suppose X1, X2 ∈↓X, if z1, z2 ∈ Con and z1 ± X1, z2 ± X2, then ∃x ⊆ X such that x ▶ z1 ∪ z2. By Property L, there exists a y which is a x-sup of z1, z2. We consider the set E = {y | y is x-sup of z1, z2 for some x ⊆ X, z1 ⊆ X1, z2 ⊆ X2} and Y = E. We check Y ∈ |A|. If y ∈ E and a ∈ y, then we can deduce y ∪ a ∈ E, it implies a ∈ Y , so y ⊆ Y ⇒ Y =  {y | y ∈ E}.

Next, suppose ya ∈ E, yb ∈ E, then ya is xa-sup of z1a, z2a(xa ± X, z1a ± X1, z2a ± X2), yb is xb-sup of z1b, z2b(xb ± X, z1b ± X1, z2b ± X2).  Because z1a ∪ z1b ± X1, there exists z1c ⊆ X1 such that z1c ▶ z1a ∪ z1b, similarly, there exists z2c ⊆ X2 such that z2c ▶ z2a ∪ z2b. Because z1c ∪ z2c ± X, there exists xc ± X such that xc ▶ z1c ∪ z2c. By Definition 4.2, we can find yc is a xc-sup of z1c, z2c. It is trivial to check xc ▶ yc ▶ z1a ∪ z1b ∪ z2a ∪ z2b. By Lemma 4.4, we can know ya is a xc-sup of z1a, z2a and yb is a xc-sup of z1b, z2b. It implies yc ▶ ya ∪yb, we obtain that yc ∪ ya ∪ yb is also xc-sup of z1c, z2c, so yc ∪ ya ∪ yb ∈ E. It implies E is a directed set, hence the set {y | y ∈ E} is also a directed set. We know y ∈ |A|(y ∈ Con),
and Y = .{y | y ∈ E}, so Y ∈ |A|. It is easy to check that Y is an upper bound of
X1, X2 in ↓X.
Suppose W is an other upper bound of X1, X2 in ↓ X. If y ∈ E, then y is a x-sup of z1, z2(x ⊆ X, z1 ⊆ X1, z2 ⊆ X2). Because z1 ∪ z2 ± X1 ∪ X2 ⊆ W , there exists w ± W and w ▶ z1 ∪ z2. By Lemma 4.4, we can obtain that y is a w-sup of z1, z2 because w, x ⊆ X. This means w ▶ y, so y ⊆ W , it implies Y ⊆ W . We prove that |A| is an algebraic L-domain.	2
Theorem 4.6 Let L be an algebraic L-domain. Then the AL information system
IS(L) constructed in Theorem 3.6 satisﬁes Property L.
Proof. If x ▶ z1 ∪ z2, then there exist the greatest elements a, b, c respectively for x, z1, z2 and b, c ∈↓ a. Because L is an algebraic L-domain, ↓ a is a complete lattice(in its induced order). Consider in the complete lattice ↓a, we have b ∨ c and b ∨ c ∈ K(L), b ∨ c is a x-sup of z1, z2, thus IS(L) satisfies Property L.	2

Categorical equivalence
In this section, we introduce an Approximable mapping among the AL information system to discuss the categorical properties.
Definition 5.1 An approximable mapping H among the AL information systems (A, Con, ▶) and (Aj, Conj, ▶j) written H: A H Aj is a relation between Con and Aj satisfying for all x, xj ∈ Con, y ∈ Conj and b ∈ Aj, and all nonempty finite subsets F of Aj satisfy the following condition;
xHy and y ▶j b ⇒ xHb,
x ▶ xj and xjHb ⇒ xHb,
xHF ⇒ (∃z ∈ Conj)F ⊆ z and xHz. where xHy means that x ▶ b for all b ∈ y.
Requirements (1) and (2) of Definition 5.1 are equivalent to the following state- ment: x ▶ xj, xjHy and y ▶j b ⇒ xHb.
For an AL information system (A, Con, ▶), where x ∈ Con and a ∈ A, we set x Id a if x ▶ a. Then Id: A H A such that for all A H Aj, H ◦ Idj=H=Id ◦ H, and for an approximable mapping H : A H Aj and G : Aj H A” the composition H ◦ G: A H A” is defined by


x(H ◦ G)c ⇔ (∃y ∈ conj)xHy, yGc.

It is easy to check that H ◦ G is an approximable mapping between (A, Con, ▶) and (A”,Con”,▶”). All AL information systems and all approximable mappings between them is a category denoted ALGINS.
ALL information system An AL information system which satisfies Property
L.
ALGLINS: The category of all ALL information systems and all approximable mappings between them.
In domain theory, ALGDOM is the category of all algebraic domains and all scott continuous functions between them. ALGLDOM is the category of all alge- braic L-domains and all Scott continuous functions between them. In the following, we prove that ALGINS and ALGLINS are categorical equivalence to ALGDOM and ALGLDOM respectively.
Let L, Lj be algebraic domains, f is a scott continuous function between L and
Lj. We define the relation C (f ) between IS(L) and IS(Lj) as follows:
x ∈ Con, xC (f )b ⇔ (∃a ∈ x)b ≤ f (a).
Proposition 5.2 C (f ) is an approximable mapping between IS(L) and IS(Lj).
Proof. First, we know that IS(L)=(K(L), Con, ▶), if x ∈ Con, then by definition of Con, x has a greatest element, we denote a. If y ∈ Conj, then y has a greatest element b, thus xC (f )y ⇔ y ⊆↓f (a) ⇔ b ≤ f (a). Since y ▶j c ⇔ c ∈↓y ⇔ c ∈↓b, so c ≤ f (a), it implies xC (f )c.
Next, it is easy to check that (f ) satisfies the second condition of the approx- imable mapping. At last, because ↓f (a) K(Lj) is a directed set, we can also check that C (f ) satisfies the third condition of the approximable mapping. Hence, C (f ) is an approximable mapping.	2
Let (A, Con, ▶) and (Aj, Conj, ▶j) be AL information systems, H is an approx- imable mapping between them, Then we can define a map G (H) from |A| to P(Aj) as follows:
(D ∈ |A|)G (H)(D)=   H(x)(x ⊆ D, x ∈ Con).
Proposition 5.3 G (H) is a continuous function from |A| to |Aj|.
Proof. First, we check G (H)(D) ∈ |Aj|. If F ± G (H)(D), then for all b ∈ F ,
∃xb ∈ Con with xb ⊆ D, such that xbHb. Because  b∈F xb is a finite set and D ∈ |A|, there exists x ∈ Con with x ⊆ D, such that  b∈F xb ⊆ x, it implies xHF . By rule (3) of H, there exists y ∈ Conj such that xHy and F ⊆ y, that means y ⊆ G (H)(D) and y ▶ F . It is easy to check G (H)(D) = G (H)(D) by the above and rule (1) of H. So G (H)(D) ∈ |Aj|.
Next, we prove G (H)(.i∈I Di) = .i∈I G (H)(Di). The left is an upper bound
of the right, so we only need to check the left is contained in the right, this is trivial

because ∀F ± D(F ∈ Con), F is contained in some Di0 (i0 ∈ I). Therefore, G (H) is a continuous function from |A| to |Aj|.	2
By the above properties, we can define the functor C : ALGDOM → ALGINS and G : ALGINS → ALGDOM. And we prove ALGINS is Categorical equiva- lent to ALGDOM.
Theorem 5.4 Let L and Lj be algebraic domains and f : L → Lj be a continuous function. Then
fL′ ◦ f = G (C (f )) ◦ fL,
where fL is the isomorphism between (L, ≤) and (|IS(L)|, ⊆), fL′ is the isomorphism between (Lj, ≤) and (|IS(Lj)|, ⊆) deﬁned in Theorem 3.6.

f
(L, ≤)	−−−−→
(Lj, ≤)

fL⏐ 
fL′ ⏐ 

G (C (f ))
(|IS(L)|, ⊆) −−−−−→
(|IS(Lj)|, ⊆)

Proof. For all a ∈ L, we have fL′ ◦ f (a) = K(Lj)  ↓ f (a). G (C (f )) ◦ fL =
  xC (f )b(x ∈ ConK(L),x ⊆↓ a) =↓f (↓a  K(L))  K(Lj), since f preserves the directed set, K(Lj)  ↓f (a) =↓f (↓a  K(L))  K(Lj).	2
For any AL information system (A, Con, ▶), denote the compact elements of (|A|, ⊆) by K(|A|). In Corollary 3.5, it has been proved K(|A|) = {x | x ∈ Con}, we introduce a relation HA ⊆ ConA × K(|A|) by
(x, y) ∈ HA ⇔ y ⊆ x.


We can verify that HA is an approximable mapping from (A, Con, ▶) to (K(|A|), Con, ▶). On the other side, define a relation IA ⊆ ConK(A) × A by
(α, a) ∈ IA ⇔ a ∈  α.


It is trivial to check that IA is an approximable mapping from (K(|A|), Con, ▶) to (A, Con, ▶) and it is easy to check that IA is an inverse of HA. Hence, HA is an isomorphism in ALGINS.
Theorem 5.5 Let (A, Con, ▶) and (Aj, Conj, ▶j) be AL information systems and
H : (A, Con, ▶) → (Aj, Conj, ▶j) be an approximable mapping. Then
H ◦ HA′ = HA ◦ C (G (H)),
where HA and HA′ are deﬁned above.



(A, Con, ▶)
−−−H−→	(Aj, Conj, ▶j)

HA⏐ 


C (G (H))
HA′ ⏐ 

j

(K(|A|), Con|A|, ▶|A|) −−−−−→ ((K(|A |), Con|A′|, ▶|A′|))
Then ALGINS is categorical equivalent to ALGDOM.
Proof. For x ∈ Con, we have xH ◦ HA′ c = (yj | yj ⊆ xj  ⊆ xHb), and xHA ◦ C (G (H)c = xK(|A|)C (G (H))c(xK(|A|) ⊆ {y | y ⊆ x}) = xK(|A|)C (G (H))c(xK(|A|) ⊆↓K|A| x) = {yj | yj ⊆ xHb}. It is equivalent with xH ◦ HA′ c because xHy ⇔ xHy. With Theorem 5.4, we prove that ALGINS is categorical equivalent to ALGDOM.	2
Theorem 5.6 ALGLINS is categorical equivalent to ALGLDOM.
Proof. Obvious.	2
We know that ALGDOM is not a cartesian closed category and ALGLDOM is a maximal subcategory of ALGDOM which is cartesian closed. So we can easily get the following conclusion.
ALGINS is not cartesian closed, ALGLINS is a maximal subcategory of AL- GINS which is cartesian closed.

References
Birkhoff, G., “Lattice Theory,” 3rd. ed., American Mathematical Society, Providence, 1967.
Coquand, T., Categories of embeddings, Theoret. Comput. Sci. 68 (1989) 221-238.
Davey, B. A., H. A. Priestley, “Introduction to Lattices and Order,” 2nd edition, Cambridge University Press, 2002.
Gierz, G., K. H. Hofmann, K. Keimel, J. D. Lawson, M. W. Mislove, D. S. Scott, “Continuous Lattices and Domains, Cambridge University Press,” Cambridge, 2003.
Girard, J. Y., The system F of variable types, fifteen years later, Theoret. Comput. Sci. 45 (1986), 159-192.
Gunter, C. A., “Semantics of Programming Languages,” MIT-Press, Cambridge, MA, 1992.
Gunter, C. A., D. S. Scott, Semantic domains, in: J. van Leeuwen (Ed.), Handbook of Theoretical Computer Science, Vol. B, Formal Models and Semantics, Elsevier, Amsterdam, 1990, pp. 633-674.
Hoofman, R., Continuous Information systems, Information and Computation, 105 (1993) 42-71.
Jung, A., “Cartesian Closed Categories of Domains,” CWI Tracts, Vol. 66, Centrum voor Wiskunde en Informatica, Amsterdam, 1989.
Jung, A., The classification of continuous domains, in: Proc., Fifth Annual IEEE Symposium on Logic in Computer Science, IEEE Computer Society Press, New York, 1990, pp. 35-40.
Larsen, K. G., G. Winskel, Using informa tion systems to solve domain equations ef- fectively, in:
G. Kahn, D. B. MacQueen, G. Plotkin (Eds.), Semantics of Data Types, Lecture Notes in Computer Science, Vol. 173, Springer, Berlin, 1984, pp. 109-129.
MacLane, S., “Categories for the Work ing Mathematician SpringerVerlag,” New York, 1971.
Scott, D., Domains for denotational semantics, in: M. Nielsen et al. (Eds.), Automata, Languages and Programming, Aarhus, 1982, Lecture Notes in Computer Science, Vol. 140, Springer, Berlin, 1982, pp. 577-613.


Spreen, D., L. Xu, X. Mao, Information systems revisited: the general continuous case, Theoret. Comput. Sci. Volume 405, Issues 1-2, 6 October 2008, Pages 176-187.
Spreen, D., Representing L-Domains as Information Systems, In Logic, Construction, Computation (Festschrift for Helmut Schwichtenberg) (U. Berger et al., eds.), 501C540. Ontos-Verlag, Frankfurt/Main, 2012.
Vickers, S., Information systems for continuous posets, Theoret. Comput. Sci. 114 (1993) 201-229.
Winskel, G., An introdution to event structures, in: Proc., Workshop, Noordwijkerhout/NL 1988, Lecture Notes in Computer Science, Vol. 354, Springer, Berlin, 1989, pp. 364-397.
Zhang, G. Q., Disjunctive systems and L-domains, in: W. Kuich (Ed.), Automata, Languages and Programming, Wien, 1992, Lecture Notes in Computer Science, Vol. 623, Springer, Berlin, 1992, pp. 284-295.
Zhang, G. Q., “Logic of Domains,” Birkha¨user, Boston, Basel, Berlin, 1991.
Zhang, G. Q., DI-domains as prime information systems, Inform. and Comput. 100 (1992) 151-177.
Zhang, G. Q., A representation of SFP, Inform. and Comput. 110 (1994) 233-263.
