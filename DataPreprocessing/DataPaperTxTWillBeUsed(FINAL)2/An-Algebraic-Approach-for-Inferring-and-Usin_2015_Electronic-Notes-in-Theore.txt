Available online at www.sciencedirect.com


Electronic Notes in Theoretical Computer Science 316 (2015) 45–65
www.elsevier.com/locate/entcs

An Algebraic Approach for Inferring and Using Symmetries in Rule-based Models
J´erˆome Feret1
DIENS (INRIA/E´NS/CNRS), Paris, France

Abstract
Symmetries arise naturally in rule-based models, and under various forms. Besides automorphisms between site graphs, which are usually built within the semantics, symmetries can take the form of pairs of sites having the same capabilities of interactions, of some protein variants behaving exactly the same way, or of some linear, planar, or 3D molecular complexes which could be seen modulo permutations of their axis and/or mirror-image symmetries.
In this paper, we propose a unifying handling of symmetries in Kappa. We follow an algebraic approach, that is based on the single pushout semantics of Kappa. We model classes of symmetries as finite groups of transformations between site graphs, which are compatible with the notion of embedding (that is to say that it is always possible to restrict a symmetry that is applied with the image of an embedding to the domain of this embedding) and we provide some assumptions that ensure that symmetries are compatible with pushouts. Then, we characterise when a set of rules is symmetric with respect to a group of symmetries and, in such a case, we give sufficient conditions so that this group of symmetries induces a forward bisimulation and/or a backward bisimulation over the population semantics.
Keywords: Rule-based models, symmetries, category theory, group actions, bisimulations


Introduction
Symmetries play an important role in rule-based modelling. One simple example is the case of symmetric sites, that is to say when two sites in a protein have exactly the same capabilities of interaction. Symmetric sites can be handled with in various ways according to the choice of modelling language. Some languages propose syntactic solutions to describe them explicitly. In BNGL [1] a site can occur several times in the interface of an agent. In the Formal Cell Machinery Language [7] and in React(C) [20], one can use hyper-edges to connect several sites of the same kind

1 This material is based upon some works sponsored by the “Agence Nationale de la Recherche” (ANR) under the Chair of Excellence AbstractCell and upon some works sponsored by the Defense Advanced Research Projects Agency (DARPA) and the U. S. Army Research Office under grant number W911NF-14-
1-0367. The views, opinions, and/or findings contained in this article are those of the authors and should not be interpreted as representing the official views or policies, either expressed or implied, of the “Agence Nationale de la Recherche”, the Defense Advanced Research Projects Agency, or the Department of Defense.
2 feret@ens.fr

http://dx.doi.org/10.1016/j.entcs.2015.06.010
1571-0661/© 2015 The Authors. Published by Elsevier B.V.
This is an open access article under the CC BY-NC-ND license (http://creativecommons.org/licenses/by-nc-nd/4.0/).

with a given agent. In Kappa [13], there is no direct means to specify that two sites are symmetric in the core language, but it is possible in higher level front ends such as Meta-Kappa [10]. Models in Meta-Kappa can then be macro-processed into proper Kappa models, by enumerating the concrete instances of symmetric rules. Another approach consists in detecting which sites are symmetric by inspecting the rules, and in lumping [2,16] the states of the model accordingly [6], by the means of back and forth (both forward and backward) bisimulations [3]. As a consequence, symmetric models enjoy nice statistical properties: (i) if for each pair (q, qj) of symmetric states, the system has the same probability (we assume for the sake of simplicity that q and qj have no non trivial automorphism) to be in the state q as in the state qj at a given time t, then, it is also the case for any time tj such that tj≥t. (ii) otherwise, if there exists a state that can be reached by each other state in the system, any two symmetric states q and qj will have the same probability to occur at the limit when time goes to the infinity. Moreover, the bisimulations that are induced by symmetries are particular in the sense that they are induced by a partitioning of the variables (of the systems) and can also be used to lump the ODE semantics of Kappa [4].
Symmetries between sites are not the only kind of symmetries: there are many other kinds. For instance, we can consider the sites of an agent as a list of ordered loci on a ring, seen modulo circular permutations. Another example is the case of rigid structures. In such structures, the sites of agents should not be permuted independently: we should only consider as symmetries the transformations in which the sites of each pair of agents that have the same type and that are in the same connected component are reordered by the same permutation. This former kind of symmetry is especially useful in the case of macro-molecules, self-assembly models, and diffusion models. For instance, in the population migration model that is de- scribed in [19], ants are moving on a landscape that is encoded as a grid of agents linked by some specified sites named ’north’, ’west’, ’south’, and ’east’. These sites encode the orientation of the landscape: a rotation of the landscape can be mod- elled by applying the same circular permutation to the four direction sites of all the agents of the grid. To the best of our knowledge, there is no tool to describe such symmetries in any rule-based language.
In this paper, we propose an algebraic framework for describing symmetries among site-graphs. This framework is abstract enough so that all the kinds of symmetries that we have mentioned so far can be dealt with in a uniform setting. Indeed, circular permutations and homogeneous symmetries (in which the same per- mutation is applied with the sites of all the agents of a given connected component) can easily be defined as subgroups of another (simpler) group of symmetries. Then, we show that our notion of symmetry is compatible with the single pushout con- struction, which we use as a foundation of the operational semantics of Kappa [8]. We give sufficient conditions for a model to be symmetric with respect to a given group of symmetries, and give extra-assumptions so that these symmetries induce forward bisimulations or even back and forth bisimulations over the Markov chain that is induced by this model.


		


Two agents of type A bound via their site x.
Two agents of type A bound respectively via their site x and y.
Two agents of type A bound via their site y.



Kappa
Fig. 1. Three site graphs.

In this section, we describe the single-pushout (SPO) semantics of Kappa.
Site graphs
Firstly we define the signature of a model.
Definition 2.1 A signature is a tuple Σ = (Σag, Σst, Σag-st) where Σag is a finite set of agent types, Σst is a finite set of site identifiers, Σag-st : Σag → ℘(Σst) is a site map.
Agent types in Σag denote agents of interest, as kinds of proteins for instance. A site identifier in Σst represents an identified locus for capability of interactions. Each agent type A is associated with a set of sites which can be linked Σag-st(A) (we omit the use of internal states so as to simplify the presentation).
Example 2.2 We consider only one type of agent, A, having two sites x and y. This is encoded by the following signature: Σ =Δ ({A}, {x, y}, [A '→ {x, y}]).
For the rest of the paper, we assume that we are given a signature Σ.
In Kappa, both the state of the system and the patterns which are used to describe transformation rules are defined as site graphs, the nodes of which are typed agents with some sites which can bear a linking state.
Definition 2.3 A site-graph is a tuple G = (A, type, S, L) where A is a set of agents, type : A → Σag is a function mapping each agent to its type, S is a set of sites such that S ⊆ {(n, i) | n ∈ A,i ∈ Σag-st(type(n))}, L is a symmetric relation such that L ⊆ (S ∪ {E, −})2 \ {E, −}2; such that: (i) the set A is finite; (ii) its link relation L is irreflexive; (iii) for any binding site (n, i) ∈ S, ((n, i), x) ∈L and ((n, i), y) ∈L implies x = y.
Whenever ((n, i), E) ∈ L, the binding site (n, i) is free. Various levels of infor- mation can be given about the sites that are bound. Whenever ((n, i), −) ∈ L, then the binding site (n, i) is bound to some other site which is not specified. Whenever ((n, i), s) ∈L with s ∈S then the binding site (n, i) is bound to the binding site s. We introduce a sub-typing relation ≤G over binding states, that is defined as the least reflexive relation such that − ≤G s for any s ∈ S.
For a site-graph G, we write as AG its set of agents, typeG its typing function,
SG its set of sites, and LG its set of links.



Fig. 2. an embedding between two site graphs.
Example 2.4 Examples of site graphs (for the signature given in Exa. 2.2) are given in Fig. 1.
Embeddings
Two site graphs can be related by structure-preserving injective functions, which are called embeddings, as illustrated in Fig. 2.
Definition 2.5 An embedding h : G ,˛/H¸between two site graphs G and H is a function of agents h : AG → AH satisfying: (i) m = n for all m,n ∈ AG such that h(n) = h(m); (ii) typeG(n) = typeH (h(n)) for all n ∈ AG; (iii) (h(n), i) ∈ £H
for all (n, i) ∈ £G; (iv) ((h(n), i), (h(nj), ij)) ∈ LH for all ((n, i), (nj, ij)) ∈ LG ∩ £2 ;
(v) there exists y ∈ £H ∪ {E, —} such that ((h(n), i), y) ∈ LH and x ≤H y for all ((n, i), x) ∈ LG such that x ∈ {E, —}.
Whenever f is an embedding between two site graphs E and F , the site graph E (resp. F ) is called the domain of (resp. the image of) f and is denoted as dom(f ) (resp. as im(f )). The number of embeddings between two site graphs G and H is denoted as [G, H]. Whenever G = H, f is called an automorphism. We notice that the identity function always induces an automorphism. The identity automorphism of a site graph E is denoted as iE . Two embeddings f and g such that im(f ) = dom(g) compose in the usual way (and form an embedding between the domain of f and the image of g). Moreover, whenever two embeddings f and g satisfy
(i) im(f ) = dom(g), (ii) im(g) = dom(f ) and (iii) gf = iim(g), the composition fg is equal to iim(f ). In such a case, f and g are called isomorphisms, f is said to be the inverse of g, and G and H are said to be isomorphic which is written G ≈ H. All the constructions in this paper are defined up to isomorphism.
Lastly, two embeddings f and g are said to be isomorphic, which is written
f ≈ g, if and only if there exists an isomorphism φ such that f = φg.
Weak embeddings
We stress out on the fact the notion of embedding between site-graphs is not the same as the notion of embedding between graphs. The major difference is that in a site-graph we have to specify explicitly when a site is free. As a consequence, a site that is free can be embedded only into a site that is free. It is sometimes convenient to relax the definition of embedding so as to allow sites that are free to be mapped to arbitrary sites, which gives the notion of weak embedding.



Fig. 3. A pair of weak embeddings between two non isomorphic site graphs.

Definition 2.6 A weak embedding between two site-graphs G and H is an em- bedding between the site graph Gˆ and the site graph H, where the site graph Gˆ is
defined by: A ˆ =Δ AG, £ ˆ =Δ £G, L ˆ =Δ {(x, y) ∈ LG | x /=E and y /=E}.
G	G	G
A weak embedding between two site graphs G and H is denoted as G  /¸/H¸.
We notice that any embedding is also a weak embedding (but the converse is wrong in general). Moreover, there may exist a weak embedding f : G /¸/H¸ between two site graphs G and H and a weak embedding g : H	/¸/G¸between the two site graphs H and G, even if the site graphs G and H are not isomorphic (see Fig. 3 for an example). Thus, weak embedding must be handled with very carefully.

Partial embeddings
When a site graph G is transformed into another site graph H, it is important to identify which agents of G correspond to which agents of H. Since some agents of G may disappear and some agents in H may be created during the transformation, we need to formalise a partial matching between the agents of the site graphs G and
H. This partial matching is described by the means of a pair of embeddings with the same domain. For the sake of generality, we define firstly the notion of weak partial embeddings.
Definition 2.7 A weak partial embedding φ : L ¸,¸,D /¸/R¸between two site graphs L and R with domain D, is a pair (hL, hR) made of a weak embedding hL between the site graphs D and L and a weak embedding hR between the site graphs D and R
In a weak partial embedding φ : L ¸,¸,D /¸/R¸, the site graph L (resp. R) is called the left hand side of (resp. the right hand side of) φ and is written lhs(φ) (resp. rhs(φ)). The domain D denotes a region that is shared between the site graphs L and R. The choice of the domain can be made modulo isomorphism. That is to say that a weak partial embedding φ = (hL, hR) and a weak partial embedding (hLh, hRh), where h is an isomorphism between a site graph and the domain of φ are considered to be equivalent.
A weak partial embedding is called a partial embedding when each of its two weak embeddings is an embedding.
Weak partial embeddings can be composed thanks to the pullback construction.



 hL	hR 
h′	h′

Definition 2.8 Let φ : L ¸,¸,D1	/¸/R¸and φj : R ¸L,¸,D2	/R¸/R¸j be two weak partial embeddings such that rhs(φ)= lhs(φj). There necessarily exist a site

graph D3
and a partial embedding φjj	:	D1
¸hD,1 rzD
,˛hD2 /D¸ between the site

graph D1 and D2, such that: (i) hRhD
= hj hD ; (ii) and for any other site graph

1	L	2
h′	h′

D and any partial embedding φjjj : D
¸D1r,zD
,˛D2/D¸ such that h hj
= hj hj ,

4	1 	4 	2
R  D1
L  D2

there exists a unique embedding h between D4 and D3 such that hj
= hD1 h and

D2 = hD2 h.



hR
¸¸ 
D1,¸¸¸hD
 R ¸¸ ′
L


hD2

¸¸
 D¸ 2,




R
 R j

,  ¸,
D,3 ,
D	h′
h !
¸>,r˛ 
4

With these notations, the weak partial embedding (hLhD , hj hj
) is called the

1	R  D2
composition of the weak partial embeddings φ and φj and is written as φjφ.
The composition of two weak partial embeddings is uniquely defined modulo the fact that the domain can be replaced with any isomorphic one.
A weak embedding h between two site graphs L and R can be seen as a weak partial embedding (iL, h). Thus, we can compose a weak partial embedding and a weak embedding (provided that the right hand side of the weak partial embedding is equal to the domain of the weak embedding). We can also compose a weak embed- ding and a weak partial embedding (provided that the codomain of the embedding equal to the left hand side of the weak partial embedding).
We notice that the composition of two partial embeddings is also a partial em- bedding.

Rules
Transformations between site graphs are described by rules. Some examples are given in Fig. 4.
A rule is a transformation between two site graphs, a left hand side (lhs) L and a right hand side (rhs) R. In a rule, some agents and some sites are preserved. This is specified by a site graph D which is embedded both into L and into R and which describes anything that is preserved. Not all transformations are allowed: one can remove and add agents, create links between free sites, and free pairs of sites that are connected. The agents that are created have to fully define the state of their sites. Our requirements are formalised in the following definition:
Definition 2.9 A rule is a partial embedding L ¸hL,rzD ,˛hR /R¸such that :




k1	x
A
A
k2	y
A
k3	x

	 z 
x

A
	 z		 z 
y	y
A	A



r1 binds two sites x.
r2 binds two sites y.
r3 binds the site x and the site y of two different agents.


Fig. 4. Under which conditions are the sites x and y symmetric ?
h′	z ,˛h′	,˛
for any partial embedding L ¸L,rDj  R /R¸and any embedding D  h /D¸j such that hL = hj h and hR = hj h, then h is an isomorphism;
L	R
for any site (n, i) ∈ £R, if ((n, i), —) ∈ LR then there exists m ∈ AD such that
n = hR(m), (m, i) ∈ £D, and ((m, i), —) ∈ LD;
if m ∈ AD, then for any i ∈ Σag-st(typeD(m)), (m, i) ∈ £D if and only if (hL(m), i) ∈ £L if and only if ((hR(m), i)) ∈ £R; and, in such a case, there exists y ∈ £L ∪ {E, —} such that ((hL(m), i), y) ∈ LL if and only if there exists y ∈ £R ∪ {E, —} such that ((hR(m), i), y) ∈ LR;
if m ∈ AR and m /∈ im(hR), then, for any i ∈ Σag-st(typeR(m)), (hR(m), i) ∈ £R
and there exists y ∈ £R ∪ {E} such that ((hR(m), i), y) ∈ LR.
The constraint i ensures that D is a local greatest upper bound. The constraint ii ensures that when a site gets bound, we know which site it is bound to. The constraint iii ensures that the sites which occur both in the left hand side and in the right hand side of a rule, have a binding state in the left hand side of this rule if and only if they have a binding state in the right hand side of this rule. The constraint iv ensures that when an agent is created, the state of all its sites is documented.
A rule L ¸r,zD ,˛/R¸is usually denoted as L  zR (leaving the two embeddings
and the common region implicit).
Now we give the definition of a model.
Definition 2.10 A model M, is a function from the set of rules into the set of non-negative real numbers R+, such that only a finite number of rules has a non zero rate.
In a model M, the rate of the rule r is usually denoted as kn (r). We also introduce the corrected rate γn(r) of the rule r as the quotient between kn (r) and the number [lhs(r), lhs(r)] of automorphisms in the left hand side of the rule r.

Reﬁnements
Rules can be more or less refined [9,21], by adding more or less information about the context in which they can be applied.
Definition 2.11 A reﬁnement (r, rj, hL′ , hR′ ) is a tuple where r is a rule between


x	x
	 z A	A
y	y


x
	 z A
x
A
x
	 z A



An embedding between the left hand side of a rule and a fully specified site graph that induces a refinement.
An embedding between the left hand side of a rule and a fully specified site graph that cannot induce a refinement.


Fig. 5. In (a), applying the rule consists in binding the sites x of both agents. In (b), applying the rule would require to keep the site of the first agent bound, and to release the binding of the site of the second agent. This is not possible since these two sites are bound together in the site graph on the top.
two site graphs L and R, rj is a rule between two sites

graphs Lj
and Rj, hL′ is an embedding between the
jj
 ¸,,

site graphs L and Lj, and hR′ is an embedding between the site graphs R and Rj such that: (i) hR′ r = rjhL′ ;
jj	j
r′′	h
!
j 	 z j  ,

(ii) and for any rule r  between the site graph L and
L,, r′
R,,
hR′′

a site graph Rjj, and any embedding hR′′ between the
site graphs R and Rjj, such that hR′′ r = rjjhL′ , there exists a unique weak embedding h between Rj and Rjj

hL′
,r

hR′
,r,¸

such that rjj = hrj and hR′′ = hhR′ .
L 	r	 Rz 

We also say that the pair (rj, hR′ ) is a pushout of the pair (hL′ , r).
Example 2.12 We give in Fig. 5 two examples of embedding between the left hand side of a rule and a site graph. In 5(a), the embedding induces a refinement. This refinement is obtained by binding the sites x of both agents. In 5(b), no refinement can be formed. Indeed, the rule requires to keep one site x bound and to release the other one and the embedding states that the two sites are bound together. Thus it is not possible to release one, without releasing the other.
Semantics
Now we are ready to define the stochastic semantics of Kappa, as a weighted tran- sition system [17], that is made of a set of states, related by labelled transitions weighted by non-negative real numbers.
The states of the system are the isomorphism classes of fully specified site graphs, where a fully specified site graph is a site graph that cannot be embedded in any non-isomorphic site graph without adding a new connected component.
The fact that an embedding does not add a connected component is captured by the notion of epimorphism [11, Cor IV.6] which is defined as follows:
Definition 2.13 An embedding f between two site graphs E and F is called an epimorphism, if and only if, for any site graph G and any two embeddings g1 and g2 between the site graphs F and G such that g1f = g2f , we have g1 = g2.

Now we can define fully specified site graphs.
Definition 2.14 We say that a site graph E is fully speciﬁed if and only for any epimorphism f such that dom(f )= E, the site graphs E and im(f ) are isomorphic.
Intuitively, in a fully specified site graph G, each agent documents all its sites (i.e. £G = {(n, i) | n ∈ AG,i ∈ Σag-st(typeG(n))}) and each site in £G is either free, or bound explicitly to another site in £G.
We notice, that, in a rule r, if the left hand side is a fully specified site graph, then the right hand side is a fully specified site graph as well.
Now we are ready to define of the semantics of Kappa.
Definition 2.15 The set of states Q is the set of ≈-equivalence class of fully spec- ified site graphs.
Definition 2.16 The set of transition labels L is the set of the pairs (r, C) where r is a rule and C is an ≈-equivalence class of embeddings hL′ such that dom(hL′ )= lhs(r).
Definition 2.17 Given two states q, qj ∈ Q and a label (r, C) ∈ L, there is a transition between the state q and the state qj with label (r, C) if and only if there exists a refinement (rj, rjj, hL′ , hR′ ) such that: (i) r = rj; (ii) lhs(rjj) ∈ q;
(iii) rhs(rjj) ∈ qj; (iv) and hL′ ∈ C.
(r,C)	j
In such a case, we write: q ———→ q .
Such a transition is given a rate that is denoted as rate(r, C), and that is defined as follows:
rate(r, C) = γn(r)Card({φhL′ | φ automorphism of im(hL′ )}).
In Def. 2.17, we observe that the quantity rate(r, C) does not depend on the choice of the embedding hL′ in C.
The stochastic semantics of a model can be easily defined, as the distribution of traces, or as a continuous-time Markov chain that is induced by this weighted labelled transition system [17].
Groups of symmetries over site graphs
Elements of group theory
Group theory offers convenient ways to formalise symmetries among mathematical structures.
Definition 3.1 A group is a pair (G, ◦) where G is a set of elements and ◦ is an infix associative binary operator over the set G, such that: (i) (identity element) there exists an element εG ∈ G which satisfies, a ◦ εG = a and εG ◦ a = a; (ii) (inverse) for any element a ∈ G, there exists an element a—1 ∈ G such that a ◦ a—1 = εG and a—1 ◦ a = εG.

In a group G, there is only one identity element that we denote by εG.
Groups are not necessarily commutative. Intuitively, an element of the group can be seen asa sequence of atomic elements, modulo the fact that an element and its inverse cancel each other when they have a consecutive position in the sequence. The identity element can be then seen as the empty sequence.
The action of symmetries over a set of elements can be described by the means of a group action.
Definition 3.2 A group action is a triple ((G, ◦), X, .) where (G, ◦) is a group, X is a set, and · is an infix operator from G × X into X such that, for any element x ∈ X and any elements a, b ∈ G: (i) εG.x = x; (ii) (a ◦ b).x = a.(b.x).
Groups of symmetries
Now we introduce our framework to describe sets of symmetries over site graphs. Our goal is to provide a definition of symmetries which enables to lift the action of symmetries over the basic elements of the semantics, namely fully specified site graphs, weak embeddings, embeddings, rules, and refinements. To achieve this goal, we require that each symmetry which can be applied with the image im(h) ofa weak embedding h can be restricted to a symmetry which can be applied to the domain dom(h) of the weak embedding h, hence providing a weak embedding between the symmetric of the domain dom(h) and the symmetric of the image im(h) of the embedding h.
Definition 3.3 A set of symmetries G over site graphs is defined as a quadruple ((GE, ◦E), ., .j, .jj), made of a family of finite groups (GE, ◦E) indexed by site graphs, and three functions ., .j, and .jj, where:
the function . maps each pair (σE, E) such that E is a site graph and σE is an element of GE to a site graph, that is written σE.E;
the function .j maps each pair (f, σF ) such that f is a weak embedding between
two site graphs E and F , and σF is an element of GF to an element in GE , that is written f.jσF ;
the function .jj maps each pair (σF ,f ) such that f is a weak embedding between two site graphs E and F , and σF is an element of GF to a weak embedding σF .jjf between the site graph (f.jσF ).E and the site graph σF .F ;
E /¸	/F¸


f.′σF
 z
j
σF
 z
/σF .′′f

(f. σF ).E	¸	/σ¸F .F
such that, for any site graph E and any element σE ∈ GE , the following properties are satisfied:
the groups (GE, ◦E) and (GσE.E, ◦σE.E ) are the same;
the function mapping each pair (σj , Ej) ∈ GE × {σ.E | σ ∈ GE} to the site
graph σj .Ej, is a group action;

Let us consider G a set of symmetries. We say that two site graphs G and Gj are symmetric, and we write G≈GGj if and only if there exists a symmetry σ ∈ GG such that Gj = σ.G. This is an equivalence relation. Moreover, by Def. 3.3.i, the same symmetries can be applied with a pair of symmetric site graphs.
Given a weak embedding f and a symmetry σ ∈ Gim(f ). The symmetry σ can be applied to the image of the weak embedding f and the result is written as σ.(im(f )); the permutation σ can also be restricted to the domain of f , this restriction is written f.jσ. Moreover, the weak embedding σ.jjf is a weak embedding between the site graph (f.jσ).(dom(f )) and the site graph σ.(im(f )).
There are several ways to restrict a symmetry to the domain of a weak embed- ding, because a symmetry can be described as the product of two others or because the weak embedding can be described as the composition of two others. In such a case, it is important to get the same result. Thus, we need to strengthen Def. 3.3, which is the purpose of the two following definitions.
Definition 3.4 Let G be a set of symmetries. We say that the symmetries in G distribute over the composition of weak embeddings, if and only if, for any two weak embeddings f and g that compose and any symmetry σ ∈ Gim(g), the following

constraints hold: (i) i
im(g)
.jσ = σ; (ii) σ.jji
= iσ.(im(g))
; (iii) (gf ).jσ = f.j(g.jσ);

(iv) and σ.jj(gf )= (σ.jjg)((g.jσ).jjf ).
Definition 3.5 Let G be a set of symmetries. We say that restriction of the sym- metries in G to the domain of weak embeddings distributes over the product be- tween symmetries, if and only if, for any weak embedding f and any elements

σ ∈ Gim(f )
and σj ∈ G
im(f )
, the following constraints are satisfied: (i) the func-

tion mapping each pair (σjj,fjj) such that σjj ∈ G
im(f )
and fjj is a weak embed-

ding such that im(f jj)≈Gim(f ), to the weak embedding σjj.jjfjj, is a group action;
f.jεim(f ) = εdom(f ), where εim(f ) (resp. εdom(f )) is the identity element of the

group G
im(f )
(resp. G
dom(f )
); (iii)	f.j(σj ◦im(f ) σ)= ((σ.jjf ).jσj) ◦dom(f ) (f.jσ).

Let us explain Def. 3.4 in more details. The first constraint ensures that restrict- ing a given symmetry to the domain of an identity embedding does not modify the symmetry. The second constraint ensures that
the symmetric of an identity embedding over a given site graph is the identity function over the
symmetric of the same site graph. The rest of

Def. 3.4 deals with the composition of weak em- beddings. There are two ways to restrict a sym- metry σ to the domain of a composition gf of
f.′(g.′σ)




σ.′′(gf )

two weak embeddings g and f . In one step, we
get the symmetry (gf ).jσ and the image of the
Fig. 6: The symmetric of a composition of embeddings

weak embedding gf by the symmetry σ is the weak embedding σ.jj(gf ). In two steps, firstly we restrict the symmetry σ to the domain of g, we get the symmetry g.jσ and the image of the weak embedding g is defined as σ.jjg. Then, we restrict the symmetry g.jσ to the domain of f , and get the symmetry f.j(g.jσ) and the image

of the weak embedding f is given by (g.jσ).jjf . Thus, whenever the symmetries distributes over the composition of weak embeddings, we get the same result with both ways. Def. 3.5 works the same way. It ensures that: (i) identity symmetries act neutrally; (ii) and whenever the restriction of the symmetries in G to the do- main of weak embeddings distributes over the product between symmetries, one can compute the restriction of the composition of symmetries to the domain of a weak embedding, in one or two steps, and get the same result.
Since fully specified site graphs are key elements in the definition of the states of the semantics. We have to assume that the symmetric of a fully specified site graph is a fully specified site graph which is the goal of the following definition.
Definition 3.6 Let G be a set of symmetries. We say that the symmetries in G preserve fully speciﬁed site graphs, if and only if, for any fully specified site graph E and any symmetry E ∈ GE , the site graph σE.E is fully specified as well.
Embeddings are crucial in the definition of computation steps, and we have to assume that the symmetric of an embedding is an embedding as well.
Definition 3.7 Let G be a set of symmetries. We say that the symmetries in G preserve embeddings, if and only if, for any embedding f and any symmetry σim(f ) ∈ G  , the weak embedding σim(f ).jjf is an embedding as well.
We can simultaneously apply a symmetry to the left hand side and a symmetry to the right of side of a partial embedding φ, providing that these symmetries have the same restriction over the domain of the partial embedding. Moreover, we need the set of pairs that can be applied to a partial embedding to form a group. That is why we assume in the following definition, that the set of pairs of symmetries that can be applied to a given partial embedding is stable upon pairwise product.
Definition 3.8 Let G be a set of symmetries. We say that the pairs of symme- tries in G over partial embeddings compose pairwise, if and only if, for any partial
embedding L ¸hL,rzD ,˛hR /R¸, any symmetries σL ∈ G , σj ∈ G , σR ∈ G , and
L	R
σj ∈ G  such that hL.jσL = hR.jσR and hL.jσj = hR.jσj , we have hL.j(σj ◦L σL)= 

R
hR.j(σj
R
R σR).
L	R	L

R
Lastly, we have to assume that the symmetric of a rule is a rule and that sym- metries preserve the existence of refinements. This is the purpose of the next two definitions.
Definition 3.9 Let G be a set of symmetries. We say that the symmetries in G preserve rules, if and only if, for any rule L ¸hL,rzD ,˛hR /R¸and any pair of symme- tries (σL, σR) ∈ GL × GR such that hL.σL = hR.σR, the weak partial embedding σL.L ¸σL,.hL rz(hR.σR).D ,˛σR.hR /σ¸R.R is also a rule.
Definition 3.10 Let G be a set of symmetries that preserve rules, we say that the symmetries in G preserve the existence of reﬁnements as well, if and only if, for any rule L ¸hL,rzD ,˛hR /R¸(that we denote by r), for any embedding hL′ between the site

graphs L and a site graph Lj, and for any pair of symmetries (σL′ , σR) ∈ GL
× GR

such that: (i) (hL′ hL).σL′ = hR.σR, (ii) there exist a rule rj and an embedding

hR′ such that the tuple (r, rj, hL′ , hR′ ) is a refinement, there exist a rule rj
and

an embedding hR′  such that the tuple (rσ, rj , σL′ .hL′ , hR′ ) is a refinement as well,

σ	σ	σ
¸(hL,′ .σL′ ).hL rz
,˛σR.hR /¸

where the rσ is defined as the rule (hL′ .σL′ ).L
(hR.σR).D
σR.R.

We are now ready to define the valid sets of symmetries as those which satisfy the additional assumptions that we have given in Definitions 3.4–3.10.
Definition 3.11 We say that a set of symmetries G is valid, if and only if, (i) the symmetries in G distribute over the composition of weak embeddings; (ii) the re- striction of the symmetries in G to the domain of weak embeddings distributes over the product between symmetries; (iii) the symmetries in G preserve fully specified site graphs; (iv) the symmetries in G preserve embeddings; (v) the pairs of sym- metries in G over partial embeddings compose pairwise; (vi) the symmetries in G preserve rules; (vii) the symmetries in G preserve the existence of refinements.
Now we give examples of valid sets of symmetries over site graphs.
Example 3.12 We consider an example in which symmetries consist of permuting the sites of each agent independently.
We assume that we are given a group of bijections S(A) of Σag-st(A) for any agent type A ∈ Σag. We define a set of symmetries G as follows: for any site graph F , let GF be the set of the functions which map each agent n ∈ AF into a bijection in S(typeF (n)) (product is defined component-wise). The symmetric σ.F of a site graph F by a symmetry σ ∈ GF is defined by injectively renaming the sites (n, i) of each agent n in F into the sites (n, (σ(n)(i))). Now we consider a weak embedding h between two site graphs E and F , that is induced by a function between the agents AE of E and the agents AF of F . The restriction h.jσ of a symmetry σ ∈ GF of the site graph F to the site graph E, is defined as the function mapping each agent n ∈ AE to the bijection σ(h(n)). The function h also induces a weak embedding between the site graph (h.jσ).E and the site graph σ.F , the symmetric of h with respect to σ is defined as this weak embedding.
In our running example, we can define S(A) as the set of two elements [x '→ x, y '→ y] and [x '→ y, y '→ x]. The three site graphs in Fig. 1, are the symmetric of one another with respect to this set of symmetries.
One can define new valid sets of symmetries as subsets of other ones. Let us consider ((GE, ◦E), ., .j, .jj) a valid set of symmetries. We assume that for any site graph G, we are given GG a subset of GG such that for any weak embedding f
between E and F , and any symmetry σ, σj ∈ G′ : (i) G′  = G	; (ii) σ ◦ σj ∈ G′ ;
F	F	σ.F	F
j	′	j jj
f. σ ∈ GE . Under these assumptions the tuple ((GE, ◦˜E),˜.,˜. ,˜. ) is a valid set
of symmetries as well (where for any operator  , ˜ denotes the restriction of the
operator   to the correct domain).
Example 3.13 We can restrict the set of symmetries of Exa. 3.12 so that, we cannot apply different site permutations to two agents of same type in a same


z 





z 



Fig. 7. A symmetry which cannot be extended to the image of an embedding (we consider as symmetries the ones of Exa. 3.13 that consist in applying the same site permutations to each agent with the same type in a same connected component).

connected component. With this subset of symmetries, only the first and the third site graphs in Fig. 1 are the symmetric of one another. The second site graph cannot be obtained from the first one, since it would require to swap the site of the first agent, but not the ones of the second agent.
Example 3.14 It is also possible to consider only the symmetries in which we cannot apply different permutations of sites with two agents of same type in the whole site graph.
In our framework, it is always possible to restricta symmetry that can be applied to the image of an embedding to its domain. Yet the opposite is not always true. We call G-forward compatible the embeddings f such that any symmetry in Gdom(f ) that can be applied to the domain of the embedding f , can be extended to a symmetry
which can be applied to the image of f . This notion is formalised in the following definition.
Definition 3.15 Let G be a set of symmetries over site graphs. Let h be an embedding. We say that h is G-forward compatible if and only if for any symmetry σ ∈ G   , there exists a symmetry σj ∈ G   such that σ = h.jσj.
We notice that any embedding is forward compatible with the set of symme- tries that is defined in Exa. 3.12. But in general, if an embedding h is G-forward compatible for a given set of symmetries G over site graphs, h is not necessarily
G -forward compatible for a subset G of G.
Example 3.16 We apply the set of symmetries of Exa. 3.13 in our running ex- ample. Thus, for each connected component, we can either swap the sites of each agent, or do nothing. We give in Fig. 7 an example of a symmetry over the domain of an embedding which cannot be extended to the image of this embedding. The point is that there are two connected components in the domain of the embedding which become connected in its image. We can apply different permutations to the two agents of the domain of the embedding, since they are not connected, but we cannot do it in the image, which prevents us from extending this symmetry to the image of the embedding.

Induced group actions
A valid set of symmetries induces group actions over the basic elements of the semantics of Kappa. We are going to give the list of them in this subsection. We introduce a valid set of symmetries G that we will use all along the subsection.
Def. 3.6 ensures that the image of a fully specified site graph E by a symmetry in GE is a fully specified site graph. Thus, the group action of symmetries over site graphs induces another group action over fully specified site graphs, as written in the following proposition.
Proposition 3.17 (. . . over fully specified site graphs) For a given fully spec-

iﬁed site graph E, the function mapping each pair (σj , Ej) ∈ GE
to the fully speciﬁed site graph σj .Ej, is a group action.
× {σ.E | σ ∈ GE}

Def. 3.7 ensures that the image of an embedding f by a symmetry in Gim(f ) is an embedding. Thus, the group action of symmetries over weak embeddings can be restricted to embeddings, as written in the the following proposition.
Proposition 3.18 (. . . over embeddings) For a given embedding h, the function

mapping each pair (σj
,fj) ∈ G
im(f )
× {σ.jjf | σ ∈ G
im(f )
} to the embedding

j
im(f )
.fj, is a group action.

The image of an isomorphism φ by a symmetry σ is also an isomorphism (by Def. 3.4, the inverse of the embedding σ.jjφ is the embedding (φ.jσ).jjφ—1). Thus, we can restrict the action of symmetries over embeddings to isomorphisms, as expressed in the following proposition.
Proposition 3.19 (. . . over isomorphisms) For a given isomorphism φ, the func-

tion mapping each pair (σj
, φj) ∈ G
im(φ)
×{σ.jjφ | σ ∈ G
im(φ)
} to the isomorphism

j
im(φ)
.jjφj, is a group action.

Applying symmetries to a rule consists in applying symmetries simultaneously to its left hand side and symmetries to its right hand side, provided that these symmetries agree on the symmetries to be applied to the domain on the rule. We define the set of pairs of symmetries that can be applied to a rule as follows.
Definition 3.20 Given a rule r : L ¸hL,rzD ,˛hR /R¸, we define the set G of the symmetries over the rule r as the set of pairs (σL, σR) in Glhs(r) × Grhs(r) such that hL.jσL = hR.jσR.
For any rule r, it follows from Def. 3.8 that the set Gr is stable upon pairwise product. Since, moreover, both groups Glhs and Grhs are finite groups, the set Gr is a finite group as well.
Definition 3.21 We define the symmetric of a rule r : L ¸hL,rzD ,˛hR /R¸by a pair of symmetries (σL, σR) ∈ Gr as the following partial embedding:


σ¸L.′′hL z	j
,σ˛R.′′hR

σL.L
, r(hL. σL).D
/σ¸R.R

and we denote it as (σL, σR).r.
It follows from Def. 3.9 that the symmetric of a rule is indeed a rule. We can then construct a group action over rules, as a restriction of the pairwise group action over their left and right embeddings.
Proposition 3.22 (. . . over rules) For a given rule r, the function mapping each pair (σj, rj) such that σj ∈ Gr and rj is a rule in the set {σ.r | σ ∈ Gr}, to the rule σj.rj, is a group action.
By Def. 3.4 and Def. 3.20, for any refinement (r, rj, hL′ , hR′ ) and any two sym- metries σL′ ∈ Glhs(r′) and σR′ ∈ Grhs(r′) such that (σL′ , σR′ ) ∈ Gr′ , the pair of symmetries (hL′ .jσL′ , hR′ .jσR′ ) belongs to the group Gr (this result is not direct and more details about the proof can be found in [14]). Thanks to this property, we can safely apply a pair of symmetries to a refinement, as formalised in the following definition:
j	Δ
Definition 3.23 Given a refinement (r, r , hL′ , hR′ ) and σr′ = (σL′ , σR′ ) a symme-
try in Gr′ , we call the symmetric of the reﬁnement (r, rj, hL′ , hR′ ) by the symmetry
σr′ the tuple (σr.r, σr′ .rj, σL′ .jjhL′ , σR′ .jjhR′ ), where the symmetry σr ∈ Gr over the
rule r is defined as the pair (hL′ .jσL′ , hR′ .jσh ′ ).
We denote this tuple as σr′ .(r, rj, hL′ , hR′ ).
Importantly, the symmetric of a refinement is a refinement as well, and applying symmetries to refinements is a group action. These results are formalised in the following theorems.
Theorem 3.24 (refinements preservation) Given a reﬁnement (r, rj, hL′ , hR′ ) and σr′ a symmetry in Gr′ , the symmetric σr′ .(r, rj, hL′ , hR′ ) of the reﬁnement (r, rj, hL′ , hR′ ) by the symmetry σr′ , is a reﬁnement as well.
Theorem 3.25 (induced group action over refinements) For a given rule r, the function mapping each pair (σj, (rj, rjj, hL′′ , hR′′ )) such that σj ∈ Gr, rjj is a rule in the set {σ.r | σ ∈ Gr}, and the tuple (rj, rjj, hL′′ , hR′′ ) is a reﬁnement, to the reﬁnement σj.(rj, rjj, hL′ , hR′ ), is a group action.
The proofs of Thm. 3.24 and Thm. 3.25 can be found in [14]. Intuitively, these theorems state that the symmetries of a valid set of symmetries are compatible with the operational semantics of Kappa.
Symmetries in rule-base models
In this section, we define symmetric models as those which are invariant by a set of symmetries and investigate their quantitative properties.
Symmetries among a set of rules
So as to define symmetric models properly, we have to be careful with rule isomor- phisms. Indeed, two isomorphic rules induce the same transformations over site

graphs. Thus, we do not want to distinguish them. In order to solve this issue, we consider rules in models modulo isomorphism.
Firstly, we give one definition (there are several equivalent ones) of isomorphism between rules.
Definition 4.1 Two rules r and rj are isomorphic if and only if there exist four em- beddings hL, hR, hL′ , and hR′ such that both tuples (r, rj, hL′ , hR′ ) and (rj, r, hL, hR) are refinements.
In such a case, we write r ≈ rj.
We notice that the relation ≈ is an equivalence relation over rules. Moreover, in Def. 4.1, when the rule r and rj are isomorphic, then each of the four embeddings is an isomorphism between site graphs.
Now we can define the equivalence among two models: two models are equivalent if they have the same overall rate for each isomorphism class of rules.
Definition 4.2 Two models M and Mj are said ≈-equivalent if and only if
Σ	kn (rj)= Σ	kn′ (rj),
for any rule r.
Then, we introduce an idempotent operator over models which symmetrises each models by replacing each rule with the set of its symmetrics, correcting the rate according to the loss/gain of symmetries and to the number of symmetric rules.
Definition 4.3 Let G be a valid set of symmetries over site graphs. We intro- duce the symmetrisation operator symG , which maps each model M to the model symG (M) that is defined by the following equation:





for any rule r.

ksymG (n)
Δ [lhs(r), lhs(r)]
(r) =
Card(Gr )
σΣ∈G
kn (σ.r)
,
[lhs(σ.r), lhs(σ.r)]

Symmetric models are those which are equivalent to their symmetrisation, as defined as follows.
Definition 4.4 We say that a model is symmetric with respect to a valid set of symmetries G if and only if the model M and the model symG (M) are ≈-equivalent.
Example 4.5 We wonder whether or not, the model that we had given in Fig. 4 is symmetric with respect to the set of symmetries that we had defined in Exa. 3.12. Following Def. 4.4, we apply each pair of permutations to the rules. There are only four pair of permutations, according to whether or not, we swap the sites x and y of the agent on the top, and whether of nor, we swap the sites x and y of the agent on the bottom. The action of these symmetries to the rules are summarised in Fig. 8. We have divided each rate by 4 and taken into account the gain/loss of symmetries in the left hand sides of rules. It follows that the sites x and y are symmetric in the


			

No site permuta- tion.
Permutation of the sites of the agent on the top.
Permutation of the sites of the agent on the bottom.
Permutation of the sites of both agents.

Fig. 8. Action of the four symmetries over the rules in Fig. 4.
agents of type A if and only if the following system of equations is satisfied:

k1	k3	k2	k2	k3	k1	k3	k1	k2	k1	k2	k3
k =	+	+	, k =	+	+	, k =	+	+	+	+	+	.

That is to say that the sites x and y are symmetric in the agents of type A if and only if the rates k1, k2, and k3 are equal.

Bisimulations induced by symmetries
Under appropriate assumptions, symmetries among models can be used to lump the set of states of the population semantics.
Firstly, we define the notion of states and transition labels modulo symmetries.
Definition 4.6 Let G be a valid set of symmetries over site graphs. Let q, qj be two states in Q. We say that the states q and qj are symmetric with respect to the symmetries in G and we write q ≈G qj if and only if there exist two site graphs M ∈ q and Mj ∈ qj, respectively in the ≈-equivalence class q and in the ≈-equivalence class qj such that M ≈G Mj.
The relation ≈G is an equivalence relation over the states of the population semantics.
Definition 4.7 Let G be a valid set of symmetries over site graphs. Let (r, C) and

(rj, Cj) be two transition labels in L. We say that the labels (r, C) and (rj, Cj) are symmetric with respect to
 ,¸,
 ,z, 



the symmetries in G and we write (r, C) ≈G
(r, Cj), if
σL′ .′′f

and only if, there exist an embedding f in C, an embed- ding fj in Cj, a pair of symmetries (σL′ , σR) in the set
f′  ,r,,
(f.′σL′ ,σR).r	 




Gim(f )
× Grhs(r)
such that (f.jσL′ , σR) ∈ Gr and two iso-	≈φ	ψ≈

morphisms φ and ψ such that: (i) (rj, (f.jσL′ , σR).r, φ, ψ) is a refinement; (ii) fj = (σL′ .jjf )φ.

r′	 
_ 

The relation ≈G is an equivalence relation over the transition labels of the pop- ulation semantics.

We notice that transition labels are quotiented according to two criteria. On the first hand, labels are seen modulo symmetries. On the second hand, since we cannot detect whether a model is symmetric without gathering the rules in isomorphic classes (see Def. 4.3), we consider rules modulo isomorphism.
Now we can quotient the population semantics by symmetries and see whether this quotient induces bisimulations, or not. For this we introduce the notion of flow between set of states in the following definition.
Definition 4.8 We define the flow flowc (X, Y, Xj) from a set of states X ⊆ Q into a set of states Xj ⊆Q via the transitions with labels in the set Y ⊆ L, weighted by a reward function ω between the sets Q and R+, as follows:
j  Δ
c	q∈X,q′∈X′,λ∈Y such that q—→λ q′
We now state the third theorem of the paper, as follows.
Theorem 4.9 (induced bisimulations) Let M be a model that is symmetric with respect to a valid set of symmetries G. The following two properties hold:
(forward bisimulation)If, for any reﬁnement (r, (f, g), hL′ , hR′ ) of a rule r such that kn (r) > 0, the embedding g is G-forward compatible, then, for any three states q, qj, qjj ∈Q such that q ≈G qj and any label λ ∈ L, we have:
flowc {q}, [λ]≈ , [qjj]≈  = flowc {qj}, [λ]≈ , [qjj]≈  ,
where ω maps each state to the value 1.
(back and forth bisimulation) If, for any reﬁnement (r, (f, g), hL′ , hR′ ) of a rule r such that kn (r) > 0, both embeddings f and g are G-forward compatible, then, for any three states q, qj, qjj ∈Q such that qj ≈G qjj and any label λ ∈ L, we have:
ω(qjj)flowc [q]≈ , [λ]	, {qj} = ω(qj)flowc [q]≈ , [λ]	, {qjj} ,
where ω maps each state [M ]≈ to the inverse of the number of automorphisms
[M, M ] in the site graphs in the ≈-equivalence class [M ]≈.
As discussed in [16], a forward bismulation induces a strong lumping of the states of the underlying Markov chain: whatever the initial distribution of states is, one can quotient the states of the systems modulo the equivalence relation ≈G and the quotient is still a Markov chain. A back and forth bisimulation ensures the existence of statistical invariants: if, at a given time t, for every states q, the conditional probability of being in the state q at time t knowing that we are in its ≈G-

equivalence class [q]≈G
is equal to the inverse of the sum Σ
[M (q),M (q)]
q′∈[q]≈G  [M (q′),M (q′)] , where

M (q) maps each state to an arbitrary fully specified site graph in the ≈-equivalence class q, then this is true at any time. If it is not the case and if additionally the set of states is directed (that is to say that there exists a state that is reachable from any

other state in zero, one, or several transition steps), then, as it is explained in [22], at the limit when the time goes towards the infinity, the conditional probabilities of being in a state q, knowing that we are in its ≈G-equivalence class [q]≈G , converges

towards the inverse of the sum Σ
[M (q),M (q)]


q′∈[q]≈G [M (q′),M (q′)]
where M (q) is defined as above.

Conclusion
In this paper, we have proposed an algebraic framework for detecting symmetries and lumping the population stochastic semantics accordingly. Our symmetries can also be used to lump the individual symmetries [17] and the differential semantics
[11] (we omit the details about it for the sake of conciseness, but more details can be found in [14]). Our framework can also be combined with other model reduction techniques [11,15,17,5] thanks to the techniques which are described in [6].
Our framework captures not only symmetries among sites, but also homogeneous symmetries when the same transformation has to be applied to all the agents of a given type in a same connected component, or in the whole site graph. In these cases, symmetries do not always induce bisimulations. A forward bisimulation is induced whenever any symmetry that can be applied to the domain of a refinement of a rule (in the model) can be extended to the right hand side of this refinement. If additionally, one can extend the symmetries that can be applied to the domain of a refinement of a rule to the left hand side of this refinement as well, then the induced bisimulation is indeed a back and forth bisimulation.
We have not investigated yet which syntactic criteria over the rules would ensure that symmetries over the domain of their refined rules can always be extended to their left hand side and/or their right hand side. It depends on the set of symmetries that is considered. We have not investigated either whether our notion of symmetry is also compatible with the double pushout semantics [12] of Kappa.
In this paper, we have focused on exact symmetries. It would be interesting to propose an approximate notion of symmetries and use bisimulation metrics [18] to compare the distributions of traces of the models which are nearly symmetric.

Acknowledgement
The author would like to deeply thank anonymous reviewers for their insightful comments and their very helpful suggestions to improve the quality of the paper.

References
Blinov, M. L., J. R. Faeder, B. Goldstein and W. S. Hlavacek, Bionetgen: software for rule-based modeling of signal transduction based on the interactions of molecular domains, Bioinformatics 20 (2004).
Buchholz, P., Exact and ordinary lumpability of finite Markov chains, Journal of Applied Probability
31 (1994).


Buchholz, P. and I. Tarasyuk, Net and algebraic approaches to probabilistic modeling, in: Joint Novosibirsk Computing Center and Institute of Informatics Systems Bulletin, Series Computer Science, 2001.
Camporesi, F. and J. Feret, Formal reduction of rule-based models, in: MFPS 2011, ENTCS 276C
(2011).
Camporesi, F., J. Feret and J. Hayman, Context-sensitive flow analyses: a hierarchy of model reductions., in: CMSB 1013, LNBI 8130 (2013).
Camporesi, F., J. Feret, H. Koeppl and T. Petrov, Combining Model Reductions, in: MFPS 2010, ENTCS 265 (2010).
Damgaard, T. C., E. Højsgaard and J. Krivine, Formal cellular machinery, in: SASB 2011, ENTCS
284, 2011.
Danos, V., J. Feret, W. Fontana, R. Harmer, J. Hayman, J. Krivine, C. Thompson-Walsh and
G. Winskel, Graphs, Rewriting and Pathway Reconstruction for Rule-Based Models, in: FSTTCS 2012, LIPIcs 18, 2012.
Danos, V., J. Feret, W. Fontana, R. Harmer and J. Krivine, Rule-based modelling, symmetries, refinements, in: FMSB 2008, LNCS 5054 (2008).
Danos, V., J. Feret, W. Fontana, R. Harmer and J. Krivine, Rule-Based Modelling and Model Perturbation, TCSB 5750 (2009), pp. 116–137.
Danos, V., J. Feret, W. Fontana, R. Harmer and J. Krivine, Abstracting the differential semantics of rule-based models: exact and automated model reduction, in: LICS 2010 (2010).
Danos, V., R. Harmer and G. Winskel, Constraining rule-based dynamics with types., MSCS (2013).
Danos, V. and C. Laneve, Formal molecular biology, TCS 325 (2004).
Feret, J., Abstract interpretations of rule-based modelling, hDR, in preparation.
Feret, J., V. Danos, J. Krivine, R. Harmer and W. Fontana, Internal coarse-graining of molecular systems, PNAS (2009).
Feret, J., T. Henzinger, H. Koeppl and T. Petrov, Lumpability abstractions of rule-based systems, TCS
431 (2012).
Feret, J., H. Koeppl and T. Petrov, Stochastic fragments: A framework for the exact reduction of the stochastic semantics of rule-based models, International Journal of Software and Informatics 7 (2014).
Ferns, N., P. Panangaden and D. Precup, Bisimulation metrics for continuous markov decision processes, SIAM J. Comput. 40 (2011).
Ferreux, E. and N. Morsli, Models of population migration in kappa, intership report, Frontiers in Life Science Bachelor Programme, First year, 2014.
John, M., C. Lhoussaine, J. Niehren and C. Versari, Biochemical reaction rules with constraints, in:
ESOP 2011, LNCS 6602 (2011).
Murphy, E., V. Danos, J. Feret, J. Krivine and R. Harmer, “Elements of Computational Systems Biology,” Wiley Book Series on Bioinformatics, J. Wiley & Sons, Inc., 2010 .
Petrov, T., A. Ganguly and H. Koeppl, Molecular Signaling - Model Decomposition and Stochastic Fragments, in: SASB 2011, ENTCS 284, 2011.
