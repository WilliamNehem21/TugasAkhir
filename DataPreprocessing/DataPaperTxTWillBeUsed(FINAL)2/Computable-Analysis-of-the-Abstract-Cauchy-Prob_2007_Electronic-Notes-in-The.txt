Electronic Notes in Theoretical Computer Science 167 (2007) 33–59	
www.elsevier.com/locate/entcs

Computable Analysis of the Abstract Cauchy Problem in a Banach Space and Its Applications (I)

Klaus Weihrauch1
Department of Mathematics and Computer Science University of Hagen
Hagen, Germany

Ning Zhong2
Department of Mathematical Sciences University of Cincinnati
Cincinnati, USA


Abstract
We study computability of the abstract linear Cauchy problem
du(t)/dt = Au(t),	u(0) = x ∈ X,	(1)
where A is a linear operator, possibly unbounded, on a Banach space X. We give necessary and sufficient conditions for A such that the solution operator K : x '→ u of the problem (1) is computable. For studying computability we use the representation approach to Computable Analysis developed by Weihrauch and others. This approach is consistent with the model used by Pour-El/Richards.
Keywords: computable analysis, partial differential equations, Cauchy problem



1 Email: klaus.weihrauch@fernuni-hagen.de
2 Email: Ning.Zhong@uc.edu




1571-0661 © 2007 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2006.08.006

Introduction

The study of numerical algorithms for solutions of differential equations of physics is central in numerical analysis. The numerical technology for solv- ing differential equations include finite-difference methods and finite-elements methods. The first method approximates a differential operator by a differ- ence quotient, while the second approximates the solution itself by functions that can be broken up into simple pieces. The aim is to find numerically stable algorithms that rapidly converge to the correct solution. But can such an algorithm be invented for every differential equation? In a more formal way, the question becomes whether or not it is always possible to compute physical processes modeled by differential equations. This question is studied in computable analysis, which is the study of computability and complexity of continuous problems based on Turing machines. In the context of computable analysis, the solution of a differential equation is computable if there is a Tur- ing machine (oracle or Type-2) that computes approximations converging to the solution from approximations to given parameters. Therefore, if a solu- tion is computable, then the existence of convergent algorithms for numerical solution is guaranteed. Moreover, proofs of computability usually give rise to Turing algorithms, although very intricate at times, these Turing algorithms may possibly be translated into numerical algorithms.
There have been many studies on computability of solutions of partial differential equations (PDEs) (see, for example, [1,2,4,5,8,7,12,14,13] and ref- erences therein). The majority of results obtained so far deal with individual equations, for example, linear heat, wave or Schr¨odinger equation, and the KdV equation. This may have to be the case for nonlinear equations, for dif- ferent nonlinear equations generally have little in common and they may have to be dealt with on a case-by-case basis. But how about linear PDEs? Is there any Turing algorithm that solves a class of linear PDEs? In this paper, we study the problem via semigroup theory. We show how to compute on Turing machines a semigroup, uniformly continuous or strongly continuous, from its infinitesimal generator and vise versa. Then, by making use of these construc- tions, we present two Turing algorithms for computing the solution operator of the initial-value problem of any linear parabolic equation, homogeneous or inhomogeneous.
Semigroup theory is the study of abstract Cauchy problems (also called initial-value problems) of first-order ordinary differential equations with values in Banach spaces, driven by linear, but possibly unbounded operators. An

abstract Cauchy problem can be written in the form of
, d u(t)= Au(t),	t > 0,
⎨ dt

,,, u(0) = x,




(2)

where X is a Banach space and A Σ: X → X a linear operator. The initial-

X = L2(R3), then the problem (2) is the initial-value problem of the heat equation
du	∂2u	∂2u	∂2u	3

dt = ∂x2 + ∂x2 + ∂x2 , x ∈ R
& t > 0, u(0) = f ∈ X.

1	2	3
Here A is a linear but unbounded operator. Or if A = i Σ3	∂2/∂x2, i =
1, then the problem (2) corresponds to the initial-value problem of the Schr¨odinger equation
du	 ∂2u	∂2u	∂2u	3

dt = i	∂x2 + ∂x2 + ∂x2
, x ∈ R
& t > 0, u(0) = f ∈ X.

1	2	3
Again A is unbounded on L2(R3). By Pour-El and Richards’ First Main Theorem [9], A is uncomputable in the sense that there exist computable functions f  X, (weakly) twice differentiable, such that Af = A(f ) X are not computable.
The main question studied classically regarding the abstract Cauchy prob- lem (2) is the following one: Under what conditions on A, does (2) admit a unique solution? This problem has been well studied. It is known that if A is the infinitesimal generator of a uniformly (resp. strongly) continuous semigroup W (t), t ≥ 0, of bounded linear operators, W (t) : X → X, then
(2) admits a unique (resp. mild) solution u(t) for every x  X and this solu-
tion can be written as u(t) = W (t)x. In such cases, if one can compute the semigroup W (t) from A, then one can compute the solution of (2). What in- formation on A are needed to compute W (t) and vice versa is a main concern of the present paper.
The paper is organized as follows. In Section 2, we briefly review some ba- sic definitions and facts related to C0 semigroups of bounded linear operators in Banach spaces. In Section 3, we introduce the model for computation and related definitions. In Section 4, we show how to compute a uniformly contin- uous semigroup from its bounded linear infinitesimal generator and vice versa.

In Section 5, several Turing algorithms are constructed to compute strongly continuous semigroups and analytic semigroups from their infinitesimal gen- erators. In Section 6, two Turing algorithms are presented for computing the solution operators of linear parabolic equation, homogeneous or inhomoge- neous.

Infinitesimal Generators
In this section, we summarize some definitions and facts regarding semigroups. The reader is referred to [6] for more details. Let X be a Banach space. A one parameter family W (t), 0  t <  , of bounded linear operators from X to X is called a semigroup of bounded linear operators on X if
W (0) = I (I is the identity operator on X),
W (t + s)= W (t)W (s) for every t, s ≥ 0 (the semigroup property). The linear operator A defined by



and
dom(A)= x	X :  lim
t→0+
W (t)x − x exists
t

Ax = lim
t→0+
W (t)x − x =
t
d+
W (t)x
dt	t=0
(3)

for x dom(A) is called the infinitesimal generator of the semigroup W (t). A semigroup W (t), t  0, of bounded linear operators on X is called uniformly continuous if

lim
t→0+
 W (t) − I  = 0.	(4)

The following theorems reveal the relationship between a uniformly continuous semigroup W (t) and its infinitesimal generator A.
Theorem 2.1 A linear operator A is the inﬁnitesimal generator of a uni- formly continuous semigroup W (t), t  0, if and only if A is a bounded linear operator.
Theorem 2.2 Let W (t), t  0, be a uniformly continuous semigroup of bounded linear operators. Then
there exists a constant ω ≥ 0 such that
 W (t)  ≤ eωt	for any t ≥ 0,
there exists a unique bounded linear operator A such that W (t)= eAt,

the operator A in part (b) is the inﬁnitesimal generator of {W (t)}t≥0,
the map t → W (t) is differentiable in norm and
d
W (t)= AW (t)= W (t)A.
dt
A semigroup W (t), t ≥ 0, of bounded linear operators on X is called a
strongly continuous semigroup or a C0 semigroup, if
lim W (t)x = x	for every x	X.	(5)
t→0+
The resolvent set ρ(A) of a linear operator A is the set of all complex numbers β for which βI  A is invertible, i.e., R(β, A) := (βI  A)−1 : X  X is a bounded linear operator.
The following two theorems show the relation between the semigroup and its infinitesimal generator, which is one of the fundamental problems in the theory of semigroups of operators.
Theorem 2.3 For θ ≥ 0 and M ≥ 1, a linear operator A is the inﬁnitesimal generator of a C0 semigroup W (t) satisfying ||W (t)|| ≤ Meθt, if and only if
A is a closed map and dom(A) is dense in X,
the resolvent set ρ(A) of A contains the interval (θ, ∞) and

R(λ, A)n
M
≤ (λ − θ)n	for λ > θ, n = 1, 2 ··· 

For convenience we call a triple (A, θ, M ) a piece of type-IG information for A (IG refers to “infinitesimal generator”), if the conditions 2.3.i and 2.3.ii hold for (A, θ, M ). Theorem 2.3 shows that a piece of type-IG information for A is necessary and sufficient for A to be the infinitesimal generator of a C0 semigroup.
Theorem 2.4 Let W (t), t  0, be a C0 semigroup of bounded linear operators with the inﬁnitesimal generator A. Then
there exist constants θ > 0 and M ≥ 1 such that
θt
W (t) ≤ Me	for 0 ≤ t < ∞.
for every x ∈ X, t → W (t)x is a continuous function from [0, ∞) into
for every x ∈ dom(A), W (t)x ∈ dom(A) and
d
W (t)x = AW (t)x = W (t)Ax.
dt

for every x ∈ dom(A),
W (t)x − W (s)x =


t
W (τ )Axdτ =
s



t
AW (τ )xdτ.
s

A C0 semigroup W (t) can be constructed from its infinitesimal generator
A as follows:
W (t)x = lim etAλ x,	x	X,	(6)
λ→∞
where Aλ, for every λ > θ, is the Yosida approximation defined by Aλ =
λAR(λ, A). Notice that
Aλ = λAR(λ, A)= λ2R(λ, A) − λI	and	(7)
Aλx = λR(λ, A)Ax	for x ∈ dom(A) .	(8)

Computability on Banach Spaces
In this article, we use the representation approach to study computability in analysis and differential equations (TTE) [10]. In TTE “concrete” com- putability on the set Σ∗ of finite words and the set Σω of infinite sequences of symbols from a finite alphabet Σ is defined explicitly by means of Turing machines. Computable functions are continuous w.r.t the discrete topology on Σ∗ and Cantor topology on Σω. As usual we use canonical tupling func- tions  mapping finite or infinite tuples of elements from Σ∗ or Σω injectively to Σ∗ or Σω. These functions as well as the projections of their inverses are computable [10].
Computability on abstract sets M is introduced by notations ν : ⊆ Σ∗ → M or representations δ : ⊆ Σ → M where finite or infinite sequences of symbols, respectively, are used as names of the “abstract” points x ∈ M. For given naming systems γi : ⊆ Yi → Mi, Yi ∈ {Σ∗, Σω} for i = 0, 1,..., n, a multi-function f :  M1  ...  Mn   M0 is (γ1,... , γn, γ0)-computable (-continuous, respectively), if there is a computable (continuous, respectivey) function h : ⊆ Y1 × ... × Yn → Y0 (called a realization of f ) such that γ0 ◦ h(y1,... yn) ∈ f (x1,... , xn) whenever (γ1(y1),... , γn(yn)) = (x1,... , xn) ∈ dom(f ). Reducibility and equivalence are defined by γ1 ≤ γ2, iff M1⊆M2 and the identity mapping is (γ1, γ2)-computable, and γ1 ≡ γ2 iff γ1 ≤ γ2 and γ2 γ1. Naming systems induce the same computability, iff they are equivalent.
For many familiar spaces studied in analysis there are canonical nam- ing systems. Let νN : ⊆ Σ∗ → N be some standard notation of the nat- ural numbers and let ρ : ⊆ Σ  → R be the Cauchy representation of the real numbers [10].  The canonical product of γ1 and γ2 is defined by

[γ1, γ2]⟨y1, y2⟩ := (γ1(y1), γ2(y2)). A function is (γ1, γ2, γ0)-computable , iff it is ([γ1, γ2], γ0)-computable. There is also a canonical representation [γ1 → γ2] of the set of (γ1, γ2)-continuous functions f : M1 → M2. The representation [γ1 → γ2] admits evaluation and type conversion as follows:
Lemma 3.1 (type conversion [10]) Let δi : ⊆ Σω → Mi (i = 1, 2, 3) be representations. For any function f : M1 × M2 → M3 deﬁne T (f ) : M1 →
M2 by T (f )(x)(y) := f (x, y). Then
T ◦ [[δ1, δ2] → δ3] ≡ [δ1 → [δ2 → δ3]] .	(9)
In particular, f is ([δ1, δ2], δ3)-computable, iff T (f ) is (δ1, [δ2 → δ3])- computable. For δ1 = [δ2 → δ3] we obtain that the evaluation function ev : (f, x) '→ f (x) is ([[δ2 → δ3], δ2], δ3)-computable, hence ([δ2 → δ3], δ2, δ3)- computable.
For γ : ⊆ Y → X the representation [γ]ω of the set Xω of sequences on X
is defined by γ⟨y0, y1, y2,.. .⟩ := (γ(y0), γ(y1), γ(y2),.. .). We have
[γ]ω ≡ [νN → γ] .	(10)
Definition 3.2 [Computable metric space [10]] A tuple (X, d, D, α) is called a computable metric space if
d : X × X → R is a metric on X and D is a dense set in X,
α : ⊆Σ∗ → D is a notation with recursive domain,
the restriction of d to D × D is (α, α, ρ)-computable.
The Cauchy representation δX :⊆ Σω → X of a computable metric space (X, d, D, α) is defined as follows: δX(p)= x	p = w0, w1, w2 .. . , (wi dom(α) such that
d(x, α(wi)) ≤ 2−i  (for all i ∈ N) .
Thus, a Cauchy name p  Σω of an x  X encodes a sequence in the dense set D that converges to x rapidly.
For a continuous function between computable metric spaces a modulus of continuity at a point can be computed. The following lemma generalizes Lemma 6.2.8 in [10], see also [11].
Lemma 3.3 (modulus of continuity) For computable metric spaces X
and Y  with Cauchy representations δX and δY , respectively, the function
MOD : (f, x, m) |⇒ k mapping every continuous function f : X → Y , ev- ery x ∈ X and every m ∈ N to some k ∈ N such that d(f (x),f (y)) ≤ 2−m if d(x, y) ≤ 2−k is ([δX → δY ], δX, νN, νN)-computable.

The main theorems in this article will be proved for computable Banach spaces which are special computable metric spaces.

Definition 3.4 [Computable Banach space [9]] A tuple = (X,  , D, α) is called a computable Banach space if
(X, || ||) is a Banach space,
(X, d, D, α) such that d(x, y)= ||x − y|| is a computable metric space,
with respect to the representation ρ of R and the Cauchy representation δX of X, addition (x, y) → x + y and scalar multiplication (a, x) → ax are computable operations.

In many applications there is a canonical effective generating set [9] e : N  X such that the rational linear span D of its range is dense in X. In such case, usually a “good” notation α of D can be constructed from the numbering e canonically.
In the following B = (X, || ||, D, α) will be a fixed computable Banach space with Cauchy representation δX. The limit of rapidly converging sequences on B is computable (Exercise 8.1.8 in [10]):

Lemma 3.5 The function Lim : ⊆ Xω → X such that Lim((xi)i∈N)= x ⇐⇒ (∀i) ||x−xi|| ≤ 2−i is ([δX]ω, δX)-computable (and equivalently ([νN → δX], δX)- computable).

Since the representation δX : ⊆ Σω → X is admissible, a function f :
X  X is continuous, iff it is (δX, δX)-continuous. Therefore, the standard representation [δX  δX]:  Σω  C(X, X) is a representation of the set of all continuous functions from X to X. In particular, it represents the linear continuous functions.
We define a representation δG of the set LCG of linear operators on B with non-empty closed graph as follows:

δ (p)= A : ⇐⇒ ,⎨ there are pi, qi ∈ dom(δX) such that p = ⟨p0, q0, p1, q1,.. .⟩
, and {(δX (pi), δX(qi)) | i ∈ N} is dense in graph(A)

Thus a δG-name of A ∈ LCG is a list of a dense set in its graph. Similarly, we

also define a representation δGG of the set LCG × LCG as follows:




δGG

= (A, B): ⇐⇒
,, p = ⟨p0, q0, r0, p1, q1, r1,.. .⟩,
{(δX(pi), δX(qi)) | i ∈ N} is dense in graph(A),
,, and{(δX(pi), δX(ri)) | i ∈ N} is dense in graph(B)

From a [δX → δX]-name of a continuous linear operator A, an upper bound of its operator norm A = supx  =1 f (x) and a dense subset of its graph can be computed. On the other hand, for a continuous linear operator A : X → X, its values on a dense set and an upper bound of its norm are sufficient to compute Ax for all x ∈ X, i.e., to find a [δX → δX]-name.
Lemma 3.6 For continuous linear functions A : X → X,
The multi-function A |⇒ b such that ||A|| ≤ b is ([δX	→ δX], ρ)- computable.
the function A '→ A is ([δX → δX], δG)-computable
the function (A, b) '→ A for ||A|| ≤ b is (δG, ρ, [δX → δX])-computable,
Proof.  i. Apply Lemma 3.3 to (A, 0, 0), from A we can compute some k ∈ N
such that ||x|| ≤ 2−k implies ||Ax|| = ||Ax − A0|| ≤ 2−0 = 1, hence ||A|| ≤ 2k.
The set {(x, Ax) | x ∈ range(α)} is dense in graph(A). Since dom(α) is recursive and α ≤ δX, we can easily compute a δG-name from a [δX → δX]- name of A.
Let δG(p)= A and p = ⟨p0, q0, p1, q1,.. .⟩. Since the set
{(δX(pi), δX(qi)) | i ∈ N} is dense in graph(A), for any x (given by a δX-name) we can find some i such that ||x − δX(pi)|| < 2−i/b. Then
||Ax − δX(qi)|| = ||Ax − AδX(pi)|| ≤ ||A||||x − δX(pi)|| ≤ 2−i .
Therefore, the multi-function (A, b, x) |⇒ (yi)i∈N such that Ax = Lim(yi)i∈N is (δG, ρ, δX, [δX]ω)-computable, where yi = δX(qi). By Lemma 3.5, the function
(A, b, x) '→ Ax is (δG, ρ, δX, δX)-computable. Apply the type conversion lemma 3.1.
In the following we will use the fixed naming systems νN for the natural numbers, ρ for the real numbers, ρ+, the restriction of ρ to the set of non- negative real numbers, for real “time” t ≥ 0, δX for the Banach space B, [δX → δX] for bounded linear (continuous linear) operators on X, δG for (unbounded) linear operators on X with non-empty closed graph and δS :=

[ρ+ → [δX → δX]] for the C0 semigroups of bounded linear operators W (t), t ≥ 0. Occasionally, we will say “computable” instead of (δ,.. .)-computable if no misunderstanding is possible. Recall that an operator is called computable if there is a Turing machine that translates input names to output names. For example, when we say that the operator A  W mapping every linear bounded operator A to its generated uniformly continuous semigroup W is ([δX → δX], δS)-computable, it is meant that there is a Turing machine that translates every [δX → δX]-name of A to a δS-name of W .

Uniformly Continuous Semigroups
In this section, we show how to compute a uniformly continuous semigroup
W (t) from its infinitesimal generator A and vice versa.
Since W is uniformly continuous, there is some k such that ||W (t) − I|| ≤ 1/2 for 0 ≤ t ≤ 2−k. We will use such a number k for computing A from W . Since we do not yet know whether such a number k can be computed from W in general we add it as a portion of information to W .
Theorem 4.1 (i) The operator S : A |⇒ (W, k), mapping every continuous linear operator A to its generated uniformly continuous semigroup W and some k such that ||W (t) − I|| ≤ 1/2 for 0 ≤ t ≤ 2−k, is ([δX →
δX], [δS, νN])-computable.

(ii) The operator S : (W, k) '→ A, mapping every uniformly continuous semi- group W and every k ∈ N such that ||W (t) − I|| ≤ 1/2 for 0 ≤ t ≤ 2−k to its inﬁnitesimal generator A, is ([δS, νN], [δX → δX])-computable.
Proof.  i. By Lemma 3.6.ii from A we can compute some b ∈ N such that
||A|| ≤ b. Then, from A, b, a real number t ≥ 0, a point x ∈ X and a number k ∈ N we will compute some yk ∈ X such that ||etAx − yk|| ≤ 2−k. For this purpose, find a number j ∈ N such that


2 · t · b ≤ j and
(t b)j
j!	||x|| ≤ 2
−k−1
and compute yk :=
(tA)i
x. 
i!
i<j



For each k we have
||etAx − y || = || Σ

(tA)i x|| ≤ Σ



(t||A||)i ||x||

≤ Σ	(t·b)i ||x|| ≤ (t·b)j ||x|| Σ∞
( t·b )l

≤	2−k−1 · 2	= 2−k .

Since the evaluation ev : (A, x) '→ Ax is computable w.r.t. the represen- tation [δX → δX], the multi-function (“multi” since j cannot be computed uniquely) (A, t, x, k) |⇒ yk is ([δX  → δX], ρ+, δX, νN, δX)-computable.  Using
Lemma 3.1 we conclude that the multi-function (A, t, x) |⇒ (yk)k∈N is ([δX →
δX], ρ+, δX, [νN → δX])-computable.  Since ||etAx − yk|| ≤ 2−k by Lemma
3.5 the function (A, t, x) '→ etAx is ([δX → δX], ρ+, δX, δX)-computable. By Lemma 2.2.ii and 2.2.iii, W (t)x = etAx.  Thus (A, t, x) |⇒ W (t)x is ([δX → δX], ρ+, δX, δX)-computable. Applying type conversion twice we ob-
tain that A '→ W is ([δX → δX], δS)-computable.
It remains to show that some appropriate k can be computed from A. From A we can compute some upper bound b of ||A|| by Lemma 3.6 and from b some k ∈ N such that 2−k ≤ 1/(4b). Then for 0 ≤ t ≤ 2−k,

Σ (tA)i	Σ	i	Σ  1	1

||W (t) − I|| = ||

i≥1
i!	|| ≤

i≥1
||(tA) || ≤

i≥1
4i < 2 .



ii. On the other hand, assume ||W (t) − I|| ≤ 1/2 for t ≤ 2−k. First we will show ||A|| ≤ 2k. We obtain


||I − 2
2−k


0
W (s) ds|| = 2k||
2−k


0
(I − W (s)) ds||

2−k
2
0
||I − W (s)|| ds





k ∫ 2−k
1
≤ 2 · 2 ·
2−k	= 1 .
2
−1

Let B := 2
0	WΣ(s) ds. Since B is continuous and ||I − B|| ≤ 1/2, B	=

−k	∫ 2−k	−1



||A|| ≤ 1/2 · ||(2−kB)−1|| = 1/2 · ||2kB−1|| ≤ 1/2 · 2k · 2= 2k.


We will compute A from W using (3). Since W (t)(x)= etAx, for ||x|| ≤ 2l and t ≤ 2−2k−l−n−1,

W (t)x − x	1 Σ (tA)i

||	t	− Ax|| = || t

i≥2
2 Σ
i!	x||
(tA)i

= ||tA

i≥0
(i + 2)! x||

≤ 2−2k−l−n−1
· 2
i≥0
(1/2)i
2l
(i + 2)!

< 2−n .
First, from W , k, x and n compute some l such that ||x|| ≤ 2l and then yn := (W (2−2k−l−n−1)x − x) · 22k+l+n+1. Then ||yn − Ax|| ≤ 2−n. Since evaluation is computable w.r.t. representations [ . → .], the multi-function (W, k, x) |⇒ (yn)n is (δS, νN, δX, [ν → δX])-computable.  By Lemma 3.1 the
function (W, k, x) '→ Ax is (δS, νN, δX, δX)-computable. Again by type con-
version, the operator (W, k) '→ A for ||W (t) − I|| ≤ 1/2 if t ≤ 2−k is (δS, νN, [δX → δX])-computable.	 
As a special case of Theorem 4.1, the solution operator of the Cauchy problem du(t)/dt = Au(t), t > 0, and u(0) = x is computable from A and x for bounded linear operator A.
Corollary 4.2 Assume that A : X → X is a bounded linear operator. Then the solution operator S : (A, x) '→ u of the Cauchy problem du(t)/dt = Au(t), t > 0, and u(0) = x, is ([δX → δX], δX, [ρ → δX])-computable.
Proof. Since u(t) = W (t)x, where W (t), t  0, is the uniformly continu- ous semigroup generated by A, by Theorem i, W can be computed from A. Consequently, u can be computed from A and x.	 

C0 Semigroups
Throughout this section we assume that B = (X, || ||, D, α) is a computable Banach space and A : ⊆ X → X an unbounded linear operator. For any piece of type-IG information (A, θ, M ) for A, if in addition a δG-name of A (a code for a countable dense subset in the graph of A), a ρ-name of θ (a code for a rational sequence rapidly convergent to θ) and a ρ-name of M are available, (A, θ, M ) will be referred as a piece of type-IG data for A. One of the main results in this section is a computable version of Theorem 2.3, which shows that a piece of type-IG data is sufficient to compute the C0 semigroup generated by A. To prove this result we will need several lemmas.
Lemma 5.1	(i) The function F1 : (A, θ, M, λ)	B, where (A, θ, M )
is a piece of Type-IG information, λ  >  θ and B  = R(λ, A), is

(δG, ρ, ρ, ρ, [δX → δX])-computable.
The function (R(λ, A), λ) '→ A for continuous R(λ, A) and λ > 0 is
([δX → δX], ρ, δG)-computable.
Proof. For any x, y ∈ X, (x, y) ∈ graph(A) ⇐⇒ (λx − y, x) ∈ graph(λI − A)−1. On X × X we consider the maximum distance d((x, y), (x', y')) = max(||x − x'||, ||y − y'||).
Suppose, {(xi, yi) | i ∈ N} is dense in graph(A). Consider ε > 0 and (w, x) ∈ graph(λI − A)−1. Then (x, λx − w) ∈ graph(A) and for some i, d((x, λx − w), (xi, yi)) < ε/(λ + 1), hence ||x − xi|| < ε/(λ + 1) and ||λx − w − yi|| < ε/(λ + 1). We obtain
d((w, x), (λxi − yi, xi)) = max(||λxi − w − yi||, ||x − xi||)
≤ max(λ||xi − x|| + ||λx − w − yi||, ||x − xi||)
< ε.
Therefore, {(λxi − yi, xi) | i ∈ N} is dense in graph(λI − A)−1. From this we can conclude that the function (A, λ) '→ R(λ, A) is (δG, ρ, δG)-computable. Since ||R(λ, A)|| ≤ M/(λ − θ), by Lemma 3.6 we can compute a [δX → δX]- name of R(λ, A) from (A, θ, M, λ).
Since {α(i) | i ∈ N} is dense in X and R(λ, A) is continuous,
(α(i), R(λ, A) α(i)) i	is dense in graph(R(λ, A)). As above from this set we can compute a countable set dense in graph(A).	 
Lemma 5.2 Deﬁne a multi-function F3 such that N ∈ F3(A, θ, M, x, T, k), iff (A, θ, M ) is a piece of type-IG information, x ∈ X, T > 0, k ∈ N, and
||W (t)x − W (s)x|| ≤ 2−k if s, t ≤ T and |t − s| ≤ 2−N , where W (t) is the C0
semigroup generated by A. Then F3 is (δG, ρ, ρ, δX, νN, νN, νN)-computable.
Proof. By Thm. 2.4.iv for s, t ≤ T and x ∈ dom(A),
∫ t
||W (t)x − W (s)x|| = ||	W (τ )Axdτ || ≤ Me	||Ax|| |t − s| .
For x ∈ X and y ∈ dom(A),
||W (t)(x) − W (s)(x)|| ≤ ||(W (t) − W (s))(y)|| + ||(W (t) − W (s))(x − y)||
Tθ	θT

≤ Me	||Ay|| |s − t| + 2Me 
||x − y||.

For given A, M, θ, x, T, k, where A is given by some δG-name
p = ⟨p0, q0, p1, q1,.. .⟩, first select some i such that 2MeθT ||x− δX(pi)|| ≤ 2−k−1 and then some N such that MeTθ||δX(qi)|| · 2−N ≤ 2−k−1. Such a number i

exists since dom(A) is dense in X. Notice that AδX(pi) = δX(qi). Then
||W (t)(x) − W (s)(x)|| ≤ 2−k if |t − s| ≤ 2−N .	 
Lemma 5.3 Deﬁne a multifunction F4 such that l ∈ F4(A, θ, M, x, k), iff (A, θ, M ) is a piece of type-IG information, x ∈ X, k ∈ N, and ||λR(λ, A)x − x|| ≤ 2−k for λ ≥ l. Then F4 is (δG, ρ, ρ, δX, νN, νN)-computable.
Proof. Since λR(λ, A) − I)a = R(λ, A)Aa for a ∈ dom(A), for any x ∈ X, a ∈ dom(A) and λ > 2θ,
||λR(λ, A)x − x|| ≤ ||(λR(λ, A) − I)a|| + ||(λR(λ, A) − I)(x − a)||
= ||R(λ, A)Aa|| + ||(λR(λ, A) − I)(x − a)|| M
≤ λ	θ ||Aa|| + ||λR(λ, A) − I||||x − a||
M
≤ λ − θ ||Aa|| + (||λR(λ, A)|| + 1)||x − a||

M
≤ λ − θ ||Aa|| +( 
λM
— θ + 1)||x − a||

λ
M
≤ λ − θ ||Aa|| + (2M + 1)||x − a|| .
For given (A, θ, M, λ, x, k) where A is given by some δG-name p  =
⟨p0, q0, p1, q1,.. .⟩, first select some i such that (2M + 1)||x − δX(pi)|| ≤ 2−k−1 and then choose some l such that l > 2θ and (M/(l − θ))||δX(qi)|| ≤ 2−k−1 (notice that AδX(pi)= δX(qi)). Then ||λR(λ, A)x − x|| ≤ 2−k for λ ≥ l. 
We can now prove our computable version of Theorem 2.3.

Theorem 5.4 (i) The operator Q : (W, θ, M) '→ A mapping every C0 semi- group W (t) and constants θ ≥ 0 and M ≥ 1 such that ||W (t)|| ≤ Meθt to its inﬁnitesimal generator A is (δS, ρ, ρ, δG)-computable.
(ii) The operator Q : ⊆ (A, θ, M ) '→ W mapping every piece of type- IG information (A, θ, M ) to the C0 semigroup W (t) generated by A is (δG, ρ, ρ, δS)-computable.
Proof. i. As mentioned in the proof of Theorem 2.3 [6],
R(λ, A)x =	∞ e−λtW (t)xdt
0
for every λ > θ. As a straightforward generalization of Thm. 6.4.1 in [10] the operator I : (f, a, b) '→  b f (x) dx for continuous f : [0; ∞) → X and a, b ≥ 0 is ([ρ+ → δX], ρ, ρ, δX)-computable.

Since (W, t, x) '→  W (t)x is (δS, ρ+, δX, δX)-computable, the function
(W, λ, x) '→ (t '→ e−λtW (t)x) is (δS, ρ, δX, [ρ+ → δX])-computable and
therefore, (W, λ, x, a, b) '→ ∫ b e−λtW (t)xdt is (δ , ρ,δ  , ρ,ρ ,δ  )-computable.
a	S	X	+	X

Since ||W (t)|| ≤ Meθt, for any 0 < a < b,

b
||	e−λtW (t)xdt|| ≤

b
Me−(λ−θ)t||x|| dt =

M||x|| λ − θ

b
e−(λ−θ)t	.
a

For k ∈ N and W, θ, M, λ, x find a number T ∈ N such that M||x||e−(λ−θ)T <

T
2−k and determine yk :=	e−λtW (t)xdt. The multi-function
λ−θ

(W, θ, M, λ, x, k) |⇒ (yk)k∈N is computable and
||yk − R(λ, A)x|| = || ∫	e−λtW (t)xdt|| ≤	e−(λ−θ)T < 2−k .
∞	M||x||

By Lemma 3.5, (W, θ, M, λ, x) '→ R(λ, A)x is computable and by Lemma 3.1, the function (W, θ, M, λ) '→ R(λ, A) is (δS, ρ, ρ, [δX → δX])-computable. As a next step of computation for θ find some λ   such that θ < λ. Therfore, Q is computable.
ii. We consider the three cases (M = 1 and θ = 0), (M ≥ 1 and θ = 0) and (M ≥ 1 and θ ≥ 0.
Case 1: (M =1 and θ = 0)
We will apply (6), W (t)x = limλ→0+ eλAλ x, to compute W from A. By Theo- rems 2.3 and 2.4,
1
||W (t)|| ≤ 1 and ||R(λ, A)|| ≤ λ for λ > 0 .	(11)
For the Yosida approximation Aλ by (7) we obtain
||etAλ || = e−tλ||etλ2R(λ,A)|| ≤ e−tλetλ2||R(λ,A)|| ≤ 1.	(12) For any λ > 0 and μ > 0, it is clear from the definitions that etAλ , etAμ ,
Aλ and Aμ commute with each other and consequently, for any a ∈ dom(A),

1  d
etAλ a − etAμ a = ¨

(etsAλ et(1−s)Aμ a)ds¨

0 ds
1
t  etsAλ et(1−s)Aμ (Aλa	Aμa)  ds
0
1
t||etsAλ ||||et(1−s)Aμ ||||Aλa − Aμa||ds	(13)
≤ t||Aλa − Aμa||.	(14)
Now for every x ∈ X and any a ∈ dom(A) by (8), (12) and (13),

tAμ
||e	x − e	x||	(15)
= ||etAλ (x − a)+ etAμ (a − x)+ (etAλ − etAμ )a||
≤ ||etAλ (x − a)|| + ||etAμ (a − x)|| + ||(etAλ − etAμ )a||
≤ ||etAλ ||||(x − a)|| + ||etAμ ||||(a − x)|| + t||Aλa − Aμa||
≤ 2||x − a|| + t||Aλa − Aμa||
≤ 2||x − a|| + t||λR(λ, A)Aa − μR(μ, A)Aa||
≤ 2||x − a|| + t||λR(λ, A)Aa − Aa|| + t||μR(μ, A)Aa − Aa|| .
Next, from (A, t, x, k) we compute some yk ∈ X such that ||yk − W (t)x|| ≤ 2−k. Let A be given by some δG-name ⟨p0, q0, p1, q1,.. .⟩. Since dom(A) is dense in X we can find some i such that
||x − δX(pi)|| ≤ 2−k−2 .	(16)
Notice that AδX(pi) = δX(qi). By Lemma 5.3 we can compute some l	N
such that
t||λR(λ, A)δX(qi) − δX(qi|| ≤ 2−k−2	(17) for λ ≥ l. From (15) with a := δX(pi) we obtain ||etAλx − etAμ x|| ≤ 2−k for
λ, μ ≥ l and therefore,
||etAlx − W (t)x|| ≤ 2−k .
Next we compute yk := etAl x from (A, t, x, k). By Lemma 5.1 the function (A, λ) '→ R(λ, A) is (δG, ρ, [δX → δX])-computable (by assumption, θ = 0 and M = 1), therefore, (A, λ) '→ λ2R(λ, A) − λI = Aλ is (δG, ρ, [δX → δX])-computable. In Theorem 4.1 we have proved that (B, t, x) '→ etBx is ([δX → δX], ρ+, δX, δX)-computable. We conclude that the function (A, λ, t, x) '→ etAλ x is (δG, ρ, ρ+, δX, δX)-computable. Therefore, from (A, t, x) we can compute a sequence (yk)k∈N such that ||yk − W (t)x|| ≤ 2−k. By Lemma 3.5 we can compute its limit W (t)x. Therefore (A, t, x) '→ W (t)x is (δG, ρ+, δX, δX)-computable. By type conversion (Lemma 3.1) (A, t) '→ W (t) is (δG, ρ+, [δX → δX])-computable, and again by type conversion, A '→ W is (δG, [ρ+ → [δX → δX]])-computable, that is, (δG, δS)-computable.
Case 2: (M ≥ 1 and θ = 0)
In this case, we will introduce a new norm on the space X, denoted as  new. This norm is equivalent to the original norm  but it rescales M back to 1. Define
||x||new = sup ||W (t)x||.

Since ||W (t)|| ≤ Meθt = M,
||x|| ≤ ||x||new ≤ M||x||	(18)

Thus, || · ||new indeed is a norm on X and it is equivalent to the original norm
·	on X. Furthermore,


||W (t)x||new = sup
 W (s)W (t)x  = sup ||W (s+t)x|| ≤ sup
 W (s)x  = ||x||new,

s≥0
s≥0
s≥0

which implies that W (t) is a C0 semigroup of contractions on X endowed with the norm || · ||new. Consequently, Case 2 can be reduced to Case 1 in the new norm ||· ||new. In particular, (15) is now valid for the new norm ||· ||new instead of || · ||. From this and (18) we obtain
||etAλ x − etAμ x||	(19)
≤ ||etAλ x − etAμ x||new
≤ 2||x − a||new + t||λR(λ, A)Aa − Aa||new + t||μR(μ, A)Aa − Aa||new
≤ 2M||x − a|| + tM||λR(λ, A)Aa − Aa|| + tM||μR(μ, A)Aa − Aa|| .
We obtain an method to compute W from A if we replace (16) and (17) in the above algorithm for Case 1 by
M||x − δX(pi)|| ≤ 2−k−2 and tM||λR(λ, A)δX(qi) − δX(qi|| ≤ 2−k−2 .
Case 3: (M	1 and θ	0) We introduce a function U by
U (t)= e−θtW (t) .
It can be shown easily that U is a C0 semigroup. Since
||U (t)|| = ||e−θtW (t)|| = e−θt||W (t)|| ≤ e−θtMeθt = M
U satisfies the assumption of Case 2. We determine its infinitesimal generator
B of U by (3):


Bx = lim
t'→0+
e−θtW (t)x − x t
= lim (
t'→0+
W (t)x − x +
t
(e−θt − 1)W (t)x t
)= Ax − θx ,

that is, B = A	θI. For determining W from A we compute B from A, U
from B and finally W from U .
The function (A, θ) '→ A − θI is (δG, ρ, δG)-computable:
Suppose, p = ⟨p0, q0, p1, q1,.. .⟩, A = δG(p) and ρ(q) = θ. Then the set {(δX(pi), δX(qi)) | i ∈ N} is dense in graph(A) and hence the set
{(δX(pi), δX(qi) − θδX(pi) | i ∈ N} is dense in graph(A − θI). From (p, q, i) we can compute qi' such that δX(qi')= δX(qi) − θδX(pi). Hence, from (p, q) we can compute some q' such that δG(q') = graph(A − θI). Therefore, (A, θ) '→ A − θI is (δG, ρ, δG)-computable.

The function (B, M) '→ U is (δG, ρ, δS)-computable by Case 2.
The function (U, θ) '→ W is (δS, ρ, δS)-computable:
By Lemma 3.1 the function (U, t, x) '→ U (t)x is (δS, ρ+, δX, δX)-computable. Since the function (θ, t, y) '→ e−θty is (ρ, ρ+, δX, δX)-computable, the func- tion (U, θ, t, x) '→ e−θtU (t)x = W (t)x is (δS, ρ, ρ+, δX, δX)-computable. Therefore by Lemma, 3.1 (U, θ) '→ W is (δS, ρ, δS)-computable.
Combining the three computations we obtain that (A, θ, M ) '→ W is (δG, ρ, ρ, δS)-computable.
We notice that for M ≤ 1, if ||R(λ, A)|| ≤ 1/(λ − θ) for any λ > θ, then ||R(λ, A)n|| ≤ 1/(λ − θ)n for all n ∈ N. In such cases, we call (A, θ) a piece of type-IGC information for A (IGC refers to “infinitesimal generator of a contraction semigroup”). Theorem 5.4 leads to the following algorithms computing contraction semigroups from their generators and vice versa.
Theorem 5.5 1. The map (A, θ) '→ W is (δG, ρ, δS)-computable, provided (A, θ) is a piece of type-IGC information for A, where W (t) is a C0 semigroup generated by A satisfying ||W (t)|| ≤ eθt.
The map W '→ (A, θ), where (A, θ) is a piece of type-IGC information for A, is (δS, δG, ρ)-computable, provided ||W (t)|| ≤ eθt for all t ≥ 0.
In Theorem 5.4.ii, a Turing algorithm is constructed that computes, on any given piece of type-IG data for A, a C0 semigroup W (t) generated by A satisfying ||W (t)|| ≤ Meθt. This algorithm can be used to solve the following abstract Cauchy problem.
Corollary 5.6 There is a Turing algorithm that computes the solution u of the initial-value problem du(t)/dt = Au(t) for t > 0 and u(0) = x from any given piece of type-IG data for A plus any δX-name for the initial value x ∈ X.
Proof. If A is the infinitesimal generator of a C0 semigroup W (t), then the solution u(t)= W (t)x.	 

We note that, compared to the Cauchy problem where A is a bounded linear operator, more information is required in order to compute the solution when A is unbounded.
One of the fundamental problems in the theory of semigroup of operators is the relation between the semigroup W (t) and its infinitesimal generator A. However, from the point of view of applications to partial differential equations it is more interesting to obtain W (t) from A. The reason goes as follows: If A is the infinitesimal generator of a C0 semigroup W (t), then for x ∈ X, W (t)x

is the (mild) solution of the initial-value problem
du
dt − Au = 0,	u(0) = x
(see, for example, Section 4.1 of [Paz83]). Since our motivation is to invent Turing algorithms for computing solutions of PDEs, in the remaining of the paper, we will be mainly studying how to compute the semigroup from its infinitesimal generator for various abstract Cauchy problems of the form:
, d u(t)= Au(t)+ Bu(t),	t > 0,
⎨ dt

,,, u(0) = x,
(20)

where B, called a perturbation of A, is a linear operator from X to X. Thus, if A + B is the infinitesimal generator of a C0 semigroup W (t) of bounded linear operators, then (20) admits a unique solution and this solution is u(t)= W (t)x. In such cases, if one has a piece of type-IG data for A+B, then one can compute the solution u(t) by making use of the Turing algorithm constructed in Theorem 5.4.ii. In many applications, however, it might be much easier to get a piece of type-IG data for A than the same type of data for A + B. In the following, we will be interested in the possibility of using various types of data for A to compute the C0 semigroup generated by A + B. When B is a bounded linear operator, any piece of type-IG data for A together with a [δX → δX]-name of B is sufficient to compute the semigroup generated by A + B as the following theorem demonstrates.
Theorem 5.7 Assume that B : X → X is a bounded linear map. Then the map (A, θ, M, B) '→ W, where W (t), t ≥ 0, is the C0 semigroup generated by A + B, is (δG, ρ, ρ, [δX  δX], δS) -computable, provided that (A, θ, M ) is a piece of type-IG information for A.
Proof. To compute W (t), by Theorem 5.4.ii, it suffices to have a piece of type-IG data for A + B. It is known classically that if (A, θ, M ) is a piece of type-IG information, then (A + B, θ + Mb, M ) will be a piece of type-IG information for A + B for any bounded linear operator B, where b is an arbi- trary upper bound of ||B|| (Theorem 3.1.1 [6]). Thus, it suffices to show that
(i) an upper bound of ||B|| can be computed from any given [δX → δX]-name of B and (ii) a δG-name of A + B can be computed from any given δG-name
of A together with a [δX → δX]-name of B. It follows from Lemma 3.6 that
(i) is true. The proof for (ii): for any dense set {(ai, A(ai))}i∈N in the graph of A, it can be easily verified that the set {(ai, A(ai)+ B(ai))}i∈N is dense

in the graph of A + B. Since dom(B) = X ⊃ dom(A) and (B, x) '→ B(x) is ([δX → δX], δX, δX)-computable, (ii) holds.	 

Corollary 5.8 Assume that A : X → X is a densely deﬁned closed (un- bounded) linear operator and B : X → X is a bounded linear operator. Then the solution operator S : (A, θ, M, B, x) '→ u of the initial-value problem (20) is (δG, ρ, ρ, [δX → δX], δX, [ρ → δX])-computable, provided (A, θ, M ) is a piece of type-IG information for A.
When B : X → X is an unbounded linear operator, in order to compute the solution of the problem (20), B will be assumed to be an A-bounded closed linear operator, that is, dom(B) ⊇ dom(A) and there are two constants a ≥ 0 and b ≥ 0 such that
||Bx|| ≤ a||Ax|| + b||x||	for x ∈ dom(A).	(21)
We call the pair (a, b) an A-bound of B. As for the operator A, some al- ternation in data type is also needed. A triple (A, M, δ) is called a piece of type-IGA information for A (IGA refers to “infinitesimal generator of an an- alytic semigroup”) if (1) A : X → X is a closed, densely defined operator,
(2) 0 < δ < π/2, ρ(A) ⊃ Σδ = {λ ∈ C : |argλ| < π + δ} ∪ {0}, and (3)
||R(λ, A)|| ≤ M/|λ| for all λ ∈ Σδ and λ /= 0. Recall that ρ(A) denotes the resolvent set of A. In addition, if a δG-name of A,a ρ-name of M and a ρ-name of δ are available, (A, M, δ) will be referred as a piece of type-IGA data for
A. Classically, it is known that if (A, M, δ) is a piece of type-IGA information for A, then A is the infinitesimal generator of an analytic semigroup. In the following lemma, we show that much more follows from a piece of type-IGA information.
Lemma 5.9 The map (A, M, δ)  (W, C) is (δG, ρ, ρ, δS, ρ)-computable, pro- vided that (A, M, δ) is a piece of of type-IGA information for A, where W (t) is the semigroup generated by A satisfying ||W (t)|| ≤ C.
Proof. Let ν = π + δ . Clearly ν is computable from δ. Then the semigroup
2	2
W (t) generated by A can be written in the form of

W (t)x =  1  ∫

eλtR(λ, A)xdλ

2πi  Γ
(Theorem 1.7.7 [Paz83]), where Γ is a smooth curve in Σδ running from e−iν to  eiν. In the following, we show how to compute W (t)x for any x  X and t > 0. Fix t > 0.

Since R(λ, A) is analytic in Σδ, without changing the value of the in- tegral, we may shift Γ to Γt, where Γt = Γ1 ∪ Γ2 ∪ Γ3 and Γ1 = {re−iν : t−1 ≤ r < ∞}, Γ2 = {t−1eiφ : −ν ≤ φ ≤ ν} and Γ3 = {reiν : t−1 ≤ r < ∞}. Let ct be the constant ct = t sin(ν − π ). Let Γk = Γk ∪ Γ2 ∪ Γk, where
k = {re−iν : t−1 ≤ r ≤ k} and Γk = {reiν : t−1 ≤ r ≤ k}, k ≥ t−1. By
Lemma 5.1.i the map (A, M, δ, λ) '→ R(λ, A), λ ∈ Σδ, is (δG, ρ, ρ, ρ2, [δX →
δX])-computable, and consequently the map (A, M, δ, t, x, λ) '→ eλtR(λ, A)x
is (δG, ρ, ρ, ρ+∫, δX, ρ2, δX)-computable and, therefore, (A, M, δ, t, x, k)	'→

thermore,
||W (t) − Ik(t)||L(X)

= sup
  1  ∫
eλtR(λ, A)xdλ + ∫
eλtR(λ, A)xdλ 

||x||=1
Γ \Γk
Γ \Γk

1
≤ 2π
∫ ∞ |etre−iν |·  R(re−iν, A)  d|re−iν|

+ 1 ∫ ∞ |etreiν |·  R(reiν, A) d|reiν|
≤ 1 ∫ ∞ etr cos ν M dr
π  k	r
= M ∫ ∞ e−tr sin(ν−π/2) 1 dr	( π < ν < π + δ < π)
π	k	r	2	2

M	∞ e−s
=
ds.

π	kct	s
Since the integral ∫ ∞ e−s ds converges effectively to 0 as k → ∞, I (t) effec-
tively converges to W (t) in k for t > 0 in the uniform operator norm. This
proves that (A, M, δ, t, x) '→ W (t)x is (δG, ρ, ρ, ρ, δX, δX)-computable. By type conversion twice, (A, M, δ) '→ W is (δG, ρ, ρ, δS)-computable.
Use the path Γt and a similar estimate as of (a), one can verifies
that ||W∫(t)||−s≤ 2C1 + C2, where C1 is any rational number∫ satisfying
Since the two integrals are computable from M and ν, so are the constants
C = 2C1 + C2.	 

Theorem 5.10 Assume that B is an A-bounded closed linear operator. Then the map ((A, B), M, δ, a, b) '→ (W, C, ω), where W (t) is the C0 semigroup generated by A + B satisfying ||W (t)|| ≤ Ce , is (δGG, ρ, ρ, ρ, ρ, δS, ρ, ρ)- computable, provided that (A, M, δ) is a piece of type-IGA information for A and (a, b) is an A-bound of B satisfying 0 ≤ a ≤ 1 (1 + M)−1.

Proof.	By Lemma 5.9 it suffices to compute a piece of type-IG data for
A + B from the given information.
Since B is A-bounded, the following estimate holds for any x ∈ X:
||BR(λ, A)x|| ≤ a||AR(λ, A)x|| + b||R(λ, A)x||
≤ a||x|| + (a|λ| + b)(M/|λ|)||x||
2
= (a(M + 1)+ bM/|λ|)||x|| ≤ 3 ||x||
for any λ ∈ Σδ and |λ| > 3Mb (recall that 0 ≤ a ≤ 1 (M + 1)−1). Thus
||BR(λ, A)|| ≤ 2/Σ3, and consequently I − BR(λ, A) is invertible with ||(I −

R(λ, A + B)= R(λ, A)(I − BR(λ, A))−1, λ ∈ Σδ and |λ| > 3Mb 
The above representation of R(λ, A + B) immediately leads to the estimate


||R(λ, A + B)|| ≤
3M
|λ| , λ ∈ Σδ and |λ| > 3Mb 

Let β = 6Mb. Then for any θ ∈ Σδ, |θ + β| > 3Mb. Since for any θ ∈ Σδ,
R(θ, A + B − βI)= (θI − (A + B − βI))−1 = ((θ + β)I − (A + B))−1 = R(θ +
β, A + B), it follows that ρ(A + B − βI) ⊃ Σδ. Consider Σα, where α = δ/2. For any θ  Σα, write θ = θ1 + iθ2. If θ1  0, then θ + β   θ . If θ1 < 0, let αθ be the acute angle between 0θ (the vector from the origin of the complex plane C to θ) and the positive or negative i-axis. Then |θ + β| ≥ |θ| cos αθ. Since 0 < αθ ≤ α < π/2, one obtains |θ + β| ≥ |θ| cos αθ ≥ |θ| cos α. Thus for any θ ∈ Σα, ||R(θ, A+ B − βI)|| = ||R(θ + β, A+ B)|| ≤ 3M/|θ + β| ≤ 3M/ cos α , which in turn implies that (A + B − βI, 3M/ cos(δ/2), δ/2) is a piece of type- IGA information for A + B − βI.
Obviously 3M/ cos(δ/2) is computable from M and δ. Thus, to com- pute a piece of type-IGA data for A+B−βI, it suffices to show that a δG-name of A + B − βI can be computed from M, b and a δGG-name of (A, B). Let
{(ai, Aai)}i∈N be a dense set of the graph of A and {(ai, B(ai)}i∈mathbbN a dense
set of the graph of B. Then for any n ∈ N and any x ∈ dom(A), there is an ai such that d((x, Ax), (ai, Aai)) = max(||x − ai||, ||A(x − ai)||) < 2−(n+4)/c, where c = (1 + M)  + b. Moreover,
d(Bx, Bai)= ||B(x − ai)||
≤ a||A(x − ai)|| + b||x − ai|| < 2−(n+2),
which implies that d(Ax + Bx, Aai + Bai) ≤ d(Ax + Bx, Aai + Bx)+ d(Aai + Bx, Aai + Bai) = ||Ax − Aai|| + ||Bx − Bai|| ≤ 2−(n+1), and consequently, d((x, Ax+Bx), (ai, Aai +Bai)) ≤ 2−n. Thus {(ai, Aai +Bai)}i∈N is a dense set

of the graph of A + B and therefore {(ai, Aai + Bai − βai)}i∈N is a dense set of the graph of A+B−βI. Since β = 6Mb is computable from M and b, and both addition (x, y) '→ x + y and scalar multiplication (c, x) '→ cx are computable operators on the computable Banach space X, a δG-name of A + B − βI can be computed. Let Wβ(t) be the semigroup generated by A + B − βI. Then by Lemma 5.9, a δS-name of Wβ and a ρ-name of C satisfying Wβ(t)   C can then be computed.
Let W (t) = eβtWβ(t). Then by making use of a similar argument as that used in the proof of case 3 of Theorem 5.4.ii, it can be verified that A + B is the infinitesimal generator of W (t) satisfying W (t)  Ceβt, and W (t) is computable from Wβ(t).	 

Corollary 5.11 Assume that A : X → X is a densely deﬁned closed (un- bounded) linear operator and B : X → X is A-bounded. Then the so- lution operator S : ((A, B), M, δ, a, b, x) → u of the initial-value problem
(20) is (δGG, ρ, ρ, ρ, ρ, δX, [ρ   δX])-computable, provided (A, M, δ) is a piece of type-IGA information for A and (a, b) is an A-bound of B satisfying 0 ≤ a ≤ 1 (1 + M)−1.

Applications
In this section, results obtained in the previous section are applied to com- pute solutions of homogeneous and inhomogeneous linear parabolic equations.
First we recall the definition of parabolic equations. Consider the following differential operator of order 2m:


A(x, D)= 
|α|≤2m
aα(x)Dα,

where the coefficients aα(x) are sufficiently smooth complex-valued functions of x in Rn, α = (α1,... , αn) with non-negative integer components is a multi-
index of order |α| = α1 + ... + αn, and Dαf = Dα1 ··· Dαn f . The principle

part A'(D) of A(x, D) is the operator
A'(D)= 
|α|=2m
x1	xn




aαDα,

where the coefficients aα with |α| = 2m are constants.

Definition 6.1 The operator	(x, D) is called strongly elliptic if there exists a constant c > 0 such that
m  '	2m
(−1) A (ξ) ≥ c|ξ|
for all ξ ∈ Rn.
In the following, we assume that aα are real numbers if |α| = 2m, and aα ∈ C0∞(Rn) if |α| ≤ 2m − 1, where C0∞(Rn) is the set of all infinitely differentiable functions on Rn with compact supports. We call a tuple a δA- name of A if it lists a ρ-name for each aα, |α| = 2m, and a δD-name for each aα, |α| ≤ 2m − 1 (the definition of δD can be found in [15]). Speaking roughly, a A-name of A is a collection of data on the coefficients of the operator A. We note that the data-type used are standard for numbers and C0∞ functions.
The following initial-value problem is called an initial-value problem of a parabolic equation if A is a strongly elliptic operator:


⎨
,,, u(x, 0) = φ(x) ∈ L2(Rn).

(22)

Theorem 6.2 Assume that A(x, D) is a strongly elliptic operator. Then, the solution operator K : (A, φ) '→ u of the problem (22) is (δA, δL2 (Rn), [ρ → δL2(Rn)])-computable.
Proof. First we define two operators A, B : L2(Rn) → L2(Rn) as follows: dom(A) = H2m(Rn) and for every u ∈ dom(A), Au = −A'(D)u; dom(B) = H2m−1(Rn) and for every u ∈ dom(B),


Bu = −(A(x, D) − A'(D)u)= −
|α|<2m
aα(x)Dαu

(see, for example, [3] for definitions of Lp(Rn) and Hm(Rn)). The initial value problem (22) can now be written in the form of the following abstract Cauchy problem in L2(Rn):

, d u = Au + Bu,	t > 0,
⎨ dt

(23)

, u(0) = φ.
We prove in the following that (a) (A,

√2, π/4) is a piece of type-IGA infor-

mation for A and, moreover, a piece of type-IGA data can be computed from

any given δA-name of A; √(b ) B is A-bounded and, furthermore, an A-bound
(a, b) with 0 < a < 1(1 +	2)−1 can be computed from any given δA-name of
; (c) A δGG-name of A + B can be computed from any δA-name of	. Then,
by Theorem 5.10, the semigroup W (t) generated by A + B can be computed. Since u(t)= W (t)φ, the solution u is computable from A and φ.
It is known classically that the operator A : L2(Rn) → L2(Rn) is a 
densely defined closed linear operator. It remains to show th√at(a1) ρ(A) ⊃
Σπ/4 = {λ : |argλ| < π + π } ∪ {0} and (a2) ||R(λ, A)|| ≤	2/|λ| for any
2	4
λ ∈ Σπ/4 and λ /= 0.
The proof for (a1): Since A is strongly elliptic, 0 ∈ ρ(A). For any λ ∈ Σπ/4 with λ /= 0, write λ = λ1 + λ2i. If (λI − A)u =0 for some u ∈ H2m(Rn), then,
taking the Fourier transform of both sides yields (λ + (−1)mA'(ξ))uˆ = 0.
Since either λ1 + (−1)mA'(ξ) /= 0 for all ξ ∈ Rn or λ2 /= 0, uˆ ≡ 0. Thus, u ≡ 0. This proves that for any λ ∈ Σπ/4, λI − A is one-to-one. Next we show that λI − A : H2m(Rn) →  L2(Rn) is a lso surjective for any λ ∈ Σπ/4. For any

transform. Notice that u is well defined due to the fact that for any λ ∈ Σπ/4, λ+(−1)mA'(ξ) /=0 for all ξ ∈ Rn. It can be easily verified that (λI −A)u = f . By applying the fact that u ∈ H2m(Rn) if and only if (1 + |ξ|2)muˆ ∈ L2(Rn), one readily sees that u = F−1(fˆ/(λ +(−1)mA'(ξ))) ∈ H2m(Rn). Thus, λI − A
is surjective. (a1) is proved.
The proof for (a2): For any λ ∈ Σπ/4 with λ /= 0 and any f ∈ L2(Rn), assume that R(λ, A)f = g. Then f = (λI − A)g. Performing the Fourier
transform yields gˆ = fˆ/(λ + (−1)mA'(ξ)). Moreover, since (−1)mA'(ξ) ≥
c|ξ|2m for all ξ ∈ Rn, c > 0, the estimate |λ + (−1)mA'(ξ)| ≥ |λ| co s π/4 holds
for all ξ ∈ Rn. Thus, ||gˆ||L2(Rn) = ||fˆ/(λ + (−1)mA'(ξ))||L2(Rn)	√2  fˆ||L2(Rn).
≤ |λ| ||
Combining with the fact that ||fˆ||L2(Rn) = ||f ||L2(Rn) for all f ∈ L2(Rn), we
have the following estimates: ||g||L2(Rn) = ||R(λ, A)f ||L2(Rn) ≤ |λ| ||f ||L2(Rn)
for any f ∈ L2(Rn), which yields ||R(λ, A)|| ≤ √2/|λ| for any λ ∈ Σπ/4. (a2) is proved.
To get a piece of type-IGA data of A, it suffices to show that a δG- name of A can be computed from any given δA-name of A. Since, for any α with |α| = 2m, the differentiation ∂α : H2m(Rn) → L2(Rn), f '→ ∂αf , is (δH2m(Rn), δL2 (Rn))-computable, where ∂ f is the weak derivative of f of order α, and the operator A : H2m(Rn) → L2(Rn) is a finite sum of scaler multi- ples of ∂α, it follows that (A,f ) '→ Af is (δA, δH2m(Rn), δL2(Rn))-computable. Consequently, a δG-name of A that encodes the dense set {(Pj, APj): j ∈ N} can be computed from any δA-name of A, where {Pj}j∈N is the set of “ratio- nally smoothly truncated” rational polynomials. The set {Pj}j∈N is dense in

Hk(Rn) for any k ∈ N.
By interpolation inequalities for intermediate derivatives (see, for ex- ample, Theorem 4.13 [Ada75]), for any ϵ > 0, there exists a constant C = Cє, depending only on ϵ and computable from ϵ and m, such that for any u ∈ H2m(Rn),
||Bu||L2(Rn) ≤ ϵ||Au||L2(Rn) + Cє||u||L2(Rn).
It follows that B is A-bounded if one selects an ϵ < 1 (1 + √2)−1.
Since the multiplication, (ϕ, f ) '→ ϕf , of any C0∞ function ϕ and any L2 function f is (δD, δL2(Rn), δL2(Rn))-computable ([15]), and the differentia- tions ∂α : H2m−1(Rn) → L2(Rn) are (δH2m−1 (Rn), δL2 (Rn))- computable for any α with |α| ≤ 2m − 1, it follows that (A,f ) '→ Bf is (δA, δH2m−1 (Rn), δL2(Rn))- computable. Consequently, a δG-name of B that encodes the dense set (Pj, BPj) : j  N can be computed from any δ -name of . Thus a δGG- name of A + B can be computed.	 
Corollary 6.3 Let T > 0 be a computable real number. Then the solution operator KH : L2(R3) → C([0,T ], L2(R3)) of the initial-value problem of the heat equation
∂u	∂2u	∂2u	∂2u
∂t = ∂x2 + ∂x2 + ∂x2 ,	u(x1, x2, x3, 0) = f (x1, x2, x3)
1	2	3
is (δL2 (R3 ), [ρ → δL2(R3 )])-computable.


Next we consider the inhomogeneous parabolic initial-value problem
,⎨ du(t) + Au(t)= f (t),	t > 0
, u(0) = x,	x ∈ X


(24)

where f : [0,T ]  X is continuous and  is a strongly elliptic operator. The next theorem shows that the solution of (24) is computable from the parameters defining the problem (i.e. A, f and φ) in certain spaces.
Theorem 6.4 Assume that X = L2(Rn), (x, D) is a strongly elliptic op- erator, and T is a computable real number. Then the solution operator K : (A, f, x) '→ u of the problem (24) is (δA, [ρ → δL2 (Rn)], δL2 (Rn), [ρ → δL2 (Rn)])- computable.
Proof. It follows from Theorem 6.2 that a C0 semigroup W (t) can be com- puted from A such that W (t)x is the solution of the homogeneous problem

associated to (24) (i.e. setting f = 0). Since the solution u(t) of (24) can be written as follows

u(t)= W (t)x +
t
W (t	s)f (s)ds
0

(Definition 4.2.3 [6]), it suffices to show that the integral can be computed from W , f and t. A similar argument as of the proof for Theorem 5.4.i yields the computability of the integral.	 


References
Aberth, O., Computable analysis and differential equations, in: A. Kino, J. Myhill and R. Vesley, editors, Intuitionism and Proof Theory, Studies in Logic and the Foundations of Mathematics (1970), pp. 47–52, proc. of the Summer Conf. at Buffalo N.Y. 1968.
Aberth, O., The failure in computable analysis of a classical existence theorem for differential equations, Proceedings of the American Mathematical Society 30 (1971), pp. 151–156.
Adams, R. A., “Sobolev Spaces,” Academic Press, New York, 1975.
Gay, W., B.-Y. Zhang and N. Zhong, Computability of solutions of the Korteweg-de Vries equation, Mathematical Logic Quarterly 47 (2001), pp. 93–110.
Ko, K.-I., On the computational complexity of ordinary differential equations, Inform. Contr.
58 (1983), pp. 157–194.
Pazy, A., “Semigroups of linear operators and applications to partial differential equations,” Springer, New York, 1983.
Pour-El, M. and N. Zhong, The wave equation with computable initial data whose unique solution is nowhere computable, Mathematical Logic Quarterly 43 (1997), pp. 499–509.
Pour-El, M. B. and J. I. Richards, A computable ordinary differential equation which possesses no computable solution, Annals Math. Logic 17 (1979), pp. 61–90.
Pour-El, M. B. and J. I. Richards, “Computability in Analysis and Physics,” Perspectives in Mathematical Logic, Springer, Berlin, 1989.
Weihrauch, K., “Computable Analysis,” Springer, Berlin, 2000.
Weihrauch, K. and X. Zheng, Effectiveness of the global modulus of continuity on metric spaces, Theoretical Computer Science 219 (1999), pp. 439–450.
Weihrauch, K. and N. Zhong, Is wave propagation computable or can wave computers beat the Turing machine?, Proceedings of the London Mathematical Society 85 (2002), pp. 312–332.
Weihrauch, K. and N. Zhong, Computing the solution of the Korteweg-de Vries equation with arbitrary precision on Turing machines, Theoretical Computer Science 332 (2005), pp. 337– 366.
Weihrauch, K. and N. Zhong, An algorithm for computing fundamental solutions, SIAM Journal on Computing 35 (2006), pp. 1283–1294.
Zhong, N. and K. Weihrauch, Computability theory of generalized functions, Journal of the Association for Computing Machinery 50 (2003), pp. 469–505.
