Available online at www.sciencedirect.com


Electronic Notes in Theoretical Computer Science 332 (2017) 39–56
www.elsevier.com/locate/entcs
Generalized Probabilistic Satisfiability 1
Carlos Caleiroa Filipe Casalb Andreia Mordidoa
a SQIG - Instituto de Telecomunica¸c˜oes
Dep. Mathematics, Instituto Superior T´ecnico, Universidade de Lisboa, Portugal
b Centro de Matem´atica, Aplica¸c˜oes Fundamentais e Investigaca˜o Operacional (CMAF-CIO)
Dep. Mathematics, Instituto Superior T´ecnico, Universidade de Lisboa, Portugal

Abstract
We analyze a generalized probabilistic satisfiability problem (GenPSAT) which consists in deciding the satis- fiability of linear inequalities involving probabilities of classical propositional formulas. GenPSAT is proved to be NP-complete and we present a polynomial reduction to Mixed-Integer Programming. Capitalizing on this translation, we implement and test a solver for the GenPSAT problem. As previously observed for many other NP-complete problems, we are able to detect a phase transition behaviour for GenPSAT.
Keywords:  Probabilistic Satisfiability, GenPSAT, Mixed-Integer Programming, Phase Transition

Introduction
For many years, the satisfiability problem for propositional logic (SAT) has been extensively studied both for theoretical purposes, such as complexity theory, and for practical purposes. In spite of its NP-completeness [9], modern tools for solving SAT are able to cope with very large problems in a very efficient manner, leading to applications in many different areas and industries [2].
Naturally, people started extending this problem to more expressive frameworks: for instance in Satisfiability Modulo Theories [10], instead of working in proposi- tional logic, one can try to decide if a formula is valid in some specific first-order theory. One other direction is to extend propositional logic with probabilities. The probabilistic satisfiability problem (PSAT) was originally formulated by George

1 Work done under the scope of R&D Unit 50008, financed by the applicable financial framework (FCT/MEC through national funds and when applicable co-funded by FEDER–PT2020) and partially supported by Funda¸c˜ao para a Ciˆencia e a Tecnologia by way of grant UID/MAT/04561/2013 to Centro de Matem´atica, Aplica¸c˜oes Fundamentais e Investiga¸c˜ao Operacional of Universidade de Lisboa (CMAF-CIO). AM was supported by FCT under the grant SFRH/BD/77648/2011 and by the Calouste Gulbenkian Foun- dation under Programa de Est´ımulo `a Investigaca˜o 2011. FC acknowledges the support from the DP-PMI and FCT (Portugal) through scholarship SRFH/BD/52243/2013. CC acknowledges the support of EU FP7 Marie Curie PIRSES-GA-2012-318986 project GeTFun: Generalizing Truth-Functionality.

http://dx.doi.org/10.1016/j.entcs.2017.04.004
1571-0661/© 2017 The Author(s). Published by Elsevier B.V.
This is an open access article under the CC BY-NC-ND license (http://creativecommons.org/licenses/by-nc-nd/4.0/).

Boole [3] and later by Nilsson [18]. This problem consists in deciding the satis- fiability of a set of assignments of probabilities to propositional formulas. There has been a great effort on the analysis of the probabilistic satisfiability problem and on the development of efficient tools for the automated treatment of this prob- lem [11,14,6,1,12].
In this paper we study a Generalized Probabilistic Satisfiability problem (GenPSAT) extending the scope of PSAT by allowing linear combinations of prob- abilistic assignments of values to propositional formulas, and has applications in the analysis of the security of cryptographic protocols and on estimating the prob- ability of existence of attacks [17]. Intuitively, GenPSAT consists in deciding the existence of a probability distribution satisfying a set of classical propositional for- mulas with probability 1, and a set of linear inequalities involving probabilities of propositional formulas. The GenPSAT problem was previously identified in the con- text of the satisfiability of the probabilistic logic in [13], where it was also shown to be NP-complete. Here, we explore the computational behaviour of this problem and present a polynomial reduction from GenPSAT to Mixed-Integer Programming, following the lines of [6,1].
Mixed-Integer Programming (MIP) [19] is a framework to find an optimal solu- tion for a linear objective function subject to a set of linear constraints over real and integer variables. We will exploit the close relation between SAT and MIP [4] in order to reduce GenPSAT problems to suitable MIP problems.
As observed in many NP-complete problems [7], GenPSAT also presents a phase transition behaviour. By solving batches of parametrized random GenPSAT prob- lems, we observe the existence of a threshold splitting a phase where almost every GenPSAT problem is satisfiable, and a phase where almost every GenPSAT problem is not satisfiable. During such transition, the problems become much harder to solve [7].
As the main contribution of this work, we develop the theoretical framework that allows the translation between GenPSAT and MIP problems, which then allows the implementation of a provably correct solver for GenPSAT. This translation is able to encode strict inequalities and disequalities into the MIP context. With the GenPSAT solver in hands, we are able to detect and study the phase transition behaviour.
The paper is outlined as follows: in Section 2 we briefly recall the PSAT problem; in Section 3 we carefully define the GenPSAT problem and establish some results on its complexity; Section 4 is dedicated to finding a polynomial reduction from GenPSAT to MIP and a prototype tool is provided for an automated analysis of the problem; in Section 5 we analyze the presence of phase transition; finally, in Section 6, we assess our contributions and discuss future work.

Preliminaries
Let us begin by fixing a set of propositional variables  x1,..., xn . A literal is either a propositional variable or its negation. A clause is a non-empty disjunction of one or more literals. A propositional formula is any Boolean combination of propositional variables.
tional formulas as usual. We say that a set of valuations V satisfies a propositional
∗
over variables of P. We define a probability distribution π over V∗ as a probability A simple probabilistic formula is an expression of the form Pr(c)∞ p, where c is




2n
vi c	πi	p .
i=1

A probability distribution π satisfies a set of simple probabilistic formulas if it satisfies each one of them.
We now recall the PSAT problem [18,14,11].
Definition 2.1 [PSAT problem] Given a set of propositional variables P and a set
i	i
fiability problem (PSAT) consists in determining whether there exists a probability distribution π over	∗ that satisfies Σ.

The PSAT problem for Pr ci	i pi 1	i	k can be formulated algebraically as the problem of finding a solution π for the system of inequalities


⎪⎨∑ πi = 1	,
⎪⎩π ≥ 0
where V is the k × 2n matrix such that Vij = vj(ci), i.e., Vij = 1 iff the j-th valuation
i	i	i
i
The SAT problem can be modeled as a PSAT instance where the entries pi of the probability vector are all identical to 1. The PSAT problem was shown to be NP-complete [14,13], even when the clauses consist of the disjunction of only two literals, 2-PSAT.

GenPSAT problem
We now extend the notion of simple probabilistic formula to handle linear inequal- ities involving probabilities of propositional formulas. A probabilistic formula is an expression of the form

∑(aiPr(ci)) ∞ p ,
where ci are propositional clauses, ∞ ∈ {≥, <, ≠}, l ∈ N and a1,..., al,p ∈ Q. Observe
In the case where l = 1 and a1 = 1, we obtain a simple probabilistic formula. An atomic probabilistic formula is a probabilistic formula where each ci is a proposi- tional variable, i.e., ci   for each i.
We say that a probability distribution π satisﬁes a formula ∑l  (aiPr(ci)) ∞ p if
l ⎛	⎛ 2n	⎞⎞
∑ ⎝ai ⎝∑ vj(ci)⋅ πj⎠⎠ ∞ p .
A probability distribution π satisfies a set of probabilistic formulas if it satisfies each one of them.
An instance of GenPSAT is a pair Γ, Σ where Γ is a set of propositional clauses (also called hard constraints) and Σ is a set of probabilistic formulas (soft con- straints). We say that a probability distribution π satisﬁes a GenPSAT instance Γ, Σ if it satisfies the set of probabilistic formulas
Ξ(Γ,Σ) = Σ ∪ {Pr(γ)= 1 ∣ γ ∈ Γ} .	(1)
Definition 3.1 [GenPSAT problem] Given a GenPSAT instance Γ, Σ , the Genera- lized Probabilistic Satisfiability problem (GenPSAT) consists in determining whether there exists a probability distribution π over ∗ that satisfies Γ, Σ .
GenPSAT poses a convenient framework for specifying constraints involving different probabilistic formulas.  For instance, one may want to impose that 2Pr A   Pr B  for two propositional clauses A, B. Such requirements may be very useful in specifying properties of interesting systems but they cannot be easily expressed in the PSAT framework. We now showcase GenPSAT’s expressiveness by encoding the Monty Hall problem [20].
Example 3.2 The Monty Hall problem is a puzzle where we are faced with the choice of picking one of three doors, knowing that a prize is behind one of them. After our initial choice, the game host opens one of the remaining doors provided that the prize is not behind it, and gives us the choice of switching or keeping the initial guess. The question is: which option is more advantageous?
To model this problem as a GenPSAT instance, let us define the following propo- sitional variables: Pi holds if the prize is behind door i, Xi holds if our initial choice is door i, Hi holds if the host reveals door i after our initial choice, for i  1, 2, 3 . Since there are only one door with a prize, one initial choice, and one door revealed

by the host, we impose the following restrictions:
Γ = ⎧⎪	⎫⎪
⎨⎪	⋁ (Pi ∧ ¬Pj ∧ ¬Pk),	⋁ (Xi ∧ ¬Xj ∧ ¬Xk),	⋁ (Hi ∧ ¬Hj ∧ ¬Hk)⎬⎪ .


i,j,k∈{1,2,3} i≠j≠k≠i

i,j,k∈{1,2,3} i≠j≠k≠i

i,j,k∈{1,2,3}	⎪

Furthermore, the host cannot open neither the chosen door nor the door with the prize and so we include the followings constraints in Γ:
Pi → ¬Hi and Xi → ¬Hi	for each i ∈ {1, 2, 3} .
We further assume that the prize has uniform probability of being behind each door and that the initial choice is independent of where the prize is:


Σ =	⋃	{Pr(P )= 1 ,	Pr(P
∧ X )= 1 Pr(X )}

i,j∈{1,2,3}	3
i	j	3	j

Concerning the question of which is more advantageous, switching or keeping our initial choice, we encode winning by switching as

WbS ∶

3
Pi	Xi	Hi	,
i=1

and winning by keeping as


WbK ∶
3
Pi	Xi	.
i=1

We want to the decide whether it is always the case that Pr WbS	Pr WbK , which can be checked by testing the satisfiability of the GenPSAT instance
(Γ, Σ ∪ {Pr(WbS)< Pr(WbK)}) .

Pr(WbK)}) is satisfiable, allowing us to conclude that it is always advantageous to We can take this analysis one step further, and show that the probability of
2	2
unsatisfiable and that the instance (Γ, Σ ∪ {Pr(WbS) = 2 }) is satisfiable. All these

Notice that the PSAT problem for Σ can be modeled in GenPSAT by considering the instance  , Σ .
Given a GenPSAT instance Γ, Σ , where Γ contains m clauses and Σ is composed of k probabilistic formulas, we follow the lines of Nilsson [18] for a linear algebraic formulation and consider a k m  2n matrix V  Vij , where for each i  1,...,k 

m} and j ∈ {1,..., 2n} Vij is defined from the jth valuation vj and from the ith
probabilistic formula ∑l ai Pr(ci )∞ p of Ξ	as follows:

u
u=1
u	i i

l
(Γ,Σ)

Vij = ∑ ai ⋅ vj(ci ) .
u	u
u=1
Furthermore, define two vectors of size k	m, p	pi and	i . GenPSAT is equivalent to the problem of deciding the existence of a solution π to the system


⎪⎨∑ πi = 1
⎪⎩π ≥ 0

.	(2)

Given a set of probabilistic formulas Ω = { ∑l
ai ⋅ v (ci )∞ p
∣ 1 ≤ i ≤ k} and a



k	1

and
k′ matrix M[Ω,V]


l
Mij] such that
Mk+1,j = 1 for each 1 ≤ j ≤ k′

Mij = ∑ ai ⋅ vj(ci ) for 1 ≤ i ≤ k, 1 ≤ j ≤ k′ .
u	u
u=1
Then, we can rewrite system (2) using the [Ξ(Γ,Σ), V∗]-associated matrix V as

⎧⎪Vπ ∞ p
⎪⎩π ≥ 0

(3)

We now show that this problem is NP-complete. For this purpose, we first
present the following lemma.
Lemma 3.3 ([13,5]) If a system of l linear inequalities with integer coefficients has a non-negative solution, then it has a non-negative solution with at most l positive entries.
Theorem 3.4 ([13]) GenPSAT is NP-complete.
Proof. We begin by showing that GenPSAT is in NP by providing a polynomial sized certificate. Notice that Lemma 3.3 can be extended to rational coefficients simply by normalizing with the greatest denominator. Applying this result to the system (3) we conclude that there isa k  m  1  k  m  1 matrix W , composed of columns of V , whose system

⎧⎪Wπ ∞ p
⎪⎩π ≥ 0
(4)

has a solution iff the original system (3) has a solution. Furthermore, the obtained solutions from (4) can be mapped to solutions of (3) by inserting zeros in the appropriate positions. Since the obtained solution from the latter system has k m 1 elements, it constitutes the NP-certificate for the GenPSAT problem.

Furthermore, given that the PSAT problem can be modeled in GenPSAT, it follows that GenPSAT is NP-complete.
We say that a GenPSAT instance Γ, Σ is in normal form if Γ is a set of propo- sitional clauses with 3 literals, i.e., Γ can be seen as a 3CNF formula, and Σ is a set of atomic probabilistic formulas.
′	′
i(n normal form such that (Γ, Σ) is satisﬁable iff (Γ′, Σ′) is satisﬁable. Moreover,
Proof. Let Γ, Σ be the GenPSAT instance to be put in normal form. We obtain Σ′ by transforming formulas in Σ into atomic probabilistic formulas. For this purpose,
let ∑l	aiPr(ci)∞ p be a formula in Σ and consider the atomic probabilistic formula
obtained by replacing (when needed) each clause ci by a fresh variable yi,
l
aiPr yi	p .
i=1
Furthermore, the yi variable is added to P and the formula stating the equivalence
i	i	i	i
We are left with the transformation of the formula
⋀ γ ∧	⋀	(y ↔ c)
γ∈Γ	(y↔c)∈Δ
into 3-CNF using Tseitin’s transformation [21], which can increase linearly the size of the formula and add new variables to . The final Γ′ is the set of conjuncts of the obtained 3-CNF formula. Since Tseitin’s transformation preserves satisfiability of formulas, Γ, Σ is satisfiable iff Γ′, Σ′ is satisfiable.

Reducing GenPSAT to Mixed-Integer Programming
In this section we explore the close relation between satisfaction of propositional formulas and feasability of a set of linear constraints over binary variables (see [4]). With this, we present a reduction of GenPSAT to Mixed-Integer Programming (MIP), similarly to what was done for PSAT [6] and GPSAT [1]. A MIP problem con- sists in optimizing a linear objective function subject to a set of linear constraints over real and integer variables. MIP was shown to be NP-complete, see [19]. Observe that this translation to MIP also serves as a proof that GenPSAT is in NP.
Linear Algebraic Formulation for GenPSAT
Lemma 4.1 A GenPSAT instance in normal form (Γ, Σ), with ∣Σ∣= k, is satisﬁable
0

W is the [Σ, V0]-associated matrix
V0 satisﬁes Γ,

considering p = [p1,..., pk, 1] and⎧∞= [∞1,..., ∞k, =], the system
⎪⎩π ≥ 0


(5)

is satisﬁable.


and ∣Γ∣= m. Then, denoting by V the [Ξ(Γ,Σ),
⎧⎪Vπ ∞ p
⎪⎩π ≥ 0
∗ -associated matrix, the system

ha≤s a solution. And so, using Lemma 3.3, there is a (k + m + 1)× l matrix V ∗, where
valuations underlying V ∗ certainly satisfies Γ, as π∗ > 0 for each 1 ≤ j ≤ l.
Let W be the matrix constructed from V by choosing the first k rows (cor- responding to the probabilistic formulas in Σ) and the last row (requiring that the solution sums up to one) of V ∗. Still, the corresponding system has a positive so- lution. Using Lemma 3.3 once more, we conclude that exists a (k + 1)× k′ matrix
is obtained from ρ∗ by inserting zeros in the appropriate positions.
Reciprocally, assume that there exists a k 1 k′ matrix W of rank k′ k 1 sat- isfying (i), (ii), (iii), and let π denote the solution for (5). We are looking for a prob- ability distribution π∗ satisfying Γ, Σ . For this purpose, let 0  vj ,..., vj ′
denote the set of valuations underlying W according to condition (ii), and define

π∗ = [π∗], where

π∗	⎪⎧ πi  if i ∈ {j1,..., jk′ } .

i	⎪⎩ 0	otherwise
The verification that π∗ satisfies the GenPSAT instance is now immediate:
given γ ∈ Γ, we check that π∗ verifies Pr(γ)= 1 by observing that the last equality

represented on W on (5) leads to ∑k′
2n

πjs
= 1 and so,
k′

∑ vj(γ)⋅ π∗ =	∑
π∗ = ∑ πj
= 1 .

j=1
{j∣vj (γ)=1}
s=1

given an atomic probabilistic formula ∑l	aiPr(yi)∞p in Σ, we recall the definition
of π∗ and that π is a solution for (5) to conclude that

l	⎛ 2n

⎞	l	⎛ k′

⎞	k′	l

∑ ai ⎝∑ vj(yi)⋅ π∗⎠ = ∑ ai ⎝∑ vj (yi)⋅ πj ⎠ = ∑ (∑ ai ⋅ vj (yi)) πj
∞ p ,


i.e., π∗ satisfies the formulas in Σ.	◻

Translation to MIP
Regarding Lemma 4.1, given a GenPSAT instance (Γ, Σ) in normal form, with ∣Σ∣= k

finding a set of valuations	0 and a probability distribution π in the conditions (i),(ii),(iii), as a MIP problem. We dub this procedure GenToMIP.
Let us denote by H = [hij] the (still unknown) matrix of size n × k′ whose
, i.e., hij = vj(xi) for each 1 ≤ i ≤ n and 1 ≤ j ≤ k′. Let α1,..., αn represent the probability of the propositional variables x1,..., xn, respectively, and following
k′
the reasoning of [6,1] we model the non-linear constraint	hij  πj	αi as a linear
j=1
inequality
k′
bij	αi ,	(val1)
j=1
by introducing the extra variables bij which are subject to the appropriate con- straints, namely forcing bij to be zero whenever hij	0, and ensuring that bij	πj
ij
0 ≤ bij ≤ hij and hij − 1 + πj ≤ bij ≤ πj .	(val2)
We ensure that π represents a probability distribution by imposing that
k′
πj	1 .	(sums1)
j=1
w	w′
Still, as each valuation of V0 satisfies Γ, given a clause ( ⋁ xir )∨( ⋁ ¬ xi′ ) of

r=1
Γ, we generate a linear inequality for each valuation 1	j	k′,
s=1	s


w	⎛ w′	⎞
(∑ hir,j )+ ⎝∑(1 − hi′ j )⎠ ≥ 1.	(gamma)
r=1	s=1
Notice that, if we have a total of m clauses in Γ, we generate m×k′ such inequalities. In order to verify the satisfiability of probabilistic formulas in the MIP frame-
work, consider an atomic probabilistic formula ∑l	aiPr(yi)∞ p in Σ. Since ∞ can
either be the relational symbol	,	or	, we can easily encode the first kind of
inequalities as a MIP linear constraint, but should be careful when dealing with the remaining relational symbols.
For atomic probabilistic formulas of the form ∑l	aiPr(yi)≥ p, we generate the

linear inequality
l
ai αi	p .	(prob≥)
i=1

In the case where	is a strict inequality , we use a specific variable introduced into the MIP problem, say ε, to fix the objective function as the maximization of ε,
maximize ε	(obj)

and further introduce the linear constraint
l
ai αi	ε	p .	(prob<)
i=1
For atomic probabilistic formulas ϕ of the form ∑l	aiPr(yi)≠ p, i.e.
l
aiPr yi	p	0,	(6)
i=1
we force the left hand side to be either strictly greater or strictly less than zero,

l
ai αi	p	0	or
i=1
l
ai αi	p	0 .
i=1

Even though these are linear constraints, the problem would explode if we treated the disjunction. In this sense, notice that, denoting by C a sufficiently
large number, say C = 1 + ∣p∣+ ∑l	∣ai∣, the inequality (6) holds if and only if there
exists a fresh binary variable zq such that the following two strict inequalities hold
simultaneously:
l	l
∑(ai ⋅ αi)− p < C ⋅ zq	and	− ∑(ai ⋅ αi)+ p < C − C ⋅ zq .
i=1	i=1
Then, we are left with two strict inequalities, thus reducing this analysis to a pre- vious case, from which we obtain the constraints
l	l
∑(ai ⋅ αi)− p + ε ≤ C ⋅ zq	and	− ∑(ai ⋅ αi)+ p + ε ≤ C − C ⋅ zq . (prob≠)
i=1	i=1
Denoting by k≥, k<, k≠ the number of probabilistic formulas in Σ when ∞ coin-

n constraints (val1),
4 × n × k′ constraints (val2),
1 constraint (sums1),
m × k′ constraints (gamma),
k≥ constraints (prob≥),
k< constraints (prob<),
2 × k≠ constraints (prob≠).
Hence, we have O(n + n × k′ + m × k′ + k) inequalities over n × k′ binary variables variable ε ≥ 0 and k′ real variables πj ≥ 0. Because of this, the GenToMIP translation
Proposition 4.2 The GenToMIP procedure transforms a GenPSAT instance in nor- mal form Γ, Σ into a MIP problem whose size is polynomial on the size of Γ, Σ .
We now need to show that the existence of a set of valuations	0 and a proba- bility distribution π in the conditions (i),(ii),(iii) of Lemma 4.1 is equivalent to the

feasibility of the MIP problem obtained through GenToMIP with an optimal value
ε  0 (when applicable).
This procedure is presented in Algorithm 1, which given a GenPSAT instance, translates it into a MIP problem and then solves the latter appropriately. For that, let us assume that we initialize an empty MIP problem and consider the following auxiliary procedures:
add const introduces a linear constraint into the MIP problem,
set obj defines the objective function (either as a maximization or as a minimiza- tion) when it was previously not defined,
fresh declares a fresh binary variable into the MIP problem,
mip sat returns True or False depending on whether the problem is feasible (and achieves an optimal solution) or not,
mip objvalue returns the objective value, when an objective function was set.










Proposition 4.3 A GenPSAT instance in normal form Γ, Σ is satisﬁable iff Al- gorithm 1 returns Sat.
Proof. Let (Γ, Σ) be a satisfiable GenPSAT instance in normal form, and also V0 =
1	k′	i
given by Lemma 4.1 which satisfy conditions (i)-(iii). Then, consider the following values and afterwards let us check that they constitute an optimal solution for the MIP problem constructed at Algorithm 1: for each 1 i  n and 1 j  k′, let
∗ = vj(xi),
∗ = h∗ ⋅ ρj,

π∗ = ρj,


α∗ =	∑



ρj,

{j∣vj (xi)=1}
ε∗ = min Δ,

Algorithm 1 GenPSAT solver based on MIP
1: procedure GenPSAT(props {xi}n  , form Γ, probform Σ)
i=1
ij	1,..., n , j	1,..., k
3:	0, 1 -variables: αi, πj, bij for i	1,..., n , j	1,..., k′
4:	real variable: ε
′

7:	add const(∑r hrj + ∑s(1 − hsj)≥ 1)	▷ (gamma)
9:	add const(∑j bij = αi)	▷ (val1)
11:	add const(0 ≤ bij ≤ hij)	▷ (val2)
12:	ij	j	ij	j
13:	aux ← 0
15:	switch(∞)
17:	add const(∑ ai ⋅ αi ≥ q)	▷ (prob≥)

20:	set obj(max ε)	▷ (obj)

22:	case “ ≠ ” ∶
24:	z ← fresh()	▷ z is a fresh binary variable
26:	set obj(max ε)	▷ (obj)

28:	add const(∑ ai ⋅ αi − C ⋅ z + ε ≤ q)	▷ (prob≠)
29:	add const(∑ πi = 1)	▷ (sums1)

31:	if (aux	0) or (aux	1 and mip objvalue	0) then
32:	return Sat
33:	return Unsat


where	Δ = {q − ∑l  (ai ⋅ α∗)∣ (∑l
aiPr(xi)< q)∈ Σ}  ∪

∪ {C ⋅ z∗ + q − ∑l  (ai ⋅ α∗)∣ ϕ ∈ Σ is of the form ∑l
aiPr(xi)≠ q}  ∪

∪ {C − C ⋅ z∗ − q + ∑l  (ai ⋅ α∗)∣ ϕ ∈ Σ is of the form ∑l	aiPr(xi)≠ q},
and, for each atomic probabilistic formula ϕ ∈ Σ of the form ∑l	aiPr(xi)≠ q,
⎧⎪ 0, if ∑l	ai ⋅ α∗ < q

z∗ = ⎨⎪
i=1	i	.

q	⎪ 1, if ∑l	a ⋅ α∗ > q

Now let us check that each linear constraint introduced into the MIP problem at Algorithm 1 is satisfied.
(gamma) {h∗ } satisfy the constraints modeling Γ since each v ∈ V0 satisfies Γ.
(val1) By definition of {b∗ } and {h∗ }, we actually have
ij	ij
k′	k′	k′
∗ = ∑ h∗ ⋅ ρj = ∑ vj(xi)⋅ ρj =	∑	ρj = α∗ .

j=1
j=1
j=1
{j∣vj (xi)=1}

(val2) Since 0 ≤ vj(xi)≤ 1 and 0 ≤ ρj ≤ 1 we immediately have 0 ≤ b∗	∗

For the other inequality, recall that h∗
●	=
= vj(xi) and that π∗ = ρj and note that:


h∗ − 1 + π∗ ≤ b∗ ≤ π∗

if h∗ = 1 then b∗ = π∗ and so π∗ ≤ b∗ ≤ π∗, i.e., h∗ − 1 + π∗ ≤ b∗
≤ π∗

ij	ij	j
j	ij	j
ij	j	ij	j
k′

(sums1) Since π∗ = ρj, we immediately conclude that
∗
j
j=1

To check that the probabilistic formulas are satisfiable, just note that, given a
probabilistic formula (∑l	aiPr(xi)∞ q)∈ Σ,

a ⋅  ∗	⎛
⎞	l	⎛ 2n	⎞

∑ i αi = ∑ ai ⎝	∑
ρj⎠ = ∑ ai ⎝∑ vj(xi)⋅ ρj⎠ .

(prob≥) Let (∑l	aiPr(xi) ≥ q) ∈ Σ and notice that, since ρ satisfies conditions
(i), (ii), (iii), in particular it satisfies all the probabilistic formulas in Σ, and so
∑l	a (∑2n v (x )⋅ ρ ) ≥ q, which implies that ∑l	a ⋅ α∗ ≥ q.
(prob<) Now, let (∑l	aiPr(xi)< q)∈ Σ and notice that, in a reasoning very similar
to the previous one, we can conclude that ∑l	ai ⋅ α∗ < q, i.e.
l
∗
i

But we should also note that, since ε∗ = min Δ, then ε∗ ≤ q − ∑l  (ai ⋅ α∗), and so
we obtain	l	l	l
∑(ai ⋅ α∗)+ ε∗ ≤ ∑(ai ⋅ α∗)+ q − ∑(ai ⋅ α∗)= q .

i
i=1
i
i=1
i
i=1

(prob≠) Finally, let us consider an atomic probabilistic formula ϕ ∈ Σ of the form

l
i=1
aiPr(xi) ≠ q, and recall once more that since ρ satisfies each probabilistic

formula of Σ, we have ∑l (ai ⋅ α∗)≠ q, in other words, either q − ∑l (ai ⋅ α∗)> 0

or q − ∑l (ai ⋅ α∗)< 0. Recall the constant C defined as C = 1 + ∣q∣+ ∑l
∣ai∣ and

the definition of z∗ and notice that both
C ⋅ z∗ + q − ∑(ai ⋅ α∗)> 0	(8)

and
q	i
i=1
l

C − C ⋅ z∗ − q + ∑(ai ⋅ α∗)> 0	(9)
q	i
i=1

are verified in either of the above cases.  Also note that by definition of ε∗,
ε∗ ≤ C ⋅ z∗ + q − ∑l  (ai ⋅ α∗) and ε∗ ≤ C − C ⋅ z∗ − q + ∑l  (ai ⋅ α∗). Hence, we now
analyze each of the previous cases:
if q > ∑l  (ai ⋅ α∗), then z∗ = 0 and it follows that
i=1	i	q
l	l	l
∑(ai ⋅ α∗)− C ⋅ z∗ − ε∗ ≥ ∑(ai ⋅ α∗)− C + C ⋅ z∗ + q − ∑(ai ⋅ α∗)= q − C,

i
i=1
q	i
i=1
q	i
i=1

and further,
l	l	l
∑(ai ⋅ α∗)− C ⋅ z∗ + ε∗ ≤ ∑(ai ⋅ α∗)+ C ⋅ z∗ + q − ∑(ai ⋅ α∗)= q.

i
i=1
q	i
i=1
q	i
i=1

if q < ∑l  (ai ⋅ α∗), then z∗ = 1 and it follows that
i=1	i	q
l	l	l
∑(ai ⋅ α∗)− C ⋅ z∗ − ε∗ ≥ ∑(ai ⋅ α∗)− C − (C − C ⋅ z∗ − q + ∑(ai ⋅ α∗)) = q − C,

i
i=1
q	i
i=1
q	i
i=1

and further,
l	l	l
∑(ai ⋅ α∗)− C ⋅ z∗ + ε∗ ≤ ∑(ai ⋅ α∗)− C + C ⋅ z∗ + q − ∑(ai ⋅ α∗)= q.

i
i=1
q	i
i=1
q	i
i=1

To finish the direct implication, notice that ε∗ > 0 as a consequence of (7), (8) and (9), and it takes the maximum possible value since otherwise, let ϕΔ be the formula in Σ which has the minimum value in Δ. Then, if there was a solution with greater objective value it would violate the constraint (probœ) for ϕΔ.
Reciprocally, assume that Algorithm 1 returned Sat, and let us denote by h∗ ,
α∗, ε∗ and π∗ the (optimal) solution for the variables hij, αi, ε and πj, for each
1 i≤ ≤	≤	≤ ′
j
Consider the set of valuations V0 = {v1,..., vk′ } where, for each propositional
i	j	i
that each valuation satisfies Γ. Then, let the probability distribution π be defined
n	∗	′
and ρj = 0 for k′ < j ≤ 2n. Note that (sums1) implies that π is a probability vector.
The third condition described in Lemma 4.1 is deduced by simple inspection of the
linear constraints (prob≥), (prob<), (prob≠) and (sums1), by definition of the matrix associated to Σ over 0 and recalling that the optimal value ε∗ is such that ε∗	0.
As a corollary of the previous propositions, we obtain the following result.
Theorem 4.4 The GenToMIP algorithm is a correct translation of GenPSAT to a
MIP problem of polynomial size.
Phase Transition
Phase transition is a phenomenon that marks a hardness shift in the solution of instances of a problem. This behaviour was observed in many NP-complete prob- lems [7], among which we highlight 3-SAT [16] and PSAT [11,12].
In this section, we study the GenPSAT phase transition, through an implemen- tation of Algorithm 1 and tests comprised of batteries of random instances. For


this, we measure the proportion of satisfiable instances as well as the average time the solver spent to solve them. The software was written in Java, and we used Gurobi [15], version 6.5.0, to solve the MIP problem. The machine used for the tests was a Mac Pro at 3,33 GHz 6-Core Intel Xeon with 6 GB of memory. Our implementation is available in [8].
It was noted that, in random 3-SAT instances [16] there is a clear stage where the instances are almost surely satisfiable and one where they are almost surely not satisfiable. This phenomenon is characterized by the existence of a threshold value for the ratio m n, where m is the number of clauses, and n is the number of variables, for which: for smaller values of the ratio, the SAT instances are almost certainly satisfiable and easily solved, whereas instances with larger ratio values are almost certainly unsatisfiable and also easily solved. However, with values of the ratio very closed to this threshold, the instances are, on average, very hard to solve and there is no certainty on whether the problem is satisfiable or not. As we have already noted, any 3-SAT problem can be seen as a GenPSAT instance. We tested our GenPSAT solver with random instances of 3-SAT, and observed that a phase transition occurs when the ratio m n is about 4.3, in accordance with [16], see Figure 1.

Fig. 1 Phase transition for SAT seen as a GenPSAT instance, with n = 20.	








A deeper analysis of the probabilistic satisfiability problem PSAT [11,12] has shown the presence of a phase transition behaviour for PSAT for a ratio m n, where m is the number of clauses and n is the number of variables. We tested random PSAT instances with the number of probabilistic formulas k  2, n  15 and m ranging from 1 to 105 in steps of 2. For each value of m, we generated 100 PSAT instances. The obtained results are presented in Figure 2.
We highlight that the analysis of the existence of a phase transition with vari- ation on k (instead of a variation on m) is essential for a deep understanding of the phase transition of the probabilistic satisfiability problem (instead of the phase transition of the satisfiability problem for propositional formulas in the presence of probabilistic formulas). For this purpose, we tested random PSAT instances with n  30, m  40 and k ranging from 1 to 25, and also observed a phase transition



Fig. 2 PSAT phase transition seen as a GenPSAT instance, with n = 15 and k = 2. 







with respect to k/n based on 100 instances for each value of k, see Figure 3.

Fig. 3 PSAT phase transition seen as a GenPSAT instance, with n = 30 and m = 40.








In [1], this phase transition analysis was performed on a generalization of the probabilistic satisfiability problem, GPSAT, which consists in Boolean combinations of simple probabilistic formulas.
In what concerns our generalized version of probabilistic satisfiability GenPSAT, notice that a randomly sampled probabilistic formula can easily be inconsistent by itself, e.g., when it implies one of the probabilities is greater than 1. Because of this, the sampling of the coefficients was performed in such a way that this case does not occur.
GenPSAT gives us a wider scope of ratios to study the phase transition behaviour. Due to its generalized nature, we have four dimensions to explore: the number of variables n, the number of clauses m, the number of probabilistic formulas k and the maximum size of the linear combination into the probabilistic formulas l. We
analysis of the phase transition for the variation of l/n in future work.
By performing random tests, we observe the presence of a phase transition for the ratio of k n with a very short stage of satisfiable formulas. This is explained since a GenPSAT instance is more likely to be unsatisfiable. Figure 4 represents the phase transition for random GenPSAT instances with n  20, m  10 and k ranging


from 1 to 100 in steps of 2. We generated 100 instances for each value of k.

Fig. 4 Phase transition for random GenPSAT instances, with n = 20 and m = 10. 








On the other hand, when the parameters n and k are fixed, we are also able to detect a phase transition. Figure 5 represents the result of testing random GenPSAT instances with n  15, k  2 and m ranging from 1 to 105 in steps of 2. For each value of m we generated 100 GenPSAT instances.

Fig. 5 Phase transition for random GenPSAT instances, with n = 15 and k = 2.







Conclusion and future work
Throughout this work we explored a generalized version of probabilistic satisfiability, GenPSAT. Capitalizing on its NP-completeness, we presented a polynomial reduction from GenPSAT to MIP, which was proved to be correct. Since the translated MIP problem only suffers a quadratic growth, we were able to solve reasonably sized instances for different values of the parameters: number of variables, clauses and probabilistic formulas. Seeing that an instance can be parametrized by different combinations of these parameters, we are able to make a rich analysis of the phase transition, by analyzing the behaviour for different ratios. As future work, we leave open the study of the phase transition taking into account also the size of the linear combination in the probabilistic formulas, as well as a 4th-dimensional analysis on the variation of the parameters.
We built a tool that implements this algorithm, which although being able to solve reasonably sized instances, can be greatly improved and optimized. In this

sense, we are exploring the reductions of GenPSAT to SMT and SAT, which could significantly enhance the solver given the performance of the available tools for these problems. We also leave as future work the study of the relationship between GenPSAT and weighted MaxSAT.
Soon, we expect to develop applications of GenPSAT to model problems in sev- eral contexts, namely in the automated analysis of security protocols and estimation of probabilities for the existence of offline guessing attacks, [17]. For this purpose, we are currently developing an automated tool that uses the GenPSAT solver to reason about probabilistic formulas involving equations and domain restrictions.
References
G.D. Bona, F. G. Cozman, and M. Finger. Generalized probabilistic satisfiability through integer programming. Journal of the Brazilian Computer Society, 21(1):1–14, 2015.
A. Biere, M. Heule, and H. van Maaren. Handbook of satisfiability, volume 185. IOS press, 2009.
G. Boole. Investigation of The Laws of Thought On Which Are Founded the Mathematical Theories of Logic and Probabilities. 1853. Also available from Dover, New York 1958, ISBN 0-486-60028-9.
V. Chandru and J. Hooker. Optimization methods for logical inference. Wiley-Interscience series in discrete mathematics and optimization. John Wiley and sons, Inc, New York, 1999.
V. Chva´tal. Linear programming. Macmillan, 1983.
F. G. Cozman and L. F. Ianni. ECSQARU 2013. Proceedings, chapter Probabilistic Satisfiability and Coherence Checking through Integer Programming, pages 145–156. Springer Berlin Heidelberg, 2013.
P. Cheeseman, B. Kanefsky, and W. M. Taylor. Where the really hard problems are. In IJCAI, volume 91, pages 331–340, 1991.
F. Casal, A. Mordido, and C. Caleiro.	Genpsat solver, 2016.	Available online at https://github.com/fcasal/genpsat.git.
S. A. Cook. The complexity of theorem-proving procedures. In Proceedings of the third annual ACM symposium on Theory of computing, pages 151–158. ACM, 1971.
L. De Moura and N. Bjørner.	Satisfiability modulo theories: introduction and applications.
Communications of the ACM, 54(9):69–77, 2011.
M. Finger and G.D. Bona. Probabilistic satisfiability: Logic-based algorithms and phase transition. In
IJCAI, pages 528–533. IJCAI/AAAI, 2011.
M. Finger and G.D. Bona. Probabilistic satisfiability: algorithms with the presence and absence of a phase transition. Annals of Mathematics and Artificial Intelligence, 75(3):351–389, 2015.
R. Fagin, J. Y. Halpern, and N. Megiddo. A logic for reasoning about probabilities. Inf. Comput., 87(1-2):78–128, 1990.
G. Georgakopoulos, D. Kavvadias, and C. H Papadimitriou. Probabilistic satisfiability. Journal of Complexity, 4(1):1 – 11, 1988.
Inc. Gurobi Optimization. Gurobi optimizer reference manual, 2015.
I. P. Gent and T. Walsh. The hardest random SAT problems. Springer, 1994.
A. Mordido and C. Caleiro. Probabilistic logic over equations and domain restrictions - full version. 2015. SQIG - Instituto de Telecomunica¸c˜oes and IST - U Lisboa, Portugal. Submitted for publication. Available online at http://sqig.math.ist.utl.pt/pub/CaleiroC/15-MC-probeq.pdf.
N. J. Nilsson. Probabilistic logic. Artif. Intell., 28(1):71–88, February 1986.
C.H. Papadimitriou and K. Steiglitz. Combinatorial Optimization: Algorithms and Complexity. Dover Books on Computer Science. Dover Publications, 1982.
Jason Rosenhouse. The Monty Hall problem: the remarkable story of Math’s most contentious brain teaser. Oxford University Press, 2009.
G. S. Tseitin. On the complexity of derivations in the propositional calculus. Studies in Mathematics and Mathematical Logic, Part II:115–125, 1968.
