Available online at www.sciencedirect.com


Electronic Notes in Theoretical Computer Science 348 (2020) 61–83
www.elsevier.com/locate/entcs


Dual and Axiomatic Systems for Constructive S4,
a Formally Verified Equivalence
Lourdes del Carmen González Huesca1,2,3
Favio E. Miranda-Perea2,4 P. Selene Linares-Arévalo2,5
Departamento de Matemáticas, Facultad de Ciencias UNAM, Circuito Exterior S/N,
Cd. Universitaria 04510, CdMx, México

Abstract
We present a proof of the equivalence between two deductive systems for the constructive modal logic S4. On one side, an axiomatic characterization inspired by Hakli and Negri’s Hilbert-style system of derivations from assumptions for modal logic K. On the other side, the judgmental reconstruction given by Pfenning and Davies by means of a so-called dual natural deduction approach that makes a distinction between valid, true and possible formulas. Both systems and the proof of their equivalence are formally verified using the Coq proof assistant.
Keywords: modal logic S4, constructive logic, natural deduction, dual calculus, formal verification, Coq


Introduction
The relevance of modal logic in philosophy and mathematics is well established. Moreover, its importance in computer science has come of age (see [14] for a brief introduction to modal logic from the computer science point of view). For in- stance, the monadic and computational interpretations of modal logic [6,4] for various type theories are deeply related to concurrent and distributed computa- tions [21,32]. These applications entail the need for a verification process which nowadays cannot be thought of without the help of a proof assistant.

1 Supported by DGAPA-UNAM posdoctoral fellowships.
2 Partially supported by PAPIME UNAM PE102117.
3 Email: luglzhuesca@ciencias.unam.mx
4 Email: favio@ciencias.unam.mx
5 Email: selene_linares@ciencias.unam.mx

https://doi.org/10.1016/j.entcs.2020.02.005
1571-0661/© 2020 The Author(s). Published by Elsevier B.V.
This is an open access article under the CC BY-NC-ND license (http://creativecommons.org/licenses/by-nc-nd/4.0/).

To be able to carry out serious verification tasks with the help of these software programs, we need to provide them with an implementation of deductive method- ologies akin to human (mathematical) thinking. This poses a problem in the case of modal reasoning, where the typical deductive systems in the literature are ax- iomatic or elaborated sequent calculi (see for example [26]). Moreover, some known natural deduction presentations of modal logic are sophisticated formalisms, that either involve the semantics, like labelled deduction systems ([31], see also [15] for a comprehensive overview of modal natural deduction systems); or require some clumsy conventions that make them difficult to be implemented in a proof assis- tant, for example, the use of special subproofs (boxes) and conventions in Fitch-style systems ([5], [9], [10, Section 1.6], [19, p. 34]) or elaborated cases like [3] for the specific case of constructive necessity.
In the case of constructive modal logic S4 (see [29, Section 1.5] for a brief intro- duction to constructive modal logics), these problems are mitigated by considering the judgmental reconstruction of this logic proposed by Pfenning and Davies [24]. They use an approach that follows the constructive philosophy of Martin-Löf [22] by means of hypothetical and categorical judgments. Our specific goal here is to show the equivalence between this system, called dual natural deduction by Kavvos [17] and an axiomatic system in the style of Hakli and Negri [13]. This ensures that the dual system exactly corresponds to the more common axiomatic formalisms for modal logic. To the best of our knowledge the literature lacks of such proof (though, for the case of constructive necessity, this has been settled by Kavvos [17] and by our previous work [12]). This equivalence yields two deductive formalisms of necessity, one providing an amicable system to perform actual modal proofs of constructive necessity. As already mentioned, this is relevant to computer science applications but also for mathematical or philosophical discussions around necessity that require the development of actual derivations that could be quite tortuous to obtain in the axiomatic system.
The results exposed here extend our previous work around constructive neces- sity [12] by adding the 3 possibility operator as primitive, thus the modalities present are 2A and 3A with their usual meanings: “A is necessary”, and “A is possible”, respectively. Recall that in the constructive setting there is no dual- ity between 2 and 3 modal operators. The extension of the axiomatic system is straightforward, for we only need to add the axioms pertinent to 3. However, in the case of natural deduction, the system needs to handle not only formulas, but modal judgments (A true,A poss) stating that a formula can be either true or pos- sible. It is important to remark that these qualifiers, and also that for validity, are defined following the semantic intuition of Kripke’s possible worlds, but in this paper there is no formal treatment of semantics. This feature allows us to describe modal knowledge syntactically, while still posing some challenges with respect to our mechanization.
The proof approach here taken was gained from a full synergy between pure mathematical paper-and-pencil reasoning and mechanized proof attempts (see the proof of Theorem 3.1 for an actual example). This path led us to some novel proof

techniques. For instance, the admissibility of several inference rules here presented is not proved by structural induction on (the height or length of) 6 derivations. Instead, a simpler structural induction on contexts of proved sequents suffices (for example see the proofs of Theorem 3.3 and Lemma 4.11). This succeeds due to the fact that contexts are implemented as an inductive list data structure, not as a set or multiset. Moreover, most of the proofs here presented make heavy use of structural rules, whose particular shape was gained from the interactive verification process. This is an important difference with respect to other deductive system treatments, where the structural rules are either absent or its use is implicit, a feature that cannot be translated to the Coq formal development.
Our exposition begins with the syntax of formulas and contexts for modal logic S4. The axiomatic system is briefly discussed in Section 3. The natural deduction system NS4 is developed in Section 4 and a discussion of its substitution properties appears in Section 5. The equivalence of these systems is proved in Section 6. To close, we give some final remarks in Section 7. The full Coq development is available at https://bitbucket.org/luglzhuesca/mlogic-formalverif/src/master/S4

Formulas and contexts
We adopt in this work the characterization of the notion of modal derivability by means of hypothetical judgments (sequents) Γ ▶ A where Γ is a finite collection of hypotheses, called the context, and A is a formula. Such a sequent can be read as ‘A follows from the collection of hypotheses Γ’. In this brief section we recall the definition of formulas and contexts.
Modal formulas are generated by the following grammar:
A, B ::= pn | A → B | 2A | 3A
where pn denotes an element taken from an infinite supply of propositional variables, indexed by a natural number. Observe that implication is the only propositional connective, in particular we do not consider neither negation nor the constant ⊥. Therefore we will be dealing with the implicational fragment of minimal logic [28] extended with modal operators of necessity and possibility. The logic here consid- ered is called constructive due to its specific Kripke semantics not discussed here (see [1]). The constructive modal logics differ from the classical and intuitionistic versions in several aspects (see [16,27,29]). For instance, in classical logic the dual- ity axiom 3A ↔ ¬2¬A holds, but not in the intuitionistic systems, which include the formula ¬3⊥ as an axiom, same formula that is rejected in constructive modal logics.
Contexts are implemented as finite lists of formulas built from the empty list, de- noted here by ·, and a constructor that generates a new list from a given one by

6 On the height, if derivations are considered trees or on the length, if they are sequences like in this work.

adding a new element to its right-end. They are formally defined as follows:
Γ ::= ·| Γ,A 
It is worth noting that the formula A in the context Γ,A does not have to be a new formula. Furthermore, the append operation of two contexts Γ and Γ' is denoted with a semicolon Γ; Γ'. This operation is recursively defined in the obvious way.
Our implementation choice for contexts, an inductive definition of the above grammar, is guided by the proof approach mentioned in the introduction. Several so-called low-level properties about contexts are required by the proof assistant to complete the formal verification process. Such properties, like the fact that the append of lists is associative, correspond to the kind of background results employed in paper-and-pencil proofs without further notice. Their particular form is designed to be able to automate them in an optimal way. However, they are absent in our exposition due to lack of space, but see the comment after the proof of Theorem 3.1 for an actual important example.



Axiomatic system for S4
In contrast to the usual axiomatic deductive systems, the one here presented, origi- nally given by Hakli and Negri in [13] for the classical modal logic K, is specifically designed to derive consequences from hypotheses and not only from axioms or pre- vious theorems. As deeply discussed by Hakli and Negri this is the key to be able to validate the deduction theorem, which sometimes is considered invalid for modal logic due to the fact that, in the absence of a precise definition of what a proof using assumptions is; such assumptions are considered as additional temporary axioms, which is the source of the invalidity of the deduction theorem.
The set A of axioms defining the modal logic S4 is
A1 A → (B → A)	A3 !A → (B → C)" → !B → (A → C)"
A2 !A → (A → B)" → (A → B)  A4 (B → C) → !(A → B) → (A → C)"


K 2(A → B) → (2A → 2B)   3K 2(A → B) → (3A → 3B)
T 2A → A	3T A → 3A
4 2A → 22A	34 33A → 3A

From these axioms we generate a relation of modal derivability Γ ▶HS4 A by means of the following inductive definition where, as previously defined, contexts

are finite lists of formulas.
A ∈ Γ

A ∈A 

Γ ▶HS4
(Hyp)
A
Γ ▶HS4
(Ax)
A

Γ ▶HS4 A	Γ' ▶HS4 A → B
· ▶HS4 A

Γ';Γ ▶

HS4
(MP)
B
Γ ▶HS4
(Nec)
2A

Let us observe that the necessitation rule concedes us to introduce a 2 operator only if the formula to be boxed is a theorem. This restriction solves the controversy around the validity of the deduction theorem. Moreover, the (MP) rule (MP) is stated in a multiplicative (independent contexts) style. The reason is that this is the natural way for the establishment of a correspondence of HS4 with usual axiomatic systems, that is, those that do not handle hypotheses. This choice departs from the treatment in Kavvos [17] and also poses some challenges for the formal verification, as discussed in our previous work [12]. Let us also note that, since axiom 3T is present, there is no need for an inference rule involving the 3 operator (though see Lemma 3.6 below).
The deduction theorem and other admissible rules are discussed next.
Theorem 3.1 (Deduction) For any context Γ and A, B propositions, if Γ,A ▶HS4
B then Γ ▶HS4 A → B.
Proof Structural induction 7 on Γ,A ▶HS4 B.
The case of (Hyp) follows by analysis of the hypothesis B ∈ Γ, A. Two cases arise: either B is A or B ∈ Γ. In the first case Γ ▶HS4 B → B is directly derived from axioms A1 and A2. For the second case, B ∈ Γ implies that Γ ▶HS4 B. From this sequent and · ▶HS4 B → (A → B), which is an instance of axiom A1, we get the desired Γ ▶HS4 A → B by (MP).
For the case of the axiom rule (Ax) the proof succeeds by (MP) and an adequate
instance of axiom A1.
For the (Nec) rule, the goal is to prove Γ ▶HS4 A → 2C, assuming that · ▶HS4 C. This is achieved by (MP) from axiom A1, in the form · ▶HS4 2C → (A → 2C), and Γ ▶HS4 2C, which comes out of the hypothesis by (Nec).
Finally, for the case of rule (MP), we have Γ1 ▶HS4 C (1) and Γ2 ▶HS4 C → B (2)
where Γ2; Γ1 = Γ, A. From this equation two cases are generated: either Γ1 is empty or its last element is A.
If Γ1 = · , then Γ,A = Γ2 and hypothesis (1) becomes · ▶HS4 C. From (2), the induction hypothesis yields Γ ▶HS4 A → (C → B). This sequent together with an instance of axiom A3 produces, by (MP), the sequent Γ ▶HS4 C → (A → B). Finally, Γ ▶HS4 A → B is obtained by applying (MP) again to the last sequent and to the hypothesis (1).

7 This is the actual native inductive principle of the Coq mechanization. The proof can also be seen as employing an induction on the length of the derivation.

If A is the last element of Γ1 then there exists another context Γ' such that Γ1 = Γ', A. This implies that Γ = Γ2; Γ'. From · ▶HS4 (C → B) → !(A → C) → (A → B)" (axiom A4) and hypothesis (2) we obtain Γ2 ▶HS4 (A → C) →
(A → B). Finally, by (MP) of this sequent with Γ' ▶HS4 A → C (coming from
the induction hypothesis applied to (1)), it follows that Γ2; Γ' ▶HS4 A → B, which is the same as Γ ▶HS4 A → B.
2
It is worth noting that the deduction theorem is valid without further con- straints, due to the fact that the essential restriction for its validity is already enforced by the specific definition of the necessitation rule.
The above proof provides an example of an alternative demonstration gained from the interaction between man and machine. One that stems from a mechaniza- tion attempt of an already well-established proof given in [13]. The two instances of case analysis occurring in the above proof are mechanized in Coq with the help of two previously formalized low-level results, namely the fact that if B ∈ Γ,A then either B ∈ Γ or B is exactly A; and a lemma on context decomposition saying that if Γ2; Γ1 = Γ,A then either Γ1 is empty and Γ2 = Γ,A or there is a context Γ' such that Γ1 = Γ',A and Γ2; Γ' = Γ.
The converse implication of the deduction theorem, also known as the principle of detachment, is also easily achieved.
Theorem 3.2 (Principle of detachment) For any context Γ and A, B proposi- tions, if Γ ▶HS4 A → B then Γ,A ▶HS4 B.
Proof By (MP) of the hypothesis and A ▶HS4 A.	2
From an strict point of view, the sequent A ▶HS4 A in the above proof is incorrect (A is not a context). Instead we should use ·,A ▶HS4 A. Thus, the above argument yields the sequent Γ; ·,A ▶HS4 B and a simple equational reasoning in contexts using the fact that Γ; ·,A = Γ,A yields the desired sequent. This is again a low- level justification process required by Coq.
Since contexts are lists, the deduction theorem allows us to discharge only the last assumption in the context. To be able to discharge any hypothesis we must either use structural rules implicitly or prove a generalization. We choose the second option and spell out the proof which, though quite simple, serves to show the, to the best of our knowledge, novel method of proving the admissibility of an inference rule by induction on the context. Of course, what is new here is to use a routinary induction on lists (contexts) to prove the admissibility of a rule.
Theorem 3.3 (Generalized Deduction Theorem) Let Γ, Γ' be contexts and
A, B be propositions. The rule
Γ, A; Γ' ▶HS4 B

is admissible.
Γ; Γ' ▶
HS4
(GDT)
A → B

Proof Induction on Γ'.
The base case Γ' = · is just the Deduction Theorem 3.1. For the inductive step assume that Γ, A; Γ',C ▶HS4 B, which implies Γ, A; Γ' ▶HS4 C → B by Theorem 3.1. The I.H. yields now Γ; Γ' ▶HS4 A → C → B. From this by (MP) with an adequate instance of axiom A3 we get Γ; Γ' ▶HS4 C → A → B. Finally the principle of detachment (Theorem 3.2) allows us to conclude Γ; Γ',C ▶HS4 A → B.	2
Several further properties of system HS4 are gained thanks to the availability of the deduction theorem and its inverse. We present next two of them, regarding con- text permutation and contraction, that will be needed later to show the equivalence between the axiomatic and natural deduction approaches to S4.
Lemma 3.4 (Structural rules) For any contexts Γ, Γ' and formula A, the rules
Γ; Γ' ▶HS4 A	Γ; Γ ▶HS4 A

Γ';Γ ▶
are admissible.
HS4
(Ctx-Perm)
A
Γ ▶HS4 A
(Ctx-cont)

Proof Induction on Γ in each case. Theorem 3.3 and the detachment principle will be quite useful.	2
It is important to remark that the above rules guarantee that the derivation process is preserved under the permutation of two contexts and by contracting a duplicated context. On the other hand, the append operation ; is neither commu- tative nor idempotent.
Next we prove the admissibility of two rules that allow to derive modal formulas, namely a rule for diamond introduction and a generalization of the neccesitation rule when a context is non-empty but consists only of boxed formulas.
Definition 3.5 Given a context Γ = [A0,.	, An] we define the boxed context Γ2
as Γ2 = [2A0,.	, 2An].
Lemma 3.6 (Modal introduction rules) For any contexts Γ, Γ' and formula A, the rules
Γ2 ▶HS4 A	Γ ▶HS4 A



are admissible.
Γ2; Γ' ▶

HS4
(GenNec)
2A
Γ ▶HS4
(Dia)
3A

Proof For the first rule, by the (Ctx-Perm) rule it suffices to show that Γ'; Γ2 ▶HS4 2A, which is verified by induction on Γ. The second rule is directly derivable from axiom 3T and (MP).	2
This finishes our presentation of the axiomatic system for S4. Next we discuss the natural deduction formalism.

Natural deduction for S4
The here discussed formalism for S4, denoted NS4, is a natural deduction system in sequent form, called S-system in [15], where propositions are analyzed judgmen- tally. It corresponds to the formal system for necessity and possibility presented by Pfenning and Davies in [24, Section 5], a work based in the philosophical develop- ment of Martin-Löf Type Theory [23]. This formal system makes use of intuitive semantic notions implicit in an essential distinction of three basic judgments whose purpose is to describe modal knowledge without an explicit use of worlds. The A true judgment denotes how to verify A under hypothetical judgments, that is, in the actual given world. A valid represents, by means of categorical judgments, a proposition whose truth does not depend on true hypotheses, that is, a propo- sition that holds at any given world. Finally, A poss represents a possible truth, which implies that A must be the only available true hypothesis in a hypothetical judgment, thus representing a particular world where we do not know anything but the truth of A. It is important to observe that the meaning of the labels in the definition of these judgments is mere intuitive, for there is no formal semantics involved in the following. Instead we could use labels like global, local and unique. The distinction between valid and true hypotheses is related to the notion of local and global assumptions of Fitting [8, p.177]. but we prefer to keep the terminology of [24].
Our natural deduction approach handles sequents of the form Δ|Γ ▶NS4 J , where the antecedents Δ and Γ are contexts for valid and true hypotheses respectively, and the succedent J is a conclusion judgment, which are judgments of truth or possibility, formally defined as:
J ::= A true | A poss
Let us observe that contexts contain formulas and not judgments as in the original formulation where, from a strict point of view, there is only one context split in two parts, an option that would be quite complicated to manipulate in Coq. Instead, our choice simplifies the presentation and implementation of both contexts and sequents. For instance, there is no need for an explicit judgment of validity (A valid), since the contexts are implemented as two disjoint lists, making the use of true and valid labels redundant. That is, both metavariables Δ and Γ represent lists generated by the grammar in section 2. This implies in particular that Δ can ocurr as the right context in the antecedent of a sequent (see propositions 5.4 and 5.5), and that there is no syntactic restriction on the elements of Δ or Γ. For instance, a boxed formula 2A can ocurr both in Δ and Γ (but see section 4.2 for a way to move formulas between contexts). This kind of separated contexts is referred to as a dual context notion by Kavvos in [17]. Also, there is no need to explicitly consider neither hypotheses of possibility, as they are modelled by unique true assumptions, nor judgments of validity as conclusions, since they are represented by the judgment 2A true.
Another difference with the original formulation lies in the fact that, as the

authors mention, their system has an explicit propositional reasoning and only an implicit judgment reasoning, saying that the derivability relation is subject to the inclusion of A true in A poss. The more convenient way to implement this feature is by an explicit rule called here (TP), which converts a True judgment into a Possibility judgment. Here, the derivability relation is mechanized by an inductive definition, given by the inference rules below, which corresponds to a shallow embedding of derivability. Therefore the explicit statement and use of rule (TP) is mandatory. This rule, which can be considered as an introduction of possibility, is mentioned in [24] as an alternative formulation, less efficient than the current system, including only the definitions for modal operators and the rule (TP) as the introduction of the A poss judgment.
System NS4 is defined by the following inference rules:

Δ|Γ, A; Γ' ▶	A true (Thyp)	Δ, A; Δ'|Γ ▶	A true (Vhyp)

Δ|Γ,A ▶NS4 B true	Δ|Γ ▶NS4 A → B true	Δ|Γ ▶NS4 A true

Δ|Γ ▶NS4
A → B true
Δ|Γ ▶NS4
B true


Δ|· ▶NS4 A true	Δ|Γ ▶NS4 2A true	Δ, A|Γ ▶NS4 C true

Δ|Γ ▶NS4
2A true
Δ|Γ ▶NS4
C true


Δ|Γ ▶NS4 2A true	Δ, A|Γ ▶NS4 C poss



Δ|Γ ▶NS4 A true
Δ|Γ ▶NS4
(2E-Poss)
C
Δ|Γ ▶NS4 A poss

Δ|Γ ▶NS4
A poss
Δ|Γ ▶NS4
3A true


Δ|Γ ▶NS4 3A true	Δ|A ▶NS4 C poss

Δ|Γ ▶NS4
C poss

We have two starting rules corresponding to both types of hypotheses, they are stated in the most general way granting us to infer any formula that belongs to a context, not only the first or the last one. The rule for introduction of necessity (2 I) exactly captures the definition of validity through a categorical judgment, whilst the rule of necessity elimination (2 E) behaves as a substitution or cut rule where the formula 2A is used as lemma A in the valid hypotheses in order to prove a conclusion judgment about C. The judgment A poss is explained with a combination of valid and true judgments by the rules (2E-Poss), (TP), (3 I) and (3 E). The second elimination rule for the 2 operator is given in order to conclude a local truth as

C poss, this rule takes advantage of a lemma of the form 2A true. The introduction and elimination rules for the 3 operator are indeed the definition of possibility given in [24].
Let us show next the derivations in NS4 corresponding to the modal scheme axioms of S4.
Example 4.1 [Scheme T] The sequent · |· ▶NS4 2A → A true is derivable in NS4.
·| 2A ▶NS4 2A true	(Thyp)
A | 2A ▶NS4 A true	(Vhyp)
·| 2A ▶NS4 A true	(2 E)	1, 2
·|· ▶NS4 2A → A true (→ I) 3
Example 4.2 [Scheme 4 ] The sequent · |· ▶NS4 2A → 22A true is derivable in
NS4.
A | 2A ▶NS4 22A true	(2 I)	2
·| 2A ▶NS4 2A true	(Thyp)
·| 2A ▶NS4 22A true	(2 E)	4, 3
·|· ▶NS4 2A → 22A true (→ I) 5
Example 4.3 [Scheme K] The sequent · |· ▶NS4 2(A → B) → (2A → 2B) true is derivable in NS4.
A, A → B |· ▶NS4 A true	(Vhyp)
A, A → B |· ▶NS4 A → B true	(Vhyp)
A, A → B |· ▶NS4 B true	(→ E) 2, 1
A, A → B | 2(A → B), 2A ▶NS4 2B true	(2 I)	3
A | 2(A → B), 2A ▶NS4 2(A → B) true	(Thyp)
A | 2(A → B), 2A ▶NS4 2B true	(2 E)	5, 4
·| 2(A → B), 2A ▶NS4 2A true	(Thyp)
·| 2(A → B), 2A ▶NS4  2B true	(2 E)	7, 6
·| 2(A → B) ▶NS4 2A → 2B true	(→ I)  8
·|· ▶NS4 2(A → B) → (2A → 2B) true (→ I)  9

Example 4.4 [Scheme 3T] The sequent · |· ▶NS4 A → 3A true is derivable in NS4

Example 4.5 [Scheme 34 ] The sequent · |· ▶NS4 33A → 3A true is derivable in
NS4.
8.	·|· ▶NS4 33A → 3A true (→ I)	8
Example 4.6 [Scheme 3K] The sequent · |· ▶NS4 2(A → B) → (3A → 3B) true
is derivable in NS4.
A → B | A ▶NS4 A → B true	(Vhyp)
A → B | A ▶NS4 A true	(Thyp)
A → B | A ▶NS4 B true	(→ E) 1, 2
A → B | A ▶NS4 B poss	(TP)	3
A → B | 2(A → B), 3A ▶NS4 3A true	(Thyp)
A → B | 2(A → B), 3A ▶NS4 B poss	(3E)	4, 5
A → B | 2(A → B), 3A ▶NS4 3B true	(3I)	6
·| 2(A → B), 3A ▶NS4 2(A → B) true	(Thyp)
·| 2(A → B), 3A ▶NS4 3B true	(2E)	7, 8
·| 2(A → B) ▶NS4 3A → 3B true	(→ I)	9
·|· ▶NS4 2(A → B) → (3A → 3B) true (→ I)	10
Finally a more elaborated example involving the use of both rules for 2 elimination.
Example 4.7 The sequent ·|· ▶NS4 2(A → B) → 3(2A → 3B) true is derivable

in NS4.

A → B | 2(A → B), 2A, A ▶NS4 A → B true	(Vhyp)
A → B | 2(A → B), 2A, A ▶NS4 A true	(Thyp)
A → B | 2(A → B), 2A, A ▶NS4 B true	(→ E) 1, 2
A → B | 2(A → B), 2A ▶NS4 2A true	(Thyp)
A → B | 2(A → B), 2A ▶NS4 B true	(2 E)	4, 3
A → B | 2(A → B), 2A ▶NS4 B poss	(TP)	5
A → B | 2(A → B), 2A ▶NS4 3B true	(3 I)	6
A → B | 2(A → B) ▶NS4 2A → 3B true	(→ I)	7
A → B | 2(A → B) ▶NS4 2A → 3B poss	(TP)	8
· | 2(A → B) ▶NS4 2(A → B) true	(Thyp)
· | 2(A → B) ▶NS4 2A → 3B poss	(2 E-poss)10, 9
· | 2(A → B) ▶NS4 3(2A → 3B) true	(3 I)	11
· | · ▶NS4 2(A → B) → 3(2A → 3B) true (→ I) 12

Admissible rules
In this section we present some useful admissible rules which, though quite natural are, to the best of our knowledge and with the exception of Lemma 4.10, an original contribution gained again from the full interaction with the Coq proof assistant. The next statements are an abridge presentation of the ones included in our formal- ization. In there, the different rules are similar statements formulated separately for valid and true contexts combined with true and possible conclusions.
Lemma 4.8 (Weakening) Let Δ, Γ, Γ' be contexts, A, B be formulas and J a con- clusion judgment. The rules

Δ|Γ; Γ' ▶NS4 J
Δ|Γ, B; Γ' ▶NS4 J


(Weak-THyps)
Δ; Δ'|Γ ▶NS4 J
Δ, B; Δ'|Γ ▶NS4 J


(Weak-VHyps)

are admissible.
Proof Each rule is proved by structural induction on the given derivation.	2
Next we prove that rules (→ I) and (3I) are invertible.
Lemma 4.9 (Inversion for → and 3) Let Δ, Γ be contexts and A, B formulas.

The rules
Δ|Γ ▶NS4 A → B true
Δ|Γ ▶NS4 3A true

Δ|Γ,A ▶
are admissible.
NS4
B true
(Det)
Δ|Γ ▶NS4
(  I-Inv)
A

Proof The rule of detachment (Det) is a direct consequence of weakening and (→ E). The inversion of 3-introduction is proved using rules (TP) and (3 E).	2
Lemma 4.10 (Exchange) Let Δ, Γ, Γ' be contexts, A, B be formulas and J be a conclusion judgment. The rules
Δ|Γ, A,B ▶NS4 J	Δ, A, B|Γ ▶NS4 J

Δ|Γ, B,A ▶
are admissible.
NS4 J
(Exch-THyps)
Δ, B, A|Γ ▶NS4 J
(Exch-VHyps)

Proof The cases where J is C true are proved directly with the help of weakening, while those for C poss are proved by induction on the given derivation.	2
The next lemma presents some generalizations for contexts of the weakening and exchange rules of lemmas 4.8 and 4.10.
Lemma 4.11 (Structural context rules) Let Δ, Δ', Γ, Γ' be contexts, A be a formula and J be a true or possible judgment. The rules
Context Weakening:

Δ|Γ ▶NS4 J
Δ|Γ; Γ' ▶NS4 J


(TCtx-WeakR)
Δ|Γ ▶NS4 J
Δ|Γ';Γ ▶NS4 J


(TCtx-WeakL)

Δ|Γ ▶NS4 J
Δ; Δ'|Γ ▶NS4
Context Exchange:


(VCtx-WeakR)
J
Δ|Γ ▶NS4 J
Δ'; Δ|Γ ▶NS4

(VCtx-WeakL)
J

Δ|Γ, A; Γ' ▶NS4 J	Δ|(Γ; Γ'),A ▶NS4 J

Δ|(Γ; Γ'),A ▶
are admissible.
NS4 J
(ctx-exch-conc)
Δ|Γ, A; Γ' ▶

NS4 J
(ctx-exch-snoc)

Proof Each weakening rule is proved by induction on the context Γ', respectively Δ'. The proof of the exchange rules, when J is C poss, proceeds by structural in- duction on the premise, otherwise the proof succeeds by induction on the context Γ'. We show next the case for (ctx-exch-conc). The base case is straightfor- ward, for Γ, A; · = (Γ; ·),A and therefore both sequents, premise and conclusion are the same. For the inductive step we assume that Δ|(Γ, A); (Γ', B) ▶NS4 C true and need to prove Δ|(Γ; Γ', B),A ▶NS4  C true.  From the assumption we get

Δ|Γ, A; Γ' ▶NS4 B → C true, by means of some low-level equational reasoning for contexts and the rule (→ E). The IH yields now Δ|(Γ; Γ'),A ▶NS4 B → C true which, by the rule (Det) (lemma 4.9) leads us to Δ|(Γ; Γ'), A,B ▶NS4 C true. Fi- nally by exchange (lemma 4.10) and some low-level equational reasoning we arrive to Δ|(Γ; Γ', B),A ▶NS4 C true.	2
The analogous to the above rules, for the case of contexts of valid hypotheses, can be proved in a similar way. We can now prove a generalization of the implication introduction rule that allows us to discharge any true hypotheses.
Lemma 4.12 (Generalized Implication Introduction) Let Δ, Γ, Γ' be con- texts and A, B formulas. The rule
Δ|Γ, A; Γ' ▶NS4 B true


is admissible.
Δ|Γ; Γ' ▶

NS4
(Gen → I)
A → B

Proof Induction on Γ', using the exchange rules adequately.	2

Formula transference between contexts
We discuss next a result not present in [24], namely a transfer process between contexts. This is an inference principle that captures the fact that valid formulas are necessary truths, meaning that a formula A belonging to a valid context can be considered as a necessary truth. This is achieved by deleting A from the context of valid assumptions, while adding 2A to the context of true hypothesis.
On the other direction, we can get rid of a boxed formula in the true assumptions context by moving it without the box to the valid assumptions context. Thus converting a boxed hypothesis into a pure propositional one.
Proposition 4.13 (Valid formulas are necessary truths) Let Δ, Δ', Γ be contexts, A be a proposition and J be a conclusion judgment. The rule
Δ, A; Δ'|Γ ▶NS4 J



is admissible.
Proof Induction on Δ'.
Δ; Δ'|Γ, 2A ▶

NS4
(ValToTrue)
J

If J is C true then the base case is a consequence of the (2E) elimination rule, using weakening appropriately. Otherwise the base case is settled by induction on the premise.	2
We can iterate the application of the above property in such a way that the context of valid formulas becomes empty, this option is not adequate for actual proof construction in NS4, but plays an important role in the desired equivalence proof of our deductive systems

Corollary 4.14 Let Δ, Γ be contexts and J a conclusion judgment. If Δ|Γ ▶NS4 J
then ·|Δ2;Γ ▶NS4 J.
As another corollary we obtain a rule that allows for the discharge of valid hypotheses.
Corollary 4.15 (Implication introduction for validity) Let Δ, Γ be contexts and A, B be propositions. The rule
Δ, A; Δ'|Γ ▶NS4 B true


is admissible.
Δ, Δ'|Γ ▶NS4
(→I Val)
2A → B

Proof Induction on Δ'.	2
The above rule seems to be important for some special interpretations of the conditional, as in the case of lax logic where the lax implication can be defined as 2A → B (see [24, Section 7]). Furthermore, the rule is invertible according to the following proposition.
Proposition 4.16 (Detachment for boxed formulas) Let Δ, Γ, Γ' be contexts and A, B be formulas. The rule
Δ; Δ'|Γ ▶NS4 2A →B true


is admissible.
Δ, A; Δ'|Γ ▶NS4
(2 Det)
B

Proof Use (→ E), (2I) and weakening.	2
This proposition permits us to prove the following version of the inverse rule of Proposition 4.13.
Proposition 4.17 (Necessary truths are valid) Let Δ, Γ, Γ' be contexts, A be proposition and J be a judgment. The rule
Δ|Γ, 2A, Γ' ▶NS4 J



is admissible.
Proof Induction on Γ'.
Δ, A|Γ, Γ' ▶

NS4 J
(TrueToVal)

The case when J is C true is proved directly while the case for C poss is proved by induction on the given derivation.	2
Propositions 4.13 and 4.17 together provide the formula transfer principle be- tween contexts. This is an important tool for the actual development of derivations, one that allows us to manipulate modal formulas in the contexts by considering them

as pure (non-modal) propositions and vice versa. This feature considerably simpli- fies the actual construction of proofs and sometimes allows us to replace a modal reasoning by a simpler propositional one. Like in the example below, where there is no need of using the modal reasoning provided by the rule (2E).
Example 4.18 The sequent · | · ▶NS4 2(A → B) → 2(2A → 2B) true is deriv- able.

·|· ▶NS4 2(A → B) → 2(2A → 2B) true (→ I Val) 6
Next we discuss another powerful tool for actual derivations, namely the substi- tution or cut rule.

Substitution properties in NS4
In this section we show that NS4 enjoys the substitution or composition property (the analogous to the cut rule in sequent calculus), which ensures that derivations are closed under composition, or from a more practical point of view, guarantees the correctness of proofs organized with help of an auxiliary lemma (the hypothesis being cut or substituted in favor of an actual proof). As the system makes distinction between two kinds of hypotheses or conclusions, there are multiple substitution properties gained by following a combination of a specific hypothesis (either valid or true) and a particular conclusion judgment (either true or possible). The total number of combinations is eight, but only five are appropriated and already given by Pfenning and Davies [24, Section 5.1] where the proofs, though not present, are mentioned to being by structural induction on a premise. However, in our development, only two of five proofs follow this methodology, while the others are obtained directly from primitive and structural rules. The enumeration of the rules is the one given in [24, Theorem 2].
The first two principles involve an auxiliary lemma A, which is proven to be true (meaning that the judgment A true holds) and used as a true or valid hypothesis in order to conclude a judgment C true.
Lemma 5.1 (Substitution for a true conclusion) Let Δ, Δ', Γ, Γ' be contexts

and A, C be formulas. The rules
Δ|Γ ▶NS4 A true	Δ|Γ, A; Γ' ▶NS4 C true

Δ|Γ; Γ' ▶

NS4
C true
(subst-1)

Δ|· ▶NS4 A true	Δ, A; Δ'|Γ ▶NS4 C true


are admissible.
Δ; Δ'|Γ ▶NS4 C true
(subst-3)

Proof The rule (subst-1) is directly derivable from (→ E) using context weak-
ening (TCtx-WeakR) and (Gen → I).	The rule (subst-3) is derived using
(VCtx-WeakR) and (→ I Val).	2
Let us observe that, in the above proofs, we are using the transference process indirectly by making use of rule (→ I Val). This powerful rule avoids the use of induction. The next rules use and prove a lemma in the same way as the previous rules, but this time to conclude a possibility judgment C poss.
Lemma 5.2 (Substitution for a possible conclusion) Let Δ, Δ', Γ, Γ' be con- texts and A, C be formulas. The rules
Δ|Γ ▶NS4 A true	Δ|Γ, A; Γ' ▶NS4 C poss

Δ|Γ; Γ' ▶

NS4
C poss
(subst-2)

Δ|· ▶NS4 A true	Δ, A; Δ'|Γ ▶NS4 C poss


are admissible.
Δ; Δ'|Γ ▶NS4 C poss
(subst-4)

Proof Both rules are proved by induction on the second premise, using some of the structural rules defined above.	2
The above four substitution principles involve a lemma A for which the judgment A true holds. The last option considers the weak case where the lemma A only verifies the judgment A poss. Therefore A can only be used as a local truth, which is captured by requiring that A is the unique true hypothesis in the second premise. Due to locality, we can only conclude C poss.
Lemma 5.3 (Substitution of a possible lemma) Let Δ, Γ be contexts and
A, C be formulas. The rule
Δ|Γ ▶NS4 A poss	Δ|A ▶NS4 C poss


is admissible.
Δ|Γ ▶NS4
C poss
(subst-5)

Proof A direct consequence of the rules (3E) and (3I).	2

Interestingly enough the original proof of Lemma 5.3 points to an induction on the first premise, which was also our first option, only to discover later the above direct proof, with the help of the proof-assistant.
Note that the primitive elimination rules, (2E), (2E-Poss) and (3E) are in- stances of the above substitution principles where the lemma is an explicit modal proposition. On the other hand, as we said before, from the eight combinations, only the five just discussed are adequate. The other three combinations for substi- tution principles cannot be feasible as they do not respect the intuitive semantic notions. For instance, consider the case where a lemma A poss is considered as a truth in order to derive C true, that is, Δ|Γ, A; Γ' ▶NS4 C true. This case is not correct since A only verifies A poss and hence can only be used as local, meaning that the truth context must only contain A as in rule (subst-5). In this situation the conclusion must be again local, that is of the form C poss.
To close this section we present some examples of other known modal admissible rules about necessity (see v.gr. [17]) and proved here with the help of the substitution rules.
Proposition 5.4 (Scott’s Rule with weakening) For any contexts Δ, Γ and formula A the rule
·|Δ ▶NS4 A true


is admissible.
Proof Induction on Δ.
Δ|Γ ▶NS4
(2 IK )
2A

The base case holds by rule (2 I). The inductive case is proved by substitution (Subst-1) using an instance of axiom K (Example 4.3) and Δ|Γ ▶NS4 2(B → A) true, which is a consequence of the induction hypothesis.	2
Proposition 5.5 (Introduction rule for 4) For any contexts Δ, Γ and formula
A the rule
Δ|Δ ▶NS4 A true

is admissible.
Proof Induction on Δ.
Δ|Γ ▶NS4
(2 IK4)
2A

The base case is proved by (2 I) and weakening. For the inductive case, substitution rule (Subst-3) using 2B true as lemma, requires to prove Δ, B, 2B|Γ ▶NS4 2A true. By exchange and (→ I Val) the goal is to prove Δ, 2B|Γ ▶NS4 2B → 2A true which is achieved by the I.H. and two applications (→E) with an appropiate instance of the K scheme (example 4.3).	2

Equivalence
We come to our main contribution, a proof of the equivalence between the natural deduction system NS4 and its axiomatic counterpart HS4.

From HS4 to NS4
The translation of Hilbert-style to dual natural deduction proofs is straightforward. The proof transformation consists mainly in substituting every occurrence of an axiom for its explicit derivation in natural deduction. Moreover, as expected, the translation of a HS4-sequent will be a NS4-sequent whose context of valid hypotheses is empty. In our case, we also need weakening structural rules in NS4 (lemmas 4.8 and 4.11), since in HS4 the (MP) rule is multiplicative whereas the (→ E) rule of NS4 is additive, that is, it shares contexts in both premisses.
Theorem 6.1 (From axiomatic to natural deduction proofs) Let Γ be a context and A be a formula. The following holds:
If Γ ▶HS4 A then · |Γ ▶NS4 A true.
Proof Induction on Γ ▶HS4 A.
The derivability of the propositional axioms is left as a simple exercise on NS4 deriva- tions and that for modal axioms, is provided in the examples starting in page 10. The case of (MP) has the hypotheses Γ1 ▶HS4  B → A and Γ2 ▶HS4  B with Γ = Γ1; Γ2.  By the induction hypothesis we have · |Γ1 ▶NS4  B → A true and
· |Γ2 ▶NS4 B true. We apply to these sequents the Lemma 4.11, that is rules (tctx-
weakR) and (tctx-weakL) respectively, which yield · |Γ1; Γ2 ▶NS4 B → A true and · |Γ1; Γ2 ▶NS4 B true. The case is now settled by the (→ E) rule. The remaining cases are straightforward.	2
An evident corollary makes explicit the translation of a 3-formula.
Corollary 6.2 Let Γ be a context and A be a formula. If Γ ▶HS4 3A then · |Γ ▶NS4
A poss.
Let us observe that this translation was direct, due to the fact that the Hilbert- style system already handles sequents and not only formulas. If, instead, a deriva- tion in HS4 was a sequence of formulas, we would need a mechanism to collect the assumptions in a given deduction to be able to construct a context in NS4, as it is done for example in [25].

From NS4 to HS4
In this section we prove the translation of natural deduction proofs to axiomatic derivations. The idea is to follow Proposition 4.13, or rather Corollary 4.14 to empty the validity context, thus getting only a context of true assumptions which can be directly managed in HS4. The translation proof will be achieved by induction on NS4-derivations.

Theorem 6.3 (From natural deduction to axiomatic proofs) Let Δ, Γ be contexts and J be a conclusion judgment. Then
If Δ|Γ ▶NS4 J then Δ2;Γ ▶HS4 Jt
where Jt is deﬁned as (A true)t = A and (A poss)t = 3A.
Proof Structural induction on Δ|Γ ▶NS4 J .
The case (Thyp) is direct, whereas that for (Vhyp) follows by (MP) of · ▶HS4
2A → A (axiom T) and Δ2, 2A, Δ'2;Γ ▶HS4 2A.
The case of rule (→ I) is proved directly from the induction hypothesis by the deduc- tion theorem. For the case of (→ E) we apply (MP) to both inductive hypotheses to get (Δ2; Γ); (Δ2; Γ) ▶HS4 B, which is simplified to the desired Δ2;Γ ▶HS4 B by the contraction rule (Ctx-cont) of Lemma 3.4. For the case of (2 I) we as- sume Δ|Γ ▶NS4 2A true coming from Δ|· ▶NS4 A true, from which the I.H. yields Δ2 ▶HS4 A. The desired sequent Δ2;Γ ▶HS4 2A is obtained by the (GenNec) rule Lemma 3.6.
We show next the case for (2E-Poss) (for (2 E) the reasoning is analogous). Here,
we have to translate Δ|Γ ▶NS4 C poss and the I.H. yields Δ2;Γ ▶HS4 2A and Δ2, 2A;Γ ▶HS4 3C. From these sequents, using the rule (GDT), (MP) and (Ctx- cont), we get the desired Δ2;Γ ▶HS4 3C.
For the rule (3I), assume that Δ|Γ ▶NS4  A poss.  In this case the I.H yields
Δ2;Γ ▶HS4 3A which is exactly the translation of Δ|Γ ▶NS4 3A true. For the case (3E), let us assume that Δ|Γ ▶NS4 C poss comes from Δ|Γ ▶NS4 3A true and Δ|A ▶NS4 C poss. Our goal is to show Δ2;Γ ▶HS4 3C. By the axiom 34 it suffices to show Δ2;Γ ▶HS4 33C. By using the I.H Δ2;Γ ▶HS4 3A, and thanks to the rules (MP) and (Ctx-cont), it is enough to show Δ2;Γ ▶HS4 3A → 33C. But this sequent is a consequence of the axiom 3K and the sequent Δ2;Γ ▶HS4 2(A → 3C), which is derivable from the I.H. Δ2; A ▶HS4 3C by the deduction theorem and the rule (GenNec) of general necessitation.
The case of rule (TP) is a direct consequence of the I.H. and the axiom 3T.  2

Closing remarks
In this paper we discussed the equivalence of two deductive systems for the modal logic S4, namely the axiomatic system HS4 inspired by Hakli and Negri [13] and the natural deduction system NS4 from Pfenning and Davies [24]. The former is a Hilbert-style system incorporating the notion of derivability from assumptions, a device that helps to solve the controversy around the provability of the deduction theorem in modal logic. The latter is a natural deduction formalism in sequent form influenced by Martin-Löf’s methodology of judgments and propositions, allowing us to give constructive explanations for necessity and possibility.
To the best of our knowledge, this equivalence has not been addresed before in a dedicated manner, although there are works whose goals indirectly force to define systems like the ones developed here and their equivalence proofs. For instance the

Coq formalization of Litak, et al. [20] or the work of Kobayashi [18] whose methods, employing the sophisticated machinery of category theory and even introducing new concepts like that of L-strong monad, are far from elementary.
All the exposed work has been verified using the Coq proof assistant. Two main choices gave guideline to complete this paper and its formal verification. On one hand the implementation of hypotheses collections using a simple data structure, instead of sticking to sets or multisets, which require more sophisticated data struc- tures that complicate not only the automation but the correspondence with the usual proofs. On the other hand to reconcile a high-level reasoning at the math- ematical level, with low-level procedures related to interactive proof-development. These choices originated the proof approach taken here, which allowed us to present mathematical arguments involving some uncommon proof advances like the use of induction on contexts to show the admissibility of structural rules instead of the structural induction on derivations which is the preferred proof methodology in the literature. These arguments were obtained from the interaction with the reasoning facilites provided by the proof assistant. Moreover, the mechanization of proofs by using the Coq hints mechanisms allowed us to simplify some of the low-level steps, thus generating proof scripts that correspond more closely to the pure mathematical proofs.
A forthcoming line of research consists on the study of alternative rules to ma- nipulate and ease the proofs of possibility judgments. For instance an analogous rule to (→ I), but where the conclusion is a possibility judgment, would provide a way to introduce a hypothesis to such kind of conclusions. Another future research thread of our interest is related to the design of deductive systems adequate for interactive proof-search, along the lines of [25, Chapter 4]. Last but not least, we intend to investigate the benefits of our current implementation, in pursuing actual verification cases, like the formalization of modal lambda calculus in [11] or lax logic in [7], as well as the mechanization of Gödel’s interpretation of intuitionistic propositional calculus in S4 [30].
Regarding the semantical aspects of modal logic, an important line of future re- search consists of establishing completeness theorems for the two systems discussed in this paper. In the case of HS4 we conjecture this can be achieved with respect to the semantics presented in [1]. For the dual system NS4, the completeness theorem would confirm the correctness of the intuitive semantic notions employed here as the motivation for its definition. A precise definition of semantics would also answer some questions about the nature of the consequence relation captured by NS4, for example if it is a local or global consequence relation. The relationship between our concept of valid and true hypotheses and the global and local assumptions of [8] should also be investigated. Finally, a starting point for this research thread could be the work of [2], which discusses modal logic encodings by using separate consequence relations (semantical and deductive) related to classical validity and truth.

Acknowledgement
We appreciate the valuable feedback of the anonymous referees enhancing the con- tents of this paper.

References
Natasha Alechina, Michael Mendler, Valeria de Paiva, and Eike Ritter. Categorical and kripke semantics for constructive s4 modal logic. In Laurent Fribourg, editor, Computer Science Logic, pages 292–307, Berlin, Heidelberg, 2001. Springer Berlin Heidelberg.
Arnon Avron, Furio Honsell, Marino Miculan, and Cristian Paravano. Encoding Modal Logics in Logical Frameworks. Studia Logica, 60(1):161–208, Jan 1998.
Mario R. Benevides and Thomas S. E. Maibaum. A constructive presentation for the modal connective of necessity ( ). Journal of Logic and Computation, 2(1):31–50, 1992.
Eduardo Bonelli and Federico Feller. The logic of proofs as a foundation for certifying mobile computation. In Logical Foundations of Computer Science, International Symposium, LFCS 2009, Deerfield Beach, FL, USA, January 3-6, 2009. Proceedings, pages 76–91, 2009.
Ranald Clouston. Fitch-style modal lambda calculi. CoRR, abs/1710.08326, 2017.
Rowan Davies and Frank Pfenning. A modal analysis of staged computation. J. ACM, 48(3):555–604, 2001.
Matt Fairtlough and Michael Mendler. Propositional lax logic. Inf. Comput., 137(1):1–33, 1997.
Melvin Fitting. Proof Methods for Modal and Intuitionistic Logics. Synthese Library. Springer Netherlands, 1983.
Melvin Fitting. Modal proof theory. In P. Blackburn, J. van Benthem, and F. Wolter, editors, Handbook of Modal Logic, volume 3 of Studies in Logic and Practical Reasoning, pages 85–138. Elsevier, Amsterdam, 2007.
James W. Garson. Modal Logic for Philosophers. Cambridge University Press, 2006.
Neil Ghani, Valeria de Paiva, and Eike Ritter. Explicit substitutions for constructive necessity. In Automata, Languages and Programming, 25th International Colloquium, ICALP’98, Aalborg, Denmark, July 13-17, 1998, Proceedings, pages 743–754, 1998.
Lourdes del Carmen González-Huesca, Favio E. Miranda-Perea, and P. Selene Linares-Arévalo. On the equivalence of two characterizations of constructive necessity, a formal verification. Accepted for publication in the Journal of Applied Non-Classical Logics, 2019.
Raul Hakli and Sara Negri. Does the deduction theorem fail for modal logic? Synthese, 187(3):849–867, 2012.
Michel Huth and Mark Ryan. Logic in Computer Science: Modelling and Reasoning About Systems. Cambridge University Press, New York, NY, USA, 2004.
Andrzej Indrzejczak. Natural Deduction, Hybrid Systems and Modal Logics. Springer Publishing Company, Incorporated, 1st edition, 2010.
Georgios A. Kavvos. The many worlds of modal λ-calculi: I. curry-howard for necessity, possibility and time. CoRR, abs/1605.08106, 2016.
Georgios A. Kavvos. Dual-context calculi for modal logic. In 32nd Annual ACM/IEEE Symposium on Logic in Computer Science, LICS 2017, Reykjavik, Iceland, June 20-23, 2017, pages 1–12, 2017.
Satoshi Kobayashi. Monad as modality. Theor. Comput. Sci., 175(1):29–74, mar 1997.
Kenneth J. Konyndyk. Introductory Modal Logic. University of Notre Dame Press, 1986.
Tadeusz Litak, Miriam Polzer, and Ulrich Rabenstein. Negative translations and normal modality. In 2nd International Conference on Formal Structures for Computation and Deduction, FSCD 2017, September 3-9, 2017, Oxford, UK, pages 27:1–27:18, 2017.
Pablo López, Frank Pfenning, Jeff Polakow, and Kevin Watkins. Monadic concurrent linear logic programming. In Proceedings of the 7th International ACM SIGPLAN Conference on Principles and Practice of Declarative Programming, July 11-13 2005, Lisbon, Portugal, pages 35–46, 2005.

Per Martin-Löf. On the meanings of the logical constants and the justifications of the logical laws.
Nordic J. Philos. Logic, 1(1):11–60, 1996.
Per Martin-Löf and Giovanni Sambin. Intuitionistic type theory. Studies in proof theory. Bibliopolis, 1984.
Frank Pfenning and Rowan Davies. A judgmental reconstruction of modal logic. Mathematical Structures in Comp. Sci., 11(4):511–540, 2001.
Jan von Plato. Elements of Logical Reasoning. Cambridge University Press, 2014.
Francesca Poggiolesi. Gentzen Calculi for Modal Propositional Logic. Trends in Logic. Springer Netherlands, 2010.
Alex K. Simpson. The Proof Theory and Semantics of Intuitionistic Modal Logic. PhD thesis, University of Edinburgh, 1994.
Morten Heine Sørensen and Pawel Urzyczyn. Lectures on the Curry-Howard Isomorphism, Volume 149 (Studies in Logic and the Foundations of Mathematics). Elsevier Science Inc., New York, NY, USA, 2006.
Martin Sticht. Proof Search in Multi-Agent Dialogues for Modal Logic. PhD thesis, University of Bamberg Press, Universitätsbibliothek Bamberg, 2018. doctoralthesis.
Anne S. Troelstra. Introductory note to 19s3f. In K. Gödel and S. Feferman, editors, Kurt Gödel: Collected Works: Volume I: Publications 1929-1936, Collected Works, pages 296–303. OUP USA, 1986.
Luca Viganò. Labelled Non-Classical Logics. Springer Science & Business Media, 2000.
Tom Murphy VII, Karl Crary, Robert Harper, and Frank Pfenning. A symmetric modal lambda calculus for distributed computing. In 19th IEEE Symposium on Logic in Computer Science (LICS 2004), 14-17 July 2004, Turku, Finland, Proceedings, pages 286–295, 2004.
