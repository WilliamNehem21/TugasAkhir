

Electronic Notes in Theoretical Computer Science 273 (2011) 3–19
www.elsevier.com/locate/entcs

Hybrid Metric Propositional Neighborhood Logics with Interval Length Binders
Della Monica, Dario1
University of Udine, Udine, Italy, and University of Salerno, Salerno, Italy

Goranko, Valentin2,5
Technical University of Denmark, Lyngby, Denmark

Sciavicco, Guido3,4
University of Murcia, Murcia, Spain, and
University for Information Science and Technology, Ohrid, Macedonia


Abstract
We investigate the question of how much hybrid machinery can be added to the interval neighbourhood logic PNL and its metric extension MPNL without losing the decidability of their satisfiability problem in N. In particular, we consider the natural hybrid extension of MPNL obtained by adding binders on integer variables ranging over lengths of intervals, thus enabling storage of the length of the current interval and further references to it. We show that even a very weak natural fragment of such extensions becomes undecidable, which is somewhat surprising, being in contrast with the decidability of MPNL, which can be seen as a hybrid language with length constraints only involving constants over interval lengths. These results show that MPNL itself is, in this sense, a maximal decidable (weakly) hybrid extension of PNL.
Keywords: hybrid logics, interval neighbourhood logics, interval length binders, undecidability, tiling.



1 Email: dario.dellamonica@dimi.uniud.it
2 Email: vfgo@imm.dtu.dk
3 Email: guido@um.es
4 This author has been partially supported by the Spanish/South-African Project HS2008-0006, and by the Spanish project TIN2009-14372-C03-01.
5 This author has been supported by the HYLOCORE project funded by the Danish Natural Science Research Council.

1571-0661 © 2011 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2011.06.009

Introduction
Background
Interval temporal logics are based on temporal structures over (usually) linearly ordered domains, where time intervals, rather than time instants, are the primitive ontological entities. The problem of representing and reasoning about time intervals arises naturally in various other fields of computer science, artificial intelligence, and temporal databases, such as theories of action and change, natural language processing, and constraint satisfaction problems. In particular, temporal logics with interval-based semantics have been proposed as a useful formalism for the specification and verification of hardware [22] and of real-time systems [12].
A systematic analysis of the variety of relations between two intervals in a lin- ear order was initiated by Allen [1], who proposed the use of interval reasoning in systems for time management and planning. Allen identified the thirteen different binary relations between intervals on linear orders, hereafter referred to as Allen’s relations. In [16], Halpern and Shoham introduced a multi-modal logic, hereafter called HS, involving modal operators corresponding to all Allen’s interval relations and showed that such a logic is undecidable under very weak assumptions on the class of interval structures in which it is interpreted. One of the few known cases of decidable interval logics with truly interval semantics (not reducible to point-based semantics) is the Propositional Neighborhood Interval Logic (PNL) [5,15]. PNL is a fragment of HS with only two modal operators, corresponding to Allen’s rela- tions meets and its inverse met by. Its satisfiability problem has been shown to be decidable (NEXPTIME-complete) when interpreted over various classes of linearly ordered sets, in particular, over domains based on natural numbers [6]; the results presented in the same paper and in [21] showed that all possible extensions of PNL with Allen’s modal operator make the logic undecidable, which means that PNL is maximal in terms of decidability (as a matter of fact, there are extensions of PNL that are non-elementarly decidable only if interpreted over finite prefixes of N and undecidable in most of the other cases [21]). In [4,7], authors proposed a ‘metric’ extension of PNL, called Metric PNL (MPNL, for short), which involves special propositional letters expressing equality or inequality constraints on the length of the current interval with respect to fixed integer constants. The satisfia- bility problem for MPNL interpreted in the interval structure over N is proved to be decidable in [4], with complexity between EXPSPACE and 2NEXPTIME when the integer constraints in formulae are represented in binary, and with complexity in NEXPTIME-complete when the integer constraints in formulae are constant or represented in unary.
In the present paper we have investigated the question of how much hybrid machinery can be added to PNL and MPNL without losing the decidability of the satisfiability problem in N. Since the difference modality is definable in PNL 6 [15], nominals can be simulated there, so adding them alone is unproblematic with

6 The definition in the strict semantics is given further; in the non-strict semantics it needs using the modal constant π for point intervals.

regards to decidability. However, it is very easy to see that adding binders over state variables immediately leads to undecidability. On the other hand, in the framework of Metric PNL it is quite natural to use binders not on state variables ranging over intervals, but on integer variables ranging over lengths of intervals, thus enabling storage of the length of the current interval and further references to it.

A brief comparison with Duration Calculus
The length variables and binders introduced in this paper bear natural resemblance with the interval length variables used in Duration Calculus (DC) [11,18] – an interval logic introduced by Zhou Chaochen, C.A.R. Hoare, and A.P. Ravn [12], extending Moszkowski’s ITL [22]. The original version of ITL involves only one, binary, modal operator C, called chop, where pCq states that the current interval [a, b] can be split (chopped) into two consecutive intervals [a, c] and [c, b] such that [a, c] satisfies p and [c, b] satisfies q. DC is a real-time version of ITL that adds to the language state expressions, representing states of the system and assigned a duration – the length of the time period during which the system remains in the given state. In [10], a version of DC based on Neighborhood Logic, denoted as DC/NL, has been introduced; it features the two interval neighborhood modalities 3r and 3l and subsumes the original DC. Both the interval logic ITL and DC are undecidable over almost all interesting classes of linear orders.
Several versions of ITL and DC have been studied, aiming to obtain decidability for the satisfiability/validity problem. For example, in [23], Pandya considers the interval-based version of DC, called Interval Duration Logic (IDL), that is generally undecidable; however, it has been proved in [23] that a specific fragment of IDL, denoted by LIDL−, is decidable, by using an automata-theoretic argument. The problem of deciding the validity of IDL formulae has been further investigated in [9], where the authors propose a syntactic characterization of a subset of IDL-formulae that share a property called Strong Closure under Inverse Digitalization that allows one to effectively check the validity of formulae that belong to such a subset by reducing it to the validity problem of formulae of Discrete Time Duration Calculus (QDDT ), that is, the corresponding discrete-time logic, whose validity problem is decidable [20]. Subsequently, M. Fr¨anzle and M. R. Hansen obtain a decidability result for a rich fragment of DC [14], extending the work of Zhou Chaochen et al. [13] on decidability of linear duration invariants to a much wider fragment of DC. In the Restricted Duration Calculus [17] denoted by RDC1, the length of the current intervals can be referred to by using the equality constraint len=k (which can be expressed using C and len=1). This fragment turns out to be decidable over discrete time, but undecidable over dense time. On the other hand, the subset denoted by RDC3, where lengths of current intervals can also be referred to by means of variables and quantifiers, turns out to be undecidable for both discrete and dense time interpretations. On the other hand, under the assumption of locality (that is, the truth of formulae over intervals is reduced to the truth of it over the points inside the interval), not only DC but also a hybrid extension of it studied in  [2], that allows binders for intervals (not lengths) and nominals referring to

specific intervals, is decidable, because the locality assumption essentially reduces the interval logic to a point-based one, and eventually reduces the satisfiability problem over N to the one for MSO over N.
Our contributions
The main part of this paper is devoted to analyze extensions of PNL and MPNL with interval length variables and binders with respect to decidability. Eventually, we show that even very weak extensions become undecidable, which in some cases was not obvious at all, and even somewhat surprising, being in sharp contrast with the decidability of MPNL, which can be seen as a hybrid language only involving nominals over interval lengths. These results show that MPNL itself is, in this sense, a maximal decidable (weakly) hybrid extension of PNL. Finally, we also note the contrast between the strongly prevailing undecidability of hybrid interval logics with truly interval-based semantics, demonstrated here, and the much more robust decidability of even very expressive hybrid extensions of interval logics with essentially point-based semantics, incl. the hybrid DC mentioned above.
Structure of the paper: in Section 2 we recall the syntax and semantics of PNL and MPNL; in Section 3 we discuss hybrid extensions of MPNL, and present the Weakly Hybrid MPNL; in Section 4 we prove the main undecidability results, and in Section 5 we present some ideas of how to regain decidability, before concluding.
Metric Propositional Neighborhood Logic
The language of the Propositional Neighborhood Logic (PNL) consists of a set AP of atomic propositions, the propositional connectives ¬ and ∨, and the modal operators 3r and 3l, corresponding to the Allen’s interval relations meets and its inverse met-by [1]. The other propositional connectives, as well as the logical constants T (true) and ⊥ (false), and the dual modal operators r and l, are defined as usual. PNL has been studied both in the so-called strict semantics, which excludes point-intervals, and in the non-strict one which includes them. In the latter case, it is natural to include in the language a special atomic proposition (modal constant), usually denoted by π, that is true over all and only the point-intervals. The expressive powers of the various cases have been studied and compared in [15]. The formulae of PNL, denoted by ϕ, ψ, . . ., are generated by the following gram-
mar:
ϕ ::= π | p | ¬ϕ | ϕ ∨ ϕ | 3rϕ | 3lϕ.
Given a linearly ordered domain D = ⟨D, <⟩, a (non-strict) interval over D is any ordered pair [a, b] such that a ≤ b. An interval structure is a pair ⟨D, I(D)⟩, where I(D) is the set of all intervals over D. The semantics of PNL is given in terms of models of the form M = ⟨D, I(D),V ⟩, where ⟨D, I(D)⟩ is an interval structure and V : AP → 2I(D) is a valuation function assigning to every propositional letter the set of those intervals over which it is true. Note that no conditions, such as locality, homogeneity, etc. on the valuation are imposed. We recursively define the satisfiability relation H as follows:

M, [a, b] H π iff a = b;
M, [a, b] H p iff [a, b] ∈ V (p), for any p ∈ AP;
M, [a, b] H ¬ψ iff it is not the case that M, [a, b] H ψ;
M, [a, b] H ψ ∨ τ iff M, [a, b] H ψ or M, [a, b] H τ ;
M, [a, b] H 3rψ iff there exists c ≥ b such that M, [b, c] H ψ;
M, [a, b] H 3lψ iff there exists c ≤ a such that M, [c, a] H ψ.
The satisfiability problem of the various version of PNL has been shown to be decidable in [5,15]. In [8], a tableau-based method has been presented for PNL.
From now on, we only consider PNL and its extensions interpreted in the interval structure on N. We denote by δ : N × N → N the distance function on N, defined as δ(a, b)= |a−b|. Most of the claims and results in this paper hold not only on N, but also on Z and many other linear orders on which distance between points is definable. The metric extension of PNL, called MPNL, was introduced and studied in [7,4]. MPNL extends PNL with atomic propositions for length constraints. These are pre-interpreted propositional letters referring to the length of the current interval, which can be seen as the metric generalizations of the modal constant π. From now on, let C = {<, ≤, =, ≥, >}. For each C ∈ C, we introduce the length constraint lenCk, with the following semantics, where k ∈ N:
M, [a, b] H lenCk iff δ(a, b)Ck.

The satisfiability problem for MPNL has been shown in [4] to be decidable; in particular the following theorem holds.
Theorem 2.1 The complexity of the satisﬁability problem for MPNL interpreted over N is between EXPSPACE and 2NEXPTIME if the length constraints are rep- resented in binary, and NEXPTIME complete when k is a constant or represented in unary.
Hybrid Propositional Neighborhood Logics
Some operators of hybrid flavor can be defined in the language of PNL. For instance, the universal modality [G], referring to all intervals in the model, is definable in all variants of PNL. As an example, if we consider the non-strict semantics, it may be defined as follows: [G]ϕ ≡  l l r rϕ. Moreover, in the strict semantics, as shown in [15], the difference modality [/=] can be defined as:
[/=]ϕ ≡  l l rϕ ∧  l r rϕ ∧  r l lϕ ∧  r r lϕ.
Thus, nominals over intervals can be simulated in PNL, and therefore the Basic Hybrid extension of PNL (BHPNL) remains decidable over a large family of linear orders, including N. However, it is quite easy to see that adding stronger hybrid machinery, such as binders or quantifiers over intervals, immediately leads to unde- cidability even under very week assumptions about the class of linear orders.

On the other hand, in the framework of MPNL it is quite natural to use binders not on state variables ranging over intervals, but on integer variables ranging over lengths of intervals. In its “classical” version, MPNL allows metric constraints expressed by explicit numbers; for example, 3r(len=5 ∧p → 3l3rq) is a well-formed MPNL formula, while 3r(len=x ∧ p) is not. This means that, despite the fact that MPNL can be considered very expressive (as shown by several examples in [4]), there are simple and natural properties that we are not able to express in this language, such as e.g.: the right neighbor interval with length equal to the length of the current interval satisﬁes the property q. Thus, it is natural to extend the language of MPNL witha sort of hybrid machinery which allows one to store the length of the current interval and to use it further in formulae.
Here we introduce such a hybrid extension of MPNL, that we call Weakly Hybrid Metric Proposition Neighborhood Logic, or WHMPNL, for (not so) short 7 . In fact, we are considering the weakest natural hybrid extension of MPNL that would allow us to store the length of current interval in a variable and unrestrictedly refer to it in sub-formulae in order to express metric properties of intervals. To this end, we introduce a special sort of a binder ↓, called length binder, a countable set of length variables DVar = {x, y,.. .} (where DVar ∩ AP = ∅) and a corresponding set of hybrid metric constraints of the kind lenCx for each C ∈ C and x ∈ DVar . Formulae of WHMPNL will be evaluated with respect to a suitable valuation functions over length variables and the classical valuation function over propositional letters. Thus, as in classical hybrid logics, we define a length assignment g : DVar → N. A model for WHMPNL over N is defined as a quadruple M = ⟨N, I(N), V, g⟩, where I(N) is the interval structure on N, V : AP → 2I(N) is a valuation function for propositional letters, and g is a length assignment. For two length assignments g, gj and a variable x we write gj ∼x g to mean that gj possibly differs from g only on the value of x. WHMPNL-formulae are defined by the following grammar:
ϕ ::= p | lenCk | lenCx | ¬ϕ | ψ ∨ ϕ | 3rϕ | 3lϕ | ↓x ϕ,
where k ∈ N and x ∈ DVar .
The semantic rules of WHMPNL extend those of MPNL with the clauses:
M, [a, b] H lenCx iff δ(a, b)Cg(x);
M, [a, b] H↓x ϕ iff Mj, [a, b] H ϕ for Mj = ⟨N, I(N), V, gj⟩, where gj is a length assignment such that gj ∼x g and gj(x)= δ(a, b).
Note that a universal (and, respectively, existential) analogue of the hybrid operator @ is definable, too, by @xϕ := [G](len=x → ϕ), with respective semantics:
M, [a, b] H @xϕ iff for any interval [c, d] such that δ(c, d)= g(x) it is the case that M, [c, d] H ϕ.
We denote by WHPNL the fragment of WHMPNL not involving atomic propo- sitions for length constraints (that is, sub-formulae of the kind len=k).

7 The qualifier ‘weakly’ indicates that we do not add a full hybrid language over interval logics – as we have noted above, that would immediately lead to irreparable undecidability.

We note that, while the different types of atomic propositions for length con- straints (i.e., involving <, =, >, ≤, and ≥, but only comparing with explicit num- bers) are definable in terms of each other, not all of these inter-definitions work for hybrid metric constraints. For example, len≥x is equivalent to ¬len<x but it is not possible to define len≤x or len<x in terms of len=x. Therefore, it makes sense to consider also sub-languages of WHMPNL not including all hybrid metric con- traints. If L is any of WHMPNL and WHPNL, for any C ⊆ C we denote by L(C) the language that includes only hybrid metric constraints of the kind lenCx, with
′	′
C ∈ C. For any such language L , we denote by Ln its sub-language containing only
n length variables.
Undecidability of WHMPNL and Fragments
In this section we show that even the weakest syntactically unrestricted fragment of WHMPNL that still retains ↓x for only one length variable x is already undecidable, even when atomic propositions for length constraints are not allowed. That result, while disappointing, is interesting because it shows how dangerously close is the non-hybrid MPNL to undecidability, and raises the question of searching for yet weaker and still meaningful decidable extensions of MPNL.
Undecidability of WHMPNL
We begin by noting that, while PNL is a strict fragment of the Halpern-Shoham modal logic of Allen’s relations HS (whose satisfiability problem is undecidable under very general assumptions for the class of linear orders underlying the interval structures, see [16]), its hybrid metric version is, in fact, at least as expressive as the whole HS. To show that it suffices to define the operators ⟨B⟩, corresponding to the interval relation begins, and ⟨E⟩, corresponding to the interval relation ends, and their inverses ⟨B⟩ and ⟨E⟩, as all other modal operators in HS are definable in terms of these plus 3l and 3r [16]. Indeed:
⟨B⟩p := ↓x 3l3r(p ∧ len<x),
⟨E⟩p := ↓x 3r3l(p ∧ len<x).
⟨B⟩p = ↓x 3l3r(p ∧ len>x),
⟨E⟩p = ↓x 3r3l(p ∧ len>x).
Thus, we have the following result.
Theorem 4.1 The satisﬁability problem for WHPNL, and hence for WHMPNL, interpreted over N is undecidable.
Undecidability of the fragments

It is known [3] that any of the pairs of HS-modalities ⟨B⟩, ⟨E⟩ and ⟨B⟩, ⟨E⟩ is sufficient to establish undecidability.  Thus, even very small fragments of WH-

PNL, namely WHPNL(<)1 and WHPNL(>)1, are expressive enough to render undecidability. Since len>x is definable in WHPNL(≤)1, and len<x is definable in WHPNL(≥)1, these two languages are undecidable too.
It remains to be seen what happens when only len=x is allowed. This case turns out rather more difficult, but we will show here that it is undecidable, too. For better understanding, we first show that WHPNL(π, =)1, where the modal constant π is added, is undecidable, and then we show how the proof can be adapted to the fragment WHPNL(=)1. We will make use of the undecidability of the Finite Tiling Problem [19]. It is the problem of establishing whether, for a given set of tile types T = {t1,..., tk}, there exists a finite rectangle R = [0,X] × [0,Y ]= {(i, j): i, j ∈ N ∧ 0 ≤ i ≤ X ∧ 0 ≤ j ≤ Y } for some X, Y ∈ N, such that T can correctly tile R with the entire border colored by the same designated color $, also called side color. To be more precise, for every tile type ti ∈ T , let right(ti), left(ti), up(ti), and down(ti) be the colors of the corresponding sides of ti. To solve the Finite Tiling Problem for T one must find two natural numbers X and Y , and a mapping f : R→T such that

right(f (i, j)) = left(f (i + 1, j)) for each 0 ≤ i < X, 0 ≤ j ≤ Y, up(f (i, j))  = down(f (i, j + 1)) for each 0 ≤ i ≤ X, 0 ≤ j < Y,
and that satisfies, in addition, the following constraints:

left(f (0, j)) = $ and right(f (X, j)) = $ for each 0 ≤ j ≤ Y, down(f (i, 0)) = $ and up(f (i, Y )) = $  for each 0 ≤ i ≤ X.
where $ is the side color of R.
In order to perform the reduction from the Finite Tiling Problem for the set of tiles T = {t1,..., tk} to the satisfiability problem for WHPNL(π, =)1, we will make use of some special propositional letters, namely u, Id, ∗, tile, Start, Stop, IdStart, IdStop, up rel, Ltile, Rtile, t1, t2,..., tk. For every propositional letter p, by p-interval we mean an interval satisfying p. The reduction consists of three main steps:
the encoding of the rectangle by means of a suitable chain of so-called ‘unit’ intervals (u-intervals, for short);
the encoding of the ‘above-neighbor’ relation by means of a suitable family of so-called up rel-intervals; and
the encoding of the ‘right-neighbor’ relation.
Here is a sketch of the encoding. First, we set our framework by forcing the existence of a unique finite chain of u-intervals on the linear ordering (u-chain, for short). The u-intervals are used as cells to arrange the tiling. Next, we define a chain of Id-intervals (Id-chain, for short), each of them representing a row of the rectangle; the additional propositional letters IdStart and IdStop are used to encode,

respectively, the bottom and the top rows of the rectangle. Any Id-interval consists of a sequence of u-intervals. Using the length binder, we force each Id-interval to contain exactly the same number of u-intervals. Each u-interval is used either to represent a part of the plane or to separate two Id-intervals. In the former case, it is labeled with the propositional letter tile, in the latter case, it is labeled with the propositional letter ∗. Then, we use the propositional letter up rel to encode the relation that connects each tile with its above neighbor in R. Finally, we introduce a set of propositional letters T = {t1, t2,..., tk} corresponding to the set of tile types T = {t1, t2,..., tk} and define a formula ΦT which is satisfiable if and only if there exists a finite rectangle R for some X, Y ∈ N and a proper tiling of R by T , i.e., a tiling that satisfies the color constraints on the border tiles and between vertically- and horizontally-adjacent tiles.
To define the u-chain we use the following formulae:

u ∧ Start ∧ r¬Start ∧ 3r3r(Stop ∧ u)  (1) [G](u ∨ Start ∨ Stop → len=x)	(2) [G](3rStart → r(¬π → r¬Start)) (3) [G](3rStop →  r(¬π →  r¬Stop))    (4)
starts the u-chain u, Start, Stop are equally long
Start is unique
Stop is unique

[G](u ∧ ¬Stop → 3ru)	(5) [G]((Start →  l l¬u) ∧ (Stop →  r r¬u))	(6)
(1) ∧ ... ∧ (6)	(7)
u-chain to the right no u out of the chain

Lemma 4.2 Let M = ⟨N, I(N), V, g⟩ be a WHPNL-model such that
M, [a, b] H↓x (7).

Then there exists a ﬁnite sequence of points b0 < b1 < . . . < bk, with k > 0, such that b0 = a, b1 = b, and:
All intervals [bi, bi+1], for 0 ≤ i ≤ k − 1, have the same length b − a > 0.
M, [bi, bi+1] H u for each 0 ≤ i ≤ k − 1.
M, [c, d] H u holds for no other interval [c, d].

Proof First of all, notice that the interval satisfying Start is unique, and same applies to Stop, due to (3) and (4). Indeed, by (1), one interval satisfying Start is [a, b] = [b0, b1] and it is not a point-interval because it also satisfies r¬Start. Moreover, by (1) and (2), all u-, Start-, and Stop-intervals have the same length b−a, hence no two different Start-intervals can start from the same point. Then, by (5), the interval [b0, b1] starts a finite chain of u-intervals [bi, bi+1], with i ≥ 0. The finiteness follows from the fact that, by (1), some future u-interval satisfies Stop and no interval starting to the right of it isa u-interval, by (6). That interval must belong to the chain, otherwise it will be overtaken by the chain, by (5), which would be a contradiction. Furthermore, any u-interval that is not in that chain may not be to the left of Start, (6), and must start another chain of u-intervals, all of the same lenght b − a, and therefore overlapping the u-intervals of the first chain. However, the unique interval satisfying Stop cannot belong to the second chain, and therefore must be overtaken by it – a contradiction with (6).

We now define the Id-chain with the following formulae:

[G]((u ↔ tile ∨ ∗) ∧ (∗→ ¬tile))	(8) u is either tile or ∗

[G]((3rStart ↔ 3rIdStart) ∧ (3lStop ↔ 3lIdStop))  (9) [G](IdStart ∨ IdStop → Id) ∧ (IdStart → ¬IdStop)  (10) [G](Id → len=x ∧ 3r3ltile)	(11)
[G](3rId ↔ 3r∗)	(12)
[G]((Id ∧ ¬IdStop → 3rId) ∧ (Id ∧ ¬IdStart → 3lId))  (13)
(8) ∧ ... ∧ (13) ∧ IdStart ∧  r¬IdStart	(14)
ﬁrst and last Id IdStart, IdStop def Ids same length Ids start with *
Id-chain

Note that the last formula above ensures that the interval satisfying IdStart, and hence any Id-interval, is not a point-interval.
Lemma 4.3 Let M = ⟨N, I(N), V, g⟩ be a WHPNL-model such that
M, [a, b] H↓x (7) ∧ 3l3r ↓x (14).
Then there exist positive integers h, v and a ﬁnite sequence of points a = b0 < b1 <
1	1

. . . < bh = b0 < . . . < bh = b0 < . . . < bh	= b0 < . . . < bh
such that for each

1	2	2	3	v−1	v	v
1 ≤ j ≤ v, we have:
M, [b0, b1] H ∗.
j	j
M, [bi , bi+1] H tile for each 0 < i < h.
j	j
M, [b0, bh] H Id.
j	j
Moreover, no other interval satisﬁes respectively ∗, tile, and Id, but those indicated above.
Proof First of all, by Lemma 4.2, there is a finite sequence of points a = b0 < b1 <
... < bk, defining a finite chain of u-intervals. Each of these u-intervals is either a

∗-interval or a tile-interval and no other interval is a ∗-interval or a tile-interval, by
(8). Furthermore, by (12), every ∗-interval starts an Id-interval, every Id-interval starts with a ∗-interval and ends with a tile-interval. Thus, every Id-interval spans several u-intervals. therefore, there are finitely many Id-intervals. Let their number be v. The first u-interval [a, b], which is also the only Start-interval, starts an Id- interval [a, bh] for some h < k, satisfying IdStart, by (9). The only Stop-interval, which is the last u-interval, ends the last Id-interval, satisfying IdStop, again by (9). Since all u-intervals have the same length b1 − a and all Id-intervals have the same length bh −a, then every Id-interval spans exactly h u-intervals. Hence, the sequence b0 < b1 < . . . < bk can be written as b0 < b1 < . . . < bh = b0 < . . . < bh = b0 <
1	1	1	2	2	3
... < bh	= b0 < . . . < bh, as required. Now, the first 3 claims of the lemma are
v−1	v	v
immediate. As for the last one, it suffices to notice that every Id-interval starts a
chain of Id-intervals which must terminate, hence it must end with the only IdStop- interval, itself ending with the only Stop-interval. Furthermore, the first possible Id-interval starts with the first possible tile-interval, which is the only Start-interval. Thus, no other Id-intervals exist in M , but those of the type [b0, bh]. The rest of
j	j
claim 4 is now immediate.

The above lemma guarantees the existence of an Id-chain. Now we want to force the propositional letter up rel to correctly encode the relation that connects pairs of tiles of the rectangle R that are vertically adjacent.


[G](up rel → len=x ∧ 3l3rtile)	(15) [G](tile → (3r3rIdStop ↔ 3l3rup rel))	(16)
(15) ∧ (16)	(17)
up rel and Id are equally long
tile starts up rel

Lemma 4.4 Let M = ⟨N, I(N), V, g⟩ be a WHPNL-model such that
M, [a, b] H↓x (7) ∧ 3l3r ↓x ((14) ∧ (17))
and let a = b0 < b1 < . . . < bh = b0 < . . . < bh = b0 < . . . < b0 < . . . < bh be the
1	1	1	2	2	3	v	v
sequence of points guaranteed by Lemma 4.3. Then, for each 1 ≤ j < v, the interval

[bi , bi
] satisﬁes up rel, and no other interval satisﬁes up rel.

j	j+1
Proof By the first conjunct of (15), we have that up rel-intervals have the same length of Id-intervals. By (16), each tile-interval, but the ones belonging to the last Id-interval, starts a up rel-interval. Finally, by the second conjunct of (15), each up rel-interval is started by a tile-interval. Given that all u-intervals are equally long and every Id-interval spans the same number of u-intervals, the claim follows immediately from Lemma 4.3.	 

Finally, we can force all tile-matching conditions to be respected, by using the following formulae:



[G](((tile ∧ 3r∗) ∨ (tile ∧ Stop)) ↔ Rtile)	(18) [G](tile ∧ 3l∗↔ Ltile)	(19)
[G]((tile ↔ _ tq) ∧	^	¬(tq ∧ tu))	(20)
tq∈f	tq,tu∈f ,tq/=tu
[G](tile ∧ 3rtile →	_	(tq ∧ 3rtu))	(21)
right(tq)=left(tu)
[G](up rel →	_	(3l3rtq ∧ 3rtu))	(22)
up(tq)=down(tu)
right side tiles left side tiles tiles are tiles

right-left constraint up-down constraint

Moreover, being Tr (resp., Tl, Tu, Td) the subset of T in which all tiles have the right (resp., left, up, down) side colored with $, we can force the side constraints:


[G](3lIdStart → l l(tile → _
tq∈fd
[G](3rIdStop →  r r(tile → _
tq))	(23)

tq))	(24)
down side constraint

up side constraint


[G](Ltile → _
tq∈fl
[G](Rtile → _
tq∈fr
tq∈fu


tq)	(25)

tq)	(26)


left side constraint right side constraint

(18) ∧ ... ∧ (26)	(27)
The following theorem implies the undecidability of the logic WHPNL(π, =)1.
Theorem 4.5 Given any ﬁnite set of tiles T and a side color $, the formula
Φ :=↓x (7) ∧ 3l3r ↓x ((14) ∧ (17) ∧ (27))
is satisﬁable in N if and only if T can tile some ﬁnite rectangle R with side color $.
Proof (Only if:): Suppose that M, [a, b] H Φ. Then, by Lemma 4.3, there is a sequence of points b0 = b0 < b1 < . . . < bh = b0 < . . . < bh = b0 < . . . < b0 < . . . < 
1	1	1	2	2	3	v
bh = bk. We put X = h − 1 and Y = v. We have that M, [br, br	] H tile if and only
v	s  s+1
if s > 0, which implies M, [br, br	] H tq for a unique tq. Now, for all s, r, where
s  s+1

1 ≤ s ≤ X, 1 ≤ r ≤ Y , define f (s, r) = tg if and only if M, [br, br
] H tq. From

s  s+1
Lemma 4.2, 4.3, and 4.4 it follows that the function f : R → T defines a correct
tiling of R, where X and Y are defined as above.
(If:) Let f : R '→T be a correct tiling function of the rectangle R = [0,X]×[0,Y ] for some X, Y , and a given border color $. For convenience, we will identify the tile-variables with their corresponding tiles from T . We will show that there exist a model M and an interval [a, b] such that M, [a, b] H Φ. Let n = (X + 1) · Y , we define a model M = ⟨N, I(N), V, g⟩ such that M, [0, 1] H Φ. We must provide a

valuation function V . Since the only length variable occurring in Φ is x and it has no free occurrences there, any valuation of x would be as good as any other, so we put g(x) = 1. Then, for each i, j ∈ N, we put:
V (u) := {[i, i + 1] | 0 ≤ i < n};
V (Start) := {[0, 1]};
V (Stop) := {[n − 1, n]}.

This guarantees that (7) is satisfied. Now, in order to satisfy the remaining part of Φ on [0, 1] it suffices to show that the formula 3l3r ↓x ((14) ∧ (17) ∧ (27)) can be satisfied on the interval [0,X + 1], i.e., (14) ∧ (17) ∧ (27) can be satisfied on [0,X + 1] by a valuation assigning value X + 1 to the length variable x. With the following, we define the valuation for the remaining propositional letters:
V (Id) := {[i · (X + 1), (i + 1) · (X + 1)] | 0 ≤ i < Y };
V (∗) := {[i · (X + 1),i · (X + 1)+ 1] | 0 ≤ i < Y };
V (tile) := V (u) \ V (∗);
V (IdStart) := {[0,X + 1]};
V (IdStop) := {[(X + 1) · (Y − 1), (X + 1) · Y ]};
V (up rel) := {[i, j] | δ(i, j)= X + 1, [i, j] ∈/ V (Id), 0 ≤ i, j < n}; V (Ltile) := {[i · (X + 1)+ 1,i · (X + 1)+ 2] | 0 ≤ i < Y };
V (Rtile) := {[i · (X + 1) − 1,i · (X + 1)] | 0 < i ≤ Y }.
Finally, we evaluate the tile-variables as follows. For each t ∈ T:
V (t) := {[i + (j − 1) · (X + 1),i + (j − 1) · (X + 1) + 1)] | f (i, j)= t}.
It is now straightforward to check that M, [0, 1] H Φ, hence the claim.	 
Now, we will sketch how we can eliminate the modal constant π from the for- mulae in the construction above. Note that the modal constant π is involved only in formulae (3) and (4), forcing uniqueness of the u-intervals Start and Stop, and consequently uniqueness of the u-chain. Without the modal constant π in the lan- guage, it seems that we cannot force that uniqueness anymore. Still, we can ensure that any two Start intervals must overlap, by replacing the formula (3) with
[G](Start → u ∧  r r¬Start).
Likewise for the Stop-intervals, by replacing (4) with
[G](Stop → u ∧  r r¬Stop).

Thus, other u-chains may be possible in a model satisfying the resulting modification of ↓x (7), but they all would have the same length d and number k of u-intervals and may differ from each other by a translation to the left or right at a distance less than
d. By a similar argument, the same would happen to the Id-chains in every model of the modified formula ↓x (7) ∧ 3l3r ↓x ((14) ∧ (17) ∧ (27)). Eventually, every model of the modified formula Φ would have possibly several isomorphic copies of the encoding of the required finite tiling; conversely, every correct finite tiling would generate a model satisfying the modified formula Φ. We leave the further details to the reader. Thus, we obtain the following result.
Theorem 4.6 The satisﬁability problem for WHPNL(=)1 interpreted over N is undecidable.
Another minor modification of some of the formulae above can reduce the Finite Tiling Problem to the satisfiability problem of the logic WHPNL(=)1 interpreted over N with strict semantics, thus excluding point intervals 8 , hereafter denoted WHPNL(=)—. Essentially the only necessary changes in the formulae used in the encoding of the tiling problem are to replace formulae of the type  r rψ with
 rψ ∧  r rψ, likewise  l lψ with  lψ ∧  l lψ, and, respectively, 3r3rψ with 3rψ ∧ 3r3rψ, likewise 3l3lψ with 3lψ ∧ 3l3lψ. The rest should be essentially the same, save for the fact that the complications coming from the point intervals will now disappear.

Regaining Decidability: PNL with Restricted Inter- val Length Binders
As we have seen so far, adding even a single length variable and a binder over it to PNL leads to undecidability. The natural question that arises is whether there is any natural decidable extension of PNL or MPNL that still allows a restricted use of length binders, i.e. memory. So far, our proposal to regain decidability is to limit the range of the binders over length variables, by replacing the binder ↓x with a hierarchy of restricted versions {↓k | k ∈ N} and modifying suitably the semantics when the length of the current interval exceeds the limit of the binder. We consider two such versions of the semantics of ↓k:
Restricted semantics: M, [a, b] Hr↓k ϕ iff
δ(a, b) ≤ k and Mj, [a, b] H ϕ for Mj = ⟨N, I(N), V, gj⟩, where gj is the assignment such that gj ∼x g and gj(x)= δ(a, b), or
δ(a, b) > k and Mj, [a, b] H ϕ for Mj = ⟨N, I(N), V, gj⟩, and for some assign- ment gj such that gj ∼x g and gj(x) > k.
Truncated semantics: M, [a, b] Ht↓k ϕ iff
δ(a, b) ≤ k and Mj, [a, b] H ϕ for Mj = ⟨N, I(N), V, gj⟩, where gj is the assignment such that gj ∼x g and gj(x)= δ(a, b), or


8 In the strict semantics the operators 3r and 3l are usually denoted as in HS, that is, by ⟨A⟩ and ⟨A⟩, respectively.

δ(a, b) > k and Mj, [a, b] H ϕ for Mj = ⟨N, I(N), V, gj⟩, where gj is the assignment such that gj ∼x g and gj(x)= k + 1.

The intuition is clear: the binder ↓k
can only store the length of the current

interval if it does not exceed k, otherwise in the truncated semantics it stores k +1 and in the restricted semantics it only stores the constraint len>k.
Now, let us consider the restricted fragment WHMPNLr(=) of the logic WHMPNL(=), where only restricted length binders may occur and the variable length constraints of the type len=x may only occur positively (i.e., we do not allow sub-formulae of the kind ¬len=x, after the formula is transformed to a negation normal form), interpreted with the restricted semantics. The truncated fragment WHMPNLt(=) of WHMPNL(=) is defined likewise, but without the polarity re- striction on the occurrences of len=x, and interpreted with the truncated semantics. It is not obvious whether any of these fragments subsumes the other one in terms of expressiveness with respect to models on N, and it is possible that they are incomparable in that sense.
Theorem 5.1 The following hold:
Every formula ψ of WHMPNLr(=) can be effectively translated to a formula τr(ψ) of MPNL which is equisatisﬁable with ψ when interpreted over N and has length at most exponential in the length of ψ.
Every formula ψ of WHMPNLt(=) can be effectively translated to a formula τt(ψ) of MPNL which is equisatisﬁable with ψ when interpreted over N and has length at most exponential in the length of ψ.
Proof Both translations, for WHMPNLr(=) and WHMPNLt(=), into MPNL, dis- tribute over all logical connectives except the length binders, on which they act respectively as follows, where A[Z/len=x] is the result of simultaneous substitution of all free occurrences of len=x (i.e., not in the scope of a ↓k) by Z in A:
τr(↓k ψ) := (len>k ∧ τr(ψ)[len>k/len=x]) ∨ _(len=j ∧ τr(ψ)[len=j/len=x]).
j=0
τt(↓k ψ) := (len>k ∧ τt(ψ)[len=k+1/len=x]) ∨ _(len=j ∧ τt(ψ)[len=j/len=x]).
j=0
We claim that each of these translations, when applied to formulae in the re- spective languages, produces a formula equisatisfiable with the original one. For lack of space, we leave the details to the reader.	 
Note that the translation τr does not work correctly when a variable length constraint len=x occurs negatively, because ¬len=x is not equivalent to ¬len>k when x > k. For instance, ↓k (len>k ∧ 3r(¬len=x ∧ len>k)) is satisfiable in the restricted semantics but τr(↓k (len>k ∧ 3r(¬len=x ∧ len>k))) = (len>k ∧ 3r(¬len>k ∧ len>k))∨

k j=0
(len=j∧(len>k ∧ 3r(¬len=j ∧ len>k))) is not. That problem does not arise for

the translation τt.

Now, the following is immediate from Theorem 5.1 and Theorem 2.1.
Corollary 5.2 The satisﬁability problem for both the fragments WHMPNLr(=) and WHMPNLt(=), interpreted over N, is decidable in 3NEXPTIME, when length constraints in the formulae are represented in binary, and in 2NEXPTIME, when length constraints in the formulae are constant or represented in unary.
Conclusions and Future Directions
In this paper we have demonstrated that extending (M)PNL with variables and binders over interval lengths is natural, but generally leads to undecidability even in very restricted fragments. While these results are somewhat disappointing, they show that strong restrictions must be imposed on the application of length binders in order to retain the decidability of the non-hybrid fragment. The restrictions pro- posed here render the resulting languages no more expressive than their non-hybrid fragments, so the question whether an essential gain of expressiveness can be ob- tained by adding some hybrid machinery to interval logic and retaining decidability remains open.

References
Allen, J. F., Maintaining knowledge about temporal intervals, Communications of the ACM 26 (1983),
pp. 832–843.
Bolander, T., J. Hansen and M. R. Hansen, Decidability of a hybrid duration calculus, Electronic Notes in Theoretical Computer Science 174 (2007), pp. 113–133.
Bresolin, D., D. Della Monica, V. Goranko, A. Montanari and G. Sciavicco, Decidable and Undecidable Fragments of Halpern and Shoham’s Interval Temporal Logic: Towards a Complete Classification, in: Proc. of 15th Int. Conf. on Logic for Programming, Artificial Intelligence, and Reasoning, LNCS 5330 (2008), pp. 590–604.
Bresolin, D., D. Della Monica, V. Goranko, A. Montanari and G. Sciavicco, Metric propositional neighborhood logic: Expressiveness, decidability, and undecidability, in: Proc. of the 19th European Conference on Artificial Intelligence (ECAI 2010), 2010, pp. 695–700.
Bresolin, D., V. Goranko, A. Montanari and G. Sciavicco, On Decidability and Expressiveness of Propositional Interval Neighborhood Logics, in: Proc. of the International Symposium on Logical Foundations of Computer Science, LNCS 4514 (2007), pp. 84–99.
Bresolin, D., V. Goranko, A. Montanari and G. Sciavicco, Propositional interval neighborhood logics: Expressiveness, decidability, and undecidable extensions, Annals of Pure and Applied Logic 161 (2009),
pp. 289 – 304.
Bresolin, D., V. Goranko, A. Montanari and G. Sciavicco, Right propositional neighborhood logic over natural numbers with integer constraints for interval lengths, in: Proc. of the 7th IEEE Conf. on Software Engeneering and Formal Methods, 2009, pp. 240–249.
Bresolin, D., A. Montanari and P. Sala, An optimal tableau-based decision algorithm for Propositional Neighborhood Logic, in: Proc. of STACS 2007, LNCS 4393 (2007), pp. 549–560.
Chakravorty, G. and P. K. Pandya, Digitizing Interval Duration Logic, in: CAV, 2003, pp. 167–179.
Chaochen, Z. and M. Hansen, An adequate first order interval logic, in: Proc. of the 1997 International Symposium on Compositionality: The Significant Difference, LNCS 1536 (1998), pp. 584–608.
Chaochen, Z. and M. R. Hansen, “Duration Calculus: A Formal Approach to Real-Time Systems,” EATCS Monographs in Theoretical Computer Science, Springer, 2004, 257 pp.
Chaochen, Z., C. A. R. Hoare and A. P. Ravn, A calculus of durations, Information Processing Letters
40 (1991), pp. 269–276.


Chaochen, Z., Z. Jingzhong, Y. Lu and L. Xiaoshan, Linear Duration Invariants, in: H. Langmaack, W.-P. de Roever and J. Vytopil, editors, Formal Techniques in Real-Time and Fault-Tolerant Systems (FTRTFT 2004), Lecture Notes In Computer Science 863 (1994), pp. 86–109.
Fr¨anzle, M. and M. R. Hansen, Deciding an interval logic with accumulated durations, in: TACAS, 2007, pp. 201–215.
Goranko, V., A. Montanari and G. Sciavicco, Propositional interval neighborhood temporal logics, Journal of Universal Computer Science 9 (2003), pp. 1137–1167.
Halpern, J. and Y. Shoham, A propositional modal logic of time intervals, Journal of the ACM 38
(1991), pp. 935–962.
Hansen, M. and D. V. Hung, A theory of duration calculus with application, in: Domain Modeling and the Duration Calculus, LNCS 4710 (2007), pp. 119–176.
Hansen, M. R. and Z. Chaochen, Duration calculus: Logical foundations, Formal Aspects of Computing
9 (1997), pp. 283–330.
Kari, J., Reversibility and surjectivity problems of cellular automata, Journal of Computer Systems and Science 48 (1994), pp. 149–182.
Krishna, S. N. and P. K. Pandya, Modal Strength Reduction in Quantified Discrete Duration Calculus, in: FSTTCS, 2005, pp. 444–456.
Montanari, A., G. Puppis and P. Sala, Maximal Decidable Fragments of Halpern and Shoham’s Modal Logic of Intervals, in: Proc. of the 37th International Colloquium on Automata, Languages and Programming (ICALP), 2010.
Moszkowski, B., “Reasoning about digital circuits,” Tech. rep. stan-cs-83-970, Dept. of Computer Science, Stanford University, Stanford, CA (1983).
Pandya, P. K., Interval duration logic: Expressiveness and decidability, Electronic Notes in Theoretical Computer Science 65 (2002), pp. 254 – 272, theory and Practice of Timed Systems (Satellite Event of ETAPS 2002).
