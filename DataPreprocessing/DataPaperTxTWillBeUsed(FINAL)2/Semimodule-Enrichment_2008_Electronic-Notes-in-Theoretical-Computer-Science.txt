

Electronic Notes in Theoretical Computer Science 218 (2008) 193–208
www.elsevier.com/locate/entcs

Semimodule Enrichment
Chris Heunen
Institute for Computing and Information Sciences Radboud University, Nijmegen, the Netherlands, Email: heunen@cs.ru.nl


Abstract
A category with biproducts is enriched over (commutative) additive monoids. A category with tensor products is enriched over scalar multiplication actions. A symmetric monoidal category with biproducts is enriched over semimodules. We show that these extensions of enrichment (e.g. from hom-sets to hom- semimodules) are functorial, and use them to make precise the intuition that “compact objects are finite- dimensional” in standard cases.
Keywords: Semimodules, enriched categories, biproducts, scalar multiplication, compact objects.

Introduction
Mitchell’s celebrated theorem states that every Abelian category can be embedded in the category of modules over a ring [18]. This article is a first part of a generalisa- tion from rings to semirings 1 , which could hopefully give a representation theorem for semantic models of linear (quantum) computation. An important step in the embedding theorem is that a category with biproducts is enriched over commutative monoids. Mitchell’s proof then continues by finding an appropriate scalar multi- plication. More recently, Abramsky observed that a category with tensor products always has a natural scalar multiplication [1]. We will prove that tensor products in fact provide enrichment with scalar multiplication. However, Abramsky’s and Mitchell’s scalars differ. We combine both to show that a category that has biprod- ucts as well as tensor products is enriched over semimodules [7]. 2 In fact, we show that this extension of enrichment (from Set to semimodules) is functorial, and holds for any enriching category V instead of Set. By way of introduction, let us discuss these results in the case of ordinary categories briefly.

1 A semiring is roughly a ring that does not necessarily have subtraction.
2 A semimodule is to a semiring what a module is to a ring, and a vector space to a field.

1571-0661 © 2008 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2008.10.012

Biproducts give additive enrichment
Recall that a zero object is an object that is simultaneously initial and terminal. Its existence means that there is a unique morphism 0XY : X → Y factoring through the zero object between any two objects X and Y . A category C is said to have binary biproducts when it has coinciding (binary) products and (binary) coproducts such that
qX1⊕X2 ◦ ((κ1 ◦ π1) ⊕ (κ2 ◦ π2)) ◦ ΔX1⊕X2 = idX1⊕X2 ,	(1)
πi ◦ κi = idXi,	(2)
πj ◦ κi = 0XiXj when i /= j,	(3)
where we write X1 ⊕X2 for X1 ×X2 = X1 +X2, Δ for the diagonal ⟨id, id⟩, q for the codiagonal [id, id], and π and κ for the projections and coprojections. A category has ﬁnite biproducts when it has a zero object and binary biproducts. In order to prepare for later generalisation we shall be a bit formal and write Set-Cat for the category of Set-enriched categories, i.e. of locally small categories. We denote by BP(Set-Cat) the category of all locally small categories with finite biproducts and functors preserving them. By cMon(C) we denote the category of all commutative monoids in a symmetric monoidal category C; in case C = Set, we abbreviate it to cMon. Section 2 considers an extension of enrichment that for ordinary categories is given as follows.
Theorem 1.1 Locally small categories with ﬁnite biproducts are cMon-enriched, and this is functorially so: there is a functor BP(Set-Cat) −→ cMon-Cat.
Proof. We describe the monoid structure on the homset C(X, Y ) additively. The sum f + g : X → Y of f : X → Y and g : X → Y is given by


f + g : X   Δ  X ⊕ X  f ⊕g  Y ⊕ Y   q  Y. 
(4)

The monoid unit is the zero morphism 0XY : X → Y . Since morphisms in
BP(Set-Cat) preserve biproducts, they also preserve this enrichment.	 

Tensor products give scalar multiplication enrichment
In any monoidal category C, the endomorphisms of the monoidal unit can be con- sidered as a monoid of scalars, since one can define an action of it on the category called scalar multiplication as follows [1]. For a scalar s : I → I and any morphism f : X → Y of C, define s • f : X → Y as
X  ∼=  I ⊗  X  s⊗f  I ⊗  Y   ∼=  Y. 

In particular, C(I, I) forms a monoid with idI as unit, and s • t as multiplica- tion. Thus we have the following lemma. For a fixed monoid M in C, we denote by ActM (C) the category of (left) actions of M [15, Section VII.4]; we use the shorthand ActM = ActM (Set).

Lemma 1.2 If C is a locally small monoidal category, then C(I, I) acts upon its homsets. In other words, C(X, Y ) ∈ ActC(I,I).
Proof. To verify that the scalar multiplication defined above is an action one has to check that idI • f = f and s • (t • f )= (s • t) • f .	 
This is the first step towards proving that every symmetric monoidal category C is enriched over ActC(I,I). To complete the reasoning we need to ensure that composition is a morphism in ActC(I,I). Because s •(g ◦ f )= g ◦(s • f )= (s • g) ◦ f , we first have to equip ActC(I,I) with a tensor structure, universal for bimorphisms. For this it suffices that C is symmetric monoidal. This will be proven in detail in Section 3 using techniques by Kock and Day. For now, let us just state the result without proof. We write Act = Act(Set) for the category of (left) actions of an arbitrary monoid, to be explained in more detail later.
Theorem 1.3 A symmetric monoidal Set-category C is enriched over ActC(I,I). This is functorially so: there is a functor cMon(Set-Cat) −→ Act-Cat.
Semimodule enrichment
If C is a symmetric monoidal category, then so is cMon(C). Hence one can consider monoid objects in the latter category. First of all, such a ‘double monoid’ object is an object of cMon(C), i.e. a commutative monoid that we write additively as (S, +, 0). Furthermore, it carries monoid structure I  1  S ¸  ,·  S ⊗ S . Because the latter are morphisms in cMon(C), we can recognize the objects of Mon(cMon(C)) as S ∈ C equipped with a commutative monoid structure (+, 0) and a monoid structure
(·, 1) such that
s · (s' + s'')= (s · s')+ (s · s''),
(s + s') · s'' = (s · s'')+ (s · s''), s · 0= 0=0 · s.
In other words: Mon(cMon) = SRng, the category of semirings. This identi- fication allows one to consider a semiring whose carrier is not a set: we define SRng(C)= Mon(cMon(C)) for any symmetric monoidal category C. Although the multiplication (i.e. the outer monoid multiplication ·) need not be commuta- tive in general, we will mostly consider only the full subcategory cSRng(C) of commutative semirings.
Given a monoid object S in a symmetric monoidal category cMon(C), one can consider the actions of S on objects of the category. In a similar fashion as above, we can recognize these as semimodules over the semiring S; the commutative monoid that is being acted upon then is the additive group of the semimodule. After all, a semimodule is a space of ‘vectors’ that can be added, and can be multiplied by a scalar [7]. In other words: ActS(cMon) = SModS, the category of semimodules over S. This identification allows one to consider a semimodule without an under- lying set: we define SModS(C) = ActS(cMon(C)) for any symmetric monoidal category C.

Let us consider a few examples. It is well-known that Z-modules are simply Abelian groups, so that ActZ(cMon) ∼= Ab. Since an action of N on a commutative monoid is already completely fixed by its monoid structure, we have ActN(cMon) ∼= cMon(Set). Looking at the Boolean semiring B = ({0, 1}, max, 0, min, 1), we can identify an action of B on a commutative monoid L as an idempotent commutative monoid, because l = 1 · l = max(1, 1) · l = max(1 · l, 1 · l) = max(l, l). Hence ActB(cMon) ∼= SLat, the category of (bounded) semilattices.
Now suppose we have a locally small category C with finite biproducts as well
as tensor products, i.e. C ∈ cMon(BP(Set-Cat)). 3 Then it is enriched with both addition and scalar multiplication distributing over it. In other words, combinining Theorems 1.1 and 1.3 gives the following result, that is studied in more detail in Section 4.
Corollary 1.4 There is a functor cMon(BP(Set-Cat)) −→ SMod-Cat.
Proof. If C and D are symmetric monoidal categories, then a symmetric monoidal functor C → D restricts to a functor cMon(C) → cMon(D). So Theorem 1.1 pro- vides a functor cMon(BP(Set-Cat)) → cMon(cMon-Cat). The general version of Theorem 1.3 that we will prove later provides a functor cMon(cMon-Cat) → Act(cMon)-Cat. Composing both functors establishes the result.	 
Summarizing, we have the following diagram.
(SMo d¸(Set))-Cat	 (c Mon (S¸et))-Cat
,,,,,,,	,,,,,
,,			,,

cMon(BP(Set-Cat))	BP(Set-Cat)
J		 J 

(5)

(Act (S¸et))-Cat
,,,,,,,
 C¸at
,,,,

J  ,,
cMon(Set-Cat)
J ,,,
Set-Cat

In order for the combination of Theorems 1.1 and 1.3 to make sense, the whole story, or at least Theorem 1.3, has to be generalized to an enriched setting. Sections 2–4 explain the above diagram in more detail, and generalize it to enriching categories V that not necessarily equal Set. Section 5 applies this to make precise the intuition that compact objects are “finite-dimensional” in these cases.

Additive enrichment
This section proves that a V-category with finite biproducts can be seen as a cMon(V)-category, and that this change of perspective is functorial. Before this general version of Theorem 1.1 can even be stated, we need to consider an enriched

3 Objects of cMon(Cat) are strict symmetric monoidal categories, i.e. categories in which there are not just isomorphisms between X ⊗(Y ⊗ Z) and (X ⊗ Y ) ⊗ Z and so on, but equalities. To ease the presentation, we therefore mean strict (symmetric) monoidal categories whenever we talk about categories with tensor products, especially in the general V-enriched setting, although some results are more general.

version of the notion of biproduct. The following theorem characterizes algebraically how to recognize when a tensor product is in fact a coproduct, in a way reminiscent of [6] (see also [5]).

Theorem 2.1 Let (C, ⊕, 0) be a symmetric monoidal category. Then (⊕, 0) pro- vides ﬁnite coproducts if and only if the forgetful functor cMon(C) → C is an isomorphism of categories.

Proof. Suppose that (⊕, 0) provides finite coproducts, with the coherence maps α, λ and ρ induced by the coproducts. Let U : cMon(C) → C be the forgetful functor acting on objects as U (X, μ, η) = X and on morphisms as U (f ) = f . Define C : C → cMon(C) on objects as C(X)= (X, q, u), where q = [idX, idX ]: X ⊕ X → X, and u is the unique morphism 0 → X. On a morphism f , it acts as C(f ) = f . Then trivially U ◦ C = Id. To prove that also C ◦ U = Id, we show that there can be only one (commutative) monoid structure on X ∈ C with respect to (⊕, 0), i.e. for any (X, μ, η) ∈ cMon(C) one has that μ = [id, id]. This suffices because η is necessarily the unique morphism 0 → X. We have

μ ◦ κ1 = μ ◦ [κ1, κ2 ◦ u] ◦ κ1 = μ ◦ (id ⊕ u) ◦ κ1 = ρ—1 ◦ κ1 = id,

since κ1 : X → X ⊕ 0 equals the coherence isomorphism ρ. Likewise μ ◦ κ2 = id, so
μ = [id, id], as needed.
 U  

Conversely, suppose that cMon(C) ¸, C
C
is an isomorphism. By definition

U (X, μ, η) = X, so the monoid C(X) is carried by X. Since C is a functor, the
monoid structure maps, say qX : X ⊕ X → X and uX :0 → X, are natural in X. We first prove that 0 is an initial object. We have that (0, q0, u0) and (0, λ0, id0) are both monoids (in C). Moreover they satisfy the Hilton-Eckmann condition (A.1), so by Theorem A.1 in Appendix A we have u0 = id0. Naturality of u yields

f = f ◦ id0 = f ◦ u0 = uX

for any f :0 → X. Hence uX is the unique morphism 0 → X, and 0 is indeed an initial object. Finally, we show that X ⊕ Y is a coproduct of X and Y . Define as co- product injections κ : X   ρ  X ⊕ 0id⊕uY X ⊕ Y and κ' : Y   λ  0 ⊕  Y uX ⊕id X ⊕ Y .
For given f : X → Z and g : Y → Z, put [f, g]= qZ ◦ (f ⊕ g): X ⊕ Y → Z. Then

[f, g] ◦ κX = qZ ◦ (f ⊕ g) ◦ (id ⊕ uY ) ◦ ρ
= qZ ◦ (id ⊕ (g ◦ uY )) ◦ (f ⊕ id) ◦ ρ	(u natural)
= qZ ◦ (id ⊕ uY ) ◦ (f ⊕ id) ◦ ρ	(q,u monoid)
= ρ—1 ◦ (f ⊕ id) ◦ ρ = f.	(ρ natural)

Analogously, [f, g] ◦ κY = g. Moreover, [f, g] is the unique such map since
[κX , κY ]= (qX ⊕ qY ) ◦ (id ⊕ γ ⊕ id) ◦ (id ⊕ uY ⊕ id)
(ρ ⊕ id) ◦ (id ⊕ uX ⊕ id) ◦ (id ⊕ λ)
= (qX ⊕ id) ◦ (id ⊕ qY ) ◦ (id ⊕ uY ⊕ id) ◦ (id ⊕ γ ⊕ id)
(ρ ⊕ id) ◦ (id ⊕ uX ⊕ id) ◦ (id ⊕ λ)
= (qX ⊕ id) ◦ (id ⊕ λ—1) ◦ (id ⊕ γ ⊕ id)
(ρ ⊕ id) ◦ (id ⊕ uX ⊕ id) ◦ (id ⊕ λ)
= (qX ⊕ id) ◦ (id ⊕ uX ⊕ id) ◦ (id ⊕ λ)
= (id ⊕ λ—1) ◦ (id ⊕ λ)= id.


Dually, a symmetric monoidal structure (⊕, 0) on a category C provides finite products if and only if Cop is isomorphic to the category of commutative comonoids in C. Let us write C for the full subcategory of Cop × C consisting of objects (X, X). Its objects can be identified with those of C, and a morphism f : X → Y in C is a pair of morphisms f ← : Y → X, f → : X → Y of C. If C is (symmetric) monoidal (closed), so is C . Hence an object in cMon(C ) consists of a monoid and a comonoid in C with the same carrier object. Thus we arrive at the following algebraic characterization of how to recognize when a tensor product in fact provides finite biproducts.
Corollary 2.2 Let (C, ⊕, 0) be a symmetric monoidal category. Then (⊕, 0) pro- vides ﬁnite biproducts if and only if the underlying functor cMon(C ) → C  is an isomorphism.
Proof. Suppose the underlying functor is an isomorphism. Then 0 is an initial object by Theorem 2.1, and a terminal object by the dual of that Theorem. Hence 0 is a zero object. Condition (1)–(3) are satisfied; let us show e.g. condition (2):
πX ◦ κX = ρ—1 ◦ (id ⊕ nY ) ◦ (id ⊕ uY ) ◦ ρ = ρ—1 ◦ (id ⊕ uY ) ◦ ρ = idX.
The converse is trivial: if C has coinciding finite products and coproducts, then Theorem 2.1 and its dual show that the underlying functor is an isomorphism. (See also footnote 3.)	 
Compare this to the following: a category C is self-dual, i.e. C ∼= Cop, if and only if the forgetful functor C  → C is an isomorphism.
We now turn this algebraic characterization of biproducts in locally small cat- egories into a definition of biproducts in V-categories. The notion of monoid in a monoidal category duly enriches. For an enriching (symmetric) monoidal category V, we speak of C ∈ cMon(V-Cat) as a ‘(symmetric) monoidal V-category’. This means that C comes equipped with morphisms
⊗C : C(X, Y ) ⊗V C(X',Y ') → C(X ⊗C X',Y ⊗C Y ')

in V. A (commutative) monoid object in C then consists of an object X ∈ C together with morphisms μ : IV → C(X ⊗C X, X) and η : IV → C(IC,X), making the appropriate diagrams (in V) commute. The definition of C  above also works for V-enriched categories C. Hence Corollary 2.2 enables us to talk about finite biproducts in V-enriched categories without having to resort to product structure on V or weighted (co)limits. In particular, it is more general than the usual no- tion of a V-coproduct, which needs V to have finite products — if V is a category with finite products, then finite coproduct structure on a V-category C is tradition- ally regarded as V-natural isomorphisms C(X ⊕ Y, −) ∼= C(X, −) × C(Y, −) and C(0, −) ∼= 1 [11]. Let us collect all enriched categories with finite biproducts in a category. For a symmetric monoidal category V, define BP(V-Cat) as the full sub- category of cMon(V-Cat) consisting of V-categories C such that the underlying functor cMon(C ) → C  is an isomorphism.
We are now in a position to tackle the general version of Theorem 1.1. The next theorem proves that V-enrichment of a category that has biproducts in the above sense can be lifted to an enrichment over cMon(V).
Theorem 2.3 Let V be a symmetric monoidal category. There is a functor

(−)⊕ : BP(V-Cat) −→ (cMon(V))-Cat.

Proof. Let (C, ⊕, 0) ∈ BP(V-Cat). It comes equipped with ΔX : IV → C(X, X ⊕
X), qX : IV → C(X ⊕ X, X), uX : IV → C(0,X) and nX : IV → C(X, 0).
The objects of C⊕ are those of C. The carrier of the homobject C⊕(X, Y ) is
C(X, Y ) ∈ V. Its monoid unit 0XY : IV → C(X, Y ) is given by


0XY
: IV
 ∼=  IV ⊗ I
nX ⊗uY C (X, 0) ⊗ C(0,Y )  ◦C  C (X, Y )

The monoid multiplication + : C(X, Y ) ⊗ C(X, Y ) → C(X, Y ) of the homobject
C(X, Y ) is given as follows.


C(X, Y ) ⊗ C(X, Y ) _
⊕ J 
_ _ _
_ _+_
_ _ _
_ _ C( X,, Y,)
(◦C)◦(id⊗◦C)

C(X ⊕ X, Y ⊕ Y )
¸¸¸¸¸
C(X, X ⊕ X) ⊗ C(X ⊕ X, Y ⊕ Y ) ⊗ C(Y ⊕ Y, Y )
          

∼= ¸¸z˛	  Δ X ⊗id⊗qY
IV ⊗ C(X ⊕ X, Y ⊕ Y ) ⊗ IV

Composition ◦C is a monoid morphism for this structure because ⊕ is a V-functor. We leave it to the reader to show that this data indeed defines a commutative monoid; essentially it is an enriched version of the argument for Set-categories.
Since a morphism in BP(V-Cat) is a V-functor that (strictly) preserves the biproduct structure, and because Δ, q, n,u are natural, this assignment C '→ C⊕ is functorial.	 

Scalar multiplication enrichment
The introduction set the first step towards proving that every monoidal category C is enriched over ActC(I,I)(Set). Before we consider the general enriched situation, let us complete the reasoning in the Set-enriched setting, by ensuring that composition is a morphism in ActC(I,I)(Set). Because s • (g ◦ f )= g ◦ (s • f )= (s • g) ◦ f , this requires that ActC(I,I)(Set) is equipped with a tensor structure that is universal for bimorphisms. This will occupy us for the next few lemmas, that apply techniques developed by Kock and Day ([13], but see also [10]).
Lemma 3.1 If C is a locally small (symmetric) monoidal category, then C(I, I) is a (commutative) monoid.
Proof. [12,1] By the Hilton-Eckmann argument (see Appendix A) the monoid (C(I, I), •, idI ) coincides with (C(I, I), ◦, idI ), and is in fact commutative. The following diagram establishes commutativity directly.
I 	∼=	 I ⊗ I	I ⊗ I 	∼=	 I 

,,	λ
s
,,
s⊗id

id⊗t
ρ−1
t

	∼=	 I ⊗ I 	s⊗t	  J	∼=
 J 

I	λ=ρ
t

id⊗t
I ⊗,I,
s⊗id
λ−1 =ρ−1
I,,
s

J	∼=	  J	
	∼=	 

I	ρ	I ⊗ I	I ⊗ I
λ−1	I

Notice how this essentially uses the coherence axiom λI = ρI .	 
If V is a symmetric monoidal category, then so is V-Cat [3]. Hence it makes sense to talk of (strict) monoidal V-categories as objects of Mon(V-Cat). In fact, the previous lemma extends functorially and enriches: if V is a symmetric monoidal category, then there is a functor cMon(V-Cat) → cMon(V).
Recall that a monad T on a symmetric monoidal category is called strong if there is a “strength” natural transformation st : X ⊗ TY → T (X ⊗ Y ) satisfying certain conditions. The monad is called commutative if both iterated “double strength” maps TX ⊗ TY → T (X ⊗ Y ) coincide [10, Definition 3.4].
Lemma 3.2 If V is a monoidal category and M ∈ Mon(V), then M ⊗ (−): V → V is a monad, whose category of algebras is ActM (V). If V is symmetric monoidal, then the monad M ⊗ (−) is strong. The monad M ⊗ (−) is commutative if and only if the monoid M is.
Proof. The unit and multiplication of the monad are given by
η : X  ∼=  I ⊗  X  e⊗id  M ⊗ X,
μ : M ⊗ (M ⊗ X)   ∼=  (M  ⊗ M ) ⊗ X  m⊗id M ⊗ X.
If C is symmetric monoidal, then there is a strength map
st : X ⊗ (M ⊗ Y ) ∼= (X ⊗ M ) ⊗ Y γ⊗id (M  ⊗ X) ⊗ Y ∼= M ⊗ (X ⊗ Y ).

The double strength maps boil down to
(M ⊗ X) ⊗ (M ⊗ Y ) 	dst	 M ⊗ (X ⊗ Y ) (M ⊗ X) ⊗ (M ⊗ Y )   ∼=  (M  ⊗ M ) ⊗ (X ⊗ Y )  m⊗id M ⊗ (X ⊗ Y )
Jγ⊗ id

(M ⊗ M ) ⊗ (X ⊗ Y )
m⊗id
 M ⊗ (X ⊗ Y )

(M ⊗ X) ⊗ (M ⊗ Y )	'	 M ⊗ (X ⊗ Y )
dst
Hence they coincide if and only if the monoid M is commutative.	 
Lemma 3.3 Let V be a symmetric monoidal closed category, M ∈ cMon(V), and suppose ActM (V) has coequalizers of reflexive pairs. Then ActM (V) is a symmetric monoidal closed category, in which X ⊗ Y is universal such that every bimorphism X × Y → Z factors through it.
Proof. Apply [10, Lemma 5.3]. The resulting tensor product structure is such that there are universal bimorphisms [10, Lemma 5.1].	 
A special case of the previous lemma is V = Set. In this case ActM (V) has coequalizers of reflexive pairs since it is in fact a topos. For X, Y ∈ ActM (Set), the tensor product X ⊗ Y is given explicitly by X × Y/ ∼, where ∼ is the least equivalence relation determined by (m · x, y) ∼ (x, m · y), with action given by m · [x, y]= [m · x, y]= [x, m · y].
There is more structure behind the previous lemma than stated there. In fact, since V '→ M ⊗ V is the free functor V → ActM (V), it is a morphism of sym- metric monoidal categories, i.e. it preserves the symmetric monoidal structure 4 . In particular, there is an isomorphism IActM (V) ∼= M ⊗ IV of (commutative) monoids. In case V = Set and M = C(I, I) this shows that the monoidal structure on V provided by Lemma 3.3 and that on C have ‘the same scalars’.
Note 1 From now on, we will assume that the symmetric monoidal category V is such that ActC(I,I)(V) has coequalizers of reflexive pairs. This ensures that ActC(I,I)(V) is again a symmetric monoidal category, and hence it makes sense to talk about enrichment over it. We will only use this technical assumption for this reason.
A common scenario in which the above assumption is fulfilled is when V is a symmetric monoidal closed category that has coequalizers of reflexive pairs, like in the situation V = Set above. (In fact, it suffices if C(I, I)⊗(−) has a right adjoint.) Now that we have developed a monoidal structure on ActC(I,I)(Set) that is uni- versal for bimorphisms, we can use the scalar multiplication action as an enrichment.
The following theorem summarizes this main insight.

4 If moreover V is a topos, it is also a geometric morphism of toposes [16].

Theorem 3.4 Every locally small symmetric monoidal category C is enriched over the symmetric monoidal closed category V = ActC(I,I)(Set), in such a way that IV ∼= C(I, I).
Proof. Put the homobject C(X, Y ) ∈ ActC(I,I)(Set) to be the set C(X, Y ) with the action α : C(X, Y ) × C(I, I) → C(X, Y ) on it given by scalar multiplication as α(f, s) = s • f . The composition morphism C(X, Y ) ⊗ C(Y, Z) → C(X, Z) is now the unique one through which the bimorphism C(X, Y ) × C(Y, Z) → C(X, Z), determined by (f, g) '→ g ◦ f , factors; this is a morphism in ActC(I,I)(Set). The identity morphism 1 → C(X, X) is given by ∗ '→ idX; this is also a morphism in ActC(I,I)(Set) since 1 carries the trivial action. One easily verifies that these satisfy the requirements of an enriched category.	 
Whereas the previous theorem covers the case of Set-enriched categories, the following theorem gives the general construction. It incorporates functoriality; but for that we first need to get rid of the indexi∫ng monoid M in ActM (V). We de-
note by Act(V) the Grothendieck completion M ∈cMon(V) ActM (V) of the indexed
category cMon(V)op → Cat. Explicitly, Act(V) has as objects pairs (M, α) with
M ∈ cMon(V) and α ∈ ActM (V). Morphisms from (M, α : M ⊗ X → X) to (N, β : N ⊗ Y → Y ) in Act(V) are pairs of morphisms f : M → N and g : X → Y satisfying β ◦ (f ⊗ g)= g ◦ α [8]. If V is symmetric monoidal, then so is Act(V), whence it makes sense to talk of (Act(V))-enriched categories.
Theorem 3.5 Let V be a symmetric monoidal category. There is a functor
(−)⊗ : cMon(V-Cat) −→ (Act(V))-Cat.

Proof. We first describe how (−)⊗ works on objects. Let C ∈ cMon(V-Cat). This means that C is a V-enriched category, and hence comes equipped with e.g. mor- phisms iX : IV → C(X, X). Furthermore, it means that there is a V-functor ⊗C; explicitly, we are given a morphism ⊗C : |C|× |C| → |C| in Set, and a morphism
⊗C : C(X, X') ⊗V C(Y, Y ') → C(X ⊗C X',Y ⊗C Y ') in V. Finally, it means we are given an object IC ∈ |C|. These data satisfy the (strict) monoid requirements, like IC ⊗C X = X.
The objects of the V-enriched category C and the Act(V)-enriched category C⊗ are the same: |C⊗| = |C|. The homobjects are determined by the action of scalar multiplication, i.e. C⊗(X, Y ) is the action
C(I, I) ⊗V C(X, Y )  ⊗C  C( I ⊗C X, I ⊗C Y )= C(X, Y ).
The identity on X is the morphism
C(I, I)  ∼=  C( I, I) ⊗ IV id⊗iX C( I, I) ⊗ C(X, X)  ⊗C  C( X, X)
in V. It is a morphism of actions IActC(I,I)(V) → C⊗(X, X) since IActM (V) is the action M ⊗ M  m  M . An involved but straightforward calculation, that uses the

structure of the tensor product in ActM (V), now shows that these data in fact provide an enrichment.
We now turn to the action of (−)⊗ on morphisms. Let F be a morphism C → D in cMon(V-Cat). Define its image F ⊗ to work on objects X ∈ C⊗ as F ⊗(X) = F (X). It also works on morphisms as F — since F is a ‘(strict) monoidal V-functor’, it is automatically a (scalar multiplication) action morphism.


C(I, I) ⊗V C(X, Y ) 	⊗C	 C (I ⊗C X, I ⊗C Y )
C(X, Y )

FII ⊗VFXY J 
JFX Y
JFX Y

D(I, I) ⊗V D(FX, FY ) ⊗D D (I ⊗D FX, I ⊗D FY )  D(FX, FY )
That is, F ⊗	is indeed a morphism in Act(V).	 
The extension of enrichment in the previous theorem is initial, in the sense that the ‘forgetful’ functor C(I, −) : C → V of any symmetric monoidal V-enriched category C factors through it, as in the following commutative diagram of monoidal functors.
	C(I,—)	 

C ¸¸¸¸¸
C(I,—¸)¸¸¸z˛
,,,, V¸
,,(α,,:C, (I,I)⊗V →V )'→V

ActC(I,I)(V)

Semimodule enrichment
This section considers the situation arising from a monoidal V-category with finite biproducts. By the previous two sections, we know that such a category can be seen both as a cMon(V)-category and as an Act(V)-category. Using the correct distributivity we will show that it can in fact be seen as a category enriched over semimodules.
When we say ‘a monoidal V-category C with finite biproducts’, we mean C ∈ cMon(BP(V-Cat)). 5 After all, even if V = Set the tensor product distributes over the biproduct by
τ = ⟨id ⊗ π1, id ⊗ π2⟩ : X ⊗ (Y ⊕ Z) −=→ (X ⊗ Y ) ⊕ (X ⊗ Z), τ —1 = [id ⊗ κ1, id ⊗ κ2],
but the biproduct rarely distributes over the tensor product, so that considering BP(cMon(V-Cat)) is not so sensible. This resonates well with the observation in the introduction that cSRng(Set) equals cMon(cMon(Set)), where the multi- plicative structure distributes over the additive structure. The stock example is the category of complex vector spaces and linear functions, in which one can multiply (tensor) and add (direct sum) objects as well as morphisms.

5 This automatically takes care of coherence in the not-necessarily strict case [14]. See also footnote 3.

A first sign of this distributivity is seen when reconsidering Lemma 3.1 in a monoidal V-category that moreover has finite biproducts. Then C(I, I) is not just a monoid, but in fact a commutative semiring.
Corollary 4.1 Let V be a symmetric monoidal category. There is a functor
cMon(BP(V-Cat)) −→ cSRng(V).
Proof. It acts on objects by sending (C, ⊗,I, ⊕, 0) to C(I, I). We already saw that (C(I, I), •, idI ) is a monoid, and that (C(I, I), +, 0) is a commutative monoid. Hence it suffices to verify distributivity and annihilation. We only consider the case V = Set, which enriches easily, so that the diagrams are clearer. Distributivity is established by the following commutative diagram.
I	s•(t+r)	 I 
  λ  I ⊗ I   id⊗Δ  I ⊗  (I ⊕ I)   s⊗(t⊕r)  I ⊗ (I ⊕ I)   id⊗q  I ⊗ I λ−1 

I	,,_ 
I
¸¸¸ −1

, λ,,,
Jτ 
Jτ 
¸λ¸¸¸¸

I 	 I ⊕ I ,, ,  (I ⊗ I) ⊕ (I ⊗ I)	 (I ⊗ I) ⊕ (I ⊗ I) 	¸ zI _⊕ I 	 I 

Δ	λ⊕λ
(s⊗t)⊕(s⊗r)
λ−1⊕λ−1	q

  
(s•t)+(s•r)
Annihilation is shown as follows.
I 	!	 0 

I   λ  I ⊗ I
 !⊗id  0 ⊗  I
ρ−1 




0•s J¸ , 0⊗s J ¸, 
Jid⊗ s

I λ−1
I ⊗ I
!⊗id
0 ⊗ I ¸−,1 0

I ¸,	!	0
So indeed C(I, I) ∈ cSRng(V).  Because a morphism in cMon(BP(V-Cat)) is a V-functor that preserves both the monoidal structure and the biproduct, and a morphism in cSRng(V) = cMon(cMon(V)) is a morphism that respects •, 1, + and 0, the above assignment is functorial.	 
Let us denote by SMod(V) = Act(cMon(V)) the category of semimodules over an arbitrary semiring in V. (In particular, SMod(V) is symmetric monoidal; in case V = Set, the induced monoidal structure coincides with that given by extension-of-scalars [17].)
Corollary 4.2 Let V be a symmetric monoidal category. There is a functor
(−)⊕⊗ : cMon(BP(V-Cat)) −→ (SMod(V))-Cat.

Proof. Notice that (−)⊕ is a symmetric monoidal functor. That is, if C, D ∈ cMon(BP(V-Cat)), then (C ⊗ D)⊕ ∼= C⊕ ⊗ C⊕, where the tensor product is that of V-categories. Moreover, 1⊕ = 1 [11,3]. Hence (−)⊕ restricts to cMon((−)⊕) : 

cMon(BP(V-Cat)) → cMon((cMon(V))-Cat). The desired functor is then the composition (−)⊕⊗ = (−)⊗ ◦ cMon((−)⊕).	 
If we combine all the functors so far with forgetful ones, we can summarize the entire article (so far) in the following diagram, generalizing diagram (5) from Set to V.
(SMo d¸(V))-Cat	 (c Mo n(¸V))-Cat

,,,,,,
....

,,			..
cMon(BP(V-Cat))	BP(V-Cat)
J		 	 J 

(Ac t(¸V))-Cat
,,,,,
 Ca¸t
.....

J  ,,,
cMon(V-Cat)
J ...
V-Cat


Compactness and dimension
Categories with tensor products and biproducts have lately been studied as se- mantical models of quantum computation [2]. Especially compact objects in such categories play an important role. An object X of a symmetric monoidal category C is called compact when there are an object X∗ ∈ C and morphisms η : I → X∗ ⊗ X and ε : X ⊗ X∗ → I that make the following diagrams commute.


X  ∼= X ⊗ I  id⊗η X ⊗ (X∗ ⊗ X)
∼=
X∗  ∼= I ⊗  X∗  η⊗id (X ∗ ⊗ X) ⊗ X∗
∼=

(6)

X ¸,I ⊗ X ¸,
J∗ 
X∗ ¸,X∗ ⊗ I ¸,	∗
J   ∗

∼=	ε⊗id (X ⊗ X
) ⊗ X
∼=	id⊗η X
⊗ (X ⊗ X )

Compact objects ‘behave finite-dimensionally’. Indeed, in the prime example cate- gories of complex vector spaces or Hilbert spaces, the compact objects are precisely the finite-dimensional ones. Our semimodule enrichment now puts us in a position to make this intuition precise.
Recall that an S-semimodule is called free if it is of the form SX for some
X ∈ Set, with pointwise operations; the cardinality of X is its dimension. A semimodule is called projective if it is a retract of a free one [7]. If it is a retract of a finite-dimensional free semimodule, it is projective of ﬁnite type.
Lemma 5.1 Let S ∈ SRng. If M is a compact object in SModS, then it is projective of ﬁnite type.
Proof. [9, Lemma 1.3] SModS is closed and hence enriched over itself. So if M is compact, then there is an isomorphism a : SModS(M, M ) → M ⊗ SModS(M, S)
in SModS. Say a(idM ) = Σn	mi ⊗ ϕi for mi ∈ M and ϕi : M → S and
i = 1,... , n. Define f : M → Sn by f (m)= (ϕ1(m),... , ϕn(m)), and g : Sn → M
by g(r1,... , rn)= Σn	miri. Diagram (6) then yields that Σn	miϕi(m)= m for
all m ∈ M , whence g ◦ f = idM .	 

Let C be a locally small symmetric monoidal category with finite biproducts. One easily shows that the ‘forgetful’ functor C(I, −): C → SModC(I,I) is monoidal, that is, there is a natural transformation with components C(I, X) ⊗ C(I, Y ) → C(I, X ⊗ Y ). If it is moreover a natural isomorphism, it preserves compact objects. This is the case when the tensor product resembles the usual algebraic one used in standard quantum physics to model entanglement. Combining this with the previous lemma gives us the following precise version of the intuition that compact objects are ‘finite-dimensional’ in the standard setting.
Corollary 5.2 If X is a compact object in a locally small symmetric monoidal cat- egory C with ﬁnite biproducts, and C(I, −): C → SModC(I,I) is strong monoidal, then C(I, X) is a projective semimodule of ﬁnite type.

Future work
The fact that symmetric monoidal categories with biproducts are enriched over semimodules is a first step towards a representation theorem for categories that are Abelian except for an absence of subtraction. We intend to formulate the properties required of such categories to replace the well-behavedness of mono’s, kernels, epi’s and cokernels, and subsequently prove that every such category embeds into a category of semimodules. An interesting matter then is the relationship between Mitchell’s scalars and Abramsky’s scalars. Finally, such a category that moreover has a dagger (see [2]) could hopefully embed into a category of inner product semimodules.

Acknowledgement
This work evolved from the elementary observation cSRng = cMon(cMon) that is due to Bart Jacobs, who moreover made helpful suggestions.

References
Abramsky, S., Abstract scalars, loops, and free traced and strongly compact closed categories, in:
Proceedings of CALCO 2005, Lecture Notes in Computer Science 3629 (2005), pp. 1–31.
Abramsky, S. and B. Coecke, A categorical semantics of quantum protocols, in: Proceedings of the 19th IEEE conference on Logic in Computer Science (2004), pp. 415–425.
Borceux, F., “Handbook of Categorical Algebra, volume 2,” Cambridge University Press, 1994.
Eckmann, B. and P. Hilton, Group-like structures in categories, Mathematische Annalen 145 (1962),
pp. 227–255.
Fiore, M. P., Differential structure in models of multiplicative biadditive intuitionistic linear logic, Typed Lambda Calculi and Applications LNCS 4583 (2007), pp. 163–177.
Fox, T., Coalgebras and cartesian categories, Communications in Algebra 4 (1976), pp. 665–667.
Golan, J. S., “Semirings and their Applications,” Kluwer, 1999.
Grothendieck, A., “Cat´egories fibr´ees et descente (Expos´e VI),” Number 224 in Lecture Notes in Mathematics, Springer, 1970, 145–194 pp.

H`ai, P. H., An embedding theorem for Abelian monoidal categories, Compositio Mathematica 132
(2002), pp. 27–48.

Jacobs, B., Semantics of weakening and contraction, Annals of Pure and Applied Logic 69 (1994),
pp. 73–106.

Kelly, M., “Basic Concepts of Enriched Category Theory,” Number London Mathematical Society Lecture Notes in 64, Cambridge University Press, 1982.

Kelly, M. and M. L. Laplaza, Coherence for compact closed categories, Journal of Pure and Applied Algebra 19 (1980), pp. 193–213.

Kock, A., Monads in symmetric monoidal closed categories, Archiv der Mathematik 21 (1970).

Laplaza, M. L., “Coherence in Categories,” Lecture Notes in Mathematics 281, Springer, 1972 pp. 29–65.

Mac Lane, S., “Categories for the Working Mathematician,” Springer, 1978.

Mac Lane, S. and I. Moerdijk, “Sheaves in Geometry and Logic,” Springer, 1992.

Mesablishvili, B., On comonadicity of the extension-of-scalars functors, Journal of Algebra 305 (2006),
pp. 1102–1110.

Mitchell, B., “Theory of Categories,” Academic Press, 1965.


A  The Hilton-Eckmann argument
The following argument is due to Hilton and Eckmann ([4], but see also [15, Exer- cise II.5.5]), who proved it for C = Set. It states that when an object carries two monoid structures and the multiplication map of one is a monoid homomorphism with respect to the other, then the two monoid structures coincide and are in fact commutative.
Theorem A.1 (Hilton-Eckmann) Let (C, ⊗,I) be a symmetric monoidal cate- gory. Suppose given an object X ∈ C and morphisms μ1, μ2 : X ⊗ X → X and η1, η2 : I → X. If (X, μ1, η1) and (X, μ2, η2) are both monoids (in C) and the following diagram commutes,

X ⊗ X ⊗ X ⊗ X μ2⊗μ2 X ⊗ X
id⊗γ⊗id J∼= 

X ⊗ X ⊗ X ⊗ X	μ1
μ1 ⊗μ1 J	J 
(A.1)

X ⊗ X	μ2	 X 

then (X, μ1, η1)= (X, μ2, η2) is in fact a commutative monoid (in C).

Proof. First we show that η1 = η2.
I ¸¸¸ ∼=


∼=  I ,

z 
⊗ I ⊗ I
	∼=	 I

¸¸η¸1¸⊗¸η2⊗η2⊗η1
¸¸z_

μ ⊗μ 

X ⊗ X ⊗ X ⊗ X 2
∼=	id⊗γ⊗id J∼= 
X ⊗ X ⊗ X ⊗ X
J	μ1 ⊗μ1 J 
2 X
η1

⊗ I	η ⊗η
 X ⊗ X	μ2

2	2
 ..s. .
¸¸ J 

I	η2	 X 
To prevent a forest of diagrams, we give rest of the proof for C = Set. The reader can check for herself that it generalizes to any symmetric monoidal category. Let us further abbreviate η1 = η2 to 1, μ1(x, y) to x ◦ y, and μ2(x, y) to x • y.


x ◦ y = (1 • x) ◦ (y • 1)
= (y ◦ 1) • (1 ◦ x)
(A.1)
= (1 ◦ y) • (x ◦ 1) = y • x
(A.1)
= (y • 1) ◦ (1 • x)= y ◦ x.

 
