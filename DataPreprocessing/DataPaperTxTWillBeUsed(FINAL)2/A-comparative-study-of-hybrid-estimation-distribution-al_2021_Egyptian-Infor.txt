Egyptian Informatics Journal 22 (2021) 505–513











A comparative study of hybrid estimation distribution algorithms in solving the facility layout problem
Amalia Utamima ⇑
Faculty of Intelligent Electrical and Informatics Technology, Institut Teknologi Sepuluh Nopember, Indonesia



a r t i c l e  i n f o 

Article history:
Received 30 June 2020
Revised 15 September 2020
Accepted 11 April 2021
Available online 30 April 2021

Keywords:
Estimation distribution algorithm Facility layout problem
Hybrid algorithms Safe work
a b s t r a c t 

The Estimation Distribution Algorithm (EDA) is an evolutionary algorithm that uses probabilistic models to create candidate solutions. Previous researchers have suggested various hybrid methods to avoid the premature convergence of EDA. This research conducts a comparative study between several variations of hybridization in EDA with regards to the descriptive statistics in the objective values.
This study also proposes a new hybrid approach, named Adapted EDA (AEDA), by adapting the struc- ture of EDA by adding a lottery procedure, an elitism strategy, and a neighborhood search. The proposed AEDA, several hybridizations of EDA, and Genetic Algorithm (GA) plus Tabu Search (TS) are applied to the facility layout design in manufacture – Enhanced Facility Layout Problem (EFLP) – to analyze their solu- tions. The hybrid EDAs that are being compared are EDA plus GA (EDAGA), EDA plus Particle Swarm Optimization (EDAPSO), the combination of EDAPSO plus TS (EDAhybrid), and AEDA. The experimental results show that the AEDA can significantly improves the solution quality in solving all the EFLP instances compared to other algorithms.
© 2021 THE AUTHOR. Published by Elsevier BV. on behalf of Faculty of Computers and Artificial Intelli-
gence, Cairo University. This is an open access article under the CC BY-NC-ND license (http://creative-
commons.org/licenses/by-nc-nd/4.0/).





Introduction

The Estimation Distribution Algorithm (EDA) is an evolutionary technique that reproduces new candidate solutions from the eval- uation of the probabilistic distribution of the population to get a more efficient search. EDA has an issue with lack of diversity, which results in a premature convergence of its solution [1]. Previ- ous research proposed various hybridizations of EDA with other heuristics or metaheuristics algorithms to avoid the local optima. The hybridizations of EDA were applied to solve different kinds of optimization such as supermarket location problem [2], agricul- tural routing planning [3], and vehicle routing problem [4]. The algorithms’ results were proven to provide practical solutions to the issues given. Despite the effectiveness of the hybridizations of EDA to solve the various problems, no research compares the

* Corresponding author.
E-mail address: amalia@is.its.ac.id
Peer review under responsibility of Faculty of Computers and Artificial Intelligence, Cairo University.
solution quality for different types of hybridizations of EDA. Hence this research makes a comparative study between several different hybridizations of EDA.
The single row facility layout problem (SFLP) is categorized as an NP-complete problem, and a heuristics method is needed to provide a near-optimal solution [5]. The enhanced facility layout problem (EFLP) is an extension of SFLP with the addition of install- ment cost, and the safety constraint [6]. The experiments in this research show that the solution to several instances of EFLP can still be improved. Therefore, the new variant of EDA is proposed to deal with the problem. This research tests the proposed algo- rithm to solve instances of EFLP.
The contributions of this research are the comparative study between the hybridization of EDA, the introduction of a new vari- ant of EDA named Adapted EDA (AEDA), and the application of the algorithms to EFLP datasets. This paper is organized as follows. Pre- vious studies are reviewed in Section 2, while the problem is described in Section 3. The methodology is followed by a descrip- tion of AEDA, hybridization of EDA, and Genetic Algorithm (GA) with Tabu Search (TS) in Section 4. The experimental results and the comparative study are recorded and analyzed as well in Sec- tion 5. Finally, the discussion and conclusion of this study are drawn based on the outcome analysis in Section 6.





https://doi.org/10.1016/j.eij.2021.04.002
1110-8665/© 2021 THE AUTHOR. Published by Elsevier BV. on behalf of Faculty of Computers and Artificial Intelligence, Cairo University. This is an open access article under the CC BY-NC-ND license (http://creativecommons.org/licenses/by-nc-nd/4.0/).



Literature review

EDA is categorized as a stochastic optimization method that builds and samples the probabilistic models from a group of promising solutions. Metaheuristic algorithms tend to generate random candidate solutions to be processed into the new genera- tion. In contrast, EDA uses the probabilistic models to create a group of new candidate solutions. This approach enhances the solution quality of EDA because the produced offspring are statis- tically built and sampled based on a probability model derived from a group of parents’ best fitness. As a tool for evolutionary computation, EDA becomes a promising algorithm that can com- petitively solve the optimization problem [1].
EDA, first introduced by Baluja in [7], formerly contained a sin- gle probabilistic model. Current research hypothesizes that the effectiveness of EDA depends primarily on the accuracy of the probabilistic model to extract the information in the population. Therefore, the multivariate probabilistic model becomes an option to build a better probabilistic model [8]. This reasoning determined the use of two probabilistic models in EDA, the ordinal and the dependency, in this research. A detailed explanation is provided
in Section 4.1.1.
Problem description

EFLP considers the installation cost and inserts the safety con- straint. The installation cost is related to the fixed cost to assign a facility to a specific location [19]. Because of the variation of a facility’s installment cost in every position, then besides flow matrices, EFLP also adds installation cost matrices. Meanwhile, the safety constraint, which is also called technological constraint in [20], prohibits two specified facilities from being placed directly adjacent to each other [5].
A description of the variables in the EFLP’s mathematical model is given in Table 1. The EFLP’s objective function, adapted from [7], is stated in Eq. (1), which minimizes the sum of both the flow’s dis- tance between every facility and the installation cost of every facil- ity. This research generalizes the formula by adding three decision
variables (Eqs. (2)–(4). The decision variables xij; yik, and aij indicate
the adjacency of two facilities, the position of facilities in locations, and the safety constraint, respectively. Eq. (5) specifies the distance of two adjacent facilities and considers their length and clearance space. Eqs. (6) and (7) makes sure the flow loads and installation costs are greater than 0. Finally, Eq. (8) limits that all decision vari- ables are a binary number.

As with other metaheuristic algorithms, EDA appears to be trapped in local optima when dealing with a large scale problem [9]. Therefore, EDA is hybridized with several heuristics and meta-
Z = min
n—1 n
i=1 j=i+1
 xij Wijdij + aijP +

Xk=1 Xi=1
yik Cik !
(1)

heuristics algorithms to improve the solution. Among all, there were Particle Swarm Optimization (PSO) [10], Differential Evolu-

xij
=  1; if facility i is put next to j
0; otherwise
(2)

tion (DE) [2], GA [11], and Bayesian Optimization Algorithm (BOA) [4]. The specific combination of EDA with a mutation oper-
ator, demonstrated in [12], can improve the searchability of the
yik =
1;  if facility i is assigned to location k
0; otherwise
(3)

algorithm.
The  supermarket  location  problem  was  solved  with  the

aij
=  1;  if facility i cannot be put adjacent to j
0; otherwise
(4)

hybridization of EDA and DE [2]. The hybrid EDA and PSO was uti- lized for solving the reservoir flood control operation [10]. Mean- while, the combination of EDA and GA was used to deal with the scheduling problem [2]. The combination of EDA and BOA was used to solve vehicle routing problem [4].
The objective of SFLP is to minimize the sum of the products’ flow cost based on the distance between facilities. The SFLP is found in many real-world problems, such as room arrangements, department arrangements in offices, and machine arrangements in the manufacture [13]. A constrained SFLP that considers a few facilities need to be placed in certain positions with/without allow- ing the arrangement of any other facility in between two ordered facilities is described in [5,14]. A permutation-based GA (pGA) was proposed by [5] to solve the constrained SFLP. Recently, the work in [14] demonstrated that a fireworks algorithm performs better than the pGA for solving the constrained SFLP.
SFLP that consider material handling cost and rearrangement cost of the departments at the beginning of each period was pro- posed in [15]. The authors used Simulated Annealing (SA) and GA and their hybridizations to deal with the problem. The results showed that SA demonstrated better performance comparing to other algorithms [15]. Meanwhile, DE and its variant were explored by [16] to solve SFLP. GA and a neighborhood search were also proposed in the previous literature to deal with the SFLP [17,18].
To summarize, the following research gaps can be stated, as indicated earlier in the Introduction section. First, there is no research that compares the solution quality of the hybridization of EDA. Hence, more research is essential to direct the develop- ment of EDA. Second, in recent years, there have been no studies that utilize EDA to deal with SFLP and EFLP. Therefore, the com- parative study in this problem is a potential area for further research.
s.t.:


dij P li + lj + sij; dij; sij P 0; li; lj > 0	(5)
Wij > 0; i; j = 1; 2; ... ; n	(6)
Cik > 0; i; j; k = 1; 2; .. . ; n	(7)
xij ∈ {0; 1}; yik ∈ {0; 1}; pij ∈ {0; 1}	(8)
Methods

The proposed algorithm: AEDA

This study suggests a new hybrid EDA, the Adapted Estimation Distribution Algorithm (AEDA). The structure of EDA is modified by


Table 1
The variable description in the EFLP mathematical model.

Variable  Descriptions


xij	A decision variable, equal to 1 if facility i is put adjacent to j; otherwise it equals to 0
yik	A decision variable, equal to 1 if facility i is put into location k; otherwise it equals to 0
aij	A decision variable, equals to 1 if facility i cannot be placed adjacent to facility j; otherwise it equals to 0
n	Number of facilities
k	Location of a facility (k = 1; 2; .. . ; n)
i; j	Facility indices (i; j = 1; 2; .. . ; n)
li	Length of facility i
Wij	Flow loads between facility i and facility j
Cik	Installation cost of assigning facility i to location k dij	Centers’ distance of facility i and facility j
sij	Clearance space between the two facilities
P	Penalty cost of violating safety constraint





adding a lottery part, a roulette wheel selection, an elitism strat- egy, and TS. These additional components in AEDA are used to maintain the self-adaptation of the evolutionary algorithm [21]. The main phases of AEDA are selection, probabilistic model calcu- lation, sampling, and neighborhood search. The pseudocode of AEDA is detailed in Algorithm 1, while a description of the vari- ables is given in Table 2.
At first, a group of candidate solutions is initialized randomly. The structure of these candidate solutions is constructed using the permutation-based variable. The cost of every candidate solu- tion is then calculated. The iteration begins and the main phases of AEDA (described in the following subsections) are executed.

Selection and probabilistic model calculation phases
The iteration of AEDA starts with the selection phase, which uti- lizes truncation selection. Truncation selection, significantly improve the model accuracy [22], selects a set of candidate solu- tions that have better fitness compared to other solutions. The result of the selection phase (Algorithm 1, line 4) is recorded in S. The following step in AEDA calculates the probabilistic models (Algorithm 1, lines 5–6). Two probabilistic models are used in this stage, ordinal and dependent. Eq. (9) is used to calculate the prob- ability of assigning a facility to a location. In Eq. (9), Pik is the prob- ability	of	installing	facility	i	at	position	k	(where
k = 2; 3; ... ; n; i; j = 1; 2; ... ; n). The ordinal probability model (uik )
represents the significance of a facility situated in a location, while
the dependence probability model (wij ) refers to the importance of a facility placed next to another facility.
 u + w 
in a location, it is added to F and X will remove it from the unas- signed facilities. The cost of each candidate solution is calculated, and cBest is updated. TS (Algorithm 1, lines 23–25) is described in the following subsection.

4.1.3. Neighborhood search phase
AEDA first checks whether cBest is better than gBest. Neighbor- hood search is performed if there is no improvement in gBest in the current generation [18]. If cBest in the current generation cannot improve on gBest, then a neighborhood search based on TS is run. Otherwise, AEDA will go directly to the Elitism procedure and pro- gress to the next generation. The ability of AEDA to choose between running TS or moving on to the next iteration saves the computation time. If gBest is still better than cBest, then TS will be operated; otherwise, gBest is set equal to cBest. The TS procedure is performed for some generations (tabuGen).
The swaplist, constructed in every tabuGen, contains a set of the move (the swap of two facilities) and the associated costs (tcost). Next, TS checks if a move is taboo and if the cost of every move (tcost) worse than tabuSol. A penalty charge is given if a move matches these conditions. TS then updates the tabooList and tabu- Sol. At the end of a generation, tabuSol will contain the best solu- tion from TS. The TS phase ends with the replacement of gBest with tabuSol if the better solution is found in tabuSol. Finally, the elitism procedure, which records 10% of the best solution through the gen- erations, is performed at the end of every generation of AEDA.

Algorithm 1 AEDA


1: Initialize variables and set parameters

ik	ij
ik	+ wij
(9)
2: for each generation do
3:	Calculate cost; cBest; and gBest
4:	S ← Selection()
5:	Compute Ordinal probabilistic model (S)

Sampling phase
The sampling phase is shown in Algorithm 1, lines 7–21. For each candidate solution, the sampling step begins with the placing of a facility on the first location (Algorithm 1, lines 9–13). This research proposes a lottery procedure to maintain the diversity of the population. Based on the previous study from [11], one of the methods to keep the diverseness is by adding randomness in a part of EDA. This lottery procedure selects either the first facility from the previous generation (from S) or a random facility to be placed in the first location. This research experimented in running AEDA with several combinations of LotteryRate and found that the best setting to be 5%.
The roulette wheel selection is then utilized to assign facilities into the second location until the n position is reached (Algorithm 1, lines 14–20). The probability of setting a facility to a location (calculated in Eq. (9)) is recorded in every position. Next, the cumulative probability is calculated, and a uniformly distributed random number is generated [31]. Using the roulette wheel con- cept, facilities are put into locations. Each time a facility is placed


Table 2
Description of the variables used in the pseudocode of AEDA.

Variable	Descriptions


S	A group of selected candidate solutions
n	Number of facilities
cBest	Current best solution
gBest	Global best solution through generations so far
F	Set of assigned facilities
P	Probability of assigning facilities to locations
X	Set of unassigned facilities
h	A random number
i	A selected facility by roulette wheel selection
k	The index of a facility’s position

6:	Compute Dependency probabilistic model (S) 7:	for each candidate solution do
8:	F ← £
9:	if j < lotteryRate then
10:		F(1)← Lottery() 11:	else
12:		F(1)← RandSe1ect (S(1)) 13:	end if
14:	for k=2 until n do
15:	cumP ← Calculate cumulative probability of P
16:	h ← U(0; 1)
17:	Roulette Wheel Selection (h; cumP)
18:	F(k)← i
19:	X ← X \ i
20:	end for
21:	end for
22:	Calculate cost; Update cBest
23:	if cBest > gBest then
24:	TabuSearch (cBest)
25:	end if
26:	Update gBest
27:	Elitism()
28: end for




The hybridization of EDA

This research re-coded several hybridizations of EDA based on explanation in previous literature. Those combinations are EDA plus GA (EDAGA), EDA plus PSO (EDAPSO), and EDAPSO plus TS (EDAhybrid).



EDAGA
The concept of EDAGA, firstly introduced by Chen et al. (2012) [23,24], was to combine GA into the structure of EDA. GA ensures the group of candidates remains diverse, while EDA exploits the candidate to achieve a good solution. EDAGA has been used for the scheduling problem [23], no-idle flow shop scheduling prob- lem [24]. Algorithm 2 shows the basic pseudocode of EDAGA.
The general concept is to run EDA and GA alternately until a stopping criterion (i.e., the maximum number of generations) is met. The EDA procedure (Algorithm 2, lines 4–6), is run on every even generation. A probabilistic model is developed based on the selected chromosomes. The sampling procedure generates new chromosomes based on the probabilistic model.
The GA approach (Algorithm 2, lines 7–9) is executed when the generation is odd. The two-point crossover procedure is applied in the selected chromosomes. Meanwhile, mutations will occur ran- domly at several points in a chromosome. The crossover and muta- tion procedures are applied to the chromosomes using crossover rate of 0.7 and a mutation rate of 0.3 [6]. The process continues with the evaluation of the fitness value of every chromosome. The best solution and population updating will then follow.

EDAhybrid
EDAhybrid is a combination of EDA, PSO, and TS. Generally, EDA and PSO are run alternately to maintain the diverseness in the EDAhybrid, and TS concept is then added. This algorithm is used to solve the facility layout problem [6].
Algorithm 3 shows the pseudocode of EDAhybrid. The EDA pro- cedure (Algorithm 3, lines 4–7) employs two probabilistic models to sampling (generating) new solutions. The PSO procedure (Algo- rithm 3, lines 8–9) calculates the velocity of each particle (candi- date solution) in the swarm (population). Particle updating is then performed.
EDAhybrid continues with the fitness value calculation of every particle. Particle best (pBest), that is, the current best particle found in the swarm and gBest (the best particle found so far through gen- eration) are then updated. TS (Algorithm 3, lines 12) will exploits gBest to find whether an improvement can be made. If the solution from TS is better than gBest, it will replace gBest. The elitism proce- dure is applied at the end of every iteration.

EDAPSO
EDAPSO algorithm is a combination of EDA plus PSO. Algorithm 4 shows the pseudocode of EDAPSO. The hybridization of EDA and PSO also can be found in the reservoir flood control operation [10]. The concept of this EDAPSO is embedding PSO inside the EDA to preserve the diversity of the algorithm. The difference between EDAPSO and EDAhybrid is the existence of a local search and elit- ism. EDAPSO does not use a local search and elitism in its iteration. The EDA part is run every even generation (Algorithm 4, lines 4–6), while PSO is executed every odd generation (Algorithm 4, lines 7– 8). Then, pBest and gBest will be updated and the new particles is
sent to the next generation.
10:	end if
11:	Update fitness, population and gbest
12: end for




Algorithm 3 EDAhybrid


1: Initialize variables and set parameters 2: for each generation g do
3:	Calculate fitness; pBest; and gBest
4:	if g is even then
5:	Select S; Calculate ordinal probabilistic model(S) 6:	Calculate dependence probabilistic model(S)
7:	Sampling()
8:	else
9:		Calculate velocity(); Update population() 10:	end if
11:	Update fitness, pbest
12:	gbest ← TabuSearch (pBest) 13:	Elitism()
14: end for




Algorithm 4 EDAPSO


1: Initialize variables and set parameters 2: for each generation g do
3:	Compute fitness; pBest; and gBest
4:	if g is even then
5:	Select S; Calculate probabilistic model(S) 6:	Sampling()
7:	else
8:		Calculate velocity(); Update swarm() 9:	end If
10:	Update pbest and gbest
11: end for




Genetic algorithm with Tabu search

GA, as well as its hybridization with other heuristic algorithms, is often found in the literature [25]. A hybrid GA with a deconstruc- tion and reconstruction solution for a facility layout problem was demonstrated in [26]. A modified rotation operator in GA was used for static facility layout problems [27]. Among others, a hybridiza- tion of GA and TS was proven as a robust algorithm to solve com- binatoric problems such as job shop scheduling [28] and vehicle

		routing [29]. However, in the SFLP area, the combination of GA

Algorithm 2 EDAGA
1: Initialize variables and set parameters 2: for each generation g do
3:	Compute fitness in population 4:	if g is even then
5:	Select P; Calculate a probabilistic model(P) 6:	Sampling()
7:	else
8:	Select P; Crossover(P)
9:	Mutation()
and TS as a method is hardly found. Therefore, this research estab- lishes the GA plus TS (GATS) to be benchmarked against AEDA. The concept of GATS is to add TS as a local search. Algorithm 5 presents the GATS procedure.
As shown in Algorithm 5, the generation starts with the fitness calculation of every chromosome in the population. The parents are then selected via roulette wheel selection. The crossover (using two-point operator) and mutation procedures are applied to the chromosomes. After that, the replacement step will renew the chromosomes with their offspring. TS part of GATS is executed if there is no improvement in the gbest. The elitism procedure is per- formed at the end of every generation.





Algorithm 5 GATS


1: Initialize variables and set parameters 2: for each generation do
4:  P ← RouletteWheelSelection() 3:  Calculate fitness in population 5:  Crossover(P)
6:   Mutation()
7:	Replacement(); Update fitness, cbest
8:	gbest ← TabuSearch (cBest) 9:	Elitism()
10: end for




Experimental results

This study utilizes Matlab in a PC with an Intel i5 processor and 12 GB RAM to develop all algorithms. The parameters of these algorithms are similar in that the bigger the problem size, the more iterations needed. This section lists the results of the implementa- tion of all algorithms along with an analysis of the results.

Testing

In the testing phase, all algorithms are coded to solve 15 benchmarked datasets in SFLP. Every algorithm is run 10 times. Table 3 shows the minimum value generated by our proposed algorithm (AEDA), along with those of EDAGA, EDAhybrid, EDAPSO, and GATS. The bold value indicates the minimum value in every row. The different name of the problem code means the different specification of the problem. The last row is the gap (represent the difference) of the achieved solutions of each algo- rithm compare to the optimum solution (from literature [17,30]) found so far.
Both EDAGA and EDAPSO achieve optimum solutions in 9 out of the 15 problems. However, EDAGA’s solutions has the biggest gap compare other algorithms. Meanwhile, GATS achieves the minimum solutions in 13 out of 15 instances with the smaller gap than EDAGA and EDAPSO. AEDA achieves the optimum solu- tion in all 15 problems listed in Table 3 that make a 0% gap and the smallest (best objective value) compare to other algorithms. In 13 of the problems (LW5 to P30), AEDA achieves the same optimum solution as EDAhybrid, while in A30, AEDA outperforms EDAhybrid.
Solving EFLP

The EFLP data consists of seven instances varying from 5 to 30 facilities. Three of them (the problems with 5, 11, and 20 facilities) are taken from previous literature [6]. This research generated the other four instances, those are the problems with 8, 15, 17, and 30 facilities. This research compares the minimum results, maximum value, mean, standard deviation, and the running time of AEDA, EDAGA, EDAhybrid, EDAPSO, and GATS in 100 replications. Table 4 compares the minimum value and maximum result of the algo- rithms in solving EFLP, while Table 5 lists the mean and the stan- dard deviation.
The results in Table 4 shows that the AEDA and GATS success- fully achieve the minimum (optimum) solution in all problem instances, while the EDAhybrid gets the minimum solution from problem five until Problem 20. AEDA and EDAhybrid achieve the best maximum value on 5 and 4 problems, respectively. However, GATS only gets the best maximum value in 2 problems. Mean- while, both EDAGA and EDAPSO only can get the minimum solu- tion in 3 problems.
The performance of all algorithms to solve EFLP is also shown in Table 5. The percentage error in the last row in Table 5 represents the gap between the mean value in 100 runs with the lowest min- imum value of all algorithms. AEDA achieves the smallest mean in 6 problems, while EDAhybrid gets the smallest mean in 1 problem. AEDA’s standard deviations are the smallest in 4 problems, while EDAhybrid’s standard deviations are the smallest in 3 problems. Meanwhile, none of EDAGA, EDAPSO, and GATS can get the small- est mean and standard deviation. In terms of percentage error, AEDA obtains the first place (lowest value with 1.12%) compare to other algorithms, while EDAhybrid and GATS come in second and third place, respectively. EDAPSO’s percentage error is almost three times higher than AEDA, while that in EDAGA is more than five times higher than AEDA.
Fig. 1 shows the boxplots of all algorithms’ solutions for small- size problem (8), medium-size problem (15), and large-size prob- lem (30). The boxplot of each algorithm in Problem 8 is almost the same, while the boxplots of Problems 15 and 30 show that AEDA, EDAhybrid, and GATS are better than EDAPSO and EDAGA. In order to test whether the means of each algorithm are signifi- cantly different, the ANOVA test is then applied. Since both of the boxplots of Problems 15 and 30 are almost similar, the ANOVA tests are performed to Problems 8 and 30. Tables 6 and 7 show the ANOVA tables of Problems 8 and 30, respectively. The p-values in Tables 6 and 7 indicate that ANOVA rejects the null hypothesis that all algorithms means are equal. The post hoc test using a multiple



Table 3
The comparison of the minimum results of all algorithms (in SFLP).



Table 4
Comparison of the minimum and maximum value for all algorithms (in EFLP).

Problem	EDAGA	EDAhybrid	EDAPSO	GATS	AEDA


Table 5
The comparison of the mean and standard deviation of all algorithms (in EFLP).

Problem	EDAGA	EDAhybrid	EDAPSO	GATS	AEDA


Fig. 1. The boxplot of all algorithms’ solutions in (a) Problem 8, (b) Problem 15, and (c) Problem 30.



Table 6
ANOVA result of Problem 8.



Table 7
ANOVA result of Problem 30.



comparison test (Dunnett test) is then used to determine which algorithms means are different from others. In the Dunnett test, two group means are significantly different if their intervals are disjoint; they are not significantly different if their intervals overlap.
Fig. 2 shows the Dunnet tests of (a) Problem 8 and (b) Problem
30. Fig. 2 (a) describes that in Problem 8, EDAhybrid, GATS, and AEDA have means significantly different from EDAPSO; no algo- rithms have means significantly different from EDAGA; and the means of EDAhybrid, EDAGA, GATS, and AEDA are not significantly




Fig. 2. The Dunnet test of (a) Problem 8 and (b) Problem 30.





Table 8
The comparison of the mean and standard deviation of the all algorithms’ running time.




Fig. 3. The boxplot of all algorithms’ running time in (a) Problem 8, (b) Problem 15, and (c) Problem 30.


different. On the other hand, Fig. 2 (b) shows that in Problem 30, EDAhybrid, GATS, and AEDA have means significantly different from EDAGA and EDAPSO; the means of EDAhybrid, GATS, and AEDA are not significantly different; and the means of EDAGA and EDAPSO are significantly different.
Table 8 provides the mean and standard deviation of the run- ning time (in seconds) of all the algorithms. AEDA achieves the smallest mean of running time on 4 out of the 7 problems, while EDAPSO gets the smallest mean of running time in the rest of 3 problems. The standard deviation of EDAPSO’s running time is the smallest in 4 instances, while those in AEDA and EDAGA are the smallest in 2 problems and 1 problem, respectively. The GATS’s mean and standard deviation on its running time is slower com- pare to AEDA and EDAPSO. Meanwhile, EDAhybrid’s running time gets the longest mean and standard deviation compare to others.
Fig. 3 illustrates the boxplots of all algorithms’ running time in small-size problem (8), medium-size problem (15), and large-size problem (30). The boxplots in Fig. 3 (a) Problem 8 and (c) Problem 30 show that the box area of every algorithm is not intersected with each other; therefore, it is likely that their means are signifi- cantly different. Hence, the ANOVA test is applied only to Problem
15 and the p-value is 2.93x10—301. The Dunnett test of the running time in Problem 15 is shown in Fig. 4. The result describes that the
means of running time of AEDA and EDAPSO are not significantly different, while those on other pairs are significantly different.
Fig. 5 shows the graphical illustration of all the algorithms’ con- vergence when solving Problem 15 of EFLP. As illustrated in Fig. 5, the AEDA able to get the optimal solution in less iteration com- pared to other algorithms. GATS converges faster than AEDA; how- ever, the objective value is worse than AEDA and EDAhybrid.






Fig. 4. The Dunnet test of Problem 15’s running time.



Fig. 5. The convergence comparison of all the algorithms (in Problem 15).




Although EDAhybrid first solution is better than different algo- rithms, it needs more generation to converge compare to AEDA and GATS. Meanwhile, EDAPSO and EDAGA need more iteration to get better solutions.

Conclusion

This research presents a comparative study of several hybridizations of EDA in solving the facility layout problem. This study also proposes a new algorithm called AEDA. The experimen- tal results for AEDA, EDAGA, EDAPSO, EDAhybrid, and GATS are applied to instances of EFLP. All algorithms perform well in the first 3 problems, while AEDA, EDAhybrid, and GATS manage their good performances in all problems. Generally, based on the comparison of minimum value, maximum value, mean, and standard deviation of the solutions, the best algorithm is AEDA, followed by EDAhy- brid and GATS, and finally EDAPSO and EDAGA. The ANOVA test is performed to some instances of the results and followed by post hoc (Dunnett) test. The Dunnett test show that the means of AEDA, EDAhybrid, and GATS are not significantly different. Meanwhile, the comparison of mean and standard deviation in all algorithms’ running time show that AEDA and EDAPSO are faster than other algorithms.
The comparative study of the hybrid algorithms in this research is expected to inspire future research to determine which methods are likely to be chosen. The data and the results provided can become a benchmark for future research in EFLP. Future research also can focus on improving the performance of the algorithms or applying different cases.
Acknowledgements

The authors gratefully acknowledge financial support from the Institut Teknologi Sepuluh Nopember for this work, under project scheme of the Publication Writing and IPR Incentive Program (PPHKI).


References

Gao S, de Silva CW. Estimation distribution algorithms on constrained optimization problems. Appl Math Comput 2018;339:323–45.
Zhou B-H, Tan F. A self-adaptive estimation of distribution algorithm with differential evolution strategy for supermarket location problem. Neural Comput Appl 2020;32(10):5791–804.
Utamima A, Reiners T, Ansaripoor AH. Evolutionary estimation of distribution algorithm for agricultural routing planning in field logistic. Proc Comput Sci 2019;161:560–7. doi: https://doi.org/10.1016/j.procs.2019.11.156.
Pérez-Rodríguez R, Hernández-Aguirre A. A hybrid estimation of distribution algorithm for the vehicle routing problem with time windows. Comput Ind Eng 2019;130:75–96.
Kalita Z, Datta D. A constrained single-row facility layout problem. Int J Adv Manuf Tech 2018;98(5–8):2173–84.
Ou-Yang C, Utamima A. Hybrid estimation of distribution algorithm for solving single row facility layout problem. Comput Ind Eng 2013;66(1):95–103.
S. Baluja, Population-based incremental learning. a method for integrating genetic search based function optimization and competitive learning, Tech. rep., Carnegie-Mellon Univ Pittsburgh Pa Dept Of Computer Science (1994).
Martins JP, Delbem AC. Pairwise independence and its impact on estimation of distribution algorithms. Swarm Evol Comput 2016;27:80–96.
Cravo GL, Amaral AR. A GRASP algorithm for solving large-scale single row facility layout problems. Comput Oper Res 2019;106:49–61.
Luo J, Qi Y, Xie J, Zhang X. A hybrid multi-objective PSO–EDA algorithm for reservoir flood control operation. Appl Soft Comput 2015;34:526–38.
Chen S-H, Chen M-C, Liou Y-C. Artificial chromosomes with genetic Algorithm 2 (ACGA2) for single machine scheduling problems with sequence-dependent setup times. Appl Soft Comput 2014;17:167–75.
Handa H. The effectiveness of mutation operation in the case of estimation of distribution algorithms. Biosystems 2007;87(2–3):243–51.
Scalia G, Micale R, Enea M. Facility layout problem: Bibliometric and benchmarking analysis. Int J Ind Eng Comput 2019;10(4):453–72.
Liu S, Zhang Z, Guan C, Zhu L, Zhang M, Guo P. An improved fireworks algorithm for the constrained single-row facility layout problem. Int J Prod Res 2020:1–19.
S ahin R, Niroomand S, Durmaz ED, Molla-Alizadeh-Zavardehi S. Mathematical formulation and hybrid meta-heuristic solution approaches for dynamic single row facility layout problem. Ann Oper Res 2020:1–24.
Krömer P, Platoš J, Snášel V. Solving the single row facility layout problem by differential evolution, in. In: Proceedings of the 2020 genetic and evolutionary computation conference. p. 210–8.
Datta D, Amaral AR, Figueira JR. Single row facility layout problem using a permutation-based genetic algorithm. Eur J Oper Res 2011;213(2):388–94.
Ripon KSN, Glette K, Khan KN, Hovin M, Torresen J. Adaptive variable neighborhood search for solving multi-objective facility layout problems with unequal area facilities. Swarm Evol Comput 2013;8:1–12.
Sule DR. Manufacturing facilities: location, planning, and design. CRC Press; 2008.
Heragu SS. Facilities design. 4th ed. CRC Press; 2018.
Kramer O. Evolutionary self-adaptation: A survey of operators and strategy parameters. Evol Intel 2010;3(2):51–65.
Utamima A, Ou-Yang C. Solving single row facility layout problem using extended artificial chromosome genetic algorithm. Journal of Technology 2012;27(4):189–94.
Chen Y-M, Chen M-C, Chang P-C, Chen S-H. Extended artificial chromosomes genetic algorithm for permutation flowshop scheduling problems. Comput Ind Eng 2012;62(2):536–45.
Shen J-N, Wang L, Wang S-Y. A bi-population EDA for solving the no-idle permutation flow-shop scheduling problem with the total tardiness criterion. Knowl-Based Syst 2015;74:167–75.
Briskorn D, Dienstknecht M. Survey of quantitative methods in construction. Comput Oper Res 2018;92:194–207.
Paes FG, Pessoa AA, Vidal T. A hybrid genetic algorithm with decomposition phases for the unequal area facility layout problem. Eur J Oper Res 2017;256 (3):742–56.
Hasda RK, Bhattacharjya RK, Bennis F. Modified genetic algorithms for solving facility layout problems. Int J Interact Des Manuf 2017;11(3):713–25.
Tamssaouet K, Dauzère-Pérès S, Yugma C. Metaheuristics for the job-shop scheduling problem with machine availability constraints. Comput Ind Eng 2018;125:1–8.



Utamima A, Pradina KR, Dini NS, Studiawan H. Distribution route optimization of gallon water using genetic algorithm and tabu search. Proc Comput Sci 2015;72:503–10.
Guan J, Lin G. Hybridizing variable neighborhood search with ant colony optimization for solving the single row facility layout problem. Eur J Oper Res 2016;248(3):899–909.
Utamima Amalia, Reiners Torsten, Ansaripoor AH. Automation in Agriculture: A Case Study of Route Planning Using an Evolutionary Lovebird Algorithm. ACM International Conference Proceeding Series 2020:13–7. doi: https://doi. org/10.1145/3384613.3384621.
