Electronic Notes in Theoretical Computer Science 190 (2007) 43–58	
www.elsevier.com/locate/entcs

Co-Algebraic Models for Quantitative Spatial Logics 1
Vincenzo Ciancia 2	Gian Luigi Ferrari 3
Dipartimento di Informatica Universita` di Pisa
Italy

Abstract
We introduce a class of coalgebraic models and a family of modal logics that support the specification of spatial properties of distributed applications. The evaluation of a formula yields a value in a suitable multi-valued algebraic structure, giving a measure of the satisfaction of a requirement, induced by the decomposition of a system into subsystems, meant as available resources. As semantic domain we consider certain algebraic structures, called c-semirings, that allow us to generalize boolean logics to the multi- valued case, while keeping a number of the axioms of boolean algebras. Under suitable conditions on the structure of c-semirings, we show that, even if our logical formalisms are equipped with spatial operators, the interpretation of formulas fully characterizes bisimilarity.
Keywords: Modal Logics, Spatial Logics, Coalgebras, C-Semirings, Quality of Service


Introduction
The use of spatial logics for process calculi [6,8,9] is receiving more and more atten- tion in the last years, in order to reason about non-behavioral aspects of computa- tion, such as the presence of hidden resources, or the decomposition of a system into parallel components. The main difference between spatial logics and more “tradi- tional” observational temporal logics (see e.g. [21]), is that the latter only allow observations about the behavior of a system, which is constituted by the visible effect of actions that the system performs, and synchronizations with the outside world. For this reason, temporal logics are considered extensional : we do not need to know how a system is made, in order to tell what properties it satisfies, but just to describe its interactions with the operational environment. Spatial logics, instead,

1 Research partially supported by the EU, within the FETPI Global Computing, Project IST-2005-16004 Sensoria (Software Engineering for Service-Oriented Overlay Computers).
2 Email: ciancia@di.unipi.it
3 Email: giangi@di.unipi.it

1571-0661 © 2007 Published by Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2007.07.004

are usually considered intensional, because the meaning of formulas is not reflected in the observational semantics of programs. For example, a typical spatial operator is parallel decomposition, which is usually defined on the syntax of programs, rather than on the semantic model, because parallel components are usually forgotten in the semantics.
Being extensional is important for a logic, because relations like soundness and completeness can be established between semantic equivalence and logical equiva- lence. On the other hand, spatial operators are of interest not only for the very specific purpose of dealing with distributed computations, but in a more general sense to represent availability of arbitrary resources in computation: the fact that a system in a given state is decomposable in two parts, for example, can be in- terpreted as the fact that it “contains” two distinct resources. In [7], the work on spatial logics has inspired the development of a type system where it is possible to express resource access policies and ownership of resources by exploiting forms of spatial operators.
Recently, some approaches have addressed the definition on non-syntactical mod- els of spatial logics. In [16] and [13], for example, spatial logics have been interpreted over particular kinds of graph rewriting systems, rather than on the term language of a specific process calculus. In [23], a non-syntactical interpretation of paral- lel decomposition is given, by adding spatial information to the semantics of the language: a coalgebraic model, called spatial transition systems (STS), has been developed and tested as a semantic model for a CCS-like process calculus. It has been shown that the STS semantics is fully concurrent (for example, the processes a.b+b.a and a|b have different meanings). In STS, the semantics of process calculi is given by reaction rules, making behavioral observations about isolated subsystems impossible.
Formal approaches to the usage and availability of resources are “hot topics” in computer science (see [18,15,2] and the references therein). To reason about re- source usage, temporal logics have been modeled on more general domains than the booleans, for example in the multi-valued temporal logic of [11], or in the quantita- tive μ-calculus of [12]. These logics are usually equipped with some kind of metrics in order to be able to compare different systems with respects to how much they satisfy certain requirements. A logic for reasoning on quality of service measurement has been introduced by Lluch Lafuente and Montanari in [20]. The evaluation of a logical formula is a value of a suitable algebraic structure, namely a constraint semir- ing (c-semiring), representing the measure of the service level of the formula and not just a boolean value expressing whether or not the formula holds. C-semirings consist of a domain and two operations, called additive and multiplicative, satisfying some properties. The basic idea is that the former is used to select among values and the latter to combine values. C-semirings were originally proposed to describe and program constraint solving problems [4].
The aim of this work is to define quantitative spatial logics interpreted on multi- valued algebraic structures, whose semantics is extensional, i.e. defined on semantics rather than on syntax of process calculi. It is important to emphasize that the

semantic models that we consider do not contain quantitative information, but rather this information is inferred from the part of the model that records resource availability (e.g. spatial decomposition) at a given state. This formally defines quality of service as resource availability, in a natural way. We choose c-semirings as the domain of satisfaction values, in order to extend the approach introduced in [20], which generalizes various kinds of quantitative model-checking. Finally, in order to get a standard notion of semantic equivalence, namely bisimilarity, we use coalgebras to define our semantic models.
In section 3.1, we introduce spatial labeled transition systems (SLTS), a class of coalgebras, reminiscent of spatial transition systems of [23], that extends labeled transition systems with spatial decomposition. Then, in section 3.2, we introduce a logic that is interpreted over SLTS, the quantitative observational spatial μ-calculus (QOS-μ). The logic we obtain is sort of an “hybrid” between propositional modal logics interpreted over Kripke structures, and Hennessy-Milner logics, because we have both spatial formulas without labels, inducing valuations about states, and temporal formulas with action-labeled modalities, allowing extensional reasoning about observable actions of the system. Using the general framework of coalgebras for the definition of SLTS, we define cost-optimizing morphisms between systems, thus formally characterizing the notion of “costs less than”.
In section 4, we discuss the expressiveness of QOS-μ logics, when varying the c- semiring used for the interpretation of formulas. Our main result is that for a certain class of c-semirings, also including infinite domains, not only QOS-μ is decidable for finite SLTS, but also it characterizes bisimilarity, i.e., semantic equivalence. Moreover, due to the presence of fixed point operators, and the fact that c-semirings can be infinite, a single formula can be strictly more expressive than any formula interpreted over the booleans (see remark 4.7).
We foresee different classes of applications, both in the area of optimization of concurrent systems and in service-oriented computing [25]. Spatial models can be used as fully concurrent models for process calculi. QOS-μ in this case allows to evaluate costs of execution plans, distinguishing between parallel and sequential execution of certain operations. In section 5 we give an SLTS semantics to pure CCS, and we show some examples of QOS-μ formulas. In service-oriented computing, on the other hand, QOS-μ, being a behavioral quantitative logic, can be exploited to define patterns for service discovery with an emphasis on quality of service and resource availability.

Background
Coalgebras, Coalgebra Homomorphisms and Spatial Transition Systems
Coalgebras are mathematical models used to represent the behavior of systems, abstracting from the particular structure used, and to define in a very general way properties such as bisimulation or minimization of systems.
In this section we briefly introduce the main definitions of coalgebras in the cate- gory Set, assuming some basic knowledge of category theory. A detailed exposition

of the theory of coalgebras and coinduction can be found in [19,26], which we use as a basis for our introduction. Hereafter, we will use the following notations: for the categorial product, π1 and π2 indicate the first and second projection, and ⟨f, g⟩ is the pairing of f and g; to represent the coproduct (disjoint union) of two sets A and B we will use the set ({0}× A) ∪ ({1}× B); the ﬁnite power set functor, sending each set in the set of its finite subsets, will be denoted with Pfin; with f ; g, as usual in category theory, we denote reverse composition of arrows, which in the category Set corresponds to function composition: f ; g = g ◦ f ; finally, we denote with 1 a set with one element, which we write as ∗.
Definition 2.1 (coalgebra) Given a functor F : Set → Set, a coalgebra for F , or F -coalgebra, is a pair ⟨S, f ⟩ where S is a set, called the carrier of the coalgebra, and f : S → F (S) is the operation of the coalgebra.
The carrier can be often thought of as the set of states in a system, while the operation of the coalgebra gives observations about the “next” states, depending on the chosen functor. Consider for example the functor F (S)= Pfin(S). A coalgebra for F is made up of a set S and a function from S to the set of its finite subsets, i.e., a transition system with states in S. Similarly, a coalgebra for the functor F (S)= Pfin(L × S) for a set of labels L is a labeled transition system with states in S and labels in L.
Definition 2.2 (coalgebra homomorphism) A coalgebra homomorphism from an F -coalgebra ⟨S, f ⟩ to an F -coalgebra ⟨S',f '⟩ is a function m : S → S' such that m; f ' = f ; F (m).
Intuitively, a coalgebra homomorphism is a function that preserves and reflects transitions.
Now, we introduce bisimulation and bisimilarity, usually chosen as the semantic equivalence notion when the semantics of a programming language is given using coalgebras.
Definition 2.3 (coalgebraic bisimulation and bisimilarity) Given two F -coalgebras C = ⟨S, f ⟩ and C' = ⟨S',f '⟩ a bisimulation between C and C' is a relation R ⊆ S × S' over which there exists an F -coalgebra B, such that π1 and π2 are coalgebra homomorphisms from B to C and C', respectively. The greatest bisimulation is called bisimilarity. We say that s is bisimilar to s', written s ∼ s', if the pair⟨s, s'⟩ is in the bisimilarity relation.
Definition 2.4 (final coalgebra) An F -coalgebra C = ⟨S, f ⟩ is final if for any other F -coalgebra C' = ⟨S',f '⟩ there exists exactly one coalgebra homomorphism from C' to C.
The final coalgebra, if it exists, is unique up to isomorphism. An important class of functors that have a final coalgebra is given in the following theorem (see e.g. [26], also for the definition of polynomial functor):
Theorem 2.5 For all functors that can be built from polynomial functors and the ﬁnite power set functor, a ﬁnal coalgebra exists.

In [23], coalgebras are used to define spatial transition systems (STS), that we extend in this work obtaining SLTS. A STS is made up of a set of states, and two functions that describe respectively the temporal evolution of the system, and the possible parallel decompositions, in a given state.
Definition 2.6 (spatial transition system) Given the functor
F (A)= Pfin(A) × (1 + Pfin(A × A))
a spatial transition system is a coalgebra for F over a set S, i.e., a pair
⟨S, f : S → F (S)⟩

The set S represents the set of states and subsystems of a given system. Notice that f = ⟨ftr, fsp⟩, where ftr : S → Pfin(S)= f ; π1 represents the behavior of the system and fsp : S → 1+ Pfin(S × S) = f ; π2 allows to observe its subsystems. These are either the set of all alternative choices for its decomposition into two parts, or 1 (i.e. a set of only one element, {∗}), meaning that the system is made up of a single, undecomposable component. These two functions, named ftr and fsp respectively because they represent the transitions of the system and its spatial decomposition, give rise to orthogonal observations about the spatial and temporal aspects of computation.
C-Semirings and Quantitative Model-Checking
In boolean logics, the satisfaction relation is a binary predicate − |= − over states and formulas, i.e., a function of signature State × F ormula → {true, false}. There is no reason why in principle we could not use a domain different than the booleans; in [20] such a line of development is given, by defining modal logics over a particular kind of domains called c-semirings.
C-semirings [3] have been introduced as a formal building block to define gen- eralized constraint solving problems [4], and have been exploited in the field of optimization, quality of service analysis [17,24], and also for defining metrics in complex domains such as those used for speech recognition [22]. We refer to [4] for the full definitions and a thorough explanation.
Definition 2.7 A c-semiring is a tuple ⟨A,  , A, 0, 1⟩ where
A is a set, with 0 and 1 elements of A.
: 2A → A satisfies  {a} = a,  ∅ = 0,  A = 1,  ( i Ai) =  { Ai} for
Ai ⊆ A, i ≥ 0
A : A × A → A is commutative, associative, distributive over ; 1 is its unit element, and 0 is its absorbing element.
Usually,  is called the additive operation of the semiring, while A is referred to as the multiplicative operation. The additive operation models the selection of the “best” alternative in a set of choices, while the multiplicative one combines several

choices (and their costs/values). A c-semiring is distributive if the multiplicative operation is idempotent; in this case the additive operation distributes over the multiplicative one. The  operation induces a relation ≤⊆ A × A, defined as a ≤ b ⇔ a b = b. Being  idempotent, this relation is a partial order with minimum 0 and maximum 1; moreover,  and A are monotone over ≤.
The first, and simpler, c-semiring we consider is the domain of booleans: Bool =
⟨{f alse, true}, ∨, ∧,false, true⟩. C-semirings also arise in the analysis of access rights for a given resource [24]. In this case, an appropriate c-semiring domain could be ⟨P(S), ∪, ∩, ∅, S⟩, where S is the set of all objects in the model.
Other examples include:
⟨R+, min, +, +∞, 0⟩, modeling transmission costs, where the best choice is the minimum cost, and the combination of two operations yields the sum of the costs;
⟨R+, max, min, 0, +∞⟩, modeling bandwidth, in a situation where data size is constant, and if we do several transfers in parallel we have to wait for each one to complete;
⟨[0, 1] , max, ·, 0, 1⟩, modeling probability of events.
C-semirings are closed under Cartesian product, functional domain and power do- main constructions, allowing the theory to be applied to problems having more than one quantitative dimension to model, e.g., both bandwidth usage and probability of certain events.

Spatial Labeled Transition Systems and QOS-μ
Spatial Labeled Transition Systems
We now introduce the notion of spatial labeled transition systems (SLTS).
Definition 3.1 (spatial labeled transition system) A spatial labeled transition sys- tem over a set of labels L is a coalgebra for the functor
FL(S)= Pfin(L × S) × (1 + Pfin(S × S))
Given a coalgebra f : S → FL(S), we represent with ftr = f ; π1 and fsp = f ; π2 the temporal and spatial transition structures of the system. Notice that ftr gives, for each state, a set of pairs, consisting of a label and a state. Hereafter, we abbreviate ⟨a, s1⟩∈ ftr(s) with s −a→ s1.
The intuition behind SLTS is that both the behavior (represented by labeled transitions) and the decomposition of a system can be observed. For instance, if we consider a calculus with a parallel composition operator, we might have fsp(P1  P2  P3)= ⟨1, {⟨P1, P 2  P3⟩ , ⟨P2, P1  P3⟩ , ⟨P3, P1  P2⟩}⟩. Decomposition could be defined as well in a non-syntactical way, using semantic information (e.g. a process being active or inactive) similarly to what happens in the location semantics of CCS [5].
We emphasize that SLTS are semantic models, and that they have been intro-

duced to give a resource-conscious semantics to different formalisms, even if there is no quantitative data in the model itself: the subsystems of a system are the avail- able resources, and their availability determines quantities such as costs, or quality of service, directly from the analysis of the semantics of programs.

The Quantitative Spatial Logic QOS-μ
In this section, we introduce the quantitative observational spatial μ-calculus (QOS- μ), a spatial logic with action-labeled temporal modalities which is able to express behavioral properties of systems, and we establish a connection between coalge- bra homomorphisms and cost optimization. The syntax of the logic extends with action-labeled modalities and spatial operators the logic in [20], which in turn is a generalization to c-semirings of the fragment of the propositional μ-calculus without negation. We fix here a set L of labels, which we use throughout the paper.
Definition 3.2 (QOS-μ syntax) Given a set of constants A and a set of variables
V ar, the set of QOS-μ formulas over A is defined by the following syntax 4 :

ΦA ::= k | ΦA ∨ ΦA | ΦA ∧ ΦA | ⟨α⟩ ΦA | [α] ΦA |
Ç | ΦA  ΦA | ΦA = ΦA | V  | μV.ΦA | νV.ΦA
where α ∈ L, k ∈ A, V ∈ V ar, variables are bound by μ and ν and are subject to the usual rules of α-conversion.
Now we give an intuition about the semantics of connectives. The easy ones are k, the constant formula, and minimum and maximum fixed points, allowing to measure respectively unbound and infinite behaviors. Disjunction chooses the best valuation out of two formulas, while conjunction combines the valuations. Diamond modality ⟨α⟩ φ selects the best valuation of φ in the set of states reachable by a transition labeled α, ensuring that there is at least one state reachable by an α transition whose valuation is at most the obtained one, and box modality [α] φ combines all those valuations, ensuring that all reachable states have at least the obtained valuation. The operator Ç stands for a local system, i.e. a system that cannot be decomposed. Formula φ1  φ2 decomposes a system into its parallel components, combining the valuations of φ1 and φ2 on the components and selecting the best result, thus ensuring that there is at least a decomposition giving a certain valuation of φ1 and φ2, while φ1 = φ2 is its dual.
The semantics T φ)C : AS of a formula φ ∈ ΦA, given using an SLTS T ∈ FL(S) for some set of states S, the c-semiring C = ⟨A, , A, 0, 1⟩, and the environment Γ : V ar → AS, is a valuation in AS, giving the value of φ, for each state in S, as an element of A. In the following, T and C will be freely omitted when clear from the context, and Γ will be omitted when it is ∅.
Definition 3.3 (QOS-μ semantics)

4 Hereafter, we overload the notation ΦA to denote both the syntax, and the set of all formulas over A.




 φ1 = φ2)Γ (s) = Par (s, φ1, φ2, Γ)	 ⟨α⟩ φ)Γ (s) =	 
 φ)Γ (si)

{⟨x,si⟩∈ftr(s)|x=α}

 φ1 ∨ φ2)Γ (s) =  φ1)Γ(s)   φ2)Γ(s)  [α] φ)Γ (s) =	A
 φ)Γ (si)

 φ1 ∧ φ2)Γ (s) =  φ1)Γ(s) A φ2)Γ(s)
{⟨x,si⟩∈ftr(s)|x=α}

where f ix and F ix are the least and greatest fixed point operators, and
local(s)=	1	if fsp(s)= ⟨0, ∗⟩
0	otherwise


par (s, φ ,φ , Γ) =
 
⟨s',s''⟩∈P
( φ1)Γ(s') A φ2)Γ(s''))	if fsp (s)= ⟨1,P ⟩

1	2
0	otherwise


Par (s, φ ,φ , Γ) =
A
⟨s',s''⟩∈P
( φ1)Γ(s')   φ2)Γ(s''))	if fsp (s)= ⟨1,P ⟩

1	2
1	otherwise
In the definitions for [α] φ and φ1 = φ2, there is a slight abuse of notation because the multiplicative operation of the c-semiring, which is binary, is applied to a finite set. However this operation is commutative and associative, thus it can be easily extended to finite sets.
We can now state our first result: if there is a coalgebra homomorphism from a system a to another system b, then b “costs less” than a: the valuation of any formula over b is less or equal than the valuation of the same formula over a. Notice that this has particular relevance for the final coalgebra, which is the minimal system in terms of QOS-μ valuations.
Theorem 3.4 Given two SLTS ⟨S, f ⟩ and ⟨S',f '⟩, if there is a coalgebra homo- morphism m : S' → S such that m(s') = s for s ∈ S and s' ∈ S', then for every QOS-μ formula φ over A, and appropriate c-semiring structure for the valuation of φ, we have φ)(s) ≤ φ)(s').
Proof (sketch) We proceed by induction on the structure of the formula, and by coinduction on the two coalgebras, assuming a homomorphism m such that m(s')= s. We only show here the case for ⟨α⟩ φ. By definition of homomorphism,
each si such that ⟨α, si⟩ ∈ ftr(s) is equal to m(s' ) for some  α, s'  ∈ ftr(s'), so

we can choose one such s' for each si, call it m¯ −1(si). We have ftr(s')= K ∪ K',
where K ⊆ ftr(s'), K' =	α, m¯ −1(si) | si ∈ ftr(s) , K ∩ K' = ∅. We now prove that ⟨α⟩ φ)(s)  ⟨α⟩ φ)(s')= ⟨α⟩ φ)(s'):

 ⟨α⟩ φ)(s)   ⟨α⟩ φ)(s')

=  {⟨x,s ⟩∈f
(s)|x=α} φ) (si)	'
'	 φ) s' 

=  {⟨x,si⟩∈ftr(s)|x=α} φ) (si)    {⟨x,si⟩∈ftr
(s)|x=α} φ) m¯ −1(si) 


{⟨x,s' ⟩∈K|x=α}
 φ) s' 

= {properties of  }
  {⟨x,s ⟩∈f (s)|x=α} φ)(si)  φ)(m¯ −1(si))	'

 φ) s' 






  {⟨x,si⟩∈ftr

(s)|x=α} φ)(m¯ −1(si)) 


{⟨x,s' ⟩∈K|x=α}

 φ) s' 

=	'	'	 φ)(s' )
{⟨x,sj ⟩∈ftr (s )|x=α}	j
=  ⟨α⟩ φ)(s')

Remark 3.5 QOS-μ does not include a negation operator, since c-semirings usually do not have complementation. However, certain classes of c-semirings admit a complementation operator, and in that case we can introduce negation in the logic (see also [20] on the subject), thus obtaining pairs of operators from each other by De Morgan duality (for example, obtaining φ1 = φ2 as ¬(¬φ1  ¬φ2). It should be noticed that there are interesting cases where complementation can’t be defined, like ⟨R+, max, min, 0, +∞⟩, hence in this work we only deal with the more general case.

Expressiveness of QOS-μ
In this section we show that QOS-μ characterizes bisimilarity (the so-called adequacy property) when interpreted over a distributive c-semiring, and that logic equivalence is strictly finer than bisimulation for non-distributive c-semirings. Moreover, we state that non-boolean (e.g. infinite) c-semirings give to the logic a strictly higher expressive power than the booleans. The first result is composed by three parts:
we show that bisimilarity implies logical equivalence
we prove adequacy in the boolean case
we show that logical equivalence over any distributive c-semiring implies logical equivalence over the booleans, thus concluding the proof.

Theorem 4.1 Given a distributive c-semiring C = ⟨A, , A, 0, 1⟩, s and s' states of an SLTS, we have
s ∼ s' ⇒ ∀φ ∈ ΦA. φ)C(s)= φ)C(s')
Proof (sketch) Assuming that s ∼ s' we can proceed by induction on the structure of the formula. One interesting case is [α] φ1, since it involves the use of distribu- tivity. By definition we have:

 [α] φ1)(s)= [α] φ1)(s')

⇔ A{⟨x,s ⟩∈f
(s)|x=α} φ1)Γ(s)= A	'
'  φ1)Γ(s')

i	tr
{⟨α,sj ⟩∈ftr (s )}

Now, by bisimilarity, for each si there is an sj such that si ∼ sj, and thus, by coinduction, φ1)(si) = φ1)(sj). Thus, for each value k = φ1)(si) for ⟨α, si⟩ ∈ ftr(s), there is at least an ⟨α, sj⟩ ∈ ftr(s') such that k =  φ1)(sj), and possibly more than one. This also holds in the opposite direction, so there is such an si for each sj. Since in a distributive c-semiring the A operation is idempotent, the above equation is satisfied.	 
Remark 4.2 If the c-semiring is not distributive, this result does not hold. Con- sider for example an SLTS with states {s1,... , s5} such that ftr(s1) = {⟨α, s2⟩}, and ftr(s3)= {⟨α, s4⟩ , ⟨α, s5⟩}. States s1 and s3 are bisimilar, but the formula [a] k distinguishes them, if we choose k such that k A k /= k, which necessarily exists if C is not distributive.
Now we show that, when interpreted over the booleans, QOS-μ characterizes bisim- ilarity.
Theorem 4.3 For s and s' states of an SLTS, it holds that
(∀φ ∈ Φ{true,false}. φ)Bool(s)=  φ)Bool(s')) ⇔ s ∼ s'
Proof (sketch) The ⇐ part is a direct consequence of theorem 4.1, but also similar to standard results in modal logics for labeled transition systems. For the ⇒ part, one can show that the relation R(s, s')= ∀φ ∈ Φ{true,false}. φ)Bool(s)= φ)Bool(s') is a bisimulation. For the temporal part of any SLTS, which is indeed a LTS, and the temporal fragment of QOS-μ, the result is well-known. Proofs for many modal logics can be done following the ones in [21]. For example, suppose that R(s, s') and
s −a→ s1, but ¬∃s' −a→ s' such that R(s1, s'), then for every s' −a→ s' there exists
i	i	i
φi such that  φi)(s1) /=  φi)(s'). Then  φ)(s) /=  φ)(s'), where φ = ⟨a⟩ ∧i φi, and
this is a contradiction. For the spatial component, the proof can be done following the same pattern.	 
The last theorem needed to establish our result is that logical equivalence for formulas interpreted over a (distributive or not) c-semiring C implies logical equiv- alence for formulas interpreted over Bool.

Theorem 4.4 For C = ⟨A, , A, 0, 1⟩ c-semiring, and s, s' states of an SLTS, we have:

(∀φ ∈ ΦA. φ)C(s)=  φ)C(s')) ⇒ (∀φ ∈ Φ{true,false}. φ)Bool(s)=  φ)Bool(s'))

Proof (sketch) The structure C' = ⟨{0, 1}, , A, 0, 1⟩, obtained from C by remov- ing all constants from A except from the top and bottom element, is indeed a well defined c-semiring, isomorphic to the boolean one and respecting the same axioms. So, given any formula in Φ{0,1} interpreted over C', we can cast the same formula into Φ{true,false}, with an isomorphic interpretation; due to logical equivalence over C, we also have logical equivalence over C' and thus over Bool.	 

Now we are able to state the main theorem of this paper, encompassing all the results of this section:

Theorem 4.5 QOS-μ interpreted over any non distributive c-semiring is strictly ﬁner than QOS-μ interpreted over a distributive c-semiring. Moreover, QOS-μ interpreted over a distributive c-semiring characterizes bisimilarity.

Proof We first prove adequacy, i.e. for C = ⟨A, , A, 0, 1⟩ distributive c-semiring,
s ∼ s' ⇐⇒ ∀φ ∈ ΦA. φ)C(s)=  φ)C(s').
The ⇒ part is given by theorem 4.1. Now suppose that ∀φ ∈ ΦA. φ)C(s) = 
 φ)C(s'), then by theorem 4.4 we have ∀φ ∈ Φ{true,false}. φ)Bool(s) =  φ)Bool(s'), and by theorem 4.3 we get s ∼ s', concluding the adequacy proof.
By remark 4.2, it follows that QOS-μ interpreted over non-distributive c-semirings is finer than QOS-μ interpreted over distributive c-semirings.	 

Remark 4.6 Regarding decidability of the model-checking problem, in [20] it is stated that the fragment without function symbols of the c-semiring μ-calculus defined there is decidable (for finite models) when using distributive c-semirings. This result can be casted in our framework, even in the case of QOS-μ, when interpreted over distributive c-semirings.



Remark 4.7 It is well-known that formulas in multi-valued logics over finite lat- tices can be checked using boolean formulas which express cuts on the state-transition graph of the system [14]. C-semirings, however, can be infinite, thus this technique cannot be used; for certain fixed-points formulas of QOS-μ, indeed, we get a strictly higher expressiveness than using finite lattices, since the equivalence classes induced by these formulas are infinite (with just a single formula, we can separate the set of all systems into infinite subsets).

Applications

SLTS Semantics for Process Calculi

In this section, as a case study, we introduce a SLTS semantics for pure CCS. This semantics is inspired both by the STS semantics of [23] and by the location semantics of [5]. A common criticism of spatial logics is that the induced equivalence, in many cases, is too intensional, and coincides with structural equivalence. The spatial se- mantics we introduce here, being not purely syntactical, but rather behavioral, does not coincide with structural equivalence, yet it allows to check properties related to the parallel composition of processes. In the following we assume an enumerable set Act of actions, and use the notation Act = {x¯ | x ∈ Act}.

Definition 5.1 The syntax of CCS processes is given as follows

P ::= P  P |	αi.Pi | (νl)P | R(−→x )
i∈I

where αi ∈L = {τ }∪ Act ∪Act, τ ∈/ Act∪Act, I is a finite set, l ∈ Act, −→x ∈ Act∗, and for each process identifier R there is a defining equation R(−→x ) = PR, where each process identifier in PR is in the scope of an action α (guarded recursion).

The sum over an empty set is written 0, name l in (νl)P is bound in P and subject to the rules of α-conversion, and fn(P ) is the set of free names in the labels of a process.

Definition 5.2 (Structural congruence) Structural congruence is the least congru- ence ≡ satisfying commutativity, associativity and identity law of  and  (with 0 as the unit element), the laws of α-conversion for the restriction operator (νl)P , and the axioms:

(να)(P  Q) ≡ P  (να)Q if α ∈/ fn(P );
(να)0 ≡ 0, (να)(νβ)P ≡ (νβ)(να)P .
We now give the SLTS semantics of the calculus.

Definition 5.3 (SLTS semantics of CCS) The temporal transition function ftr is

defined by the following rules:




α.P −α→ P
P −α→ P '
(νl)P −α→ (νl)P
if α /= l, ¯l
'

P −α→ P '


P + Q −α→ P '
P −α→ P '	Q −α→¯ Q' P	Q −τ→ P '	Q'






 −→

P −α→ P '


P  Q −α→ P '  Q
  α

P ≡ P '	P ' −α→ Q'	Q' ≡ Q


P −α→ Q



A( k ) −α→ P '

The spatial decomposition function fsp is defined as:



fsp
(P )=	⟨0, ∗⟩	if reactive(P ) ∧ dec(P )= ∅
⟨1, dec(P )⟩	otherwise

where
reactive(P )= ∃n ≥ 0.P −τ→ ... −τ→ Pn −α→ P ' ∧ α /= τ
dec(P )= ⟨P1, P2⟩ P ≡ P1  P2, reactive(P1), reactive(P2),
This definition, differently from the one in [23], allows us to observe the parallel decomposition of a process only if the involved subprocesses are reactive, i.e. they can synchronize with other processes at some point (similarly to the location se- mantics of CCS [5]). The obtained SLTS bisimulation obviously contains ordinary CCS bisimulation, and it is coarser than structural congruence: consider the pro-

cesses (νx) (x.0
x¯.0)	(νy) (y.0
y¯.0)	a and (νx) (x.x.0
x¯.x¯.0)	a. These two

processes are SLTS and CCS bisimilar, but not structurally congruent.

Examples of QOS-μ usage
We provide two examples of QOS-μ usage. We adopt the following shorthand:
⟨L⟩ φ  ∨α∈L ⟨α⟩ φ, where L is a finite subset of L.
Example 5.4 (lower bound of resource availability) Consider Act = {a, b, c}, L =
{τ }∪ Act ∪ Act, and the c-semiring Copt = ⟨R, min, +, +∞, 0⟩. The formula
φ1 = μX. ((⟨a⟩ 1 ∨ [a]+∞) ∧ Ç) ∨ (X  X)
counts the number of parallel processes that can do the action a in a given state.
Now consider the formula


φ2 = ⟨b⟩ μX. (φ1 ∨ (⟨L⟩ X))
this formula measures the minimum available quantity of a certain kind of re- source (modeled by a process that can do a), after the occurrence of event b. This kind of formula can be compared, in the setting of multi-valued logics, to the is- sues dealt with when considering history dependent access control policies [1]. In our case, the measure of resource usage policies depends on the past history of execution, as it is the case for the validity of policies in history dependent access control.
Example 5.5 (different cost of parallel and sequential execution) Consider the following two process definitions:
P1 = R  R  R P2 = S  S  S
PR = a.R + b.R + c.R PS = a.0+ b.0+ c.0
The process identifiers R and S represent a basic resource that is employed to implement services offered by system P1 and P2, respectively, and whose minimum availability during a service invocation is used to determine the specific cost that the client has to pay.
Let us consider the two formulas φ3 and φ4 interpreted over the c-semiring Copt:



and
φ3 = φ1  (Ç ∧ ⟨b⟩ 0)  (Ç ∧ ⟨c⟩ 0)

φ4 = (φ1  (Ç ∧ ⟨b⟩ 0)) ∨ ⟨b⟩ (φ1  (Ç ∧ ⟨c⟩ 0))
In both cases, the formulas count how many parallel processes in the current state are enabled to do a, using φ1. The number of processes that can do a is the number of available resources, and if put in parallel with other formulas, it gives a measure of the remaining resources, when some of them are used by a client. Formulas φ3 and φ4 are execution plans to run the actions b and c on the server. In φ3 we consider the parallel execution of both actions, while in φ4 we consider the sequential execution of b and c, thus we have to measure the available resources in both states reached. Applying both formulas, we can check whether in a given state it costs less to execute b and c sequentially or in parallel. We have φ3)(P1) = 1, while φ4)(P1) = 2, so if the system is in state P1, it costs less, for the client, to use the plan φ3. On the other hand, we have φ3)(P2) = φ4)(P2) = 1, thus the cost of the two plans is the same. The intuition behind this phenomenon is that in P2 resources get consumed, so it is important to acquire them as soon as possible. More complex systems and plans could as well make the parallel execution of two tasks less resource-consuming than their execution in sequence.

Concluding Remarks
We have introduced a family of extensional spatial logics for a class of models which have labeled transitions, thus allowing behavioral observations. These logics are generalized over c-semirings, and if the c-semirings used for the interpretation are distributive, they are decidable over finite models and adequate with respects to bisimilarity. Using these logics, quantitative analysis of systems can be performed in a generalized way.
Future developments are manifold. The SLTS semantics for CCS given in section 5 does not decompose processes under the scope of a restriction. This is a limit of our semantics, when comparing it to location semantics. Further study is required to see if it is possible to obtain a SLTS semantics equivalent to the location one. Spatial semantics of calculi like the π-calculus or the ambient calculus should be given using SLTS, and we should investigate what relation is induced on processes from bisimulation in the model.
Other applications of interest are in the area of service-oriented computing [25]: a formal, semantic notion of quality measurement can be used for quality of ser- vice requirements, and also as the basis for the implementation of semantic service discovery, where a client and a server establish a contract by defining respectively a minimum level of quality of service, and a maximum level of resource usage, in an heterogeneous situation where many different programming languages are used for the implementation of services, and thus semantic models must be used. The quantitative, resource conscious nature of QOS-μ ensures to be able to model real- world situations in which resources are limited, and there is a maximum number of clients that can simultaneously access each service.
An open question is if there are classes of non-distributive c-semirings for which decidability over finite models holds, while work is being done on coalgebraic models where the interpretation of QOS-μ using non-distributive c-semirings characterizes bisimilarity. Finally, since spatial logics have been used as the basis of query lan- guages for semistructured data [10], applications of quantitative analysis, using QOS-μ, to this domain, could be worth further research.

Acknowledgement
The authors wish to thank Alberto Lluch-Lafuente for helpful comments.

References
Abadi, M. and C. Fournet, Access control based on execution history., in: Proceedings of the Network and Distributed System Security Symposium, NDSS 2003, San Diego, California, USA (2003).
Bartoletti, M., P. Degano and G. L. Ferrari, Types and effects for secure service orchestration, in: CSFW ’06: Proceedings of the 19th IEEE Workshop on Computer Security Foundations (2006), pp. 57–69.
Bistarelli, S., “Semirings for Soft Constraint Solving and Programming,” Lecture Notes in Computer Science 2962, Springer, 2004.

Bistarelli, S., U. Montanari and F. Rossi, Semiring-based constraint satisfaction and optimization, Journal of the ACM 44 (1997), pp. 201–236.
Boudol, G., I. Castellani, M. Hennessy and A. Kiehn, Observing localities, Theoretical Computer Science
114 (1993), pp. 31–61.
Caires, L., Behavioral and spatial properties in a logic for the pi-calculus, in: I. Walukiwicz, editor, Proc. of Foundations of Software Science and Computation Structures’2004 (FOSSACS), number 2987 in Lecture Notes in Computer Science (2004), pp. 72–89.
Caires, L., Spatial-behavioral types for distributed services and resources, in: Proceedings of the 2nd International Symposium on Trustworthy Global Computing (TGC06), to appear, 2006.
Caires, L. and L. Cardelli, A Spatial Logic for Concurrency (Part I), Information and Computation
186 (2003), pp. 194–235.
Caires, L. and L. Cardelli, A Spatial Logic for Concurrency (Part II), Theoretical Computer Science
3 (2004), pp. 517–565.
Cardelli, L. and G. Ghelli, TQL: a query language for semistructured data based on the ambient logic.
(2004).
Chechik, M., B. Devereux, S. Easterbrook and A. Gurfinkel, Multi-valued symbolic model-checking, ACM Trans. Softw. Eng. Methodol. 12 (2003), pp. 371–408.
de Alfaro, L., Quantitative verification and control via the mu-calculus., in: CONCUR, 2003, pp. 102– 126.
Ferrari, G. and A. Lluch-Lafuente, A logic for graphs with qos., Electr. Notes Theor. Comput. Sci. 142
(2006), pp. 143–160.
Gurfinkel, A. and M. Chechik, Multi-valued model checking via classical model checking., in: R. M.
Amadio and D. Lugiez, editors, CONCUR, Lecture Notes in Computer Science 2761 (2003), pp. 263– 277.
Hennessy, M. and J. Riely, Resource access control in systems of mobile agents, Inf. Comput. 173
(2002), pp. 82–120.
Hirsch, D., A. Lluch-Lafuente and E. Tuosto, A logic for application level qos., Electr. Notes Theor. Comput. Sci. 153 (2006), pp. 135–159.
Hirsch, D. and E. Tuosto, SHReQ: Coordinating Application Level QoS, in: SEFM ’05: Proceedings of the Third IEEE International Conference on Software Engineering and Formal Methods (2005), pp. 425–434.
Igarashi, A. and N. Kobayashi, Resource usage analysis, in: Symposium on Principles of Programming Languages, 2002, pp. 331–342.
Jacobs, B. and J. Rutten, A tutorial on (co)algebras and (co)induction, Bulletin of the European Association for Theoretical Computer Science 62 (1997), pp. 222–259.
Lafuente, A. and U. Montanari, Quantitative mu-calculus and CTL defined over constraint semirings, Electronic Notes on Theoretical Computing Systems QAPL 112 (2005), pp. 1–30.
Milner, R., J. Parrow and D. Walker, Modal logics for mobile processes, Theoretical Computer Science
114 (1993), pp. 149–171.
Mohri, M. and M. Riley, A weight pushing algorithm for large vocabulary speech recognition, in European Conf. on Speech Communication and Technology, Aalborg, Denmark (2001).
Monteiro, L., A noninterleaving model of concurrency based on transition systems with spatial structure., Electr. Notes Theor. Comput. Sci. 106 (2004), pp. 261–277.
Nicola, R. D., G. L. Ferrari, U. Montanari, R. Pugliese and E. Tuosto, A Process Calculus for QoS- Aware Applications., in: COORDINATION, 2005, pp. 33–48.
Papazoglou, M. P. and D. Georgakopoulos, Special issue on service oriented computing, Commun. ACM
46 (2003).
Rutten, J. J. M. M., Universal coalgebra: a theory of systems, Theoretical Computer Science 249
(2000), pp. 3–80.
