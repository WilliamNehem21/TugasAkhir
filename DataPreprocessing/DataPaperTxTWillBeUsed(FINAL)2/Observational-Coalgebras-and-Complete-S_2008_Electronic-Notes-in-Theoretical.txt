	Electronic Notes in Theoretical Computer Science 203 (2008) 153–174	
www.elsevier.com/locate/entcs

Observational Coalgebras and Complete Sets of Co-operations
Clemens Kupke1,2 and Jan Rutten3
CWI & Vrije Universiteit Amsterdam, The Netherlands

Abstract
In this paper we introduce the notion of an observational coalgebra structure and of a complete set of co-operations. We demonstrate in various example the usefulness of these notions, in particular, we show how they give rise to coalgebraic proof and definition principles.
Keywords: Coalgebra, Coinduction, infinite data structures, Hidden Algebra.


Introduction
It is well-known that coalgebras provide a framework for studying infinite data structures, such as streams and trees, in a uniform way. The theory of coalgebras is formulated in category theoretic terms. Therefore coalgebras are usually studied “up-to-isomorphism”, e.g., one talks about the final coalgebra of a functor because it is determined uniquely up-to-isomorphism. When reasoning about a concrete type of coalgebras one then has a certain “canonical” representation of the final coalgebra in mind. For the stream functor A × Id the final coalgebra is usually given by the set of infinite A-streams Aω together with the usual operations head and tail. There are, however, infinitely many ways of turning Aω into the final stream coalgebra - we will discuss some of them in the paper. The point we want to make is, that each of these representations of the final coalgebra is potentially interesting in its own as each of them yields a different proof and definition principle.
More generally, we consider not only the various representations of a given set X
as a final coalgebra of some kind, but also its representations as a subcoalgebra of a

1 Supported by NWO under FOCUS/BRICKS grant 642.000.502.
2 Email: kupke@cwi.nl
3 Email: janr@cwi.nl

1571-0661© 2008 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2008.05.024

final coalgebra. We call such a representation of a set X an observational coalgebra. Any observational coalgebra has two crucial properties: strong extensionality and what we call relative finality. The first property is the basis for a proof principle on observational coalgebras and the second one is the key for the coinductive definition of constants and functions on observational coalgebras.
In the paper we first introduce the notion of an observational coalgebra and then motivate it with various examples. After that, in Section 3, we provide a simpler, syntactic version of the notion of an observational coalgebra by using the
terminology from [3] of a cosignature and of a co-operation. We call a collection
of co-operations complete for some set if it turns this set into an observational coalgebra. After having defined these notions we turn to the discussion of the proof principle and of the definition scheme.
In Section 4 we discuss the proof principle for a complete set of co-operations and demonstrate with an example that a clever choice of co-operations for the set of streams can simplify proofs. After that, in Section 5 we develop a definition scheme for constants and functions on a given set that is equipped with a complete set of co-operations. The main advantage of this scheme lies in the fact that it works for various types of objects as we demonstrate at the end of Section 5. In particular, our scheme can be applied to sets of objects, that have no “nice”, purely coalgebraic representation, such as bi-infinite streams. We conclude our paper in Section 6 by linking our research to related work, in particular, to the field of hidden algebra, and by the discussion of future work.
Acknowledgements. We would like to thank Alexandra Silva for valuable sugges- tions and discussions. Furthermore we are grateful to the anonymous referees for providing a number of very helpful comments.

Basic terminology
We assume that the reader is familiar with the basic notions from category theory and universal coalgebra. The purpose of the following basic definitions is mainly to fix our notation.
Definition 1.1 We define the range of a function f : X → Y by putting range(f ) := {y ∈ Y | ∃x ∈ X.f (x) = y}.
Definition 1.2 Let G : Set → Set be a functor. A set X together with a function γ : X → GX is a G-coalgebra. A function f : X1 → X2 is a G-coalgebra morphism from X1 = (X1, γ1 : X → GX) to X2 = (X2, γ2 : X → GX) if γ2 ◦ f = Gf ◦ γ1. In case the final G-coalgebra exists we denote by ϕX1 the unique coalgebra morphism from (X1, γ1) into the final G-coalgebra.
A relation R ⊆ X1 × X2 is a G-bisimulation between (X1, γ1) and (X2, γ2) if there is a map μ : R → GR such that the projection maps πi : R → Xi are G- coalgebra morphisms πi : (R, μ) → (Xi, γi) for i = 1, 2. For G-coalgebra states x1 ∈ X1 and x2 ∈ X2 we write x1 ↔G x2 if there is a G-bisimulation R ⊆ X1 × X2

such that (x1, x2) ∈ R.
Observational coalgebra structures
In this section we introduce the notion of an observational coalgebra structure. De- spite the fact that this is a rather simple notion we hope to demonstrate throughout the remainder of the paper its usefulness.
Definition 2.1 Let X be a set and let G : Set → Set be a functor for which the final G-coalgebra (ΩG, ωG) exists. We call γ : X → GX observational for X if the unique morphism ϕ : X → ΩG into the final G-coalgebra is injective. In this case the coalgebra (X, γ) will be called observational.
Remark 2.2 It should be stressed that the concept of an observational coalgebra is nothing essentially new. Observational coalgebras are merely subcoalgebras of some final coalgebra and, under the condition that the final coalgebra for the functor G : Set → Set exists, observational G-coalgebras are exactly the simple G-coalgebras from [10] or the minimal G-coalgebras from [6]. The novelty of our work lies in the fact, that we focus on the various observational coalgebra structures that turn a given set into an observational coalgebra.
In order to motivate this definition we provide a number of examples:
Example 2.3  (i) Let (X, γ) be the final G-coalgebra for a functor G : Set → Set.
Then γ is observational for X.
Consider the set IN of natural numbers and let P : IN → 1 + IN be the predeces- sor map, i.e. P (n + 1) := n and P (0) := ∗∈ 1. Then P is observational for IN: P turns IN into a coalgebra for the functor 1 + Id and this functor has as final
coalgebra the set IN¯ := IN ∪ {∞} together with the “extended” predecessor
map P¯, where P¯(n) := P (n) for all n ∈ IN and P¯(∞) := ∞. The obvious
embedding of IN into IN¯ is the injective coalgebra morphism from (IN,P ) into
the final 1 + Id-coalgebra (IN¯ , P¯).
Let p > 0 be a natural number and let
Pp : IN −→ 1+ {0,...,p − 1}× IN
be the map defined by
Pp(n) := ∗	if  n = 0 
Pp(n) := (n mod p, [ n ♩)   if  n > 0.
Then Pp is observational for IN for all p > 0. The carrier of the final coalgebra of G = 1+ {0,...,p− 1}× Id is the set p∞ = p∗ ∪pω where p = {0,...,p− 1}. The final map ϕ : IN → p∞ maps a natural number n to its p-adic representation starting with the least significant digit. Therefore ϕ is obviously injective.
Let A be a set and AZ be the set of bi-infinite streams over A. Then the map ⟨h, l, r⟩ : AZ → A × AZ × AZ is observational for AZ. Here ⟨h, l, r⟩ is the function that maps a given bi-infinite stream τ = ... a−3a−2a−1a0a1a2a3 ... to

its head h(τ ) = a0, its left neighbour l(τ ) = ... a−4a−3a−2a−1a0a1a2 ... and its right neighbour r(τ ) = ... a−2a−1a0a1a2a3a4 .. ..
Consider the functor G(X) = IR × X. The final coalgebra of G consists of the set IRω of real-valued streams together with the familiar coalgebra map
< h, t >: IRω → IR × IRω of head and tail:
h(σ) = σ(0),	t(σ) = (σ(1), σ(2), σ(3), .. .)
We can also supply IRω with an alternative coalgebra structure as follows. For
σ ∈ IRω we define
Δσ = (σ(1) − σ(0), σ(2) − σ(1), σ(3) − σ(2), .. .)
(cf. [7,11]). We claim that the coalgebra map
< h, Δ >: IRω → IR × IRω	σ '→ < σ(0), Δσ > 
is observational for IRω. The unique morphism
ϕ : (IRω, < h, Δ >) → (IRω, < h, t >)
is given by
ϕ(σ) = ((Δ(0)σ)(0), (Δ(1)σ)(0), (Δ(2)σ)(0), .. .)
where Δ(0) σ = σ and Δ(n+1) σ = Δ( Δ(n) σ ). One can easily verify that ϕ is injective.
Here is yet another coalgebra structure on IRω. For σ ∈ IRω, we define
dσ = (σ(1), 2 · σ(2), 3 · σ(3), .. .)
dX
The coalgebra map < h, d/dX >: IRω → IR × IRω is observational for IRω as the unique morphism
ϕ : (IRω, < h, d/dX >) → (IRω, < h, t >)

which is given by

is injective.

ϕ(σ) = (σ(1), 2! · σ(2), 3! · σ(3), .. .)

Let F = GΣ for a finite cosignature Σ (cf. Def. 3.3 below) and let (A, α) be the inital F -algebra. Then α−1 : A → FA is observational for A. The claim is a consequence of a more general result in [1]. Note that this example generalizes
(ii) above.
Two properties of observational coalgebras will play a central roˆle in our paper: given an observational coalgebra structure γ : X → GX for some set X, we have that the G-coalgebra (X, γ) is strongly extensional (Prop. 2.5) and relatively final (Prop. 2.7). The first property gives rise to a proof principle for elements of obser- vational coalgebras, the second property is the basis of the definition scheme which we develop in Section 5.
Definition 2.4 Let G : Set → Set be a functor and let X = (X, γ) be a G- coalgebra. We say X is strongly extensional iff for all x1, x2 ∈ X we have x1 ↔ x2 iff x1 = x2.

Proposition 2.5 Let G : Set → Set be a functor with ﬁnal coalgebra and let X = (X, γ) be a G-coalgebra. If γ is observational for X then X is strongly extensional.
Proof. Let (X, γ) be observational and suppose x1, x2 ∈ X with x1 ↔ x2. Further- more let ϕ be the unique morphism from X into the final coalgebra. Obviously we have ϕ(x1) ↔ ϕ(x2). It is well known that final coalgebras are strongly extensional and thus ϕ(x1) = ϕ(x2) which implies by the injectivity of ϕ that x1 = x2.	 

Definition 2.6 Let G : Set → Set be a functor with final coalgebra. A G- coalgebra X = (X, γ) is called relatively ﬁnal if for all G-coalgebras Y = (Y, δ) such that range(ϕY) ⊆ range(ϕX) there is a unique G-coalgebra morphism ι : Y → X with
ϕX
X,, ¸G,
ι 
   ϕY
Y
Proposition 2.7 Let G : Set → Set be a functor with ﬁnal coalgebra and let
X = (X, γ) be a G-coalgebra. If γ is observational for X, then X is relatively ﬁnal.
Proof. Let X be an observational G-coalgebra, let Y = (Y, δ) be a G-coalgebra and let ϕX and ϕY be the coalgebra morphisms from X and Y into the final G-coalgebra. Furthermore we assume that range(ϕY) ⊆ range(ϕX). We want to show that there is a unique G-coalgebra morphism ι from Y to X. In order to show the existence of ι we define a function ι : Y → X by putting for all y ∈ Y
ι(y) := x	if ϕY(y) = ϕX(x).
This function is well-defined because of the injectivity of ϕX and the fact that the range of ϕY is contained in the range of ϕY. Clearly we have ϕY = ϕX ◦ ι which implies that ι is a coalgebra morphism because ϕX is injective (cf. [10, Lemma 2.4]). Uniqueness of ι follows also from the injectivity of ϕX: any ι' : Y → X has the property that ϕX ◦ ι' = ϕY = ϕX ◦ ι and thus ι = ι'.	 

Remark 2.8 Both Proposition 2.5 and Proposition 2.7 are easy consequences of the fact that an observational coalgebra structure γ represents a subcoalgebra of a final coalgebra. We provided the easy proofs in order to keep our paper as self-contained as possible.

Complete sets of co-operations
The notion of an observational coalgebra is in general too abstract to work with. In this section we define the more concrete notion of a complete set of co-operations. We first introduce the notion of a cosignature and of a co-operation and then state when a given set of co-operations is complete.

Cosignatures
Definition 3.1 Let S := {Sj}j∈J be a family of sets (“observable sorts”). A basic S-arity α is an element of the set S∗ × (S ∪ {•}), i.e. any basic S-arity α is either of the form (S1 ... Sn, S) or of the form (S1 ... Sn, •), where • should be thought of as the “hidden sort”. The set Arity(S) of S-arities is defined as
Arity(S) = {α1 + ... + αm | m ∈ IN, αi is a basic S-arity}. 4
An S-sorted cosignature consists of a set Σ of “co-operation” symbols and a function a : Σ → Arity(S) that assigns to each σ ∈ Σ its arity a(σ) = α1 + ... + αm. We call Σ basic if it contains only co-operation symbols σ of basic arity.
Definition 3.2 Let S be a family of sorts, let Σ be an S-sorted cosignature and let X be a set. For each arity α1 + ... + αk ∈ Arity(S) we inductively define a corresponding set Xα by putting
X(S ...S ,S) := SS1×...×Sk	X(S ...S ,•) := XS1×...×Sk	Xα +α  := Xα + Xα
A co-operation of arity a(σ) ∈ Arity(S) is a function f : X → Xa(σ).
Definition 3.3 Let S be a family of sorts and let Σ be an S-sorted cosignature. A Σ-coalgebra (X, ⟨fσ : σ ∈ Σ⟩) consists of a set X and a collection of functions
{fσ : X → Xa(σ)}σ∈Σ. In other words, a Σ-coalgebra is a coalgebra for the functor
GΣ : Set → Set
X	'→	  Xa(σ)
σ∈Σ
X −h→ Y	'→	⟨hσ : σ ∈ Σ⟩
where hσ : Xa(σ) → Ya(σ) is defined in the obvious way. We call g : Y1 → Y2
a Σ-coalgebra morphism from (Y1, ⟨o1 : σ ∈ Σ⟩) to (Y2, ⟨o2 : σ ∈ Σ⟩) if g is a
GΣ-coalgebra morphism.
Remark 3.4 The notion of a cosignature that we are using goes back to [3].

Complete sets of co-operations
If we instantiate Definition 2.1 of an observational coalgebra to the case of the more concrete Σ-coalgebras we obtain our notion of a complete set of co-operations.
Definition 3.5 Let X be a set, let S be a set of sorts and Σ an S-sorted signature.  A set of co-operations {fσ : X → Xa(σ)}σ∈Σ is called com- plete for X if the final map ϕ : X → ΩGΣ from the corresponding Σ- coalgebra (X,⟨fσ : σ ∈ Σ⟩) into the final Σ-coalgebra (ΩGΣ , ωΣ) is injective:
X _ _ _ _ _∃!_ϕ	 ΩG 
⟨fσ :σ∈Σ⟩	ωΣ
J	J 
GΣX	 G ΣΩGΣ
GΣϕ

4 Here α1 + ... + αm denotes the word α1 ... αm - the +’s have no formal meaning and are only there in order to make the structure of a given S-arity more clear.

Examples of complete sets of co-operations can be found in Example 2.3 (ii)-(vi) above.
Example 3.6 (i) In Example 2.3(ii) the set S of sorts consists only of the one- element set 1. The co-operation P has arity (ϵ, 1) + (ϵ, •), where ϵ denotes the empty word, and {P} ia a complete set of co-operations for IN.
Example 2.3(iii) gives not immediately rise to a complete set of co-operations. We first have to split the given function Pp : IN → 1 + {0,...,p − 1} into two functions P 1 : IN → 1 + {0,...,p − 1} and P 2 : IN → 1 + IN by letting
p	p
P 1(0) = P 2(0) = ∗ ∈ 1 and by putting for all n ∈ IN, P 1(n) := n mod p
p	p	p
and P 2(n) := [ n ♩.  It is now easy to see that {P 1,P 2} is a complete set
p	p	p	p
of co-operations for IN with a(P 1) = (ϵ, 1) + (ϵ, {0,...,p − 1}) and a(P 2) = 
p	p
(ϵ, 1)+ (ϵ, •).
In Example 2.3(iv) the set S consists of the set A and the co-operations h : AZ → A, l : AZ → AZ and r : AZ → AZ with arities (ϵ, A), (ϵ, •) and (ϵ, •), respectively, form a complete set of co-operations for AZ.
Remark 3.7 Equivalently, we could have defined complete sets of co-operations in the following way:
{fσ}σ∈Σ is complete for X if (X,{fσ}σ∈Σ) is strongly extensional.
That the completeness condition in (1) is implied by the one in Def. 3.5 is an immediate consequence of Prop. 2.5. The converse direction can be proven using the observation that for any functor of the form GΣ for some cosignature Σ the relation ↔GΣ is transitive.

Example: Completeness of {head, even, odd} In this section we show that
{head : Aω → A, even : Aω → Aω, odd : Aω → Aω}
is a complete set of co-operations for the set of A-streams, where for any infinite
A-stream α = a0a1a2a3a4a5 ... ∈ Aω we have
head(α) := a0	even(α) := a0a2a4 ...	odd(α) := a1a3a5 ... 
Definition 3.8 Let A2∗ := {t | t : 2∗ → A} be the set of infinite binary A-labelled

trees. For a tree t ∈ A2∗ and a word w ∈ 2∗ we denote by t tw(v) := t(vw) for all v ∈ 2∗.
the tree given by

In the following we will work with the binary coding of natural numbers.
Remark 3.9 We follow the convention that the most significant digit of the binary coding of a natural number is the leftmost digit, e.g. the natural number 13 is encoded as the sequence 1101.
Definition 3.10 We denote by bin : IN → 2∗ the function that maps a natural number to its representation in binary coding. Furthermore we denote by nat :

2∗ → IN the function that maps a binary code to the corresponding natural number. By convention we put nat(ϵ) := 0.
The following is a well-known fact from universal coalgebra.
Fact 3.11 Deﬁne h : A2∗ → A by h(t) := t(ϵ), l : A2∗ → A2∗ by l(t) := t  and
r : A2∗ → A2∗ by r(t) := t . The set A2∗ together with the map ⟨h, l, r⟩ : A2∗ →
A × A2∗ × A2∗ form a ﬁnal coalgebra for the functor A × Id × Id.
We now prove that {head, even, odd} is a complete set of co-operations.
Proposition 3.12 Let j : Aω → A2∗ be the function that maps a stream τ to the binary tree j(τ ) with
j(τ )(w) := τnat(w)	for all w ∈ 2∗.
Then j is the unique coalgebra morphism from (Aω, ⟨head, even, odd⟩) into the ﬁnal coalgebra (A2∗ , ⟨h, l, r⟩).
Proof. We have to prove that the following diagram commutes:

Aω
⟨head,even,odd⟩
j	 A 2∗
⟨h,l,r⟩

ωJ 
ω 	 
2 J  2∗

A × A × A
id×j×j
A × A	× A

Let τ ∈ Aω be a stream.  Then head(τ ) = τ0 = τnat(є) = j(τ )(ϵ) = h(j(τ )).
Furthermore for w ∈ 2∗ we get
l(j(τ ))(w)= j(τ )0(w) = j(τ )(w0)
= τnat(w0) = τ2∗nat(w) = even(τ )nat(w) = j(even(τ ))(w)
and
r(j(τ ))(w)= j(τ )1(w) = j(τ )(w1)
= τnat(w1) = τ2∗nat(w)+1 = odd(τ )nat(w) = j(odd(τ ))(w).
Hence l(j(τ )) = j(even(τ )) and r(j(τ )) = j(odd(τ )) which finishes the proof that the above diagram commutes. Therefore j is the unique coalgebra morphism into

the final coalgebra (
A2∗
, ⟨h, l, r⟩
).	 

Corollary 3.13 The set {head, even, odd} is a complete set of co-operations for
Aω.
Proof. This follows immediately from Prop. 3.12 and the fact that j : Aω → A2∗
is obviously injective.	 

The proof principle
We are now going to discuss GΣ-bisimulations and the resulting Σ-proof principle. It follows from Prop. 2.5 that a Σ-coalgebra (X, ⟨fσ : σ ∈ Σ⟩) is strongly extensional
w.r.t. GΣ-bisimilarity, i.e., τ1 ↔GΣ τ2 implies τ1 = τ2 for all τ1, τ2 ∈ X. Let us first

spell out the definition of a Σ-bisimulation.
Fact 4.1 Let (X, ⟨fσ : σ ∈ Σ⟩) be a Σ-coalgebra. A relation R ⊆ X × X is a Σ- bisimulation if for all (τ1, τ2) ∈ R and fσ : X → Xα1 + ... + Xαn with basic arities α1,..., αn we have
fσ(τ1) ∈ Xαi iff fσ(τ2) ∈ Xαi for 1 ≤ i ≤ n,
if fσ(τ1), fσ(τ2) ∈ Xαi and αi = (S1 ... Sm, S) with S ∈S we have
fσ(τ1)(s1,..., sm) = fσ(τ2)(s1,..., sm)	for all si ∈ Si, 1 ≤ i ≤ m,
if fσ(τ1), fσ(τ2) ∈ Xαi and αi = (S1 ... Sm, •) we have
(fσ(τ1)(s1,..., sm), fσ(τ2)(s1,..., sm)) ∈ R	for all si ∈ Si, 1 ≤ i ≤ m.
As observational coalgebras are strongly extensional we obtain the following Σ- coinduction proof principle for a set X that is equipped with a complete set of co-operations.
Proposition 4.2 Let Σ be a cosignature and suppose O = {fσ : σ ∈ Σ} is a complete set of co-operations for a set X. For all τ1, τ2 ∈ X and all Σ-bisimulations R ⊆ X × X we have (τ1, τ2) ∈ R implies τ1 = τ2.
Proof. The claim follows from 2.5.	 
The following proposition describes a special, slightly simpler case of the Σ- coinduction proof principle.
Proposition 4.3 Let Σ be a cosignature, let O = {fσ : σ ∈ Σ} be a complete set of co-operations for a set X and let τ1, τ2 ∈ X. Suppose for all co-operations fσ : X → Xα1 + ... + Xαn the following holds:
fσ(τ1) ∈ Xαi iff fσ(τ2) ∈ Xαi for 1 ≤ i ≤ n
if fσ(τ1), fσ(τ2) ∈ Xαi and αi = (S1 ... Sm,T ) we have
fσ(τ1)(s1,..., sm) = fσ(τ2)(s1,..., sm)	for all si ∈ Si, 1 ≤ i ≤ m.
Then we can conclude that τ1 = τ2.
Proof. Given the assumptions of the proposition it is straightforward to see that the relation ΔX ∪{(τ1, τ2)} is a Σ-bisimulation, where ΔX ⊆ X × X denotes the identity relation (the X-“diagonal”). Therefore the claim follows using Proposition 4.2. 
We now turn to an example that should demonstrate that a good choice of a complete set of co-operations for a given set X can lead to relatively simple proofs by Σ-coinduction. A further application of Σ-coinduction can be found in Section 5 (cf. Prop 5.15 below).

The proof principle: an example
Consider the set IRω of streams of real numbers together with the complete set of observers {h, Δ} from Example 2.3(v). We will recall a bit of so-called stream calculus; see [11] for all details. Let X = (0, 1, 0, 0, 0,.. .). We denote the convolution

product of two streams σ and τ in IRω by σ × τ . The multiplicative inverse of τ is denoted by 1/τ (which exists whenever τ (0) /= 0). As usual, σ/τ denotes σ × (1/τ ). We define the following so-called falling powers of X, for all n ≥ 0, by
Xn = Xn/(1 − X)n+1
As usual, we include the set of reals IR into the set of streams IRω by the notational convention
r = (r, 0, 0, 0,.. .)
Note that ΔX0 = Δ1/(1 − X) = 0 and
ΔXn+1 = Xn

For σ ∈ IRω we define


Now let

rσ =  Δ(n) σ  (0)

sum(σ) = rσ × X0  +  rσ × X1  +  rσ × X2  +  ··· 

0
Theorem 4.4 For all σ ∈ IRω,


Proof. We show that
1	2


σ = sum(σ)

R = { ( σ, sum(σ)) | σ ∈ IRω }
is an {h, Δ}-bisimulation. Clearly,
h(σ) = σ(0) = h(sum(σ))
Furthermore we have Δ sum(σ)
=Δ  rσ × X0 +  rσ × X1 +  rσ × X2 +  ··· 
= rσ × Δ X0 +  rσ × Δ X1 +  rσ × Δ X2 +  ··· 
0	1	2
= rσ × X0  +  rσ × X1  +  rσ × X2  +  ··· 
1	2	3
= sum(Δσ)

where for the latter equality we use


As a consequence, we have


σ n+1


= rΔσ

( Δσ, Δ sum(σ)) = ( Δσ, sum(Δσ)) ∈ R
This proves that R is an {h, Δ}-bisimulation.	 

The theorem above is already present in [11, Thm 11.1]. The reader is invited to compare the proof there with the present one. (Giving away the clue, the present one is quite a bit simpler ;-))

The definition scheme
The general case
Remark 5.1 We restrict our attention to basic cosignatures, i.e., the arities of the occurring co-operations do not involve the coproduct. The case in which co- operations involve the coproduct is considerably more complicated and is left as future work.
In this subsection we are considering the situation in which we are given:
a collection S of sets (“visible sorts”) and a hidden sort •
a set X, a basic cosignature Σ and a complete set of co-operations O = {fσ : σ ∈
Σ}σ∈Σ for X,
a set Δ of function symbols for the functions that we want to define; we write Δi ⊆ Δ for the set of function symbols in Δ with i ∈ IN arguments,
We are going to define a generic definition scheme for X-constants and X-functions, generalising the scheme that has been presented in [12] for the case that X is the set of infinite binary A-labelled trees. In order to be able to formulate what a well-formed definition of X-constants and functions is, we have to introduce some syntax.

The terms
We first define the set FE of flat equation terms, the set E of equation terms and the set of Er of restricted equation terms. These terms are sorted, i.e. we write t : S to indicate that t is a term of sort S ∈ S ∪ {•}. In our scheme we are allowed to freely use “help functions” of visible sort.
Definition 5.2 For a set S of visible sorts we define the set of admissible help functions by putting HelpS := {h | h is a function of type S1 × ... × Sj → T  for some j ∈ IN and some S1,... Sj,T ∈ S}.
Definition 5.3 Given a cosignature Σ, a set of visible sorts S, a set Δ of constants and function symbols and a sorted set X = (XS)S∈S∪{•} of variables. We define the sets FE of flat equation terms, E of equation terms and Er of restricted equation terms by putting:
FE e t ::= x : S, x ∈ XS,S ∈ S ∪ {•} | s,s ∈ S, S ∈S 
| Fσ(t) : S1 × ... × Sn → T, σ ∈ Σ, a(σ) = (S1 ... Sn,T ),t : •
| t(t1,..., tl) : S, t : S1 × ... × Sl → S, ti : Si for 1 ≤ i ≤ l

E e s ::= x : S, x ∈ XS,S ∈ S ∪ {•} | s,s ∈ S, S ∈S | τ : •,τ ∈ X
| Fσ(t) : S1 × ... × Sn → T, σ ∈ Σ, a(σ) = (S1 ... Sn,T ),t : •
| h : S1 × ... × Sl → S ∈ Help | g : (•)n → •, g ∈ Δn,n ∈ IN
| t(t1,..., tl) : S, t : S1 × ... × Sl → S, ti : Si for 1 ≤ i ≤ l

and by defining Er ⊆ E to consist exactly of those terms in E in which for every
σ ∈ Σ the symbol Fσ is applied to variables only. Finally we put
T e t ::= τ,τ ∈ X | g(t1,..., tn),g ∈ Δn,n ∈ IN.
We write t(x1 : S1,..., xn : Sn) in order to indicate that t is a term with variables contained in {x1 : S1,..., xn : Sn}.
Definition 5.4 Let Y = (Y, ⟨oσ : σ ∈ Σ⟩) be a Σ-coalgebra and let V be a set of sorted variables from X . A variable assignment on V is a function α that assigns to each variable x ∈ V of sort T ∈ S ∪ {•} an element s ∈ S if T = S ∈S or a state y ∈ Y if T = •.
Definition 5.5 Let Y = (Y, ⟨oσ : σ ∈ Σ⟩) be a Σ-coalgebra and suppose that for every g ∈ Δm there is an operation gY : Y m → Y . For every term t(x1,..., xn) ∈E and every variable assignment α on {x1,..., xn} we define by induction on t its interpretation (t[α])Y as follows:
(x[α])Y := α(x)	(s[α])Y := s ∈ S	(τ [α])Y := τ ∈ X
(h[α])Y := h	(g[α])Y := gY
(Fσ(t)[α])Y := oσ((t[α])Y)
(t(t1,..., tn)[α])Y := (t[α])Y((t1[α])Y,..., tn[α])Y).
Where necessary, we explicitly mention the interpretations of the function symbols in Δ and write (t[α])(Y,{gY}g∈Δ) for (t[α])Y. Similarly we define the interpretation (t[α])Y of a term t(x1,..., xn) ∈ FE on an arbitrary Σ-coalgebra. An equation is a pair of terms e1(x1,..., xn), e2(x1,..., xn) ∈ E . We say (e1, e2) is satisfied in Y by an assignment α if (e1[α])Y = (e2[α])Y. We write Y,α |= (e1, e2) if (e1, e2) is satisfied by α. Furthermore we write x '→ t for the variable assignment that maps the variable x to the term t.
Definition 5.6 A state equation is a pair e = (e1, e2) of terms e1(x : •), e2(x : •) ∈ FE. Given a Σ-coalgebra Y = (Y, ⟨oσ : σ ∈ Σ⟩) we say that e is satisfied at a state y if Y, (x '→ y) |= (e1, e2), ie., if (e1[x '→ y])Y = (e2[x '→ y])Y. We write y |= e if e is satisfied at y and we write Y |= e if y |= e for all y ∈ Y .
We will use the fact that Σ-coalgebra morphisms preserve state equations: if f is a coalgebra morphism and e is some state equation satisfied at a state x then e is also satisfied at f (x). This is the content of the following two lemmas.

Lemma 5.7 Let Y1 = (Y1, ⟨o1
: σ ∈ Σ⟩) and Y2 = (Y2, ⟨o2
: σ ∈ Σ⟩) be Σ-

coalgebras and let f : Y1 → Y2 be a Σ-coalgebra morphism. For all states y ∈ Y1, all σ ∈ Σ and all (s1,..., sn) ∈ S1 × ... Sn we have
o1 (y)(s1,..., sn)= o2 (f (y))(s1,..., sn) for all (s1,..., sn) ∈ S1 × ... Sn,
σ	σ
if Arity(σ) = (S1 ... Sn, S), S /= •
f (o1 (y)(s1,..., sn)) = o2 (f (y))(s1,..., sn) for all (s1,..., sn) ∈ S1 × ... Sn
σ	σ
if Arity(σ) = (S1 ... Sn, •)

Proof. The claim can be easily proven by spelling out the definitions of a Σ- coalgebra morphism.	 
As a consequence we get that state equations are “preserved” under coalgebra morphisms.
Lemma 5.8 Let Y1 = (Y1, ⟨o1 : σ ∈ Σ⟩) and Y2 be Σ-coalgebras, let f : Y1 → Y2 be a Σ-coalgebra morphism and let e = (e1, e2) be a state equation. Then for all y ∈ Y1 we have
y |= e	implies	f (y) |= e.
Proof. Using the previous lemma one can show by a straightforward induction on the term structure that for all terms t(x : •) ∈ FE the following holds
f (t[x '→ y])Y1 = t[x '→ f (y)]Y2 if t : •
(t[x '→ y])Y1	= (t[x '→ f (y)])Y2 if t is of visible sort.
This clearly implies the claim.	 
In order to be able to use the fact that X together with the set of co-operations
{fσ : σ ∈ Σ} is (isomorphic to) a subcoalgebra (U, γU ) of the final Σ-coalgebra, we have to concretely describe (U, γU ) using state equations: if we characterise (U, γU ) by a set of state equations E, we know that (U, γU ) and consequently also (X, ⟨fσ : σ ∈ Σ⟩) is relatively final among all Σ-coalgebras that validate the state equations in E.
Definition 5.9 Let Ω = (ΩΣ, ⟨ωσ : σ ∈ Σ⟩) be the final Σ-coalgebra and let P ⊆ ΩΣ be a subset of ΩΣ. We denote by  P = ( P, ⟨ω P : σ ∈ Σ⟩) the largest subcoalgebra
of Ω that is contained in P .
The well-definedness of P follows from the fact that for any P ⊆ ΩΣ the largest subcoalgebra of Ω contained in P exists (cf. e.g. [5, Thm. 4.7]).
Definition 5.10 Let Σ be a cosignature and let O = {fσ | σ ∈ Σ} be a complete set of Σ-co-operations for X. We say that a set of equations E completely speciﬁes (X, ⟨fσ : σ ∈ Σ⟩) if
 PE ∼= (X, ⟨fσ : σ ∈ Σ⟩)
where PE := {y ∈ ΩΣ | ∀e ∈ E. y |= e}. In this case we call (O, E) a complete (Σ-)speciﬁcation of X.
Lemma 5.11 Let (O, E) be a complete Σ-speciﬁcation of X. For all Σ-coalgebras Y = (Y, ⟨oσ : σ ∈ Σ⟩) such that Y |= e for all e ∈ E there exists a unique Σ-coalgebra morphism ιY : Y → X.
Proof. Let ϕ : Y → ΩΣ be the unique Σ-coalgebra morphism into the final Σ- coalgebra Ω. It follows from Lemma 5.8 that Y |= e for all e ∈ E implies range(ϕ) ⊆ PE. As range(ϕ) is a subcoalgebra of Ω we get range(ϕ) ⊆  PE. The existence of ι follows now from Proposition 2.7.	 

The differential equations
We now have introduced the necessary terminology in order to be able to state the main definition of this section. This definition involves the notion of an equation being provable in conditional equational logic. We do not want to spell out this notion, instead, the reader is referred to the brief overview in [13, Sec. 7.3] and references therein.
Definition 5.12 Let (O, E) be a complete specification of X. A well-formed system of behavioural differential equations for (O, E) and Δ is a set Equ ⊆E ×Er of equa- tions which contains for every g ∈ Δ, and for any σ ∈ Σ with a(σ) = (S1 ... Sn,T ) an equation
(Fσ(g(x1 : •,..., xr : •))) (y1 : S1,..., yn : Sn)= 
tg (x1 : •,..., xr : •, y1 : S1,..., yn : Sn) : T,
where the tg ’s are terms in E and with the property that for all (e ,e ) ∈ E and all
σ	r	1	2
g ∈ Δ the following conditional equation is provable in conditional equation logic
(e1[x := g(x1,..., xn)] = e2[x := g(x1,..., xn)]) ⇐ E(x1,..., xn) ∪ Equ,
where E(x1,..., xn) := {(e1[x := xi], e2[x := xi]) | (e1, e2) ∈ E, 1 ≤ i ≤ n}.
Now that we know what a well-behaved system of equations is, we also want to see what a solution of these equations looks like.
Definition 5.13 A solution of Equ is a family of functions {gˆ}g∈Δ that contains for all g ∈ Δ a function gˆ : Xn → X such that for all σ ∈ Σ:
fσ(gˆ(τ1,..., τn))(s1,..., sl) = (tg [yj := sj ][xi '→ τi])X,
where n is the arity of g and l is the arity of σ.
Before we demonstrate that such a solution exists for any well-formed system of behavioural differential equations we demonstrate that a solution has to be neces- sarily unique. The following technical lemma will be useful.
Lemma 5.14 Let {gˆ} be a solution of Equ. For all terms (t : •) ∈ Er, all fσ ∈ O 
and all si ∈ Si for 1 ≤ i ≤ m there exists t∗ ∈ Er such that
fσ  (t[α])(X,{gˆ}g∈Δ) (s1,..., sm) = (t∗[α])(X,{gˆ}g∈Δ)
where a(σ) = (S1 ... Sm,T ) .
Proof. The claim can be proven by induction on the structure of t.	 
We are ready to prove that any solution of a well-formed system of behavioural differential equations has to be unique.
Proposition 5.15 If {gˆ}g∈Δ and {g'}g∈Δ are solutions of Equ, then for all g ∈ Δ
we have gˆ = g'.
Proof. In order to prove the proposition, we first observe that for any term
t(x1,..., xm) : S ∈ Er of observable sort S ∈ S and all variable assignments α,

we have (4)


(t[α])(X,{gˆ}g∈Δ) = (t[α])(X,{g'}g∈Δ)

We leave the easy inductive proof to the reader. The key observation is that t cannot contain any co-operation symbol g ∈ Δ, because t is of observable sort and the operation symbols Fσ - the only operations that can transform a term of sort
into a term of observable sort - are exclusively applied to variables because t is a term in Er.
We now prove the proposition using the principle of Σ-coinduction from Prop. 4.2. We put
R := {(tˆ, t') | (t : •) ∈E , tˆ= (t[α])(X,{gˆ}), t' = (t[α])(X,{g'}) for some variable assignment α : X → X}.
Let g ∈ Δ be some n-ary function symbol. By definition of R we have (gˆ(τ1,..., τn), g'(τ1,..., τn)) ∈ R for arbitrary τ1,..., τn ∈ X. Therefore, in or- der to prove that gˆ(τ1,..., τn) = g'(τ1,..., τn), it suffices to show that R is a Σ- bisimulation.
Let (tˆ, t') ∈ R, i.e., tˆ = (t[α])(X,{gˆ}) and t' = (t[α])(X,{g'}) for some t ∈ E and some variable assignment α, and let σ ∈ Σ with a(σ) = (S1 ... Sn,T ). Then by (3) in Lemma 5.14 there exists for all si ∈ Si, 1 ≤ i ≤ n a term t∗ ∈ Er such that

(5)
f (tˆ)(s ,...,s ) = (t∗[α])(X,{gˆ})	f (t')(s ,...,s ) = (t∗[α])(X,{g'})

σ	1	n	σ	1	n
In case T  ∈ S, i.e., in case T is an observable sort, (4) and (5) imply that
fσ(tˆ)(s1,..., sn) = fσ(t')(s1,..., sn).  In the case that T = • the equations (5)
yield (fσ(tˆ)(s1,..., sn), fσ(t')(s1,..., sn)) ∈ R. As σ and the si’s where arbitrary this means that R is indeed a Σ-bisimulation and hence for any g ∈ Δ we have gˆ(τ1,..., τn) = g'(τ1,..., τn) for all τi ∈ X.	 

The solution
Throughout this section we fix a cosignature Σ, a complete Σ-specification (O, E) of X and a well-formed system Equ of behavioural differential equations for (O, E). For all σ ∈ Σ with a(σ) = (S1 ... Sn, S), S ∈ S and for all τ ∈ Σ with a(τ ) = 
(S1 ... Sn, •) we define functions
Fσ : T × S1 × ... × Sn → S	and
Fτ : T × S1 × ... × Sn →T ,
respectively. The Fσ’s are defined by induction on the structure of the terms in T .
Definition 5.16 The term coalgebra T = (T , ⟨Fσ : σ ∈ Σ⟩) is defined inductively by putting for all σ ∈ Σ:
Fσ(τ ) := fσ(τ )
where f (τ )(s ,...,s ) := ⎧⎨ fσ(τ )(s1,..., sn) if fσ(τ )(s1,..., sn) ∈ X

σ	1	n
⎩ fσ(τ )(s1,..., sn) otherwise

F (g(t ,...,t )) := λ→s.(tg [y
:= s ][x
'→ t ])T.

σ	1	n
σ  j	j	i	i

Lemma 5.17 Let (O, E) be a complete speciﬁcation of X and let Equ be a well- formed system of behavioural differential equations for (O, E). Furthermore let T = (T , ⟨Fσ : σ ∈ Σ⟩) be the term Σ-coalgebra deﬁned above. For all t ∈T and all e ∈ E we get that t |= e.
Proof. Let t be an element of T and let (e1, e2) ∈ E. We have to show that
(e1[x '→ t])T = (e2[x '→ t])T.
We prove the claim by induction on the structure of t.
Case t = τ for some τ ∈ X. In order to show that (6) holds one first has to prove that the function ( ) : X →T that maps an element τ ∈ X to the corresponding constant τ ∈ T is a Σ-coalgebra morphism from ⟨X, ⟨fσ : σ ∈ Σ⟩⟩ to T. This a matter of routine checking. By Lemma 5.8 and the fact that τ |= (e1, e2) it now follows that also τ |= (e1, e2).
Case t = g(t1,..., tn) for some g ∈ Δ. Let α be a variable assignment that maps for all 1 ≤ i ≤ n the variable xi to the term ti. Then by I.H. we have (e1[α])T = (e2[α])T, ie., T,α |= (e1, e2), for all e = (e1, e2) ∈ E(x1,..., xn). Furthermore for all σ ∈ Σ with a(σ) = (S1 ... Sl,T ) and for all (s1,..., sl) ∈ S1 × ... × Sl by definition we have (Fσ(g(x1,..., xn))(y1,..., yl)[yj := sj ][α])T =
(tg [y  := s ][α])T and thus T,α |= (e ,e ) for all equations (e ,e ) in Equ. By

σ  j	j
1	2	1	2

(2) it follows that for an arbitrary e = (e1, e2) ∈ E we have T,α |= (e1[x :=
g(x1,..., xn)], e1[x := g(x1,..., xn)]), ie.,
(e1[x := g(x1,..., xn)][α])T = (e2[x := g(x1,..., xn)][α])T,
which is equivalent to (e1[x '→ t])T = (e2[x '→ t])T. The latter shows that t |= e
as required.

The following is an immediate corollary.
Corollary 5.18 There exists a unique Σ-coalgebra morphism
ι : (T , ⟨Fσ : σ ∈ Σ⟩) → (X, ⟨fσ : σ ∈ Σ⟩).
Proof. The claim follows from the fact that (X, ⟨fσ : σ ∈ Σ⟩) is relatively final among all Σ-coalgebras that satisfy the equations in E (Lemma 5.11) and from the fact that the term coalgebra satisfies the equations in E (Lemma 5.17).	 
The final map ι can be used in order to obtain the solution of the given system
Equ of behavioural differential equations.
Definition 5.19 Let (O, E) be a complete specification of X, let Equ be a well- formed system of behavioural differential equations for (O, E) and let ι be the Σ-coalgebra-morphism from Corollary 5.18. For every g ∈ Δ we define a function gˆ : Xn → X by putting gˆ(τ1,..., τn) := ι(g(τ 1,..., τn)).
The above definition yields the unique solution of a given well-formed system of behavioural differential equations.

Proposition 5.20 Let (O, E) be a complete speciﬁcation of X and let Equ be a well-formed system of behavioural differential equations for (O, E) and a given set of function symbols Δ. The family {gˆ}g∈Δ from Deﬁnition 5.19 is the unique solution of Equ.
Proof. The fact that {gˆ}g∈Δ is a solution of Equ can be easily checked. That the solution of a well-formed system of behavioural differential equations is unique has been proven in Proposition 5.15.	 
Deﬁnition scheme: short examples
We now give a short list of examples that are instances of our definition scheme. An example that has been worked out in more detail can be found in Section 5.3 below.
Consider the set of bi-infinite streams ZZ of integers together with the set of co- operations {h : ZZ → Z,l : ZZ → ZZ,r : ZZ → ZZ} (cf. Example 2.3(iv)). The equations (Fl(Fr(x)), x) and (Fr(Fl(x)), x) can be seen to completely specify (ZZ, ⟨h, l, r⟩). The following is a well-formed system of differential equations for Δ = {σ}∪ {+( , z) | z ∈ Z}:
Fh(σ) = 0	Fh(+(x, z)) = Fh(x)+ z Fl(σ) = +(σ, 1)		Fl(+(x, z)) = +(Fl(x), a)
Fr(σ) = +(σ, −1)	Fr(+(x, z)) = +(Fr(x), z)
where z ∈ Z. Then the functions +( , z) : ZZ → ZZ for all z ∈ Z that add to a given bi-infinite stream the integer z and the constant
σ = (..., −3, −2, −1, 0, 1, 2, 3,.. .),
form the unique solution.
Here is an example of an {h, Δ}-differential equation (cf. Example 2.3(v)):
Δσ = σ,	σ(0) = 1 
It has a unique solution:
σ = (20, 21, 22,.. .).
A closed expression for his solution can be computed using the following iden- tity, which can be viewed as the fundamental theorem of the difference calculus: for all τ ∈ IRω,
1
τ = 1 − X × ( τ0 + X × Δτ )
Using this and the differential equation above, one obtains

1
σ = 1 − 2X
= (20, 21, 22,.. .)

The following is an example of an {h, d/dX}-differential equation (cf. Exam- ple 2.3(vi)):
dσ = σ,	σ(0) = 1
dX

Again, it has a unique solution, which is now given by
1
σ(n) = 
n!
(It is not obvious how to find a closed expression for σ.)

Deﬁnition scheme for {head, even, odd}
We now want to look at one instance of our definition scheme in somewhat more detail. We consider the set X = Aω of infinite A-streams for a given non-empty set
A. For our scheme we first need a complete specification (O, E) of Aω. In Section 3.3 we saw that the co-operations {head, even, odd} are complete with respect to Aω. Thus we put O = {head, even, odd}, i.e., our cosignature consists of one constant head with a(head) = (ϵ, A), and two operation symbols even and odd with a(even) =
a(odd) = (ϵ, •) 5 .
For a complete specification of Aω, however, we also need some equations that characterise the subcoalgebra of the final A × Id × Id-coalgebra that is isomorphic to (Aω, ⟨head, even, odd⟩): intuitively speaking this subcoalgebra consists of those binary A-labelled trees that do not change the label on paths that go to the left only - corresponding to the fact that the first element of a stream σ and the first element of even(σ) are equal. This property can be expressed by the following state equation:
Fhead(Feven(x)) = Fhead(x) with some variable x ∈ X•,
i.e., we put E := {(Fhead(Feven(x)), Fhead(x))}.
Recall the representation of the final A × Id × Id-coalgebra (A2∗ , ⟨h, l, r⟩) from Fact 3.11 and let j : Aω → A2∗ be the (injective) coalgebra morphism from (Aω, ⟨head, even, odd⟩) into the final coalgebra.

∗
Lemma 5.21 Using the terminology of Deﬁnition 5.10 we have PE = {t ∈ A2 |
h(t) = h(l(t))} ⊆ A2∗ and j[Aω] =  P  , i.e. , Aω ∼=  P  . Therefore (O, E) is a
E
complete speciﬁcation of Aω.
Proof. The first claim about PE can be seen to be true by spelling out the definition of PE. In order to show that j[Aω] = PE we first prove PE ⊆ j[Aω]. Let t ∈ PE. Then it is easy to see that
for all	w ∈ 2∗	we have tw ∈ PE, i.e., h(l(tw)) = h(tw).
We define a stream τ ∈ Aω by putting τn := h(tbin(n)) for all n ∈ ω. Our claim is that j(τ ) = t. We prove j(τ )(w) = t(w) for all w ∈ 2∗ by induction on w.
Base case w = ϵ. Then j(τ )(ϵ) = τ0 = h(t) = t(ϵ).
Case w = 0v. Then
j(τ )(0w) = j(τ )(w) = t(w) = h(tw)
(=7) h(l(t )) = h(t	) = t(0w)

5 Note that we simply write head, even and odd instead of fhead, feven and fodd.

Case w = 1v. Then
j(τ )(1w)= τnat(1w)

D=ef. h(t	) = h(t	) = t(1w)

This concludes the proof of  PE ⊆ j[Aω]. For the converse direction note that obviously j[Aω] ⊆ PE.  Therefore it suffices to show that j[Aω] is an invariant
- but this follows from the fact that j is a homomorphism and hence j[Aω] is a subcoalgebra of (A2∗ , ⟨h, l, r⟩).	 
Now we are ready to concretely describe the stream definition scheme. Given a set of functions symbols Δ, each g ∈ Δ with an arity a(g) ∈ IN, the syntax for the definition scheme is defined as above - but now for the special case that X = Aω, Σ = {head, even, odd} and S = {A}. Then a well-formed system of behavioural differential equations for (O, E) and Δ is a set Equ of equations which contains for every g ∈ Δn three equations
Fhead(g(x1,..., xn)) := cg(Fhead(x1),..., Fhead(xn))
for some function c : An → A
Feven(g(x1,..., xn)) := tg	(x1,..., xn)
Fodd(g(x1,..., xn)) := tg	(x1,..., xn)

where tg
and tf	are terms in E with variables contained in {x ,...,x }. Fur-

even
odd	r	1	n

thermore we require that we can prove for all g ∈ Δ the following conditional equation
Fhead(Feven(g(→x))) = Fhead(g(→x)) ⇐ Equ ∪ {Fhead(Feven(xi)) = Fhead(xi) | xi ∈ X}.
By Corollary 5.18 there exists a unique coalgebra morphism
ι : (T , ⟨Fhead, Feven, Fodd⟩) → (Aω, ⟨head, even, odd⟩), i.e., ι makes the following diagram commute:

T _
⟨Fhead,Feven,Fodd⟩
_ _ _
_ ι_ _ _
_ _ A ω
⟨head,even,odd⟩

J	 
ωJ  ω

A ×T ×T	id×ι×ι
A × A × A

Furthermore the function ι can be used in order to compute the unique solution for the given set Equ of behavioural differential equations:
Proposition 5.22 Let Equ be a well-formed system of behavioural differential equa- tions for a given set Δ of function symbols and let ι : T → Aω be the coalgebra map that interprets terms t ∈ T as A-streams. Furthermore we deﬁne for ev-
ery a(g)-ary function symbol g ∈ Δ a function gˆ : (Aω)a(g) → Aω by putting
gˆ(τ1,..., τa(g)) := ι(g(τ1,..., τa(g))). Then the family {gˆ}g∈Δ is the (unique) so- lution of Equ.
Proof. This is just a special case of Proposition 5.20 above.	 
As an example consider the following definition of the Thue-Morse sequence.
Example 5.23 Let A = 2 and Δ = {inv, TM}. We define Equ to be the following

set of equations
Fhead(inv(x)) := 1 − Fhead(x)	Fhead(TM) := 0 Feven(inv(x)) := inv(Feven(x))	 Feven(TM) := TM Fodd(inv(x)) := inv(Fodd(x))	 Fodd(TM) := inv(TM)
In order to see that this system of equations is well-formed one can easily check that the following conditional equations are theorems of conditional equational logic
Fhead(Feven(TM )) = Fhead(TM )	⇐	Feven(TM ) = TM Fhead(Feven(inv(x))) = Fhead(inv(x))	⇐	{Fhead(Feven(x)) = Fhead(x)}
∪ Equ
The unique solution of this system of equations consists of the function inv : 2ω → 2ω that inverts a given bitstream and of the constant TM : 1 → 2ω which is the so- called Thue-Morse sequence, i.e., TM = t0t1t2 ... with tn = s2(n) mod 2, where s2(n) denotes the sum of the digits of the binary representation of n.

Related and future work
Connection with Hidden Algebra
One source of inspiration for this paper was the work on hidden algebra (cf. e.g. [9]) and its close connection to coalgebra which has been described in the papers by Cˆırstea (cf. [2,3]). A hidden specification consists of a many-sorted algebraic sig- nature Σ, involving visible and hidden sorts, together with a set of equations that specify certain constraints on the given operations. The notion of a cobasis from hidden algebra defines when a given set of operations is “complete”. If we think of the operations as ways for obtaining information about elements of hidden sort, completeness means that we can either distinguish two given elements of some hid- den sort using the operations of the cobasis, or these elements should be considered to be equal.
Example 6.1 (Sketch) A possible hidden specification for streams over A contains the operations {head, cons, even, odd, tail, zip} together with the equations that are to be expected (cf. e.g. [8]). The sorts in this example are Stream and A where Stream is the hidden sort. Possible cobases would be: the set of all operations, the set {head, tail} and the set {head, even, odd}. But for example {head, even} would not be a cobasis.
It follows from the results in [2] that the Σ-coalgebras for a basic cosignature Σ can be seen as hidden algebras. Cobases are closely related to complete sets of co-operations, but these two notions do not coincide: A cobasis is defined for a given specification and hence for all hidden algebras (or Σ-coalgebras) that are a model for this specification. In the above example the set of A-streams can be seen as one model of the specification. Thus any cobasis for the specification will give rise to a complete set of co-operations on the set Aω. Complete sets of co-

operations are defined relative to one given set only. In the above example one can easily construct a complete set of co-operations on Aω that cannot be extended to a cobasis of the above stream specification. Summarising one could say that our definition of a complete set of co-operations is more basic then the notion of a cobasis. Nevertheless it gives rise to interesting coinductive definition and proof principles as we hope to have demonstrated.

Future Work
We believe that the value of our definition scheme lies in the fact that it is para- metric in the type of objects under consideration and in the (complete) given set of co-operations. The generality of our approach, however, has the drawback that for concrete cases, approaches which have been designed explicitly for these cases put less restrictions on the format of a “correct” definition. We are thinking, for example, of the recent work on defining streams and stream functions in [4] where techniques from (infinite) term rewriting are employed. At the moment we are working on making our definition scheme more liberal, mainly by using a refined induction argument for defining the term coalgebra (cf. Def. 5.16). Furthermore we want our definition scheme to be applicable to arbitrary cosignatures, i.e., we want to incorporate arities of co-operations that involve the coproduct. Finally we want to explore in more detail possible differences between different sets of co-operations on a given set of objects. One question is, for example, whether one complete set of co-operations allows to define more or different functions on streams than another one.

References
M. Barr. Terminal coalgebras in well-founded set-theory. Theoretical Computer Science, 114:299–315, 1993.
C. Cˆırstea. Coalgebra semantics for hidden algebra: Parameterised objects and inheritance. In F. Parisi- Presicce, editor, Recent Trends in Algebraic Developments, number 1376 in Lecture Notes in Compter Science, 1998.
C. Cˆırstea. A coalgebraic equational approach to specifying observational structures. Theoretical Computer Science, 280(1-2):35–68, 2002.
J. Endrullis, C. Grabmayer, D. Hendriks, A. Isihara, and J.W. Klop. Productivity of Stream Definitions. In Proceedings of FCT 2007, number 4639 in LNCS, pages 274–287. Springer, 2007.
H.P. Gumm. Elements of the general theory of coalgebras. LUATCS Lecture Notes, Rand Africaans University, Johannesburg, South Africa, 1999.
H.P. Gumm. On Minimal Coalgebras. Applied Categorical Structures, To appear, 2008.
D. Pavlovi´c and M. Escard´o. Calculus in coinductive form. In Proceedings of the 13th Annual IEEE Symposium on Logic in Computer Science, pages 408–417. IEEE Computer Society Press, 1998.
Grigore Ro¸su and Joseph Goguen. Circular Coinduction. 2001. Short paper at the International Joint Conference on Automated Reasoning (IJCAR’01).
G. Rosu. Hidden Logic. PhD thesis, University of California at San Diego, 2000.
J.J.M.M. Rutten. Universal coalgebra: a theory of systems. Theoretical Computer Science, 249:3–80, 2000.


J.J.M.M. Rutten. A coinductive calculus of streams. Mathematical Structures in Computer Science, 15:93–147, 2005.
A. Silva and J.J.M.M. Rutten. Behavioural differential equations and coinduction for binary trees. In
Proceedings of WoLLIC, pages 322–336, 2007.
Terese. Term Rewriting Systems. Cambridge University Press, 2003.
