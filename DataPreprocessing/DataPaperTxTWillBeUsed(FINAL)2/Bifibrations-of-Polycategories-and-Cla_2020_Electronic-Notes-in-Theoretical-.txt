Available online at www.sciencedirect.com


Electronic Notes in Theoretical Computer Science 352 (2020) 29–52
www.elsevier.com/locate/entcs

Bifibrations of Polycategories and Classical Linear Logic
Nicolas Blanco1
Computer Science Department University of Birmingham Birmingham, UK
Noam Zeilberger2
Laboratoire d’Informatique de l’E´cole Polytechnique Palaiseau, France

Abstract
The main goal of this article is to expose and relate different ways of interpreting the multiplicative fragment of classical linear logic in polycategories. Polycategories are known to give rise to models of classical linear logic in so-called representable polycategories with duals, which ask for the existence of various polymaps satisfying the different universal properties needed to define tensor, par, and negation. We begin by explaining how these different universal properties can all be seen as instances of a single notion of universality of a polymap parameterised by an input or output object, which also generalises the classical notion of universal multimap in a multicategory. We then proceed to introduce a definition of in-cartesian and out-cartesian polymaps relative to a refinement system (= strict functor) of polycategories, in such a way that universal polymaps can be understood as a special case. In particular, we obtain that a polycategory is a representable polycategory with duals if and only if it is bifibred over the terminal polycategory . Finally, we present a Grothendieck correspondence between bifibrations of polycategories and pseudofunctors into MAdj, the (weak) 2-polycategory of multivariable adjunctions. When restricted to bifibrations over we get back the correspondence between ∗-autonomous categories and Frobenius pseudomonoids in MAdj that was recently observed by Shulman.
Keywords: Polycategories, linear logic, bifibrations, Grothendieck construction, Frobenius monoids


Introduction
In his early studies of the linguistic applications of Gentzen’s sequent calculus [16], Lambek observed that the so-called “associative syntactic calculus” of [15] has a natural semantic interpretation, where formulas are interpreted as bimodules of rings and proofs of sequents A1,..., An → B are interpreted as multilinear maps

1 Email: n.blanco@pgr.bham.ac.uk
2 Email: noam.zeilberger@lix.polytechnique.edu

https://doi.org/10.1016/j.entcs.2020.09.003
1571-0661/© 2020 The Author(s). Published by Elsevier B.V.
This is an open access article under the CC BY license (http://creativecommons.org/licenses/by/4.0/).

A1×· · ·×An → B. He mentions that one benefit of the sequent calculus presentation is that it leads to a decision procedure for the existence of canonical mappings, and notes that “it has already been observed by Bourbaki [Alg`ebre multilin´eaire, 1948] that linear mappings of the kind we are interested in are best defined with the help of multilinear mappings”. These early observations later led Lambek to formally introduce the definition of multicategories in [17], which generalise categories by allowing morphisms to have multiple inputs, a paradigmatic example being the multicategory of vector spaces and multilinear maps.
Szabo, a student of Lambek, introduced polycategories in [26], which further generalise multicategories by allowing morphisms to have multiple outputs in addi- tion to multiple inputs. One motivation for studying polycategories from the view of proof theory is that they stand in the same relation to Gentzen’s classical sequent calculus LK as multicategories stand in relation to the intuitionistic sequent calcu- lus LJ. For example, the composition operation for morphisms in a polycategory is typed just like the cut rule in classical sequent calculus. Lambek and Szabo’s work was later revisited from the perspective of linear logic [9] by Cockett and Seely [6], see also [4,13,7]. In particular, the notion of a representable (or two-tensor) polycat- egory with duals provides a natural source of models for the multiplicative fragment of classical linear logic. Representable polycategories with duals are equivalent to the ∗-autonomous categories of Barr [2], but have the advantage that all of the logical connectives can be defined by the existence of objects and (poly)morphisms satisfying certain universal properties, rather than as algebraic structures subject to coherence conditions.
This relation between ∗-autonomous categories and representable polycategories with duals is analogous to the relation between monoidal categories and repre- sentable multicategories (called monoidal multicategories by Lambek [17]), a rela- tion studied carefully by Hermida [10]. Hermida noted certain analogies between the theory of representable multicategories and the theory of fibred categories (cf. [10, Table 1]), which he later made explicit by introducing a notion of (covariant) ﬁ- bration of multicategories [11], in such a way that a representable multicategory is precisely the same thing as a multicategory fibred over the terminal multicategory
 . One interest of studying the more general notion of covariant fibration of multi- categories E → B, where every multimorphism f : A1,..., An → B in B induces a pushforward functor push⟨f⟩ : EA1 ×· · ·×EAn → EB, is that it modelsa much richer class of structures coming from algebra and logic. For example, Hermida notes that an algebra for an operad O can be identified with a discrete covariant fibration over O, the latter seen as a one-object multicategory. The appropriate definition of con- travariant fibration (and of bifibration) of multicategories was not addressed in [11]. However, there is a natural definition of contravariant fibration of multicategories, made explicit in the work of Ho¨rmann [12, A.2] and of Licata, Shulman, and Riley [18], under which each multimorphism of the base multicategory induces a family

of pullback operations pull[f ](i) : E op ×· · ·×E op
×E op
×· · ·×E op × EB → EA ,

A1	Ai−1	Ai+1	An	i
parameterised by the selection of the index 1 ≤ i ≤ n of a particular input object
Ai. One interesting feature of this definition is that monoidal biclosed categories in

the sense of Lambek [17] are equivalent to multicategories bifibred over  . More- over, replacing the terminal multicategory by an arbitrary base multicategory leads to a much richer framework for modelling a variety of substructural and modal log- ics, as discussed by Licata et al. [18], and in a very similar spirit to Melli`es and Zeilberger’s work on type refinement and monoidal closed bifibrations (cf. [20,21]). In particular, a recurring pattern is that some algebraic gadget in the base (e.g., a monoid object) induces some logical structure (e.g., monoidal closure) on its fibre. In this paper, we begin to develop a theory of bifibrations of polycategories, guided by the principle that representable polycategories with duals (and hence
∗-autonomous categories) should be equivalent to polycategories bifibred over the terminal polycategory . One consequence of this theory is that we recover a nice observation recently made by Shulman [23], that ∗-autonomous categories are equiv- alent to (pseudo) Frobenius monoids in the (2-)polycategory of multivariable ad- junctions. This will follow as a result of a general Grothendieck construction for bifibrations of polycategories, in a similar manner to the pattern mentioned above. Perhaps surprisingly, another one of our original motivations for developing this theory was trying to better understand properties of the category FBan1 of finite dimensional Banach spaces and contractive maps. It is a ∗-autonomous category and it comes with a ∗-autonomous forgetful functor into FVect, but contrary to the latter it is not compact closed. It provides a model of classical MALL based on finite dimensional vector spaces that is not degenerate, in the sense that the positive and negative fragments do not coincide. While the tensor, and more generally the use of FBan1 as a model of intuitionistic MALL is well-documented (cf. [5]) we could not find any mention of the par in the literature. In fact, this category is one of the original examples of ∗-autonomous category provided by Barr in [1, Ch. 4, 53–59], but without describing the tensor and par in FBan1 explicitly. Yet, the structures needed to interpret them are popular in the study of Banach spaces: ⊗ and	correspond to different norms placed on the tensor product of vector spaces called the projective and the injective (cross)norms, which have the property of being extremal in all the well-behaved norms that can be put on the tensor product. More specifically for any crossnorm  − and any u ∈ A ⊗ B we have u  A`B ≤ u  ≤ u  A⊗B. We will see that this has a nice explanation from the fact that the projective (⊗) norm and the injective ( ) norm can be defined as pushforwards and pullbacks, respectively, relative to the forgetful functor into
vector spaces.
Polycategories, linear logic, and universality
Polycategories
There are several different definitions of “polycategory” in the literature. We will consider the following definition of (non-symmetric) polycategory due to Cockett and Seely [6], which differs slightly from Szabo’s original definition [26] in imposinga planarity condition on composition. The ideas in this paper may be transferred in an almost straightforward way to the setting of symmetric polycategories (cf. [13,24]),

but we work with planar polycategories for the sake of greater generality.
Definition 2.1 A polycategory P consists of:
a collection of objects Ob(P)
for any pair of finite lists of objects Γ and Δ, a set P(Γ; Δ) of polymaps from Γ to Δ denoted f : Γ → Δ (we refer to objects in Γ as inputs of f , and to objects in Δ as outputs)
for every object A, an identity polymap idA : A → A
for any pair of polymaps f : Γ → Δ1, A, Δ2 and g : Γj , A, Γj → Δj satisfying
1	2

the restriction that [either Δ1 or Γj
is empty] and [either Δ2 or Γj
is empty], a

polymap g ◦A f : Γj , Γ, Γj → Δ1, Δj, Δ2
1	2
subject to appropriate unitality, associativity, and interchange laws whenever these make sense:
idA ◦A f = f	(1)
f ◦A idA = f	(2)
(h ◦B g) ◦A f = h ◦B (g ◦A f )	(3)
(h ◦B g) ◦A f = (h ◦A f ) ◦B g	(4)
h ◦B (g ◦A f )= g ◦A (h ◦B f )	(5)
Remark 2.2 The notation ◦A for the composition can be ambiguous when there are multiple copies of the same object. This can be dealt with more carefully by indexing or labelling each input and output of a polymap. However, we will stick with the more relaxed (albeit less precise) notation in this article, since it will never lead to ambiguity in the examples.
Remark 2.3 We will sometimes find it useful to represent polymaps by string diagrams. In this diagrammatic syntax, the composition operation may be depicted schematically as follows:
j	Δ1

Γ	Δj


j	Δ2
2



The restriction on the composition operation that either Δ1 or Γj
is empty and

that either Δ2 or Γj
is empty is called a “planarity” condition, since in the picture

above it means that there are actually no crossing wires. In general, the string diagram of a polymap corresponds to a planar tree with the edges oriented from left to right, and the polycategory axioms correspond to natural isotopies between diagrams. For example, the interchange law (4) states that when composing along two different inputs, the order should not matter:




=
  


This justifies drawing the two polymaps f and g above on the same level, as we will sometimes do in examples.
Representable polycategories with duals
In this section we briefly recall the notion of representable (or two-tensor) polycat- egory with duals, which has been used to model the multiplicative connectives of classical linear logic.
Definition 2.4 Let Γ be a list of objects in a polycategory P. A tensor product of Γ is an object N Γ equipped with a polymap mΓ :Γ → N Γ such that the opera- tion P(Γ1, N Γ, Γ2; Δ) → P(Γ1, Γ, Γ2; Δ) of precomposition with mΓ is invertible.
Dually, for any list of objects Δ, a par product (or cotensor product ) of Δ is an object ˙Δ equipped with a polymap wΔ : ˙Δ → Δ such that the operation P(Γ; Δ1, ˙Δ, Δ2) → P(Γ; Δ1, Δ, Δ2) of postcomposition with wΔ is invertible.
Definition 2.5 A representable polycategory is a polycategory that has tensors and pars of any finite lists of objects.
The definition of representable polycategory (called two-tensor-polycategory in [6]) may be alternatively stated requiring only the existence of binary and nullary tensors and pars, this being equivalent since the binary and nullary cases are suf- ficient for building up tensor and pars of arbitrary finite lists of objects. In any case, the definition implies that polymaps Γ → Δ of a representable polycategory
are in one-to-one correspondence with unary maps N Γ → ˙Δ of its underlying
category. Conversely, Cockett and Seely proved that any linearly distributive cate- gory (C, ⊗, 1,  , ⊥) induces a polycategory where the polymaps Γ → Δ are defined
as maps N Γ → ˙Δ in C, and that this extends to an equivalence of 2-categories
between representable polycategories and linearly distributive categories [6]. One obtains ∗-autonomous categories by moreover asking for the existence of duals.
Definition 2.6 A right dual of an object A is an object A∗ equipped with polymaps rcupA : · → A, A∗ and rcapA : A∗,A → · such that rcupA ◦A∗ rcapA = idA and rcapA ◦A rcupA = idA∗ . A left dual of A is an object ∗A equipped with polymaps lcupA : · → ∗A, A and lcapA : A, ∗A → · such that lcupA ◦∗A lcapA = idA and lcapA ◦A lcupA = id∗A.
Definition 2.7 A polycategory is said to have duals if any object has a right and a left dual.
Note that this definition may be simplified in the case of a symmetric polycate- gory because left and right duals coincide in that case, although following Cockett

and Seely we have chosen to consider the more general situation. Cockett and Seely proved that in the symmetric case, representable polycategory with duals coincides with Barr’s notion of ∗-autonomous category [2], and that in the non-symmetric case it coincides with a natural notion of “planar” ∗-autonomous category [6].

Representable polycategories with duals are ∗-representable polycategories
In this section we introduce a notion of “∗-representability” of a polycategory, and prove that a polycategory is ∗-representable if and only if it is a representable polycategory with duals.
Definition 2.8 A polymap u :Γ → Δ1, A, Δ2 is said to be universal in the output A (or out-universal for short, or simply universal when there is no ambiguity), written u : Γ → Δ1, A, Δ2 if for any polymap h : Γ1, Γ, Γ2 → Δ1, Δ, Δ2 such that Γi = ∅ or Δi = ∅, there is a unique polymap h/u : Γ1, A, Γ2 → Δ such that h = h/u ◦A u.
Dually, a polymap n : Γ1, A, Γ2 → Δ is universal in the input A (or in-universal ), written n : Γ1, A, Γ2 → Δ if for any polymap h : Γ1, Γ, Γ2 → Δ1, Δ, Δ2 such that Γi = ∅ or Δi = ∅ there is a unique polymap n\h : Γ → Δ1, A, Δ2 such that h = n ◦A n\h.
Graphically, the definitions are summarized in the following diagram:


Γ1

Γ Γ2
Δ1	Γ1

Δ	Γ
Δ2	Γ2
Δ1
Δ	(∗)
Δ2

Remark 2.9 By extension, we say that A is an out-universal object (resp. in- universal object ) with respect to the surrounding context Γ → Δ1, , Δ2 (resp. Γ1, , Γ2 → Δ) if there is an out-universal polymap Γ → Δ1, A, Δ2 (resp. in- universal polymap Γ1, A, Γ2 → Δ). For a fixed surrounding context, in-universal and out-universal objects are unique up to unique isomorphism.
Definition 2.10 A polycategory is said to be ∗-representable if it has all in- universal and out-universal objects, that is, if for any Γ, Δ1, Δ2 there is an object A equipped with an out-universal polymap Γ → Δ1, A, Δ2, and similarly, for any Γ1, Γ2, Δ there is an object A equipped with an in-universal polymap Γ1, A, Γ2 → Δ.
It may be argued that Definition 2.8 is a natural generalisation of the notion of strong universal multimap in a multicategory [10], and Definition 2.10 the nat- ural generalisation of representability from multicategories to polycategories (pace Defn. 2.5). In Section 3, we will see that these concepts are special cases of more general fibrational concepts. Like strong universal multimaps in a multicategory, both in-universal and out-universal polymaps are closed under composition in an appropriate sense.

Proposition 2.11 In-universal polymaps compose, in the sense that if f	:
Γ1, A, Γ2 → Δ1, B, Δ2 (in the notation of Deﬁnition 2.8) and g : Γj , B, Γj → Δj,
1	2
then g ◦B f : Γj , Γ1, A, Γ2, Γj → Δ1, Δj, Δ2. Similarly, out-universal maps com-
1	2
pose in the sense that if f : Γ → Δ1, B, Δ2 and g : Γj , B, Γj → Δj , C, Δj , then

g ◦B f : Γj , Γ, Γj → Δ1, Δj , C, Δj , Δ2.
1	2	1	2

1	2	1	2
Proof. As we will see later, this is a special case of Proposition 3.4.	2
An immediate consequence of these definitions is that tensor products can be considered as out-universal objects, and par products as in-universal objects.
Proposition 2.12 An object N Γ equipped with a polymap m : Γ → N Γ is a
tensor product of Γ iff m is out-universal (in its unique output). Dually, an object
˙Δ equipped with a polymap w : ˙Δ → Δ is a par product of Δ iff w is in-
universal (in its unique input).
Somewhat more surprisingly, duals can also be characterised as either in- universal or out-universal objects.
Proposition 2.13 Let A and A∗ be objects of a polycategory P. The following are equivalent:
there is an out-universal map rcupA : ·→ A, A∗
there is an in-universal map rcapA : A∗,A →· 
there is an out-universal map rcupA : ·→ A, A∗
there is an in-universal map rcapA : A∗, A→· 
A∗ is the right dual of A
Proof. We refer the reader interested in this proof to the extended version of the paper. 3
2
Remark 2.14 There is of course a similar result for left duals with lcupA and
lcapA.
Theorem 2.15 P is a representable polycategory with duals iff it is ∗-representable.
Proof. The right to left direction follows by propositions 2.12 and 2.13. For the left to right direction we want to construct in-universal and out-universal objects for any contexts just using ⊗, ` and ∗. Given contexts Γ, Δ1, Δ2 consider the
object A := Δ∗ ⊗ N Γ ⊗ ∗Δ2 where Δ∗ := B∗	⊗ ... ⊗ B∗  for Δ1 = B1,1, ..., B1,n
1	1	1,n1	1,1	1
and similarly for ∗Δ2. This object comes with the following polymap, which is
a composition of out-universal polymaps along their out-universal objects. So by proposition 2.11, it is out-universal.
3 Available at https://nicolas-blanco.github.io/publication/polybifibrations/.

Δ1
Γ	A
Δ2
Similarly given Γ1, Γ2, Δ the object A := ∗Γ1 ` ˙Δ ` Γ∗ is in-universal with
in-universal polymap.
Γ1
A	Δ
Γ2
2

Examples
Example 2.16 Any linearly distributive category C gives a polycategory P(C) called its underlying polycategory. It has the same objects as C and a polymap f : A1, ..., Am → B1, ..., Bn in P(C) isa map f : A1 ⊗ ... ⊗ Am → B1 ` ... ` Bn in C.
Example 2.17 In particular any monoidal category gives rises to a polycategory with the same objects and with polymaps f : A1 ⊗ ... ⊗ Am → B1 ⊗ ... ⊗ Bn.
Example 2.18 The terminal polycategory  has one object ∗ and a unique arrow sm,n : ∗m → ∗n for every arity m and co-arity n. Although this example is trivial, we will see that it plays an important role in Section 3.
Example 2.19 Any category induces a polycategory with only unary maps. Con- versely any polycategory has an underlying category obtained by forgetting about the non-unary maps.
Example 2.20 From any multicategory M we can define two polycategories M+ and M− that have the same objects as M. The polymaps of M+ have always exactly one output and correspond to multimaps in M while the polymaps in M− have always exactly one input and correspond to multimaps in M reversed. Con- versely from any polycategory we get two multicategories by restricting to polymaps with exactly one output and (reversed) polymaps with exactly one input.
Example 2.21 There are polycategories Vect and FVect of vector spaces (resp. fi- nite dimensional vector spaces) and polylinear maps. Both of these can be seen

as the underlying polycategories of monoidal categories of vector spaces and linear maps. FVect is a representable polycategory with duals while Vect is representable but does not have duals in general. In fact the vector spaces that admit a dual are precisely the finite dimensional ones.
Example 2.22 Free polycategories give examples of polycategories which are not representable. Let a “poly-signature” Σ consist of a collection of types, together with for any finite lists of types Γ and Δ, a set of operations Σ(Γ; Δ). The free poly- category generated by Σ, denoted P(Σ), has types as objects, and polymaps given by planar oriented trees with a boundary of free edges, whose nodes are labelled by operations and whose edges are labelled by types subject to the constraints speci- fied by the signature. For example, here is a depiction of the composite polymap f ◦A (g ◦B f ): A, B, B → A, B in the free polycategory generated by the signature containing a pair of types A and B and a pair of operations f : A, B → B and g : B → A, A (in the diagram, the edges are implicitly oriented from left to right):
	A	
B  g
B	A  f
B
B
In general, composition is performed by grafting two trees along an edge, while the identity on a type A is given by the trivial tree with no nodes and one oriented edge labelled A. Observe this polycategory is not representable, for example there is no polymap A, A → A ⊗ A.
Example 2.23 A one-object multicategory is commonly referred to as an operad, while a one-object polycategory is also known as a dioperad [8]. For any poly- category P and any object A ∈ P there is a dioperad called the endomorphism dioperad of A, denoted EndP (A), defined as the full subpolycategory of P contain- ing only the object A. It has one object and its polymaps correspond to polymaps A, ..., A → A, ..., A in P.

Example of Banach spaces
In this example we focus on Banach spaces. Although the use of polycategories is new most of the results are standard. For conciseness we omitted most of the definitions and proofs here, although they are available in the extended version of the paper. The standard theory of Banach spaces can be found in [22]. We will only consider finite dimensional Banach spaces but this can be extended to the general case by replacing ∗-autonomous structures by linearly distributive ones. This allows us to skip the subtleties about completeness.
We fix a field K = R, C. FVect is the polycategory of finite dimensional K-vector spaces and K-polylinear maps, where a polylinear map A1, ..., Am → B1, ..., Bn corresponds to a linear map A1 ⊗ ... ⊗ Am → B1 ⊗ ... ⊗ Bn.
For a polylinear map f : A1, ..., Am → B1, ..., Bn and elements ai ∈ Ai and ϕj ∈
Bj we will write the scalar (ϕ1, ..., ϕn)f (a1, ..., am) := (ϕ1⊗...⊗ϕm)(f (a1⊗...⊗am)).

Continuous linear maps between Banach spaces correspond to bounded maps. This can be generalised to polylinear maps.
Definition 2.24 A polylinear map f : A1, ..., Am → B1, ..., Bn between normed vector spaces (Ai,  − Ai ) and (Bj,	− Bj ) is bounded if ∃K, ∀ai ∈ Ai, ∀ϕj ∈

B∗, |(ϕ1, ..., ϕn)f (a1, ..., am)|≤ K 
i,j
ai  Ai
ϕj  B∗ .

Proposition 2.25 A unary polymap f : A → B is bounded if it is bounded as a linear map.
The smaller such K defines a norm on f and f is contractive when its norm is smaller than 1.
Definition 2.26 A polylinear map f : A1, ..., Am → B1, ..., Bn between normed vector spaces (Ai,  − Ai ) and (Bj,	− Bj ) is contractive if ∀ai ∈ Ai, ∀ϕj ∈

B∗, (ϕ1, ..., ϕn)f (a1 ⊗ ... ⊗ am)|≤ 
i,j
ai  Ai
ϕj  B∗

Definition 2.27 There are polycategories:
Ban of Banach spaces and bounded polylinear maps
FBan of finite dimensional Banach spaces and bounded polylinear maps
Ban1 of Banach spaces and contractive polylinear maps
FBan1 of finite dimensional Banach spaces and contractive polylinear maps
For objects in any of those polycategories to be isomorphic they need to be isomorphic as vector spaces. (A,  − ) and (A,  − j) are isomorphic in Ban and FBan if ∃K, Kj, ∀a ∈ A, K  a  ≤ a j ≤ Kj  a  . Such norms are called equivalent. Two Banach spaces are isomorphic in Ban1 and FBan1 if their norms are equal. In particular, this means that FBan is not an interesting polycategory since all the norms on a given finite dimensional vector space are equivalent.
Proposition 2.28 FBan is equivalent to FVect.
On the other hand, FBan1 is a ∗-representable polycategory that does not come from a compact closed category. It is one of the examples of ∗-autonomous categories described in Barr’s original paper [1]. This is proved by using a characterisation of a ∗-autonomous category as a symmetric monoidal closed category where the canonical maps A → A∗∗ are isomorphisms. In particular, the induced norm for the par is never discussed. We did not find any reference in the literature linking it to the well-known injective norm in the theory of Banach spaces.
Definition 2.29 Let (A,  − A) and (B,  − B) be two Banach spaces. The projective norm A ⊗ B and the injective norm A  B are the norms defined on the vector space A ⊗ B by the following formulas:


 u  A⊗B :=	inf
ai⊗bi
 ai  A  bi  B	u  A`B :=	sup
ϕ  A∗ ,  ψ  B∗ ≤1
|(ϕ ⊗ ψ)(u)|

i

These norms are known to be extremal among the set of well-behaved norms that one can put on the tensor.
Definition 2.30 For Banach spaces (A,  − A) and (B, − B), a norm  − on A ⊗ B is a crossnorm if ∀a, b ∈ A × B,  a ⊗ b  ≤ a  A b  B and ∀ϕ, ψ ∈ A∗ ⊗ B∗, ϕ ⊗ ψ  j ≤ ϕ  A∗  ψ  B∗ with  − j the dual norm.
Remark 2.31 It is equivalent to ask for equalities in the definition. A proof can by found in [22].
Proposition 2.32 A norm is a crossnorm iff it makes A, B → A⊗B and A⊗B →
A, B contractive.
The injective and projective norms are crossnorms. The following property of the injective and projective crossnorm made us consider the injective crossnorm as a potential candidate for interpreting the par, and was one of our original motivations for studying the notion of bifibration of polycategories developed in Section 3.
Proposition 2.33 Let  − be a crossnorm then for any u ∈ A ⊗ B we have
 u  A`B ≤ u  ≤ A⊗B
Theorem 2.34 FBan1 is a ∗-representable polycategory with tensor, par and du- ality deﬁned above.
Remark 2.35 More than just a model of classical MLL, FBan1 is a model of classical MALL. The additive connectives are given by the vector space A⊕ B with
the norms  (a, b)  1 := Σ a  A + b  B and  (a, b)  ∞ := max(  a  A, b  B). These
i
norms are extremal among the p-norms.

Bifibrations of polycategories
In this section we introduce a notion of bifibration of polycategories, and prove that a polycategory is a representable polycategory with duals just in case it is bifibred over . We find it convenient to begin by adapting some terminological and notational conventions from the study of type refinement systems [20,21].

Deﬁnitions
Definition 3.1 A poly-reﬁnement system is defined as a (strict) functor of poly- categories p : E → B. Explicitly, p sends objects R ∈ E to objects p(R) ∈ B and polymaps ψ : R1, ..., Rm → S1, ..., Sn in E to polymaps p(f ) : p(R1), ..., p(Rm) → p(S1), ..., p(Sn) in B in such a way that identities and composition are preserved strictly. We write R и A (pronounced “R refines A”) to indicate that p(R) = A, and extend this to lists of objects in the obvious way, writing Π и Γ to indicate that Π = R1,..., Rn and Γ = A1,..., An for some R1 и A1,..., Rn и An. Finally, we write ψ :Π =⇒ Σ to indicate that ψ is a polymap Π → Σ in E such that p(ψ)= f ,
f
with the implied constraint that f :Γ → Δ where Π и Γ and Σ и Δ.

Remark 3.2 We will draw poly-refinement systems vertically. The top diagram will be in E and the bottom one in B with objects and polymaps directly above their image, e.g. preservation of composition is given by:
j
1

Π


j
2


j
1

Γ


j
2
Definition 3.3 Fix p : E → B a poly-refinement system and ψ : Π1, R, Π2 =⇒ Σ
g
a polymap in E with R и A. ψ is in-cartesian in R (relative to p), written ψ :

Π1, R, Π2 =⇒
g
Σ, if for any polymap ξ : Π1, Π, Π2 =⇒
g○Af
Σ1, Σ, Σ2, satisfying the

usual planarity condition that either Πi = ∅ or Σi = ∅ for each i = 1, 2, there exists
a unique polymap ψ\ξ :Π =⇒ Σ1, R, Σ2 such that ξ = ψ ◦R (ψ\ξ).
f
Dually, ϕ : Π =⇒ Σ1, S, Σ2, with S и B, is out-cartesian in S, written ϕ :
f

Π =⇒
f
Σ1, S, Σ2, if for any polymap ξ : Π1, Π, Π2 =⇒
g○Bf
Σ1, Σ, Σ2, satisfying the

planarity condition that either Πi = ∅ or Σi = ∅, there is a unique polymap ξ/ϕ :
Π1, S, Π2 =⇒ Σ such that ξ = (ξ/ϕ) ◦S ϕ.
g
Graphically, the definitions are summarised by the following diagram:
in-cartesian	out-cartesian


Π1	Σ1	Π1
E
Π	Σ	Π
Σ1
Σ	(†)

Π2	Σ2	Π2	Σ2

p


Γ1	Δ1	Γ1	Δ1

Γ	Δ	Γ	Δ
B
Γ2	Δ2	Γ2	Δ2
Proposition 3.4 In-cartesian polymaps compose, in the sense that if ϕ	:
Π1, R, Π2 =⇒ Σ1, S, Σ2 and ψ : Πj , S, Πj =⇒ Σj then ψ ◦S ϕ : Πj , Π1, R, Π2, Πj =⇒

g	1	2  f
1	2 g○Bf

Σ1, Σj, Σ2.	Similarly, out-cartesian maps compose in the sense that if ϕ :

Π =⇒ Σ1, S, Σ2 and ψ : Πj , S, Πj
=⇒ Σj , T, Σj
then ψ ◦S ϕ : Πj , Π, Πj  =⇒

g
Σ1, Σj , T, Σj , Σ2.
1	2	f	1	2
1	2 g○Bf

1	2
Definition 3.5 A poly-refinement system p : E → B is said to be a pull-ﬁbration if for any f : Γ1, A, Γ2 → Δ in B and any Π1 и Γ1, Π2 и Γ2, and Σ и Δ there is an object pull[f ](Π1  Π2; Σ) и A together with an in-cartesian polymap

Π1, pull[f ](Π1 Π2; Σ), Π2 =⇒
f
Σ. Dually, p is said to be a push-ﬁbration if for

any f : Γ → Δ1, B, Δ2 in B and any Π и Γ, Σ1 и Δ1, and Σ2 и Δ2 there
is an object push⟨f⟩(Π; Σ1  Σ2) и B together with an out-cartesian polymap Π =⇒ Σ1, push⟨f⟩(Π; Σ1  Σ2), Σ2. Finally, p is said to be a biﬁbration if it is both
f
a pull-fibration and a push-fibration.
Remark 3.6 When pulling along a map f : A → Δ with only one input, we will write pull[f ](Σ) as shorthand for pull[f ](; Σ). Similarly when pushing along a map f :Γ → A, we will write push⟨f⟩(Γ) for push⟨f⟩(Γ; ).

∗-autonomous categories as biﬁbrations of polycategories
Comparing the diagram (†) with diagram (∗), the following statements are self- evident.
Proposition 3.7 Let P be a polycategory. A polymap u :Γ → Δ1, A, Δ2 (resp. u : Γ1, A, Γ2 → Δ) is out-universal (resp. in-universal) in A iff it is out-cartesian (resp. in-cartesian) with respect to the unique functor P →  into the terminal polycategory.
Proposition 3.8 P is a ∗-representable polycategory iff P →  is a biﬁbration of polycategories.
We then derive the following as a corollary of Theorem 2.15 and Cockett and Seely’s connection between ∗-autonomous categories and representable polycate- gories with duals.
Theorem 3.9 There is an equivalence between planar ∗-autonomous categories and biﬁbrations over the terminal polycategory .
This correspondence may be extended in a straightforward way to the case of or- dinary (symmetric) ∗-autonomous categories by considering symmetric bifibrations, that is, symmetric poly-refinement systems (= functors of symmetric polycategories that strictly preserve identities, composition, and the symmetry actions) which are bifibrations in the above sense. We also expect that this result may be stated more precisely as an equivalence of 2-categories, but we leave this to future work.
One application of Theorem 3.9 is that it provides a way of decomposing a ∗-autonomous structure on a category, using elementary facts about cartesian polymaps.

Proposition 3.10 For p : P → E and q : E → B poly-reﬁnement systems and
ψ : Π1, R, Π2 =⇒ Σ a polymap in P, if ψ is p-in-cartesian in R и A and g is
g
q-in-cartesian in A и X then ψ is q ◦ p-in-cartesian in R и X.
Remark 3.11 Similarly, a p-out-cartesian polymap over a q-out-cartesian polymap is (q ◦ p)-out-cartesian.
Proposition 3.12 Let p : E → B be a poly-reﬁnement system, and suppose that B is ∗-representable. If E has all in-cartesian liftings of in-universal polymaps and all out-cartesian liftings of out-universal polymaps then E is a ∗-representable polycat- egory.
Proof. By Propositions 3.7 and 3.10.	2

Additional examples

Example 3.13 Let E and B be ordinary categories considered as degenerate poly- categories with only unary co-unary maps (i.e., polymaps of arity and co-arity 1), and let p : E → B be an ordinary (strict) functor. Then p is a pull-fibration, push-fibration or bifibration just in case it is an ordinary (Grothendieck) fibration, opfibration or bifibration. Similarly, if E and B are multicategories considered as polycategories with only co-unary maps, then p is a push-fibration just in case it is a covariant fibration of multicategories in the sense of Hermida [11], and more generally the polycategorical notions of pullback and pushforward coincide with the multicategorical ones described in [12,18].
Example 3.14 The forgetful functor Cat∗ → Cat from the category of pointed (small) categories to the category of (small) categories is an opfibration of 2- categories. The pushforward of (A, A) along F : A → B is (B,F (A)). Similarly the forgetful functor Adj∗ → Adj of pointed adjunctions is a bifibration of 2- categories. Here a pointed adjunction between pointed categories (A, A) and (B, B) consist of an adjunction F E G : A → B and a morphism f : F (A) → B in B - or equivalently of a morphism g : A → G(B) in A. The pushforward is given by the image by F while the pullback is given by the image of G. While working on the polycategorical Grothendieck correspondences we will define the 2-polycategory of multivariable adjunction MAdj. It also has a pointed variant MAdj∗. The forgetful functor induced is a bifibration of 2-polycategories.

Forgetful functor from Banach spaces
We will use proposition 3.10 to derive the ∗-representability of the polycategory FBan1 defined in 2.5. In order to do that we consider the forgetful functor FBan1 → FVect. We want to characterise the polymaps that admit cartesian liftings. Due to lack of space, the proofs will be omitted from this version of the paper.

Definition 3.15 Given f : A1, ..., Am → B1, ..., Bn and norms  − Ai ,	− Bj
for all i /= k and all j, we define a function  − f : Ak → K by	x  f :=

sup
ai,ϕj /=0
|(ϕ1,...,ϕn)f (a1,...,x,...,am)|
ai Ai ϕj B∗
i/=k,j	j

Proposition 3.16  − f is a pseudonorm on Ak.
We want to characterise the polymaps for which this is a norm.
Definition 3.17 f is injective in Ak - or Ak-injective - if (∀ai, f (a1, ..., x, ..., am)= 
0) ⇒ x =0 
Definition 3.18 The	Ak-kernel	of	f	is	the	set	KerAk (f )	:=	{x	∈
Ak | f (a1, ..., x, ..., am)=0 ∀ai}.
The Ak-kernel of f forms a vector space. f is Ak-injective if its Ak-kernel is triv- ial. Furthermore we have that KerAk (f )= {x ∈ Ak | (ϕ1, ..., ϕn)f (a1, ..., x, ..., am)= 0 ∀ai∀ϕj} by linearity of  ϕj.
j
Remark 3.19 A polylinear map f : A → B is A-injective if it is injective as a linear map.
Proposition 3.20 For f,  −Ai and  −Bj ,  −f is a norm iff f is Ak-injective.
It is worth noticing that this only depends on f and not on any properties of the norms.
Proposition 3.21 For f Ak-injective and norms  −  Ai ,  −  Bj , the norm  −  f
makes f contractive.
This norm defines a pullback in Ban1, FBan1.
Proposition 3.22 Given a B-injective polylinear map g : Γj , A, Γj → Δj with lists
1	2

Γj = Aj
, ..., Aj
′ and Δj = Bj , ..., Bj
we ﬁx families of norms  −  Γ′ =(  −  A′ )

i	i,1
i,mi
1	n	i
i,j

and  −  j  =(         −  B′ ). Then the pullback is given by pull[g]((Γj ,  −  Γ′  )  (Γj ,  − 
Δ	i	1	1	2
 Γ′ ); (Δ, − Δ)) = (A,  − g).
So we have in-cartesian liftings of any polylinear map that is injective in the input considered. The injectivity condition is only needed for − f to be a norm, otherwise it is still a seminorm, i.e., x  f ≥ 0 for all x and 0 f = 0, but x  f =0 does not imply x = 0.

Corollary 3.23 There is a polycategory FBanps
of ﬁnite dimensional complete

seminormed vector spaces and contractive polylinear maps that comes with a forget- ful functor that is pull-ﬁbred.
Now we want to determine which polylinear maps have out-cartesian liftings.
Definition 3.24 For f :Γ → Δ1, A, Δ2 and families of norms  −Γ, −Δ1 , −Δ2 ,
we define a function  −  f : Bk → K¯ where K¯ is the completion of K, i.e., we add a

point at infinity. It is given by y f :=

y=Σ
i
inf	Σ
( ϕ 1,i,idA, ϕ 2,i)f ( a i) i
 −→ϕ 1,i  −→ϕ 2,i  −→a i 

where the sum is over all the decompositions of y.

Proposition 3.25	− f is an extended norm, i.e., a norm with value in K¯ .

Definition 3.26 f :Γ → Δ1, A, Δ2 is A-surjective if ∀y ∈ A, ∃−→ϕ

1,i
, −→ϕ 2,i, −→a
i, y =

Σ(−→ϕ
i

1,i
, idA
, −→ϕ

2,i
)f (−→a
i).

Σ −→

−→	−→

The A-image of f is the set ImA(f ) := {
i
( ϕ 1,i, idA, ϕ 2,i)f ( a i)}.

Proposition 3.27 ImA(f ) forms a vector space. f is A-surjective iff ImA(f )= A.
Remark 3.28 A linear map is B-surjective iff it is surjective. Indeed if for y ∈ B
there are xi such that y = Σ f (xi) then by linearity y = f (Σ xi).
i	i
Proposition 3.29 For f and families of norms  − Γ,  − Δ ,  − Δ ,  − f is a norm iff f is A-surjective.
Proposition 3.30 For f A-surjective and families of norms as usual,  −f makes
f contractive.
This norm defines a pushforward on Ban1, FBan1.
Proposition 3.31 For f : Γ → Δ1, A, Δ2 a A-surjective polylinear map and the usual families of norms, we get the pushforward push⟨f⟩(Γ; Δ1  Δ2)= (A,  −  f ).
So we can take the out-cartesian lifting of any polymap that is surjective in the considered output.
Corollary 3.32 There are polycategories FBanex and FBanex,ps of f.d. extended
1	1
normed/seminormed vector spaces and polylinear maps with forgetful functors that
are push-ﬁbred and biﬁbred respectively.
When considering FBan1 even without semi-/extended norms, there are still enough cartesian polymaps to lift the ∗-representability of FVect.
Proposition 3.33 In FVect, the universal polylinear maps mA,B : A, B → A⊗B, wA,B : A ⊗ B → A, B and rcapA : A∗,A →· are A ⊗ B-surjective, A ⊗ B-injective and A∗-injective.
Corollary 3.34 FBan1 is ∗-representable.
Remark 3.35 We get the projective, injective and dual norm using the norms above:  −  A⊗B =  −  m ,  −  A`B =  −  wA,B and  −  A∗ =  −  rcapA . The fact that the projective and injective crossnorms are extremal follows directly from the factorisation properties of the cartesian polymaps mA,B and wA,B.

Frobenius monoids

Definition 3.36 In a polycategory P a Frobenius monoid is an object A equipped with a unique polymap (m, n)A : Am → An for each m, n ∈ N such that (1, 1)A = idA and these polymaps are stable under composition.
Proposition 3.37 Equivalently a Frobenius monoid in P is a functor F :  → P.



Proof. The Frobenius monoid corresponds to F (∗) and the polymaps (m, n)F (∗) to
F ((m, n)). The properties needed on the polymaps are exactly functoriality of F .2
Remark 3.38 For P representable with ⊗ = , this reduces to the unbiased defi- nition of a Frobenius monoid in a monoidal category.
Definition 3.39 Given a poly-refinement system p : E → B and a Frobenius monoid A in B the polyﬁber of p over A, noted p—1(A) is the subcategory of E whose objects and polymaps are sent by p to A and the (m, n)A.
Proposition 3.40 p—1(A) is equivalent to the following pullback:


p—1(A)  E
τ
!	p


where A :  →B is the functor associated to the object


 B
A
A.
Proposition 3.41 Given a poly-reﬁnement system p : E → B and a functor s :
Bj → B, let E ×5 Bj be the pullback.
S ×5 Bj  E
τ
π2	p


Bj	s	B
For a polymap f : Γ1, A, Γ2 → Δ in Bj and lists of objects Π1, Π2, Σ in E ×5 Bj
lying over Γ1, Γ2 and Δ, if there is a pullback pulls(A)(π1(Π1)|π1(Π2); π1(Σ)) in E
then there is a pullback pullA(Π1|Π2; Σ) in E ×5 Bj.
Proof. E ×5 Bj is the polycategory whose objects are pairs of objects (E, Bj) of E and B such that p(E) = s(Bj) and whose polymaps are pairs of polymaps (f, bj) such that p(f )= s(bj).
Given a polymap f  :  Γ1, A, Γ2  →  Δ in Bj and lists of objects (Π1, Γ1), (Π2, Γ2), (Σ, Δ) in E ×5 Bj from a pullback pulls(A)(Π1|Π2; Σ) in E
with in-cartesian polymap ϕ : Π1, pulls(A)(Π1|Π2; Σ), Π2 → Σ we get a pull- back pullA((Π1, Γ1)|(Π2, Γ2); (Σ, Δ)) := (pulls(A)(Π1|Π2; Σ), A) with in-cartesian

f
polymap (ϕ, f ).
s(f )

2

Remark 3.42 Similarly if the pushforward exists in E it exists in E ×5 Bj.
Corollary 3.43 Given a poly-reﬁnement system p : E → B and a Frobenius monoid (A,{(m, n)A}) in B if all in-cartesian and out-cartesian polymaps of (m, n)A exist then p—1(A) is ∗-representable.

Grothendieck correspondences
We should emphasise that the results in this section, and in particular the poly- categorical Grothendieck correspondences, are conditioned on having a theory of weak 2-polycategories. To the extent of our knowledge such a theory has not been carefully worked out yet. We leave it as future work to craft this theory. Meanwhile we will describe the properties we assume to hold for weak 2-polycategories after recalling the usual notion of categorical Grothendieck correspondences.
Categorical Grothendieck correspondences
By “Grothendieck correspondence”, we refer to the equivalence between fibrations and indexed categories, as well as a range of several other similar correspondences (the first was originally described by B´enabou [3]):
Functor S → ¥ →→ lax normal functor ¥op → Dist
Fibration S → ¥ →→ pseudofunctor ¥op → Cat
Opfibration S → ¥ →→ pseudofunctor ¥op → Catop (or equivalently ¥→ Cat)
Bifibration S → ¥ →→ pseudofunctor ¥op → Adj
Here Dist is the bicategory whose objects are small categories and 1-cells A —→' B are distributors, i.e., functors A × Bop → Set, with 2-cells given by natural transformations. While Cat (respectively Adj) is the (strict) 2-category whose objects are small categories, 1-cells are functors (resp. adjunctions), and 2-cells are natural transformations. Notice that Cat, Catop and Adj are all subbicategories

of Dist corresponding to distributors A —→'
in both, respectively.
B that are representable in A, in B, and

Polycategorical Grothendieck correspondences
We want to extend the previous correspondences to polycategories as follows:
Poly-refinement system S → ¥ →→ lax normal functor ¥op → Dist
Bifibration S → ¥ →→ Pseudofunctor ¥op → MAdj
where Dist is the weak 2-polycategory of sets and multivariable distributors and MAdj is the weak 2-polycategory of sets and multivariable adjunctions. Like in the categorical case, MAdj is a sub-2-polycategory of Dist consisting of distributors that are representable in each of their variables. It is worth noting that for us (0, 0)- adjunctions will be sets, in contrast to the original definition in [24] where they are taken to be trivial. Shulman discusses both possibilities, but chooses the latter to turn MAdj into a strict 2-polycategory, whereas the former fits more naturally in our framework at the price of MAdj being a weak 2-polycategory.
About 2-polycategories
As stated above, to express these correspondences we need some theory of weak 2-polycategory, where by 2-polycategory we mean that the 1-cells can have multiple

inputs and outputs but not the 2-cells. In this paper we only assume that there are weak 2-polycategories Dist and MAdj and that lax functors and pseudofunctors behave in the expected way. More generally we suspect that weak 2-polycategories and ∗-autonomous bicategories will be connected in a way such that the results of this paper can be relaxed to this setting. In particular, any compact closed bicategory – as defined by Mike Stay in [25] – should be a ∗-autonomous bicategory, and by extension a weak 2-polycategory. This would entail that Dist is weak 2- polycategory.
Distributors and multivariable adjunctions
In this section we introduce the weak 2-polycategories Dist and MAdj. We prove that a multivariable adjunction can be understood as a representable distributor.
Definition 4.1 Dist is the weak 2-polycategory that has as objects categories, that has as polymaps f : A1, ..., Am → B1, ..., Bn distributors f : A1 × ... × Am —→' B1 × ... × Bn and that has as 2-cells natural transformations.
Definition 4.2 Given categories A1, ..., Am, B1, ..., Bn,a (m, n)-adjunction or mul- tivariable adjunction (Fl)1≤l≤n E (Gk)1≤k≤m : A1, ..., Am → B1, ..., Bn consists of the following data:
functors Fl :  Ai ×  Bop → Bl for each l
i	j/=l
functors Gk :   Aop ×  Bj → Ak for each k
i/=k	j
natural	isomorphisms	Bl(Fl(a1, ..., am, b1, ..., bn), bl)	 
Ak(ak, Gk(a1, ..., am, b1, ..., bn)) for any k, l
Example 4.3 A (1,1)-adjunction between A, B is a pair of functor F : A → B and
G : B → A such that B(F (a), b)= A(a, G(b)). It is just a usual adjunction.
Example 4.4 Let (C, ⊗,I) be a biclosed monoidal category. By definition (A⊗ —) has a right adjoint A  — and (—⊗ B) has a right adjoint — › B. We get three functors ⊗ : C × C → C,  : Cop ×C → C and ›: Cop ×C → C such that C(A ⊗ B, C)  C(B, A   C)  A, C › ¥, i.e. a (2, 1)-adjunction (⊗) E (  , ›).
Proposition 4.5 A (m, n)-adjunction (Fl)1≤l≤n E (Gk)1≤k≤m : A1, ..., Am →

B1, ..., Bn is the same thing as a distributor P : A1 × ... × Am
that is representable in each of its variables.
—→'
B1 × ... × Bn

Proof. From any of the Fl we can define a distributor Pl : A1 × ... × Am —→'
B1 × ... × Bn representable in Bl by Pl(—, —) := Bl(Fl(—), —). Similarly we can get distributors representable in Ak from the functors Gk by Pk(—, —) := Ak(—, Gk(—)). But all of these distributors are naturally isomorphic by definition of a multivariable adjunction.
Conversely given a distributor P : A1 × ... × Am —→'  B1 × ... × Bn, representabil-
ity in the Ak and Bl produce functors Gk with natural isomorphisms P (—, —) 
Ak(—, Gk(—)) and functors Fl with natural isomorphisms P (—, —)  Bl(Fl(—), —).2

Fibres of a poly-reﬁnement system and distributors between them
In the following we fix a poly-refinement system p : S → ¥. We define a lax normal functor ∂p : ¥op → Dist by considering the fibres of p like in the categorical case. We will use the convention that for any Γ = A1, ..., An, p—1(Γ) := p—1(A1) × ... × p—1(Am). ∂p assigns to each object its fibre ∂p(B) := p—1(B)= {S ∈S | p(S)= B}. To a polymap f : Δ → Γ in ¥op, that we will equivalently consider as a polymap f : Γ → Δ in ¥, is assigned a distributor between the fibres ∂p(f ) : p—1(Δ) × p—1(Γ)op → Set. This distributor consists of the set of polymaps lying over f acted on by pre- and post-composition. More precisely, given lists of objects in the fibres Π= (R1, ..., Rm) и Γ= (A1, ..., Am), Σ= (S1, ..., Sn) и Δ= (B1, ..., Bn) we define
the action of the distributor ∂p(f ) on these objects by ∂p(f )(Σ, Π) := {ϕ : Π →

Σ | p(ϕ)= f}
—→	j
⇒ R )

. And given lists of polymaps in the fibre ψ = (ψi : Ri =
i 1≤i≤m

—→	—→ —→	—→
—→	idAi

and
ξ = (ξj : Sj =⇒ Sj )1≤j≤n we get ∂p(f )( ξ , ψ ) :=
ξ ◦—◦ ψ .

j
idBj
This can be represented graphically.

It can be noted that the polymaps in the fibre have one-object domain and codomain. This is because all the polymaps in the fibre lies over the identity polymap in the base.
This is summarized in the following definition.
Definition 4.6 For a poly-refinement system p : S → ¥ we define the lax normal functor ∂p : ¥op → Dist by:
For any B ∈ ¥, ∂p(B) := {S ∈S | p(S)= B}
For any f :Γ → Δ in ¥, ∂p(f ): p—1(Δ) —→' p—1(Γ) defined by:
· For any Π и Γ, Σ и Δ, ∂p(f )(Σ, Π) := {ϕ :Π → Σ | p(ϕ)= f}

·	—→	j
—→	j

For any
ψ  = (ψi : Ri  =⇒
idAi
Ri)1≤i≤m  and
ξ  = (ξj : Sj =⇒
idBj
Sj )1≤j≤n,

—→ —→	—→	—→
∂p(f )( ξ , ψ )= ξ ◦—◦ ψ
The proof that this defines a lax normal functor is similar to the categorical one with some extra bookkeeping because of the presence of contexts of inputs and outputs.
Now suppose that p is a bifibration and consider a polymap f : Γ1, A, Γ2 → Δ. We define a functor pull[f ]A : p—1(Δ)×p—1(Γ1)op ×p—1(Γ2)op → p—1(A) by sending

—→ —→
any Σ и Δ, Πi и Γi to pull[f ](Π1  Π2; Σ). From lists of polymaps ψ1, ψ2 and
—→
ξ we

get a polymap pull[f ](Π1  Π2; Σ) → pull[f ](Πj Πj ; Σj) by using the factorisation
property of pull[f ](Πj  Πj ; Σj). It is represented in Figure 1 where the two big
blank boxes are the in-cartesian polymaps associated to the pullbacks.

pull[f ](Πj Πj ;Σj)





pull[f ](Π1
j
1

Π2;Σ)
j
2


Σj pull[f ](Π1
j	S
1

Π2;Σ)	Σj

j
2



=	p




Γ1	Γ1

A	Δ	A	Δ

Γ2	Γ2
¥


Fig. 1. Polymap pull[f ](Π1 Π2; Σ) → pull[f ](Π′  Π′ ; Σ′)
By the universal property of the pullback we can link ∂p(f ) and pull[f ]A in the following way.
∂p(f )(Σ, Π1, —, Π2)= {ϕ : Π1, —, Π2 → Σ | p(ϕ)= f}
= {ψ : —→ pull[f ](Π1  Π2; Σ) | p(ψ)= idA}
= Homp−1(A)(—, pull[f ]A(Σ, Π1, Π2))
This makes ∂p(f ) representable in A. Since by definition of a bifibration we get such a pull-functor for each of the inputs of f and some similar push-functors for the outputs this makes ∂p(f ) a multivariable adjunction. Since it is true for any polymap f in ¥op we get that ∂p factors through MAdj. Finally the fact that cartesian polymaps compose makes ∂p : ¥op → MAdj a pseudofunctor.
Polycategorical Grothendieck-B´enabou construction
Conversely, given a lax normal functor F : ¥op → Dist we construct its polycategory of elements ∫ F .
Definition 4.7 The polycategory of elements ∫ F has:
for objects, pairs (A, R) with A ∈¥ and R ∈ F (A)
for polymaps (f, ϕ): (Γ, Π) → (Δ, Σ), pairs of a polymap f :Γ → Δ in ¥ and an element ϕ ∈ F (f )(Σ, Π)
for identities (idA, idR)
for composition (g, ψ) ◦(A,R) (f, ϕ)= (g ◦A f, μ((˜ϕ, ψ))) where:
· (˜ϕ, ψ) ∈ (F (g) ◦F (A) F (f ))(Σ1, Σj, Σ2, Πj , Π, Πj ) is the canonical element in-
1	2
duced by the elements ϕ ∈ F (f )(Σ1, R, Σ2, Π) and ψ ∈ F (g)(Σj, Πj , R, Πj )
1	2
· μ : F (g) ◦F (A) F (f ) ⇒ F (g ◦A f ) is the natural transformation giving lax
functoriality of F

The fact that this is a polycategory follows from the coherence laws of F . Fur- thermore it can be proven that these constructions are inverse to each other using the same arguments as for the categorical constructions.
Frobenius pseudomonoids and Classical Linear Logic
Like in Section 3.5 there are different ways to define a Frobenius pseudomonoid. The most convenient in our case will be to think of those as (the image of) a pseudofunctor out of .
Definition 4.8 A Frobenius pseudomonoid in a 2-polycategory C is a pseudofunc- tor F :  → C.
Using the polycategorical Grothendieck correspondence we recover the result re- cently announced by Shulman that Frobenius pseudomonoids in MAdj are equiv- alent to ∗-autonomous categories.
Theorem 4.9 (Shulman [23]) There is a correspondence between Frobenius pseudomonoid and ∗-autonomous categories.
Proof. Using the polycategorical Grothendieck correspondence, pseudofunctors
 → MAdj correspond to bifibrations p : S → . Then using theorem 3.9 these correspond to representable ∗-polycategories.	2
Remark 4.10 Given a Frobenius monoid (A, (m, n)A) in ¥ and∫ a lax normal func-

in section 3.5 is given by the image of A (and the polymaps (m, n)A) by F . If F
is pseudo on these polymaps this forms a Frobenius pseudomonoid in Dist. When the images of these polymaps are representable in all their variables this factors through MAdj giving a ∗-representable polycategory. This is the another way of understanding the result 3.43.
Conclusion and Further work
In this article we developed some of the theory of bifibred polycategories and pro- vided examples of applications.
We started by recasting the notion of representable polycategory with duals as the equivalent notion of ∗-representable polycategory, in a way that made it clear that it is a special kind of bifibred polycategory. We then explored examples of how this connection can be used to lift the connectives ⊗,  and (—)∗ from the codomain to the domain of a functor of polycategories if this functor has good fibrational properties. Since ∗-representable polycategories are equivalent to ∗-autonomous categories this helped us to analyse some models of classical MLL from a new perspective.
In the example of Banach spaces the base polycategory is induced by a compact closed category. Compact closed categories are known to provide good models for many different kinds of systems and processes, and have a simple graphical

language of string diagrams. In future work we would like to explore in more detail examples of this sort. It would be interesting to study functors p : S → ¥ where ¥ is the underlying polycategory of a compact closed category modelling systems and processes while S is the underlying polycategory of a ∗-autonomous category modelling properties of those systems and processes. An example that is closely related is the work on causal structures developed in [14]. In this paper the authors construct a ∗-autonomous category of systems and causal processes out of any compact closed category of systems and processes with some specific discard maps. The ∗-autonomous structure of the causal category can be lifted along the forgetful functor in the same way as we have done for Banach spaces. In fact these are instances of a generic construction that assigns to any compact closed category a ∗-representable polycategory whose objects consist of objects of the original category together with a set of states (or global elements) with some closure condition. In the case of causal structures, the set corresponds to the causal states while in the case of the Banach spaces it corresponds to the (sub)normalised states, i.e., to the unit sphere (or ball). We can think of these sets as expressing some properties about the systems by specifying the states that satisfy it.
Multicategories are highly asymmetrical in their treatment of inputs and out- puts. Polycategories restore this symmetry, which makes them an elegant object of study, but also a somewhat more complex object and more difficult to find in nature. Just as a ∗-autonomous category can be decomposed into a pair of monoidal categories related by a monoidal duality, we believe it is worth trying to decompose the notion of bifibration of polycategories into a pair of fibrations of multicategories related by duality. Such an analysis would likely be in the spirit of Cockett and Seely’s polarized polycategories [7] and Melli`es’ chiralities [19], and perhaps related to the notion of biﬁbration chirality introduced in [21].

Acknowledgements
We thank the anonymous MFPS reviewers, as well as Mike Shulman for several very helpful comments made during the online edition of MFPS 2020.

References
Barr, M., “*-Autonomous Categories,” Springer-Verlag, Berlin, Heidelberg, 1979.
Barr, M., *-autonomous categories and linear logic, MSCS 1 (1991), pp. 159–178.
B´enabou, J., Distributors at work (2000), notes from a course at TU Darmstadt in June 2000, taken by Thomas Streicher.
Blute, R. F., J. R. B. Cockett, R. A. G. Seely and T. H. Trimble, Natural deduction and coherence for weakly distributive categories, JPAA 113 (1996), pp. 229–296.
Blute, R. F., P. Panangaden and R. Seely, Fock space: A model of linear exponential types (1994), revised version of MFPS 1993 paper, “Holomorphic models of exponential types in linear logic”.
Cockett, J. and R. Seely, Weakly distributive categories, JPAA 114 (1997), pp. 133–173.
Cockett, J. R. B. and R. A. G. Seely, Polarized category theory, modules, and game semantics, TAC
18 (2007), pp. 4–101.

Gan, W. L., Koszul duality for dioperads, Math. Res. Lett 10 (2003), pp. 109–124.
Girard, J.-Y., Linear logic, TCS 50 (1987), pp. 1–102.
Hermida, C., Representable multicategories, Adv. Math. 151 (2000), pp. 164–225.
Hermida, C., Fibrations for abstract multicategories, in: G. Janelidze, B. Pareigis and W. Tholen, editors, Galois Theory, Hopf Algebras, and Semiabelian Categories, Fields Institute Communications 43 (2004).
H¨ormann, F., Fibered multiderivators and (co)homological descent, TAC 32 (2017), pp. 1258–1362.
Hyland, J. M. E., Proof theory in the abstract, APAL 114 (2002), pp. 43–78.
Kissinger, A. and S. Uijlen, A categorical semantics for causal structure, in: Proceedings of the 32nd Annual ACM/IEEE Symposium on Logic in Computer Science (LICS 2017) (2017), pp. 1–12.
URL https://doi.org/10.1109/LICS.2017.8005095
Lambek, J., The mathematics of sentence structure, The American Mathematical Monthly 65 (1958),
pp. 154–170.
Lambek, J., On the calculus of syntactic types, in: R. Jakobson, editor, Structure of Language and its Mathematical Aspects, Proceedings of Symposia in Applied Mathematics, XII (1961), pp. 166–178.
Lambek, J., Deductive systems and categories II: Standard constructions and closed categories, in:
P. Hilton, editor, Category Theory, Homology Theory and their Applications, I, LNM 86, Springer, 1969 pp. 76–122.
Licata, D. R., M. Shulman and M. Riley, A fibrational framework for substructural and modal logics, in: 2nd International Conference on Formal Structures for Computation and Deduction (FSCD 2017), 2017, pp. 25:1–25:22.
Melli`es, P.-A., Dialogue categories and chiralities, Publications of the Research Institute for Mathematical Sciences 52 (2016).
Melli`es, P.-A. and N. Zeilberger, Functors are type refinement systems, in: Proceedings of the 42nd ACM SIGPLAN-SIGACT Symposium on Principles of Programming (POPL 2015), 2015, pp. 3–16.
Melli`es, P.-A. and N. Zeilberger, A bifibrational reconstruction of Lawvere’s presheaf hyperdoctrine, in:
Proceedings of the 31st Annual IEEE Conference on Logic in Computer Science (LICS 2016), 2016,
pp. 555–564.
Ryan, R., “Introduction to Tensor Products of Banach Spaces,” Springer Monographs in Mathematics, Springer London, 2002.
URL https://books.google.fr/books?id=7xRlVTVSNpQC

Shulman, M., ∗-autonomous categories are Frobenius pseudomonoids (2019), referenced in [24]. See also n-Category Caf´e blog post (Nov. 17, 2017), “Star-autonomous Categories are Pseudo Frobenius Algebras”. In preparation.
Shulman, M., The 2-Chu-Dialectica construction and the polycategory of multivariable adjunctions, TAC 35 (2020), pp. 89–136.
Stay, M., Compact Closed Bicategories, TAC 31 (2016), pp. 755–798.
Szabo, M., Polycategories, Communications in Algebra 3 (1975), pp. 663–689.
