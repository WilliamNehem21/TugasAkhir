Electronic Notes in Theoretical Computer Science 202 (2008) 49–57	
www.elsevier.com/locate/entcs

Boundedness of the Domain of Definition is Undecidable for Polynomial ODEs
Daniel S. Grac¸a 1,2
DM/FCT, University of Algarve, Faro, Portugal and SQIG/IT Lisbon, Portugal
Jorge Buescu1,3
DM/FCUL, University of Lisbon, Portugal and CAMGSD, Lisbon, Portugal
Manuel L. Campagnolo1,4
DM/ISA, Technical University of Lisbon, Portugal and SQIG/IT Lisbon, Portugal

Abstract
Consider the initial-value problem with computable parameters

dx dt
x(t0)= x0,

where p : Rn+1 → Rn is a vector of polynomials and (t0, x0) ∈ Rn+1. We show that the problem of determining whether the maximal interval of definition of this initial-value problem is bounded or not is in general undecidable.
Keywords: Ordinary differential equations, initial-value problems, maximal interval, decidability


1 The authors wish to thank Ning Zhong for useful discussions. DG and MC were partially supported by Fundac¸a˜o para a Ciˆencia e a Tecnologia and EU FEDER POCTI/POCI via CLC, SQIG - IT and grant SFRH/BD/17436 /2004 (DG). Additional support to DG was also provided by the Fundac¸a˜o Calouste Gulbenkian through the Programa Gulbenkian de Est´ımulo a` Investigac¸a˜o. JB acknowledges partial support by CAMGSD through FCT and POCI/FEDER.
2 Email: dgraca@ualg.pt
3 Email: jbuescu@math.ist.utl.pt
4 Email: mlc@math.isa.utl.pt

1571-0661 © 2008 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2008.03.007

Introduction
Differential equations are a powerful tool to model natural phenomena. Their use is transversal to many fields and applications can be found ranging from fields like physics or chemistry up to biology or economics. Among these, much attention is devoted to analytic ordinary differential equations (ODEs) that yield initial-value problems

⎧⎨ x' = f (t, x)
⎩ x(t0) = x0

(1)

where f : Rn+1 → Rn is an analytic function. In practical applications, like Lorenz equations in meteorology or Lotka-Volterra equations for predator-prey system [13], this IVP often reduces to an IVP of the type
⎧⎨ x' = p(t, x)

⎩ x(t0) = x0
(2)


where p is a vector of polynomials. Indeed, it can be shown (see Theorem 3.3) that if each component of f in (1) can be written as the composition of many of the standard function of analysis like polynomials, sin, ex, etc. (in analytical terms, as an element of the elementary function field), then (1) can be written as an equivalent system of the type (2) of suitably larger degree.
It is well known from the basic existence-uniqueness theory of ODEs [6], [18] that if f is analytic, then the IVP (1) has a unique solution x(t) defined on a maximal interval of existence I = (α, β) ⊂ R that is analytic on I [2]. Actually, f only needs to be continuous and locally Lipschitz in the second argument so that this maximal interval exists. The interval is maximal in the sense that either α = −∞ or x(t) is
unbounded as t → α+ (similar conditions apply to β).
A question of interest is the following: is it possible to design an automated method that, on input (f, t0, x0), gives as output the maximal interval of existence for the solution of (1)? In computability theory, e.g. [26], [14], it is well known that some problems cannot be answered by the use of an algorithm (more precisely, by the use of a Turing machine). Such problems are labeled undecidable and many examples are known. The most prominent undecidable problem is the Halting Problem: given a universal Turing machine and some input to it, decide whether the machine eventually halts or not. To address this kind of questions for IVPs, we have to resort to notions of computability over the reals. In particular, we use the computable analysis approach [22], [15], [27]. The idea underlying this theory is to compute an approximation of the output with arbitrary precision from a suitable approximation of the input. More details can be found in Section 2. Using that approach, it was shown in [7] that given an analytic IVP (1), defined with computable data, its corresponding maximal interval may be noncomputable.
Noncomputability results related to initial-value problems of differential equa- tions are not new.  For example, Pour-El and Richards [20] showed that if we

relax the condition of analyticity in the IVP (1) defined with computable data, it can have noncomputable solutions. In [21], [23] it is shown that there is a three- dimensional wave equation, defined with computable data, such that the unique solution is nowhere computable. However, in these examples, noncomputability is not “genuine” in the sense that the problems under study are ill-posed: either the solution is not unique or it is unstable [28]. In other words, ill-posedness was at the origin of noncomputability in those examples. In contrast, an analytic IVP (1) is classically well-posed and, consequently, the noncomputability results do not seem to reflect computational and well-posedness deficiencies inherited by the problems. Motivated by the noncomputability result obtained in [7], this latter paper also addresses the following problem: while it is not possible to compute the maximal interval of (1) is it possible to compute some partial information about it?  In
particular, is it possible to decide if this maximal interval is bounded or not?
This question has interest on its own for the following reason. In many problems, we implicitly assume that t is defined for “all time”. For example, if one wants to compute things like sinks or limit cycles associated with ODEs, this only makes sense if the solution of the ODE is defined for all times t > t0. This is also implicitly assumed in problems like reachability [1], [3], [12], [5], [4], etc. For this reason, those problems only make sense when associated with ODEs for which the maximal interval is unbounded. So, it would be interesting to know which are the “maximal” classes of functions f for which the boundedness problem is decidable.
In [7], it was shown that for the general class of analytic functions, the bound- edness problem of the maximal interval is undecidable. Here we build on previous work on simulation of Turing machines with polynomial differential equations [9],
[10] to strengthen that result and conclude that the boundedness problem is still un- decidable for the class of polynomial functions of degree 56. Since the boundedness problem is decidable for linear differential functions this means that the boundary between decidability/undecidability lies in the class of polynomials of degree n, for some 2 ≤ n ≤ 56. Some results in this paper follow from the constructive proofs in [9], [10] but their derivation is just sketched or even omitted.
Preliminaries
Let us recall some results from the theory of ODEs. In particular, we review the notion of maximal interval for ODEs.
Definition 2.1 Let E ⊆ Rl be an open set. A function f : E → Rn is called locally Lipschitz on E if for every compact set Λ ⊆ E there is a constant KΛ ≥ 0 such that
 f (x) − f (y)  ≤ KΛ  x − y  ,	for all x, y ∈ Λ.
Here we deal with the case where E ⊆ Rn+1. Hence, when considering a function f : E → Rn with argument (t, x), we refer to t ∈ R as the first argument and x ∈ Rn as the second argument of f .
Definition 2.2 Let E ⊆ Rn+1 be an open set. A function f : E → Rn is called

locally Lipschitz in the second argument, on E, if for every compact set Λ ⊆ E
there is a constant KΛ ≥ 0 such that
 f (t, x) − f (t, y)  ≤ KΛ  x − y  ,	for all (t, x), (t, y) ∈ Λ.
The following classical lemma [11] asserts that C1 functions are locally Lipschitz, and hence locally Lipschitz in the second argument.
Lemma 2.3 If f : E → Rn is of class C1 over E ⊆ Rl, then f is locally Lipschitz on E.
The following result introduces the notion of maximal interval for ODEs and follows as an immediate consequence of the fundamental existence-uniqueness the- ory for the initial-value problem (1), where the analyticity condition is dropped for f [6], [18], [11]
Proposition 2.4 Let E be an open subset of Rn+1 and assume that f : E → Rn is continuous on E and locally Lipschitz in the second argument. Then for each (t0, x0) ∈ E, the problem (1) has a unique solution x(t) deﬁned on a maximal interval (α, β), on which it is C1. The maximal interval is open and has the property that, if β < +∞ (resp. α > −∞), either (t, x(t)) approaches the boundary of E or x(t) is unbounded as t → β − (resp. t → α+).
Note that, as a particular case, when E = Rn+1 and β < ∞, x(t) is unbounded as t → β −. This will be the case under study in this paper.
Next we recall basic notions from computable analysis. The idea underlying computable analysis is to extend the classical computability theory so that it might deal with real quantities. See [27] for an up-to-date monograph on computable anal- ysis from the computability point of view, [15] for a presentation from a complexity point of view, or [22] for a good introduction to the subject.
Definition 2.5 A sequence {rn} of rational numbers is called a ρ-name of a real number x if there exist three functions a, b, c from N to N, such that for all n ∈ N, rn = (−1)a(n)  b(n)  and
1
|rn − x|≤ 2n .	(3)
In the conditions of the above definition, we say that the ρ-name {rn} is given as an oracle to an oracle Turing machine, if the oracle to be used is (a, b, c). The notion of the ρ-name can be extended to Rl: a sequence {(r1n, r2n,..., rln)}n∈N of rational vectors is called a ρ-name of x = (x1, x2,..., xl) ∈ Rl if {rjn}n∈N is a ρ-name of xj, 1 ≤ j ≤ l.
Definition 2.6 A real number x is called computable if a, b, and c in (3) are computable (recursive) functions.
Note that the above definition implies that every rational number must be com- putable. We now define the notion of computable function over R.

Definition 2.7 A function f : Rm → Rk is computable if there is an oracle Turing machine such that for any input n ∈ N (accuracy) and any ρ-name of x ∈ E given as an oracle, the machine will output a rational vector r satisfying  r − f (x)  ∞ ≤ 2−n, where  (y1,..., yl)  ∞ = max1≤i≤l |yi| for all (y1,..., yl) ∈ Rl.
In particular, it is not difficult to show that polynomials having computable coefficients are computable functions.
Simulating Turing machines
Several authors have proved that finite dimensional maps can simulate Turing ma- chines. The general approach is to associate each configuration of a Turing machine to a point of Rn, and to show that there is a dynamical system with state space in Rn that embeds its evolution. This is done, for example, in [19], [16], [25], [17]. Here we use the approach presented in [10].
Without loss of generality, consider a Turing machine M using 10 symbols, the blank symbol B = 0, and symbols 1, 2,  9. Let
...B B B a−k a−k+1... a−1 a0 a1... an BB B...

represent the tape contents of the Turing machine M. We assume that the head reads one of the symbols, a0, and ai ∈ {0, 1,  , 9} for all i. We also suppose that M has
m states, represented by numbers 1 through m. For convenience, we consider that if the machine reaches a halting configuration it moves to the same configuration. We assume that, in each transition, the head either moves to the left, moves to the right, or does not move. Take
y1 = a0 + a110 + ... + an10n	y2 = a−1 + a−210 +	+ a−k10k−1
and let q be the state associated with the current configuration. Then the triple (y1, y2, q) ∈ N3 gives the current configuration of M. In [10] it is shown that the transition function of M, ψM : N3 → N3, can be embedded into an analytic function f : R3 → R3, in an error-robust manner.
However, what we would like to do is to simulate the evolution of a Turing machine with a polynomial ODE, to obtain undecidability results about (2). In other words, we would like to have a system (2), where the input x0 of the Turing machine is coded in the initial condition, and y(n) gives the configuration of the Turing machine at time n ∈ N, where y is the solution of (2).
This is achieved with the following result. 5
Theorem 3.1 ([10]) Let ψM : N3 → N3 be the transition function of a Turing machine M, under the encoding described above and let ε satisfy 0 < ε ≤ 1/4. Then there is a computable analytic function fM : R7 → R6 such that the ODE z' = fM (t, z) simulates M in the following sense: for all x0 ∈ N3, the solution z(t)

5 We take  f ∞ = supx∈R  f (x)  ∞ , where f is a real function. If f : A → A is a function, then f [k]
denotes the kth iterate of f .

of the IVP deﬁned by the above ODE plus the initial condition (x0, x0), deﬁned for
t0 = 0, satisﬁes
¨z2(k) − ψ[k](x0)¨	≤ ε,
for all k ∈ N, where z ≡ (z1, z2) with z1, z2 ∈ R3.
Remark 3.2 In the conditions of the above theorem:
fM is a composition of polynomials, sin, cos, arctan;
although Theorem 3.1 only gives the behavior of z on integer values of t, its behavior in between is essentially monotone. More precisely, on any interval
[k, k + 1], z1 varies componentwise monotonically from ψ[k](x0) to ψ[k+1](x0),
M	M
with an error bounded by ε + δ, where δ can be chosen to be less than 1/4. The same applies to z2, which behaves like z1, but with delay 1/2. (See [10] and [9] for details.)
However, this is not enough for our needs. What we would like to have is that
fM is a vector of polynomials so that we can derive undecidability results about
(2). First we remark that sin, cos, and arctan are solutions of IVPs of the type (2). Then the following result, taken from [9], becomes useful.
Theorem 3.3 Consider the IVP

⎧⎨ x' = f (t, x),
⎩ x(t0) = x0,

(4)

where f : Rl+1 → Rl and each component of f is a composition of polynomials and functions that are solutions of IVP of the type (2). Then there exist n ≥ l, a polynomial p : Rn+1 → Rn and a y0 ∈ Rn such that the solution of (4) is given by the ﬁrst l components of y = (y1, ..., yn), where y is the solution of the polynomial IVP
⎧⎨ y' = p(t, y),
⎩ y(t0) = y0.
The proof of Theorem 3.3 in [9] is constructive, and preserves the computability of the parameters of the IVP. From Theorem 3.1, the Remark following it, and Theorem 3.3, we obtain the following result.
Lemma 3.4 Let M be a Turing machine with m states, coded as elements of
{1,..., m}, where m is the halting state. Then M can be simulated by an IVP
as follows:
The initial conﬁguration (input) x0 of the TM is coded in the initial conditions of the IVP: (x1(0),..., x6(0)) = (x0, x0) and (x7(0),..., xn(0)) = α ∈ Rn−6
with n ≥ 6 and where α is computable;
Let q(k) ∈ {1,..., m} denote the state of the TM at step k. Then there is one variable xq of the IVP that approximates q(k) with error bounded by 5/16

in each time interval [k, k + 1/2], where k ∈ N. This variable updates in a monotone manner in the time interval [k + 1/2,k + 1].
The polynomial p in (2) and the value α are computable.
For point 2, we used Theorem 3.1 with ε = 1/4 and the Remark following it, where we have set δ = 1/16. If xq is the variable from z2 that encodes the state, then we get point 3.

The result
We now state and prove the main result of the paper.
Theorem 4.1 The following problem is undecidable: “Given p : Rn+1 → Rn with polynomial components and (t0, x0) ∈ R × Rn, where p and (t0, x0) are computable, decide whether the maximal interval of the IVP (2) is bounded or not”.
Proof.  Let M be a universal Turing machine. Suppose that M has m states, coded as elements of {1,..., m}, where m is the halting state. From Lemma 3.4, there is a polynomial IVP (2), with solution x, that satisfies for every k ∈ N

⎧⎨ xq(t) ≤ m − 11
⎩ xq(t) ≥ m −  5

if M has not halted at step k and t ≤ k
if M has already halted at step k and t ≥ k.


(5)



Consider the IVP
⎧⎨ z' = xq − (m − 1/2)
⎩ z2 =  1


z' = xq − (m − 1/2)
⇐⇒
⎩ z' = ((m − 1/2) − xq)z2


(6)

where z1(0) = z2(0) = −1. Since xq appears as a component, we assume that this IVP is coupled with the polynomial IVP defined by Proposition 3.4. It is easy to see that while M hasn’t halted, xq − (m − 1/2) ≤ −3/16. Thus z1 keeps decreasing and the IVP is defined in (0, +∞), i.e. the maximal interval is unbounded, if M never halts.
On the other hand, if M eventually halts, z1 starts increasing at a rate of at least 3/16 and will do that forever. So, at some time it will have to assume the value 0. When this happens, a singularity appears for z2 and the maximal interval is therefore (right-)bounded. For negative values of t just replace t by (−t) in the polynomial IVP (2) and assume t to be positive. It can be shown that the behavior of the system will be similar, and we reach the same conclusions for the left bound of the maximal interval. So M halts iff the maximal interval of the polynomial IVP
(6) is bounded, i.e. boundedness is undecidable.	 
Actually, if we are given the description of a universal Turing machine, we can constructively define a set of polynomial ODEs simulating it and adapt in a con- structive manner the proof of Theorem 4.  If we use the small universal Turing

machine presented in [24], having 4 states and 6 symbols, we obtain the following theorem, whose full proof can be found in [8].
Theorem 4.2 There is a vector p : Rn+1 → Rn, with n ≥ 1, constituted by com- putable polynomials, where each component has degree less than or equal to 56, such that the following problem is undecidable: “Given computable (t0, x0) ∈ R × Rn, decide whether the maximal interval of the IVP (2) is bounded or not”.
Let us remark that, while the boundedness problem of the maximal interval for unrestricted polynomial IVPs is in general undecidable, it is not the case for some subclasses of polynomials. For instance, the boundedness problem is decid- able for the class of linear differential equations or for the class of one-dimensional autonomous differential equations where f is a polynomial of any degree. It would be interesting to investigate maximal classes with the above property.
Theorem 4.3 Consider the IVP (2) with p(t, x) = A(t)x+ h(t), where A and h are m × m and m × 1 matrices, respectively, and each entry Ajk : R → R, hj : R → R is a continuous function, for j, k = 1,..., m. Then the maximal interval associated with this IVP is (−∞, ∞). In particular, the boundedness problem is decidable for linear problems.
Proof. See [11, p. 79].	 

References
Alur, R. and D. L. Dill, Automata for modeling real-time systems, in: Automata, Languages and Programming, 17th International Colloquium, LNCS 443 (1990), pp. 322–335.
Arnold, V. I., “Ordinary Differential Equations,” MIT Press, 1978.
Asarin, E., O. Maler and A. Pnueli, Reachability analysis of dynamical systems having piecewise- constant derivatives, Theoret. Comput. Sci. 138 (1995), pp. 35–65.
Blondel, V. D. and J. N. Tsitsiklis, A survey of computational complexity results in systems and control, Automatica 9 (2000), pp. 1249–1274.
Bournez, O., Achilles and the Tortoise climbing up the hyper-arithmetical hierarchy, Theoret. Comput. Sci. 210 (1999), pp. 21–71.
Coddington, E. A. and N. Levinson, “Theory of Ordinary Differential Equations,” McGraw-Hill, 1955.
Gra¸ca, D., N. Zhong and J. Buescu, Computability, noncomputability and undecidability of maximal intervals of IVPs, Trans. Amer. Math. Soc. (2007), to appear.
Gra¸ca, D. S., “Computability with Polynomial Differential Equations,” Ph.D. thesis, Instituto Superior T´ecnico/Universidade T´ecnica de Lisboa, submitted.
Gra¸ca, D. S., M. L. Campagnolo and J. Buescu, Computability with polynomial differential equations, Adv. Appl. Math. To appear.
Gra¸ca, D. S., M. L. Campagnolo and J. Buescu, Robust simulations of Turing machines with analytic maps and flows, in: S. B. Cooper, B. L¨owe and L. Torenvliet, editors, CiE 2005: New Computational Paradigms, LNCS 3526 (2005), pp. 169–179.
Hale, J. K., “Ordinary Differential Equations,” Robert E. Krieger Pub. Co, 1980, 2nd edition.
Henzinger, T. A., P. W. Kopke, A. Puri and P. Varaiya, What’s decidable about hybrid automata?, J. Comput. System Sci. 57 (1998), pp. 94–124.


Hirsch, M. W. and S. Smale, “Differential Equations, Dynamical Systems, and Linear Algebra,” Academic Press, 1974.
Hopcroft, J. E., R. Motwani and J. D. Ullman, “Introduction to Automata Theory, Languages, and Computation,” Addison-Wesley, 2001, 2nd edition.
Ko, K.-I., “Computational Complexity of Real Functions,” Birkh¨auser, 1991.
Koiran, P., M. Cosnard and M. Garzon, Computability with low-dimensional dynamical systems, Theoret. Comput. Sci. 132 (1994), pp. 113–128.
Koiran, P. and C. Moore, Closed-form analytic maps in one and two dimensions can simulate universal Turing machines, Theoret. Comput. Sci. 210 (1999), pp. 217–223.
Lefshetz, S., “Differential Equations: Geometric Theory,” Interscience, 1965, 2nd edition.
Moore, C., Unpredictability and undecidability in dynamical systems, Phys. Rev. Lett. 64 (1990),
pp. 2354–2357.
Pour-El, M. B. and J. I. Richards, A computable ordinary differential equation which possesses no computable solution, Ann. Math. Logic 17 (1979), pp. 61–90.
Pour-El, M. B. and J. I. Richards, The wave equation with computable initial data such that its unique solution is not computable, Adv. Math. 39 (1981), pp. 215–239.
Pour-El, M. B. and J. I. Richards, “Computability in Analysis and Physics,” Springer, 1989.
Pour-El, M. B. and N. Zhong, The wave equation with computable initial data whose unique solution is nowhere computable, Math. Log. Quart. 43 (1997), pp. 499–509.
Rogozhin, Y., Small universal Turing machines, Theoret. Comput. Sci. 168 (1996), pp. 215–240.
Siegelmann, H. T. and E. D. Sontag, On the computational power of neural networks, J. Comput. System Sci. 50 (1995), pp. 132–150.
Sipser, M., “Introduction to the Theory of Computation,” PWS Publishing Company, 1997.
Weihrauch, K., “Computable Analysis: an Introduction,” Springer, 2000.
Weihrauch, K. and N. Zhong, Is wave propagation computable or can wave computers beat the Turing machine?, Proc. London Math. Soc. 85 (2002), pp. 312–332.
