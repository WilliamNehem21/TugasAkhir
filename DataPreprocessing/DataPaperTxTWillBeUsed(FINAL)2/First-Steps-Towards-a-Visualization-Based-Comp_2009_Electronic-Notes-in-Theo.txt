

Electronic Notes in Theoretical Computer Science 224 (2009) 47–56
www.elsevier.com/locate/entcs

First Steps Towards a Visualization-Based Computer Science Hypertextbook as a Moodle Module
Guido R¨oßling1 and Teena Vellaramkalayil2
CS Department TU Darmstadt
Darmstadt, Germany

Abstract
Hypertextbooks for Computer Science contents present an interesting approach to better support learners and integrate algorithm animations into the learning materials. We have developed a prototype for inte- grating a selection of the functionality of such a hypertextbook into the established Moodle LMS. This paper describes the goals and realization of this module together with an example.
Keywords: Moodle, Visualization-based Computer Science Hypertextbook, VizCoSH


Introduction
Algorithm visualization (AV) has a long tradition in visually presenting dynamic contents—typically, algorithms and data structures. The discipline and its asso- ciated tools promise easier learning and better motivation for learners. However, while surveys usually show interest in AV use, the adoption of AV by educators is lower than the proponents and developers of such systems would hope and expect. In the following, we will use the term AV whenever we refer to algorithm or program visualization or animation.
Based on a survey performed by the ITiCSE 2002 Working Group on ‘Improving the Educational Impact of Algorithm Visualization”, the main reasons why educa- tors do not use AV materials in their lectures can be reduced to two aspects: the time required to do so and the lack of integration with existing teaching materials [8].

1 Email: roessling@acm.org
2 Email: TVellaramkalayil@gmx.net

1571-0661/© 2008 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2008.12.048

Since that report, several approaches have addressed the time aspect, for ex- ample by providing tools or generators for quickly producing content that fits the educator’s or learner’s expectations, and allow the user to specify the input values [10,6]. However, the integration of AV into the learning materials still needs to be addressed.
A 2006 ITiCSE Working Group therefore proposed a combination of hypertext- based textual materials with image, video, and AV content, as well as s from a learning management system [12].  This combination was called a Visualization-
based Computer Science Hypertextbook (VizCoSH) to illustrate the main aspect
from the Working Group’s point of view: the seamless integration of AV materials into the learning materials used for a course.
In this paper, we present our first approach of implementing a VizCoSH. As stated by previous authors of related hypertextbooks, the effort required to create a full-fledged hypertextbook is intense. The well-known theory hypertextbook Snap-
shots of the Theory of Computing [9,2], while far from finished, already represents
the work of about twelve years. Therefore, it seems unlikely that a full-fledged VizCoSH –including the features “borrowed” from course or learning management systems described in the Working Group Report [12]—could already exist if it were built from scratch since 2006.
Our first prototype for a VizCoSH is based on the popular and established Moodle learning content management system [3]. Section 2 presents the goals for the development of the modue. Section 3 describes the approach taken for meeting these goals, followed by a short demo of the resulting content pages in Moodle in Section 4. Section 5 presents a brief evaluation of the module and concludes the paper.

Goals for implementing a VizCoSH
The report that presented the concept of a VizCoSH set many ambitious goals for a full-fledged VizCoSH. For example, these concerned navigation, adaptation of the contents and learning paths to the user, and the integration of tracking and testing facilities to better determine the user’s understanding. While most of the goals are already implemented in “some” systems, their combination—especially with the seamless integration of animations envisioned for a VizCoSH—has not been managed so far.
For the purpose of this research, we had to scale down the expectation towards a full VizCoSH to a manageable amount. Essentially, we expected that our VizCoSH prototype should offer the following features:
Adaptation of layout (such as fonts and color settings) and language to the user’s needs,
Addition of arbitrary elements, such as text blocks, images, or hyperlinks at any position in the contents,
Incorporation of multiple-choice quizzes and performing knowledge tests,

Identification of different user roles, at least distinguishing between teacher and
student,
Logging the user’s activities, in order to be able to track individual progress,
Basic communication features, such as chats, forums and votings,
Structured textual elements organized similarly to a text book (otherwise, the resource could not be called a hypertextbook),
Printing support for the learning materials with about the same comfort as for a “regular” text book,
Seamless integration of AV content at (almost) any position in the contents,
Support for fixed AV content as well as for “random” or user-generated AV con- tent.
Many of these goals are already addressed by a variety of software. For example, AV systems such as Animal already provide the last two items in the list [10]. For most of the communication- and layout-based goals, there is a whole set of software that is geared to provide these aspects: learning content management systems including the popular Moodle system [3]. We therefore decided to base our implementation on Moodle, which already offers the first six of the 10 required features.

Realizing a VizCoSH prototype as a Moodle module
Moodle is a highly extensible system, making it (comparatively) easy to provide ad- ditional features. The large international developer community can help in locating bugs and fixing them. However, the popularity of Moodle and the large number of developers also means that the number of offered modules or plugins for download is very large—currently, the web page lists more than 320 such elements.
The first six aspects—adaption of the visual layouts and language, management of arbitrary elements, quizzes and tests, user roles, logging, and communication features—are already integrated into Moodle and do not require further work. For the text structure similar to a book including useful printing facilities, we found a
fitting “activity module” called Book [13]. This module provides the “significant
structure” required by a VizCoSH, ensuring that the creation of meaningful text- based learning materials with AV content additions are possible.
The Book module allows printing the current “chapter” or the full book. Some
limitations exist; for example, the author of the module has decided not to support sub-chapters or deeper levels of structure. Additionally, the module is not interac- tive, so that forums, chats etc. cannot be integrated into the content, but can be linked from anywhere in the page.
We have extended the Book module to include support for AV content and re- named it to vizcosh. Teachers can maintain a list of supported AV content files
inside the module. New AV content can be added by providing the following infor- mation about the content: title, description, author (by default, the user currently

logged in), and topic(s) covered. Additionally, the animation file has to be uploaded, optionally together with an image to be used as a thumbnail. Finally, the user has to select the animation format.
The vizcosh module currently supports the following formats:
JAWAA2 [1],
GAIGS [7],
JHAVE´ with a local file as a parameter [6],
JHAVE´ with a specific input generator [6],
the generators offered by Animal, where the content author can either select the generator front-end, preselect an algorithm category, or specify a specific generator [10],
and the internal and AnimalScript-based formats supported by Animal [11].
Each animation format description also contains a template for starting the content with an appropriate JNLP file. The JNLP file uses a set of placeholders to substitute the actual file name etc. when it is started inside Moodle, as shown in Table 1. Note that depending on the underlying system, not all of these placeholders may be used.

Table 1
Variables used for JNLP templates

An example JNLP template for the Animal AV system is shown in Listing 1.
Listing 1: Example JNLP specification for Animal
1  <?xml version=” 1 . 0 ”  encoding=” utf −8”?>
2  < !−− JNLP S pecification  f or Animal 2 . 3 . 18  d i s t r i b u t i o n −−>
3  <jnlp  spec=” 1.0+”

4	codebase=”<JNLP−PATH>”
5	href=”<JNLP−FILENAME>”>
6	<information>
7	< titl e>Animal  Algorithm  Animation ,  v e r s i o n  2 .3.1 8</ titl e>
8	<vendor>Animal  Developer  Team/Dr .  Guido  Roesslin g</vendor>
9	<homepage href=” http: //www. animal . ahrgr . de” />
10	<descriptio n>Animal  Algorithm  Animation ,
11	v2 .3.1 8</ descriptio n>
12	<description kind=” short ”>An extensible  algorithm
13	animation  t o o l  used  f o r  Computer  Science  Education 
14	purpose s</ descriptio n>
15	<icon  href=” Animal . g i f ”/>
16	<icon  kind=” splash ”  href=” Animal . g i f ”/>
17	<offline −allowed />
18	</ information>
19	<securit y>
20	<all −permissions />
21	</ securit y>
22	<resources>
23	<j 2 se  href=” http: // java . sun . com/ products / autodl / j 2 s e ”
24	version=” 1.5+”/>
25	<jar href=”<JAR−PATH>/Animal − 2.3.18. j a r ”/>
26	</ resources>
27	<application−desc>
28	<argument><DATA−TYPE></argument>
29	<argument><DATA−PATHFILENAME></argument>
30	</ application−desc>
31 </ jnl p>
Lines 4 and 5 show that the JNLP-PATH and JNLP-FILENAME describe the location of the JNLP specification file. Lines 6 to 18 provide metadata about the AV system (here, the Animal AV system), such as the title, vendor, homepage, description and icon. In line 20, all permissions are requested to allow users to save animation files to their local disk.
The JAR file for running the AV content is defined in line 25. Finally, lines 28 and 29 describe the run-time parameters for an animation, here the format and name of the animation file to be loaded.
Using the “Add Algorithm Visualization” button next to the standard editor, the user can easily add AV content at the end of the text. To do so, he or she simply chooses one of the existing elements from the AV content list, or creates a new entry. If the link appears in the wrong place, it can easily be cut and pasted to the right target position.

Example Output
Figure 1 shows an excerpt of a VizCoSH page created using the Moodle module. On this page, the image in the center is a link to the concrete visualization of the underlying sorting algorithm (here, Selection Sort). When the user clicks on this image, the AV system is started and shows the content indicated by the thumbnail. Additionally, a set of links to different alternative AV content are placed in the item list below the image, including the possibility for the user to adapt the content to his own preferences.
To keep the Figure readable, we present the print view of the selected VizCoSH chapter. The page also contains a paragraph describing the algorithm (Selection Sort) above Figure 1, as well as a paragraph about the complexity of the algorithm. Additionally, a number of exercises are also put on the page. In a future version of the VizCoSH, the user shall also be able to submit a solution to these exercise tasks for (semi-)automatic grading. However, this part of the module does not exist yet. We mention it to illustrate why a VizCoSH can be so much more than a “simple” text book. A “complete” VizCoSH can incorporate automatically evaluated tests that may also have a effect on how further content is presented to the user—or even which content will be visible.
Figure 2 shows an example of the (modified) content editor provided by the vizcosh module. The WYSIWYG editor is already provided by Moodle. Our ad- dition to this editor is the button Add Algorithm Visualization shown next to the keyboard icon. When the user clicks on this button, he is led to the collection of all registered animations. By selecting one of these entries, the associated thumbnail or text is inserted into the text editor—the AV content is now ready to be run as soon as the changes have been saved.
If the user wants to add an algorithm visualization to the VizCoSH, he clicks on a “+” icon above the list of known AV content. He is then led to the page shown in Figure 3. Here, the user can enter the title and description of the AV content. The “Author” field is automatically set to the name of the user currently logged in to Moodle. The “Format” list displays a set of predefined formats. Each format has a proper JNLP file that is automatically adapted to run the new animation, based on the animation file uploaded by the user and the JNLP features. Finally, the user can decide to use the default thumbnail , download a new one, or instead display only a text for the hyperlink. By pressing the “Create” button, the file is uploaded and placed into the proper directory, and a new JNLP file will be created that fits the AV content.

Evaluation and Future Work
Using the vizcosh Moodle module presented in this paper, it is easy to incorporate animations of any of the supported types listed in Section 3. The average time effort for adding a new visualization to a given module page is less than two minutes, as it only requires creating a new animation entry and selecting the proper animation



Fig. 1. VizCoSH example from the vizcosh Moodle module

format.
At the moment, our plugin only supports contents that are based on a scripting
notation: JAWAA2, GAIGS, JHAVE´ and Animal. This does not mean that the
approach is in any way restricted to scripting input—it would be just as easy to support animation systems that use a stored file of some type. To prove this, we have also embedded the Jeliot 3 [5] system to our prototype. This only required
uploading both a JNLP pattern file and the (signed) Jeliot JAR file. After selecting “Jeliot” as the animation format, the user could access a demo animation in Jeliot. We plan to further refine the integration of Jeliot; at the moment, this is more a proof of concept. Similarly, to integrate other systems such as jGrasp [4], one only needs to provide a working JNLP template for the system, similar to the one shown in Listing 1. The author can create a new format template with a few mouse clicks by opening the “Format Editor” using the button next to the Format list shown in Figure 3.  However, the basic JNLP file has to be edited manually to
adapt it to the target format. This especially concerns the application-desc element
of the JNLP specification, which states the main class of the JAR file(s) and the invocation arguments. The module itself does not have to be changed if a new format is introduced.





Fig. 2. VizCoSH example from the vizcosh Moodle module


Fig. 3. VizCoSH example from the vizcosh Moodle module

The ability to print the current chapter including the thumbnails is also helpful. Here, the underlying Book module simply renders the page content(s) without the navigation elements and redisplays them as a Web page in a new browser window. Of course, the dynamic visualization elements are reduced to static images if the contents are printed on paper.
Our prototype can only represent the first step towards implementing a Viz- CoSH. Still, we expect that it will be easy to use for others once we publish the module, and may make adoption of AV easier. Future work for the module includes a seamless incorporation of interactive features, such as Moodle’s forums and chat abilities with the page content and the visualizations. For example, users should be able to link to a given visualization easily in all other areas of Moodle. User tracking for performance in built-in knowledge tests would be another important addition.
We are interested in cooperating with researchers and teachers who want to use the module. This especially concerns the support for other algorithm animation or visualization systems that can be run using Java Webstart. Several persons may not use Moodle, but some other platform, for example due to a university- enforced policy. Most of the module is not specific to Moodle and should be easy to carry over to other learning content management systems or content management systems, such as Drupal, Plone or Typo3. The main Moodle-specific aspect is the connection to the user management and database, which has to rewritten for each target platform.
We are also looking for partners who could contribute content, and allow us to take one step further towards the vision of a “community-shared” VizCoSH, as anticipated by the ITiCSE 2006 Working Group [12].

References
Akingbade, A., T. Finley, D. Jackson, P. Patel and S. H. Rodger, JAWAA: Easy Web-Based Animation
from CS 0 to Advanced CS Courses, in: Proceedings of the 34th ACM SIGCSE Technical Symposium on Computer Science Education (SIGCSE 2003), Reno, Nevada (2003), pp. 162–166.
Boroni, C., F. Goosey, M. Grinder and R. Ross, Active Learning Hypertextbooks for the Web, Journal of Visual Languages and Computing 13 (2002), pp. 341–354.

Cole, J. and H. Foster, “Using Moodle: Teaching with the Popular Open Source Course Management System,” O’Reilly, 2007.
Cross II, J. H., T. D. Hendrix and L. A. Barowski, Integrating Multiple Approaches for Interacting with Dynamic Data Structure Visualizations, in: G. R¨oßling and J. A. Vel´azquez-Iturbide, editors, Proceedings of the Fifth Program Visualization Workshop (PVW 2008), Madrid, Spain, number 2008- 04 in Serie de Informes T´ecnicos DLSI1-URJC, 2008, pp. 3–10.
Moreno, A., N. Myller, E. Sutinen and M. Ben-Ari, Visualizing Programs with Jeliot 3, in: Proceedings of the Working Conference on Advanced Visual Interfaces (AVI 2004), Gallipoli (Lecce), Italy (2004),
pp. 373–380.
Naps, T., JHAVE´ – Addressing the Need to Support Algorithm Visualization with Tools for Active Engagement, IEEE Computer Graphics and Applications 25 (2005), pp. 49–55.

Naps, T. L. and G. R¨oßling, JHAVE´ - more Visualizers (and Visualizations) Needed, in: G. R¨oßling, editor, Proceedings of the Fourth Program Visualization Workshop, Florence, Italy, 2006, pp. 112–117.

Naps, T. L., G. R¨oßling, V. Almstrum, W. Dann, R. Fleischer, C. Hundhausen, A. Korhonen,
L. Malmi, M. McNally, S. Rodger and J. A´. Vel´azquez-Iturbide, Exploring the Role of Visualization and Engagement in Computer Science Education, ACM SIGCSE Bulletin 35 (2003), pp. 131–152.
Ross, R. J., Snapshots of the theory of computing, Available online at http://www.cs.montana.edu/ webworks/projects/snapshots/ (2006).
R¨oßling, G. and T. Ackermann, A Framework for Generating AV Content on-the-fly, in: G. R¨oßling, editor, Proceedings of the Fourth Program Visualization Workshop, Florence, Italy, 2006, pp. 106–111.
R¨oßling, G. and B. Freisleben, Animal: A System for Supporting Multiple Roles in Algorithm
Animation, Journal of Visual Languages and Computing 13 (2002), pp. 341–354.
R¨oßling, G., T. Naps, M. S. Hall, V. Karavirta, A. Kerren, C. Leska, A. Moreno, R. Oechsle, S. H. Rodger, J. Urquiza-Fuentes and J. A´. Vel´azquez-Iturbide, Merging Interactive Visualizations with Hypertextbooks and Course Management, SIGCSE Bulletin inroads 38 (2006), pp. 166–181.
Sˇkoda, P., book module for Moodle, http://docs.moodle.org/en/Book_module (2007).
