

Electronic Notes in Theoretical Computer Science 238 (2009) 79–85
www.elsevier.com/locate/entcs

Tool Support for Engineering Certifiable Software 2
La´szl´o Go¨nczy1, Istv´an Majzik1, A´kos Horva´th1,
Da´niel Varro´1, Andra´s Balogh1, Zolta´n Micskei1, Andra´s Pataricza1
Department of Measurement and Information Systems Budapest University of Technology and Economics Budapest, Hungary

Abstract
Formal methods can effectively support the model driven develoment and analysis of IT applications in many domains. Typically, the domain-specific engineering models are transformed to formal analysis models (to compute measures that help the designer in verifying the design decisions) and verified models are mapped to test and implementation related software artefacts. An overview of four European projects demonstrates the use of support tools and tool integration facilities in development processes of systems having in sight
the demand of certification according to domain-specific standards.
Keywords: Keywords: Model based design, model transformation, tool integration.


Introduction
Formal methods are considered as integral part of model driven develoment in many applications. For example, the engineering models (like UML and domain-specific models) are transformed to formal analysis models (Petri-nets, Kripke structures, etc.) to compute measures that can be back-annotated to the designer. Verified models are then mapped to test and implementation related software artefacts (e.g., deployment configuration, source code). The integration of the suporting tools into the design process requires the development of means for efficient tool integration. In the recent years the Fault Tolerant Systems Research Group at the Budapest University of Technology and Economics participated in several European projects

1  Email: [gonczy,majzik,ahorvath,varro,abalogh,micskeiz,pataric]@mit.bme.hu
2 This work was partially supported by the following European projects: DECOS (IST-511764), DIANA (AERO1-030985), SAFEDMI (SUSTDEV-031413) and SENSORIA (IST-3-016004).

1571-0661 © 2009 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2009.09.008

that have the aim to develop methods or specific applications that have the po- tential to be included in development processes or systems certifiable according to domain-specific standards. In this paper we give an overview of four projects and demonstrate their results that are related to the engineering of certifiable software:
In the DECOS (Dependable Embedded Components and Systems) project (see Section 2) we elaborated a technology for the integration of tools in a certifiable verification and validation process.
In the SAFEDMI (Safe Driver Machine Interface for ERTMS Automatic Train Control) project (see Section 3) we developed tools that support design and anal- ysis methods prescribed by the standards for railway software development.
In the SENSORIA (Software Engineering in Service-Oriented Overlay Comput- ers) project (see Section 4) we contributed to the development method that sup- ports the use of formal methods for creating certifiable service orchestrations.
The DIANA (Distributed, equipment Independent environment for Advanced avioNic Applications) project (see Section 5) defines the development and certi- fication means needed to support an Integrated Modular Electronics platform.

Tool Integration for Verifying Component-Based De- pendable Embedded Systems
The DECOS project [1] aimed at creating a model-based development framework for critical embedded applications (e.g. in automotive, avionics or industrial pro- cess control systems). The toolchain architecture was designed for certifiability: the classical MDA approach was extended by support for systematic verification and validation (V&V) actions in a customizable way. V plans describe the nec- essary steps for verifying the DECOS artefacts; these plans are derived from the requirements of the related standards, e.g., ISO/IEC 61508.
Our role in the toolchain development was i) developing model transformations,
ii) design of the automated testbench and iii) implementing the underlying message- based infrastructure which provided an asynchronous, reliable and automated com- munication environment for integrating the V&V tools.
The DECOS development process is based on the MDA approach: the system is first designed on high level independent of the target platform. This Platform Independent Model (PIM) is created in UML with a DECOS profile or in a domain- specific editor and describes the functional parts of the system. It is supplemented by behavior models in SCADE [4]. The PIM is then mapped to a Platform Specific Model (PSM) which is the basis for generating the middleware components and configuration data (e.g. allocation, scheduling). The mapping and code genera- tion is implemented by means of model transformations based on the VIATRA2 framework [6] within an Eclipse-based environment.
Predefined, standards-compliant V-plans contain separate V&V activities for different models and artefacts including formal validation and veriﬁcation, fault injection, FMEA, simulation, testing (white box, black box, coverage, etc.) or even



Fig. 1. MDA based DECOS toolchain extended with V&V capabilities


radiated emission test for dependable embedded hardware. Some of these activities can be executed automatically by transforming the design models to the analysis domain using VIATRA, others need user interaction or are executed on a hardware artefact; thus the test bench support different levels of automation for V-plans.
Ontology-based semantical validation of models is an automatically executed V&V activity. In this case metamodels and domain specific models are trans- formed to the ontology domain: the consistency and completeness of metamodels are checked and models are validated according to different correctness criteria (i.e. metamodel-conformance, satisfaction of additional constraints).


Tools for the Development of a Safety-Critical Rail- way Application
The objective of the SAFEDMI project [3] is to design and develop a Driver-Machine Interface (DMI) compatible with the European Train Control System. The DMI shall be able to satisfy at least SIL2 (Safety Integrity Level 2) according to Eu- ropean standards for railway applications. The safety issues to be tackled by the SAFEDMI project are related to visualization, driver input data acquisition, data communication between on-board system components, and wireless communication for configuration and maintenance.

Tool support for a SIL 2 development process
The SIL 2 assessment and certification requires a rigorous development process according to EN 50129 and EN 50128. These standards prescribe a combination of methods and techniques that are categorized as mandatory, highly recommended or recommended. Several methods can be effectively supported by automated tools. In this paper we mention two tools that were developed or adapted in the SAFEDMI project to support the following methods:
Quantitative evaluation of availability and safety : According to the standards, the quantified evaluation of random failure integrity shall be carried out by means of probabilistic calculations. To do this, a so-called dependability model is con- structed. It is a mathematically precise model (in the form of a Stochastic Ac- tivity Network) representing the failure behaviour of system components, error propagation among them according to the given architecture, and the developed error detection and recovery mechanisms. Accordingly, the dependability model is composed of smaller sub-models belonging to system components, interactions, and the additional mechanisms. Although the definition of these sub-models is a task of dependability experts, their assembly can be performed by our auto- mated tool on the basis of the UML architecture (class and object diagrams) of the DMI. The solution of the dependability model provides (i) the system-level availability and (ii) the hazardous failure rate that must not exceed the allowed value (tolerable hazard rate, THR).
Robustness testing: Robustness of the DMI and its software components can be characterised by testing the responses to exceptional scenarios like extreme parameters in API calls, invalid sequence of interactions (in communication pro- tocols, internal interactions or mode changes). Robustness tests are constructed automatically on the basis of the UML class diagrams (annotated with the ranges of acceptable values in the parameters of methods) and the sequence diagrams specifying typical interactions. Our tool generates the test calls with combinations of invalid and valid parameter values, and applies pre-defined mutation operators (e.g., omission, change) in test sequences derived from the sequence diagrams.

Developing Service Oriented Architecture with Sup- port of Formal Methods
A primary goal of the Sensoria project [5] is to provide support for different stake- holders and actors during the entire project lifecycle for developing service-oriented overlay systems of a justifiable quality. SENSORIA proposes a model-driven ap- proach for the entire development cycle of services based applications and infrastruc- tures including the design, the formal analysis, the deployment and re-engineering of services. The core ideas of the SENSORIA engineering approach are illustrated in Fig. 2.
The development method supports the use of precise formal methods for creating certifiable service orchestrations. The SENSORIA Development Environment is an



Fig. 2. The SENSORIA engineering approach

Eclipse-based framework which enables the creation of tool repositories, a shared data pool and provides access for tool GUIs as well. Tool features are provided by OSGI services which also facilitate the wrapping of remote Web services.

Service certiﬁcation
Although service-oriented systems generally do not have such strict certification re- quirements as embedded devices, some areas (e.g. banking processes) have domain- specific safety criteria. Deep semantic analysis of service orchestration can validate the fulfillment of such criteria. SENSORIA offers a set of sound model-based formal analysis features.
The project also targets to cover the MDA lifecycle with deployment conﬁgura-
tion generation. Recent and ongoing research activities aim at integrating WSDL (Web Service Description Language), BPEL (Business Process Execution Language) and SCA (Service Component Architecture) generation from semantically validated engineering models.

Certification Means for Object-Oriented Avionics Ap- plications
The DIANA Project [2] is the first step for the implementation of an enhanced avionics platform, named AIDA (Architecture for Independent Distributed Avion- ics), providing secure distribution and execution on virtual machines to avionics applications. Along with this objective, DIANA also aims at contributing to the definition and standardization of the development and certification means based on Model Driven System Development needed to support this novel platform. It is im- portant to mention that the envisaged development means for the AIDA platform inherits the ideas introduced by the DECOS tool chain introduced in Sec. 2.

In the current paper we focus on the contract based specification approach pro- posed in the DIANA project as potential certification means for future avionics standards.

System Requirement Speciﬁcation by Contracts
System requirement specification (SRS) provides a black box description of what the system should do, in terms of the interaction of the system with its external environment. Based on the definition of SRS by means of usage domains defined by the RTCA DO297, Integrated Modular Avionics (IMA) Development, Guidance and Certification considerations. DIANA aims to adopt this approach by introducing design-by-contract not only on system – as defined by the usage domain – but also on application, platform and environment level.
Defined over the concept of pre-/postcondition design-by-contract prescribes that system architects should define precise verifiable interface specifications (pre/- postconditions) for system components based upon the theory of abstract data types and the concept of a business contract. This means that contracts provides seman- tics to formally describe the behavior of a module or platform, removing potential ambiguity with regard to the concrete implementation.
By using the combination of languages like SySML, OCL etc. for capturing contracts on different levels of design and implementation, DIANA aims to integrate contract definition, analyze and validation to its tool chain. This integration will enable to use SySML requirement diagrams and OCL to capture and map the contracts on platform independent level and – based on the platform mapping – automatically derive the platform specific JML contracts to the implementation level.
Current tool development in the project – to support this idea – focuses on (i) to enhance the model bus (based on VIATRA2) to support mapping and maintenance of contracts attached to PIM and PSM models, (ii) to evaluate the use of static checkers (ESC/ Java2) and formal theorem provers (KeY) to check the correctness of critical source code segments against its specification given by contracts, (iii) to examine the use of automatic test case generation based on the contracts, and (iv) to verify property preservation of model transformations used in the model bus to ensure that the correctness of formal analysis carried out during the development process cannot be corrupted by erroneous model transformation.
Conclusion
This paper demonstrated by citing four European projects that tools based on for- mal methods and mathematically precise model transformations can be effectively integrated into the design process of systems with the set purpose of certification according to domain-specific standards. The tools presented in this paper demon- strated the wide range of design and verification aspects that can be supported: among others ontology-based checking of models, dependability analysis of the ar- chitecture, configuration generation were mentioned. The DECOS tool integration

approach demonstrated the support of a tailorable certification process.

References
DECOS (Dependable Embedded Components and Systems) EU FP6 Project. http://www.decos.at/.
DIANA (Distributed, equipment Independent environment for Advanced avioNic Application) EU FP6 Project. http://diana.skysoft.pl/.
SAFEDMI (Safe Driver Machine Interface for ERTMS Automatic Train Control) EU FP6 Project.
http://www.safedmi.org/.
SCADE Suite.  http://www.esterel-technologies.com/products/scade-suite/.
SENSORIA (Software Engineering in Service-Oriented Overlay Computers) EU FP6 Project, 2005.
http://sensoria-ist.eu.
VIATRA2 Framework at Eclipse GMT. http://www.eclipse.org/gmt/.
