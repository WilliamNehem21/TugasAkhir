 Electronic Notes in Theoretical Computer Science 91 (2004) 134–147 
www.elsevier.com/locate/entcs




Computing the Maximum Agreement of Phylogenetic Networks
Charles Choya, Jesper Janssona, Kunihiko Sadakaneb, and Wing-Kin Sunga
a School of Computing, National University of Singapore, 3 Science Drive 2, Singapore 117543.
Email: {choychih,jansson,ksung}@comp.nus.edu.sg
b Department of Computer Science and Communication Engineering, Kyushu University, Japan.
Email: sada@csce.kyushu-u.ac.jp


Abstract
We introduce the maximum agreement phylogenetic subnetwork problem (MASN) of finding a branching structure shared by a set of phylogenetic networks. We prove that the problem is NP-hard even if restricted to three phylogenetic networks and give an O(n2)-time algorithm for the special case of two level-1 phylogenetic networks, where n is the number of leaves in the input networks and where N is called a level-f phylogenetic network if every biconnected component in the underlying undirected graph contains at most f nodes having indegree 2 in N . Our algorithm can be extended to yield a polynomial-time algorithm for two level-f phylogenetic networks N1 , N2 for any f which is upper-bounded by a constant; more precisely, its running time is O(|V (N1 )|· |V (N2 )|· 4f ), where V (Ni) denotes the set of nodes of Ni.
Keywords: phylogenetic network comparison, maximum agreement subnetwork, algorithm, computational complexity

Introduction
Phylogenetic trees have been used in many fields of science to describe how a set of objects (e.g., biological species, proteins, nucleic acids, languages, chain letters, or medieval manuscripts) produced by an evolutionary process are believed to be related [2,15,19]. In a phylogenetic tree, the objects are repre- sented by leaves and common ancestors by internal nodes so that the branching structure of the tree reflects the assumed evolutionary relationships. However, certain evolutionary events such as horizontal gene transfer or hybridization

1571-0661 © 2004 Published by Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2003.12.009

which suggest convergence between objects cannot be adequately represented in a single tree structure [4,11,12,17,18,21]. Phylogenetic networks were intro- duced in order to solve this shortcoming by allowing internal nodes to have more than one parent.
Recently, various algorithms for constructing and comparing phylogenetic networks have been proposed (see, e.g., [4,11,17,18,21]). Here, we consider the following scenario. Suppose a number of phylogenetic networks, each one de- scribing the possible evolution of a fixed set of objects, have been obtained by applying different construction methods or different clustering criteria to some available data. Furthermore, suppose that these networks do not completely agree because of distortions due to assumptions inherent to the methods used or because of measurement errors. It would then be informative to find a sub- network contained in every one of the input networks with as many labeled leaves as possible since such a subnetwork more likely represents genuine evo- lutionary structure in the data. In this way, one would get an indication of which ancestral relationships can be regarded as resolved and which objects need to be subjected to further experiments.
We formalize the above as a computational problem called the maximum agreement phylogenetic subnetwork problem (MASN). Since the number of leaves in the input phylogenetic networks may be very large, we study the computational complexity of MASN and some of its restrictions to determine when the problem can be solved by efficient algorithms.
Further motivation for studying MASN comes from its relation to a well- studied problem known as the maximum agreement subtree problem (MAST) 1 . Phylogenetic networks are a natural generalization of rooted binary phyloge- netic trees; similarly, MASN generalizes MAST restricted to rooted binary trees. Hence, our results in this paper complement those previously known for MAST. The computational complexity of MAST has been closely investigated (see Section 1.2), motivated by the practical usefulness of maximum agreement subtrees. For example, maximum agreement subtrees can be used not only to identify small problematic subsets of species during phylogenetic reconstruc- tion, but also to measure the similarity of a given set of trees [7,9,14] or to estimate a classification’s stability to small changes in the data [9]. Moreover, MAST-based algorithms have been used to prepare and improve bilingual context-using dictionaries for automated language translation systems [5,16].


1 In MAST, the input is a set of leaf-labeled trees and the goal is to compute a tree contained in all of the input trees with as many labeled leaves as possible; see, e.g., [1] or [20] for a formal definition. MAST is also referred to as the maximum homeomorphic subtree problem (MHT) by some researchers.

Problem definition
Let L be a finite set. A phylogenetic network for L is a connected, rooted, simple, directed acyclic graph in which: (1) each node has outdegree at most 2;
(2) each node has indegree 1 or 2, except the root node which has indegree 0;
(3) no node has both indegree 1 and outdegree 1; and (4) all nodes with outdegree 0 are labeled by elements from L in such a way that no two nodes are assigned the same label. From here on, nodes of outdegree 0 are referred to as leaves and identified with their corresponding elements in L.
Given a phylogenetic network N for L and a subset L' of L, the topological restriction of N to L', denoted by N L', is defined as the phylogenetic network obtained by first deleting all nodes which are not on any directed path from the root to one of the leaves in L' along with their incident edges, and then,
for every node with outdegree 1 and indegree less than two, contracting its
outgoing edge (any set of multiple edges between two nodes is replaced by a single edge). See Fig. 1 for an example.


c	d




a	b	d	e

Fig. 1. Let N be the phylogenetic network on the left. Then N | {c, d} is the phylogenetic network on the right.


Given a set = N1, N2, ..., Nk of phylogenetic networks for L, an agree- ment subnetwork of  is a phylogenetic network A such that for some L'  L it holds that A is a subgraph of each of N1 L', N2 L', ..., and Nk L'. A maximum agreement subnetwork of is an agreement subnetwork of  with the maximum possible number of leaves. The maximum agreement phyloge- netic subnetwork problem (MASN) is: Given a finite set L and a set N of phylogenetic networks for L, find a maximum agreement subnetwork of N .
Throughout this paper, n and k represent the cardinalities of L and , respectively, in the problem definition above.

Previous results
A survey of existing algorithms for constructing phylogenetic networks can be found in [18]; see also [4], [11], and [21]. A method for comparing two given phylogenetic networks (more exactly, measuring their similarity in order to assess the topological accuracy of different phylogenetic network construction methods) was proposed in [17].
No results for MASN in its general form have appeared in the literature be- fore. On the other hand, the special case of MASN known as the maximum agreement subtree problem (MAST) has received a lot of attention in the last ten years. Below, we summarize some of the most important results known for MAST.
Finden and Gordon [9] presented a polynomial-time heuristic (not guar- anteed to find an optimal solution) for MAST restricted to instances con- sisting of two binary trees. A few years later, Steel and Warnow [20] gave the first exact polynomial-time algorithm to solve MAST for two trees with unbounded degrees. Since then, a great number of improvements have been published (e.g., [5,8,13,14]). Today, the fastest currently known algorithm for MA√ST for two trees, invented by Kao, Lam, Sung, and Ting [14], runs in
O( Dn log(2n/D)) time, where n is the number of leaves and D is the max-
imum degree of the two input trees. Note that this is O(n log n) for two trees with maximum degree bounded by a constant and O(n1.5) for two trees with unbounded degrees.
Amir and Keselman [1] considered the case of k  3 input trees. They proved that MAST is NP-hard for three trees with unbounded degrees, but solvable in polynomial time for three or more trees if the degree of at least one of the input trees is bounded by a constant. For the latter case, Farach, Przytycka, and Thorup [7] gave an algorithm with improved efficiency running in O(kn3 + nd) time, where d is an upper bound on at least one of the input trees’ degrees; Bryant [3] proposed a conceptually different algorithm with the same running time.

Our results and organization of paper
We define the concept of a level-f phylogenetic network in Section 2. Then, in Section 3, we present an algorithm for computing a maximum agreement subnetwork between two level-1 phylogenetic networks in O(n2) time. This is the first polynomial-time algorithm ever for this problem. Our algorithm can be extended to solve MASN for two level-f phylogenetic networks N1 and N2 in O( V (N1) V (N2) 4f ) time (where V (Ni) denotes the set of nodes of Ni), which is polynomial in the input size for any f which is upper-bounded by a

constant. Next, in Section 4, we prove that in the general case (i.e., for level- f phylogenetic networks where f is unbounded), the maximum agreement phylogenetic subnetwork problem is NP-hard even if restricted to just three networks. Finally, we state some open problems in Section 5.

Preliminaries
Let N be a phylogenetic network for a finite set L. Recall that nodes with outdegree 0 are called leaves. We refer to nodes with indegree 0 (i.e., the root of N ) or 1 as tree nodes and nodes with indegree 2 as hybrid nodes.
For any hybrid node h in N , its two incoming edges are called the hybrid edges of h and its two parents the hybrid parents of h. To distinguish between the hybrid edges of h, we call one of them the left hybrid edge of h (lhe(h)) and the other one the right hybrid edge of h (rhe(h)). The left hybrid parent of h (lhp(h)) and the right hybrid parent of h (rhp(h)) are defined accordingly. Every ancestor of h from which lhp(h) and rhp(h) can be reached using two disjoint paths is called a split node of h. If s is a split node of h then the two paths from the children of s to h are called merge paths of h. Any node u which belongs to a merge path of some node v, where v /= u, is referred to as a merge path node. If h only has one split node, we denote it by sn(h). See Fig. 2.

N is said to be a level-f phylogenetic network if every biconnected com- ponent in the undirected graph obtained from N by replacing each directed edge by an undirected edge contains at most f nodes that are hybrid nodes in N . Note that N is a tree if f = 0. If f = 1 then every node in N belongs to at most one pair of merge paths 2 . Moreover, if f = 1 then every hybrid node in N has only one split node and any node in N can be a split node for at most one hybrid node.

An algorithm for MASN for two phylogenetic net- works
Given two level-0 phylogenetic networks (i.e., trees), MASN can be solved in O(n log n) time by using the algorithm in [5] or [14]. In this section, we consider how to compute a maximum agreement subnetwork of two level-f phylogenetic networks for f > 0. We present an O(n2)-time algorithm for the

2 The biological relevance of level-1 phylogenetic networks (there referred to as galled-trees) is discussed in [11].




Fig. 2. Here, h is a hybrid node with a unique split node. The figure shows sn(h), lhp(h), rhp(h), lhe(h), rhe(h), and as dashed lines, two merge paths of h.
case f = 1 which can be extended to solve MASN in polynomial time for any
f which is upper-bounded by a constant.
From this point onward, we assume that some arbitrary left-to-right or- dering of the children of every node has been fixed. We first introduce some notation. Let N be a level-1 phylogenetic network. V (N ) stands for the set of nodes of N and Λ(N ) for the set of leaf labels in N . If u ∈ V (N ) has two children then uL and uR denote the left and right child of u, respectively, and if u only has one child c then we set uL = c and uR = . Since N is a level-1 phylogenetic network, if u  V (N ) is a merge path node then there exists a unique hybrid node belonging to the same merge path as u; we denote this node by hn(u). For any u  V (N ), N [u] is the subnetwork of N rooted at u, i.e., the minimal subgraph of N which includes all nodes and directed edges of N reachable from u. If u ∈ V (N ) is a merge path node in N then N [u] is defined as the subnetwork of N [u] where N [hn(u)] and hn(u)’s incoming edge have been removed. Otherwise, if u is not a merge path node in N then N [u]'
is equal to N [u]. Finally, N [ ] refers to the empty network with no nodes or
edges. See Fig. 3 for an example.

For any two level-1 phylogenetic networks N1 and N2, define M asn(N1, N2) as the number of leaves in a maximum agreement subnetwork of N1 and N2. If N1 or N2 is the empty network then M asn(N1, N2) is equal to 0. Otherwise,




N [uL ] :	N [uR]’ :


Fig. 3. N is a level-1 phylogenetic network and u is a split node in N . N [uL
] and N [uR
'
] are the

subnetworks of N shown on the right.
M asn(N1, N2) can be expressed recursively using the following lemma which is a straightforward generalization of the main lemma in [20] for MAST.
Lemma 3.1 Let N1 and N2 be two level-1 phylogenetic networks. For every
(u, v) ∈ V (N1) × V (N2),


M asn(N [u],N [v]) = 
is a leaf

max  Diag(N1[u], N2[v]), Match(N1[u], N2[v])},


where
otherwise

Diag(N1[u], N2[v]) = max  M asn(N1[u], N2[vL]),  Masn(N1[u], N2[vR]),
M asn(N1[uL], N2[v]), Masn(N1[uR], N2[v])
and
M atch(N1[u], N2[v]) =
max M asn(N1[uL], N2[vL]) + M asn(N1[uR]', N2[vR]'),
M asn(N1[uL], N2[vL]') + M asn(N1[uR]', N2[vR]),
M asn(N1[uL], N2[vR]) + M asn(N1[uR]', N2[vL]'),
M asn(N1[uL], N2[vR]') + M asn(N1[uR]', N2[vL]),

M asn(N1[uL]', N2[vL]) + M asn(N1[uR], N2[vR]'),
M asn(N1[uL]', N2[vL]') + M asn(N1[uR], N2[vR]),
M asn(N1[uL]', N2[vR]) + M asn(N1[uR], N2[vL]'),
M asn(N1[uL]', N2[vR]') + M asn(N1[uR], N2[vL]) .

Lemma 3.1 implies that we can compute M asn(N1[u], N2[v]) for all (u, v) in V (N1) × V (N2) by employing dynamic programming in a bottom-up man- ner, e.g., by evaluating all pairs in V (N1) × V (N2) in increasing order in the lexicographic ordering of V (N1) V (N2) where the nodes in each V (Ni) are postordered. The resulting algorithm (Algorithm ComputeM asn) is displayed in Fig. 4.

Fig. 4. A dynamic programming algorithm for computing all values of Masn.

Next, we analyze the time complexity of Algorithm ComputeM asn.
Lemma 3.2 If N is a level-1 phylogenetic network then the total number of nodes in N is O(n).
Proof. (Given in the full-length version of our paper.)	 

Lemma 3.3 The running time of Algorithm ComputeM asn is O(n2).
Proof. By Lemma 3.2, the algorithm evaluates O(n2) pairs of nodes. For each such pair (u, v), if neither u nor v is a leaf then it takes constant time to compute the M asn-values from previously computed values. If u is a leaf then the value of |Λ(N1[u]) ∩ Λ(N2[v])| can be obtained in constant time by associating a binary vector L(w) of length n to each w  V (N1) V (N2), where the ith bit of L(w) is set to 1 if and only if leaf i is a descendant of w (note that all L(w)-vectors can be computed in advance in O(n2) time by

using a prefix walk technique), and checking if bit u in L(v) equals 1. The case where v is a leaf is analogous.	 
Algorithm ComputeM asn can be modified to compute the set of leaves in a maximum agreement subnetwork without increasing the asymptotic running time by also recording information about how each M asn-value is obtained as it is computed, e.g., by saving pointers. To obtain an actual maximum agreement subnetwork from such a set L', we can compute N1 | L' and N2 | L'
and then delete all edges which are not in N2 | L from N1 | L .
Theorem 3.4 Given two level-1 phylogenetic networks with n leaves, a max- imum agreement subnetwork can be computed in O(n2) time.
By extending this technique, we get the following.
Corollary 3.5 Given two level-f phylogenetic networks N1 and N2, a max- imum agreement subnetwork of N1 and N2 can be computed in O(|V (N1)| · 
|V (N2)|· 4 ) time, where V (Ni) denotes the set of nodes of Ni.
Proof. (Given in the full-length version of our paper.)	 
Hence, MASN with k =2 and f upper-bounded by a constant is solvable in polynomial time.

NP-hardness of MASN for k =3 
In this section, we prove that MASN is NP-hard for every fixed k ≥ 3. Our reduction is a non-trivial modification of the NP-hardness proof by Amir and Keselman [1] for MAST restricted to three trees with unbounded degrees. Note that the definition of MASN requires all nodes to have outdegree at most two, so the fact that MAST with unbounded degrees is NP-hard does not immediately imply that MASN is NP-hard.
Three-Dimensional Matching (3DM)
Instance: A set M ⊆ X × Y × Z, where X, Y , and Z are disjoint sets and
X = {x1, ..., xq}, Y = {y1, ..., yq}, and Z = {z1, ..., zq}.
Question: Is there a subset M ' of M with |M '| = q such that M ' is a match- ing, i.e., such that for every pair e1, e2  M it holds that e1 and e2 differ in all coordinates?
3DM is known to be NP-complete (see, e.g., [10]). To prove the NP- hardness of MASN, we describe a polynomial-time reduction from 3DM. Given

an arbitrary instance of 3DM, construct an instance (L, N ) of MASN with three phylogenetic networks N = {N1, N2, N3} for L as follows.
Take L = M  W  B, where W is a set of 2q6 arbitrary elements not in M , and B is a set of 2q7 arbitrary elements not in M or W . Let B1 and B2 be two binary trees with q7 leaves each, distinctly labeled by B. For every

(xi, yj, zk) ∈ X ×Y ×Z, define W 1
2
xi,yj,zk
to be two binary trees with

q3 leaves each, distinctly labeled by W . Next, for every xi ∈ X, define (1) Mx
as the subset of M containing all triples of the form (xi, y, z) where y ∈ Y
and z ∈ Z; (2) Rxi as a binary caterpillar tree with leaves distinctly labeled
2
by Mxi ; (3) Sxi as the tree obtained from the binary caterpillar tree with 2q
leaves by replacing them (in order of non-decreasing distance from the root)

with the roots of W 1
2
xi,y1,z1
1
xi,y1,z2
2
xi,yq,zq
; (4) S'
as the tree

obtained from the binary caterpillar tree with 2q2 leaves by replacing them
(in order of non-decreasing distance from the root) with the roots of W 2	,

1
xi,yq,zq
2
xi,yq,zq−1
1
xi,y1,z1
; (5) Txi
as a binary tree with a root node

connected to the roots of Rx
and Sx ; and (6) T '
as a binary tree with a root

i	i	xi
node connected to the roots of Rx and S' . Furthermore, define My , Mz , Ry ,

i	xi
i	i	i

Rzi , etc. for every yi ∈ Y and zi ∈ Z analogously. See Fig. 5 for an example.
Tx 8 :
r	s



( x8 , y1 , z 3 )

( x8 , y1 , z 9 )

( x8 , y3 , z 3 )






W 1
x8 , y1 , z 1

W 2
x8 , y1 , z 1


( x , y , z )
( x , y , z )	W 1

8  7  2
8  7  4
x8 , y1 , z 2




W 1
x8 , yq , z q
W 2
x8 , yq , z q


Fig. 5. Assume Mx8 = {(x8, y1 , z3), (x8, y1, z9), (x8, y3, z3 ), (x8, y7, z2), (x8, y7 , z4)}. Rx8 and Sx8
are the subtrees of Tx8 rooted at the nodes marked r and s, respectively.
Next, let P be any sorting network (see, e.g., [6]) of polynomial depth p for
q elements. Construct a directed acyclic graph Q from P with (p + 1) · q nodes
{Qi,j | 1 ≤ i ≤ p+1, 1 ≤ j ≤ q} such that there is a directed edge (Qi,j, Qi+1,j)




P :

1
2
3
4

q
Depth 1












Depth i
Q









Q












1,q










Fig. 6. The sorting network P on the left yields a directed acyclic graph Q.

Fig. 7. The phylogenetic networks N1 and N2 .

for every 1 ≤ i ≤ p and 1 ≤ j ≤ q, and two directed edges (Qi,j, Qi+1,k) and (Qi,k, Qi+1,j) for every comparator (j, k) at depth i in P for 1 ≤ i ≤ p, as

illustrated in Fig. 6.
We now let N1 be a phylogenetic network (in fact, a leaf-labeled binary tree) obtained by attaching B1, B2, and Tx1 , ..., Txq to a path (m0, m1, m2, ..., mq) so that m0 becomes the root of N1 and the root of B1 is a child of m0, the root of each Txi is a child of mi, and the root of B2 is the second child of mq. See Fig. 7. The phylogenetic network N2 is obtained by attaching B1,

B2, Q, and T ' , ..., T '
toa path (n0, n1, n2, ..., nq) so that n0 becomes the root

y1	yq
of N2 and the root of B1 is a child of n0, each node Q1,j in Q is a child of nj
and each node Qp+1,j in Q coincides with the root of T ' , and the root of B2
is the second child of nq. Next, N3 is defined in the same way as N2 but using
' instead of T ' . Finally, for each node in N2 or N3 having indegree 1 and
outdegree 1, contract its outgoing edge.
Lemma 4.1 There exists an agreement subnetwork of (N1, N2, N3) with 2q7+ 2q4 + q leaves if and only if M has a matching of size q.
Proof. Suppose M has a matching M ' of size q. Then for each xi, there is precisely one triple of the form (xi, y, z) in M '. For any (xi, yj, zk) ∈ X ×Y ×Z,

denote by Vx ,y ,z
the set of all leaves in W 1
and W 2
. Let C =

i  j  k
'
xi,yj,zk
xi,yj,zk

of N2 | (B ∪ C) and N3 | (B ∪ C). First, observe that for each (xi, yj, zk) in M ',
there exists an agreement subnetwork of Tx , T ' , and T ' containing the (1 +
i	yj	zk
2q3) leaves in {(xi, yj, zk)}∪ Vx ,y ,z . Next, since P is a sorting network, there
are q disjoint paths in Q from (Q1,1, Q1,2, ..., Q1,q) to (Qp+1,π(1), Qp+1,π(2), ..., Qp+1,π(q)) for any given permutation π of {1, 2, ..., q}; in particular, this holds for the permutations πy and πz defined by the relations πy(i)= j and πz(i)= k for all (xi, yj, zk) ∈ M '. This means that T is a subgraph of N2 | (B ∪ C) and N3 | (B ∪ C).  Thus, T is an agreement subnetwork of (N1, N2, N3) with
|B| + q · (1 + 2q3) leaves.
Conversely, suppose there exists an agreement subnetwork T with a leaf set L' ⊆ L such that |L'| = 2q7+2q4+q. Write M ' = L'∩M and W ' = L'∩W . By the pigeonhole principle, |M '| + |W '| ≥ 2q4 + q. Also, at least one leaf in B1 and at least one leaf l in B2 must be included in L . It follows that the root of T corresponds to the roots of N1, N2, and N3, and for any two triples e = (xi1 , yj1 , zk1 ) and f = (xi2 , yj2 , zk2 ) in M , if e and f agree on at least one coordinate then they cannot both belong to L'. (To see this, if i1 /= i2 and j1 = j2, then e and f would appear in different subtrees of the form Txi in N1 but in
the same subtree of the form T ' in N2, so, e.g., N1 | {e, f, l} and N2 | {e, f, l}
would differ, which contradicts that {e, f, l} are leaves in T . If i1 = i2 and
j1 /= j2 then |W '| ≤ (q − 1) · 2q3 since otherwise there would have to exist a w

in W ' such that w appears in T '
1
and then N1 | {e, f, w} and N2 | {e, f, w}


would differ; thus, |M '| + |W '| ≤ |M | + |W '| ≤ q3 + (q − 1) · 2q3 ≤ 2q4 − q3, contradicting that |M '| + |W '| ≥ 2q4 + q. The cases (i1 /= i2, k1 = k2) and (i1 = i2, k1 /= k2) are analogous.) Thus, M ' is a matching of M . Next, assume that |M '| < q. Then W ' has cardinality |L'|− |M '|− |L' ∩ B| > 2q4. This implies that W  contains leaves from at least three different subtrees of the

m x,yj,zk
for some fixed x ∈ X, but at most two such leaves can appear in

the same S' and in the same S' for any yj ∈ Y and zk ∈ Z. Contradiction.
Hence, |M '| ≥ q.	 
From the above, we obtain:
Theorem 4.2 MASN is NP-hard even if restricted to k = 3.

Final remarks
An open problem is to determine the computational complexity of MASN restricted to two level-f phylogenetic networks where f is unbounded. If it is NP-hard, can it be approximated efficiently in polynomial time?
We would also like to know if it is possible to improve the running time of our algorithm for two level-1 phylogenetic networks.

References
Amir, A. and D. Keselman, Maximum agreement subtree in a set of evolutionary trees: Metrics and efficient algorithms. SIAM Journal on Computing, 26(6):1656–1669, 1997.
Bennett, C. H., M. Li and B. Ma, Chain letters and evolutionary histories. Scientific American, to appear.
Bryant, D., Building Trees, Hunting for Trees, and Comparing Trees: Theory and Methods in Phylogenetic Analysis. PhD thesis, University of Canterbury, Christchurch, New Zealand, 1997.
Bryant, D. and V. Moulton, NeighborNet: an agglomerative method for the construction of planar phylogenetic networks. In Proceedings of the 2 nd Workshop on Algorithms in
Bioinformatics (WABI 2002), volume 2452 of Lecture Notes in Computer Science, pages 375–391. Springer-Verlag Berlin Heidelberg, 2002.
Cole, R., M. Farach-Colton, R. Hariharan, T. Przytycka and M. Thorup, An O(n log n) algorithm for the maximum agreement subtree problem for binary trees. SIAM Journal on Computing, 30(5):1385–1404, 2000.
Cormen, T., C. Leiserson and R. Rivest, Introduction to Algorithms. The MIT Press, Massachusetts, 1990.
Farach, M., T. Przytycka and M. Thorup, On the agreement of many trees. Information Processing Letters, 55:297–301, 1995.
Farach, M. and M. Thorup, Sparse dynamic programming for evolutionary-tree comparison.
SIAM Journal on Computing, 26(1):210–230, 1997.


Finden, C. R. and A. D. Gordon, Obtaining common pruned trees. Journal of Classification, 2:255–276, 1985.
Garey, M. and D. Johnson, Computers and Intractability – A Guide to the Theory of NP- Completeness. W. H. Freeman and Company, New York, 1979.
Gusfield, D., S. Eddhu and C. Langley, Efficient reconstruction of phylogenetic networks with constrained recombination. In Proceedings of the Computational Systems Bioinformatics (CSB’03), pages 363–374, 2003.
Hein, J., Reconstructing evolution of sequences subject to recombination using parsimony.
Mathematical Biosciences, 98(2):185–200, 1990.
Kao, M.-Y., Tree contractions and evolutionary trees. SIAM Journal on Computing, 27(6):1592–1616, 1998.
Kao, M.-Y., T.-W. Lam, W.-K. Sung and H.-F. Ting, An even faster and more unifying algorithm for comparing trees via unbalanced bipartite matchings. Journal of Algorithms, 40(2):212–233, 2001.
Li, W.-H., Molecular Evolution. Sinauer Associates, Inc., Sunderland, 1997.
Meyers, A., R. Yangarber and R. Grishman, Alignment of shared forests for bilingual corpora. In Proceedings of the 16 th International Conference on Computational Linguistics (COLING- 96), pages 460–465, 1996.
Nakleh, L., J. Sun, T. Warnow, C. R. Linder, B. M. E. Moret and A. Tholse, Towards the development of computational tools for evaluating phylogenetic reconstruction methods. In Proceedings of the 8 thPacific Symposium on Biocomputing (PSB 2003), pages 315–326, 2003.
Posada, D. and K. A. Crandall, Intraspecific gene genealogies: trees grafting into networks.
TRENDS in Ecology & Evolution, 16(1):37–45, 2001.
Setubal, J. C. and J. Meidanis, Introduction to Computational Molecular Biology. PWS Publishing Company, Boston, 1997.
Steel, M. and T. Warnow, Kaikoura tree theorems: Computing the maximum agreement subtree. Information Processing Letters, 48:77–82, 1993.
Wang, L., K. Zhang and L. Zhang, Perfect phylogenetic networks with recombination. Journal of Computational Biology, 8(1):69–78, 2001.
