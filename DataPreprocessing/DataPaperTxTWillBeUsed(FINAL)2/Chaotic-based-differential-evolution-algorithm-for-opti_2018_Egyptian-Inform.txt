Egyptian Informatics Journal 19 (2018) 151–163








Full length article
Chaotic based differential evolution algorithm for optimization of baker’s yeast drying process
Ug˘ur Yüzgeç ⇑, Mehmet Eser
Department of Computer Engineering, Bilecik Seyh Edebali University, Bilecik, Turkey



a r t i c l e  i n f o 

Article history:
Received 5 September 2017
Revised 11 January 2018
Accepted 21 February 2018
Available online 27 February 2018

Keywords:
Chaotic
Differential evolution Optimization
Drying process
a b s t r a c t 

Chaotic based Differential Evolution (CDE) algorithm is presented to determine the optimal control vari- ables for the optimization of Baker’s Yeast drying process. The chaotic system is proposed to determine the initial population, to select the trial individuals from the population in the mutation operation instead of the random number generator. The random values produced by the random number generator are likely to be similar or same values with each other. In this study, four different chaotic systems, such as Lorenz attractor, Rössler attractor, Chua circuit and Mackey-Glass equation, are solved by Runge-Kutta method to produce the random values of the initial individuals. To demonstrate the perfor- mance of the CDE algorithms, ten optimization problems are taken from the literature. Furthermore, the performances of the proposed CDE algorithms are compared with the classic Differential Evolution (DE) algorithm, Particle Swarm Optimization (PSO) algorithm, Artificial Bee Colony (ABC) algorithm, Simulated Annealing (SA) algorithm, Touring Ant Colony Optimization (TACO) algorithm in terms of the mean best solution, the number of function evaluations (NFE) and CPU-time metrics. At the same time, the proposed CDE algorithms are implemented for numerical optimization problems based on the IEEE Congress on Evolutionary Computation (CEC) 2014 test suite. For the optimization of baker’s yeast drying process, there are four significant parameters, such as product quality, drying total time, energy cost of air and the final moisture content. The proposed CDE algorithms and classic DE algorithm are applied for the same optimization problem that is taken from a baker’s yeast producer in Turkey. The experimental results prove that the proposed CDE algorithms are able to provide very competitive results.
© 2018 Production and hosting by Elsevier B.V. on behalf of Faculty of Computers and Information, Cairo
University. This is an open access article under the CC BY-NC-ND license (http://creativecommons.org/
licenses/by-nc-nd/4.0/).





Introduction

Differential Evolution (DE) algorithm is a powerful heuristic method for global optimization problems, was introduced by Storn and Price [31,32,37]. This population based heuristic optimization algorithm has drawn the interest of researchers in many scientific fields. The DE algorithm has happened to more popular step by step and it has been used in a lot of useful cases due to ease and the good convergence in the optimization problems [4].

* Corresponding author.
E-mail address: ugur.yuzgec@bilecik.edu.tr (U. Yüzgeç).
Peer review under responsibility of Faculty of Computers and Information, Cairo University.


The principle of DE algorithm is basically based on adding the difference between two individuals to a third individual in popula- tion. It differs from other heuristic algorithms in the mutation, crossover and selection stages. Unlike the procedures based on random number generator in evolutionary algorithms such as genetic algorithms, DE algorithm uses the differences between individuals in the population to form the next generation [10]. Fur- thermore, DE algorithm has got few control parameters, such as scaling factor, crossover probability constant and population size, which are used during the optimization process like the other evolutionary algorithms. These control parameters have to be determined carefully to increase the solution quality and the algorithm efficiency. The robustness and effectiveness of DE algorithm are based on the suitable settings of the control parameters [44].
In addition to these parameters, the other important thing is determining the initial population by random number generator. In DE algorithm, the individuals’ initial values in the population which are produced by the random number generator are likely


https://doi.org/10.1016/j.eij.2018.02.001
1110-8665/© 2018 Production and hosting by Elsevier B.V. on behalf of Faculty of Computers and Information, Cairo University. This is an open access article under the CC BY-NC-ND license (http://creativecommons.org/licenses/by-nc-nd/4.0/).



to be similar or same values with each other. This is an undesirable situation because of reducing the diversity in the population. In this paper, the new methods based on the chaotic functions were proposed instead of the classic random procedure. Chaos functions have got applications, such as observing the weather in meteorol- ogy area [38], cryptography in computer science area [43], predict- ing gas solubility in chemical engineering [39], finance modeling in economics area [14] and hydrology in biology area [40]. Chaotic functions have the behavior of dynamic systems which are highly sensitive to initial conditions. Each point in a chaotic system is arbitrarily close to other points with different future trajectories. As a result, an small change in the existing trajectory can lead to considerably different behavior [11,12].
In the literature, there have been a large number of publications regarding improvements and applications of the DE algorithm in many fields, such as chemical optimization [44], image segmenta- tion [27], human detection [5], economic dispatch optimization [37], shape matching problem [1], object detection [42], among the others [48]. Babu and Angira [2] proposed the modified selec- tion procedure that was used for a single array, for the optimiza- tion of non-linear chemical processes. The proposed modified DE algorithm was compared to classic DE algorithm for optimization problems of benchmark test functions and selected non-linear chemical processes. Babu and Munawar [3] introduced DE algo- rithm’s ten different strategies for the optimal design of shell- and-tube heat exchangers. In [6], the ranking-based mutation operator was integrated into the original DE algorithm to acceler- ate the convergence rate for multi objective optimization prob- lems. Draa et al. [10] presented the idea that is about the tuning of the DE’s parameters using sinusoidal function. There were six different configurations of this sinusoidal function based parame- ter adjustment for both scale factor and crossover constant between the upper and lower bounds of these parameters. The application of this proposed strategies is very hard for the real time microcontroller based implementations. Gong et al. [13] proposed two different adaptive strategy selection, namely probability matching and adaptive pursuit to select the most suitable strategy during the optimization process. Although the proposed selection methods brought some advantages, time complexity of the DE algorithm including these methods increases. In [26], a new muta- tion strategy that is based on the weighted difference vector between the best and the worst individuals was introduced. The authors presented the performance and the comparison results in their paper. A concept which is called opposition-based differential evolution (ODE) to accelerate the convergence rate of DE algorithm was presented by Rahnamayan et al. [34,35]. ODE uses the oppo- site numbers during the population initialization and also during generation jumping. The proposed algorithm considers an individ- ual in population and its corresponding opposite individual is cal- culated to accomplish a better solution at each generation according to the jumping rate [34,35]. Zhang and Yuen [50] intro- duced the new method about the mutation operator to accelerate the convergence rate. In the study by Poikolainen et al. [29], a soft- ware module consists of three stages was presented to determine the most interesting areas of the search domain. But there was no discussion about the run times of the proposed algorithms. Qi et al. [33] proposed the a hybrid immune multi-objective optimiza- tion algorithm with differential evolution inspired recombination. In the proposed recombination operator, two types of search direc- tions were determined according to the other two neighboring individuals in the current population. Mohamed [52] introduced a new triangular mutation rule for DE algorithm. In [53] and [55], the DE algorithm based on a new mutation rule was proposed. It utilizes the information of good and bad vectors in the popula- tion. Mohamed and Suganthan [54] presented a new triangular
mutation operator for solving global numerical optimization problems.
In the studies regarding combination with chaotic dynamic systems and DE algorithm, a logistic map based DE algorithm was presented by Zhang et al. [49] for short-term scheduling and a self-adaptive chaotic DE algorithm using gamma distribution was introduced by Coelho et al. [9]. Both of these papers include the logistic map as the chaos function. The logistic map is a poly- nomial mapping of second degree in discrete time. In terms of ease solution, the authors generally prefer the chaotic maps, such as logistic map, baker’s map, Henon map, etc., instead of chaotic sys- tems in continuous time.
In this study, the new random number generator based on the solution of the chaotic functions was proposed for selection of the candidates from population at the mutation, crossover opera- tions and for the initialization of the population in DE algorithm. There are four chaotic systems, such as Lorenz attractor [11,12], Rössler attractor [45], Chua circuit and Mackey-Glass system to use in the random number generator procedure. To evaluate the performances of the proposed CDE algorithms, ten benchmark functions are taken from the literature and the popular heuristic algorithms, such as DE, PSO, ABC, SA and TACO algorithms, are compared with the proposed CDE algorithms. Besides, we used the CEC 2014 test suite benchmark problems to evaluate the per- formance of proposed CDE algorithms. For the CDE algorithms and classic DE algorithm, the results obtained during baker’s yeast drying optimization process are compared with each others.
The paper is organized as follows. The differential evolution algorithm is briefly presented in Section 2. Section 3 gives informa- tion about the four different chaotic system definition being used to generate random number in the proposed CDE algorithm. The concept of the proposed CDE algorithms is presented in Section 4. The next section includes the information about the benchmark functions used to evaluate the performances of the CDE algorithms. In Section 6, there is short information regarding the optimization problem in the baker’s yeast drying process. In Section 7, the per- formances of the CDE algorithms for optimization problems are discussed according to the mean best solution, the number of func- tion evaluations (NFE) and CPU-time metrics. Besides, the compar- ison between the proposed CDE algorithms and the classic DE algorithm is presented for optimization of the baker’s yeast drying process. Finally, the paper is concluded in Section 8.

Differential evolution algorithm

Differential evolution (DE) algorithm is a simple powerful and influential evolutionary algorithm for solution of the global opti- mization, introduced by Price and Storn [32]. On the contrary sim- ple genetic algorithm which uses binary coding to represent the individuals in the population, DE algorithm uses floating point cod- ing to stand for each individuals. The important idea of DE algo- rithm is based on generating trial parameter vectors. These vectors are obtained by adding the difference between two individ- uals to a third individual in population. Mutation and crossover operators are used to generate new individuals, and then selection operator determines which of the vectors will carry on into the next generation [31].
The structure of the DE algorithm resembles the structures of other population-based optimization algorithms. DE consists of three important parameters, such as scaling factor (SF), crossover constant (CR) and population size (PS). A population includes the PS individuals, each of which comprises the value of the variable in the feasible region of the optimization problem [44]. At the beginning of DE algorithm, PS is determined as depend on opti- mization parameters and it is not changed during the optimization

U. Yüzgeç, M. Eser / Egyptian Informatics Journal 19 (2018) 151–163	153


process. The initial population can be chosen randomly. DE algo- rithms have got three genetic operators, such as mutation, cross- over and selection [31,41].
Mutation and crossover operators generate new trial individu- als and selection operator determines suitable individuals which have got maximum/minimum fitness values and in this way pop- ulation consists of the better individuals in that generation [44]. For mutation procedure, there are ten strategies that used in the
different DE algorithms. A strategy that works out to be the best

1. Lorenz attractor

The Lorenz attractor studied by Edward Lorenz is a chaotic sys- tem that includes ordinary differential equations [24]. This attrac- tor presents chaotic attributes for certain parameter values and initial conditions. The model is a chaotic system with three ordi- nary differential equations known as the Lorenz equations:
x_ = s · (y — x)

for a given problem may not work well when applied for a different problem. The strategy to be adopted for each problem is to be
y_ = x · (r — z)— y
z_ = x · y — b · z
(8)

determined separately by trial and error. Five DE strategies used for mutation process are given below:
vi;g+1 = xi;g + F(xb;g — xi;g )+ F(xr1;g — xr2;g )	(1)

vi;g+1 = xr3;g + F(xr1;g — xr2;g )	(2)

vi;g+1 = xb;g + F(xr1;g — xr2;g )	(3)

vi;g+1 = xb;g + F(xr1;g — xr2;g )+ F(xr3;g — xr4;g )	(4)
where x; y; z represent the system states and s; r; b denote the sys- tem parameters. In this study, these system parameters were deter- mined such as s 11; r 25; b 8/3. These equations were obtained from simplified mathematical model developed for atmo- spheric convection [24].

Rössler attractor

Rössler attractor is formed by three differential equations that are useful in modeling equilibrium in chemical reactions. The

vi;g+1
= xr1;g
+ F(xr2;g
xr3;g
)+ F(x

r4;g
xr5;g
)	(5)
Rössler attractor behaves similarly to the Lorenz attractor, but also be easier to analyze [36]. The equations of the Rössler attractor are

In this equations, vi;g+1 denotes the mutant individuals for the next generation, xi;g is the individual with the running index (i), xb;g is the individual which has got the best fitness value in the pop- ulation, xr1;g , xr2;g ,.. ., xr5;g represent the individuals that chosen ran-
domly from the population. The scale factor (F) is a constant value
given below:
x_ = —y — z y_ = x + a · y
z_ = b + z · (x — c)


(9)

that is in the range from 0 to 2.
In the crossover procedure, according to the comparison of the random number and crossover constant (CR), the trial individual ui;g+1 is selected from the current individual or the mutant individ-
ual. The crossover equation is given by Eq. (6),
where x; y; z denote the system states and a; b; c are the system parameters. In this study, these parameters were selected as a = 0.2; b = 0.2; c = 5.

Chua circuit


ui;g+1
vi;g+1; if r 6 CR xi;g;	if r > CR
(6)

Chua’s circuit is a electronic circuit known as nonperiodic oscil- lator. This circuit produces an oscillating waveform that exhibits

where r denotes a random number which is in range [0 1]. At the end of mutation and crossover procedures, individuals of next gen- eration are selected from current population by the selection proce- dure. Selection procedure for the minimization problem is given below:
classic chaos behavior [7,8]. Chua circuit consists of two capacitors, one inductance, one resistance and one Chua diode. As the results of analyzing the Chua circuit, three ordinary differential equations are found as below:
x_ = a[y — x — f (x)]


xi;g+1
ui;g+1; if f (ui;g+1) < f (xi;g )
xi;g;	otherwise
(7)
y_ = x — y + z z_ = —by
(10)

where xi;g+1 denotes the individual with the running index (i) at the next generation and f represents the fitness value. According to the comparison between the fitness value of the trial individual ui;g+1
and the target individual with the running index (i) xi;g , the individ-
ual with the minimum fitness value is selected for the next
where z denotes inductance current, x and y represent the voltage of the C1 and C2 capacities. a and b are the parameters determined by the particular values of the circuit components. The function f(x)
defines the response of the nonlinear resistance and it’s equation is given below

generation.
f(x)= m · V
1
m — m )(|V
+ B |— |V
B |)	(11)

tor SF is more sensitive than that of crossover probability con- stant CR for DE algorithms. In the optimization process, DE algorithm repeats the above three operators until a stop criterion is reached.

3. Chaotic systems

This section consists of the four different chaotic system defini- tion that are used for random number generator in the DE algo- rithm and the mathematical formulations of these systems. In this study, Lorenz attractor, Rössler attractor, Chua circuit and Mackey-Glass equation were selected among the chaotic systems.
In Chua circuit, the parameters were determined as a = 15.6,
b = 28, m0 = —1.143, m1 = —0.714.

Mackey-glass system

Mackey-Glass system exhibits the chaotic behaviors based on the complex rhythms observed in physiology control systems [25]. Mackey-Glass system has got one nonlinear delay- differential equation given below.
x_	 ax(t — s) 	bx t	12
1 + xc(t — s)



a, b, c are real numbers and s denotes the time delay in the Eq.12.  In  this  study,  these  coefficients  are  used  as a = 0.2, b = 0.1, c = 10 and s = 17.

Chaotic based differential evolution algorithm

In this study, the chaotic systems such as Lorenz, Rössler attrac- tors were proposed to generate the individuals in the initial popu- lation and the random values (Eq. 1–6) in the mutation and crossover procedures instead of the random number generator. In the optimization process, the initial values produced by the ran- dom number generator can be similar or same values with each other. This is undesirable condition because of reducing the diver- sity in the initial population. In chaotic based differential evolution algorithm, chaotic systems are solved for different initial seed val- ues to obtain different number series at each runs [11,12]. These initial values are the differences between the running/compiling times and the predefined default time. Fig. 1 shows the pseudo code of chaotic DE algorithm.

Benchmark functions

Ten benchmark functions from literature [15] were used to test the performance of the proposed chaotic DE algorithm. The infor- mation regarding the selected benchmark functions are given in Table 1. These functions have different characteristic. Ackley func- tion is characterized by a nearly flat outer region, and a large hole



Fig. 2. The boundary strategy of chaotic DE algorithm.


at the center, Holder table function has many local minimal points and four global minimal points at the corners. Rastrigin is highly multimodal function, but locations of the minimal points are dis- tributed. Rosenbrock is unimodal function, and the global mini- mum lies in a narrow, parabolic valley. Guinta and Himmelblau functions have not local minimal points and are characterized by almost flat area. Pen holder and Test tube holder functions have many local minimal points. Schweffel is complex function with many local minimal points. Six-hump camel function has got smooth surface and two global minimal points.

Optimization of baker’s yeast drying process

The fluidized-bed drying technique plays an important role among modern drying methods. It is used mainly for granular materials; on the other hand it is applicable also in the drying of solutions, pastes and liquid sprayed onto the fluidized inert bed [46,47]. The drying method is based on passing hot air through




Fig. 1. The pseudo code of chaotic DE algorithm.


Table 1
Benchmark Functions.

Function name	Problem
Ackley (FN1)	f (x)= —a exp —bqﬃ1ﬃﬃPﬃﬃﬃﬃﬃdﬃﬃﬃﬃﬃﬃxﬃﬃﬃ2ﬃﬃ — exp 1 Pd






cos(cxi) + a + exp(1)

Holder table (FN2)	f (x)= — sin(x )cos(x )exp  1 — ,xﬃﬃ2ﬃﬃ+ﬃﬃﬃxﬃ2ﬃﬃ 

Rastrigin (FN3)	f (x)= 10d + Pd
 x2 — 10cos(2pxi) 

Rosenbrock (FN4)	f (x)= Pd—1 h100(xi 1 — x2 2
xi — 1)2 i

Giunta (FN5)	f (x)= 0.6 + Pd
hsin2 1 — 16 xi —  1  sin 4 — 64 xi — sin 1 — 16 xi i


Penholder (FN6)
i=1
  
15	50
,xﬃﬃ2ﬃﬃ+ﬃﬃﬃxﬃ2ﬃﬃ
15	15
 —1

f (x)= —exp exp  —
Himmelblau (FN7)	f (x)= (x2 + x2 — 11 2
1  2 + 1  cos(x1)cos(x2)

x1 + x2 — 7 2

Schweffel (FN8)	f (x)= 418.9829d — Pd
xi sinp|ﬃﬃxﬃﬃiﬃﬃ|ﬃ

Six-hump Camel (FN9)	f (x)= 4 — 2.1x2 + x4 x2 + x x + (—4 + 4x2)x2

Testtubeholder (FN10)	f (x)= —4 exp cos 1 x2 + 1 x2  sin(x1)cos(x2) 




Table 2
Experimental results (Mean Best & Std Dev.) with 50 independent runs of Chaotic based DE algorithms (CDE1, CDE2, CDE3, CDE4), DE, PSO, ABC, SA and TACO algorithms. CDE1: Lorenz, CDE2: Rossler CDE3: Chua CDE4: Mackey-Glass.





FN2	—19.208 (6.83e—9)	—15.659 (4.336)	—19.208 (5.89e—4)	—19.168 (6.69e—2)	—18.887 (6.33e—1)	—19.208 (9.89e—9)	—18.197 (4.045)	—11.777 (7.451)	—19.208 (2.61e—9)
FN3	1.99e—2 (1.41e—1)	9.79e—1 (8.17e—1)	9.29e—5 (4.57e—4)	8.97e—1 (6.26e—1)	4.39e—1 (5.37e—1)	3.98e—2 (1.97e—1)	5.57e—1 (1.919)	9.95e—1 (1.463)	1.035 (4.919)
FN4	2.15e—7 (7.10e—7)	9.36e—3 (1.68e—2)	1.09e—2 (1.06e—2)	2.97e—2 (4.32e—2)	3.35e—2 (5.47e—2)	1.00e—8 (1.12e—8)	1.27e—8 (1.32e—8)	1.09e—8 (1.02e—8)	3.99e—2 (1.14e—1)
FN5	6.44e—2 (8.14e—9)	6.45e—2 (1.01e—5)	6.45e—2 (3.07e—10)	6.48e—2 (6.37e—4)	6.45e—2 (3.34e—5)	6.44e—2 (1.39e—8)	6.44e—2 (1.47e—8)	6.44e—2 (1.39e—8)	6.73e—2 (2.03e—2)
FN6	—9.64e—1 (1.35e—8)  —9.53e—1 (1.93e—2)  —9.64e—1 (2.51e—7)  —9.63e-1 (5.69e—4)	—9.53e—1 (1.82e—2)  —9.64e—1 (9.18e—9)  —9.21e—1 (1.31e—1)	—8.35e—1 (1.73e—1)  —9.55e—1 (6.08e—2)
FN7	9.83e—6 (6.36e—5)	1.85e—2 (1.18e—1)	3.14e—4 (7.29e—4)	6.94e—2 (1.33e—1)	8.98e—3 (1.22e—2)	1.28e—8 (1.33e—8)	1.03e—8 (1.24e—8)	1.43e—8 (2.38e—8)	8.00e—4 (2.38e—3)
FN8	—8.37e+2 (8.45e—9)	—6.98e+2 (9.95e+1)	—8.38e+2 (5.93e—1)	—8.04+2 (5.16e+1)	—7.05e+2 (9.21e+1)	—7.59e+2 (9.75e+1)	—6.95e+2 (1.82e+2)	—4.18e+2 (2.6e+2)	—7.82e+2 (1.17e+2)
FN9	—1.0316 (1.38e—8)	—1.0151 (1.15e—1)	—1.0316 (6.34e—8)	—1.0151 (2.76e—2)	—5.50e—1 (3.73e—1)  —1.0316 (1.39e—8)	—1.0316 (1.13e—8)	—1.0316 (9.61e—9)	—1.0316 (1.01e—5)
FN10  —1.087e+1 (3.92e—3)  —1.081e+1 (9.11e—2)  —1.087e+1 (1.03e—3)  —1.082e+1 (6.04e—2)  —1.076e+1 (1.39e—1)  —1.087e+1 (6.94e—3)  —1.087e+1 (3.92e—3)  —1.083e+1 (4.78e—2)  —1.063e+1 (1.09)





















Table 3
Experimental results (NFE50 & CPU-time50) with 50 independent runs of Chaotic based DE algorithms (CDE1, CDE2, CDE3, CDE4), DE, PSO, ABC, SA and TACO algorithms. CDE1: Lorenz, CDE2: Rossler CDE3: Chua CDE4: Mackey-Glass.

FN	NFE50 (CPU-time50 sec)a
a NFEn: Number of function evaluations, CPU-timen: time taken by CPU per execution (average of ’n’ executions).



the fluidized bed. The fluid bed consists of centrifugal fan to supply air flow from ambient air. There are two essential output parame- ters known as the moisture content and the product temperature in drying process [21]. In general, the drying process has got three phases. In the first phase is loaded with granulated material to be dried. Then drying temperature is increased to initiate constant drying phase. Third is reduced drying phase or called falling rate period. Finally dried material discharged from the dryer when the desired end dry matter was reached [22].
The main target of the drying process optimization is to improve the efficiency in the fluidized bed dryer in terms of energy consumption and quality loss. In order to do this, the production has to be performed minimum energy consumption and maximum quality together [23]. A multi-objective function can be described by total energy, product quality and moisture content. This objec- tive function is given as Eq. (13),
J = auaTa(cp,a + cp,wv Ya)+ b(X¯ — Xd)+ c(Qd — Q )	(13)
where a, b, c denote the weighting factor in the objective function,
ua is the air flow rate (kg/s), Ta represents the air temperature (K),
algorithms were compared with classic DE algorithm, PSO algo- rithm [19,30], ABC algorithm [16–18], SA algorithm [20], TACO
algorithm [28].


Benchmark tests

All chaotic based DE algorithms were coded on PC with Intel(R) Core(TM) i5-3230 M CPU 2.60 GHz/8 GB RAM. The DE strategy used in these algorithms was selected as DE/rand/1/bin and the DE parameters were used as CR = 0.5, F = 0.8. For PSO algorithm, the learning factors (c1,c2) were selected as 2.05 and the evapora- tion coefficient for TACO algorithm was used as 0.1 according to the studies from literature. In all algorithms, population size was determined as 20. The termination criterion was determined as iteration or generation reaches the maximum number of iteration or generation and |fitness(best)— fitness(worst)| = VTR. VTR repre- sents the value to reach and it was used as 1 10—6. The maximum number of iteration was used as 200 for all optimization problems. All bound violation were repaired by holding at the boundary strat-

cp,a
and c

p,w
represent air heat capacity and water vapor (J/kg K)
egy given in Fig. 2. Table 2 summarizes the average results of 50
independent runs of the proposed chaotic based DE algorithms

respectively, Ya is humidity of air (kg water vapor/kg dry air), X¯ is average moisture content (kg water/kg dry solid), Xd is desired
moisture content, Q represents product quality or the loss of pro- duct activity, Qd is desired quality value (%100).

Results and discussion

In this section, the chaotic based DE algorithms were firstly run for different optimization problems to evaluate their perfor- mances. In addition to these simulations, for optimization of the baker’s yeast drying process, the proposed chaotic based DE
and DE, PSO, ABC, SA, TACO algorithms consecutively.
In Table 2, mean best indicates the average of minimum values obtained by the proposed chaotic DE algorithms and the other heuristic algorithms. This indicator represents with the standard deviation (std dev) to evaluate the performances of the algorithms. As can be seen from this table, Lorenz based DE algorithm (CDE1) that reaches the best minimum values in 60% of all test functions. Rossler based DE algorithm (CDE2) found the best global values in 40% of all the test functions. Chua based DE algorithm (CDE3) has got the performance with the best minimum values in 20% of all test functions. Mackey-Glass based DE algorithm (CDE4) is






1


0.5
(a)



1


0.5
(b)



0	0


-0.5	-0.5


-1
20	40	60	80	100	120	140	160	180
iteration

(c)

3
-1
20	40	60	80	100	120	140	160	180
iteration

(d)

3



2	2


1	1


0	0


-1
20	40	60	80	100	120	140	160	180
iteration
-1
20	40	60	80	100	120	140	160	180
iteration


Fig. 3. Average best fitness curves of CDE Algorithms and PSO, ABC, SA and TACO algorithms for test function FN9. All experimental results are means of 50 independent runs. (a) Lorenz based DE Algorithm. (b) Rossler based DE Algorithm. (c) Chua based DE Algorithm. (d) Mackey-Glass based DE Algorithm.






12

10

8

6

4

2


(a)
U. Yüzgeç, M. Eser / Egyptian Informatics Journal 19 (2018) 151–163	157

(b)
12

10

8

6

4

2



20	40	60	80	100	120	140	160	180
iteration

(c)
14
12
10
8
6
4
2
20	40	60	80	100	120	140	160	180
iteration

(d)
14
12
10
8
6
4
2



20	40	60	80	100	120	140	160	180
iteration
20	40	60	80	100	120	140	160	180
iteration


Fig. 4. Average best fitness curves of CDE Algorithms and PSO, ABC, SA and TACO algorithms for test function FN1. All experimental results are means of 50 independent runs. (a) Lorenz based DE Algorithm. (b) Rossler based DE Algorithm. (c) Chua based DE Algorithm. (d) Mackey-Glass based DE Algorithm.




Fig. 5. Average best fitness curves of CDE Algorithms and Differential Evolution Algorithm for selected benchmark functions. All experimental results are means of 50 independent runs. (a) Test function FN1. (b) Test function FN5. (c) Test function FN7. (d) Test function FN10.




Fig. 6. The fitness curves for test function FN10. (a) DE Algorithm. (b) Lorenz based DE Algorithm. (c) Rossler based DE Algorithm. (d) Chua based DE Algorithm. (e) Mackey- Glass based DE Algorithm.



successful for only two functions. Finally, ABC algorithm is the best algorithm in terms of the mean value/standard deviation results. This table result shows that Lorenz based DE algorithm (CDE1) and Rossler based DE algorithm (CDE2) provide very competitive results.
In terms of the number of function evaluations (NFE) and CPU- time, Table 3 summarizes the results obtained by CDE algorithms and DE, PSO, ABC, SA, TACO algorithms. In Table 3, NFE indicator represents with the CPU-time (second) to compare the perfor- mances of all algorithms. Lorenz and Rossler based DE algorithms (CDE1 and CDE2) have the most minimum values among the NFE and CPU-time indicators. Both of CDE algorithms are faster than other heuristic algorithms. Chua based DE algorithm (CDE3) has got the performance with the best NFE and CPU-time values in 50% of all test functions. The comparison shows that the chaotic based DE algorithms give better results than DE algorithm accord- ing to the CPU-time and NFE indicators. The CDE2 algorithm has the best performance according to the NFE and CPU values.
Fig. 3 shows average best fitness curves for the chaotic based DE algorithms and PSO, ABC, SA and TACO algorithms for the test func- tion FN9. For the function FN1, the average best fitness curves with 50 independent runs are plotted in Fig. 4 for each CDE algorithms with the other heuristic algorithms. As can be seen from these fig- ures, it can be said that the proposed CDE algorithms are successful for the both test functions. Fig. 5 shows the average best fitness curves for the CDE algorithms and DE algorithm with 50 indepen- dent runs for the benchmark functions FN1, FN5, FN7, FN10. For
the function FN10, the fitness curves with 50 independent runs are plotted in Fig. 6.


CEC 2014 benchmark tests

In the CEC 2014 tests, there are 30 numerical minimization problems. They consist of the four groups: unimodal functions (F1–F3), simple multimodal functions (F4–F16), hybrid function (F17–F22) and composition functions (F23–F30). The detailed information about the CEC 2014 test functions can be found in [51]. Table 4 gives the experimental results of DE algorithm and pro- posed CDE algorithms for 10D CEC 2014 all test functions. This table presents the best, worst, mean, median and standard vari- ance values of function error values for the 51 runs. In Fig. 7, the boxplots are shown for mean values of function error of the pro- posed CDE algorithms and DE algorithm on 10D. According to this figure, especially CDE1 and CDE2 algorithms present competitive results for all test functions. The performance of the other chaotic algorithms (CDE3 and CDE4) are worse than those of DE, CDE1 and
CDE2 algorithms.
We used a non-parametric Wilcoxon ranksum test to determine if all sets of solutions are different statistically significant or not. This statistical test returns a value that is called p-value. In this study, CDE algorithms and DE algorithm are statistically tested. Table 5 shows the p-values of the Wilcoxon ranksum test over 10D CEC 2014 functions. If the algorithm’s p-value is less than












Table 4
Experimental results of DE algorithm and proposed Chaotic based DE algorithms in for 10D CEC 2014 test functions.

1  440.5 2804.1 1543.1 1530.8 474.8 0.0	9934.8 119.5  1285.0 2447.2 0.0	4412.3 545.7  948.2 1193.6 30649.5 245376.2 77282.7 83482.1 38742.0 57707.8 1532580.2 294622.3 342183.3 243587.2


 










Fig. 7. Boxplot of comparative convergence for all CEC 2014 test functions (a) Func. No. 1–6, (b) Func. No. 7–12, (c) Func. No. 13–18, (d) Func. No. 19–24, (e) Func. No. 25–30.

Table 5
p-Values of the Wilcoxon ranksum test over 10D CEC 2014 functions.
0.05 then it is statistically significant. The statistical tests show that the results are statistically significant for all CDE algorithms.

Optimization of baker’s yeast drying process

The optimization problem of baker’s yeast drying process is given below
minJ(T , Y )	(14)

293 K 6 Ta 6 373 K, 0 6 Ya
6 5.10—3 kg water vapor/ kg dry air	(15)
The air temperature (Ta) and the humidity of air (Ya) are the manipulated variables regarding optimization process. The param- eters of drying process of the baker’s yeast were determined as ini- tial moisture content equals 1.563 kg water/kg dry solid, the air flow rate equals 12000 kg air h—1 for cylindrical granule. Fig. 8 shows the optimization results obtained by chaotic based DE algo- rithms and DE algorithm. The trends of the moisture content, tem- perature and product quality during drying process can be seen from these figures.
According to the final moisture content value at the end of the drying process, all chaotic based DE algorithms have got the same performances approximately, but DE algorithm is better than the proposed chaotic based DE algorithms. The shortest drying time (25 min) belongs to the Mackey-Glass based DE algorithm and all chaotic based DE algorithms have better drying time than classic




99.5

99

98.5

98

97.5

97

96.5


















0	5	10	15	20	25	30
time (min)
330

325

320

315

310

305

300

295

290
0	5	10	15	20	25	30
time (min)

	




1.4

1.2

1

0.8

0.6

0.4

0.2


0	5	10	15	20	25	30
time (min)

Fig. 8. The moisture content, temperature and product quality during optimization process by chaotic based DE algorithms. CDE1: Lorenz based DE algorithm, CDE2: Rossler based DE algorithm, CDE3: Chua based DE algorithm, CDE4: Mackey-Glass based DE algorithm.



370

360

350

340

330

320

310

300






















0	5	10	15	20	25	30
time (min)

x 10-3

4

3

2

1

0

-1

-2

0	5	10	15	20	25	30
time (min)

	

Fig. 9. The optimization results (air temperature and humidity of air) solved by Chaotic based DE algorithms. CDE1: Lorenz based DE algorithm, CDE2: Rossler based DE algorithm, CDE3: Chua based DE algorithm, CDE4: Mackey-Glass based DE algorithm.


Table 6
Optimization results of chaotic based differential evolution algorithms.



DE algorithm. The product quality is the important parameter in the biomass drying process especially. The result obtained by Lorenz based DE algorithm is the best final value in terms of the product quality. As can be seen from the temperature profiles found by all chaotic based DE and classic DE algorithms, the flu- idized bed temperature value increases at the beginning of the pro- cess, then it follows to the fixed stable value, it has rising trend at the end of the process. The profiles of air temperature (Ta) and the humidity of air (Ya) obtained by the proposed algorithms are shown in Fig. 9. The product quality (Q), the energy cost of air (Ja), the final moisture content (Xf) and the total drying period (t)
at the end of the drying process are given in Table 6. The energy cost of air was given as Ja = auaTa(cp,a + cp,wv Ya) in Eq. (13). Accord- ing to the product quality, the best value was observed by Lorenz
based DE algorithm (CDE1) as%98.685. All of the chaotic based DE algorithms have better drying time than the time of classic DE algorithm.
As can be seen from the energy cost values, Mackey-Glass based DE algorithm (CDE4) has got the best minimum cost at the end of the process and the performance of the classic DE algorithm is worse than the performances of the chaotic based DE algorithms. The baker yeast, the microorganism Saccharomyces cerevisiae was used for experimental data of the drying process in this study. In the experimental data for cylindrical granules, the total drying time was measured as 27 min without loading period, the product quality was obtained as%89.6, the moisture content was measured as 0.069 kg/kg and the energy cost of air in drying process was cal- culated as 1.944.500 kJ respectively. The product quality value at the end of the drying process was held on the higher level than the value taken from experimental data. In this way, the dry bio- mass product that has more quality has been obtained by both DE algorithm and chaotic based DE algorithms. Besides, total dry- ing time has been decreased by the chaotic based DE algorithms without CDE2. It is clear that no algorithm’s perform shows
superiorly than the experimental data in terms of moisture content and energy cost of air.

Conclusion

In this paper, Chaotic based Differential Evolution (CDE) algo- rithm has been introduced and compared to classic Differential Evolution (DE) for optimization of benchmark test functions and optimization of baker’s yeast drying process. The chaotic based structure were proposed to generate the individuals in the popula- tion instead of the random number generator. CDE includes four different chaotic systems such as Lorenz, Rossler, Chua and Mackey-Glass functions. The proposed CDE algorithms has been implemented and tested on benchmark optimization problems taken from the literature. The popular heuristic algorithms (DE, PSO, ABC, SA and TACO) have been used for the performance eval- uation works with the proposed CDE algorithms. The comparison results with 50 independent runs show that the performances of the proposed CDE1 and CDE2 algorithms are better than the other heuristic algorithms in terms of the mean best value and standard deviation. According to the CEC 2014 test results, the CDE1 and CDE2 algorithms provide the competitive results.
In this paper, applying DE and CDE algorithms to the optimiza- tion of baker’s yeast drying process was focused. In biomass drying process, there are four important parameters, such as product quality, drying total time, energy cost of used hot air and final moisture content. In comparison with the data taken from a baker’s yeast producer in Turkey, especially the improvement on the pro- duct quality has been provided by CDE algorithms. Besides, it is obvious that the results of CDE algorithms were better than the results of DE algorithm in terms of the process output values except for only moisture content. In the future works, the proposed CDE algorithms will be implemented for different processes and their performances will be evaluated and compared with the other heuristic methods.

References

Asafuddoula M, Ray T, Sarker R. An adaptive hybrid differential evolution algorithm for single objective optimization. Appl Math Comput 2014;231:601–18.
Babu B, Angira R. Modified differential evolution (MDE) for optimization of non-linear chemical processes. Comput Chem Eng 2006;30:989–1002.

Babu B, Munawar S. Differential evolution strategies for optimal design of shell-and-tube heat exchangers. Chem Eng Sci 2007;62:3720–39.
Brest J, Greiner S, Boskovic B, Mernik M, Zumer V. Self-adapting control parameters in differential evolution: a comparative study on numerical benchmark problems. IEEE Trans Evol Comput 2006;10(6):646–57.
Chen N, Chen W-N, Zhang J. Fast detection of human using differential evolution. Signal Process 2015;110:155–63.
Chen X, Du W, Qian F. Multi-objective differential evolution with ranking- based mutation operator and its application in chemical process optimization. Chemomet Intelligent Lab Syst 2014;136:85–96.
Chua LO. The Genesis of Chua’s Circuit. California: Electronics Research Laboratory, College of Engineering, University of California; 1992.
Chua LO, Itoh M, Kocarev L, Eckert K. Chaos synchronization in Chua’s circuit. J Circuits, Syst, Comput 1993;3(1):93–108.
Coelho Ld, Ayala HV, Mariani VC. A self-adaptive chaotic differential evolution algorithm using gamma distribution for unconstrained global optimization. Appl Math Comput 2014;234:452–9.
Draa A, Bouzoubia S, Boukhalfa I. A sinusoidal differential evolution algorithm for numerical optimisation. Appl Soft Comput 2015;27:99–126.
Eser M, Yüzgeç U. Chaotic based differential evolution algorithm. 2nd International Symposium on Innovative Technologies in Engineering and Science (pp. 201–210) (2014b) Karabük: ISITES 2014.
Eser M, Yüzgeç, U. Comparison of Lorenz and Rossler based differential evolution algorithms. Electrical, Electronics and Computer Engineering Symposium (pp. 713–717). Bursa: ELECO 2014.
Gong W, Fialho Á, Cai Z, Li H. Adaptive strategy selection in differential evolution for numerical optimization: an empirical study. Inf Sci 2011;181:5364–86.
Guégan D. Chaos in economics and finance. Annual Rev Control 2009;33 (1):89–93.
Jamil M, Yang XS. A literature survey of benchmark functions for global optimisation problems. Internat J Mathemat Modell Numer Opt 2013;4 (2):150–94.
Karaboga D, Akay B. A comparative study of Artificial Bee Colony algorithm. Appl Math Comput 2009;214(1):108–32.
Karaboga D, Basturk B. On the performance of artificial bee colony (ABC) algorithm. Appl Soft Comput J 2008;8(1):687–97.
Karaboga D, Ozturk C. A novel clustering approach: Artificial Bee Colony (ABC) algorithm. Appl Soft Comput J 2011;11(1):652–7.
Kennedy J, Eberhart R. Particle swarm optimization. Neural Networks. Proceedings IEEE International Conference on 1995: pp. 1942–1948.
Kirkpatrick S, Gelatt CD, Vecchi MP. Optimization by Simulated Annealing. Sci 1983;220(4598):671–80.
Köni M, Türker M, Yüzgeç U, Dinçer H, Kapucu H. Adaptive modeling of baker’s yeast drying in batch fluidized bed. Control Eng Pract 2009;17:503–17.
Köni M, Yüzgeç U, Türker M, Dinçer H. Adaptive fuzzy control of baker’s yeast drying in batch fluidized bed. Drying Technol 2010;28:205–13.
Köni M, Yüzgeç U, Türker M, Dinçer H. Optimal quality control of baker’s yeast drying in large scale batch fluidized bed. Chem Eng Proc 2009;48:1361–70.
Lorenz EN. Deterministic Nonperiodic Flow. J Atmos Sci 1963;20:130–41.
Mackey M, Glass L. Oscilliation and Chaos in phyiological control systems. Sci New Series 1977;197:287–9.
Mohamed AW, Sabry HZ, Khorshid M. An alternative differential evolution algorithm for global optimization. J Adv Res 2012;3:149–65.
Novo J, Santos J, Penedo M. Multiobjective differential evolution in the optimization of topological active models. Appl Soft Comput 2013;13:3167–77.
Özbakir L, Baykasoǧlu A, Kulluk S, Yapici H. TACO-miner: an ant colony based algorithm for rule extraction from trained neural networks. Expert Syst Appl 2009;36(10):12295–305.
Poikolainen I, Neri F, Caraffini F. Cluster-based population initialization for differential evolution frameworks. Inf Sci 2015;297:216–35.
Poli R, Kennedy J, Blackwell T. Particle swarm optimization. Swarm Intell 2007;1(1):33–57.
Price K. An introduction to differential evolution. In: Corne D, Dorigo M, Glover F, editors. New Ideas Opt. London: McGraw-Hill; 1999. p. 79–108.
Price K, Storn R. Differential evolution: a simple evolution strategy for fast optimization. Dr Dobb’s J Software Tools 1997;22(4):18–24.
Qi Y, Hou Z, Yin M, Sun H, Huang J. An immune multi-objective optimization algorithm with differential evolution inspired recombination. Appl Soft Comp 2015;29:395–410.
Rahnamayan S, Tizhoosh H, Salama M. Opposition-based differential evolution. IEEE Trans Evol Comput 2008;12(1):64–79.
Rahnamayan S, Tizhoosh H, Salama M. Opposition-based differential evolution. IEEE Transact Evolut Comput 2008;12(1):64–79.
Rössler O. An equation for continuous chaos. Phys Lett A 1976;57:397–8.
Sayah S, Hamouda A. A hybrid differential evolution algorithm based on particle swarm optimization for nonconvex economic dispatch problems. Appl Soft Comput 2013;13:1608–19.
Shen CY, Evans TE, Finette S. Polynomial chaos quantification of the growth of uncertainty investigated with a Lorenz model. J Atmos Oceanic Technol 2010;27(6):1059–71.
Shengrui Z, Baisheng N, Shuiwen L, Hui W. Model of gas concentration forecast based on chaos theory. Procedia Eng 2011;26:211–7.
Sivakumar B. Chaos theory in hydrology: important issues and interpretations. J Hydrol 2000.
Storn R, Price K. Differential evolution-A simple and efficient heuristic for global optimization over continuous spaces. J Global Optim 1997;11:341–59.
Ugolotti R, Nashed YS, Mesejo P, Ivekovic S, Mussi L, Cagnoni S. Particle Swarm optimization and differential evolution for model-based object detection. Appl Soft Comput 2013;13:3092–105.
Wu CW, Chua LO. A simple way to synchronize chaotic systems with applications to secure communication systems. Int J Bifurcation Chaos 1993;3(6):1619–27.
Yüzgeç U. Performance comparison of differential evolution techniques on optimization of feeding profile for an industrial scale fed-batch baker’s yeast fermentation process. ISA Trans 2010;49:167–76.
Yüzgeç U, Eser M. Rossler based chaotic differential evolution algorithm. Bilecik Seyh Edebali University Science Journal 2014;1(2):9–15.
Yüzgeç U, Becerikli Y, Türker M. Dynamic neural network based model predictive control of an industrial baker’s yeast drying process. IEEE Trans Neural Net 2008;19(7):1231–42.
Yüzgeç U, Becerikli Y, Türker M. Nonlinear predictive control of a drying process using genetic algorithms. ISA Trans 2006;45:589–602.
Zhang G, Cheng J, Gheorghe M, Meng Q. A hybrid approach based on differential evolution and tissue membrane systems for solving constrained manufacturing parameter optimization problems. Appl Soft Comput 2013;13:1528–42.
Zhang J, Lin S, Qiu W. A modified chaotic differential evolution algorithm for short-term optimal hydrothermal scheduling. Elect Power Energy Sys 2015;65:159–68.
Zhang X, Yuen SY. A directional mutation operator for differential evolution algorithms. Appl Soft Comput 2015;30:529–48.
Liang JJ, Qu BY, Suganthan PN. Problem definitions and evaluation criteria for the CEC 2014 special session and competition on single objective real parameter numerical optimization. Technical Report 201311; 2013.
Mohamed AW. A novel differential evolution algorithm for solving constrained engineering optimization problems. J Intell Manuf 2017:1–34.
Mohamed AW. Solving large-scale global optimization problems using enhanced adaptive differential evolution algorithm. Complex Intelligent Syst 2017;3:205–31.
Mohamed AW, Suganthan PN. Real-parameter unconstrained optimization based on enhanced fitness-adaptive differential evolution algorithm with novel mutation. Soft Comput 2017:1–21.
Mohamed AW, Mohamed AK. Adaptive guided differential evolution algorithm with novel mutation for numerical optimization. Int J Mach Learn Cybern 2017:1–25.
