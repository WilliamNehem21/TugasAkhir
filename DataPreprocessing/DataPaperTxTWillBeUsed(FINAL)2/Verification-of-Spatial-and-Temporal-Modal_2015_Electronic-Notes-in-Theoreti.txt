Available online at www.sciencedirect.com


Electronic Notes in Theoretical Computer Science 316 (2015) 29–44
www.elsevier.com/locate/entcs

Verification of Spatial and Temporal Modalities in Biochemical Systems
Davide Chiarugi 1
Max Planck Institute of Colloids and Interfaces, Potsdam-Golm. Germany.
Moreno Falaschi Diana Hermith
Dipartimento di Ingegneria dell’informazione e Scienze Matematiche.
Universita` degli Studi di Siena. Italy.
Carlos Olarte
ECT, Universidade Federal do Rio Grande do Norte. Brazil.
DECC, Universidad Javeriana Cali. Colombia.

Abstract
Biochemical systems such as metabolic and signaling pathways tend to be arranged in a physical space: the product of one reaction must be in the right place to become the reactant for the subsequent reaction in the pathway. Moreover, in some cases, the behavior of the systems can depend on both, the location of the reactants as well as on the time needed for the reaction to occur. We address the problem of specifying and verifying properties of biochemical systems that exhibit both temporal and spatial modalities at the same time. For that, we use as specification language a fragment of intuitionistic linear logic with subexponentials (SELL). The subexponential signature allows us to capture the spatial relations among the different components of the system and the timed constraints for reactions to occur. We show that our framework is general enough to give a declarative semantics to P-Systems and we show that such logical characterization has a strong level of adequacy. Hence, derivations in SELL follow exactly the behavior of the modeled system.
Keywords: Biochemical systems, linear logic, spatial and temporal modalities.


Introduction
One of the main difficulties of building computational models for biological systems arise from the characteristics of the available information. Indeed, even for the best- studied systems, the known data cannot describe exhaustively the properties of each molecular species; even less known are the details of spatial information and the

1 Email: {davide.chiarugi, carlos.olarte}@gmail.com , {moreno.falaschi, diana.hermith}@unisi.it

http://dx.doi.org/10.1016/j.entcs.2015.06.009
1571-0661/© 2015 The Authors. Published by Elsevier B.V.
This is an open access article under the CC BY-NC-ND license (http://creativecommons.org/licenses/by-nc-nd/4.0/).

timing of events. Thus, desirable features of a computational modeling framework should regard the capability of dealing with information often both incomplete and of non-uniform quality.
Another desirable feature for computational models is the ability to describe a biological system at different levels of abstraction. This may be useful to capture the variability of subnetworks in the topology of a biochemical reactions network, for instance, at the level of metabolic or signaling pathways.
Several computational frameworks for modeling in different ways various as- pects of biological systems have been defined in the last decade (see e.g., [28,21,20,25,38,52,39,12,7,29]). However, so far we have not seen one single for- malism for modeling reaction systems with both time and space, and, at the same time, with the ability to express a logic for proving properties which can depend both on time and space locations. Normally, there is one formalism and a language for the modeling and the specification of a biological system and at least another different formalism for expressing the properties of interest (e.g., a temporal logic) and for proving them (e.g., by using a model checker).
Our approach for specifying and studying biological systems grounds on Con- current Constraint Programming (CCP) [50] and on linear logic (LL) [30]. The former is a model for concurrency where agents interact by telling and asking con- straints (i.e., logical formulas) into a store of partial information; the latter, is a substructural logic where formulas are seen as resources. Interestingly, the language of CCP processes is flexible enough to faithfully capture different modalities of con- current systems (e.g., temporal, spatial and epistemic modalities) while keeping a declarative semantics based on (intuitionistic) LL as shown in [27,42]. This means that CCP models can be seen as runnable speciﬁcations: the model can be executed to observe the traces of the systems and, more importantly, the underlying theory of CCP and all the meta theory developed for LL can be used to verify systems’ properties.
Another salient characteristic of CCP is its ability to deal with partial informa- tion: constraints add information on the system variables (e.g., x > 42) rather than determining the value of the variables. Hence, the more information is obtained the more constraints are accumulated and more information can be deduced from the system. Constraints also provide a compact representation of the state of the sys- tem (as predicates on system variables). Moreover, being able to deal with partial information is certainly useful in situations where either some components of the system are not fully specified or we do not have enough quantitative information about them.
In a previous work [16] we used the ntcc calculus [41], a non-deterministic temporal extension of CCP, for representing reaction rules in biological systems. This language allowed us to model discrete-time, and hence biological systems where reactions have a duration over time. Later, in [36], we described a modeling strategy based on ntcc where starting from an abstract model, we built refinements adding further details coming from experimentation or abstract assumptions. In a following work [14], we modeled spatial distributions in biochemical reactions. This thus

Γ,F,H −→ G
⊗L Γ1 −→ F Γ2 −→ H ⊗R Γ1 −→ F Γ2,H −→ G (L	Γ,F −→ H (R

Γ,F ⊗ H −→ G
Γ1, Γ2 −→ F ⊗ H
Γ1, Γ2,F ( H −→ G
Γ −→ F ( H



 Γ, Fi −→ G  & Γ, F1 & F2 −→ G Li
Γ −→ F Γ −→ H &R Γ −→ F & H
Γ,F [e/x] −→ G


Γ, ∃x.F −→ G ∃L
Γ −→ G[t/x]

Γ −→ ∃x.G ∃R


Fig. 1. A fragment of the LL introduction rules. e is a fresh variable. Rules ∀L/R are dual to ∃R/L

allowed us to deal with cell membranes, or more in general, with the possibility to express the fact that a reaction can take place only when some reactants are in the same “location”.
In this paper we deal with the problem of specifying and verifying properties of biochemical systems that exhibit both temporal and spatial modalities at the same time. For that, we shall encode the proposed systems as formulas in linear logic with subexponentials (SELL) [23]. The corresponding CCP language able to manipulate such SELL formulas was studied in [42] and [43]. We omit this language here to focus on the logical framework that allows for proving, in a natural way, some relevant properties of the modeled system.
More precisely, we shall show that it is possible to use two kind of subexponen- tials for representing the two main dimensions, namely time and space, for modeling biochemical systems where reactions depend on the location of reactants and on the duration of interactions. Then, we show the expressiveness of our framework by en- coding P-Systems [46,3], a general model of computation inspired on cells structures. We show that our logical characterization of P-Systems has a strong level of ade- quacy, which means that derivations in the logical system follow exactly the rules (reactions) defined for the modeled system. We also show how to exploit the under- lying logic for expressing, and proving, properties of interest that involve temporal and spatial modalities.
The rest of the paper is structured as follows. In Section 2 we recall some concepts about subexponentials in linear logic. Section 3 defines an encoding of biochemical reactions that considers spatial and temporal modalities. In Section 4 we show how to exploit the underlying logic for expressing properties of the system and how to encode P-Systems as SELL specifications. Section 5 discusses some related work and concludes the paper. The detailed proofs of the results here presented can be found in the companion technical report [17]. In [17] the reader may also find an application of the framework developed here in the context of the TWEAK-Fn14 cell signaling pathway [5].

Linear Logic with Subexponentials
Linear logic (LL) with subexponentials (SELL) [23] shares with LL [30] all its con- nectives except the exponentials ! and ?. Figure 1 presents the introduction rules of the fragment of intuitionistic SELL that will be used here. As one can observe from these rules, in particular in the ⊗R rule, LL formulas are not always allowed to contract and weaken. These rules are controlled in LL by the exponentials !, ? and in SELL by the subexponentials, written as !a, ?a, where a is a label.

Formally, a SELL system is specified by a subexponential signature Σ= ⟨I, ≤,U⟩, where I is a set of labels, U ⊆ I specifies which subexponentials allow weakening and contraction, and ≤ is a pre-order among the elements of I. We shall use a, b, ... to range over elements in I. For a given such subexponential signature, SELLΣ is the system obtained by adding the following inference rules to the LL rules in Figure 1:
For each b ∈ U , we add the following structural rules:

  Γ −→ G  W
Γ, !bF −→ G
Γ, !bF, !bF −→ G
Γ, !bF −→ G	C

That is, one can specify the subexponentials that behave linearly, namely those in I \ U , and those that behave classically, namely those in U .
For each a ∈ I, we add the dereliction rule to the left and the promotion rule to the right:
Γ,F −→ G	a	!a1 F1,..., !an Fn −→ F	a

Γ, !aF −→ G ! L
!a1 F1,..., !an Fn −→ !aF ! R, provided a ≤ ai for 1 ≤ i ≤ n.

Observe that provability is preserved downwards: if the sequent Γ −→ !aP is provable in SELLΣ, then so is the sequent Γ −→ !bP for all b ≤ a. We shall omit the signature Σ when it is understood from the context.
It is known that subexponentials greatly increase the expressiveness of the system when compared to LL. For instance, in [42], it is shown how the subexpo- nentials can be interpreted as temporal units or spatial and epistemic modalities in distributed systems. For that, in [42] universal (A) and existential ( ) quantifica- tion on subexponentials are introduced with the following proof rules:


 Γ,P [l/lx] −→ G  A
Γ, Alx : a.P −→ G	L
 Γ −→ G[le/lx] A
Γ −→ Alx : a.G	R
 Γ,P [le/lx] −→ G
Γ, x : a.P −→ G
 Γ −→ G[l/lx]  
L  Γ −→  lx : a.G	R

In these rules, le is fresh and it represents a subexponential variable playing a similar role as eigenvariables. The generic variable lx : a, where a ∈ I plays the role of the type of lx, represents any subexponential constant lc in the ideal of a, i.e., lc ≤ a.
The above system, called SELLA, enjoys good proof theoretic properties: [23] (resp. [42]) proved that SELL (resp. SELLA) admits cut-elimination. Moreover, a sound and complete focused proof system [2] for those systems can be given [42]. Focusing is a powerful discipline on proofs which can be seen as normal form proofs for proof search. In fact, we shall use focusing to prove the adequacy of specifications as shown in the forthcoming sections.

Spatial and Temporal Dependencies in SELLA
In this section we show how spatial and temporal dependencies in biochemical re- actions can be neatly modeled as formulas in SELLA. The encoding we propose not only gives a logical meaning to those systems but also exhibits a close cor- respondence between the behavior of the system and the shape of the proofs in

SELLA.
We start by describing the kind of reactions we shall consider. We assume a set of reactions of the shape:
rj :	[c1.A1]a + ··· + [cn.An]a −→k [d1.B1]b + ··· + [dm.Bn]b	(1) meaning that ci units of Ai located in the space domain ai are consumed in k
time-units to produce dj units of Bj in the space domain bj.
In order to combine spatial and temporal modalities in SELLA we need first to define a subexponential signature as the one depicted in Figure 2. The only un- bounded subexponentials are tω (time) and sω (space). The former will be used to mark the set of reactions that can be used as many times as needed. The second will be used in the encoding of P-System in Section 4.2. The linear subexponen- tials 1, 2, 3, ··· represents temporal time-units. The subexponentials i+ represent the time-units starting from i. For instance, a subexponential variable lx : 4+ can be instantiated with any time-unit (in the future) starting from 4. Those subex- ponentials will be used to specify system’s properties as we explain in Section 4. Finally, the linear subexponentials sa.i will be used to mark the formulas (reactants) available in the space domain sa in the time-unit i.
For each reactant A in the system, we assume to have a constant symbol A in the logic. We also assume to have an uninterpreted binary predicate ct(·, ·). Intuitively, the formula !sb.2ct(A, c) means that the concentration of A in the space domain sb is c during the second time-unit. As usual, c is defined as the n-th application of the successor function suc to the constant 0. We shall use sucn(x) to denote the n-th application of suc to x.
We model the state of the system at time-unit t (i.e., the concentration of each specie in each space at time t) as the formula
state(t) d=ef N N !s.t [ct(Ai, ci)]
s∈S Ai∈A
where A denotes the set of reactants and S the set of domain spaces. If there are no species of kind Aj in the space sk, then cj = 0. Intuitively, !s.t [ct(A, c)] means that the formula ct(A, c) is available at location s.t that represents the time-unit t in the space domain s. Hence, in location s.t we can deduce that the concentration of A is c.
We shall model the set of reaction of the system as the following formula:
eqs = !	[Alx :1 + . [eq1(lx)& ··· &eqk(lx)]]
The unbounded subexponential !tω allows us to use the set of reactions as many times as needed. The universal quantification Alx : +1 says that at any time-unit the reactions are available. Moreover, the use of the LL connective & allows us to choose (non-deterministically) one of the reactions and then discard the others.
The model of a reaction (Equation 1) is a formula that first checks if the needed reactants are available in the specific space domains. If this is the case, the reactants are consumed and the products are added k time-units later:


	
(a) Spatial domain	(b) Temporal domain

Fig. 2. Subexponential structure for spatial domain (a) and time (b). b → a means a ≤ b. The subexpo- nential i+ represent the time-units starting from i. The subexponential sa.i marks the formulas (reactants) available in the space domain sa in the time-unit i. The only unbounded subexponentials are sω and tω .

def
= ∀x. [consume(t) −◦ produce(t + k)]

consume(t)
where x = x1, ..., xn and
def
=	!
s∈S Ai∈A
s.t [ct(A ,N )]

N = ⎧ xi	if [ci.Ai]s does not occur in the left-hand side of the reaction
⎩ succi (xi) if [ci.Ai]s occurs in the left-hand side of the reaction

N = ⎧ xi	if [di.Ai]s does not occur in the right-hand side of the reaction
⎩ sucdi (xi) if [di.Ai]s occurs in the right-hand side of the reaction
The quantifier ∀x allows us to bind the current number of reactants in the sys-
tem. The formula consume consumes the needed reactants and produce adds such reactants k time-units later. We note that once a rule is applied, the concentra- tions of the reactants that do not occur in the reaction are simply copied (without changes) to the time-unit t + k (due to the first cases of Ni above).
Finally, the model of the system at a given time-unit t is:
system(t) d=ef eqs ⊗ [state(t)]

Behavior and correspondence
In this section we show that our model enjoys interesting properties. In particular, we shall show that a step in a focused derivation [2] corresponds exactly to one step in the evolution of the system. We shall briefly explain the focusing discipline for SELLA but, in order to avoid technicalities, we omit the proof rules for that system. The reader may refer to [42] and [17] for a complete description of the focused SELLA system.
Focusing [2] is a powerful discipline on proofs which can be seen as normal form proofs for proof search. In this discipline, one classifies as negative all formulas whose main connective is &, (, ∀, A and classifies the remaining formulas (both non-atomic and atomic) as positive. Similarly, positive rules are those that introduce positive formulas to the right-hand-side of sequents and negative formulas to the left-hand-side of sequents, e.g., ∃R, (L. Negative rules are those that introduce negative formulas to the right-hand-side of sequents and positive formulas to the

left-hand-side of sequents, e.g., ∀R, ⊗L.
This distinction between positive and negative phases is natural as all negative rules are invertible rules, that is, provability is not affected when applying such a rule. For example, the rule ∃L belongs to the negative phase, as the choice of the name used for the eigenvariable is not important for provability, as long as it is fresh. A positive rule, on the other hand, is possibly non-invertible and therefore provability may be lost. For instance, the ∃R rule belongs to the positive phase: one needs to provide a witness t for that rule. As another example, ⊗L belongs to the negative phase because this rule is invertible. On the other side, ⊗R belongs to the positive phase as this rules splits the linear context.
Let us show a simple example on how the focusing discipline allows to control the proof search procedure. Consider the following derivations:

a −→ a




b −→ b	c −→ c −◦L		
b, b −◦ c −→ c −◦L	c −→ c




b −→ b	a −→ a −◦L
a, a −◦ b −→ b −◦L

a, a −◦ b, b −◦ c −→ c	a, a −◦ b, b −◦ c −→ c
The proof on the left corresponds to a focused proof. We choose (i.e., we focus on) the formula a −◦ b. For that, a, which is an atom and hence a positive formula, must be already in the context. The same happens in the proof of the sequent b, b −◦ c −→ c. We choose to use b −◦ c and we are forced to prove the atom b immediately. That is, once −◦L is used on a formula of the shape F −◦ G, the focus persists on F . Moreover, if F is a positive atom, the proof of F must finish with an application of the initial rule.
The proof on the right, on the other hand, is not focused. Note that we use the implication b −◦ c but the proof of b was delayed until b was later produced by a −◦ b. In the context of biochemical reactions, this does not correspond to what we expect: we are allowed to use a reaction whose reactants are not yet available but they will be later produced.
Now we shall state our desired result relating derivations in the logical system and steps in the biochemical system. Before that, let us introduce some needed notation.
Notation 1 (States) We use s1 : [A1 : c1, ..., An : c1 ], ··· , sm : [A1 : cm, ..., An :
1	n	1
cm] to denote a state s where there are cj species of the reactant j in the space
n	i
domain i. If reaction r can be applied on state s1 producing the state s2 after k
(r,k)
time-units, we shall write s1 −→ s2. Given a state s and a time-unit t, we shall
denote with [[s]]t the SELLA formula system(t).
Theorem 3.1 (Correspondence) Let s1 and s2 be states, r a reaction and t > 0.
(r,k)
Then, s1 −→ s2	iff	[[s1]]t −→ [[s2]]t+k. Moreover, such adequacy is at the level of
derivations, that is, one focused logical phase corresponds exactly to the move from state s1 to state s2.
Even though the detailed proof of the above theorem is in [17], let us give some intuitions about it to understand better the level of adequacy we obtained. Assume
(r,k)
that s1 −→ s2 and consider the sequent [s1]]t −→ G where G is the property we

want to verify (we shall give some examples of properties in the next section). In a focused system, the rule !L belongs to the negative phase. For that, the left-hand- side context of the sequent is organized as follows:
[a1 : Δ1; ··· ; an : Δn], Γ −→ G

where ai is a subexp. and Δi is a multisets of formulas. Intuitively, ai : Δi represents the formula !iF1 ⊗· · ·⊗ !iFm if Δi = {F1, ..., Fm}. Then, the rule !L can be written as
[a1 : Δ1; ··· ; ai : Δi  {F}; ··· ; an : Δn], Γ −→ G
[a :Δ ; ··· ; a :Δ ; ··· ; a  :Δ ], Γ, !ai F −→ G  !L
1	1	i	i	n	n
i.e, the formula F is stored in the context ai.
Consider the formula [s1]]t = eqs ⊗ [state(t)]. In a negative phase, all the ! and ⊗ connectives in the formula can be eagerly introduced as follows:
[tω : eqsj; si.t : {ct(A1, c1), ..., ct(An, cn)}] −→ G

[[s1]]t
−→ G	!L, ⊗L

where eqsj = Alx : 1+. [eq1(lx)& ··· &eqk(lx)] and si.t represents the context for the formulas of the form !si.tF . Note that the negative phase ends here since eqsj is a negative formula (that must be introduced in the positive phase) and ct(·, ·) is an atom.
If we decide to focus on the formulas on the left, we only have one possibility: to focus on eqsj. In the following, we shall show that after the positive phase of the derivation, we end up with a formula of the shape [s2]]t+k.
The positive phase then begins by deciding to focus on the formula eqsj. There- fore, since A and & are negative connectives, the focus persists:
[tω : eqsj; si.t : {ct(A1, c1), ..., ct(An, cn)}], eqi(tj) −→ G
[t  : eqsj; s .t : {ct(A ,c ), ..., ct(A ,c )}], eq(tj)&...&eq(tj) −→ G &L
ω	i	1  1	n  n	AL
[tω : eqsj; si.t : {ct(A1, c1), ..., ct(An, cn)}], eqsj −→ G
[tω : eqsj; si.t : {ct(A1, c1), ..., ct(An, cn)}] −→ G	decide

Again, the main connective of eqi is negative (∀, and then −◦) and the focus persists:
	π		ψ
Γ1 −→ consumei(tj)[k/x] Γ2, producei(tj + n)[k/x]
[t : eqsj; s .t : {ct(A ,c ), ..., ct(A ,c )}], eqj (tj)[k/x] −→ G −◦L
 ω	i	1  1	n  n	i	 ∀
[tω : eqsj; si.t : {ct(A1, c1), ..., ct(An, cn)}], eqi(tj) −→ G

Here Γ1 and Γ2 correspond to the splitting of the context due to the rule −◦L. The interesting point here is that focusing allows us to reduce the nondeterminism on how to split such context. Note that consume is a conjunction (⊗) of formulas

of the shape !si.t′ ct(A ,c ) and ⊗
belongs to the positive phase. Hence, the focus

persist on consumei(tj) and the derivation π splits further the context Γ1 to prove
each of the formulas of the shape !si.t′ ct(A ,c ). Consider one of such sequents, e.g.,
i  i

Γj −→ !si.t′ ct(A ,c ). Since s .t is not related to any other subexponential, the rule
1	i  i	i

!R restricts Γj
to be of the shape [si.tj : Δ]. Moreover, since ct(Ai, ci) is an atom,
s .t′

the proof must finish with an application of the initial rule after introducing ! i  .
This last step has two important consequences: first, the focusing discipline forces

the rule A
to chose tj = t, in other case, the formula !si.t′ ct(A ,c ) is not provable;

L	i  i
second, rule &L must choose the encoding of a reaction whose reactants are already in the context.
Now let’s take a look on the derivation on the right (ψ) where we are focused on produce. We note that the main connective of such formula is ⊗ and then, the positive phase terminates (since ⊗L belongs to the negative phase). Derivation ψ starts then a negative phase where all the formulas representing the reactants are stored in the context as we already explained. Hence, what we observe is that the change of polarity from the positive to the negative phase corresponds exactly to
(r,k)
the behavior of the system, i.e., s1 −→ s2.

System Properties and Applications
This section is devoted to show some examples of properties that can be verified with our framework. Moreover, to give a more general picture of our developments, we show how to encode P-Systems [46,3] and some properties of such systems.

Properties of interest
We can prove reachability properties in our system by proving sequents of the shape system(1) −→ l : 1 + . !a.lct(A, n) . Such a sequent can be read as “given the initial state of the system, there exists a location (time-unit) where there are n copies of A in the space domain a”. We note that rule R belongs to the positive phase. If we decide to focus on it, we need to introduce !a.l and the focus is lost. As a matter of fact, it must be the case that ct(A, n) is already in the context since a.l is not related to 1+ and then, the set of reactions cannot be used to finish the proof (see the explanation about the π derivation in the previous section). Moreover, due to Theorem 3.1, the proof of such a sequent can be directly traced to the moves the system has to perform to reach the state ct(A, n).
Now consider the problem of verifying whether the system reaches a stable state, i.e., a state where no rule can be applied. Detecting in a logical system that a given configuration cannot proceed is usually difficult. In our case, it would require to check that none of the eqi in the formula eq1&...&eqn can be chosen. One possible solution is to add a dummy formula introducing the atom stable as follows: consider two reactions r1 : [2.a]s + [b]s −→ [c]s and r2 : [c]s −→ [a]s and let

eqs
d=ef !ω [Alx :1 + . [eq (lx)& ··· &eq (lx)&eq (lx)]]

d
def  s.t
1
s.t
k	d
s.t

 s.t	t


If none of the eqi succeed, then eqd must be chosen.	We note that rule &L belongs to the negative phase and then, we cannot guarantee that the proof has to

finish immediately proving from the context the atoms ct(·, ·). Nevertheless, since the subexponential s.t is unrelated to all other subexponentials, we do guarantee that for proving such atoms the set of reactions cannot be used again (as in the derivation π of the previous section). Intuitively, eqd checks whether there are not enough reactants to trigger any of the rules. In that case, the atom stable is added to the context. Hence, the system reaches a stable state iff the sequent system(1) −→ l :1 + .!lstable is provable.
Encoding P-Systems
P-Systems [46,3] is a model of computation that interprets the processes taking place in the compartmentalized structure of a biological cell as computations. The main abstraction is the notion of a cell-like membrane structure. Several mem- branes placed in an outermost membrane, called “the skin membrane”, determine the configuration of the system. This structural shape defines compartments where multisets of objects (components) are placed and evolve according to a set of rules. More precisely,
Definition 4.1 [P-System] A P-System is a structure Π = (V, μ0, R, O) where V is an alphabet of symbols; μ0 is the initial configuration; O is the label of the observable membrane; and R is a finite set of rewriting rules of the following forms:
Communication: xxj[i yjy −→ xyj[i xjy; for x, y, xj, yj ∈ V ∗.
Transformation: [i y −→ [i yj; for y, yj ∈ V ∗.
Intuitively, a transformation rule consumes the objects in the multiset y to produce the multiset yj in the membrane i. A communication rule is similar but allows us to move objects through membranes: the multiset xj (resp. yj) is moved inside (resp. outside) the membrane i. Given two configurations (states) s1 and s2, we shall write s1 ====⇒ s2 if s1 moves to s2 applying the rules in R.
Communication and transformation rules can be interpreted as SELLA formulas mostly as we did in the previous section. Figure 3 depicts the proposed encoding. Assuming a set of n different components in the system, the current state of the system in the membrane i is defined as !si p(a1, ..., an). Rules manipulate the state of the system by consuming elements in the current time-unit and then, producing them in the future time-unit. Hence, we shall use the formula !si f(a1, ..., an) to model that, in the next time-unit, there will be ai additional species of the compo- nent Ai in the membrane si.
Consider the formula [rj]]t for a given rule rj. The first implication, that we shall call positive rule, is similar to the one we have in the previous section. We note that the elements are consumed in the current time-unit but the products are “stored” in the predicate f(·). The new part is the second implication that we call the negative rule. Here we check whether there are not enough resources to fire the rule (as we did with the dummy formula eqd(t) above). This is done by proving formulas of the shape lt(x, a) (i.e., x < a). For that, the axiom in Figure 3 is used:
!sj lt(x, 3) can be deduced , for instance, if there are two or less resources of type
x. Note also that either the positive rule or the negative one are fired but not both

due to the & connective and also because they are mutually exclusive. Moreover, both rules add the formula ok which is needed as we explain in brief.
We recall that in P-systems, all the rules must be applied in a non-deterministic and maximally parallel manner. For that, we shall use the predicates tk and oki as follows. Once we focus on the formula F = [[rj]]t, F is decomposed and it adds in the end of the negative phase, the formula okj into the context t. As we already explain, if F can be positively fired, it also changes the current state of the system by consuming and producing the corresponding p(·) and f(·) predicates. Note also that, unlike the encoding of the previous section, here the encoding of each rule is glued with the ⊗ connective (while in the previous section we used &). This allows us to fire all the rules during the current time-unit. Once all the rules are fired (either modifying the state or not) the formula next can be focused on to propagate the changes to the next time-unit. When this happens, we can say that the time-unit t ends and we start the computations of the time-unit t + 1.
Theorem 4.2 (Adequacy) Let s1 and s2 be states, t > 0 and [[s]] = state(t) as in Figure 3. Then, s1 ====⇒ s2 iff  system(t), [[s1]]t −→ [[s2]]t+1
The encoding we have here does not exhibit an adequacy at the level of deriva- tions as in the previous section. The reason is simple. Each time we fire a rule, we change from a negative phase to a positive one. Then, applying the k rules of the system at the time-unit t requires flipping k + 1 times the polarity of the proof (the “+1” is due to the extra phase needed to fire the implication in the formula next). However, the focusing discipline and the subexponentials allow us to control correctly the proof. In particular, if a rule is fired, then needed reactants must be already available in the context. Moreover, if the rule cannot be applied, it must be the case that the negative part of the rule is applied. The reason is that the encoding does not increase the number of components in the current state. Then, if a rule cannot be applied now, it cannot be applied after executing some other rules (during the same time-unit). Hence, what we observe is that the rules are applied non-deterministically and once all of them are fired, the system moves to the next time-unit.
Besides reachability properties as those stated in the previous section, we can also check the periodicity of the system, i.e., whether the system exhibits the behav- ior s1 ====⇒ sx1 ====⇒ · · · ====⇒ sxn ====⇒ s1 where sxi is different from s1. This means that, after n time-units, there is a cycle in the system going back to the state s1. This property holds iff the sequent system(1), [[s1]]1 −→ [[s1]]n+1 is provable. More generally, we can find such a periodicity by using existential quantification on subexponentials, i.e., by looking at the final instantiation of the subexponential variable l in the proof of the sequent system(1), [[s1]]1 −→ l :2 + [s1]]l.

Concluding Remarks
In this paper we presented a framework to specify and verify computational bio- chemical systems. We have dealt with the problem of representing both spatial



Predicates
p(x1, ..., xn): currently, there are xi species of reactant Ai.
f(x1, ..., xn): in the next time-unit, there will be xi species of reactant Ai
tk: enables the set of reaction in the current time-unit.	•okj: Rule j was applied.
Axioms

Asx : sω. [!sxp(x1, ..., xi, ··· , xn) −◦ !sxp(x1, ..., xn) ⊗ !sxlt(Ai, suc(xi))]
Rules

Transformation rule: [rw : [iS −→ [iSj ]]t =


1
!li (lt(a1) ⊕· · · ⊕ lt(an)) −◦ !tokw
Communication rule: [rw : [jT [iS −→ [jT j[iSj ]]t =
n	1	n

[!li f(x1, ..., xn) ⊗ !li p(suca1 y1, ..., sucanyn) ⊗ !lj f(z1, ..., zn) ⊗ !lj p(succ1 w1, ..., succnwn)−◦
!li f(sucb1 xj , ..., sucbnxj ) ⊗ !li p(yj , ..., yj ) ⊗ !lj f(sucd1 zj , ..., sucdnzj ) ⊗ !lj p(wj , ..., wj ) ⊗ !tokw]&
1	n	1	n	1	n	1	n
!li (lt(a1) ⊕· · · ⊕ lt(an))&!lj (lt(c1) ⊕· · · ⊕ lt(cn)) −◦ !tokw
Auxiliary Formulas

def t
1
t  m	N  si	1
si
n	1	n

!t+1tk ⊗ N (!si p(xi1 + yi1, ..., xin + yi1) ⊗ !si f(0, ..., 0))
system(t) d=ef !tω Atx :1 + . next(tx) ⊗ !txtk −◦ N [[rj]]t 

def t
N si	1	n	si

rj∈Y



Fig. 3. Encoding of P-systems into SELLe. We assume a set of reactants A = {A1, ..., An}. All the variables in axioms and in the encoding of rules (x and y) are implicitly universally quantified. Y denotes the set of rules in the system.

and time dependent partial information. Our framework relies on linear logic [30] with subexponentials (SELL) [23]. We have shown that our framework is general enough to give a declarative semantics to P-Systems and we have shown that such a logical characterization has a strong level of adequacy: derivations in the logical system follow exactly the rules (reactions) of the modeled system. This embedding shows that SELLA is expressive enough to give a logical interpretation to such sys- tems, thus opening the possibility to use all the meta theory of LL to reason about the behavior of biochemical systems that exhibit temporal and spatial modalities. The next step will be implementing our framework in a functional logic language (e.g., lambda Prolog) and use a framework for assisted theorem proving like Coq for making semi automatic the process of verification (see e.g, [13]).
Related work. A close related work to ours is [13] and [7]. In [13], the authors show that temporal properties of biochemical systems can be expressed in HyLL (hybrid linear logic). Basically, in HyLL, a partial order structure on words is defined to model locations where the formulas hold. This is much like the subex- ponential structure in SELLA. Here we show that time and spatial modalities can be considered in the same framework. Another difference is that the work in [13]

considers gene networks where signals can be activated or not. Here, inspired in our previous works on modeling biological systems [16,15,14] in CCP, we consider quantitative information of the system, i.e., the concentration of the molecules in each state. This is also akin to the work in [7], where variants of CCP are considered in order to specify biological systems.
Nowadays, formal methods have been extensively used for the analysis, simula- tion and verification of biochemical systems at different levels of abstraction. Essen- tially, these methods aim at reasoning about molecular interactions (i.e., reactions rules) and spatial information (i.e., compartmentalization and local interactions). Iterative application of rules to a set of seed species may be used to generate a network by using an ordinary differential equations (ODEs) semantics on molec- ular concentrations (i.e., by numerically solving ODEs) or a stochastic semantics on number of molecules (i.e., by implementing the Gillespie stochastic simulation algorithm). Generally, the timing behavior is tackled with kinetic expressions in the reaction scheme. In [28,19,26,45,8,48,24,25] models of biochemical systems can be associated with a continuous-time Markov chain (CTMC) process or an ODE process. While in Pathway Logic (PL) [1] each rule is associated with a scalar value called affinity. This one can be bounded with a time-dependent interpreta- tion either by using exponential random or deterministic amortized variables. On the other hand, models of biochemical systems in timed-π-calculus [49] can deal with time-stamps and clocks handled as other names and transmit them through channels.
So as to deal with spatial information, formalisms such as Bio-Pepa [20], BioNet- Gen [35], BioAmbients [47], and Brane Calculi [10] have been equipped with a tree representation of the hierarchical structure of cellular compartments. Whereas in Biocham [11,18], PL [51], and Beta-Binders [34], cellular compartments can be ab- stracted as symbolic locations by assigning labels to molecular compounds. In the π@-calculus [53], restricted names are exploited to model compartments.
The above mentioned frameworks allow to reason about biological properties by using different types of logics and techniques. Properties of Biocham models [28], for instance, can be formalized within the boolean, differential and stochastic semantics by using (probabilistic) temporal logics. Bio-Pepa’s models [20] can be translated into PRISM [37], a probabilistic model checker. Processes in PL [1] can be analyzed by using the Maude system [22]. Bounded Linear Temporal Logic
[31] and statistical model checking are used in BioNetGen to express and to verify system properties. Temporal properties for BioAmbients processes can be analyzed by using state formulas [32] or modal logics to express spatial and time modalities [9]. Similarly, modal logic can be used to express spatial and temporal properties over membranes and systems, which is known as Brane Logic [40]. In the case of Beta-Binders models, causality properties [33] as well as flow control analyses [6] can be performed.

References
Alessandro Abate, Yu Bai, Nathalie Sznajder, Carolyn L. Talcott, and Ashish Tiwari. Quantitative and probabilistic modeling in pathway logic. In Proceedings of BIBE 2007, pages 922–929. IEEE, 2007.
Jean-Marc Andreoli. Logic programming with focusing proofs in linear logic. J. Log. Comput., 2(3):297– 347, 1992.
Francesco Bernardini and Vincenzo Manca. Dynamical aspects of p systems. Biosystems, 70(2):85 – 93, 2003. Cell Computing.
Marco Bernardo, Pierpaolo Degano, and Gianluigi Zavattaro, editors. SFM 2008, volume 5016 of LNCS. Springer, 2008.
Mitali Bhattacharjee, Rajesh Raju, Aneesha Radhakrishnan, and et al. A bioinformatics resource for tweak-fn14 signaling pathway. Journal of Signal Transduction, 2012, 2012.
Chiara Bodei. A control flow analysis for beta-binders with and without static compartments. Theor. Comput. Sci., 410(33-34):3110–3127, 2009.
Luca Bortolussi and Alberto Policriti. Modeling biological systems in stochastic concurrent constraint programming. Constraints, 13(1-2):66–90, 2008.
Linda Brodo, Pierpaolo Degano, and Corrado Priami. A stochastic semantics for bioambients. In Victor Malyshkin, editor, Parallel Computing Technologies, volume 4671 of LNCS, pages 22–34. Springer Berlin Heidelberg, 2007.
Lu´ıs Caires and Luca Cardelli. A spatial logic for concurrency (part I). Inf. Comput., 186(2):194–235, 2003.
Luca Cardelli. Brane calculi. In Vincent Danos and Vincent Schachter, editors, CMSB, volume 3082 of LNCS, pages 257–278. Springer Berlin Heidelberg, 2005.
Nathalie Chabrier-Rivier, Franc¸ois Fages, and Sylvain Soliman. The biochemical abstract machine BIOCHAM. In Vincent Danos and Vincent Scha¨chter, editors, CMSB 2004, volume 3082 of LNCS, pages 172–191. Springer, 2004.
Claudine Chaouiya. Petri net modelling of biological networks. Brief in Bioinformatics, 8(4):210–219, 2007.
Kaustuv Chaudhuri and Joelle Despeyroux. A Hybrid Linear Logic for Constrained Transition Systems with Applications to Molecular Biology. Research Report, 2009.
D. Chiarugi, M. Falaschi, D. Hermith, and C. Olarte. A framework for modelling spatially dependent interactions of biological systems in ccp. In Proc. of IWBBIO’14, To appear, 2014.
Davide Chiarugi, Moreno Falaschi, Diana Hermith, Michell Guzman, and Carlos Olarte. Simulating signalling pathways with bioways. Electr. Notes Theor. Comput. Sci., 293:17–34, 2013.
Davide Chiarugi, Moreno Falaschi, Carlos Olarte, and Catuscia Palamidessi. Compositional modelling of signalling pathways in timed concurrent constraint programming. In Aidong Zhang, Mark Borodovsky, Gultekin O¨ zsoyoglu, and Armin R. Mikler, editors, Proceedings of BCB 2010, pages 414–
417. ACM, 2010.
Davide Chiarugi, Diana Hermith, Moreno Falaschi, and Carlos Olarte. Verification of spatial and temporal modalities in biochemical systems. Technical report, ECT, Universidade Federal do Rio Grande do Norte, 2014. Available at https://sites.google.com/site/carlosolarte/.
Andrea Ciliberto, B´ela Novak, and John J. Tyson. Steady states and oscillations in the p53/mdm2 network. Cell Cycle, 4(3):488–493, 2005.
Federica Ciocchetta, Andrea Degasperi, JohnK. Heath, and Jane Hillston. Modelling and analysis of the nf-?b pathway in bio-pepa. In Corrado Priami, Rainer Breitling, David Gilbert, Monika Heiner, and AdelindeM. Uhrmacher, editors, Transactions on Computational Systems Biology XII, volume 5945 of LNCS, pages 229–262. Springer Berlin Heidelberg, 2010.
Federica Ciocchetta and Maria Luisa Guerriero. Modelling biological compartments in bio-pepa.
Electronic Notes in Theoretical Computer Science, 227(0):77 – 95, 2009.
Federica Ciocchetta and Jane Hillston. Bio-pepa: An extension of the process algebra {PEPA} for biochemical networks. Electronic Notes in Theoretical Computer Science, 194(3):103 – 117, 2008.
Manuel Clavel, Francisco Dur´an, Steven Eker, Patrick Lincoln, Narciso Mart´ı-Oliet, Jos´e Meseguer, and Jose F. Quesada. The maude system. In Paliath Narendran and Micha¨el Rusinowitch, editors, Proc. of RTA-99, volume 1631 of LNCS, pages 240–243. Springer, 1999.


Vincent Danos, Jean-Baptiste Joinet, and Harold Schellinx. The structure of exponentials: Uncovering the dynamics of linear logic proofs. In Georg Gottlob, Alexander Leitsch, and Daniele Mundici, editors, Kurt G¨odel Colloquium, volume 713 of LNCS, pages 159–171. Springer, 1993.
Pierpaolo Degano, Davide Prandi, Corrado Priami, and Paola Quaglia. Beta-binders for biological quantitative experiments. Electr. Notes Theor. Comput. Sci., 164(3):101–117, 2006.
Lorenzo Dematt´e, Corrado Priami, and Alessandro Romanel. The blenx language: A tutorial. In Marco Bernardo, Pierpaolo Degano, and Gianluigi Zavattaro, editors, Formal Methods for Computational Systems Biology, volume 5016 of LNCS, pages 313–365. Springer Berlin Heidelberg, 2008.
James R. Faeder, MichaelL. Blinov, and William S. Hlavacek. Rule-based modeling of biochemical systems with bionetgen. In Ivan V. Maly, editor, Systems Biology, volume 500 of Methods in Molecular Biology, pages 113–167. Humana Press, 2009.
Francois Fages, Paul Ruet, and Sylvain Soliman. Linear concurrent constraint programming: Operational and phase semantics. Inf. Comput., 165(1):14–41, 2001.
Francois Fages and Sylvain Soliman. Formal cell biology in biocham. In Bernardo et al. [4], pages 54–80.
Jasmin Fisher and Thomas A. Henzinger. Executable biology. In Perrone et al. [44], pages 1675–1682.
Jean-Yves Girard. Linear logic. Theor. Comput. Sci., 50:1–102, 1987.
Haijun Gong, Paolo Zuliani, Anvesh Komuravelli, James R. Faeder, and Edmund M. Clarke. Computational modeling and verification of signaling pathways in cancer. In ANB, pages 117–135, 2010.
Roberta Gori and Francesca Levi. An analysis for proving temporal properties of biological systems. In Naoki Kobayashi, editor, Proc. of APLAS 2006, volume 4279 of LNCS, pages 234–252. Springer, 2006.
Maria Luisa Guerriero and Corrado Priami. Causality and concurrency in beta-binders. Technical report, University of Trento, 2006.
Maria Luisa Guerriero, Corrado Priami, and Alessandro Romanel. Modeling static biological compartments with beta-binders. In Hirokazu Anai, Katsuhisa Horimoto, and Temur Kutsia, editors, Proc. of AB 2007, volume 4545 of LNCS, pages 247–261. Springer, 2007.
Leonard A. Harris, Justin S. Hogg, and James R. Faeder. Compartmental rule-based modeling of biochemical systems. In Ann Dunkin, Ricki G. Ingalls, Enver Yu¨cesan, Manuel D. Rossetti, Ray Hill, and Bj¨orn Johansson, editors, Proc. of WSC 2009, pages 908–919. WSC, 2009.
Diana Hermith, Carlos Olarte, Camilo Rueda, and Frank D. Valencia. Modeling cellular signaling systems: An abstraction-refinement approach. In Miguel P. Rocha, Juan M. Corchado Rodr´ıguez, Florentino Fdez-Riverola, and Alfonso Valencia, editors, Proc. of PACBB 2011, volume 93 of Advances in Intelligent and Soft Computing, pages 321–328. Springer, 2011.
Andrew Hinton, Marta Kwiatkowska, Gethin Norman, and David Parker. Prism: A tool for automatic verification of probabilistic systems. In Holger Hermanns and Jens Palsberg, editors, TACAS 2006, volume 3920 of LNCS, pages 441–444. Springer Berlin Heidelberg, 2006.
Patrick Lincoln and Ashish Tiwari. Symbolic systems biology: Hybrid modeling and analysis of biological networks. In Rajeev Alur and George J. Pappas, editors, Proc. of HSCC 2004, volume 2993 of LNCS, pages 660–672. Springer, 2004.
Nagasaki M, Doi A, Matsuno H, and Miyano S. A versatile petri net based architecture for modeling and simulation of complex biological processes. Genome Inform., 15(1):180–197, 2004.
Marino Miculan and Giorgio Bacci. Modal logics for brane calculus. In Corrado Priami, editor, CMSB 2006, volume 4210 of LNCS, pages 1–16. Springer Berlin Heidelberg, 2006.
M. Nielsen, C. Palamidessi, and F. Valencia. Temporal concurrent constraint programming: Denotation, logic and applications. Nordic Journal of Computing, 9(1):145–188, 2002.
Vivek Nigam, Carlos Olarte, and Elaine Pimentel. A general proof system for modalities in concurrent constraint programming. In Pedro R. D’Argenio and Herna´n C. Melgratti, editors, CONCUR, volume 8052 of LNCS, pages 410–424. Springer, 2013.
Carlos Olarte, Vivek Nigam, and Elaine Pimentel. Dynamic spaces in concurrent constraint programming. Electr. Notes Theor. Comput. Sci., 305:103–121, 2014.
L. Felipe Perrone, Barry Lawson, Jason Liu, and Frederick P. Wieland, editors. Proc. of WSC 2006.


Andrew Phillips and Luca Cardelli. Efficient, correct simulation of biological processes in the stochastic pi-calculus. In Muffy Calder and Stephen Gilmore, editors, CMSB, volume 4695 of LNCS, pages 184–
199. Springer Berlin Heidelberg, 2007.
Gheorghe P˘aun. From cells to computers: computing with membranes (p systems). Biosystems, 59(3):139–158, 2001.
Aviv Regev, Ekaterina M. Panina, William Silverman, Luca Cardelli, and Ehud Shapiro. Bioambients: an abstraction for biological compartments. Theoretical Computer Science, 325(1):141 – 167, 2004.
Jorma J. De Ronde and Cecile Petmi Ndjehan. Modelling networks and pathways in systems biology. Technical report, Dublin City University, School of Computing, 2005/2006.
Neda Saeedloei and Gopal Gupta. Timed π-calculus. In Mart´ın Abadi and Alberto Lluch-Lafuente, editors, TGC 2013, volume 8358 of LNCS, pages 119–135. Springer, 2013.
Vijay A. Saraswat, Martin C. Rinard, and Prakash Panangaden. Semantic foundations of concurrent constraint programming. In David S. Wise, editor, POPL, pages 333–352. ACM Press, 1991.
Carolyn Talcott. Pathway logic. In Marco Bernardo, Pierpaolo Degano, and Gianluigi Zavattaro, editors, Formal Methods for Computational Systems Biology, volume 5016 of LNCS, pages 21–53. Springer Berlin Heidelberg, 2008.
Carolyn L. Talcott. Symbolic modeling of signal transduction in pathway logic. In Perrone et al. [44], pages 1656–1665.
Cristian Versari and Roberto Gorrieri. pi@: A pi-based process calculus for the implementation of compartmentalised bio-inspired calculi. In Bernardo et al. [4], pages 449–506.
