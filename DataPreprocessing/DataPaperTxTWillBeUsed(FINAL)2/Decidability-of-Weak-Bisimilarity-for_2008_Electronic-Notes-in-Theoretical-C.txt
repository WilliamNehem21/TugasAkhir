	Electronic Notes in Theoretical Computer Science 212 (2008) 241–255	
www.elsevier.com/locate/entcs

Decidability of Weak Bisimilarity for a Subset of BPA
Haiyan Chen1,2
State Key Laboratory Computer Science, Institute of Software, Chinese Academy of Sciences, P.O.Box 8718, 100080 Beijing, China and
Graduate School of the Chinese Academy of Sciences, YuQuan Streets, 100039 Beijing, China


Abstract
In this paper we use the tableau as a means to prove decidability of weak bisimulation for normed BPA. Decidability was proved for a restricted subclass, the totally normed processes by Hirshfeld [9]. However in the case that weak bisimilarity to be decidable is inequivalence is finitely approximable. In this paper we relax restriction of totally normedness and prove decidability of weak bisimilarity for a subset of normed BPA which permit the norm of BPA processes is zero.
Keywords: BPA, Normed, Tableau, Decidabilty


Introduction
Decidability results for bisimulation equivalence between context-free processes have been flourishing since Baeten, Bergstra, and Klop [4] first proved that bisimulation equivalence is decidable for normed BPA processes, a class of context-free processes. The same fact has been proved by a series of simpler proofs later by Caucal [17], Hans Hu¨ttel and Colin Stirling [11], and Groote [23]. Also algorithms and various complexity results for deciding bisimilarity of normed context-free processes have been obtained by Huynh and Tian [24]. Finally, the decidability result has later been extended to the class of all(not necessarily normed)BPA processes in [5,6] and to pushdown automata [5,19,20]. Above most of the results on infinite state system are concerning strong bisimilarity. For weak bisimilarity, much less is known. Hirshfeld proved a decomposition property for a generalized weak bisimilarity of

1 Research was supported by the National Natural Science Foundation of China under Grant Nos. 60673045, 60496321
2 Email: chy@ios.ac.cn

1571-0661 © 2008 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2008.04.065

totally normed context-free processes, and with this directly obtained decidability of bisimilarity of totally normed BPA in [9]. This decidability result is also a consequence of a more elaborate theorem proved by Stirling in [10].
Now families of infinite state systems for which weak bisimilarity is known to be decidable are finitely branching. For each label and for each configuration the set of its successors is finite and easily computable. Therefore if two systems are not bisimulation equivalent then there is a least approximant n > 0 such that they are not equivalent at level n, and for each n the equivalence at level n is decidable. But if processes are infinite branching then inequivalence may be manifested at higher ordinals and therefore a new technique is required to establish semidecidability of inequivalence [20].
Hirshfeld proved the decidability of weak bisimilarity on BPA whose norm is greater than 0. And Kucˇera, Mayr show weak bisimilarity between finite-state systems and BPA or normed BPP is decidable [21]. However both these cases are finite branching. We will resolve broader problem than Hirshfeld. Here we permit that the norm of BPA processes is zero, with the consequence that BPA processes are infinitely branching. Weak bisimulation inequivalence is then generally not finitely approximable.
In this paper by refining Hirshfeld’s notion of weak bisimulation up to, we obtain an equivalence relation which enables us to devise a tableau method for deciding weak bisimilarity of totally normed context-free processes. In [11], Hu¨ttel and Stir- ling proposed a tableau decision procedure for deciding strong bisimilarity of normed context-free processes. Later in [12], Hu¨ttel adapted the tableau method and proved the decidability of branching bisimulation of totally normed context-free processes. As Hu¨ttel pointed out in [12], the key for the tableau method to work is a nice decomposition property which holds for strong bisimulation and branching bisim- ulation, but fails for weak bisimulation. Our work in some sense is to propose a version of weak bisimulation equivalence for which certain decomposition property (Proposition 3.2) makes the tableau method work correctly. Therefore we use a finite symbolic characterisation of the infinite branching of normed BPA to show weak bisimulation equivalence.
The paper is organized as follows. In section 2 we review some important con- cepts about BPA processes and weak bisimulation and describe the finite charac- terization of the infinite transition relations. In section 3 we present the tableau decision method and show the sound and completeness result. Section 4 contains conclusion and suggestions for further work.

Preliminaries
BPA Processes and Weak Bisimulation
We present BPA processes as states in a sequential labeled rewrite system.
Definition 2.1 A sequential labeled rewrite system is a tuple ⟨V, Actτ , Δ⟩ where
V is a finite set of variables; the elements of V∗, finite strings on V, are referred

to as states.
Actτ is a finite set of labels, containing a special label τ .
Δ ⊆ V×Actτ × V∗ is a finite set of rewrite rules.
We use X, Y, Z to range over elements of V; a, b, c to range over elements of Act; α, β, γ to range over elements of V∗, and write αβ for the concatenation of α and β. Also we shall write Xn to represent the term X ··· X consisting of n copies of X combined in sequence. The operational semantics of the processes (states) can be simply given by a labeled transition system (V∗, Actτ , −→) where
−→⊆ V∗ × Actτ × V∗ is as follows:
−→= {(Xβ, a, αβ)|(X, a, α) ∈ Δ, β ∈ V∗}.
As usual we write α −a→ β for (α, a, β) ∈−→, write α =⇒є	β or simply α =⇒ β for
α(−τ→)∗β, and write α =a⇒ β for α =⇒є −a→=⇒є  β. We say α is terminating, written
α ⇓, if α(−τ→)∗ϵ where ϵ is the empty string.
Example 2.2 The variables set V is {X, Y, A, B, E, F, D, G}, Actτ is {τ , a, b, c, d}
and the basic transitions are X −a→ ϵ, X −τ→ XA, X −→c  EF , Y −a→ ϵ, Y −τ→ Y B,
Y −→c	GD, E −a→ ϵ, F −τ→ FD, F −a→ ϵ, G −a→ FD, A −a→ ϵ, A −τ→ ϵ, B −a→ ϵ,

B −τ→ ϵ, D
−d→ ϵ, D
−τ→ ϵ.  For each n ≥ 0 there is the extended transition

X =⇒є  XAn.
Let ˆ: Actτ −→ Act∗ be the function such that aˆ = a when a /= τ and τˆ = ϵ,
then the following general definition of weak bisimulation on V∗ is standard.
Definition 2.3 A binary relation R ⊆ V∗ × V∗ is a weak bisimulation if for all (α, β) ∈ R the following hold:
α ⇓ if and only if β ⇓;
whenever α −a→ α', then β =aˆ⇒ β' for some β' with (α', β') ∈ R;
whenever β −a→ β', then α =aˆ⇒ α' for some α' with (α', β') ∈ R.
Two states α and β are said to be weak bisimulation equivalent, written α ≈ β, if there is a weak bisimulation R such that (α, β) ∈ R.
It is standard to prove that ≈ is an equivalence relation between processes.
Moreover it is a congruence with respect to string composition on V∗:
Proposition 2.4 If α ≈ β and α' ≈ β' then αα' ≈ ββ'.
Note that in general clause 1.  of Definition 2.3 is necessary.  Otherwise any
X ∈ V which has no transitions will be equated with ϵ, and as a consequence Proposition 2.4 would fail.
Relative Weak Bisimulation Equivalence
In this section we will present a version of weak bisimulation, i.e. a notion of weak bisimulation relative to a binary relation on states. This notion is a refinement of

Hirshfeld’s notion of “bisimulation up to” introduced in [9]. For the induced new equivalence, we then study its decomposition properties, its relationship to ≈. This provides a foundation for the tableau decision method discussed in the next section.
The following definition settles some notations and terminologies.
Definition 2.5 A state α is said to be normed if there exists a finite sequence of transitions from α to ϵ, and un-normed otherwise. The weak norm of a state α is the length of the shortest derivation sequence from α to ϵ not counting τ − moves. We denote by  α  the weak norm of α. Also, we follow the convention that  α  = ∞ for unnormed α, and ∞ > n for any number n. A state is totally normed if it is a state of a system ⟨V, Actτ , Δ⟩ where for every variable X ∈ V, 0 <  X  < ∞. If the norm of a variable X is zero, N (X) is that we find the length of the shortest
transition sequence of the form X =a⇒1  ··· =a⇒n  ϵ not containing =⇒є	ϵ, where each
=a⇒i  is counted as 1, and each a /= τ , else N (X) = X .
i
Note that X  < ∞ is the same as saying that X is normed, while X  = 0 implies that X can terminate silently.
Definition 2.6 Let Norm : V∗ −→ N be a length function on strings defined by
Norm(α) = Σn	N (Xi) where α ≡ X1 ··· Xn.
It is obvious that weak norm is additive:  αβ  =  α  + β  . Moreover, weak norm is respected by ≈.
For a binary relation Γ on states, we write =Γ for the equivalence relation gener- ated by the following four rules:

ref :	α =Γ α	axiom :	α =Γ β((α, β) ∈ Γ)



tran :
α =Γ β, β =Γ γ α =Γ γ

symm :
α =Γ β β =Γ α


i.e. =Γ is the smallest reflexive, symmetry, and transitive binary relation containing Γ. Clearly if Γ is finite then so is =Γ , and in this case it is decidable whether α =Γ β.
Definition 2.7 Let R, Γ ⊆ V∗ × V∗. R is a weak bisimulation w.r.t Γ if for all (α, β) ∈ R, then either  α  =  β  ≤ 1 and α =Γ β, or the following hold:
whenever α −a→ α', then β =aˆ⇒ β' for some β' such that (α', β') ∈ R,
whenever β −a→ β', then α =aˆ⇒ α' for some α' such that (α', β') ∈ R.
For α, β ∈ V∗ and Γ ⊆ V∗ × V∗, we say that α is weak bisimilar to β w.r.t. Γ, written α ≈Γ β, if there is R ⊆ V∗ × V∗ such that R is a weak bisimulation w.r.t Γ and (α, β) ∈ R.
This is a typical co-inductive definition for ≈Γ. With such definition, the fol- lowing properties of ≈Γ are expected and have standard proofs which are omitted

here.
Proposition 2.8 Let Γ ⊆ V∗ × V∗, then
≈Γ is the largest weak bisimulation w.r.t Γ;
≈Γ is an equivalence, i.e. it is reflexive, symmetric, and transitive.
Remark 2.9 Our definition differs from Hirshfeld’s bisimulation up to as follows. First, bisimulation up to is defined through a series of approximation while ≈Γ is defined using co-induction technique. Second, in our definition we use the weak norms of α, β as pre-conditions to determine when “bisimulation clauses” 1 and 2 are required to hold when are not, moreover in the case clauses 1 and 2 are not

required to hold we then require α =Γ
β instead of simply (α, β) ∈ Γ. As a result

≈Γ is an equivalence relation, an important property which is necessary for the
tableau method to work correctly. Bisimulation up to is not an equivalence relation in general.
Next we define some special kinds of Γ which have useful properties.
Definition 2.10 Let Γ ⊆ V∗ × V∗. We say Γ is uniform if α  =  β  ≤ 1 for all (α, β) ∈ Γ. We say Γ is sound if for all (α, β) ∈ Γ the following hold:
whenever α −a→ α' then β =aˆ⇒ β' for some β' with α' ≈Γ β';
whenever β −a→ β' then α =aˆ⇒ α' for some α' with α' ≈Γ β'.

Proposition 2.11 Let Γ ⊆ V∗ × V∗ be uniform. Then =Γ
respects weak norms, i.e.

if α =Γ β then either both α, β are un-normed, or both are normed and α  =  β  . Moreover ≈Γ also respects weak norms.
The following easy to prove lemma shows that for sound Γ the property holds for each (α, β) ∈ Γ also holds for those (α, β) where α =Γ β.
Lemma 2.12 Let Γ ⊆ V∗ × V∗ be sound. If α =Γ β then the following hold:
whenever α −a→ α' then β =aˆ⇒ β' for some β' with α' ≈Γ β';
whenever β −a→ β' then α =aˆ⇒ α' for some α' with α' ≈Γ β'.
Lemma 2.13 If Γ ⊆ V∗ × V∗ is both uniform and sound then ≈Γ is a weak bisim- ulation.
Proposition 2.14 Let α, β, γ ∈ V∗, Γ ⊆ V∗ × V∗. If α ≈Γ β then γα ≈Γ γβ.
Lemma 2.15 Let Γ ⊆ V∗ × V∗, α1, α2, β1, β2 ∈ V∗ with α1, β1 normed and α1  ≥ 
 β1  . If α1α2 ≈Γ β1β2 and β1β2  > 1 then there exists δ ∈ V∗ such that δα2 ≈Γ β2.
Generation
We symbolically characterize the weak transition relations of normed BPA. Assume a fixed normed BPA definition with variables set V, action set Actτ and transitions

−→. The initial step is to stratify the basic transitions in −→, by including a numerical index on the transition relation which represents the change in norm produced by the transition [20]. If X −a→ α ∈−→ then we rewrite it as X −a→n α where n =  α  − X  . The index n is bounded, −1 ≤ n ≤ |α|M , where M is the maximum norm of any variable in V. An important, but simple, observation is that for a stratified τ -transition, X −r→n α, the index n must be nondecreasing, n ≥ 0.
In the example of the previous section is A −a→−1 ϵ, X −r→0 XB, Y −→c 1 GD.
The definition of stratification is extended to the weak transition relations as follows.
α =⇒є 0 β iff ∃m > 0.∃α1, ··· , αm.α = α1 −r→0 ... −r→0 αm = β.

α =⇒є
n+1 β iff ∃α'β'.α =⇒є
j α' −r→k+1 β' =⇒є
L β where n = j + k + l.

α =a⇒n β iff ∃α'β'.α =⇒є
j α' −a→k β' =⇒є
L β where n = j + k + l

Proposition 2.16 If α is totally normed then for all a and n {δ : α =a⇒n δ} is ﬁnite.
However, when α isn’t totally normed then for some a and n {δ : α =a⇒n δ}
may be infinite.  The reason is that the transition relation =⇒є  0 can be infinite
branching. Variables can “generate” other variables. If X generates A with A ∈ V, and for each variable X, the set of variables generated by X, written Gen(X), is
{A : X =⇒є 0 XA}, A is called Generator.  In example of the previous section,
Gen(X) = {A}, Gen(Y ) = {B} and Gen(F ) = {D}.
Note that we write A∗ for n’s concatenation of A where n ≥ 0 and A∗ = A∗A∗, and write A+ for m’s concatenation of A where m ≥ 1 and A+ = AA∗.
Proposition 2.17	(i) If A∈ Gen(X) then  A  = 0;

If A∈ Gen(X) then X =⇒є
If α ∈ Gen(X)∗ then X =⇒є
0 XA∗;
0 Xα.

Since BPA processes have “sequence” characteristic, we can’t get X ≈ XA. Hence, we need some techniques to control infinite branching.
The sets Gen(X) for each variable X is easily computable. The main problem with deciding whether or not α ≈ β is their infinite branching. The technique for overcoming this is to use the finite characteristic to show that we only need to examine boundedly many transitions of α and β. However we are only able to show this for a subset of normed BPA processes.
We restrict to the subset of normed BPA definitions which obey the following condition.
If Gen(X) /= φ and X −r→0 α then α = Xα'.
Effectively this imposes the constraint that generators are “pure”, there any transi- tion X −r→0 α is a generating transition or is useless(X −r→0 X). We don’t consider more complicated and only consider that the norms of variables except Generators are more than 0. In the Example 1 the normed BPA transition system satisfy the previous restriction. However if we add a transition X −r→0 AX, then the transition

system violate the restriction. The next proposition relies on this constraint.


Proposition 2.18 If Gen(X) /= φ and Xα =⇒є
presented.
0 β then X ∈ β and β can be ﬁnitely

For example if A, B ∈ Gen(X) then X =⇒є  0 Xα, and α can be written (A∗B∗)∗.
If α contains ∗, + then α is called infinite string.

The Tableau Method for Normed BPA
From now on, we restrict our attention to the subset of normed BPA processes mentioned in previous section, i.e. processes of a sequential labeled rewrite system
⟨V, Actr , Δ⟩ where ∞ > X  ≥ 0 for all X ∈ V, the norm of variables except Generators are more than 0 and Generators are finite states. And throughout the rest of the paper, we assume that all the processes considered are the subset of normed unless stated otherwise.
We show that for normed processes the following are decidable:
whether α ≈Γ β, where Γ ⊆ V∗ × V∗ is uniform;
whether α ≈ β.
We first show that 1 above is decidable. Then we show 2 is also decidable by showing a reduction to 1.
First we list the following obvious properties of such processes.
Proposition 3.1 In a subset of normed process system ⟨V, Actr , Δ⟩,
for a ﬁxed n, there are only ﬁnitely many presented α ∈ V∗ such that α  = n;
if Γ ⊆ V∗ × V∗ is uniform then Γ is ﬁnitely presented;
there are only ﬁnitely many presented Γ ⊆ V∗ × V∗ which are uniform.
In the following, we devise a tableau method to decide whether α ≈Γ β. The rules of each tableau system are built around equations of the form α =Γ β, where α, β ∈ V∗, Γ ⊆ V∗ × V∗ is uniform. Each rule has the form


name
	α =Γ β	 α1 =Γ1 β1 ... αn =Γn βn

side condition.


The premise of a rule represents the goal to be achieved while the consequents are the subgoals. There are nine rules altogether. One rule for reducing the weak norms of the states in the goal, one rule for aligning the states, one rule for unfolding, and the last one for substituting.
We now explain the nine rules in turn.

Reducing Weak Norms
The first rule can be used to reduce the weak norms of the states in the goal.
The rule is based on the following observation.
Proposition 3.2 Let α, β ∈ V∗ with  α  = β  > 1, X ∈ V, Γ ⊆ V∗ × V∗ be uniform. Then αX ≈Γ βX if and only if there exists Γ' ⊆ V∗ × V∗ such that Γ' is uniform and α ≈Γ' β and α'X ≈Γ β'X for all (α', β') ∈ Γ'.
Proof. For the “if” direction, let R = {(α'X, β'X) | α' ≈Γ' β'}, it is not difficult to check that R ∪ ≈Γ is a weak bisimulation w.r.t. Γ. Also, obviously (αX, βX) ∈ R, thus (αX, βX) ∈ R ∪ ≈Γ, and so αX ≈Γ βX.
For the “only if” direction, let Γ' = {(α', β') | α'  =  β'  = 1, α'X ≈Γ β'X}, R = {(α', β') | α'X ≈Γ β'X}. Obviously Γ' is uniform and α'X ≈Γ β'X for all (α', β') ∈ Γ'. Also it is easy to check that R is a weak bisimulation w.r.t. Γ' and (α, β) ∈ R.	 
This proposition guarantees the soundness and backwards soundness of the following rule:


reduc
	αX =Γ βX	 α =Γ' β  {α'X =Γ β'X | (α', β') ∈ Γ'}

α  =  β  > 1


Note that the states in the subgoals all have smaller weak norms than the states in the original goal. Also note that, by 3. of Proposition 3.1, there are only finitely many possible choices for Γ'. This means there are only finitely many different ways to apply this rule.

Aligning the States
The next rule can be used to align the states in the goal so that rule reduc can be applied to the subgoals. The rule is based on the following observation.
Proposition 3.3 Let α1, β1, α,β ∈ V∗ with α1  ≥ β1  > 1. Then
α1α ≈Γ β1β if and only if there exists δ ∈ V∗ such that δα ≈Γ β and α1α ≈Γ β1δα
and δ  =  α1  − β1  .
Proof. For the “if” direction, suppose α1α ≈Γ β1δα and δα ≈Γ β. Then by Proposition 2.14 β1δα ≈Γ β1β. Then since ≈Γ is an equivalence, by transitivity we obtain α1α ≈Γ β1β.
For the “only if” direction, suppose α1α ≈Γ β1β. Since  α1  ≥ β1  , by Lemma
2.15 there exists δ ∈ V∗ with δα ≈Γ β. Then by Proposition 2.14 β1δα ≈Γ β1β, and again since ≈Γ is an equivalence, by transitivity α1α ≈Γ β1δα. By Proposition
2.11 ≈Γ respects weak norms, thus α1  +  α  = β1  +  δ  +  α  , and δ  =
 α1  − β1  .	 

This proposition guarantees the soundness and backwards soundness of the following two rules:


align 	α1α =Γ β1β	 α1δβ =Γ β1β α =Γ δβ

 δ  =  β1 
− α1
 , α1  > 1


Note that by 1. of Proposition 3.1 there are only finitely many presented possible choices for δ. Thus there are only finitely many ways to apply each rule.
Discussion In fact we can refine the rule by imposing more strict restrictions on δ. To do so, for α, β ∈ V∗ with  α  ≥ β  , we first define the set D(α, β) inductively defined the weak norm of β as follows: if  β  = 0 and β = ϵ then D(α, β) = {α}, otherwise
D(α, β) = ∪{D(α', β') | ∃a ∈ Act.α =a⇒ α',β =a⇒ β', α'  <  α  , β'  <  β  }.
Note that in the above formula the weak norm of α' (β') is exactly one less than that of α (β). With this in mind it is not difficult to see that D(α, β) is finite presented and can be easily computed. Then instead of requiring  δ  =  β1  −  α1  in the side condition of rule align, we can require δ ∈ D(β1, α1), and the refined rule remains both sound and backwards sound. With the new restriction, we only need to consider fewer choices for δ.

Unfolding by Matching the Transitions
Definition 3.4 Let (α, β) ∈ V∗ × V∗. A binary relation M ⊆ V∗ × V∗ is a match for (α, β) if the following hold:
whenever α −a→ α' then β =aˆ⇒ β' for some (α', β') ∈ M ;
whenever β −a→ β' then α =aˆ⇒ α' for some (α', β') ∈ M ;
whenever (α', β') ∈ M then α'  =  β'  and either α −a→ α' or β −a→ β' for some a ∈ Σ, where α', β' may be infinite string.
It is easy to see that for a given (α, β) ∈ V∗ ×V∗, there are maybe infinitely many possible M ⊆ V∗ ×V∗ which satisfies 3. above, but they are finitely presented from section 2.3. And for such M it is not difficult to see that it is decidable whether M is a match for (α, β).
The rule can be used to obtain subgoals by matching transitions, and it is based on the following observation.
Proposition 3.5 Let α, β ∈ V∗ . Then α ≈Γ β if and only if there exists a match
M for (α, β) such that α' ≈Γ β' for all (α', β') ∈ M.
Proof. Obvious from Definition 2.7.	 
This proposition guarantees the soundness and backwards soundness of the following rule:




unfold
	α =Γ β	
{α' =Γ β' | (α', β') ∈ M}

M is a match for (α, β)


As pointed out above there are finitely many presented matches for a given (α, β), so there are finitely many presented ways to apply this rule on (α, β).

Substituting the States
The next four rules can be used to substitute the expressions in the goal. The rules are based on the following observation.
Definition 3.6 (dominate and improve)[9]
The pair (α1α2, β1β2) dominates the pair (α1, β1).
The pair (α, β) improves the pair (α1, β1) if there is some i0 such that for i < i0 the (total) number of occurrences of Xi is equal in both pairs while the number of occurrences of Xi0 is smaller in (α, β) than in (α1, β1).
Proposition 3.7 Every sequence of pairs in which every pair improves the previous one is ﬁnite.
Definition 3.8 By ≺ we denote the well-founded ordering on V∗ given as follows:

Xk1 ··· Xkn  ≺ XL1 ··· XLn
iff there exists j such that kj < lj and for all i < j we

1	n	1	n
have ki = li.
Definition 3.9 α1 =Γ α2 is the dominated node of α1β1 =Γ α2β2 or α2β2 =Γ α1β1, if α1 =Γ α2 occurs above them in the tableau.
It is straightforward to show that ≺ is well-founded. We shall rely on the fact that ≺ is total in the sense that for any α, β ∈ V∗ such that α ≡ β we have α ≺ β or β ≺ α. Also we shall rely on the fact that α ≺ β implies αα' ≺ βα' as well as α ≺ βα' for any α ∈ V∗. All these properties are easily seen to hold for ≺.
When building tableaux basic nodes might dominate other basic nodes; we say a basic node n : α1β1 = α2β2 or α2β2 = α1β1 dominates any node n' : α1 = α2 or n' : α1 = α2 which appears above n in the tableau. There n' : α1 = α2 or n' : α1 = α2 is called the dominated node.
Proposition 3.10 For every β1, β2, A, B are X, Y’s Generator respectively, if
Xβ1 ≈Γ Y β2 then XAβ1 ≈Γ Y B∗β2 iff XAβ1 ≈Γ XB∗β2 iff Y Aβ1 ≈Γ Y B∗β2.
Proposition 3.11 For every α1, α2, if β1 ≈Γ β2, then α1β1 ≈Γ α2β2 iff α1β1 ≈Γ
α2β1 iff α1β2 ≈Γ α2β2.
This proposition guarantees the soundness and backwards soundness of the fol- lowing rules:


XAβ1 =Γ Y B∗β2	∗

sub1l
XAβ1 =Γ
XB∗β2
(if  XAβ1  = Y B β2  ≤ 2, A ∈ Gen(X),B ∈ Gen(Y ), X ≺





XAβ1 =Γ Y B∗β2
Y and there has been a node LabeLLed Xβ1 =Γ Y β2)

∗

sub1r

Y Aβ1 =Γ Y B∗β2
(if  XAβ1  = Y B β2  ≤ 2, A ∈ Gen(X),B ∈ Gen(Y ), Y ≺

X and there has been a node LabeLLed Xβ1 =Γ Y β2)



sub2l α1β1 =Γ α2β2
α1β1 =Γ α2β1
(if  α1β1 
= α2β2 
≤ 1, there is β1
≺ β2
and a dominated node

LabeLed β1 =Γ β2 or β2 =Γ β1 )


sub2r α1β1 =Γ α2β2
α1β2 =Γ α2β2
(if  α1β1 
= α2β2 
≤ 1, there is β2
≺ β1
and a dominated node

LabeLed β1 =Γ β2 or β2 =Γ β1 )
In fact in section 2, from Proposition 3.7 we know that every sequence of pairs in which every pair improves the previous one is finite. So this means that there are only finitely many different ways to apply the rules.

Matching the States
Since the node contain ∗(or +) which exists uncertain factor, then we want to certain them to match.
Proposition 3.12 If XA∗ ≈Γ Y B∗ with A ∈ Gen(X), B ∈ Gen(Y ), we choose some m, n satisfying Norm(XAm) = Norm(Y Bn), then XAm ≈Γ Y Bn.


α1Bη1 ··· Bηn β1 =Γ α2Aκ1 ··· Aκn β2

star
1	n	1	n

{α1Bb1 ··· Bbn β1 =Γ α2Aa1 ··· Aan β2 | Norm(α1Bb1 ··· Bbn β1)= Norm(α2Aa1 ··· Aan β2)}
1	n	1	n	1	n	1	n
η1, ··· , ηn, κ1, ··· , κn ∈ {0, 1, ∗, +}, b1 ··· bn, a1 ··· an is minimum vaLue to satisfy Norm(α1Bb1 ··· Bbn β1)= Norm(α2Aa1 ··· Aan β2)
1	n	1	n
We  call  α1Bb1 ··· Bbn β1	=Γ	α2Aa1 ··· Aan β2	as  the  instantiation  of

α Bη1 ··· Bηn β
1	n	1	n
=  α Aκ1 ··· Aκn β .

1  1	n	1	Γ	2  1	n	2

Constructing Tableau
We determine whether α ≈Γ β by constructing a tableau. There is each tableau with root α =Γ β using the nine rules introduced above. A tableau is a finite tree with nodes labeled by equations of the form α =Γ β, where α, β ∈ V∗, Γ ⊆ V∗ × V∗ is uniform.
Initial Γ = {(X, Y ) | X  ≤ 1, X,Y ∈ V}. Moreover if α =Γ β labels a non-leaf node, then the following are satisfied:
α  =  β ;

its sons are labeled by α1 =Γ1 β1 ... αn =Γn βn obtained by applying rule reduc
or align or sub1,2 or unfold or star to α =Γ β, in that priority order;
no other non-leaf node is labeled by α =Γ β.
A tableau is a successful tableau if the labels of all its leaves have either of the following forms:
α =Γ β where there is a non-leaf node also labeled α =Γ β;
α =Γ β where α =Γ β;

Decidability, Soundness, and Completeness
Theorem 3.13 For α, β ∈ V∗, and uniform Γ ⊆ V∗ × V∗, there are ﬁnitely many tableaux with root α =Γ β, and all of them can be effectively presented.
Proof. Note that the only rule in which the weak norms of states in the subgoals can be greater than that in the original goal is rule unfold, and the priority rule mentioned above determines that this rule can only be applied when all two other rules are not applicable, and it is easy to see that this can only happen when both states in the goal contains no more than 2 letters which are not Generators. When both states that contain Generators have more than 2 letters, there are sub1,2 rules to control their expansion. There are the uncertain factor ∗, + will be certain by the star rules. This fact implies that each state in the nodes of a tableau with root α ≈Γ β has bounded weak norms. Then by 1. and 3. of Proposition 3.1 there are bounded number of different labels in such a tableau. And since no two non-leaf nodes are labeled the same, a tableau with root α ≈Γ β can only have bounded number of non-leaf nodes, thus the number of tableaus with root α ≈Γ β must be finite.
There are finitely many (exactly 3) rules to apply on each node, and each rule with finitely many different ways to apply, thus there is a way to enumerate all different tableaux with a root α ≈Γ β.	 
This theorem gives us a decision procedure for the problem whether there is a successful tableau with root α =Γ β, since we just need to enumerate all tableaux with root α =Γ β, and then test if each of them are successful (this test is also decidable as mentioned earlier).
Definition 3.14 A sound tableau is a tableau such that if α =Γ β is a label in it then α ≈Γ β.
Theorem 3.15 A successful tableau is a sound tableau.
Proof. Let T be a successful tableau. We define K = {(α, Γ, β) | α, β ∈ V∗, Γ ⊆ V∗ × V∗ is uniform} to be the smallest set of triples satisfies the following:
if α =Γ β then (α, Γ, β) ∈ K;
if there is a node in T labeled with α =Γ β and on which rule unfold is applied then (α, Γ, β) ∈ K;

if (α, Γ, α') ∈ K, (γα', Γ, β) ∈ K, and  γ  > 1, then (γα, Γ, β) ∈ K;
if (α, Γ', β) ∈ K, α   = β   > 1, and moreover (α', β') ∈ Γ' implies (α'X, Γ, β'X) ∈ K, then (αX, Γ, βX) ∈ K.
if (XAβ1, Γ,XB∗β2) ∈ K, A ∈ Gen(X),B ∈ Gen(X), (Xβ1, Γ,Y β2) ∈ K and
X ≺ Y , then (XAβ1, Γ,Y B∗β2) ∈ K;
if (Y Aβ1, Γ,Y B∗β2) ∈ K, A ∈ Gen(X),B ∈ Gen(X), (Xβ1, Γ,Y β2) ∈ K and
Y ≺ X, then (XAβ1, Γ,Y B∗β2) ∈ K;
if (α1, Γ, α2) ∈ K, (α1β1, Γ, α1β2) ∈K and α1 ≺ α2, then (α1β1, Γ, α2β2) ∈ K;
if (α1, Γ, α2) ∈ K, (α2β1, Γ, α2β2) ∈K and α2 ≺ α1, then (α1β1, Γ, α2β2) ∈ K;
if (α' , Γ, α' ) ∈ K, Norm(α' ) = Norm(α' ) and (α' , Γ, α' ) is the instantiation
1	2	1	2	1	2
of (α1, Γ, α2), then (α1, Γ, α2) ∈ K.
We will prove the following properties about K:
If α =Γ β labels a node in T then (α, Γ, β) ∈ K.
If (α, Γ, β) ∈ K, then either  α  =  β  ≤ 1 and α =Γ β, or  α  > 1 and  β  > 1 and moreover the following hold:
if α −a→ α' then β =aˆ⇒ β' for some β' such that (α', Γ, β') ∈ K;
if β −a→ β' then α =aˆ⇒ α' for some α' such that (α', Γ, β') ∈ K.
Here we omit the details.	 
This theorem means that the decision procedure for existence of successful tableau with root α =Γ β is sound for α ≈Γ β.
Theorem 3.16 Let α, β ∈ V∗, and Γ ⊆ V∗ × V∗ be uniform. If α ≈Γ β then there is a successful tableau with root α =Γ β.
Proof. By using Propositions 3.2, 3.3, 3.5, 3.10, 3.11 and 3.12 we can prove the following basic fact: if a sound tableau T is not successful, then we can construct another sound tableau T ' which has the same root as T and which has one more non-leaf node than T .
Repeatedly using this basic fact, we can construct a sequence of sound tableaux T0,..., Tn,... such that T0 is just the single leaf node α =Γ β. However since there are only finitely many tableaux with root α =Γ β, this sequence must end, and obviously the last tableau in the sequence is a successful tableau with root α =Γ β.	 

This theorem means that the decision procedure for existence of successful tableau with root α =Γ β is complete for α ≈Γ β.
At last, the following theorem shows how to use the decidability of ≈Γ to solve the decidability of ≈.
Theorem 3.17 Let α, β ∈ V∗ be normed. Then α ≈ β if and only if there exists a sound and uniform Γ ⊆ V∗ × V∗ such that α ≈Γ β.

Theorem 3.18 Let Γ ⊆ V × V be uniform. Then Γ is sound if and only if for all
(α, β) ∈ Γ, there is a match M for (α, β) such that α' ≈Γ β' for all (α', β') ∈ M.
Conclusions and Directions for Further Work
In this paper we proposed a tableau decision method for weak bisimilarity of the class of a subset of normed BPA processes with silent actions. Along the way, we use the finite characteristic to prove infinite branching problem. There does not say anything about the complexity of the tableau-based decision procedure. Since we only want to present a simple decidable method. Of cause, recent results by Richard Mayr show that the problem is EXPTIME-hard for (general) BPA and even for normed BPA [13].
we have yet to find an extension to the results presented in this paper which will remove our restriction to normed processes. We know that we will have decidability of the whole class of BPA processes if we can prove the unique decomposability theorem. However, we have not yet been able to prove this theorem.
For bisimilarity, we would like to explore how much more expressive we can make our calculus whilst maintaining a decidable theory. And encouraged by the positive results so far obtained on the decidability of bisimulation equivalence, we should start seeking more results which would still allow us to obtain decidability. For future works, one may consider similar tableau method for corresponding problem to lift the restriction of normedness BPA which is much harder challenge.

References
Moller, F., Infinite results. In: Sassone, V., Montanari, U.(eds.) CONCUR 1996. LNCS, vol.1119, pp. 195-216. Springer, Heidelberg.
Esparza, J., Decidability of model checking for infinite-state concurrent systems. Acta Informatica, 97-34: 85-107.
Burkart, O., J.Esparza, More infinite results. Electronic Notes in Theoretical computer Science.
Baeten, J.C.M., Bergstra, J.A., Klop, J.W., Decidability of bisimulation equivalence for processes generating context-free languages. Journal of the Association for Computing Machinery, 93(40), 653- 682.
Christensen, S.,H.Hu¨ttel,and C.Stirling, Bisimulation equivalence is decidable for all context-free processes. Information and Computation, 95(121), 143-148.
Burkart, O., Didier Caucal, Bernhard Steffen, An elementary bisimulation decision procedure for arbitrary context-free processes. In Proc. of the 20th International Symposium on Mathematical Foundations of Computer Science table of contents, pp.423-433.
Srba, J., Roadmap of Infinite Results. Bulletin of the European Association for Theoretical Computer Science, vol.78, columns:Concurrency, pp163-175.
Esparza, J., Petri nets, commutative context-free grammars, and basic parallel processes. In: Reichel, H.(ed.) FCT 1995. LNCS, vol. 965,PP. 221-232. Springer, Heidelberg.
Hirshfeld, Y., Bisimulation trees and the decidability of weak bisimulations. In: INFINITY 1996. proceedings of the 1st International Workshop on Verification of Infinite State Systems, Germany, vol.5.
Stirling, C., Decidability of bisimulation equivalence for normed pushdown processes. In Proceedings of Concurrency Theory, Pisa, Italy, pp.217-232.


Hu¨ttel, H., Stirling, C., Actions speak louder than words. Proving bisimilarity for context-free processes. In: LICS 1991. proceedings of 6th Annual symposium on Logic in Computer Science, Amsterdam, pp 376-386.
Hu¨ttel Hans, Silence is golden: Branching bisimilarity is decidable for. context-free processes. In Proceedings of CAV91, Denmark, pp.2-12.
Mayr, R., Weak Bisimilarity and Regularity of Context-free Processes is EXPTIME-hard. In: EXPRESS 2003, 10th International Workshop on Expressiveness in Concurrency, Marseille, France.
Milner, R., “A Calculus of Communicating Systems”. LNCS, vol. 92. Springer, Heidelberg.
Milner, R., “Communication and Concurrency”. Prentice-Hall International, Englewood Cliffs.
Bergstra, J.A., Klop, J.W., Process theory based on bisimulation semantics.In: Prodeedings of REX Workshop, Amsterdam, The Netherlands, pp. 50-122.
Caucal, D., Graphes canoniques de graphes alge´briques. Informatique the´orique et Applications(RAIRO), 90-24(4), 339-352.
Hirshfeld, Y., Jerrum, M., Moller, F., Bisimulation equivalence is decidable for normed process algebra. In: Wiedermann, J., van Emde Boas, Pl, Nielsen, M.(eds.)ICALP 1999, LNCS, vol. 1644, pp. 412-421. Springer, Heidelberg.
Se´nizergues, G, Decidability of bisimulation equivalence for equational graphs of finite out-degree. In
Proc.IEEE FOCS’98, pp.120-129.
Stirling, C., Decidability of Weak Bisimilarity for a Subset of Basic Parallel Processes. In Proceedings of the 4th International Conference on Foundations of Software Science and Computation Structures (FOSSACS’01), LNCS, vol. 2030, pp: 379 - 393. Springer, Heidelberg.
Antonn Kucera, Richard Mayr, Weak Bisimilarity with Infinite-State Systems Can Be Decided in Polynomial Time. In Proc. CONCUR 1999, pp.368-382.
Christensen, S., Hans Hu¨ttel, Colin Stirling, Bisimulation Equivalence is Decidable for all Context-Free Processes. In proceedings of CONCUR 1992, pp:138-147.
Groote, J.F., A short proof of the decidability of bisimulation for normed BPA processes.
Inform.process.lett.42,167-171.
Huynh, D.T., Tian, L., Deciding bisimilarity of normed context-free processes is in σP . Theoretical
Computer Science 12, 183-197.
Liu Xinxin, Chen Haiyan, Deciging weak bisimilarity of normed context-free processes using tableau. In proceeding of the 4th International Colloquium on Theoretical Aspects of Computing (ICTAC 2007), LNCS, vol.4711, pp:337-350.
