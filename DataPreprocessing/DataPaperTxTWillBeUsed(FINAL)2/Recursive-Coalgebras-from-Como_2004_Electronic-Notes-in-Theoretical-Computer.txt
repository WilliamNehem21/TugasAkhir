Electronic Notes in Theoretical Computer Science 106 (2004) 43–61  
www.elsevier.com/locate/entcs


Recursive Coalgebras from Comonads *

Venanzio Capretta1 ,2
Dept. of Mathematics and Statistics, University of Ottawa 585 King Edward Ave., Ottawa, Ont. K1N 6N5, Canada

Tarmo Uustalu3
Institute of Cybernetics at Tallinn Technical University Akadeemia tee 21, EE-12618 Tallinn, Estonia

Varmo Vene4
Dept. of Computer Science, University of Tartu
J. Liivi 2, EE-50409 Tartu, Estonia


Abstract
We discuss Osius’s [22] concept of a recursive coalgebra of a functor from the perspective of program- ming semantics and give some new sufficient conditions for the recursiveness of a functor-coalgebra that are based on comonads, comonad-coalgebras and distributive laws.
Keywords: Recursive coalgebra, monad, functor-coalgebra



 Research supported by the Estonian-French scientific cooperation programme Parrot and by the Estonian Science Foundation under grant No. 5567.
1 Previously at INRIA Sophia Antipolis, 2004 route des Lucioles, BP 93, F-06902 Sophia
Antipolis, France.
2 Email: vcapr396@science.uottawa.ca
3 Email: tarmo@cs.ioc.ee
4 Email: varmo@cs.ut.ee



1571-0661 © 2004 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2004.02.034

Introduction
This paper is dedicated to the study of recursive functor-coalgebras. In the sense of [22], a coalgebra (A, α) of a functor F : C → C is recursive iff, for any algebra (C, ϕ) of F , the morphism equation
f = ϕ ◦ Ff ◦ α (∗) has a unique solution in the unknown f : A → C.
Our prime interest in recursive coalgebras comes from their application to
programming semantics. In programming, it is customary to wish to be able to take some function Φ : C(A, C) → C(A, C) and read the equation
f = Φ(f )	(∗∗)
as a function definition. The problem is that, for arbitrary givens, the equation (**) is not guaranteed to make sense as a definition: it may have exactly one solution, but it can just as well have no solutions or multiple solutions among which there is no most preferable solution. But for more specific givens, the equation may indeed be predestined to have exactly one solution (or at least one solution, but among them a canonical one) and in this case it is really meaningful to see it as a definition.
For (*), which is a structured instance of (**), one of the ways to know that it properly defines a morphism is to know that (A, α) is recursive. The equation form (*) covers most useful situations in programming and examples of recursive coalgebras abound. To mention some: (a) For any functor F : C → C with an initial algebra, (µF, inF ), the F -coalgebra (µF, in−1) is recursive (iteration). But so are also the F (Id × KµF )-algebra (µF, F ⟨ idµF , idµF ⟩ ◦ 
in−1) (primitive recursion), the F (Id × F )-coalgebra (µF, F ⟨ idµF , in−1 ⟩◦ in−1)
F	F	F
(iteration back one or two steps) etc. Recursive coalgebras cover a wide variety
of structured recursion schemes for initial algebras. (b) The set ListZ of all lists over some linearly ordered set Z, together with the nil and cons functions, is the initial algebra of the functor LZ = K1 + KZ × Id : Set → Set. Endowed with the analysis of every non-empty list into its head and tail, the set ListZ is a recursive LZ-coalgebra and so is every suffix-closed subset of ListZ. A recursive LZ-coalgebra is also given by the set ListZ equipped with the analysis of every non-empty list into its smallest element and the rest. The set ListZ equipped with the analysis of every non-empty, non-singleton list into two halves is a recursive coalgebra of the functor BTZ = K1 + KZ +Id×Id. Etc. (c) A functor may well have recursive coalgebras without having an initial algebra. E.g., a set with a relation on it carries a recursive coalgebra of the powerset functor

iff the relation is wellfounded.
In this paper, we present some motivation for the use of recursive coalge- bras as a paradigm of structured recursion in programming semantics, present the basic theory of recursive coalgebras and, centrally, give some new con- ditions for the recursiveness of a coalgebra based on comonads, comonad- coalgebras and distributive laws. The latter results are a generalization of our results in [27] on structured recursion schemes for initial algebras and, modulo the duality, the dual results in [4,7] on structured corecursion schemes for final coalgebras.
Related work Recursive coalgebras, together with wellfounded coalgebras— a related concept where, instead of a recursion principle, the coalgebra has to obey an induction principle—, were first introduced by Osius [22] in his work on categorical set theory. He considered wellfounded and recursive coalge- bras of the powerset functor of the category of sets (or, more abstractly, of the powerobject functor of an elementary topos), and proved the general re- cursion theorem, that every wellfounded coalgebra of the powerset functor is recursive. Taylor [23,24,25] took Osius’s ideas further, showing that the gen- eral recursion theorem holds for any functor on Set preserving monos and inverse image diagrams. Eppendahl [9,10] studied recursive (a.k.a. algebra- initial) coalgebras with the objective of obtaining an explanation to Freyd’s [12,13,14] transposition of invariant objects.
The dual concept of a corecursive (a.k.a. coalgebra-final, iterative) algebra was used by Escardo´ and Simpson [11] to provide a universal characterization of the closed euclidean interval. The newest work by Ad´amek, Milius and Velebil [19,3] on the free completely iterative monad (resp. the free iterative monad) is centered around a related, but stronger concept (resp. its finitary version considered also earlier by Nelson [21]).
Structured recursion schemes for initial algebras have been studied by the authors [27] and the dual schemes for final coalgebras by Bartels [4] and Can- cila, Honsell and Lenisa [7]. To functional programming, the structured gen- eral recursion scheme was first introduced by Meijer, Fokkinga and Paterson
[18] who called it the hylo scheme. Doornbos and Backhouse [8] have asked the question under what conditions the hylo diagram has a unique solution. In type theory, structured (co)recursion schemes for initial algebras (final coal- gebras) have been studied by, e.g., Gim´enez [15,16] and (co)recursion more generally by, e.g., Bove and Capretta [5,6] and McBride and McKinna [17].
Organization of the paper In Section 2, we explain our motivation for study- ing recursive coalgebras and give the definition. In Section 3, we present a


number of important basic facts about recursive coalgebras. In Section 4, which is the main section of the paper, we show how recursive coalgebras arise from comonads, comonad-coalgebras and distributive laws. In Section 5, we conclude by pointing out some directions for future research.

Recursive coalgebras: motivation and definition
In functional programming, functions are commonly specified by recursive equations. Often, these equations have a nice and simple structure, although this structure may be hidden. As an example consider a possible definition of the quicksort algorithm. Let Z be a set linearly ordered by ≤.

qsort : ListZ → ListZ qsort [] = []
qsort (x : l)= qsort(l≤x) ++ (x : qsort(l>x))
where l≤x = [y ← l | y ≤ x] and l>x = [y ← l | y > x].
This definition is clearly based on an equation of the form qsort = Φ(qsort ) where Φ : Set(ListZ, ListZ) → Set(ListZ, ListZ). With minimal effort, we can see that Φ(qsort ) may be rewritten into an equivalent form qmerge ◦BT qsort ◦ qsplit where BTZ X = 1 + Z × X × X. The first morphism qsplit of the composition determines the arguments for the recursive calls; (ListZ, qsplit) is a BTZ-coalgebra:
qsplit : ListZ → 1+ Z × ListZ × ListZ
qsplit [] = inl(∗)
qsplit (x : l)= inr(⟨x, l≤x, l>x⟩)
The second morphism BT qsort: BTZ(ListZ) → BTZ(ListZ) makes the recur- sive calls. The third morphism qmerge determines how the results of the recursive calls combine into the result of the main call; (ListZ, qmerge) is a BTZ-algebra:
qmerge : 1 + Z × ListZ × ListZ → ListZ qmerge inl(∗)= []
qmerge inr(⟨x, l1, l2⟩)= l1 ++ (x : l2)


The equation qsort = qmerge ◦ BTqsort ◦ qsplit is meaningful as a definition since it determines a unique function. The reason is that the arguments of the recursive calls are always strictly shorter than that of the main call— a property of the coalgebra (ListZ, qsplit). The equation remains uniquely solvable also, if we replace (ListZ, qmerge) with some other F -algebra (C, ϕ): we may say that (ListZ, qsplit) is recursive.
Abstracting away the concrete data of the above example, we are led to the following definition.
Definition 2.1 (coalgebra-to-algebra morphism, recursive coalgebra) Let F : C → C be a functor. A coalgebra-to-algebra morphism from an F-coalgebra (A, α) to an F-algebra (C, ϕ) is a morphism f : A → C such that
FA ¸α,  A
Ff	f
J ϕ	 J 
FC	C

An F-coalgebra (A, α) is recursive (or algebra-initial) iff for every F- algebra (C, ϕ) there exists a unique coalgebra-to-algebra morphism from (A, α) to (C, ϕ), denoted fixF,α(ϕ).
Recursive coalgebras and (ordinary) coalgebra morphisms form a category
RecCoalgF which is trivially a full subcategory of CoalgF .
We note that, in the functional programming community, the coalgebra- to-algebra morphism condition is known as hylo diagram [18]. The recursion scheme used—hylo scheme—says that, if F has an initial algebra whose in- verse is its final coalgebra (which happens if C is algebraically compact), then the post-composition of the initial algebra morphism to (C, ϕ) with the final coalgebra morphism from (A, α) (the hylomorphism) is a coalgebra-to-algebra morphism from (A, α) to (C, ϕ). The hylomorphism is not necessarily a unique solution of the hylo diagram, just a canonical one.
For the powerset functor P : Set → Set, the notion of recursive coalgebra coincides with that of wellfounded relation. Indeed, any P-coalgebra α : A → PA determines and is determined by a relation ≺ on A (we use the symbol
≺ to help intuition, but the relation need not be an order): α(a)= {x ∈ A | x ≺ a}, x ≺ a iff x ∈ α(a). A P-coalgebra-to-algebra morphism from (A, α) to (C, ϕ) is a function f : A → C such that f = ϕ ◦ Pf ◦ α. If a ∈ A, then (Pf ◦ α)(a)= {f (x) | x ≺ a}, so the condition says that
f (a)= ϕ({f (x) | x ≺ a})


We get that (A, α) is recursive iff, for any set C and function ϕ : PC → C, the equation above has a unique solution in f : A → C. This happens exactly when the relation ≺ is wellfounded.

Recursive coalgebras: basic constructions
As exemplified by the last example (determining the wellfoundedness of a decidable relation on natural numbers is undecidable), it can be hard to de- termine whether a coalgebra of a given functor F is recursive. So, instead of trying to solve the unsolvable, we will point out a few simple cases where some coalgebra is obviously recursive and then provide various constructions for producing new recursive coalgebras out of coalgebras already known to be recursive. We start with the simplest interesting case when the functor F has an initial algebra. In this situation, we agree to write (µF, inF ) for the initial F -algebra and ItF ( ϕ ) for the unique algebra morphism from (µF, inF ) to a given F -algebra (C, ϕ) (the iteration given by (C, ϕ)).
Proposition 3.1 Let F : C → C be a functor. If F has an initial algebra, then (µF, in−1) is a ﬁnal recursive F-coalgebra.
Proof. The F -coalgebra (µF, in−1) is certainly recursive, since the unique algebra morphism ItF ( ϕ ) from (µF, inF ) to an F -algebra (C, ϕ) is also a unique coalgebra-to-algebra morphism from (µF, in−1) to (C, ϕ).
To see that (µF, in−1) is final among the recursive F -coalgebras, notice that the unique coalgebra-to-algebra morphism from a recursive F -coalgebra (A, α) to (µF, inF ) is also a unique coalgebra morphism from (A, α) to (µF, in−1). 
Corollary 3.2 If F has an initial algebra, then the unique coalgebra-to- algebra morphism from a recursive F-coalgebra (A, α) to an F-algebra (C, ϕ) factors as follows:
fixF,α(ϕ)= ItF ( ϕ ) ◦ fixF,α(inF )
Proposition 3.3 Let (A, α) be a recursive F-coalgebra. If F has an initial algebra, then m = fixF,α(inF ) : A → µF is split mono (as a morphism, not necessarily as a coalgebra morphism) iff α is split mono.
Proof. (if) Let the postinverse of α : A → FA be α− : FA → A. Then h = ItF ( α− ) : µF → A is a postinverse of m : A → µF : indeed, we have h◦m = h◦inF ◦Fm◦α = α− ◦F (h◦m)◦α, but we also have idA = α− ◦F idA◦α, hence h ◦ m = fixF,α(α−)= idA.


(only if) Write h : µF → A for the postinverse of m : A → µF . Then α− = h ◦ inF ◦ Fm : FA → A is a postinverse of α : A → F A, since α− ◦ α = h ◦ inF ◦ Fm ◦ α = h ◦ m = idA.	 

Here is the first proposition useable to reduce the question of recursiveness of one coalgebra to that of some other, related coalgebra.
Proposition 3.4 Let (A, α) be a recursive F-coalgebra and (B, β) an F- coalgebra.  If there are F-coalgebra morphisms h : (A, α) → (B, β) and k : (B, β) → (F A, Fα) such that β = Fh ◦ k, then (B, β) is also recursive.
Proof. Consider an arbitrary F -algebra (C, ϕ). Let g = fixF,α(ϕ). The situ- ation is summarized in the following diagram.





F 2A ¸,
F 2g



FA ¸,
Fg 
B,,
h
A
g

2J Fϕ  J ϕ	 J 
F C	FC	C
Let f = ϕ ◦ Fg ◦ k : B → C. We show that fixF,β(ϕ) = f . We have f = ϕ ◦ Fg ◦ k = ϕ ◦ F (ϕ ◦ Fg ◦ α) ◦ k = ϕ ◦ F (ϕ ◦ Fg ◦ k) ◦ β = ϕ ◦ Ff ◦ β, hence f is a F -coalgebra-to-algebra morphism from (B, β) to (C, ϕ).
To see that f is unique, suppose that f ' is another F -coalgebra-to-algebra morphism from (B, β) to (C, ϕ). Then f ' ◦h = ϕ◦Ff ' ◦β ◦h = ϕ◦F (f ' ◦h)◦α, which implies f ' ◦ h = fixF,α(ϕ) = g. Consequently, f ' = ϕ ◦ Ff ' ◦ β = ϕ ◦ F (f ' ◦ h) ◦ k = ϕ ◦ Fg ◦ k = f .	 
A number of useful propositions follow from Prop. 3.4. First, recursive
F -coalgebras are preserved by F .
Proposition 3.5 If (A, α) is a recursive F-coalgebra, then (F A, Fα) is also a recursive F-coalgebra.
Proof. From Prop. 3.4 for h = α and k = idFA.	 
The implication of Prop. 3.1 can be turned around.
Proposition 3.6 Let F : C → C be a functor.


If (A, α) is a recursive F-coalgebra and α is iso, then (A, α−1) is an initial F-algebra.
If (A, α) is a ﬁnal recursive F-coalgebra, then α is iso (both as a mor- phism and as a coalgebra morphism) (and hence (A, α−1) is an initial F- algebra).
Proof. (a) The unique coalgebra-to-algebra morphism from (A, α) to an F - algebra (C, ϕ) is also a unique algebra morphism from (A, α) to (C, ϕ).
(b) By Prop. 3.5, we have that (F A, Fα) is a recursive F -coalgebra and it is trivial that α is a coalgebra morphism from (A, α) to (F A, Fα). On the other hand, as (A, α) is a final recursive coalgebra, there exists a coalgebra morphism h from (F A, Fα) to (A, α); i.e. we have the following situation:
FA ¸,α	 A
Fα	α
J Fα	J 
F 2A ¸, FA 
Fh	h
J ¸,α	 J 
FA	A
Now, as (A, α) is a final recursive coalgebra, there cannot be two distinct coalgebra morphisms from (A, α) to (A, α), hence h ◦ α = idA. From h being a coalgebra morphism, we further get also that α ◦ h = F (h ◦ α)= idFA. 
It is not true for any category that a subcoalgebra of a recursive coalgebra is recursive. But the following weaker statement is always true.
Proposition 3.7 Let (A, α), (B, β) be F-coalgebras and m : B → A a split monic coalgebra morphism from (B, β) to (A, α). (a) If (A, α) is recursive, then (B, β) is also recursive. (b) If α is split mono, then so is β.
Proof. Let h be the postinverse of m. (a) Let k = α ◦ m. Then h is trivially a coalgebra morphism and k is a coalgebra morphism as Fα ◦ k = Fα ◦ α ◦ m = F (α ◦ m) ◦ β = Fk ◦ β. Furthermore, β = β ◦ h ◦ m = Fh ◦ α ◦ m = Fh ◦ k. By Prop. 3.4, (B, β) is recursive.
(b) Let α− be the postinverse of α. Then β− = h ◦ α− ◦ Fm is a postinverse of β, since β− ◦ β = h ◦ α− ◦ Fm ◦ β = h ◦ α− ◦ α ◦ m = h ◦ m = idB. 
Here is another useful proposition, with a relatively involved proof. In the next section, we shall see that, under an extra assumption, this proposition is an instance of a more general theorem.


Proposition 3.8 Let C be cartesian and F : C → C a functor. If (A, α) is a recursive F-coalgebra, then (A, F ⟨ idA,α ⟩◦ α) is a recursive F (Id × F )- coalgebra.
Proof. Consider an arbitrary F (Id × F )-algebra (C, ϕ).   Let ψ  =
⟨ ϕ, F fstC,F C ⟩ : F (C × FC) → C × FC, g = fixF,α(ψ) : A → C × FC 
and f = fstC,F C ◦ g : A → C. We show that fixF (Id×F ),F ⟨ idA,α ⟩◦α(ϕ)= f .
That f is a F (Id× F )-coalgebra-to-algebra morphism from (A, F ⟨ idA,α ⟩◦ α) to (C, ϕ) is evident from the commutation of the outer square in the dia- gram


F (A × F A) ¸,
¸¸¸
¸¸F¸(¸i¸d×α)
F ⟨ id,α ⟩

F ⟨ id,id ⟩,,,,,,,
FA ¸, α	 A

¸¸¸¸¸¸
,,,
   ,




F (f×Ff)
F (g×Fg)

J 
F (A × A)
JF ( g×g)
Fg	g

f

F ((C × FC)
F (id×ψ) F ((C × FC)
F ⟨¸id,,id ⟩ F (	J 
ψ	  J 

×F (C × FC))
F (fst×F fst)
×(C × FC))
F (fst×snd)
C × FC)
C × FC 
fst

z J		
F (
J		
ϕ	 J , s

C × FC)	F (C × FC)	F (C × FC)	C

To verify that f is unique, suppose that f ' is another F (Id × F )- coalgebra-to-algebra morphism from (A, F ⟨ idA,α ⟩ ◦ α) to (C, ϕ).	Then
⟨ f ',Ff ' ◦ α ⟩ = ⟨ ϕ ◦ F ⟨ f ',Ff ' ◦ α ⟩◦ α, F (fstC,F C ◦⟨ f ',Ff ' ◦ α ⟩) ◦ α ⟩ =
⟨ ϕ, F fstC,F C ⟩◦ F ⟨ f ',Ff ' ◦ α ⟩◦ α = ψ ◦ F ⟨ f ',Ff ' ◦ α ⟩◦ α which tells us that
⟨ f ',Ff ' ◦ α ⟩ = fixF,α(ψ)= g. As a consequence, f ' = fstC,F C ◦⟨ f ',Ff ' ◦ α ⟩ =
fstC,F C ◦ g = f .	 

The following two transposition propositions appeared in Eppendahl [9,10].

Proposition 3.9 Let F, G : C → C be functors and τ : F →.
transformation.
G a natural

If (A, α) is a F-coalgebra and (C, ϕ) is a G-algebra, then f : A → C is a G-coalgebra-to-algebra morphism from (A, τA ◦ α) to (C, ϕ) iff it is a F- coalgebra-algebra morphism from (A, α) to (C, ϕ ◦ τC).
If an F-coalgebra (A, α) is recursive, then the G-coalgebra (A, τA ◦ α)
is recursive.

Proof. (a) Immediate from ϕ ◦ Gf ◦ τA ◦ α = ϕ ◦ τC ◦ Ff ◦ α.
(b) For any G-algebra (C, ϕ), the unique F -coalgebra-to-algebra morphism from (A, α) to (C, ϕ ◦ τC) is also a unique G-coalgebra-to-algebra morphism from (A, τA ◦ α) to (C, ϕ).	 
Proposition 3.10 Let F : C → D and G : D → C be functors.
If (A, α) is an GF-coalgebra and (C, ϕ) is a FG-algebra, then there is a bijection between FG-coalgebra-to-algebra morphisms from (F A, Fα) to (C, ϕ) and GF-coalgebra-to-algebra morphisms from (A, α) to (GC, Gϕ).
If (A, α) is a recursive GF-coalgebra, then (F A, Fα) is a recursive
FG-coalgebra.
Proof. (a) For a GF -coalgebra-to-algebra morphism f from (A, α) to (GC, Gϕ), set f ٨ = ϕ ◦ Ff : FA → C. For an FG-coalgebra-to-algebra morphism g from (F A, Fα) to (C, ϕ), set g† = Gg ◦ α : A → GC. Now f ٨ is an FG-coalgebra morphism from (F A, Fα) to (C, ϕ) since f ٨ = ϕ ◦ Ff = ϕ ◦ F (G(ϕ ◦ Ff ) ◦ α)= ϕ ◦ F (Gf ٨ ◦ α) and similarly g† is a GF -coalgebra mor- phism from (A, α) to (GC, Gϕ). Further, (f ٨)† = Gf ٨ ◦ α = G(ϕ ◦ Ff ) ◦ α = f and similarly (g†)٨ = g.
(b) If (C, ϕ) is a FG-coalgebra, then the unique GF -coalgebra-to-algebra morphism from (A, α) to (GC, Gϕ) is also a unique FG-coalgebra-to-algebra morphism from (F A, Fα) to (C, ϕ).	 
The following proposition builds on Props. 3.9, 3.10.
Proposition 3.11 Let F : C → C, G : D → D be functors, L : C → D a
functor with a right adjoint, and τ : LF →. GL a natural transformation. If
(A, α) is a recursive F-coalgebra, then (LA, τA◦Lα) is a recursive G-coalgebra.
Proof. Let R be the right adjoint of L and η : Id →.  RL and ε : LR →.  Id
the unit resp. counit of the adjunction. Let λ(·) denote the natural bijection between the homsets C(L−, =) and C(−, R=). Now, let β = λ(τA ◦ Lα) = R(τA ◦ Lα) ◦ ηA = RτA ◦ ηFA ◦ α : A → RGLA.
According to Prop. 3.9, the RGL-coalgebra (A, β) is recursive. But then by Prop. 3.10, the LRG-coalgebra (LA, Lβ) is recursive. By Prop. 3.9 once more, the G-coalgebra (LA, εGLA ◦Lβ) is recursive. But εGLA ◦Lβ = λ−1(β)= λ−1(λ(τA ◦ Lα)) = τA ◦ Lα.	 
We conclude this section by briefly looking at two useful strengthenings of the notion of recursiveness, which we call strong recursiveness and (for the time


being, for the lack of a better name) very recursiveness. Strong recursiveness relates to recursiveness for coalgebras as allowing strong iteration (iteration with parameters) relates to allowing iteration (i.e., initiality) for algebras.
Definition 3.12 (strongly recursive coalgebra) Let C be cartesian and F : C → C a functor with a strength σ. An F-coalgebra (A, ϕ) is strongly re- cursive (or recursive with parameters) iff, for any object Γ of C and F-algebra (C, ϕ), there is a unique morphism f : Γ × A → C, denoted sfixF,Γ,α(ϕ), satisfying

F (Γ × A) ¸σΓ,,A
id
Γ × FA	Γ × A

Ff	f
J	ϕ	 J 
FC	C
It is immediate that an F -coalgebra (A, α) is strongly recursive iff, for any object Γ, the F -coalgebra (Γ × A, σΓ,A ◦ (idΓ × α)) is recursive.
A strongly recursive F -coalgebra (A, α) is also a recursive F -coalgebra: for an F -algebra (C, ϕ), fixF,α(ϕ) = sfixF,1,α(ϕ) ◦⟨ !A, idA ⟩. For the converse to hold, it is sufficient that C is cartesian closed: if (A, α) is a recursive F - coalgebra, then, for any object Γ, by Prop. 3.11 for D = C, G = F , L = KΓ×Id, τ = σΓ, the F -coalgebra (Γ × A, σΓ,A ◦ (idΓ × α)) is recursive.
An object A is the carrier of a final strongly recursive F -coalgebra iff it is the carrier of a strongly initial F -algebra.
Very recursiveness is roughly in the same position wrt. recursiveness for coalgebras as allowing primitive recursion is wrt. initiality for algebras. The new work of Adamek, Milius and Velebil [19,3] on the free completely iterative (resp. iterative) monad of a functor (elaborating on their original approach in [1,2]) is centered around the dual concept (resp. a finitary version of it).
Definition 3.13 (very recursive coalgebra) Let C be cartesian and F : C → C a functor. An F-coalgebra (A, α) is very recursive iff, for any (KA×F )- algebra (C, ϕ), there is a unique morphism f : A → C, denoted vfixA,α(ϕ), satisfying
⟨¸idA,,α ⟩
A × FA	A
idA×Ff	f
J  ϕ  J 
A × FC	C
An F -coalgebra (A, α) is very recursive iff the (KA × F )-coalgebra (A, ⟨ idA,α ⟩) is recursive. A very recursive F -coalgebra (A, α) is necessar- ily recursive: for an F -algebra (C, ϕ), fixF,α(ϕ)= vfixF,α(ϕ ◦ sndA,F C). But not

every recursive coalgebra is very recursive.
The concept of very recursive coalgebras and its dual are elegant and useful because of the following fact whose dual is central in [19].
Proposition 3.14 For any object X, an object DX is the carrier of a cofree very recursive F-coalgebra over X iff DX is the carrier of an initial (KX ×F )- algebra.
With ‘very recursive’ replaced with ‘recursive’, this equivalence is valid in the degenerate case X = 1 (an object A carries a final recursive F -coalgebra iff it carries an initial F -algebra), but not generally.


Recursive coalgebras from comonads
We shall now proceed to more powerful sufficient conditions for a coalgebra being recursive. These are based on comonads, comonad-algebras and dis- tributive laws of a functor over a comonad. We recall the definitions.
Definition 4.1 (comonad) A comonad on a category C is a functor D : C → 
C together with natural transformations ε : D →. Id (counit) and δ : D →. D2
(comultiplication) satisfying, for any object X,


DX¸
δX D 2X
DX   δX  D 2X

¸¸¸¸¸¸
δX	¸¸
J DεX ¸

εDX
J 


δX
J DδX


δDX
J 

D2X
 D X
D2X
 D 3X


Definition 4.2 (coalgebra of a comonad) A coalgebra of a comonad (D, ε, δ) on C is a coalgebra (A, ı) of the functor D satisfying


A ¸ ı  D A
¸¸¸¸
A 	ı	 D A

¸	εA
J 
ı	δA
J  Dı	J 

A	DA
 D 2A


Definition 4.3 (distributive law over a comonad) A distributive law of a functor F : C → C over a comonad (D, ε, δ) on C is a natural transformation



κ : FD →.
DF satisfying, for any object X,

FDX  κX  D FX	FDX 	κX	 D FX

F εX
J	
εFX 
J 
F δX

J  κDX  


 DκX 

δFX 
J 

FX	FX 
FD2X
DFDX
 D 2FX 

We present three theorems, each saying that a coalgebra constructed in a certain fashion from a coalgebra known to be recursive is recursive as well. We begin by the main theorem, which uses a general comonad.
Theorem 4.4 Let F : C → C be a functor, (A, α) a recursive F-coalgebra, D = (D, ε, δ) a comonad on C and (A, ı) a D-coalgebra. If κ is a distributive law of F over D satisfying


FA ¸,	α	 A
(∗)

Fı	ı
J  κA	¸D,α 	J 
FDA	DFA	DA
then (A, Fı ◦ α) is a recursive FD-coalgebra (and, consequently, by Prop. 3.9,
(A, Dα ◦ ı) is a recursive DF-coalgebra).
It might make sense to define that the data (A, α, ı) form, say, a dicoalgebra of (F, D, κ) iff they meet the condition (*) and to then develop a theory of functor-comonad-dicoalgebras (cf. the functor-functor-bialgebras of Turi and Plotkin [26] or the monad-functor-bialgebras of [4,7]), but we have chosen not to specifically pursue this line here, as we will not need many properties of dicoalgebras.
Proof. Consider any FD-algebra (C, ϕ). Let ψ = Dϕ ◦ κDC ◦ F δC : FDC → DC, g = fixF,α(ψ): A → DC and f = εC ◦ g : A → C. We show that (i) f is a FD-coalgebra-to-algebra morphism from (A, Fı ◦ α) to (C, ϕ) and (ii) it is the only one, i.e., fixFD,F ı◦α(ϕ)= f .
Proof of (i): We first notice that Dg ◦ ı = fixF,α(Dψ ◦ κDC)= δC ◦ g. This is witnessed by the commutation of the outer squares in the following diagrams.
FA ¸,	α	 A

Fı 
J  κA 
ı
¸D,α		J 

FDA
FDg
DFA	DA
DF g	Dg

J  κDC   J   Dψ  	J 

FD2C
DFDC
 D 2C


FA ¸,	α	 A
Fg	ψ	g
J 	  2				z  J 

FDC
F δC
FD C	κDC
DFDC Dϕ	DC

F δDC
J 

F δC
3
... ¸ ¸¸¸¸ κ
δFDC	δC

FDδC..
J ...
¸¸D¸2C
¸¸z 

J	J 

2	 κDC  
 DF δC 
2	DκDC  2
D2ϕ   2

FD C
DFDC 	
DFD C
Dψ
D FDC	  ˛D¸C

Now the desired equality f = ϕ◦F (Df ◦ı)◦α is witnessed by the commutation of the outer square in the diagram
FDA ¸F,ı	 FA ¸,	α	 A

FDg	Fg	ψ
J	J 
g
z J 

FDf FD2C ¸,  FDC 	 F D2C κ	 D FDC	 D C	f
DC	Dϕ

F δC
FDεC
zJz 
F δC

F εDC
J 

εFDC
J 

εC
ϕ	 J 

FDC  FDC  FDC  FDC	C

Proof of (ii): Suppose f ' is a FD-coalgebra-to-algebra morphism from (A, Fı ◦ α) to (C, ϕ). We observe that the commuting outer square in the following diagram proves that g = fixF,α(ψ)= Df ' ◦ ı.
FA¸¸,	α	 A
¸¸¸¸F¸ ı 

¸¸¸¸z 
Fı	FDA
  κA   D FA
ı
¸D,α 	J 

FDı
J  F δA	J  κDA
DF ı
J 

FDA	 F D2A
FDf'	FD2f'
 D FDA
DF Df'
Df'

J  F δC
J  κDC	J  Dϕ	J 

FDC
 F D2C	 D FDC 	˛ D C
ψ

It follows that f ' = f ' ◦ εA ◦ ı = εC ◦ Df ' ◦ ı = εC ◦ g = f .	 
Theorem 4.4 provides a powerful generalization of the central theorem in [27], which was on structured recursion schemes for initial algebras derivable from comonads (cf. also the dual result stated in [4,7]; we note that in [28], the substitution and solution theorems of [20,1] were proved from this result). Indeed, the theorem of [27] is just a special case of Theorem 4.4 now.


Corollary 4.5 Let F : C → C be a functor with an initial algebra and D = (D, ε, δ) a comonad on C. If κ is a distributive law of F over D, then (µF, F ItF ( DinF ◦ κµF ) ◦ in−1) is a recursive FD-coalgebra.
Proof. It is easy to check that (µF, ItF ( DinF ◦ κµF )) is a D-coalgebra. It is also immediate that it relates appropriately to the recursive F -coalgebra
(µF, in−1) via κ. Hence, by Theorem 4.4, (µF, F ItF ( DinF ◦ κµF ) ◦ in−1) is a
F	F
recursive FD-coalgebra.	 
We learn that the result in [27] was provable not so much because of the
initiality of the initial F -algebra (µF, inF ) as it was because of the recursiveness of its inverse F -coalgebra (µF, in−1): the coalgebra (µF, in−1) can be replaced
F	F
by a recursive coalgebra (A, α) to obtain a more general statement whereas
one cannot replace (µF, inF ) with some other algebra.
A useful class of comonads are comonads cofree over a functor. For a func- tor H which has a cofree comonad, let us agree to write DH = (DH, εH, δH) for this comonad and σH for the extraction of H from DH. We recall the well known fact that DH sends an object X to the carrier of a cofree H-coalgebra over X. We write θH for the structure map of this coalgebra. For the unique coalgebra morphism from an H-coalgebra (C, ϕ) to (DHX, θH) that sends a
morphism χ : C → X to εH : DHX → X, we write genH(χ, ϕ). For any
object X, σH = HεH ◦ θH : DHX → HX. For any H-coalgebra (C, ϕ), object
X	X	X
X and morphism χ : C → X, σH ◦ genH(χ, ϕ)= Hχ ◦ ϕ : C → HX.
X	X
For cofree comonads, by specializing Theorem 4.4, we obtain our second theorem.
Theorem 4.6 Let F : C → C be a functor, (A, α) a recursive F-coalgebra,
H : C → C a functor with a cofree comonad and (A, j) a H-coalgebra. If
λ : FDH →.  HF is a natural transformation satisfying
FA ¸,	α	 A
F j¯	j
J  λA  H FA ¸H,α 	J 
FDHA	HA
where j¯ = genH(idA, j), then (A, F j¯◦ α) is a recursive FDH-coalgebra (and, consequently, (A, Hα ◦ j) is a recursive HF-coalgebra).


Proof. Define a natural transformation λ¯
: FDH  →.
DHF  by
λ¯X =

genH (FεH, λDH X ◦ FδH). It is easy to verify (these are standard lifting
FX	X	X
results) that (A, j¯) is a DH-coalgebra and λ¯ a distributive law of F over DH.

The commutation of the outer triangles and squares in the following diagrams
gives us that DHα ◦ j¯ = genH (α, j)= λ¯A ◦ F j¯◦ α.

FA 

sssssssss
ssssssss	j¯

j	 H A
Hj¯

ssss εH
J   θH	J 

A ¸,A
DHA 	A  H DHA

α
J  εH 
DH α
J  θH
HDH α
J 

FA ¸,FA DHFA   FA  H DHFA 
A 	j	 H A

α
J   F j¯    H
Hα
  λA	  J 

FA 
     
F j¯
FD A
FDH j¯
HFA
HF j¯

H	J 
FδH
J  λ H	J 

FA ¸F,εA FDHA 	A  F (DH)2A  D A H FDHA

λ¯A
εH	J	θH
Hλ¯A
J 

FA ¸,FA DHFA 	FA	 H DHFA 

Therefore, by Theorem 4.4 (taking D = DH, ı =
j¯, κ =
λ¯), we get that

(A, F j¯◦ α) is a recursive FDH-coalgebra.	 
Our third theorem, where the cofree comonad does not appear manifestly, but is nonetheless present in the background, is a consequence from Theo- rem 4.6.
Theorem 4.7 Let F : C → C be a functor, (A, α) a recursive F-coalgebra,
H : C → C a functor with a cofree comonad and (A, j) a H-coalgebra. If
λ' : FH →. HF is a natural transformation satisfying
FA ¸,	α	 A
Fj	j
J  λ'	J 
FHA	A H FA ¸H,α HA


then (A, Fj ◦ α) is a recursive FH-coalgebra.
Proof. Define a natural transformation λ : FDH →.


HF by λX


= λ'


FσH.

We get that λA ◦ F j¯ = λ' ◦ F (σH ◦ genH(idA, j)) = λ' ◦ F (HidA ◦ j)= λ'
Fj.

A	A	A	A	A
Hence, by Theorem 4.6, (A, F j¯◦ α) is a recursive FDH-coalgebra.
Now consider an arbitrary FH-algebra (C, ϕ).	Let ψ  = ϕ ◦ FσH  :
FDHC → C. The following diagram witnesses that a morphism f : A → C


is a FH-coalgebra-to-algebra morphism from (A, Fj ◦ α) to (C, ϕ) iff it is a 
FDH-coalgebra-to-algebra morphism from (A, F j¯◦ α) to (C, ψ).

F j¯
   
H	 F HA ¸,  FA ¸,  A

FD 
FDH f
A FσH
Fj 
FHf	f

J  FσH	J	ϕ	J 
FDHC         C     F HC  	 _C  
ψ
Hence (A, Fj ◦ α) is a recursive FH-coalgebra, with fixF H,F j◦α(ϕ)	=
fixFDH ,F j¯◦α(ψ).	 

Prop. 3.8 is now immediate provided that there is a cofree comonad for the functor Id × F : Given a recursive F -coalgebra (A, α), the recursiveness of the F (Id × F )-coalgebra (A, F ⟨ idA,α ⟩◦ α) is the conclusion of Theorem 4.7 for
H = Id × F , j = ⟨ idA,α ⟩ and λ' = ⟨ F fstX,F X,F sndX,F X ⟩ : F (X × FX) →
FX × F 2X.

Conclusions and future work
We have motivated the relevance of recursive functor-coalgebras for program- ming: the recursiveness of the coalgebra appearing in a structured general- recursion equation is a sufficient condition for its solvability. Since there is no practical general method for checking whether a given coalgebra is recursive, one should strive for useful sufficient conditions. We have shown how to use comonads, comonad-coalgebras and distributive laws to construct new recur- sive coalgebras from coalgebras already known to be recursive. These results provide a significant generalization (and modularization of the proofs) of the results of [27] on structured recursion schemes for initial algebras. By duality, they also generalize the dual results of [4,7].
This paper reports only our first results on recursive coalgebras and most of our questions are unanswered yet. Apart from checking whether the the- orems of Section 4 can be strengthened in some useful ways, e.g. along the lines considered in [4] (modulo the duality) (replacing the assumption about the existence of a cofree comonad over H in Theorem 4.7 by some weaker con- dition), we would like to take a closer look at wellfounded induction. Taylor
[24] has shown that a functor-algebra is recursive iff it is wellfounded in the sense of his categorical notion, but only for Set (or an elementary topos) and for functors preserving monos and inverse image diagrams. We would like to


find out weaker useful conditions under which the implications in each direc- tion remain valid. Finally, we are interested in seeing if the results admit any useful type-theoretic versions. One might wish to be able to turn the struc- tured general recursion scheme of a recursive coalgebra into a reduction rule in a typed lambda calculus without giving rise to non-terminating reduction sequences of welltyped terms. The questions are when this is possible and how to accomplish it.

References
P. Aczel, J. Ad´amek, S. Milius, J. Velebil, Infinite trees and completely iterative theories: A coalgebraic view, Theoret. Comput. Sci. 300 (1–3) (2003) 1–45.
J. Ad´amek, S. Milius, J. Velebil, Free iterative theories: A coalgebraic view, Math. Struct. in Comput. Sci. 13 (2) (2003) 259–320.
J. Ada´mek, S. Milius, J. Velebil, From iterative algebras to iterative theories, in this volume.
F. Bartels, Generalised coinduction, Math. Struct. in Comput. Sci. 13 (2) (2003) 321–348.
A. Bove, V. Capretta, Nested general recursion and partiality in type theory, in: R. J. Boulton,
P. B. Jackson (Eds.), Proc. of 14th Int. Conf. on Theorem Proving in Higher Order Logics, TPHOLs 2001 (Edinburgh, Sept. 2001), Vol. 2152 of Lecture Notes in Comput. Sci., Springer- Verlag, 2001, pp. 121–135.
A. Bove, V. Capretta, Modelling general recursion in type theory, submitted to Math. Struct. in Comput. Sci. (Feb. 2003).
D. Cancila, F. Honsell, M. Lenisa, Generalized coiteration schemata, in: H. P. Gumm (Ed.), Proc. of 6th Wksh. on Coalgebraic Methods in Computer Science, CMCS’03 (Warsaw, Apr. 2003), Vol. 82(1) of Electron. Notes in Theoret. Comput. Sci., Elsevier, 2003.
H. Doornbos, R. Backhouse, Mathematics of recursive program construction, draft manuscript (Jul. 2001).
A. Eppendahl, Coalgebra-to-algebra morphisms, in: M. Hofmann, G. Rosolini, D. Pavlovi´c (Eds.), Proc. of 8th Int. Conf. on Category Theory and Computer Science, CTCS’99 (Edinburgh, Sept. 1999), Vol. 29 of Electron. Notes in Theoret. Comput. Sci., Elsevier, 1999.
A. Eppendahl, Fixed point objects corresponding to Freyd algebras, manuscript (May 2000).
M. Escard´o, A. K. Simpson, A universal characterization of the closed euclidean interval, in: Proc. of 16th Ann. IEEE Symp. on Logic in Computer Science, LICS’01 (Boston, June 2001), IEEE CS Press, 2001, pp. 115–128.
P. J. Freyd, Algebraically complete categories, in: A. Carboni, M. C. Pedicchio, G. Rosolini (Eds.), Proc. of Int. Conf. on Category Theory ’90, CT’90 (Como, July 1990), Vol. 1488 of Lecture Notes in Math., Springer-Verlag, 1991, pp. 95–104.
P. J. Freyd, Recursive types reduced to inductive types, in: Proc. of 5th IEEE Ann. Symp. on Logic in Computer Science, LICS’90 (Philadelphia, PA, June 1990), IEEE CS Press, 1990, pp. 498–507.
P. J. Freyd, Remarks on algebraically compact categories, in: M. P. Fourman, P. T. Johnstone,
A. M. Pitts (Eds.), Applications of Categories in Computer Science, Vol. 177 of LMS Lecture Note Series, Cambridge Univ. Press, 1992, pp. 95–106.


E. Gim´enez, Codifying guarded definitions with recursion schemes, in: P. Dybjer, B. Nordstr¨om (Eds.), Selected Papers from 2nd Int. Wksh. on Types for Proofs and Programs, TYPES’94 (B˚astad, June 1994), Vol. 996 of Lecture Notes in Comput. Sci., Springer-Verlag, 1995, pp. 39–59.
E. Gim´enez, Structural recursive definitions in type theory, in: K. G. Larsen, S. Skyum,
G. Winskel (Eds.), Proc. of 25th Int. Coll. on Automata, Languages and Programming, ICALP’98 (Aalborg, July 1998), Vol. 1443 of Lecture Notes in Comput. Sci., Springer-Verlag, Berlin, 1998, pp. 397–408.
C. McBride, J. McKinna, The view from the left, J. of Funct. Prog. 14 (1) (2004) 69–111.
E. Meijer, M. Fokkinga, R. Paterson, Functional programming with bananas, lenses, envelopes and barbed wire, in: J. Hughes (Ed.), Proc. of 5th ACM Conf. on Functional Programming Languages and Computer Architecture, FPCA’91 (Cambridge, MA, Aug. 1991), Vol. 523 of Lecture Notes in Comput. Sci., Springer-Verlag, 1991, pp. 124–144.
S. Milius, Working with the CIA—completely iterative monads revisited, manuscript (Nov. 2003).
L. S. Moss, Parametric corecursion, Theoret. Comput. Sci. 260 (1–2) (2001) 139–163.
E. Nelson, Iterative algebras, Theoret. Comput. Sci. 25 (1983) 67–94.
G. Osius, Categorical set theory: A characterisation of the category of sets, J. of Pure and Appl. Algebra 4 (1974) 79–119.
P. Taylor, Intuitionistic sets and ordinals, J. of Symb. Logic 61 (3) (1996) 705–744.
P. Taylor, Towards a unified treatment of induction, I: The general recursion theorem, unfinished draft manuscript (Aug. 1996).
P. Taylor, Practical Foundations of Mathematics, Cambridge Studies in Advanced Mathematics, Cambridge Univ. Press, 1999.
D. Turi, G. D. Plotkin, Towards a mathematical operational semantics, in: Proc. of 12th Ann. IEEE Symp. on Logic in Computer Science, LICS’97 (Warsaw, June/July 1997), IEEE CS Press, 1997, pp. 280–291.
T. Uustalu, V. Vene, A. Pardo, Recursion schemes from comonads, Nordic J. of Computing 8 (3) (2001) 366–390.
T. Uustalu, V. Vene, The dual of substitution is redecoration, in: K. Hammond, S. Curtis (Eds.), Trends in Functional Programming 3, Intellect, 2002, pp. 99–110.
