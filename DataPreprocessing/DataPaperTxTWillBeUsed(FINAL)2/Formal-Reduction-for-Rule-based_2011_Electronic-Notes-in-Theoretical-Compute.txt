Available online at www.sciencedirect.com



Electronic Notes in Theoretical Computer Science 276 (2011) 29–59
www.elsevier.com/locate/entcs
Formal Reduction for Rule-based Models
Ferdinanda Camporesi1,2
Dipartimento di Scienze dell’Informazione Universit`a di Bologna
Bologna, Italy &
Laboratoire d’informatique de l’E´cole normale sup´erieure
(INRIA/E´NS/CNRS)
Paris, France

J´erˆome Feret 1,3
Laboratoire d’informatique de l’E´cole normale sup´erieure (INRIA/E´NS/CNRS)
Paris, France


Abstract
Molecular biological models usually suffer from a large combinatorial explosion. Indeed, proteins form complexes and modify each others, which leads to the formation of a huge number of distinct chemical species (i.e. non-isomorphic connected components of proteins). Thus we cannot generate explicitly the quantitative semantics of these models, and even less compute their properties.
In this paper we propose a formal framework to automatically reduce the combinatorial complexity of the differential semantics of rule-based models. Our reduction is based on two abstractions, which are combined thanks to a generic product. The first abstraction tracks the flow of information between the different regions of chemical species, so as to detect and abstract away some useless correlations between the state of sites. The second abstraction detects pairs of sites having the same capabilities of interaction, and abstracts away any distinction between them. The initial semantics and the reduce one are formally related by Abstract Interpretation.
Keywords: rules-based modeling, model reduction, abstract interpretation, flow of information.


Introduction
Modelers of molecular signaling networks must cope with the combinatorial explo- sion of protein states generated by post-translational modifications and complex

1 The contribution of Ferdinanda Camporesi and J´erˆome Feret was partially supported by the AbstractCell ANR-Chair of Excellence.
2 Email: campores@di.ens.fr
3 Email: feret@di.ens.fr

1571-0661 © 2011 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2011.09.014

formations. Rule-based models provide a powerful alternative to approaches that require an explicit enumeration of all possible chemical species of a system [6,1]. Such models consist of formal rules stipulating the (partial) contexts for specific protein-protein interactions to occur. The behavior of the models can be formally described by stochastic or differential semantics. Yet, the naive computation of these semantics does not scale to large systems, because it does not exploit the lower resolution at which rules specify interactions.
We present a formal framework for constructing coarse-grained differential se- mantics. We instantiate this framework with two abstract domains. The first one tracks information flow between the different regions of chemical species, so as to detect and abstract away some useless correlations between the state of sites. The second one detects pairs of sites having the same capabilities of interaction and abstracts away any distinction between them.
The result of our abstraction is a set of chemical patterns, called fragments, and a system which describes exactly the concentration evolution of these fragments. The method never requires the execution of the concrete rule-based model and the soundness of the approach is described and proved by abstract interpretation [4].



Related work.
In [3] is proposed a framework where the information flow between the sites of chemical species is used so as to build reduced models. With this approach there is no formal definition for the semantics or for the flow of information. Moreover, reduced models have to be written by hand.
In [7], a framework is proposed to automatically derive reduced models from sets of rules. The semantics of reduced models are formally related to the semantics of the unreduced ones. The framework that we present here is an extension of this framework. Unlike in [7], our fragments are heterogeneous. The cutting of a protein into portions may depend on its position within the chemical species. This matches more closely with the flow of information. Indeed, within a chemical species, the behavior of a protein may be driven by the state of a site without being driven by the state of the same site in other instances of the protein. Our new analysis exploits this efficiently. In [10], another family of fragments are defined, with an even higher level of context-sensitivity. The set of fragments is computed iteratively by building overlaps between connected components in rules and already built frag- ments. It is not clear whether this approach scales to large models, or not. In our approach, we have taken an appropriate trade-off of context-sensitivity: we first compute very fastly an over-approximation of the flow of information, from which we deduce an efficient symbolic description of the set of fragments. In [14], a lan- guage independent approach is described. Yet it requires an extensional description of rules as sets of reactions, and fragments as multi-set of species, which makes the approach impractical for large systems. Lastly, in [9,8], fragments are use to reduce the dimension of the stochastic semantics of rule-based models.

Outline.
In the Section 2, we describe some case study to illustrate our approach. In the Section 3, we provide a generic framework to define differential semantics, reduce these semantics, and combine these reductions. In the Section 4, we introduce the language Kappa and its differential semantics. In the Section 5, we show how to detect pairs of sites having the same capabilities of interaction and we use this information to design a model reduction. In the Section 6, we introduce an analysis of the flow of information between the different regions of chemical species, and deduce which correlations can be abstract away. Then, we use this information to cut chemical species into self-consistent fragments.
Case study
Let us start out with some motivating examples.
Symmetric sites
This first example illustrates that we can detect when some sites have the same capabilities of interaction, and use this to abstract away any distinction between these sites.
We consider four kinds of chemical species: P, P, P , and P . These are four instantiations of a given protein P which bears two activation sites. Each site can be activated (which is denoted by the symbol ‘’ on the left or on the right according to which site is activated), or not. Initially, all proteins have no activated site. The evolution of the state of the proteins is described thanks to some chemical reactions. There is no order in the activation of the sites. A first site (either the left or the right one) can be activated at rate k1 thanks to the reactions in the Figure 1(a) (the rates specify the speed of the reactions). Then the other site can be activated at rate k2 thanks to the reactions in the Figure 1(b). Once both sites are activated the protein can be destroyed at rate k3 by the reaction in the Figure 1(c).
The differential semantics of this model is the solution of the system of ordinary differential equations (ODEs) which is given in the Figure 1(d). This system is obtained by applying Mass Action Law. It describes the continuous evolution of the concentration of each chemical species along the time. Intuitively, Mass Action Law states that the amount of time a reaction is applied within a small amount of time is obtained by multiplying the rate constant of the reaction by the product of the concentration of the reactants (which are the chemical species which occur in the left hand side of the reaction).
We notice that, in a protein, both sites have the same capabilities of interaction. Thus we propose to ignore any distinction between these two sites. Indeed, what is important is not which sites are activated in a given protein, but how many sites are activated. Doing this, we get the system of equations in the Figure 1(e). This system can be derived analytically from the system given in the Figure 1(d). We observe a reduction of the dimension of the state space. In a more general setting, if the protein had n such sites, there would be 2n chemical species, but only n  1



P   P	k
P  P	k
 P   P	k
P    P	k
 P  	k
Destruction.

First activation.	(b) Second activation.


 P  2k1P
  P   k1P k2 P
P    k1P k2P 
  P   k2 P P   k3 P 
Initial differential system.
P  2k1P
  P  P    k1P k2 P P 
  P   k2 P P   k3 P 
Reduced differential system.

Fig. 1. Chemical reactions and ODEs for the protein with two symmetric sites.

variables in the reduced system.
We have seen through this example how the fact that several sites may have the same capabilities of interaction allows the inference of a changement of variables which reduces the model.

Hierarchic flow of information
Now we consider an example where a changement of variables can be deduced from an over-approximation of the flow of information among sites.
We consider a protein having three activation sites r, c, l, each of which can be activated ‘p’, or deactivated ‘u’. Thus a chemical species is denoted as a triple of symbols among ‘u’ and ‘p’, the first component denotes the state of the site l, the second one the state of the site c, and the third one the state of the site
r. Initially, all proteins have no activated site. The evolution of the state of the proteins is described thanks to some chemical reactions. There is some hierarchic control between the states of the sites. The site c has to be activated first, at rate k1, thanks to the reaction in the Figure 2(a). Once the site c has been activated, the l site can get activated at rate k2, no matter the state of the site r is (see the Figure 2(b)); and the site r can get activated at rate k3, no matter the state of the site l is (see the Figure 2(c)). We describe the flow of information among the states of the sites ofa protein in the Figure 2(d). Intuitively, the flow of information summarizes the fact that the state of the site c may control the behavior of the states of the sites l and r, but that the states of the sites l and r do not control the behavior of the states of the other sites.
The differential semantics of this model is the solution of the system of ODEs which is given in the Figure 2(e), where the concentration of the protein in the state x1, x2, x3 is denoted by x1, x2, x3. Since the state of the site l does not control the evolution of the state of the site r, and conversely, we can abstract away the correlation between the states of the sites l and r. To do this, we cut the chemical species into fragments, each fragment documenting either the sites l and c, or the sites c and r. Such a fragmentation defines a linear changement of variables.



u,u,u  u,p,u k1
2nd site activation.
u,p,u  p,p,u k2
u,p,p  p,p,p k2
1st site activation.
u,p,u  u,p,p k3
p,p,u  p,p,p k3
3rd site activation.


 u, u, u  k1u, u, u
u, p, u  k2u, p, u k1u, u, u k3u, p, u
 u, p, p   k2u, p, p k3u, p, u
 p, p, u  k2u, p, u k3p, p, u
 p, p, p  k2u, p, p k3p, p, u
Initial differential system.




Flow of information.
 u, u, u  k1u, u, u
u, p, u u, p, p  k1u, u, u k2u, p, u u, p, p
 p, p, u p, p, p  k2u, p, u u, p, p
 u, p, u p, p, u  k1u, u, u k3u, p, u p, p, u
 u, p, p p, p, p  k3u, p, u p, p, u

Reduced differential system.
Fig. 2. Chemical reactions, flow of information, and ODEs for the protein with hierarchic flow of information

Indeed we can define the concentration of a fragment, as the linear combination of the concentration of the chemical species in which this fragment occurs. For instance, the concentration of the fragment which documents the sites l and c, and where both these sites are activated is equal to the sum of the concentrations of the chemical species p,p,u and p,p,p. Applying this changement of variables, we get the reduced system which is given in the Figure 2(f). We notice that the number of variables in the two systems are the same, because of the simplicity of the example. In practice, abstracting away a correlation reduces a lot the number of variables.
We have seen in this example, that an over-approximation of the flow of in- formation between the sites of chemical species, can be used to identify useless correlations, which can be used to discover appropriate changement of variables.

Dimers
Our third example illustrates the weakness of our previous approach [7,5] to reduce models where the states of some sites flow across binding between proteins.
We consider a kind of receptors, which when activated, can form dimers and initiate other cascades of interactions. More precisely, we consider a protein having four interaction sites a, b, c, d. The sites a, c, and d can be activated (‘p’) or not (‘u’), while the site b is a binding site: the sites b of two receptors can be bound together. We call a dimer the gathering of two receptors. With these constraints, we can form exactly 38 chemical species (either single receptors, or dimers, in various configurations according to the states of the sites a, c, and d). Thus, describing



Fig. 3. Flow of information within the sites of a dimer.
explicitly the reactions of the system would be cumbersome. So we describe these reactions only implicitly: the site a of any receptor can get activated at rate k1; two receptors having their site a activated can bind to each other at rate k2; then, when both sites a of a dimer are still activated, the site c can be activated at rate k3 and the site d at rate k4; lastly, all these reactions are reversible: any activated site can become deactivated at rate k5 for the site a, k7 for the site c, and k8 for the site d, and dimers may break their binding at rate k6.
We notice that the behavior of the site c (resp. d) does depend neither on the state of the site d (resp. c) of the same receptor, nor on the state of the site c and d of the potential partner in case of dimer. But, in a dimer, the state of the site a of a receptor controls the evolution of the sites c and d of the other receptor. We say, that there is a flow of information across bindings. An over-approximation of the flow of information between the sites of dimers is given in the Figure 2.3. We can use the framework in [7,5], to cut down the combinatorial complexity of this example. Indeed, in this framework, we use a set of fragments, the evolution of the concentration of which can be defined in a self-consistent way. These fragments are homogeneous, because the way proteins are cut into portions of proteins is defined once for all: in our case, each portion of protein will document either the states of the sites a, b, and c; or the states of the sites a, b, and d. As a consequence, the fragments of dimer will all document 6 sites. Thus the fact that the states of the sites c or d of a given receptor cannot control the behavior of the sites c and d in the other receptor of a dimer is not exploited, which is a severe limitation of the framework in [7,5]. In the framework that we are presenting in this paper, the way proteins are cut is not the same for all the proteins of a chemical species. We are using heterogeneous fragments: in the fragments of dimer, one receptor is privileged and documents three sites (a, b, and either c and d), while the other documents only the sites a and b. This cutting of chemical species into fragments matches more closely with the flow of information.
We have seen in this example that the framework that is proposed in [7,5], can be improved by using heterogeneous fragments, where the cut of proteins is not the same throughout a chemical species.
Model reduction of differential semantics
Notations
Let A be a set. We define a state over A as a mapping between A and R, such that we have ρA  0 for any element a  A. Let B be another set. We consider two

norms   A and   B respectively over A and B. Let φ be a mapping between
A  R and B  R. The mapping φ is called an abstraction between A  R and
B  R if and only the following properties are satisfied: (i) φ is a linear mapping between A  R and B  R; (ii) for any state ρ over A, the element φρ is a state over B; and (iii) for any sequence ρnnN of states such that the sequence
ρnAnN diverges, then the sequence φρnBnN diverges as well. In such a case, we write:
φ
A  R ( B  R.
We notice that whenever the sets A and B are both finite, then the property (iii) does not depend on the choice of the norms  A and  B.
Concrete semantics
We define an autonomous system as a pair V, F where V is a finite set of variables and F is a continuously differentiable function from V  R to V  R. By the Cauchy-Lipschitz theorem[11], for any state ρ0 over V, the system of equations:
ρt  Fρt
ρ0  ρ0
has a unique maximal differentiable solution: fρ0 : 0, Tρ0   V  R, with Tρ0  . An autonomous system V, F is said to be positive, if and only if, for any state ρ0 over V and any t  0, Tρ0 , fρ0 t is a state over V as well. The concrete semantics of the system V, F is the mapping JV, F) which associates the unique maximal differentiable solution fρ0 to each state ρ0 over V (in this context, ρ0 is called the initial state).
Exact reduction of differential semantics
A model reduction V, F, V, φ, F is a tuple such that the pair V, F is an au- tonomous system, V is a finite set of variables, φ is an abstraction function between V  R and V  R, and F a continuously differentiable function from V  R to V  R, and such that the following square commutes:
F



F
The trajectories in the semantics of the (abstract) autonomous system V, F
are the exact projections by φ of the trajectories in the semantics of the (concrete) autonomous system V, F, as stated by the following theorem which is proved in [5].

Theorem 3.1 Let ρ0 be an initial state over V. We introduce Tρ0

φρ0
such

that 0, Tρ  is the deﬁnition domain of JV, F)ρ0 and 0,T 
 is the deﬁnition

0
domain of JV, F)φρ0.
φρ0

Then, under these assumptions, Tρ0 φJV, F)ρ0t  JV, F)φρ0t.

φρ0
and, for any t  0, Tρ0 ,

If follows from the Theorem 3.1 that if the system V, F is positive, then the system V, F is positive as well.
Projections-based reductions
Now we investigate a specific class of model reductions: we focus on the case when an equivalence relation over the variables of the autonomous system can be lifted to a bisimulation, and use this to define a model reduction.
We consider a concrete autonomous system V, F. We consider r a function from V to V such that r is idempotent (i.e. r  r  r). The function r defines an equivalence relation r over V by v1 r v2 if and only if rv1  rv2. Moreover, for any variable v  V, the variable rv is called the representative of the equivalence class of v. We define two linear projections Pr and Zr over V  R as follows:



Prρ :
V  R
	
 V  R
Zrρ :  v  ρv	if rv  v

v   ρv   rv   v
 v  0	otherwise.

Intuitively, Pr gathers the values of each r-equivalent variable, and stores the result to the value of the representative of each r-equivalence class, while Zr ignores the values of the variables which are not the representative of their r-equivalence class.
Pr
We notice that V  R ( V  R and that the following diagram commutes:
Pr
We says that the relation r induces a bisimulation over the autonomous system
V, F if and only if for any pair ρ, ρ of states over V, if Prρ  Prρ, then PrFρ  PrFρ. Equivalently, the relation r induces a bisimulation, if and only if the following diagram commutes:
F

Pr


F
Theorem 3.2 Whenever r induces a bisimulation, then V, F, V, Pr, Pr  F  Zr is a model reduction.
Proof. The proof is given by the following commutative diagram:
F




Zr	F	Pr

Example 3.3 Let us consider the example of the Section 2.1. The set of variables V is defined as P,  P, P ,  P . We want to identify the proteins which have only one site activated, no matter which site it is. Thus, we define the mapping r by rP  P, r P  rP    P, and r P    P . By using a matrix notation, we get:


 2k1  0	0	0 
 2k1 0 0 0 
 1 0 0 0 
 1 0 0 0 

F   k1  k2 0	0  , F   2k1 k2 0 0  ,P 
 0 1 1 0 , and Z
 0 1 0 0 

  k1	0 k2  0 
0	0 0 0	r
 0 0 0 0 
r	 0 0 0 0 

0	k2  k2 k3 
0	k2 0 k3 
 0 0 0 1 
 0 0 0 1 


and we can check that F  Pr  F  Zr.

Combining a model reduction with projections-based reductions
An existing model reduction can be abstracted further thanks to a bisimulation induced by an equivalence relation over the concrete variables.
Theorem 3.4 Let V, F, V, φ, F be a model reduction, r be an idempotent map- ping r over V such that r induces a bisimulation over the autonomous system V, F, and r be an idempotent mapping over V. We assume that the following square:
Pr



commutes.
Pr

Under these assumptions, the tuple V, F, V, Pr  φ, Pr  F  Zr  is a model reduction.
Proof. The proof is given by the following commutative diagram:

F






Zr	F

Pr




Interestingly, we notice that no commutative diagram was required to relate the functions F and Pr . Thus, we only need to prove that r induces a bisimulation in the concrete. Then, to inherit this construction we need to prove that Pr φ  φPr. Such a proof is quite easy, since only the structure of the abstract variables matters, and not their dynamics.

a :: NLσ	(agent)
N :: A  A	(agent type)
l :: i  N  i  N	(agent identifier)
σ :: ε  s,σ	(interface)

s :: nλ
(site)

n :: x  S	(site name)
λ :: ϵ  NL@n  N @n    ?	(binding state)
ι :: ϵ  w  I	(internal state)
Fig. 4. Syntax for agents.
The Kappa language
Now, we instantiate the generic framework that we have proposed in the Section 3 with a particular language. We focus our study to the models that are written in Kappa [6]. In the present section, we present Kappa and its semantics.
Kappa is a graph-rewriting-based language. It has a graphical notation that eases the design of models. Nevertheless, we use here a process-algebra notation where agents are identified, which facilitates the presentation of the semantics and the various analyses.

Syntax
We fix a finite set of agent types A, a finite set of sites S, and a finite set I of non empty strings. We also consider two signature maps Σc and Σλ assigning a set of sites to each agent type such that for any agent type A  A. Intuitively, ΣcA is the set of sites which can bear a modifiable internal state w  I (such as a level of energy), whereas ΣλA is the set of sites which can be bound to some other sites. We also denote by Σ the signature map that associates to each agent type A  A the combined interface ΣcA ΣλA. The syntax of agents is given in the Figure 4.
An agent identiﬁer l belongs to the set N of natural numbers, or to a copy N of the set of natural numbers. Most agents will be identified by natural numbers. Identifiers in N will be used temporary when agents are created, before a proper identifier is allocated.
An interface σ is a sequence of sites with internal states (as subscript) and binding states (as superscript). The internal state of the site s may be written as sє, which means that either it does not have internal states (when s  ΣAΣcA), or it is not specified. A site that bears an internal state w  I is written sw (in such a case s  ΣcA). A site can be free, or bound (which is possible only when s  ΣλA). There are also several levels of information about binding states. We use a question mark ‘?’ if we do not know anything about the binding state; we

use the symbol ‘ϵ’, if we know that the site is free. There are also several levels of information about bound sites: we use a site address AL@x if we know the binding partner (this means that the site is bound to the site x of the agent A with identifier l); we use a binding type A@x if we only know that the partner is some site x of some agent A; lastly we use a wildcard bond ‘’ if we only know that a site is bound but have no further information about its partner. We generally omit the symbol ‘ϵ’ in examples.
An agent is given by a type A in A, an agent identifier l and an interface σ. Such an agent is denoted by ALσ. An expression E is a sequence of agents such that (i) no two agents have both the same type and the same identifier; (ii) no site name occurs more than once in a given interface; (iii) each site name s occurring in the interface of the agent A occurs in ΣA; (iv) each site name s which occurs in the interface of the agent A with an internal state distinct from ‘ϵ’ occurs in ΣcA;
(v) each site name which occurs in the interface of the agent A with a binding state distinct from ‘ϵ’ occurs in ΣλA. Furthermore, given an expression E and an agent type A  A, we denote by agentsE, A the set of identifiers l such that there is an agent A in the expression E with identifier l.
A pattern is an expression E such that whenever the binding state of the site x in the agent of type A with identifier l is A @x’ , then there exists an agent of type A  with the identifier l  such that this agent has the site x  in its interface and that the binding state of this site is AL@x (thus site addresses encode a pairing relation between some sites). A proper pattern is a pattern where each agent is identified with a proper identifier (in N). A mixture E is a proper pattern that is fully specified, that is to say that each agent of type A in a mixture E documents its full interface ΣA, sites can only be free or bear a site address, and any sites in ΣcA have a non empty internal state. A pattern E is said to be disconnected if there is a strict subsequence E of it that is a non-empty pattern. A pattern component is a connected pattern. A species is a non-empty connected mixture.
A rule is given by a pair of patterns El, Er and a rate k (which is a non

negative real number), that is written El  k
Er, with some additional constraints

explained below. The left hand side (lhs) El of a rule describes the agents taking part in it and various conditions on both their internal and binding states for the rule to apply. The right hand side (rhs) describes what the rule does.


Definition 4.1 In a rule El
k
Er, firstly agents in the lhs are identified with

natural numbers i  N and secondly the pattern Er is obtained from El in the following stepwise fashion (the order matters):
(i) creation: some agents Aiσ with an agent identifier in N, with their full interfaces ΣA, with all sites free and with all sites s  ΣcA having a non empty internal state are added;
(ii) unbinding : some occurrences of the wildcard ‘’ and some site addresses Ai@n
are removed;
(iii) deletion: some agents with only free sites are removed;
(iv) modiﬁcation: some (non empty) internal states are replaced with (non empty)



P1lu,r
k1 P1 l ,r
p  u
k
P1 l
p,r
 k2 P1 l
k2
p,rp


k3
P1 l p,r   ε

P1l
1
u,r P lu,rp
P1 l
u,r
p P1 l
p,rp
Destruction.

(a) First activation.	(b) Second activation.

Fig. 5. Encoding of the example of the Section 2.1 in Kappa. The signature is defined as: A  P ,
I  u, p, S  L, r, ΣλP   , ΣιP   L, r.


P1c
k1 P1 c
P1 l
u,c
 k2 P1 l
p,cp
P1 c ,r  k3 P1 c ,r 

2nd site activation.
1st site activation.
3rd site activation.


Fig. 6. Encoding of the example of the Section 2.2 in Kappa. The signature is defined as: A  P ,
I  u, p, S  L, c, r, ΣλP   , ΣιP   L, c, r.

internal states;
- (v) binding : some free sites are bound pair-wise by using appropriate site addresses.
Agent types and identifiers ensure a 1-1 mapping correspondence between the agents in the lhs and in the rhs that are neither removed, nor created. Moreover, this correspondence preserves the set of sites which are documented in interfaces, and the set of sites which carry a non empty internal state.
Note that according to the Definition 4.1, only the bonds that are denoted by a pair of site addresses, or a wildcard ‘’ can be released, unlike binding types which can only be tested.
Example 4.2 Let us encode in Kappa the three examples of the Section 2. The example with the two symmetric sites is written in the Figure 5. We notice that in this example, we do not take benefit of the context freeness of Kappa: indeed, there are as many Kappa rules as there are chemical reaction and the Kappa rules document exactly the same amount of information as the chemical reactions. The example with the hierarchic flow of information is given in the Figure 6. In this example, there are fewer rules than reactions and they do not document all the sites of the protein. For instance, in the Figure 6(b), we use the fact that the state of the third site does not control the activation of the first site, so as to gather the two reactions in the Figure 2(b) into a single one which does not document the state of the third site. The example of the dimer is given in the Figure 7. This last example illustrates well the fact that Kappa allows for a compact description of models. By using context-free rule, we have described a model which involves 38 chemical species. The rule in the Figure 7(a) stipulates that the site a of a receptor can get activated. Then two activated receptors may bind to each other thanks to the rule in the Figure 7(b). When the two receptors in a dimer are still activated, then one receptor in the dimer may activate the site c or d in the other receptor, as stated by the rules in the Figure 7(c). At any moment, activated sites can get deactivated and dimers may break their connexion as stated in the Figure 7(d).



R1a k1 R1 a 
R1 a ,b  , R2 a ,b k2
R1 ap,bA2@b  , R2 ap,bA1@b 

(a) Receptor activation.	(b) Dimerisation.
R1 a ,bA2@b,cu  , R2 a ,bA1@b k3 R1 a ,bA2@b,cp  , R2 a ,bA1@b 
R1 a ,bA2@b,du  , R2 a ,bA1@b k4 R1 a ,bA2@b,dp  , R2 a ,bA1@b 
(c) Cross-activation.


R1 a  k5 R1a 
R1bk6
R1b 

R1 c  k7 R1c 


Relaxation.
R1 d  k8 R1d 


Fig. 7. Encoding of the example of the Section 2.3. The signature is defined as: A  R, I  u, p,
S  a, b, c, d, ΣZR  b, ΣcR  a, c, d.




E, NLσ,s,s,σ, E  E, NLσ,s,s,σ, E E, a, a, E  E, a, a, E
Structural congruence.
λ  ϵ, N @n, , ?  φλ  λ

φNL@n  NφN,L@n φnλ  nφλ
φs, σ  φs, φσ

φNLσ  NφN,L φσ 
Agent substitution.



ιl  ι, ϵ  ι  ιl λ  λl  λλl NL@n  N @n
NL@n		
λ		?
ι  ιl  λ  λl		nλ  nλÆ
ιϵ  ι	ιwr  wr
λϵ  ϵ	λNL@n   NL@n
λNL@n   λ
λ  λ λ?  λ
nλnλr   nλλr 

c	cÆ
σ		ε
c	cr
σε  σ
ccr 

s  sl  σ  σl  s, σ  sl, σl
σ  σl  NLσ  NLσl
Agent matching.
s, σsr, σr  ssr, σσr NLσNLσr  NLσσr
Agent replacement.


Fig. 8. Structural congruence, substitution, matching and replacement. Definitions are made by induction over the syntax.

Operational semantics
Now we define the operational semantics of sets of rules.

First, we define the application of a rule El
k
Er to a proper pattern E.

Informally, one needs to embed El into E. For that purpose, we define a substitution as a partial mapping φ between pairs A, l  A  N  N of agent type/identifier and agent identifiers l   N  N. A substitution φ is clean when for any couple
A, l  A  N  domφ, φA, l  l. A substitution φ can be applied with a pattern E if, and only if, for any agent type A  A, we have A, l  domφ for
any agent identifier l  agentsE, A. Indeed applying a substitution φ consists in replacing the agent identifier l with the agent identifier φA, l, in the agent of type A and identifier l (if it exists). This is formalized, in the Figure 8(b), by defining the extension φ of φ to agents. Furthermore, a given substitution φ is into if, and only if, for any agent type A, and any two identifiers l,l , we have φA, l  φA, l   l  l . An into substitution φ is a candidate for identifying the agents of two patterns. More precisely, each agent ALÆ σl in the first pattern can be identified with the agent ALσ, if (i) agent identifiers are the same (ie l  φA, ll) and (ii) the signature σ contains more information than the signature φσl. The second property is formalized by a matching relation  which is given in the Figure
8(c). Yet, since interfaces are defined up to permutations of sites, one may have to reorder the sites before applying the matching relation, thanks to the congruence relation  which is defined in the Figure 8(a).
We can now properly define an embedding between two patterns. An embedding
φ between two patterns El and E is an into substitution such that: (i) domφ  
A, l  A  A, l  agentsEl, A, (ii) and for any A, l  domφ, there exists an agent a  such that a  a  and a  φa , where a is the unique agent in E of type A with identifier l and a the unique agent in E of type A with identifier φA, l. A clean embedding is a clean into substitution. Moreover, whenever there exist an embedding φ between E and E , and an embedding φ between E and E, we say that φ is an isomorphic embedding. We notice that any embedding between two species is an isomorphic embedding. Given a pattern E, we define the number of symmetries in E as the number of embeddings φ such as E and φE are - equivalent. We denote the number of symmetries of E as symE.

Now we define the impact of applying the rule El
k
Er along a given clean

embedding φ between the lhs El of the rule and a pattern E. For that purpose we consider three kinds of agents:
Agents AiÆ σl are said to be preserved if, and only if, ALÆ σl occurs in El and there exists an interface σr such that ALÆ σr occurs in Er;
Agents ALr σr are said to be created if, and only if, ALr σr occurs in Er, but there is no agent of type A with identifier lr in El;
Agents ALÆ σl are said to be removed if, and only if, ALÆ σl occurs in El, but there is no agent of type A with identifier ll in Er.
We extend the clean embedding φ so as to deal with newly created agents. Thus, we define the clean into substitution φ over domφAN by φ A, i  φA, i for any A, i  domφ and φ A, i  i otherwise (this way, φ preserves temporary identifiers). Then, for any agent ALÆ σl that is removed, the agent of type A with identifier φA, ll is removed in E; for any agent ar that is created, the agent φ ar is added in E; last for any preserved agent al, we denote by ar and a the agents in

Er and E which have the same type and the same identifier as the agent al, then we select an agent a (the choice does not matter) such that a  a and a  φa , then the agent a is replaced with agent a φar, where .. is a replacement function that is defined in the Figure 8(d). We denote by EErφ the so obtained expression (which is well defined up to -equivalence).
One shall notice that EErφ might be not a pattern, because there might be some pending bonds which are sites with a binding state of the form AL@x but, either the agent of type A and identifier l has been removed, or the site x of the agent of type A and identifier l has been made free. Thus, we remove pending bonds: we introduce the function clean between patterns such that cleanE is obtained by replacing with the symbol ϵ, each site address AL@x such that either there is no agent of type A and identifier l in E, or the site x of the agent of type A with identifier l is free.
In the case when the proper pattern E is a mixture, we expect the result of the application of a rule to be a mixture as well. Yet, we notice that cleanEErφ might be not a mixture because of temporary identifiers. We have to allocate fresh proper identifiers for the newly created agents: we introduce the function fresh between patterns, such that freshE is obtained by replacing any temporary agent identifier i of the agent A by M A i  1 where M A is the maximum element of the non empty finite set 0 N  agentsE, A.
Now we can define the operational semantics as a labeled transition system. The states of the system are mixtures (up to ). We shall notice that the impact of

applying a rule El k
Er on a mixture E is fully defined (up to ) by the clean

embedding φ between the lhs El of the rule and the mixture E. So we define the

set L of labels as the set of the tuples r, E, φ where r is a rule El k
state, φ is an embedding between El and E. In such a case, we write:
Er, E is a


r,E,φ
E   freshcleanEErφ.
Example 4.3 Let us consider the following example. We set A  A, I  ,
S  a, b, ΣλA  a, b, ΣcA  .  We consider the mixture E 
A1 aA2@b,bA3@a , A2 a ,bA1@a , A3 aA1@b,b and the rule A1a k A0a ,b . In- tuitively, this rule can be applied with an agent of type A, the site a of which is free (whatever the state of the site b is). Moreover, this rule removes the agent A1a , and replace it with a new agent A0a ,b  of type A with both site a and b free (in this rule, no agent is preserved).
There exists only one embedding between the lhs A1a  of the rule and the mixture E.  Namely, φ  A, 1  2 (neither the substitution A, 1  1, nor A, 1  3 is an embedding, since the site a is free neither in the agent A1 aA2@b,bA3@a , nor in the agent A3 aA1@b,b ). Moreover, the expression EElφ is equal to the expression A1 aA2@b,bA3@a  , A3 aA1@b,b , A0a ,b . This expres- sion has a pending bond (on the site a of agent A1), which is removed by the primitive clean. Indeed the expression cleanEErφ is equal to the expression A1 a ,bA3@a  , A3 aA1@b,b  , A0a ,b . Then the temporary identifier 0 is replaced

with 4 by the primitive fresh. As the result, the expression freshcleanEErφ
is equal to the expression A1 a ,bA3@a  , A3 aA1@b,b  , A4a ,b .

A rule can be more or less refined. There are basically two ways of refining a rule, either we add more information on the lhs of the rule (which is called a left refinement), and report it on the rhs, or we add more information on the rhs and report it to the lhs (which is called a right refinement).

More formally, let r : El
k
Er be a rule. Given an embedding φ between

El and a pattern E, we define the left refinement of r via the embedding φ as the
k 
 
rule E  cleanEErφ, where k is equal to the product between k and the ratio
between the number of symmetries in E and El. Moreover given a clean embedding
φ between Er and a pattern E , there exists a pattern E and an embedding φ between E and E such that φA, i  φ A, i for any A, i  domφ  such that i  N, we define the right refinement of r via the embedding φ as the left refinement of r via the embedding φ.


Differential semantics
Now we remind the differential semantics of Kappa [7,5].
We consider a set of rules R and a finite set of species V, which is closed under the rules in R and has at most one representative per species isomorphism class. More formally, (i) for any mixture E, any pattern component of which is isomorphic

to an element in V, any rule El  k
Er, and any embedding φ between El and E,

each pattern component in cleanEErφ is isomorphic to an element in V; and
(ii) for any pair v, v  of elements in V, if there exists an embedding between v and
v , then v  v .
The states ρ of the system are mapping between chemical species v  V and real numbers in R. (ρv denotes the concentration of the species v). So as to define the function F which specifies the behavior of the system, we consider the set of chemical

reactions which are generated by the set of rules R. Given a rule r : El k
Er in

R, we may assume without any loss of generality that El is written as C1,..., Ck where each Ci is a pattern component. A reaction is obtained, by choosing for any integer i between 1 and k, a reachable species vi  V and an embedding φi between Ci and vi. The expression v1,..., vk might not be a mixture because distinct species may share some agent identifiers. In order to define the product of a reaction, we choose k species w1,..., wk and k embedding ψ1,..., ψk such that w1,..., wk is a mixture, and that for any i between 1 and k, ψi is an embedding between vi and wi. This way, we form a composite embedding φ   i ψiφi between El and w1,..., wk. The result of the application of the rule r on w1,..., wk along φ is isomorphic to a tuple of species in V that we denote by p1,..., pL (we can check that p1,..., pL does not depend on the choice of the w1,..., wk).
Then the function F is obtained by summing the contribution of each reaction,

as follows:
Fρvj  γ  ρvi  1  i  k,	Fρpj   γ  ρvi  1  i  k.
i	i
where γ is the quotient between k and the number of symmetries in El and j ranges between 1 and k, and j between 1 and l.
The obtained autonomous system V, F is positive. Indeed, for any species
v  V, Fv can be written as ρv  P ρv1,..., ρvm  Qρv ,..., ρv ,
1	n
where P  and Q are two polynomial mapping with positive coefficients and
v1,..., vm, v ,..., v  are m  n species in V.
1	n
Symmetric sites in Kappa
Action of a transposition
In this section, we formalize the actions of a transposition of two sites on patterns and rules. Then we define when two sites are symmetric in a given set of rules.
We consider two kinds of transformation of pattern. The first one, called trans- position of binding types consists in replacing a site name with another one in an instance of a binding type and the second one, called transposition of states consists in permuting the states of two sites in one agent.
More precisely, a transposition of binding types is defined as a tuple
A, l, z, B, x, y  A  N  S  A  S  S, such that z  ΣλA and x, y  ΣλB. A transposition of states is defined as a tuple A, l, x, y  A  N  N S  S, such that the following properties are satisfied: (i) the site x belongs to the set ΣA; (ii) the site x belongs to ΣcA if and only if the site y belongs to ΣcA; (iii) the site x belongs to ΣλA if and only if the site y belongs to the set ΣλA. A transposition is either a transposition of binding types, or a transposition of states. The set of all transpositions is denoted by T.
Now we describe the action of transposition on patterns. A transposition of binding type t : A, l, z, B, x, y operates on a pattern E in the following way: if E contains an agent A with identifier l documenting the site z, then if the binding state of z is the binding type B @x , then it is replaced with the binding type B @y , else if the binding state of z is the binding type B @y , then it is replaced with the binding type B @x . In any other cases, E is not modified.
The transposition of sites A, l, x, y denotes that we want to permute the inter- nal state and the binding state of the sites x and y in the agent A with identifier l, if such an agent occurs in a pattern. Thus, whenever there is no agent A with identifier l in the pattern E then the pattern E remains unchanged. Otherwise, the transformation is defined in two steps. First we define E as the expression which is obtained by replacing any instance of a site address AL@x with the site address

AL@y and vice versa. Let us write E as a sequence a ,..., a 
of agents. We know

1	n
that there exists a unique agent a  in E of type A and identifier l. Let us write

  ALσ. We define the expression E by replacing in E the agent a 
with the

agent ALσ  where σ is defined as the interface where σ x is defined and equal to

σy if and only if σy is defined; σ y is defined and equal to σx if and only if σx is defined, and for any site in ΣAx, y, σ z is defined and equal to σz if and only if σz is defined. The expression E is then called the result of the application of the transposition t on the pattern E.
Given a transposition, we denote by subst, E the result of the application of the transposition t on the pattern E. We notice that subst, E is a pattern. Moreover, if E is a proper pattern (resp. a mixture, resp. a species), then subst, E is a proper pattern (resp. a mixture, resp. a species) as well.
Example 5.1 We consider the following signature: A  A, B, S  x, y, z,
I  , ΣcA  ΣcB  , and ΣλA  ΣλB  x, y, z.
We consider the pattern E : A1 x A2@y , A2 y A1@x,z B@x . Then, apply- ing the transposition of binding types t1 : A, 2, z, B, x, y to E replaces the binding type B @x with the binding type B @y in the agent A with identifier 2: subst1, E  A1 x A2@y , A2 y A1@x,z B@y . Moreover, applying the trans- position of states t2 : A, 1, x, y to E is computed in two steps. Firstly we replace the site address A1@x with the site address A1@y , secondly we replace the site name x with the site name y in the agent A with identifier 1. Thus, we get: subst2, E  A1 y A2@y , A2 y A1@y,z B@x . Lastly, applying the trans- position of states t3 : A, 2, y, z is computed in two steps. Firstly we replace the site address A2@y with the site address A2@z , secondly we swap the states of the site y and of the site z in the agent A with identifier 2. Thus, we get: subst3, E  A1 x A2@z  , A2 z A1@x,y B@x .


Now we consider a rule r : El k
rule:
Er and a well-defined transposition t. The




 
r  : subst, El  subst, Er, where k
 k 
symsubst, El ,
symEl

is well-defined. In such a case, the rule r  is called the action of the transposition t
on the rule r, and is denoted by subsRt, r1.

Deﬁnition of symmetric sites
We use transpositions in order to identify the sites having the same capabilities of interaction. The idea is the following: let us fix an agent type A and two sites x and y in ΣA such that x  ΣλA if and only if y  ΣλA, and x  ΣcA if and only if y  ΣcA. So as to detect whether x and y have the same capabilities of interaction, we will replace each rule with the combination of rules which can be obtained in substituting zero, one, or several occurrences of x with y, and zero, one, or several occurrences of y with x. If the obtained system of rules is equivalent to the initial one, then the sites x and y have the same capabilities of interaction. Special care has to be taken about the kinetic rates of rules. When a rule is replaced with n rules (up to transposition of x and y in the instances of A), then the rate of each rule has to be divided by n. Moreover, in order to show that the initial and the obtained

systems are equivalent, one may have to reorder interfaces and reindex agents in rules (by applying a same into substitution to both sides of a given rule) and gather some rules having the same lhs and the same rhs (summing up the rates).
More precisely, given a rule r and a non negative real number k  R , we define scaler, k as the rule that is obtained by multiplying the rate of r by k. Moreover, we define the orbit of the rule r, as the set, which is written orbitr, of rules which can be obtained by applying zero, one, or several transpositions of states to the rule
r. Since the lhs and the rhs of a rule are finite expressions, the orbit of a rule is always a finite set. Our model transformation is formalized by the binary relation
 over sets of rules, which is defined as follows:
R   scaler , 	1	  r  R, r  orbitr .
cardorbitr
for any set of rules R.
Agents and sites in rules can be reordered using the congruence relation over their both hand sides. Moreover, agents can be reindexed using substitutions. We use a slight extension of the substitution that we have used in the Section 4.1, since we may need to reindex temporary identifiers (in N). A generalized substitution is a mapping φ between N  N and N  N, such that for any proper identifier l  N, φl  N and such that for any temporary identifier l  N, φl  N. A generalized substitution is into if and only if for any identifier l, l  N  N, φl  φl   l  l . The extension φ of a generalized substitution φ to agents is defined as in the case of substitution (eg. see the Section 4.1). We define an equivalence relation 
k	k 

over rules such that two rules r : El  Er and r : E  E 
are -equivalent

l	r
whenever k  k and there exists an into generalized substitution φ such that
φEl  E and φEr  Er.
Two set of rules are equivalent whenever they can be made equal by replacing their rules with -equivalent ones and by gathering the rules having the same lhs and the same rhs (in such a case, their rates are summed up).
Example 5.2 We consider two examples of rule sets. The first one is the example of the Section 2.1, in which we do not assume that the rates of the first two reactions are the same. The second example is a more subtle example.
The examples and their automatic transformation are given in the Figure 9. For each, the initial set of rules is given on the left, and the transformed one (after reordering and reindexing) is given on the right. In the Figure 9(a), we notice that whenever the rates k1 and k2 are equal then the left and the right systems are equal. Thus under this assumption, the sites x and y are symmetric in A. Let us detail the transformation, the first two rules are replaced with two rules each, with a half rate, one applying on the site x, and the other applying on the site y. The four obtained rules are pairwisely equal, so we gather them pairwise. When transforming the third rule, we obtain two equivalent rules (with half rate), that we can gather to recover the initial rule.
In the Figure 9(b), we notice that the sites x and y are symmetric whenever

A1x
 k1
A1 xp 

 
A1xu	p

A1y  k2
A1 y	
A1y  k A1 y 

u	p
A1 x ,y  k3  ε
u	p
A1 x ,y  k3  ε

where k   k1  k2 .
2	2
In this first example, the signature is: A  A, S  x, y, I  u, p, ΣcA  x, y, and ΣZA  . The set of rules on the left is transformed into a set of rules which is equivalent to the one on the right. We can conclude that the sites x and y are symmetric in A whenever k1  k2.


A1x  , A2x  k1 A1x  , A2y  k2 A1y  , A2y  k3
A1 x A2@x  , A2 x A1@x 
A1 x A2@y , A2 y A1@x	
A1 y A2@y  , A2 y A1@y 
A1x  , A2x  k A1 x A2@x , A2 x A1@x A1x  , A2y  k A1 x A2@y , A2 y A1@x A1y  , A2y  k A1 y A2@y , A2 y A1@y 

where k  k1  k2  k3 .
4	4	2
In this second example, the signature is: A  A, S  x, y, I  , ΣcA  , and ΣZA  x, y. The sites x and y are symmetric in A whenever k1  k2  k3.
Fig. 9. Examples of symmetric sites.
k1  k2  k3. This case is more subtle, because some rules gain or loose some symmetries during the transformation. For instance, the transformation of the first rule gives four rules. One of them binds the sites x of two agents A, another binds the sites y of two agents A. The lhss of these two rules have the same number of symmetries as the one of the initial rule. Thus, their rate are divided by 4 (since the rule is rewritten into 4 rules). Another rule binds the site x of the agent A with identifier 1 and the site y of the agent A with identifier 2, and the last one binds the site y of the agent A with identifier 1 and the site y of the agent A with identifier 2. The number of symmetries in these rules is twice less as the number of symmetries in the initial rule. Thus the rate are divided by 8 (4 since the rule is rewritten into 4 rules, and 2 due to the loss of symmetries). But the two obtained rules are equivalent up to reordering and reindexing, thus, we obtain a single rule, the rate of which had been divided by 4. The transformation of the remaining rules works the same way, except that the rule which binds the sites x of two agents A and the rule which binds the sites y of two agents A both gain symmetries (the rate is divided by 4 and multiplied by 2), and the rule which binds the site x and the site y of two agents A keeps the same number of symmetries (the rate is divided by 4).
Application to the reduction of differential semantics
As stated by the following theorem, pair of symmetric sites induces bisimulation.
Theorem 5.3 When two sites x and y are symmetric in A, then the relation  which is the reflexive and transitive closure of the relation which identiﬁes two species E and E, if and only if there exists a transposition t of states such that
(i) E  subst, E and (ii) t is either of the form A, l, x, y with l  N  N, or of the form B, l, z, A, x, y with B  A, l  N  N, and z  S, induces a bisimulation.
Proof. This theorem is a direct consequence of Proposition 6.5 in [2]. Indeed, if the sites x and y are symmetric in the agent A, then the set of rules has the


	
(a) The contact map.	(b) The annotated contact map.
Fig. 10. The contact map and the annotated contact map for the Example in Section 2.3.
same differential semantics that another system satisfying the requirements of the Proposition 6.5 in [2]. We observe that the Proposition 6.5 in [2] was not dealing with binding type, but the generalization of this result is straight forward. 
Thus, we can use the framework in the Section 3.4, to define model reductions thanks to symmetric sites. We only need to pick a representative for each equiva- lence class.
Information flow-based model reduction
In this section we show how to construct an abstract/reduced semantics tracking the flow of information between different regions of chemical species. The first step is to define a family of suitable pattern components called fragments, that will be the basis of our abstract domain. To define our fragments, we will use an contact map (defined below) annoted with an over-approximation of the flow of information between the sites of chemical species.
Contact map and annotated contact map
The contact map associated to V is a summary of the bindings found in the species of V. Specifically, the contact map (CM) is a non-oriented graph where the nodes are the pairs A, x  A  S such that x  ΣA, and the edges are the set of pairs
A, x, B, y such that an instance of the site x in A can be bound to an instance of the site y in B in a given chemical species in V. Therefore, any pattern projects uniquely to the contact map. The contact map for the example in the Section 2.3 is given in the Figure 10(a). As one can see, in a contact map, a site can be connected to itself (which means that an instance of the site can be bound to another instance of the same site). Moreover, some sites in the contact map may be connected to several sites, which implies a competition between two binding sites (but it does not occur in our example).
We propose to annotate the contact map with an over-approximation of the flow of information between the different regions of chemical species. The main idea is to identify the correlations between the states of the sites, which can be safely abstracted away, because they have no influence on the behavior of the states of the other sites. This way, the so-obtained annotated contact map (aCM) will be used as a symbolic description of the set of fragments of chemical species, the concentrations of which will be the variables of our reduced system.

More formally, an annotated contact map (aCM) is given by a contact map and a binary (oriented) relation over the nodes. The relation can relate two pairs A, x and B, y only if A  B and x  y or if there is an edge between A, x and B, y in the contact map. In such cases, we say that there is an arc in the aCM from the site x of A to the site y of B.
Example 6.1 An aCM for the example in the Section 2.3 is given in the Figure
10(b). This aCM should be read in the following way. In a receptor, the state of site a may influence all the state of other sites, the state of site b may influence the behavior of the state of sites c and d. Moreover, information may flow across bonds: in dimers, the state of sites a and b of a receptor can control the behavior of the state of sites b, c, and d of the other receptor.
In the Section 6.2, we define the set of fragments that is denoted by an aCM and in the Section 6.3, we give the constraints that should be satisfied by the aCM, so that it soundly summarizes the flow of information. In the Section 6.4, we define the reduced model associated to the set of fragments of a sound aCM.
Fragments
Fragments are well chosen pattern components, which can be derived from an aCM. Let us consider an aCM. Given a pattern, we call a site instance in the pattern
E a triple A, l, x  A  L  S such that there exists an agent A with identifier l which documents the state of the site x  ΣA. A path in a pattern E is a finite sequence of site instances p : Ai, li, xi1 i n such that (i) for any i between 1 and n  2, Ai, li, xi  Ai 2, li 2, xi 2; and (ii) for any i between 1 and n  1, either Ai, li  Ai 1, li 1 and xi  xi 1, or the instances of the site Ai, li, xi and
Ai 1, li 1, xi 1 are bound together in the pattern E. In such a case, n is called the length of the path p, and for any i between 1 and n1, Ai, li, xi, Ai 1, li 1, si 1 is called an arc in p. A path p in a pattern E is compatible with the aCM, if and only if, for any arc A, l, x, A , l , x  in p, there is an arc in the aCM from the site x of the agent A, to the site x of the agent A .
As states by the two following Lemmas, compatible paths can be composed and the image of a compatible path by an embedding is a compatible path.
Lemma 6.2 (Path composition) If there exist two paths p1 and p2 in E, both compatible with the aCM and, respectively from a site instance A, l, s to a site in- stance A , l , s , and from the site instance A , l , s  and a site instance A”, l”, s”, then there exists a path in E, compatible with the aCM, from the site instance
A, l, s to the site instance A”, l”, s”.
Proof. We prove the Lemma 6.2 by induction over the length of p1.  Let us

write p1  Ai, li, si1  i  n and p2  Ai, li, si1  i  n .	If n  0 or n
 0,

then p1 or p2 is a path in E compatible with the aCM from the site instance
A, l, s to the site instance A”, l”, s”; else if An	,l	,s	  A , l , s ,

 1  n  1
n  1
2  2	2

then A ,l ,s ,..., A
,l ,s , A , l , s ,..., A 
, l 
, s 
 is a path in E, com-

1  1	1
n  n	n
2  2	2
n   n	n 

patible with the aCM; otherwise we apply the induction hypothesis with the paths


p	p	p	p	p	u




u	R@b



(a) F1
p
(b) F2
p
(c) F3
p
(d) F4

(e) F5


p	p	u	p	u
		

p
(f) F6
p
(g) F7
p	p
(h) F8

Fig. 11. Some annotated pattern components. Are they fragments ?
  	
Ai, li, si1in and Ai, li, si1in .	 
Lemma 6.3 (path image) Let φ be an embedding between two patterns E
and E and Ai, li, si1in be a path in E, compatible with the aCM. Then
Ai, φli, si1in is a path in E which is compatible with the aCM.
Now we define two sets of pattern components. A prefragment is a pattern component E such that there is a site instance A, l, x in E, such that, for any site instance A, l, x there isa path in E, compatible with the aCM, from A, l, x to
A, l, x. In such a case, the site instance A, l, x is called a target of the prefragment
E. A fragment is a prefragment which is maximal for the embedding ordering: a prefragment F is a fragment whenever for any prefragment F  such that there exists an embedding between F and F , we have F  F .
Example 6.4 We consider the aCM which is given in the Figure 10(b) and the pattern components which are given in the Figure 11. Among these pattern com- ponents, only F1, F2, F4, F5, F6, and F7 are prefragments. Yet, we can notice that F1 can be embedded into F2; F4 and F6 can be embedded into F7. Thus neither F1, nor F4, nor F6 is a fragment. On the other side, both F2 and F7 are fragments, since the only way to refine them is to add a site c , but in such a case, the result is not a prefragment anymore.
Given a pattern E and a state ρ over V, we define the concentration Eρ of the pattern E in the state ρ, as:


Eρ
	cardφ  φ is an embedding between E and v ρv.
symE
vV

We often write E instead of Eρ.
We define the set of abstract variables as the set of fragments of chemical species modulo isomorphisms. Formally, V is a set of fragments, such that (i) for each

fragments F in V, there exists v  V such that F embeds in v, and (ii) for any pair
F1, F2 of fragments in V, if F1 embeds into F2 then F1  F2. Since V is a finite set, V is finite as well. The set of concrete states V  R over V and the set of (abstract) states V  R over V are related via the abstraction function φ which is defined as φρv  vρ. The (pre)fragments and the abstraction function φ enjoy the following properties.
Proposition 6.5 (orthogonal decomposition.) Let F be a prefragment. The concentration of a prefragment F can be expressed as a linear combination with positive coefficients of the concentration of some fragments.
Proof. Let us define the corrected concentration Eρ of a pattern E as Eρ  symE, and prove the following equivalent property: E can be expressed as a linear combination with positive coefficients of the corrected concentration of Fi of some fragments.
The proof works iteratively. At each step, a prefragment E will be replaced with a multi-set of more refined prefragments, while preserving the overall corrected concentration, until we obtain a multi-set of fragments. If E does not embed into a species in V, we remove it. Otherwise E has to be refined.
A pattern can be refined into a multi-set of patterns while preserving the overall correcting concentration, by using the following rewrite steps. We can refine the internal state of a site which misses one with any internal state in I, or refine a binding state ‘?’ or ‘’ with either the symbol ‘ϵ’ and any potential binding type (according to the CM). Moreover, a fresh site can be added in the interface of an existing agent. Lastly, if E constains a site instance annotated with a binding type, one could replace it with a bond to an existing site (if its binding state allows it), to fresh site in existing agents, or to a site in a fresh agent.
We are left to show that, whenever a prefragment E is not a fragment, then there always exists a rewrite step which replaces E into a multi-set of prefragments. Only the steps which add a fresh site instance raise an issue. Thus, let us assume that no other rewrite step can apply. We consider an embedding φ between E and a fragment F . We assume that there exists a target A, l, x in F , which has no antecedent by φ. Let us consider A, l, x a target in E. Then we can consider a path in F compatible with the aCM from the site instance A, φl, x to the site instance A, l, x. The first site in this path which has no antecedent by φ can be aded to E and, by construction, it is a target of the result. Otherwise, there exists a site instance A, l, x in E such that A, l, x is a target in E and A, φl, x a target in F and there exists a path in F compatible with the aCM from the site
A, φl, x and a site having no antecedent by φ. The first site having no antecedent
can be added to E, and A, l, x is still a target of the result.
Thus we have a rewriting strategies, where all intermediar steps are multi-set of prefragments. The set of prefragments which can be embedded into chemical species in V is finite (since V is finite), which ensures the termination of our iteration. 


φ
Proposition 6.6 (divergence preservation) We have: V  R (
V  R.

Proof. By construction, φ is a linear function which maps any state over V to a state over V. Let us prove that φ preserves the divergence of sequences. Let us consider a sequence ρnnN of states over V such that the sequence ρnnN diverges. Since V is a finite set, there exists a variable v  V such that the sequence
ρnvnN diverges toward  (by definition, in a state ρ, ρv  0). Let us take an instance A, l, x of a site in v, we define ι as its internal state and λ as ‘ϵ’ if the site is free, or as its binding type B @y otherwise. The pattern E : A1(xλ) is a prefragment. In given a mixture, the number of embeddings of E is greater than the number of embeddings of v. Moreover, by the Proposition 6.5, the number of embeddings of E in a mixture E can be expressed as a linear combination with positive coefficients of the number of embeddings of some fragments F1,..., Fk in E. As a consequence, for at least one of the fragments, let us say Fj, the sequence
ρnFjnN diverges as well. Thus the sequence φρnnN diverges as well.	 

Flow analysis
In this section we define some criteria which ensure that the aCM is a sound over- approximation of the information flow. So as to make the definitions easier, we assume that the rules of our system have no side-effect, that is to say that any site which may be modified by a rule has to be documented in the lhs of the rule. More precisely, only the bonds that are written thanks to a pair of site addresses can be released, and only the agents which document the binding state of their sites with ‘ϵ’ or with a site address can be removed. This is not a limitation of the framework, since any rule with side-effects can be refined into a set of rules without side-effects without modifying the differential semantics of the system [13].
Some specific rules induce no flow of information. We say that a rule is trivial,

if it is of the form A1 aB2@b  , B2 bA1@a  k
A1a  , B2b . Thus a trivial rule

release a bond without testing any other information. We could extend the class of trivial rules, but we do not do it for the sake of simplicity.
Definition 6.7 The aCM is valid with respect to a rule set R if it satisfies the following constraints.
direct flow: Any path in the lhs of a (non trivial) rule r to a site instance which is modified by the rule r, is compatible with the aCM.
indirect flow: For any pattern component in the lhs of a non trivial rule r, there exists a site instance A, l, x such that any path in the lhs of the rule r to the site instance A, l, x is compatible with the aCM.
hidden flow: If a rule (trivial or not) can release a bond between two site instances A, l, x and A, l, x in a species v, and if there exist two
  	
paths Ai, li, xi1in and Ai, li, xi1in , compatible with the aCM, in v
respectively from A, l, x and A, l, x to a common site instance (ie such

that A
,l ,x   A
, l
, x
, A, l, x  A ,l ,x , and A, l, x 

n  n	n
n   n	n 
1  1	1

A , l , x ), then there is, in the aCM, either an arc from the site x of the
1  1	1
agent A to the site x of the agent A, or an arc from the site x of the agent


Y	Y 
	
Z1	Z2

Z1	Z2
 

X 
Pullback.
X
Relative pushout.
Fig. 12. Overlap.

A  to the site x of the agent A.
Intuitively, direct flows describe the flow of information between the sites that are tested (because they occur in the lhs of a rule), and the sites that are modified. Indirect flows handle with the pattern components which are not modified: the concentration of these patterns regulates the speed of rule application. Moreover, whenever a fragment contains two site instances which can potentially be bound together and there exists a rule which can release this bound, then the behavior of the fragment is not the same if the two sites are actually bound together, or not. This creates a hidden flow of information. As a consequence, we have to describe explicitly in the fragment if the two site instances are bound together, or not.
Example 6.8 The aCM in the Figure 10(b) is a valid aCM for the set of rules in the Figure 7.
So as to derive the abstract dynamic function F, we need to define the notion of overlap between two patterns. Our definition should be universal so that we can enumerate overlaps without over-counting them. At first glance, an overlap between two patterns Z1 and Z2 could be defined by two patterns X and Y and four embeddings ψ1, ψ2, γ1, γ2 where ψi is an embedding between X and Zi, and γi an embedding between Zi and Y such that the following diagram:
Y
Z1	Z2

X
commutes. Intuitively X denotes a common region (which can be empty), and the
existence of Y ensures that Z1 and Z2 are somehow compatible. Yet X and Y can be less or more refined, and thus this construction is not universal. Fortunately, whenever such a commutative square exists, it is always possible to construct an universal square where the triple X, ψ1, ψ2 is a pullback and the triple Y, γ1, γ2 is an idem pushout [12] (See the Figure 12). Thus, an overlap between two patterns F1 and F2 can be defined uniquely (up to isomorphism) by a pullback X, ψ1, ψ2 and an idem pushout Y, γ1, γ2, and is denoted by the tuple Z1, Z2, X, Y, φ1, φ2, γ1, γ2.We refer to [5, Section 4.B.3] for more explanations, and complete definitions and proofs. As formalized by the following lemma, whenever two fragments overlap on a site

instance which is a target of one of the two fragments, then, the glueing of the two prefragments is also a prefragment.
Lemma 6.9 Let F1, F2, X, Y, φ1, φ2, γ1, γ2 be an overlap between two prefragments F1 and F2 and such that there is a site instance A, l, x in X such that A, ψ1l, x is a target of the prefragment F1, then Y is a prefragment as well.
Proof. Let us prove that, for any target A0, l0, x0 of the prefragment F2, the site instance A0, γ2l0, x0 is a target of Y . We consider a site instance A1, l1, x1 in Y . Indeed, since Y, γ1, γ2 is a pushout, the site instance A1, l1, x1 in Y is either the image of a site instance in F1 by γ1, or the image of a site instance in F2 by γ2. (i) In the first case, let us introduce the agent identifier l2 such that γ1l2  l1 and A1, l2, x1 is a site instance in F1. By definition of a target, there exists a path in F1, compatible with the aCM, from the site instance A1, l2, x1 to the site instance A, ψ1l, x. Then by the Lemma 6.3, there exists a path in Y , compatible with the aCM, from the site instance A1, γ1l2, x1 to the site instance
A, γ1ψ1l, x. Beside, since A0, l0, x0 is a target of F2, then there is a path in F2, compatible with the aCM, from A, ψ2l, x and A0, l0, s0. By the Lemma 6.3, we deduce that there exists a path in Y , compatible with the aCM, from the site instance 1, γ2ψ2l, x and the site instance A0, γ2l0, x0. Since γ1l2  l1 and γ1  φ1  γ2  ψ2, we deduce from the Lemma 6.2, that there exists a path in Y , compatible with the aCM, from the site instance A1, l1, x1 and the site instance
A0, γ2l0, x0. (ii) In th second case, since A0, l0, x0 is a target of F2 then there exists a path in F2, compatible with the aCM, from the site instance A1, l2, x1 to the site instance A0, l0, x0. Thus, since γ2l2  l1 and by the Lemma 6.3, there exists a path in X, compatible with the aCM, from the site instance A1, l1, x1 to the site instance A0, γ2l0, x0.	 
The following proposition enables the computation of the activity of rules as an expression of fragments.
Proposition 6.10 (prefragment.) Any pattern component which occurs in the lhs of a non trivial rule is a prefragment.
Proof. The proposition 6.10 is a direct consequence of the definition of indirect flow. Let us consider a pattern component which occurs in a lhs of a non trivial rule. By definition of the indirect flow, there exists a site instance A, l, x such that for any path in the lhs of the rule r from a site instance to A, l, x is compatible with the aCM. Thus, by definition, C is a prefragment (since A, l, x is a target). 
A fragment cannot properly intersect a pattern component in the lhs of a non trivial rule r on a site that is modified by r, as formalized as follows.
Proposition 6.11 (left overlap.) Let F, C, X, Y, φ1, φ2, γ1, γ2 be an overlap be- tween a fragment F and the pattern component C of the lhs of a non trivial rule r. If there exists an site instance A, l, x in X such that the site instance A, ψ2l, x is modiﬁed by the rule r, then γ1 is an isomorphic embedding (and thus Y is a fragment).

Proof. By the Proposition 6.10 C is a prefragment. Moreover any site instance which is modified in C by the rule r is a target. Thus, if X contains a site modified by the rule, then it contains a target of C. Thus, by Lemma 6.9, Y is a prefragment. Thus γ1 is an embedding between the fragment F and the prefragment Y . So by definition of fragments, F  Y .	 
Thus we can express the consumption of fragments. Conversely, the following proposition enables the computation of the production of fragments.

Proposition 6.12 (right overlap.) Let r : El k
Er be a rule, and F be a frag-

ment. Let F, Er, X, Y, φ1, φ2, γ1, γ2 be an overlap between F and Er. We assume that there is a site instance A, l, x in X such that the site instance A, ψ2l, x has been modiﬁed by the rule r. We can always assume that γ2 is a clean embedding.
 
Thus, we can consider r  : E   Er, the left reﬁnement of r by the embedding γ2.
 
Then if El and E have the same number of pattern components, then any pattern

component in E  is a prefragment.
Proof. [sketch] We take the notations of the theorem and assume that El

and E 

have the same number of pattern components. We consider the antecedent F  of F before the application of the rule. F may be not connected, but any pattern component in F intersects a pattern component in the E ona site that is modified by the rule. Moreover, a pattern component in F  intersects at most one pattern
component in E , otherwise E and E  would not have the same number of pattern
l	l	l
components. Moreover, for any bond occuring in a cycle in F without occuring in
F , the two sites of the bonds occurs in the same pattern component of E , and thus, there is a path, compatible with the aCM, from one site of the bond to the other (and conversely) in F . Lastly, if when removing a bond in a prefragment, we obtain two pattern components, then both are fragments (at least one of the two pattern components contains the target of the initial prefragment, while one of the freed site is a target of the other pattern component). Thus, each pattern component in E  is obtained by gluing a prefragment on a pattern component in E
l	l
on a site that is modified, thus, by Proposition 6.3 and 6.2, each pattern component in E is a prefragment.	 
Proposition 6.13 If a fragment F  contains two site instances A, l, x and
A , l , x  with the respective binding states A @x’ and A@x, then no rule can release a bond between the site x of an agent A and the site x of an agent A .
Proof. Let is consider a fragment F which contains two site instances A, l, x and
A , l , x  with the respective binding states A @x’ and A@x , we consider a target
A , l , x  of the fragment F . By definition of a target, there is a path from the site instance A, l, x (resp. A , l , x ) to the site instance A , l , x , thus there is a hidden flow of information, and there is an arc in the aCM either from the site x of A to the site x  of A , or an arc in the aCM either from the site x  of A  to the site x of A. In both case, one binding type can be refined into the address of a fresh or existing site. Thus we can construct a prefragment F such that F strictly embeds into F , which contradicts the fact that F is a fragment.	 

Reduced system
Following the Theorem 6.1 in [5], since the set of prefragments and the set of frag- ments satisfies the Propositions 6.5, 6.6, 6.10, 6.11, 6.12, and 6.13, we can derive the abstract dynamic function F incrementally, by scanning the set of embeddings between the pattern components in the lhs of rules and fragments (for the consump- tion of fragments) and the set of overlaps between the rhs of rules and fragments (for the production of fragments).
Let r be a rule. We distinguish between two cases, when expressing the contri- bution of r in F.

 Trivial rules. If r is a trivial rule A1 aB1@b , B1 bA1@a k
A1a  , B1b , such

that there is no arc in the aCM either from the site a of the agent A to site site b of the agent B, or from the site b of the agent B to the agent a of the agent A. Then, for each embedding between either A1 aB@b and F , or B1 bA@a and F , the contribution of the consumption of F , in the rule r, via the embedding φ is defined as:

		
kρF 

F ρ F  
.
symElsymF 

Whenever A  B and a  b, the contribution should be counted twice.
For each embedding φ between either A1a  and F , or B1b  and F , the con- tribution of the production of F , in the rule r, via the embedding φ is defined as:

		
kρFψ

F ρ F  
.
symElsymFψ

where Fψ is obtained by replacing with the symbol ‘ϵ’, the binding state of the site instance A, φ1, a whenever φ is an embedding between A1a  and F , or the binding state of the site instance B, φ1, b otherwise.
 Non trivial rules. We decompose the lhs of r as a tuple a non-empty pattern components Ci1in. Then for any p between 1 and n, and any embedding φ between Cp and a fragment F , the consumption of F , in the rule r, via the embedding φ is defined as:


FρF  
kρF 


symElsymF 


ip
Ci.

Moreover, for any overlap F, Er, X, Y, φ1, φ2, γ1, γ2 between a fragment F and the rhs of the rule r, if the number of pattern components in the lhs of the left refinement of r by the embedding γ2 is the same as the number of pattern components in the lhs of r, then the production of F , in the rule r, via the overlap
F, Er, X, Y, φ1, φ2, γ1, γ2 is defined as:


FρF  
k	  C.


symElsymF 	i	i
Otherwise the overlap has no contribution.

Theorem 6.14 If V is the set of fragments which is denoted by a valid aCM, then, the following diagram:
F




F
is a model reduction.
Proof. The proof that is given in the Section 6 of [5] applies, providing the fact that we replace the word ‘subfragment’ with the word prefragment.	 

Combining fragments and symmetries
Now we wonder when we can use the potential symmetries among sites, so as to reduce further the number of fragments. Thanks to the framework that we have proposed in the Section 3.5, we propose to quotient the set of chemical species in V and the set of fragments V by some equivalence relations which identify chemical species and fragments upto permutation of symmetric sites. Yet, this can only be done if we can provide two idempotent functions r : V  V and r : V  V, mapping respectively each species and each fragment to a representative, and such that the following diagram:
Pr



commutes.
Pr

Given two symmetric sites x and y in an agent A, we consider two cases. If there is an arc in the aCM from the site x in A, to the site y in A, then there is also an arc from the site y in A to the site x in A in the aCM. Thus, in a fragment, whenever an agent A documents the site x, the site y is documented as well (and conversely). In such a case, it is always possible [2] to choose the functions r and r which abstract away the difference between the site x and the site y in agents A, so that the diagram commutes. Otherwise, there is no way to define the mappings r and r such that the diagram commutes, but, since no agents A in a fragment documents both x and y, there is no need to abstract the difference between these two sites.

Conclusion
We have proposed a formal framework for reducing the differential semantics of rule-based models. This framework combines two abstractions: we use the flow of information to detect useless correlations and the pairs of site having the same capabilities of interaction to abstract away any distinction between these sites. The initial semantics and the reduced one are formally related by Abstract Interpreta- tion.

In future works, we will implement this framework within the OpenKappa plat- form (downloadable at kappalanguage.org). Then, we will address the combi- naison of the reductions based on the detection of useless correlations (as in this framework), and the ones based on the detection of invariants (as in [9,8]). On the theorical side, we are looking for a semantics definition of the flow of information (based on the set of ground reactions induced by a rule-based model), both for the stochastic semantics and for the differential one. Then we will describe the abstrac- tions of the flow of information which is used in this paper and in [7,5,10,9,8] as a hierarchy of abstractions of this semantics definition of the flow of information.

References
Blinov, M. L., J. R. Faeder and W. S. Hlavacek, BioNetGen: software for rule-based modeling of signal transduction based on the interactions of molecular domains, Bioinformatics 20 (2004).
Camporesi, F., J. Feret, H. Koeppl and T. Petrov, Combining model reductions, in: MFPS XXVI, ENTCS 265 (2010).
Conzelmann, H., D. Fey and E. D. Gilles, Exact model reduction of combinatorial reaction networks, BMC Systems Biology 2 (2008).
Cousot, P. and R. Cousot, Abstract interpretation: a unified lattice model for static analysis of programs by construction or approximation of fixpoints, in: POPL 77.
Danos, V., J. Feret, W. Fontana, R. Harmer and J. Krivine, Abstracting the differential semantics of rule-based models: exact and automated model reduction, in: LICS ’2010.
Danos, V. and C. Laneve, Core formal molecular biology, TCS 325 (2003).
Feret, J., V. Danos, J. Krivine, R. Harmer and W. Fontana, Internal coarse-graining of molecular systems, PNAS 106 (2009).
Feret, J., T. Henzinger, H. Koeppl and T. Petrov, Lumpability abstractions of rule-based systems, in:
MeCBIC 10, EPTCS.
Feret, J., H. Koeppl and T. Petrov, Stochastic fragments: A framework for the exact reduction of the stochastic semantics of rule-based models, IJSI To appear.
Harmer, R., V. Danos, J. Feret, J. Krivine and W. Fontana, Intrinsic information carriers in combinatorial dynamical systems, Chaos 20 (2010).
Ince, E. L., “Ordinary Differential Equations,” Dover Publications, Inc., New York, NY, 1956.
Leifer, J. J. and R. Milner, Deriving bisimulation congruences for reactive systems, in: CONCUR 00, LNCS 1877.
Murphy, E., V. Danos, J. Feret, R. Harmer and J. Krivine, Rule based modelling and model refinement, in: Elements of Computational Systems Biology, Wiley Book Series on Bioinformatics, 2009 .
Petrov, T. and H. Koeppl, Maximal Reduction of ODE Semantics of Rule-based Models: Syntax- Independent Setup, in: International Workshop on Computational Systems Biology, 2010.
