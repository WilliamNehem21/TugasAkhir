Electronic Notes in Theoretical Computer Science 106 (2004) 91–104 
www.elsevier.com/locate/entcs


Comparing Operational Models of Name-Passing Process Calculi
Marcelo Fiore1	and	Sam Staton
Computer Laboratory University of Cambridge Cambridge, UK

Abstract
We study three operational models of name-passing process calculi: coalgebras on (pre)sheaves, indexed labelled transition systems, and history dependent automata.
The coalgebraic model is considered both for presheaves over the category of finite sets and injec- tions, and for its subcategory of atomic sheaves known as the Schanuel topos. We characterise the transition relations induced by the coalgebraic model, observing the differences between the first two models. Furthermore by imposing conditions on history dependent automata, this model is shown to become equivalent to the sheaf-theoretic coalgebraic model.
Keywords: Name-passing process calculi, labelled transition systems, coalgebras.

Operational models of concurrent computation describe processes as con- sisting of a state space together with its possible evolution by performing atomic actions. The model of transition systems has proved useful to model basic processes of static networks, like those described by CCS and related calculi. However they are inadequate for the reconfiguration and mobility present in modern systems, as e.g. described by the π-calculus. Thus opera- tional models of name-passing process calculi have been investigated.
Fiore and Turi [5] have proposed coalgebraic models whose associated bisimulation coincides with strong early and late bisimilarity and congruence. Cattani and Sewell [1] introduced so-called indexed labelled transition systems to describe name-passing processes up to early congruence. Montanari and

1 Research supported by an EPSRC Advanced Research Fellowship.


1571-0661 © 2004 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2004.02.025


Pistore [7] have suggested a new kind of automaton that is suited to name- passing behaviour. The theme of this paper is to compare and relate these developments.
In Section 1, we characterise the indexed labelled transition systems in- duced by the coalgebraic models of Fiore and Turi over presheaves and, in Section 2, we compare this with the indexed labelled transition systems of Cattani and Sewell. Subsequently, in Section 3, we refine the coalgebraic model from presheaves to sheaves and finally, in Section 4, we relate it to the history dependent automata of Montanari and Pistore.

Coalgebraic models over presheaves

Presheaves for name-passing process calculi. A key component of the fully abstract models of the π-calculus of Fiore, Moggi, and Sangiorgi [4], and of Stark [8] is the use of presheaves to index the sets (or cpos) of pro- cesses/states by the names that they may use.
Fixing an infinite universe of names N , a suitable indexing category I is the category of all finite subsets of N and injections between them. Indeed, I is equivalent to the free symmetric monoidal category with an initial unit on one generator, and as such has the appropriate structure for modelling name generation. Accordingly, thus, we will consider I in this vein, denoting the generator (a singleton) as 1, the initial unit (the empty set) as ∅, and the tensor product (disjoint union) by ⊕. Importantly, it follows that every finite name-set C ⊆f N comes equipped with canonical maps
oldC : C → (C ⊕ 1) ← 1: newC
given by oldC = C ∼= (C ⊕∅) → (C ⊕1) and newC = 1 ∼= (∅⊕1) → (C ⊕1) . These maps induce a notion of injective renaming as follows: for an injection ı : C → D and for d ∈ D \ im(ı), we let (d/νC)ı : (C ⊕ 1) → D be the unique injective function making the following diagram commute.
C ⊕,¸,1 ¸

oldC 
    
¸¸¸n¸ewC
¸¸¸¸

C ¸¸¸
(d/νC )ı
 1

¸¸¸¸
ı  ¸¸zJ  d 
D
(As a notational convention we drop the subindex whenever ı is an inclusion.)


A presheaf (= set-valued functor) P : I → Set can be thought of as mapping each name-set C ⊆f N to a set of processes PC that use some of the names in C, and mapping each injective renaming function ı : C → D to a renaming function Pı : PC → PD on processes. We write [ı]p for P ı(p) when it is clear which P we are referring to.
Coalgebras for early bisimulation.  The work of Fiore and Turi [5] provides a model of name-passing using coalgebras in SetI, the category of presheaves over I and natural transformations. Early and late bisimulation are captured in terms of a coalgebraic bisimulation for particular behaviour functors. We recall the necessary ‘type constructors’ on presheaves:
A type of names N — the inclusion functor I → Set.
The unit type 1 — the constantly 1 presheaf (terminal in SetI).
Product and sum, defined pointwise in the standard fashion.
Non-empty powerset ℘+ also given pointwise and acting covariantly.
The exponential PQ with PQC given (via the Yoneda lemma) by the set of
natural transformations I(C, −) × Q →. P . In particular,

PN C = (PC)C × P (C ⊕ 1)

A pointwise ‘partial exponential’ P ~Q, with (P ~Q)C the set of partial functions from PC to QC.
A dynamic allocation operator δP , given by (δP )C = P (C ⊕ 1). A suitable behaviour functor Be for early bisimulation is given by

BeP = N ~((℘+P )N )	input
× N ~(℘+(N × P ))	output
× N ~(℘+δP )	bound output
× 1 ~(℘+P )	silent

A Be-coalgebra is given by a carrier presheaf P ∈ SetI together with a natural
transformation h : P →. B P in SetI. A component of that natural transfor-
e
mation hC (C ∈ I) maps a process in PC to a behaviour in BeP (C); that is,

a tuple in
C ~((℘+PC)C × ℘+P (C ⊕ 1))
× C ~(℘+(C × PC))
× C ~(℘+P (C ⊕ 1))
× 1 ~(℘+PC)
indicating the capabilities of the process. For example, for p ∈ PC, if hC(p)= (i, o, b, t), then i is a partial function to be interpreted as follows. For some channel name c ∈ C, i is defined at c if p is able to input on the channel c, in which case i(c) is a pair (f, p') ∈ (℘+PC)C × (℘+P (C ⊕ 1)). Now suppose a known name d ∈ C was to be input, then p would continue as one of the processes in the non-empty set f (d). For a fresh name d /∈ C, we use p' as template for the resultant process, continuing as [d/νC]p' ∈ P (C ∪ {d}).
Just as a coalgebra X → ℘(Lab × X) in Set induces a transition relation
over the state space given by X, a coalgebra P →.  B P in SetI induces a
e
transition relation with state space given by the elements of P , i.e. the set
P =	C∈I PC. We write C ▶ p for an element (C, p) ∈ P .
The labels on the transitions are taken from Lab = (N ×N )+(N ×N )+1, with input (written c?d), output (written c!d), and silent (written τ ) actions respectively. Each label l has associated with it some data dat(l) and channels ch(l), which we will consider as sets; here they will have at most one element. For a label l and a function f on a subset of N we write [f ]l for the obvious
renaming.
Given a coalgebra h : P →.  B P , a transition relation −→ ⊆ ∫P ×Lab ×∫P
e
is induced as the least such satisfying the following:


p' ∈ π1(π1(hCp)c)d	=⇒ C ▶ p p' ∈ π2(π1(hCp)c), d /∈ C =⇒ C ▶ p
(d, p') ∈ π2(hCp)c	=⇒ C ▶ p p' ∈ π3(hCp)c, d /∈ C	=⇒ C ▶ p
−c?→d
−c?→d
−c→!d
−c→!d
C ▶ p'
C ∪ {d}▶ [d/νC]p'
C ▶ p'
C ∪ {d}▶ [d/νC]p'

τ
p' ∈ π4(hCp)()	=⇒ C ▶ p −→ C ▶ p'

Fiore and Turi [5] show that Be-coalgebraic bisimulation coincides with early bisimulation on the induced transition relation.

indexed labelled transition systems
The early behaviour Be certainly does not induce every transition relation. In order to understand this coalgebraic model we characterise the transition relations that are induced.
Definition 1.1 An I-indexed labelled transition system (I-LTS) is a presheaf P ∈ SetI together with a transition relation −→ ⊆ P × Lab × P satisfying the axioms in Figure 1.

Fig. 1. Requirements on an I-indexed labelled transition system.

We have the following result relating coalgebras and indexed labelled tran- sition systems.
Theorem 1.2 The following are equivalent.
Be-coalgebras.
I-indexed labelled transition systems.


Condition I1 corresponds to our derivation of the labelled transition sys- tem. The structure of the behaviour functor gives Condition I2, as follows: Recall that the input component is of type
N ~((℘+P )N )
At some stage C ∈ I, we have an element i of
C ~  ℘+PC)C × (℘+P (C ⊕ 1) 

so that on some channel c ∈ C there must be either no communication (so i is undefined at c) or communication of every name (as the powersets are non-empty).
Conditions I3–I6 describe the naturality of the coalgebra map. We split the injections into bijections and inclusions for clarity.
The action of the exponential gives rise to Condition I5. Indeed, con- sider a pair (φ, π) ∈ (℘+P )N (C)= (℘+PC)C × ℘+P (C ⊕ 1) and an injection ı : C → D. Then for (φ', π')= (℘+P )N (ı)(φ, π), we have that
⎧⎨ ℘+P ı(φc)	, if d = ı(c)

φ'(d) =
⎩ ℘+P (d/νC)ı π , otherwise
and	π' = ℘+P (ı ⊕ 1)π


Indexed labelled transition systems
The model considered above is concerned with describing early bisimulation. The model of name passing introduced by Cattani and Sewell [1] captures the finer early congruence. Their model consists of certain indexed labelled transition systems, called N -LTSs. The axioms that these are required to satisfy are suggested according to experience and intuition, rather than being induced from mathematical structure as in our case. However, their axioms essentially match up with ours. The main difference highlights the relationship between early bisimulation and early congruence.
The indexing category of Cattani and Sewell [1] is the category F of finite subsets of N and all functions between them. From this viewpoint, it is natural for them to require the following axioms, which make explicit use of non-injective renamings.
N 2a. (input – new) for any z /∈ C

C ▶ p
−c?→z
C ∪ {z} ▶ p'	=⇒  ∀d ∈ C. C ▶ p
−c?→d
C ∪ {d}▶ [d/z]p'


N 2b. (input – old)

C ▶ p
−c?→d
C ▶ p'	=⇒ ∀z /∈ C. ∃p'' ∈ P (C ∪ {z}).

p'' = [z/d]p' ∧ C ▶ p
−c?→z
C ∪ {z} ▶ p''

These axioms are not satisfied in the context of early bisimilarity. For instance, consider the processes


pi = a(x). if x = a then a¯⟨a⟩ else a¯⟨d1⟩
+ a(x). if x = a then a¯⟨b⟩ else a¯⟨d2⟩
+ a(x). if x = a then a¯⟨c⟩ else a¯⟨di⟩

(i = 1, 2)

where we write ‘a(x).p’ for ‘input a name on channel a, binding it to x in p’; ‘a¯⟨x⟩’ for ‘output the name x on channel a’; and ‘+’ for nondeterministic sum. The state graphs of the pi (i = 1, 2), with the transition a?x representing all transitions for which x /= a, are given by
,, , • ¸¸¸¸¸¸

,,,, 
¸¸ ¸¸¸¸¸¸¸¸¸¸

,a?a,a?x 
a?a a?x¸	a?a¸a¸?x¸¸¸

,,,,,,
J  ¸¸vz
¸¸¸¸ ¸¸¸¸¸¸¸

•   ,•  s	•	•
¸¸z• ˛
¸z• 

a!a
•J 
a!d1
•J 
a!b
•J 
a!d2
•J 
a!c
•J 
a!di
•J 

which, up to early bisimilarity, minimise to the following one
,,,, p ¸¸¸¸¸¸¸¸¸
,,	¸ ¸
,,,a?a a?a a?a a?x¸¸¸a?x¸¸¸¸

p  ,, ,
a ¸¸¸¸
p , s J 
b ¸¸	c
¸z 
pd1
¸¸¸zp ˛
,, d2

¸¸	¸
,,,,

a!a¸¸¸a!b¸¸ a!c a !d1,,a!d2
¸¸¸¸zzJ˛ , ,,s , ,
nil
yielding an I-LTS (according to Definition 1.1) but not an N -LTS (accord- ing to Cattani and Sewell), as it does not satisfy axiom N 2b. If it did sat- isfy the axiom then, for C = {a, b, c, d1, d2} and z /∈ C, we must have some

p' = [z/a]p , p'
= [z/a]p , and p'
= [z/a]p , with C ▶ p
−a→?z
C ∪ {z} ▶ p' ,

a	b
c	c	a

C ▶ p
−a→?z
C ∪ {z} ▶ p' , and C ▶ p
−a→?z
C ∪ {z} ▶ p' . The only possibili-

ties are (p' = pd , p' = pd , p' = pd ) for i, j, k ∈ {1, 2}. Recall that N -LTSs
a	i	b	j	c	k
admit renaming by all functions. In particular, we can then consider the re-
traction [a/z] : (C ∪ {z}) → C, acting as identity on C and mapping z to a.

Now, we have that
[a/z]pdi = pa	[a/z]pdj = pb	[a/z]pdk = pc
Since i, j, k ∈ {1, 2} it follows that two of the states in {pa, pb, pc} are equal, which is not the case.
Conditions N 2a and N 2b require that ‘if one name can be input then so can any other’, but they also ensure that the input behaviour is parametric in the input data. In this way, they serve to strengthen our Condition I2. Furthermore, an N -LTS over a presheaf X : F → Set is precisely an I-LTS over the underlying presheaf I > F −X→ Set that satisfies Conditions N 2a
and N 2b in addition to the conditions of Figure 1. That is to say, the other axioms on an N -LTS are equivalent to our axioms I1 and I3–I6. In the journal version of their paper, Cattani and Sewell have introduced a class Ninj-LTS of indexed labelled transition systems for presheaves over I. An Ninj-LTS that satisfies Condition I2 is precisely an I-LTS.

From presheaves to sheaves: refining the model

The Schanuel topos.  Consider a presheaf P ∈ SetI. For p ∈ P (D) and an inclusion D ⊆ D', we have an element [D ‹→ D']p ∈ P (D'). Intuitively, it does no harm to assume that a process ‘uses’ more names than it actually does. Furthermore, it may be that D itself contains more names than p actually ‘uses’, that is to say, perhaps there exists C ⊆ D and p' ∈ P (C) with [C ‹→ D]p' = p.
We can also identify the names that an element p ∈ P (D) uses by observing how the injections act on it. For instance, if every automorphism of D that fixes (i.e. does not move) all of C ⊆ D also fixes p, then we expect that p only ‘uses’ the names in C. More generally, we have the following notion of support.
Definition 3.1 A name-set C ⊆ D supports an element p ∈ P (D) if and only if, for all ı, j : D → E in I, whenever ı T C = j T C then [ı]p = [j]p.
Given the intuitions discussed earlier, one would expect that if C supports p ∈ PD, then p would ‘exist uniquely’ in PC. This is precisely the sheaf condition for the atomic topology:
[Sheaf condition] Whenever C ⊆ D supports p ∈ P (D), there exists a unique q ∈ P (C) with [C ‹→ D]q = p.
That is, the statement “C supports p” defines a ‘compatible family’ and the


sheaf condition requires that it has a ‘unique gluing’ at C. For our pur- poses, this is a sensible condition to impose. The full subcategory Sh(Iop) of presheaves satisfying this condition is known as the Schanuel topos.
We briefly recall the analysis of the Schanuel topos given by Fiore [3]. Let B be the category of all finite name-sets and bijections; i.e., the groupoid underlying I. For P ∈ SetI, define a presheaf ⟨P ⟩∈ SetB with
⟨P ⟩(C) = ⎧⎨ p ∈ P (C)	∀ C0 ⊆ C. ∀ p0 ∈ P (C0).	⎫⎬
⎩	[C0 ‹→ C]p0 = p =⇒ C0 = C ⎭

and, conversely, from Q ∈ SetB generate a presheaf Q! ∈ SetI by freely acting on the canonical inclusion maps as follows:
Q!(C) = Σ Q(C')	,	Q!(ı)(C', q) = (im(ı), Q(ı T C')(q))
C'⊆C
These processes are mutually inverse: For any sheaf P in the Schanuel topos, we have that ⟨P ⟩! ∼= P .
The construction (−)! extends to a functor SetB → SetI, left adjoint to the forgetful functor |−| : SetI → SetB, and the Schanuel topos is (equivalent to) the Kleisli category arising from this adjunction. Thus, the sheaves in the Schanuel topos can be equivalently considered as presheaves in SetB.

B-indexed labelled transition systems
The early behaviour endofunctor Be : SetI → SetI restricts to an endofunctor on the Schanuel topos, and it thus makes sense to discuss Be-coalgebras in this subcategory. In particular, we now ask which transition systems over presheaves in SetB should be considered.
Definition 3.2 A B-indexed labelled transition system (B-LTS) is a presheaf Q ∈ SetB together with a transition relation −→ ⊆ Q × Lab × Q satisfying the axioms in Figure 2.
We have the following result relating the two notions of indexed labelled transition systems introduced.
Theorem 3.3 For sheaves P in the Schanuel topos, the following are equiv- alent.
B-indexed labelled transition systems over ⟨P ⟩.
I-indexed labelled transition system over P.



Fig. 2. Requirements on a B-indexed labelled transition system.
From a B-L∫TS to an I-L∫TS: let −→ ⊆ ∫⟨P ⟩× Lab × ∫⟨P ⟩ be a B-LTS and


D ▶ [C ‹→ D]p
−→l
! D ∪ (dat l) ▶ [C' ‹→ (D ∪ dat l)]p'

whenever C ▶ p
−→l
C' ▶ p'

From an I∫-LTS to a B-L∫TS: let −→ ⊆ ∫ P × Lab ×∫ P be an I-LTS and define


C ▶ p ⟨−→l
⟩ C' ▶ p'	whenever	D ▶ q
−→l
D' ▶ q'

where p ∈ ⟨P ⟩(C) with P (C ‹→ D)p = q and p' ∈ ⟨P ⟩(C') with P (C' ‹→ D')p' =
q'.

History dependent automata
Another approach to operational models of name-passing process calculi is provided by the History Dependent Automata of Montanari and Pistore [7]. The novelty of history dependent automata is to work within a category of ‘named-sets’.
Named-sets with symmetries. There is a variety of categories of named- sets, e.g. [2,7]. Here, we consider named-sets with symmetries as introduced by Pistore in his thesis [7, Chapter 7].
Definition 4.1 A named-set with symmetries (X, f ) is given by a set X equipped with a map f : X → SubGrp(Sym(N )) where SubGrp(Sym(N )) is the set of all subgroups of the symmetric group Sym(N ) on the countable set of names N .


From such a named-set (X, f ) one can recover a notion of support. Say that C ⊆ N supports x ∈ X if whenever a permutation σ fixes C then it is in f (x). That is, C supports x ∈ X if
∀σ ∈ Sym(N ). (∀c ∈ C. σ(c)= c) =⇒ σ ∈ f (x)
We will write supp(x) for the least support of x ∈ X, whenever it exists. We restrict attention to those named-sets in which every element has finite support.
Definition 4.2 The category fsNSet has as objects finitely-supported named- sets with symmetries. A morphism m : (X, f ) → (X',f ') is given by a func-
tion m : X → X' together with, for each x ∈ X, an equivalence class [ξ]∼
x
for ξ ∈ Sym(N ) such that ξ−1 · f (x) · ξ ⊆ f '(mx), with respect to the equiva- lence ∼x that identifies σ and σ · τ for all σ ∈ Sym(N ) and τ ∈ f '(mx).
The following result is the main step towards relating the models.
Theorem 4.3 The category fsNSet of ﬁnitely-supported named-sets with sym- metries is equivalent to the Schanuel topos Sh(Iop).
Recall from Section 3 that to give a sheaf in Sh(Iop) is to give a presheaf in SetB. Accordingly, to (X, f ) ∈ fsNSet we associate a presheaf Q : B → Set as follows:

QC = { (x, σ) | x ∈ X, σ : supp(x) →∼
with ∼ the equivalence relation given by
(x, σ) ∼ x, σ · (τ T supp(x)) 
C }/∼

for all τ ∈ f (x), where im(τ T supp(x)) = supp(x). For any [x, σ] ∈ QC and
σ' : C → C' in B, let Qσ'[x, σ]= [x, σ' · σ].
This mapping is essentially surjective, in the usual sense that for any presheaf Q ∈ SetB there exists some named-set (X, f ) mapping (as above) to a presheaf isomorphic to Q. Indeed, consider X = Q /≈, where ≈ is the equivalence relation with (C, p) ≈ (C', p') iff there exists σ : C → C' such that [σ]p = p'. For ρ : X → Q a fixed retraction of the quotient map, define f by setting

f (x)= ⎧⎨ σ ∈ Sym(N )

and
im(σ T π1(ρx)) = π1(ρx)	⎫⎬

⎩

for all x ∈ X.
Q(σ T π1(ρx))(π2(ρx)) = π2(ρx) ⎭


The above mapping from finitely-supported named-sets with symmetries to presheaves over B extends to a full and faithful functor fsNSet → Sh(Iop).
(An important observation is that for any natural transformation α : P →.  P '
in Sh(Iop), if C' supports p ∈ P (C) then C' also supports αC(p) ∈ P '(C).)

History dependent automata as B-indexed labelled transition systems
Recall that a history dependent automaton is given by a named-set of states P , a named-set of transitions T , a named-set of labels L equipped with mappings src, tar : T → P and lab : T → L in fsNSet respectively giv- ing the source, target, and label of a transition. We fix a named-set of la- bels L as appropriate for the current scenario, with natural transformations ch, dat : L → ℘N as before. By Theorem 4.3 we can consider these named-sets and mappings as sheaves and natural transformations.
We impose some restrictions (Figure 3) on history dependent automata, so as to consider those particularly suited to the early semantics of the π-calculus. Conditions H1 and H2 are similar to Conditions I1 and I2 on I-LTSs (Fig- ure 1) and Conditions B1 and B2 on B-LTSs (Figure 2). Condition H3 amounts to considering transition systems rather than transition graphs, whilst Condition H4 fixes the support of transitions according to their source, target, and label.

Fig. 3. Requirements on a history dependent automaton.

Theorem 4.4 For a sheaf P in the Schanuel topos the following are equiva- lent.


A history dependent automaton with states P satisfying the conditions of Figure 3.
A B-indexed labelled transition system on ⟨P ⟩.
From such a history dependent automata we can derive a transition relation
−→ ⊆	⟨P ⟩× Lab ×	⟨P ⟩ with


C ▶ p
−→l
C' ▶ p'

whenever there exists D ∈ I and t ∈ T (D) with srcD(t) = P (C ‹→ D)p,
tarD(t)= P (C' ‹→ D)p', and labD(t)= l.
Conditions H3 and H4 ensure that the transition relation is induced by at most one history dependent automaton. The naturality of src, tar, lab will ensure that the transition relation satisfies Condition B3. Conditions H1 and H2 ensure that the transition relation satisfies Conditions B1 and B2.
From a B-LTS −→ ⊆ ⟨P ⟩× Lab × ⟨P ⟩ we derive a history dependent automaton. Let T (C) be the set
  (D, p), l, (D', p') ∈ −→ | D ∪ D' ⊆ C,

Then src, tar, lab are the corresponding projections followed by inclusions.
Naturality is given by Condition B3.

Concluding remarks

Related work. One of the referees drew to our attention the work of Gad- ducci, Miculan, and Montanari [6], who have independently established an analogous result to our Theorem 4.3 for a variant of named-sets similar to that considered by Ferrari, Montanari, and Pistore [2]. One important dif- ference in this variant of named-sets is that having finite support becomes a property rather than a requirement.
Minimisation. Final coalgebra semantics gives rise to minimisation tech- niques (by finding a sequence of coalgebras leading to the final one) closely related to partition refinement techniques. This has been investigated for name-passing systems as related to history dependent automata [2]. For the coalgebras considered here, one of the primary barriers against implemen- tation is that the set of elements of a presheaf in SetI is typically infinite. However, those presheaves that would be considered in, for example, the fini- tary π-calculus, are ﬁnitely presentable. In that case, a suitable presentation


is given via the equivalence between the Schanuel topos and the category of named-sets with symmetries.
Rule formats. Throughout the present work we have not considered how the coalgebra, transition system, or automaton is initially defined. In practice, transition relations are often defined over terms using structural induction over rules. We have preliminary results (following the approach of [5]) on syntactic rules that induce transition systems satisfying axioms such as those in Figures 1 and 2, as well as on a generalisation of GSOS rule formats for name-passing process calculi that guarantee bisimilarity to be a congruence.

References
Cattani, G. L. and P. Sewell, Models for name-passing processes: Interleaving and causal, Information and Computation 190 (2004), pp. 136–178. (Extended abstract in Proc. LICS’00.)
Ferrari, G., U. Montanari and M. Pistore, Minimising transition systems for name passing calculi: A co-algebraic formulation, in: Proc. FoSSaCS’02 (2002), pp. 129–158.
Fiore, M. P., Notes on combinatorial functors, Draft (January 2001).
Fiore, M. P., E. Moggi and D. Sangiorgi, A fully abstract model for the π-calculus, Information and Computation 179 (2002), pp. 76–117. (Extended abstract in Proc. LICS’96.)
Fiore, M. P. and D. Turi, Semantics of name and value passing, in: Proc. LICS’01 (2001), pp. 93–104.
Gadducci, F., M. Miculan and U. Montanari, About permutation algebras and sheaves (and named sets, too!), Research Report UDMI/26/2003/RR, University of Udine (2003).
Pistore, M., “History Dependent Automata,” Ph.D. thesis, University of Pisa (1999).
Stark, I., A fully abstract domain model for the π-calculus, in: Proc. LICS’96 (1996), pp. 36–42.
