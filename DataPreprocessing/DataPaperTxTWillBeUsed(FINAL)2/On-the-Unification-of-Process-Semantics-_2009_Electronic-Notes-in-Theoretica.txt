

Electronic Notes in Theoretical Computer Science 249 (2009) 243–267
www.elsevier.com/locate/entcs

On the Unification of Process Semantics: Equational Semantics
David de Frutos Escrig1 ,3	Carlos Gregorio Rodr´ıguez 2 ,4
Miguel Palomino1 ,5
Departamento de Sistemas Informticos y Computacin Universidad Complutense de Madrid

Abstract
The complexity of parallel systems has produced a large collection of semantics for processes, a classification of which is provided by Van Glabbeek’s linear time-branching time spectrum; however, no suitable unified definitions were available. We have discovered the way to unify them, both in an observational framework and by means of a quite small set of parameterized (in)equations that provide a sound and complete axiomatization of the preorders that define them. In more detail, we have proved that we only need a generic simulation axiom (NS ), which defines the family of constrained simulation semantics, thus covering
the class of branching time semantics, and a generic axiom (ND ) for reducing the non-determinism of processes, by means of which we introduce the additional identifications induced by each of the linear time semantics.
Keywords: processes, linear time-branching time spectrum, equational semantics, uniform presentation.


Introduction
In order to study the behavior of concurrent processes, many different semantics have been proposed. Most of them are defined starting from the interleaving model, where the essence of concurrent computation collapses into that of non-deterministic processes, modeled by means of labeled transition systems. Most of the popular semantics in that category appear in Van Glabbeek’s linear time-branching time spectrum [13]. They were introduced by different authors, using different semantic frameworks; see Figure 1.

1 Partially supported by the MCyT project DESAFIOS TIN2006-15660-C02-02 and the project PROMESAS-CAM S-0505/TIC/0407.
2 Partially supported by the MCyT project WEST TIN2006-15578-C02.
3 Email: defrutos@sip.ucm.es
4 Email: cgr@sip.ucm.es
5 Email: miguelpt@sip.ucm.es

1571-0661 © 2009 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2009.07.093

(B) bisimulation (RS) ready simulation
possible worlds

(CS) complete simulation	(RT) ready trace
(FT) failure trace	(R) readiness

(F) failure
simulation	(CT) complete trace

trace

Fig. 1. Semantics in the linear time-branching time spectrum.
In his paper, Van Glabbeek aims for a uniform presentation of all these seman- tics by using three different approaches (the observational or testing framework, the logical one, and the algebraic characterization of the semantics) which provide sufficiently general frameworks to present them. Once in a uniform setting, it is much easier to compare the discriminating power of the different semantics, as is done in the lattice representation of the spectrum. All of these frameworks can be used to characterize not only the equivalences induced by the semantics but also the corresponding natural preorders, that in the logical presentation correspond to the “satisfy more formulas than” relation.
Even under a common framework, the semantics in the spectrum appear to be haphazardly defined and distributed in it. In this paper we aim to show that this is not the case: every process semantics can be understood as the combination of two “design decisions” that define what we have called the dynamic and the static behavior of processes.
By means of our unification we expect to cover the following three main goals:
a new presentation of the spectrum of the process semantics justifying the special interest of some of these semantics and clarifying the relations among them;
a uniform presentation of the semantics that allows to prove results simultane- ously for all of them;
finally, we complete the picture with some “lost” semantics which, either were proposed by other authors after the publication of Van Glabbeek’s spectrum, or are introduced for the first time in this paper (as far as we know).
Our unification process has its roots in our coinductive characterizations [3,5] of the semantics in the spectrum by means of (bi)simulations up-to, that characterize both the equivalences and the preorders that define them. In particular, the dynamic component is closely related with simulations. In [6] we were able to unify the definitions of different simulation semantics, by means of constrained simulations, and to describe a generic axiom that characterizes all of them.

Similarly, there is also a single axiom defining the static or non-deterministic component of the semantics. In this case the number of choices for constraints is larger so that we obtain several semantics under the same simulation part. The uni- fying framework arises because two basic axioms parametrized conveniently suffice to define all the classic semantics in the spectrum, as well as many others.
We have also found a unified observational framework [7] where branching obser- vations correspond to simulation semantics while linear ones capture the remaining. In order to emphasize the axiomatic aspect, we have chosen to devote the next three sections of this paper to relate the new equational framework with the known one, and then in Section 5 to briefly introduce the joint presentation of the two new unified frameworks.

Preliminaries
As is customary when studying algebraic characterizations of semantics, we will concentrate here on the study of finite processes. We will thus consider the basic process algebra BCCSP, that has repeatedly been used to algebraically represent that class of processes; in particular, in [13].
Definition 2.1 Given a set of actions Act, the set BCCSP(Act) of processes is defined by the following BNF-grammar:
p ::= 0 | ap | p + q
where a ∈ Act; 0 represents the process that performs no action; for every action in Act, there is a prefix operator; and + is a choice operator.
The operational semantics for BCCSP terms is defined by:

ap  a  p
p −a→ p'

p + q  a  p'
q −a→ q'
p + q  a  q'

We write p  a
α
if there exists a process q such that p  a
∗
q and extend it to define

=⇒ for arbitrary traces α ∈ Act , as usual.
Many different semantics for these non-deterministic processes have been de- fined in the literature. The most important and popular semantics appear in Van Glabbeek’s spectrum [13]. One indirect way to capture any semantics is by means of the equivalence relation induced by it: given a formal semantics ·), we say that processes p and q are equivalent iff they have the same semantics, that is, p ≡ q ⇔ p) = q). Also, these semantics can be defined by means of adequate observational scenarios, or by logical characterisations that introduce natural pre- orders whose kernels are the semantic equivalences.
Both equivalences and preorders have been axiomatized for most of these sce- narios, as shown in [13], but in some cases only finite conditional axiomatization are possible, as discussed in [2]. In particular, bisimilarity can be axiomatized by

means of the four simple axioms:
(B1) x + y  y + x	(B3) x + x  x
(B2) (x + y)+ z  x + (y + z)	(B4) x + 0  x
These axioms state that the choice operator is commutative, associative and idem- potent, having the empty process as identity element. These axioms also justify the
use of the notation Σa Σi api for processes, where the commutativity and associa-
tivity of the choice operator is used to group together the summands whose initial
action is a. We will also write p|a for the (sub)process we get by projecting all the
a-summands of p; that is, if p = Σa Σi api , then p|a = Σi api .
The initial offer of a process is the set I(p)= {a | a ∈ Act and p  a	. This is
−→}
a simple, but quite important observation function that plays a central role in the definition of the most popular semantics in the linear time-branching time spectrum. We will also denote by I the relation expressing the fact that two processes have the same initial offer: pIq (or I(p, q)) ⇔ I(p)= I(q).
Throughout the paper there appear different order relations. We use ± to de- note semantic preorders (behavior preorders) and, for the sake of simplicity, we use the symbol ± to represent the preorder relation ±−1. With ≡ we denote the corre- sponding equivalence (that is, ± ∩ ±). To refer to a specific preorder in the linear time-branching time spectrum we shall append the initials of the intended semantics as subscripts to the symbol ± (±RS for ready simulation, ±F for failures and so on). A similar convention applies to the kernels of the preorders (≡RS, ≡F , .. .) and to the bisimulation equivalence ≡B. We use the symbols ≤ and  for the inequalities and equations, respectively, of the algebraic calculus by means of which we axioma- tize the semantics. We write E ▶ t ≤ u or E ▶ t  u for the (in)equations that can be derived from the (in)equations in E using the standard rules of (in)equational logic, where the symmetry rule can be applied in the equational derivations, but not in the inequational ones.
Lastly we recall our definition of behavior preorder [3], which is the adequate notion to compare processes when all actions can be observed.
Definition 2.2 A preorder relation ± over processes is a behavior preorder if
it is weaker than bisimilarity, i.e. p ≡B q ⇒ p ± q, and
it is a precongruence with respect to the prefix and choice operators, i.e. if p ± q
then ap ± aq and p + r ± q + r.

A new axiomatization of the most popular semantics
As we have already hinted in the introduction, the dynamic part of the semantics is governed by the preorder generated by a simulation. On the one hand, bisimilarity is too strong for this purpose because its symmetric definition gives rise to an equivalence rather than a preorder; on the other hand, plain similarity is too weak because most popular semantics are not coarser than simulation equivalence. By contrast, ready similarity is a quite strong relation which can be easily defined as a

simulation that only relates processes with the same set of initial actions.
Definition 3.1	(i) A simulation S is a relation between processes such that when-
ever pSq and p  a  p', there exists some q  a  q' such that p'Sq'. We say that
process p is simulated by q, or that q simulates p, when there is a simulation
S containing (p, q); then, we write p ±S q.
An I-simulation S is a simulation included in I, that is, S ⊆ I. I-simulations are also called ready simulations and we write p ±RS q whenever there is some I-simulation S such that (p, q) ∈ S.
Given an arbitrary constraint N relating pairs of processes, an N -simulation, sometimes simply called constrained simulation if N is understood from the context, is a simulation which only relates pairs in N . We write p ±NS q whenever there is some N -simulation S such that (p, q) ∈ S.
Obviously, ordinary and ready simulations are particular cases of constrained simulations; other classes will be considered later in the paper.
Proposition 3.2 (i) Plain similarity can be axiomatically deﬁned by means of the axiom (S) x ≤ x + y, together with the axioms B1–B4 that deﬁne bisimilarity.
Ready similarity can be axiomatically deﬁned by means of the conditional axiom (RS) I(x, y) ⇒ x ≤ x + y, together with B1–B4. It can also be axiomatized by means of the axiom scheme ax ≤ ax + ay, where a represents an arbitrary action.
Whenever N is a behavior preorder, N-similarity can be axiomatically deﬁned by means of the conditional axiom (NS) N (x, y) ⇒ x ≤ x + y, together with B1–B4.
Proof. See [13,6].	 
Let us now consider the diamond of semantics coarser than ready similarity in the spectrum. It consists of the failures, readiness, failure traces, and ready trace semantics. None of them is a simulation semantics, so their classic axiomatizations contain an additional component:

Since we are interested in capturing the reduction of non-determinism, our first candidate for a general axiom covering all cases was (FT ), which captures the fact that by delaying the choices we get “smaller” processes. However, since this axiom characterizes the failure trace semantics and this is finer than failure semantics, a more general axiom is needed: axiom (F ) became our next proposal because failure semantics is the coarsest of the four semantics. More precisely, we expected

to achieve the axiomatization of the four semantics in the diamond by means of concrete instances of the parameterized conditional axiom
(ND )	M (x, y, w) ⇒ a(x + y) ≤ ax + a(y + w) .
The conjecture turned out to be correct and the semantics in the diamond can be characterized by the following instances:
(NDF )	MF (x, y, w) ⇐⇒ true
(NDR)	MR(x, y, w) ⇐⇒ I(x) ⊇ I(y)
(ND FT )	MFT (x, y, w) ⇐⇒ I(w) ⊆ I(y)
(ND RT )	MRT (x, y, w) ⇐⇒ I(x)= I(y) and I(w) ⊆ I(y)
Since MF is the universal relation containing all triples of processes, the cor- responding instance of the conditional axiom (ND) is clearly equivalent to (F ). Let us now prove that the remaining three semantics are also axiomatized by the corresponding instances of the axiom (ND ) together with (RS).
Proposition 3.3	(i) The readiness preorder ±R is axiomatized by {B1–B4, (RS), (NDR)}.
The failure traces preorder ±FT is axiomatized by {B1–B4, (RS), (ND FT )}.
The ready traces preorder is axiomatized by the set {B1–B4, (RS), (ND RT )}.
Proof.
Let us show that the set {B1–B4, (RS), (NDR)} is logically equivalent to {B1–B4, (RS), (R)}. By taking x ::= bx' + u, y ::= by, and w ::= v we have that (NDR) implies (R). In the other direction, let x and y be arbitrary closed BCCSP terms with I(y) ⊆ I(x): we will prove by structural induction on y that {B1–B4, (RS), (R)} ▶ a(x + y) ≤ ax + a(y + w), for any term w.
For y = 0, we have a(x + y)  ax ≤ ax + a(y + w), by application of (RS).
For y = by' + y'', it must be x = bx' + x'' and taking v ::= y'' + w in (R) we obtain a(x + y) = a(bx' + by' + x'' + y'') ≤ a(x + y'')+ a(y + w). We then have I(y'') ⊆ I(x) and we can apply the induction hypothesis to get
{B1–B4, (RS), (R)} ▶ a(x + y) ≤ ax + a(y + w).
Let us show that the set {B1–B4, (RS), (ND FT )} is logically equivalent to
{B1–B4, (RS), (FT )}. The implication from left to right follows by taking w ::= 0. In the other direction, let w and y with I(w) ⊆ I(y), so that a(x+y) ≤ ax + ay using (FT ) and, since I(y)= I(y + w), we have y ≤ y + w using (RS): hence, a(x + y) ≤ ax + a(y + w).
Let us show that the set {B1–B4, (RS), (ND RT )} is logically equivalent to
{B1–B4, (RS), (RT )}. We first note that {B1–B4, (RS), (RT )} is equivalent to
{B1–B4, (RS), (RT≥)}, where (RT≥) is the axiom MRT (x, y, w) ⇒ ax + ay ≥ a(x + y). This follows from the fact that, whenever I(x) = I(y), we can use (RS) to get x ≤ x + y and y ≤ x + y, and then ax + ay ≤ a(x + y). Now, the implication from left to right follows by taking w ::= 0. From right to left, as

above, whenever I(w) ⊆ I(y) we have y ≤ y + w and then, if I(x)= I(y) we have a(x + y) ≤ ax + ay and thus a(x + y) ≤ ax + a(y + z).

Throughout this paper we are only considering ground complete axiomatizations for proving inequalities relating BCCSP terms. We leave for future work the study of the existence of ω-complete axiomatizations along the lines of [2].
Certainly, the use of arbitrary conditions in the axioms could be objected to since they can be used to hide the complexity of the semantics; however, the conditions needed to axiomatize the semantics in the spectrum are very simple. In any case, our main interest lies in obtaining a uniform presentation of the axiomatizations that simplifies their algebraic study.
Corollary 3.4	(i) ±FT is axiomatized by the set {B1–B4, (RS), (ND FT )}, where
(ND FT ) is the instance of (ND FT ) where w is 0.
(ii) ±RT is axiomatized by {B1–B4, (RS), (ND RT )}, where (ND RT ) is the instance
0	0
of (ND RT ) where w is 0.
Proof. Note that for the proof of Proposition 3.3 only the case w = 0 is needed. 
Even if the simplifications above are possible, we prefer to maintain the general forms of axioms (ND FT ) and (ND RT ) to keep all axiomatizations as similar as possible, which will come in handy when proving general properties of the semantics.
Corollary 3.5	(i) ±F can be axiomatized by the axioms {B1–B4, (NDF )}.
(ii) ±R can be axiomatized by the axioms {B1–B4, (NDR)}.
Proof. Note that (NDF ) implies (RS) and therefore (NDR) implies (RS), by taking
y ::= 0 and w ::= y.	 
Note that the axiom controlling the reduction of non-determinism has been presented as an inequational axiom. Certainly, it cannot simply be replaced by the corresponding equation since, in general, it is not true that ax + ay  a(x + y). However, the two dimensions corresponding to (RS) and (NDX) that control the “increase” of a process with respect to a preorder ≤ are not orthogonal; for example, a(x + y) ≤ a(x + y)+ ax can be derived both by an application of (NDFT ) and of (RS). As a consequence of the relation between these two axioms, if (RS) is assumed then the inequational axiom (ND) can be substituted by its (stronger) equational form
(ND≡)	M (x, y, w) ⇒ ax + a(y + w)+ a(x + y)  ax + a(y + w) .
As above, we write (NDX) for the concrete instances of this axiom for X ∈ {F, R,
FT, RT}.
Proposition 3.6	(i) The set of axioms {B1–B4, (RS), (ND)} is logically equiva- lent to {B1–B4, (RS), (ND+)}, where (ND+) is the axiom
M (x, y, w) ⇒ ax + a(y + w)+ a(x + y) ≤ ax + a(y + w) .

(ii) {B1–B4, (RS), (ND+)} is logically equivalent to {B1–B4, (RS), (ND≡)}.
Proof.
We only need to prove the implication from right to left, since the other follows from ≤ being a precongruence. For that, from (RS) we get a(x + y) ≤ a(x + y)+ ax + a(y + w) whence, using (ND+), a(x + y) ≤ ax + a(y + w).
We only need to prove that, if M (x, y, w), then
{B1–B4, (RS), (ND+)}▶ ax + a(y + w) ≤ ax + a(y + w)+ a(x + y) ,
which follows from (RS).

This result can be interpreted as saying that the only way to “enlarge” a process is by enhancing its possible behaviors by means of the “dynamic” simulation axioms; the static rules, (ND) and its variants, instead simply generate new identifications among processes.
Actually, any complete axiomatization of a preorder that contains the axiom (RS) can be turned into an equivalent axiomatization by replacing every inequality u ≤ v by u + v  v.
Proposition 3.7 Let Q = {B1–B4, (RS)} ∪ Q' be an axiomatization of ± ⊆ I. Then, the equational variant of Q, Q= = {B1–B4, (RS)}∪ {M ⇒ u + v  v | M ⇒ u ≤ v ∈ Q'} is also an axiomatization of ±.
Proof. Analogous to the particular case considered in Proposition 3.6 above, which we have preferred to present before because it corresponds to the most important instance of the general result for this paper.	 

The coarsest semantics in the spectrum
In the bottom part of the spectrum we find the simulation semantics coarser than ready simulation: plain and complete simulation, and the semantics coarser than these. For the simulation semantics we obtain the corresponding axiomatizations simply by considering the universal constraint for the case of plain simulations and the complete constraint for complete simulations:
Simulation	U (x, y) ::= true
Complete simulations C(x, y) ::= (x = 0 ⇐⇒ y = 0)
What about trace and completed trace semantics? It turns out that they can be defined by simply adding our axiom (NDF )!
Proposition 4.1  (i) ±T is axiomatized by the axioms 6 {B1–B4, (S), (NDF )}.
±CT is axiomatized by the axioms {B1–B4, (CS), (NDF )} where (CS) is the instantiation of (NS) taking C(x, y) as N (x, y).

6 Note that (S) is equivalent to (US ), the instantation of (NS ) with N = U .

Proof.
The classic axiomatization of trace semantics is given by {B1–B4, (S), (T )}, where (T ) is the axiom ax + ay  a(x + y). Note that {B1–B4, (S), (T )} is logically equivalent to {B1–B4, (S), (T±)}, where (T±) is the axiom a(x + y) ≤ ax + ay, because (S) can be used to obtain ax ≤ a(x + y) and ay ≤ a(x + y). And it is immediate that (NDF ) implies (T±). Also, {(S), (T±)} ▶ a(x + y) ≤ ax + a(y + w), since a(x + y) ≤ ax + ay by (T±) and ax + ay ≤ ax + a(y + w) by (S).
Analogous to the previous case once we realize that the classic axiom for com- plete traces, (CT ) a(bx + u)+ a(cy + v)  a(bx + cy + u + v), is equivalent to the conditional axiom C(x, y) ⇒ ax + ay  a(x + y). This follows because bx + u and cy + v are two independent patterns describing non-null processes and when the condition is instantiated with x and y equal to 0 the identity is trivial: a0 + a0  a0.

By an analogous argument to that in Proposition 3.6 we can obtain for ±T the axiomatization {B1–B4, (S), (NDF )}. Note that although (NDF ) is an equation,
≡	≡
this axiomatization is not the classic one; obviously, (T ) ax + ay = a(x + y) implies
(NDF ), but the converse is false.
It is easy to check that in the case of trace semantics, the particular instance (ND0) of the axiom (ND) with w equal to 0 is powerful enough to generate the trace preorder. This was certainly not the case when we were under ready simulation, where (ND0) just generates the failure trace preorder instead of the coarser failures preorder.
It is also interesting to note that for trace semantics the symmetric version of (ND),
(NDvw)	a(x + y) ≤ a(x + v)+ a(y + w) ,
is also valid, so we can take both {B1–B4, (S), (NDvw)} and {B1–B4, (S), (ND≡ )},

where

(ND≡ )	a(x + v)+ a(y + w)+ a(x + y)  a(x + v)+ a(y + w) ,

as alternative axiomatizations of the trace preorder.
Should we expect another diamond of “reasonable” semantics under plain sim- ulation in the spectrum? Were that to be the case, why have we only found trace semantics?
In order to answer these questions, note that the diamond of semantics under ready simulation was completely governed by the function I, which appears in the constraints of the different instantiations of the axiom (ND). For plain simulations, however, the trivially true predicate U (x, y) corresponds to the observation function that can see nothing. As a consequence, if we substitute U for I in each of the four constraints of the diamond they all collapse into a single one: trace semantics. Nevertheless, an alternative can be explored to obtain new semantics: let us keep the different axioms NDX the way they stand and simply replace (RS) by (S).

Proposition 4.2 {B1–B4, (S), (ND FT )} is another axiomatization of trace seman- tics. Hence, under (S) the failures and the failure trace axioms generate the same preorder, namely the trace preorder.
Proof. {B1–B4, (S), (ND0)} is a complete axiomatization of trace preorder, and (ND0) is a particular case of (ND FT ).	 
The axioms corresponding to readiness and ready traces, however, give rise to two new semantics that we shall name extended ready and extended ready trace semantics. They are defined taking into account the offers of the processes, either at the end of a trace or after each action within it: in order to have p ±ER q, for
each p =α  p' with I(p')= R we need some q =α  q' with I(q') ⊇ R; the extended
ready trace preorder ±ERT is defined analogously, but using ready traces.
Proposition 4.3 (1) The set {B1–B4, (S), (NDR)} is an axiomatization of ±ER;
the set {B1–B4, (S), (ND RT )} is an axiomatization of ±ERT .
Let us now consider the versions of the axioms (NDR), (ND FT ), (ND RT ) where the constraint I has been replaced by the completeness condition C defined by C(x) ⇔ x = 0:
(C-NDR)	MCR(x, y, w) ⇐⇒ (C(x) ⇒ C(y))
(C-NDFT )	MCFT (x, y, w) ⇐⇒ (C(y) ⇒ C(w))
(C-NDRT )	MCRT (x, y, w) ⇐⇒ (C(x) ⇐⇒ C(y) and C(y) ⇒ C(w))
Once again, we only obtain three alternative axiomatizations of the complete trace semantics.
Proposition 4.4 The following axiomatizations are equivalent: 1) {B1–B4, (CS), (NDF )}; 2) {B1–B4, (CS), (C-NDR)}; 3) {B1–B4, (CS), (C-ND FT )}; 4) {B1–B4, (CS), (C-ND RT )}.
Proof. Clearly, (1) ⇒ (2) ⇒ (3) ⇒ (4) and therefore it is enough to prove that
(4) ⇒ (1). If x and y are not 0 we can apply (C-ND RT ) to obtain the inequality in (NDF ). If x is 0 but y is not, we need to obtain ay ≤ a0+a(y+w). By (CS) we have y ≤ y + w and then ay ≤ a(y + w); applying (CS) again, a(y + w) ≤ a(y + w)+ a0 and thus ay ≤ a0 + a(y + w). If y is 0 but x is not, we need to obtain ax ≤ ax + aw, which results from an immediate application of (CS). Finally, if both x and y are 0, a0 ≤ a0 + aw.	 
As before, if we only consider the original axioms (NDR), (ND FT ), and (ND RT ) we obtain, together with an alternative axiomatization of the complete trace se- mantics, two new semantics.
Proposition 4.5 The axiomatization {B1–B4, (CS), (ND FT )} is logically equiva- lent to {B1–B4, (CS), (NDF )}. Hence, under (CS), the failures and the failure trace axioms generate the same semantics.


Simulation axiom	N (x, y) ⇒ x ≤ x + y
Non-determinism axiom	M (x, y, w) ⇒ a(x + y) ≤ ax + a(y + w)
M (x, y, w)
Table 1
Axiomatization for semantics coarser than ready simulation

Proof. It is enough to prove that (C-NDFT ) can be derived from {B1–B4, (CS), (NDF )}.
If y is 0 we then have w equal to 0 and can apply (ND FT ).
If y is not 0 we can apply (ND FT ) to obtain a(x + y) ≤ ax + ay and then (CS) to conclude that a(x + y) ≤ ax + a(y + w).

By contrast, as happened also for plain simulations, under (CS) the axioms of the ready semantics generate two slightly different versions of the extended ready and extended ready trace semantics introduced before, that we call extended com- plete ready and extended complete ready trace semantics. In order to have p ±ECR q, whenever p =α⇒ p' with I(p') /= ∅ we require some q =α⇒ q' with I(q') ⊇ I(p'), but if I(p') = ∅ then the corresponding q' also has to satisfy I(q') = ∅. The extended complete ready trace preorder ±ECRT is defined in an analogous way, starting from the ready traces of the processes.
Table 1 presents a first snapshot of the generic axiomatization of the semantics coarser than ready simulation.

Relating the new observational and equational frame- works
In our companion paper [7] we have presented the new unified observational frame- work that allows us to characterize all the semantics in the spectrum by either branching or linear observations. They are defined as follows:
Definition 5.1 The sets LN of local observations corresponding to each of the constrained simulations in the spectrum, and LN (p) of observations associated to a

bgo1	bgo2



{b}
{a}
a 
, s 

¸¸¸a z 
{b}
{a}
Ja 
{b}

b J 
Jb 
b 
 , s
¸¸¸b z 

{c}	{d}	{c}	{d}

Fig. 2. Two branching observations

process p, are defined as follows:
Plain simulation: LU = {·}, LU (p)= ·.
Ready simulation: LI = P(Act), LI (p)= I(p).
Complete simulation: LC = Bool, LC(p) is true if I(p)= ∅ and false otherwise.
Trace simulation 7 : LT = P(Act∗), LT (p)= T (p), the set of traces of p.
2-nested simulation: LS = {[[p]]S | p ∈ BCCSP}, LS(p) = [p]]S, where [p]]S
represents the class of p with respect to the simulation semantics.
Definition 5.2 (i) Given a constraint N , a branching general observation of a process for that constraint is a finite, non-empty tree whose arcs are labeled with actions in Act and whose nodes are labeled with local observations from LN ; the corresponding set BGON is recursively defined as:
⟨l, ∅⟩ ∈ BGON for every l ∈ LN .
⟨l, {(ai, bgoi) | i ∈ 1..n}⟩ ∈ BGON for every n ∈ IN, ai ∈ Act and bgoi ∈
BGON .
The set BGON (p) of branching general observations of p corresponding to the constraint N is
BGON (p)= {⟨LN (p), S⟩ | S ⊆ {(a, bgo) | bgo ∈ BGON (p'),p −a→ p'}} .
We write p ≤b q if BGON (p) ⊆ BGON (q).
In Figure 2 some simple examples of bgo’s for N = I are shown. We have repre- sented bgo1 as ⟨{a}, {(a, ⟨{b}, {(b, ⟨{c}, ∅⟩)}⟩), (a, ⟨{b}, {(b, ⟨{d}, ∅⟩)}⟩)}⟩ and bgo2 as
⟨{a}, {(a, ⟨{b}, {(b, ⟨{c}, ∅⟩), (b, ⟨{d}, ∅⟩)}⟩)}⟩. We use braces for the set of children of a node, parentheses to represent a branch of the tree as a pair (initial arc, subtree below), and angle brackets to represent each tree as a pair ⟨root, children⟩.
We have already proved in [7] that N -simulation semantics can be characterized by means of branching observations in BGON . Since the natural way of defining the simulation semantics is by means of constrained simulations and we proved in [6] that they can be axiomatized by the corresponding instance of the generic simulation axiom (NS), we do not consider necessary to also present a direct proof of the axiomatizations in terms of these semantics.

7 Trace simulations can be defined as T -simulations, with T (x, y) ::= T (x)= T (y).

The observational characterization of the remaining semantics, except for pos- sible futures, is achieved by means of linear observations:
Definition 5.3	(i) The set lBGON of linear branching general observations for a local observer LN is the subset of BGON defined as:
⟨l, ∅⟩ ∈ lBGON for each l ∈ LN .
⟨l, {(a, lbgo)}⟩, whenever a ∈ A and lbgo ∈ lBGON .
(ii) The set of linear observations of a process p with respect to the local observer
LN is LGON (p)= BGON (p) ∩ lBGON .
Since lbgo’s are linear they can be presented as decorated traces, avoiding the sets of descendants in the general bgo’s. Therefore, we will consider them as ele- ments of the set LN × (Act × LN )∗. Moreover, it would be easy to generate the set LGON (p) by means of SOS rules; this is not possible, however, for BGON (p), due to the branching nature of its elements.
Proposition 5.4 The set LGON (p) of linear general observations of a process p is recursively deﬁned by LGON (p) ::= {⟨LN (p)⟩} ∪{⟨LN (p), a⟩◦ LGON (p') | p −a→ p'}, where ◦ is the extension to sets of sequence concatenation.
Alternatively, and as usually done for decorated traces semantics, we could have described the set LGON (p) as the computations defined by a structural operational semantics; this is an important difference with respect to the constrained simula- tion semantics due to their branching nature. For N = I the set LGOI (p) defines the ready traces of p and the corresponding semantic order arises from set inclu- sion. Therefore, to characterize the related coarser semantics we need to introduce suitable loose orders.
Definition 5.5 For T , T ' ⊆ LGON we define the orders ≤l , ≤l⊇, ≤lf , and ≤lf⊇:


T ≤l
T ' ⇐⇒ T ⊆ T '.
N	N	N	N

T ≤l⊇ T ' ⇐⇒ ∀X0a1X1 ... Xn ∈T ∃Y0a1Y1 ... Yn ∈T ' ∀i ∈ 0..n Xi ⊇ Yi.
T ≤lf T ' ⇐⇒ ∀X0a1X1 ... Xn ∈T ∃Y0a1Y1 ... Yn ∈T ' Xn = Yn.
T ≤lf⊇ T ' ⇐⇒ ∀X0a1X1 ... Xn ∈T ∃Y0a1Y1 ... Yn ∈T ' Xn ⊇ Yn.

We will use ≤lY
to denote in a generic way any of the orders obtained with Y ∈

{⟨empty⟩, ⊇, f,f ⊇}. Then, we write p ≤lY
q if LGON (p) ≤lY
LGON (q).

By abuse of notation, we have used the superset inclusion symbol ⊇ in the definitions above for all N . That is the right interpretation for the cases N = I, T ; for N = U, C the subset inclusions degenerate to equalities. For N = S, it should be interpreted as [p]]S ≥S [[q]]S. Then, it is easy to see that we could have used such an inequality [p]]N ≥N [[q]]N in all cases. We have proved in [7] that the orders ≤lY with Y ∈ {⟨empty⟩, ⊇, f,f ⊇} characterize the semantics in the diamonds coarser than each of the corresponding N -simulations semantics; we then define l(F )= lf ⊇, l(FT )= l⊇, l(R)= lf , and l(RT )= l.
To simply use set inclusion to compare the sets of observations of processes,

appropriate closures can be defined.
Definition 5.6 For T ⊆ LGON , the following three closures are defined:
T ⊇ = {X a X ... a X  | ∃Y a Y ... a Y  ∈T ∀i ∈ 0..n X ⊇ Y }.
T f = {X a X ... a X  | ∃Y a Y ... a X  ∈T }.
T f ⊇ = {X a X ... a X  | ∃Y a Y ... a Y  ∈T X  ⊇ Y }.
Then, if Y ∈ {⊇, f,f ⊇}, for p ∈ BCCSP and N a constraint, we define LGOY (p)= 
Y
LGON (p) .

Proposition 5.7 For all Y ∈ {⊇, f,f ⊇}, T ≤lY
T ' iff
T Y ⊆ T
'Y .

Let us now see how, from this uniform definition of the linear semantics, the proofs of the correctness and completeness of the corresponding axiomatizations can be obtained in a generic way avoiding the case analyses of Sections 3 and 4. Although this could be done generically, with N ∈ {U, C, I, T }, we prefer to start with the particular case N = I, which corresponds to the most popular semantics, already studied in Section 3. To start with, we show how the axiomatizations can be synthetized from the observational characterizations.
Our general axiom (ND) for the reduction of non-determinism specifies the hy- pothesis M (x, y, w) under which the process ax + a(y + w) can be (syntactically) expanded by adding a new summand a(x+y) without changing its semantics. Then, let us compare the two sides of our general axiom. Since I(ax + a(y + w)) = I(ax)= I(a(y + w)) = {a}, we have
LGOI (ax + a(y + w)) = LGOI (ax) ∪ LGOI(a(y + w)) ,
LGOI (a(y + w))	= {⟨{a}⟩} ∪
{⟨{a}, a,I(y + w)⟩◦ S | ⟨{a}, a,I(y)⟩◦ S ∈ LGOI (ay) ∨
⟨{a}, a,I(w)⟩◦ S ∈ LGOI (aw)} .
Notice then that the observations of a(y + w) are exactly those of ay + aw simply replacing I(y) or I(w), respectively, appearing in the expression above, by I(y + w) = I(y) ∪ I(w). Obviously, the same relation exists between the global observations of a(x + y) and those of ax + ay.
Now, in order to get the adequate condition MX(x, y, w) for each of the seman- tics, let us examine the formulas that define the preorders ≤lY :
≤l . To have LGOI (a(x + y)) ⊆ LGOI (ax) ∪ LGOI (a(y + w)) it is enough to require {⟨{a}, a,I(x) ∪ I(y)⟩◦ S | ⟨I(x)⟩◦ S ∈ LGOI (x)} ⊆ {⟨{a}, a,I(x)⟩◦ S |
⟨I(x)⟩◦ S ∈ LGOI (x)} and {⟨{a}, a,I(x) ∪ I(y)⟩◦ S | ⟨I(y)⟩◦ S ∈ LGOI (y)} ⊆ 
{⟨{a}, a,I(y) ∪ I(w)⟩◦ S | ⟨I(y)⟩◦ S ∈ LGOI (y)}. Thus, a first proposal for MRT
would be
I(y) ⊆ I(x) ∧ I(x)= I(y) ∪ I(w) .
However, due to the fact that this axiom will be used in combination with (RS),

the following, more restrictive but simpler form, can be used instead:
MRT (x, y, w) ::= I(x)= I(y) ∧ I(w) ⊆ I(y) .
Clearly, this form is stronger than the condition synthetized above. Reciprocally, a(x + y) ≤ ax + a(y + w) can be proved from the assumptions I(y) ⊆ I(x) and I(x)= I(y) ∪ I(w) using (RS) first to get a(x + y) ≤ a(x + y + w), and then (ND ) instantiated with MRT to obtain a(x + y + w) ≤ ax + a(y + w).
≤l⊇. We need the inclusion LGO (a(x + y))⊇ ⊆	⊇

I	I	LGOI (ax + a(y + w))
to hold.

Since I(x) ∪ I(y) ⊇ I(x), the general observations in a(x + y) that arise from
l⊇
x will be also in LGOI (ax)  . For those that arise from y, it is required that
I(x)∪I(y) ⊇ I(y)∪I(w). Once again, (RS) can be used to simplify this condition into the simpler
MFT ::= I(w) ⊆ I(y) .
The less restrictive variant of the axiom can be derived from the stronger one and (RS) as follows. Taking w ::= 0, since I(0) ⊆ I(y) we obtain a(x + y) ≤ ax + ay from (ND FT ); in particular, a(x + y + w) ≤ ax + a(y + w). Also, by (RS), x + y ≤ (x + y)+ (x + y + w), from where it follows a(x + y) ≤ a(x + y + w).
≤lf	f	f

I . We consider the inclusion LGOI (a(x + y))
⊆ LGOI (ax + a(y + w))
f
. We

only have to consider the lgo ⟨{a}, a,I(x) ∪ I(y)⟩ in LGOI (a(x + y))  and show
f
that it also belongs to LGOI (ax + a(y + w)) , since all lgo’s of length greater
than 1 start with the prefix ⟨{a}, a⟩. For that, either I(x) ∪ I(y) = I(x) or I(x) ∪ I(y) = I(y) ∪ I(w), that is, I(y) ⊆ I(x) or I(x) ∪ I(y) = I(y) ∪ I(w). Again, we can remove the second condition and define
MR ::= I(y) ⊆ I(x)
since, whenever I(x) ∪ I(y)= I(y) ∪ I(w), a(x + y + w) ≤ ax + a(y + w) can be obtained by taking x ::= y + w, y ::= x, and w ::= 0, and then by applying (RS) we conclude a(x + y) ≤ ax + a(y + w).
≤lf⊇. An argument analogous to the previous one leads us to I(x) ∪ I(y) ⊇ I(x) or I(x) ∪ I(y) ⊇ I(y) ∪ I(w), which is trivially true.
In order to prove the completeness of our axiomatizations we introduce the following notions of head normal forms.

Definition 5.8 For p = Σ
normal form hnf X (p) is:

a∈X0
Σi∈Ia
api
and X ∈ {F, R, FT, RT}, its X-head

For a ∈ X0, i ∈ Ia, and X1 ⊆	I(pi ) such that I(pi ) ⊆ X1, we define

hnf X(p, a, i, X )= a(pi + Σ{pj |	| j /= i, M
(pi , pj |
, pj |
)}.

hnf X(p)= p + Σa∈X
Σi∈I
ΣX ⊆S I(pi ) hnf X(p, a, i, X1).

It is clear that several redundancies arise in this definition: for example, if
X = RT then hnf X (p, a, i, X1) = hnf X (p, a, i, I(pi )), so that the argument X1 would not be needed in this case. We prefer to maintain the generic definition in order to allow a homogeneous treatment of all the semantics.

Proposition 5.9 If X ∈ {RT, FT, R, F }, {B1–B4, (RS), (NDX )}▶ hnf X(p) ≤ p.
Proof. Let p = Σ	Σ	api . By the definition of hnf X (p, a, i, X ), if pj1
is a summand that contributes to it then, since M  (pi , pj1 |	, pj1 |	) holds, we
X	a	a X1	a X1
have {B –B , (RS), (NDX)} ▶ a(pi + pj1 |	) ≤ api + apj1 . Now, if pj2 is another
1	4	a	a X1	a	a	a
summand, it is easy to check that M  (pi + pj1 |	, pj2 |	, pj2 |	) also holds and
X	a	a X1	a X1	a X1

then {B –B , (RS), (NDX)} ▶ a(pi
+ pj1 |
+ pj2 |
) ≤ a(pi + pj1 |	)+ apj2 ;

1	4	a
a X1
a X1
a	a X1	a

combining it with the previous derivation, {B –B , (RS), (NDX )}▶ a(pi + pj1 |	+
1	4	a	a X1
pj2 |	) ≤ api + apj1 + apj2 . By repeating this procedure for all summands we obtain

a X1
a	a	a

{B1–B4, (RS), (NDX )} ▶ hnf X(p, a, i, X1) ≤ p|a. Finally, adding these inequalities leads us to {B1–B4, (RS), (NDX)}▶ hnf X(p) ≤ p.	 
In order to apply structural induction to prove the completeness of the axiom-

atizations we need that, whenever p = Σ

a∈X0
Σi∈Ia
api
and p ≤l(X) q, there is a

summand ahk of hnf X(q) such that pi ≤l(X) hk for each a ∈ Act, i ∈ Ia.
a	a	I	a

Proposition 5.10 Let X ∈ {F,F T, R, RT }, and let p = Σ

a∈X0
Σi∈Ia
api , and

q = Σ
Σ	aqj . If p ≤l(X) q then there exists a summand ahk
of hnf X(q)

such that pi
≤l(X) hk.

a	I	a
Proof. We need to show that LGO (pi )l(X) ⊆ LGO (hk )l(X) but, due to the

l(X)
I	a	I	a
i

fact that ( )
is a closure operator [7], it is enough to prove just LGOI (pa) ⊆

k l(X)	i
i	l(X)	j

LGOI (ha )	. For ⟨I(pa)⟩ ∈ LGOI (pa), since p ≤I	q there is some qa such that

⟨I(pi )⟩∈ 
j l(X); we then consider hnf X(q, a, j, I(pi )) = ahk.

a	LGOI (qa)	a	a

If t ∈ LGO (pi ) then ⟨I(p), a⟩◦ t ∈ LGO (p) ⊆
l(X)
and there exists j

I	a	I
LGOI (q)	t

such that t ∈
l(X)
jt	. In addition, M
(qj , qjt |
, qjt |	):

LGOI (qa )
X  a a
I(pi )


a I(pi )

If X = RT , then t ∈ LGO (qjt ) and therefore I(qjt ) = I(pi ) = I(qj ). Hence,
I  a	a	a	a
M	(qj , qjt |	i , 0), and therefore M	(qj, qjt |	i , qjt |	).

RT	a  a I(pa)

jt ⊇
RT	a
a I(pa)
a I(pi )
jt	jt

If X = FT , from t ∈ LGOI(qa )	it follows that I(qa ) ⊆ I(pa ) and therefore
I(qjt |	)= ∅⊆ I(qjt |	i ). Hence, M	(qj , qjt |	i  , qjt |	).

a I(pi )
a I(pa)
FT	a
a I(pa)
a I(pi )

f
If X = R, from ⟨I(pi )⟩ ∈	j	i	j
a	LGOI (qa)	we have that I(pa) = I(qa) and thus
I(qjt |	i ) ⊆ I(qj ) and M (qj , qjt |	i , qjt |	).

a I(pa)	a
R  a a
I(pa)
a I(pi )

For X = F it is trivial since MF (x, y, w) is always true.
Therefore qjt is one of the summands of hk and, since t ∈


l(X)
jt	, we have

a	a	LGOI (qa )
pi ≤l(X) hk .	 
a	I	a
Theorem 5.11 (Soundness and completeness) For all X ∈ {RT, FT, R, F },
p ≤l(X) q iff {B1–B4, (RS), (NDX )}▶ p ≤ q.
Proof. (Soundness) The axiomatizations are sound because of the way they have been derived.

(Completeness) By structural induction on p.
If p = 0, then p ≤l(X) q implies that q is 0.
If p = Σ	Σ	api , then p ≤l(X) q implies that there exists a summand
ahk of hnf X (q) such that pi ≤l(X) hk as indicated above. By induction hypoth-
a	a	I	a
esis, {B1–B4, (RS), (NDX)} ▶ pi  ≤ hk and therefore {B1–B4, (RS), (NDX)} ▶ 
api ≤ ahk; adding all these inequalities and using (RS), which is allowed be-
cause I(p)= I(q), it follows that {B1–B4, (RS), (NDX)} ▶ p ≤ hnf X (q) and, by Proposition 5.9, {B1–B4, (RS), (NDX )}▶ p ≤ q.

The semantics that are not coarser than ready simu- lation
Once we have a clear picture of the semantics that are coarser than ready simulation, it is time to consider the rest of the semantics in the spectrum. Let us start with the possible futures, already discussed in [13], and the impossible futures semantics [14].
Definition 6.1  (i) The possible futures semantics is defined as: p ±PF q if for
all p =α  p' there exists q =α  q' with T (p')= T (q').
(ii) The impossible futures semantics is defined as: p ±IF q if for all S ⊆ P(Act∗), if p =α⇒ p' with T (p') ∩ S = ∅ then there exists q =α⇒ q' with T (q') ∩ S = ∅.
The first definition above is that of readiness semantics but replacing the function I with T . Although less evident, the same is the case for impossible futures and the failures semantics (see [7]). We have in fact shown that they can be described
by LGOT observations so that they are defined by ≤lf⊇ and ≤lf respectively.
T	T
Next we introduce the T -versions of our (NDX) axioms: all of them are in- stances of our general axiom for reduction of non-determinism and therefore are defined by the adequate constraint MT (x, y, w). As expected, they are obtained by substituting every occurrence of I in MX(x, y, w) by the observer T defining the traces of processes.

Definition 6.2 The constraints MT
that characterize the semantics coarser than

T -simulation semantics are:
(T-NDF )	MT (x, y, w) ⇐⇒ true
(T-NDR)	MT (x, y, w) ⇐⇒ T (x) ⊇ T (y)

(T-ND FT )	MT
(T-NDRT )	MT
(x, y, w) ⇐⇒ T (w) ⊆ T (y)
(x, y, w) ⇐⇒ T (x)= T (y) and T (w) ⊆ T (y)

Note that the last two semantics do not appear in Van Glabbeek’s spectrum and, as far as we know, they have not been previously studied nor defined. We

ignore whether they will be of practical interest in the future but, nonetheless, we have decided to include them for the sake of completeness.

By the same arguments as in Section 5 we can prove that ≤l(X)
satisfies the

axiom (T-NDX ) for X ∈ {RT, FT }. However this is not the case for X ∈ {R, F }
due to the following proposition.
Proposition 6.3 (MT (x, y, w) implies T (a(x + y)) = T (ax + a(y + w))) iff X ∈

{RT, FT }.
Proof. MT

implies MT

, and therefore T (y + w)= T (y), which leads to T (ax +

a(y + w)) = T (a(x + y)). Neither MT
nor MT
refer to w and therefore, in general,

T (ax + a(y + w)) /= T (a(x + y)) in those cases.	 
Note that when proving the correctness of the corresponding axiom (NDX ) for

l(X)
I
we had in all cases I(a(x + y)) = {a} = I(ax + a(y + w)). Now we have

T (a(x+y)) = T (ax+a(y +w)) only under the constraints corresponding to the finer
semantics ±FT and ±RT . The properties of the prefixes appearing in all the terms in both sides of the axiom (ND) are not used anymore in the proofs in Section 5, so they can be transferred to the T -semantics thus proving the correctness of (T-NDX )
for both ≤l(RT ) and ≤l(FT ).
T	T
The introduction of the equational versions (ND≡) of the axiom (ND) now be-
comes crucial in order to preserve the genericity of our unifying study of the concur- rency semantics. We saw that under (RS) these axioms were equivalent. However, since now we are observing the set of traces T (x) of any process instead of just the initial offer I(x), we consider T -simulations constrained by T (x, y) ::= T (x)= T (y); under the corresponding axiom (TS), things are different.
Proposition 6.4 T (a(x + y)+ ax + a(y + w)) = T (ax) ∪ T (ay) ∪ T (aw)= T (ax +
a(y + w)).
As a consequence, for (T-NDX ) and (T-ND≡), we can follow the same reasonings used in Section 5 to show that (NDX ) was satisfied by ≤X.
Proposition 6.5 For X ∈ {RT, FT, R, F }, the preorder ≤l(X) satisﬁes the axiom
(T-NDX) and also (T-NDX ).
+	≡
Proof. To show that ≤l(X) satisfies (T-NDX) we just need to apply Proposition 6.4
T	+
and follow the line of thought in the second bullet on page 15, substituting the
observer T for I. For the other axiom, from T (a(x + y)) ⊆ T (ax + a(y + w)) it follows that {(TS)}▶ ax + a(y + w) ≤ (ax + a(y + w)) + a(x + y).	 
Notice that for X ∈ {RT, FT } we can also obtain the correctness of (T-NDX )
from that of (T-NDX ) and vice versa, as a consequence of the following fact.
Proposition 6.6 The axiomatization {B1–B4, (TS), (T-NDX )} is equivalent to the axiomatization {B1–B4, (TS), (T-NDX)} for X ∈ {RT, FT }.
Proof. Let us first show that {B1–B4, (TS), (T-NDX )} is equivalent to {B1–B4,
(TS), (T-NDX)}. This holds because (T-NDX) implies (T-NDX ) and, since T (w) ⊆
+	+

T (y) implies T (a(x + y)) = T (ax + a(y + w)) and then we have {B1–B4, (TS)} ▶ 
a(x + y) ≤ a(x + y)+ (ax + a(y + w)).
To prove {B1–B4, (TS), (T-NDX )} equivalent to {B1–B4, (TS), (T-NDX)} we
+	≡
only need to show that {B1–B4, (TS), (T-NDX)}▶ (MT (x, y, w) ⇒ ax+ a(y + w) ≤
+	X
ax + a(y + w)+ a(x + y)), but we have that for X ∈ {RT, FT }, MT (x, y, w) implies
T (w) ⊆ T (y), so that T (a(x + y)) = T (ax + a(y + w)) and therefore {(TS)} ▶ 
ax + a(y + w) ≤ (ax + a(y + w)) + a(x + y).	 
The important fact about the obtained sets of correct axioms for the seman-

tics ≤l(X)
is that, although our proofs of completeness for the axiomatizations

{B1–B4, (RS), (NDX )} considered the inequational axioms (NDX), they were also valid for the axiomatizations {B1–B4, (RS), (NDX )}.
The steps in the procedure that leads to the completeness of {B1–B4, (RS), (NDX )} can be adapted by substituting each reference to the observer I by T ,
thus obtaining a proof of the completeness of {B1–B4, (RS), (T-NDX )} for ≤l(X).
≡	T
However, the notion of head normal form for N = I uses the fact that the summands
hnf X(q, a, i, X1) can be defined in terms of the offers X1 ⊆ P(Act), which correspond to the values produced by the observer I. For an arbitrary N , a more general definition of hnf’s, valid for every observer, is needed.

Definition 6.7 For p = Σ
form tehnf X(p) is:

a∈X0
Σi∈Ia
api , its totally expanded X-head normal

For a ∈ X0, i ∈ Ia, and Ka ⊆ Ia we consider a decomposition pk = pk1 +
pk2 such that MN (pi , pk1 , pk2 ). Then, tehnf X (p, a, i, ⟨(pk1 , pk2 )⟩k∈K ) = a(pi +

Σk∈Ka
pk1 ).
X	a	a	a
N	a	a	a	a

tehnf X(p)= Σ tehnf X(p, a, i, ⟨(pk1 , pk2 )⟩k∈K ).
It is clear that for K' ⊆ Ka, or a decomposition pk = pk3 + (pk4 + pk2 ) with
a	a	a	a	a
pk1  = pk3 + pk4 , the corresponding tehnf X (.. .) is a subterm of tehnf X(p, a, i,
a	a	a	N	N
⟨pk1 , pk2 ⟩k∈K ) and thus contributes nothing to the expanded normal form. This is
a	a	a
the reason why we preferred the more compact definition of hnf X(p) for semantics coarser than ready simulation.
Theorem 6.8 For X ∈ {RT, FT, R, F }, {B1–B4, (TS), (T-NDX)} ▶ p ≤ q if and
only if p ≤l(X) q.
The extended spectrum can be depicted as in Figure 3, where all implications are immediate from the axiomatizations of the corresponding semantics.

On the real diamond structure
Focusing on the diamonds coarser than each of the branching semantics in the extended spectrum, it would be natural to expect them to have the structure of a lattice. In particular, failure semantics would be the greatest lower bound of the readiness and failure traces semantics while ready traces semantics would be the

B

2S	NewNew


TSNewNew


RSPWRT

New


New


FT



New


PF


R


New


IF


F


CSNew	CT

New	T

Fig. 3. Semantics in the new linear time-branching time spectrum.
corresponding lowest upper bound. Nevertheless, both intuitions are false and a semantics finer than failures and another coarser than ready traces can be found.
Let us first consider the case of the glb. We postulate the axiomatization of the corresponding semantics to be the conjuction of the two conditions MR and MFT , to obtain
MR∧FT (x, y, w) ⇐⇒ I(x) ⊇ I(y) and I(w) ⊆ I(y).
We denote with ±R∧FT the order axiomatized by the corresponding axiom (NDR∧FT ).

Definition 7.1 The readiness and failure traces semantics is defined by the order
±R∧FT generated by the set of axioms {B1–B4, (RS), (NDR∧FT )}.
Proposition 7.2 The ready traces semantics is strictly ﬁner than the readiness and failure traces semantics.
Proof. ±RT ⊆ ±R∧FT is an immediate consequence of Proposition 3.3 and the fact that condition MRT implies both MR and MFT , and hence also MR∧FT . To show that ±RT /⊆ ±R∧FT , let us take w ::= 0, y ::= b, and x ::= bB' + c; then:
a(bB + bB' + c) ±R∧FT a(bB' + c)+ abB
`	˛¸	x	`	˛¸	x
but, if I(B) /= I(B'),
a(bB + bB' + c) /±RT a(bB' + c)+ abB
because {a}a{b, c}bI(B) ∈ ReadyTraces(p) \ ReadyTraces(q).	 
It is clear that the readiness and failure traces semantics is finer than both the readiness and the failure traces semantics; to show that it is actually the coarsest upper bound we need to prove that ±R∧FT = ±R ∩ ±FT , which cannot be easily done with algebraic arguments. Instead, it is trivial to obtain the observational characterization of the desired semantics by gathering together the failure traces and the ready observations. Based on Definition 5.5, we can define the corresponding

order ≤l⊇∧f by
T ≤l⊇∧f T ' ⇐⇒ T ≤l⊇ T ' and T ≤lf T '.
N	N	N
A nicer characterization can be obtained as follows. We combine both kinds of observations into a single family of traces that we call failure traces with ﬁnal ready sets by considering failure sets all along the trace but at the end of it, where we obtain the exact ready set. Once again, using the notation in Definition 5.5 we can present this characterization as
T ≤l⊇∧f T ' ⇐⇒
∀X0a1 ... Xn ∈T ∃Y0a1 ... Yn ∈T ' (∀i ∈ 0..n − 1 Xi ⊇ Yi) ∧ Xn = Yn.
Proposition 7.3 The semantics deﬁned by the order ±R∧FT coincides with that
deﬁned by ≤l⊇∧f and is thus the lub of the readiness and failure traces semantics.
Proof. Similar to that of Theorem 5.11.	 
The axiomatic characterization of the glb of the readiness and failure traces semantics is much simpler: we simply put together the axioms for the orders defining both semantics.
Definition 7.4 ±R∨FT is the relation defined by the set of axioms {B1–B4, (RS), (NDR), (NDFT )}.
If we define MR∨FT ::= MR ∨ MFT , that is, MR∨FT (x, y, w) holds if I(x) ⊇ I(y) or I(w) ⊆ I(y), we have the following characterization of ±R∨FT .
Proposition 7.5 The order ±R∨FT is generated by the set of axioms {B1–B4, (RS), (NDR∨FT )}, where (NDR∨FT ) is the instantiation of the generic axiom (ND) with MR∨FT .
Proposition 7.6 The semantics deﬁned by the order ±R∨FT is the ﬁnest semantics that is coarser than both the readiness and the failure traces semantics.
Proof. Obvious, since any semantics coarser than the readiness semantics has to satisfy {B1–B4, (RS), (NDR)}, any one coarser than failure traces must satisfy
{B1–B4, (RS), (NDFT )}, and MR∨FT is equivalent to MR ∨ MFT .	 
Once again the semantics defined by ±R∨FT is not present in the ltbt spec- trum and neither in the extended one; in particular, it is different from the failures semantics.
Proposition 7.7 ±R∨FT   ±F .
Proof. The inclusion is obvious since the failures semantics is coarser than both the readiness and the failure traces semantics. To show that the inclusion is strict, note that any two processes related by ±R∨FT do not only have the same failures but also the same revivals, as defined by Reed, Roscoe, and Sinclair [11]. Revivals are sequences a1,... , an(X, a) where a1,... , an is a trace of the corresponding pro- cess after which the action a is offered, but the set of actions X is refused. This is

indeed the case since all the axioms u ≤ v in {B1–B4, (RS), (NDR), (NDFT )} pre- serve the revivals, which means Revivals(σ(u)) ⊆ Revivals(σ(v)) for every ground substitution σ, and the revivals order is a precongruence for the operators in BCCSP. For instance, for (NDFT ) we need to prove that Revivals(σ(a(x + y))) ⊆ Revivals(σ(ax)) ∪ Revivals(σ(a(y + w))) whenever I(σ(w)) ⊆ I(σ(x)). It is clear that the only non-trivial case occurs when a(X, b) ∈ Revivals(σ(a(x + y))); then we have (X, b) ∈ Revivals(σ(x + y)) so that X ∈ Failures(σ(x)) ∩ Failures(σ(y)) and b ∈ I(σ(X)) or b ∈ I(σ(y)). In the first case a(X, b) ∈ Revivals(σ(ax)) whereas, in the second, X ∈ Failures(σ(x + y)) and therefore a(X, b) ∈ Revivals(σ(a(x + y))). The case for (NDR) is simpler. Once we know that ±R∨FT preserves the re- vivals we only need to observe that the revivals cannot be obtained from the fail- ures of a process. In particular, we have ab ±F a + a(b + c), but a({c}, b) ∈ Revivals(ab) \ Revivals(a + a(b + c)).	 
(We warmly thank Bill Roscoe for pointing out to us his works on the stable revivals semantics [11,12], where an endevor for an adequate presentation of the notion of responsiveness for a CSP-like language is made. Responsiveness had been previously studied by Fournet et al. in [9] under the name of stuck-freeness, for CCS.)
The semantics ±R∨FT , though not in the ltbt spectrum, is not completely new since it coincides with the revivals semantics (at least for BCCSP). To prove this, we first give a characterization of the revivals semantics in terms of our observational framework.
Definition 7.8 We define the order ≤l⊇∨f by
T ≤l⊇∨f T ' ⇐⇒

∀X a
... X
∈T ∃{Y a Y
... Y j | j ∈ J }⊆ T ' such that X = 
Y j.

Proposition 7.9 For all p, q ∈ BCCSP, Revivals(p) ⊆ Revivals(q) if and only if LGOI (p) ≤l⊇∨f LGOI (q).
Proof. Note that ≤l⊇∨f can be equivalently defined as
T ≤l⊇∨f T ' ⇐⇒
∀X0a1 ... Xn ∈T ∀a ∈ Xn ∃Y0a1 ... Yn ∈T ' (a ∈ Yn ∧ Yn ⊆ Xn).
Now, since a1 ... an(X, a) ∈ Revivals(p) if and only if there exist X0a1 ... Xn ∈ LGOI (p) such that a ∈ Xn and Xn ∩ X = ∅, we immediately obtain the desired characterization.	 
⊇∨f
Definition 7.10 Given T ⊆ LGON , T	is defined as

T ⊇∨f ::= {X a ... X | ∃{Y a ... Y j | j ∈ J }⊆T with X
=   Y j}.

0 1	n
0 1	n
n	n
j∈J

This clearly indicates that ≤l⊇∨f is in between ≤lf⊇, defining the failures se-
mantics, and ≤lf , defining readiness semantics. This is useful for the proof of the

axiomatic characterization of the revivals semantics.
Theorem 7.11 The revivals semantics deﬁned by ±l⊇∨f can be axiomatized by the
set {B1–B4, (RS), (NDR∨FT )}.
Proof. It is similar to that of Theorem 5.11 for the case of failures semantics and, thus, also similar to the characterization of that semantics by means of acceptance trees [10] (and where the closure of the set of offers with respect to both union and convex closure is a critical argument). In connection to that, recall that the application of the particular case of (NDF ) corresponding to (NDFT ) allowed us to join arbitrary states after the same trace, while that corresponding to (NDR) allowed us to obtain a common continuation after the same action at any state reachable by the same trace. All this can be done now using (NDR∨FT ); however, we cannot add to an arbitrary state an action offered at another state reachable by the same trace since to do that we needed the unlimited strength of axiom (NDF ). 
It is clear that we can generalize most of the results above to any reasonable local observation function such as T or S, once we interpret ⊆ as the corresponding order and = as the induced equivalence. However, in order to define the adequate observational characterization of the revivals semantics for a local observation (or constraint) N , we should look for the adequate “elements” of the universe of obser- vations. This leads us to traces when N is T , but it is not so clear how to define those “elements” for a non-extensional semantics such as that obtained when N is S.
Let us conclude this section with a look to the beautiful picture in Figure 4 showing the real structure of the full (bidimensional!) diamond, that should be included in all the upper levels of the extended ltbt spectrum.

(RS)

(RT)



(FT)	(R)

(R ∨ FT)

(F)
Fig. 4. The real diamond below ready simulation.


Conclusions
Following the algebraic approach, we have proved in this paper that the multiplicity of process semantics can be explained in quite a simple way as the combination of a simulation axiom governed by a constraint N and four versions of another axiom

for reducing non-determinism. As already achieved in our first part of the study devoted to the observational semantics, the classification into branching and linear semantics has been clarified. More importantly, the similarities between all the semantics have been unearthed, allowing a generic study without the need to resort to case analysis proofs.
Using an approach based on the isolation of some simple properties, which are to be satisfied by any “natural” semantics (including, in particular, those in the spectrum), we showed in [5,6] how to to obtain a canonical preorder induced by a process equivalence and how to produce and axiomatization for this preorder from that of the equivalence itself. And combining both algebraic and coinductive approaches we have presented in [4,8] a generalization of the algorithm proposed in
[1] to obtain an axiomatization of the equivalence induced by a preorder from that of the preorder itself.
As future work, it would be interesting to investigate the case in which recursive definitions of processes are available in the language, thus allowing for the possi- bility of infinite processes. Clearly, since all semantics (in the spectrum) are level continuous [3], we could use the “axiom” p ↓n q ↓n ⇒ p q but, definitely, we would like to avoid using the equivalence we are trying to capture in the condition of the axiom. Another interesting direction is that of weak semantics, appropriately taking into account silent transitions, for which we already have some preliminary results.
Summing up, we expect that the universe of process semantics will be clarified by our work, making it easier in the future to develop generic studies with shorter, cleaner, and more elegant proofs.

References
L. Aceto, W. Fokkink, and A. Ing´olfsd´ottir. Ready to preorder: get your BCCSP axiomatization for free! In T. Mossakowski, U. Montanari, and M. Haveraaen, editors, Algebra and Coalgebra in Computer Science. Second International Conference, CALCO 2007, Bergen, Norway, August 20–24, 2007. Proceedings, volume 4624 of Lecture Notes in Computer Science, pages 65–79. Springer, 2007.

L. Aceto, W. Fokkink, A. Ing´olfsd´ottir, and B. Luttik. Finite equational bases in process algebra: Results and open questions. In A. Middeldorp, V. van Oostrom, F. van Raamsdonk, and R. de Vrijer, editors, Processes, Terms and Cycles: Steps on the Road to Infinity: Essays Dedicated to Jan Willem Klop on the Occasion of His 60th Birthday, volume 3838 of Lecture Notes in Computer Science, pages 338–367. Springer, 2005.

D. de Frutos-Escrig and C. Gregorio-Rodr´ıguez. Bisimulation up-to for the linear time-branching time spectrum. In M. Abadi and L. de Alfaro, editors, CONCUR 2005 — Concurrency Theory: 16th International Conference, CONCUR 2005, San Francisco, CA, USA, August 23–26, 2005. Proceedings, volume 3653 of Lecture Notes in Computer Science, pages 278–292. Springer, 2005.
D. de Frutos-Escrig and C. Gregorio-Rodr´ıguez. Algebraic and coinductive characterizations of semantics provide general results for free (short extended abstract). In E. Johnsen, O. Owe, and
G. Scheneider, editors, 19th Nordic Workshop on Programming Theory, pages 96–98, 2007.
D. de Frutos-Escrig and C. Gregorio-Rodr´ıguez. Simulations up-to and canonical preorders (extended abstract). In R. van Glabbeek and M. Hennessy, editors, Structural Operational Semantics SOS 2007, volume 192(1) of Electronic Notes in Theoretical Computer Science, pages 13–28. Elsevier, 2007.

D. de Frutos-Escrig and C. Gregorio-Rodr´ıguez. Universal coinductive characterizations of process semantics. In 5th IFIP International Conference on Theoretical Computer Science, volume 273 of Springer Science and Business Media, pages 397–412. Springer, 2008.


D. de Frutos Escrig, C. Gregorio-Rodr´ıguez, and M. Palomino. On the unification of semantics for processes: observational semantics. In M. Nielsen, A. Kucera, P. Bro Miltersen, C. Palamidessi, P. Tuma, and F. Valencia, editors, SOFSEM 09: Theory and Practice of Computer Science. 35th International Conference on Current Trends in Theory and Practice of Computer Science, S˘pindler˚uv Ml´yn, Czech Republic, January 24–30, 2009, Proceedings, volume 5404 of Lecture Notes in Computer Science, pages 279–290. Springer, 2009.
D. de Frutos Escrig, C. Gregorio-Rodr´ıguez, and M. Palomino.  Ready to preorder: an algebraic and general proof. Journal of Logic and Algebraic Programming, 2009. To appear. doi:10.1016/j.jlap.2008.09.001 .
C. Fournet, T. Hoare, S. K. Rajamani, and J. Rehof. Stuck-free conformance. In R. Alur and D. A. Peled, editors, Computer Aided Verification. 16th International Conference, CAV 2004, Boston, MA, USA, July 13–17, 2004. Proceedings, volume 3114 of Lecture Notes in Computer Science, pages 242–
254. Springer, 2004.
M. Hennessy. Algebraic theory of processes. MIT Press, 1988.
J. N. Reed, A. W. Roscoe, and J. E. Sinclair. Responsiveness and stable revivals. Formal Aspects of Computing, 19:303–319, 2007.
A. W. Roscoe. Revivals, stuckness and the hierarchy of CSP models. Journal of Logic and Algebraic Programming, 78(3):163–190, 2009.
R. J. van Glabbeek. The linear time-branching time spectrum I: The semantics of concrete, sequential processes. In J. A. Bergstra, A. Ponse, and S. A. Smolka, editors, Handbook of process algebra, pages 3–99. North-Holland, 2001.
M. Voorhoeve and S. Mauw. Impossible futures and determinism. Information Processing Letters, 80(1):51–58, 2001.
