Available online at www.sciencedirect.com


Electronic Notes in Theoretical Computer Science 336 (2018) 101–118
www.elsevier.com/locate/entcs

A Stone-type Duality Theorem for Separation Logic Via its Underlying Bunched Logics
Simon Docherty1 and David Pym 2
Department of Computer Science University College London London, United Kingdom

Abstract
Stone-type duality theorems, which relate algebraic and relational/topological models, are important tools in logic because — in addition to elegant abstraction — they strengthen soundness and completeness to a categorical equivalence, yielding a framework through which both algebraic and topological methods can be brought to bear on a logic. We give a systematic treatment of Stone-type duality theorems for the structures that interpret bunched logics, starting with the weakest systems, recovering the familiar Boolean BI, and concluding with Separation Logic. Our results encompass all the known existing algebraic approaches to Separation Logic and prove them sound with respect to the standard store-heap semantics. We additionally recover soundness and completeness theorems of the specific truth-functional models of these logics as presented in the literature. This approach synthesises a variety of techniques from modal, substructural and categorical logic and contextualises the ’resource semantics’ interpretation underpinning Separation Logic amongst them. As a consequence, theory from those fields — as well as algebraic and topological methods — can be applied to both Separation Logic and the systems of bunched logics it is built upon. Conversely, the notion of indexed resource frame (generalizing the standard model of Separation Logic) and its associated completeness proof can easily be adapted to other non-classical predicate logics.
Keywords: Separation logic, bunched logic, substructural logic, program logic, categorical logic, algebraic logic, representation, Stone duality, complex systems, hyperdoctrine, relational semantics, topological semantics, completeness.


Introduction
Bunched logics, beginning with O’Hearn and Pym’s BI [36], have proved to be exceptionally useful tools in modelling and reasoning about computational and information-theoretic phenomena such as resources, the structure of complex sys- tems, and access control [14,15,23]. Perhaps the most striking example is Separation Logic [38,41] (via BI Pointer Logic [31]), a specific theory of first-order Boolean BI with primitives for mutable data structures. Other examples include layered graph

1 Email: simon.docherty.14@ucl.ac.uk
2 Email: d.pym@ucl.ac.uk

https://doi.org/10.1016/j.entcs.2018.03.018
1571-0661/© 2018 The Author(s). Published by Elsevier B.V.
This is an open access article under the CC BY-NC-ND license (http://creativecommons.org/licenses/by-nc-nd/4.0/).



Fig. 1. A layered graph H @E K

logics [14,15,23], modal and epistemic systems [20,26], and Hennessy–Milner-style process logics that have applications in security [15] and systems modelling [16,2].
The weakest bunched systems are the so-called layered graph logics [14,23]. These logics have a multiplicative conjunction that is neither associative nor com- mutative, together with its associated implications, and additives that may be clas- sical or intuitionistic. These systems can be used to describe the decomposition of directed graphs into layers (see Fig 1), with applications such as complex systems modelling (e.g., [14,23]) and issues in security concerning the relationship of policies and the systems to which they are intended to apply (e.g., [15,23]). Strengthen- ing the multiplicative conjunction to be associative and commutative yields BI, for intuitionistic additives, and Boolean BI (BBI), for classical additives. Further extensions include additive and multiplicative modalities and, with the addition of parametrization of modalities on actions, Hennessy–Milner-syle process logics [16,2]. Yet further extensions include additive and multiplicative epistemic modalities [26], with applications in security modelling.
All of the applications of bunched logics to reasoning about computational and information-theoretic phenomena essentially rely on the interpretation of the truth- functional models of these systems known as resource semantics. Truth-functional models of bunched logics are, essentially, constructed from pre- or partially ordered partial monoids [29] which, in resource semantics, are interpreted as describing how resource-elements can be combined (monoid composition) and compared (order). The program logic known as Separation Logic [31,38,41] is a specific theory of first- order Boolean BI (FOBBI) based on the partial monoid of elements of the heap (with the order being simply equality). Separation Logic has found industrial- strength application to static analysis through Facebook’s Infer tool (fbinfer.com). Stone’s representation theorem for Boolean algebras [39] establishes that every Boolean algebra is isomorphic to a field of sets. Specifically, every Boolean algebra A is isomorphic to the algebra of clopen subsets of its associated Stone space [32] S(A). This result generalizes to a family of Stone-type duality theorems which establish equivalences between certain categories of topological spaces and categories of par- tially ordered sets. From the logical point of view, Stone-type dualities strengthen the semantic equivalence of truth-functional (such as BI’s resource semantics or Kripke’s semantics for intuitionistic logic) and algebraic (such as BI algebras or Heyting algebras) models to a dual equivalence of categories. This is useful for

a number of reasons: on the one hand, it provides a theoretically convenient ab- stract characterization of semantic interpretations and, on the other, it provides a systematic approach to soundness and completeness theorems, via the close rela- tionship between the algebraic structures and Hilbert-type proof systems. Beyond this, Stone-type dualities set up a framework through which techniques from both algebra and topology can be brought to bear on a logic.
In this paper, we give a systematic account of resource semantics via a family of Stone-type duality theorems that encompass the range of systems from the layered graph logics, via Boolean BI, to Separation Logic. Our analysis can also be extended to the intuitionistic variants of each logic, variants with additional multiplicatives [6,7,10] and, we conjecture, the modal and epistemic systems described in [20,26]. As corollaries we retrieve the soundness and completeness of the standard truth- functional models in the literature.
Soundness and completeness theorems for bunched logics and their extensions tend to be proved through labelled tableaux countermodel procedures [29,34,20,26] that must be specified on a logic-by-logic basis, or by lengthy translations into auxil- liary modal logics axiomatized by Sahlqvist formulae [12,7,10]. A notable exception to this (and precursor of the completeness result for BBI given in the present work) is [27]. We predict our framework will increase the ease with which completeness theorems can be proved, as the family of duality theorems can be extended in a modular fashion. Our results also yield the equivalence of labelled tableaux sys- tems for bunched logics with sequential proof systems that directly present the algebraic semantics [6], as well as provide a foundation for a direct, Sahlqvist-style notion of canonicity for bunched logics, via the canonical extension construction we employ. More generally, the notion of indexed resource frame (generalizing the stan- dard model of Separation Logic) and its associated completeness proof can easily be adapted to other non-classical predicate logics.
All of the structures given in existing algebraic approaches to Separation Logic
including [13], [24], [21], [8] and [25] — are instances of the structures used in the present work. Thus these approaches are all proved sound with respect to the standard semantics on store-heap pairs by the results of this paper. In particular, we strengthen the result of [3] interpreting Separation Logic in BI hyperdoctrines. To do so we synthesise a variety of related work from modal [33], relevant [1], sub- structural [4] and categorical logic [18]. Much of the theory these areas enjoy is produced by way of algebraic and topological arguments. We hope that by recon- textualizing the resource semantics of bunched logics in this way similar theory can be given for both Separation Logic and its underlying systems.
In Section 2, we introduce LGL, BBI and Separation Logic. In Section 3, we define the algebraic, relational and topological structures suitable for interpreting LGL and BBI and give representation and duality theorems relating them. In Section 4, we strengthen the results of the previous section to Separation Logic by considering FOBBI. We recall how FOBBI can be interpreted on hyperdoctrines and define new structures called indexed resource frames. Crucially, we show that the standard model of Separation Logic is an instantiation of an indexed resource

φ ▶ φ	2.	φ ▶T	3.	⊥▶ φ





10.

13.
η ▶ ψ η ► φ ▶ ψ

η ▶ φ −► ψ
11.

14.

16.


η ∧ φ ▶ ψ
ξ ▶ φ −► ψ	η ▶ φ ξ ► η ▶ ψ
ξ ▶ φ ►− ψ	η ▶ φ η ► ξ ▶ ψ
12.

15.


ξ ► η ▶ φ ► ψ η ► φ ▶ ψ

φ ▶ η ►− ψ

Fig. 2. The LGL Hilbert system, LGLH. In 6. and 8. i = 1, 2.

frame. We show that the semantics on hyperdoctrines and indexed resource frames are equivalent and strengthen this relationship to a dual equivalence of categories. In Section 5, we consider possibilities for further work as a result of the duality theorems. Proofs of the main results of the paper can be found in an extended research note [22].

Preliminaries
Layered Graph Logic
We begin by presenting the classical logic of layered graphs, LGL [14]. The in- tuitionistic version of LGL, ILGL, is presented in [23]. We begin with a formal, graph-theoretic definition of layered graph that, we claim, captures the concept as used in modelling complex systems [14,15,23]. Informally, two layers in a directed graph are connected by a specified set of edges, each element of which starts in the upper layer and ends in the lower layer.
Given a directed graph, G, we refer to its vertex set and its edge set by V (G) and E(G) respectively, while its set of subgraphs is denoted Sg(G), with H ⊆ G iff H ∈ Sg(G). For a distinguished edge set E ⊆ E(G), the reachability relation ~E on Sg(G) is defined H ~E K iff a vertex of K can be reached from a vertex of H by an E -edge. This generates a partial composition @E on subgraphs, with H @E K ↓ (where ↓ denotes definedness) iff V (H)∩V (K)= ∅,H ~E K and K /~E H. Output is given by the graph union of the two subgraphs and the E -edges between them. We say G is a layered graph (with respect to E ) if there exist H, K such that H @E K ↓ and G = H @E K (see Fig 1). Layering is evidently neither commutative nor associative.
Let Prop be a set of atomic propositions, ranged over by p. The set of all



G ▶ p iff G ∈ V(p)	G ▶ T always	G ▶ ⊥ never
G ▶ φ ∧ ψ iff G ▶ φ and G ▶ ψ	G ▶ φ ∨ ψ iff G ▶ φ or G ▶ ψ G ▶ φ → ψ iff G ▶ φ implies G ▶ ψ
G ▶ φ ► ψ iff there exists G1, G2 s.t. G = G1 @E G2, G1 ▶ φ and G2 ▶ ψ G ▶ φ −► ψ iff for all H, G @E H ↓ and H ▶ φ implies G @E H ▶ ψ G ▶ φ ►− ψ iff for all H, H @E G ↓ and H ▶ φ implies H @E G ▶ ψ
Fig. 3. Satisfaction on layered graphs for LGL
formulae of LGL is generated by the following grammar:
φ ::= p |T|⊥| φ ∧ φ | φ ∨ φ | φ → φ | φ ► φ | φ −► φ | φ ►− φ.
The connectives above are the standard (classical additive) logical connectives, to- gether with (non-commutative and non-associative) multiplicative conjunction, ►, and its associated implications −► and ►−. We define ¬φ as φ → ⊥. A Hilbert-type system for the logic is given in Fig 2.
LGL is interpreted on layered structures called scaffolds. A scaffold is a structure X = (G, E,X) where G is a directed graph, E is a distinguished edge set and X ⊆ Sg(G) is such that, if H @E K ↓, H, K ∈ X iff H @E K ∈ X. Given a scaffold X and a valuation V : Prop → P(X) (where P(X) is the power set of X) the satisfaction relation ▶ is inductively defined in Fig 3.
Boolean BI
Let Prop be a set of atomic propositions, ranged over by p. The set of all formulae of BBI is generated by the following grammar:
φ ::= p |T|⊥| I | φ ∧ φ | φ ∨ φ | φ → φ | φ ∗ φ | φ −∗ φ.
Once again we have the standard classical additives, this time joined by a multi- plicative conjunction ∗ and implication −∗, as well as a constant I. By extending rules 1–11 of Fig 2 with the rules of Fig 4 we obtain a system for BBI. These rules enforce commutativity and associativity of the multiplicative conjunction ∗, as well as specifying that I is a unit for ∗.
BBI is interpreted on partial resource monoids R = (Res, ◦, e), where Res is a set of resources, ◦ : Res × Res → P(Res) is a non-deterministic composition satisfying commutativity and associativity, and e is a unit for ◦: for all r ∈ Res, r ◦ e = {r}. Given a partial resource monoid R and a valuation V : Prop → P(Res), the satisfaction relation ▶ is inductively defined in Fig 5.
Separation Logic
Separation Logic [35], introduced by Ishtiaq and O’Hearn [31], and Reynolds [38], is an extension of Hoare’s program logic which addresses reasoning about programs that access and mutate data structures. The usual presentation of Separation Logic is based on Hoare triples — for reasoning about the state of imperative programs




12j.	ξ ▶ φ	η ▶ ψ
ξ ∗ η ▶ φ ∗ ψ
13j.	η ∗ φ ▶ ψ
η ▶ φ −∗ ψ

14j.	ξ ▶ φ −∗ ψ	η ▶ φ 15j.	φ ∗ (ψ ∗ ξ) E▶ (φ ∗ ψ) ∗ ξ ξ ∗ η ▶ ψ
16j.	φ ∗ ψ ▶ ψ ∗ φ	17.	φ ∗ I E▶ φ
Fig. 4. Rules for the BBI Hilbert System, BBIH

r ▶ p iff r ∈ V(p)	r ▶ T always	r ▶ ⊥ never
r ▶ φ ∧ ψ iff r ▶ φ and r ▶ ψ	r ▶ φ ∨ ψ iff r ▶ φ or r ▶ ψ r ▶ φ → ψ iff r ▶ φ implies r ▶ ψ
r ▶ I iff r = e
r ▶ φ ∗ ψ iff there exists r1, r2 s.t. r ∈ r1 ◦ r2, r1 ▶ φ and r2 ▶ ψ r ▶ φ −∗ ψ iff for all rj, rjj s.t. rjj ∈ r ◦ rj, rj ▶ φ implies rjj ▶ ψ
Fig. 5. Satisfaction on partial resource monoids for BBI

s, h ▶ T always	s, h |= ⊥ never	s, h |= E = Ej iff {{E}}s = {{Ej}}s s, h |= E '→F iff {{E}}s = dom(h) and h({{E}}s) = {{ F }}s
s, h |= emp iff h = [ ] (the empty heap)
s, h |= φ ∗ ψ iff there are h0, h1 s.t. h0#h1, h0·h1 = h,s, h0 |= φ and s, h1 |= ψ s, h |= φ −∗ψ iff for all hj, h#hj and s, hj |= φ, implies s, h · hj |= ψ
s, h |= φ → ψ	iff	s, h |= φ implies s, h |= ψ
s, h |= ∃v. φ	iff	for some a∈ Val, [s | v '→ a],h |= φ
The remaining classical connectives are defined in the usual way: ¬φ = φ → ⊥;
φ ∨ ψ = (¬φ) → ψ; φ ∧ ψ = ¬(¬φ ∨ ¬ψ); and ∀x.φ = ¬∃x. ¬φ.
Fig. 6. Satisfaction for BI Pointer Logic
— of the form { φ } C { ψ } , where C is a program command, φ is pre-condition for C, and ψ is a post-condition for C. Reynolds’ programming language is a simple language of commands with a Lisp-like set-up for creating and accessing cons cells: C ::= x := E | x := E.i | E.i := Ej | x := cons(E1, E2) |    Here the expressions
E of the language are built up using booleans, variables, etc., cons cells, and atomic expressions. Separation Logic thus facilitates verification procedures for programs that alter the heap.
A key feature of Separation Logic is the local reasoning provided by the so-called Frame Rule,
{ φ } C { ψ }
,
{ φ ∗ χ} C { ψ ∗ χ}
where χ does not include any free variables modified by the program C. Static analysis procedures based on the Frame Rule form the basis of Facebook’s Infer tool (fbinfer.com) that is deployed in its code production. The decomposition of the analysis that is facilitated by the Frame Rule is critical to the practical deployability of Infer.
Separation Logic can usefully and safely be seen (see [41] for the details) as a 

presentation of BI Pointer Logic [31]. The semantics of BI Pointer Logic, a theory of (first-order) BBI, is an instance of BBI’s resource semantics in which the monoid of resources is constructed from the program’s heap. In detail, this model has two components, the store and the heap. The store is a partial function mapping from variables to values a ∈ Val, such as integers, and the heap is a partial function from natural numbers to values. In logic, the store is often called the valuation, and the heap is a possible world. In programming languages, the store is sometimes called the environment. Within this set-up, the atomic formulae of BI Pointer Logic include equality between expressions, E = Ej, and, crucially, the points-to predicate, E '→ F .
We use the following additional notation: dom(h) denotes the domain of def- inition of a heap h and dom(s) is the domain of a store s; h#hj denotes that dom(h) ∩ dom(hj)= ∅; h · hj denotes the union of functions with disjoint domains, which is undefined if the domains overlap; [f | v '→ a] is the partial function that is equal to f except that v maps to a; expressions E are built up from variables and constants, and so determine denotations {{E}}s ∈ Val. With this basic data, the satisfaction relation for BI Pointer Logic is defined as in Figure 6. The judgement, s, h ▶ φ, says that the assertion φ holds for a given store and heap, assuming that the free variables of φ are contained in the domain of s.
Note that the semantics of E '→ F requires that E be the only active address in the current heap. Descriptions of larger heaps can be built up using ∗: this corresponds to the local reasoning provided by the Frame Rule. For example, (9 '→ 5) ∗ (10 '→ 7) describes two adjacent cells whose contents are 5 and 7.

Representation and Duality for LGL and BBI
By abstracting from the Hilbert systems and the semantics given in Section 2 we can obtain algebraic and relational semantics (respectively) for the logics LGL and BBI. We begin with algebraic semantics.
Definition 3.1
A layered algebra A is an algebra A = (A, ∧, ∨, ¬, T, ⊥, ►, −►, ►−) such that (A, ∧, ∨, ¬, T, ⊥) is a Boolean algebra and ►, −► and ►− are binary operations on A satisfying, for all a, b, c ∈ A, a ► b ≤ c iff a ≤ b −► c iff b ≤ a ►− c.
A resource algebra is a layered algebra A extended with a constant I such that
a) ► is associative and commutative; and b) for all a ∈ A, a ► I= a.
We note that for resource algebras, commutativity of ► entails −► = ►−. LayAlg (ResAlg) denotes the category of layered (resource) algebras and homomorphisms between them.	□
Given a valuation V : Prop → A on a layered algebra, we obtain an interpretation J−) for LGL on A as follows: Jp) = V(p), JT) = T, J⊥) = ⊥, Jφ → ψ) = ¬Jφ)∨Jψ), and Jφ ◦ ψ) = Jφ) ◦ Jψ) for ◦ ∈ {∧, ∨, ►, −►, ►−}. For a valuation on a resource algebra A we similarly obtain an interpretation J−) for BBI on A: in this case we

set Jφ ∗ ψ) = Jφ) ► Jψ), Jφ −∗ ψ) = Jφ) −►Jψ) and JI) = I.
An interpretation J−) on a layered (resource) algebra satisﬁes φ if Jφ) = T. φ is valid on layered algebras if it is satisfied under all interpretations. By forming Lindenbaum-Tarski algebras from the Hilbert-type systems given in Figures 2 and 4 we obtain soundness and completeness for this semantics.
Theorem 3.2 For all formulae φ of LGL (BBI), φ ▶ ψ is provable in LGLH (BBIH) iff, for all algebraic interpretations J−), Jφ) ≤ Jψ).	□
We now move to the relational structures generalizing the semantics of LGL
and BBI.
Definition 3.3
A layered frame X is a pair X = (X, R), where X is a set and R is a ternary relation on X.
A resource frame X is a triple X = (X, R, E), where (X, R) isa layered frame,
E ⊆ X and, for all x, y, z, t ∈ X, the following properties are satisfied:
(Assoc) ∃tj(Rxytj and Rtjzt) iff ∃tj(Ryztj and Rxtjt);
(Comm) Rxyz iff Ryxz;
(Unit) ∃e ∈ E, Rexx and ∀e ∈ E, Rexy implies x = y.	□
It is straightforward to see that these definitions generalize the structures defined in Section 2 to interpret LGL and BBI. Given a scaffold (G, X, E ), we obtain a layered frame (X, R£ ) by defining R£ HKG iff H @£ K ↓ and H @£ K = G. Similarly, for a partial resource monoid (Res, ◦, e), we obtain a resource frame (Res, R○, {e}) by defining R○r0r1r iff r ∈ r0 ◦ r1. Using these substitutitions one can reconfigure the semantics given in Figures 3 and 5 to give a satisfaction relation ▶ on frames. For BBI, we make one additional adjustment to take care of the move from a single unit e to a set of units E: x ▶ I iff x ∈ E.
Resource frames are the weakest relational structures that can soundly and com- pletely interpret BBI, a fact that is formally captured by the duality theorem 3.12. The notion is closely related to two other types of relational structure from the BBI literature — multi-unit separation algebras [24] and relational frames [27] — and coincides with two others, BBI frames [9] and non-deterministic monoids [28]. Resource frames have multiple units like multi-unit separation algebras, but drop the cancellativity requirement of the partial composition. In contrast, they are distinguished from relational frames because of the fact they have multiple units.
These distinctions are crucial for what follows: the representation and duality theorems do not hold when we restrict to frames satisfying either of these properties. This is also witnessed by the fact that BBI is not expressive enough to distinguish between cancellative/non-cancellative models and single unit/multi-unit models [9], all of which define the same notion of validity [28].
To obtain categories LayFr and ResFr we define morphisms for frames.
Definition 3.4 (cf. [9]) Given layered frames X and Xj, a layered p-morphism
f : X → Xj is a function f : X → Xj satisfying the following:

∀x, y, z, if Rxyz, then Rjf (x)f (y)f (z);
∀xj, yj, z, if Rjxjyjf (z), then ∃x, y ∈ X s.t. Rxyz, f (x)= xj and f (y)= yj;
∀xj, y, zj, if Rjxjf (y)zj, then ∃x, z ∈ X s.t. Rxyz, f (x)= xj and f (z)= zj;
∀x, yj, zj, if Rjf (x)yjzj, then ∃y, z ∈ X s.t. Rxyz, f (y)= yj and f (z)= zj.
A resource p-morphism f : X → Xj between resource frames X and Xj is a layered p-morphism that additionally satisfies
∀x, x ∈ E iff f (x) ∈ Ej.	□

Representation and Duality
We now give representation and duality theorems for layered and resource algebras. As a corollary, we obtain the equivalence of the relational semantics to the algebraic semantics, as well as its completeness with respect to the Hilbert systems of Section
The soundness and completeness of resource semantics can thus be understood as a consequence of this topological duality.
Definition 3.5 Given a layered frame X , the complex algebra of X is given by Com(X )= (P(X), ∩, ∪, \, X, ∅, ►R, −►R, ►−R), where ►R, −►R and ►−R are defined as follows:
A ►R B = {z | there exists x ∈ A, y ∈ B s.t. Rxyz}
A −►R B = {x | for all y, z ∈ X, if Rxyz and y ∈ A, then z ∈ B} A ►−R B = {x | for all y, z ∈ X, if Ryxz and y ∈ A, then z ∈ B}.
For a resource frame X , the complex algebra Com(X ) is given by extending the complex algebra of the underlying layered frame with the set E.	□
Lemma 3.6 The complex algebra Com(X ) of a layered (resource) frame X is a layered (resource) algebra.	□
We can also define a layered (resource) frame from any layered (resource) algebra. We first recall the notion of (ultra)filter. A ﬁlter on a Boolean algebra A is a subset F ⊆ A satisfying, for all x, y ∈ A, (i) x ∈ F and x ≤ y implies y ∈ F ; (ii) x, y ∈ F implies x ∧ y ∈ F . It is proper if ⊥ /∈ F . An ultraﬁlter is a proper filter that additionally satisfies (iii) x ∨ y ∈ F implies x ∈ F or y ∈ F . An ultrafilter of a layered (resource) algebra A is an ultrafilter of its underlying Boolean algebra.
Definition 3.7 Given a layered algebra A, the ultraﬁlter frame Ult(A) is defined Ult(A)= (Uf (A), RUlt(A)), where Uf (A) is the set of ultrafilters on A and RUlt(A) is defined by RUlt(A)F0F1F2 iff, for all x ∈ F0 and y ∈ F1,x ► y ∈ F2. For a resource algebra A, the ultrafilter frame is given by extending Ult(A) by ERUlt(A) =
{F ∈ Uf (A) | I ∈ F}.	□
Lemma 3.8 Given a layered (resource) algebra A, the ultraﬁlter frame Ult(A) is a layered (resource) frame.	□

We now extend the Stone representation theorem for Boolean algebras to take account of the additional residuated structure of layered/resource algebras. For layered algebras this is not a new result exactly: it can be derived as a specific case of an analogous theorem for Boolean gaggles ([4], Theorem 1.4.16) and is related to representation theorems for algebras with operators ([33], [30]). The difference with the latter results is the use of a single relation R for the operator ► and its non- operator adjoints −► and ►−. The derived structure required to take care of these adjoints was not investigated in the frameworks of Jonsson-Tarski or Goldblatt. In addition, the application to the semantics of LGL and BBI is new.
Theorem 3.9 (Representation Theorem for Layered/Resource Algebras) Every layered (resource) algebra is isomorphic to a subalgebra of a complex algebra. Speciﬁcally, the map hA : A → Com(Ult(A)) given by hA(a)= {F ∈ Uf (A) | a ∈ F} is an embedding.	□
Now given an interpretation J−) on a layered (resource) algebra A we can give a valuation VJ—) on the ultrafilter frame by VJ—)(p) = hA(Jp)). Similarly, any valuation V on a layered (resource) frame X generates an interpretation on its complex algebra. As hA is a homomorphism and the definition of the operations of the complex algebra matches the clauses for the relational semantics, we obtain the following corollary.
Corollary 3.10
For all formulae φ of LGL (BBI), φ is satisﬁable/valid on layered (resource) algebras iff φ is satisﬁable/valid on layered (resource) frames.
The relational semantics of LGL (BBI) is sound and complete.	□
Similarly to Stone’s representation theorem, our results extend to categorical dualities. As with the representation theorem, for layered algebras this is not a new result: it can be obtained as a specific case of the duality theorem for Boolean gaggles ([4], Theorem 9.2.22).
Definition 3.11
A layered space is a structure X = (X, O, R) such that
(X, O) is a Stone space [32] and (X, R) a layered frame,
the clopen sets of (X, O), CL(X), are closed under ►R, −►R and ►−R, and
if Rxyz does not hold, then there exist clopen sets O0 and O1 such that
x ∈ O0, y ∈ O1 and z /∈ O0 ►R O1.
A resource space is a structure X = (X, O, R, E) such that (X, O, R) is a layered space, (X, R, E) is a resource frame and E is a clopen set.	□
A morphism of layered (resource) spaces f : X → Xj is thus a continuous layered (resource) p-morphism. This yields categories LaySp and ResSp. Given a layered (resource) algebra A, we can equip its ultrafilter frame with the topology generated by the base {hA(a) | a ∈ A}. This yields a layered (resource) space and underpins the categorical duality: a proof can be found in an extended research note [22].

Theorem 3.12 (Duality Theorem for Layered/Resource Algebras) The cat- egories LayAlg (ResAlg) and LaySp (ResSp) are dually equivalent.	□

A Duality Theorem For Separation Logic
We now extend the duality theorem for resource algebras to the algebraic and rela- tional structures suitable for interpreting Separation Logic. First, we must consider first-order BBI (FOBBI). A Hilbert-type proof system is obtained by extending that given for BBI in Section 2 with the usual rules for quantifiers (see, e.g., [40]). Second, to give the semantics for the quantifiers of FOBBI, we must expand our definitions from the propositional case with category-theoretic structure. As these semantic structures support it, we consider a many-sorted first-order logic. We start on the algebraic side with resource hyperdoctrines.
Definition 4.1 (cf. [3]) A resource hyperdoctrine is a tuple
(P : Cop → Poset, (=X )X∈Ob(C), (∃XΓ, ∀XΓ)Γ,X∈Ob(C))	such that,
C is a category with finite products;
P : Cop → Poset is a functor such that, for each object X in C, P(X) is a resource algebra, and, for each morphism f in C, P(f ) is a homomorphism;
For each object X in C and each diagonal morphism ΔX : X → X × X in C,
=X∈ P(X × X) is such that, for all a ∈ P(X × X), T≤ P(ΔX )(a) iff =X≤ a;
For each pair of objects Γ,X in C and each projection πΓ,X : Γ × X → Γ in C, ∃XΓ and ∀XΓ are monotone maps ∃XΓ : P(Γ × X) → P(Γ) and
∀XΓ : P(Γ × X) → P(Γ) such that, for all a, b  ∈ P(Γ), ∃XΓ(a) ≤ b iff a ≤ P(πΓ,X )(b) and P(πΓ,X )(b) ≤ a iff b ≤ ∀XΓ(a). This assignment of mor- phisms is additionally natural in Γ: given a morphism s :Γ → Γj, the following diagrams commute:

P(Γj ×
EXΓ′
P(s×idX )
X)  P(Γ × X)
EXΓ
P(Γj
6XΓ′
P(s×id  )
X)  P(Γ × X)
6XΓ

P(Γj)

P(s)
P(Γ)
P(Γj)

P(s)
P(Γ)
□

Resource hyperdoctrines have appeared elsewhere in the literature as BI hyper- doctrines where they were used to prove the existence of models of higher-order variants of Separation Logic [3]. The Boolean quantale [21] and formal power series
[25] approaches to algebraic Separation Logic are instantiations of this structure.
To specify an interpretation J−) of FOBBI in a resource hyperdoctrine, P, we assign each type X an object JX) of C, and for each context Γ = {v1 : X1,..., vn : Xn} we have JΓ) = JX1) ×· · · × JXn). Each function symbol f : X1 × ··· Xn → X is assigned a morphism Jf ) : JX1) × ··· JXn) → JX). This allows us to inductively assign to every term of type X in context Γ a morphism Jt) : JΓ) → JX) in the

standard way (see [37]). We additionally assign, for each m-ary predicate symbol P of type X1,..., Xm, JP ) ∈ P(JX1) × ··· × JXm)). Then the structure of the hyperdoctrine allows us to extend J−) to FOBBI formulae φ in context Γ as follows:
JPt1 ... tm) = P(⟨Jt1),..., Jtm)⟩)(JP )) Jt =X tj) = P(⟨Jt), Jtj)⟩)(=JX))
JC) = CP(JΓ)) Jφ ◦ ψ) = Jφ) ◦P(JΓ)) Jψ) JQv : Xφ) = QJX)JΓ)(Jφ))
where C ∈ {T, ⊥,I}, ◦ ∈ {∧, ∨, →, ∗, −∗} and Q ∈ {∃, ∀}). Substitution of terms is given by Jφ(t/x)) = P(Jt))(Jφ)). φ is satisfied by an interpretation J−) if Jφ) = T. φ is valid if it is satisfied by all interpretations.
Theorem 4.2 [37,3] FOBBI is sound and complete on resource hyperdoctrines.□
On the relational side, we introduce a new structure: indexed resource frames. This definition is adapted from the notion of indexed Stone space presented in [18] as a topological dual for Boolean hyperdoctrines. In contrast to the duality presented there, we additionally consider (typed) equality and universal quantification.
Definition 4.3 An indexed resource frame is a functor R :C → ResFr such that
C is a category with finite products;
For all objects Γ, Γj and X in C, all morphisms s : Γ → Γj and all product projections πΓ,X , for the following commutative square
Y(πΓ,X )
R(Γ × X)  R(Γ)
Y(s×idX )	Y(s)
R(Γj × X)  R(Γj)
Y(πΓ′,X )
the induced map R(Γ ×X) → R(Γ) ×Y(Γ′) R(Γj ×X) is an epimorphism. This is known as the quasi-pullback or epi-pullback property.
Given an arbitrary indexed resource frame R : C → ResFr and an object X we denote the resource frame at X by R(X)= (R(X), RY(X), EY(X)).	□
We now give a truth-functional semantics for FOBBI on indexed resource frames. An interpretation J−) is given in precisely the same way as for resource hyperdoctrines, except for the key difference that each m-ary predicate symbol P of type X1,..., Xm, is assigned JP ) ⊆ R(JX1) ×· · · × JXm)).
Then for formulae φ of FOBBI in context Γ with x ∈ R(JΓ)) the satisfac- tion relation ▶Γ is inductively defined in Fig 7.  There, Ran(R(ΔJX))) = {y |
∃z(R(ΔJX))(z) = y)}. We note that bound variables are renamed to be fresh throughout, in an order determined by quantifier depth.
The Pointer Model as an Indexed Resource Frame
Although at first sight it doesn’t seem so, indexed resource frames and the seman- tics based upon them are a generalization of the standard store–heap semantics of Separation Logic.



x, J−) ▶Γ Pt1 ... tm iff R(⟨Jt1),..., Jtm)⟩)(x) ∈ JP )
x, J−) ▶Γ t =X tj iff R(⟨Jt), Jtj)⟩)(x) ∈ Ran(R(ΔJX))) x, J−) ▶Γ T always	x, J−) ▶Γ ⊥ never
x, J−) ▶Γ φ ∧ ψ iff x, J−) ▶Γ φ and x, J−) ▶Γ ψ x, J−) ▶Γ φ ∨ ψ iff x, J−) ▶Γ φ or x, J−) ▶Γ ψ x, J−) ▶Γ φ → ψ iff x, J−) /▶Γ φ or x, J−) ▶Γ ψ x, J−) ▶Γ I iff x ∈ EY(JΓ))
x, J−) ▶Γ φ ∗ ψ iff there exists y, z ∈ R(JΓ)) such that RY(JΓ))yzx and
y, J−) ▶Γ φ and z, J−) ▶Γ ψ
x, J−) ▶Γ φ −∗ ψ iff, for all y, z ∈ R(JΓ)), if RY(JΓ))yxz and
y, J−) ▶Γ φ, then z, J−) ▶Γ ψ
x, J−) ▶Γ ∃vn+1 : Xφ iff there exists xj ∈ R(JΓ) × JX)) such that
R(πJΓ),JX))(xj)= x and xj, J−) ▶Γ∪{vn+1:X} φ
x, J−) ▶Γ ∀vn+1 : Xφ iff, for all xj ∈ R(JΓ) × JX)), if R(πJΓ),JX))(xj)= x, then xj, J−) ▶Γ∪{vn+1:X} φ
Fig. 7. Satisfaction on indexed resource frames for FOBBI
Consider the resource frame Heap = (H, , {[ ]}), where H is the set of heaps, [ ] is the empty heap and  is defined by  h0h1h2 iff h0#h1 and h0 · h1 = h2. This is the resource frame corresponding to the partial monoid of heaps.
We define an indexed resource frame Store : Set → ResFr by Store(X) = (X × H, X, X × {[ ]}), where  X (x0, h0)(x1, h1)(x2, h2) iff x0 = x1 = x2 and
 h0h1h2, and Store(f : X → Y )(x, h) = (f (x), h). It is straightforward to see this defines a functor: for arbitrary X, Store(X) inherits the resource frame prop- erties from Heap and for arbitrary f : X → Y , Store(f ) is trivially a resource p-morphism as it is identity on the structure that determines the back and forth conditions. The quasi-pullback property is also satisfied so this defines an indexed resource frame.
The interpretation J−) on Store that yields the standard model of Separation Logic is as follows. We have one type Val and we set JVal) = Z, with the arithmetic operations J+), J−) : JVal)2 → JVal) defined as one would expect. Term morphisms Jt) : JVal)n → JVal) in context Γ = {v1,... vn} are then defined as usual, with each

constant n assigned the morphism Jn) : JΓ)  {∗}	n
points-to predicate '→ is assigned
JVal).
Finally, the

J'→) = {((a, aj), h) | dom(h)= {a} and h(a)= aj}⊆ Store(JVal)2).

In the indexed resource frame Store : Set → ResFr with the interpretation just defined, a store is represented as an n-place vector of values over JVal). That is, the store s = {(v1, a1),..., (vn, an)} is given by the element (a1,..., an) ∈ JVal)n. By a simple inductive argument we have the following result:
Theorem 4.4 For all formulae φ of pointer logic, all stores s ={(v1, a1),. . .,(vn, an)}
and all heaps h, s, h ▶ φ iff ((a1,..., an), h), J−) ▶Γ φ.	□

The notion of indexed resource frame and its associated semantics are therefore a natural generalization of the standard Separation Logic model.

Equivalence of Semantics and Duality
We now extend the results given for resource algebras to resource hyperdoctrines. To do so we give analogous structures to complex algebras and ultrafilter frames. To specify complex hyperdoctrines we first require an auxiliary definition. Given a function f : X → Y , the dual image f∗ : P(X) → P(Y ) is defined f∗(A) =
{x | for all y : if f (y)= x, then y ∈ A}.
Definition 4.5 Given an indexed resource frame R : C → ResFr, the complex hyperdoctrine of R, Com(R(−)) : Cop → ResAlg is defined by extending Definition
3.5 to morphisms with Com(R(f )) = (R(f ))—1 and setting Ran(R(ΔX )) as =X , the direct image R(πΓ,X ) as ∃XΓ, and R(πΓ,X )∗ as ∀XΓ.	□
Lemma 4.6 Given an indexed resource frame R :C → ResFr, the complex hyper- doctrine Com(R(−)) is a resource hyperdoctrine.	□
Definition 4.7 Given a resource hyperdoctrine P : Cop → Poset the indexed ul- traﬁlter frame Ult(P(−)) : C → ResFr is given by extending Definition 3.7 to morphisms by setting Ult(P(f )) = (P(f ))—1.	□
Lemma 4.8 Given a resource hyperdoctrine P : Cop → Poset the indexed ultraﬁlter frame Ult(P(−)) is an indexed resource frame.	□
Given an interpretation J−) on an indexed resource frame R we immediately obtain an interpretation on its complex hyperdoctrine, as for each m-ary predicate symbol P of type X1,..., Xm, JP ) is an element of Com(R(JJX1) ×· · · × JXm))), as required. Correspondingly, given an interpretation J−) on a resource hyperdoctrine P, we automatically obtain an interpretation J˜−) on its indexed ultrafilter frame. J˜−) is the same as J−) except J˜P  ) = hP(JX )×···×JX ))(JP )) for m-ary predicate symbols of type X1,..., Xm.
Theorem 4.9	(i) For all formulae φ of FOBBI: φ is satisﬁable (valid) on re- source hyperdoctrines iff φ is satisﬁable (valid) on indexed resource frames.
(ii) The indexed resource frame semantics of FOBBI is sound and complete.  □
This can be strengthened to prove a duality theorem for resource hyperdoctrines.
First we augment Definition 4.3 with topological structure.
Definition 4.10 An indexed resource space is a functor R :C → ResSp such that
C is a category with finite products,
Ran(R(ΔX )) is clopen, and
for all objects Γ, Γj and X in C, all morphisms s : Γ → Γj and all product projections πΓ,X , the following square is a quasi-pullback:

Y(πΓ,X )
R(Γ × X)  R(Γ)
Y(s×idX )	Y(s)
R(Γj × X)  R(Γj)
Y(πΓ′,X )
With the additional conditions that R(πΓ,X ) maps open sets to open sets and
R(πΓ,X )∗ maps closed sets to closed sets.	□
We can now combine BBI duality with the transformations between indexed resource frames and resource hyperdoctrines to give a dual equivalence of categories. First, we give notions of morphism for resource hyperdoctrines and indexed resource frames to obtain categories ResHyp and IndResSp. For hyperdoctrines, we adapt the definition of coherent hyperdoctrine morphism given in [19].
Definition 4.11 Given resource hyperdoctrines P : Cop → Poset and Pj : Dop →
Poset, a resource hyperdoctrine morphism (K, τ ): P → Pj is a pair such that
K :C → D is a finite product preserving functor,
τ : P → Pj ◦ K is a natural transformation,
for all objects X in C: τX×X (=X )= =j
for all objects Γ and X in C, the following squares commute:

P(Γ × X)
EXΓ
P(Γ)
τΓ×X




τΓ
Pj(K(Γ) × K(X))
E′K(X)K(Γ)
Pj(K(Γ))
P(Γ × X)
6XΓ
P(Γ)
τΓ×X




τΓ
Pj(K(Γ) × K(X))
6′K(X)K(Γ)
Pj(K(Γ))

The composition of the resource hyperdoctrine morphisms (K, τ ) : P → Pj and

(Kj,τj): Pj → Pjj is given by (Kj ◦ K, τ j
τ ).	□

Definition 4.12 Given indexed resource spaces R : C → ResSp and Rj : D → ResSp, an indexed resource space morphism (L, λ) : R → Rj is a pair (L, λ) such that
L :D → C is a finite product preserving functor,
λ : R◦ L → Rj is a natural transformation,
(Lift Property) if there exist x and y such that λX×X (x) = Rj(ΔX )(y), then there exists yj such that R(L(ΔX ))(yj)= x, and
for all objects Γ and X in C, the following square is a quasi-pullback:

R(L(Γ) × L(X))
λΓ×X
R(Γ × X)

Y(L(πΓ,X ))
R(L(Γ))	λΓ
Y′(πΓ,X )
R(Γ)

The composition of the indexed resource space morphisms (L, λ) : R → Rj and (Lj, λj): Rj → Rjj is given by (L ◦ Lj, λj ◦ λL′(—)).	□
Duality is given on objects by composing a resource hyperdoctrine/indexed re-

source frame with the corresponding functor from BBI duality. On morphisms, we take the inverse image of the natural transformation in both resource hyperdoctrine and indexed resource frame morphisms. A full proof can be found in the extended research note [22].
Theorem 4.13 (Duality Theorem for Resource Hyperdoctrines) The cate- gories ResHyp and IndResSp are dually equivalent.	□

Conclusions and Further Work
We have given a systematic treatment of Stone-type duality for the structures that interpret bunched logics, starting with the weakest systems, recovering the familiar BBI, and concluding with Separation Logic. Our results encompass all the known existing algebraic approaches to Separation Logic and prove them sound with re- spect to the standard store-heap semantics. As corollaries, we uniformly recover soundness and completeness theorems for the systems we consider.
We have also obtained analogous results for the intuitionistic variant of LGL (ILGL, developed in [23]), BI [36] and intuitionistic FOBBI, of which intuitionistic Separation Logic [31] is a specific model. Our theorems can also be extended to the bunched logics with additional multiplicatives corresponding to negation and disjunction: dMBI [6], CBI [7] and the full range of sub-classical bunched logics [10]. These results will be presented elsewhere. We conjecture that the treatment can additionally encompass a range of bunched modal and epistemic systems (e.g., [20], [9], and [26]), as well as higher-order variants of Separation Logic via general hyperdoctrines [3]. We believe this treatment will simplify completeness arguments for bunched logics by providing a modular framework within which existing results can be extended. More generally, the notion of indexed resource frame and its associated completeness argument can easily be adapted for a wide range of non- classical predicate logics.
We identify two areas of interest for further work. First, in extending our frame- work to encompass the breadth of the bunched logic literature we hope to give an account of multiplicative (or bunched ) modalities [20] and quantification [17], areas which have yet to be explored algebraically. This would require the formulation of resource algebra with operators and a reformulation of resource hyperdoctrine in which the operators and adjoints (respectively) satisfy certain compatibility condi- tions with the monoidal structure of resource algebras. We believe the present work provides the mathematical foundation to explore these ideas.
Second, we conjecture that our approach can be extended to account for the operational semantics of program execution given by Hoare triples. As a conse- quence, we aim to interpret computational approaches to the Frame Rule such as bi-abduction [11] within our semantics. We believe the evident extension of our framework with the duality-theoretic approach to Hoare logic [5] can facilitate this. We wish to investigate if the duality theorems can be used to bring algebraic or topological methods to bear on these important properties of Separation Logic.

References
A.R. Anderson, N. Belnap, and J.M. Dunn. Entailment. The Logic of Relevance and Necessity. Vol. II. Princeton University Press, Princeton, NJ, 1992. With contributions by Kit Fine, Alasdair Urquhart et al, Includes a bibliography of entailment by Robert G. Wolf.
G. Anderson and D. Pym. A Calculus and Logic of Bunched Resources and Processes. Theoretical Computer Science, 614:63–96, 2016.
B. Biering, L. Birkedal, and N. Torp-Smith. BI Hyperdoctrines and Higher-order Separation Logic. In
Proc. 14th ESOP, 233–247, Springer-Verlag, 2005.
K. Bimb´o and J.M. Dunn. Generalized Galois Logics. Relational Semantics of Nonclassical Logical Calculi, CSLI Lecture Notes, Volume 188. CSLI Publications, Stanford, December 2008.
C. Brink and I. Rewitzky. A Paradigm for Program Semantics: Power Structures and Duality, Studies in Logic, Language and Information. CSLI Publications, Stanford, CA, 2001.
J. Brotherston Bunched Logics Displayed. Studia Logica 100(6):1223-1254, 2012.
J. Brotherston and C. Calcagno. Classical BI: Its semantics and proof theory. Logical Methods in Computer Science, 6 (3)1-42. 2010. doi=10.2168/LMCS-6(3:3)2010.
J. Brotherston and M. Kanovich. Undecidability of Propositional Separation Logic and Its Neighbours.
Journal of the ACM, 61(2):14:1–14:43, 2014.
J. Brotherston and J. Villard. Parametric Completeness for Separation Theories. SIGPLAN Notices, 49(1):453–464, 2014.
J. Brotherston and J. Villard.  Sub-Classical Boolean Bunched Logics and the Meaning of Par.
Proceedings of CSL-24, LIPlcs, Dagstuhl, 325–342, 2015.
C. Calcagno, D. Distefano, P. O’Hearn, and H. Yang. Compositional Shape Analysis by Means of Bi-abduction. Journal of the ACM, 58(6): 66, 2011.
C. Calcagno, P. Gardner, and U. Zarfaty. Context logic as modal logic: Completeness and parametric inexpressivity. in Proc. POPL-34. ACM, 123 –134, 2007.
C. Calcagno, P. O’Hearn, and H. Yang. Local Action and Abstract Separation Logic. In Proc. 22nd LICS, IEEE, 2007, 366–378.
M. Collinson, K. McDonald, and D. Pym. A Substructural Logic for Layered Graphs. Journal of Logic and Computation, 24(4):953–988, 2014.
M. Collinson, K. McDonald, and D. Pym. Layered Graph Logic as an Assertion Language for Access Control Policy Models. Journal of Logic and Computation, 2015. doi:10.1093/logcom/exv020.
M. Collinson and D. Pym. Algebra and logic for resource-based systems modelling. Mathematical Structures in Computer Science, 19:959–1027, 2009. doi:10.1017/S0960129509990077.
M. Collinson, D. Pym and E. Robinson. Bunched Polymorphism. Mathematical Structures in Computer Science, 18(6):1091–1132, 2008.
D. Coumans. Duality for first-order logic. http://www.math.ru.nl/~coumans/talkAC.pdf. Accessed 5 June 2017.
D. Coumans. Generalising Canonical Extension to the Categorical Setting. Annals of Pure and Applied Logic, 163(12):1940 – 1961, 2012.
J.-R. Courtault, D. Galmiche, and D. Pym. A Logic of Separating Modalities. Theoretical Computer Science, 637:30–58, 2016.
H.-H. Dang and P. H¨ofner and B. Mo¨ller. Algebraic Separation Logic. The Journal of Logic and Algebraic Programming, 80(6):221–247, 2011.
S. Docherty and D. Pym. A Stone-type Duality Theorem for Separation Logic via its Underlying Bunched Logics. Research note RN/17/06, Department of Computer Science, UCL, http://www.cs. ucl.ac.uk/fileadmin/UCL-CS/research/Research_Notes/RN_17_06.pdf, 2017.
S. Docherty and D. Pym. Intuitionistic Layered Graph Logic. In Proc IJCAR ’16. LNAI 9706:469–486, 2016.


R. Dockins, A. Hobor, and A.W. Appel. A Fresh Look at Separation Algebras and Share Accounting. In Proc. of the 7th Asian Symposium on Programming Languages and Systems, APLAS ’09, 161–177, Berlin, Heidelberg, 2009. Springer-Verlag.
B. Dongol, V. Gomes, and G. Struth. A Program Construction and Verification Tool for Separation Logic. In R. Hinze and J. Voigtla¨nder, editors, LNCS 9129, 137–158. Springer, 2015.
D. Galmiche, P. Kimmel, and D. Pym. A Substructural Epistemic Resource Logic. in Proc ICLA ’17, LNCS 10119:106–122, 2017.
D. Galmiche and D. Larchey-Wendling. Expressivity Properties of Boolean BI Through Relational Models. in Proc FSTTCS ’06, Springer Berlin Heidelberg, 357–368, 2006.
D. Galmiche and D. Larchey-Wendling. Looking at Separation Algebras with Boolean BI-eyes. in Proc TCS ’14, Springer Berlin Heidelberg, 326 –340, 2014.
D. Galmiche, D. M´ery, and D. Pym. The Semantics of BI and Resource Tableaux. Mathematical Structures in Computer Science, 15:1033–1088, 2005.
R. Goldblatt. Varieties of Complex Algebras. Annals of Pure and Applied Logic, 44(3):173-242, 1989.
S. Ishtiaq and P. O’Hearn. BI as an Assertion Language for Mutable Data Structures. In 28th ACM- SIGPLAN Symposium on Principles of Programming Languages, London, 14–26. ACM, 2001.
P. Johnstone. Stone Spaces. Cambridge University Press, 1986.
B. Jonsson and A. Tarski. Boolean algebras with operators. Part I. American Journal of Mathematics, 73(4):891–939, 1951.
D. Larchey-Wendling. The Formal Strong Completeness of Partial Monoidal Boolean BI. Journal of Logic and Computation, 26(2):605–640, 2016.
P. O’Hearn. A Primer on Separation Logic. Software Safety and Security; Tools for Analysis and Verification. NATO Science for Peace and Security Series, 33:286–318, 2012.
P. O’Hearn and D. Pym. The Logic of Bunched Implications. Bulletin of Symbolic Logic, 5(2):215–244, June 1999.
A. Pitts. Categorical Logic. In Handbook of Logic in Computer Science, Volume 5, S. Abramsky and
D. Gabbay and T. Maibaum, editors, Oxford University Press, 2000. 39–128.
J. Reynolds. Separation Logic: A Logic for Shared Mutable Data Structures. In Proceedings of the Seventeenth Annual IEEE Symposium on Logic in Computer Science, Copenhagen, Denmark, July 22-25, 2002, 55–74. IEEE Computer Society Press, 2002.
M. H. Stone. The Theory of Representations of Boolean Algebras. Transactions of the American Mathematical Society 40, 37 – 111. 1936.
A. Troelstra and H. Schwichtenberg. Basic Proof Theory. Cambridge University Press, 1996.
H. Yang and P. O’Hearn. A Semantic Basis for Local Reasoning. In Proc. FOSSACS’02, 2002. doi:10.1.1.10.8768.
