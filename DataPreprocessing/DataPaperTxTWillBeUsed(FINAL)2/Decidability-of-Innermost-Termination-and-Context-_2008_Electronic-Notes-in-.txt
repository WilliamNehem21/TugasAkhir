Electronic Notes in Theoretical Computer Science 204 (2008) 21–34	
www.elsevier.com/locate/entcs

Decidability of Innermost Termination and Context-Sensitive Termination for
Semi-Constructor Term Rewriting Systems
Keita Uchiyama 1 Masahiko Sakai 2 Toshiki Sakabe 3
Graduate School of Information Science Nagoya University
Furo-cho, Chikusa-ku, Nagoya, 464-8603, Japan

Abstract
Yi and Sakai [13] showed that the termination problem is a decidable property for the class of semi- constructor term rewriting systems, which is a superclass of the class of right-ground term rewriting systems. Decidability was shown by the fact that every non-terminating TRS in the class has a loop. In this paper we modify the proof of [13] to show that both innermost termination and μ-termination are decidable properties for the class of semi-constructor TRSs.
Keywords: Context-Sensitive Termination, Dependency Pair, Innermost Termination


Introduction
Termination is one of the central properties of term rewriting systems (TRSs for short), where we say a TRS terminates if it does not admit any infinite reduction sequence. Since termination is undecidable in general, several decidable classes have been studied [6,8,9,12,13]. The class of semi-constructor TRSs is one of them [13], where a TRS is in this class if for every right-hand side of rules all its subterms having a defined symbol at root position are ground.
Innermost reduction, the strategy which rewrites innermost redexes, is used for call-by-value computation. Context-sensitive reduction is a strategy in which rewritable positions are indicated by specifying arguments of function symbols. Some non-terminating TRSs are terminating by context-sensitive reduction without loss of computational ability. The termination property with respect to innermost

1 Email: uchiyama@sakabe.i.is.nagoya-u.ac.jp
2 Email: sakai@is.nagoya-u.ac.jp
3 Email: sakabe@is.nagoya-u.ac.jp

1571-0661 © 2008 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2008.03.051

(resp. context-sensitive) reduction is called innermost (resp. context-sensitive) ter- mination. Since innermost termination and context-sensitive termination are also undecidable in general, methods for proving these terminations have been studied [2,4].
In this paper, we prove that innermost termination and context-sensitive termi- nation for semi-constructor TRSs are decidable properties. We show that context- sensitive termination for μ-semi-constructor TRSs having no infinite variable depen- dency chain is a decidable property. We also extend the classes by using dependency graphs.

Preliminaries
We assume the reader is familiar with the standard definitions of term rewriting systems [5], dependency pairs [4], and context-sensitive rewriting [2]. Here we just review the main notations used in this paper.
A signature F is a set of function symbols, where every f ∈F is associated with a non-negative integer by an arity function: arity: F → N. The set of all terms built from a signature F and a countably infinite set V of variables such that F ∩ V = ∅, is represented by T (F, V). The set of ground terms is T (F, ∅). The set of variables
occurring in a term t is denoted by Var(t).
The set of all positions in a term t is denoted by Pos(t) and ε represents the root position. Pos(t) is: Pos(t) = {ε} if t ∈ V, and Pos(t) = {ε}∪ {iu | 1 ≤ i ≤ n, u ∈ Pos(ti)} if t = f (t1,..., tn). Let C be a context with a hole  . We write C[t]p for the term obtained from C by replacing at position p with a term t. We sometimes write C[t] for C[t]p by omitting the position p. We say t is a subterm of s if s = C[t] for some context C. We denote the subterm relation by Œ, that is, t Œ s if t is a subterm of s, and t  s if t Œ s and t /= s. The root symbol of a term t is denoted by root(t).
A substitution θ is a mapping from V to T (F, V) such that the set Dom(θ) = 
{x ∈ V | θ(x) /= x} is finite. We usually identify a substitution θ with the set
{x '→ θ(x) | x ∈ Dom(θ)} of variable bindings. In the following, we write tθ instead of θ(t).
A rewrite rule l → r is a directed equation which satisfies l /∈ V and Var(r) ⊆
Var(l). A term rewriting system TRS is a finite set of rewrite rules. A redex is a term lθ for a rule l → r and a substitution θ. A term containing no redex is called a normal form. A substitution θ is normal if xθ is in normal forms for every x. The

reduction relation −→
R
⊆ T (F, V) ×T (F, V) associated with a TRS R is defined

as follows: s −→ t if there exist a rewrite rule l → r ∈ R, a substitution θ, and a
R
context C[ ]p such that s = C[lθ]p and t = C[rθ]p, we say that s is reduced to t by

contracting redex lθ. We sometimes write
−→p
R
for −→
R
by displaying the position p.

A redex is innermost if all its proper subterms are in normal forms.  If s is
reduced to t by contracting an innermost redex, then s →R t is said to be an
innermost reduction denoted by s −−−→ t.
in,R

Proposition 2.1 Fora TRS R, if there is a reduction s −−−→ t, then C[s] −−−→ C[t]

for any context C.
in,R
in,R

A mapping μ :  F → P(N) is a replacement map (or F-map) if μ(f ) ⊆
{1,..., arity(f )}. The set of μ-replacing positions Posμ(t) of a term t is: Posμ(t) = 
{ε}, if t ∈V and Posμ(t) = {ε}∪ {iu | i ∈ μ(f ),u ∈ Posμ(ti)}, if t = f (t1,..., tn). A context C[ ]p is μ-replacing denoted by Cμ[ ]p if p ∈ Posμ(C). The set of all μ-replacing variables of t is Varμ(t) = {x ∈ Var(t) | ∃C, Cμ[x]p = t}. The μ- replacing subterm relation Œμ is given by s Œμ t if there is p ∈ Posμ(t) such that
t = C[s]p. A context-sensitive rewriting system is a TRS with an F-map. If s −→p t

and p ∈ Posμ(s), then s −→p
t is said to be a μ-reduction denoted by s −−→ t.
μ,R

Let → be a binary relation on terms, the transitive closure of → is denoted by
→+. The transitive and reflexive closure of → is denoted by →∗. If s →∗ t, then we say that there is a →-sequence starting from s to t or t is →-reachable from s. We write s →k t if t is →-reachable from s with k steps. A term t terminates with respect to → if there exists no infinite →-sequence starting from t.
Example 2.2 Let R1 = {g(x) → h(x), h(d) → g(c), c → d} and μ1(g) = μ1(h) = 
∅. A μ1-reduction sequence starting from g(d) is g(d) −−−−→ h(d) −−−−→ g(c). We
μ1,R1	μ1,R1
can not reduce g(c) to g(d) because c is not a μ1-replacing subterm of g(c).
Proposition 2.3 For a TRS R and F-map μ, if there is a reduction s −−→ t, then
μ,R
C [s] −−→ C [t] for any μ-replacing context C .
μ,R
For a TRS R (and F-map μ), we say that R terminates (resp. innermost ter- minates, μ-terminates) if every term terminates with respect to →	(resp. −−−→ ,
in,R
−−→ ).
μ,R
For a TRS R, a function symbol f ∈ F is deﬁned if f = root(l) for some rule l → r ∈ R. The set of all defined symbols of R is denoted by DR = {root(l) | l → r ∈ R}. A term t has a deﬁned root symbol if root(t) ∈ DR.
Let R be a TRS over a signature F.  The signature F  denotes the union of

F and D 
= {f | f ∈ DR} where F ∩ D 
= ∅ and f has the same arity as f .

We call these fresh symbols dependency pair symbols. We define a notation t by
t = f (t1,..., tn) if t = f (t1,..., tn) and f ∈ DR, t = t if t ∈ V. If l → r ∈ R
and u is a subterm of r with a defined root symbol and u / l, then the rewrite rule
l → u  is called a dependency pair of R. The set of all dependency pairs of R is
denoted by DP(R).
Example 2.4 Let R2 = {a → g(f (a)), f (f (x)) → h(f (a),f (x))}.	We have
DP(R2) = {a → a , a → f (a), f (g(x)) → a , f (g(x)) → f (a)}.
A rule l → r is said to be right ground if r is ground. Right-ground TRSs are TRSs that consist of right-ground rules.
Definition 2.5 [Semi-Constructor TRS] A TRS R is a semi-constructor system if every rule in DP(R) is right ground.

Remark 2.6 The class of semi-constructor TRSs in this paper is a larger class of semi-constructor TRSs by the original definition because a rule l → u is not dependency pair if u l. The original definition of semi-constructor TRS is as follows [11]. A term t ∈ T (F, V) is a semi-constructor term if every term s such that s Œ t and root(s) ∈ DR is ground. A TRS R is a semi-constructor system if r is a semi-constructor term for every rule l → r ∈ R.
Example 2.7 The TRS R2 (in Example 2.4) is a semi-constructor TRS but not in the original definition.

Decidability of Innermost Termination for Semi- Constructor TRSs
Decidability of termination for semi-constructor TRSs is proved based on the ob- servation that there exists an infinite reduction sequence having a loop if it is not terminating [13]. In this section, we prove the decidability of innermost termination in a similar way.
Definition 3.1 [loop] Let → be a relation on terms. A reduction sequence loops if it contains t →+ C[t] for some context C, and head-loops if containing t →+ t.
Proposition 3.2 If there exists an innermost sequence that loops, then there exists an inﬁnite innermost sequence.
Definition 3.3 [Innermost DP-chain] For a TRS R, a sequence of the elements
of DP(R) s  → t , s  → t ,... is an innermost dependency chain if there exist
1	1	2	2

substitutions τ1, τ2,... such that s τi is in normal forms and t τi −−−→∗ s 
τi+1

i
holds for every i.
i	in,R
i+1

Theorem 3.4 ([4]) For a TRS R, R does not innermost terminate if and only if there exists an inﬁnite innermost dependency chain.
Let M→ denote the set of all minimal non-terminating terms for a relation on terms → and an order on terms ≥.
Definition 3.5 [C-min] For a TRS R, let C ⊆ DP(R). An infinite reduction se-
−−−→
quence in R∪C in the form t −−−−→ t −−−−→ t −−−−→ ··· with ti ∈M in,R for
1 in,R∪C	2 in,R∪C	3 in,R∪C	Ḇ

all i ≥ 1 is called a C-min innermost reduction sequence. We use Cin
the set of all C-min innermost reduction sequences starting from t .
(t ) to denote

Proposition 3.6 ([4]) Given a TRS R, the following statements hold:
If there exists an inﬁnite innermost dependency chain, then Cin (t ) /= ∅ for

−−−→
some C ⊆ DP(R) and t ∈M in,R .
min

For any sequence in Cin (t ), reduction by rules of R takes place below the root
while reduction by rules of C takes place at the root.

For any sequence in Cin (t ), there is at least one rule in C which is applied
inﬁnitely often.
Lemma 3.7 ([4]) For two terms s and s', s −−−−−→∗ s' implies s −−−→∗ C[s'] for

some context C.
in,R∪C
in,R


Proof. We use induction on the number n of reduction steps in s −−−−→n s' . In
in,R∪C
the case that n = 0, s −−−→∗ C[s'] holds where C =  . Let n ≥ 1. Then we have
in,R
s −−−−→n−1 s'' −−−−→ s' for some s'' . By the induction hypothesis, s −−−→∗ C[s''].

in,R∪C
in,R∪C
in,R

Consider the case that s'' −−−→ s' . Since s'' −−−→ s', we have C[s''] −−−→ C[s'] by

in,R
Proposition 2.1. Hence s −−−→∗ C[s'].
in,R
in,R
in,R

Consider the case that s'' −−→ s' . Since s'' is a normal form with respect to → ,
in,C
we have s'' −−−→ C'[s'] by the definition of dependency pairs. C[s''] −−−→ C[C'[s']],
in,R	in,R
by Proposition 2.1. Hence s −−−→∗ C[C'[s']].	 
in,R

Lemma 3.8 For a semi-constructor TRS R, the following statements are equiva- lent:
R does not innermost terminate.
There exists l → u ∈ DP(R) such that sq head-loops for some C ⊆ DP(R)
and sq ∈ Cin (u ).
Proof. ((ii) ⇒ (i)) : It is obvious from Lemma 3.7, and Proposition 3.2. ((i) ⇒ (ii))
: By Theorem 3.4 there exists an infinite innermost dependency chain. By Propo-
sition 3.6(i), there exists a sequence sq ∈ Cin (t ).  By Proposition 3.6(ii),(iii),
there exists some rule l → u ∈ C, which is applied at root position in sq in- finitely often.  By Definition 2.5, u  is ground.  Thus sq contains a subsequence
u −−−−−−−−→∗ · →	  u , which head-loops.	 
in,R∪DP(R)
Theorem 3.9 Innermost termination of semi-constructor TRSs is decidable.
Proof. The decision procedure for the innermost termination of a semi-constructor TRS R is as follows: consider all terms u1, u2,..., un corresponding to the right-
hand sides of DP(R) = {l  → u  | 1 ≤ i ≤ n}, and simultaneously generate all
innermost reduction sequences with respect to R starting from u1, u2,..., un. The
procedure halts if it enumerates all reachable terms exhaustively or it detects a looping reduction sequence u −−−→+ C[u ] for some i.
in,R
Suppose R does not innermost-terminate. By Lemma 3.8 and 3.7, we have a looping reduction sequence u −−−→+ C[u ] for some i and C, which we eventually
in,R
detect. If R innermost terminates, then the execution of the reduction sequence
generation eventually stops since the reduction relation is finitely branching. In the latter case, the procedure does not detect a looping sequence, otherwise it contradicts Proposition 3.2. Thus the procedure decides innermost termination of R in finitely many steps.	 

Decidability of Context-Sensitive Termination for Semi-Constructor TRSs
The proof of decidability for innermost termination is straightforward. However, the proof for context-sensitive termination is not so straightforward because of the existence of a dependency pair whose right-hand side is variable.
Definition 4.1 [μ-Loop] Let → be a relation on terms and μ be an F-map.  A
reduction sequence μ-loops if it contains t →+ Cμ[t] for some context Cμ.
Example 4.2 Let R3 = {a → g(f (a)), f (g(x)) → h(f (a), x)}, μ2(f ) = {1},
μ2(g) = ∅ and μ2(h) = {1, 2}.  The μ2-reduction sequence with respect to R3
f (a) −−−−→ f (g(f (a))) −−−−→ h(f (a),f (a)) −−−−→ ··· is μ2-looping.

μ2,R3
μ2,R3
μ2,R3

Proposition 4.3 If there exists a μ-looping μ-reduction sequence, then there exists an inﬁnite μ-reduction sequence.
Definition 4.4 [Context-Sensitive Dependency Pairs [2]] Let R be a TRS and μ be an F-map. We define DP(R, μ) = DPF (R, μ) ∪ DPV (R, μ) to be the set of context-sensitive dependency pairs where:

DPF (R, μ)= {l  → u  | l → r ∈ R, u Œμ r, root(u) ∈ DR,u  /
DPV (R, μ)= {l → x | l → r ∈ R, x ∈ Varμ(r) \ Varμ(l)}
μl}

Example 4.5 Consider TRS R3 and F-map μ2 (in Example 4.2). DPF (R3, μ2) = 
{f (g(x)) → f (a)} and DPV (R3, μ2) = {f (g(x)) → x}.
For a given TRS R and an F-map μ, we define μ by μ (f ) = μ(f ) for f ∈ F,
and μ (f ) = μ(f ) for f ∈ DR. We write s o t for s oμ t.
Definition 4.6 [Context-Sensitive Dependency Chain] For a TRS R and F-map μ, a sequence of the elements of DP(R, μ) s  → t , s  → t , ... is a context-sensitive
1	1	2	2
dependency chain if there exist substitutions τ1, τ2,... satisfying both:
t τi −−−→∗ s	τi+1, if t  /∈V 

i	μ ,R
i+1	i

xτ
o u −−−→∗ s	τ
for some term u , if t = x.

i	μ i
μ ,R
i+1
i+1	i	i

Example 4.7 Consider	TRS	R3	and	F-map	μ2	(in	Example	4.2).

−−−−→
f (a),f (g(f (a))) ∈M μ2,R3
μ
−−−−→
and f (f (a)), h(f (a),f (a)) /∈M μ2,R3 .
μ

Theorem 4.8 ([2]) For a TRS R and an F-map μ, there exists an inﬁnite context- sensitive dependency chain if and only if R does not μ-terminate.
Let R be a TRS, μ be an F-map and C ⊆ DP(R, μ). We define ‹−−−→ as
μ,R,C

( −−−−→ ∪( −−−→ ·o )∪ −−−→ ) where C
= C∩DP
(R, μ) and C
= C∩DP
(R, μ).

μ ,CF
μ ,CV
μ	μ ,R	F	F	V	V

Definition 4.9 [μ-C-min] Let R be a TRS, μ be an F-map. An infinite sequence of terms in the form t ‹−−−→ t ‹−−−→ t ‹−−−→ ··· is called a C-min μ-sequence if
1 μ,R,C	2 μ,R,C	3 μ,R,C

−−→
ti ∈M μ,R

for all i ≥ 1. We use Cμ

(t ) to denote the set of all C-min μ-sequences

starting from t .

Note that Cμ

−−→
(t ) = ∅ if t /∈M μ,R .
μ

Example 4.10 Let C	= DP(R3, μ2), the sequence f (a) ‹−−−−−→ f (g(f (a)))
μ2,R3,C

‹−−−−−→
μ2,R3,C
f (a) ‹−−−−−→ ··· is a C-min μ-sequence.
μ2,R3,C

Proposition 4.11 ([2]) Given a TRS R and an F-map μ, the following statements hold:
If there exists an inﬁnite context-sensitive dependency chain, then Cμ  (t ) /= ∅

−−→
for some C ⊆ DP(R, μ) and t ∈M μ,R .
μ
min

For any sequence in Cμ
(t ), a reduction with −−−→
μ ,R
takes place below the root

while reductions with −−−−→
μ ,CF
and −−−→
μ ,CV
take place at the root.

For any sequence in Cμ  (t ), there is at least one rule in C which is applied
inﬁnitely often.
Lemma 4.12 For two terms s and t, s ‹−−−→∗ t implies s −−→∗ Cμ[t] for some

context Cμ.
μ,R,C
μ,R

Proof. We use induction on the length n of the sequence. In the case that n = 0, it holds trivially. Let n ≥ 1. Then we have s ‹−−−→∗ u ‹−−−→ t for some u.
μ,R,C	μ,R,C
In the case that u −−−−→ t , we have u −−→ C' [t] by the definition of dependency

pairs.
μ ,CF
μ,R	μ

In the case that u −−−→ v o t , we have u −−→ C''[v] by the definition of depen-

μ ,CV	μ
μ,R	μ

dency pairs and v = C'''[t]. Thus u −−→ C''[C'''[t]] = C' [t].
μ	μ,R	μ	μ	μ
In the case that u −−−→ t , we have u −−→ C' [t] for C' [ ] =  .

μ ,R
μ,R	μ	μ

Therefore s −−→∗ Cμ[u] −−→ Cμ[C' [t]] by the induction hypothesis and Proposi-

μ,R
μ,R	μ

tion 2.3.	 

Context-Sensitive Semi-Constructor TRS
In this subsection, we discuss the decidability of μ-termination for context-sensitive semi-constructor TRSs.
Definition 4.13 [Context-Sensitive Semi-Constructor TRS] For an F-map μ, a TRS R is a context-sensitive semi-constructor (μ-semi-constructor) TRS if all rules in DPF (R, μ) are right ground.
For an F-map μ, the class of μ-semi-constructor TRSs is a superclass of the class of semi-constructor TRSs from Definition 2.5 and 4.13.
For a TRS R and F-map μ, we say R is free from the infinite variable dependency chain (FFIVDC) if and only if there exists no infinite context-sensitive dependency

chain consisting of only elements in DPV (R, μ). If R is FFIVDC, then Cμ
(t ) = ∅

for any C ⊆ DPV (R, μ) and any term t.
Lemma 4.14 Let μ be an F-map. If a μ-semi-constructor TRS R is FFIVDC, then the following statements are equivalent:
R does not μ-terminate.
There exists l → u ∈ DPF (R, μ) such that sq head-loops for C ⊆ DP(R, μ)
and some sq ∈ Cμ  (u ).
Proof. ((ii) ⇒ (i)) : It is obvious from Lemma 4.12, and Proposition 4.3.  ((i)
⇒ (ii)) :  By Theorem 4.8 there exists an infinite context-sensitive dependency
chain. By Proposition 4.11(i), there exists a sequence sq ∈ Cμ  (t ). By Proposi-
tion 4.11(ii),(iii) and the fact that R is FFIVDC, there is some rule in l → u ∈ CF
which is applied at the root position in sq infinitely often.
By Definition 4.13, u is ground. Thus sq contains a subsequence u ‹−−−→+ u ,
μ,R,C
which head-loops and is in Cμ  (u ).	 
Theorem 4.15 Let μ be an F-map. If a μ-semi-constructor TRS R is FFIVDC, then μ-termination of R is decidable.
Proof. The decision procedure for μ-termination of a μ-semi-constructor TRS R is as follows: consider all terms u1, u2,..., un corresponding to the right-hand sides of DPF (R, μ) = {l → u | 1 ≤ i ≤ n}, and simultaneously generate all μ-reduction
i	i
sequences with respect to R starting from u1, u2,..., un.  The procedure halts if
it enumerates all reachable terms exhaustively or it detects a μ-looping reduction sequence u −−→+ C [u ] for some i.
μ,R
Suppose R does not μ-terminate. By Lemma 4.14 and 4.12, we have a μ-looping reduction sequence ui −−→+ Cμ[ui] for some i and Cμ, which we eventually detect.
If R μ-terminates, then the execution of the reduction sequence generation even- tually stops since the reduction relation is finitely branching. In the latter case, the procedure does not detect a μ-looping sequence, otherwise it contradicts to Proposition 4.3. Thus the procedure decides μ-termination of R in finitely many steps.	 
We have to check the FFIVDC property in order to use Theorem 4.15. How- ever, The FFIVDC property is not necessarily decidable. The following proposition provides a sufficient condition. The set DP1 (R, μ) is a subset of DPV (R, μ) defined
as follows:
DP1 (R, μ) = {f (u1,..., uk) → x ∈ DPV (R, μ) | ∃i, 1 ≤ i ≤ k, i /∈ μ(f ),x ∈ V ar(ui)}
Proposition 4.16 ([2]) Let R be a TRS, μ be an F-map and C ⊆ DP1 (R, μ).

μ
min
(t ) = ∅ for any term t.

If DP1 (R, μ) = DPV (R, μ) then R is FFIVDC by Proposition 4.16. Hence the following corollary directly follows from Theorem 4.15 and the fact that DP1 (R, μ) = DPV (R, μ) is decidable.

Corollary 4.17 For an F-map μ and a μ-semi-constructor TRS R, μ-termination of R is decidable if DPV (R, μ) = DP1 (R, μ).
Semi-Constructor TRS
In this subsection, we try to remove FFIVDC condition from the results of the previ- ous subsection. As a result, it appears that μ-termination of semi-constructor TRSs (not μ-semi-constructor) is decidable. The arguments of following Lemma 4.18 and
4.19 are similar to those of Lemma 3.5 and Proposition 3.6 in [3].
Lemma 4.18 Consider a reduction s  = Cμ [lθ]p −−−→ t  = Cμ [rθ]p = C'[u]q

−−→
where s, u ∈M μ,R
μ
μ ,R
and q ∈ Pos(t)\Posμ(t). Then one of the following statements

holds
s D u
vθ = u and r = C''[v]q' for some θ, v /∈ V, C'', and q' ∈ Pos(r) \ Posμ(r)
Proof. Since q ∈ Pos(t) \ Posμ(t), p is not below or equal to q. In the case that p and q are in parallel positions, s D u trivially holds. In the case that p is above q, it is obvious that s D u holds or, vθ = u and r = C''[v]q' for some θ, v /∈ V, C''. Here the fact that q' ∈ Pos(r) \ Posμ(r) follows from p ∈ Posμ(t) and q /∈ Posμ(t). 
Lemma 4.19 Let R be a semi-constructor TRS, μ be an F-map. For a C-min

μ-sequence s −−−→∗ t −−−→
u o s −−−→∗ t −−−→
u o	with no reduction

1 μ ,R	1 μ ,CV	1  μ  2 μ ,R	2 μ ,CV	2	μ
by rules in CF , one of the following statements holds for each i:
si D si+1
There exists l → s	∈ DP(R) for some l


Proof. Since t −−−→ u
o  s 
, we have t  = C[s	]  for some q ∈ Pos(t ) \

i μ ,CV
i	μ i+1
i	i+1 q	i

Posμ(ti). We show (i) or the following (ii’) by induction on the number n of steps
of s −−−→n t = C[si+1].
i μ ,R	i
(ii’) There exists a reduction by l → r in s −−−→∗ t and l → s	∈ DP(R)

i μ ,R	i
i+1

In the case that n = 0, trivially si = ti D si+1.
In the case that n > 0, let s −−−→ s' −−−→n−1 t = C[si+1]q. By the induction
i μ ,R	μ ,R	i
hypothesis, s' D si+1 or the condition (ii’) follows. In the former case, we have si D si+1, or, we have vθ = si+1 and r = C'[v]q' for some l → r ∈ R, θ, v /∈ V, C' and q' ∈ Pos(r) \ Posμ(r) by Lemma 4.18. Hence vθ = v due to root(si+1) ∈ DR
and Definition 2.5. Therefore (ii’) follows.	 
One may think that the Lemma 4.19 would hold even if DP(R) were replaced with DP(R, μ). However, it does not hold as shown by the following counter exam- ple.
Example 4.20 Consider the semi-constructor TRS R4 = {f (g(x)) → x, g(b) →
g(f (g(b)))}, μ3(f ) = {1} and μ3(g) = ∅.  There exists a C-min μ3-sequence

f (g(b)) −−−−→
f (g(f (g(b))) −−−→ f (g(b)) o 
f (g(b)) where C
= DP (R ,μ ).

μ ,R4
μ3
μ ,CV
V	V	4	3

However there exists no dependency pair having f (g(b)) in the right-hand side in DP(R, μ).
Lemma 4.21 For a semi-constructor TRS R and an F-map μ, the following state- ments are equivalent:
R does not μ-terminate.
There exists l → u ∈ DP(R) such that sq head-loops for C ⊆ DP(R, μ) and
some sq ∈ Cμ  (u ).
Proof. ((ii) ⇒ (i)) : It is obvious from Lemma 4.12, and Proposition 4.3. ((i) ⇒
(ii)) : By Theorem 4.8 there exists a context-sensitive dependency chain. By Propo-
sition 4.11(i), there exists a sequence sq ∈ Cμ  (t ). By Proposition 4.11(ii),(iii),
there exists a rule in C applied at root position in sq infinitely often.
Consider the case that there exists a rule l → r ∈ CF with infinite use in sq. Since u is ground by Proposition 4.11(ii) and CF ⊆ DP(R), sq has a subsequence u ‹−−−→+ u .
μ,R,C
Otherwise, sq has an infinite subsequence without the use of the rules in CF . The
subsequence is in Cμ  (s ) for some s . Then the condition (ii) of Lemma 4.19 holds
for infinitely many i’s; otherwise, we have an infinite sequence sk D sk+1 D ··· for
some k, which is a contradiction. Hence there exists a l → u ∈ DP(R) such that
u occurs more than once in sq. Thus the sequence u ‹−−−→+ u appears in sq. 
μ,R,C
Theorem 4.22 The property μ-termination of semi-constructor TRSs is decidable.
Proof. The decision procedure for μ-termination of a semi-constructor TRS R is as follows: consider all terms u1, u2,..., un corresponding to the right-hand sides of DP(R) = {l  → u  | 1 ≤ i ≤ n}, and simultaneously generate all μ-reduction
i	i
sequences with respect to R starting from u1, u2,..., un.  The procedure halts if
it enumerates all reachable terms exhaustively or it detects a μ-looping reduction sequence u −−→+ C [u ] for some i.
μ,R
Suppose R does not μ-terminate. By Lemma 4.21 and 4.12, we have a μ-looping reduction sequence ui −−→+ Cμ[ui] for some i and Cμ, which we eventually detect.
If R μ-terminates, then the execution of the reduction sequence generation even- tually stops since the reduction relation is finitely branching. In the latter case, the procedure does not detect a μ-looping sequence, otherwise it contradicts to Proposition 4.3. Thus the procedure decides μ-termination of R in finitely many steps.	 
Extending the Classes by DP-graphs
Innermost Termination
In this subsection, we extend the class for which innermost termination is decidable by using the dependency graph.

Lemma 5.1 Let R be a TRS whose innermost termination is equivalent to the non-existence of an innermost dependency chain that contains inﬁnite use of right- ground dependency pairs. Then innermost termination of R is decidable.
Proof. We apply the procedure used in the proof of Lemma 3.9 starting with terms u1, u2,..., un, where u ’s are all ground right-hand sides of dependency pairs. Suppose R is innermost non-terminating, then we have an innermost dependency chain with infinite use of a right-ground dependency pair. Similarly to the semi- constructor case, we have a looping sequence u −−−→+ C[u ], which can be detected
in,R
by the procedure.	 
Definition 5.2 [Innermost DP-Graph [4]] The innermost dependency graph (in- nermost DP-graph for short) of a TRS R is a directed graph whose nodes are the dependency pairs and there is an arc from s → t to u → v if there exist normal substitutions σ and τ such that t σ −−−→∗ u τ and u τ is a normal form with respect
in,R
to R.

An approximated innermost DP-graph is a graph that contains the innermost DP-graph as a subgraph. Such computable graphs are proposed in [4], for example.
Theorem 5.3 Let R be a TRS and G be an approximated innermost DP-graph of R. If at least one node in the cycle is right-ground for every cycle of G, then innermost termination of R is decidable.
Proof. From Lemma 5.1.	 
Example 5.4 Let R5 = {f (s(x)) → g(x), g(s(x)) → f (s(0))}. Then DP(R5) = 
{f (s(x)) → g (x), g (s(x)) → f (s(0))}. The innermost DP-graph of R5 has one cycle, which contains a right-ground node [Fig. 1]. The innermost termination of R5 is decidable by Theorem 5.3. Actually we know R5 is innermost terminating from the procedure in the proof of Theorem 3.9 since all innermost reduction sequences from f (s(0)) terminate.

Fig. 1. The innermost DP-graph of R5


Example 5.5 Let R6 = {a → b, f (a, x) → x, f (x, b) → g(x, x), g(b, x) → h(f (a, a), x)}. Then DP(R6) = {f (x, b) → g (x, x), g (b, x) → f (a, a), g (b, x) → a }. The innermost DP-graph of R6 has one cycle, which contains a right- ground node [Fig. 2]. The innermost termination of R6 is decidable by Theorem 5.3. Actually we know R6 is not innermost terminating from the procedure in the proof of Theorem 3.9 by detecting the looping sequence f (a, a) −−−→ f (b, b) −−−→ g(b, b) −−−→ h(f (a, a), b).

in,R6
in,R6
in,R6




Fig. 2. The innermost DP-Graph of R6
Context-Sensitive Termination
We extend the class for which μ-termination is decidable by using the dependency graph. The class extended in this subsection is the class that satisfies the condition of Corollary 4.17.
Lemma 5.6 Let R be a TRS and μ be an F-map. If μ-termination of R is equiv- alent to the non-existence of a context-sensitive dependency chain that contains inﬁnite use of right-ground rules in DPF (R, μ), then μ-termination of R is decid- able.
Proof. We apply the procedure used in the proof of Lemma 4.22 starting with terms u1, u2,..., un, where u ’s are all ground right-hand sides of rules in DPF (R, μ). Suppose R is non-μ-terminating, then we have a context-sensitive dependency chain with infinite use of right-ground rules in DPF (R, μ). Similar to the μ-semi- constructor case, we have a looping sequence u −−→+ C [u ], which can be detected
μ,R
by the procedure.	 
Definition 5.7 [Context-Sensitive DP-Graph [2]] The context-sensitive dependency graph (context-sensitive DP-graph for short) of a TRS R and an F-map μ is a directed graph whose nodes are elements of DP(R, μ):
There is an arc from s → t ∈ DPF (R, μ) to u → v ∈ DP(R, μ) if there exist substitutions σ and τ such that tσ −−−→∗ uτ .
μ ,R
There is an arc from s → t ∈ DPV (R, μ) to each dependency pair u → v ∈
DP(R, μ).
Similar to the innermost case, a computable approximated context-sensitive DP- graph is proposed [2,3].
Theorem 5.8 Let R be a TRS, μ be an F-map and G be an approximated context- sensitive DP-graph of R. The property μ-termination of R is decidable if one of following holds for every cycle in G.
The cycle contains at least one node that is right-ground.
All nodes in the cycle are elements in DP1 (R, μ).
Proof. From Lemma 5.6 and Theorem 4.16.	 
Example 5.9 Let R7 = {h(x) → g(x, x), g(a, x) → f (b, x), f (x, x) → h(a), a →
b} and μ4(f ) = μ4(g) = μ4(h) = {1} [10].  Then DP(R7, μ4) = {h (x) →
g (x, x), g (a, x) → f (b, x), f (x, x) → h (a), f (x, x) → a }. The context- sensitive DP-graph of R7 and μ4 has one cycle, which contains a right-ground node [Fig.3]. The μ4-termination of R7 is decidable by Theorem 5.8. Actually we know

R7 is μ4-terminating from the procedure in the proof of Theorem 4.15 since all
μ4-reduction sequences from h(a) terminate.


Fig. 3. The context-sensitive DP-Graph of R7 and μ4


Example 5.10 Let μ5(g) = {2} and μ5(f ) = μ5(h) = {1}.  Consider the μ5-termination of R7.  The context-sensitive DP-graph for R7 and μ5 is the same as the one for R7 and μ4 [Fig.3].  The μ5-termination of R7 is decidable by Theorem 5.8. By the decision procedure, we can detect the μ5-looping se- quence h(a) −−−−→ g(a, a) −−−−→ g(a, b) −−−−→ f (b, b) −−−−→ h(a). Thus R7 is non-

μ5,R7
μ5-terminating.
μ5,R7
μ5,R7
μ5,R7

The class of TRSs that satisfy the conditions of Theorem 5.8 is a superclass of the class of TRS that satisfy the conditions of Corollary 4.17. The class of semi- constructor TRSs and the class of TRSs that satisfy the conditions of Theorem 5.8 are not included in each other.
Example 5.11 The TRS R7 with an F-map μ4 satisfies the condition of Theo- rem 5.8, but is not semi-constructor TRS. On the other hand, the TRS R3 with an F-map μ2 is a semi-constructor TRS, but does not satisfy the second condition of Theorem 5.8.

Conclusion
We have shown that innermost termination for semi-constructor TRSs is a decid- able property and μ-termination for semi-constructor TRSs and μ-semi-constructor TRSs are decidable properties.
It is not difficult to implement the procedures in proofs of Theorem 3.9, Theo- rem 4.15 and Theorem 4.22. The class of semi-constructor TRSs are a rather small class: approximately 3 % of the TRSs in the termination problem data base 4.0 [1] are in this class. We can extend the decidable classes if we succeed in developing a method for good approximated DP-graphs.
In the future we will study the decidability of innermost termination and μ- termination by applying known techniques for termination results [7,13]. Currently, innermost termination for shallow TRSs is known to be decidable [7]. There are several future works, studying whether the condition FFIVDC is removed from Theorem 4.15 or not, and extending the class of semi-constructor TRSs by using notions of context-sensitive DP-graph.

Acknowledgement
We would like to thank the anonymous referees for their helpful comments and remarks. This work is partly supported by MEXT.KAKENHI #18500011 and #16300005.

References
The termination problems data base. http://www.lri.fr/˜marche/tpdb/.
B. Alarc´on, R. Guti´errez, and S. Lucas. Context-sensitive dependency pairs. In the 26th Conference on Foundations of Software Technology and Theoretical Computer Science, volume 4337 of Lecture Notes in Computer Science, pages 298–309, 2006.
B. Alarc´on, R. Guti´errez, and S. Lucas. Improving the context-sensitive dependency graph. Electronic Notes in Theoretical Computer Science, 188:91–103, 2007.
T. Arts and J. Giesl. Termination of term rewriting using dependency pairs. Theoretical Computer Science, 236:133–178, 2000.
F. Baader and T. Nipkow. Term rewriting and all that. Cambridge University Press, 1998.
N. Dershowitz. Termination of linear rewriting systems. In the 8th International Colloquium on Automata, Languages and Programming, volume 115 of Lecture Notes in Computer Science, pages 448–458, 1981.
G. Godoy, E. Huntingford, and A. Tiwari. Termination of rewriting with right-flat rules. In the 18th International Conference on Rewriting Techniques and Applications, volume 4533 of Lecture Notes in Computer Science, pages 200 – 213, 2007.
G. Godoy and A. Tiwari. Termination of rewrite systems with shallow right-linear, collapsing, and right-ground rules. In the 20th International Conference on Automated Deduction, volume 3632 of Lecture Notes in Computer Science, pages 164–176, 2005.
G. Huet and D. Lankford. On the uniform halting problem for term rewriting systems. Technical report, INRIA, 1978.
S. Lucas. Proving termination of context-sensitive rewriting by transformation. Information and Computation, 204:1782–1846, 2006.
I. Mitsuhashi, M. Oyamaguchi, Y. Ohta, and T. Yamada. The joinability and unification problems for confluent semi-constructor trss. In the 15th International Conference on Rewriting Techniques and Applications, volume 3091 of Lecture Notes in Computer Science, pages 285 – 300, 2004.
T. Nagaya and Y. Toyama. Decidability for left-linear growing term rewriting systems. Information and Computation, 178:499–514, 2002.
Y. Wang and M. Sakai. Decidability of termination for semi-constructor trss, left-linear shallow trss and related systems. In the 17th International Conference on Rewriting Techniques and Applications, volume 4098 of Lecture Notes in Computer Science, pages 343–356, 2006.
