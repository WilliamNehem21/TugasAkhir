Electronic Notes in Theoretical Computer Science 180 (2007) 35–53	
www.elsevier.com/locate/entcs

Non-Interference Control Synthesis for Security Timed Automata1
Guillaume Gardey∗ John Mullins∗∗ Olivier H. Roux∗2
∗ IRCCyN/CNRS
BP 92101 1 rue de la No¨e 44321 Nantes Cedex 3 France.
∗∗ E´cole Polytechnique de Montr´eal
P.O. Box 6079, Station Centre-ville, Montreal (Quebec), Canada, H3C 3A7.


Abstract
In this paper, the problem of synthesizing controllers that ensures non interference for multilevel security dense timed discrete event systems modeled by an extension of Timed Automata, is addressed for the first time. We first discuss a notion of non interference for dense real-time systems that refines notions existing in the literature and investigate decidability issues raised by the verification problem for dense time properties. We then prove the decidability of the problem of synthesis of the timed controller for some of these timed non interference properties, providing so a symbolic method to synthesize a controller that ensures them.
Keywords: Non-interference, control synthesis, verification, decidability, Timed Automata.


Introduction
Non interference. Nowadays computing environments allow users to employ pro- grams that are sent or fetched from different sites to achieve their goal, either in private or in an organization. Such programs may be run as a code to do simple calculation task or as interactive communicating programs doing IO operations or communications. Sometimes they deal with secret information such as a private data of a user or as classified data of an organization. Similar situations may occur in any computing environments where multiple users share common computing re- sources. One of the basic concerns in such context is to ensure programs not to leak sensitive data to a third party, either maliciously or inadvertently. This is one of the key aspects of the security concerns, that is often called secrecy . The information

1 Work supported by an NSERC grant (Canadian Government) and by the ACI grant (French Government)
Cortos (Control and Observation of Real-Time Open Systems)
2 Currently at the E´cole Polytechnique de Montr´eal

1571-0661 © 2007 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2005.05.046

flow analysis addresses this concern by clarifying conditions when a flow of infor- mation in a program is safe (i.e. high-level information never flows into low-level channels). These conditions named non interference properties, capture any causal dependency between high-level actions and low-level behavior. Their characteriza- tion has appeared rapidly out of the scope of the safety-liveness classification of system properties achieved by the system verification community during the last twenty five years. Also, in recent years, verification of information flow security has become an emergent field of research in computer science with a success story in its application to the analysis of cryptographic protocols where numerous uniform and concise characterizations of information flow security properties (e.g. confiden- tiality, authentication, non-repudiation or anonymity) in terms of non-interference have been proposed.
Timed non interference verification problem. The growing importance of verification for real-time systems, leads naturally to the next question of whether proof techniques developed in the untimed setting can be generalized for timed systems in order to be able to capture, besides the logical information flows, also the time dependent interference, e.g. timing covert channel [8]. Some untimed bisimulation-based non interference properties for information flow studied in [9] have been reformulated in [17] in a discrete time setting. In [5], some state-based and trace-based non interference properties have been introduced in a dense time setting using timed automata.
Timed non interference control problem. A natural generalization of security verification is control of security which is useful in the context of automated security system design. The problem here is not to verify that the system meets a given security policy, but to control the system in such a way that the security policy is met. In this framework, a system, often called a plant, is usually viewed as open and interacting with a “hostile” environment. The problem then is to synthesize a controller such that no matter how the environment behaves, the controlled plan satisfies the given security policy. The controller can control only a subset of actions of the plant, referred to as the controllable actions while the non-controllable actions represent the environment actions. In a real-time framework, the plant is modeled using discrete or continuous clocks. Recent researches have presented symbolic control synthesis algorithms for Timed Automata [14,2,7].
Organization of the paper and contributions.  In this paper, we complete the dense time picture for non interference started in [5] by reformulating in this setting some untimed bisimulation-based non interference properties for informa- tion flow studied in [9] and by introducing a cosimulation-based notion of timed non interference (section 3). Also, we investigate decidability issues raised by the problem of their verification as real-time requirements of finite-state systems. We then focus (section 4) on the state-based and cosimulation-based timed non inter- ference properties and prove the decidability of the problem of synthesis of their timed controller. The main result of the paper is a symbolic method to synthesize a

controller that ensures these properties. Finally, an example (section 5) is given to illustrate this method for the cosimulation-based timed non interference property. In the next section we give a short presentation of the notion of Timed Automata used in this paper.

Timed Automata
In this section we recall the definitions of Timed Automata (section 2.2) and some of their constructors. But first, some preliminaries about Timed Transition Systems and their behavior are given in section 2.1 in order to express semantics of Timed Automata.
Timed Transition Systems
Definition 2.1 [Timed Transition Systems] A timed transition system (TTS) over the set of actions Σ is a tuple S = (Q, Q0, Σ, −→) where Q is a set of states, Q0 ⊆ Q is the set of initial states, Σ is a finite set of actions disjoint from R≥0,
−→⊆ Q × (Σ ∪ R≥0) × Q is a set of edges. We also write q −−e→ q' for (q, e, q') ∈−→.
Definition 2.2 [Timed Similation] Let S1 = (Q1, Q1, Σ, −→1) and S2 = (Q2, Q2, Σ, −→2) be two TTS and ± be a binary relation over Q1 × Q2. We write s ± s' for (s, s') ∈ ±. ± is a strong (timed) simulation relation of S1 by S2 if: 1) if

s1 ∈ Q1 there is some s2 ∈ Q2 s.t. s1 ± s2; 2) if s1 −→d
1 s'
with d ∈ R≥0 and s1 ± s2

0	0	1
then s2 −→d 2 s' for some s' , and s' ± s' ; 3) if s1 −→a 1 s'
with a ∈ Σ and s1 ± s2

a	2	2	1	2	1
then s2 −→2 s' and s' ± s' .
A TTS S2 strongly simulates S1 if there is a strong (timed) simulation relation of
S1 by S2. We write S1 ±S S2 in this case.
When there is a strong simulation relation ± of S1 by S2 and also a strong simulation ±' of S2 by S1, we have a strong (timed) cosimulation relation. When
±'=±−1, we have a strong (timed) bisimulation relation and we write S1 ≈S S2.
Let S = (Q, Q0, Σε, −→) be a TTS. We now use the ε-abstract TTS Sε = (Q, Qε, Σ, −→ε) by:

q −→d
ε q' with d ≥ R≥0 iff there is a run ρ = q −→∗
q' with Untimed(ρ) = ε and

Duration(ρ)= d,

q −→a
ε q' with a ∈ Σ iff there is a run ρ = q −→∗
q' with Untimed(ρ) = a and

Duration(ρ)= 0,
Qε = {q | ∃q' ∈ Q0 | q' −→∗

q and Duration(ρ)=0 ∧ Untimed(ρ)= ε}.

Definition 2.3 [Weak Timed Simulation] Let S1 = (Q1, Q1, Σε, −→1) and S2 = (Q2, Q2, Σε, −→2) be two TTS and ± be a binary relation over Q1 × Q2. ± is a weak (timed) simulation relation of S1 by S2 if it is a strong timed simulation
relation of Sε by Sε. A TTS S2 weakly simulates S1 if there is a weak (timed)
simulation relation of S1 by S2. We write S1 ±W S2 in this case.

When there is a weak simulation relation ± of S1 by S2 and also a weak simula- tion ±' of S2 by S1, we have a weak (timed) cosimulation relation. When ±'=±−1, we have a weak (timed) bisimulation relation and we write S1 ≈W S2.
Remark 2.4 Remark that if S1 ±S S2 then S1 ±W S2 and if S1 ±W S2 then L(S1) ⊆ L(S2). In particular, weak timed bisimulation refines weak timed cosimu- lation that refines timed language (or trace) equivalence.
Finally, we introduced a definition of a TTS induced by a set of states which is informally the restriction of the TTS to a given set of states.
Definition 2.5 [TTS induced by a set of states] Let S = (Q, Q0, Σ, →) a TTS and Y ⊆ Q. The TTS induced by Y on S is the TTS SY = (Y, Q0 ∩ Y, Σ, →i) where →i is defined by: (q, •, q') ∈→i⇔ q ∈ Y ∧ q' ∈ Y ∧ (q, •, q') ∈→

Timed Automata
Timed Automata (TA) were introduced by Alur & Dill [3] and have since been extensively studied. This model is an extension of finite automata with (dense time) clocks and enables one to specify real-time systems.
Definition 2.6 [Timed Automaton] A Timed Automaton A is a tuple (L, l0, X, Σε, E,Inv) where: L is a finite set of locations; l0 ∈ L is the initial location; X is a finite set of positive real-valued clocks; Σε = Σ ∪ {ε} is a finite set of actions and ε is the silent action; E ⊆ L × C(X) × Σε × 2X × L is a finite set of edges, e = ⟨l, γ, a, R, l'⟩ ∈ E represents an edge from the location l to the location l' with the guard γ, the label a and the reset set R ⊆ X; Inv ∈ C(X)L assigns an invariant to any location. We restrict the invariants to conjuncts of terms of the form x ≤ r for x ∈ X and r ∈ N and ≤∈ {<, ≤}.
Definition 2.7 [Semantics of a Timed Automaton] The semantics of a Timed Au- tomaton A = (L, l0, X, Σε, E,Inv) is a timed transition system SA = (Q, q0, Σε, →) with Q = L × (R≥0)X, q0 = (l0, 0) is the initial state and → is defined by:


(l, v) −→a


(l', v')	iff	Fired(l, γ, a, R, l') ∈ E s.t.
 

v' = v[R '→ 0]
⎪⎩Inv(l')(v')= tt


We denote QA, for the set of states of A. A run ρ of A is an initial run of SA. The timed language accepted by A is L(A)= L(SA).

State space abstraction
The analysis of a TA is based on the exploration of a finite graph, the region graph, where the nodes are symbolic states i.e. an equivalence classes of clock values. The state space is built by analyzing successors of the initial region (forward

analysis) [3]. Actually efficient forward (and backward) algorithms using regions do not code regions but zones, a finite convex union of regions because regions suffer of a combinatorial explosions and are quite uneasy to manipulate [14].

Constructors
Lets finally introduce some constructors over Timed Automata in order to ex- press timed information flow in concurrent timed systems.
To describe a system as a parallel composition of Timed Automata, we use the classical composition notion based on a synchronization function a` la Arnold-Nivat. Let X = {x1, ··· , xn} be a set of clocks, A1, . . . , An be n Timed Automata with Ai = (Ni, li,0, X, Σ, Ei,Invi). A synchronization function f is a partial function from (Σ ∪ {•})n ‹→ Σ where • is a special symbol used when an automaton is not involved in a step of the global system. We denote by (A1| ... |An)f the parallel composition of the Ai’s w.r.t. f . The configurations of (A1| ... |An)f are pairs (l, v) with l = (l1,... , ln) ∈ N1 × ... × Nn and v = (v1, ··· , vn) where each vi is the value of the clock xi ∈ X.
Definition 2.8 [Hiding Timed Automata] Let A = (L, l0, X, Σε, E,Inv) be a TA and Γ ⊆ Σ. We define the Γ-hiding TA A/Γ = (L, l0, X, (Σ \ Γ)ε, E/Γ,Inv) (with hided Γ-transitions) by ⟨l, γ, a, R, l'⟩∈ E/Γ iff (1) a ∈ (Σ \ Γ)ε and ⟨l, γ, a, R, l'⟩∈ E or (2) a = ϵ and there is a transition ⟨l, γ, b, R, l'⟩∈ E with b ∈ Γ.
Transitions labeled with Γ are replaced by ϵ transitions, simulating so the hiding of information.
Definition 2.9 [Restriction Timed Automata] Let A = (L, l0, X, Σε, E,Inv) be a TA and Γ ⊆ Σ. We define the Γ-restriction TA A\Γ = (L, l0, X, (Σ \ Γ)ε, E\Γ,Inv) (without Γ-transitions) by ⟨l, γ, a, R, l'⟩∈ E\Γ iff a ∈ (Σ \ Γ)ε and ⟨l, γ, a, R, l'⟩∈ E.
All transitions labeled with Γ are cut off the Timed Automaton.

Timed Non Interference for Security	Timed Au- tomata
In this section, we reformulate some non interference properties for information flow analysis in dense time discrete event systems previously studied in an untimed [9] or discrete time [17] setting. So we refine the notion of timed non interference for Timed Automata introduced in [5]. We start with Strong Non-deterministic Non Interference (SNNI). The basic idea of SNNI is that the public behavior of a system is not affected by the effects of its private behavior. We define this property on different behavior notions in section 3.3: trace equivalence, weak cosimulation, weak bisimulation and reachability equivalence. We then classify these properties among them and address decidability issues raised by their verification. A timed security model based on Timed Automata is presented in section 3.2.

x1 ≤ 3	x1 ≤ 3






Fig. 1. Non-interfering automaton and interfering Timed Automaton
An introductory example
Let start by considering informally how information flow prohibition arises in in- teracting transition systems, taking a simple example. Consider first the transition system depicted on the left-hand side of the Figure 1. Suppose we attach secrecy levels to each action, for example h1 ∈ Σpriv and l1 ∈ Σpub. Intuitively this means that we wish interaction at h1 to be secret, while interaction at l1 may be known by a wider public: any private action may interact at h1 and l1, while a public action may interact only at l1. None of the public observers i.e. observers allowed to observe (or react) only the public actions, has the possibility to know whether an interaction with h1 happened or not. Otherwise stated, no causal dependency from private behavior may be inferred by any public observer. However adding timing constraints on this transition system could introduce prohibited information flow from the private level to the public one. As an illustration suppose that l1 can- not occurs from s0 before 2 time units as depicted by the Timed Automaton on the right-hand side of the Figure 1, then any public observer has the possibility to know whether an interaction with h1 happened or not in the eventuality of l1 occurring from s2 before 2 time units i.e. there is a correlation between some private behavior and some public observation.
A Timed Security Model
We are looking at extended Timed Automata to model processes and computations of computing entities interacting at different trust levels.
Definition 3.1 [Security Timed Automaton] A Security Timed Automaton is a Timed Automaton whose the set of visible actions Σ is partitioned in 2 sets Σpub, Σpriv.
The set Σpriv represents the actions of a high level user to which secrecy can be attached. Σlow is the set of actions of low level users.
Timed Information Flow Properties
The introductory example discussed in the section 3.1 motivates the following defi- nitions.
Timed Strong Non-deterministic Non Interference

x1 ≤ 3	x1 ≤ 3	x1 ≤ 3	x1 ≤ 3






Fig. 2. Timed CSNNI : an interfering and a non-interfering TA
SNNI has been first proposed by Focardi [9] as a trace-based generalization of non interference for concurrent systems.
Definition 3.2 [Timed SNNI] Let A, a Security Timed Automaton. A satisﬁes
timed strong non-deterministic non interference (timed SNNI) if and only if
L(A/Σpriv )= L(A\Σpriv )
This definition stands that a timed system is timed SNNI iff a low level user can only observe timed words of A\Σpriv . It is then impossible for a low level user observing the timed words of the system to deduce information on the high level.
Timed Cosimulation-based SNNI
We now give a weak timed cosimulation non interference definition.
Definition 3.3 [Timed Cosimulation-based SNNI] Let A, a Security Timed Au- tomaton. A satisﬁes timed cosimulation non-deterministic non interference (timed CSNNI) if and only if
SA/Σpriv ±W SA

Consider the Timed Automaton depicted on the right hand side of the Figure 2. It is easy to see that it is timed CSNNI. Indeed, the capability of a public observer to interact at low1 is not correlated to the occurrence of hi1 while such a correla- tion exists for the Timed Automaton depicted on the left hand side. Any public interaction at low1 for 1 ≤ x1 < 2 is correlated to the occurrence of hi1.
The next result presents a characterization of timed cosimulation non- deterministic non interference (timed CSNNI) in terms of cosimulation and will often be used as an alternative to Def. 3.3 in the sequel:
Theorem 3.4 A Security Timed Automaton A satisﬁes timed cosimulation non- deterministic non interference (timed CSNNI) iff
SA/Σpriv ±W SA\Σpriv	(1)
SA\Σpriv ±'  SA/Σpriv	(2)
Proof. Equation 1 is obtained from definition 3.3: as A/Σpriv is defined over Σpub we have SA/Σpriv ±W SA ⇔ SA/Σpriv ±W SA\Σpriv . Equation 2 is obtained directly



x1 ≤ 3	x1 ≤ 3	x1 ≤ 3	x1 ≤ 3






Fig. 3. Timed BSNNI : an interfering and a non-interfering TA

from definitions of Timed Automata, hiding and restriction: for any TA over Σ =

Σpriv ∪ Σpub, we have SA\Σpriv ±'
SA/Σpriv . Furthermore ±'
is not necessarily

equal to ±−1.	 

Timed Bisimulation-based SNNI

We now give a timed version of the bisimulation-based definition of strong non- deterministic non interference proposed in [9]. Actually, any bisimulation-based information flow property presented in [9] could be recast in a similar manner. Fig. 2 and Fig. 3 illustrates differences between CSNNI and BSNNI.
Definition 3.5 [Timed Bisimulation-based SNNI] Let A, a Security Timed Au- tomaton. A satisﬁes timed bisimulation-based strong non-deterministic non inter- ference (timed BSNNI) if and only if
SA/Σpriv ≈W SA\Σpriv


The figure 3 represents an interfering and a non-interfering Timed Automata. The one at the left hand side is interfering since any low level interaction at low1 for 1 ≤ x1 < 2 is correlated to the occurrence of hi1.

Timed State NNI

In [5], authors propose a decidable notion of timed non deterministic non- interference based on states. We reformulate it as follows :
Definition 3.6 [Timed State NNI] Let A be a Security Timed Automaton over Σ (Σ = Σpub ∪ Σpriv). A is said to be Timed State Non Deterministic Non Interfering (timed StNNI) if and only if:

QA/Σpriv = QA\Σpriv i.e. QA = QA\Σpriv

Let us note that as QA\Σpriv ⊆ QA, then timed StNNI is equivalent to QA/Σpriv ⊆
QA\Σpriv i.e. QA ⊆ QA\Σpriv .

Ordering relation among properties
Theorem 3.7 (Timed non interference classification)
timed-BSNNI ⇒ timed-CSNNI ⇒ timed-SNNI	(3)
timed-SNNI /⇒ timed-CSNNI /⇒ timed-BSNNI	(4)
Proof. Equation 3 follows directly Remark 2.4.
Concerning the strict implications 4, we present here a counterexample for the last implication. Let us consider the Timed Automaton depicted on the right hand side of the Figure 2. It is timed-CSSNI, however is not timed BSNNI since a public observer after interacting with low1 has now the capability to detect the deadlock correlated to the occurrence of hi1.

Remark 3.8 There is no ordering between Timed StNNI and any of the previous non interference definitions presented here.
Remark 3.9 It can be proved that 0-trace-non-interference introduced in [5] is equivalent to Timed StNNI.
Decidability results
Theorem 3.10 (Timed SNNI decidability) Timed SNNI is undecidable.
Proof. We prove that the universality problem for TA can be reduced to a timed SNNI problem. Let A be a TA over Σ. The Security Timed Automaton Af is constructed from A by adding a new edge labeled with h /∈ Σ from the initial locality of A to a new locality lu and for each action a ∈ Σ, a loop over lu with label a. We set Σpub = Σ and Σpriv = {h}. Clearly, A accepts universal timed language iff Af is timed trace non-interfering. As universality problem is known to be undecidable for TA, it follows that timed SNNI problem is also undecidable. 
Theorem 3.11 (Timed BSNNI, CSNNI and StNNI decidability) timed BSNNI, timed CSNNI and timed StNNI are decidable.
Proof. Simulation [1] and bisimulation [12] are decidable for TA and then timed BSNNI and timed CSNNI are decidable. As reachability [3] is decidable for TA, timed StNNI is also decidable.	 

Timed Non-Interference Controllability
Introduction
Recent researches have presented symbolic control synthesis algorithms for Timed Automata [20,14,2]. The aim of such algorithms is to design an agent (also named controller or supervisor) that restricts the behavior of the initial system so that a property of interest is modeled by the controlled system also called closed-loop system.

In such frameworks, the set of actions of the model is classically partitioned into controllable and uncontrollable actions. Controllable actions, corresponding to system actions, can be disabled, delayed or forced by the controller whereas uncontrollable actions, denoting actions from environment, cannot be restricted. In order to address symbolic control synthesis for Security Timed Automata, the set of actions Σ is here, more or less arbitrarily, partitioned in two sets Σpub, Σpriv. Σpub is the set of uncontrollable actions and Σpriv is the set of controllable actions. Actually, the choice for partitioning will depends on what is considered as intruder’s actions.
We formalize the controller of a Security Timed Automaton in the following definition:
Definition 4.1 [Controller] Let A = (L, l0, X, Σ, E,Inv) be a Security Timed Au- tomaton over Σ (Σ = Σpub ∪ Σpriv). A controller C = (LC , lC, X, Σ, EC ,InvC ) for A is a Timed Automaton over Σ such that AC = (A|C)fc where AC = (LC , (l0, lC), X, Σ, EC ,InvC ) with LC ∈ L × LC and fc is a control synchroniza- tion function defined by fc(a, a)= a.
The controller must not restrict uncontrollable behavior in the following sense: Let (lA, lC) a locality of AC,
∀⟨lA, γ, a, R, l' ⟩ ∈ E s.t. a ∈ Σpub, there is an edge ⟨(lA, lC ), γ, a, R, (l' , l' )⟩ ∈ 
A	A  C
EC,
if ∄⟨(lA, lC ), γ, a, R, (l' , l' )⟩∈ EC with a ∈ Σpriv then InvC(lA, lC )= Inv(lA)
A  C
The first condition claims that the controller cannot prevent the firing of uncon- trollable edges. The rationale behind the second condition is the following:
One cannot impose the firing of an uncontrollable transition but on the other hand if from a state, it is possible to fire both an uncontrollable transition and a controllable transition, then one can force the firing of the controllable transition by a temporal constraint as long as the uncontrollable transition is not fired.
In the timed framework, the cornerstone to solutions of control problems is the
controllable predecessors operator denoted π(X) [14,2,19].
Definition 4.2 [Controllable predecessors] Let X ⊆ Q be a set of states of a Se- curity Timed Automaton S. The set of controllable predecessors of X is defined by:


π(X)= {q ∈ Q | ((∃δ ∈ IR≥0 ∃a ∈ Σ ∃q' ∈ X, q −→δ −→a
q')

∨ (∃δ ∈ IR≥0 ∃q' ∈ X, q −→δ
q'))

∧ ∀δu ∈ IR≥0 if ∃au ∈ Σ

low
, q'
/∈ X, q −δ→u −a→u	'

then ∃δc < δu ac ∈ Σpriv, ∃q' ∈ X q −δ→c −a→c
q' }


Informally, q is a controllable predecessor of X iff:
a state q' of X is reachable by time elapsing and firing of a transition,

for any uncontrollable transition diverging from X, the controller can take a decision at an earlier date to constraint the system in X.

Timed Non-interference control problems
In this section we define and propose solutions for some timed non-interference control problem. We prove the decidability of control problems of timed-StNNI and timed-CSNNI by giving algorithms for the synthesis of controller guaranteeing these two properties. As well as the safety control problem for Timed Automata, the TTS solution given by the algorithm can be both interpreted as the system in closed-loop and the controller. For all these problems, the controller that forbids any controllable actions is a solution but not necessarily the most permissive.

Timed-StNNI Control Problem
First, we consider the Timed State Non-Interference Control Problem.
Definition 4.3 [Timed-StNNI Control Problem] Let A be a Security Timed Au- tomaton over Σ (Σ = Σpub ∪ Σpriv). A StNNI controller C for A (according to def. 4.1) is a Timed Automaton over Σ such that :
Q((A|C)fc )/Σpriv = Q((A|C)fc )\Σpriv

i.e. Q(A|C)fc = Q((A|C)fc )\Σpriv

Let us consider the solution of the safety control problem on A that is to find a controller C such that Q(A|C)fc ⊆ QA\Σpriv .
Proposition 4.4 If C is the solution of the control problem Q(A|C)fc ⊆ QA\Σpriv ,
C is a solution of timed-StNNI if and only if:


∀q ∈ Q(A|C)fc ∃ρ = τ1
low1
... τn
lown
∈ S(A|C)fc , lowi
∈ Σpub
such that q
ρ
0 −→ q


Proof. Let C the solution of the safety control problem Q(A|C)fc ⊆ QA\Σpriv .
If C is the solution of the timed-StNNI problem then Q(A|C)fc ⊆ Q((A|C)fc )\Σpriv . Since the property holds for all states of Q((A|C)fc )\Σpriv , it also holds for any state of Q(A|C)fc .
The converse is straightforward.	 
This characterization gives rise to a decision procedure for the timed-StNNI control problem:
Theorem 4.5 (Timed-StNNI Control Problem Decidability) The timed- StNNI control problem is decidable and there exists a state-based controller C such that (A|C)fc is timed-StNNI.

Proof. The main idea is to use a classical controllable predecessors algorithm ex- tended with a step that ensures that all states computed are reachable from the ini- tial states by a sequence of low level actions (Σpub), that is states of ((A|C)fc )\Σpriv . Since the controller can restrict the behaviors of the system, this step ensures that computed states belong to the set of states of ((A|C)fc )\Σpriv .
In order to detail, let us consider the region graph of A, R∗ [3].
R∗ has a finite number of regions.The iterative process given by X0 = QA\Σpriv
−−−−−−→
and X	= X ∩ π(X ) ∩	∗(π(X )) will converge after finitely many steps

i+1	i
i	PostΣpub	i

for TA. Let the greatest fixed point obtained be denoted by X∗.
The TTS induced by X∗ on A is timed-StNNI.
It is straightforward that ∀iXi ⊆ QA\Σpriv and that the TTS verifies the condi- tion of the proposition 4.4

Timed-CSNNI Control Problem

In this section, we will prove that timed-CSNNI is decidable and a controller is computable. Intuitively, the computation method we propose consists first in computing the (controllable as well as uncontrollable) non interfering behavior of the STA A that is to say the intersection of behavior of A with the behavior of A\Σpriv given by the product (A|A\Σpriv )f synchronized on actions of Σpub and free on actions of Σpriv. The controllable behavior guaranteeing the non-interference property is then extracted from this result.
Definition 4.6 [Timed-CSNNI Control Problem] Let A be a Security Timed Au- tomaton over Σ = Σpub ∪ Σpriv. A CSSNI controller C for A (according to def. 4.1) is a timed automaton over Σ such that:
S(A|C)/Σpriv ±W S(A|C)\Σpriv

Let us now define the simulation relation we will use to prove that the timed- CSNNI problem is decidable :
Definition 4.7 [Simulation relation] Let q = (l1, l2, v) ∈ Q(A|C)/Σpriv and q' = (l' , l' , v') ∈ Q(A|C)\Σpriv : q ± q' ⇔ l2 = l' ∧ v = v'
1  2	2
Since S(A|C)\Σpriv ± SA\Σpriv (the controller restrict the behavior of A), we will also note q ± q' for any q = (l1, l2, v) ∈ Q(A|C)\Σpriv  and q' = (l' , v') ∈ QA\Σpriv  if
and only if l2 = l' and v = v'.
Definition 4.8 [Unfolding of A over (A|A\Σpriv )f ] Let A = (L, l0, X, Σ, E,Inv) be a TA over Σ = Σpub ∪Σpriv. Let A' = (L', (l' , l' ), X, Σ, E',Inv')) with L' ∈ L× L be
0  0

a TA defined by A' = (A|A\Σ
a ∈ Σpub.

priv
)f where f (a, •)= a, if a ∈ Σpriv and f (a, a)= a

The TA A'' = (L'', (l0, l0), X, Σ, E'',Inv'') with L'' ∈ (L × L) ∪ {bad} is the unfolding of A over A' iff :




x ≤ 3
l0


x ≥ 2, low
low

l2








L'' = L' ∪ {bad}
Fig. 4. A and A\Σpriv

∀e' = ⟨(li, lj), γ', a, R', (l', l' )⟩∈ E' such that e = ⟨li, γ, a, R, l'⟩∈ E
i  j	i
we have ⟨(li, lj), γ, a, R, (l' , l' )⟩∈ E'',
i  j
∀e = ⟨l, γ, a, R, l'⟩∈ E such that a ∈ Σpub, ∀(l, li) ∈ L' and (l', lj) ∈ L'
we have ⟨(l, li), γ, a, R, (l', lj)⟩∈ E'',
∀e = ⟨l, γ, a, R, l'⟩∈ E such that a ∈ Σpub, ∀(l, li) ∈ L' and (l', lj) /∈ L'
we have ⟨(l, li), γ, a, R, (bad)⟩ ∈ E'',
∀l = (li, lj ) ∈ L'',Inv(l)= Inv(li)
The second and the fifth requirements relax the constraints inherited from A\Σpriv . The third and the fourth requirements add edges over public actions re- moved by (A|A\Σpriv )f . We use the location bad as destination of edges leading to location not in L'.
Remark 4.9 A' is easily seen to be Timed-CSNNI (see figure 5). By synchronizing A with A\Σ  , we isolate all non-interfering behaviors of A. We will then use A' to compute a controller for A.
Remark 4.10 Unfolding of A over A' has the same discrete structure as A' but extended with the behavior of A. This Timed Automaton will be then used to isolate states that are timed-CSNNI and compute the controller ensuring the timed-CSNNI property.

Definition 4.11 [States of A'' similar to states of A\Σ


priv
] Let us consider the

Timed Automaton A'' and the set of states of A': QA' ⊆ QA'' . We note SiSt(A') the set of states defined by:
SiSt(A')= {q ∈ QA' | if ∃low ∈ Σpub st. q −l−o→w ∈ E''
then ∃q' ∈ QA\Σpriv st. q ± q' ∧ q' −l−o→w ∈ EA\Σpriv }




x ≤ 3
l0l0


x ≥ 2, low



l2l2
low

x ≤ 3
l0l0


x ≥ 2, low



l2l2
low



x ≥ 0,h 
x ≥ 2,
low
x ≥ 0,
hi
x ≥ 1,
low
x ≥ 0,h 
x ≥ 2,
low
x ≥ 0,
hi
x ≥ 1,
low



x ≤ 3
l1l0
l1l2
x ≤ 3
l1l0
l1l2

Fig. 5. A' = (A|A\Σ	)f and A''


SiSt(A') contains all states that are weakly similar to a state of A\Σ	. That is, for every state q = (l1, l2, v) such that the transition low is possible in the TTS

defined by A'', there exists also such a transition (l2, v) −l−o→w
in the TTS defined by

A\Σ	. Considering the example of the figure 5, (l1, l0,x = 1) /∈ SiSt(A') since

(l0,x = 1) −/ l−o→w
for A\Σpriv .

The sketch of the method to find a controller is then the following:
Compute A' (This is timed-CSSNI) and the unfolding A'' of A.
Compute the largest controllable subset of SiSt(A')) preserving the timed- CSNNI property, that is states of S(A|C)/Σpriv weakly timed similar to a state of S(A|C)\Σpriv . Informally, at each iteration, a set of controllable safe states is computed and then refined to match the timed-CSNNI property.
More in detail, let us consider the algorithm 1 where R\Σpriv (X) = {q ∈

X | ∃q
0 ∈ Q0, ∃(τi) ∈ (R≥0
)n, ∃(low ) ∈ (Σ	)n,  q	−τ→1  q	−l−ow−→1  q' ··· −l−ow−→n

'  = q ∧ ∀i, qi, q'
∈ X} is the set of states that are reachable only by elaps-

ing of time or low level actions (Σpub) such that all intermediary states remain
'	∗	ρ	'

in X, Pred ∗
priv
(X) = {q  ∈ Q |∃q
∈ X, ∃ρ ∈ Σpriv  q −→ q } is the set

of predecessors of X by a sequence of discrete controllable transitions (Σpriv),

Predlow(X) = {q ∈ Q |∃q' ∈ X q
−l−o→w
q', low ∈ Σpub}, is the set of discrete

predecessors of X by an uncontrollable transition, PredY
priv
(X) = {q ∈ Y | q −h−i→1

q  −h−i→2
q2 ... −h→n
qn ∧ q, q1,... qn−1 ∈ Y, qn ∈ Y  ∧ ∀i, hii ∈ Σpriv} is the set of

predecessors of X by a sequence of discrete controllable transitions such that all intermediary states remain in Y , π(X) is the classical controllable predecessor op- erator and Sim(X, Y )= {q ∈ X | ∃q' ∈ Yq ± q'} is the set of states X similar to Y .
Algorithm 1 (Alg) We  note  Alg  the  following  ﬁx-point  algo- rithm:
1: X0 ← SiSt(A')
2: repeat
3:	Xi+1 ← π(Xi)

4:	Xi+1 ← Sim(Xi+1, R\Σpriv (Xi+1))
5:	for all l ∈ Σpub do

6:	Y ← Pred ∗
priv
(Predlow(Xi+1))

7:	Z ← PredXi+1 (PredXi+1 (Xi+1))

∗
priv
8:	X' ← Xi+1 \ (Z \ Y )
9: until X' = Xi
low

Proposition 4.12 If Alg converges, we note X∗ the solution. The TTS induced by X∗ on SA'' is CSNNI.
Proof. We have to prove that (SX∗ )	±	(SX∗ )	.

A''
SX
/Σpriv	W
A''
\Σpriv

'

X∗
A'' \Σ

Let q ∈ Q
A'' . According to line 4 of the algorithm, ∃q ∈ Q
priv such that

q ± q'. It there exists a firing sequence q −h−i1−..−.h−i→n  s −l−o−w→1  r then q ± s (and so
SX∗
q' ± s) and ∃r' ∈ Q A'' \Σpriv such that r ± r' (line 4). We also have with lines

5–8, s, r ∈ X∗. Since s −l−o−w→1
r and q' ± s, q' −l−o−w→1
r'. So q' −l−o−w→1
r' and r ± r'.

Consequently, q and q' fulfill the weak timed simulation (by replacing all hii by ϵ).
The proof would be similar for continuous transitions.	 
Proposition 4.13 The algorithm Alg terminates.
Proof. The convergence of the algorithm is ensured by the region graph R∗ [3]: the family sequence (Xi) is monotone (Xi+1 ⊆ Xi) over a finite domain R∗.	 
As a corollary of propositions 4.12 and 4.13, we get the following result:
Theorem 4.14 (Timed-CSNNI Control Problem Decidability) Timed- CSNNI is decidable and a controller is computable.
Indeed, since the synchronization function (fc) is total, the TTS solution given by the algorithm can be both interpreted as the system in closed-loop and the controller for the system (as for safety control problem on TA). The complete method is illustrated on a simple example in the next section.

CSNNI Control Problem - A simple example
Let us consider the Security Timed Automaton A of figure 6 and the CSNNI control problem on A.
Following the method proposed in section 4.2.2, we compute A' = (A|C)f . A'
is represented in figure 7. We are then able to compute QA' (table 1).
Given QA' and A'' we can then compute SiSt(A')(table 2). For instance, at state (l2, l0, x1 = 1) the firing of low1 is possible for A'' while it is not possible for the state (l0, x1 = 1) in A'. So this state must be discarded. The aim of the controller will be to prevent this state to be reachable.
The solution of the algorithm 1 is the set of states of table 3 which can be transformed into the Timed Automaton of the figure 9.


Table' 1
QA


Table 2
SiSt(A')

Table 3
Solution of control algorithm 1

x1 ≤ 3	x1 ≤ 3	x1 ≤ 3

Fig. 6. Control example :A and A\Σpriv

x1 ≤ 3	x1 ≤ 3






Fig. 7. Control example : A'

x1 ≤ 3	x1 ≤ 3






Fig. 8. Control example : A''

x1 ≤ 3	x1 ≤ 3






Fig. 9. Solution of the CSNNI control problem on A

Conclusion and future work
In this paper we have reformulated SNNI in dense time setting for four semantics of Security Timed Automata and addressed the decidability issues of their associate verification problem. We have also addressed, for the first time, the control syn- thesis problem for Timed CSNNI and Timed StSNNI and, in each case, provided algorithms computing an associated controller.
In the following we would like to highlight four specific aspects we intend to focus our attention on, in view of further developments: Timed BSNNI controller, verification and controller synthesis for Timed BNDC, timed control with partial

observability and Timed Intransitive Non Interference.
Control synthesis techniques for Timed BSNNI. Of course it remains to extend control synthesis to Timed BSNNI to complete the picture depicted in this paper.
Proof and control synthesis techniques for Timed BNDC. In [9] it is pro- posed Bisimulation-based nondeducibility on Composition (BNDC) as the most nat- ural untimed information flow property: a system S satisfies BNDC if for any private level user Π, the public behavior of S is not affected by its interaction with Π. A next issue is the extension to a dense time reformulation of BNDC in our theory together with related proof and control synthesis techniques.
Timed non interference control synthesis with partial observability. De- pending on the nature of the plant, the non-controllable actions could be observable (full observability) or only a proper subset (partial observability) may be observable by the controller. In the timed setting, partial observability assumption applies not only to uncontrollable actions but also to the clocks of the security system.
Timed intransitive non interference control synthesis. Non interference en- sures absence of information flow. But absence of information flow is rarely very interesting as a description of confidentiality, as many practical applications are intended to preserve confidentiality, but nonetheless leak information. Also, an- other important issue is the extension to dense time reformulation of Intransitive Non Interference (INI). This term refers to information flow properties required of systems like downgraders in which it may be legitimate for information to flow indirectly between two users but not directly. A clever and complete development of INI can be found in [18]. It is formulated in terms of purging and based on Moore and Mealy machines. Purging involves applying a function to the history of the system up to which removes all those parts that should not influence what a given agent sees. This purge-based definition of INI has been also characterized in [11] in terms of observability in the context of Discrete Event Systems (DES) as introduced by Lin and Wonham [13]. Recently Hadj-Alouane, Lin and Yeddes [10] in a personal communication presented a preliminary work in view of an extension of this purge-based definition of INI to dense time in the context of Timed Au- tomata and it has to be stressed that nor decidability of Timed INI or Timed INI control synthesis are addressed in this draft. Moreover all the approaches to INI mentioned above are limited to deterministic systems and thus are not applicable to distributed systems. However nondeterministic generalizations for untimed INI have been proposed in [16,15,4,6].

References
Aceto, L., A. Ing´olfsd´ottir, M. L. Pedersen and J. Poulsen, Characteristic formulae for timed automata, RAIRO - Theoretical Informatics and Applications 34 (2000), pp. 565–584.
Altisen, K. and S. Tripakis, Tools for controller synthesis of timed systems, in: RT-TOOLS’02, 2002.

Alur, R. and D. Dill, A theory of timed automata, Theoretical Computer Science 126 (1994), pp. 183– 235.


Backes, M. and B. Pfitzmann, Intransitive non-interference for cryptographic pusposes, in: Proc. of the IEEE Symp. on Security and Privacy, 140–152, 2003.
Barbuti, R. and L. Tesei, A decidable notion of timed non-interference, Fundamenta Informaticae 54
(2003), pp. 137–150.
Bossi, A., C. Piazza and S. R. S. Rossi, Modelling downgrading in information flow security, in: 17th IEEE Computer Security Foundations Workshopsp (CSFW’2004), 2004, pp. 187–.
D’Souza, D. and P. Madhusudan, Timed control synthesis for external specifications, in: Proc. STACS ’02, number 2285 in LNCS, 2002.
Felten, E. W. and M. A. Schneider, Timing attacks on web privacy, in: CCS ’00: Proceedings of the 7th ACM conference on Computer and communications security (2000), pp. 25–32.
Focardi, R. and R. Gorrieri, Classification of security properties (part I: Information flow), in:
R. Focardi and R. Gorrieri, editors, Foundations of Security Analysis and Design I: FOSAD 2000 Tutorial Lectures, Lecture Notes in Computer Science 2171 (2001), pp. 331–396.
Hadj-Alouane, N., F. Lin and M. Yeddes, Timed intransitive non-interference, Personal communication (2004), pp. 1–4.
Hadj-Alouane, N. B., S. Lafrance, F. Lin, J. Mullins and M. Yeddes, Characterizing intransitive non- interference in security policies with observability, IEEE Trans. on Automatic Control (2004).
Laroussinie, F., K. G. Larsen and C. Weise, From timed automata to logic – and back, in: J. Wiedermann and P. H´ajek, editors, Proceedings of the 20th International Symposium on Mathematical Fundations of Computer Science (MFCS’95), Lecture Notes in Computer Science 969 (1995), pp. 27–41.
URL  http://www.lsv.ens-cachan.fr/Publis/PAPERS/PS/LLW-mfcs95.ps.gz
Lin, F. and W. M. Wonham, On observability of discrete-event systems, Information Sciences 44 (1988),
pp. 173–198.
Maler, O., A. Pnueli and J. Sifakis, On the synthesis of discrete controllers for timed systems, in:
E. Mayr and C. Puech, editors, Proc. STACS ’95, number 900 in LNCS (1995), pp. 229–242.
Mantel, H., Information flow control flow and applications – bridging a gap, in: Proc. of the International Symposium of Formal Methods Europe (FME’01), 153–172, 2001.
Mullins, J., Nondeterministic admissible interference 6 (2000), pp. 1054–1070.
URL http://www.jucs.org/jucs 6 11/

R. Focardi, R. G. and F. Martinelli, Real-time information flow analysis, IEEE Journal on Selected Areas in Communications 21 (2003), pp. 20–35.
Rushby, J., Noninterference, transitivity and channel-control security policies, Technical Report CSL- 92-02, SRI International, Menlo Park CA, USA (1992).
Tripakis, S., “The analysis of timed systems in practice,” Ph.D. thesis, Universit´e Joseph Fourier (1998).
Wong-Toi, H. and G. Hoffmann, The control of dense real-time dicrete event systems, in: Proc. 30th IEEE Conf. Decision and Control, 1527–1528, 1991.
